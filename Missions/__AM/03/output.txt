// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 19 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 18
// DebugMode ;
  14: CALL 27 0 0
// end ;
  18: END
// export debug ; function Init ; begin
  19: LD_INT 0
  21: PPUSH
// end ;
  22: LD_VAR 0 1
  26: RET
// export function DebugMode ; begin
  27: LD_INT 0
  29: PPUSH
// end ; end_of_file
  30: LD_VAR 0 1
  34: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
  35: LD_INT 0
  37: PPUSH
  38: PPUSH
// if exist_mode then
  39: LD_VAR 0 2
  43: IFFALSE 62
// unit := CreateCharacter ( ident ) else
  45: LD_ADDR_VAR 0 4
  49: PUSH
  50: LD_VAR 0 1
  54: PPUSH
  55: CALL_OW 34
  59: ST_TO_ADDR
  60: GO 77
// unit := NewCharacter ( ident ) ;
  62: LD_ADDR_VAR 0 4
  66: PUSH
  67: LD_VAR 0 1
  71: PPUSH
  72: CALL_OW 25
  76: ST_TO_ADDR
// result := unit ;
  77: LD_ADDR_VAR 0 3
  81: PUSH
  82: LD_VAR 0 4
  86: ST_TO_ADDR
// end ;
  87: LD_VAR 0 3
  91: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
  92: LD_INT 0
  94: PPUSH
  95: PPUSH
  96: PPUSH
  97: PPUSH
// for i = 1 to count do
  98: LD_ADDR_VAR 0 8
 102: PUSH
 103: DOUBLE
 104: LD_INT 1
 106: DEC
 107: ST_TO_ADDR
 108: LD_VAR 0 6
 112: PUSH
 113: FOR_TO
 114: IFFALSE 195
// begin uc_side = side ;
 116: LD_ADDR_OWVAR 20
 120: PUSH
 121: LD_VAR 0 1
 125: ST_TO_ADDR
// uc_nation = nation ;
 126: LD_ADDR_OWVAR 21
 130: PUSH
 131: LD_VAR 0 2
 135: ST_TO_ADDR
// hc_gallery =  ;
 136: LD_ADDR_OWVAR 33
 140: PUSH
 141: LD_STRING 
 143: ST_TO_ADDR
// hc_name =  ;
 144: LD_ADDR_OWVAR 26
 148: PUSH
 149: LD_STRING 
 151: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
 152: LD_INT 0
 154: PPUSH
 155: LD_VAR 0 5
 159: PPUSH
 160: LD_VAR 0 4
 164: PPUSH
 165: CALL_OW 380
// un = CreateHuman ;
 169: LD_ADDR_VAR 0 10
 173: PUSH
 174: CALL_OW 44
 178: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
 179: LD_VAR 0 10
 183: PPUSH
 184: LD_VAR 0 3
 188: PPUSH
 189: CALL_OW 52
// end ;
 193: GO 113
 195: POP
 196: POP
// end ;
 197: LD_VAR 0 7
 201: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
// uc_side := GetSide ( b ) ;
 207: LD_ADDR_OWVAR 20
 211: PUSH
 212: LD_VAR 0 2
 216: PPUSH
 217: CALL_OW 255
 221: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 222: LD_ADDR_OWVAR 21
 226: PUSH
 227: LD_VAR 0 2
 231: PPUSH
 232: CALL_OW 248
 236: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_VAR 0 1
 247: PPUSH
 248: CALL_OW 380
// un = CreateHuman ;
 252: LD_ADDR_VAR 0 4
 256: PUSH
 257: CALL_OW 44
 261: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 262: LD_ADDR_VAR 0 5
 266: PUSH
 267: LD_VAR 0 2
 271: PPUSH
 272: CALL_OW 254
 276: PUSH
 277: LD_INT 3
 279: MINUS
 280: ST_TO_ADDR
// if dir < 0 then
 281: LD_VAR 0 5
 285: PUSH
 286: LD_INT 0
 288: LESS
 289: IFFALSE 305
// dir := 6 + dir ;
 291: LD_ADDR_VAR 0 5
 295: PUSH
 296: LD_INT 6
 298: PUSH
 299: LD_VAR 0 5
 303: PLUS
 304: ST_TO_ADDR
// SetDir ( un , dir ) ;
 305: LD_VAR 0 4
 309: PPUSH
 310: LD_VAR 0 5
 314: PPUSH
 315: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 319: LD_VAR 0 4
 323: PPUSH
 324: LD_VAR 0 2
 328: PPUSH
 329: CALL_OW 52
// end ; end_of_file
 333: LD_VAR 0 3
 337: RET
// export JMM , Bobby , Cyrus , Lisa , Khatam , Brian , Jerry ; export function PrepareAmerican ; var i , un , tmp , others , vehicles ; begin
 338: LD_INT 0
 340: PPUSH
 341: PPUSH
 342: PPUSH
 343: PPUSH
 344: PPUSH
 345: PPUSH
// uc_side := 1 ;
 346: LD_ADDR_OWVAR 20
 350: PUSH
 351: LD_INT 1
 353: ST_TO_ADDR
// if debug then
 354: LD_EXP 1
 358: IFFALSE 427
// begin for i = 1 to 4 do
 360: LD_ADDR_VAR 0 2
 364: PUSH
 365: DOUBLE
 366: LD_INT 1
 368: DEC
 369: ST_TO_ADDR
 370: LD_INT 4
 372: PUSH
 373: FOR_TO
 374: IFFALSE 425
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 3 ) ;
 376: LD_INT 0
 378: PPUSH
 379: LD_INT 1
 381: PPUSH
 382: LD_INT 2
 384: PPUSH
 385: CALL_OW 12
 389: PPUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 380
// un := CreateHuman ;
 397: LD_ADDR_VAR 0 3
 401: PUSH
 402: CALL_OW 44
 406: ST_TO_ADDR
// others := others ^ un ;
 407: LD_ADDR_VAR 0 5
 411: PUSH
 412: LD_VAR 0 5
 416: PUSH
 417: LD_VAR 0 3
 421: ADD
 422: ST_TO_ADDR
// end ;
 423: GO 373
 425: POP
 426: POP
// end ; JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 427: LD_ADDR_EXP 2
 431: PUSH
 432: LD_STRING JMM
 434: PPUSH
 435: LD_EXP 1
 439: NOT
 440: PPUSH
 441: CALL 35 0 2
 445: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 446: LD_ADDR_EXP 3
 450: PUSH
 451: LD_STRING Bobby
 453: PPUSH
 454: LD_EXP 1
 458: NOT
 459: PPUSH
 460: CALL 35 0 2
 464: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 465: LD_ADDR_EXP 4
 469: PUSH
 470: LD_STRING Cyrus
 472: PPUSH
 473: LD_EXP 1
 477: NOT
 478: PPUSH
 479: CALL 35 0 2
 483: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 484: LD_ADDR_EXP 5
 488: PUSH
 489: LD_STRING Lisa
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: CALL 35 0 2
 502: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
 503: LD_ADDR_EXP 6
 507: PUSH
 508: LD_STRING Khatam
 510: PPUSH
 511: LD_EXP 1
 515: NOT
 516: PPUSH
 517: CALL 35 0 2
 521: ST_TO_ADDR
// Brian := PrepareUnit ( Brian , ( not debug ) ) ;
 522: LD_ADDR_EXP 7
 526: PUSH
 527: LD_STRING Brian
 529: PPUSH
 530: LD_EXP 1
 534: NOT
 535: PPUSH
 536: CALL 35 0 2
 540: ST_TO_ADDR
// Jerry := PrepareUnit ( Jerry , ( not debug ) ) ;
 541: LD_ADDR_EXP 8
 545: PUSH
 546: LD_STRING Jerry
 548: PPUSH
 549: LD_EXP 1
 553: NOT
 554: PPUSH
 555: CALL 35 0 2
 559: ST_TO_ADDR
// if Bobby then
 560: LD_EXP 3
 564: IFFALSE 595
// tmp := Insert ( tmp , tmp + 1 , Bobby ) ;
 566: LD_ADDR_VAR 0 4
 570: PUSH
 571: LD_VAR 0 4
 575: PPUSH
 576: LD_VAR 0 4
 580: PUSH
 581: LD_INT 1
 583: PLUS
 584: PPUSH
 585: LD_EXP 3
 589: PPUSH
 590: CALL_OW 2
 594: ST_TO_ADDR
// if Cyrus then
 595: LD_EXP 4
 599: IFFALSE 630
// tmp := Insert ( tmp , tmp + 1 , Cyrus ) ;
 601: LD_ADDR_VAR 0 4
 605: PUSH
 606: LD_VAR 0 4
 610: PPUSH
 611: LD_VAR 0 4
 615: PUSH
 616: LD_INT 1
 618: PLUS
 619: PPUSH
 620: LD_EXP 4
 624: PPUSH
 625: CALL_OW 2
 629: ST_TO_ADDR
// if Lisa then
 630: LD_EXP 5
 634: IFFALSE 665
// tmp := Insert ( tmp , tmp + 1 , Lisa ) ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 4
 650: PUSH
 651: LD_INT 1
 653: PLUS
 654: PPUSH
 655: LD_EXP 5
 659: PPUSH
 660: CALL_OW 2
 664: ST_TO_ADDR
// if Khatam then
 665: LD_EXP 6
 669: IFFALSE 700
// tmp := Insert ( tmp , tmp + 1 , Khatam ) ;
 671: LD_ADDR_VAR 0 4
 675: PUSH
 676: LD_VAR 0 4
 680: PPUSH
 681: LD_VAR 0 4
 685: PUSH
 686: LD_INT 1
 688: PLUS
 689: PPUSH
 690: LD_EXP 6
 694: PPUSH
 695: CALL_OW 2
 699: ST_TO_ADDR
// if Brian then
 700: LD_EXP 7
 704: IFFALSE 735
// tmp := Insert ( tmp , tmp + 1 , Brian ) ;
 706: LD_ADDR_VAR 0 4
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_VAR 0 4
 720: PUSH
 721: LD_INT 1
 723: PLUS
 724: PPUSH
 725: LD_EXP 7
 729: PPUSH
 730: CALL_OW 2
 734: ST_TO_ADDR
// if Jerry then
 735: LD_EXP 8
 739: IFFALSE 770
// tmp := Insert ( tmp , tmp + 1 , Jerry ) ;
 741: LD_ADDR_VAR 0 4
 745: PUSH
 746: LD_VAR 0 4
 750: PPUSH
 751: LD_VAR 0 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: PPUSH
 760: LD_EXP 8
 764: PPUSH
 765: CALL_OW 2
 769: ST_TO_ADDR
// others := CreateCharacterSet ( 02_other_survivors ) ;
 770: LD_ADDR_VAR 0 5
 774: PUSH
 775: LD_STRING 02_other_survivors
 777: PPUSH
 778: CALL_OW 31
 782: ST_TO_ADDR
// if others then
 783: LD_VAR 0 5
 787: IFFALSE 805
// tmp := tmp ^ others ;
 789: LD_ADDR_VAR 0 4
 793: PUSH
 794: LD_VAR 0 4
 798: PUSH
 799: LD_VAR 0 5
 803: ADD
 804: ST_TO_ADDR
// end ;
 805: LD_VAR 0 1
 809: RET
