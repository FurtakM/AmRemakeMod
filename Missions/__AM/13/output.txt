// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1907 0 0
// PrepareHeroes ;
  45: CALL 732 0 0
// PrepareRandoms ;
  49: CALL 2149 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
  66: LD_EXP 1
  70: PPUSH
  71: LD_STRING D1-JMM-1
  73: PPUSH
  74: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  78: LD_EXP 2
  82: PPUSH
  83: LD_STRING D1-Pow-1
  85: PPUSH
  86: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  90: LD_EXP 2
  94: PPUSH
  95: LD_STRING D1-Pow-1a
  97: PPUSH
  98: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 102: LD_EXP 2
 106: PPUSH
 107: LD_STRING D1-Pow-1b
 109: PPUSH
 110: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 114: LD_EXP 2
 118: PPUSH
 119: LD_STRING D1-Pow-1c
 121: PPUSH
 122: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 126: LD_EXP 1
 130: PPUSH
 131: LD_STRING D1-JMM-2
 133: PPUSH
 134: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 138: LD_EXP 2
 142: PPUSH
 143: LD_STRING D1-Pow-2
 145: PPUSH
 146: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 150: LD_EXP 1
 154: PPUSH
 155: LD_STRING D1-JMM-3
 157: PPUSH
 158: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 162: LD_EXP 2
 166: PPUSH
 167: LD_STRING D1-Pow-3
 169: PPUSH
 170: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 174: LD_EXP 1
 178: PPUSH
 179: LD_STRING D1-JMM-4
 181: PPUSH
 182: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 186: LD_EXP 2
 190: PPUSH
 191: LD_STRING D1-Pow-4
 193: PPUSH
 194: CALL_OW 94
// DialogueOff ;
 198: CALL_OW 7
// SelectAndSaveCharacters ;
 202: CALL 2745 0 0
// InGameOff ;
 206: CALL_OW 9
// Query ( Q1 ) ;
 210: LD_STRING Q1
 212: PPUSH
 213: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 217: LD_INT 2
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 424
// end ;
 227: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] ] ) = 8 do var i , cargoType ;
 228: LD_INT 2
 230: PPUSH
 231: LD_INT 22
 233: PUSH
 234: LD_INT 1
 236: PUSH
 237: EMPTY
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 21
 243: PUSH
 244: LD_INT 1
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PPUSH
 255: CALL_OW 71
 259: PUSH
 260: LD_INT 0
 262: EQUAL
 263: PUSH
 264: LD_INT 2
 266: PPUSH
 267: LD_INT 22
 269: PUSH
 270: LD_INT 1
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 21
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 32
 289: PUSH
 290: LD_INT 3
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: LD_INT 33
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: LIST
 311: LIST
 312: PPUSH
 313: CALL_OW 70
 317: PUSH
 318: LD_INT 8
 320: EQUAL
 321: AND
 322: IFFALSE 640
 324: GO 326
 326: DISABLE
 327: LD_INT 0
 329: PPUSH
 330: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 331: LD_INT 2
 333: PPUSH
 334: LD_INT 21
 336: PUSH
 337: LD_INT 2
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: LD_INT 58
 349: PUSH
 350: EMPTY
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 70
 365: PUSH
 366: LD_INT 0
 368: GREATER
 369: IFFALSE 626
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
 371: LD_ADDR_VAR 0 1
 375: PUSH
 376: LD_INT 2
 378: PPUSH
 379: LD_INT 21
 381: PUSH
 382: LD_INT 2
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 3
 391: PUSH
 392: LD_INT 58
 394: PUSH
 395: EMPTY
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 70
 410: PUSH
 411: FOR_IN
 412: IFFALSE 612
// begin cargoType = GetCargoType ( i ) ;
 414: LD_ADDR_VAR 0 2
 418: PUSH
 419: LD_VAR 0 1
 423: PPUSH
 424: CALL_OW 288
 428: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 429: LD_VAR 0 1
 433: PPUSH
 434: CALL_OW 264
 438: PUSH
 439: LD_INT 12
 441: EQUAL
 442: IFFALSE 539
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 444: LD_ADDR_EXP 19
 448: PUSH
 449: LD_EXP 19
 453: PUSH
 454: LD_VAR 0 1
 458: PPUSH
 459: CALL_OW 248
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 265
 473: PUSH
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 262
 483: PUSH
 484: LD_VAR 0 1
 488: PPUSH
 489: CALL_OW 263
 493: PUSH
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 264
 503: PUSH
 504: LD_VAR 0 2
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: LD_VAR 0 2
 518: PPUSH
 519: CALL_OW 289
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: EMPTY
 534: LIST
 535: ADD
 536: ST_TO_ADDR
// end else
 537: GO 610
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 539: LD_ADDR_EXP 19
 543: PUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 1
 553: PPUSH
 554: CALL_OW 248
 558: PUSH
 559: LD_VAR 0 1
 563: PPUSH
 564: CALL_OW 265
 568: PUSH
 569: LD_VAR 0 1
 573: PPUSH
 574: CALL_OW 262
 578: PUSH
 579: LD_VAR 0 1
 583: PPUSH
 584: CALL_OW 263
 588: PUSH
 589: LD_VAR 0 1
 593: PPUSH
 594: CALL_OW 264
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: ADD
 609: ST_TO_ADDR
// end ; end ;
 610: GO 411
 612: POP
 613: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 614: LD_EXP 19
 618: PPUSH
 619: LD_STRING 13_VehiclesIn13_1
 621: PPUSH
 622: CALL_OW 39
// end ; SaveCargos ;
 626: CALL 643 0 0
// ChangeMap ( 13 , %_cont ) ;
 630: LD_INT 13
 632: PPUSH
 633: LD_STRING %_cont
 635: PPUSH
 636: CALL_OW 340
// end ;
 640: PPOPN 2
 642: END
// export function SaveCargos ; var i ; begin
 643: LD_INT 0
 645: PPUSH
 646: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 2
 654: PPUSH
 655: LD_INT 22
 657: PUSH
 658: LD_INT 1
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 34
 667: PUSH
 668: LD_INT 12
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PPUSH
 679: CALL_OW 70
 683: PUSH
 684: FOR_IN
 685: IFFALSE 713
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 687: LD_ADDR_EXP 20
 691: PUSH
 692: LD_EXP 20
 696: PUSH
 697: LD_VAR 0 2
 701: PPUSH
 702: CALL 3560 0 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: ADD
 710: ST_TO_ADDR
 711: GO 684
 713: POP
 714: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 715: LD_EXP 20
 719: PPUSH
 720: LD_STRING 13_ResourcesInCargo13_1
 722: PPUSH
 723: CALL_OW 39
// end ; end_of_file
 727: LD_VAR 0 1
 731: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
 737: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 738: LD_ADDR_VAR 0 4
 742: PUSH
 743: LD_INT 22
 745: PUSH
 746: LD_INT 1
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 2
 755: PUSH
 756: LD_INT 30
 758: PUSH
 759: LD_INT 0
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: PUSH
 766: LD_INT 30
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: ST_TO_ADDR
// uc_side = 1 ;
 790: LD_ADDR_OWVAR 20
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 798: LD_ADDR_EXP 1
 802: PUSH
 803: LD_STRING JMM
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL 2502 0 2
 813: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 814: LD_ADDR_EXP 3
 818: PUSH
 819: LD_STRING Lisa
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: CALL 2502 0 2
 829: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 830: LD_ADDR_EXP 4
 834: PUSH
 835: LD_STRING Donaldson
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 2502 0 2
 845: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 846: LD_ADDR_EXP 5
 850: PUSH
 851: LD_STRING Bobby
 853: PPUSH
 854: LD_INT 1
 856: PPUSH
 857: CALL 2502 0 2
 861: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 862: LD_ADDR_EXP 6
 866: PUSH
 867: LD_STRING Cyrus
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL 2502 0 2
 877: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 878: LD_ADDR_EXP 7
 882: PUSH
 883: LD_STRING Denis
 885: PPUSH
 886: LD_INT 1
 888: PPUSH
 889: CALL 2502 0 2
 893: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 894: LD_ADDR_EXP 8
 898: PUSH
 899: LD_STRING Brown
 901: PPUSH
 902: LD_INT 1
 904: PPUSH
 905: CALL 2502 0 2
 909: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 910: LD_ADDR_EXP 9
 914: PUSH
 915: LD_STRING Gladstone
 917: PPUSH
 918: LD_INT 1
 920: PPUSH
 921: CALL 2502 0 2
 925: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 926: LD_ADDR_EXP 10
 930: PUSH
 931: LD_STRING Houten
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 2502 0 2
 941: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 942: LD_ADDR_EXP 11
 946: PUSH
 947: LD_STRING Cornell
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 2502 0 2
 957: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
 958: LD_ADDR_EXP 12
 962: PUSH
 963: LD_STRING Gary
 965: PPUSH
 966: LD_INT 1
 968: PPUSH
 969: CALL 2502 0 2
 973: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
 974: LD_ADDR_EXP 13
 978: PUSH
 979: LD_STRING Frank
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL 2502 0 2
 989: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
 990: LD_ADDR_EXP 14
 994: PUSH
 995: LD_STRING Kikuchi
 997: PPUSH
 998: LD_INT 1
1000: PPUSH
1001: CALL 2502 0 2
1005: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1006: LD_ADDR_EXP 15
1010: PUSH
1011: LD_STRING Stevens
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL 2502 0 2
1021: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1022: LD_ADDR_EXP 2
1026: PUSH
1027: LD_STRING Powell
1029: PPUSH
1030: LD_INT 0
1032: PPUSH
1033: CALL 2502 0 2
1037: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1038: LD_EXP 1
1042: PPUSH
1043: LD_VAR 0 4
1047: PUSH
1048: LD_INT 1
1050: ARRAY
1051: PPUSH
1052: CALL_OW 250
1056: PPUSH
1057: LD_VAR 0 4
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: PPUSH
1066: CALL_OW 251
1070: PPUSH
1071: LD_INT 4
1073: PPUSH
1074: LD_INT 0
1076: PPUSH
1077: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1081: LD_EXP 15
1085: PPUSH
1086: LD_VAR 0 4
1090: PUSH
1091: LD_INT 1
1093: ARRAY
1094: PPUSH
1095: CALL_OW 250
1099: PPUSH
1100: LD_VAR 0 4
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PPUSH
1109: CALL_OW 251
1113: PPUSH
1114: LD_INT 4
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1124: LD_EXP 3
1128: PPUSH
1129: LD_VAR 0 4
1133: PUSH
1134: LD_INT 1
1136: ARRAY
1137: PPUSH
1138: CALL_OW 250
1142: PPUSH
1143: LD_VAR 0 4
1147: PUSH
1148: LD_INT 1
1150: ARRAY
1151: PPUSH
1152: CALL_OW 251
1156: PPUSH
1157: LD_INT 35
1159: PPUSH
1160: LD_INT 0
1162: PPUSH
1163: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1167: LD_EXP 4
1171: PPUSH
1172: LD_VAR 0 4
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: CALL_OW 250
1185: PPUSH
1186: LD_VAR 0 4
1190: PUSH
1191: LD_INT 1
1193: ARRAY
1194: PPUSH
1195: CALL_OW 251
1199: PPUSH
1200: LD_INT 35
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1210: LD_EXP 5
1214: PPUSH
1215: LD_VAR 0 4
1219: PUSH
1220: LD_INT 1
1222: ARRAY
1223: PPUSH
1224: CALL_OW 250
1228: PPUSH
1229: LD_VAR 0 4
1233: PUSH
1234: LD_INT 1
1236: ARRAY
1237: PPUSH
1238: CALL_OW 251
1242: PPUSH
1243: LD_INT 35
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1253: LD_EXP 6
1257: PPUSH
1258: LD_VAR 0 4
1262: PUSH
1263: LD_INT 1
1265: ARRAY
1266: PPUSH
1267: CALL_OW 250
1271: PPUSH
1272: LD_VAR 0 4
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PPUSH
1281: CALL_OW 251
1285: PPUSH
1286: LD_INT 35
1288: PPUSH
1289: LD_INT 0
1291: PPUSH
1292: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1296: LD_EXP 7
1300: PPUSH
1301: LD_VAR 0 4
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 250
1314: PPUSH
1315: LD_VAR 0 4
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 251
1328: PPUSH
1329: LD_INT 35
1331: PPUSH
1332: LD_INT 0
1334: PPUSH
1335: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1339: LD_EXP 8
1343: PPUSH
1344: LD_VAR 0 4
1348: PUSH
1349: LD_INT 1
1351: ARRAY
1352: PPUSH
1353: CALL_OW 250
1357: PPUSH
1358: LD_VAR 0 4
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: CALL_OW 251
1371: PPUSH
1372: LD_INT 35
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1382: LD_EXP 9
1386: PPUSH
1387: LD_VAR 0 4
1391: PUSH
1392: LD_INT 1
1394: ARRAY
1395: PPUSH
1396: CALL_OW 250
1400: PPUSH
1401: LD_VAR 0 4
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PPUSH
1410: CALL_OW 251
1414: PPUSH
1415: LD_INT 35
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1425: LD_EXP 10
1429: PPUSH
1430: LD_VAR 0 4
1434: PUSH
1435: LD_INT 1
1437: ARRAY
1438: PPUSH
1439: CALL_OW 250
1443: PPUSH
1444: LD_VAR 0 4
1448: PUSH
1449: LD_INT 1
1451: ARRAY
1452: PPUSH
1453: CALL_OW 251
1457: PPUSH
1458: LD_INT 35
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1468: LD_EXP 11
1472: PPUSH
1473: LD_VAR 0 4
1477: PUSH
1478: LD_INT 1
1480: ARRAY
1481: PPUSH
1482: CALL_OW 250
1486: PPUSH
1487: LD_VAR 0 4
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: CALL_OW 251
1500: PPUSH
1501: LD_INT 35
1503: PPUSH
1504: LD_INT 0
1506: PPUSH
1507: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1511: LD_EXP 12
1515: PPUSH
1516: LD_VAR 0 4
1520: PUSH
1521: LD_INT 1
1523: ARRAY
1524: PPUSH
1525: CALL_OW 250
1529: PPUSH
1530: LD_VAR 0 4
1534: PUSH
1535: LD_INT 1
1537: ARRAY
1538: PPUSH
1539: CALL_OW 251
1543: PPUSH
1544: LD_INT 35
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1554: LD_EXP 13
1558: PPUSH
1559: LD_VAR 0 4
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: CALL_OW 250
1572: PPUSH
1573: LD_VAR 0 4
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 251
1586: PPUSH
1587: LD_INT 35
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1597: LD_EXP 14
1601: PPUSH
1602: LD_VAR 0 4
1606: PUSH
1607: LD_INT 1
1609: ARRAY
1610: PPUSH
1611: CALL_OW 250
1615: PPUSH
1616: LD_VAR 0 4
1620: PUSH
1621: LD_INT 1
1623: ARRAY
1624: PPUSH
1625: CALL_OW 251
1629: PPUSH
1630: LD_INT 35
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1640: LD_VAR 0 4
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: LD_STRING epsilon
1651: PPUSH
1652: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1656: LD_VAR 0 4
1660: PUSH
1661: LD_INT 1
1663: ARRAY
1664: PPUSH
1665: CALL_OW 274
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: LD_INT 3000
1675: PPUSH
1676: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1680: LD_VAR 0 4
1684: PUSH
1685: LD_INT 1
1687: ARRAY
1688: PPUSH
1689: CALL_OW 274
1693: PPUSH
1694: LD_INT 2
1696: PPUSH
1697: LD_INT 500
1699: PPUSH
1700: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1704: LD_VAR 0 4
1708: PUSH
1709: LD_INT 1
1711: ARRAY
1712: PPUSH
1713: CALL_OW 274
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: LD_INT 200
1723: PPUSH
1724: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1728: LD_EXP 1
1732: PPUSH
1733: LD_INT 1
1735: PPUSH
1736: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1740: LD_ADDR_EXP 16
1744: PUSH
1745: LD_STRING 12_other_survivors
1747: PPUSH
1748: CALL_OW 31
1752: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
1753: LD_ADDR_EXP 17
1757: PUSH
1758: LD_STRING 11c_others
1760: PPUSH
1761: CALL_OW 31
1765: ST_TO_ADDR
// others11 = others11 diff others12 ;
1766: LD_ADDR_EXP 17
1770: PUSH
1771: LD_EXP 17
1775: PUSH
1776: LD_EXP 16
1780: DIFF
1781: ST_TO_ADDR
// for i in others11 do
1782: LD_ADDR_VAR 0 2
1786: PUSH
1787: LD_EXP 17
1791: PUSH
1792: FOR_IN
1793: IFFALSE 1840
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1795: LD_VAR 0 2
1799: PPUSH
1800: LD_VAR 0 4
1804: PUSH
1805: LD_INT 1
1807: ARRAY
1808: PPUSH
1809: CALL_OW 250
1813: PPUSH
1814: LD_VAR 0 4
1818: PUSH
1819: LD_INT 1
1821: ARRAY
1822: PPUSH
1823: CALL_OW 251
1827: PPUSH
1828: LD_INT 35
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 50
1838: GO 1792
1840: POP
1841: POP
// for i in others12 do
1842: LD_ADDR_VAR 0 2
1846: PUSH
1847: LD_EXP 16
1851: PUSH
1852: FOR_IN
1853: IFFALSE 1900
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1855: LD_VAR 0 2
1859: PPUSH
1860: LD_VAR 0 4
1864: PUSH
1865: LD_INT 1
1867: ARRAY
1868: PPUSH
1869: CALL_OW 250
1873: PPUSH
1874: LD_VAR 0 4
1878: PUSH
1879: LD_INT 1
1881: ARRAY
1882: PPUSH
1883: CALL_OW 251
1887: PPUSH
1888: LD_INT 35
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 50
1898: GO 1852
1900: POP
1901: POP
// end ;
1902: LD_VAR 0 1
1906: RET
// export function PrepareEpsilonBase ; var blist , i , b , un ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1914: LD_INT 113
1916: PPUSH
1917: LD_INT 50
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1927: LD_INT 104
1929: PPUSH
1930: LD_INT 24
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: LD_STRING 10_EpsilonBase
1947: PPUSH
1948: EMPTY
1949: PPUSH
1950: CALL_OW 30
1954: ST_TO_ADDR
// if not blist then
1955: LD_VAR 0 2
1959: NOT
1960: IFFALSE 1964
// exit ;
1962: GO 2144
// uc_side := 1 ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// uc_nation := 1 ;
1972: LD_ADDR_OWVAR 21
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// for i in blist do
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: LD_VAR 0 2
1989: PUSH
1990: FOR_IN
1991: IFFALSE 2142
// begin bc_type := i [ 1 ] ;
1993: LD_ADDR_OWVAR 42
1997: PUSH
1998: LD_VAR 0 3
2002: PUSH
2003: LD_INT 1
2005: ARRAY
2006: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2007: LD_ADDR_OWVAR 43
2011: PUSH
2012: LD_VAR 0 3
2016: PUSH
2017: LD_INT 5
2019: ARRAY
2020: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2021: LD_VAR 0 3
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: PUSH
2030: LD_INT 7
2032: PUSH
2033: LD_INT 8
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: IN
2040: IFFALSE 2070
// begin bc_kind1 := i [ 7 ] ;
2042: LD_ADDR_OWVAR 44
2046: PUSH
2047: LD_VAR 0 3
2051: PUSH
2052: LD_INT 7
2054: ARRAY
2055: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2056: LD_ADDR_OWVAR 45
2060: PUSH
2061: LD_VAR 0 3
2065: PUSH
2066: LD_INT 8
2068: ARRAY
2069: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2070: LD_ADDR_VAR 0 4
2074: PUSH
2075: LD_VAR 0 3
2079: PUSH
2080: LD_INT 2
2082: ARRAY
2083: PPUSH
2084: LD_VAR 0 3
2088: PUSH
2089: LD_INT 3
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 3
2097: PUSH
2098: LD_INT 4
2100: ARRAY
2101: PPUSH
2102: CALL_OW 47
2106: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2107: LD_VAR 0 4
2111: PPUSH
2112: CALL_OW 266
2116: PUSH
2117: LD_INT 32
2119: EQUAL
2120: IFFALSE 2140
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2122: LD_VAR 0 4
2126: PPUSH
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 7
2134: ARRAY
2135: PPUSH
2136: CALL_OW 431
// end ; end ;
2140: GO 1990
2142: POP
2143: POP
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
2153: PPUSH
2154: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
2155: LD_INT 22
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 21
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 69
2183: PUSH
2184: LD_EXP 1
2188: PUSH
2189: LD_EXP 3
2193: PUSH
2194: LD_EXP 4
2198: PUSH
2199: LD_EXP 5
2203: PUSH
2204: LD_EXP 6
2208: PUSH
2209: LD_EXP 7
2213: PUSH
2214: LD_EXP 8
2218: PUSH
2219: LD_EXP 9
2223: PUSH
2224: LD_EXP 10
2228: PUSH
2229: LD_EXP 11
2233: PUSH
2234: LD_EXP 12
2238: PUSH
2239: LD_EXP 13
2243: PUSH
2244: LD_EXP 14
2248: PUSH
2249: LD_EXP 15
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 6
2272: LESS
2273: DIFF
2274: IFFALSE 2497
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
2276: LD_ADDR_VAR 0 4
2280: PUSH
2281: LD_INT 22
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 2
2293: PUSH
2294: LD_INT 30
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 30
2306: PUSH
2307: LD_INT 1
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: ST_TO_ADDR
// uc_side = 1 ;
2328: LD_ADDR_OWVAR 20
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// uc_nation = 1 ;
2336: LD_ADDR_OWVAR 21
2340: PUSH
2341: LD_INT 1
2343: ST_TO_ADDR
// for i = 1 to 6 do
2344: LD_ADDR_VAR 0 2
2348: PUSH
2349: DOUBLE
2350: LD_INT 1
2352: DEC
2353: ST_TO_ADDR
2354: LD_INT 6
2356: PUSH
2357: FOR_TO
2358: IFFALSE 2495
// begin hc_gallery =  ;
2360: LD_ADDR_OWVAR 33
2364: PUSH
2365: LD_STRING 
2367: ST_TO_ADDR
// hc_name =  ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_STRING 
2375: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
2376: LD_INT 0
2378: PPUSH
2379: LD_INT 1
2381: PUSH
2382: LD_INT 2
2384: PUSH
2385: LD_INT 3
2387: PUSH
2388: LD_INT 4
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 1
2399: PPUSH
2400: LD_INT 4
2402: PPUSH
2403: CALL_OW 12
2407: ARRAY
2408: PPUSH
2409: LD_INT 5
2411: PPUSH
2412: LD_INT 8
2414: PPUSH
2415: CALL_OW 12
2419: PPUSH
2420: CALL_OW 380
// un = CreateHuman ;
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: CALL_OW 44
2433: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
2434: LD_ADDR_EXP 18
2438: PUSH
2439: LD_EXP 18
2443: PUSH
2444: LD_VAR 0 3
2448: ADD
2449: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2450: LD_VAR 0 3
2454: PPUSH
2455: LD_VAR 0 4
2459: PUSH
2460: LD_INT 1
2462: ARRAY
2463: PPUSH
2464: CALL_OW 250
2468: PPUSH
2469: LD_VAR 0 4
2473: PUSH
2474: LD_INT 1
2476: ARRAY
2477: PPUSH
2478: CALL_OW 251
2482: PPUSH
2483: LD_INT 15
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 50
// end ;
2493: GO 2357
2495: POP
2496: POP
// end ; end ; end_of_file
2497: LD_VAR 0 1
2501: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
// if exist_mode then
2506: LD_VAR 0 2
2510: IFFALSE 2657
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
2512: LD_EXP 21
2516: PUSH
2517: LD_VAR 0 1
2521: STR
2522: PPUSH
2523: CALL_OW 28
2527: PUSH
2528: LD_INT 1
2530: EQUAL
2531: IFFALSE 2556
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
2533: LD_ADDR_VAR 0 4
2537: PUSH
2538: LD_EXP 21
2542: PUSH
2543: LD_VAR 0 1
2547: STR
2548: PPUSH
2549: CALL_OW 34
2553: ST_TO_ADDR
// end else
2554: GO 2655
// begin if TestCharacters ( 11_ & ident ) = true then
2556: LD_STRING 11_
2558: PUSH
2559: LD_VAR 0 1
2563: STR
2564: PPUSH
2565: CALL_OW 28
2569: PUSH
2570: LD_INT 1
2572: EQUAL
2573: IFFALSE 2596
// begin unit := CreateCharacter ( 11_ & ident ) ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_STRING 11_
2582: PUSH
2583: LD_VAR 0 1
2587: STR
2588: PPUSH
2589: CALL_OW 34
2593: ST_TO_ADDR
// end else
2594: GO 2655
// begin if TestCharacters ( 10c_ & ident ) = true then
2596: LD_STRING 10c_
2598: PUSH
2599: LD_VAR 0 1
2603: STR
2604: PPUSH
2605: CALL_OW 28
2609: PUSH
2610: LD_INT 1
2612: EQUAL
2613: IFFALSE 2636
// unit := CreateCharacter ( 10c_ & ident ) else
2615: LD_ADDR_VAR 0 4
2619: PUSH
2620: LD_STRING 10c_
2622: PUSH
2623: LD_VAR 0 1
2627: STR
2628: PPUSH
2629: CALL_OW 34
2633: ST_TO_ADDR
2634: GO 2655
// unit := CreateCharacter ( 10_ & ident ) ;
2636: LD_ADDR_VAR 0 4
2640: PUSH
2641: LD_STRING 10_
2643: PUSH
2644: LD_VAR 0 1
2648: STR
2649: PPUSH
2650: CALL_OW 34
2654: ST_TO_ADDR
// end ; end ; end else
2655: GO 2672
// begin unit := NewCharacter ( ident ) ;
2657: LD_ADDR_VAR 0 4
2661: PUSH
2662: LD_VAR 0 1
2666: PPUSH
2667: CALL_OW 25
2671: ST_TO_ADDR
// end ; result := unit ;
2672: LD_ADDR_VAR 0 3
2676: PUSH
2677: LD_VAR 0 4
2681: ST_TO_ADDR
// end ;
2682: LD_VAR 0 3
2686: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
2687: LD_INT 0
2689: PPUSH
// if unit in selectedTab then
2690: LD_VAR 0 1
2694: PUSH
2695: LD_VAR 0 3
2699: IN
2700: IFFALSE 2722
// SaveCharacters ( unit , 13c_ & unitString ) else
2702: LD_VAR 0 1
2706: PPUSH
2707: LD_STRING 13c_
2709: PUSH
2710: LD_VAR 0 2
2714: STR
2715: PPUSH
2716: CALL_OW 38
2720: GO 2740
// SaveCharacters ( unit , 13s_ & unitString ) ;
2722: LD_VAR 0 1
2726: PPUSH
2727: LD_STRING 13s_
2729: PUSH
2730: LD_VAR 0 2
2734: STR
2735: PPUSH
2736: CALL_OW 38
// end ;
2740: LD_VAR 0 4
2744: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
2753: LD_ADDR_VAR 0 4
2757: PUSH
2758: LD_EXP 3
2762: PUSH
2763: LD_EXP 4
2767: PUSH
2768: LD_EXP 5
2772: PUSH
2773: LD_EXP 6
2777: PUSH
2778: LD_EXP 7
2782: PUSH
2783: LD_EXP 8
2787: PUSH
2788: LD_EXP 9
2792: PUSH
2793: LD_EXP 10
2797: PUSH
2798: LD_EXP 11
2802: PUSH
2803: LD_EXP 12
2807: PUSH
2808: LD_EXP 13
2812: PUSH
2813: LD_EXP 14
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: ST_TO_ADDR
// tmp = tmp ^ others11 ;
2832: LD_ADDR_VAR 0 4
2836: PUSH
2837: LD_VAR 0 4
2841: PUSH
2842: LD_EXP 17
2846: ADD
2847: ST_TO_ADDR
// tmp = tmp ^ others12 ;
2848: LD_ADDR_VAR 0 4
2852: PUSH
2853: LD_VAR 0 4
2857: PUSH
2858: LD_EXP 16
2862: ADD
2863: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
2864: LD_ADDR_VAR 0 4
2868: PUSH
2869: LD_VAR 0 4
2873: PUSH
2874: LD_EXP 18
2878: ADD
2879: ST_TO_ADDR
// for i in tmp do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: LD_VAR 0 4
2889: PUSH
2890: FOR_IN
2891: IFFALSE 2930
// if GetClass ( i ) = 8 then
2893: LD_VAR 0 2
2897: PPUSH
2898: CALL_OW 257
2902: PUSH
2903: LD_INT 8
2905: EQUAL
2906: IFFALSE 2928
// SetClass ( i , rand ( 1 , 4 ) ) ;
2908: LD_VAR 0 2
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 4
2918: PPUSH
2919: CALL_OW 12
2923: PPUSH
2924: CALL_OW 336
2928: GO 2890
2930: POP
2931: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
2932: LD_ADDR_VAR 0 3
2936: PUSH
2937: LD_STRING 1
2939: PPUSH
2940: LD_INT 6
2942: PPUSH
2943: LD_INT 6
2945: PPUSH
2946: LD_INT -5
2948: PUSH
2949: LD_EXP 1
2953: PUSH
2954: LD_EXP 15
2958: PUSH
2959: LD_INT -2
2961: PUSH
2962: LD_INT -3
2964: PUSH
2965: LD_INT -5
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: PUSH
2982: LD_INT -6
2984: PUSH
2985: LD_INT -4
2987: PUSH
2988: LD_EXP 2
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: ADD
2998: PPUSH
2999: LD_INT 1
3001: PUSH
3002: LD_INT 0
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 2
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 3
3021: PUSH
3022: LD_INT 0
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 4
3031: PUSH
3032: LD_INT 2
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 5
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: PPUSH
3060: CALL_OW 42
3064: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3065: LD_ADDR_VAR 0 5
3069: PUSH
3070: LD_VAR 0 3
3074: PUSH
3075: LD_EXP 3
3079: PUSH
3080: LD_EXP 4
3084: PUSH
3085: LD_EXP 5
3089: PUSH
3090: LD_EXP 6
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_EXP 8
3104: PUSH
3105: LD_EXP 9
3109: PUSH
3110: LD_EXP 10
3114: PUSH
3115: LD_EXP 11
3119: PUSH
3120: LD_EXP 12
3124: PUSH
3125: LD_EXP 13
3129: PUSH
3130: LD_EXP 14
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: DIFF
3149: ST_TO_ADDR
// othersInBase = tmp diff selected ;
3150: LD_ADDR_VAR 0 6
3154: PUSH
3155: LD_VAR 0 4
3159: PUSH
3160: LD_VAR 0 3
3164: DIFF
3165: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3166: LD_ADDR_VAR 0 6
3170: PUSH
3171: LD_VAR 0 6
3175: PUSH
3176: LD_EXP 3
3180: PUSH
3181: LD_EXP 4
3185: PUSH
3186: LD_EXP 5
3190: PUSH
3191: LD_EXP 6
3195: PUSH
3196: LD_EXP 7
3200: PUSH
3201: LD_EXP 8
3205: PUSH
3206: LD_EXP 9
3210: PUSH
3211: LD_EXP 10
3215: PUSH
3216: LD_EXP 11
3220: PUSH
3221: LD_EXP 12
3225: PUSH
3226: LD_EXP 13
3230: PUSH
3231: LD_EXP 14
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: DIFF
3250: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
3251: LD_VAR 0 5
3255: PPUSH
3256: LD_STRING 13c_others
3258: PPUSH
3259: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
3263: LD_VAR 0 6
3267: PPUSH
3268: LD_STRING 13s_others
3270: PPUSH
3271: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
3275: LD_EXP 1
3279: PPUSH
3280: LD_STRING 13c_JMM
3282: PPUSH
3283: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
3287: LD_EXP 15
3291: PPUSH
3292: LD_STRING 13c_Stevens
3294: PPUSH
3295: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
3299: LD_EXP 3
3303: PPUSH
3304: LD_STRING Lisa
3306: PPUSH
3307: LD_VAR 0 3
3311: PPUSH
3312: CALL 2687 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
3316: LD_EXP 4
3320: PPUSH
3321: LD_STRING Donaldson
3323: PPUSH
3324: LD_VAR 0 3
3328: PPUSH
3329: CALL 2687 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
3333: LD_EXP 5
3337: PPUSH
3338: LD_STRING Bobby
3340: PPUSH
3341: LD_VAR 0 3
3345: PPUSH
3346: CALL 2687 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
3350: LD_EXP 6
3354: PPUSH
3355: LD_STRING Cyrus
3357: PPUSH
3358: LD_VAR 0 3
3362: PPUSH
3363: CALL 2687 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
3367: LD_EXP 7
3371: PPUSH
3372: LD_STRING Denis
3374: PPUSH
3375: LD_VAR 0 3
3379: PPUSH
3380: CALL 2687 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
3384: LD_EXP 9
3388: PPUSH
3389: LD_STRING Gladstone
3391: PPUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: CALL 2687 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
3401: LD_EXP 10
3405: PPUSH
3406: LD_STRING Houten
3408: PPUSH
3409: LD_VAR 0 3
3413: PPUSH
3414: CALL 2687 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
3418: LD_EXP 11
3422: PPUSH
3423: LD_STRING Cornel
3425: PPUSH
3426: LD_VAR 0 3
3430: PPUSH
3431: CALL 2687 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
3435: LD_EXP 12
3439: PPUSH
3440: LD_STRING Gary
3442: PPUSH
3443: LD_VAR 0 3
3447: PPUSH
3448: CALL 2687 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
3452: LD_EXP 13
3456: PPUSH
3457: LD_STRING Frank
3459: PPUSH
3460: LD_VAR 0 3
3464: PPUSH
3465: CALL 2687 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
3469: LD_EXP 14
3473: PPUSH
3474: LD_STRING Kikuchi
3476: PPUSH
3477: LD_VAR 0 3
3481: PPUSH
3482: CALL 2687 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
3486: LD_INT 22
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: LD_INT 21
3498: PUSH
3499: LD_INT 1
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PPUSH
3510: CALL_OW 69
3514: PPUSH
3515: LD_INT 4
3517: PPUSH
3518: CALL_OW 235
// SetSide ( selected , 1 ) ;
3522: LD_VAR 0 3
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
3534: LD_EXP 1
3538: PUSH
3539: LD_EXP 15
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: PPUSH
3548: LD_INT 1
3550: PPUSH
3551: CALL_OW 235
// end ;
3555: LD_VAR 0 1
3559: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
3560: LD_INT 0
3562: PPUSH
3563: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
3564: LD_ADDR_VAR 0 2
3568: PUSH
3569: LD_VAR 0 1
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: CALL_OW 289
3581: PUSH
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: CALL_OW 289
3594: PUSH
3595: LD_VAR 0 1
3599: PPUSH
3600: LD_INT 3
3602: PPUSH
3603: CALL_OW 289
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: LIST
3612: ST_TO_ADDR
// end ; end_of_file
3613: LD_VAR 0 2
3617: RET
// on Command ( comandid ) do var i ;
3618: LD_INT 0
3620: PPUSH
// begin if comandid = 65 then
3621: LD_VAR 0 1
3625: PUSH
3626: LD_INT 65
3628: EQUAL
3629: IFFALSE 3670
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
3631: LD_ADDR_VAR 0 2
3635: PUSH
3636: LD_INT 22
3638: PUSH
3639: LD_INT 1
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PUSH
3646: EMPTY
3647: LIST
3648: PPUSH
3649: CALL_OW 69
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3668
// ComStop ( i ) ;
3657: LD_VAR 0 2
3661: PPUSH
3662: CALL_OW 141
3666: GO 3654
3668: POP
3669: POP
// end ;
3670: PPOPN 2
3672: END
