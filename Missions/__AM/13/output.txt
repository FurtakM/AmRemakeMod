// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1947 0 0
// PrepareHeroes ;
  45: CALL 788 0 0
// PrepareRandoms ;
  49: CALL 3070 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 3666 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: LD_INT 58
 321: PUSH
 322: EMPTY
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 70
 340: PUSH
 341: LD_INT 8
 343: EQUAL
 344: AND
 345: IFFALSE 685
 347: GO 349
 349: DISABLE
 350: LD_INT 0
 352: PPUSH
 353: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 21
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 33
 369: PUSH
 370: LD_INT 1
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: LD_INT 3
 379: PUSH
 380: LD_INT 58
 382: PUSH
 383: EMPTY
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 70
 399: PUSH
 400: LD_INT 0
 402: GREATER
 403: IFFALSE 671
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 405: LD_ADDR_VAR 0 1
 409: PUSH
 410: LD_INT 1
 412: PPUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 33
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 3
 435: PUSH
 436: LD_INT 58
 438: PUSH
 439: EMPTY
 440: LIST
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PPUSH
 451: CALL_OW 70
 455: PUSH
 456: FOR_IN
 457: IFFALSE 657
// begin cargoType = GetCargoType ( i ) ;
 459: LD_ADDR_VAR 0 2
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 288
 473: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 264
 483: PUSH
 484: LD_INT 12
 486: EQUAL
 487: IFFALSE 584
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 489: LD_ADDR_EXP 19
 493: PUSH
 494: LD_EXP 19
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 248
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 265
 518: PUSH
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 262
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 263
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 264
 548: PUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PPUSH
 564: CALL_OW 289
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: ADD
 581: ST_TO_ADDR
// end else
 582: GO 655
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 584: LD_ADDR_EXP 19
 588: PUSH
 589: LD_EXP 19
 593: PUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: CALL_OW 248
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: CALL_OW 265
 613: PUSH
 614: LD_VAR 0 1
 618: PPUSH
 619: CALL_OW 262
 623: PUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 263
 633: PUSH
 634: LD_VAR 0 1
 638: PPUSH
 639: CALL_OW 264
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: ADD
 654: ST_TO_ADDR
// end ; end ;
 655: GO 456
 657: POP
 658: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 659: LD_EXP 19
 663: PPUSH
 664: LD_STRING 13_VehiclesIn13_1
 666: PPUSH
 667: CALL_OW 39
// end ; SaveCargos ;
 671: CALL 688 0 0
// ChangeMap ( 13 , %_cont ) ;
 675: LD_INT 13
 677: PPUSH
 678: LD_STRING %_cont
 680: PPUSH
 681: CALL_OW 340
// end ;
 685: PPOPN 2
 687: END
// export function SaveCargos ; var i ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 692: LD_ADDR_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: PPUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 33
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 34
 722: PUSH
 723: LD_INT 12
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: PUSH
 740: FOR_IN
 741: IFFALSE 769
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 743: LD_ADDR_EXP 20
 747: PUSH
 748: LD_EXP 20
 752: PUSH
 753: LD_VAR 0 2
 757: PPUSH
 758: CALL 4492 0 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: ADD
 766: ST_TO_ADDR
 767: GO 740
 769: POP
 770: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 771: LD_EXP 20
 775: PPUSH
 776: LD_STRING 13_ResourcesInCargo13_1
 778: PPUSH
 779: CALL_OW 39
// end ; end_of_file
 783: LD_VAR 0 1
 787: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 794: LD_ADDR_VAR 0 4
 798: PUSH
 799: LD_INT 22
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 2
 811: PUSH
 812: LD_INT 30
 814: PUSH
 815: LD_INT 0
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PPUSH
 841: CALL_OW 69
 845: ST_TO_ADDR
// uc_side = 1 ;
 846: LD_ADDR_OWVAR 20
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 854: LD_ADDR_EXP 1
 858: PUSH
 859: LD_STRING JMM
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL 3423 0 2
 869: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 870: LD_ADDR_EXP 3
 874: PUSH
 875: LD_STRING Lisa
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL 3423 0 2
 885: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 886: LD_ADDR_EXP 4
 890: PUSH
 891: LD_STRING Donaldson
 893: PPUSH
 894: LD_INT 1
 896: PPUSH
 897: CALL 3423 0 2
 901: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 902: LD_ADDR_EXP 5
 906: PUSH
 907: LD_STRING Bobby
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 3423 0 2
 917: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Cyrus
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL 3423 0 2
 933: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 934: LD_ADDR_EXP 7
 938: PUSH
 939: LD_STRING Denis
 941: PPUSH
 942: LD_INT 1
 944: PPUSH
 945: CALL 3423 0 2
 949: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 950: LD_ADDR_EXP 8
 954: PUSH
 955: LD_STRING Brown
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL 3423 0 2
 965: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 966: LD_ADDR_EXP 9
 970: PUSH
 971: LD_STRING Gladstone
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL 3423 0 2
 981: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 982: LD_ADDR_EXP 10
 986: PUSH
 987: LD_STRING Houten
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL 3423 0 2
 997: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 998: LD_ADDR_EXP 11
1002: PUSH
1003: LD_STRING Cornell
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL 3423 0 2
1013: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1014: LD_ADDR_EXP 12
1018: PUSH
1019: LD_STRING Gary
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: CALL 3423 0 2
1029: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1030: LD_ADDR_EXP 13
1034: PUSH
1035: LD_STRING Frank
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: CALL 3423 0 2
1045: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1046: LD_ADDR_EXP 14
1050: PUSH
1051: LD_STRING Kikuchi
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 3423 0 2
1061: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1062: LD_ADDR_EXP 15
1066: PUSH
1067: LD_STRING Stevens
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL 3423 0 2
1077: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1078: LD_ADDR_EXP 2
1082: PUSH
1083: LD_STRING Powell
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 3423 0 2
1093: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1094: LD_EXP 1
1098: PPUSH
1099: LD_VAR 0 4
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: CALL_OW 250
1112: PPUSH
1113: LD_VAR 0 4
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 251
1126: PPUSH
1127: LD_INT 4
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1137: LD_EXP 15
1141: PPUSH
1142: LD_VAR 0 4
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 250
1155: PPUSH
1156: LD_VAR 0 4
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PPUSH
1165: CALL_OW 251
1169: PPUSH
1170: LD_INT 4
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 250
1198: PPUSH
1199: LD_VAR 0 4
1203: PUSH
1204: LD_INT 1
1206: ARRAY
1207: PPUSH
1208: CALL_OW 251
1212: PPUSH
1213: LD_INT 35
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ARRAY
1236: PPUSH
1237: CALL_OW 250
1241: PPUSH
1242: LD_VAR 0 4
1246: PUSH
1247: LD_INT 1
1249: ARRAY
1250: PPUSH
1251: CALL_OW 251
1255: PPUSH
1256: LD_INT 35
1258: PPUSH
1259: LD_INT 0
1261: PPUSH
1262: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1266: LD_EXP 5
1270: PPUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 1
1278: ARRAY
1279: PPUSH
1280: CALL_OW 250
1284: PPUSH
1285: LD_VAR 0 4
1289: PUSH
1290: LD_INT 1
1292: ARRAY
1293: PPUSH
1294: CALL_OW 251
1298: PPUSH
1299: LD_INT 35
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1309: LD_EXP 6
1313: PPUSH
1314: LD_VAR 0 4
1318: PUSH
1319: LD_INT 1
1321: ARRAY
1322: PPUSH
1323: CALL_OW 250
1327: PPUSH
1328: LD_VAR 0 4
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: PPUSH
1337: CALL_OW 251
1341: PPUSH
1342: LD_INT 35
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1352: LD_EXP 7
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 250
1370: PPUSH
1371: LD_VAR 0 4
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PPUSH
1380: CALL_OW 251
1384: PPUSH
1385: LD_INT 35
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_VAR 0 4
1404: PUSH
1405: LD_INT 1
1407: ARRAY
1408: PPUSH
1409: CALL_OW 250
1413: PPUSH
1414: LD_VAR 0 4
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: CALL_OW 251
1427: PPUSH
1428: LD_INT 35
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_VAR 0 4
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 250
1456: PPUSH
1457: LD_VAR 0 4
1461: PUSH
1462: LD_INT 1
1464: ARRAY
1465: PPUSH
1466: CALL_OW 251
1470: PPUSH
1471: LD_INT 35
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1481: LD_EXP 10
1485: PPUSH
1486: LD_VAR 0 4
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: PPUSH
1495: CALL_OW 250
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: ARRAY
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_INT 35
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1524: LD_EXP 11
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 250
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: CALL_OW 251
1556: PPUSH
1557: LD_INT 35
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1567: LD_EXP 12
1571: PPUSH
1572: LD_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: ARRAY
1580: PPUSH
1581: CALL_OW 250
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PPUSH
1595: CALL_OW 251
1599: PPUSH
1600: LD_INT 35
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1610: LD_EXP 13
1614: PPUSH
1615: LD_VAR 0 4
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PPUSH
1624: CALL_OW 250
1628: PPUSH
1629: LD_VAR 0 4
1633: PUSH
1634: LD_INT 1
1636: ARRAY
1637: PPUSH
1638: CALL_OW 251
1642: PPUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1653: LD_EXP 14
1657: PPUSH
1658: LD_VAR 0 4
1662: PUSH
1663: LD_INT 1
1665: ARRAY
1666: PPUSH
1667: CALL_OW 250
1671: PPUSH
1672: LD_VAR 0 4
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: PPUSH
1681: CALL_OW 251
1685: PPUSH
1686: LD_INT 35
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1696: LD_VAR 0 4
1700: PUSH
1701: LD_INT 1
1703: ARRAY
1704: PPUSH
1705: LD_STRING epsilon
1707: PPUSH
1708: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 274
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: LD_INT 3000
1731: PPUSH
1732: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 274
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1760: LD_VAR 0 4
1764: PUSH
1765: LD_INT 1
1767: ARRAY
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 3
1776: PPUSH
1777: LD_INT 200
1779: PPUSH
1780: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1796: LD_ADDR_EXP 16
1800: PUSH
1801: LD_STRING 12_other_survivors
1803: PPUSH
1804: CALL_OW 31
1808: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
1809: LD_ADDR_EXP 17
1813: PUSH
1814: LD_STRING 11_others
1816: PPUSH
1817: CALL_OW 31
1821: ST_TO_ADDR
// for i in others11 do
1822: LD_ADDR_VAR 0 2
1826: PUSH
1827: LD_EXP 17
1831: PUSH
1832: FOR_IN
1833: IFFALSE 1880
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_VAR 0 4
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 4
1858: PUSH
1859: LD_INT 1
1861: ARRAY
1862: PPUSH
1863: CALL_OW 251
1867: PPUSH
1868: LD_INT 15
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 50
1878: GO 1832
1880: POP
1881: POP
// for i in others12 do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: LD_EXP 16
1891: PUSH
1892: FOR_IN
1893: IFFALSE 1940
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PPUSH
1909: CALL_OW 250
1913: PPUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: CALL_OW 251
1927: PPUSH
1928: LD_INT 15
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 50
1938: GO 1892
1940: POP
1941: POP
// end ;
1942: LD_VAR 0 1
1946: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
1947: LD_INT 0
1949: PPUSH
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
1954: PPUSH
1955: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1956: LD_INT 113
1958: PPUSH
1959: LD_INT 50
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1969: LD_INT 104
1971: PPUSH
1972: LD_INT 24
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
1982: LD_INT 43
1984: PPUSH
1985: LD_INT 79
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
1995: LD_INT 43
1997: PPUSH
1998: LD_INT 68
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2008: LD_INT 99
2010: PPUSH
2011: LD_INT 114
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2021: LD_INT 103
2023: PPUSH
2024: LD_INT 114
2026: PPUSH
2027: LD_INT 1
2029: PPUSH
2030: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2034: LD_INT 152
2036: PPUSH
2037: LD_INT 85
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2047: LD_INT 156
2049: PPUSH
2050: LD_INT 92
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_STRING 10_EpsilonBase
2067: PPUSH
2068: EMPTY
2069: PPUSH
2070: CALL_OW 30
2074: ST_TO_ADDR
// if not blist then
2075: LD_VAR 0 2
2079: NOT
2080: IFFALSE 2084
// exit ;
2082: GO 3065
// for i in blist do
2084: LD_ADDR_VAR 0 3
2088: PUSH
2089: LD_VAR 0 2
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2145
// if GetBType ( i [ 1 ] ) = b_depot or GetBType ( i [ 1 ] ) = b_warehouse then
2097: LD_VAR 0 3
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PPUSH
2106: CALL_OW 266
2110: PUSH
2111: LD_INT 0
2113: EQUAL
2114: PUSH
2115: LD_VAR 0 3
2119: PUSH
2120: LD_INT 1
2122: ARRAY
2123: PPUSH
2124: CALL_OW 266
2128: PUSH
2129: LD_INT 1
2131: EQUAL
2132: OR
2133: IFFALSE 2143
// baseCorrect = 1 ;
2135: LD_ADDR_VAR 0 6
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
2143: GO 2094
2145: POP
2146: POP
// if baseCorrect = 0 then
2147: LD_VAR 0 6
2151: PUSH
2152: LD_INT 0
2154: EQUAL
2155: IFFALSE 2860
// begin uc_side = 1 ;
2157: LD_ADDR_OWVAR 20
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// uc_nation = 1 ;
2165: LD_ADDR_OWVAR 21
2169: PUSH
2170: LD_INT 1
2172: ST_TO_ADDR
// bc_level = 10 ;
2173: LD_ADDR_OWVAR 43
2177: PUSH
2178: LD_INT 10
2180: ST_TO_ADDR
// bc_type = b_warehouse ;
2181: LD_ADDR_OWVAR 42
2185: PUSH
2186: LD_INT 1
2188: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2189: LD_INT 99
2191: PPUSH
2192: LD_INT 24
2194: PPUSH
2195: LD_INT 2
2197: PPUSH
2198: CALL_OW 47
// bc_type = b_bunker ;
2202: LD_ADDR_OWVAR 42
2206: PUSH
2207: LD_INT 32
2209: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2210: LD_ADDR_VAR 0 7
2214: PUSH
2215: LD_INT 124
2217: PPUSH
2218: LD_INT 42
2220: PPUSH
2221: LD_INT 4
2223: PPUSH
2224: CALL_OW 47
2228: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2229: LD_VAR 0 7
2233: PPUSH
2234: LD_INT 4
2236: PUSH
2237: LD_INT 5
2239: PUSH
2240: LD_INT 6
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 1
2250: PPUSH
2251: LD_INT 3
2253: PPUSH
2254: CALL_OW 12
2258: ARRAY
2259: PPUSH
2260: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2264: LD_ADDR_VAR 0 7
2268: PUSH
2269: LD_INT 111
2271: PPUSH
2272: LD_INT 16
2274: PPUSH
2275: LD_INT 4
2277: PPUSH
2278: CALL_OW 47
2282: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2283: LD_VAR 0 7
2287: PPUSH
2288: LD_INT 4
2290: PUSH
2291: LD_INT 5
2293: PUSH
2294: LD_INT 6
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: LD_INT 1
2304: PPUSH
2305: LD_INT 3
2307: PPUSH
2308: CALL_OW 12
2312: ARRAY
2313: PPUSH
2314: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2318: LD_ADDR_VAR 0 7
2322: PUSH
2323: LD_INT 113
2325: PPUSH
2326: LD_INT 21
2328: PPUSH
2329: LD_INT 4
2331: PPUSH
2332: CALL_OW 47
2336: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2337: LD_VAR 0 7
2341: PPUSH
2342: LD_INT 4
2344: PUSH
2345: LD_INT 5
2347: PUSH
2348: LD_INT 6
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: ARRAY
2367: PPUSH
2368: CALL_OW 431
// bc_type = 33 ;
2372: LD_ADDR_OWVAR 42
2376: PUSH
2377: LD_INT 33
2379: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2380: LD_ADDR_VAR 0 7
2384: PUSH
2385: LD_INT 95
2387: PPUSH
2388: LD_INT 41
2390: PPUSH
2391: LD_INT 1
2393: PPUSH
2394: CALL_OW 47
2398: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2399: LD_VAR 0 7
2403: PPUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 1
2420: PPUSH
2421: LD_INT 3
2423: PPUSH
2424: CALL_OW 12
2428: ARRAY
2429: PPUSH
2430: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2434: LD_ADDR_VAR 0 7
2438: PUSH
2439: LD_INT 97
2441: PPUSH
2442: LD_INT 48
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: CALL_OW 47
2452: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2453: LD_VAR 0 7
2457: PPUSH
2458: LD_INT 4
2460: PUSH
2461: LD_INT 5
2463: PUSH
2464: LD_INT 6
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: PUSH
2472: LD_INT 1
2474: PPUSH
2475: LD_INT 3
2477: PPUSH
2478: CALL_OW 12
2482: ARRAY
2483: PPUSH
2484: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2488: LD_ADDR_VAR 0 7
2492: PUSH
2493: LD_INT 86
2495: PPUSH
2496: LD_INT 19
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 47
2506: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2507: LD_VAR 0 7
2511: PPUSH
2512: LD_INT 4
2514: PUSH
2515: LD_INT 5
2517: PUSH
2518: LD_INT 6
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 1
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: CALL_OW 12
2536: ARRAY
2537: PPUSH
2538: CALL_OW 431
// bc_type = 30 ;
2542: LD_ADDR_OWVAR 42
2546: PUSH
2547: LD_INT 30
2549: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2550: LD_INT 104
2552: PPUSH
2553: LD_INT 24
2555: PPUSH
2556: LD_INT 1
2558: PPUSH
2559: CALL_OW 47
// bc_type = 29 ;
2563: LD_ADDR_OWVAR 42
2567: PUSH
2568: LD_INT 29
2570: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2571: LD_INT 113
2573: PPUSH
2574: LD_INT 50
2576: PPUSH
2577: LD_INT 3
2579: PPUSH
2580: CALL_OW 47
// bc_type = 27 ;
2584: LD_ADDR_OWVAR 42
2588: PUSH
2589: LD_INT 27
2591: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2592: LD_INT 98
2594: PPUSH
2595: LD_INT 26
2597: PPUSH
2598: LD_INT 2
2600: PPUSH
2601: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2605: LD_INT 95
2607: PPUSH
2608: LD_INT 23
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: CALL_OW 47
// bc_type = 28 ;
2618: LD_ADDR_OWVAR 42
2622: PUSH
2623: LD_INT 28
2625: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2626: LD_INT 107
2628: PPUSH
2629: LD_INT 32
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: CALL_OW 47
// bc_type = 3 ;
2639: LD_ADDR_OWVAR 42
2643: PUSH
2644: LD_INT 3
2646: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2647: LD_INT 106
2649: PPUSH
2650: LD_INT 42
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 47
// bc_type = 16 ;
2660: LD_ADDR_OWVAR 42
2664: PUSH
2665: LD_INT 16
2667: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2668: LD_INT 109
2670: PPUSH
2671: LD_INT 45
2673: PPUSH
2674: LD_INT 5
2676: PPUSH
2677: CALL_OW 47
// bc_type = 17 ;
2681: LD_ADDR_OWVAR 42
2685: PUSH
2686: LD_INT 17
2688: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2689: LD_INT 106
2691: PPUSH
2692: LD_INT 46
2694: PPUSH
2695: LD_INT 0
2697: PPUSH
2698: CALL_OW 47
// bc_type = 19 ;
2702: LD_ADDR_OWVAR 42
2706: PUSH
2707: LD_INT 19
2709: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2710: LD_INT 103
2712: PPUSH
2713: LD_INT 42
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: CALL_OW 47
// bc_type = 21 ;
2723: LD_ADDR_OWVAR 42
2727: PUSH
2728: LD_INT 21
2730: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2731: LD_INT 110
2733: PPUSH
2734: LD_INT 42
2736: PPUSH
2737: LD_INT 4
2739: PPUSH
2740: CALL_OW 47
// bc_type = 5 ;
2744: LD_ADDR_OWVAR 42
2748: PUSH
2749: LD_INT 5
2751: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2752: LD_INT 114
2754: PPUSH
2755: LD_INT 55
2757: PPUSH
2758: LD_INT 5
2760: PPUSH
2761: CALL_OW 47
// bc_type = 36 ;
2765: LD_ADDR_OWVAR 42
2769: PUSH
2770: LD_INT 36
2772: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2773: LD_INT 96
2775: PPUSH
2776: LD_INT 28
2778: PPUSH
2779: LD_INT 2
2781: PPUSH
2782: CALL_OW 47
// bc_type = b_lab_full ;
2786: LD_ADDR_OWVAR 42
2790: PUSH
2791: LD_INT 8
2793: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2794: LD_ADDR_OWVAR 44
2798: PUSH
2799: LD_INT 15
2801: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
2802: LD_ADDR_OWVAR 45
2806: PUSH
2807: LD_INT 11
2809: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2810: LD_INT 116
2812: PPUSH
2813: LD_INT 38
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 47
// bc_type = b_lab_full ;
2823: LD_ADDR_OWVAR 42
2827: PUSH
2828: LD_INT 8
2830: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
2831: LD_ADDR_OWVAR 44
2835: PUSH
2836: LD_INT 10
2838: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
2839: LD_ADDR_OWVAR 45
2843: PUSH
2844: LD_INT 12
2846: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2847: LD_INT 112
2849: PPUSH
2850: LD_INT 29
2852: PPUSH
2853: LD_INT 4
2855: PPUSH
2856: CALL_OW 47
// end ; if baseCorrect = 1 then
2860: LD_VAR 0 6
2864: PUSH
2865: LD_INT 1
2867: EQUAL
2868: IFFALSE 3065
// begin uc_side := 1 ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_INT 1
2877: ST_TO_ADDR
// uc_nation := 1 ;
2878: LD_ADDR_OWVAR 21
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// for i in blist do
2886: LD_ADDR_VAR 0 3
2890: PUSH
2891: LD_VAR 0 2
2895: PUSH
2896: FOR_IN
2897: IFFALSE 3063
// begin bc_type := i [ 1 ] ;
2899: LD_ADDR_OWVAR 42
2903: PUSH
2904: LD_VAR 0 3
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2913: LD_ADDR_OWVAR 43
2917: PUSH
2918: LD_VAR 0 3
2922: PUSH
2923: LD_INT 5
2925: ARRAY
2926: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2927: LD_VAR 0 3
2931: PUSH
2932: LD_INT 1
2934: ARRAY
2935: PUSH
2936: LD_INT 7
2938: PUSH
2939: LD_INT 8
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: IN
2946: IFFALSE 2976
// begin bc_kind1 := i [ 7 ] ;
2948: LD_ADDR_OWVAR 44
2952: PUSH
2953: LD_VAR 0 3
2957: PUSH
2958: LD_INT 7
2960: ARRAY
2961: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2962: LD_ADDR_OWVAR 45
2966: PUSH
2967: LD_VAR 0 3
2971: PUSH
2972: LD_INT 8
2974: ARRAY
2975: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2976: LD_ADDR_VAR 0 4
2980: PUSH
2981: LD_VAR 0 3
2985: PUSH
2986: LD_INT 2
2988: ARRAY
2989: PPUSH
2990: LD_VAR 0 3
2994: PUSH
2995: LD_INT 3
2997: ARRAY
2998: PPUSH
2999: LD_VAR 0 3
3003: PUSH
3004: LD_INT 4
3006: ARRAY
3007: PPUSH
3008: CALL_OW 47
3012: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3013: LD_VAR 0 4
3017: PPUSH
3018: CALL_OW 266
3022: PUSH
3023: LD_INT 32
3025: EQUAL
3026: PUSH
3027: LD_VAR 0 4
3031: PPUSH
3032: CALL_OW 266
3036: PUSH
3037: LD_INT 33
3039: EQUAL
3040: OR
3041: IFFALSE 3061
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 3
3052: PUSH
3053: LD_INT 7
3055: ARRAY
3056: PPUSH
3057: CALL_OW 431
// end ; end ;
3061: GO 2896
3063: POP
3064: POP
// end ; end ;
3065: LD_VAR 0 1
3069: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3070: LD_INT 0
3072: PPUSH
3073: PPUSH
3074: PPUSH
3075: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3076: LD_INT 22
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 21
3088: PUSH
3089: LD_INT 1
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 69
3104: PUSH
3105: LD_EXP 1
3109: PUSH
3110: LD_EXP 3
3114: PUSH
3115: LD_EXP 4
3119: PUSH
3120: LD_EXP 5
3124: PUSH
3125: LD_EXP 6
3129: PUSH
3130: LD_EXP 7
3134: PUSH
3135: LD_EXP 8
3139: PUSH
3140: LD_EXP 9
3144: PUSH
3145: LD_EXP 10
3149: PUSH
3150: LD_EXP 11
3154: PUSH
3155: LD_EXP 12
3159: PUSH
3160: LD_EXP 13
3164: PUSH
3165: LD_EXP 14
3169: PUSH
3170: LD_EXP 15
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 6
3193: LESS
3194: DIFF
3195: IFFALSE 3418
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 30
3227: PUSH
3228: LD_INT 1
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PPUSH
3244: CALL_OW 69
3248: ST_TO_ADDR
// uc_side = 1 ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// uc_nation = 1 ;
3257: LD_ADDR_OWVAR 21
3261: PUSH
3262: LD_INT 1
3264: ST_TO_ADDR
// for i = 1 to 6 do
3265: LD_ADDR_VAR 0 2
3269: PUSH
3270: DOUBLE
3271: LD_INT 1
3273: DEC
3274: ST_TO_ADDR
3275: LD_INT 6
3277: PUSH
3278: FOR_TO
3279: IFFALSE 3416
// begin hc_gallery =  ;
3281: LD_ADDR_OWVAR 33
3285: PUSH
3286: LD_STRING 
3288: ST_TO_ADDR
// hc_name =  ;
3289: LD_ADDR_OWVAR 26
3293: PUSH
3294: LD_STRING 
3296: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3297: LD_INT 0
3299: PPUSH
3300: LD_INT 1
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 3
3308: PUSH
3309: LD_INT 4
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: CALL_OW 12
3328: ARRAY
3329: PPUSH
3330: LD_INT 5
3332: PPUSH
3333: LD_INT 8
3335: PPUSH
3336: CALL_OW 12
3340: PPUSH
3341: CALL_OW 380
// un = CreateHuman ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3355: LD_ADDR_EXP 18
3359: PUSH
3360: LD_EXP 18
3364: PUSH
3365: LD_VAR 0 3
3369: ADD
3370: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3371: LD_VAR 0 3
3375: PPUSH
3376: LD_VAR 0 4
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: CALL_OW 250
3389: PPUSH
3390: LD_VAR 0 4
3394: PUSH
3395: LD_INT 1
3397: ARRAY
3398: PPUSH
3399: CALL_OW 251
3403: PPUSH
3404: LD_INT 15
3406: PPUSH
3407: LD_INT 0
3409: PPUSH
3410: CALL_OW 50
// end ;
3414: GO 3278
3416: POP
3417: POP
// end ; end ; end_of_file
3418: LD_VAR 0 1
3422: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
// if exist_mode then
3427: LD_VAR 0 2
3431: IFFALSE 3578
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
3433: LD_EXP 21
3437: PUSH
3438: LD_VAR 0 1
3442: STR
3443: PPUSH
3444: CALL_OW 28
3448: PUSH
3449: LD_INT 1
3451: EQUAL
3452: IFFALSE 3477
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3454: LD_ADDR_VAR 0 4
3458: PUSH
3459: LD_EXP 21
3463: PUSH
3464: LD_VAR 0 1
3468: STR
3469: PPUSH
3470: CALL_OW 34
3474: ST_TO_ADDR
// end else
3475: GO 3576
// begin if TestCharacters ( 11_ & ident ) = true then
3477: LD_STRING 11_
3479: PUSH
3480: LD_VAR 0 1
3484: STR
3485: PPUSH
3486: CALL_OW 28
3490: PUSH
3491: LD_INT 1
3493: EQUAL
3494: IFFALSE 3517
// begin unit := CreateCharacter ( 11_ & ident ) ;
3496: LD_ADDR_VAR 0 4
3500: PUSH
3501: LD_STRING 11_
3503: PUSH
3504: LD_VAR 0 1
3508: STR
3509: PPUSH
3510: CALL_OW 34
3514: ST_TO_ADDR
// end else
3515: GO 3576
// begin if TestCharacters ( 10c_ & ident ) = true then
3517: LD_STRING 10c_
3519: PUSH
3520: LD_VAR 0 1
3524: STR
3525: PPUSH
3526: CALL_OW 28
3530: PUSH
3531: LD_INT 1
3533: EQUAL
3534: IFFALSE 3557
// unit := CreateCharacter ( 10c_ & ident ) else
3536: LD_ADDR_VAR 0 4
3540: PUSH
3541: LD_STRING 10c_
3543: PUSH
3544: LD_VAR 0 1
3548: STR
3549: PPUSH
3550: CALL_OW 34
3554: ST_TO_ADDR
3555: GO 3576
// unit := CreateCharacter ( 10_ & ident ) ;
3557: LD_ADDR_VAR 0 4
3561: PUSH
3562: LD_STRING 10_
3564: PUSH
3565: LD_VAR 0 1
3569: STR
3570: PPUSH
3571: CALL_OW 34
3575: ST_TO_ADDR
// end ; end ; end else
3576: GO 3593
// begin unit := NewCharacter ( ident ) ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_VAR 0 1
3587: PPUSH
3588: CALL_OW 25
3592: ST_TO_ADDR
// end ; result := unit ;
3593: LD_ADDR_VAR 0 3
3597: PUSH
3598: LD_VAR 0 4
3602: ST_TO_ADDR
// end ;
3603: LD_VAR 0 3
3607: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3608: LD_INT 0
3610: PPUSH
// if unit in selectedTab then
3611: LD_VAR 0 1
3615: PUSH
3616: LD_VAR 0 3
3620: IN
3621: IFFALSE 3643
// SaveCharacters ( unit , 13c_ & unitString ) else
3623: LD_VAR 0 1
3627: PPUSH
3628: LD_STRING 13c_
3630: PUSH
3631: LD_VAR 0 2
3635: STR
3636: PPUSH
3637: CALL_OW 38
3641: GO 3661
// SaveCharacters ( unit , 13s_ & unitString ) ;
3643: LD_VAR 0 1
3647: PPUSH
3648: LD_STRING 13s_
3650: PUSH
3651: LD_VAR 0 2
3655: STR
3656: PPUSH
3657: CALL_OW 38
// end ;
3661: LD_VAR 0 4
3665: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
3666: LD_INT 0
3668: PPUSH
3669: PPUSH
3670: PPUSH
3671: PPUSH
3672: PPUSH
3673: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3674: LD_ADDR_VAR 0 4
3678: PUSH
3679: LD_EXP 3
3683: PUSH
3684: LD_EXP 4
3688: PUSH
3689: LD_EXP 5
3693: PUSH
3694: LD_EXP 6
3698: PUSH
3699: LD_EXP 8
3703: PUSH
3704: LD_EXP 9
3708: PUSH
3709: LD_EXP 10
3713: PUSH
3714: LD_EXP 11
3718: PUSH
3719: LD_EXP 12
3723: PUSH
3724: LD_EXP 13
3728: PUSH
3729: LD_EXP 14
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: ST_TO_ADDR
// tmp = tmp ^ others11 ;
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_VAR 0 4
3756: PUSH
3757: LD_EXP 17
3761: ADD
3762: ST_TO_ADDR
// tmp = tmp ^ others12 ;
3763: LD_ADDR_VAR 0 4
3767: PUSH
3768: LD_VAR 0 4
3772: PUSH
3773: LD_EXP 16
3777: ADD
3778: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
3779: LD_ADDR_VAR 0 4
3783: PUSH
3784: LD_VAR 0 4
3788: PUSH
3789: LD_EXP 18
3793: ADD
3794: ST_TO_ADDR
// for i in tmp do
3795: LD_ADDR_VAR 0 2
3799: PUSH
3800: LD_VAR 0 4
3804: PUSH
3805: FOR_IN
3806: IFFALSE 3845
// if GetClass ( i ) = 8 then
3808: LD_VAR 0 2
3812: PPUSH
3813: CALL_OW 257
3817: PUSH
3818: LD_INT 8
3820: EQUAL
3821: IFFALSE 3843
// SetClass ( i , rand ( 1 , 4 ) ) ;
3823: LD_VAR 0 2
3827: PPUSH
3828: LD_INT 1
3830: PPUSH
3831: LD_INT 4
3833: PPUSH
3834: CALL_OW 12
3838: PPUSH
3839: CALL_OW 336
3843: GO 3805
3845: POP
3846: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: LD_STRING 1
3854: PPUSH
3855: LD_INT 6
3857: PPUSH
3858: LD_INT 6
3860: PPUSH
3861: LD_INT -5
3863: PUSH
3864: LD_EXP 1
3868: PUSH
3869: LD_EXP 15
3873: PUSH
3874: LD_INT -2
3876: PUSH
3877: LD_INT -3
3879: PUSH
3880: LD_INT -5
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: LD_VAR 0 4
3895: ADD
3896: PUSH
3897: LD_INT -6
3899: PUSH
3900: LD_INT -4
3902: PUSH
3903: LD_EXP 2
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: ADD
3913: PPUSH
3914: LD_INT 1
3916: PUSH
3917: LD_INT 0
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 2
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 3
3936: PUSH
3937: LD_INT 0
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 4
3946: PUSH
3947: LD_INT 2
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 5
3956: PUSH
3957: LD_INT 0
3959: PUSH
3960: LD_INT 2
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: LIST
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 42
3979: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3980: LD_ADDR_VAR 0 5
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_EXP 3
3994: PUSH
3995: LD_EXP 4
3999: PUSH
4000: LD_EXP 5
4004: PUSH
4005: LD_EXP 6
4009: PUSH
4010: LD_EXP 7
4014: PUSH
4015: LD_EXP 8
4019: PUSH
4020: LD_EXP 9
4024: PUSH
4025: LD_EXP 10
4029: PUSH
4030: LD_EXP 11
4034: PUSH
4035: LD_EXP 12
4039: PUSH
4040: LD_EXP 13
4044: PUSH
4045: LD_EXP 14
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: DIFF
4064: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4065: LD_ADDR_VAR 0 6
4069: PUSH
4070: LD_VAR 0 4
4074: PUSH
4075: LD_VAR 0 3
4079: DIFF
4080: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4081: LD_ADDR_VAR 0 6
4085: PUSH
4086: LD_VAR 0 6
4090: PUSH
4091: LD_EXP 3
4095: PUSH
4096: LD_EXP 4
4100: PUSH
4101: LD_EXP 5
4105: PUSH
4106: LD_EXP 6
4110: PUSH
4111: LD_EXP 7
4115: PUSH
4116: LD_EXP 8
4120: PUSH
4121: LD_EXP 9
4125: PUSH
4126: LD_EXP 10
4130: PUSH
4131: LD_EXP 11
4135: PUSH
4136: LD_EXP 12
4140: PUSH
4141: LD_EXP 13
4145: PUSH
4146: LD_EXP 14
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: DIFF
4165: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
4166: LD_VAR 0 5
4170: PPUSH
4171: LD_STRING 13c_others
4173: PPUSH
4174: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
4178: LD_VAR 0 6
4182: PPUSH
4183: LD_STRING 13s_others
4185: PPUSH
4186: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4190: LD_EXP 1
4194: PPUSH
4195: LD_STRING 13c_JMM
4197: PPUSH
4198: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4202: LD_EXP 15
4206: PPUSH
4207: LD_STRING 13c_Stevens
4209: PPUSH
4210: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4214: LD_EXP 3
4218: PPUSH
4219: LD_STRING Lisa
4221: PPUSH
4222: LD_VAR 0 3
4226: PPUSH
4227: CALL 3608 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4231: LD_EXP 8
4235: PPUSH
4236: LD_STRING Brown
4238: PPUSH
4239: LD_VAR 0 3
4243: PPUSH
4244: CALL 3608 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4248: LD_EXP 4
4252: PPUSH
4253: LD_STRING Donaldson
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL 3608 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4265: LD_EXP 5
4269: PPUSH
4270: LD_STRING Bobby
4272: PPUSH
4273: LD_VAR 0 3
4277: PPUSH
4278: CALL 3608 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4282: LD_EXP 6
4286: PPUSH
4287: LD_STRING Cyrus
4289: PPUSH
4290: LD_VAR 0 3
4294: PPUSH
4295: CALL 3608 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4299: LD_EXP 7
4303: PPUSH
4304: LD_STRING Denis
4306: PPUSH
4307: LD_VAR 0 3
4311: PPUSH
4312: CALL 3608 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4316: LD_EXP 9
4320: PPUSH
4321: LD_STRING Gladstone
4323: PPUSH
4324: LD_VAR 0 3
4328: PPUSH
4329: CALL 3608 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4333: LD_EXP 10
4337: PPUSH
4338: LD_STRING Houten
4340: PPUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL 3608 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4350: LD_EXP 11
4354: PPUSH
4355: LD_STRING Cornel
4357: PPUSH
4358: LD_VAR 0 3
4362: PPUSH
4363: CALL 3608 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4367: LD_EXP 12
4371: PPUSH
4372: LD_STRING Gary
4374: PPUSH
4375: LD_VAR 0 3
4379: PPUSH
4380: CALL 3608 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
4384: LD_EXP 13
4388: PPUSH
4389: LD_STRING Frank
4391: PPUSH
4392: LD_VAR 0 3
4396: PPUSH
4397: CALL 3608 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
4401: LD_EXP 14
4405: PPUSH
4406: LD_STRING Kikuchi
4408: PPUSH
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL 3608 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4418: LD_INT 22
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 21
4430: PUSH
4431: LD_INT 1
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 69
4446: PPUSH
4447: LD_INT 4
4449: PPUSH
4450: CALL_OW 235
// SetSide ( selected , 1 ) ;
4454: LD_VAR 0 3
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4466: LD_EXP 1
4470: PUSH
4471: LD_EXP 15
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: CALL_OW 235
// end ;
4487: LD_VAR 0 1
4491: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4492: LD_INT 0
4494: PPUSH
4495: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4496: LD_ADDR_VAR 0 2
4500: PUSH
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL_OW 289
4513: PUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 2
4521: PPUSH
4522: CALL_OW 289
4526: PUSH
4527: LD_VAR 0 1
4531: PPUSH
4532: LD_INT 3
4534: PPUSH
4535: CALL_OW 289
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// end ; end_of_file
4545: LD_VAR 0 2
4549: RET
// on Command ( comandid ) do var i ;
4550: LD_INT 0
4552: PPUSH
// begin if comandid = 65 then
4553: LD_VAR 0 1
4557: PUSH
4558: LD_INT 65
4560: EQUAL
4561: IFFALSE 4602
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 22
4570: PUSH
4571: LD_INT 1
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: PUSH
4586: FOR_IN
4587: IFFALSE 4600
// ComStop ( i ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: CALL_OW 141
4598: GO 4586
4600: POP
4601: POP
// end ;
4602: PPOPN 2
4604: END
