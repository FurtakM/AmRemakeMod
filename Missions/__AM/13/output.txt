// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1947 0 0
// PrepareHeroes ;
  45: CALL 788 0 0
// PrepareRandoms ;
  49: CALL 3060 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 3656 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: LD_INT 58
 321: PUSH
 322: EMPTY
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 70
 340: PUSH
 341: LD_INT 8
 343: EQUAL
 344: AND
 345: IFFALSE 685
 347: GO 349
 349: DISABLE
 350: LD_INT 0
 352: PPUSH
 353: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 21
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 33
 369: PUSH
 370: LD_INT 1
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: LD_INT 3
 379: PUSH
 380: LD_INT 58
 382: PUSH
 383: EMPTY
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 70
 399: PUSH
 400: LD_INT 0
 402: GREATER
 403: IFFALSE 671
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 405: LD_ADDR_VAR 0 1
 409: PUSH
 410: LD_INT 1
 412: PPUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 33
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 3
 435: PUSH
 436: LD_INT 58
 438: PUSH
 439: EMPTY
 440: LIST
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PPUSH
 451: CALL_OW 70
 455: PUSH
 456: FOR_IN
 457: IFFALSE 657
// begin cargoType = GetCargoType ( i ) ;
 459: LD_ADDR_VAR 0 2
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 288
 473: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 264
 483: PUSH
 484: LD_INT 12
 486: EQUAL
 487: IFFALSE 584
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 489: LD_ADDR_EXP 19
 493: PUSH
 494: LD_EXP 19
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 248
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 265
 518: PUSH
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 262
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 263
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 264
 548: PUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PPUSH
 564: CALL_OW 289
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: ADD
 581: ST_TO_ADDR
// end else
 582: GO 655
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 584: LD_ADDR_EXP 19
 588: PUSH
 589: LD_EXP 19
 593: PUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: CALL_OW 248
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: CALL_OW 265
 613: PUSH
 614: LD_VAR 0 1
 618: PPUSH
 619: CALL_OW 262
 623: PUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 263
 633: PUSH
 634: LD_VAR 0 1
 638: PPUSH
 639: CALL_OW 264
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: ADD
 654: ST_TO_ADDR
// end ; end ;
 655: GO 456
 657: POP
 658: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 659: LD_EXP 19
 663: PPUSH
 664: LD_STRING 13_VehiclesIn13_1
 666: PPUSH
 667: CALL_OW 39
// end ; SaveCargos ;
 671: CALL 688 0 0
// ChangeMap ( 13 , %_cont ) ;
 675: LD_INT 13
 677: PPUSH
 678: LD_STRING %_cont
 680: PPUSH
 681: CALL_OW 340
// end ;
 685: PPOPN 2
 687: END
// export function SaveCargos ; var i ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 692: LD_ADDR_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: PPUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 33
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 34
 722: PUSH
 723: LD_INT 12
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: PUSH
 740: FOR_IN
 741: IFFALSE 769
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 743: LD_ADDR_EXP 20
 747: PUSH
 748: LD_EXP 20
 752: PUSH
 753: LD_VAR 0 2
 757: PPUSH
 758: CALL 4482 0 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: ADD
 766: ST_TO_ADDR
 767: GO 740
 769: POP
 770: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 771: LD_EXP 20
 775: PPUSH
 776: LD_STRING 13_ResourcesInCargo13_1
 778: PPUSH
 779: CALL_OW 39
// end ; end_of_file
 783: LD_VAR 0 1
 787: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 794: LD_ADDR_VAR 0 4
 798: PUSH
 799: LD_INT 22
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 2
 811: PUSH
 812: LD_INT 30
 814: PUSH
 815: LD_INT 0
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PPUSH
 841: CALL_OW 69
 845: ST_TO_ADDR
// uc_side = 1 ;
 846: LD_ADDR_OWVAR 20
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 854: LD_ADDR_EXP 1
 858: PUSH
 859: LD_STRING JMM
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL 3413 0 2
 869: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 870: LD_ADDR_EXP 3
 874: PUSH
 875: LD_STRING Lisa
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL 3413 0 2
 885: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 886: LD_ADDR_EXP 4
 890: PUSH
 891: LD_STRING Donaldson
 893: PPUSH
 894: LD_INT 1
 896: PPUSH
 897: CALL 3413 0 2
 901: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 902: LD_ADDR_EXP 5
 906: PUSH
 907: LD_STRING Bobby
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 3413 0 2
 917: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Cyrus
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL 3413 0 2
 933: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 934: LD_ADDR_EXP 7
 938: PUSH
 939: LD_STRING Denis
 941: PPUSH
 942: LD_INT 1
 944: PPUSH
 945: CALL 3413 0 2
 949: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 950: LD_ADDR_EXP 8
 954: PUSH
 955: LD_STRING Brown
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL 3413 0 2
 965: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 966: LD_ADDR_EXP 9
 970: PUSH
 971: LD_STRING Gladstone
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL 3413 0 2
 981: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 982: LD_ADDR_EXP 10
 986: PUSH
 987: LD_STRING Houten
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL 3413 0 2
 997: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 998: LD_ADDR_EXP 11
1002: PUSH
1003: LD_STRING Cornell
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL 3413 0 2
1013: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1014: LD_ADDR_EXP 12
1018: PUSH
1019: LD_STRING Gary
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: CALL 3413 0 2
1029: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1030: LD_ADDR_EXP 13
1034: PUSH
1035: LD_STRING Frank
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: CALL 3413 0 2
1045: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1046: LD_ADDR_EXP 14
1050: PUSH
1051: LD_STRING Kikuchi
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 3413 0 2
1061: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1062: LD_ADDR_EXP 15
1066: PUSH
1067: LD_STRING Stevens
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL 3413 0 2
1077: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1078: LD_ADDR_EXP 2
1082: PUSH
1083: LD_STRING Powell
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 3413 0 2
1093: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1094: LD_EXP 1
1098: PPUSH
1099: LD_VAR 0 4
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: CALL_OW 250
1112: PPUSH
1113: LD_VAR 0 4
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 251
1126: PPUSH
1127: LD_INT 4
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1137: LD_EXP 15
1141: PPUSH
1142: LD_VAR 0 4
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 250
1155: PPUSH
1156: LD_VAR 0 4
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PPUSH
1165: CALL_OW 251
1169: PPUSH
1170: LD_INT 4
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 250
1198: PPUSH
1199: LD_VAR 0 4
1203: PUSH
1204: LD_INT 1
1206: ARRAY
1207: PPUSH
1208: CALL_OW 251
1212: PPUSH
1213: LD_INT 35
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ARRAY
1236: PPUSH
1237: CALL_OW 250
1241: PPUSH
1242: LD_VAR 0 4
1246: PUSH
1247: LD_INT 1
1249: ARRAY
1250: PPUSH
1251: CALL_OW 251
1255: PPUSH
1256: LD_INT 35
1258: PPUSH
1259: LD_INT 0
1261: PPUSH
1262: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1266: LD_EXP 5
1270: PPUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 1
1278: ARRAY
1279: PPUSH
1280: CALL_OW 250
1284: PPUSH
1285: LD_VAR 0 4
1289: PUSH
1290: LD_INT 1
1292: ARRAY
1293: PPUSH
1294: CALL_OW 251
1298: PPUSH
1299: LD_INT 35
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1309: LD_EXP 6
1313: PPUSH
1314: LD_VAR 0 4
1318: PUSH
1319: LD_INT 1
1321: ARRAY
1322: PPUSH
1323: CALL_OW 250
1327: PPUSH
1328: LD_VAR 0 4
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: PPUSH
1337: CALL_OW 251
1341: PPUSH
1342: LD_INT 35
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1352: LD_EXP 7
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 250
1370: PPUSH
1371: LD_VAR 0 4
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PPUSH
1380: CALL_OW 251
1384: PPUSH
1385: LD_INT 35
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_VAR 0 4
1404: PUSH
1405: LD_INT 1
1407: ARRAY
1408: PPUSH
1409: CALL_OW 250
1413: PPUSH
1414: LD_VAR 0 4
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: CALL_OW 251
1427: PPUSH
1428: LD_INT 35
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_VAR 0 4
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 250
1456: PPUSH
1457: LD_VAR 0 4
1461: PUSH
1462: LD_INT 1
1464: ARRAY
1465: PPUSH
1466: CALL_OW 251
1470: PPUSH
1471: LD_INT 35
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1481: LD_EXP 10
1485: PPUSH
1486: LD_VAR 0 4
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: PPUSH
1495: CALL_OW 250
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: ARRAY
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_INT 35
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1524: LD_EXP 11
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 250
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: CALL_OW 251
1556: PPUSH
1557: LD_INT 35
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1567: LD_EXP 12
1571: PPUSH
1572: LD_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: ARRAY
1580: PPUSH
1581: CALL_OW 250
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PPUSH
1595: CALL_OW 251
1599: PPUSH
1600: LD_INT 35
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1610: LD_EXP 13
1614: PPUSH
1615: LD_VAR 0 4
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PPUSH
1624: CALL_OW 250
1628: PPUSH
1629: LD_VAR 0 4
1633: PUSH
1634: LD_INT 1
1636: ARRAY
1637: PPUSH
1638: CALL_OW 251
1642: PPUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1653: LD_EXP 14
1657: PPUSH
1658: LD_VAR 0 4
1662: PUSH
1663: LD_INT 1
1665: ARRAY
1666: PPUSH
1667: CALL_OW 250
1671: PPUSH
1672: LD_VAR 0 4
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: PPUSH
1681: CALL_OW 251
1685: PPUSH
1686: LD_INT 35
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1696: LD_VAR 0 4
1700: PUSH
1701: LD_INT 1
1703: ARRAY
1704: PPUSH
1705: LD_STRING epsilon
1707: PPUSH
1708: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 274
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: LD_INT 3000
1731: PPUSH
1732: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 274
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1760: LD_VAR 0 4
1764: PUSH
1765: LD_INT 1
1767: ARRAY
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 3
1776: PPUSH
1777: LD_INT 200
1779: PPUSH
1780: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1796: LD_ADDR_EXP 16
1800: PUSH
1801: LD_STRING 12_other_survivors
1803: PPUSH
1804: CALL_OW 31
1808: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
1809: LD_ADDR_EXP 17
1813: PUSH
1814: LD_STRING 11_others
1816: PPUSH
1817: CALL_OW 31
1821: ST_TO_ADDR
// for i in others11 do
1822: LD_ADDR_VAR 0 2
1826: PUSH
1827: LD_EXP 17
1831: PUSH
1832: FOR_IN
1833: IFFALSE 1880
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_VAR 0 4
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 4
1858: PUSH
1859: LD_INT 1
1861: ARRAY
1862: PPUSH
1863: CALL_OW 251
1867: PPUSH
1868: LD_INT 15
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 50
1878: GO 1832
1880: POP
1881: POP
// for i in others12 do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: LD_EXP 16
1891: PUSH
1892: FOR_IN
1893: IFFALSE 1940
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PPUSH
1909: CALL_OW 250
1913: PPUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: CALL_OW 251
1927: PPUSH
1928: LD_INT 15
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 50
1938: GO 1892
1940: POP
1941: POP
// end ;
1942: LD_VAR 0 1
1946: RET
// export function PrepareEpsilonBase ; var blist , i , b , un , baseCorrect , building ; begin
1947: LD_INT 0
1949: PPUSH
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
1954: PPUSH
1955: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1956: LD_INT 113
1958: PPUSH
1959: LD_INT 50
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1969: LD_INT 104
1971: PPUSH
1972: LD_INT 24
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 441
// SetResourceVisibility ( 43 , 79 , 1 ) ;
1982: LD_INT 43
1984: PPUSH
1985: LD_INT 79
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 441
// SetResourceVisibility ( 43 , 68 , 1 ) ;
1995: LD_INT 43
1997: PPUSH
1998: LD_INT 68
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: CALL_OW 441
// SetResourceVisibility ( 99 , 114 , 1 ) ;
2008: LD_INT 99
2010: PPUSH
2011: LD_INT 114
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 441
// SetResourceVisibility ( 103 , 114 , 1 ) ;
2021: LD_INT 103
2023: PPUSH
2024: LD_INT 114
2026: PPUSH
2027: LD_INT 1
2029: PPUSH
2030: CALL_OW 441
// SetResourceVisibility ( 152 , 85 , 1 ) ;
2034: LD_INT 152
2036: PPUSH
2037: LD_INT 85
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 441
// SetResourceVisibility ( 156 , 92 , 1 ) ;
2047: LD_INT 156
2049: PPUSH
2050: LD_INT 92
2052: PPUSH
2053: LD_INT 1
2055: PPUSH
2056: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: LD_STRING 10_EpsilonBase
2067: PPUSH
2068: EMPTY
2069: PPUSH
2070: CALL_OW 30
2074: ST_TO_ADDR
// if not blist then
2075: LD_VAR 0 2
2079: NOT
2080: IFFALSE 2084
// exit ;
2082: GO 3055
// for i in blist do
2084: LD_ADDR_VAR 0 3
2088: PUSH
2089: LD_VAR 0 2
2093: PUSH
2094: FOR_IN
2095: IFFALSE 2135
// if i [ 1 ] = 0 or i [ 1 ] = 1 then
2097: LD_VAR 0 3
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: PUSH
2106: LD_INT 0
2108: EQUAL
2109: PUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PUSH
2119: LD_INT 1
2121: EQUAL
2122: OR
2123: IFFALSE 2133
// baseCorrect = 1 ;
2125: LD_ADDR_VAR 0 6
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
2133: GO 2094
2135: POP
2136: POP
// if baseCorrect = 0 then
2137: LD_VAR 0 6
2141: PUSH
2142: LD_INT 0
2144: EQUAL
2145: IFFALSE 2850
// begin uc_side = 1 ;
2147: LD_ADDR_OWVAR 20
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// uc_nation = 1 ;
2155: LD_ADDR_OWVAR 21
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// bc_level = 10 ;
2163: LD_ADDR_OWVAR 43
2167: PUSH
2168: LD_INT 10
2170: ST_TO_ADDR
// bc_type = b_warehouse ;
2171: LD_ADDR_OWVAR 42
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 99 , 24 , 2 ) ;
2179: LD_INT 99
2181: PPUSH
2182: LD_INT 24
2184: PPUSH
2185: LD_INT 2
2187: PPUSH
2188: CALL_OW 47
// bc_type = b_bunker ;
2192: LD_ADDR_OWVAR 42
2196: PUSH
2197: LD_INT 32
2199: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 124 , 42 , 4 ) ;
2200: LD_ADDR_VAR 0 7
2204: PUSH
2205: LD_INT 124
2207: PPUSH
2208: LD_INT 42
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: CALL_OW 47
2218: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2219: LD_VAR 0 7
2223: PPUSH
2224: LD_INT 4
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: LD_INT 6
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 1
2240: PPUSH
2241: LD_INT 3
2243: PPUSH
2244: CALL_OW 12
2248: ARRAY
2249: PPUSH
2250: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 111 , 16 , 4 ) ;
2254: LD_ADDR_VAR 0 7
2258: PUSH
2259: LD_INT 111
2261: PPUSH
2262: LD_INT 16
2264: PPUSH
2265: LD_INT 4
2267: PPUSH
2268: CALL_OW 47
2272: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2273: LD_VAR 0 7
2277: PPUSH
2278: LD_INT 4
2280: PUSH
2281: LD_INT 5
2283: PUSH
2284: LD_INT 6
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: CALL_OW 12
2302: ARRAY
2303: PPUSH
2304: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 113 , 21 , 4 ) ;
2308: LD_ADDR_VAR 0 7
2312: PUSH
2313: LD_INT 113
2315: PPUSH
2316: LD_INT 21
2318: PPUSH
2319: LD_INT 4
2321: PPUSH
2322: CALL_OW 47
2326: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2327: LD_VAR 0 7
2331: PPUSH
2332: LD_INT 4
2334: PUSH
2335: LD_INT 5
2337: PUSH
2338: LD_INT 6
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 3
2351: PPUSH
2352: CALL_OW 12
2356: ARRAY
2357: PPUSH
2358: CALL_OW 431
// bc_type = 33 ;
2362: LD_ADDR_OWVAR 42
2366: PUSH
2367: LD_INT 33
2369: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( 95 , 41 , 1 ) ;
2370: LD_ADDR_VAR 0 7
2374: PUSH
2375: LD_INT 95
2377: PPUSH
2378: LD_INT 41
2380: PPUSH
2381: LD_INT 1
2383: PPUSH
2384: CALL_OW 47
2388: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2389: LD_VAR 0 7
2393: PPUSH
2394: LD_INT 4
2396: PUSH
2397: LD_INT 5
2399: PUSH
2400: LD_INT 6
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 1
2410: PPUSH
2411: LD_INT 3
2413: PPUSH
2414: CALL_OW 12
2418: ARRAY
2419: PPUSH
2420: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 97 , 48 , 1 ) ;
2424: LD_ADDR_VAR 0 7
2428: PUSH
2429: LD_INT 97
2431: PPUSH
2432: LD_INT 48
2434: PPUSH
2435: LD_INT 1
2437: PPUSH
2438: CALL_OW 47
2442: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2443: LD_VAR 0 7
2447: PPUSH
2448: LD_INT 4
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 6
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 1
2464: PPUSH
2465: LD_INT 3
2467: PPUSH
2468: CALL_OW 12
2472: ARRAY
2473: PPUSH
2474: CALL_OW 431
// building = CreateAndPlaceBuildingXYD ( 86 , 19 , 1 ) ;
2478: LD_ADDR_VAR 0 7
2482: PUSH
2483: LD_INT 86
2485: PPUSH
2486: LD_INT 19
2488: PPUSH
2489: LD_INT 1
2491: PPUSH
2492: CALL_OW 47
2496: ST_TO_ADDR
// PlaceWeaponTurret ( building , [ 4 , 5 , 6 ] [ Rand ( 1 , 3 ) ] ) ;
2497: LD_VAR 0 7
2501: PPUSH
2502: LD_INT 4
2504: PUSH
2505: LD_INT 5
2507: PUSH
2508: LD_INT 6
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 1
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: CALL_OW 12
2526: ARRAY
2527: PPUSH
2528: CALL_OW 431
// bc_type = 30 ;
2532: LD_ADDR_OWVAR 42
2536: PUSH
2537: LD_INT 30
2539: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 104 , 24 , 1 ) ;
2540: LD_INT 104
2542: PPUSH
2543: LD_INT 24
2545: PPUSH
2546: LD_INT 1
2548: PPUSH
2549: CALL_OW 47
// bc_type = 29 ;
2553: LD_ADDR_OWVAR 42
2557: PUSH
2558: LD_INT 29
2560: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 113 , 50 , 3 ) ;
2561: LD_INT 113
2563: PPUSH
2564: LD_INT 50
2566: PPUSH
2567: LD_INT 3
2569: PPUSH
2570: CALL_OW 47
// bc_type = 27 ;
2574: LD_ADDR_OWVAR 42
2578: PUSH
2579: LD_INT 27
2581: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 98 , 26 , 2 ) ;
2582: LD_INT 98
2584: PPUSH
2585: LD_INT 26
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 95 , 23 , 3 ) ;
2595: LD_INT 95
2597: PPUSH
2598: LD_INT 23
2600: PPUSH
2601: LD_INT 3
2603: PPUSH
2604: CALL_OW 47
// bc_type = 28 ;
2608: LD_ADDR_OWVAR 42
2612: PUSH
2613: LD_INT 28
2615: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 107 , 32 , 1 ) ;
2616: LD_INT 107
2618: PPUSH
2619: LD_INT 32
2621: PPUSH
2622: LD_INT 1
2624: PPUSH
2625: CALL_OW 47
// bc_type = 3 ;
2629: LD_ADDR_OWVAR 42
2633: PUSH
2634: LD_INT 3
2636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 42 , 0 ) ;
2637: LD_INT 106
2639: PPUSH
2640: LD_INT 42
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 47
// bc_type = 16 ;
2650: LD_ADDR_OWVAR 42
2654: PUSH
2655: LD_INT 16
2657: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 109 , 45 , 5 ) ;
2658: LD_INT 109
2660: PPUSH
2661: LD_INT 45
2663: PPUSH
2664: LD_INT 5
2666: PPUSH
2667: CALL_OW 47
// bc_type = 17 ;
2671: LD_ADDR_OWVAR 42
2675: PUSH
2676: LD_INT 17
2678: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 106 , 46 , 0 ) ;
2679: LD_INT 106
2681: PPUSH
2682: LD_INT 46
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL_OW 47
// bc_type = 19 ;
2692: LD_ADDR_OWVAR 42
2696: PUSH
2697: LD_INT 19
2699: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 103 , 42 , 1 ) ;
2700: LD_INT 103
2702: PPUSH
2703: LD_INT 42
2705: PPUSH
2706: LD_INT 1
2708: PPUSH
2709: CALL_OW 47
// bc_type = 21 ;
2713: LD_ADDR_OWVAR 42
2717: PUSH
2718: LD_INT 21
2720: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 110 , 42 , 4 ) ;
2721: LD_INT 110
2723: PPUSH
2724: LD_INT 42
2726: PPUSH
2727: LD_INT 4
2729: PPUSH
2730: CALL_OW 47
// bc_type = 5 ;
2734: LD_ADDR_OWVAR 42
2738: PUSH
2739: LD_INT 5
2741: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 114 , 55 , 5 ) ;
2742: LD_INT 114
2744: PPUSH
2745: LD_INT 55
2747: PPUSH
2748: LD_INT 5
2750: PPUSH
2751: CALL_OW 47
// bc_type = 36 ;
2755: LD_ADDR_OWVAR 42
2759: PUSH
2760: LD_INT 36
2762: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 96 , 28 , 2 ) ;
2763: LD_INT 96
2765: PPUSH
2766: LD_INT 28
2768: PPUSH
2769: LD_INT 2
2771: PPUSH
2772: CALL_OW 47
// bc_type = b_lab_full ;
2776: LD_ADDR_OWVAR 42
2780: PUSH
2781: LD_INT 8
2783: ST_TO_ADDR
// bc_kind1 = b_lab_opto ;
2784: LD_ADDR_OWVAR 44
2788: PUSH
2789: LD_INT 15
2791: ST_TO_ADDR
// bc_kind2 = b_lab_siberium ;
2792: LD_ADDR_OWVAR 45
2796: PUSH
2797: LD_INT 11
2799: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 116 , 38 , 4 ) ;
2800: LD_INT 116
2802: PPUSH
2803: LD_INT 38
2805: PPUSH
2806: LD_INT 4
2808: PPUSH
2809: CALL_OW 47
// bc_type = b_lab_full ;
2813: LD_ADDR_OWVAR 42
2817: PUSH
2818: LD_INT 8
2820: ST_TO_ADDR
// bc_kind1 = b_lab_weapon ;
2821: LD_ADDR_OWVAR 44
2825: PUSH
2826: LD_INT 10
2828: ST_TO_ADDR
// bc_kind2 = b_lab_computer ;
2829: LD_ADDR_OWVAR 45
2833: PUSH
2834: LD_INT 12
2836: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 112 , 29 , 4 ) ;
2837: LD_INT 112
2839: PPUSH
2840: LD_INT 29
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: CALL_OW 47
// end ; if baseCorrect = 1 then
2850: LD_VAR 0 6
2854: PUSH
2855: LD_INT 1
2857: EQUAL
2858: IFFALSE 3055
// begin uc_side := 1 ;
2860: LD_ADDR_OWVAR 20
2864: PUSH
2865: LD_INT 1
2867: ST_TO_ADDR
// uc_nation := 1 ;
2868: LD_ADDR_OWVAR 21
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// for i in blist do
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 2
2885: PUSH
2886: FOR_IN
2887: IFFALSE 3053
// begin bc_type := i [ 1 ] ;
2889: LD_ADDR_OWVAR 42
2893: PUSH
2894: LD_VAR 0 3
2898: PUSH
2899: LD_INT 1
2901: ARRAY
2902: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2903: LD_ADDR_OWVAR 43
2907: PUSH
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 5
2915: ARRAY
2916: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2917: LD_VAR 0 3
2921: PUSH
2922: LD_INT 1
2924: ARRAY
2925: PUSH
2926: LD_INT 7
2928: PUSH
2929: LD_INT 8
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: IN
2936: IFFALSE 2966
// begin bc_kind1 := i [ 7 ] ;
2938: LD_ADDR_OWVAR 44
2942: PUSH
2943: LD_VAR 0 3
2947: PUSH
2948: LD_INT 7
2950: ARRAY
2951: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2952: LD_ADDR_OWVAR 45
2956: PUSH
2957: LD_VAR 0 3
2961: PUSH
2962: LD_INT 8
2964: ARRAY
2965: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2966: LD_ADDR_VAR 0 4
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_INT 2
2978: ARRAY
2979: PPUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 3
2987: ARRAY
2988: PPUSH
2989: LD_VAR 0 3
2993: PUSH
2994: LD_INT 4
2996: ARRAY
2997: PPUSH
2998: CALL_OW 47
3002: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
3003: LD_VAR 0 4
3007: PPUSH
3008: CALL_OW 266
3012: PUSH
3013: LD_INT 32
3015: EQUAL
3016: PUSH
3017: LD_VAR 0 4
3021: PPUSH
3022: CALL_OW 266
3026: PUSH
3027: LD_INT 33
3029: EQUAL
3030: OR
3031: IFFALSE 3051
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_VAR 0 3
3042: PUSH
3043: LD_INT 7
3045: ARRAY
3046: PPUSH
3047: CALL_OW 431
// end ; end ;
3051: GO 2886
3053: POP
3054: POP
// end ; end ;
3055: LD_VAR 0 1
3059: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
3060: LD_INT 0
3062: PPUSH
3063: PPUSH
3064: PPUSH
3065: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
3066: LD_INT 22
3068: PUSH
3069: LD_INT 1
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: PUSH
3076: LD_INT 21
3078: PUSH
3079: LD_INT 1
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PPUSH
3090: CALL_OW 69
3094: PUSH
3095: LD_EXP 1
3099: PUSH
3100: LD_EXP 3
3104: PUSH
3105: LD_EXP 4
3109: PUSH
3110: LD_EXP 5
3114: PUSH
3115: LD_EXP 6
3119: PUSH
3120: LD_EXP 7
3124: PUSH
3125: LD_EXP 8
3129: PUSH
3130: LD_EXP 9
3134: PUSH
3135: LD_EXP 10
3139: PUSH
3140: LD_EXP 11
3144: PUSH
3145: LD_EXP 12
3149: PUSH
3150: LD_EXP 13
3154: PUSH
3155: LD_EXP 14
3159: PUSH
3160: LD_EXP 15
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 6
3183: LESS
3184: DIFF
3185: IFFALSE 3408
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 1
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 30
3207: PUSH
3208: LD_INT 0
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PPUSH
3234: CALL_OW 69
3238: ST_TO_ADDR
// uc_side = 1 ;
3239: LD_ADDR_OWVAR 20
3243: PUSH
3244: LD_INT 1
3246: ST_TO_ADDR
// uc_nation = 1 ;
3247: LD_ADDR_OWVAR 21
3251: PUSH
3252: LD_INT 1
3254: ST_TO_ADDR
// for i = 1 to 6 do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 6
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3406
// begin hc_gallery =  ;
3271: LD_ADDR_OWVAR 33
3275: PUSH
3276: LD_STRING 
3278: ST_TO_ADDR
// hc_name =  ;
3279: LD_ADDR_OWVAR 26
3283: PUSH
3284: LD_STRING 
3286: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
3287: LD_INT 0
3289: PPUSH
3290: LD_INT 1
3292: PUSH
3293: LD_INT 2
3295: PUSH
3296: LD_INT 3
3298: PUSH
3299: LD_INT 4
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 1
3310: PPUSH
3311: LD_INT 4
3313: PPUSH
3314: CALL_OW 12
3318: ARRAY
3319: PPUSH
3320: LD_INT 5
3322: PPUSH
3323: LD_INT 8
3325: PPUSH
3326: CALL_OW 12
3330: PPUSH
3331: CALL_OW 380
// un = CreateHuman ;
3335: LD_ADDR_VAR 0 3
3339: PUSH
3340: CALL_OW 44
3344: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
3345: LD_ADDR_EXP 18
3349: PUSH
3350: LD_EXP 18
3354: PUSH
3355: LD_VAR 0 3
3359: ADD
3360: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
3361: LD_VAR 0 3
3365: PPUSH
3366: LD_VAR 0 4
3370: PUSH
3371: LD_INT 1
3373: ARRAY
3374: PPUSH
3375: CALL_OW 250
3379: PPUSH
3380: LD_VAR 0 4
3384: PUSH
3385: LD_INT 1
3387: ARRAY
3388: PPUSH
3389: CALL_OW 251
3393: PPUSH
3394: LD_INT 15
3396: PPUSH
3397: LD_INT 0
3399: PPUSH
3400: CALL_OW 50
// end ;
3404: GO 3268
3406: POP
3407: POP
// end ; end ; end_of_file
3408: LD_VAR 0 1
3412: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3413: LD_INT 0
3415: PPUSH
3416: PPUSH
// if exist_mode then
3417: LD_VAR 0 2
3421: IFFALSE 3568
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
3423: LD_EXP 21
3427: PUSH
3428: LD_VAR 0 1
3432: STR
3433: PPUSH
3434: CALL_OW 28
3438: PUSH
3439: LD_INT 1
3441: EQUAL
3442: IFFALSE 3467
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3444: LD_ADDR_VAR 0 4
3448: PUSH
3449: LD_EXP 21
3453: PUSH
3454: LD_VAR 0 1
3458: STR
3459: PPUSH
3460: CALL_OW 34
3464: ST_TO_ADDR
// end else
3465: GO 3566
// begin if TestCharacters ( 11_ & ident ) = true then
3467: LD_STRING 11_
3469: PUSH
3470: LD_VAR 0 1
3474: STR
3475: PPUSH
3476: CALL_OW 28
3480: PUSH
3481: LD_INT 1
3483: EQUAL
3484: IFFALSE 3507
// begin unit := CreateCharacter ( 11_ & ident ) ;
3486: LD_ADDR_VAR 0 4
3490: PUSH
3491: LD_STRING 11_
3493: PUSH
3494: LD_VAR 0 1
3498: STR
3499: PPUSH
3500: CALL_OW 34
3504: ST_TO_ADDR
// end else
3505: GO 3566
// begin if TestCharacters ( 10c_ & ident ) = true then
3507: LD_STRING 10c_
3509: PUSH
3510: LD_VAR 0 1
3514: STR
3515: PPUSH
3516: CALL_OW 28
3520: PUSH
3521: LD_INT 1
3523: EQUAL
3524: IFFALSE 3547
// unit := CreateCharacter ( 10c_ & ident ) else
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_STRING 10c_
3533: PUSH
3534: LD_VAR 0 1
3538: STR
3539: PPUSH
3540: CALL_OW 34
3544: ST_TO_ADDR
3545: GO 3566
// unit := CreateCharacter ( 10_ & ident ) ;
3547: LD_ADDR_VAR 0 4
3551: PUSH
3552: LD_STRING 10_
3554: PUSH
3555: LD_VAR 0 1
3559: STR
3560: PPUSH
3561: CALL_OW 34
3565: ST_TO_ADDR
// end ; end ; end else
3566: GO 3583
// begin unit := NewCharacter ( ident ) ;
3568: LD_ADDR_VAR 0 4
3572: PUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: CALL_OW 25
3582: ST_TO_ADDR
// end ; result := unit ;
3583: LD_ADDR_VAR 0 3
3587: PUSH
3588: LD_VAR 0 4
3592: ST_TO_ADDR
// end ;
3593: LD_VAR 0 3
3597: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
3598: LD_INT 0
3600: PPUSH
// if unit in selectedTab then
3601: LD_VAR 0 1
3605: PUSH
3606: LD_VAR 0 3
3610: IN
3611: IFFALSE 3633
// SaveCharacters ( unit , 13c_ & unitString ) else
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_STRING 13c_
3620: PUSH
3621: LD_VAR 0 2
3625: STR
3626: PPUSH
3627: CALL_OW 38
3631: GO 3651
// SaveCharacters ( unit , 13s_ & unitString ) ;
3633: LD_VAR 0 1
3637: PPUSH
3638: LD_STRING 13s_
3640: PUSH
3641: LD_VAR 0 2
3645: STR
3646: PPUSH
3647: CALL_OW 38
// end ;
3651: LD_VAR 0 4
3655: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_EXP 3
3673: PUSH
3674: LD_EXP 4
3678: PUSH
3679: LD_EXP 5
3683: PUSH
3684: LD_EXP 6
3688: PUSH
3689: LD_EXP 8
3693: PUSH
3694: LD_EXP 9
3698: PUSH
3699: LD_EXP 10
3703: PUSH
3704: LD_EXP 11
3708: PUSH
3709: LD_EXP 12
3713: PUSH
3714: LD_EXP 13
3718: PUSH
3719: LD_EXP 14
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: ST_TO_ADDR
// tmp = tmp ^ others11 ;
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_EXP 17
3751: ADD
3752: ST_TO_ADDR
// tmp = tmp ^ others12 ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_VAR 0 4
3762: PUSH
3763: LD_EXP 16
3767: ADD
3768: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
3769: LD_ADDR_VAR 0 4
3773: PUSH
3774: LD_VAR 0 4
3778: PUSH
3779: LD_EXP 18
3783: ADD
3784: ST_TO_ADDR
// for i in tmp do
3785: LD_ADDR_VAR 0 2
3789: PUSH
3790: LD_VAR 0 4
3794: PUSH
3795: FOR_IN
3796: IFFALSE 3835
// if GetClass ( i ) = 8 then
3798: LD_VAR 0 2
3802: PPUSH
3803: CALL_OW 257
3807: PUSH
3808: LD_INT 8
3810: EQUAL
3811: IFFALSE 3833
// SetClass ( i , rand ( 1 , 4 ) ) ;
3813: LD_VAR 0 2
3817: PPUSH
3818: LD_INT 1
3820: PPUSH
3821: LD_INT 4
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 336
3833: GO 3795
3835: POP
3836: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
3837: LD_ADDR_VAR 0 3
3841: PUSH
3842: LD_STRING 1
3844: PPUSH
3845: LD_INT 6
3847: PPUSH
3848: LD_INT 6
3850: PPUSH
3851: LD_INT -5
3853: PUSH
3854: LD_EXP 1
3858: PUSH
3859: LD_EXP 15
3863: PUSH
3864: LD_INT -2
3866: PUSH
3867: LD_INT -3
3869: PUSH
3870: LD_INT -5
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: PUSH
3881: LD_VAR 0 4
3885: ADD
3886: PUSH
3887: LD_INT -6
3889: PUSH
3890: LD_INT -4
3892: PUSH
3893: LD_EXP 2
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: ADD
3903: PPUSH
3904: LD_INT 1
3906: PUSH
3907: LD_INT 0
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_INT 3
3926: PUSH
3927: LD_INT 0
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 4
3936: PUSH
3937: LD_INT 2
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 5
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: LD_INT 2
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: PPUSH
3965: CALL_OW 42
3969: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3970: LD_ADDR_VAR 0 5
3974: PUSH
3975: LD_VAR 0 3
3979: PUSH
3980: LD_EXP 3
3984: PUSH
3985: LD_EXP 4
3989: PUSH
3990: LD_EXP 5
3994: PUSH
3995: LD_EXP 6
3999: PUSH
4000: LD_EXP 7
4004: PUSH
4005: LD_EXP 8
4009: PUSH
4010: LD_EXP 9
4014: PUSH
4015: LD_EXP 10
4019: PUSH
4020: LD_EXP 11
4024: PUSH
4025: LD_EXP 12
4029: PUSH
4030: LD_EXP 13
4034: PUSH
4035: LD_EXP 14
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: DIFF
4054: ST_TO_ADDR
// othersInBase = tmp diff selected ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_VAR 0 4
4064: PUSH
4065: LD_VAR 0 3
4069: DIFF
4070: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 6
4080: PUSH
4081: LD_EXP 3
4085: PUSH
4086: LD_EXP 4
4090: PUSH
4091: LD_EXP 5
4095: PUSH
4096: LD_EXP 6
4100: PUSH
4101: LD_EXP 7
4105: PUSH
4106: LD_EXP 8
4110: PUSH
4111: LD_EXP 9
4115: PUSH
4116: LD_EXP 10
4120: PUSH
4121: LD_EXP 11
4125: PUSH
4126: LD_EXP 12
4130: PUSH
4131: LD_EXP 13
4135: PUSH
4136: LD_EXP 14
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: DIFF
4155: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_STRING 13c_others
4163: PPUSH
4164: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
4168: LD_VAR 0 6
4172: PPUSH
4173: LD_STRING 13s_others
4175: PPUSH
4176: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING 13c_JMM
4187: PPUSH
4188: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
4192: LD_EXP 15
4196: PPUSH
4197: LD_STRING 13c_Stevens
4199: PPUSH
4200: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
4204: LD_EXP 3
4208: PPUSH
4209: LD_STRING Lisa
4211: PPUSH
4212: LD_VAR 0 3
4216: PPUSH
4217: CALL 3598 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
4221: LD_EXP 8
4225: PPUSH
4226: LD_STRING Brown
4228: PPUSH
4229: LD_VAR 0 3
4233: PPUSH
4234: CALL 3598 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
4238: LD_EXP 4
4242: PPUSH
4243: LD_STRING Donaldson
4245: PPUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: CALL 3598 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
4255: LD_EXP 5
4259: PPUSH
4260: LD_STRING Bobby
4262: PPUSH
4263: LD_VAR 0 3
4267: PPUSH
4268: CALL 3598 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
4272: LD_EXP 6
4276: PPUSH
4277: LD_STRING Cyrus
4279: PPUSH
4280: LD_VAR 0 3
4284: PPUSH
4285: CALL 3598 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
4289: LD_EXP 7
4293: PPUSH
4294: LD_STRING Denis
4296: PPUSH
4297: LD_VAR 0 3
4301: PPUSH
4302: CALL 3598 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
4306: LD_EXP 9
4310: PPUSH
4311: LD_STRING Gladstone
4313: PPUSH
4314: LD_VAR 0 3
4318: PPUSH
4319: CALL 3598 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
4323: LD_EXP 10
4327: PPUSH
4328: LD_STRING Houten
4330: PPUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL 3598 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
4340: LD_EXP 11
4344: PPUSH
4345: LD_STRING Cornel
4347: PPUSH
4348: LD_VAR 0 3
4352: PPUSH
4353: CALL 3598 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
4357: LD_EXP 12
4361: PPUSH
4362: LD_STRING Gary
4364: PPUSH
4365: LD_VAR 0 3
4369: PPUSH
4370: CALL 3598 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
4374: LD_EXP 13
4378: PPUSH
4379: LD_STRING Frank
4381: PPUSH
4382: LD_VAR 0 3
4386: PPUSH
4387: CALL 3598 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
4391: LD_EXP 14
4395: PPUSH
4396: LD_STRING Kikuchi
4398: PPUSH
4399: LD_VAR 0 3
4403: PPUSH
4404: CALL 3598 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
4408: LD_INT 22
4410: PUSH
4411: LD_INT 1
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 21
4420: PUSH
4421: LD_INT 1
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PPUSH
4432: CALL_OW 69
4436: PPUSH
4437: LD_INT 4
4439: PPUSH
4440: CALL_OW 235
// SetSide ( selected , 1 ) ;
4444: LD_VAR 0 3
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
4456: LD_EXP 1
4460: PUSH
4461: LD_EXP 15
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PPUSH
4470: LD_INT 1
4472: PPUSH
4473: CALL_OW 235
// end ;
4477: LD_VAR 0 1
4481: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
4486: LD_ADDR_VAR 0 2
4490: PUSH
4491: LD_VAR 0 1
4495: PPUSH
4496: LD_INT 1
4498: PPUSH
4499: CALL_OW 289
4503: PUSH
4504: LD_VAR 0 1
4508: PPUSH
4509: LD_INT 2
4511: PPUSH
4512: CALL_OW 289
4516: PUSH
4517: LD_VAR 0 1
4521: PPUSH
4522: LD_INT 3
4524: PPUSH
4525: CALL_OW 289
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// end ; end_of_file
4535: LD_VAR 0 2
4539: RET
// on Command ( comandid ) do var i ;
4540: LD_INT 0
4542: PPUSH
// begin if comandid = 65 then
4543: LD_VAR 0 1
4547: PUSH
4548: LD_INT 65
4550: EQUAL
4551: IFFALSE 4592
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 22
4560: PUSH
4561: LD_INT 1
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: EMPTY
4569: LIST
4570: PPUSH
4571: CALL_OW 69
4575: PUSH
4576: FOR_IN
4577: IFFALSE 4590
// ComStop ( i ) ;
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL_OW 141
4588: GO 4576
4590: POP
4591: POP
// end ;
4592: PPOPN 2
4594: END
