// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 ; export mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InGameOn ;
   8: CALL_OW 8
// mission_prefix_prev = 12_ ;
  12: LD_ADDR_EXP 18
  16: PUSH
  17: LD_STRING 12_
  19: ST_TO_ADDR
// PrepareEpsilonBase ;
  20: CALL 616 0 0
// PrepareHeroes ;
  24: CALL 192 0 0
// CenterNowOnUnits ( JMM ) ;
  28: LD_EXP 1
  32: PPUSH
  33: CALL_OW 87
// DialogueOn ;
  37: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
  41: LD_EXP 1
  45: PPUSH
  46: LD_STRING D1-JMM-1
  48: PPUSH
  49: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  53: LD_EXP 2
  57: PPUSH
  58: LD_STRING D1-Pow-1
  60: PPUSH
  61: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  65: LD_EXP 2
  69: PPUSH
  70: LD_STRING D1-Pow-1a
  72: PPUSH
  73: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
  77: LD_EXP 2
  81: PPUSH
  82: LD_STRING D1-Pow-1b
  84: PPUSH
  85: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
  89: LD_EXP 2
  93: PPUSH
  94: LD_STRING D1-Pow-1c
  96: PPUSH
  97: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 101: LD_EXP 1
 105: PPUSH
 106: LD_STRING D1-JMM-2
 108: PPUSH
 109: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 113: LD_EXP 2
 117: PPUSH
 118: LD_STRING D1-Pow-2
 120: PPUSH
 121: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 125: LD_EXP 1
 129: PPUSH
 130: LD_STRING D1-JMM-3
 132: PPUSH
 133: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 137: LD_EXP 2
 141: PPUSH
 142: LD_STRING D1-Pow-3
 144: PPUSH
 145: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 149: LD_EXP 1
 153: PPUSH
 154: LD_STRING D1-JMM-4
 156: PPUSH
 157: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 161: LD_EXP 2
 165: PPUSH
 166: LD_STRING D1-Pow-4
 168: PPUSH
 169: CALL_OW 94
// DialogueOff ;
 173: CALL_OW 7
// SelectAndSaveCharacters ;
 177: CALL 1210 0 0
// ChangeMap ( 13 , %_cont ) ;
 181: LD_INT 13
 183: PPUSH
 184: LD_STRING %_cont
 186: PPUSH
 187: CALL_OW 340
// end ; end_of_file
 191: END
// export function PrepareHeroes ; var i , others , tmp ; begin
 192: LD_INT 0
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 198: LD_ADDR_VAR 0 4
 202: PUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 30
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: PUSH
 226: LD_INT 30
 228: PUSH
 229: LD_INT 1
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PPUSH
 245: CALL_OW 69
 249: ST_TO_ADDR
// uc_side = 1 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 1
 257: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 258: LD_ADDR_EXP 1
 262: PUSH
 263: LD_STRING JMM
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL 967 0 2
 273: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 274: LD_ADDR_EXP 3
 278: PUSH
 279: LD_STRING Lisa
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL 967 0 2
 289: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 290: LD_ADDR_EXP 4
 294: PUSH
 295: LD_STRING Donaldson
 297: PPUSH
 298: LD_INT 1
 300: PPUSH
 301: CALL 967 0 2
 305: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 306: LD_ADDR_EXP 5
 310: PUSH
 311: LD_STRING Bobby
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: CALL 967 0 2
 321: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 322: LD_ADDR_EXP 6
 326: PUSH
 327: LD_STRING Cyrus
 329: PPUSH
 330: LD_INT 1
 332: PPUSH
 333: CALL 967 0 2
 337: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 338: LD_ADDR_EXP 7
 342: PUSH
 343: LD_STRING Denis
 345: PPUSH
 346: LD_INT 1
 348: PPUSH
 349: CALL 967 0 2
 353: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 354: LD_ADDR_EXP 8
 358: PUSH
 359: LD_STRING Brown
 361: PPUSH
 362: LD_INT 1
 364: PPUSH
 365: CALL 967 0 2
 369: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 370: LD_ADDR_EXP 9
 374: PUSH
 375: LD_STRING Gladstone
 377: PPUSH
 378: LD_INT 1
 380: PPUSH
 381: CALL 967 0 2
 385: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 386: LD_ADDR_EXP 10
 390: PUSH
 391: LD_STRING Houten
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: CALL 967 0 2
 401: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 402: LD_ADDR_EXP 11
 406: PUSH
 407: LD_STRING Cornell
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 967 0 2
 417: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
 418: LD_ADDR_EXP 12
 422: PUSH
 423: LD_STRING Gary
 425: PPUSH
 426: LD_INT 1
 428: PPUSH
 429: CALL 967 0 2
 433: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
 434: LD_ADDR_EXP 13
 438: PUSH
 439: LD_STRING Frank
 441: PPUSH
 442: LD_INT 1
 444: PPUSH
 445: CALL 967 0 2
 449: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_STRING Kikuchi
 457: PPUSH
 458: LD_INT 1
 460: PPUSH
 461: CALL 967 0 2
 465: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
 466: LD_ADDR_EXP 15
 470: PUSH
 471: LD_STRING Stevens
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL 967 0 2
 481: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 482: LD_ADDR_EXP 2
 486: PUSH
 487: LD_STRING Powell
 489: PPUSH
 490: LD_INT 0
 492: PPUSH
 493: CALL 967 0 2
 497: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
 498: LD_EXP 1
 502: PPUSH
 503: LD_VAR 0 4
 507: PUSH
 508: LD_INT 1
 510: ARRAY
 511: PPUSH
 512: CALL_OW 250
 516: PPUSH
 517: LD_VAR 0 4
 521: PUSH
 522: LD_INT 1
 524: ARRAY
 525: PPUSH
 526: CALL_OW 251
 530: PPUSH
 531: LD_INT 4
 533: PPUSH
 534: LD_INT 0
 536: PPUSH
 537: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
 541: LD_VAR 0 4
 545: PUSH
 546: LD_INT 1
 548: ARRAY
 549: PPUSH
 550: LD_STRING epsilon
 552: PPUSH
 553: CALL_OW 500
// SetClass ( JMM , 1 ) ;
 557: LD_EXP 1
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
 569: LD_ADDR_EXP 16
 573: PUSH
 574: LD_STRING 12_other_survivors
 576: PPUSH
 577: CALL_OW 31
 581: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) ;
 582: LD_ADDR_EXP 17
 586: PUSH
 587: LD_STRING 11c_others
 589: PPUSH
 590: CALL_OW 31
 594: ST_TO_ADDR
// others11 = others11 diff others12 ;
 595: LD_ADDR_EXP 17
 599: PUSH
 600: LD_EXP 17
 604: PUSH
 605: LD_EXP 16
 609: DIFF
 610: ST_TO_ADDR
// end ;
 611: LD_VAR 0 1
 615: RET
// export function PrepareEpsilonBase ; var blist , i , b , un ; begin
 616: LD_INT 0
 618: PPUSH
 619: PPUSH
 620: PPUSH
 621: PPUSH
 622: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
 623: LD_INT 113
 625: PPUSH
 626: LD_INT 50
 628: PPUSH
 629: LD_INT 1
 631: PPUSH
 632: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
 636: LD_INT 104
 638: PPUSH
 639: LD_INT 24
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: LD_STRING 10_EpsilonBase
 656: PPUSH
 657: EMPTY
 658: PPUSH
 659: CALL_OW 30
 663: ST_TO_ADDR
// if not blist then
 664: LD_VAR 0 2
 668: NOT
 669: IFFALSE 673
// exit ;
 671: GO 962
// uc_side := 1 ;
 673: LD_ADDR_OWVAR 20
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// uc_nation := 1 ;
 681: LD_ADDR_OWVAR 21
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// for i in blist do
 689: LD_ADDR_VAR 0 3
 693: PUSH
 694: LD_VAR 0 2
 698: PUSH
 699: FOR_IN
 700: IFFALSE 851
// begin bc_type := i [ 1 ] ;
 702: LD_ADDR_OWVAR 42
 706: PUSH
 707: LD_VAR 0 3
 711: PUSH
 712: LD_INT 1
 714: ARRAY
 715: ST_TO_ADDR
// bc_level := i [ 5 ] ;
 716: LD_ADDR_OWVAR 43
 720: PUSH
 721: LD_VAR 0 3
 725: PUSH
 726: LD_INT 5
 728: ARRAY
 729: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
 730: LD_VAR 0 3
 734: PUSH
 735: LD_INT 1
 737: ARRAY
 738: PUSH
 739: LD_INT 7
 741: PUSH
 742: LD_INT 8
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: IN
 749: IFFALSE 779
// begin bc_kind1 := i [ 7 ] ;
 751: LD_ADDR_OWVAR 44
 755: PUSH
 756: LD_VAR 0 3
 760: PUSH
 761: LD_INT 7
 763: ARRAY
 764: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
 765: LD_ADDR_OWVAR 45
 769: PUSH
 770: LD_VAR 0 3
 774: PUSH
 775: LD_INT 8
 777: ARRAY
 778: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 3
 788: PUSH
 789: LD_INT 2
 791: ARRAY
 792: PPUSH
 793: LD_VAR 0 3
 797: PUSH
 798: LD_INT 3
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 3
 806: PUSH
 807: LD_INT 4
 809: ARRAY
 810: PPUSH
 811: CALL_OW 47
 815: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
 816: LD_VAR 0 4
 820: PPUSH
 821: CALL_OW 266
 825: PUSH
 826: LD_INT 32
 828: EQUAL
 829: IFFALSE 849
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
 831: LD_VAR 0 4
 835: PPUSH
 836: LD_VAR 0 3
 840: PUSH
 841: LD_INT 7
 843: ARRAY
 844: PPUSH
 845: CALL_OW 431
// end ; end ;
 849: GO 699
 851: POP
 852: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_empty ] ] ) do
 853: LD_ADDR_VAR 0 3
 857: PUSH
 858: LD_INT 22
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: LD_INT 21
 870: PUSH
 871: LD_INT 3
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 58
 880: PUSH
 881: EMPTY
 882: LIST
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: LIST
 888: PPUSH
 889: CALL_OW 69
 893: PUSH
 894: FOR_IN
 895: IFFALSE 960
// begin hc_name =  ;
 897: LD_ADDR_OWVAR 26
 901: PUSH
 902: LD_STRING 
 904: ST_TO_ADDR
// hc_gallery =  ;
 905: LD_ADDR_OWVAR 33
 909: PUSH
 910: LD_STRING 
 912: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( 5 , 8 ) ) ;
 913: LD_INT 0
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 5
 921: PPUSH
 922: LD_INT 8
 924: PPUSH
 925: CALL_OW 12
 929: PPUSH
 930: CALL_OW 380
// un = CreateHuman ;
 934: LD_ADDR_VAR 0 5
 938: PUSH
 939: CALL_OW 44
 943: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
 944: LD_VAR 0 5
 948: PPUSH
 949: LD_VAR 0 3
 953: PPUSH
 954: CALL_OW 52
// end ;
 958: GO 894
 960: POP
 961: POP
// end ; end_of_file
 962: LD_VAR 0 1
 966: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 967: LD_INT 0
 969: PPUSH
 970: PPUSH
// if exist_mode then
 971: LD_VAR 0 2
 975: IFFALSE 1122
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
 977: LD_EXP 18
 981: PUSH
 982: LD_VAR 0 1
 986: STR
 987: PPUSH
 988: CALL_OW 28
 992: PUSH
 993: LD_INT 1
 995: EQUAL
 996: IFFALSE 1021
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
 998: LD_ADDR_VAR 0 4
1002: PUSH
1003: LD_EXP 18
1007: PUSH
1008: LD_VAR 0 1
1012: STR
1013: PPUSH
1014: CALL_OW 34
1018: ST_TO_ADDR
// end else
1019: GO 1120
// begin if TestCharacters ( 11_ & ident ) = true then
1021: LD_STRING 11_
1023: PUSH
1024: LD_VAR 0 1
1028: STR
1029: PPUSH
1030: CALL_OW 28
1034: PUSH
1035: LD_INT 1
1037: EQUAL
1038: IFFALSE 1061
// begin unit := CreateCharacter ( 11_ & ident ) ;
1040: LD_ADDR_VAR 0 4
1044: PUSH
1045: LD_STRING 11_
1047: PUSH
1048: LD_VAR 0 1
1052: STR
1053: PPUSH
1054: CALL_OW 34
1058: ST_TO_ADDR
// end else
1059: GO 1120
// begin if TestCharacters ( 10c_ & ident ) = true then
1061: LD_STRING 10c_
1063: PUSH
1064: LD_VAR 0 1
1068: STR
1069: PPUSH
1070: CALL_OW 28
1074: PUSH
1075: LD_INT 1
1077: EQUAL
1078: IFFALSE 1101
// unit := CreateCharacter ( 10c_ & ident ) else
1080: LD_ADDR_VAR 0 4
1084: PUSH
1085: LD_STRING 10c_
1087: PUSH
1088: LD_VAR 0 1
1092: STR
1093: PPUSH
1094: CALL_OW 34
1098: ST_TO_ADDR
1099: GO 1120
// unit := CreateCharacter ( 10_ & ident ) ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_STRING 10_
1108: PUSH
1109: LD_VAR 0 1
1113: STR
1114: PPUSH
1115: CALL_OW 34
1119: ST_TO_ADDR
// end ; end ; end else
1120: GO 1137
// begin unit := NewCharacter ( ident ) ;
1122: LD_ADDR_VAR 0 4
1126: PUSH
1127: LD_VAR 0 1
1131: PPUSH
1132: CALL_OW 25
1136: ST_TO_ADDR
// end ; result := unit ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: LD_VAR 0 4
1146: ST_TO_ADDR
// end ;
1147: LD_VAR 0 3
1151: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
1152: LD_INT 0
1154: PPUSH
// if unit in selectedTab then
1155: LD_VAR 0 1
1159: PUSH
1160: LD_VAR 0 3
1164: IN
1165: IFFALSE 1187
// SaveCharacters ( unit , 13c_ & unitString ) else
1167: LD_VAR 0 1
1171: PPUSH
1172: LD_STRING 13c_
1174: PUSH
1175: LD_VAR 0 2
1179: STR
1180: PPUSH
1181: CALL_OW 38
1185: GO 1205
// SaveCharacters ( unit , 13s_ & unitString ) ;
1187: LD_VAR 0 1
1191: PPUSH
1192: LD_STRING 13s_
1194: PUSH
1195: LD_VAR 0 2
1199: STR
1200: PPUSH
1201: CALL_OW 38
// end ;
1205: LD_VAR 0 4
1209: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
1210: LD_INT 0
1212: PPUSH
1213: PPUSH
1214: PPUSH
1215: PPUSH
1216: PPUSH
1217: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_EXP 3
1227: PUSH
1228: LD_EXP 4
1232: PUSH
1233: LD_EXP 5
1237: PUSH
1238: LD_EXP 6
1242: PUSH
1243: LD_EXP 7
1247: PUSH
1248: LD_EXP 8
1252: PUSH
1253: LD_EXP 9
1257: PUSH
1258: LD_EXP 10
1262: PUSH
1263: LD_EXP 11
1267: PUSH
1268: LD_EXP 12
1272: PUSH
1273: LD_EXP 13
1277: PUSH
1278: LD_EXP 14
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: ST_TO_ADDR
// tmp = tmp ^ others11 ;
1297: LD_ADDR_VAR 0 4
1301: PUSH
1302: LD_VAR 0 4
1306: PUSH
1307: LD_EXP 17
1311: ADD
1312: ST_TO_ADDR
// tmp = tmp ^ others12 ;
1313: LD_ADDR_VAR 0 4
1317: PUSH
1318: LD_VAR 0 4
1322: PUSH
1323: LD_EXP 16
1327: ADD
1328: ST_TO_ADDR
// for i in tmp do
1329: LD_ADDR_VAR 0 2
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1379
// if GetClass ( i ) = 8 then
1342: LD_VAR 0 2
1346: PPUSH
1347: CALL_OW 257
1351: PUSH
1352: LD_INT 8
1354: EQUAL
1355: IFFALSE 1377
// SetClass ( i , rand ( 1 , 4 ) ) ;
1357: LD_VAR 0 2
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 4
1367: PPUSH
1368: CALL_OW 12
1372: PPUSH
1373: CALL_OW 336
1377: GO 1339
1379: POP
1380: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: LD_STRING 1
1388: PPUSH
1389: LD_INT 6
1391: PPUSH
1392: LD_INT 6
1394: PPUSH
1395: LD_INT -5
1397: PUSH
1398: LD_EXP 1
1402: PUSH
1403: LD_EXP 15
1407: PUSH
1408: LD_INT -2
1410: PUSH
1411: LD_INT -3
1413: PUSH
1414: LD_INT -5
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: PUSH
1425: LD_VAR 0 4
1429: ADD
1430: PUSH
1431: LD_INT -6
1433: PUSH
1434: LD_INT -4
1436: PUSH
1437: LD_EXP 2
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: ADD
1447: PPUSH
1448: LD_INT 1
1450: PUSH
1451: LD_INT 0
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 2
1460: PUSH
1461: LD_INT 1
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 3
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: PUSH
1478: LD_INT 4
1480: PUSH
1481: LD_INT 2
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 5
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: PPUSH
1509: CALL_OW 42
1513: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1514: LD_ADDR_VAR 0 5
1518: PUSH
1519: LD_VAR 0 3
1523: PUSH
1524: LD_EXP 3
1528: PUSH
1529: LD_EXP 4
1533: PUSH
1534: LD_EXP 5
1538: PUSH
1539: LD_EXP 6
1543: PUSH
1544: LD_EXP 7
1548: PUSH
1549: LD_EXP 8
1553: PUSH
1554: LD_EXP 9
1558: PUSH
1559: LD_EXP 10
1563: PUSH
1564: LD_EXP 11
1568: PUSH
1569: LD_EXP 12
1573: PUSH
1574: LD_EXP 13
1578: PUSH
1579: LD_EXP 14
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: DIFF
1598: ST_TO_ADDR
// othersInBase = tmp diff selected ;
1599: LD_ADDR_VAR 0 6
1603: PUSH
1604: LD_VAR 0 4
1608: PUSH
1609: LD_VAR 0 3
1613: DIFF
1614: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1615: LD_ADDR_VAR 0 6
1619: PUSH
1620: LD_VAR 0 6
1624: PUSH
1625: LD_EXP 3
1629: PUSH
1630: LD_EXP 4
1634: PUSH
1635: LD_EXP 5
1639: PUSH
1640: LD_EXP 6
1644: PUSH
1645: LD_EXP 7
1649: PUSH
1650: LD_EXP 8
1654: PUSH
1655: LD_EXP 9
1659: PUSH
1660: LD_EXP 10
1664: PUSH
1665: LD_EXP 11
1669: PUSH
1670: LD_EXP 12
1674: PUSH
1675: LD_EXP 13
1679: PUSH
1680: LD_EXP 14
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: DIFF
1699: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
1700: LD_VAR 0 5
1704: PPUSH
1705: LD_STRING 13c_others
1707: PPUSH
1708: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
1712: LD_VAR 0 6
1716: PPUSH
1717: LD_STRING 13s_others
1719: PPUSH
1720: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
1724: LD_EXP 1
1728: PPUSH
1729: LD_STRING 13c_JMM
1731: PPUSH
1732: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
1736: LD_EXP 15
1740: PPUSH
1741: LD_STRING 13c_Stevens
1743: PPUSH
1744: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
1748: LD_EXP 3
1752: PPUSH
1753: LD_STRING Lisa
1755: PPUSH
1756: LD_VAR 0 3
1760: PPUSH
1761: CALL 1152 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
1765: LD_EXP 4
1769: PPUSH
1770: LD_STRING Donaldson
1772: PPUSH
1773: LD_VAR 0 3
1777: PPUSH
1778: CALL 1152 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
1782: LD_EXP 5
1786: PPUSH
1787: LD_STRING Bobby
1789: PPUSH
1790: LD_VAR 0 3
1794: PPUSH
1795: CALL 1152 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
1799: LD_EXP 6
1803: PPUSH
1804: LD_STRING Cyrus
1806: PPUSH
1807: LD_VAR 0 3
1811: PPUSH
1812: CALL 1152 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
1816: LD_EXP 7
1820: PPUSH
1821: LD_STRING Denis
1823: PPUSH
1824: LD_VAR 0 3
1828: PPUSH
1829: CALL 1152 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
1833: LD_EXP 9
1837: PPUSH
1838: LD_STRING Gladstone
1840: PPUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL 1152 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
1850: LD_EXP 10
1854: PPUSH
1855: LD_STRING Houten
1857: PPUSH
1858: LD_VAR 0 3
1862: PPUSH
1863: CALL 1152 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
1867: LD_EXP 11
1871: PPUSH
1872: LD_STRING Cornel
1874: PPUSH
1875: LD_VAR 0 3
1879: PPUSH
1880: CALL 1152 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
1884: LD_EXP 12
1888: PPUSH
1889: LD_STRING Gary
1891: PPUSH
1892: LD_VAR 0 3
1896: PPUSH
1897: CALL 1152 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
1901: LD_EXP 13
1905: PPUSH
1906: LD_STRING Frank
1908: PPUSH
1909: LD_VAR 0 3
1913: PPUSH
1914: CALL 1152 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
1918: LD_EXP 14
1922: PPUSH
1923: LD_STRING Kikuchi
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL 1152 0 3
// end ;
1935: LD_VAR 0 1
1939: RET
