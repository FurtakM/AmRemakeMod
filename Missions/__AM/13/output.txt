// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1933 0 0
// PrepareHeroes ;
  45: CALL 774 0 0
// PrepareRandoms ;
  49: CALL 2175 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 2771 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: PPUSH
 322: CALL_OW 70
 326: PUSH
 327: LD_INT 8
 329: EQUAL
 330: AND
 331: IFFALSE 671
 333: GO 335
 335: DISABLE
 336: LD_INT 0
 338: PPUSH
 339: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 21
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: LD_INT 33
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 58
 368: PUSH
 369: EMPTY
 370: LIST
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 70
 385: PUSH
 386: LD_INT 0
 388: GREATER
 389: IFFALSE 657
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 391: LD_ADDR_VAR 0 1
 395: PUSH
 396: LD_INT 1
 398: PPUSH
 399: LD_INT 21
 401: PUSH
 402: LD_INT 2
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 33
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: LD_INT 3
 421: PUSH
 422: LD_INT 58
 424: PUSH
 425: EMPTY
 426: LIST
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: PPUSH
 437: CALL_OW 70
 441: PUSH
 442: FOR_IN
 443: IFFALSE 643
// begin cargoType = GetCargoType ( i ) ;
 445: LD_ADDR_VAR 0 2
 449: PUSH
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 288
 459: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 460: LD_VAR 0 1
 464: PPUSH
 465: CALL_OW 264
 469: PUSH
 470: LD_INT 12
 472: EQUAL
 473: IFFALSE 570
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 475: LD_ADDR_EXP 19
 479: PUSH
 480: LD_EXP 19
 484: PUSH
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 248
 494: PUSH
 495: LD_VAR 0 1
 499: PPUSH
 500: CALL_OW 265
 504: PUSH
 505: LD_VAR 0 1
 509: PPUSH
 510: CALL_OW 262
 514: PUSH
 515: LD_VAR 0 1
 519: PPUSH
 520: CALL_OW 263
 524: PUSH
 525: LD_VAR 0 1
 529: PPUSH
 530: CALL_OW 264
 534: PUSH
 535: LD_VAR 0 2
 539: PUSH
 540: LD_VAR 0 1
 544: PPUSH
 545: LD_VAR 0 2
 549: PPUSH
 550: CALL_OW 289
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: ADD
 567: ST_TO_ADDR
// end else
 568: GO 641
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 570: LD_ADDR_EXP 19
 574: PUSH
 575: LD_EXP 19
 579: PUSH
 580: LD_VAR 0 1
 584: PPUSH
 585: CALL_OW 248
 589: PUSH
 590: LD_VAR 0 1
 594: PPUSH
 595: CALL_OW 265
 599: PUSH
 600: LD_VAR 0 1
 604: PPUSH
 605: CALL_OW 262
 609: PUSH
 610: LD_VAR 0 1
 614: PPUSH
 615: CALL_OW 263
 619: PUSH
 620: LD_VAR 0 1
 624: PPUSH
 625: CALL_OW 264
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: ADD
 640: ST_TO_ADDR
// end ; end ;
 641: GO 442
 643: POP
 644: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 645: LD_EXP 19
 649: PPUSH
 650: LD_STRING 13_VehiclesIn13_1
 652: PPUSH
 653: CALL_OW 39
// end ; SaveCargos ;
 657: CALL 674 0 0
// ChangeMap ( 13 , %_cont ) ;
 661: LD_INT 13
 663: PPUSH
 664: LD_STRING %_cont
 666: PPUSH
 667: CALL_OW 340
// end ;
 671: PPOPN 2
 673: END
// export function SaveCargos ; var i ; begin
 674: LD_INT 0
 676: PPUSH
 677: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 678: LD_ADDR_VAR 0 2
 682: PUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_INT 22
 688: PUSH
 689: LD_INT 1
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 33
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 34
 708: PUSH
 709: LD_INT 12
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: LIST
 720: PPUSH
 721: CALL_OW 70
 725: PUSH
 726: FOR_IN
 727: IFFALSE 755
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 729: LD_ADDR_EXP 20
 733: PUSH
 734: LD_EXP 20
 738: PUSH
 739: LD_VAR 0 2
 743: PPUSH
 744: CALL 3603 0 1
 748: PUSH
 749: EMPTY
 750: LIST
 751: ADD
 752: ST_TO_ADDR
 753: GO 726
 755: POP
 756: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 757: LD_EXP 20
 761: PPUSH
 762: LD_STRING 13_ResourcesInCargo13_1
 764: PPUSH
 765: CALL_OW 39
// end ; end_of_file
 769: LD_VAR 0 1
 773: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 774: LD_INT 0
 776: PPUSH
 777: PPUSH
 778: PPUSH
 779: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 780: LD_ADDR_VAR 0 4
 784: PUSH
 785: LD_INT 22
 787: PUSH
 788: LD_INT 1
 790: PUSH
 791: EMPTY
 792: LIST
 793: LIST
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: LD_INT 30
 800: PUSH
 801: LD_INT 0
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 30
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PPUSH
 827: CALL_OW 69
 831: ST_TO_ADDR
// uc_side = 1 ;
 832: LD_ADDR_OWVAR 20
 836: PUSH
 837: LD_INT 1
 839: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 840: LD_ADDR_EXP 1
 844: PUSH
 845: LD_STRING JMM
 847: PPUSH
 848: LD_INT 1
 850: PPUSH
 851: CALL 2528 0 2
 855: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 856: LD_ADDR_EXP 3
 860: PUSH
 861: LD_STRING Lisa
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: CALL 2528 0 2
 871: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 872: LD_ADDR_EXP 4
 876: PUSH
 877: LD_STRING Donaldson
 879: PPUSH
 880: LD_INT 1
 882: PPUSH
 883: CALL 2528 0 2
 887: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 888: LD_ADDR_EXP 5
 892: PUSH
 893: LD_STRING Bobby
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: CALL 2528 0 2
 903: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING Cyrus
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 2528 0 2
 919: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 920: LD_ADDR_EXP 7
 924: PUSH
 925: LD_STRING Denis
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL 2528 0 2
 935: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 936: LD_ADDR_EXP 8
 940: PUSH
 941: LD_STRING Brown
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: CALL 2528 0 2
 951: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 952: LD_ADDR_EXP 9
 956: PUSH
 957: LD_STRING Gladstone
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL 2528 0 2
 967: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 968: LD_ADDR_EXP 10
 972: PUSH
 973: LD_STRING Houten
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: CALL 2528 0 2
 983: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 984: LD_ADDR_EXP 11
 988: PUSH
 989: LD_STRING Cornell
 991: PPUSH
 992: LD_INT 1
 994: PPUSH
 995: CALL 2528 0 2
 999: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1000: LD_ADDR_EXP 12
1004: PUSH
1005: LD_STRING Gary
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 2528 0 2
1015: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1016: LD_ADDR_EXP 13
1020: PUSH
1021: LD_STRING Frank
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL 2528 0 2
1031: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1032: LD_ADDR_EXP 14
1036: PUSH
1037: LD_STRING Kikuchi
1039: PPUSH
1040: LD_INT 1
1042: PPUSH
1043: CALL 2528 0 2
1047: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1048: LD_ADDR_EXP 15
1052: PUSH
1053: LD_STRING Stevens
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 2528 0 2
1063: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1064: LD_ADDR_EXP 2
1068: PUSH
1069: LD_STRING Powell
1071: PPUSH
1072: LD_INT 0
1074: PPUSH
1075: CALL 2528 0 2
1079: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1080: LD_EXP 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: CALL_OW 250
1098: PPUSH
1099: LD_VAR 0 4
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: CALL_OW 251
1112: PPUSH
1113: LD_INT 4
1115: PPUSH
1116: LD_INT 0
1118: PPUSH
1119: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1123: LD_EXP 15
1127: PPUSH
1128: LD_VAR 0 4
1132: PUSH
1133: LD_INT 1
1135: ARRAY
1136: PPUSH
1137: CALL_OW 250
1141: PPUSH
1142: LD_VAR 0 4
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 251
1155: PPUSH
1156: LD_INT 4
1158: PPUSH
1159: LD_INT 0
1161: PPUSH
1162: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1166: LD_EXP 3
1170: PPUSH
1171: LD_VAR 0 4
1175: PUSH
1176: LD_INT 1
1178: ARRAY
1179: PPUSH
1180: CALL_OW 250
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 251
1198: PPUSH
1199: LD_INT 35
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1209: LD_EXP 4
1213: PPUSH
1214: LD_VAR 0 4
1218: PUSH
1219: LD_INT 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 250
1227: PPUSH
1228: LD_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ARRAY
1236: PPUSH
1237: CALL_OW 251
1241: PPUSH
1242: LD_INT 35
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1252: LD_EXP 5
1256: PPUSH
1257: LD_VAR 0 4
1261: PUSH
1262: LD_INT 1
1264: ARRAY
1265: PPUSH
1266: CALL_OW 250
1270: PPUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 1
1278: ARRAY
1279: PPUSH
1280: CALL_OW 251
1284: PPUSH
1285: LD_INT 35
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1295: LD_EXP 6
1299: PPUSH
1300: LD_VAR 0 4
1304: PUSH
1305: LD_INT 1
1307: ARRAY
1308: PPUSH
1309: CALL_OW 250
1313: PPUSH
1314: LD_VAR 0 4
1318: PUSH
1319: LD_INT 1
1321: ARRAY
1322: PPUSH
1323: CALL_OW 251
1327: PPUSH
1328: LD_INT 35
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1338: LD_EXP 7
1342: PPUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 1
1350: ARRAY
1351: PPUSH
1352: CALL_OW 250
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 251
1370: PPUSH
1371: LD_INT 35
1373: PPUSH
1374: LD_INT 0
1376: PPUSH
1377: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1381: LD_EXP 8
1385: PPUSH
1386: LD_VAR 0 4
1390: PUSH
1391: LD_INT 1
1393: ARRAY
1394: PPUSH
1395: CALL_OW 250
1399: PPUSH
1400: LD_VAR 0 4
1404: PUSH
1405: LD_INT 1
1407: ARRAY
1408: PPUSH
1409: CALL_OW 251
1413: PPUSH
1414: LD_INT 35
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1424: LD_EXP 9
1428: PPUSH
1429: LD_VAR 0 4
1433: PUSH
1434: LD_INT 1
1436: ARRAY
1437: PPUSH
1438: CALL_OW 250
1442: PPUSH
1443: LD_VAR 0 4
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 251
1456: PPUSH
1457: LD_INT 35
1459: PPUSH
1460: LD_INT 0
1462: PPUSH
1463: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1467: LD_EXP 10
1471: PPUSH
1472: LD_VAR 0 4
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 250
1485: PPUSH
1486: LD_VAR 0 4
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: PPUSH
1495: CALL_OW 251
1499: PPUSH
1500: LD_INT 35
1502: PPUSH
1503: LD_INT 0
1505: PPUSH
1506: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1510: LD_EXP 11
1514: PPUSH
1515: LD_VAR 0 4
1519: PUSH
1520: LD_INT 1
1522: ARRAY
1523: PPUSH
1524: CALL_OW 250
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 251
1542: PPUSH
1543: LD_INT 35
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1553: LD_EXP 12
1557: PPUSH
1558: LD_VAR 0 4
1562: PUSH
1563: LD_INT 1
1565: ARRAY
1566: PPUSH
1567: CALL_OW 250
1571: PPUSH
1572: LD_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: ARRAY
1580: PPUSH
1581: CALL_OW 251
1585: PPUSH
1586: LD_INT 35
1588: PPUSH
1589: LD_INT 0
1591: PPUSH
1592: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1596: LD_EXP 13
1600: PPUSH
1601: LD_VAR 0 4
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL_OW 250
1614: PPUSH
1615: LD_VAR 0 4
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PPUSH
1624: CALL_OW 251
1628: PPUSH
1629: LD_INT 35
1631: PPUSH
1632: LD_INT 0
1634: PPUSH
1635: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1639: LD_EXP 14
1643: PPUSH
1644: LD_VAR 0 4
1648: PUSH
1649: LD_INT 1
1651: ARRAY
1652: PPUSH
1653: CALL_OW 250
1657: PPUSH
1658: LD_VAR 0 4
1662: PUSH
1663: LD_INT 1
1665: ARRAY
1666: PPUSH
1667: CALL_OW 251
1671: PPUSH
1672: LD_INT 35
1674: PPUSH
1675: LD_INT 0
1677: PPUSH
1678: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1682: LD_VAR 0 4
1686: PUSH
1687: LD_INT 1
1689: ARRAY
1690: PPUSH
1691: LD_STRING epsilon
1693: PPUSH
1694: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1698: LD_VAR 0 4
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 274
1711: PPUSH
1712: LD_INT 1
1714: PPUSH
1715: LD_INT 3000
1717: PPUSH
1718: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1722: LD_VAR 0 4
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 274
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: LD_INT 500
1741: PPUSH
1742: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1746: LD_VAR 0 4
1750: PUSH
1751: LD_INT 1
1753: ARRAY
1754: PPUSH
1755: CALL_OW 274
1759: PPUSH
1760: LD_INT 3
1762: PPUSH
1763: LD_INT 200
1765: PPUSH
1766: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1770: LD_EXP 1
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1782: LD_ADDR_EXP 16
1786: PUSH
1787: LD_STRING 12_other_survivors
1789: PPUSH
1790: CALL_OW 31
1794: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
1795: LD_ADDR_EXP 17
1799: PUSH
1800: LD_STRING 11_others
1802: PPUSH
1803: CALL_OW 31
1807: ST_TO_ADDR
// for i in others11 do
1808: LD_ADDR_VAR 0 2
1812: PUSH
1813: LD_EXP 17
1817: PUSH
1818: FOR_IN
1819: IFFALSE 1866
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1821: LD_VAR 0 2
1825: PPUSH
1826: LD_VAR 0 4
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: CALL_OW 250
1839: PPUSH
1840: LD_VAR 0 4
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PPUSH
1849: CALL_OW 251
1853: PPUSH
1854: LD_INT 35
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 50
1864: GO 1818
1866: POP
1867: POP
// for i in others12 do
1868: LD_ADDR_VAR 0 2
1872: PUSH
1873: LD_EXP 16
1877: PUSH
1878: FOR_IN
1879: IFFALSE 1926
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1881: LD_VAR 0 2
1885: PPUSH
1886: LD_VAR 0 4
1890: PUSH
1891: LD_INT 1
1893: ARRAY
1894: PPUSH
1895: CALL_OW 250
1899: PPUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: LD_INT 35
1916: PPUSH
1917: LD_INT 0
1919: PPUSH
1920: CALL_OW 50
1924: GO 1878
1926: POP
1927: POP
// end ;
1928: LD_VAR 0 1
1932: RET
// export function PrepareEpsilonBase ; var blist , i , b , un ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
1938: PPUSH
1939: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1940: LD_INT 113
1942: PPUSH
1943: LD_INT 50
1945: PPUSH
1946: LD_INT 1
1948: PPUSH
1949: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1953: LD_INT 104
1955: PPUSH
1956: LD_INT 24
1958: PPUSH
1959: LD_INT 1
1961: PPUSH
1962: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: LD_STRING 10_EpsilonBase
1973: PPUSH
1974: EMPTY
1975: PPUSH
1976: CALL_OW 30
1980: ST_TO_ADDR
// if not blist then
1981: LD_VAR 0 2
1985: NOT
1986: IFFALSE 1990
// exit ;
1988: GO 2170
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// for i in blist do
2006: LD_ADDR_VAR 0 3
2010: PUSH
2011: LD_VAR 0 2
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2168
// begin bc_type := i [ 1 ] ;
2019: LD_ADDR_OWVAR 42
2023: PUSH
2024: LD_VAR 0 3
2028: PUSH
2029: LD_INT 1
2031: ARRAY
2032: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2033: LD_ADDR_OWVAR 43
2037: PUSH
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 5
2045: ARRAY
2046: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2047: LD_VAR 0 3
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PUSH
2056: LD_INT 7
2058: PUSH
2059: LD_INT 8
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: IN
2066: IFFALSE 2096
// begin bc_kind1 := i [ 7 ] ;
2068: LD_ADDR_OWVAR 44
2072: PUSH
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 7
2080: ARRAY
2081: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2082: LD_ADDR_OWVAR 45
2086: PUSH
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 8
2094: ARRAY
2095: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_VAR 0 3
2105: PUSH
2106: LD_INT 2
2108: ARRAY
2109: PPUSH
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 3
2117: ARRAY
2118: PPUSH
2119: LD_VAR 0 3
2123: PUSH
2124: LD_INT 4
2126: ARRAY
2127: PPUSH
2128: CALL_OW 47
2132: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2133: LD_VAR 0 4
2137: PPUSH
2138: CALL_OW 266
2142: PUSH
2143: LD_INT 32
2145: EQUAL
2146: IFFALSE 2166
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2148: LD_VAR 0 4
2152: PPUSH
2153: LD_VAR 0 3
2157: PUSH
2158: LD_INT 7
2160: ARRAY
2161: PPUSH
2162: CALL_OW 431
// end ; end ;
2166: GO 2016
2168: POP
2169: POP
// end ;
2170: LD_VAR 0 1
2174: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
2175: LD_INT 0
2177: PPUSH
2178: PPUSH
2179: PPUSH
2180: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
2181: LD_INT 22
2183: PUSH
2184: LD_INT 1
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 21
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: PUSH
2210: LD_EXP 1
2214: PUSH
2215: LD_EXP 3
2219: PUSH
2220: LD_EXP 4
2224: PUSH
2225: LD_EXP 5
2229: PUSH
2230: LD_EXP 6
2234: PUSH
2235: LD_EXP 7
2239: PUSH
2240: LD_EXP 8
2244: PUSH
2245: LD_EXP 9
2249: PUSH
2250: LD_EXP 10
2254: PUSH
2255: LD_EXP 11
2259: PUSH
2260: LD_EXP 12
2264: PUSH
2265: LD_EXP 13
2269: PUSH
2270: LD_EXP 14
2274: PUSH
2275: LD_EXP 15
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 6
2298: LESS
2299: DIFF
2300: IFFALSE 2523
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
2302: LD_ADDR_VAR 0 4
2306: PUSH
2307: LD_INT 22
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: LD_INT 30
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 30
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 69
2353: ST_TO_ADDR
// uc_side = 1 ;
2354: LD_ADDR_OWVAR 20
2358: PUSH
2359: LD_INT 1
2361: ST_TO_ADDR
// uc_nation = 1 ;
2362: LD_ADDR_OWVAR 21
2366: PUSH
2367: LD_INT 1
2369: ST_TO_ADDR
// for i = 1 to 6 do
2370: LD_ADDR_VAR 0 2
2374: PUSH
2375: DOUBLE
2376: LD_INT 1
2378: DEC
2379: ST_TO_ADDR
2380: LD_INT 6
2382: PUSH
2383: FOR_TO
2384: IFFALSE 2521
// begin hc_gallery =  ;
2386: LD_ADDR_OWVAR 33
2390: PUSH
2391: LD_STRING 
2393: ST_TO_ADDR
// hc_name =  ;
2394: LD_ADDR_OWVAR 26
2398: PUSH
2399: LD_STRING 
2401: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
2402: LD_INT 0
2404: PPUSH
2405: LD_INT 1
2407: PUSH
2408: LD_INT 2
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 4
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 1
2425: PPUSH
2426: LD_INT 4
2428: PPUSH
2429: CALL_OW 12
2433: ARRAY
2434: PPUSH
2435: LD_INT 5
2437: PPUSH
2438: LD_INT 8
2440: PPUSH
2441: CALL_OW 12
2445: PPUSH
2446: CALL_OW 380
// un = CreateHuman ;
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: CALL_OW 44
2459: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
2460: LD_ADDR_EXP 18
2464: PUSH
2465: LD_EXP 18
2469: PUSH
2470: LD_VAR 0 3
2474: ADD
2475: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2476: LD_VAR 0 3
2480: PPUSH
2481: LD_VAR 0 4
2485: PUSH
2486: LD_INT 1
2488: ARRAY
2489: PPUSH
2490: CALL_OW 250
2494: PPUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_INT 1
2502: ARRAY
2503: PPUSH
2504: CALL_OW 251
2508: PPUSH
2509: LD_INT 15
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL_OW 50
// end ;
2519: GO 2383
2521: POP
2522: POP
// end ; end ; end_of_file
2523: LD_VAR 0 1
2527: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
// if exist_mode then
2532: LD_VAR 0 2
2536: IFFALSE 2683
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
2538: LD_EXP 21
2542: PUSH
2543: LD_VAR 0 1
2547: STR
2548: PPUSH
2549: CALL_OW 28
2553: PUSH
2554: LD_INT 1
2556: EQUAL
2557: IFFALSE 2582
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
2559: LD_ADDR_VAR 0 4
2563: PUSH
2564: LD_EXP 21
2568: PUSH
2569: LD_VAR 0 1
2573: STR
2574: PPUSH
2575: CALL_OW 34
2579: ST_TO_ADDR
// end else
2580: GO 2681
// begin if TestCharacters ( 11_ & ident ) = true then
2582: LD_STRING 11_
2584: PUSH
2585: LD_VAR 0 1
2589: STR
2590: PPUSH
2591: CALL_OW 28
2595: PUSH
2596: LD_INT 1
2598: EQUAL
2599: IFFALSE 2622
// begin unit := CreateCharacter ( 11_ & ident ) ;
2601: LD_ADDR_VAR 0 4
2605: PUSH
2606: LD_STRING 11_
2608: PUSH
2609: LD_VAR 0 1
2613: STR
2614: PPUSH
2615: CALL_OW 34
2619: ST_TO_ADDR
// end else
2620: GO 2681
// begin if TestCharacters ( 10c_ & ident ) = true then
2622: LD_STRING 10c_
2624: PUSH
2625: LD_VAR 0 1
2629: STR
2630: PPUSH
2631: CALL_OW 28
2635: PUSH
2636: LD_INT 1
2638: EQUAL
2639: IFFALSE 2662
// unit := CreateCharacter ( 10c_ & ident ) else
2641: LD_ADDR_VAR 0 4
2645: PUSH
2646: LD_STRING 10c_
2648: PUSH
2649: LD_VAR 0 1
2653: STR
2654: PPUSH
2655: CALL_OW 34
2659: ST_TO_ADDR
2660: GO 2681
// unit := CreateCharacter ( 10_ & ident ) ;
2662: LD_ADDR_VAR 0 4
2666: PUSH
2667: LD_STRING 10_
2669: PUSH
2670: LD_VAR 0 1
2674: STR
2675: PPUSH
2676: CALL_OW 34
2680: ST_TO_ADDR
// end ; end ; end else
2681: GO 2698
// begin unit := NewCharacter ( ident ) ;
2683: LD_ADDR_VAR 0 4
2687: PUSH
2688: LD_VAR 0 1
2692: PPUSH
2693: CALL_OW 25
2697: ST_TO_ADDR
// end ; result := unit ;
2698: LD_ADDR_VAR 0 3
2702: PUSH
2703: LD_VAR 0 4
2707: ST_TO_ADDR
// end ;
2708: LD_VAR 0 3
2712: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
2713: LD_INT 0
2715: PPUSH
// if unit in selectedTab then
2716: LD_VAR 0 1
2720: PUSH
2721: LD_VAR 0 3
2725: IN
2726: IFFALSE 2748
// SaveCharacters ( unit , 13c_ & unitString ) else
2728: LD_VAR 0 1
2732: PPUSH
2733: LD_STRING 13c_
2735: PUSH
2736: LD_VAR 0 2
2740: STR
2741: PPUSH
2742: CALL_OW 38
2746: GO 2766
// SaveCharacters ( unit , 13s_ & unitString ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: LD_STRING 13s_
2755: PUSH
2756: LD_VAR 0 2
2760: STR
2761: PPUSH
2762: CALL_OW 38
// end ;
2766: LD_VAR 0 4
2770: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
2771: LD_INT 0
2773: PPUSH
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
2779: LD_ADDR_VAR 0 4
2783: PUSH
2784: LD_EXP 3
2788: PUSH
2789: LD_EXP 4
2793: PUSH
2794: LD_EXP 5
2798: PUSH
2799: LD_EXP 6
2803: PUSH
2804: LD_EXP 7
2808: PUSH
2809: LD_EXP 8
2813: PUSH
2814: LD_EXP 9
2818: PUSH
2819: LD_EXP 10
2823: PUSH
2824: LD_EXP 11
2828: PUSH
2829: LD_EXP 12
2833: PUSH
2834: LD_EXP 13
2838: PUSH
2839: LD_EXP 14
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: ST_TO_ADDR
// tmp = tmp ^ others11 ;
2858: LD_ADDR_VAR 0 4
2862: PUSH
2863: LD_VAR 0 4
2867: PUSH
2868: LD_EXP 17
2872: ADD
2873: ST_TO_ADDR
// tmp = tmp ^ others12 ;
2874: LD_ADDR_VAR 0 4
2878: PUSH
2879: LD_VAR 0 4
2883: PUSH
2884: LD_EXP 16
2888: ADD
2889: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
2890: LD_ADDR_VAR 0 4
2894: PUSH
2895: LD_VAR 0 4
2899: PUSH
2900: LD_EXP 18
2904: ADD
2905: ST_TO_ADDR
// for i in tmp do
2906: LD_ADDR_VAR 0 2
2910: PUSH
2911: LD_VAR 0 4
2915: PUSH
2916: FOR_IN
2917: IFFALSE 2956
// if GetClass ( i ) = 8 then
2919: LD_VAR 0 2
2923: PPUSH
2924: CALL_OW 257
2928: PUSH
2929: LD_INT 8
2931: EQUAL
2932: IFFALSE 2954
// SetClass ( i , rand ( 1 , 4 ) ) ;
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_INT 1
2941: PPUSH
2942: LD_INT 4
2944: PPUSH
2945: CALL_OW 12
2949: PPUSH
2950: CALL_OW 336
2954: GO 2916
2956: POP
2957: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
2958: LD_ADDR_VAR 0 3
2962: PUSH
2963: LD_STRING 1
2965: PPUSH
2966: LD_INT 6
2968: PPUSH
2969: LD_INT 6
2971: PPUSH
2972: LD_INT -5
2974: PUSH
2975: LD_EXP 1
2979: PUSH
2980: LD_EXP 15
2984: PUSH
2985: LD_INT -2
2987: PUSH
2988: LD_INT -3
2990: PUSH
2991: LD_INT -5
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: PUSH
3002: LD_VAR 0 4
3006: ADD
3007: PUSH
3008: LD_INT -6
3010: PUSH
3011: LD_INT -4
3013: PUSH
3014: LD_EXP 2
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: LIST
3023: ADD
3024: PPUSH
3025: LD_INT 1
3027: PUSH
3028: LD_INT 0
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 3
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 5
3067: PUSH
3068: LD_INT 0
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: PPUSH
3086: CALL_OW 42
3090: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3091: LD_ADDR_VAR 0 5
3095: PUSH
3096: LD_VAR 0 3
3100: PUSH
3101: LD_EXP 3
3105: PUSH
3106: LD_EXP 4
3110: PUSH
3111: LD_EXP 5
3115: PUSH
3116: LD_EXP 6
3120: PUSH
3121: LD_EXP 7
3125: PUSH
3126: LD_EXP 8
3130: PUSH
3131: LD_EXP 9
3135: PUSH
3136: LD_EXP 10
3140: PUSH
3141: LD_EXP 11
3145: PUSH
3146: LD_EXP 12
3150: PUSH
3151: LD_EXP 13
3155: PUSH
3156: LD_EXP 14
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: DIFF
3175: ST_TO_ADDR
// othersInBase = tmp diff selected ;
3176: LD_ADDR_VAR 0 6
3180: PUSH
3181: LD_VAR 0 4
3185: PUSH
3186: LD_VAR 0 3
3190: DIFF
3191: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3192: LD_ADDR_VAR 0 6
3196: PUSH
3197: LD_VAR 0 6
3201: PUSH
3202: LD_EXP 3
3206: PUSH
3207: LD_EXP 4
3211: PUSH
3212: LD_EXP 5
3216: PUSH
3217: LD_EXP 6
3221: PUSH
3222: LD_EXP 7
3226: PUSH
3227: LD_EXP 8
3231: PUSH
3232: LD_EXP 9
3236: PUSH
3237: LD_EXP 10
3241: PUSH
3242: LD_EXP 11
3246: PUSH
3247: LD_EXP 12
3251: PUSH
3252: LD_EXP 13
3256: PUSH
3257: LD_EXP 14
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: DIFF
3276: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_STRING 13c_others
3284: PPUSH
3285: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
3289: LD_VAR 0 6
3293: PPUSH
3294: LD_STRING 13s_others
3296: PPUSH
3297: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
3301: LD_EXP 1
3305: PPUSH
3306: LD_STRING 13c_JMM
3308: PPUSH
3309: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
3313: LD_EXP 15
3317: PPUSH
3318: LD_STRING 13c_Stevens
3320: PPUSH
3321: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
3325: LD_EXP 3
3329: PPUSH
3330: LD_STRING Lisa
3332: PPUSH
3333: LD_VAR 0 3
3337: PPUSH
3338: CALL 2713 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
3342: LD_EXP 8
3346: PPUSH
3347: LD_STRING Brown
3349: PPUSH
3350: LD_VAR 0 3
3354: PPUSH
3355: CALL 2713 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
3359: LD_EXP 4
3363: PPUSH
3364: LD_STRING Donaldson
3366: PPUSH
3367: LD_VAR 0 3
3371: PPUSH
3372: CALL 2713 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
3376: LD_EXP 5
3380: PPUSH
3381: LD_STRING Bobby
3383: PPUSH
3384: LD_VAR 0 3
3388: PPUSH
3389: CALL 2713 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
3393: LD_EXP 6
3397: PPUSH
3398: LD_STRING Cyrus
3400: PPUSH
3401: LD_VAR 0 3
3405: PPUSH
3406: CALL 2713 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
3410: LD_EXP 7
3414: PPUSH
3415: LD_STRING Denis
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: CALL 2713 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
3427: LD_EXP 9
3431: PPUSH
3432: LD_STRING Gladstone
3434: PPUSH
3435: LD_VAR 0 3
3439: PPUSH
3440: CALL 2713 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
3444: LD_EXP 10
3448: PPUSH
3449: LD_STRING Houten
3451: PPUSH
3452: LD_VAR 0 3
3456: PPUSH
3457: CALL 2713 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
3461: LD_EXP 11
3465: PPUSH
3466: LD_STRING Cornel
3468: PPUSH
3469: LD_VAR 0 3
3473: PPUSH
3474: CALL 2713 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
3478: LD_EXP 12
3482: PPUSH
3483: LD_STRING Gary
3485: PPUSH
3486: LD_VAR 0 3
3490: PPUSH
3491: CALL 2713 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
3495: LD_EXP 13
3499: PPUSH
3500: LD_STRING Frank
3502: PPUSH
3503: LD_VAR 0 3
3507: PPUSH
3508: CALL 2713 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
3512: LD_EXP 14
3516: PPUSH
3517: LD_STRING Kikuchi
3519: PPUSH
3520: LD_VAR 0 3
3524: PPUSH
3525: CALL 2713 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
3529: LD_INT 22
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: EMPTY
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 21
3541: PUSH
3542: LD_INT 1
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PPUSH
3553: CALL_OW 69
3557: PPUSH
3558: LD_INT 4
3560: PPUSH
3561: CALL_OW 235
// SetSide ( selected , 1 ) ;
3565: LD_VAR 0 3
3569: PPUSH
3570: LD_INT 1
3572: PPUSH
3573: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
3577: LD_EXP 1
3581: PUSH
3582: LD_EXP 15
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: CALL_OW 235
// end ;
3598: LD_VAR 0 1
3602: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
3607: LD_ADDR_VAR 0 2
3611: PUSH
3612: LD_VAR 0 1
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: CALL_OW 289
3624: PUSH
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 2
3632: PPUSH
3633: CALL_OW 289
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: CALL_OW 289
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: ST_TO_ADDR
// end ; end_of_file
3656: LD_VAR 0 2
3660: RET
// on Command ( comandid ) do var i ;
3661: LD_INT 0
3663: PPUSH
// begin if comandid = 65 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 65
3671: EQUAL
3672: IFFALSE 3713
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: LD_INT 22
3681: PUSH
3682: LD_INT 1
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: PUSH
3689: EMPTY
3690: LIST
3691: PPUSH
3692: CALL_OW 69
3696: PUSH
3697: FOR_IN
3698: IFFALSE 3711
// ComStop ( i ) ;
3700: LD_VAR 0 2
3704: PPUSH
3705: CALL_OW 141
3709: GO 3697
3711: POP
3712: POP
// end ;
3713: PPOPN 2
3715: END
