// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1947 0 0
// PrepareHeroes ;
  45: CALL 788 0 0
// PrepareRandoms ;
  49: CALL 2204 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 2800 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: LD_INT 58
 321: PUSH
 322: EMPTY
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 70
 340: PUSH
 341: LD_INT 8
 343: EQUAL
 344: AND
 345: IFFALSE 685
 347: GO 349
 349: DISABLE
 350: LD_INT 0
 352: PPUSH
 353: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 354: LD_INT 1
 356: PPUSH
 357: LD_INT 21
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 33
 369: PUSH
 370: LD_INT 1
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: LD_INT 3
 379: PUSH
 380: LD_INT 58
 382: PUSH
 383: EMPTY
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 70
 399: PUSH
 400: LD_INT 0
 402: GREATER
 403: IFFALSE 671
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_empty ] ] ] ) do
 405: LD_ADDR_VAR 0 1
 409: PUSH
 410: LD_INT 1
 412: PPUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 33
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 3
 435: PUSH
 436: LD_INT 58
 438: PUSH
 439: EMPTY
 440: LIST
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: LIST
 450: PPUSH
 451: CALL_OW 70
 455: PUSH
 456: FOR_IN
 457: IFFALSE 657
// begin cargoType = GetCargoType ( i ) ;
 459: LD_ADDR_VAR 0 2
 463: PUSH
 464: LD_VAR 0 1
 468: PPUSH
 469: CALL_OW 288
 473: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 474: LD_VAR 0 1
 478: PPUSH
 479: CALL_OW 264
 483: PUSH
 484: LD_INT 12
 486: EQUAL
 487: IFFALSE 584
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 489: LD_ADDR_EXP 19
 493: PUSH
 494: LD_EXP 19
 498: PUSH
 499: LD_VAR 0 1
 503: PPUSH
 504: CALL_OW 248
 508: PUSH
 509: LD_VAR 0 1
 513: PPUSH
 514: CALL_OW 265
 518: PUSH
 519: LD_VAR 0 1
 523: PPUSH
 524: CALL_OW 262
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 263
 538: PUSH
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 264
 548: PUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_VAR 0 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PPUSH
 564: CALL_OW 289
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: ADD
 581: ST_TO_ADDR
// end else
 582: GO 655
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 584: LD_ADDR_EXP 19
 588: PUSH
 589: LD_EXP 19
 593: PUSH
 594: LD_VAR 0 1
 598: PPUSH
 599: CALL_OW 248
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: CALL_OW 265
 613: PUSH
 614: LD_VAR 0 1
 618: PPUSH
 619: CALL_OW 262
 623: PUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: CALL_OW 263
 633: PUSH
 634: LD_VAR 0 1
 638: PPUSH
 639: CALL_OW 264
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: ADD
 654: ST_TO_ADDR
// end ; end ;
 655: GO 456
 657: POP
 658: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 659: LD_EXP 19
 663: PPUSH
 664: LD_STRING 13_VehiclesIn13_1
 666: PPUSH
 667: CALL_OW 39
// end ; SaveCargos ;
 671: CALL 688 0 0
// ChangeMap ( 13 , %_cont ) ;
 675: LD_INT 13
 677: PPUSH
 678: LD_STRING %_cont
 680: PPUSH
 681: CALL_OW 340
// end ;
 685: PPOPN 2
 687: END
// export function SaveCargos ; var i ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_control , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 692: LD_ADDR_VAR 0 2
 696: PUSH
 697: LD_INT 1
 699: PPUSH
 700: LD_INT 22
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 33
 712: PUSH
 713: LD_INT 1
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 34
 722: PUSH
 723: LD_INT 12
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: PUSH
 740: FOR_IN
 741: IFFALSE 769
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 743: LD_ADDR_EXP 20
 747: PUSH
 748: LD_EXP 20
 752: PUSH
 753: LD_VAR 0 2
 757: PPUSH
 758: CALL 3626 0 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: ADD
 766: ST_TO_ADDR
 767: GO 740
 769: POP
 770: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 771: LD_EXP 20
 775: PPUSH
 776: LD_STRING 13_ResourcesInCargo13_1
 778: PPUSH
 779: CALL_OW 39
// end ; end_of_file
 783: LD_VAR 0 1
 787: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 788: LD_INT 0
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 794: LD_ADDR_VAR 0 4
 798: PUSH
 799: LD_INT 22
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: LD_INT 2
 811: PUSH
 812: LD_INT 30
 814: PUSH
 815: LD_INT 0
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PPUSH
 841: CALL_OW 69
 845: ST_TO_ADDR
// uc_side = 1 ;
 846: LD_ADDR_OWVAR 20
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 854: LD_ADDR_EXP 1
 858: PUSH
 859: LD_STRING JMM
 861: PPUSH
 862: LD_INT 1
 864: PPUSH
 865: CALL 2557 0 2
 869: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 870: LD_ADDR_EXP 3
 874: PUSH
 875: LD_STRING Lisa
 877: PPUSH
 878: LD_INT 1
 880: PPUSH
 881: CALL 2557 0 2
 885: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 886: LD_ADDR_EXP 4
 890: PUSH
 891: LD_STRING Donaldson
 893: PPUSH
 894: LD_INT 1
 896: PPUSH
 897: CALL 2557 0 2
 901: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 902: LD_ADDR_EXP 5
 906: PUSH
 907: LD_STRING Bobby
 909: PPUSH
 910: LD_INT 1
 912: PPUSH
 913: CALL 2557 0 2
 917: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 918: LD_ADDR_EXP 6
 922: PUSH
 923: LD_STRING Cyrus
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL 2557 0 2
 933: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 934: LD_ADDR_EXP 7
 938: PUSH
 939: LD_STRING Denis
 941: PPUSH
 942: LD_INT 1
 944: PPUSH
 945: CALL 2557 0 2
 949: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 950: LD_ADDR_EXP 8
 954: PUSH
 955: LD_STRING Brown
 957: PPUSH
 958: LD_INT 1
 960: PPUSH
 961: CALL 2557 0 2
 965: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 966: LD_ADDR_EXP 9
 970: PUSH
 971: LD_STRING Gladstone
 973: PPUSH
 974: LD_INT 1
 976: PPUSH
 977: CALL 2557 0 2
 981: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 982: LD_ADDR_EXP 10
 986: PUSH
 987: LD_STRING Houten
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL 2557 0 2
 997: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 998: LD_ADDR_EXP 11
1002: PUSH
1003: LD_STRING Cornell
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL 2557 0 2
1013: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
1014: LD_ADDR_EXP 12
1018: PUSH
1019: LD_STRING Gary
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: CALL 2557 0 2
1029: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
1030: LD_ADDR_EXP 13
1034: PUSH
1035: LD_STRING Frank
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: CALL 2557 0 2
1045: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
1046: LD_ADDR_EXP 14
1050: PUSH
1051: LD_STRING Kikuchi
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: CALL 2557 0 2
1061: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1062: LD_ADDR_EXP 15
1066: PUSH
1067: LD_STRING Stevens
1069: PPUSH
1070: LD_INT 0
1072: PPUSH
1073: CALL 2557 0 2
1077: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1078: LD_ADDR_EXP 2
1082: PUSH
1083: LD_STRING Powell
1085: PPUSH
1086: LD_INT 0
1088: PPUSH
1089: CALL 2557 0 2
1093: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1094: LD_EXP 1
1098: PPUSH
1099: LD_VAR 0 4
1103: PUSH
1104: LD_INT 1
1106: ARRAY
1107: PPUSH
1108: CALL_OW 250
1112: PPUSH
1113: LD_VAR 0 4
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 251
1126: PPUSH
1127: LD_INT 4
1129: PPUSH
1130: LD_INT 0
1132: PPUSH
1133: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1137: LD_EXP 15
1141: PPUSH
1142: LD_VAR 0 4
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 250
1155: PPUSH
1156: LD_VAR 0 4
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PPUSH
1165: CALL_OW 251
1169: PPUSH
1170: LD_INT 4
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1180: LD_EXP 3
1184: PPUSH
1185: LD_VAR 0 4
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 250
1198: PPUSH
1199: LD_VAR 0 4
1203: PUSH
1204: LD_INT 1
1206: ARRAY
1207: PPUSH
1208: CALL_OW 251
1212: PPUSH
1213: LD_INT 35
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1223: LD_EXP 4
1227: PPUSH
1228: LD_VAR 0 4
1232: PUSH
1233: LD_INT 1
1235: ARRAY
1236: PPUSH
1237: CALL_OW 250
1241: PPUSH
1242: LD_VAR 0 4
1246: PUSH
1247: LD_INT 1
1249: ARRAY
1250: PPUSH
1251: CALL_OW 251
1255: PPUSH
1256: LD_INT 35
1258: PPUSH
1259: LD_INT 0
1261: PPUSH
1262: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1266: LD_EXP 5
1270: PPUSH
1271: LD_VAR 0 4
1275: PUSH
1276: LD_INT 1
1278: ARRAY
1279: PPUSH
1280: CALL_OW 250
1284: PPUSH
1285: LD_VAR 0 4
1289: PUSH
1290: LD_INT 1
1292: ARRAY
1293: PPUSH
1294: CALL_OW 251
1298: PPUSH
1299: LD_INT 35
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1309: LD_EXP 6
1313: PPUSH
1314: LD_VAR 0 4
1318: PUSH
1319: LD_INT 1
1321: ARRAY
1322: PPUSH
1323: CALL_OW 250
1327: PPUSH
1328: LD_VAR 0 4
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: PPUSH
1337: CALL_OW 251
1341: PPUSH
1342: LD_INT 35
1344: PPUSH
1345: LD_INT 0
1347: PPUSH
1348: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1352: LD_EXP 7
1356: PPUSH
1357: LD_VAR 0 4
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: CALL_OW 250
1370: PPUSH
1371: LD_VAR 0 4
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PPUSH
1380: CALL_OW 251
1384: PPUSH
1385: LD_INT 35
1387: PPUSH
1388: LD_INT 0
1390: PPUSH
1391: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1395: LD_EXP 8
1399: PPUSH
1400: LD_VAR 0 4
1404: PUSH
1405: LD_INT 1
1407: ARRAY
1408: PPUSH
1409: CALL_OW 250
1413: PPUSH
1414: LD_VAR 0 4
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: CALL_OW 251
1427: PPUSH
1428: LD_INT 35
1430: PPUSH
1431: LD_INT 0
1433: PPUSH
1434: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1438: LD_EXP 9
1442: PPUSH
1443: LD_VAR 0 4
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 250
1456: PPUSH
1457: LD_VAR 0 4
1461: PUSH
1462: LD_INT 1
1464: ARRAY
1465: PPUSH
1466: CALL_OW 251
1470: PPUSH
1471: LD_INT 35
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1481: LD_EXP 10
1485: PPUSH
1486: LD_VAR 0 4
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: PPUSH
1495: CALL_OW 250
1499: PPUSH
1500: LD_VAR 0 4
1504: PUSH
1505: LD_INT 1
1507: ARRAY
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_INT 35
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1524: LD_EXP 11
1528: PPUSH
1529: LD_VAR 0 4
1533: PUSH
1534: LD_INT 1
1536: ARRAY
1537: PPUSH
1538: CALL_OW 250
1542: PPUSH
1543: LD_VAR 0 4
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: CALL_OW 251
1556: PPUSH
1557: LD_INT 35
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1567: LD_EXP 12
1571: PPUSH
1572: LD_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: ARRAY
1580: PPUSH
1581: CALL_OW 250
1585: PPUSH
1586: LD_VAR 0 4
1590: PUSH
1591: LD_INT 1
1593: ARRAY
1594: PPUSH
1595: CALL_OW 251
1599: PPUSH
1600: LD_INT 35
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1610: LD_EXP 13
1614: PPUSH
1615: LD_VAR 0 4
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PPUSH
1624: CALL_OW 250
1628: PPUSH
1629: LD_VAR 0 4
1633: PUSH
1634: LD_INT 1
1636: ARRAY
1637: PPUSH
1638: CALL_OW 251
1642: PPUSH
1643: LD_INT 35
1645: PPUSH
1646: LD_INT 0
1648: PPUSH
1649: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1653: LD_EXP 14
1657: PPUSH
1658: LD_VAR 0 4
1662: PUSH
1663: LD_INT 1
1665: ARRAY
1666: PPUSH
1667: CALL_OW 250
1671: PPUSH
1672: LD_VAR 0 4
1676: PUSH
1677: LD_INT 1
1679: ARRAY
1680: PPUSH
1681: CALL_OW 251
1685: PPUSH
1686: LD_INT 35
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1696: LD_VAR 0 4
1700: PUSH
1701: LD_INT 1
1703: ARRAY
1704: PPUSH
1705: LD_STRING epsilon
1707: PPUSH
1708: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1712: LD_VAR 0 4
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: CALL_OW 274
1725: PPUSH
1726: LD_INT 1
1728: PPUSH
1729: LD_INT 3000
1731: PPUSH
1732: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1736: LD_VAR 0 4
1740: PUSH
1741: LD_INT 1
1743: ARRAY
1744: PPUSH
1745: CALL_OW 274
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1760: LD_VAR 0 4
1764: PUSH
1765: LD_INT 1
1767: ARRAY
1768: PPUSH
1769: CALL_OW 274
1773: PPUSH
1774: LD_INT 3
1776: PPUSH
1777: LD_INT 200
1779: PPUSH
1780: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1784: LD_EXP 1
1788: PPUSH
1789: LD_INT 1
1791: PPUSH
1792: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1796: LD_ADDR_EXP 16
1800: PUSH
1801: LD_STRING 12_other_survivors
1803: PPUSH
1804: CALL_OW 31
1808: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
1809: LD_ADDR_EXP 17
1813: PUSH
1814: LD_STRING 11_others
1816: PPUSH
1817: CALL_OW 31
1821: ST_TO_ADDR
// for i in others11 do
1822: LD_ADDR_VAR 0 2
1826: PUSH
1827: LD_EXP 17
1831: PUSH
1832: FOR_IN
1833: IFFALSE 1880
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_VAR 0 4
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PPUSH
1849: CALL_OW 250
1853: PPUSH
1854: LD_VAR 0 4
1858: PUSH
1859: LD_INT 1
1861: ARRAY
1862: PPUSH
1863: CALL_OW 251
1867: PPUSH
1868: LD_INT 35
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 50
1878: GO 1832
1880: POP
1881: POP
// for i in others12 do
1882: LD_ADDR_VAR 0 2
1886: PUSH
1887: LD_EXP 16
1891: PUSH
1892: FOR_IN
1893: IFFALSE 1940
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_VAR 0 4
1904: PUSH
1905: LD_INT 1
1907: ARRAY
1908: PPUSH
1909: CALL_OW 250
1913: PPUSH
1914: LD_VAR 0 4
1918: PUSH
1919: LD_INT 1
1921: ARRAY
1922: PPUSH
1923: CALL_OW 251
1927: PPUSH
1928: LD_INT 35
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 50
1938: GO 1892
1940: POP
1941: POP
// end ;
1942: LD_VAR 0 1
1946: RET
// export function PrepareEpsilonBase ; var blist , i , b , un ; begin
1947: LD_INT 0
1949: PPUSH
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1954: LD_INT 113
1956: PPUSH
1957: LD_INT 50
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1967: LD_INT 104
1969: PPUSH
1970: LD_INT 24
1972: PPUSH
1973: LD_INT 1
1975: PPUSH
1976: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
1980: LD_ADDR_VAR 0 2
1984: PUSH
1985: LD_STRING 10_EpsilonBase
1987: PPUSH
1988: EMPTY
1989: PPUSH
1990: CALL_OW 30
1994: ST_TO_ADDR
// if not blist then
1995: LD_VAR 0 2
1999: NOT
2000: IFFALSE 2004
// exit ;
2002: GO 2199
// uc_side := 1 ;
2004: LD_ADDR_OWVAR 20
2008: PUSH
2009: LD_INT 1
2011: ST_TO_ADDR
// uc_nation := 1 ;
2012: LD_ADDR_OWVAR 21
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// for i in blist do
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: LD_VAR 0 2
2029: PUSH
2030: FOR_IN
2031: IFFALSE 2197
// begin bc_type := i [ 1 ] ;
2033: LD_ADDR_OWVAR 42
2037: PUSH
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 1
2045: ARRAY
2046: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2047: LD_ADDR_OWVAR 43
2051: PUSH
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 5
2059: ARRAY
2060: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2061: LD_VAR 0 3
2065: PUSH
2066: LD_INT 1
2068: ARRAY
2069: PUSH
2070: LD_INT 7
2072: PUSH
2073: LD_INT 8
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: IN
2080: IFFALSE 2110
// begin bc_kind1 := i [ 7 ] ;
2082: LD_ADDR_OWVAR 44
2086: PUSH
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 7
2094: ARRAY
2095: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2096: LD_ADDR_OWVAR 45
2100: PUSH
2101: LD_VAR 0 3
2105: PUSH
2106: LD_INT 8
2108: ARRAY
2109: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2110: LD_ADDR_VAR 0 4
2114: PUSH
2115: LD_VAR 0 3
2119: PUSH
2120: LD_INT 2
2122: ARRAY
2123: PPUSH
2124: LD_VAR 0 3
2128: PUSH
2129: LD_INT 3
2131: ARRAY
2132: PPUSH
2133: LD_VAR 0 3
2137: PUSH
2138: LD_INT 4
2140: ARRAY
2141: PPUSH
2142: CALL_OW 47
2146: ST_TO_ADDR
// if GetBType ( b ) = b_bunker or GetBType ( b ) = b_turret then
2147: LD_VAR 0 4
2151: PPUSH
2152: CALL_OW 266
2156: PUSH
2157: LD_INT 32
2159: EQUAL
2160: PUSH
2161: LD_VAR 0 4
2165: PPUSH
2166: CALL_OW 266
2170: PUSH
2171: LD_INT 33
2173: EQUAL
2174: OR
2175: IFFALSE 2195
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2177: LD_VAR 0 4
2181: PPUSH
2182: LD_VAR 0 3
2186: PUSH
2187: LD_INT 7
2189: ARRAY
2190: PPUSH
2191: CALL_OW 431
// end ; end ;
2195: GO 2030
2197: POP
2198: POP
// end ;
2199: LD_VAR 0 1
2203: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
2204: LD_INT 0
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_EXP 1
2243: PUSH
2244: LD_EXP 3
2248: PUSH
2249: LD_EXP 4
2253: PUSH
2254: LD_EXP 5
2258: PUSH
2259: LD_EXP 6
2263: PUSH
2264: LD_EXP 7
2268: PUSH
2269: LD_EXP 8
2273: PUSH
2274: LD_EXP 9
2278: PUSH
2279: LD_EXP 10
2283: PUSH
2284: LD_EXP 11
2288: PUSH
2289: LD_EXP 12
2293: PUSH
2294: LD_EXP 13
2298: PUSH
2299: LD_EXP 14
2303: PUSH
2304: LD_EXP 15
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 6
2327: LESS
2328: DIFF
2329: IFFALSE 2552
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
2331: LD_ADDR_VAR 0 4
2335: PUSH
2336: LD_INT 22
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 30
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PPUSH
2378: CALL_OW 69
2382: ST_TO_ADDR
// uc_side = 1 ;
2383: LD_ADDR_OWVAR 20
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// uc_nation = 1 ;
2391: LD_ADDR_OWVAR 21
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// for i = 1 to 6 do
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: DOUBLE
2405: LD_INT 1
2407: DEC
2408: ST_TO_ADDR
2409: LD_INT 6
2411: PUSH
2412: FOR_TO
2413: IFFALSE 2550
// begin hc_gallery =  ;
2415: LD_ADDR_OWVAR 33
2419: PUSH
2420: LD_STRING 
2422: ST_TO_ADDR
// hc_name =  ;
2423: LD_ADDR_OWVAR 26
2427: PUSH
2428: LD_STRING 
2430: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
2431: LD_INT 0
2433: PPUSH
2434: LD_INT 1
2436: PUSH
2437: LD_INT 2
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_INT 4
2457: PPUSH
2458: CALL_OW 12
2462: ARRAY
2463: PPUSH
2464: LD_INT 5
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: CALL_OW 380
// un = CreateHuman ;
2479: LD_ADDR_VAR 0 3
2483: PUSH
2484: CALL_OW 44
2488: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
2489: LD_ADDR_EXP 18
2493: PUSH
2494: LD_EXP 18
2498: PUSH
2499: LD_VAR 0 3
2503: ADD
2504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2505: LD_VAR 0 3
2509: PPUSH
2510: LD_VAR 0 4
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 250
2523: PPUSH
2524: LD_VAR 0 4
2528: PUSH
2529: LD_INT 1
2531: ARRAY
2532: PPUSH
2533: CALL_OW 251
2537: PPUSH
2538: LD_INT 15
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL_OW 50
// end ;
2548: GO 2412
2550: POP
2551: POP
// end ; end ; end_of_file
2552: LD_VAR 0 1
2556: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2557: LD_INT 0
2559: PPUSH
2560: PPUSH
// if exist_mode then
2561: LD_VAR 0 2
2565: IFFALSE 2712
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
2567: LD_EXP 21
2571: PUSH
2572: LD_VAR 0 1
2576: STR
2577: PPUSH
2578: CALL_OW 28
2582: PUSH
2583: LD_INT 1
2585: EQUAL
2586: IFFALSE 2611
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
2588: LD_ADDR_VAR 0 4
2592: PUSH
2593: LD_EXP 21
2597: PUSH
2598: LD_VAR 0 1
2602: STR
2603: PPUSH
2604: CALL_OW 34
2608: ST_TO_ADDR
// end else
2609: GO 2710
// begin if TestCharacters ( 11_ & ident ) = true then
2611: LD_STRING 11_
2613: PUSH
2614: LD_VAR 0 1
2618: STR
2619: PPUSH
2620: CALL_OW 28
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: IFFALSE 2651
// begin unit := CreateCharacter ( 11_ & ident ) ;
2630: LD_ADDR_VAR 0 4
2634: PUSH
2635: LD_STRING 11_
2637: PUSH
2638: LD_VAR 0 1
2642: STR
2643: PPUSH
2644: CALL_OW 34
2648: ST_TO_ADDR
// end else
2649: GO 2710
// begin if TestCharacters ( 10c_ & ident ) = true then
2651: LD_STRING 10c_
2653: PUSH
2654: LD_VAR 0 1
2658: STR
2659: PPUSH
2660: CALL_OW 28
2664: PUSH
2665: LD_INT 1
2667: EQUAL
2668: IFFALSE 2691
// unit := CreateCharacter ( 10c_ & ident ) else
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: LD_STRING 10c_
2677: PUSH
2678: LD_VAR 0 1
2682: STR
2683: PPUSH
2684: CALL_OW 34
2688: ST_TO_ADDR
2689: GO 2710
// unit := CreateCharacter ( 10_ & ident ) ;
2691: LD_ADDR_VAR 0 4
2695: PUSH
2696: LD_STRING 10_
2698: PUSH
2699: LD_VAR 0 1
2703: STR
2704: PPUSH
2705: CALL_OW 34
2709: ST_TO_ADDR
// end ; end ; end else
2710: GO 2727
// begin unit := NewCharacter ( ident ) ;
2712: LD_ADDR_VAR 0 4
2716: PUSH
2717: LD_VAR 0 1
2721: PPUSH
2722: CALL_OW 25
2726: ST_TO_ADDR
// end ; result := unit ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: LD_VAR 0 4
2736: ST_TO_ADDR
// end ;
2737: LD_VAR 0 3
2741: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
2742: LD_INT 0
2744: PPUSH
// if unit in selectedTab then
2745: LD_VAR 0 1
2749: PUSH
2750: LD_VAR 0 3
2754: IN
2755: IFFALSE 2777
// SaveCharacters ( unit , 13c_ & unitString ) else
2757: LD_VAR 0 1
2761: PPUSH
2762: LD_STRING 13c_
2764: PUSH
2765: LD_VAR 0 2
2769: STR
2770: PPUSH
2771: CALL_OW 38
2775: GO 2795
// SaveCharacters ( unit , 13s_ & unitString ) ;
2777: LD_VAR 0 1
2781: PPUSH
2782: LD_STRING 13s_
2784: PUSH
2785: LD_VAR 0 2
2789: STR
2790: PPUSH
2791: CALL_OW 38
// end ;
2795: LD_VAR 0 4
2799: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
2800: LD_INT 0
2802: PPUSH
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
2807: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
2808: LD_ADDR_VAR 0 4
2812: PUSH
2813: LD_EXP 3
2817: PUSH
2818: LD_EXP 4
2822: PUSH
2823: LD_EXP 5
2827: PUSH
2828: LD_EXP 6
2832: PUSH
2833: LD_EXP 8
2837: PUSH
2838: LD_EXP 9
2842: PUSH
2843: LD_EXP 10
2847: PUSH
2848: LD_EXP 11
2852: PUSH
2853: LD_EXP 12
2857: PUSH
2858: LD_EXP 13
2862: PUSH
2863: LD_EXP 14
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: LIST
2880: ST_TO_ADDR
// tmp = tmp ^ others11 ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 4
2890: PUSH
2891: LD_EXP 17
2895: ADD
2896: ST_TO_ADDR
// tmp = tmp ^ others12 ;
2897: LD_ADDR_VAR 0 4
2901: PUSH
2902: LD_VAR 0 4
2906: PUSH
2907: LD_EXP 16
2911: ADD
2912: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: LD_VAR 0 4
2922: PUSH
2923: LD_EXP 18
2927: ADD
2928: ST_TO_ADDR
// for i in tmp do
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: LD_VAR 0 4
2938: PUSH
2939: FOR_IN
2940: IFFALSE 2979
// if GetClass ( i ) = 8 then
2942: LD_VAR 0 2
2946: PPUSH
2947: CALL_OW 257
2951: PUSH
2952: LD_INT 8
2954: EQUAL
2955: IFFALSE 2977
// SetClass ( i , rand ( 1 , 4 ) ) ;
2957: LD_VAR 0 2
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: LD_INT 4
2967: PPUSH
2968: CALL_OW 12
2972: PPUSH
2973: CALL_OW 336
2977: GO 2939
2979: POP
2980: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 3
2985: PUSH
2986: LD_STRING 1
2988: PPUSH
2989: LD_INT 6
2991: PPUSH
2992: LD_INT 6
2994: PPUSH
2995: LD_INT -5
2997: PUSH
2998: LD_EXP 1
3002: PUSH
3003: LD_EXP 15
3007: PUSH
3008: LD_INT -2
3010: PUSH
3011: LD_INT -3
3013: PUSH
3014: LD_INT -5
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: PUSH
3025: LD_VAR 0 4
3029: ADD
3030: PUSH
3031: LD_INT -6
3033: PUSH
3034: LD_INT -4
3036: PUSH
3037: LD_EXP 2
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: ADD
3047: PPUSH
3048: LD_INT 1
3050: PUSH
3051: LD_INT 0
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 2
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 3
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 4
3080: PUSH
3081: LD_INT 2
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 5
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 2
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: PPUSH
3109: CALL_OW 42
3113: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3114: LD_ADDR_VAR 0 5
3118: PUSH
3119: LD_VAR 0 3
3123: PUSH
3124: LD_EXP 3
3128: PUSH
3129: LD_EXP 4
3133: PUSH
3134: LD_EXP 5
3138: PUSH
3139: LD_EXP 6
3143: PUSH
3144: LD_EXP 7
3148: PUSH
3149: LD_EXP 8
3153: PUSH
3154: LD_EXP 9
3158: PUSH
3159: LD_EXP 10
3163: PUSH
3164: LD_EXP 11
3168: PUSH
3169: LD_EXP 12
3173: PUSH
3174: LD_EXP 13
3178: PUSH
3179: LD_EXP 14
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: DIFF
3198: ST_TO_ADDR
// othersInBase = tmp diff selected ;
3199: LD_ADDR_VAR 0 6
3203: PUSH
3204: LD_VAR 0 4
3208: PUSH
3209: LD_VAR 0 3
3213: DIFF
3214: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_VAR 0 6
3224: PUSH
3225: LD_EXP 3
3229: PUSH
3230: LD_EXP 4
3234: PUSH
3235: LD_EXP 5
3239: PUSH
3240: LD_EXP 6
3244: PUSH
3245: LD_EXP 7
3249: PUSH
3250: LD_EXP 8
3254: PUSH
3255: LD_EXP 9
3259: PUSH
3260: LD_EXP 10
3264: PUSH
3265: LD_EXP 11
3269: PUSH
3270: LD_EXP 12
3274: PUSH
3275: LD_EXP 13
3279: PUSH
3280: LD_EXP 14
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: DIFF
3299: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
3300: LD_VAR 0 5
3304: PPUSH
3305: LD_STRING 13c_others
3307: PPUSH
3308: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
3312: LD_VAR 0 6
3316: PPUSH
3317: LD_STRING 13s_others
3319: PPUSH
3320: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
3324: LD_EXP 1
3328: PPUSH
3329: LD_STRING 13c_JMM
3331: PPUSH
3332: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
3336: LD_EXP 15
3340: PPUSH
3341: LD_STRING 13c_Stevens
3343: PPUSH
3344: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
3348: LD_EXP 3
3352: PPUSH
3353: LD_STRING Lisa
3355: PPUSH
3356: LD_VAR 0 3
3360: PPUSH
3361: CALL 2742 0 3
// SaveCharactersAfterSelect ( Brown , Brown , selected ) ;
3365: LD_EXP 8
3369: PPUSH
3370: LD_STRING Brown
3372: PPUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: CALL 2742 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
3382: LD_EXP 4
3386: PPUSH
3387: LD_STRING Donaldson
3389: PPUSH
3390: LD_VAR 0 3
3394: PPUSH
3395: CALL 2742 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
3399: LD_EXP 5
3403: PPUSH
3404: LD_STRING Bobby
3406: PPUSH
3407: LD_VAR 0 3
3411: PPUSH
3412: CALL 2742 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
3416: LD_EXP 6
3420: PPUSH
3421: LD_STRING Cyrus
3423: PPUSH
3424: LD_VAR 0 3
3428: PPUSH
3429: CALL 2742 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
3433: LD_EXP 7
3437: PPUSH
3438: LD_STRING Denis
3440: PPUSH
3441: LD_VAR 0 3
3445: PPUSH
3446: CALL 2742 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
3450: LD_EXP 9
3454: PPUSH
3455: LD_STRING Gladstone
3457: PPUSH
3458: LD_VAR 0 3
3462: PPUSH
3463: CALL 2742 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
3467: LD_EXP 10
3471: PPUSH
3472: LD_STRING Houten
3474: PPUSH
3475: LD_VAR 0 3
3479: PPUSH
3480: CALL 2742 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
3484: LD_EXP 11
3488: PPUSH
3489: LD_STRING Cornel
3491: PPUSH
3492: LD_VAR 0 3
3496: PPUSH
3497: CALL 2742 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
3501: LD_EXP 12
3505: PPUSH
3506: LD_STRING Gary
3508: PPUSH
3509: LD_VAR 0 3
3513: PPUSH
3514: CALL 2742 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
3518: LD_EXP 13
3522: PPUSH
3523: LD_STRING Frank
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: CALL 2742 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
3535: LD_EXP 14
3539: PPUSH
3540: LD_STRING Kikuchi
3542: PPUSH
3543: LD_VAR 0 3
3547: PPUSH
3548: CALL 2742 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
3552: LD_INT 22
3554: PUSH
3555: LD_INT 1
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 21
3564: PUSH
3565: LD_INT 1
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PPUSH
3576: CALL_OW 69
3580: PPUSH
3581: LD_INT 4
3583: PPUSH
3584: CALL_OW 235
// SetSide ( selected , 1 ) ;
3588: LD_VAR 0 3
3592: PPUSH
3593: LD_INT 1
3595: PPUSH
3596: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
3600: LD_EXP 1
3604: PUSH
3605: LD_EXP 15
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: CALL_OW 235
// end ;
3621: LD_VAR 0 1
3625: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
3626: LD_INT 0
3628: PPUSH
3629: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: CALL_OW 289
3647: PUSH
3648: LD_VAR 0 1
3652: PPUSH
3653: LD_INT 2
3655: PPUSH
3656: CALL_OW 289
3660: PUSH
3661: LD_VAR 0 1
3665: PPUSH
3666: LD_INT 3
3668: PPUSH
3669: CALL_OW 289
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: LIST
3678: ST_TO_ADDR
// end ; end_of_file
3679: LD_VAR 0 2
3683: RET
// on Command ( comandid ) do var i ;
3684: LD_INT 0
3686: PPUSH
// begin if comandid = 65 then
3687: LD_VAR 0 1
3691: PUSH
3692: LD_INT 65
3694: EQUAL
3695: IFFALSE 3736
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: LD_INT 22
3704: PUSH
3705: LD_INT 1
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: PUSH
3720: FOR_IN
3721: IFFALSE 3734
// ComStop ( i ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 141
3732: GO 3720
3734: POP
3735: POP
// end ;
3736: PPOPN 2
3738: END
