// export JMM , Powell ; export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Stevens ; export others12 , others11 , randomsEpsilon ; export yourVehicles , resources ; export mission_prefix_prev ; starting begin yourVehicles = [ ] ;
   0: LD_ADDR_EXP 19
   4: PUSH
   5: EMPTY
   6: ST_TO_ADDR
// resources = [ ] ;
   7: LD_ADDR_EXP 20
  11: PUSH
  12: EMPTY
  13: ST_TO_ADDR
// randomsEpsilon = [ ] ;
  14: LD_ADDR_EXP 18
  18: PUSH
  19: EMPTY
  20: ST_TO_ADDR
// Resetfog ;
  21: CALL_OW 335
// RandomizeAll ;
  25: CALL_OW 11
// InGameOn ;
  29: CALL_OW 8
// mission_prefix_prev = 12_ ;
  33: LD_ADDR_EXP 21
  37: PUSH
  38: LD_STRING 12_
  40: ST_TO_ADDR
// PrepareEpsilonBase ;
  41: CALL 1900 0 0
// PrepareHeroes ;
  45: CALL 741 0 0
// PrepareRandoms ;
  49: CALL 2142 0 0
// CenterNowOnUnits ( JMM ) ;
  53: LD_EXP 1
  57: PPUSH
  58: CALL_OW 87
// DialogueOn ;
  62: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
  66: LD_EXP 1
  70: PPUSH
  71: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
  75: LD_EXP 1
  79: PPUSH
  80: LD_STRING D1-JMM-1
  82: PPUSH
  83: CALL_OW 88
// SayRadio ( Powell , D1-Pow-1 ) ;
  87: LD_EXP 2
  91: PPUSH
  92: LD_STRING D1-Pow-1
  94: PPUSH
  95: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1a ) ;
  99: LD_EXP 2
 103: PPUSH
 104: LD_STRING D1-Pow-1a
 106: PPUSH
 107: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1b ) ;
 111: LD_EXP 2
 115: PPUSH
 116: LD_STRING D1-Pow-1b
 118: PPUSH
 119: CALL_OW 94
// SayRadio ( Powell , D1-Pow-1c ) ;
 123: LD_EXP 2
 127: PPUSH
 128: LD_STRING D1-Pow-1c
 130: PPUSH
 131: CALL_OW 94
// Say ( JMM , D1-JMM-2 ) ;
 135: LD_EXP 1
 139: PPUSH
 140: LD_STRING D1-JMM-2
 142: PPUSH
 143: CALL_OW 88
// SayRadio ( Powell , D1-Pow-2 ) ;
 147: LD_EXP 2
 151: PPUSH
 152: LD_STRING D1-Pow-2
 154: PPUSH
 155: CALL_OW 94
// Say ( JMM , D1-JMM-3 ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_STRING D1-JMM-3
 166: PPUSH
 167: CALL_OW 88
// SayRadio ( Powell , D1-Pow-3 ) ;
 171: LD_EXP 2
 175: PPUSH
 176: LD_STRING D1-Pow-3
 178: PPUSH
 179: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
 183: LD_EXP 1
 187: PPUSH
 188: LD_STRING D1-JMM-4
 190: PPUSH
 191: CALL_OW 88
// SayRadio ( Powell , D1-Pow-4 ) ;
 195: LD_EXP 2
 199: PPUSH
 200: LD_STRING D1-Pow-4
 202: PPUSH
 203: CALL_OW 94
// DialogueOff ;
 207: CALL_OW 7
// SelectAndSaveCharacters ;
 211: CALL 2738 0 0
// InGameOff ;
 215: CALL_OW 9
// Query ( Q1 ) ;
 219: LD_STRING Q1
 221: PPUSH
 222: CALL_OW 97
// SetAreaMapShow ( ExitArea , 1 ) ;
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 424
// end ;
 236: END
// every 0 0$1 trigger FilterUnitsExceptArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_engine , 3 ] , [ f_control , 1 ] ] ) = 8 do var i , cargoType ;
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 22
 242: PUSH
 243: LD_INT 1
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: PUSH
 250: LD_INT 21
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PPUSH
 264: CALL_OW 71
 268: PUSH
 269: LD_INT 0
 271: EQUAL
 272: PUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 2
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 32
 298: PUSH
 299: LD_INT 3
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 33
 308: PUSH
 309: LD_INT 1
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: PPUSH
 322: CALL_OW 70
 326: PUSH
 327: LD_INT 8
 329: EQUAL
 330: AND
 331: IFFALSE 649
 333: GO 335
 335: DISABLE
 336: LD_INT 0
 338: PPUSH
 339: PPUSH
// begin if FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) > 0 then
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 21
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: LD_INT 58
 358: PUSH
 359: EMPTY
 360: LIST
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 70
 374: PUSH
 375: LD_INT 0
 377: GREATER
 378: IFFALSE 635
// begin for i in FilterUnitsInArea ( ExitArea , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) do
 380: LD_ADDR_VAR 0 1
 384: PUSH
 385: LD_INT 1
 387: PPUSH
 388: LD_INT 21
 390: PUSH
 391: LD_INT 2
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 3
 400: PUSH
 401: LD_INT 58
 403: PUSH
 404: EMPTY
 405: LIST
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 70
 419: PUSH
 420: FOR_IN
 421: IFFALSE 621
// begin cargoType = GetCargoType ( i ) ;
 423: LD_ADDR_VAR 0 2
 427: PUSH
 428: LD_VAR 0 1
 432: PPUSH
 433: CALL_OW 288
 437: ST_TO_ADDR
// if GetWeapon ( i ) = us_cargo_bay then
 438: LD_VAR 0 1
 442: PPUSH
 443: CALL_OW 264
 447: PUSH
 448: LD_INT 12
 450: EQUAL
 451: IFFALSE 548
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , cargoType , GetCargo ( i , cargoType ) ] ] ;
 453: LD_ADDR_EXP 19
 457: PUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_VAR 0 1
 467: PPUSH
 468: CALL_OW 248
 472: PUSH
 473: LD_VAR 0 1
 477: PPUSH
 478: CALL_OW 265
 482: PUSH
 483: LD_VAR 0 1
 487: PPUSH
 488: CALL_OW 262
 492: PUSH
 493: LD_VAR 0 1
 497: PPUSH
 498: CALL_OW 263
 502: PUSH
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 264
 512: PUSH
 513: LD_VAR 0 2
 517: PUSH
 518: LD_VAR 0 1
 522: PPUSH
 523: LD_VAR 0 2
 527: PPUSH
 528: CALL_OW 289
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: EMPTY
 543: LIST
 544: ADD
 545: ST_TO_ADDR
// end else
 546: GO 619
// begin yourVehicles = yourVehicles ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ] ;
 548: LD_ADDR_EXP 19
 552: PUSH
 553: LD_EXP 19
 557: PUSH
 558: LD_VAR 0 1
 562: PPUSH
 563: CALL_OW 248
 567: PUSH
 568: LD_VAR 0 1
 572: PPUSH
 573: CALL_OW 265
 577: PUSH
 578: LD_VAR 0 1
 582: PPUSH
 583: CALL_OW 262
 587: PUSH
 588: LD_VAR 0 1
 592: PPUSH
 593: CALL_OW 263
 597: PUSH
 598: LD_VAR 0 1
 602: PPUSH
 603: CALL_OW 264
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: PUSH
 615: EMPTY
 616: LIST
 617: ADD
 618: ST_TO_ADDR
// end ; end ;
 619: GO 420
 621: POP
 622: POP
// SaveVariable ( yourVehicles , 13_VehiclesIn13_1 ) ;
 623: LD_EXP 19
 627: PPUSH
 628: LD_STRING 13_VehiclesIn13_1
 630: PPUSH
 631: CALL_OW 39
// end ; SaveCargos ;
 635: CALL 652 0 0
// ChangeMap ( 13 , %_cont ) ;
 639: LD_INT 13
 641: PPUSH
 642: LD_STRING %_cont
 644: PPUSH
 645: CALL_OW 340
// end ;
 649: PPOPN 2
 651: END
// export function SaveCargos ; var i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
// for i in FilterUnitsInArea ( ExitArea , [ [ f_side , 1 ] , [ f_weapon , us_cargo_bay ] ] ) do
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 1
 663: PPUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 34
 676: PUSH
 677: LD_INT 12
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PPUSH
 688: CALL_OW 70
 692: PUSH
 693: FOR_IN
 694: IFFALSE 722
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
 696: LD_ADDR_EXP 20
 700: PUSH
 701: LD_EXP 20
 705: PUSH
 706: LD_VAR 0 2
 710: PPUSH
 711: CALL 3553 0 1
 715: PUSH
 716: EMPTY
 717: LIST
 718: ADD
 719: ST_TO_ADDR
 720: GO 693
 722: POP
 723: POP
// SaveVariable ( resources , 13_ResourcesInCargo13_1 ) ;
 724: LD_EXP 20
 728: PPUSH
 729: LD_STRING 13_ResourcesInCargo13_1
 731: PPUSH
 732: CALL_OW 39
// end ; end_of_file
 736: LD_VAR 0 1
 740: RET
// export function PrepareHeroes ; var i , others , tmp ; begin
 741: LD_INT 0
 743: PPUSH
 744: PPUSH
 745: PPUSH
 746: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
 747: LD_ADDR_VAR 0 4
 751: PUSH
 752: LD_INT 22
 754: PUSH
 755: LD_INT 1
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: LD_INT 30
 767: PUSH
 768: LD_INT 0
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: LD_INT 30
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PPUSH
 794: CALL_OW 69
 798: ST_TO_ADDR
// uc_side = 1 ;
 799: LD_ADDR_OWVAR 20
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true ) ;
 807: LD_ADDR_EXP 1
 811: PUSH
 812: LD_STRING JMM
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 2495 0 2
 822: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , true ) ;
 823: LD_ADDR_EXP 3
 827: PUSH
 828: LD_STRING Lisa
 830: PPUSH
 831: LD_INT 1
 833: PPUSH
 834: CALL 2495 0 2
 838: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , true ) ;
 839: LD_ADDR_EXP 4
 843: PUSH
 844: LD_STRING Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 2495 0 2
 854: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , true ) ;
 855: LD_ADDR_EXP 5
 859: PUSH
 860: LD_STRING Bobby
 862: PPUSH
 863: LD_INT 1
 865: PPUSH
 866: CALL 2495 0 2
 870: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , true ) ;
 871: LD_ADDR_EXP 6
 875: PUSH
 876: LD_STRING Cyrus
 878: PPUSH
 879: LD_INT 1
 881: PPUSH
 882: CALL 2495 0 2
 886: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , true ) ;
 887: LD_ADDR_EXP 7
 891: PUSH
 892: LD_STRING Denis
 894: PPUSH
 895: LD_INT 1
 897: PPUSH
 898: CALL 2495 0 2
 902: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , true ) ;
 903: LD_ADDR_EXP 8
 907: PUSH
 908: LD_STRING Brown
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL 2495 0 2
 918: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , true ) ;
 919: LD_ADDR_EXP 9
 923: PUSH
 924: LD_STRING Gladstone
 926: PPUSH
 927: LD_INT 1
 929: PPUSH
 930: CALL 2495 0 2
 934: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , true ) ;
 935: LD_ADDR_EXP 10
 939: PUSH
 940: LD_STRING Houten
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: CALL 2495 0 2
 950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , true ) ;
 951: LD_ADDR_EXP 11
 955: PUSH
 956: LD_STRING Cornell
 958: PPUSH
 959: LD_INT 1
 961: PPUSH
 962: CALL 2495 0 2
 966: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , true ) ;
 967: LD_ADDR_EXP 12
 971: PUSH
 972: LD_STRING Gary
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL 2495 0 2
 982: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true ) ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_STRING Frank
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: CALL 2495 0 2
 998: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , true ) ;
 999: LD_ADDR_EXP 14
1003: PUSH
1004: LD_STRING Kikuchi
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL 2495 0 2
1014: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
1015: LD_ADDR_EXP 15
1019: PUSH
1020: LD_STRING Stevens
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL 2495 0 2
1030: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1031: LD_ADDR_EXP 2
1035: PUSH
1036: LD_STRING Powell
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL 2495 0 2
1046: ST_TO_ADDR
// PlaceUnitXYR ( JMM , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1047: LD_EXP 1
1051: PPUSH
1052: LD_VAR 0 4
1056: PUSH
1057: LD_INT 1
1059: ARRAY
1060: PPUSH
1061: CALL_OW 250
1065: PPUSH
1066: LD_VAR 0 4
1070: PUSH
1071: LD_INT 1
1073: ARRAY
1074: PPUSH
1075: CALL_OW 251
1079: PPUSH
1080: LD_INT 4
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: CALL_OW 50
// PlaceUnitXYR ( Stevens , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 4 , false ) ;
1090: LD_EXP 15
1094: PPUSH
1095: LD_VAR 0 4
1099: PUSH
1100: LD_INT 1
1102: ARRAY
1103: PPUSH
1104: CALL_OW 250
1108: PPUSH
1109: LD_VAR 0 4
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PPUSH
1118: CALL_OW 251
1122: PPUSH
1123: LD_INT 4
1125: PPUSH
1126: LD_INT 0
1128: PPUSH
1129: CALL_OW 50
// PlaceUnitXYR ( Lisa , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1133: LD_EXP 3
1137: PPUSH
1138: LD_VAR 0 4
1142: PUSH
1143: LD_INT 1
1145: ARRAY
1146: PPUSH
1147: CALL_OW 250
1151: PPUSH
1152: LD_VAR 0 4
1156: PUSH
1157: LD_INT 1
1159: ARRAY
1160: PPUSH
1161: CALL_OW 251
1165: PPUSH
1166: LD_INT 35
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 50
// PlaceUnitXYR ( Donaldson , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1176: LD_EXP 4
1180: PPUSH
1181: LD_VAR 0 4
1185: PUSH
1186: LD_INT 1
1188: ARRAY
1189: PPUSH
1190: CALL_OW 250
1194: PPUSH
1195: LD_VAR 0 4
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: CALL_OW 251
1208: PPUSH
1209: LD_INT 35
1211: PPUSH
1212: LD_INT 0
1214: PPUSH
1215: CALL_OW 50
// PlaceUnitXYR ( Bobby , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1219: LD_EXP 5
1223: PPUSH
1224: LD_VAR 0 4
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 250
1237: PPUSH
1238: LD_VAR 0 4
1242: PUSH
1243: LD_INT 1
1245: ARRAY
1246: PPUSH
1247: CALL_OW 251
1251: PPUSH
1252: LD_INT 35
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 50
// PlaceUnitXYR ( Cyrus , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1262: LD_EXP 6
1266: PPUSH
1267: LD_VAR 0 4
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 250
1280: PPUSH
1281: LD_VAR 0 4
1285: PUSH
1286: LD_INT 1
1288: ARRAY
1289: PPUSH
1290: CALL_OW 251
1294: PPUSH
1295: LD_INT 35
1297: PPUSH
1298: LD_INT 0
1300: PPUSH
1301: CALL_OW 50
// PlaceUnitXYR ( Denis , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1305: LD_EXP 7
1309: PPUSH
1310: LD_VAR 0 4
1314: PUSH
1315: LD_INT 1
1317: ARRAY
1318: PPUSH
1319: CALL_OW 250
1323: PPUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 1
1331: ARRAY
1332: PPUSH
1333: CALL_OW 251
1337: PPUSH
1338: LD_INT 35
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 50
// PlaceUnitXYR ( Brown , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1348: LD_EXP 8
1352: PPUSH
1353: LD_VAR 0 4
1357: PUSH
1358: LD_INT 1
1360: ARRAY
1361: PPUSH
1362: CALL_OW 250
1366: PPUSH
1367: LD_VAR 0 4
1371: PUSH
1372: LD_INT 1
1374: ARRAY
1375: PPUSH
1376: CALL_OW 251
1380: PPUSH
1381: LD_INT 35
1383: PPUSH
1384: LD_INT 0
1386: PPUSH
1387: CALL_OW 50
// PlaceUnitXYR ( Gladstone , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1391: LD_EXP 9
1395: PPUSH
1396: LD_VAR 0 4
1400: PUSH
1401: LD_INT 1
1403: ARRAY
1404: PPUSH
1405: CALL_OW 250
1409: PPUSH
1410: LD_VAR 0 4
1414: PUSH
1415: LD_INT 1
1417: ARRAY
1418: PPUSH
1419: CALL_OW 251
1423: PPUSH
1424: LD_INT 35
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 50
// PlaceUnitXYR ( Houten , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1434: LD_EXP 10
1438: PPUSH
1439: LD_VAR 0 4
1443: PUSH
1444: LD_INT 1
1446: ARRAY
1447: PPUSH
1448: CALL_OW 250
1452: PPUSH
1453: LD_VAR 0 4
1457: PUSH
1458: LD_INT 1
1460: ARRAY
1461: PPUSH
1462: CALL_OW 251
1466: PPUSH
1467: LD_INT 35
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 50
// PlaceUnitXYR ( Cornel , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1477: LD_EXP 11
1481: PPUSH
1482: LD_VAR 0 4
1486: PUSH
1487: LD_INT 1
1489: ARRAY
1490: PPUSH
1491: CALL_OW 250
1495: PPUSH
1496: LD_VAR 0 4
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 251
1509: PPUSH
1510: LD_INT 35
1512: PPUSH
1513: LD_INT 0
1515: PPUSH
1516: CALL_OW 50
// PlaceUnitXYR ( Gary , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1520: LD_EXP 12
1524: PPUSH
1525: LD_VAR 0 4
1529: PUSH
1530: LD_INT 1
1532: ARRAY
1533: PPUSH
1534: CALL_OW 250
1538: PPUSH
1539: LD_VAR 0 4
1543: PUSH
1544: LD_INT 1
1546: ARRAY
1547: PPUSH
1548: CALL_OW 251
1552: PPUSH
1553: LD_INT 35
1555: PPUSH
1556: LD_INT 0
1558: PPUSH
1559: CALL_OW 50
// PlaceUnitXYR ( Frank , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1563: LD_EXP 13
1567: PPUSH
1568: LD_VAR 0 4
1572: PUSH
1573: LD_INT 1
1575: ARRAY
1576: PPUSH
1577: CALL_OW 250
1581: PPUSH
1582: LD_VAR 0 4
1586: PUSH
1587: LD_INT 1
1589: ARRAY
1590: PPUSH
1591: CALL_OW 251
1595: PPUSH
1596: LD_INT 35
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: CALL_OW 50
// PlaceUnitXYR ( Kikuchi , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1606: LD_EXP 14
1610: PPUSH
1611: LD_VAR 0 4
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: CALL_OW 250
1624: PPUSH
1625: LD_VAR 0 4
1629: PUSH
1630: LD_INT 1
1632: ARRAY
1633: PPUSH
1634: CALL_OW 251
1638: PPUSH
1639: LD_INT 35
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: CALL_OW 50
// SetBName ( tmp [ 1 ] , epsilon ) ;
1649: LD_VAR 0 4
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_STRING epsilon
1660: PPUSH
1661: CALL_OW 500
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 1 , 3000 ) ;
1665: LD_VAR 0 4
1669: PUSH
1670: LD_INT 1
1672: ARRAY
1673: PPUSH
1674: CALL_OW 274
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_INT 3000
1684: PPUSH
1685: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 2 , 500 ) ;
1689: LD_VAR 0 4
1693: PUSH
1694: LD_INT 1
1696: ARRAY
1697: PPUSH
1698: CALL_OW 274
1702: PPUSH
1703: LD_INT 2
1705: PPUSH
1706: LD_INT 500
1708: PPUSH
1709: CALL_OW 277
// SetResourceType ( GetBase ( tmp [ 1 ] ) , 3 , 200 ) ;
1713: LD_VAR 0 4
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: CALL_OW 274
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: LD_INT 200
1732: PPUSH
1733: CALL_OW 277
// SetClass ( JMM , 1 ) ;
1737: LD_EXP 1
1741: PPUSH
1742: LD_INT 1
1744: PPUSH
1745: CALL_OW 336
// others12 = CreateCharacterSet ( 12_other_survivors ) ;
1749: LD_ADDR_EXP 16
1753: PUSH
1754: LD_STRING 12_other_survivors
1756: PPUSH
1757: CALL_OW 31
1761: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11_others ) ;
1762: LD_ADDR_EXP 17
1766: PUSH
1767: LD_STRING 11_others
1769: PPUSH
1770: CALL_OW 31
1774: ST_TO_ADDR
// for i in others11 do
1775: LD_ADDR_VAR 0 2
1779: PUSH
1780: LD_EXP 17
1784: PUSH
1785: FOR_IN
1786: IFFALSE 1833
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1788: LD_VAR 0 2
1792: PPUSH
1793: LD_VAR 0 4
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: PPUSH
1802: CALL_OW 250
1806: PPUSH
1807: LD_VAR 0 4
1811: PUSH
1812: LD_INT 1
1814: ARRAY
1815: PPUSH
1816: CALL_OW 251
1820: PPUSH
1821: LD_INT 35
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 50
1831: GO 1785
1833: POP
1834: POP
// for i in others12 do
1835: LD_ADDR_VAR 0 2
1839: PUSH
1840: LD_EXP 16
1844: PUSH
1845: FOR_IN
1846: IFFALSE 1893
// PlaceUnitXYR ( i , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 35 , false ) ;
1848: LD_VAR 0 2
1852: PPUSH
1853: LD_VAR 0 4
1857: PUSH
1858: LD_INT 1
1860: ARRAY
1861: PPUSH
1862: CALL_OW 250
1866: PPUSH
1867: LD_VAR 0 4
1871: PUSH
1872: LD_INT 1
1874: ARRAY
1875: PPUSH
1876: CALL_OW 251
1880: PPUSH
1881: LD_INT 35
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 50
1891: GO 1845
1893: POP
1894: POP
// end ;
1895: LD_VAR 0 1
1899: RET
// export function PrepareEpsilonBase ; var blist , i , b , un ; begin
1900: LD_INT 0
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
// SetResourceVisibility ( 113 , 50 , 1 ) ;
1907: LD_INT 113
1909: PPUSH
1910: LD_INT 50
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: CALL_OW 441
// SetResourceVisibility ( 104 , 24 , 1 ) ;
1920: LD_INT 104
1922: PPUSH
1923: LD_INT 24
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 441
// blist := LoadVariable ( 10_EpsilonBase , [ ] ) ;
1933: LD_ADDR_VAR 0 2
1937: PUSH
1938: LD_STRING 10_EpsilonBase
1940: PPUSH
1941: EMPTY
1942: PPUSH
1943: CALL_OW 30
1947: ST_TO_ADDR
// if not blist then
1948: LD_VAR 0 2
1952: NOT
1953: IFFALSE 1957
// exit ;
1955: GO 2137
// uc_side := 1 ;
1957: LD_ADDR_OWVAR 20
1961: PUSH
1962: LD_INT 1
1964: ST_TO_ADDR
// uc_nation := 1 ;
1965: LD_ADDR_OWVAR 21
1969: PUSH
1970: LD_INT 1
1972: ST_TO_ADDR
// for i in blist do
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_VAR 0 2
1982: PUSH
1983: FOR_IN
1984: IFFALSE 2135
// begin bc_type := i [ 1 ] ;
1986: LD_ADDR_OWVAR 42
1990: PUSH
1991: LD_VAR 0 3
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2000: LD_ADDR_OWVAR 43
2004: PUSH
2005: LD_VAR 0 3
2009: PUSH
2010: LD_INT 5
2012: ARRAY
2013: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 1
2021: ARRAY
2022: PUSH
2023: LD_INT 7
2025: PUSH
2026: LD_INT 8
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: IN
2033: IFFALSE 2063
// begin bc_kind1 := i [ 7 ] ;
2035: LD_ADDR_OWVAR 44
2039: PUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 7
2047: ARRAY
2048: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2049: LD_ADDR_OWVAR 45
2053: PUSH
2054: LD_VAR 0 3
2058: PUSH
2059: LD_INT 8
2061: ARRAY
2062: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2063: LD_ADDR_VAR 0 4
2067: PUSH
2068: LD_VAR 0 3
2072: PUSH
2073: LD_INT 2
2075: ARRAY
2076: PPUSH
2077: LD_VAR 0 3
2081: PUSH
2082: LD_INT 3
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 3
2090: PUSH
2091: LD_INT 4
2093: ARRAY
2094: PPUSH
2095: CALL_OW 47
2099: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2100: LD_VAR 0 4
2104: PPUSH
2105: CALL_OW 266
2109: PUSH
2110: LD_INT 32
2112: EQUAL
2113: IFFALSE 2133
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2115: LD_VAR 0 4
2119: PPUSH
2120: LD_VAR 0 3
2124: PUSH
2125: LD_INT 7
2127: ARRAY
2128: PPUSH
2129: CALL_OW 431
// end ; end ;
2133: GO 1983
2135: POP
2136: POP
// end ;
2137: LD_VAR 0 1
2141: RET
// export function PrepareRandoms ; var i , un , tmp ; begin
2142: LD_INT 0
2144: PPUSH
2145: PPUSH
2146: PPUSH
2147: PPUSH
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Stevens ] < 6 then
2148: LD_INT 22
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 21
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL_OW 69
2176: PUSH
2177: LD_EXP 1
2181: PUSH
2182: LD_EXP 3
2186: PUSH
2187: LD_EXP 4
2191: PUSH
2192: LD_EXP 5
2196: PUSH
2197: LD_EXP 6
2201: PUSH
2202: LD_EXP 7
2206: PUSH
2207: LD_EXP 8
2211: PUSH
2212: LD_EXP 9
2216: PUSH
2217: LD_EXP 10
2221: PUSH
2222: LD_EXP 11
2226: PUSH
2227: LD_EXP 12
2231: PUSH
2232: LD_EXP 13
2236: PUSH
2237: LD_EXP 14
2241: PUSH
2242: LD_EXP 15
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 6
2265: LESS
2266: DIFF
2267: IFFALSE 2490
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , 1 ] ] ] ) ;
2269: LD_ADDR_VAR 0 4
2273: PUSH
2274: LD_INT 22
2276: PUSH
2277: LD_INT 1
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 2
2286: PUSH
2287: LD_INT 30
2289: PUSH
2290: LD_INT 0
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 30
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PPUSH
2316: CALL_OW 69
2320: ST_TO_ADDR
// uc_side = 1 ;
2321: LD_ADDR_OWVAR 20
2325: PUSH
2326: LD_INT 1
2328: ST_TO_ADDR
// uc_nation = 1 ;
2329: LD_ADDR_OWVAR 21
2333: PUSH
2334: LD_INT 1
2336: ST_TO_ADDR
// for i = 1 to 6 do
2337: LD_ADDR_VAR 0 2
2341: PUSH
2342: DOUBLE
2343: LD_INT 1
2345: DEC
2346: ST_TO_ADDR
2347: LD_INT 6
2349: PUSH
2350: FOR_TO
2351: IFFALSE 2488
// begin hc_gallery =  ;
2353: LD_ADDR_OWVAR 33
2357: PUSH
2358: LD_STRING 
2360: ST_TO_ADDR
// hc_name =  ;
2361: LD_ADDR_OWVAR 26
2365: PUSH
2366: LD_STRING 
2368: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 5 , 8 ) ) ;
2369: LD_INT 0
2371: PPUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 2
2377: PUSH
2378: LD_INT 3
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 1
2392: PPUSH
2393: LD_INT 4
2395: PPUSH
2396: CALL_OW 12
2400: ARRAY
2401: PPUSH
2402: LD_INT 5
2404: PPUSH
2405: LD_INT 8
2407: PPUSH
2408: CALL_OW 12
2412: PPUSH
2413: CALL_OW 380
// un = CreateHuman ;
2417: LD_ADDR_VAR 0 3
2421: PUSH
2422: CALL_OW 44
2426: ST_TO_ADDR
// randomsEpsilon = randomsEpsilon ^ un ;
2427: LD_ADDR_EXP 18
2431: PUSH
2432: LD_EXP 18
2436: PUSH
2437: LD_VAR 0 3
2441: ADD
2442: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 15 , false ) ;
2443: LD_VAR 0 3
2447: PPUSH
2448: LD_VAR 0 4
2452: PUSH
2453: LD_INT 1
2455: ARRAY
2456: PPUSH
2457: CALL_OW 250
2461: PPUSH
2462: LD_VAR 0 4
2466: PUSH
2467: LD_INT 1
2469: ARRAY
2470: PPUSH
2471: CALL_OW 251
2475: PPUSH
2476: LD_INT 15
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: CALL_OW 50
// end ;
2486: GO 2350
2488: POP
2489: POP
// end ; end ; end_of_file
2490: LD_VAR 0 1
2494: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2495: LD_INT 0
2497: PPUSH
2498: PPUSH
// if exist_mode then
2499: LD_VAR 0 2
2503: IFFALSE 2650
// begin if TestCharacters ( mission_prefix_prev & ident ) = true then
2505: LD_EXP 21
2509: PUSH
2510: LD_VAR 0 1
2514: STR
2515: PPUSH
2516: CALL_OW 28
2520: PUSH
2521: LD_INT 1
2523: EQUAL
2524: IFFALSE 2549
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
2526: LD_ADDR_VAR 0 4
2530: PUSH
2531: LD_EXP 21
2535: PUSH
2536: LD_VAR 0 1
2540: STR
2541: PPUSH
2542: CALL_OW 34
2546: ST_TO_ADDR
// end else
2547: GO 2648
// begin if TestCharacters ( 11_ & ident ) = true then
2549: LD_STRING 11_
2551: PUSH
2552: LD_VAR 0 1
2556: STR
2557: PPUSH
2558: CALL_OW 28
2562: PUSH
2563: LD_INT 1
2565: EQUAL
2566: IFFALSE 2589
// begin unit := CreateCharacter ( 11_ & ident ) ;
2568: LD_ADDR_VAR 0 4
2572: PUSH
2573: LD_STRING 11_
2575: PUSH
2576: LD_VAR 0 1
2580: STR
2581: PPUSH
2582: CALL_OW 34
2586: ST_TO_ADDR
// end else
2587: GO 2648
// begin if TestCharacters ( 10c_ & ident ) = true then
2589: LD_STRING 10c_
2591: PUSH
2592: LD_VAR 0 1
2596: STR
2597: PPUSH
2598: CALL_OW 28
2602: PUSH
2603: LD_INT 1
2605: EQUAL
2606: IFFALSE 2629
// unit := CreateCharacter ( 10c_ & ident ) else
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: LD_STRING 10c_
2615: PUSH
2616: LD_VAR 0 1
2620: STR
2621: PPUSH
2622: CALL_OW 34
2626: ST_TO_ADDR
2627: GO 2648
// unit := CreateCharacter ( 10_ & ident ) ;
2629: LD_ADDR_VAR 0 4
2633: PUSH
2634: LD_STRING 10_
2636: PUSH
2637: LD_VAR 0 1
2641: STR
2642: PPUSH
2643: CALL_OW 34
2647: ST_TO_ADDR
// end ; end ; end else
2648: GO 2665
// begin unit := NewCharacter ( ident ) ;
2650: LD_ADDR_VAR 0 4
2654: PUSH
2655: LD_VAR 0 1
2659: PPUSH
2660: CALL_OW 25
2664: ST_TO_ADDR
// end ; result := unit ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: LD_VAR 0 4
2674: ST_TO_ADDR
// end ;
2675: LD_VAR 0 3
2679: RET
// export function SaveCharactersAfterSelect ( unit , unitString , selectedTab ) ; begin
2680: LD_INT 0
2682: PPUSH
// if unit in selectedTab then
2683: LD_VAR 0 1
2687: PUSH
2688: LD_VAR 0 3
2692: IN
2693: IFFALSE 2715
// SaveCharacters ( unit , 13c_ & unitString ) else
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_STRING 13c_
2702: PUSH
2703: LD_VAR 0 2
2707: STR
2708: PPUSH
2709: CALL_OW 38
2713: GO 2733
// SaveCharacters ( unit , 13s_ & unitString ) ;
2715: LD_VAR 0 1
2719: PPUSH
2720: LD_STRING 13s_
2722: PUSH
2723: LD_VAR 0 2
2727: STR
2728: PPUSH
2729: CALL_OW 38
// end ;
2733: LD_VAR 0 4
2737: RET
// export function SelectAndSaveCharacters ; var i , selected , tmp , othersSelect , othersInBase ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// tmp = [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
2746: LD_ADDR_VAR 0 4
2750: PUSH
2751: LD_EXP 3
2755: PUSH
2756: LD_EXP 4
2760: PUSH
2761: LD_EXP 5
2765: PUSH
2766: LD_EXP 6
2770: PUSH
2771: LD_EXP 7
2775: PUSH
2776: LD_EXP 8
2780: PUSH
2781: LD_EXP 9
2785: PUSH
2786: LD_EXP 10
2790: PUSH
2791: LD_EXP 11
2795: PUSH
2796: LD_EXP 12
2800: PUSH
2801: LD_EXP 13
2805: PUSH
2806: LD_EXP 14
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: ST_TO_ADDR
// tmp = tmp ^ others11 ;
2825: LD_ADDR_VAR 0 4
2829: PUSH
2830: LD_VAR 0 4
2834: PUSH
2835: LD_EXP 17
2839: ADD
2840: ST_TO_ADDR
// tmp = tmp ^ others12 ;
2841: LD_ADDR_VAR 0 4
2845: PUSH
2846: LD_VAR 0 4
2850: PUSH
2851: LD_EXP 16
2855: ADD
2856: ST_TO_ADDR
// tmp = tmp ^ randomsEpsilon ;
2857: LD_ADDR_VAR 0 4
2861: PUSH
2862: LD_VAR 0 4
2866: PUSH
2867: LD_EXP 18
2871: ADD
2872: ST_TO_ADDR
// for i in tmp do
2873: LD_ADDR_VAR 0 2
2877: PUSH
2878: LD_VAR 0 4
2882: PUSH
2883: FOR_IN
2884: IFFALSE 2923
// if GetClass ( i ) = 8 then
2886: LD_VAR 0 2
2890: PPUSH
2891: CALL_OW 257
2895: PUSH
2896: LD_INT 8
2898: EQUAL
2899: IFFALSE 2921
// SetClass ( i , rand ( 1 , 4 ) ) ;
2901: LD_VAR 0 2
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 4
2911: PPUSH
2912: CALL_OW 12
2916: PPUSH
2917: CALL_OW 336
2921: GO 2883
2923: POP
2924: POP
// selected := CharacterSelection ( 1 , 6 , 6 , [ sel_change_class , JMM , Stevens , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 0 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 ] , [ class_scientistic , 2 ] , [ class_sniper , 0 , 2 ] ] ) ;
2925: LD_ADDR_VAR 0 3
2929: PUSH
2930: LD_STRING 1
2932: PPUSH
2933: LD_INT 6
2935: PPUSH
2936: LD_INT 6
2938: PPUSH
2939: LD_INT -5
2941: PUSH
2942: LD_EXP 1
2946: PUSH
2947: LD_EXP 15
2951: PUSH
2952: LD_INT -2
2954: PUSH
2955: LD_INT -3
2957: PUSH
2958: LD_INT -5
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_VAR 0 4
2973: ADD
2974: PUSH
2975: LD_INT -6
2977: PUSH
2978: LD_INT -4
2980: PUSH
2981: LD_EXP 2
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: ADD
2991: PPUSH
2992: LD_INT 1
2994: PUSH
2995: LD_INT 0
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 2
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: LD_INT 0
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 4
3024: PUSH
3025: LD_INT 2
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 5
3034: PUSH
3035: LD_INT 0
3037: PUSH
3038: LD_INT 2
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 42
3057: ST_TO_ADDR
// othersSelect := selected diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3058: LD_ADDR_VAR 0 5
3062: PUSH
3063: LD_VAR 0 3
3067: PUSH
3068: LD_EXP 3
3072: PUSH
3073: LD_EXP 4
3077: PUSH
3078: LD_EXP 5
3082: PUSH
3083: LD_EXP 6
3087: PUSH
3088: LD_EXP 7
3092: PUSH
3093: LD_EXP 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_EXP 10
3107: PUSH
3108: LD_EXP 11
3112: PUSH
3113: LD_EXP 12
3117: PUSH
3118: LD_EXP 13
3122: PUSH
3123: LD_EXP 14
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: DIFF
3142: ST_TO_ADDR
// othersInBase = tmp diff selected ;
3143: LD_ADDR_VAR 0 6
3147: PUSH
3148: LD_VAR 0 4
3152: PUSH
3153: LD_VAR 0 3
3157: DIFF
3158: ST_TO_ADDR
// othersInBase = othersInBase diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
3159: LD_ADDR_VAR 0 6
3163: PUSH
3164: LD_VAR 0 6
3168: PUSH
3169: LD_EXP 3
3173: PUSH
3174: LD_EXP 4
3178: PUSH
3179: LD_EXP 5
3183: PUSH
3184: LD_EXP 6
3188: PUSH
3189: LD_EXP 7
3193: PUSH
3194: LD_EXP 8
3198: PUSH
3199: LD_EXP 9
3203: PUSH
3204: LD_EXP 10
3208: PUSH
3209: LD_EXP 11
3213: PUSH
3214: LD_EXP 12
3218: PUSH
3219: LD_EXP 13
3223: PUSH
3224: LD_EXP 14
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: DIFF
3243: ST_TO_ADDR
// SaveCharacters ( othersSelect , 13c_others ) ;
3244: LD_VAR 0 5
3248: PPUSH
3249: LD_STRING 13c_others
3251: PPUSH
3252: CALL_OW 38
// SaveCharacters ( othersInBase , 13s_others ) ;
3256: LD_VAR 0 6
3260: PPUSH
3261: LD_STRING 13s_others
3263: PPUSH
3264: CALL_OW 38
// SaveCharacters ( JMM , 13c_JMM ) ;
3268: LD_EXP 1
3272: PPUSH
3273: LD_STRING 13c_JMM
3275: PPUSH
3276: CALL_OW 38
// SaveCharacters ( Stevens , 13c_Stevens ) ;
3280: LD_EXP 15
3284: PPUSH
3285: LD_STRING 13c_Stevens
3287: PPUSH
3288: CALL_OW 38
// SaveCharactersAfterSelect ( Lisa , Lisa , selected ) ;
3292: LD_EXP 3
3296: PPUSH
3297: LD_STRING Lisa
3299: PPUSH
3300: LD_VAR 0 3
3304: PPUSH
3305: CALL 2680 0 3
// SaveCharactersAfterSelect ( Donaldson , Donaldson , selected ) ;
3309: LD_EXP 4
3313: PPUSH
3314: LD_STRING Donaldson
3316: PPUSH
3317: LD_VAR 0 3
3321: PPUSH
3322: CALL 2680 0 3
// SaveCharactersAfterSelect ( Bobby , Bobby , selected ) ;
3326: LD_EXP 5
3330: PPUSH
3331: LD_STRING Bobby
3333: PPUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: CALL 2680 0 3
// SaveCharactersAfterSelect ( Cyrus , Cyrus , selected ) ;
3343: LD_EXP 6
3347: PPUSH
3348: LD_STRING Cyrus
3350: PPUSH
3351: LD_VAR 0 3
3355: PPUSH
3356: CALL 2680 0 3
// SaveCharactersAfterSelect ( Denis , Denis , selected ) ;
3360: LD_EXP 7
3364: PPUSH
3365: LD_STRING Denis
3367: PPUSH
3368: LD_VAR 0 3
3372: PPUSH
3373: CALL 2680 0 3
// SaveCharactersAfterSelect ( Gladstone , Gladstone , selected ) ;
3377: LD_EXP 9
3381: PPUSH
3382: LD_STRING Gladstone
3384: PPUSH
3385: LD_VAR 0 3
3389: PPUSH
3390: CALL 2680 0 3
// SaveCharactersAfterSelect ( Houten , Houten , selected ) ;
3394: LD_EXP 10
3398: PPUSH
3399: LD_STRING Houten
3401: PPUSH
3402: LD_VAR 0 3
3406: PPUSH
3407: CALL 2680 0 3
// SaveCharactersAfterSelect ( Cornel , Cornel , selected ) ;
3411: LD_EXP 11
3415: PPUSH
3416: LD_STRING Cornel
3418: PPUSH
3419: LD_VAR 0 3
3423: PPUSH
3424: CALL 2680 0 3
// SaveCharactersAfterSelect ( Gary , Gary , selected ) ;
3428: LD_EXP 12
3432: PPUSH
3433: LD_STRING Gary
3435: PPUSH
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL 2680 0 3
// SaveCharactersAfterSelect ( Frank , Frank , selected ) ;
3445: LD_EXP 13
3449: PPUSH
3450: LD_STRING Frank
3452: PPUSH
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL 2680 0 3
// SaveCharactersAfterSelect ( Kikuchi , Kikuchi , selected ) ;
3462: LD_EXP 14
3466: PPUSH
3467: LD_STRING Kikuchi
3469: PPUSH
3470: LD_VAR 0 3
3474: PPUSH
3475: CALL 2680 0 3
// SetSide ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 4 ) ;
3479: LD_INT 22
3481: PUSH
3482: LD_INT 1
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 21
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 69
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 235
// SetSide ( selected , 1 ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: LD_INT 1
3522: PPUSH
3523: CALL_OW 235
// SetSide ( [ JMM , Stevens ] , 1 ) ;
3527: LD_EXP 1
3531: PUSH
3532: LD_EXP 15
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: CALL_OW 235
// end ;
3548: LD_VAR 0 1
3552: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: LD_VAR 0 1
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: CALL_OW 289
3574: PUSH
3575: LD_VAR 0 1
3579: PPUSH
3580: LD_INT 2
3582: PPUSH
3583: CALL_OW 289
3587: PUSH
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 3
3595: PPUSH
3596: CALL_OW 289
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: LIST
3605: ST_TO_ADDR
// end ; end_of_file
3606: LD_VAR 0 2
3610: RET
// on Command ( comandid ) do var i ;
3611: LD_INT 0
3613: PPUSH
// begin if comandid = 65 then
3614: LD_VAR 0 1
3618: PUSH
3619: LD_INT 65
3621: EQUAL
3622: IFFALSE 3663
// for i in FilterAllUnits ( [ [ f_side , 1 ] ] ) do
3624: LD_ADDR_VAR 0 2
3628: PUSH
3629: LD_INT 22
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: PPUSH
3642: CALL_OW 69
3646: PUSH
3647: FOR_IN
3648: IFFALSE 3661
// ComStop ( i ) ;
3650: LD_VAR 0 2
3654: PPUSH
3655: CALL_OW 141
3659: GO 3647
3661: POP
3662: POP
// end ;
3663: PPOPN 2
3665: END
