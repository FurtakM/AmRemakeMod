Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
begin
   unit := CreateCharacter(mission_prefix_prev&ident);
  end else
  begin
   unit := NewCharacter(ident);
  end; 

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;
  
end;

Export function EnchancedSaveCharacters(charactersList, ident);
var i;
begin

    for i in charactersList do
    begin
         if IsOk(i) then SaveCharacters(i, ident);
    end;
end;


Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

Export Function PrepareSolBun(skill, b);
var un, dir;
begin
uc_side := GetSide(b);
uc_nation := GetNation(b);

PrepareHuman(false, 1, skill);

dir := GetDir(b) - 3;

if dir < 0 then
   dir := 6 + dir;

un := CreateHuman;
SetDir(un, dir);
PlaceHumanInUnit(un, b);
End;

Export function PrepareDifficulty;
begin
    if Difficulty = 1 then
    begin
        RuSolMinLevel = 2;
        RuSolMaxLevel = 5;
    end;

    if Difficulty = 2 then
    begin
        RuSolMinLevel = 3;
        RuSolMaxLevel = 5;
    end;

    if Difficulty = 3 then
    begin
        RuSolMinLevel = 4;
        RuSolMaxLevel = 5;
    end;
end;

Export function ShowQuery1;
begin
    case query('QKill') of
        1: begin result = 1; end;
        2: begin result = 2; end;
        3: begin result = 3; end;
    end;
end;

Export function ShowQuery2;
begin
    case query('QKill2') of
        1: begin result = 1; end;
        2: begin result = 2; end;
    end;
end;


// AI functions

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

  For i = 1 to 72 do
    If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;

Export function RepairBuilding(side, building);
var buildings_list, i,engineerOk_list, j;
begin

        engineerOk_list = FilterAllUnits([[f_side, side], [f_or, [f_class, 2], [f_class, 16]], [f_lives, 1000]]);
        buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

        if buildings_list > 0 and engineerOk_list > 0 then
        begin

                for i in engineerOk_list do
                begin
                     for j in buildings_list do
                     begin

                        AddComExitBuilding(i);
                        wait(0$1);
                        AddComRepairBuilding(i, j);

                    end;
                end;
        end;

        if buildings_list = 0 then
        begin

           for i in engineerOK_list do
           begin
             ComEnterUnit(i, building);
          end;

        end;
END;


Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list,  i, j, damageUnits;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);

    if damageUnits > 0 and sci_list > 0 then
    begin

      for i = 1 to damageUnits do ComMoveToArea(damageUnits[i], healArea);

      for i in sci_list do
      begin

        ComExitBuilding(i);

        for j in FilterUnitsInArea(healArea,[f_side, side]) do
        begin

        AddComHeal(i, j);
        wait(1$0);

        end;
      end;

    end else
    begin

    AddComEnterUnit(sci_list, build);

  end;

END;

Export function BuildingVehicleAndAttackEnemy(side, fabric, vehCount, weaponTab, engine, control, chassis);
var i;
begin

    if FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
        for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);
    
END;

Export function EnemyVehicleAttack(side, targetSide);
var i, tmp, target1, target2;
begin

    for i := 1 to russianTanks do
    begin
        if i = [5, 6, 5][Difficulty] then
        begin

            repeat
                wait(0$1);

                for i in russianTanks do
                begin
                    if GetLives(i) < 659 then
                    begin
                        tmp = i;
                        
                        for i := 1 to russianTanks do
                        begin
                            if tmp = russianTanks[i] then
                            begin
                                russianTanks = Delete(russianTanks, i);
                                russianDamageTanks = russianDamageTanks ^ tmp;
                            end;
                        end;

                    end;

                    wait(0$1);

                    target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                    target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                    If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                    begin
                        ComAttackUnit(i, target1);
                    end else begin
                        ComAttackUnit(i, target2);
                    end;
                end;

            until russianTanks = 0;

        end;
    end;
end;

Export function RepairVehicle(side, repairArea, repX, repY);
var i,j, vehicleOK_list, damageVehicle_list, vehicleNeedRepair_list, vehicleDontNeedRepair_list, mechanicInside_list, mechanicOutside_list;
begin
    vehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 660], [f_not, [f_empty]]]);
    damageVehicle_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_not, [f_lives, 660]]]);

    vehicleNeedRepair_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_not, [f_lives, 1000]]]);
    vehicleDontNeedRepair_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_lives, 1000], [f_empty]]);

    mechanicInside_list = [];
    mechanicOutside_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]);

    if damageVehicle_list > 0 then
        for i in damageVehicle_list do ComMoveXY(i, repX, repY);

    if vehicleNeedRepair_list > 0 then
    begin
        for i in vehicleNeedRepair_list  do
        begin
            mechanicInside_list = mechanicInside_list ^ UnitsInside(i);
            for j in mechanicInside_list do
            begin
                ComExitVehicle(j);
                wait(0$1);
                ComRepairVehicle(j, i);
            end;
        end;
    end;

    if vehicleDontNeedRepair_list > 0 then
    begin
        ComEnterUnit(mechanicOutside_list[1], vehicleDontNeedRepair_list[1]);
    end;

    if vehicleOK_list > 0 and russianDamageTanks > 0 then
    begin
        for i := 1 to vehicleOK_list do
        begin
            if i = [5, 6, 5][Difficulty] then
            begin
                for i in vehicleOk_list do russianTanks = russianTanks ^ i;
                russianDamageTanks = Delete(russianDamageTanks, 1);
            end;
        end;
    end; 
   
    for i in not FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]) do ComMoveXY(i, repX, repY);

END;


Export function CollectCrates(side, cargo, cratesArea);
var clear_crates, cargo_list, crate_list;
begin
    enable;
    crate_list = GetListOfCratesInArea(cratesArea);
    cargo_list = FilterAllUnits([[f_side, side], [f_weapon, cargo]]);

    if cargo_list > 0 and GetListOfCratesInArea(cratesArea) and crate_list > 0 then
    begin
        AddComCollect(cargo_list[1], crate_list[1], crate_list[2]);
        SetFuel(cargo_list[1], 100);
    end;
end; 


Export function RebuildBuildings(side, destroyedBuildings);
var i;
begin
    if FilterAllUnits([[f_side, side], [f_class, 2]]) > 0 and FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) = 0 and destroyedBuildings > 0  then
    begin
        for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do 
        begin
            AddComExitBuilding(i);
            AddComBuild(i, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
        end;
    end;
end;

Export function EscapeToBarrack(side, build, area);
var i,j, soldiers_list, turretList, temp, specialClass_list;
begin


    soldiers_list = FilterAllUnits([[f_side, side], [f_class, 1], [f_outside], [f_lives, 700]]);
    turretList = FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
    specialClass_list = FilterAllUnits([[f_side, side], [f_or, [f_class, 5], [f_class, 8], [f_class, 9]]]);

    temp = UnitsInside(build) diff specialClass_list;

  if turretList = 0 and temp = 0  then
  begin
     for i in soldiers_list do
     begin
       if IsOK(build) then ComEnterUnit(i, build);
     end;
  end else
  begin
    for i = 1 to turretList do
    begin
     for j = 1 to temp do
     begin
       ComExitBuilding(temp[j]);
      AddComEnterUnit(temp[j], turretList[i]);
      end;
    end;
  end;

end;

Export function AttackNearBuildings(side, enemySide);
var i, j, turretsList, enemyBuildings;
begin
    turretsList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 31], [f_btype, 32], [f_btype, 33], [f_btype, 4], [f_btype, 5]]]);
    enemyBuildings = FilterAllUnits([[f_side, enemySide], [f_type, unit_building], [f_empty]]);

    if turretsList > 0 and enemyBuildings > 0 then
    begin
        for i in turretsList do
        begin
            for j in enemyBuildings do
            begin
                if GetDistUnits(i, j) < 20 then
                begin
                    ComAttackUnit(i, j);
                end;
            end;
        end;
    end;

END;

// Other functions

Export function RespawnAttackInfantry(side, nation, soldierCount, sniperCount, bazookCount, mortalCount, medicCount, skil, spawnArea, healArea, targetSide, strategy);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin

        for i = 1 to medicCount do
        begin

            uc_side = side;
            uc_nation = nation;

            hc_name = '';
            hc_gallery = '';
                            PrepareHuman(false, 4, skil);

            un = CreateHuman;
            PlaceUnitArea(un, spawnArea, false);

        end;


       for i = 1 to soldierCount do
        begin

            uc_side = side;
            uc_nation = nation;

            hc_name = '';
            hc_gallery = '';
                            PrepareHuman(false, 1, skil);

            un = CreateHuman;
            PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to sniperCount do
        begin

            uc_side = side;
            uc_nation = nation;

            hc_name = '';
            hc_gallery = '';
                            PrepareHuman(false, 5, skil);

            un = CreateHuman;
            PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to bazookCount do
        begin

            uc_side = side;
            uc_nation = nation;

            hc_name = '';
            hc_gallery = '';
                            PrepareHuman(false, 9, skil);

            un = CreateHuman;
            PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to mortalCount do
        begin

            uc_side = side;
            uc_nation = nation;

            hc_name = '';
            hc_gallery = '';
                            PrepareHuman(false, 8, skil);

            un = CreateHuman;
            PlaceUnitArea(un, spawnArea, false);

        end;


        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]);

        medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

            for i in medic_list do ComMoveToArea(i, healArea);


        // strategy , 1 - left side,  2 - right side, 
  
        if strategy = 1 then
        begin
                repeat
                        wait(0$3);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 80, 109);
                                AddComAgressiveMove(i, 39, 49);
                        end;
                until FilterUnitsInArea(AttackArea1, [f_side, side]) > 0;

                repeat
                        wait(0$1);
                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                        IF medicCount > 0  then
                        begin
                                if damageUnit_list > 0 then
                                begin
                                        for i in damageUnit_list  do
                                        begin
                                                ComMoveToArea(i, healArea);
                                                for j in medic_list do 
                                                AddComHeal(j, i);
                                        end;
                                 end;
                        end;

                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                        ComAttackUnit(i, target1);
                                        end  else
                                        begin
                                        ComAttackUnit(i, target2);
                                end;

                        end;

                                        
                        for i in soldiersOK_list do
                        begin
                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end else
                                begin
                                ComAttackUnit(i, target2);
                        end;
               end; until soldiersOK_list = [];
        end;


      if strategy = 2 then
      begin
                repeat
                        wait(0$1);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 117, 97);
                                AddComAgressiveMove(i, 94, 50);
                        end;
                until FilterUnitsInArea(AttackArea2, [f_side, side]) > 0;

                repeat
                        wait(0$3);
                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                        IF medicCount > 0  then
                        begin
                                if damageUnit_list > 0 then
                                begin
                                        for i in damageUnit_list  do
                                        begin
                                                ComMoveToArea(i, healArea);
                                                for j in medic_list do 
                                                AddComHeal(j, i);
                                        end;
                                 end;
                        end;

                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                        ComAttackUnit(i, target1);
                                        end  else
                                        begin
                                        ComAttackUnit(i, target2);
                                end;

                        end;

                                        
                        for i in soldiersOK_list do
                        begin
                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end else
                                begin
                                ComAttackUnit(i, target2);
                        end;
               end; until soldiersOK_list = [];
        end;

END;