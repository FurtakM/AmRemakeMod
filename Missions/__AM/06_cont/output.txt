// export JMM , Gladstone , Frank , Woodruff , Lisa , Brown , Denis , Cyrus ; export Harisson , Doctor , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 1 ;
  18: LD_ADDR_EXP 31
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 18
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 19
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 16
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 12
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 29
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 21
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 22
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 24
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 30
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// unitLost = 0 ;
 131: LD_ADDR_EXP 25
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 139: LD_ADDR_EXP 26
 143: PUSH
 144: EMPTY
 145: ST_TO_ADDR
// strings = [ ] ;
 146: LD_ADDR_EXP 23
 150: PUSH
 151: EMPTY
 152: ST_TO_ADDR
// PrepareDifficulty ;
 153: CALL 3964 0 0
// PrepareRussian ;
 157: CALL 3128 0 0
// PrepareHeroes ;
 161: CALL 404 0 0
// end ;
 165: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 166: LD_EXP 31
 170: PUSH
 171: LD_INT 1
 173: EQUAL
 174: IFFALSE 401
 176: GO 178
 178: DISABLE
 179: LD_INT 0
 181: PPUSH
// begin enable ;
 182: ENABLE
// fogoff ( true ) ;
 183: LD_INT 1
 185: PPUSH
 186: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 190: LD_ADDR_VAR 0 1
 194: PUSH
 195: LD_INT 22
 197: PUSH
 198: LD_INT 1
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: PUSH
 205: LD_INT 21
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PPUSH
 219: CALL_OW 69
 223: PUSH
 224: FOR_IN
 225: IFFALSE 241
// SetLives ( i , 1000 ) ;
 227: LD_VAR 0 1
 231: PPUSH
 232: LD_INT 1000
 234: PPUSH
 235: CALL_OW 234
 239: GO 224
 241: POP
 242: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 243: LD_ADDR_VAR 0 1
 247: PUSH
 248: LD_INT 22
 250: PUSH
 251: LD_INT 1
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: LD_INT 30
 260: PUSH
 261: LD_INT 0
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: PPUSH
 272: CALL_OW 69
 276: PUSH
 277: FOR_IN
 278: IFFALSE 302
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 280: LD_VAR 0 1
 284: PPUSH
 285: CALL_OW 274
 289: PPUSH
 290: LD_INT 1
 292: PPUSH
 293: LD_INT 9999
 295: PPUSH
 296: CALL_OW 277
 300: GO 277
 302: POP
 303: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 304: LD_ADDR_VAR 0 1
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 30
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: EMPTY
 330: LIST
 331: LIST
 332: PPUSH
 333: CALL_OW 69
 337: PUSH
 338: FOR_IN
 339: IFFALSE 363
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 341: LD_VAR 0 1
 345: PPUSH
 346: CALL_OW 274
 350: PPUSH
 351: LD_INT 2
 353: PPUSH
 354: LD_INT 9999
 356: PPUSH
 357: CALL_OW 277
 361: GO 338
 363: POP
 364: POP
// if IsSelected ( rudepo ) then
 365: LD_INT 2
 367: PPUSH
 368: CALL_OW 306
 372: IFFALSE 382
// your_side = 3 ;
 374: LD_ADDR_OWVAR 2
 378: PUSH
 379: LD_INT 3
 381: ST_TO_ADDR
// if IsSelected ( JMM ) then
 382: LD_EXP 1
 386: PPUSH
 387: CALL_OW 306
 391: IFFALSE 401
// your_side = 1 ;
 393: LD_ADDR_OWVAR 2
 397: PUSH
 398: LD_INT 1
 400: ST_TO_ADDR
// end ; end_of_file
 401: PPOPN 1
 403: END
// export function PrepareHeroes ; var veh ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
// uc_side = 1 ;
 408: LD_ADDR_OWVAR 20
 412: PUSH
 413: LD_INT 1
 415: ST_TO_ADDR
// uc_nation = 1 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 1
 423: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 424: LD_ADDR_EXP 1
 428: PUSH
 429: LD_STRING JMM
 431: PPUSH
 432: LD_INT 0
 434: PPUSH
 435: CALL 3505 0 2
 439: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 440: LD_ADDR_EXP 5
 444: PUSH
 445: LD_STRING Lisa
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: CALL 3505 0 2
 455: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 456: LD_ADDR_EXP 6
 460: PUSH
 461: LD_STRING Brown
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL 3505 0 2
 471: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 472: LD_ADDR_EXP 4
 476: PUSH
 477: LD_STRING EveWoodruff
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL 3505 0 2
 487: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 488: LD_ADDR_EXP 2
 492: PUSH
 493: LD_STRING Gladstone
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL 3505 0 2
 503: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 504: LD_ADDR_EXP 3
 508: PUSH
 509: LD_STRING Frank
 511: PPUSH
 512: LD_INT 0
 514: PPUSH
 515: CALL 3505 0 2
 519: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 520: LD_ADDR_EXP 9
 524: PUSH
 525: LD_STRING Harisson
 527: PPUSH
 528: LD_INT 0
 530: PPUSH
 531: CALL 3505 0 2
 535: ST_TO_ADDR
// hc_class := 4 ;
 536: LD_ADDR_OWVAR 28
 540: PUSH
 541: LD_INT 4
 543: ST_TO_ADDR
// hc_sex := sex_male ;
 544: LD_ADDR_OWVAR 27
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// hc_gallery :=  ;
 552: LD_ADDR_OWVAR 33
 556: PUSH
 557: LD_STRING 
 559: ST_TO_ADDR
// hc_name :=  ;
 560: LD_ADDR_OWVAR 26
 564: PUSH
 565: LD_STRING 
 567: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
 568: LD_ADDR_OWVAR 31
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 3
 578: PUSH
 579: LD_INT 1
 581: PUSH
 582: LD_INT 0
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: ST_TO_ADDR
// Doctor = CreateHuman ;
 591: LD_ADDR_EXP 10
 595: PUSH
 596: CALL_OW 44
 600: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
 601: LD_ADDR_EXP 13
 605: PUSH
 606: CALL_OW 44
 610: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
 611: LD_EXP 13
 615: PPUSH
 616: LD_VAR 0 2
 620: PPUSH
 621: CALL_OW 52
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 625: LD_EXP 5
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 640: LD_EXP 6
 644: PPUSH
 645: LD_INT 2
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 49
// PlaceUnitArea ( Woodruff , PlayerSpawn , false ) ;
 655: LD_EXP 4
 659: PPUSH
 660: LD_INT 2
 662: PPUSH
 663: LD_INT 0
 665: PPUSH
 666: CALL_OW 49
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
 670: LD_EXP 2
 674: PPUSH
 675: LD_INT 2
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 685: LD_EXP 3
 689: PPUSH
 690: LD_INT 2
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// SetClass ( Brown , 2 ) ;
 700: LD_EXP 6
 704: PPUSH
 705: LD_INT 2
 707: PPUSH
 708: CALL_OW 336
// vc_engine = 1 ;
 712: LD_ADDR_OWVAR 39
 716: PUSH
 717: LD_INT 1
 719: ST_TO_ADDR
// vc_control = 1 ;
 720: LD_ADDR_OWVAR 38
 724: PUSH
 725: LD_INT 1
 727: ST_TO_ADDR
// vc_weapon = 12 ;
 728: LD_ADDR_OWVAR 40
 732: PUSH
 733: LD_INT 12
 735: ST_TO_ADDR
// vc_chassis = 2 ;
 736: LD_ADDR_OWVAR 37
 740: PUSH
 741: LD_INT 2
 743: ST_TO_ADDR
// veh = CreateVehicle ;
 744: LD_ADDR_VAR 0 2
 748: PUSH
 749: CALL_OW 45
 753: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 754: LD_VAR 0 2
 758: PPUSH
 759: LD_INT 2
 761: PPUSH
 762: LD_INT 0
 764: PPUSH
 765: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
 769: LD_EXP 1
 773: PPUSH
 774: LD_VAR 0 2
 778: PPUSH
 779: CALL_OW 52
// AddCargo ( veh , 1 , [ 100 , 80 , 50 ] [ Difficulty ] ) ;
 783: LD_VAR 0 2
 787: PPUSH
 788: LD_INT 1
 790: PPUSH
 791: LD_INT 100
 793: PUSH
 794: LD_INT 80
 796: PUSH
 797: LD_INT 50
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_OWVAR 67
 809: ARRAY
 810: PPUSH
 811: CALL_OW 291
// SetFuel ( veh , 50 ) ;
 815: LD_VAR 0 2
 819: PPUSH
 820: LD_INT 50
 822: PPUSH
 823: CALL_OW 240
// end ;
 827: LD_VAR 0 1
 831: RET
// export function PrepareDenis ; begin
 832: LD_INT 0
 834: PPUSH
// uc_side = 1 ;
 835: LD_ADDR_OWVAR 20
 839: PUSH
 840: LD_INT 1
 842: ST_TO_ADDR
// uc_nation = 1 ;
 843: LD_ADDR_OWVAR 21
 847: PUSH
 848: LD_INT 1
 850: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 851: LD_ADDR_EXP 7
 855: PUSH
 856: LD_STRING Denis
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: CALL 3505 0 2
 866: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
 867: LD_EXP 7
 871: PPUSH
 872: LD_INT 13
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 49
// SetClass ( Denis , 4 ) ;
 882: LD_EXP 7
 886: PPUSH
 887: LD_INT 4
 889: PPUSH
 890: CALL_OW 336
// SetLives ( Denis , 750 ) ;
 894: LD_EXP 7
 898: PPUSH
 899: LD_INT 750
 901: PPUSH
 902: CALL_OW 234
// end ;
 906: LD_VAR 0 1
 910: RET
// export function HarrisonSupport ; var un , veh ; begin
 911: LD_INT 0
 913: PPUSH
 914: PPUSH
 915: PPUSH
// uc_side = 1 ;
 916: LD_ADDR_OWVAR 20
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// uc_nation = 1 ;
 924: LD_ADDR_OWVAR 21
 928: PUSH
 929: LD_INT 1
 931: ST_TO_ADDR
// vc_engine = 1 ;
 932: LD_ADDR_OWVAR 39
 936: PUSH
 937: LD_INT 1
 939: ST_TO_ADDR
// vc_control = 1 ;
 940: LD_ADDR_OWVAR 38
 944: PUSH
 945: LD_INT 1
 947: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
 948: LD_ADDR_OWVAR 40
 952: PUSH
 953: LD_INT 4
 955: PUSH
 956: LD_INT 4
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_OWVAR 67
 971: ARRAY
 972: ST_TO_ADDR
// vc_chassis = 2 ;
 973: LD_ADDR_OWVAR 37
 977: PUSH
 978: LD_INT 2
 980: ST_TO_ADDR
// veh = CreateVehicle ;
 981: LD_ADDR_VAR 0 3
 985: PUSH
 986: CALL_OW 45
 990: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
 991: LD_VAR 0 3
 995: PPUSH
 996: LD_INT 3
 998: PPUSH
 999: LD_INT 0
1001: PPUSH
1002: CALL_OW 49
// hc_class := 2 ;
1006: LD_ADDR_OWVAR 28
1010: PUSH
1011: LD_INT 2
1013: ST_TO_ADDR
// hc_sex := sex_male ;
1014: LD_ADDR_OWVAR 27
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1022: LD_ADDR_OWVAR 33
1026: PUSH
1027: LD_STRING SecondCharsGal
1029: ST_TO_ADDR
// hc_face_number := 52 ;
1030: LD_ADDR_OWVAR 34
1034: PUSH
1035: LD_INT 52
1037: ST_TO_ADDR
// hc_name := Craig Brown ;
1038: LD_ADDR_OWVAR 26
1042: PUSH
1043: LD_STRING Craig Brown
1045: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1046: LD_ADDR_OWVAR 31
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 3
1056: PUSH
1057: LD_INT 1
1059: PUSH
1060: LD_INT 0
1062: PUSH
1063: EMPTY
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1069: LD_ADDR_EXP 13
1073: PUSH
1074: CALL_OW 44
1078: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
1079: LD_EXP 13
1083: PPUSH
1084: LD_VAR 0 3
1088: PPUSH
1089: CALL_OW 52
// vc_engine = 1 ;
1093: LD_ADDR_OWVAR 39
1097: PUSH
1098: LD_INT 1
1100: ST_TO_ADDR
// vc_control = 1 ;
1101: LD_ADDR_OWVAR 38
1105: PUSH
1106: LD_INT 1
1108: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
1109: LD_ADDR_OWVAR 40
1113: PUSH
1114: LD_INT 4
1116: PUSH
1117: LD_INT 2
1119: PUSH
1120: LD_INT 2
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: PUSH
1128: LD_OWVAR 67
1132: ARRAY
1133: ST_TO_ADDR
// vc_chassis = 2 ;
1134: LD_ADDR_OWVAR 37
1138: PUSH
1139: LD_INT 2
1141: ST_TO_ADDR
// veh = CreateVehicle ;
1142: LD_ADDR_VAR 0 3
1146: PUSH
1147: CALL_OW 45
1151: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1152: LD_VAR 0 3
1156: PPUSH
1157: LD_INT 3
1159: PPUSH
1160: LD_INT 0
1162: PPUSH
1163: CALL_OW 49
// SetFuel ( veh , 50 ) ;
1167: LD_VAR 0 3
1171: PPUSH
1172: LD_INT 50
1174: PPUSH
1175: CALL_OW 240
// hc_class := 1 ;
1179: LD_ADDR_OWVAR 28
1183: PUSH
1184: LD_INT 1
1186: ST_TO_ADDR
// hc_sex := sex_female ;
1187: LD_ADDR_OWVAR 27
1191: PUSH
1192: LD_INT 2
1194: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1195: LD_ADDR_OWVAR 33
1199: PUSH
1200: LD_STRING SecondCharsGal
1202: ST_TO_ADDR
// hc_face_number := 45 ;
1203: LD_ADDR_OWVAR 34
1207: PUSH
1208: LD_INT 45
1210: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
1211: LD_ADDR_OWVAR 26
1215: PUSH
1216: LD_STRING Ingrid Jonsson
1218: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1219: LD_ADDR_OWVAR 31
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 3
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: LD_INT 0
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
1242: LD_ADDR_EXP 14
1246: PUSH
1247: CALL_OW 44
1251: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
1252: LD_EXP 14
1256: PPUSH
1257: LD_VAR 0 3
1261: PPUSH
1262: CALL_OW 52
// SetFuel ( veh , 45 ) ;
1266: LD_VAR 0 3
1270: PPUSH
1271: LD_INT 45
1273: PPUSH
1274: CALL_OW 240
// end ;
1278: LD_VAR 0 1
1282: RET
// export function PrepareJoan ; var tmp , rnd ; begin
1283: LD_INT 0
1285: PPUSH
1286: PPUSH
1287: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ;
1288: LD_ADDR_VAR 0 2
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 21
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 26
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: PPUSH
1328: CALL_OW 69
1332: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
1333: LD_ADDR_VAR 0 3
1337: PUSH
1338: LD_INT 1
1340: PPUSH
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 12
1350: ST_TO_ADDR
// uc_side = 4 ;
1351: LD_ADDR_OWVAR 20
1355: PUSH
1356: LD_INT 4
1358: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
1359: LD_ADDR_EXP 11
1363: PUSH
1364: LD_STRING Joan
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL 3505 0 2
1374: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
1375: LD_EXP 11
1379: PPUSH
1380: LD_VAR 0 2
1384: PUSH
1385: LD_VAR 0 3
1389: ARRAY
1390: PPUSH
1391: CALL_OW 250
1395: PPUSH
1396: LD_VAR 0 2
1400: PUSH
1401: LD_VAR 0 3
1405: ARRAY
1406: PPUSH
1407: CALL_OW 251
1411: PPUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL_OW 50
// SetLives ( Joan , 250 ) ;
1422: LD_EXP 11
1426: PPUSH
1427: LD_INT 250
1429: PPUSH
1430: CALL_OW 234
// InGameOn ;
1434: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
1438: LD_EXP 11
1442: PPUSH
1443: CALL_OW 87
// wait ( 0 0$2 ) ;
1447: LD_INT 70
1449: PPUSH
1450: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
1454: LD_VAR 0 2
1458: PUSH
1459: LD_VAR 0 3
1463: ARRAY
1464: PPUSH
1465: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
1469: LD_VAR 0 2
1473: PUSH
1474: LD_VAR 0 3
1478: ARRAY
1479: PPUSH
1480: CALL_OW 122
// wait ( 0 0$1 ) ;
1484: LD_INT 35
1486: PPUSH
1487: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
1491: LD_VAR 0 2
1495: PUSH
1496: LD_VAR 0 3
1500: ARRAY
1501: PPUSH
1502: LD_EXP 11
1506: PPUSH
1507: CALL_OW 112
// wait ( 0 0$2 ) ;
1511: LD_INT 70
1513: PPUSH
1514: CALL_OW 67
// DialogueOn ;
1518: CALL_OW 6
// if tmp [ rnd ] = JMM then
1522: LD_VAR 0 2
1526: PUSH
1527: LD_VAR 0 3
1531: ARRAY
1532: PUSH
1533: LD_EXP 1
1537: EQUAL
1538: IFFALSE 1665
// begin Say ( JMM , D5b-JMM-1 ) ;
1540: LD_EXP 1
1544: PPUSH
1545: LD_STRING D5b-JMM-1
1547: PPUSH
1548: CALL_OW 88
// DialogueOff ;
1552: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1556: LD_EXP 11
1560: PPUSH
1561: LD_INT 500
1563: PPUSH
1564: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
1568: LD_EXP 11
1572: PPUSH
1573: LD_EXP 1
1577: PPUSH
1578: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1582: LD_EXP 1
1586: PPUSH
1587: LD_EXP 11
1591: PPUSH
1592: CALL_OW 119
// wait ( 0 0$1 ) ;
1596: LD_INT 35
1598: PPUSH
1599: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
1603: LD_EXP 11
1607: PPUSH
1608: LD_STRING D5b-Joan-1
1610: PPUSH
1611: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
1615: LD_EXP 1
1619: PPUSH
1620: LD_STRING D5b-JMM-2
1622: PPUSH
1623: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
1627: LD_EXP 11
1631: PPUSH
1632: LD_STRING D5b-Joan-2
1634: PPUSH
1635: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
1639: LD_EXP 1
1643: PPUSH
1644: LD_STRING D5b-JMM-3
1646: PPUSH
1647: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
1651: LD_EXP 11
1655: PPUSH
1656: LD_STRING D5b-Joan-3
1658: PPUSH
1659: CALL_OW 88
// end else
1663: GO 2005
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
1665: LD_VAR 0 2
1669: PUSH
1670: LD_VAR 0 3
1674: ARRAY
1675: PPUSH
1676: LD_STRING D5a-Sol1-1
1678: PPUSH
1679: CALL_OW 88
// DialogueOff ;
1683: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1687: LD_EXP 11
1691: PPUSH
1692: LD_INT 500
1694: PPUSH
1695: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
1699: LD_EXP 11
1703: PPUSH
1704: LD_VAR 0 2
1708: PUSH
1709: LD_VAR 0 3
1713: ARRAY
1714: PPUSH
1715: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
1719: LD_VAR 0 2
1723: PUSH
1724: LD_VAR 0 3
1728: ARRAY
1729: PPUSH
1730: LD_EXP 11
1734: PPUSH
1735: CALL_OW 119
// wait ( 0 0$1 ) ;
1739: LD_INT 35
1741: PPUSH
1742: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
1746: LD_EXP 11
1750: PPUSH
1751: LD_STRING D5a-Joan-1
1753: PPUSH
1754: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
1758: LD_VAR 0 2
1762: PUSH
1763: LD_VAR 0 3
1767: ARRAY
1768: PPUSH
1769: LD_STRING D5a-Sol1-2
1771: PPUSH
1772: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
1776: LD_EXP 11
1780: PPUSH
1781: LD_STRING D5a-Joan-2
1783: PPUSH
1784: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
1788: LD_VAR 0 2
1792: PUSH
1793: LD_VAR 0 3
1797: ARRAY
1798: PPUSH
1799: LD_STRING D5a-Sol1-3
1801: PPUSH
1802: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
1806: LD_EXP 11
1810: PPUSH
1811: LD_STRING D5a-Joan-3
1813: PPUSH
1814: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
1818: LD_VAR 0 2
1822: PUSH
1823: LD_VAR 0 3
1827: ARRAY
1828: PPUSH
1829: LD_STRING D5a-Sol1-4
1831: PPUSH
1832: CALL_OW 88
// ComExitVehicle ( JMM ) ;
1836: LD_EXP 1
1840: PPUSH
1841: CALL_OW 121
// ComExitBuilding ( JMM ) ;
1845: LD_EXP 1
1849: PPUSH
1850: CALL_OW 122
// wait ( 0 0$1 ) ;
1854: LD_INT 35
1856: PPUSH
1857: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1861: LD_INT 35
1863: PPUSH
1864: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
1868: LD_EXP 11
1872: PUSH
1873: LD_VAR 0 2
1877: PUSH
1878: LD_VAR 0 3
1882: ARRAY
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PPUSH
1888: LD_EXP 1
1892: PPUSH
1893: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
1897: LD_EXP 11
1901: PPUSH
1902: LD_EXP 1
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 5
1914: LESS
1915: IFFALSE 1861
// ComTurnUnit ( Joan , JMM ) ;
1917: LD_EXP 11
1921: PPUSH
1922: LD_EXP 1
1926: PPUSH
1927: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1931: LD_EXP 1
1935: PPUSH
1936: LD_EXP 11
1940: PPUSH
1941: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
1945: LD_EXP 11
1949: PPUSH
1950: LD_STRING D5a-Joan-4
1952: PPUSH
1953: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
1957: LD_EXP 1
1961: PPUSH
1962: LD_STRING D5a-JMM-4
1964: PPUSH
1965: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
1969: LD_EXP 11
1973: PPUSH
1974: LD_STRING D5a-Joan-5
1976: PPUSH
1977: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
1981: LD_EXP 1
1985: PPUSH
1986: LD_STRING D5a-JMM-5
1988: PPUSH
1989: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
1993: LD_EXP 11
1997: PPUSH
1998: LD_STRING D5a-Joan-6
2000: PPUSH
2001: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING D6-JMM-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
2017: LD_EXP 11
2021: PPUSH
2022: LD_STRING D6-Joan-1
2024: PPUSH
2025: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_STRING D6-JMM-2
2036: PPUSH
2037: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
2041: LD_EXP 11
2045: PPUSH
2046: LD_STRING D6-Joan-2
2048: PPUSH
2049: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
2053: LD_EXP 1
2057: PPUSH
2058: LD_STRING D6-JMM-3
2060: PPUSH
2061: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
2065: LD_EXP 11
2069: PPUSH
2070: LD_STRING D6-Joan-3
2072: PPUSH
2073: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
2077: LD_EXP 1
2081: PPUSH
2082: LD_STRING D6-JMM-4
2084: PPUSH
2085: CALL_OW 88
// DialogueOff ;
2089: CALL_OW 7
// InGameOff ;
2093: CALL_OW 9
// SetSide ( Joan , 1 ) ;
2097: LD_EXP 11
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
2109: LD_STRING MJ
2111: PPUSH
2112: CALL_OW 337
// JoanStatus = 1 ;
2116: LD_ADDR_EXP 12
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// end ;
2124: LD_VAR 0 1
2128: RET
// export function PrepareRandoms ( number ) ; var un ; begin
2129: LD_INT 0
2131: PPUSH
2132: PPUSH
// uc_side = 1 ;
2133: LD_ADDR_OWVAR 20
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// uc_nation = 1 ;
2141: LD_ADDR_OWVAR 21
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// if number = 1 then
2149: LD_VAR 0 1
2153: PUSH
2154: LD_INT 1
2156: EQUAL
2157: IFFALSE 2295
// begin hc_class := 1 ;
2159: LD_ADDR_OWVAR 28
2163: PUSH
2164: LD_INT 1
2166: ST_TO_ADDR
// hc_sex := sex_male ;
2167: LD_ADDR_OWVAR 27
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2175: LD_ADDR_OWVAR 33
2179: PUSH
2180: LD_STRING AmGalRemake
2182: ST_TO_ADDR
// hc_face_number := 7 ;
2183: LD_ADDR_OWVAR 34
2187: PUSH
2188: LD_INT 7
2190: ST_TO_ADDR
// hc_name := Bobby Jorda ;
2191: LD_ADDR_OWVAR 26
2195: PUSH
2196: LD_STRING Bobby Jorda
2198: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2199: LD_ADDR_OWVAR 31
2203: PUSH
2204: LD_INT 2
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: LD_INT 1
2212: PUSH
2213: LD_INT 1
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: ST_TO_ADDR
// un = CreateHuman ;
2222: LD_ADDR_VAR 0 3
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2232: LD_VAR 0 3
2236: PPUSH
2237: LD_INT 12
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2247: LD_VAR 0 3
2251: PPUSH
2252: CALL_OW 87
// wait ( 0 0$1 ) ;
2256: LD_INT 35
2258: PPUSH
2259: CALL_OW 67
// DialogueOn ;
2263: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_STRING D11b-Sol3-1
2274: PPUSH
2275: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
2279: LD_EXP 1
2283: PPUSH
2284: LD_STRING D11b-JMM-1
2286: PPUSH
2287: CALL_OW 88
// DialogueOff ;
2291: CALL_OW 7
// end ; if number = 2 then
2295: LD_VAR 0 1
2299: PUSH
2300: LD_INT 2
2302: EQUAL
2303: IFFALSE 2441
// begin hc_class := 3 ;
2305: LD_ADDR_OWVAR 28
2309: PUSH
2310: LD_INT 3
2312: ST_TO_ADDR
// hc_sex := sex_male ;
2313: LD_ADDR_OWVAR 27
2317: PUSH
2318: LD_INT 1
2320: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2321: LD_ADDR_OWVAR 33
2325: PUSH
2326: LD_STRING SecondCharsGal
2328: ST_TO_ADDR
// hc_face_number := 55 ;
2329: LD_ADDR_OWVAR 34
2333: PUSH
2334: LD_INT 55
2336: ST_TO_ADDR
// hc_name := George McCarthy ;
2337: LD_ADDR_OWVAR 26
2341: PUSH
2342: LD_STRING George McCarthy
2344: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
2345: LD_ADDR_OWVAR 31
2349: PUSH
2350: LD_INT 1
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 3
2358: PUSH
2359: LD_INT 1
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ST_TO_ADDR
// un = CreateHuman ;
2368: LD_ADDR_VAR 0 3
2372: PUSH
2373: CALL_OW 44
2377: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2378: LD_VAR 0 3
2382: PPUSH
2383: LD_INT 12
2385: PPUSH
2386: LD_INT 1
2388: PPUSH
2389: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2393: LD_VAR 0 3
2397: PPUSH
2398: CALL_OW 87
// wait ( 0 0$1 ) ;
2402: LD_INT 35
2404: PPUSH
2405: CALL_OW 67
// DialogueOn ;
2409: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: LD_STRING D11d-Sol4-1
2420: PPUSH
2421: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
2425: LD_EXP 1
2429: PPUSH
2430: LD_STRING D11d-JMM-1
2432: PPUSH
2433: CALL_OW 88
// DialogueOff ;
2437: CALL_OW 7
// end ; if number = 3 then
2441: LD_VAR 0 1
2445: PUSH
2446: LD_INT 3
2448: EQUAL
2449: IFFALSE 2575
// begin hc_class := 3 ;
2451: LD_ADDR_OWVAR 28
2455: PUSH
2456: LD_INT 3
2458: ST_TO_ADDR
// hc_sex := sex_female ;
2459: LD_ADDR_OWVAR 27
2463: PUSH
2464: LD_INT 2
2466: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2467: LD_ADDR_OWVAR 33
2471: PUSH
2472: LD_STRING SecondCharsGal
2474: ST_TO_ADDR
// hc_face_number := 45 ;
2475: LD_ADDR_OWVAR 34
2479: PUSH
2480: LD_INT 45
2482: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2483: LD_ADDR_OWVAR 26
2487: PUSH
2488: LD_STRING Sylvia Creak
2490: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2491: LD_ADDR_OWVAR 31
2495: PUSH
2496: LD_INT 1
2498: PUSH
2499: LD_INT 3
2501: PUSH
2502: LD_INT 1
2504: PUSH
2505: LD_INT 1
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: ST_TO_ADDR
// un = CreateHuman ;
2514: LD_ADDR_VAR 0 3
2518: PUSH
2519: CALL_OW 44
2523: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2524: LD_VAR 0 3
2528: PPUSH
2529: LD_INT 12
2531: PPUSH
2532: LD_INT 1
2534: PPUSH
2535: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2539: LD_VAR 0 3
2543: PPUSH
2544: CALL_OW 87
// wait ( 0 0$1 ) ;
2548: LD_INT 35
2550: PPUSH
2551: CALL_OW 67
// DialogueOn ;
2555: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2559: LD_VAR 0 3
2563: PPUSH
2564: LD_STRING D11e-FSol4-1
2566: PPUSH
2567: CALL_OW 88
// DialogueOff ;
2571: CALL_OW 7
// end ; if number = 4 then
2575: LD_VAR 0 1
2579: PUSH
2580: LD_INT 4
2582: EQUAL
2583: IFFALSE 2709
// begin hc_class := 3 ;
2585: LD_ADDR_OWVAR 28
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// hc_sex := sex_female ;
2593: LD_ADDR_OWVAR 27
2597: PUSH
2598: LD_INT 2
2600: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2601: LD_ADDR_OWVAR 33
2605: PUSH
2606: LD_STRING SecondCharsGal
2608: ST_TO_ADDR
// hc_face_number := 46 ;
2609: LD_ADDR_OWVAR 34
2613: PUSH
2614: LD_INT 46
2616: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2617: LD_ADDR_OWVAR 26
2621: PUSH
2622: LD_STRING Sylvia Creak
2624: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2625: LD_ADDR_OWVAR 31
2629: PUSH
2630: LD_INT 1
2632: PUSH
2633: LD_INT 3
2635: PUSH
2636: LD_INT 1
2638: PUSH
2639: LD_INT 1
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// un = CreateHuman ;
2648: LD_ADDR_VAR 0 3
2652: PUSH
2653: CALL_OW 44
2657: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2658: LD_VAR 0 3
2662: PPUSH
2663: LD_INT 12
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2673: LD_VAR 0 3
2677: PPUSH
2678: CALL_OW 87
// wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// DialogueOn ;
2689: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2693: LD_VAR 0 3
2697: PPUSH
2698: LD_STRING D11e-FSol4-1
2700: PPUSH
2701: CALL_OW 88
// DialogueOff ;
2705: CALL_OW 7
// end ; if number = 5 then
2709: LD_VAR 0 1
2713: PUSH
2714: LD_INT 5
2716: EQUAL
2717: IFFALSE 2855
// begin hc_class := 1 ;
2719: LD_ADDR_OWVAR 28
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// hc_sex := sex_female ;
2727: LD_ADDR_OWVAR 27
2731: PUSH
2732: LD_INT 2
2734: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2735: LD_ADDR_OWVAR 33
2739: PUSH
2740: LD_STRING SecondCharsGal
2742: ST_TO_ADDR
// hc_face_number := 37 ;
2743: LD_ADDR_OWVAR 34
2747: PUSH
2748: LD_INT 37
2750: ST_TO_ADDR
// hc_name := Margherite Simpson ;
2751: LD_ADDR_OWVAR 26
2755: PUSH
2756: LD_STRING Margherite Simpson
2758: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
2759: LD_ADDR_OWVAR 31
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: ST_TO_ADDR
// un = CreateHuman ;
2782: LD_ADDR_VAR 0 3
2786: PUSH
2787: CALL_OW 44
2791: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2792: LD_VAR 0 3
2796: PPUSH
2797: LD_INT 12
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2807: LD_VAR 0 3
2811: PPUSH
2812: CALL_OW 87
// wait ( 0 0$1 ) ;
2816: LD_INT 35
2818: PPUSH
2819: CALL_OW 67
// DialogueOn ;
2823: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
2827: LD_VAR 0 3
2831: PPUSH
2832: LD_STRING D11c-FSol3-1
2834: PPUSH
2835: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
2839: LD_EXP 1
2843: PPUSH
2844: LD_STRING D11c-JMM-1
2846: PPUSH
2847: CALL_OW 88
// DialogueOff ;
2851: CALL_OW 7
// end ; if number = 6 then
2855: LD_VAR 0 1
2859: PUSH
2860: LD_INT 6
2862: EQUAL
2863: IFFALSE 2989
// begin hc_class := 1 ;
2865: LD_ADDR_OWVAR 28
2869: PUSH
2870: LD_INT 1
2872: ST_TO_ADDR
// hc_sex := sex_male ;
2873: LD_ADDR_OWVAR 27
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2881: LD_ADDR_OWVAR 33
2885: PUSH
2886: LD_STRING AmGalRemake
2888: ST_TO_ADDR
// hc_face_number := 1 ;
2889: LD_ADDR_OWVAR 34
2893: PUSH
2894: LD_INT 1
2896: ST_TO_ADDR
// hc_name := Charles Brown ;
2897: LD_ADDR_OWVAR 26
2901: PUSH
2902: LD_STRING Charles Brown
2904: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
2905: LD_ADDR_OWVAR 31
2909: PUSH
2910: LD_INT 2
2912: PUSH
2913: LD_INT 1
2915: PUSH
2916: LD_INT 0
2918: PUSH
2919: LD_INT 1
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: ST_TO_ADDR
// un = CreateHuman ;
2928: LD_ADDR_VAR 0 3
2932: PUSH
2933: CALL_OW 44
2937: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2938: LD_VAR 0 3
2942: PPUSH
2943: LD_INT 12
2945: PPUSH
2946: LD_INT 1
2948: PPUSH
2949: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2953: LD_VAR 0 3
2957: PPUSH
2958: CALL_OW 87
// wait ( 0 0$1 ) ;
2962: LD_INT 35
2964: PPUSH
2965: CALL_OW 67
// DialogueOn ;
2969: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
2973: LD_VAR 0 3
2977: PPUSH
2978: LD_STRING D11f-Sol5-1
2980: PPUSH
2981: CALL_OW 88
// DialogueOff ;
2985: CALL_OW 7
// end ; if number = 7 then
2989: LD_VAR 0 1
2993: PUSH
2994: LD_INT 7
2996: EQUAL
2997: IFFALSE 3123
// begin hc_class := 1 ;
2999: LD_ADDR_OWVAR 28
3003: PUSH
3004: LD_INT 1
3006: ST_TO_ADDR
// hc_sex := sex_female ;
3007: LD_ADDR_OWVAR 27
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3015: LD_ADDR_OWVAR 33
3019: PUSH
3020: LD_STRING AmGalRemake
3022: ST_TO_ADDR
// hc_face_number := 2 ;
3023: LD_ADDR_OWVAR 34
3027: PUSH
3028: LD_INT 2
3030: ST_TO_ADDR
// hc_name := Johanna Holland ;
3031: LD_ADDR_OWVAR 26
3035: PUSH
3036: LD_STRING Johanna Holland
3038: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3039: LD_ADDR_OWVAR 31
3043: PUSH
3044: LD_INT 1
3046: PUSH
3047: LD_INT 0
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: LD_INT 0
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: ST_TO_ADDR
// un = CreateHuman ;
3062: LD_ADDR_VAR 0 3
3066: PUSH
3067: CALL_OW 44
3071: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3072: LD_VAR 0 3
3076: PPUSH
3077: LD_INT 12
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3087: LD_VAR 0 3
3091: PPUSH
3092: CALL_OW 87
// wait ( 0 0$1 ) ;
3096: LD_INT 35
3098: PPUSH
3099: CALL_OW 67
// DialogueOn ;
3103: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
3107: LD_VAR 0 3
3111: PPUSH
3112: LD_STRING D11a-FSol2-1
3114: PPUSH
3115: CALL_OW 88
// DialogueOff ;
3119: CALL_OW 7
// end ; end ; end_of_file
3123: LD_VAR 0 2
3127: RET
// export function PrepareRussian ; var i ; begin
3128: LD_INT 0
3130: PPUSH
3131: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 2
3140: PPUSH
3141: LD_EXP 27
3145: PPUSH
3146: LD_EXP 28
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: CALL 3718 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
3166: LD_INT 3
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: LD_INT 8
3174: PPUSH
3175: LD_EXP 27
3179: PPUSH
3180: LD_EXP 28
3184: PPUSH
3185: CALL_OW 12
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: LD_INT 4
3195: PPUSH
3196: CALL 3718 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
3200: LD_INT 3
3202: PPUSH
3203: LD_INT 3
3205: PPUSH
3206: LD_INT 67
3208: PPUSH
3209: LD_EXP 27
3213: PPUSH
3214: LD_EXP 28
3218: PPUSH
3219: CALL_OW 12
3223: PPUSH
3224: LD_INT 1
3226: PPUSH
3227: LD_INT 2
3229: PPUSH
3230: CALL 3718 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3234: LD_INT 3
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 21
3242: PPUSH
3243: LD_EXP 27
3247: PPUSH
3248: LD_EXP 28
3252: PPUSH
3253: CALL_OW 12
3257: PPUSH
3258: LD_INT 3
3260: PPUSH
3261: LD_INT 6
3263: PPUSH
3264: CALL 3718 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 17
3276: PPUSH
3277: LD_EXP 27
3281: PPUSH
3282: LD_EXP 28
3286: PPUSH
3287: CALL_OW 12
3291: PPUSH
3292: LD_INT 3
3294: PPUSH
3295: LD_INT 6
3297: PPUSH
3298: CALL 3718 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
3302: LD_INT 3
3304: PPUSH
3305: LD_INT 3
3307: PPUSH
3308: LD_INT 32
3310: PPUSH
3311: LD_EXP 27
3315: PPUSH
3316: LD_EXP 28
3320: PPUSH
3321: CALL_OW 12
3325: PPUSH
3326: LD_INT 4
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: CALL 3718 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 22
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: PUSH
3351: LD_INT 21
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 30
3363: PUSH
3364: LD_INT 32
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: PPUSH
3376: CALL_OW 69
3380: PUSH
3381: FOR_IN
3382: IFFALSE 3422
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
3384: LD_INT 3
3386: PPUSH
3387: LD_INT 3
3389: PPUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_EXP 27
3399: PPUSH
3400: LD_EXP 28
3404: PPUSH
3405: CALL_OW 12
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_INT 1
3415: PPUSH
3416: CALL 3718 0 6
3420: GO 3381
3422: POP
3423: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3424: LD_ADDR_VAR 0 2
3428: PUSH
3429: LD_INT 22
3431: PUSH
3432: LD_INT 3
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: PUSH
3439: LD_INT 21
3441: PUSH
3442: LD_INT 3
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 30
3451: PUSH
3452: LD_INT 31
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 69
3468: PUSH
3469: FOR_IN
3470: IFFALSE 3498
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
3472: LD_EXP 27
3476: PPUSH
3477: LD_EXP 28
3481: PPUSH
3482: CALL_OW 12
3486: PPUSH
3487: LD_VAR 0 2
3491: PPUSH
3492: CALL 3828 0 2
3496: GO 3469
3498: POP
3499: POP
// end ; end_of_file
3500: LD_VAR 0 1
3504: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3505: LD_INT 0
3507: PPUSH
3508: PPUSH
// if exist_mode then
3509: LD_VAR 0 2
3513: IFFALSE 3532
// begin unit := CreateCharacter ( ident ) ;
3515: LD_ADDR_VAR 0 4
3519: PUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: CALL_OW 34
3529: ST_TO_ADDR
// end else
3530: GO 3547
// begin unit := NewCharacter ( ident ) ;
3532: LD_ADDR_VAR 0 4
3536: PUSH
3537: LD_VAR 0 1
3541: PPUSH
3542: CALL_OW 25
3546: ST_TO_ADDR
// end ; result := unit ;
3547: LD_ADDR_VAR 0 3
3551: PUSH
3552: LD_VAR 0 4
3556: ST_TO_ADDR
// end ;
3557: LD_VAR 0 3
3561: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3562: LD_INT 0
3564: PPUSH
3565: PPUSH
3566: PPUSH
// rnd = rand ( 1 , characters ) ;
3567: LD_ADDR_VAR 0 6
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 1
3579: PPUSH
3580: CALL_OW 12
3584: ST_TO_ADDR
// for i = 1 to characters do
3585: LD_ADDR_VAR 0 5
3589: PUSH
3590: DOUBLE
3591: LD_INT 1
3593: DEC
3594: ST_TO_ADDR
3595: LD_VAR 0 1
3599: PUSH
3600: FOR_TO
3601: IFFALSE 3711
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3603: LD_VAR 0 5
3607: PUSH
3608: LD_VAR 0 6
3612: EQUAL
3613: PUSH
3614: LD_VAR 0 1
3618: PUSH
3619: LD_VAR 0 5
3623: ARRAY
3624: PPUSH
3625: CALL_OW 258
3629: PUSH
3630: LD_INT 1
3632: EQUAL
3633: AND
3634: IFFALSE 3656
// Say ( characters [ i ] , dialogMID ) ;
3636: LD_VAR 0 1
3640: PUSH
3641: LD_VAR 0 5
3645: ARRAY
3646: PPUSH
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3656: LD_VAR 0 5
3660: PUSH
3661: LD_VAR 0 6
3665: EQUAL
3666: PUSH
3667: LD_VAR 0 1
3671: PUSH
3672: LD_VAR 0 5
3676: ARRAY
3677: PPUSH
3678: CALL_OW 258
3682: PUSH
3683: LD_INT 2
3685: EQUAL
3686: AND
3687: IFFALSE 3709
// Say ( characters [ i ] , dialogFID ) ;
3689: LD_VAR 0 1
3693: PUSH
3694: LD_VAR 0 5
3698: ARRAY
3699: PPUSH
3700: LD_VAR 0 3
3704: PPUSH
3705: CALL_OW 88
// end ;
3709: GO 3600
3711: POP
3712: POP
// end ;
3713: LD_VAR 0 4
3717: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
// for i = 1 to count do
3724: LD_ADDR_VAR 0 8
3728: PUSH
3729: DOUBLE
3730: LD_INT 1
3732: DEC
3733: ST_TO_ADDR
3734: LD_VAR 0 6
3738: PUSH
3739: FOR_TO
3740: IFFALSE 3821
// begin uc_side = side ;
3742: LD_ADDR_OWVAR 20
3746: PUSH
3747: LD_VAR 0 1
3751: ST_TO_ADDR
// uc_nation = nation ;
3752: LD_ADDR_OWVAR 21
3756: PUSH
3757: LD_VAR 0 2
3761: ST_TO_ADDR
// hc_gallery =  ;
3762: LD_ADDR_OWVAR 33
3766: PUSH
3767: LD_STRING 
3769: ST_TO_ADDR
// hc_name =  ;
3770: LD_ADDR_OWVAR 26
3774: PUSH
3775: LD_STRING 
3777: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3778: LD_INT 0
3780: PPUSH
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 4
3790: PPUSH
3791: CALL_OW 380
// un = CreateHuman ;
3795: LD_ADDR_VAR 0 10
3799: PUSH
3800: CALL_OW 44
3804: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3805: LD_VAR 0 10
3809: PPUSH
3810: LD_VAR 0 3
3814: PPUSH
3815: CALL_OW 52
// end ;
3819: GO 3739
3821: POP
3822: POP
// end ;
3823: LD_VAR 0 7
3827: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
// uc_side := GetSide ( b ) ;
3833: LD_ADDR_OWVAR 20
3837: PUSH
3838: LD_VAR 0 2
3842: PPUSH
3843: CALL_OW 255
3847: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3848: LD_ADDR_OWVAR 21
3852: PUSH
3853: LD_VAR 0 2
3857: PPUSH
3858: CALL_OW 248
3862: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
3878: LD_ADDR_VAR 0 5
3882: PUSH
3883: LD_VAR 0 2
3887: PPUSH
3888: CALL_OW 254
3892: PUSH
3893: LD_INT 3
3895: MINUS
3896: ST_TO_ADDR
// if dir < 0 then
3897: LD_VAR 0 5
3901: PUSH
3902: LD_INT 0
3904: LESS
3905: IFFALSE 3921
// dir := 6 + dir ;
3907: LD_ADDR_VAR 0 5
3911: PUSH
3912: LD_INT 6
3914: PUSH
3915: LD_VAR 0 5
3919: PLUS
3920: ST_TO_ADDR
// un := CreateHuman ;
3921: LD_ADDR_VAR 0 4
3925: PUSH
3926: CALL_OW 44
3930: ST_TO_ADDR
// SetDir ( un , dir ) ;
3931: LD_VAR 0 4
3935: PPUSH
3936: LD_VAR 0 5
3940: PPUSH
3941: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 2
3954: PPUSH
3955: CALL_OW 52
// end ;
3959: LD_VAR 0 3
3963: RET
// export function PrepareDifficulty ; begin
3964: LD_INT 0
3966: PPUSH
// if Difficulty = 1 then
3967: LD_OWVAR 67
3971: PUSH
3972: LD_INT 1
3974: EQUAL
3975: IFFALSE 3993
// begin RuSolMinLevel = 2 ;
3977: LD_ADDR_EXP 27
3981: PUSH
3982: LD_INT 2
3984: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
3985: LD_ADDR_EXP 28
3989: PUSH
3990: LD_INT 5
3992: ST_TO_ADDR
// end ; if Difficulty = 2 then
3993: LD_OWVAR 67
3997: PUSH
3998: LD_INT 2
4000: EQUAL
4001: IFFALSE 4019
// begin RuSolMinLevel = 3 ;
4003: LD_ADDR_EXP 27
4007: PUSH
4008: LD_INT 3
4010: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4011: LD_ADDR_EXP 28
4015: PUSH
4016: LD_INT 6
4018: ST_TO_ADDR
// end ; if Difficulty = 3 then
4019: LD_OWVAR 67
4023: PUSH
4024: LD_INT 3
4026: EQUAL
4027: IFFALSE 4045
// begin RuSolMinLevel = 5 ;
4029: LD_ADDR_EXP 27
4033: PUSH
4034: LD_INT 5
4036: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4037: LD_ADDR_EXP 28
4041: PUSH
4042: LD_INT 6
4044: ST_TO_ADDR
// end ; end ;
4045: LD_VAR 0 1
4049: RET
// export function ShowQuery1 ; begin
4050: LD_INT 0
4052: PPUSH
// case query ( QKill ) of 1 :
4053: LD_STRING QKill
4055: PPUSH
4056: CALL_OW 97
4060: PUSH
4061: LD_INT 1
4063: DOUBLE
4064: EQUAL
4065: IFTRUE 4069
4067: GO 4080
4069: POP
// begin result = 1 ;
4070: LD_ADDR_VAR 0 1
4074: PUSH
4075: LD_INT 1
4077: ST_TO_ADDR
// end ; 2 :
4078: GO 4119
4080: LD_INT 2
4082: DOUBLE
4083: EQUAL
4084: IFTRUE 4088
4086: GO 4099
4088: POP
// begin result = 2 ;
4089: LD_ADDR_VAR 0 1
4093: PUSH
4094: LD_INT 2
4096: ST_TO_ADDR
// end ; 3 :
4097: GO 4119
4099: LD_INT 3
4101: DOUBLE
4102: EQUAL
4103: IFTRUE 4107
4105: GO 4118
4107: POP
// begin result = 3 ;
4108: LD_ADDR_VAR 0 1
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// end ; end ;
4116: GO 4119
4118: POP
// end ;
4119: LD_VAR 0 1
4123: RET
// export function ShowQuery2 ; begin
4124: LD_INT 0
4126: PPUSH
// case query ( QKill2 ) of 1 :
4127: LD_STRING QKill2
4129: PPUSH
4130: CALL_OW 97
4134: PUSH
4135: LD_INT 1
4137: DOUBLE
4138: EQUAL
4139: IFTRUE 4143
4141: GO 4154
4143: POP
// begin result = 1 ;
4144: LD_ADDR_VAR 0 1
4148: PUSH
4149: LD_INT 1
4151: ST_TO_ADDR
// end ; 2 :
4152: GO 4174
4154: LD_INT 2
4156: DOUBLE
4157: EQUAL
4158: IFTRUE 4162
4160: GO 4173
4162: POP
// begin result = 2 ;
4163: LD_ADDR_VAR 0 1
4167: PUSH
4168: LD_INT 2
4170: ST_TO_ADDR
// end ; end ;
4171: GO 4174
4173: POP
// end ;
4174: LD_VAR 0 1
4178: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4179: LD_INT 0
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
// for i = 1 to 72 do
4185: LD_ADDR_VAR 0 5
4189: PUSH
4190: DOUBLE
4191: LD_INT 1
4193: DEC
4194: ST_TO_ADDR
4195: LD_INT 72
4197: PUSH
4198: FOR_TO
4199: IFFALSE 4257
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4201: LD_VAR 0 5
4205: PPUSH
4206: LD_VAR 0 1
4210: PPUSH
4211: CALL_OW 321
4215: PUSH
4216: LD_INT 1
4218: EQUAL
4219: PUSH
4220: LD_VAR 0 5
4224: PPUSH
4225: LD_VAR 0 3
4229: PPUSH
4230: CALL_OW 482
4234: PUSH
4235: LD_INT 1
4237: EQUAL
4238: AND
4239: IFFALSE 4255
// AddComResearch ( lab , i ) ;
4241: LD_VAR 0 2
4245: PPUSH
4246: LD_VAR 0 5
4250: PPUSH
4251: CALL_OW 184
4255: GO 4198
4257: POP
4258: POP
// end ;
4259: LD_VAR 0 4
4263: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
4268: PPUSH
4269: PPUSH
4270: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4271: LD_ADDR_VAR 0 6
4275: PUSH
4276: LD_INT 22
4278: PUSH
4279: LD_VAR 0 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 25
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 24
4300: PUSH
4301: LD_INT 1000
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4318: LD_ADDR_VAR 0 4
4322: PUSH
4323: LD_INT 22
4325: PUSH
4326: LD_VAR 0 1
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: LD_INT 21
4337: PUSH
4338: LD_INT 3
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 3
4347: PUSH
4348: LD_INT 24
4350: PUSH
4351: LD_INT 1000
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: PPUSH
4370: CALL_OW 69
4374: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
4375: LD_VAR 0 4
4379: PUSH
4380: LD_INT 0
4382: GREATER
4383: PUSH
4384: LD_VAR 0 6
4388: PUSH
4389: LD_INT 0
4391: GREATER
4392: AND
4393: IFFALSE 4459
// begin for i in engineerOk_list do
4395: LD_ADDR_VAR 0 5
4399: PUSH
4400: LD_VAR 0 6
4404: PUSH
4405: FOR_IN
4406: IFFALSE 4457
// begin for j in buildings_list do
4408: LD_ADDR_VAR 0 7
4412: PUSH
4413: LD_VAR 0 4
4417: PUSH
4418: FOR_IN
4419: IFFALSE 4453
// begin AddComExitBuilding ( i ) ;
4421: LD_VAR 0 5
4425: PPUSH
4426: CALL_OW 182
// wait ( 0 0$1 ) ;
4430: LD_INT 35
4432: PPUSH
4433: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4437: LD_VAR 0 5
4441: PPUSH
4442: LD_VAR 0 7
4446: PPUSH
4447: CALL_OW 190
// end ;
4451: GO 4418
4453: POP
4454: POP
// end ;
4455: GO 4405
4457: POP
4458: POP
// end ; if buildings_list = 0 then
4459: LD_VAR 0 4
4463: PUSH
4464: LD_INT 0
4466: EQUAL
4467: IFFALSE 4500
// begin for i in engineerOK_list do
4469: LD_ADDR_VAR 0 5
4473: PUSH
4474: LD_VAR 0 6
4478: PUSH
4479: FOR_IN
4480: IFFALSE 4498
// begin ComEnterUnit ( i , building ) ;
4482: LD_VAR 0 5
4486: PPUSH
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 120
// end ;
4496: GO 4479
4498: POP
4499: POP
// end ; end ;
4500: LD_VAR 0 3
4504: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4505: LD_INT 0
4507: PPUSH
4508: PPUSH
4509: PPUSH
4510: PPUSH
4511: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4512: LD_ADDR_VAR 0 6
4516: PUSH
4517: LD_INT 22
4519: PUSH
4520: LD_VAR 0 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 25
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PPUSH
4543: CALL_OW 69
4547: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4548: LD_ADDR_VAR 0 9
4552: PUSH
4553: LD_VAR 0 3
4557: PPUSH
4558: LD_INT 22
4560: PUSH
4561: LD_VAR 0 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 21
4572: PUSH
4573: LD_INT 1
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 3
4582: PUSH
4583: LD_INT 24
4585: PUSH
4586: LD_INT 750
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 70
4606: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
4607: LD_VAR 0 9
4611: PUSH
4612: LD_INT 0
4614: GREATER
4615: PUSH
4616: LD_VAR 0 6
4620: PUSH
4621: LD_INT 0
4623: GREATER
4624: AND
4625: IFFALSE 4752
// begin for i = 1 to damageUnits do
4627: LD_ADDR_VAR 0 7
4631: PUSH
4632: DOUBLE
4633: LD_INT 1
4635: DEC
4636: ST_TO_ADDR
4637: LD_VAR 0 9
4641: PUSH
4642: FOR_TO
4643: IFFALSE 4667
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4645: LD_VAR 0 9
4649: PUSH
4650: LD_VAR 0 7
4654: ARRAY
4655: PPUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: CALL_OW 113
4665: GO 4642
4667: POP
4668: POP
// for i in sci_list do
4669: LD_ADDR_VAR 0 7
4673: PUSH
4674: LD_VAR 0 6
4678: PUSH
4679: FOR_IN
4680: IFFALSE 4748
// begin ComExitBuilding ( i ) ;
4682: LD_VAR 0 7
4686: PPUSH
4687: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4691: LD_ADDR_VAR 0 8
4695: PUSH
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_INT 22
4703: PUSH
4704: LD_VAR 0 1
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PPUSH
4713: CALL_OW 70
4717: PUSH
4718: FOR_IN
4719: IFFALSE 4744
// begin AddComHeal ( i , j ) ;
4721: LD_VAR 0 7
4725: PPUSH
4726: LD_VAR 0 8
4730: PPUSH
4731: CALL_OW 188
// wait ( 1 1$0 ) ;
4735: LD_INT 2100
4737: PPUSH
4738: CALL_OW 67
// end ;
4742: GO 4718
4744: POP
4745: POP
// end ;
4746: GO 4679
4748: POP
4749: POP
// end else
4750: GO 4766
// begin AddComEnterUnit ( sci_list , build ) ;
4752: LD_VAR 0 6
4756: PPUSH
4757: LD_VAR 0 4
4761: PPUSH
4762: CALL_OW 180
// end ; end ;
4766: LD_VAR 0 5
4770: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
4779: LD_INT 22
4781: PUSH
4782: LD_VAR 0 1
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 21
4793: PUSH
4794: LD_INT 2
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PPUSH
4805: CALL_OW 69
4809: PUSH
4810: LD_VAR 0 3
4814: LESSEQUAL
4815: IFFALSE 4882
// for i = 1 to vehCount do
4817: LD_ADDR_VAR 0 10
4821: PUSH
4822: DOUBLE
4823: LD_INT 1
4825: DEC
4826: ST_TO_ADDR
4827: LD_VAR 0 3
4831: PUSH
4832: FOR_TO
4833: IFFALSE 4880
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
4835: LD_VAR 0 2
4839: PPUSH
4840: LD_VAR 0 8
4844: PPUSH
4845: LD_VAR 0 6
4849: PPUSH
4850: LD_VAR 0 7
4854: PPUSH
4855: LD_VAR 0 5
4859: PUSH
4860: LD_INT 1
4862: PPUSH
4863: LD_VAR 0 5
4867: PPUSH
4868: CALL_OW 12
4872: ARRAY
4873: PPUSH
4874: CALL_OW 185
4878: GO 4832
4880: POP
4881: POP
// repeat wait ( 0 0$1 ) ;
4882: LD_INT 35
4884: PPUSH
4885: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
4889: LD_INT 22
4891: PUSH
4892: LD_VAR 0 1
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 21
4903: PUSH
4904: LD_INT 2
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 24
4913: PUSH
4914: LD_INT 250
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: PPUSH
4926: CALL_OW 69
4930: PUSH
4931: LD_VAR 0 3
4935: GREATEREQUAL
4936: IFFALSE 4882
// repeat begin wait ( 0 0$1 ) ;
4938: LD_INT 35
4940: PPUSH
4941: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
4945: LD_ADDR_VAR 0 10
4949: PUSH
4950: LD_INT 22
4952: PUSH
4953: LD_VAR 0 1
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 21
4964: PUSH
4965: LD_INT 2
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 24
4974: PUSH
4975: LD_INT 651
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: PUSH
4992: FOR_IN
4993: IFFALSE 5169
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
4995: LD_ADDR_VAR 0 13
4999: PUSH
5000: LD_INT 22
5002: PUSH
5003: LD_VAR 0 4
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL_OW 69
5016: PPUSH
5017: LD_VAR 0 10
5021: PPUSH
5022: CALL_OW 74
5026: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5027: LD_ADDR_VAR 0 14
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_VAR 0 4
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 2
5046: PUSH
5047: LD_INT 59
5049: PUSH
5050: EMPTY
5051: LIST
5052: PUSH
5053: LD_INT 21
5055: PUSH
5056: LD_INT 1
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 21
5065: PUSH
5066: LD_INT 2
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: EMPTY
5084: LIST
5085: PPUSH
5086: CALL_OW 69
5090: PPUSH
5091: LD_VAR 0 10
5095: PPUSH
5096: CALL_OW 74
5100: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5101: LD_VAR 0 10
5105: PPUSH
5106: LD_VAR 0 13
5110: PPUSH
5111: CALL_OW 296
5115: PUSH
5116: LD_INT 8
5118: PLUS
5119: PUSH
5120: LD_VAR 0 10
5124: PPUSH
5125: LD_VAR 0 14
5129: PPUSH
5130: CALL_OW 296
5134: LESS
5135: IFFALSE 5153
// begin ComAttackUnit ( i , target1 ) ;
5137: LD_VAR 0 10
5141: PPUSH
5142: LD_VAR 0 13
5146: PPUSH
5147: CALL_OW 115
// end else
5151: GO 5167
// begin ComAttackUnit ( i , target2 ) ;
5153: LD_VAR 0 10
5157: PPUSH
5158: LD_VAR 0 14
5162: PPUSH
5163: CALL_OW 115
// end ; end ;
5167: GO 4992
5169: POP
5170: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
5171: LD_INT 22
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 21
5183: PUSH
5184: LD_INT 2
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 34
5196: PUSH
5197: LD_INT 51
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: PPUSH
5213: CALL_OW 69
5217: PUSH
5218: LD_INT 0
5220: EQUAL
5221: IFFALSE 4938
// end ;
5223: LD_VAR 0 9
5227: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
5228: LD_INT 0
5230: PPUSH
5231: PPUSH
5232: PPUSH
5233: PPUSH
// enable ;
5234: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
5235: LD_ADDR_VAR 0 7
5239: PUSH
5240: LD_VAR 0 3
5244: PPUSH
5245: CALL_OW 435
5249: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
5250: LD_ADDR_VAR 0 6
5254: PUSH
5255: LD_INT 22
5257: PUSH
5258: LD_VAR 0 1
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 34
5269: PUSH
5270: LD_VAR 0 2
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 69
5287: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
5288: LD_VAR 0 6
5292: PUSH
5293: LD_INT 0
5295: GREATER
5296: PUSH
5297: LD_VAR 0 3
5301: PPUSH
5302: CALL_OW 435
5306: AND
5307: PUSH
5308: LD_VAR 0 7
5312: PUSH
5313: LD_INT 0
5315: GREATER
5316: AND
5317: IFFALSE 5368
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
5319: LD_VAR 0 6
5323: PUSH
5324: LD_INT 1
5326: ARRAY
5327: PPUSH
5328: LD_VAR 0 7
5332: PUSH
5333: LD_INT 1
5335: ARRAY
5336: PPUSH
5337: LD_VAR 0 7
5341: PUSH
5342: LD_INT 2
5344: ARRAY
5345: PPUSH
5346: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
5350: LD_VAR 0 6
5354: PUSH
5355: LD_INT 1
5357: ARRAY
5358: PPUSH
5359: LD_INT 100
5361: PPUSH
5362: CALL_OW 240
// end else
5366: GO 5399
// ComGet ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
5368: LD_VAR 0 6
5372: PUSH
5373: LD_INT 1
5375: ARRAY
5376: PPUSH
5377: LD_VAR 0 7
5381: PUSH
5382: LD_INT 1
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 7
5390: PUSH
5391: LD_INT 2
5393: ARRAY
5394: PPUSH
5395: CALL_OW 160
// clear_crates := false ;
5399: LD_ADDR_VAR 0 5
5403: PUSH
5404: LD_INT 0
5406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5407: LD_INT 35
5409: PPUSH
5410: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
5414: LD_VAR 0 6
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: CALL_OW 315
5427: NOT
5428: PUSH
5429: LD_VAR 0 5
5433: OR
5434: IFFALSE 5407
// end ;
5436: LD_VAR 0 4
5440: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
5441: LD_INT 0
5443: PPUSH
5444: PPUSH
5445: PPUSH
5446: PPUSH
5447: PPUSH
5448: PPUSH
5449: PPUSH
5450: PPUSH
5451: PPUSH
5452: PPUSH
5453: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5454: LD_ADDR_VAR 0 9
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_VAR 0 1
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PUSH
5471: LD_INT 21
5473: PUSH
5474: LD_INT 2
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 24
5483: PUSH
5484: LD_INT 660
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 3
5493: PUSH
5494: LD_INT 58
5496: PUSH
5497: EMPTY
5498: LIST
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 3
5506: PUSH
5507: LD_INT 34
5509: PUSH
5510: LD_INT 53
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PPUSH
5528: CALL_OW 69
5532: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
5533: LD_ADDR_VAR 0 10
5537: PUSH
5538: LD_INT 22
5540: PUSH
5541: LD_VAR 0 1
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: LD_INT 21
5552: PUSH
5553: LD_INT 2
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 3
5562: PUSH
5563: LD_INT 24
5565: PUSH
5566: LD_INT 660
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: PPUSH
5582: CALL_OW 69
5586: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5587: LD_ADDR_VAR 0 11
5591: PUSH
5592: LD_VAR 0 2
5596: PPUSH
5597: LD_INT 22
5599: PUSH
5600: LD_VAR 0 1
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 21
5611: PUSH
5612: LD_INT 2
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 3
5621: PUSH
5622: LD_INT 24
5624: PUSH
5625: LD_INT 1000
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: EMPTY
5633: LIST
5634: LIST
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 70
5645: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5646: LD_ADDR_VAR 0 12
5650: PUSH
5651: LD_VAR 0 2
5655: PPUSH
5656: LD_INT 22
5658: PUSH
5659: LD_VAR 0 1
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: PUSH
5668: LD_INT 21
5670: PUSH
5671: LD_INT 2
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 1000
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 58
5690: PUSH
5691: EMPTY
5692: LIST
5693: PUSH
5694: LD_INT 3
5696: PUSH
5697: LD_INT 34
5699: PUSH
5700: LD_INT 53
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: PPUSH
5718: CALL_OW 70
5722: ST_TO_ADDR
// mechanicInside_list = [ ] ;
5723: LD_ADDR_VAR 0 13
5727: PUSH
5728: EMPTY
5729: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
5730: LD_ADDR_VAR 0 14
5734: PUSH
5735: LD_VAR 0 2
5739: PPUSH
5740: LD_INT 22
5742: PUSH
5743: LD_VAR 0 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 25
5754: PUSH
5755: LD_INT 3
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 70
5770: ST_TO_ADDR
// if damageVehicle_list > 0 then
5771: LD_VAR 0 10
5775: PUSH
5776: LD_INT 0
5778: GREATER
5779: IFFALSE 5817
// begin for i in damageVehicle_list do
5781: LD_ADDR_VAR 0 7
5785: PUSH
5786: LD_VAR 0 10
5790: PUSH
5791: FOR_IN
5792: IFFALSE 5815
// begin ComMoveXY ( i , repX , repY ) ;
5794: LD_VAR 0 7
5798: PPUSH
5799: LD_VAR 0 3
5803: PPUSH
5804: LD_VAR 0 4
5808: PPUSH
5809: CALL_OW 111
// end ;
5813: GO 5791
5815: POP
5816: POP
// end ; if vehicleNeedRepair_list > 0 then
5817: LD_VAR 0 11
5821: PUSH
5822: LD_INT 0
5824: GREATER
5825: IFFALSE 5912
// begin for i in vehicleNeedRepair_list do
5827: LD_ADDR_VAR 0 7
5831: PUSH
5832: LD_VAR 0 11
5836: PUSH
5837: FOR_IN
5838: IFFALSE 5910
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
5840: LD_ADDR_VAR 0 13
5844: PUSH
5845: LD_VAR 0 13
5849: PUSH
5850: LD_VAR 0 7
5854: PPUSH
5855: CALL_OW 313
5859: ADD
5860: ST_TO_ADDR
// for j in mechanicInside_list do
5861: LD_ADDR_VAR 0 8
5865: PUSH
5866: LD_VAR 0 13
5870: PUSH
5871: FOR_IN
5872: IFFALSE 5906
// begin ComExitVehicle ( i ) ;
5874: LD_VAR 0 7
5878: PPUSH
5879: CALL_OW 121
// wait ( 0 0$1 ) ;
5883: LD_INT 35
5885: PPUSH
5886: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
5890: LD_VAR 0 7
5894: PPUSH
5895: LD_VAR 0 8
5899: PPUSH
5900: CALL_OW 129
// end ;
5904: GO 5871
5906: POP
5907: POP
// end ;
5908: GO 5837
5910: POP
5911: POP
// end ; if vehicleDontNeedRepair_list > 0 then
5912: LD_VAR 0 12
5916: PUSH
5917: LD_INT 0
5919: GREATER
5920: IFFALSE 5960
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
5922: LD_VAR 0 14
5926: PUSH
5927: LD_INT 1
5929: ARRAY
5930: PPUSH
5931: LD_VAR 0 12
5935: PUSH
5936: LD_INT 1
5938: ARRAY
5939: PPUSH
5940: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
5944: LD_VAR 0 12
5948: PUSH
5949: LD_INT 1
5951: ARRAY
5952: PPUSH
5953: LD_INT 100
5955: PPUSH
5956: CALL_OW 240
// end ; if vehicleOK_list > 0 then
5960: LD_VAR 0 9
5964: PUSH
5965: LD_INT 0
5967: GREATER
5968: IFFALSE 6159
// begin for i in vehicleOK_list do
5970: LD_ADDR_VAR 0 7
5974: PUSH
5975: LD_VAR 0 9
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6157
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5983: LD_ADDR_VAR 0 15
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_VAR 0 5
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PPUSH
6000: CALL_OW 69
6004: PPUSH
6005: LD_VAR 0 7
6009: PPUSH
6010: CALL_OW 74
6014: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6015: LD_ADDR_VAR 0 16
6019: PUSH
6020: LD_INT 22
6022: PUSH
6023: LD_VAR 0 5
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 2
6034: PUSH
6035: LD_INT 59
6037: PUSH
6038: EMPTY
6039: LIST
6040: PUSH
6041: LD_INT 21
6043: PUSH
6044: LD_INT 1
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PUSH
6051: LD_INT 21
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: EMPTY
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: PPUSH
6079: LD_VAR 0 7
6083: PPUSH
6084: CALL_OW 74
6088: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6089: LD_VAR 0 7
6093: PPUSH
6094: LD_VAR 0 15
6098: PPUSH
6099: CALL_OW 296
6103: PUSH
6104: LD_INT 8
6106: PLUS
6107: PUSH
6108: LD_VAR 0 7
6112: PPUSH
6113: LD_VAR 0 16
6117: PPUSH
6118: CALL_OW 296
6122: LESS
6123: IFFALSE 6141
// begin ComAttackUnit ( i , target1 ) ;
6125: LD_VAR 0 7
6129: PPUSH
6130: LD_VAR 0 15
6134: PPUSH
6135: CALL_OW 115
// end else
6139: GO 6155
// begin ComAttackUnit ( i , target2 ) ;
6141: LD_VAR 0 7
6145: PPUSH
6146: LD_VAR 0 16
6150: PPUSH
6151: CALL_OW 115
// end ; end ;
6155: GO 5980
6157: POP
6158: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
6159: LD_ADDR_VAR 0 7
6163: PUSH
6164: LD_VAR 0 2
6168: PPUSH
6169: LD_INT 22
6171: PUSH
6172: LD_VAR 0 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 70
6199: NOT
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6225
// ComMoveXY ( i , repX , repY ) ;
6204: LD_VAR 0 7
6208: PPUSH
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_VAR 0 4
6218: PPUSH
6219: CALL_OW 111
6223: GO 6201
6225: POP
6226: POP
// end ;
6227: LD_VAR 0 6
6231: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
6232: LD_INT 0
6234: PPUSH
6235: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
6236: LD_INT 22
6238: PUSH
6239: LD_VAR 0 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PUSH
6267: LD_INT 0
6269: GREATER
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_VAR 0 1
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: LD_INT 24
6298: PUSH
6299: LD_INT 1000
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL_OW 69
6319: PUSH
6320: LD_INT 0
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_VAR 0 2
6329: PUSH
6330: LD_INT 0
6332: GREATER
6333: AND
6334: IFFALSE 6433
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
6336: LD_ADDR_VAR 0 4
6340: PUSH
6341: LD_INT 22
6343: PUSH
6344: LD_VAR 0 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 25
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PPUSH
6367: CALL_OW 69
6371: PUSH
6372: FOR_IN
6373: IFFALSE 6431
// begin AddComExitBuilding ( i ) ;
6375: LD_VAR 0 4
6379: PPUSH
6380: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
6384: LD_VAR 0 4
6388: PPUSH
6389: LD_VAR 0 2
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_VAR 0 2
6402: PUSH
6403: LD_INT 2
6405: ARRAY
6406: PPUSH
6407: LD_VAR 0 2
6411: PUSH
6412: LD_INT 3
6414: ARRAY
6415: PPUSH
6416: LD_VAR 0 2
6420: PUSH
6421: LD_INT 4
6423: ARRAY
6424: PPUSH
6425: CALL_OW 205
// end ;
6429: GO 6372
6431: POP
6432: POP
// end ; end ;
6433: LD_VAR 0 3
6437: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
6443: PPUSH
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
// for i = 1 to medicCount do
6451: LD_ADDR_VAR 0 14
6455: PUSH
6456: DOUBLE
6457: LD_INT 1
6459: DEC
6460: ST_TO_ADDR
6461: LD_VAR 0 7
6465: PUSH
6466: FOR_TO
6467: IFFALSE 6549
// begin uc_side = side ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_VAR 0 1
6478: ST_TO_ADDR
// uc_nation = nation ;
6479: LD_ADDR_OWVAR 21
6483: PUSH
6484: LD_VAR 0 2
6488: ST_TO_ADDR
// hc_name =  ;
6489: LD_ADDR_OWVAR 26
6493: PUSH
6494: LD_STRING 
6496: ST_TO_ADDR
// hc_gallery =  ;
6497: LD_ADDR_OWVAR 33
6501: PUSH
6502: LD_STRING 
6504: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6505: LD_INT 0
6507: PPUSH
6508: LD_INT 4
6510: PPUSH
6511: LD_VAR 0 8
6515: PPUSH
6516: CALL_OW 380
// un = CreateHuman ;
6520: LD_ADDR_VAR 0 16
6524: PUSH
6525: CALL_OW 44
6529: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6530: LD_VAR 0 16
6534: PPUSH
6535: LD_VAR 0 9
6539: PPUSH
6540: LD_INT 0
6542: PPUSH
6543: CALL_OW 49
// end ;
6547: GO 6466
6549: POP
6550: POP
// for i = 1 to soldierCount do
6551: LD_ADDR_VAR 0 14
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_VAR 0 3
6565: PUSH
6566: FOR_TO
6567: IFFALSE 6649
// begin uc_side = side ;
6569: LD_ADDR_OWVAR 20
6573: PUSH
6574: LD_VAR 0 1
6578: ST_TO_ADDR
// uc_nation = nation ;
6579: LD_ADDR_OWVAR 21
6583: PUSH
6584: LD_VAR 0 2
6588: ST_TO_ADDR
// hc_name =  ;
6589: LD_ADDR_OWVAR 26
6593: PUSH
6594: LD_STRING 
6596: ST_TO_ADDR
// hc_gallery =  ;
6597: LD_ADDR_OWVAR 33
6601: PUSH
6602: LD_STRING 
6604: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6605: LD_INT 0
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_VAR 0 8
6615: PPUSH
6616: CALL_OW 380
// un = CreateHuman ;
6620: LD_ADDR_VAR 0 16
6624: PUSH
6625: CALL_OW 44
6629: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6630: LD_VAR 0 16
6634: PPUSH
6635: LD_VAR 0 9
6639: PPUSH
6640: LD_INT 0
6642: PPUSH
6643: CALL_OW 49
// end ;
6647: GO 6566
6649: POP
6650: POP
// for i = 1 to sniperCount do
6651: LD_ADDR_VAR 0 14
6655: PUSH
6656: DOUBLE
6657: LD_INT 1
6659: DEC
6660: ST_TO_ADDR
6661: LD_VAR 0 4
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6749
// begin uc_side = side ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_VAR 0 1
6678: ST_TO_ADDR
// uc_nation = nation ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_VAR 0 2
6688: ST_TO_ADDR
// hc_name =  ;
6689: LD_ADDR_OWVAR 26
6693: PUSH
6694: LD_STRING 
6696: ST_TO_ADDR
// hc_gallery =  ;
6697: LD_ADDR_OWVAR 33
6701: PUSH
6702: LD_STRING 
6704: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6705: LD_INT 0
6707: PPUSH
6708: LD_INT 5
6710: PPUSH
6711: LD_VAR 0 8
6715: PPUSH
6716: CALL_OW 380
// un = CreateHuman ;
6720: LD_ADDR_VAR 0 16
6724: PUSH
6725: CALL_OW 44
6729: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6730: LD_VAR 0 16
6734: PPUSH
6735: LD_VAR 0 9
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 49
// end ;
6747: GO 6666
6749: POP
6750: POP
// for i = 1 to bazookCount do
6751: LD_ADDR_VAR 0 14
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_VAR 0 5
6765: PUSH
6766: FOR_TO
6767: IFFALSE 6849
// begin uc_side = side ;
6769: LD_ADDR_OWVAR 20
6773: PUSH
6774: LD_VAR 0 1
6778: ST_TO_ADDR
// uc_nation = nation ;
6779: LD_ADDR_OWVAR 21
6783: PUSH
6784: LD_VAR 0 2
6788: ST_TO_ADDR
// hc_name =  ;
6789: LD_ADDR_OWVAR 26
6793: PUSH
6794: LD_STRING 
6796: ST_TO_ADDR
// hc_gallery =  ;
6797: LD_ADDR_OWVAR 33
6801: PUSH
6802: LD_STRING 
6804: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6805: LD_INT 0
6807: PPUSH
6808: LD_INT 9
6810: PPUSH
6811: LD_VAR 0 8
6815: PPUSH
6816: CALL_OW 380
// un = CreateHuman ;
6820: LD_ADDR_VAR 0 16
6824: PUSH
6825: CALL_OW 44
6829: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6830: LD_VAR 0 16
6834: PPUSH
6835: LD_VAR 0 9
6839: PPUSH
6840: LD_INT 0
6842: PPUSH
6843: CALL_OW 49
// end ;
6847: GO 6766
6849: POP
6850: POP
// for i = 1 to mortalCount do
6851: LD_ADDR_VAR 0 14
6855: PUSH
6856: DOUBLE
6857: LD_INT 1
6859: DEC
6860: ST_TO_ADDR
6861: LD_VAR 0 6
6865: PUSH
6866: FOR_TO
6867: IFFALSE 6949
// begin uc_side = side ;
6869: LD_ADDR_OWVAR 20
6873: PUSH
6874: LD_VAR 0 1
6878: ST_TO_ADDR
// uc_nation = nation ;
6879: LD_ADDR_OWVAR 21
6883: PUSH
6884: LD_VAR 0 2
6888: ST_TO_ADDR
// hc_name =  ;
6889: LD_ADDR_OWVAR 26
6893: PUSH
6894: LD_STRING 
6896: ST_TO_ADDR
// hc_gallery =  ;
6897: LD_ADDR_OWVAR 33
6901: PUSH
6902: LD_STRING 
6904: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6905: LD_INT 0
6907: PPUSH
6908: LD_INT 8
6910: PPUSH
6911: LD_VAR 0 8
6915: PPUSH
6916: CALL_OW 380
// un = CreateHuman ;
6920: LD_ADDR_VAR 0 16
6924: PUSH
6925: CALL_OW 44
6929: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6930: LD_VAR 0 16
6934: PPUSH
6935: LD_VAR 0 9
6939: PPUSH
6940: LD_INT 0
6942: PPUSH
6943: CALL_OW 49
// end ;
6947: GO 6866
6949: POP
6950: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6951: LD_ADDR_VAR 0 19
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_VAR 0 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 2
6970: PUSH
6971: LD_INT 25
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 25
6983: PUSH
6984: LD_INT 5
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 8
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 9
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 69
7026: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7027: LD_ADDR_VAR 0 18
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_VAR 0 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 25
7046: PUSH
7047: LD_INT 4
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: ST_TO_ADDR
// for i in medic_list do
7063: LD_ADDR_VAR 0 14
7067: PUSH
7068: LD_VAR 0 18
7072: PUSH
7073: FOR_IN
7074: IFFALSE 7092
// ComMoveToArea ( i , healArea ) ;
7076: LD_VAR 0 14
7080: PPUSH
7081: LD_VAR 0 10
7085: PPUSH
7086: CALL_OW 113
7090: GO 7073
7092: POP
7093: POP
// if strategy = 1 then
7094: LD_VAR 0 12
7098: PUSH
7099: LD_INT 1
7101: EQUAL
7102: IFFALSE 7807
// begin repeat wait ( 0 0$3 ) ;
7104: LD_INT 105
7106: PPUSH
7107: CALL_OW 67
// for i in soldiersOK_list do
7111: LD_ADDR_VAR 0 14
7115: PUSH
7116: LD_VAR 0 19
7120: PUSH
7121: FOR_IN
7122: IFFALSE 7156
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
7124: LD_VAR 0 14
7128: PPUSH
7129: LD_INT 80
7131: PPUSH
7132: LD_INT 109
7134: PPUSH
7135: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
7139: LD_VAR 0 14
7143: PPUSH
7144: LD_INT 39
7146: PPUSH
7147: LD_INT 49
7149: PPUSH
7150: CALL_OW 174
// end ;
7154: GO 7121
7156: POP
7157: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
7158: LD_INT 15
7160: PPUSH
7161: LD_INT 22
7163: PUSH
7164: LD_VAR 0 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PPUSH
7173: CALL_OW 70
7177: PUSH
7178: LD_INT 0
7180: GREATER
7181: IFFALSE 7104
// repeat wait ( 0 0$1 ) ;
7183: LD_INT 35
7185: PPUSH
7186: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7190: LD_ADDR_VAR 0 17
7194: PUSH
7195: LD_INT 22
7197: PUSH
7198: LD_VAR 0 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: LD_INT 3
7212: PUSH
7213: LD_INT 24
7215: PUSH
7216: LD_INT 550
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 250
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 69
7250: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7251: LD_ADDR_VAR 0 19
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_VAR 0 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 25
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 5
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 25
7293: PUSH
7294: LD_INT 8
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 25
7303: PUSH
7304: LD_INT 9
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 24
7320: PUSH
7321: LD_INT 1000
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 69
7337: ST_TO_ADDR
// if medicCount > 0 then
7338: LD_VAR 0 7
7342: PUSH
7343: LD_INT 0
7345: GREATER
7346: IFFALSE 7420
// begin if damageUnit_list > 0 then
7348: LD_VAR 0 17
7352: PUSH
7353: LD_INT 0
7355: GREATER
7356: IFFALSE 7420
// begin for i in damageUnit_list do
7358: LD_ADDR_VAR 0 14
7362: PUSH
7363: LD_VAR 0 17
7367: PUSH
7368: FOR_IN
7369: IFFALSE 7418
// begin ComMoveToArea ( i , healArea ) ;
7371: LD_VAR 0 14
7375: PPUSH
7376: LD_VAR 0 10
7380: PPUSH
7381: CALL_OW 113
// for j in medic_list do
7385: LD_ADDR_VAR 0 15
7389: PUSH
7390: LD_VAR 0 18
7394: PUSH
7395: FOR_IN
7396: IFFALSE 7414
// AddComHeal ( j , i ) ;
7398: LD_VAR 0 15
7402: PPUSH
7403: LD_VAR 0 14
7407: PPUSH
7408: CALL_OW 188
7412: GO 7395
7414: POP
7415: POP
// end ;
7416: GO 7368
7418: POP
7419: POP
// end ; end ; for i in soldiersOK_list do
7420: LD_ADDR_VAR 0 14
7424: PUSH
7425: LD_VAR 0 19
7429: PUSH
7430: FOR_IN
7431: IFFALSE 7607
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7433: LD_ADDR_VAR 0 22
7437: PUSH
7438: LD_INT 22
7440: PUSH
7441: LD_VAR 0 11
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: PPUSH
7455: LD_VAR 0 14
7459: PPUSH
7460: CALL_OW 74
7464: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7465: LD_ADDR_VAR 0 23
7469: PUSH
7470: LD_INT 22
7472: PUSH
7473: LD_VAR 0 11
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: LD_INT 59
7487: PUSH
7488: EMPTY
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 21
7503: PUSH
7504: LD_INT 2
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: PPUSH
7524: CALL_OW 69
7528: PPUSH
7529: LD_VAR 0 14
7533: PPUSH
7534: CALL_OW 74
7538: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7539: LD_VAR 0 14
7543: PPUSH
7544: LD_VAR 0 22
7548: PPUSH
7549: CALL_OW 296
7553: PUSH
7554: LD_INT 8
7556: PLUS
7557: PUSH
7558: LD_VAR 0 14
7562: PPUSH
7563: LD_VAR 0 23
7567: PPUSH
7568: CALL_OW 296
7572: LESS
7573: IFFALSE 7591
// begin ComAttackUnit ( i , target1 ) ;
7575: LD_VAR 0 14
7579: PPUSH
7580: LD_VAR 0 22
7584: PPUSH
7585: CALL_OW 115
// end else
7589: GO 7605
// begin ComAttackUnit ( i , target2 ) ;
7591: LD_VAR 0 14
7595: PPUSH
7596: LD_VAR 0 23
7600: PPUSH
7601: CALL_OW 115
// end ; end ;
7605: GO 7430
7607: POP
7608: POP
// for i in soldiersOK_list do
7609: LD_ADDR_VAR 0 14
7613: PUSH
7614: LD_VAR 0 19
7618: PUSH
7619: FOR_IN
7620: IFFALSE 7796
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7622: LD_ADDR_VAR 0 22
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_VAR 0 11
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PPUSH
7639: CALL_OW 69
7643: PPUSH
7644: LD_VAR 0 14
7648: PPUSH
7649: CALL_OW 74
7653: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7654: LD_ADDR_VAR 0 23
7658: PUSH
7659: LD_INT 22
7661: PUSH
7662: LD_VAR 0 11
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: LD_INT 59
7676: PUSH
7677: EMPTY
7678: LIST
7679: PUSH
7680: LD_INT 21
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 21
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: PPUSH
7718: LD_VAR 0 14
7722: PPUSH
7723: CALL_OW 74
7727: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7728: LD_VAR 0 14
7732: PPUSH
7733: LD_VAR 0 22
7737: PPUSH
7738: CALL_OW 296
7742: PUSH
7743: LD_INT 8
7745: PLUS
7746: PUSH
7747: LD_VAR 0 14
7751: PPUSH
7752: LD_VAR 0 23
7756: PPUSH
7757: CALL_OW 296
7761: LESS
7762: IFFALSE 7780
// begin ComAttackUnit ( i , target1 ) ;
7764: LD_VAR 0 14
7768: PPUSH
7769: LD_VAR 0 22
7773: PPUSH
7774: CALL_OW 115
// end else
7778: GO 7794
// begin ComAttackUnit ( i , target2 ) ;
7780: LD_VAR 0 14
7784: PPUSH
7785: LD_VAR 0 23
7789: PPUSH
7790: CALL_OW 115
// end ; end ;
7794: GO 7619
7796: POP
7797: POP
// until soldiersOK_list = [ ] ;
7798: LD_VAR 0 19
7802: PUSH
7803: EMPTY
7804: EQUAL
7805: IFFALSE 7183
// end ; if strategy = 2 then
7807: LD_VAR 0 12
7811: PUSH
7812: LD_INT 2
7814: EQUAL
7815: IFFALSE 8520
// begin repeat wait ( 0 0$1 ) ;
7817: LD_INT 35
7819: PPUSH
7820: CALL_OW 67
// for i in soldiersOK_list do
7824: LD_ADDR_VAR 0 14
7828: PUSH
7829: LD_VAR 0 19
7833: PUSH
7834: FOR_IN
7835: IFFALSE 7869
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
7837: LD_VAR 0 14
7841: PPUSH
7842: LD_INT 117
7844: PPUSH
7845: LD_INT 97
7847: PPUSH
7848: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
7852: LD_VAR 0 14
7856: PPUSH
7857: LD_INT 94
7859: PPUSH
7860: LD_INT 50
7862: PPUSH
7863: CALL_OW 174
// end ;
7867: GO 7834
7869: POP
7870: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
7871: LD_INT 16
7873: PPUSH
7874: LD_INT 22
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 70
7890: PUSH
7891: LD_INT 0
7893: GREATER
7894: IFFALSE 7817
// repeat wait ( 0 0$3 ) ;
7896: LD_INT 105
7898: PPUSH
7899: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7903: LD_ADDR_VAR 0 17
7907: PUSH
7908: LD_INT 22
7910: PUSH
7911: LD_VAR 0 1
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: LD_INT 3
7925: PUSH
7926: LD_INT 24
7928: PUSH
7929: LD_INT 550
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 24
7942: PUSH
7943: LD_INT 250
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PPUSH
7959: CALL_OW 69
7963: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7964: LD_ADDR_VAR 0 19
7968: PUSH
7969: LD_INT 22
7971: PUSH
7972: LD_VAR 0 1
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: LD_INT 25
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 25
7996: PUSH
7997: LD_INT 5
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 25
8006: PUSH
8007: LD_INT 8
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 25
8016: PUSH
8017: LD_INT 9
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 24
8033: PUSH
8034: LD_INT 1000
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 69
8050: ST_TO_ADDR
// if medicCount > 0 then
8051: LD_VAR 0 7
8055: PUSH
8056: LD_INT 0
8058: GREATER
8059: IFFALSE 8133
// begin if damageUnit_list > 0 then
8061: LD_VAR 0 17
8065: PUSH
8066: LD_INT 0
8068: GREATER
8069: IFFALSE 8133
// begin for i in damageUnit_list do
8071: LD_ADDR_VAR 0 14
8075: PUSH
8076: LD_VAR 0 17
8080: PUSH
8081: FOR_IN
8082: IFFALSE 8131
// begin ComMoveToArea ( i , healArea ) ;
8084: LD_VAR 0 14
8088: PPUSH
8089: LD_VAR 0 10
8093: PPUSH
8094: CALL_OW 113
// for j in medic_list do
8098: LD_ADDR_VAR 0 15
8102: PUSH
8103: LD_VAR 0 18
8107: PUSH
8108: FOR_IN
8109: IFFALSE 8127
// AddComHeal ( j , i ) ;
8111: LD_VAR 0 15
8115: PPUSH
8116: LD_VAR 0 14
8120: PPUSH
8121: CALL_OW 188
8125: GO 8108
8127: POP
8128: POP
// end ;
8129: GO 8081
8131: POP
8132: POP
// end ; end ; for i in soldiersOK_list do
8133: LD_ADDR_VAR 0 14
8137: PUSH
8138: LD_VAR 0 19
8142: PUSH
8143: FOR_IN
8144: IFFALSE 8320
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8146: LD_ADDR_VAR 0 22
8150: PUSH
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 11
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: PPUSH
8168: LD_VAR 0 14
8172: PPUSH
8173: CALL_OW 74
8177: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8178: LD_ADDR_VAR 0 23
8182: PUSH
8183: LD_INT 22
8185: PUSH
8186: LD_VAR 0 11
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 59
8200: PUSH
8201: EMPTY
8202: LIST
8203: PUSH
8204: LD_INT 21
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 21
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: EMPTY
8235: LIST
8236: PPUSH
8237: CALL_OW 69
8241: PPUSH
8242: LD_VAR 0 14
8246: PPUSH
8247: CALL_OW 74
8251: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8252: LD_VAR 0 14
8256: PPUSH
8257: LD_VAR 0 22
8261: PPUSH
8262: CALL_OW 296
8266: PUSH
8267: LD_INT 8
8269: PLUS
8270: PUSH
8271: LD_VAR 0 14
8275: PPUSH
8276: LD_VAR 0 23
8280: PPUSH
8281: CALL_OW 296
8285: LESS
8286: IFFALSE 8304
// begin ComAttackUnit ( i , target1 ) ;
8288: LD_VAR 0 14
8292: PPUSH
8293: LD_VAR 0 22
8297: PPUSH
8298: CALL_OW 115
// end else
8302: GO 8318
// begin ComAttackUnit ( i , target2 ) ;
8304: LD_VAR 0 14
8308: PPUSH
8309: LD_VAR 0 23
8313: PPUSH
8314: CALL_OW 115
// end ; end ;
8318: GO 8143
8320: POP
8321: POP
// for i in soldiersOK_list do
8322: LD_ADDR_VAR 0 14
8326: PUSH
8327: LD_VAR 0 19
8331: PUSH
8332: FOR_IN
8333: IFFALSE 8509
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8335: LD_ADDR_VAR 0 22
8339: PUSH
8340: LD_INT 22
8342: PUSH
8343: LD_VAR 0 11
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PPUSH
8357: LD_VAR 0 14
8361: PPUSH
8362: CALL_OW 74
8366: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8367: LD_ADDR_VAR 0 23
8371: PUSH
8372: LD_INT 22
8374: PUSH
8375: LD_VAR 0 11
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 2
8386: PUSH
8387: LD_INT 59
8389: PUSH
8390: EMPTY
8391: LIST
8392: PUSH
8393: LD_INT 21
8395: PUSH
8396: LD_INT 1
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 21
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: PPUSH
8426: CALL_OW 69
8430: PPUSH
8431: LD_VAR 0 14
8435: PPUSH
8436: CALL_OW 74
8440: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8441: LD_VAR 0 14
8445: PPUSH
8446: LD_VAR 0 22
8450: PPUSH
8451: CALL_OW 296
8455: PUSH
8456: LD_INT 8
8458: PLUS
8459: PUSH
8460: LD_VAR 0 14
8464: PPUSH
8465: LD_VAR 0 23
8469: PPUSH
8470: CALL_OW 296
8474: LESS
8475: IFFALSE 8493
// begin ComAttackUnit ( i , target1 ) ;
8477: LD_VAR 0 14
8481: PPUSH
8482: LD_VAR 0 22
8486: PPUSH
8487: CALL_OW 115
// end else
8491: GO 8507
// begin ComAttackUnit ( i , target2 ) ;
8493: LD_VAR 0 14
8497: PPUSH
8498: LD_VAR 0 23
8502: PPUSH
8503: CALL_OW 115
// end ; end ;
8507: GO 8332
8509: POP
8510: POP
// until soldiersOK_list = [ ] ;
8511: LD_VAR 0 19
8515: PUSH
8516: EMPTY
8517: EQUAL
8518: IFFALSE 7896
// end ; end ; end_of_file
8520: LD_VAR 0 13
8524: RET
// every 0 0$01 do
8525: GO 8527
8527: DISABLE
// begin ChangeMissionObjectives ( M1 ) ;
8528: LD_STRING M1
8530: PPUSH
8531: CALL_OW 337
// case difficulty of 1 :
8535: LD_OWVAR 67
8539: PUSH
8540: LD_INT 1
8542: DOUBLE
8543: EQUAL
8544: IFTRUE 8548
8546: GO 8558
8548: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
8549: LD_STRING M1-1
8551: PPUSH
8552: CALL_OW 337
8556: GO 8595
8558: LD_INT 2
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8576
8566: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
8567: LD_STRING M1-2
8569: PPUSH
8570: CALL_OW 337
8574: GO 8595
8576: LD_INT 3
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8594
8584: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
8585: LD_STRING M1-3
8587: PPUSH
8588: CALL_OW 337
8592: GO 8595
8594: POP
// ChangeMissionObjectives ( M1cont ) ;
8595: LD_STRING M1cont
8597: PPUSH
8598: CALL_OW 337
// end ;
8602: END
// every 0 0$1 do
8603: GO 8605
8605: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
8606: LD_INT 350
8608: PPUSH
8609: LD_INT 875
8611: PPUSH
8612: CALL_OW 12
8616: PPUSH
8617: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
8621: LD_INT 5
8623: PPUSH
8624: LD_INT 4
8626: PPUSH
8627: LD_INT 1
8629: PPUSH
8630: CALL_OW 55
// wait ( 0 0$15 ) ;
8634: LD_INT 525
8636: PPUSH
8637: CALL_OW 67
// if IsOk ( Lisa ) then
8641: LD_EXP 5
8645: PPUSH
8646: CALL_OW 302
8650: IFFALSE 8666
// begin Say ( Lisa , DR0-Lisa-1 ) ;
8652: LD_EXP 5
8656: PPUSH
8657: LD_STRING DR0-Lisa-1
8659: PPUSH
8660: CALL_OW 88
// end else
8664: GO 8874
// begin if IsOK ( Cyrus ) then
8666: LD_EXP 8
8670: PPUSH
8671: CALL_OW 302
8675: IFFALSE 8679
// begin end else
8677: GO 8809
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
8679: LD_INT 22
8681: PUSH
8682: LD_INT 1
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: LD_INT 21
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 26
8701: PUSH
8702: LD_INT 1
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: EMPTY
8710: LIST
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: PUSH
8719: LD_EXP 1
8723: PUSH
8724: LD_EXP 2
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: DIFF
8733: PPUSH
8734: LD_STRING DR0-Sol1-1
8736: PPUSH
8737: LD_STRING DR0-Sol1-1
8739: PPUSH
8740: CALL 3562 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
8744: LD_INT 22
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 21
8756: PUSH
8757: LD_INT 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 26
8766: PUSH
8767: LD_INT 1
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 69
8783: PUSH
8784: LD_EXP 1
8788: PUSH
8789: LD_EXP 2
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: DIFF
8798: PPUSH
8799: LD_STRING DR0-Sol2-1
8801: PPUSH
8802: LD_STRING DR0-Sol2-1
8804: PPUSH
8805: CALL 3562 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
8809: LD_INT 22
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 21
8821: PUSH
8822: LD_INT 1
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 26
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 69
8848: PUSH
8849: LD_EXP 1
8853: PUSH
8854: LD_EXP 2
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: DIFF
8863: PPUSH
8864: LD_STRING DR0-Sol2-1
8866: PPUSH
8867: LD_STRING DR0-Sol2-1
8869: PPUSH
8870: CALL 3562 0 3
// end ; Say ( JMM , DR0-JMM-1 ) ;
8874: LD_EXP 1
8878: PPUSH
8879: LD_STRING DR0-JMM-1
8881: PPUSH
8882: CALL_OW 88
// end ;
8886: END
// every 10 10$0 do
8887: GO 8889
8889: DISABLE
// begin HarrisonSupport ;
8890: CALL 911 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
8894: LD_EXP 13
8898: PPUSH
8899: CALL_OW 310
8903: PPUSH
8904: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
8908: LD_EXP 13
8912: PPUSH
8913: LD_STRING DEng-Eng1-1
8915: PPUSH
8916: CALL_OW 88
// wait ( 1 1$0 ) ;
8920: LD_INT 2100
8922: PPUSH
8923: CALL_OW 67
// DialogueOn ;
8927: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
8931: LD_EXP 9
8935: PPUSH
8936: LD_STRING DRem-Har-1
8938: PPUSH
8939: CALL_OW 94
// if contactWithRussian = 1 then
8943: LD_EXP 18
8947: PUSH
8948: LD_INT 1
8950: EQUAL
8951: IFFALSE 8967
// begin Say ( JMM , DRem-JMM-1 ) ;
8953: LD_EXP 1
8957: PPUSH
8958: LD_STRING DRem-JMM-1
8960: PPUSH
8961: CALL_OW 88
// end else
8965: GO 8979
// begin Say ( JMM , DRem-JMM-1a ) ;
8967: LD_EXP 1
8971: PPUSH
8972: LD_STRING DRem-JMM-1a
8974: PPUSH
8975: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
8979: LD_EXP 9
8983: PPUSH
8984: LD_STRING DRem-Har-2
8986: PPUSH
8987: CALL_OW 94
// Say ( JMM , DRem-JMM-2 ) ;
8991: LD_EXP 1
8995: PPUSH
8996: LD_STRING DRem-JMM-2
8998: PPUSH
8999: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
9003: LD_EXP 9
9007: PPUSH
9008: LD_STRING DRem-Har-3
9010: PPUSH
9011: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
9015: LD_EXP 1
9019: PPUSH
9020: LD_STRING DRem-JMM-3
9022: PPUSH
9023: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
9027: LD_EXP 9
9031: PPUSH
9032: LD_STRING DRem-Har-4
9034: PPUSH
9035: CALL_OW 94
// Say ( JMM , DRem-JMM-4 ) ;
9039: LD_EXP 1
9043: PPUSH
9044: LD_STRING DRem-JMM-4
9046: PPUSH
9047: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
9051: LD_EXP 9
9055: PPUSH
9056: LD_STRING DRem-Har-5
9058: PPUSH
9059: CALL_OW 94
// DialogueOff ;
9063: CALL_OW 7
// end ;
9067: END
// every 15 15$0 do
9068: GO 9070
9070: DISABLE
// begin PrepareDenis ;
9071: CALL 832 0 0
// CenterNowOnUnits ( Denis ) ;
9075: LD_EXP 7
9079: PPUSH
9080: CALL_OW 87
// DialogueOn ;
9084: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
9088: LD_EXP 7
9092: PPUSH
9093: LD_STRING DDen-Den-1
9095: PPUSH
9096: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
9100: LD_EXP 1
9104: PPUSH
9105: LD_STRING DDen-JMM-1
9107: PPUSH
9108: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
9112: LD_EXP 7
9116: PPUSH
9117: LD_STRING DDen-Den-2
9119: PPUSH
9120: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
9124: LD_EXP 1
9128: PPUSH
9129: LD_STRING DDen-JMM-2
9131: PPUSH
9132: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
9136: LD_EXP 7
9140: PPUSH
9141: LD_STRING DDen-Den-3
9143: PPUSH
9144: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
9148: LD_EXP 1
9152: PPUSH
9153: LD_STRING DDen-JMM-3
9155: PPUSH
9156: CALL_OW 88
// DialogueOff ;
9160: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
9164: LD_INT 36
9166: PPUSH
9167: LD_INT 1
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
9177: LD_INT 15
9179: PPUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_INT 1
9185: PPUSH
9186: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
9190: LD_STRING MR
9192: PPUSH
9193: CALL_OW 337
// end ;
9197: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 15 ] ] ) > 0 do
9198: LD_INT 22
9200: PUSH
9201: LD_INT 1
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 21
9210: PUSH
9211: LD_INT 3
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: LD_INT 30
9220: PUSH
9221: LD_INT 15
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 69
9237: PUSH
9238: LD_INT 0
9240: GREATER
9241: IFFALSE 9270
9243: GO 9245
9245: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
9246: LD_EXP 7
9250: PPUSH
9251: LD_STRING DR1-Den-1
9253: PPUSH
9254: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
9258: LD_EXP 1
9262: PPUSH
9263: LD_STRING DR1-JMM-1
9265: PPUSH
9266: CALL_OW 88
// end ;
9270: END
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
9271: LD_INT 15
9273: PPUSH
9274: LD_INT 1
9276: PPUSH
9277: CALL_OW 321
9281: PUSH
9282: LD_INT 2
9284: EQUAL
9285: PUSH
9286: LD_EXP 7
9290: PPUSH
9291: CALL_OW 302
9295: AND
9296: IFFALSE 9483
9298: GO 9300
9300: DISABLE
// begin DialogueOn ;
9301: CALL_OW 6
// if IsOK ( Denis ) then
9305: LD_EXP 7
9309: PPUSH
9310: CALL_OW 302
9314: IFFALSE 9330
// begin Say ( Denis , DR2-Den-1 ) ;
9316: LD_EXP 7
9320: PPUSH
9321: LD_STRING DR2-Den-1
9323: PPUSH
9324: CALL_OW 88
// end else
9328: GO 9389
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
9330: LD_INT 22
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 21
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 25
9352: PUSH
9353: LD_INT 4
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: PPUSH
9365: CALL_OW 69
9369: PUSH
9370: LD_EXP 1
9374: PUSH
9375: EMPTY
9376: LIST
9377: DIFF
9378: PPUSH
9379: LD_STRING DR2-Sci1-1
9381: PPUSH
9382: LD_STRING DR2-FSci1-1
9384: PPUSH
9385: CALL 3562 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
9389: LD_EXP 1
9393: PPUSH
9394: LD_STRING DR2-JMM-1
9396: PPUSH
9397: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
9401: LD_INT 22
9403: PUSH
9404: LD_INT 1
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 21
9413: PUSH
9414: LD_INT 1
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 3
9423: PUSH
9424: LD_INT 25
9426: PUSH
9427: LD_INT 4
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: PPUSH
9443: CALL_OW 69
9447: PUSH
9448: LD_EXP 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: DIFF
9456: PPUSH
9457: LD_STRING DR2-Sol1-1
9459: PPUSH
9460: LD_STRING DR2-Sol1-11
9462: PPUSH
9463: CALL 3562 0 3
// Say ( JMM , DR2-JMM-2 ) ;
9467: LD_EXP 1
9471: PPUSH
9472: LD_STRING DR2-JMM-2
9474: PPUSH
9475: CALL_OW 88
// DialogueOff ;
9479: CALL_OW 7
// end ;
9483: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
9484: LD_INT 22
9486: PUSH
9487: LD_INT 1
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 30
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 69
9512: PUSH
9513: LD_INT 0
9515: EQUAL
9516: PUSH
9517: LD_INT 22
9519: PUSH
9520: LD_INT 1
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 21
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 33
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: PPUSH
9552: CALL_OW 69
9556: PUSH
9557: LD_INT 0
9559: GREATER
9560: AND
9561: PUSH
9562: LD_EXP 19
9566: PUSH
9567: LD_INT 0
9569: EQUAL
9570: AND
9571: IFFALSE 9643
9573: GO 9575
9575: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
9576: LD_INT 22
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 21
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 3
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: PUSH
9616: LD_EXP 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: DIFF
9624: PPUSH
9625: LD_STRING D3a-Mech1-1
9627: PPUSH
9628: LD_STRING D3a-Mech1-1
9630: PPUSH
9631: CALL 3562 0 3
// firstTower = 2 ;
9635: LD_ADDR_EXP 19
9639: PUSH
9640: LD_INT 2
9642: ST_TO_ADDR
// end ;
9643: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
9644: LD_INT 22
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 30
9656: PUSH
9657: LD_INT 36
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: PUSH
9673: LD_INT 0
9675: GREATER
9676: PUSH
9677: LD_INT 22
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 21
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 33
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 69
9716: PUSH
9717: LD_INT 0
9719: GREATER
9720: AND
9721: IFFALSE 10347
9723: GO 9725
9725: DISABLE
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
9730: PPUSH
9731: PPUSH
9732: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
9733: LD_ADDR_VAR 0 3
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 36
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 69
9766: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
9767: LD_ADDR_VAR 0 4
9771: PUSH
9772: LD_INT 22
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 21
9784: PUSH
9785: LD_INT 2
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 33
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
9812: LD_ADDR_VAR 0 5
9816: PUSH
9817: EMPTY
9818: ST_TO_ADDR
// for i = 1 to tmpControlTowers do
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: DOUBLE
9825: LD_INT 1
9827: DEC
9828: ST_TO_ADDR
9829: LD_VAR 0 3
9833: PUSH
9834: FOR_TO
9835: IFFALSE 10345
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
9837: LD_EXP 1
9841: PPUSH
9842: CALL_OW 310
9846: PUSH
9847: LD_VAR 0 1
9851: EQUAL
9852: PUSH
9853: LD_EXP 1
9857: PPUSH
9858: CALL_OW 257
9862: PUSH
9863: LD_INT 3
9865: EQUAL
9866: AND
9867: IFFALSE 9997
// begin InGameOn ;
9869: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
9873: LD_VAR 0 4
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
9886: LD_EXP 1
9890: PPUSH
9891: LD_STRING D4a-JMM-1
9893: PPUSH
9894: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
9898: LD_VAR 0 4
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PPUSH
9907: LD_EXP 1
9911: PPUSH
9912: CALL_OW 53
// wait ( 0 0$1 ) ;
9916: LD_INT 35
9918: PPUSH
9919: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
9923: LD_VAR 0 4
9927: PUSH
9928: LD_INT 1
9930: ARRAY
9931: PPUSH
9932: LD_VAR 0 4
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PPUSH
9941: CALL_OW 250
9945: PUSH
9946: LD_INT 3
9948: PLUS
9949: PPUSH
9950: LD_VAR 0 4
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: PPUSH
9959: CALL_OW 251
9963: PUSH
9964: LD_INT 2
9966: MINUS
9967: PPUSH
9968: CALL_OW 111
// wait ( 0 0$2 ) ;
9972: LD_INT 70
9974: PPUSH
9975: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
9979: LD_EXP 1
9983: PPUSH
9984: LD_STRING D4b-JMM-1
9986: PPUSH
9987: CALL_OW 88
// InGameOff ;
9991: CALL_OW 9
// end else
9995: GO 10343
// begin InGameOn ;
9997: CALL_OW 8
// for j = 1 to tmpControlTowers do
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_VAR 0 3
10015: PUSH
10016: FOR_TO
10017: IFFALSE 10069
// if GetClass ( UnitsInside ( tmpControlTowers [ j ] ) ) = 3 then
10019: LD_VAR 0 3
10023: PUSH
10024: LD_VAR 0 2
10028: ARRAY
10029: PPUSH
10030: CALL_OW 313
10034: PPUSH
10035: CALL_OW 257
10039: PUSH
10040: LD_INT 3
10042: EQUAL
10043: IFFALSE 10067
// tmpMechanicInside = tmpMechanicInside ^ tmpControlTowers [ i ] ;
10045: LD_ADDR_VAR 0 5
10049: PUSH
10050: LD_VAR 0 5
10054: PUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_VAR 0 1
10064: ARRAY
10065: ADD
10066: ST_TO_ADDR
10067: GO 10016
10069: POP
10070: POP
// display_strings = [ UnitsInside ( tmpControlTowers [ i ] ) , tmpMechanicInside ] ;
10071: LD_ADDR_OWVAR 47
10075: PUSH
10076: LD_VAR 0 3
10080: PUSH
10081: LD_VAR 0 1
10085: ARRAY
10086: PPUSH
10087: CALL_OW 313
10091: PUSH
10092: LD_VAR 0 5
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: ST_TO_ADDR
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
10101: LD_VAR 0 5
10105: PUSH
10106: LD_INT 1
10108: ARRAY
10109: PPUSH
10110: CALL_OW 258
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: IFFALSE 10136
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
10120: LD_VAR 0 5
10124: PUSH
10125: LD_INT 1
10127: ARRAY
10128: PPUSH
10129: LD_STRING D4a-Mech1-1
10131: PPUSH
10132: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
10136: LD_VAR 0 5
10140: PUSH
10141: LD_INT 1
10143: ARRAY
10144: PPUSH
10145: CALL_OW 258
10149: PUSH
10150: LD_INT 2
10152: EQUAL
10153: IFFALSE 10171
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
10155: LD_VAR 0 5
10159: PUSH
10160: LD_INT 1
10162: ARRAY
10163: PPUSH
10164: LD_STRING D4a-FMech1-1
10166: PPUSH
10167: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
10171: LD_VAR 0 4
10175: PUSH
10176: LD_INT 1
10178: ARRAY
10179: PPUSH
10180: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
10184: LD_VAR 0 4
10188: PUSH
10189: LD_INT 1
10191: ARRAY
10192: PPUSH
10193: LD_VAR 0 5
10197: PUSH
10198: LD_INT 1
10200: ARRAY
10201: PPUSH
10202: CALL_OW 53
// wait ( 0 0$1 ) ;
10206: LD_INT 35
10208: PPUSH
10209: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
10213: LD_VAR 0 4
10217: PUSH
10218: LD_INT 1
10220: ARRAY
10221: PPUSH
10222: LD_VAR 0 4
10226: PUSH
10227: LD_INT 1
10229: ARRAY
10230: PPUSH
10231: CALL_OW 250
10235: PUSH
10236: LD_INT 3
10238: PLUS
10239: PPUSH
10240: LD_VAR 0 4
10244: PUSH
10245: LD_INT 1
10247: ARRAY
10248: PPUSH
10249: CALL_OW 251
10253: PUSH
10254: LD_INT 2
10256: MINUS
10257: PPUSH
10258: CALL_OW 111
// wait ( 0 0$2 ) ;
10262: LD_INT 70
10264: PPUSH
10265: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
10269: LD_VAR 0 5
10273: PUSH
10274: LD_INT 1
10276: ARRAY
10277: PPUSH
10278: CALL_OW 258
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: IFFALSE 10304
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
10288: LD_VAR 0 5
10292: PUSH
10293: LD_INT 1
10295: ARRAY
10296: PPUSH
10297: LD_STRING D4b-Mech1-1
10299: PPUSH
10300: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
10304: LD_VAR 0 5
10308: PUSH
10309: LD_INT 1
10311: ARRAY
10312: PPUSH
10313: CALL_OW 258
10317: PUSH
10318: LD_INT 2
10320: EQUAL
10321: IFFALSE 10339
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
10323: LD_VAR 0 5
10327: PUSH
10328: LD_INT 1
10330: ARRAY
10331: PPUSH
10332: LD_STRING D4b-FMech1-1
10334: PPUSH
10335: CALL_OW 88
// InGameOff ;
10339: CALL_OW 9
// end ; end ;
10343: GO 9834
10345: POP
10346: POP
// end ;
10347: PPOPN 5
10349: END
// every 25 25$0 do
10350: GO 10352
10352: DISABLE
// begin PrepareKurt ;
10353: CALL 12114 0 0
// end ;
10357: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
10358: LD_EXP 15
10362: PPUSH
10363: LD_INT 9
10365: PPUSH
10366: CALL_OW 308
10370: PUSH
10371: LD_EXP 17
10375: PUSH
10376: LD_INT 1
10378: EQUAL
10379: AND
10380: IFFALSE 10454
10382: GO 10384
10384: DISABLE
// begin RemoveUnit ( Kurt ) ;
10385: LD_EXP 15
10389: PPUSH
10390: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
10394: LD_EXP 15
10398: PPUSH
10399: LD_STRING Kurt
10401: PPUSH
10402: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
10406: LD_INT 1
10408: PPUSH
10409: LD_INT 2
10411: PPUSH
10412: CALL_OW 81
10416: PUSH
10417: LD_INT 0
10419: EQUAL
10420: IFFALSE 10430
// KurtStatus = 1 ;
10422: LD_ADDR_EXP 16
10426: PUSH
10427: LD_INT 1
10429: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
10430: LD_INT 1
10432: PPUSH
10433: LD_INT 2
10435: PPUSH
10436: CALL_OW 81
10440: PUSH
10441: LD_INT 2
10443: EQUAL
10444: IFFALSE 10454
// KurtStatus = 2 ;
10446: LD_ADDR_EXP 16
10450: PUSH
10451: LD_INT 2
10453: ST_TO_ADDR
// end ;
10454: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
10455: LD_INT 1
10457: PPUSH
10458: LD_INT 2
10460: PPUSH
10461: CALL_OW 81
10465: PUSH
10466: LD_INT 2
10468: EQUAL
10469: PUSH
10470: LD_EXP 15
10474: PPUSH
10475: CALL_OW 302
10479: AND
10480: IFFALSE 10505
10482: GO 10484
10484: DISABLE
// begin DialogueOn ;
10485: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
10489: LD_EXP 15
10493: PPUSH
10494: LD_STRING D2a-Kurt-1
10496: PPUSH
10497: CALL_OW 88
// DialogueOff ;
10501: CALL_OW 7
// end ;
10505: END
// every 35 35$0 do
10506: GO 10508
10508: DISABLE
// begin PrepareJoan ;
10509: CALL 1283 0 0
// wait ( 1 1$0 ) ;
10513: LD_INT 2100
10515: PPUSH
10516: CALL_OW 67
// if IsOK ( Lisa ) then
10520: LD_EXP 5
10524: PPUSH
10525: CALL_OW 302
10529: IFFALSE 10659
// begin DialogueOn ;
10531: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
10535: LD_EXP 5
10539: PPUSH
10540: LD_STRING D7-Lisa-1
10542: PPUSH
10543: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
10547: LD_EXP 1
10551: PPUSH
10552: LD_STRING D7-JMM-1
10554: PPUSH
10555: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
10559: LD_EXP 5
10563: PPUSH
10564: LD_STRING D7-Lisa-2
10566: PPUSH
10567: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10571: LD_EXP 1
10575: PPUSH
10576: LD_STRING D7-JMM-2
10578: PPUSH
10579: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
10583: LD_EXP 5
10587: PPUSH
10588: LD_STRING D7-Lisa-3
10590: PPUSH
10591: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
10595: LD_EXP 1
10599: PPUSH
10600: LD_STRING D7-JMM-3
10602: PPUSH
10603: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
10607: LD_EXP 5
10611: PPUSH
10612: LD_STRING D7-Lisa-4
10614: PPUSH
10615: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
10619: LD_EXP 1
10623: PPUSH
10624: LD_STRING D7-JMM-4
10626: PPUSH
10627: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
10631: LD_EXP 1
10635: PPUSH
10636: LD_STRING D7-JMM-4a
10638: PPUSH
10639: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
10643: LD_EXP 5
10647: PPUSH
10648: LD_STRING D7-Lisa-5
10650: PPUSH
10651: CALL_OW 88
// DialogueOff ;
10655: CALL_OW 7
// end ; end ;
10659: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
10660: LD_INT 22
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 33
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL_OW 69
10688: PUSH
10689: LD_INT 2
10691: GREATEREQUAL
10692: IFFALSE 10712
10694: GO 10696
10696: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
10697: LD_STRING MRa
10699: PPUSH
10700: CALL_OW 337
// remoteVehiclesBuild = 1 ;
10704: LD_ADDR_EXP 24
10708: PUSH
10709: LD_INT 1
10711: ST_TO_ADDR
// end ;
10712: END
// every 13 13$0 do
10713: GO 10715
10715: DISABLE
// PrepareRandoms ( 1 ) ;
10716: LD_INT 1
10718: PPUSH
10719: CALL 2129 0 1
10723: END
// every 20 20$0 do
10724: GO 10726
10726: DISABLE
// PrepareRandoms ( 2 ) ;
10727: LD_INT 2
10729: PPUSH
10730: CALL 2129 0 1
10734: END
// every 28 28$0 do
10735: GO 10737
10737: DISABLE
// PrepareRandoms ( 3 ) ;
10738: LD_INT 3
10740: PPUSH
10741: CALL 2129 0 1
10745: END
// every 32 32$0 do
10746: GO 10748
10748: DISABLE
// PrepareRandoms ( 4 ) ;
10749: LD_INT 4
10751: PPUSH
10752: CALL 2129 0 1
10756: END
// every 38 38$0 do
10757: GO 10759
10759: DISABLE
// PrepareRandoms ( 5 ) ;
10760: LD_INT 5
10762: PPUSH
10763: CALL 2129 0 1
10767: END
// every 42 42$0 do
10768: GO 10770
10770: DISABLE
// PrepareRandoms ( 6 ) ;
10771: LD_INT 6
10773: PPUSH
10774: CALL 2129 0 1
10778: END
// every 45 45$0 do
10779: GO 10781
10781: DISABLE
// PrepareRandoms ( 7 ) ;
10782: LD_INT 7
10784: PPUSH
10785: CALL 2129 0 1
10789: END
// every 5 5$0 do
10790: GO 10792
10792: DISABLE
// begin DialogueOn ;
10793: CALL_OW 6
// SayRadio ( Doctor , D12a-Sci-1 ) ;
10797: LD_EXP 10
10801: PPUSH
10802: LD_STRING D12a-Sci-1
10804: PPUSH
10805: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
10809: LD_EXP 1
10813: PPUSH
10814: LD_STRING D12a-JMM-1
10816: PPUSH
10817: CALL_OW 88
// DialogueOff ;
10821: CALL_OW 7
// cratesStatus = 1 ;
10825: LD_ADDR_EXP 29
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// end ;
10833: END
// every 13 13$0 do
10834: GO 10836
10836: DISABLE
// begin DialogueOn ;
10837: CALL_OW 6
// SayRadio ( Doctor , D12b-Sci-1 ) ;
10841: LD_EXP 10
10845: PPUSH
10846: LD_STRING D12b-Sci-1
10848: PPUSH
10849: CALL_OW 94
// DialogueOff ;
10853: CALL_OW 7
// cratesStatus = 2 ;
10857: LD_ADDR_EXP 29
10861: PUSH
10862: LD_INT 2
10864: ST_TO_ADDR
// end ;
10865: END
// every 32 32$0 do
10866: GO 10868
10868: DISABLE
// begin DialogueOn ;
10869: CALL_OW 6
// SayRadio ( Doctor ,  D12c-Sci-1 ) ;
10873: LD_EXP 10
10877: PPUSH
10878: LD_STRING  D12c-Sci-1
10880: PPUSH
10881: CALL_OW 94
// DialogueOff ;
10885: CALL_OW 7
// wait ( 3 3$0 ) ;
10889: LD_INT 6300
10891: PPUSH
10892: CALL_OW 67
// DialogueOn ;
10896: CALL_OW 6
// SayRadio ( Doctor ,  D12d-Sci-1 ) ;
10900: LD_EXP 10
10904: PPUSH
10905: LD_STRING  D12d-Sci-1
10907: PPUSH
10908: CALL_OW 94
// DialogueOff ;
10912: CALL_OW 7
// cratesStatus = 1 ;
10916: LD_ADDR_EXP 29
10920: PUSH
10921: LD_INT 1
10923: ST_TO_ADDR
// end ;
10924: END
// every 42 42$0 do
10925: GO 10927
10927: DISABLE
// begin DialogueOn ;
10928: CALL_OW 6
// SayRadio ( Doctor , D12e-Sci-1 ) ;
10932: LD_EXP 10
10936: PPUSH
10937: LD_STRING D12e-Sci-1
10939: PPUSH
10940: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
10944: LD_EXP 1
10948: PPUSH
10949: LD_STRING D12e-JMM-1
10951: PPUSH
10952: CALL_OW 88
// DialogueOff ;
10956: CALL_OW 7
// cratesStatus = 2 ;
10960: LD_ADDR_EXP 29
10964: PUSH
10965: LD_INT 2
10967: ST_TO_ADDR
// end ;
10968: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
10969: LD_INT 22
10971: PUSH
10972: LD_INT 6
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 21
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 34
10991: PUSH
10992: LD_INT 51
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: PPUSH
11004: CALL_OW 69
11008: PUSH
11009: LD_INT 0
11011: GREATER
11012: IFFALSE 11066
11014: GO 11016
11016: DISABLE
11017: LD_INT 0
11019: PPUSH
// begin enable ;
11020: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
11021: LD_ADDR_VAR 0 1
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_INT 6
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: PPUSH
11039: CALL_OW 69
11043: PUSH
11044: FOR_IN
11045: IFFALSE 11064
// ComAgressiveMove ( i , 138 , 168 ) ;
11047: LD_VAR 0 1
11051: PPUSH
11052: LD_INT 138
11054: PPUSH
11055: LD_INT 168
11057: PPUSH
11058: CALL_OW 114
11062: GO 11044
11064: POP
11065: POP
// end ;
11066: PPOPN 1
11068: END
// every 0 0$1 trigger FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
11069: LD_INT 5
11071: PPUSH
11072: LD_INT 22
11074: PUSH
11075: LD_INT 6
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 34
11084: PUSH
11085: LD_INT 51
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PPUSH
11096: CALL_OW 70
11100: PUSH
11101: LD_INT 0
11103: GREATER
11104: IFFALSE 11206
11106: GO 11108
11108: DISABLE
11109: LD_INT 0
11111: PPUSH
// begin enable ;
11112: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] ] ) do
11113: LD_ADDR_VAR 0 1
11117: PUSH
11118: LD_INT 5
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 6
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: PPUSH
11134: CALL_OW 70
11138: PUSH
11139: FOR_IN
11140: IFFALSE 11204
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
11142: LD_INT 5
11144: PPUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 6
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 34
11157: PUSH
11158: LD_INT 51
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PPUSH
11169: CALL_OW 70
11173: PUSH
11174: LD_INT 0
11176: GREATER
11177: IFFALSE 11193
// sendedConvoys = sendedConvoys + 1 ;
11179: LD_ADDR_EXP 30
11183: PUSH
11184: LD_EXP 30
11188: PUSH
11189: LD_INT 1
11191: PLUS
11192: ST_TO_ADDR
// RemoveUnit ( i ) ;
11193: LD_VAR 0 1
11197: PPUSH
11198: CALL_OW 64
// end ;
11202: GO 11139
11204: POP
11205: POP
// end ; end_of_file
11206: PPOPN 1
11208: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
11209: LD_VAR 0 1
11213: PUSH
11214: LD_INT 1
11216: EQUAL
11217: PUSH
11218: LD_VAR 0 2
11222: PUSH
11223: LD_INT 3
11225: EQUAL
11226: AND
11227: IFFALSE 11237
// contactWithRussian = 1 ;
11229: LD_ADDR_EXP 18
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// end ;
11237: PPOPN 2
11239: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
11240: LD_VAR 0 1
11244: PPUSH
11245: CALL_OW 266
11249: PUSH
11250: LD_INT 36
11252: EQUAL
11253: PUSH
11254: LD_VAR 0 1
11258: PPUSH
11259: CALL_OW 255
11263: PUSH
11264: LD_INT 1
11266: EQUAL
11267: AND
11268: PUSH
11269: LD_INT 22
11271: PUSH
11272: LD_INT 1
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: LD_INT 21
11281: PUSH
11282: LD_INT 2
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 33
11291: PUSH
11292: LD_INT 2
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: PUSH
11309: LD_INT 0
11311: EQUAL
11312: AND
11313: PUSH
11314: LD_EXP 19
11318: PUSH
11319: LD_INT 0
11321: EQUAL
11322: AND
11323: IFFALSE 11392
// begin firstTower = 1 ;
11325: LD_ADDR_EXP 19
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
11333: LD_INT 22
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 25
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: PPUSH
11368: CALL_OW 69
11372: PUSH
11373: LD_EXP 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: DIFF
11381: PPUSH
11382: LD_STRING D3b-Mech1-1
11384: PPUSH
11385: LD_STRING D3b-Mech1-1
11387: PPUSH
11388: CALL 3562 0 3
// end ; end ;
11392: PPOPN 1
11394: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
11395: LD_VAR 0 1
11399: PPUSH
11400: CALL_OW 255
11404: PUSH
11405: LD_INT 1
11407: EQUAL
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 247
11418: PUSH
11419: LD_INT 1
11421: EQUAL
11422: AND
11423: IFFALSE 11439
// unitLost = unitLost + 1 ;
11425: LD_ADDR_EXP 25
11429: PUSH
11430: LD_EXP 25
11434: PUSH
11435: LD_INT 1
11437: PLUS
11438: ST_TO_ADDR
// end ;
11439: PPOPN 1
11441: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
11442: LD_INT 0
11444: PPUSH
11445: PPUSH
11446: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
11447: LD_VAR 0 1
11451: PPUSH
11452: CALL_OW 264
11456: PUSH
11457: LD_INT 51
11459: EQUAL
11460: PUSH
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 255
11470: PUSH
11471: LD_INT 3
11473: EQUAL
11474: AND
11475: IFFALSE 11537
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
11477: LD_ADDR_VAR 0 5
11481: PUSH
11482: LD_INT 2
11484: PPUSH
11485: CALL_OW 274
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 275
11497: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
11498: LD_INT 2
11500: PPUSH
11501: CALL_OW 274
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: LD_VAR 0 5
11513: PUSH
11514: LD_INT 100
11516: MINUS
11517: PPUSH
11518: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
11522: LD_VAR 0 1
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: LD_INT 100
11532: PPUSH
11533: CALL_OW 291
// end ; if building = rufabsupp then
11537: LD_VAR 0 2
11541: PUSH
11542: LD_INT 17
11544: EQUAL
11545: IFFALSE 11559
// SetSide ( vehicle , 6 ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_INT 6
11554: PPUSH
11555: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
11559: LD_VAR 0 2
11563: PPUSH
11564: CALL_OW 255
11568: PUSH
11569: LD_INT 3
11571: EQUAL
11572: PUSH
11573: LD_VAR 0 2
11577: PPUSH
11578: CALL_OW 302
11582: AND
11583: IFFALSE 11653
// begin uc_side = 3 ;
11585: LD_ADDR_OWVAR 20
11589: PUSH
11590: LD_INT 3
11592: ST_TO_ADDR
// uc_nation = 3 ;
11593: LD_ADDR_OWVAR 21
11597: PUSH
11598: LD_INT 3
11600: ST_TO_ADDR
// hc_gallery :=  ;
11601: LD_ADDR_OWVAR 33
11605: PUSH
11606: LD_STRING 
11608: ST_TO_ADDR
// hc_name :=  ;
11609: LD_ADDR_OWVAR 26
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
11617: LD_INT 0
11619: PPUSH
11620: LD_EXP 27
11624: PPUSH
11625: LD_EXP 28
11629: PPUSH
11630: CALL_OW 12
11634: PPUSH
11635: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
11639: CALL_OW 44
11643: PPUSH
11644: LD_VAR 0 2
11648: PPUSH
11649: CALL_OW 52
// end ; end ; end_of_file
11653: PPOPN 5
11655: END
// every 0 0$30 trigger cratesStatus = 1 do
11656: LD_EXP 29
11660: PUSH
11661: LD_INT 1
11663: EQUAL
11664: IFFALSE 11728
11666: GO 11668
11668: DISABLE
// begin enable ;
11669: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
11670: LD_INT 350
11672: PUSH
11673: LD_INT 1050
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 1
11682: PPUSH
11683: LD_INT 2
11685: PPUSH
11686: CALL_OW 12
11690: ARRAY
11691: PPUSH
11692: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
11696: LD_INT 4
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 1
11708: PPUSH
11709: LD_INT 2
11711: PPUSH
11712: CALL_OW 12
11716: ARRAY
11717: PPUSH
11718: LD_INT 7
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 55
// end ;
11728: END
// every 1 1$0 trigger cratesStatus = 2 do
11729: LD_EXP 29
11733: PUSH
11734: LD_INT 2
11736: EQUAL
11737: IFFALSE 11801
11739: GO 11741
11741: DISABLE
// begin enable ;
11742: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
11743: LD_INT 3150
11745: PUSH
11746: LD_INT 4550
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 1
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 12
11763: ARRAY
11764: PPUSH
11765: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
11769: LD_INT 2
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 1
11781: PPUSH
11782: LD_INT 2
11784: PPUSH
11785: CALL_OW 12
11789: ARRAY
11790: PPUSH
11791: LD_INT 8
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 55
// end ; end_of_file
11801: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
11802: LD_EXP 20
11806: PUSH
11807: LD_INT 1
11809: EQUAL
11810: IFFALSE 12111
11812: GO 11814
11814: DISABLE
11815: LD_INT 0
11817: PPUSH
11818: PPUSH
11819: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11820: LD_ADDR_VAR 0 2
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_INT 1
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 21
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 2
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 30
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: ST_TO_ADDR
// for i in tmp do
11883: LD_ADDR_VAR 0 1
11887: PUSH
11888: LD_VAR 0 2
11892: PUSH
11893: FOR_IN
11894: IFFALSE 11927
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
11896: LD_ADDR_VAR 0 3
11900: PUSH
11901: LD_VAR 0 3
11905: PUSH
11906: LD_VAR 0 1
11910: PPUSH
11911: CALL_OW 274
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 275
11923: PLUS
11924: ST_TO_ADDR
11925: GO 11893
11927: POP
11928: POP
// strings = [ ] ;
11929: LD_ADDR_EXP 23
11933: PUSH
11934: EMPTY
11935: ST_TO_ADDR
// if tmp = 0 then
11936: LD_VAR 0 2
11940: PUSH
11941: LD_INT 0
11943: EQUAL
11944: IFFALSE 11969
// strings = strings ^ [ #Am06-1 , needCrates ] ;
11946: LD_ADDR_EXP 23
11950: PUSH
11951: LD_EXP 23
11955: PUSH
11956: LD_STRING #Am06-1
11958: PUSH
11959: LD_EXP 21
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: ADD
11968: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
11969: LD_VAR 0 2
11973: PUSH
11974: LD_INT 0
11976: GREATER
11977: PUSH
11978: LD_EXP 21
11982: PUSH
11983: LD_VAR 0 3
11987: GREATER
11988: AND
11989: IFFALSE 12020
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
11991: LD_ADDR_EXP 23
11995: PUSH
11996: LD_EXP 23
12000: PUSH
12001: LD_STRING #Am06-1
12003: PUSH
12004: LD_EXP 21
12008: PUSH
12009: LD_VAR 0 3
12013: MINUS
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: ADD
12019: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
12020: LD_VAR 0 2
12024: PUSH
12025: LD_INT 0
12027: GREATER
12028: PUSH
12029: LD_EXP 21
12033: PUSH
12034: LD_VAR 0 3
12038: LESSEQUAL
12039: AND
12040: IFFALSE 12063
// strings = strings ^ [ #Am06-1 , 0 ] ;
12042: LD_ADDR_EXP 23
12046: PUSH
12047: LD_EXP 23
12051: PUSH
12052: LD_STRING #Am06-1
12054: PUSH
12055: LD_INT 0
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: ADD
12062: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
12063: LD_ADDR_EXP 22
12067: PUSH
12068: LD_EXP 22
12072: PUSH
12073: LD_INT 35
12075: MINUS
12076: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
12077: LD_ADDR_EXP 23
12081: PUSH
12082: LD_EXP 23
12086: PUSH
12087: LD_STRING #Am06-2
12089: PUSH
12090: LD_EXP 22
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: ADD
12099: ST_TO_ADDR
// display_strings = strings ;
12100: LD_ADDR_OWVAR 47
12104: PUSH
12105: LD_EXP 23
12109: ST_TO_ADDR
// enable ;
12110: ENABLE
// end ; end_of_file
12111: PPOPN 3
12113: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
12114: LD_INT 0
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 21
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
12155: LD_ADDR_VAR 0 3
12159: PUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_VAR 0 2
12167: PPUSH
12168: CALL_OW 12
12172: ST_TO_ADDR
// uc_side = 2 ;
12173: LD_ADDR_OWVAR 20
12177: PUSH
12178: LD_INT 2
12180: ST_TO_ADDR
// uc_nation = 2 ;
12181: LD_ADDR_OWVAR 21
12185: PUSH
12186: LD_INT 2
12188: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
12189: LD_ADDR_EXP 15
12193: PUSH
12194: LD_STRING Kurt
12196: PPUSH
12197: LD_INT 0
12199: PPUSH
12200: CALL 3505 0 2
12204: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
12205: LD_EXP 15
12209: PPUSH
12210: LD_VAR 0 2
12214: PUSH
12215: LD_VAR 0 3
12219: ARRAY
12220: PPUSH
12221: CALL_OW 250
12225: PPUSH
12226: LD_VAR 0 2
12230: PUSH
12231: LD_VAR 0 3
12235: ARRAY
12236: PPUSH
12237: CALL_OW 251
12241: PPUSH
12242: LD_INT 2
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 50
// InGameOn ;
12252: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
12256: LD_EXP 15
12260: PPUSH
12261: CALL_OW 87
// wait ( 0 0$2 ) ;
12265: LD_INT 70
12267: PPUSH
12268: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
12272: LD_VAR 0 2
12276: PUSH
12277: LD_VAR 0 3
12281: ARRAY
12282: PPUSH
12283: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
12287: LD_VAR 0 2
12291: PUSH
12292: LD_VAR 0 3
12296: ARRAY
12297: PPUSH
12298: CALL_OW 122
// wait ( 0 0$1 ) ;
12302: LD_INT 35
12304: PPUSH
12305: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
12309: LD_EXP 15
12313: PPUSH
12314: LD_VAR 0 2
12318: PUSH
12319: LD_VAR 0 3
12323: ARRAY
12324: PPUSH
12325: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
12329: LD_VAR 0 2
12333: PUSH
12334: LD_VAR 0 3
12338: ARRAY
12339: PPUSH
12340: LD_EXP 15
12344: PPUSH
12345: CALL_OW 119
// DialogueOn ;
12349: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
12353: LD_EXP 15
12357: PPUSH
12358: LD_STRING D2-Kurt-1
12360: PPUSH
12361: CALL_OW 88
// if tmp [ rnd ] = JMM then
12365: LD_VAR 0 2
12369: PUSH
12370: LD_VAR 0 3
12374: ARRAY
12375: PUSH
12376: LD_EXP 1
12380: EQUAL
12381: IFFALSE 12473
// begin Say ( JMM , D2-JMM-1 ) ;
12383: LD_EXP 1
12387: PPUSH
12388: LD_STRING D2-JMM-1
12390: PPUSH
12391: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
12395: LD_EXP 15
12399: PPUSH
12400: LD_STRING D2-Kurt-2
12402: PPUSH
12403: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
12407: LD_EXP 1
12411: PPUSH
12412: LD_STRING D2-JMM-2
12414: PPUSH
12415: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
12419: LD_EXP 15
12423: PPUSH
12424: LD_STRING D2-Kurt-3
12426: PPUSH
12427: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
12431: LD_EXP 1
12435: PPUSH
12436: LD_STRING D2-JMM-3
12438: PPUSH
12439: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
12443: LD_EXP 15
12447: PPUSH
12448: LD_STRING D2-Kurt-4
12450: PPUSH
12451: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
12455: LD_EXP 1
12459: PPUSH
12460: LD_STRING D2-JMM-4
12462: PPUSH
12463: CALL_OW 88
// DialogueOff ;
12467: CALL_OW 7
// end else
12471: GO 12903
// begin if GetSex ( tmp [ rnd ] ) = 1 then
12473: LD_VAR 0 2
12477: PUSH
12478: LD_VAR 0 3
12482: ARRAY
12483: PPUSH
12484: CALL_OW 258
12488: PUSH
12489: LD_INT 1
12491: EQUAL
12492: IFFALSE 12512
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
12494: LD_VAR 0 2
12498: PUSH
12499: LD_VAR 0 3
12503: ARRAY
12504: PPUSH
12505: LD_STRING D2-Sol1-1
12507: PPUSH
12508: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
12512: LD_VAR 0 2
12516: PUSH
12517: LD_VAR 0 3
12521: ARRAY
12522: PPUSH
12523: CALL_OW 258
12527: PUSH
12528: LD_INT 2
12530: EQUAL
12531: IFFALSE 12551
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
12533: LD_VAR 0 2
12537: PUSH
12538: LD_VAR 0 3
12542: ARRAY
12543: PPUSH
12544: LD_STRING D2-FSol1-1
12546: PPUSH
12547: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
12551: LD_EXP 15
12555: PPUSH
12556: LD_STRING D2-Kurt-2
12558: PPUSH
12559: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
12563: LD_VAR 0 2
12567: PUSH
12568: LD_VAR 0 3
12572: ARRAY
12573: PPUSH
12574: CALL_OW 258
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: IFFALSE 12602
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
12584: LD_VAR 0 2
12588: PUSH
12589: LD_VAR 0 3
12593: ARRAY
12594: PPUSH
12595: LD_STRING D2-Sol1-2
12597: PPUSH
12598: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
12602: LD_VAR 0 2
12606: PUSH
12607: LD_VAR 0 3
12611: ARRAY
12612: PPUSH
12613: CALL_OW 258
12617: PUSH
12618: LD_INT 2
12620: EQUAL
12621: IFFALSE 12641
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
12623: LD_VAR 0 2
12627: PUSH
12628: LD_VAR 0 3
12632: ARRAY
12633: PPUSH
12634: LD_STRING D2-FSol1-2
12636: PPUSH
12637: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
12641: LD_EXP 15
12645: PPUSH
12646: LD_STRING D2-Kurt-3
12648: PPUSH
12649: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
12653: LD_VAR 0 2
12657: PUSH
12658: LD_VAR 0 3
12662: ARRAY
12663: PPUSH
12664: CALL_OW 258
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: IFFALSE 12692
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
12674: LD_VAR 0 2
12678: PUSH
12679: LD_VAR 0 3
12683: ARRAY
12684: PPUSH
12685: LD_STRING D2-Sol1-3
12687: PPUSH
12688: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
12692: LD_VAR 0 2
12696: PUSH
12697: LD_VAR 0 3
12701: ARRAY
12702: PPUSH
12703: CALL_OW 258
12707: PUSH
12708: LD_INT 2
12710: EQUAL
12711: IFFALSE 12731
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
12713: LD_VAR 0 2
12717: PUSH
12718: LD_VAR 0 3
12722: ARRAY
12723: PPUSH
12724: LD_STRING D2-FSol1-3
12726: PPUSH
12727: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
12731: LD_EXP 15
12735: PPUSH
12736: LD_STRING D2-Kurt-4
12738: PPUSH
12739: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
12743: LD_VAR 0 2
12747: PUSH
12748: LD_VAR 0 3
12752: ARRAY
12753: PPUSH
12754: CALL_OW 258
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: IFFALSE 12782
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
12764: LD_VAR 0 2
12768: PUSH
12769: LD_VAR 0 3
12773: ARRAY
12774: PPUSH
12775: LD_STRING D2-Sol1-4
12777: PPUSH
12778: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
12782: LD_VAR 0 2
12786: PUSH
12787: LD_VAR 0 3
12791: ARRAY
12792: PPUSH
12793: CALL_OW 258
12797: PUSH
12798: LD_INT 2
12800: EQUAL
12801: IFFALSE 12821
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
12803: LD_VAR 0 2
12807: PUSH
12808: LD_VAR 0 3
12812: ARRAY
12813: PPUSH
12814: LD_STRING D2-FSol1-4
12816: PPUSH
12817: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
12821: LD_VAR 0 2
12825: PUSH
12826: LD_VAR 0 3
12830: ARRAY
12831: PPUSH
12832: CALL_OW 258
12836: PUSH
12837: LD_INT 1
12839: EQUAL
12840: IFFALSE 12860
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
12842: LD_VAR 0 2
12846: PUSH
12847: LD_VAR 0 3
12851: ARRAY
12852: PPUSH
12853: LD_STRING D2-Sol1-5
12855: PPUSH
12856: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
12860: LD_VAR 0 2
12864: PUSH
12865: LD_VAR 0 3
12869: ARRAY
12870: PPUSH
12871: CALL_OW 258
12875: PUSH
12876: LD_INT 2
12878: EQUAL
12879: IFFALSE 12899
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
12881: LD_VAR 0 2
12885: PUSH
12886: LD_VAR 0 3
12890: ARRAY
12891: PPUSH
12892: LD_STRING D2-FSol1-5
12894: PPUSH
12895: CALL_OW 88
// DialogueOff ;
12899: CALL_OW 7
// end ; dec = ShowQuery1 ;
12903: LD_ADDR_VAR 0 4
12907: PUSH
12908: CALL 4050 0 0
12912: ST_TO_ADDR
// if dec = 1 then
12913: LD_VAR 0 4
12917: PUSH
12918: LD_INT 1
12920: EQUAL
12921: IFFALSE 12963
// begin DialogueOn ;
12923: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12927: LD_EXP 15
12931: PPUSH
12932: LD_STRING D2a-Kurt-1
12934: PPUSH
12935: CALL_OW 88
// DialogueOff ;
12939: CALL_OW 7
// InGameOff ;
12943: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
12947: LD_INT 1
12949: PPUSH
12950: LD_INT 2
12952: PPUSH
12953: LD_INT 2
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 80
// end ; if dec = 2 then
12963: LD_VAR 0 4
12967: PUSH
12968: LD_INT 2
12970: EQUAL
12971: IFFALSE 13657
// begin DialogueOn ;
12973: CALL_OW 6
// if tmp [ rnd ] = JMM then
12977: LD_VAR 0 2
12981: PUSH
12982: LD_VAR 0 3
12986: ARRAY
12987: PUSH
12988: LD_EXP 1
12992: EQUAL
12993: IFFALSE 13049
// begin Say ( JMM , D2b-JMM-1 ) ;
12995: LD_EXP 1
12999: PPUSH
13000: LD_STRING D2b-JMM-1
13002: PPUSH
13003: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
13007: LD_EXP 15
13011: PPUSH
13012: LD_STRING D2b-Kurt-1
13014: PPUSH
13015: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
13019: LD_EXP 1
13023: PPUSH
13024: LD_STRING D2b-JMM-2
13026: PPUSH
13027: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
13031: LD_EXP 15
13035: PPUSH
13036: LD_STRING D2b-Kurt-2
13038: PPUSH
13039: CALL_OW 88
// DialogueOff ;
13043: CALL_OW 7
// end else
13047: GO 13311
// begin if GetSex ( tmp [ rnd ] ) = 1 then
13049: LD_VAR 0 2
13053: PUSH
13054: LD_VAR 0 3
13058: ARRAY
13059: PPUSH
13060: CALL_OW 258
13064: PUSH
13065: LD_INT 1
13067: EQUAL
13068: IFFALSE 13088
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
13070: LD_VAR 0 2
13074: PUSH
13075: LD_VAR 0 3
13079: ARRAY
13080: PPUSH
13081: LD_STRING D2b-Sol1-1
13083: PPUSH
13084: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13088: LD_VAR 0 2
13092: PUSH
13093: LD_VAR 0 3
13097: ARRAY
13098: PPUSH
13099: CALL_OW 258
13103: PUSH
13104: LD_INT 2
13106: EQUAL
13107: IFFALSE 13127
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
13109: LD_VAR 0 2
13113: PUSH
13114: LD_VAR 0 3
13118: ARRAY
13119: PPUSH
13120: LD_STRING D2b-FSol1-1
13122: PPUSH
13123: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
13127: LD_EXP 15
13131: PPUSH
13132: LD_STRING D2b-Kurt-1
13134: PPUSH
13135: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
13139: LD_VAR 0 2
13143: PUSH
13144: LD_VAR 0 3
13148: ARRAY
13149: PPUSH
13150: CALL_OW 258
13154: PUSH
13155: LD_INT 1
13157: EQUAL
13158: IFFALSE 13178
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
13160: LD_VAR 0 2
13164: PUSH
13165: LD_VAR 0 3
13169: ARRAY
13170: PPUSH
13171: LD_STRING D2b-Sol1-2
13173: PPUSH
13174: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13178: LD_VAR 0 2
13182: PUSH
13183: LD_VAR 0 3
13187: ARRAY
13188: PPUSH
13189: CALL_OW 258
13193: PUSH
13194: LD_INT 2
13196: EQUAL
13197: IFFALSE 13217
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
13199: LD_VAR 0 2
13203: PUSH
13204: LD_VAR 0 3
13208: ARRAY
13209: PPUSH
13210: LD_STRING D2b-FSol1-2
13212: PPUSH
13213: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
13217: LD_EXP 15
13221: PPUSH
13222: LD_STRING D2b-Kurt-2
13224: PPUSH
13225: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
13229: LD_VAR 0 2
13233: PUSH
13234: LD_VAR 0 3
13238: ARRAY
13239: PPUSH
13240: CALL_OW 258
13244: PUSH
13245: LD_INT 1
13247: EQUAL
13248: IFFALSE 13268
// Say ( tmp [ rnd ] , D2c-Sol1-3 ) ;
13250: LD_VAR 0 2
13254: PUSH
13255: LD_VAR 0 3
13259: ARRAY
13260: PPUSH
13261: LD_STRING D2c-Sol1-3
13263: PPUSH
13264: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13268: LD_VAR 0 2
13272: PUSH
13273: LD_VAR 0 3
13277: ARRAY
13278: PPUSH
13279: CALL_OW 258
13283: PUSH
13284: LD_INT 2
13286: EQUAL
13287: IFFALSE 13307
// Say ( tmp [ rnd ] , D2c-FSol1-3 ) ;
13289: LD_VAR 0 2
13293: PUSH
13294: LD_VAR 0 3
13298: ARRAY
13299: PPUSH
13300: LD_STRING D2c-FSol1-3
13302: PPUSH
13303: CALL_OW 88
// DialogueOff ;
13307: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
13311: LD_ADDR_VAR 0 5
13315: PUSH
13316: CALL 4124 0 0
13320: ST_TO_ADDR
// if dec2 = 1 then
13321: LD_VAR 0 5
13325: PUSH
13326: LD_INT 1
13328: EQUAL
13329: IFFALSE 13367
// begin Say ( Kurt , D2a-Kurt-1 ) ;
13331: LD_EXP 15
13335: PPUSH
13336: LD_STRING D2a-Kurt-1
13338: PPUSH
13339: CALL_OW 88
// DialogueOff ;
13343: CALL_OW 7
// InGameOff ;
13347: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
13351: LD_INT 1
13353: PPUSH
13354: LD_INT 2
13356: PPUSH
13357: LD_INT 2
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 80
// end ; if dec2 = 2 then
13367: LD_VAR 0 5
13371: PUSH
13372: LD_INT 2
13374: EQUAL
13375: IFFALSE 13657
// begin if tmp [ rnd ] = JMM then
13377: LD_VAR 0 2
13381: PUSH
13382: LD_VAR 0 3
13386: ARRAY
13387: PUSH
13388: LD_EXP 1
13392: EQUAL
13393: IFFALSE 13449
// begin Say ( JMM , D2c-JMM-1 ) ;
13395: LD_EXP 1
13399: PPUSH
13400: LD_STRING D2c-JMM-1
13402: PPUSH
13403: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
13407: LD_EXP 15
13411: PPUSH
13412: LD_STRING D2c-Kurt-1
13414: PPUSH
13415: CALL_OW 88
// DialogueOff ;
13419: CALL_OW 7
// InGameOff ;
13423: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
13427: LD_EXP 15
13431: PPUSH
13432: LD_INT 9
13434: PPUSH
13435: CALL_OW 113
// readyToEscape = 1 ;
13439: LD_ADDR_EXP 17
13443: PUSH
13444: LD_INT 1
13446: ST_TO_ADDR
// end else
13447: GO 13657
// begin if GetSex ( tmp [ rnd ] ) = 1 then
13449: LD_VAR 0 2
13453: PUSH
13454: LD_VAR 0 3
13458: ARRAY
13459: PPUSH
13460: CALL_OW 258
13464: PUSH
13465: LD_INT 1
13467: EQUAL
13468: IFFALSE 13488
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
13470: LD_VAR 0 2
13474: PUSH
13475: LD_VAR 0 3
13479: ARRAY
13480: PPUSH
13481: LD_STRING D2b-Sol1-1
13483: PPUSH
13484: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13488: LD_VAR 0 2
13492: PUSH
13493: LD_VAR 0 3
13497: ARRAY
13498: PPUSH
13499: CALL_OW 258
13503: PUSH
13504: LD_INT 2
13506: EQUAL
13507: IFFALSE 13527
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
13509: LD_VAR 0 2
13513: PUSH
13514: LD_VAR 0 3
13518: ARRAY
13519: PPUSH
13520: LD_STRING D2b-FSol1-1
13522: PPUSH
13523: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
13527: LD_EXP 15
13531: PPUSH
13532: LD_STRING D2b-Kurt-1
13534: PPUSH
13535: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
13539: LD_VAR 0 2
13543: PUSH
13544: LD_VAR 0 3
13548: ARRAY
13549: PPUSH
13550: CALL_OW 258
13554: PUSH
13555: LD_INT 1
13557: EQUAL
13558: IFFALSE 13578
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
13560: LD_VAR 0 2
13564: PUSH
13565: LD_VAR 0 3
13569: ARRAY
13570: PPUSH
13571: LD_STRING D2b-Sol1-2
13573: PPUSH
13574: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13578: LD_VAR 0 2
13582: PUSH
13583: LD_VAR 0 3
13587: ARRAY
13588: PPUSH
13589: CALL_OW 258
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: IFFALSE 13617
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
13599: LD_VAR 0 2
13603: PUSH
13604: LD_VAR 0 3
13608: ARRAY
13609: PPUSH
13610: LD_STRING D2b-FSol1-2
13612: PPUSH
13613: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
13617: LD_EXP 15
13621: PPUSH
13622: LD_STRING D2b-Kurt-2
13624: PPUSH
13625: CALL_OW 88
// DialogueOff ;
13629: CALL_OW 7
// InGameOff ;
13633: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
13637: LD_EXP 15
13641: PPUSH
13642: LD_INT 9
13644: PPUSH
13645: CALL_OW 113
// readyToEscape = 1 ;
13649: LD_ADDR_EXP 17
13653: PUSH
13654: LD_INT 1
13656: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
13657: LD_VAR 0 4
13661: PUSH
13662: LD_INT 3
13664: EQUAL
13665: IFFALSE 13951
// begin DialogueOn ;
13667: CALL_OW 6
// if tmp [ rnd ] = JMM then
13671: LD_VAR 0 2
13675: PUSH
13676: LD_VAR 0 3
13680: ARRAY
13681: PUSH
13682: LD_EXP 1
13686: EQUAL
13687: IFFALSE 13743
// begin Say ( JMM , D2c-JMM-1 ) ;
13689: LD_EXP 1
13693: PPUSH
13694: LD_STRING D2c-JMM-1
13696: PPUSH
13697: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
13701: LD_EXP 15
13705: PPUSH
13706: LD_STRING D2c-Kurt-1
13708: PPUSH
13709: CALL_OW 88
// DialogueOff ;
13713: CALL_OW 7
// InGameOff ;
13717: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
13721: LD_EXP 15
13725: PPUSH
13726: LD_INT 9
13728: PPUSH
13729: CALL_OW 113
// readyToEscape = 1 ;
13733: LD_ADDR_EXP 17
13737: PUSH
13738: LD_INT 1
13740: ST_TO_ADDR
// end else
13741: GO 13951
// begin if GetSex ( tmp [ rnd ] ) = 1 then
13743: LD_VAR 0 2
13747: PUSH
13748: LD_VAR 0 3
13752: ARRAY
13753: PPUSH
13754: CALL_OW 258
13758: PUSH
13759: LD_INT 1
13761: EQUAL
13762: IFFALSE 13782
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
13764: LD_VAR 0 2
13768: PUSH
13769: LD_VAR 0 3
13773: ARRAY
13774: PPUSH
13775: LD_STRING D2b-Sol1-1
13777: PPUSH
13778: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13782: LD_VAR 0 2
13786: PUSH
13787: LD_VAR 0 3
13791: ARRAY
13792: PPUSH
13793: CALL_OW 258
13797: PUSH
13798: LD_INT 2
13800: EQUAL
13801: IFFALSE 13821
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
13803: LD_VAR 0 2
13807: PUSH
13808: LD_VAR 0 3
13812: ARRAY
13813: PPUSH
13814: LD_STRING D2b-FSol1-1
13816: PPUSH
13817: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
13821: LD_EXP 15
13825: PPUSH
13826: LD_STRING D2b-Kurt-1
13828: PPUSH
13829: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
13833: LD_VAR 0 2
13837: PUSH
13838: LD_VAR 0 3
13842: ARRAY
13843: PPUSH
13844: CALL_OW 258
13848: PUSH
13849: LD_INT 1
13851: EQUAL
13852: IFFALSE 13872
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
13854: LD_VAR 0 2
13858: PUSH
13859: LD_VAR 0 3
13863: ARRAY
13864: PPUSH
13865: LD_STRING D2b-Sol1-2
13867: PPUSH
13868: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
13872: LD_VAR 0 2
13876: PUSH
13877: LD_VAR 0 3
13881: ARRAY
13882: PPUSH
13883: CALL_OW 258
13887: PUSH
13888: LD_INT 2
13890: EQUAL
13891: IFFALSE 13911
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
13893: LD_VAR 0 2
13897: PUSH
13898: LD_VAR 0 3
13902: ARRAY
13903: PPUSH
13904: LD_STRING D2b-FSol1-2
13906: PPUSH
13907: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
13911: LD_EXP 15
13915: PPUSH
13916: LD_STRING D2b-Kurt-2
13918: PPUSH
13919: CALL_OW 88
// DialogueOff ;
13923: CALL_OW 7
// InGameOff ;
13927: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
13931: LD_EXP 15
13935: PPUSH
13936: LD_INT 9
13938: PPUSH
13939: CALL_OW 113
// readyToEscape = 1 ;
13943: LD_ADDR_EXP 17
13947: PUSH
13948: LD_INT 1
13950: ST_TO_ADDR
// end ; end ; end ; end_of_file
13951: LD_VAR 0 1
13955: RET
// every 0 0$1 do
13956: GO 13958
13958: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
13959: LD_INT 3
13961: PPUSH
13962: LD_INT 32
13964: PPUSH
13965: LD_INT 3
13967: PPUSH
13968: CALL 4179 0 3
13972: END
// every 0 0$1 do
13973: GO 13975
13975: DISABLE
// begin enable ;
13976: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
13977: LD_INT 3
13979: PPUSH
13980: LD_INT 2
13982: PPUSH
13983: CALL 4264 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
13987: LD_INT 3
13989: PPUSH
13990: LD_INT 10
13992: PPUSH
13993: LD_INT 11
13995: PPUSH
13996: LD_INT 32
13998: PPUSH
13999: CALL 4505 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
14003: LD_INT 3
14005: PPUSH
14006: LD_INT 51
14008: PPUSH
14009: LD_INT 7
14011: PPUSH
14012: CALL 5228 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
14016: LD_INT 3
14018: PPUSH
14019: LD_INT 14
14021: PPUSH
14022: LD_INT 121
14024: PPUSH
14025: LD_INT 100
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL 5441 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
14035: LD_INT 3
14037: PPUSH
14038: LD_EXP 26
14042: PPUSH
14043: CALL 6232 0 2
// end ;
14047: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
14048: LD_INT 22
14050: PUSH
14051: LD_INT 3
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: LD_INT 21
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: LD_INT 34
14073: PUSH
14074: LD_INT 51
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: PPUSH
14090: CALL_OW 69
14094: PUSH
14095: LD_INT 0
14097: EQUAL
14098: IFFALSE 14215
14100: GO 14102
14102: DISABLE
// begin enable ;
14103: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , 24 ) ;
14104: LD_INT 3
14106: PPUSH
14107: LD_INT 21
14109: PPUSH
14110: LD_INT 4
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: LD_INT 5
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_OWVAR 67
14128: ARRAY
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: LD_INT 43
14135: PUSH
14136: LD_INT 43
14138: PUSH
14139: LD_INT 43
14141: PUSH
14142: LD_INT 44
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 44
14153: PUSH
14154: LD_INT 44
14156: PUSH
14157: LD_INT 44
14159: PUSH
14160: LD_INT 43
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 44
14171: PUSH
14172: LD_INT 44
14174: PUSH
14175: LD_INT 44
14177: PUSH
14178: LD_INT 44
14180: PUSH
14181: LD_INT 46
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: PUSH
14196: LD_OWVAR 67
14200: ARRAY
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: LD_INT 24
14210: PPUSH
14211: CALL 4771 0 8
// end ;
14215: END
// every 5 5$0 do
14216: GO 14218
14218: DISABLE
// begin enable ;
14219: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
14220: LD_INT 17
14222: PPUSH
14223: LD_INT 22
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_INT 1
14231: PPUSH
14232: LD_INT 42
14234: PUSH
14235: LD_INT 43
14237: PUSH
14238: LD_INT 44
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 1
14248: PPUSH
14249: LD_INT 3
14251: PPUSH
14252: CALL_OW 12
14256: ARRAY
14257: PPUSH
14258: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
14262: LD_INT 17
14264: PPUSH
14265: LD_INT 22
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_INT 42
14276: PUSH
14277: LD_INT 43
14279: PUSH
14280: LD_INT 44
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 1
14290: PPUSH
14291: LD_INT 3
14293: PPUSH
14294: CALL_OW 12
14298: ARRAY
14299: PPUSH
14300: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
14304: LD_INT 17
14306: PPUSH
14307: LD_INT 22
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: LD_INT 42
14318: PUSH
14319: LD_INT 43
14321: PUSH
14322: LD_INT 44
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: PPUSH
14342: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
14346: LD_INT 17
14348: PPUSH
14349: LD_INT 22
14351: PPUSH
14352: LD_INT 1
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: LD_INT 51
14360: PPUSH
14361: CALL_OW 185
// end ; end_of_file
14365: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
14366: LD_EXP 22
14370: PUSH
14371: LD_INT 0
14373: LESSEQUAL
14374: IFFALSE 14514
14376: GO 14378
14378: DISABLE
14379: LD_INT 0
14381: PPUSH
14382: PPUSH
14383: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14384: LD_ADDR_VAR 0 2
14388: PUSH
14389: LD_INT 22
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 3
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: LD_INT 30
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 30
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// for i in tmp do
14447: LD_ADDR_VAR 0 1
14451: PUSH
14452: LD_VAR 0 2
14456: PUSH
14457: FOR_IN
14458: IFFALSE 14491
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
14460: LD_ADDR_VAR 0 3
14464: PUSH
14465: LD_VAR 0 3
14469: PUSH
14470: LD_VAR 0 1
14474: PPUSH
14475: CALL_OW 274
14479: PPUSH
14480: LD_INT 1
14482: PPUSH
14483: CALL_OW 275
14487: PLUS
14488: ST_TO_ADDR
14489: GO 14457
14491: POP
14492: POP
// if yourCrates >= needCrates then
14493: LD_VAR 0 3
14497: PUSH
14498: LD_EXP 21
14502: GREATEREQUAL
14503: IFFALSE 14514
// begin FinishMission ( yourCrates ) ;
14505: LD_VAR 0 3
14509: PPUSH
14510: CALL 14517 0 1
// end ; end ;
14514: PPOPN 3
14516: END
// export function FinishMission ( crates ) ; begin
14517: LD_INT 0
14519: PPUSH
// if crates + 100 > crates then
14520: LD_VAR 0 1
14524: PUSH
14525: LD_INT 100
14527: PLUS
14528: PUSH
14529: LD_VAR 0 1
14533: GREATER
14534: IFFALSE 14558
// begin AddMedal ( cans , 1 ) ;
14536: LD_STRING cans
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
14546: LD_INT 1
14548: PPUSH
14549: LD_STRING 06_crates_1
14551: PPUSH
14552: CALL_OW 39
// end else
14556: GO 14579
// begin AddMedal ( cans , - 1 ) ;
14558: LD_STRING cans
14560: PPUSH
14561: LD_INT 1
14563: NEG
14564: PPUSH
14565: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
14569: LD_INT 0
14571: PPUSH
14572: LD_STRING 06_crates_1
14574: PPUSH
14575: CALL_OW 39
// end ; if unitLost > 2 then
14579: LD_EXP 25
14583: PUSH
14584: LD_INT 2
14586: GREATER
14587: IFFALSE 14601
// begin AddMedal ( people , 1 ) ;
14589: LD_STRING people
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 101
// end else
14599: GO 14612
// begin AddMedal ( people , - 1 ) ;
14601: LD_STRING people
14603: PPUSH
14604: LD_INT 1
14606: NEG
14607: PPUSH
14608: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
14612: LD_EXP 24
14616: PPUSH
14617: LD_STRING 06_remoteVehs_1
14619: PPUSH
14620: CALL_OW 39
// if remoteVehiclesBuild = 1 then
14624: LD_EXP 24
14628: PUSH
14629: LD_INT 1
14631: EQUAL
14632: IFFALSE 14646
// begin AddMedal ( remote , 1 ) ;
14634: LD_STRING remote
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 101
// end else
14644: GO 14686
// begin if GetTech ( 18 , 1 ) = state_enabled then
14646: LD_INT 18
14648: PPUSH
14649: LD_INT 1
14651: PPUSH
14652: CALL_OW 321
14656: PUSH
14657: LD_INT 1
14659: EQUAL
14660: IFFALSE 14675
// begin AddMedal ( remote , - 1 ) ;
14662: LD_STRING remote
14664: PPUSH
14665: LD_INT 1
14667: NEG
14668: PPUSH
14669: CALL_OW 101
// end else
14673: GO 14686
// begin AddMedal ( remote , - 2 ) ;
14675: LD_STRING remote
14677: PPUSH
14678: LD_INT 2
14680: NEG
14681: PPUSH
14682: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
14686: LD_EXP 16
14690: PPUSH
14691: LD_STRING 06_KurtStatus_1
14693: PPUSH
14694: CALL_OW 39
// GiveMedals ( Main ) ;
14698: LD_STRING Main
14700: PPUSH
14701: CALL_OW 102
// RewardPeople ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
14705: LD_INT 22
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 21
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
14733: LD_EXP 1
14737: PPUSH
14738: LD_STRING JMM
14740: PPUSH
14741: CALL_OW 38
// YouWin ;
14745: CALL_OW 103
// end ; end_of_file
14749: LD_VAR 0 2
14753: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
14754: LD_EXP 30
14758: PUSH
14759: LD_INT 4
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: PUSH
14773: LD_OWVAR 67
14777: ARRAY
14778: EQUAL
14779: IFFALSE 14894
14781: GO 14783
14783: DISABLE
// begin enable ;
14784: ENABLE
// sendedConvoys = 0 ;
14785: LD_ADDR_EXP 30
14789: PUSH
14790: LD_INT 0
14792: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
14793: LD_INT 6
14795: PPUSH
14796: LD_INT 3
14798: PPUSH
14799: LD_INT 3
14801: PPUSH
14802: LD_INT 4
14804: PPUSH
14805: CALL_OW 12
14809: PUSH
14810: LD_INT 4
14812: PPUSH
14813: LD_INT 5
14815: PPUSH
14816: CALL_OW 12
14820: PUSH
14821: LD_INT 6
14823: PPUSH
14824: LD_INT 7
14826: PPUSH
14827: CALL_OW 12
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: LIST
14836: PUSH
14837: LD_OWVAR 67
14841: ARRAY
14842: PPUSH
14843: LD_INT 0
14845: PPUSH
14846: LD_INT 0
14848: PPUSH
14849: LD_INT 0
14851: PPUSH
14852: LD_INT 3
14854: PPUSH
14855: LD_EXP 27
14859: PPUSH
14860: LD_EXP 28
14864: PPUSH
14865: CALL_OW 12
14869: PPUSH
14870: LD_INT 18
14872: PPUSH
14873: LD_INT 17
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: LD_INT 2
14884: PPUSH
14885: CALL_OW 12
14889: PPUSH
14890: CALL 6438 0 12
// end ;
14894: END
