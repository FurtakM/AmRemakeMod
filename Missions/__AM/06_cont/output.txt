// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 40
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 41
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 42
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 29
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 16
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 38
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 25
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 26
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 28
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 39
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 32
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 30
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 31
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 36
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 37
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 33
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 27
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5534 0 0
// PrepareNature ;
 211: CALL 20943 0 0
// PrepareRussian ;
 215: CALL 4641 0 0
// PrepareVehicles ;
 219: CALL 1456 0 0
// PrepareHeroes ;
 223: CALL 474 0 0
// PrepareOthers ;
 227: CALL 1717 0 0
// PreparePlayerApemans ;
 231: CALL 1859 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 40
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 471
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// if IsSelected ( rudepo ) then
 435: LD_INT 2
 437: PPUSH
 438: CALL_OW 306
 442: IFFALSE 452
// your_side = 3 ;
 444: LD_ADDR_OWVAR 2
 448: PUSH
 449: LD_INT 3
 451: ST_TO_ADDR
// if IsSelected ( JMM ) then
 452: LD_EXP 1
 456: PPUSH
 457: CALL_OW 306
 461: IFFALSE 471
// your_side = 1 ;
 463: LD_ADDR_OWVAR 2
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// end ; end_of_file
 471: PPOPN 1
 473: END
// export function PrepareHeroes ; var veh ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_INT 1
 504: PPUSH
 505: CALL 5018 0 2
 509: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 510: LD_ADDR_EXP 14
 514: PUSH
 515: LD_STRING Harisson
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL 5018 0 2
 525: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 526: LD_ADDR_EXP 10
 530: PUSH
 531: LD_STRING DeltaDoctor
 533: PPUSH
 534: CALL_OW 34
 538: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 539: LD_ADDR_VAR 0 2
 543: PUSH
 544: LD_INT 22
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 58
 566: PUSH
 567: EMPTY
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: PPUSH
 575: CALL_OW 69
 579: ST_TO_ADDR
// if veh > 0 then
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 0
 587: GREATER
 588: IFFALSE 610
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 590: LD_EXP 1
 594: PPUSH
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 1
 602: ARRAY
 603: PPUSH
 604: CALL_OW 52
// end else
 608: GO 625
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 610: LD_EXP 1
 614: PPUSH
 615: LD_INT 2
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 625: LD_STRING LisaIn06
 627: PPUSH
 628: LD_INT 0
 630: PPUSH
 631: CALL_OW 30
 635: PUSH
 636: LD_INT 1
 638: EQUAL
 639: IFFALSE 743
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 21
 658: PUSH
 659: LD_INT 2
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: LD_INT 58
 668: PUSH
 669: EMPTY
 670: LIST
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 5018 0 2
 697: ST_TO_ADDR
// if veh > 0 then
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 0
 705: GREATER
 706: IFFALSE 728
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 1
 720: ARRAY
 721: PPUSH
 722: CALL_OW 52
// end else
 726: GO 743
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 728: LD_EXP 2
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 743: LD_STRING BobbyIn06
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 30
 753: PUSH
 754: LD_INT 1
 756: EQUAL
 757: IFFALSE 861
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 759: LD_ADDR_VAR 0 2
 763: PUSH
 764: LD_INT 22
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 21
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 58
 786: PUSH
 787: EMPTY
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: PPUSH
 795: CALL_OW 69
 799: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 800: LD_ADDR_EXP 3
 804: PUSH
 805: LD_STRING Bobby
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL 5018 0 2
 815: ST_TO_ADDR
// if veh > 0 then
 816: LD_VAR 0 2
 820: PUSH
 821: LD_INT 0
 823: GREATER
 824: IFFALSE 846
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 1
 838: ARRAY
 839: PPUSH
 840: CALL_OW 52
// end else
 844: GO 861
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 861: LD_STRING CyrusIn06
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 30
 871: PUSH
 872: LD_INT 1
 874: EQUAL
 875: IFFALSE 979
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 877: LD_ADDR_VAR 0 2
 881: PUSH
 882: LD_INT 22
 884: PUSH
 885: LD_INT 1
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 58
 904: PUSH
 905: EMPTY
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PPUSH
 913: CALL_OW 69
 917: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 918: LD_ADDR_EXP 4
 922: PUSH
 923: LD_STRING Cyrus
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL 5018 0 2
 933: ST_TO_ADDR
// if veh > 0 then
 934: LD_VAR 0 2
 938: PUSH
 939: LD_INT 0
 941: GREATER
 942: IFFALSE 964
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 944: LD_EXP 4
 948: PPUSH
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 1
 956: ARRAY
 957: PPUSH
 958: CALL_OW 52
// end else
 962: GO 979
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 964: LD_EXP 4
 968: PPUSH
 969: LD_INT 2
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 979: LD_STRING FrankIn06
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 30
 989: PUSH
 990: LD_INT 1
 992: EQUAL
 993: IFFALSE 1097
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 22
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 58
1022: PUSH
1023: EMPTY
1024: LIST
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: PPUSH
1031: CALL_OW 69
1035: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1036: LD_ADDR_EXP 5
1040: PUSH
1041: LD_STRING Frank
1043: PPUSH
1044: LD_INT 1
1046: PPUSH
1047: CALL 5018 0 2
1051: ST_TO_ADDR
// if veh > 0 then
1052: LD_VAR 0 2
1056: PUSH
1057: LD_INT 0
1059: GREATER
1060: IFFALSE 1082
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1062: LD_EXP 5
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: CALL_OW 52
// end else
1080: GO 1097
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1082: LD_EXP 5
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1097: LD_STRING BrownIn06
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 30
1107: PUSH
1108: LD_INT 1
1110: EQUAL
1111: IFFALSE 1215
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 2
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 58
1140: PUSH
1141: EMPTY
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1154: LD_ADDR_EXP 6
1158: PUSH
1159: LD_STRING Brown
1161: PPUSH
1162: LD_INT 1
1164: PPUSH
1165: CALL 5018 0 2
1169: ST_TO_ADDR
// if veh > 0 then
1170: LD_VAR 0 2
1174: PUSH
1175: LD_INT 0
1177: GREATER
1178: IFFALSE 1200
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1180: LD_EXP 6
1184: PPUSH
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 52
// end else
1198: GO 1215
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1200: LD_EXP 6
1204: PPUSH
1205: LD_INT 2
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1215: LD_STRING DonaldsonIn06
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 30
1225: PUSH
1226: LD_INT 1
1228: EQUAL
1229: IFFALSE 1333
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_INT 22
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 2
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 58
1258: PUSH
1259: EMPTY
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1272: LD_ADDR_EXP 7
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: CALL 5018 0 2
1287: ST_TO_ADDR
// if veh > 0 then
1288: LD_VAR 0 2
1292: PUSH
1293: LD_INT 0
1295: GREATER
1296: IFFALSE 1318
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1298: LD_EXP 7
1302: PPUSH
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 1
1310: ARRAY
1311: PPUSH
1312: CALL_OW 52
// end else
1316: GO 1333
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1318: LD_EXP 7
1322: PPUSH
1323: LD_INT 2
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1333: LD_STRING GladstoneIn06
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 30
1343: PUSH
1344: LD_INT 1
1346: EQUAL
1347: IFFALSE 1451
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: LD_INT 21
1366: PUSH
1367: LD_INT 2
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 58
1376: PUSH
1377: EMPTY
1378: LIST
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: LIST
1384: PPUSH
1385: CALL_OW 69
1389: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1390: LD_ADDR_EXP 8
1394: PUSH
1395: LD_STRING Gladstone
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL 5018 0 2
1405: ST_TO_ADDR
// if veh > 0 then
1406: LD_VAR 0 2
1410: PUSH
1411: LD_INT 0
1413: GREATER
1414: IFFALSE 1436
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1416: LD_EXP 8
1420: PPUSH
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 1
1428: ARRAY
1429: PPUSH
1430: CALL_OW 52
// end else
1434: GO 1451
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1436: LD_EXP 8
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// end ; end ; end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1463: LD_ADDR_VAR 0 5
1467: PUSH
1468: LD_STRING 06_VehiclesIn06_1
1470: PPUSH
1471: EMPTY
1472: PPUSH
1473: CALL_OW 30
1477: ST_TO_ADDR
// uc_side = 1 ;
1478: LD_ADDR_OWVAR 20
1482: PUSH
1483: LD_INT 1
1485: ST_TO_ADDR
// if vehicles > 0 then
1486: LD_VAR 0 5
1490: PUSH
1491: LD_INT 0
1493: GREATER
1494: IFFALSE 1712
// begin for i := 1 to vehicles do
1496: LD_ADDR_VAR 0 2
1500: PUSH
1501: DOUBLE
1502: LD_INT 1
1504: DEC
1505: ST_TO_ADDR
1506: LD_VAR 0 5
1510: PUSH
1511: FOR_TO
1512: IFFALSE 1710
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_VAR 0 5
1523: PUSH
1524: LD_VAR 0 2
1528: ARRAY
1529: PUSH
1530: LD_INT 1
1532: ARRAY
1533: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1534: LD_ADDR_OWVAR 37
1538: PUSH
1539: LD_VAR 0 5
1543: PUSH
1544: LD_VAR 0 2
1548: ARRAY
1549: PUSH
1550: LD_INT 2
1552: ARRAY
1553: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1554: LD_ADDR_OWVAR 39
1558: PUSH
1559: LD_VAR 0 5
1563: PUSH
1564: LD_VAR 0 2
1568: ARRAY
1569: PUSH
1570: LD_INT 3
1572: ARRAY
1573: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1574: LD_ADDR_OWVAR 38
1578: PUSH
1579: LD_VAR 0 5
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: PUSH
1590: LD_INT 4
1592: ARRAY
1593: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1594: LD_ADDR_OWVAR 40
1598: PUSH
1599: LD_VAR 0 5
1603: PUSH
1604: LD_VAR 0 2
1608: ARRAY
1609: PUSH
1610: LD_INT 5
1612: ARRAY
1613: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1614: LD_ADDR_OWVAR 41
1618: PUSH
1619: LD_INT 40
1621: ST_TO_ADDR
// veh = CreateVehicle ;
1622: LD_ADDR_VAR 0 4
1626: PUSH
1627: CALL_OW 45
1631: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 3
1639: PPUSH
1640: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1644: LD_VAR 0 4
1648: PPUSH
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1659: LD_OWVAR 40
1663: PUSH
1664: LD_INT 12
1666: EQUAL
1667: IFFALSE 1708
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1669: LD_VAR 0 4
1673: PPUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 6
1687: ARRAY
1688: PPUSH
1689: LD_VAR 0 5
1693: PUSH
1694: LD_VAR 0 2
1698: ARRAY
1699: PUSH
1700: LD_INT 7
1702: ARRAY
1703: PPUSH
1704: CALL_OW 291
// end ;
1708: GO 1511
1710: POP
1711: POP
// end ; end ;
1712: LD_VAR 0 1
1716: RET
// export function PrepareOthers ; var i , veh ; begin
1717: LD_INT 0
1719: PPUSH
1720: PPUSH
1721: PPUSH
// uc_side = 1 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 1
1729: ST_TO_ADDR
// uc_nation = 1 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1738: LD_ADDR_EXP 11
1742: PUSH
1743: LD_STRING OthersIn06
1745: PPUSH
1746: CALL_OW 31
1750: ST_TO_ADDR
// for i in others do
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: LD_EXP 11
1760: PUSH
1761: FOR_IN
1762: IFFALSE 1852
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1764: LD_ADDR_VAR 0 3
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 21
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 58
1791: PUSH
1792: EMPTY
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PPUSH
1800: CALL_OW 69
1804: ST_TO_ADDR
// if veh > 0 then
1805: LD_VAR 0 3
1809: PUSH
1810: LD_INT 0
1812: GREATER
1813: IFFALSE 1835
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1815: LD_VAR 0 2
1819: PPUSH
1820: LD_VAR 0 3
1824: PUSH
1825: LD_INT 1
1827: ARRAY
1828: PPUSH
1829: CALL_OW 52
// end else
1833: GO 1850
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// end ; end ;
1850: GO 1761
1852: POP
1853: POP
// end ;
1854: LD_VAR 0 1
1858: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
1863: PPUSH
// uc_side = 1 ;
1864: LD_ADDR_OWVAR 20
1868: PUSH
1869: LD_INT 1
1871: ST_TO_ADDR
// uc_nation = 0 ;
1872: LD_ADDR_OWVAR 21
1876: PUSH
1877: LD_INT 0
1879: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1880: LD_ADDR_EXP 12
1884: PUSH
1885: LD_STRING ApeIn06
1887: PPUSH
1888: CALL_OW 31
1892: ST_TO_ADDR
// for i in ape do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_EXP 12
1902: PUSH
1903: FOR_IN
1904: IFFALSE 1923
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1906: LD_VAR 0 2
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 49
1921: GO 1903
1923: POP
1924: POP
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareDenis ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side = 1 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// uc_nation = 1 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1949: LD_ADDR_EXP 9
1953: PUSH
1954: LD_STRING Denis
1956: PPUSH
1957: LD_INT 1
1959: PPUSH
1960: CALL 5018 0 2
1964: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1965: LD_EXP 9
1969: PPUSH
1970: LD_INT 13
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1980: LD_EXP 9
1984: PPUSH
1985: LD_INT 4
1987: PPUSH
1988: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1992: LD_EXP 9
1996: PPUSH
1997: LD_INT 750
1999: PPUSH
2000: CALL_OW 234
// end ;
2004: LD_VAR 0 1
2008: RET
// export function HarrisonSupport ; var un , veh ; begin
2009: LD_INT 0
2011: PPUSH
2012: PPUSH
2013: PPUSH
// uc_side = 1 ;
2014: LD_ADDR_OWVAR 20
2018: PUSH
2019: LD_INT 1
2021: ST_TO_ADDR
// uc_nation = 1 ;
2022: LD_ADDR_OWVAR 21
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// vc_engine = 1 ;
2030: LD_ADDR_OWVAR 39
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// vc_control = 1 ;
2038: LD_ADDR_OWVAR 38
2042: PUSH
2043: LD_INT 1
2045: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2046: LD_ADDR_OWVAR 40
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 4
2056: PUSH
2057: LD_INT 2
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_OWVAR 67
2069: ARRAY
2070: ST_TO_ADDR
// vc_chassis = 2 ;
2071: LD_ADDR_OWVAR 37
2075: PUSH
2076: LD_INT 2
2078: ST_TO_ADDR
// veh = CreateVehicle ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: CALL_OW 45
2088: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2116: LD_VAR 0 3
2120: PPUSH
2121: LD_INT 50
2123: PPUSH
2124: CALL_OW 240
// hc_class := 2 ;
2128: LD_ADDR_OWVAR 28
2132: PUSH
2133: LD_INT 2
2135: ST_TO_ADDR
// hc_sex := sex_male ;
2136: LD_ADDR_OWVAR 27
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING SecondCharsGal
2151: ST_TO_ADDR
// hc_face_number := 52 ;
2152: LD_ADDR_OWVAR 34
2156: PUSH
2157: LD_INT 52
2159: ST_TO_ADDR
// hc_name := Craig Brown ;
2160: LD_ADDR_OWVAR 26
2164: PUSH
2165: LD_STRING Craig Brown
2167: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2168: LD_ADDR_OWVAR 29
2172: PUSH
2173: LD_INT 10
2175: PUSH
2176: LD_INT 10
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2183: LD_ADDR_OWVAR 30
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 0
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2206: LD_ADDR_OWVAR 31
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: LD_INT 3
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2229: LD_ADDR_EXP 17
2233: PUSH
2234: CALL_OW 44
2238: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2239: LD_EXP 17
2243: PPUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: CALL_OW 52
// vc_engine = 1 ;
2253: LD_ADDR_OWVAR 39
2257: PUSH
2258: LD_INT 1
2260: ST_TO_ADDR
// vc_control = 1 ;
2261: LD_ADDR_OWVAR 38
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2269: LD_ADDR_OWVAR 40
2273: PUSH
2274: LD_INT 4
2276: PUSH
2277: LD_INT 2
2279: PUSH
2280: LD_INT 2
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: LD_OWVAR 67
2292: ARRAY
2293: ST_TO_ADDR
// vc_chassis = 2 ;
2294: LD_ADDR_OWVAR 37
2298: PUSH
2299: LD_INT 2
2301: ST_TO_ADDR
// veh = CreateVehicle ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: CALL_OW 45
2311: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2339: LD_VAR 0 3
2343: PPUSH
2344: LD_INT 50
2346: PPUSH
2347: CALL_OW 240
// hc_class := 1 ;
2351: LD_ADDR_OWVAR 28
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// hc_sex := sex_female ;
2359: LD_ADDR_OWVAR 27
2363: PUSH
2364: LD_INT 2
2366: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2367: LD_ADDR_OWVAR 33
2371: PUSH
2372: LD_STRING SecondCharsGal
2374: ST_TO_ADDR
// hc_face_number := 45 ;
2375: LD_ADDR_OWVAR 34
2379: PUSH
2380: LD_INT 45
2382: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2383: LD_ADDR_OWVAR 29
2387: PUSH
2388: LD_INT 11
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2398: LD_ADDR_OWVAR 26
2402: PUSH
2403: LD_STRING Ingrid Jonsson
2405: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2406: LD_ADDR_OWVAR 30
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 1
2416: PUSH
2417: LD_INT 0
2419: PUSH
2420: LD_INT 0
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2429: LD_ADDR_OWVAR 31
2433: PUSH
2434: LD_INT 3
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: LD_INT 0
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2452: LD_ADDR_EXP 18
2456: PUSH
2457: CALL_OW 44
2461: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2462: LD_EXP 18
2466: PPUSH
2467: LD_VAR 0 3
2471: PPUSH
2472: CALL_OW 52
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// j = 0 ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: LD_INT 0
2495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: LD_INT 22
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 21
2520: PUSH
2521: LD_INT 1
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 26
2530: PUSH
2531: LD_INT 1
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 2
2540: PUSH
2541: LD_INT 25
2543: PUSH
2544: LD_INT 1
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 25
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 25
2573: PUSH
2574: LD_INT 4
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 69
2598: PUSH
2599: FOR_IN
2600: IFFALSE 2726
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2602: LD_INT 22
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 21
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 21
2627: PUSH
2628: LD_INT 2
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 21
2637: PUSH
2638: LD_INT 3
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 59
2647: PUSH
2648: EMPTY
2649: LIST
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 91
2660: PUSH
2661: LD_VAR 0 2
2665: PUSH
2666: LD_INT 25
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL_OW 69
2683: NOT
2684: PUSH
2685: LD_VAR 0 2
2689: PPUSH
2690: LD_EXP 1
2694: PPUSH
2695: CALL_OW 296
2699: PUSH
2700: LD_INT 15
2702: LESS
2703: AND
2704: IFFALSE 2724
// begin tmp = i ;
2706: LD_ADDR_VAR 0 4
2710: PUSH
2711: LD_VAR 0 2
2715: ST_TO_ADDR
// j = 1 ;
2716: LD_ADDR_VAR 0 3
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// end ; end ;
2724: GO 2599
2726: POP
2727: POP
// until j = 1 ;
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 1
2735: EQUAL
2736: IFFALSE 2496
// blockSpawn = 1 ;
2738: LD_ADDR_EXP 29
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// uc_side = 4 ;
2746: LD_ADDR_OWVAR 20
2750: PUSH
2751: LD_INT 4
2753: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2754: LD_ADDR_EXP 15
2758: PUSH
2759: LD_STRING Joan
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL 5018 0 2
2769: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2770: LD_EXP 15
2774: PPUSH
2775: LD_VAR 0 4
2779: PPUSH
2780: CALL_OW 250
2784: PPUSH
2785: LD_VAR 0 4
2789: PPUSH
2790: CALL_OW 251
2794: PPUSH
2795: LD_INT 5
2797: PPUSH
2798: LD_INT 1
2800: PPUSH
2801: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2805: LD_EXP 15
2809: PPUSH
2810: LD_INT 250
2812: PPUSH
2813: CALL_OW 234
// InGameOn ;
2817: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2821: LD_EXP 15
2825: PPUSH
2826: CALL_OW 87
// wait ( 0 0$2 ) ;
2830: LD_INT 70
2832: PPUSH
2833: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2837: LD_VAR 0 4
2841: PPUSH
2842: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: CALL_OW 122
// wait ( 0 0$1 ) ;
2855: LD_INT 35
2857: PPUSH
2858: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2862: LD_VAR 0 4
2866: PPUSH
2867: LD_EXP 15
2871: PPUSH
2872: CALL_OW 112
// wait ( 0 0$2 ) ;
2876: LD_INT 70
2878: PPUSH
2879: CALL_OW 67
// DialogueOn ;
2883: CALL_OW 6
// if tmp = JMM then
2887: LD_VAR 0 4
2891: PUSH
2892: LD_EXP 1
2896: EQUAL
2897: IFFALSE 3046
// begin ComTurnUnit ( JMM , Joan ) ;
2899: LD_EXP 1
2903: PPUSH
2904: LD_EXP 15
2908: PPUSH
2909: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2913: LD_EXP 1
2917: PPUSH
2918: LD_STRING D5b-JMM-1
2920: PPUSH
2921: CALL_OW 88
// DialogueOff ;
2925: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2929: LD_EXP 15
2933: PPUSH
2934: LD_INT 500
2936: PPUSH
2937: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2941: LD_EXP 15
2945: PPUSH
2946: LD_EXP 1
2950: PPUSH
2951: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2955: LD_EXP 1
2959: PPUSH
2960: LD_EXP 15
2964: PPUSH
2965: CALL_OW 119
// wait ( 0 0$1 ) ;
2969: LD_INT 35
2971: PPUSH
2972: CALL_OW 67
// DialogueOn ;
2976: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_STRING D5b-Joan-1
2987: PPUSH
2988: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2992: LD_EXP 1
2996: PPUSH
2997: LD_STRING D5b-JMM-2
2999: PPUSH
3000: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3004: LD_EXP 15
3008: PPUSH
3009: LD_STRING D5b-Joan-2
3011: PPUSH
3012: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3016: LD_EXP 1
3020: PPUSH
3021: LD_STRING D5b-JMM-3
3023: PPUSH
3024: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3028: LD_EXP 15
3032: PPUSH
3033: LD_STRING D5b-Joan-3
3035: PPUSH
3036: CALL_OW 88
// DialogueOff ;
3040: CALL_OW 7
// end else
3044: GO 3381
// begin ComTurnUnit ( tmp , Joan ) ;
3046: LD_VAR 0 4
3050: PPUSH
3051: LD_EXP 15
3055: PPUSH
3056: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_STRING D5a-Sol1-1
3067: PPUSH
3068: CALL_OW 88
// DialogueOff ;
3072: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3076: LD_EXP 15
3080: PPUSH
3081: LD_INT 500
3083: PPUSH
3084: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3088: LD_EXP 15
3092: PPUSH
3093: LD_VAR 0 4
3097: PPUSH
3098: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3102: LD_VAR 0 4
3106: PPUSH
3107: LD_EXP 15
3111: PPUSH
3112: CALL_OW 119
// wait ( 0 0$1 ) ;
3116: LD_INT 35
3118: PPUSH
3119: CALL_OW 67
// DialogueOn ;
3123: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3127: LD_EXP 15
3131: PPUSH
3132: LD_STRING D5a-Joan-1
3134: PPUSH
3135: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3139: LD_VAR 0 4
3143: PPUSH
3144: LD_STRING D5a-Sol1-2
3146: PPUSH
3147: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3151: LD_EXP 15
3155: PPUSH
3156: LD_STRING D5a-Joan-2
3158: PPUSH
3159: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3163: LD_VAR 0 4
3167: PPUSH
3168: LD_STRING D5a-Sol1-3
3170: PPUSH
3171: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3175: LD_EXP 15
3179: PPUSH
3180: LD_STRING D5a-Joan-3
3182: PPUSH
3183: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_STRING D5a-Sol1-4
3194: PPUSH
3195: CALL_OW 88
// DialogueOff ;
3199: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3203: LD_EXP 1
3207: PPUSH
3208: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3212: LD_EXP 1
3216: PPUSH
3217: CALL_OW 122
// wait ( 0 0$1 ) ;
3221: LD_INT 35
3223: PPUSH
3224: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3228: LD_INT 35
3230: PPUSH
3231: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3235: LD_EXP 15
3239: PUSH
3240: LD_VAR 0 4
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: PPUSH
3249: LD_EXP 1
3253: PPUSH
3254: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3258: LD_EXP 15
3262: PPUSH
3263: LD_EXP 1
3267: PPUSH
3268: CALL_OW 296
3272: PUSH
3273: LD_INT 5
3275: LESS
3276: IFFALSE 3228
// ComTurnUnit ( Joan , JMM ) ;
3278: LD_EXP 15
3282: PPUSH
3283: LD_EXP 1
3287: PPUSH
3288: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3292: LD_EXP 1
3296: PPUSH
3297: LD_EXP 15
3301: PPUSH
3302: CALL_OW 119
// wait ( 0 0$1 ) ;
3306: LD_INT 35
3308: PPUSH
3309: CALL_OW 67
// DialogueOn ;
3313: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3317: LD_EXP 15
3321: PPUSH
3322: LD_STRING D5a-Joan-4
3324: PPUSH
3325: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3329: LD_EXP 1
3333: PPUSH
3334: LD_STRING D5a-JMM-4
3336: PPUSH
3337: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3341: LD_EXP 15
3345: PPUSH
3346: LD_STRING D5a-Joan-5
3348: PPUSH
3349: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3353: LD_EXP 1
3357: PPUSH
3358: LD_STRING D5a-JMM-5
3360: PPUSH
3361: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3365: LD_EXP 15
3369: PPUSH
3370: LD_STRING D5a-Joan-6
3372: PPUSH
3373: CALL_OW 88
// DialogueOff ;
3377: CALL_OW 7
// end ; DialogueOn ;
3381: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3385: LD_EXP 1
3389: PPUSH
3390: LD_STRING D6-JMM-1
3392: PPUSH
3393: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3397: LD_EXP 15
3401: PPUSH
3402: LD_STRING D6-Joan-1
3404: PPUSH
3405: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3409: LD_EXP 1
3413: PPUSH
3414: LD_STRING D6-JMM-2
3416: PPUSH
3417: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3421: LD_EXP 15
3425: PPUSH
3426: LD_STRING D6-Joan-2
3428: PPUSH
3429: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3433: LD_EXP 1
3437: PPUSH
3438: LD_STRING D6-JMM-3
3440: PPUSH
3441: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3445: LD_EXP 15
3449: PPUSH
3450: LD_STRING D6-Joan-3
3452: PPUSH
3453: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3457: LD_EXP 1
3461: PPUSH
3462: LD_STRING D6-JMM-4
3464: PPUSH
3465: CALL_OW 88
// DialogueOff ;
3469: CALL_OW 7
// InGameOff ;
3473: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3477: LD_EXP 15
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3489: LD_STRING MJ
3491: PPUSH
3492: CALL_OW 337
// JoanStatus = 1 ;
3496: LD_ADDR_EXP 16
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
// blockSpawn = 0 ;
3504: LD_ADDR_EXP 29
3508: PUSH
3509: LD_INT 0
3511: ST_TO_ADDR
// end ;
3512: LD_VAR 0 1
3516: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3517: LD_INT 0
3519: PPUSH
3520: PPUSH
// repeat wait ( 0 0$7 ) ;
3521: LD_INT 245
3523: PPUSH
3524: CALL_OW 67
// until blockSpawn = 0 ;
3528: LD_EXP 29
3532: PUSH
3533: LD_INT 0
3535: EQUAL
3536: IFFALSE 3521
// uc_side = 1 ;
3538: LD_ADDR_OWVAR 20
3542: PUSH
3543: LD_INT 1
3545: ST_TO_ADDR
// uc_nation = 1 ;
3546: LD_ADDR_OWVAR 21
3550: PUSH
3551: LD_INT 1
3553: ST_TO_ADDR
// InitHc ;
3554: CALL_OW 19
// if number = 1 then
3558: LD_VAR 0 1
3562: PUSH
3563: LD_INT 1
3565: EQUAL
3566: IFFALSE 3742
// begin hc_class := 1 ;
3568: LD_ADDR_OWVAR 28
3572: PUSH
3573: LD_INT 1
3575: ST_TO_ADDR
// hc_sex := sex_male ;
3576: LD_ADDR_OWVAR 27
3580: PUSH
3581: LD_INT 1
3583: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING AmGalRemake
3591: ST_TO_ADDR
// hc_face_number := 7 ;
3592: LD_ADDR_OWVAR 34
3596: PUSH
3597: LD_INT 7
3599: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3600: LD_ADDR_OWVAR 26
3604: PUSH
3605: LD_STRING Bobby Jordan
3607: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3608: LD_ADDR_OWVAR 29
3612: PUSH
3613: LD_INT 9
3615: PUSH
3616: LD_INT 11
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3623: LD_ADDR_OWVAR 30
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: LD_INT 1
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3646: LD_ADDR_OWVAR 31
3650: PUSH
3651: LD_INT 2
3653: PUSH
3654: LD_INT 1
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: LD_INT 1
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: ST_TO_ADDR
// un = CreateHuman ;
3669: LD_ADDR_VAR 0 3
3673: PUSH
3674: CALL_OW 44
3678: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_INT 12
3686: PPUSH
3687: LD_INT 1
3689: PPUSH
3690: CALL_OW 49
// wait ( 0 0$1 ) ;
3694: LD_INT 35
3696: PPUSH
3697: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3701: LD_VAR 0 3
3705: PPUSH
3706: CALL_OW 87
// DialogueOn ;
3710: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3714: LD_VAR 0 3
3718: PPUSH
3719: LD_STRING D11b-Sol3-1
3721: PPUSH
3722: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3726: LD_EXP 1
3730: PPUSH
3731: LD_STRING D11b-JMM-1
3733: PPUSH
3734: CALL_OW 88
// DialogueOff ;
3738: CALL_OW 7
// end ; if number = 2 then
3742: LD_VAR 0 1
3746: PUSH
3747: LD_INT 2
3749: EQUAL
3750: IFFALSE 3926
// begin hc_class := 3 ;
3752: LD_ADDR_OWVAR 28
3756: PUSH
3757: LD_INT 3
3759: ST_TO_ADDR
// hc_sex := sex_male ;
3760: LD_ADDR_OWVAR 27
3764: PUSH
3765: LD_INT 1
3767: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3768: LD_ADDR_OWVAR 33
3772: PUSH
3773: LD_STRING SecondCharsGal
3775: ST_TO_ADDR
// hc_face_number := 55 ;
3776: LD_ADDR_OWVAR 34
3780: PUSH
3781: LD_INT 55
3783: ST_TO_ADDR
// hc_name := George McCarthy ;
3784: LD_ADDR_OWVAR 26
3788: PUSH
3789: LD_STRING George McCarthy
3791: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3792: LD_ADDR_OWVAR 29
3796: PUSH
3797: LD_INT 11
3799: PUSH
3800: LD_INT 10
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3807: LD_ADDR_OWVAR 30
3811: PUSH
3812: LD_INT 0
3814: PUSH
3815: LD_INT 0
3817: PUSH
3818: LD_INT 2
3820: PUSH
3821: LD_INT 0
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3830: LD_ADDR_OWVAR 31
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: LD_INT 2
3840: PUSH
3841: LD_INT 3
3843: PUSH
3844: LD_INT 1
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: ST_TO_ADDR
// un = CreateHuman ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: CALL_OW 44
3862: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3863: LD_VAR 0 3
3867: PPUSH
3868: LD_INT 12
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: CALL_OW 87
// wait ( 0 0$1 ) ;
3887: LD_INT 35
3889: PPUSH
3890: CALL_OW 67
// DialogueOn ;
3894: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3898: LD_VAR 0 3
3902: PPUSH
3903: LD_STRING D11d-Sol4-1
3905: PPUSH
3906: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3910: LD_EXP 1
3914: PPUSH
3915: LD_STRING D11d-JMM-1
3917: PPUSH
3918: CALL_OW 88
// DialogueOff ;
3922: CALL_OW 7
// end ; if number = 4 then
3926: LD_VAR 0 1
3930: PUSH
3931: LD_INT 4
3933: EQUAL
3934: IFFALSE 4098
// begin hc_class := 3 ;
3936: LD_ADDR_OWVAR 28
3940: PUSH
3941: LD_INT 3
3943: ST_TO_ADDR
// hc_sex := sex_female ;
3944: LD_ADDR_OWVAR 27
3948: PUSH
3949: LD_INT 2
3951: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING SecondCharsGal
3959: ST_TO_ADDR
// hc_face_number := 46 ;
3960: LD_ADDR_OWVAR 34
3964: PUSH
3965: LD_INT 46
3967: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3968: LD_ADDR_OWVAR 26
3972: PUSH
3973: LD_STRING Sylvia Creak
3975: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
3976: LD_ADDR_OWVAR 29
3980: PUSH
3981: LD_INT 10
3983: PUSH
3984: LD_INT 9
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
3991: LD_ADDR_OWVAR 30
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4014: LD_ADDR_OWVAR 31
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: LD_INT 3
4024: PUSH
4025: LD_INT 1
4027: PUSH
4028: LD_INT 1
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: ST_TO_ADDR
// un = CreateHuman ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 44
4046: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 12
4054: PPUSH
4055: LD_INT 1
4057: PPUSH
4058: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4062: LD_VAR 0 3
4066: PPUSH
4067: CALL_OW 87
// wait ( 0 0$1 ) ;
4071: LD_INT 35
4073: PPUSH
4074: CALL_OW 67
// DialogueOn ;
4078: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4082: LD_VAR 0 3
4086: PPUSH
4087: LD_STRING D11e-FSol4-1
4089: PPUSH
4090: CALL_OW 88
// DialogueOff ;
4094: CALL_OW 7
// end ; if number = 5 then
4098: LD_VAR 0 1
4102: PUSH
4103: LD_INT 5
4105: EQUAL
4106: IFFALSE 4282
// begin hc_class := 1 ;
4108: LD_ADDR_OWVAR 28
4112: PUSH
4113: LD_INT 1
4115: ST_TO_ADDR
// hc_sex := sex_female ;
4116: LD_ADDR_OWVAR 27
4120: PUSH
4121: LD_INT 2
4123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING SecondCharsGal
4131: ST_TO_ADDR
// hc_face_number := 37 ;
4132: LD_ADDR_OWVAR 34
4136: PUSH
4137: LD_INT 37
4139: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4140: LD_ADDR_OWVAR 26
4144: PUSH
4145: LD_STRING Margherite Simpson
4147: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4148: LD_ADDR_OWVAR 29
4152: PUSH
4153: LD_INT 11
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4163: LD_ADDR_OWVAR 30
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: LD_INT 1
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4186: LD_ADDR_OWVAR 31
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: ST_TO_ADDR
// un = CreateHuman ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: CALL_OW 44
4218: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4219: LD_VAR 0 3
4223: PPUSH
4224: LD_INT 12
4226: PPUSH
4227: LD_INT 1
4229: PPUSH
4230: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4234: LD_VAR 0 3
4238: PPUSH
4239: CALL_OW 87
// wait ( 0 0$1 ) ;
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 67
// DialogueOn ;
4250: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4254: LD_VAR 0 3
4258: PPUSH
4259: LD_STRING D11c-FSol3-1
4261: PPUSH
4262: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4266: LD_EXP 1
4270: PPUSH
4271: LD_STRING D11c-JMM-1
4273: PPUSH
4274: CALL_OW 88
// DialogueOff ;
4278: CALL_OW 7
// end ; if number = 6 then
4282: LD_VAR 0 1
4286: PUSH
4287: LD_INT 6
4289: EQUAL
4290: IFFALSE 4464
// begin hc_class := 1 ;
4292: LD_ADDR_OWVAR 28
4296: PUSH
4297: LD_INT 1
4299: ST_TO_ADDR
// hc_sex := sex_male ;
4300: LD_ADDR_OWVAR 27
4304: PUSH
4305: LD_INT 1
4307: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4308: LD_ADDR_OWVAR 33
4312: PUSH
4313: LD_STRING AmGalRemake
4315: ST_TO_ADDR
// hc_face_number := 1 ;
4316: LD_ADDR_OWVAR 34
4320: PUSH
4321: LD_INT 1
4323: ST_TO_ADDR
// hc_name := Charles Brown ;
4324: LD_ADDR_OWVAR 26
4328: PUSH
4329: LD_STRING Charles Brown
4331: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4332: LD_ADDR_OWVAR 29
4336: PUSH
4337: LD_INT 12
4339: PUSH
4340: LD_INT 11
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4347: LD_ADDR_OWVAR 30
4351: PUSH
4352: LD_INT 2
4354: PUSH
4355: LD_INT 0
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: LD_INT 0
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4370: LD_ADDR_OWVAR 31
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: LD_INT 0
4380: PUSH
4381: LD_INT 1
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: ST_TO_ADDR
// un = CreateHuman ;
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: CALL_OW 44
4402: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: LD_INT 1
4413: PPUSH
4414: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4418: LD_VAR 0 3
4422: PPUSH
4423: CALL_OW 87
// wait ( 0 0$1 ) ;
4427: LD_INT 35
4429: PPUSH
4430: CALL_OW 67
// DialogueOn ;
4434: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4438: LD_VAR 0 3
4442: PPUSH
4443: LD_STRING D4-Sol1-5
4445: PPUSH
4446: CALL_OW 88
// DialogueOff ;
4450: CALL_OW 7
// tempCharles = un ;
4454: LD_ADDR_EXP 13
4458: PUSH
4459: LD_VAR 0 3
4463: ST_TO_ADDR
// end ; if number = 7 then
4464: LD_VAR 0 1
4468: PUSH
4469: LD_INT 7
4471: EQUAL
4472: IFFALSE 4636
// begin hc_class := 1 ;
4474: LD_ADDR_OWVAR 28
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// hc_sex := sex_female ;
4482: LD_ADDR_OWVAR 27
4486: PUSH
4487: LD_INT 2
4489: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4490: LD_ADDR_OWVAR 33
4494: PUSH
4495: LD_STRING AmGalRemake
4497: ST_TO_ADDR
// hc_face_number := 2 ;
4498: LD_ADDR_OWVAR 34
4502: PUSH
4503: LD_INT 2
4505: ST_TO_ADDR
// hc_name := Johanna Holland ;
4506: LD_ADDR_OWVAR 26
4510: PUSH
4511: LD_STRING Johanna Holland
4513: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4514: LD_ADDR_OWVAR 29
4518: PUSH
4519: LD_INT 10
4521: PUSH
4522: LD_INT 10
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4529: LD_ADDR_OWVAR 30
4533: PUSH
4534: LD_INT 1
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4552: LD_ADDR_OWVAR 31
4556: PUSH
4557: LD_INT 1
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 1
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: ST_TO_ADDR
// un = CreateHuman ;
4575: LD_ADDR_VAR 0 3
4579: PUSH
4580: CALL_OW 44
4584: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_INT 12
4592: PPUSH
4593: LD_INT 1
4595: PPUSH
4596: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4600: LD_VAR 0 3
4604: PPUSH
4605: CALL_OW 87
// wait ( 0 0$1 ) ;
4609: LD_INT 35
4611: PPUSH
4612: CALL_OW 67
// DialogueOn ;
4616: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4620: LD_VAR 0 3
4624: PPUSH
4625: LD_STRING D11a-FSol2-1
4627: PPUSH
4628: CALL_OW 88
// DialogueOff ;
4632: CALL_OW 7
// end ; end ; end_of_file
4636: LD_VAR 0 2
4640: RET
// export function PrepareRussian ; var i ; begin
4641: LD_INT 0
4643: PPUSH
4644: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4645: LD_INT 3
4647: PPUSH
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 2
4653: PPUSH
4654: LD_EXP 34
4658: PPUSH
4659: LD_EXP 35
4663: PPUSH
4664: CALL_OW 12
4668: PPUSH
4669: LD_INT 2
4671: PPUSH
4672: LD_INT 4
4674: PPUSH
4675: CALL 5288 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4679: LD_INT 3
4681: PPUSH
4682: LD_INT 3
4684: PPUSH
4685: LD_INT 8
4687: PPUSH
4688: LD_EXP 34
4692: PPUSH
4693: LD_EXP 35
4697: PPUSH
4698: CALL_OW 12
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: LD_INT 4
4708: PPUSH
4709: CALL 5288 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4713: LD_INT 3
4715: PPUSH
4716: LD_INT 3
4718: PPUSH
4719: LD_INT 67
4721: PPUSH
4722: LD_EXP 34
4726: PPUSH
4727: LD_EXP 35
4731: PPUSH
4732: CALL_OW 12
4736: PPUSH
4737: LD_INT 1
4739: PPUSH
4740: LD_INT 2
4742: PPUSH
4743: CALL 5288 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4747: LD_INT 3
4749: PPUSH
4750: LD_INT 3
4752: PPUSH
4753: LD_INT 21
4755: PPUSH
4756: LD_EXP 34
4760: PPUSH
4761: LD_EXP 35
4765: PPUSH
4766: CALL_OW 12
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 6
4776: PPUSH
4777: CALL 5288 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4781: LD_INT 3
4783: PPUSH
4784: LD_INT 3
4786: PPUSH
4787: LD_INT 17
4789: PPUSH
4790: LD_EXP 34
4794: PPUSH
4795: LD_EXP 35
4799: PPUSH
4800: CALL_OW 12
4804: PPUSH
4805: LD_INT 3
4807: PPUSH
4808: LD_INT 6
4810: PPUSH
4811: CALL 5288 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4815: LD_INT 3
4817: PPUSH
4818: LD_INT 3
4820: PPUSH
4821: LD_INT 32
4823: PPUSH
4824: LD_EXP 34
4828: PPUSH
4829: LD_EXP 35
4833: PPUSH
4834: CALL_OW 12
4838: PPUSH
4839: LD_INT 4
4841: PPUSH
4842: LD_INT 2
4844: PPUSH
4845: CALL 5288 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4849: LD_ADDR_VAR 0 2
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 32
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: PUSH
4894: FOR_IN
4895: IFFALSE 4935
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4897: LD_INT 3
4899: PPUSH
4900: LD_INT 3
4902: PPUSH
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_EXP 34
4912: PPUSH
4913: LD_EXP 35
4917: PPUSH
4918: CALL_OW 12
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: CALL 5288 0 6
4933: GO 4894
4935: POP
4936: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_INT 22
4944: PUSH
4945: LD_INT 3
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 21
4954: PUSH
4955: LD_INT 3
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 30
4964: PUSH
4965: LD_INT 31
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: PPUSH
4977: CALL_OW 69
4981: PUSH
4982: FOR_IN
4983: IFFALSE 5011
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4985: LD_EXP 34
4989: PPUSH
4990: LD_EXP 35
4994: PPUSH
4995: CALL_OW 12
4999: PPUSH
5000: LD_VAR 0 2
5004: PPUSH
5005: CALL 5398 0 2
5009: GO 4982
5011: POP
5012: POP
// end ; end_of_file
5013: LD_VAR 0 1
5017: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
// if exist_mode then
5022: LD_VAR 0 2
5026: IFFALSE 5051
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5028: LD_ADDR_VAR 0 4
5032: PUSH
5033: LD_EXP 42
5037: PUSH
5038: LD_VAR 0 1
5042: STR
5043: PPUSH
5044: CALL_OW 34
5048: ST_TO_ADDR
// end else
5049: GO 5066
// begin unit := NewCharacter ( ident ) ;
5051: LD_ADDR_VAR 0 4
5055: PUSH
5056: LD_VAR 0 1
5060: PPUSH
5061: CALL_OW 25
5065: ST_TO_ADDR
// end ; result := unit ;
5066: LD_ADDR_VAR 0 3
5070: PUSH
5071: LD_VAR 0 4
5075: ST_TO_ADDR
// end ;
5076: LD_VAR 0 3
5080: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5081: LD_INT 0
5083: PPUSH
5084: PPUSH
5085: PPUSH
// rnd = rand ( 1 , characters ) ;
5086: LD_ADDR_VAR 0 6
5090: PUSH
5091: LD_INT 1
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 12
5103: ST_TO_ADDR
// for i = 1 to characters do
5104: LD_ADDR_VAR 0 5
5108: PUSH
5109: DOUBLE
5110: LD_INT 1
5112: DEC
5113: ST_TO_ADDR
5114: LD_VAR 0 1
5118: PUSH
5119: FOR_TO
5120: IFFALSE 5230
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5122: LD_VAR 0 5
5126: PUSH
5127: LD_VAR 0 6
5131: EQUAL
5132: PUSH
5133: LD_VAR 0 1
5137: PUSH
5138: LD_VAR 0 5
5142: ARRAY
5143: PPUSH
5144: CALL_OW 258
5148: PUSH
5149: LD_INT 1
5151: EQUAL
5152: AND
5153: IFFALSE 5175
// Say ( characters [ i ] , dialogMID ) ;
5155: LD_VAR 0 1
5159: PUSH
5160: LD_VAR 0 5
5164: ARRAY
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5175: LD_VAR 0 5
5179: PUSH
5180: LD_VAR 0 6
5184: EQUAL
5185: PUSH
5186: LD_VAR 0 1
5190: PUSH
5191: LD_VAR 0 5
5195: ARRAY
5196: PPUSH
5197: CALL_OW 258
5201: PUSH
5202: LD_INT 2
5204: EQUAL
5205: AND
5206: IFFALSE 5228
// Say ( characters [ i ] , dialogFID ) ;
5208: LD_VAR 0 1
5212: PUSH
5213: LD_VAR 0 5
5217: ARRAY
5218: PPUSH
5219: LD_VAR 0 3
5223: PPUSH
5224: CALL_OW 88
// end ;
5228: GO 5119
5230: POP
5231: POP
// end ;
5232: LD_VAR 0 4
5236: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5237: LD_INT 0
5239: PPUSH
5240: PPUSH
// for i in charactersList do
5241: LD_ADDR_VAR 0 4
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: FOR_IN
5252: IFFALSE 5281
// begin if IsOk ( i ) then
5254: LD_VAR 0 4
5258: PPUSH
5259: CALL_OW 302
5263: IFFALSE 5279
// SaveCharacters ( i , ident ) ;
5265: LD_VAR 0 4
5269: PPUSH
5270: LD_VAR 0 2
5274: PPUSH
5275: CALL_OW 38
// end ;
5279: GO 5251
5281: POP
5282: POP
// end ;
5283: LD_VAR 0 3
5287: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5288: LD_INT 0
5290: PPUSH
5291: PPUSH
5292: PPUSH
5293: PPUSH
// for i = 1 to count do
5294: LD_ADDR_VAR 0 8
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_VAR 0 6
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5391
// begin uc_side = side ;
5312: LD_ADDR_OWVAR 20
5316: PUSH
5317: LD_VAR 0 1
5321: ST_TO_ADDR
// uc_nation = nation ;
5322: LD_ADDR_OWVAR 21
5326: PUSH
5327: LD_VAR 0 2
5331: ST_TO_ADDR
// hc_gallery =  ;
5332: LD_ADDR_OWVAR 33
5336: PUSH
5337: LD_STRING 
5339: ST_TO_ADDR
// hc_name =  ;
5340: LD_ADDR_OWVAR 26
5344: PUSH
5345: LD_STRING 
5347: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_VAR 0 5
5355: PPUSH
5356: LD_VAR 0 4
5360: PPUSH
5361: CALL_OW 380
// un = CreateHuman ;
5365: LD_ADDR_VAR 0 10
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5375: LD_VAR 0 10
5379: PPUSH
5380: LD_VAR 0 3
5384: PPUSH
5385: CALL_OW 52
// end ;
5389: GO 5309
5391: POP
5392: POP
// end ;
5393: LD_VAR 0 7
5397: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5398: LD_INT 0
5400: PPUSH
5401: PPUSH
5402: PPUSH
// uc_side := GetSide ( b ) ;
5403: LD_ADDR_OWVAR 20
5407: PUSH
5408: LD_VAR 0 2
5412: PPUSH
5413: CALL_OW 255
5417: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5418: LD_ADDR_OWVAR 21
5422: PUSH
5423: LD_VAR 0 2
5427: PPUSH
5428: CALL_OW 248
5432: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5448: LD_ADDR_VAR 0 5
5452: PUSH
5453: LD_VAR 0 2
5457: PPUSH
5458: CALL_OW 254
5462: PUSH
5463: LD_INT 3
5465: MINUS
5466: ST_TO_ADDR
// if dir < 0 then
5467: LD_VAR 0 5
5471: PUSH
5472: LD_INT 0
5474: LESS
5475: IFFALSE 5491
// dir := 6 + dir ;
5477: LD_ADDR_VAR 0 5
5481: PUSH
5482: LD_INT 6
5484: PUSH
5485: LD_VAR 0 5
5489: PLUS
5490: ST_TO_ADDR
// un := CreateHuman ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: CALL_OW 44
5500: ST_TO_ADDR
// SetDir ( un , dir ) ;
5501: LD_VAR 0 4
5505: PPUSH
5506: LD_VAR 0 5
5510: PPUSH
5511: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5515: LD_VAR 0 4
5519: PPUSH
5520: LD_VAR 0 2
5524: PPUSH
5525: CALL_OW 52
// end ;
5529: LD_VAR 0 3
5533: RET
// export function PrepareDifficulty ; begin
5534: LD_INT 0
5536: PPUSH
// if Difficulty = 1 then
5537: LD_OWVAR 67
5541: PUSH
5542: LD_INT 1
5544: EQUAL
5545: IFFALSE 5563
// begin RuSolMinLevel = 3 ;
5547: LD_ADDR_EXP 34
5551: PUSH
5552: LD_INT 3
5554: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5555: LD_ADDR_EXP 35
5559: PUSH
5560: LD_INT 6
5562: ST_TO_ADDR
// end ; if Difficulty = 2 then
5563: LD_OWVAR 67
5567: PUSH
5568: LD_INT 2
5570: EQUAL
5571: IFFALSE 5589
// begin RuSolMinLevel = 5 ;
5573: LD_ADDR_EXP 34
5577: PUSH
5578: LD_INT 5
5580: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5581: LD_ADDR_EXP 35
5585: PUSH
5586: LD_INT 6
5588: ST_TO_ADDR
// end ; if Difficulty = 3 then
5589: LD_OWVAR 67
5593: PUSH
5594: LD_INT 3
5596: EQUAL
5597: IFFALSE 5615
// begin RuSolMinLevel = 5 ;
5599: LD_ADDR_EXP 34
5603: PUSH
5604: LD_INT 5
5606: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5607: LD_ADDR_EXP 35
5611: PUSH
5612: LD_INT 7
5614: ST_TO_ADDR
// end ; end ;
5615: LD_VAR 0 1
5619: RET
// export function ShowQuery1 ; begin
5620: LD_INT 0
5622: PPUSH
// case query ( QKill ) of 1 :
5623: LD_STRING QKill
5625: PPUSH
5626: CALL_OW 97
5630: PUSH
5631: LD_INT 1
5633: DOUBLE
5634: EQUAL
5635: IFTRUE 5639
5637: GO 5650
5639: POP
// begin result = 1 ;
5640: LD_ADDR_VAR 0 1
5644: PUSH
5645: LD_INT 1
5647: ST_TO_ADDR
// end ; 2 :
5648: GO 5689
5650: LD_INT 2
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// begin result = 2 ;
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 2
5666: ST_TO_ADDR
// end ; 3 :
5667: GO 5689
5669: LD_INT 3
5671: DOUBLE
5672: EQUAL
5673: IFTRUE 5677
5675: GO 5688
5677: POP
// begin result = 3 ;
5678: LD_ADDR_VAR 0 1
5682: PUSH
5683: LD_INT 3
5685: ST_TO_ADDR
// end ; end ;
5686: GO 5689
5688: POP
// end ;
5689: LD_VAR 0 1
5693: RET
// export function ShowQuery2 ; begin
5694: LD_INT 0
5696: PPUSH
// case query ( QKill2 ) of 1 :
5697: LD_STRING QKill2
5699: PPUSH
5700: CALL_OW 97
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5724
5713: POP
// begin result = 1 ;
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// end ; 2 :
5722: GO 5744
5724: LD_INT 2
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5743
5732: POP
// begin result = 2 ;
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// end ; end ;
5741: GO 5744
5743: POP
// end ;
5744: LD_VAR 0 1
5748: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
5753: PPUSH
5754: PPUSH
// for i = 1 to 72 do
5755: LD_ADDR_VAR 0 5
5759: PUSH
5760: DOUBLE
5761: LD_INT 1
5763: DEC
5764: ST_TO_ADDR
5765: LD_INT 72
5767: PUSH
5768: FOR_TO
5769: IFFALSE 5827
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5771: LD_VAR 0 5
5775: PPUSH
5776: LD_VAR 0 1
5780: PPUSH
5781: CALL_OW 321
5785: PUSH
5786: LD_INT 1
5788: EQUAL
5789: PUSH
5790: LD_VAR 0 5
5794: PPUSH
5795: LD_VAR 0 3
5799: PPUSH
5800: CALL_OW 482
5804: PUSH
5805: LD_INT 1
5807: EQUAL
5808: AND
5809: IFFALSE 5825
// AddComResearch ( lab , i ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_VAR 0 5
5820: PPUSH
5821: CALL_OW 184
5825: GO 5768
5827: POP
5828: POP
// end ;
5829: LD_VAR 0 4
5833: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
5838: PPUSH
5839: PPUSH
5840: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5841: LD_ADDR_VAR 0 6
5845: PUSH
5846: LD_INT 22
5848: PUSH
5849: LD_VAR 0 1
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 2
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 2
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 16
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 24
5888: PUSH
5889: LD_INT 1000
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: LIST
5900: PPUSH
5901: CALL_OW 69
5905: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5906: LD_ADDR_VAR 0 4
5910: PUSH
5911: LD_INT 22
5913: PUSH
5914: LD_VAR 0 1
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 21
5925: PUSH
5926: LD_INT 3
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: LD_INT 1000
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: PPUSH
5958: CALL_OW 69
5962: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5963: LD_VAR 0 4
5967: PUSH
5968: LD_INT 0
5970: GREATER
5971: PUSH
5972: LD_VAR 0 6
5976: PUSH
5977: LD_INT 0
5979: GREATER
5980: AND
5981: IFFALSE 6047
// begin for i in engineerOk_list do
5983: LD_ADDR_VAR 0 5
5987: PUSH
5988: LD_VAR 0 6
5992: PUSH
5993: FOR_IN
5994: IFFALSE 6045
// begin for j in buildings_list do
5996: LD_ADDR_VAR 0 7
6000: PUSH
6001: LD_VAR 0 4
6005: PUSH
6006: FOR_IN
6007: IFFALSE 6041
// begin AddComExitBuilding ( i ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: CALL_OW 182
// wait ( 0 0$1 ) ;
6018: LD_INT 35
6020: PPUSH
6021: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
6025: LD_VAR 0 5
6029: PPUSH
6030: LD_VAR 0 7
6034: PPUSH
6035: CALL_OW 190
// end ;
6039: GO 6006
6041: POP
6042: POP
// end ;
6043: GO 5993
6045: POP
6046: POP
// end ; if buildings_list = 0 then
6047: LD_VAR 0 4
6051: PUSH
6052: LD_INT 0
6054: EQUAL
6055: IFFALSE 6088
// begin for i in engineerOK_list do
6057: LD_ADDR_VAR 0 5
6061: PUSH
6062: LD_VAR 0 6
6066: PUSH
6067: FOR_IN
6068: IFFALSE 6086
// begin ComEnterUnit ( i , building ) ;
6070: LD_VAR 0 5
6074: PPUSH
6075: LD_VAR 0 2
6079: PPUSH
6080: CALL_OW 120
// end ;
6084: GO 6067
6086: POP
6087: POP
// end ; end ;
6088: LD_VAR 0 3
6092: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6093: LD_INT 0
6095: PPUSH
6096: PPUSH
6097: PPUSH
6098: PPUSH
6099: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_VAR 0 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 25
6119: PUSH
6120: LD_INT 4
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6136: LD_ADDR_VAR 0 9
6140: PUSH
6141: LD_VAR 0 3
6145: PPUSH
6146: LD_INT 22
6148: PUSH
6149: LD_VAR 0 1
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 1
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: LD_INT 750
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PPUSH
6208: CALL_OW 70
6212: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6213: LD_VAR 0 9
6217: PUSH
6218: LD_INT 0
6220: GREATER
6221: PUSH
6222: LD_VAR 0 6
6226: PUSH
6227: LD_INT 0
6229: GREATER
6230: AND
6231: IFFALSE 6358
// begin for i = 1 to damageUnits do
6233: LD_ADDR_VAR 0 7
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_VAR 0 9
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6273
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6251: LD_VAR 0 9
6255: PUSH
6256: LD_VAR 0 7
6260: ARRAY
6261: PPUSH
6262: LD_VAR 0 2
6266: PPUSH
6267: CALL_OW 113
6271: GO 6248
6273: POP
6274: POP
// for i in sci_list do
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 6
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6354
// begin ComExitBuilding ( i ) ;
6288: LD_VAR 0 7
6292: PPUSH
6293: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6297: LD_ADDR_VAR 0 8
6301: PUSH
6302: LD_VAR 0 2
6306: PPUSH
6307: LD_INT 22
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 70
6323: PUSH
6324: FOR_IN
6325: IFFALSE 6350
// begin AddComHeal ( i , j ) ;
6327: LD_VAR 0 7
6331: PPUSH
6332: LD_VAR 0 8
6336: PPUSH
6337: CALL_OW 188
// wait ( 1 1$0 ) ;
6341: LD_INT 2100
6343: PPUSH
6344: CALL_OW 67
// end ;
6348: GO 6324
6350: POP
6351: POP
// end ;
6352: GO 6285
6354: POP
6355: POP
// end else
6356: GO 6372
// begin AddComEnterUnit ( sci_list , build ) ;
6358: LD_VAR 0 6
6362: PPUSH
6363: LD_VAR 0 4
6367: PPUSH
6368: CALL_OW 180
// end ; end ;
6372: LD_VAR 0 5
6376: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6377: LD_INT 0
6379: PPUSH
6380: PPUSH
6381: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6382: LD_INT 22
6384: PUSH
6385: LD_VAR 0 1
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 21
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: PPUSH
6408: CALL_OW 69
6412: PUSH
6413: LD_VAR 0 3
6417: LESSEQUAL
6418: IFFALSE 6526
// begin for i = 1 to vehCount do
6420: LD_ADDR_VAR 0 9
6424: PUSH
6425: DOUBLE
6426: LD_INT 1
6428: DEC
6429: ST_TO_ADDR
6430: LD_VAR 0 3
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6524
// begin weapon = weaponTab [ i ] ;
6438: LD_ADDR_VAR 0 10
6442: PUSH
6443: LD_VAR 0 4
6447: PUSH
6448: LD_VAR 0 9
6452: ARRAY
6453: ST_TO_ADDR
// if weapon = 46 then
6454: LD_VAR 0 10
6458: PUSH
6459: LD_INT 46
6461: EQUAL
6462: IFFALSE 6493
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6464: LD_VAR 0 2
6468: PPUSH
6469: LD_INT 24
6471: PPUSH
6472: LD_VAR 0 5
6476: PPUSH
6477: LD_VAR 0 6
6481: PPUSH
6482: LD_VAR 0 10
6486: PPUSH
6487: CALL_OW 185
// end else
6491: GO 6522
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6493: LD_VAR 0 2
6497: PPUSH
6498: LD_VAR 0 7
6502: PPUSH
6503: LD_VAR 0 5
6507: PPUSH
6508: LD_VAR 0 6
6512: PPUSH
6513: LD_VAR 0 10
6517: PPUSH
6518: CALL_OW 185
// end ; end ;
6522: GO 6435
6524: POP
6525: POP
// end ; end ;
6526: LD_VAR 0 8
6530: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6531: LD_INT 0
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
6537: PPUSH
// for i := 1 to russianTanks do
6538: LD_ADDR_VAR 0 4
6542: PUSH
6543: DOUBLE
6544: LD_INT 1
6546: DEC
6547: ST_TO_ADDR
6548: LD_EXP 36
6552: PUSH
6553: FOR_TO
6554: IFFALSE 7036
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6556: LD_VAR 0 4
6560: PUSH
6561: LD_INT 5
6563: PUSH
6564: LD_INT 6
6566: PUSH
6567: LD_INT 6
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: LD_OWVAR 67
6579: ARRAY
6580: EQUAL
6581: IFFALSE 7034
// begin repeat wait ( 0 0$1 ) ;
6583: LD_INT 35
6585: PPUSH
6586: CALL_OW 67
// for i in russianTanks do
6590: LD_ADDR_VAR 0 4
6594: PUSH
6595: LD_EXP 36
6599: PUSH
6600: FOR_IN
6601: IFFALSE 7022
// begin if GetLives ( i ) < 659 then
6603: LD_VAR 0 4
6607: PPUSH
6608: CALL_OW 256
6612: PUSH
6613: LD_INT 659
6615: LESS
6616: IFFALSE 6704
// begin tmp = i ;
6618: LD_ADDR_VAR 0 5
6622: PUSH
6623: LD_VAR 0 4
6627: ST_TO_ADDR
// for i := 1 to russianTanks do
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: DOUBLE
6634: LD_INT 1
6636: DEC
6637: ST_TO_ADDR
6638: LD_EXP 36
6642: PUSH
6643: FOR_TO
6644: IFFALSE 6702
// begin if tmp = russianTanks [ i ] then
6646: LD_VAR 0 5
6650: PUSH
6651: LD_EXP 36
6655: PUSH
6656: LD_VAR 0 4
6660: ARRAY
6661: EQUAL
6662: IFFALSE 6700
// begin russianTanks = Delete ( russianTanks , i ) ;
6664: LD_ADDR_EXP 36
6668: PUSH
6669: LD_EXP 36
6673: PPUSH
6674: LD_VAR 0 4
6678: PPUSH
6679: CALL_OW 3
6683: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6684: LD_ADDR_EXP 37
6688: PUSH
6689: LD_EXP 37
6693: PUSH
6694: LD_VAR 0 5
6698: ADD
6699: ST_TO_ADDR
// end ; end ;
6700: GO 6643
6702: POP
6703: POP
// end ; wait ( 0 0$1 ) ;
6704: LD_INT 35
6706: PPUSH
6707: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6711: LD_INT 23
6713: PPUSH
6714: LD_INT 22
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 70
6728: PUSH
6729: LD_INT 2
6731: GREATER
6732: IFFALSE 6842
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6734: LD_ADDR_VAR 0 6
6738: PUSH
6739: LD_INT 22
6741: PUSH
6742: LD_VAR 0 2
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PPUSH
6751: CALL_OW 69
6755: PPUSH
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 74
6765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6766: LD_ADDR_VAR 0 7
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_VAR 0 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: LD_INT 2
6785: PUSH
6786: LD_INT 59
6788: PUSH
6789: EMPTY
6790: LIST
6791: PUSH
6792: LD_INT 21
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: LD_INT 21
6804: PUSH
6805: LD_INT 2
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: EMPTY
6823: LIST
6824: PPUSH
6825: CALL_OW 69
6829: PPUSH
6830: LD_VAR 0 4
6834: PPUSH
6835: CALL_OW 74
6839: ST_TO_ADDR
// end else
6840: GO 6954
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6842: LD_ADDR_VAR 0 6
6846: PUSH
6847: LD_INT 23
6849: PPUSH
6850: LD_INT 22
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 71
6866: PPUSH
6867: LD_VAR 0 4
6871: PPUSH
6872: CALL_OW 74
6876: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6877: LD_ADDR_VAR 0 7
6881: PUSH
6882: LD_INT 23
6884: PPUSH
6885: LD_INT 22
6887: PUSH
6888: LD_VAR 0 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 2
6899: PUSH
6900: LD_INT 59
6902: PUSH
6903: EMPTY
6904: LIST
6905: PUSH
6906: LD_INT 21
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 21
6918: PUSH
6919: LD_INT 2
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: PPUSH
6939: CALL_OW 71
6943: PPUSH
6944: LD_VAR 0 4
6948: PPUSH
6949: CALL_OW 74
6953: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6954: LD_VAR 0 4
6958: PPUSH
6959: LD_VAR 0 6
6963: PPUSH
6964: CALL_OW 296
6968: PUSH
6969: LD_INT 8
6971: PLUS
6972: PUSH
6973: LD_VAR 0 4
6977: PPUSH
6978: LD_VAR 0 7
6982: PPUSH
6983: CALL_OW 296
6987: LESS
6988: IFFALSE 7006
// begin ComAttackUnit ( i , target1 ) ;
6990: LD_VAR 0 4
6994: PPUSH
6995: LD_VAR 0 6
6999: PPUSH
7000: CALL_OW 115
// end else
7004: GO 7020
// begin ComAttackUnit ( i , target2 ) ;
7006: LD_VAR 0 4
7010: PPUSH
7011: LD_VAR 0 7
7015: PPUSH
7016: CALL_OW 115
// end ; end ;
7020: GO 6600
7022: POP
7023: POP
// until russianTanks = 0 ;
7024: LD_EXP 36
7028: PUSH
7029: LD_INT 0
7031: EQUAL
7032: IFFALSE 6583
// end ; end ;
7034: GO 6553
7036: POP
7037: POP
// end ;
7038: LD_VAR 0 3
7042: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
7052: PPUSH
7053: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7054: LD_ADDR_VAR 0 8
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 21
7073: PUSH
7074: LD_INT 2
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 24
7083: PUSH
7084: LD_INT 660
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: LD_INT 58
7096: PUSH
7097: EMPTY
7098: LIST
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: LD_INT 34
7105: PUSH
7106: LD_INT 43
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 34
7115: PUSH
7116: LD_INT 44
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 34
7125: PUSH
7126: LD_INT 46
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7155: LD_ADDR_VAR 0 9
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_VAR 0 1
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 3
7184: PUSH
7185: LD_INT 24
7187: PUSH
7188: LD_INT 660
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7209: LD_ADDR_VAR 0 10
7213: PUSH
7214: LD_VAR 0 2
7218: PPUSH
7219: LD_INT 22
7221: PUSH
7222: LD_VAR 0 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 21
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 3
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: LD_INT 1000
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 70
7267: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7268: LD_ADDR_VAR 0 11
7272: PUSH
7273: LD_VAR 0 2
7277: PPUSH
7278: LD_INT 22
7280: PUSH
7281: LD_VAR 0 1
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: PUSH
7300: LD_INT 24
7302: PUSH
7303: LD_INT 1000
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 58
7312: PUSH
7313: EMPTY
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PPUSH
7322: CALL_OW 70
7326: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7327: LD_ADDR_VAR 0 12
7331: PUSH
7332: EMPTY
7333: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7334: LD_ADDR_VAR 0 13
7338: PUSH
7339: LD_VAR 0 2
7343: PPUSH
7344: LD_INT 22
7346: PUSH
7347: LD_VAR 0 1
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 25
7358: PUSH
7359: LD_INT 3
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 70
7374: ST_TO_ADDR
// if damageVehicle_list > 0 then
7375: LD_VAR 0 9
7379: PUSH
7380: LD_INT 0
7382: GREATER
7383: IFFALSE 7421
// for i in damageVehicle_list do
7385: LD_ADDR_VAR 0 6
7389: PUSH
7390: LD_VAR 0 9
7394: PUSH
7395: FOR_IN
7396: IFFALSE 7419
// ComMoveXY ( i , repX , repY ) ;
7398: LD_VAR 0 6
7402: PPUSH
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_VAR 0 4
7412: PPUSH
7413: CALL_OW 111
7417: GO 7395
7419: POP
7420: POP
// if vehicleNeedRepair_list > 0 then
7421: LD_VAR 0 10
7425: PUSH
7426: LD_INT 0
7428: GREATER
7429: IFFALSE 7516
// begin for i in vehicleNeedRepair_list do
7431: LD_ADDR_VAR 0 6
7435: PUSH
7436: LD_VAR 0 10
7440: PUSH
7441: FOR_IN
7442: IFFALSE 7514
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7444: LD_ADDR_VAR 0 12
7448: PUSH
7449: LD_VAR 0 12
7453: PUSH
7454: LD_VAR 0 6
7458: PPUSH
7459: CALL_OW 313
7463: ADD
7464: ST_TO_ADDR
// for j in mechanicInside_list do
7465: LD_ADDR_VAR 0 7
7469: PUSH
7470: LD_VAR 0 12
7474: PUSH
7475: FOR_IN
7476: IFFALSE 7510
// begin ComExitVehicle ( j ) ;
7478: LD_VAR 0 7
7482: PPUSH
7483: CALL_OW 121
// wait ( 0 0$1 ) ;
7487: LD_INT 35
7489: PPUSH
7490: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7494: LD_VAR 0 7
7498: PPUSH
7499: LD_VAR 0 6
7503: PPUSH
7504: CALL_OW 189
// end ;
7508: GO 7475
7510: POP
7511: POP
// end ;
7512: GO 7441
7514: POP
7515: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7516: LD_VAR 0 11
7520: PUSH
7521: LD_INT 0
7523: GREATER
7524: IFFALSE 7548
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7526: LD_VAR 0 13
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: PPUSH
7535: LD_VAR 0 11
7539: PUSH
7540: LD_INT 1
7542: ARRAY
7543: PPUSH
7544: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7548: LD_VAR 0 8
7552: PUSH
7553: LD_INT 0
7555: GREATER
7556: PUSH
7557: LD_EXP 37
7561: PUSH
7562: LD_INT 0
7564: GREATER
7565: AND
7566: IFFALSE 7809
// begin for i := 1 to vehicleOK_list do
7568: LD_ADDR_VAR 0 6
7572: PUSH
7573: DOUBLE
7574: LD_INT 1
7576: DEC
7577: ST_TO_ADDR
7578: LD_VAR 0 8
7582: PUSH
7583: FOR_TO
7584: IFFALSE 7807
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7586: LD_VAR 0 6
7590: PUSH
7591: LD_INT 5
7593: PUSH
7594: LD_INT 6
7596: PUSH
7597: LD_INT 6
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: LD_OWVAR 67
7609: ARRAY
7610: EQUAL
7611: IFFALSE 7805
// begin for i in vehicleOk_list do
7613: LD_ADDR_VAR 0 6
7617: PUSH
7618: LD_VAR 0 8
7622: PUSH
7623: FOR_IN
7624: IFFALSE 7644
// russianTanks = russianTanks ^ i ;
7626: LD_ADDR_EXP 36
7630: PUSH
7631: LD_EXP 36
7635: PUSH
7636: LD_VAR 0 6
7640: ADD
7641: ST_TO_ADDR
7642: GO 7623
7644: POP
7645: POP
// for i in vehicleOK_list do
7646: LD_ADDR_VAR 0 6
7650: PUSH
7651: LD_VAR 0 8
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7673
// SetFuel ( i , 100 ) ;
7659: LD_VAR 0 6
7663: PPUSH
7664: LD_INT 100
7666: PPUSH
7667: CALL_OW 240
7671: GO 7656
7673: POP
7674: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7675: LD_ADDR_EXP 37
7679: PUSH
7680: LD_EXP 37
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL_OW 3
7692: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7693: LD_ADDR_EXP 37
7697: PUSH
7698: LD_EXP 37
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL_OW 3
7710: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7711: LD_ADDR_EXP 37
7715: PUSH
7716: LD_EXP 37
7720: PPUSH
7721: LD_INT 1
7723: PPUSH
7724: CALL_OW 3
7728: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7729: LD_ADDR_EXP 37
7733: PUSH
7734: LD_EXP 37
7738: PPUSH
7739: LD_INT 1
7741: PPUSH
7742: CALL_OW 3
7746: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7747: LD_ADDR_EXP 37
7751: PUSH
7752: LD_EXP 37
7756: PPUSH
7757: LD_INT 1
7759: PPUSH
7760: CALL_OW 3
7764: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7765: LD_OWVAR 67
7769: PUSH
7770: LD_INT 2
7772: EQUAL
7773: PUSH
7774: LD_OWVAR 67
7778: PUSH
7779: LD_INT 3
7781: EQUAL
7782: OR
7783: IFFALSE 7803
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7785: LD_ADDR_EXP 37
7789: PUSH
7790: LD_EXP 37
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 3
7802: ST_TO_ADDR
// break ;
7803: GO 7807
// end ; end ;
7805: GO 7583
7807: POP
7808: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7809: LD_ADDR_VAR 0 6
7813: PUSH
7814: LD_VAR 0 2
7818: PPUSH
7819: LD_INT 22
7821: PUSH
7822: LD_VAR 0 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 25
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: NOT
7850: PUSH
7851: FOR_IN
7852: IFFALSE 7875
// ComMoveXY ( i , repX , repY ) ;
7854: LD_VAR 0 6
7858: PPUSH
7859: LD_VAR 0 3
7863: PPUSH
7864: LD_VAR 0 4
7868: PPUSH
7869: CALL_OW 111
7873: GO 7851
7875: POP
7876: POP
// end ;
7877: LD_VAR 0 5
7881: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7882: LD_INT 0
7884: PPUSH
7885: PPUSH
7886: PPUSH
7887: PPUSH
// enable ;
7888: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7889: LD_ADDR_VAR 0 7
7893: PUSH
7894: LD_VAR 0 3
7898: PPUSH
7899: CALL_OW 435
7903: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7904: LD_ADDR_VAR 0 6
7908: PUSH
7909: LD_INT 22
7911: PUSH
7912: LD_VAR 0 1
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 34
7923: PUSH
7924: LD_VAR 0 2
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PPUSH
7937: CALL_OW 69
7941: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7942: LD_VAR 0 6
7946: PUSH
7947: LD_INT 0
7949: GREATER
7950: PUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 435
7960: AND
7961: PUSH
7962: LD_VAR 0 7
7966: PUSH
7967: LD_INT 0
7969: GREATER
7970: AND
7971: IFFALSE 8020
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7973: LD_VAR 0 6
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: LD_VAR 0 7
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PPUSH
7991: LD_VAR 0 7
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PPUSH
8000: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8004: LD_VAR 0 6
8008: PUSH
8009: LD_INT 1
8011: ARRAY
8012: PPUSH
8013: LD_INT 100
8015: PPUSH
8016: CALL_OW 240
// end ; end ;
8020: LD_VAR 0 4
8024: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8025: LD_INT 0
8027: PPUSH
8028: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8029: LD_INT 22
8031: PUSH
8032: LD_VAR 0 1
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 2
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: PUSH
8060: LD_INT 0
8062: GREATER
8063: PUSH
8064: LD_INT 22
8066: PUSH
8067: LD_VAR 0 1
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 21
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: LD_INT 24
8091: PUSH
8092: LD_INT 1000
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 69
8112: PUSH
8113: LD_INT 0
8115: EQUAL
8116: AND
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: LD_INT 0
8125: GREATER
8126: AND
8127: IFFALSE 8226
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8129: LD_ADDR_VAR 0 4
8133: PUSH
8134: LD_INT 22
8136: PUSH
8137: LD_VAR 0 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 25
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 69
8164: PUSH
8165: FOR_IN
8166: IFFALSE 8224
// begin AddComExitBuilding ( i ) ;
8168: LD_VAR 0 4
8172: PPUSH
8173: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8177: LD_VAR 0 4
8181: PPUSH
8182: LD_VAR 0 2
8186: PUSH
8187: LD_INT 1
8189: ARRAY
8190: PPUSH
8191: LD_VAR 0 2
8195: PUSH
8196: LD_INT 2
8198: ARRAY
8199: PPUSH
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 3
8207: ARRAY
8208: PPUSH
8209: LD_VAR 0 2
8213: PUSH
8214: LD_INT 4
8216: ARRAY
8217: PPUSH
8218: CALL_OW 205
// end ;
8222: GO 8165
8224: POP
8225: POP
// end ; end ;
8226: LD_VAR 0 3
8230: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8231: LD_INT 0
8233: PPUSH
8234: PPUSH
8235: PPUSH
8236: PPUSH
8237: PPUSH
8238: PPUSH
8239: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8240: LD_ADDR_VAR 0 7
8244: PUSH
8245: LD_INT 22
8247: PUSH
8248: LD_VAR 0 1
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 25
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 56
8269: PUSH
8270: EMPTY
8271: LIST
8272: PUSH
8273: LD_INT 24
8275: PUSH
8276: LD_INT 700
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: PPUSH
8289: CALL_OW 69
8293: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8294: LD_ADDR_VAR 0 8
8298: PUSH
8299: LD_INT 22
8301: PUSH
8302: LD_VAR 0 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 30
8313: PUSH
8314: LD_INT 32
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 58
8323: PUSH
8324: EMPTY
8325: LIST
8326: PUSH
8327: LD_INT 24
8329: PUSH
8330: LD_INT 251
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8348: LD_ADDR_VAR 0 10
8352: PUSH
8353: LD_INT 22
8355: PUSH
8356: LD_VAR 0 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 5
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 8
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 9
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8413: LD_ADDR_VAR 0 9
8417: PUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL_OW 313
8427: PUSH
8428: LD_VAR 0 10
8432: DIFF
8433: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8434: LD_VAR 0 8
8438: PUSH
8439: LD_INT 0
8441: EQUAL
8442: PUSH
8443: LD_VAR 0 9
8447: PUSH
8448: LD_INT 0
8450: EQUAL
8451: AND
8452: IFFALSE 8498
// begin for i in soldiers_list do
8454: LD_ADDR_VAR 0 5
8458: PUSH
8459: LD_VAR 0 7
8463: PUSH
8464: FOR_IN
8465: IFFALSE 8494
// begin if IsOK ( build ) then
8467: LD_VAR 0 2
8471: PPUSH
8472: CALL_OW 302
8476: IFFALSE 8492
// ComEnterUnit ( i , build ) ;
8478: LD_VAR 0 5
8482: PPUSH
8483: LD_VAR 0 2
8487: PPUSH
8488: CALL_OW 120
// end ;
8492: GO 8464
8494: POP
8495: POP
// end else
8496: GO 8583
// begin for i = 1 to turretList do
8498: LD_ADDR_VAR 0 5
8502: PUSH
8503: DOUBLE
8504: LD_INT 1
8506: DEC
8507: ST_TO_ADDR
8508: LD_VAR 0 8
8512: PUSH
8513: FOR_TO
8514: IFFALSE 8581
// begin for j = 1 to temp do
8516: LD_ADDR_VAR 0 6
8520: PUSH
8521: DOUBLE
8522: LD_INT 1
8524: DEC
8525: ST_TO_ADDR
8526: LD_VAR 0 9
8530: PUSH
8531: FOR_TO
8532: IFFALSE 8577
// begin ComExitBuilding ( temp [ j ] ) ;
8534: LD_VAR 0 9
8538: PUSH
8539: LD_VAR 0 6
8543: ARRAY
8544: PPUSH
8545: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8549: LD_VAR 0 9
8553: PUSH
8554: LD_VAR 0 6
8558: ARRAY
8559: PPUSH
8560: LD_VAR 0 8
8564: PUSH
8565: LD_VAR 0 5
8569: ARRAY
8570: PPUSH
8571: CALL_OW 180
// end ;
8575: GO 8531
8577: POP
8578: POP
// end ;
8579: GO 8513
8581: POP
8582: POP
// end ; end ;
8583: LD_VAR 0 4
8587: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8595: LD_ADDR_VAR 0 6
8599: PUSH
8600: LD_INT 22
8602: PUSH
8603: LD_VAR 0 1
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 30
8617: PUSH
8618: LD_INT 31
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 30
8627: PUSH
8628: LD_INT 32
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 30
8637: PUSH
8638: LD_INT 33
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 30
8647: PUSH
8648: LD_INT 4
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 30
8657: PUSH
8658: LD_INT 5
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 69
8681: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8682: LD_ADDR_VAR 0 7
8686: PUSH
8687: LD_INT 22
8689: PUSH
8690: LD_VAR 0 2
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 21
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 58
8711: PUSH
8712: EMPTY
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8725: LD_VAR 0 6
8729: PUSH
8730: LD_INT 0
8732: GREATER
8733: PUSH
8734: LD_VAR 0 7
8738: PUSH
8739: LD_INT 0
8741: GREATER
8742: AND
8743: IFFALSE 8813
// begin for i in turretsList do
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_VAR 0 6
8754: PUSH
8755: FOR_IN
8756: IFFALSE 8811
// begin for j in enemyBuildings do
8758: LD_ADDR_VAR 0 5
8762: PUSH
8763: LD_VAR 0 7
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8807
// begin if GetDistUnits ( i , j ) < 20 then
8771: LD_VAR 0 4
8775: PPUSH
8776: LD_VAR 0 5
8780: PPUSH
8781: CALL_OW 296
8785: PUSH
8786: LD_INT 20
8788: LESS
8789: IFFALSE 8805
// begin ComAttackUnit ( i , j ) ;
8791: LD_VAR 0 4
8795: PPUSH
8796: LD_VAR 0 5
8800: PPUSH
8801: CALL_OW 115
// end ; end ;
8805: GO 8768
8807: POP
8808: POP
// end ;
8809: GO 8755
8811: POP
8812: POP
// end ; end ;
8813: LD_VAR 0 3
8817: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8818: LD_INT 0
8820: PPUSH
8821: PPUSH
8822: PPUSH
8823: PPUSH
8824: PPUSH
8825: PPUSH
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
// for i = 1 to medicCount do
8831: LD_ADDR_VAR 0 14
8835: PUSH
8836: DOUBLE
8837: LD_INT 1
8839: DEC
8840: ST_TO_ADDR
8841: LD_VAR 0 7
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8929
// begin uc_side = side ;
8849: LD_ADDR_OWVAR 20
8853: PUSH
8854: LD_VAR 0 1
8858: ST_TO_ADDR
// uc_nation = nation ;
8859: LD_ADDR_OWVAR 21
8863: PUSH
8864: LD_VAR 0 2
8868: ST_TO_ADDR
// hc_name =  ;
8869: LD_ADDR_OWVAR 26
8873: PUSH
8874: LD_STRING 
8876: ST_TO_ADDR
// hc_gallery =  ;
8877: LD_ADDR_OWVAR 33
8881: PUSH
8882: LD_STRING 
8884: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8885: LD_INT 0
8887: PPUSH
8888: LD_INT 4
8890: PPUSH
8891: LD_VAR 0 8
8895: PPUSH
8896: CALL_OW 380
// un = CreateHuman ;
8900: LD_ADDR_VAR 0 16
8904: PUSH
8905: CALL_OW 44
8909: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8910: LD_VAR 0 16
8914: PPUSH
8915: LD_VAR 0 9
8919: PPUSH
8920: LD_INT 0
8922: PPUSH
8923: CALL_OW 49
// end ;
8927: GO 8846
8929: POP
8930: POP
// for i = 1 to soldierCount do
8931: LD_ADDR_VAR 0 14
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_VAR 0 3
8945: PUSH
8946: FOR_TO
8947: IFFALSE 9029
// begin uc_side = side ;
8949: LD_ADDR_OWVAR 20
8953: PUSH
8954: LD_VAR 0 1
8958: ST_TO_ADDR
// uc_nation = nation ;
8959: LD_ADDR_OWVAR 21
8963: PUSH
8964: LD_VAR 0 2
8968: ST_TO_ADDR
// hc_name =  ;
8969: LD_ADDR_OWVAR 26
8973: PUSH
8974: LD_STRING 
8976: ST_TO_ADDR
// hc_gallery =  ;
8977: LD_ADDR_OWVAR 33
8981: PUSH
8982: LD_STRING 
8984: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8985: LD_INT 0
8987: PPUSH
8988: LD_INT 1
8990: PPUSH
8991: LD_VAR 0 8
8995: PPUSH
8996: CALL_OW 380
// un = CreateHuman ;
9000: LD_ADDR_VAR 0 16
9004: PUSH
9005: CALL_OW 44
9009: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9010: LD_VAR 0 16
9014: PPUSH
9015: LD_VAR 0 9
9019: PPUSH
9020: LD_INT 0
9022: PPUSH
9023: CALL_OW 49
// end ;
9027: GO 8946
9029: POP
9030: POP
// for i = 1 to sniperCount do
9031: LD_ADDR_VAR 0 14
9035: PUSH
9036: DOUBLE
9037: LD_INT 1
9039: DEC
9040: ST_TO_ADDR
9041: LD_VAR 0 4
9045: PUSH
9046: FOR_TO
9047: IFFALSE 9129
// begin uc_side = side ;
9049: LD_ADDR_OWVAR 20
9053: PUSH
9054: LD_VAR 0 1
9058: ST_TO_ADDR
// uc_nation = nation ;
9059: LD_ADDR_OWVAR 21
9063: PUSH
9064: LD_VAR 0 2
9068: ST_TO_ADDR
// hc_name =  ;
9069: LD_ADDR_OWVAR 26
9073: PUSH
9074: LD_STRING 
9076: ST_TO_ADDR
// hc_gallery =  ;
9077: LD_ADDR_OWVAR 33
9081: PUSH
9082: LD_STRING 
9084: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9085: LD_INT 0
9087: PPUSH
9088: LD_INT 5
9090: PPUSH
9091: LD_VAR 0 8
9095: PPUSH
9096: CALL_OW 380
// un = CreateHuman ;
9100: LD_ADDR_VAR 0 16
9104: PUSH
9105: CALL_OW 44
9109: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9110: LD_VAR 0 16
9114: PPUSH
9115: LD_VAR 0 9
9119: PPUSH
9120: LD_INT 0
9122: PPUSH
9123: CALL_OW 49
// end ;
9127: GO 9046
9129: POP
9130: POP
// for i = 1 to bazookCount do
9131: LD_ADDR_VAR 0 14
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_VAR 0 5
9145: PUSH
9146: FOR_TO
9147: IFFALSE 9229
// begin uc_side = side ;
9149: LD_ADDR_OWVAR 20
9153: PUSH
9154: LD_VAR 0 1
9158: ST_TO_ADDR
// uc_nation = nation ;
9159: LD_ADDR_OWVAR 21
9163: PUSH
9164: LD_VAR 0 2
9168: ST_TO_ADDR
// hc_name =  ;
9169: LD_ADDR_OWVAR 26
9173: PUSH
9174: LD_STRING 
9176: ST_TO_ADDR
// hc_gallery =  ;
9177: LD_ADDR_OWVAR 33
9181: PUSH
9182: LD_STRING 
9184: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9185: LD_INT 0
9187: PPUSH
9188: LD_INT 9
9190: PPUSH
9191: LD_VAR 0 8
9195: PPUSH
9196: CALL_OW 380
// un = CreateHuman ;
9200: LD_ADDR_VAR 0 16
9204: PUSH
9205: CALL_OW 44
9209: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9210: LD_VAR 0 16
9214: PPUSH
9215: LD_VAR 0 9
9219: PPUSH
9220: LD_INT 0
9222: PPUSH
9223: CALL_OW 49
// end ;
9227: GO 9146
9229: POP
9230: POP
// for i = 1 to mortalCount do
9231: LD_ADDR_VAR 0 14
9235: PUSH
9236: DOUBLE
9237: LD_INT 1
9239: DEC
9240: ST_TO_ADDR
9241: LD_VAR 0 6
9245: PUSH
9246: FOR_TO
9247: IFFALSE 9329
// begin uc_side = side ;
9249: LD_ADDR_OWVAR 20
9253: PUSH
9254: LD_VAR 0 1
9258: ST_TO_ADDR
// uc_nation = nation ;
9259: LD_ADDR_OWVAR 21
9263: PUSH
9264: LD_VAR 0 2
9268: ST_TO_ADDR
// hc_name =  ;
9269: LD_ADDR_OWVAR 26
9273: PUSH
9274: LD_STRING 
9276: ST_TO_ADDR
// hc_gallery =  ;
9277: LD_ADDR_OWVAR 33
9281: PUSH
9282: LD_STRING 
9284: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9285: LD_INT 0
9287: PPUSH
9288: LD_INT 8
9290: PPUSH
9291: LD_VAR 0 8
9295: PPUSH
9296: CALL_OW 380
// un = CreateHuman ;
9300: LD_ADDR_VAR 0 16
9304: PUSH
9305: CALL_OW 44
9309: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9310: LD_VAR 0 16
9314: PPUSH
9315: LD_VAR 0 9
9319: PPUSH
9320: LD_INT 0
9322: PPUSH
9323: CALL_OW 49
// end ;
9327: GO 9246
9329: POP
9330: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9331: LD_ADDR_VAR 0 19
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_VAR 0 1
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 2
9350: PUSH
9351: LD_INT 25
9353: PUSH
9354: LD_INT 1
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 25
9363: PUSH
9364: LD_INT 5
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 25
9373: PUSH
9374: LD_INT 8
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: LD_INT 25
9383: PUSH
9384: LD_INT 9
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PPUSH
9402: CALL_OW 69
9406: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9407: LD_ADDR_VAR 0 18
9411: PUSH
9412: LD_INT 22
9414: PUSH
9415: LD_VAR 0 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 25
9426: PUSH
9427: LD_INT 4
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 69
9442: ST_TO_ADDR
// for i in medic_list do
9443: LD_ADDR_VAR 0 14
9447: PUSH
9448: LD_VAR 0 18
9452: PUSH
9453: FOR_IN
9454: IFFALSE 9472
// ComMoveToArea ( i , healArea ) ;
9456: LD_VAR 0 14
9460: PPUSH
9461: LD_VAR 0 10
9465: PPUSH
9466: CALL_OW 113
9470: GO 9453
9472: POP
9473: POP
// if strategy = 1 then
9474: LD_VAR 0 12
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 10187
// begin repeat wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// for i in soldiersOK_list do
9491: LD_ADDR_VAR 0 14
9495: PUSH
9496: LD_VAR 0 19
9500: PUSH
9501: FOR_IN
9502: IFFALSE 9536
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9504: LD_VAR 0 14
9508: PPUSH
9509: LD_INT 80
9511: PPUSH
9512: LD_INT 109
9514: PPUSH
9515: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9519: LD_VAR 0 14
9523: PPUSH
9524: LD_INT 39
9526: PPUSH
9527: LD_INT 49
9529: PPUSH
9530: CALL_OW 174
// end ;
9534: GO 9501
9536: POP
9537: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9538: LD_INT 15
9540: PPUSH
9541: LD_INT 22
9543: PUSH
9544: LD_VAR 0 1
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 70
9557: PUSH
9558: LD_INT 0
9560: GREATER
9561: IFFALSE 9484
// repeat wait ( 0 0$1 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9570: LD_ADDR_VAR 0 17
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_VAR 0 1
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 24
9595: PUSH
9596: LD_INT 550
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 24
9609: PUSH
9610: LD_INT 250
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PPUSH
9626: CALL_OW 69
9630: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9631: LD_ADDR_VAR 0 19
9635: PUSH
9636: LD_INT 22
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: LD_INT 25
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 25
9663: PUSH
9664: LD_INT 5
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 25
9673: PUSH
9674: LD_INT 8
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 25
9683: PUSH
9684: LD_INT 9
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 24
9700: PUSH
9701: LD_INT 1000
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: PPUSH
9713: CALL_OW 69
9717: ST_TO_ADDR
// if medicCount > 0 then
9718: LD_VAR 0 7
9722: PUSH
9723: LD_INT 0
9725: GREATER
9726: IFFALSE 9800
// begin if damageUnit_list > 0 then
9728: LD_VAR 0 17
9732: PUSH
9733: LD_INT 0
9735: GREATER
9736: IFFALSE 9800
// begin for i in damageUnit_list do
9738: LD_ADDR_VAR 0 14
9742: PUSH
9743: LD_VAR 0 17
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9798
// begin ComMoveToArea ( i , healArea ) ;
9751: LD_VAR 0 14
9755: PPUSH
9756: LD_VAR 0 10
9760: PPUSH
9761: CALL_OW 113
// for j in medic_list do
9765: LD_ADDR_VAR 0 15
9769: PUSH
9770: LD_VAR 0 18
9774: PUSH
9775: FOR_IN
9776: IFFALSE 9794
// AddComHeal ( j , i ) ;
9778: LD_VAR 0 15
9782: PPUSH
9783: LD_VAR 0 14
9787: PPUSH
9788: CALL_OW 188
9792: GO 9775
9794: POP
9795: POP
// end ;
9796: GO 9748
9798: POP
9799: POP
// end ; end ; for i in soldiersOK_list do
9800: LD_ADDR_VAR 0 14
9804: PUSH
9805: LD_VAR 0 19
9809: PUSH
9810: FOR_IN
9811: IFFALSE 9987
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9813: LD_ADDR_VAR 0 22
9817: PUSH
9818: LD_INT 22
9820: PUSH
9821: LD_VAR 0 11
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PPUSH
9830: CALL_OW 69
9834: PPUSH
9835: LD_VAR 0 14
9839: PPUSH
9840: CALL_OW 74
9844: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9845: LD_ADDR_VAR 0 23
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_VAR 0 11
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 59
9867: PUSH
9868: EMPTY
9869: LIST
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 21
9883: PUSH
9884: LD_INT 2
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: PPUSH
9904: CALL_OW 69
9908: PPUSH
9909: LD_VAR 0 14
9913: PPUSH
9914: CALL_OW 74
9918: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9919: LD_VAR 0 14
9923: PPUSH
9924: LD_VAR 0 22
9928: PPUSH
9929: CALL_OW 296
9933: PUSH
9934: LD_INT 8
9936: PLUS
9937: PUSH
9938: LD_VAR 0 14
9942: PPUSH
9943: LD_VAR 0 23
9947: PPUSH
9948: CALL_OW 296
9952: LESS
9953: IFFALSE 9971
// begin ComAttackUnit ( i , target1 ) ;
9955: LD_VAR 0 14
9959: PPUSH
9960: LD_VAR 0 22
9964: PPUSH
9965: CALL_OW 115
// end else
9969: GO 9985
// begin ComAttackUnit ( i , target2 ) ;
9971: LD_VAR 0 14
9975: PPUSH
9976: LD_VAR 0 23
9980: PPUSH
9981: CALL_OW 115
// end ; end ;
9985: GO 9810
9987: POP
9988: POP
// for i in soldiersOK_list do
9989: LD_ADDR_VAR 0 14
9993: PUSH
9994: LD_VAR 0 19
9998: PUSH
9999: FOR_IN
10000: IFFALSE 10176
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10002: LD_ADDR_VAR 0 22
10006: PUSH
10007: LD_INT 22
10009: PUSH
10010: LD_VAR 0 11
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 69
10023: PPUSH
10024: LD_VAR 0 14
10028: PPUSH
10029: CALL_OW 74
10033: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10034: LD_ADDR_VAR 0 23
10038: PUSH
10039: LD_INT 22
10041: PUSH
10042: LD_VAR 0 11
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: LD_INT 59
10056: PUSH
10057: EMPTY
10058: LIST
10059: PUSH
10060: LD_INT 21
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 21
10072: PUSH
10073: LD_INT 2
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: PPUSH
10093: CALL_OW 69
10097: PPUSH
10098: LD_VAR 0 14
10102: PPUSH
10103: CALL_OW 74
10107: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10108: LD_VAR 0 14
10112: PPUSH
10113: LD_VAR 0 22
10117: PPUSH
10118: CALL_OW 296
10122: PUSH
10123: LD_INT 8
10125: PLUS
10126: PUSH
10127: LD_VAR 0 14
10131: PPUSH
10132: LD_VAR 0 23
10136: PPUSH
10137: CALL_OW 296
10141: LESS
10142: IFFALSE 10160
// begin ComAttackUnit ( i , target1 ) ;
10144: LD_VAR 0 14
10148: PPUSH
10149: LD_VAR 0 22
10153: PPUSH
10154: CALL_OW 115
// end else
10158: GO 10174
// begin ComAttackUnit ( i , target2 ) ;
10160: LD_VAR 0 14
10164: PPUSH
10165: LD_VAR 0 23
10169: PPUSH
10170: CALL_OW 115
// end ; end ;
10174: GO 9999
10176: POP
10177: POP
// until soldiersOK_list = [ ] ;
10178: LD_VAR 0 19
10182: PUSH
10183: EMPTY
10184: EQUAL
10185: IFFALSE 9563
// end ; if strategy = 2 then
10187: LD_VAR 0 12
10191: PUSH
10192: LD_INT 2
10194: EQUAL
10195: IFFALSE 10900
// begin repeat wait ( 0 0$1 ) ;
10197: LD_INT 35
10199: PPUSH
10200: CALL_OW 67
// for i in soldiersOK_list do
10204: LD_ADDR_VAR 0 14
10208: PUSH
10209: LD_VAR 0 19
10213: PUSH
10214: FOR_IN
10215: IFFALSE 10249
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10217: LD_VAR 0 14
10221: PPUSH
10222: LD_INT 117
10224: PPUSH
10225: LD_INT 97
10227: PPUSH
10228: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10232: LD_VAR 0 14
10236: PPUSH
10237: LD_INT 94
10239: PPUSH
10240: LD_INT 50
10242: PPUSH
10243: CALL_OW 174
// end ;
10247: GO 10214
10249: POP
10250: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10251: LD_INT 16
10253: PPUSH
10254: LD_INT 22
10256: PUSH
10257: LD_VAR 0 1
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 70
10270: PUSH
10271: LD_INT 0
10273: GREATER
10274: IFFALSE 10197
// repeat wait ( 0 0$3 ) ;
10276: LD_INT 105
10278: PPUSH
10279: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10283: LD_ADDR_VAR 0 17
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_VAR 0 1
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: LD_INT 3
10305: PUSH
10306: LD_INT 24
10308: PUSH
10309: LD_INT 550
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 24
10322: PUSH
10323: LD_INT 250
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 69
10343: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10344: LD_ADDR_VAR 0 19
10348: PUSH
10349: LD_INT 22
10351: PUSH
10352: LD_VAR 0 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 2
10363: PUSH
10364: LD_INT 25
10366: PUSH
10367: LD_INT 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 25
10376: PUSH
10377: LD_INT 5
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 25
10386: PUSH
10387: LD_INT 8
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 25
10396: PUSH
10397: LD_INT 9
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 24
10413: PUSH
10414: LD_INT 1000
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: ST_TO_ADDR
// if medicCount > 0 then
10431: LD_VAR 0 7
10435: PUSH
10436: LD_INT 0
10438: GREATER
10439: IFFALSE 10513
// begin if damageUnit_list > 0 then
10441: LD_VAR 0 17
10445: PUSH
10446: LD_INT 0
10448: GREATER
10449: IFFALSE 10513
// begin for i in damageUnit_list do
10451: LD_ADDR_VAR 0 14
10455: PUSH
10456: LD_VAR 0 17
10460: PUSH
10461: FOR_IN
10462: IFFALSE 10511
// begin ComMoveToArea ( i , healArea ) ;
10464: LD_VAR 0 14
10468: PPUSH
10469: LD_VAR 0 10
10473: PPUSH
10474: CALL_OW 113
// for j in medic_list do
10478: LD_ADDR_VAR 0 15
10482: PUSH
10483: LD_VAR 0 18
10487: PUSH
10488: FOR_IN
10489: IFFALSE 10507
// AddComHeal ( j , i ) ;
10491: LD_VAR 0 15
10495: PPUSH
10496: LD_VAR 0 14
10500: PPUSH
10501: CALL_OW 188
10505: GO 10488
10507: POP
10508: POP
// end ;
10509: GO 10461
10511: POP
10512: POP
// end ; end ; for i in soldiersOK_list do
10513: LD_ADDR_VAR 0 14
10517: PUSH
10518: LD_VAR 0 19
10522: PUSH
10523: FOR_IN
10524: IFFALSE 10700
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10526: LD_ADDR_VAR 0 22
10530: PUSH
10531: LD_INT 22
10533: PUSH
10534: LD_VAR 0 11
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 69
10547: PPUSH
10548: LD_VAR 0 14
10552: PPUSH
10553: CALL_OW 74
10557: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10558: LD_ADDR_VAR 0 23
10562: PUSH
10563: LD_INT 22
10565: PUSH
10566: LD_VAR 0 11
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 2
10577: PUSH
10578: LD_INT 59
10580: PUSH
10581: EMPTY
10582: LIST
10583: PUSH
10584: LD_INT 21
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: PPUSH
10617: CALL_OW 69
10621: PPUSH
10622: LD_VAR 0 14
10626: PPUSH
10627: CALL_OW 74
10631: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10632: LD_VAR 0 14
10636: PPUSH
10637: LD_VAR 0 22
10641: PPUSH
10642: CALL_OW 296
10646: PUSH
10647: LD_INT 8
10649: PLUS
10650: PUSH
10651: LD_VAR 0 14
10655: PPUSH
10656: LD_VAR 0 23
10660: PPUSH
10661: CALL_OW 296
10665: LESS
10666: IFFALSE 10684
// begin ComAttackUnit ( i , target1 ) ;
10668: LD_VAR 0 14
10672: PPUSH
10673: LD_VAR 0 22
10677: PPUSH
10678: CALL_OW 115
// end else
10682: GO 10698
// begin ComAttackUnit ( i , target2 ) ;
10684: LD_VAR 0 14
10688: PPUSH
10689: LD_VAR 0 23
10693: PPUSH
10694: CALL_OW 115
// end ; end ;
10698: GO 10523
10700: POP
10701: POP
// for i in soldiersOK_list do
10702: LD_ADDR_VAR 0 14
10706: PUSH
10707: LD_VAR 0 19
10711: PUSH
10712: FOR_IN
10713: IFFALSE 10889
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10715: LD_ADDR_VAR 0 22
10719: PUSH
10720: LD_INT 22
10722: PUSH
10723: LD_VAR 0 11
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PPUSH
10732: CALL_OW 69
10736: PPUSH
10737: LD_VAR 0 14
10741: PPUSH
10742: CALL_OW 74
10746: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10747: LD_ADDR_VAR 0 23
10751: PUSH
10752: LD_INT 22
10754: PUSH
10755: LD_VAR 0 11
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 2
10766: PUSH
10767: LD_INT 59
10769: PUSH
10770: EMPTY
10771: LIST
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 21
10785: PUSH
10786: LD_INT 2
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: EMPTY
10804: LIST
10805: PPUSH
10806: CALL_OW 69
10810: PPUSH
10811: LD_VAR 0 14
10815: PPUSH
10816: CALL_OW 74
10820: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10821: LD_VAR 0 14
10825: PPUSH
10826: LD_VAR 0 22
10830: PPUSH
10831: CALL_OW 296
10835: PUSH
10836: LD_INT 8
10838: PLUS
10839: PUSH
10840: LD_VAR 0 14
10844: PPUSH
10845: LD_VAR 0 23
10849: PPUSH
10850: CALL_OW 296
10854: LESS
10855: IFFALSE 10873
// begin ComAttackUnit ( i , target1 ) ;
10857: LD_VAR 0 14
10861: PPUSH
10862: LD_VAR 0 22
10866: PPUSH
10867: CALL_OW 115
// end else
10871: GO 10887
// begin ComAttackUnit ( i , target2 ) ;
10873: LD_VAR 0 14
10877: PPUSH
10878: LD_VAR 0 23
10882: PPUSH
10883: CALL_OW 115
// end ; end ;
10887: GO 10712
10889: POP
10890: POP
// until soldiersOK_list = [ ] ;
10891: LD_VAR 0 19
10895: PUSH
10896: EMPTY
10897: EQUAL
10898: IFFALSE 10276
// end ; end ; end_of_file
10900: LD_VAR 0 13
10904: RET
// every 0 0$01 do
10905: GO 10907
10907: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10908: LD_INT 22
10910: PUSH
10911: LD_INT 1
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 2
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 69
10936: PUSH
10937: LD_INT 0
10939: EQUAL
10940: IFFALSE 10954
// SetClass ( JMM , 2 ) ;
10942: LD_EXP 1
10946: PPUSH
10947: LD_INT 2
10949: PPUSH
10950: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10954: LD_STRING M1
10956: PPUSH
10957: CALL_OW 337
// case difficulty of 1 :
10961: LD_OWVAR 67
10965: PUSH
10966: LD_INT 1
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 10984
10974: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10975: LD_STRING M1-1
10977: PPUSH
10978: CALL_OW 337
10982: GO 11021
10984: LD_INT 2
10986: DOUBLE
10987: EQUAL
10988: IFTRUE 10992
10990: GO 11002
10992: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10993: LD_STRING M1-2
10995: PPUSH
10996: CALL_OW 337
11000: GO 11021
11002: LD_INT 3
11004: DOUBLE
11005: EQUAL
11006: IFTRUE 11010
11008: GO 11020
11010: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11011: LD_STRING M1-3
11013: PPUSH
11014: CALL_OW 337
11018: GO 11021
11020: POP
// ChangeMissionObjectives ( M1cont ) ;
11021: LD_STRING M1cont
11023: PPUSH
11024: CALL_OW 337
// SaveForQuickRestart ;
11028: CALL_OW 22
// end ;
11032: END
// every 0 0$1 do
11033: GO 11035
11035: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11036: LD_INT 350
11038: PPUSH
11039: LD_INT 875
11041: PPUSH
11042: CALL_OW 12
11046: PPUSH
11047: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11051: LD_INT 5
11053: PPUSH
11054: LD_INT 4
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 55
// wait ( 0 0$15 ) ;
11064: LD_INT 525
11066: PPUSH
11067: CALL_OW 67
// if IsOk ( Lisa ) then
11071: LD_EXP 2
11075: PPUSH
11076: CALL_OW 302
11080: IFFALSE 11096
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11082: LD_EXP 2
11086: PPUSH
11087: LD_STRING DR0-Lisa-1
11089: PPUSH
11090: CALL_OW 88
// end else
11094: GO 11218
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11096: LD_INT 22
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 21
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 26
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 2
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: LD_INT 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: LD_INT 3
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 25
11161: PUSH
11162: LD_INT 4
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 69
11186: PUSH
11187: LD_EXP 1
11191: PUSH
11192: LD_EXP 8
11196: PUSH
11197: LD_EXP 5
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: DIFF
11207: PPUSH
11208: LD_STRING DR0-Sol1-1
11210: PPUSH
11211: LD_STRING DR0-Sol1-1
11213: PPUSH
11214: CALL 5081 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11218: LD_INT 22
11220: PUSH
11221: LD_INT 1
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 21
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 26
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 25
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 2
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 25
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 4
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: PPUSH
11304: CALL_OW 69
11308: PUSH
11309: LD_EXP 1
11313: PUSH
11314: LD_EXP 8
11318: PUSH
11319: LD_EXP 5
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_STRING DR0-Sol2-1
11332: PPUSH
11333: LD_STRING DR0-Sol2-1
11335: PPUSH
11336: CALL 5081 0 3
// if IsOk ( Cyrus ) then
11340: LD_EXP 4
11344: PPUSH
11345: CALL_OW 302
11349: IFFALSE 11363
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11351: LD_EXP 4
11355: PPUSH
11356: LD_STRING DR0-Cyrus-1
11358: PPUSH
11359: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11363: LD_EXP 1
11367: PPUSH
11368: LD_STRING DR0-JMM-1
11370: PPUSH
11371: CALL_OW 88
// end ;
11375: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11376: LD_EXP 5
11380: PPUSH
11381: CALL_OW 302
11385: PUSH
11386: LD_INT 22
11388: PUSH
11389: LD_INT 1
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 16
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PPUSH
11410: CALL_OW 69
11414: PUSH
11415: LD_INT 0
11417: GREATER
11418: AND
11419: IFFALSE 11697
11421: GO 11423
11423: DISABLE
// begin DialogueOn ;
11424: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11428: LD_EXP 5
11432: PPUSH
11433: LD_STRING D10-Frank-1
11435: PPUSH
11436: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11440: LD_INT 22
11442: PUSH
11443: LD_INT 1
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 21
11452: PUSH
11453: LD_INT 1
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 2
11462: PUSH
11463: LD_INT 25
11465: PUSH
11466: LD_INT 1
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 25
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 25
11485: PUSH
11486: LD_INT 3
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 4
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: PUSH
11520: LD_EXP 1
11524: PUSH
11525: LD_EXP 5
11529: PUSH
11530: LD_EXP 2
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: DIFF
11540: PPUSH
11541: LD_STRING D10-Sol1-1
11543: PPUSH
11544: LD_STRING D10-FSol1-1
11546: PPUSH
11547: CALL 5081 0 3
// Say ( Frank , D10-Frank-2 ) ;
11551: LD_EXP 5
11555: PPUSH
11556: LD_STRING D10-Frank-2
11558: PPUSH
11559: CALL_OW 88
// if IsOK ( Lisa ) then
11563: LD_EXP 2
11567: PPUSH
11568: CALL_OW 302
11572: IFFALSE 11588
// begin Say ( Lisa , D10-Lisa-2 ) ;
11574: LD_EXP 2
11578: PPUSH
11579: LD_STRING D10-Lisa-2
11581: PPUSH
11582: CALL_OW 88
// end else
11586: GO 11693
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11588: LD_INT 22
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 2
11610: PUSH
11611: LD_INT 25
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 25
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 25
11633: PUSH
11634: LD_INT 3
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 25
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: PPUSH
11663: CALL_OW 69
11667: PUSH
11668: LD_EXP 1
11672: PUSH
11673: LD_EXP 5
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: DIFF
11682: PPUSH
11683: LD_STRING D10-Sol1-2
11685: PPUSH
11686: LD_STRING D10-FSol1-2
11688: PPUSH
11689: CALL 5081 0 3
// end ; DialogueOff ;
11693: CALL_OW 7
// end ;
11697: END
// every 10 10$30 do
11698: GO 11700
11700: DISABLE
// begin HarrisonSupport ;
11701: CALL 2009 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11705: LD_EXP 17
11709: PPUSH
11710: CALL_OW 310
11714: PPUSH
11715: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11719: LD_EXP 17
11723: PPUSH
11724: LD_STRING DEng-Eng1-1
11726: PPUSH
11727: CALL_OW 88
// wait ( 1 1$0 ) ;
11731: LD_INT 2100
11733: PPUSH
11734: CALL_OW 67
// DialogueOn ;
11738: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11742: LD_EXP 14
11746: PPUSH
11747: LD_STRING DRem-Har-1
11749: PPUSH
11750: CALL_OW 94
// if contactWithRussian = 1 then
11754: LD_EXP 22
11758: PUSH
11759: LD_INT 1
11761: EQUAL
11762: IFFALSE 11778
// begin Say ( JMM , DRem-JMM-1 ) ;
11764: LD_EXP 1
11768: PPUSH
11769: LD_STRING DRem-JMM-1
11771: PPUSH
11772: CALL_OW 88
// end else
11776: GO 11790
// begin Say ( JMM , DRem-JMM-1a ) ;
11778: LD_EXP 1
11782: PPUSH
11783: LD_STRING DRem-JMM-1a
11785: PPUSH
11786: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11790: LD_EXP 14
11794: PPUSH
11795: LD_STRING DRem-Har-2
11797: PPUSH
11798: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11802: LD_STRING DenisInDelta
11804: PPUSH
11805: LD_INT 0
11807: PPUSH
11808: CALL_OW 30
11812: PUSH
11813: LD_INT 1
11815: EQUAL
11816: IFFALSE 11832
// begin Say ( JMM , DRem-JMM-2 ) ;
11818: LD_EXP 1
11822: PPUSH
11823: LD_STRING DRem-JMM-2
11825: PPUSH
11826: CALL_OW 88
// end else
11830: GO 11844
// begin Say ( JMM , DRem-JMM-2a ) ;
11832: LD_EXP 1
11836: PPUSH
11837: LD_STRING DRem-JMM-2a
11839: PPUSH
11840: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11844: LD_EXP 14
11848: PPUSH
11849: LD_STRING DRem-Har-3
11851: PPUSH
11852: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING DRem-JMM-3
11863: PPUSH
11864: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11868: LD_EXP 14
11872: PPUSH
11873: LD_STRING DRem-Har-4
11875: PPUSH
11876: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11880: LD_STRING DenisInDelta
11882: PPUSH
11883: LD_INT 0
11885: PPUSH
11886: CALL_OW 30
11890: PUSH
11891: LD_INT 1
11893: EQUAL
11894: IFFALSE 11922
// begin Say ( JMM , DRem-JMM-4 ) ;
11896: LD_EXP 1
11900: PPUSH
11901: LD_STRING DRem-JMM-4
11903: PPUSH
11904: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11908: LD_EXP 14
11912: PPUSH
11913: LD_STRING DRem-Har-5
11915: PPUSH
11916: CALL_OW 94
// end else
11920: GO 11955
// begin SetRestrict ( 36 , 1 , true ) ;
11922: LD_INT 36
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11935: LD_INT 15
11937: PPUSH
11938: LD_INT 1
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11948: LD_STRING MR
11950: PPUSH
11951: CALL_OW 337
// end ; DialogueOff ;
11955: CALL_OW 7
// end ;
11959: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11960: LD_STRING DenisInDelta
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 30
11970: PUSH
11971: LD_INT 1
11973: EQUAL
11974: IFFALSE 12105
11976: GO 11978
11978: DISABLE
// begin PrepareDenis ;
11979: CALL 1930 0 0
// CenterNowOnUnits ( Denis ) ;
11983: LD_EXP 9
11987: PPUSH
11988: CALL_OW 87
// DialogueOn ;
11992: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11996: LD_EXP 9
12000: PPUSH
12001: LD_STRING DDen-Den-1
12003: PPUSH
12004: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12008: LD_EXP 1
12012: PPUSH
12013: LD_STRING DDen-JMM-1
12015: PPUSH
12016: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12020: LD_EXP 9
12024: PPUSH
12025: LD_STRING DDen-Den-2
12027: PPUSH
12028: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12032: LD_EXP 1
12036: PPUSH
12037: LD_STRING DDen-JMM-2
12039: PPUSH
12040: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12044: LD_EXP 9
12048: PPUSH
12049: LD_STRING DDen-Den-3
12051: PPUSH
12052: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12056: LD_EXP 1
12060: PPUSH
12061: LD_STRING DDen-JMM-3
12063: PPUSH
12064: CALL_OW 88
// DialogueOff ;
12068: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12072: LD_INT 36
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12085: LD_INT 15
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12098: LD_STRING MR
12100: PPUSH
12101: CALL_OW 337
// end ;
12105: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12106: CALL 12151 0 0
12110: PUSH
12111: LD_EXP 9
12115: PPUSH
12116: CALL_OW 302
12120: AND
12121: IFFALSE 12150
12123: GO 12125
12125: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12126: LD_EXP 9
12130: PPUSH
12131: LD_STRING DR1-Den-1
12133: PPUSH
12134: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12138: LD_EXP 1
12142: PPUSH
12143: LD_STRING DR1-JMM-1
12145: PPUSH
12146: CALL_OW 88
// end ;
12150: END
// function CheckOptoLab ; var i ; begin
12151: LD_INT 0
12153: PPUSH
12154: PPUSH
// result = false ;
12155: LD_ADDR_VAR 0 1
12159: PUSH
12160: LD_INT 0
12162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_INT 1
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 2
12180: PUSH
12181: LD_INT 30
12183: PUSH
12184: LD_INT 7
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 30
12193: PUSH
12194: LD_INT 8
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: PUSH
12215: FOR_IN
12216: IFFALSE 12268
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12218: LD_VAR 0 2
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 268
12230: PUSH
12231: LD_INT 15
12233: EQUAL
12234: PUSH
12235: LD_VAR 0 2
12239: PPUSH
12240: LD_INT 2
12242: PPUSH
12243: CALL_OW 268
12247: PUSH
12248: LD_INT 15
12250: EQUAL
12251: OR
12252: IFFALSE 12264
// begin result = true ;
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// break ;
12262: GO 12268
// end ; break ;
12264: GO 12268
// end ;
12266: GO 12215
12268: POP
12269: POP
// end ;
12270: LD_VAR 0 1
12274: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12275: LD_INT 15
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 321
12285: PUSH
12286: LD_INT 2
12288: EQUAL
12289: PUSH
12290: LD_EXP 9
12294: PPUSH
12295: CALL_OW 302
12299: AND
12300: IFFALSE 12532
12302: GO 12304
12304: DISABLE
// begin DialogueOn ;
12305: CALL_OW 6
// if IsOK ( Denis ) then
12309: LD_EXP 9
12313: PPUSH
12314: CALL_OW 302
12318: IFFALSE 12334
// begin Say ( Denis , DR2-Den-1 ) ;
12320: LD_EXP 9
12324: PPUSH
12325: LD_STRING DR2-Den-1
12327: PPUSH
12328: CALL_OW 88
// end else
12332: GO 12393
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12334: LD_INT 22
12336: PUSH
12337: LD_INT 1
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 21
12346: PUSH
12347: LD_INT 1
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 25
12356: PUSH
12357: LD_INT 4
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: PPUSH
12369: CALL_OW 69
12373: PUSH
12374: LD_EXP 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: DIFF
12382: PPUSH
12383: LD_STRING DR2-Sci1-1
12385: PPUSH
12386: LD_STRING DR2-FSci1-1
12388: PPUSH
12389: CALL 5081 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12393: LD_EXP 1
12397: PPUSH
12398: LD_STRING DR2-JMM-1
12400: PPUSH
12401: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12405: LD_INT 22
12407: PUSH
12408: LD_INT 1
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 25
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 25
12440: PUSH
12441: LD_INT 2
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 3
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 25
12460: PUSH
12461: LD_INT 4
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: LD_EXP 9
12494: PUSH
12495: LD_EXP 8
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: DIFF
12505: PPUSH
12506: LD_STRING DR2-Sol1-1
12508: PPUSH
12509: LD_STRING DR2-Sol1-11
12511: PPUSH
12512: CALL 5081 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12516: LD_EXP 1
12520: PPUSH
12521: LD_STRING DR2-JMM-2
12523: PPUSH
12524: CALL_OW 88
// DialogueOff ;
12528: CALL_OW 7
// end ;
12532: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12533: LD_INT 22
12535: PUSH
12536: LD_INT 1
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 30
12545: PUSH
12546: LD_INT 36
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 69
12561: PUSH
12562: LD_INT 0
12564: EQUAL
12565: PUSH
12566: LD_INT 22
12568: PUSH
12569: LD_INT 1
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 21
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 33
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 69
12605: PUSH
12606: LD_INT 0
12608: GREATER
12609: AND
12610: PUSH
12611: LD_EXP 23
12615: PUSH
12616: LD_INT 0
12618: EQUAL
12619: AND
12620: IFFALSE 12746
12622: GO 12624
12624: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12625: LD_INT 22
12627: PUSH
12628: LD_INT 1
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 21
12637: PUSH
12638: LD_INT 1
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 25
12647: PUSH
12648: LD_INT 3
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: PPUSH
12660: CALL_OW 69
12664: PUSH
12665: LD_EXP 1
12669: PUSH
12670: LD_EXP 6
12674: PUSH
12675: LD_EXP 7
12679: PUSH
12680: LD_EXP 9
12684: PUSH
12685: LD_EXP 15
12689: PUSH
12690: LD_EXP 3
12694: PUSH
12695: LD_EXP 4
12699: PUSH
12700: LD_EXP 2
12704: PUSH
12705: LD_EXP 5
12709: PUSH
12710: LD_EXP 8
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: DIFF
12727: PPUSH
12728: LD_STRING D3a-Mech1-1
12730: PPUSH
12731: LD_STRING D3a-Mech1-1
12733: PPUSH
12734: CALL 5081 0 3
// firstTower = 2 ;
12738: LD_ADDR_EXP 23
12742: PUSH
12743: LD_INT 2
12745: ST_TO_ADDR
// end ;
12746: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12747: LD_INT 22
12749: PUSH
12750: LD_INT 3
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 21
12759: PUSH
12760: LD_INT 3
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: PUSH
12776: LD_INT 0
12778: EQUAL
12779: IFFALSE 12894
12781: GO 12783
12783: DISABLE
12784: LD_INT 0
12786: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12787: LD_ADDR_VAR 0 1
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 21
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 2
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 1
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 25
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 25
12837: PUSH
12838: LD_INT 3
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 25
12847: PUSH
12848: LD_INT 4
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: PUSH
12872: FOR_IN
12873: IFFALSE 12892
// AddExperience ( i , 1 , 10000 ) ;
12875: LD_VAR 0 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: LD_INT 10000
12885: PPUSH
12886: CALL_OW 492
12890: GO 12872
12892: POP
12893: POP
// end ;
12894: PPOPN 1
12896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12897: LD_INT 22
12899: PUSH
12900: LD_INT 1
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 30
12909: PUSH
12910: LD_INT 36
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PPUSH
12921: CALL_OW 69
12925: PUSH
12926: LD_INT 0
12928: GREATER
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 21
12942: PUSH
12943: LD_INT 2
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 33
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: PUSH
12970: LD_INT 0
12972: GREATER
12973: AND
12974: PUSH
12975: CALL 13557 0 0
12979: AND
12980: IFFALSE 13554
12982: GO 12984
12984: DISABLE
12985: LD_INT 0
12987: PPUSH
12988: PPUSH
12989: PPUSH
12990: PPUSH
12991: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_INT 22
12999: PUSH
13000: LD_INT 1
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 30
13009: PUSH
13010: LD_INT 36
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PPUSH
13021: CALL_OW 69
13025: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13026: LD_ADDR_VAR 0 4
13030: PUSH
13031: LD_INT 22
13033: PUSH
13034: LD_INT 1
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 21
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 33
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 69
13070: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13071: LD_ADDR_VAR 0 5
13075: PUSH
13076: EMPTY
13077: ST_TO_ADDR
// for i in tmpControlTowers do
13078: LD_ADDR_VAR 0 1
13082: PUSH
13083: LD_VAR 0 3
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13552
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13091: LD_EXP 1
13095: PPUSH
13096: CALL_OW 310
13100: PUSH
13101: LD_VAR 0 1
13105: EQUAL
13106: PUSH
13107: LD_EXP 1
13111: PPUSH
13112: CALL_OW 257
13116: PUSH
13117: LD_INT 3
13119: EQUAL
13120: AND
13121: IFFALSE 13251
// begin InGameOn ;
13123: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13127: LD_VAR 0 4
13131: PUSH
13132: LD_INT 1
13134: ARRAY
13135: PPUSH
13136: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13140: LD_EXP 1
13144: PPUSH
13145: LD_STRING D4a-JMM-1
13147: PPUSH
13148: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13152: LD_VAR 0 4
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PPUSH
13161: LD_EXP 1
13165: PPUSH
13166: CALL_OW 53
// wait ( 0 0$1 ) ;
13170: LD_INT 35
13172: PPUSH
13173: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13177: LD_VAR 0 4
13181: PUSH
13182: LD_INT 1
13184: ARRAY
13185: PPUSH
13186: LD_VAR 0 4
13190: PUSH
13191: LD_INT 1
13193: ARRAY
13194: PPUSH
13195: CALL_OW 250
13199: PUSH
13200: LD_INT 3
13202: PLUS
13203: PPUSH
13204: LD_VAR 0 4
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PPUSH
13213: CALL_OW 251
13217: PUSH
13218: LD_INT 2
13220: MINUS
13221: PPUSH
13222: CALL_OW 111
// wait ( 0 0$2 ) ;
13226: LD_INT 70
13228: PPUSH
13229: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13233: LD_EXP 1
13237: PPUSH
13238: LD_STRING D4b-JMM-1
13240: PPUSH
13241: CALL_OW 88
// InGameOff ;
13245: CALL_OW 9
// end else
13249: GO 13550
// begin InGameOn ;
13251: CALL_OW 8
// for j in UnitsInside ( i ) do
13255: LD_ADDR_VAR 0 2
13259: PUSH
13260: LD_VAR 0 1
13264: PPUSH
13265: CALL_OW 313
13269: PUSH
13270: FOR_IN
13271: IFFALSE 13306
// if GetClass ( j ) = 3 then
13273: LD_VAR 0 2
13277: PPUSH
13278: CALL_OW 257
13282: PUSH
13283: LD_INT 3
13285: EQUAL
13286: IFFALSE 13304
// tmpMechanicInside = tmpMechanicInside ^ j ;
13288: LD_ADDR_VAR 0 5
13292: PUSH
13293: LD_VAR 0 5
13297: PUSH
13298: LD_VAR 0 2
13302: ADD
13303: ST_TO_ADDR
13304: GO 13270
13306: POP
13307: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13308: LD_VAR 0 5
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: CALL_OW 258
13321: PUSH
13322: LD_INT 1
13324: EQUAL
13325: IFFALSE 13343
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13327: LD_VAR 0 5
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: LD_STRING D4a-Mech1-1
13338: PPUSH
13339: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13343: LD_VAR 0 5
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: CALL_OW 258
13356: PUSH
13357: LD_INT 2
13359: EQUAL
13360: IFFALSE 13378
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13362: LD_VAR 0 5
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: LD_STRING D4a-FMech1-1
13373: PPUSH
13374: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13378: LD_VAR 0 4
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13391: LD_VAR 0 4
13395: PUSH
13396: LD_INT 1
13398: ARRAY
13399: PPUSH
13400: LD_VAR 0 5
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PPUSH
13409: CALL_OW 53
// wait ( 0 0$1 ) ;
13413: LD_INT 35
13415: PPUSH
13416: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13420: LD_VAR 0 4
13424: PUSH
13425: LD_INT 1
13427: ARRAY
13428: PPUSH
13429: LD_VAR 0 4
13433: PUSH
13434: LD_INT 1
13436: ARRAY
13437: PPUSH
13438: CALL_OW 250
13442: PUSH
13443: LD_INT 3
13445: PLUS
13446: PPUSH
13447: LD_VAR 0 4
13451: PUSH
13452: LD_INT 1
13454: ARRAY
13455: PPUSH
13456: CALL_OW 251
13460: PUSH
13461: LD_INT 2
13463: MINUS
13464: PPUSH
13465: CALL_OW 111
// wait ( 0 0$2 ) ;
13469: LD_INT 70
13471: PPUSH
13472: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13476: LD_VAR 0 5
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 258
13489: PUSH
13490: LD_INT 1
13492: EQUAL
13493: IFFALSE 13511
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13495: LD_VAR 0 5
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: LD_STRING D4b-Mech1-1
13506: PPUSH
13507: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13511: LD_VAR 0 5
13515: PUSH
13516: LD_INT 1
13518: ARRAY
13519: PPUSH
13520: CALL_OW 258
13524: PUSH
13525: LD_INT 2
13527: EQUAL
13528: IFFALSE 13546
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13530: LD_VAR 0 5
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PPUSH
13539: LD_STRING D4b-FMech1-1
13541: PPUSH
13542: CALL_OW 88
// InGameOff ;
13546: CALL_OW 9
// end ; end ;
13550: GO 13088
13552: POP
13553: POP
// end ;
13554: PPOPN 5
13556: END
// function CheckMehInside ; var i , j ; begin
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
13561: PPUSH
// result = false ;
13562: LD_ADDR_VAR 0 1
13566: PUSH
13567: LD_INT 0
13569: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13570: LD_ADDR_VAR 0 2
13574: PUSH
13575: LD_INT 22
13577: PUSH
13578: LD_INT 1
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 36
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: PUSH
13604: FOR_IN
13605: IFFALSE 13656
// begin for j in UnitsInside ( i ) do
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 313
13621: PUSH
13622: FOR_IN
13623: IFFALSE 13652
// begin if GetClass ( j ) = 3 then
13625: LD_VAR 0 3
13629: PPUSH
13630: CALL_OW 257
13634: PUSH
13635: LD_INT 3
13637: EQUAL
13638: IFFALSE 13650
// begin result = true ;
13640: LD_ADDR_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// break ;
13648: GO 13652
// end ; end ;
13650: GO 13622
13652: POP
13653: POP
// end ;
13654: GO 13604
13656: POP
13657: POP
// end ;
13658: LD_VAR 0 1
13662: RET
// every 25 25$0 do
13663: GO 13665
13665: DISABLE
// begin PrepareKurt ;
13666: CALL 17163 0 0
// end ;
13670: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13671: LD_EXP 19
13675: PPUSH
13676: LD_INT 9
13678: PPUSH
13679: CALL_OW 308
13683: PUSH
13684: LD_EXP 21
13688: PUSH
13689: LD_INT 1
13691: EQUAL
13692: AND
13693: IFFALSE 13767
13695: GO 13697
13697: DISABLE
// begin RemoveUnit ( Kurt ) ;
13698: LD_EXP 19
13702: PPUSH
13703: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13707: LD_EXP 19
13711: PPUSH
13712: LD_STRING Kurt
13714: PPUSH
13715: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13719: LD_INT 1
13721: PPUSH
13722: LD_INT 2
13724: PPUSH
13725: CALL_OW 81
13729: PUSH
13730: LD_INT 0
13732: EQUAL
13733: IFFALSE 13743
// KurtStatus = 1 ;
13735: LD_ADDR_EXP 20
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13743: LD_INT 1
13745: PPUSH
13746: LD_INT 2
13748: PPUSH
13749: CALL_OW 81
13753: PUSH
13754: LD_INT 2
13756: EQUAL
13757: IFFALSE 13767
// KurtStatus = 2 ;
13759: LD_ADDR_EXP 20
13763: PUSH
13764: LD_INT 2
13766: ST_TO_ADDR
// end ;
13767: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13768: LD_INT 1
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: CALL_OW 81
13778: PUSH
13779: LD_INT 2
13781: EQUAL
13782: PUSH
13783: LD_EXP 19
13787: PPUSH
13788: CALL_OW 302
13792: AND
13793: IFFALSE 13818
13795: GO 13797
13797: DISABLE
// begin DialogueOn ;
13798: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13802: LD_EXP 19
13806: PPUSH
13807: LD_STRING D2a-Kurt-1
13809: PPUSH
13810: CALL_OW 88
// DialogueOff ;
13814: CALL_OW 7
// end ;
13818: END
// every 35 35$0 do
13819: GO 13821
13821: DISABLE
// begin PrepareJoan ;
13822: CALL 2481 0 0
// wait ( 1 1$0 ) ;
13826: LD_INT 2100
13828: PPUSH
13829: CALL_OW 67
// if IsOK ( Lisa ) then
13833: LD_EXP 2
13837: PPUSH
13838: CALL_OW 302
13842: IFFALSE 13972
// begin DialogueOn ;
13844: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13848: LD_EXP 2
13852: PPUSH
13853: LD_STRING D7-Lisa-1
13855: PPUSH
13856: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13860: LD_EXP 1
13864: PPUSH
13865: LD_STRING D7-JMM-1
13867: PPUSH
13868: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13872: LD_EXP 2
13876: PPUSH
13877: LD_STRING D7-Lisa-2
13879: PPUSH
13880: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13884: LD_EXP 1
13888: PPUSH
13889: LD_STRING D7-JMM-2
13891: PPUSH
13892: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13896: LD_EXP 2
13900: PPUSH
13901: LD_STRING D7-Lisa-3
13903: PPUSH
13904: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13908: LD_EXP 1
13912: PPUSH
13913: LD_STRING D7-JMM-3
13915: PPUSH
13916: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13920: LD_EXP 2
13924: PPUSH
13925: LD_STRING D7-Lisa-4
13927: PPUSH
13928: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13932: LD_EXP 1
13936: PPUSH
13937: LD_STRING D7-JMM-4
13939: PPUSH
13940: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13944: LD_EXP 1
13948: PPUSH
13949: LD_STRING D7-JMM-4a
13951: PPUSH
13952: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13956: LD_EXP 2
13960: PPUSH
13961: LD_STRING D7-Lisa-5
13963: PPUSH
13964: CALL_OW 88
// DialogueOff ;
13968: CALL_OW 7
// end ; end ;
13972: END
// every 0 0$1 do var i , others ;
13973: GO 13975
13975: DISABLE
13976: LD_INT 0
13978: PPUSH
13979: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
13980: LD_ADDR_VAR 0 2
13984: PUSH
13985: LD_INT 22
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 21
13997: PUSH
13998: LD_INT 1
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: LD_INT 25
14010: PUSH
14011: LD_INT 1
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 25
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 25
14030: PUSH
14031: LD_INT 3
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 25
14040: PUSH
14041: LD_INT 4
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PUSH
14065: LD_EXP 13
14069: PUSH
14070: EMPTY
14071: LIST
14072: DIFF
14073: ST_TO_ADDR
// for i in others do
14074: LD_ADDR_VAR 0 1
14078: PUSH
14079: LD_VAR 0 2
14083: PUSH
14084: FOR_IN
14085: IFFALSE 14122
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14087: LD_EXP 13
14091: PPUSH
14092: LD_VAR 0 1
14096: PPUSH
14097: CALL_OW 296
14101: PUSH
14102: LD_INT 6
14104: LESS
14105: IFFALSE 14120
// begin disable ;
14107: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14108: LD_EXP 13
14112: PPUSH
14113: LD_STRING D5-Sol1-1
14115: PPUSH
14116: CALL_OW 88
// end ; end ;
14120: GO 14084
14122: POP
14123: POP
// end ;
14124: PPOPN 2
14126: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14127: LD_INT 22
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 33
14139: PUSH
14140: LD_INT 2
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PUSH
14156: LD_INT 2
14158: GREATEREQUAL
14159: IFFALSE 14179
14161: GO 14163
14163: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14164: LD_STRING MRa
14166: PPUSH
14167: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14171: LD_ADDR_EXP 28
14175: PUSH
14176: LD_INT 1
14178: ST_TO_ADDR
// end ;
14179: END
// every 4 4$0 do
14180: GO 14182
14182: DISABLE
// PrepareRandoms ( 1 ) ;
14183: LD_INT 1
14185: PPUSH
14186: CALL 3517 0 1
14190: END
// every 10 10$0 do
14191: GO 14193
14193: DISABLE
// PrepareRandoms ( 2 ) ;
14194: LD_INT 2
14196: PPUSH
14197: CALL 3517 0 1
14201: END
// every 28 28$0 do
14202: GO 14204
14204: DISABLE
// PrepareRandoms ( 4 ) ;
14205: LD_INT 4
14207: PPUSH
14208: CALL 3517 0 1
14212: END
// every 32 32$0 do
14213: GO 14215
14215: DISABLE
// PrepareRandoms ( 5 ) ;
14216: LD_INT 5
14218: PPUSH
14219: CALL 3517 0 1
14223: END
// every 35 35$30 do
14224: GO 14226
14226: DISABLE
// PrepareRandoms ( 6 ) ;
14227: LD_INT 6
14229: PPUSH
14230: CALL 3517 0 1
14234: END
// every 37 37$20 do
14235: GO 14237
14237: DISABLE
// PrepareRandoms ( 7 ) ;
14238: LD_INT 7
14240: PPUSH
14241: CALL 3517 0 1
14245: END
// every 5 5$20 do
14246: GO 14248
14248: DISABLE
// begin DialogueOn ;
14249: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14253: LD_EXP 10
14257: PPUSH
14258: LD_STRING D12a-Sci-1
14260: PPUSH
14261: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14265: LD_EXP 1
14269: PPUSH
14270: LD_STRING D12a-JMM-1
14272: PPUSH
14273: CALL_OW 88
// DialogueOff ;
14277: CALL_OW 7
// cratesStatus = 1 ;
14281: LD_ADDR_EXP 38
14285: PUSH
14286: LD_INT 1
14288: ST_TO_ADDR
// end ;
14289: END
// every 13 13$0 do
14290: GO 14292
14292: DISABLE
// begin DialogueOn ;
14293: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14297: LD_EXP 10
14301: PPUSH
14302: LD_STRING D12b-Sci-1
14304: PPUSH
14305: CALL_OW 94
// DialogueOff ;
14309: CALL_OW 7
// cratesStatus = 2 ;
14313: LD_ADDR_EXP 38
14317: PUSH
14318: LD_INT 2
14320: ST_TO_ADDR
// end ;
14321: END
// every 32 32$0 do
14322: GO 14324
14324: DISABLE
// begin DialogueOn ;
14325: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14329: LD_EXP 10
14333: PPUSH
14334: LD_STRING D12c-Sci-1
14336: PPUSH
14337: CALL_OW 94
// DialogueOff ;
14341: CALL_OW 7
// wait ( 3 3$0 ) ;
14345: LD_INT 6300
14347: PPUSH
14348: CALL_OW 67
// DialogueOn ;
14352: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14356: LD_EXP 10
14360: PPUSH
14361: LD_STRING D12d-Sci-1
14363: PPUSH
14364: CALL_OW 94
// DialogueOff ;
14368: CALL_OW 7
// cratesStatus = 1 ;
14372: LD_ADDR_EXP 38
14376: PUSH
14377: LD_INT 1
14379: ST_TO_ADDR
// end ;
14380: END
// every 42 42$0 do
14381: GO 14383
14383: DISABLE
// begin DialogueOn ;
14384: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14388: LD_EXP 10
14392: PPUSH
14393: LD_STRING D12e-Sci-1
14395: PPUSH
14396: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14400: LD_EXP 1
14404: PPUSH
14405: LD_STRING D12e-JMM-1
14407: PPUSH
14408: CALL_OW 88
// DialogueOff ;
14412: CALL_OW 7
// cratesStatus = 2 ;
14416: LD_ADDR_EXP 38
14420: PUSH
14421: LD_INT 2
14423: ST_TO_ADDR
// end ;
14424: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14425: LD_INT 22
14427: PUSH
14428: LD_INT 6
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 34
14447: PUSH
14448: LD_INT 51
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: PUSH
14465: LD_INT 0
14467: GREATER
14468: IFFALSE 14551
14470: GO 14472
14472: DISABLE
14473: LD_INT 0
14475: PPUSH
// begin enable ;
14476: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14477: LD_ADDR_VAR 0 1
14481: PUSH
14482: LD_INT 22
14484: PUSH
14485: LD_INT 6
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: LD_INT 21
14497: PUSH
14498: LD_INT 1
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 21
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PPUSH
14524: CALL_OW 69
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14549
// ComAgressiveMove ( i , 138 , 168 ) ;
14532: LD_VAR 0 1
14536: PPUSH
14537: LD_INT 138
14539: PPUSH
14540: LD_INT 168
14542: PPUSH
14543: CALL_OW 114
14547: GO 14529
14549: POP
14550: POP
// end ;
14551: PPOPN 1
14553: END
// every 0 0$1 do var i ;
14554: GO 14556
14556: DISABLE
14557: LD_INT 0
14559: PPUSH
// begin enable ;
14560: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14561: LD_ADDR_VAR 0 1
14565: PUSH
14566: LD_INT 5
14568: PPUSH
14569: LD_INT 2
14571: PUSH
14572: LD_INT 22
14574: PUSH
14575: LD_INT 3
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_INT 6
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: PPUSH
14600: CALL_OW 70
14604: PUSH
14605: FOR_IN
14606: IFFALSE 14670
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14608: LD_INT 5
14610: PPUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 6
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 34
14623: PUSH
14624: LD_INT 51
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 70
14639: PUSH
14640: LD_INT 0
14642: GREATER
14643: IFFALSE 14659
// sendedConvoys = sendedConvoys + 1 ;
14645: LD_ADDR_EXP 39
14649: PUSH
14650: LD_EXP 39
14654: PUSH
14655: LD_INT 1
14657: PLUS
14658: ST_TO_ADDR
// RemoveUnit ( i ) ;
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 64
// end ;
14668: GO 14605
14670: POP
14671: POP
// end ; end_of_file
14672: PPOPN 1
14674: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14675: LD_VAR 0 1
14679: PUSH
14680: LD_INT 1
14682: EQUAL
14683: PUSH
14684: LD_VAR 0 2
14688: PUSH
14689: LD_INT 3
14691: EQUAL
14692: AND
14693: IFFALSE 14703
// contactWithRussian = 1 ;
14695: LD_ADDR_EXP 22
14699: PUSH
14700: LD_INT 1
14702: ST_TO_ADDR
// end ;
14703: PPOPN 2
14705: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 266
14715: PUSH
14716: LD_INT 36
14718: EQUAL
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 255
14729: PUSH
14730: LD_INT 1
14732: EQUAL
14733: AND
14734: PUSH
14735: LD_INT 22
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 21
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 33
14757: PUSH
14758: LD_INT 2
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: PUSH
14775: LD_INT 0
14777: EQUAL
14778: AND
14779: PUSH
14780: LD_EXP 23
14784: PUSH
14785: LD_INT 0
14787: EQUAL
14788: AND
14789: IFFALSE 14869
// begin firstTower = 1 ;
14791: LD_ADDR_EXP 23
14795: PUSH
14796: LD_INT 1
14798: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14799: LD_INT 22
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 21
14811: PUSH
14812: LD_INT 1
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 25
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 26
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: PPUSH
14845: CALL_OW 69
14849: PUSH
14850: LD_EXP 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: DIFF
14858: PPUSH
14859: LD_STRING D3b-Mech1-1
14861: PPUSH
14862: LD_STRING D3b-Mech1-1
14864: PPUSH
14865: CALL 5081 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 266
14878: PUSH
14879: LD_INT 0
14881: EQUAL
14882: PUSH
14883: LD_VAR 0 1
14887: PPUSH
14888: CALL_OW 255
14892: PUSH
14893: LD_INT 1
14895: EQUAL
14896: AND
14897: IFFALSE 14911
// SetBName ( building , theta ) ;
14899: LD_VAR 0 1
14903: PPUSH
14904: LD_STRING theta
14906: PPUSH
14907: CALL_OW 500
// if GetSide ( building ) = 3 then
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 255
14920: PUSH
14921: LD_INT 3
14923: EQUAL
14924: IFFALSE 14998
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14926: LD_ADDR_EXP 31
14930: PUSH
14931: LD_EXP 31
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 3
14943: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14944: LD_ADDR_EXP 31
14948: PUSH
14949: LD_EXP 31
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 3
14961: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14962: LD_ADDR_EXP 31
14966: PUSH
14967: LD_EXP 31
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: CALL_OW 3
14979: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14980: LD_ADDR_EXP 31
14984: PUSH
14985: LD_EXP 31
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 3
14997: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14998: LD_VAR 0 1
15002: PPUSH
15003: CALL_OW 255
15007: PUSH
15008: LD_INT 3
15010: EQUAL
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 266
15021: PUSH
15022: LD_INT 0
15024: EQUAL
15025: PUSH
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL_OW 266
15035: PUSH
15036: LD_INT 2
15038: EQUAL
15039: OR
15040: PUSH
15041: LD_VAR 0 1
15045: PPUSH
15046: CALL_OW 266
15050: PUSH
15051: LD_INT 4
15053: EQUAL
15054: OR
15055: PUSH
15056: EMPTY
15057: LIST
15058: AND
15059: IFFALSE 15070
// ComUpgrade ( building ) ;
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 255
15079: PUSH
15080: LD_INT 3
15082: EQUAL
15083: PUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 266
15093: PUSH
15094: LD_INT 32
15096: EQUAL
15097: AND
15098: IFFALSE 15139
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15100: LD_VAR 0 1
15104: PPUSH
15105: LD_INT 42
15107: PUSH
15108: LD_INT 43
15110: PUSH
15111: LD_INT 44
15113: PUSH
15114: LD_INT 46
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_INT 4
15128: PPUSH
15129: CALL_OW 12
15133: ARRAY
15134: PPUSH
15135: CALL_OW 208
// end ; end ;
15139: PPOPN 1
15141: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15142: LD_VAR 0 1
15146: PPUSH
15147: CALL_OW 255
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: PUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 247
15165: PUSH
15166: LD_INT 1
15168: EQUAL
15169: AND
15170: IFFALSE 15246
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 257
15181: PUSH
15182: LD_INT 1
15184: EQUAL
15185: PUSH
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 257
15195: PUSH
15196: LD_INT 2
15198: EQUAL
15199: OR
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 257
15210: PUSH
15211: LD_INT 3
15213: EQUAL
15214: OR
15215: PUSH
15216: LD_VAR 0 1
15220: PPUSH
15221: CALL_OW 257
15225: PUSH
15226: LD_INT 4
15228: EQUAL
15229: OR
15230: IFFALSE 15246
// unitLost = unitLost + 1 ;
15232: LD_ADDR_EXP 30
15236: PUSH
15237: LD_EXP 30
15241: PUSH
15242: LD_INT 1
15244: PLUS
15245: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 255
15255: PUSH
15256: LD_INT 3
15258: EQUAL
15259: PUSH
15260: LD_VAR 0 1
15264: PPUSH
15265: CALL_OW 247
15269: PUSH
15270: LD_INT 3
15272: EQUAL
15273: AND
15274: IFFALSE 15966
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 266
15285: PUSH
15286: LD_INT 31
15288: EQUAL
15289: PUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 266
15299: PUSH
15300: LD_INT 32
15302: EQUAL
15303: OR
15304: PUSH
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 266
15314: PUSH
15315: LD_INT 36
15317: EQUAL
15318: OR
15319: PUSH
15320: LD_VAR 0 1
15324: PPUSH
15325: CALL_OW 266
15329: PUSH
15330: LD_INT 0
15332: EQUAL
15333: OR
15334: PUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 266
15344: PUSH
15345: LD_INT 24
15347: EQUAL
15348: OR
15349: PUSH
15350: LD_VAR 0 1
15354: PPUSH
15355: CALL_OW 266
15359: PUSH
15360: LD_INT 17
15362: EQUAL
15363: OR
15364: PUSH
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 266
15374: PUSH
15375: LD_INT 25
15377: EQUAL
15378: OR
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL_OW 266
15389: PUSH
15390: LD_INT 19
15392: EQUAL
15393: OR
15394: PUSH
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL_OW 266
15404: PUSH
15405: LD_INT 20
15407: EQUAL
15408: OR
15409: PUSH
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 266
15419: PUSH
15420: LD_INT 18
15422: EQUAL
15423: OR
15424: PUSH
15425: LD_VAR 0 1
15429: PPUSH
15430: CALL_OW 266
15434: PUSH
15435: LD_INT 21
15437: EQUAL
15438: OR
15439: PUSH
15440: LD_VAR 0 1
15444: PPUSH
15445: CALL_OW 266
15449: PUSH
15450: LD_INT 23
15452: EQUAL
15453: OR
15454: PUSH
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 266
15464: PUSH
15465: LD_INT 16
15467: EQUAL
15468: OR
15469: PUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: CALL_OW 266
15479: PUSH
15480: LD_INT 6
15482: EQUAL
15483: OR
15484: PUSH
15485: LD_VAR 0 1
15489: PPUSH
15490: CALL_OW 266
15494: PUSH
15495: LD_INT 29
15497: EQUAL
15498: OR
15499: PUSH
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 266
15509: PUSH
15510: LD_INT 26
15512: EQUAL
15513: OR
15514: PUSH
15515: LD_VAR 0 1
15519: PPUSH
15520: CALL_OW 266
15524: PUSH
15525: LD_INT 30
15527: EQUAL
15528: OR
15529: PUSH
15530: LD_VAR 0 1
15534: PPUSH
15535: CALL_OW 266
15539: PUSH
15540: LD_INT 28
15542: EQUAL
15543: OR
15544: PUSH
15545: LD_VAR 0 1
15549: PPUSH
15550: CALL_OW 266
15554: PUSH
15555: LD_INT 27
15557: EQUAL
15558: OR
15559: PUSH
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 266
15569: PUSH
15570: LD_INT 33
15572: EQUAL
15573: OR
15574: PUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 266
15584: PUSH
15585: LD_INT 2
15587: EQUAL
15588: OR
15589: PUSH
15590: LD_VAR 0 1
15594: PPUSH
15595: CALL_OW 266
15599: PUSH
15600: LD_INT 4
15602: EQUAL
15603: OR
15604: IFFALSE 15690
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15606: LD_ADDR_EXP 31
15610: PUSH
15611: LD_EXP 31
15615: PUSH
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 266
15625: ADD
15626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15627: LD_ADDR_EXP 31
15631: PUSH
15632: LD_EXP 31
15636: PUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 250
15646: ADD
15647: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15648: LD_ADDR_EXP 31
15652: PUSH
15653: LD_EXP 31
15657: PUSH
15658: LD_VAR 0 1
15662: PPUSH
15663: CALL_OW 251
15667: ADD
15668: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15669: LD_ADDR_EXP 31
15673: PUSH
15674: LD_EXP 31
15678: PUSH
15679: LD_VAR 0 1
15683: PPUSH
15684: CALL_OW 254
15688: ADD
15689: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 266
15699: PUSH
15700: LD_INT 1
15702: EQUAL
15703: IFFALSE 15782
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15705: LD_ADDR_EXP 31
15709: PUSH
15710: LD_EXP 31
15714: PUSH
15715: LD_INT 0
15717: ADD
15718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15719: LD_ADDR_EXP 31
15723: PUSH
15724: LD_EXP 31
15728: PUSH
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 250
15738: ADD
15739: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15740: LD_ADDR_EXP 31
15744: PUSH
15745: LD_EXP 31
15749: PUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 251
15759: ADD
15760: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15761: LD_ADDR_EXP 31
15765: PUSH
15766: LD_EXP 31
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 254
15780: ADD
15781: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15782: LD_VAR 0 1
15786: PPUSH
15787: CALL_OW 266
15791: PUSH
15792: LD_INT 3
15794: EQUAL
15795: IFFALSE 15874
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15797: LD_ADDR_EXP 31
15801: PUSH
15802: LD_EXP 31
15806: PUSH
15807: LD_INT 2
15809: ADD
15810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15811: LD_ADDR_EXP 31
15815: PUSH
15816: LD_EXP 31
15820: PUSH
15821: LD_VAR 0 1
15825: PPUSH
15826: CALL_OW 250
15830: ADD
15831: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15832: LD_ADDR_EXP 31
15836: PUSH
15837: LD_EXP 31
15841: PUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 251
15851: ADD
15852: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15853: LD_ADDR_EXP 31
15857: PUSH
15858: LD_EXP 31
15862: PUSH
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 254
15872: ADD
15873: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 266
15883: PUSH
15884: LD_INT 5
15886: EQUAL
15887: IFFALSE 15966
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15889: LD_ADDR_EXP 31
15893: PUSH
15894: LD_EXP 31
15898: PUSH
15899: LD_INT 4
15901: ADD
15902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15903: LD_ADDR_EXP 31
15907: PUSH
15908: LD_EXP 31
15912: PUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 250
15922: ADD
15923: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15924: LD_ADDR_EXP 31
15928: PUSH
15929: LD_EXP 31
15933: PUSH
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 251
15943: ADD
15944: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15945: LD_ADDR_EXP 31
15949: PUSH
15950: LD_EXP 31
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 254
15964: ADD
15965: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 257
15975: PUSH
15976: LD_INT 3
15978: EQUAL
15979: PUSH
15980: LD_VAR 0 1
15984: PPUSH
15985: CALL_OW 255
15989: PUSH
15990: LD_INT 3
15992: EQUAL
15993: AND
15994: PUSH
15995: LD_INT 21
15997: PPUSH
15998: CALL_OW 302
16002: AND
16003: PUSH
16004: LD_INT 21
16006: PPUSH
16007: CALL_OW 255
16011: PUSH
16012: LD_INT 3
16014: EQUAL
16015: AND
16016: IFFALSE 16084
// begin uc_side = 3 ;
16018: LD_ADDR_OWVAR 20
16022: PUSH
16023: LD_INT 3
16025: ST_TO_ADDR
// uc_nation = 3 ;
16026: LD_ADDR_OWVAR 21
16030: PUSH
16031: LD_INT 3
16033: ST_TO_ADDR
// hc_gallery :=  ;
16034: LD_ADDR_OWVAR 33
16038: PUSH
16039: LD_STRING 
16041: ST_TO_ADDR
// hc_name :=  ;
16042: LD_ADDR_OWVAR 26
16046: PUSH
16047: LD_STRING 
16049: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16050: LD_INT 0
16052: PPUSH
16053: LD_EXP 34
16057: PPUSH
16058: LD_EXP 35
16062: PPUSH
16063: CALL_OW 12
16067: PPUSH
16068: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16072: CALL_OW 44
16076: PPUSH
16077: LD_INT 21
16079: PPUSH
16080: CALL_OW 52
// end ; end ;
16084: PPOPN 1
16086: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16087: LD_INT 0
16089: PPUSH
16090: PPUSH
16091: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 264
16101: PUSH
16102: LD_INT 51
16104: EQUAL
16105: PUSH
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 255
16115: PUSH
16116: LD_INT 3
16118: EQUAL
16119: AND
16120: IFFALSE 16182
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16122: LD_ADDR_VAR 0 5
16126: PUSH
16127: LD_INT 2
16129: PPUSH
16130: CALL_OW 274
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 275
16142: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16143: LD_INT 2
16145: PPUSH
16146: CALL_OW 274
16150: PPUSH
16151: LD_INT 1
16153: PPUSH
16154: LD_VAR 0 5
16158: PUSH
16159: LD_INT 100
16161: MINUS
16162: PPUSH
16163: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16167: LD_VAR 0 1
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: LD_INT 100
16177: PPUSH
16178: CALL_OW 291
// end ; if building = rufabsupp then
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 17
16189: EQUAL
16190: IFFALSE 16204
// SetSide ( vehicle , 6 ) ;
16192: LD_VAR 0 1
16196: PPUSH
16197: LD_INT 6
16199: PPUSH
16200: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16204: LD_VAR 0 2
16208: PUSH
16209: LD_INT 21
16211: EQUAL
16212: PUSH
16213: LD_VAR 0 2
16217: PPUSH
16218: CALL_OW 255
16222: PUSH
16223: LD_INT 3
16225: EQUAL
16226: AND
16227: PUSH
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 264
16237: PUSH
16238: LD_INT 42
16240: EQUAL
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 264
16251: PUSH
16252: LD_INT 43
16254: EQUAL
16255: OR
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 264
16266: PUSH
16267: LD_INT 44
16269: EQUAL
16270: OR
16271: PUSH
16272: EMPTY
16273: LIST
16274: AND
16275: IFFALSE 16293
// russianTanks = russianTanks ^ vehicle ;
16277: LD_ADDR_EXP 36
16281: PUSH
16282: LD_EXP 36
16286: PUSH
16287: LD_VAR 0 1
16291: ADD
16292: ST_TO_ADDR
// end ;
16293: PPOPN 5
16295: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 255
16305: PUSH
16306: LD_INT 3
16308: EQUAL
16309: IFFALSE 16325
// tamedApemans = tamedApemans + 1 ;
16311: LD_ADDR_EXP 32
16315: PUSH
16316: LD_EXP 32
16320: PUSH
16321: LD_INT 1
16323: PLUS
16324: ST_TO_ADDR
// end ;
16325: PPOPN 2
16327: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16332: LD_VAR 0 1
16336: PPUSH
16337: CALL_OW 255
16341: PUSH
16342: LD_INT 3
16344: EQUAL
16345: PUSH
16346: LD_VAR 0 1
16350: PPUSH
16351: CALL_OW 247
16355: PUSH
16356: LD_INT 2
16358: EQUAL
16359: AND
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 264
16370: PUSH
16371: LD_INT 42
16373: EQUAL
16374: PUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 264
16384: PUSH
16385: LD_INT 43
16387: EQUAL
16388: OR
16389: PUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 264
16399: PUSH
16400: LD_INT 44
16402: EQUAL
16403: OR
16404: PUSH
16405: EMPTY
16406: LIST
16407: AND
16408: IFFALSE 16548
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16410: LD_INT 21
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 265
16422: PPUSH
16423: LD_VAR 0 1
16427: PPUSH
16428: CALL_OW 262
16432: PPUSH
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 263
16442: PPUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 264
16452: PPUSH
16453: CALL_OW 185
// for i in russianDamageTanks do
16457: LD_ADDR_VAR 0 2
16461: PUSH
16462: LD_EXP 37
16466: PUSH
16467: FOR_IN
16468: IFFALSE 16503
// if i = unit then
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 1
16479: EQUAL
16480: IFFALSE 16501
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16482: LD_ADDR_EXP 37
16486: PUSH
16487: LD_EXP 37
16491: PUSH
16492: LD_VAR 0 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: DIFF
16500: ST_TO_ADDR
16501: GO 16467
16503: POP
16504: POP
// tmpMeh = UnitsInside ( unit ) ;
16505: LD_ADDR_VAR 0 3
16509: PUSH
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 313
16519: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16520: LD_VAR 0 3
16524: PPUSH
16525: CALL_OW 121
// wait ( 0 0$01 ) ;
16529: LD_INT 35
16531: PPUSH
16532: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16536: LD_VAR 0 3
16540: PPUSH
16541: LD_INT 21
16543: PPUSH
16544: CALL_OW 120
// end ; end ;
16548: PPOPN 3
16550: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16551: LD_VAR 0 1
16555: PUSH
16556: LD_INT 21
16558: EQUAL
16559: PUSH
16560: LD_VAR 0 2
16564: PPUSH
16565: CALL_OW 255
16569: PUSH
16570: LD_INT 3
16572: EQUAL
16573: AND
16574: IFFALSE 16588
// SetLives ( human , 1000 ) ;
16576: LD_VAR 0 2
16580: PPUSH
16581: LD_INT 1000
16583: PPUSH
16584: CALL_OW 234
// end ; end_of_file
16588: PPOPN 2
16590: END
// every 0 0$30 trigger cratesStatus = 1 do
16591: LD_EXP 38
16595: PUSH
16596: LD_INT 1
16598: EQUAL
16599: IFFALSE 16663
16601: GO 16603
16603: DISABLE
// begin enable ;
16604: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16605: LD_INT 350
16607: PUSH
16608: LD_INT 1050
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 1
16617: PPUSH
16618: LD_INT 2
16620: PPUSH
16621: CALL_OW 12
16625: ARRAY
16626: PPUSH
16627: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16631: LD_INT 4
16633: PUSH
16634: LD_INT 5
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 1
16643: PPUSH
16644: LD_INT 2
16646: PPUSH
16647: CALL_OW 12
16651: ARRAY
16652: PPUSH
16653: LD_INT 7
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 55
// end ;
16663: END
// every 1 1$0 trigger cratesStatus = 2 do
16664: LD_EXP 38
16668: PUSH
16669: LD_INT 2
16671: EQUAL
16672: IFFALSE 16736
16674: GO 16676
16676: DISABLE
// begin enable ;
16677: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16678: LD_INT 3150
16680: PUSH
16681: LD_INT 4550
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 12
16698: ARRAY
16699: PPUSH
16700: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16704: LD_INT 2
16706: PUSH
16707: LD_INT 5
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 1
16716: PPUSH
16717: LD_INT 2
16719: PPUSH
16720: CALL_OW 12
16724: ARRAY
16725: PPUSH
16726: LD_INT 8
16728: PPUSH
16729: LD_INT 1
16731: PPUSH
16732: CALL_OW 55
// end ;
16736: END
// every 0 0$30 + 0 0$10 do
16737: GO 16739
16739: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16740: LD_INT 4
16742: PUSH
16743: LD_INT 5
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 1
16752: PPUSH
16753: LD_INT 2
16755: PPUSH
16756: CALL_OW 12
16760: ARRAY
16761: PPUSH
16762: LD_INT 8
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL_OW 55
// Wait ( 0 0$15 ) ;
16772: LD_INT 525
16774: PPUSH
16775: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16779: LD_INT 4
16781: PUSH
16782: LD_INT 5
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: LD_INT 1
16791: PPUSH
16792: LD_INT 2
16794: PPUSH
16795: CALL_OW 12
16799: ARRAY
16800: PPUSH
16801: LD_INT 8
16803: PPUSH
16804: LD_INT 1
16806: PPUSH
16807: CALL_OW 55
// Wait ( 0 0$20 ) ;
16811: LD_INT 700
16813: PPUSH
16814: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16818: LD_INT 4
16820: PUSH
16821: LD_INT 5
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 1
16830: PPUSH
16831: LD_INT 2
16833: PPUSH
16834: CALL_OW 12
16838: ARRAY
16839: PPUSH
16840: LD_INT 8
16842: PPUSH
16843: LD_INT 1
16845: PPUSH
16846: CALL_OW 55
// end ; end_of_file
16850: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16851: LD_EXP 24
16855: PUSH
16856: LD_INT 1
16858: EQUAL
16859: IFFALSE 17160
16861: GO 16863
16863: DISABLE
16864: LD_INT 0
16866: PPUSH
16867: PPUSH
16868: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: LD_INT 22
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 21
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: LD_INT 30
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 30
16909: PUSH
16910: LD_INT 1
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: ST_TO_ADDR
// for i in tmp do
16932: LD_ADDR_VAR 0 1
16936: PUSH
16937: LD_VAR 0 2
16941: PUSH
16942: FOR_IN
16943: IFFALSE 16976
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_VAR 0 3
16954: PUSH
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 274
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 275
16972: PLUS
16973: ST_TO_ADDR
16974: GO 16942
16976: POP
16977: POP
// strings = [ ] ;
16978: LD_ADDR_EXP 27
16982: PUSH
16983: EMPTY
16984: ST_TO_ADDR
// if tmp = 0 then
16985: LD_VAR 0 2
16989: PUSH
16990: LD_INT 0
16992: EQUAL
16993: IFFALSE 17018
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16995: LD_ADDR_EXP 27
16999: PUSH
17000: LD_EXP 27
17004: PUSH
17005: LD_STRING #Am06-1
17007: PUSH
17008: LD_EXP 25
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: ADD
17017: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17018: LD_VAR 0 2
17022: PUSH
17023: LD_INT 0
17025: GREATER
17026: PUSH
17027: LD_EXP 25
17031: PUSH
17032: LD_VAR 0 3
17036: GREATER
17037: AND
17038: IFFALSE 17069
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17040: LD_ADDR_EXP 27
17044: PUSH
17045: LD_EXP 27
17049: PUSH
17050: LD_STRING #Am06-1
17052: PUSH
17053: LD_EXP 25
17057: PUSH
17058: LD_VAR 0 3
17062: MINUS
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: ADD
17068: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17069: LD_VAR 0 2
17073: PUSH
17074: LD_INT 0
17076: GREATER
17077: PUSH
17078: LD_EXP 25
17082: PUSH
17083: LD_VAR 0 3
17087: LESSEQUAL
17088: AND
17089: IFFALSE 17112
// strings = strings ^ [ #Am06-1 , 0 ] ;
17091: LD_ADDR_EXP 27
17095: PUSH
17096: LD_EXP 27
17100: PUSH
17101: LD_STRING #Am06-1
17103: PUSH
17104: LD_INT 0
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: ADD
17111: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17112: LD_ADDR_EXP 26
17116: PUSH
17117: LD_EXP 26
17121: PUSH
17122: LD_INT 35
17124: MINUS
17125: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17126: LD_ADDR_EXP 27
17130: PUSH
17131: LD_EXP 27
17135: PUSH
17136: LD_STRING #Am06-2
17138: PUSH
17139: LD_EXP 26
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: ADD
17148: ST_TO_ADDR
// display_strings = strings ;
17149: LD_ADDR_OWVAR 47
17153: PUSH
17154: LD_EXP 27
17158: ST_TO_ADDR
// enable ;
17159: ENABLE
// end ; end_of_file
17160: PPOPN 3
17162: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
17170: PPUSH
17171: PPUSH
// j = 0 ;
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_INT 0
17179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17180: LD_INT 35
17182: PPUSH
17183: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: LD_INT 22
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 21
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 2
17214: PUSH
17215: LD_INT 25
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 25
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 25
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 25
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: PPUSH
17267: CALL_OW 69
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17379
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17275: LD_INT 22
17277: PUSH
17278: LD_INT 3
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 2
17287: PUSH
17288: LD_INT 21
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 21
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 21
17310: PUSH
17311: LD_INT 3
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 59
17320: PUSH
17321: EMPTY
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: PUSH
17331: LD_INT 91
17333: PUSH
17334: LD_VAR 0 2
17338: PUSH
17339: LD_INT 25
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 69
17356: NOT
17357: IFFALSE 17377
// begin tmp = i ;
17359: LD_ADDR_VAR 0 4
17363: PUSH
17364: LD_VAR 0 2
17368: ST_TO_ADDR
// j = 1 ;
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// end ; end ;
17377: GO 17272
17379: POP
17380: POP
// until j = 1 ;
17381: LD_VAR 0 3
17385: PUSH
17386: LD_INT 1
17388: EQUAL
17389: IFFALSE 17180
// blockSpawn = 1 ;
17391: LD_ADDR_EXP 29
17395: PUSH
17396: LD_INT 1
17398: ST_TO_ADDR
// uc_side = 2 ;
17399: LD_ADDR_OWVAR 20
17403: PUSH
17404: LD_INT 2
17406: ST_TO_ADDR
// uc_nation = 2 ;
17407: LD_ADDR_OWVAR 21
17411: PUSH
17412: LD_INT 2
17414: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17415: LD_ADDR_EXP 19
17419: PUSH
17420: LD_STRING Kurt
17422: PPUSH
17423: LD_INT 0
17425: PPUSH
17426: CALL 5018 0 2
17430: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17431: LD_EXP 19
17435: PPUSH
17436: LD_VAR 0 4
17440: PPUSH
17441: CALL_OW 250
17445: PPUSH
17446: LD_VAR 0 4
17450: PPUSH
17451: CALL_OW 251
17455: PPUSH
17456: LD_INT 5
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: CALL_OW 50
// InGameOn ;
17466: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17470: LD_EXP 19
17474: PPUSH
17475: CALL_OW 87
// wait ( 0 0$2 ) ;
17479: LD_INT 70
17481: PPUSH
17482: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17486: LD_VAR 0 4
17490: PPUSH
17491: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17495: LD_VAR 0 4
17499: PPUSH
17500: CALL_OW 122
// wait ( 0 0$1 ) ;
17504: LD_INT 35
17506: PPUSH
17507: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17511: LD_EXP 19
17515: PPUSH
17516: LD_VAR 0 4
17520: PPUSH
17521: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17525: LD_VAR 0 4
17529: PPUSH
17530: LD_EXP 19
17534: PPUSH
17535: CALL_OW 119
// DialogueOn ;
17539: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17543: LD_EXP 19
17547: PPUSH
17548: LD_STRING D2-Kurt-1
17550: PPUSH
17551: CALL_OW 88
// if tmp = JMM then
17555: LD_VAR 0 4
17559: PUSH
17560: LD_EXP 1
17564: EQUAL
17565: IFFALSE 17657
// begin Say ( JMM , D2-JMM-1 ) ;
17567: LD_EXP 1
17571: PPUSH
17572: LD_STRING D2-JMM-1
17574: PPUSH
17575: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17579: LD_EXP 19
17583: PPUSH
17584: LD_STRING D2-Kurt-2
17586: PPUSH
17587: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17591: LD_EXP 1
17595: PPUSH
17596: LD_STRING D2-JMM-2
17598: PPUSH
17599: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17603: LD_EXP 19
17607: PPUSH
17608: LD_STRING D2-Kurt-3
17610: PPUSH
17611: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17615: LD_EXP 1
17619: PPUSH
17620: LD_STRING D2-JMM-3
17622: PPUSH
17623: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17627: LD_EXP 19
17631: PPUSH
17632: LD_STRING D2-Kurt-4
17634: PPUSH
17635: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17639: LD_EXP 1
17643: PPUSH
17644: LD_STRING D2-JMM-4
17646: PPUSH
17647: CALL_OW 88
// DialogueOff ;
17651: CALL_OW 7
// end else
17655: GO 17967
// begin if GetSex ( tmp ) = 1 then
17657: LD_VAR 0 4
17661: PPUSH
17662: CALL_OW 258
17666: PUSH
17667: LD_INT 1
17669: EQUAL
17670: IFFALSE 17684
// Say ( tmp , D2-Sol1-1 ) ;
17672: LD_VAR 0 4
17676: PPUSH
17677: LD_STRING D2-Sol1-1
17679: PPUSH
17680: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17684: LD_VAR 0 4
17688: PPUSH
17689: CALL_OW 258
17693: PUSH
17694: LD_INT 2
17696: EQUAL
17697: IFFALSE 17711
// Say ( tmp , D2-FSol1-1 ) ;
17699: LD_VAR 0 4
17703: PPUSH
17704: LD_STRING D2-FSol1-1
17706: PPUSH
17707: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17711: LD_EXP 19
17715: PPUSH
17716: LD_STRING D2-Kurt-2
17718: PPUSH
17719: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17723: LD_VAR 0 4
17727: PPUSH
17728: CALL_OW 258
17732: PUSH
17733: LD_INT 1
17735: EQUAL
17736: IFFALSE 17750
// Say ( tmp , D2-Sol1-2 ) ;
17738: LD_VAR 0 4
17742: PPUSH
17743: LD_STRING D2-Sol1-2
17745: PPUSH
17746: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17750: LD_VAR 0 4
17754: PPUSH
17755: CALL_OW 258
17759: PUSH
17760: LD_INT 2
17762: EQUAL
17763: IFFALSE 17777
// Say ( tmp , D2-FSol1-2 ) ;
17765: LD_VAR 0 4
17769: PPUSH
17770: LD_STRING D2-FSol1-2
17772: PPUSH
17773: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17777: LD_EXP 19
17781: PPUSH
17782: LD_STRING D2-Kurt-3
17784: PPUSH
17785: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17789: LD_VAR 0 4
17793: PPUSH
17794: CALL_OW 258
17798: PUSH
17799: LD_INT 1
17801: EQUAL
17802: IFFALSE 17816
// Say ( tmp , D2-Sol1-3 ) ;
17804: LD_VAR 0 4
17808: PPUSH
17809: LD_STRING D2-Sol1-3
17811: PPUSH
17812: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17816: LD_VAR 0 4
17820: PPUSH
17821: CALL_OW 258
17825: PUSH
17826: LD_INT 2
17828: EQUAL
17829: IFFALSE 17843
// Say ( tmp , D2-FSol1-3 ) ;
17831: LD_VAR 0 4
17835: PPUSH
17836: LD_STRING D2-FSol1-3
17838: PPUSH
17839: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17843: LD_EXP 19
17847: PPUSH
17848: LD_STRING D2-Kurt-4
17850: PPUSH
17851: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17855: LD_VAR 0 4
17859: PPUSH
17860: CALL_OW 258
17864: PUSH
17865: LD_INT 1
17867: EQUAL
17868: IFFALSE 17882
// Say ( tmp , D2-Sol1-4 ) ;
17870: LD_VAR 0 4
17874: PPUSH
17875: LD_STRING D2-Sol1-4
17877: PPUSH
17878: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17882: LD_VAR 0 4
17886: PPUSH
17887: CALL_OW 258
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: IFFALSE 17909
// Say ( tmp , D2-FSol1-4 ) ;
17897: LD_VAR 0 4
17901: PPUSH
17902: LD_STRING D2-FSol1-4
17904: PPUSH
17905: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17909: LD_VAR 0 4
17913: PPUSH
17914: CALL_OW 258
17918: PUSH
17919: LD_INT 1
17921: EQUAL
17922: IFFALSE 17936
// Say ( tmp , D2-Sol1-5 ) ;
17924: LD_VAR 0 4
17928: PPUSH
17929: LD_STRING D2-Sol1-5
17931: PPUSH
17932: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17936: LD_VAR 0 4
17940: PPUSH
17941: CALL_OW 258
17945: PUSH
17946: LD_INT 2
17948: EQUAL
17949: IFFALSE 17963
// Say ( tmp , D2-FSol1-5 ) ;
17951: LD_VAR 0 4
17955: PPUSH
17956: LD_STRING D2-FSol1-5
17958: PPUSH
17959: CALL_OW 88
// DialogueOff ;
17963: CALL_OW 7
// end ; dec = ShowQuery1 ;
17967: LD_ADDR_VAR 0 6
17971: PUSH
17972: CALL 5620 0 0
17976: ST_TO_ADDR
// if dec = 1 then
17977: LD_VAR 0 6
17981: PUSH
17982: LD_INT 1
17984: EQUAL
17985: IFFALSE 18027
// begin DialogueOn ;
17987: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17991: LD_EXP 19
17995: PPUSH
17996: LD_STRING D2a-Kurt-1
17998: PPUSH
17999: CALL_OW 88
// DialogueOff ;
18003: CALL_OW 7
// InGameOff ;
18007: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18011: LD_INT 1
18013: PPUSH
18014: LD_INT 2
18016: PPUSH
18017: LD_INT 2
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: CALL_OW 80
// end ; if dec = 2 then
18027: LD_VAR 0 6
18031: PUSH
18032: LD_INT 2
18034: EQUAL
18035: IFFALSE 18535
// begin DialogueOn ;
18037: CALL_OW 6
// if tmp = JMM then
18041: LD_VAR 0 4
18045: PUSH
18046: LD_EXP 1
18050: EQUAL
18051: IFFALSE 18107
// begin Say ( JMM , D2b-JMM-1 ) ;
18053: LD_EXP 1
18057: PPUSH
18058: LD_STRING D2b-JMM-1
18060: PPUSH
18061: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18065: LD_EXP 19
18069: PPUSH
18070: LD_STRING D2b-Kurt-1
18072: PPUSH
18073: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18077: LD_EXP 1
18081: PPUSH
18082: LD_STRING D2b-JMM-2
18084: PPUSH
18085: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18089: LD_EXP 19
18093: PPUSH
18094: LD_STRING D2b-Kurt-2
18096: PPUSH
18097: CALL_OW 88
// DialogueOff ;
18101: CALL_OW 7
// end else
18105: GO 18297
// begin if GetSex ( tmp ) = 1 then
18107: LD_VAR 0 4
18111: PPUSH
18112: CALL_OW 258
18116: PUSH
18117: LD_INT 1
18119: EQUAL
18120: IFFALSE 18134
// Say ( tmp , D2b-Sol1-1 ) ;
18122: LD_VAR 0 4
18126: PPUSH
18127: LD_STRING D2b-Sol1-1
18129: PPUSH
18130: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18134: LD_VAR 0 4
18138: PPUSH
18139: CALL_OW 258
18143: PUSH
18144: LD_INT 2
18146: EQUAL
18147: IFFALSE 18161
// Say ( tmp , D2b-FSol1-1 ) ;
18149: LD_VAR 0 4
18153: PPUSH
18154: LD_STRING D2b-FSol1-1
18156: PPUSH
18157: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18161: LD_EXP 19
18165: PPUSH
18166: LD_STRING D2b-Kurt-1
18168: PPUSH
18169: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18173: LD_VAR 0 4
18177: PPUSH
18178: CALL_OW 258
18182: PUSH
18183: LD_INT 1
18185: EQUAL
18186: IFFALSE 18200
// Say ( tmp , D2b-Sol1-2 ) ;
18188: LD_VAR 0 4
18192: PPUSH
18193: LD_STRING D2b-Sol1-2
18195: PPUSH
18196: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18200: LD_VAR 0 4
18204: PPUSH
18205: CALL_OW 258
18209: PUSH
18210: LD_INT 2
18212: EQUAL
18213: IFFALSE 18227
// Say ( tmp , D2b-FSol1-2 ) ;
18215: LD_VAR 0 4
18219: PPUSH
18220: LD_STRING D2b-FSol1-2
18222: PPUSH
18223: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18227: LD_EXP 19
18231: PPUSH
18232: LD_STRING D2b-Kurt-2
18234: PPUSH
18235: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18239: LD_VAR 0 4
18243: PPUSH
18244: CALL_OW 258
18248: PUSH
18249: LD_INT 1
18251: EQUAL
18252: IFFALSE 18266
// Say ( tmp , D2c-Sol1-2 ) ;
18254: LD_VAR 0 4
18258: PPUSH
18259: LD_STRING D2c-Sol1-2
18261: PPUSH
18262: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18266: LD_VAR 0 4
18270: PPUSH
18271: CALL_OW 258
18275: PUSH
18276: LD_INT 2
18278: EQUAL
18279: IFFALSE 18293
// Say ( tmp , D2c-FSol1-2 ) ;
18281: LD_VAR 0 4
18285: PPUSH
18286: LD_STRING D2c-FSol1-2
18288: PPUSH
18289: CALL_OW 88
// DialogueOff ;
18293: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18297: LD_ADDR_VAR 0 7
18301: PUSH
18302: CALL 5694 0 0
18306: ST_TO_ADDR
// if dec2 = 1 then
18307: LD_VAR 0 7
18311: PUSH
18312: LD_INT 1
18314: EQUAL
18315: IFFALSE 18357
// begin DialogueOn ;
18317: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18321: LD_EXP 19
18325: PPUSH
18326: LD_STRING D2a-Kurt-1
18328: PPUSH
18329: CALL_OW 88
// DialogueOff ;
18333: CALL_OW 7
// InGameOff ;
18337: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18341: LD_INT 1
18343: PPUSH
18344: LD_INT 2
18346: PPUSH
18347: LD_INT 2
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: CALL_OW 80
// end ; if dec2 = 2 then
18357: LD_VAR 0 7
18361: PUSH
18362: LD_INT 2
18364: EQUAL
18365: IFFALSE 18535
// begin if tmp = JMM then
18367: LD_VAR 0 4
18371: PUSH
18372: LD_EXP 1
18376: EQUAL
18377: IFFALSE 18437
// begin DialogueOn ;
18379: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18383: LD_EXP 1
18387: PPUSH
18388: LD_STRING D2c-JMM-1
18390: PPUSH
18391: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18395: LD_EXP 19
18399: PPUSH
18400: LD_STRING D2c-Kurt-1
18402: PPUSH
18403: CALL_OW 88
// DialogueOff ;
18407: CALL_OW 7
// InGameOff ;
18411: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18415: LD_EXP 19
18419: PPUSH
18420: LD_INT 9
18422: PPUSH
18423: CALL_OW 113
// readyToEscape = 1 ;
18427: LD_ADDR_EXP 21
18431: PUSH
18432: LD_INT 1
18434: ST_TO_ADDR
// end else
18435: GO 18535
// begin DialogueOn ;
18437: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18441: LD_VAR 0 4
18445: PPUSH
18446: CALL_OW 258
18450: PUSH
18451: LD_INT 1
18453: EQUAL
18454: IFFALSE 18468
// Say ( tmp , D2c-Sol1-1 ) ;
18456: LD_VAR 0 4
18460: PPUSH
18461: LD_STRING D2c-Sol1-1
18463: PPUSH
18464: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18468: LD_VAR 0 4
18472: PPUSH
18473: CALL_OW 258
18477: PUSH
18478: LD_INT 2
18480: EQUAL
18481: IFFALSE 18495
// Say ( tmp , D2c-FSol1-1 ) ;
18483: LD_VAR 0 4
18487: PPUSH
18488: LD_STRING D2c-FSol1-1
18490: PPUSH
18491: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18495: LD_EXP 19
18499: PPUSH
18500: LD_STRING D2c-Kurt-1
18502: PPUSH
18503: CALL_OW 88
// DialogueOff ;
18507: CALL_OW 7
// InGameOff ;
18511: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18515: LD_EXP 19
18519: PPUSH
18520: LD_INT 9
18522: PPUSH
18523: CALL_OW 113
// readyToEscape = 1 ;
18527: LD_ADDR_EXP 21
18531: PUSH
18532: LD_INT 1
18534: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18535: LD_VAR 0 6
18539: PUSH
18540: LD_INT 3
18542: EQUAL
18543: IFFALSE 18717
// begin DialogueOn ;
18545: CALL_OW 6
// if tmp = JMM then
18549: LD_VAR 0 4
18553: PUSH
18554: LD_EXP 1
18558: EQUAL
18559: IFFALSE 18619
// begin DialogueOn ;
18561: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18565: LD_EXP 1
18569: PPUSH
18570: LD_STRING D2c-JMM-1
18572: PPUSH
18573: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18577: LD_EXP 19
18581: PPUSH
18582: LD_STRING D2c-Kurt-1
18584: PPUSH
18585: CALL_OW 88
// DialogueOff ;
18589: CALL_OW 7
// InGameOff ;
18593: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18597: LD_EXP 19
18601: PPUSH
18602: LD_INT 9
18604: PPUSH
18605: CALL_OW 113
// readyToEscape = 1 ;
18609: LD_ADDR_EXP 21
18613: PUSH
18614: LD_INT 1
18616: ST_TO_ADDR
// end else
18617: GO 18717
// begin DialogueOn ;
18619: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18623: LD_VAR 0 4
18627: PPUSH
18628: CALL_OW 258
18632: PUSH
18633: LD_INT 1
18635: EQUAL
18636: IFFALSE 18650
// Say ( tmp , D2c-Sol1-1 ) ;
18638: LD_VAR 0 4
18642: PPUSH
18643: LD_STRING D2c-Sol1-1
18645: PPUSH
18646: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18650: LD_VAR 0 4
18654: PPUSH
18655: CALL_OW 258
18659: PUSH
18660: LD_INT 2
18662: EQUAL
18663: IFFALSE 18677
// Say ( tmp , D2c-FSol1-1 ) ;
18665: LD_VAR 0 4
18669: PPUSH
18670: LD_STRING D2c-FSol1-1
18672: PPUSH
18673: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18677: LD_EXP 19
18681: PPUSH
18682: LD_STRING D2c-Kurt-1
18684: PPUSH
18685: CALL_OW 88
// DialogueOff ;
18689: CALL_OW 7
// InGameOff ;
18693: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18697: LD_EXP 19
18701: PPUSH
18702: LD_INT 9
18704: PPUSH
18705: CALL_OW 113
// readyToEscape = 1 ;
18709: LD_ADDR_EXP 21
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18717: LD_ADDR_EXP 29
18721: PUSH
18722: LD_INT 0
18724: ST_TO_ADDR
// end ; end_of_file
18725: LD_VAR 0 1
18729: RET
// every 0 0$1 do
18730: GO 18732
18732: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18733: LD_INT 3
18735: PPUSH
18736: LD_INT 32
18738: PPUSH
18739: LD_INT 3
18741: PPUSH
18742: CALL 5749 0 3
18746: END
// every 0 0$1 do
18747: GO 18749
18749: DISABLE
// begin enable ;
18750: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18751: LD_INT 3
18753: PPUSH
18754: LD_INT 2
18756: PPUSH
18757: CALL 5834 0 2
// if disableHealAI = 0 then
18761: LD_EXP 33
18765: PUSH
18766: LD_INT 0
18768: EQUAL
18769: IFFALSE 18787
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18771: LD_INT 3
18773: PPUSH
18774: LD_INT 10
18776: PPUSH
18777: LD_INT 11
18779: PPUSH
18780: LD_INT 32
18782: PPUSH
18783: CALL 6093 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18787: LD_INT 3
18789: PPUSH
18790: LD_INT 51
18792: PPUSH
18793: LD_INT 7
18795: PPUSH
18796: CALL 7882 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18800: LD_INT 3
18802: PPUSH
18803: LD_INT 14
18805: PPUSH
18806: LD_INT 121
18808: PPUSH
18809: LD_INT 100
18811: PPUSH
18812: CALL 7043 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18816: LD_INT 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL 6531 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18826: LD_INT 3
18828: PPUSH
18829: LD_EXP 31
18833: PPUSH
18834: CALL 8025 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18838: LD_INT 3
18840: PPUSH
18841: LD_INT 8
18843: PUSH
18844: LD_INT 67
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: PPUSH
18854: LD_INT 2
18856: PPUSH
18857: CALL_OW 12
18861: ARRAY
18862: PPUSH
18863: LD_INT 11
18865: PPUSH
18866: CALL 8231 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18870: LD_INT 3
18872: PPUSH
18873: LD_INT 1
18875: PPUSH
18876: CALL 8588 0 2
// end ;
18880: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18881: LD_INT 22
18883: PUSH
18884: LD_INT 3
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 21
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 55
18903: PUSH
18904: EMPTY
18905: LIST
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: LD_INT 34
18912: PUSH
18913: LD_INT 51
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: LD_INT 0
18937: EQUAL
18938: PUSH
18939: LD_INT 21
18941: PPUSH
18942: CALL_OW 255
18946: PUSH
18947: LD_INT 3
18949: EQUAL
18950: AND
18951: PUSH
18952: LD_INT 21
18954: PPUSH
18955: CALL_OW 302
18959: AND
18960: PUSH
18961: LD_INT 2
18963: PPUSH
18964: CALL_OW 255
18968: PUSH
18969: LD_INT 3
18971: EQUAL
18972: AND
18973: PUSH
18974: LD_INT 2
18976: PPUSH
18977: CALL_OW 302
18981: AND
18982: IFFALSE 19166
18984: GO 18986
18986: DISABLE
// begin enable ;
18987: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18988: LD_INT 2
18990: PPUSH
18991: CALL_OW 274
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: LD_INT 1000
19001: PPUSH
19002: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19006: LD_INT 3
19008: PPUSH
19009: LD_INT 21
19011: PPUSH
19012: LD_INT 5
19014: PUSH
19015: LD_INT 6
19017: PUSH
19018: LD_INT 6
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: LD_OWVAR 67
19030: ARRAY
19031: PPUSH
19032: LD_INT 43
19034: PUSH
19035: LD_INT 43
19037: PUSH
19038: LD_INT 44
19040: PUSH
19041: LD_INT 44
19043: PUSH
19044: LD_INT 46
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 43
19056: PUSH
19057: LD_INT 43
19059: PUSH
19060: LD_INT 44
19062: PUSH
19063: LD_INT 44
19065: PUSH
19066: LD_INT 44
19068: PUSH
19069: LD_INT 46
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 44
19082: PUSH
19083: LD_INT 44
19085: PUSH
19086: LD_INT 44
19088: PUSH
19089: LD_INT 44
19091: PUSH
19092: LD_INT 46
19094: PUSH
19095: LD_INT 46
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_OWVAR 67
19115: ARRAY
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: LD_INT 1
19122: PPUSH
19123: LD_INT 22
19125: PUSH
19126: LD_INT 22
19128: PUSH
19129: LD_INT 24
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PPUSH
19139: LD_INT 2
19141: PPUSH
19142: CALL_OW 12
19146: ARRAY
19147: PUSH
19148: LD_INT 24
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: LD_OWVAR 67
19160: ARRAY
19161: PPUSH
19162: CALL 6377 0 7
// end ;
19166: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19167: LD_INT 17
19169: PPUSH
19170: CALL_OW 255
19174: PUSH
19175: LD_INT 3
19177: EQUAL
19178: PUSH
19179: LD_INT 17
19181: PPUSH
19182: CALL_OW 302
19186: AND
19187: PUSH
19188: LD_INT 2
19190: PPUSH
19191: CALL_OW 255
19195: PUSH
19196: LD_INT 3
19198: EQUAL
19199: AND
19200: PUSH
19201: LD_INT 2
19203: PPUSH
19204: CALL_OW 302
19208: AND
19209: IFFALSE 19276
19211: GO 19213
19213: DISABLE
// begin enable ;
19214: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19215: LD_INT 17
19217: PPUSH
19218: LD_INT 22
19220: PPUSH
19221: LD_INT 1
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: LD_INT 42
19229: PUSH
19230: LD_INT 43
19232: PUSH
19233: LD_INT 44
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PPUSH
19244: LD_INT 3
19246: PPUSH
19247: CALL_OW 12
19251: ARRAY
19252: PPUSH
19253: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19257: LD_INT 17
19259: PPUSH
19260: LD_INT 22
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_INT 51
19271: PPUSH
19272: CALL_OW 185
// end ;
19276: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19277: LD_INT 17
19279: PPUSH
19280: CALL_OW 302
19284: PUSH
19285: LD_INT 17
19287: PPUSH
19288: CALL_OW 255
19292: PUSH
19293: LD_INT 3
19295: EQUAL
19296: AND
19297: PUSH
19298: LD_INT 2
19300: PPUSH
19301: CALL_OW 302
19305: AND
19306: PUSH
19307: LD_INT 2
19309: PPUSH
19310: CALL_OW 255
19314: PUSH
19315: LD_INT 3
19317: EQUAL
19318: AND
19319: PUSH
19320: LD_INT 17
19322: PPUSH
19323: CALL_OW 313
19327: NOT
19328: AND
19329: IFFALSE 19423
19331: GO 19333
19333: DISABLE
19334: LD_INT 0
19336: PPUSH
// begin for i = 1 to 6 do
19337: LD_ADDR_VAR 0 1
19341: PUSH
19342: DOUBLE
19343: LD_INT 1
19345: DEC
19346: ST_TO_ADDR
19347: LD_INT 6
19349: PUSH
19350: FOR_TO
19351: IFFALSE 19421
// begin uc_side = 3 ;
19353: LD_ADDR_OWVAR 20
19357: PUSH
19358: LD_INT 3
19360: ST_TO_ADDR
// uc_nation = 3 ;
19361: LD_ADDR_OWVAR 21
19365: PUSH
19366: LD_INT 3
19368: ST_TO_ADDR
// hc_gallery :=  ;
19369: LD_ADDR_OWVAR 33
19373: PUSH
19374: LD_STRING 
19376: ST_TO_ADDR
// hc_name :=  ;
19377: LD_ADDR_OWVAR 26
19381: PUSH
19382: LD_STRING 
19384: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19385: LD_INT 0
19387: PPUSH
19388: LD_EXP 34
19392: PPUSH
19393: LD_EXP 35
19397: PPUSH
19398: CALL_OW 12
19402: PPUSH
19403: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19407: CALL_OW 44
19411: PPUSH
19412: LD_INT 17
19414: PPUSH
19415: CALL_OW 52
// end ;
19419: GO 19350
19421: POP
19422: POP
// end ;
19423: PPOPN 1
19425: END
// every 2 2$0 do var i , j ;
19426: GO 19428
19428: DISABLE
19429: LD_INT 0
19431: PPUSH
19432: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19433: LD_INT 14700
19435: PUSH
19436: LD_INT 33600
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: PPUSH
19446: LD_INT 2
19448: PPUSH
19449: CALL_OW 12
19453: ARRAY
19454: PPUSH
19455: CALL_OW 67
// disableHealAI = 1 ;
19459: LD_ADDR_EXP 33
19463: PUSH
19464: LD_INT 1
19466: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19467: LD_ADDR_VAR 0 1
19471: PUSH
19472: LD_INT 22
19474: PUSH
19475: LD_INT 3
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 25
19484: PUSH
19485: LD_INT 4
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 69
19500: PUSH
19501: FOR_IN
19502: IFFALSE 19515
// ComExitBuilding ( i ) ;
19504: LD_VAR 0 1
19508: PPUSH
19509: CALL_OW 122
19513: GO 19501
19515: POP
19516: POP
// wait ( 0 0$1 ) ;
19517: LD_INT 35
19519: PPUSH
19520: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19524: LD_INT 35
19526: PPUSH
19527: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19531: LD_ADDR_VAR 0 1
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 25
19548: PUSH
19549: LD_INT 4
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: PPUSH
19560: CALL_OW 69
19564: PUSH
19565: FOR_IN
19566: IFFALSE 19643
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_INT 19
19575: PPUSH
19576: LD_INT 22
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 25
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PPUSH
19600: CALL_OW 70
19604: PUSH
19605: FOR_IN
19606: IFFALSE 19639
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19608: LD_VAR 0 1
19612: PPUSH
19613: LD_VAR 0 2
19617: PPUSH
19618: CALL_OW 250
19622: PPUSH
19623: LD_VAR 0 2
19627: PPUSH
19628: CALL_OW 251
19632: PPUSH
19633: CALL_OW 191
// end ;
19637: GO 19605
19639: POP
19640: POP
// end ;
19641: GO 19565
19643: POP
19644: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19645: LD_INT 22
19647: PUSH
19648: LD_INT 3
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 25
19657: PUSH
19658: LD_INT 4
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: PUSH
19674: LD_INT 0
19676: EQUAL
19677: PUSH
19678: LD_EXP 32
19682: PUSH
19683: LD_INT 6
19685: PUSH
19686: LD_INT 7
19688: PUSH
19689: LD_INT 8
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: PUSH
19697: LD_OWVAR 67
19701: ARRAY
19702: GREATEREQUAL
19703: OR
19704: PUSH
19705: LD_INT 19
19707: PPUSH
19708: LD_INT 22
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 25
19720: PUSH
19721: LD_INT 12
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 70
19736: PUSH
19737: LD_INT 0
19739: EQUAL
19740: OR
19741: IFFALSE 19524
// disableHealAI = 0 ;
19743: LD_ADDR_EXP 33
19747: PUSH
19748: LD_INT 0
19750: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19751: LD_ADDR_VAR 0 1
19755: PUSH
19756: LD_INT 22
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: LD_INT 25
19768: PUSH
19769: LD_INT 12
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PPUSH
19780: CALL_OW 69
19784: PUSH
19785: FOR_IN
19786: IFFALSE 19802
// SetClass ( i , 16 ) ;
19788: LD_VAR 0 1
19792: PPUSH
19793: LD_INT 16
19795: PPUSH
19796: CALL_OW 336
19800: GO 19785
19802: POP
19803: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19804: LD_ADDR_VAR 0 1
19808: PUSH
19809: LD_INT 22
19811: PUSH
19812: LD_INT 3
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 25
19821: PUSH
19822: LD_INT 4
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: PUSH
19838: FOR_IN
19839: IFFALSE 19858
// ComMoveXY ( i , 113 , 94 ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_INT 113
19848: PPUSH
19849: LD_INT 94
19851: PPUSH
19852: CALL_OW 111
19856: GO 19838
19858: POP
19859: POP
// end ;
19860: PPOPN 2
19862: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19863: LD_INT 21
19865: PPUSH
19866: CALL_OW 255
19870: PUSH
19871: LD_INT 3
19873: EQUAL
19874: PUSH
19875: LD_INT 21
19877: PPUSH
19878: CALL_OW 302
19882: AND
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_INT 3
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 34
19896: PUSH
19897: LD_INT 51
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PPUSH
19908: CALL_OW 69
19912: PUSH
19913: LD_INT 0
19915: EQUAL
19916: AND
19917: IFFALSE 19949
19919: GO 19921
19921: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19922: LD_INT 21
19924: PPUSH
19925: LD_INT 23
19927: PPUSH
19928: LD_INT 1
19930: PPUSH
19931: LD_INT 1
19933: PPUSH
19934: LD_INT 51
19936: PPUSH
19937: CALL_OW 185
// wait ( 5 5$0 ) ;
19941: LD_INT 10500
19943: PPUSH
19944: CALL_OW 67
// enable ;
19948: ENABLE
// end ; end_of_file
19949: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19950: LD_EXP 26
19954: PUSH
19955: LD_INT 0
19957: LESSEQUAL
19958: IFFALSE 20107
19960: GO 19962
19962: DISABLE
19963: LD_INT 0
19965: PPUSH
19966: PPUSH
19967: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19968: LD_ADDR_VAR 0 2
19972: PUSH
19973: LD_INT 22
19975: PUSH
19976: LD_INT 1
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 21
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 30
19998: PUSH
19999: LD_INT 0
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 30
20008: PUSH
20009: LD_INT 1
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PPUSH
20026: CALL_OW 69
20030: ST_TO_ADDR
// for i in tmp do
20031: LD_ADDR_VAR 0 1
20035: PUSH
20036: LD_VAR 0 2
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20075
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20044: LD_ADDR_VAR 0 3
20048: PUSH
20049: LD_VAR 0 3
20053: PUSH
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 274
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 275
20071: PLUS
20072: ST_TO_ADDR
20073: GO 20041
20075: POP
20076: POP
// if yourCrates >= needCrates then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_EXP 25
20086: GREATEREQUAL
20087: IFFALSE 20100
// begin FinishMission ( yourCrates ) ;
20089: LD_VAR 0 3
20093: PPUSH
20094: CALL 20110 0 1
// end else
20098: GO 20107
// begin YouLost ( matmin ) ;
20100: LD_STRING matmin
20102: PPUSH
20103: CALL_OW 104
// end ; end ;
20107: PPOPN 3
20109: END
// export function FinishMission ( crates ) ; begin
20110: LD_INT 0
20112: PPUSH
// if crates + 100 > crates then
20113: LD_VAR 0 1
20117: PUSH
20118: LD_INT 100
20120: PLUS
20121: PUSH
20122: LD_VAR 0 1
20126: GREATER
20127: IFFALSE 20151
// begin AddMedal ( cans , 1 ) ;
20129: LD_STRING cans
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20139: LD_INT 1
20141: PPUSH
20142: LD_STRING 06_crates_1
20144: PPUSH
20145: CALL_OW 39
// end else
20149: GO 20172
// begin AddMedal ( cans , - 1 ) ;
20151: LD_STRING cans
20153: PPUSH
20154: LD_INT 1
20156: NEG
20157: PPUSH
20158: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20162: LD_INT 0
20164: PPUSH
20165: LD_STRING 06_crates_1
20167: PPUSH
20168: CALL_OW 39
// end ; if unitLost < 2 then
20172: LD_EXP 30
20176: PUSH
20177: LD_INT 2
20179: LESS
20180: IFFALSE 20194
// begin AddMedal ( people , 1 ) ;
20182: LD_STRING people
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 101
// end else
20192: GO 20205
// begin AddMedal ( people , - 1 ) ;
20194: LD_STRING people
20196: PPUSH
20197: LD_INT 1
20199: NEG
20200: PPUSH
20201: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20205: LD_EXP 28
20209: PPUSH
20210: LD_STRING 06_remoteVehs_1
20212: PPUSH
20213: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20217: LD_EXP 28
20221: PUSH
20222: LD_INT 1
20224: EQUAL
20225: IFFALSE 20239
// begin AddMedal ( remote , 1 ) ;
20227: LD_STRING remote
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL_OW 101
// end else
20237: GO 20279
// begin if GetTech ( 18 , 1 ) = state_enabled then
20239: LD_INT 18
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 321
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20268
// begin AddMedal ( remote , - 1 ) ;
20255: LD_STRING remote
20257: PPUSH
20258: LD_INT 1
20260: NEG
20261: PPUSH
20262: CALL_OW 101
// end else
20266: GO 20279
// begin AddMedal ( remote , - 2 ) ;
20268: LD_STRING remote
20270: PPUSH
20271: LD_INT 2
20273: NEG
20274: PPUSH
20275: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20279: LD_EXP 20
20283: PPUSH
20284: LD_STRING 06_KurtStatus_1
20286: PPUSH
20287: CALL_OW 39
// GiveMedals ( Main ) ;
20291: LD_STRING Main
20293: PPUSH
20294: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20298: LD_INT 50
20300: PUSH
20301: EMPTY
20302: LIST
20303: PUSH
20304: LD_INT 22
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 21
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 25
20329: PUSH
20330: LD_INT 1
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 25
20339: PUSH
20340: LD_INT 2
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 25
20349: PUSH
20350: LD_INT 3
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 25
20359: PUSH
20360: LD_INT 4
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 69
20384: PPUSH
20385: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20389: LD_EXP 1
20393: PPUSH
20394: LD_EXP 41
20398: PUSH
20399: LD_STRING JMM
20401: STR
20402: PPUSH
20403: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20407: LD_EXP 2
20411: PPUSH
20412: LD_EXP 41
20416: PUSH
20417: LD_STRING Lisa
20419: STR
20420: PPUSH
20421: CALL 5237 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20425: LD_EXP 3
20429: PPUSH
20430: LD_EXP 41
20434: PUSH
20435: LD_STRING Bobby
20437: STR
20438: PPUSH
20439: CALL 5237 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20443: LD_EXP 4
20447: PPUSH
20448: LD_EXP 41
20452: PUSH
20453: LD_STRING Cyrus
20455: STR
20456: PPUSH
20457: CALL 5237 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20461: LD_EXP 5
20465: PPUSH
20466: LD_EXP 41
20470: PUSH
20471: LD_STRING Frank
20473: STR
20474: PPUSH
20475: CALL 5237 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20479: LD_EXP 6
20483: PPUSH
20484: LD_EXP 41
20488: PUSH
20489: LD_STRING Brown
20491: STR
20492: PPUSH
20493: CALL 5237 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20497: LD_EXP 7
20501: PPUSH
20502: LD_EXP 41
20506: PUSH
20507: LD_STRING Donaldson
20509: STR
20510: PPUSH
20511: CALL 5237 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20515: LD_EXP 8
20519: PPUSH
20520: LD_EXP 41
20524: PUSH
20525: LD_STRING Gladstone
20527: STR
20528: PPUSH
20529: CALL 5237 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20533: LD_EXP 9
20537: PPUSH
20538: LD_EXP 41
20542: PUSH
20543: LD_STRING Denis
20545: STR
20546: PPUSH
20547: CALL 5237 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20551: LD_EXP 15
20555: PPUSH
20556: LD_EXP 41
20560: PUSH
20561: LD_STRING Joan
20563: STR
20564: PPUSH
20565: CALL 5237 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20569: LD_EXP 16
20573: PPUSH
20574: LD_STRING 06_JoanStatus_1
20576: PPUSH
20577: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20581: LD_INT 50
20583: PUSH
20584: EMPTY
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 25
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 25
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 25
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 25
20642: PUSH
20643: LD_INT 4
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: PUSH
20668: LD_EXP 1
20672: PUSH
20673: LD_EXP 2
20677: PUSH
20678: LD_EXP 3
20682: PUSH
20683: LD_EXP 4
20687: PUSH
20688: LD_EXP 5
20692: PUSH
20693: LD_EXP 6
20697: PUSH
20698: LD_EXP 7
20702: PUSH
20703: LD_EXP 8
20707: PUSH
20708: LD_EXP 9
20712: PUSH
20713: LD_EXP 15
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: DIFF
20730: PPUSH
20731: LD_STRING 06_other_survivors
20733: PPUSH
20734: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20738: LD_INT 50
20740: PUSH
20741: EMPTY
20742: LIST
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 21
20756: PUSH
20757: LD_INT 1
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 2
20766: PUSH
20767: LD_INT 25
20769: PUSH
20770: LD_INT 12
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 25
20779: PUSH
20780: LD_INT 16
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: PPUSH
20798: CALL_OW 69
20802: PPUSH
20803: LD_STRING 06_other_apemans
20805: PPUSH
20806: CALL_OW 38
// YouWin ;
20810: CALL_OW 103
// end ; end_of_file
20814: LD_VAR 0 2
20818: RET
// every 1 1$0 trigger sendedConvoys = 3 do
20819: LD_EXP 39
20823: PUSH
20824: LD_INT 3
20826: EQUAL
20827: IFFALSE 20942
20829: GO 20831
20831: DISABLE
// begin enable ;
20832: ENABLE
// sendedConvoys = 0 ;
20833: LD_ADDR_EXP 39
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20841: LD_INT 6
20843: PPUSH
20844: LD_INT 3
20846: PPUSH
20847: LD_INT 5
20849: PPUSH
20850: LD_INT 10
20852: PPUSH
20853: CALL_OW 12
20857: PUSH
20858: LD_INT 5
20860: PPUSH
20861: LD_INT 11
20863: PPUSH
20864: CALL_OW 12
20868: PUSH
20869: LD_INT 8
20871: PPUSH
20872: LD_INT 12
20874: PPUSH
20875: CALL_OW 12
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: LIST
20884: PUSH
20885: LD_OWVAR 67
20889: ARRAY
20890: PPUSH
20891: LD_INT 0
20893: PPUSH
20894: LD_INT 0
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: LD_INT 3
20902: PPUSH
20903: LD_EXP 34
20907: PPUSH
20908: LD_EXP 35
20912: PPUSH
20913: CALL_OW 12
20917: PPUSH
20918: LD_INT 18
20920: PPUSH
20921: LD_INT 17
20923: PPUSH
20924: LD_INT 1
20926: PPUSH
20927: LD_INT 1
20929: PPUSH
20930: LD_INT 2
20932: PPUSH
20933: CALL_OW 12
20937: PPUSH
20938: CALL 8818 0 12
// end ; end_of_file
20942: END
// export function PrepareNature ; var i , un ; begin
20943: LD_INT 0
20945: PPUSH
20946: PPUSH
20947: PPUSH
// for i = 1 to Difficulty + 2 do
20948: LD_ADDR_VAR 0 2
20952: PUSH
20953: DOUBLE
20954: LD_INT 1
20956: DEC
20957: ST_TO_ADDR
20958: LD_OWVAR 67
20962: PUSH
20963: LD_INT 2
20965: PLUS
20966: PUSH
20967: FOR_TO
20968: IFFALSE 21077
// begin hc_sex = sex_male ;
20970: LD_ADDR_OWVAR 27
20974: PUSH
20975: LD_INT 1
20977: ST_TO_ADDR
// uc_side = 0 ;
20978: LD_ADDR_OWVAR 20
20982: PUSH
20983: LD_INT 0
20985: ST_TO_ADDR
// uc_nation = nation_nature ;
20986: LD_ADDR_OWVAR 21
20990: PUSH
20991: LD_INT 0
20993: ST_TO_ADDR
// hc_class = class_tiger ;
20994: LD_ADDR_OWVAR 28
20998: PUSH
20999: LD_INT 14
21001: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21002: LD_ADDR_OWVAR 31
21006: PUSH
21007: LD_EXP 35
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21027: LD_ADDR_OWVAR 35
21031: PUSH
21032: LD_INT 5
21034: NEG
21035: PPUSH
21036: LD_INT 5
21038: PPUSH
21039: CALL_OW 12
21043: PUSH
21044: LD_OWVAR 67
21048: MUL
21049: ST_TO_ADDR
// un = CreateHuman ;
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: CALL_OW 44
21059: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 20
21067: PPUSH
21068: LD_INT 0
21070: PPUSH
21071: CALL_OW 49
// end ;
21075: GO 20967
21077: POP
21078: POP
// for i = 1 to rand ( 3 , 4 ) do
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: DOUBLE
21085: LD_INT 1
21087: DEC
21088: ST_TO_ADDR
21089: LD_INT 3
21091: PPUSH
21092: LD_INT 4
21094: PPUSH
21095: CALL_OW 12
21099: PUSH
21100: FOR_TO
21101: IFFALSE 21195
// begin hc_sex = sex_male ;
21103: LD_ADDR_OWVAR 27
21107: PUSH
21108: LD_INT 1
21110: ST_TO_ADDR
// uc_side = 0 ;
21111: LD_ADDR_OWVAR 20
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// uc_nation = nation_nature ;
21119: LD_ADDR_OWVAR 21
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// hc_class = 18 ;
21127: LD_ADDR_OWVAR 28
21131: PUSH
21132: LD_INT 18
21134: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21135: LD_ADDR_OWVAR 31
21139: PUSH
21140: LD_EXP 35
21144: PUSH
21145: LD_INT 0
21147: PUSH
21148: LD_INT 0
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: ST_TO_ADDR
// hc_agressivity = 0 ;
21160: LD_ADDR_OWVAR 35
21164: PUSH
21165: LD_INT 0
21167: ST_TO_ADDR
// un = CreateHuman ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: CALL_OW 44
21177: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21178: LD_VAR 0 3
21182: PPUSH
21183: LD_INT 20
21185: PPUSH
21186: LD_INT 0
21188: PPUSH
21189: CALL_OW 49
// end ;
21193: GO 21100
21195: POP
21196: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: DOUBLE
21203: LD_INT 1
21205: DEC
21206: ST_TO_ADDR
21207: LD_INT 1
21209: PPUSH
21210: LD_INT 3
21212: PPUSH
21213: CALL_OW 12
21217: PUSH
21218: LD_OWVAR 67
21222: PLUS
21223: PUSH
21224: FOR_TO
21225: IFFALSE 21406
// begin hc_sex = sex_male ;
21227: LD_ADDR_OWVAR 27
21231: PUSH
21232: LD_INT 1
21234: ST_TO_ADDR
// uc_side = 0 ;
21235: LD_ADDR_OWVAR 20
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// uc_nation = nation_nature ;
21243: LD_ADDR_OWVAR 21
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// hc_class = class_apeman ;
21251: LD_ADDR_OWVAR 28
21255: PUSH
21256: LD_INT 12
21258: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21259: LD_ADDR_OWVAR 31
21263: PUSH
21264: LD_EXP 34
21268: PPUSH
21269: LD_EXP 35
21273: PPUSH
21274: CALL_OW 12
21278: PUSH
21279: LD_EXP 34
21283: PPUSH
21284: LD_EXP 35
21288: PPUSH
21289: CALL_OW 12
21293: PUSH
21294: LD_EXP 34
21298: PPUSH
21299: LD_EXP 35
21303: PPUSH
21304: CALL_OW 12
21308: PUSH
21309: LD_EXP 34
21313: PPUSH
21314: LD_EXP 35
21318: PPUSH
21319: CALL_OW 12
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21330: LD_ADDR_OWVAR 35
21334: PUSH
21335: LD_INT 20
21337: PPUSH
21338: LD_INT 30
21340: PPUSH
21341: CALL_OW 12
21345: PUSH
21346: LD_INT 30
21348: PPUSH
21349: LD_INT 40
21351: PPUSH
21352: CALL_OW 12
21356: PUSH
21357: LD_INT 40
21359: PPUSH
21360: LD_INT 50
21362: PPUSH
21363: CALL_OW 12
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: PUSH
21373: LD_OWVAR 67
21377: ARRAY
21378: ST_TO_ADDR
// un = CreateHuman ;
21379: LD_ADDR_VAR 0 3
21383: PUSH
21384: CALL_OW 44
21388: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21389: LD_VAR 0 3
21393: PPUSH
21394: LD_INT 21
21396: PPUSH
21397: LD_INT 0
21399: PPUSH
21400: CALL_OW 49
// end ;
21404: GO 21224
21406: POP
21407: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21408: LD_ADDR_VAR 0 2
21412: PUSH
21413: DOUBLE
21414: LD_INT 1
21416: DEC
21417: ST_TO_ADDR
21418: LD_INT 5
21420: PPUSH
21421: LD_INT 6
21423: PPUSH
21424: CALL_OW 12
21428: PUSH
21429: LD_OWVAR 67
21433: PLUS
21434: PUSH
21435: FOR_TO
21436: IFFALSE 21582
// begin hc_sex = sex_male ;
21438: LD_ADDR_OWVAR 27
21442: PUSH
21443: LD_INT 1
21445: ST_TO_ADDR
// uc_side = 0 ;
21446: LD_ADDR_OWVAR 20
21450: PUSH
21451: LD_INT 0
21453: ST_TO_ADDR
// uc_nation = nation_nature ;
21454: LD_ADDR_OWVAR 21
21458: PUSH
21459: LD_INT 0
21461: ST_TO_ADDR
// hc_class = class_apeman ;
21462: LD_ADDR_OWVAR 28
21466: PUSH
21467: LD_INT 12
21469: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21470: LD_ADDR_OWVAR 31
21474: PUSH
21475: LD_EXP 34
21479: PPUSH
21480: LD_EXP 35
21484: PPUSH
21485: CALL_OW 12
21489: PUSH
21490: LD_EXP 34
21494: PPUSH
21495: LD_EXP 35
21499: PPUSH
21500: CALL_OW 12
21504: PUSH
21505: LD_OWVAR 67
21509: PLUS
21510: PUSH
21511: LD_EXP 34
21515: PPUSH
21516: LD_EXP 35
21520: PPUSH
21521: CALL_OW 12
21525: PUSH
21526: LD_EXP 34
21530: PPUSH
21531: LD_EXP 35
21535: PPUSH
21536: CALL_OW 12
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: ST_TO_ADDR
// hc_agressivity = 0 ;
21547: LD_ADDR_OWVAR 35
21551: PUSH
21552: LD_INT 0
21554: ST_TO_ADDR
// un = CreateHuman ;
21555: LD_ADDR_VAR 0 3
21559: PUSH
21560: CALL_OW 44
21564: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21565: LD_VAR 0 3
21569: PPUSH
21570: LD_INT 22
21572: PPUSH
21573: LD_INT 0
21575: PPUSH
21576: CALL_OW 49
// end ;
21580: GO 21435
21582: POP
21583: POP
// end ; end_of_file
21584: LD_VAR 0 1
21588: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21589: LD_EXP 1
21593: PPUSH
21594: CALL_OW 301
21598: IFFALSE 21610
21600: GO 21602
21602: DISABLE
// YouLost ( JMM ) ;
21603: LD_STRING JMM
21605: PPUSH
21606: CALL_OW 104
21610: END
