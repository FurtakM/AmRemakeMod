// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// unitLost = 0 ;
 185: LD_ADDR_EXP 30
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 193: LD_ADDR_EXP 31
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianTanks = [ ] ;
 200: LD_ADDR_EXP 36
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 207: LD_ADDR_EXP 37
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// disableHealAI = 0 ;
 214: LD_ADDR_EXP 33
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// strings = [ ] ;
 222: LD_ADDR_EXP 27
 226: PUSH
 227: EMPTY
 228: ST_TO_ADDR
// PrepareDifficulty ;
 229: CALL 6083 0 0
// PrepareNature ;
 233: CALL 22769 0 0
// PrepareRussian ;
 237: CALL 5190 0 0
// PrepareVehicles ;
 241: CALL 1488 0 0
// PrepareHeroes ;
 245: CALL 496 0 0
// PrepareOthers ;
 249: CALL 1909 0 0
// PreparePlayerApemans ;
 253: CALL 2051 0 0
// end ;
 257: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 258: LD_EXP 42
 262: PUSH
 263: LD_INT 1
 265: EQUAL
 266: IFFALSE 493
 268: GO 270
 270: DISABLE
 271: LD_INT 0
 273: PPUSH
// begin enable ;
 274: ENABLE
// fogoff ( true ) ;
 275: LD_INT 1
 277: PPUSH
 278: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 282: LD_ADDR_VAR 0 1
 286: PUSH
 287: LD_INT 22
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PPUSH
 311: CALL_OW 69
 315: PUSH
 316: FOR_IN
 317: IFFALSE 333
// SetLives ( i , 1000 ) ;
 319: LD_VAR 0 1
 323: PPUSH
 324: LD_INT 1000
 326: PPUSH
 327: CALL_OW 234
 331: GO 316
 333: POP
 334: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 335: LD_ADDR_VAR 0 1
 339: PUSH
 340: LD_INT 22
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: EMPTY
 347: LIST
 348: LIST
 349: PUSH
 350: LD_INT 30
 352: PUSH
 353: LD_INT 0
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 30
 413: PUSH
 414: LD_INT 0
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: PUSH
 430: FOR_IN
 431: IFFALSE 455
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 433: LD_VAR 0 1
 437: PPUSH
 438: CALL_OW 274
 442: PPUSH
 443: LD_INT 2
 445: PPUSH
 446: LD_INT 9999
 448: PPUSH
 449: CALL_OW 277
 453: GO 430
 455: POP
 456: POP
// if IsSelected ( rudepo ) then
 457: LD_INT 2
 459: PPUSH
 460: CALL_OW 306
 464: IFFALSE 474
// your_side = 3 ;
 466: LD_ADDR_OWVAR 2
 470: PUSH
 471: LD_INT 3
 473: ST_TO_ADDR
// if IsSelected ( JMM ) then
 474: LD_EXP 1
 478: PPUSH
 479: CALL_OW 306
 483: IFFALSE 493
// your_side = 1 ;
 485: LD_ADDR_OWVAR 2
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// end ; end_of_file
 493: PPOPN 1
 495: END
// export function PrepareHeroes ; var veh ; begin
 496: LD_INT 0
 498: PPUSH
 499: PPUSH
// uc_side = 1 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// uc_nation = 1 ;
 508: LD_ADDR_OWVAR 21
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 516: LD_ADDR_EXP 1
 520: PUSH
 521: LD_STRING JMM
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL 5567 0 2
 531: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 532: LD_ADDR_EXP 14
 536: PUSH
 537: LD_STRING Harisson
 539: PPUSH
 540: LD_INT 0
 542: PPUSH
 543: CALL 5567 0 2
 547: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 548: LD_ADDR_EXP 10
 552: PUSH
 553: LD_STRING DeltaDoctor
 555: PPUSH
 556: CALL_OW 34
 560: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 561: LD_ADDR_VAR 0 2
 565: PUSH
 566: LD_INT 22
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 21
 578: PUSH
 579: LD_INT 2
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: PUSH
 586: LD_INT 58
 588: PUSH
 589: EMPTY
 590: LIST
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: LIST
 596: PPUSH
 597: CALL_OW 69
 601: ST_TO_ADDR
// if veh > 0 then
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 0
 609: GREATER
 610: IFFALSE 632
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 612: LD_EXP 1
 616: PPUSH
 617: LD_VAR 0 2
 621: PUSH
 622: LD_INT 1
 624: ARRAY
 625: PPUSH
 626: CALL_OW 52
// end else
 630: GO 647
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 632: LD_EXP 1
 636: PPUSH
 637: LD_INT 2
 639: PPUSH
 640: LD_INT 0
 642: PPUSH
 643: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 647: LD_STRING LisaIn06
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 30
 657: PUSH
 658: LD_INT 1
 660: EQUAL
 661: IFFALSE 765
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 663: LD_ADDR_VAR 0 2
 667: PUSH
 668: LD_INT 22
 670: PUSH
 671: LD_INT 1
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: LD_INT 21
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 58
 690: PUSH
 691: EMPTY
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PPUSH
 699: CALL_OW 69
 703: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 704: LD_ADDR_EXP 2
 708: PUSH
 709: LD_STRING Lisa
 711: PPUSH
 712: LD_INT 1
 714: PPUSH
 715: CALL 5567 0 2
 719: ST_TO_ADDR
// if veh > 0 then
 720: LD_VAR 0 2
 724: PUSH
 725: LD_INT 0
 727: GREATER
 728: IFFALSE 750
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 730: LD_EXP 2
 734: PPUSH
 735: LD_VAR 0 2
 739: PUSH
 740: LD_INT 1
 742: ARRAY
 743: PPUSH
 744: CALL_OW 52
// end else
 748: GO 765
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 750: LD_EXP 2
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 765: LD_STRING BobbyIn06
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 30
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 883
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 781: LD_ADDR_VAR 0 2
 785: PUSH
 786: LD_INT 22
 788: PUSH
 789: LD_INT 1
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 21
 798: PUSH
 799: LD_INT 2
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: PUSH
 806: LD_INT 58
 808: PUSH
 809: EMPTY
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PPUSH
 817: CALL_OW 69
 821: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 822: LD_ADDR_EXP 3
 826: PUSH
 827: LD_STRING Bobby
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: CALL 5567 0 2
 837: ST_TO_ADDR
// if veh > 0 then
 838: LD_VAR 0 2
 842: PUSH
 843: LD_INT 0
 845: GREATER
 846: IFFALSE 868
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 848: LD_EXP 3
 852: PPUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_INT 1
 860: ARRAY
 861: PPUSH
 862: CALL_OW 52
// end else
 866: GO 883
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 883: LD_STRING CyrusIn06
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: CALL_OW 30
 893: PUSH
 894: LD_INT 1
 896: EQUAL
 897: IFFALSE 1001
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 899: LD_ADDR_VAR 0 2
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 2
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 58
 926: PUSH
 927: EMPTY
 928: LIST
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: LIST
 934: PPUSH
 935: CALL_OW 69
 939: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 940: LD_ADDR_EXP 4
 944: PUSH
 945: LD_STRING Cyrus
 947: PPUSH
 948: LD_INT 1
 950: PPUSH
 951: CALL 5567 0 2
 955: ST_TO_ADDR
// if veh > 0 then
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 0
 963: GREATER
 964: IFFALSE 986
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 966: LD_EXP 4
 970: PPUSH
 971: LD_VAR 0 2
 975: PUSH
 976: LD_INT 1
 978: ARRAY
 979: PPUSH
 980: CALL_OW 52
// end else
 984: GO 1001
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 986: LD_EXP 4
 990: PPUSH
 991: LD_INT 2
 993: PPUSH
 994: LD_INT 0
 996: PPUSH
 997: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1001: LD_STRING FrankIn06
1003: PPUSH
1004: LD_INT 0
1006: PPUSH
1007: CALL_OW 30
1011: PUSH
1012: LD_INT 1
1014: EQUAL
1015: IFFALSE 1119
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1017: LD_ADDR_VAR 0 2
1021: PUSH
1022: LD_INT 22
1024: PUSH
1025: LD_INT 1
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 21
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 58
1044: PUSH
1045: EMPTY
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PPUSH
1053: CALL_OW 69
1057: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1058: LD_ADDR_EXP 5
1062: PUSH
1063: LD_STRING Frank
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 5567 0 2
1073: ST_TO_ADDR
// if veh > 0 then
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 0
1081: GREATER
1082: IFFALSE 1104
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1084: LD_EXP 5
1088: PPUSH
1089: LD_VAR 0 2
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 52
// end else
1102: GO 1119
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1104: LD_EXP 5
1108: PPUSH
1109: LD_INT 2
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1119: LD_STRING BrownIn06
1121: PPUSH
1122: LD_INT 0
1124: PPUSH
1125: CALL_OW 30
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1237
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1135: LD_ADDR_VAR 0 2
1139: PUSH
1140: LD_INT 22
1142: PUSH
1143: LD_INT 1
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PUSH
1150: LD_INT 21
1152: PUSH
1153: LD_INT 2
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 58
1162: PUSH
1163: EMPTY
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1176: LD_ADDR_EXP 6
1180: PUSH
1181: LD_STRING Brown
1183: PPUSH
1184: LD_INT 1
1186: PPUSH
1187: CALL 5567 0 2
1191: ST_TO_ADDR
// if veh > 0 then
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 0
1199: GREATER
1200: IFFALSE 1222
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1202: LD_EXP 6
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ARRAY
1215: PPUSH
1216: CALL_OW 52
// end else
1220: GO 1237
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1222: LD_EXP 6
1226: PPUSH
1227: LD_INT 2
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1237: LD_STRING DonaldsonIn06
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 30
1247: PUSH
1248: LD_INT 1
1250: EQUAL
1251: IFFALSE 1355
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1253: LD_ADDR_VAR 0 2
1257: PUSH
1258: LD_INT 22
1260: PUSH
1261: LD_INT 1
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 2
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 58
1280: PUSH
1281: EMPTY
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1294: LD_ADDR_EXP 7
1298: PUSH
1299: LD_STRING Donaldson
1301: PPUSH
1302: LD_INT 1
1304: PPUSH
1305: CALL 5567 0 2
1309: ST_TO_ADDR
// if veh > 0 then
1310: LD_VAR 0 2
1314: PUSH
1315: LD_INT 0
1317: GREATER
1318: IFFALSE 1340
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1320: LD_EXP 7
1324: PPUSH
1325: LD_VAR 0 2
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: CALL_OW 52
// end else
1338: GO 1355
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1340: LD_EXP 7
1344: PPUSH
1345: LD_INT 2
1347: PPUSH
1348: LD_INT 0
1350: PPUSH
1351: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1355: LD_STRING GladstoneIn06
1357: PPUSH
1358: LD_INT 0
1360: PPUSH
1361: CALL_OW 30
1365: PUSH
1366: LD_INT 1
1368: EQUAL
1369: IFFALSE 1473
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: LD_INT 22
1378: PUSH
1379: LD_INT 1
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 21
1388: PUSH
1389: LD_INT 2
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 58
1398: PUSH
1399: EMPTY
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: PPUSH
1407: CALL_OW 69
1411: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1412: LD_ADDR_EXP 8
1416: PUSH
1417: LD_STRING Gladstone
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: CALL 5567 0 2
1427: ST_TO_ADDR
// if veh > 0 then
1428: LD_VAR 0 2
1432: PUSH
1433: LD_INT 0
1435: GREATER
1436: IFFALSE 1458
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1438: LD_EXP 8
1442: PPUSH
1443: LD_VAR 0 2
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: CALL_OW 52
// end else
1456: GO 1473
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1458: LD_EXP 8
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 0
1468: PPUSH
1469: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1473: LD_INT 66
1475: PPUSH
1476: LD_INT 4
1478: PPUSH
1479: CALL_OW 86
// end ;
1483: LD_VAR 0 1
1487: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1488: LD_INT 0
1490: PPUSH
1491: PPUSH
1492: PPUSH
1493: PPUSH
1494: PPUSH
1495: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1496: LD_ADDR_VAR 0 5
1500: PUSH
1501: LD_STRING 06_VehiclesIn06_1
1503: PPUSH
1504: EMPTY
1505: PPUSH
1506: CALL_OW 30
1510: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1511: LD_ADDR_EXP 40
1515: PUSH
1516: LD_STRING 06_ResourcesInCargo06_1
1518: PPUSH
1519: EMPTY
1520: PPUSH
1521: CALL_OW 30
1525: ST_TO_ADDR
// cargoList = [ ] ;
1526: LD_ADDR_VAR 0 6
1530: PUSH
1531: EMPTY
1532: ST_TO_ADDR
// uc_side = 1 ;
1533: LD_ADDR_OWVAR 20
1537: PUSH
1538: LD_INT 1
1540: ST_TO_ADDR
// if vehicles > 0 then
1541: LD_VAR 0 5
1545: PUSH
1546: LD_INT 0
1548: GREATER
1549: IFFALSE 1904
// begin for i := 1 to vehicles do
1551: LD_ADDR_VAR 0 2
1555: PUSH
1556: DOUBLE
1557: LD_INT 1
1559: DEC
1560: ST_TO_ADDR
1561: LD_VAR 0 5
1565: PUSH
1566: FOR_TO
1567: IFFALSE 1716
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1569: LD_ADDR_OWVAR 21
1573: PUSH
1574: LD_VAR 0 5
1578: PUSH
1579: LD_VAR 0 2
1583: ARRAY
1584: PUSH
1585: LD_INT 1
1587: ARRAY
1588: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1589: LD_ADDR_OWVAR 37
1593: PUSH
1594: LD_VAR 0 5
1598: PUSH
1599: LD_VAR 0 2
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: ARRAY
1608: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1609: LD_ADDR_OWVAR 39
1613: PUSH
1614: LD_VAR 0 5
1618: PUSH
1619: LD_VAR 0 2
1623: ARRAY
1624: PUSH
1625: LD_INT 3
1627: ARRAY
1628: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1629: LD_ADDR_OWVAR 38
1633: PUSH
1634: LD_VAR 0 5
1638: PUSH
1639: LD_VAR 0 2
1643: ARRAY
1644: PUSH
1645: LD_INT 4
1647: ARRAY
1648: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1649: LD_ADDR_OWVAR 40
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 5
1667: ARRAY
1668: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1669: LD_ADDR_OWVAR 41
1673: PUSH
1674: LD_INT 40
1676: ST_TO_ADDR
// veh = CreateVehicle ;
1677: LD_ADDR_VAR 0 4
1681: PUSH
1682: CALL_OW 45
1686: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1687: LD_VAR 0 4
1691: PPUSH
1692: LD_INT 3
1694: PPUSH
1695: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1699: LD_VAR 0 4
1703: PPUSH
1704: LD_INT 2
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: CALL_OW 49
// end ;
1714: GO 1566
1716: POP
1717: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1718: LD_ADDR_VAR 0 6
1722: PUSH
1723: LD_INT 22
1725: PUSH
1726: LD_INT 1
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 21
1735: PUSH
1736: LD_INT 2
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 34
1745: PUSH
1746: LD_INT 12
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: ST_TO_ADDR
// if cargoList > 0 then
1763: LD_VAR 0 6
1767: PUSH
1768: LD_INT 0
1770: GREATER
1771: IFFALSE 1904
// for i = 1 to cargoList do
1773: LD_ADDR_VAR 0 2
1777: PUSH
1778: DOUBLE
1779: LD_INT 1
1781: DEC
1782: ST_TO_ADDR
1783: LD_VAR 0 6
1787: PUSH
1788: FOR_TO
1789: IFFALSE 1902
// begin if resources > 0 then
1791: LD_EXP 40
1795: PUSH
1796: LD_INT 0
1798: GREATER
1799: IFFALSE 1900
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1801: LD_VAR 0 6
1805: PUSH
1806: LD_VAR 0 2
1810: ARRAY
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_EXP 40
1819: PUSH
1820: LD_VAR 0 2
1824: ARRAY
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PPUSH
1830: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1834: LD_VAR 0 6
1838: PUSH
1839: LD_VAR 0 2
1843: ARRAY
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: LD_EXP 40
1852: PUSH
1853: LD_VAR 0 2
1857: ARRAY
1858: PUSH
1859: LD_INT 2
1861: ARRAY
1862: PPUSH
1863: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1867: LD_VAR 0 6
1871: PUSH
1872: LD_VAR 0 2
1876: ARRAY
1877: PPUSH
1878: LD_INT 3
1880: PPUSH
1881: LD_EXP 40
1885: PUSH
1886: LD_VAR 0 2
1890: ARRAY
1891: PUSH
1892: LD_INT 3
1894: ARRAY
1895: PPUSH
1896: CALL_OW 291
// end ; end ;
1900: GO 1788
1902: POP
1903: POP
// end ; end ;
1904: LD_VAR 0 1
1908: RET
// export function PrepareOthers ; var i , veh ; begin
1909: LD_INT 0
1911: PPUSH
1912: PPUSH
1913: PPUSH
// uc_side = 1 ;
1914: LD_ADDR_OWVAR 20
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// uc_nation = 1 ;
1922: LD_ADDR_OWVAR 21
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1930: LD_ADDR_EXP 11
1934: PUSH
1935: LD_STRING OthersIn06
1937: PPUSH
1938: CALL_OW 31
1942: ST_TO_ADDR
// for i in others do
1943: LD_ADDR_VAR 0 2
1947: PUSH
1948: LD_EXP 11
1952: PUSH
1953: FOR_IN
1954: IFFALSE 2044
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1956: LD_ADDR_VAR 0 3
1960: PUSH
1961: LD_INT 22
1963: PUSH
1964: LD_INT 1
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 21
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 58
1983: PUSH
1984: EMPTY
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: PPUSH
1992: CALL_OW 69
1996: ST_TO_ADDR
// if veh > 0 then
1997: LD_VAR 0 3
2001: PUSH
2002: LD_INT 0
2004: GREATER
2005: IFFALSE 2027
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2007: LD_VAR 0 2
2011: PPUSH
2012: LD_VAR 0 3
2016: PUSH
2017: LD_INT 1
2019: ARRAY
2020: PPUSH
2021: CALL_OW 52
// end else
2025: GO 2042
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2027: LD_VAR 0 2
2031: PPUSH
2032: LD_INT 2
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL_OW 49
// end ; end ;
2042: GO 1953
2044: POP
2045: POP
// end ;
2046: LD_VAR 0 1
2050: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2051: LD_INT 0
2053: PPUSH
2054: PPUSH
2055: PPUSH
// uc_side = 1 ;
2056: LD_ADDR_OWVAR 20
2060: PUSH
2061: LD_INT 1
2063: ST_TO_ADDR
// uc_nation = 0 ;
2064: LD_ADDR_OWVAR 21
2068: PUSH
2069: LD_INT 0
2071: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2072: LD_ADDR_EXP 12
2076: PUSH
2077: LD_STRING ApeIn06
2079: PPUSH
2080: CALL_OW 31
2084: ST_TO_ADDR
// for i in ape do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 12
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2115
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2098: LD_VAR 0 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 49
2113: GO 2095
2115: POP
2116: POP
// end ;
2117: LD_VAR 0 1
2121: RET
// export function PrepareDenis ; begin
2122: LD_INT 0
2124: PPUSH
// uc_side = 1 ;
2125: LD_ADDR_OWVAR 20
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// uc_nation = 1 ;
2133: LD_ADDR_OWVAR 21
2137: PUSH
2138: LD_INT 1
2140: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2141: LD_ADDR_EXP 9
2145: PUSH
2146: LD_STRING Denis
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 5567 0 2
2156: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2157: LD_EXP 9
2161: PPUSH
2162: LD_INT 11
2164: PPUSH
2165: LD_INT 0
2167: PPUSH
2168: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2172: LD_EXP 9
2176: PPUSH
2177: LD_INT 4
2179: PPUSH
2180: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2184: LD_EXP 9
2188: PPUSH
2189: LD_INT 750
2191: PPUSH
2192: CALL_OW 234
// end ;
2196: LD_VAR 0 1
2200: RET
// export function HarrisonSupport ; var un , veh ; begin
2201: LD_INT 0
2203: PPUSH
2204: PPUSH
2205: PPUSH
// uc_side = 1 ;
2206: LD_ADDR_OWVAR 20
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// uc_nation = 1 ;
2214: LD_ADDR_OWVAR 21
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// vc_engine = 1 ;
2222: LD_ADDR_OWVAR 39
2226: PUSH
2227: LD_INT 1
2229: ST_TO_ADDR
// vc_control = 1 ;
2230: LD_ADDR_OWVAR 38
2234: PUSH
2235: LD_INT 1
2237: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2238: LD_ADDR_OWVAR 40
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 4
2248: PUSH
2249: LD_INT 2
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: LD_OWVAR 67
2261: ARRAY
2262: ST_TO_ADDR
// vc_chassis = 2 ;
2263: LD_ADDR_OWVAR 37
2267: PUSH
2268: LD_INT 2
2270: ST_TO_ADDR
// veh = CreateVehicle ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: CALL_OW 45
2280: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2281: LD_VAR 0 3
2285: PPUSH
2286: LD_INT 2
2288: PPUSH
2289: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2293: LD_VAR 0 3
2297: PPUSH
2298: LD_INT 3
2300: PPUSH
2301: LD_INT 0
2303: PPUSH
2304: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2308: LD_VAR 0 3
2312: PPUSH
2313: LD_INT 50
2315: PPUSH
2316: CALL_OW 240
// hc_class := 2 ;
2320: LD_ADDR_OWVAR 28
2324: PUSH
2325: LD_INT 2
2327: ST_TO_ADDR
// hc_sex := sex_male ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2336: LD_ADDR_OWVAR 33
2340: PUSH
2341: LD_STRING SecondCharsGal
2343: ST_TO_ADDR
// hc_face_number := 52 ;
2344: LD_ADDR_OWVAR 34
2348: PUSH
2349: LD_INT 52
2351: ST_TO_ADDR
// hc_name := Craig Brown ;
2352: LD_ADDR_OWVAR 26
2356: PUSH
2357: LD_STRING Craig Brown
2359: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2360: LD_ADDR_OWVAR 29
2364: PUSH
2365: LD_INT 10
2367: PUSH
2368: LD_INT 10
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2375: LD_ADDR_OWVAR 30
2379: PUSH
2380: LD_INT 0
2382: PUSH
2383: LD_INT 2
2385: PUSH
2386: LD_INT 0
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2398: LD_ADDR_OWVAR 31
2402: PUSH
2403: LD_INT 2
2405: PUSH
2406: LD_INT 3
2408: PUSH
2409: LD_INT 0
2411: PUSH
2412: LD_INT 0
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2421: LD_ADDR_EXP 17
2425: PUSH
2426: CALL_OW 44
2430: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2431: LD_EXP 17
2435: PPUSH
2436: LD_VAR 0 3
2440: PPUSH
2441: CALL_OW 52
// vc_engine = 1 ;
2445: LD_ADDR_OWVAR 39
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// vc_control = 1 ;
2453: LD_ADDR_OWVAR 38
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2461: LD_ADDR_OWVAR 40
2465: PUSH
2466: LD_INT 3
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5567 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 3 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 3
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING SecondCharsGal
3766: ST_TO_ADDR
// hc_face_number := 55 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 55
3774: ST_TO_ADDR
// hc_name := George McCarthy ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING George McCarthy
3782: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 11
3790: PUSH
3791: LD_INT 10
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 0
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 2
3811: PUSH
3812: LD_INT 0
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 23
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: CALL_OW 87
// wait ( 0 0$1 ) ;
3878: LD_INT 35
3880: PPUSH
3881: CALL_OW 67
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11d-Sol4-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11d-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 1 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 1
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING AmGalRemake
3950: ST_TO_ADDR
// hc_face_number := 7 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 7
3958: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING Bobby Jordan
3966: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 9
3974: PUSH
3975: LD_INT 11
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 1
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 0
3995: PUSH
3996: LD_INT 1
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 2
4012: PUSH
4013: LD_INT 1
4015: PUSH
4016: LD_INT 1
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 24
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// wait ( 0 0$1 ) ;
4053: LD_INT 35
4055: PPUSH
4056: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4060: LD_VAR 0 3
4064: PPUSH
4065: CALL_OW 87
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11b-Sol3-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11b-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 3 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 3
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 1 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 1
4118: ST_TO_ADDR
// hc_sex := sex_male ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 1
4126: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING AmGalRemake
4134: ST_TO_ADDR
// hc_face_number := 9 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 9
4142: ST_TO_ADDR
// hc_name := Darius Dajay ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Darius Dajay
4150: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 11
4158: PUSH
4159: LD_INT 11
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 25
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11f-Sol5-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 4 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 4
4280: EQUAL
4281: IFFALSE 4445
// begin hc_class := 3 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 3
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 46 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 46
4314: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Sylvia Creak
4322: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 10
4330: PUSH
4331: LD_INT 9
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: LD_INT 1
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 3
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 26
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11e-FSol4-1
4436: PPUSH
4437: CALL_OW 88
// DialogueOff ;
4441: CALL_OW 7
// end ; if number = 5 then
4445: LD_VAR 0 1
4449: PUSH
4450: LD_INT 5
4452: EQUAL
4453: IFFALSE 4629
// begin hc_class := 1 ;
4455: LD_ADDR_OWVAR 28
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// hc_sex := sex_female ;
4463: LD_ADDR_OWVAR 27
4467: PUSH
4468: LD_INT 2
4470: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4471: LD_ADDR_OWVAR 33
4475: PUSH
4476: LD_STRING SecondCharsGal
4478: ST_TO_ADDR
// hc_face_number := 37 ;
4479: LD_ADDR_OWVAR 34
4483: PUSH
4484: LD_INT 37
4486: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4487: LD_ADDR_OWVAR 26
4491: PUSH
4492: LD_STRING Margherite Simpson
4494: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4495: LD_ADDR_OWVAR 29
4499: PUSH
4500: LD_INT 11
4502: PUSH
4503: LD_INT 10
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4510: LD_ADDR_OWVAR 30
4514: PUSH
4515: LD_INT 1
4517: PUSH
4518: LD_INT 1
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: LD_INT 0
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4533: LD_ADDR_OWVAR 31
4537: PUSH
4538: LD_INT 1
4540: PUSH
4541: LD_INT 1
4543: PUSH
4544: LD_INT 1
4546: PUSH
4547: LD_INT 1
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: ST_TO_ADDR
// un = CreateHuman ;
4556: LD_ADDR_VAR 0 3
4560: PUSH
4561: CALL_OW 44
4565: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4566: LD_VAR 0 3
4570: PPUSH
4571: LD_INT 27
4573: PPUSH
4574: LD_INT 1
4576: PPUSH
4577: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4581: LD_VAR 0 3
4585: PPUSH
4586: CALL_OW 87
// wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// DialogueOn ;
4597: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4601: LD_VAR 0 3
4605: PPUSH
4606: LD_STRING D11c-FSol3-1
4608: PPUSH
4609: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4613: LD_EXP 1
4617: PPUSH
4618: LD_STRING D11c-JMM-1
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// end ; if number = 6 then
4629: LD_VAR 0 1
4633: PUSH
4634: LD_INT 6
4636: EQUAL
4637: IFFALSE 4811
// begin hc_class := 1 ;
4639: LD_ADDR_OWVAR 28
4643: PUSH
4644: LD_INT 1
4646: ST_TO_ADDR
// hc_sex := sex_male ;
4647: LD_ADDR_OWVAR 27
4651: PUSH
4652: LD_INT 1
4654: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4655: LD_ADDR_OWVAR 33
4659: PUSH
4660: LD_STRING AmGalRemake
4662: ST_TO_ADDR
// hc_face_number := 1 ;
4663: LD_ADDR_OWVAR 34
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// hc_name := Charles Brown ;
4671: LD_ADDR_OWVAR 26
4675: PUSH
4676: LD_STRING Charles Brown
4678: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4679: LD_ADDR_OWVAR 29
4683: PUSH
4684: LD_INT 12
4686: PUSH
4687: LD_INT 11
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4694: LD_ADDR_OWVAR 30
4698: PUSH
4699: LD_INT 2
4701: PUSH
4702: LD_INT 0
4704: PUSH
4705: LD_INT 0
4707: PUSH
4708: LD_INT 0
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4717: LD_ADDR_OWVAR 31
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 1
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: ST_TO_ADDR
// un = CreateHuman ;
4740: LD_ADDR_VAR 0 3
4744: PUSH
4745: CALL_OW 44
4749: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
4750: LD_VAR 0 3
4754: PPUSH
4755: LD_INT 28
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4765: LD_VAR 0 3
4769: PPUSH
4770: CALL_OW 87
// wait ( 0 0$1 ) ;
4774: LD_INT 35
4776: PPUSH
4777: CALL_OW 67
// DialogueOn ;
4781: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4785: LD_VAR 0 3
4789: PPUSH
4790: LD_STRING D4-Sol1-5
4792: PPUSH
4793: CALL_OW 88
// DialogueOff ;
4797: CALL_OW 7
// tempCharles = un ;
4801: LD_ADDR_EXP 13
4805: PUSH
4806: LD_VAR 0 3
4810: ST_TO_ADDR
// end ; if number = 7 then
4811: LD_VAR 0 1
4815: PUSH
4816: LD_INT 7
4818: EQUAL
4819: IFFALSE 5069
// begin hc_class := 1 ;
4821: LD_ADDR_OWVAR 28
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// hc_sex := sex_female ;
4829: LD_ADDR_OWVAR 27
4833: PUSH
4834: LD_INT 2
4836: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4837: LD_ADDR_OWVAR 33
4841: PUSH
4842: LD_STRING AmGalRemake
4844: ST_TO_ADDR
// hc_face_number := 2 ;
4845: LD_ADDR_OWVAR 34
4849: PUSH
4850: LD_INT 2
4852: ST_TO_ADDR
// hc_name := Johanna Holland ;
4853: LD_ADDR_OWVAR 26
4857: PUSH
4858: LD_STRING Johanna Holland
4860: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4861: LD_ADDR_OWVAR 29
4865: PUSH
4866: LD_INT 10
4868: PUSH
4869: LD_INT 10
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4876: LD_ADDR_OWVAR 30
4880: PUSH
4881: LD_INT 1
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_INT 0
4889: PUSH
4890: LD_INT 1
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4899: LD_ADDR_OWVAR 31
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: LD_INT 0
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// un = CreateHuman ;
4922: LD_ADDR_VAR 0 3
4926: PUSH
4927: CALL_OW 44
4931: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
4932: LD_VAR 0 3
4936: PPUSH
4937: LD_INT 29
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4947: LD_VAR 0 3
4951: PPUSH
4952: CALL_OW 87
// wait ( 0 0$1 ) ;
4956: LD_INT 35
4958: PPUSH
4959: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
4963: LD_INT 30
4965: PPUSH
4966: LD_INT 22
4968: PUSH
4969: LD_INT 3
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PPUSH
4976: CALL_OW 70
4980: IFFALSE 5069
// begin DialogueOn ;
4982: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
4986: LD_VAR 0 3
4990: PPUSH
4991: CALL_OW 250
4995: PPUSH
4996: LD_VAR 0 3
5000: PPUSH
5001: CALL_OW 251
5005: PPUSH
5006: LD_INT 1
5008: PPUSH
5009: LD_INT 15
5011: NEG
5012: PPUSH
5013: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5017: LD_VAR 0 3
5021: PPUSH
5022: CALL_OW 250
5026: PPUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: CALL_OW 251
5036: PPUSH
5037: LD_INT 1
5039: PPUSH
5040: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5044: LD_VAR 0 3
5048: PPUSH
5049: LD_STRING D11a-FSol2-1
5051: PPUSH
5052: CALL_OW 88
// ComCrawl ( un ) ;
5056: LD_VAR 0 3
5060: PPUSH
5061: CALL_OW 137
// DialogueOff ;
5065: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5069: LD_ADDR_EXP 45
5073: PUSH
5074: LD_EXP 45
5078: PUSH
5079: LD_VAR 0 3
5083: UNION
5084: ST_TO_ADDR
// end ;
5085: LD_VAR 0 2
5089: RET
// every 0 0$1 do var i ;
5090: GO 5092
5092: DISABLE
5093: LD_INT 0
5095: PPUSH
// begin enable ;
5096: ENABLE
// if not ignoreTarget then
5097: LD_EXP 45
5101: NOT
5102: IFFALSE 5106
// exit ;
5104: GO 5187
// for i in ignoreTarget do
5106: LD_ADDR_VAR 0 1
5110: PUSH
5111: LD_EXP 45
5115: PUSH
5116: FOR_IN
5117: IFFALSE 5185
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 91
5131: PUSH
5132: LD_VAR 0 1
5136: PUSH
5137: LD_INT 10
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PPUSH
5149: CALL_OW 69
5153: PUSH
5154: LD_EXP 45
5158: DIFF
5159: PUSH
5160: LD_INT 1
5162: GREATER
5163: IFFALSE 5183
// begin ignoreTarget := ignoreTarget diff i ;
5165: LD_ADDR_EXP 45
5169: PUSH
5170: LD_EXP 45
5174: PUSH
5175: LD_VAR 0 1
5179: DIFF
5180: ST_TO_ADDR
// break ;
5181: GO 5185
// end ;
5183: GO 5116
5185: POP
5186: POP
// end ; end_of_file
5187: PPOPN 1
5189: END
// export function PrepareRussian ; var i ; begin
5190: LD_INT 0
5192: PPUSH
5193: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5194: LD_INT 3
5196: PPUSH
5197: LD_INT 3
5199: PPUSH
5200: LD_INT 2
5202: PPUSH
5203: LD_EXP 34
5207: PPUSH
5208: LD_EXP 35
5212: PPUSH
5213: CALL_OW 12
5217: PPUSH
5218: LD_INT 2
5220: PPUSH
5221: LD_INT 4
5223: PPUSH
5224: CALL 5837 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5228: LD_INT 3
5230: PPUSH
5231: LD_INT 3
5233: PPUSH
5234: LD_INT 8
5236: PPUSH
5237: LD_EXP 34
5241: PPUSH
5242: LD_EXP 35
5246: PPUSH
5247: CALL_OW 12
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: LD_INT 4
5257: PPUSH
5258: CALL 5837 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5262: LD_INT 3
5264: PPUSH
5265: LD_INT 3
5267: PPUSH
5268: LD_INT 67
5270: PPUSH
5271: LD_EXP 34
5275: PPUSH
5276: LD_EXP 35
5280: PPUSH
5281: CALL_OW 12
5285: PPUSH
5286: LD_INT 1
5288: PPUSH
5289: LD_INT 2
5291: PPUSH
5292: CALL 5837 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5296: LD_INT 3
5298: PPUSH
5299: LD_INT 3
5301: PPUSH
5302: LD_INT 21
5304: PPUSH
5305: LD_EXP 34
5309: PPUSH
5310: LD_EXP 35
5314: PPUSH
5315: CALL_OW 12
5319: PPUSH
5320: LD_INT 3
5322: PPUSH
5323: LD_INT 6
5325: PPUSH
5326: CALL 5837 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5330: LD_INT 3
5332: PPUSH
5333: LD_INT 3
5335: PPUSH
5336: LD_INT 17
5338: PPUSH
5339: LD_EXP 34
5343: PPUSH
5344: LD_EXP 35
5348: PPUSH
5349: CALL_OW 12
5353: PPUSH
5354: LD_INT 3
5356: PPUSH
5357: LD_INT 6
5359: PPUSH
5360: CALL 5837 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5364: LD_INT 3
5366: PPUSH
5367: LD_INT 3
5369: PPUSH
5370: LD_INT 32
5372: PPUSH
5373: LD_EXP 34
5377: PPUSH
5378: LD_EXP 35
5382: PPUSH
5383: CALL_OW 12
5387: PPUSH
5388: LD_INT 4
5390: PPUSH
5391: LD_INT 2
5393: PPUSH
5394: CALL 5837 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5398: LD_ADDR_VAR 0 2
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 3
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 21
5415: PUSH
5416: LD_INT 3
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 30
5425: PUSH
5426: LD_INT 32
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: PPUSH
5438: CALL_OW 69
5442: PUSH
5443: FOR_IN
5444: IFFALSE 5484
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5446: LD_INT 3
5448: PPUSH
5449: LD_INT 3
5451: PPUSH
5452: LD_VAR 0 2
5456: PPUSH
5457: LD_EXP 34
5461: PPUSH
5462: LD_EXP 35
5466: PPUSH
5467: CALL_OW 12
5471: PPUSH
5472: LD_INT 1
5474: PPUSH
5475: LD_INT 1
5477: PPUSH
5478: CALL 5837 0 6
5482: GO 5443
5484: POP
5485: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5486: LD_ADDR_VAR 0 2
5490: PUSH
5491: LD_INT 22
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 21
5503: PUSH
5504: LD_INT 3
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PUSH
5511: LD_INT 30
5513: PUSH
5514: LD_INT 31
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5560
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5534: LD_EXP 34
5538: PPUSH
5539: LD_EXP 35
5543: PPUSH
5544: CALL_OW 12
5548: PPUSH
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL 5947 0 2
5558: GO 5531
5560: POP
5561: POP
// end ; end_of_file
5562: LD_VAR 0 1
5566: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
// if exist_mode then
5571: LD_VAR 0 2
5575: IFFALSE 5600
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5577: LD_ADDR_VAR 0 4
5581: PUSH
5582: LD_EXP 44
5586: PUSH
5587: LD_VAR 0 1
5591: STR
5592: PPUSH
5593: CALL_OW 34
5597: ST_TO_ADDR
// end else
5598: GO 5615
// begin unit := NewCharacter ( ident ) ;
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: CALL_OW 25
5614: ST_TO_ADDR
// end ; result := unit ;
5615: LD_ADDR_VAR 0 3
5619: PUSH
5620: LD_VAR 0 4
5624: ST_TO_ADDR
// end ;
5625: LD_VAR 0 3
5629: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5630: LD_INT 0
5632: PPUSH
5633: PPUSH
5634: PPUSH
// rnd = rand ( 1 , characters ) ;
5635: LD_ADDR_VAR 0 6
5639: PUSH
5640: LD_INT 1
5642: PPUSH
5643: LD_VAR 0 1
5647: PPUSH
5648: CALL_OW 12
5652: ST_TO_ADDR
// for i = 1 to characters do
5653: LD_ADDR_VAR 0 5
5657: PUSH
5658: DOUBLE
5659: LD_INT 1
5661: DEC
5662: ST_TO_ADDR
5663: LD_VAR 0 1
5667: PUSH
5668: FOR_TO
5669: IFFALSE 5779
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5671: LD_VAR 0 5
5675: PUSH
5676: LD_VAR 0 6
5680: EQUAL
5681: PUSH
5682: LD_VAR 0 1
5686: PUSH
5687: LD_VAR 0 5
5691: ARRAY
5692: PPUSH
5693: CALL_OW 258
5697: PUSH
5698: LD_INT 1
5700: EQUAL
5701: AND
5702: IFFALSE 5724
// Say ( characters [ i ] , dialogMID ) ;
5704: LD_VAR 0 1
5708: PUSH
5709: LD_VAR 0 5
5713: ARRAY
5714: PPUSH
5715: LD_VAR 0 2
5719: PPUSH
5720: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5724: LD_VAR 0 5
5728: PUSH
5729: LD_VAR 0 6
5733: EQUAL
5734: PUSH
5735: LD_VAR 0 1
5739: PUSH
5740: LD_VAR 0 5
5744: ARRAY
5745: PPUSH
5746: CALL_OW 258
5750: PUSH
5751: LD_INT 2
5753: EQUAL
5754: AND
5755: IFFALSE 5777
// Say ( characters [ i ] , dialogFID ) ;
5757: LD_VAR 0 1
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PPUSH
5768: LD_VAR 0 3
5772: PPUSH
5773: CALL_OW 88
// end ;
5777: GO 5668
5779: POP
5780: POP
// end ;
5781: LD_VAR 0 4
5785: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5786: LD_INT 0
5788: PPUSH
5789: PPUSH
// for i in charactersList do
5790: LD_ADDR_VAR 0 4
5794: PUSH
5795: LD_VAR 0 1
5799: PUSH
5800: FOR_IN
5801: IFFALSE 5830
// begin if IsOk ( i ) then
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 302
5812: IFFALSE 5828
// SaveCharacters ( i , ident ) ;
5814: LD_VAR 0 4
5818: PPUSH
5819: LD_VAR 0 2
5823: PPUSH
5824: CALL_OW 38
// end ;
5828: GO 5800
5830: POP
5831: POP
// end ;
5832: LD_VAR 0 3
5836: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
5842: PPUSH
// for i = 1 to count do
5843: LD_ADDR_VAR 0 8
5847: PUSH
5848: DOUBLE
5849: LD_INT 1
5851: DEC
5852: ST_TO_ADDR
5853: LD_VAR 0 6
5857: PUSH
5858: FOR_TO
5859: IFFALSE 5940
// begin uc_side = side ;
5861: LD_ADDR_OWVAR 20
5865: PUSH
5866: LD_VAR 0 1
5870: ST_TO_ADDR
// uc_nation = nation ;
5871: LD_ADDR_OWVAR 21
5875: PUSH
5876: LD_VAR 0 2
5880: ST_TO_ADDR
// hc_gallery =  ;
5881: LD_ADDR_OWVAR 33
5885: PUSH
5886: LD_STRING 
5888: ST_TO_ADDR
// hc_name =  ;
5889: LD_ADDR_OWVAR 26
5893: PUSH
5894: LD_STRING 
5896: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5897: LD_INT 0
5899: PPUSH
5900: LD_VAR 0 5
5904: PPUSH
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 380
// un = CreateHuman ;
5914: LD_ADDR_VAR 0 10
5918: PUSH
5919: CALL_OW 44
5923: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5924: LD_VAR 0 10
5928: PPUSH
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 52
// end ;
5938: GO 5858
5940: POP
5941: POP
// end ;
5942: LD_VAR 0 7
5946: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
// uc_side := GetSide ( b ) ;
5952: LD_ADDR_OWVAR 20
5956: PUSH
5957: LD_VAR 0 2
5961: PPUSH
5962: CALL_OW 255
5966: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5967: LD_ADDR_OWVAR 21
5971: PUSH
5972: LD_VAR 0 2
5976: PPUSH
5977: CALL_OW 248
5981: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5982: LD_INT 0
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: LD_VAR 0 1
5992: PPUSH
5993: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5997: LD_ADDR_VAR 0 5
6001: PUSH
6002: LD_VAR 0 2
6006: PPUSH
6007: CALL_OW 254
6011: PUSH
6012: LD_INT 3
6014: MINUS
6015: ST_TO_ADDR
// if dir < 0 then
6016: LD_VAR 0 5
6020: PUSH
6021: LD_INT 0
6023: LESS
6024: IFFALSE 6040
// dir := 6 + dir ;
6026: LD_ADDR_VAR 0 5
6030: PUSH
6031: LD_INT 6
6033: PUSH
6034: LD_VAR 0 5
6038: PLUS
6039: ST_TO_ADDR
// un := CreateHuman ;
6040: LD_ADDR_VAR 0 4
6044: PUSH
6045: CALL_OW 44
6049: ST_TO_ADDR
// SetDir ( un , dir ) ;
6050: LD_VAR 0 4
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_VAR 0 2
6073: PPUSH
6074: CALL_OW 52
// end ;
6078: LD_VAR 0 3
6082: RET
// export function PrepareDifficulty ; begin
6083: LD_INT 0
6085: PPUSH
// if Difficulty = 1 then
6086: LD_OWVAR 67
6090: PUSH
6091: LD_INT 1
6093: EQUAL
6094: IFFALSE 6112
// begin RuSolMinLevel = 2 ;
6096: LD_ADDR_EXP 34
6100: PUSH
6101: LD_INT 2
6103: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6104: LD_ADDR_EXP 35
6108: PUSH
6109: LD_INT 4
6111: ST_TO_ADDR
// end ; if Difficulty = 2 then
6112: LD_OWVAR 67
6116: PUSH
6117: LD_INT 2
6119: EQUAL
6120: IFFALSE 6138
// begin RuSolMinLevel = 3 ;
6122: LD_ADDR_EXP 34
6126: PUSH
6127: LD_INT 3
6129: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6130: LD_ADDR_EXP 35
6134: PUSH
6135: LD_INT 5
6137: ST_TO_ADDR
// end ; if Difficulty = 3 then
6138: LD_OWVAR 67
6142: PUSH
6143: LD_INT 3
6145: EQUAL
6146: IFFALSE 6164
// begin RuSolMinLevel = 3 ;
6148: LD_ADDR_EXP 34
6152: PUSH
6153: LD_INT 3
6155: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6156: LD_ADDR_EXP 35
6160: PUSH
6161: LD_INT 6
6163: ST_TO_ADDR
// end ; end ;
6164: LD_VAR 0 1
6168: RET
// export function ShowQuery1 ; begin
6169: LD_INT 0
6171: PPUSH
// case query ( QKill ) of 1 :
6172: LD_STRING QKill
6174: PPUSH
6175: CALL_OW 97
6179: PUSH
6180: LD_INT 1
6182: DOUBLE
6183: EQUAL
6184: IFTRUE 6188
6186: GO 6199
6188: POP
// begin result = 1 ;
6189: LD_ADDR_VAR 0 1
6193: PUSH
6194: LD_INT 1
6196: ST_TO_ADDR
// end ; 2 :
6197: GO 6238
6199: LD_INT 2
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6218
6207: POP
// begin result = 2 ;
6208: LD_ADDR_VAR 0 1
6212: PUSH
6213: LD_INT 2
6215: ST_TO_ADDR
// end ; 3 :
6216: GO 6238
6218: LD_INT 3
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6237
6226: POP
// begin result = 3 ;
6227: LD_ADDR_VAR 0 1
6231: PUSH
6232: LD_INT 3
6234: ST_TO_ADDR
// end ; end ;
6235: GO 6238
6237: POP
// end ;
6238: LD_VAR 0 1
6242: RET
// export function ShowQuery2 ; begin
6243: LD_INT 0
6245: PPUSH
// case query ( QKill2 ) of 1 :
6246: LD_STRING QKill2
6248: PPUSH
6249: CALL_OW 97
6253: PUSH
6254: LD_INT 1
6256: DOUBLE
6257: EQUAL
6258: IFTRUE 6262
6260: GO 6273
6262: POP
// begin result = 1 ;
6263: LD_ADDR_VAR 0 1
6267: PUSH
6268: LD_INT 1
6270: ST_TO_ADDR
// end ; 2 :
6271: GO 6293
6273: LD_INT 2
6275: DOUBLE
6276: EQUAL
6277: IFTRUE 6281
6279: GO 6292
6281: POP
// begin result = 2 ;
6282: LD_ADDR_VAR 0 1
6286: PUSH
6287: LD_INT 2
6289: ST_TO_ADDR
// end ; end ;
6290: GO 6293
6292: POP
// end ;
6293: LD_VAR 0 1
6297: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6298: LD_INT 0
6300: PPUSH
6301: PPUSH
6302: PPUSH
6303: PPUSH
6304: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6305: LD_ADDR_VAR 0 8
6309: PUSH
6310: LD_INT 48
6312: PUSH
6313: LD_INT 49
6315: PUSH
6316: LD_INT 50
6318: PUSH
6319: LD_INT 20
6321: PUSH
6322: LD_INT 1
6324: PUSH
6325: LD_INT 51
6327: PUSH
6328: LD_INT 52
6330: PUSH
6331: LD_INT 69
6333: PUSH
6334: LD_INT 39
6336: PUSH
6337: LD_INT 34
6339: PUSH
6340: LD_INT 40
6342: PUSH
6343: LD_INT 53
6345: PUSH
6346: LD_INT 71
6348: PUSH
6349: LD_INT 57
6351: PUSH
6352: LD_INT 58
6354: PUSH
6355: LD_INT 44
6357: PUSH
6358: LD_INT 32
6360: PUSH
6361: LD_INT 27
6363: PUSH
6364: LD_INT 23
6366: PUSH
6367: LD_INT 33
6369: PUSH
6370: LD_INT 59
6372: PUSH
6373: LD_INT 54
6375: PUSH
6376: LD_INT 55
6378: PUSH
6379: LD_INT 56
6381: PUSH
6382: LD_INT 63
6384: PUSH
6385: LD_INT 64
6387: PUSH
6388: LD_INT 65
6390: PUSH
6391: LD_INT 30
6393: PUSH
6394: LD_INT 31
6396: PUSH
6397: LD_INT 21
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6440: LD_ADDR_VAR 0 5
6444: PUSH
6445: DOUBLE
6446: LD_INT 1
6448: DEC
6449: ST_TO_ADDR
6450: LD_VAR 0 8
6454: PUSH
6455: FOR_TO
6456: IFFALSE 6532
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6458: LD_VAR 0 8
6462: PUSH
6463: LD_VAR 0 5
6467: ARRAY
6468: PPUSH
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 321
6478: PUSH
6479: LD_INT 1
6481: EQUAL
6482: PUSH
6483: LD_VAR 0 8
6487: PUSH
6488: LD_VAR 0 5
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 3
6498: PPUSH
6499: CALL_OW 482
6503: PUSH
6504: LD_INT 1
6506: EQUAL
6507: AND
6508: IFFALSE 6530
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6510: LD_VAR 0 2
6514: PPUSH
6515: LD_VAR 0 8
6519: PUSH
6520: LD_VAR 0 5
6524: ARRAY
6525: PPUSH
6526: CALL_OW 184
6530: GO 6455
6532: POP
6533: POP
// end ;
6534: LD_VAR 0 4
6538: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6539: LD_INT 0
6541: PPUSH
6542: PPUSH
6543: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6544: LD_INT 22
6546: PUSH
6547: LD_VAR 0 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 21
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 69
6574: PUSH
6575: LD_VAR 0 3
6579: LESSEQUAL
6580: IFFALSE 6688
// begin for i = 1 to vehCount do
6582: LD_ADDR_VAR 0 9
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 3
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6686
// begin weapon = weaponTab [ i ] ;
6600: LD_ADDR_VAR 0 10
6604: PUSH
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 9
6614: ARRAY
6615: ST_TO_ADDR
// if weapon = 46 then
6616: LD_VAR 0 10
6620: PUSH
6621: LD_INT 46
6623: EQUAL
6624: IFFALSE 6655
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6626: LD_VAR 0 2
6630: PPUSH
6631: LD_INT 24
6633: PPUSH
6634: LD_VAR 0 5
6638: PPUSH
6639: LD_VAR 0 6
6643: PPUSH
6644: LD_VAR 0 10
6648: PPUSH
6649: CALL_OW 185
// end else
6653: GO 6684
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6655: LD_VAR 0 2
6659: PPUSH
6660: LD_VAR 0 7
6664: PPUSH
6665: LD_VAR 0 5
6669: PPUSH
6670: LD_VAR 0 6
6674: PPUSH
6675: LD_VAR 0 10
6679: PPUSH
6680: CALL_OW 185
// end ; end ;
6684: GO 6597
6686: POP
6687: POP
// end ; end ;
6688: LD_VAR 0 8
6692: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6693: LD_INT 0
6695: PPUSH
6696: PPUSH
6697: PPUSH
6698: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6699: LD_ADDR_VAR 0 8
6703: PUSH
6704: LD_INT 22
6706: PUSH
6707: LD_VAR 0 1
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 21
6718: PUSH
6719: LD_INT 2
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 24
6731: PUSH
6732: LD_INT 650
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: LIST
6747: PPUSH
6748: CALL_OW 69
6752: ST_TO_ADDR
// if damageVehicles > 0 then
6753: LD_VAR 0 8
6757: PUSH
6758: LD_INT 0
6760: GREATER
6761: IFFALSE 6782
// ComMoveXY ( damageVehicles , repX , repY ) ;
6763: LD_VAR 0 8
6767: PPUSH
6768: LD_VAR 0 3
6772: PPUSH
6773: LD_VAR 0 4
6777: PPUSH
6778: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6782: LD_VAR 0 8
6786: PPUSH
6787: LD_INT 95
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 3
6801: PUSH
6802: LD_INT 58
6804: PUSH
6805: EMPTY
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 72
6820: PUSH
6821: LD_INT 0
6823: GREATER
6824: IFFALSE 6891
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6826: LD_ADDR_VAR 0 6
6830: PUSH
6831: LD_VAR 0 8
6835: PPUSH
6836: LD_INT 95
6838: PUSH
6839: LD_VAR 0 2
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 3
6850: PUSH
6851: LD_INT 58
6853: PUSH
6854: EMPTY
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 72
6869: PUSH
6870: FOR_IN
6871: IFFALSE 6889
// ComExitVehicle ( UnitsInside ( i ) ) ;
6873: LD_VAR 0 6
6877: PPUSH
6878: CALL_OW 313
6882: PPUSH
6883: CALL_OW 121
6887: GO 6870
6889: POP
6890: POP
// end ;
6891: LD_VAR 0 5
6895: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6905: LD_ADDR_VAR 0 8
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_VAR 0 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 2
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 24
6934: PUSH
6935: LD_INT 660
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: LD_INT 58
6947: PUSH
6948: EMPTY
6949: LIST
6950: PUSH
6951: LD_INT 2
6953: PUSH
6954: LD_INT 34
6956: PUSH
6957: LD_INT 43
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 34
6966: PUSH
6967: LD_INT 44
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 34
6976: PUSH
6977: LD_INT 46
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7006: LD_INT 22
7008: PUSH
7009: LD_VAR 0 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 21
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 24
7030: PUSH
7031: LD_INT 1000
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: LD_INT 58
7043: PUSH
7044: EMPTY
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 34
7052: PUSH
7053: LD_INT 43
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 34
7062: PUSH
7063: LD_INT 44
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 34
7072: PUSH
7073: LD_INT 46
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: PUSH
7102: LD_INT 5
7104: PUSH
7105: LD_INT 6
7107: PUSH
7108: LD_INT 6
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: LD_OWVAR 67
7120: ARRAY
7121: EQUAL
7122: IFFALSE 7378
// if seeEnemy = 0 then
7124: LD_VAR 0 11
7128: PUSH
7129: LD_INT 0
7131: EQUAL
7132: IFFALSE 7378
// repeat wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7141: LD_ADDR_VAR 0 8
7145: PUSH
7146: LD_INT 22
7148: PUSH
7149: LD_VAR 0 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 2
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 24
7170: PUSH
7171: LD_INT 660
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: LD_INT 58
7183: PUSH
7184: EMPTY
7185: LIST
7186: PUSH
7187: LD_INT 2
7189: PUSH
7190: LD_INT 34
7192: PUSH
7193: LD_INT 43
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 34
7202: PUSH
7203: LD_INT 44
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 34
7212: PUSH
7213: LD_INT 46
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: PPUSH
7237: CALL_OW 69
7241: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7242: LD_INT 22
7244: PUSH
7245: LD_VAR 0 1
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 95
7256: PUSH
7257: LD_VAR 0 2
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: NOT
7275: PUSH
7276: LD_VAR 0 11
7280: PUSH
7281: LD_INT 0
7283: EQUAL
7284: AND
7285: IFFALSE 7340
// for i := 1 to wayX do
7287: LD_ADDR_VAR 0 6
7291: PUSH
7292: DOUBLE
7293: LD_INT 1
7295: DEC
7296: ST_TO_ADDR
7297: LD_VAR 0 3
7301: PUSH
7302: FOR_TO
7303: IFFALSE 7338
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7305: LD_VAR 0 8
7309: PPUSH
7310: LD_VAR 0 3
7314: PUSH
7315: LD_VAR 0 6
7319: ARRAY
7320: PPUSH
7321: LD_VAR 0 4
7325: PUSH
7326: LD_VAR 0 6
7330: ARRAY
7331: PPUSH
7332: CALL_OW 114
7336: GO 7302
7338: POP
7339: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7340: LD_INT 22
7342: PUSH
7343: LD_VAR 0 1
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 95
7354: PUSH
7355: LD_VAR 0 2
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PPUSH
7368: CALL_OW 69
7372: PUSH
7373: LD_INT 0
7375: GREATER
7376: IFFALSE 7134
// seeEnemy = 1 ;
7378: LD_ADDR_VAR 0 11
7382: PUSH
7383: LD_INT 1
7385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7386: LD_INT 35
7388: PPUSH
7389: CALL_OW 67
// for j in vehiclesOK do
7393: LD_ADDR_VAR 0 7
7397: PUSH
7398: LD_VAR 0 8
7402: PUSH
7403: FOR_IN
7404: IFFALSE 7617
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7406: LD_ADDR_VAR 0 9
7410: PUSH
7411: LD_INT 81
7413: PUSH
7414: LD_VAR 0 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: LD_INT 101
7425: PUSH
7426: LD_INT 1
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 69
7441: PUSH
7442: LD_EXP 45
7446: DIFF
7447: PPUSH
7448: LD_VAR 0 7
7452: PPUSH
7453: CALL_OW 74
7457: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7458: LD_ADDR_VAR 0 10
7462: PUSH
7463: LD_INT 81
7465: PUSH
7466: LD_VAR 0 1
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 101
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 59
7490: PUSH
7491: EMPTY
7492: LIST
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 21
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: PPUSH
7528: CALL_OW 69
7532: PUSH
7533: LD_EXP 45
7537: DIFF
7538: PPUSH
7539: LD_VAR 0 7
7543: PPUSH
7544: CALL_OW 74
7548: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7549: LD_VAR 0 7
7553: PPUSH
7554: LD_VAR 0 9
7558: PPUSH
7559: CALL_OW 296
7563: PUSH
7564: LD_INT 8
7566: PLUS
7567: PUSH
7568: LD_VAR 0 7
7572: PPUSH
7573: LD_VAR 0 10
7577: PPUSH
7578: CALL_OW 296
7582: LESS
7583: IFFALSE 7601
// ComAttackUnit ( j , target1 ) else
7585: LD_VAR 0 7
7589: PPUSH
7590: LD_VAR 0 9
7594: PPUSH
7595: CALL_OW 115
7599: GO 7615
// ComAttackUnit ( j , target2 ) ;
7601: LD_VAR 0 7
7605: PPUSH
7606: LD_VAR 0 10
7610: PPUSH
7611: CALL_OW 115
// end ;
7615: GO 7403
7617: POP
7618: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7619: LD_INT 22
7621: PUSH
7622: LD_VAR 0 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 24
7643: PUSH
7644: LD_INT 1000
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 3
7653: PUSH
7654: LD_INT 58
7656: PUSH
7657: EMPTY
7658: LIST
7659: PUSH
7660: LD_INT 2
7662: PUSH
7663: LD_INT 34
7665: PUSH
7666: LD_INT 43
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 34
7675: PUSH
7676: LD_INT 44
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 34
7685: PUSH
7686: LD_INT 46
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PUSH
7715: LD_INT 0
7717: EQUAL
7718: IFFALSE 7386
// seeEnemy = 0 ;
7720: LD_ADDR_VAR 0 11
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// end ;
7728: LD_VAR 0 5
7732: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7741: LD_ADDR_VAR 0 8
7745: PUSH
7746: LD_VAR 0 2
7750: PPUSH
7751: CALL_OW 313
7755: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7756: LD_ADDR_VAR 0 9
7760: PUSH
7761: LD_VAR 0 3
7765: PPUSH
7766: LD_INT 22
7768: PUSH
7769: LD_VAR 0 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 25
7780: PUSH
7781: LD_INT 2
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 24
7790: PUSH
7791: LD_INT 750
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: LD_INT 54
7803: PUSH
7804: EMPTY
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7822: LD_ADDR_VAR 0 6
7826: PUSH
7827: LD_VAR 0 3
7831: PPUSH
7832: LD_INT 22
7834: PUSH
7835: LD_VAR 0 1
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 21
7846: PUSH
7847: LD_INT 3
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 3
7856: PUSH
7857: LD_INT 24
7859: PUSH
7860: LD_INT 1000
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: PPUSH
7879: CALL_OW 70
7883: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7884: LD_VAR 0 6
7888: NOT
7889: PUSH
7890: LD_INT 22
7892: PUSH
7893: LD_VAR 0 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 24
7914: PUSH
7915: LD_INT 250
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 69
7931: NOT
7932: AND
7933: IFFALSE 7937
// exit ;
7935: GO 8119
// if buildings_list > 0 and engineerOkInside then
7937: LD_VAR 0 6
7941: PUSH
7942: LD_INT 0
7944: GREATER
7945: PUSH
7946: LD_VAR 0 8
7950: AND
7951: IFFALSE 7962
// ComExitBuilding ( engineerOkInside ) ;
7953: LD_VAR 0 8
7957: PPUSH
7958: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7962: LD_VAR 0 6
7966: PUSH
7967: LD_INT 0
7969: GREATER
7970: PUSH
7971: LD_VAR 0 9
7975: PUSH
7976: LD_INT 0
7978: GREATER
7979: AND
7980: IFFALSE 8000
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7982: LD_VAR 0 9
7986: PPUSH
7987: LD_VAR 0 6
7991: PUSH
7992: LD_INT 1
7994: ARRAY
7995: PPUSH
7996: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8000: LD_VAR 0 6
8004: PUSH
8005: LD_INT 0
8007: EQUAL
8008: PUSH
8009: LD_VAR 0 4
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: AND
8018: PUSH
8019: LD_VAR 0 9
8023: PUSH
8024: LD_INT 0
8026: GREATER
8027: AND
8028: IFFALSE 8044
// ComEnterUnit ( engineerOkOutside , building ) ;
8030: LD_VAR 0 9
8034: PPUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8044: LD_VAR 0 9
8048: PUSH
8049: LD_INT 0
8051: GREATER
8052: PUSH
8053: LD_VAR 0 6
8057: PUSH
8058: LD_INT 0
8060: EQUAL
8061: AND
8062: PUSH
8063: LD_VAR 0 4
8067: PUSH
8068: LD_INT 0
8070: GREATER
8071: AND
8072: IFFALSE 8119
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8074: LD_VAR 0 9
8078: PPUSH
8079: LD_VAR 0 4
8083: PUSH
8084: LD_INT 1
8086: ARRAY
8087: PPUSH
8088: LD_VAR 0 4
8092: PUSH
8093: LD_INT 2
8095: ARRAY
8096: PPUSH
8097: LD_VAR 0 4
8101: PUSH
8102: LD_INT 3
8104: ARRAY
8105: PPUSH
8106: LD_VAR 0 4
8110: PUSH
8111: LD_INT 4
8113: ARRAY
8114: PPUSH
8115: CALL_OW 145
// end ;
8119: LD_VAR 0 5
8123: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8124: LD_INT 0
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8135: LD_ADDR_VAR 0 6
8139: PUSH
8140: LD_INT 22
8142: PUSH
8143: LD_VAR 0 1
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PUSH
8162: LD_INT 23
8164: PUSH
8165: LD_INT 2
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 24
8174: PUSH
8175: LD_INT 251
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: PPUSH
8188: CALL_OW 69
8192: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8193: LD_ADDR_VAR 0 7
8197: PUSH
8198: LD_VAR 0 3
8202: PPUSH
8203: LD_INT 22
8205: PUSH
8206: LD_VAR 0 1
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 23
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 4
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 50
8237: PUSH
8238: EMPTY
8239: LIST
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 70
8251: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8252: LD_ADDR_VAR 0 10
8256: PUSH
8257: LD_VAR 0 3
8261: PPUSH
8262: LD_INT 22
8264: PUSH
8265: LD_VAR 0 1
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 1
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 3
8286: PUSH
8287: LD_INT 25
8289: PUSH
8290: LD_INT 3
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 24
8306: PUSH
8307: LD_INT 750
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 70
8328: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8329: LD_ADDR_VAR 0 11
8333: PUSH
8334: LD_VAR 0 2
8338: PPUSH
8339: LD_INT 22
8341: PUSH
8342: LD_VAR 0 1
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: LD_INT 21
8353: PUSH
8354: LD_INT 1
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PUSH
8361: LD_INT 3
8363: PUSH
8364: LD_INT 25
8366: PUSH
8367: LD_INT 3
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 24
8383: PUSH
8384: LD_INT 1000
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 70
8405: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8406: LD_VAR 0 10
8410: NOT
8411: PUSH
8412: LD_VAR 0 11
8416: NOT
8417: AND
8418: PUSH
8419: LD_VAR 0 6
8423: NOT
8424: AND
8425: IFFALSE 8429
// exit ;
8427: GO 8663
// if damageUnits > 0 and sci_list > 0 then
8429: LD_VAR 0 10
8433: PUSH
8434: LD_INT 0
8436: GREATER
8437: PUSH
8438: LD_VAR 0 6
8442: PUSH
8443: LD_INT 0
8445: GREATER
8446: AND
8447: IFFALSE 8463
// ComMoveToArea ( damageUnits , healArea ) ;
8449: LD_VAR 0 10
8453: PPUSH
8454: LD_VAR 0 2
8458: PPUSH
8459: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8463: LD_VAR 0 11
8467: PUSH
8468: LD_INT 0
8470: GREATER
8471: PUSH
8472: LD_VAR 0 6
8476: PUSH
8477: LD_INT 0
8479: GREATER
8480: AND
8481: IFFALSE 8492
// ComExitBuilding ( sci_list ) ;
8483: LD_VAR 0 6
8487: PPUSH
8488: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8492: LD_VAR 0 11
8496: PUSH
8497: LD_INT 0
8499: GREATER
8500: PUSH
8501: LD_VAR 0 7
8505: PUSH
8506: LD_INT 0
8508: GREATER
8509: AND
8510: IFFALSE 8530
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8512: LD_VAR 0 7
8516: PPUSH
8517: LD_VAR 0 11
8521: PUSH
8522: LD_INT 1
8524: ARRAY
8525: PPUSH
8526: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8530: LD_VAR 0 10
8534: PUSH
8535: LD_INT 0
8537: EQUAL
8538: PUSH
8539: LD_VAR 0 11
8543: PUSH
8544: LD_INT 0
8546: EQUAL
8547: AND
8548: PUSH
8549: LD_VAR 0 7
8553: PUSH
8554: LD_INT 0
8556: GREATER
8557: AND
8558: IFFALSE 8663
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8560: LD_ADDR_VAR 0 12
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_VAR 0 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 21
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 30
8589: PUSH
8590: LD_INT 8
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 69
8606: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8607: LD_ADDR_VAR 0 13
8611: PUSH
8612: LD_INT 1
8614: PPUSH
8615: LD_VAR 0 12
8619: PPUSH
8620: CALL_OW 12
8624: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8625: LD_VAR 0 7
8629: PPUSH
8630: LD_INT 3
8632: PUSH
8633: LD_INT 60
8635: PUSH
8636: EMPTY
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 72
8647: PPUSH
8648: LD_VAR 0 12
8652: PUSH
8653: LD_VAR 0 13
8657: ARRAY
8658: PPUSH
8659: CALL_OW 120
// end ; end ;
8663: LD_VAR 0 5
8667: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8668: LD_INT 0
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
// tmpTab = [ ] ;
8674: LD_ADDR_VAR 0 6
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8681: LD_INT 22
8683: PUSH
8684: LD_VAR 0 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 30
8695: PUSH
8696: LD_INT 32
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: PUSH
8712: LD_INT 0
8714: GREATER
8715: IFFALSE 8798
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8717: LD_ADDR_VAR 0 4
8721: PUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PPUSH
8748: CALL_OW 69
8752: PUSH
8753: FOR_IN
8754: IFFALSE 8796
// begin for j in UnitsInside ( i ) do
8756: LD_ADDR_VAR 0 5
8760: PUSH
8761: LD_VAR 0 4
8765: PPUSH
8766: CALL_OW 313
8770: PUSH
8771: FOR_IN
8772: IFFALSE 8792
// tmpTab = tmpTab ^ j ;
8774: LD_ADDR_VAR 0 6
8778: PUSH
8779: LD_VAR 0 6
8783: PUSH
8784: LD_VAR 0 5
8788: ADD
8789: ST_TO_ADDR
8790: GO 8771
8792: POP
8793: POP
// end ;
8794: GO 8753
8796: POP
8797: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8798: LD_VAR 0 6
8802: PPUSH
8803: LD_VAR 0 2
8807: PPUSH
8808: CALL_OW 250
8812: PPUSH
8813: LD_VAR 0 2
8817: PPUSH
8818: CALL_OW 251
8822: PPUSH
8823: CALL_OW 114
// end ;
8827: LD_VAR 0 3
8831: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8832: LD_INT 0
8834: PPUSH
8835: PPUSH
8836: PPUSH
8837: PPUSH
// enable ;
8838: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8839: LD_ADDR_VAR 0 7
8843: PUSH
8844: LD_VAR 0 3
8848: PPUSH
8849: CALL_OW 435
8853: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8854: LD_ADDR_VAR 0 6
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_VAR 0 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 34
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 69
8891: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8892: LD_VAR 0 6
8896: PUSH
8897: LD_INT 0
8899: GREATER
8900: PUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 435
8910: AND
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_INT 0
8919: GREATER
8920: AND
8921: IFFALSE 8970
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8923: LD_VAR 0 6
8927: PUSH
8928: LD_INT 1
8930: ARRAY
8931: PPUSH
8932: LD_VAR 0 7
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: PPUSH
8941: LD_VAR 0 7
8945: PUSH
8946: LD_INT 2
8948: ARRAY
8949: PPUSH
8950: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8954: LD_VAR 0 6
8958: PUSH
8959: LD_INT 1
8961: ARRAY
8962: PPUSH
8963: LD_INT 100
8965: PPUSH
8966: CALL_OW 240
// end ; end ;
8970: LD_VAR 0 4
8974: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8975: LD_INT 0
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8985: LD_ADDR_VAR 0 6
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 56
9009: PUSH
9010: EMPTY
9011: LIST
9012: PUSH
9013: LD_INT 24
9015: PUSH
9016: LD_INT 700
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 3
9025: PUSH
9026: LD_INT 60
9028: PUSH
9029: EMPTY
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: LD_INT 25
9041: PUSH
9042: LD_INT 1
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 25
9051: PUSH
9052: LD_INT 5
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 25
9061: PUSH
9062: LD_INT 8
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 9
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 70
9097: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9098: LD_ADDR_VAR 0 7
9102: PUSH
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_INT 22
9110: PUSH
9111: LD_VAR 0 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 58
9132: PUSH
9133: EMPTY
9134: LIST
9135: PUSH
9136: LD_INT 24
9138: PUSH
9139: LD_INT 251
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: PPUSH
9152: CALL_OW 70
9156: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9157: LD_ADDR_VAR 0 9
9161: PUSH
9162: LD_VAR 0 2
9166: PPUSH
9167: LD_INT 22
9169: PUSH
9170: LD_VAR 0 1
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 2
9181: PUSH
9182: LD_INT 30
9184: PUSH
9185: LD_INT 4
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 30
9194: PUSH
9195: LD_INT 5
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 24
9209: PUSH
9210: LD_INT 251
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 70
9226: ST_TO_ADDR
// if barrackList > 0 then
9227: LD_VAR 0 9
9231: PUSH
9232: LD_INT 0
9234: GREATER
9235: IFFALSE 9383
// begin if turretList = 0 then
9237: LD_VAR 0 7
9241: PUSH
9242: LD_INT 0
9244: EQUAL
9245: IFFALSE 9287
// begin if soldiers_list > 0 then
9247: LD_VAR 0 6
9251: PUSH
9252: LD_INT 0
9254: GREATER
9255: IFFALSE 9285
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9257: LD_VAR 0 6
9261: PPUSH
9262: LD_VAR 0 9
9266: PUSH
9267: LD_INT 1
9269: PPUSH
9270: LD_VAR 0 9
9274: PPUSH
9275: CALL_OW 12
9279: ARRAY
9280: PPUSH
9281: CALL_OW 120
// end else
9285: GO 9383
// begin for i in barrackList do
9287: LD_ADDR_VAR 0 4
9291: PUSH
9292: LD_VAR 0 9
9296: PUSH
9297: FOR_IN
9298: IFFALSE 9381
// begin insideUnits = UnitsInside ( i ) ;
9300: LD_ADDR_VAR 0 10
9304: PUSH
9305: LD_VAR 0 4
9309: PPUSH
9310: CALL_OW 313
9314: ST_TO_ADDR
// if insideUnits > 0 then
9315: LD_VAR 0 10
9319: PUSH
9320: LD_INT 0
9322: GREATER
9323: IFFALSE 9347
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9325: LD_VAR 0 10
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_VAR 0 7
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: CALL_OW 120
// if soldiers_list > 0 then
9347: LD_VAR 0 6
9351: PUSH
9352: LD_INT 0
9354: GREATER
9355: IFFALSE 9379
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9357: LD_VAR 0 6
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: PPUSH
9366: LD_VAR 0 7
9370: PUSH
9371: LD_INT 1
9373: ARRAY
9374: PPUSH
9375: CALL_OW 120
// end ;
9379: GO 9297
9381: POP
9382: POP
// end ; end ; end ;
9383: LD_VAR 0 3
9387: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9388: LD_INT 0
9390: PPUSH
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9395: LD_ADDR_VAR 0 6
9399: PUSH
9400: LD_INT 22
9402: PUSH
9403: LD_VAR 0 1
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 2
9414: PUSH
9415: LD_INT 30
9417: PUSH
9418: LD_INT 31
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 30
9427: PUSH
9428: LD_INT 32
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 30
9437: PUSH
9438: LD_INT 33
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 30
9447: PUSH
9448: LD_INT 4
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 30
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 69
9481: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9482: LD_ADDR_VAR 0 7
9486: PUSH
9487: LD_INT 22
9489: PUSH
9490: LD_VAR 0 2
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 21
9501: PUSH
9502: LD_INT 3
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 58
9511: PUSH
9512: EMPTY
9513: LIST
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: PPUSH
9520: CALL_OW 69
9524: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9525: LD_VAR 0 6
9529: PUSH
9530: LD_INT 0
9532: GREATER
9533: PUSH
9534: LD_VAR 0 7
9538: PUSH
9539: LD_INT 0
9541: GREATER
9542: AND
9543: IFFALSE 9613
// begin for i in turretsList do
9545: LD_ADDR_VAR 0 4
9549: PUSH
9550: LD_VAR 0 6
9554: PUSH
9555: FOR_IN
9556: IFFALSE 9611
// begin for j in enemyBuildings do
9558: LD_ADDR_VAR 0 5
9562: PUSH
9563: LD_VAR 0 7
9567: PUSH
9568: FOR_IN
9569: IFFALSE 9607
// begin if GetDistUnits ( i , j ) < 20 then
9571: LD_VAR 0 4
9575: PPUSH
9576: LD_VAR 0 5
9580: PPUSH
9581: CALL_OW 296
9585: PUSH
9586: LD_INT 20
9588: LESS
9589: IFFALSE 9605
// begin ComAttackUnit ( i , j ) ;
9591: LD_VAR 0 4
9595: PPUSH
9596: LD_VAR 0 5
9600: PPUSH
9601: CALL_OW 115
// end ; end ;
9605: GO 9568
9607: POP
9608: POP
// end ;
9609: GO 9555
9611: POP
9612: POP
// end ; end ;
9613: LD_VAR 0 3
9617: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
9622: PPUSH
9623: PPUSH
9624: PPUSH
9625: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9626: LD_ADDR_VAR 0 8
9630: PUSH
9631: LD_INT 22
9633: PUSH
9634: LD_VAR 0 1
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 21
9645: PUSH
9646: LD_INT 2
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 34
9655: PUSH
9656: LD_INT 52
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9673: LD_ADDR_VAR 0 9
9677: PUSH
9678: LD_INT 22
9680: PUSH
9681: LD_VAR 0 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: LD_INT 24
9705: PUSH
9706: LD_INT 1000
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: PPUSH
9725: CALL_OW 69
9729: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9730: LD_VAR 0 9
9734: PUSH
9735: LD_INT 0
9737: GREATER
9738: PUSH
9739: LD_VAR 0 8
9743: PPUSH
9744: LD_INT 24
9746: PUSH
9747: LD_INT 750
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 72
9758: PUSH
9759: LD_INT 0
9761: GREATER
9762: AND
9763: IFFALSE 9798
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9765: LD_VAR 0 8
9769: PPUSH
9770: LD_INT 24
9772: PUSH
9773: LD_INT 750
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PPUSH
9780: CALL_OW 72
9784: PPUSH
9785: LD_VAR 0 9
9789: PUSH
9790: LD_INT 1
9792: ARRAY
9793: PPUSH
9794: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9798: LD_VAR 0 8
9802: PPUSH
9803: LD_INT 3
9805: PUSH
9806: LD_INT 24
9808: PUSH
9809: LD_INT 750
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PPUSH
9820: CALL_OW 72
9824: PUSH
9825: LD_INT 0
9827: GREATER
9828: IFFALSE 9866
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9830: LD_VAR 0 8
9834: PPUSH
9835: LD_INT 3
9837: PUSH
9838: LD_INT 24
9840: PUSH
9841: LD_INT 750
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PPUSH
9852: CALL_OW 72
9856: PPUSH
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9866: LD_VAR 0 8
9870: PUSH
9871: LD_INT 0
9873: GREATER
9874: PUSH
9875: LD_VAR 0 9
9879: PUSH
9880: LD_INT 0
9882: EQUAL
9883: AND
9884: PUSH
9885: LD_VAR 0 3
9889: PUSH
9890: LD_INT 0
9892: GREATER
9893: AND
9894: IFFALSE 9941
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9896: LD_VAR 0 8
9900: PPUSH
9901: LD_VAR 0 3
9905: PUSH
9906: LD_INT 1
9908: ARRAY
9909: PPUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_INT 2
9917: ARRAY
9918: PPUSH
9919: LD_VAR 0 3
9923: PUSH
9924: LD_INT 3
9926: ARRAY
9927: PPUSH
9928: LD_VAR 0 3
9932: PUSH
9933: LD_INT 4
9935: ARRAY
9936: PPUSH
9937: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9941: LD_VAR 0 2
9945: PPUSH
9946: LD_INT 22
9948: PUSH
9949: LD_VAR 0 1
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 34
9970: PUSH
9971: LD_INT 52
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 24
9983: PUSH
9984: LD_INT 750
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 70
10005: PUSH
10006: LD_INT 0
10008: GREATER
10009: IFFALSE 10211
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10011: LD_ADDR_VAR 0 5
10015: PUSH
10016: LD_VAR 0 2
10020: PPUSH
10021: LD_INT 22
10023: PUSH
10024: LD_VAR 0 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 21
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PUSH
10043: LD_INT 34
10045: PUSH
10046: LD_INT 52
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 24
10058: PUSH
10059: LD_INT 750
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 70
10080: PUSH
10081: FOR_IN
10082: IFFALSE 10209
// begin mechTmp = UnitsInside ( i ) ;
10084: LD_ADDR_VAR 0 6
10088: PUSH
10089: LD_VAR 0 5
10093: PPUSH
10094: CALL_OW 313
10098: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10099: LD_VAR 0 6
10103: PPUSH
10104: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10108: LD_VAR 0 6
10112: PPUSH
10113: LD_VAR 0 7
10117: PPUSH
10118: CALL_OW 189
// wait ( 0 0$2 ) ;
10122: LD_INT 70
10124: PPUSH
10125: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10129: LD_VAR 0 6
10133: PPUSH
10134: LD_VAR 0 2
10138: PPUSH
10139: LD_INT 22
10141: PUSH
10142: LD_VAR 0 1
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 34
10163: PUSH
10164: LD_INT 52
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 1000
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 58
10183: PUSH
10184: EMPTY
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 70
10198: PUSH
10199: LD_INT 1
10201: ARRAY
10202: PPUSH
10203: CALL_OW 180
// end ;
10207: GO 10081
10209: POP
10210: POP
// end ; end ;
10211: LD_VAR 0 4
10215: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10216: LD_INT 0
10218: PPUSH
10219: PPUSH
10220: PPUSH
10221: PPUSH
10222: PPUSH
10223: PPUSH
10224: PPUSH
10225: PPUSH
10226: PPUSH
10227: PPUSH
10228: PPUSH
// for i = 1 to medicCount do
10229: LD_ADDR_VAR 0 14
10233: PUSH
10234: DOUBLE
10235: LD_INT 1
10237: DEC
10238: ST_TO_ADDR
10239: LD_VAR 0 7
10243: PUSH
10244: FOR_TO
10245: IFFALSE 10327
// begin uc_side = side ;
10247: LD_ADDR_OWVAR 20
10251: PUSH
10252: LD_VAR 0 1
10256: ST_TO_ADDR
// uc_nation = nation ;
10257: LD_ADDR_OWVAR 21
10261: PUSH
10262: LD_VAR 0 2
10266: ST_TO_ADDR
// hc_name =  ;
10267: LD_ADDR_OWVAR 26
10271: PUSH
10272: LD_STRING 
10274: ST_TO_ADDR
// hc_gallery =  ;
10275: LD_ADDR_OWVAR 33
10279: PUSH
10280: LD_STRING 
10282: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10283: LD_INT 0
10285: PPUSH
10286: LD_INT 4
10288: PPUSH
10289: LD_VAR 0 8
10293: PPUSH
10294: CALL_OW 380
// un = CreateHuman ;
10298: LD_ADDR_VAR 0 16
10302: PUSH
10303: CALL_OW 44
10307: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10308: LD_VAR 0 16
10312: PPUSH
10313: LD_VAR 0 9
10317: PPUSH
10318: LD_INT 0
10320: PPUSH
10321: CALL_OW 49
// end ;
10325: GO 10244
10327: POP
10328: POP
// for i = 1 to soldierCount do
10329: LD_ADDR_VAR 0 14
10333: PUSH
10334: DOUBLE
10335: LD_INT 1
10337: DEC
10338: ST_TO_ADDR
10339: LD_VAR 0 3
10343: PUSH
10344: FOR_TO
10345: IFFALSE 10427
// begin uc_side = side ;
10347: LD_ADDR_OWVAR 20
10351: PUSH
10352: LD_VAR 0 1
10356: ST_TO_ADDR
// uc_nation = nation ;
10357: LD_ADDR_OWVAR 21
10361: PUSH
10362: LD_VAR 0 2
10366: ST_TO_ADDR
// hc_name =  ;
10367: LD_ADDR_OWVAR 26
10371: PUSH
10372: LD_STRING 
10374: ST_TO_ADDR
// hc_gallery =  ;
10375: LD_ADDR_OWVAR 33
10379: PUSH
10380: LD_STRING 
10382: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10383: LD_INT 0
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: CALL_OW 380
// un = CreateHuman ;
10398: LD_ADDR_VAR 0 16
10402: PUSH
10403: CALL_OW 44
10407: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10408: LD_VAR 0 16
10412: PPUSH
10413: LD_VAR 0 9
10417: PPUSH
10418: LD_INT 0
10420: PPUSH
10421: CALL_OW 49
// end ;
10425: GO 10344
10427: POP
10428: POP
// for i = 1 to sniperCount do
10429: LD_ADDR_VAR 0 14
10433: PUSH
10434: DOUBLE
10435: LD_INT 1
10437: DEC
10438: ST_TO_ADDR
10439: LD_VAR 0 4
10443: PUSH
10444: FOR_TO
10445: IFFALSE 10527
// begin uc_side = side ;
10447: LD_ADDR_OWVAR 20
10451: PUSH
10452: LD_VAR 0 1
10456: ST_TO_ADDR
// uc_nation = nation ;
10457: LD_ADDR_OWVAR 21
10461: PUSH
10462: LD_VAR 0 2
10466: ST_TO_ADDR
// hc_name =  ;
10467: LD_ADDR_OWVAR 26
10471: PUSH
10472: LD_STRING 
10474: ST_TO_ADDR
// hc_gallery =  ;
10475: LD_ADDR_OWVAR 33
10479: PUSH
10480: LD_STRING 
10482: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10483: LD_INT 0
10485: PPUSH
10486: LD_INT 5
10488: PPUSH
10489: LD_VAR 0 8
10493: PPUSH
10494: CALL_OW 380
// un = CreateHuman ;
10498: LD_ADDR_VAR 0 16
10502: PUSH
10503: CALL_OW 44
10507: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10508: LD_VAR 0 16
10512: PPUSH
10513: LD_VAR 0 9
10517: PPUSH
10518: LD_INT 0
10520: PPUSH
10521: CALL_OW 49
// end ;
10525: GO 10444
10527: POP
10528: POP
// for i = 1 to bazookCount do
10529: LD_ADDR_VAR 0 14
10533: PUSH
10534: DOUBLE
10535: LD_INT 1
10537: DEC
10538: ST_TO_ADDR
10539: LD_VAR 0 5
10543: PUSH
10544: FOR_TO
10545: IFFALSE 10627
// begin uc_side = side ;
10547: LD_ADDR_OWVAR 20
10551: PUSH
10552: LD_VAR 0 1
10556: ST_TO_ADDR
// uc_nation = nation ;
10557: LD_ADDR_OWVAR 21
10561: PUSH
10562: LD_VAR 0 2
10566: ST_TO_ADDR
// hc_name =  ;
10567: LD_ADDR_OWVAR 26
10571: PUSH
10572: LD_STRING 
10574: ST_TO_ADDR
// hc_gallery =  ;
10575: LD_ADDR_OWVAR 33
10579: PUSH
10580: LD_STRING 
10582: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10583: LD_INT 0
10585: PPUSH
10586: LD_INT 9
10588: PPUSH
10589: LD_VAR 0 8
10593: PPUSH
10594: CALL_OW 380
// un = CreateHuman ;
10598: LD_ADDR_VAR 0 16
10602: PUSH
10603: CALL_OW 44
10607: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10608: LD_VAR 0 16
10612: PPUSH
10613: LD_VAR 0 9
10617: PPUSH
10618: LD_INT 0
10620: PPUSH
10621: CALL_OW 49
// end ;
10625: GO 10544
10627: POP
10628: POP
// for i = 1 to mortalCount do
10629: LD_ADDR_VAR 0 14
10633: PUSH
10634: DOUBLE
10635: LD_INT 1
10637: DEC
10638: ST_TO_ADDR
10639: LD_VAR 0 6
10643: PUSH
10644: FOR_TO
10645: IFFALSE 10727
// begin uc_side = side ;
10647: LD_ADDR_OWVAR 20
10651: PUSH
10652: LD_VAR 0 1
10656: ST_TO_ADDR
// uc_nation = nation ;
10657: LD_ADDR_OWVAR 21
10661: PUSH
10662: LD_VAR 0 2
10666: ST_TO_ADDR
// hc_name =  ;
10667: LD_ADDR_OWVAR 26
10671: PUSH
10672: LD_STRING 
10674: ST_TO_ADDR
// hc_gallery =  ;
10675: LD_ADDR_OWVAR 33
10679: PUSH
10680: LD_STRING 
10682: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10683: LD_INT 0
10685: PPUSH
10686: LD_INT 8
10688: PPUSH
10689: LD_VAR 0 8
10693: PPUSH
10694: CALL_OW 380
// un = CreateHuman ;
10698: LD_ADDR_VAR 0 16
10702: PUSH
10703: CALL_OW 44
10707: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10708: LD_VAR 0 16
10712: PPUSH
10713: LD_VAR 0 9
10717: PPUSH
10718: LD_INT 0
10720: PPUSH
10721: CALL_OW 49
// end ;
10725: GO 10644
10727: POP
10728: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10729: LD_ADDR_VAR 0 19
10733: PUSH
10734: LD_INT 22
10736: PUSH
10737: LD_VAR 0 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 2
10748: PUSH
10749: LD_INT 25
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 5
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 8
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 9
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10805: LD_ADDR_VAR 0 18
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_VAR 0 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 4
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PPUSH
10836: CALL_OW 69
10840: ST_TO_ADDR
// for i in medic_list do
10841: LD_ADDR_VAR 0 14
10845: PUSH
10846: LD_VAR 0 18
10850: PUSH
10851: FOR_IN
10852: IFFALSE 10870
// ComMoveToArea ( i , healArea ) ;
10854: LD_VAR 0 14
10858: PPUSH
10859: LD_VAR 0 10
10863: PPUSH
10864: CALL_OW 113
10868: GO 10851
10870: POP
10871: POP
// if strategy = 1 then
10872: LD_VAR 0 12
10876: PUSH
10877: LD_INT 1
10879: EQUAL
10880: IFFALSE 11597
// begin repeat wait ( 0 0$3 ) ;
10882: LD_INT 105
10884: PPUSH
10885: CALL_OW 67
// for i in soldiersOK_list do
10889: LD_ADDR_VAR 0 14
10893: PUSH
10894: LD_VAR 0 19
10898: PUSH
10899: FOR_IN
10900: IFFALSE 10934
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10902: LD_VAR 0 14
10906: PPUSH
10907: LD_INT 80
10909: PPUSH
10910: LD_INT 109
10912: PPUSH
10913: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10917: LD_VAR 0 14
10921: PPUSH
10922: LD_INT 39
10924: PPUSH
10925: LD_INT 49
10927: PPUSH
10928: CALL_OW 174
// end ;
10932: GO 10899
10934: POP
10935: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10936: LD_INT 13
10938: PPUSH
10939: LD_INT 22
10941: PUSH
10942: LD_VAR 0 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 70
10955: PUSH
10956: LD_INT 0
10958: GREATER
10959: IFFALSE 10882
// repeat wait ( 0 0$1 ) ;
10961: LD_INT 35
10963: PPUSH
10964: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10968: LD_ADDR_VAR 0 17
10972: PUSH
10973: LD_INT 22
10975: PUSH
10976: LD_VAR 0 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 1
10987: PUSH
10988: LD_INT 3
10990: PUSH
10991: LD_INT 24
10993: PUSH
10994: LD_INT 550
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 24
11007: PUSH
11008: LD_INT 250
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 69
11028: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11029: LD_ADDR_VAR 0 19
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 1
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: LD_INT 25
11051: PUSH
11052: LD_INT 1
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 25
11061: PUSH
11062: LD_INT 5
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 25
11071: PUSH
11072: LD_INT 8
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 9
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 24
11098: PUSH
11099: LD_INT 1000
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: PPUSH
11111: CALL_OW 69
11115: ST_TO_ADDR
// if medicCount > 0 then
11116: LD_VAR 0 7
11120: PUSH
11121: LD_INT 0
11123: GREATER
11124: IFFALSE 11198
// begin if damageUnit_list > 0 then
11126: LD_VAR 0 17
11130: PUSH
11131: LD_INT 0
11133: GREATER
11134: IFFALSE 11198
// begin for i in damageUnit_list do
11136: LD_ADDR_VAR 0 14
11140: PUSH
11141: LD_VAR 0 17
11145: PUSH
11146: FOR_IN
11147: IFFALSE 11196
// begin ComMoveToArea ( i , healArea ) ;
11149: LD_VAR 0 14
11153: PPUSH
11154: LD_VAR 0 10
11158: PPUSH
11159: CALL_OW 113
// for j in medic_list do
11163: LD_ADDR_VAR 0 15
11167: PUSH
11168: LD_VAR 0 18
11172: PUSH
11173: FOR_IN
11174: IFFALSE 11192
// AddComHeal ( j , i ) ;
11176: LD_VAR 0 15
11180: PPUSH
11181: LD_VAR 0 14
11185: PPUSH
11186: CALL_OW 188
11190: GO 11173
11192: POP
11193: POP
// end ;
11194: GO 11146
11196: POP
11197: POP
// end ; end ; for i in soldiersOK_list do
11198: LD_ADDR_VAR 0 14
11202: PUSH
11203: LD_VAR 0 19
11207: PUSH
11208: FOR_IN
11209: IFFALSE 11391
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11211: LD_ADDR_VAR 0 22
11215: PUSH
11216: LD_INT 22
11218: PUSH
11219: LD_VAR 0 11
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: PUSH
11233: LD_EXP 45
11237: DIFF
11238: PPUSH
11239: LD_VAR 0 14
11243: PPUSH
11244: CALL_OW 74
11248: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11249: LD_ADDR_VAR 0 23
11253: PUSH
11254: LD_INT 22
11256: PUSH
11257: LD_VAR 0 11
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 2
11268: PUSH
11269: LD_INT 59
11271: PUSH
11272: EMPTY
11273: LIST
11274: PUSH
11275: LD_INT 21
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 21
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: EMPTY
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: PPUSH
11313: LD_VAR 0 14
11317: PPUSH
11318: CALL_OW 74
11322: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11323: LD_VAR 0 14
11327: PPUSH
11328: LD_VAR 0 22
11332: PPUSH
11333: CALL_OW 296
11337: PUSH
11338: LD_INT 8
11340: PLUS
11341: PUSH
11342: LD_VAR 0 14
11346: PPUSH
11347: LD_VAR 0 23
11351: PPUSH
11352: CALL_OW 296
11356: LESS
11357: IFFALSE 11375
// begin ComAttackUnit ( i , target1 ) ;
11359: LD_VAR 0 14
11363: PPUSH
11364: LD_VAR 0 22
11368: PPUSH
11369: CALL_OW 115
// end else
11373: GO 11389
// begin ComAttackUnit ( i , target2 ) ;
11375: LD_VAR 0 14
11379: PPUSH
11380: LD_VAR 0 23
11384: PPUSH
11385: CALL_OW 115
// end ; end ;
11389: GO 11208
11391: POP
11392: POP
// for i in soldiersOK_list do
11393: LD_ADDR_VAR 0 14
11397: PUSH
11398: LD_VAR 0 19
11402: PUSH
11403: FOR_IN
11404: IFFALSE 11586
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11406: LD_ADDR_VAR 0 22
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_VAR 0 11
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 69
11427: PUSH
11428: LD_EXP 45
11432: DIFF
11433: PPUSH
11434: LD_VAR 0 14
11438: PPUSH
11439: CALL_OW 74
11443: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11444: LD_ADDR_VAR 0 23
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_VAR 0 11
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 59
11466: PUSH
11467: EMPTY
11468: LIST
11469: PUSH
11470: LD_INT 21
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 21
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: PPUSH
11503: CALL_OW 69
11507: PPUSH
11508: LD_VAR 0 14
11512: PPUSH
11513: CALL_OW 74
11517: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11518: LD_VAR 0 14
11522: PPUSH
11523: LD_VAR 0 22
11527: PPUSH
11528: CALL_OW 296
11532: PUSH
11533: LD_INT 8
11535: PLUS
11536: PUSH
11537: LD_VAR 0 14
11541: PPUSH
11542: LD_VAR 0 23
11546: PPUSH
11547: CALL_OW 296
11551: LESS
11552: IFFALSE 11570
// begin ComAttackUnit ( i , target1 ) ;
11554: LD_VAR 0 14
11558: PPUSH
11559: LD_VAR 0 22
11563: PPUSH
11564: CALL_OW 115
// end else
11568: GO 11584
// begin ComAttackUnit ( i , target2 ) ;
11570: LD_VAR 0 14
11574: PPUSH
11575: LD_VAR 0 23
11579: PPUSH
11580: CALL_OW 115
// end ; end ;
11584: GO 11403
11586: POP
11587: POP
// until soldiersOK_list = [ ] ;
11588: LD_VAR 0 19
11592: PUSH
11593: EMPTY
11594: EQUAL
11595: IFFALSE 10961
// end ; if strategy = 2 then
11597: LD_VAR 0 12
11601: PUSH
11602: LD_INT 2
11604: EQUAL
11605: IFFALSE 12310
// begin repeat wait ( 0 0$1 ) ;
11607: LD_INT 35
11609: PPUSH
11610: CALL_OW 67
// for i in soldiersOK_list do
11614: LD_ADDR_VAR 0 14
11618: PUSH
11619: LD_VAR 0 19
11623: PUSH
11624: FOR_IN
11625: IFFALSE 11659
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11627: LD_VAR 0 14
11631: PPUSH
11632: LD_INT 117
11634: PPUSH
11635: LD_INT 97
11637: PPUSH
11638: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11642: LD_VAR 0 14
11646: PPUSH
11647: LD_INT 94
11649: PPUSH
11650: LD_INT 50
11652: PPUSH
11653: CALL_OW 174
// end ;
11657: GO 11624
11659: POP
11660: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11661: LD_INT 14
11663: PPUSH
11664: LD_INT 22
11666: PUSH
11667: LD_VAR 0 1
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 70
11680: PUSH
11681: LD_INT 0
11683: GREATER
11684: IFFALSE 11607
// repeat wait ( 0 0$3 ) ;
11686: LD_INT 105
11688: PPUSH
11689: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11693: LD_ADDR_VAR 0 17
11697: PUSH
11698: LD_INT 22
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 1
11712: PUSH
11713: LD_INT 3
11715: PUSH
11716: LD_INT 24
11718: PUSH
11719: LD_INT 550
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 24
11732: PUSH
11733: LD_INT 250
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11754: LD_ADDR_VAR 0 19
11758: PUSH
11759: LD_INT 22
11761: PUSH
11762: LD_VAR 0 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 5
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 25
11796: PUSH
11797: LD_INT 8
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 25
11806: PUSH
11807: LD_INT 9
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 24
11823: PUSH
11824: LD_INT 1000
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 69
11840: ST_TO_ADDR
// if medicCount > 0 then
11841: LD_VAR 0 7
11845: PUSH
11846: LD_INT 0
11848: GREATER
11849: IFFALSE 11923
// begin if damageUnit_list > 0 then
11851: LD_VAR 0 17
11855: PUSH
11856: LD_INT 0
11858: GREATER
11859: IFFALSE 11923
// begin for i in damageUnit_list do
11861: LD_ADDR_VAR 0 14
11865: PUSH
11866: LD_VAR 0 17
11870: PUSH
11871: FOR_IN
11872: IFFALSE 11921
// begin ComMoveToArea ( i , healArea ) ;
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 10
11883: PPUSH
11884: CALL_OW 113
// for j in medic_list do
11888: LD_ADDR_VAR 0 15
11892: PUSH
11893: LD_VAR 0 18
11897: PUSH
11898: FOR_IN
11899: IFFALSE 11917
// AddComHeal ( j , i ) ;
11901: LD_VAR 0 15
11905: PPUSH
11906: LD_VAR 0 14
11910: PPUSH
11911: CALL_OW 188
11915: GO 11898
11917: POP
11918: POP
// end ;
11919: GO 11871
11921: POP
11922: POP
// end ; end ; for i in soldiersOK_list do
11923: LD_ADDR_VAR 0 14
11927: PUSH
11928: LD_VAR 0 19
11932: PUSH
11933: FOR_IN
11934: IFFALSE 12110
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11936: LD_ADDR_VAR 0 22
11940: PUSH
11941: LD_INT 22
11943: PUSH
11944: LD_VAR 0 11
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PPUSH
11953: CALL_OW 69
11957: PPUSH
11958: LD_VAR 0 14
11962: PPUSH
11963: CALL_OW 74
11967: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11968: LD_ADDR_VAR 0 23
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_VAR 0 11
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: LD_INT 59
11990: PUSH
11991: EMPTY
11992: LIST
11993: PUSH
11994: LD_INT 21
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 21
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: PPUSH
12032: LD_VAR 0 14
12036: PPUSH
12037: CALL_OW 74
12041: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12042: LD_VAR 0 14
12046: PPUSH
12047: LD_VAR 0 22
12051: PPUSH
12052: CALL_OW 296
12056: PUSH
12057: LD_INT 8
12059: PLUS
12060: PUSH
12061: LD_VAR 0 14
12065: PPUSH
12066: LD_VAR 0 23
12070: PPUSH
12071: CALL_OW 296
12075: LESS
12076: IFFALSE 12094
// begin ComAttackUnit ( i , target1 ) ;
12078: LD_VAR 0 14
12082: PPUSH
12083: LD_VAR 0 22
12087: PPUSH
12088: CALL_OW 115
// end else
12092: GO 12108
// begin ComAttackUnit ( i , target2 ) ;
12094: LD_VAR 0 14
12098: PPUSH
12099: LD_VAR 0 23
12103: PPUSH
12104: CALL_OW 115
// end ; end ;
12108: GO 11933
12110: POP
12111: POP
// for i in soldiersOK_list do
12112: LD_ADDR_VAR 0 14
12116: PUSH
12117: LD_VAR 0 19
12121: PUSH
12122: FOR_IN
12123: IFFALSE 12299
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12125: LD_ADDR_VAR 0 22
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_VAR 0 11
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: PPUSH
12147: LD_VAR 0 14
12151: PPUSH
12152: CALL_OW 74
12156: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12157: LD_ADDR_VAR 0 23
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_VAR 0 11
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: LD_INT 59
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: LD_INT 21
12185: PUSH
12186: LD_INT 1
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 2
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: PPUSH
12221: LD_VAR 0 14
12225: PPUSH
12226: CALL_OW 74
12230: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12231: LD_VAR 0 14
12235: PPUSH
12236: LD_VAR 0 22
12240: PPUSH
12241: CALL_OW 296
12245: PUSH
12246: LD_INT 8
12248: PLUS
12249: PUSH
12250: LD_VAR 0 14
12254: PPUSH
12255: LD_VAR 0 23
12259: PPUSH
12260: CALL_OW 296
12264: LESS
12265: IFFALSE 12283
// begin ComAttackUnit ( i , target1 ) ;
12267: LD_VAR 0 14
12271: PPUSH
12272: LD_VAR 0 22
12276: PPUSH
12277: CALL_OW 115
// end else
12281: GO 12297
// begin ComAttackUnit ( i , target2 ) ;
12283: LD_VAR 0 14
12287: PPUSH
12288: LD_VAR 0 23
12292: PPUSH
12293: CALL_OW 115
// end ; end ;
12297: GO 12122
12299: POP
12300: POP
// until soldiersOK_list = [ ] ;
12301: LD_VAR 0 19
12305: PUSH
12306: EMPTY
12307: EQUAL
12308: IFFALSE 11686
// end ; end ; end_of_file
12310: LD_VAR 0 13
12314: RET
// every 0 0$01 do
12315: GO 12317
12317: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12318: LD_INT 22
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 25
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: PUSH
12347: LD_INT 0
12349: EQUAL
12350: IFFALSE 12364
// SetClass ( JMM , 2 ) ;
12352: LD_EXP 1
12356: PPUSH
12357: LD_INT 2
12359: PPUSH
12360: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12364: LD_STRING M1
12366: PPUSH
12367: CALL_OW 337
// case difficulty of 1 :
12371: LD_OWVAR 67
12375: PUSH
12376: LD_INT 1
12378: DOUBLE
12379: EQUAL
12380: IFTRUE 12384
12382: GO 12394
12384: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12385: LD_STRING M1-1
12387: PPUSH
12388: CALL_OW 337
12392: GO 12431
12394: LD_INT 2
12396: DOUBLE
12397: EQUAL
12398: IFTRUE 12402
12400: GO 12412
12402: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12403: LD_STRING M1-2
12405: PPUSH
12406: CALL_OW 337
12410: GO 12431
12412: LD_INT 3
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12430
12420: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12421: LD_STRING M1-3
12423: PPUSH
12424: CALL_OW 337
12428: GO 12431
12430: POP
// ChangeMissionObjectives ( M1cont ) ;
12431: LD_STRING M1cont
12433: PPUSH
12434: CALL_OW 337
// SaveForQuickRestart ;
12438: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12442: LD_INT 525
12444: PPUSH
12445: LD_INT 700
12447: PPUSH
12448: CALL_OW 12
12452: PPUSH
12453: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12457: LD_INT 5
12459: PPUSH
12460: LD_INT 82
12462: PPUSH
12463: LD_INT 38
12465: PPUSH
12466: LD_INT 10
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 56
// wait ( 0 0$14 ) ;
12476: LD_INT 490
12478: PPUSH
12479: CALL_OW 67
// firstCrateSpawn := true ;
12483: LD_ADDR_EXP 41
12487: PUSH
12488: LD_INT 1
12490: ST_TO_ADDR
// end ;
12491: END
// every 0 0$02 trigger firstCrateSpawn do
12492: LD_EXP 41
12496: IFFALSE 12859
12498: GO 12500
12500: DISABLE
// begin if IsOk ( Lisa ) then
12501: LD_EXP 2
12505: PPUSH
12506: CALL_OW 302
12510: IFFALSE 12526
// Say ( Lisa , DR0-Lisa-1 ) else
12512: LD_EXP 2
12516: PPUSH
12517: LD_STRING DR0-Lisa-1
12519: PPUSH
12520: CALL_OW 88
12524: GO 12672
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12526: LD_INT 22
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 21
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 26
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 2
12558: PUSH
12559: LD_INT 25
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 25
12571: PUSH
12572: LD_INT 2
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 3
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 25
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PPUSH
12612: CALL_OW 69
12616: PUSH
12617: LD_EXP 1
12621: PUSH
12622: LD_EXP 8
12626: PUSH
12627: LD_EXP 5
12631: PUSH
12632: LD_EXP 6
12636: PUSH
12637: LD_EXP 7
12641: PUSH
12642: LD_EXP 4
12646: PUSH
12647: LD_EXP 3
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: DIFF
12661: PPUSH
12662: LD_STRING DR0-Sol1-1
12664: PPUSH
12665: LD_STRING DR0-Sol1-1
12667: PPUSH
12668: CALL 5630 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12672: LD_INT 22
12674: PUSH
12675: LD_INT 1
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 21
12684: PUSH
12685: LD_INT 1
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 26
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 2
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 25
12717: PUSH
12718: LD_INT 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 25
12727: PUSH
12728: LD_INT 3
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 25
12737: PUSH
12738: LD_INT 4
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_EXP 1
12767: PUSH
12768: LD_EXP 8
12772: PUSH
12773: LD_EXP 5
12777: PUSH
12778: LD_EXP 2
12782: PUSH
12783: LD_EXP 6
12787: PUSH
12788: LD_EXP 7
12792: PUSH
12793: LD_EXP 4
12797: PUSH
12798: LD_EXP 3
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: DIFF
12813: PPUSH
12814: LD_STRING DR0-Sol2-1
12816: PPUSH
12817: LD_STRING DR0-Sol2-1
12819: PPUSH
12820: CALL 5630 0 3
// if IsOk ( Cyrus ) then
12824: LD_EXP 4
12828: PPUSH
12829: CALL_OW 302
12833: IFFALSE 12847
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12835: LD_EXP 4
12839: PPUSH
12840: LD_STRING DR0-Cyrus-1
12842: PPUSH
12843: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12847: LD_EXP 1
12851: PPUSH
12852: LD_STRING DR0-JMM-1
12854: PPUSH
12855: CALL_OW 88
// end ;
12859: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
12860: LD_EXP 5
12864: PPUSH
12865: CALL_OW 302
12869: PUSH
12870: LD_INT 22
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 25
12882: PUSH
12883: LD_INT 16
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PPUSH
12894: CALL_OW 69
12898: PUSH
12899: LD_INT 0
12901: GREATER
12902: AND
12903: PUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 463
12911: NOT
12912: AND
12913: IFFALSE 13191
12915: GO 12917
12917: DISABLE
// begin DialogueOn ;
12918: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12922: LD_EXP 5
12926: PPUSH
12927: LD_STRING D10-Frank-1
12929: PPUSH
12930: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12934: LD_INT 22
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: LD_INT 25
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 25
12969: PUSH
12970: LD_INT 2
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 3
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 4
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: LIST
13008: PPUSH
13009: CALL_OW 69
13013: PUSH
13014: LD_EXP 1
13018: PUSH
13019: LD_EXP 5
13023: PUSH
13024: LD_EXP 2
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: DIFF
13034: PPUSH
13035: LD_STRING D10-Sol1-1
13037: PPUSH
13038: LD_STRING D10-FSol1-1
13040: PPUSH
13041: CALL 5630 0 3
// Say ( Frank , D10-Frank-2 ) ;
13045: LD_EXP 5
13049: PPUSH
13050: LD_STRING D10-Frank-2
13052: PPUSH
13053: CALL_OW 88
// if IsOK ( Lisa ) then
13057: LD_EXP 2
13061: PPUSH
13062: CALL_OW 302
13066: IFFALSE 13082
// begin Say ( Lisa , D10-Lisa-2 ) ;
13068: LD_EXP 2
13072: PPUSH
13073: LD_STRING D10-Lisa-2
13075: PPUSH
13076: CALL_OW 88
// end else
13080: GO 13187
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13082: LD_INT 22
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 21
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: LD_INT 25
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 25
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 25
13127: PUSH
13128: LD_INT 3
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 25
13137: PUSH
13138: LD_INT 4
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: PPUSH
13157: CALL_OW 69
13161: PUSH
13162: LD_EXP 1
13166: PUSH
13167: LD_EXP 5
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: DIFF
13176: PPUSH
13177: LD_STRING D10-Sol1-2
13179: PPUSH
13180: LD_STRING D10-FSol1-2
13182: PPUSH
13183: CALL 5630 0 3
// end ; DialogueOff ;
13187: CALL_OW 7
// end ;
13191: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 463
13199: NOT
13200: IFFALSE 13463
13202: GO 13204
13204: DISABLE
// begin HarrisonSupport ;
13205: CALL 2201 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13209: LD_EXP 17
13213: PPUSH
13214: CALL_OW 310
13218: PPUSH
13219: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13223: LD_EXP 17
13227: PPUSH
13228: LD_STRING DEng-Eng1-1
13230: PPUSH
13231: CALL_OW 88
// wait ( 1 1$0 ) ;
13235: LD_INT 2100
13237: PPUSH
13238: CALL_OW 67
// DialogueOn ;
13242: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13246: LD_EXP 14
13250: PPUSH
13251: LD_STRING DRem-Har-1
13253: PPUSH
13254: CALL_OW 94
// if contactWithRussian = 1 then
13258: LD_EXP 22
13262: PUSH
13263: LD_INT 1
13265: EQUAL
13266: IFFALSE 13282
// begin Say ( JMM , DRem-JMM-1 ) ;
13268: LD_EXP 1
13272: PPUSH
13273: LD_STRING DRem-JMM-1
13275: PPUSH
13276: CALL_OW 88
// end else
13280: GO 13294
// begin Say ( JMM , DRem-JMM-1a ) ;
13282: LD_EXP 1
13286: PPUSH
13287: LD_STRING DRem-JMM-1a
13289: PPUSH
13290: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13294: LD_EXP 14
13298: PPUSH
13299: LD_STRING DRem-Har-2
13301: PPUSH
13302: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13306: LD_STRING DenisInDelta
13308: PPUSH
13309: LD_INT 0
13311: PPUSH
13312: CALL_OW 30
13316: PUSH
13317: LD_INT 1
13319: EQUAL
13320: IFFALSE 13336
// begin Say ( JMM , DRem-JMM-2 ) ;
13322: LD_EXP 1
13326: PPUSH
13327: LD_STRING DRem-JMM-2
13329: PPUSH
13330: CALL_OW 88
// end else
13334: GO 13348
// begin Say ( JMM , DRem-JMM-2a ) ;
13336: LD_EXP 1
13340: PPUSH
13341: LD_STRING DRem-JMM-2a
13343: PPUSH
13344: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13348: LD_EXP 14
13352: PPUSH
13353: LD_STRING DRem-Har-3
13355: PPUSH
13356: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13360: LD_EXP 1
13364: PPUSH
13365: LD_STRING DRem-JMM-3
13367: PPUSH
13368: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13372: LD_EXP 14
13376: PPUSH
13377: LD_STRING DRem-Har-4
13379: PPUSH
13380: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13384: LD_STRING DenisInDelta
13386: PPUSH
13387: LD_INT 0
13389: PPUSH
13390: CALL_OW 30
13394: PUSH
13395: LD_INT 1
13397: EQUAL
13398: IFFALSE 13426
// begin Say ( JMM , DRem-JMM-4 ) ;
13400: LD_EXP 1
13404: PPUSH
13405: LD_STRING DRem-JMM-4
13407: PPUSH
13408: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13412: LD_EXP 14
13416: PPUSH
13417: LD_STRING DRem-Har-5
13419: PPUSH
13420: CALL_OW 94
// end else
13424: GO 13459
// begin SetRestrict ( 36 , 1 , true ) ;
13426: LD_INT 36
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13439: LD_INT 15
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13452: LD_STRING MR
13454: PPUSH
13455: CALL_OW 337
// end ; DialogueOff ;
13459: CALL_OW 7
// end ;
13463: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do
13464: LD_STRING DenisInDelta
13466: PPUSH
13467: LD_INT 0
13469: PPUSH
13470: CALL_OW 30
13474: PUSH
13475: LD_INT 1
13477: EQUAL
13478: PUSH
13479: LD_INT 1
13481: PPUSH
13482: CALL_OW 463
13486: NOT
13487: AND
13488: IFFALSE 13619
13490: GO 13492
13492: DISABLE
// begin PrepareDenis ;
13493: CALL 2122 0 0
// CenterNowOnUnits ( Denis ) ;
13497: LD_EXP 9
13501: PPUSH
13502: CALL_OW 87
// DialogueOn ;
13506: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13510: LD_EXP 9
13514: PPUSH
13515: LD_STRING DDen-Den-1
13517: PPUSH
13518: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13522: LD_EXP 1
13526: PPUSH
13527: LD_STRING DDen-JMM-1
13529: PPUSH
13530: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13534: LD_EXP 9
13538: PPUSH
13539: LD_STRING DDen-Den-2
13541: PPUSH
13542: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13546: LD_EXP 1
13550: PPUSH
13551: LD_STRING DDen-JMM-2
13553: PPUSH
13554: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13558: LD_EXP 9
13562: PPUSH
13563: LD_STRING DDen-Den-3
13565: PPUSH
13566: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13570: LD_EXP 1
13574: PPUSH
13575: LD_STRING DDen-JMM-3
13577: PPUSH
13578: CALL_OW 88
// DialogueOff ;
13582: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13586: LD_INT 36
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13599: LD_INT 15
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13612: LD_STRING MR
13614: PPUSH
13615: CALL_OW 337
// end ;
13619: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13620: CALL 13675 0 0
13624: PUSH
13625: LD_EXP 9
13629: PPUSH
13630: CALL_OW 302
13634: AND
13635: PUSH
13636: LD_INT 1
13638: PPUSH
13639: CALL_OW 463
13643: NOT
13644: AND
13645: IFFALSE 13674
13647: GO 13649
13649: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13650: LD_EXP 9
13654: PPUSH
13655: LD_STRING DR1-Den-1
13657: PPUSH
13658: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13662: LD_EXP 1
13666: PPUSH
13667: LD_STRING DR1-JMM-1
13669: PPUSH
13670: CALL_OW 88
// end ;
13674: END
// function CheckOptoLab ; var i ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
// result = false ;
13679: LD_ADDR_VAR 0 1
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13687: LD_ADDR_VAR 0 2
13691: PUSH
13692: LD_INT 22
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 30
13707: PUSH
13708: LD_INT 7
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 30
13717: PUSH
13718: LD_INT 8
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 69
13738: PUSH
13739: FOR_IN
13740: IFFALSE 13792
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13742: LD_VAR 0 2
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 268
13754: PUSH
13755: LD_INT 15
13757: EQUAL
13758: PUSH
13759: LD_VAR 0 2
13763: PPUSH
13764: LD_INT 2
13766: PPUSH
13767: CALL_OW 268
13771: PUSH
13772: LD_INT 15
13774: EQUAL
13775: OR
13776: IFFALSE 13788
// begin result = true ;
13778: LD_ADDR_VAR 0 1
13782: PUSH
13783: LD_INT 1
13785: ST_TO_ADDR
// break ;
13786: GO 13792
// end ; break ;
13788: GO 13792
// end ;
13790: GO 13739
13792: POP
13793: POP
// end ;
13794: LD_VAR 0 1
13798: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
13799: LD_INT 15
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 321
13809: PUSH
13810: LD_INT 2
13812: EQUAL
13813: PUSH
13814: LD_EXP 9
13818: PPUSH
13819: CALL_OW 302
13823: AND
13824: PUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 463
13832: NOT
13833: AND
13834: IFFALSE 14066
13836: GO 13838
13838: DISABLE
// begin DialogueOn ;
13839: CALL_OW 6
// if IsOK ( Denis ) then
13843: LD_EXP 9
13847: PPUSH
13848: CALL_OW 302
13852: IFFALSE 13868
// begin Say ( Denis , DR2-Den-1 ) ;
13854: LD_EXP 9
13858: PPUSH
13859: LD_STRING DR2-Den-1
13861: PPUSH
13862: CALL_OW 88
// end else
13866: GO 13927
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13868: LD_INT 22
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 21
13880: PUSH
13881: LD_INT 1
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 25
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 69
13907: PUSH
13908: LD_EXP 1
13912: PUSH
13913: EMPTY
13914: LIST
13915: DIFF
13916: PPUSH
13917: LD_STRING DR2-Sci1-1
13919: PPUSH
13920: LD_STRING DR2-FSci1-1
13922: PPUSH
13923: CALL 5630 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13927: LD_EXP 1
13931: PPUSH
13932: LD_STRING DR2-JMM-1
13934: PPUSH
13935: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13939: LD_INT 22
13941: PUSH
13942: LD_INT 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 2
13961: PUSH
13962: LD_INT 25
13964: PUSH
13965: LD_INT 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 25
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 25
13984: PUSH
13985: LD_INT 3
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 4
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 69
14018: PUSH
14019: LD_EXP 1
14023: PUSH
14024: LD_EXP 9
14028: PUSH
14029: LD_EXP 8
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: DIFF
14039: PPUSH
14040: LD_STRING DR2-Sol1-1
14042: PPUSH
14043: LD_STRING DR2-Sol1-11
14045: PPUSH
14046: CALL 5630 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14050: LD_EXP 1
14054: PPUSH
14055: LD_STRING DR2-JMM-2
14057: PPUSH
14058: CALL_OW 88
// DialogueOff ;
14062: CALL_OW 7
// end ;
14066: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14067: LD_INT 22
14069: PUSH
14070: LD_INT 1
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: LD_INT 36
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: PUSH
14096: LD_INT 0
14098: EQUAL
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 33
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: PUSH
14140: LD_INT 0
14142: GREATER
14143: AND
14144: PUSH
14145: LD_EXP 23
14149: PUSH
14150: LD_INT 0
14152: EQUAL
14153: AND
14154: PUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 463
14162: NOT
14163: AND
14164: IFFALSE 14290
14166: GO 14168
14168: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14169: LD_INT 22
14171: PUSH
14172: LD_INT 1
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 25
14191: PUSH
14192: LD_INT 3
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: PUSH
14209: LD_EXP 1
14213: PUSH
14214: LD_EXP 6
14218: PUSH
14219: LD_EXP 7
14223: PUSH
14224: LD_EXP 9
14228: PUSH
14229: LD_EXP 15
14233: PUSH
14234: LD_EXP 3
14238: PUSH
14239: LD_EXP 4
14243: PUSH
14244: LD_EXP 2
14248: PUSH
14249: LD_EXP 5
14253: PUSH
14254: LD_EXP 8
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: DIFF
14271: PPUSH
14272: LD_STRING D3a-Mech1-1
14274: PPUSH
14275: LD_STRING D3a-Mech1-1
14277: PPUSH
14278: CALL 5630 0 3
// firstTower = 2 ;
14282: LD_ADDR_EXP 23
14286: PUSH
14287: LD_INT 2
14289: ST_TO_ADDR
// end ;
14290: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14291: LD_INT 22
14293: PUSH
14294: LD_INT 3
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 3
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 69
14319: PUSH
14320: LD_INT 0
14322: EQUAL
14323: IFFALSE 14438
14325: GO 14327
14327: DISABLE
14328: LD_INT 0
14330: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14331: LD_ADDR_VAR 0 1
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_INT 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 21
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 2
14358: PUSH
14359: LD_INT 25
14361: PUSH
14362: LD_INT 1
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 25
14371: PUSH
14372: LD_INT 2
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 25
14381: PUSH
14382: LD_INT 3
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 4
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: PPUSH
14411: CALL_OW 69
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14436
// AddExperience ( i , 1 , 10000 ) ;
14419: LD_VAR 0 1
14423: PPUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 10000
14429: PPUSH
14430: CALL_OW 492
14434: GO 14416
14436: POP
14437: POP
// end ;
14438: PPOPN 1
14440: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14441: LD_INT 22
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 36
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 69
14469: PUSH
14470: LD_INT 0
14472: GREATER
14473: PUSH
14474: LD_INT 22
14476: PUSH
14477: LD_INT 1
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 21
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 33
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: PPUSH
14509: CALL_OW 69
14513: PUSH
14514: LD_INT 0
14516: GREATER
14517: AND
14518: PUSH
14519: CALL 15111 0 0
14523: AND
14524: PUSH
14525: LD_INT 1
14527: PPUSH
14528: CALL_OW 463
14532: NOT
14533: AND
14534: IFFALSE 15108
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: LD_INT 22
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 30
14563: PUSH
14564: LD_INT 36
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14580: LD_ADDR_VAR 0 4
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 21
14597: PUSH
14598: LD_INT 2
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 33
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14625: LD_ADDR_VAR 0 5
14629: PUSH
14630: EMPTY
14631: ST_TO_ADDR
// for i in tmpControlTowers do
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_VAR 0 3
14641: PUSH
14642: FOR_IN
14643: IFFALSE 15106
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14645: LD_EXP 1
14649: PPUSH
14650: CALL_OW 310
14654: PUSH
14655: LD_VAR 0 1
14659: EQUAL
14660: PUSH
14661: LD_EXP 1
14665: PPUSH
14666: CALL_OW 257
14670: PUSH
14671: LD_INT 3
14673: EQUAL
14674: AND
14675: IFFALSE 14805
// begin InGameOn ;
14677: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14681: LD_VAR 0 4
14685: PUSH
14686: LD_INT 1
14688: ARRAY
14689: PPUSH
14690: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14694: LD_EXP 1
14698: PPUSH
14699: LD_STRING D4a-JMM-1
14701: PPUSH
14702: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14706: LD_VAR 0 4
14710: PUSH
14711: LD_INT 1
14713: ARRAY
14714: PPUSH
14715: LD_EXP 1
14719: PPUSH
14720: CALL_OW 53
// wait ( 0 0$1 ) ;
14724: LD_INT 35
14726: PPUSH
14727: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14731: LD_VAR 0 4
14735: PUSH
14736: LD_INT 1
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 4
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: PPUSH
14749: CALL_OW 250
14753: PUSH
14754: LD_INT 3
14756: PLUS
14757: PPUSH
14758: LD_VAR 0 4
14762: PUSH
14763: LD_INT 1
14765: ARRAY
14766: PPUSH
14767: CALL_OW 251
14771: PUSH
14772: LD_INT 2
14774: MINUS
14775: PPUSH
14776: CALL_OW 111
// wait ( 0 0$2 ) ;
14780: LD_INT 70
14782: PPUSH
14783: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14787: LD_EXP 1
14791: PPUSH
14792: LD_STRING D4b-JMM-1
14794: PPUSH
14795: CALL_OW 88
// InGameOff ;
14799: CALL_OW 9
// end else
14803: GO 15104
// begin InGameOn ;
14805: CALL_OW 8
// for j in UnitsInside ( i ) do
14809: LD_ADDR_VAR 0 2
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 313
14823: PUSH
14824: FOR_IN
14825: IFFALSE 14860
// if GetClass ( j ) = 3 then
14827: LD_VAR 0 2
14831: PPUSH
14832: CALL_OW 257
14836: PUSH
14837: LD_INT 3
14839: EQUAL
14840: IFFALSE 14858
// tmpMechanicInside = tmpMechanicInside ^ j ;
14842: LD_ADDR_VAR 0 5
14846: PUSH
14847: LD_VAR 0 5
14851: PUSH
14852: LD_VAR 0 2
14856: ADD
14857: ST_TO_ADDR
14858: GO 14824
14860: POP
14861: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14862: LD_VAR 0 5
14866: PUSH
14867: LD_INT 1
14869: ARRAY
14870: PPUSH
14871: CALL_OW 258
14875: PUSH
14876: LD_INT 1
14878: EQUAL
14879: IFFALSE 14897
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14881: LD_VAR 0 5
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: LD_STRING D4a-Mech1-1
14892: PPUSH
14893: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14897: LD_VAR 0 5
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: PPUSH
14906: CALL_OW 258
14910: PUSH
14911: LD_INT 2
14913: EQUAL
14914: IFFALSE 14932
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14916: LD_VAR 0 5
14920: PUSH
14921: LD_INT 1
14923: ARRAY
14924: PPUSH
14925: LD_STRING D4a-FMech1-1
14927: PPUSH
14928: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14932: LD_VAR 0 4
14936: PUSH
14937: LD_INT 1
14939: ARRAY
14940: PPUSH
14941: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14945: LD_VAR 0 4
14949: PUSH
14950: LD_INT 1
14952: ARRAY
14953: PPUSH
14954: LD_VAR 0 5
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: CALL_OW 53
// wait ( 0 0$1 ) ;
14967: LD_INT 35
14969: PPUSH
14970: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14974: LD_VAR 0 4
14978: PUSH
14979: LD_INT 1
14981: ARRAY
14982: PPUSH
14983: LD_VAR 0 4
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: CALL_OW 250
14996: PUSH
14997: LD_INT 3
14999: PLUS
15000: PPUSH
15001: LD_VAR 0 4
15005: PUSH
15006: LD_INT 1
15008: ARRAY
15009: PPUSH
15010: CALL_OW 251
15014: PUSH
15015: LD_INT 2
15017: MINUS
15018: PPUSH
15019: CALL_OW 111
// wait ( 0 0$2 ) ;
15023: LD_INT 70
15025: PPUSH
15026: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15030: LD_VAR 0 5
15034: PUSH
15035: LD_INT 1
15037: ARRAY
15038: PPUSH
15039: CALL_OW 258
15043: PUSH
15044: LD_INT 1
15046: EQUAL
15047: IFFALSE 15065
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15049: LD_VAR 0 5
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_STRING D4b-Mech1-1
15060: PPUSH
15061: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15065: LD_VAR 0 5
15069: PUSH
15070: LD_INT 1
15072: ARRAY
15073: PPUSH
15074: CALL_OW 258
15078: PUSH
15079: LD_INT 2
15081: EQUAL
15082: IFFALSE 15100
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15084: LD_VAR 0 5
15088: PUSH
15089: LD_INT 1
15091: ARRAY
15092: PPUSH
15093: LD_STRING D4b-FMech1-1
15095: PPUSH
15096: CALL_OW 88
// InGameOff ;
15100: CALL_OW 9
// end ; end ;
15104: GO 14642
15106: POP
15107: POP
// end ;
15108: PPOPN 5
15110: END
// function CheckMehInside ; var i , j ; begin
15111: LD_INT 0
15113: PPUSH
15114: PPUSH
15115: PPUSH
// result = false ;
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: LD_INT 0
15123: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15124: LD_ADDR_VAR 0 2
15128: PUSH
15129: LD_INT 22
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 30
15141: PUSH
15142: LD_INT 36
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PPUSH
15153: CALL_OW 69
15157: PUSH
15158: FOR_IN
15159: IFFALSE 15210
// begin for j in UnitsInside ( i ) do
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: CALL_OW 313
15175: PUSH
15176: FOR_IN
15177: IFFALSE 15206
// begin if GetClass ( j ) = 3 then
15179: LD_VAR 0 3
15183: PPUSH
15184: CALL_OW 257
15188: PUSH
15189: LD_INT 3
15191: EQUAL
15192: IFFALSE 15204
// begin result = true ;
15194: LD_ADDR_VAR 0 1
15198: PUSH
15199: LD_INT 1
15201: ST_TO_ADDR
// break ;
15202: GO 15206
// end ; end ;
15204: GO 15176
15206: POP
15207: POP
// end ;
15208: GO 15158
15210: POP
15211: POP
// end ;
15212: LD_VAR 0 1
15216: RET
// every 25 25$0 do
15217: GO 15219
15219: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15220: LD_INT 35
15222: PPUSH
15223: CALL_OW 67
// until not InBattle ( 1 ) ;
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 463
15234: NOT
15235: IFFALSE 15220
// PrepareKurt ;
15237: CALL 18683 0 0
// end ;
15241: END
// every 35 35$0 do
15242: GO 15244
15244: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15245: LD_INT 35
15247: PPUSH
15248: CALL_OW 67
// until not InBattle ( 1 ) ;
15252: LD_INT 1
15254: PPUSH
15255: CALL_OW 463
15259: NOT
15260: IFFALSE 15245
// PrepareJoan ;
15262: CALL 2656 0 0
// wait ( 1 1$0 ) ;
15266: LD_INT 2100
15268: PPUSH
15269: CALL_OW 67
// if IsOK ( Lisa ) then
15273: LD_EXP 2
15277: PPUSH
15278: CALL_OW 302
15282: IFFALSE 15412
// begin DialogueOn ;
15284: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15288: LD_EXP 2
15292: PPUSH
15293: LD_STRING D7-Lisa-1
15295: PPUSH
15296: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15300: LD_EXP 1
15304: PPUSH
15305: LD_STRING D7-JMM-1
15307: PPUSH
15308: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15312: LD_EXP 2
15316: PPUSH
15317: LD_STRING D7-Lisa-2
15319: PPUSH
15320: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15324: LD_EXP 1
15328: PPUSH
15329: LD_STRING D7-JMM-2
15331: PPUSH
15332: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15336: LD_EXP 2
15340: PPUSH
15341: LD_STRING D7-Lisa-3
15343: PPUSH
15344: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15348: LD_EXP 1
15352: PPUSH
15353: LD_STRING D7-JMM-3
15355: PPUSH
15356: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15360: LD_EXP 2
15364: PPUSH
15365: LD_STRING D7-Lisa-4
15367: PPUSH
15368: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15372: LD_EXP 1
15376: PPUSH
15377: LD_STRING D7-JMM-4
15379: PPUSH
15380: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15384: LD_EXP 1
15388: PPUSH
15389: LD_STRING D7-JMM-4a
15391: PPUSH
15392: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15396: LD_EXP 2
15400: PPUSH
15401: LD_STRING D7-Lisa-5
15403: PPUSH
15404: CALL_OW 88
// DialogueOff ;
15408: CALL_OW 7
// end ; end ;
15412: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15413: LD_EXP 13
15417: PUSH
15418: LD_INT 22
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 91
15430: PUSH
15431: LD_EXP 13
15435: PUSH
15436: LD_INT 10
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 25
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 25
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 25
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 25
15479: PUSH
15480: LD_INT 4
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PUSH
15504: LD_INT 1
15506: GREATER
15507: AND
15508: IFFALSE 15525
15510: GO 15512
15512: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15513: LD_EXP 13
15517: PPUSH
15518: LD_STRING D5-Sol1-1
15520: PPUSH
15521: CALL_OW 88
// end ;
15525: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15526: LD_INT 22
15528: PUSH
15529: LD_INT 1
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 33
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 69
15554: PUSH
15555: LD_INT 2
15557: GREATEREQUAL
15558: IFFALSE 15578
15560: GO 15562
15562: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15563: LD_STRING MRa
15565: PPUSH
15566: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15570: LD_ADDR_EXP 28
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// end ;
15578: END
// every 0 0$10 do var i , last ;
15579: GO 15581
15581: DISABLE
15582: LD_INT 0
15584: PPUSH
15585: PPUSH
// begin last := 7 ;
15586: LD_ADDR_VAR 0 2
15590: PUSH
15591: LD_INT 7
15593: ST_TO_ADDR
// for i = 1 to last do
15594: LD_ADDR_VAR 0 1
15598: PUSH
15599: DOUBLE
15600: LD_INT 1
15602: DEC
15603: ST_TO_ADDR
15604: LD_VAR 0 2
15608: PUSH
15609: FOR_TO
15610: IFFALSE 15638
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15612: LD_INT 6300
15614: PPUSH
15615: LD_INT 14700
15617: PPUSH
15618: CALL_OW 12
15622: PPUSH
15623: CALL_OW 67
// PrepareRandoms ( i ) ;
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL 3692 0 1
// end ;
15636: GO 15609
15638: POP
15639: POP
// end ;
15640: PPOPN 2
15642: END
// every 5 5$20 do
15643: GO 15645
15645: DISABLE
// begin DialogueOn ;
15646: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15650: LD_EXP 10
15654: PPUSH
15655: LD_STRING D12a-Sci-1
15657: PPUSH
15658: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15662: LD_EXP 1
15666: PPUSH
15667: LD_STRING D12a-JMM-1
15669: PPUSH
15670: CALL_OW 88
// DialogueOff ;
15674: CALL_OW 7
// cratesStatus = 1 ;
15678: LD_ADDR_EXP 38
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// end ;
15686: END
// every 13 13$0 do
15687: GO 15689
15689: DISABLE
// begin DialogueOn ;
15690: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15694: LD_EXP 10
15698: PPUSH
15699: LD_STRING D12b-Sci-1
15701: PPUSH
15702: CALL_OW 94
// DialogueOff ;
15706: CALL_OW 7
// cratesStatus = 2 ;
15710: LD_ADDR_EXP 38
15714: PUSH
15715: LD_INT 2
15717: ST_TO_ADDR
// end ;
15718: END
// every 32 32$0 do
15719: GO 15721
15721: DISABLE
// begin DialogueOn ;
15722: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15726: LD_EXP 10
15730: PPUSH
15731: LD_STRING D12c-Sci-1
15733: PPUSH
15734: CALL_OW 94
// DialogueOff ;
15738: CALL_OW 7
// wait ( 3 3$0 ) ;
15742: LD_INT 6300
15744: PPUSH
15745: CALL_OW 67
// DialogueOn ;
15749: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15753: LD_EXP 10
15757: PPUSH
15758: LD_STRING D12d-Sci-1
15760: PPUSH
15761: CALL_OW 94
// DialogueOff ;
15765: CALL_OW 7
// cratesStatus = 1 ;
15769: LD_ADDR_EXP 38
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// end ;
15777: END
// every 42 42$0 do
15778: GO 15780
15780: DISABLE
// begin DialogueOn ;
15781: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15785: LD_EXP 10
15789: PPUSH
15790: LD_STRING D12e-Sci-1
15792: PPUSH
15793: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15797: LD_EXP 1
15801: PPUSH
15802: LD_STRING D12e-JMM-1
15804: PPUSH
15805: CALL_OW 88
// DialogueOff ;
15809: CALL_OW 7
// cratesStatus = 2 ;
15813: LD_ADDR_EXP 38
15817: PUSH
15818: LD_INT 2
15820: ST_TO_ADDR
// end ;
15821: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15822: LD_INT 22
15824: PUSH
15825: LD_INT 6
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 2
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 34
15844: PUSH
15845: LD_INT 51
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: PUSH
15862: LD_INT 0
15864: GREATER
15865: IFFALSE 15948
15867: GO 15869
15869: DISABLE
15870: LD_INT 0
15872: PPUSH
// begin enable ;
15873: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_INT 6
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 2
15891: PUSH
15892: LD_INT 21
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: LD_INT 21
15904: PUSH
15905: LD_INT 2
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: PUSH
15926: FOR_IN
15927: IFFALSE 15946
// ComAgressiveMove ( i , 138 , 168 ) ;
15929: LD_VAR 0 1
15933: PPUSH
15934: LD_INT 138
15936: PPUSH
15937: LD_INT 168
15939: PPUSH
15940: CALL_OW 114
15944: GO 15926
15946: POP
15947: POP
// end ;
15948: PPOPN 1
15950: END
// every 0 0$1 do var i ;
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
// begin enable ;
15957: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15958: LD_ADDR_VAR 0 1
15962: PUSH
15963: LD_INT 4
15965: PPUSH
15966: LD_INT 2
15968: PUSH
15969: LD_INT 22
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 22
15981: PUSH
15982: LD_INT 6
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: PUSH
15994: EMPTY
15995: LIST
15996: PPUSH
15997: CALL_OW 70
16001: PUSH
16002: FOR_IN
16003: IFFALSE 16067
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16005: LD_INT 4
16007: PPUSH
16008: LD_INT 22
16010: PUSH
16011: LD_INT 6
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 34
16020: PUSH
16021: LD_INT 51
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PPUSH
16032: CALL_OW 70
16036: PUSH
16037: LD_INT 0
16039: GREATER
16040: IFFALSE 16056
// sendedConvoys = sendedConvoys + 1 ;
16042: LD_ADDR_EXP 39
16046: PUSH
16047: LD_EXP 39
16051: PUSH
16052: LD_INT 1
16054: PLUS
16055: ST_TO_ADDR
// RemoveUnit ( i ) ;
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 64
// end ;
16065: GO 16002
16067: POP
16068: POP
// end ; end_of_file
16069: PPOPN 1
16071: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16072: LD_VAR 0 1
16076: PUSH
16077: LD_INT 1
16079: EQUAL
16080: PUSH
16081: LD_VAR 0 2
16085: PUSH
16086: LD_INT 3
16088: EQUAL
16089: AND
16090: IFFALSE 16100
// contactWithRussian = 1 ;
16092: LD_ADDR_EXP 22
16096: PUSH
16097: LD_INT 1
16099: ST_TO_ADDR
// end ;
16100: PPOPN 2
16102: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16103: LD_VAR 0 1
16107: PPUSH
16108: CALL_OW 266
16112: PUSH
16113: LD_INT 36
16115: EQUAL
16116: PUSH
16117: LD_VAR 0 1
16121: PPUSH
16122: CALL_OW 255
16126: PUSH
16127: LD_INT 1
16129: EQUAL
16130: AND
16131: PUSH
16132: LD_INT 22
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 21
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PUSH
16172: LD_INT 0
16174: EQUAL
16175: AND
16176: PUSH
16177: LD_EXP 23
16181: PUSH
16182: LD_INT 0
16184: EQUAL
16185: AND
16186: IFFALSE 16266
// begin firstTower = 1 ;
16188: LD_ADDR_EXP 23
16192: PUSH
16193: LD_INT 1
16195: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16196: LD_INT 22
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 25
16218: PUSH
16219: LD_INT 3
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 26
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: PUSH
16247: LD_EXP 1
16251: PUSH
16252: EMPTY
16253: LIST
16254: DIFF
16255: PPUSH
16256: LD_STRING D3b-Mech1-1
16258: PPUSH
16259: LD_STRING D3b-Mech1-1
16261: PPUSH
16262: CALL 5630 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 266
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 255
16289: PUSH
16290: LD_INT 1
16292: EQUAL
16293: AND
16294: IFFALSE 16308
// SetBName ( building , theta ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: LD_STRING theta
16303: PPUSH
16304: CALL_OW 500
// if GetSide ( building ) = 3 then
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 255
16317: PUSH
16318: LD_INT 3
16320: EQUAL
16321: IFFALSE 16395
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16323: LD_ADDR_EXP 31
16327: PUSH
16328: LD_EXP 31
16332: PPUSH
16333: LD_INT 1
16335: PPUSH
16336: CALL_OW 3
16340: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16341: LD_ADDR_EXP 31
16345: PUSH
16346: LD_EXP 31
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 3
16358: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16359: LD_ADDR_EXP 31
16363: PUSH
16364: LD_EXP 31
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 3
16376: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16377: LD_ADDR_EXP 31
16381: PUSH
16382: LD_EXP 31
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 3
16394: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16395: LD_VAR 0 1
16399: PPUSH
16400: CALL_OW 255
16404: PUSH
16405: LD_INT 3
16407: EQUAL
16408: PUSH
16409: LD_VAR 0 1
16413: PPUSH
16414: CALL_OW 266
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: PUSH
16423: LD_VAR 0 1
16427: PPUSH
16428: CALL_OW 266
16432: PUSH
16433: LD_INT 2
16435: EQUAL
16436: OR
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 266
16447: PUSH
16448: LD_INT 4
16450: EQUAL
16451: OR
16452: PUSH
16453: EMPTY
16454: LIST
16455: AND
16456: IFFALSE 16467
// ComUpgrade ( building ) ;
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16467: LD_VAR 0 1
16471: PPUSH
16472: CALL_OW 255
16476: PUSH
16477: LD_INT 3
16479: EQUAL
16480: PUSH
16481: LD_VAR 0 1
16485: PPUSH
16486: CALL_OW 266
16490: PUSH
16491: LD_INT 32
16493: EQUAL
16494: AND
16495: IFFALSE 16536
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_INT 42
16504: PUSH
16505: LD_INT 43
16507: PUSH
16508: LD_INT 44
16510: PUSH
16511: LD_INT 46
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 4
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PPUSH
16532: CALL_OW 208
// end ; end ;
16536: PPOPN 1
16538: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
16539: LD_VAR 0 1
16543: PUSH
16544: LD_EXP 15
16548: EQUAL
16549: IFFALSE 16559
// JoanStatus = 0 ;
16551: LD_ADDR_EXP 16
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 255
16568: PUSH
16569: LD_INT 1
16571: EQUAL
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 247
16582: PUSH
16583: LD_INT 1
16585: EQUAL
16586: AND
16587: IFFALSE 16663
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16589: LD_VAR 0 1
16593: PPUSH
16594: CALL_OW 257
16598: PUSH
16599: LD_INT 1
16601: EQUAL
16602: PUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 2
16615: EQUAL
16616: OR
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 257
16627: PUSH
16628: LD_INT 3
16630: EQUAL
16631: OR
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 257
16642: PUSH
16643: LD_INT 4
16645: EQUAL
16646: OR
16647: IFFALSE 16663
// unitLost = unitLost + 1 ;
16649: LD_ADDR_EXP 30
16653: PUSH
16654: LD_EXP 30
16658: PUSH
16659: LD_INT 1
16661: PLUS
16662: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 255
16672: PUSH
16673: LD_INT 3
16675: EQUAL
16676: PUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: CALL_OW 247
16686: PUSH
16687: LD_INT 3
16689: EQUAL
16690: AND
16691: IFFALSE 17383
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 266
16702: PUSH
16703: LD_INT 31
16705: EQUAL
16706: PUSH
16707: LD_VAR 0 1
16711: PPUSH
16712: CALL_OW 266
16716: PUSH
16717: LD_INT 32
16719: EQUAL
16720: OR
16721: PUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 266
16731: PUSH
16732: LD_INT 36
16734: EQUAL
16735: OR
16736: PUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 266
16746: PUSH
16747: LD_INT 0
16749: EQUAL
16750: OR
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: CALL_OW 266
16761: PUSH
16762: LD_INT 24
16764: EQUAL
16765: OR
16766: PUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 266
16776: PUSH
16777: LD_INT 17
16779: EQUAL
16780: OR
16781: PUSH
16782: LD_VAR 0 1
16786: PPUSH
16787: CALL_OW 266
16791: PUSH
16792: LD_INT 25
16794: EQUAL
16795: OR
16796: PUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 266
16806: PUSH
16807: LD_INT 19
16809: EQUAL
16810: OR
16811: PUSH
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 266
16821: PUSH
16822: LD_INT 20
16824: EQUAL
16825: OR
16826: PUSH
16827: LD_VAR 0 1
16831: PPUSH
16832: CALL_OW 266
16836: PUSH
16837: LD_INT 18
16839: EQUAL
16840: OR
16841: PUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 266
16851: PUSH
16852: LD_INT 21
16854: EQUAL
16855: OR
16856: PUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 266
16866: PUSH
16867: LD_INT 23
16869: EQUAL
16870: OR
16871: PUSH
16872: LD_VAR 0 1
16876: PPUSH
16877: CALL_OW 266
16881: PUSH
16882: LD_INT 16
16884: EQUAL
16885: OR
16886: PUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: CALL_OW 266
16896: PUSH
16897: LD_INT 6
16899: EQUAL
16900: OR
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 266
16911: PUSH
16912: LD_INT 29
16914: EQUAL
16915: OR
16916: PUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: CALL_OW 266
16926: PUSH
16927: LD_INT 26
16929: EQUAL
16930: OR
16931: PUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 266
16941: PUSH
16942: LD_INT 30
16944: EQUAL
16945: OR
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 266
16956: PUSH
16957: LD_INT 28
16959: EQUAL
16960: OR
16961: PUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 27
16974: EQUAL
16975: OR
16976: PUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 266
16986: PUSH
16987: LD_INT 33
16989: EQUAL
16990: OR
16991: PUSH
16992: LD_VAR 0 1
16996: PPUSH
16997: CALL_OW 266
17001: PUSH
17002: LD_INT 2
17004: EQUAL
17005: OR
17006: PUSH
17007: LD_VAR 0 1
17011: PPUSH
17012: CALL_OW 266
17016: PUSH
17017: LD_INT 4
17019: EQUAL
17020: OR
17021: IFFALSE 17107
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17023: LD_ADDR_EXP 31
17027: PUSH
17028: LD_EXP 31
17032: PUSH
17033: LD_VAR 0 1
17037: PPUSH
17038: CALL_OW 266
17042: ADD
17043: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17044: LD_ADDR_EXP 31
17048: PUSH
17049: LD_EXP 31
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 250
17063: ADD
17064: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17065: LD_ADDR_EXP 31
17069: PUSH
17070: LD_EXP 31
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 251
17084: ADD
17085: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17086: LD_ADDR_EXP 31
17090: PUSH
17091: LD_EXP 31
17095: PUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 254
17105: ADD
17106: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 266
17116: PUSH
17117: LD_INT 1
17119: EQUAL
17120: IFFALSE 17199
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17122: LD_ADDR_EXP 31
17126: PUSH
17127: LD_EXP 31
17131: PUSH
17132: LD_INT 0
17134: ADD
17135: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17136: LD_ADDR_EXP 31
17140: PUSH
17141: LD_EXP 31
17145: PUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 250
17155: ADD
17156: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17157: LD_ADDR_EXP 31
17161: PUSH
17162: LD_EXP 31
17166: PUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 251
17176: ADD
17177: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17178: LD_ADDR_EXP 31
17182: PUSH
17183: LD_EXP 31
17187: PUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 254
17197: ADD
17198: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 266
17208: PUSH
17209: LD_INT 3
17211: EQUAL
17212: IFFALSE 17291
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17214: LD_ADDR_EXP 31
17218: PUSH
17219: LD_EXP 31
17223: PUSH
17224: LD_INT 2
17226: ADD
17227: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17228: LD_ADDR_EXP 31
17232: PUSH
17233: LD_EXP 31
17237: PUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 250
17247: ADD
17248: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17249: LD_ADDR_EXP 31
17253: PUSH
17254: LD_EXP 31
17258: PUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 251
17268: ADD
17269: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17270: LD_ADDR_EXP 31
17274: PUSH
17275: LD_EXP 31
17279: PUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 254
17289: ADD
17290: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 266
17300: PUSH
17301: LD_INT 5
17303: EQUAL
17304: IFFALSE 17383
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17306: LD_ADDR_EXP 31
17310: PUSH
17311: LD_EXP 31
17315: PUSH
17316: LD_INT 4
17318: ADD
17319: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17320: LD_ADDR_EXP 31
17324: PUSH
17325: LD_EXP 31
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 250
17339: ADD
17340: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17341: LD_ADDR_EXP 31
17345: PUSH
17346: LD_EXP 31
17350: PUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 251
17360: ADD
17361: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17362: LD_ADDR_EXP 31
17366: PUSH
17367: LD_EXP 31
17371: PUSH
17372: LD_VAR 0 1
17376: PPUSH
17377: CALL_OW 254
17381: ADD
17382: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 257
17392: PUSH
17393: LD_INT 3
17395: EQUAL
17396: PUSH
17397: LD_VAR 0 1
17401: PPUSH
17402: CALL_OW 255
17406: PUSH
17407: LD_INT 3
17409: EQUAL
17410: AND
17411: PUSH
17412: LD_INT 21
17414: PPUSH
17415: CALL_OW 302
17419: AND
17420: PUSH
17421: LD_INT 21
17423: PPUSH
17424: CALL_OW 255
17428: PUSH
17429: LD_INT 3
17431: EQUAL
17432: AND
17433: IFFALSE 17501
// begin uc_side = 3 ;
17435: LD_ADDR_OWVAR 20
17439: PUSH
17440: LD_INT 3
17442: ST_TO_ADDR
// uc_nation = 3 ;
17443: LD_ADDR_OWVAR 21
17447: PUSH
17448: LD_INT 3
17450: ST_TO_ADDR
// hc_gallery :=  ;
17451: LD_ADDR_OWVAR 33
17455: PUSH
17456: LD_STRING 
17458: ST_TO_ADDR
// hc_name :=  ;
17459: LD_ADDR_OWVAR 26
17463: PUSH
17464: LD_STRING 
17466: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17467: LD_INT 0
17469: PPUSH
17470: LD_EXP 34
17474: PPUSH
17475: LD_EXP 35
17479: PPUSH
17480: CALL_OW 12
17484: PPUSH
17485: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17489: CALL_OW 44
17493: PPUSH
17494: LD_INT 21
17496: PPUSH
17497: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 255
17510: PUSH
17511: LD_INT 3
17513: EQUAL
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 264
17524: PUSH
17525: LD_INT 52
17527: EQUAL
17528: AND
17529: PUSH
17530: LD_INT 21
17532: PPUSH
17533: CALL_OW 302
17537: AND
17538: PUSH
17539: LD_INT 21
17541: PPUSH
17542: CALL_OW 255
17546: PUSH
17547: LD_INT 3
17549: EQUAL
17550: AND
17551: IFFALSE 17572
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17553: LD_INT 21
17555: PPUSH
17556: LD_INT 22
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_INT 52
17567: PPUSH
17568: CALL_OW 125
// end ;
17572: PPOPN 1
17574: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17575: LD_INT 0
17577: PPUSH
17578: PPUSH
17579: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 264
17589: PUSH
17590: LD_INT 51
17592: EQUAL
17593: PUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 255
17603: PUSH
17604: LD_INT 3
17606: EQUAL
17607: AND
17608: IFFALSE 17670
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17610: LD_ADDR_VAR 0 5
17614: PUSH
17615: LD_INT 2
17617: PPUSH
17618: CALL_OW 274
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 275
17630: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17631: LD_INT 2
17633: PPUSH
17634: CALL_OW 274
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: LD_VAR 0 5
17646: PUSH
17647: LD_INT 100
17649: MINUS
17650: PPUSH
17651: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17655: LD_VAR 0 1
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: LD_INT 100
17665: PPUSH
17666: CALL_OW 291
// end ; if building = rufabsupp then
17670: LD_VAR 0 2
17674: PUSH
17675: LD_INT 17
17677: EQUAL
17678: IFFALSE 17692
// SetSide ( vehicle , 6 ) ;
17680: LD_VAR 0 1
17684: PPUSH
17685: LD_INT 6
17687: PPUSH
17688: CALL_OW 235
// end ;
17692: PPOPN 5
17694: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 255
17704: PUSH
17705: LD_INT 3
17707: EQUAL
17708: IFFALSE 17739
// begin tamedApemans = tamedApemans + 1 ;
17710: LD_ADDR_EXP 32
17714: PUSH
17715: LD_EXP 32
17719: PUSH
17720: LD_INT 1
17722: PLUS
17723: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_INT 106
17731: PPUSH
17732: LD_INT 85
17734: PPUSH
17735: CALL_OW 111
// end ; end ;
17739: PPOPN 2
17741: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 255
17755: PUSH
17756: LD_INT 3
17758: EQUAL
17759: PUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL_OW 247
17769: PUSH
17770: LD_INT 2
17772: EQUAL
17773: AND
17774: IFFALSE 17883
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17776: LD_VAR 0 1
17780: PPUSH
17781: CALL_OW 264
17785: PUSH
17786: LD_INT 42
17788: EQUAL
17789: PUSH
17790: LD_VAR 0 1
17794: PPUSH
17795: CALL_OW 264
17799: PUSH
17800: LD_INT 43
17802: EQUAL
17803: OR
17804: PUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 264
17814: PUSH
17815: LD_INT 44
17817: EQUAL
17818: OR
17819: PUSH
17820: LD_VAR 0 1
17824: PPUSH
17825: CALL_OW 264
17829: PUSH
17830: LD_INT 46
17832: EQUAL
17833: OR
17834: IFFALSE 17883
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17836: LD_INT 21
17838: PPUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 265
17848: PPUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 262
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 263
17868: PPUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 264
17878: PPUSH
17879: CALL_OW 185
// end ;
17883: PPOPN 3
17885: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17886: LD_VAR 0 1
17890: PPUSH
17891: CALL_OW 255
17895: PUSH
17896: LD_INT 3
17898: EQUAL
17899: PUSH
17900: LD_VAR 0 2
17904: PPUSH
17905: CALL_OW 255
17909: PUSH
17910: LD_INT 3
17912: EQUAL
17913: AND
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 302
17924: AND
17925: IFFALSE 17967
// begin ComRepairVehicle ( human , vehicle ) ;
17927: LD_VAR 0 2
17931: PPUSH
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17941: LD_VAR 0 2
17945: PPUSH
17946: LD_VAR 0 1
17950: PPUSH
17951: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17955: LD_VAR 0 1
17959: PPUSH
17960: LD_INT 100
17962: PPUSH
17963: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 255
17976: PUSH
17977: LD_INT 3
17979: EQUAL
17980: PUSH
17981: LD_VAR 0 2
17985: PPUSH
17986: CALL_OW 255
17990: PUSH
17991: LD_INT 3
17993: EQUAL
17994: AND
17995: PUSH
17996: LD_INT 21
17998: PPUSH
17999: CALL_OW 302
18003: AND
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 302
18014: NOT
18015: AND
18016: IFFALSE 18030
// ComEnterUnit ( human , rufab ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: LD_INT 21
18025: PPUSH
18026: CALL_OW 120
// end ;
18030: PPOPN 2
18032: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 21
18040: EQUAL
18041: PUSH
18042: LD_VAR 0 2
18046: PPUSH
18047: CALL_OW 255
18051: PUSH
18052: LD_INT 3
18054: EQUAL
18055: AND
18056: IFFALSE 18070
// SetLives ( human , 1000 ) ;
18058: LD_VAR 0 2
18062: PPUSH
18063: LD_INT 1000
18065: PPUSH
18066: CALL_OW 234
// end ; end_of_file
18070: PPOPN 2
18072: END
// every 0 0$30 trigger cratesStatus = 1 do
18073: LD_EXP 38
18077: PUSH
18078: LD_INT 1
18080: EQUAL
18081: IFFALSE 18164
18083: GO 18085
18085: DISABLE
// begin enable ;
18086: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18087: LD_INT 350
18089: PUSH
18090: LD_INT 1050
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 1
18099: PPUSH
18100: LD_INT 2
18102: PPUSH
18103: CALL_OW 12
18107: ARRAY
18108: PPUSH
18109: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18113: LD_INT 4
18115: PUSH
18116: LD_INT 5
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 1
18125: PPUSH
18126: LD_INT 2
18128: PPUSH
18129: CALL_OW 12
18133: ARRAY
18134: PPUSH
18135: LD_INT 6
18137: PUSH
18138: LD_INT 7
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 1
18147: PPUSH
18148: LD_INT 2
18150: PPUSH
18151: CALL_OW 12
18155: ARRAY
18156: PPUSH
18157: LD_INT 1
18159: PPUSH
18160: CALL_OW 55
// end ;
18164: END
// every 1 1$0 trigger cratesStatus = 2 do
18165: LD_EXP 38
18169: PUSH
18170: LD_INT 2
18172: EQUAL
18173: IFFALSE 18256
18175: GO 18177
18177: DISABLE
// begin enable ;
18178: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18179: LD_INT 3150
18181: PUSH
18182: LD_INT 4550
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: PPUSH
18192: LD_INT 2
18194: PPUSH
18195: CALL_OW 12
18199: ARRAY
18200: PPUSH
18201: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18205: LD_INT 2
18207: PUSH
18208: LD_INT 5
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 1
18217: PPUSH
18218: LD_INT 2
18220: PPUSH
18221: CALL_OW 12
18225: ARRAY
18226: PPUSH
18227: LD_INT 6
18229: PUSH
18230: LD_INT 7
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: PPUSH
18240: LD_INT 2
18242: PPUSH
18243: CALL_OW 12
18247: ARRAY
18248: PPUSH
18249: LD_INT 1
18251: PPUSH
18252: CALL_OW 55
// end ;
18256: END
// every 0 0$30 + 0 0$10 do
18257: GO 18259
18259: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18260: LD_INT 4
18262: PUSH
18263: LD_INT 5
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 1
18272: PPUSH
18273: LD_INT 2
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: PPUSH
18282: LD_INT 7
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL_OW 55
// Wait ( 0 0$15 ) ;
18292: LD_INT 525
18294: PPUSH
18295: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18299: LD_INT 4
18301: PUSH
18302: LD_INT 5
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 2
18314: PPUSH
18315: CALL_OW 12
18319: ARRAY
18320: PPUSH
18321: LD_INT 7
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 55
// Wait ( 0 0$20 ) ;
18331: LD_INT 700
18333: PPUSH
18334: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18338: LD_INT 4
18340: PUSH
18341: LD_INT 5
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_INT 2
18353: PPUSH
18354: CALL_OW 12
18358: ARRAY
18359: PPUSH
18360: LD_INT 7
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 55
// end ; end_of_file
18370: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18371: LD_EXP 24
18375: PUSH
18376: LD_INT 1
18378: EQUAL
18379: IFFALSE 18680
18381: GO 18383
18383: DISABLE
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
18388: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18389: LD_ADDR_VAR 0 2
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 21
18406: PUSH
18407: LD_INT 3
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 2
18416: PUSH
18417: LD_INT 30
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 30
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: PPUSH
18447: CALL_OW 69
18451: ST_TO_ADDR
// for i in tmp do
18452: LD_ADDR_VAR 0 1
18456: PUSH
18457: LD_VAR 0 2
18461: PUSH
18462: FOR_IN
18463: IFFALSE 18496
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_VAR 0 3
18474: PUSH
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 274
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 275
18492: PLUS
18493: ST_TO_ADDR
18494: GO 18462
18496: POP
18497: POP
// strings = [ ] ;
18498: LD_ADDR_EXP 27
18502: PUSH
18503: EMPTY
18504: ST_TO_ADDR
// if tmp = 0 then
18505: LD_VAR 0 2
18509: PUSH
18510: LD_INT 0
18512: EQUAL
18513: IFFALSE 18538
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18515: LD_ADDR_EXP 27
18519: PUSH
18520: LD_EXP 27
18524: PUSH
18525: LD_STRING #Am06-1
18527: PUSH
18528: LD_EXP 25
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: ADD
18537: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18538: LD_VAR 0 2
18542: PUSH
18543: LD_INT 0
18545: GREATER
18546: PUSH
18547: LD_EXP 25
18551: PUSH
18552: LD_VAR 0 3
18556: GREATER
18557: AND
18558: IFFALSE 18589
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18560: LD_ADDR_EXP 27
18564: PUSH
18565: LD_EXP 27
18569: PUSH
18570: LD_STRING #Am06-1
18572: PUSH
18573: LD_EXP 25
18577: PUSH
18578: LD_VAR 0 3
18582: MINUS
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: ADD
18588: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18589: LD_VAR 0 2
18593: PUSH
18594: LD_INT 0
18596: GREATER
18597: PUSH
18598: LD_EXP 25
18602: PUSH
18603: LD_VAR 0 3
18607: LESSEQUAL
18608: AND
18609: IFFALSE 18632
// strings = strings ^ [ #Am06-1 , 0 ] ;
18611: LD_ADDR_EXP 27
18615: PUSH
18616: LD_EXP 27
18620: PUSH
18621: LD_STRING #Am06-1
18623: PUSH
18624: LD_INT 0
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: ADD
18631: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18632: LD_ADDR_EXP 26
18636: PUSH
18637: LD_EXP 26
18641: PUSH
18642: LD_INT 35
18644: MINUS
18645: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18646: LD_ADDR_EXP 27
18650: PUSH
18651: LD_EXP 27
18655: PUSH
18656: LD_STRING #Am06-2
18658: PUSH
18659: LD_EXP 26
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: ADD
18668: ST_TO_ADDR
// display_strings = strings ;
18669: LD_ADDR_OWVAR 47
18673: PUSH
18674: LD_EXP 27
18678: ST_TO_ADDR
// enable ;
18679: ENABLE
// end ; end_of_file
18680: PPOPN 3
18682: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
18683: LD_INT 0
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
// j = 0 ;
18692: LD_ADDR_VAR 0 3
18696: PUSH
18697: LD_INT 0
18699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18700: LD_INT 35
18702: PPUSH
18703: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
18707: LD_ADDR_VAR 0 2
18711: PUSH
18712: LD_INT 22
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 21
18724: PUSH
18725: LD_INT 1
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: LD_INT 25
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 25
18747: PUSH
18748: LD_INT 2
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 25
18757: PUSH
18758: LD_INT 3
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 25
18767: PUSH
18768: LD_INT 4
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: PUSH
18792: FOR_IN
18793: IFFALSE 18899
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18795: LD_INT 22
18797: PUSH
18798: LD_INT 3
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 21
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 21
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 21
18830: PUSH
18831: LD_INT 3
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 59
18840: PUSH
18841: EMPTY
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 91
18853: PUSH
18854: LD_VAR 0 2
18858: PUSH
18859: LD_INT 25
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PPUSH
18872: CALL_OW 69
18876: NOT
18877: IFFALSE 18897
// begin tmp = i ;
18879: LD_ADDR_VAR 0 4
18883: PUSH
18884: LD_VAR 0 2
18888: ST_TO_ADDR
// j = 1 ;
18889: LD_ADDR_VAR 0 3
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// end ; end ;
18897: GO 18792
18899: POP
18900: POP
// until j = 1 ;
18901: LD_VAR 0 3
18905: PUSH
18906: LD_INT 1
18908: EQUAL
18909: IFFALSE 18700
// blockSpawn = 1 ;
18911: LD_ADDR_EXP 29
18915: PUSH
18916: LD_INT 1
18918: ST_TO_ADDR
// uc_side = 2 ;
18919: LD_ADDR_OWVAR 20
18923: PUSH
18924: LD_INT 2
18926: ST_TO_ADDR
// uc_nation = 2 ;
18927: LD_ADDR_OWVAR 21
18931: PUSH
18932: LD_INT 2
18934: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18935: LD_ADDR_EXP 19
18939: PUSH
18940: LD_STRING Kurt
18942: PPUSH
18943: LD_INT 0
18945: PPUSH
18946: CALL 5567 0 2
18950: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18951: LD_EXP 19
18955: PPUSH
18956: LD_VAR 0 4
18960: PPUSH
18961: CALL_OW 250
18965: PPUSH
18966: LD_VAR 0 4
18970: PPUSH
18971: CALL_OW 251
18975: PPUSH
18976: LD_INT 5
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: CALL_OW 50
// InGameOn ;
18986: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18990: LD_EXP 19
18994: PPUSH
18995: CALL_OW 87
// wait ( 0 0$2 ) ;
18999: LD_INT 70
19001: PPUSH
19002: CALL_OW 67
// ComExitVehicle ( tmp ) ;
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 121
// ComExitBuilding ( tmp ) ;
19015: LD_VAR 0 4
19019: PPUSH
19020: CALL_OW 122
// wait ( 0 0$1 ) ;
19024: LD_INT 35
19026: PPUSH
19027: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19031: LD_EXP 19
19035: PPUSH
19036: LD_VAR 0 4
19040: PPUSH
19041: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
19045: LD_VAR 0 4
19049: PPUSH
19050: LD_EXP 19
19054: PPUSH
19055: CALL_OW 119
// DialogueOn ;
19059: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19063: LD_EXP 19
19067: PPUSH
19068: LD_STRING D2-Kurt-1
19070: PPUSH
19071: CALL_OW 88
// if tmp = JMM then
19075: LD_VAR 0 4
19079: PUSH
19080: LD_EXP 1
19084: EQUAL
19085: IFFALSE 19177
// begin Say ( JMM , D2-JMM-1 ) ;
19087: LD_EXP 1
19091: PPUSH
19092: LD_STRING D2-JMM-1
19094: PPUSH
19095: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19099: LD_EXP 19
19103: PPUSH
19104: LD_STRING D2-Kurt-2
19106: PPUSH
19107: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19111: LD_EXP 1
19115: PPUSH
19116: LD_STRING D2-JMM-2
19118: PPUSH
19119: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19123: LD_EXP 19
19127: PPUSH
19128: LD_STRING D2-Kurt-3
19130: PPUSH
19131: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19135: LD_EXP 1
19139: PPUSH
19140: LD_STRING D2-JMM-3
19142: PPUSH
19143: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19147: LD_EXP 19
19151: PPUSH
19152: LD_STRING D2-Kurt-4
19154: PPUSH
19155: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19159: LD_EXP 1
19163: PPUSH
19164: LD_STRING D2-JMM-4
19166: PPUSH
19167: CALL_OW 88
// DialogueOff ;
19171: CALL_OW 7
// end else
19175: GO 19487
// begin if GetSex ( tmp ) = 1 then
19177: LD_VAR 0 4
19181: PPUSH
19182: CALL_OW 258
19186: PUSH
19187: LD_INT 1
19189: EQUAL
19190: IFFALSE 19204
// Say ( tmp , D2-Sol1-1 ) ;
19192: LD_VAR 0 4
19196: PPUSH
19197: LD_STRING D2-Sol1-1
19199: PPUSH
19200: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19204: LD_VAR 0 4
19208: PPUSH
19209: CALL_OW 258
19213: PUSH
19214: LD_INT 2
19216: EQUAL
19217: IFFALSE 19231
// Say ( tmp , D2-FSol1-1 ) ;
19219: LD_VAR 0 4
19223: PPUSH
19224: LD_STRING D2-FSol1-1
19226: PPUSH
19227: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19231: LD_EXP 19
19235: PPUSH
19236: LD_STRING D2-Kurt-2
19238: PPUSH
19239: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19243: LD_VAR 0 4
19247: PPUSH
19248: CALL_OW 258
19252: PUSH
19253: LD_INT 1
19255: EQUAL
19256: IFFALSE 19270
// Say ( tmp , D2-Sol1-2 ) ;
19258: LD_VAR 0 4
19262: PPUSH
19263: LD_STRING D2-Sol1-2
19265: PPUSH
19266: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19270: LD_VAR 0 4
19274: PPUSH
19275: CALL_OW 258
19279: PUSH
19280: LD_INT 2
19282: EQUAL
19283: IFFALSE 19297
// Say ( tmp , D2-FSol1-2 ) ;
19285: LD_VAR 0 4
19289: PPUSH
19290: LD_STRING D2-FSol1-2
19292: PPUSH
19293: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19297: LD_EXP 19
19301: PPUSH
19302: LD_STRING D2-Kurt-3
19304: PPUSH
19305: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19309: LD_VAR 0 4
19313: PPUSH
19314: CALL_OW 258
19318: PUSH
19319: LD_INT 1
19321: EQUAL
19322: IFFALSE 19336
// Say ( tmp , D2-Sol1-3 ) ;
19324: LD_VAR 0 4
19328: PPUSH
19329: LD_STRING D2-Sol1-3
19331: PPUSH
19332: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19336: LD_VAR 0 4
19340: PPUSH
19341: CALL_OW 258
19345: PUSH
19346: LD_INT 2
19348: EQUAL
19349: IFFALSE 19363
// Say ( tmp , D2-FSol1-3 ) ;
19351: LD_VAR 0 4
19355: PPUSH
19356: LD_STRING D2-FSol1-3
19358: PPUSH
19359: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19363: LD_EXP 19
19367: PPUSH
19368: LD_STRING D2-Kurt-4
19370: PPUSH
19371: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19375: LD_VAR 0 4
19379: PPUSH
19380: CALL_OW 258
19384: PUSH
19385: LD_INT 1
19387: EQUAL
19388: IFFALSE 19402
// Say ( tmp , D2-Sol1-4 ) ;
19390: LD_VAR 0 4
19394: PPUSH
19395: LD_STRING D2-Sol1-4
19397: PPUSH
19398: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19402: LD_VAR 0 4
19406: PPUSH
19407: CALL_OW 258
19411: PUSH
19412: LD_INT 2
19414: EQUAL
19415: IFFALSE 19429
// Say ( tmp , D2-FSol1-4 ) ;
19417: LD_VAR 0 4
19421: PPUSH
19422: LD_STRING D2-FSol1-4
19424: PPUSH
19425: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19429: LD_VAR 0 4
19433: PPUSH
19434: CALL_OW 258
19438: PUSH
19439: LD_INT 1
19441: EQUAL
19442: IFFALSE 19456
// Say ( tmp , D2-Sol1-5 ) ;
19444: LD_VAR 0 4
19448: PPUSH
19449: LD_STRING D2-Sol1-5
19451: PPUSH
19452: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19456: LD_VAR 0 4
19460: PPUSH
19461: CALL_OW 258
19465: PUSH
19466: LD_INT 2
19468: EQUAL
19469: IFFALSE 19483
// Say ( tmp , D2-FSol1-5 ) ;
19471: LD_VAR 0 4
19475: PPUSH
19476: LD_STRING D2-FSol1-5
19478: PPUSH
19479: CALL_OW 88
// DialogueOff ;
19483: CALL_OW 7
// end ; dec = ShowQuery1 ;
19487: LD_ADDR_VAR 0 6
19491: PUSH
19492: CALL 6169 0 0
19496: ST_TO_ADDR
// if dec = 1 then
19497: LD_VAR 0 6
19501: PUSH
19502: LD_INT 1
19504: EQUAL
19505: IFFALSE 19547
// begin DialogueOn ;
19507: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19511: LD_EXP 19
19515: PPUSH
19516: LD_STRING D2a-Kurt-1
19518: PPUSH
19519: CALL_OW 88
// DialogueOff ;
19523: CALL_OW 7
// InGameOff ;
19527: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19531: LD_INT 1
19533: PPUSH
19534: LD_INT 2
19536: PPUSH
19537: LD_INT 2
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 80
// end ; if dec = 2 then
19547: LD_VAR 0 6
19551: PUSH
19552: LD_INT 2
19554: EQUAL
19555: IFFALSE 20055
// begin DialogueOn ;
19557: CALL_OW 6
// if tmp = JMM then
19561: LD_VAR 0 4
19565: PUSH
19566: LD_EXP 1
19570: EQUAL
19571: IFFALSE 19627
// begin Say ( JMM , D2b-JMM-1 ) ;
19573: LD_EXP 1
19577: PPUSH
19578: LD_STRING D2b-JMM-1
19580: PPUSH
19581: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19585: LD_EXP 19
19589: PPUSH
19590: LD_STRING D2b-Kurt-1
19592: PPUSH
19593: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
19597: LD_EXP 1
19601: PPUSH
19602: LD_STRING D2b-JMM-2
19604: PPUSH
19605: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19609: LD_EXP 19
19613: PPUSH
19614: LD_STRING D2b-Kurt-2
19616: PPUSH
19617: CALL_OW 88
// DialogueOff ;
19621: CALL_OW 7
// end else
19625: GO 19817
// begin if GetSex ( tmp ) = 1 then
19627: LD_VAR 0 4
19631: PPUSH
19632: CALL_OW 258
19636: PUSH
19637: LD_INT 1
19639: EQUAL
19640: IFFALSE 19654
// Say ( tmp , D2b-Sol1-1 ) ;
19642: LD_VAR 0 4
19646: PPUSH
19647: LD_STRING D2b-Sol1-1
19649: PPUSH
19650: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19654: LD_VAR 0 4
19658: PPUSH
19659: CALL_OW 258
19663: PUSH
19664: LD_INT 2
19666: EQUAL
19667: IFFALSE 19681
// Say ( tmp , D2b-FSol1-1 ) ;
19669: LD_VAR 0 4
19673: PPUSH
19674: LD_STRING D2b-FSol1-1
19676: PPUSH
19677: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19681: LD_EXP 19
19685: PPUSH
19686: LD_STRING D2b-Kurt-1
19688: PPUSH
19689: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19693: LD_VAR 0 4
19697: PPUSH
19698: CALL_OW 258
19702: PUSH
19703: LD_INT 1
19705: EQUAL
19706: IFFALSE 19720
// Say ( tmp , D2b-Sol1-2 ) ;
19708: LD_VAR 0 4
19712: PPUSH
19713: LD_STRING D2b-Sol1-2
19715: PPUSH
19716: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19720: LD_VAR 0 4
19724: PPUSH
19725: CALL_OW 258
19729: PUSH
19730: LD_INT 2
19732: EQUAL
19733: IFFALSE 19747
// Say ( tmp , D2b-FSol1-2 ) ;
19735: LD_VAR 0 4
19739: PPUSH
19740: LD_STRING D2b-FSol1-2
19742: PPUSH
19743: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19747: LD_EXP 19
19751: PPUSH
19752: LD_STRING D2b-Kurt-2
19754: PPUSH
19755: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19759: LD_VAR 0 4
19763: PPUSH
19764: CALL_OW 258
19768: PUSH
19769: LD_INT 1
19771: EQUAL
19772: IFFALSE 19786
// Say ( tmp , D2c-Sol1-2 ) ;
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_STRING D2c-Sol1-2
19781: PPUSH
19782: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19786: LD_VAR 0 4
19790: PPUSH
19791: CALL_OW 258
19795: PUSH
19796: LD_INT 2
19798: EQUAL
19799: IFFALSE 19813
// Say ( tmp , D2c-FSol1-2 ) ;
19801: LD_VAR 0 4
19805: PPUSH
19806: LD_STRING D2c-FSol1-2
19808: PPUSH
19809: CALL_OW 88
// DialogueOff ;
19813: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19817: LD_ADDR_VAR 0 7
19821: PUSH
19822: CALL 6243 0 0
19826: ST_TO_ADDR
// if dec2 = 1 then
19827: LD_VAR 0 7
19831: PUSH
19832: LD_INT 1
19834: EQUAL
19835: IFFALSE 19877
// begin DialogueOn ;
19837: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19841: LD_EXP 19
19845: PPUSH
19846: LD_STRING D2a-Kurt-1
19848: PPUSH
19849: CALL_OW 88
// DialogueOff ;
19853: CALL_OW 7
// InGameOff ;
19857: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19861: LD_INT 1
19863: PPUSH
19864: LD_INT 2
19866: PPUSH
19867: LD_INT 2
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 80
// end ; if dec2 = 2 then
19877: LD_VAR 0 7
19881: PUSH
19882: LD_INT 2
19884: EQUAL
19885: IFFALSE 20055
// begin if tmp = JMM then
19887: LD_VAR 0 4
19891: PUSH
19892: LD_EXP 1
19896: EQUAL
19897: IFFALSE 19957
// begin DialogueOn ;
19899: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19903: LD_EXP 1
19907: PPUSH
19908: LD_STRING D2c-JMM-1
19910: PPUSH
19911: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19915: LD_EXP 19
19919: PPUSH
19920: LD_STRING D2c-Kurt-1
19922: PPUSH
19923: CALL_OW 88
// DialogueOff ;
19927: CALL_OW 7
// InGameOff ;
19931: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19935: LD_EXP 19
19939: PPUSH
19940: LD_INT 8
19942: PPUSH
19943: CALL_OW 113
// readyToEscape = 1 ;
19947: LD_ADDR_EXP 21
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// end else
19955: GO 20055
// begin DialogueOn ;
19957: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19961: LD_VAR 0 4
19965: PPUSH
19966: CALL_OW 258
19970: PUSH
19971: LD_INT 1
19973: EQUAL
19974: IFFALSE 19988
// Say ( tmp , D2c-Sol1-1 ) ;
19976: LD_VAR 0 4
19980: PPUSH
19981: LD_STRING D2c-Sol1-1
19983: PPUSH
19984: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19988: LD_VAR 0 4
19992: PPUSH
19993: CALL_OW 258
19997: PUSH
19998: LD_INT 2
20000: EQUAL
20001: IFFALSE 20015
// Say ( tmp , D2c-FSol1-1 ) ;
20003: LD_VAR 0 4
20007: PPUSH
20008: LD_STRING D2c-FSol1-1
20010: PPUSH
20011: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20015: LD_EXP 19
20019: PPUSH
20020: LD_STRING D2c-Kurt-1
20022: PPUSH
20023: CALL_OW 88
// DialogueOff ;
20027: CALL_OW 7
// InGameOff ;
20031: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20035: LD_EXP 19
20039: PPUSH
20040: LD_INT 8
20042: PPUSH
20043: CALL_OW 113
// readyToEscape = 1 ;
20047: LD_ADDR_EXP 21
20051: PUSH
20052: LD_INT 1
20054: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20055: LD_VAR 0 6
20059: PUSH
20060: LD_INT 3
20062: EQUAL
20063: IFFALSE 20237
// begin DialogueOn ;
20065: CALL_OW 6
// if tmp = JMM then
20069: LD_VAR 0 4
20073: PUSH
20074: LD_EXP 1
20078: EQUAL
20079: IFFALSE 20139
// begin DialogueOn ;
20081: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20085: LD_EXP 1
20089: PPUSH
20090: LD_STRING D2c-JMM-1
20092: PPUSH
20093: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20097: LD_EXP 19
20101: PPUSH
20102: LD_STRING D2c-Kurt-1
20104: PPUSH
20105: CALL_OW 88
// DialogueOff ;
20109: CALL_OW 7
// InGameOff ;
20113: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20117: LD_EXP 19
20121: PPUSH
20122: LD_INT 8
20124: PPUSH
20125: CALL_OW 113
// readyToEscape = 1 ;
20129: LD_ADDR_EXP 21
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// end else
20137: GO 20237
// begin DialogueOn ;
20139: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20143: LD_VAR 0 4
20147: PPUSH
20148: CALL_OW 258
20152: PUSH
20153: LD_INT 1
20155: EQUAL
20156: IFFALSE 20170
// Say ( tmp , D2c-Sol1-1 ) ;
20158: LD_VAR 0 4
20162: PPUSH
20163: LD_STRING D2c-Sol1-1
20165: PPUSH
20166: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20170: LD_VAR 0 4
20174: PPUSH
20175: CALL_OW 258
20179: PUSH
20180: LD_INT 2
20182: EQUAL
20183: IFFALSE 20197
// Say ( tmp , D2c-FSol1-1 ) ;
20185: LD_VAR 0 4
20189: PPUSH
20190: LD_STRING D2c-FSol1-1
20192: PPUSH
20193: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20197: LD_EXP 19
20201: PPUSH
20202: LD_STRING D2c-Kurt-1
20204: PPUSH
20205: CALL_OW 88
// DialogueOff ;
20209: CALL_OW 7
// InGameOff ;
20213: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20217: LD_EXP 19
20221: PPUSH
20222: LD_INT 8
20224: PPUSH
20225: CALL_OW 113
// readyToEscape = 1 ;
20229: LD_ADDR_EXP 21
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20237: LD_ADDR_EXP 29
20241: PUSH
20242: LD_INT 0
20244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20245: LD_INT 35
20247: PPUSH
20248: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20252: LD_EXP 19
20256: PPUSH
20257: LD_INT 8
20259: PPUSH
20260: CALL_OW 308
20264: PUSH
20265: LD_EXP 21
20269: AND
20270: PUSH
20271: LD_EXP 19
20275: PPUSH
20276: CALL_OW 301
20280: OR
20281: IFFALSE 20245
// if IsDead ( Kurt ) then
20283: LD_EXP 19
20287: PPUSH
20288: CALL_OW 301
20292: IFFALSE 20296
// exit ;
20294: GO 20365
// RemoveUnit ( Kurt ) ;
20296: LD_EXP 19
20300: PPUSH
20301: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20305: LD_EXP 19
20309: PPUSH
20310: LD_STRING Kurt
20312: PPUSH
20313: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20317: LD_INT 1
20319: PPUSH
20320: LD_INT 2
20322: PPUSH
20323: CALL_OW 81
20327: PUSH
20328: LD_INT 0
20330: EQUAL
20331: IFFALSE 20341
// KurtStatus = 1 ;
20333: LD_ADDR_EXP 20
20337: PUSH
20338: LD_INT 1
20340: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20341: LD_INT 1
20343: PPUSH
20344: LD_INT 2
20346: PPUSH
20347: CALL_OW 81
20351: PUSH
20352: LD_INT 2
20354: EQUAL
20355: IFFALSE 20365
// KurtStatus = 2 ;
20357: LD_ADDR_EXP 20
20361: PUSH
20362: LD_INT 2
20364: ST_TO_ADDR
// end ; end_of_file
20365: LD_VAR 0 1
20369: RET
// every 0 0$1 do
20370: GO 20372
20372: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20373: LD_INT 3
20375: PPUSH
20376: LD_INT 32
20378: PPUSH
20379: LD_INT 3
20381: PPUSH
20382: CALL 6298 0 3
20386: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20387: GO 20389
20389: DISABLE
20390: LD_INT 0
20392: PPUSH
// begin enemyWayX = [ ] ;
20393: LD_ADDR_EXP 46
20397: PUSH
20398: EMPTY
20399: ST_TO_ADDR
// enemyWayY = [ ] ;
20400: LD_ADDR_EXP 47
20404: PUSH
20405: EMPTY
20406: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20407: LD_ADDR_VAR 0 1
20411: PUSH
20412: LD_INT 1
20414: PPUSH
20415: LD_INT 2
20417: PPUSH
20418: CALL_OW 12
20422: ST_TO_ADDR
// if rnd = 1 then
20423: LD_VAR 0 1
20427: PUSH
20428: LD_INT 1
20430: EQUAL
20431: IFFALSE 20471
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20433: LD_ADDR_EXP 46
20437: PUSH
20438: LD_INT 93
20440: PUSH
20441: LD_INT 84
20443: PUSH
20444: LD_INT 104
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: LIST
20451: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20452: LD_ADDR_EXP 47
20456: PUSH
20457: LD_INT 51
20459: PUSH
20460: LD_INT 35
20462: PUSH
20463: LD_INT 28
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: ST_TO_ADDR
// end ; if rnd = 2 then
20471: LD_VAR 0 1
20475: PUSH
20476: LD_INT 2
20478: EQUAL
20479: IFFALSE 20535
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20481: LD_ADDR_EXP 46
20485: PUSH
20486: LD_INT 93
20488: PUSH
20489: LD_INT 52
20491: PUSH
20492: LD_INT 34
20494: PUSH
20495: LD_INT 28
20497: PUSH
20498: LD_INT 30
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20508: LD_ADDR_EXP 47
20512: PUSH
20513: LD_INT 51
20515: PUSH
20516: LD_INT 45
20518: PUSH
20519: LD_INT 35
20521: PUSH
20522: LD_INT 26
20524: PUSH
20525: LD_INT 20
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: ST_TO_ADDR
// end ; enable ;
20535: ENABLE
// end ;
20536: PPOPN 1
20538: END
// every 0 0$1 do
20539: GO 20541
20541: DISABLE
// begin enable ;
20542: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20543: LD_INT 3
20545: PPUSH
20546: LD_INT 2
20548: PPUSH
20549: LD_INT 10
20551: PPUSH
20552: LD_EXP 31
20556: PPUSH
20557: CALL 7733 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20561: LD_INT 3
20563: PPUSH
20564: LD_INT 12
20566: PPUSH
20567: LD_EXP 31
20571: PPUSH
20572: CALL 9618 0 3
// if disableHealAI = 0 then
20576: LD_EXP 33
20580: PUSH
20581: LD_INT 0
20583: EQUAL
20584: IFFALSE 20605
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20586: LD_INT 3
20588: PPUSH
20589: LD_INT 9
20591: PPUSH
20592: LD_INT 10
20594: PPUSH
20595: LD_INT 32
20597: PUSH
20598: EMPTY
20599: LIST
20600: PPUSH
20601: CALL 8124 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20605: LD_INT 3
20607: PPUSH
20608: LD_INT 51
20610: PPUSH
20611: LD_INT 6
20613: PPUSH
20614: CALL 8832 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20618: LD_INT 3
20620: PPUSH
20621: LD_INT 12
20623: PPUSH
20624: LD_INT 121
20626: PPUSH
20627: LD_INT 100
20629: PPUSH
20630: CALL 6693 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20634: LD_INT 3
20636: PPUSH
20637: LD_INT 22
20639: PPUSH
20640: LD_EXP 46
20644: PPUSH
20645: LD_EXP 47
20649: PPUSH
20650: CALL 6896 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20654: LD_INT 3
20656: PPUSH
20657: LD_INT 10
20659: PPUSH
20660: CALL 8975 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20664: LD_INT 3
20666: PPUSH
20667: LD_INT 1
20669: PPUSH
20670: CALL 9388 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20674: LD_INT 2
20676: PPUSH
20677: CALL_OW 303
20681: PUSH
20682: LD_INT 2
20684: PPUSH
20685: CALL_OW 255
20689: PUSH
20690: LD_INT 1
20692: EQUAL
20693: OR
20694: IFFALSE 20706
// DefendDepot ( 3 , rudepo ) ;
20696: LD_INT 3
20698: PPUSH
20699: LD_INT 2
20701: PPUSH
20702: CALL 8668 0 2
// end ;
20706: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20707: LD_INT 22
20709: PUSH
20710: LD_INT 3
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: PUSH
20717: LD_INT 21
20719: PUSH
20720: LD_INT 2
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 55
20729: PUSH
20730: EMPTY
20731: LIST
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: LD_INT 34
20738: PUSH
20739: LD_INT 51
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: PPUSH
20756: CALL_OW 69
20760: PUSH
20761: LD_INT 0
20763: EQUAL
20764: PUSH
20765: LD_INT 21
20767: PPUSH
20768: CALL_OW 255
20772: PUSH
20773: LD_INT 3
20775: EQUAL
20776: AND
20777: PUSH
20778: LD_INT 21
20780: PPUSH
20781: CALL_OW 302
20785: AND
20786: PUSH
20787: LD_INT 2
20789: PPUSH
20790: CALL_OW 255
20794: PUSH
20795: LD_INT 3
20797: EQUAL
20798: AND
20799: PUSH
20800: LD_INT 2
20802: PPUSH
20803: CALL_OW 302
20807: AND
20808: IFFALSE 20992
20810: GO 20812
20812: DISABLE
// begin enable ;
20813: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20814: LD_INT 2
20816: PPUSH
20817: CALL_OW 274
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: LD_INT 1000
20827: PPUSH
20828: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20832: LD_INT 3
20834: PPUSH
20835: LD_INT 21
20837: PPUSH
20838: LD_INT 5
20840: PUSH
20841: LD_INT 6
20843: PUSH
20844: LD_INT 6
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: LD_OWVAR 67
20856: ARRAY
20857: PPUSH
20858: LD_INT 43
20860: PUSH
20861: LD_INT 43
20863: PUSH
20864: LD_INT 44
20866: PUSH
20867: LD_INT 44
20869: PUSH
20870: LD_INT 46
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 43
20882: PUSH
20883: LD_INT 43
20885: PUSH
20886: LD_INT 43
20888: PUSH
20889: LD_INT 44
20891: PUSH
20892: LD_INT 44
20894: PUSH
20895: LD_INT 46
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: LD_INT 43
20911: PUSH
20912: LD_INT 43
20914: PUSH
20915: LD_INT 44
20917: PUSH
20918: LD_INT 44
20920: PUSH
20921: LD_INT 46
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: PUSH
20937: LD_OWVAR 67
20941: ARRAY
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: LD_INT 1
20948: PPUSH
20949: LD_INT 22
20951: PUSH
20952: LD_INT 22
20954: PUSH
20955: LD_INT 24
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 1
20964: PPUSH
20965: LD_INT 2
20967: PPUSH
20968: CALL_OW 12
20972: ARRAY
20973: PUSH
20974: LD_INT 24
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: LIST
20981: PUSH
20982: LD_OWVAR 67
20986: ARRAY
20987: PPUSH
20988: CALL 6539 0 7
// end ;
20992: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20993: LD_INT 17
20995: PPUSH
20996: CALL_OW 255
21000: PUSH
21001: LD_INT 3
21003: EQUAL
21004: PUSH
21005: LD_INT 17
21007: PPUSH
21008: CALL_OW 302
21012: AND
21013: PUSH
21014: LD_INT 2
21016: PPUSH
21017: CALL_OW 255
21021: PUSH
21022: LD_INT 3
21024: EQUAL
21025: AND
21026: PUSH
21027: LD_INT 2
21029: PPUSH
21030: CALL_OW 302
21034: AND
21035: IFFALSE 21102
21037: GO 21039
21039: DISABLE
// begin enable ;
21040: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21041: LD_INT 17
21043: PPUSH
21044: LD_INT 22
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_INT 42
21055: PUSH
21056: LD_INT 43
21058: PUSH
21059: LD_INT 44
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PPUSH
21070: LD_INT 3
21072: PPUSH
21073: CALL_OW 12
21077: ARRAY
21078: PPUSH
21079: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21083: LD_INT 17
21085: PPUSH
21086: LD_INT 22
21088: PPUSH
21089: LD_INT 1
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: LD_INT 51
21097: PPUSH
21098: CALL_OW 185
// end ;
21102: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21103: LD_INT 17
21105: PPUSH
21106: CALL_OW 302
21110: PUSH
21111: LD_INT 17
21113: PPUSH
21114: CALL_OW 255
21118: PUSH
21119: LD_INT 3
21121: EQUAL
21122: AND
21123: PUSH
21124: LD_INT 2
21126: PPUSH
21127: CALL_OW 302
21131: AND
21132: PUSH
21133: LD_INT 2
21135: PPUSH
21136: CALL_OW 255
21140: PUSH
21141: LD_INT 3
21143: EQUAL
21144: AND
21145: PUSH
21146: LD_INT 17
21148: PPUSH
21149: CALL_OW 313
21153: NOT
21154: AND
21155: IFFALSE 21249
21157: GO 21159
21159: DISABLE
21160: LD_INT 0
21162: PPUSH
// begin for i = 1 to 6 do
21163: LD_ADDR_VAR 0 1
21167: PUSH
21168: DOUBLE
21169: LD_INT 1
21171: DEC
21172: ST_TO_ADDR
21173: LD_INT 6
21175: PUSH
21176: FOR_TO
21177: IFFALSE 21247
// begin uc_side = 3 ;
21179: LD_ADDR_OWVAR 20
21183: PUSH
21184: LD_INT 3
21186: ST_TO_ADDR
// uc_nation = 3 ;
21187: LD_ADDR_OWVAR 21
21191: PUSH
21192: LD_INT 3
21194: ST_TO_ADDR
// hc_gallery :=  ;
21195: LD_ADDR_OWVAR 33
21199: PUSH
21200: LD_STRING 
21202: ST_TO_ADDR
// hc_name :=  ;
21203: LD_ADDR_OWVAR 26
21207: PUSH
21208: LD_STRING 
21210: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21211: LD_INT 0
21213: PPUSH
21214: LD_EXP 34
21218: PPUSH
21219: LD_EXP 35
21223: PPUSH
21224: CALL_OW 12
21228: PPUSH
21229: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21233: CALL_OW 44
21237: PPUSH
21238: LD_INT 17
21240: PPUSH
21241: CALL_OW 52
// end ;
21245: GO 21176
21247: POP
21248: POP
// end ;
21249: PPOPN 1
21251: END
// every 2 2$0 do var i , j ;
21252: GO 21254
21254: DISABLE
21255: LD_INT 0
21257: PPUSH
21258: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21259: LD_INT 14700
21261: PUSH
21262: LD_INT 33600
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 1
21271: PPUSH
21272: LD_INT 2
21274: PPUSH
21275: CALL_OW 12
21279: ARRAY
21280: PPUSH
21281: CALL_OW 67
// disableHealAI = 1 ;
21285: LD_ADDR_EXP 33
21289: PUSH
21290: LD_INT 1
21292: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21293: LD_ADDR_VAR 0 1
21297: PUSH
21298: LD_INT 22
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 4
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: PUSH
21327: FOR_IN
21328: IFFALSE 21341
// ComExitBuilding ( i ) ;
21330: LD_VAR 0 1
21334: PPUSH
21335: CALL_OW 122
21339: GO 21327
21341: POP
21342: POP
// wait ( 0 0$1 ) ;
21343: LD_INT 35
21345: PPUSH
21346: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21350: LD_INT 35
21352: PPUSH
21353: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21357: LD_ADDR_VAR 0 1
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 3
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 25
21374: PUSH
21375: LD_INT 4
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PPUSH
21386: CALL_OW 69
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21469
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_INT 17
21401: PPUSH
21402: LD_INT 22
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 25
21414: PUSH
21415: LD_INT 12
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PPUSH
21426: CALL_OW 70
21430: PUSH
21431: FOR_IN
21432: IFFALSE 21465
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21434: LD_VAR 0 1
21438: PPUSH
21439: LD_VAR 0 2
21443: PPUSH
21444: CALL_OW 250
21448: PPUSH
21449: LD_VAR 0 2
21453: PPUSH
21454: CALL_OW 251
21458: PPUSH
21459: CALL_OW 191
// end ;
21463: GO 21431
21465: POP
21466: POP
// end ;
21467: GO 21391
21469: POP
21470: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21471: LD_INT 22
21473: PUSH
21474: LD_INT 3
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 25
21483: PUSH
21484: LD_INT 4
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PPUSH
21495: CALL_OW 69
21499: PUSH
21500: LD_INT 0
21502: EQUAL
21503: PUSH
21504: LD_EXP 32
21508: PUSH
21509: LD_INT 6
21511: PUSH
21512: LD_INT 7
21514: PUSH
21515: LD_INT 8
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: LD_OWVAR 67
21527: ARRAY
21528: GREATEREQUAL
21529: OR
21530: PUSH
21531: LD_INT 17
21533: PPUSH
21534: LD_INT 22
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 25
21546: PUSH
21547: LD_INT 12
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 70
21562: PUSH
21563: LD_INT 0
21565: EQUAL
21566: OR
21567: IFFALSE 21350
// disableHealAI = 0 ;
21569: LD_ADDR_EXP 33
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21577: LD_ADDR_VAR 0 1
21581: PUSH
21582: LD_INT 22
21584: PUSH
21585: LD_INT 3
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 12
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PPUSH
21606: CALL_OW 69
21610: PUSH
21611: FOR_IN
21612: IFFALSE 21628
// SetClass ( i , 16 ) ;
21614: LD_VAR 0 1
21618: PPUSH
21619: LD_INT 16
21621: PPUSH
21622: CALL_OW 336
21626: GO 21611
21628: POP
21629: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21630: LD_ADDR_VAR 0 1
21634: PUSH
21635: LD_INT 22
21637: PUSH
21638: LD_INT 3
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 25
21647: PUSH
21648: LD_INT 4
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PPUSH
21659: CALL_OW 69
21663: PUSH
21664: FOR_IN
21665: IFFALSE 21684
// ComMoveXY ( i , 113 , 94 ) ;
21667: LD_VAR 0 1
21671: PPUSH
21672: LD_INT 113
21674: PPUSH
21675: LD_INT 94
21677: PPUSH
21678: CALL_OW 111
21682: GO 21664
21684: POP
21685: POP
// end ;
21686: PPOPN 2
21688: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21689: LD_INT 21
21691: PPUSH
21692: CALL_OW 255
21696: PUSH
21697: LD_INT 3
21699: EQUAL
21700: PUSH
21701: LD_INT 21
21703: PPUSH
21704: CALL_OW 302
21708: AND
21709: PUSH
21710: LD_INT 22
21712: PUSH
21713: LD_INT 3
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 34
21722: PUSH
21723: LD_INT 51
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 69
21738: PUSH
21739: LD_INT 0
21741: EQUAL
21742: AND
21743: IFFALSE 21775
21745: GO 21747
21747: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
21748: LD_INT 21
21750: PPUSH
21751: LD_INT 23
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: LD_INT 51
21762: PPUSH
21763: CALL_OW 185
// wait ( 5 5$0 ) ;
21767: LD_INT 10500
21769: PPUSH
21770: CALL_OW 67
// enable ;
21774: ENABLE
// end ; end_of_file
21775: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21776: LD_EXP 26
21780: PUSH
21781: LD_INT 0
21783: LESSEQUAL
21784: IFFALSE 21933
21786: GO 21788
21788: DISABLE
21789: LD_INT 0
21791: PPUSH
21792: PPUSH
21793: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: LD_INT 22
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 3
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: PUSH
21822: LD_INT 30
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 30
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: PPUSH
21852: CALL_OW 69
21856: ST_TO_ADDR
// for i in tmp do
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_VAR 0 2
21866: PUSH
21867: FOR_IN
21868: IFFALSE 21901
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21870: LD_ADDR_VAR 0 3
21874: PUSH
21875: LD_VAR 0 3
21879: PUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 274
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 275
21897: PLUS
21898: ST_TO_ADDR
21899: GO 21867
21901: POP
21902: POP
// if yourCrates >= needCrates then
21903: LD_VAR 0 3
21907: PUSH
21908: LD_EXP 25
21912: GREATEREQUAL
21913: IFFALSE 21926
// begin FinishMission ( yourCrates ) ;
21915: LD_VAR 0 3
21919: PPUSH
21920: CALL 21936 0 1
// end else
21924: GO 21933
// begin YouLost ( matmin ) ;
21926: LD_STRING matmin
21928: PPUSH
21929: CALL_OW 104
// end ; end ;
21933: PPOPN 3
21935: END
// export function FinishMission ( crates ) ; begin
21936: LD_INT 0
21938: PPUSH
// if crates + 100 > crates then
21939: LD_VAR 0 1
21943: PUSH
21944: LD_INT 100
21946: PLUS
21947: PUSH
21948: LD_VAR 0 1
21952: GREATER
21953: IFFALSE 21977
// begin AddMedal ( cans , 1 ) ;
21955: LD_STRING cans
21957: PPUSH
21958: LD_INT 1
21960: PPUSH
21961: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21965: LD_INT 1
21967: PPUSH
21968: LD_STRING 06_crates_1
21970: PPUSH
21971: CALL_OW 39
// end else
21975: GO 21998
// begin AddMedal ( cans , - 1 ) ;
21977: LD_STRING cans
21979: PPUSH
21980: LD_INT 1
21982: NEG
21983: PPUSH
21984: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21988: LD_INT 0
21990: PPUSH
21991: LD_STRING 06_crates_1
21993: PPUSH
21994: CALL_OW 39
// end ; if unitLost < 3 then
21998: LD_EXP 30
22002: PUSH
22003: LD_INT 3
22005: LESS
22006: IFFALSE 22020
// begin AddMedal ( people , 1 ) ;
22008: LD_STRING people
22010: PPUSH
22011: LD_INT 1
22013: PPUSH
22014: CALL_OW 101
// end else
22018: GO 22031
// begin AddMedal ( people , - 1 ) ;
22020: LD_STRING people
22022: PPUSH
22023: LD_INT 1
22025: NEG
22026: PPUSH
22027: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22031: LD_EXP 28
22035: PPUSH
22036: LD_STRING 06_remoteVehs_1
22038: PPUSH
22039: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22043: LD_EXP 28
22047: PUSH
22048: LD_INT 1
22050: EQUAL
22051: IFFALSE 22065
// begin AddMedal ( remote , 1 ) ;
22053: LD_STRING remote
22055: PPUSH
22056: LD_INT 1
22058: PPUSH
22059: CALL_OW 101
// end else
22063: GO 22105
// begin if GetTech ( 18 , 1 ) = state_enabled then
22065: LD_INT 18
22067: PPUSH
22068: LD_INT 1
22070: PPUSH
22071: CALL_OW 321
22075: PUSH
22076: LD_INT 1
22078: EQUAL
22079: IFFALSE 22094
// begin AddMedal ( remote , - 1 ) ;
22081: LD_STRING remote
22083: PPUSH
22084: LD_INT 1
22086: NEG
22087: PPUSH
22088: CALL_OW 101
// end else
22092: GO 22105
// begin AddMedal ( remote , - 2 ) ;
22094: LD_STRING remote
22096: PPUSH
22097: LD_INT 2
22099: NEG
22100: PPUSH
22101: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22105: LD_EXP 20
22109: PPUSH
22110: LD_STRING 06_KurtStatus_1
22112: PPUSH
22113: CALL_OW 39
// GiveMedals ( Main ) ;
22117: LD_STRING Main
22119: PPUSH
22120: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22124: LD_INT 22
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 21
22136: PUSH
22137: LD_INT 1
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 50
22146: PUSH
22147: EMPTY
22148: LIST
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 25
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 25
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 25
22175: PUSH
22176: LD_INT 3
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 25
22185: PUSH
22186: LD_INT 4
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PPUSH
22206: CALL_OW 69
22210: PPUSH
22211: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22215: LD_EXP 1
22219: PPUSH
22220: LD_EXP 43
22224: PUSH
22225: LD_STRING JMM
22227: STR
22228: PPUSH
22229: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22233: LD_EXP 2
22237: PPUSH
22238: LD_EXP 43
22242: PUSH
22243: LD_STRING Lisa
22245: STR
22246: PPUSH
22247: CALL 5786 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22251: LD_EXP 3
22255: PPUSH
22256: LD_EXP 43
22260: PUSH
22261: LD_STRING Bobby
22263: STR
22264: PPUSH
22265: CALL 5786 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22269: LD_EXP 4
22273: PPUSH
22274: LD_EXP 43
22278: PUSH
22279: LD_STRING Cyrus
22281: STR
22282: PPUSH
22283: CALL 5786 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22287: LD_EXP 5
22291: PPUSH
22292: LD_EXP 43
22296: PUSH
22297: LD_STRING Frank
22299: STR
22300: PPUSH
22301: CALL 5786 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22305: LD_EXP 6
22309: PPUSH
22310: LD_EXP 43
22314: PUSH
22315: LD_STRING Brown
22317: STR
22318: PPUSH
22319: CALL 5786 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22323: LD_EXP 7
22327: PPUSH
22328: LD_EXP 43
22332: PUSH
22333: LD_STRING Donaldson
22335: STR
22336: PPUSH
22337: CALL 5786 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22341: LD_EXP 8
22345: PPUSH
22346: LD_EXP 43
22350: PUSH
22351: LD_STRING Gladstone
22353: STR
22354: PPUSH
22355: CALL 5786 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22359: LD_EXP 9
22363: PPUSH
22364: LD_EXP 43
22368: PUSH
22369: LD_STRING Denis
22371: STR
22372: PPUSH
22373: CALL 5786 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22377: LD_EXP 15
22381: PPUSH
22382: LD_EXP 43
22386: PUSH
22387: LD_STRING Joan
22389: STR
22390: PPUSH
22391: CALL 5786 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22395: LD_EXP 16
22399: PPUSH
22400: LD_STRING 06_JoanStatus_1
22402: PPUSH
22403: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22407: LD_INT 50
22409: PUSH
22410: EMPTY
22411: LIST
22412: PUSH
22413: LD_INT 22
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 21
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 25
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 25
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 25
22458: PUSH
22459: LD_INT 3
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 25
22468: PUSH
22469: LD_INT 4
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 69
22493: PUSH
22494: LD_EXP 1
22498: PUSH
22499: LD_EXP 2
22503: PUSH
22504: LD_EXP 3
22508: PUSH
22509: LD_EXP 4
22513: PUSH
22514: LD_EXP 5
22518: PUSH
22519: LD_EXP 6
22523: PUSH
22524: LD_EXP 7
22528: PUSH
22529: LD_EXP 8
22533: PUSH
22534: LD_EXP 9
22538: PUSH
22539: LD_EXP 15
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: DIFF
22556: PPUSH
22557: LD_STRING 06_other_survivors
22559: PPUSH
22560: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22564: LD_INT 50
22566: PUSH
22567: EMPTY
22568: LIST
22569: PUSH
22570: LD_INT 22
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 21
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: LD_INT 25
22595: PUSH
22596: LD_INT 12
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 25
22605: PUSH
22606: LD_INT 16
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: PPUSH
22624: CALL_OW 69
22628: PPUSH
22629: LD_STRING 06_other_apemans
22631: PPUSH
22632: CALL_OW 38
// YouWin ;
22636: CALL_OW 103
// end ; end_of_file
22640: LD_VAR 0 2
22644: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22645: LD_EXP 39
22649: PUSH
22650: LD_INT 3
22652: EQUAL
22653: IFFALSE 22768
22655: GO 22657
22657: DISABLE
// begin enable ;
22658: ENABLE
// sendedConvoys = 0 ;
22659: LD_ADDR_EXP 39
22663: PUSH
22664: LD_INT 0
22666: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22667: LD_INT 6
22669: PPUSH
22670: LD_INT 3
22672: PPUSH
22673: LD_INT 5
22675: PPUSH
22676: LD_INT 10
22678: PPUSH
22679: CALL_OW 12
22683: PUSH
22684: LD_INT 5
22686: PPUSH
22687: LD_INT 11
22689: PPUSH
22690: CALL_OW 12
22694: PUSH
22695: LD_INT 8
22697: PPUSH
22698: LD_INT 12
22700: PPUSH
22701: CALL_OW 12
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: LIST
22710: PUSH
22711: LD_OWVAR 67
22715: ARRAY
22716: PPUSH
22717: LD_INT 0
22719: PPUSH
22720: LD_INT 0
22722: PPUSH
22723: LD_INT 0
22725: PPUSH
22726: LD_INT 0
22728: PPUSH
22729: LD_EXP 34
22733: PPUSH
22734: LD_EXP 35
22738: PPUSH
22739: CALL_OW 12
22743: PPUSH
22744: LD_INT 16
22746: PPUSH
22747: LD_INT 15
22749: PPUSH
22750: LD_INT 1
22752: PPUSH
22753: LD_INT 1
22755: PPUSH
22756: LD_INT 2
22758: PPUSH
22759: CALL_OW 12
22763: PPUSH
22764: CALL 10216 0 12
// end ; end_of_file
22768: END
// export function PrepareNature ; var i , un ; begin
22769: LD_INT 0
22771: PPUSH
22772: PPUSH
22773: PPUSH
// for i = 1 to Difficulty + 2 do
22774: LD_ADDR_VAR 0 2
22778: PUSH
22779: DOUBLE
22780: LD_INT 1
22782: DEC
22783: ST_TO_ADDR
22784: LD_OWVAR 67
22788: PUSH
22789: LD_INT 2
22791: PLUS
22792: PUSH
22793: FOR_TO
22794: IFFALSE 22903
// begin hc_sex = sex_male ;
22796: LD_ADDR_OWVAR 27
22800: PUSH
22801: LD_INT 1
22803: ST_TO_ADDR
// uc_side = 0 ;
22804: LD_ADDR_OWVAR 20
22808: PUSH
22809: LD_INT 0
22811: ST_TO_ADDR
// uc_nation = nation_nature ;
22812: LD_ADDR_OWVAR 21
22816: PUSH
22817: LD_INT 0
22819: ST_TO_ADDR
// hc_class = class_tiger ;
22820: LD_ADDR_OWVAR 28
22824: PUSH
22825: LD_INT 14
22827: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22828: LD_ADDR_OWVAR 31
22832: PUSH
22833: LD_EXP 35
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22853: LD_ADDR_OWVAR 35
22857: PUSH
22858: LD_INT 5
22860: NEG
22861: PPUSH
22862: LD_INT 5
22864: PPUSH
22865: CALL_OW 12
22869: PUSH
22870: LD_OWVAR 67
22874: MUL
22875: ST_TO_ADDR
// un = CreateHuman ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: CALL_OW 44
22885: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22886: LD_VAR 0 3
22890: PPUSH
22891: LD_INT 18
22893: PPUSH
22894: LD_INT 0
22896: PPUSH
22897: CALL_OW 49
// end ;
22901: GO 22793
22903: POP
22904: POP
// for i = 1 to rand ( 3 , 4 ) do
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: DOUBLE
22911: LD_INT 1
22913: DEC
22914: ST_TO_ADDR
22915: LD_INT 3
22917: PPUSH
22918: LD_INT 4
22920: PPUSH
22921: CALL_OW 12
22925: PUSH
22926: FOR_TO
22927: IFFALSE 23021
// begin hc_sex = sex_male ;
22929: LD_ADDR_OWVAR 27
22933: PUSH
22934: LD_INT 1
22936: ST_TO_ADDR
// uc_side = 0 ;
22937: LD_ADDR_OWVAR 20
22941: PUSH
22942: LD_INT 0
22944: ST_TO_ADDR
// uc_nation = nation_nature ;
22945: LD_ADDR_OWVAR 21
22949: PUSH
22950: LD_INT 0
22952: ST_TO_ADDR
// hc_class = 18 ;
22953: LD_ADDR_OWVAR 28
22957: PUSH
22958: LD_INT 18
22960: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22961: LD_ADDR_OWVAR 31
22965: PUSH
22966: LD_EXP 35
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: ST_TO_ADDR
// hc_agressivity = 0 ;
22986: LD_ADDR_OWVAR 35
22990: PUSH
22991: LD_INT 0
22993: ST_TO_ADDR
// un = CreateHuman ;
22994: LD_ADDR_VAR 0 3
22998: PUSH
22999: CALL_OW 44
23003: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23004: LD_VAR 0 3
23008: PPUSH
23009: LD_INT 18
23011: PPUSH
23012: LD_INT 0
23014: PPUSH
23015: CALL_OW 49
// end ;
23019: GO 22926
23021: POP
23022: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23023: LD_ADDR_VAR 0 2
23027: PUSH
23028: DOUBLE
23029: LD_INT 1
23031: DEC
23032: ST_TO_ADDR
23033: LD_INT 1
23035: PPUSH
23036: LD_INT 3
23038: PPUSH
23039: CALL_OW 12
23043: PUSH
23044: LD_OWVAR 67
23048: PLUS
23049: PUSH
23050: FOR_TO
23051: IFFALSE 23200
// begin hc_sex = sex_male ;
23053: LD_ADDR_OWVAR 27
23057: PUSH
23058: LD_INT 1
23060: ST_TO_ADDR
// uc_side = 0 ;
23061: LD_ADDR_OWVAR 20
23065: PUSH
23066: LD_INT 0
23068: ST_TO_ADDR
// uc_nation = nation_nature ;
23069: LD_ADDR_OWVAR 21
23073: PUSH
23074: LD_INT 0
23076: ST_TO_ADDR
// hc_class = class_apeman ;
23077: LD_ADDR_OWVAR 28
23081: PUSH
23082: LD_INT 12
23084: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23085: LD_ADDR_OWVAR 31
23089: PUSH
23090: LD_INT 2
23092: PPUSH
23093: LD_INT 5
23095: PPUSH
23096: CALL_OW 12
23100: PUSH
23101: LD_INT 0
23103: PPUSH
23104: LD_INT 2
23106: PPUSH
23107: CALL_OW 12
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23124: LD_ADDR_OWVAR 35
23128: PUSH
23129: LD_INT 20
23131: PPUSH
23132: LD_INT 30
23134: PPUSH
23135: CALL_OW 12
23139: PUSH
23140: LD_INT 30
23142: PPUSH
23143: LD_INT 40
23145: PPUSH
23146: CALL_OW 12
23150: PUSH
23151: LD_INT 40
23153: PPUSH
23154: LD_INT 50
23156: PPUSH
23157: CALL_OW 12
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: PUSH
23167: LD_OWVAR 67
23171: ARRAY
23172: ST_TO_ADDR
// un = CreateHuman ;
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: CALL_OW 44
23182: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23183: LD_VAR 0 3
23187: PPUSH
23188: LD_INT 19
23190: PPUSH
23191: LD_INT 0
23193: PPUSH
23194: CALL_OW 49
// end ;
23198: GO 23050
23200: POP
23201: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23202: LD_ADDR_VAR 0 2
23206: PUSH
23207: DOUBLE
23208: LD_INT 1
23210: DEC
23211: ST_TO_ADDR
23212: LD_INT 5
23214: PPUSH
23215: LD_INT 6
23217: PPUSH
23218: CALL_OW 12
23222: PUSH
23223: LD_OWVAR 67
23227: PLUS
23228: PUSH
23229: FOR_TO
23230: IFFALSE 23338
// begin hc_sex = sex_male ;
23232: LD_ADDR_OWVAR 27
23236: PUSH
23237: LD_INT 1
23239: ST_TO_ADDR
// uc_side = 0 ;
23240: LD_ADDR_OWVAR 20
23244: PUSH
23245: LD_INT 0
23247: ST_TO_ADDR
// uc_nation = nation_nature ;
23248: LD_ADDR_OWVAR 21
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// hc_class = class_apeman ;
23256: LD_ADDR_OWVAR 28
23260: PUSH
23261: LD_INT 12
23263: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23264: LD_ADDR_OWVAR 31
23268: PUSH
23269: LD_INT 2
23271: PPUSH
23272: LD_INT 5
23274: PPUSH
23275: CALL_OW 12
23279: PUSH
23280: LD_INT 0
23282: PPUSH
23283: LD_INT 2
23285: PPUSH
23286: CALL_OW 12
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: ST_TO_ADDR
// hc_agressivity = 0 ;
23303: LD_ADDR_OWVAR 35
23307: PUSH
23308: LD_INT 0
23310: ST_TO_ADDR
// un = CreateHuman ;
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: CALL_OW 44
23320: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 20
23328: PPUSH
23329: LD_INT 0
23331: PPUSH
23332: CALL_OW 49
// end ;
23336: GO 23229
23338: POP
23339: POP
// end ; end_of_file
23340: LD_VAR 0 1
23344: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23345: LD_EXP 1
23349: PPUSH
23350: CALL_OW 301
23354: IFFALSE 23366
23356: GO 23358
23358: DISABLE
// YouLost ( JMM ) ;
23359: LD_STRING JMM
23361: PPUSH
23362: CALL_OW 104
23366: END
