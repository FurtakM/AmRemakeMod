// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 40
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 41
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 42
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 29
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 16
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 38
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 25
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 26
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 28
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 39
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 32
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 30
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 31
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 36
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 37
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 33
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 27
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5523 0 0
// PrepareNature ;
 211: CALL 20803 0 0
// PrepareRussian ;
 215: CALL 4630 0 0
// PrepareVehicles ;
 219: CALL 1456 0 0
// PrepareHeroes ;
 223: CALL 474 0 0
// PrepareOthers ;
 227: CALL 1717 0 0
// PreparePlayerApemans ;
 231: CALL 1859 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 40
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 471
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// if IsSelected ( rudepo ) then
 435: LD_INT 2
 437: PPUSH
 438: CALL_OW 306
 442: IFFALSE 452
// your_side = 3 ;
 444: LD_ADDR_OWVAR 2
 448: PUSH
 449: LD_INT 3
 451: ST_TO_ADDR
// if IsSelected ( JMM ) then
 452: LD_EXP 1
 456: PPUSH
 457: CALL_OW 306
 461: IFFALSE 471
// your_side = 1 ;
 463: LD_ADDR_OWVAR 2
 467: PUSH
 468: LD_INT 1
 470: ST_TO_ADDR
// end ; end_of_file
 471: PPOPN 1
 473: END
// export function PrepareHeroes ; var veh ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// uc_side = 1 ;
 478: LD_ADDR_OWVAR 20
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// uc_nation = 1 ;
 486: LD_ADDR_OWVAR 21
 490: PUSH
 491: LD_INT 1
 493: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 494: LD_ADDR_EXP 1
 498: PUSH
 499: LD_STRING JMM
 501: PPUSH
 502: LD_INT 1
 504: PPUSH
 505: CALL 5007 0 2
 509: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 510: LD_ADDR_EXP 14
 514: PUSH
 515: LD_STRING Harisson
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL 5007 0 2
 525: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 526: LD_ADDR_EXP 10
 530: PUSH
 531: LD_STRING DeltaDoctor
 533: PPUSH
 534: CALL_OW 34
 538: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 539: LD_ADDR_VAR 0 2
 543: PUSH
 544: LD_INT 22
 546: PUSH
 547: LD_INT 1
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 21
 556: PUSH
 557: LD_INT 2
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: LD_INT 58
 566: PUSH
 567: EMPTY
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: PPUSH
 575: CALL_OW 69
 579: ST_TO_ADDR
// if veh > 0 then
 580: LD_VAR 0 2
 584: PUSH
 585: LD_INT 0
 587: GREATER
 588: IFFALSE 610
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 590: LD_EXP 1
 594: PPUSH
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 1
 602: ARRAY
 603: PPUSH
 604: CALL_OW 52
// end else
 608: GO 625
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 610: LD_EXP 1
 614: PPUSH
 615: LD_INT 2
 617: PPUSH
 618: LD_INT 0
 620: PPUSH
 621: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 625: LD_STRING LisaIn06
 627: PPUSH
 628: LD_INT 0
 630: PPUSH
 631: CALL_OW 30
 635: PUSH
 636: LD_INT 1
 638: EQUAL
 639: IFFALSE 743
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 21
 658: PUSH
 659: LD_INT 2
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: LD_INT 58
 668: PUSH
 669: EMPTY
 670: LIST
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 5007 0 2
 697: ST_TO_ADDR
// if veh > 0 then
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 0
 705: GREATER
 706: IFFALSE 728
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 708: LD_EXP 2
 712: PPUSH
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 1
 720: ARRAY
 721: PPUSH
 722: CALL_OW 52
// end else
 726: GO 743
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 728: LD_EXP 2
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 743: LD_STRING BobbyIn06
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 30
 753: PUSH
 754: LD_INT 1
 756: EQUAL
 757: IFFALSE 861
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 759: LD_ADDR_VAR 0 2
 763: PUSH
 764: LD_INT 22
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: LD_INT 21
 776: PUSH
 777: LD_INT 2
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 58
 786: PUSH
 787: EMPTY
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: PPUSH
 795: CALL_OW 69
 799: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 800: LD_ADDR_EXP 3
 804: PUSH
 805: LD_STRING Bobby
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL 5007 0 2
 815: ST_TO_ADDR
// if veh > 0 then
 816: LD_VAR 0 2
 820: PUSH
 821: LD_INT 0
 823: GREATER
 824: IFFALSE 846
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 1
 838: ARRAY
 839: PPUSH
 840: CALL_OW 52
// end else
 844: GO 861
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 846: LD_EXP 3
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 861: LD_STRING CyrusIn06
 863: PPUSH
 864: LD_INT 0
 866: PPUSH
 867: CALL_OW 30
 871: PUSH
 872: LD_INT 1
 874: EQUAL
 875: IFFALSE 979
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 877: LD_ADDR_VAR 0 2
 881: PUSH
 882: LD_INT 22
 884: PUSH
 885: LD_INT 1
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 21
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 58
 904: PUSH
 905: EMPTY
 906: LIST
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PPUSH
 913: CALL_OW 69
 917: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 918: LD_ADDR_EXP 4
 922: PUSH
 923: LD_STRING Cyrus
 925: PPUSH
 926: LD_INT 1
 928: PPUSH
 929: CALL 5007 0 2
 933: ST_TO_ADDR
// if veh > 0 then
 934: LD_VAR 0 2
 938: PUSH
 939: LD_INT 0
 941: GREATER
 942: IFFALSE 964
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 944: LD_EXP 4
 948: PPUSH
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 1
 956: ARRAY
 957: PPUSH
 958: CALL_OW 52
// end else
 962: GO 979
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 964: LD_EXP 4
 968: PPUSH
 969: LD_INT 2
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 979: LD_STRING FrankIn06
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 30
 989: PUSH
 990: LD_INT 1
 992: EQUAL
 993: IFFALSE 1097
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 22
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 21
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: LD_INT 58
1022: PUSH
1023: EMPTY
1024: LIST
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: PPUSH
1031: CALL_OW 69
1035: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1036: LD_ADDR_EXP 5
1040: PUSH
1041: LD_STRING Frank
1043: PPUSH
1044: LD_INT 1
1046: PPUSH
1047: CALL 5007 0 2
1051: ST_TO_ADDR
// if veh > 0 then
1052: LD_VAR 0 2
1056: PUSH
1057: LD_INT 0
1059: GREATER
1060: IFFALSE 1082
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1062: LD_EXP 5
1066: PPUSH
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 1
1074: ARRAY
1075: PPUSH
1076: CALL_OW 52
// end else
1080: GO 1097
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1082: LD_EXP 5
1086: PPUSH
1087: LD_INT 2
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1097: LD_STRING BrownIn06
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 30
1107: PUSH
1108: LD_INT 1
1110: EQUAL
1111: IFFALSE 1215
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 21
1130: PUSH
1131: LD_INT 2
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 58
1140: PUSH
1141: EMPTY
1142: LIST
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: PPUSH
1149: CALL_OW 69
1153: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1154: LD_ADDR_EXP 6
1158: PUSH
1159: LD_STRING Brown
1161: PPUSH
1162: LD_INT 1
1164: PPUSH
1165: CALL 5007 0 2
1169: ST_TO_ADDR
// if veh > 0 then
1170: LD_VAR 0 2
1174: PUSH
1175: LD_INT 0
1177: GREATER
1178: IFFALSE 1200
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1180: LD_EXP 6
1184: PPUSH
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 1
1192: ARRAY
1193: PPUSH
1194: CALL_OW 52
// end else
1198: GO 1215
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1200: LD_EXP 6
1204: PPUSH
1205: LD_INT 2
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1215: LD_STRING DonaldsonIn06
1217: PPUSH
1218: LD_INT 0
1220: PPUSH
1221: CALL_OW 30
1225: PUSH
1226: LD_INT 1
1228: EQUAL
1229: IFFALSE 1333
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1231: LD_ADDR_VAR 0 2
1235: PUSH
1236: LD_INT 22
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 21
1248: PUSH
1249: LD_INT 2
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 58
1258: PUSH
1259: EMPTY
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PPUSH
1267: CALL_OW 69
1271: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1272: LD_ADDR_EXP 7
1276: PUSH
1277: LD_STRING Donaldson
1279: PPUSH
1280: LD_INT 1
1282: PPUSH
1283: CALL 5007 0 2
1287: ST_TO_ADDR
// if veh > 0 then
1288: LD_VAR 0 2
1292: PUSH
1293: LD_INT 0
1295: GREATER
1296: IFFALSE 1318
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1298: LD_EXP 7
1302: PPUSH
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 1
1310: ARRAY
1311: PPUSH
1312: CALL_OW 52
// end else
1316: GO 1333
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1318: LD_EXP 7
1322: PPUSH
1323: LD_INT 2
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1333: LD_STRING GladstoneIn06
1335: PPUSH
1336: LD_INT 0
1338: PPUSH
1339: CALL_OW 30
1343: PUSH
1344: LD_INT 1
1346: EQUAL
1347: IFFALSE 1451
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1349: LD_ADDR_VAR 0 2
1353: PUSH
1354: LD_INT 22
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: LD_INT 21
1366: PUSH
1367: LD_INT 2
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 58
1376: PUSH
1377: EMPTY
1378: LIST
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: LIST
1384: PPUSH
1385: CALL_OW 69
1389: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1390: LD_ADDR_EXP 8
1394: PUSH
1395: LD_STRING Gladstone
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL 5007 0 2
1405: ST_TO_ADDR
// if veh > 0 then
1406: LD_VAR 0 2
1410: PUSH
1411: LD_INT 0
1413: GREATER
1414: IFFALSE 1436
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1416: LD_EXP 8
1420: PPUSH
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 1
1428: ARRAY
1429: PPUSH
1430: CALL_OW 52
// end else
1434: GO 1451
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1436: LD_EXP 8
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// end ; end ; end ;
1451: LD_VAR 0 1
1455: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1456: LD_INT 0
1458: PPUSH
1459: PPUSH
1460: PPUSH
1461: PPUSH
1462: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1463: LD_ADDR_VAR 0 5
1467: PUSH
1468: LD_STRING 06_VehiclesIn06_1
1470: PPUSH
1471: EMPTY
1472: PPUSH
1473: CALL_OW 30
1477: ST_TO_ADDR
// uc_side = 1 ;
1478: LD_ADDR_OWVAR 20
1482: PUSH
1483: LD_INT 1
1485: ST_TO_ADDR
// if vehicles > 0 then
1486: LD_VAR 0 5
1490: PUSH
1491: LD_INT 0
1493: GREATER
1494: IFFALSE 1712
// begin for i := 1 to vehicles do
1496: LD_ADDR_VAR 0 2
1500: PUSH
1501: DOUBLE
1502: LD_INT 1
1504: DEC
1505: ST_TO_ADDR
1506: LD_VAR 0 5
1510: PUSH
1511: FOR_TO
1512: IFFALSE 1710
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_VAR 0 5
1523: PUSH
1524: LD_VAR 0 2
1528: ARRAY
1529: PUSH
1530: LD_INT 1
1532: ARRAY
1533: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1534: LD_ADDR_OWVAR 37
1538: PUSH
1539: LD_VAR 0 5
1543: PUSH
1544: LD_VAR 0 2
1548: ARRAY
1549: PUSH
1550: LD_INT 2
1552: ARRAY
1553: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1554: LD_ADDR_OWVAR 39
1558: PUSH
1559: LD_VAR 0 5
1563: PUSH
1564: LD_VAR 0 2
1568: ARRAY
1569: PUSH
1570: LD_INT 3
1572: ARRAY
1573: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1574: LD_ADDR_OWVAR 38
1578: PUSH
1579: LD_VAR 0 5
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: PUSH
1590: LD_INT 4
1592: ARRAY
1593: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1594: LD_ADDR_OWVAR 40
1598: PUSH
1599: LD_VAR 0 5
1603: PUSH
1604: LD_VAR 0 2
1608: ARRAY
1609: PUSH
1610: LD_INT 5
1612: ARRAY
1613: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1614: LD_ADDR_OWVAR 41
1618: PUSH
1619: LD_INT 40
1621: ST_TO_ADDR
// veh = CreateVehicle ;
1622: LD_ADDR_VAR 0 4
1626: PUSH
1627: CALL_OW 45
1631: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 3
1639: PPUSH
1640: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1644: LD_VAR 0 4
1648: PPUSH
1649: LD_INT 2
1651: PPUSH
1652: LD_INT 0
1654: PPUSH
1655: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1659: LD_OWVAR 40
1663: PUSH
1664: LD_INT 12
1666: EQUAL
1667: IFFALSE 1708
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1669: LD_VAR 0 4
1673: PPUSH
1674: LD_VAR 0 5
1678: PUSH
1679: LD_VAR 0 2
1683: ARRAY
1684: PUSH
1685: LD_INT 6
1687: ARRAY
1688: PPUSH
1689: LD_VAR 0 5
1693: PUSH
1694: LD_VAR 0 2
1698: ARRAY
1699: PUSH
1700: LD_INT 7
1702: ARRAY
1703: PPUSH
1704: CALL_OW 291
// end ;
1708: GO 1511
1710: POP
1711: POP
// end ; end ;
1712: LD_VAR 0 1
1716: RET
// export function PrepareOthers ; var i , veh ; begin
1717: LD_INT 0
1719: PPUSH
1720: PPUSH
1721: PPUSH
// uc_side = 1 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 1
1729: ST_TO_ADDR
// uc_nation = 1 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 1
1737: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1738: LD_ADDR_EXP 11
1742: PUSH
1743: LD_STRING OthersIn06
1745: PPUSH
1746: CALL_OW 31
1750: ST_TO_ADDR
// for i in others do
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: LD_EXP 11
1760: PUSH
1761: FOR_IN
1762: IFFALSE 1852
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1764: LD_ADDR_VAR 0 3
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 21
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 58
1791: PUSH
1792: EMPTY
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PPUSH
1800: CALL_OW 69
1804: ST_TO_ADDR
// if veh > 0 then
1805: LD_VAR 0 3
1809: PUSH
1810: LD_INT 0
1812: GREATER
1813: IFFALSE 1835
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1815: LD_VAR 0 2
1819: PPUSH
1820: LD_VAR 0 3
1824: PUSH
1825: LD_INT 1
1827: ARRAY
1828: PPUSH
1829: CALL_OW 52
// end else
1833: GO 1850
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_INT 2
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// end ; end ;
1850: GO 1761
1852: POP
1853: POP
// end ;
1854: LD_VAR 0 1
1858: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
1863: PPUSH
// uc_side = 1 ;
1864: LD_ADDR_OWVAR 20
1868: PUSH
1869: LD_INT 1
1871: ST_TO_ADDR
// uc_nation = 0 ;
1872: LD_ADDR_OWVAR 21
1876: PUSH
1877: LD_INT 0
1879: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1880: LD_ADDR_EXP 12
1884: PUSH
1885: LD_STRING ApeIn06
1887: PPUSH
1888: CALL_OW 31
1892: ST_TO_ADDR
// for i in ape do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_EXP 12
1902: PUSH
1903: FOR_IN
1904: IFFALSE 1923
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1906: LD_VAR 0 2
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 49
1921: GO 1903
1923: POP
1924: POP
// end ;
1925: LD_VAR 0 1
1929: RET
// export function PrepareDenis ; begin
1930: LD_INT 0
1932: PPUSH
// uc_side = 1 ;
1933: LD_ADDR_OWVAR 20
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// uc_nation = 1 ;
1941: LD_ADDR_OWVAR 21
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1949: LD_ADDR_EXP 9
1953: PUSH
1954: LD_STRING Denis
1956: PPUSH
1957: LD_INT 1
1959: PPUSH
1960: CALL 5007 0 2
1964: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1965: LD_EXP 9
1969: PPUSH
1970: LD_INT 13
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1980: LD_EXP 9
1984: PPUSH
1985: LD_INT 4
1987: PPUSH
1988: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1992: LD_EXP 9
1996: PPUSH
1997: LD_INT 750
1999: PPUSH
2000: CALL_OW 234
// end ;
2004: LD_VAR 0 1
2008: RET
// export function HarrisonSupport ; var un , veh ; begin
2009: LD_INT 0
2011: PPUSH
2012: PPUSH
2013: PPUSH
// uc_side = 1 ;
2014: LD_ADDR_OWVAR 20
2018: PUSH
2019: LD_INT 1
2021: ST_TO_ADDR
// uc_nation = 1 ;
2022: LD_ADDR_OWVAR 21
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// vc_engine = 1 ;
2030: LD_ADDR_OWVAR 39
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// vc_control = 1 ;
2038: LD_ADDR_OWVAR 38
2042: PUSH
2043: LD_INT 1
2045: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2046: LD_ADDR_OWVAR 40
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: LD_INT 4
2056: PUSH
2057: LD_INT 2
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_OWVAR 67
2069: ARRAY
2070: ST_TO_ADDR
// vc_chassis = 2 ;
2071: LD_ADDR_OWVAR 37
2075: PUSH
2076: LD_INT 2
2078: ST_TO_ADDR
// veh = CreateVehicle ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: CALL_OW 45
2088: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2089: LD_VAR 0 3
2093: PPUSH
2094: LD_INT 2
2096: PPUSH
2097: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2101: LD_VAR 0 3
2105: PPUSH
2106: LD_INT 3
2108: PPUSH
2109: LD_INT 0
2111: PPUSH
2112: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2116: LD_VAR 0 3
2120: PPUSH
2121: LD_INT 50
2123: PPUSH
2124: CALL_OW 240
// hc_class := 2 ;
2128: LD_ADDR_OWVAR 28
2132: PUSH
2133: LD_INT 2
2135: ST_TO_ADDR
// hc_sex := sex_male ;
2136: LD_ADDR_OWVAR 27
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING SecondCharsGal
2151: ST_TO_ADDR
// hc_face_number := 52 ;
2152: LD_ADDR_OWVAR 34
2156: PUSH
2157: LD_INT 52
2159: ST_TO_ADDR
// hc_name := Craig Brown ;
2160: LD_ADDR_OWVAR 26
2164: PUSH
2165: LD_STRING Craig Brown
2167: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2168: LD_ADDR_OWVAR 29
2172: PUSH
2173: LD_INT 10
2175: PUSH
2176: LD_INT 10
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2183: LD_ADDR_OWVAR 30
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 0
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: LIST
2205: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2206: LD_ADDR_OWVAR 31
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: LD_INT 3
2216: PUSH
2217: LD_INT 0
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2229: LD_ADDR_EXP 17
2233: PUSH
2234: CALL_OW 44
2238: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2239: LD_EXP 17
2243: PPUSH
2244: LD_VAR 0 3
2248: PPUSH
2249: CALL_OW 52
// vc_engine = 1 ;
2253: LD_ADDR_OWVAR 39
2257: PUSH
2258: LD_INT 1
2260: ST_TO_ADDR
// vc_control = 1 ;
2261: LD_ADDR_OWVAR 38
2265: PUSH
2266: LD_INT 1
2268: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2269: LD_ADDR_OWVAR 40
2273: PUSH
2274: LD_INT 4
2276: PUSH
2277: LD_INT 2
2279: PUSH
2280: LD_INT 2
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: LD_OWVAR 67
2292: ARRAY
2293: ST_TO_ADDR
// vc_chassis = 2 ;
2294: LD_ADDR_OWVAR 37
2298: PUSH
2299: LD_INT 2
2301: ST_TO_ADDR
// veh = CreateVehicle ;
2302: LD_ADDR_VAR 0 3
2306: PUSH
2307: CALL_OW 45
2311: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 3
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2339: LD_VAR 0 3
2343: PPUSH
2344: LD_INT 50
2346: PPUSH
2347: CALL_OW 240
// hc_class := 1 ;
2351: LD_ADDR_OWVAR 28
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// hc_sex := sex_female ;
2359: LD_ADDR_OWVAR 27
2363: PUSH
2364: LD_INT 2
2366: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2367: LD_ADDR_OWVAR 33
2371: PUSH
2372: LD_STRING SecondCharsGal
2374: ST_TO_ADDR
// hc_face_number := 45 ;
2375: LD_ADDR_OWVAR 34
2379: PUSH
2380: LD_INT 45
2382: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2383: LD_ADDR_OWVAR 29
2387: PUSH
2388: LD_INT 11
2390: PUSH
2391: LD_INT 10
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2398: LD_ADDR_OWVAR 26
2402: PUSH
2403: LD_STRING Ingrid Jonsson
2405: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2406: LD_ADDR_OWVAR 30
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 1
2416: PUSH
2417: LD_INT 0
2419: PUSH
2420: LD_INT 0
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2429: LD_ADDR_OWVAR 31
2433: PUSH
2434: LD_INT 3
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: LD_INT 1
2442: PUSH
2443: LD_INT 0
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2452: LD_ADDR_EXP 18
2456: PUSH
2457: CALL_OW 44
2461: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2462: LD_EXP 18
2466: PPUSH
2467: LD_VAR 0 3
2471: PPUSH
2472: CALL_OW 52
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
// j = 0 ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: LD_INT 0
2495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: LD_INT 22
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 21
2520: PUSH
2521: LD_INT 1
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 2
2530: PUSH
2531: LD_INT 25
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 25
2543: PUSH
2544: LD_INT 2
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 25
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 25
2563: PUSH
2564: LD_INT 4
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: LIST
2575: LIST
2576: LIST
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PPUSH
2583: CALL_OW 69
2587: PUSH
2588: FOR_IN
2589: IFFALSE 2715
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2591: LD_INT 22
2593: PUSH
2594: LD_INT 3
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 2
2603: PUSH
2604: LD_INT 21
2606: PUSH
2607: LD_INT 1
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 21
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: LD_INT 21
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 59
2636: PUSH
2637: EMPTY
2638: LIST
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 91
2649: PUSH
2650: LD_VAR 0 2
2654: PUSH
2655: LD_INT 25
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: NOT
2673: PUSH
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_EXP 1
2683: PPUSH
2684: CALL_OW 296
2688: PUSH
2689: LD_INT 15
2691: LESS
2692: AND
2693: IFFALSE 2713
// begin tmp = i ;
2695: LD_ADDR_VAR 0 4
2699: PUSH
2700: LD_VAR 0 2
2704: ST_TO_ADDR
// j = 1 ;
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: LD_INT 1
2712: ST_TO_ADDR
// end ; end ;
2713: GO 2588
2715: POP
2716: POP
// until j = 1 ;
2717: LD_VAR 0 3
2721: PUSH
2722: LD_INT 1
2724: EQUAL
2725: IFFALSE 2496
// blockSpawn = 1 ;
2727: LD_ADDR_EXP 29
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
// uc_side = 4 ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_INT 4
2742: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2743: LD_ADDR_EXP 15
2747: PUSH
2748: LD_STRING Joan
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: CALL 5007 0 2
2758: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2759: LD_EXP 15
2763: PPUSH
2764: LD_VAR 0 4
2768: PPUSH
2769: CALL_OW 250
2773: PPUSH
2774: LD_VAR 0 4
2778: PPUSH
2779: CALL_OW 251
2783: PPUSH
2784: LD_INT 5
2786: PPUSH
2787: LD_INT 1
2789: PPUSH
2790: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2794: LD_EXP 15
2798: PPUSH
2799: LD_INT 250
2801: PPUSH
2802: CALL_OW 234
// InGameOn ;
2806: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2810: LD_EXP 15
2814: PPUSH
2815: CALL_OW 87
// wait ( 0 0$2 ) ;
2819: LD_INT 70
2821: PPUSH
2822: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2826: LD_VAR 0 4
2830: PPUSH
2831: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2835: LD_VAR 0 4
2839: PPUSH
2840: CALL_OW 122
// wait ( 0 0$1 ) ;
2844: LD_INT 35
2846: PPUSH
2847: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2851: LD_VAR 0 4
2855: PPUSH
2856: LD_EXP 15
2860: PPUSH
2861: CALL_OW 112
// wait ( 0 0$2 ) ;
2865: LD_INT 70
2867: PPUSH
2868: CALL_OW 67
// DialogueOn ;
2872: CALL_OW 6
// if tmp = JMM then
2876: LD_VAR 0 4
2880: PUSH
2881: LD_EXP 1
2885: EQUAL
2886: IFFALSE 3035
// begin ComTurnUnit ( JMM , Joan ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_EXP 15
2897: PPUSH
2898: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2902: LD_EXP 1
2906: PPUSH
2907: LD_STRING D5b-JMM-1
2909: PPUSH
2910: CALL_OW 88
// DialogueOff ;
2914: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2918: LD_EXP 15
2922: PPUSH
2923: LD_INT 500
2925: PPUSH
2926: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2930: LD_EXP 15
2934: PPUSH
2935: LD_EXP 1
2939: PPUSH
2940: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2944: LD_EXP 1
2948: PPUSH
2949: LD_EXP 15
2953: PPUSH
2954: CALL_OW 119
// wait ( 0 0$1 ) ;
2958: LD_INT 35
2960: PPUSH
2961: CALL_OW 67
// DialogueOn ;
2965: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2969: LD_EXP 15
2973: PPUSH
2974: LD_STRING D5b-Joan-1
2976: PPUSH
2977: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_STRING D5b-JMM-2
2988: PPUSH
2989: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2993: LD_EXP 15
2997: PPUSH
2998: LD_STRING D5b-Joan-2
3000: PPUSH
3001: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3005: LD_EXP 1
3009: PPUSH
3010: LD_STRING D5b-JMM-3
3012: PPUSH
3013: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3017: LD_EXP 15
3021: PPUSH
3022: LD_STRING D5b-Joan-3
3024: PPUSH
3025: CALL_OW 88
// DialogueOff ;
3029: CALL_OW 7
// end else
3033: GO 3370
// begin ComTurnUnit ( tmp , Joan ) ;
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_EXP 15
3044: PPUSH
3045: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3049: LD_VAR 0 4
3053: PPUSH
3054: LD_STRING D5a-Sol1-1
3056: PPUSH
3057: CALL_OW 88
// DialogueOff ;
3061: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3065: LD_EXP 15
3069: PPUSH
3070: LD_INT 500
3072: PPUSH
3073: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3077: LD_EXP 15
3081: PPUSH
3082: LD_VAR 0 4
3086: PPUSH
3087: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3091: LD_VAR 0 4
3095: PPUSH
3096: LD_EXP 15
3100: PPUSH
3101: CALL_OW 119
// wait ( 0 0$1 ) ;
3105: LD_INT 35
3107: PPUSH
3108: CALL_OW 67
// DialogueOn ;
3112: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_STRING D5a-Joan-1
3123: PPUSH
3124: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3128: LD_VAR 0 4
3132: PPUSH
3133: LD_STRING D5a-Sol1-2
3135: PPUSH
3136: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3140: LD_EXP 15
3144: PPUSH
3145: LD_STRING D5a-Joan-2
3147: PPUSH
3148: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_STRING D5a-Sol1-3
3159: PPUSH
3160: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3164: LD_EXP 15
3168: PPUSH
3169: LD_STRING D5a-Joan-3
3171: PPUSH
3172: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_STRING D5a-Sol1-4
3183: PPUSH
3184: CALL_OW 88
// DialogueOff ;
3188: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3192: LD_EXP 1
3196: PPUSH
3197: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3201: LD_EXP 1
3205: PPUSH
3206: CALL_OW 122
// wait ( 0 0$1 ) ;
3210: LD_INT 35
3212: PPUSH
3213: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3217: LD_INT 35
3219: PPUSH
3220: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3224: LD_EXP 15
3228: PUSH
3229: LD_VAR 0 4
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PPUSH
3238: LD_EXP 1
3242: PPUSH
3243: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3247: LD_EXP 15
3251: PPUSH
3252: LD_EXP 1
3256: PPUSH
3257: CALL_OW 296
3261: PUSH
3262: LD_INT 5
3264: LESS
3265: IFFALSE 3217
// ComTurnUnit ( Joan , JMM ) ;
3267: LD_EXP 15
3271: PPUSH
3272: LD_EXP 1
3276: PPUSH
3277: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3281: LD_EXP 1
3285: PPUSH
3286: LD_EXP 15
3290: PPUSH
3291: CALL_OW 119
// wait ( 0 0$1 ) ;
3295: LD_INT 35
3297: PPUSH
3298: CALL_OW 67
// DialogueOn ;
3302: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3306: LD_EXP 15
3310: PPUSH
3311: LD_STRING D5a-Joan-4
3313: PPUSH
3314: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3318: LD_EXP 1
3322: PPUSH
3323: LD_STRING D5a-JMM-4
3325: PPUSH
3326: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3330: LD_EXP 15
3334: PPUSH
3335: LD_STRING D5a-Joan-5
3337: PPUSH
3338: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3342: LD_EXP 1
3346: PPUSH
3347: LD_STRING D5a-JMM-5
3349: PPUSH
3350: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3354: LD_EXP 15
3358: PPUSH
3359: LD_STRING D5a-Joan-6
3361: PPUSH
3362: CALL_OW 88
// DialogueOff ;
3366: CALL_OW 7
// end ; DialogueOn ;
3370: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3374: LD_EXP 1
3378: PPUSH
3379: LD_STRING D6-JMM-1
3381: PPUSH
3382: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3386: LD_EXP 15
3390: PPUSH
3391: LD_STRING D6-Joan-1
3393: PPUSH
3394: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3398: LD_EXP 1
3402: PPUSH
3403: LD_STRING D6-JMM-2
3405: PPUSH
3406: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3410: LD_EXP 15
3414: PPUSH
3415: LD_STRING D6-Joan-2
3417: PPUSH
3418: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3422: LD_EXP 1
3426: PPUSH
3427: LD_STRING D6-JMM-3
3429: PPUSH
3430: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3434: LD_EXP 15
3438: PPUSH
3439: LD_STRING D6-Joan-3
3441: PPUSH
3442: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3446: LD_EXP 1
3450: PPUSH
3451: LD_STRING D6-JMM-4
3453: PPUSH
3454: CALL_OW 88
// DialogueOff ;
3458: CALL_OW 7
// InGameOff ;
3462: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3466: LD_EXP 15
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3478: LD_STRING MJ
3480: PPUSH
3481: CALL_OW 337
// JoanStatus = 1 ;
3485: LD_ADDR_EXP 16
3489: PUSH
3490: LD_INT 1
3492: ST_TO_ADDR
// blockSpawn = 0 ;
3493: LD_ADDR_EXP 29
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// end ;
3501: LD_VAR 0 1
3505: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3506: LD_INT 0
3508: PPUSH
3509: PPUSH
// repeat wait ( 0 0$7 ) ;
3510: LD_INT 245
3512: PPUSH
3513: CALL_OW 67
// until blockSpawn = 0 ;
3517: LD_EXP 29
3521: PUSH
3522: LD_INT 0
3524: EQUAL
3525: IFFALSE 3510
// uc_side = 1 ;
3527: LD_ADDR_OWVAR 20
3531: PUSH
3532: LD_INT 1
3534: ST_TO_ADDR
// uc_nation = 1 ;
3535: LD_ADDR_OWVAR 21
3539: PUSH
3540: LD_INT 1
3542: ST_TO_ADDR
// InitHc ;
3543: CALL_OW 19
// if number = 1 then
3547: LD_VAR 0 1
3551: PUSH
3552: LD_INT 1
3554: EQUAL
3555: IFFALSE 3731
// begin hc_class := 1 ;
3557: LD_ADDR_OWVAR 28
3561: PUSH
3562: LD_INT 1
3564: ST_TO_ADDR
// hc_sex := sex_male ;
3565: LD_ADDR_OWVAR 27
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3573: LD_ADDR_OWVAR 33
3577: PUSH
3578: LD_STRING AmGalRemake
3580: ST_TO_ADDR
// hc_face_number := 7 ;
3581: LD_ADDR_OWVAR 34
3585: PUSH
3586: LD_INT 7
3588: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING Bobby Jordan
3596: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3597: LD_ADDR_OWVAR 29
3601: PUSH
3602: LD_INT 9
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3612: LD_ADDR_OWVAR 30
3616: PUSH
3617: LD_INT 1
3619: PUSH
3620: LD_INT 0
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3635: LD_ADDR_OWVAR 31
3639: PUSH
3640: LD_INT 2
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: LD_INT 1
3648: PUSH
3649: LD_INT 1
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: ST_TO_ADDR
// un = CreateHuman ;
3658: LD_ADDR_VAR 0 3
3662: PUSH
3663: CALL_OW 44
3667: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: LD_INT 12
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$1 ) ;
3683: LD_INT 35
3685: PPUSH
3686: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3690: LD_VAR 0 3
3694: PPUSH
3695: CALL_OW 87
// DialogueOn ;
3699: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_STRING D11b-Sol3-1
3710: PPUSH
3711: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3715: LD_EXP 1
3719: PPUSH
3720: LD_STRING D11b-JMM-1
3722: PPUSH
3723: CALL_OW 88
// DialogueOff ;
3727: CALL_OW 7
// end ; if number = 2 then
3731: LD_VAR 0 1
3735: PUSH
3736: LD_INT 2
3738: EQUAL
3739: IFFALSE 3915
// begin hc_class := 3 ;
3741: LD_ADDR_OWVAR 28
3745: PUSH
3746: LD_INT 3
3748: ST_TO_ADDR
// hc_sex := sex_male ;
3749: LD_ADDR_OWVAR 27
3753: PUSH
3754: LD_INT 1
3756: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3757: LD_ADDR_OWVAR 33
3761: PUSH
3762: LD_STRING SecondCharsGal
3764: ST_TO_ADDR
// hc_face_number := 55 ;
3765: LD_ADDR_OWVAR 34
3769: PUSH
3770: LD_INT 55
3772: ST_TO_ADDR
// hc_name := George McCarthy ;
3773: LD_ADDR_OWVAR 26
3777: PUSH
3778: LD_STRING George McCarthy
3780: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3781: LD_ADDR_OWVAR 29
3785: PUSH
3786: LD_INT 11
3788: PUSH
3789: LD_INT 10
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3796: LD_ADDR_OWVAR 30
3800: PUSH
3801: LD_INT 0
3803: PUSH
3804: LD_INT 0
3806: PUSH
3807: LD_INT 2
3809: PUSH
3810: LD_INT 0
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3819: LD_ADDR_OWVAR 31
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: LD_INT 2
3829: PUSH
3830: LD_INT 3
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: ST_TO_ADDR
// un = CreateHuman ;
3842: LD_ADDR_VAR 0 3
3846: PUSH
3847: CALL_OW 44
3851: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3852: LD_VAR 0 3
3856: PPUSH
3857: LD_INT 12
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3867: LD_VAR 0 3
3871: PPUSH
3872: CALL_OW 87
// wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// DialogueOn ;
3883: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3887: LD_VAR 0 3
3891: PPUSH
3892: LD_STRING D11d-Sol4-1
3894: PPUSH
3895: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3899: LD_EXP 1
3903: PPUSH
3904: LD_STRING D11d-JMM-1
3906: PPUSH
3907: CALL_OW 88
// DialogueOff ;
3911: CALL_OW 7
// end ; if number = 4 then
3915: LD_VAR 0 1
3919: PUSH
3920: LD_INT 4
3922: EQUAL
3923: IFFALSE 4087
// begin hc_class := 3 ;
3925: LD_ADDR_OWVAR 28
3929: PUSH
3930: LD_INT 3
3932: ST_TO_ADDR
// hc_sex := sex_female ;
3933: LD_ADDR_OWVAR 27
3937: PUSH
3938: LD_INT 2
3940: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3941: LD_ADDR_OWVAR 33
3945: PUSH
3946: LD_STRING SecondCharsGal
3948: ST_TO_ADDR
// hc_face_number := 46 ;
3949: LD_ADDR_OWVAR 34
3953: PUSH
3954: LD_INT 46
3956: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3957: LD_ADDR_OWVAR 26
3961: PUSH
3962: LD_STRING Sylvia Creak
3964: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
3965: LD_ADDR_OWVAR 29
3969: PUSH
3970: LD_INT 10
3972: PUSH
3973: LD_INT 9
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
3980: LD_ADDR_OWVAR 30
3984: PUSH
3985: LD_INT 0
3987: PUSH
3988: LD_INT 1
3990: PUSH
3991: LD_INT 1
3993: PUSH
3994: LD_INT 1
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4003: LD_ADDR_OWVAR 31
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: LD_INT 3
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 1
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: ST_TO_ADDR
// un = CreateHuman ;
4026: LD_ADDR_VAR 0 3
4030: PUSH
4031: CALL_OW 44
4035: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4036: LD_VAR 0 3
4040: PPUSH
4041: LD_INT 12
4043: PPUSH
4044: LD_INT 1
4046: PPUSH
4047: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4051: LD_VAR 0 3
4055: PPUSH
4056: CALL_OW 87
// wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// DialogueOn ;
4067: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_STRING D11e-FSol4-1
4078: PPUSH
4079: CALL_OW 88
// DialogueOff ;
4083: CALL_OW 7
// end ; if number = 5 then
4087: LD_VAR 0 1
4091: PUSH
4092: LD_INT 5
4094: EQUAL
4095: IFFALSE 4271
// begin hc_class := 1 ;
4097: LD_ADDR_OWVAR 28
4101: PUSH
4102: LD_INT 1
4104: ST_TO_ADDR
// hc_sex := sex_female ;
4105: LD_ADDR_OWVAR 27
4109: PUSH
4110: LD_INT 2
4112: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4113: LD_ADDR_OWVAR 33
4117: PUSH
4118: LD_STRING SecondCharsGal
4120: ST_TO_ADDR
// hc_face_number := 37 ;
4121: LD_ADDR_OWVAR 34
4125: PUSH
4126: LD_INT 37
4128: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4129: LD_ADDR_OWVAR 26
4133: PUSH
4134: LD_STRING Margherite Simpson
4136: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4137: LD_ADDR_OWVAR 29
4141: PUSH
4142: LD_INT 11
4144: PUSH
4145: LD_INT 10
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4152: LD_ADDR_OWVAR 30
4156: PUSH
4157: LD_INT 1
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4175: LD_ADDR_OWVAR 31
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: LD_INT 1
4185: PUSH
4186: LD_INT 1
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: ST_TO_ADDR
// un = CreateHuman ;
4198: LD_ADDR_VAR 0 3
4202: PUSH
4203: CALL_OW 44
4207: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 12
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: CALL_OW 87
// wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// DialogueOn ;
4239: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4243: LD_VAR 0 3
4247: PPUSH
4248: LD_STRING D11c-FSol3-1
4250: PPUSH
4251: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4255: LD_EXP 1
4259: PPUSH
4260: LD_STRING D11c-JMM-1
4262: PPUSH
4263: CALL_OW 88
// DialogueOff ;
4267: CALL_OW 7
// end ; if number = 6 then
4271: LD_VAR 0 1
4275: PUSH
4276: LD_INT 6
4278: EQUAL
4279: IFFALSE 4453
// begin hc_class := 1 ;
4281: LD_ADDR_OWVAR 28
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// hc_sex := sex_male ;
4289: LD_ADDR_OWVAR 27
4293: PUSH
4294: LD_INT 1
4296: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4297: LD_ADDR_OWVAR 33
4301: PUSH
4302: LD_STRING AmGalRemake
4304: ST_TO_ADDR
// hc_face_number := 1 ;
4305: LD_ADDR_OWVAR 34
4309: PUSH
4310: LD_INT 1
4312: ST_TO_ADDR
// hc_name := Charles Brown ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING Charles Brown
4320: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4321: LD_ADDR_OWVAR 29
4325: PUSH
4326: LD_INT 12
4328: PUSH
4329: LD_INT 11
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4336: LD_ADDR_OWVAR 30
4340: PUSH
4341: LD_INT 2
4343: PUSH
4344: LD_INT 0
4346: PUSH
4347: LD_INT 0
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4359: LD_ADDR_OWVAR 31
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: LD_INT 0
4369: PUSH
4370: LD_INT 1
4372: PUSH
4373: LD_INT 1
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: ST_TO_ADDR
// un = CreateHuman ;
4382: LD_ADDR_VAR 0 3
4386: PUSH
4387: CALL_OW 44
4391: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4392: LD_VAR 0 3
4396: PPUSH
4397: LD_INT 12
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4407: LD_VAR 0 3
4411: PPUSH
4412: CALL_OW 87
// wait ( 0 0$1 ) ;
4416: LD_INT 35
4418: PPUSH
4419: CALL_OW 67
// DialogueOn ;
4423: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4427: LD_VAR 0 3
4431: PPUSH
4432: LD_STRING D4-Sol1-5
4434: PPUSH
4435: CALL_OW 88
// DialogueOff ;
4439: CALL_OW 7
// tempCharles = un ;
4443: LD_ADDR_EXP 13
4447: PUSH
4448: LD_VAR 0 3
4452: ST_TO_ADDR
// end ; if number = 7 then
4453: LD_VAR 0 1
4457: PUSH
4458: LD_INT 7
4460: EQUAL
4461: IFFALSE 4625
// begin hc_class := 1 ;
4463: LD_ADDR_OWVAR 28
4467: PUSH
4468: LD_INT 1
4470: ST_TO_ADDR
// hc_sex := sex_female ;
4471: LD_ADDR_OWVAR 27
4475: PUSH
4476: LD_INT 2
4478: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4479: LD_ADDR_OWVAR 33
4483: PUSH
4484: LD_STRING AmGalRemake
4486: ST_TO_ADDR
// hc_face_number := 2 ;
4487: LD_ADDR_OWVAR 34
4491: PUSH
4492: LD_INT 2
4494: ST_TO_ADDR
// hc_name := Johanna Holland ;
4495: LD_ADDR_OWVAR 26
4499: PUSH
4500: LD_STRING Johanna Holland
4502: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4503: LD_ADDR_OWVAR 29
4507: PUSH
4508: LD_INT 10
4510: PUSH
4511: LD_INT 10
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4518: LD_ADDR_OWVAR 30
4522: PUSH
4523: LD_INT 1
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 0
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4541: LD_ADDR_OWVAR 31
4545: PUSH
4546: LD_INT 1
4548: PUSH
4549: LD_INT 0
4551: PUSH
4552: LD_INT 0
4554: PUSH
4555: LD_INT 1
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: ST_TO_ADDR
// un = CreateHuman ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: CALL_OW 44
4573: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4574: LD_VAR 0 3
4578: PPUSH
4579: LD_INT 12
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4589: LD_VAR 0 3
4593: PPUSH
4594: CALL_OW 87
// wait ( 0 0$1 ) ;
4598: LD_INT 35
4600: PPUSH
4601: CALL_OW 67
// DialogueOn ;
4605: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4609: LD_VAR 0 3
4613: PPUSH
4614: LD_STRING D11a-FSol2-1
4616: PPUSH
4617: CALL_OW 88
// DialogueOff ;
4621: CALL_OW 7
// end ; end ; end_of_file
4625: LD_VAR 0 2
4629: RET
// export function PrepareRussian ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4634: LD_INT 3
4636: PPUSH
4637: LD_INT 3
4639: PPUSH
4640: LD_INT 2
4642: PPUSH
4643: LD_EXP 34
4647: PPUSH
4648: LD_EXP 35
4652: PPUSH
4653: CALL_OW 12
4657: PPUSH
4658: LD_INT 2
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: CALL 5277 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4668: LD_INT 3
4670: PPUSH
4671: LD_INT 3
4673: PPUSH
4674: LD_INT 8
4676: PPUSH
4677: LD_EXP 34
4681: PPUSH
4682: LD_EXP 35
4686: PPUSH
4687: CALL_OW 12
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_INT 4
4697: PPUSH
4698: CALL 5277 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4702: LD_INT 3
4704: PPUSH
4705: LD_INT 3
4707: PPUSH
4708: LD_INT 67
4710: PPUSH
4711: LD_EXP 34
4715: PPUSH
4716: LD_EXP 35
4720: PPUSH
4721: CALL_OW 12
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_INT 2
4731: PPUSH
4732: CALL 5277 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4736: LD_INT 3
4738: PPUSH
4739: LD_INT 3
4741: PPUSH
4742: LD_INT 21
4744: PPUSH
4745: LD_EXP 34
4749: PPUSH
4750: LD_EXP 35
4754: PPUSH
4755: CALL_OW 12
4759: PPUSH
4760: LD_INT 3
4762: PPUSH
4763: LD_INT 6
4765: PPUSH
4766: CALL 5277 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4770: LD_INT 3
4772: PPUSH
4773: LD_INT 3
4775: PPUSH
4776: LD_INT 17
4778: PPUSH
4779: LD_EXP 34
4783: PPUSH
4784: LD_EXP 35
4788: PPUSH
4789: CALL_OW 12
4793: PPUSH
4794: LD_INT 3
4796: PPUSH
4797: LD_INT 6
4799: PPUSH
4800: CALL 5277 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4804: LD_INT 3
4806: PPUSH
4807: LD_INT 3
4809: PPUSH
4810: LD_INT 32
4812: PPUSH
4813: LD_EXP 34
4817: PPUSH
4818: LD_EXP 35
4822: PPUSH
4823: CALL_OW 12
4827: PPUSH
4828: LD_INT 4
4830: PPUSH
4831: LD_INT 2
4833: PPUSH
4834: CALL 5277 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4838: LD_ADDR_VAR 0 2
4842: PUSH
4843: LD_INT 22
4845: PUSH
4846: LD_INT 3
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 30
4865: PUSH
4866: LD_INT 32
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 69
4882: PUSH
4883: FOR_IN
4884: IFFALSE 4924
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4886: LD_INT 3
4888: PPUSH
4889: LD_INT 3
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 1
4917: PPUSH
4918: CALL 5277 0 6
4922: GO 4883
4924: POP
4925: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: LD_INT 22
4933: PUSH
4934: LD_INT 3
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 21
4943: PUSH
4944: LD_INT 3
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 30
4953: PUSH
4954: LD_INT 31
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PPUSH
4966: CALL_OW 69
4970: PUSH
4971: FOR_IN
4972: IFFALSE 5000
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4974: LD_EXP 34
4978: PPUSH
4979: LD_EXP 35
4983: PPUSH
4984: CALL_OW 12
4988: PPUSH
4989: LD_VAR 0 2
4993: PPUSH
4994: CALL 5387 0 2
4998: GO 4971
5000: POP
5001: POP
// end ; end_of_file
5002: LD_VAR 0 1
5006: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5007: LD_INT 0
5009: PPUSH
5010: PPUSH
// if exist_mode then
5011: LD_VAR 0 2
5015: IFFALSE 5040
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5017: LD_ADDR_VAR 0 4
5021: PUSH
5022: LD_EXP 42
5026: PUSH
5027: LD_VAR 0 1
5031: STR
5032: PPUSH
5033: CALL_OW 34
5037: ST_TO_ADDR
// end else
5038: GO 5055
// begin unit := NewCharacter ( ident ) ;
5040: LD_ADDR_VAR 0 4
5044: PUSH
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 25
5054: ST_TO_ADDR
// end ; result := unit ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_VAR 0 4
5064: ST_TO_ADDR
// end ;
5065: LD_VAR 0 3
5069: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5070: LD_INT 0
5072: PPUSH
5073: PPUSH
5074: PPUSH
// rnd = rand ( 1 , characters ) ;
5075: LD_ADDR_VAR 0 6
5079: PUSH
5080: LD_INT 1
5082: PPUSH
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 12
5092: ST_TO_ADDR
// for i = 1 to characters do
5093: LD_ADDR_VAR 0 5
5097: PUSH
5098: DOUBLE
5099: LD_INT 1
5101: DEC
5102: ST_TO_ADDR
5103: LD_VAR 0 1
5107: PUSH
5108: FOR_TO
5109: IFFALSE 5219
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5111: LD_VAR 0 5
5115: PUSH
5116: LD_VAR 0 6
5120: EQUAL
5121: PUSH
5122: LD_VAR 0 1
5126: PUSH
5127: LD_VAR 0 5
5131: ARRAY
5132: PPUSH
5133: CALL_OW 258
5137: PUSH
5138: LD_INT 1
5140: EQUAL
5141: AND
5142: IFFALSE 5164
// Say ( characters [ i ] , dialogMID ) ;
5144: LD_VAR 0 1
5148: PUSH
5149: LD_VAR 0 5
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5164: LD_VAR 0 5
5168: PUSH
5169: LD_VAR 0 6
5173: EQUAL
5174: PUSH
5175: LD_VAR 0 1
5179: PUSH
5180: LD_VAR 0 5
5184: ARRAY
5185: PPUSH
5186: CALL_OW 258
5190: PUSH
5191: LD_INT 2
5193: EQUAL
5194: AND
5195: IFFALSE 5217
// Say ( characters [ i ] , dialogFID ) ;
5197: LD_VAR 0 1
5201: PUSH
5202: LD_VAR 0 5
5206: ARRAY
5207: PPUSH
5208: LD_VAR 0 3
5212: PPUSH
5213: CALL_OW 88
// end ;
5217: GO 5108
5219: POP
5220: POP
// end ;
5221: LD_VAR 0 4
5225: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5226: LD_INT 0
5228: PPUSH
5229: PPUSH
// for i in charactersList do
5230: LD_ADDR_VAR 0 4
5234: PUSH
5235: LD_VAR 0 1
5239: PUSH
5240: FOR_IN
5241: IFFALSE 5270
// begin if IsOk ( i ) then
5243: LD_VAR 0 4
5247: PPUSH
5248: CALL_OW 302
5252: IFFALSE 5268
// SaveCharacters ( i , ident ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 38
// end ;
5268: GO 5240
5270: POP
5271: POP
// end ;
5272: LD_VAR 0 3
5276: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5277: LD_INT 0
5279: PPUSH
5280: PPUSH
5281: PPUSH
5282: PPUSH
// for i = 1 to count do
5283: LD_ADDR_VAR 0 8
5287: PUSH
5288: DOUBLE
5289: LD_INT 1
5291: DEC
5292: ST_TO_ADDR
5293: LD_VAR 0 6
5297: PUSH
5298: FOR_TO
5299: IFFALSE 5380
// begin uc_side = side ;
5301: LD_ADDR_OWVAR 20
5305: PUSH
5306: LD_VAR 0 1
5310: ST_TO_ADDR
// uc_nation = nation ;
5311: LD_ADDR_OWVAR 21
5315: PUSH
5316: LD_VAR 0 2
5320: ST_TO_ADDR
// hc_gallery =  ;
5321: LD_ADDR_OWVAR 33
5325: PUSH
5326: LD_STRING 
5328: ST_TO_ADDR
// hc_name =  ;
5329: LD_ADDR_OWVAR 26
5333: PUSH
5334: LD_STRING 
5336: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_VAR 0 5
5344: PPUSH
5345: LD_VAR 0 4
5349: PPUSH
5350: CALL_OW 380
// un = CreateHuman ;
5354: LD_ADDR_VAR 0 10
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5364: LD_VAR 0 10
5368: PPUSH
5369: LD_VAR 0 3
5373: PPUSH
5374: CALL_OW 52
// end ;
5378: GO 5298
5380: POP
5381: POP
// end ;
5382: LD_VAR 0 7
5386: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5387: LD_INT 0
5389: PPUSH
5390: PPUSH
5391: PPUSH
// uc_side := GetSide ( b ) ;
5392: LD_ADDR_OWVAR 20
5396: PUSH
5397: LD_VAR 0 2
5401: PPUSH
5402: CALL_OW 255
5406: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5407: LD_ADDR_OWVAR 21
5411: PUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 248
5421: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 1
5427: PPUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5437: LD_ADDR_VAR 0 5
5441: PUSH
5442: LD_VAR 0 2
5446: PPUSH
5447: CALL_OW 254
5451: PUSH
5452: LD_INT 3
5454: MINUS
5455: ST_TO_ADDR
// if dir < 0 then
5456: LD_VAR 0 5
5460: PUSH
5461: LD_INT 0
5463: LESS
5464: IFFALSE 5480
// dir := 6 + dir ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_INT 6
5473: PUSH
5474: LD_VAR 0 5
5478: PLUS
5479: ST_TO_ADDR
// un := CreateHuman ;
5480: LD_ADDR_VAR 0 4
5484: PUSH
5485: CALL_OW 44
5489: ST_TO_ADDR
// SetDir ( un , dir ) ;
5490: LD_VAR 0 4
5494: PPUSH
5495: LD_VAR 0 5
5499: PPUSH
5500: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5504: LD_VAR 0 4
5508: PPUSH
5509: LD_VAR 0 2
5513: PPUSH
5514: CALL_OW 52
// end ;
5518: LD_VAR 0 3
5522: RET
// export function PrepareDifficulty ; begin
5523: LD_INT 0
5525: PPUSH
// if Difficulty = 1 then
5526: LD_OWVAR 67
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: IFFALSE 5552
// begin RuSolMinLevel = 3 ;
5536: LD_ADDR_EXP 34
5540: PUSH
5541: LD_INT 3
5543: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5544: LD_ADDR_EXP 35
5548: PUSH
5549: LD_INT 6
5551: ST_TO_ADDR
// end ; if Difficulty = 2 then
5552: LD_OWVAR 67
5556: PUSH
5557: LD_INT 2
5559: EQUAL
5560: IFFALSE 5578
// begin RuSolMinLevel = 5 ;
5562: LD_ADDR_EXP 34
5566: PUSH
5567: LD_INT 5
5569: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5570: LD_ADDR_EXP 35
5574: PUSH
5575: LD_INT 6
5577: ST_TO_ADDR
// end ; if Difficulty = 3 then
5578: LD_OWVAR 67
5582: PUSH
5583: LD_INT 3
5585: EQUAL
5586: IFFALSE 5604
// begin RuSolMinLevel = 5 ;
5588: LD_ADDR_EXP 34
5592: PUSH
5593: LD_INT 5
5595: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5596: LD_ADDR_EXP 35
5600: PUSH
5601: LD_INT 7
5603: ST_TO_ADDR
// end ; end ;
5604: LD_VAR 0 1
5608: RET
// export function ShowQuery1 ; begin
5609: LD_INT 0
5611: PPUSH
// case query ( QKill ) of 1 :
5612: LD_STRING QKill
5614: PPUSH
5615: CALL_OW 97
5619: PUSH
5620: LD_INT 1
5622: DOUBLE
5623: EQUAL
5624: IFTRUE 5628
5626: GO 5639
5628: POP
// begin result = 1 ;
5629: LD_ADDR_VAR 0 1
5633: PUSH
5634: LD_INT 1
5636: ST_TO_ADDR
// end ; 2 :
5637: GO 5678
5639: LD_INT 2
5641: DOUBLE
5642: EQUAL
5643: IFTRUE 5647
5645: GO 5658
5647: POP
// begin result = 2 ;
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_INT 2
5655: ST_TO_ADDR
// end ; 3 :
5656: GO 5678
5658: LD_INT 3
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5666
5664: GO 5677
5666: POP
// begin result = 3 ;
5667: LD_ADDR_VAR 0 1
5671: PUSH
5672: LD_INT 3
5674: ST_TO_ADDR
// end ; end ;
5675: GO 5678
5677: POP
// end ;
5678: LD_VAR 0 1
5682: RET
// export function ShowQuery2 ; begin
5683: LD_INT 0
5685: PPUSH
// case query ( QKill2 ) of 1 :
5686: LD_STRING QKill2
5688: PPUSH
5689: CALL_OW 97
5693: PUSH
5694: LD_INT 1
5696: DOUBLE
5697: EQUAL
5698: IFTRUE 5702
5700: GO 5713
5702: POP
// begin result = 1 ;
5703: LD_ADDR_VAR 0 1
5707: PUSH
5708: LD_INT 1
5710: ST_TO_ADDR
// end ; 2 :
5711: GO 5733
5713: LD_INT 2
5715: DOUBLE
5716: EQUAL
5717: IFTRUE 5721
5719: GO 5732
5721: POP
// begin result = 2 ;
5722: LD_ADDR_VAR 0 1
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// end ; end ;
5730: GO 5733
5732: POP
// end ;
5733: LD_VAR 0 1
5737: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5738: LD_INT 0
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
// for i = 1 to 72 do
5744: LD_ADDR_VAR 0 5
5748: PUSH
5749: DOUBLE
5750: LD_INT 1
5752: DEC
5753: ST_TO_ADDR
5754: LD_INT 72
5756: PUSH
5757: FOR_TO
5758: IFFALSE 5816
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5760: LD_VAR 0 5
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 321
5774: PUSH
5775: LD_INT 1
5777: EQUAL
5778: PUSH
5779: LD_VAR 0 5
5783: PPUSH
5784: LD_VAR 0 3
5788: PPUSH
5789: CALL_OW 482
5793: PUSH
5794: LD_INT 1
5796: EQUAL
5797: AND
5798: IFFALSE 5814
// AddComResearch ( lab , i ) ;
5800: LD_VAR 0 2
5804: PPUSH
5805: LD_VAR 0 5
5809: PPUSH
5810: CALL_OW 184
5814: GO 5757
5816: POP
5817: POP
// end ;
5818: LD_VAR 0 4
5822: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5823: LD_INT 0
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
5829: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5830: LD_ADDR_VAR 0 6
5834: PUSH
5835: LD_INT 22
5837: PUSH
5838: LD_VAR 0 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 2
5849: PUSH
5850: LD_INT 25
5852: PUSH
5853: LD_INT 2
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 16
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 24
5877: PUSH
5878: LD_INT 1000
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 69
5894: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5895: LD_ADDR_VAR 0 4
5899: PUSH
5900: LD_INT 22
5902: PUSH
5903: LD_VAR 0 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 21
5914: PUSH
5915: LD_INT 3
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: LD_INT 24
5927: PUSH
5928: LD_INT 1000
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: PPUSH
5947: CALL_OW 69
5951: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5952: LD_VAR 0 4
5956: PUSH
5957: LD_INT 0
5959: GREATER
5960: PUSH
5961: LD_VAR 0 6
5965: PUSH
5966: LD_INT 0
5968: GREATER
5969: AND
5970: IFFALSE 6036
// begin for i in engineerOk_list do
5972: LD_ADDR_VAR 0 5
5976: PUSH
5977: LD_VAR 0 6
5981: PUSH
5982: FOR_IN
5983: IFFALSE 6034
// begin for j in buildings_list do
5985: LD_ADDR_VAR 0 7
5989: PUSH
5990: LD_VAR 0 4
5994: PUSH
5995: FOR_IN
5996: IFFALSE 6030
// begin AddComExitBuilding ( i ) ;
5998: LD_VAR 0 5
6002: PPUSH
6003: CALL_OW 182
// wait ( 0 0$1 ) ;
6007: LD_INT 35
6009: PPUSH
6010: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
6014: LD_VAR 0 5
6018: PPUSH
6019: LD_VAR 0 7
6023: PPUSH
6024: CALL_OW 190
// end ;
6028: GO 5995
6030: POP
6031: POP
// end ;
6032: GO 5982
6034: POP
6035: POP
// end ; if buildings_list = 0 then
6036: LD_VAR 0 4
6040: PUSH
6041: LD_INT 0
6043: EQUAL
6044: IFFALSE 6077
// begin for i in engineerOK_list do
6046: LD_ADDR_VAR 0 5
6050: PUSH
6051: LD_VAR 0 6
6055: PUSH
6056: FOR_IN
6057: IFFALSE 6075
// begin ComEnterUnit ( i , building ) ;
6059: LD_VAR 0 5
6063: PPUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: CALL_OW 120
// end ;
6073: GO 6056
6075: POP
6076: POP
// end ; end ;
6077: LD_VAR 0 3
6081: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6082: LD_INT 0
6084: PPUSH
6085: PPUSH
6086: PPUSH
6087: PPUSH
6088: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6089: LD_ADDR_VAR 0 6
6093: PUSH
6094: LD_INT 22
6096: PUSH
6097: LD_VAR 0 1
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 4
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PPUSH
6120: CALL_OW 69
6124: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6125: LD_ADDR_VAR 0 9
6129: PUSH
6130: LD_VAR 0 3
6134: PPUSH
6135: LD_INT 22
6137: PUSH
6138: LD_VAR 0 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 21
6149: PUSH
6150: LD_INT 1
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 3
6159: PUSH
6160: LD_INT 25
6162: PUSH
6163: LD_INT 3
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: LD_INT 24
6179: PUSH
6180: LD_INT 750
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 70
6201: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6202: LD_VAR 0 9
6206: PUSH
6207: LD_INT 0
6209: GREATER
6210: PUSH
6211: LD_VAR 0 6
6215: PUSH
6216: LD_INT 0
6218: GREATER
6219: AND
6220: IFFALSE 6347
// begin for i = 1 to damageUnits do
6222: LD_ADDR_VAR 0 7
6226: PUSH
6227: DOUBLE
6228: LD_INT 1
6230: DEC
6231: ST_TO_ADDR
6232: LD_VAR 0 9
6236: PUSH
6237: FOR_TO
6238: IFFALSE 6262
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6240: LD_VAR 0 9
6244: PUSH
6245: LD_VAR 0 7
6249: ARRAY
6250: PPUSH
6251: LD_VAR 0 2
6255: PPUSH
6256: CALL_OW 113
6260: GO 6237
6262: POP
6263: POP
// for i in sci_list do
6264: LD_ADDR_VAR 0 7
6268: PUSH
6269: LD_VAR 0 6
6273: PUSH
6274: FOR_IN
6275: IFFALSE 6343
// begin ComExitBuilding ( i ) ;
6277: LD_VAR 0 7
6281: PPUSH
6282: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6286: LD_ADDR_VAR 0 8
6290: PUSH
6291: LD_VAR 0 2
6295: PPUSH
6296: LD_INT 22
6298: PUSH
6299: LD_VAR 0 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PPUSH
6308: CALL_OW 70
6312: PUSH
6313: FOR_IN
6314: IFFALSE 6339
// begin AddComHeal ( i , j ) ;
6316: LD_VAR 0 7
6320: PPUSH
6321: LD_VAR 0 8
6325: PPUSH
6326: CALL_OW 188
// wait ( 1 1$0 ) ;
6330: LD_INT 2100
6332: PPUSH
6333: CALL_OW 67
// end ;
6337: GO 6313
6339: POP
6340: POP
// end ;
6341: GO 6274
6343: POP
6344: POP
// end else
6345: GO 6361
// begin AddComEnterUnit ( sci_list , build ) ;
6347: LD_VAR 0 6
6351: PPUSH
6352: LD_VAR 0 4
6356: PPUSH
6357: CALL_OW 180
// end ; end ;
6361: LD_VAR 0 5
6365: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6371: LD_INT 22
6373: PUSH
6374: LD_VAR 0 1
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 21
6385: PUSH
6386: LD_INT 2
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PPUSH
6397: CALL_OW 69
6401: PUSH
6402: LD_VAR 0 3
6406: LESSEQUAL
6407: IFFALSE 6515
// begin for i = 1 to vehCount do
6409: LD_ADDR_VAR 0 9
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_VAR 0 3
6423: PUSH
6424: FOR_TO
6425: IFFALSE 6513
// begin weapon = weaponTab [ i ] ;
6427: LD_ADDR_VAR 0 10
6431: PUSH
6432: LD_VAR 0 4
6436: PUSH
6437: LD_VAR 0 9
6441: ARRAY
6442: ST_TO_ADDR
// if weapon = 46 then
6443: LD_VAR 0 10
6447: PUSH
6448: LD_INT 46
6450: EQUAL
6451: IFFALSE 6482
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6453: LD_VAR 0 2
6457: PPUSH
6458: LD_INT 24
6460: PPUSH
6461: LD_VAR 0 5
6465: PPUSH
6466: LD_VAR 0 6
6470: PPUSH
6471: LD_VAR 0 10
6475: PPUSH
6476: CALL_OW 185
// end else
6480: GO 6511
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_VAR 0 7
6491: PPUSH
6492: LD_VAR 0 5
6496: PPUSH
6497: LD_VAR 0 6
6501: PPUSH
6502: LD_VAR 0 10
6506: PPUSH
6507: CALL_OW 185
// end ; end ;
6511: GO 6424
6513: POP
6514: POP
// end ; end ;
6515: LD_VAR 0 8
6519: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6520: LD_INT 0
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
6526: PPUSH
// for i := 1 to russianTanks do
6527: LD_ADDR_VAR 0 4
6531: PUSH
6532: DOUBLE
6533: LD_INT 1
6535: DEC
6536: ST_TO_ADDR
6537: LD_EXP 36
6541: PUSH
6542: FOR_TO
6543: IFFALSE 7025
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6545: LD_VAR 0 4
6549: PUSH
6550: LD_INT 5
6552: PUSH
6553: LD_INT 6
6555: PUSH
6556: LD_INT 6
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: LD_OWVAR 67
6568: ARRAY
6569: EQUAL
6570: IFFALSE 7023
// begin repeat wait ( 0 0$1 ) ;
6572: LD_INT 35
6574: PPUSH
6575: CALL_OW 67
// for i in russianTanks do
6579: LD_ADDR_VAR 0 4
6583: PUSH
6584: LD_EXP 36
6588: PUSH
6589: FOR_IN
6590: IFFALSE 7011
// begin if GetLives ( i ) < 659 then
6592: LD_VAR 0 4
6596: PPUSH
6597: CALL_OW 256
6601: PUSH
6602: LD_INT 659
6604: LESS
6605: IFFALSE 6693
// begin tmp = i ;
6607: LD_ADDR_VAR 0 5
6611: PUSH
6612: LD_VAR 0 4
6616: ST_TO_ADDR
// for i := 1 to russianTanks do
6617: LD_ADDR_VAR 0 4
6621: PUSH
6622: DOUBLE
6623: LD_INT 1
6625: DEC
6626: ST_TO_ADDR
6627: LD_EXP 36
6631: PUSH
6632: FOR_TO
6633: IFFALSE 6691
// begin if tmp = russianTanks [ i ] then
6635: LD_VAR 0 5
6639: PUSH
6640: LD_EXP 36
6644: PUSH
6645: LD_VAR 0 4
6649: ARRAY
6650: EQUAL
6651: IFFALSE 6689
// begin russianTanks = Delete ( russianTanks , i ) ;
6653: LD_ADDR_EXP 36
6657: PUSH
6658: LD_EXP 36
6662: PPUSH
6663: LD_VAR 0 4
6667: PPUSH
6668: CALL_OW 3
6672: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6673: LD_ADDR_EXP 37
6677: PUSH
6678: LD_EXP 37
6682: PUSH
6683: LD_VAR 0 5
6687: ADD
6688: ST_TO_ADDR
// end ; end ;
6689: GO 6632
6691: POP
6692: POP
// end ; wait ( 0 0$1 ) ;
6693: LD_INT 35
6695: PPUSH
6696: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6700: LD_INT 23
6702: PPUSH
6703: LD_INT 22
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 70
6717: PUSH
6718: LD_INT 2
6720: GREATER
6721: IFFALSE 6831
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6723: LD_ADDR_VAR 0 6
6727: PUSH
6728: LD_INT 22
6730: PUSH
6731: LD_VAR 0 2
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: PPUSH
6745: LD_VAR 0 4
6749: PPUSH
6750: CALL_OW 74
6754: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6755: LD_ADDR_VAR 0 7
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 2
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: LD_INT 59
6777: PUSH
6778: EMPTY
6779: LIST
6780: PUSH
6781: LD_INT 21
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 2
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: EMPTY
6812: LIST
6813: PPUSH
6814: CALL_OW 69
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: CALL_OW 74
6828: ST_TO_ADDR
// end else
6829: GO 6943
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: LD_INT 23
6838: PPUSH
6839: LD_INT 22
6841: PUSH
6842: LD_VAR 0 2
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 71
6855: PPUSH
6856: LD_VAR 0 4
6860: PPUSH
6861: CALL_OW 74
6865: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6866: LD_ADDR_VAR 0 7
6870: PUSH
6871: LD_INT 23
6873: PPUSH
6874: LD_INT 22
6876: PUSH
6877: LD_VAR 0 2
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 59
6891: PUSH
6892: EMPTY
6893: LIST
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 21
6907: PUSH
6908: LD_INT 2
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: PPUSH
6928: CALL_OW 71
6932: PPUSH
6933: LD_VAR 0 4
6937: PPUSH
6938: CALL_OW 74
6942: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6943: LD_VAR 0 4
6947: PPUSH
6948: LD_VAR 0 6
6952: PPUSH
6953: CALL_OW 296
6957: PUSH
6958: LD_INT 8
6960: PLUS
6961: PUSH
6962: LD_VAR 0 4
6966: PPUSH
6967: LD_VAR 0 7
6971: PPUSH
6972: CALL_OW 296
6976: LESS
6977: IFFALSE 6995
// begin ComAttackUnit ( i , target1 ) ;
6979: LD_VAR 0 4
6983: PPUSH
6984: LD_VAR 0 6
6988: PPUSH
6989: CALL_OW 115
// end else
6993: GO 7009
// begin ComAttackUnit ( i , target2 ) ;
6995: LD_VAR 0 4
6999: PPUSH
7000: LD_VAR 0 7
7004: PPUSH
7005: CALL_OW 115
// end ; end ;
7009: GO 6589
7011: POP
7012: POP
// until russianTanks = 0 ;
7013: LD_EXP 36
7017: PUSH
7018: LD_INT 0
7020: EQUAL
7021: IFFALSE 6572
// end ; end ;
7023: GO 6542
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 3
7031: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7032: LD_INT 0
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7043: LD_ADDR_VAR 0 8
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_VAR 0 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 21
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 24
7072: PUSH
7073: LD_INT 660
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 58
7085: PUSH
7086: EMPTY
7087: LIST
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 34
7094: PUSH
7095: LD_INT 43
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 34
7104: PUSH
7105: LD_INT 44
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 34
7114: PUSH
7115: LD_INT 46
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7144: LD_ADDR_VAR 0 9
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_VAR 0 1
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 21
7163: PUSH
7164: LD_INT 2
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 3
7173: PUSH
7174: LD_INT 24
7176: PUSH
7177: LD_INT 660
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7198: LD_ADDR_VAR 0 10
7202: PUSH
7203: LD_VAR 0 2
7207: PPUSH
7208: LD_INT 22
7210: PUSH
7211: LD_VAR 0 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 21
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: LD_INT 24
7235: PUSH
7236: LD_INT 1000
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: PPUSH
7252: CALL_OW 70
7256: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: LD_VAR 0 2
7266: PPUSH
7267: LD_INT 22
7269: PUSH
7270: LD_VAR 0 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 24
7291: PUSH
7292: LD_INT 1000
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 58
7301: PUSH
7302: EMPTY
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: PPUSH
7311: CALL_OW 70
7315: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7316: LD_ADDR_VAR 0 12
7320: PUSH
7321: EMPTY
7322: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7323: LD_ADDR_VAR 0 13
7327: PUSH
7328: LD_VAR 0 2
7332: PPUSH
7333: LD_INT 22
7335: PUSH
7336: LD_VAR 0 1
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 25
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PPUSH
7359: CALL_OW 70
7363: ST_TO_ADDR
// if damageVehicle_list > 0 then
7364: LD_VAR 0 9
7368: PUSH
7369: LD_INT 0
7371: GREATER
7372: IFFALSE 7410
// for i in damageVehicle_list do
7374: LD_ADDR_VAR 0 6
7378: PUSH
7379: LD_VAR 0 9
7383: PUSH
7384: FOR_IN
7385: IFFALSE 7408
// ComMoveXY ( i , repX , repY ) ;
7387: LD_VAR 0 6
7391: PPUSH
7392: LD_VAR 0 3
7396: PPUSH
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 111
7406: GO 7384
7408: POP
7409: POP
// if vehicleNeedRepair_list > 0 then
7410: LD_VAR 0 10
7414: PUSH
7415: LD_INT 0
7417: GREATER
7418: IFFALSE 7505
// begin for i in vehicleNeedRepair_list do
7420: LD_ADDR_VAR 0 6
7424: PUSH
7425: LD_VAR 0 10
7429: PUSH
7430: FOR_IN
7431: IFFALSE 7503
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7433: LD_ADDR_VAR 0 12
7437: PUSH
7438: LD_VAR 0 12
7442: PUSH
7443: LD_VAR 0 6
7447: PPUSH
7448: CALL_OW 313
7452: ADD
7453: ST_TO_ADDR
// for j in mechanicInside_list do
7454: LD_ADDR_VAR 0 7
7458: PUSH
7459: LD_VAR 0 12
7463: PUSH
7464: FOR_IN
7465: IFFALSE 7499
// begin ComExitVehicle ( j ) ;
7467: LD_VAR 0 7
7471: PPUSH
7472: CALL_OW 121
// wait ( 0 0$1 ) ;
7476: LD_INT 35
7478: PPUSH
7479: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7483: LD_VAR 0 7
7487: PPUSH
7488: LD_VAR 0 6
7492: PPUSH
7493: CALL_OW 189
// end ;
7497: GO 7464
7499: POP
7500: POP
// end ;
7501: GO 7430
7503: POP
7504: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7505: LD_VAR 0 11
7509: PUSH
7510: LD_INT 0
7512: GREATER
7513: IFFALSE 7537
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7515: LD_VAR 0 13
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: LD_VAR 0 11
7528: PUSH
7529: LD_INT 1
7531: ARRAY
7532: PPUSH
7533: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7537: LD_VAR 0 8
7541: PUSH
7542: LD_INT 0
7544: GREATER
7545: PUSH
7546: LD_EXP 37
7550: PUSH
7551: LD_INT 0
7553: GREATER
7554: AND
7555: IFFALSE 7798
// begin for i := 1 to vehicleOK_list do
7557: LD_ADDR_VAR 0 6
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_VAR 0 8
7571: PUSH
7572: FOR_TO
7573: IFFALSE 7796
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7575: LD_VAR 0 6
7579: PUSH
7580: LD_INT 5
7582: PUSH
7583: LD_INT 6
7585: PUSH
7586: LD_INT 6
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_OWVAR 67
7598: ARRAY
7599: EQUAL
7600: IFFALSE 7794
// begin for i in vehicleOk_list do
7602: LD_ADDR_VAR 0 6
7606: PUSH
7607: LD_VAR 0 8
7611: PUSH
7612: FOR_IN
7613: IFFALSE 7633
// russianTanks = russianTanks ^ i ;
7615: LD_ADDR_EXP 36
7619: PUSH
7620: LD_EXP 36
7624: PUSH
7625: LD_VAR 0 6
7629: ADD
7630: ST_TO_ADDR
7631: GO 7612
7633: POP
7634: POP
// for i in vehicleOK_list do
7635: LD_ADDR_VAR 0 6
7639: PUSH
7640: LD_VAR 0 8
7644: PUSH
7645: FOR_IN
7646: IFFALSE 7662
// SetFuel ( i , 100 ) ;
7648: LD_VAR 0 6
7652: PPUSH
7653: LD_INT 100
7655: PPUSH
7656: CALL_OW 240
7660: GO 7645
7662: POP
7663: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7664: LD_ADDR_EXP 37
7668: PUSH
7669: LD_EXP 37
7673: PPUSH
7674: LD_INT 1
7676: PPUSH
7677: CALL_OW 3
7681: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7682: LD_ADDR_EXP 37
7686: PUSH
7687: LD_EXP 37
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: CALL_OW 3
7699: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7700: LD_ADDR_EXP 37
7704: PUSH
7705: LD_EXP 37
7709: PPUSH
7710: LD_INT 1
7712: PPUSH
7713: CALL_OW 3
7717: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7718: LD_ADDR_EXP 37
7722: PUSH
7723: LD_EXP 37
7727: PPUSH
7728: LD_INT 1
7730: PPUSH
7731: CALL_OW 3
7735: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7736: LD_ADDR_EXP 37
7740: PUSH
7741: LD_EXP 37
7745: PPUSH
7746: LD_INT 1
7748: PPUSH
7749: CALL_OW 3
7753: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7754: LD_OWVAR 67
7758: PUSH
7759: LD_INT 2
7761: EQUAL
7762: PUSH
7763: LD_OWVAR 67
7767: PUSH
7768: LD_INT 3
7770: EQUAL
7771: OR
7772: IFFALSE 7792
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7774: LD_ADDR_EXP 37
7778: PUSH
7779: LD_EXP 37
7783: PPUSH
7784: LD_INT 1
7786: PPUSH
7787: CALL_OW 3
7791: ST_TO_ADDR
// break ;
7792: GO 7796
// end ; end ;
7794: GO 7572
7796: POP
7797: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7798: LD_ADDR_VAR 0 6
7802: PUSH
7803: LD_VAR 0 2
7807: PPUSH
7808: LD_INT 22
7810: PUSH
7811: LD_VAR 0 1
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 25
7822: PUSH
7823: LD_INT 3
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 70
7838: NOT
7839: PUSH
7840: FOR_IN
7841: IFFALSE 7864
// ComMoveXY ( i , repX , repY ) ;
7843: LD_VAR 0 6
7847: PPUSH
7848: LD_VAR 0 3
7852: PPUSH
7853: LD_VAR 0 4
7857: PPUSH
7858: CALL_OW 111
7862: GO 7840
7864: POP
7865: POP
// end ;
7866: LD_VAR 0 5
7870: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7871: LD_INT 0
7873: PPUSH
7874: PPUSH
7875: PPUSH
7876: PPUSH
// enable ;
7877: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7878: LD_ADDR_VAR 0 7
7882: PUSH
7883: LD_VAR 0 3
7887: PPUSH
7888: CALL_OW 435
7892: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7893: LD_ADDR_VAR 0 6
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_VAR 0 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 34
7912: PUSH
7913: LD_VAR 0 2
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 69
7930: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7931: LD_VAR 0 6
7935: PUSH
7936: LD_INT 0
7938: GREATER
7939: PUSH
7940: LD_VAR 0 3
7944: PPUSH
7945: CALL_OW 435
7949: AND
7950: PUSH
7951: LD_VAR 0 7
7955: PUSH
7956: LD_INT 0
7958: GREATER
7959: AND
7960: IFFALSE 8009
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7962: LD_VAR 0 6
7966: PUSH
7967: LD_INT 1
7969: ARRAY
7970: PPUSH
7971: LD_VAR 0 7
7975: PUSH
7976: LD_INT 1
7978: ARRAY
7979: PPUSH
7980: LD_VAR 0 7
7984: PUSH
7985: LD_INT 2
7987: ARRAY
7988: PPUSH
7989: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7993: LD_VAR 0 6
7997: PUSH
7998: LD_INT 1
8000: ARRAY
8001: PPUSH
8002: LD_INT 100
8004: PPUSH
8005: CALL_OW 240
// end ; end ;
8009: LD_VAR 0 4
8013: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8014: LD_INT 0
8016: PPUSH
8017: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8018: LD_INT 22
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PUSH
8030: LD_INT 25
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PPUSH
8044: CALL_OW 69
8048: PUSH
8049: LD_INT 0
8051: GREATER
8052: PUSH
8053: LD_INT 22
8055: PUSH
8056: LD_VAR 0 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 3
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 3
8077: PUSH
8078: LD_INT 24
8080: PUSH
8081: LD_INT 1000
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: PPUSH
8097: CALL_OW 69
8101: PUSH
8102: LD_INT 0
8104: EQUAL
8105: AND
8106: PUSH
8107: LD_VAR 0 2
8111: PUSH
8112: LD_INT 0
8114: GREATER
8115: AND
8116: IFFALSE 8215
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8118: LD_ADDR_VAR 0 4
8122: PUSH
8123: LD_INT 22
8125: PUSH
8126: LD_VAR 0 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 25
8137: PUSH
8138: LD_INT 2
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PPUSH
8149: CALL_OW 69
8153: PUSH
8154: FOR_IN
8155: IFFALSE 8213
// begin AddComExitBuilding ( i ) ;
8157: LD_VAR 0 4
8161: PPUSH
8162: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8166: LD_VAR 0 4
8170: PPUSH
8171: LD_VAR 0 2
8175: PUSH
8176: LD_INT 1
8178: ARRAY
8179: PPUSH
8180: LD_VAR 0 2
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PPUSH
8189: LD_VAR 0 2
8193: PUSH
8194: LD_INT 3
8196: ARRAY
8197: PPUSH
8198: LD_VAR 0 2
8202: PUSH
8203: LD_INT 4
8205: ARRAY
8206: PPUSH
8207: CALL_OW 205
// end ;
8211: GO 8154
8213: POP
8214: POP
// end ; end ;
8215: LD_VAR 0 3
8219: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
8226: PPUSH
8227: PPUSH
8228: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8229: LD_ADDR_VAR 0 7
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_VAR 0 1
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 25
8248: PUSH
8249: LD_INT 1
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 56
8258: PUSH
8259: EMPTY
8260: LIST
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 700
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8283: LD_ADDR_VAR 0 8
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_VAR 0 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 30
8302: PUSH
8303: LD_INT 32
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 58
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: LD_INT 24
8318: PUSH
8319: LD_INT 251
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL_OW 69
8336: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8337: LD_ADDR_VAR 0 10
8341: PUSH
8342: LD_INT 22
8344: PUSH
8345: LD_VAR 0 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 2
8356: PUSH
8357: LD_INT 25
8359: PUSH
8360: LD_INT 5
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 25
8369: PUSH
8370: LD_INT 8
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: LD_INT 25
8379: PUSH
8380: LD_INT 9
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PPUSH
8397: CALL_OW 69
8401: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8402: LD_ADDR_VAR 0 9
8406: PUSH
8407: LD_VAR 0 2
8411: PPUSH
8412: CALL_OW 313
8416: PUSH
8417: LD_VAR 0 10
8421: DIFF
8422: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8423: LD_VAR 0 8
8427: PUSH
8428: LD_INT 0
8430: EQUAL
8431: PUSH
8432: LD_VAR 0 9
8436: PUSH
8437: LD_INT 0
8439: EQUAL
8440: AND
8441: IFFALSE 8487
// begin for i in soldiers_list do
8443: LD_ADDR_VAR 0 5
8447: PUSH
8448: LD_VAR 0 7
8452: PUSH
8453: FOR_IN
8454: IFFALSE 8483
// begin if IsOK ( build ) then
8456: LD_VAR 0 2
8460: PPUSH
8461: CALL_OW 302
8465: IFFALSE 8481
// ComEnterUnit ( i , build ) ;
8467: LD_VAR 0 5
8471: PPUSH
8472: LD_VAR 0 2
8476: PPUSH
8477: CALL_OW 120
// end ;
8481: GO 8453
8483: POP
8484: POP
// end else
8485: GO 8572
// begin for i = 1 to turretList do
8487: LD_ADDR_VAR 0 5
8491: PUSH
8492: DOUBLE
8493: LD_INT 1
8495: DEC
8496: ST_TO_ADDR
8497: LD_VAR 0 8
8501: PUSH
8502: FOR_TO
8503: IFFALSE 8570
// begin for j = 1 to temp do
8505: LD_ADDR_VAR 0 6
8509: PUSH
8510: DOUBLE
8511: LD_INT 1
8513: DEC
8514: ST_TO_ADDR
8515: LD_VAR 0 9
8519: PUSH
8520: FOR_TO
8521: IFFALSE 8566
// begin ComExitBuilding ( temp [ j ] ) ;
8523: LD_VAR 0 9
8527: PUSH
8528: LD_VAR 0 6
8532: ARRAY
8533: PPUSH
8534: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8538: LD_VAR 0 9
8542: PUSH
8543: LD_VAR 0 6
8547: ARRAY
8548: PPUSH
8549: LD_VAR 0 8
8553: PUSH
8554: LD_VAR 0 5
8558: ARRAY
8559: PPUSH
8560: CALL_OW 180
// end ;
8564: GO 8520
8566: POP
8567: POP
// end ;
8568: GO 8502
8570: POP
8571: POP
// end ; end ;
8572: LD_VAR 0 4
8576: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8584: LD_ADDR_VAR 0 6
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_VAR 0 1
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 30
8606: PUSH
8607: LD_INT 31
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 30
8616: PUSH
8617: LD_INT 32
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 30
8626: PUSH
8627: LD_INT 33
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 30
8636: PUSH
8637: LD_INT 4
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 30
8646: PUSH
8647: LD_INT 5
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 69
8670: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8671: LD_ADDR_VAR 0 7
8675: PUSH
8676: LD_INT 22
8678: PUSH
8679: LD_VAR 0 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 21
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 58
8700: PUSH
8701: EMPTY
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 69
8713: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8714: LD_VAR 0 6
8718: PUSH
8719: LD_INT 0
8721: GREATER
8722: PUSH
8723: LD_VAR 0 7
8727: PUSH
8728: LD_INT 0
8730: GREATER
8731: AND
8732: IFFALSE 8802
// begin for i in turretsList do
8734: LD_ADDR_VAR 0 4
8738: PUSH
8739: LD_VAR 0 6
8743: PUSH
8744: FOR_IN
8745: IFFALSE 8800
// begin for j in enemyBuildings do
8747: LD_ADDR_VAR 0 5
8751: PUSH
8752: LD_VAR 0 7
8756: PUSH
8757: FOR_IN
8758: IFFALSE 8796
// begin if GetDistUnits ( i , j ) < 20 then
8760: LD_VAR 0 4
8764: PPUSH
8765: LD_VAR 0 5
8769: PPUSH
8770: CALL_OW 296
8774: PUSH
8775: LD_INT 20
8777: LESS
8778: IFFALSE 8794
// begin ComAttackUnit ( i , j ) ;
8780: LD_VAR 0 4
8784: PPUSH
8785: LD_VAR 0 5
8789: PPUSH
8790: CALL_OW 115
// end ; end ;
8794: GO 8757
8796: POP
8797: POP
// end ;
8798: GO 8744
8800: POP
8801: POP
// end ; end ;
8802: LD_VAR 0 3
8806: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8807: LD_INT 0
8809: PPUSH
8810: PPUSH
8811: PPUSH
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
// for i = 1 to medicCount do
8820: LD_ADDR_VAR 0 14
8824: PUSH
8825: DOUBLE
8826: LD_INT 1
8828: DEC
8829: ST_TO_ADDR
8830: LD_VAR 0 7
8834: PUSH
8835: FOR_TO
8836: IFFALSE 8918
// begin uc_side = side ;
8838: LD_ADDR_OWVAR 20
8842: PUSH
8843: LD_VAR 0 1
8847: ST_TO_ADDR
// uc_nation = nation ;
8848: LD_ADDR_OWVAR 21
8852: PUSH
8853: LD_VAR 0 2
8857: ST_TO_ADDR
// hc_name =  ;
8858: LD_ADDR_OWVAR 26
8862: PUSH
8863: LD_STRING 
8865: ST_TO_ADDR
// hc_gallery =  ;
8866: LD_ADDR_OWVAR 33
8870: PUSH
8871: LD_STRING 
8873: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8874: LD_INT 0
8876: PPUSH
8877: LD_INT 4
8879: PPUSH
8880: LD_VAR 0 8
8884: PPUSH
8885: CALL_OW 380
// un = CreateHuman ;
8889: LD_ADDR_VAR 0 16
8893: PUSH
8894: CALL_OW 44
8898: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8899: LD_VAR 0 16
8903: PPUSH
8904: LD_VAR 0 9
8908: PPUSH
8909: LD_INT 0
8911: PPUSH
8912: CALL_OW 49
// end ;
8916: GO 8835
8918: POP
8919: POP
// for i = 1 to soldierCount do
8920: LD_ADDR_VAR 0 14
8924: PUSH
8925: DOUBLE
8926: LD_INT 1
8928: DEC
8929: ST_TO_ADDR
8930: LD_VAR 0 3
8934: PUSH
8935: FOR_TO
8936: IFFALSE 9018
// begin uc_side = side ;
8938: LD_ADDR_OWVAR 20
8942: PUSH
8943: LD_VAR 0 1
8947: ST_TO_ADDR
// uc_nation = nation ;
8948: LD_ADDR_OWVAR 21
8952: PUSH
8953: LD_VAR 0 2
8957: ST_TO_ADDR
// hc_name =  ;
8958: LD_ADDR_OWVAR 26
8962: PUSH
8963: LD_STRING 
8965: ST_TO_ADDR
// hc_gallery =  ;
8966: LD_ADDR_OWVAR 33
8970: PUSH
8971: LD_STRING 
8973: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8974: LD_INT 0
8976: PPUSH
8977: LD_INT 1
8979: PPUSH
8980: LD_VAR 0 8
8984: PPUSH
8985: CALL_OW 380
// un = CreateHuman ;
8989: LD_ADDR_VAR 0 16
8993: PUSH
8994: CALL_OW 44
8998: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8999: LD_VAR 0 16
9003: PPUSH
9004: LD_VAR 0 9
9008: PPUSH
9009: LD_INT 0
9011: PPUSH
9012: CALL_OW 49
// end ;
9016: GO 8935
9018: POP
9019: POP
// for i = 1 to sniperCount do
9020: LD_ADDR_VAR 0 14
9024: PUSH
9025: DOUBLE
9026: LD_INT 1
9028: DEC
9029: ST_TO_ADDR
9030: LD_VAR 0 4
9034: PUSH
9035: FOR_TO
9036: IFFALSE 9118
// begin uc_side = side ;
9038: LD_ADDR_OWVAR 20
9042: PUSH
9043: LD_VAR 0 1
9047: ST_TO_ADDR
// uc_nation = nation ;
9048: LD_ADDR_OWVAR 21
9052: PUSH
9053: LD_VAR 0 2
9057: ST_TO_ADDR
// hc_name =  ;
9058: LD_ADDR_OWVAR 26
9062: PUSH
9063: LD_STRING 
9065: ST_TO_ADDR
// hc_gallery =  ;
9066: LD_ADDR_OWVAR 33
9070: PUSH
9071: LD_STRING 
9073: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9074: LD_INT 0
9076: PPUSH
9077: LD_INT 5
9079: PPUSH
9080: LD_VAR 0 8
9084: PPUSH
9085: CALL_OW 380
// un = CreateHuman ;
9089: LD_ADDR_VAR 0 16
9093: PUSH
9094: CALL_OW 44
9098: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9099: LD_VAR 0 16
9103: PPUSH
9104: LD_VAR 0 9
9108: PPUSH
9109: LD_INT 0
9111: PPUSH
9112: CALL_OW 49
// end ;
9116: GO 9035
9118: POP
9119: POP
// for i = 1 to bazookCount do
9120: LD_ADDR_VAR 0 14
9124: PUSH
9125: DOUBLE
9126: LD_INT 1
9128: DEC
9129: ST_TO_ADDR
9130: LD_VAR 0 5
9134: PUSH
9135: FOR_TO
9136: IFFALSE 9218
// begin uc_side = side ;
9138: LD_ADDR_OWVAR 20
9142: PUSH
9143: LD_VAR 0 1
9147: ST_TO_ADDR
// uc_nation = nation ;
9148: LD_ADDR_OWVAR 21
9152: PUSH
9153: LD_VAR 0 2
9157: ST_TO_ADDR
// hc_name =  ;
9158: LD_ADDR_OWVAR 26
9162: PUSH
9163: LD_STRING 
9165: ST_TO_ADDR
// hc_gallery =  ;
9166: LD_ADDR_OWVAR 33
9170: PUSH
9171: LD_STRING 
9173: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9174: LD_INT 0
9176: PPUSH
9177: LD_INT 9
9179: PPUSH
9180: LD_VAR 0 8
9184: PPUSH
9185: CALL_OW 380
// un = CreateHuman ;
9189: LD_ADDR_VAR 0 16
9193: PUSH
9194: CALL_OW 44
9198: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9199: LD_VAR 0 16
9203: PPUSH
9204: LD_VAR 0 9
9208: PPUSH
9209: LD_INT 0
9211: PPUSH
9212: CALL_OW 49
// end ;
9216: GO 9135
9218: POP
9219: POP
// for i = 1 to mortalCount do
9220: LD_ADDR_VAR 0 14
9224: PUSH
9225: DOUBLE
9226: LD_INT 1
9228: DEC
9229: ST_TO_ADDR
9230: LD_VAR 0 6
9234: PUSH
9235: FOR_TO
9236: IFFALSE 9318
// begin uc_side = side ;
9238: LD_ADDR_OWVAR 20
9242: PUSH
9243: LD_VAR 0 1
9247: ST_TO_ADDR
// uc_nation = nation ;
9248: LD_ADDR_OWVAR 21
9252: PUSH
9253: LD_VAR 0 2
9257: ST_TO_ADDR
// hc_name =  ;
9258: LD_ADDR_OWVAR 26
9262: PUSH
9263: LD_STRING 
9265: ST_TO_ADDR
// hc_gallery =  ;
9266: LD_ADDR_OWVAR 33
9270: PUSH
9271: LD_STRING 
9273: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9274: LD_INT 0
9276: PPUSH
9277: LD_INT 8
9279: PPUSH
9280: LD_VAR 0 8
9284: PPUSH
9285: CALL_OW 380
// un = CreateHuman ;
9289: LD_ADDR_VAR 0 16
9293: PUSH
9294: CALL_OW 44
9298: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9299: LD_VAR 0 16
9303: PPUSH
9304: LD_VAR 0 9
9308: PPUSH
9309: LD_INT 0
9311: PPUSH
9312: CALL_OW 49
// end ;
9316: GO 9235
9318: POP
9319: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9320: LD_ADDR_VAR 0 19
9324: PUSH
9325: LD_INT 22
9327: PUSH
9328: LD_VAR 0 1
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: LD_INT 2
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 25
9352: PUSH
9353: LD_INT 5
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 25
9362: PUSH
9363: LD_INT 8
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 25
9372: PUSH
9373: LD_INT 9
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PPUSH
9391: CALL_OW 69
9395: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9396: LD_ADDR_VAR 0 18
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_VAR 0 1
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 25
9415: PUSH
9416: LD_INT 4
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PPUSH
9427: CALL_OW 69
9431: ST_TO_ADDR
// for i in medic_list do
9432: LD_ADDR_VAR 0 14
9436: PUSH
9437: LD_VAR 0 18
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9461
// ComMoveToArea ( i , healArea ) ;
9445: LD_VAR 0 14
9449: PPUSH
9450: LD_VAR 0 10
9454: PPUSH
9455: CALL_OW 113
9459: GO 9442
9461: POP
9462: POP
// if strategy = 1 then
9463: LD_VAR 0 12
9467: PUSH
9468: LD_INT 1
9470: EQUAL
9471: IFFALSE 10176
// begin repeat wait ( 0 0$3 ) ;
9473: LD_INT 105
9475: PPUSH
9476: CALL_OW 67
// for i in soldiersOK_list do
9480: LD_ADDR_VAR 0 14
9484: PUSH
9485: LD_VAR 0 19
9489: PUSH
9490: FOR_IN
9491: IFFALSE 9525
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9493: LD_VAR 0 14
9497: PPUSH
9498: LD_INT 80
9500: PPUSH
9501: LD_INT 109
9503: PPUSH
9504: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9508: LD_VAR 0 14
9512: PPUSH
9513: LD_INT 39
9515: PPUSH
9516: LD_INT 49
9518: PPUSH
9519: CALL_OW 174
// end ;
9523: GO 9490
9525: POP
9526: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9527: LD_INT 15
9529: PPUSH
9530: LD_INT 22
9532: PUSH
9533: LD_VAR 0 1
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 70
9546: PUSH
9547: LD_INT 0
9549: GREATER
9550: IFFALSE 9473
// repeat wait ( 0 0$1 ) ;
9552: LD_INT 35
9554: PPUSH
9555: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9559: LD_ADDR_VAR 0 17
9563: PUSH
9564: LD_INT 22
9566: PUSH
9567: LD_VAR 0 1
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: LD_INT 24
9584: PUSH
9585: LD_INT 550
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 24
9598: PUSH
9599: LD_INT 250
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9620: LD_ADDR_VAR 0 19
9624: PUSH
9625: LD_INT 22
9627: PUSH
9628: LD_VAR 0 1
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: LD_INT 25
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 25
9652: PUSH
9653: LD_INT 5
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 8
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: LD_INT 25
9672: PUSH
9673: LD_INT 9
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 24
9689: PUSH
9690: LD_INT 1000
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: PPUSH
9702: CALL_OW 69
9706: ST_TO_ADDR
// if medicCount > 0 then
9707: LD_VAR 0 7
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9789
// begin if damageUnit_list > 0 then
9717: LD_VAR 0 17
9721: PUSH
9722: LD_INT 0
9724: GREATER
9725: IFFALSE 9789
// begin for i in damageUnit_list do
9727: LD_ADDR_VAR 0 14
9731: PUSH
9732: LD_VAR 0 17
9736: PUSH
9737: FOR_IN
9738: IFFALSE 9787
// begin ComMoveToArea ( i , healArea ) ;
9740: LD_VAR 0 14
9744: PPUSH
9745: LD_VAR 0 10
9749: PPUSH
9750: CALL_OW 113
// for j in medic_list do
9754: LD_ADDR_VAR 0 15
9758: PUSH
9759: LD_VAR 0 18
9763: PUSH
9764: FOR_IN
9765: IFFALSE 9783
// AddComHeal ( j , i ) ;
9767: LD_VAR 0 15
9771: PPUSH
9772: LD_VAR 0 14
9776: PPUSH
9777: CALL_OW 188
9781: GO 9764
9783: POP
9784: POP
// end ;
9785: GO 9737
9787: POP
9788: POP
// end ; end ; for i in soldiersOK_list do
9789: LD_ADDR_VAR 0 14
9793: PUSH
9794: LD_VAR 0 19
9798: PUSH
9799: FOR_IN
9800: IFFALSE 9976
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9802: LD_ADDR_VAR 0 22
9806: PUSH
9807: LD_INT 22
9809: PUSH
9810: LD_VAR 0 11
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 14
9828: PPUSH
9829: CALL_OW 74
9833: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9834: LD_ADDR_VAR 0 23
9838: PUSH
9839: LD_INT 22
9841: PUSH
9842: LD_VAR 0 11
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: LD_INT 59
9856: PUSH
9857: EMPTY
9858: LIST
9859: PUSH
9860: LD_INT 21
9862: PUSH
9863: LD_INT 1
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 21
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: PPUSH
9893: CALL_OW 69
9897: PPUSH
9898: LD_VAR 0 14
9902: PPUSH
9903: CALL_OW 74
9907: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9908: LD_VAR 0 14
9912: PPUSH
9913: LD_VAR 0 22
9917: PPUSH
9918: CALL_OW 296
9922: PUSH
9923: LD_INT 8
9925: PLUS
9926: PUSH
9927: LD_VAR 0 14
9931: PPUSH
9932: LD_VAR 0 23
9936: PPUSH
9937: CALL_OW 296
9941: LESS
9942: IFFALSE 9960
// begin ComAttackUnit ( i , target1 ) ;
9944: LD_VAR 0 14
9948: PPUSH
9949: LD_VAR 0 22
9953: PPUSH
9954: CALL_OW 115
// end else
9958: GO 9974
// begin ComAttackUnit ( i , target2 ) ;
9960: LD_VAR 0 14
9964: PPUSH
9965: LD_VAR 0 23
9969: PPUSH
9970: CALL_OW 115
// end ; end ;
9974: GO 9799
9976: POP
9977: POP
// for i in soldiersOK_list do
9978: LD_ADDR_VAR 0 14
9982: PUSH
9983: LD_VAR 0 19
9987: PUSH
9988: FOR_IN
9989: IFFALSE 10165
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9991: LD_ADDR_VAR 0 22
9995: PUSH
9996: LD_INT 22
9998: PUSH
9999: LD_VAR 0 11
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 69
10012: PPUSH
10013: LD_VAR 0 14
10017: PPUSH
10018: CALL_OW 74
10022: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10023: LD_ADDR_VAR 0 23
10027: PUSH
10028: LD_INT 22
10030: PUSH
10031: LD_VAR 0 11
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 59
10045: PUSH
10046: EMPTY
10047: LIST
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 1
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 21
10061: PUSH
10062: LD_INT 2
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PPUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: CALL_OW 74
10096: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10097: LD_VAR 0 14
10101: PPUSH
10102: LD_VAR 0 22
10106: PPUSH
10107: CALL_OW 296
10111: PUSH
10112: LD_INT 8
10114: PLUS
10115: PUSH
10116: LD_VAR 0 14
10120: PPUSH
10121: LD_VAR 0 23
10125: PPUSH
10126: CALL_OW 296
10130: LESS
10131: IFFALSE 10149
// begin ComAttackUnit ( i , target1 ) ;
10133: LD_VAR 0 14
10137: PPUSH
10138: LD_VAR 0 22
10142: PPUSH
10143: CALL_OW 115
// end else
10147: GO 10163
// begin ComAttackUnit ( i , target2 ) ;
10149: LD_VAR 0 14
10153: PPUSH
10154: LD_VAR 0 23
10158: PPUSH
10159: CALL_OW 115
// end ; end ;
10163: GO 9988
10165: POP
10166: POP
// until soldiersOK_list = [ ] ;
10167: LD_VAR 0 19
10171: PUSH
10172: EMPTY
10173: EQUAL
10174: IFFALSE 9552
// end ; if strategy = 2 then
10176: LD_VAR 0 12
10180: PUSH
10181: LD_INT 2
10183: EQUAL
10184: IFFALSE 10889
// begin repeat wait ( 0 0$1 ) ;
10186: LD_INT 35
10188: PPUSH
10189: CALL_OW 67
// for i in soldiersOK_list do
10193: LD_ADDR_VAR 0 14
10197: PUSH
10198: LD_VAR 0 19
10202: PUSH
10203: FOR_IN
10204: IFFALSE 10238
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10206: LD_VAR 0 14
10210: PPUSH
10211: LD_INT 117
10213: PPUSH
10214: LD_INT 97
10216: PPUSH
10217: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10221: LD_VAR 0 14
10225: PPUSH
10226: LD_INT 94
10228: PPUSH
10229: LD_INT 50
10231: PPUSH
10232: CALL_OW 174
// end ;
10236: GO 10203
10238: POP
10239: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10240: LD_INT 16
10242: PPUSH
10243: LD_INT 22
10245: PUSH
10246: LD_VAR 0 1
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PPUSH
10255: CALL_OW 70
10259: PUSH
10260: LD_INT 0
10262: GREATER
10263: IFFALSE 10186
// repeat wait ( 0 0$3 ) ;
10265: LD_INT 105
10267: PPUSH
10268: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10272: LD_ADDR_VAR 0 17
10276: PUSH
10277: LD_INT 22
10279: PUSH
10280: LD_VAR 0 1
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 1
10291: PUSH
10292: LD_INT 3
10294: PUSH
10295: LD_INT 24
10297: PUSH
10298: LD_INT 550
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 24
10311: PUSH
10312: LD_INT 250
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 69
10332: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10333: LD_ADDR_VAR 0 19
10337: PUSH
10338: LD_INT 22
10340: PUSH
10341: LD_VAR 0 1
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 25
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 5
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 8
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 9
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 24
10402: PUSH
10403: LD_INT 1000
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: ST_TO_ADDR
// if medicCount > 0 then
10420: LD_VAR 0 7
10424: PUSH
10425: LD_INT 0
10427: GREATER
10428: IFFALSE 10502
// begin if damageUnit_list > 0 then
10430: LD_VAR 0 17
10434: PUSH
10435: LD_INT 0
10437: GREATER
10438: IFFALSE 10502
// begin for i in damageUnit_list do
10440: LD_ADDR_VAR 0 14
10444: PUSH
10445: LD_VAR 0 17
10449: PUSH
10450: FOR_IN
10451: IFFALSE 10500
// begin ComMoveToArea ( i , healArea ) ;
10453: LD_VAR 0 14
10457: PPUSH
10458: LD_VAR 0 10
10462: PPUSH
10463: CALL_OW 113
// for j in medic_list do
10467: LD_ADDR_VAR 0 15
10471: PUSH
10472: LD_VAR 0 18
10476: PUSH
10477: FOR_IN
10478: IFFALSE 10496
// AddComHeal ( j , i ) ;
10480: LD_VAR 0 15
10484: PPUSH
10485: LD_VAR 0 14
10489: PPUSH
10490: CALL_OW 188
10494: GO 10477
10496: POP
10497: POP
// end ;
10498: GO 10450
10500: POP
10501: POP
// end ; end ; for i in soldiersOK_list do
10502: LD_ADDR_VAR 0 14
10506: PUSH
10507: LD_VAR 0 19
10511: PUSH
10512: FOR_IN
10513: IFFALSE 10689
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10515: LD_ADDR_VAR 0 22
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_VAR 0 11
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 69
10536: PPUSH
10537: LD_VAR 0 14
10541: PPUSH
10542: CALL_OW 74
10546: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10547: LD_ADDR_VAR 0 23
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_VAR 0 11
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 2
10566: PUSH
10567: LD_INT 59
10569: PUSH
10570: EMPTY
10571: LIST
10572: PUSH
10573: LD_INT 21
10575: PUSH
10576: LD_INT 1
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 21
10585: PUSH
10586: LD_INT 2
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: EMPTY
10604: LIST
10605: PPUSH
10606: CALL_OW 69
10610: PPUSH
10611: LD_VAR 0 14
10615: PPUSH
10616: CALL_OW 74
10620: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10621: LD_VAR 0 14
10625: PPUSH
10626: LD_VAR 0 22
10630: PPUSH
10631: CALL_OW 296
10635: PUSH
10636: LD_INT 8
10638: PLUS
10639: PUSH
10640: LD_VAR 0 14
10644: PPUSH
10645: LD_VAR 0 23
10649: PPUSH
10650: CALL_OW 296
10654: LESS
10655: IFFALSE 10673
// begin ComAttackUnit ( i , target1 ) ;
10657: LD_VAR 0 14
10661: PPUSH
10662: LD_VAR 0 22
10666: PPUSH
10667: CALL_OW 115
// end else
10671: GO 10687
// begin ComAttackUnit ( i , target2 ) ;
10673: LD_VAR 0 14
10677: PPUSH
10678: LD_VAR 0 23
10682: PPUSH
10683: CALL_OW 115
// end ; end ;
10687: GO 10512
10689: POP
10690: POP
// for i in soldiersOK_list do
10691: LD_ADDR_VAR 0 14
10695: PUSH
10696: LD_VAR 0 19
10700: PUSH
10701: FOR_IN
10702: IFFALSE 10878
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10704: LD_ADDR_VAR 0 22
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_VAR 0 11
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 69
10725: PPUSH
10726: LD_VAR 0 14
10730: PPUSH
10731: CALL_OW 74
10735: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10736: LD_ADDR_VAR 0 23
10740: PUSH
10741: LD_INT 22
10743: PUSH
10744: LD_VAR 0 11
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 2
10755: PUSH
10756: LD_INT 59
10758: PUSH
10759: EMPTY
10760: LIST
10761: PUSH
10762: LD_INT 21
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 21
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: PPUSH
10795: CALL_OW 69
10799: PPUSH
10800: LD_VAR 0 14
10804: PPUSH
10805: CALL_OW 74
10809: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10810: LD_VAR 0 14
10814: PPUSH
10815: LD_VAR 0 22
10819: PPUSH
10820: CALL_OW 296
10824: PUSH
10825: LD_INT 8
10827: PLUS
10828: PUSH
10829: LD_VAR 0 14
10833: PPUSH
10834: LD_VAR 0 23
10838: PPUSH
10839: CALL_OW 296
10843: LESS
10844: IFFALSE 10862
// begin ComAttackUnit ( i , target1 ) ;
10846: LD_VAR 0 14
10850: PPUSH
10851: LD_VAR 0 22
10855: PPUSH
10856: CALL_OW 115
// end else
10860: GO 10876
// begin ComAttackUnit ( i , target2 ) ;
10862: LD_VAR 0 14
10866: PPUSH
10867: LD_VAR 0 23
10871: PPUSH
10872: CALL_OW 115
// end ; end ;
10876: GO 10701
10878: POP
10879: POP
// until soldiersOK_list = [ ] ;
10880: LD_VAR 0 19
10884: PUSH
10885: EMPTY
10886: EQUAL
10887: IFFALSE 10265
// end ; end ; end_of_file
10889: LD_VAR 0 13
10893: RET
// every 0 0$01 do
10894: GO 10896
10896: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10897: LD_INT 22
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 25
10909: PUSH
10910: LD_INT 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PPUSH
10921: CALL_OW 69
10925: PUSH
10926: LD_INT 0
10928: EQUAL
10929: IFFALSE 10943
// SetClass ( JMM , 2 ) ;
10931: LD_EXP 1
10935: PPUSH
10936: LD_INT 2
10938: PPUSH
10939: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10943: LD_STRING M1
10945: PPUSH
10946: CALL_OW 337
// case difficulty of 1 :
10950: LD_OWVAR 67
10954: PUSH
10955: LD_INT 1
10957: DOUBLE
10958: EQUAL
10959: IFTRUE 10963
10961: GO 10973
10963: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10964: LD_STRING M1-1
10966: PPUSH
10967: CALL_OW 337
10971: GO 11010
10973: LD_INT 2
10975: DOUBLE
10976: EQUAL
10977: IFTRUE 10981
10979: GO 10991
10981: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10982: LD_STRING M1-2
10984: PPUSH
10985: CALL_OW 337
10989: GO 11010
10991: LD_INT 3
10993: DOUBLE
10994: EQUAL
10995: IFTRUE 10999
10997: GO 11009
10999: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11000: LD_STRING M1-3
11002: PPUSH
11003: CALL_OW 337
11007: GO 11010
11009: POP
// ChangeMissionObjectives ( M1cont ) ;
11010: LD_STRING M1cont
11012: PPUSH
11013: CALL_OW 337
// SaveForQuickRestart ;
11017: CALL_OW 22
// end ;
11021: END
// every 0 0$1 do
11022: GO 11024
11024: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11025: LD_INT 350
11027: PPUSH
11028: LD_INT 875
11030: PPUSH
11031: CALL_OW 12
11035: PPUSH
11036: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11040: LD_INT 5
11042: PPUSH
11043: LD_INT 4
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 55
// wait ( 0 0$15 ) ;
11053: LD_INT 525
11055: PPUSH
11056: CALL_OW 67
// if IsOk ( Lisa ) then
11060: LD_EXP 2
11064: PPUSH
11065: CALL_OW 302
11069: IFFALSE 11085
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11071: LD_EXP 2
11075: PPUSH
11076: LD_STRING DR0-Lisa-1
11078: PPUSH
11079: CALL_OW 88
// end else
11083: GO 11207
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11085: LD_INT 22
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 21
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 26
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: LD_INT 25
11120: PUSH
11121: LD_INT 1
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 25
11130: PUSH
11131: LD_INT 2
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PUSH
11138: LD_INT 25
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: PUSH
11176: LD_EXP 1
11180: PUSH
11181: LD_EXP 8
11185: PUSH
11186: LD_EXP 5
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: DIFF
11196: PPUSH
11197: LD_STRING DR0-Sol1-1
11199: PPUSH
11200: LD_STRING DR0-Sol1-1
11202: PPUSH
11203: CALL 5070 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11207: LD_INT 22
11209: PUSH
11210: LD_INT 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 26
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 2
11239: PUSH
11240: LD_INT 25
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 25
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 25
11262: PUSH
11263: LD_INT 3
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 4
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 69
11297: PUSH
11298: LD_EXP 1
11302: PUSH
11303: LD_EXP 8
11307: PUSH
11308: LD_EXP 5
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: DIFF
11318: PPUSH
11319: LD_STRING DR0-Sol2-1
11321: PPUSH
11322: LD_STRING DR0-Sol2-1
11324: PPUSH
11325: CALL 5070 0 3
// if IsOk ( Cyrus ) then
11329: LD_EXP 4
11333: PPUSH
11334: CALL_OW 302
11338: IFFALSE 11352
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11340: LD_EXP 4
11344: PPUSH
11345: LD_STRING DR0-Cyrus-1
11347: PPUSH
11348: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11352: LD_EXP 1
11356: PPUSH
11357: LD_STRING DR0-JMM-1
11359: PPUSH
11360: CALL_OW 88
// end ;
11364: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11365: LD_EXP 5
11369: PPUSH
11370: CALL_OW 302
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 16
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PPUSH
11399: CALL_OW 69
11403: PUSH
11404: LD_INT 0
11406: GREATER
11407: AND
11408: IFFALSE 11686
11410: GO 11412
11412: DISABLE
// begin DialogueOn ;
11413: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11417: LD_EXP 5
11421: PPUSH
11422: LD_STRING D10-Frank-1
11424: PPUSH
11425: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11429: LD_INT 22
11431: PUSH
11432: LD_INT 1
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 21
11441: PUSH
11442: LD_INT 1
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: LD_INT 25
11454: PUSH
11455: LD_INT 1
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 25
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 25
11474: PUSH
11475: LD_INT 3
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 25
11484: PUSH
11485: LD_INT 4
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PUSH
11509: LD_EXP 1
11513: PUSH
11514: LD_EXP 5
11518: PUSH
11519: LD_EXP 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: DIFF
11529: PPUSH
11530: LD_STRING D10-Sol1-1
11532: PPUSH
11533: LD_STRING D10-FSol1-1
11535: PPUSH
11536: CALL 5070 0 3
// Say ( Frank , D10-Frank-2 ) ;
11540: LD_EXP 5
11544: PPUSH
11545: LD_STRING D10-Frank-2
11547: PPUSH
11548: CALL_OW 88
// if IsOK ( Lisa ) then
11552: LD_EXP 2
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11577
// begin Say ( Lisa , D10-Lisa-2 ) ;
11563: LD_EXP 2
11567: PPUSH
11568: LD_STRING D10-Lisa-2
11570: PPUSH
11571: CALL_OW 88
// end else
11575: GO 11682
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11577: LD_INT 22
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 25
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 25
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 25
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 25
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 69
11656: PUSH
11657: LD_EXP 1
11661: PUSH
11662: LD_EXP 5
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: DIFF
11671: PPUSH
11672: LD_STRING D10-Sol1-2
11674: PPUSH
11675: LD_STRING D10-FSol1-2
11677: PPUSH
11678: CALL 5070 0 3
// end ; DialogueOff ;
11682: CALL_OW 7
// end ;
11686: END
// every 10 10$30 do
11687: GO 11689
11689: DISABLE
// begin HarrisonSupport ;
11690: CALL 2009 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11694: LD_EXP 17
11698: PPUSH
11699: CALL_OW 310
11703: PPUSH
11704: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11708: LD_EXP 17
11712: PPUSH
11713: LD_STRING DEng-Eng1-1
11715: PPUSH
11716: CALL_OW 88
// wait ( 1 1$0 ) ;
11720: LD_INT 2100
11722: PPUSH
11723: CALL_OW 67
// DialogueOn ;
11727: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11731: LD_EXP 14
11735: PPUSH
11736: LD_STRING DRem-Har-1
11738: PPUSH
11739: CALL_OW 94
// if contactWithRussian = 1 then
11743: LD_EXP 22
11747: PUSH
11748: LD_INT 1
11750: EQUAL
11751: IFFALSE 11767
// begin Say ( JMM , DRem-JMM-1 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING DRem-JMM-1
11760: PPUSH
11761: CALL_OW 88
// end else
11765: GO 11779
// begin Say ( JMM , DRem-JMM-1a ) ;
11767: LD_EXP 1
11771: PPUSH
11772: LD_STRING DRem-JMM-1a
11774: PPUSH
11775: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11779: LD_EXP 14
11783: PPUSH
11784: LD_STRING DRem-Har-2
11786: PPUSH
11787: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11791: LD_STRING DenisInDelta
11793: PPUSH
11794: LD_INT 0
11796: PPUSH
11797: CALL_OW 30
11801: PUSH
11802: LD_INT 1
11804: EQUAL
11805: IFFALSE 11821
// begin Say ( JMM , DRem-JMM-2 ) ;
11807: LD_EXP 1
11811: PPUSH
11812: LD_STRING DRem-JMM-2
11814: PPUSH
11815: CALL_OW 88
// end else
11819: GO 11833
// begin Say ( JMM , DRem-JMM-2a ) ;
11821: LD_EXP 1
11825: PPUSH
11826: LD_STRING DRem-JMM-2a
11828: PPUSH
11829: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11833: LD_EXP 14
11837: PPUSH
11838: LD_STRING DRem-Har-3
11840: PPUSH
11841: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11845: LD_EXP 1
11849: PPUSH
11850: LD_STRING DRem-JMM-3
11852: PPUSH
11853: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11857: LD_EXP 14
11861: PPUSH
11862: LD_STRING DRem-Har-4
11864: PPUSH
11865: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11869: LD_STRING DenisInDelta
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 30
11879: PUSH
11880: LD_INT 1
11882: EQUAL
11883: IFFALSE 11911
// begin Say ( JMM , DRem-JMM-4 ) ;
11885: LD_EXP 1
11889: PPUSH
11890: LD_STRING DRem-JMM-4
11892: PPUSH
11893: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11897: LD_EXP 14
11901: PPUSH
11902: LD_STRING DRem-Har-5
11904: PPUSH
11905: CALL_OW 94
// end else
11909: GO 11944
// begin SetRestrict ( 36 , 1 , true ) ;
11911: LD_INT 36
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11924: LD_INT 15
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11937: LD_STRING MR
11939: PPUSH
11940: CALL_OW 337
// end ; DialogueOff ;
11944: CALL_OW 7
// end ;
11948: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11949: LD_STRING DenisInDelta
11951: PPUSH
11952: LD_INT 0
11954: PPUSH
11955: CALL_OW 30
11959: PUSH
11960: LD_INT 1
11962: EQUAL
11963: IFFALSE 12094
11965: GO 11967
11967: DISABLE
// begin PrepareDenis ;
11968: CALL 1930 0 0
// CenterNowOnUnits ( Denis ) ;
11972: LD_EXP 9
11976: PPUSH
11977: CALL_OW 87
// DialogueOn ;
11981: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11985: LD_EXP 9
11989: PPUSH
11990: LD_STRING DDen-Den-1
11992: PPUSH
11993: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11997: LD_EXP 1
12001: PPUSH
12002: LD_STRING DDen-JMM-1
12004: PPUSH
12005: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12009: LD_EXP 9
12013: PPUSH
12014: LD_STRING DDen-Den-2
12016: PPUSH
12017: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12021: LD_EXP 1
12025: PPUSH
12026: LD_STRING DDen-JMM-2
12028: PPUSH
12029: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12033: LD_EXP 9
12037: PPUSH
12038: LD_STRING DDen-Den-3
12040: PPUSH
12041: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12045: LD_EXP 1
12049: PPUSH
12050: LD_STRING DDen-JMM-3
12052: PPUSH
12053: CALL_OW 88
// DialogueOff ;
12057: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12061: LD_INT 36
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12074: LD_INT 15
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: LD_INT 1
12082: PPUSH
12083: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12087: LD_STRING MR
12089: PPUSH
12090: CALL_OW 337
// end ;
12094: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12095: CALL 12140 0 0
12099: PUSH
12100: LD_EXP 9
12104: PPUSH
12105: CALL_OW 302
12109: AND
12110: IFFALSE 12139
12112: GO 12114
12114: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12115: LD_EXP 9
12119: PPUSH
12120: LD_STRING DR1-Den-1
12122: PPUSH
12123: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12127: LD_EXP 1
12131: PPUSH
12132: LD_STRING DR1-JMM-1
12134: PPUSH
12135: CALL_OW 88
// end ;
12139: END
// function CheckOptoLab ; var i ; begin
12140: LD_INT 0
12142: PPUSH
12143: PPUSH
// result = false ;
12144: LD_ADDR_VAR 0 1
12148: PUSH
12149: LD_INT 0
12151: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12152: LD_ADDR_VAR 0 2
12156: PUSH
12157: LD_INT 22
12159: PUSH
12160: LD_INT 1
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 2
12169: PUSH
12170: LD_INT 30
12172: PUSH
12173: LD_INT 7
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 8
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: PUSH
12204: FOR_IN
12205: IFFALSE 12257
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12207: LD_VAR 0 2
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 268
12219: PUSH
12220: LD_INT 15
12222: EQUAL
12223: PUSH
12224: LD_VAR 0 2
12228: PPUSH
12229: LD_INT 2
12231: PPUSH
12232: CALL_OW 268
12236: PUSH
12237: LD_INT 15
12239: EQUAL
12240: OR
12241: IFFALSE 12253
// begin result = true ;
12243: LD_ADDR_VAR 0 1
12247: PUSH
12248: LD_INT 1
12250: ST_TO_ADDR
// break ;
12251: GO 12257
// end ; break ;
12253: GO 12257
// end ;
12255: GO 12204
12257: POP
12258: POP
// end ;
12259: LD_VAR 0 1
12263: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12264: LD_INT 15
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 321
12274: PUSH
12275: LD_INT 2
12277: EQUAL
12278: PUSH
12279: LD_EXP 9
12283: PPUSH
12284: CALL_OW 302
12288: AND
12289: IFFALSE 12521
12291: GO 12293
12293: DISABLE
// begin DialogueOn ;
12294: CALL_OW 6
// if IsOK ( Denis ) then
12298: LD_EXP 9
12302: PPUSH
12303: CALL_OW 302
12307: IFFALSE 12323
// begin Say ( Denis , DR2-Den-1 ) ;
12309: LD_EXP 9
12313: PPUSH
12314: LD_STRING DR2-Den-1
12316: PPUSH
12317: CALL_OW 88
// end else
12321: GO 12382
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12323: LD_INT 22
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 25
12345: PUSH
12346: LD_INT 4
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PUSH
12363: LD_EXP 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: DIFF
12371: PPUSH
12372: LD_STRING DR2-Sci1-1
12374: PPUSH
12375: LD_STRING DR2-FSci1-1
12377: PPUSH
12378: CALL 5070 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12382: LD_EXP 1
12386: PPUSH
12387: LD_STRING DR2-JMM-1
12389: PPUSH
12390: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12394: LD_INT 22
12396: PUSH
12397: LD_INT 1
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 1
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: LD_INT 25
12419: PUSH
12420: LD_INT 1
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 25
12429: PUSH
12430: LD_INT 2
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 25
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 25
12449: PUSH
12450: LD_INT 4
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: LD_EXP 1
12478: PUSH
12479: LD_EXP 9
12483: PUSH
12484: LD_EXP 8
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: DIFF
12494: PPUSH
12495: LD_STRING DR2-Sol1-1
12497: PPUSH
12498: LD_STRING DR2-Sol1-11
12500: PPUSH
12501: CALL 5070 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12505: LD_EXP 1
12509: PPUSH
12510: LD_STRING DR2-JMM-2
12512: PPUSH
12513: CALL_OW 88
// DialogueOff ;
12517: CALL_OW 7
// end ;
12521: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12522: LD_INT 22
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 36
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: PUSH
12551: LD_INT 0
12553: EQUAL
12554: PUSH
12555: LD_INT 22
12557: PUSH
12558: LD_INT 1
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 33
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: PPUSH
12590: CALL_OW 69
12594: PUSH
12595: LD_INT 0
12597: GREATER
12598: AND
12599: PUSH
12600: LD_EXP 23
12604: PUSH
12605: LD_INT 0
12607: EQUAL
12608: AND
12609: IFFALSE 12735
12611: GO 12613
12613: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12614: LD_INT 22
12616: PUSH
12617: LD_INT 1
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 21
12626: PUSH
12627: LD_INT 1
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: LD_INT 25
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: PUSH
12654: LD_EXP 1
12658: PUSH
12659: LD_EXP 6
12663: PUSH
12664: LD_EXP 7
12668: PUSH
12669: LD_EXP 9
12673: PUSH
12674: LD_EXP 15
12678: PUSH
12679: LD_EXP 3
12683: PUSH
12684: LD_EXP 4
12688: PUSH
12689: LD_EXP 2
12693: PUSH
12694: LD_EXP 5
12698: PUSH
12699: LD_EXP 8
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: DIFF
12716: PPUSH
12717: LD_STRING D3a-Mech1-1
12719: PPUSH
12720: LD_STRING D3a-Mech1-1
12722: PPUSH
12723: CALL 5070 0 3
// firstTower = 2 ;
12727: LD_ADDR_EXP 23
12731: PUSH
12732: LD_INT 2
12734: ST_TO_ADDR
// end ;
12735: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12736: LD_INT 22
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 21
12748: PUSH
12749: LD_INT 3
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PPUSH
12760: CALL_OW 69
12764: PUSH
12765: LD_INT 0
12767: EQUAL
12768: IFFALSE 12883
12770: GO 12772
12772: DISABLE
12773: LD_INT 0
12775: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12776: LD_ADDR_VAR 0 1
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 21
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 25
12806: PUSH
12807: LD_INT 1
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 25
12816: PUSH
12817: LD_INT 2
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 25
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 25
12836: PUSH
12837: LD_INT 4
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: PUSH
12861: FOR_IN
12862: IFFALSE 12881
// AddExperience ( i , 1 , 10000 ) ;
12864: LD_VAR 0 1
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: LD_INT 10000
12874: PPUSH
12875: CALL_OW 492
12879: GO 12861
12881: POP
12882: POP
// end ;
12883: PPOPN 1
12885: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12886: LD_INT 22
12888: PUSH
12889: LD_INT 1
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 36
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PPUSH
12910: CALL_OW 69
12914: PUSH
12915: LD_INT 0
12917: GREATER
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 21
12931: PUSH
12932: LD_INT 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 33
12941: PUSH
12942: LD_INT 2
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: PPUSH
12954: CALL_OW 69
12958: PUSH
12959: LD_INT 0
12961: GREATER
12962: AND
12963: PUSH
12964: CALL 13546 0 0
12968: AND
12969: IFFALSE 13543
12971: GO 12973
12973: DISABLE
12974: LD_INT 0
12976: PPUSH
12977: PPUSH
12978: PPUSH
12979: PPUSH
12980: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12981: LD_ADDR_VAR 0 3
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 30
12998: PUSH
12999: LD_INT 36
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 69
13014: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13015: LD_ADDR_VAR 0 4
13019: PUSH
13020: LD_INT 22
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 21
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 33
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13060: LD_ADDR_VAR 0 5
13064: PUSH
13065: EMPTY
13066: ST_TO_ADDR
// for i in tmpControlTowers do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_VAR 0 3
13076: PUSH
13077: FOR_IN
13078: IFFALSE 13541
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13080: LD_EXP 1
13084: PPUSH
13085: CALL_OW 310
13089: PUSH
13090: LD_VAR 0 1
13094: EQUAL
13095: PUSH
13096: LD_EXP 1
13100: PPUSH
13101: CALL_OW 257
13105: PUSH
13106: LD_INT 3
13108: EQUAL
13109: AND
13110: IFFALSE 13240
// begin InGameOn ;
13112: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13116: LD_VAR 0 4
13120: PUSH
13121: LD_INT 1
13123: ARRAY
13124: PPUSH
13125: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13129: LD_EXP 1
13133: PPUSH
13134: LD_STRING D4a-JMM-1
13136: PPUSH
13137: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13141: LD_VAR 0 4
13145: PUSH
13146: LD_INT 1
13148: ARRAY
13149: PPUSH
13150: LD_EXP 1
13154: PPUSH
13155: CALL_OW 53
// wait ( 0 0$1 ) ;
13159: LD_INT 35
13161: PPUSH
13162: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13166: LD_VAR 0 4
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: LD_VAR 0 4
13179: PUSH
13180: LD_INT 1
13182: ARRAY
13183: PPUSH
13184: CALL_OW 250
13188: PUSH
13189: LD_INT 3
13191: PLUS
13192: PPUSH
13193: LD_VAR 0 4
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: CALL_OW 251
13206: PUSH
13207: LD_INT 2
13209: MINUS
13210: PPUSH
13211: CALL_OW 111
// wait ( 0 0$2 ) ;
13215: LD_INT 70
13217: PPUSH
13218: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13222: LD_EXP 1
13226: PPUSH
13227: LD_STRING D4b-JMM-1
13229: PPUSH
13230: CALL_OW 88
// InGameOff ;
13234: CALL_OW 9
// end else
13238: GO 13539
// begin InGameOn ;
13240: CALL_OW 8
// for j in UnitsInside ( i ) do
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_VAR 0 1
13253: PPUSH
13254: CALL_OW 313
13258: PUSH
13259: FOR_IN
13260: IFFALSE 13295
// if GetClass ( j ) = 3 then
13262: LD_VAR 0 2
13266: PPUSH
13267: CALL_OW 257
13271: PUSH
13272: LD_INT 3
13274: EQUAL
13275: IFFALSE 13293
// tmpMechanicInside = tmpMechanicInside ^ j ;
13277: LD_ADDR_VAR 0 5
13281: PUSH
13282: LD_VAR 0 5
13286: PUSH
13287: LD_VAR 0 2
13291: ADD
13292: ST_TO_ADDR
13293: GO 13259
13295: POP
13296: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13297: LD_VAR 0 5
13301: PUSH
13302: LD_INT 1
13304: ARRAY
13305: PPUSH
13306: CALL_OW 258
13310: PUSH
13311: LD_INT 1
13313: EQUAL
13314: IFFALSE 13332
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13316: LD_VAR 0 5
13320: PUSH
13321: LD_INT 1
13323: ARRAY
13324: PPUSH
13325: LD_STRING D4a-Mech1-1
13327: PPUSH
13328: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13332: LD_VAR 0 5
13336: PUSH
13337: LD_INT 1
13339: ARRAY
13340: PPUSH
13341: CALL_OW 258
13345: PUSH
13346: LD_INT 2
13348: EQUAL
13349: IFFALSE 13367
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13351: LD_VAR 0 5
13355: PUSH
13356: LD_INT 1
13358: ARRAY
13359: PPUSH
13360: LD_STRING D4a-FMech1-1
13362: PPUSH
13363: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13367: LD_VAR 0 4
13371: PUSH
13372: LD_INT 1
13374: ARRAY
13375: PPUSH
13376: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13380: LD_VAR 0 4
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: LD_VAR 0 5
13393: PUSH
13394: LD_INT 1
13396: ARRAY
13397: PPUSH
13398: CALL_OW 53
// wait ( 0 0$1 ) ;
13402: LD_INT 35
13404: PPUSH
13405: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13409: LD_VAR 0 4
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: LD_VAR 0 4
13422: PUSH
13423: LD_INT 1
13425: ARRAY
13426: PPUSH
13427: CALL_OW 250
13431: PUSH
13432: LD_INT 3
13434: PLUS
13435: PPUSH
13436: LD_VAR 0 4
13440: PUSH
13441: LD_INT 1
13443: ARRAY
13444: PPUSH
13445: CALL_OW 251
13449: PUSH
13450: LD_INT 2
13452: MINUS
13453: PPUSH
13454: CALL_OW 111
// wait ( 0 0$2 ) ;
13458: LD_INT 70
13460: PPUSH
13461: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13465: LD_VAR 0 5
13469: PUSH
13470: LD_INT 1
13472: ARRAY
13473: PPUSH
13474: CALL_OW 258
13478: PUSH
13479: LD_INT 1
13481: EQUAL
13482: IFFALSE 13500
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13484: LD_VAR 0 5
13488: PUSH
13489: LD_INT 1
13491: ARRAY
13492: PPUSH
13493: LD_STRING D4b-Mech1-1
13495: PPUSH
13496: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13500: LD_VAR 0 5
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: CALL_OW 258
13513: PUSH
13514: LD_INT 2
13516: EQUAL
13517: IFFALSE 13535
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13519: LD_VAR 0 5
13523: PUSH
13524: LD_INT 1
13526: ARRAY
13527: PPUSH
13528: LD_STRING D4b-FMech1-1
13530: PPUSH
13531: CALL_OW 88
// InGameOff ;
13535: CALL_OW 9
// end ; end ;
13539: GO 13077
13541: POP
13542: POP
// end ;
13543: PPOPN 5
13545: END
// function CheckMehInside ; var i , j ; begin
13546: LD_INT 0
13548: PPUSH
13549: PPUSH
13550: PPUSH
// result = false ;
13551: LD_ADDR_VAR 0 1
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13559: LD_ADDR_VAR 0 2
13563: PUSH
13564: LD_INT 22
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 30
13576: PUSH
13577: LD_INT 36
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13645
// begin for j in UnitsInside ( i ) do
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: LD_VAR 0 2
13605: PPUSH
13606: CALL_OW 313
13610: PUSH
13611: FOR_IN
13612: IFFALSE 13641
// begin if GetClass ( j ) = 3 then
13614: LD_VAR 0 3
13618: PPUSH
13619: CALL_OW 257
13623: PUSH
13624: LD_INT 3
13626: EQUAL
13627: IFFALSE 13639
// begin result = true ;
13629: LD_ADDR_VAR 0 1
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// break ;
13637: GO 13641
// end ; end ;
13639: GO 13611
13641: POP
13642: POP
// end ;
13643: GO 13593
13645: POP
13646: POP
// end ;
13647: LD_VAR 0 1
13651: RET
// every 25 25$0 do
13652: GO 13654
13654: DISABLE
// begin PrepareKurt ;
13655: CALL 17155 0 0
// end ;
13659: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13660: LD_EXP 19
13664: PPUSH
13665: LD_INT 9
13667: PPUSH
13668: CALL_OW 308
13672: PUSH
13673: LD_EXP 21
13677: PUSH
13678: LD_INT 1
13680: EQUAL
13681: AND
13682: IFFALSE 13756
13684: GO 13686
13686: DISABLE
// begin RemoveUnit ( Kurt ) ;
13687: LD_EXP 19
13691: PPUSH
13692: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13696: LD_EXP 19
13700: PPUSH
13701: LD_STRING Kurt
13703: PPUSH
13704: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13708: LD_INT 1
13710: PPUSH
13711: LD_INT 2
13713: PPUSH
13714: CALL_OW 81
13718: PUSH
13719: LD_INT 0
13721: EQUAL
13722: IFFALSE 13732
// KurtStatus = 1 ;
13724: LD_ADDR_EXP 20
13728: PUSH
13729: LD_INT 1
13731: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13732: LD_INT 1
13734: PPUSH
13735: LD_INT 2
13737: PPUSH
13738: CALL_OW 81
13742: PUSH
13743: LD_INT 2
13745: EQUAL
13746: IFFALSE 13756
// KurtStatus = 2 ;
13748: LD_ADDR_EXP 20
13752: PUSH
13753: LD_INT 2
13755: ST_TO_ADDR
// end ;
13756: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13757: LD_INT 1
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: CALL_OW 81
13767: PUSH
13768: LD_INT 2
13770: EQUAL
13771: PUSH
13772: LD_EXP 19
13776: PPUSH
13777: CALL_OW 302
13781: AND
13782: IFFALSE 13807
13784: GO 13786
13786: DISABLE
// begin DialogueOn ;
13787: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13791: LD_EXP 19
13795: PPUSH
13796: LD_STRING D2a-Kurt-1
13798: PPUSH
13799: CALL_OW 88
// DialogueOff ;
13803: CALL_OW 7
// end ;
13807: END
// every 35 35$0 do
13808: GO 13810
13810: DISABLE
// begin PrepareJoan ;
13811: CALL 2481 0 0
// wait ( 1 1$0 ) ;
13815: LD_INT 2100
13817: PPUSH
13818: CALL_OW 67
// if IsOK ( Lisa ) then
13822: LD_EXP 2
13826: PPUSH
13827: CALL_OW 302
13831: IFFALSE 13961
// begin DialogueOn ;
13833: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13837: LD_EXP 2
13841: PPUSH
13842: LD_STRING D7-Lisa-1
13844: PPUSH
13845: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13849: LD_EXP 1
13853: PPUSH
13854: LD_STRING D7-JMM-1
13856: PPUSH
13857: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13861: LD_EXP 2
13865: PPUSH
13866: LD_STRING D7-Lisa-2
13868: PPUSH
13869: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13873: LD_EXP 1
13877: PPUSH
13878: LD_STRING D7-JMM-2
13880: PPUSH
13881: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13885: LD_EXP 2
13889: PPUSH
13890: LD_STRING D7-Lisa-3
13892: PPUSH
13893: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13897: LD_EXP 1
13901: PPUSH
13902: LD_STRING D7-JMM-3
13904: PPUSH
13905: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13909: LD_EXP 2
13913: PPUSH
13914: LD_STRING D7-Lisa-4
13916: PPUSH
13917: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13921: LD_EXP 1
13925: PPUSH
13926: LD_STRING D7-JMM-4
13928: PPUSH
13929: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13933: LD_EXP 1
13937: PPUSH
13938: LD_STRING D7-JMM-4a
13940: PPUSH
13941: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13945: LD_EXP 2
13949: PPUSH
13950: LD_STRING D7-Lisa-5
13952: PPUSH
13953: CALL_OW 88
// DialogueOff ;
13957: CALL_OW 7
// end ; end ;
13961: END
// every 0 0$1 do var i , others ;
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
13968: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
13969: LD_ADDR_VAR 0 2
13973: PUSH
13974: LD_INT 22
13976: PUSH
13977: LD_INT 1
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 21
13986: PUSH
13987: LD_INT 1
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 2
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 25
14009: PUSH
14010: LD_INT 2
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 25
14019: PUSH
14020: LD_INT 3
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 25
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 69
14053: PUSH
14054: LD_EXP 13
14058: PUSH
14059: EMPTY
14060: LIST
14061: DIFF
14062: ST_TO_ADDR
// for i in others do
14063: LD_ADDR_VAR 0 1
14067: PUSH
14068: LD_VAR 0 2
14072: PUSH
14073: FOR_IN
14074: IFFALSE 14111
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14076: LD_EXP 13
14080: PPUSH
14081: LD_VAR 0 1
14085: PPUSH
14086: CALL_OW 296
14090: PUSH
14091: LD_INT 6
14093: LESS
14094: IFFALSE 14109
// begin disable ;
14096: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14097: LD_EXP 13
14101: PPUSH
14102: LD_STRING D5-Sol1-1
14104: PPUSH
14105: CALL_OW 88
// end ; end ;
14109: GO 14073
14111: POP
14112: POP
// end ;
14113: PPOPN 2
14115: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14116: LD_INT 22
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 33
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: LD_INT 2
14147: GREATEREQUAL
14148: IFFALSE 14168
14150: GO 14152
14152: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14153: LD_STRING MRa
14155: PPUSH
14156: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14160: LD_ADDR_EXP 28
14164: PUSH
14165: LD_INT 1
14167: ST_TO_ADDR
// end ;
14168: END
// every 4 4$0 do
14169: GO 14171
14171: DISABLE
// PrepareRandoms ( 1 ) ;
14172: LD_INT 1
14174: PPUSH
14175: CALL 3506 0 1
14179: END
// every 10 10$0 do
14180: GO 14182
14182: DISABLE
// PrepareRandoms ( 2 ) ;
14183: LD_INT 2
14185: PPUSH
14186: CALL 3506 0 1
14190: END
// every 28 28$0 do
14191: GO 14193
14193: DISABLE
// PrepareRandoms ( 4 ) ;
14194: LD_INT 4
14196: PPUSH
14197: CALL 3506 0 1
14201: END
// every 32 32$0 do
14202: GO 14204
14204: DISABLE
// PrepareRandoms ( 5 ) ;
14205: LD_INT 5
14207: PPUSH
14208: CALL 3506 0 1
14212: END
// every 35 35$30 do
14213: GO 14215
14215: DISABLE
// PrepareRandoms ( 6 ) ;
14216: LD_INT 6
14218: PPUSH
14219: CALL 3506 0 1
14223: END
// every 37 37$20 do
14224: GO 14226
14226: DISABLE
// PrepareRandoms ( 7 ) ;
14227: LD_INT 7
14229: PPUSH
14230: CALL 3506 0 1
14234: END
// every 5 5$20 do
14235: GO 14237
14237: DISABLE
// begin DialogueOn ;
14238: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14242: LD_EXP 10
14246: PPUSH
14247: LD_STRING D12a-Sci-1
14249: PPUSH
14250: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14254: LD_EXP 1
14258: PPUSH
14259: LD_STRING D12a-JMM-1
14261: PPUSH
14262: CALL_OW 88
// DialogueOff ;
14266: CALL_OW 7
// cratesStatus = 1 ;
14270: LD_ADDR_EXP 38
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// end ;
14278: END
// every 13 13$0 do
14279: GO 14281
14281: DISABLE
// begin DialogueOn ;
14282: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14286: LD_EXP 10
14290: PPUSH
14291: LD_STRING D12b-Sci-1
14293: PPUSH
14294: CALL_OW 94
// DialogueOff ;
14298: CALL_OW 7
// cratesStatus = 2 ;
14302: LD_ADDR_EXP 38
14306: PUSH
14307: LD_INT 2
14309: ST_TO_ADDR
// end ;
14310: END
// every 32 32$0 do
14311: GO 14313
14313: DISABLE
// begin DialogueOn ;
14314: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14318: LD_EXP 10
14322: PPUSH
14323: LD_STRING D12c-Sci-1
14325: PPUSH
14326: CALL_OW 94
// DialogueOff ;
14330: CALL_OW 7
// wait ( 3 3$0 ) ;
14334: LD_INT 6300
14336: PPUSH
14337: CALL_OW 67
// DialogueOn ;
14341: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14345: LD_EXP 10
14349: PPUSH
14350: LD_STRING D12d-Sci-1
14352: PPUSH
14353: CALL_OW 94
// DialogueOff ;
14357: CALL_OW 7
// cratesStatus = 1 ;
14361: LD_ADDR_EXP 38
14365: PUSH
14366: LD_INT 1
14368: ST_TO_ADDR
// end ;
14369: END
// every 42 42$0 do
14370: GO 14372
14372: DISABLE
// begin DialogueOn ;
14373: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14377: LD_EXP 10
14381: PPUSH
14382: LD_STRING D12e-Sci-1
14384: PPUSH
14385: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14389: LD_EXP 1
14393: PPUSH
14394: LD_STRING D12e-JMM-1
14396: PPUSH
14397: CALL_OW 88
// DialogueOff ;
14401: CALL_OW 7
// cratesStatus = 2 ;
14405: LD_ADDR_EXP 38
14409: PUSH
14410: LD_INT 2
14412: ST_TO_ADDR
// end ;
14413: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14414: LD_INT 22
14416: PUSH
14417: LD_INT 6
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 34
14436: PUSH
14437: LD_INT 51
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: PPUSH
14449: CALL_OW 69
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: IFFALSE 14540
14459: GO 14461
14461: DISABLE
14462: LD_INT 0
14464: PPUSH
// begin enable ;
14465: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14466: LD_ADDR_VAR 0 1
14470: PUSH
14471: LD_INT 22
14473: PUSH
14474: LD_INT 6
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 2
14483: PUSH
14484: LD_INT 21
14486: PUSH
14487: LD_INT 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: PUSH
14518: FOR_IN
14519: IFFALSE 14538
// ComAgressiveMove ( i , 138 , 168 ) ;
14521: LD_VAR 0 1
14525: PPUSH
14526: LD_INT 138
14528: PPUSH
14529: LD_INT 168
14531: PPUSH
14532: CALL_OW 114
14536: GO 14518
14538: POP
14539: POP
// end ;
14540: PPOPN 1
14542: END
// every 0 0$1 do var i ;
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
// begin enable ;
14549: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14550: LD_ADDR_VAR 0 1
14554: PUSH
14555: LD_INT 5
14557: PPUSH
14558: LD_INT 2
14560: PUSH
14561: LD_INT 22
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 22
14573: PUSH
14574: LD_INT 6
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: PUSH
14586: EMPTY
14587: LIST
14588: PPUSH
14589: CALL_OW 70
14593: PUSH
14594: FOR_IN
14595: IFFALSE 14659
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14597: LD_INT 5
14599: PPUSH
14600: LD_INT 22
14602: PUSH
14603: LD_INT 6
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 34
14612: PUSH
14613: LD_INT 51
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PPUSH
14624: CALL_OW 70
14628: PUSH
14629: LD_INT 0
14631: GREATER
14632: IFFALSE 14648
// sendedConvoys = sendedConvoys + 1 ;
14634: LD_ADDR_EXP 39
14638: PUSH
14639: LD_EXP 39
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: ST_TO_ADDR
// RemoveUnit ( i ) ;
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 64
// end ;
14657: GO 14594
14659: POP
14660: POP
// end ; end_of_file
14661: PPOPN 1
14663: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 1
14671: EQUAL
14672: PUSH
14673: LD_VAR 0 2
14677: PUSH
14678: LD_INT 3
14680: EQUAL
14681: AND
14682: IFFALSE 14692
// contactWithRussian = 1 ;
14684: LD_ADDR_EXP 22
14688: PUSH
14689: LD_INT 1
14691: ST_TO_ADDR
// end ;
14692: PPOPN 2
14694: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 266
14704: PUSH
14705: LD_INT 36
14707: EQUAL
14708: PUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 255
14718: PUSH
14719: LD_INT 1
14721: EQUAL
14722: AND
14723: PUSH
14724: LD_INT 22
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 21
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 33
14746: PUSH
14747: LD_INT 2
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: PUSH
14764: LD_INT 0
14766: EQUAL
14767: AND
14768: PUSH
14769: LD_EXP 23
14773: PUSH
14774: LD_INT 0
14776: EQUAL
14777: AND
14778: IFFALSE 14858
// begin firstTower = 1 ;
14780: LD_ADDR_EXP 23
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14788: LD_INT 22
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 3
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 26
14820: PUSH
14821: LD_INT 1
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 69
14838: PUSH
14839: LD_EXP 1
14843: PUSH
14844: EMPTY
14845: LIST
14846: DIFF
14847: PPUSH
14848: LD_STRING D3b-Mech1-1
14850: PPUSH
14851: LD_STRING D3b-Mech1-1
14853: PPUSH
14854: CALL 5070 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 266
14867: PUSH
14868: LD_INT 0
14870: EQUAL
14871: PUSH
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 255
14881: PUSH
14882: LD_INT 1
14884: EQUAL
14885: AND
14886: IFFALSE 14900
// SetBName ( building , theta ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_STRING theta
14895: PPUSH
14896: CALL_OW 500
// if GetSide ( building ) = 3 then
14900: LD_VAR 0 1
14904: PPUSH
14905: CALL_OW 255
14909: PUSH
14910: LD_INT 3
14912: EQUAL
14913: IFFALSE 14987
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14915: LD_ADDR_EXP 31
14919: PUSH
14920: LD_EXP 31
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: CALL_OW 3
14932: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14933: LD_ADDR_EXP 31
14937: PUSH
14938: LD_EXP 31
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 3
14950: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14951: LD_ADDR_EXP 31
14955: PUSH
14956: LD_EXP 31
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 3
14968: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14969: LD_ADDR_EXP 31
14973: PUSH
14974: LD_EXP 31
14978: PPUSH
14979: LD_INT 1
14981: PPUSH
14982: CALL_OW 3
14986: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 255
14996: PUSH
14997: LD_INT 3
14999: EQUAL
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 266
15010: PUSH
15011: LD_INT 0
15013: EQUAL
15014: PUSH
15015: LD_VAR 0 1
15019: PPUSH
15020: CALL_OW 266
15024: PUSH
15025: LD_INT 2
15027: EQUAL
15028: OR
15029: PUSH
15030: LD_VAR 0 1
15034: PPUSH
15035: CALL_OW 266
15039: PUSH
15040: LD_INT 4
15042: EQUAL
15043: OR
15044: PUSH
15045: EMPTY
15046: LIST
15047: AND
15048: IFFALSE 15059
// ComUpgrade ( building ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15059: LD_VAR 0 1
15063: PPUSH
15064: CALL_OW 255
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: PUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 266
15082: PUSH
15083: LD_INT 32
15085: EQUAL
15086: AND
15087: IFFALSE 15128
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_INT 42
15096: PUSH
15097: LD_INT 43
15099: PUSH
15100: LD_INT 44
15102: PUSH
15103: LD_INT 46
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: PUSH
15112: LD_INT 1
15114: PPUSH
15115: LD_INT 4
15117: PPUSH
15118: CALL_OW 12
15122: ARRAY
15123: PPUSH
15124: CALL_OW 208
// end ; end ;
15128: PPOPN 1
15130: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
15131: LD_VAR 0 1
15135: PPUSH
15136: CALL_OW 255
15140: PUSH
15141: LD_INT 1
15143: EQUAL
15144: PUSH
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL_OW 247
15154: PUSH
15155: LD_INT 1
15157: EQUAL
15158: AND
15159: PUSH
15160: LD_VAR 0 1
15164: PPUSH
15165: CALL_OW 257
15169: PUSH
15170: LD_INT 1
15172: EQUAL
15173: PUSH
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 257
15183: PUSH
15184: LD_INT 2
15186: EQUAL
15187: OR
15188: PUSH
15189: LD_VAR 0 1
15193: PPUSH
15194: CALL_OW 257
15198: PUSH
15199: LD_INT 3
15201: EQUAL
15202: OR
15203: PUSH
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 257
15213: PUSH
15214: LD_INT 4
15216: EQUAL
15217: OR
15218: PUSH
15219: EMPTY
15220: LIST
15221: AND
15222: IFFALSE 15238
// unitLost = unitLost + 1 ;
15224: LD_ADDR_EXP 30
15228: PUSH
15229: LD_EXP 30
15233: PUSH
15234: LD_INT 1
15236: PLUS
15237: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 255
15247: PUSH
15248: LD_INT 3
15250: EQUAL
15251: PUSH
15252: LD_VAR 0 1
15256: PPUSH
15257: CALL_OW 247
15261: PUSH
15262: LD_INT 3
15264: EQUAL
15265: AND
15266: IFFALSE 15958
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 266
15277: PUSH
15278: LD_INT 31
15280: EQUAL
15281: PUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 266
15291: PUSH
15292: LD_INT 32
15294: EQUAL
15295: OR
15296: PUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 266
15306: PUSH
15307: LD_INT 36
15309: EQUAL
15310: OR
15311: PUSH
15312: LD_VAR 0 1
15316: PPUSH
15317: CALL_OW 266
15321: PUSH
15322: LD_INT 0
15324: EQUAL
15325: OR
15326: PUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 266
15336: PUSH
15337: LD_INT 24
15339: EQUAL
15340: OR
15341: PUSH
15342: LD_VAR 0 1
15346: PPUSH
15347: CALL_OW 266
15351: PUSH
15352: LD_INT 17
15354: EQUAL
15355: OR
15356: PUSH
15357: LD_VAR 0 1
15361: PPUSH
15362: CALL_OW 266
15366: PUSH
15367: LD_INT 25
15369: EQUAL
15370: OR
15371: PUSH
15372: LD_VAR 0 1
15376: PPUSH
15377: CALL_OW 266
15381: PUSH
15382: LD_INT 19
15384: EQUAL
15385: OR
15386: PUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 266
15396: PUSH
15397: LD_INT 20
15399: EQUAL
15400: OR
15401: PUSH
15402: LD_VAR 0 1
15406: PPUSH
15407: CALL_OW 266
15411: PUSH
15412: LD_INT 18
15414: EQUAL
15415: OR
15416: PUSH
15417: LD_VAR 0 1
15421: PPUSH
15422: CALL_OW 266
15426: PUSH
15427: LD_INT 21
15429: EQUAL
15430: OR
15431: PUSH
15432: LD_VAR 0 1
15436: PPUSH
15437: CALL_OW 266
15441: PUSH
15442: LD_INT 23
15444: EQUAL
15445: OR
15446: PUSH
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 266
15456: PUSH
15457: LD_INT 16
15459: EQUAL
15460: OR
15461: PUSH
15462: LD_VAR 0 1
15466: PPUSH
15467: CALL_OW 266
15471: PUSH
15472: LD_INT 6
15474: EQUAL
15475: OR
15476: PUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 266
15486: PUSH
15487: LD_INT 29
15489: EQUAL
15490: OR
15491: PUSH
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 266
15501: PUSH
15502: LD_INT 26
15504: EQUAL
15505: OR
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 266
15516: PUSH
15517: LD_INT 30
15519: EQUAL
15520: OR
15521: PUSH
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL_OW 266
15531: PUSH
15532: LD_INT 28
15534: EQUAL
15535: OR
15536: PUSH
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 266
15546: PUSH
15547: LD_INT 27
15549: EQUAL
15550: OR
15551: PUSH
15552: LD_VAR 0 1
15556: PPUSH
15557: CALL_OW 266
15561: PUSH
15562: LD_INT 33
15564: EQUAL
15565: OR
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 266
15576: PUSH
15577: LD_INT 2
15579: EQUAL
15580: OR
15581: PUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 266
15591: PUSH
15592: LD_INT 4
15594: EQUAL
15595: OR
15596: IFFALSE 15682
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15598: LD_ADDR_EXP 31
15602: PUSH
15603: LD_EXP 31
15607: PUSH
15608: LD_VAR 0 1
15612: PPUSH
15613: CALL_OW 266
15617: ADD
15618: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15619: LD_ADDR_EXP 31
15623: PUSH
15624: LD_EXP 31
15628: PUSH
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 250
15638: ADD
15639: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15640: LD_ADDR_EXP 31
15644: PUSH
15645: LD_EXP 31
15649: PUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 251
15659: ADD
15660: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15661: LD_ADDR_EXP 31
15665: PUSH
15666: LD_EXP 31
15670: PUSH
15671: LD_VAR 0 1
15675: PPUSH
15676: CALL_OW 254
15680: ADD
15681: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 266
15691: PUSH
15692: LD_INT 1
15694: EQUAL
15695: IFFALSE 15774
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15697: LD_ADDR_EXP 31
15701: PUSH
15702: LD_EXP 31
15706: PUSH
15707: LD_INT 0
15709: ADD
15710: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15711: LD_ADDR_EXP 31
15715: PUSH
15716: LD_EXP 31
15720: PUSH
15721: LD_VAR 0 1
15725: PPUSH
15726: CALL_OW 250
15730: ADD
15731: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15732: LD_ADDR_EXP 31
15736: PUSH
15737: LD_EXP 31
15741: PUSH
15742: LD_VAR 0 1
15746: PPUSH
15747: CALL_OW 251
15751: ADD
15752: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15753: LD_ADDR_EXP 31
15757: PUSH
15758: LD_EXP 31
15762: PUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 254
15772: ADD
15773: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 266
15783: PUSH
15784: LD_INT 3
15786: EQUAL
15787: IFFALSE 15866
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15789: LD_ADDR_EXP 31
15793: PUSH
15794: LD_EXP 31
15798: PUSH
15799: LD_INT 2
15801: ADD
15802: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15803: LD_ADDR_EXP 31
15807: PUSH
15808: LD_EXP 31
15812: PUSH
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 250
15822: ADD
15823: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15824: LD_ADDR_EXP 31
15828: PUSH
15829: LD_EXP 31
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 251
15843: ADD
15844: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15845: LD_ADDR_EXP 31
15849: PUSH
15850: LD_EXP 31
15854: PUSH
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL_OW 254
15864: ADD
15865: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 266
15875: PUSH
15876: LD_INT 5
15878: EQUAL
15879: IFFALSE 15958
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15881: LD_ADDR_EXP 31
15885: PUSH
15886: LD_EXP 31
15890: PUSH
15891: LD_INT 4
15893: ADD
15894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15895: LD_ADDR_EXP 31
15899: PUSH
15900: LD_EXP 31
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 250
15914: ADD
15915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15916: LD_ADDR_EXP 31
15920: PUSH
15921: LD_EXP 31
15925: PUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 251
15935: ADD
15936: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15937: LD_ADDR_EXP 31
15941: PUSH
15942: LD_EXP 31
15946: PUSH
15947: LD_VAR 0 1
15951: PPUSH
15952: CALL_OW 254
15956: ADD
15957: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
15958: LD_VAR 0 1
15962: PPUSH
15963: CALL_OW 257
15967: PUSH
15968: LD_INT 3
15970: EQUAL
15971: PUSH
15972: LD_VAR 0 1
15976: PPUSH
15977: CALL_OW 255
15981: PUSH
15982: LD_INT 3
15984: EQUAL
15985: AND
15986: PUSH
15987: LD_INT 21
15989: PPUSH
15990: CALL_OW 302
15994: AND
15995: PUSH
15996: LD_INT 21
15998: PPUSH
15999: CALL_OW 255
16003: PUSH
16004: LD_INT 3
16006: EQUAL
16007: AND
16008: IFFALSE 16076
// begin uc_side = 3 ;
16010: LD_ADDR_OWVAR 20
16014: PUSH
16015: LD_INT 3
16017: ST_TO_ADDR
// uc_nation = 3 ;
16018: LD_ADDR_OWVAR 21
16022: PUSH
16023: LD_INT 3
16025: ST_TO_ADDR
// hc_gallery :=  ;
16026: LD_ADDR_OWVAR 33
16030: PUSH
16031: LD_STRING 
16033: ST_TO_ADDR
// hc_name :=  ;
16034: LD_ADDR_OWVAR 26
16038: PUSH
16039: LD_STRING 
16041: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16042: LD_INT 0
16044: PPUSH
16045: LD_EXP 34
16049: PPUSH
16050: LD_EXP 35
16054: PPUSH
16055: CALL_OW 12
16059: PPUSH
16060: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16064: CALL_OW 44
16068: PPUSH
16069: LD_INT 21
16071: PPUSH
16072: CALL_OW 52
// end ; end ;
16076: PPOPN 1
16078: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16079: LD_INT 0
16081: PPUSH
16082: PPUSH
16083: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 264
16093: PUSH
16094: LD_INT 51
16096: EQUAL
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 255
16107: PUSH
16108: LD_INT 3
16110: EQUAL
16111: AND
16112: IFFALSE 16174
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16114: LD_ADDR_VAR 0 5
16118: PUSH
16119: LD_INT 2
16121: PPUSH
16122: CALL_OW 274
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 275
16134: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16135: LD_INT 2
16137: PPUSH
16138: CALL_OW 274
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: LD_VAR 0 5
16150: PUSH
16151: LD_INT 100
16153: MINUS
16154: PPUSH
16155: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 100
16169: PPUSH
16170: CALL_OW 291
// end ; if building = rufabsupp then
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 17
16181: EQUAL
16182: IFFALSE 16196
// SetSide ( vehicle , 6 ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: LD_INT 6
16191: PPUSH
16192: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16196: LD_VAR 0 2
16200: PUSH
16201: LD_INT 21
16203: EQUAL
16204: PUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 3
16217: EQUAL
16218: AND
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 264
16229: PUSH
16230: LD_INT 42
16232: EQUAL
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 264
16243: PUSH
16244: LD_INT 43
16246: EQUAL
16247: OR
16248: PUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 264
16258: PUSH
16259: LD_INT 44
16261: EQUAL
16262: OR
16263: PUSH
16264: EMPTY
16265: LIST
16266: AND
16267: IFFALSE 16285
// russianTanks = russianTanks ^ vehicle ;
16269: LD_ADDR_EXP 36
16273: PUSH
16274: LD_EXP 36
16278: PUSH
16279: LD_VAR 0 1
16283: ADD
16284: ST_TO_ADDR
// end ;
16285: PPOPN 5
16287: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 255
16297: PUSH
16298: LD_INT 3
16300: EQUAL
16301: IFFALSE 16317
// tamedApemans = tamedApemans + 1 ;
16303: LD_ADDR_EXP 32
16307: PUSH
16308: LD_EXP 32
16312: PUSH
16313: LD_INT 1
16315: PLUS
16316: ST_TO_ADDR
// end ;
16317: PPOPN 2
16319: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 255
16333: PUSH
16334: LD_INT 3
16336: EQUAL
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 247
16347: PUSH
16348: LD_INT 2
16350: EQUAL
16351: AND
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 264
16362: PUSH
16363: LD_INT 42
16365: EQUAL
16366: PUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 264
16376: PUSH
16377: LD_INT 43
16379: EQUAL
16380: OR
16381: PUSH
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 264
16391: PUSH
16392: LD_INT 44
16394: EQUAL
16395: OR
16396: PUSH
16397: EMPTY
16398: LIST
16399: AND
16400: IFFALSE 16540
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16402: LD_INT 21
16404: PPUSH
16405: LD_VAR 0 1
16409: PPUSH
16410: CALL_OW 265
16414: PPUSH
16415: LD_VAR 0 1
16419: PPUSH
16420: CALL_OW 262
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 263
16434: PPUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 264
16444: PPUSH
16445: CALL_OW 185
// for i in russianDamageTanks do
16449: LD_ADDR_VAR 0 2
16453: PUSH
16454: LD_EXP 37
16458: PUSH
16459: FOR_IN
16460: IFFALSE 16495
// if i = unit then
16462: LD_VAR 0 2
16466: PUSH
16467: LD_VAR 0 1
16471: EQUAL
16472: IFFALSE 16493
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16474: LD_ADDR_EXP 37
16478: PUSH
16479: LD_EXP 37
16483: PUSH
16484: LD_VAR 0 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: DIFF
16492: ST_TO_ADDR
16493: GO 16459
16495: POP
16496: POP
// tmpMeh = UnitsInside ( unit ) ;
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: CALL_OW 313
16511: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16512: LD_VAR 0 3
16516: PPUSH
16517: CALL_OW 121
// wait ( 0 0$01 ) ;
16521: LD_INT 35
16523: PPUSH
16524: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16528: LD_VAR 0 3
16532: PPUSH
16533: LD_INT 21
16535: PPUSH
16536: CALL_OW 120
// end ; end ;
16540: PPOPN 3
16542: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16543: LD_VAR 0 1
16547: PUSH
16548: LD_INT 21
16550: EQUAL
16551: PUSH
16552: LD_VAR 0 2
16556: PPUSH
16557: CALL_OW 255
16561: PUSH
16562: LD_INT 3
16564: EQUAL
16565: AND
16566: IFFALSE 16580
// SetLives ( human , 1000 ) ;
16568: LD_VAR 0 2
16572: PPUSH
16573: LD_INT 1000
16575: PPUSH
16576: CALL_OW 234
// end ; end_of_file
16580: PPOPN 2
16582: END
// every 0 0$30 trigger cratesStatus = 1 do
16583: LD_EXP 38
16587: PUSH
16588: LD_INT 1
16590: EQUAL
16591: IFFALSE 16655
16593: GO 16595
16595: DISABLE
// begin enable ;
16596: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16597: LD_INT 350
16599: PUSH
16600: LD_INT 1050
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 1
16609: PPUSH
16610: LD_INT 2
16612: PPUSH
16613: CALL_OW 12
16617: ARRAY
16618: PPUSH
16619: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16623: LD_INT 4
16625: PUSH
16626: LD_INT 5
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 1
16635: PPUSH
16636: LD_INT 2
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: PPUSH
16645: LD_INT 7
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: CALL_OW 55
// end ;
16655: END
// every 1 1$0 trigger cratesStatus = 2 do
16656: LD_EXP 38
16660: PUSH
16661: LD_INT 2
16663: EQUAL
16664: IFFALSE 16728
16666: GO 16668
16668: DISABLE
// begin enable ;
16669: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16670: LD_INT 3150
16672: PUSH
16673: LD_INT 4550
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: PPUSH
16683: LD_INT 2
16685: PPUSH
16686: CALL_OW 12
16690: ARRAY
16691: PPUSH
16692: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16696: LD_INT 2
16698: PUSH
16699: LD_INT 5
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 1
16708: PPUSH
16709: LD_INT 2
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: LD_INT 8
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 55
// end ;
16728: END
// every 0 0$30 + 0 0$10 do
16729: GO 16731
16731: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16732: LD_INT 4
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: PPUSH
16745: LD_INT 2
16747: PPUSH
16748: CALL_OW 12
16752: ARRAY
16753: PPUSH
16754: LD_INT 8
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 55
// Wait ( 0 0$15 ) ;
16764: LD_INT 525
16766: PPUSH
16767: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16771: LD_INT 4
16773: PUSH
16774: LD_INT 5
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 1
16783: PPUSH
16784: LD_INT 2
16786: PPUSH
16787: CALL_OW 12
16791: ARRAY
16792: PPUSH
16793: LD_INT 8
16795: PPUSH
16796: LD_INT 1
16798: PPUSH
16799: CALL_OW 55
// Wait ( 0 0$20 ) ;
16803: LD_INT 700
16805: PPUSH
16806: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16810: LD_INT 4
16812: PUSH
16813: LD_INT 5
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 1
16822: PPUSH
16823: LD_INT 2
16825: PPUSH
16826: CALL_OW 12
16830: ARRAY
16831: PPUSH
16832: LD_INT 8
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 55
// end ; end_of_file
16842: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16843: LD_EXP 24
16847: PUSH
16848: LD_INT 1
16850: EQUAL
16851: IFFALSE 17152
16853: GO 16855
16855: DISABLE
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
16860: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_INT 22
16868: PUSH
16869: LD_INT 1
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 21
16878: PUSH
16879: LD_INT 3
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 0
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 30
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: LIST
16918: PPUSH
16919: CALL_OW 69
16923: ST_TO_ADDR
// for i in tmp do
16924: LD_ADDR_VAR 0 1
16928: PUSH
16929: LD_VAR 0 2
16933: PUSH
16934: FOR_IN
16935: IFFALSE 16968
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16937: LD_ADDR_VAR 0 3
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 274
16956: PPUSH
16957: LD_INT 1
16959: PPUSH
16960: CALL_OW 275
16964: PLUS
16965: ST_TO_ADDR
16966: GO 16934
16968: POP
16969: POP
// strings = [ ] ;
16970: LD_ADDR_EXP 27
16974: PUSH
16975: EMPTY
16976: ST_TO_ADDR
// if tmp = 0 then
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 0
16984: EQUAL
16985: IFFALSE 17010
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16987: LD_ADDR_EXP 27
16991: PUSH
16992: LD_EXP 27
16996: PUSH
16997: LD_STRING #Am06-1
16999: PUSH
17000: LD_EXP 25
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: ADD
17009: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: PUSH
17019: LD_EXP 25
17023: PUSH
17024: LD_VAR 0 3
17028: GREATER
17029: AND
17030: IFFALSE 17061
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17032: LD_ADDR_EXP 27
17036: PUSH
17037: LD_EXP 27
17041: PUSH
17042: LD_STRING #Am06-1
17044: PUSH
17045: LD_EXP 25
17049: PUSH
17050: LD_VAR 0 3
17054: MINUS
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: ADD
17060: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17061: LD_VAR 0 2
17065: PUSH
17066: LD_INT 0
17068: GREATER
17069: PUSH
17070: LD_EXP 25
17074: PUSH
17075: LD_VAR 0 3
17079: LESSEQUAL
17080: AND
17081: IFFALSE 17104
// strings = strings ^ [ #Am06-1 , 0 ] ;
17083: LD_ADDR_EXP 27
17087: PUSH
17088: LD_EXP 27
17092: PUSH
17093: LD_STRING #Am06-1
17095: PUSH
17096: LD_INT 0
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: ADD
17103: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17104: LD_ADDR_EXP 26
17108: PUSH
17109: LD_EXP 26
17113: PUSH
17114: LD_INT 35
17116: MINUS
17117: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17118: LD_ADDR_EXP 27
17122: PUSH
17123: LD_EXP 27
17127: PUSH
17128: LD_STRING #Am06-2
17130: PUSH
17131: LD_EXP 26
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: ADD
17140: ST_TO_ADDR
// display_strings = strings ;
17141: LD_ADDR_OWVAR 47
17145: PUSH
17146: LD_EXP 27
17150: ST_TO_ADDR
// enable ;
17151: ENABLE
// end ; end_of_file
17152: PPOPN 3
17154: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17155: LD_INT 0
17157: PPUSH
17158: PPUSH
17159: PPUSH
17160: PPUSH
17161: PPUSH
17162: PPUSH
17163: PPUSH
// j = 0 ;
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: LD_INT 0
17171: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17172: LD_INT 35
17174: PPUSH
17175: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17179: LD_ADDR_VAR 0 2
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 21
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 25
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 25
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 25
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 25
17239: PUSH
17240: LD_INT 4
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17371
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17267: LD_INT 22
17269: PUSH
17270: LD_INT 3
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 21
17282: PUSH
17283: LD_INT 1
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 21
17292: PUSH
17293: LD_INT 2
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 21
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 59
17312: PUSH
17313: EMPTY
17314: LIST
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 91
17325: PUSH
17326: LD_VAR 0 2
17330: PUSH
17331: LD_INT 25
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: LIST
17343: PPUSH
17344: CALL_OW 69
17348: NOT
17349: IFFALSE 17369
// begin tmp = i ;
17351: LD_ADDR_VAR 0 4
17355: PUSH
17356: LD_VAR 0 2
17360: ST_TO_ADDR
// j = 1 ;
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// end ; end ;
17369: GO 17264
17371: POP
17372: POP
// until j = 1 ;
17373: LD_VAR 0 3
17377: PUSH
17378: LD_INT 1
17380: EQUAL
17381: IFFALSE 17172
// blockSpawn = 1 ;
17383: LD_ADDR_EXP 29
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// uc_side = 2 ;
17391: LD_ADDR_OWVAR 20
17395: PUSH
17396: LD_INT 2
17398: ST_TO_ADDR
// uc_nation = 2 ;
17399: LD_ADDR_OWVAR 21
17403: PUSH
17404: LD_INT 2
17406: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17407: LD_ADDR_EXP 19
17411: PUSH
17412: LD_STRING Kurt
17414: PPUSH
17415: LD_INT 0
17417: PPUSH
17418: CALL 5007 0 2
17422: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17423: LD_EXP 19
17427: PPUSH
17428: LD_VAR 0 4
17432: PPUSH
17433: CALL_OW 250
17437: PPUSH
17438: LD_VAR 0 4
17442: PPUSH
17443: CALL_OW 251
17447: PPUSH
17448: LD_INT 5
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 50
// InGameOn ;
17458: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17462: LD_EXP 19
17466: PPUSH
17467: CALL_OW 87
// wait ( 0 0$2 ) ;
17471: LD_INT 70
17473: PPUSH
17474: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17478: LD_VAR 0 4
17482: PPUSH
17483: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17487: LD_VAR 0 4
17491: PPUSH
17492: CALL_OW 122
// wait ( 0 0$1 ) ;
17496: LD_INT 35
17498: PPUSH
17499: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17503: LD_EXP 19
17507: PPUSH
17508: LD_VAR 0 4
17512: PPUSH
17513: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17517: LD_VAR 0 4
17521: PPUSH
17522: LD_EXP 19
17526: PPUSH
17527: CALL_OW 119
// DialogueOn ;
17531: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17535: LD_EXP 19
17539: PPUSH
17540: LD_STRING D2-Kurt-1
17542: PPUSH
17543: CALL_OW 88
// if tmp = JMM then
17547: LD_VAR 0 4
17551: PUSH
17552: LD_EXP 1
17556: EQUAL
17557: IFFALSE 17649
// begin Say ( JMM , D2-JMM-1 ) ;
17559: LD_EXP 1
17563: PPUSH
17564: LD_STRING D2-JMM-1
17566: PPUSH
17567: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17571: LD_EXP 19
17575: PPUSH
17576: LD_STRING D2-Kurt-2
17578: PPUSH
17579: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17583: LD_EXP 1
17587: PPUSH
17588: LD_STRING D2-JMM-2
17590: PPUSH
17591: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17595: LD_EXP 19
17599: PPUSH
17600: LD_STRING D2-Kurt-3
17602: PPUSH
17603: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17607: LD_EXP 1
17611: PPUSH
17612: LD_STRING D2-JMM-3
17614: PPUSH
17615: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17619: LD_EXP 19
17623: PPUSH
17624: LD_STRING D2-Kurt-4
17626: PPUSH
17627: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17631: LD_EXP 1
17635: PPUSH
17636: LD_STRING D2-JMM-4
17638: PPUSH
17639: CALL_OW 88
// DialogueOff ;
17643: CALL_OW 7
// end else
17647: GO 17959
// begin if GetSex ( tmp ) = 1 then
17649: LD_VAR 0 4
17653: PPUSH
17654: CALL_OW 258
17658: PUSH
17659: LD_INT 1
17661: EQUAL
17662: IFFALSE 17676
// Say ( tmp , D2-Sol1-1 ) ;
17664: LD_VAR 0 4
17668: PPUSH
17669: LD_STRING D2-Sol1-1
17671: PPUSH
17672: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17676: LD_VAR 0 4
17680: PPUSH
17681: CALL_OW 258
17685: PUSH
17686: LD_INT 2
17688: EQUAL
17689: IFFALSE 17703
// Say ( tmp , D2-FSol1-1 ) ;
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_STRING D2-FSol1-1
17698: PPUSH
17699: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17703: LD_EXP 19
17707: PPUSH
17708: LD_STRING D2-Kurt-2
17710: PPUSH
17711: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17715: LD_VAR 0 4
17719: PPUSH
17720: CALL_OW 258
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17742
// Say ( tmp , D2-Sol1-2 ) ;
17730: LD_VAR 0 4
17734: PPUSH
17735: LD_STRING D2-Sol1-2
17737: PPUSH
17738: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 258
17751: PUSH
17752: LD_INT 2
17754: EQUAL
17755: IFFALSE 17769
// Say ( tmp , D2-FSol1-2 ) ;
17757: LD_VAR 0 4
17761: PPUSH
17762: LD_STRING D2-FSol1-2
17764: PPUSH
17765: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17769: LD_EXP 19
17773: PPUSH
17774: LD_STRING D2-Kurt-3
17776: PPUSH
17777: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17781: LD_VAR 0 4
17785: PPUSH
17786: CALL_OW 258
17790: PUSH
17791: LD_INT 1
17793: EQUAL
17794: IFFALSE 17808
// Say ( tmp , D2-Sol1-3 ) ;
17796: LD_VAR 0 4
17800: PPUSH
17801: LD_STRING D2-Sol1-3
17803: PPUSH
17804: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17808: LD_VAR 0 4
17812: PPUSH
17813: CALL_OW 258
17817: PUSH
17818: LD_INT 2
17820: EQUAL
17821: IFFALSE 17835
// Say ( tmp , D2-FSol1-3 ) ;
17823: LD_VAR 0 4
17827: PPUSH
17828: LD_STRING D2-FSol1-3
17830: PPUSH
17831: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17835: LD_EXP 19
17839: PPUSH
17840: LD_STRING D2-Kurt-4
17842: PPUSH
17843: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17847: LD_VAR 0 4
17851: PPUSH
17852: CALL_OW 258
17856: PUSH
17857: LD_INT 1
17859: EQUAL
17860: IFFALSE 17874
// Say ( tmp , D2-Sol1-4 ) ;
17862: LD_VAR 0 4
17866: PPUSH
17867: LD_STRING D2-Sol1-4
17869: PPUSH
17870: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17874: LD_VAR 0 4
17878: PPUSH
17879: CALL_OW 258
17883: PUSH
17884: LD_INT 2
17886: EQUAL
17887: IFFALSE 17901
// Say ( tmp , D2-FSol1-4 ) ;
17889: LD_VAR 0 4
17893: PPUSH
17894: LD_STRING D2-FSol1-4
17896: PPUSH
17897: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17901: LD_VAR 0 4
17905: PPUSH
17906: CALL_OW 258
17910: PUSH
17911: LD_INT 1
17913: EQUAL
17914: IFFALSE 17928
// Say ( tmp , D2-Sol1-5 ) ;
17916: LD_VAR 0 4
17920: PPUSH
17921: LD_STRING D2-Sol1-5
17923: PPUSH
17924: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17928: LD_VAR 0 4
17932: PPUSH
17933: CALL_OW 258
17937: PUSH
17938: LD_INT 2
17940: EQUAL
17941: IFFALSE 17955
// Say ( tmp , D2-FSol1-5 ) ;
17943: LD_VAR 0 4
17947: PPUSH
17948: LD_STRING D2-FSol1-5
17950: PPUSH
17951: CALL_OW 88
// DialogueOff ;
17955: CALL_OW 7
// end ; dec = ShowQuery1 ;
17959: LD_ADDR_VAR 0 6
17963: PUSH
17964: CALL 5609 0 0
17968: ST_TO_ADDR
// if dec = 1 then
17969: LD_VAR 0 6
17973: PUSH
17974: LD_INT 1
17976: EQUAL
17977: IFFALSE 18019
// begin DialogueOn ;
17979: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17983: LD_EXP 19
17987: PPUSH
17988: LD_STRING D2a-Kurt-1
17990: PPUSH
17991: CALL_OW 88
// DialogueOff ;
17995: CALL_OW 7
// InGameOff ;
17999: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18003: LD_INT 1
18005: PPUSH
18006: LD_INT 2
18008: PPUSH
18009: LD_INT 2
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: CALL_OW 80
// end ; if dec = 2 then
18019: LD_VAR 0 6
18023: PUSH
18024: LD_INT 2
18026: EQUAL
18027: IFFALSE 18527
// begin DialogueOn ;
18029: CALL_OW 6
// if tmp = JMM then
18033: LD_VAR 0 4
18037: PUSH
18038: LD_EXP 1
18042: EQUAL
18043: IFFALSE 18099
// begin Say ( JMM , D2b-JMM-1 ) ;
18045: LD_EXP 1
18049: PPUSH
18050: LD_STRING D2b-JMM-1
18052: PPUSH
18053: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18057: LD_EXP 19
18061: PPUSH
18062: LD_STRING D2b-Kurt-1
18064: PPUSH
18065: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18069: LD_EXP 1
18073: PPUSH
18074: LD_STRING D2b-JMM-2
18076: PPUSH
18077: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18081: LD_EXP 19
18085: PPUSH
18086: LD_STRING D2b-Kurt-2
18088: PPUSH
18089: CALL_OW 88
// DialogueOff ;
18093: CALL_OW 7
// end else
18097: GO 18289
// begin if GetSex ( tmp ) = 1 then
18099: LD_VAR 0 4
18103: PPUSH
18104: CALL_OW 258
18108: PUSH
18109: LD_INT 1
18111: EQUAL
18112: IFFALSE 18126
// Say ( tmp , D2b-Sol1-1 ) ;
18114: LD_VAR 0 4
18118: PPUSH
18119: LD_STRING D2b-Sol1-1
18121: PPUSH
18122: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18126: LD_VAR 0 4
18130: PPUSH
18131: CALL_OW 258
18135: PUSH
18136: LD_INT 2
18138: EQUAL
18139: IFFALSE 18153
// Say ( tmp , D2b-FSol1-1 ) ;
18141: LD_VAR 0 4
18145: PPUSH
18146: LD_STRING D2b-FSol1-1
18148: PPUSH
18149: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18153: LD_EXP 19
18157: PPUSH
18158: LD_STRING D2b-Kurt-1
18160: PPUSH
18161: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18165: LD_VAR 0 4
18169: PPUSH
18170: CALL_OW 258
18174: PUSH
18175: LD_INT 1
18177: EQUAL
18178: IFFALSE 18192
// Say ( tmp , D2b-Sol1-2 ) ;
18180: LD_VAR 0 4
18184: PPUSH
18185: LD_STRING D2b-Sol1-2
18187: PPUSH
18188: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18192: LD_VAR 0 4
18196: PPUSH
18197: CALL_OW 258
18201: PUSH
18202: LD_INT 2
18204: EQUAL
18205: IFFALSE 18219
// Say ( tmp , D2b-FSol1-2 ) ;
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_STRING D2b-FSol1-2
18214: PPUSH
18215: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18219: LD_EXP 19
18223: PPUSH
18224: LD_STRING D2b-Kurt-2
18226: PPUSH
18227: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18231: LD_VAR 0 4
18235: PPUSH
18236: CALL_OW 258
18240: PUSH
18241: LD_INT 1
18243: EQUAL
18244: IFFALSE 18258
// Say ( tmp , D2c-Sol1-2 ) ;
18246: LD_VAR 0 4
18250: PPUSH
18251: LD_STRING D2c-Sol1-2
18253: PPUSH
18254: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18258: LD_VAR 0 4
18262: PPUSH
18263: CALL_OW 258
18267: PUSH
18268: LD_INT 2
18270: EQUAL
18271: IFFALSE 18285
// Say ( tmp , D2c-FSol1-2 ) ;
18273: LD_VAR 0 4
18277: PPUSH
18278: LD_STRING D2c-FSol1-2
18280: PPUSH
18281: CALL_OW 88
// DialogueOff ;
18285: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18289: LD_ADDR_VAR 0 7
18293: PUSH
18294: CALL 5683 0 0
18298: ST_TO_ADDR
// if dec2 = 1 then
18299: LD_VAR 0 7
18303: PUSH
18304: LD_INT 1
18306: EQUAL
18307: IFFALSE 18349
// begin DialogueOn ;
18309: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18313: LD_EXP 19
18317: PPUSH
18318: LD_STRING D2a-Kurt-1
18320: PPUSH
18321: CALL_OW 88
// DialogueOff ;
18325: CALL_OW 7
// InGameOff ;
18329: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18333: LD_INT 1
18335: PPUSH
18336: LD_INT 2
18338: PPUSH
18339: LD_INT 2
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 80
// end ; if dec2 = 2 then
18349: LD_VAR 0 7
18353: PUSH
18354: LD_INT 2
18356: EQUAL
18357: IFFALSE 18527
// begin if tmp = JMM then
18359: LD_VAR 0 4
18363: PUSH
18364: LD_EXP 1
18368: EQUAL
18369: IFFALSE 18429
// begin DialogueOn ;
18371: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18375: LD_EXP 1
18379: PPUSH
18380: LD_STRING D2c-JMM-1
18382: PPUSH
18383: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18387: LD_EXP 19
18391: PPUSH
18392: LD_STRING D2c-Kurt-1
18394: PPUSH
18395: CALL_OW 88
// DialogueOff ;
18399: CALL_OW 7
// InGameOff ;
18403: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18407: LD_EXP 19
18411: PPUSH
18412: LD_INT 9
18414: PPUSH
18415: CALL_OW 113
// readyToEscape = 1 ;
18419: LD_ADDR_EXP 21
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// end else
18427: GO 18527
// begin DialogueOn ;
18429: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18433: LD_VAR 0 4
18437: PPUSH
18438: CALL_OW 258
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: IFFALSE 18460
// Say ( tmp , D2c-Sol1-1 ) ;
18448: LD_VAR 0 4
18452: PPUSH
18453: LD_STRING D2c-Sol1-1
18455: PPUSH
18456: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 258
18469: PUSH
18470: LD_INT 2
18472: EQUAL
18473: IFFALSE 18487
// Say ( tmp , D2c-FSol1-1 ) ;
18475: LD_VAR 0 4
18479: PPUSH
18480: LD_STRING D2c-FSol1-1
18482: PPUSH
18483: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18487: LD_EXP 19
18491: PPUSH
18492: LD_STRING D2c-Kurt-1
18494: PPUSH
18495: CALL_OW 88
// DialogueOff ;
18499: CALL_OW 7
// InGameOff ;
18503: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18507: LD_EXP 19
18511: PPUSH
18512: LD_INT 9
18514: PPUSH
18515: CALL_OW 113
// readyToEscape = 1 ;
18519: LD_ADDR_EXP 21
18523: PUSH
18524: LD_INT 1
18526: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18527: LD_VAR 0 6
18531: PUSH
18532: LD_INT 3
18534: EQUAL
18535: IFFALSE 18709
// begin DialogueOn ;
18537: CALL_OW 6
// if tmp = JMM then
18541: LD_VAR 0 4
18545: PUSH
18546: LD_EXP 1
18550: EQUAL
18551: IFFALSE 18611
// begin DialogueOn ;
18553: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18557: LD_EXP 1
18561: PPUSH
18562: LD_STRING D2c-JMM-1
18564: PPUSH
18565: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18569: LD_EXP 19
18573: PPUSH
18574: LD_STRING D2c-Kurt-1
18576: PPUSH
18577: CALL_OW 88
// DialogueOff ;
18581: CALL_OW 7
// InGameOff ;
18585: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18589: LD_EXP 19
18593: PPUSH
18594: LD_INT 9
18596: PPUSH
18597: CALL_OW 113
// readyToEscape = 1 ;
18601: LD_ADDR_EXP 21
18605: PUSH
18606: LD_INT 1
18608: ST_TO_ADDR
// end else
18609: GO 18709
// begin DialogueOn ;
18611: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18615: LD_VAR 0 4
18619: PPUSH
18620: CALL_OW 258
18624: PUSH
18625: LD_INT 1
18627: EQUAL
18628: IFFALSE 18642
// Say ( tmp , D2c-Sol1-1 ) ;
18630: LD_VAR 0 4
18634: PPUSH
18635: LD_STRING D2c-Sol1-1
18637: PPUSH
18638: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18642: LD_VAR 0 4
18646: PPUSH
18647: CALL_OW 258
18651: PUSH
18652: LD_INT 2
18654: EQUAL
18655: IFFALSE 18669
// Say ( tmp , D2c-FSol1-1 ) ;
18657: LD_VAR 0 4
18661: PPUSH
18662: LD_STRING D2c-FSol1-1
18664: PPUSH
18665: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18669: LD_EXP 19
18673: PPUSH
18674: LD_STRING D2c-Kurt-1
18676: PPUSH
18677: CALL_OW 88
// DialogueOff ;
18681: CALL_OW 7
// InGameOff ;
18685: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18689: LD_EXP 19
18693: PPUSH
18694: LD_INT 9
18696: PPUSH
18697: CALL_OW 113
// readyToEscape = 1 ;
18701: LD_ADDR_EXP 21
18705: PUSH
18706: LD_INT 1
18708: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18709: LD_ADDR_EXP 29
18713: PUSH
18714: LD_INT 0
18716: ST_TO_ADDR
// end ; end_of_file
18717: LD_VAR 0 1
18721: RET
// every 0 0$1 do
18722: GO 18724
18724: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18725: LD_INT 3
18727: PPUSH
18728: LD_INT 32
18730: PPUSH
18731: LD_INT 3
18733: PPUSH
18734: CALL 5738 0 3
18738: END
// every 0 0$1 do
18739: GO 18741
18741: DISABLE
// begin enable ;
18742: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18743: LD_INT 3
18745: PPUSH
18746: LD_INT 2
18748: PPUSH
18749: CALL 5823 0 2
// if disableHealAI = 0 then
18753: LD_EXP 33
18757: PUSH
18758: LD_INT 0
18760: EQUAL
18761: IFFALSE 18779
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18763: LD_INT 3
18765: PPUSH
18766: LD_INT 10
18768: PPUSH
18769: LD_INT 11
18771: PPUSH
18772: LD_INT 32
18774: PPUSH
18775: CALL 6082 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18779: LD_INT 3
18781: PPUSH
18782: LD_INT 51
18784: PPUSH
18785: LD_INT 7
18787: PPUSH
18788: CALL 7871 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18792: LD_INT 3
18794: PPUSH
18795: LD_INT 14
18797: PPUSH
18798: LD_INT 121
18800: PPUSH
18801: LD_INT 100
18803: PPUSH
18804: CALL 7032 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18808: LD_INT 3
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL 6520 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18818: LD_INT 3
18820: PPUSH
18821: LD_EXP 31
18825: PPUSH
18826: CALL 8014 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18830: LD_INT 3
18832: PPUSH
18833: LD_INT 8
18835: PUSH
18836: LD_INT 67
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 1
18845: PPUSH
18846: LD_INT 2
18848: PPUSH
18849: CALL_OW 12
18853: ARRAY
18854: PPUSH
18855: LD_INT 11
18857: PPUSH
18858: CALL 8220 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18862: LD_INT 3
18864: PPUSH
18865: LD_INT 1
18867: PPUSH
18868: CALL 8577 0 2
// end ;
18872: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18873: LD_INT 22
18875: PUSH
18876: LD_INT 3
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 21
18885: PUSH
18886: LD_INT 2
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 55
18895: PUSH
18896: EMPTY
18897: LIST
18898: PUSH
18899: LD_INT 3
18901: PUSH
18902: LD_INT 34
18904: PUSH
18905: LD_INT 51
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 69
18926: PUSH
18927: LD_INT 0
18929: EQUAL
18930: PUSH
18931: LD_INT 21
18933: PPUSH
18934: CALL_OW 255
18938: PUSH
18939: LD_INT 3
18941: EQUAL
18942: AND
18943: PUSH
18944: LD_INT 21
18946: PPUSH
18947: CALL_OW 302
18951: AND
18952: PUSH
18953: LD_INT 2
18955: PPUSH
18956: CALL_OW 255
18960: PUSH
18961: LD_INT 3
18963: EQUAL
18964: AND
18965: PUSH
18966: LD_INT 2
18968: PPUSH
18969: CALL_OW 302
18973: AND
18974: IFFALSE 19158
18976: GO 18978
18978: DISABLE
// begin enable ;
18979: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18980: LD_INT 2
18982: PPUSH
18983: CALL_OW 274
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: LD_INT 1000
18993: PPUSH
18994: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 21
19003: PPUSH
19004: LD_INT 5
19006: PUSH
19007: LD_INT 6
19009: PUSH
19010: LD_INT 6
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: PUSH
19018: LD_OWVAR 67
19022: ARRAY
19023: PPUSH
19024: LD_INT 43
19026: PUSH
19027: LD_INT 43
19029: PUSH
19030: LD_INT 44
19032: PUSH
19033: LD_INT 44
19035: PUSH
19036: LD_INT 46
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 43
19048: PUSH
19049: LD_INT 43
19051: PUSH
19052: LD_INT 44
19054: PUSH
19055: LD_INT 44
19057: PUSH
19058: LD_INT 44
19060: PUSH
19061: LD_INT 46
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 44
19074: PUSH
19075: LD_INT 44
19077: PUSH
19078: LD_INT 44
19080: PUSH
19081: LD_INT 44
19083: PUSH
19084: LD_INT 46
19086: PUSH
19087: LD_INT 46
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: PUSH
19103: LD_OWVAR 67
19107: ARRAY
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: LD_INT 1
19114: PPUSH
19115: LD_INT 22
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_INT 24
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PPUSH
19131: LD_INT 2
19133: PPUSH
19134: CALL_OW 12
19138: ARRAY
19139: PUSH
19140: LD_INT 24
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: LD_OWVAR 67
19152: ARRAY
19153: PPUSH
19154: CALL 6366 0 7
// end ;
19158: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19159: LD_INT 17
19161: PPUSH
19162: CALL_OW 255
19166: PUSH
19167: LD_INT 3
19169: EQUAL
19170: PUSH
19171: LD_INT 17
19173: PPUSH
19174: CALL_OW 302
19178: AND
19179: PUSH
19180: LD_INT 2
19182: PPUSH
19183: CALL_OW 255
19187: PUSH
19188: LD_INT 3
19190: EQUAL
19191: AND
19192: PUSH
19193: LD_INT 2
19195: PPUSH
19196: CALL_OW 302
19200: AND
19201: IFFALSE 19268
19203: GO 19205
19205: DISABLE
// begin enable ;
19206: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19207: LD_INT 17
19209: PPUSH
19210: LD_INT 22
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: LD_INT 1
19218: PPUSH
19219: LD_INT 42
19221: PUSH
19222: LD_INT 43
19224: PUSH
19225: LD_INT 44
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: PPUSH
19236: LD_INT 3
19238: PPUSH
19239: CALL_OW 12
19243: ARRAY
19244: PPUSH
19245: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19249: LD_INT 17
19251: PPUSH
19252: LD_INT 22
19254: PPUSH
19255: LD_INT 1
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: LD_INT 51
19263: PPUSH
19264: CALL_OW 185
// end ;
19268: END
// every 2 2$0 do var i , j ;
19269: GO 19271
19271: DISABLE
19272: LD_INT 0
19274: PPUSH
19275: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19276: LD_INT 14700
19278: PUSH
19279: LD_INT 33600
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PPUSH
19289: LD_INT 2
19291: PPUSH
19292: CALL_OW 12
19296: ARRAY
19297: PPUSH
19298: CALL_OW 67
// disableHealAI = 1 ;
19302: LD_ADDR_EXP 33
19306: PUSH
19307: LD_INT 1
19309: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19310: LD_ADDR_VAR 0 1
19314: PUSH
19315: LD_INT 22
19317: PUSH
19318: LD_INT 3
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 25
19327: PUSH
19328: LD_INT 4
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL_OW 69
19343: PUSH
19344: FOR_IN
19345: IFFALSE 19358
// ComExitBuilding ( i ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: CALL_OW 122
19356: GO 19344
19358: POP
19359: POP
// wait ( 0 0$1 ) ;
19360: LD_INT 35
19362: PPUSH
19363: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19367: LD_INT 35
19369: PPUSH
19370: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19374: LD_ADDR_VAR 0 1
19378: PUSH
19379: LD_INT 22
19381: PUSH
19382: LD_INT 3
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 25
19391: PUSH
19392: LD_INT 4
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: PUSH
19408: FOR_IN
19409: IFFALSE 19486
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19411: LD_ADDR_VAR 0 2
19415: PUSH
19416: LD_INT 19
19418: PPUSH
19419: LD_INT 22
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 25
19431: PUSH
19432: LD_INT 12
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 70
19447: PUSH
19448: FOR_IN
19449: IFFALSE 19482
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19451: LD_VAR 0 1
19455: PPUSH
19456: LD_VAR 0 2
19460: PPUSH
19461: CALL_OW 250
19465: PPUSH
19466: LD_VAR 0 2
19470: PPUSH
19471: CALL_OW 251
19475: PPUSH
19476: CALL_OW 191
// end ;
19480: GO 19448
19482: POP
19483: POP
// end ;
19484: GO 19408
19486: POP
19487: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19488: LD_INT 22
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 25
19500: PUSH
19501: LD_INT 4
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: PUSH
19517: LD_INT 0
19519: EQUAL
19520: PUSH
19521: LD_EXP 32
19525: PUSH
19526: LD_INT 6
19528: PUSH
19529: LD_INT 7
19531: PUSH
19532: LD_INT 8
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: LD_OWVAR 67
19544: ARRAY
19545: GREATEREQUAL
19546: OR
19547: PUSH
19548: LD_INT 19
19550: PPUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 25
19563: PUSH
19564: LD_INT 12
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PPUSH
19575: CALL_OW 70
19579: PUSH
19580: LD_INT 0
19582: EQUAL
19583: OR
19584: IFFALSE 19367
// disableHealAI = 0 ;
19586: LD_ADDR_EXP 33
19590: PUSH
19591: LD_INT 0
19593: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19594: LD_ADDR_VAR 0 1
19598: PUSH
19599: LD_INT 22
19601: PUSH
19602: LD_INT 3
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 25
19611: PUSH
19612: LD_INT 12
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PPUSH
19623: CALL_OW 69
19627: PUSH
19628: FOR_IN
19629: IFFALSE 19645
// SetClass ( i , 16 ) ;
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 16
19638: PPUSH
19639: CALL_OW 336
19643: GO 19628
19645: POP
19646: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19647: LD_ADDR_VAR 0 1
19651: PUSH
19652: LD_INT 22
19654: PUSH
19655: LD_INT 3
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 25
19664: PUSH
19665: LD_INT 4
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL_OW 69
19680: PUSH
19681: FOR_IN
19682: IFFALSE 19701
// ComMoveXY ( i , 113 , 94 ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 113
19691: PPUSH
19692: LD_INT 94
19694: PPUSH
19695: CALL_OW 111
19699: GO 19681
19701: POP
19702: POP
// end ;
19703: PPOPN 2
19705: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19706: LD_INT 21
19708: PPUSH
19709: CALL_OW 255
19713: PUSH
19714: LD_INT 3
19716: EQUAL
19717: PUSH
19718: LD_INT 21
19720: PPUSH
19721: CALL_OW 302
19725: AND
19726: PUSH
19727: LD_INT 22
19729: PUSH
19730: LD_INT 3
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 34
19739: PUSH
19740: LD_INT 51
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PUSH
19756: LD_INT 0
19758: EQUAL
19759: AND
19760: IFFALSE 19792
19762: GO 19764
19764: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19765: LD_INT 21
19767: PPUSH
19768: LD_INT 23
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_INT 51
19779: PPUSH
19780: CALL_OW 185
// wait ( 5 5$0 ) ;
19784: LD_INT 10500
19786: PPUSH
19787: CALL_OW 67
// enable ;
19791: ENABLE
// end ; end_of_file
19792: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19793: LD_EXP 26
19797: PUSH
19798: LD_INT 0
19800: LESSEQUAL
19801: IFFALSE 19950
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
19809: PPUSH
19810: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19811: LD_ADDR_VAR 0 2
19815: PUSH
19816: LD_INT 22
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 21
19828: PUSH
19829: LD_INT 3
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 69
19873: ST_TO_ADDR
// for i in tmp do
19874: LD_ADDR_VAR 0 1
19878: PUSH
19879: LD_VAR 0 2
19883: PUSH
19884: FOR_IN
19885: IFFALSE 19918
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_VAR 0 3
19896: PUSH
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 274
19906: PPUSH
19907: LD_INT 1
19909: PPUSH
19910: CALL_OW 275
19914: PLUS
19915: ST_TO_ADDR
19916: GO 19884
19918: POP
19919: POP
// if yourCrates >= needCrates then
19920: LD_VAR 0 3
19924: PUSH
19925: LD_EXP 25
19929: GREATEREQUAL
19930: IFFALSE 19943
// begin FinishMission ( yourCrates ) ;
19932: LD_VAR 0 3
19936: PPUSH
19937: CALL 19953 0 1
// end else
19941: GO 19950
// begin YouLost ( matmin ) ;
19943: LD_STRING matmin
19945: PPUSH
19946: CALL_OW 104
// end ; end ;
19950: PPOPN 3
19952: END
// export function FinishMission ( crates ) ; begin
19953: LD_INT 0
19955: PPUSH
// if crates + 100 > crates then
19956: LD_VAR 0 1
19960: PUSH
19961: LD_INT 100
19963: PLUS
19964: PUSH
19965: LD_VAR 0 1
19969: GREATER
19970: IFFALSE 19994
// begin AddMedal ( cans , 1 ) ;
19972: LD_STRING cans
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19982: LD_INT 1
19984: PPUSH
19985: LD_STRING 06_crates_1
19987: PPUSH
19988: CALL_OW 39
// end else
19992: GO 20015
// begin AddMedal ( cans , - 1 ) ;
19994: LD_STRING cans
19996: PPUSH
19997: LD_INT 1
19999: NEG
20000: PPUSH
20001: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20005: LD_INT 0
20007: PPUSH
20008: LD_STRING 06_crates_1
20010: PPUSH
20011: CALL_OW 39
// end ; if unitLost < 2 then
20015: LD_EXP 30
20019: PUSH
20020: LD_INT 2
20022: LESS
20023: IFFALSE 20037
// begin AddMedal ( people , 1 ) ;
20025: LD_STRING people
20027: PPUSH
20028: LD_INT 1
20030: PPUSH
20031: CALL_OW 101
// end else
20035: GO 20048
// begin AddMedal ( people , - 1 ) ;
20037: LD_STRING people
20039: PPUSH
20040: LD_INT 1
20042: NEG
20043: PPUSH
20044: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20048: LD_EXP 28
20052: PPUSH
20053: LD_STRING 06_remoteVehs_1
20055: PPUSH
20056: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20060: LD_EXP 28
20064: PUSH
20065: LD_INT 1
20067: EQUAL
20068: IFFALSE 20082
// begin AddMedal ( remote , 1 ) ;
20070: LD_STRING remote
20072: PPUSH
20073: LD_INT 1
20075: PPUSH
20076: CALL_OW 101
// end else
20080: GO 20122
// begin if GetTech ( 18 , 1 ) = state_enabled then
20082: LD_INT 18
20084: PPUSH
20085: LD_INT 1
20087: PPUSH
20088: CALL_OW 321
20092: PUSH
20093: LD_INT 1
20095: EQUAL
20096: IFFALSE 20111
// begin AddMedal ( remote , - 1 ) ;
20098: LD_STRING remote
20100: PPUSH
20101: LD_INT 1
20103: NEG
20104: PPUSH
20105: CALL_OW 101
// end else
20109: GO 20122
// begin AddMedal ( remote , - 2 ) ;
20111: LD_STRING remote
20113: PPUSH
20114: LD_INT 2
20116: NEG
20117: PPUSH
20118: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20122: LD_EXP 20
20126: PPUSH
20127: LD_STRING 06_KurtStatus_1
20129: PPUSH
20130: CALL_OW 39
// GiveMedals ( Main ) ;
20134: LD_STRING Main
20136: PPUSH
20137: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20141: LD_INT 50
20143: PUSH
20144: EMPTY
20145: LIST
20146: PUSH
20147: LD_INT 22
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 21
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 2
20169: PUSH
20170: LD_INT 25
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 25
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 25
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 25
20202: PUSH
20203: LD_INT 4
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: PPUSH
20223: CALL_OW 69
20227: PPUSH
20228: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20232: LD_EXP 1
20236: PPUSH
20237: LD_EXP 41
20241: PUSH
20242: LD_STRING JMM
20244: STR
20245: PPUSH
20246: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20250: LD_EXP 2
20254: PPUSH
20255: LD_EXP 41
20259: PUSH
20260: LD_STRING Lisa
20262: STR
20263: PPUSH
20264: CALL 5226 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20268: LD_EXP 3
20272: PPUSH
20273: LD_EXP 41
20277: PUSH
20278: LD_STRING Bobby
20280: STR
20281: PPUSH
20282: CALL 5226 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20286: LD_EXP 4
20290: PPUSH
20291: LD_EXP 41
20295: PUSH
20296: LD_STRING Cyrus
20298: STR
20299: PPUSH
20300: CALL 5226 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20304: LD_EXP 5
20308: PPUSH
20309: LD_EXP 41
20313: PUSH
20314: LD_STRING Frank
20316: STR
20317: PPUSH
20318: CALL 5226 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20322: LD_EXP 6
20326: PPUSH
20327: LD_EXP 41
20331: PUSH
20332: LD_STRING Brown
20334: STR
20335: PPUSH
20336: CALL 5226 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20340: LD_EXP 7
20344: PPUSH
20345: LD_EXP 41
20349: PUSH
20350: LD_STRING Donaldson
20352: STR
20353: PPUSH
20354: CALL 5226 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20358: LD_EXP 8
20362: PPUSH
20363: LD_EXP 41
20367: PUSH
20368: LD_STRING Gladstone
20370: STR
20371: PPUSH
20372: CALL 5226 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20376: LD_EXP 9
20380: PPUSH
20381: LD_EXP 41
20385: PUSH
20386: LD_STRING Denis
20388: STR
20389: PPUSH
20390: CALL 5226 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20394: LD_EXP 15
20398: PPUSH
20399: LD_EXP 41
20403: PUSH
20404: LD_STRING Joan
20406: STR
20407: PPUSH
20408: CALL 5226 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20412: LD_EXP 16
20416: PPUSH
20417: LD_STRING 06_JoanStatus_1
20419: PPUSH
20420: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20424: LD_INT 50
20426: PUSH
20427: EMPTY
20428: LIST
20429: PUSH
20430: LD_INT 22
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 21
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 25
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 25
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 25
20475: PUSH
20476: LD_INT 3
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 25
20485: PUSH
20486: LD_INT 4
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: PPUSH
20506: CALL_OW 69
20510: PUSH
20511: LD_EXP 1
20515: PUSH
20516: LD_EXP 2
20520: PUSH
20521: LD_EXP 3
20525: PUSH
20526: LD_EXP 4
20530: PUSH
20531: LD_EXP 5
20535: PUSH
20536: LD_EXP 6
20540: PUSH
20541: LD_EXP 7
20545: PUSH
20546: LD_EXP 8
20550: PUSH
20551: LD_EXP 9
20555: PUSH
20556: LD_EXP 15
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: DIFF
20573: PPUSH
20574: LD_STRING 06_other_survivors
20576: PPUSH
20577: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20581: LD_INT 50
20583: PUSH
20584: EMPTY
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 1
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 25
20612: PUSH
20613: LD_INT 12
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 25
20622: PUSH
20623: LD_INT 16
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: PPUSH
20641: CALL_OW 69
20645: PPUSH
20646: LD_STRING 06_other_apemans
20648: PPUSH
20649: CALL_OW 38
// YouWin ;
20653: CALL_OW 103
// end ; end_of_file
20657: LD_VAR 0 2
20661: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
20662: LD_EXP 39
20666: PUSH
20667: LD_INT 5
20669: PUSH
20670: LD_INT 4
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PUSH
20681: LD_OWVAR 67
20685: ARRAY
20686: EQUAL
20687: IFFALSE 20802
20689: GO 20691
20691: DISABLE
// begin enable ;
20692: ENABLE
// sendedConvoys = 0 ;
20693: LD_ADDR_EXP 39
20697: PUSH
20698: LD_INT 0
20700: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20701: LD_INT 6
20703: PPUSH
20704: LD_INT 3
20706: PPUSH
20707: LD_INT 5
20709: PPUSH
20710: LD_INT 10
20712: PPUSH
20713: CALL_OW 12
20717: PUSH
20718: LD_INT 5
20720: PPUSH
20721: LD_INT 11
20723: PPUSH
20724: CALL_OW 12
20728: PUSH
20729: LD_INT 8
20731: PPUSH
20732: LD_INT 12
20734: PPUSH
20735: CALL_OW 12
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: PUSH
20745: LD_OWVAR 67
20749: ARRAY
20750: PPUSH
20751: LD_INT 0
20753: PPUSH
20754: LD_INT 0
20756: PPUSH
20757: LD_INT 0
20759: PPUSH
20760: LD_INT 3
20762: PPUSH
20763: LD_EXP 34
20767: PPUSH
20768: LD_EXP 35
20772: PPUSH
20773: CALL_OW 12
20777: PPUSH
20778: LD_INT 18
20780: PPUSH
20781: LD_INT 17
20783: PPUSH
20784: LD_INT 1
20786: PPUSH
20787: LD_INT 1
20789: PPUSH
20790: LD_INT 2
20792: PPUSH
20793: CALL_OW 12
20797: PPUSH
20798: CALL 8807 0 12
// end ; end_of_file
20802: END
// export function PrepareNature ; var i , un ; begin
20803: LD_INT 0
20805: PPUSH
20806: PPUSH
20807: PPUSH
// for i = 1 to Difficulty + 2 do
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: DOUBLE
20814: LD_INT 1
20816: DEC
20817: ST_TO_ADDR
20818: LD_OWVAR 67
20822: PUSH
20823: LD_INT 2
20825: PLUS
20826: PUSH
20827: FOR_TO
20828: IFFALSE 20937
// begin hc_sex = sex_male ;
20830: LD_ADDR_OWVAR 27
20834: PUSH
20835: LD_INT 1
20837: ST_TO_ADDR
// uc_side = 0 ;
20838: LD_ADDR_OWVAR 20
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// uc_nation = nation_nature ;
20846: LD_ADDR_OWVAR 21
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// hc_class = class_tiger ;
20854: LD_ADDR_OWVAR 28
20858: PUSH
20859: LD_INT 14
20861: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20862: LD_ADDR_OWVAR 31
20866: PUSH
20867: LD_EXP 35
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20887: LD_ADDR_OWVAR 35
20891: PUSH
20892: LD_INT 5
20894: NEG
20895: PPUSH
20896: LD_INT 5
20898: PPUSH
20899: CALL_OW 12
20903: PUSH
20904: LD_OWVAR 67
20908: MUL
20909: ST_TO_ADDR
// un = CreateHuman ;
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: CALL_OW 44
20919: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20920: LD_VAR 0 3
20924: PPUSH
20925: LD_INT 20
20927: PPUSH
20928: LD_INT 0
20930: PPUSH
20931: CALL_OW 49
// end ;
20935: GO 20827
20937: POP
20938: POP
// for i = 1 to rand ( 3 , 4 ) do
20939: LD_ADDR_VAR 0 2
20943: PUSH
20944: DOUBLE
20945: LD_INT 1
20947: DEC
20948: ST_TO_ADDR
20949: LD_INT 3
20951: PPUSH
20952: LD_INT 4
20954: PPUSH
20955: CALL_OW 12
20959: PUSH
20960: FOR_TO
20961: IFFALSE 21055
// begin hc_sex = sex_male ;
20963: LD_ADDR_OWVAR 27
20967: PUSH
20968: LD_INT 1
20970: ST_TO_ADDR
// uc_side = 0 ;
20971: LD_ADDR_OWVAR 20
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// uc_nation = nation_nature ;
20979: LD_ADDR_OWVAR 21
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// hc_class = 18 ;
20987: LD_ADDR_OWVAR 28
20991: PUSH
20992: LD_INT 18
20994: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20995: LD_ADDR_OWVAR 31
20999: PUSH
21000: LD_EXP 35
21004: PUSH
21005: LD_INT 0
21007: PUSH
21008: LD_INT 0
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: ST_TO_ADDR
// hc_agressivity = 0 ;
21020: LD_ADDR_OWVAR 35
21024: PUSH
21025: LD_INT 0
21027: ST_TO_ADDR
// un = CreateHuman ;
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: CALL_OW 44
21037: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21038: LD_VAR 0 3
21042: PPUSH
21043: LD_INT 20
21045: PPUSH
21046: LD_INT 0
21048: PPUSH
21049: CALL_OW 49
// end ;
21053: GO 20960
21055: POP
21056: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21057: LD_ADDR_VAR 0 2
21061: PUSH
21062: DOUBLE
21063: LD_INT 1
21065: DEC
21066: ST_TO_ADDR
21067: LD_INT 1
21069: PPUSH
21070: LD_INT 3
21072: PPUSH
21073: CALL_OW 12
21077: PUSH
21078: LD_OWVAR 67
21082: PLUS
21083: PUSH
21084: FOR_TO
21085: IFFALSE 21266
// begin hc_sex = sex_male ;
21087: LD_ADDR_OWVAR 27
21091: PUSH
21092: LD_INT 1
21094: ST_TO_ADDR
// uc_side = 0 ;
21095: LD_ADDR_OWVAR 20
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// uc_nation = nation_nature ;
21103: LD_ADDR_OWVAR 21
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// hc_class = class_apeman ;
21111: LD_ADDR_OWVAR 28
21115: PUSH
21116: LD_INT 12
21118: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21119: LD_ADDR_OWVAR 31
21123: PUSH
21124: LD_EXP 34
21128: PPUSH
21129: LD_EXP 35
21133: PPUSH
21134: CALL_OW 12
21138: PUSH
21139: LD_EXP 34
21143: PPUSH
21144: LD_EXP 35
21148: PPUSH
21149: CALL_OW 12
21153: PUSH
21154: LD_EXP 34
21158: PPUSH
21159: LD_EXP 35
21163: PPUSH
21164: CALL_OW 12
21168: PUSH
21169: LD_EXP 34
21173: PPUSH
21174: LD_EXP 35
21178: PPUSH
21179: CALL_OW 12
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21190: LD_ADDR_OWVAR 35
21194: PUSH
21195: LD_INT 20
21197: PPUSH
21198: LD_INT 30
21200: PPUSH
21201: CALL_OW 12
21205: PUSH
21206: LD_INT 30
21208: PPUSH
21209: LD_INT 40
21211: PPUSH
21212: CALL_OW 12
21216: PUSH
21217: LD_INT 40
21219: PPUSH
21220: LD_INT 50
21222: PPUSH
21223: CALL_OW 12
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_OWVAR 67
21237: ARRAY
21238: ST_TO_ADDR
// un = CreateHuman ;
21239: LD_ADDR_VAR 0 3
21243: PUSH
21244: CALL_OW 44
21248: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21249: LD_VAR 0 3
21253: PPUSH
21254: LD_INT 21
21256: PPUSH
21257: LD_INT 0
21259: PPUSH
21260: CALL_OW 49
// end ;
21264: GO 21084
21266: POP
21267: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21268: LD_ADDR_VAR 0 2
21272: PUSH
21273: DOUBLE
21274: LD_INT 1
21276: DEC
21277: ST_TO_ADDR
21278: LD_INT 5
21280: PPUSH
21281: LD_INT 6
21283: PPUSH
21284: CALL_OW 12
21288: PUSH
21289: LD_OWVAR 67
21293: PLUS
21294: PUSH
21295: FOR_TO
21296: IFFALSE 21442
// begin hc_sex = sex_male ;
21298: LD_ADDR_OWVAR 27
21302: PUSH
21303: LD_INT 1
21305: ST_TO_ADDR
// uc_side = 0 ;
21306: LD_ADDR_OWVAR 20
21310: PUSH
21311: LD_INT 0
21313: ST_TO_ADDR
// uc_nation = nation_nature ;
21314: LD_ADDR_OWVAR 21
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// hc_class = class_apeman ;
21322: LD_ADDR_OWVAR 28
21326: PUSH
21327: LD_INT 12
21329: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21330: LD_ADDR_OWVAR 31
21334: PUSH
21335: LD_EXP 34
21339: PPUSH
21340: LD_EXP 35
21344: PPUSH
21345: CALL_OW 12
21349: PUSH
21350: LD_EXP 34
21354: PPUSH
21355: LD_EXP 35
21359: PPUSH
21360: CALL_OW 12
21364: PUSH
21365: LD_OWVAR 67
21369: PLUS
21370: PUSH
21371: LD_EXP 34
21375: PPUSH
21376: LD_EXP 35
21380: PPUSH
21381: CALL_OW 12
21385: PUSH
21386: LD_EXP 34
21390: PPUSH
21391: LD_EXP 35
21395: PPUSH
21396: CALL_OW 12
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: ST_TO_ADDR
// hc_agressivity = 0 ;
21407: LD_ADDR_OWVAR 35
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// un = CreateHuman ;
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: CALL_OW 44
21424: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21425: LD_VAR 0 3
21429: PPUSH
21430: LD_INT 22
21432: PPUSH
21433: LD_INT 0
21435: PPUSH
21436: CALL_OW 49
// end ;
21440: GO 21295
21442: POP
21443: POP
// end ; end_of_file
21444: LD_VAR 0 1
21448: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21449: LD_EXP 1
21453: PPUSH
21454: CALL_OW 301
21458: IFFALSE 21470
21460: GO 21462
21462: DISABLE
// YouLost ( JMM ) ;
21463: LD_STRING JMM
21465: PPUSH
21466: CALL_OW 104
21470: END
