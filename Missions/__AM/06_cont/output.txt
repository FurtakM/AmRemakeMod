// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6179 0 0
// PrepareNature ;
 250: CALL 23043 0 0
// PrepareRussian ;
 254: CALL 5286 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5663 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5663 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5663 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5663 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5663 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5663 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5663 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5663 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5663 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; begin
2139: LD_INT 0
2141: PPUSH
// uc_side = 4 ;
2142: LD_ADDR_OWVAR 20
2146: PUSH
2147: LD_INT 4
2149: ST_TO_ADDR
// uc_nation = 1 ;
2150: LD_ADDR_OWVAR 21
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2158: LD_ADDR_EXP 9
2162: PUSH
2163: LD_STRING Denis
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: CALL 5663 0 2
2173: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2174: LD_EXP 9
2178: PPUSH
2179: LD_INT 11
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2189: LD_EXP 9
2193: PPUSH
2194: LD_INT 4
2196: PPUSH
2197: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2201: LD_EXP 9
2205: PPUSH
2206: LD_INT 750
2208: PPUSH
2209: CALL_OW 234
// end ;
2213: LD_VAR 0 1
2217: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2218: LD_INT 0
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
// area := HarrisonSupportArea ;
2225: LD_ADDR_VAR 0 4
2229: PUSH
2230: LD_INT 3
2232: ST_TO_ADDR
// dir := 2 ;
2233: LD_ADDR_VAR 0 5
2237: PUSH
2238: LD_INT 2
2240: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2241: LD_VAR 0 4
2245: PPUSH
2246: LD_INT 21
2248: PUSH
2249: LD_INT 3
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 70
2260: IFFALSE 2278
// begin area := HarrisonSupportArea2 ;
2262: LD_ADDR_VAR 0 4
2266: PUSH
2267: LD_INT 31
2269: ST_TO_ADDR
// dir := 1 ;
2270: LD_ADDR_VAR 0 5
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// end ; uc_side = 1 ;
2278: LD_ADDR_OWVAR 20
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// uc_nation = 1 ;
2286: LD_ADDR_OWVAR 21
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// vc_engine = 1 ;
2294: LD_ADDR_OWVAR 39
2298: PUSH
2299: LD_INT 1
2301: ST_TO_ADDR
// vc_control = 1 ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 1
2309: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 4
2317: PUSH
2318: LD_INT 4
2320: PUSH
2321: LD_INT 2
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_OWVAR 67
2333: ARRAY
2334: ST_TO_ADDR
// vc_chassis = 2 ;
2335: LD_ADDR_OWVAR 37
2339: PUSH
2340: LD_INT 2
2342: ST_TO_ADDR
// veh = CreateVehicle ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: CALL_OW 45
2352: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_VAR 0 4
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2384: LD_VAR 0 3
2388: PPUSH
2389: LD_INT 50
2391: PPUSH
2392: CALL_OW 240
// hc_class := 2 ;
2396: LD_ADDR_OWVAR 28
2400: PUSH
2401: LD_INT 2
2403: ST_TO_ADDR
// hc_sex := sex_male ;
2404: LD_ADDR_OWVAR 27
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING SecondCharsGal
2419: ST_TO_ADDR
// hc_face_number := 52 ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_INT 52
2427: ST_TO_ADDR
// hc_name := Craig Brown ;
2428: LD_ADDR_OWVAR 26
2432: PUSH
2433: LD_STRING Craig Brown
2435: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2436: LD_ADDR_OWVAR 29
2440: PUSH
2441: LD_INT 10
2443: PUSH
2444: LD_INT 10
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2451: LD_ADDR_OWVAR 30
2455: PUSH
2456: LD_INT 0
2458: PUSH
2459: LD_INT 2
2461: PUSH
2462: LD_INT 0
2464: PUSH
2465: LD_INT 0
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2474: LD_ADDR_OWVAR 31
2478: PUSH
2479: LD_INT 2
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: LD_INT 0
2487: PUSH
2488: LD_INT 0
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2497: LD_ADDR_EXP 17
2501: PUSH
2502: CALL_OW 44
2506: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2507: LD_EXP 17
2511: PPUSH
2512: LD_VAR 0 3
2516: PPUSH
2517: CALL_OW 52
// vc_engine = 1 ;
2521: LD_ADDR_OWVAR 39
2525: PUSH
2526: LD_INT 1
2528: ST_TO_ADDR
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2537: LD_ADDR_OWVAR 40
2541: PUSH
2542: LD_INT 3
2544: ST_TO_ADDR
// vc_chassis = 2 ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 2
2552: ST_TO_ADDR
// veh = CreateVehicle ;
2553: LD_ADDR_VAR 0 3
2557: PUSH
2558: CALL_OW 45
2562: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2563: LD_VAR 0 3
2567: PPUSH
2568: LD_VAR 0 5
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_VAR 0 4
2586: PPUSH
2587: LD_INT 0
2589: PPUSH
2590: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 50
2601: PPUSH
2602: CALL_OW 240
// hc_class := 1 ;
2606: LD_ADDR_OWVAR 28
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// hc_sex := sex_female ;
2614: LD_ADDR_OWVAR 27
2618: PUSH
2619: LD_INT 2
2621: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING SecondCharsGal
2629: ST_TO_ADDR
// hc_face_number := 45 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 45
2637: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2638: LD_ADDR_OWVAR 29
2642: PUSH
2643: LD_INT 11
2645: PUSH
2646: LD_INT 10
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2653: LD_ADDR_OWVAR 26
2657: PUSH
2658: LD_STRING Ingrid Jonsson
2660: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2661: LD_ADDR_OWVAR 30
2665: PUSH
2666: LD_INT 1
2668: PUSH
2669: LD_INT 1
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: LD_INT 0
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2684: LD_ADDR_OWVAR 31
2688: PUSH
2689: LD_INT 3
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: LD_INT 1
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2707: LD_ADDR_EXP 18
2711: PUSH
2712: CALL_OW 44
2716: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2717: LD_EXP 18
2721: PPUSH
2722: LD_VAR 0 3
2726: PPUSH
2727: CALL_OW 52
// end ;
2731: LD_VAR 0 1
2735: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2736: LD_INT 0
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
// j = 0 ;
2743: LD_ADDR_VAR 0 3
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2751: LD_INT 35
2753: PPUSH
2754: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: LD_INT 22
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: LD_INT 21
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 26
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 2
2795: PUSH
2796: LD_INT 25
2798: PUSH
2799: LD_INT 1
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PUSH
2806: LD_INT 25
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 25
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 25
2828: PUSH
2829: LD_INT 4
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: PPUSH
2849: CALL_OW 69
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2981
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2857: LD_INT 22
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 2
2869: PUSH
2870: LD_INT 21
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 21
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 21
2892: PUSH
2893: LD_INT 3
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 59
2902: PUSH
2903: EMPTY
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 91
2915: PUSH
2916: LD_VAR 0 2
2920: PUSH
2921: LD_INT 25
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: PPUSH
2934: CALL_OW 69
2938: NOT
2939: PUSH
2940: LD_VAR 0 2
2944: PPUSH
2945: LD_EXP 1
2949: PPUSH
2950: CALL_OW 296
2954: PUSH
2955: LD_INT 15
2957: LESS
2958: AND
2959: IFFALSE 2979
// begin tmp = i ;
2961: LD_ADDR_VAR 0 4
2965: PUSH
2966: LD_VAR 0 2
2970: ST_TO_ADDR
// j = 1 ;
2971: LD_ADDR_VAR 0 3
2975: PUSH
2976: LD_INT 1
2978: ST_TO_ADDR
// end ; end ;
2979: GO 2854
2981: POP
2982: POP
// until j = 1 ;
2983: LD_VAR 0 3
2987: PUSH
2988: LD_INT 1
2990: EQUAL
2991: IFFALSE 2751
// blockSpawn = 1 ;
2993: LD_ADDR_EXP 29
2997: PUSH
2998: LD_INT 1
3000: ST_TO_ADDR
// uc_side = 4 ;
3001: LD_ADDR_OWVAR 20
3005: PUSH
3006: LD_INT 4
3008: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3009: LD_ADDR_EXP 15
3013: PUSH
3014: LD_STRING Joan
3016: PPUSH
3017: LD_INT 0
3019: PPUSH
3020: CALL 5663 0 2
3024: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3025: LD_EXP 15
3029: PPUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: CALL_OW 250
3039: PPUSH
3040: LD_VAR 0 4
3044: PPUSH
3045: CALL_OW 251
3049: PPUSH
3050: LD_INT 5
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3060: LD_EXP 15
3064: PPUSH
3065: LD_INT 250
3067: PPUSH
3068: CALL_OW 234
// InGameOn ;
3072: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3076: LD_EXP 15
3080: PPUSH
3081: CALL_OW 87
// wait ( 0 0$2 ) ;
3085: LD_INT 70
3087: PPUSH
3088: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3101: LD_VAR 0 4
3105: PPUSH
3106: CALL_OW 122
// wait ( 0 0$1 ) ;
3110: LD_INT 35
3112: PPUSH
3113: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3117: LD_VAR 0 4
3121: PPUSH
3122: LD_EXP 15
3126: PPUSH
3127: CALL_OW 112
// wait ( 0 0$2 ) ;
3131: LD_INT 70
3133: PPUSH
3134: CALL_OW 67
// DialogueOn ;
3138: CALL_OW 6
// if tmp = JMM then
3142: LD_VAR 0 4
3146: PUSH
3147: LD_EXP 1
3151: EQUAL
3152: IFFALSE 3301
// begin ComTurnUnit ( JMM , Joan ) ;
3154: LD_EXP 1
3158: PPUSH
3159: LD_EXP 15
3163: PPUSH
3164: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3168: LD_EXP 1
3172: PPUSH
3173: LD_STRING D5b-JMM-1
3175: PPUSH
3176: CALL_OW 88
// DialogueOff ;
3180: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3184: LD_EXP 15
3188: PPUSH
3189: LD_INT 500
3191: PPUSH
3192: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3196: LD_EXP 15
3200: PPUSH
3201: LD_EXP 1
3205: PPUSH
3206: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3210: LD_EXP 1
3214: PPUSH
3215: LD_EXP 15
3219: PPUSH
3220: CALL_OW 119
// wait ( 0 0$1 ) ;
3224: LD_INT 35
3226: PPUSH
3227: CALL_OW 67
// DialogueOn ;
3231: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3235: LD_EXP 15
3239: PPUSH
3240: LD_STRING D5b-Joan-1
3242: PPUSH
3243: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3247: LD_EXP 1
3251: PPUSH
3252: LD_STRING D5b-JMM-2
3254: PPUSH
3255: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3259: LD_EXP 15
3263: PPUSH
3264: LD_STRING D5b-Joan-2
3266: PPUSH
3267: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3271: LD_EXP 1
3275: PPUSH
3276: LD_STRING D5b-JMM-3
3278: PPUSH
3279: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3283: LD_EXP 15
3287: PPUSH
3288: LD_STRING D5b-Joan-3
3290: PPUSH
3291: CALL_OW 88
// DialogueOff ;
3295: CALL_OW 7
// end else
3299: GO 3636
// begin ComTurnUnit ( tmp , Joan ) ;
3301: LD_VAR 0 4
3305: PPUSH
3306: LD_EXP 15
3310: PPUSH
3311: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3315: LD_VAR 0 4
3319: PPUSH
3320: LD_STRING D5a-Sol1-1
3322: PPUSH
3323: CALL_OW 88
// DialogueOff ;
3327: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3331: LD_EXP 15
3335: PPUSH
3336: LD_INT 500
3338: PPUSH
3339: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3343: LD_EXP 15
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3357: LD_VAR 0 4
3361: PPUSH
3362: LD_EXP 15
3366: PPUSH
3367: CALL_OW 119
// wait ( 0 0$1 ) ;
3371: LD_INT 35
3373: PPUSH
3374: CALL_OW 67
// DialogueOn ;
3378: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3382: LD_EXP 15
3386: PPUSH
3387: LD_STRING D5a-Joan-1
3389: PPUSH
3390: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3394: LD_VAR 0 4
3398: PPUSH
3399: LD_STRING D5a-Sol1-2
3401: PPUSH
3402: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3406: LD_EXP 15
3410: PPUSH
3411: LD_STRING D5a-Joan-2
3413: PPUSH
3414: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_STRING D5a-Sol1-3
3425: PPUSH
3426: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3430: LD_EXP 15
3434: PPUSH
3435: LD_STRING D5a-Joan-3
3437: PPUSH
3438: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3442: LD_VAR 0 4
3446: PPUSH
3447: LD_STRING D5a-Sol1-4
3449: PPUSH
3450: CALL_OW 88
// DialogueOff ;
3454: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3467: LD_EXP 1
3471: PPUSH
3472: CALL_OW 122
// wait ( 0 0$1 ) ;
3476: LD_INT 35
3478: PPUSH
3479: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3483: LD_INT 35
3485: PPUSH
3486: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3490: LD_EXP 15
3494: PUSH
3495: LD_VAR 0 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PPUSH
3504: LD_EXP 1
3508: PPUSH
3509: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3513: LD_EXP 15
3517: PPUSH
3518: LD_EXP 1
3522: PPUSH
3523: CALL_OW 296
3527: PUSH
3528: LD_INT 5
3530: LESS
3531: IFFALSE 3483
// ComTurnUnit ( Joan , JMM ) ;
3533: LD_EXP 15
3537: PPUSH
3538: LD_EXP 1
3542: PPUSH
3543: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3547: LD_EXP 1
3551: PPUSH
3552: LD_EXP 15
3556: PPUSH
3557: CALL_OW 119
// wait ( 0 0$1 ) ;
3561: LD_INT 35
3563: PPUSH
3564: CALL_OW 67
// DialogueOn ;
3568: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D5a-Joan-4
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D5a-JMM-4
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D5a-Joan-5
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D5a-JMM-5
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D5a-Joan-6
3627: PPUSH
3628: CALL_OW 88
// DialogueOff ;
3632: CALL_OW 7
// end ; DialogueOn ;
3636: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3640: LD_EXP 1
3644: PPUSH
3645: LD_STRING D6-JMM-1
3647: PPUSH
3648: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_STRING D6-Joan-1
3659: PPUSH
3660: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3664: LD_EXP 1
3668: PPUSH
3669: LD_STRING D6-JMM-2
3671: PPUSH
3672: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3676: LD_EXP 15
3680: PPUSH
3681: LD_STRING D6-Joan-2
3683: PPUSH
3684: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3688: LD_EXP 1
3692: PPUSH
3693: LD_STRING D6-JMM-3
3695: PPUSH
3696: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3700: LD_EXP 15
3704: PPUSH
3705: LD_STRING D6-Joan-3
3707: PPUSH
3708: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3712: LD_EXP 1
3716: PPUSH
3717: LD_STRING D6-JMM-4
3719: PPUSH
3720: CALL_OW 88
// DialogueOff ;
3724: CALL_OW 7
// InGameOff ;
3728: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3732: LD_EXP 15
3736: PPUSH
3737: LD_INT 1
3739: PPUSH
3740: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3744: LD_STRING MJ
3746: PPUSH
3747: CALL_OW 337
// JoanStatus = 1 ;
3751: LD_ADDR_EXP 16
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// blockSpawn = 0 ;
3759: LD_ADDR_EXP 29
3763: PUSH
3764: LD_INT 0
3766: ST_TO_ADDR
// end ;
3767: LD_VAR 0 1
3771: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3772: LD_INT 0
3774: PPUSH
3775: PPUSH
// repeat wait ( 0 0$7 ) ;
3776: LD_INT 245
3778: PPUSH
3779: CALL_OW 67
// until blockSpawn = 0 ;
3783: LD_EXP 29
3787: PUSH
3788: LD_INT 0
3790: EQUAL
3791: IFFALSE 3776
// uc_side = 1 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// uc_nation = 1 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 1
3808: ST_TO_ADDR
// InitHc ;
3809: CALL_OW 19
// if number = 1 then
3813: LD_VAR 0 1
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: IFFALSE 3997
// begin hc_class := 3 ;
3823: LD_ADDR_OWVAR 28
3827: PUSH
3828: LD_INT 3
3830: ST_TO_ADDR
// hc_sex := sex_male ;
3831: LD_ADDR_OWVAR 27
3835: PUSH
3836: LD_INT 1
3838: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3839: LD_ADDR_OWVAR 33
3843: PUSH
3844: LD_STRING SecondCharsGal
3846: ST_TO_ADDR
// hc_face_number := 55 ;
3847: LD_ADDR_OWVAR 34
3851: PUSH
3852: LD_INT 55
3854: ST_TO_ADDR
// hc_name := George McCarthy ;
3855: LD_ADDR_OWVAR 26
3859: PUSH
3860: LD_STRING George McCarthy
3862: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3863: LD_ADDR_OWVAR 29
3867: PUSH
3868: LD_INT 11
3870: PUSH
3871: LD_INT 10
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3878: LD_ADDR_OWVAR 30
3882: PUSH
3883: LD_INT 0
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3901: LD_ADDR_OWVAR 31
3905: PUSH
3906: LD_INT 1
3908: PUSH
3909: LD_INT 2
3911: PUSH
3912: LD_INT 3
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: ST_TO_ADDR
// un = CreateHuman ;
3924: LD_ADDR_VAR 0 3
3928: PUSH
3929: CALL_OW 44
3933: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
3934: LD_VAR 0 3
3938: PPUSH
3939: LD_INT 23
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3949: LD_VAR 0 3
3953: PPUSH
3954: CALL_OW 87
// wait ( 0 0$1 ) ;
3958: LD_INT 35
3960: PPUSH
3961: CALL_OW 67
// DialogueOn ;
3965: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3969: LD_VAR 0 3
3973: PPUSH
3974: LD_STRING D11d-Sol4-1
3976: PPUSH
3977: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3981: LD_EXP 1
3985: PPUSH
3986: LD_STRING D11d-JMM-1
3988: PPUSH
3989: CALL_OW 88
// DialogueOff ;
3993: CALL_OW 7
// end ; if number = 2 then
3997: LD_VAR 0 1
4001: PUSH
4002: LD_INT 2
4004: EQUAL
4005: IFFALSE 4181
// begin hc_class := 1 ;
4007: LD_ADDR_OWVAR 28
4011: PUSH
4012: LD_INT 1
4014: ST_TO_ADDR
// hc_sex := sex_male ;
4015: LD_ADDR_OWVAR 27
4019: PUSH
4020: LD_INT 1
4022: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4023: LD_ADDR_OWVAR 33
4027: PUSH
4028: LD_STRING AmGalRemake
4030: ST_TO_ADDR
// hc_face_number := 7 ;
4031: LD_ADDR_OWVAR 34
4035: PUSH
4036: LD_INT 7
4038: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4039: LD_ADDR_OWVAR 26
4043: PUSH
4044: LD_STRING Bobby Jordan
4046: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4047: LD_ADDR_OWVAR 29
4051: PUSH
4052: LD_INT 9
4054: PUSH
4055: LD_INT 11
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4062: LD_ADDR_OWVAR 30
4066: PUSH
4067: LD_INT 1
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 1
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4085: LD_ADDR_OWVAR 31
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: LD_INT 1
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: ST_TO_ADDR
// un = CreateHuman ;
4108: LD_ADDR_VAR 0 3
4112: PUSH
4113: CALL_OW 44
4117: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4118: LD_VAR 0 3
4122: PPUSH
4123: LD_INT 24
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: CALL_OW 49
// wait ( 0 0$1 ) ;
4133: LD_INT 35
4135: PPUSH
4136: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4140: LD_VAR 0 3
4144: PPUSH
4145: CALL_OW 87
// DialogueOn ;
4149: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4153: LD_VAR 0 3
4157: PPUSH
4158: LD_STRING D11b-Sol3-1
4160: PPUSH
4161: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4165: LD_EXP 1
4169: PPUSH
4170: LD_STRING D11b-JMM-1
4172: PPUSH
4173: CALL_OW 88
// DialogueOff ;
4177: CALL_OW 7
// end ; if number = 3 then
4181: LD_VAR 0 1
4185: PUSH
4186: LD_INT 3
4188: EQUAL
4189: IFFALSE 4353
// begin hc_class := 1 ;
4191: LD_ADDR_OWVAR 28
4195: PUSH
4196: LD_INT 1
4198: ST_TO_ADDR
// hc_sex := sex_male ;
4199: LD_ADDR_OWVAR 27
4203: PUSH
4204: LD_INT 1
4206: ST_TO_ADDR
// hc_gallery := DJ ;
4207: LD_ADDR_OWVAR 33
4211: PUSH
4212: LD_STRING DJ
4214: ST_TO_ADDR
// hc_face_number := 1 ;
4215: LD_ADDR_OWVAR 34
4219: PUSH
4220: LD_INT 1
4222: ST_TO_ADDR
// hc_name := Darius Dajay ;
4223: LD_ADDR_OWVAR 26
4227: PUSH
4228: LD_STRING Darius Dajay
4230: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4231: LD_ADDR_OWVAR 29
4235: PUSH
4236: LD_INT 11
4238: PUSH
4239: LD_INT 11
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4246: LD_ADDR_OWVAR 30
4250: PUSH
4251: LD_INT 2
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4269: LD_ADDR_OWVAR 31
4273: PUSH
4274: LD_INT 4
4276: PUSH
4277: LD_INT 0
4279: PUSH
4280: LD_INT 1
4282: PUSH
4283: LD_INT 0
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: ST_TO_ADDR
// un = CreateHuman ;
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: CALL_OW 44
4301: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_INT 25
4309: PPUSH
4310: LD_INT 1
4312: PPUSH
4313: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4317: LD_VAR 0 3
4321: PPUSH
4322: CALL_OW 87
// wait ( 0 0$1 ) ;
4326: LD_INT 35
4328: PPUSH
4329: CALL_OW 67
// DialogueOn ;
4333: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4337: LD_VAR 0 3
4341: PPUSH
4342: LD_STRING D11f-Sol5-1
4344: PPUSH
4345: CALL_OW 88
// DialogueOff ;
4349: CALL_OW 7
// end ; if number = 4 then
4353: LD_VAR 0 1
4357: PUSH
4358: LD_INT 4
4360: EQUAL
4361: IFFALSE 4525
// begin hc_class := 3 ;
4363: LD_ADDR_OWVAR 28
4367: PUSH
4368: LD_INT 3
4370: ST_TO_ADDR
// hc_sex := sex_female ;
4371: LD_ADDR_OWVAR 27
4375: PUSH
4376: LD_INT 2
4378: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING SecondCharsGal
4386: ST_TO_ADDR
// hc_face_number := 46 ;
4387: LD_ADDR_OWVAR 34
4391: PUSH
4392: LD_INT 46
4394: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4395: LD_ADDR_OWVAR 26
4399: PUSH
4400: LD_STRING Sylvia Creak
4402: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4403: LD_ADDR_OWVAR 29
4407: PUSH
4408: LD_INT 10
4410: PUSH
4411: LD_INT 9
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4418: LD_ADDR_OWVAR 30
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4441: LD_ADDR_OWVAR 31
4445: PUSH
4446: LD_INT 1
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 1
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: ST_TO_ADDR
// un = CreateHuman ;
4464: LD_ADDR_VAR 0 3
4468: PUSH
4469: CALL_OW 44
4473: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4474: LD_VAR 0 3
4478: PPUSH
4479: LD_INT 26
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4489: LD_VAR 0 3
4493: PPUSH
4494: CALL_OW 87
// wait ( 0 0$1 ) ;
4498: LD_INT 35
4500: PPUSH
4501: CALL_OW 67
// DialogueOn ;
4505: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4509: LD_VAR 0 3
4513: PPUSH
4514: LD_STRING D11e-FSol4-1
4516: PPUSH
4517: CALL_OW 88
// DialogueOff ;
4521: CALL_OW 7
// end ; if number = 5 then
4525: LD_VAR 0 1
4529: PUSH
4530: LD_INT 5
4532: EQUAL
4533: IFFALSE 4709
// begin hc_class := 1 ;
4535: LD_ADDR_OWVAR 28
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// hc_sex := sex_female ;
4543: LD_ADDR_OWVAR 27
4547: PUSH
4548: LD_INT 2
4550: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4551: LD_ADDR_OWVAR 33
4555: PUSH
4556: LD_STRING SecondCharsGal
4558: ST_TO_ADDR
// hc_face_number := 37 ;
4559: LD_ADDR_OWVAR 34
4563: PUSH
4564: LD_INT 37
4566: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4567: LD_ADDR_OWVAR 26
4571: PUSH
4572: LD_STRING Margherite Simpson
4574: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4575: LD_ADDR_OWVAR 29
4579: PUSH
4580: LD_INT 11
4582: PUSH
4583: LD_INT 10
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4590: LD_ADDR_OWVAR 30
4594: PUSH
4595: LD_INT 1
4597: PUSH
4598: LD_INT 1
4600: PUSH
4601: LD_INT 0
4603: PUSH
4604: LD_INT 0
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4613: LD_ADDR_OWVAR 31
4617: PUSH
4618: LD_INT 1
4620: PUSH
4621: LD_INT 1
4623: PUSH
4624: LD_INT 1
4626: PUSH
4627: LD_INT 1
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: ST_TO_ADDR
// un = CreateHuman ;
4636: LD_ADDR_VAR 0 3
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4646: LD_VAR 0 3
4650: PPUSH
4651: LD_INT 27
4653: PPUSH
4654: LD_INT 1
4656: PPUSH
4657: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4661: LD_VAR 0 3
4665: PPUSH
4666: CALL_OW 87
// wait ( 0 0$1 ) ;
4670: LD_INT 35
4672: PPUSH
4673: CALL_OW 67
// DialogueOn ;
4677: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4681: LD_VAR 0 3
4685: PPUSH
4686: LD_STRING D11c-FSol3-1
4688: PPUSH
4689: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4693: LD_EXP 1
4697: PPUSH
4698: LD_STRING D11c-JMM-1
4700: PPUSH
4701: CALL_OW 88
// DialogueOff ;
4705: CALL_OW 7
// end ; if number = 6 then
4709: LD_VAR 0 1
4713: PUSH
4714: LD_INT 6
4716: EQUAL
4717: IFFALSE 4891
// begin hc_class := 1 ;
4719: LD_ADDR_OWVAR 28
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// hc_sex := sex_male ;
4727: LD_ADDR_OWVAR 27
4731: PUSH
4732: LD_INT 1
4734: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING AmGalRemake
4742: ST_TO_ADDR
// hc_face_number := 1 ;
4743: LD_ADDR_OWVAR 34
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// hc_name := Charles Brown ;
4751: LD_ADDR_OWVAR 26
4755: PUSH
4756: LD_STRING Charles Brown
4758: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4759: LD_ADDR_OWVAR 29
4763: PUSH
4764: LD_INT 12
4766: PUSH
4767: LD_INT 11
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4774: LD_ADDR_OWVAR 30
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: LD_INT 0
4784: PUSH
4785: LD_INT 0
4787: PUSH
4788: LD_INT 0
4790: PUSH
4791: EMPTY
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4797: LD_ADDR_OWVAR 31
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: LD_INT 0
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: ST_TO_ADDR
// un = CreateHuman ;
4820: LD_ADDR_VAR 0 3
4824: PUSH
4825: CALL_OW 44
4829: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_INT 28
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4845: LD_VAR 0 3
4849: PPUSH
4850: CALL_OW 87
// wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// DialogueOn ;
4861: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4865: LD_VAR 0 3
4869: PPUSH
4870: LD_STRING D4-Sol1-5
4872: PPUSH
4873: CALL_OW 88
// DialogueOff ;
4877: CALL_OW 7
// tempCharles = un ;
4881: LD_ADDR_EXP 13
4885: PUSH
4886: LD_VAR 0 3
4890: ST_TO_ADDR
// end ; if number = 7 then
4891: LD_VAR 0 1
4895: PUSH
4896: LD_INT 7
4898: EQUAL
4899: IFFALSE 5149
// begin hc_class := 1 ;
4901: LD_ADDR_OWVAR 28
4905: PUSH
4906: LD_INT 1
4908: ST_TO_ADDR
// hc_sex := sex_female ;
4909: LD_ADDR_OWVAR 27
4913: PUSH
4914: LD_INT 2
4916: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4917: LD_ADDR_OWVAR 33
4921: PUSH
4922: LD_STRING AmGalRemake
4924: ST_TO_ADDR
// hc_face_number := 2 ;
4925: LD_ADDR_OWVAR 34
4929: PUSH
4930: LD_INT 2
4932: ST_TO_ADDR
// hc_name := Johanna Holland ;
4933: LD_ADDR_OWVAR 26
4937: PUSH
4938: LD_STRING Johanna Holland
4940: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4941: LD_ADDR_OWVAR 29
4945: PUSH
4946: LD_INT 10
4948: PUSH
4949: LD_INT 10
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4956: LD_ADDR_OWVAR 30
4960: PUSH
4961: LD_INT 1
4963: PUSH
4964: LD_INT 0
4966: PUSH
4967: LD_INT 0
4969: PUSH
4970: LD_INT 1
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4979: LD_ADDR_OWVAR 31
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 0
4989: PUSH
4990: LD_INT 0
4992: PUSH
4993: LD_INT 1
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// un = CreateHuman ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: CALL_OW 44
5011: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5012: LD_VAR 0 3
5016: PPUSH
5017: LD_INT 29
5019: PPUSH
5020: LD_INT 1
5022: PPUSH
5023: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: CALL_OW 87
// wait ( 0 0$1 ) ;
5036: LD_INT 35
5038: PPUSH
5039: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5043: LD_INT 30
5045: PPUSH
5046: LD_INT 22
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PPUSH
5056: CALL_OW 70
5060: IFFALSE 5149
// begin DialogueOn ;
5062: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5066: LD_VAR 0 3
5070: PPUSH
5071: CALL_OW 250
5075: PPUSH
5076: LD_VAR 0 3
5080: PPUSH
5081: CALL_OW 251
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_INT 15
5091: NEG
5092: PPUSH
5093: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5097: LD_VAR 0 3
5101: PPUSH
5102: CALL_OW 250
5106: PPUSH
5107: LD_VAR 0 3
5111: PPUSH
5112: CALL_OW 251
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5124: LD_VAR 0 3
5128: PPUSH
5129: LD_STRING D11a-FSol2-1
5131: PPUSH
5132: CALL_OW 88
// ComCrawl ( un ) ;
5136: LD_VAR 0 3
5140: PPUSH
5141: CALL_OW 137
// DialogueOff ;
5145: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5149: LD_ADDR_EXP 45
5153: PUSH
5154: LD_EXP 45
5158: PUSH
5159: LD_VAR 0 3
5163: UNION
5164: ST_TO_ADDR
// arrivals := arrivals union un ;
5165: LD_ADDR_EXP 46
5169: PUSH
5170: LD_EXP 46
5174: PUSH
5175: LD_VAR 0 3
5179: UNION
5180: ST_TO_ADDR
// end ;
5181: LD_VAR 0 2
5185: RET
// every 0 0$1 do var i ;
5186: GO 5188
5188: DISABLE
5189: LD_INT 0
5191: PPUSH
// begin enable ;
5192: ENABLE
// if not ignoreTarget then
5193: LD_EXP 45
5197: NOT
5198: IFFALSE 5202
// exit ;
5200: GO 5283
// for i in ignoreTarget do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_EXP 45
5211: PUSH
5212: FOR_IN
5213: IFFALSE 5281
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5215: LD_INT 22
5217: PUSH
5218: LD_INT 1
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 91
5227: PUSH
5228: LD_VAR 0 1
5232: PUSH
5233: LD_INT 10
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL_OW 69
5249: PUSH
5250: LD_EXP 45
5254: DIFF
5255: PUSH
5256: LD_INT 1
5258: GREATER
5259: IFFALSE 5279
// begin ignoreTarget := ignoreTarget diff i ;
5261: LD_ADDR_EXP 45
5265: PUSH
5266: LD_EXP 45
5270: PUSH
5271: LD_VAR 0 1
5275: DIFF
5276: ST_TO_ADDR
// break ;
5277: GO 5281
// end ;
5279: GO 5212
5281: POP
5282: POP
// end ; end_of_file
5283: PPOPN 1
5285: END
// export function PrepareRussian ; var i ; begin
5286: LD_INT 0
5288: PPUSH
5289: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5290: LD_INT 3
5292: PPUSH
5293: LD_INT 3
5295: PPUSH
5296: LD_INT 2
5298: PPUSH
5299: LD_EXP 34
5303: PPUSH
5304: LD_EXP 35
5308: PPUSH
5309: CALL_OW 12
5313: PPUSH
5314: LD_INT 2
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: CALL 5933 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5324: LD_INT 3
5326: PPUSH
5327: LD_INT 3
5329: PPUSH
5330: LD_INT 8
5332: PPUSH
5333: LD_EXP 34
5337: PPUSH
5338: LD_EXP 35
5342: PPUSH
5343: CALL_OW 12
5347: PPUSH
5348: LD_INT 1
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: CALL 5933 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5358: LD_INT 3
5360: PPUSH
5361: LD_INT 3
5363: PPUSH
5364: LD_INT 67
5366: PPUSH
5367: LD_EXP 34
5371: PPUSH
5372: LD_EXP 35
5376: PPUSH
5377: CALL_OW 12
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_INT 2
5387: PPUSH
5388: CALL 5933 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5392: LD_INT 3
5394: PPUSH
5395: LD_INT 3
5397: PPUSH
5398: LD_INT 21
5400: PPUSH
5401: LD_EXP 34
5405: PPUSH
5406: LD_EXP 35
5410: PPUSH
5411: CALL_OW 12
5415: PPUSH
5416: LD_INT 3
5418: PPUSH
5419: LD_INT 6
5421: PPUSH
5422: CALL 5933 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5426: LD_INT 3
5428: PPUSH
5429: LD_INT 3
5431: PPUSH
5432: LD_INT 17
5434: PPUSH
5435: LD_EXP 34
5439: PPUSH
5440: LD_EXP 35
5444: PPUSH
5445: CALL_OW 12
5449: PPUSH
5450: LD_INT 3
5452: PPUSH
5453: LD_INT 6
5455: PPUSH
5456: CALL 5933 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5460: LD_INT 3
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: LD_INT 32
5468: PPUSH
5469: LD_EXP 34
5473: PPUSH
5474: LD_EXP 35
5478: PPUSH
5479: CALL_OW 12
5483: PPUSH
5484: LD_INT 4
5486: PPUSH
5487: LD_INT 2
5489: PPUSH
5490: CALL 5933 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_INT 22
5501: PUSH
5502: LD_INT 3
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 21
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 30
5521: PUSH
5522: LD_INT 32
5524: PUSH
5525: EMPTY
5526: LIST
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5580
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5542: LD_INT 3
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: LD_VAR 0 2
5552: PPUSH
5553: LD_EXP 34
5557: PPUSH
5558: LD_EXP 35
5562: PPUSH
5563: CALL_OW 12
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: CALL 5933 0 6
5578: GO 5539
5580: POP
5581: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5582: LD_ADDR_VAR 0 2
5586: PUSH
5587: LD_INT 22
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 21
5599: PUSH
5600: LD_INT 3
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 30
5609: PUSH
5610: LD_INT 31
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: PPUSH
5622: CALL_OW 69
5626: PUSH
5627: FOR_IN
5628: IFFALSE 5656
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5630: LD_EXP 34
5634: PPUSH
5635: LD_EXP 35
5639: PPUSH
5640: CALL_OW 12
5644: PPUSH
5645: LD_VAR 0 2
5649: PPUSH
5650: CALL 6043 0 2
5654: GO 5627
5656: POP
5657: POP
// end ; end_of_file
5658: LD_VAR 0 1
5662: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
// if exist_mode then
5667: LD_VAR 0 2
5671: IFFALSE 5696
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5673: LD_ADDR_VAR 0 4
5677: PUSH
5678: LD_EXP 44
5682: PUSH
5683: LD_VAR 0 1
5687: STR
5688: PPUSH
5689: CALL_OW 34
5693: ST_TO_ADDR
// end else
5694: GO 5711
// begin unit := NewCharacter ( ident ) ;
5696: LD_ADDR_VAR 0 4
5700: PUSH
5701: LD_VAR 0 1
5705: PPUSH
5706: CALL_OW 25
5710: ST_TO_ADDR
// end ; result := unit ;
5711: LD_ADDR_VAR 0 3
5715: PUSH
5716: LD_VAR 0 4
5720: ST_TO_ADDR
// end ;
5721: LD_VAR 0 3
5725: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5726: LD_INT 0
5728: PPUSH
5729: PPUSH
5730: PPUSH
// rnd = rand ( 1 , characters ) ;
5731: LD_ADDR_VAR 0 6
5735: PUSH
5736: LD_INT 1
5738: PPUSH
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 12
5748: ST_TO_ADDR
// for i = 1 to characters do
5749: LD_ADDR_VAR 0 5
5753: PUSH
5754: DOUBLE
5755: LD_INT 1
5757: DEC
5758: ST_TO_ADDR
5759: LD_VAR 0 1
5763: PUSH
5764: FOR_TO
5765: IFFALSE 5875
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5767: LD_VAR 0 5
5771: PUSH
5772: LD_VAR 0 6
5776: EQUAL
5777: PUSH
5778: LD_VAR 0 1
5782: PUSH
5783: LD_VAR 0 5
5787: ARRAY
5788: PPUSH
5789: CALL_OW 258
5793: PUSH
5794: LD_INT 1
5796: EQUAL
5797: AND
5798: IFFALSE 5820
// Say ( characters [ i ] , dialogMID ) ;
5800: LD_VAR 0 1
5804: PUSH
5805: LD_VAR 0 5
5809: ARRAY
5810: PPUSH
5811: LD_VAR 0 2
5815: PPUSH
5816: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5820: LD_VAR 0 5
5824: PUSH
5825: LD_VAR 0 6
5829: EQUAL
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: LD_VAR 0 5
5840: ARRAY
5841: PPUSH
5842: CALL_OW 258
5846: PUSH
5847: LD_INT 2
5849: EQUAL
5850: AND
5851: IFFALSE 5873
// Say ( characters [ i ] , dialogFID ) ;
5853: LD_VAR 0 1
5857: PUSH
5858: LD_VAR 0 5
5862: ARRAY
5863: PPUSH
5864: LD_VAR 0 3
5868: PPUSH
5869: CALL_OW 88
// end ;
5873: GO 5764
5875: POP
5876: POP
// end ;
5877: LD_VAR 0 4
5881: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5882: LD_INT 0
5884: PPUSH
5885: PPUSH
// for i in charactersList do
5886: LD_ADDR_VAR 0 4
5890: PUSH
5891: LD_VAR 0 1
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5926
// begin if IsOk ( i ) then
5899: LD_VAR 0 4
5903: PPUSH
5904: CALL_OW 302
5908: IFFALSE 5924
// SaveCharacters ( i , ident ) ;
5910: LD_VAR 0 4
5914: PPUSH
5915: LD_VAR 0 2
5919: PPUSH
5920: CALL_OW 38
// end ;
5924: GO 5896
5926: POP
5927: POP
// end ;
5928: LD_VAR 0 3
5932: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
5938: PPUSH
// for i = 1 to count do
5939: LD_ADDR_VAR 0 8
5943: PUSH
5944: DOUBLE
5945: LD_INT 1
5947: DEC
5948: ST_TO_ADDR
5949: LD_VAR 0 6
5953: PUSH
5954: FOR_TO
5955: IFFALSE 6036
// begin uc_side = side ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_VAR 0 1
5966: ST_TO_ADDR
// uc_nation = nation ;
5967: LD_ADDR_OWVAR 21
5971: PUSH
5972: LD_VAR 0 2
5976: ST_TO_ADDR
// hc_gallery =  ;
5977: LD_ADDR_OWVAR 33
5981: PUSH
5982: LD_STRING 
5984: ST_TO_ADDR
// hc_name =  ;
5985: LD_ADDR_OWVAR 26
5989: PUSH
5990: LD_STRING 
5992: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5993: LD_INT 0
5995: PPUSH
5996: LD_VAR 0 5
6000: PPUSH
6001: LD_VAR 0 4
6005: PPUSH
6006: CALL_OW 380
// un = CreateHuman ;
6010: LD_ADDR_VAR 0 10
6014: PUSH
6015: CALL_OW 44
6019: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6020: LD_VAR 0 10
6024: PPUSH
6025: LD_VAR 0 3
6029: PPUSH
6030: CALL_OW 52
// end ;
6034: GO 5954
6036: POP
6037: POP
// end ;
6038: LD_VAR 0 7
6042: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6043: LD_INT 0
6045: PPUSH
6046: PPUSH
6047: PPUSH
// uc_side := GetSide ( b ) ;
6048: LD_ADDR_OWVAR 20
6052: PUSH
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 255
6062: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6063: LD_ADDR_OWVAR 21
6067: PUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL_OW 248
6077: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6078: LD_INT 0
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_VAR 0 1
6088: PPUSH
6089: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6093: LD_ADDR_VAR 0 5
6097: PUSH
6098: LD_VAR 0 2
6102: PPUSH
6103: CALL_OW 254
6107: PUSH
6108: LD_INT 3
6110: MINUS
6111: ST_TO_ADDR
// if dir < 0 then
6112: LD_VAR 0 5
6116: PUSH
6117: LD_INT 0
6119: LESS
6120: IFFALSE 6136
// dir := 6 + dir ;
6122: LD_ADDR_VAR 0 5
6126: PUSH
6127: LD_INT 6
6129: PUSH
6130: LD_VAR 0 5
6134: PLUS
6135: ST_TO_ADDR
// un := CreateHuman ;
6136: LD_ADDR_VAR 0 4
6140: PUSH
6141: CALL_OW 44
6145: ST_TO_ADDR
// SetDir ( un , dir ) ;
6146: LD_VAR 0 4
6150: PPUSH
6151: LD_VAR 0 5
6155: PPUSH
6156: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6160: LD_VAR 0 4
6164: PPUSH
6165: LD_VAR 0 2
6169: PPUSH
6170: CALL_OW 52
// end ;
6174: LD_VAR 0 3
6178: RET
// export function PrepareDifficulty ; begin
6179: LD_INT 0
6181: PPUSH
// if Difficulty = 1 then
6182: LD_OWVAR 67
6186: PUSH
6187: LD_INT 1
6189: EQUAL
6190: IFFALSE 6208
// begin RuSolMinLevel = 2 ;
6192: LD_ADDR_EXP 34
6196: PUSH
6197: LD_INT 2
6199: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6200: LD_ADDR_EXP 35
6204: PUSH
6205: LD_INT 4
6207: ST_TO_ADDR
// end ; if Difficulty = 2 then
6208: LD_OWVAR 67
6212: PUSH
6213: LD_INT 2
6215: EQUAL
6216: IFFALSE 6234
// begin RuSolMinLevel = 3 ;
6218: LD_ADDR_EXP 34
6222: PUSH
6223: LD_INT 3
6225: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6226: LD_ADDR_EXP 35
6230: PUSH
6231: LD_INT 5
6233: ST_TO_ADDR
// end ; if Difficulty = 3 then
6234: LD_OWVAR 67
6238: PUSH
6239: LD_INT 3
6241: EQUAL
6242: IFFALSE 6260
// begin RuSolMinLevel = 3 ;
6244: LD_ADDR_EXP 34
6248: PUSH
6249: LD_INT 3
6251: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6252: LD_ADDR_EXP 35
6256: PUSH
6257: LD_INT 6
6259: ST_TO_ADDR
// end ; end ;
6260: LD_VAR 0 1
6264: RET
// export function ShowQuery1 ; begin
6265: LD_INT 0
6267: PPUSH
// case query ( QKill ) of 1 :
6268: LD_STRING QKill
6270: PPUSH
6271: CALL_OW 97
6275: PUSH
6276: LD_INT 1
6278: DOUBLE
6279: EQUAL
6280: IFTRUE 6284
6282: GO 6295
6284: POP
// begin result = 1 ;
6285: LD_ADDR_VAR 0 1
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// end ; 2 :
6293: GO 6334
6295: LD_INT 2
6297: DOUBLE
6298: EQUAL
6299: IFTRUE 6303
6301: GO 6314
6303: POP
// begin result = 2 ;
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_INT 2
6311: ST_TO_ADDR
// end ; 3 :
6312: GO 6334
6314: LD_INT 3
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6333
6322: POP
// begin result = 3 ;
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_INT 3
6330: ST_TO_ADDR
// end ; end ;
6331: GO 6334
6333: POP
// end ;
6334: LD_VAR 0 1
6338: RET
// export function ShowQuery2 ; begin
6339: LD_INT 0
6341: PPUSH
// case query ( QKill2 ) of 1 :
6342: LD_STRING QKill2
6344: PPUSH
6345: CALL_OW 97
6349: PUSH
6350: LD_INT 1
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6369
6358: POP
// begin result = 1 ;
6359: LD_ADDR_VAR 0 1
6363: PUSH
6364: LD_INT 1
6366: ST_TO_ADDR
// end ; 2 :
6367: GO 6389
6369: LD_INT 2
6371: DOUBLE
6372: EQUAL
6373: IFTRUE 6377
6375: GO 6388
6377: POP
// begin result = 2 ;
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: LD_INT 2
6385: ST_TO_ADDR
// end ; end ;
6386: GO 6389
6388: POP
// end ;
6389: LD_VAR 0 1
6393: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6394: LD_INT 0
6396: PPUSH
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6401: LD_ADDR_VAR 0 8
6405: PUSH
6406: LD_INT 48
6408: PUSH
6409: LD_INT 49
6411: PUSH
6412: LD_INT 50
6414: PUSH
6415: LD_INT 20
6417: PUSH
6418: LD_INT 1
6420: PUSH
6421: LD_INT 51
6423: PUSH
6424: LD_INT 52
6426: PUSH
6427: LD_INT 69
6429: PUSH
6430: LD_INT 39
6432: PUSH
6433: LD_INT 34
6435: PUSH
6436: LD_INT 40
6438: PUSH
6439: LD_INT 53
6441: PUSH
6442: LD_INT 71
6444: PUSH
6445: LD_INT 57
6447: PUSH
6448: LD_INT 58
6450: PUSH
6451: LD_INT 44
6453: PUSH
6454: LD_INT 32
6456: PUSH
6457: LD_INT 27
6459: PUSH
6460: LD_INT 23
6462: PUSH
6463: LD_INT 33
6465: PUSH
6466: LD_INT 59
6468: PUSH
6469: LD_INT 54
6471: PUSH
6472: LD_INT 55
6474: PUSH
6475: LD_INT 56
6477: PUSH
6478: LD_INT 63
6480: PUSH
6481: LD_INT 64
6483: PUSH
6484: LD_INT 65
6486: PUSH
6487: LD_INT 30
6489: PUSH
6490: LD_INT 31
6492: PUSH
6493: LD_INT 21
6495: PUSH
6496: LD_INT 22
6498: PUSH
6499: LD_INT 25
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: DOUBLE
6542: LD_INT 1
6544: DEC
6545: ST_TO_ADDR
6546: LD_VAR 0 8
6550: PUSH
6551: FOR_TO
6552: IFFALSE 6628
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6554: LD_VAR 0 8
6558: PUSH
6559: LD_VAR 0 5
6563: ARRAY
6564: PPUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 321
6574: PUSH
6575: LD_INT 1
6577: EQUAL
6578: PUSH
6579: LD_VAR 0 8
6583: PUSH
6584: LD_VAR 0 5
6588: ARRAY
6589: PPUSH
6590: LD_VAR 0 3
6594: PPUSH
6595: CALL_OW 482
6599: PUSH
6600: LD_INT 1
6602: EQUAL
6603: AND
6604: IFFALSE 6626
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6606: LD_VAR 0 2
6610: PPUSH
6611: LD_VAR 0 8
6615: PUSH
6616: LD_VAR 0 5
6620: ARRAY
6621: PPUSH
6622: CALL_OW 184
6626: GO 6551
6628: POP
6629: POP
// end ;
6630: LD_VAR 0 4
6634: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6635: LD_INT 0
6637: PPUSH
6638: PPUSH
6639: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6640: LD_INT 22
6642: PUSH
6643: LD_VAR 0 1
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 21
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 69
6670: PUSH
6671: LD_VAR 0 3
6675: LESSEQUAL
6676: IFFALSE 6784
// begin for i = 1 to vehCount do
6678: LD_ADDR_VAR 0 9
6682: PUSH
6683: DOUBLE
6684: LD_INT 1
6686: DEC
6687: ST_TO_ADDR
6688: LD_VAR 0 3
6692: PUSH
6693: FOR_TO
6694: IFFALSE 6782
// begin weapon = weaponTab [ i ] ;
6696: LD_ADDR_VAR 0 10
6700: PUSH
6701: LD_VAR 0 4
6705: PUSH
6706: LD_VAR 0 9
6710: ARRAY
6711: ST_TO_ADDR
// if weapon = 46 then
6712: LD_VAR 0 10
6716: PUSH
6717: LD_INT 46
6719: EQUAL
6720: IFFALSE 6751
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6722: LD_VAR 0 2
6726: PPUSH
6727: LD_INT 24
6729: PPUSH
6730: LD_VAR 0 5
6734: PPUSH
6735: LD_VAR 0 6
6739: PPUSH
6740: LD_VAR 0 10
6744: PPUSH
6745: CALL_OW 185
// end else
6749: GO 6780
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6751: LD_VAR 0 2
6755: PPUSH
6756: LD_VAR 0 7
6760: PPUSH
6761: LD_VAR 0 5
6765: PPUSH
6766: LD_VAR 0 6
6770: PPUSH
6771: LD_VAR 0 10
6775: PPUSH
6776: CALL_OW 185
// end ; end ;
6780: GO 6693
6782: POP
6783: POP
// end ; end ;
6784: LD_VAR 0 8
6788: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6789: LD_INT 0
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6795: LD_ADDR_VAR 0 8
6799: PUSH
6800: LD_INT 22
6802: PUSH
6803: LD_VAR 0 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 21
6814: PUSH
6815: LD_INT 2
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 3
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: LD_INT 650
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: PPUSH
6844: CALL_OW 69
6848: ST_TO_ADDR
// if damageVehicles > 0 then
6849: LD_VAR 0 8
6853: PUSH
6854: LD_INT 0
6856: GREATER
6857: IFFALSE 6878
// ComMoveXY ( damageVehicles , repX , repY ) ;
6859: LD_VAR 0 8
6863: PPUSH
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_VAR 0 4
6873: PPUSH
6874: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6878: LD_VAR 0 8
6882: PPUSH
6883: LD_INT 95
6885: PUSH
6886: LD_VAR 0 2
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 58
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PPUSH
6912: CALL_OW 72
6916: PUSH
6917: LD_INT 0
6919: GREATER
6920: IFFALSE 6987
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6922: LD_ADDR_VAR 0 6
6926: PUSH
6927: LD_VAR 0 8
6931: PPUSH
6932: LD_INT 95
6934: PUSH
6935: LD_VAR 0 2
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: LD_INT 58
6949: PUSH
6950: EMPTY
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 72
6965: PUSH
6966: FOR_IN
6967: IFFALSE 6985
// ComExitVehicle ( UnitsInside ( i ) ) ;
6969: LD_VAR 0 6
6973: PPUSH
6974: CALL_OW 313
6978: PPUSH
6979: CALL_OW 121
6983: GO 6966
6985: POP
6986: POP
// end ;
6987: LD_VAR 0 5
6991: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6992: LD_INT 0
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
6999: PPUSH
7000: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_VAR 0 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 21
7020: PUSH
7021: LD_INT 2
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 24
7030: PUSH
7031: LD_INT 660
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 3
7040: PUSH
7041: LD_INT 58
7043: PUSH
7044: EMPTY
7045: LIST
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 34
7052: PUSH
7053: LD_INT 43
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 34
7062: PUSH
7063: LD_INT 44
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 34
7072: PUSH
7073: LD_INT 46
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7102: LD_INT 22
7104: PUSH
7105: LD_VAR 0 1
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 24
7126: PUSH
7127: LD_INT 1000
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 3
7136: PUSH
7137: LD_INT 58
7139: PUSH
7140: EMPTY
7141: LIST
7142: PUSH
7143: LD_INT 2
7145: PUSH
7146: LD_INT 34
7148: PUSH
7149: LD_INT 43
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 34
7158: PUSH
7159: LD_INT 44
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 34
7168: PUSH
7169: LD_INT 46
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: PUSH
7198: LD_INT 5
7200: PUSH
7201: LD_INT 6
7203: PUSH
7204: LD_INT 6
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: LD_OWVAR 67
7216: ARRAY
7217: EQUAL
7218: IFFALSE 7474
// if seeEnemy = 0 then
7220: LD_VAR 0 11
7224: PUSH
7225: LD_INT 0
7227: EQUAL
7228: IFFALSE 7474
// repeat wait ( 0 0$1 ) ;
7230: LD_INT 35
7232: PPUSH
7233: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7237: LD_ADDR_VAR 0 8
7241: PUSH
7242: LD_INT 22
7244: PUSH
7245: LD_VAR 0 1
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 21
7256: PUSH
7257: LD_INT 2
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 24
7266: PUSH
7267: LD_INT 660
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 3
7276: PUSH
7277: LD_INT 58
7279: PUSH
7280: EMPTY
7281: LIST
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 34
7288: PUSH
7289: LD_INT 43
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 34
7298: PUSH
7299: LD_INT 44
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 34
7308: PUSH
7309: LD_INT 46
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PPUSH
7333: CALL_OW 69
7337: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7338: LD_INT 22
7340: PUSH
7341: LD_VAR 0 1
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: LD_INT 95
7352: PUSH
7353: LD_VAR 0 2
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PPUSH
7366: CALL_OW 69
7370: NOT
7371: PUSH
7372: LD_VAR 0 11
7376: PUSH
7377: LD_INT 0
7379: EQUAL
7380: AND
7381: IFFALSE 7436
// for i := 1 to wayX do
7383: LD_ADDR_VAR 0 6
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_VAR 0 3
7397: PUSH
7398: FOR_TO
7399: IFFALSE 7434
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7401: LD_VAR 0 8
7405: PPUSH
7406: LD_VAR 0 3
7410: PUSH
7411: LD_VAR 0 6
7415: ARRAY
7416: PPUSH
7417: LD_VAR 0 4
7421: PUSH
7422: LD_VAR 0 6
7426: ARRAY
7427: PPUSH
7428: CALL_OW 114
7432: GO 7398
7434: POP
7435: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7436: LD_INT 22
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 95
7450: PUSH
7451: LD_VAR 0 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: PUSH
7469: LD_INT 0
7471: GREATER
7472: IFFALSE 7230
// seeEnemy = 1 ;
7474: LD_ADDR_VAR 0 11
7478: PUSH
7479: LD_INT 1
7481: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7482: LD_INT 35
7484: PPUSH
7485: CALL_OW 67
// for j in vehiclesOK do
7489: LD_ADDR_VAR 0 7
7493: PUSH
7494: LD_VAR 0 8
7498: PUSH
7499: FOR_IN
7500: IFFALSE 7713
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_INT 81
7509: PUSH
7510: LD_VAR 0 1
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 101
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: PUSH
7538: LD_EXP 45
7542: DIFF
7543: PPUSH
7544: LD_VAR 0 7
7548: PPUSH
7549: CALL_OW 74
7553: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: LD_INT 81
7561: PUSH
7562: LD_VAR 0 1
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 101
7573: PUSH
7574: LD_INT 1
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 2
7583: PUSH
7584: LD_INT 59
7586: PUSH
7587: EMPTY
7588: LIST
7589: PUSH
7590: LD_INT 21
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 21
7602: PUSH
7603: LD_INT 2
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: PPUSH
7624: CALL_OW 69
7628: PUSH
7629: LD_EXP 45
7633: DIFF
7634: PPUSH
7635: LD_VAR 0 7
7639: PPUSH
7640: CALL_OW 74
7644: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7645: LD_VAR 0 7
7649: PPUSH
7650: LD_VAR 0 9
7654: PPUSH
7655: CALL_OW 296
7659: PUSH
7660: LD_INT 8
7662: PLUS
7663: PUSH
7664: LD_VAR 0 7
7668: PPUSH
7669: LD_VAR 0 10
7673: PPUSH
7674: CALL_OW 296
7678: LESS
7679: IFFALSE 7697
// ComAttackUnit ( j , target1 ) else
7681: LD_VAR 0 7
7685: PPUSH
7686: LD_VAR 0 9
7690: PPUSH
7691: CALL_OW 115
7695: GO 7711
// ComAttackUnit ( j , target2 ) ;
7697: LD_VAR 0 7
7701: PPUSH
7702: LD_VAR 0 10
7706: PPUSH
7707: CALL_OW 115
// end ;
7711: GO 7499
7713: POP
7714: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7715: LD_INT 22
7717: PUSH
7718: LD_VAR 0 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 21
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 24
7739: PUSH
7740: LD_INT 1000
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 58
7752: PUSH
7753: EMPTY
7754: LIST
7755: PUSH
7756: LD_INT 2
7758: PUSH
7759: LD_INT 34
7761: PUSH
7762: LD_INT 43
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 34
7771: PUSH
7772: LD_INT 44
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 34
7781: PUSH
7782: LD_INT 46
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: PPUSH
7806: CALL_OW 69
7810: PUSH
7811: LD_INT 0
7813: EQUAL
7814: IFFALSE 7482
// seeEnemy = 0 ;
7816: LD_ADDR_VAR 0 11
7820: PUSH
7821: LD_INT 0
7823: ST_TO_ADDR
// end ;
7824: LD_VAR 0 5
7828: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7829: LD_INT 0
7831: PPUSH
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7837: LD_ADDR_VAR 0 8
7841: PUSH
7842: LD_VAR 0 2
7846: PPUSH
7847: CALL_OW 313
7851: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7852: LD_ADDR_VAR 0 9
7856: PUSH
7857: LD_VAR 0 3
7861: PPUSH
7862: LD_INT 22
7864: PUSH
7865: LD_VAR 0 1
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 25
7876: PUSH
7877: LD_INT 2
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 24
7886: PUSH
7887: LD_INT 750
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: LD_INT 54
7899: PUSH
7900: EMPTY
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: PPUSH
7913: CALL_OW 70
7917: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7918: LD_ADDR_VAR 0 6
7922: PUSH
7923: LD_VAR 0 3
7927: PPUSH
7928: LD_INT 22
7930: PUSH
7931: LD_VAR 0 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 3
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 3
7952: PUSH
7953: LD_INT 24
7955: PUSH
7956: LD_INT 1000
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: PPUSH
7975: CALL_OW 70
7979: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7980: LD_VAR 0 6
7984: NOT
7985: PUSH
7986: LD_INT 22
7988: PUSH
7989: LD_VAR 0 1
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 25
8000: PUSH
8001: LD_INT 2
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 24
8010: PUSH
8011: LD_INT 250
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 69
8027: NOT
8028: AND
8029: IFFALSE 8033
// exit ;
8031: GO 8215
// if buildings_list > 0 and engineerOkInside then
8033: LD_VAR 0 6
8037: PUSH
8038: LD_INT 0
8040: GREATER
8041: PUSH
8042: LD_VAR 0 8
8046: AND
8047: IFFALSE 8058
// ComExitBuilding ( engineerOkInside ) ;
8049: LD_VAR 0 8
8053: PPUSH
8054: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8058: LD_VAR 0 6
8062: PUSH
8063: LD_INT 0
8065: GREATER
8066: PUSH
8067: LD_VAR 0 9
8071: PUSH
8072: LD_INT 0
8074: GREATER
8075: AND
8076: IFFALSE 8096
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8078: LD_VAR 0 9
8082: PPUSH
8083: LD_VAR 0 6
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8096: LD_VAR 0 6
8100: PUSH
8101: LD_INT 0
8103: EQUAL
8104: PUSH
8105: LD_VAR 0 4
8109: PUSH
8110: LD_INT 0
8112: EQUAL
8113: AND
8114: PUSH
8115: LD_VAR 0 9
8119: PUSH
8120: LD_INT 0
8122: GREATER
8123: AND
8124: IFFALSE 8140
// ComEnterUnit ( engineerOkOutside , building ) ;
8126: LD_VAR 0 9
8130: PPUSH
8131: LD_VAR 0 2
8135: PPUSH
8136: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8140: LD_VAR 0 9
8144: PUSH
8145: LD_INT 0
8147: GREATER
8148: PUSH
8149: LD_VAR 0 6
8153: PUSH
8154: LD_INT 0
8156: EQUAL
8157: AND
8158: PUSH
8159: LD_VAR 0 4
8163: PUSH
8164: LD_INT 0
8166: GREATER
8167: AND
8168: IFFALSE 8215
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8170: LD_VAR 0 9
8174: PPUSH
8175: LD_VAR 0 4
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PPUSH
8184: LD_VAR 0 4
8188: PUSH
8189: LD_INT 2
8191: ARRAY
8192: PPUSH
8193: LD_VAR 0 4
8197: PUSH
8198: LD_INT 3
8200: ARRAY
8201: PPUSH
8202: LD_VAR 0 4
8206: PUSH
8207: LD_INT 4
8209: ARRAY
8210: PPUSH
8211: CALL_OW 145
// end ;
8215: LD_VAR 0 5
8219: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8220: LD_INT 0
8222: PPUSH
8223: PPUSH
8224: PPUSH
8225: PPUSH
8226: PPUSH
8227: PPUSH
8228: PPUSH
8229: PPUSH
8230: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8231: LD_ADDR_VAR 0 6
8235: PUSH
8236: LD_INT 22
8238: PUSH
8239: LD_VAR 0 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 25
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 23
8260: PUSH
8261: LD_INT 2
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 24
8270: PUSH
8271: LD_INT 251
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PPUSH
8284: CALL_OW 69
8288: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8289: LD_ADDR_VAR 0 7
8293: PUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: LD_INT 22
8301: PUSH
8302: LD_VAR 0 1
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 23
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 25
8323: PUSH
8324: LD_INT 4
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 50
8333: PUSH
8334: EMPTY
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 70
8347: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8348: LD_ADDR_VAR 0 10
8352: PUSH
8353: LD_VAR 0 3
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_VAR 0 1
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: LD_INT 21
8372: PUSH
8373: LD_INT 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: LD_INT 25
8385: PUSH
8386: LD_INT 3
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 3
8399: PUSH
8400: LD_INT 24
8402: PUSH
8403: LD_INT 750
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: PPUSH
8420: CALL_OW 70
8424: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8425: LD_ADDR_VAR 0 11
8429: PUSH
8430: LD_VAR 0 2
8434: PPUSH
8435: LD_INT 22
8437: PUSH
8438: LD_VAR 0 1
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 1
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: LD_INT 25
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: LD_INT 24
8479: PUSH
8480: LD_INT 1000
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PPUSH
8497: CALL_OW 70
8501: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8502: LD_VAR 0 10
8506: NOT
8507: PUSH
8508: LD_VAR 0 11
8512: NOT
8513: AND
8514: PUSH
8515: LD_VAR 0 6
8519: NOT
8520: AND
8521: IFFALSE 8525
// exit ;
8523: GO 8759
// if damageUnits > 0 and sci_list > 0 then
8525: LD_VAR 0 10
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: PUSH
8534: LD_VAR 0 6
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: AND
8543: IFFALSE 8559
// ComMoveToArea ( damageUnits , healArea ) ;
8545: LD_VAR 0 10
8549: PPUSH
8550: LD_VAR 0 2
8554: PPUSH
8555: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8559: LD_VAR 0 11
8563: PUSH
8564: LD_INT 0
8566: GREATER
8567: PUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 0
8575: GREATER
8576: AND
8577: IFFALSE 8588
// ComExitBuilding ( sci_list ) ;
8579: LD_VAR 0 6
8583: PPUSH
8584: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8588: LD_VAR 0 11
8592: PUSH
8593: LD_INT 0
8595: GREATER
8596: PUSH
8597: LD_VAR 0 7
8601: PUSH
8602: LD_INT 0
8604: GREATER
8605: AND
8606: IFFALSE 8626
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8608: LD_VAR 0 7
8612: PPUSH
8613: LD_VAR 0 11
8617: PUSH
8618: LD_INT 1
8620: ARRAY
8621: PPUSH
8622: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8626: LD_VAR 0 10
8630: PUSH
8631: LD_INT 0
8633: EQUAL
8634: PUSH
8635: LD_VAR 0 11
8639: PUSH
8640: LD_INT 0
8642: EQUAL
8643: AND
8644: PUSH
8645: LD_VAR 0 7
8649: PUSH
8650: LD_INT 0
8652: GREATER
8653: AND
8654: IFFALSE 8759
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8656: LD_ADDR_VAR 0 12
8660: PUSH
8661: LD_INT 22
8663: PUSH
8664: LD_VAR 0 1
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 21
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 30
8685: PUSH
8686: LD_INT 8
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: PPUSH
8698: CALL_OW 69
8702: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8703: LD_ADDR_VAR 0 13
8707: PUSH
8708: LD_INT 1
8710: PPUSH
8711: LD_VAR 0 12
8715: PPUSH
8716: CALL_OW 12
8720: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8721: LD_VAR 0 7
8725: PPUSH
8726: LD_INT 3
8728: PUSH
8729: LD_INT 60
8731: PUSH
8732: EMPTY
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PPUSH
8739: CALL_OW 72
8743: PPUSH
8744: LD_VAR 0 12
8748: PUSH
8749: LD_VAR 0 13
8753: ARRAY
8754: PPUSH
8755: CALL_OW 120
// end ; end ;
8759: LD_VAR 0 5
8763: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8764: LD_INT 0
8766: PPUSH
8767: PPUSH
8768: PPUSH
8769: PPUSH
// tmpTab = [ ] ;
8770: LD_ADDR_VAR 0 6
8774: PUSH
8775: EMPTY
8776: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8777: LD_INT 22
8779: PUSH
8780: LD_VAR 0 1
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 30
8791: PUSH
8792: LD_INT 32
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 69
8807: PUSH
8808: LD_INT 0
8810: GREATER
8811: IFFALSE 8894
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8813: LD_ADDR_VAR 0 4
8817: PUSH
8818: LD_INT 22
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 30
8832: PUSH
8833: LD_INT 32
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 69
8848: PUSH
8849: FOR_IN
8850: IFFALSE 8892
// begin for j in UnitsInside ( i ) do
8852: LD_ADDR_VAR 0 5
8856: PUSH
8857: LD_VAR 0 4
8861: PPUSH
8862: CALL_OW 313
8866: PUSH
8867: FOR_IN
8868: IFFALSE 8888
// tmpTab = tmpTab ^ j ;
8870: LD_ADDR_VAR 0 6
8874: PUSH
8875: LD_VAR 0 6
8879: PUSH
8880: LD_VAR 0 5
8884: ADD
8885: ST_TO_ADDR
8886: GO 8867
8888: POP
8889: POP
// end ;
8890: GO 8849
8892: POP
8893: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8894: LD_VAR 0 6
8898: PPUSH
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 250
8908: PPUSH
8909: LD_VAR 0 2
8913: PPUSH
8914: CALL_OW 251
8918: PPUSH
8919: CALL_OW 114
// end ;
8923: LD_VAR 0 3
8927: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8928: LD_INT 0
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
// enable ;
8934: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8935: LD_ADDR_VAR 0 7
8939: PUSH
8940: LD_VAR 0 3
8944: PPUSH
8945: CALL_OW 435
8949: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8950: LD_ADDR_VAR 0 6
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_VAR 0 1
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 34
8969: PUSH
8970: LD_VAR 0 2
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PPUSH
8983: CALL_OW 69
8987: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8988: LD_VAR 0 6
8992: PUSH
8993: LD_INT 0
8995: GREATER
8996: PUSH
8997: LD_VAR 0 3
9001: PPUSH
9002: CALL_OW 435
9006: AND
9007: PUSH
9008: LD_VAR 0 7
9012: PUSH
9013: LD_INT 0
9015: GREATER
9016: AND
9017: IFFALSE 9066
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 1
9026: ARRAY
9027: PPUSH
9028: LD_VAR 0 7
9032: PUSH
9033: LD_INT 1
9035: ARRAY
9036: PPUSH
9037: LD_VAR 0 7
9041: PUSH
9042: LD_INT 2
9044: ARRAY
9045: PPUSH
9046: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9050: LD_VAR 0 6
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PPUSH
9059: LD_INT 100
9061: PPUSH
9062: CALL_OW 240
// end ; end ;
9066: LD_VAR 0 4
9070: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9071: LD_INT 0
9073: PPUSH
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
9080: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9081: LD_ADDR_VAR 0 6
9085: PUSH
9086: LD_VAR 0 2
9090: PPUSH
9091: LD_INT 22
9093: PUSH
9094: LD_VAR 0 1
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 56
9105: PUSH
9106: EMPTY
9107: LIST
9108: PUSH
9109: LD_INT 24
9111: PUSH
9112: LD_INT 700
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: LD_INT 60
9124: PUSH
9125: EMPTY
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: LD_INT 25
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: PUSH
9145: LD_INT 25
9147: PUSH
9148: LD_INT 5
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 25
9157: PUSH
9158: LD_INT 8
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 25
9167: PUSH
9168: LD_INT 9
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PPUSH
9189: CALL_OW 70
9193: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9194: LD_ADDR_VAR 0 7
9198: PUSH
9199: LD_VAR 0 2
9203: PPUSH
9204: LD_INT 22
9206: PUSH
9207: LD_VAR 0 1
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 30
9218: PUSH
9219: LD_INT 32
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 58
9228: PUSH
9229: EMPTY
9230: LIST
9231: PUSH
9232: LD_INT 24
9234: PUSH
9235: LD_INT 251
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 70
9252: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9253: LD_ADDR_VAR 0 9
9257: PUSH
9258: LD_VAR 0 2
9262: PPUSH
9263: LD_INT 22
9265: PUSH
9266: LD_VAR 0 1
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 2
9277: PUSH
9278: LD_INT 30
9280: PUSH
9281: LD_INT 4
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 30
9290: PUSH
9291: LD_INT 5
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 24
9305: PUSH
9306: LD_INT 251
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PPUSH
9318: CALL_OW 70
9322: ST_TO_ADDR
// if barrackList > 0 then
9323: LD_VAR 0 9
9327: PUSH
9328: LD_INT 0
9330: GREATER
9331: IFFALSE 9479
// begin if turretList = 0 then
9333: LD_VAR 0 7
9337: PUSH
9338: LD_INT 0
9340: EQUAL
9341: IFFALSE 9383
// begin if soldiers_list > 0 then
9343: LD_VAR 0 6
9347: PUSH
9348: LD_INT 0
9350: GREATER
9351: IFFALSE 9381
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9353: LD_VAR 0 6
9357: PPUSH
9358: LD_VAR 0 9
9362: PUSH
9363: LD_INT 1
9365: PPUSH
9366: LD_VAR 0 9
9370: PPUSH
9371: CALL_OW 12
9375: ARRAY
9376: PPUSH
9377: CALL_OW 120
// end else
9381: GO 9479
// begin for i in barrackList do
9383: LD_ADDR_VAR 0 4
9387: PUSH
9388: LD_VAR 0 9
9392: PUSH
9393: FOR_IN
9394: IFFALSE 9477
// begin insideUnits = UnitsInside ( i ) ;
9396: LD_ADDR_VAR 0 10
9400: PUSH
9401: LD_VAR 0 4
9405: PPUSH
9406: CALL_OW 313
9410: ST_TO_ADDR
// if insideUnits > 0 then
9411: LD_VAR 0 10
9415: PUSH
9416: LD_INT 0
9418: GREATER
9419: IFFALSE 9443
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9421: LD_VAR 0 10
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: LD_VAR 0 7
9434: PUSH
9435: LD_INT 1
9437: ARRAY
9438: PPUSH
9439: CALL_OW 120
// if soldiers_list > 0 then
9443: LD_VAR 0 6
9447: PUSH
9448: LD_INT 0
9450: GREATER
9451: IFFALSE 9475
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9453: LD_VAR 0 6
9457: PUSH
9458: LD_INT 1
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 7
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: CALL_OW 120
// end ;
9475: GO 9393
9477: POP
9478: POP
// end ; end ; end ;
9479: LD_VAR 0 3
9483: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9484: LD_INT 0
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9491: LD_ADDR_VAR 0 6
9495: PUSH
9496: LD_INT 22
9498: PUSH
9499: LD_VAR 0 1
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 2
9510: PUSH
9511: LD_INT 30
9513: PUSH
9514: LD_INT 31
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 32
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 30
9533: PUSH
9534: LD_INT 33
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 30
9543: PUSH
9544: LD_INT 4
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 30
9553: PUSH
9554: LD_INT 5
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9578: LD_ADDR_VAR 0 7
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 2
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 58
9607: PUSH
9608: EMPTY
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL_OW 69
9620: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9621: LD_VAR 0 6
9625: PUSH
9626: LD_INT 0
9628: GREATER
9629: PUSH
9630: LD_VAR 0 7
9634: PUSH
9635: LD_INT 0
9637: GREATER
9638: AND
9639: IFFALSE 9709
// begin for i in turretsList do
9641: LD_ADDR_VAR 0 4
9645: PUSH
9646: LD_VAR 0 6
9650: PUSH
9651: FOR_IN
9652: IFFALSE 9707
// begin for j in enemyBuildings do
9654: LD_ADDR_VAR 0 5
9658: PUSH
9659: LD_VAR 0 7
9663: PUSH
9664: FOR_IN
9665: IFFALSE 9703
// begin if GetDistUnits ( i , j ) < 20 then
9667: LD_VAR 0 4
9671: PPUSH
9672: LD_VAR 0 5
9676: PPUSH
9677: CALL_OW 296
9681: PUSH
9682: LD_INT 20
9684: LESS
9685: IFFALSE 9701
// begin ComAttackUnit ( i , j ) ;
9687: LD_VAR 0 4
9691: PPUSH
9692: LD_VAR 0 5
9696: PPUSH
9697: CALL_OW 115
// end ; end ;
9701: GO 9664
9703: POP
9704: POP
// end ;
9705: GO 9651
9707: POP
9708: POP
// end ; end ;
9709: LD_VAR 0 3
9713: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9714: LD_INT 0
9716: PPUSH
9717: PPUSH
9718: PPUSH
9719: PPUSH
9720: PPUSH
9721: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9722: LD_ADDR_VAR 0 8
9726: PUSH
9727: LD_INT 22
9729: PUSH
9730: LD_VAR 0 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 34
9751: PUSH
9752: LD_INT 52
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 22
9776: PUSH
9777: LD_VAR 0 1
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 21
9788: PUSH
9789: LD_INT 3
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: LD_INT 24
9801: PUSH
9802: LD_INT 1000
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: EMPTY
9819: LIST
9820: PPUSH
9821: CALL_OW 69
9825: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9826: LD_VAR 0 9
9830: PUSH
9831: LD_INT 0
9833: GREATER
9834: PUSH
9835: LD_VAR 0 8
9839: PPUSH
9840: LD_INT 24
9842: PUSH
9843: LD_INT 750
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 72
9854: PUSH
9855: LD_INT 0
9857: GREATER
9858: AND
9859: IFFALSE 9894
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9861: LD_VAR 0 8
9865: PPUSH
9866: LD_INT 24
9868: PUSH
9869: LD_INT 750
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 72
9880: PPUSH
9881: LD_VAR 0 9
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PPUSH
9890: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9894: LD_VAR 0 8
9898: PPUSH
9899: LD_INT 3
9901: PUSH
9902: LD_INT 24
9904: PUSH
9905: LD_INT 750
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PPUSH
9916: CALL_OW 72
9920: PUSH
9921: LD_INT 0
9923: GREATER
9924: IFFALSE 9962
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9926: LD_VAR 0 8
9930: PPUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 24
9936: PUSH
9937: LD_INT 750
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PPUSH
9953: LD_VAR 0 2
9957: PPUSH
9958: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9962: LD_VAR 0 8
9966: PUSH
9967: LD_INT 0
9969: GREATER
9970: PUSH
9971: LD_VAR 0 9
9975: PUSH
9976: LD_INT 0
9978: EQUAL
9979: AND
9980: PUSH
9981: LD_VAR 0 3
9985: PUSH
9986: LD_INT 0
9988: GREATER
9989: AND
9990: IFFALSE 10037
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9992: LD_VAR 0 8
9996: PPUSH
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 2
10013: ARRAY
10014: PPUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 3
10022: ARRAY
10023: PPUSH
10024: LD_VAR 0 3
10028: PUSH
10029: LD_INT 4
10031: ARRAY
10032: PPUSH
10033: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10037: LD_VAR 0 2
10041: PPUSH
10042: LD_INT 22
10044: PUSH
10045: LD_VAR 0 1
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 21
10056: PUSH
10057: LD_INT 2
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 34
10066: PUSH
10067: LD_INT 52
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: PUSH
10074: LD_INT 3
10076: PUSH
10077: LD_INT 24
10079: PUSH
10080: LD_INT 750
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PPUSH
10097: CALL_OW 70
10101: PUSH
10102: LD_INT 0
10104: GREATER
10105: IFFALSE 10307
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10107: LD_ADDR_VAR 0 5
10111: PUSH
10112: LD_VAR 0 2
10116: PPUSH
10117: LD_INT 22
10119: PUSH
10120: LD_VAR 0 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 21
10131: PUSH
10132: LD_INT 2
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: LD_INT 34
10141: PUSH
10142: LD_INT 52
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 3
10151: PUSH
10152: LD_INT 24
10154: PUSH
10155: LD_INT 750
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: PPUSH
10172: CALL_OW 70
10176: PUSH
10177: FOR_IN
10178: IFFALSE 10305
// begin mechTmp = UnitsInside ( i ) ;
10180: LD_ADDR_VAR 0 6
10184: PUSH
10185: LD_VAR 0 5
10189: PPUSH
10190: CALL_OW 313
10194: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10195: LD_VAR 0 6
10199: PPUSH
10200: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10204: LD_VAR 0 6
10208: PPUSH
10209: LD_VAR 0 7
10213: PPUSH
10214: CALL_OW 189
// wait ( 0 0$2 ) ;
10218: LD_INT 70
10220: PPUSH
10221: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10225: LD_VAR 0 6
10229: PPUSH
10230: LD_VAR 0 2
10234: PPUSH
10235: LD_INT 22
10237: PUSH
10238: LD_VAR 0 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 2
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 34
10259: PUSH
10260: LD_INT 52
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 1000
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 58
10279: PUSH
10280: EMPTY
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: PPUSH
10290: CALL_OW 70
10294: PUSH
10295: LD_INT 1
10297: ARRAY
10298: PPUSH
10299: CALL_OW 180
// end ;
10303: GO 10177
10305: POP
10306: POP
// end ; end ;
10307: LD_VAR 0 4
10311: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
10324: PPUSH
// for i = 1 to medicCount do
10325: LD_ADDR_VAR 0 14
10329: PUSH
10330: DOUBLE
10331: LD_INT 1
10333: DEC
10334: ST_TO_ADDR
10335: LD_VAR 0 7
10339: PUSH
10340: FOR_TO
10341: IFFALSE 10423
// begin uc_side = side ;
10343: LD_ADDR_OWVAR 20
10347: PUSH
10348: LD_VAR 0 1
10352: ST_TO_ADDR
// uc_nation = nation ;
10353: LD_ADDR_OWVAR 21
10357: PUSH
10358: LD_VAR 0 2
10362: ST_TO_ADDR
// hc_name =  ;
10363: LD_ADDR_OWVAR 26
10367: PUSH
10368: LD_STRING 
10370: ST_TO_ADDR
// hc_gallery =  ;
10371: LD_ADDR_OWVAR 33
10375: PUSH
10376: LD_STRING 
10378: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10379: LD_INT 0
10381: PPUSH
10382: LD_INT 4
10384: PPUSH
10385: LD_VAR 0 8
10389: PPUSH
10390: CALL_OW 380
// un = CreateHuman ;
10394: LD_ADDR_VAR 0 16
10398: PUSH
10399: CALL_OW 44
10403: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10404: LD_VAR 0 16
10408: PPUSH
10409: LD_VAR 0 9
10413: PPUSH
10414: LD_INT 0
10416: PPUSH
10417: CALL_OW 49
// end ;
10421: GO 10340
10423: POP
10424: POP
// for i = 1 to soldierCount do
10425: LD_ADDR_VAR 0 14
10429: PUSH
10430: DOUBLE
10431: LD_INT 1
10433: DEC
10434: ST_TO_ADDR
10435: LD_VAR 0 3
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10523
// begin uc_side = side ;
10443: LD_ADDR_OWVAR 20
10447: PUSH
10448: LD_VAR 0 1
10452: ST_TO_ADDR
// uc_nation = nation ;
10453: LD_ADDR_OWVAR 21
10457: PUSH
10458: LD_VAR 0 2
10462: ST_TO_ADDR
// hc_name =  ;
10463: LD_ADDR_OWVAR 26
10467: PUSH
10468: LD_STRING 
10470: ST_TO_ADDR
// hc_gallery =  ;
10471: LD_ADDR_OWVAR 33
10475: PUSH
10476: LD_STRING 
10478: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10479: LD_INT 0
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: LD_VAR 0 8
10489: PPUSH
10490: CALL_OW 380
// un = CreateHuman ;
10494: LD_ADDR_VAR 0 16
10498: PUSH
10499: CALL_OW 44
10503: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10504: LD_VAR 0 16
10508: PPUSH
10509: LD_VAR 0 9
10513: PPUSH
10514: LD_INT 0
10516: PPUSH
10517: CALL_OW 49
// end ;
10521: GO 10440
10523: POP
10524: POP
// for i = 1 to sniperCount do
10525: LD_ADDR_VAR 0 14
10529: PUSH
10530: DOUBLE
10531: LD_INT 1
10533: DEC
10534: ST_TO_ADDR
10535: LD_VAR 0 4
10539: PUSH
10540: FOR_TO
10541: IFFALSE 10623
// begin uc_side = side ;
10543: LD_ADDR_OWVAR 20
10547: PUSH
10548: LD_VAR 0 1
10552: ST_TO_ADDR
// uc_nation = nation ;
10553: LD_ADDR_OWVAR 21
10557: PUSH
10558: LD_VAR 0 2
10562: ST_TO_ADDR
// hc_name =  ;
10563: LD_ADDR_OWVAR 26
10567: PUSH
10568: LD_STRING 
10570: ST_TO_ADDR
// hc_gallery =  ;
10571: LD_ADDR_OWVAR 33
10575: PUSH
10576: LD_STRING 
10578: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10579: LD_INT 0
10581: PPUSH
10582: LD_INT 5
10584: PPUSH
10585: LD_VAR 0 8
10589: PPUSH
10590: CALL_OW 380
// un = CreateHuman ;
10594: LD_ADDR_VAR 0 16
10598: PUSH
10599: CALL_OW 44
10603: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10604: LD_VAR 0 16
10608: PPUSH
10609: LD_VAR 0 9
10613: PPUSH
10614: LD_INT 0
10616: PPUSH
10617: CALL_OW 49
// end ;
10621: GO 10540
10623: POP
10624: POP
// for i = 1 to bazookCount do
10625: LD_ADDR_VAR 0 14
10629: PUSH
10630: DOUBLE
10631: LD_INT 1
10633: DEC
10634: ST_TO_ADDR
10635: LD_VAR 0 5
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10723
// begin uc_side = side ;
10643: LD_ADDR_OWVAR 20
10647: PUSH
10648: LD_VAR 0 1
10652: ST_TO_ADDR
// uc_nation = nation ;
10653: LD_ADDR_OWVAR 21
10657: PUSH
10658: LD_VAR 0 2
10662: ST_TO_ADDR
// hc_name =  ;
10663: LD_ADDR_OWVAR 26
10667: PUSH
10668: LD_STRING 
10670: ST_TO_ADDR
// hc_gallery =  ;
10671: LD_ADDR_OWVAR 33
10675: PUSH
10676: LD_STRING 
10678: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10679: LD_INT 0
10681: PPUSH
10682: LD_INT 9
10684: PPUSH
10685: LD_VAR 0 8
10689: PPUSH
10690: CALL_OW 380
// un = CreateHuman ;
10694: LD_ADDR_VAR 0 16
10698: PUSH
10699: CALL_OW 44
10703: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10704: LD_VAR 0 16
10708: PPUSH
10709: LD_VAR 0 9
10713: PPUSH
10714: LD_INT 0
10716: PPUSH
10717: CALL_OW 49
// end ;
10721: GO 10640
10723: POP
10724: POP
// for i = 1 to mortalCount do
10725: LD_ADDR_VAR 0 14
10729: PUSH
10730: DOUBLE
10731: LD_INT 1
10733: DEC
10734: ST_TO_ADDR
10735: LD_VAR 0 6
10739: PUSH
10740: FOR_TO
10741: IFFALSE 10823
// begin uc_side = side ;
10743: LD_ADDR_OWVAR 20
10747: PUSH
10748: LD_VAR 0 1
10752: ST_TO_ADDR
// uc_nation = nation ;
10753: LD_ADDR_OWVAR 21
10757: PUSH
10758: LD_VAR 0 2
10762: ST_TO_ADDR
// hc_name =  ;
10763: LD_ADDR_OWVAR 26
10767: PUSH
10768: LD_STRING 
10770: ST_TO_ADDR
// hc_gallery =  ;
10771: LD_ADDR_OWVAR 33
10775: PUSH
10776: LD_STRING 
10778: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10779: LD_INT 0
10781: PPUSH
10782: LD_INT 8
10784: PPUSH
10785: LD_VAR 0 8
10789: PPUSH
10790: CALL_OW 380
// un = CreateHuman ;
10794: LD_ADDR_VAR 0 16
10798: PUSH
10799: CALL_OW 44
10803: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10804: LD_VAR 0 16
10808: PPUSH
10809: LD_VAR 0 9
10813: PPUSH
10814: LD_INT 0
10816: PPUSH
10817: CALL_OW 49
// end ;
10821: GO 10740
10823: POP
10824: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10825: LD_ADDR_VAR 0 19
10829: PUSH
10830: LD_INT 22
10832: PUSH
10833: LD_VAR 0 1
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 2
10844: PUSH
10845: LD_INT 25
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 25
10857: PUSH
10858: LD_INT 5
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 25
10867: PUSH
10868: LD_INT 8
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 25
10877: PUSH
10878: LD_INT 9
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PPUSH
10896: CALL_OW 69
10900: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10901: LD_ADDR_VAR 0 18
10905: PUSH
10906: LD_INT 22
10908: PUSH
10909: LD_VAR 0 1
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 4
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PPUSH
10932: CALL_OW 69
10936: ST_TO_ADDR
// for i in medic_list do
10937: LD_ADDR_VAR 0 14
10941: PUSH
10942: LD_VAR 0 18
10946: PUSH
10947: FOR_IN
10948: IFFALSE 10966
// ComMoveToArea ( i , healArea ) ;
10950: LD_VAR 0 14
10954: PPUSH
10955: LD_VAR 0 10
10959: PPUSH
10960: CALL_OW 113
10964: GO 10947
10966: POP
10967: POP
// if strategy = 1 then
10968: LD_VAR 0 12
10972: PUSH
10973: LD_INT 1
10975: EQUAL
10976: IFFALSE 11693
// begin repeat wait ( 0 0$3 ) ;
10978: LD_INT 105
10980: PPUSH
10981: CALL_OW 67
// for i in soldiersOK_list do
10985: LD_ADDR_VAR 0 14
10989: PUSH
10990: LD_VAR 0 19
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11030
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10998: LD_VAR 0 14
11002: PPUSH
11003: LD_INT 80
11005: PPUSH
11006: LD_INT 109
11008: PPUSH
11009: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11013: LD_VAR 0 14
11017: PPUSH
11018: LD_INT 39
11020: PPUSH
11021: LD_INT 49
11023: PPUSH
11024: CALL_OW 174
// end ;
11028: GO 10995
11030: POP
11031: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11032: LD_INT 13
11034: PPUSH
11035: LD_INT 22
11037: PUSH
11038: LD_VAR 0 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 70
11051: PUSH
11052: LD_INT 0
11054: GREATER
11055: IFFALSE 10978
// repeat wait ( 0 0$1 ) ;
11057: LD_INT 35
11059: PPUSH
11060: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11064: LD_ADDR_VAR 0 17
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: LD_INT 550
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 24
11103: PUSH
11104: LD_INT 250
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PPUSH
11120: CALL_OW 69
11124: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11125: LD_ADDR_VAR 0 19
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_VAR 0 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 8
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 25
11177: PUSH
11178: LD_INT 9
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 24
11194: PUSH
11195: LD_INT 1000
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 69
11211: ST_TO_ADDR
// if medicCount > 0 then
11212: LD_VAR 0 7
11216: PUSH
11217: LD_INT 0
11219: GREATER
11220: IFFALSE 11294
// begin if damageUnit_list > 0 then
11222: LD_VAR 0 17
11226: PUSH
11227: LD_INT 0
11229: GREATER
11230: IFFALSE 11294
// begin for i in damageUnit_list do
11232: LD_ADDR_VAR 0 14
11236: PUSH
11237: LD_VAR 0 17
11241: PUSH
11242: FOR_IN
11243: IFFALSE 11292
// begin ComMoveToArea ( i , healArea ) ;
11245: LD_VAR 0 14
11249: PPUSH
11250: LD_VAR 0 10
11254: PPUSH
11255: CALL_OW 113
// for j in medic_list do
11259: LD_ADDR_VAR 0 15
11263: PUSH
11264: LD_VAR 0 18
11268: PUSH
11269: FOR_IN
11270: IFFALSE 11288
// AddComHeal ( j , i ) ;
11272: LD_VAR 0 15
11276: PPUSH
11277: LD_VAR 0 14
11281: PPUSH
11282: CALL_OW 188
11286: GO 11269
11288: POP
11289: POP
// end ;
11290: GO 11242
11292: POP
11293: POP
// end ; end ; for i in soldiersOK_list do
11294: LD_ADDR_VAR 0 14
11298: PUSH
11299: LD_VAR 0 19
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11487
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11307: LD_ADDR_VAR 0 22
11311: PUSH
11312: LD_INT 22
11314: PUSH
11315: LD_VAR 0 11
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PUSH
11329: LD_EXP 45
11333: DIFF
11334: PPUSH
11335: LD_VAR 0 14
11339: PPUSH
11340: CALL_OW 74
11344: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11345: LD_ADDR_VAR 0 23
11349: PUSH
11350: LD_INT 22
11352: PUSH
11353: LD_VAR 0 11
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 59
11367: PUSH
11368: EMPTY
11369: LIST
11370: PUSH
11371: LD_INT 21
11373: PUSH
11374: LD_INT 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: PPUSH
11404: CALL_OW 69
11408: PPUSH
11409: LD_VAR 0 14
11413: PPUSH
11414: CALL_OW 74
11418: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11419: LD_VAR 0 14
11423: PPUSH
11424: LD_VAR 0 22
11428: PPUSH
11429: CALL_OW 296
11433: PUSH
11434: LD_INT 8
11436: PLUS
11437: PUSH
11438: LD_VAR 0 14
11442: PPUSH
11443: LD_VAR 0 23
11447: PPUSH
11448: CALL_OW 296
11452: LESS
11453: IFFALSE 11471
// begin ComAttackUnit ( i , target1 ) ;
11455: LD_VAR 0 14
11459: PPUSH
11460: LD_VAR 0 22
11464: PPUSH
11465: CALL_OW 115
// end else
11469: GO 11485
// begin ComAttackUnit ( i , target2 ) ;
11471: LD_VAR 0 14
11475: PPUSH
11476: LD_VAR 0 23
11480: PPUSH
11481: CALL_OW 115
// end ; end ;
11485: GO 11304
11487: POP
11488: POP
// for i in soldiersOK_list do
11489: LD_ADDR_VAR 0 14
11493: PUSH
11494: LD_VAR 0 19
11498: PUSH
11499: FOR_IN
11500: IFFALSE 11682
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11502: LD_ADDR_VAR 0 22
11506: PUSH
11507: LD_INT 22
11509: PUSH
11510: LD_VAR 0 11
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PPUSH
11519: CALL_OW 69
11523: PUSH
11524: LD_EXP 45
11528: DIFF
11529: PPUSH
11530: LD_VAR 0 14
11534: PPUSH
11535: CALL_OW 74
11539: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11540: LD_ADDR_VAR 0 23
11544: PUSH
11545: LD_INT 22
11547: PUSH
11548: LD_VAR 0 11
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: LD_INT 59
11562: PUSH
11563: EMPTY
11564: LIST
11565: PUSH
11566: LD_INT 21
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 21
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: PPUSH
11604: LD_VAR 0 14
11608: PPUSH
11609: CALL_OW 74
11613: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11614: LD_VAR 0 14
11618: PPUSH
11619: LD_VAR 0 22
11623: PPUSH
11624: CALL_OW 296
11628: PUSH
11629: LD_INT 8
11631: PLUS
11632: PUSH
11633: LD_VAR 0 14
11637: PPUSH
11638: LD_VAR 0 23
11642: PPUSH
11643: CALL_OW 296
11647: LESS
11648: IFFALSE 11666
// begin ComAttackUnit ( i , target1 ) ;
11650: LD_VAR 0 14
11654: PPUSH
11655: LD_VAR 0 22
11659: PPUSH
11660: CALL_OW 115
// end else
11664: GO 11680
// begin ComAttackUnit ( i , target2 ) ;
11666: LD_VAR 0 14
11670: PPUSH
11671: LD_VAR 0 23
11675: PPUSH
11676: CALL_OW 115
// end ; end ;
11680: GO 11499
11682: POP
11683: POP
// until soldiersOK_list = [ ] ;
11684: LD_VAR 0 19
11688: PUSH
11689: EMPTY
11690: EQUAL
11691: IFFALSE 11057
// end ; if strategy = 2 then
11693: LD_VAR 0 12
11697: PUSH
11698: LD_INT 2
11700: EQUAL
11701: IFFALSE 12406
// begin repeat wait ( 0 0$1 ) ;
11703: LD_INT 35
11705: PPUSH
11706: CALL_OW 67
// for i in soldiersOK_list do
11710: LD_ADDR_VAR 0 14
11714: PUSH
11715: LD_VAR 0 19
11719: PUSH
11720: FOR_IN
11721: IFFALSE 11755
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11723: LD_VAR 0 14
11727: PPUSH
11728: LD_INT 117
11730: PPUSH
11731: LD_INT 97
11733: PPUSH
11734: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11738: LD_VAR 0 14
11742: PPUSH
11743: LD_INT 94
11745: PPUSH
11746: LD_INT 50
11748: PPUSH
11749: CALL_OW 174
// end ;
11753: GO 11720
11755: POP
11756: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11757: LD_INT 14
11759: PPUSH
11760: LD_INT 22
11762: PUSH
11763: LD_VAR 0 1
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PPUSH
11772: CALL_OW 70
11776: PUSH
11777: LD_INT 0
11779: GREATER
11780: IFFALSE 11703
// repeat wait ( 0 0$3 ) ;
11782: LD_INT 105
11784: PPUSH
11785: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11789: LD_ADDR_VAR 0 17
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_VAR 0 1
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: LD_INT 3
11811: PUSH
11812: LD_INT 24
11814: PUSH
11815: LD_INT 550
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 24
11828: PUSH
11829: LD_INT 250
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11850: LD_ADDR_VAR 0 19
11854: PUSH
11855: LD_INT 22
11857: PUSH
11858: LD_VAR 0 1
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 2
11869: PUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 25
11882: PUSH
11883: LD_INT 5
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 25
11892: PUSH
11893: LD_INT 8
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 25
11902: PUSH
11903: LD_INT 9
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: LD_INT 24
11919: PUSH
11920: LD_INT 1000
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: ST_TO_ADDR
// if medicCount > 0 then
11937: LD_VAR 0 7
11941: PUSH
11942: LD_INT 0
11944: GREATER
11945: IFFALSE 12019
// begin if damageUnit_list > 0 then
11947: LD_VAR 0 17
11951: PUSH
11952: LD_INT 0
11954: GREATER
11955: IFFALSE 12019
// begin for i in damageUnit_list do
11957: LD_ADDR_VAR 0 14
11961: PUSH
11962: LD_VAR 0 17
11966: PUSH
11967: FOR_IN
11968: IFFALSE 12017
// begin ComMoveToArea ( i , healArea ) ;
11970: LD_VAR 0 14
11974: PPUSH
11975: LD_VAR 0 10
11979: PPUSH
11980: CALL_OW 113
// for j in medic_list do
11984: LD_ADDR_VAR 0 15
11988: PUSH
11989: LD_VAR 0 18
11993: PUSH
11994: FOR_IN
11995: IFFALSE 12013
// AddComHeal ( j , i ) ;
11997: LD_VAR 0 15
12001: PPUSH
12002: LD_VAR 0 14
12006: PPUSH
12007: CALL_OW 188
12011: GO 11994
12013: POP
12014: POP
// end ;
12015: GO 11967
12017: POP
12018: POP
// end ; end ; for i in soldiersOK_list do
12019: LD_ADDR_VAR 0 14
12023: PUSH
12024: LD_VAR 0 19
12028: PUSH
12029: FOR_IN
12030: IFFALSE 12206
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12032: LD_ADDR_VAR 0 22
12036: PUSH
12037: LD_INT 22
12039: PUSH
12040: LD_VAR 0 11
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 69
12053: PPUSH
12054: LD_VAR 0 14
12058: PPUSH
12059: CALL_OW 74
12063: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12064: LD_ADDR_VAR 0 23
12068: PUSH
12069: LD_INT 22
12071: PUSH
12072: LD_VAR 0 11
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 59
12086: PUSH
12087: EMPTY
12088: LIST
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 1
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 21
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: PPUSH
12128: LD_VAR 0 14
12132: PPUSH
12133: CALL_OW 74
12137: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12138: LD_VAR 0 14
12142: PPUSH
12143: LD_VAR 0 22
12147: PPUSH
12148: CALL_OW 296
12152: PUSH
12153: LD_INT 8
12155: PLUS
12156: PUSH
12157: LD_VAR 0 14
12161: PPUSH
12162: LD_VAR 0 23
12166: PPUSH
12167: CALL_OW 296
12171: LESS
12172: IFFALSE 12190
// begin ComAttackUnit ( i , target1 ) ;
12174: LD_VAR 0 14
12178: PPUSH
12179: LD_VAR 0 22
12183: PPUSH
12184: CALL_OW 115
// end else
12188: GO 12204
// begin ComAttackUnit ( i , target2 ) ;
12190: LD_VAR 0 14
12194: PPUSH
12195: LD_VAR 0 23
12199: PPUSH
12200: CALL_OW 115
// end ; end ;
12204: GO 12029
12206: POP
12207: POP
// for i in soldiersOK_list do
12208: LD_ADDR_VAR 0 14
12212: PUSH
12213: LD_VAR 0 19
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12395
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12221: LD_ADDR_VAR 0 22
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_VAR 0 11
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PPUSH
12238: CALL_OW 69
12242: PPUSH
12243: LD_VAR 0 14
12247: PPUSH
12248: CALL_OW 74
12252: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12253: LD_ADDR_VAR 0 23
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_VAR 0 11
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: LD_INT 59
12275: PUSH
12276: EMPTY
12277: LIST
12278: PUSH
12279: LD_INT 21
12281: PUSH
12282: LD_INT 1
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 21
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: PPUSH
12317: LD_VAR 0 14
12321: PPUSH
12322: CALL_OW 74
12326: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12327: LD_VAR 0 14
12331: PPUSH
12332: LD_VAR 0 22
12336: PPUSH
12337: CALL_OW 296
12341: PUSH
12342: LD_INT 8
12344: PLUS
12345: PUSH
12346: LD_VAR 0 14
12350: PPUSH
12351: LD_VAR 0 23
12355: PPUSH
12356: CALL_OW 296
12360: LESS
12361: IFFALSE 12379
// begin ComAttackUnit ( i , target1 ) ;
12363: LD_VAR 0 14
12367: PPUSH
12368: LD_VAR 0 22
12372: PPUSH
12373: CALL_OW 115
// end else
12377: GO 12393
// begin ComAttackUnit ( i , target2 ) ;
12379: LD_VAR 0 14
12383: PPUSH
12384: LD_VAR 0 23
12388: PPUSH
12389: CALL_OW 115
// end ; end ;
12393: GO 12218
12395: POP
12396: POP
// until soldiersOK_list = [ ] ;
12397: LD_VAR 0 19
12401: PUSH
12402: EMPTY
12403: EQUAL
12404: IFFALSE 11782
// end ; end ; end_of_file
12406: LD_VAR 0 13
12410: RET
// every 0 0$01 do
12411: GO 12413
12413: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12414: LD_INT 22
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 25
12426: PUSH
12427: LD_INT 2
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 69
12442: PUSH
12443: LD_INT 0
12445: EQUAL
12446: IFFALSE 12460
// SetClass ( JMM , 2 ) ;
12448: LD_EXP 1
12452: PPUSH
12453: LD_INT 2
12455: PPUSH
12456: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12460: LD_STRING M1
12462: PPUSH
12463: CALL_OW 337
// case difficulty of 1 :
12467: LD_OWVAR 67
12471: PUSH
12472: LD_INT 1
12474: DOUBLE
12475: EQUAL
12476: IFTRUE 12480
12478: GO 12490
12480: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12481: LD_STRING M1-1
12483: PPUSH
12484: CALL_OW 337
12488: GO 12527
12490: LD_INT 2
12492: DOUBLE
12493: EQUAL
12494: IFTRUE 12498
12496: GO 12508
12498: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12499: LD_STRING M1-2
12501: PPUSH
12502: CALL_OW 337
12506: GO 12527
12508: LD_INT 3
12510: DOUBLE
12511: EQUAL
12512: IFTRUE 12516
12514: GO 12526
12516: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12517: LD_STRING M1-3
12519: PPUSH
12520: CALL_OW 337
12524: GO 12527
12526: POP
// ChangeMissionObjectives ( M1cont ) ;
12527: LD_STRING M1cont
12529: PPUSH
12530: CALL_OW 337
// SaveForQuickRestart ;
12534: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12538: LD_INT 525
12540: PPUSH
12541: LD_INT 700
12543: PPUSH
12544: CALL_OW 12
12548: PPUSH
12549: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12553: LD_INT 5
12555: PPUSH
12556: LD_INT 82
12558: PPUSH
12559: LD_INT 38
12561: PPUSH
12562: LD_INT 10
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 56
// wait ( 0 0$14 ) ;
12572: LD_INT 490
12574: PPUSH
12575: CALL_OW 67
// firstCrateSpawn := true ;
12579: LD_ADDR_EXP 41
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// end ;
12587: END
// every 0 0$02 trigger firstCrateSpawn do
12588: LD_EXP 41
12592: IFFALSE 12955
12594: GO 12596
12596: DISABLE
// begin if IsOk ( Lisa ) then
12597: LD_EXP 2
12601: PPUSH
12602: CALL_OW 302
12606: IFFALSE 12622
// Say ( Lisa , DR0-Lisa-1 ) else
12608: LD_EXP 2
12612: PPUSH
12613: LD_STRING DR0-Lisa-1
12615: PPUSH
12616: CALL_OW 88
12620: GO 12768
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12622: LD_INT 22
12624: PUSH
12625: LD_INT 1
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 1
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 26
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 25
12657: PUSH
12658: LD_INT 1
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 2
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 3
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 4
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 1
12717: PUSH
12718: LD_EXP 8
12722: PUSH
12723: LD_EXP 5
12727: PUSH
12728: LD_EXP 6
12732: PUSH
12733: LD_EXP 7
12737: PUSH
12738: LD_EXP 4
12742: PUSH
12743: LD_EXP 3
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: DIFF
12757: PPUSH
12758: LD_STRING DR0-Sol1-1
12760: PPUSH
12761: LD_STRING DR0-Sol1-1
12763: PPUSH
12764: CALL 5726 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12768: LD_INT 22
12770: PUSH
12771: LD_INT 1
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 21
12780: PUSH
12781: LD_INT 1
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 26
12790: PUSH
12791: LD_INT 1
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: LD_INT 25
12803: PUSH
12804: LD_INT 1
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 25
12813: PUSH
12814: LD_INT 2
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 25
12823: PUSH
12824: LD_INT 3
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 25
12833: PUSH
12834: LD_INT 4
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 69
12858: PUSH
12859: LD_EXP 1
12863: PUSH
12864: LD_EXP 8
12868: PUSH
12869: LD_EXP 5
12873: PUSH
12874: LD_EXP 2
12878: PUSH
12879: LD_EXP 6
12883: PUSH
12884: LD_EXP 7
12888: PUSH
12889: LD_EXP 4
12893: PUSH
12894: LD_EXP 3
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: DIFF
12909: PPUSH
12910: LD_STRING DR0-Sol2-1
12912: PPUSH
12913: LD_STRING DR0-Sol2-1
12915: PPUSH
12916: CALL 5726 0 3
// if IsOk ( Cyrus ) then
12920: LD_EXP 4
12924: PPUSH
12925: CALL_OW 302
12929: IFFALSE 12943
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12931: LD_EXP 4
12935: PPUSH
12936: LD_STRING DR0-Cyrus-1
12938: PPUSH
12939: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12943: LD_EXP 1
12947: PPUSH
12948: LD_STRING DR0-JMM-1
12950: PPUSH
12951: CALL_OW 88
// end ;
12955: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
12956: LD_EXP 5
12960: PPUSH
12961: CALL_OW 302
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 25
12978: PUSH
12979: LD_INT 16
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: CALL_OW 69
12994: PUSH
12995: LD_INT 0
12997: GREATER
12998: AND
12999: PUSH
13000: LD_INT 1
13002: PPUSH
13003: CALL_OW 463
13007: NOT
13008: AND
13009: IFFALSE 13287
13011: GO 13013
13013: DISABLE
// begin DialogueOn ;
13014: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13018: LD_EXP 5
13022: PPUSH
13023: LD_STRING D10-Frank-1
13025: PPUSH
13026: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13030: LD_INT 22
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 21
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 2
13052: PUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 25
13065: PUSH
13066: LD_INT 2
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 25
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 25
13085: PUSH
13086: LD_INT 4
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 69
13109: PUSH
13110: LD_EXP 1
13114: PUSH
13115: LD_EXP 5
13119: PUSH
13120: LD_EXP 2
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: DIFF
13130: PPUSH
13131: LD_STRING D10-Sol1-1
13133: PPUSH
13134: LD_STRING D10-FSol1-1
13136: PPUSH
13137: CALL 5726 0 3
// Say ( Frank , D10-Frank-2 ) ;
13141: LD_EXP 5
13145: PPUSH
13146: LD_STRING D10-Frank-2
13148: PPUSH
13149: CALL_OW 88
// if IsOK ( Lisa ) then
13153: LD_EXP 2
13157: PPUSH
13158: CALL_OW 302
13162: IFFALSE 13178
// begin Say ( Lisa , D10-Lisa-2 ) ;
13164: LD_EXP 2
13168: PPUSH
13169: LD_STRING D10-Lisa-2
13171: PPUSH
13172: CALL_OW 88
// end else
13176: GO 13283
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13178: LD_INT 22
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 21
13190: PUSH
13191: LD_INT 1
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 2
13200: PUSH
13201: LD_INT 25
13203: PUSH
13204: LD_INT 1
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 25
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 25
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 25
13233: PUSH
13234: LD_INT 4
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: PPUSH
13253: CALL_OW 69
13257: PUSH
13258: LD_EXP 1
13262: PUSH
13263: LD_EXP 5
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: DIFF
13272: PPUSH
13273: LD_STRING D10-Sol1-2
13275: PPUSH
13276: LD_STRING D10-FSol1-2
13278: PPUSH
13279: CALL 5726 0 3
// end ; DialogueOff ;
13283: CALL_OW 7
// end ;
13287: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 463
13295: NOT
13296: IFFALSE 13559
13298: GO 13300
13300: DISABLE
// begin HarrisonSupport ;
13301: CALL 2218 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13305: LD_EXP 17
13309: PPUSH
13310: CALL_OW 310
13314: PPUSH
13315: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13319: LD_EXP 17
13323: PPUSH
13324: LD_STRING DEng-Eng1-1
13326: PPUSH
13327: CALL_OW 88
// wait ( 1 1$0 ) ;
13331: LD_INT 2100
13333: PPUSH
13334: CALL_OW 67
// DialogueOn ;
13338: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13342: LD_EXP 14
13346: PPUSH
13347: LD_STRING DRem-Har-1
13349: PPUSH
13350: CALL_OW 94
// if contactWithRussian = 1 then
13354: LD_EXP 22
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: IFFALSE 13378
// begin Say ( JMM , DRem-JMM-1 ) ;
13364: LD_EXP 1
13368: PPUSH
13369: LD_STRING DRem-JMM-1
13371: PPUSH
13372: CALL_OW 88
// end else
13376: GO 13390
// begin Say ( JMM , DRem-JMM-1a ) ;
13378: LD_EXP 1
13382: PPUSH
13383: LD_STRING DRem-JMM-1a
13385: PPUSH
13386: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13390: LD_EXP 14
13394: PPUSH
13395: LD_STRING DRem-Har-2
13397: PPUSH
13398: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13402: LD_STRING DenisInDelta
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 30
13412: PUSH
13413: LD_INT 1
13415: EQUAL
13416: IFFALSE 13432
// begin Say ( JMM , DRem-JMM-2 ) ;
13418: LD_EXP 1
13422: PPUSH
13423: LD_STRING DRem-JMM-2
13425: PPUSH
13426: CALL_OW 88
// end else
13430: GO 13444
// begin Say ( JMM , DRem-JMM-2a ) ;
13432: LD_EXP 1
13436: PPUSH
13437: LD_STRING DRem-JMM-2a
13439: PPUSH
13440: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13444: LD_EXP 14
13448: PPUSH
13449: LD_STRING DRem-Har-3
13451: PPUSH
13452: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13456: LD_EXP 1
13460: PPUSH
13461: LD_STRING DRem-JMM-3
13463: PPUSH
13464: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13468: LD_EXP 14
13472: PPUSH
13473: LD_STRING DRem-Har-4
13475: PPUSH
13476: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13480: LD_STRING DenisInDelta
13482: PPUSH
13483: LD_INT 0
13485: PPUSH
13486: CALL_OW 30
13490: PUSH
13491: LD_INT 1
13493: EQUAL
13494: IFFALSE 13522
// begin Say ( JMM , DRem-JMM-4 ) ;
13496: LD_EXP 1
13500: PPUSH
13501: LD_STRING DRem-JMM-4
13503: PPUSH
13504: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13508: LD_EXP 14
13512: PPUSH
13513: LD_STRING DRem-Har-5
13515: PPUSH
13516: CALL_OW 94
// end else
13520: GO 13555
// begin SetRestrict ( 36 , 1 , true ) ;
13522: LD_INT 36
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13535: LD_INT 15
13537: PPUSH
13538: LD_INT 1
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13548: LD_STRING MR
13550: PPUSH
13551: CALL_OW 337
// end ; DialogueOff ;
13555: CALL_OW 7
// end ;
13559: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13560: LD_STRING DenisInDelta
13562: PPUSH
13563: LD_INT 0
13565: PPUSH
13566: CALL_OW 30
13570: PUSH
13571: LD_INT 1
13573: EQUAL
13574: PUSH
13575: LD_INT 1
13577: PPUSH
13578: CALL_OW 463
13582: NOT
13583: AND
13584: IFFALSE 13817
13586: GO 13588
13588: DISABLE
13589: LD_INT 0
13591: PPUSH
// begin PrepareDenis ;
13592: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13596: LD_EXP 9
13600: PPUSH
13601: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13605: LD_ADDR_VAR 0 1
13609: PUSH
13610: LD_INT 22
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13625: LD_EXP 9
13629: PPUSH
13630: LD_VAR 0 1
13634: PPUSH
13635: LD_EXP 9
13639: PPUSH
13640: CALL_OW 74
13644: PPUSH
13645: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13649: LD_INT 35
13651: PPUSH
13652: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13656: LD_INT 22
13658: PUSH
13659: LD_INT 1
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 91
13668: PUSH
13669: LD_EXP 9
13673: PUSH
13674: LD_INT 10
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: IFFALSE 13649
// SetSide ( Denis , 1 ) ;
13692: LD_EXP 9
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 235
// DialogueOn ;
13704: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13708: LD_EXP 9
13712: PPUSH
13713: LD_STRING DDen-Den-1
13715: PPUSH
13716: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13720: LD_EXP 1
13724: PPUSH
13725: LD_STRING DDen-JMM-1
13727: PPUSH
13728: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13732: LD_EXP 9
13736: PPUSH
13737: LD_STRING DDen-Den-2
13739: PPUSH
13740: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13744: LD_EXP 1
13748: PPUSH
13749: LD_STRING DDen-JMM-2
13751: PPUSH
13752: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13756: LD_EXP 9
13760: PPUSH
13761: LD_STRING DDen-Den-3
13763: PPUSH
13764: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13768: LD_EXP 1
13772: PPUSH
13773: LD_STRING DDen-JMM-3
13775: PPUSH
13776: CALL_OW 88
// DialogueOff ;
13780: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13784: LD_INT 36
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13797: LD_INT 15
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13810: LD_STRING MR
13812: PPUSH
13813: CALL_OW 337
// end ;
13817: PPOPN 1
13819: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13820: CALL 13875 0 0
13824: PUSH
13825: LD_EXP 9
13829: PPUSH
13830: CALL_OW 302
13834: AND
13835: PUSH
13836: LD_INT 1
13838: PPUSH
13839: CALL_OW 463
13843: NOT
13844: AND
13845: IFFALSE 13874
13847: GO 13849
13849: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13850: LD_EXP 9
13854: PPUSH
13855: LD_STRING DR1-Den-1
13857: PPUSH
13858: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13862: LD_EXP 1
13866: PPUSH
13867: LD_STRING DR1-JMM-1
13869: PPUSH
13870: CALL_OW 88
// end ;
13874: END
// function CheckOptoLab ; var i ; begin
13875: LD_INT 0
13877: PPUSH
13878: PPUSH
// result = false ;
13879: LD_ADDR_VAR 0 1
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 2
13904: PUSH
13905: LD_INT 30
13907: PUSH
13908: LD_INT 7
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: LD_INT 8
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: PUSH
13939: FOR_IN
13940: IFFALSE 13992
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13942: LD_VAR 0 2
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 268
13954: PUSH
13955: LD_INT 15
13957: EQUAL
13958: PUSH
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_INT 2
13966: PPUSH
13967: CALL_OW 268
13971: PUSH
13972: LD_INT 15
13974: EQUAL
13975: OR
13976: IFFALSE 13988
// begin result = true ;
13978: LD_ADDR_VAR 0 1
13982: PUSH
13983: LD_INT 1
13985: ST_TO_ADDR
// break ;
13986: GO 13992
// end ; break ;
13988: GO 13992
// end ;
13990: GO 13939
13992: POP
13993: POP
// end ;
13994: LD_VAR 0 1
13998: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
13999: LD_INT 15
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 321
14009: PUSH
14010: LD_INT 2
14012: EQUAL
14013: PUSH
14014: LD_EXP 9
14018: PPUSH
14019: CALL_OW 302
14023: AND
14024: PUSH
14025: LD_INT 1
14027: PPUSH
14028: CALL_OW 463
14032: NOT
14033: AND
14034: IFFALSE 14266
14036: GO 14038
14038: DISABLE
// begin DialogueOn ;
14039: CALL_OW 6
// if IsOK ( Denis ) then
14043: LD_EXP 9
14047: PPUSH
14048: CALL_OW 302
14052: IFFALSE 14068
// begin Say ( Denis , DR2-Den-1 ) ;
14054: LD_EXP 9
14058: PPUSH
14059: LD_STRING DR2-Den-1
14061: PPUSH
14062: CALL_OW 88
// end else
14066: GO 14127
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14068: LD_INT 22
14070: PUSH
14071: LD_INT 1
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 1
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 25
14090: PUSH
14091: LD_INT 4
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: PUSH
14108: LD_EXP 1
14112: PUSH
14113: EMPTY
14114: LIST
14115: DIFF
14116: PPUSH
14117: LD_STRING DR2-Sci1-1
14119: PPUSH
14120: LD_STRING DR2-FSci1-1
14122: PPUSH
14123: CALL 5726 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14127: LD_EXP 1
14131: PPUSH
14132: LD_STRING DR2-JMM-1
14134: PPUSH
14135: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14139: LD_INT 22
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 21
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 2
14161: PUSH
14162: LD_INT 25
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 25
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 25
14184: PUSH
14185: LD_INT 3
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 25
14194: PUSH
14195: LD_INT 4
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PPUSH
14214: CALL_OW 69
14218: PUSH
14219: LD_EXP 1
14223: PUSH
14224: LD_EXP 9
14228: PUSH
14229: LD_EXP 8
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: DIFF
14239: PPUSH
14240: LD_STRING DR2-Sol1-1
14242: PPUSH
14243: LD_STRING DR2-Sol1-11
14245: PPUSH
14246: CALL 5726 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14250: LD_EXP 1
14254: PPUSH
14255: LD_STRING DR2-JMM-2
14257: PPUSH
14258: CALL_OW 88
// DialogueOff ;
14262: CALL_OW 7
// end ;
14266: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14267: LD_INT 22
14269: PUSH
14270: LD_INT 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 30
14279: PUSH
14280: LD_INT 36
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_INT 0
14298: EQUAL
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 21
14312: PUSH
14313: LD_INT 2
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 33
14322: PUSH
14323: LD_INT 2
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 69
14339: PUSH
14340: LD_INT 0
14342: GREATER
14343: AND
14344: PUSH
14345: LD_EXP 23
14349: PUSH
14350: LD_INT 0
14352: EQUAL
14353: AND
14354: PUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 463
14362: NOT
14363: AND
14364: IFFALSE 14490
14366: GO 14368
14368: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14369: LD_INT 22
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 21
14381: PUSH
14382: LD_INT 1
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 3
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: PUSH
14409: LD_EXP 1
14413: PUSH
14414: LD_EXP 6
14418: PUSH
14419: LD_EXP 7
14423: PUSH
14424: LD_EXP 9
14428: PUSH
14429: LD_EXP 15
14433: PUSH
14434: LD_EXP 3
14438: PUSH
14439: LD_EXP 4
14443: PUSH
14444: LD_EXP 2
14448: PUSH
14449: LD_EXP 5
14453: PUSH
14454: LD_EXP 8
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: DIFF
14471: PPUSH
14472: LD_STRING D3a-Mech1-1
14474: PPUSH
14475: LD_STRING D3a-Mech1-1
14477: PPUSH
14478: CALL 5726 0 3
// firstTower = 2 ;
14482: LD_ADDR_EXP 23
14486: PUSH
14487: LD_INT 2
14489: ST_TO_ADDR
// end ;
14490: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14491: LD_INT 22
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 21
14503: PUSH
14504: LD_INT 3
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: PUSH
14520: LD_INT 0
14522: EQUAL
14523: IFFALSE 14638
14525: GO 14527
14527: DISABLE
14528: LD_INT 0
14530: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14531: LD_ADDR_VAR 0 1
14535: PUSH
14536: LD_INT 22
14538: PUSH
14539: LD_INT 1
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 25
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 25
14571: PUSH
14572: LD_INT 2
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: LD_INT 25
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 25
14591: PUSH
14592: LD_INT 4
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PPUSH
14611: CALL_OW 69
14615: PUSH
14616: FOR_IN
14617: IFFALSE 14636
// AddExperience ( i , 1 , 10000 ) ;
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: LD_INT 10000
14629: PPUSH
14630: CALL_OW 492
14634: GO 14616
14636: POP
14637: POP
// end ;
14638: PPOPN 1
14640: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14641: LD_INT 22
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 30
14653: PUSH
14654: LD_INT 36
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 69
14669: PUSH
14670: LD_INT 0
14672: GREATER
14673: PUSH
14674: LD_INT 22
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 33
14696: PUSH
14697: LD_INT 2
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: PUSH
14714: LD_INT 0
14716: GREATER
14717: AND
14718: PUSH
14719: CALL 15311 0 0
14723: AND
14724: PUSH
14725: LD_INT 1
14727: PPUSH
14728: CALL_OW 463
14732: NOT
14733: AND
14734: IFFALSE 15308
14736: GO 14738
14738: DISABLE
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14746: LD_ADDR_VAR 0 3
14750: PUSH
14751: LD_INT 22
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 30
14763: PUSH
14764: LD_INT 36
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14780: LD_ADDR_VAR 0 4
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 21
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 33
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 69
14824: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14825: LD_ADDR_VAR 0 5
14829: PUSH
14830: EMPTY
14831: ST_TO_ADDR
// for i in tmpControlTowers do
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_VAR 0 3
14841: PUSH
14842: FOR_IN
14843: IFFALSE 15306
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14845: LD_EXP 1
14849: PPUSH
14850: CALL_OW 310
14854: PUSH
14855: LD_VAR 0 1
14859: EQUAL
14860: PUSH
14861: LD_EXP 1
14865: PPUSH
14866: CALL_OW 257
14870: PUSH
14871: LD_INT 3
14873: EQUAL
14874: AND
14875: IFFALSE 15005
// begin InGameOn ;
14877: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14881: LD_VAR 0 4
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PPUSH
14890: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14894: LD_EXP 1
14898: PPUSH
14899: LD_STRING D4a-JMM-1
14901: PPUSH
14902: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14906: LD_VAR 0 4
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_EXP 1
14919: PPUSH
14920: CALL_OW 53
// wait ( 0 0$1 ) ;
14924: LD_INT 35
14926: PPUSH
14927: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14931: LD_VAR 0 4
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: LD_VAR 0 4
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: CALL_OW 250
14953: PUSH
14954: LD_INT 3
14956: PLUS
14957: PPUSH
14958: LD_VAR 0 4
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: CALL_OW 251
14971: PUSH
14972: LD_INT 2
14974: MINUS
14975: PPUSH
14976: CALL_OW 111
// wait ( 0 0$2 ) ;
14980: LD_INT 70
14982: PPUSH
14983: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14987: LD_EXP 1
14991: PPUSH
14992: LD_STRING D4b-JMM-1
14994: PPUSH
14995: CALL_OW 88
// InGameOff ;
14999: CALL_OW 9
// end else
15003: GO 15304
// begin InGameOn ;
15005: CALL_OW 8
// for j in UnitsInside ( i ) do
15009: LD_ADDR_VAR 0 2
15013: PUSH
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 313
15023: PUSH
15024: FOR_IN
15025: IFFALSE 15060
// if GetClass ( j ) = 3 then
15027: LD_VAR 0 2
15031: PPUSH
15032: CALL_OW 257
15036: PUSH
15037: LD_INT 3
15039: EQUAL
15040: IFFALSE 15058
// tmpMechanicInside = tmpMechanicInside ^ j ;
15042: LD_ADDR_VAR 0 5
15046: PUSH
15047: LD_VAR 0 5
15051: PUSH
15052: LD_VAR 0 2
15056: ADD
15057: ST_TO_ADDR
15058: GO 15024
15060: POP
15061: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15062: LD_VAR 0 5
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 258
15075: PUSH
15076: LD_INT 1
15078: EQUAL
15079: IFFALSE 15097
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15081: LD_VAR 0 5
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PPUSH
15090: LD_STRING D4a-Mech1-1
15092: PPUSH
15093: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15097: LD_VAR 0 5
15101: PUSH
15102: LD_INT 1
15104: ARRAY
15105: PPUSH
15106: CALL_OW 258
15110: PUSH
15111: LD_INT 2
15113: EQUAL
15114: IFFALSE 15132
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15116: LD_VAR 0 5
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_STRING D4a-FMech1-1
15127: PPUSH
15128: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15132: LD_VAR 0 4
15136: PUSH
15137: LD_INT 1
15139: ARRAY
15140: PPUSH
15141: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15145: LD_VAR 0 4
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: PPUSH
15154: LD_VAR 0 5
15158: PUSH
15159: LD_INT 1
15161: ARRAY
15162: PPUSH
15163: CALL_OW 53
// wait ( 0 0$1 ) ;
15167: LD_INT 35
15169: PPUSH
15170: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15174: LD_VAR 0 4
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: LD_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ARRAY
15191: PPUSH
15192: CALL_OW 250
15196: PUSH
15197: LD_INT 3
15199: PLUS
15200: PPUSH
15201: LD_VAR 0 4
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL_OW 251
15214: PUSH
15215: LD_INT 2
15217: MINUS
15218: PPUSH
15219: CALL_OW 111
// wait ( 0 0$2 ) ;
15223: LD_INT 70
15225: PPUSH
15226: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15230: LD_VAR 0 5
15234: PUSH
15235: LD_INT 1
15237: ARRAY
15238: PPUSH
15239: CALL_OW 258
15243: PUSH
15244: LD_INT 1
15246: EQUAL
15247: IFFALSE 15265
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15249: LD_VAR 0 5
15253: PUSH
15254: LD_INT 1
15256: ARRAY
15257: PPUSH
15258: LD_STRING D4b-Mech1-1
15260: PPUSH
15261: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15265: LD_VAR 0 5
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 258
15278: PUSH
15279: LD_INT 2
15281: EQUAL
15282: IFFALSE 15300
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15284: LD_VAR 0 5
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PPUSH
15293: LD_STRING D4b-FMech1-1
15295: PPUSH
15296: CALL_OW 88
// InGameOff ;
15300: CALL_OW 9
// end ; end ;
15304: GO 14842
15306: POP
15307: POP
// end ;
15308: PPOPN 5
15310: END
// function CheckMehInside ; var i , j ; begin
15311: LD_INT 0
15313: PPUSH
15314: PPUSH
15315: PPUSH
// result = false ;
15316: LD_ADDR_VAR 0 1
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 36
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: PUSH
15358: FOR_IN
15359: IFFALSE 15410
// begin for j in UnitsInside ( i ) do
15361: LD_ADDR_VAR 0 3
15365: PUSH
15366: LD_VAR 0 2
15370: PPUSH
15371: CALL_OW 313
15375: PUSH
15376: FOR_IN
15377: IFFALSE 15406
// begin if GetClass ( j ) = 3 then
15379: LD_VAR 0 3
15383: PPUSH
15384: CALL_OW 257
15388: PUSH
15389: LD_INT 3
15391: EQUAL
15392: IFFALSE 15404
// begin result = true ;
15394: LD_ADDR_VAR 0 1
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// break ;
15402: GO 15406
// end ; end ;
15404: GO 15376
15406: POP
15407: POP
// end ;
15408: GO 15358
15410: POP
15411: POP
// end ;
15412: LD_VAR 0 1
15416: RET
// every 25 25$0 do
15417: GO 15419
15419: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15420: LD_INT 35
15422: PPUSH
15423: CALL_OW 67
// until not InBattle ( 1 ) ;
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 463
15434: NOT
15435: IFFALSE 15420
// PrepareKurt ;
15437: CALL 18883 0 0
// end ;
15441: END
// every 35 35$0 do
15442: GO 15444
15444: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15445: LD_INT 35
15447: PPUSH
15448: CALL_OW 67
// until not InBattle ( 1 ) ;
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 463
15459: NOT
15460: IFFALSE 15445
// PrepareJoan ;
15462: CALL 2736 0 0
// wait ( 1 1$0 ) ;
15466: LD_INT 2100
15468: PPUSH
15469: CALL_OW 67
// if IsOK ( Lisa ) then
15473: LD_EXP 2
15477: PPUSH
15478: CALL_OW 302
15482: IFFALSE 15612
// begin DialogueOn ;
15484: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15488: LD_EXP 2
15492: PPUSH
15493: LD_STRING D7-Lisa-1
15495: PPUSH
15496: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15500: LD_EXP 1
15504: PPUSH
15505: LD_STRING D7-JMM-1
15507: PPUSH
15508: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15512: LD_EXP 2
15516: PPUSH
15517: LD_STRING D7-Lisa-2
15519: PPUSH
15520: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15524: LD_EXP 1
15528: PPUSH
15529: LD_STRING D7-JMM-2
15531: PPUSH
15532: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15536: LD_EXP 2
15540: PPUSH
15541: LD_STRING D7-Lisa-3
15543: PPUSH
15544: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15548: LD_EXP 1
15552: PPUSH
15553: LD_STRING D7-JMM-3
15555: PPUSH
15556: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15560: LD_EXP 2
15564: PPUSH
15565: LD_STRING D7-Lisa-4
15567: PPUSH
15568: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15572: LD_EXP 1
15576: PPUSH
15577: LD_STRING D7-JMM-4
15579: PPUSH
15580: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15584: LD_EXP 1
15588: PPUSH
15589: LD_STRING D7-JMM-4a
15591: PPUSH
15592: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15596: LD_EXP 2
15600: PPUSH
15601: LD_STRING D7-Lisa-5
15603: PPUSH
15604: CALL_OW 88
// DialogueOff ;
15608: CALL_OW 7
// end ; end ;
15612: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15613: LD_EXP 13
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_INT 1
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 91
15630: PUSH
15631: LD_EXP 13
15635: PUSH
15636: LD_INT 10
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: LD_INT 25
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 25
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 25
15669: PUSH
15670: LD_INT 3
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: LD_INT 25
15679: PUSH
15680: LD_INT 4
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: PPUSH
15699: CALL_OW 69
15703: PUSH
15704: LD_INT 1
15706: GREATER
15707: AND
15708: IFFALSE 15725
15710: GO 15712
15712: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15713: LD_EXP 13
15717: PPUSH
15718: LD_STRING D5-Sol1-1
15720: PPUSH
15721: CALL_OW 88
// end ;
15725: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15726: LD_INT 22
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 33
15738: PUSH
15739: LD_INT 2
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 69
15754: PUSH
15755: LD_INT 2
15757: GREATEREQUAL
15758: IFFALSE 15778
15760: GO 15762
15762: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15763: LD_STRING MRa
15765: PPUSH
15766: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15770: LD_ADDR_EXP 28
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// end ;
15778: END
// every 0 0$10 do var i , last ;
15779: GO 15781
15781: DISABLE
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
// begin last := 7 ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_INT 7
15793: ST_TO_ADDR
// for i = 1 to last do
15794: LD_ADDR_VAR 0 1
15798: PUSH
15799: DOUBLE
15800: LD_INT 1
15802: DEC
15803: ST_TO_ADDR
15804: LD_VAR 0 2
15808: PUSH
15809: FOR_TO
15810: IFFALSE 15838
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15812: LD_INT 6300
15814: PPUSH
15815: LD_INT 14700
15817: PPUSH
15818: CALL_OW 12
15822: PPUSH
15823: CALL_OW 67
// PrepareRandoms ( i ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: CALL 3772 0 1
// end ;
15836: GO 15809
15838: POP
15839: POP
// end ;
15840: PPOPN 2
15842: END
// every 5 5$20 do
15843: GO 15845
15845: DISABLE
// begin DialogueOn ;
15846: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15850: LD_EXP 10
15854: PPUSH
15855: LD_STRING D12a-Sci-1
15857: PPUSH
15858: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15862: LD_EXP 1
15866: PPUSH
15867: LD_STRING D12a-JMM-1
15869: PPUSH
15870: CALL_OW 88
// DialogueOff ;
15874: CALL_OW 7
// cratesStatus = 1 ;
15878: LD_ADDR_EXP 38
15882: PUSH
15883: LD_INT 1
15885: ST_TO_ADDR
// end ;
15886: END
// every 13 13$0 do
15887: GO 15889
15889: DISABLE
// begin DialogueOn ;
15890: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15894: LD_EXP 10
15898: PPUSH
15899: LD_STRING D12b-Sci-1
15901: PPUSH
15902: CALL_OW 94
// DialogueOff ;
15906: CALL_OW 7
// cratesStatus = 2 ;
15910: LD_ADDR_EXP 38
15914: PUSH
15915: LD_INT 2
15917: ST_TO_ADDR
// end ;
15918: END
// every 32 32$0 do
15919: GO 15921
15921: DISABLE
// begin DialogueOn ;
15922: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15926: LD_EXP 10
15930: PPUSH
15931: LD_STRING D12c-Sci-1
15933: PPUSH
15934: CALL_OW 94
// DialogueOff ;
15938: CALL_OW 7
// wait ( 3 3$0 ) ;
15942: LD_INT 6300
15944: PPUSH
15945: CALL_OW 67
// DialogueOn ;
15949: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15953: LD_EXP 10
15957: PPUSH
15958: LD_STRING D12d-Sci-1
15960: PPUSH
15961: CALL_OW 94
// DialogueOff ;
15965: CALL_OW 7
// cratesStatus = 1 ;
15969: LD_ADDR_EXP 38
15973: PUSH
15974: LD_INT 1
15976: ST_TO_ADDR
// end ;
15977: END
// every 42 42$0 do
15978: GO 15980
15980: DISABLE
// begin DialogueOn ;
15981: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15985: LD_EXP 10
15989: PPUSH
15990: LD_STRING D12e-Sci-1
15992: PPUSH
15993: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15997: LD_EXP 1
16001: PPUSH
16002: LD_STRING D12e-JMM-1
16004: PPUSH
16005: CALL_OW 88
// DialogueOff ;
16009: CALL_OW 7
// cratesStatus = 2 ;
16013: LD_ADDR_EXP 38
16017: PUSH
16018: LD_INT 2
16020: ST_TO_ADDR
// end ;
16021: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16022: LD_INT 22
16024: PUSH
16025: LD_INT 6
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 34
16044: PUSH
16045: LD_INT 51
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: PUSH
16062: LD_INT 0
16064: GREATER
16065: IFFALSE 16148
16067: GO 16069
16069: DISABLE
16070: LD_INT 0
16072: PPUSH
// begin enable ;
16073: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16074: LD_ADDR_VAR 0 1
16078: PUSH
16079: LD_INT 22
16081: PUSH
16082: LD_INT 6
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 2
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 21
16104: PUSH
16105: LD_INT 2
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 69
16125: PUSH
16126: FOR_IN
16127: IFFALSE 16146
// ComAgressiveMove ( i , 138 , 168 ) ;
16129: LD_VAR 0 1
16133: PPUSH
16134: LD_INT 138
16136: PPUSH
16137: LD_INT 168
16139: PPUSH
16140: CALL_OW 114
16144: GO 16126
16146: POP
16147: POP
// end ;
16148: PPOPN 1
16150: END
// every 0 0$1 do var i ;
16151: GO 16153
16153: DISABLE
16154: LD_INT 0
16156: PPUSH
// begin enable ;
16157: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16158: LD_ADDR_VAR 0 1
16162: PUSH
16163: LD_INT 4
16165: PPUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 22
16171: PUSH
16172: LD_INT 3
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 22
16181: PUSH
16182: LD_INT 6
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: PPUSH
16197: CALL_OW 70
16201: PUSH
16202: FOR_IN
16203: IFFALSE 16267
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16205: LD_INT 4
16207: PPUSH
16208: LD_INT 22
16210: PUSH
16211: LD_INT 6
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 34
16220: PUSH
16221: LD_INT 51
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PPUSH
16232: CALL_OW 70
16236: PUSH
16237: LD_INT 0
16239: GREATER
16240: IFFALSE 16256
// sendedConvoys = sendedConvoys + 1 ;
16242: LD_ADDR_EXP 39
16246: PUSH
16247: LD_EXP 39
16251: PUSH
16252: LD_INT 1
16254: PLUS
16255: ST_TO_ADDR
// RemoveUnit ( i ) ;
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 64
// end ;
16265: GO 16202
16267: POP
16268: POP
// end ; end_of_file
16269: PPOPN 1
16271: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 1
16279: EQUAL
16280: PUSH
16281: LD_VAR 0 2
16285: PUSH
16286: LD_INT 3
16288: EQUAL
16289: AND
16290: IFFALSE 16300
// contactWithRussian = 1 ;
16292: LD_ADDR_EXP 22
16296: PUSH
16297: LD_INT 1
16299: ST_TO_ADDR
// end ;
16300: PPOPN 2
16302: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16303: LD_VAR 0 1
16307: PPUSH
16308: CALL_OW 266
16312: PUSH
16313: LD_INT 36
16315: EQUAL
16316: PUSH
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 255
16326: PUSH
16327: LD_INT 1
16329: EQUAL
16330: AND
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 21
16344: PUSH
16345: LD_INT 2
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 33
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: PPUSH
16367: CALL_OW 69
16371: PUSH
16372: LD_INT 0
16374: EQUAL
16375: AND
16376: PUSH
16377: LD_EXP 23
16381: PUSH
16382: LD_INT 0
16384: EQUAL
16385: AND
16386: IFFALSE 16466
// begin firstTower = 1 ;
16388: LD_ADDR_EXP 23
16392: PUSH
16393: LD_INT 1
16395: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16396: LD_INT 22
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 25
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 26
16428: PUSH
16429: LD_INT 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PPUSH
16442: CALL_OW 69
16446: PUSH
16447: LD_EXP 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: DIFF
16455: PPUSH
16456: LD_STRING D3b-Mech1-1
16458: PPUSH
16459: LD_STRING D3b-Mech1-1
16461: PPUSH
16462: CALL 5726 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16466: LD_VAR 0 1
16470: PPUSH
16471: CALL_OW 266
16475: PUSH
16476: LD_INT 0
16478: EQUAL
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 255
16489: PUSH
16490: LD_INT 1
16492: EQUAL
16493: AND
16494: IFFALSE 16508
// SetBName ( building , theta ) ;
16496: LD_VAR 0 1
16500: PPUSH
16501: LD_STRING theta
16503: PPUSH
16504: CALL_OW 500
// if GetSide ( building ) = 3 then
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: LD_INT 3
16520: EQUAL
16521: IFFALSE 16595
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16523: LD_ADDR_EXP 31
16527: PUSH
16528: LD_EXP 31
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 3
16540: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16541: LD_ADDR_EXP 31
16545: PUSH
16546: LD_EXP 31
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 3
16558: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16559: LD_ADDR_EXP 31
16563: PUSH
16564: LD_EXP 31
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 3
16576: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16577: LD_ADDR_EXP 31
16581: PUSH
16582: LD_EXP 31
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 3
16594: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 255
16604: PUSH
16605: LD_INT 3
16607: EQUAL
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 266
16618: PUSH
16619: LD_INT 0
16621: EQUAL
16622: PUSH
16623: LD_VAR 0 1
16627: PPUSH
16628: CALL_OW 266
16632: PUSH
16633: LD_INT 2
16635: EQUAL
16636: OR
16637: PUSH
16638: LD_VAR 0 1
16642: PPUSH
16643: CALL_OW 266
16647: PUSH
16648: LD_INT 4
16650: EQUAL
16651: OR
16652: PUSH
16653: EMPTY
16654: LIST
16655: AND
16656: IFFALSE 16667
// ComUpgrade ( building ) ;
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 255
16676: PUSH
16677: LD_INT 3
16679: EQUAL
16680: PUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 266
16690: PUSH
16691: LD_INT 32
16693: EQUAL
16694: AND
16695: IFFALSE 16736
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16697: LD_VAR 0 1
16701: PPUSH
16702: LD_INT 42
16704: PUSH
16705: LD_INT 43
16707: PUSH
16708: LD_INT 44
16710: PUSH
16711: LD_INT 46
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: PPUSH
16723: LD_INT 4
16725: PPUSH
16726: CALL_OW 12
16730: ARRAY
16731: PPUSH
16732: CALL_OW 208
// end ; end ;
16736: PPOPN 1
16738: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
16739: LD_VAR 0 1
16743: PUSH
16744: LD_EXP 15
16748: EQUAL
16749: IFFALSE 16759
// JoanStatus = 0 ;
16751: LD_ADDR_EXP 16
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16759: LD_VAR 0 1
16763: PPUSH
16764: CALL_OW 255
16768: PUSH
16769: LD_INT 1
16771: EQUAL
16772: PUSH
16773: LD_VAR 0 1
16777: PPUSH
16778: CALL_OW 247
16782: PUSH
16783: LD_INT 1
16785: EQUAL
16786: AND
16787: IFFALSE 16863
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16789: LD_VAR 0 1
16793: PPUSH
16794: CALL_OW 257
16798: PUSH
16799: LD_INT 1
16801: EQUAL
16802: PUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL_OW 257
16812: PUSH
16813: LD_INT 2
16815: EQUAL
16816: OR
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 257
16827: PUSH
16828: LD_INT 3
16830: EQUAL
16831: OR
16832: PUSH
16833: LD_VAR 0 1
16837: PPUSH
16838: CALL_OW 257
16842: PUSH
16843: LD_INT 4
16845: EQUAL
16846: OR
16847: IFFALSE 16863
// unitLost = unitLost + 1 ;
16849: LD_ADDR_EXP 30
16853: PUSH
16854: LD_EXP 30
16858: PUSH
16859: LD_INT 1
16861: PLUS
16862: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 255
16872: PUSH
16873: LD_INT 3
16875: EQUAL
16876: PUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 247
16886: PUSH
16887: LD_INT 3
16889: EQUAL
16890: AND
16891: IFFALSE 17583
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 266
16902: PUSH
16903: LD_INT 31
16905: EQUAL
16906: PUSH
16907: LD_VAR 0 1
16911: PPUSH
16912: CALL_OW 266
16916: PUSH
16917: LD_INT 32
16919: EQUAL
16920: OR
16921: PUSH
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 266
16931: PUSH
16932: LD_INT 36
16934: EQUAL
16935: OR
16936: PUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: CALL_OW 266
16946: PUSH
16947: LD_INT 0
16949: EQUAL
16950: OR
16951: PUSH
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 266
16961: PUSH
16962: LD_INT 24
16964: EQUAL
16965: OR
16966: PUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 266
16976: PUSH
16977: LD_INT 17
16979: EQUAL
16980: OR
16981: PUSH
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 266
16991: PUSH
16992: LD_INT 25
16994: EQUAL
16995: OR
16996: PUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 266
17006: PUSH
17007: LD_INT 19
17009: EQUAL
17010: OR
17011: PUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 266
17021: PUSH
17022: LD_INT 20
17024: EQUAL
17025: OR
17026: PUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 266
17036: PUSH
17037: LD_INT 18
17039: EQUAL
17040: OR
17041: PUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 266
17051: PUSH
17052: LD_INT 21
17054: EQUAL
17055: OR
17056: PUSH
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL_OW 266
17066: PUSH
17067: LD_INT 23
17069: EQUAL
17070: OR
17071: PUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 266
17081: PUSH
17082: LD_INT 16
17084: EQUAL
17085: OR
17086: PUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 266
17096: PUSH
17097: LD_INT 6
17099: EQUAL
17100: OR
17101: PUSH
17102: LD_VAR 0 1
17106: PPUSH
17107: CALL_OW 266
17111: PUSH
17112: LD_INT 29
17114: EQUAL
17115: OR
17116: PUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 266
17126: PUSH
17127: LD_INT 26
17129: EQUAL
17130: OR
17131: PUSH
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 266
17141: PUSH
17142: LD_INT 30
17144: EQUAL
17145: OR
17146: PUSH
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 266
17156: PUSH
17157: LD_INT 28
17159: EQUAL
17160: OR
17161: PUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 266
17171: PUSH
17172: LD_INT 27
17174: EQUAL
17175: OR
17176: PUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 266
17186: PUSH
17187: LD_INT 33
17189: EQUAL
17190: OR
17191: PUSH
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 266
17201: PUSH
17202: LD_INT 2
17204: EQUAL
17205: OR
17206: PUSH
17207: LD_VAR 0 1
17211: PPUSH
17212: CALL_OW 266
17216: PUSH
17217: LD_INT 4
17219: EQUAL
17220: OR
17221: IFFALSE 17307
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17223: LD_ADDR_EXP 31
17227: PUSH
17228: LD_EXP 31
17232: PUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 266
17242: ADD
17243: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17244: LD_ADDR_EXP 31
17248: PUSH
17249: LD_EXP 31
17253: PUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: CALL_OW 250
17263: ADD
17264: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17265: LD_ADDR_EXP 31
17269: PUSH
17270: LD_EXP 31
17274: PUSH
17275: LD_VAR 0 1
17279: PPUSH
17280: CALL_OW 251
17284: ADD
17285: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17286: LD_ADDR_EXP 31
17290: PUSH
17291: LD_EXP 31
17295: PUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 254
17305: ADD
17306: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 266
17316: PUSH
17317: LD_INT 1
17319: EQUAL
17320: IFFALSE 17399
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17322: LD_ADDR_EXP 31
17326: PUSH
17327: LD_EXP 31
17331: PUSH
17332: LD_INT 0
17334: ADD
17335: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17336: LD_ADDR_EXP 31
17340: PUSH
17341: LD_EXP 31
17345: PUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 250
17355: ADD
17356: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17357: LD_ADDR_EXP 31
17361: PUSH
17362: LD_EXP 31
17366: PUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL_OW 251
17376: ADD
17377: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17378: LD_ADDR_EXP 31
17382: PUSH
17383: LD_EXP 31
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 254
17397: ADD
17398: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 266
17408: PUSH
17409: LD_INT 3
17411: EQUAL
17412: IFFALSE 17491
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17414: LD_ADDR_EXP 31
17418: PUSH
17419: LD_EXP 31
17423: PUSH
17424: LD_INT 2
17426: ADD
17427: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17428: LD_ADDR_EXP 31
17432: PUSH
17433: LD_EXP 31
17437: PUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: CALL_OW 250
17447: ADD
17448: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17449: LD_ADDR_EXP 31
17453: PUSH
17454: LD_EXP 31
17458: PUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 251
17468: ADD
17469: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17470: LD_ADDR_EXP 31
17474: PUSH
17475: LD_EXP 31
17479: PUSH
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 254
17489: ADD
17490: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL_OW 266
17500: PUSH
17501: LD_INT 5
17503: EQUAL
17504: IFFALSE 17583
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17506: LD_ADDR_EXP 31
17510: PUSH
17511: LD_EXP 31
17515: PUSH
17516: LD_INT 4
17518: ADD
17519: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17520: LD_ADDR_EXP 31
17524: PUSH
17525: LD_EXP 31
17529: PUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 250
17539: ADD
17540: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17541: LD_ADDR_EXP 31
17545: PUSH
17546: LD_EXP 31
17550: PUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 251
17560: ADD
17561: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17562: LD_ADDR_EXP 31
17566: PUSH
17567: LD_EXP 31
17571: PUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 254
17581: ADD
17582: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 257
17592: PUSH
17593: LD_INT 3
17595: EQUAL
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: CALL_OW 255
17606: PUSH
17607: LD_INT 3
17609: EQUAL
17610: AND
17611: PUSH
17612: LD_INT 21
17614: PPUSH
17615: CALL_OW 302
17619: AND
17620: PUSH
17621: LD_INT 21
17623: PPUSH
17624: CALL_OW 255
17628: PUSH
17629: LD_INT 3
17631: EQUAL
17632: AND
17633: IFFALSE 17701
// begin uc_side = 3 ;
17635: LD_ADDR_OWVAR 20
17639: PUSH
17640: LD_INT 3
17642: ST_TO_ADDR
// uc_nation = 3 ;
17643: LD_ADDR_OWVAR 21
17647: PUSH
17648: LD_INT 3
17650: ST_TO_ADDR
// hc_gallery :=  ;
17651: LD_ADDR_OWVAR 33
17655: PUSH
17656: LD_STRING 
17658: ST_TO_ADDR
// hc_name :=  ;
17659: LD_ADDR_OWVAR 26
17663: PUSH
17664: LD_STRING 
17666: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17667: LD_INT 0
17669: PPUSH
17670: LD_EXP 34
17674: PPUSH
17675: LD_EXP 35
17679: PPUSH
17680: CALL_OW 12
17684: PPUSH
17685: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17689: CALL_OW 44
17693: PPUSH
17694: LD_INT 21
17696: PPUSH
17697: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL_OW 255
17710: PUSH
17711: LD_INT 3
17713: EQUAL
17714: PUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 264
17724: PUSH
17725: LD_INT 52
17727: EQUAL
17728: AND
17729: PUSH
17730: LD_INT 21
17732: PPUSH
17733: CALL_OW 302
17737: AND
17738: PUSH
17739: LD_INT 21
17741: PPUSH
17742: CALL_OW 255
17746: PUSH
17747: LD_INT 3
17749: EQUAL
17750: AND
17751: IFFALSE 17772
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17753: LD_INT 21
17755: PPUSH
17756: LD_INT 22
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: LD_INT 52
17767: PPUSH
17768: CALL_OW 125
// end ;
17772: PPOPN 1
17774: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17775: LD_INT 0
17777: PPUSH
17778: PPUSH
17779: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17780: LD_VAR 0 1
17784: PPUSH
17785: CALL_OW 264
17789: PUSH
17790: LD_INT 51
17792: EQUAL
17793: PUSH
17794: LD_VAR 0 1
17798: PPUSH
17799: CALL_OW 255
17803: PUSH
17804: LD_INT 3
17806: EQUAL
17807: AND
17808: IFFALSE 17870
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17810: LD_ADDR_VAR 0 5
17814: PUSH
17815: LD_INT 2
17817: PPUSH
17818: CALL_OW 274
17822: PPUSH
17823: LD_INT 1
17825: PPUSH
17826: CALL_OW 275
17830: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17831: LD_INT 2
17833: PPUSH
17834: CALL_OW 274
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_VAR 0 5
17846: PUSH
17847: LD_INT 100
17849: MINUS
17850: PPUSH
17851: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17855: LD_VAR 0 1
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: LD_INT 100
17865: PPUSH
17866: CALL_OW 291
// end ; if building = rufabsupp then
17870: LD_VAR 0 2
17874: PUSH
17875: LD_INT 17
17877: EQUAL
17878: IFFALSE 17892
// SetSide ( vehicle , 6 ) ;
17880: LD_VAR 0 1
17884: PPUSH
17885: LD_INT 6
17887: PPUSH
17888: CALL_OW 235
// end ;
17892: PPOPN 5
17894: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 255
17904: PUSH
17905: LD_INT 3
17907: EQUAL
17908: IFFALSE 17939
// begin tamedApemans = tamedApemans + 1 ;
17910: LD_ADDR_EXP 32
17914: PUSH
17915: LD_EXP 32
17919: PUSH
17920: LD_INT 1
17922: PLUS
17923: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17924: LD_VAR 0 1
17928: PPUSH
17929: LD_INT 106
17931: PPUSH
17932: LD_INT 85
17934: PPUSH
17935: CALL_OW 111
// end ; end ;
17939: PPOPN 2
17941: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17942: LD_INT 0
17944: PPUSH
17945: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17946: LD_VAR 0 1
17950: PPUSH
17951: CALL_OW 255
17955: PUSH
17956: LD_INT 3
17958: EQUAL
17959: PUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 247
17969: PUSH
17970: LD_INT 2
17972: EQUAL
17973: AND
17974: IFFALSE 18083
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 264
17985: PUSH
17986: LD_INT 42
17988: EQUAL
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 264
17999: PUSH
18000: LD_INT 43
18002: EQUAL
18003: OR
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 264
18014: PUSH
18015: LD_INT 44
18017: EQUAL
18018: OR
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 264
18029: PUSH
18030: LD_INT 46
18032: EQUAL
18033: OR
18034: IFFALSE 18083
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18036: LD_INT 21
18038: PPUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 265
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: CALL_OW 262
18058: PPUSH
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 263
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 264
18078: PPUSH
18079: CALL_OW 185
// end ;
18083: PPOPN 3
18085: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18086: LD_VAR 0 1
18090: PPUSH
18091: CALL_OW 255
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: PUSH
18100: LD_VAR 0 2
18104: PPUSH
18105: CALL_OW 255
18109: PUSH
18110: LD_INT 3
18112: EQUAL
18113: AND
18114: PUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 302
18124: AND
18125: IFFALSE 18167
// begin ComRepairVehicle ( human , vehicle ) ;
18127: LD_VAR 0 2
18131: PPUSH
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18141: LD_VAR 0 2
18145: PPUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18155: LD_VAR 0 1
18159: PPUSH
18160: LD_INT 100
18162: PPUSH
18163: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 255
18176: PUSH
18177: LD_INT 3
18179: EQUAL
18180: PUSH
18181: LD_VAR 0 2
18185: PPUSH
18186: CALL_OW 255
18190: PUSH
18191: LD_INT 3
18193: EQUAL
18194: AND
18195: PUSH
18196: LD_INT 21
18198: PPUSH
18199: CALL_OW 302
18203: AND
18204: PUSH
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 302
18214: NOT
18215: AND
18216: IFFALSE 18230
// ComEnterUnit ( human , rufab ) ;
18218: LD_VAR 0 2
18222: PPUSH
18223: LD_INT 21
18225: PPUSH
18226: CALL_OW 120
// end ;
18230: PPOPN 2
18232: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 21
18240: EQUAL
18241: PUSH
18242: LD_VAR 0 2
18246: PPUSH
18247: CALL_OW 255
18251: PUSH
18252: LD_INT 3
18254: EQUAL
18255: AND
18256: IFFALSE 18270
// SetLives ( human , 1000 ) ;
18258: LD_VAR 0 2
18262: PPUSH
18263: LD_INT 1000
18265: PPUSH
18266: CALL_OW 234
// end ; end_of_file
18270: PPOPN 2
18272: END
// every 0 0$30 trigger cratesStatus = 1 do
18273: LD_EXP 38
18277: PUSH
18278: LD_INT 1
18280: EQUAL
18281: IFFALSE 18364
18283: GO 18285
18285: DISABLE
// begin enable ;
18286: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18287: LD_INT 350
18289: PUSH
18290: LD_INT 1050
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: PPUSH
18300: LD_INT 2
18302: PPUSH
18303: CALL_OW 12
18307: ARRAY
18308: PPUSH
18309: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18313: LD_INT 4
18315: PUSH
18316: LD_INT 5
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PPUSH
18326: LD_INT 2
18328: PPUSH
18329: CALL_OW 12
18333: ARRAY
18334: PPUSH
18335: LD_INT 6
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_INT 2
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: CALL_OW 55
// end ;
18364: END
// every 1 1$0 trigger cratesStatus = 2 do
18365: LD_EXP 38
18369: PUSH
18370: LD_INT 2
18372: EQUAL
18373: IFFALSE 18456
18375: GO 18377
18377: DISABLE
// begin enable ;
18378: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18379: LD_INT 3150
18381: PUSH
18382: LD_INT 4550
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 1
18391: PPUSH
18392: LD_INT 2
18394: PPUSH
18395: CALL_OW 12
18399: ARRAY
18400: PPUSH
18401: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18405: LD_INT 2
18407: PUSH
18408: LD_INT 5
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 1
18417: PPUSH
18418: LD_INT 2
18420: PPUSH
18421: CALL_OW 12
18425: ARRAY
18426: PPUSH
18427: LD_INT 6
18429: PUSH
18430: LD_INT 7
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: PPUSH
18440: LD_INT 2
18442: PPUSH
18443: CALL_OW 12
18447: ARRAY
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 55
// end ;
18456: END
// every 0 0$30 + 0 0$10 do
18457: GO 18459
18459: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18460: LD_INT 4
18462: PUSH
18463: LD_INT 5
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: PPUSH
18473: LD_INT 2
18475: PPUSH
18476: CALL_OW 12
18480: ARRAY
18481: PPUSH
18482: LD_INT 7
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 55
// Wait ( 0 0$15 ) ;
18492: LD_INT 525
18494: PPUSH
18495: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18499: LD_INT 4
18501: PUSH
18502: LD_INT 5
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PPUSH
18512: LD_INT 2
18514: PPUSH
18515: CALL_OW 12
18519: ARRAY
18520: PPUSH
18521: LD_INT 7
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 55
// Wait ( 0 0$20 ) ;
18531: LD_INT 700
18533: PPUSH
18534: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18538: LD_INT 4
18540: PUSH
18541: LD_INT 5
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: PPUSH
18551: LD_INT 2
18553: PPUSH
18554: CALL_OW 12
18558: ARRAY
18559: PPUSH
18560: LD_INT 7
18562: PPUSH
18563: LD_INT 1
18565: PPUSH
18566: CALL_OW 55
// end ; end_of_file
18570: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18571: LD_EXP 24
18575: PUSH
18576: LD_INT 1
18578: EQUAL
18579: IFFALSE 18880
18581: GO 18583
18583: DISABLE
18584: LD_INT 0
18586: PPUSH
18587: PPUSH
18588: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_INT 22
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 21
18606: PUSH
18607: LD_INT 3
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: LD_INT 30
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 30
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: ST_TO_ADDR
// for i in tmp do
18652: LD_ADDR_VAR 0 1
18656: PUSH
18657: LD_VAR 0 2
18661: PUSH
18662: FOR_IN
18663: IFFALSE 18696
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18665: LD_ADDR_VAR 0 3
18669: PUSH
18670: LD_VAR 0 3
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 274
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 275
18692: PLUS
18693: ST_TO_ADDR
18694: GO 18662
18696: POP
18697: POP
// strings = [ ] ;
18698: LD_ADDR_EXP 27
18702: PUSH
18703: EMPTY
18704: ST_TO_ADDR
// if tmp = 0 then
18705: LD_VAR 0 2
18709: PUSH
18710: LD_INT 0
18712: EQUAL
18713: IFFALSE 18738
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18715: LD_ADDR_EXP 27
18719: PUSH
18720: LD_EXP 27
18724: PUSH
18725: LD_STRING #Am06-1
18727: PUSH
18728: LD_EXP 25
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: ADD
18737: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18738: LD_VAR 0 2
18742: PUSH
18743: LD_INT 0
18745: GREATER
18746: PUSH
18747: LD_EXP 25
18751: PUSH
18752: LD_VAR 0 3
18756: GREATER
18757: AND
18758: IFFALSE 18789
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18760: LD_ADDR_EXP 27
18764: PUSH
18765: LD_EXP 27
18769: PUSH
18770: LD_STRING #Am06-1
18772: PUSH
18773: LD_EXP 25
18777: PUSH
18778: LD_VAR 0 3
18782: MINUS
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: ADD
18788: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18789: LD_VAR 0 2
18793: PUSH
18794: LD_INT 0
18796: GREATER
18797: PUSH
18798: LD_EXP 25
18802: PUSH
18803: LD_VAR 0 3
18807: LESSEQUAL
18808: AND
18809: IFFALSE 18832
// strings = strings ^ [ #Am06-1 , 0 ] ;
18811: LD_ADDR_EXP 27
18815: PUSH
18816: LD_EXP 27
18820: PUSH
18821: LD_STRING #Am06-1
18823: PUSH
18824: LD_INT 0
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: ADD
18831: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18832: LD_ADDR_EXP 26
18836: PUSH
18837: LD_EXP 26
18841: PUSH
18842: LD_INT 35
18844: MINUS
18845: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18846: LD_ADDR_EXP 27
18850: PUSH
18851: LD_EXP 27
18855: PUSH
18856: LD_STRING #Am06-2
18858: PUSH
18859: LD_EXP 26
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: ADD
18868: ST_TO_ADDR
// display_strings = strings ;
18869: LD_ADDR_OWVAR 47
18873: PUSH
18874: LD_EXP 27
18878: ST_TO_ADDR
// enable ;
18879: ENABLE
// end ; end_of_file
18880: PPOPN 3
18882: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
18888: PPUSH
18889: PPUSH
18890: PPUSH
18891: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18892: LD_ADDR_VAR 0 3
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 1
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: LD_INT 30
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 30
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 69
18943: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18944: LD_INT 35
18946: PPUSH
18947: CALL_OW 67
// until depot ;
18951: LD_VAR 0 3
18955: IFFALSE 18892
// repeat wait ( 0 0$1 ) ;
18957: LD_INT 35
18959: PPUSH
18960: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
18964: LD_ADDR_VAR 0 4
18968: PUSH
18969: LD_INT 22
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 91
18981: PUSH
18982: LD_VAR 0 3
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: PUSH
18991: LD_INT 15
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 21
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 2
19011: PUSH
19012: LD_INT 25
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 25
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 25
19034: PUSH
19035: LD_INT 3
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 4
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 3
19061: PUSH
19062: LD_INT 54
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 55
19077: PUSH
19078: EMPTY
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: PPUSH
19093: CALL_OW 69
19097: PUSH
19098: LD_EXP 2
19102: PUSH
19103: LD_EXP 3
19107: PUSH
19108: LD_EXP 4
19112: PUSH
19113: LD_EXP 5
19117: PUSH
19118: LD_EXP 7
19122: PUSH
19123: LD_EXP 8
19127: PUSH
19128: LD_EXP 9
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: PUSH
19142: LD_EXP 46
19146: ADD
19147: DIFF
19148: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19149: LD_VAR 0 4
19153: PUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 463
19161: NOT
19162: AND
19163: IFFALSE 18957
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19165: LD_ADDR_VAR 0 4
19169: PUSH
19170: LD_VAR 0 4
19174: PUSH
19175: LD_INT 1
19177: PPUSH
19178: LD_VAR 0 4
19182: PPUSH
19183: CALL_OW 12
19187: ARRAY
19188: ST_TO_ADDR
// blockSpawn = 1 ;
19189: LD_ADDR_EXP 29
19193: PUSH
19194: LD_INT 1
19196: ST_TO_ADDR
// uc_side = 2 ;
19197: LD_ADDR_OWVAR 20
19201: PUSH
19202: LD_INT 2
19204: ST_TO_ADDR
// uc_nation = 2 ;
19205: LD_ADDR_OWVAR 21
19209: PUSH
19210: LD_INT 2
19212: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19213: LD_ADDR_EXP 19
19217: PUSH
19218: LD_STRING Kurt
19220: PPUSH
19221: LD_INT 0
19223: PPUSH
19224: CALL 5663 0 2
19228: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19229: LD_EXP 19
19233: PPUSH
19234: LD_VAR 0 4
19238: PPUSH
19239: CALL_OW 250
19243: PPUSH
19244: LD_VAR 0 4
19248: PPUSH
19249: CALL_OW 251
19253: PPUSH
19254: LD_INT 5
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 50
// InGameOn ;
19264: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19268: LD_EXP 19
19272: PPUSH
19273: CALL_OW 87
// wait ( 0 0$2 ) ;
19277: LD_INT 70
19279: PPUSH
19280: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19284: LD_EXP 19
19288: PPUSH
19289: LD_VAR 0 4
19293: PPUSH
19294: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19298: LD_VAR 0 4
19302: PPUSH
19303: LD_EXP 19
19307: PPUSH
19308: CALL_OW 112
// wait ( 0 0$1 ) ;
19312: LD_INT 35
19314: PPUSH
19315: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19319: LD_VAR 0 4
19323: PPUSH
19324: LD_EXP 19
19328: PPUSH
19329: CALL_OW 119
// DialogueOn ;
19333: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19337: LD_EXP 19
19341: PPUSH
19342: LD_STRING D2-Kurt-1
19344: PPUSH
19345: CALL_OW 88
// if tmp = JMM then
19349: LD_VAR 0 4
19353: PUSH
19354: LD_EXP 1
19358: EQUAL
19359: IFFALSE 19451
// begin Say ( JMM , D2-JMM-1 ) ;
19361: LD_EXP 1
19365: PPUSH
19366: LD_STRING D2-JMM-1
19368: PPUSH
19369: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19373: LD_EXP 19
19377: PPUSH
19378: LD_STRING D2-Kurt-2
19380: PPUSH
19381: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19385: LD_EXP 1
19389: PPUSH
19390: LD_STRING D2-JMM-2
19392: PPUSH
19393: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19397: LD_EXP 19
19401: PPUSH
19402: LD_STRING D2-Kurt-3
19404: PPUSH
19405: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19409: LD_EXP 1
19413: PPUSH
19414: LD_STRING D2-JMM-3
19416: PPUSH
19417: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19421: LD_EXP 19
19425: PPUSH
19426: LD_STRING D2-Kurt-4
19428: PPUSH
19429: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19433: LD_EXP 1
19437: PPUSH
19438: LD_STRING D2-JMM-4
19440: PPUSH
19441: CALL_OW 88
// DialogueOff ;
19445: CALL_OW 7
// end else
19449: GO 19761
// begin if GetSex ( tmp ) = 1 then
19451: LD_VAR 0 4
19455: PPUSH
19456: CALL_OW 258
19460: PUSH
19461: LD_INT 1
19463: EQUAL
19464: IFFALSE 19478
// Say ( tmp , D2-Sol1-1 ) ;
19466: LD_VAR 0 4
19470: PPUSH
19471: LD_STRING D2-Sol1-1
19473: PPUSH
19474: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19478: LD_VAR 0 4
19482: PPUSH
19483: CALL_OW 258
19487: PUSH
19488: LD_INT 2
19490: EQUAL
19491: IFFALSE 19505
// Say ( tmp , D2-FSol1-1 ) ;
19493: LD_VAR 0 4
19497: PPUSH
19498: LD_STRING D2-FSol1-1
19500: PPUSH
19501: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19505: LD_EXP 19
19509: PPUSH
19510: LD_STRING D2-Kurt-2
19512: PPUSH
19513: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19517: LD_VAR 0 4
19521: PPUSH
19522: CALL_OW 258
19526: PUSH
19527: LD_INT 1
19529: EQUAL
19530: IFFALSE 19544
// Say ( tmp , D2-Sol1-2 ) ;
19532: LD_VAR 0 4
19536: PPUSH
19537: LD_STRING D2-Sol1-2
19539: PPUSH
19540: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19544: LD_VAR 0 4
19548: PPUSH
19549: CALL_OW 258
19553: PUSH
19554: LD_INT 2
19556: EQUAL
19557: IFFALSE 19571
// Say ( tmp , D2-FSol1-2 ) ;
19559: LD_VAR 0 4
19563: PPUSH
19564: LD_STRING D2-FSol1-2
19566: PPUSH
19567: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19571: LD_EXP 19
19575: PPUSH
19576: LD_STRING D2-Kurt-3
19578: PPUSH
19579: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19583: LD_VAR 0 4
19587: PPUSH
19588: CALL_OW 258
19592: PUSH
19593: LD_INT 1
19595: EQUAL
19596: IFFALSE 19610
// Say ( tmp , D2-Sol1-3 ) ;
19598: LD_VAR 0 4
19602: PPUSH
19603: LD_STRING D2-Sol1-3
19605: PPUSH
19606: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19610: LD_VAR 0 4
19614: PPUSH
19615: CALL_OW 258
19619: PUSH
19620: LD_INT 2
19622: EQUAL
19623: IFFALSE 19637
// Say ( tmp , D2-FSol1-3 ) ;
19625: LD_VAR 0 4
19629: PPUSH
19630: LD_STRING D2-FSol1-3
19632: PPUSH
19633: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19637: LD_EXP 19
19641: PPUSH
19642: LD_STRING D2-Kurt-4
19644: PPUSH
19645: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19649: LD_VAR 0 4
19653: PPUSH
19654: CALL_OW 258
19658: PUSH
19659: LD_INT 1
19661: EQUAL
19662: IFFALSE 19676
// Say ( tmp , D2-Sol1-4 ) ;
19664: LD_VAR 0 4
19668: PPUSH
19669: LD_STRING D2-Sol1-4
19671: PPUSH
19672: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19676: LD_VAR 0 4
19680: PPUSH
19681: CALL_OW 258
19685: PUSH
19686: LD_INT 2
19688: EQUAL
19689: IFFALSE 19703
// Say ( tmp , D2-FSol1-4 ) ;
19691: LD_VAR 0 4
19695: PPUSH
19696: LD_STRING D2-FSol1-4
19698: PPUSH
19699: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19703: LD_VAR 0 4
19707: PPUSH
19708: CALL_OW 258
19712: PUSH
19713: LD_INT 1
19715: EQUAL
19716: IFFALSE 19730
// Say ( tmp , D2-Sol1-5 ) ;
19718: LD_VAR 0 4
19722: PPUSH
19723: LD_STRING D2-Sol1-5
19725: PPUSH
19726: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19730: LD_VAR 0 4
19734: PPUSH
19735: CALL_OW 258
19739: PUSH
19740: LD_INT 2
19742: EQUAL
19743: IFFALSE 19757
// Say ( tmp , D2-FSol1-5 ) ;
19745: LD_VAR 0 4
19749: PPUSH
19750: LD_STRING D2-FSol1-5
19752: PPUSH
19753: CALL_OW 88
// DialogueOff ;
19757: CALL_OW 7
// end ; dec = ShowQuery1 ;
19761: LD_ADDR_VAR 0 6
19765: PUSH
19766: CALL 6265 0 0
19770: ST_TO_ADDR
// if dec = 1 then
19771: LD_VAR 0 6
19775: PUSH
19776: LD_INT 1
19778: EQUAL
19779: IFFALSE 19821
// begin DialogueOn ;
19781: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19785: LD_EXP 19
19789: PPUSH
19790: LD_STRING D2a-Kurt-1
19792: PPUSH
19793: CALL_OW 88
// DialogueOff ;
19797: CALL_OW 7
// InGameOff ;
19801: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19805: LD_INT 1
19807: PPUSH
19808: LD_INT 2
19810: PPUSH
19811: LD_INT 2
19813: PPUSH
19814: LD_INT 1
19816: PPUSH
19817: CALL_OW 80
// end ; if dec = 2 then
19821: LD_VAR 0 6
19825: PUSH
19826: LD_INT 2
19828: EQUAL
19829: IFFALSE 20329
// begin DialogueOn ;
19831: CALL_OW 6
// if tmp = JMM then
19835: LD_VAR 0 4
19839: PUSH
19840: LD_EXP 1
19844: EQUAL
19845: IFFALSE 19901
// begin Say ( JMM , D2b-JMM-1 ) ;
19847: LD_EXP 1
19851: PPUSH
19852: LD_STRING D2b-JMM-1
19854: PPUSH
19855: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19859: LD_EXP 19
19863: PPUSH
19864: LD_STRING D2b-Kurt-1
19866: PPUSH
19867: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
19871: LD_EXP 1
19875: PPUSH
19876: LD_STRING D2b-JMM-2
19878: PPUSH
19879: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19883: LD_EXP 19
19887: PPUSH
19888: LD_STRING D2b-Kurt-2
19890: PPUSH
19891: CALL_OW 88
// DialogueOff ;
19895: CALL_OW 7
// end else
19899: GO 20091
// begin if GetSex ( tmp ) = 1 then
19901: LD_VAR 0 4
19905: PPUSH
19906: CALL_OW 258
19910: PUSH
19911: LD_INT 1
19913: EQUAL
19914: IFFALSE 19928
// Say ( tmp , D2b-Sol1-1 ) ;
19916: LD_VAR 0 4
19920: PPUSH
19921: LD_STRING D2b-Sol1-1
19923: PPUSH
19924: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19928: LD_VAR 0 4
19932: PPUSH
19933: CALL_OW 258
19937: PUSH
19938: LD_INT 2
19940: EQUAL
19941: IFFALSE 19955
// Say ( tmp , D2b-FSol1-1 ) ;
19943: LD_VAR 0 4
19947: PPUSH
19948: LD_STRING D2b-FSol1-1
19950: PPUSH
19951: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19955: LD_EXP 19
19959: PPUSH
19960: LD_STRING D2b-Kurt-1
19962: PPUSH
19963: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19967: LD_VAR 0 4
19971: PPUSH
19972: CALL_OW 258
19976: PUSH
19977: LD_INT 1
19979: EQUAL
19980: IFFALSE 19994
// Say ( tmp , D2b-Sol1-2 ) ;
19982: LD_VAR 0 4
19986: PPUSH
19987: LD_STRING D2b-Sol1-2
19989: PPUSH
19990: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19994: LD_VAR 0 4
19998: PPUSH
19999: CALL_OW 258
20003: PUSH
20004: LD_INT 2
20006: EQUAL
20007: IFFALSE 20021
// Say ( tmp , D2b-FSol1-2 ) ;
20009: LD_VAR 0 4
20013: PPUSH
20014: LD_STRING D2b-FSol1-2
20016: PPUSH
20017: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20021: LD_EXP 19
20025: PPUSH
20026: LD_STRING D2b-Kurt-2
20028: PPUSH
20029: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20033: LD_VAR 0 4
20037: PPUSH
20038: CALL_OW 258
20042: PUSH
20043: LD_INT 1
20045: EQUAL
20046: IFFALSE 20060
// Say ( tmp , D2c-Sol1-2 ) ;
20048: LD_VAR 0 4
20052: PPUSH
20053: LD_STRING D2c-Sol1-2
20055: PPUSH
20056: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20060: LD_VAR 0 4
20064: PPUSH
20065: CALL_OW 258
20069: PUSH
20070: LD_INT 2
20072: EQUAL
20073: IFFALSE 20087
// Say ( tmp , D2c-FSol1-2 ) ;
20075: LD_VAR 0 4
20079: PPUSH
20080: LD_STRING D2c-FSol1-2
20082: PPUSH
20083: CALL_OW 88
// DialogueOff ;
20087: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20091: LD_ADDR_VAR 0 7
20095: PUSH
20096: CALL 6339 0 0
20100: ST_TO_ADDR
// if dec2 = 1 then
20101: LD_VAR 0 7
20105: PUSH
20106: LD_INT 1
20108: EQUAL
20109: IFFALSE 20151
// begin DialogueOn ;
20111: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20115: LD_EXP 19
20119: PPUSH
20120: LD_STRING D2a-Kurt-1
20122: PPUSH
20123: CALL_OW 88
// DialogueOff ;
20127: CALL_OW 7
// InGameOff ;
20131: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20135: LD_INT 1
20137: PPUSH
20138: LD_INT 2
20140: PPUSH
20141: LD_INT 2
20143: PPUSH
20144: LD_INT 1
20146: PPUSH
20147: CALL_OW 80
// end ; if dec2 = 2 then
20151: LD_VAR 0 7
20155: PUSH
20156: LD_INT 2
20158: EQUAL
20159: IFFALSE 20329
// begin if tmp = JMM then
20161: LD_VAR 0 4
20165: PUSH
20166: LD_EXP 1
20170: EQUAL
20171: IFFALSE 20231
// begin DialogueOn ;
20173: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20177: LD_EXP 1
20181: PPUSH
20182: LD_STRING D2c-JMM-1
20184: PPUSH
20185: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20189: LD_EXP 19
20193: PPUSH
20194: LD_STRING D2c-Kurt-1
20196: PPUSH
20197: CALL_OW 88
// DialogueOff ;
20201: CALL_OW 7
// InGameOff ;
20205: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20209: LD_EXP 19
20213: PPUSH
20214: LD_INT 8
20216: PPUSH
20217: CALL_OW 113
// readyToEscape = 1 ;
20221: LD_ADDR_EXP 21
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// end else
20229: GO 20329
// begin DialogueOn ;
20231: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20235: LD_VAR 0 4
20239: PPUSH
20240: CALL_OW 258
20244: PUSH
20245: LD_INT 1
20247: EQUAL
20248: IFFALSE 20262
// Say ( tmp , D2c-Sol1-1 ) ;
20250: LD_VAR 0 4
20254: PPUSH
20255: LD_STRING D2c-Sol1-1
20257: PPUSH
20258: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20262: LD_VAR 0 4
20266: PPUSH
20267: CALL_OW 258
20271: PUSH
20272: LD_INT 2
20274: EQUAL
20275: IFFALSE 20289
// Say ( tmp , D2c-FSol1-1 ) ;
20277: LD_VAR 0 4
20281: PPUSH
20282: LD_STRING D2c-FSol1-1
20284: PPUSH
20285: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20289: LD_EXP 19
20293: PPUSH
20294: LD_STRING D2c-Kurt-1
20296: PPUSH
20297: CALL_OW 88
// DialogueOff ;
20301: CALL_OW 7
// InGameOff ;
20305: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20309: LD_EXP 19
20313: PPUSH
20314: LD_INT 8
20316: PPUSH
20317: CALL_OW 113
// readyToEscape = 1 ;
20321: LD_ADDR_EXP 21
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20329: LD_VAR 0 6
20333: PUSH
20334: LD_INT 3
20336: EQUAL
20337: IFFALSE 20511
// begin DialogueOn ;
20339: CALL_OW 6
// if tmp = JMM then
20343: LD_VAR 0 4
20347: PUSH
20348: LD_EXP 1
20352: EQUAL
20353: IFFALSE 20413
// begin DialogueOn ;
20355: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20359: LD_EXP 1
20363: PPUSH
20364: LD_STRING D2c-JMM-1
20366: PPUSH
20367: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20371: LD_EXP 19
20375: PPUSH
20376: LD_STRING D2c-Kurt-1
20378: PPUSH
20379: CALL_OW 88
// DialogueOff ;
20383: CALL_OW 7
// InGameOff ;
20387: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20391: LD_EXP 19
20395: PPUSH
20396: LD_INT 8
20398: PPUSH
20399: CALL_OW 113
// readyToEscape = 1 ;
20403: LD_ADDR_EXP 21
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// end else
20411: GO 20511
// begin DialogueOn ;
20413: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20417: LD_VAR 0 4
20421: PPUSH
20422: CALL_OW 258
20426: PUSH
20427: LD_INT 1
20429: EQUAL
20430: IFFALSE 20444
// Say ( tmp , D2c-Sol1-1 ) ;
20432: LD_VAR 0 4
20436: PPUSH
20437: LD_STRING D2c-Sol1-1
20439: PPUSH
20440: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20444: LD_VAR 0 4
20448: PPUSH
20449: CALL_OW 258
20453: PUSH
20454: LD_INT 2
20456: EQUAL
20457: IFFALSE 20471
// Say ( tmp , D2c-FSol1-1 ) ;
20459: LD_VAR 0 4
20463: PPUSH
20464: LD_STRING D2c-FSol1-1
20466: PPUSH
20467: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20471: LD_EXP 19
20475: PPUSH
20476: LD_STRING D2c-Kurt-1
20478: PPUSH
20479: CALL_OW 88
// DialogueOff ;
20483: CALL_OW 7
// InGameOff ;
20487: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20491: LD_EXP 19
20495: PPUSH
20496: LD_INT 8
20498: PPUSH
20499: CALL_OW 113
// readyToEscape = 1 ;
20503: LD_ADDR_EXP 21
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20511: LD_ADDR_EXP 29
20515: PUSH
20516: LD_INT 0
20518: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20519: LD_INT 35
20521: PPUSH
20522: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20526: LD_EXP 19
20530: PPUSH
20531: LD_INT 8
20533: PPUSH
20534: CALL_OW 308
20538: PUSH
20539: LD_EXP 21
20543: AND
20544: PUSH
20545: LD_EXP 19
20549: PPUSH
20550: CALL_OW 301
20554: OR
20555: IFFALSE 20519
// if IsDead ( Kurt ) then
20557: LD_EXP 19
20561: PPUSH
20562: CALL_OW 301
20566: IFFALSE 20570
// exit ;
20568: GO 20639
// RemoveUnit ( Kurt ) ;
20570: LD_EXP 19
20574: PPUSH
20575: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20579: LD_EXP 19
20583: PPUSH
20584: LD_STRING Kurt
20586: PPUSH
20587: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20591: LD_INT 1
20593: PPUSH
20594: LD_INT 2
20596: PPUSH
20597: CALL_OW 81
20601: PUSH
20602: LD_INT 0
20604: EQUAL
20605: IFFALSE 20615
// KurtStatus = 1 ;
20607: LD_ADDR_EXP 20
20611: PUSH
20612: LD_INT 1
20614: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20615: LD_INT 1
20617: PPUSH
20618: LD_INT 2
20620: PPUSH
20621: CALL_OW 81
20625: PUSH
20626: LD_INT 2
20628: EQUAL
20629: IFFALSE 20639
// KurtStatus = 2 ;
20631: LD_ADDR_EXP 20
20635: PUSH
20636: LD_INT 2
20638: ST_TO_ADDR
// end ; end_of_file
20639: LD_VAR 0 1
20643: RET
// every 0 0$1 do
20644: GO 20646
20646: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20647: LD_INT 3
20649: PPUSH
20650: LD_INT 32
20652: PPUSH
20653: LD_INT 3
20655: PPUSH
20656: CALL 6394 0 3
20660: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20661: GO 20663
20663: DISABLE
20664: LD_INT 0
20666: PPUSH
// begin enemyWayX = [ ] ;
20667: LD_ADDR_EXP 47
20671: PUSH
20672: EMPTY
20673: ST_TO_ADDR
// enemyWayY = [ ] ;
20674: LD_ADDR_EXP 48
20678: PUSH
20679: EMPTY
20680: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: LD_INT 1
20688: PPUSH
20689: LD_INT 2
20691: PPUSH
20692: CALL_OW 12
20696: ST_TO_ADDR
// if rnd = 1 then
20697: LD_VAR 0 1
20701: PUSH
20702: LD_INT 1
20704: EQUAL
20705: IFFALSE 20745
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20707: LD_ADDR_EXP 47
20711: PUSH
20712: LD_INT 93
20714: PUSH
20715: LD_INT 84
20717: PUSH
20718: LD_INT 104
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20726: LD_ADDR_EXP 48
20730: PUSH
20731: LD_INT 51
20733: PUSH
20734: LD_INT 35
20736: PUSH
20737: LD_INT 28
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: LIST
20744: ST_TO_ADDR
// end ; if rnd = 2 then
20745: LD_VAR 0 1
20749: PUSH
20750: LD_INT 2
20752: EQUAL
20753: IFFALSE 20809
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20755: LD_ADDR_EXP 47
20759: PUSH
20760: LD_INT 93
20762: PUSH
20763: LD_INT 52
20765: PUSH
20766: LD_INT 34
20768: PUSH
20769: LD_INT 28
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20782: LD_ADDR_EXP 48
20786: PUSH
20787: LD_INT 51
20789: PUSH
20790: LD_INT 45
20792: PUSH
20793: LD_INT 35
20795: PUSH
20796: LD_INT 26
20798: PUSH
20799: LD_INT 20
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: ST_TO_ADDR
// end ; enable ;
20809: ENABLE
// end ;
20810: PPOPN 1
20812: END
// every 0 0$1 do
20813: GO 20815
20815: DISABLE
// begin enable ;
20816: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20817: LD_INT 3
20819: PPUSH
20820: LD_INT 2
20822: PPUSH
20823: LD_INT 10
20825: PPUSH
20826: LD_EXP 31
20830: PPUSH
20831: CALL 7829 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20835: LD_INT 3
20837: PPUSH
20838: LD_INT 12
20840: PPUSH
20841: LD_EXP 31
20845: PPUSH
20846: CALL 9714 0 3
// if disableHealAI = 0 then
20850: LD_EXP 33
20854: PUSH
20855: LD_INT 0
20857: EQUAL
20858: IFFALSE 20879
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20860: LD_INT 3
20862: PPUSH
20863: LD_INT 9
20865: PPUSH
20866: LD_INT 10
20868: PPUSH
20869: LD_INT 32
20871: PUSH
20872: EMPTY
20873: LIST
20874: PPUSH
20875: CALL 8220 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20879: LD_INT 3
20881: PPUSH
20882: LD_INT 51
20884: PPUSH
20885: LD_INT 6
20887: PPUSH
20888: CALL 8928 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20892: LD_INT 3
20894: PPUSH
20895: LD_INT 12
20897: PPUSH
20898: LD_INT 121
20900: PPUSH
20901: LD_INT 100
20903: PPUSH
20904: CALL 6789 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20908: LD_INT 3
20910: PPUSH
20911: LD_INT 22
20913: PPUSH
20914: LD_EXP 47
20918: PPUSH
20919: LD_EXP 48
20923: PPUSH
20924: CALL 6992 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20928: LD_INT 3
20930: PPUSH
20931: LD_INT 10
20933: PPUSH
20934: CALL 9071 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20938: LD_INT 3
20940: PPUSH
20941: LD_INT 1
20943: PPUSH
20944: CALL 9484 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20948: LD_INT 2
20950: PPUSH
20951: CALL_OW 303
20955: PUSH
20956: LD_INT 2
20958: PPUSH
20959: CALL_OW 255
20963: PUSH
20964: LD_INT 1
20966: EQUAL
20967: OR
20968: IFFALSE 20980
// DefendDepot ( 3 , rudepo ) ;
20970: LD_INT 3
20972: PPUSH
20973: LD_INT 2
20975: PPUSH
20976: CALL 8764 0 2
// end ;
20980: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20981: LD_INT 22
20983: PUSH
20984: LD_INT 3
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 2
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 55
21003: PUSH
21004: EMPTY
21005: LIST
21006: PUSH
21007: LD_INT 3
21009: PUSH
21010: LD_INT 34
21012: PUSH
21013: LD_INT 51
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: PUSH
21035: LD_INT 0
21037: EQUAL
21038: PUSH
21039: LD_INT 21
21041: PPUSH
21042: CALL_OW 255
21046: PUSH
21047: LD_INT 3
21049: EQUAL
21050: AND
21051: PUSH
21052: LD_INT 21
21054: PPUSH
21055: CALL_OW 302
21059: AND
21060: PUSH
21061: LD_INT 2
21063: PPUSH
21064: CALL_OW 255
21068: PUSH
21069: LD_INT 3
21071: EQUAL
21072: AND
21073: PUSH
21074: LD_INT 2
21076: PPUSH
21077: CALL_OW 302
21081: AND
21082: IFFALSE 21266
21084: GO 21086
21086: DISABLE
// begin enable ;
21087: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21088: LD_INT 2
21090: PPUSH
21091: CALL_OW 274
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: LD_INT 1000
21101: PPUSH
21102: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21106: LD_INT 3
21108: PPUSH
21109: LD_INT 21
21111: PPUSH
21112: LD_INT 5
21114: PUSH
21115: LD_INT 6
21117: PUSH
21118: LD_INT 6
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: PUSH
21126: LD_OWVAR 67
21130: ARRAY
21131: PPUSH
21132: LD_INT 43
21134: PUSH
21135: LD_INT 43
21137: PUSH
21138: LD_INT 44
21140: PUSH
21141: LD_INT 44
21143: PUSH
21144: LD_INT 46
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 43
21156: PUSH
21157: LD_INT 43
21159: PUSH
21160: LD_INT 43
21162: PUSH
21163: LD_INT 44
21165: PUSH
21166: LD_INT 44
21168: PUSH
21169: LD_INT 46
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: PUSH
21180: LD_INT 43
21182: PUSH
21183: LD_INT 43
21185: PUSH
21186: LD_INT 43
21188: PUSH
21189: LD_INT 44
21191: PUSH
21192: LD_INT 44
21194: PUSH
21195: LD_INT 46
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: PUSH
21211: LD_OWVAR 67
21215: ARRAY
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: LD_INT 1
21222: PPUSH
21223: LD_INT 22
21225: PUSH
21226: LD_INT 22
21228: PUSH
21229: LD_INT 24
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PPUSH
21239: LD_INT 2
21241: PPUSH
21242: CALL_OW 12
21246: ARRAY
21247: PUSH
21248: LD_INT 24
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: PUSH
21256: LD_OWVAR 67
21260: ARRAY
21261: PPUSH
21262: CALL 6635 0 7
// end ;
21266: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21267: LD_INT 17
21269: PPUSH
21270: CALL_OW 255
21274: PUSH
21275: LD_INT 3
21277: EQUAL
21278: PUSH
21279: LD_INT 17
21281: PPUSH
21282: CALL_OW 302
21286: AND
21287: PUSH
21288: LD_INT 2
21290: PPUSH
21291: CALL_OW 255
21295: PUSH
21296: LD_INT 3
21298: EQUAL
21299: AND
21300: PUSH
21301: LD_INT 2
21303: PPUSH
21304: CALL_OW 302
21308: AND
21309: IFFALSE 21376
21311: GO 21313
21313: DISABLE
// begin enable ;
21314: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21315: LD_INT 17
21317: PPUSH
21318: LD_INT 22
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: LD_INT 1
21326: PPUSH
21327: LD_INT 42
21329: PUSH
21330: LD_INT 43
21332: PUSH
21333: LD_INT 44
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: PPUSH
21344: LD_INT 3
21346: PPUSH
21347: CALL_OW 12
21351: ARRAY
21352: PPUSH
21353: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21357: LD_INT 17
21359: PPUSH
21360: LD_INT 22
21362: PPUSH
21363: LD_INT 1
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: LD_INT 51
21371: PPUSH
21372: CALL_OW 185
// end ;
21376: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21377: LD_INT 17
21379: PPUSH
21380: CALL_OW 302
21384: PUSH
21385: LD_INT 17
21387: PPUSH
21388: CALL_OW 255
21392: PUSH
21393: LD_INT 3
21395: EQUAL
21396: AND
21397: PUSH
21398: LD_INT 2
21400: PPUSH
21401: CALL_OW 302
21405: AND
21406: PUSH
21407: LD_INT 2
21409: PPUSH
21410: CALL_OW 255
21414: PUSH
21415: LD_INT 3
21417: EQUAL
21418: AND
21419: PUSH
21420: LD_INT 17
21422: PPUSH
21423: CALL_OW 313
21427: NOT
21428: AND
21429: IFFALSE 21523
21431: GO 21433
21433: DISABLE
21434: LD_INT 0
21436: PPUSH
// begin for i = 1 to 6 do
21437: LD_ADDR_VAR 0 1
21441: PUSH
21442: DOUBLE
21443: LD_INT 1
21445: DEC
21446: ST_TO_ADDR
21447: LD_INT 6
21449: PUSH
21450: FOR_TO
21451: IFFALSE 21521
// begin uc_side = 3 ;
21453: LD_ADDR_OWVAR 20
21457: PUSH
21458: LD_INT 3
21460: ST_TO_ADDR
// uc_nation = 3 ;
21461: LD_ADDR_OWVAR 21
21465: PUSH
21466: LD_INT 3
21468: ST_TO_ADDR
// hc_gallery :=  ;
21469: LD_ADDR_OWVAR 33
21473: PUSH
21474: LD_STRING 
21476: ST_TO_ADDR
// hc_name :=  ;
21477: LD_ADDR_OWVAR 26
21481: PUSH
21482: LD_STRING 
21484: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21485: LD_INT 0
21487: PPUSH
21488: LD_EXP 34
21492: PPUSH
21493: LD_EXP 35
21497: PPUSH
21498: CALL_OW 12
21502: PPUSH
21503: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21507: CALL_OW 44
21511: PPUSH
21512: LD_INT 17
21514: PPUSH
21515: CALL_OW 52
// end ;
21519: GO 21450
21521: POP
21522: POP
// end ;
21523: PPOPN 1
21525: END
// every 2 2$0 do var i , j ;
21526: GO 21528
21528: DISABLE
21529: LD_INT 0
21531: PPUSH
21532: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21533: LD_INT 14700
21535: PUSH
21536: LD_INT 33600
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: PPUSH
21546: LD_INT 2
21548: PPUSH
21549: CALL_OW 12
21553: ARRAY
21554: PPUSH
21555: CALL_OW 67
// disableHealAI = 1 ;
21559: LD_ADDR_EXP 33
21563: PUSH
21564: LD_INT 1
21566: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21567: LD_ADDR_VAR 0 1
21571: PUSH
21572: LD_INT 22
21574: PUSH
21575: LD_INT 3
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 25
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PPUSH
21596: CALL_OW 69
21600: PUSH
21601: FOR_IN
21602: IFFALSE 21615
// ComExitBuilding ( i ) ;
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 122
21613: GO 21601
21615: POP
21616: POP
// wait ( 0 0$1 ) ;
21617: LD_INT 35
21619: PPUSH
21620: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21624: LD_INT 35
21626: PPUSH
21627: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21631: LD_ADDR_VAR 0 1
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 25
21648: PUSH
21649: LD_INT 4
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PPUSH
21660: CALL_OW 69
21664: PUSH
21665: FOR_IN
21666: IFFALSE 21743
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21668: LD_ADDR_VAR 0 2
21672: PUSH
21673: LD_INT 17
21675: PPUSH
21676: LD_INT 22
21678: PUSH
21679: LD_INT 0
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 25
21688: PUSH
21689: LD_INT 12
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 70
21704: PUSH
21705: FOR_IN
21706: IFFALSE 21739
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21708: LD_VAR 0 1
21712: PPUSH
21713: LD_VAR 0 2
21717: PPUSH
21718: CALL_OW 250
21722: PPUSH
21723: LD_VAR 0 2
21727: PPUSH
21728: CALL_OW 251
21732: PPUSH
21733: CALL_OW 191
// end ;
21737: GO 21705
21739: POP
21740: POP
// end ;
21741: GO 21665
21743: POP
21744: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21745: LD_INT 22
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 4
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 69
21773: PUSH
21774: LD_INT 0
21776: EQUAL
21777: PUSH
21778: LD_EXP 32
21782: PUSH
21783: LD_INT 6
21785: PUSH
21786: LD_INT 7
21788: PUSH
21789: LD_INT 8
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: PUSH
21797: LD_OWVAR 67
21801: ARRAY
21802: GREATEREQUAL
21803: OR
21804: PUSH
21805: LD_INT 17
21807: PPUSH
21808: LD_INT 22
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 25
21820: PUSH
21821: LD_INT 12
21823: PUSH
21824: EMPTY
21825: LIST
21826: LIST
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL_OW 70
21836: PUSH
21837: LD_INT 0
21839: EQUAL
21840: OR
21841: IFFALSE 21624
// disableHealAI = 0 ;
21843: LD_ADDR_EXP 33
21847: PUSH
21848: LD_INT 0
21850: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21851: LD_ADDR_VAR 0 1
21855: PUSH
21856: LD_INT 22
21858: PUSH
21859: LD_INT 3
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 25
21868: PUSH
21869: LD_INT 12
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PPUSH
21880: CALL_OW 69
21884: PUSH
21885: FOR_IN
21886: IFFALSE 21902
// SetClass ( i , 16 ) ;
21888: LD_VAR 0 1
21892: PPUSH
21893: LD_INT 16
21895: PPUSH
21896: CALL_OW 336
21900: GO 21885
21902: POP
21903: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21904: LD_ADDR_VAR 0 1
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_INT 3
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 25
21921: PUSH
21922: LD_INT 4
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PPUSH
21933: CALL_OW 69
21937: PUSH
21938: FOR_IN
21939: IFFALSE 21958
// ComMoveXY ( i , 113 , 94 ) ;
21941: LD_VAR 0 1
21945: PPUSH
21946: LD_INT 113
21948: PPUSH
21949: LD_INT 94
21951: PPUSH
21952: CALL_OW 111
21956: GO 21938
21958: POP
21959: POP
// end ;
21960: PPOPN 2
21962: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21963: LD_INT 21
21965: PPUSH
21966: CALL_OW 255
21970: PUSH
21971: LD_INT 3
21973: EQUAL
21974: PUSH
21975: LD_INT 21
21977: PPUSH
21978: CALL_OW 302
21982: AND
21983: PUSH
21984: LD_INT 22
21986: PUSH
21987: LD_INT 3
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 34
21996: PUSH
21997: LD_INT 51
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 69
22012: PUSH
22013: LD_INT 0
22015: EQUAL
22016: AND
22017: IFFALSE 22049
22019: GO 22021
22021: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22022: LD_INT 21
22024: PPUSH
22025: LD_INT 23
22027: PPUSH
22028: LD_INT 1
22030: PPUSH
22031: LD_INT 1
22033: PPUSH
22034: LD_INT 51
22036: PPUSH
22037: CALL_OW 185
// wait ( 5 5$0 ) ;
22041: LD_INT 10500
22043: PPUSH
22044: CALL_OW 67
// enable ;
22048: ENABLE
// end ; end_of_file
22049: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22050: LD_EXP 26
22054: PUSH
22055: LD_INT 0
22057: LESSEQUAL
22058: IFFALSE 22207
22060: GO 22062
22062: DISABLE
22063: LD_INT 0
22065: PPUSH
22066: PPUSH
22067: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22068: LD_ADDR_VAR 0 2
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: LD_INT 30
22098: PUSH
22099: LD_INT 0
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: ST_TO_ADDR
// for i in tmp do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: LD_VAR 0 2
22140: PUSH
22141: FOR_IN
22142: IFFALSE 22175
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_VAR 0 3
22153: PUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 274
22163: PPUSH
22164: LD_INT 1
22166: PPUSH
22167: CALL_OW 275
22171: PLUS
22172: ST_TO_ADDR
22173: GO 22141
22175: POP
22176: POP
// if yourCrates >= needCrates then
22177: LD_VAR 0 3
22181: PUSH
22182: LD_EXP 25
22186: GREATEREQUAL
22187: IFFALSE 22200
// begin FinishMission ( yourCrates ) ;
22189: LD_VAR 0 3
22193: PPUSH
22194: CALL 22210 0 1
// end else
22198: GO 22207
// begin YouLost ( matmin ) ;
22200: LD_STRING matmin
22202: PPUSH
22203: CALL_OW 104
// end ; end ;
22207: PPOPN 3
22209: END
// export function FinishMission ( crates ) ; begin
22210: LD_INT 0
22212: PPUSH
// if crates + 100 > crates then
22213: LD_VAR 0 1
22217: PUSH
22218: LD_INT 100
22220: PLUS
22221: PUSH
22222: LD_VAR 0 1
22226: GREATER
22227: IFFALSE 22251
// begin AddMedal ( cans , 1 ) ;
22229: LD_STRING cans
22231: PPUSH
22232: LD_INT 1
22234: PPUSH
22235: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22239: LD_INT 1
22241: PPUSH
22242: LD_STRING 06_crates_1
22244: PPUSH
22245: CALL_OW 39
// end else
22249: GO 22272
// begin AddMedal ( cans , - 1 ) ;
22251: LD_STRING cans
22253: PPUSH
22254: LD_INT 1
22256: NEG
22257: PPUSH
22258: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22262: LD_INT 0
22264: PPUSH
22265: LD_STRING 06_crates_1
22267: PPUSH
22268: CALL_OW 39
// end ; if unitLost < 3 then
22272: LD_EXP 30
22276: PUSH
22277: LD_INT 3
22279: LESS
22280: IFFALSE 22294
// begin AddMedal ( people , 1 ) ;
22282: LD_STRING people
22284: PPUSH
22285: LD_INT 1
22287: PPUSH
22288: CALL_OW 101
// end else
22292: GO 22305
// begin AddMedal ( people , - 1 ) ;
22294: LD_STRING people
22296: PPUSH
22297: LD_INT 1
22299: NEG
22300: PPUSH
22301: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22305: LD_EXP 28
22309: PPUSH
22310: LD_STRING 06_remoteVehs_1
22312: PPUSH
22313: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22317: LD_EXP 28
22321: PUSH
22322: LD_INT 1
22324: EQUAL
22325: IFFALSE 22339
// begin AddMedal ( remote , 1 ) ;
22327: LD_STRING remote
22329: PPUSH
22330: LD_INT 1
22332: PPUSH
22333: CALL_OW 101
// end else
22337: GO 22379
// begin if GetTech ( 18 , 1 ) = state_enabled then
22339: LD_INT 18
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 321
22349: PUSH
22350: LD_INT 1
22352: EQUAL
22353: IFFALSE 22368
// begin AddMedal ( remote , - 1 ) ;
22355: LD_STRING remote
22357: PPUSH
22358: LD_INT 1
22360: NEG
22361: PPUSH
22362: CALL_OW 101
// end else
22366: GO 22379
// begin AddMedal ( remote , - 2 ) ;
22368: LD_STRING remote
22370: PPUSH
22371: LD_INT 2
22373: NEG
22374: PPUSH
22375: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22379: LD_EXP 20
22383: PPUSH
22384: LD_STRING 06_KurtStatus_1
22386: PPUSH
22387: CALL_OW 39
// GiveMedals ( Main ) ;
22391: LD_STRING Main
22393: PPUSH
22394: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22398: LD_INT 22
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 21
22410: PUSH
22411: LD_INT 1
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 50
22420: PUSH
22421: EMPTY
22422: LIST
22423: PUSH
22424: LD_INT 2
22426: PUSH
22427: LD_INT 25
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 25
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 25
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 25
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PPUSH
22480: CALL_OW 69
22484: PPUSH
22485: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22489: LD_EXP 1
22493: PPUSH
22494: LD_EXP 43
22498: PUSH
22499: LD_STRING JMM
22501: STR
22502: PPUSH
22503: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22507: LD_EXP 2
22511: PPUSH
22512: LD_EXP 43
22516: PUSH
22517: LD_STRING Lisa
22519: STR
22520: PPUSH
22521: CALL 5882 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22525: LD_EXP 3
22529: PPUSH
22530: LD_EXP 43
22534: PUSH
22535: LD_STRING Bobby
22537: STR
22538: PPUSH
22539: CALL 5882 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22543: LD_EXP 4
22547: PPUSH
22548: LD_EXP 43
22552: PUSH
22553: LD_STRING Cyrus
22555: STR
22556: PPUSH
22557: CALL 5882 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22561: LD_EXP 5
22565: PPUSH
22566: LD_EXP 43
22570: PUSH
22571: LD_STRING Frank
22573: STR
22574: PPUSH
22575: CALL 5882 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22579: LD_EXP 6
22583: PPUSH
22584: LD_EXP 43
22588: PUSH
22589: LD_STRING Brown
22591: STR
22592: PPUSH
22593: CALL 5882 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22597: LD_EXP 7
22601: PPUSH
22602: LD_EXP 43
22606: PUSH
22607: LD_STRING Donaldson
22609: STR
22610: PPUSH
22611: CALL 5882 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22615: LD_EXP 8
22619: PPUSH
22620: LD_EXP 43
22624: PUSH
22625: LD_STRING Gladstone
22627: STR
22628: PPUSH
22629: CALL 5882 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22633: LD_EXP 9
22637: PPUSH
22638: LD_EXP 43
22642: PUSH
22643: LD_STRING Denis
22645: STR
22646: PPUSH
22647: CALL 5882 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22651: LD_EXP 15
22655: PPUSH
22656: LD_EXP 43
22660: PUSH
22661: LD_STRING Joan
22663: STR
22664: PPUSH
22665: CALL 5882 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22669: LD_EXP 16
22673: PPUSH
22674: LD_STRING 06_JoanStatus_1
22676: PPUSH
22677: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22681: LD_INT 50
22683: PUSH
22684: EMPTY
22685: LIST
22686: PUSH
22687: LD_INT 22
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 21
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: LD_INT 25
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 25
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 25
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 25
22742: PUSH
22743: LD_INT 4
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: PUSH
22768: LD_EXP 1
22772: PUSH
22773: LD_EXP 2
22777: PUSH
22778: LD_EXP 3
22782: PUSH
22783: LD_EXP 4
22787: PUSH
22788: LD_EXP 5
22792: PUSH
22793: LD_EXP 6
22797: PUSH
22798: LD_EXP 7
22802: PUSH
22803: LD_EXP 8
22807: PUSH
22808: LD_EXP 9
22812: PUSH
22813: LD_EXP 15
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: DIFF
22830: PPUSH
22831: LD_STRING 06_other_survivors
22833: PPUSH
22834: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22838: LD_INT 50
22840: PUSH
22841: EMPTY
22842: LIST
22843: PUSH
22844: LD_INT 22
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 21
22856: PUSH
22857: LD_INT 1
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 2
22866: PUSH
22867: LD_INT 25
22869: PUSH
22870: LD_INT 12
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 25
22879: PUSH
22880: LD_INT 16
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: LIST
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: PPUSH
22898: CALL_OW 69
22902: PPUSH
22903: LD_STRING 06_other_apemans
22905: PPUSH
22906: CALL_OW 38
// YouWin ;
22910: CALL_OW 103
// end ; end_of_file
22914: LD_VAR 0 2
22918: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22919: LD_EXP 39
22923: PUSH
22924: LD_INT 3
22926: EQUAL
22927: IFFALSE 23042
22929: GO 22931
22931: DISABLE
// begin enable ;
22932: ENABLE
// sendedConvoys = 0 ;
22933: LD_ADDR_EXP 39
22937: PUSH
22938: LD_INT 0
22940: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22941: LD_INT 6
22943: PPUSH
22944: LD_INT 3
22946: PPUSH
22947: LD_INT 5
22949: PPUSH
22950: LD_INT 10
22952: PPUSH
22953: CALL_OW 12
22957: PUSH
22958: LD_INT 5
22960: PPUSH
22961: LD_INT 11
22963: PPUSH
22964: CALL_OW 12
22968: PUSH
22969: LD_INT 8
22971: PPUSH
22972: LD_INT 12
22974: PPUSH
22975: CALL_OW 12
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: PUSH
22985: LD_OWVAR 67
22989: ARRAY
22990: PPUSH
22991: LD_INT 0
22993: PPUSH
22994: LD_INT 0
22996: PPUSH
22997: LD_INT 0
22999: PPUSH
23000: LD_INT 0
23002: PPUSH
23003: LD_EXP 34
23007: PPUSH
23008: LD_EXP 35
23012: PPUSH
23013: CALL_OW 12
23017: PPUSH
23018: LD_INT 16
23020: PPUSH
23021: LD_INT 15
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: LD_INT 2
23032: PPUSH
23033: CALL_OW 12
23037: PPUSH
23038: CALL 10312 0 12
// end ; end_of_file
23042: END
// export function PrepareNature ; var i , un ; begin
23043: LD_INT 0
23045: PPUSH
23046: PPUSH
23047: PPUSH
// for i = 1 to Difficulty + 2 do
23048: LD_ADDR_VAR 0 2
23052: PUSH
23053: DOUBLE
23054: LD_INT 1
23056: DEC
23057: ST_TO_ADDR
23058: LD_OWVAR 67
23062: PUSH
23063: LD_INT 2
23065: PLUS
23066: PUSH
23067: FOR_TO
23068: IFFALSE 23177
// begin hc_sex = sex_male ;
23070: LD_ADDR_OWVAR 27
23074: PUSH
23075: LD_INT 1
23077: ST_TO_ADDR
// uc_side = 0 ;
23078: LD_ADDR_OWVAR 20
23082: PUSH
23083: LD_INT 0
23085: ST_TO_ADDR
// uc_nation = nation_nature ;
23086: LD_ADDR_OWVAR 21
23090: PUSH
23091: LD_INT 0
23093: ST_TO_ADDR
// hc_class = class_tiger ;
23094: LD_ADDR_OWVAR 28
23098: PUSH
23099: LD_INT 14
23101: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23102: LD_ADDR_OWVAR 31
23106: PUSH
23107: LD_EXP 35
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 0
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23127: LD_ADDR_OWVAR 35
23131: PUSH
23132: LD_INT 5
23134: NEG
23135: PPUSH
23136: LD_INT 5
23138: PPUSH
23139: CALL_OW 12
23143: PUSH
23144: LD_OWVAR 67
23148: MUL
23149: ST_TO_ADDR
// un = CreateHuman ;
23150: LD_ADDR_VAR 0 3
23154: PUSH
23155: CALL_OW 44
23159: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23160: LD_VAR 0 3
23164: PPUSH
23165: LD_INT 18
23167: PPUSH
23168: LD_INT 0
23170: PPUSH
23171: CALL_OW 49
// end ;
23175: GO 23067
23177: POP
23178: POP
// for i = 1 to rand ( 3 , 4 ) do
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: DOUBLE
23185: LD_INT 1
23187: DEC
23188: ST_TO_ADDR
23189: LD_INT 3
23191: PPUSH
23192: LD_INT 4
23194: PPUSH
23195: CALL_OW 12
23199: PUSH
23200: FOR_TO
23201: IFFALSE 23295
// begin hc_sex = sex_male ;
23203: LD_ADDR_OWVAR 27
23207: PUSH
23208: LD_INT 1
23210: ST_TO_ADDR
// uc_side = 0 ;
23211: LD_ADDR_OWVAR 20
23215: PUSH
23216: LD_INT 0
23218: ST_TO_ADDR
// uc_nation = nation_nature ;
23219: LD_ADDR_OWVAR 21
23223: PUSH
23224: LD_INT 0
23226: ST_TO_ADDR
// hc_class = 18 ;
23227: LD_ADDR_OWVAR 28
23231: PUSH
23232: LD_INT 18
23234: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23235: LD_ADDR_OWVAR 31
23239: PUSH
23240: LD_EXP 35
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: LD_INT 0
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: ST_TO_ADDR
// hc_agressivity = 0 ;
23260: LD_ADDR_OWVAR 35
23264: PUSH
23265: LD_INT 0
23267: ST_TO_ADDR
// un = CreateHuman ;
23268: LD_ADDR_VAR 0 3
23272: PUSH
23273: CALL_OW 44
23277: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23278: LD_VAR 0 3
23282: PPUSH
23283: LD_INT 18
23285: PPUSH
23286: LD_INT 0
23288: PPUSH
23289: CALL_OW 49
// end ;
23293: GO 23200
23295: POP
23296: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23297: LD_ADDR_VAR 0 2
23301: PUSH
23302: DOUBLE
23303: LD_INT 1
23305: DEC
23306: ST_TO_ADDR
23307: LD_INT 1
23309: PPUSH
23310: LD_INT 3
23312: PPUSH
23313: CALL_OW 12
23317: PUSH
23318: LD_OWVAR 67
23322: PLUS
23323: PUSH
23324: FOR_TO
23325: IFFALSE 23474
// begin hc_sex = sex_male ;
23327: LD_ADDR_OWVAR 27
23331: PUSH
23332: LD_INT 1
23334: ST_TO_ADDR
// uc_side = 0 ;
23335: LD_ADDR_OWVAR 20
23339: PUSH
23340: LD_INT 0
23342: ST_TO_ADDR
// uc_nation = nation_nature ;
23343: LD_ADDR_OWVAR 21
23347: PUSH
23348: LD_INT 0
23350: ST_TO_ADDR
// hc_class = class_apeman ;
23351: LD_ADDR_OWVAR 28
23355: PUSH
23356: LD_INT 12
23358: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23359: LD_ADDR_OWVAR 31
23363: PUSH
23364: LD_INT 2
23366: PPUSH
23367: LD_INT 5
23369: PPUSH
23370: CALL_OW 12
23374: PUSH
23375: LD_INT 0
23377: PPUSH
23378: LD_INT 2
23380: PPUSH
23381: CALL_OW 12
23385: PUSH
23386: LD_INT 0
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23398: LD_ADDR_OWVAR 35
23402: PUSH
23403: LD_INT 20
23405: PPUSH
23406: LD_INT 30
23408: PPUSH
23409: CALL_OW 12
23413: PUSH
23414: LD_INT 30
23416: PPUSH
23417: LD_INT 40
23419: PPUSH
23420: CALL_OW 12
23424: PUSH
23425: LD_INT 40
23427: PPUSH
23428: LD_INT 50
23430: PPUSH
23431: CALL_OW 12
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: PUSH
23441: LD_OWVAR 67
23445: ARRAY
23446: ST_TO_ADDR
// un = CreateHuman ;
23447: LD_ADDR_VAR 0 3
23451: PUSH
23452: CALL_OW 44
23456: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23457: LD_VAR 0 3
23461: PPUSH
23462: LD_INT 19
23464: PPUSH
23465: LD_INT 0
23467: PPUSH
23468: CALL_OW 49
// end ;
23472: GO 23324
23474: POP
23475: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23476: LD_ADDR_VAR 0 2
23480: PUSH
23481: DOUBLE
23482: LD_INT 1
23484: DEC
23485: ST_TO_ADDR
23486: LD_INT 5
23488: PPUSH
23489: LD_INT 6
23491: PPUSH
23492: CALL_OW 12
23496: PUSH
23497: LD_OWVAR 67
23501: PLUS
23502: PUSH
23503: FOR_TO
23504: IFFALSE 23612
// begin hc_sex = sex_male ;
23506: LD_ADDR_OWVAR 27
23510: PUSH
23511: LD_INT 1
23513: ST_TO_ADDR
// uc_side = 0 ;
23514: LD_ADDR_OWVAR 20
23518: PUSH
23519: LD_INT 0
23521: ST_TO_ADDR
// uc_nation = nation_nature ;
23522: LD_ADDR_OWVAR 21
23526: PUSH
23527: LD_INT 0
23529: ST_TO_ADDR
// hc_class = class_apeman ;
23530: LD_ADDR_OWVAR 28
23534: PUSH
23535: LD_INT 12
23537: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23538: LD_ADDR_OWVAR 31
23542: PUSH
23543: LD_INT 2
23545: PPUSH
23546: LD_INT 5
23548: PPUSH
23549: CALL_OW 12
23553: PUSH
23554: LD_INT 0
23556: PPUSH
23557: LD_INT 2
23559: PPUSH
23560: CALL_OW 12
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// hc_agressivity = 0 ;
23577: LD_ADDR_OWVAR 35
23581: PUSH
23582: LD_INT 0
23584: ST_TO_ADDR
// un = CreateHuman ;
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: CALL_OW 44
23594: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23595: LD_VAR 0 3
23599: PPUSH
23600: LD_INT 20
23602: PPUSH
23603: LD_INT 0
23605: PPUSH
23606: CALL_OW 49
// end ;
23610: GO 23503
23612: POP
23613: POP
// end ; end_of_file
23614: LD_VAR 0 1
23618: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23619: LD_EXP 1
23623: PPUSH
23624: CALL_OW 301
23628: IFFALSE 23640
23630: GO 23632
23632: DISABLE
// YouLost ( JMM ) ;
23633: LD_STRING JMM
23635: PPUSH
23636: CALL_OW 104
23640: END
