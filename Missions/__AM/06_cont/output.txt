// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 41
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 42
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 43
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// blockSpawn = 0 ;
  65: LD_ADDR_EXP 29
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// KurtStatus = 0 ;
  73: LD_ADDR_EXP 20
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// readyToEscape = 0 ;
  81: LD_ADDR_EXP 21
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// JoanStatus = 0 ;
  89: LD_ADDR_EXP 16
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// cratesStatus = 2 ;
  97: LD_ADDR_EXP 38
 101: PUSH
 102: LD_INT 2
 104: ST_TO_ADDR
// timerStatus = 1 ;
 105: LD_ADDR_EXP 24
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 113: LD_ADDR_EXP 25
 117: PUSH
 118: LD_INT 350
 120: PUSH
 121: LD_INT 500
 123: PUSH
 124: LD_INT 700
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_OWVAR 67
 136: ARRAY
 137: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 138: LD_ADDR_EXP 26
 142: PUSH
 143: LD_INT 105000
 145: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 146: LD_ADDR_EXP 28
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// sendedConvoys = 0 ;
 154: LD_ADDR_EXP 39
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// tamedApemans = 0 ;
 162: LD_ADDR_EXP 32
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// unitLost = 0 ;
 170: LD_ADDR_EXP 30
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 178: LD_ADDR_EXP 31
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianTanks = [ ] ;
 185: LD_ADDR_EXP 36
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 192: LD_ADDR_EXP 37
 196: PUSH
 197: EMPTY
 198: ST_TO_ADDR
// disableHealAI = 0 ;
 199: LD_ADDR_EXP 33
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// strings = [ ] ;
 207: LD_ADDR_EXP 27
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// PrepareDifficulty ;
 214: CALL 5608 0 0
// PrepareNature ;
 218: CALL 21028 0 0
// PrepareRussian ;
 222: CALL 4715 0 0
// PrepareVehicles ;
 226: CALL 1463 0 0
// PrepareHeroes ;
 230: CALL 481 0 0
// PrepareOthers ;
 234: CALL 1791 0 0
// PreparePlayerApemans ;
 238: CALL 1933 0 0
// end ;
 242: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 243: LD_EXP 41
 247: PUSH
 248: LD_INT 1
 250: EQUAL
 251: IFFALSE 478
 253: GO 255
 255: DISABLE
 256: LD_INT 0
 258: PPUSH
// begin enable ;
 259: ENABLE
// fogoff ( true ) ;
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 267: LD_ADDR_VAR 0 1
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 318
// SetLives ( i , 1000 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: LD_INT 1000
 311: PPUSH
 312: CALL_OW 234
 316: GO 301
 318: POP
 319: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 320: LD_ADDR_VAR 0 1
 324: PUSH
 325: LD_INT 22
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: FOR_IN
 355: IFFALSE 379
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
 377: GO 354
 379: POP
 380: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 381: LD_ADDR_VAR 0 1
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL_OW 69
 414: PUSH
 415: FOR_IN
 416: IFFALSE 440
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 418: LD_VAR 0 1
 422: PPUSH
 423: CALL_OW 274
 427: PPUSH
 428: LD_INT 2
 430: PPUSH
 431: LD_INT 9999
 433: PPUSH
 434: CALL_OW 277
 438: GO 415
 440: POP
 441: POP
// if IsSelected ( rudepo ) then
 442: LD_INT 2
 444: PPUSH
 445: CALL_OW 306
 449: IFFALSE 459
// your_side = 3 ;
 451: LD_ADDR_OWVAR 2
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// if IsSelected ( JMM ) then
 459: LD_EXP 1
 463: PPUSH
 464: CALL_OW 306
 468: IFFALSE 478
// your_side = 1 ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// end ; end_of_file
 478: PPOPN 1
 480: END
// export function PrepareHeroes ; var veh ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// uc_side = 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation = 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 501: LD_ADDR_EXP 1
 505: PUSH
 506: LD_STRING JMM
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: CALL 5092 0 2
 516: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 517: LD_ADDR_EXP 14
 521: PUSH
 522: LD_STRING Harisson
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL 5092 0 2
 532: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 533: LD_ADDR_EXP 10
 537: PUSH
 538: LD_STRING DeltaDoctor
 540: PPUSH
 541: CALL_OW 34
 545: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 546: LD_ADDR_VAR 0 2
 550: PUSH
 551: LD_INT 22
 553: PUSH
 554: LD_INT 1
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 21
 563: PUSH
 564: LD_INT 2
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 58
 573: PUSH
 574: EMPTY
 575: LIST
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: ST_TO_ADDR
// if veh > 0 then
 587: LD_VAR 0 2
 591: PUSH
 592: LD_INT 0
 594: GREATER
 595: IFFALSE 617
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 597: LD_EXP 1
 601: PPUSH
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: CALL_OW 52
// end else
 615: GO 632
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 617: LD_EXP 1
 621: PPUSH
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 632: LD_STRING LisaIn06
 634: PPUSH
 635: LD_INT 0
 637: PPUSH
 638: CALL_OW 30
 642: PUSH
 643: LD_INT 1
 645: EQUAL
 646: IFFALSE 750
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 648: LD_ADDR_VAR 0 2
 652: PUSH
 653: LD_INT 22
 655: PUSH
 656: LD_INT 1
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 21
 665: PUSH
 666: LD_INT 2
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 58
 675: PUSH
 676: EMPTY
 677: LIST
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 69
 688: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 689: LD_ADDR_EXP 2
 693: PUSH
 694: LD_STRING Lisa
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: CALL 5092 0 2
 704: ST_TO_ADDR
// if veh > 0 then
 705: LD_VAR 0 2
 709: PUSH
 710: LD_INT 0
 712: GREATER
 713: IFFALSE 735
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 715: LD_EXP 2
 719: PPUSH
 720: LD_VAR 0 2
 724: PUSH
 725: LD_INT 1
 727: ARRAY
 728: PPUSH
 729: CALL_OW 52
// end else
 733: GO 750
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 735: LD_EXP 2
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 750: LD_STRING BobbyIn06
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: PUSH
 761: LD_INT 1
 763: EQUAL
 764: IFFALSE 868
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 766: LD_ADDR_VAR 0 2
 770: PUSH
 771: LD_INT 22
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 21
 783: PUSH
 784: LD_INT 2
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 58
 793: PUSH
 794: EMPTY
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PPUSH
 802: CALL_OW 69
 806: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 807: LD_ADDR_EXP 3
 811: PUSH
 812: LD_STRING Bobby
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 5092 0 2
 822: ST_TO_ADDR
// if veh > 0 then
 823: LD_VAR 0 2
 827: PUSH
 828: LD_INT 0
 830: GREATER
 831: IFFALSE 853
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 833: LD_EXP 3
 837: PPUSH
 838: LD_VAR 0 2
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: PPUSH
 847: CALL_OW 52
// end else
 851: GO 868
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 853: LD_EXP 3
 857: PPUSH
 858: LD_INT 2
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 868: LD_STRING CyrusIn06
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: CALL_OW 30
 878: PUSH
 879: LD_INT 1
 881: EQUAL
 882: IFFALSE 986
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 884: LD_ADDR_VAR 0 2
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 58
 911: PUSH
 912: EMPTY
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 925: LD_ADDR_EXP 4
 929: PUSH
 930: LD_STRING Cyrus
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL 5092 0 2
 940: ST_TO_ADDR
// if veh > 0 then
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 0
 948: GREATER
 949: IFFALSE 971
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 951: LD_EXP 4
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 1
 963: ARRAY
 964: PPUSH
 965: CALL_OW 52
// end else
 969: GO 986
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 971: LD_EXP 4
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 986: LD_STRING FrankIn06
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1104
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: LD_INT 22
1009: PUSH
1010: LD_INT 1
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 21
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 58
1029: PUSH
1030: EMPTY
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1043: LD_ADDR_EXP 5
1047: PUSH
1048: LD_STRING Frank
1050: PPUSH
1051: LD_INT 1
1053: PPUSH
1054: CALL 5092 0 2
1058: ST_TO_ADDR
// if veh > 0 then
1059: LD_VAR 0 2
1063: PUSH
1064: LD_INT 0
1066: GREATER
1067: IFFALSE 1089
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1069: LD_EXP 5
1073: PPUSH
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: CALL_OW 52
// end else
1087: GO 1104
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 5
1093: PPUSH
1094: LD_INT 2
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1104: LD_STRING BrownIn06
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 30
1114: PUSH
1115: LD_INT 1
1117: EQUAL
1118: IFFALSE 1222
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 22
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: LD_INT 21
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 58
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1161: LD_ADDR_EXP 6
1165: PUSH
1166: LD_STRING Brown
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: CALL 5092 0 2
1176: ST_TO_ADDR
// if veh > 0 then
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 0
1184: GREATER
1185: IFFALSE 1207
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1187: LD_EXP 6
1191: PPUSH
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: ARRAY
1200: PPUSH
1201: CALL_OW 52
// end else
1205: GO 1222
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1207: LD_EXP 6
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1222: LD_STRING DonaldsonIn06
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 30
1232: PUSH
1233: LD_INT 1
1235: EQUAL
1236: IFFALSE 1340
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1238: LD_ADDR_VAR 0 2
1242: PUSH
1243: LD_INT 22
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: PUSH
1253: LD_INT 21
1255: PUSH
1256: LD_INT 2
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 58
1265: PUSH
1266: EMPTY
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 69
1278: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1279: LD_ADDR_EXP 7
1283: PUSH
1284: LD_STRING Donaldson
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 5092 0 2
1294: ST_TO_ADDR
// if veh > 0 then
1295: LD_VAR 0 2
1299: PUSH
1300: LD_INT 0
1302: GREATER
1303: IFFALSE 1325
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1305: LD_EXP 7
1309: PPUSH
1310: LD_VAR 0 2
1314: PUSH
1315: LD_INT 1
1317: ARRAY
1318: PPUSH
1319: CALL_OW 52
// end else
1323: GO 1340
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1325: LD_EXP 7
1329: PPUSH
1330: LD_INT 2
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1340: LD_STRING GladstoneIn06
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 30
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1458
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 22
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 21
1373: PUSH
1374: LD_INT 2
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 58
1383: PUSH
1384: EMPTY
1385: LIST
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: PPUSH
1392: CALL_OW 69
1396: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1397: LD_ADDR_EXP 8
1401: PUSH
1402: LD_STRING Gladstone
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL 5092 0 2
1412: ST_TO_ADDR
// if veh > 0 then
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 0
1420: GREATER
1421: IFFALSE 1443
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1423: LD_EXP 8
1427: PPUSH
1428: LD_VAR 0 2
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 52
// end else
1441: GO 1458
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1443: LD_EXP 8
1447: PPUSH
1448: LD_INT 2
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// end ; end ; end ;
1458: LD_VAR 0 1
1462: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1463: LD_INT 0
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
1469: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1470: LD_ADDR_VAR 0 5
1474: PUSH
1475: LD_STRING 06_VehiclesIn06_1
1477: PPUSH
1478: EMPTY
1479: PPUSH
1480: CALL_OW 30
1484: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1485: LD_ADDR_EXP 40
1489: PUSH
1490: LD_STRING 06_ResourcesInCargo06_1
1492: PPUSH
1493: EMPTY
1494: PPUSH
1495: CALL_OW 30
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// if vehicles > 0 then
1508: LD_VAR 0 5
1512: PUSH
1513: LD_INT 0
1515: GREATER
1516: IFFALSE 1786
// begin for i := 1 to vehicles do
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: DOUBLE
1524: LD_INT 1
1526: DEC
1527: ST_TO_ADDR
1528: LD_VAR 0 5
1532: PUSH
1533: FOR_TO
1534: IFFALSE 1784
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1536: LD_ADDR_OWVAR 21
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 1
1554: ARRAY
1555: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1556: LD_ADDR_OWVAR 37
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 2
1574: ARRAY
1575: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 3
1594: ARRAY
1595: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1596: LD_ADDR_OWVAR 38
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_VAR 0 2
1610: ARRAY
1611: PUSH
1612: LD_INT 4
1614: ARRAY
1615: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1616: LD_ADDR_OWVAR 40
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PUSH
1632: LD_INT 5
1634: ARRAY
1635: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1636: LD_ADDR_OWVAR 41
1640: PUSH
1641: LD_INT 40
1643: ST_TO_ADDR
// veh = CreateVehicle ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: CALL_OW 45
1653: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1654: LD_VAR 0 4
1658: PPUSH
1659: LD_INT 3
1661: PPUSH
1662: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1666: LD_VAR 0 4
1670: PPUSH
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1681: LD_OWVAR 40
1685: PUSH
1686: LD_INT 12
1688: EQUAL
1689: IFFALSE 1782
// begin if resources > 0 then
1691: LD_EXP 40
1695: PUSH
1696: LD_INT 0
1698: GREATER
1699: IFFALSE 1782
// begin AddCargo ( veh , 1 , resources [ i ] [ 1 ] ) ;
1701: LD_VAR 0 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_EXP 40
1713: PUSH
1714: LD_VAR 0 2
1718: ARRAY
1719: PUSH
1720: LD_INT 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 291
// AddCargo ( veh , 2 , resources [ i ] [ 2 ] ) ;
1728: LD_VAR 0 4
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: LD_EXP 40
1740: PUSH
1741: LD_VAR 0 2
1745: ARRAY
1746: PUSH
1747: LD_INT 2
1749: ARRAY
1750: PPUSH
1751: CALL_OW 291
// AddCargo ( veh , 3 , resources [ i ] [ 3 ] ) ;
1755: LD_VAR 0 4
1759: PPUSH
1760: LD_INT 3
1762: PPUSH
1763: LD_EXP 40
1767: PUSH
1768: LD_VAR 0 2
1772: ARRAY
1773: PUSH
1774: LD_INT 3
1776: ARRAY
1777: PPUSH
1778: CALL_OW 291
// end ; end ; end ;
1782: GO 1533
1784: POP
1785: POP
// end ; end ;
1786: LD_VAR 0 1
1790: RET
// export function PrepareOthers ; var i , veh ; begin
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
// uc_side = 1 ;
1796: LD_ADDR_OWVAR 20
1800: PUSH
1801: LD_INT 1
1803: ST_TO_ADDR
// uc_nation = 1 ;
1804: LD_ADDR_OWVAR 21
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1812: LD_ADDR_EXP 11
1816: PUSH
1817: LD_STRING OthersIn06
1819: PPUSH
1820: CALL_OW 31
1824: ST_TO_ADDR
// for i in others do
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_EXP 11
1834: PUSH
1835: FOR_IN
1836: IFFALSE 1926
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1838: LD_ADDR_VAR 0 3
1842: PUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 21
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 58
1865: PUSH
1866: EMPTY
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: ST_TO_ADDR
// if veh > 0 then
1879: LD_VAR 0 3
1883: PUSH
1884: LD_INT 0
1886: GREATER
1887: IFFALSE 1909
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1889: LD_VAR 0 2
1893: PPUSH
1894: LD_VAR 0 3
1898: PUSH
1899: LD_INT 1
1901: ARRAY
1902: PPUSH
1903: CALL_OW 52
// end else
1907: GO 1924
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1909: LD_VAR 0 2
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: LD_INT 0
1919: PPUSH
1920: CALL_OW 49
// end ; end ;
1924: GO 1835
1926: POP
1927: POP
// end ;
1928: LD_VAR 0 1
1932: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
// uc_side = 1 ;
1938: LD_ADDR_OWVAR 20
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// uc_nation = 0 ;
1946: LD_ADDR_OWVAR 21
1950: PUSH
1951: LD_INT 0
1953: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1954: LD_ADDR_EXP 12
1958: PUSH
1959: LD_STRING ApeIn06
1961: PPUSH
1962: CALL_OW 31
1966: ST_TO_ADDR
// for i in ape do
1967: LD_ADDR_VAR 0 2
1971: PUSH
1972: LD_EXP 12
1976: PUSH
1977: FOR_IN
1978: IFFALSE 1997
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1980: LD_VAR 0 2
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 49
1995: GO 1977
1997: POP
1998: POP
// end ;
1999: LD_VAR 0 1
2003: RET
// export function PrepareDenis ; begin
2004: LD_INT 0
2006: PPUSH
// uc_side = 1 ;
2007: LD_ADDR_OWVAR 20
2011: PUSH
2012: LD_INT 1
2014: ST_TO_ADDR
// uc_nation = 1 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2023: LD_ADDR_EXP 9
2027: PUSH
2028: LD_STRING Denis
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: CALL 5092 0 2
2038: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2039: LD_EXP 9
2043: PPUSH
2044: LD_INT 13
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2054: LD_EXP 9
2058: PPUSH
2059: LD_INT 4
2061: PPUSH
2062: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2066: LD_EXP 9
2070: PPUSH
2071: LD_INT 750
2073: PPUSH
2074: CALL_OW 234
// end ;
2078: LD_VAR 0 1
2082: RET
// export function HarrisonSupport ; var un , veh ; begin
2083: LD_INT 0
2085: PPUSH
2086: PPUSH
2087: PPUSH
// uc_side = 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation = 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// vc_engine = 1 ;
2104: LD_ADDR_OWVAR 39
2108: PUSH
2109: LD_INT 1
2111: ST_TO_ADDR
// vc_control = 1 ;
2112: LD_ADDR_OWVAR 38
2116: PUSH
2117: LD_INT 1
2119: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2120: LD_ADDR_OWVAR 40
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_OWVAR 67
2143: ARRAY
2144: ST_TO_ADDR
// vc_chassis = 2 ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// veh = CreateVehicle ;
2153: LD_ADDR_VAR 0 3
2157: PUSH
2158: CALL_OW 45
2162: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2163: LD_VAR 0 3
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2175: LD_VAR 0 3
2179: PPUSH
2180: LD_INT 3
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2190: LD_VAR 0 3
2194: PPUSH
2195: LD_INT 50
2197: PPUSH
2198: CALL_OW 240
// hc_class := 2 ;
2202: LD_ADDR_OWVAR 28
2206: PUSH
2207: LD_INT 2
2209: ST_TO_ADDR
// hc_sex := sex_male ;
2210: LD_ADDR_OWVAR 27
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2218: LD_ADDR_OWVAR 33
2222: PUSH
2223: LD_STRING SecondCharsGal
2225: ST_TO_ADDR
// hc_face_number := 52 ;
2226: LD_ADDR_OWVAR 34
2230: PUSH
2231: LD_INT 52
2233: ST_TO_ADDR
// hc_name := Craig Brown ;
2234: LD_ADDR_OWVAR 26
2238: PUSH
2239: LD_STRING Craig Brown
2241: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2242: LD_ADDR_OWVAR 29
2246: PUSH
2247: LD_INT 10
2249: PUSH
2250: LD_INT 10
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2257: LD_ADDR_OWVAR 30
2261: PUSH
2262: LD_INT 0
2264: PUSH
2265: LD_INT 2
2267: PUSH
2268: LD_INT 0
2270: PUSH
2271: LD_INT 0
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2280: LD_ADDR_OWVAR 31
2284: PUSH
2285: LD_INT 2
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 0
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2303: LD_ADDR_EXP 17
2307: PUSH
2308: CALL_OW 44
2312: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2313: LD_EXP 17
2317: PPUSH
2318: LD_VAR 0 3
2322: PPUSH
2323: CALL_OW 52
// vc_engine = 1 ;
2327: LD_ADDR_OWVAR 39
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// vc_control = 1 ;
2335: LD_ADDR_OWVAR 38
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2343: LD_ADDR_OWVAR 40
2347: PUSH
2348: LD_INT 4
2350: PUSH
2351: LD_INT 2
2353: PUSH
2354: LD_INT 2
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// vc_chassis = 2 ;
2368: LD_ADDR_OWVAR 37
2372: PUSH
2373: LD_INT 2
2375: ST_TO_ADDR
// veh = CreateVehicle ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: CALL_OW 45
2385: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2386: LD_VAR 0 3
2390: PPUSH
2391: LD_INT 2
2393: PPUSH
2394: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2398: LD_VAR 0 3
2402: PPUSH
2403: LD_INT 3
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: LD_INT 50
2420: PPUSH
2421: CALL_OW 240
// hc_class := 1 ;
2425: LD_ADDR_OWVAR 28
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// hc_sex := sex_female ;
2433: LD_ADDR_OWVAR 27
2437: PUSH
2438: LD_INT 2
2440: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2441: LD_ADDR_OWVAR 33
2445: PUSH
2446: LD_STRING SecondCharsGal
2448: ST_TO_ADDR
// hc_face_number := 45 ;
2449: LD_ADDR_OWVAR 34
2453: PUSH
2454: LD_INT 45
2456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2457: LD_ADDR_OWVAR 29
2461: PUSH
2462: LD_INT 11
2464: PUSH
2465: LD_INT 10
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2472: LD_ADDR_OWVAR 26
2476: PUSH
2477: LD_STRING Ingrid Jonsson
2479: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2480: LD_ADDR_OWVAR 30
2484: PUSH
2485: LD_INT 1
2487: PUSH
2488: LD_INT 1
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2503: LD_ADDR_OWVAR 31
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: LD_INT 0
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2526: LD_ADDR_EXP 18
2530: PUSH
2531: CALL_OW 44
2535: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2536: LD_EXP 18
2540: PPUSH
2541: LD_VAR 0 3
2545: PPUSH
2546: CALL_OW 52
// end ;
2550: LD_VAR 0 1
2554: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2555: LD_INT 0
2557: PPUSH
2558: PPUSH
2559: PPUSH
2560: PPUSH
2561: PPUSH
// j = 0 ;
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_INT 0
2569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2570: LD_INT 35
2572: PPUSH
2573: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: LD_INT 22
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 21
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 26
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 25
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 2
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 3
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 25
2647: PUSH
2648: LD_INT 4
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PUSH
2673: FOR_IN
2674: IFFALSE 2800
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2676: LD_INT 22
2678: PUSH
2679: LD_INT 3
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 2
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 21
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 21
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 59
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 91
2734: PUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 25
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: PPUSH
2753: CALL_OW 69
2757: NOT
2758: PUSH
2759: LD_VAR 0 2
2763: PPUSH
2764: LD_EXP 1
2768: PPUSH
2769: CALL_OW 296
2773: PUSH
2774: LD_INT 15
2776: LESS
2777: AND
2778: IFFALSE 2798
// begin tmp = i ;
2780: LD_ADDR_VAR 0 4
2784: PUSH
2785: LD_VAR 0 2
2789: ST_TO_ADDR
// j = 1 ;
2790: LD_ADDR_VAR 0 3
2794: PUSH
2795: LD_INT 1
2797: ST_TO_ADDR
// end ; end ;
2798: GO 2673
2800: POP
2801: POP
// until j = 1 ;
2802: LD_VAR 0 3
2806: PUSH
2807: LD_INT 1
2809: EQUAL
2810: IFFALSE 2570
// blockSpawn = 1 ;
2812: LD_ADDR_EXP 29
2816: PUSH
2817: LD_INT 1
2819: ST_TO_ADDR
// uc_side = 4 ;
2820: LD_ADDR_OWVAR 20
2824: PUSH
2825: LD_INT 4
2827: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2828: LD_ADDR_EXP 15
2832: PUSH
2833: LD_STRING Joan
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL 5092 0 2
2843: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2844: LD_EXP 15
2848: PPUSH
2849: LD_VAR 0 4
2853: PPUSH
2854: CALL_OW 250
2858: PPUSH
2859: LD_VAR 0 4
2863: PPUSH
2864: CALL_OW 251
2868: PPUSH
2869: LD_INT 5
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2879: LD_EXP 15
2883: PPUSH
2884: LD_INT 250
2886: PPUSH
2887: CALL_OW 234
// InGameOn ;
2891: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2895: LD_EXP 15
2899: PPUSH
2900: CALL_OW 87
// wait ( 0 0$2 ) ;
2904: LD_INT 70
2906: PPUSH
2907: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: CALL_OW 122
// wait ( 0 0$1 ) ;
2929: LD_INT 35
2931: PPUSH
2932: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2936: LD_VAR 0 4
2940: PPUSH
2941: LD_EXP 15
2945: PPUSH
2946: CALL_OW 112
// wait ( 0 0$2 ) ;
2950: LD_INT 70
2952: PPUSH
2953: CALL_OW 67
// DialogueOn ;
2957: CALL_OW 6
// if tmp = JMM then
2961: LD_VAR 0 4
2965: PUSH
2966: LD_EXP 1
2970: EQUAL
2971: IFFALSE 3120
// begin ComTurnUnit ( JMM , Joan ) ;
2973: LD_EXP 1
2977: PPUSH
2978: LD_EXP 15
2982: PPUSH
2983: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2987: LD_EXP 1
2991: PPUSH
2992: LD_STRING D5b-JMM-1
2994: PPUSH
2995: CALL_OW 88
// DialogueOff ;
2999: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3003: LD_EXP 15
3007: PPUSH
3008: LD_INT 500
3010: PPUSH
3011: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3015: LD_EXP 15
3019: PPUSH
3020: LD_EXP 1
3024: PPUSH
3025: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3029: LD_EXP 1
3033: PPUSH
3034: LD_EXP 15
3038: PPUSH
3039: CALL_OW 119
// wait ( 0 0$1 ) ;
3043: LD_INT 35
3045: PPUSH
3046: CALL_OW 67
// DialogueOn ;
3050: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3054: LD_EXP 15
3058: PPUSH
3059: LD_STRING D5b-Joan-1
3061: PPUSH
3062: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3066: LD_EXP 1
3070: PPUSH
3071: LD_STRING D5b-JMM-2
3073: PPUSH
3074: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3078: LD_EXP 15
3082: PPUSH
3083: LD_STRING D5b-Joan-2
3085: PPUSH
3086: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3090: LD_EXP 1
3094: PPUSH
3095: LD_STRING D5b-JMM-3
3097: PPUSH
3098: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3102: LD_EXP 15
3106: PPUSH
3107: LD_STRING D5b-Joan-3
3109: PPUSH
3110: CALL_OW 88
// DialogueOff ;
3114: CALL_OW 7
// end else
3118: GO 3455
// begin ComTurnUnit ( tmp , Joan ) ;
3120: LD_VAR 0 4
3124: PPUSH
3125: LD_EXP 15
3129: PPUSH
3130: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_STRING D5a-Sol1-1
3141: PPUSH
3142: CALL_OW 88
// DialogueOff ;
3146: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3150: LD_EXP 15
3154: PPUSH
3155: LD_INT 500
3157: PPUSH
3158: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3162: LD_EXP 15
3166: PPUSH
3167: LD_VAR 0 4
3171: PPUSH
3172: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_EXP 15
3185: PPUSH
3186: CALL_OW 119
// wait ( 0 0$1 ) ;
3190: LD_INT 35
3192: PPUSH
3193: CALL_OW 67
// DialogueOn ;
3197: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3201: LD_EXP 15
3205: PPUSH
3206: LD_STRING D5a-Joan-1
3208: PPUSH
3209: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_STRING D5a-Sol1-2
3220: PPUSH
3221: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3225: LD_EXP 15
3229: PPUSH
3230: LD_STRING D5a-Joan-2
3232: PPUSH
3233: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_STRING D5a-Sol1-3
3244: PPUSH
3245: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3249: LD_EXP 15
3253: PPUSH
3254: LD_STRING D5a-Joan-3
3256: PPUSH
3257: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_STRING D5a-Sol1-4
3268: PPUSH
3269: CALL_OW 88
// DialogueOff ;
3273: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3277: LD_EXP 1
3281: PPUSH
3282: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3286: LD_EXP 1
3290: PPUSH
3291: CALL_OW 122
// wait ( 0 0$1 ) ;
3295: LD_INT 35
3297: PPUSH
3298: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3302: LD_INT 35
3304: PPUSH
3305: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3309: LD_EXP 15
3313: PUSH
3314: LD_VAR 0 4
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: LD_EXP 1
3327: PPUSH
3328: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3332: LD_EXP 15
3336: PPUSH
3337: LD_EXP 1
3341: PPUSH
3342: CALL_OW 296
3346: PUSH
3347: LD_INT 5
3349: LESS
3350: IFFALSE 3302
// ComTurnUnit ( Joan , JMM ) ;
3352: LD_EXP 15
3356: PPUSH
3357: LD_EXP 1
3361: PPUSH
3362: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3366: LD_EXP 1
3370: PPUSH
3371: LD_EXP 15
3375: PPUSH
3376: CALL_OW 119
// wait ( 0 0$1 ) ;
3380: LD_INT 35
3382: PPUSH
3383: CALL_OW 67
// DialogueOn ;
3387: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3391: LD_EXP 15
3395: PPUSH
3396: LD_STRING D5a-Joan-4
3398: PPUSH
3399: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3403: LD_EXP 1
3407: PPUSH
3408: LD_STRING D5a-JMM-4
3410: PPUSH
3411: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3415: LD_EXP 15
3419: PPUSH
3420: LD_STRING D5a-Joan-5
3422: PPUSH
3423: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3427: LD_EXP 1
3431: PPUSH
3432: LD_STRING D5a-JMM-5
3434: PPUSH
3435: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3439: LD_EXP 15
3443: PPUSH
3444: LD_STRING D5a-Joan-6
3446: PPUSH
3447: CALL_OW 88
// DialogueOff ;
3451: CALL_OW 7
// end ; DialogueOn ;
3455: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3459: LD_EXP 1
3463: PPUSH
3464: LD_STRING D6-JMM-1
3466: PPUSH
3467: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3471: LD_EXP 15
3475: PPUSH
3476: LD_STRING D6-Joan-1
3478: PPUSH
3479: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3483: LD_EXP 1
3487: PPUSH
3488: LD_STRING D6-JMM-2
3490: PPUSH
3491: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3495: LD_EXP 15
3499: PPUSH
3500: LD_STRING D6-Joan-2
3502: PPUSH
3503: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3507: LD_EXP 1
3511: PPUSH
3512: LD_STRING D6-JMM-3
3514: PPUSH
3515: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_STRING D6-Joan-3
3526: PPUSH
3527: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3531: LD_EXP 1
3535: PPUSH
3536: LD_STRING D6-JMM-4
3538: PPUSH
3539: CALL_OW 88
// DialogueOff ;
3543: CALL_OW 7
// InGameOff ;
3547: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3551: LD_EXP 15
3555: PPUSH
3556: LD_INT 1
3558: PPUSH
3559: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3563: LD_STRING MJ
3565: PPUSH
3566: CALL_OW 337
// JoanStatus = 1 ;
3570: LD_ADDR_EXP 16
3574: PUSH
3575: LD_INT 1
3577: ST_TO_ADDR
// blockSpawn = 0 ;
3578: LD_ADDR_EXP 29
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// end ;
3586: LD_VAR 0 1
3590: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3591: LD_INT 0
3593: PPUSH
3594: PPUSH
// repeat wait ( 0 0$7 ) ;
3595: LD_INT 245
3597: PPUSH
3598: CALL_OW 67
// until blockSpawn = 0 ;
3602: LD_EXP 29
3606: PUSH
3607: LD_INT 0
3609: EQUAL
3610: IFFALSE 3595
// uc_side = 1 ;
3612: LD_ADDR_OWVAR 20
3616: PUSH
3617: LD_INT 1
3619: ST_TO_ADDR
// uc_nation = 1 ;
3620: LD_ADDR_OWVAR 21
3624: PUSH
3625: LD_INT 1
3627: ST_TO_ADDR
// InitHc ;
3628: CALL_OW 19
// if number = 1 then
3632: LD_VAR 0 1
3636: PUSH
3637: LD_INT 1
3639: EQUAL
3640: IFFALSE 3816
// begin hc_class := 1 ;
3642: LD_ADDR_OWVAR 28
3646: PUSH
3647: LD_INT 1
3649: ST_TO_ADDR
// hc_sex := sex_male ;
3650: LD_ADDR_OWVAR 27
3654: PUSH
3655: LD_INT 1
3657: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3658: LD_ADDR_OWVAR 33
3662: PUSH
3663: LD_STRING AmGalRemake
3665: ST_TO_ADDR
// hc_face_number := 7 ;
3666: LD_ADDR_OWVAR 34
3670: PUSH
3671: LD_INT 7
3673: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3674: LD_ADDR_OWVAR 26
3678: PUSH
3679: LD_STRING Bobby Jordan
3681: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3682: LD_ADDR_OWVAR 29
3686: PUSH
3687: LD_INT 9
3689: PUSH
3690: LD_INT 11
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3697: LD_ADDR_OWVAR 30
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: LD_INT 1
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3720: LD_ADDR_OWVAR 31
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: ST_TO_ADDR
// un = CreateHuman ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 44
3752: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3753: LD_VAR 0 3
3757: PPUSH
3758: LD_INT 12
3760: PPUSH
3761: LD_INT 1
3763: PPUSH
3764: CALL_OW 49
// wait ( 0 0$1 ) ;
3768: LD_INT 35
3770: PPUSH
3771: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3775: LD_VAR 0 3
3779: PPUSH
3780: CALL_OW 87
// DialogueOn ;
3784: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: LD_STRING D11b-Sol3-1
3795: PPUSH
3796: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_STRING D11b-JMM-1
3807: PPUSH
3808: CALL_OW 88
// DialogueOff ;
3812: CALL_OW 7
// end ; if number = 2 then
3816: LD_VAR 0 1
3820: PUSH
3821: LD_INT 2
3823: EQUAL
3824: IFFALSE 4000
// begin hc_class := 3 ;
3826: LD_ADDR_OWVAR 28
3830: PUSH
3831: LD_INT 3
3833: ST_TO_ADDR
// hc_sex := sex_male ;
3834: LD_ADDR_OWVAR 27
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3842: LD_ADDR_OWVAR 33
3846: PUSH
3847: LD_STRING SecondCharsGal
3849: ST_TO_ADDR
// hc_face_number := 55 ;
3850: LD_ADDR_OWVAR 34
3854: PUSH
3855: LD_INT 55
3857: ST_TO_ADDR
// hc_name := George McCarthy ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING George McCarthy
3865: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3866: LD_ADDR_OWVAR 29
3870: PUSH
3871: LD_INT 11
3873: PUSH
3874: LD_INT 10
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3881: LD_ADDR_OWVAR 30
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3904: LD_ADDR_OWVAR 31
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: ST_TO_ADDR
// un = CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 12
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 87
// wait ( 0 0$1 ) ;
3961: LD_INT 35
3963: PPUSH
3964: CALL_OW 67
// DialogueOn ;
3968: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_STRING D11d-Sol4-1
3979: PPUSH
3980: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3984: LD_EXP 1
3988: PPUSH
3989: LD_STRING D11d-JMM-1
3991: PPUSH
3992: CALL_OW 88
// DialogueOff ;
3996: CALL_OW 7
// end ; if number = 4 then
4000: LD_VAR 0 1
4004: PUSH
4005: LD_INT 4
4007: EQUAL
4008: IFFALSE 4172
// begin hc_class := 3 ;
4010: LD_ADDR_OWVAR 28
4014: PUSH
4015: LD_INT 3
4017: ST_TO_ADDR
// hc_sex := sex_female ;
4018: LD_ADDR_OWVAR 27
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4026: LD_ADDR_OWVAR 33
4030: PUSH
4031: LD_STRING SecondCharsGal
4033: ST_TO_ADDR
// hc_face_number := 46 ;
4034: LD_ADDR_OWVAR 34
4038: PUSH
4039: LD_INT 46
4041: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4042: LD_ADDR_OWVAR 26
4046: PUSH
4047: LD_STRING Sylvia Creak
4049: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4050: LD_ADDR_OWVAR 29
4054: PUSH
4055: LD_INT 10
4057: PUSH
4058: LD_INT 9
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4065: LD_ADDR_OWVAR 30
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: LD_INT 1
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4088: LD_ADDR_OWVAR 31
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: LD_INT 1
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: ST_TO_ADDR
// un = CreateHuman ;
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: CALL_OW 44
4120: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 12
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4136: LD_VAR 0 3
4140: PPUSH
4141: CALL_OW 87
// wait ( 0 0$1 ) ;
4145: LD_INT 35
4147: PPUSH
4148: CALL_OW 67
// DialogueOn ;
4152: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4156: LD_VAR 0 3
4160: PPUSH
4161: LD_STRING D11e-FSol4-1
4163: PPUSH
4164: CALL_OW 88
// DialogueOff ;
4168: CALL_OW 7
// end ; if number = 5 then
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 5
4179: EQUAL
4180: IFFALSE 4356
// begin hc_class := 1 ;
4182: LD_ADDR_OWVAR 28
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_sex := sex_female ;
4190: LD_ADDR_OWVAR 27
4194: PUSH
4195: LD_INT 2
4197: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4198: LD_ADDR_OWVAR 33
4202: PUSH
4203: LD_STRING SecondCharsGal
4205: ST_TO_ADDR
// hc_face_number := 37 ;
4206: LD_ADDR_OWVAR 34
4210: PUSH
4211: LD_INT 37
4213: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4214: LD_ADDR_OWVAR 26
4218: PUSH
4219: LD_STRING Margherite Simpson
4221: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4222: LD_ADDR_OWVAR 29
4226: PUSH
4227: LD_INT 11
4229: PUSH
4230: LD_INT 10
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4237: LD_ADDR_OWVAR 30
4241: PUSH
4242: LD_INT 1
4244: PUSH
4245: LD_INT 1
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4260: LD_ADDR_OWVAR 31
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: LD_INT 1
4270: PUSH
4271: LD_INT 1
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
// un = CreateHuman ;
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: CALL_OW 44
4292: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: CALL_OW 87
// wait ( 0 0$1 ) ;
4317: LD_INT 35
4319: PPUSH
4320: CALL_OW 67
// DialogueOn ;
4324: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING D11c-FSol3-1
4335: PPUSH
4336: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4340: LD_EXP 1
4344: PPUSH
4345: LD_STRING D11c-JMM-1
4347: PPUSH
4348: CALL_OW 88
// DialogueOff ;
4352: CALL_OW 7
// end ; if number = 6 then
4356: LD_VAR 0 1
4360: PUSH
4361: LD_INT 6
4363: EQUAL
4364: IFFALSE 4538
// begin hc_class := 1 ;
4366: LD_ADDR_OWVAR 28
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// hc_sex := sex_male ;
4374: LD_ADDR_OWVAR 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4382: LD_ADDR_OWVAR 33
4386: PUSH
4387: LD_STRING AmGalRemake
4389: ST_TO_ADDR
// hc_face_number := 1 ;
4390: LD_ADDR_OWVAR 34
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// hc_name := Charles Brown ;
4398: LD_ADDR_OWVAR 26
4402: PUSH
4403: LD_STRING Charles Brown
4405: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4406: LD_ADDR_OWVAR 29
4410: PUSH
4411: LD_INT 12
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4421: LD_ADDR_OWVAR 30
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4444: LD_ADDR_OWVAR 31
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: ST_TO_ADDR
// un = CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 12
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 87
// wait ( 0 0$1 ) ;
4501: LD_INT 35
4503: PPUSH
4504: CALL_OW 67
// DialogueOn ;
4508: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_STRING D4-Sol1-5
4519: PPUSH
4520: CALL_OW 88
// DialogueOff ;
4524: CALL_OW 7
// tempCharles = un ;
4528: LD_ADDR_EXP 13
4532: PUSH
4533: LD_VAR 0 3
4537: ST_TO_ADDR
// end ; if number = 7 then
4538: LD_VAR 0 1
4542: PUSH
4543: LD_INT 7
4545: EQUAL
4546: IFFALSE 4710
// begin hc_class := 1 ;
4548: LD_ADDR_OWVAR 28
4552: PUSH
4553: LD_INT 1
4555: ST_TO_ADDR
// hc_sex := sex_female ;
4556: LD_ADDR_OWVAR 27
4560: PUSH
4561: LD_INT 2
4563: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4564: LD_ADDR_OWVAR 33
4568: PUSH
4569: LD_STRING AmGalRemake
4571: ST_TO_ADDR
// hc_face_number := 2 ;
4572: LD_ADDR_OWVAR 34
4576: PUSH
4577: LD_INT 2
4579: ST_TO_ADDR
// hc_name := Johanna Holland ;
4580: LD_ADDR_OWVAR 26
4584: PUSH
4585: LD_STRING Johanna Holland
4587: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4588: LD_ADDR_OWVAR 29
4592: PUSH
4593: LD_INT 10
4595: PUSH
4596: LD_INT 10
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4603: LD_ADDR_OWVAR 30
4607: PUSH
4608: LD_INT 1
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4626: LD_ADDR_OWVAR 31
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: LD_INT 0
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: ST_TO_ADDR
// un = CreateHuman ;
4649: LD_ADDR_VAR 0 3
4653: PUSH
4654: CALL_OW 44
4658: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4659: LD_VAR 0 3
4663: PPUSH
4664: LD_INT 12
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4674: LD_VAR 0 3
4678: PPUSH
4679: CALL_OW 87
// wait ( 0 0$1 ) ;
4683: LD_INT 35
4685: PPUSH
4686: CALL_OW 67
// DialogueOn ;
4690: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_STRING D11a-FSol2-1
4701: PPUSH
4702: CALL_OW 88
// DialogueOff ;
4706: CALL_OW 7
// end ; end ; end_of_file
4710: LD_VAR 0 2
4714: RET
// export function PrepareRussian ; var i ; begin
4715: LD_INT 0
4717: PPUSH
4718: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 2
4727: PPUSH
4728: LD_EXP 34
4732: PPUSH
4733: LD_EXP 35
4737: PPUSH
4738: CALL_OW 12
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: CALL 5362 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4753: LD_INT 3
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: LD_EXP 34
4766: PPUSH
4767: LD_EXP 35
4771: PPUSH
4772: CALL_OW 12
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: CALL 5362 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4787: LD_INT 3
4789: PPUSH
4790: LD_INT 3
4792: PPUSH
4793: LD_INT 67
4795: PPUSH
4796: LD_EXP 34
4800: PPUSH
4801: LD_EXP 35
4805: PPUSH
4806: CALL_OW 12
4810: PPUSH
4811: LD_INT 1
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4821: LD_INT 3
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 21
4829: PPUSH
4830: LD_EXP 34
4834: PPUSH
4835: LD_EXP 35
4839: PPUSH
4840: CALL_OW 12
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: LD_INT 6
4850: PPUSH
4851: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4855: LD_INT 3
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: LD_INT 17
4863: PPUSH
4864: LD_EXP 34
4868: PPUSH
4869: LD_EXP 35
4873: PPUSH
4874: CALL_OW 12
4878: PPUSH
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 6
4884: PPUSH
4885: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4889: LD_INT 3
4891: PPUSH
4892: LD_INT 3
4894: PPUSH
4895: LD_INT 32
4897: PPUSH
4898: LD_EXP 34
4902: PPUSH
4903: LD_EXP 35
4907: PPUSH
4908: CALL_OW 12
4912: PPUSH
4913: LD_INT 4
4915: PPUSH
4916: LD_INT 2
4918: PPUSH
4919: CALL 5362 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 22
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 21
4940: PUSH
4941: LD_INT 3
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 30
4950: PUSH
4951: LD_INT 32
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: PUSH
4968: FOR_IN
4969: IFFALSE 5009
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4971: LD_INT 3
4973: PPUSH
4974: LD_INT 3
4976: PPUSH
4977: LD_VAR 0 2
4981: PPUSH
4982: LD_EXP 34
4986: PPUSH
4987: LD_EXP 35
4991: PPUSH
4992: CALL_OW 12
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL 5362 0 6
5007: GO 4968
5009: POP
5010: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 21
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 31
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: PPUSH
5051: CALL_OW 69
5055: PUSH
5056: FOR_IN
5057: IFFALSE 5085
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5059: LD_EXP 34
5063: PPUSH
5064: LD_EXP 35
5068: PPUSH
5069: CALL_OW 12
5073: PPUSH
5074: LD_VAR 0 2
5078: PPUSH
5079: CALL 5472 0 2
5083: GO 5056
5085: POP
5086: POP
// end ; end_of_file
5087: LD_VAR 0 1
5091: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5092: LD_INT 0
5094: PPUSH
5095: PPUSH
// if exist_mode then
5096: LD_VAR 0 2
5100: IFFALSE 5125
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5102: LD_ADDR_VAR 0 4
5106: PUSH
5107: LD_EXP 43
5111: PUSH
5112: LD_VAR 0 1
5116: STR
5117: PPUSH
5118: CALL_OW 34
5122: ST_TO_ADDR
// end else
5123: GO 5140
// begin unit := NewCharacter ( ident ) ;
5125: LD_ADDR_VAR 0 4
5129: PUSH
5130: LD_VAR 0 1
5134: PPUSH
5135: CALL_OW 25
5139: ST_TO_ADDR
// end ; result := unit ;
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: LD_VAR 0 4
5149: ST_TO_ADDR
// end ;
5150: LD_VAR 0 3
5154: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5155: LD_INT 0
5157: PPUSH
5158: PPUSH
5159: PPUSH
// rnd = rand ( 1 , characters ) ;
5160: LD_ADDR_VAR 0 6
5164: PUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 12
5177: ST_TO_ADDR
// for i = 1 to characters do
5178: LD_ADDR_VAR 0 5
5182: PUSH
5183: DOUBLE
5184: LD_INT 1
5186: DEC
5187: ST_TO_ADDR
5188: LD_VAR 0 1
5192: PUSH
5193: FOR_TO
5194: IFFALSE 5304
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5196: LD_VAR 0 5
5200: PUSH
5201: LD_VAR 0 6
5205: EQUAL
5206: PUSH
5207: LD_VAR 0 1
5211: PUSH
5212: LD_VAR 0 5
5216: ARRAY
5217: PPUSH
5218: CALL_OW 258
5222: PUSH
5223: LD_INT 1
5225: EQUAL
5226: AND
5227: IFFALSE 5249
// Say ( characters [ i ] , dialogMID ) ;
5229: LD_VAR 0 1
5233: PUSH
5234: LD_VAR 0 5
5238: ARRAY
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5249: LD_VAR 0 5
5253: PUSH
5254: LD_VAR 0 6
5258: EQUAL
5259: PUSH
5260: LD_VAR 0 1
5264: PUSH
5265: LD_VAR 0 5
5269: ARRAY
5270: PPUSH
5271: CALL_OW 258
5275: PUSH
5276: LD_INT 2
5278: EQUAL
5279: AND
5280: IFFALSE 5302
// Say ( characters [ i ] , dialogFID ) ;
5282: LD_VAR 0 1
5286: PUSH
5287: LD_VAR 0 5
5291: ARRAY
5292: PPUSH
5293: LD_VAR 0 3
5297: PPUSH
5298: CALL_OW 88
// end ;
5302: GO 5193
5304: POP
5305: POP
// end ;
5306: LD_VAR 0 4
5310: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5311: LD_INT 0
5313: PPUSH
5314: PPUSH
// for i in charactersList do
5315: LD_ADDR_VAR 0 4
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: FOR_IN
5326: IFFALSE 5355
// begin if IsOk ( i ) then
5328: LD_VAR 0 4
5332: PPUSH
5333: CALL_OW 302
5337: IFFALSE 5353
// SaveCharacters ( i , ident ) ;
5339: LD_VAR 0 4
5343: PPUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: CALL_OW 38
// end ;
5353: GO 5325
5355: POP
5356: POP
// end ;
5357: LD_VAR 0 3
5361: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
// for i = 1 to count do
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: DOUBLE
5374: LD_INT 1
5376: DEC
5377: ST_TO_ADDR
5378: LD_VAR 0 6
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5465
// begin uc_side = side ;
5386: LD_ADDR_OWVAR 20
5390: PUSH
5391: LD_VAR 0 1
5395: ST_TO_ADDR
// uc_nation = nation ;
5396: LD_ADDR_OWVAR 21
5400: PUSH
5401: LD_VAR 0 2
5405: ST_TO_ADDR
// hc_gallery =  ;
5406: LD_ADDR_OWVAR 33
5410: PUSH
5411: LD_STRING 
5413: ST_TO_ADDR
// hc_name =  ;
5414: LD_ADDR_OWVAR 26
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5422: LD_INT 0
5424: PPUSH
5425: LD_VAR 0 5
5429: PPUSH
5430: LD_VAR 0 4
5434: PPUSH
5435: CALL_OW 380
// un = CreateHuman ;
5439: LD_ADDR_VAR 0 10
5443: PUSH
5444: CALL_OW 44
5448: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5449: LD_VAR 0 10
5453: PPUSH
5454: LD_VAR 0 3
5458: PPUSH
5459: CALL_OW 52
// end ;
5463: GO 5383
5465: POP
5466: POP
// end ;
5467: LD_VAR 0 7
5471: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
5476: PPUSH
// uc_side := GetSide ( b ) ;
5477: LD_ADDR_OWVAR 20
5481: PUSH
5482: LD_VAR 0 2
5486: PPUSH
5487: CALL_OW 255
5491: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5492: LD_ADDR_OWVAR 21
5496: PUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: CALL_OW 248
5506: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5507: LD_INT 0
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: LD_VAR 0 1
5517: PPUSH
5518: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5522: LD_ADDR_VAR 0 5
5526: PUSH
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 254
5536: PUSH
5537: LD_INT 3
5539: MINUS
5540: ST_TO_ADDR
// if dir < 0 then
5541: LD_VAR 0 5
5545: PUSH
5546: LD_INT 0
5548: LESS
5549: IFFALSE 5565
// dir := 6 + dir ;
5551: LD_ADDR_VAR 0 5
5555: PUSH
5556: LD_INT 6
5558: PUSH
5559: LD_VAR 0 5
5563: PLUS
5564: ST_TO_ADDR
// un := CreateHuman ;
5565: LD_ADDR_VAR 0 4
5569: PUSH
5570: CALL_OW 44
5574: ST_TO_ADDR
// SetDir ( un , dir ) ;
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_VAR 0 5
5584: PPUSH
5585: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5589: LD_VAR 0 4
5593: PPUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: CALL_OW 52
// end ;
5603: LD_VAR 0 3
5607: RET
// export function PrepareDifficulty ; begin
5608: LD_INT 0
5610: PPUSH
// if Difficulty = 1 then
5611: LD_OWVAR 67
5615: PUSH
5616: LD_INT 1
5618: EQUAL
5619: IFFALSE 5637
// begin RuSolMinLevel = 3 ;
5621: LD_ADDR_EXP 34
5625: PUSH
5626: LD_INT 3
5628: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5629: LD_ADDR_EXP 35
5633: PUSH
5634: LD_INT 6
5636: ST_TO_ADDR
// end ; if Difficulty = 2 then
5637: LD_OWVAR 67
5641: PUSH
5642: LD_INT 2
5644: EQUAL
5645: IFFALSE 5663
// begin RuSolMinLevel = 5 ;
5647: LD_ADDR_EXP 34
5651: PUSH
5652: LD_INT 5
5654: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5655: LD_ADDR_EXP 35
5659: PUSH
5660: LD_INT 6
5662: ST_TO_ADDR
// end ; if Difficulty = 3 then
5663: LD_OWVAR 67
5667: PUSH
5668: LD_INT 3
5670: EQUAL
5671: IFFALSE 5689
// begin RuSolMinLevel = 5 ;
5673: LD_ADDR_EXP 34
5677: PUSH
5678: LD_INT 5
5680: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5681: LD_ADDR_EXP 35
5685: PUSH
5686: LD_INT 7
5688: ST_TO_ADDR
// end ; end ;
5689: LD_VAR 0 1
5693: RET
// export function ShowQuery1 ; begin
5694: LD_INT 0
5696: PPUSH
// case query ( QKill ) of 1 :
5697: LD_STRING QKill
5699: PPUSH
5700: CALL_OW 97
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5724
5713: POP
// begin result = 1 ;
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// end ; 2 :
5722: GO 5763
5724: LD_INT 2
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5743
5732: POP
// begin result = 2 ;
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// end ; 3 :
5741: GO 5763
5743: LD_INT 3
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5762
5751: POP
// begin result = 3 ;
5752: LD_ADDR_VAR 0 1
5756: PUSH
5757: LD_INT 3
5759: ST_TO_ADDR
// end ; end ;
5760: GO 5763
5762: POP
// end ;
5763: LD_VAR 0 1
5767: RET
// export function ShowQuery2 ; begin
5768: LD_INT 0
5770: PPUSH
// case query ( QKill2 ) of 1 :
5771: LD_STRING QKill2
5773: PPUSH
5774: CALL_OW 97
5778: PUSH
5779: LD_INT 1
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5798
5787: POP
// begin result = 1 ;
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// end ; 2 :
5796: GO 5818
5798: LD_INT 2
5800: DOUBLE
5801: EQUAL
5802: IFTRUE 5806
5804: GO 5817
5806: POP
// begin result = 2 ;
5807: LD_ADDR_VAR 0 1
5811: PUSH
5812: LD_INT 2
5814: ST_TO_ADDR
// end ; end ;
5815: GO 5818
5817: POP
// end ;
5818: LD_VAR 0 1
5822: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5823: LD_INT 0
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
// for i = 1 to 72 do
5829: LD_ADDR_VAR 0 5
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_INT 72
5841: PUSH
5842: FOR_TO
5843: IFFALSE 5901
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5845: LD_VAR 0 5
5849: PPUSH
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 321
5859: PUSH
5860: LD_INT 1
5862: EQUAL
5863: PUSH
5864: LD_VAR 0 5
5868: PPUSH
5869: LD_VAR 0 3
5873: PPUSH
5874: CALL_OW 482
5878: PUSH
5879: LD_INT 1
5881: EQUAL
5882: AND
5883: IFFALSE 5899
// AddComResearch ( lab , i ) ;
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_VAR 0 5
5894: PPUSH
5895: CALL_OW 184
5899: GO 5842
5901: POP
5902: POP
// end ;
5903: LD_VAR 0 4
5907: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5908: LD_INT 0
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5915: LD_ADDR_VAR 0 6
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_VAR 0 1
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 25
5937: PUSH
5938: LD_INT 2
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 25
5947: PUSH
5948: LD_INT 16
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 24
5962: PUSH
5963: LD_INT 1000
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 69
5979: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5980: LD_ADDR_VAR 0 4
5984: PUSH
5985: LD_INT 22
5987: PUSH
5988: LD_VAR 0 1
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 21
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: LD_INT 1000
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: EMPTY
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
6037: LD_VAR 0 4
6041: PUSH
6042: LD_INT 0
6044: GREATER
6045: PUSH
6046: LD_VAR 0 6
6050: PUSH
6051: LD_INT 0
6053: GREATER
6054: AND
6055: IFFALSE 6121
// begin for i in engineerOk_list do
6057: LD_ADDR_VAR 0 5
6061: PUSH
6062: LD_VAR 0 6
6066: PUSH
6067: FOR_IN
6068: IFFALSE 6119
// begin for j in buildings_list do
6070: LD_ADDR_VAR 0 7
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: FOR_IN
6081: IFFALSE 6115
// begin AddComExitBuilding ( i ) ;
6083: LD_VAR 0 5
6087: PPUSH
6088: CALL_OW 182
// wait ( 0 0$1 ) ;
6092: LD_INT 35
6094: PPUSH
6095: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
6099: LD_VAR 0 5
6103: PPUSH
6104: LD_VAR 0 7
6108: PPUSH
6109: CALL_OW 190
// end ;
6113: GO 6080
6115: POP
6116: POP
// end ;
6117: GO 6067
6119: POP
6120: POP
// end ; if buildings_list = 0 then
6121: LD_VAR 0 4
6125: PUSH
6126: LD_INT 0
6128: EQUAL
6129: IFFALSE 6162
// begin for i in engineerOK_list do
6131: LD_ADDR_VAR 0 5
6135: PUSH
6136: LD_VAR 0 6
6140: PUSH
6141: FOR_IN
6142: IFFALSE 6160
// begin ComEnterUnit ( i , building ) ;
6144: LD_VAR 0 5
6148: PPUSH
6149: LD_VAR 0 2
6153: PPUSH
6154: CALL_OW 120
// end ;
6158: GO 6141
6160: POP
6161: POP
// end ; end ;
6162: LD_VAR 0 3
6166: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 250 ] , [ f_class , 4 ] ] ) ;
6174: LD_ADDR_VAR 0 6
6178: PUSH
6179: LD_INT 22
6181: PUSH
6182: LD_VAR 0 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 24
6193: PUSH
6194: LD_INT 250
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 25
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6221: LD_ADDR_VAR 0 9
6225: PUSH
6226: LD_VAR 0 3
6230: PPUSH
6231: LD_INT 22
6233: PUSH
6234: LD_VAR 0 1
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 21
6245: PUSH
6246: LD_INT 1
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: LD_INT 25
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 3
6272: PUSH
6273: LD_INT 24
6275: PUSH
6276: LD_INT 750
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PPUSH
6293: CALL_OW 70
6297: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6298: LD_VAR 0 9
6302: PUSH
6303: LD_INT 0
6305: GREATER
6306: PUSH
6307: LD_VAR 0 6
6311: PUSH
6312: LD_INT 0
6314: GREATER
6315: AND
6316: IFFALSE 6443
// begin for i = 1 to damageUnits do
6318: LD_ADDR_VAR 0 7
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 9
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6358
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6336: LD_VAR 0 9
6340: PUSH
6341: LD_VAR 0 7
6345: ARRAY
6346: PPUSH
6347: LD_VAR 0 2
6351: PPUSH
6352: CALL_OW 113
6356: GO 6333
6358: POP
6359: POP
// for i in sci_list do
6360: LD_ADDR_VAR 0 7
6364: PUSH
6365: LD_VAR 0 6
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6439
// begin ComExitBuilding ( i ) ;
6373: LD_VAR 0 7
6377: PPUSH
6378: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6382: LD_ADDR_VAR 0 8
6386: PUSH
6387: LD_VAR 0 2
6391: PPUSH
6392: LD_INT 22
6394: PUSH
6395: LD_VAR 0 1
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: PUSH
6409: FOR_IN
6410: IFFALSE 6435
// begin AddComHeal ( i , j ) ;
6412: LD_VAR 0 7
6416: PPUSH
6417: LD_VAR 0 8
6421: PPUSH
6422: CALL_OW 188
// wait ( 1 1$0 ) ;
6426: LD_INT 2100
6428: PPUSH
6429: CALL_OW 67
// end ;
6433: GO 6409
6435: POP
6436: POP
// end ;
6437: GO 6370
6439: POP
6440: POP
// end else
6441: GO 6457
// begin AddComEnterUnit ( sci_list , build ) ;
6443: LD_VAR 0 6
6447: PPUSH
6448: LD_VAR 0 4
6452: PPUSH
6453: CALL_OW 180
// end ; end ;
6457: LD_VAR 0 5
6461: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
6466: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6467: LD_INT 22
6469: PUSH
6470: LD_VAR 0 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 21
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PPUSH
6493: CALL_OW 69
6497: PUSH
6498: LD_VAR 0 3
6502: LESSEQUAL
6503: IFFALSE 6611
// begin for i = 1 to vehCount do
6505: LD_ADDR_VAR 0 9
6509: PUSH
6510: DOUBLE
6511: LD_INT 1
6513: DEC
6514: ST_TO_ADDR
6515: LD_VAR 0 3
6519: PUSH
6520: FOR_TO
6521: IFFALSE 6609
// begin weapon = weaponTab [ i ] ;
6523: LD_ADDR_VAR 0 10
6527: PUSH
6528: LD_VAR 0 4
6532: PUSH
6533: LD_VAR 0 9
6537: ARRAY
6538: ST_TO_ADDR
// if weapon = 46 then
6539: LD_VAR 0 10
6543: PUSH
6544: LD_INT 46
6546: EQUAL
6547: IFFALSE 6578
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6549: LD_VAR 0 2
6553: PPUSH
6554: LD_INT 24
6556: PPUSH
6557: LD_VAR 0 5
6561: PPUSH
6562: LD_VAR 0 6
6566: PPUSH
6567: LD_VAR 0 10
6571: PPUSH
6572: CALL_OW 185
// end else
6576: GO 6607
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_VAR 0 7
6587: PPUSH
6588: LD_VAR 0 5
6592: PPUSH
6593: LD_VAR 0 6
6597: PPUSH
6598: LD_VAR 0 10
6602: PPUSH
6603: CALL_OW 185
// end ; end ;
6607: GO 6520
6609: POP
6610: POP
// end ; end ;
6611: LD_VAR 0 8
6615: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6616: LD_INT 0
6618: PPUSH
6619: PPUSH
6620: PPUSH
6621: PPUSH
6622: PPUSH
// for i := 1 to russianTanks do
6623: LD_ADDR_VAR 0 4
6627: PUSH
6628: DOUBLE
6629: LD_INT 1
6631: DEC
6632: ST_TO_ADDR
6633: LD_EXP 36
6637: PUSH
6638: FOR_TO
6639: IFFALSE 7121
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 5
6648: PUSH
6649: LD_INT 6
6651: PUSH
6652: LD_INT 6
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: LD_OWVAR 67
6664: ARRAY
6665: EQUAL
6666: IFFALSE 7119
// begin repeat wait ( 0 0$1 ) ;
6668: LD_INT 35
6670: PPUSH
6671: CALL_OW 67
// for i in russianTanks do
6675: LD_ADDR_VAR 0 4
6679: PUSH
6680: LD_EXP 36
6684: PUSH
6685: FOR_IN
6686: IFFALSE 7107
// begin if GetLives ( i ) < 659 then
6688: LD_VAR 0 4
6692: PPUSH
6693: CALL_OW 256
6697: PUSH
6698: LD_INT 659
6700: LESS
6701: IFFALSE 6789
// begin tmp = i ;
6703: LD_ADDR_VAR 0 5
6707: PUSH
6708: LD_VAR 0 4
6712: ST_TO_ADDR
// for i := 1 to russianTanks do
6713: LD_ADDR_VAR 0 4
6717: PUSH
6718: DOUBLE
6719: LD_INT 1
6721: DEC
6722: ST_TO_ADDR
6723: LD_EXP 36
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6787
// begin if tmp = russianTanks [ i ] then
6731: LD_VAR 0 5
6735: PUSH
6736: LD_EXP 36
6740: PUSH
6741: LD_VAR 0 4
6745: ARRAY
6746: EQUAL
6747: IFFALSE 6785
// begin russianTanks = Delete ( russianTanks , i ) ;
6749: LD_ADDR_EXP 36
6753: PUSH
6754: LD_EXP 36
6758: PPUSH
6759: LD_VAR 0 4
6763: PPUSH
6764: CALL_OW 3
6768: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6769: LD_ADDR_EXP 37
6773: PUSH
6774: LD_EXP 37
6778: PUSH
6779: LD_VAR 0 5
6783: ADD
6784: ST_TO_ADDR
// end ; end ;
6785: GO 6728
6787: POP
6788: POP
// end ; wait ( 0 0$1 ) ;
6789: LD_INT 35
6791: PPUSH
6792: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6796: LD_INT 23
6798: PPUSH
6799: LD_INT 22
6801: PUSH
6802: LD_INT 1
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 70
6813: PUSH
6814: LD_INT 2
6816: GREATER
6817: IFFALSE 6927
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6819: LD_ADDR_VAR 0 6
6823: PUSH
6824: LD_INT 22
6826: PUSH
6827: LD_VAR 0 2
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: PPUSH
6841: LD_VAR 0 4
6845: PPUSH
6846: CALL_OW 74
6850: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6851: LD_ADDR_VAR 0 7
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_VAR 0 2
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 2
6870: PUSH
6871: LD_INT 59
6873: PUSH
6874: EMPTY
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 21
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: PPUSH
6910: CALL_OW 69
6914: PPUSH
6915: LD_VAR 0 4
6919: PPUSH
6920: CALL_OW 74
6924: ST_TO_ADDR
// end else
6925: GO 7039
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6927: LD_ADDR_VAR 0 6
6931: PUSH
6932: LD_INT 23
6934: PPUSH
6935: LD_INT 22
6937: PUSH
6938: LD_VAR 0 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 71
6951: PPUSH
6952: LD_VAR 0 4
6956: PPUSH
6957: CALL_OW 74
6961: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6962: LD_ADDR_VAR 0 7
6966: PUSH
6967: LD_INT 23
6969: PPUSH
6970: LD_INT 22
6972: PUSH
6973: LD_VAR 0 2
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 59
6987: PUSH
6988: EMPTY
6989: LIST
6990: PUSH
6991: LD_INT 21
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 21
7003: PUSH
7004: LD_INT 2
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: PPUSH
7024: CALL_OW 71
7028: PPUSH
7029: LD_VAR 0 4
7033: PPUSH
7034: CALL_OW 74
7038: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7039: LD_VAR 0 4
7043: PPUSH
7044: LD_VAR 0 6
7048: PPUSH
7049: CALL_OW 296
7053: PUSH
7054: LD_INT 8
7056: PLUS
7057: PUSH
7058: LD_VAR 0 4
7062: PPUSH
7063: LD_VAR 0 7
7067: PPUSH
7068: CALL_OW 296
7072: LESS
7073: IFFALSE 7091
// begin ComAttackUnit ( i , target1 ) ;
7075: LD_VAR 0 4
7079: PPUSH
7080: LD_VAR 0 6
7084: PPUSH
7085: CALL_OW 115
// end else
7089: GO 7105
// begin ComAttackUnit ( i , target2 ) ;
7091: LD_VAR 0 4
7095: PPUSH
7096: LD_VAR 0 7
7100: PPUSH
7101: CALL_OW 115
// end ; end ;
7105: GO 6685
7107: POP
7108: POP
// until russianTanks = 0 ;
7109: LD_EXP 36
7113: PUSH
7114: LD_INT 0
7116: EQUAL
7117: IFFALSE 6668
// end ; end ;
7119: GO 6638
7121: POP
7122: POP
// end ;
7123: LD_VAR 0 3
7127: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7128: LD_INT 0
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
7135: PPUSH
7136: PPUSH
7137: PPUSH
7138: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7139: LD_ADDR_VAR 0 8
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_VAR 0 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 21
7158: PUSH
7159: LD_INT 2
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 24
7168: PUSH
7169: LD_INT 660
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 58
7181: PUSH
7182: EMPTY
7183: LIST
7184: PUSH
7185: LD_INT 2
7187: PUSH
7188: LD_INT 34
7190: PUSH
7191: LD_INT 43
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 34
7200: PUSH
7201: LD_INT 44
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 34
7210: PUSH
7211: LD_INT 46
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL_OW 69
7239: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7240: LD_ADDR_VAR 0 9
7244: PUSH
7245: LD_INT 22
7247: PUSH
7248: LD_VAR 0 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 21
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 3
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 660
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7294: LD_ADDR_VAR 0 10
7298: PUSH
7299: LD_VAR 0 2
7303: PPUSH
7304: LD_INT 22
7306: PUSH
7307: LD_VAR 0 1
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 21
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 3
7328: PUSH
7329: LD_INT 24
7331: PUSH
7332: LD_INT 1000
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: PPUSH
7348: CALL_OW 70
7352: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7353: LD_ADDR_VAR 0 11
7357: PUSH
7358: LD_VAR 0 2
7362: PPUSH
7363: LD_INT 22
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 21
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 1000
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 58
7397: PUSH
7398: EMPTY
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 70
7411: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7412: LD_ADDR_VAR 0 12
7416: PUSH
7417: EMPTY
7418: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7419: LD_ADDR_VAR 0 13
7423: PUSH
7424: LD_VAR 0 2
7428: PPUSH
7429: LD_INT 22
7431: PUSH
7432: LD_VAR 0 1
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 25
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PPUSH
7455: CALL_OW 70
7459: ST_TO_ADDR
// if damageVehicle_list > 0 then
7460: LD_VAR 0 9
7464: PUSH
7465: LD_INT 0
7467: GREATER
7468: IFFALSE 7506
// for i in damageVehicle_list do
7470: LD_ADDR_VAR 0 6
7474: PUSH
7475: LD_VAR 0 9
7479: PUSH
7480: FOR_IN
7481: IFFALSE 7504
// ComMoveXY ( i , repX , repY ) ;
7483: LD_VAR 0 6
7487: PPUSH
7488: LD_VAR 0 3
7492: PPUSH
7493: LD_VAR 0 4
7497: PPUSH
7498: CALL_OW 111
7502: GO 7480
7504: POP
7505: POP
// if vehicleNeedRepair_list > 0 then
7506: LD_VAR 0 10
7510: PUSH
7511: LD_INT 0
7513: GREATER
7514: IFFALSE 7601
// begin for i in vehicleNeedRepair_list do
7516: LD_ADDR_VAR 0 6
7520: PUSH
7521: LD_VAR 0 10
7525: PUSH
7526: FOR_IN
7527: IFFALSE 7599
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7529: LD_ADDR_VAR 0 12
7533: PUSH
7534: LD_VAR 0 12
7538: PUSH
7539: LD_VAR 0 6
7543: PPUSH
7544: CALL_OW 313
7548: ADD
7549: ST_TO_ADDR
// for j in mechanicInside_list do
7550: LD_ADDR_VAR 0 7
7554: PUSH
7555: LD_VAR 0 12
7559: PUSH
7560: FOR_IN
7561: IFFALSE 7595
// begin ComExitVehicle ( j ) ;
7563: LD_VAR 0 7
7567: PPUSH
7568: CALL_OW 121
// wait ( 0 0$1 ) ;
7572: LD_INT 35
7574: PPUSH
7575: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7579: LD_VAR 0 7
7583: PPUSH
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 189
// end ;
7593: GO 7560
7595: POP
7596: POP
// end ;
7597: GO 7526
7599: POP
7600: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7601: LD_VAR 0 11
7605: PUSH
7606: LD_INT 0
7608: GREATER
7609: IFFALSE 7633
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7611: LD_VAR 0 13
7615: PUSH
7616: LD_INT 1
7618: ARRAY
7619: PPUSH
7620: LD_VAR 0 11
7624: PUSH
7625: LD_INT 1
7627: ARRAY
7628: PPUSH
7629: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7633: LD_VAR 0 8
7637: PUSH
7638: LD_INT 0
7640: GREATER
7641: PUSH
7642: LD_EXP 37
7646: PUSH
7647: LD_INT 0
7649: GREATER
7650: AND
7651: IFFALSE 7894
// begin for i := 1 to vehicleOK_list do
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: DOUBLE
7659: LD_INT 1
7661: DEC
7662: ST_TO_ADDR
7663: LD_VAR 0 8
7667: PUSH
7668: FOR_TO
7669: IFFALSE 7892
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7671: LD_VAR 0 6
7675: PUSH
7676: LD_INT 5
7678: PUSH
7679: LD_INT 6
7681: PUSH
7682: LD_INT 6
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: LD_OWVAR 67
7694: ARRAY
7695: EQUAL
7696: IFFALSE 7890
// begin for i in vehicleOk_list do
7698: LD_ADDR_VAR 0 6
7702: PUSH
7703: LD_VAR 0 8
7707: PUSH
7708: FOR_IN
7709: IFFALSE 7729
// russianTanks = russianTanks ^ i ;
7711: LD_ADDR_EXP 36
7715: PUSH
7716: LD_EXP 36
7720: PUSH
7721: LD_VAR 0 6
7725: ADD
7726: ST_TO_ADDR
7727: GO 7708
7729: POP
7730: POP
// for i in vehicleOK_list do
7731: LD_ADDR_VAR 0 6
7735: PUSH
7736: LD_VAR 0 8
7740: PUSH
7741: FOR_IN
7742: IFFALSE 7758
// SetFuel ( i , 100 ) ;
7744: LD_VAR 0 6
7748: PPUSH
7749: LD_INT 100
7751: PPUSH
7752: CALL_OW 240
7756: GO 7741
7758: POP
7759: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7760: LD_ADDR_EXP 37
7764: PUSH
7765: LD_EXP 37
7769: PPUSH
7770: LD_INT 1
7772: PPUSH
7773: CALL_OW 3
7777: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7778: LD_ADDR_EXP 37
7782: PUSH
7783: LD_EXP 37
7787: PPUSH
7788: LD_INT 1
7790: PPUSH
7791: CALL_OW 3
7795: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7796: LD_ADDR_EXP 37
7800: PUSH
7801: LD_EXP 37
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 3
7813: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7814: LD_ADDR_EXP 37
7818: PUSH
7819: LD_EXP 37
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: CALL_OW 3
7831: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7832: LD_ADDR_EXP 37
7836: PUSH
7837: LD_EXP 37
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: CALL_OW 3
7849: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7850: LD_OWVAR 67
7854: PUSH
7855: LD_INT 2
7857: EQUAL
7858: PUSH
7859: LD_OWVAR 67
7863: PUSH
7864: LD_INT 3
7866: EQUAL
7867: OR
7868: IFFALSE 7888
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7870: LD_ADDR_EXP 37
7874: PUSH
7875: LD_EXP 37
7879: PPUSH
7880: LD_INT 1
7882: PPUSH
7883: CALL_OW 3
7887: ST_TO_ADDR
// break ;
7888: GO 7892
// end ; end ;
7890: GO 7668
7892: POP
7893: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7894: LD_ADDR_VAR 0 6
7898: PUSH
7899: LD_VAR 0 2
7903: PPUSH
7904: LD_INT 22
7906: PUSH
7907: LD_VAR 0 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 25
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 70
7934: NOT
7935: PUSH
7936: FOR_IN
7937: IFFALSE 7960
// ComMoveXY ( i , repX , repY ) ;
7939: LD_VAR 0 6
7943: PPUSH
7944: LD_VAR 0 3
7948: PPUSH
7949: LD_VAR 0 4
7953: PPUSH
7954: CALL_OW 111
7958: GO 7936
7960: POP
7961: POP
// end ;
7962: LD_VAR 0 5
7966: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
// enable ;
7973: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7974: LD_ADDR_VAR 0 7
7978: PUSH
7979: LD_VAR 0 3
7983: PPUSH
7984: CALL_OW 435
7988: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7989: LD_ADDR_VAR 0 6
7993: PUSH
7994: LD_INT 22
7996: PUSH
7997: LD_VAR 0 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 34
8008: PUSH
8009: LD_VAR 0 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: PPUSH
8022: CALL_OW 69
8026: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8027: LD_VAR 0 6
8031: PUSH
8032: LD_INT 0
8034: GREATER
8035: PUSH
8036: LD_VAR 0 3
8040: PPUSH
8041: CALL_OW 435
8045: AND
8046: PUSH
8047: LD_VAR 0 7
8051: PUSH
8052: LD_INT 0
8054: GREATER
8055: AND
8056: IFFALSE 8105
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8058: LD_VAR 0 6
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 7
8071: PUSH
8072: LD_INT 1
8074: ARRAY
8075: PPUSH
8076: LD_VAR 0 7
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8089: LD_VAR 0 6
8093: PUSH
8094: LD_INT 1
8096: ARRAY
8097: PPUSH
8098: LD_INT 100
8100: PPUSH
8101: CALL_OW 240
// end ; end ;
8105: LD_VAR 0 4
8109: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8110: LD_INT 0
8112: PPUSH
8113: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8114: LD_INT 22
8116: PUSH
8117: LD_VAR 0 1
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 25
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 69
8144: PUSH
8145: LD_INT 0
8147: GREATER
8148: PUSH
8149: LD_INT 22
8151: PUSH
8152: LD_VAR 0 1
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 3
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 3
8173: PUSH
8174: LD_INT 24
8176: PUSH
8177: LD_INT 1000
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: PPUSH
8193: CALL_OW 69
8197: PUSH
8198: LD_INT 0
8200: EQUAL
8201: AND
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: LD_INT 0
8210: GREATER
8211: AND
8212: IFFALSE 8311
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8214: LD_ADDR_VAR 0 4
8218: PUSH
8219: LD_INT 22
8221: PUSH
8222: LD_VAR 0 1
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 25
8233: PUSH
8234: LD_INT 2
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PPUSH
8245: CALL_OW 69
8249: PUSH
8250: FOR_IN
8251: IFFALSE 8309
// begin AddComExitBuilding ( i ) ;
8253: LD_VAR 0 4
8257: PPUSH
8258: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8262: LD_VAR 0 4
8266: PPUSH
8267: LD_VAR 0 2
8271: PUSH
8272: LD_INT 1
8274: ARRAY
8275: PPUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 2
8283: ARRAY
8284: PPUSH
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 3
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 4
8301: ARRAY
8302: PPUSH
8303: CALL_OW 205
// end ;
8307: GO 8250
8309: POP
8310: POP
// end ; end ;
8311: LD_VAR 0 3
8315: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8316: LD_INT 0
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8325: LD_ADDR_VAR 0 7
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_VAR 0 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 25
8344: PUSH
8345: LD_INT 1
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: LD_INT 56
8354: PUSH
8355: EMPTY
8356: LIST
8357: PUSH
8358: LD_INT 24
8360: PUSH
8361: LD_INT 700
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 69
8378: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8379: LD_ADDR_VAR 0 8
8383: PUSH
8384: LD_INT 22
8386: PUSH
8387: LD_VAR 0 1
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 30
8398: PUSH
8399: LD_INT 32
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 58
8408: PUSH
8409: EMPTY
8410: LIST
8411: PUSH
8412: LD_INT 24
8414: PUSH
8415: LD_INT 251
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PPUSH
8428: CALL_OW 69
8432: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8433: LD_ADDR_VAR 0 10
8437: PUSH
8438: LD_INT 22
8440: PUSH
8441: LD_VAR 0 1
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: LD_INT 2
8452: PUSH
8453: LD_INT 25
8455: PUSH
8456: LD_INT 5
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: PUSH
8463: LD_INT 25
8465: PUSH
8466: LD_INT 8
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 25
8475: PUSH
8476: LD_INT 9
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PPUSH
8493: CALL_OW 69
8497: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8498: LD_ADDR_VAR 0 9
8502: PUSH
8503: LD_VAR 0 2
8507: PPUSH
8508: CALL_OW 313
8512: PUSH
8513: LD_VAR 0 10
8517: DIFF
8518: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8519: LD_VAR 0 8
8523: PUSH
8524: LD_INT 0
8526: EQUAL
8527: PUSH
8528: LD_VAR 0 9
8532: PUSH
8533: LD_INT 0
8535: EQUAL
8536: AND
8537: IFFALSE 8583
// begin for i in soldiers_list do
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_VAR 0 7
8548: PUSH
8549: FOR_IN
8550: IFFALSE 8579
// begin if IsOK ( build ) then
8552: LD_VAR 0 2
8556: PPUSH
8557: CALL_OW 302
8561: IFFALSE 8577
// ComEnterUnit ( i , build ) ;
8563: LD_VAR 0 5
8567: PPUSH
8568: LD_VAR 0 2
8572: PPUSH
8573: CALL_OW 120
// end ;
8577: GO 8549
8579: POP
8580: POP
// end else
8581: GO 8668
// begin for i = 1 to turretList do
8583: LD_ADDR_VAR 0 5
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_VAR 0 8
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8666
// begin for j = 1 to temp do
8601: LD_ADDR_VAR 0 6
8605: PUSH
8606: DOUBLE
8607: LD_INT 1
8609: DEC
8610: ST_TO_ADDR
8611: LD_VAR 0 9
8615: PUSH
8616: FOR_TO
8617: IFFALSE 8662
// begin ComExitBuilding ( temp [ j ] ) ;
8619: LD_VAR 0 9
8623: PUSH
8624: LD_VAR 0 6
8628: ARRAY
8629: PPUSH
8630: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8634: LD_VAR 0 9
8638: PUSH
8639: LD_VAR 0 6
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 8
8649: PUSH
8650: LD_VAR 0 5
8654: ARRAY
8655: PPUSH
8656: CALL_OW 180
// end ;
8660: GO 8616
8662: POP
8663: POP
// end ;
8664: GO 8598
8666: POP
8667: POP
// end ; end ;
8668: LD_VAR 0 4
8672: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
8677: PPUSH
8678: PPUSH
8679: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8680: LD_ADDR_VAR 0 6
8684: PUSH
8685: LD_INT 22
8687: PUSH
8688: LD_VAR 0 1
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: LD_INT 30
8702: PUSH
8703: LD_INT 31
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 30
8712: PUSH
8713: LD_INT 32
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 30
8722: PUSH
8723: LD_INT 33
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 30
8732: PUSH
8733: LD_INT 4
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 30
8742: PUSH
8743: LD_INT 5
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8767: LD_ADDR_VAR 0 7
8771: PUSH
8772: LD_INT 22
8774: PUSH
8775: LD_VAR 0 2
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 21
8786: PUSH
8787: LD_INT 3
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 58
8796: PUSH
8797: EMPTY
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8810: LD_VAR 0 6
8814: PUSH
8815: LD_INT 0
8817: GREATER
8818: PUSH
8819: LD_VAR 0 7
8823: PUSH
8824: LD_INT 0
8826: GREATER
8827: AND
8828: IFFALSE 8898
// begin for i in turretsList do
8830: LD_ADDR_VAR 0 4
8834: PUSH
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_IN
8841: IFFALSE 8896
// begin for j in enemyBuildings do
8843: LD_ADDR_VAR 0 5
8847: PUSH
8848: LD_VAR 0 7
8852: PUSH
8853: FOR_IN
8854: IFFALSE 8892
// begin if GetDistUnits ( i , j ) < 20 then
8856: LD_VAR 0 4
8860: PPUSH
8861: LD_VAR 0 5
8865: PPUSH
8866: CALL_OW 296
8870: PUSH
8871: LD_INT 20
8873: LESS
8874: IFFALSE 8890
// begin ComAttackUnit ( i , j ) ;
8876: LD_VAR 0 4
8880: PPUSH
8881: LD_VAR 0 5
8885: PPUSH
8886: CALL_OW 115
// end ; end ;
8890: GO 8853
8892: POP
8893: POP
// end ;
8894: GO 8840
8896: POP
8897: POP
// end ; end ;
8898: LD_VAR 0 3
8902: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
// for i = 1 to medicCount do
8916: LD_ADDR_VAR 0 14
8920: PUSH
8921: DOUBLE
8922: LD_INT 1
8924: DEC
8925: ST_TO_ADDR
8926: LD_VAR 0 7
8930: PUSH
8931: FOR_TO
8932: IFFALSE 9014
// begin uc_side = side ;
8934: LD_ADDR_OWVAR 20
8938: PUSH
8939: LD_VAR 0 1
8943: ST_TO_ADDR
// uc_nation = nation ;
8944: LD_ADDR_OWVAR 21
8948: PUSH
8949: LD_VAR 0 2
8953: ST_TO_ADDR
// hc_name =  ;
8954: LD_ADDR_OWVAR 26
8958: PUSH
8959: LD_STRING 
8961: ST_TO_ADDR
// hc_gallery =  ;
8962: LD_ADDR_OWVAR 33
8966: PUSH
8967: LD_STRING 
8969: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8970: LD_INT 0
8972: PPUSH
8973: LD_INT 4
8975: PPUSH
8976: LD_VAR 0 8
8980: PPUSH
8981: CALL_OW 380
// un = CreateHuman ;
8985: LD_ADDR_VAR 0 16
8989: PUSH
8990: CALL_OW 44
8994: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8995: LD_VAR 0 16
8999: PPUSH
9000: LD_VAR 0 9
9004: PPUSH
9005: LD_INT 0
9007: PPUSH
9008: CALL_OW 49
// end ;
9012: GO 8931
9014: POP
9015: POP
// for i = 1 to soldierCount do
9016: LD_ADDR_VAR 0 14
9020: PUSH
9021: DOUBLE
9022: LD_INT 1
9024: DEC
9025: ST_TO_ADDR
9026: LD_VAR 0 3
9030: PUSH
9031: FOR_TO
9032: IFFALSE 9114
// begin uc_side = side ;
9034: LD_ADDR_OWVAR 20
9038: PUSH
9039: LD_VAR 0 1
9043: ST_TO_ADDR
// uc_nation = nation ;
9044: LD_ADDR_OWVAR 21
9048: PUSH
9049: LD_VAR 0 2
9053: ST_TO_ADDR
// hc_name =  ;
9054: LD_ADDR_OWVAR 26
9058: PUSH
9059: LD_STRING 
9061: ST_TO_ADDR
// hc_gallery =  ;
9062: LD_ADDR_OWVAR 33
9066: PUSH
9067: LD_STRING 
9069: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9070: LD_INT 0
9072: PPUSH
9073: LD_INT 1
9075: PPUSH
9076: LD_VAR 0 8
9080: PPUSH
9081: CALL_OW 380
// un = CreateHuman ;
9085: LD_ADDR_VAR 0 16
9089: PUSH
9090: CALL_OW 44
9094: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9095: LD_VAR 0 16
9099: PPUSH
9100: LD_VAR 0 9
9104: PPUSH
9105: LD_INT 0
9107: PPUSH
9108: CALL_OW 49
// end ;
9112: GO 9031
9114: POP
9115: POP
// for i = 1 to sniperCount do
9116: LD_ADDR_VAR 0 14
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_VAR 0 4
9130: PUSH
9131: FOR_TO
9132: IFFALSE 9214
// begin uc_side = side ;
9134: LD_ADDR_OWVAR 20
9138: PUSH
9139: LD_VAR 0 1
9143: ST_TO_ADDR
// uc_nation = nation ;
9144: LD_ADDR_OWVAR 21
9148: PUSH
9149: LD_VAR 0 2
9153: ST_TO_ADDR
// hc_name =  ;
9154: LD_ADDR_OWVAR 26
9158: PUSH
9159: LD_STRING 
9161: ST_TO_ADDR
// hc_gallery =  ;
9162: LD_ADDR_OWVAR 33
9166: PUSH
9167: LD_STRING 
9169: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9170: LD_INT 0
9172: PPUSH
9173: LD_INT 5
9175: PPUSH
9176: LD_VAR 0 8
9180: PPUSH
9181: CALL_OW 380
// un = CreateHuman ;
9185: LD_ADDR_VAR 0 16
9189: PUSH
9190: CALL_OW 44
9194: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9195: LD_VAR 0 16
9199: PPUSH
9200: LD_VAR 0 9
9204: PPUSH
9205: LD_INT 0
9207: PPUSH
9208: CALL_OW 49
// end ;
9212: GO 9131
9214: POP
9215: POP
// for i = 1 to bazookCount do
9216: LD_ADDR_VAR 0 14
9220: PUSH
9221: DOUBLE
9222: LD_INT 1
9224: DEC
9225: ST_TO_ADDR
9226: LD_VAR 0 5
9230: PUSH
9231: FOR_TO
9232: IFFALSE 9314
// begin uc_side = side ;
9234: LD_ADDR_OWVAR 20
9238: PUSH
9239: LD_VAR 0 1
9243: ST_TO_ADDR
// uc_nation = nation ;
9244: LD_ADDR_OWVAR 21
9248: PUSH
9249: LD_VAR 0 2
9253: ST_TO_ADDR
// hc_name =  ;
9254: LD_ADDR_OWVAR 26
9258: PUSH
9259: LD_STRING 
9261: ST_TO_ADDR
// hc_gallery =  ;
9262: LD_ADDR_OWVAR 33
9266: PUSH
9267: LD_STRING 
9269: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9270: LD_INT 0
9272: PPUSH
9273: LD_INT 9
9275: PPUSH
9276: LD_VAR 0 8
9280: PPUSH
9281: CALL_OW 380
// un = CreateHuman ;
9285: LD_ADDR_VAR 0 16
9289: PUSH
9290: CALL_OW 44
9294: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9295: LD_VAR 0 16
9299: PPUSH
9300: LD_VAR 0 9
9304: PPUSH
9305: LD_INT 0
9307: PPUSH
9308: CALL_OW 49
// end ;
9312: GO 9231
9314: POP
9315: POP
// for i = 1 to mortalCount do
9316: LD_ADDR_VAR 0 14
9320: PUSH
9321: DOUBLE
9322: LD_INT 1
9324: DEC
9325: ST_TO_ADDR
9326: LD_VAR 0 6
9330: PUSH
9331: FOR_TO
9332: IFFALSE 9414
// begin uc_side = side ;
9334: LD_ADDR_OWVAR 20
9338: PUSH
9339: LD_VAR 0 1
9343: ST_TO_ADDR
// uc_nation = nation ;
9344: LD_ADDR_OWVAR 21
9348: PUSH
9349: LD_VAR 0 2
9353: ST_TO_ADDR
// hc_name =  ;
9354: LD_ADDR_OWVAR 26
9358: PUSH
9359: LD_STRING 
9361: ST_TO_ADDR
// hc_gallery =  ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING 
9369: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9370: LD_INT 0
9372: PPUSH
9373: LD_INT 8
9375: PPUSH
9376: LD_VAR 0 8
9380: PPUSH
9381: CALL_OW 380
// un = CreateHuman ;
9385: LD_ADDR_VAR 0 16
9389: PUSH
9390: CALL_OW 44
9394: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9395: LD_VAR 0 16
9399: PPUSH
9400: LD_VAR 0 9
9404: PPUSH
9405: LD_INT 0
9407: PPUSH
9408: CALL_OW 49
// end ;
9412: GO 9331
9414: POP
9415: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9416: LD_ADDR_VAR 0 19
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_VAR 0 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 25
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 25
9448: PUSH
9449: LD_INT 5
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 25
9458: PUSH
9459: LD_INT 8
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 25
9468: PUSH
9469: LD_INT 9
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 69
9491: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9492: LD_ADDR_VAR 0 18
9496: PUSH
9497: LD_INT 22
9499: PUSH
9500: LD_VAR 0 1
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: LD_INT 25
9511: PUSH
9512: LD_INT 4
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 69
9527: ST_TO_ADDR
// for i in medic_list do
9528: LD_ADDR_VAR 0 14
9532: PUSH
9533: LD_VAR 0 18
9537: PUSH
9538: FOR_IN
9539: IFFALSE 9557
// ComMoveToArea ( i , healArea ) ;
9541: LD_VAR 0 14
9545: PPUSH
9546: LD_VAR 0 10
9550: PPUSH
9551: CALL_OW 113
9555: GO 9538
9557: POP
9558: POP
// if strategy = 1 then
9559: LD_VAR 0 12
9563: PUSH
9564: LD_INT 1
9566: EQUAL
9567: IFFALSE 10272
// begin repeat wait ( 0 0$3 ) ;
9569: LD_INT 105
9571: PPUSH
9572: CALL_OW 67
// for i in soldiersOK_list do
9576: LD_ADDR_VAR 0 14
9580: PUSH
9581: LD_VAR 0 19
9585: PUSH
9586: FOR_IN
9587: IFFALSE 9621
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9589: LD_VAR 0 14
9593: PPUSH
9594: LD_INT 80
9596: PPUSH
9597: LD_INT 109
9599: PPUSH
9600: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9604: LD_VAR 0 14
9608: PPUSH
9609: LD_INT 39
9611: PPUSH
9612: LD_INT 49
9614: PPUSH
9615: CALL_OW 174
// end ;
9619: GO 9586
9621: POP
9622: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9623: LD_INT 15
9625: PPUSH
9626: LD_INT 22
9628: PUSH
9629: LD_VAR 0 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 70
9642: PUSH
9643: LD_INT 0
9645: GREATER
9646: IFFALSE 9569
// repeat wait ( 0 0$1 ) ;
9648: LD_INT 35
9650: PPUSH
9651: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9655: LD_ADDR_VAR 0 17
9659: PUSH
9660: LD_INT 22
9662: PUSH
9663: LD_VAR 0 1
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: LD_INT 24
9680: PUSH
9681: LD_INT 550
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 24
9694: PUSH
9695: LD_INT 250
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PPUSH
9711: CALL_OW 69
9715: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9716: LD_ADDR_VAR 0 19
9720: PUSH
9721: LD_INT 22
9723: PUSH
9724: LD_VAR 0 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 2
9735: PUSH
9736: LD_INT 25
9738: PUSH
9739: LD_INT 1
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: LD_INT 5
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 8
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: LD_INT 25
9768: PUSH
9769: LD_INT 9
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 24
9785: PUSH
9786: LD_INT 1000
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: PPUSH
9798: CALL_OW 69
9802: ST_TO_ADDR
// if medicCount > 0 then
9803: LD_VAR 0 7
9807: PUSH
9808: LD_INT 0
9810: GREATER
9811: IFFALSE 9885
// begin if damageUnit_list > 0 then
9813: LD_VAR 0 17
9817: PUSH
9818: LD_INT 0
9820: GREATER
9821: IFFALSE 9885
// begin for i in damageUnit_list do
9823: LD_ADDR_VAR 0 14
9827: PUSH
9828: LD_VAR 0 17
9832: PUSH
9833: FOR_IN
9834: IFFALSE 9883
// begin ComMoveToArea ( i , healArea ) ;
9836: LD_VAR 0 14
9840: PPUSH
9841: LD_VAR 0 10
9845: PPUSH
9846: CALL_OW 113
// for j in medic_list do
9850: LD_ADDR_VAR 0 15
9854: PUSH
9855: LD_VAR 0 18
9859: PUSH
9860: FOR_IN
9861: IFFALSE 9879
// AddComHeal ( j , i ) ;
9863: LD_VAR 0 15
9867: PPUSH
9868: LD_VAR 0 14
9872: PPUSH
9873: CALL_OW 188
9877: GO 9860
9879: POP
9880: POP
// end ;
9881: GO 9833
9883: POP
9884: POP
// end ; end ; for i in soldiersOK_list do
9885: LD_ADDR_VAR 0 14
9889: PUSH
9890: LD_VAR 0 19
9894: PUSH
9895: FOR_IN
9896: IFFALSE 10072
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9898: LD_ADDR_VAR 0 22
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_VAR 0 11
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 69
9919: PPUSH
9920: LD_VAR 0 14
9924: PPUSH
9925: CALL_OW 74
9929: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9930: LD_ADDR_VAR 0 23
9934: PUSH
9935: LD_INT 22
9937: PUSH
9938: LD_VAR 0 11
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 59
9952: PUSH
9953: EMPTY
9954: LIST
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: PPUSH
9994: LD_VAR 0 14
9998: PPUSH
9999: CALL_OW 74
10003: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10004: LD_VAR 0 14
10008: PPUSH
10009: LD_VAR 0 22
10013: PPUSH
10014: CALL_OW 296
10018: PUSH
10019: LD_INT 8
10021: PLUS
10022: PUSH
10023: LD_VAR 0 14
10027: PPUSH
10028: LD_VAR 0 23
10032: PPUSH
10033: CALL_OW 296
10037: LESS
10038: IFFALSE 10056
// begin ComAttackUnit ( i , target1 ) ;
10040: LD_VAR 0 14
10044: PPUSH
10045: LD_VAR 0 22
10049: PPUSH
10050: CALL_OW 115
// end else
10054: GO 10070
// begin ComAttackUnit ( i , target2 ) ;
10056: LD_VAR 0 14
10060: PPUSH
10061: LD_VAR 0 23
10065: PPUSH
10066: CALL_OW 115
// end ; end ;
10070: GO 9895
10072: POP
10073: POP
// for i in soldiersOK_list do
10074: LD_ADDR_VAR 0 14
10078: PUSH
10079: LD_VAR 0 19
10083: PUSH
10084: FOR_IN
10085: IFFALSE 10261
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10087: LD_ADDR_VAR 0 22
10091: PUSH
10092: LD_INT 22
10094: PUSH
10095: LD_VAR 0 11
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 69
10108: PPUSH
10109: LD_VAR 0 14
10113: PPUSH
10114: CALL_OW 74
10118: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10119: LD_ADDR_VAR 0 23
10123: PUSH
10124: LD_INT 22
10126: PUSH
10127: LD_VAR 0 11
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 59
10141: PUSH
10142: EMPTY
10143: LIST
10144: PUSH
10145: LD_INT 21
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 21
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: PPUSH
10183: LD_VAR 0 14
10187: PPUSH
10188: CALL_OW 74
10192: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10193: LD_VAR 0 14
10197: PPUSH
10198: LD_VAR 0 22
10202: PPUSH
10203: CALL_OW 296
10207: PUSH
10208: LD_INT 8
10210: PLUS
10211: PUSH
10212: LD_VAR 0 14
10216: PPUSH
10217: LD_VAR 0 23
10221: PPUSH
10222: CALL_OW 296
10226: LESS
10227: IFFALSE 10245
// begin ComAttackUnit ( i , target1 ) ;
10229: LD_VAR 0 14
10233: PPUSH
10234: LD_VAR 0 22
10238: PPUSH
10239: CALL_OW 115
// end else
10243: GO 10259
// begin ComAttackUnit ( i , target2 ) ;
10245: LD_VAR 0 14
10249: PPUSH
10250: LD_VAR 0 23
10254: PPUSH
10255: CALL_OW 115
// end ; end ;
10259: GO 10084
10261: POP
10262: POP
// until soldiersOK_list = [ ] ;
10263: LD_VAR 0 19
10267: PUSH
10268: EMPTY
10269: EQUAL
10270: IFFALSE 9648
// end ; if strategy = 2 then
10272: LD_VAR 0 12
10276: PUSH
10277: LD_INT 2
10279: EQUAL
10280: IFFALSE 10985
// begin repeat wait ( 0 0$1 ) ;
10282: LD_INT 35
10284: PPUSH
10285: CALL_OW 67
// for i in soldiersOK_list do
10289: LD_ADDR_VAR 0 14
10293: PUSH
10294: LD_VAR 0 19
10298: PUSH
10299: FOR_IN
10300: IFFALSE 10334
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10302: LD_VAR 0 14
10306: PPUSH
10307: LD_INT 117
10309: PPUSH
10310: LD_INT 97
10312: PPUSH
10313: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10317: LD_VAR 0 14
10321: PPUSH
10322: LD_INT 94
10324: PPUSH
10325: LD_INT 50
10327: PPUSH
10328: CALL_OW 174
// end ;
10332: GO 10299
10334: POP
10335: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10336: LD_INT 16
10338: PPUSH
10339: LD_INT 22
10341: PUSH
10342: LD_VAR 0 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 70
10355: PUSH
10356: LD_INT 0
10358: GREATER
10359: IFFALSE 10282
// repeat wait ( 0 0$3 ) ;
10361: LD_INT 105
10363: PPUSH
10364: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10368: LD_ADDR_VAR 0 17
10372: PUSH
10373: LD_INT 22
10375: PUSH
10376: LD_VAR 0 1
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 1
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: LD_INT 24
10393: PUSH
10394: LD_INT 550
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 24
10407: PUSH
10408: LD_INT 250
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PPUSH
10424: CALL_OW 69
10428: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10429: LD_ADDR_VAR 0 19
10433: PUSH
10434: LD_INT 22
10436: PUSH
10437: LD_VAR 0 1
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 2
10448: PUSH
10449: LD_INT 25
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 25
10461: PUSH
10462: LD_INT 5
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 25
10471: PUSH
10472: LD_INT 8
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 25
10481: PUSH
10482: LD_INT 9
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 24
10498: PUSH
10499: LD_INT 1000
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PPUSH
10511: CALL_OW 69
10515: ST_TO_ADDR
// if medicCount > 0 then
10516: LD_VAR 0 7
10520: PUSH
10521: LD_INT 0
10523: GREATER
10524: IFFALSE 10598
// begin if damageUnit_list > 0 then
10526: LD_VAR 0 17
10530: PUSH
10531: LD_INT 0
10533: GREATER
10534: IFFALSE 10598
// begin for i in damageUnit_list do
10536: LD_ADDR_VAR 0 14
10540: PUSH
10541: LD_VAR 0 17
10545: PUSH
10546: FOR_IN
10547: IFFALSE 10596
// begin ComMoveToArea ( i , healArea ) ;
10549: LD_VAR 0 14
10553: PPUSH
10554: LD_VAR 0 10
10558: PPUSH
10559: CALL_OW 113
// for j in medic_list do
10563: LD_ADDR_VAR 0 15
10567: PUSH
10568: LD_VAR 0 18
10572: PUSH
10573: FOR_IN
10574: IFFALSE 10592
// AddComHeal ( j , i ) ;
10576: LD_VAR 0 15
10580: PPUSH
10581: LD_VAR 0 14
10585: PPUSH
10586: CALL_OW 188
10590: GO 10573
10592: POP
10593: POP
// end ;
10594: GO 10546
10596: POP
10597: POP
// end ; end ; for i in soldiersOK_list do
10598: LD_ADDR_VAR 0 14
10602: PUSH
10603: LD_VAR 0 19
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10785
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10611: LD_ADDR_VAR 0 22
10615: PUSH
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 11
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PPUSH
10628: CALL_OW 69
10632: PPUSH
10633: LD_VAR 0 14
10637: PPUSH
10638: CALL_OW 74
10642: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10643: LD_ADDR_VAR 0 23
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 11
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 59
10665: PUSH
10666: EMPTY
10667: LIST
10668: PUSH
10669: LD_INT 21
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 21
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: EMPTY
10700: LIST
10701: PPUSH
10702: CALL_OW 69
10706: PPUSH
10707: LD_VAR 0 14
10711: PPUSH
10712: CALL_OW 74
10716: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10717: LD_VAR 0 14
10721: PPUSH
10722: LD_VAR 0 22
10726: PPUSH
10727: CALL_OW 296
10731: PUSH
10732: LD_INT 8
10734: PLUS
10735: PUSH
10736: LD_VAR 0 14
10740: PPUSH
10741: LD_VAR 0 23
10745: PPUSH
10746: CALL_OW 296
10750: LESS
10751: IFFALSE 10769
// begin ComAttackUnit ( i , target1 ) ;
10753: LD_VAR 0 14
10757: PPUSH
10758: LD_VAR 0 22
10762: PPUSH
10763: CALL_OW 115
// end else
10767: GO 10783
// begin ComAttackUnit ( i , target2 ) ;
10769: LD_VAR 0 14
10773: PPUSH
10774: LD_VAR 0 23
10778: PPUSH
10779: CALL_OW 115
// end ; end ;
10783: GO 10608
10785: POP
10786: POP
// for i in soldiersOK_list do
10787: LD_ADDR_VAR 0 14
10791: PUSH
10792: LD_VAR 0 19
10796: PUSH
10797: FOR_IN
10798: IFFALSE 10974
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10800: LD_ADDR_VAR 0 22
10804: PUSH
10805: LD_INT 22
10807: PUSH
10808: LD_VAR 0 11
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PPUSH
10817: CALL_OW 69
10821: PPUSH
10822: LD_VAR 0 14
10826: PPUSH
10827: CALL_OW 74
10831: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10832: LD_ADDR_VAR 0 23
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_VAR 0 11
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 59
10854: PUSH
10855: EMPTY
10856: LIST
10857: PUSH
10858: LD_INT 21
10860: PUSH
10861: LD_INT 1
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 21
10870: PUSH
10871: LD_INT 2
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: PPUSH
10891: CALL_OW 69
10895: PPUSH
10896: LD_VAR 0 14
10900: PPUSH
10901: CALL_OW 74
10905: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10906: LD_VAR 0 14
10910: PPUSH
10911: LD_VAR 0 22
10915: PPUSH
10916: CALL_OW 296
10920: PUSH
10921: LD_INT 8
10923: PLUS
10924: PUSH
10925: LD_VAR 0 14
10929: PPUSH
10930: LD_VAR 0 23
10934: PPUSH
10935: CALL_OW 296
10939: LESS
10940: IFFALSE 10958
// begin ComAttackUnit ( i , target1 ) ;
10942: LD_VAR 0 14
10946: PPUSH
10947: LD_VAR 0 22
10951: PPUSH
10952: CALL_OW 115
// end else
10956: GO 10972
// begin ComAttackUnit ( i , target2 ) ;
10958: LD_VAR 0 14
10962: PPUSH
10963: LD_VAR 0 23
10967: PPUSH
10968: CALL_OW 115
// end ; end ;
10972: GO 10797
10974: POP
10975: POP
// until soldiersOK_list = [ ] ;
10976: LD_VAR 0 19
10980: PUSH
10981: EMPTY
10982: EQUAL
10983: IFFALSE 10361
// end ; end ; end_of_file
10985: LD_VAR 0 13
10989: RET
// every 0 0$01 do
10990: GO 10992
10992: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10993: LD_INT 22
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PPUSH
11017: CALL_OW 69
11021: PUSH
11022: LD_INT 0
11024: EQUAL
11025: IFFALSE 11039
// SetClass ( JMM , 2 ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_INT 2
11034: PPUSH
11035: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11039: LD_STRING M1
11041: PPUSH
11042: CALL_OW 337
// case difficulty of 1 :
11046: LD_OWVAR 67
11050: PUSH
11051: LD_INT 1
11053: DOUBLE
11054: EQUAL
11055: IFTRUE 11059
11057: GO 11069
11059: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11060: LD_STRING M1-1
11062: PPUSH
11063: CALL_OW 337
11067: GO 11106
11069: LD_INT 2
11071: DOUBLE
11072: EQUAL
11073: IFTRUE 11077
11075: GO 11087
11077: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11078: LD_STRING M1-2
11080: PPUSH
11081: CALL_OW 337
11085: GO 11106
11087: LD_INT 3
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11105
11095: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11096: LD_STRING M1-3
11098: PPUSH
11099: CALL_OW 337
11103: GO 11106
11105: POP
// ChangeMissionObjectives ( M1cont ) ;
11106: LD_STRING M1cont
11108: PPUSH
11109: CALL_OW 337
// SaveForQuickRestart ;
11113: CALL_OW 22
// end ;
11117: END
// every 0 0$1 do
11118: GO 11120
11120: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11121: LD_INT 350
11123: PPUSH
11124: LD_INT 875
11126: PPUSH
11127: CALL_OW 12
11131: PPUSH
11132: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11136: LD_INT 5
11138: PPUSH
11139: LD_INT 4
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 55
// wait ( 0 0$15 ) ;
11149: LD_INT 525
11151: PPUSH
11152: CALL_OW 67
// if IsOk ( Lisa ) then
11156: LD_EXP 2
11160: PPUSH
11161: CALL_OW 302
11165: IFFALSE 11181
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11167: LD_EXP 2
11171: PPUSH
11172: LD_STRING DR0-Lisa-1
11174: PPUSH
11175: CALL_OW 88
// end else
11179: GO 11303
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11181: LD_INT 22
11183: PUSH
11184: LD_INT 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 21
11193: PUSH
11194: LD_INT 1
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 26
11203: PUSH
11204: LD_INT 1
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 25
11226: PUSH
11227: LD_INT 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 25
11236: PUSH
11237: LD_INT 3
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 25
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PPUSH
11267: CALL_OW 69
11271: PUSH
11272: LD_EXP 1
11276: PUSH
11277: LD_EXP 8
11281: PUSH
11282: LD_EXP 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: DIFF
11292: PPUSH
11293: LD_STRING DR0-Sol1-1
11295: PPUSH
11296: LD_STRING DR0-Sol1-1
11298: PPUSH
11299: CALL 5155 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11303: LD_INT 22
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 21
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 26
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: LD_INT 25
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 25
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 25
11358: PUSH
11359: LD_INT 3
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 25
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: PUSH
11394: LD_EXP 1
11398: PUSH
11399: LD_EXP 8
11403: PUSH
11404: LD_EXP 5
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: DIFF
11414: PPUSH
11415: LD_STRING DR0-Sol2-1
11417: PPUSH
11418: LD_STRING DR0-Sol2-1
11420: PPUSH
11421: CALL 5155 0 3
// if IsOk ( Cyrus ) then
11425: LD_EXP 4
11429: PPUSH
11430: CALL_OW 302
11434: IFFALSE 11448
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11436: LD_EXP 4
11440: PPUSH
11441: LD_STRING DR0-Cyrus-1
11443: PPUSH
11444: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11448: LD_EXP 1
11452: PPUSH
11453: LD_STRING DR0-JMM-1
11455: PPUSH
11456: CALL_OW 88
// end ;
11460: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11461: LD_EXP 5
11465: PPUSH
11466: CALL_OW 302
11470: PUSH
11471: LD_INT 22
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 25
11483: PUSH
11484: LD_INT 16
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PPUSH
11495: CALL_OW 69
11499: PUSH
11500: LD_INT 0
11502: GREATER
11503: AND
11504: IFFALSE 11782
11506: GO 11508
11508: DISABLE
// begin DialogueOn ;
11509: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11513: LD_EXP 5
11517: PPUSH
11518: LD_STRING D10-Frank-1
11520: PPUSH
11521: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11525: LD_INT 22
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 21
11537: PUSH
11538: LD_INT 1
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 25
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: LD_INT 25
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 4
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 69
11604: PUSH
11605: LD_EXP 1
11609: PUSH
11610: LD_EXP 5
11614: PUSH
11615: LD_EXP 2
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: DIFF
11625: PPUSH
11626: LD_STRING D10-Sol1-1
11628: PPUSH
11629: LD_STRING D10-FSol1-1
11631: PPUSH
11632: CALL 5155 0 3
// Say ( Frank , D10-Frank-2 ) ;
11636: LD_EXP 5
11640: PPUSH
11641: LD_STRING D10-Frank-2
11643: PPUSH
11644: CALL_OW 88
// if IsOK ( Lisa ) then
11648: LD_EXP 2
11652: PPUSH
11653: CALL_OW 302
11657: IFFALSE 11673
// begin Say ( Lisa , D10-Lisa-2 ) ;
11659: LD_EXP 2
11663: PPUSH
11664: LD_STRING D10-Lisa-2
11666: PPUSH
11667: CALL_OW 88
// end else
11671: GO 11778
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11673: LD_INT 22
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 21
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 25
11698: PUSH
11699: LD_INT 1
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 25
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 25
11718: PUSH
11719: LD_INT 3
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 25
11728: PUSH
11729: LD_INT 4
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: PUSH
11753: LD_EXP 1
11757: PUSH
11758: LD_EXP 5
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: DIFF
11767: PPUSH
11768: LD_STRING D10-Sol1-2
11770: PPUSH
11771: LD_STRING D10-FSol1-2
11773: PPUSH
11774: CALL 5155 0 3
// end ; DialogueOff ;
11778: CALL_OW 7
// end ;
11782: END
// every 10 10$30 do
11783: GO 11785
11785: DISABLE
// begin HarrisonSupport ;
11786: CALL 2083 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11790: LD_EXP 17
11794: PPUSH
11795: CALL_OW 310
11799: PPUSH
11800: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11804: LD_EXP 17
11808: PPUSH
11809: LD_STRING DEng-Eng1-1
11811: PPUSH
11812: CALL_OW 88
// wait ( 1 1$0 ) ;
11816: LD_INT 2100
11818: PPUSH
11819: CALL_OW 67
// DialogueOn ;
11823: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11827: LD_EXP 14
11831: PPUSH
11832: LD_STRING DRem-Har-1
11834: PPUSH
11835: CALL_OW 94
// if contactWithRussian = 1 then
11839: LD_EXP 22
11843: PUSH
11844: LD_INT 1
11846: EQUAL
11847: IFFALSE 11863
// begin Say ( JMM , DRem-JMM-1 ) ;
11849: LD_EXP 1
11853: PPUSH
11854: LD_STRING DRem-JMM-1
11856: PPUSH
11857: CALL_OW 88
// end else
11861: GO 11875
// begin Say ( JMM , DRem-JMM-1a ) ;
11863: LD_EXP 1
11867: PPUSH
11868: LD_STRING DRem-JMM-1a
11870: PPUSH
11871: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11875: LD_EXP 14
11879: PPUSH
11880: LD_STRING DRem-Har-2
11882: PPUSH
11883: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11887: LD_STRING DenisInDelta
11889: PPUSH
11890: LD_INT 0
11892: PPUSH
11893: CALL_OW 30
11897: PUSH
11898: LD_INT 1
11900: EQUAL
11901: IFFALSE 11917
// begin Say ( JMM , DRem-JMM-2 ) ;
11903: LD_EXP 1
11907: PPUSH
11908: LD_STRING DRem-JMM-2
11910: PPUSH
11911: CALL_OW 88
// end else
11915: GO 11929
// begin Say ( JMM , DRem-JMM-2a ) ;
11917: LD_EXP 1
11921: PPUSH
11922: LD_STRING DRem-JMM-2a
11924: PPUSH
11925: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11929: LD_EXP 14
11933: PPUSH
11934: LD_STRING DRem-Har-3
11936: PPUSH
11937: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11941: LD_EXP 1
11945: PPUSH
11946: LD_STRING DRem-JMM-3
11948: PPUSH
11949: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11953: LD_EXP 14
11957: PPUSH
11958: LD_STRING DRem-Har-4
11960: PPUSH
11961: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11965: LD_STRING DenisInDelta
11967: PPUSH
11968: LD_INT 0
11970: PPUSH
11971: CALL_OW 30
11975: PUSH
11976: LD_INT 1
11978: EQUAL
11979: IFFALSE 12007
// begin Say ( JMM , DRem-JMM-4 ) ;
11981: LD_EXP 1
11985: PPUSH
11986: LD_STRING DRem-JMM-4
11988: PPUSH
11989: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11993: LD_EXP 14
11997: PPUSH
11998: LD_STRING DRem-Har-5
12000: PPUSH
12001: CALL_OW 94
// end else
12005: GO 12040
// begin SetRestrict ( 36 , 1 , true ) ;
12007: LD_INT 36
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12020: LD_INT 15
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12033: LD_STRING MR
12035: PPUSH
12036: CALL_OW 337
// end ; DialogueOff ;
12040: CALL_OW 7
// end ;
12044: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12045: LD_STRING DenisInDelta
12047: PPUSH
12048: LD_INT 0
12050: PPUSH
12051: CALL_OW 30
12055: PUSH
12056: LD_INT 1
12058: EQUAL
12059: IFFALSE 12190
12061: GO 12063
12063: DISABLE
// begin PrepareDenis ;
12064: CALL 2004 0 0
// CenterNowOnUnits ( Denis ) ;
12068: LD_EXP 9
12072: PPUSH
12073: CALL_OW 87
// DialogueOn ;
12077: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12081: LD_EXP 9
12085: PPUSH
12086: LD_STRING DDen-Den-1
12088: PPUSH
12089: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12093: LD_EXP 1
12097: PPUSH
12098: LD_STRING DDen-JMM-1
12100: PPUSH
12101: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12105: LD_EXP 9
12109: PPUSH
12110: LD_STRING DDen-Den-2
12112: PPUSH
12113: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12117: LD_EXP 1
12121: PPUSH
12122: LD_STRING DDen-JMM-2
12124: PPUSH
12125: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12129: LD_EXP 9
12133: PPUSH
12134: LD_STRING DDen-Den-3
12136: PPUSH
12137: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DDen-JMM-3
12148: PPUSH
12149: CALL_OW 88
// DialogueOff ;
12153: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12157: LD_INT 36
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: LD_INT 1
12165: PPUSH
12166: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12170: LD_INT 15
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12183: LD_STRING MR
12185: PPUSH
12186: CALL_OW 337
// end ;
12190: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12191: CALL 12236 0 0
12195: PUSH
12196: LD_EXP 9
12200: PPUSH
12201: CALL_OW 302
12205: AND
12206: IFFALSE 12235
12208: GO 12210
12210: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12211: LD_EXP 9
12215: PPUSH
12216: LD_STRING DR1-Den-1
12218: PPUSH
12219: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12223: LD_EXP 1
12227: PPUSH
12228: LD_STRING DR1-JMM-1
12230: PPUSH
12231: CALL_OW 88
// end ;
12235: END
// function CheckOptoLab ; var i ; begin
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
// result = false ;
12240: LD_ADDR_VAR 0 1
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12248: LD_ADDR_VAR 0 2
12252: PUSH
12253: LD_INT 22
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 2
12265: PUSH
12266: LD_INT 30
12268: PUSH
12269: LD_INT 7
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 30
12278: PUSH
12279: LD_INT 8
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: PUSH
12300: FOR_IN
12301: IFFALSE 12353
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12303: LD_VAR 0 2
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 268
12315: PUSH
12316: LD_INT 15
12318: EQUAL
12319: PUSH
12320: LD_VAR 0 2
12324: PPUSH
12325: LD_INT 2
12327: PPUSH
12328: CALL_OW 268
12332: PUSH
12333: LD_INT 15
12335: EQUAL
12336: OR
12337: IFFALSE 12349
// begin result = true ;
12339: LD_ADDR_VAR 0 1
12343: PUSH
12344: LD_INT 1
12346: ST_TO_ADDR
// break ;
12347: GO 12353
// end ; break ;
12349: GO 12353
// end ;
12351: GO 12300
12353: POP
12354: POP
// end ;
12355: LD_VAR 0 1
12359: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12360: LD_INT 15
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 321
12370: PUSH
12371: LD_INT 2
12373: EQUAL
12374: PUSH
12375: LD_EXP 9
12379: PPUSH
12380: CALL_OW 302
12384: AND
12385: IFFALSE 12617
12387: GO 12389
12389: DISABLE
// begin DialogueOn ;
12390: CALL_OW 6
// if IsOK ( Denis ) then
12394: LD_EXP 9
12398: PPUSH
12399: CALL_OW 302
12403: IFFALSE 12419
// begin Say ( Denis , DR2-Den-1 ) ;
12405: LD_EXP 9
12409: PPUSH
12410: LD_STRING DR2-Den-1
12412: PPUSH
12413: CALL_OW 88
// end else
12417: GO 12478
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12419: LD_INT 22
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 21
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 4
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: PPUSH
12454: CALL_OW 69
12458: PUSH
12459: LD_EXP 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: DIFF
12467: PPUSH
12468: LD_STRING DR2-Sci1-1
12470: PPUSH
12471: LD_STRING DR2-FSci1-1
12473: PPUSH
12474: CALL 5155 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12478: LD_EXP 1
12482: PPUSH
12483: LD_STRING DR2-JMM-1
12485: PPUSH
12486: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12490: LD_INT 22
12492: PUSH
12493: LD_INT 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 21
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 2
12512: PUSH
12513: LD_INT 25
12515: PUSH
12516: LD_INT 1
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 2
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: LD_INT 25
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 25
12545: PUSH
12546: LD_INT 4
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: PUSH
12570: LD_EXP 1
12574: PUSH
12575: LD_EXP 9
12579: PUSH
12580: LD_EXP 8
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: DIFF
12590: PPUSH
12591: LD_STRING DR2-Sol1-1
12593: PPUSH
12594: LD_STRING DR2-Sol1-11
12596: PPUSH
12597: CALL 5155 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12601: LD_EXP 1
12605: PPUSH
12606: LD_STRING DR2-JMM-2
12608: PPUSH
12609: CALL_OW 88
// DialogueOff ;
12613: CALL_OW 7
// end ;
12617: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12618: LD_INT 22
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 30
12630: PUSH
12631: LD_INT 36
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 69
12646: PUSH
12647: LD_INT 0
12649: EQUAL
12650: PUSH
12651: LD_INT 22
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 2
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 33
12673: PUSH
12674: LD_INT 2
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: PPUSH
12686: CALL_OW 69
12690: PUSH
12691: LD_INT 0
12693: GREATER
12694: AND
12695: PUSH
12696: LD_EXP 23
12700: PUSH
12701: LD_INT 0
12703: EQUAL
12704: AND
12705: IFFALSE 12831
12707: GO 12709
12709: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12710: LD_INT 22
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 21
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 25
12732: PUSH
12733: LD_INT 3
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: PPUSH
12745: CALL_OW 69
12749: PUSH
12750: LD_EXP 1
12754: PUSH
12755: LD_EXP 6
12759: PUSH
12760: LD_EXP 7
12764: PUSH
12765: LD_EXP 9
12769: PUSH
12770: LD_EXP 15
12774: PUSH
12775: LD_EXP 3
12779: PUSH
12780: LD_EXP 4
12784: PUSH
12785: LD_EXP 2
12789: PUSH
12790: LD_EXP 5
12794: PUSH
12795: LD_EXP 8
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: DIFF
12812: PPUSH
12813: LD_STRING D3a-Mech1-1
12815: PPUSH
12816: LD_STRING D3a-Mech1-1
12818: PPUSH
12819: CALL 5155 0 3
// firstTower = 2 ;
12823: LD_ADDR_EXP 23
12827: PUSH
12828: LD_INT 2
12830: ST_TO_ADDR
// end ;
12831: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12832: LD_INT 22
12834: PUSH
12835: LD_INT 3
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 21
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: PUSH
12861: LD_INT 0
12863: EQUAL
12864: IFFALSE 12979
12866: GO 12868
12868: DISABLE
12869: LD_INT 0
12871: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_INT 22
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 21
12889: PUSH
12890: LD_INT 1
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 25
12932: PUSH
12933: LD_INT 4
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: PUSH
12957: FOR_IN
12958: IFFALSE 12977
// AddExperience ( i , 1 , 10000 ) ;
12960: LD_VAR 0 1
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: LD_INT 10000
12970: PPUSH
12971: CALL_OW 492
12975: GO 12957
12977: POP
12978: POP
// end ;
12979: PPOPN 1
12981: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12982: LD_INT 22
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 30
12994: PUSH
12995: LD_INT 36
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PPUSH
13006: CALL_OW 69
13010: PUSH
13011: LD_INT 0
13013: GREATER
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 21
13027: PUSH
13028: LD_INT 2
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 33
13037: PUSH
13038: LD_INT 2
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: PUSH
13055: LD_INT 0
13057: GREATER
13058: AND
13059: PUSH
13060: CALL 13642 0 0
13064: AND
13065: IFFALSE 13639
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
13074: PPUSH
13075: PPUSH
13076: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 30
13094: PUSH
13095: LD_INT 36
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PPUSH
13106: CALL_OW 69
13110: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13111: LD_ADDR_VAR 0 4
13115: PUSH
13116: LD_INT 22
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 21
13128: PUSH
13129: LD_INT 2
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PUSH
13136: LD_INT 33
13138: PUSH
13139: LD_INT 2
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13156: LD_ADDR_VAR 0 5
13160: PUSH
13161: EMPTY
13162: ST_TO_ADDR
// for i in tmpControlTowers do
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_VAR 0 3
13172: PUSH
13173: FOR_IN
13174: IFFALSE 13637
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13176: LD_EXP 1
13180: PPUSH
13181: CALL_OW 310
13185: PUSH
13186: LD_VAR 0 1
13190: EQUAL
13191: PUSH
13192: LD_EXP 1
13196: PPUSH
13197: CALL_OW 257
13201: PUSH
13202: LD_INT 3
13204: EQUAL
13205: AND
13206: IFFALSE 13336
// begin InGameOn ;
13208: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13212: LD_VAR 0 4
13216: PUSH
13217: LD_INT 1
13219: ARRAY
13220: PPUSH
13221: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13225: LD_EXP 1
13229: PPUSH
13230: LD_STRING D4a-JMM-1
13232: PPUSH
13233: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13237: LD_VAR 0 4
13241: PUSH
13242: LD_INT 1
13244: ARRAY
13245: PPUSH
13246: LD_EXP 1
13250: PPUSH
13251: CALL_OW 53
// wait ( 0 0$1 ) ;
13255: LD_INT 35
13257: PPUSH
13258: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13262: LD_VAR 0 4
13266: PUSH
13267: LD_INT 1
13269: ARRAY
13270: PPUSH
13271: LD_VAR 0 4
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PPUSH
13280: CALL_OW 250
13284: PUSH
13285: LD_INT 3
13287: PLUS
13288: PPUSH
13289: LD_VAR 0 4
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: CALL_OW 251
13302: PUSH
13303: LD_INT 2
13305: MINUS
13306: PPUSH
13307: CALL_OW 111
// wait ( 0 0$2 ) ;
13311: LD_INT 70
13313: PPUSH
13314: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13318: LD_EXP 1
13322: PPUSH
13323: LD_STRING D4b-JMM-1
13325: PPUSH
13326: CALL_OW 88
// InGameOff ;
13330: CALL_OW 9
// end else
13334: GO 13635
// begin InGameOn ;
13336: CALL_OW 8
// for j in UnitsInside ( i ) do
13340: LD_ADDR_VAR 0 2
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 313
13354: PUSH
13355: FOR_IN
13356: IFFALSE 13391
// if GetClass ( j ) = 3 then
13358: LD_VAR 0 2
13362: PPUSH
13363: CALL_OW 257
13367: PUSH
13368: LD_INT 3
13370: EQUAL
13371: IFFALSE 13389
// tmpMechanicInside = tmpMechanicInside ^ j ;
13373: LD_ADDR_VAR 0 5
13377: PUSH
13378: LD_VAR 0 5
13382: PUSH
13383: LD_VAR 0 2
13387: ADD
13388: ST_TO_ADDR
13389: GO 13355
13391: POP
13392: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13393: LD_VAR 0 5
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PPUSH
13402: CALL_OW 258
13406: PUSH
13407: LD_INT 1
13409: EQUAL
13410: IFFALSE 13428
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13412: LD_VAR 0 5
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: LD_STRING D4a-Mech1-1
13423: PPUSH
13424: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13428: LD_VAR 0 5
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: CALL_OW 258
13441: PUSH
13442: LD_INT 2
13444: EQUAL
13445: IFFALSE 13463
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13447: LD_VAR 0 5
13451: PUSH
13452: LD_INT 1
13454: ARRAY
13455: PPUSH
13456: LD_STRING D4a-FMech1-1
13458: PPUSH
13459: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13463: LD_VAR 0 4
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13476: LD_VAR 0 4
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: LD_VAR 0 5
13489: PUSH
13490: LD_INT 1
13492: ARRAY
13493: PPUSH
13494: CALL_OW 53
// wait ( 0 0$1 ) ;
13498: LD_INT 35
13500: PPUSH
13501: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13505: LD_VAR 0 4
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 4
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: CALL_OW 250
13527: PUSH
13528: LD_INT 3
13530: PLUS
13531: PPUSH
13532: LD_VAR 0 4
13536: PUSH
13537: LD_INT 1
13539: ARRAY
13540: PPUSH
13541: CALL_OW 251
13545: PUSH
13546: LD_INT 2
13548: MINUS
13549: PPUSH
13550: CALL_OW 111
// wait ( 0 0$2 ) ;
13554: LD_INT 70
13556: PPUSH
13557: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13561: LD_VAR 0 5
13565: PUSH
13566: LD_INT 1
13568: ARRAY
13569: PPUSH
13570: CALL_OW 258
13574: PUSH
13575: LD_INT 1
13577: EQUAL
13578: IFFALSE 13596
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13580: LD_VAR 0 5
13584: PUSH
13585: LD_INT 1
13587: ARRAY
13588: PPUSH
13589: LD_STRING D4b-Mech1-1
13591: PPUSH
13592: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13596: LD_VAR 0 5
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: CALL_OW 258
13609: PUSH
13610: LD_INT 2
13612: EQUAL
13613: IFFALSE 13631
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13615: LD_VAR 0 5
13619: PUSH
13620: LD_INT 1
13622: ARRAY
13623: PPUSH
13624: LD_STRING D4b-FMech1-1
13626: PPUSH
13627: CALL_OW 88
// InGameOff ;
13631: CALL_OW 9
// end ; end ;
13635: GO 13173
13637: POP
13638: POP
// end ;
13639: PPOPN 5
13641: END
// function CheckMehInside ; var i , j ; begin
13642: LD_INT 0
13644: PPUSH
13645: PPUSH
13646: PPUSH
// result = false ;
13647: LD_ADDR_VAR 0 1
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13655: LD_ADDR_VAR 0 2
13659: PUSH
13660: LD_INT 22
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 36
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PPUSH
13684: CALL_OW 69
13688: PUSH
13689: FOR_IN
13690: IFFALSE 13741
// begin for j in UnitsInside ( i ) do
13692: LD_ADDR_VAR 0 3
13696: PUSH
13697: LD_VAR 0 2
13701: PPUSH
13702: CALL_OW 313
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13737
// begin if GetClass ( j ) = 3 then
13710: LD_VAR 0 3
13714: PPUSH
13715: CALL_OW 257
13719: PUSH
13720: LD_INT 3
13722: EQUAL
13723: IFFALSE 13735
// begin result = true ;
13725: LD_ADDR_VAR 0 1
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// break ;
13733: GO 13737
// end ; end ;
13735: GO 13707
13737: POP
13738: POP
// end ;
13739: GO 13689
13741: POP
13742: POP
// end ;
13743: LD_VAR 0 1
13747: RET
// every 25 25$0 do
13748: GO 13750
13750: DISABLE
// begin PrepareKurt ;
13751: CALL 17248 0 0
// end ;
13755: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13756: LD_EXP 19
13760: PPUSH
13761: LD_INT 9
13763: PPUSH
13764: CALL_OW 308
13768: PUSH
13769: LD_EXP 21
13773: PUSH
13774: LD_INT 1
13776: EQUAL
13777: AND
13778: IFFALSE 13852
13780: GO 13782
13782: DISABLE
// begin RemoveUnit ( Kurt ) ;
13783: LD_EXP 19
13787: PPUSH
13788: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13792: LD_EXP 19
13796: PPUSH
13797: LD_STRING Kurt
13799: PPUSH
13800: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13804: LD_INT 1
13806: PPUSH
13807: LD_INT 2
13809: PPUSH
13810: CALL_OW 81
13814: PUSH
13815: LD_INT 0
13817: EQUAL
13818: IFFALSE 13828
// KurtStatus = 1 ;
13820: LD_ADDR_EXP 20
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13828: LD_INT 1
13830: PPUSH
13831: LD_INT 2
13833: PPUSH
13834: CALL_OW 81
13838: PUSH
13839: LD_INT 2
13841: EQUAL
13842: IFFALSE 13852
// KurtStatus = 2 ;
13844: LD_ADDR_EXP 20
13848: PUSH
13849: LD_INT 2
13851: ST_TO_ADDR
// end ;
13852: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13853: LD_INT 1
13855: PPUSH
13856: LD_INT 2
13858: PPUSH
13859: CALL_OW 81
13863: PUSH
13864: LD_INT 2
13866: EQUAL
13867: PUSH
13868: LD_EXP 19
13872: PPUSH
13873: CALL_OW 302
13877: AND
13878: IFFALSE 13903
13880: GO 13882
13882: DISABLE
// begin DialogueOn ;
13883: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13887: LD_EXP 19
13891: PPUSH
13892: LD_STRING D2a-Kurt-1
13894: PPUSH
13895: CALL_OW 88
// DialogueOff ;
13899: CALL_OW 7
// end ;
13903: END
// every 35 35$0 do
13904: GO 13906
13906: DISABLE
// begin PrepareJoan ;
13907: CALL 2555 0 0
// wait ( 1 1$0 ) ;
13911: LD_INT 2100
13913: PPUSH
13914: CALL_OW 67
// if IsOK ( Lisa ) then
13918: LD_EXP 2
13922: PPUSH
13923: CALL_OW 302
13927: IFFALSE 14057
// begin DialogueOn ;
13929: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13933: LD_EXP 2
13937: PPUSH
13938: LD_STRING D7-Lisa-1
13940: PPUSH
13941: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13945: LD_EXP 1
13949: PPUSH
13950: LD_STRING D7-JMM-1
13952: PPUSH
13953: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13957: LD_EXP 2
13961: PPUSH
13962: LD_STRING D7-Lisa-2
13964: PPUSH
13965: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13969: LD_EXP 1
13973: PPUSH
13974: LD_STRING D7-JMM-2
13976: PPUSH
13977: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13981: LD_EXP 2
13985: PPUSH
13986: LD_STRING D7-Lisa-3
13988: PPUSH
13989: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13993: LD_EXP 1
13997: PPUSH
13998: LD_STRING D7-JMM-3
14000: PPUSH
14001: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14005: LD_EXP 2
14009: PPUSH
14010: LD_STRING D7-Lisa-4
14012: PPUSH
14013: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14017: LD_EXP 1
14021: PPUSH
14022: LD_STRING D7-JMM-4
14024: PPUSH
14025: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14029: LD_EXP 1
14033: PPUSH
14034: LD_STRING D7-JMM-4a
14036: PPUSH
14037: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14041: LD_EXP 2
14045: PPUSH
14046: LD_STRING D7-Lisa-5
14048: PPUSH
14049: CALL_OW 88
// DialogueOff ;
14053: CALL_OW 7
// end ; end ;
14057: END
// every 0 0$1 do var i , others ;
14058: GO 14060
14060: DISABLE
14061: LD_INT 0
14063: PPUSH
14064: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 25
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 25
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 25
14115: PUSH
14116: LD_INT 3
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: LD_INT 25
14125: PUSH
14126: LD_INT 4
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: LIST
14144: PPUSH
14145: CALL_OW 69
14149: PUSH
14150: LD_EXP 13
14154: PUSH
14155: EMPTY
14156: LIST
14157: DIFF
14158: ST_TO_ADDR
// for i in others do
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_VAR 0 2
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14207
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14172: LD_EXP 13
14176: PPUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 296
14186: PUSH
14187: LD_INT 6
14189: LESS
14190: IFFALSE 14205
// begin disable ;
14192: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14193: LD_EXP 13
14197: PPUSH
14198: LD_STRING D5-Sol1-1
14200: PPUSH
14201: CALL_OW 88
// end ; end ;
14205: GO 14169
14207: POP
14208: POP
// end ;
14209: PPOPN 2
14211: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14212: LD_INT 22
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 33
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: PUSH
14241: LD_INT 2
14243: GREATEREQUAL
14244: IFFALSE 14264
14246: GO 14248
14248: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14249: LD_STRING MRa
14251: PPUSH
14252: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14256: LD_ADDR_EXP 28
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// end ;
14264: END
// every 4 4$0 do
14265: GO 14267
14267: DISABLE
// PrepareRandoms ( 1 ) ;
14268: LD_INT 1
14270: PPUSH
14271: CALL 3591 0 1
14275: END
// every 10 10$0 do
14276: GO 14278
14278: DISABLE
// PrepareRandoms ( 2 ) ;
14279: LD_INT 2
14281: PPUSH
14282: CALL 3591 0 1
14286: END
// every 28 28$0 do
14287: GO 14289
14289: DISABLE
// PrepareRandoms ( 4 ) ;
14290: LD_INT 4
14292: PPUSH
14293: CALL 3591 0 1
14297: END
// every 32 32$0 do
14298: GO 14300
14300: DISABLE
// PrepareRandoms ( 5 ) ;
14301: LD_INT 5
14303: PPUSH
14304: CALL 3591 0 1
14308: END
// every 35 35$30 do
14309: GO 14311
14311: DISABLE
// PrepareRandoms ( 6 ) ;
14312: LD_INT 6
14314: PPUSH
14315: CALL 3591 0 1
14319: END
// every 37 37$20 do
14320: GO 14322
14322: DISABLE
// PrepareRandoms ( 7 ) ;
14323: LD_INT 7
14325: PPUSH
14326: CALL 3591 0 1
14330: END
// every 5 5$20 do
14331: GO 14333
14333: DISABLE
// begin DialogueOn ;
14334: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14338: LD_EXP 10
14342: PPUSH
14343: LD_STRING D12a-Sci-1
14345: PPUSH
14346: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14350: LD_EXP 1
14354: PPUSH
14355: LD_STRING D12a-JMM-1
14357: PPUSH
14358: CALL_OW 88
// DialogueOff ;
14362: CALL_OW 7
// cratesStatus = 1 ;
14366: LD_ADDR_EXP 38
14370: PUSH
14371: LD_INT 1
14373: ST_TO_ADDR
// end ;
14374: END
// every 13 13$0 do
14375: GO 14377
14377: DISABLE
// begin DialogueOn ;
14378: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14382: LD_EXP 10
14386: PPUSH
14387: LD_STRING D12b-Sci-1
14389: PPUSH
14390: CALL_OW 94
// DialogueOff ;
14394: CALL_OW 7
// cratesStatus = 2 ;
14398: LD_ADDR_EXP 38
14402: PUSH
14403: LD_INT 2
14405: ST_TO_ADDR
// end ;
14406: END
// every 32 32$0 do
14407: GO 14409
14409: DISABLE
// begin DialogueOn ;
14410: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14414: LD_EXP 10
14418: PPUSH
14419: LD_STRING D12c-Sci-1
14421: PPUSH
14422: CALL_OW 94
// DialogueOff ;
14426: CALL_OW 7
// wait ( 3 3$0 ) ;
14430: LD_INT 6300
14432: PPUSH
14433: CALL_OW 67
// DialogueOn ;
14437: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14441: LD_EXP 10
14445: PPUSH
14446: LD_STRING D12d-Sci-1
14448: PPUSH
14449: CALL_OW 94
// DialogueOff ;
14453: CALL_OW 7
// cratesStatus = 1 ;
14457: LD_ADDR_EXP 38
14461: PUSH
14462: LD_INT 1
14464: ST_TO_ADDR
// end ;
14465: END
// every 42 42$0 do
14466: GO 14468
14468: DISABLE
// begin DialogueOn ;
14469: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14473: LD_EXP 10
14477: PPUSH
14478: LD_STRING D12e-Sci-1
14480: PPUSH
14481: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14485: LD_EXP 1
14489: PPUSH
14490: LD_STRING D12e-JMM-1
14492: PPUSH
14493: CALL_OW 88
// DialogueOff ;
14497: CALL_OW 7
// cratesStatus = 2 ;
14501: LD_ADDR_EXP 38
14505: PUSH
14506: LD_INT 2
14508: ST_TO_ADDR
// end ;
14509: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14510: LD_INT 22
14512: PUSH
14513: LD_INT 6
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 21
14522: PUSH
14523: LD_INT 2
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 34
14532: PUSH
14533: LD_INT 51
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: PUSH
14550: LD_INT 0
14552: GREATER
14553: IFFALSE 14636
14555: GO 14557
14557: DISABLE
14558: LD_INT 0
14560: PPUSH
// begin enable ;
14561: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 6
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 21
14582: PUSH
14583: LD_INT 1
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PUSH
14614: FOR_IN
14615: IFFALSE 14634
// ComAgressiveMove ( i , 138 , 168 ) ;
14617: LD_VAR 0 1
14621: PPUSH
14622: LD_INT 138
14624: PPUSH
14625: LD_INT 168
14627: PPUSH
14628: CALL_OW 114
14632: GO 14614
14634: POP
14635: POP
// end ;
14636: PPOPN 1
14638: END
// every 0 0$1 do var i ;
14639: GO 14641
14641: DISABLE
14642: LD_INT 0
14644: PPUSH
// begin enable ;
14645: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14646: LD_ADDR_VAR 0 1
14650: PUSH
14651: LD_INT 5
14653: PPUSH
14654: LD_INT 2
14656: PUSH
14657: LD_INT 22
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_INT 6
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: PPUSH
14685: CALL_OW 70
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14755
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14693: LD_INT 5
14695: PPUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 6
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 34
14708: PUSH
14709: LD_INT 51
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 70
14724: PUSH
14725: LD_INT 0
14727: GREATER
14728: IFFALSE 14744
// sendedConvoys = sendedConvoys + 1 ;
14730: LD_ADDR_EXP 39
14734: PUSH
14735: LD_EXP 39
14739: PUSH
14740: LD_INT 1
14742: PLUS
14743: ST_TO_ADDR
// RemoveUnit ( i ) ;
14744: LD_VAR 0 1
14748: PPUSH
14749: CALL_OW 64
// end ;
14753: GO 14690
14755: POP
14756: POP
// end ; end_of_file
14757: PPOPN 1
14759: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14760: LD_VAR 0 1
14764: PUSH
14765: LD_INT 1
14767: EQUAL
14768: PUSH
14769: LD_VAR 0 2
14773: PUSH
14774: LD_INT 3
14776: EQUAL
14777: AND
14778: IFFALSE 14788
// contactWithRussian = 1 ;
14780: LD_ADDR_EXP 22
14784: PUSH
14785: LD_INT 1
14787: ST_TO_ADDR
// end ;
14788: PPOPN 2
14790: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14791: LD_VAR 0 1
14795: PPUSH
14796: CALL_OW 266
14800: PUSH
14801: LD_INT 36
14803: EQUAL
14804: PUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: CALL_OW 255
14814: PUSH
14815: LD_INT 1
14817: EQUAL
14818: AND
14819: PUSH
14820: LD_INT 22
14822: PUSH
14823: LD_INT 1
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 21
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 33
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: PUSH
14860: LD_INT 0
14862: EQUAL
14863: AND
14864: PUSH
14865: LD_EXP 23
14869: PUSH
14870: LD_INT 0
14872: EQUAL
14873: AND
14874: IFFALSE 14954
// begin firstTower = 1 ;
14876: LD_ADDR_EXP 23
14880: PUSH
14881: LD_INT 1
14883: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14884: LD_INT 22
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 21
14896: PUSH
14897: LD_INT 1
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: LD_INT 25
14906: PUSH
14907: LD_INT 3
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 26
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: PUSH
14935: LD_EXP 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: DIFF
14943: PPUSH
14944: LD_STRING D3b-Mech1-1
14946: PPUSH
14947: LD_STRING D3b-Mech1-1
14949: PPUSH
14950: CALL 5155 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 266
14963: PUSH
14964: LD_INT 0
14966: EQUAL
14967: PUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 255
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: IFFALSE 14996
// SetBName ( building , theta ) ;
14984: LD_VAR 0 1
14988: PPUSH
14989: LD_STRING theta
14991: PPUSH
14992: CALL_OW 500
// if GetSide ( building ) = 3 then
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 255
15005: PUSH
15006: LD_INT 3
15008: EQUAL
15009: IFFALSE 15083
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15011: LD_ADDR_EXP 31
15015: PUSH
15016: LD_EXP 31
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 3
15028: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15029: LD_ADDR_EXP 31
15033: PUSH
15034: LD_EXP 31
15038: PPUSH
15039: LD_INT 1
15041: PPUSH
15042: CALL_OW 3
15046: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15047: LD_ADDR_EXP 31
15051: PUSH
15052: LD_EXP 31
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 3
15064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15065: LD_ADDR_EXP 31
15069: PUSH
15070: LD_EXP 31
15074: PPUSH
15075: LD_INT 1
15077: PPUSH
15078: CALL_OW 3
15082: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 255
15092: PUSH
15093: LD_INT 3
15095: EQUAL
15096: PUSH
15097: LD_VAR 0 1
15101: PPUSH
15102: CALL_OW 266
15106: PUSH
15107: LD_INT 0
15109: EQUAL
15110: PUSH
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 266
15120: PUSH
15121: LD_INT 2
15123: EQUAL
15124: OR
15125: PUSH
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 266
15135: PUSH
15136: LD_INT 4
15138: EQUAL
15139: OR
15140: PUSH
15141: EMPTY
15142: LIST
15143: AND
15144: IFFALSE 15155
// ComUpgrade ( building ) ;
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 255
15164: PUSH
15165: LD_INT 3
15167: EQUAL
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 266
15178: PUSH
15179: LD_INT 32
15181: EQUAL
15182: AND
15183: IFFALSE 15224
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15185: LD_VAR 0 1
15189: PPUSH
15190: LD_INT 42
15192: PUSH
15193: LD_INT 43
15195: PUSH
15196: LD_INT 44
15198: PUSH
15199: LD_INT 46
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_INT 4
15213: PPUSH
15214: CALL_OW 12
15218: ARRAY
15219: PPUSH
15220: CALL_OW 208
// end ; end ;
15224: PPOPN 1
15226: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 255
15236: PUSH
15237: LD_INT 1
15239: EQUAL
15240: PUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 247
15250: PUSH
15251: LD_INT 1
15253: EQUAL
15254: AND
15255: IFFALSE 15331
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 257
15266: PUSH
15267: LD_INT 1
15269: EQUAL
15270: PUSH
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 257
15280: PUSH
15281: LD_INT 2
15283: EQUAL
15284: OR
15285: PUSH
15286: LD_VAR 0 1
15290: PPUSH
15291: CALL_OW 257
15295: PUSH
15296: LD_INT 3
15298: EQUAL
15299: OR
15300: PUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 257
15310: PUSH
15311: LD_INT 4
15313: EQUAL
15314: OR
15315: IFFALSE 15331
// unitLost = unitLost + 1 ;
15317: LD_ADDR_EXP 30
15321: PUSH
15322: LD_EXP 30
15326: PUSH
15327: LD_INT 1
15329: PLUS
15330: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 255
15340: PUSH
15341: LD_INT 3
15343: EQUAL
15344: PUSH
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 247
15354: PUSH
15355: LD_INT 3
15357: EQUAL
15358: AND
15359: IFFALSE 16051
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 266
15370: PUSH
15371: LD_INT 31
15373: EQUAL
15374: PUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 266
15384: PUSH
15385: LD_INT 32
15387: EQUAL
15388: OR
15389: PUSH
15390: LD_VAR 0 1
15394: PPUSH
15395: CALL_OW 266
15399: PUSH
15400: LD_INT 36
15402: EQUAL
15403: OR
15404: PUSH
15405: LD_VAR 0 1
15409: PPUSH
15410: CALL_OW 266
15414: PUSH
15415: LD_INT 0
15417: EQUAL
15418: OR
15419: PUSH
15420: LD_VAR 0 1
15424: PPUSH
15425: CALL_OW 266
15429: PUSH
15430: LD_INT 24
15432: EQUAL
15433: OR
15434: PUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 266
15444: PUSH
15445: LD_INT 17
15447: EQUAL
15448: OR
15449: PUSH
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 266
15459: PUSH
15460: LD_INT 25
15462: EQUAL
15463: OR
15464: PUSH
15465: LD_VAR 0 1
15469: PPUSH
15470: CALL_OW 266
15474: PUSH
15475: LD_INT 19
15477: EQUAL
15478: OR
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: CALL_OW 266
15489: PUSH
15490: LD_INT 20
15492: EQUAL
15493: OR
15494: PUSH
15495: LD_VAR 0 1
15499: PPUSH
15500: CALL_OW 266
15504: PUSH
15505: LD_INT 18
15507: EQUAL
15508: OR
15509: PUSH
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 266
15519: PUSH
15520: LD_INT 21
15522: EQUAL
15523: OR
15524: PUSH
15525: LD_VAR 0 1
15529: PPUSH
15530: CALL_OW 266
15534: PUSH
15535: LD_INT 23
15537: EQUAL
15538: OR
15539: PUSH
15540: LD_VAR 0 1
15544: PPUSH
15545: CALL_OW 266
15549: PUSH
15550: LD_INT 16
15552: EQUAL
15553: OR
15554: PUSH
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL_OW 266
15564: PUSH
15565: LD_INT 6
15567: EQUAL
15568: OR
15569: PUSH
15570: LD_VAR 0 1
15574: PPUSH
15575: CALL_OW 266
15579: PUSH
15580: LD_INT 29
15582: EQUAL
15583: OR
15584: PUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 266
15594: PUSH
15595: LD_INT 26
15597: EQUAL
15598: OR
15599: PUSH
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 266
15609: PUSH
15610: LD_INT 30
15612: EQUAL
15613: OR
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 266
15624: PUSH
15625: LD_INT 28
15627: EQUAL
15628: OR
15629: PUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 266
15639: PUSH
15640: LD_INT 27
15642: EQUAL
15643: OR
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 266
15654: PUSH
15655: LD_INT 33
15657: EQUAL
15658: OR
15659: PUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 266
15669: PUSH
15670: LD_INT 2
15672: EQUAL
15673: OR
15674: PUSH
15675: LD_VAR 0 1
15679: PPUSH
15680: CALL_OW 266
15684: PUSH
15685: LD_INT 4
15687: EQUAL
15688: OR
15689: IFFALSE 15775
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15691: LD_ADDR_EXP 31
15695: PUSH
15696: LD_EXP 31
15700: PUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 266
15710: ADD
15711: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15712: LD_ADDR_EXP 31
15716: PUSH
15717: LD_EXP 31
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 250
15731: ADD
15732: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15733: LD_ADDR_EXP 31
15737: PUSH
15738: LD_EXP 31
15742: PUSH
15743: LD_VAR 0 1
15747: PPUSH
15748: CALL_OW 251
15752: ADD
15753: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15754: LD_ADDR_EXP 31
15758: PUSH
15759: LD_EXP 31
15763: PUSH
15764: LD_VAR 0 1
15768: PPUSH
15769: CALL_OW 254
15773: ADD
15774: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 266
15784: PUSH
15785: LD_INT 1
15787: EQUAL
15788: IFFALSE 15867
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15790: LD_ADDR_EXP 31
15794: PUSH
15795: LD_EXP 31
15799: PUSH
15800: LD_INT 0
15802: ADD
15803: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15804: LD_ADDR_EXP 31
15808: PUSH
15809: LD_EXP 31
15813: PUSH
15814: LD_VAR 0 1
15818: PPUSH
15819: CALL_OW 250
15823: ADD
15824: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15825: LD_ADDR_EXP 31
15829: PUSH
15830: LD_EXP 31
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 251
15844: ADD
15845: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15846: LD_ADDR_EXP 31
15850: PUSH
15851: LD_EXP 31
15855: PUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 254
15865: ADD
15866: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15867: LD_VAR 0 1
15871: PPUSH
15872: CALL_OW 266
15876: PUSH
15877: LD_INT 3
15879: EQUAL
15880: IFFALSE 15959
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15882: LD_ADDR_EXP 31
15886: PUSH
15887: LD_EXP 31
15891: PUSH
15892: LD_INT 2
15894: ADD
15895: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15896: LD_ADDR_EXP 31
15900: PUSH
15901: LD_EXP 31
15905: PUSH
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 250
15915: ADD
15916: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15917: LD_ADDR_EXP 31
15921: PUSH
15922: LD_EXP 31
15926: PUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 251
15936: ADD
15937: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15938: LD_ADDR_EXP 31
15942: PUSH
15943: LD_EXP 31
15947: PUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 254
15957: ADD
15958: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 266
15968: PUSH
15969: LD_INT 5
15971: EQUAL
15972: IFFALSE 16051
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15974: LD_ADDR_EXP 31
15978: PUSH
15979: LD_EXP 31
15983: PUSH
15984: LD_INT 4
15986: ADD
15987: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15988: LD_ADDR_EXP 31
15992: PUSH
15993: LD_EXP 31
15997: PUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 250
16007: ADD
16008: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16009: LD_ADDR_EXP 31
16013: PUSH
16014: LD_EXP 31
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 251
16028: ADD
16029: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16030: LD_ADDR_EXP 31
16034: PUSH
16035: LD_EXP 31
16039: PUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 254
16049: ADD
16050: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 257
16060: PUSH
16061: LD_INT 3
16063: EQUAL
16064: PUSH
16065: LD_VAR 0 1
16069: PPUSH
16070: CALL_OW 255
16074: PUSH
16075: LD_INT 3
16077: EQUAL
16078: AND
16079: PUSH
16080: LD_INT 21
16082: PPUSH
16083: CALL_OW 302
16087: AND
16088: PUSH
16089: LD_INT 21
16091: PPUSH
16092: CALL_OW 255
16096: PUSH
16097: LD_INT 3
16099: EQUAL
16100: AND
16101: IFFALSE 16169
// begin uc_side = 3 ;
16103: LD_ADDR_OWVAR 20
16107: PUSH
16108: LD_INT 3
16110: ST_TO_ADDR
// uc_nation = 3 ;
16111: LD_ADDR_OWVAR 21
16115: PUSH
16116: LD_INT 3
16118: ST_TO_ADDR
// hc_gallery :=  ;
16119: LD_ADDR_OWVAR 33
16123: PUSH
16124: LD_STRING 
16126: ST_TO_ADDR
// hc_name :=  ;
16127: LD_ADDR_OWVAR 26
16131: PUSH
16132: LD_STRING 
16134: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16135: LD_INT 0
16137: PPUSH
16138: LD_EXP 34
16142: PPUSH
16143: LD_EXP 35
16147: PPUSH
16148: CALL_OW 12
16152: PPUSH
16153: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16157: CALL_OW 44
16161: PPUSH
16162: LD_INT 21
16164: PPUSH
16165: CALL_OW 52
// end ; end ;
16169: PPOPN 1
16171: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16172: LD_INT 0
16174: PPUSH
16175: PPUSH
16176: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16177: LD_VAR 0 1
16181: PPUSH
16182: CALL_OW 264
16186: PUSH
16187: LD_INT 51
16189: EQUAL
16190: PUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 255
16200: PUSH
16201: LD_INT 3
16203: EQUAL
16204: AND
16205: IFFALSE 16267
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16207: LD_ADDR_VAR 0 5
16211: PUSH
16212: LD_INT 2
16214: PPUSH
16215: CALL_OW 274
16219: PPUSH
16220: LD_INT 1
16222: PPUSH
16223: CALL_OW 275
16227: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16228: LD_INT 2
16230: PPUSH
16231: CALL_OW 274
16235: PPUSH
16236: LD_INT 1
16238: PPUSH
16239: LD_VAR 0 5
16243: PUSH
16244: LD_INT 100
16246: MINUS
16247: PPUSH
16248: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: LD_INT 100
16262: PPUSH
16263: CALL_OW 291
// end ; if building = rufabsupp then
16267: LD_VAR 0 2
16271: PUSH
16272: LD_INT 17
16274: EQUAL
16275: IFFALSE 16289
// SetSide ( vehicle , 6 ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: LD_INT 6
16284: PPUSH
16285: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16289: LD_VAR 0 2
16293: PUSH
16294: LD_INT 21
16296: EQUAL
16297: PUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: CALL_OW 255
16307: PUSH
16308: LD_INT 3
16310: EQUAL
16311: AND
16312: PUSH
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 264
16322: PUSH
16323: LD_INT 42
16325: EQUAL
16326: PUSH
16327: LD_VAR 0 1
16331: PPUSH
16332: CALL_OW 264
16336: PUSH
16337: LD_INT 43
16339: EQUAL
16340: OR
16341: PUSH
16342: LD_VAR 0 1
16346: PPUSH
16347: CALL_OW 264
16351: PUSH
16352: LD_INT 44
16354: EQUAL
16355: OR
16356: PUSH
16357: EMPTY
16358: LIST
16359: AND
16360: IFFALSE 16378
// russianTanks = russianTanks ^ vehicle ;
16362: LD_ADDR_EXP 36
16366: PUSH
16367: LD_EXP 36
16371: PUSH
16372: LD_VAR 0 1
16376: ADD
16377: ST_TO_ADDR
// end ;
16378: PPOPN 5
16380: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 255
16390: PUSH
16391: LD_INT 3
16393: EQUAL
16394: IFFALSE 16410
// tamedApemans = tamedApemans + 1 ;
16396: LD_ADDR_EXP 32
16400: PUSH
16401: LD_EXP 32
16405: PUSH
16406: LD_INT 1
16408: PLUS
16409: ST_TO_ADDR
// end ;
16410: PPOPN 2
16412: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 3
16429: EQUAL
16430: PUSH
16431: LD_VAR 0 1
16435: PPUSH
16436: CALL_OW 247
16440: PUSH
16441: LD_INT 2
16443: EQUAL
16444: AND
16445: PUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: CALL_OW 264
16455: PUSH
16456: LD_INT 42
16458: EQUAL
16459: PUSH
16460: LD_VAR 0 1
16464: PPUSH
16465: CALL_OW 264
16469: PUSH
16470: LD_INT 43
16472: EQUAL
16473: OR
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 264
16484: PUSH
16485: LD_INT 44
16487: EQUAL
16488: OR
16489: PUSH
16490: EMPTY
16491: LIST
16492: AND
16493: IFFALSE 16633
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16495: LD_INT 21
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 265
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 262
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 263
16527: PPUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 264
16537: PPUSH
16538: CALL_OW 185
// for i in russianDamageTanks do
16542: LD_ADDR_VAR 0 2
16546: PUSH
16547: LD_EXP 37
16551: PUSH
16552: FOR_IN
16553: IFFALSE 16588
// if i = unit then
16555: LD_VAR 0 2
16559: PUSH
16560: LD_VAR 0 1
16564: EQUAL
16565: IFFALSE 16586
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16567: LD_ADDR_EXP 37
16571: PUSH
16572: LD_EXP 37
16576: PUSH
16577: LD_VAR 0 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: DIFF
16585: ST_TO_ADDR
16586: GO 16552
16588: POP
16589: POP
// tmpMeh = UnitsInside ( unit ) ;
16590: LD_ADDR_VAR 0 3
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 313
16604: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16605: LD_VAR 0 3
16609: PPUSH
16610: CALL_OW 121
// wait ( 0 0$01 ) ;
16614: LD_INT 35
16616: PPUSH
16617: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16621: LD_VAR 0 3
16625: PPUSH
16626: LD_INT 21
16628: PPUSH
16629: CALL_OW 120
// end ; end ;
16633: PPOPN 3
16635: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16636: LD_VAR 0 1
16640: PUSH
16641: LD_INT 21
16643: EQUAL
16644: PUSH
16645: LD_VAR 0 2
16649: PPUSH
16650: CALL_OW 255
16654: PUSH
16655: LD_INT 3
16657: EQUAL
16658: AND
16659: IFFALSE 16673
// SetLives ( human , 1000 ) ;
16661: LD_VAR 0 2
16665: PPUSH
16666: LD_INT 1000
16668: PPUSH
16669: CALL_OW 234
// end ; end_of_file
16673: PPOPN 2
16675: END
// every 0 0$30 trigger cratesStatus = 1 do
16676: LD_EXP 38
16680: PUSH
16681: LD_INT 1
16683: EQUAL
16684: IFFALSE 16748
16686: GO 16688
16688: DISABLE
// begin enable ;
16689: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16690: LD_INT 350
16692: PUSH
16693: LD_INT 1050
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 1
16702: PPUSH
16703: LD_INT 2
16705: PPUSH
16706: CALL_OW 12
16710: ARRAY
16711: PPUSH
16712: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16716: LD_INT 4
16718: PUSH
16719: LD_INT 5
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 1
16728: PPUSH
16729: LD_INT 2
16731: PPUSH
16732: CALL_OW 12
16736: ARRAY
16737: PPUSH
16738: LD_INT 7
16740: PPUSH
16741: LD_INT 1
16743: PPUSH
16744: CALL_OW 55
// end ;
16748: END
// every 1 1$0 trigger cratesStatus = 2 do
16749: LD_EXP 38
16753: PUSH
16754: LD_INT 2
16756: EQUAL
16757: IFFALSE 16821
16759: GO 16761
16761: DISABLE
// begin enable ;
16762: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16763: LD_INT 3150
16765: PUSH
16766: LD_INT 4550
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: PPUSH
16776: LD_INT 2
16778: PPUSH
16779: CALL_OW 12
16783: ARRAY
16784: PPUSH
16785: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16789: LD_INT 2
16791: PUSH
16792: LD_INT 5
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 1
16801: PPUSH
16802: LD_INT 2
16804: PPUSH
16805: CALL_OW 12
16809: ARRAY
16810: PPUSH
16811: LD_INT 8
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 55
// end ;
16821: END
// every 0 0$30 + 0 0$10 do
16822: GO 16824
16824: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16825: LD_INT 4
16827: PUSH
16828: LD_INT 5
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PUSH
16835: LD_INT 1
16837: PPUSH
16838: LD_INT 2
16840: PPUSH
16841: CALL_OW 12
16845: ARRAY
16846: PPUSH
16847: LD_INT 8
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 55
// Wait ( 0 0$15 ) ;
16857: LD_INT 525
16859: PPUSH
16860: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16864: LD_INT 4
16866: PUSH
16867: LD_INT 5
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_INT 2
16879: PPUSH
16880: CALL_OW 12
16884: ARRAY
16885: PPUSH
16886: LD_INT 8
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 55
// Wait ( 0 0$20 ) ;
16896: LD_INT 700
16898: PPUSH
16899: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16903: LD_INT 4
16905: PUSH
16906: LD_INT 5
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 1
16915: PPUSH
16916: LD_INT 2
16918: PPUSH
16919: CALL_OW 12
16923: ARRAY
16924: PPUSH
16925: LD_INT 8
16927: PPUSH
16928: LD_INT 1
16930: PPUSH
16931: CALL_OW 55
// end ; end_of_file
16935: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16936: LD_EXP 24
16940: PUSH
16941: LD_INT 1
16943: EQUAL
16944: IFFALSE 17245
16946: GO 16948
16948: DISABLE
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
16953: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_INT 22
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 21
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 2
16981: PUSH
16982: LD_INT 30
16984: PUSH
16985: LD_INT 0
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 30
16994: PUSH
16995: LD_INT 1
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: ST_TO_ADDR
// for i in tmp do
17017: LD_ADDR_VAR 0 1
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: FOR_IN
17028: IFFALSE 17061
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17030: LD_ADDR_VAR 0 3
17034: PUSH
17035: LD_VAR 0 3
17039: PUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 274
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 275
17057: PLUS
17058: ST_TO_ADDR
17059: GO 17027
17061: POP
17062: POP
// strings = [ ] ;
17063: LD_ADDR_EXP 27
17067: PUSH
17068: EMPTY
17069: ST_TO_ADDR
// if tmp = 0 then
17070: LD_VAR 0 2
17074: PUSH
17075: LD_INT 0
17077: EQUAL
17078: IFFALSE 17103
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17080: LD_ADDR_EXP 27
17084: PUSH
17085: LD_EXP 27
17089: PUSH
17090: LD_STRING #Am06-1
17092: PUSH
17093: LD_EXP 25
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: ADD
17102: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17103: LD_VAR 0 2
17107: PUSH
17108: LD_INT 0
17110: GREATER
17111: PUSH
17112: LD_EXP 25
17116: PUSH
17117: LD_VAR 0 3
17121: GREATER
17122: AND
17123: IFFALSE 17154
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17125: LD_ADDR_EXP 27
17129: PUSH
17130: LD_EXP 27
17134: PUSH
17135: LD_STRING #Am06-1
17137: PUSH
17138: LD_EXP 25
17142: PUSH
17143: LD_VAR 0 3
17147: MINUS
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: ADD
17153: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17154: LD_VAR 0 2
17158: PUSH
17159: LD_INT 0
17161: GREATER
17162: PUSH
17163: LD_EXP 25
17167: PUSH
17168: LD_VAR 0 3
17172: LESSEQUAL
17173: AND
17174: IFFALSE 17197
// strings = strings ^ [ #Am06-1 , 0 ] ;
17176: LD_ADDR_EXP 27
17180: PUSH
17181: LD_EXP 27
17185: PUSH
17186: LD_STRING #Am06-1
17188: PUSH
17189: LD_INT 0
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: ADD
17196: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17197: LD_ADDR_EXP 26
17201: PUSH
17202: LD_EXP 26
17206: PUSH
17207: LD_INT 35
17209: MINUS
17210: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17211: LD_ADDR_EXP 27
17215: PUSH
17216: LD_EXP 27
17220: PUSH
17221: LD_STRING #Am06-2
17223: PUSH
17224: LD_EXP 26
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: ADD
17233: ST_TO_ADDR
// display_strings = strings ;
17234: LD_ADDR_OWVAR 47
17238: PUSH
17239: LD_EXP 27
17243: ST_TO_ADDR
// enable ;
17244: ENABLE
// end ; end_of_file
17245: PPOPN 3
17247: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17248: LD_INT 0
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
// j = 0 ;
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_INT 0
17264: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17265: LD_INT 35
17267: PPUSH
17268: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17272: LD_ADDR_VAR 0 2
17276: PUSH
17277: LD_INT 22
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 21
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 25
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 25
17312: PUSH
17313: LD_INT 2
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 25
17322: PUSH
17323: LD_INT 3
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 25
17332: PUSH
17333: LD_INT 4
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 69
17356: PUSH
17357: FOR_IN
17358: IFFALSE 17464
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17360: LD_INT 22
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 2
17372: PUSH
17373: LD_INT 21
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 21
17395: PUSH
17396: LD_INT 3
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 59
17405: PUSH
17406: EMPTY
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 91
17418: PUSH
17419: LD_VAR 0 2
17423: PUSH
17424: LD_INT 25
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: NOT
17442: IFFALSE 17462
// begin tmp = i ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_VAR 0 2
17453: ST_TO_ADDR
// j = 1 ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 1
17461: ST_TO_ADDR
// end ; end ;
17462: GO 17357
17464: POP
17465: POP
// until j = 1 ;
17466: LD_VAR 0 3
17470: PUSH
17471: LD_INT 1
17473: EQUAL
17474: IFFALSE 17265
// blockSpawn = 1 ;
17476: LD_ADDR_EXP 29
17480: PUSH
17481: LD_INT 1
17483: ST_TO_ADDR
// uc_side = 2 ;
17484: LD_ADDR_OWVAR 20
17488: PUSH
17489: LD_INT 2
17491: ST_TO_ADDR
// uc_nation = 2 ;
17492: LD_ADDR_OWVAR 21
17496: PUSH
17497: LD_INT 2
17499: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17500: LD_ADDR_EXP 19
17504: PUSH
17505: LD_STRING Kurt
17507: PPUSH
17508: LD_INT 0
17510: PPUSH
17511: CALL 5092 0 2
17515: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17516: LD_EXP 19
17520: PPUSH
17521: LD_VAR 0 4
17525: PPUSH
17526: CALL_OW 250
17530: PPUSH
17531: LD_VAR 0 4
17535: PPUSH
17536: CALL_OW 251
17540: PPUSH
17541: LD_INT 5
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 50
// InGameOn ;
17551: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17555: LD_EXP 19
17559: PPUSH
17560: CALL_OW 87
// wait ( 0 0$2 ) ;
17564: LD_INT 70
17566: PPUSH
17567: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17571: LD_VAR 0 4
17575: PPUSH
17576: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17580: LD_VAR 0 4
17584: PPUSH
17585: CALL_OW 122
// wait ( 0 0$1 ) ;
17589: LD_INT 35
17591: PPUSH
17592: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17596: LD_EXP 19
17600: PPUSH
17601: LD_VAR 0 4
17605: PPUSH
17606: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17610: LD_VAR 0 4
17614: PPUSH
17615: LD_EXP 19
17619: PPUSH
17620: CALL_OW 119
// DialogueOn ;
17624: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17628: LD_EXP 19
17632: PPUSH
17633: LD_STRING D2-Kurt-1
17635: PPUSH
17636: CALL_OW 88
// if tmp = JMM then
17640: LD_VAR 0 4
17644: PUSH
17645: LD_EXP 1
17649: EQUAL
17650: IFFALSE 17742
// begin Say ( JMM , D2-JMM-1 ) ;
17652: LD_EXP 1
17656: PPUSH
17657: LD_STRING D2-JMM-1
17659: PPUSH
17660: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17664: LD_EXP 19
17668: PPUSH
17669: LD_STRING D2-Kurt-2
17671: PPUSH
17672: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17676: LD_EXP 1
17680: PPUSH
17681: LD_STRING D2-JMM-2
17683: PPUSH
17684: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17688: LD_EXP 19
17692: PPUSH
17693: LD_STRING D2-Kurt-3
17695: PPUSH
17696: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17700: LD_EXP 1
17704: PPUSH
17705: LD_STRING D2-JMM-3
17707: PPUSH
17708: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17712: LD_EXP 19
17716: PPUSH
17717: LD_STRING D2-Kurt-4
17719: PPUSH
17720: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17724: LD_EXP 1
17728: PPUSH
17729: LD_STRING D2-JMM-4
17731: PPUSH
17732: CALL_OW 88
// DialogueOff ;
17736: CALL_OW 7
// end else
17740: GO 18052
// begin if GetSex ( tmp ) = 1 then
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 258
17751: PUSH
17752: LD_INT 1
17754: EQUAL
17755: IFFALSE 17769
// Say ( tmp , D2-Sol1-1 ) ;
17757: LD_VAR 0 4
17761: PPUSH
17762: LD_STRING D2-Sol1-1
17764: PPUSH
17765: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17769: LD_VAR 0 4
17773: PPUSH
17774: CALL_OW 258
17778: PUSH
17779: LD_INT 2
17781: EQUAL
17782: IFFALSE 17796
// Say ( tmp , D2-FSol1-1 ) ;
17784: LD_VAR 0 4
17788: PPUSH
17789: LD_STRING D2-FSol1-1
17791: PPUSH
17792: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17796: LD_EXP 19
17800: PPUSH
17801: LD_STRING D2-Kurt-2
17803: PPUSH
17804: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17808: LD_VAR 0 4
17812: PPUSH
17813: CALL_OW 258
17817: PUSH
17818: LD_INT 1
17820: EQUAL
17821: IFFALSE 17835
// Say ( tmp , D2-Sol1-2 ) ;
17823: LD_VAR 0 4
17827: PPUSH
17828: LD_STRING D2-Sol1-2
17830: PPUSH
17831: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17835: LD_VAR 0 4
17839: PPUSH
17840: CALL_OW 258
17844: PUSH
17845: LD_INT 2
17847: EQUAL
17848: IFFALSE 17862
// Say ( tmp , D2-FSol1-2 ) ;
17850: LD_VAR 0 4
17854: PPUSH
17855: LD_STRING D2-FSol1-2
17857: PPUSH
17858: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17862: LD_EXP 19
17866: PPUSH
17867: LD_STRING D2-Kurt-3
17869: PPUSH
17870: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17874: LD_VAR 0 4
17878: PPUSH
17879: CALL_OW 258
17883: PUSH
17884: LD_INT 1
17886: EQUAL
17887: IFFALSE 17901
// Say ( tmp , D2-Sol1-3 ) ;
17889: LD_VAR 0 4
17893: PPUSH
17894: LD_STRING D2-Sol1-3
17896: PPUSH
17897: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17901: LD_VAR 0 4
17905: PPUSH
17906: CALL_OW 258
17910: PUSH
17911: LD_INT 2
17913: EQUAL
17914: IFFALSE 17928
// Say ( tmp , D2-FSol1-3 ) ;
17916: LD_VAR 0 4
17920: PPUSH
17921: LD_STRING D2-FSol1-3
17923: PPUSH
17924: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17928: LD_EXP 19
17932: PPUSH
17933: LD_STRING D2-Kurt-4
17935: PPUSH
17936: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17940: LD_VAR 0 4
17944: PPUSH
17945: CALL_OW 258
17949: PUSH
17950: LD_INT 1
17952: EQUAL
17953: IFFALSE 17967
// Say ( tmp , D2-Sol1-4 ) ;
17955: LD_VAR 0 4
17959: PPUSH
17960: LD_STRING D2-Sol1-4
17962: PPUSH
17963: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17967: LD_VAR 0 4
17971: PPUSH
17972: CALL_OW 258
17976: PUSH
17977: LD_INT 2
17979: EQUAL
17980: IFFALSE 17994
// Say ( tmp , D2-FSol1-4 ) ;
17982: LD_VAR 0 4
17986: PPUSH
17987: LD_STRING D2-FSol1-4
17989: PPUSH
17990: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17994: LD_VAR 0 4
17998: PPUSH
17999: CALL_OW 258
18003: PUSH
18004: LD_INT 1
18006: EQUAL
18007: IFFALSE 18021
// Say ( tmp , D2-Sol1-5 ) ;
18009: LD_VAR 0 4
18013: PPUSH
18014: LD_STRING D2-Sol1-5
18016: PPUSH
18017: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18021: LD_VAR 0 4
18025: PPUSH
18026: CALL_OW 258
18030: PUSH
18031: LD_INT 2
18033: EQUAL
18034: IFFALSE 18048
// Say ( tmp , D2-FSol1-5 ) ;
18036: LD_VAR 0 4
18040: PPUSH
18041: LD_STRING D2-FSol1-5
18043: PPUSH
18044: CALL_OW 88
// DialogueOff ;
18048: CALL_OW 7
// end ; dec = ShowQuery1 ;
18052: LD_ADDR_VAR 0 6
18056: PUSH
18057: CALL 5694 0 0
18061: ST_TO_ADDR
// if dec = 1 then
18062: LD_VAR 0 6
18066: PUSH
18067: LD_INT 1
18069: EQUAL
18070: IFFALSE 18112
// begin DialogueOn ;
18072: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18076: LD_EXP 19
18080: PPUSH
18081: LD_STRING D2a-Kurt-1
18083: PPUSH
18084: CALL_OW 88
// DialogueOff ;
18088: CALL_OW 7
// InGameOff ;
18092: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18096: LD_INT 1
18098: PPUSH
18099: LD_INT 2
18101: PPUSH
18102: LD_INT 2
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 80
// end ; if dec = 2 then
18112: LD_VAR 0 6
18116: PUSH
18117: LD_INT 2
18119: EQUAL
18120: IFFALSE 18620
// begin DialogueOn ;
18122: CALL_OW 6
// if tmp = JMM then
18126: LD_VAR 0 4
18130: PUSH
18131: LD_EXP 1
18135: EQUAL
18136: IFFALSE 18192
// begin Say ( JMM , D2b-JMM-1 ) ;
18138: LD_EXP 1
18142: PPUSH
18143: LD_STRING D2b-JMM-1
18145: PPUSH
18146: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18150: LD_EXP 19
18154: PPUSH
18155: LD_STRING D2b-Kurt-1
18157: PPUSH
18158: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18162: LD_EXP 1
18166: PPUSH
18167: LD_STRING D2b-JMM-2
18169: PPUSH
18170: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18174: LD_EXP 19
18178: PPUSH
18179: LD_STRING D2b-Kurt-2
18181: PPUSH
18182: CALL_OW 88
// DialogueOff ;
18186: CALL_OW 7
// end else
18190: GO 18382
// begin if GetSex ( tmp ) = 1 then
18192: LD_VAR 0 4
18196: PPUSH
18197: CALL_OW 258
18201: PUSH
18202: LD_INT 1
18204: EQUAL
18205: IFFALSE 18219
// Say ( tmp , D2b-Sol1-1 ) ;
18207: LD_VAR 0 4
18211: PPUSH
18212: LD_STRING D2b-Sol1-1
18214: PPUSH
18215: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18219: LD_VAR 0 4
18223: PPUSH
18224: CALL_OW 258
18228: PUSH
18229: LD_INT 2
18231: EQUAL
18232: IFFALSE 18246
// Say ( tmp , D2b-FSol1-1 ) ;
18234: LD_VAR 0 4
18238: PPUSH
18239: LD_STRING D2b-FSol1-1
18241: PPUSH
18242: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18246: LD_EXP 19
18250: PPUSH
18251: LD_STRING D2b-Kurt-1
18253: PPUSH
18254: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18258: LD_VAR 0 4
18262: PPUSH
18263: CALL_OW 258
18267: PUSH
18268: LD_INT 1
18270: EQUAL
18271: IFFALSE 18285
// Say ( tmp , D2b-Sol1-2 ) ;
18273: LD_VAR 0 4
18277: PPUSH
18278: LD_STRING D2b-Sol1-2
18280: PPUSH
18281: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18285: LD_VAR 0 4
18289: PPUSH
18290: CALL_OW 258
18294: PUSH
18295: LD_INT 2
18297: EQUAL
18298: IFFALSE 18312
// Say ( tmp , D2b-FSol1-2 ) ;
18300: LD_VAR 0 4
18304: PPUSH
18305: LD_STRING D2b-FSol1-2
18307: PPUSH
18308: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18312: LD_EXP 19
18316: PPUSH
18317: LD_STRING D2b-Kurt-2
18319: PPUSH
18320: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18324: LD_VAR 0 4
18328: PPUSH
18329: CALL_OW 258
18333: PUSH
18334: LD_INT 1
18336: EQUAL
18337: IFFALSE 18351
// Say ( tmp , D2c-Sol1-2 ) ;
18339: LD_VAR 0 4
18343: PPUSH
18344: LD_STRING D2c-Sol1-2
18346: PPUSH
18347: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18351: LD_VAR 0 4
18355: PPUSH
18356: CALL_OW 258
18360: PUSH
18361: LD_INT 2
18363: EQUAL
18364: IFFALSE 18378
// Say ( tmp , D2c-FSol1-2 ) ;
18366: LD_VAR 0 4
18370: PPUSH
18371: LD_STRING D2c-FSol1-2
18373: PPUSH
18374: CALL_OW 88
// DialogueOff ;
18378: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18382: LD_ADDR_VAR 0 7
18386: PUSH
18387: CALL 5768 0 0
18391: ST_TO_ADDR
// if dec2 = 1 then
18392: LD_VAR 0 7
18396: PUSH
18397: LD_INT 1
18399: EQUAL
18400: IFFALSE 18442
// begin DialogueOn ;
18402: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18406: LD_EXP 19
18410: PPUSH
18411: LD_STRING D2a-Kurt-1
18413: PPUSH
18414: CALL_OW 88
// DialogueOff ;
18418: CALL_OW 7
// InGameOff ;
18422: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18426: LD_INT 1
18428: PPUSH
18429: LD_INT 2
18431: PPUSH
18432: LD_INT 2
18434: PPUSH
18435: LD_INT 1
18437: PPUSH
18438: CALL_OW 80
// end ; if dec2 = 2 then
18442: LD_VAR 0 7
18446: PUSH
18447: LD_INT 2
18449: EQUAL
18450: IFFALSE 18620
// begin if tmp = JMM then
18452: LD_VAR 0 4
18456: PUSH
18457: LD_EXP 1
18461: EQUAL
18462: IFFALSE 18522
// begin DialogueOn ;
18464: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18468: LD_EXP 1
18472: PPUSH
18473: LD_STRING D2c-JMM-1
18475: PPUSH
18476: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18480: LD_EXP 19
18484: PPUSH
18485: LD_STRING D2c-Kurt-1
18487: PPUSH
18488: CALL_OW 88
// DialogueOff ;
18492: CALL_OW 7
// InGameOff ;
18496: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18500: LD_EXP 19
18504: PPUSH
18505: LD_INT 9
18507: PPUSH
18508: CALL_OW 113
// readyToEscape = 1 ;
18512: LD_ADDR_EXP 21
18516: PUSH
18517: LD_INT 1
18519: ST_TO_ADDR
// end else
18520: GO 18620
// begin DialogueOn ;
18522: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18526: LD_VAR 0 4
18530: PPUSH
18531: CALL_OW 258
18535: PUSH
18536: LD_INT 1
18538: EQUAL
18539: IFFALSE 18553
// Say ( tmp , D2c-Sol1-1 ) ;
18541: LD_VAR 0 4
18545: PPUSH
18546: LD_STRING D2c-Sol1-1
18548: PPUSH
18549: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18553: LD_VAR 0 4
18557: PPUSH
18558: CALL_OW 258
18562: PUSH
18563: LD_INT 2
18565: EQUAL
18566: IFFALSE 18580
// Say ( tmp , D2c-FSol1-1 ) ;
18568: LD_VAR 0 4
18572: PPUSH
18573: LD_STRING D2c-FSol1-1
18575: PPUSH
18576: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18580: LD_EXP 19
18584: PPUSH
18585: LD_STRING D2c-Kurt-1
18587: PPUSH
18588: CALL_OW 88
// DialogueOff ;
18592: CALL_OW 7
// InGameOff ;
18596: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18600: LD_EXP 19
18604: PPUSH
18605: LD_INT 9
18607: PPUSH
18608: CALL_OW 113
// readyToEscape = 1 ;
18612: LD_ADDR_EXP 21
18616: PUSH
18617: LD_INT 1
18619: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18620: LD_VAR 0 6
18624: PUSH
18625: LD_INT 3
18627: EQUAL
18628: IFFALSE 18802
// begin DialogueOn ;
18630: CALL_OW 6
// if tmp = JMM then
18634: LD_VAR 0 4
18638: PUSH
18639: LD_EXP 1
18643: EQUAL
18644: IFFALSE 18704
// begin DialogueOn ;
18646: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18650: LD_EXP 1
18654: PPUSH
18655: LD_STRING D2c-JMM-1
18657: PPUSH
18658: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18662: LD_EXP 19
18666: PPUSH
18667: LD_STRING D2c-Kurt-1
18669: PPUSH
18670: CALL_OW 88
// DialogueOff ;
18674: CALL_OW 7
// InGameOff ;
18678: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18682: LD_EXP 19
18686: PPUSH
18687: LD_INT 9
18689: PPUSH
18690: CALL_OW 113
// readyToEscape = 1 ;
18694: LD_ADDR_EXP 21
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// end else
18702: GO 18802
// begin DialogueOn ;
18704: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18708: LD_VAR 0 4
18712: PPUSH
18713: CALL_OW 258
18717: PUSH
18718: LD_INT 1
18720: EQUAL
18721: IFFALSE 18735
// Say ( tmp , D2c-Sol1-1 ) ;
18723: LD_VAR 0 4
18727: PPUSH
18728: LD_STRING D2c-Sol1-1
18730: PPUSH
18731: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18735: LD_VAR 0 4
18739: PPUSH
18740: CALL_OW 258
18744: PUSH
18745: LD_INT 2
18747: EQUAL
18748: IFFALSE 18762
// Say ( tmp , D2c-FSol1-1 ) ;
18750: LD_VAR 0 4
18754: PPUSH
18755: LD_STRING D2c-FSol1-1
18757: PPUSH
18758: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18762: LD_EXP 19
18766: PPUSH
18767: LD_STRING D2c-Kurt-1
18769: PPUSH
18770: CALL_OW 88
// DialogueOff ;
18774: CALL_OW 7
// InGameOff ;
18778: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18782: LD_EXP 19
18786: PPUSH
18787: LD_INT 9
18789: PPUSH
18790: CALL_OW 113
// readyToEscape = 1 ;
18794: LD_ADDR_EXP 21
18798: PUSH
18799: LD_INT 1
18801: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18802: LD_ADDR_EXP 29
18806: PUSH
18807: LD_INT 0
18809: ST_TO_ADDR
// end ; end_of_file
18810: LD_VAR 0 1
18814: RET
// every 0 0$1 do
18815: GO 18817
18817: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18818: LD_INT 3
18820: PPUSH
18821: LD_INT 32
18823: PPUSH
18824: LD_INT 3
18826: PPUSH
18827: CALL 5823 0 3
18831: END
// every 0 0$1 do
18832: GO 18834
18834: DISABLE
// begin enable ;
18835: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18836: LD_INT 3
18838: PPUSH
18839: LD_INT 2
18841: PPUSH
18842: CALL 5908 0 2
// if disableHealAI = 0 then
18846: LD_EXP 33
18850: PUSH
18851: LD_INT 0
18853: EQUAL
18854: IFFALSE 18872
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18856: LD_INT 3
18858: PPUSH
18859: LD_INT 10
18861: PPUSH
18862: LD_INT 11
18864: PPUSH
18865: LD_INT 32
18867: PPUSH
18868: CALL 6167 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18872: LD_INT 3
18874: PPUSH
18875: LD_INT 51
18877: PPUSH
18878: LD_INT 7
18880: PPUSH
18881: CALL 7967 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18885: LD_INT 3
18887: PPUSH
18888: LD_INT 14
18890: PPUSH
18891: LD_INT 121
18893: PPUSH
18894: LD_INT 100
18896: PPUSH
18897: CALL 7128 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18901: LD_INT 3
18903: PPUSH
18904: LD_INT 1
18906: PPUSH
18907: CALL 6616 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18911: LD_INT 3
18913: PPUSH
18914: LD_EXP 31
18918: PPUSH
18919: CALL 8110 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18923: LD_INT 3
18925: PPUSH
18926: LD_INT 8
18928: PUSH
18929: LD_INT 67
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: PPUSH
18939: LD_INT 2
18941: PPUSH
18942: CALL_OW 12
18946: ARRAY
18947: PPUSH
18948: LD_INT 11
18950: PPUSH
18951: CALL 8316 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18955: LD_INT 3
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL 8673 0 2
// end ;
18965: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18966: LD_INT 22
18968: PUSH
18969: LD_INT 3
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 21
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 55
18988: PUSH
18989: EMPTY
18990: LIST
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: LD_INT 34
18997: PUSH
18998: LD_INT 51
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 69
19019: PUSH
19020: LD_INT 0
19022: EQUAL
19023: PUSH
19024: LD_INT 21
19026: PPUSH
19027: CALL_OW 255
19031: PUSH
19032: LD_INT 3
19034: EQUAL
19035: AND
19036: PUSH
19037: LD_INT 21
19039: PPUSH
19040: CALL_OW 302
19044: AND
19045: PUSH
19046: LD_INT 2
19048: PPUSH
19049: CALL_OW 255
19053: PUSH
19054: LD_INT 3
19056: EQUAL
19057: AND
19058: PUSH
19059: LD_INT 2
19061: PPUSH
19062: CALL_OW 302
19066: AND
19067: IFFALSE 19251
19069: GO 19071
19071: DISABLE
// begin enable ;
19072: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
19073: LD_INT 2
19075: PPUSH
19076: CALL_OW 274
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: LD_INT 1000
19086: PPUSH
19087: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19091: LD_INT 3
19093: PPUSH
19094: LD_INT 21
19096: PPUSH
19097: LD_INT 5
19099: PUSH
19100: LD_INT 6
19102: PUSH
19103: LD_INT 6
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_OWVAR 67
19115: ARRAY
19116: PPUSH
19117: LD_INT 43
19119: PUSH
19120: LD_INT 43
19122: PUSH
19123: LD_INT 44
19125: PUSH
19126: LD_INT 44
19128: PUSH
19129: LD_INT 46
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 43
19141: PUSH
19142: LD_INT 43
19144: PUSH
19145: LD_INT 44
19147: PUSH
19148: LD_INT 44
19150: PUSH
19151: LD_INT 44
19153: PUSH
19154: LD_INT 46
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 44
19167: PUSH
19168: LD_INT 44
19170: PUSH
19171: LD_INT 44
19173: PUSH
19174: LD_INT 44
19176: PUSH
19177: LD_INT 46
19179: PUSH
19180: LD_INT 46
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PUSH
19196: LD_OWVAR 67
19200: ARRAY
19201: PPUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: LD_INT 22
19210: PUSH
19211: LD_INT 22
19213: PUSH
19214: LD_INT 24
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PPUSH
19224: LD_INT 2
19226: PPUSH
19227: CALL_OW 12
19231: ARRAY
19232: PUSH
19233: LD_INT 24
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: LIST
19240: PUSH
19241: LD_OWVAR 67
19245: ARRAY
19246: PPUSH
19247: CALL 6462 0 7
// end ;
19251: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19252: LD_INT 17
19254: PPUSH
19255: CALL_OW 255
19259: PUSH
19260: LD_INT 3
19262: EQUAL
19263: PUSH
19264: LD_INT 17
19266: PPUSH
19267: CALL_OW 302
19271: AND
19272: PUSH
19273: LD_INT 2
19275: PPUSH
19276: CALL_OW 255
19280: PUSH
19281: LD_INT 3
19283: EQUAL
19284: AND
19285: PUSH
19286: LD_INT 2
19288: PPUSH
19289: CALL_OW 302
19293: AND
19294: IFFALSE 19361
19296: GO 19298
19298: DISABLE
// begin enable ;
19299: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19300: LD_INT 17
19302: PPUSH
19303: LD_INT 22
19305: PPUSH
19306: LD_INT 1
19308: PPUSH
19309: LD_INT 1
19311: PPUSH
19312: LD_INT 42
19314: PUSH
19315: LD_INT 43
19317: PUSH
19318: LD_INT 44
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: PPUSH
19329: LD_INT 3
19331: PPUSH
19332: CALL_OW 12
19336: ARRAY
19337: PPUSH
19338: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19342: LD_INT 17
19344: PPUSH
19345: LD_INT 22
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: LD_INT 51
19356: PPUSH
19357: CALL_OW 185
// end ;
19361: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19362: LD_INT 17
19364: PPUSH
19365: CALL_OW 302
19369: PUSH
19370: LD_INT 17
19372: PPUSH
19373: CALL_OW 255
19377: PUSH
19378: LD_INT 3
19380: EQUAL
19381: AND
19382: PUSH
19383: LD_INT 2
19385: PPUSH
19386: CALL_OW 302
19390: AND
19391: PUSH
19392: LD_INT 2
19394: PPUSH
19395: CALL_OW 255
19399: PUSH
19400: LD_INT 3
19402: EQUAL
19403: AND
19404: PUSH
19405: LD_INT 17
19407: PPUSH
19408: CALL_OW 313
19412: NOT
19413: AND
19414: IFFALSE 19508
19416: GO 19418
19418: DISABLE
19419: LD_INT 0
19421: PPUSH
// begin for i = 1 to 6 do
19422: LD_ADDR_VAR 0 1
19426: PUSH
19427: DOUBLE
19428: LD_INT 1
19430: DEC
19431: ST_TO_ADDR
19432: LD_INT 6
19434: PUSH
19435: FOR_TO
19436: IFFALSE 19506
// begin uc_side = 3 ;
19438: LD_ADDR_OWVAR 20
19442: PUSH
19443: LD_INT 3
19445: ST_TO_ADDR
// uc_nation = 3 ;
19446: LD_ADDR_OWVAR 21
19450: PUSH
19451: LD_INT 3
19453: ST_TO_ADDR
// hc_gallery :=  ;
19454: LD_ADDR_OWVAR 33
19458: PUSH
19459: LD_STRING 
19461: ST_TO_ADDR
// hc_name :=  ;
19462: LD_ADDR_OWVAR 26
19466: PUSH
19467: LD_STRING 
19469: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19470: LD_INT 0
19472: PPUSH
19473: LD_EXP 34
19477: PPUSH
19478: LD_EXP 35
19482: PPUSH
19483: CALL_OW 12
19487: PPUSH
19488: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19492: CALL_OW 44
19496: PPUSH
19497: LD_INT 17
19499: PPUSH
19500: CALL_OW 52
// end ;
19504: GO 19435
19506: POP
19507: POP
// end ;
19508: PPOPN 1
19510: END
// every 2 2$0 do var i , j ;
19511: GO 19513
19513: DISABLE
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19518: LD_INT 14700
19520: PUSH
19521: LD_INT 33600
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 1
19530: PPUSH
19531: LD_INT 2
19533: PPUSH
19534: CALL_OW 12
19538: ARRAY
19539: PPUSH
19540: CALL_OW 67
// disableHealAI = 1 ;
19544: LD_ADDR_EXP 33
19548: PUSH
19549: LD_INT 1
19551: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19552: LD_ADDR_VAR 0 1
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_INT 3
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 25
19569: PUSH
19570: LD_INT 4
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PPUSH
19581: CALL_OW 69
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19600
// ComExitBuilding ( i ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: CALL_OW 122
19598: GO 19586
19600: POP
19601: POP
// wait ( 0 0$1 ) ;
19602: LD_INT 35
19604: PPUSH
19605: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19609: LD_INT 35
19611: PPUSH
19612: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19616: LD_ADDR_VAR 0 1
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_INT 3
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 25
19633: PUSH
19634: LD_INT 4
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 69
19649: PUSH
19650: FOR_IN
19651: IFFALSE 19728
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 19
19660: PPUSH
19661: LD_INT 22
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 25
19673: PUSH
19674: LD_INT 12
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PPUSH
19685: CALL_OW 70
19689: PUSH
19690: FOR_IN
19691: IFFALSE 19724
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19693: LD_VAR 0 1
19697: PPUSH
19698: LD_VAR 0 2
19702: PPUSH
19703: CALL_OW 250
19707: PPUSH
19708: LD_VAR 0 2
19712: PPUSH
19713: CALL_OW 251
19717: PPUSH
19718: CALL_OW 191
// end ;
19722: GO 19690
19724: POP
19725: POP
// end ;
19726: GO 19650
19728: POP
19729: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19730: LD_INT 22
19732: PUSH
19733: LD_INT 3
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 25
19742: PUSH
19743: LD_INT 4
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: PUSH
19759: LD_INT 0
19761: EQUAL
19762: PUSH
19763: LD_EXP 32
19767: PUSH
19768: LD_INT 6
19770: PUSH
19771: LD_INT 7
19773: PUSH
19774: LD_INT 8
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: PUSH
19782: LD_OWVAR 67
19786: ARRAY
19787: GREATEREQUAL
19788: OR
19789: PUSH
19790: LD_INT 19
19792: PPUSH
19793: LD_INT 22
19795: PUSH
19796: LD_INT 0
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 12
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 70
19821: PUSH
19822: LD_INT 0
19824: EQUAL
19825: OR
19826: IFFALSE 19609
// disableHealAI = 0 ;
19828: LD_ADDR_EXP 33
19832: PUSH
19833: LD_INT 0
19835: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_INT 22
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 25
19853: PUSH
19854: LD_INT 12
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 69
19869: PUSH
19870: FOR_IN
19871: IFFALSE 19887
// SetClass ( i , 16 ) ;
19873: LD_VAR 0 1
19877: PPUSH
19878: LD_INT 16
19880: PPUSH
19881: CALL_OW 336
19885: GO 19870
19887: POP
19888: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19889: LD_ADDR_VAR 0 1
19893: PUSH
19894: LD_INT 22
19896: PUSH
19897: LD_INT 3
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 25
19906: PUSH
19907: LD_INT 4
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 69
19922: PUSH
19923: FOR_IN
19924: IFFALSE 19943
// ComMoveXY ( i , 113 , 94 ) ;
19926: LD_VAR 0 1
19930: PPUSH
19931: LD_INT 113
19933: PPUSH
19934: LD_INT 94
19936: PPUSH
19937: CALL_OW 111
19941: GO 19923
19943: POP
19944: POP
// end ;
19945: PPOPN 2
19947: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19948: LD_INT 21
19950: PPUSH
19951: CALL_OW 255
19955: PUSH
19956: LD_INT 3
19958: EQUAL
19959: PUSH
19960: LD_INT 21
19962: PPUSH
19963: CALL_OW 302
19967: AND
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 34
19981: PUSH
19982: LD_INT 51
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: PUSH
19998: LD_INT 0
20000: EQUAL
20001: AND
20002: IFFALSE 20034
20004: GO 20006
20006: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20007: LD_INT 21
20009: PPUSH
20010: LD_INT 23
20012: PPUSH
20013: LD_INT 1
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_INT 51
20021: PPUSH
20022: CALL_OW 185
// wait ( 5 5$0 ) ;
20026: LD_INT 10500
20028: PPUSH
20029: CALL_OW 67
// enable ;
20033: ENABLE
// end ; end_of_file
20034: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
20035: LD_EXP 26
20039: PUSH
20040: LD_INT 0
20042: LESSEQUAL
20043: IFFALSE 20192
20045: GO 20047
20047: DISABLE
20048: LD_INT 0
20050: PPUSH
20051: PPUSH
20052: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20053: LD_ADDR_VAR 0 2
20057: PUSH
20058: LD_INT 22
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 21
20070: PUSH
20071: LD_INT 3
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: LD_INT 30
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 30
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: ST_TO_ADDR
// for i in tmp do
20116: LD_ADDR_VAR 0 1
20120: PUSH
20121: LD_VAR 0 2
20125: PUSH
20126: FOR_IN
20127: IFFALSE 20160
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20129: LD_ADDR_VAR 0 3
20133: PUSH
20134: LD_VAR 0 3
20138: PUSH
20139: LD_VAR 0 1
20143: PPUSH
20144: CALL_OW 274
20148: PPUSH
20149: LD_INT 1
20151: PPUSH
20152: CALL_OW 275
20156: PLUS
20157: ST_TO_ADDR
20158: GO 20126
20160: POP
20161: POP
// if yourCrates >= needCrates then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_EXP 25
20171: GREATEREQUAL
20172: IFFALSE 20185
// begin FinishMission ( yourCrates ) ;
20174: LD_VAR 0 3
20178: PPUSH
20179: CALL 20195 0 1
// end else
20183: GO 20192
// begin YouLost ( matmin ) ;
20185: LD_STRING matmin
20187: PPUSH
20188: CALL_OW 104
// end ; end ;
20192: PPOPN 3
20194: END
// export function FinishMission ( crates ) ; begin
20195: LD_INT 0
20197: PPUSH
// if crates + 100 > crates then
20198: LD_VAR 0 1
20202: PUSH
20203: LD_INT 100
20205: PLUS
20206: PUSH
20207: LD_VAR 0 1
20211: GREATER
20212: IFFALSE 20236
// begin AddMedal ( cans , 1 ) ;
20214: LD_STRING cans
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20224: LD_INT 1
20226: PPUSH
20227: LD_STRING 06_crates_1
20229: PPUSH
20230: CALL_OW 39
// end else
20234: GO 20257
// begin AddMedal ( cans , - 1 ) ;
20236: LD_STRING cans
20238: PPUSH
20239: LD_INT 1
20241: NEG
20242: PPUSH
20243: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20247: LD_INT 0
20249: PPUSH
20250: LD_STRING 06_crates_1
20252: PPUSH
20253: CALL_OW 39
// end ; if unitLost < 2 then
20257: LD_EXP 30
20261: PUSH
20262: LD_INT 2
20264: LESS
20265: IFFALSE 20279
// begin AddMedal ( people , 1 ) ;
20267: LD_STRING people
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 101
// end else
20277: GO 20290
// begin AddMedal ( people , - 1 ) ;
20279: LD_STRING people
20281: PPUSH
20282: LD_INT 1
20284: NEG
20285: PPUSH
20286: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20290: LD_EXP 28
20294: PPUSH
20295: LD_STRING 06_remoteVehs_1
20297: PPUSH
20298: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20302: LD_EXP 28
20306: PUSH
20307: LD_INT 1
20309: EQUAL
20310: IFFALSE 20324
// begin AddMedal ( remote , 1 ) ;
20312: LD_STRING remote
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 101
// end else
20322: GO 20364
// begin if GetTech ( 18 , 1 ) = state_enabled then
20324: LD_INT 18
20326: PPUSH
20327: LD_INT 1
20329: PPUSH
20330: CALL_OW 321
20334: PUSH
20335: LD_INT 1
20337: EQUAL
20338: IFFALSE 20353
// begin AddMedal ( remote , - 1 ) ;
20340: LD_STRING remote
20342: PPUSH
20343: LD_INT 1
20345: NEG
20346: PPUSH
20347: CALL_OW 101
// end else
20351: GO 20364
// begin AddMedal ( remote , - 2 ) ;
20353: LD_STRING remote
20355: PPUSH
20356: LD_INT 2
20358: NEG
20359: PPUSH
20360: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20364: LD_EXP 20
20368: PPUSH
20369: LD_STRING 06_KurtStatus_1
20371: PPUSH
20372: CALL_OW 39
// GiveMedals ( Main ) ;
20376: LD_STRING Main
20378: PPUSH
20379: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20383: LD_INT 50
20385: PUSH
20386: EMPTY
20387: LIST
20388: PUSH
20389: LD_INT 22
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 21
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 25
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 25
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 25
20434: PUSH
20435: LD_INT 3
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 25
20444: PUSH
20445: LD_INT 4
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 69
20469: PPUSH
20470: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20474: LD_EXP 1
20478: PPUSH
20479: LD_EXP 42
20483: PUSH
20484: LD_STRING JMM
20486: STR
20487: PPUSH
20488: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20492: LD_EXP 2
20496: PPUSH
20497: LD_EXP 42
20501: PUSH
20502: LD_STRING Lisa
20504: STR
20505: PPUSH
20506: CALL 5311 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20510: LD_EXP 3
20514: PPUSH
20515: LD_EXP 42
20519: PUSH
20520: LD_STRING Bobby
20522: STR
20523: PPUSH
20524: CALL 5311 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20528: LD_EXP 4
20532: PPUSH
20533: LD_EXP 42
20537: PUSH
20538: LD_STRING Cyrus
20540: STR
20541: PPUSH
20542: CALL 5311 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20546: LD_EXP 5
20550: PPUSH
20551: LD_EXP 42
20555: PUSH
20556: LD_STRING Frank
20558: STR
20559: PPUSH
20560: CALL 5311 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20564: LD_EXP 6
20568: PPUSH
20569: LD_EXP 42
20573: PUSH
20574: LD_STRING Brown
20576: STR
20577: PPUSH
20578: CALL 5311 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20582: LD_EXP 7
20586: PPUSH
20587: LD_EXP 42
20591: PUSH
20592: LD_STRING Donaldson
20594: STR
20595: PPUSH
20596: CALL 5311 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20600: LD_EXP 8
20604: PPUSH
20605: LD_EXP 42
20609: PUSH
20610: LD_STRING Gladstone
20612: STR
20613: PPUSH
20614: CALL 5311 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20618: LD_EXP 9
20622: PPUSH
20623: LD_EXP 42
20627: PUSH
20628: LD_STRING Denis
20630: STR
20631: PPUSH
20632: CALL 5311 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20636: LD_EXP 15
20640: PPUSH
20641: LD_EXP 42
20645: PUSH
20646: LD_STRING Joan
20648: STR
20649: PPUSH
20650: CALL 5311 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20654: LD_EXP 16
20658: PPUSH
20659: LD_STRING 06_JoanStatus_1
20661: PPUSH
20662: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20666: LD_INT 50
20668: PUSH
20669: EMPTY
20670: LIST
20671: PUSH
20672: LD_INT 22
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 21
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: LD_INT 25
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 25
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 25
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 25
20727: PUSH
20728: LD_INT 4
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: PUSH
20753: LD_EXP 1
20757: PUSH
20758: LD_EXP 2
20762: PUSH
20763: LD_EXP 3
20767: PUSH
20768: LD_EXP 4
20772: PUSH
20773: LD_EXP 5
20777: PUSH
20778: LD_EXP 6
20782: PUSH
20783: LD_EXP 7
20787: PUSH
20788: LD_EXP 8
20792: PUSH
20793: LD_EXP 9
20797: PUSH
20798: LD_EXP 15
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: DIFF
20815: PPUSH
20816: LD_STRING 06_other_survivors
20818: PPUSH
20819: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20823: LD_INT 50
20825: PUSH
20826: EMPTY
20827: LIST
20828: PUSH
20829: LD_INT 22
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 21
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 25
20854: PUSH
20855: LD_INT 12
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 25
20864: PUSH
20865: LD_INT 16
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: PPUSH
20888: LD_STRING 06_other_apemans
20890: PPUSH
20891: CALL_OW 38
// YouWin ;
20895: CALL_OW 103
// end ; end_of_file
20899: LD_VAR 0 2
20903: RET
// every 1 1$0 trigger sendedConvoys = 3 do
20904: LD_EXP 39
20908: PUSH
20909: LD_INT 3
20911: EQUAL
20912: IFFALSE 21027
20914: GO 20916
20916: DISABLE
// begin enable ;
20917: ENABLE
// sendedConvoys = 0 ;
20918: LD_ADDR_EXP 39
20922: PUSH
20923: LD_INT 0
20925: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20926: LD_INT 6
20928: PPUSH
20929: LD_INT 3
20931: PPUSH
20932: LD_INT 5
20934: PPUSH
20935: LD_INT 10
20937: PPUSH
20938: CALL_OW 12
20942: PUSH
20943: LD_INT 5
20945: PPUSH
20946: LD_INT 11
20948: PPUSH
20949: CALL_OW 12
20953: PUSH
20954: LD_INT 8
20956: PPUSH
20957: LD_INT 12
20959: PPUSH
20960: CALL_OW 12
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: PUSH
20970: LD_OWVAR 67
20974: ARRAY
20975: PPUSH
20976: LD_INT 0
20978: PPUSH
20979: LD_INT 0
20981: PPUSH
20982: LD_INT 0
20984: PPUSH
20985: LD_INT 3
20987: PPUSH
20988: LD_EXP 34
20992: PPUSH
20993: LD_EXP 35
20997: PPUSH
20998: CALL_OW 12
21002: PPUSH
21003: LD_INT 18
21005: PPUSH
21006: LD_INT 17
21008: PPUSH
21009: LD_INT 1
21011: PPUSH
21012: LD_INT 1
21014: PPUSH
21015: LD_INT 2
21017: PPUSH
21018: CALL_OW 12
21022: PPUSH
21023: CALL 8903 0 12
// end ; end_of_file
21027: END
// export function PrepareNature ; var i , un ; begin
21028: LD_INT 0
21030: PPUSH
21031: PPUSH
21032: PPUSH
// for i = 1 to Difficulty + 2 do
21033: LD_ADDR_VAR 0 2
21037: PUSH
21038: DOUBLE
21039: LD_INT 1
21041: DEC
21042: ST_TO_ADDR
21043: LD_OWVAR 67
21047: PUSH
21048: LD_INT 2
21050: PLUS
21051: PUSH
21052: FOR_TO
21053: IFFALSE 21162
// begin hc_sex = sex_male ;
21055: LD_ADDR_OWVAR 27
21059: PUSH
21060: LD_INT 1
21062: ST_TO_ADDR
// uc_side = 0 ;
21063: LD_ADDR_OWVAR 20
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// uc_nation = nation_nature ;
21071: LD_ADDR_OWVAR 21
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// hc_class = class_tiger ;
21079: LD_ADDR_OWVAR 28
21083: PUSH
21084: LD_INT 14
21086: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21087: LD_ADDR_OWVAR 31
21091: PUSH
21092: LD_EXP 35
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21112: LD_ADDR_OWVAR 35
21116: PUSH
21117: LD_INT 5
21119: NEG
21120: PPUSH
21121: LD_INT 5
21123: PPUSH
21124: CALL_OW 12
21128: PUSH
21129: LD_OWVAR 67
21133: MUL
21134: ST_TO_ADDR
// un = CreateHuman ;
21135: LD_ADDR_VAR 0 3
21139: PUSH
21140: CALL_OW 44
21144: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21145: LD_VAR 0 3
21149: PPUSH
21150: LD_INT 20
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 49
// end ;
21160: GO 21052
21162: POP
21163: POP
// for i = 1 to rand ( 3 , 4 ) do
21164: LD_ADDR_VAR 0 2
21168: PUSH
21169: DOUBLE
21170: LD_INT 1
21172: DEC
21173: ST_TO_ADDR
21174: LD_INT 3
21176: PPUSH
21177: LD_INT 4
21179: PPUSH
21180: CALL_OW 12
21184: PUSH
21185: FOR_TO
21186: IFFALSE 21280
// begin hc_sex = sex_male ;
21188: LD_ADDR_OWVAR 27
21192: PUSH
21193: LD_INT 1
21195: ST_TO_ADDR
// uc_side = 0 ;
21196: LD_ADDR_OWVAR 20
21200: PUSH
21201: LD_INT 0
21203: ST_TO_ADDR
// uc_nation = nation_nature ;
21204: LD_ADDR_OWVAR 21
21208: PUSH
21209: LD_INT 0
21211: ST_TO_ADDR
// hc_class = 18 ;
21212: LD_ADDR_OWVAR 28
21216: PUSH
21217: LD_INT 18
21219: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21220: LD_ADDR_OWVAR 31
21224: PUSH
21225: LD_EXP 35
21229: PUSH
21230: LD_INT 0
21232: PUSH
21233: LD_INT 0
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: ST_TO_ADDR
// hc_agressivity = 0 ;
21245: LD_ADDR_OWVAR 35
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// un = CreateHuman ;
21253: LD_ADDR_VAR 0 3
21257: PUSH
21258: CALL_OW 44
21262: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_INT 20
21270: PPUSH
21271: LD_INT 0
21273: PPUSH
21274: CALL_OW 49
// end ;
21278: GO 21185
21280: POP
21281: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21282: LD_ADDR_VAR 0 2
21286: PUSH
21287: DOUBLE
21288: LD_INT 1
21290: DEC
21291: ST_TO_ADDR
21292: LD_INT 1
21294: PPUSH
21295: LD_INT 3
21297: PPUSH
21298: CALL_OW 12
21302: PUSH
21303: LD_OWVAR 67
21307: PLUS
21308: PUSH
21309: FOR_TO
21310: IFFALSE 21491
// begin hc_sex = sex_male ;
21312: LD_ADDR_OWVAR 27
21316: PUSH
21317: LD_INT 1
21319: ST_TO_ADDR
// uc_side = 0 ;
21320: LD_ADDR_OWVAR 20
21324: PUSH
21325: LD_INT 0
21327: ST_TO_ADDR
// uc_nation = nation_nature ;
21328: LD_ADDR_OWVAR 21
21332: PUSH
21333: LD_INT 0
21335: ST_TO_ADDR
// hc_class = class_apeman ;
21336: LD_ADDR_OWVAR 28
21340: PUSH
21341: LD_INT 12
21343: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21344: LD_ADDR_OWVAR 31
21348: PUSH
21349: LD_EXP 34
21353: PPUSH
21354: LD_EXP 35
21358: PPUSH
21359: CALL_OW 12
21363: PUSH
21364: LD_EXP 34
21368: PPUSH
21369: LD_EXP 35
21373: PPUSH
21374: CALL_OW 12
21378: PUSH
21379: LD_EXP 34
21383: PPUSH
21384: LD_EXP 35
21388: PPUSH
21389: CALL_OW 12
21393: PUSH
21394: LD_EXP 34
21398: PPUSH
21399: LD_EXP 35
21403: PPUSH
21404: CALL_OW 12
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21415: LD_ADDR_OWVAR 35
21419: PUSH
21420: LD_INT 20
21422: PPUSH
21423: LD_INT 30
21425: PPUSH
21426: CALL_OW 12
21430: PUSH
21431: LD_INT 30
21433: PPUSH
21434: LD_INT 40
21436: PPUSH
21437: CALL_OW 12
21441: PUSH
21442: LD_INT 40
21444: PPUSH
21445: LD_INT 50
21447: PPUSH
21448: CALL_OW 12
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: PUSH
21458: LD_OWVAR 67
21462: ARRAY
21463: ST_TO_ADDR
// un = CreateHuman ;
21464: LD_ADDR_VAR 0 3
21468: PUSH
21469: CALL_OW 44
21473: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21474: LD_VAR 0 3
21478: PPUSH
21479: LD_INT 21
21481: PPUSH
21482: LD_INT 0
21484: PPUSH
21485: CALL_OW 49
// end ;
21489: GO 21309
21491: POP
21492: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21493: LD_ADDR_VAR 0 2
21497: PUSH
21498: DOUBLE
21499: LD_INT 1
21501: DEC
21502: ST_TO_ADDR
21503: LD_INT 5
21505: PPUSH
21506: LD_INT 6
21508: PPUSH
21509: CALL_OW 12
21513: PUSH
21514: LD_OWVAR 67
21518: PLUS
21519: PUSH
21520: FOR_TO
21521: IFFALSE 21667
// begin hc_sex = sex_male ;
21523: LD_ADDR_OWVAR 27
21527: PUSH
21528: LD_INT 1
21530: ST_TO_ADDR
// uc_side = 0 ;
21531: LD_ADDR_OWVAR 20
21535: PUSH
21536: LD_INT 0
21538: ST_TO_ADDR
// uc_nation = nation_nature ;
21539: LD_ADDR_OWVAR 21
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// hc_class = class_apeman ;
21547: LD_ADDR_OWVAR 28
21551: PUSH
21552: LD_INT 12
21554: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21555: LD_ADDR_OWVAR 31
21559: PUSH
21560: LD_EXP 34
21564: PPUSH
21565: LD_EXP 35
21569: PPUSH
21570: CALL_OW 12
21574: PUSH
21575: LD_EXP 34
21579: PPUSH
21580: LD_EXP 35
21584: PPUSH
21585: CALL_OW 12
21589: PUSH
21590: LD_OWVAR 67
21594: PLUS
21595: PUSH
21596: LD_EXP 34
21600: PPUSH
21601: LD_EXP 35
21605: PPUSH
21606: CALL_OW 12
21610: PUSH
21611: LD_EXP 34
21615: PPUSH
21616: LD_EXP 35
21620: PPUSH
21621: CALL_OW 12
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: ST_TO_ADDR
// hc_agressivity = 0 ;
21632: LD_ADDR_OWVAR 35
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// un = CreateHuman ;
21640: LD_ADDR_VAR 0 3
21644: PUSH
21645: CALL_OW 44
21649: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21650: LD_VAR 0 3
21654: PPUSH
21655: LD_INT 22
21657: PPUSH
21658: LD_INT 0
21660: PPUSH
21661: CALL_OW 49
// end ;
21665: GO 21520
21667: POP
21668: POP
// end ; end_of_file
21669: LD_VAR 0 1
21673: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21674: LD_EXP 1
21678: PPUSH
21679: CALL_OW 301
21683: IFFALSE 21695
21685: GO 21687
21687: DISABLE
// YouLost ( JMM ) ;
21688: LD_STRING JMM
21690: PPUSH
21691: CALL_OW 104
21695: END
