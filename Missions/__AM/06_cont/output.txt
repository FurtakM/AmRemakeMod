// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 1 ;
  18: LD_ADDR_EXP 39
  22: PUSH
  23: LD_INT 1
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 40
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 41
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 28
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 19
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 15
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 37
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 23
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 24
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 25
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 38
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 31
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 30
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 36
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 32
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareNature ;
 207: CALL 19428 0 0
// PrepareDifficulty ;
 211: CALL 5141 0 0
// PrepareRussian ;
 215: CALL 4248 0 0
// PrepareVehicles ;
 219: CALL 1420 0 0
// PrepareHeroes ;
 223: CALL 438 0 0
// PrepareOthers ;
 227: CALL 1681 0 0
// PreparePlayerApemans ;
 231: CALL 1823 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 39
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 435
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; var veh ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side = 1 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 1
 449: ST_TO_ADDR
// uc_nation = 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 458: LD_ADDR_EXP 1
 462: PUSH
 463: LD_STRING JMM
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL 4625 0 2
 473: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 474: LD_ADDR_EXP 13
 478: PUSH
 479: LD_STRING Harisson
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 4625 0 2
 489: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING DeltaDoctor
 497: PPUSH
 498: CALL_OW 34
 502: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 21
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 58
 530: PUSH
 531: EMPTY
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PPUSH
 539: CALL_OW 69
 543: ST_TO_ADDR
// if veh > 0 then
 544: LD_VAR 0 2
 548: PUSH
 549: LD_INT 0
 551: GREATER
 552: IFFALSE 574
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 554: LD_EXP 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 52
// end else
 572: GO 589
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 574: LD_EXP 1
 578: PPUSH
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 589: LD_STRING LisaIn06
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: PUSH
 600: LD_INT 1
 602: EQUAL
 603: IFFALSE 707
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 58
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 646: LD_ADDR_EXP 2
 650: PUSH
 651: LD_STRING Lisa
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 4625 0 2
 661: ST_TO_ADDR
// if veh > 0 then
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 0
 669: GREATER
 670: IFFALSE 692
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 672: LD_EXP 2
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: CALL_OW 52
// end else
 690: GO 707
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 707: LD_STRING BobbyIn06
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 30
 717: PUSH
 718: LD_INT 1
 720: EQUAL
 721: IFFALSE 825
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 22
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: EMPTY
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING Bobby
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 4625 0 2
 779: ST_TO_ADDR
// if veh > 0 then
 780: LD_VAR 0 2
 784: PUSH
 785: LD_INT 0
 787: GREATER
 788: IFFALSE 810
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PPUSH
 804: CALL_OW 52
// end else
 808: GO 825
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 810: LD_EXP 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 825: LD_STRING CyrusIn06
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 943
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 58
 868: PUSH
 869: EMPTY
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 882: LD_ADDR_EXP 4
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 4625 0 2
 897: ST_TO_ADDR
// if veh > 0 then
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 0
 905: GREATER
 906: IFFALSE 928
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PPUSH
 922: CALL_OW 52
// end else
 926: GO 943
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 928: LD_EXP 4
 932: PPUSH
 933: LD_INT 2
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 943: LD_STRING FrankIn06
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 30
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 959: LD_ADDR_VAR 0 2
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1000: LD_ADDR_EXP 5
1004: PUSH
1005: LD_STRING Frank
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 4625 0 2
1015: ST_TO_ADDR
// if veh > 0 then
1016: LD_VAR 0 2
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: IFFALSE 1046
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1026: LD_EXP 5
1030: PPUSH
1031: LD_VAR 0 2
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PPUSH
1040: CALL_OW 52
// end else
1044: GO 1061
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1046: LD_EXP 5
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1061: LD_STRING BrownIn06
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1179
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 22
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 58
1104: PUSH
1105: EMPTY
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 69
1117: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1118: LD_ADDR_EXP 6
1122: PUSH
1123: LD_STRING Brown
1125: PPUSH
1126: LD_INT 1
1128: PPUSH
1129: CALL 4625 0 2
1133: ST_TO_ADDR
// if veh > 0 then
1134: LD_VAR 0 2
1138: PUSH
1139: LD_INT 0
1141: GREATER
1142: IFFALSE 1164
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1144: LD_EXP 6
1148: PPUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 52
// end else
1162: GO 1179
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1164: LD_EXP 6
1168: PPUSH
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1179: LD_STRING DonaldsonIn06
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 30
1189: PUSH
1190: LD_INT 1
1192: EQUAL
1193: IFFALSE 1297
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1236: LD_ADDR_EXP 7
1240: PUSH
1241: LD_STRING Donaldson
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 4625 0 2
1251: ST_TO_ADDR
// if veh > 0 then
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 0
1259: GREATER
1260: IFFALSE 1282
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1262: LD_EXP 7
1266: PPUSH
1267: LD_VAR 0 2
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 52
// end else
1280: GO 1297
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1282: LD_EXP 7
1286: PPUSH
1287: LD_INT 2
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1297: LD_STRING GladstoneIn06
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 30
1307: PUSH
1308: LD_INT 1
1310: EQUAL
1311: IFFALSE 1415
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_INT 22
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 21
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 58
1340: PUSH
1341: EMPTY
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 69
1353: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1354: LD_ADDR_EXP 8
1358: PUSH
1359: LD_STRING Gladstone
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL 4625 0 2
1369: ST_TO_ADDR
// if veh > 0 then
1370: LD_VAR 0 2
1374: PUSH
1375: LD_INT 0
1377: GREATER
1378: IFFALSE 1400
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// end else
1398: GO 1415
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 49
// end ; end ; end ;
1415: LD_VAR 0 1
1419: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1420: LD_INT 0
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_STRING 06_VehiclesIn06_1
1434: PPUSH
1435: EMPTY
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// uc_side = 1 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if vehicles > 0 then
1450: LD_VAR 0 5
1454: PUSH
1455: LD_INT 0
1457: GREATER
1458: IFFALSE 1676
// begin for i := 1 to vehicles do
1460: LD_ADDR_VAR 0 2
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 5
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1674
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_VAR 0 5
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: ARRAY
1513: PUSH
1514: LD_INT 2
1516: ARRAY
1517: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 3
1536: ARRAY
1537: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1538: LD_ADDR_OWVAR 38
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1558: LD_ADDR_OWVAR 40
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 5
1576: ARRAY
1577: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1578: LD_ADDR_OWVAR 41
1582: PUSH
1583: LD_INT 40
1585: ST_TO_ADDR
// veh = CreateVehicle ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: CALL_OW 45
1595: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1596: LD_VAR 0 4
1600: PPUSH
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1623: LD_OWVAR 40
1627: PUSH
1628: LD_INT 12
1630: EQUAL
1631: IFFALSE 1672
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 7
1666: ARRAY
1667: PPUSH
1668: CALL_OW 291
// end ;
1672: GO 1475
1674: POP
1675: POP
// end ; end ;
1676: LD_VAR 0 1
1680: RET
// export function PrepareOthers ; var i , veh ; begin
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
// uc_side = 1 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// uc_nation = 1 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1702: LD_ADDR_EXP 11
1706: PUSH
1707: LD_STRING OthersIn06
1709: PPUSH
1710: CALL_OW 31
1714: ST_TO_ADDR
// for i in others do
1715: LD_ADDR_VAR 0 2
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: FOR_IN
1726: IFFALSE 1816
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1728: LD_ADDR_VAR 0 3
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 21
1745: PUSH
1746: LD_INT 2
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 58
1755: PUSH
1756: EMPTY
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: ST_TO_ADDR
// if veh > 0 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1799
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1779: LD_VAR 0 2
1783: PPUSH
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 52
// end else
1797: GO 1814
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 2
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// end ; end ;
1814: GO 1725
1816: POP
1817: POP
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
// uc_side = 1 ;
1828: LD_ADDR_OWVAR 20
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// uc_nation = 0 ;
1836: LD_ADDR_OWVAR 21
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1844: LD_ADDR_EXP 12
1848: PUSH
1849: LD_STRING ApeIn06
1851: PPUSH
1852: CALL_OW 31
1856: ST_TO_ADDR
// for i in ape do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_EXP 12
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1887
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
1885: GO 1867
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 1
1893: RET
// export function PrepareDenis ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_STRING Denis
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL 4625 0 2
1928: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1929: LD_EXP 9
1933: PPUSH
1934: LD_INT 13
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1944: LD_EXP 9
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1956: LD_EXP 9
1960: PPUSH
1961: LD_INT 750
1963: PPUSH
1964: CALL_OW 234
// end ;
1968: LD_VAR 0 1
1972: RET
// export function HarrisonSupport ; var un , veh ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// uc_nation = 1 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// vc_engine = 1 ;
1994: LD_ADDR_OWVAR 39
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_control = 1 ;
2002: LD_ADDR_OWVAR 38
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2010: LD_ADDR_OWVAR 40
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_OWVAR 67
2033: ARRAY
2034: ST_TO_ADDR
// vc_chassis = 2 ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// veh = CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
// hc_class := 2 ;
2080: LD_ADDR_OWVAR 28
2084: PUSH
2085: LD_INT 2
2087: ST_TO_ADDR
// hc_sex := sex_male ;
2088: LD_ADDR_OWVAR 27
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2096: LD_ADDR_OWVAR 33
2100: PUSH
2101: LD_STRING SecondCharsGal
2103: ST_TO_ADDR
// hc_face_number := 52 ;
2104: LD_ADDR_OWVAR 34
2108: PUSH
2109: LD_INT 52
2111: ST_TO_ADDR
// hc_name := Craig Brown ;
2112: LD_ADDR_OWVAR 26
2116: PUSH
2117: LD_STRING Craig Brown
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 1
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2143: LD_ADDR_EXP 16
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2153: LD_EXP 16
2157: PPUSH
2158: LD_VAR 0 3
2162: PPUSH
2163: CALL_OW 52
// vc_engine = 1 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// vc_control = 1 ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_OWVAR 67
2206: ARRAY
2207: ST_TO_ADDR
// vc_chassis = 2 ;
2208: LD_ADDR_OWVAR 37
2212: PUSH
2213: LD_INT 2
2215: ST_TO_ADDR
// veh = CreateVehicle ;
2216: LD_ADDR_VAR 0 3
2220: PUSH
2221: CALL_OW 45
2225: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2226: LD_VAR 0 3
2230: PPUSH
2231: LD_INT 2
2233: PPUSH
2234: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_INT 3
2245: PPUSH
2246: LD_INT 0
2248: PPUSH
2249: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2253: LD_VAR 0 3
2257: PPUSH
2258: LD_INT 50
2260: PPUSH
2261: CALL_OW 240
// hc_class := 1 ;
2265: LD_ADDR_OWVAR 28
2269: PUSH
2270: LD_INT 1
2272: ST_TO_ADDR
// hc_sex := sex_female ;
2273: LD_ADDR_OWVAR 27
2277: PUSH
2278: LD_INT 2
2280: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2281: LD_ADDR_OWVAR 33
2285: PUSH
2286: LD_STRING SecondCharsGal
2288: ST_TO_ADDR
// hc_face_number := 45 ;
2289: LD_ADDR_OWVAR 34
2293: PUSH
2294: LD_INT 45
2296: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2297: LD_ADDR_OWVAR 26
2301: PUSH
2302: LD_STRING Ingrid Jonsson
2304: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2305: LD_ADDR_OWVAR 31
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: LD_INT 0
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2328: LD_ADDR_EXP 17
2332: PUSH
2333: CALL_OW 44
2337: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2338: LD_EXP 17
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: LD_INT 45
2359: PPUSH
2360: CALL_OW 240
// end ;
2364: LD_VAR 0 1
2368: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2369: LD_INT 0
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
// j = 0 ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: LD_INT 0
2383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2384: LD_INT 35
2386: PPUSH
2387: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2391: LD_ADDR_VAR 0 2
2395: PUSH
2396: LD_INT 22
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 21
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: LD_INT 25
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 25
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 25
2451: PUSH
2452: LD_INT 4
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: PPUSH
2471: CALL_OW 69
2475: PUSH
2476: FOR_IN
2477: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2479: LD_INT 22
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: LD_INT 21
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 21
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 59
2524: PUSH
2525: EMPTY
2526: LIST
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 91
2537: PUSH
2538: LD_VAR 0 2
2542: PUSH
2543: LD_INT 25
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: PPUSH
2556: CALL_OW 69
2560: NOT
2561: PUSH
2562: LD_VAR 0 2
2566: PPUSH
2567: LD_EXP 1
2571: PPUSH
2572: CALL_OW 296
2576: PUSH
2577: LD_INT 15
2579: LESS
2580: AND
2581: IFFALSE 2601
// begin tmp = i ;
2583: LD_ADDR_VAR 0 4
2587: PUSH
2588: LD_VAR 0 2
2592: ST_TO_ADDR
// j = 1 ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// end ; end ;
2601: GO 2476
2603: POP
2604: POP
// until j = 1 ;
2605: LD_VAR 0 3
2609: PUSH
2610: LD_INT 1
2612: EQUAL
2613: IFFALSE 2384
// blockSpawn = 1 ;
2615: LD_ADDR_EXP 28
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// uc_side = 4 ;
2623: LD_ADDR_OWVAR 20
2627: PUSH
2628: LD_INT 4
2630: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2631: LD_ADDR_EXP 14
2635: PUSH
2636: LD_STRING Joan
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL 4625 0 2
2646: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2647: LD_EXP 14
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_VAR 0 4
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 5
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_INT 250
2689: PPUSH
2690: CALL_OW 234
// InGameOn ;
2694: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2698: LD_EXP 14
2702: PPUSH
2703: CALL_OW 87
// wait ( 0 0$2 ) ;
2707: LD_INT 70
2709: PPUSH
2710: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2714: LD_VAR 0 4
2718: PPUSH
2719: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2723: LD_VAR 0 4
2727: PPUSH
2728: CALL_OW 122
// wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2739: LD_VAR 0 4
2743: PPUSH
2744: LD_EXP 14
2748: PPUSH
2749: CALL_OW 112
// wait ( 0 0$2 ) ;
2753: LD_INT 70
2755: PPUSH
2756: CALL_OW 67
// DialogueOn ;
2760: CALL_OW 6
// if tmp = JMM then
2764: LD_VAR 0 4
2768: PUSH
2769: LD_EXP 1
2773: EQUAL
2774: IFFALSE 2909
// begin Say ( JMM , D5b-JMM-1 ) ;
2776: LD_EXP 1
2780: PPUSH
2781: LD_STRING D5b-JMM-1
2783: PPUSH
2784: CALL_OW 88
// DialogueOff ;
2788: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2792: LD_EXP 14
2796: PPUSH
2797: LD_INT 500
2799: PPUSH
2800: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2804: LD_EXP 14
2808: PPUSH
2809: LD_EXP 1
2813: PPUSH
2814: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2818: LD_EXP 1
2822: PPUSH
2823: LD_EXP 14
2827: PPUSH
2828: CALL_OW 119
// wait ( 0 0$1 ) ;
2832: LD_INT 35
2834: PPUSH
2835: CALL_OW 67
// DialogueOn ;
2839: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2843: LD_EXP 14
2847: PPUSH
2848: LD_STRING D5b-Joan-1
2850: PPUSH
2851: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2855: LD_EXP 1
2859: PPUSH
2860: LD_STRING D5b-JMM-2
2862: PPUSH
2863: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2867: LD_EXP 14
2871: PPUSH
2872: LD_STRING D5b-Joan-2
2874: PPUSH
2875: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2879: LD_EXP 1
2883: PPUSH
2884: LD_STRING D5b-JMM-3
2886: PPUSH
2887: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2891: LD_EXP 14
2895: PPUSH
2896: LD_STRING D5b-Joan-3
2898: PPUSH
2899: CALL_OW 88
// DialogueOff ;
2903: CALL_OW 7
// end else
2907: GO 3230
// begin Say ( tmp , D5a-Sol1-1 ) ;
2909: LD_VAR 0 4
2913: PPUSH
2914: LD_STRING D5a-Sol1-1
2916: PPUSH
2917: CALL_OW 88
// DialogueOff ;
2921: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2925: LD_EXP 14
2929: PPUSH
2930: LD_INT 500
2932: PPUSH
2933: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
2937: LD_EXP 14
2941: PPUSH
2942: LD_VAR 0 4
2946: PPUSH
2947: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
2951: LD_VAR 0 4
2955: PPUSH
2956: LD_EXP 14
2960: PPUSH
2961: CALL_OW 119
// wait ( 0 0$1 ) ;
2965: LD_INT 35
2967: PPUSH
2968: CALL_OW 67
// DialogueOn ;
2972: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
2976: LD_EXP 14
2980: PPUSH
2981: LD_STRING D5a-Joan-1
2983: PPUSH
2984: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
2988: LD_VAR 0 4
2992: PPUSH
2993: LD_STRING D5a-Sol1-2
2995: PPUSH
2996: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3000: LD_EXP 14
3004: PPUSH
3005: LD_STRING D5a-Joan-2
3007: PPUSH
3008: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: LD_STRING D5a-Sol1-3
3019: PPUSH
3020: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3024: LD_EXP 14
3028: PPUSH
3029: LD_STRING D5a-Joan-3
3031: PPUSH
3032: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3036: LD_VAR 0 4
3040: PPUSH
3041: LD_STRING D5a-Sol1-4
3043: PPUSH
3044: CALL_OW 88
// DialogueOff ;
3048: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3052: LD_EXP 1
3056: PPUSH
3057: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3061: LD_EXP 1
3065: PPUSH
3066: CALL_OW 122
// wait ( 0 0$1 ) ;
3070: LD_INT 35
3072: PPUSH
3073: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3077: LD_INT 35
3079: PPUSH
3080: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3084: LD_EXP 14
3088: PUSH
3089: LD_VAR 0 4
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PPUSH
3098: LD_EXP 1
3102: PPUSH
3103: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3107: LD_EXP 14
3111: PPUSH
3112: LD_EXP 1
3116: PPUSH
3117: CALL_OW 296
3121: PUSH
3122: LD_INT 5
3124: LESS
3125: IFFALSE 3077
// ComTurnUnit ( Joan , JMM ) ;
3127: LD_EXP 14
3131: PPUSH
3132: LD_EXP 1
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3141: LD_EXP 1
3145: PPUSH
3146: LD_EXP 14
3150: PPUSH
3151: CALL_OW 119
// wait ( 0 0$1 ) ;
3155: LD_INT 35
3157: PPUSH
3158: CALL_OW 67
// DialogueOn ;
3162: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3166: LD_EXP 14
3170: PPUSH
3171: LD_STRING D5a-Joan-4
3173: PPUSH
3174: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3178: LD_EXP 1
3182: PPUSH
3183: LD_STRING D5a-JMM-4
3185: PPUSH
3186: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3190: LD_EXP 14
3194: PPUSH
3195: LD_STRING D5a-Joan-5
3197: PPUSH
3198: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3202: LD_EXP 1
3206: PPUSH
3207: LD_STRING D5a-JMM-5
3209: PPUSH
3210: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3214: LD_EXP 14
3218: PPUSH
3219: LD_STRING D5a-Joan-6
3221: PPUSH
3222: CALL_OW 88
// DialogueOff ;
3226: CALL_OW 7
// end ; DialogueOn ;
3230: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3234: LD_EXP 1
3238: PPUSH
3239: LD_STRING D6-JMM-1
3241: PPUSH
3242: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3246: LD_EXP 14
3250: PPUSH
3251: LD_STRING D6-Joan-1
3253: PPUSH
3254: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3258: LD_EXP 1
3262: PPUSH
3263: LD_STRING D6-JMM-2
3265: PPUSH
3266: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3270: LD_EXP 14
3274: PPUSH
3275: LD_STRING D6-Joan-2
3277: PPUSH
3278: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3282: LD_EXP 1
3286: PPUSH
3287: LD_STRING D6-JMM-3
3289: PPUSH
3290: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3294: LD_EXP 14
3298: PPUSH
3299: LD_STRING D6-Joan-3
3301: PPUSH
3302: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_STRING D6-JMM-4
3313: PPUSH
3314: CALL_OW 88
// DialogueOff ;
3318: CALL_OW 7
// InGameOff ;
3322: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3326: LD_EXP 14
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3338: LD_STRING MJ
3340: PPUSH
3341: CALL_OW 337
// JoanStatus = 1 ;
3345: LD_ADDR_EXP 15
3349: PUSH
3350: LD_INT 1
3352: ST_TO_ADDR
// blockSpawn = 0 ;
3353: LD_ADDR_EXP 28
3357: PUSH
3358: LD_INT 0
3360: ST_TO_ADDR
// end ;
3361: LD_VAR 0 1
3365: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3366: LD_INT 0
3368: PPUSH
3369: PPUSH
// repeat wait ( 0 0$7 ) ;
3370: LD_INT 245
3372: PPUSH
3373: CALL_OW 67
// until blockSpawn = 0 ;
3377: LD_EXP 28
3381: PUSH
3382: LD_INT 0
3384: EQUAL
3385: IFFALSE 3370
// uc_side = 1 ;
3387: LD_ADDR_OWVAR 20
3391: PUSH
3392: LD_INT 1
3394: ST_TO_ADDR
// uc_nation = 1 ;
3395: LD_ADDR_OWVAR 21
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// if number = 1 then
3403: LD_VAR 0 1
3407: PUSH
3408: LD_INT 1
3410: EQUAL
3411: IFFALSE 3549
// begin hc_class := 1 ;
3413: LD_ADDR_OWVAR 28
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// hc_sex := sex_male ;
3421: LD_ADDR_OWVAR 27
3425: PUSH
3426: LD_INT 1
3428: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3429: LD_ADDR_OWVAR 33
3433: PUSH
3434: LD_STRING AmGalRemake
3436: ST_TO_ADDR
// hc_face_number := 7 ;
3437: LD_ADDR_OWVAR 34
3441: PUSH
3442: LD_INT 7
3444: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3445: LD_ADDR_OWVAR 26
3449: PUSH
3450: LD_STRING Bobby Jordan
3452: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3453: LD_ADDR_OWVAR 31
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 1
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: ST_TO_ADDR
// un = CreateHuman ;
3476: LD_ADDR_VAR 0 3
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3486: LD_VAR 0 3
3490: PPUSH
3491: LD_INT 12
3493: PPUSH
3494: LD_INT 1
3496: PPUSH
3497: CALL_OW 49
// wait ( 0 0$1 ) ;
3501: LD_INT 35
3503: PPUSH
3504: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3508: LD_VAR 0 3
3512: PPUSH
3513: CALL_OW 87
// DialogueOn ;
3517: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3521: LD_VAR 0 3
3525: PPUSH
3526: LD_STRING D11b-Sol3-1
3528: PPUSH
3529: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3533: LD_EXP 1
3537: PPUSH
3538: LD_STRING D11b-JMM-1
3540: PPUSH
3541: CALL_OW 88
// DialogueOff ;
3545: CALL_OW 7
// end ; if number = 2 then
3549: LD_VAR 0 1
3553: PUSH
3554: LD_INT 2
3556: EQUAL
3557: IFFALSE 3695
// begin hc_class := 3 ;
3559: LD_ADDR_OWVAR 28
3563: PUSH
3564: LD_INT 3
3566: ST_TO_ADDR
// hc_sex := sex_male ;
3567: LD_ADDR_OWVAR 27
3571: PUSH
3572: LD_INT 1
3574: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3575: LD_ADDR_OWVAR 33
3579: PUSH
3580: LD_STRING SecondCharsGal
3582: ST_TO_ADDR
// hc_face_number := 55 ;
3583: LD_ADDR_OWVAR 34
3587: PUSH
3588: LD_INT 55
3590: ST_TO_ADDR
// hc_name := George McCarthy ;
3591: LD_ADDR_OWVAR 26
3595: PUSH
3596: LD_STRING George McCarthy
3598: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3599: LD_ADDR_OWVAR 31
3603: PUSH
3604: LD_INT 1
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: ST_TO_ADDR
// un = CreateHuman ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: CALL_OW 44
3631: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3632: LD_VAR 0 3
3636: PPUSH
3637: LD_INT 12
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3647: LD_VAR 0 3
3651: PPUSH
3652: CALL_OW 87
// wait ( 0 0$1 ) ;
3656: LD_INT 35
3658: PPUSH
3659: CALL_OW 67
// DialogueOn ;
3663: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3667: LD_VAR 0 3
3671: PPUSH
3672: LD_STRING D11d-Sol4-1
3674: PPUSH
3675: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3679: LD_EXP 1
3683: PPUSH
3684: LD_STRING D11d-JMM-1
3686: PPUSH
3687: CALL_OW 88
// DialogueOff ;
3691: CALL_OW 7
// end ; if number = 4 then
3695: LD_VAR 0 1
3699: PUSH
3700: LD_INT 4
3702: EQUAL
3703: IFFALSE 3829
// begin hc_class := 3 ;
3705: LD_ADDR_OWVAR 28
3709: PUSH
3710: LD_INT 3
3712: ST_TO_ADDR
// hc_sex := sex_female ;
3713: LD_ADDR_OWVAR 27
3717: PUSH
3718: LD_INT 2
3720: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3721: LD_ADDR_OWVAR 33
3725: PUSH
3726: LD_STRING SecondCharsGal
3728: ST_TO_ADDR
// hc_face_number := 46 ;
3729: LD_ADDR_OWVAR 34
3733: PUSH
3734: LD_INT 46
3736: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3737: LD_ADDR_OWVAR 26
3741: PUSH
3742: LD_STRING Sylvia Creak
3744: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3745: LD_ADDR_OWVAR 31
3749: PUSH
3750: LD_INT 1
3752: PUSH
3753: LD_INT 3
3755: PUSH
3756: LD_INT 1
3758: PUSH
3759: LD_INT 1
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: ST_TO_ADDR
// un = CreateHuman ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: CALL_OW 44
3777: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3778: LD_VAR 0 3
3782: PPUSH
3783: LD_INT 12
3785: PPUSH
3786: LD_INT 1
3788: PPUSH
3789: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3793: LD_VAR 0 3
3797: PPUSH
3798: CALL_OW 87
// wait ( 0 0$1 ) ;
3802: LD_INT 35
3804: PPUSH
3805: CALL_OW 67
// DialogueOn ;
3809: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_STRING D11e-FSol4-1
3820: PPUSH
3821: CALL_OW 88
// DialogueOff ;
3825: CALL_OW 7
// end ; if number = 5 then
3829: LD_VAR 0 1
3833: PUSH
3834: LD_INT 5
3836: EQUAL
3837: IFFALSE 3975
// begin hc_class := 1 ;
3839: LD_ADDR_OWVAR 28
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// hc_sex := sex_female ;
3847: LD_ADDR_OWVAR 27
3851: PUSH
3852: LD_INT 2
3854: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3855: LD_ADDR_OWVAR 33
3859: PUSH
3860: LD_STRING SecondCharsGal
3862: ST_TO_ADDR
// hc_face_number := 37 ;
3863: LD_ADDR_OWVAR 34
3867: PUSH
3868: LD_INT 37
3870: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3871: LD_ADDR_OWVAR 26
3875: PUSH
3876: LD_STRING Margherite Simpson
3878: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3879: LD_ADDR_OWVAR 31
3883: PUSH
3884: LD_INT 1
3886: PUSH
3887: LD_INT 1
3889: PUSH
3890: LD_INT 1
3892: PUSH
3893: LD_INT 1
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: ST_TO_ADDR
// un = CreateHuman ;
3902: LD_ADDR_VAR 0 3
3906: PUSH
3907: CALL_OW 44
3911: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3912: LD_VAR 0 3
3916: PPUSH
3917: LD_INT 12
3919: PPUSH
3920: LD_INT 1
3922: PPUSH
3923: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 87
// wait ( 0 0$1 ) ;
3936: LD_INT 35
3938: PPUSH
3939: CALL_OW 67
// DialogueOn ;
3943: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_STRING D11c-FSol3-1
3954: PPUSH
3955: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3959: LD_EXP 1
3963: PPUSH
3964: LD_STRING D11c-JMM-1
3966: PPUSH
3967: CALL_OW 88
// DialogueOff ;
3971: CALL_OW 7
// end ; if number = 6 then
3975: LD_VAR 0 1
3979: PUSH
3980: LD_INT 6
3982: EQUAL
3983: IFFALSE 4109
// begin hc_class := 1 ;
3985: LD_ADDR_OWVAR 28
3989: PUSH
3990: LD_INT 1
3992: ST_TO_ADDR
// hc_sex := sex_male ;
3993: LD_ADDR_OWVAR 27
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4001: LD_ADDR_OWVAR 33
4005: PUSH
4006: LD_STRING AmGalRemake
4008: ST_TO_ADDR
// hc_face_number := 1 ;
4009: LD_ADDR_OWVAR 34
4013: PUSH
4014: LD_INT 1
4016: ST_TO_ADDR
// hc_name := Charles Brown ;
4017: LD_ADDR_OWVAR 26
4021: PUSH
4022: LD_STRING Charles Brown
4024: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
4025: LD_ADDR_OWVAR 31
4029: PUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 1
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: LD_INT 1
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: ST_TO_ADDR
// un = CreateHuman ;
4048: LD_ADDR_VAR 0 3
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4058: LD_VAR 0 3
4062: PPUSH
4063: LD_INT 12
4065: PPUSH
4066: LD_INT 1
4068: PPUSH
4069: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: CALL_OW 87
// wait ( 0 0$1 ) ;
4082: LD_INT 35
4084: PPUSH
4085: CALL_OW 67
// DialogueOn ;
4089: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4093: LD_VAR 0 3
4097: PPUSH
4098: LD_STRING D11f-Sol5-1
4100: PPUSH
4101: CALL_OW 88
// DialogueOff ;
4105: CALL_OW 7
// end ; if number = 7 then
4109: LD_VAR 0 1
4113: PUSH
4114: LD_INT 7
4116: EQUAL
4117: IFFALSE 4243
// begin hc_class := 1 ;
4119: LD_ADDR_OWVAR 28
4123: PUSH
4124: LD_INT 1
4126: ST_TO_ADDR
// hc_sex := sex_female ;
4127: LD_ADDR_OWVAR 27
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4135: LD_ADDR_OWVAR 33
4139: PUSH
4140: LD_STRING AmGalRemake
4142: ST_TO_ADDR
// hc_face_number := 2 ;
4143: LD_ADDR_OWVAR 34
4147: PUSH
4148: LD_INT 2
4150: ST_TO_ADDR
// hc_name := Johanna Holland ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING Johanna Holland
4158: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4159: LD_ADDR_OWVAR 31
4163: PUSH
4164: LD_INT 1
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: LD_INT 0
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: ST_TO_ADDR
// un = CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4192: LD_VAR 0 3
4196: PPUSH
4197: LD_INT 12
4199: PPUSH
4200: LD_INT 1
4202: PPUSH
4203: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: CALL_OW 87
// wait ( 0 0$1 ) ;
4216: LD_INT 35
4218: PPUSH
4219: CALL_OW 67
// DialogueOn ;
4223: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4227: LD_VAR 0 3
4231: PPUSH
4232: LD_STRING D11a-FSol2-1
4234: PPUSH
4235: CALL_OW 88
// DialogueOff ;
4239: CALL_OW 7
// end ; end ; end_of_file
4243: LD_VAR 0 2
4247: RET
// export function PrepareRussian ; var i ; begin
4248: LD_INT 0
4250: PPUSH
4251: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4252: LD_INT 3
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: LD_INT 2
4260: PPUSH
4261: LD_EXP 33
4265: PPUSH
4266: LD_EXP 34
4270: PPUSH
4271: CALL_OW 12
4275: PPUSH
4276: LD_INT 2
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: CALL 4895 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4286: LD_INT 3
4288: PPUSH
4289: LD_INT 3
4291: PPUSH
4292: LD_INT 8
4294: PPUSH
4295: LD_EXP 33
4299: PPUSH
4300: LD_EXP 34
4304: PPUSH
4305: CALL_OW 12
4309: PPUSH
4310: LD_INT 1
4312: PPUSH
4313: LD_INT 4
4315: PPUSH
4316: CALL 4895 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4320: LD_INT 3
4322: PPUSH
4323: LD_INT 3
4325: PPUSH
4326: LD_INT 67
4328: PPUSH
4329: LD_EXP 33
4333: PPUSH
4334: LD_EXP 34
4338: PPUSH
4339: CALL_OW 12
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 2
4349: PPUSH
4350: CALL 4895 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4354: LD_INT 3
4356: PPUSH
4357: LD_INT 3
4359: PPUSH
4360: LD_INT 21
4362: PPUSH
4363: LD_EXP 33
4367: PPUSH
4368: LD_EXP 34
4372: PPUSH
4373: CALL_OW 12
4377: PPUSH
4378: LD_INT 3
4380: PPUSH
4381: LD_INT 6
4383: PPUSH
4384: CALL 4895 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4388: LD_INT 3
4390: PPUSH
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 17
4396: PPUSH
4397: LD_EXP 33
4401: PPUSH
4402: LD_EXP 34
4406: PPUSH
4407: CALL_OW 12
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 6
4417: PPUSH
4418: CALL 4895 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4422: LD_INT 3
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 32
4430: PPUSH
4431: LD_EXP 33
4435: PPUSH
4436: LD_EXP 34
4440: PPUSH
4441: CALL_OW 12
4445: PPUSH
4446: LD_INT 4
4448: PPUSH
4449: LD_INT 2
4451: PPUSH
4452: CALL 4895 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4456: LD_ADDR_VAR 0 2
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 3
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 30
4483: PUSH
4484: LD_INT 32
4486: PUSH
4487: EMPTY
4488: LIST
4489: LIST
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: PUSH
4501: FOR_IN
4502: IFFALSE 4542
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4504: LD_INT 3
4506: PPUSH
4507: LD_INT 3
4509: PPUSH
4510: LD_VAR 0 2
4514: PPUSH
4515: LD_EXP 33
4519: PPUSH
4520: LD_EXP 34
4524: PPUSH
4525: CALL_OW 12
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL 4895 0 6
4540: GO 4501
4542: POP
4543: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4544: LD_ADDR_VAR 0 2
4548: PUSH
4549: LD_INT 22
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 21
4561: PUSH
4562: LD_INT 3
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: LD_INT 30
4571: PUSH
4572: LD_INT 31
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: PPUSH
4584: CALL_OW 69
4588: PUSH
4589: FOR_IN
4590: IFFALSE 4618
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4592: LD_EXP 33
4596: PPUSH
4597: LD_EXP 34
4601: PPUSH
4602: CALL_OW 12
4606: PPUSH
4607: LD_VAR 0 2
4611: PPUSH
4612: CALL 5005 0 2
4616: GO 4589
4618: POP
4619: POP
// end ; end_of_file
4620: LD_VAR 0 1
4624: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
// if exist_mode then
4629: LD_VAR 0 2
4633: IFFALSE 4658
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4635: LD_ADDR_VAR 0 4
4639: PUSH
4640: LD_EXP 41
4644: PUSH
4645: LD_VAR 0 1
4649: STR
4650: PPUSH
4651: CALL_OW 34
4655: ST_TO_ADDR
// end else
4656: GO 4673
// begin unit := NewCharacter ( ident ) ;
4658: LD_ADDR_VAR 0 4
4662: PUSH
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 25
4672: ST_TO_ADDR
// end ; result := unit ;
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: LD_VAR 0 4
4682: ST_TO_ADDR
// end ;
4683: LD_VAR 0 3
4687: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4688: LD_INT 0
4690: PPUSH
4691: PPUSH
4692: PPUSH
// rnd = rand ( 1 , characters ) ;
4693: LD_ADDR_VAR 0 6
4697: PUSH
4698: LD_INT 1
4700: PPUSH
4701: LD_VAR 0 1
4705: PPUSH
4706: CALL_OW 12
4710: ST_TO_ADDR
// for i = 1 to characters do
4711: LD_ADDR_VAR 0 5
4715: PUSH
4716: DOUBLE
4717: LD_INT 1
4719: DEC
4720: ST_TO_ADDR
4721: LD_VAR 0 1
4725: PUSH
4726: FOR_TO
4727: IFFALSE 4837
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4729: LD_VAR 0 5
4733: PUSH
4734: LD_VAR 0 6
4738: EQUAL
4739: PUSH
4740: LD_VAR 0 1
4744: PUSH
4745: LD_VAR 0 5
4749: ARRAY
4750: PPUSH
4751: CALL_OW 258
4755: PUSH
4756: LD_INT 1
4758: EQUAL
4759: AND
4760: IFFALSE 4782
// Say ( characters [ i ] , dialogMID ) ;
4762: LD_VAR 0 1
4766: PUSH
4767: LD_VAR 0 5
4771: ARRAY
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4782: LD_VAR 0 5
4786: PUSH
4787: LD_VAR 0 6
4791: EQUAL
4792: PUSH
4793: LD_VAR 0 1
4797: PUSH
4798: LD_VAR 0 5
4802: ARRAY
4803: PPUSH
4804: CALL_OW 258
4808: PUSH
4809: LD_INT 2
4811: EQUAL
4812: AND
4813: IFFALSE 4835
// Say ( characters [ i ] , dialogFID ) ;
4815: LD_VAR 0 1
4819: PUSH
4820: LD_VAR 0 5
4824: ARRAY
4825: PPUSH
4826: LD_VAR 0 3
4830: PPUSH
4831: CALL_OW 88
// end ;
4835: GO 4726
4837: POP
4838: POP
// end ;
4839: LD_VAR 0 4
4843: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4844: LD_INT 0
4846: PPUSH
4847: PPUSH
// for i in charactersList do
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: FOR_IN
4859: IFFALSE 4888
// begin if IsOk ( i ) then
4861: LD_VAR 0 4
4865: PPUSH
4866: CALL_OW 302
4870: IFFALSE 4886
// SaveCharacters ( i , ident ) ;
4872: LD_VAR 0 4
4876: PPUSH
4877: LD_VAR 0 2
4881: PPUSH
4882: CALL_OW 38
// end ;
4886: GO 4858
4888: POP
4889: POP
// end ;
4890: LD_VAR 0 3
4894: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
4899: PPUSH
4900: PPUSH
// for i = 1 to count do
4901: LD_ADDR_VAR 0 8
4905: PUSH
4906: DOUBLE
4907: LD_INT 1
4909: DEC
4910: ST_TO_ADDR
4911: LD_VAR 0 6
4915: PUSH
4916: FOR_TO
4917: IFFALSE 4998
// begin uc_side = side ;
4919: LD_ADDR_OWVAR 20
4923: PUSH
4924: LD_VAR 0 1
4928: ST_TO_ADDR
// uc_nation = nation ;
4929: LD_ADDR_OWVAR 21
4933: PUSH
4934: LD_VAR 0 2
4938: ST_TO_ADDR
// hc_gallery =  ;
4939: LD_ADDR_OWVAR 33
4943: PUSH
4944: LD_STRING 
4946: ST_TO_ADDR
// hc_name =  ;
4947: LD_ADDR_OWVAR 26
4951: PUSH
4952: LD_STRING 
4954: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_VAR 0 5
4962: PPUSH
4963: LD_VAR 0 4
4967: PPUSH
4968: CALL_OW 380
// un = CreateHuman ;
4972: LD_ADDR_VAR 0 10
4976: PUSH
4977: CALL_OW 44
4981: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4982: LD_VAR 0 10
4986: PPUSH
4987: LD_VAR 0 3
4991: PPUSH
4992: CALL_OW 52
// end ;
4996: GO 4916
4998: POP
4999: POP
// end ;
5000: LD_VAR 0 7
5004: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
5009: PPUSH
// uc_side := GetSide ( b ) ;
5010: LD_ADDR_OWVAR 20
5014: PUSH
5015: LD_VAR 0 2
5019: PPUSH
5020: CALL_OW 255
5024: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5025: LD_ADDR_OWVAR 21
5029: PUSH
5030: LD_VAR 0 2
5034: PPUSH
5035: CALL_OW 248
5039: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5040: LD_INT 0
5042: PPUSH
5043: LD_INT 1
5045: PPUSH
5046: LD_VAR 0 1
5050: PPUSH
5051: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5055: LD_ADDR_VAR 0 5
5059: PUSH
5060: LD_VAR 0 2
5064: PPUSH
5065: CALL_OW 254
5069: PUSH
5070: LD_INT 3
5072: MINUS
5073: ST_TO_ADDR
// if dir < 0 then
5074: LD_VAR 0 5
5078: PUSH
5079: LD_INT 0
5081: LESS
5082: IFFALSE 5098
// dir := 6 + dir ;
5084: LD_ADDR_VAR 0 5
5088: PUSH
5089: LD_INT 6
5091: PUSH
5092: LD_VAR 0 5
5096: PLUS
5097: ST_TO_ADDR
// un := CreateHuman ;
5098: LD_ADDR_VAR 0 4
5102: PUSH
5103: CALL_OW 44
5107: ST_TO_ADDR
// SetDir ( un , dir ) ;
5108: LD_VAR 0 4
5112: PPUSH
5113: LD_VAR 0 5
5117: PPUSH
5118: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5122: LD_VAR 0 4
5126: PPUSH
5127: LD_VAR 0 2
5131: PPUSH
5132: CALL_OW 52
// end ;
5136: LD_VAR 0 3
5140: RET
// export function PrepareDifficulty ; begin
5141: LD_INT 0
5143: PPUSH
// if Difficulty = 1 then
5144: LD_OWVAR 67
5148: PUSH
5149: LD_INT 1
5151: EQUAL
5152: IFFALSE 5170
// begin RuSolMinLevel = 2 ;
5154: LD_ADDR_EXP 33
5158: PUSH
5159: LD_INT 2
5161: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5162: LD_ADDR_EXP 34
5166: PUSH
5167: LD_INT 5
5169: ST_TO_ADDR
// end ; if Difficulty = 2 then
5170: LD_OWVAR 67
5174: PUSH
5175: LD_INT 2
5177: EQUAL
5178: IFFALSE 5196
// begin RuSolMinLevel = 3 ;
5180: LD_ADDR_EXP 33
5184: PUSH
5185: LD_INT 3
5187: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5188: LD_ADDR_EXP 34
5192: PUSH
5193: LD_INT 5
5195: ST_TO_ADDR
// end ; if Difficulty = 3 then
5196: LD_OWVAR 67
5200: PUSH
5201: LD_INT 3
5203: EQUAL
5204: IFFALSE 5222
// begin RuSolMinLevel = 4 ;
5206: LD_ADDR_EXP 33
5210: PUSH
5211: LD_INT 4
5213: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5214: LD_ADDR_EXP 34
5218: PUSH
5219: LD_INT 5
5221: ST_TO_ADDR
// end ; end ;
5222: LD_VAR 0 1
5226: RET
// export function ShowQuery1 ; begin
5227: LD_INT 0
5229: PPUSH
// case query ( QKill ) of 1 :
5230: LD_STRING QKill
5232: PPUSH
5233: CALL_OW 97
5237: PUSH
5238: LD_INT 1
5240: DOUBLE
5241: EQUAL
5242: IFTRUE 5246
5244: GO 5257
5246: POP
// begin result = 1 ;
5247: LD_ADDR_VAR 0 1
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// end ; 2 :
5255: GO 5296
5257: LD_INT 2
5259: DOUBLE
5260: EQUAL
5261: IFTRUE 5265
5263: GO 5276
5265: POP
// begin result = 2 ;
5266: LD_ADDR_VAR 0 1
5270: PUSH
5271: LD_INT 2
5273: ST_TO_ADDR
// end ; 3 :
5274: GO 5296
5276: LD_INT 3
5278: DOUBLE
5279: EQUAL
5280: IFTRUE 5284
5282: GO 5295
5284: POP
// begin result = 3 ;
5285: LD_ADDR_VAR 0 1
5289: PUSH
5290: LD_INT 3
5292: ST_TO_ADDR
// end ; end ;
5293: GO 5296
5295: POP
// end ;
5296: LD_VAR 0 1
5300: RET
// export function ShowQuery2 ; begin
5301: LD_INT 0
5303: PPUSH
// case query ( QKill2 ) of 1 :
5304: LD_STRING QKill2
5306: PPUSH
5307: CALL_OW 97
5311: PUSH
5312: LD_INT 1
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5331
5320: POP
// begin result = 1 ;
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ST_TO_ADDR
// end ; 2 :
5329: GO 5351
5331: LD_INT 2
5333: DOUBLE
5334: EQUAL
5335: IFTRUE 5339
5337: GO 5350
5339: POP
// begin result = 2 ;
5340: LD_ADDR_VAR 0 1
5344: PUSH
5345: LD_INT 2
5347: ST_TO_ADDR
// end ; end ;
5348: GO 5351
5350: POP
// end ;
5351: LD_VAR 0 1
5355: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5356: LD_INT 0
5358: PPUSH
5359: PPUSH
5360: PPUSH
5361: PPUSH
// for i = 1 to 72 do
5362: LD_ADDR_VAR 0 5
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_INT 72
5374: PUSH
5375: FOR_TO
5376: IFFALSE 5434
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5378: LD_VAR 0 5
5382: PPUSH
5383: LD_VAR 0 1
5387: PPUSH
5388: CALL_OW 321
5392: PUSH
5393: LD_INT 1
5395: EQUAL
5396: PUSH
5397: LD_VAR 0 5
5401: PPUSH
5402: LD_VAR 0 3
5406: PPUSH
5407: CALL_OW 482
5411: PUSH
5412: LD_INT 1
5414: EQUAL
5415: AND
5416: IFFALSE 5432
// AddComResearch ( lab , i ) ;
5418: LD_VAR 0 2
5422: PPUSH
5423: LD_VAR 0 5
5427: PPUSH
5428: CALL_OW 184
5432: GO 5375
5434: POP
5435: POP
// end ;
5436: LD_VAR 0 4
5440: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5441: LD_INT 0
5443: PPUSH
5444: PPUSH
5445: PPUSH
5446: PPUSH
5447: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5448: LD_ADDR_VAR 0 6
5452: PUSH
5453: LD_INT 22
5455: PUSH
5456: LD_VAR 0 1
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 2
5467: PUSH
5468: LD_INT 25
5470: PUSH
5471: LD_INT 2
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PUSH
5478: LD_INT 25
5480: PUSH
5481: LD_INT 16
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 24
5495: PUSH
5496: LD_INT 1000
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 69
5512: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5513: LD_ADDR_VAR 0 4
5517: PUSH
5518: LD_INT 22
5520: PUSH
5521: LD_VAR 0 1
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 21
5532: PUSH
5533: LD_INT 3
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: LD_INT 24
5545: PUSH
5546: LD_INT 1000
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: PUSH
5562: EMPTY
5563: LIST
5564: PPUSH
5565: CALL_OW 69
5569: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5570: LD_VAR 0 4
5574: PUSH
5575: LD_INT 0
5577: GREATER
5578: PUSH
5579: LD_VAR 0 6
5583: PUSH
5584: LD_INT 0
5586: GREATER
5587: AND
5588: IFFALSE 5654
// begin for i in engineerOk_list do
5590: LD_ADDR_VAR 0 5
5594: PUSH
5595: LD_VAR 0 6
5599: PUSH
5600: FOR_IN
5601: IFFALSE 5652
// begin for j in buildings_list do
5603: LD_ADDR_VAR 0 7
5607: PUSH
5608: LD_VAR 0 4
5612: PUSH
5613: FOR_IN
5614: IFFALSE 5648
// begin AddComExitBuilding ( i ) ;
5616: LD_VAR 0 5
5620: PPUSH
5621: CALL_OW 182
// wait ( 0 0$1 ) ;
5625: LD_INT 35
5627: PPUSH
5628: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5632: LD_VAR 0 5
5636: PPUSH
5637: LD_VAR 0 7
5641: PPUSH
5642: CALL_OW 190
// end ;
5646: GO 5613
5648: POP
5649: POP
// end ;
5650: GO 5600
5652: POP
5653: POP
// end ; if buildings_list = 0 then
5654: LD_VAR 0 4
5658: PUSH
5659: LD_INT 0
5661: EQUAL
5662: IFFALSE 5695
// begin for i in engineerOK_list do
5664: LD_ADDR_VAR 0 5
5668: PUSH
5669: LD_VAR 0 6
5673: PUSH
5674: FOR_IN
5675: IFFALSE 5693
// begin ComEnterUnit ( i , building ) ;
5677: LD_VAR 0 5
5681: PPUSH
5682: LD_VAR 0 2
5686: PPUSH
5687: CALL_OW 120
// end ;
5691: GO 5674
5693: POP
5694: POP
// end ; end ;
5695: LD_VAR 0 3
5699: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5700: LD_INT 0
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
5706: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5707: LD_ADDR_VAR 0 6
5711: PUSH
5712: LD_INT 22
5714: PUSH
5715: LD_VAR 0 1
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 25
5726: PUSH
5727: LD_INT 4
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 69
5742: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5743: LD_ADDR_VAR 0 9
5747: PUSH
5748: LD_VAR 0 3
5752: PPUSH
5753: LD_INT 22
5755: PUSH
5756: LD_VAR 0 1
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 21
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 3
5777: PUSH
5778: LD_INT 24
5780: PUSH
5781: LD_INT 750
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5802: LD_VAR 0 9
5806: PUSH
5807: LD_INT 0
5809: GREATER
5810: PUSH
5811: LD_VAR 0 6
5815: PUSH
5816: LD_INT 0
5818: GREATER
5819: AND
5820: IFFALSE 5947
// begin for i = 1 to damageUnits do
5822: LD_ADDR_VAR 0 7
5826: PUSH
5827: DOUBLE
5828: LD_INT 1
5830: DEC
5831: ST_TO_ADDR
5832: LD_VAR 0 9
5836: PUSH
5837: FOR_TO
5838: IFFALSE 5862
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5840: LD_VAR 0 9
5844: PUSH
5845: LD_VAR 0 7
5849: ARRAY
5850: PPUSH
5851: LD_VAR 0 2
5855: PPUSH
5856: CALL_OW 113
5860: GO 5837
5862: POP
5863: POP
// for i in sci_list do
5864: LD_ADDR_VAR 0 7
5868: PUSH
5869: LD_VAR 0 6
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5943
// begin ComExitBuilding ( i ) ;
5877: LD_VAR 0 7
5881: PPUSH
5882: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5886: LD_ADDR_VAR 0 8
5890: PUSH
5891: LD_VAR 0 2
5895: PPUSH
5896: LD_INT 22
5898: PUSH
5899: LD_VAR 0 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 70
5912: PUSH
5913: FOR_IN
5914: IFFALSE 5939
// begin AddComHeal ( i , j ) ;
5916: LD_VAR 0 7
5920: PPUSH
5921: LD_VAR 0 8
5925: PPUSH
5926: CALL_OW 188
// wait ( 1 1$0 ) ;
5930: LD_INT 2100
5932: PPUSH
5933: CALL_OW 67
// end ;
5937: GO 5913
5939: POP
5940: POP
// end ;
5941: GO 5874
5943: POP
5944: POP
// end else
5945: GO 5961
// begin AddComEnterUnit ( sci_list , build ) ;
5947: LD_VAR 0 6
5951: PPUSH
5952: LD_VAR 0 4
5956: PPUSH
5957: CALL_OW 180
// end ; end ;
5961: LD_VAR 0 5
5965: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5970: LD_INT 22
5972: PUSH
5973: LD_VAR 0 1
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 21
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: PUSH
6001: LD_VAR 0 3
6005: LESSEQUAL
6006: IFFALSE 6073
// for i = 1 to vehCount do
6008: LD_ADDR_VAR 0 9
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_VAR 0 3
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6071
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6026: LD_VAR 0 2
6030: PPUSH
6031: LD_VAR 0 7
6035: PPUSH
6036: LD_VAR 0 5
6040: PPUSH
6041: LD_VAR 0 6
6045: PPUSH
6046: LD_VAR 0 4
6050: PUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_VAR 0 4
6058: PPUSH
6059: CALL_OW 12
6063: ARRAY
6064: PPUSH
6065: CALL_OW 185
6069: GO 6023
6071: POP
6072: POP
// end ;
6073: LD_VAR 0 8
6077: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6078: LD_INT 0
6080: PPUSH
6081: PPUSH
6082: PPUSH
6083: PPUSH
6084: PPUSH
// for i := 1 to russianTanks do
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: DOUBLE
6091: LD_INT 1
6093: DEC
6094: ST_TO_ADDR
6095: LD_EXP 35
6099: PUSH
6100: FOR_TO
6101: IFFALSE 6446
// begin if i = [ 5 , 6 , 5 ] [ Difficulty ] then
6103: LD_VAR 0 4
6107: PUSH
6108: LD_INT 5
6110: PUSH
6111: LD_INT 6
6113: PUSH
6114: LD_INT 5
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: EQUAL
6128: IFFALSE 6444
// begin repeat wait ( 0 0$1 ) ;
6130: LD_INT 35
6132: PPUSH
6133: CALL_OW 67
// for i in russianTanks do
6137: LD_ADDR_VAR 0 4
6141: PUSH
6142: LD_EXP 35
6146: PUSH
6147: FOR_IN
6148: IFFALSE 6432
// begin if GetLives ( i ) < 659 then
6150: LD_VAR 0 4
6154: PPUSH
6155: CALL_OW 256
6159: PUSH
6160: LD_INT 659
6162: LESS
6163: IFFALSE 6251
// begin tmp = i ;
6165: LD_ADDR_VAR 0 5
6169: PUSH
6170: LD_VAR 0 4
6174: ST_TO_ADDR
// for i := 1 to russianTanks do
6175: LD_ADDR_VAR 0 4
6179: PUSH
6180: DOUBLE
6181: LD_INT 1
6183: DEC
6184: ST_TO_ADDR
6185: LD_EXP 35
6189: PUSH
6190: FOR_TO
6191: IFFALSE 6249
// begin if tmp = russianTanks [ i ] then
6193: LD_VAR 0 5
6197: PUSH
6198: LD_EXP 35
6202: PUSH
6203: LD_VAR 0 4
6207: ARRAY
6208: EQUAL
6209: IFFALSE 6247
// begin russianTanks = Delete ( russianTanks , i ) ;
6211: LD_ADDR_EXP 35
6215: PUSH
6216: LD_EXP 35
6220: PPUSH
6221: LD_VAR 0 4
6225: PPUSH
6226: CALL_OW 3
6230: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6231: LD_ADDR_EXP 36
6235: PUSH
6236: LD_EXP 36
6240: PUSH
6241: LD_VAR 0 5
6245: ADD
6246: ST_TO_ADDR
// end ; end ;
6247: GO 6190
6249: POP
6250: POP
// end ; wait ( 0 0$1 ) ;
6251: LD_INT 35
6253: PPUSH
6254: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6258: LD_ADDR_VAR 0 6
6262: PUSH
6263: LD_INT 22
6265: PUSH
6266: LD_VAR 0 2
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: PPUSH
6280: LD_VAR 0 4
6284: PPUSH
6285: CALL_OW 74
6289: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6290: LD_ADDR_VAR 0 7
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_VAR 0 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: LD_INT 59
6312: PUSH
6313: EMPTY
6314: LIST
6315: PUSH
6316: LD_INT 21
6318: PUSH
6319: LD_INT 1
6321: PUSH
6322: EMPTY
6323: LIST
6324: LIST
6325: PUSH
6326: LD_INT 21
6328: PUSH
6329: LD_INT 2
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: EMPTY
6347: LIST
6348: PPUSH
6349: CALL_OW 69
6353: PPUSH
6354: LD_VAR 0 4
6358: PPUSH
6359: CALL_OW 74
6363: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6364: LD_VAR 0 4
6368: PPUSH
6369: LD_VAR 0 6
6373: PPUSH
6374: CALL_OW 296
6378: PUSH
6379: LD_INT 8
6381: PLUS
6382: PUSH
6383: LD_VAR 0 4
6387: PPUSH
6388: LD_VAR 0 7
6392: PPUSH
6393: CALL_OW 296
6397: LESS
6398: IFFALSE 6416
// begin ComAttackUnit ( i , target1 ) ;
6400: LD_VAR 0 4
6404: PPUSH
6405: LD_VAR 0 6
6409: PPUSH
6410: CALL_OW 115
// end else
6414: GO 6430
// begin ComAttackUnit ( i , target2 ) ;
6416: LD_VAR 0 4
6420: PPUSH
6421: LD_VAR 0 7
6425: PPUSH
6426: CALL_OW 115
// end ; end ;
6430: GO 6147
6432: POP
6433: POP
// until russianTanks = 0 ;
6434: LD_EXP 35
6438: PUSH
6439: LD_INT 0
6441: EQUAL
6442: IFFALSE 6130
// end ; end ;
6444: GO 6100
6446: POP
6447: POP
// end ;
6448: LD_VAR 0 3
6452: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
6453: LD_INT 0
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
6461: PPUSH
6462: PPUSH
6463: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] ] ) ;
6464: LD_ADDR_VAR 0 8
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_VAR 0 1
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 21
6483: PUSH
6484: LD_INT 2
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 24
6493: PUSH
6494: LD_INT 660
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 58
6506: PUSH
6507: EMPTY
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 69
6524: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6525: LD_ADDR_VAR 0 9
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_VAR 0 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 21
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 3
6554: PUSH
6555: LD_INT 24
6557: PUSH
6558: LD_INT 660
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6579: LD_ADDR_VAR 0 10
6583: PUSH
6584: LD_VAR 0 2
6588: PPUSH
6589: LD_INT 22
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 21
6603: PUSH
6604: LD_INT 2
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 24
6616: PUSH
6617: LD_INT 1000
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: PPUSH
6633: CALL_OW 70
6637: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
6638: LD_ADDR_VAR 0 11
6642: PUSH
6643: LD_VAR 0 2
6647: PPUSH
6648: LD_INT 22
6650: PUSH
6651: LD_VAR 0 1
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 21
6662: PUSH
6663: LD_INT 2
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 24
6672: PUSH
6673: LD_INT 1000
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 58
6682: PUSH
6683: EMPTY
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PPUSH
6692: CALL_OW 70
6696: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6697: LD_ADDR_VAR 0 12
6701: PUSH
6702: EMPTY
6703: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6704: LD_ADDR_VAR 0 13
6708: PUSH
6709: LD_VAR 0 2
6713: PPUSH
6714: LD_INT 22
6716: PUSH
6717: LD_VAR 0 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 25
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 70
6744: ST_TO_ADDR
// if damageVehicle_list > 0 then
6745: LD_VAR 0 9
6749: PUSH
6750: LD_INT 0
6752: GREATER
6753: IFFALSE 6791
// for i in damageVehicle_list do
6755: LD_ADDR_VAR 0 6
6759: PUSH
6760: LD_VAR 0 9
6764: PUSH
6765: FOR_IN
6766: IFFALSE 6789
// ComMoveXY ( i , repX , repY ) ;
6768: LD_VAR 0 6
6772: PPUSH
6773: LD_VAR 0 3
6777: PPUSH
6778: LD_VAR 0 4
6782: PPUSH
6783: CALL_OW 111
6787: GO 6765
6789: POP
6790: POP
// if vehicleNeedRepair_list > 0 then
6791: LD_VAR 0 10
6795: PUSH
6796: LD_INT 0
6798: GREATER
6799: IFFALSE 6886
// begin for i in vehicleNeedRepair_list do
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 10
6810: PUSH
6811: FOR_IN
6812: IFFALSE 6884
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6814: LD_ADDR_VAR 0 12
6818: PUSH
6819: LD_VAR 0 12
6823: PUSH
6824: LD_VAR 0 6
6828: PPUSH
6829: CALL_OW 313
6833: ADD
6834: ST_TO_ADDR
// for j in mechanicInside_list do
6835: LD_ADDR_VAR 0 7
6839: PUSH
6840: LD_VAR 0 12
6844: PUSH
6845: FOR_IN
6846: IFFALSE 6880
// begin ComExitVehicle ( j ) ;
6848: LD_VAR 0 7
6852: PPUSH
6853: CALL_OW 121
// wait ( 0 0$1 ) ;
6857: LD_INT 35
6859: PPUSH
6860: CALL_OW 67
// ComRepairVehicle ( j , i ) ;
6864: LD_VAR 0 7
6868: PPUSH
6869: LD_VAR 0 6
6873: PPUSH
6874: CALL_OW 129
// end ;
6878: GO 6845
6880: POP
6881: POP
// end ;
6882: GO 6811
6884: POP
6885: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6886: LD_VAR 0 11
6890: PUSH
6891: LD_INT 0
6893: GREATER
6894: IFFALSE 6918
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6896: LD_VAR 0 13
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: LD_VAR 0 11
6909: PUSH
6910: LD_INT 1
6912: ARRAY
6913: PPUSH
6914: CALL_OW 120
// end ; if vehicleOK_list > 0 and russianDamageTanks > 0 then
6918: LD_VAR 0 8
6922: PUSH
6923: LD_INT 0
6925: GREATER
6926: PUSH
6927: LD_EXP 36
6931: PUSH
6932: LD_INT 0
6934: GREATER
6935: AND
6936: IFFALSE 7038
// begin for i := 1 to vehicleOK_list do
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: DOUBLE
6944: LD_INT 1
6946: DEC
6947: ST_TO_ADDR
6948: LD_VAR 0 8
6952: PUSH
6953: FOR_TO
6954: IFFALSE 7036
// begin if i = [ 5 , 6 , 5 ] [ Difficulty ] then
6956: LD_VAR 0 6
6960: PUSH
6961: LD_INT 5
6963: PUSH
6964: LD_INT 6
6966: PUSH
6967: LD_INT 5
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: PUSH
6975: LD_OWVAR 67
6979: ARRAY
6980: EQUAL
6981: IFFALSE 7034
// begin for i in vehicleOk_list do
6983: LD_ADDR_VAR 0 6
6987: PUSH
6988: LD_VAR 0 8
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7014
// russianTanks = russianTanks ^ i ;
6996: LD_ADDR_EXP 35
7000: PUSH
7001: LD_EXP 35
7005: PUSH
7006: LD_VAR 0 6
7010: ADD
7011: ST_TO_ADDR
7012: GO 6993
7014: POP
7015: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7016: LD_ADDR_EXP 36
7020: PUSH
7021: LD_EXP 36
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: CALL_OW 3
7033: ST_TO_ADDR
// end ; end ;
7034: GO 6953
7036: POP
7037: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7038: LD_ADDR_VAR 0 6
7042: PUSH
7043: LD_VAR 0 2
7047: PPUSH
7048: LD_INT 22
7050: PUSH
7051: LD_VAR 0 1
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 25
7062: PUSH
7063: LD_INT 3
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PPUSH
7074: CALL_OW 70
7078: NOT
7079: PUSH
7080: FOR_IN
7081: IFFALSE 7104
// ComMoveXY ( i , repX , repY ) ;
7083: LD_VAR 0 6
7087: PPUSH
7088: LD_VAR 0 3
7092: PPUSH
7093: LD_VAR 0 4
7097: PPUSH
7098: CALL_OW 111
7102: GO 7080
7104: POP
7105: POP
// end ;
7106: LD_VAR 0 5
7110: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7111: LD_INT 0
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
// enable ;
7117: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7118: LD_ADDR_VAR 0 7
7122: PUSH
7123: LD_VAR 0 3
7127: PPUSH
7128: CALL_OW 435
7132: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7133: LD_ADDR_VAR 0 6
7137: PUSH
7138: LD_INT 22
7140: PUSH
7141: LD_VAR 0 1
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 34
7152: PUSH
7153: LD_VAR 0 2
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PPUSH
7166: CALL_OW 69
7170: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7171: LD_VAR 0 6
7175: PUSH
7176: LD_INT 0
7178: GREATER
7179: PUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: CALL_OW 435
7189: AND
7190: PUSH
7191: LD_VAR 0 7
7195: PUSH
7196: LD_INT 0
7198: GREATER
7199: AND
7200: IFFALSE 7249
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7202: LD_VAR 0 6
7206: PUSH
7207: LD_INT 1
7209: ARRAY
7210: PPUSH
7211: LD_VAR 0 7
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: PPUSH
7220: LD_VAR 0 7
7224: PUSH
7225: LD_INT 2
7227: ARRAY
7228: PPUSH
7229: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7233: LD_VAR 0 6
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PPUSH
7242: LD_INT 100
7244: PPUSH
7245: CALL_OW 240
// end ; end ;
7249: LD_VAR 0 4
7253: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7254: LD_INT 0
7256: PPUSH
7257: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7258: LD_INT 22
7260: PUSH
7261: LD_VAR 0 1
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 25
7272: PUSH
7273: LD_INT 2
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PPUSH
7284: CALL_OW 69
7288: PUSH
7289: LD_INT 0
7291: GREATER
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_VAR 0 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 21
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: LD_INT 24
7320: PUSH
7321: LD_INT 1000
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: PPUSH
7337: CALL_OW 69
7341: PUSH
7342: LD_INT 0
7344: EQUAL
7345: AND
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_INT 0
7354: GREATER
7355: AND
7356: IFFALSE 7455
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7358: LD_ADDR_VAR 0 4
7362: PUSH
7363: LD_INT 22
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 2
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: PUSH
7394: FOR_IN
7395: IFFALSE 7453
// begin AddComExitBuilding ( i ) ;
7397: LD_VAR 0 4
7401: PPUSH
7402: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7406: LD_VAR 0 4
7410: PPUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 2
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_INT 3
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 4
7445: ARRAY
7446: PPUSH
7447: CALL_OW 205
// end ;
7451: GO 7394
7453: POP
7454: POP
// end ; end ;
7455: LD_VAR 0 3
7459: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7460: LD_INT 0
7462: PPUSH
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7469: LD_ADDR_VAR 0 7
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_VAR 0 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 25
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 56
7498: PUSH
7499: EMPTY
7500: LIST
7501: PUSH
7502: LD_INT 24
7504: PUSH
7505: LD_INT 700
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 69
7522: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7523: LD_ADDR_VAR 0 8
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_VAR 0 1
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: LD_INT 30
7542: PUSH
7543: LD_INT 32
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 58
7552: PUSH
7553: EMPTY
7554: LIST
7555: PUSH
7556: LD_INT 24
7558: PUSH
7559: LD_INT 251
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 69
7576: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7577: LD_ADDR_VAR 0 10
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_VAR 0 1
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 25
7599: PUSH
7600: LD_INT 5
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: LD_INT 25
7609: PUSH
7610: LD_INT 8
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 25
7619: PUSH
7620: LD_INT 9
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7642: LD_ADDR_VAR 0 9
7646: PUSH
7647: LD_VAR 0 2
7651: PPUSH
7652: CALL_OW 313
7656: PUSH
7657: LD_VAR 0 10
7661: DIFF
7662: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7663: LD_VAR 0 8
7667: PUSH
7668: LD_INT 0
7670: EQUAL
7671: PUSH
7672: LD_VAR 0 9
7676: PUSH
7677: LD_INT 0
7679: EQUAL
7680: AND
7681: IFFALSE 7727
// begin for i in soldiers_list do
7683: LD_ADDR_VAR 0 5
7687: PUSH
7688: LD_VAR 0 7
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7723
// begin if IsOK ( build ) then
7696: LD_VAR 0 2
7700: PPUSH
7701: CALL_OW 302
7705: IFFALSE 7721
// ComEnterUnit ( i , build ) ;
7707: LD_VAR 0 5
7711: PPUSH
7712: LD_VAR 0 2
7716: PPUSH
7717: CALL_OW 120
// end ;
7721: GO 7693
7723: POP
7724: POP
// end else
7725: GO 7812
// begin for i = 1 to turretList do
7727: LD_ADDR_VAR 0 5
7731: PUSH
7732: DOUBLE
7733: LD_INT 1
7735: DEC
7736: ST_TO_ADDR
7737: LD_VAR 0 8
7741: PUSH
7742: FOR_TO
7743: IFFALSE 7810
// begin for j = 1 to temp do
7745: LD_ADDR_VAR 0 6
7749: PUSH
7750: DOUBLE
7751: LD_INT 1
7753: DEC
7754: ST_TO_ADDR
7755: LD_VAR 0 9
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7806
// begin ComExitBuilding ( temp [ j ] ) ;
7763: LD_VAR 0 9
7767: PUSH
7768: LD_VAR 0 6
7772: ARRAY
7773: PPUSH
7774: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7778: LD_VAR 0 9
7782: PUSH
7783: LD_VAR 0 6
7787: ARRAY
7788: PPUSH
7789: LD_VAR 0 8
7793: PUSH
7794: LD_VAR 0 5
7798: ARRAY
7799: PPUSH
7800: CALL_OW 180
// end ;
7804: GO 7760
7806: POP
7807: POP
// end ;
7808: GO 7742
7810: POP
7811: POP
// end ; end ;
7812: LD_VAR 0 4
7816: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7824: LD_ADDR_VAR 0 6
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: LD_INT 30
7846: PUSH
7847: LD_INT 31
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 30
7856: PUSH
7857: LD_INT 32
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 30
7866: PUSH
7867: LD_INT 33
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 30
7876: PUSH
7877: LD_INT 4
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 30
7886: PUSH
7887: LD_INT 5
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7911: LD_ADDR_VAR 0 7
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 2
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 21
7930: PUSH
7931: LD_INT 3
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 58
7940: PUSH
7941: EMPTY
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7954: LD_VAR 0 6
7958: PUSH
7959: LD_INT 0
7961: GREATER
7962: PUSH
7963: LD_VAR 0 7
7967: PUSH
7968: LD_INT 0
7970: GREATER
7971: AND
7972: IFFALSE 8042
// begin for i in turretsList do
7974: LD_ADDR_VAR 0 4
7978: PUSH
7979: LD_VAR 0 6
7983: PUSH
7984: FOR_IN
7985: IFFALSE 8040
// begin for j in enemyBuildings do
7987: LD_ADDR_VAR 0 5
7991: PUSH
7992: LD_VAR 0 7
7996: PUSH
7997: FOR_IN
7998: IFFALSE 8036
// begin if GetDistUnits ( i , j ) < 20 then
8000: LD_VAR 0 4
8004: PPUSH
8005: LD_VAR 0 5
8009: PPUSH
8010: CALL_OW 296
8014: PUSH
8015: LD_INT 20
8017: LESS
8018: IFFALSE 8034
// begin ComAttackUnit ( i , j ) ;
8020: LD_VAR 0 4
8024: PPUSH
8025: LD_VAR 0 5
8029: PPUSH
8030: CALL_OW 115
// end ; end ;
8034: GO 7997
8036: POP
8037: POP
// end ;
8038: GO 7984
8040: POP
8041: POP
// end ; end ;
8042: LD_VAR 0 3
8046: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8047: LD_INT 0
8049: PPUSH
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
8055: PPUSH
8056: PPUSH
8057: PPUSH
8058: PPUSH
8059: PPUSH
// for i = 1 to medicCount do
8060: LD_ADDR_VAR 0 14
8064: PUSH
8065: DOUBLE
8066: LD_INT 1
8068: DEC
8069: ST_TO_ADDR
8070: LD_VAR 0 7
8074: PUSH
8075: FOR_TO
8076: IFFALSE 8158
// begin uc_side = side ;
8078: LD_ADDR_OWVAR 20
8082: PUSH
8083: LD_VAR 0 1
8087: ST_TO_ADDR
// uc_nation = nation ;
8088: LD_ADDR_OWVAR 21
8092: PUSH
8093: LD_VAR 0 2
8097: ST_TO_ADDR
// hc_name =  ;
8098: LD_ADDR_OWVAR 26
8102: PUSH
8103: LD_STRING 
8105: ST_TO_ADDR
// hc_gallery =  ;
8106: LD_ADDR_OWVAR 33
8110: PUSH
8111: LD_STRING 
8113: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8114: LD_INT 0
8116: PPUSH
8117: LD_INT 4
8119: PPUSH
8120: LD_VAR 0 8
8124: PPUSH
8125: CALL_OW 380
// un = CreateHuman ;
8129: LD_ADDR_VAR 0 16
8133: PUSH
8134: CALL_OW 44
8138: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8139: LD_VAR 0 16
8143: PPUSH
8144: LD_VAR 0 9
8148: PPUSH
8149: LD_INT 0
8151: PPUSH
8152: CALL_OW 49
// end ;
8156: GO 8075
8158: POP
8159: POP
// for i = 1 to soldierCount do
8160: LD_ADDR_VAR 0 14
8164: PUSH
8165: DOUBLE
8166: LD_INT 1
8168: DEC
8169: ST_TO_ADDR
8170: LD_VAR 0 3
8174: PUSH
8175: FOR_TO
8176: IFFALSE 8258
// begin uc_side = side ;
8178: LD_ADDR_OWVAR 20
8182: PUSH
8183: LD_VAR 0 1
8187: ST_TO_ADDR
// uc_nation = nation ;
8188: LD_ADDR_OWVAR 21
8192: PUSH
8193: LD_VAR 0 2
8197: ST_TO_ADDR
// hc_name =  ;
8198: LD_ADDR_OWVAR 26
8202: PUSH
8203: LD_STRING 
8205: ST_TO_ADDR
// hc_gallery =  ;
8206: LD_ADDR_OWVAR 33
8210: PUSH
8211: LD_STRING 
8213: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8214: LD_INT 0
8216: PPUSH
8217: LD_INT 1
8219: PPUSH
8220: LD_VAR 0 8
8224: PPUSH
8225: CALL_OW 380
// un = CreateHuman ;
8229: LD_ADDR_VAR 0 16
8233: PUSH
8234: CALL_OW 44
8238: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8239: LD_VAR 0 16
8243: PPUSH
8244: LD_VAR 0 9
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: CALL_OW 49
// end ;
8256: GO 8175
8258: POP
8259: POP
// for i = 1 to sniperCount do
8260: LD_ADDR_VAR 0 14
8264: PUSH
8265: DOUBLE
8266: LD_INT 1
8268: DEC
8269: ST_TO_ADDR
8270: LD_VAR 0 4
8274: PUSH
8275: FOR_TO
8276: IFFALSE 8358
// begin uc_side = side ;
8278: LD_ADDR_OWVAR 20
8282: PUSH
8283: LD_VAR 0 1
8287: ST_TO_ADDR
// uc_nation = nation ;
8288: LD_ADDR_OWVAR 21
8292: PUSH
8293: LD_VAR 0 2
8297: ST_TO_ADDR
// hc_name =  ;
8298: LD_ADDR_OWVAR 26
8302: PUSH
8303: LD_STRING 
8305: ST_TO_ADDR
// hc_gallery =  ;
8306: LD_ADDR_OWVAR 33
8310: PUSH
8311: LD_STRING 
8313: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8314: LD_INT 0
8316: PPUSH
8317: LD_INT 5
8319: PPUSH
8320: LD_VAR 0 8
8324: PPUSH
8325: CALL_OW 380
// un = CreateHuman ;
8329: LD_ADDR_VAR 0 16
8333: PUSH
8334: CALL_OW 44
8338: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8339: LD_VAR 0 16
8343: PPUSH
8344: LD_VAR 0 9
8348: PPUSH
8349: LD_INT 0
8351: PPUSH
8352: CALL_OW 49
// end ;
8356: GO 8275
8358: POP
8359: POP
// for i = 1 to bazookCount do
8360: LD_ADDR_VAR 0 14
8364: PUSH
8365: DOUBLE
8366: LD_INT 1
8368: DEC
8369: ST_TO_ADDR
8370: LD_VAR 0 5
8374: PUSH
8375: FOR_TO
8376: IFFALSE 8458
// begin uc_side = side ;
8378: LD_ADDR_OWVAR 20
8382: PUSH
8383: LD_VAR 0 1
8387: ST_TO_ADDR
// uc_nation = nation ;
8388: LD_ADDR_OWVAR 21
8392: PUSH
8393: LD_VAR 0 2
8397: ST_TO_ADDR
// hc_name =  ;
8398: LD_ADDR_OWVAR 26
8402: PUSH
8403: LD_STRING 
8405: ST_TO_ADDR
// hc_gallery =  ;
8406: LD_ADDR_OWVAR 33
8410: PUSH
8411: LD_STRING 
8413: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8414: LD_INT 0
8416: PPUSH
8417: LD_INT 9
8419: PPUSH
8420: LD_VAR 0 8
8424: PPUSH
8425: CALL_OW 380
// un = CreateHuman ;
8429: LD_ADDR_VAR 0 16
8433: PUSH
8434: CALL_OW 44
8438: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8439: LD_VAR 0 16
8443: PPUSH
8444: LD_VAR 0 9
8448: PPUSH
8449: LD_INT 0
8451: PPUSH
8452: CALL_OW 49
// end ;
8456: GO 8375
8458: POP
8459: POP
// for i = 1 to mortalCount do
8460: LD_ADDR_VAR 0 14
8464: PUSH
8465: DOUBLE
8466: LD_INT 1
8468: DEC
8469: ST_TO_ADDR
8470: LD_VAR 0 6
8474: PUSH
8475: FOR_TO
8476: IFFALSE 8558
// begin uc_side = side ;
8478: LD_ADDR_OWVAR 20
8482: PUSH
8483: LD_VAR 0 1
8487: ST_TO_ADDR
// uc_nation = nation ;
8488: LD_ADDR_OWVAR 21
8492: PUSH
8493: LD_VAR 0 2
8497: ST_TO_ADDR
// hc_name =  ;
8498: LD_ADDR_OWVAR 26
8502: PUSH
8503: LD_STRING 
8505: ST_TO_ADDR
// hc_gallery =  ;
8506: LD_ADDR_OWVAR 33
8510: PUSH
8511: LD_STRING 
8513: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8514: LD_INT 0
8516: PPUSH
8517: LD_INT 8
8519: PPUSH
8520: LD_VAR 0 8
8524: PPUSH
8525: CALL_OW 380
// un = CreateHuman ;
8529: LD_ADDR_VAR 0 16
8533: PUSH
8534: CALL_OW 44
8538: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8539: LD_VAR 0 16
8543: PPUSH
8544: LD_VAR 0 9
8548: PPUSH
8549: LD_INT 0
8551: PPUSH
8552: CALL_OW 49
// end ;
8556: GO 8475
8558: POP
8559: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8560: LD_ADDR_VAR 0 19
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_VAR 0 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 25
8582: PUSH
8583: LD_INT 1
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 25
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 25
8602: PUSH
8603: LD_INT 8
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 25
8612: PUSH
8613: LD_INT 9
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 69
8635: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8636: LD_ADDR_VAR 0 18
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_VAR 0 1
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 4
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PPUSH
8667: CALL_OW 69
8671: ST_TO_ADDR
// for i in medic_list do
8672: LD_ADDR_VAR 0 14
8676: PUSH
8677: LD_VAR 0 18
8681: PUSH
8682: FOR_IN
8683: IFFALSE 8701
// ComMoveToArea ( i , healArea ) ;
8685: LD_VAR 0 14
8689: PPUSH
8690: LD_VAR 0 10
8694: PPUSH
8695: CALL_OW 113
8699: GO 8682
8701: POP
8702: POP
// if strategy = 1 then
8703: LD_VAR 0 12
8707: PUSH
8708: LD_INT 1
8710: EQUAL
8711: IFFALSE 9416
// begin repeat wait ( 0 0$3 ) ;
8713: LD_INT 105
8715: PPUSH
8716: CALL_OW 67
// for i in soldiersOK_list do
8720: LD_ADDR_VAR 0 14
8724: PUSH
8725: LD_VAR 0 19
8729: PUSH
8730: FOR_IN
8731: IFFALSE 8765
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8733: LD_VAR 0 14
8737: PPUSH
8738: LD_INT 80
8740: PPUSH
8741: LD_INT 109
8743: PPUSH
8744: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8748: LD_VAR 0 14
8752: PPUSH
8753: LD_INT 39
8755: PPUSH
8756: LD_INT 49
8758: PPUSH
8759: CALL_OW 174
// end ;
8763: GO 8730
8765: POP
8766: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8767: LD_INT 15
8769: PPUSH
8770: LD_INT 22
8772: PUSH
8773: LD_VAR 0 1
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PPUSH
8782: CALL_OW 70
8786: PUSH
8787: LD_INT 0
8789: GREATER
8790: IFFALSE 8713
// repeat wait ( 0 0$1 ) ;
8792: LD_INT 35
8794: PPUSH
8795: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8799: LD_ADDR_VAR 0 17
8803: PUSH
8804: LD_INT 22
8806: PUSH
8807: LD_VAR 0 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 1
8818: PUSH
8819: LD_INT 3
8821: PUSH
8822: LD_INT 24
8824: PUSH
8825: LD_INT 550
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PUSH
8836: LD_INT 24
8838: PUSH
8839: LD_INT 250
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8860: LD_ADDR_VAR 0 19
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_VAR 0 1
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: LD_INT 25
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 25
8892: PUSH
8893: LD_INT 5
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 25
8902: PUSH
8903: LD_INT 8
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 25
8912: PUSH
8913: LD_INT 9
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 24
8929: PUSH
8930: LD_INT 1000
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: PPUSH
8942: CALL_OW 69
8946: ST_TO_ADDR
// if medicCount > 0 then
8947: LD_VAR 0 7
8951: PUSH
8952: LD_INT 0
8954: GREATER
8955: IFFALSE 9029
// begin if damageUnit_list > 0 then
8957: LD_VAR 0 17
8961: PUSH
8962: LD_INT 0
8964: GREATER
8965: IFFALSE 9029
// begin for i in damageUnit_list do
8967: LD_ADDR_VAR 0 14
8971: PUSH
8972: LD_VAR 0 17
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9027
// begin ComMoveToArea ( i , healArea ) ;
8980: LD_VAR 0 14
8984: PPUSH
8985: LD_VAR 0 10
8989: PPUSH
8990: CALL_OW 113
// for j in medic_list do
8994: LD_ADDR_VAR 0 15
8998: PUSH
8999: LD_VAR 0 18
9003: PUSH
9004: FOR_IN
9005: IFFALSE 9023
// AddComHeal ( j , i ) ;
9007: LD_VAR 0 15
9011: PPUSH
9012: LD_VAR 0 14
9016: PPUSH
9017: CALL_OW 188
9021: GO 9004
9023: POP
9024: POP
// end ;
9025: GO 8977
9027: POP
9028: POP
// end ; end ; for i in soldiersOK_list do
9029: LD_ADDR_VAR 0 14
9033: PUSH
9034: LD_VAR 0 19
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9216
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9042: LD_ADDR_VAR 0 22
9046: PUSH
9047: LD_INT 22
9049: PUSH
9050: LD_VAR 0 11
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PPUSH
9059: CALL_OW 69
9063: PPUSH
9064: LD_VAR 0 14
9068: PPUSH
9069: CALL_OW 74
9073: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9074: LD_ADDR_VAR 0 23
9078: PUSH
9079: LD_INT 22
9081: PUSH
9082: LD_VAR 0 11
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 2
9093: PUSH
9094: LD_INT 59
9096: PUSH
9097: EMPTY
9098: LIST
9099: PUSH
9100: LD_INT 21
9102: PUSH
9103: LD_INT 1
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 21
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: PPUSH
9133: CALL_OW 69
9137: PPUSH
9138: LD_VAR 0 14
9142: PPUSH
9143: CALL_OW 74
9147: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9148: LD_VAR 0 14
9152: PPUSH
9153: LD_VAR 0 22
9157: PPUSH
9158: CALL_OW 296
9162: PUSH
9163: LD_INT 8
9165: PLUS
9166: PUSH
9167: LD_VAR 0 14
9171: PPUSH
9172: LD_VAR 0 23
9176: PPUSH
9177: CALL_OW 296
9181: LESS
9182: IFFALSE 9200
// begin ComAttackUnit ( i , target1 ) ;
9184: LD_VAR 0 14
9188: PPUSH
9189: LD_VAR 0 22
9193: PPUSH
9194: CALL_OW 115
// end else
9198: GO 9214
// begin ComAttackUnit ( i , target2 ) ;
9200: LD_VAR 0 14
9204: PPUSH
9205: LD_VAR 0 23
9209: PPUSH
9210: CALL_OW 115
// end ; end ;
9214: GO 9039
9216: POP
9217: POP
// for i in soldiersOK_list do
9218: LD_ADDR_VAR 0 14
9222: PUSH
9223: LD_VAR 0 19
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9405
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9231: LD_ADDR_VAR 0 22
9235: PUSH
9236: LD_INT 22
9238: PUSH
9239: LD_VAR 0 11
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 69
9252: PPUSH
9253: LD_VAR 0 14
9257: PPUSH
9258: CALL_OW 74
9262: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9263: LD_ADDR_VAR 0 23
9267: PUSH
9268: LD_INT 22
9270: PUSH
9271: LD_VAR 0 11
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 59
9285: PUSH
9286: EMPTY
9287: LIST
9288: PUSH
9289: LD_INT 21
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 21
9301: PUSH
9302: LD_INT 2
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: PPUSH
9322: CALL_OW 69
9326: PPUSH
9327: LD_VAR 0 14
9331: PPUSH
9332: CALL_OW 74
9336: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9337: LD_VAR 0 14
9341: PPUSH
9342: LD_VAR 0 22
9346: PPUSH
9347: CALL_OW 296
9351: PUSH
9352: LD_INT 8
9354: PLUS
9355: PUSH
9356: LD_VAR 0 14
9360: PPUSH
9361: LD_VAR 0 23
9365: PPUSH
9366: CALL_OW 296
9370: LESS
9371: IFFALSE 9389
// begin ComAttackUnit ( i , target1 ) ;
9373: LD_VAR 0 14
9377: PPUSH
9378: LD_VAR 0 22
9382: PPUSH
9383: CALL_OW 115
// end else
9387: GO 9403
// begin ComAttackUnit ( i , target2 ) ;
9389: LD_VAR 0 14
9393: PPUSH
9394: LD_VAR 0 23
9398: PPUSH
9399: CALL_OW 115
// end ; end ;
9403: GO 9228
9405: POP
9406: POP
// until soldiersOK_list = [ ] ;
9407: LD_VAR 0 19
9411: PUSH
9412: EMPTY
9413: EQUAL
9414: IFFALSE 8792
// end ; if strategy = 2 then
9416: LD_VAR 0 12
9420: PUSH
9421: LD_INT 2
9423: EQUAL
9424: IFFALSE 10129
// begin repeat wait ( 0 0$1 ) ;
9426: LD_INT 35
9428: PPUSH
9429: CALL_OW 67
// for i in soldiersOK_list do
9433: LD_ADDR_VAR 0 14
9437: PUSH
9438: LD_VAR 0 19
9442: PUSH
9443: FOR_IN
9444: IFFALSE 9478
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9446: LD_VAR 0 14
9450: PPUSH
9451: LD_INT 117
9453: PPUSH
9454: LD_INT 97
9456: PPUSH
9457: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9461: LD_VAR 0 14
9465: PPUSH
9466: LD_INT 94
9468: PPUSH
9469: LD_INT 50
9471: PPUSH
9472: CALL_OW 174
// end ;
9476: GO 9443
9478: POP
9479: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9480: LD_INT 16
9482: PPUSH
9483: LD_INT 22
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: PUSH
9500: LD_INT 0
9502: GREATER
9503: IFFALSE 9426
// repeat wait ( 0 0$3 ) ;
9505: LD_INT 105
9507: PPUSH
9508: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9512: LD_ADDR_VAR 0 17
9516: PUSH
9517: LD_INT 22
9519: PUSH
9520: LD_VAR 0 1
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 1
9531: PUSH
9532: LD_INT 3
9534: PUSH
9535: LD_INT 24
9537: PUSH
9538: LD_INT 550
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 24
9551: PUSH
9552: LD_INT 250
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 69
9572: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9573: LD_ADDR_VAR 0 19
9577: PUSH
9578: LD_INT 22
9580: PUSH
9581: LD_VAR 0 1
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 25
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 8
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 9
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 24
9642: PUSH
9643: LD_INT 1000
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: PPUSH
9655: CALL_OW 69
9659: ST_TO_ADDR
// if medicCount > 0 then
9660: LD_VAR 0 7
9664: PUSH
9665: LD_INT 0
9667: GREATER
9668: IFFALSE 9742
// begin if damageUnit_list > 0 then
9670: LD_VAR 0 17
9674: PUSH
9675: LD_INT 0
9677: GREATER
9678: IFFALSE 9742
// begin for i in damageUnit_list do
9680: LD_ADDR_VAR 0 14
9684: PUSH
9685: LD_VAR 0 17
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9740
// begin ComMoveToArea ( i , healArea ) ;
9693: LD_VAR 0 14
9697: PPUSH
9698: LD_VAR 0 10
9702: PPUSH
9703: CALL_OW 113
// for j in medic_list do
9707: LD_ADDR_VAR 0 15
9711: PUSH
9712: LD_VAR 0 18
9716: PUSH
9717: FOR_IN
9718: IFFALSE 9736
// AddComHeal ( j , i ) ;
9720: LD_VAR 0 15
9724: PPUSH
9725: LD_VAR 0 14
9729: PPUSH
9730: CALL_OW 188
9734: GO 9717
9736: POP
9737: POP
// end ;
9738: GO 9690
9740: POP
9741: POP
// end ; end ; for i in soldiersOK_list do
9742: LD_ADDR_VAR 0 14
9746: PUSH
9747: LD_VAR 0 19
9751: PUSH
9752: FOR_IN
9753: IFFALSE 9929
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9755: LD_ADDR_VAR 0 22
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 11
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 69
9776: PPUSH
9777: LD_VAR 0 14
9781: PPUSH
9782: CALL_OW 74
9786: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9787: LD_ADDR_VAR 0 23
9791: PUSH
9792: LD_INT 22
9794: PUSH
9795: LD_VAR 0 11
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 2
9806: PUSH
9807: LD_INT 59
9809: PUSH
9810: EMPTY
9811: LIST
9812: PUSH
9813: LD_INT 21
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: PPUSH
9846: CALL_OW 69
9850: PPUSH
9851: LD_VAR 0 14
9855: PPUSH
9856: CALL_OW 74
9860: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9861: LD_VAR 0 14
9865: PPUSH
9866: LD_VAR 0 22
9870: PPUSH
9871: CALL_OW 296
9875: PUSH
9876: LD_INT 8
9878: PLUS
9879: PUSH
9880: LD_VAR 0 14
9884: PPUSH
9885: LD_VAR 0 23
9889: PPUSH
9890: CALL_OW 296
9894: LESS
9895: IFFALSE 9913
// begin ComAttackUnit ( i , target1 ) ;
9897: LD_VAR 0 14
9901: PPUSH
9902: LD_VAR 0 22
9906: PPUSH
9907: CALL_OW 115
// end else
9911: GO 9927
// begin ComAttackUnit ( i , target2 ) ;
9913: LD_VAR 0 14
9917: PPUSH
9918: LD_VAR 0 23
9922: PPUSH
9923: CALL_OW 115
// end ; end ;
9927: GO 9752
9929: POP
9930: POP
// for i in soldiersOK_list do
9931: LD_ADDR_VAR 0 14
9935: PUSH
9936: LD_VAR 0 19
9940: PUSH
9941: FOR_IN
9942: IFFALSE 10118
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9944: LD_ADDR_VAR 0 22
9948: PUSH
9949: LD_INT 22
9951: PUSH
9952: LD_VAR 0 11
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PPUSH
9961: CALL_OW 69
9965: PPUSH
9966: LD_VAR 0 14
9970: PPUSH
9971: CALL_OW 74
9975: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9976: LD_ADDR_VAR 0 23
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_VAR 0 11
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 59
9998: PUSH
9999: EMPTY
10000: LIST
10001: PUSH
10002: LD_INT 21
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: PPUSH
10035: CALL_OW 69
10039: PPUSH
10040: LD_VAR 0 14
10044: PPUSH
10045: CALL_OW 74
10049: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10050: LD_VAR 0 14
10054: PPUSH
10055: LD_VAR 0 22
10059: PPUSH
10060: CALL_OW 296
10064: PUSH
10065: LD_INT 8
10067: PLUS
10068: PUSH
10069: LD_VAR 0 14
10073: PPUSH
10074: LD_VAR 0 23
10078: PPUSH
10079: CALL_OW 296
10083: LESS
10084: IFFALSE 10102
// begin ComAttackUnit ( i , target1 ) ;
10086: LD_VAR 0 14
10090: PPUSH
10091: LD_VAR 0 22
10095: PPUSH
10096: CALL_OW 115
// end else
10100: GO 10116
// begin ComAttackUnit ( i , target2 ) ;
10102: LD_VAR 0 14
10106: PPUSH
10107: LD_VAR 0 23
10111: PPUSH
10112: CALL_OW 115
// end ; end ;
10116: GO 9941
10118: POP
10119: POP
// until soldiersOK_list = [ ] ;
10120: LD_VAR 0 19
10124: PUSH
10125: EMPTY
10126: EQUAL
10127: IFFALSE 9505
// end ; end ; end_of_file
10129: LD_VAR 0 13
10133: RET
// every 0 0$01 do
10134: GO 10136
10136: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10137: LD_INT 22
10139: PUSH
10140: LD_INT 1
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 25
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 69
10165: PUSH
10166: LD_INT 0
10168: EQUAL
10169: IFFALSE 10183
// SetClass ( JMM , 2 ) ;
10171: LD_EXP 1
10175: PPUSH
10176: LD_INT 2
10178: PPUSH
10179: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10183: LD_STRING M1
10185: PPUSH
10186: CALL_OW 337
// case difficulty of 1 :
10190: LD_OWVAR 67
10194: PUSH
10195: LD_INT 1
10197: DOUBLE
10198: EQUAL
10199: IFTRUE 10203
10201: GO 10213
10203: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10204: LD_STRING M1-1
10206: PPUSH
10207: CALL_OW 337
10211: GO 10250
10213: LD_INT 2
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10231
10221: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10222: LD_STRING M1-2
10224: PPUSH
10225: CALL_OW 337
10229: GO 10250
10231: LD_INT 3
10233: DOUBLE
10234: EQUAL
10235: IFTRUE 10239
10237: GO 10249
10239: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10240: LD_STRING M1-3
10242: PPUSH
10243: CALL_OW 337
10247: GO 10250
10249: POP
// ChangeMissionObjectives ( M1cont ) ;
10250: LD_STRING M1cont
10252: PPUSH
10253: CALL_OW 337
// SaveForQuickRestart ;
10257: CALL_OW 22
// end ;
10261: END
// every 0 0$1 do
10262: GO 10264
10264: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10265: LD_INT 350
10267: PPUSH
10268: LD_INT 875
10270: PPUSH
10271: CALL_OW 12
10275: PPUSH
10276: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10280: LD_INT 5
10282: PPUSH
10283: LD_INT 4
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 55
// wait ( 0 0$15 ) ;
10293: LD_INT 525
10295: PPUSH
10296: CALL_OW 67
// if IsOk ( Lisa ) then
10300: LD_EXP 2
10304: PPUSH
10305: CALL_OW 302
10309: IFFALSE 10325
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10311: LD_EXP 2
10315: PPUSH
10316: LD_STRING DR0-Lisa-1
10318: PPUSH
10319: CALL_OW 88
// end else
10323: GO 10475
// begin if IsOK ( Cyrus ) then
10325: LD_EXP 4
10329: PPUSH
10330: CALL_OW 302
10334: IFFALSE 10350
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10336: LD_EXP 4
10340: PPUSH
10341: LD_STRING DR0-Cyrus-1
10343: PPUSH
10344: CALL_OW 88
// end else
10348: GO 10475
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10350: LD_INT 22
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 21
10362: PUSH
10363: LD_INT 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 2
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 2
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 3
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 4
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 26
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: PPUSH
10439: CALL_OW 69
10443: PUSH
10444: LD_EXP 1
10448: PUSH
10449: LD_EXP 8
10453: PUSH
10454: LD_EXP 5
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: DIFF
10464: PPUSH
10465: LD_STRING DR0-Sol1-1
10467: PPUSH
10468: LD_STRING DR0-Sol1-1
10470: PPUSH
10471: CALL 4688 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10475: LD_INT 22
10477: PUSH
10478: LD_INT 1
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 21
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 2
10497: PUSH
10498: LD_INT 25
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 25
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 25
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 25
10530: PUSH
10531: LD_INT 4
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 26
10547: PUSH
10548: LD_INT 1
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: EMPTY
10562: LIST
10563: PPUSH
10564: CALL_OW 69
10568: PUSH
10569: LD_EXP 1
10573: PUSH
10574: LD_EXP 8
10578: PUSH
10579: LD_EXP 5
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: DIFF
10589: PPUSH
10590: LD_STRING DR0-Sol2-1
10592: PPUSH
10593: LD_STRING DR0-Sol2-1
10595: PPUSH
10596: CALL 4688 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10600: LD_EXP 1
10604: PPUSH
10605: LD_STRING DR0-JMM-1
10607: PPUSH
10608: CALL_OW 88
// end ;
10612: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10613: LD_EXP 5
10617: PPUSH
10618: CALL_OW 302
10622: PUSH
10623: LD_INT 22
10625: PUSH
10626: LD_INT 1
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 25
10635: PUSH
10636: LD_INT 16
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PPUSH
10647: CALL_OW 69
10651: PUSH
10652: LD_INT 0
10654: GREATER
10655: AND
10656: IFFALSE 10934
10658: GO 10660
10660: DISABLE
// begin DialogueOn ;
10661: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10665: LD_EXP 5
10669: PPUSH
10670: LD_STRING D10-Frank-1
10672: PPUSH
10673: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10677: LD_INT 22
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 21
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 25
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: LD_INT 3
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 25
10732: PUSH
10733: LD_INT 4
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: PPUSH
10752: CALL_OW 69
10756: PUSH
10757: LD_EXP 1
10761: PUSH
10762: LD_EXP 5
10766: PUSH
10767: LD_EXP 2
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: DIFF
10777: PPUSH
10778: LD_STRING D10-Sol1-1
10780: PPUSH
10781: LD_STRING D10-FSol1-1
10783: PPUSH
10784: CALL 4688 0 3
// Say ( Frank , D10-Frank-2 ) ;
10788: LD_EXP 5
10792: PPUSH
10793: LD_STRING D10-Frank-2
10795: PPUSH
10796: CALL_OW 88
// if IsOK ( Lisa ) then
10800: LD_EXP 2
10804: PPUSH
10805: CALL_OW 302
10809: IFFALSE 10825
// begin Say ( Lisa , D10-Lisa-2 ) ;
10811: LD_EXP 2
10815: PPUSH
10816: LD_STRING D10-Lisa-2
10818: PPUSH
10819: CALL_OW 88
// end else
10823: GO 10930
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10825: LD_INT 22
10827: PUSH
10828: LD_INT 1
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 2
10847: PUSH
10848: LD_INT 25
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 2
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 3
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 4
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: PUSH
10905: LD_EXP 1
10909: PUSH
10910: LD_EXP 5
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: DIFF
10919: PPUSH
10920: LD_STRING D10-Sol1-2
10922: PPUSH
10923: LD_STRING D10-FSol1-2
10925: PPUSH
10926: CALL 4688 0 3
// end ; DialogueOff ;
10930: CALL_OW 7
// end ;
10934: END
// every 10 10$30 do
10935: GO 10937
10937: DISABLE
// begin HarrisonSupport ;
10938: CALL 1973 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10942: LD_EXP 16
10946: PPUSH
10947: CALL_OW 310
10951: PPUSH
10952: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10956: LD_EXP 16
10960: PPUSH
10961: LD_STRING DEng-Eng1-1
10963: PPUSH
10964: CALL_OW 88
// wait ( 1 1$0 ) ;
10968: LD_INT 2100
10970: PPUSH
10971: CALL_OW 67
// DialogueOn ;
10975: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10979: LD_EXP 13
10983: PPUSH
10984: LD_STRING DRem-Har-1
10986: PPUSH
10987: CALL_OW 94
// if contactWithRussian = 1 then
10991: LD_EXP 21
10995: PUSH
10996: LD_INT 1
10998: EQUAL
10999: IFFALSE 11015
// begin Say ( JMM , DRem-JMM-1 ) ;
11001: LD_EXP 1
11005: PPUSH
11006: LD_STRING DRem-JMM-1
11008: PPUSH
11009: CALL_OW 88
// end else
11013: GO 11027
// begin Say ( JMM , DRem-JMM-1a ) ;
11015: LD_EXP 1
11019: PPUSH
11020: LD_STRING DRem-JMM-1a
11022: PPUSH
11023: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11027: LD_EXP 13
11031: PPUSH
11032: LD_STRING DRem-Har-2
11034: PPUSH
11035: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11039: LD_STRING DenisInDelta
11041: PPUSH
11042: LD_INT 0
11044: PPUSH
11045: CALL_OW 30
11049: PUSH
11050: LD_INT 1
11052: EQUAL
11053: IFFALSE 11069
// begin Say ( JMM , DRem-JMM-2 ) ;
11055: LD_EXP 1
11059: PPUSH
11060: LD_STRING DRem-JMM-2
11062: PPUSH
11063: CALL_OW 88
// end else
11067: GO 11081
// begin Say ( JMM , DRem-JMM-2a ) ;
11069: LD_EXP 1
11073: PPUSH
11074: LD_STRING DRem-JMM-2a
11076: PPUSH
11077: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11081: LD_EXP 13
11085: PPUSH
11086: LD_STRING DRem-Har-3
11088: PPUSH
11089: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11093: LD_EXP 1
11097: PPUSH
11098: LD_STRING DRem-JMM-3
11100: PPUSH
11101: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11105: LD_EXP 13
11109: PPUSH
11110: LD_STRING DRem-Har-4
11112: PPUSH
11113: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11117: LD_STRING DenisInDelta
11119: PPUSH
11120: LD_INT 0
11122: PPUSH
11123: CALL_OW 30
11127: PUSH
11128: LD_INT 1
11130: EQUAL
11131: IFFALSE 11159
// begin Say ( JMM , DRem-JMM-4 ) ;
11133: LD_EXP 1
11137: PPUSH
11138: LD_STRING DRem-JMM-4
11140: PPUSH
11141: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11145: LD_EXP 13
11149: PPUSH
11150: LD_STRING DRem-Har-5
11152: PPUSH
11153: CALL_OW 94
// end else
11157: GO 11192
// begin SetRestrict ( 36 , 1 , true ) ;
11159: LD_INT 36
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: LD_INT 1
11167: PPUSH
11168: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11172: LD_INT 15
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11185: LD_STRING MR
11187: PPUSH
11188: CALL_OW 337
// end ; DialogueOff ;
11192: CALL_OW 7
// end ;
11196: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11197: LD_STRING DenisInDelta
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 30
11207: PUSH
11208: LD_INT 1
11210: EQUAL
11211: IFFALSE 11342
11213: GO 11215
11215: DISABLE
// begin PrepareDenis ;
11216: CALL 1894 0 0
// CenterNowOnUnits ( Denis ) ;
11220: LD_EXP 9
11224: PPUSH
11225: CALL_OW 87
// DialogueOn ;
11229: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11233: LD_EXP 9
11237: PPUSH
11238: LD_STRING DDen-Den-1
11240: PPUSH
11241: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11245: LD_EXP 1
11249: PPUSH
11250: LD_STRING DDen-JMM-1
11252: PPUSH
11253: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11257: LD_EXP 9
11261: PPUSH
11262: LD_STRING DDen-Den-2
11264: PPUSH
11265: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11269: LD_EXP 1
11273: PPUSH
11274: LD_STRING DDen-JMM-2
11276: PPUSH
11277: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11281: LD_EXP 9
11285: PPUSH
11286: LD_STRING DDen-Den-3
11288: PPUSH
11289: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11293: LD_EXP 1
11297: PPUSH
11298: LD_STRING DDen-JMM-3
11300: PPUSH
11301: CALL_OW 88
// DialogueOff ;
11305: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11309: LD_INT 36
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11322: LD_INT 15
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11335: LD_STRING MR
11337: PPUSH
11338: CALL_OW 337
// end ;
11342: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11343: CALL 11388 0 0
11347: PUSH
11348: LD_EXP 9
11352: PPUSH
11353: CALL_OW 302
11357: AND
11358: IFFALSE 11387
11360: GO 11362
11362: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11363: LD_EXP 9
11367: PPUSH
11368: LD_STRING DR1-Den-1
11370: PPUSH
11371: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11375: LD_EXP 1
11379: PPUSH
11380: LD_STRING DR1-JMM-1
11382: PPUSH
11383: CALL_OW 88
// end ;
11387: END
// function CheckOptoLab ; var i ; begin
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// result = false ;
11392: LD_ADDR_VAR 0 1
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 2
11417: PUSH
11418: LD_INT 30
11420: PUSH
11421: LD_INT 7
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 30
11430: PUSH
11431: LD_INT 8
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: PUSH
11452: FOR_IN
11453: IFFALSE 11505
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11455: LD_VAR 0 2
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 268
11467: PUSH
11468: LD_INT 15
11470: EQUAL
11471: PUSH
11472: LD_VAR 0 2
11476: PPUSH
11477: LD_INT 2
11479: PPUSH
11480: CALL_OW 268
11484: PUSH
11485: LD_INT 15
11487: EQUAL
11488: OR
11489: IFFALSE 11501
// begin result = true ;
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// break ;
11499: GO 11505
// end ; break ;
11501: GO 11505
// end ;
11503: GO 11452
11505: POP
11506: POP
// end ;
11507: LD_VAR 0 1
11511: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11512: LD_INT 15
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 321
11522: PUSH
11523: LD_INT 2
11525: EQUAL
11526: PUSH
11527: LD_EXP 9
11531: PPUSH
11532: CALL_OW 302
11536: AND
11537: IFFALSE 11769
11539: GO 11541
11541: DISABLE
// begin DialogueOn ;
11542: CALL_OW 6
// if IsOK ( Denis ) then
11546: LD_EXP 9
11550: PPUSH
11551: CALL_OW 302
11555: IFFALSE 11571
// begin Say ( Denis , DR2-Den-1 ) ;
11557: LD_EXP 9
11561: PPUSH
11562: LD_STRING DR2-Den-1
11564: PPUSH
11565: CALL_OW 88
// end else
11569: GO 11630
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11571: LD_INT 22
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 21
11583: PUSH
11584: LD_INT 1
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 25
11593: PUSH
11594: LD_INT 4
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: PPUSH
11606: CALL_OW 69
11610: PUSH
11611: LD_EXP 1
11615: PUSH
11616: EMPTY
11617: LIST
11618: DIFF
11619: PPUSH
11620: LD_STRING DR2-Sci1-1
11622: PPUSH
11623: LD_STRING DR2-FSci1-1
11625: PPUSH
11626: CALL 4688 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11630: LD_EXP 1
11634: PPUSH
11635: LD_STRING DR2-JMM-1
11637: PPUSH
11638: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11642: LD_INT 22
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 21
11654: PUSH
11655: LD_INT 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 2
11664: PUSH
11665: LD_INT 25
11667: PUSH
11668: LD_INT 1
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 25
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 25
11687: PUSH
11688: LD_INT 3
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 25
11697: PUSH
11698: LD_INT 4
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: PPUSH
11717: CALL_OW 69
11721: PUSH
11722: LD_EXP 1
11726: PUSH
11727: LD_EXP 9
11731: PUSH
11732: LD_EXP 8
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: DIFF
11742: PPUSH
11743: LD_STRING DR2-Sol1-1
11745: PPUSH
11746: LD_STRING DR2-Sol1-11
11748: PPUSH
11749: CALL 4688 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING DR2-JMM-2
11760: PPUSH
11761: CALL_OW 88
// DialogueOff ;
11765: CALL_OW 7
// end ;
11769: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11770: LD_INT 22
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 30
11782: PUSH
11783: LD_INT 36
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PPUSH
11794: CALL_OW 69
11798: PUSH
11799: LD_INT 0
11801: EQUAL
11802: PUSH
11803: LD_INT 22
11805: PUSH
11806: LD_INT 1
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: PUSH
11813: LD_INT 21
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 33
11825: PUSH
11826: LD_INT 2
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: PUSH
11843: LD_INT 0
11845: GREATER
11846: AND
11847: PUSH
11848: LD_EXP 22
11852: PUSH
11853: LD_INT 0
11855: EQUAL
11856: AND
11857: IFFALSE 11929
11859: GO 11861
11861: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11862: LD_INT 22
11864: PUSH
11865: LD_INT 1
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 21
11874: PUSH
11875: LD_INT 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 25
11884: PUSH
11885: LD_INT 3
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 69
11901: PUSH
11902: LD_EXP 1
11906: PUSH
11907: EMPTY
11908: LIST
11909: DIFF
11910: PPUSH
11911: LD_STRING D3a-Mech1-1
11913: PPUSH
11914: LD_STRING D3a-Mech1-1
11916: PPUSH
11917: CALL 4688 0 3
// firstTower = 2 ;
11921: LD_ADDR_EXP 22
11925: PUSH
11926: LD_INT 2
11928: ST_TO_ADDR
// end ;
11929: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11930: LD_INT 22
11932: PUSH
11933: LD_INT 3
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 21
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PPUSH
11954: CALL_OW 69
11958: PUSH
11959: LD_INT 0
11961: EQUAL
11962: IFFALSE 12077
11964: GO 11966
11966: DISABLE
11967: LD_INT 0
11969: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11970: LD_ADDR_VAR 0 1
11974: PUSH
11975: LD_INT 22
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 21
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 3
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 25
12030: PUSH
12031: LD_INT 4
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: PPUSH
12050: CALL_OW 69
12054: PUSH
12055: FOR_IN
12056: IFFALSE 12075
// AddExperience ( i , 1 , 10000 ) ;
12058: LD_VAR 0 1
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: LD_INT 10000
12068: PPUSH
12069: CALL_OW 492
12073: GO 12055
12075: POP
12076: POP
// end ;
12077: PPOPN 1
12079: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12080: LD_INT 22
12082: PUSH
12083: LD_INT 1
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 30
12092: PUSH
12093: LD_INT 36
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: PUSH
12109: LD_INT 0
12111: GREATER
12112: PUSH
12113: LD_INT 22
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 21
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 33
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 69
12152: PUSH
12153: LD_INT 0
12155: GREATER
12156: AND
12157: PUSH
12158: CALL 12740 0 0
12162: AND
12163: IFFALSE 12737
12165: GO 12167
12167: DISABLE
12168: LD_INT 0
12170: PPUSH
12171: PPUSH
12172: PPUSH
12173: PPUSH
12174: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12175: LD_ADDR_VAR 0 3
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: LD_INT 1
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 30
12192: PUSH
12193: LD_INT 36
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 69
12208: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12209: LD_ADDR_VAR 0 4
12213: PUSH
12214: LD_INT 22
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 21
12226: PUSH
12227: LD_INT 2
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 33
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12254: LD_ADDR_VAR 0 5
12258: PUSH
12259: EMPTY
12260: ST_TO_ADDR
// for i in tmpControlTowers do
12261: LD_ADDR_VAR 0 1
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: FOR_IN
12272: IFFALSE 12735
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12274: LD_EXP 1
12278: PPUSH
12279: CALL_OW 310
12283: PUSH
12284: LD_VAR 0 1
12288: EQUAL
12289: PUSH
12290: LD_EXP 1
12294: PPUSH
12295: CALL_OW 257
12299: PUSH
12300: LD_INT 3
12302: EQUAL
12303: AND
12304: IFFALSE 12434
// begin InGameOn ;
12306: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12310: LD_VAR 0 4
12314: PUSH
12315: LD_INT 1
12317: ARRAY
12318: PPUSH
12319: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12323: LD_EXP 1
12327: PPUSH
12328: LD_STRING D4a-JMM-1
12330: PPUSH
12331: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12335: LD_VAR 0 4
12339: PUSH
12340: LD_INT 1
12342: ARRAY
12343: PPUSH
12344: LD_EXP 1
12348: PPUSH
12349: CALL_OW 53
// wait ( 0 0$1 ) ;
12353: LD_INT 35
12355: PPUSH
12356: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12360: LD_VAR 0 4
12364: PUSH
12365: LD_INT 1
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 4
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: CALL_OW 250
12382: PUSH
12383: LD_INT 3
12385: PLUS
12386: PPUSH
12387: LD_VAR 0 4
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PPUSH
12396: CALL_OW 251
12400: PUSH
12401: LD_INT 2
12403: MINUS
12404: PPUSH
12405: CALL_OW 111
// wait ( 0 0$2 ) ;
12409: LD_INT 70
12411: PPUSH
12412: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12416: LD_EXP 1
12420: PPUSH
12421: LD_STRING D4b-JMM-1
12423: PPUSH
12424: CALL_OW 88
// InGameOff ;
12428: CALL_OW 9
// end else
12432: GO 12733
// begin InGameOn ;
12434: CALL_OW 8
// for j in UnitsInside ( i ) do
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 313
12452: PUSH
12453: FOR_IN
12454: IFFALSE 12489
// if GetClass ( j ) = 3 then
12456: LD_VAR 0 2
12460: PPUSH
12461: CALL_OW 257
12465: PUSH
12466: LD_INT 3
12468: EQUAL
12469: IFFALSE 12487
// tmpMechanicInside = tmpMechanicInside ^ j ;
12471: LD_ADDR_VAR 0 5
12475: PUSH
12476: LD_VAR 0 5
12480: PUSH
12481: LD_VAR 0 2
12485: ADD
12486: ST_TO_ADDR
12487: GO 12453
12489: POP
12490: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12491: LD_VAR 0 5
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 258
12504: PUSH
12505: LD_INT 1
12507: EQUAL
12508: IFFALSE 12526
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12510: LD_VAR 0 5
12514: PUSH
12515: LD_INT 1
12517: ARRAY
12518: PPUSH
12519: LD_STRING D4a-Mech1-1
12521: PPUSH
12522: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12526: LD_VAR 0 5
12530: PUSH
12531: LD_INT 1
12533: ARRAY
12534: PPUSH
12535: CALL_OW 258
12539: PUSH
12540: LD_INT 2
12542: EQUAL
12543: IFFALSE 12561
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12545: LD_VAR 0 5
12549: PUSH
12550: LD_INT 1
12552: ARRAY
12553: PPUSH
12554: LD_STRING D4a-FMech1-1
12556: PPUSH
12557: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12561: LD_VAR 0 4
12565: PUSH
12566: LD_INT 1
12568: ARRAY
12569: PPUSH
12570: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12574: LD_VAR 0 4
12578: PUSH
12579: LD_INT 1
12581: ARRAY
12582: PPUSH
12583: LD_VAR 0 5
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: CALL_OW 53
// wait ( 0 0$1 ) ;
12596: LD_INT 35
12598: PPUSH
12599: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12603: LD_VAR 0 4
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: LD_VAR 0 4
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PPUSH
12621: CALL_OW 250
12625: PUSH
12626: LD_INT 3
12628: PLUS
12629: PPUSH
12630: LD_VAR 0 4
12634: PUSH
12635: LD_INT 1
12637: ARRAY
12638: PPUSH
12639: CALL_OW 251
12643: PUSH
12644: LD_INT 2
12646: MINUS
12647: PPUSH
12648: CALL_OW 111
// wait ( 0 0$2 ) ;
12652: LD_INT 70
12654: PPUSH
12655: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12659: LD_VAR 0 5
12663: PUSH
12664: LD_INT 1
12666: ARRAY
12667: PPUSH
12668: CALL_OW 258
12672: PUSH
12673: LD_INT 1
12675: EQUAL
12676: IFFALSE 12694
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12678: LD_VAR 0 5
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: LD_STRING D4b-Mech1-1
12689: PPUSH
12690: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12694: LD_VAR 0 5
12698: PUSH
12699: LD_INT 1
12701: ARRAY
12702: PPUSH
12703: CALL_OW 258
12707: PUSH
12708: LD_INT 2
12710: EQUAL
12711: IFFALSE 12729
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12713: LD_VAR 0 5
12717: PUSH
12718: LD_INT 1
12720: ARRAY
12721: PPUSH
12722: LD_STRING D4b-FMech1-1
12724: PPUSH
12725: CALL_OW 88
// InGameOff ;
12729: CALL_OW 9
// end ; end ;
12733: GO 12271
12735: POP
12736: POP
// end ;
12737: PPOPN 5
12739: END
// function CheckMehInside ; var i , j ; begin
12740: LD_INT 0
12742: PPUSH
12743: PPUSH
12744: PPUSH
// result = false ;
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_INT 0
12752: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12753: LD_ADDR_VAR 0 2
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 30
12770: PUSH
12771: LD_INT 36
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PPUSH
12782: CALL_OW 69
12786: PUSH
12787: FOR_IN
12788: IFFALSE 12839
// begin for j in UnitsInside ( i ) do
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_VAR 0 2
12799: PPUSH
12800: CALL_OW 313
12804: PUSH
12805: FOR_IN
12806: IFFALSE 12835
// begin if GetClass ( j ) = 3 then
12808: LD_VAR 0 3
12812: PPUSH
12813: CALL_OW 257
12817: PUSH
12818: LD_INT 3
12820: EQUAL
12821: IFFALSE 12833
// begin result = true ;
12823: LD_ADDR_VAR 0 1
12827: PUSH
12828: LD_INT 1
12830: ST_TO_ADDR
// break ;
12831: GO 12835
// end ; end ;
12833: GO 12805
12835: POP
12836: POP
// end ;
12837: GO 12787
12839: POP
12840: POP
// end ;
12841: LD_VAR 0 1
12845: RET
// every 25 25$0 do
12846: GO 12848
12848: DISABLE
// begin PrepareKurt ;
12849: CALL 15835 0 0
// end ;
12853: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12854: LD_EXP 18
12858: PPUSH
12859: LD_INT 9
12861: PPUSH
12862: CALL_OW 308
12866: PUSH
12867: LD_EXP 20
12871: PUSH
12872: LD_INT 1
12874: EQUAL
12875: AND
12876: IFFALSE 12950
12878: GO 12880
12880: DISABLE
// begin RemoveUnit ( Kurt ) ;
12881: LD_EXP 18
12885: PPUSH
12886: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12890: LD_EXP 18
12894: PPUSH
12895: LD_STRING Kurt
12897: PPUSH
12898: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12902: LD_INT 1
12904: PPUSH
12905: LD_INT 2
12907: PPUSH
12908: CALL_OW 81
12912: PUSH
12913: LD_INT 0
12915: EQUAL
12916: IFFALSE 12926
// KurtStatus = 1 ;
12918: LD_ADDR_EXP 19
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12926: LD_INT 1
12928: PPUSH
12929: LD_INT 2
12931: PPUSH
12932: CALL_OW 81
12936: PUSH
12937: LD_INT 2
12939: EQUAL
12940: IFFALSE 12950
// KurtStatus = 2 ;
12942: LD_ADDR_EXP 19
12946: PUSH
12947: LD_INT 2
12949: ST_TO_ADDR
// end ;
12950: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12951: LD_INT 1
12953: PPUSH
12954: LD_INT 2
12956: PPUSH
12957: CALL_OW 81
12961: PUSH
12962: LD_INT 2
12964: EQUAL
12965: PUSH
12966: LD_EXP 18
12970: PPUSH
12971: CALL_OW 302
12975: AND
12976: IFFALSE 13001
12978: GO 12980
12980: DISABLE
// begin DialogueOn ;
12981: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12985: LD_EXP 18
12989: PPUSH
12990: LD_STRING D2a-Kurt-1
12992: PPUSH
12993: CALL_OW 88
// DialogueOff ;
12997: CALL_OW 7
// end ;
13001: END
// every 35 35$0 do
13002: GO 13004
13004: DISABLE
// begin PrepareJoan ;
13005: CALL 2369 0 0
// wait ( 1 1$0 ) ;
13009: LD_INT 2100
13011: PPUSH
13012: CALL_OW 67
// if IsOK ( Lisa ) then
13016: LD_EXP 2
13020: PPUSH
13021: CALL_OW 302
13025: IFFALSE 13155
// begin DialogueOn ;
13027: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13031: LD_EXP 2
13035: PPUSH
13036: LD_STRING D7-Lisa-1
13038: PPUSH
13039: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13043: LD_EXP 1
13047: PPUSH
13048: LD_STRING D7-JMM-1
13050: PPUSH
13051: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13055: LD_EXP 2
13059: PPUSH
13060: LD_STRING D7-Lisa-2
13062: PPUSH
13063: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13067: LD_EXP 1
13071: PPUSH
13072: LD_STRING D7-JMM-2
13074: PPUSH
13075: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13079: LD_EXP 2
13083: PPUSH
13084: LD_STRING D7-Lisa-3
13086: PPUSH
13087: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13091: LD_EXP 1
13095: PPUSH
13096: LD_STRING D7-JMM-3
13098: PPUSH
13099: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13103: LD_EXP 2
13107: PPUSH
13108: LD_STRING D7-Lisa-4
13110: PPUSH
13111: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13115: LD_EXP 1
13119: PPUSH
13120: LD_STRING D7-JMM-4
13122: PPUSH
13123: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13127: LD_EXP 1
13131: PPUSH
13132: LD_STRING D7-JMM-4a
13134: PPUSH
13135: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13139: LD_EXP 2
13143: PPUSH
13144: LD_STRING D7-Lisa-5
13146: PPUSH
13147: CALL_OW 88
// DialogueOff ;
13151: CALL_OW 7
// end ; end ;
13155: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13156: LD_INT 22
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 33
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: PUSH
13185: LD_INT 2
13187: GREATEREQUAL
13188: IFFALSE 13208
13190: GO 13192
13192: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13193: LD_STRING MRa
13195: PPUSH
13196: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13200: LD_ADDR_EXP 27
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: END
// every 4 4$0 do
13209: GO 13211
13211: DISABLE
// PrepareRandoms ( 1 ) ;
13212: LD_INT 1
13214: PPUSH
13215: CALL 3366 0 1
13219: END
// every 10 10$0 do
13220: GO 13222
13222: DISABLE
// PrepareRandoms ( 2 ) ;
13223: LD_INT 2
13225: PPUSH
13226: CALL 3366 0 1
13230: END
// every 28 28$0 do
13231: GO 13233
13233: DISABLE
// PrepareRandoms ( 4 ) ;
13234: LD_INT 4
13236: PPUSH
13237: CALL 3366 0 1
13241: END
// every 32 32$0 do
13242: GO 13244
13244: DISABLE
// PrepareRandoms ( 5 ) ;
13245: LD_INT 5
13247: PPUSH
13248: CALL 3366 0 1
13252: END
// every 35 35$30 do
13253: GO 13255
13255: DISABLE
// PrepareRandoms ( 6 ) ;
13256: LD_INT 6
13258: PPUSH
13259: CALL 3366 0 1
13263: END
// every 37 37$20 do
13264: GO 13266
13266: DISABLE
// PrepareRandoms ( 7 ) ;
13267: LD_INT 7
13269: PPUSH
13270: CALL 3366 0 1
13274: END
// every 5 5$20 do
13275: GO 13277
13277: DISABLE
// begin DialogueOn ;
13278: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13282: LD_EXP 10
13286: PPUSH
13287: LD_STRING D12a-Sci-1
13289: PPUSH
13290: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13294: LD_EXP 1
13298: PPUSH
13299: LD_STRING D12a-JMM-1
13301: PPUSH
13302: CALL_OW 88
// DialogueOff ;
13306: CALL_OW 7
// cratesStatus = 1 ;
13310: LD_ADDR_EXP 37
13314: PUSH
13315: LD_INT 1
13317: ST_TO_ADDR
// end ;
13318: END
// every 13 13$0 do
13319: GO 13321
13321: DISABLE
// begin DialogueOn ;
13322: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13326: LD_EXP 10
13330: PPUSH
13331: LD_STRING D12b-Sci-1
13333: PPUSH
13334: CALL_OW 94
// DialogueOff ;
13338: CALL_OW 7
// cratesStatus = 2 ;
13342: LD_ADDR_EXP 37
13346: PUSH
13347: LD_INT 2
13349: ST_TO_ADDR
// end ;
13350: END
// every 32 32$0 do
13351: GO 13353
13353: DISABLE
// begin DialogueOn ;
13354: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13358: LD_EXP 10
13362: PPUSH
13363: LD_STRING  D12c-Sci-1
13365: PPUSH
13366: CALL_OW 94
// DialogueOff ;
13370: CALL_OW 7
// wait ( 3 3$0 ) ;
13374: LD_INT 6300
13376: PPUSH
13377: CALL_OW 67
// DialogueOn ;
13381: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13385: LD_EXP 10
13389: PPUSH
13390: LD_STRING  D12d-Sci-1
13392: PPUSH
13393: CALL_OW 94
// DialogueOff ;
13397: CALL_OW 7
// cratesStatus = 1 ;
13401: LD_ADDR_EXP 37
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// end ;
13409: END
// every 42 42$0 do
13410: GO 13412
13412: DISABLE
// begin DialogueOn ;
13413: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13417: LD_EXP 10
13421: PPUSH
13422: LD_STRING D12e-Sci-1
13424: PPUSH
13425: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13429: LD_EXP 1
13433: PPUSH
13434: LD_STRING D12e-JMM-1
13436: PPUSH
13437: CALL_OW 88
// DialogueOff ;
13441: CALL_OW 7
// cratesStatus = 2 ;
13445: LD_ADDR_EXP 37
13449: PUSH
13450: LD_INT 2
13452: ST_TO_ADDR
// end ;
13453: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13454: LD_INT 22
13456: PUSH
13457: LD_INT 6
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 21
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 34
13476: PUSH
13477: LD_INT 51
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: PUSH
13494: LD_INT 0
13496: GREATER
13497: IFFALSE 13580
13499: GO 13501
13501: DISABLE
13502: LD_INT 0
13504: PPUSH
// begin enable ;
13505: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13506: LD_ADDR_VAR 0 1
13510: PUSH
13511: LD_INT 22
13513: PUSH
13514: LD_INT 6
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 2
13523: PUSH
13524: LD_INT 21
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 21
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PPUSH
13553: CALL_OW 69
13557: PUSH
13558: FOR_IN
13559: IFFALSE 13578
// ComAgressiveMove ( i , 138 , 168 ) ;
13561: LD_VAR 0 1
13565: PPUSH
13566: LD_INT 138
13568: PPUSH
13569: LD_INT 168
13571: PPUSH
13572: CALL_OW 114
13576: GO 13558
13578: POP
13579: POP
// end ;
13580: PPOPN 1
13582: END
// every 0 0$1 do var i ;
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
// begin enable ;
13589: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13590: LD_ADDR_VAR 0 1
13594: PUSH
13595: LD_INT 5
13597: PPUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 22
13603: PUSH
13604: LD_INT 3
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_INT 6
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: PPUSH
13629: CALL_OW 70
13633: PUSH
13634: FOR_IN
13635: IFFALSE 13699
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13637: LD_INT 5
13639: PPUSH
13640: LD_INT 22
13642: PUSH
13643: LD_INT 6
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 34
13652: PUSH
13653: LD_INT 51
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PPUSH
13664: CALL_OW 70
13668: PUSH
13669: LD_INT 0
13671: GREATER
13672: IFFALSE 13688
// sendedConvoys = sendedConvoys + 1 ;
13674: LD_ADDR_EXP 38
13678: PUSH
13679: LD_EXP 38
13683: PUSH
13684: LD_INT 1
13686: PLUS
13687: ST_TO_ADDR
// RemoveUnit ( i ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: CALL_OW 64
// end ;
13697: GO 13634
13699: POP
13700: POP
// end ; end_of_file
13701: PPOPN 1
13703: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13704: LD_VAR 0 1
13708: PUSH
13709: LD_INT 1
13711: EQUAL
13712: PUSH
13713: LD_VAR 0 2
13717: PUSH
13718: LD_INT 3
13720: EQUAL
13721: AND
13722: IFFALSE 13732
// contactWithRussian = 1 ;
13724: LD_ADDR_EXP 21
13728: PUSH
13729: LD_INT 1
13731: ST_TO_ADDR
// end ;
13732: PPOPN 2
13734: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 266
13744: PUSH
13745: LD_INT 36
13747: EQUAL
13748: PUSH
13749: LD_VAR 0 1
13753: PPUSH
13754: CALL_OW 255
13758: PUSH
13759: LD_INT 1
13761: EQUAL
13762: AND
13763: PUSH
13764: LD_INT 22
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: LD_INT 21
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 33
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 69
13803: PUSH
13804: LD_INT 0
13806: EQUAL
13807: AND
13808: PUSH
13809: LD_EXP 22
13813: PUSH
13814: LD_INT 0
13816: EQUAL
13817: AND
13818: IFFALSE 13887
// begin firstTower = 1 ;
13820: LD_ADDR_EXP 22
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13828: LD_INT 22
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 25
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: PUSH
13868: LD_EXP 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: DIFF
13876: PPUSH
13877: LD_STRING D3b-Mech1-1
13879: PPUSH
13880: LD_STRING D3b-Mech1-1
13882: PPUSH
13883: CALL 4688 0 3
// end ; if GetSide ( building ) = 3 then
13887: LD_VAR 0 1
13891: PPUSH
13892: CALL_OW 255
13896: PUSH
13897: LD_INT 3
13899: EQUAL
13900: IFFALSE 13974
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13902: LD_ADDR_EXP 30
13906: PUSH
13907: LD_EXP 30
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 3
13919: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13920: LD_ADDR_EXP 30
13924: PUSH
13925: LD_EXP 30
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 3
13937: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13938: LD_ADDR_EXP 30
13942: PUSH
13943: LD_EXP 30
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: CALL_OW 3
13955: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13956: LD_ADDR_EXP 30
13960: PUSH
13961: LD_EXP 30
13965: PPUSH
13966: LD_INT 1
13968: PPUSH
13969: CALL_OW 3
13973: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13974: LD_VAR 0 1
13978: PPUSH
13979: CALL_OW 255
13983: PUSH
13984: LD_INT 3
13986: EQUAL
13987: PUSH
13988: LD_VAR 0 1
13992: PPUSH
13993: CALL_OW 266
13997: PUSH
13998: LD_INT 0
14000: EQUAL
14001: PUSH
14002: LD_VAR 0 1
14006: PPUSH
14007: CALL_OW 266
14011: PUSH
14012: LD_INT 2
14014: EQUAL
14015: OR
14016: PUSH
14017: LD_VAR 0 1
14021: PPUSH
14022: CALL_OW 266
14026: PUSH
14027: LD_INT 4
14029: EQUAL
14030: OR
14031: PUSH
14032: EMPTY
14033: LIST
14034: AND
14035: IFFALSE 14046
// ComUpgrade ( building ) ;
14037: LD_VAR 0 1
14041: PPUSH
14042: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14046: LD_VAR 0 1
14050: PPUSH
14051: CALL_OW 255
14055: PUSH
14056: LD_INT 3
14058: EQUAL
14059: PUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: CALL_OW 266
14069: PUSH
14070: LD_INT 32
14072: EQUAL
14073: AND
14074: IFFALSE 14115
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14076: LD_VAR 0 1
14080: PPUSH
14081: LD_INT 42
14083: PUSH
14084: LD_INT 43
14086: PUSH
14087: LD_INT 44
14089: PUSH
14090: LD_INT 46
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 1
14101: PPUSH
14102: LD_INT 4
14104: PPUSH
14105: CALL_OW 12
14109: ARRAY
14110: PPUSH
14111: CALL_OW 208
// end ; end ;
14115: PPOPN 1
14117: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14118: LD_VAR 0 1
14122: PPUSH
14123: CALL_OW 255
14127: PUSH
14128: LD_INT 1
14130: EQUAL
14131: PUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: CALL_OW 247
14141: PUSH
14142: LD_INT 1
14144: EQUAL
14145: AND
14146: PUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 257
14156: PUSH
14157: LD_INT 1
14159: EQUAL
14160: PUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 257
14170: PUSH
14171: LD_INT 2
14173: EQUAL
14174: OR
14175: PUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 257
14185: PUSH
14186: LD_INT 3
14188: EQUAL
14189: OR
14190: PUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 257
14200: PUSH
14201: LD_INT 4
14203: EQUAL
14204: OR
14205: PUSH
14206: EMPTY
14207: LIST
14208: AND
14209: IFFALSE 14225
// unitLost = unitLost + 1 ;
14211: LD_ADDR_EXP 29
14215: PUSH
14216: LD_EXP 29
14220: PUSH
14221: LD_INT 1
14223: PLUS
14224: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 255
14234: PUSH
14235: LD_INT 3
14237: EQUAL
14238: PUSH
14239: LD_VAR 0 1
14243: PPUSH
14244: CALL_OW 247
14248: PUSH
14249: LD_INT 3
14251: EQUAL
14252: AND
14253: IFFALSE 14945
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14255: LD_VAR 0 1
14259: PPUSH
14260: CALL_OW 266
14264: PUSH
14265: LD_INT 31
14267: EQUAL
14268: PUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: CALL_OW 266
14278: PUSH
14279: LD_INT 32
14281: EQUAL
14282: OR
14283: PUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 266
14293: PUSH
14294: LD_INT 36
14296: EQUAL
14297: OR
14298: PUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 266
14308: PUSH
14309: LD_INT 0
14311: EQUAL
14312: OR
14313: PUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 266
14323: PUSH
14324: LD_INT 24
14326: EQUAL
14327: OR
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 266
14338: PUSH
14339: LD_INT 17
14341: EQUAL
14342: OR
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 266
14353: PUSH
14354: LD_INT 25
14356: EQUAL
14357: OR
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 266
14368: PUSH
14369: LD_INT 19
14371: EQUAL
14372: OR
14373: PUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 266
14383: PUSH
14384: LD_INT 20
14386: EQUAL
14387: OR
14388: PUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 266
14398: PUSH
14399: LD_INT 18
14401: EQUAL
14402: OR
14403: PUSH
14404: LD_VAR 0 1
14408: PPUSH
14409: CALL_OW 266
14413: PUSH
14414: LD_INT 21
14416: EQUAL
14417: OR
14418: PUSH
14419: LD_VAR 0 1
14423: PPUSH
14424: CALL_OW 266
14428: PUSH
14429: LD_INT 23
14431: EQUAL
14432: OR
14433: PUSH
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 266
14443: PUSH
14444: LD_INT 16
14446: EQUAL
14447: OR
14448: PUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 266
14458: PUSH
14459: LD_INT 6
14461: EQUAL
14462: OR
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 266
14473: PUSH
14474: LD_INT 29
14476: EQUAL
14477: OR
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 266
14488: PUSH
14489: LD_INT 26
14491: EQUAL
14492: OR
14493: PUSH
14494: LD_VAR 0 1
14498: PPUSH
14499: CALL_OW 266
14503: PUSH
14504: LD_INT 30
14506: EQUAL
14507: OR
14508: PUSH
14509: LD_VAR 0 1
14513: PPUSH
14514: CALL_OW 266
14518: PUSH
14519: LD_INT 28
14521: EQUAL
14522: OR
14523: PUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 266
14533: PUSH
14534: LD_INT 27
14536: EQUAL
14537: OR
14538: PUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 266
14548: PUSH
14549: LD_INT 33
14551: EQUAL
14552: OR
14553: PUSH
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 266
14563: PUSH
14564: LD_INT 2
14566: EQUAL
14567: OR
14568: PUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 266
14578: PUSH
14579: LD_INT 4
14581: EQUAL
14582: OR
14583: IFFALSE 14669
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14585: LD_ADDR_EXP 30
14589: PUSH
14590: LD_EXP 30
14594: PUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 266
14604: ADD
14605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14606: LD_ADDR_EXP 30
14610: PUSH
14611: LD_EXP 30
14615: PUSH
14616: LD_VAR 0 1
14620: PPUSH
14621: CALL_OW 250
14625: ADD
14626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14627: LD_ADDR_EXP 30
14631: PUSH
14632: LD_EXP 30
14636: PUSH
14637: LD_VAR 0 1
14641: PPUSH
14642: CALL_OW 251
14646: ADD
14647: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14648: LD_ADDR_EXP 30
14652: PUSH
14653: LD_EXP 30
14657: PUSH
14658: LD_VAR 0 1
14662: PPUSH
14663: CALL_OW 254
14667: ADD
14668: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14669: LD_VAR 0 1
14673: PPUSH
14674: CALL_OW 266
14678: PUSH
14679: LD_INT 1
14681: EQUAL
14682: IFFALSE 14761
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14684: LD_ADDR_EXP 30
14688: PUSH
14689: LD_EXP 30
14693: PUSH
14694: LD_INT 0
14696: ADD
14697: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14698: LD_ADDR_EXP 30
14702: PUSH
14703: LD_EXP 30
14707: PUSH
14708: LD_VAR 0 1
14712: PPUSH
14713: CALL_OW 250
14717: ADD
14718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14719: LD_ADDR_EXP 30
14723: PUSH
14724: LD_EXP 30
14728: PUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 251
14738: ADD
14739: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14740: LD_ADDR_EXP 30
14744: PUSH
14745: LD_EXP 30
14749: PUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 254
14759: ADD
14760: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14761: LD_VAR 0 1
14765: PPUSH
14766: CALL_OW 266
14770: PUSH
14771: LD_INT 3
14773: EQUAL
14774: IFFALSE 14853
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14776: LD_ADDR_EXP 30
14780: PUSH
14781: LD_EXP 30
14785: PUSH
14786: LD_INT 2
14788: ADD
14789: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14790: LD_ADDR_EXP 30
14794: PUSH
14795: LD_EXP 30
14799: PUSH
14800: LD_VAR 0 1
14804: PPUSH
14805: CALL_OW 250
14809: ADD
14810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14811: LD_ADDR_EXP 30
14815: PUSH
14816: LD_EXP 30
14820: PUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 251
14830: ADD
14831: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14832: LD_ADDR_EXP 30
14836: PUSH
14837: LD_EXP 30
14841: PUSH
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 254
14851: ADD
14852: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 266
14862: PUSH
14863: LD_INT 5
14865: EQUAL
14866: IFFALSE 14945
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14868: LD_ADDR_EXP 30
14872: PUSH
14873: LD_EXP 30
14877: PUSH
14878: LD_INT 4
14880: ADD
14881: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14882: LD_ADDR_EXP 30
14886: PUSH
14887: LD_EXP 30
14891: PUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 250
14901: ADD
14902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14903: LD_ADDR_EXP 30
14907: PUSH
14908: LD_EXP 30
14912: PUSH
14913: LD_VAR 0 1
14917: PPUSH
14918: CALL_OW 251
14922: ADD
14923: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14924: LD_ADDR_EXP 30
14928: PUSH
14929: LD_EXP 30
14933: PUSH
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 254
14943: ADD
14944: ST_TO_ADDR
// end ; end ; end ;
14945: PPOPN 1
14947: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14948: LD_INT 0
14950: PPUSH
14951: PPUSH
14952: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 264
14962: PUSH
14963: LD_INT 51
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 3
14979: EQUAL
14980: AND
14981: IFFALSE 15043
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14983: LD_ADDR_VAR 0 5
14987: PUSH
14988: LD_INT 2
14990: PPUSH
14991: CALL_OW 274
14995: PPUSH
14996: LD_INT 1
14998: PPUSH
14999: CALL_OW 275
15003: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15004: LD_INT 2
15006: PPUSH
15007: CALL_OW 274
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: LD_VAR 0 5
15019: PUSH
15020: LD_INT 100
15022: MINUS
15023: PPUSH
15024: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15028: LD_VAR 0 1
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 100
15038: PPUSH
15039: CALL_OW 291
// end ; if building = rufabsupp then
15043: LD_VAR 0 2
15047: PUSH
15048: LD_INT 17
15050: EQUAL
15051: IFFALSE 15065
// SetSide ( vehicle , 6 ) ;
15053: LD_VAR 0 1
15057: PPUSH
15058: LD_INT 6
15060: PPUSH
15061: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15065: LD_VAR 0 2
15069: PPUSH
15070: CALL_OW 255
15074: PUSH
15075: LD_INT 3
15077: EQUAL
15078: PUSH
15079: LD_VAR 0 2
15083: PPUSH
15084: CALL_OW 302
15088: AND
15089: IFFALSE 15159
// begin uc_side = 3 ;
15091: LD_ADDR_OWVAR 20
15095: PUSH
15096: LD_INT 3
15098: ST_TO_ADDR
// uc_nation = 3 ;
15099: LD_ADDR_OWVAR 21
15103: PUSH
15104: LD_INT 3
15106: ST_TO_ADDR
// hc_gallery :=  ;
15107: LD_ADDR_OWVAR 33
15111: PUSH
15112: LD_STRING 
15114: ST_TO_ADDR
// hc_name :=  ;
15115: LD_ADDR_OWVAR 26
15119: PUSH
15120: LD_STRING 
15122: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15123: LD_INT 0
15125: PPUSH
15126: LD_EXP 33
15130: PPUSH
15131: LD_EXP 34
15135: PPUSH
15136: CALL_OW 12
15140: PPUSH
15141: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15145: CALL_OW 44
15149: PPUSH
15150: LD_VAR 0 2
15154: PPUSH
15155: CALL_OW 52
// end ; if GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
15159: LD_VAR 0 2
15163: PPUSH
15164: CALL_OW 255
15168: PUSH
15169: LD_INT 3
15171: EQUAL
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 264
15182: PUSH
15183: LD_INT 42
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 264
15196: PUSH
15197: LD_INT 43
15199: EQUAL
15200: OR
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 264
15211: PUSH
15212: LD_INT 44
15214: EQUAL
15215: OR
15216: PUSH
15217: EMPTY
15218: LIST
15219: AND
15220: IFFALSE 15238
// russianTanks = russianTanks ^ vehicle ;
15222: LD_ADDR_EXP 35
15226: PUSH
15227: LD_EXP 35
15231: PUSH
15232: LD_VAR 0 1
15236: ADD
15237: ST_TO_ADDR
// end ;
15238: PPOPN 5
15240: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 255
15250: PUSH
15251: LD_INT 3
15253: EQUAL
15254: IFFALSE 15270
// tamedApemans = tamedApemans + 1 ;
15256: LD_ADDR_EXP 31
15260: PUSH
15261: LD_EXP 31
15265: PUSH
15266: LD_INT 1
15268: PLUS
15269: ST_TO_ADDR
// end ; end_of_file
15270: PPOPN 2
15272: END
// every 0 0$30 trigger cratesStatus = 1 do
15273: LD_EXP 37
15277: PUSH
15278: LD_INT 1
15280: EQUAL
15281: IFFALSE 15345
15283: GO 15285
15285: DISABLE
// begin enable ;
15286: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15287: LD_INT 350
15289: PUSH
15290: LD_INT 1050
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 1
15299: PPUSH
15300: LD_INT 2
15302: PPUSH
15303: CALL_OW 12
15307: ARRAY
15308: PPUSH
15309: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15313: LD_INT 4
15315: PUSH
15316: LD_INT 5
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 1
15325: PPUSH
15326: LD_INT 2
15328: PPUSH
15329: CALL_OW 12
15333: ARRAY
15334: PPUSH
15335: LD_INT 7
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 55
// end ;
15345: END
// every 1 1$0 trigger cratesStatus = 2 do
15346: LD_EXP 37
15350: PUSH
15351: LD_INT 2
15353: EQUAL
15354: IFFALSE 15418
15356: GO 15358
15358: DISABLE
// begin enable ;
15359: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15360: LD_INT 3150
15362: PUSH
15363: LD_INT 4550
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 2
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15386: LD_INT 2
15388: PUSH
15389: LD_INT 5
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 1
15398: PPUSH
15399: LD_INT 2
15401: PPUSH
15402: CALL_OW 12
15406: ARRAY
15407: PPUSH
15408: LD_INT 8
15410: PPUSH
15411: LD_INT 1
15413: PPUSH
15414: CALL_OW 55
// end ;
15418: END
// every 0 0$30 + 0 0$10 do
15419: GO 15421
15421: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15422: LD_INT 4
15424: PUSH
15425: LD_INT 5
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 1
15434: PPUSH
15435: LD_INT 2
15437: PPUSH
15438: CALL_OW 12
15442: ARRAY
15443: PPUSH
15444: LD_INT 8
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 55
// Wait ( 0 0$15 ) ;
15454: LD_INT 525
15456: PPUSH
15457: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15461: LD_INT 4
15463: PUSH
15464: LD_INT 5
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 1
15473: PPUSH
15474: LD_INT 2
15476: PPUSH
15477: CALL_OW 12
15481: ARRAY
15482: PPUSH
15483: LD_INT 8
15485: PPUSH
15486: LD_INT 1
15488: PPUSH
15489: CALL_OW 55
// Wait ( 0 0$20 ) ;
15493: LD_INT 700
15495: PPUSH
15496: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15500: LD_INT 4
15502: PUSH
15503: LD_INT 5
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 1
15512: PPUSH
15513: LD_INT 2
15515: PPUSH
15516: CALL_OW 12
15520: ARRAY
15521: PPUSH
15522: LD_INT 8
15524: PPUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 55
// end ; end_of_file
15532: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15533: LD_EXP 23
15537: PUSH
15538: LD_INT 1
15540: EQUAL
15541: IFFALSE 15832
15543: GO 15545
15545: DISABLE
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
15550: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15551: LD_ADDR_VAR 0 2
15555: PUSH
15556: LD_INT 22
15558: PUSH
15559: LD_INT 1
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 3
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: LD_INT 30
15581: PUSH
15582: LD_INT 0
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 30
15591: PUSH
15592: LD_INT 1
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: LIST
15608: PPUSH
15609: CALL_OW 69
15613: ST_TO_ADDR
// for i in tmp do
15614: LD_ADDR_VAR 0 1
15618: PUSH
15619: LD_VAR 0 2
15623: PUSH
15624: FOR_IN
15625: IFFALSE 15658
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15627: LD_ADDR_VAR 0 3
15631: PUSH
15632: LD_VAR 0 3
15636: PUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 274
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 275
15654: PLUS
15655: ST_TO_ADDR
15656: GO 15624
15658: POP
15659: POP
// strings = [ ] ;
15660: LD_ADDR_EXP 26
15664: PUSH
15665: EMPTY
15666: ST_TO_ADDR
// if tmp = 0 then
15667: LD_VAR 0 2
15671: PUSH
15672: LD_INT 0
15674: EQUAL
15675: IFFALSE 15700
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15677: LD_ADDR_EXP 26
15681: PUSH
15682: LD_EXP 26
15686: PUSH
15687: LD_STRING #Am06-1
15689: PUSH
15690: LD_EXP 24
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: ADD
15699: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15700: LD_VAR 0 2
15704: PUSH
15705: LD_INT 0
15707: GREATER
15708: PUSH
15709: LD_EXP 24
15713: PUSH
15714: LD_VAR 0 3
15718: GREATER
15719: AND
15720: IFFALSE 15751
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15722: LD_ADDR_EXP 26
15726: PUSH
15727: LD_EXP 26
15731: PUSH
15732: LD_STRING #Am06-1
15734: PUSH
15735: LD_EXP 24
15739: PUSH
15740: LD_VAR 0 3
15744: MINUS
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: ADD
15750: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15751: LD_VAR 0 2
15755: PUSH
15756: LD_INT 0
15758: GREATER
15759: PUSH
15760: LD_EXP 24
15764: PUSH
15765: LD_VAR 0 3
15769: LESSEQUAL
15770: AND
15771: IFFALSE 15794
// strings = strings ^ [ #Am06-1 , 0 ] ;
15773: LD_ADDR_EXP 26
15777: PUSH
15778: LD_EXP 26
15782: PUSH
15783: LD_STRING #Am06-1
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: ADD
15793: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15794: LD_ADDR_EXP 25
15798: PUSH
15799: LD_EXP 25
15803: PUSH
15804: LD_INT 35
15806: MINUS
15807: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15808: LD_ADDR_EXP 26
15812: PUSH
15813: LD_EXP 26
15817: PUSH
15818: LD_STRING #Am06-2
15820: PUSH
15821: LD_EXP 25
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: ADD
15830: ST_TO_ADDR
// enable ;
15831: ENABLE
// end ; end_of_file
15832: PPOPN 3
15834: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
15835: LD_INT 0
15837: PPUSH
15838: PPUSH
15839: PPUSH
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
// j = 0 ;
15844: LD_ADDR_VAR 0 3
15848: PUSH
15849: LD_INT 0
15851: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15852: LD_INT 35
15854: PPUSH
15855: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: LD_INT 22
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 21
15876: PUSH
15877: LD_INT 1
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 2
15886: PUSH
15887: LD_INT 25
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 25
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 25
15909: PUSH
15910: LD_INT 3
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 25
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: PPUSH
15939: CALL_OW 69
15943: PUSH
15944: FOR_IN
15945: IFFALSE 16051
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
15947: LD_INT 22
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 21
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 21
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 21
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 59
15992: PUSH
15993: EMPTY
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 91
16005: PUSH
16006: LD_VAR 0 2
16010: PUSH
16011: LD_INT 25
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: LIST
16023: PPUSH
16024: CALL_OW 69
16028: NOT
16029: IFFALSE 16049
// begin tmp = i ;
16031: LD_ADDR_VAR 0 4
16035: PUSH
16036: LD_VAR 0 2
16040: ST_TO_ADDR
// j = 1 ;
16041: LD_ADDR_VAR 0 3
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// end ; end ;
16049: GO 15944
16051: POP
16052: POP
// until j = 1 ;
16053: LD_VAR 0 3
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: IFFALSE 15852
// blockSpawn = 1 ;
16063: LD_ADDR_EXP 28
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// uc_side = 2 ;
16071: LD_ADDR_OWVAR 20
16075: PUSH
16076: LD_INT 2
16078: ST_TO_ADDR
// uc_nation = 2 ;
16079: LD_ADDR_OWVAR 21
16083: PUSH
16084: LD_INT 2
16086: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
16087: LD_ADDR_EXP 18
16091: PUSH
16092: LD_STRING Kurt
16094: PPUSH
16095: LD_INT 0
16097: PPUSH
16098: CALL 4625 0 2
16102: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16103: LD_EXP 18
16107: PPUSH
16108: LD_VAR 0 4
16112: PPUSH
16113: CALL_OW 250
16117: PPUSH
16118: LD_VAR 0 4
16122: PPUSH
16123: CALL_OW 251
16127: PPUSH
16128: LD_INT 5
16130: PPUSH
16131: LD_INT 1
16133: PPUSH
16134: CALL_OW 50
// InGameOn ;
16138: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16142: LD_EXP 18
16146: PPUSH
16147: CALL_OW 87
// wait ( 0 0$2 ) ;
16151: LD_INT 70
16153: PPUSH
16154: CALL_OW 67
// ComExitVehicle ( tmp ) ;
16158: LD_VAR 0 4
16162: PPUSH
16163: CALL_OW 121
// ComExitBuilding ( tmp ) ;
16167: LD_VAR 0 4
16171: PPUSH
16172: CALL_OW 122
// wait ( 0 0$1 ) ;
16176: LD_INT 35
16178: PPUSH
16179: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16183: LD_EXP 18
16187: PPUSH
16188: LD_VAR 0 4
16192: PPUSH
16193: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
16197: LD_VAR 0 4
16201: PPUSH
16202: LD_EXP 18
16206: PPUSH
16207: CALL_OW 119
// DialogueOn ;
16211: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16215: LD_EXP 18
16219: PPUSH
16220: LD_STRING D2-Kurt-1
16222: PPUSH
16223: CALL_OW 88
// if tmp = JMM then
16227: LD_VAR 0 4
16231: PUSH
16232: LD_EXP 1
16236: EQUAL
16237: IFFALSE 16329
// begin Say ( JMM , D2-JMM-1 ) ;
16239: LD_EXP 1
16243: PPUSH
16244: LD_STRING D2-JMM-1
16246: PPUSH
16247: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16251: LD_EXP 18
16255: PPUSH
16256: LD_STRING D2-Kurt-2
16258: PPUSH
16259: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16263: LD_EXP 1
16267: PPUSH
16268: LD_STRING D2-JMM-2
16270: PPUSH
16271: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16275: LD_EXP 18
16279: PPUSH
16280: LD_STRING D2-Kurt-3
16282: PPUSH
16283: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16287: LD_EXP 1
16291: PPUSH
16292: LD_STRING D2-JMM-3
16294: PPUSH
16295: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16299: LD_EXP 18
16303: PPUSH
16304: LD_STRING D2-Kurt-4
16306: PPUSH
16307: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16311: LD_EXP 1
16315: PPUSH
16316: LD_STRING D2-JMM-4
16318: PPUSH
16319: CALL_OW 88
// DialogueOff ;
16323: CALL_OW 7
// end else
16327: GO 16639
// begin if GetSex ( tmp ) = 1 then
16329: LD_VAR 0 4
16333: PPUSH
16334: CALL_OW 258
16338: PUSH
16339: LD_INT 1
16341: EQUAL
16342: IFFALSE 16356
// Say ( tmp , D2-Sol1-1 ) ;
16344: LD_VAR 0 4
16348: PPUSH
16349: LD_STRING D2-Sol1-1
16351: PPUSH
16352: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16356: LD_VAR 0 4
16360: PPUSH
16361: CALL_OW 258
16365: PUSH
16366: LD_INT 2
16368: EQUAL
16369: IFFALSE 16383
// Say ( tmp , D2-FSol1-1 ) ;
16371: LD_VAR 0 4
16375: PPUSH
16376: LD_STRING D2-FSol1-1
16378: PPUSH
16379: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16383: LD_EXP 18
16387: PPUSH
16388: LD_STRING D2-Kurt-2
16390: PPUSH
16391: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16395: LD_VAR 0 4
16399: PPUSH
16400: CALL_OW 258
16404: PUSH
16405: LD_INT 1
16407: EQUAL
16408: IFFALSE 16422
// Say ( tmp , D2-Sol1-2 ) ;
16410: LD_VAR 0 4
16414: PPUSH
16415: LD_STRING D2-Sol1-2
16417: PPUSH
16418: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16422: LD_VAR 0 4
16426: PPUSH
16427: CALL_OW 258
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16449
// Say ( tmp , D2-FSol1-2 ) ;
16437: LD_VAR 0 4
16441: PPUSH
16442: LD_STRING D2-FSol1-2
16444: PPUSH
16445: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16449: LD_EXP 18
16453: PPUSH
16454: LD_STRING D2-Kurt-3
16456: PPUSH
16457: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16461: LD_VAR 0 4
16465: PPUSH
16466: CALL_OW 258
16470: PUSH
16471: LD_INT 1
16473: EQUAL
16474: IFFALSE 16488
// Say ( tmp , D2-Sol1-3 ) ;
16476: LD_VAR 0 4
16480: PPUSH
16481: LD_STRING D2-Sol1-3
16483: PPUSH
16484: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16488: LD_VAR 0 4
16492: PPUSH
16493: CALL_OW 258
16497: PUSH
16498: LD_INT 2
16500: EQUAL
16501: IFFALSE 16515
// Say ( tmp , D2-FSol1-3 ) ;
16503: LD_VAR 0 4
16507: PPUSH
16508: LD_STRING D2-FSol1-3
16510: PPUSH
16511: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16515: LD_EXP 18
16519: PPUSH
16520: LD_STRING D2-Kurt-4
16522: PPUSH
16523: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16527: LD_VAR 0 4
16531: PPUSH
16532: CALL_OW 258
16536: PUSH
16537: LD_INT 1
16539: EQUAL
16540: IFFALSE 16554
// Say ( tmp , D2-Sol1-4 ) ;
16542: LD_VAR 0 4
16546: PPUSH
16547: LD_STRING D2-Sol1-4
16549: PPUSH
16550: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16554: LD_VAR 0 4
16558: PPUSH
16559: CALL_OW 258
16563: PUSH
16564: LD_INT 2
16566: EQUAL
16567: IFFALSE 16581
// Say ( tmp , D2-FSol1-4 ) ;
16569: LD_VAR 0 4
16573: PPUSH
16574: LD_STRING D2-FSol1-4
16576: PPUSH
16577: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16581: LD_VAR 0 4
16585: PPUSH
16586: CALL_OW 258
16590: PUSH
16591: LD_INT 1
16593: EQUAL
16594: IFFALSE 16608
// Say ( tmp , D2-Sol1-5 ) ;
16596: LD_VAR 0 4
16600: PPUSH
16601: LD_STRING D2-Sol1-5
16603: PPUSH
16604: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16608: LD_VAR 0 4
16612: PPUSH
16613: CALL_OW 258
16617: PUSH
16618: LD_INT 2
16620: EQUAL
16621: IFFALSE 16635
// Say ( tmp , D2-FSol1-5 ) ;
16623: LD_VAR 0 4
16627: PPUSH
16628: LD_STRING D2-FSol1-5
16630: PPUSH
16631: CALL_OW 88
// DialogueOff ;
16635: CALL_OW 7
// end ; dec = ShowQuery1 ;
16639: LD_ADDR_VAR 0 6
16643: PUSH
16644: CALL 5227 0 0
16648: ST_TO_ADDR
// if dec = 1 then
16649: LD_VAR 0 6
16653: PUSH
16654: LD_INT 1
16656: EQUAL
16657: IFFALSE 16699
// begin DialogueOn ;
16659: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16663: LD_EXP 18
16667: PPUSH
16668: LD_STRING D2a-Kurt-1
16670: PPUSH
16671: CALL_OW 88
// DialogueOff ;
16675: CALL_OW 7
// InGameOff ;
16679: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: LD_INT 2
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 80
// end ; if dec = 2 then
16699: LD_VAR 0 6
16703: PUSH
16704: LD_INT 2
16706: EQUAL
16707: IFFALSE 17195
// begin DialogueOn ;
16709: CALL_OW 6
// if tmp = JMM then
16713: LD_VAR 0 4
16717: PUSH
16718: LD_EXP 1
16722: EQUAL
16723: IFFALSE 16779
// begin Say ( JMM , D2b-JMM-1 ) ;
16725: LD_EXP 1
16729: PPUSH
16730: LD_STRING D2b-JMM-1
16732: PPUSH
16733: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16737: LD_EXP 18
16741: PPUSH
16742: LD_STRING D2b-Kurt-1
16744: PPUSH
16745: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16749: LD_EXP 1
16753: PPUSH
16754: LD_STRING D2b-JMM-2
16756: PPUSH
16757: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16761: LD_EXP 18
16765: PPUSH
16766: LD_STRING D2b-Kurt-2
16768: PPUSH
16769: CALL_OW 88
// DialogueOff ;
16773: CALL_OW 7
// end else
16777: GO 16969
// begin if GetSex ( tmp ) = 1 then
16779: LD_VAR 0 4
16783: PPUSH
16784: CALL_OW 258
16788: PUSH
16789: LD_INT 1
16791: EQUAL
16792: IFFALSE 16806
// Say ( tmp , D2b-Sol1-1 ) ;
16794: LD_VAR 0 4
16798: PPUSH
16799: LD_STRING D2b-Sol1-1
16801: PPUSH
16802: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16806: LD_VAR 0 4
16810: PPUSH
16811: CALL_OW 258
16815: PUSH
16816: LD_INT 2
16818: EQUAL
16819: IFFALSE 16833
// Say ( tmp , D2b-FSol1-1 ) ;
16821: LD_VAR 0 4
16825: PPUSH
16826: LD_STRING D2b-FSol1-1
16828: PPUSH
16829: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16833: LD_EXP 18
16837: PPUSH
16838: LD_STRING D2b-Kurt-1
16840: PPUSH
16841: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16845: LD_VAR 0 4
16849: PPUSH
16850: CALL_OW 258
16854: PUSH
16855: LD_INT 1
16857: EQUAL
16858: IFFALSE 16872
// Say ( tmp , D2b-Sol1-2 ) ;
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_STRING D2b-Sol1-2
16867: PPUSH
16868: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16872: LD_VAR 0 4
16876: PPUSH
16877: CALL_OW 258
16881: PUSH
16882: LD_INT 2
16884: EQUAL
16885: IFFALSE 16899
// Say ( tmp , D2b-FSol1-2 ) ;
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_STRING D2b-FSol1-2
16894: PPUSH
16895: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16899: LD_EXP 18
16903: PPUSH
16904: LD_STRING D2b-Kurt-2
16906: PPUSH
16907: CALL_OW 88
// if GetSex ( tmp ) = 1 then
16911: LD_VAR 0 4
16915: PPUSH
16916: CALL_OW 258
16920: PUSH
16921: LD_INT 1
16923: EQUAL
16924: IFFALSE 16938
// Say ( tmp , D2c-Sol1-2 ) ;
16926: LD_VAR 0 4
16930: PPUSH
16931: LD_STRING D2c-Sol1-2
16933: PPUSH
16934: CALL_OW 88
// if GetSex ( tmp ) = 2 then
16938: LD_VAR 0 4
16942: PPUSH
16943: CALL_OW 258
16947: PUSH
16948: LD_INT 2
16950: EQUAL
16951: IFFALSE 16965
// Say ( tmp , D2c-FSol1-2 ) ;
16953: LD_VAR 0 4
16957: PPUSH
16958: LD_STRING D2c-FSol1-2
16960: PPUSH
16961: CALL_OW 88
// DialogueOff ;
16965: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16969: LD_ADDR_VAR 0 7
16973: PUSH
16974: CALL 5301 0 0
16978: ST_TO_ADDR
// if dec2 = 1 then
16979: LD_VAR 0 7
16983: PUSH
16984: LD_INT 1
16986: EQUAL
16987: IFFALSE 17025
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16989: LD_EXP 18
16993: PPUSH
16994: LD_STRING D2a-Kurt-1
16996: PPUSH
16997: CALL_OW 88
// DialogueOff ;
17001: CALL_OW 7
// InGameOff ;
17005: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17009: LD_INT 1
17011: PPUSH
17012: LD_INT 2
17014: PPUSH
17015: LD_INT 2
17017: PPUSH
17018: LD_INT 1
17020: PPUSH
17021: CALL_OW 80
// end ; if dec2 = 2 then
17025: LD_VAR 0 7
17029: PUSH
17030: LD_INT 2
17032: EQUAL
17033: IFFALSE 17195
// begin if tmp = JMM then
17035: LD_VAR 0 4
17039: PUSH
17040: LD_EXP 1
17044: EQUAL
17045: IFFALSE 17101
// begin Say ( JMM , D2c-JMM-1 ) ;
17047: LD_EXP 1
17051: PPUSH
17052: LD_STRING D2c-JMM-1
17054: PPUSH
17055: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17059: LD_EXP 18
17063: PPUSH
17064: LD_STRING D2c-Kurt-1
17066: PPUSH
17067: CALL_OW 88
// DialogueOff ;
17071: CALL_OW 7
// InGameOff ;
17075: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17079: LD_EXP 18
17083: PPUSH
17084: LD_INT 9
17086: PPUSH
17087: CALL_OW 113
// readyToEscape = 1 ;
17091: LD_ADDR_EXP 20
17095: PUSH
17096: LD_INT 1
17098: ST_TO_ADDR
// end else
17099: GO 17195
// begin if GetSex ( tmp ) = 1 then
17101: LD_VAR 0 4
17105: PPUSH
17106: CALL_OW 258
17110: PUSH
17111: LD_INT 1
17113: EQUAL
17114: IFFALSE 17128
// Say ( tmp , D2c-Sol1-1 ) ;
17116: LD_VAR 0 4
17120: PPUSH
17121: LD_STRING D2c-Sol1-1
17123: PPUSH
17124: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17128: LD_VAR 0 4
17132: PPUSH
17133: CALL_OW 258
17137: PUSH
17138: LD_INT 2
17140: EQUAL
17141: IFFALSE 17155
// Say ( tmp , D2c-FSol1-1 ) ;
17143: LD_VAR 0 4
17147: PPUSH
17148: LD_STRING D2c-FSol1-1
17150: PPUSH
17151: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17155: LD_EXP 18
17159: PPUSH
17160: LD_STRING D2c-Kurt-1
17162: PPUSH
17163: CALL_OW 88
// DialogueOff ;
17167: CALL_OW 7
// InGameOff ;
17171: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17175: LD_EXP 18
17179: PPUSH
17180: LD_INT 9
17182: PPUSH
17183: CALL_OW 113
// readyToEscape = 1 ;
17187: LD_ADDR_EXP 20
17191: PUSH
17192: LD_INT 1
17194: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17195: LD_VAR 0 6
17199: PUSH
17200: LD_INT 3
17202: EQUAL
17203: IFFALSE 17369
// begin DialogueOn ;
17205: CALL_OW 6
// if tmp = JMM then
17209: LD_VAR 0 4
17213: PUSH
17214: LD_EXP 1
17218: EQUAL
17219: IFFALSE 17275
// begin Say ( JMM , D2c-JMM-1 ) ;
17221: LD_EXP 1
17225: PPUSH
17226: LD_STRING D2c-JMM-1
17228: PPUSH
17229: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17233: LD_EXP 18
17237: PPUSH
17238: LD_STRING D2c-Kurt-1
17240: PPUSH
17241: CALL_OW 88
// DialogueOff ;
17245: CALL_OW 7
// InGameOff ;
17249: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17253: LD_EXP 18
17257: PPUSH
17258: LD_INT 9
17260: PPUSH
17261: CALL_OW 113
// readyToEscape = 1 ;
17265: LD_ADDR_EXP 20
17269: PUSH
17270: LD_INT 1
17272: ST_TO_ADDR
// end else
17273: GO 17369
// begin if GetSex ( tmp ) = 1 then
17275: LD_VAR 0 4
17279: PPUSH
17280: CALL_OW 258
17284: PUSH
17285: LD_INT 1
17287: EQUAL
17288: IFFALSE 17302
// Say ( tmp , D2c-Sol1-1 ) ;
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_STRING D2c-Sol1-1
17297: PPUSH
17298: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17302: LD_VAR 0 4
17306: PPUSH
17307: CALL_OW 258
17311: PUSH
17312: LD_INT 2
17314: EQUAL
17315: IFFALSE 17329
// Say ( tmp , D2c-FSol1-1 ) ;
17317: LD_VAR 0 4
17321: PPUSH
17322: LD_STRING D2c-FSol1-1
17324: PPUSH
17325: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17329: LD_EXP 18
17333: PPUSH
17334: LD_STRING D2c-Kurt-1
17336: PPUSH
17337: CALL_OW 88
// DialogueOff ;
17341: CALL_OW 7
// InGameOff ;
17345: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17349: LD_EXP 18
17353: PPUSH
17354: LD_INT 9
17356: PPUSH
17357: CALL_OW 113
// readyToEscape = 1 ;
17361: LD_ADDR_EXP 20
17365: PUSH
17366: LD_INT 1
17368: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
17369: LD_ADDR_EXP 28
17373: PUSH
17374: LD_INT 0
17376: ST_TO_ADDR
// end ; end_of_file
17377: LD_VAR 0 1
17381: RET
// every 0 0$1 do
17382: GO 17384
17384: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17385: LD_INT 3
17387: PPUSH
17388: LD_INT 32
17390: PPUSH
17391: LD_INT 3
17393: PPUSH
17394: CALL 5356 0 3
17398: END
// every 0 0$1 do
17399: GO 17401
17401: DISABLE
// begin enable ;
17402: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17403: LD_INT 3
17405: PPUSH
17406: LD_INT 2
17408: PPUSH
17409: CALL 5441 0 2
// if disableHealAI = 0 then
17413: LD_EXP 32
17417: PUSH
17418: LD_INT 0
17420: EQUAL
17421: IFFALSE 17439
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17423: LD_INT 3
17425: PPUSH
17426: LD_INT 10
17428: PPUSH
17429: LD_INT 11
17431: PPUSH
17432: LD_INT 32
17434: PPUSH
17435: CALL 5700 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17439: LD_INT 3
17441: PPUSH
17442: LD_INT 51
17444: PPUSH
17445: LD_INT 7
17447: PPUSH
17448: CALL 7111 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
17452: LD_INT 3
17454: PPUSH
17455: LD_INT 14
17457: PPUSH
17458: LD_INT 121
17460: PPUSH
17461: LD_INT 100
17463: PPUSH
17464: CALL 6453 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
17468: LD_INT 3
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: CALL 6078 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17478: LD_INT 3
17480: PPUSH
17481: LD_EXP 30
17485: PPUSH
17486: CALL 7254 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17490: LD_INT 3
17492: PPUSH
17493: LD_INT 8
17495: PUSH
17496: LD_INT 67
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: CALL_OW 12
17513: ARRAY
17514: PPUSH
17515: LD_INT 11
17517: PPUSH
17518: CALL 7460 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17522: LD_INT 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL 7817 0 2
// end ;
17532: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
17533: LD_INT 22
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 21
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 55
17555: PUSH
17556: EMPTY
17557: LIST
17558: PUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 34
17564: PUSH
17565: LD_INT 51
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 69
17586: PUSH
17587: LD_INT 0
17589: EQUAL
17590: PUSH
17591: LD_INT 21
17593: PPUSH
17594: CALL_OW 255
17598: PUSH
17599: LD_INT 3
17601: EQUAL
17602: AND
17603: PUSH
17604: LD_INT 21
17606: PPUSH
17607: CALL_OW 302
17611: AND
17612: PUSH
17613: LD_INT 2
17615: PPUSH
17616: CALL_OW 255
17620: PUSH
17621: LD_INT 3
17623: EQUAL
17624: AND
17625: PUSH
17626: LD_INT 2
17628: PPUSH
17629: CALL_OW 302
17633: AND
17634: IFFALSE 17783
17636: GO 17638
17638: DISABLE
// begin enable ;
17639: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17640: LD_INT 2
17642: PPUSH
17643: CALL_OW 274
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 1000
17653: PPUSH
17654: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 5 ] [ Difficulty ] , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17658: LD_INT 3
17660: PPUSH
17661: LD_INT 21
17663: PPUSH
17664: LD_INT 5
17666: PUSH
17667: LD_INT 6
17669: PUSH
17670: LD_INT 5
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: PUSH
17678: LD_OWVAR 67
17682: ARRAY
17683: PPUSH
17684: LD_INT 43
17686: PUSH
17687: LD_INT 43
17689: PUSH
17690: LD_INT 43
17692: PUSH
17693: LD_INT 44
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 44
17704: PUSH
17705: LD_INT 44
17707: PUSH
17708: LD_INT 44
17710: PUSH
17711: LD_INT 43
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 44
17722: PUSH
17723: LD_INT 44
17725: PUSH
17726: LD_INT 44
17728: PUSH
17729: LD_INT 44
17731: PUSH
17732: LD_INT 46
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: LD_OWVAR 67
17751: ARRAY
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 22
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_INT 24
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: PUSH
17773: LD_OWVAR 67
17777: ARRAY
17778: PPUSH
17779: CALL 5966 0 7
// end ;
17783: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
17784: LD_INT 17
17786: PPUSH
17787: CALL_OW 255
17791: PUSH
17792: LD_INT 3
17794: EQUAL
17795: PUSH
17796: LD_INT 17
17798: PPUSH
17799: CALL_OW 302
17803: AND
17804: PUSH
17805: LD_INT 2
17807: PPUSH
17808: CALL_OW 255
17812: PUSH
17813: LD_INT 3
17815: EQUAL
17816: AND
17817: PUSH
17818: LD_INT 2
17820: PPUSH
17821: CALL_OW 302
17825: AND
17826: IFFALSE 17893
17828: GO 17830
17830: DISABLE
// begin enable ;
17831: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17832: LD_INT 17
17834: PPUSH
17835: LD_INT 22
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 42
17846: PUSH
17847: LD_INT 43
17849: PUSH
17850: LD_INT 44
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PPUSH
17861: LD_INT 3
17863: PPUSH
17864: CALL_OW 12
17868: ARRAY
17869: PPUSH
17870: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17874: LD_INT 17
17876: PPUSH
17877: LD_INT 22
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 51
17888: PPUSH
17889: CALL_OW 185
// end ;
17893: END
// every 2 2$0 do var i , j ;
17894: GO 17896
17896: DISABLE
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17901: LD_INT 14700
17903: PUSH
17904: LD_INT 33600
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: PPUSH
17914: LD_INT 2
17916: PPUSH
17917: CALL_OW 12
17921: ARRAY
17922: PPUSH
17923: CALL_OW 67
// disableHealAI = 1 ;
17927: LD_ADDR_EXP 32
17931: PUSH
17932: LD_INT 1
17934: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17935: LD_ADDR_VAR 0 1
17939: PUSH
17940: LD_INT 22
17942: PUSH
17943: LD_INT 3
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 25
17952: PUSH
17953: LD_INT 4
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: PUSH
17969: FOR_IN
17970: IFFALSE 17983
// ComExitBuilding ( i ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: CALL_OW 122
17981: GO 17969
17983: POP
17984: POP
// wait ( 0 0$1 ) ;
17985: LD_INT 35
17987: PPUSH
17988: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17992: LD_INT 35
17994: PPUSH
17995: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17999: LD_ADDR_VAR 0 1
18003: PUSH
18004: LD_INT 22
18006: PUSH
18007: LD_INT 3
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 25
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: PUSH
18033: FOR_IN
18034: IFFALSE 18111
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18036: LD_ADDR_VAR 0 2
18040: PUSH
18041: LD_INT 19
18043: PPUSH
18044: LD_INT 22
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 25
18056: PUSH
18057: LD_INT 12
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 70
18072: PUSH
18073: FOR_IN
18074: IFFALSE 18107
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_VAR 0 2
18085: PPUSH
18086: CALL_OW 250
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 251
18100: PPUSH
18101: CALL_OW 191
// end ;
18105: GO 18073
18107: POP
18108: POP
// end ;
18109: GO 18033
18111: POP
18112: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18113: LD_INT 22
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 25
18125: PUSH
18126: LD_INT 4
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PUSH
18142: LD_INT 0
18144: EQUAL
18145: PUSH
18146: LD_EXP 31
18150: PUSH
18151: LD_INT 6
18153: PUSH
18154: LD_INT 7
18156: PUSH
18157: LD_INT 8
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: PUSH
18165: LD_OWVAR 67
18169: ARRAY
18170: GREATEREQUAL
18171: OR
18172: PUSH
18173: LD_INT 19
18175: PPUSH
18176: LD_INT 22
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 25
18188: PUSH
18189: LD_INT 12
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PPUSH
18200: CALL_OW 70
18204: PUSH
18205: LD_INT 0
18207: EQUAL
18208: OR
18209: IFFALSE 17992
// disableHealAI = 0 ;
18211: LD_ADDR_EXP 32
18215: PUSH
18216: LD_INT 0
18218: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18219: LD_ADDR_VAR 0 1
18223: PUSH
18224: LD_INT 22
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 25
18236: PUSH
18237: LD_INT 12
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PUSH
18253: FOR_IN
18254: IFFALSE 18270
// SetClass ( i , 16 ) ;
18256: LD_VAR 0 1
18260: PPUSH
18261: LD_INT 16
18263: PPUSH
18264: CALL_OW 336
18268: GO 18253
18270: POP
18271: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18272: LD_ADDR_VAR 0 1
18276: PUSH
18277: LD_INT 22
18279: PUSH
18280: LD_INT 3
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 25
18289: PUSH
18290: LD_INT 4
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 69
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18326
// ComMoveXY ( i , 113 , 94 ) ;
18309: LD_VAR 0 1
18313: PPUSH
18314: LD_INT 113
18316: PPUSH
18317: LD_INT 94
18319: PPUSH
18320: CALL_OW 111
18324: GO 18306
18326: POP
18327: POP
// end ;
18328: PPOPN 2
18330: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18331: LD_INT 21
18333: PPUSH
18334: CALL_OW 255
18338: PUSH
18339: LD_INT 3
18341: EQUAL
18342: PUSH
18343: LD_INT 21
18345: PPUSH
18346: CALL_OW 302
18350: AND
18351: PUSH
18352: LD_INT 22
18354: PUSH
18355: LD_INT 3
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 51
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PPUSH
18376: CALL_OW 69
18380: PUSH
18381: LD_INT 0
18383: EQUAL
18384: AND
18385: IFFALSE 18417
18387: GO 18389
18389: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18390: LD_INT 21
18392: PPUSH
18393: LD_INT 23
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: LD_INT 51
18404: PPUSH
18405: CALL_OW 185
// wait ( 5 5$0 ) ;
18409: LD_INT 10500
18411: PPUSH
18412: CALL_OW 67
// enable ;
18416: ENABLE
// end ; end_of_file
18417: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18418: LD_EXP 25
18422: PUSH
18423: LD_INT 0
18425: LESSEQUAL
18426: IFFALSE 18575
18428: GO 18430
18430: DISABLE
18431: LD_INT 0
18433: PPUSH
18434: PPUSH
18435: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 21
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: LD_INT 30
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 30
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: PPUSH
18494: CALL_OW 69
18498: ST_TO_ADDR
// for i in tmp do
18499: LD_ADDR_VAR 0 1
18503: PUSH
18504: LD_VAR 0 2
18508: PUSH
18509: FOR_IN
18510: IFFALSE 18543
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18512: LD_ADDR_VAR 0 3
18516: PUSH
18517: LD_VAR 0 3
18521: PUSH
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 274
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 275
18539: PLUS
18540: ST_TO_ADDR
18541: GO 18509
18543: POP
18544: POP
// if yourCrates >= needCrates then
18545: LD_VAR 0 3
18549: PUSH
18550: LD_EXP 24
18554: GREATEREQUAL
18555: IFFALSE 18568
// begin FinishMission ( yourCrates ) ;
18557: LD_VAR 0 3
18561: PPUSH
18562: CALL 18578 0 1
// end else
18566: GO 18575
// begin YouLost ( matmin ) ;
18568: LD_STRING matmin
18570: PPUSH
18571: CALL_OW 104
// end ; end ;
18575: PPOPN 3
18577: END
// export function FinishMission ( crates ) ; begin
18578: LD_INT 0
18580: PPUSH
// if crates + 100 > crates then
18581: LD_VAR 0 1
18585: PUSH
18586: LD_INT 100
18588: PLUS
18589: PUSH
18590: LD_VAR 0 1
18594: GREATER
18595: IFFALSE 18619
// begin AddMedal ( cans , 1 ) ;
18597: LD_STRING cans
18599: PPUSH
18600: LD_INT 1
18602: PPUSH
18603: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18607: LD_INT 1
18609: PPUSH
18610: LD_STRING 06_crates_1
18612: PPUSH
18613: CALL_OW 39
// end else
18617: GO 18640
// begin AddMedal ( cans , - 1 ) ;
18619: LD_STRING cans
18621: PPUSH
18622: LD_INT 1
18624: NEG
18625: PPUSH
18626: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18630: LD_INT 0
18632: PPUSH
18633: LD_STRING 06_crates_1
18635: PPUSH
18636: CALL_OW 39
// end ; if unitLost < 2 then
18640: LD_EXP 29
18644: PUSH
18645: LD_INT 2
18647: LESS
18648: IFFALSE 18662
// begin AddMedal ( people , 1 ) ;
18650: LD_STRING people
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 101
// end else
18660: GO 18673
// begin AddMedal ( people , - 1 ) ;
18662: LD_STRING people
18664: PPUSH
18665: LD_INT 1
18667: NEG
18668: PPUSH
18669: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18673: LD_EXP 27
18677: PPUSH
18678: LD_STRING 06_remoteVehs_1
18680: PPUSH
18681: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18685: LD_EXP 27
18689: PUSH
18690: LD_INT 1
18692: EQUAL
18693: IFFALSE 18707
// begin AddMedal ( remote , 1 ) ;
18695: LD_STRING remote
18697: PPUSH
18698: LD_INT 1
18700: PPUSH
18701: CALL_OW 101
// end else
18705: GO 18747
// begin if GetTech ( 18 , 1 ) = state_enabled then
18707: LD_INT 18
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 321
18717: PUSH
18718: LD_INT 1
18720: EQUAL
18721: IFFALSE 18736
// begin AddMedal ( remote , - 1 ) ;
18723: LD_STRING remote
18725: PPUSH
18726: LD_INT 1
18728: NEG
18729: PPUSH
18730: CALL_OW 101
// end else
18734: GO 18747
// begin AddMedal ( remote , - 2 ) ;
18736: LD_STRING remote
18738: PPUSH
18739: LD_INT 2
18741: NEG
18742: PPUSH
18743: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18747: LD_EXP 19
18751: PPUSH
18752: LD_STRING 06_KurtStatus_1
18754: PPUSH
18755: CALL_OW 39
// GiveMedals ( Main ) ;
18759: LD_STRING Main
18761: PPUSH
18762: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18766: LD_INT 50
18768: PUSH
18769: EMPTY
18770: LIST
18771: PUSH
18772: LD_INT 22
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 21
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: LD_INT 25
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 25
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 25
18817: PUSH
18818: LD_INT 3
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 25
18827: PUSH
18828: LD_INT 4
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 69
18852: PPUSH
18853: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18857: LD_EXP 1
18861: PPUSH
18862: LD_EXP 40
18866: PUSH
18867: LD_STRING JMM
18869: STR
18870: PPUSH
18871: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18875: LD_EXP 2
18879: PPUSH
18880: LD_EXP 40
18884: PUSH
18885: LD_STRING Lisa
18887: STR
18888: PPUSH
18889: CALL 4844 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18893: LD_EXP 3
18897: PPUSH
18898: LD_EXP 40
18902: PUSH
18903: LD_STRING Bobby
18905: STR
18906: PPUSH
18907: CALL 4844 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18911: LD_EXP 4
18915: PPUSH
18916: LD_EXP 40
18920: PUSH
18921: LD_STRING Cyrus
18923: STR
18924: PPUSH
18925: CALL 4844 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18929: LD_EXP 5
18933: PPUSH
18934: LD_EXP 40
18938: PUSH
18939: LD_STRING Frank
18941: STR
18942: PPUSH
18943: CALL 4844 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18947: LD_EXP 6
18951: PPUSH
18952: LD_EXP 40
18956: PUSH
18957: LD_STRING Brown
18959: STR
18960: PPUSH
18961: CALL 4844 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18965: LD_EXP 7
18969: PPUSH
18970: LD_EXP 40
18974: PUSH
18975: LD_STRING Donaldson
18977: STR
18978: PPUSH
18979: CALL 4844 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18983: LD_EXP 8
18987: PPUSH
18988: LD_EXP 40
18992: PUSH
18993: LD_STRING Gladstone
18995: STR
18996: PPUSH
18997: CALL 4844 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19001: LD_EXP 9
19005: PPUSH
19006: LD_EXP 40
19010: PUSH
19011: LD_STRING Denis
19013: STR
19014: PPUSH
19015: CALL 4844 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19019: LD_EXP 14
19023: PPUSH
19024: LD_EXP 40
19028: PUSH
19029: LD_STRING Joan
19031: STR
19032: PPUSH
19033: CALL 4844 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
19037: LD_EXP 15
19041: PPUSH
19042: LD_STRING 06_JoanStatus_1
19044: PPUSH
19045: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19049: LD_INT 50
19051: PUSH
19052: EMPTY
19053: LIST
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: LD_INT 25
19080: PUSH
19081: LD_INT 1
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 25
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 25
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 25
19110: PUSH
19111: LD_INT 4
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: PUSH
19136: LD_EXP 1
19140: PUSH
19141: LD_EXP 2
19145: PUSH
19146: LD_EXP 3
19150: PUSH
19151: LD_EXP 4
19155: PUSH
19156: LD_EXP 5
19160: PUSH
19161: LD_EXP 6
19165: PUSH
19166: LD_EXP 7
19170: PUSH
19171: LD_EXP 8
19175: PUSH
19176: LD_EXP 9
19180: PUSH
19181: LD_EXP 14
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: DIFF
19198: PPUSH
19199: LD_STRING 06_other_survivors
19201: PPUSH
19202: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19206: LD_INT 50
19208: PUSH
19209: EMPTY
19210: LIST
19211: PUSH
19212: LD_INT 22
19214: PUSH
19215: LD_INT 1
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 21
19224: PUSH
19225: LD_INT 1
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: LD_INT 25
19237: PUSH
19238: LD_INT 12
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 25
19247: PUSH
19248: LD_INT 16
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PPUSH
19266: CALL_OW 69
19270: PPUSH
19271: LD_STRING 06_other_apemans
19273: PPUSH
19274: CALL_OW 38
// YouWin ;
19278: CALL_OW 103
// end ; end_of_file
19282: LD_VAR 0 2
19286: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
19287: LD_EXP 38
19291: PUSH
19292: LD_INT 5
19294: PUSH
19295: LD_INT 4
19297: PUSH
19298: LD_INT 3
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: PUSH
19306: LD_OWVAR 67
19310: ARRAY
19311: EQUAL
19312: IFFALSE 19427
19314: GO 19316
19316: DISABLE
// begin enable ;
19317: ENABLE
// sendedConvoys = 0 ;
19318: LD_ADDR_EXP 38
19322: PUSH
19323: LD_INT 0
19325: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 7 ) , rand ( 4 , 10 ) , rand ( 6 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19326: LD_INT 6
19328: PPUSH
19329: LD_INT 3
19331: PPUSH
19332: LD_INT 3
19334: PPUSH
19335: LD_INT 7
19337: PPUSH
19338: CALL_OW 12
19342: PUSH
19343: LD_INT 4
19345: PPUSH
19346: LD_INT 10
19348: PPUSH
19349: CALL_OW 12
19353: PUSH
19354: LD_INT 6
19356: PPUSH
19357: LD_INT 12
19359: PPUSH
19360: CALL_OW 12
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: LD_OWVAR 67
19374: ARRAY
19375: PPUSH
19376: LD_INT 0
19378: PPUSH
19379: LD_INT 0
19381: PPUSH
19382: LD_INT 0
19384: PPUSH
19385: LD_INT 3
19387: PPUSH
19388: LD_EXP 33
19392: PPUSH
19393: LD_EXP 34
19397: PPUSH
19398: CALL_OW 12
19402: PPUSH
19403: LD_INT 18
19405: PPUSH
19406: LD_INT 17
19408: PPUSH
19409: LD_INT 1
19411: PPUSH
19412: LD_INT 1
19414: PPUSH
19415: LD_INT 2
19417: PPUSH
19418: CALL_OW 12
19422: PPUSH
19423: CALL 8047 0 12
// end ; end_of_file
19427: END
// export function PrepareNature ; var i , un ; begin
19428: LD_INT 0
19430: PPUSH
19431: PPUSH
19432: PPUSH
// for i = 1 to Difficulty + 2 do
19433: LD_ADDR_VAR 0 2
19437: PUSH
19438: DOUBLE
19439: LD_INT 1
19441: DEC
19442: ST_TO_ADDR
19443: LD_OWVAR 67
19447: PUSH
19448: LD_INT 2
19450: PLUS
19451: PUSH
19452: FOR_TO
19453: IFFALSE 19562
// begin hc_sex = sex_male ;
19455: LD_ADDR_OWVAR 27
19459: PUSH
19460: LD_INT 1
19462: ST_TO_ADDR
// uc_side = 0 ;
19463: LD_ADDR_OWVAR 20
19467: PUSH
19468: LD_INT 0
19470: ST_TO_ADDR
// uc_nation = nation_nature ;
19471: LD_ADDR_OWVAR 21
19475: PUSH
19476: LD_INT 0
19478: ST_TO_ADDR
// hc_class = class_tiger ;
19479: LD_ADDR_OWVAR 28
19483: PUSH
19484: LD_INT 14
19486: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19487: LD_ADDR_OWVAR 31
19491: PUSH
19492: LD_EXP 34
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: LD_INT 0
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19512: LD_ADDR_OWVAR 35
19516: PUSH
19517: LD_INT 5
19519: NEG
19520: PPUSH
19521: LD_INT 5
19523: PPUSH
19524: CALL_OW 12
19528: PUSH
19529: LD_OWVAR 67
19533: MUL
19534: ST_TO_ADDR
// un = CreateHuman ;
19535: LD_ADDR_VAR 0 3
19539: PUSH
19540: CALL_OW 44
19544: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19545: LD_VAR 0 3
19549: PPUSH
19550: LD_INT 20
19552: PPUSH
19553: LD_INT 0
19555: PPUSH
19556: CALL_OW 49
// end ;
19560: GO 19452
19562: POP
19563: POP
// for i = 1 to rand ( 3 , 4 ) do
19564: LD_ADDR_VAR 0 2
19568: PUSH
19569: DOUBLE
19570: LD_INT 1
19572: DEC
19573: ST_TO_ADDR
19574: LD_INT 3
19576: PPUSH
19577: LD_INT 4
19579: PPUSH
19580: CALL_OW 12
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19680
// begin hc_sex = sex_male ;
19588: LD_ADDR_OWVAR 27
19592: PUSH
19593: LD_INT 1
19595: ST_TO_ADDR
// uc_side = 0 ;
19596: LD_ADDR_OWVAR 20
19600: PUSH
19601: LD_INT 0
19603: ST_TO_ADDR
// uc_nation = nation_nature ;
19604: LD_ADDR_OWVAR 21
19608: PUSH
19609: LD_INT 0
19611: ST_TO_ADDR
// hc_class = 18 ;
19612: LD_ADDR_OWVAR 28
19616: PUSH
19617: LD_INT 18
19619: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19620: LD_ADDR_OWVAR 31
19624: PUSH
19625: LD_EXP 34
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 0
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: ST_TO_ADDR
// hc_agressivity = 0 ;
19645: LD_ADDR_OWVAR 35
19649: PUSH
19650: LD_INT 0
19652: ST_TO_ADDR
// un = CreateHuman ;
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: CALL_OW 44
19662: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19663: LD_VAR 0 3
19667: PPUSH
19668: LD_INT 20
19670: PPUSH
19671: LD_INT 0
19673: PPUSH
19674: CALL_OW 49
// end ;
19678: GO 19585
19680: POP
19681: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
19682: LD_ADDR_VAR 0 2
19686: PUSH
19687: DOUBLE
19688: LD_INT 1
19690: DEC
19691: ST_TO_ADDR
19692: LD_INT 1
19694: PPUSH
19695: LD_INT 3
19697: PPUSH
19698: CALL_OW 12
19702: PUSH
19703: LD_OWVAR 67
19707: PLUS
19708: PUSH
19709: FOR_TO
19710: IFFALSE 19891
// begin hc_sex = sex_male ;
19712: LD_ADDR_OWVAR 27
19716: PUSH
19717: LD_INT 1
19719: ST_TO_ADDR
// uc_side = 0 ;
19720: LD_ADDR_OWVAR 20
19724: PUSH
19725: LD_INT 0
19727: ST_TO_ADDR
// uc_nation = nation_nature ;
19728: LD_ADDR_OWVAR 21
19732: PUSH
19733: LD_INT 0
19735: ST_TO_ADDR
// hc_class = class_apeman ;
19736: LD_ADDR_OWVAR 28
19740: PUSH
19741: LD_INT 12
19743: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
19744: LD_ADDR_OWVAR 31
19748: PUSH
19749: LD_EXP 33
19753: PPUSH
19754: LD_EXP 34
19758: PPUSH
19759: CALL_OW 12
19763: PUSH
19764: LD_EXP 33
19768: PPUSH
19769: LD_EXP 34
19773: PPUSH
19774: CALL_OW 12
19778: PUSH
19779: LD_EXP 33
19783: PPUSH
19784: LD_EXP 34
19788: PPUSH
19789: CALL_OW 12
19793: PUSH
19794: LD_EXP 33
19798: PPUSH
19799: LD_EXP 34
19803: PPUSH
19804: CALL_OW 12
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
19815: LD_ADDR_OWVAR 35
19819: PUSH
19820: LD_INT 20
19822: PPUSH
19823: LD_INT 30
19825: PPUSH
19826: CALL_OW 12
19830: PUSH
19831: LD_INT 30
19833: PPUSH
19834: LD_INT 40
19836: PPUSH
19837: CALL_OW 12
19841: PUSH
19842: LD_INT 40
19844: PPUSH
19845: LD_INT 50
19847: PPUSH
19848: CALL_OW 12
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: PUSH
19858: LD_OWVAR 67
19862: ARRAY
19863: ST_TO_ADDR
// un = CreateHuman ;
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: CALL_OW 44
19873: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19874: LD_VAR 0 3
19878: PPUSH
19879: LD_INT 21
19881: PPUSH
19882: LD_INT 0
19884: PPUSH
19885: CALL_OW 49
// end ;
19889: GO 19709
19891: POP
19892: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
19893: LD_ADDR_VAR 0 2
19897: PUSH
19898: DOUBLE
19899: LD_INT 1
19901: DEC
19902: ST_TO_ADDR
19903: LD_INT 5
19905: PPUSH
19906: LD_INT 6
19908: PPUSH
19909: CALL_OW 12
19913: PUSH
19914: LD_OWVAR 67
19918: PLUS
19919: PUSH
19920: FOR_TO
19921: IFFALSE 20067
// begin hc_sex = sex_male ;
19923: LD_ADDR_OWVAR 27
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// uc_side = 0 ;
19931: LD_ADDR_OWVAR 20
19935: PUSH
19936: LD_INT 0
19938: ST_TO_ADDR
// uc_nation = nation_nature ;
19939: LD_ADDR_OWVAR 21
19943: PUSH
19944: LD_INT 0
19946: ST_TO_ADDR
// hc_class = class_apeman ;
19947: LD_ADDR_OWVAR 28
19951: PUSH
19952: LD_INT 12
19954: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
19955: LD_ADDR_OWVAR 31
19959: PUSH
19960: LD_EXP 33
19964: PPUSH
19965: LD_EXP 34
19969: PPUSH
19970: CALL_OW 12
19974: PUSH
19975: LD_EXP 33
19979: PPUSH
19980: LD_EXP 34
19984: PPUSH
19985: CALL_OW 12
19989: PUSH
19990: LD_OWVAR 67
19994: PLUS
19995: PUSH
19996: LD_EXP 33
20000: PPUSH
20001: LD_EXP 34
20005: PPUSH
20006: CALL_OW 12
20010: PUSH
20011: LD_EXP 33
20015: PPUSH
20016: LD_EXP 34
20020: PPUSH
20021: CALL_OW 12
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
// hc_agressivity = 0 ;
20032: LD_ADDR_OWVAR 35
20036: PUSH
20037: LD_INT 0
20039: ST_TO_ADDR
// un = CreateHuman ;
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: CALL_OW 44
20049: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20050: LD_VAR 0 3
20054: PPUSH
20055: LD_INT 22
20057: PPUSH
20058: LD_INT 0
20060: PPUSH
20061: CALL_OW 49
// end ;
20065: GO 19920
20067: POP
20068: POP
// end ; end_of_file
20069: LD_VAR 0 1
20073: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20074: LD_EXP 1
20078: PPUSH
20079: CALL_OW 301
20083: IFFALSE 20095
20085: GO 20087
20087: DISABLE
// YouLost ( JMM ) ;
20088: LD_STRING JMM
20090: PPUSH
20091: CALL_OW 104
20095: END
