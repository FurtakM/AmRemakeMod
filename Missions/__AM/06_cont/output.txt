// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 35
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 20
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 21
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 18
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 14
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 33
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 24
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 26
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 34
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 29
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 28
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 30
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 25
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 18951 0 0
// PrepareDifficulty ;
 173: CALL 4995 0 0
// PrepareRussian ;
 177: CALL 4108 0 0
// PrepareVehicles ;
 181: CALL 1346 0 0
// PrepareHeroes ;
 185: CALL 432 0 0
// PrepareOthers ;
 189: CALL 1595 0 0
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 35
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 429
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 30
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 330
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: CALL_OW 274
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 9999
 323: PPUSH
 324: CALL_OW 277
 328: GO 305
 330: POP
 331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 332: LD_ADDR_VAR 0 1
 336: PUSH
 337: LD_INT 22
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 30
 349: PUSH
 350: LD_INT 0
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 391
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 369: LD_VAR 0 1
 373: PPUSH
 374: CALL_OW 274
 378: PPUSH
 379: LD_INT 2
 381: PPUSH
 382: LD_INT 9999
 384: PPUSH
 385: CALL_OW 277
 389: GO 366
 391: POP
 392: POP
// if IsSelected ( rudepo ) then
 393: LD_INT 2
 395: PPUSH
 396: CALL_OW 306
 400: IFFALSE 410
// your_side = 3 ;
 402: LD_ADDR_OWVAR 2
 406: PUSH
 407: LD_INT 3
 409: ST_TO_ADDR
// if IsSelected ( JMM ) then
 410: LD_EXP 1
 414: PPUSH
 415: CALL_OW 306
 419: IFFALSE 429
// your_side = 1 ;
 421: LD_ADDR_OWVAR 2
 425: PUSH
 426: LD_INT 1
 428: ST_TO_ADDR
// end ; end_of_file
 429: PPOPN 1
 431: END
// export function PrepareHeroes ; var veh ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// uc_side = 1 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// uc_nation = 1 ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 452: LD_ADDR_EXP 1
 456: PUSH
 457: LD_STRING JMM
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: CALL 4485 0 2
 467: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 468: LD_ADDR_EXP 12
 472: PUSH
 473: LD_STRING Harisson
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL 4485 0 2
 483: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 484: LD_ADDR_EXP 10
 488: PUSH
 489: LD_STRING DeltaDoctor
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL 4485 0 2
 499: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 2
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL_OW 49
// if LoadVariable ( LisaIn06 , 0 ) = 1 then
 515: LD_STRING LisaIn06
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 30
 525: PUSH
 526: LD_INT 1
 528: EQUAL
 529: IFFALSE 633
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: LD_INT 58
 558: PUSH
 559: EMPTY
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PPUSH
 567: CALL_OW 69
 571: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 572: LD_ADDR_EXP 2
 576: PUSH
 577: LD_STRING Lisa
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: CALL 4485 0 2
 587: ST_TO_ADDR
// if veh > 0 then
 588: LD_VAR 0 2
 592: PUSH
 593: LD_INT 0
 595: GREATER
 596: IFFALSE 618
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 598: LD_EXP 2
 602: PPUSH
 603: LD_VAR 0 2
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PPUSH
 612: CALL_OW 52
// end else
 616: GO 633
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 633: LD_STRING BobbyIn06
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 30
 643: PUSH
 644: LD_INT 1
 646: EQUAL
 647: IFFALSE 751
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 58
 676: PUSH
 677: EMPTY
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PPUSH
 685: CALL_OW 69
 689: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Bobby
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4485 0 2
 705: ST_TO_ADDR
// if veh > 0 then
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 0
 713: GREATER
 714: IFFALSE 736
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 716: LD_EXP 3
 720: PPUSH
 721: LD_VAR 0 2
 725: PUSH
 726: LD_INT 1
 728: ARRAY
 729: PPUSH
 730: CALL_OW 52
// end else
 734: GO 751
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 736: LD_EXP 3
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 751: LD_STRING CyrusIn06
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 30
 761: PUSH
 762: LD_INT 1
 764: EQUAL
 765: IFFALSE 869
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: LD_INT 22
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 21
 784: PUSH
 785: LD_INT 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 58
 794: PUSH
 795: EMPTY
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Cyrus
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL 4485 0 2
 823: ST_TO_ADDR
// if veh > 0 then
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 0
 831: GREATER
 832: IFFALSE 854
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 834: LD_EXP 4
 838: PPUSH
 839: LD_VAR 0 2
 843: PUSH
 844: LD_INT 1
 846: ARRAY
 847: PPUSH
 848: CALL_OW 52
// end else
 852: GO 869
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 854: LD_EXP 4
 858: PPUSH
 859: LD_INT 2
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 869: LD_STRING FrankIn06
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: CALL_OW 30
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 987
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 885: LD_ADDR_VAR 0 2
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 58
 912: PUSH
 913: EMPTY
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Frank
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4485 0 2
 941: ST_TO_ADDR
// if veh > 0 then
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 0
 949: GREATER
 950: IFFALSE 972
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
 952: LD_EXP 5
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 52
// end else
 970: GO 987
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 972: LD_EXP 5
 976: PPUSH
 977: LD_INT 2
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
 987: LD_STRING BrownIn06
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 30
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1105
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 21
1020: PUSH
1021: LD_INT 2
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 58
1030: PUSH
1031: EMPTY
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: LD_STRING Brown
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL 4485 0 2
1059: ST_TO_ADDR
// if veh > 0 then
1060: LD_VAR 0 2
1064: PUSH
1065: LD_INT 0
1067: GREATER
1068: IFFALSE 1090
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1070: LD_EXP 6
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: PPUSH
1084: CALL_OW 52
// end else
1088: GO 1105
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1090: LD_EXP 6
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1105: LD_STRING DonaldsonIn06
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: CALL_OW 30
1115: PUSH
1116: LD_INT 1
1118: EQUAL
1119: IFFALSE 1223
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1121: LD_ADDR_VAR 0 2
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: EMPTY
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1162: LD_ADDR_EXP 7
1166: PUSH
1167: LD_STRING Donaldson
1169: PPUSH
1170: LD_INT 1
1172: PPUSH
1173: CALL 4485 0 2
1177: ST_TO_ADDR
// if veh > 0 then
1178: LD_VAR 0 2
1182: PUSH
1183: LD_INT 0
1185: GREATER
1186: IFFALSE 1208
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1188: LD_EXP 7
1192: PPUSH
1193: LD_VAR 0 2
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: CALL_OW 52
// end else
1206: GO 1223
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1208: LD_EXP 7
1212: PPUSH
1213: LD_INT 2
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1223: LD_STRING GladstoneIn06
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 30
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1341
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: LD_INT 22
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 21
1256: PUSH
1257: LD_INT 2
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 58
1266: PUSH
1267: EMPTY
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PPUSH
1275: CALL_OW 69
1279: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1280: LD_ADDR_EXP 8
1284: PUSH
1285: LD_STRING Gladstone
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: CALL 4485 0 2
1295: ST_TO_ADDR
// if veh > 0 then
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 0
1303: GREATER
1304: IFFALSE 1326
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1306: LD_EXP 8
1310: PPUSH
1311: LD_VAR 0 2
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 52
// end else
1324: GO 1341
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1326: LD_EXP 8
1330: PPUSH
1331: LD_INT 2
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 49
// end ; end ; end ;
1341: LD_VAR 0 1
1345: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
1350: PPUSH
1351: PPUSH
1352: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_STRING 06_VehiclesIn06_1
1360: PPUSH
1361: EMPTY
1362: PPUSH
1363: CALL_OW 30
1367: ST_TO_ADDR
// uc_side = 1 ;
1368: LD_ADDR_OWVAR 20
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// uc_nation = 1 ;
1376: LD_ADDR_OWVAR 21
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// if vehicles > 0 then
1384: LD_VAR 0 5
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1590
// begin for i := 1 to vehicles do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_VAR 0 5
1408: PUSH
1409: FOR_TO
1410: IFFALSE 1588
// begin vc_chassis = vehicles [ i ] [ 1 ] ;
1412: LD_ADDR_OWVAR 37
1416: PUSH
1417: LD_VAR 0 5
1421: PUSH
1422: LD_VAR 0 2
1426: ARRAY
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 2 ] ;
1432: LD_ADDR_OWVAR 39
1436: PUSH
1437: LD_VAR 0 5
1441: PUSH
1442: LD_VAR 0 2
1446: ARRAY
1447: PUSH
1448: LD_INT 2
1450: ARRAY
1451: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 3 ] ;
1452: LD_ADDR_OWVAR 38
1456: PUSH
1457: LD_VAR 0 5
1461: PUSH
1462: LD_VAR 0 2
1466: ARRAY
1467: PUSH
1468: LD_INT 3
1470: ARRAY
1471: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 4 ] ;
1472: LD_ADDR_OWVAR 40
1476: PUSH
1477: LD_VAR 0 5
1481: PUSH
1482: LD_VAR 0 2
1486: ARRAY
1487: PUSH
1488: LD_INT 4
1490: ARRAY
1491: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1492: LD_ADDR_OWVAR 41
1496: PUSH
1497: LD_INT 40
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 4
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1510: LD_VAR 0 4
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 2
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1537: LD_OWVAR 40
1541: PUSH
1542: LD_INT 12
1544: EQUAL
1545: IFFALSE 1586
// AddCargo ( veh , vehicles [ i ] [ 5 ] , vehicles [ i ] [ 6 ] ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_VAR 0 5
1556: PUSH
1557: LD_VAR 0 2
1561: ARRAY
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: PPUSH
1567: LD_VAR 0 5
1571: PUSH
1572: LD_VAR 0 2
1576: ARRAY
1577: PUSH
1578: LD_INT 6
1580: ARRAY
1581: PPUSH
1582: CALL_OW 291
// end ;
1586: GO 1409
1588: POP
1589: POP
// end ; end ;
1590: LD_VAR 0 1
1594: RET
// export function PrepareOthers ; var i , veh ; begin
1595: LD_INT 0
1597: PPUSH
1598: PPUSH
1599: PPUSH
// uc_side = 1 ;
1600: LD_ADDR_OWVAR 20
1604: PUSH
1605: LD_INT 1
1607: ST_TO_ADDR
// uc_nation = 1 ;
1608: LD_ADDR_OWVAR 21
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1616: LD_ADDR_EXP 11
1620: PUSH
1621: LD_STRING OthersIn06
1623: PPUSH
1624: CALL_OW 31
1628: ST_TO_ADDR
// for i in others do
1629: LD_ADDR_VAR 0 2
1633: PUSH
1634: LD_EXP 11
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1730
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 21
1659: PUSH
1660: LD_INT 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 58
1669: PUSH
1670: EMPTY
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 69
1682: ST_TO_ADDR
// if veh > 0 then
1683: LD_VAR 0 3
1687: PUSH
1688: LD_INT 0
1690: GREATER
1691: IFFALSE 1713
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1693: LD_VAR 0 2
1697: PPUSH
1698: LD_VAR 0 3
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 52
// end else
1711: GO 1728
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1713: LD_VAR 0 2
1717: PPUSH
1718: LD_INT 2
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 49
// end ; end ;
1728: GO 1639
1730: POP
1731: POP
// end ;
1732: LD_VAR 0 1
1736: RET
// export function PrepareDenis ; begin
1737: LD_INT 0
1739: PPUSH
// uc_side = 1 ;
1740: LD_ADDR_OWVAR 20
1744: PUSH
1745: LD_INT 1
1747: ST_TO_ADDR
// uc_nation = 1 ;
1748: LD_ADDR_OWVAR 21
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1756: LD_ADDR_EXP 9
1760: PUSH
1761: LD_STRING Denis
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: CALL 4485 0 2
1771: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1772: LD_EXP 9
1776: PPUSH
1777: LD_INT 13
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1787: LD_EXP 9
1791: PPUSH
1792: LD_INT 4
1794: PPUSH
1795: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1799: LD_EXP 9
1803: PPUSH
1804: LD_INT 750
1806: PPUSH
1807: CALL_OW 234
// end ;
1811: LD_VAR 0 1
1815: RET
// export function HarrisonSupport ; var un , veh ; begin
1816: LD_INT 0
1818: PPUSH
1819: PPUSH
1820: PPUSH
// uc_side = 1 ;
1821: LD_ADDR_OWVAR 20
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// uc_nation = 1 ;
1829: LD_ADDR_OWVAR 21
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// vc_engine = 1 ;
1837: LD_ADDR_OWVAR 39
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// vc_control = 1 ;
1845: LD_ADDR_OWVAR 38
1849: PUSH
1850: LD_INT 1
1852: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1853: LD_ADDR_OWVAR 40
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 4
1863: PUSH
1864: LD_INT 2
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_OWVAR 67
1876: ARRAY
1877: ST_TO_ADDR
// vc_chassis = 2 ;
1878: LD_ADDR_OWVAR 37
1882: PUSH
1883: LD_INT 2
1885: ST_TO_ADDR
// veh = CreateVehicle ;
1886: LD_ADDR_VAR 0 3
1890: PUSH
1891: CALL_OW 45
1895: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1896: LD_VAR 0 3
1900: PPUSH
1901: LD_INT 2
1903: PPUSH
1904: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1908: LD_VAR 0 3
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// hc_class := 2 ;
1923: LD_ADDR_OWVAR 28
1927: PUSH
1928: LD_INT 2
1930: ST_TO_ADDR
// hc_sex := sex_male ;
1931: LD_ADDR_OWVAR 27
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1939: LD_ADDR_OWVAR 33
1943: PUSH
1944: LD_STRING SecondCharsGal
1946: ST_TO_ADDR
// hc_face_number := 52 ;
1947: LD_ADDR_OWVAR 34
1951: PUSH
1952: LD_INT 52
1954: ST_TO_ADDR
// hc_name := Craig Brown ;
1955: LD_ADDR_OWVAR 26
1959: PUSH
1960: LD_STRING Craig Brown
1962: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1963: LD_ADDR_OWVAR 31
1967: PUSH
1968: LD_INT 1
1970: PUSH
1971: LD_INT 3
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1986: LD_ADDR_EXP 15
1990: PUSH
1991: CALL_OW 44
1995: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
1996: LD_EXP 15
2000: PPUSH
2001: LD_VAR 0 3
2005: PPUSH
2006: CALL_OW 52
// vc_engine = 1 ;
2010: LD_ADDR_OWVAR 39
2014: PUSH
2015: LD_INT 1
2017: ST_TO_ADDR
// vc_control = 1 ;
2018: LD_ADDR_OWVAR 38
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2026: LD_ADDR_OWVAR 40
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: LD_INT 2
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: LD_OWVAR 67
2049: ARRAY
2050: ST_TO_ADDR
// vc_chassis = 2 ;
2051: LD_ADDR_OWVAR 37
2055: PUSH
2056: LD_INT 2
2058: ST_TO_ADDR
// veh = CreateVehicle ;
2059: LD_ADDR_VAR 0 3
2063: PUSH
2064: CALL_OW 45
2068: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2069: LD_VAR 0 3
2073: PPUSH
2074: LD_INT 2
2076: PPUSH
2077: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 3
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2096: LD_VAR 0 3
2100: PPUSH
2101: LD_INT 50
2103: PPUSH
2104: CALL_OW 240
// hc_class := 1 ;
2108: LD_ADDR_OWVAR 28
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// hc_sex := sex_female ;
2116: LD_ADDR_OWVAR 27
2120: PUSH
2121: LD_INT 2
2123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING SecondCharsGal
2131: ST_TO_ADDR
// hc_face_number := 45 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 45
2139: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Ingrid Jonsson
2147: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2148: LD_ADDR_OWVAR 31
2152: PUSH
2153: LD_INT 1
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: LD_INT 1
2161: PUSH
2162: LD_INT 0
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2171: LD_ADDR_EXP 16
2175: PUSH
2176: CALL_OW 44
2180: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2181: LD_EXP 16
2185: PPUSH
2186: LD_VAR 0 3
2190: PPUSH
2191: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 45
2202: PPUSH
2203: CALL_OW 240
// end ;
2207: LD_VAR 0 1
2211: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2212: LD_INT 0
2214: PPUSH
2215: PPUSH
2216: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 1
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 21
2234: PUSH
2235: LD_INT 1
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 26
2244: PUSH
2245: LD_INT 1
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: LD_INT 25
2257: PUSH
2258: LD_INT 1
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 25
2267: PUSH
2268: LD_INT 2
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 25
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 4
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: PPUSH
2308: CALL_OW 69
2312: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: LD_INT 1
2320: PPUSH
2321: LD_VAR 0 2
2325: PPUSH
2326: CALL_OW 12
2330: ST_TO_ADDR
// uc_side = 4 ;
2331: LD_ADDR_OWVAR 20
2335: PUSH
2336: LD_INT 4
2338: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2339: LD_ADDR_EXP 13
2343: PUSH
2344: LD_STRING Joan
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL 4485 0 2
2354: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
2355: LD_EXP 13
2359: PPUSH
2360: LD_VAR 0 2
2364: PUSH
2365: LD_VAR 0 3
2369: ARRAY
2370: PPUSH
2371: CALL_OW 250
2375: PPUSH
2376: LD_VAR 0 2
2380: PUSH
2381: LD_VAR 0 3
2385: ARRAY
2386: PPUSH
2387: CALL_OW 251
2391: PPUSH
2392: LD_INT 2
2394: PPUSH
2395: LD_INT 1
2397: PPUSH
2398: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2402: LD_EXP 13
2406: PPUSH
2407: LD_INT 250
2409: PPUSH
2410: CALL_OW 234
// InGameOn ;
2414: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2418: LD_EXP 13
2422: PPUSH
2423: CALL_OW 87
// wait ( 0 0$2 ) ;
2427: LD_INT 70
2429: PPUSH
2430: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2434: LD_VAR 0 2
2438: PUSH
2439: LD_VAR 0 3
2443: ARRAY
2444: PPUSH
2445: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2449: LD_VAR 0 2
2453: PUSH
2454: LD_VAR 0 3
2458: ARRAY
2459: PPUSH
2460: CALL_OW 122
// wait ( 0 0$1 ) ;
2464: LD_INT 35
2466: PPUSH
2467: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2471: LD_VAR 0 2
2475: PUSH
2476: LD_VAR 0 3
2480: ARRAY
2481: PPUSH
2482: LD_EXP 13
2486: PPUSH
2487: CALL_OW 112
// wait ( 0 0$2 ) ;
2491: LD_INT 70
2493: PPUSH
2494: CALL_OW 67
// DialogueOn ;
2498: CALL_OW 6
// if tmp [ rnd ] = JMM then
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 3
2511: ARRAY
2512: PUSH
2513: LD_EXP 1
2517: EQUAL
2518: IFFALSE 2645
// begin Say ( JMM , D5b-JMM-1 ) ;
2520: LD_EXP 1
2524: PPUSH
2525: LD_STRING D5b-JMM-1
2527: PPUSH
2528: CALL_OW 88
// DialogueOff ;
2532: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2536: LD_EXP 13
2540: PPUSH
2541: LD_INT 500
2543: PPUSH
2544: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2548: LD_EXP 13
2552: PPUSH
2553: LD_EXP 1
2557: PPUSH
2558: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2562: LD_EXP 1
2566: PPUSH
2567: LD_EXP 13
2571: PPUSH
2572: CALL_OW 119
// wait ( 0 0$1 ) ;
2576: LD_INT 35
2578: PPUSH
2579: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2583: LD_EXP 13
2587: PPUSH
2588: LD_STRING D5b-Joan-1
2590: PPUSH
2591: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2595: LD_EXP 1
2599: PPUSH
2600: LD_STRING D5b-JMM-2
2602: PPUSH
2603: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2607: LD_EXP 13
2611: PPUSH
2612: LD_STRING D5b-Joan-2
2614: PPUSH
2615: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2619: LD_EXP 1
2623: PPUSH
2624: LD_STRING D5b-JMM-3
2626: PPUSH
2627: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2631: LD_EXP 13
2635: PPUSH
2636: LD_STRING D5b-Joan-3
2638: PPUSH
2639: CALL_OW 88
// end else
2643: GO 2985
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2645: LD_VAR 0 2
2649: PUSH
2650: LD_VAR 0 3
2654: ARRAY
2655: PPUSH
2656: LD_STRING D5a-Sol1-1
2658: PPUSH
2659: CALL_OW 88
// DialogueOff ;
2663: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2667: LD_EXP 13
2671: PPUSH
2672: LD_INT 500
2674: PPUSH
2675: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2679: LD_EXP 13
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_VAR 0 3
2693: ARRAY
2694: PPUSH
2695: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2699: LD_VAR 0 2
2703: PUSH
2704: LD_VAR 0 3
2708: ARRAY
2709: PPUSH
2710: LD_EXP 13
2714: PPUSH
2715: CALL_OW 119
// wait ( 0 0$1 ) ;
2719: LD_INT 35
2721: PPUSH
2722: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2726: LD_EXP 13
2730: PPUSH
2731: LD_STRING D5a-Joan-1
2733: PPUSH
2734: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2738: LD_VAR 0 2
2742: PUSH
2743: LD_VAR 0 3
2747: ARRAY
2748: PPUSH
2749: LD_STRING D5a-Sol1-2
2751: PPUSH
2752: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2756: LD_EXP 13
2760: PPUSH
2761: LD_STRING D5a-Joan-2
2763: PPUSH
2764: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2768: LD_VAR 0 2
2772: PUSH
2773: LD_VAR 0 3
2777: ARRAY
2778: PPUSH
2779: LD_STRING D5a-Sol1-3
2781: PPUSH
2782: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2786: LD_EXP 13
2790: PPUSH
2791: LD_STRING D5a-Joan-3
2793: PPUSH
2794: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2798: LD_VAR 0 2
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: PPUSH
2809: LD_STRING D5a-Sol1-4
2811: PPUSH
2812: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2816: LD_EXP 1
2820: PPUSH
2821: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2825: LD_EXP 1
2829: PPUSH
2830: CALL_OW 122
// wait ( 0 0$1 ) ;
2834: LD_INT 35
2836: PPUSH
2837: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2841: LD_INT 35
2843: PPUSH
2844: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
2848: LD_EXP 13
2852: PUSH
2853: LD_VAR 0 2
2857: PUSH
2858: LD_VAR 0 3
2862: ARRAY
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: PPUSH
2868: LD_EXP 1
2872: PPUSH
2873: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
2877: LD_EXP 13
2881: PPUSH
2882: LD_EXP 1
2886: PPUSH
2887: CALL_OW 296
2891: PUSH
2892: LD_INT 5
2894: LESS
2895: IFFALSE 2841
// ComTurnUnit ( Joan , JMM ) ;
2897: LD_EXP 13
2901: PPUSH
2902: LD_EXP 1
2906: PPUSH
2907: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2911: LD_EXP 1
2915: PPUSH
2916: LD_EXP 13
2920: PPUSH
2921: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
2925: LD_EXP 13
2929: PPUSH
2930: LD_STRING D5a-Joan-4
2932: PPUSH
2933: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
2937: LD_EXP 1
2941: PPUSH
2942: LD_STRING D5a-JMM-4
2944: PPUSH
2945: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
2949: LD_EXP 13
2953: PPUSH
2954: LD_STRING D5a-Joan-5
2956: PPUSH
2957: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2961: LD_EXP 1
2965: PPUSH
2966: LD_STRING D5a-JMM-5
2968: PPUSH
2969: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2973: LD_EXP 13
2977: PPUSH
2978: LD_STRING D5a-Joan-6
2980: PPUSH
2981: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2985: LD_EXP 1
2989: PPUSH
2990: LD_STRING D6-JMM-1
2992: PPUSH
2993: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
2997: LD_EXP 13
3001: PPUSH
3002: LD_STRING D6-Joan-1
3004: PPUSH
3005: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3009: LD_EXP 1
3013: PPUSH
3014: LD_STRING D6-JMM-2
3016: PPUSH
3017: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3021: LD_EXP 13
3025: PPUSH
3026: LD_STRING D6-Joan-2
3028: PPUSH
3029: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3033: LD_EXP 1
3037: PPUSH
3038: LD_STRING D6-JMM-3
3040: PPUSH
3041: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3045: LD_EXP 13
3049: PPUSH
3050: LD_STRING D6-Joan-3
3052: PPUSH
3053: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3057: LD_EXP 1
3061: PPUSH
3062: LD_STRING D6-JMM-4
3064: PPUSH
3065: CALL_OW 88
// DialogueOff ;
3069: CALL_OW 7
// InGameOff ;
3073: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3077: LD_EXP 13
3081: PPUSH
3082: LD_INT 1
3084: PPUSH
3085: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3089: LD_STRING MJ
3091: PPUSH
3092: CALL_OW 337
// JoanStatus = 1 ;
3096: LD_ADDR_EXP 14
3100: PUSH
3101: LD_INT 1
3103: ST_TO_ADDR
// end ;
3104: LD_VAR 0 1
3108: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3109: LD_INT 0
3111: PPUSH
3112: PPUSH
// uc_side = 1 ;
3113: LD_ADDR_OWVAR 20
3117: PUSH
3118: LD_INT 1
3120: ST_TO_ADDR
// uc_nation = 1 ;
3121: LD_ADDR_OWVAR 21
3125: PUSH
3126: LD_INT 1
3128: ST_TO_ADDR
// if number = 1 then
3129: LD_VAR 0 1
3133: PUSH
3134: LD_INT 1
3136: EQUAL
3137: IFFALSE 3275
// begin hc_class := 1 ;
3139: LD_ADDR_OWVAR 28
3143: PUSH
3144: LD_INT 1
3146: ST_TO_ADDR
// hc_sex := sex_male ;
3147: LD_ADDR_OWVAR 27
3151: PUSH
3152: LD_INT 1
3154: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3155: LD_ADDR_OWVAR 33
3159: PUSH
3160: LD_STRING AmGalRemake
3162: ST_TO_ADDR
// hc_face_number := 7 ;
3163: LD_ADDR_OWVAR 34
3167: PUSH
3168: LD_INT 7
3170: ST_TO_ADDR
// hc_name := Bobby Jorda ;
3171: LD_ADDR_OWVAR 26
3175: PUSH
3176: LD_STRING Bobby Jorda
3178: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3179: LD_ADDR_OWVAR 31
3183: PUSH
3184: LD_INT 2
3186: PUSH
3187: LD_INT 1
3189: PUSH
3190: LD_INT 1
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// un = CreateHuman ;
3202: LD_ADDR_VAR 0 3
3206: PUSH
3207: CALL_OW 44
3211: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: LD_INT 12
3219: PPUSH
3220: LD_INT 1
3222: PPUSH
3223: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3227: LD_VAR 0 3
3231: PPUSH
3232: CALL_OW 87
// wait ( 0 0$1 ) ;
3236: LD_INT 35
3238: PPUSH
3239: CALL_OW 67
// DialogueOn ;
3243: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3247: LD_VAR 0 3
3251: PPUSH
3252: LD_STRING D11b-Sol3-1
3254: PPUSH
3255: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3259: LD_EXP 1
3263: PPUSH
3264: LD_STRING D11b-JMM-1
3266: PPUSH
3267: CALL_OW 88
// DialogueOff ;
3271: CALL_OW 7
// end ; if number = 2 then
3275: LD_VAR 0 1
3279: PUSH
3280: LD_INT 2
3282: EQUAL
3283: IFFALSE 3421
// begin hc_class := 3 ;
3285: LD_ADDR_OWVAR 28
3289: PUSH
3290: LD_INT 3
3292: ST_TO_ADDR
// hc_sex := sex_male ;
3293: LD_ADDR_OWVAR 27
3297: PUSH
3298: LD_INT 1
3300: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3301: LD_ADDR_OWVAR 33
3305: PUSH
3306: LD_STRING SecondCharsGal
3308: ST_TO_ADDR
// hc_face_number := 55 ;
3309: LD_ADDR_OWVAR 34
3313: PUSH
3314: LD_INT 55
3316: ST_TO_ADDR
// hc_name := George McCarthy ;
3317: LD_ADDR_OWVAR 26
3321: PUSH
3322: LD_STRING George McCarthy
3324: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3325: LD_ADDR_OWVAR 31
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: LD_INT 2
3335: PUSH
3336: LD_INT 3
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: ST_TO_ADDR
// un = CreateHuman ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: CALL_OW 44
3357: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 12
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3373: LD_VAR 0 3
3377: PPUSH
3378: CALL_OW 87
// wait ( 0 0$1 ) ;
3382: LD_INT 35
3384: PPUSH
3385: CALL_OW 67
// DialogueOn ;
3389: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_STRING D11d-Sol4-1
3400: PPUSH
3401: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3405: LD_EXP 1
3409: PPUSH
3410: LD_STRING D11d-JMM-1
3412: PPUSH
3413: CALL_OW 88
// DialogueOff ;
3417: CALL_OW 7
// end ; if number = 3 then
3421: LD_VAR 0 1
3425: PUSH
3426: LD_INT 3
3428: EQUAL
3429: IFFALSE 3555
// begin hc_class := 3 ;
3431: LD_ADDR_OWVAR 28
3435: PUSH
3436: LD_INT 3
3438: ST_TO_ADDR
// hc_sex := sex_female ;
3439: LD_ADDR_OWVAR 27
3443: PUSH
3444: LD_INT 2
3446: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3447: LD_ADDR_OWVAR 33
3451: PUSH
3452: LD_STRING SecondCharsGal
3454: ST_TO_ADDR
// hc_face_number := 45 ;
3455: LD_ADDR_OWVAR 34
3459: PUSH
3460: LD_INT 45
3462: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3463: LD_ADDR_OWVAR 26
3467: PUSH
3468: LD_STRING Sylvia Creak
3470: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3471: LD_ADDR_OWVAR 31
3475: PUSH
3476: LD_INT 1
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: LD_INT 1
3484: PUSH
3485: LD_INT 1
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: LIST
3492: LIST
3493: ST_TO_ADDR
// un = CreateHuman ;
3494: LD_ADDR_VAR 0 3
3498: PUSH
3499: CALL_OW 44
3503: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3504: LD_VAR 0 3
3508: PPUSH
3509: LD_INT 12
3511: PPUSH
3512: LD_INT 1
3514: PPUSH
3515: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: CALL_OW 87
// wait ( 0 0$1 ) ;
3528: LD_INT 35
3530: PPUSH
3531: CALL_OW 67
// DialogueOn ;
3535: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3539: LD_VAR 0 3
3543: PPUSH
3544: LD_STRING D11e-FSol4-1
3546: PPUSH
3547: CALL_OW 88
// DialogueOff ;
3551: CALL_OW 7
// end ; if number = 4 then
3555: LD_VAR 0 1
3559: PUSH
3560: LD_INT 4
3562: EQUAL
3563: IFFALSE 3689
// begin hc_class := 3 ;
3565: LD_ADDR_OWVAR 28
3569: PUSH
3570: LD_INT 3
3572: ST_TO_ADDR
// hc_sex := sex_female ;
3573: LD_ADDR_OWVAR 27
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3581: LD_ADDR_OWVAR 33
3585: PUSH
3586: LD_STRING SecondCharsGal
3588: ST_TO_ADDR
// hc_face_number := 46 ;
3589: LD_ADDR_OWVAR 34
3593: PUSH
3594: LD_INT 46
3596: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3597: LD_ADDR_OWVAR 26
3601: PUSH
3602: LD_STRING Sylvia Creak
3604: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3605: LD_ADDR_OWVAR 31
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: LD_INT 1
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: ST_TO_ADDR
// un = CreateHuman ;
3628: LD_ADDR_VAR 0 3
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_INT 12
3645: PPUSH
3646: LD_INT 1
3648: PPUSH
3649: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: CALL_OW 87
// wait ( 0 0$1 ) ;
3662: LD_INT 35
3664: PPUSH
3665: CALL_OW 67
// DialogueOn ;
3669: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3673: LD_VAR 0 3
3677: PPUSH
3678: LD_STRING D11e-FSol4-1
3680: PPUSH
3681: CALL_OW 88
// DialogueOff ;
3685: CALL_OW 7
// end ; if number = 5 then
3689: LD_VAR 0 1
3693: PUSH
3694: LD_INT 5
3696: EQUAL
3697: IFFALSE 3835
// begin hc_class := 1 ;
3699: LD_ADDR_OWVAR 28
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// hc_sex := sex_female ;
3707: LD_ADDR_OWVAR 27
3711: PUSH
3712: LD_INT 2
3714: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3715: LD_ADDR_OWVAR 33
3719: PUSH
3720: LD_STRING SecondCharsGal
3722: ST_TO_ADDR
// hc_face_number := 37 ;
3723: LD_ADDR_OWVAR 34
3727: PUSH
3728: LD_INT 37
3730: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3731: LD_ADDR_OWVAR 26
3735: PUSH
3736: LD_STRING Margherite Simpson
3738: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3739: LD_ADDR_OWVAR 31
3743: PUSH
3744: LD_INT 1
3746: PUSH
3747: LD_INT 1
3749: PUSH
3750: LD_INT 1
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: ST_TO_ADDR
// un = CreateHuman ;
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: CALL_OW 44
3771: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_INT 12
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3787: LD_VAR 0 3
3791: PPUSH
3792: CALL_OW 87
// wait ( 0 0$1 ) ;
3796: LD_INT 35
3798: PPUSH
3799: CALL_OW 67
// DialogueOn ;
3803: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3807: LD_VAR 0 3
3811: PPUSH
3812: LD_STRING D11c-FSol3-1
3814: PPUSH
3815: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3819: LD_EXP 1
3823: PPUSH
3824: LD_STRING D11c-JMM-1
3826: PPUSH
3827: CALL_OW 88
// DialogueOff ;
3831: CALL_OW 7
// end ; if number = 6 then
3835: LD_VAR 0 1
3839: PUSH
3840: LD_INT 6
3842: EQUAL
3843: IFFALSE 3969
// begin hc_class := 1 ;
3845: LD_ADDR_OWVAR 28
3849: PUSH
3850: LD_INT 1
3852: ST_TO_ADDR
// hc_sex := sex_male ;
3853: LD_ADDR_OWVAR 27
3857: PUSH
3858: LD_INT 1
3860: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3861: LD_ADDR_OWVAR 33
3865: PUSH
3866: LD_STRING AmGalRemake
3868: ST_TO_ADDR
// hc_face_number := 1 ;
3869: LD_ADDR_OWVAR 34
3873: PUSH
3874: LD_INT 1
3876: ST_TO_ADDR
// hc_name := Charles Brown ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING Charles Brown
3884: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3885: LD_ADDR_OWVAR 31
3889: PUSH
3890: LD_INT 2
3892: PUSH
3893: LD_INT 1
3895: PUSH
3896: LD_INT 0
3898: PUSH
3899: LD_INT 1
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: ST_TO_ADDR
// un = CreateHuman ;
3908: LD_ADDR_VAR 0 3
3912: PUSH
3913: CALL_OW 44
3917: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3918: LD_VAR 0 3
3922: PPUSH
3923: LD_INT 12
3925: PPUSH
3926: LD_INT 1
3928: PPUSH
3929: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: CALL_OW 87
// wait ( 0 0$1 ) ;
3942: LD_INT 35
3944: PPUSH
3945: CALL_OW 67
// DialogueOn ;
3949: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3953: LD_VAR 0 3
3957: PPUSH
3958: LD_STRING D11f-Sol5-1
3960: PPUSH
3961: CALL_OW 88
// DialogueOff ;
3965: CALL_OW 7
// end ; if number = 7 then
3969: LD_VAR 0 1
3973: PUSH
3974: LD_INT 7
3976: EQUAL
3977: IFFALSE 4103
// begin hc_class := 1 ;
3979: LD_ADDR_OWVAR 28
3983: PUSH
3984: LD_INT 1
3986: ST_TO_ADDR
// hc_sex := sex_female ;
3987: LD_ADDR_OWVAR 27
3991: PUSH
3992: LD_INT 2
3994: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3995: LD_ADDR_OWVAR 33
3999: PUSH
4000: LD_STRING AmGalRemake
4002: ST_TO_ADDR
// hc_face_number := 2 ;
4003: LD_ADDR_OWVAR 34
4007: PUSH
4008: LD_INT 2
4010: ST_TO_ADDR
// hc_name := Johanna Holland ;
4011: LD_ADDR_OWVAR 26
4015: PUSH
4016: LD_STRING Johanna Holland
4018: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4019: LD_ADDR_OWVAR 31
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: LD_INT 0
4032: PUSH
4033: LD_INT 0
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: ST_TO_ADDR
// un = CreateHuman ;
4042: LD_ADDR_VAR 0 3
4046: PUSH
4047: CALL_OW 44
4051: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4052: LD_VAR 0 3
4056: PPUSH
4057: LD_INT 12
4059: PPUSH
4060: LD_INT 1
4062: PPUSH
4063: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4067: LD_VAR 0 3
4071: PPUSH
4072: CALL_OW 87
// wait ( 0 0$1 ) ;
4076: LD_INT 35
4078: PPUSH
4079: CALL_OW 67
// DialogueOn ;
4083: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_STRING D11a-FSol2-1
4094: PPUSH
4095: CALL_OW 88
// DialogueOff ;
4099: CALL_OW 7
// end ; end ; end_of_file
4103: LD_VAR 0 2
4107: RET
// export function PrepareRussian ; var i ; begin
4108: LD_INT 0
4110: PPUSH
4111: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4112: LD_INT 3
4114: PPUSH
4115: LD_INT 3
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: LD_EXP 31
4125: PPUSH
4126: LD_EXP 32
4130: PPUSH
4131: CALL_OW 12
4135: PPUSH
4136: LD_INT 2
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: CALL 4749 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4146: LD_INT 3
4148: PPUSH
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 8
4154: PPUSH
4155: LD_EXP 31
4159: PPUSH
4160: LD_EXP 32
4164: PPUSH
4165: CALL_OW 12
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: CALL 4749 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4180: LD_INT 3
4182: PPUSH
4183: LD_INT 3
4185: PPUSH
4186: LD_INT 67
4188: PPUSH
4189: LD_EXP 31
4193: PPUSH
4194: LD_EXP 32
4198: PPUSH
4199: CALL_OW 12
4203: PPUSH
4204: LD_INT 1
4206: PPUSH
4207: LD_INT 2
4209: PPUSH
4210: CALL 4749 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4214: LD_INT 3
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 21
4222: PPUSH
4223: LD_EXP 31
4227: PPUSH
4228: LD_EXP 32
4232: PPUSH
4233: CALL_OW 12
4237: PPUSH
4238: LD_INT 3
4240: PPUSH
4241: LD_INT 6
4243: PPUSH
4244: CALL 4749 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4248: LD_INT 3
4250: PPUSH
4251: LD_INT 3
4253: PPUSH
4254: LD_INT 17
4256: PPUSH
4257: LD_EXP 31
4261: PPUSH
4262: LD_EXP 32
4266: PPUSH
4267: CALL_OW 12
4271: PPUSH
4272: LD_INT 3
4274: PPUSH
4275: LD_INT 6
4277: PPUSH
4278: CALL 4749 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4282: LD_INT 3
4284: PPUSH
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 32
4290: PPUSH
4291: LD_EXP 31
4295: PPUSH
4296: LD_EXP 32
4300: PPUSH
4301: CALL_OW 12
4305: PPUSH
4306: LD_INT 4
4308: PPUSH
4309: LD_INT 2
4311: PPUSH
4312: CALL 4749 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4316: LD_ADDR_VAR 0 2
4320: PUSH
4321: LD_INT 22
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 21
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 30
4343: PUSH
4344: LD_INT 32
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PPUSH
4356: CALL_OW 69
4360: PUSH
4361: FOR_IN
4362: IFFALSE 4402
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4364: LD_INT 3
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_EXP 31
4379: PPUSH
4380: LD_EXP 32
4384: PPUSH
4385: CALL_OW 12
4389: PPUSH
4390: LD_INT 1
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: CALL 4749 0 6
4400: GO 4361
4402: POP
4403: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4404: LD_ADDR_VAR 0 2
4408: PUSH
4409: LD_INT 22
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 21
4421: PUSH
4422: LD_INT 3
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 30
4431: PUSH
4432: LD_INT 31
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 69
4448: PUSH
4449: FOR_IN
4450: IFFALSE 4478
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4452: LD_EXP 31
4456: PPUSH
4457: LD_EXP 32
4461: PPUSH
4462: CALL_OW 12
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: CALL 4859 0 2
4476: GO 4449
4478: POP
4479: POP
// end ; end_of_file
4480: LD_VAR 0 1
4484: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4485: LD_INT 0
4487: PPUSH
4488: PPUSH
// if exist_mode then
4489: LD_VAR 0 2
4493: IFFALSE 4512
// begin unit := CreateCharacter ( ident ) ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: LD_VAR 0 1
4504: PPUSH
4505: CALL_OW 34
4509: ST_TO_ADDR
// end else
4510: GO 4527
// begin unit := NewCharacter ( ident ) ;
4512: LD_ADDR_VAR 0 4
4516: PUSH
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 25
4526: ST_TO_ADDR
// end ; result := unit ;
4527: LD_ADDR_VAR 0 3
4531: PUSH
4532: LD_VAR 0 4
4536: ST_TO_ADDR
// end ;
4537: LD_VAR 0 3
4541: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
// rnd = rand ( 1 , characters ) ;
4547: LD_ADDR_VAR 0 6
4551: PUSH
4552: LD_INT 1
4554: PPUSH
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL_OW 12
4564: ST_TO_ADDR
// for i = 1 to characters do
4565: LD_ADDR_VAR 0 5
4569: PUSH
4570: DOUBLE
4571: LD_INT 1
4573: DEC
4574: ST_TO_ADDR
4575: LD_VAR 0 1
4579: PUSH
4580: FOR_TO
4581: IFFALSE 4691
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4583: LD_VAR 0 5
4587: PUSH
4588: LD_VAR 0 6
4592: EQUAL
4593: PUSH
4594: LD_VAR 0 1
4598: PUSH
4599: LD_VAR 0 5
4603: ARRAY
4604: PPUSH
4605: CALL_OW 258
4609: PUSH
4610: LD_INT 1
4612: EQUAL
4613: AND
4614: IFFALSE 4636
// Say ( characters [ i ] , dialogMID ) ;
4616: LD_VAR 0 1
4620: PUSH
4621: LD_VAR 0 5
4625: ARRAY
4626: PPUSH
4627: LD_VAR 0 2
4631: PPUSH
4632: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4636: LD_VAR 0 5
4640: PUSH
4641: LD_VAR 0 6
4645: EQUAL
4646: PUSH
4647: LD_VAR 0 1
4651: PUSH
4652: LD_VAR 0 5
4656: ARRAY
4657: PPUSH
4658: CALL_OW 258
4662: PUSH
4663: LD_INT 2
4665: EQUAL
4666: AND
4667: IFFALSE 4689
// Say ( characters [ i ] , dialogFID ) ;
4669: LD_VAR 0 1
4673: PUSH
4674: LD_VAR 0 5
4678: ARRAY
4679: PPUSH
4680: LD_VAR 0 3
4684: PPUSH
4685: CALL_OW 88
// end ;
4689: GO 4580
4691: POP
4692: POP
// end ;
4693: LD_VAR 0 4
4697: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
// for i in charactersList do
4702: LD_ADDR_VAR 0 4
4706: PUSH
4707: LD_VAR 0 1
4711: PUSH
4712: FOR_IN
4713: IFFALSE 4742
// begin if IsOk ( i ) then
4715: LD_VAR 0 4
4719: PPUSH
4720: CALL_OW 302
4724: IFFALSE 4740
// SaveCharacters ( i , ident ) ;
4726: LD_VAR 0 4
4730: PPUSH
4731: LD_VAR 0 2
4735: PPUSH
4736: CALL_OW 38
// end ;
4740: GO 4712
4742: POP
4743: POP
// end ;
4744: LD_VAR 0 3
4748: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
4753: PPUSH
4754: PPUSH
// for i = 1 to count do
4755: LD_ADDR_VAR 0 8
4759: PUSH
4760: DOUBLE
4761: LD_INT 1
4763: DEC
4764: ST_TO_ADDR
4765: LD_VAR 0 6
4769: PUSH
4770: FOR_TO
4771: IFFALSE 4852
// begin uc_side = side ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_VAR 0 1
4782: ST_TO_ADDR
// uc_nation = nation ;
4783: LD_ADDR_OWVAR 21
4787: PUSH
4788: LD_VAR 0 2
4792: ST_TO_ADDR
// hc_gallery =  ;
4793: LD_ADDR_OWVAR 33
4797: PUSH
4798: LD_STRING 
4800: ST_TO_ADDR
// hc_name =  ;
4801: LD_ADDR_OWVAR 26
4805: PUSH
4806: LD_STRING 
4808: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4809: LD_INT 0
4811: PPUSH
4812: LD_VAR 0 5
4816: PPUSH
4817: LD_VAR 0 4
4821: PPUSH
4822: CALL_OW 380
// un = CreateHuman ;
4826: LD_ADDR_VAR 0 10
4830: PUSH
4831: CALL_OW 44
4835: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4836: LD_VAR 0 10
4840: PPUSH
4841: LD_VAR 0 3
4845: PPUSH
4846: CALL_OW 52
// end ;
4850: GO 4770
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 7
4858: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
4863: PPUSH
// uc_side := GetSide ( b ) ;
4864: LD_ADDR_OWVAR 20
4868: PUSH
4869: LD_VAR 0 2
4873: PPUSH
4874: CALL_OW 255
4878: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4879: LD_ADDR_OWVAR 21
4883: PUSH
4884: LD_VAR 0 2
4888: PPUSH
4889: CALL_OW 248
4893: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4894: LD_INT 0
4896: PPUSH
4897: LD_INT 1
4899: PPUSH
4900: LD_VAR 0 1
4904: PPUSH
4905: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4909: LD_ADDR_VAR 0 5
4913: PUSH
4914: LD_VAR 0 2
4918: PPUSH
4919: CALL_OW 254
4923: PUSH
4924: LD_INT 3
4926: MINUS
4927: ST_TO_ADDR
// if dir < 0 then
4928: LD_VAR 0 5
4932: PUSH
4933: LD_INT 0
4935: LESS
4936: IFFALSE 4952
// dir := 6 + dir ;
4938: LD_ADDR_VAR 0 5
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: LD_VAR 0 5
4950: PLUS
4951: ST_TO_ADDR
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// SetDir ( un , dir ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_VAR 0 5
4971: PPUSH
4972: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4976: LD_VAR 0 4
4980: PPUSH
4981: LD_VAR 0 2
4985: PPUSH
4986: CALL_OW 52
// end ;
4990: LD_VAR 0 3
4994: RET
// export function PrepareDifficulty ; begin
4995: LD_INT 0
4997: PPUSH
// if Difficulty = 1 then
4998: LD_OWVAR 67
5002: PUSH
5003: LD_INT 1
5005: EQUAL
5006: IFFALSE 5024
// begin RuSolMinLevel = 2 ;
5008: LD_ADDR_EXP 31
5012: PUSH
5013: LD_INT 2
5015: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5016: LD_ADDR_EXP 32
5020: PUSH
5021: LD_INT 5
5023: ST_TO_ADDR
// end ; if Difficulty = 2 then
5024: LD_OWVAR 67
5028: PUSH
5029: LD_INT 2
5031: EQUAL
5032: IFFALSE 5050
// begin RuSolMinLevel = 3 ;
5034: LD_ADDR_EXP 31
5038: PUSH
5039: LD_INT 3
5041: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5042: LD_ADDR_EXP 32
5046: PUSH
5047: LD_INT 6
5049: ST_TO_ADDR
// end ; if Difficulty = 3 then
5050: LD_OWVAR 67
5054: PUSH
5055: LD_INT 3
5057: EQUAL
5058: IFFALSE 5076
// begin RuSolMinLevel = 5 ;
5060: LD_ADDR_EXP 31
5064: PUSH
5065: LD_INT 5
5067: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5068: LD_ADDR_EXP 32
5072: PUSH
5073: LD_INT 6
5075: ST_TO_ADDR
// end ; end ;
5076: LD_VAR 0 1
5080: RET
// export function ShowQuery1 ; begin
5081: LD_INT 0
5083: PPUSH
// case query ( QKill ) of 1 :
5084: LD_STRING QKill
5086: PPUSH
5087: CALL_OW 97
5091: PUSH
5092: LD_INT 1
5094: DOUBLE
5095: EQUAL
5096: IFTRUE 5100
5098: GO 5111
5100: POP
// begin result = 1 ;
5101: LD_ADDR_VAR 0 1
5105: PUSH
5106: LD_INT 1
5108: ST_TO_ADDR
// end ; 2 :
5109: GO 5150
5111: LD_INT 2
5113: DOUBLE
5114: EQUAL
5115: IFTRUE 5119
5117: GO 5130
5119: POP
// begin result = 2 ;
5120: LD_ADDR_VAR 0 1
5124: PUSH
5125: LD_INT 2
5127: ST_TO_ADDR
// end ; 3 :
5128: GO 5150
5130: LD_INT 3
5132: DOUBLE
5133: EQUAL
5134: IFTRUE 5138
5136: GO 5149
5138: POP
// begin result = 3 ;
5139: LD_ADDR_VAR 0 1
5143: PUSH
5144: LD_INT 3
5146: ST_TO_ADDR
// end ; end ;
5147: GO 5150
5149: POP
// end ;
5150: LD_VAR 0 1
5154: RET
// export function ShowQuery2 ; begin
5155: LD_INT 0
5157: PPUSH
// case query ( QKill2 ) of 1 :
5158: LD_STRING QKill2
5160: PPUSH
5161: CALL_OW 97
5165: PUSH
5166: LD_INT 1
5168: DOUBLE
5169: EQUAL
5170: IFTRUE 5174
5172: GO 5185
5174: POP
// begin result = 1 ;
5175: LD_ADDR_VAR 0 1
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// end ; 2 :
5183: GO 5205
5185: LD_INT 2
5187: DOUBLE
5188: EQUAL
5189: IFTRUE 5193
5191: GO 5204
5193: POP
// begin result = 2 ;
5194: LD_ADDR_VAR 0 1
5198: PUSH
5199: LD_INT 2
5201: ST_TO_ADDR
// end ; end ;
5202: GO 5205
5204: POP
// end ;
5205: LD_VAR 0 1
5209: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5210: LD_INT 0
5212: PPUSH
5213: PPUSH
5214: PPUSH
5215: PPUSH
// for i = 1 to 72 do
5216: LD_ADDR_VAR 0 5
5220: PUSH
5221: DOUBLE
5222: LD_INT 1
5224: DEC
5225: ST_TO_ADDR
5226: LD_INT 72
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5288
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5232: LD_VAR 0 5
5236: PPUSH
5237: LD_VAR 0 1
5241: PPUSH
5242: CALL_OW 321
5246: PUSH
5247: LD_INT 1
5249: EQUAL
5250: PUSH
5251: LD_VAR 0 5
5255: PPUSH
5256: LD_VAR 0 3
5260: PPUSH
5261: CALL_OW 482
5265: PUSH
5266: LD_INT 1
5268: EQUAL
5269: AND
5270: IFFALSE 5286
// AddComResearch ( lab , i ) ;
5272: LD_VAR 0 2
5276: PPUSH
5277: LD_VAR 0 5
5281: PPUSH
5282: CALL_OW 184
5286: GO 5229
5288: POP
5289: POP
// end ;
5290: LD_VAR 0 4
5294: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
5299: PPUSH
5300: PPUSH
5301: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5302: LD_ADDR_VAR 0 6
5306: PUSH
5307: LD_INT 22
5309: PUSH
5310: LD_VAR 0 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 2
5321: PUSH
5322: LD_INT 25
5324: PUSH
5325: LD_INT 2
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: LD_INT 25
5334: PUSH
5335: LD_INT 16
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: LIST
5346: PUSH
5347: LD_INT 24
5349: PUSH
5350: LD_INT 1000
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5367: LD_ADDR_VAR 0 4
5371: PUSH
5372: LD_INT 22
5374: PUSH
5375: LD_VAR 0 1
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PUSH
5384: LD_INT 21
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: LD_INT 24
5399: PUSH
5400: LD_INT 1000
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: PUSH
5416: EMPTY
5417: LIST
5418: PPUSH
5419: CALL_OW 69
5423: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5424: LD_VAR 0 4
5428: PUSH
5429: LD_INT 0
5431: GREATER
5432: PUSH
5433: LD_VAR 0 6
5437: PUSH
5438: LD_INT 0
5440: GREATER
5441: AND
5442: IFFALSE 5508
// begin for i in engineerOk_list do
5444: LD_ADDR_VAR 0 5
5448: PUSH
5449: LD_VAR 0 6
5453: PUSH
5454: FOR_IN
5455: IFFALSE 5506
// begin for j in buildings_list do
5457: LD_ADDR_VAR 0 7
5461: PUSH
5462: LD_VAR 0 4
5466: PUSH
5467: FOR_IN
5468: IFFALSE 5502
// begin AddComExitBuilding ( i ) ;
5470: LD_VAR 0 5
5474: PPUSH
5475: CALL_OW 182
// wait ( 0 0$1 ) ;
5479: LD_INT 35
5481: PPUSH
5482: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5486: LD_VAR 0 5
5490: PPUSH
5491: LD_VAR 0 7
5495: PPUSH
5496: CALL_OW 190
// end ;
5500: GO 5467
5502: POP
5503: POP
// end ;
5504: GO 5454
5506: POP
5507: POP
// end ; if buildings_list = 0 then
5508: LD_VAR 0 4
5512: PUSH
5513: LD_INT 0
5515: EQUAL
5516: IFFALSE 5549
// begin for i in engineerOK_list do
5518: LD_ADDR_VAR 0 5
5522: PUSH
5523: LD_VAR 0 6
5527: PUSH
5528: FOR_IN
5529: IFFALSE 5547
// begin ComEnterUnit ( i , building ) ;
5531: LD_VAR 0 5
5535: PPUSH
5536: LD_VAR 0 2
5540: PPUSH
5541: CALL_OW 120
// end ;
5545: GO 5528
5547: POP
5548: POP
// end ; end ;
5549: LD_VAR 0 3
5553: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5554: LD_INT 0
5556: PPUSH
5557: PPUSH
5558: PPUSH
5559: PPUSH
5560: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5561: LD_ADDR_VAR 0 6
5565: PUSH
5566: LD_INT 22
5568: PUSH
5569: LD_VAR 0 1
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 25
5580: PUSH
5581: LD_INT 4
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL_OW 69
5596: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5597: LD_ADDR_VAR 0 9
5601: PUSH
5602: LD_VAR 0 3
5606: PPUSH
5607: LD_INT 22
5609: PUSH
5610: LD_VAR 0 1
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 21
5621: PUSH
5622: LD_INT 1
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PUSH
5629: LD_INT 3
5631: PUSH
5632: LD_INT 24
5634: PUSH
5635: LD_INT 750
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: PPUSH
5651: CALL_OW 70
5655: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5656: LD_VAR 0 9
5660: PUSH
5661: LD_INT 0
5663: GREATER
5664: PUSH
5665: LD_VAR 0 6
5669: PUSH
5670: LD_INT 0
5672: GREATER
5673: AND
5674: IFFALSE 5801
// begin for i = 1 to damageUnits do
5676: LD_ADDR_VAR 0 7
5680: PUSH
5681: DOUBLE
5682: LD_INT 1
5684: DEC
5685: ST_TO_ADDR
5686: LD_VAR 0 9
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5716
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5694: LD_VAR 0 9
5698: PUSH
5699: LD_VAR 0 7
5703: ARRAY
5704: PPUSH
5705: LD_VAR 0 2
5709: PPUSH
5710: CALL_OW 113
5714: GO 5691
5716: POP
5717: POP
// for i in sci_list do
5718: LD_ADDR_VAR 0 7
5722: PUSH
5723: LD_VAR 0 6
5727: PUSH
5728: FOR_IN
5729: IFFALSE 5797
// begin ComExitBuilding ( i ) ;
5731: LD_VAR 0 7
5735: PPUSH
5736: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5740: LD_ADDR_VAR 0 8
5744: PUSH
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_INT 22
5752: PUSH
5753: LD_VAR 0 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PPUSH
5762: CALL_OW 70
5766: PUSH
5767: FOR_IN
5768: IFFALSE 5793
// begin AddComHeal ( i , j ) ;
5770: LD_VAR 0 7
5774: PPUSH
5775: LD_VAR 0 8
5779: PPUSH
5780: CALL_OW 188
// wait ( 1 1$0 ) ;
5784: LD_INT 2100
5786: PPUSH
5787: CALL_OW 67
// end ;
5791: GO 5767
5793: POP
5794: POP
// end ;
5795: GO 5728
5797: POP
5798: POP
// end else
5799: GO 5815
// begin AddComEnterUnit ( sci_list , build ) ;
5801: LD_VAR 0 6
5805: PPUSH
5806: LD_VAR 0 4
5810: PPUSH
5811: CALL_OW 180
// end ; end ;
5815: LD_VAR 0 5
5819: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5820: LD_INT 0
5822: PPUSH
5823: PPUSH
5824: PPUSH
5825: PPUSH
5826: PPUSH
5827: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5828: LD_INT 22
5830: PUSH
5831: LD_VAR 0 1
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: LD_INT 21
5842: PUSH
5843: LD_INT 2
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 69
5858: PUSH
5859: LD_VAR 0 3
5863: LESSEQUAL
5864: IFFALSE 5931
// for i = 1 to vehCount do
5866: LD_ADDR_VAR 0 10
5870: PUSH
5871: DOUBLE
5872: LD_INT 1
5874: DEC
5875: ST_TO_ADDR
5876: LD_VAR 0 3
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5929
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5884: LD_VAR 0 2
5888: PPUSH
5889: LD_VAR 0 8
5893: PPUSH
5894: LD_VAR 0 6
5898: PPUSH
5899: LD_VAR 0 7
5903: PPUSH
5904: LD_VAR 0 5
5908: PUSH
5909: LD_INT 1
5911: PPUSH
5912: LD_VAR 0 5
5916: PPUSH
5917: CALL_OW 12
5921: ARRAY
5922: PPUSH
5923: CALL_OW 185
5927: GO 5881
5929: POP
5930: POP
// repeat wait ( 0 0$1 ) ;
5931: LD_INT 35
5933: PPUSH
5934: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5938: LD_INT 22
5940: PUSH
5941: LD_VAR 0 1
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 21
5952: PUSH
5953: LD_INT 2
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 24
5962: PUSH
5963: LD_INT 250
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 69
5979: PUSH
5980: LD_VAR 0 3
5984: GREATEREQUAL
5985: IFFALSE 5931
// repeat begin wait ( 0 0$1 ) ;
5987: LD_INT 35
5989: PPUSH
5990: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5994: LD_ADDR_VAR 0 10
5998: PUSH
5999: LD_INT 22
6001: PUSH
6002: LD_VAR 0 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 21
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 24
6023: PUSH
6024: LD_INT 651
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: PPUSH
6036: CALL_OW 69
6040: PUSH
6041: FOR_IN
6042: IFFALSE 6218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6044: LD_ADDR_VAR 0 13
6048: PUSH
6049: LD_INT 22
6051: PUSH
6052: LD_VAR 0 4
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: CALL_OW 69
6065: PPUSH
6066: LD_VAR 0 10
6070: PPUSH
6071: CALL_OW 74
6075: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6076: LD_ADDR_VAR 0 14
6080: PUSH
6081: LD_INT 22
6083: PUSH
6084: LD_VAR 0 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 2
6095: PUSH
6096: LD_INT 59
6098: PUSH
6099: EMPTY
6100: LIST
6101: PUSH
6102: LD_INT 21
6104: PUSH
6105: LD_INT 1
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 21
6114: PUSH
6115: LD_INT 2
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: EMPTY
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: PPUSH
6140: LD_VAR 0 10
6144: PPUSH
6145: CALL_OW 74
6149: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6150: LD_VAR 0 10
6154: PPUSH
6155: LD_VAR 0 13
6159: PPUSH
6160: CALL_OW 296
6164: PUSH
6165: LD_INT 8
6167: PLUS
6168: PUSH
6169: LD_VAR 0 10
6173: PPUSH
6174: LD_VAR 0 14
6178: PPUSH
6179: CALL_OW 296
6183: LESS
6184: IFFALSE 6202
// begin ComAttackUnit ( i , target1 ) ;
6186: LD_VAR 0 10
6190: PPUSH
6191: LD_VAR 0 13
6195: PPUSH
6196: CALL_OW 115
// end else
6200: GO 6216
// begin ComAttackUnit ( i , target2 ) ;
6202: LD_VAR 0 10
6206: PPUSH
6207: LD_VAR 0 14
6211: PPUSH
6212: CALL_OW 115
// end ; end ;
6216: GO 6041
6218: POP
6219: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6220: LD_INT 22
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 21
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: LD_INT 34
6245: PUSH
6246: LD_INT 51
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: PUSH
6267: LD_INT 0
6269: EQUAL
6270: IFFALSE 5987
// end ;
6272: LD_VAR 0 9
6276: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
// enable ;
6283: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6284: LD_ADDR_VAR 0 7
6288: PUSH
6289: LD_VAR 0 3
6293: PPUSH
6294: CALL_OW 435
6298: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6299: LD_ADDR_VAR 0 6
6303: PUSH
6304: LD_INT 22
6306: PUSH
6307: LD_VAR 0 1
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 34
6318: PUSH
6319: LD_VAR 0 2
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6337: LD_VAR 0 6
6341: PUSH
6342: LD_INT 0
6344: GREATER
6345: PUSH
6346: LD_VAR 0 3
6350: PPUSH
6351: CALL_OW 435
6355: AND
6356: PUSH
6357: LD_VAR 0 7
6361: PUSH
6362: LD_INT 0
6364: GREATER
6365: AND
6366: IFFALSE 6415
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6368: LD_VAR 0 6
6372: PUSH
6373: LD_INT 1
6375: ARRAY
6376: PPUSH
6377: LD_VAR 0 7
6381: PUSH
6382: LD_INT 1
6384: ARRAY
6385: PPUSH
6386: LD_VAR 0 7
6390: PUSH
6391: LD_INT 2
6393: ARRAY
6394: PPUSH
6395: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6399: LD_VAR 0 6
6403: PUSH
6404: LD_INT 1
6406: ARRAY
6407: PPUSH
6408: LD_INT 100
6410: PPUSH
6411: CALL_OW 240
// end ; clear_crates := false ;
6415: LD_ADDR_VAR 0 5
6419: PUSH
6420: LD_INT 0
6422: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6423: LD_INT 35
6425: PPUSH
6426: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6430: LD_VAR 0 6
6434: PUSH
6435: LD_INT 1
6437: ARRAY
6438: PPUSH
6439: CALL_OW 315
6443: NOT
6444: PUSH
6445: LD_VAR 0 5
6449: OR
6450: IFFALSE 6423
// end ;
6452: LD_VAR 0 4
6456: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
6462: PPUSH
6463: PPUSH
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
6468: PPUSH
6469: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6470: LD_ADDR_VAR 0 9
6474: PUSH
6475: LD_INT 22
6477: PUSH
6478: LD_VAR 0 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 21
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 24
6499: PUSH
6500: LD_INT 660
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 3
6509: PUSH
6510: LD_INT 58
6512: PUSH
6513: EMPTY
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 34
6525: PUSH
6526: LD_INT 53
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: PPUSH
6544: CALL_OW 69
6548: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6549: LD_ADDR_VAR 0 10
6553: PUSH
6554: LD_INT 22
6556: PUSH
6557: LD_VAR 0 1
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 2
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 3
6578: PUSH
6579: LD_INT 24
6581: PUSH
6582: LD_INT 660
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 69
6602: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6603: LD_ADDR_VAR 0 11
6607: PUSH
6608: LD_VAR 0 2
6612: PPUSH
6613: LD_INT 22
6615: PUSH
6616: LD_VAR 0 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 3
6637: PUSH
6638: LD_INT 24
6640: PUSH
6641: LD_INT 1000
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 70
6661: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6662: LD_ADDR_VAR 0 12
6666: PUSH
6667: LD_VAR 0 2
6671: PPUSH
6672: LD_INT 22
6674: PUSH
6675: LD_VAR 0 1
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 21
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 24
6696: PUSH
6697: LD_INT 1000
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 58
6706: PUSH
6707: EMPTY
6708: LIST
6709: PUSH
6710: LD_INT 3
6712: PUSH
6713: LD_INT 34
6715: PUSH
6716: LD_INT 53
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: PPUSH
6734: CALL_OW 70
6738: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6739: LD_ADDR_VAR 0 13
6743: PUSH
6744: EMPTY
6745: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6746: LD_ADDR_VAR 0 14
6750: PUSH
6751: LD_VAR 0 2
6755: PPUSH
6756: LD_INT 22
6758: PUSH
6759: LD_VAR 0 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 25
6770: PUSH
6771: LD_INT 3
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 70
6786: ST_TO_ADDR
// if damageVehicle_list > 0 then
6787: LD_VAR 0 10
6791: PUSH
6792: LD_INT 0
6794: GREATER
6795: IFFALSE 6833
// begin for i in damageVehicle_list do
6797: LD_ADDR_VAR 0 7
6801: PUSH
6802: LD_VAR 0 10
6806: PUSH
6807: FOR_IN
6808: IFFALSE 6831
// begin ComMoveXY ( i , repX , repY ) ;
6810: LD_VAR 0 7
6814: PPUSH
6815: LD_VAR 0 3
6819: PPUSH
6820: LD_VAR 0 4
6824: PPUSH
6825: CALL_OW 111
// end ;
6829: GO 6807
6831: POP
6832: POP
// end ; if vehicleNeedRepair_list > 0 then
6833: LD_VAR 0 11
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6928
// begin for i in vehicleNeedRepair_list do
6843: LD_ADDR_VAR 0 7
6847: PUSH
6848: LD_VAR 0 11
6852: PUSH
6853: FOR_IN
6854: IFFALSE 6926
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6856: LD_ADDR_VAR 0 13
6860: PUSH
6861: LD_VAR 0 13
6865: PUSH
6866: LD_VAR 0 7
6870: PPUSH
6871: CALL_OW 313
6875: ADD
6876: ST_TO_ADDR
// for j in mechanicInside_list do
6877: LD_ADDR_VAR 0 8
6881: PUSH
6882: LD_VAR 0 13
6886: PUSH
6887: FOR_IN
6888: IFFALSE 6922
// begin ComExitVehicle ( i ) ;
6890: LD_VAR 0 7
6894: PPUSH
6895: CALL_OW 121
// wait ( 0 0$1 ) ;
6899: LD_INT 35
6901: PPUSH
6902: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6906: LD_VAR 0 7
6910: PPUSH
6911: LD_VAR 0 8
6915: PPUSH
6916: CALL_OW 129
// end ;
6920: GO 6887
6922: POP
6923: POP
// end ;
6924: GO 6853
6926: POP
6927: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6928: LD_VAR 0 12
6932: PUSH
6933: LD_INT 0
6935: GREATER
6936: IFFALSE 6976
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6938: LD_VAR 0 14
6942: PUSH
6943: LD_INT 1
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 12
6951: PUSH
6952: LD_INT 1
6954: ARRAY
6955: PPUSH
6956: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6960: LD_VAR 0 12
6964: PUSH
6965: LD_INT 1
6967: ARRAY
6968: PPUSH
6969: LD_INT 100
6971: PPUSH
6972: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6976: LD_VAR 0 9
6980: PUSH
6981: LD_INT 0
6983: GREATER
6984: IFFALSE 7175
// begin for i in vehicleOK_list do
6986: LD_ADDR_VAR 0 7
6990: PUSH
6991: LD_VAR 0 9
6995: PUSH
6996: FOR_IN
6997: IFFALSE 7173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6999: LD_ADDR_VAR 0 15
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_VAR 0 5
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PPUSH
7016: CALL_OW 69
7020: PPUSH
7021: LD_VAR 0 7
7025: PPUSH
7026: CALL_OW 74
7030: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7031: LD_ADDR_VAR 0 16
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_VAR 0 5
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 59
7053: PUSH
7054: EMPTY
7055: LIST
7056: PUSH
7057: LD_INT 21
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 2
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: EMPTY
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: PPUSH
7095: LD_VAR 0 7
7099: PPUSH
7100: CALL_OW 74
7104: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7105: LD_VAR 0 7
7109: PPUSH
7110: LD_VAR 0 15
7114: PPUSH
7115: CALL_OW 296
7119: PUSH
7120: LD_INT 8
7122: PLUS
7123: PUSH
7124: LD_VAR 0 7
7128: PPUSH
7129: LD_VAR 0 16
7133: PPUSH
7134: CALL_OW 296
7138: LESS
7139: IFFALSE 7157
// begin ComAttackUnit ( i , target1 ) ;
7141: LD_VAR 0 7
7145: PPUSH
7146: LD_VAR 0 15
7150: PPUSH
7151: CALL_OW 115
// end else
7155: GO 7171
// begin ComAttackUnit ( i , target2 ) ;
7157: LD_VAR 0 7
7161: PPUSH
7162: LD_VAR 0 16
7166: PPUSH
7167: CALL_OW 115
// end ; end ;
7171: GO 6996
7173: POP
7174: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7175: LD_ADDR_VAR 0 7
7179: PUSH
7180: LD_VAR 0 2
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 25
7199: PUSH
7200: LD_INT 3
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PPUSH
7211: CALL_OW 70
7215: NOT
7216: PUSH
7217: FOR_IN
7218: IFFALSE 7241
// ComMoveXY ( i , repX , repY ) ;
7220: LD_VAR 0 7
7224: PPUSH
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_VAR 0 4
7234: PPUSH
7235: CALL_OW 111
7239: GO 7217
7241: POP
7242: POP
// end ;
7243: LD_VAR 0 6
7247: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7252: LD_INT 22
7254: PUSH
7255: LD_VAR 0 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 25
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: PUSH
7283: LD_INT 0
7285: GREATER
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_VAR 0 1
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 21
7301: PUSH
7302: LD_INT 3
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 3
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: LD_INT 1000
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: PPUSH
7331: CALL_OW 69
7335: PUSH
7336: LD_INT 0
7338: EQUAL
7339: AND
7340: PUSH
7341: LD_VAR 0 2
7345: PUSH
7346: LD_INT 0
7348: GREATER
7349: AND
7350: IFFALSE 7449
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7352: LD_ADDR_VAR 0 4
7356: PUSH
7357: LD_INT 22
7359: PUSH
7360: LD_VAR 0 1
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 25
7371: PUSH
7372: LD_INT 2
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 69
7387: PUSH
7388: FOR_IN
7389: IFFALSE 7447
// begin AddComExitBuilding ( i ) ;
7391: LD_VAR 0 4
7395: PPUSH
7396: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7400: LD_VAR 0 4
7404: PPUSH
7405: LD_VAR 0 2
7409: PUSH
7410: LD_INT 1
7412: ARRAY
7413: PPUSH
7414: LD_VAR 0 2
7418: PUSH
7419: LD_INT 2
7421: ARRAY
7422: PPUSH
7423: LD_VAR 0 2
7427: PUSH
7428: LD_INT 3
7430: ARRAY
7431: PPUSH
7432: LD_VAR 0 2
7436: PUSH
7437: LD_INT 4
7439: ARRAY
7440: PPUSH
7441: CALL_OW 205
// end ;
7445: GO 7388
7447: POP
7448: POP
// end ; end ;
7449: LD_VAR 0 3
7453: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7454: LD_INT 0
7456: PPUSH
7457: PPUSH
7458: PPUSH
7459: PPUSH
7460: PPUSH
7461: PPUSH
7462: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7463: LD_ADDR_VAR 0 7
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 25
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_INT 56
7492: PUSH
7493: EMPTY
7494: LIST
7495: PUSH
7496: LD_INT 24
7498: PUSH
7499: LD_INT 700
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PPUSH
7512: CALL_OW 69
7516: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7517: LD_ADDR_VAR 0 8
7521: PUSH
7522: LD_INT 22
7524: PUSH
7525: LD_VAR 0 1
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 30
7536: PUSH
7537: LD_INT 32
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 58
7546: PUSH
7547: EMPTY
7548: LIST
7549: PUSH
7550: LD_INT 24
7552: PUSH
7553: LD_INT 251
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PPUSH
7566: CALL_OW 69
7570: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7571: LD_ADDR_VAR 0 10
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_VAR 0 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 25
7593: PUSH
7594: LD_INT 5
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 25
7603: PUSH
7604: LD_INT 8
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 25
7613: PUSH
7614: LD_INT 9
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 69
7635: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7636: LD_ADDR_VAR 0 9
7640: PUSH
7641: LD_VAR 0 2
7645: PPUSH
7646: CALL_OW 313
7650: PUSH
7651: LD_VAR 0 10
7655: DIFF
7656: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7657: LD_VAR 0 8
7661: PUSH
7662: LD_INT 0
7664: EQUAL
7665: PUSH
7666: LD_VAR 0 9
7670: PUSH
7671: LD_INT 0
7673: EQUAL
7674: AND
7675: IFFALSE 7721
// begin for i in soldiers_list do
7677: LD_ADDR_VAR 0 5
7681: PUSH
7682: LD_VAR 0 7
7686: PUSH
7687: FOR_IN
7688: IFFALSE 7717
// begin if IsOK ( build ) then
7690: LD_VAR 0 2
7694: PPUSH
7695: CALL_OW 302
7699: IFFALSE 7715
// ComEnterUnit ( i , build ) ;
7701: LD_VAR 0 5
7705: PPUSH
7706: LD_VAR 0 2
7710: PPUSH
7711: CALL_OW 120
// end ;
7715: GO 7687
7717: POP
7718: POP
// end else
7719: GO 7806
// begin for i = 1 to turretList do
7721: LD_ADDR_VAR 0 5
7725: PUSH
7726: DOUBLE
7727: LD_INT 1
7729: DEC
7730: ST_TO_ADDR
7731: LD_VAR 0 8
7735: PUSH
7736: FOR_TO
7737: IFFALSE 7804
// begin for j = 1 to temp do
7739: LD_ADDR_VAR 0 6
7743: PUSH
7744: DOUBLE
7745: LD_INT 1
7747: DEC
7748: ST_TO_ADDR
7749: LD_VAR 0 9
7753: PUSH
7754: FOR_TO
7755: IFFALSE 7800
// begin ComExitBuilding ( temp [ j ] ) ;
7757: LD_VAR 0 9
7761: PUSH
7762: LD_VAR 0 6
7766: ARRAY
7767: PPUSH
7768: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7772: LD_VAR 0 9
7776: PUSH
7777: LD_VAR 0 6
7781: ARRAY
7782: PPUSH
7783: LD_VAR 0 8
7787: PUSH
7788: LD_VAR 0 5
7792: ARRAY
7793: PPUSH
7794: CALL_OW 180
// end ;
7798: GO 7754
7800: POP
7801: POP
// end ;
7802: GO 7736
7804: POP
7805: POP
// end ; end ;
7806: LD_VAR 0 4
7810: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7811: LD_INT 0
7813: PPUSH
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7818: LD_ADDR_VAR 0 6
7822: PUSH
7823: LD_INT 22
7825: PUSH
7826: LD_VAR 0 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 2
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 31
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 32
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 30
7860: PUSH
7861: LD_INT 33
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 30
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 30
7880: PUSH
7881: LD_INT 5
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7905: LD_ADDR_VAR 0 7
7909: PUSH
7910: LD_INT 22
7912: PUSH
7913: LD_VAR 0 2
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 3
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 58
7934: PUSH
7935: EMPTY
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 69
7947: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7948: LD_VAR 0 6
7952: PUSH
7953: LD_INT 0
7955: GREATER
7956: PUSH
7957: LD_VAR 0 7
7961: PUSH
7962: LD_INT 0
7964: GREATER
7965: AND
7966: IFFALSE 8059
// begin for i in turretsList do
7968: LD_ADDR_VAR 0 4
7972: PUSH
7973: LD_VAR 0 6
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8057
// begin for j in enemyBuildings do
7981: LD_ADDR_VAR 0 5
7985: PUSH
7986: LD_VAR 0 7
7990: PUSH
7991: FOR_IN
7992: IFFALSE 8053
// begin display_strings = [ GetDistUnits ( i , j ) ] ;
7994: LD_ADDR_OWVAR 47
7998: PUSH
7999: LD_VAR 0 4
8003: PPUSH
8004: LD_VAR 0 5
8008: PPUSH
8009: CALL_OW 296
8013: PUSH
8014: EMPTY
8015: LIST
8016: ST_TO_ADDR
// if GetDistUnits ( i , j ) < 20 then
8017: LD_VAR 0 4
8021: PPUSH
8022: LD_VAR 0 5
8026: PPUSH
8027: CALL_OW 296
8031: PUSH
8032: LD_INT 20
8034: LESS
8035: IFFALSE 8051
// begin ComAttackUnit ( i , j ) ;
8037: LD_VAR 0 4
8041: PPUSH
8042: LD_VAR 0 5
8046: PPUSH
8047: CALL_OW 115
// end ; end ;
8051: GO 7991
8053: POP
8054: POP
// end ;
8055: GO 7978
8057: POP
8058: POP
// end ; end ;
8059: LD_VAR 0 3
8063: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8064: LD_INT 0
8066: PPUSH
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
// for i = 1 to medicCount do
8077: LD_ADDR_VAR 0 14
8081: PUSH
8082: DOUBLE
8083: LD_INT 1
8085: DEC
8086: ST_TO_ADDR
8087: LD_VAR 0 7
8091: PUSH
8092: FOR_TO
8093: IFFALSE 8175
// begin uc_side = side ;
8095: LD_ADDR_OWVAR 20
8099: PUSH
8100: LD_VAR 0 1
8104: ST_TO_ADDR
// uc_nation = nation ;
8105: LD_ADDR_OWVAR 21
8109: PUSH
8110: LD_VAR 0 2
8114: ST_TO_ADDR
// hc_name =  ;
8115: LD_ADDR_OWVAR 26
8119: PUSH
8120: LD_STRING 
8122: ST_TO_ADDR
// hc_gallery =  ;
8123: LD_ADDR_OWVAR 33
8127: PUSH
8128: LD_STRING 
8130: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8131: LD_INT 0
8133: PPUSH
8134: LD_INT 4
8136: PPUSH
8137: LD_VAR 0 8
8141: PPUSH
8142: CALL_OW 380
// un = CreateHuman ;
8146: LD_ADDR_VAR 0 16
8150: PUSH
8151: CALL_OW 44
8155: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8156: LD_VAR 0 16
8160: PPUSH
8161: LD_VAR 0 9
8165: PPUSH
8166: LD_INT 0
8168: PPUSH
8169: CALL_OW 49
// end ;
8173: GO 8092
8175: POP
8176: POP
// for i = 1 to soldierCount do
8177: LD_ADDR_VAR 0 14
8181: PUSH
8182: DOUBLE
8183: LD_INT 1
8185: DEC
8186: ST_TO_ADDR
8187: LD_VAR 0 3
8191: PUSH
8192: FOR_TO
8193: IFFALSE 8275
// begin uc_side = side ;
8195: LD_ADDR_OWVAR 20
8199: PUSH
8200: LD_VAR 0 1
8204: ST_TO_ADDR
// uc_nation = nation ;
8205: LD_ADDR_OWVAR 21
8209: PUSH
8210: LD_VAR 0 2
8214: ST_TO_ADDR
// hc_name =  ;
8215: LD_ADDR_OWVAR 26
8219: PUSH
8220: LD_STRING 
8222: ST_TO_ADDR
// hc_gallery =  ;
8223: LD_ADDR_OWVAR 33
8227: PUSH
8228: LD_STRING 
8230: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8231: LD_INT 0
8233: PPUSH
8234: LD_INT 1
8236: PPUSH
8237: LD_VAR 0 8
8241: PPUSH
8242: CALL_OW 380
// un = CreateHuman ;
8246: LD_ADDR_VAR 0 16
8250: PUSH
8251: CALL_OW 44
8255: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8256: LD_VAR 0 16
8260: PPUSH
8261: LD_VAR 0 9
8265: PPUSH
8266: LD_INT 0
8268: PPUSH
8269: CALL_OW 49
// end ;
8273: GO 8192
8275: POP
8276: POP
// for i = 1 to sniperCount do
8277: LD_ADDR_VAR 0 14
8281: PUSH
8282: DOUBLE
8283: LD_INT 1
8285: DEC
8286: ST_TO_ADDR
8287: LD_VAR 0 4
8291: PUSH
8292: FOR_TO
8293: IFFALSE 8375
// begin uc_side = side ;
8295: LD_ADDR_OWVAR 20
8299: PUSH
8300: LD_VAR 0 1
8304: ST_TO_ADDR
// uc_nation = nation ;
8305: LD_ADDR_OWVAR 21
8309: PUSH
8310: LD_VAR 0 2
8314: ST_TO_ADDR
// hc_name =  ;
8315: LD_ADDR_OWVAR 26
8319: PUSH
8320: LD_STRING 
8322: ST_TO_ADDR
// hc_gallery =  ;
8323: LD_ADDR_OWVAR 33
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8331: LD_INT 0
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: LD_VAR 0 8
8341: PPUSH
8342: CALL_OW 380
// un = CreateHuman ;
8346: LD_ADDR_VAR 0 16
8350: PUSH
8351: CALL_OW 44
8355: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8356: LD_VAR 0 16
8360: PPUSH
8361: LD_VAR 0 9
8365: PPUSH
8366: LD_INT 0
8368: PPUSH
8369: CALL_OW 49
// end ;
8373: GO 8292
8375: POP
8376: POP
// for i = 1 to bazookCount do
8377: LD_ADDR_VAR 0 14
8381: PUSH
8382: DOUBLE
8383: LD_INT 1
8385: DEC
8386: ST_TO_ADDR
8387: LD_VAR 0 5
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8475
// begin uc_side = side ;
8395: LD_ADDR_OWVAR 20
8399: PUSH
8400: LD_VAR 0 1
8404: ST_TO_ADDR
// uc_nation = nation ;
8405: LD_ADDR_OWVAR 21
8409: PUSH
8410: LD_VAR 0 2
8414: ST_TO_ADDR
// hc_name =  ;
8415: LD_ADDR_OWVAR 26
8419: PUSH
8420: LD_STRING 
8422: ST_TO_ADDR
// hc_gallery =  ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING 
8430: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8431: LD_INT 0
8433: PPUSH
8434: LD_INT 9
8436: PPUSH
8437: LD_VAR 0 8
8441: PPUSH
8442: CALL_OW 380
// un = CreateHuman ;
8446: LD_ADDR_VAR 0 16
8450: PUSH
8451: CALL_OW 44
8455: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8456: LD_VAR 0 16
8460: PPUSH
8461: LD_VAR 0 9
8465: PPUSH
8466: LD_INT 0
8468: PPUSH
8469: CALL_OW 49
// end ;
8473: GO 8392
8475: POP
8476: POP
// for i = 1 to mortalCount do
8477: LD_ADDR_VAR 0 14
8481: PUSH
8482: DOUBLE
8483: LD_INT 1
8485: DEC
8486: ST_TO_ADDR
8487: LD_VAR 0 6
8491: PUSH
8492: FOR_TO
8493: IFFALSE 8575
// begin uc_side = side ;
8495: LD_ADDR_OWVAR 20
8499: PUSH
8500: LD_VAR 0 1
8504: ST_TO_ADDR
// uc_nation = nation ;
8505: LD_ADDR_OWVAR 21
8509: PUSH
8510: LD_VAR 0 2
8514: ST_TO_ADDR
// hc_name =  ;
8515: LD_ADDR_OWVAR 26
8519: PUSH
8520: LD_STRING 
8522: ST_TO_ADDR
// hc_gallery =  ;
8523: LD_ADDR_OWVAR 33
8527: PUSH
8528: LD_STRING 
8530: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8531: LD_INT 0
8533: PPUSH
8534: LD_INT 8
8536: PPUSH
8537: LD_VAR 0 8
8541: PPUSH
8542: CALL_OW 380
// un = CreateHuman ;
8546: LD_ADDR_VAR 0 16
8550: PUSH
8551: CALL_OW 44
8555: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8556: LD_VAR 0 16
8560: PPUSH
8561: LD_VAR 0 9
8565: PPUSH
8566: LD_INT 0
8568: PPUSH
8569: CALL_OW 49
// end ;
8573: GO 8492
8575: POP
8576: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8577: LD_ADDR_VAR 0 19
8581: PUSH
8582: LD_INT 22
8584: PUSH
8585: LD_VAR 0 1
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 2
8596: PUSH
8597: LD_INT 25
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: LD_INT 25
8609: PUSH
8610: LD_INT 5
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 8
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 25
8629: PUSH
8630: LD_INT 9
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 69
8652: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8653: LD_ADDR_VAR 0 18
8657: PUSH
8658: LD_INT 22
8660: PUSH
8661: LD_VAR 0 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 4
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PPUSH
8684: CALL_OW 69
8688: ST_TO_ADDR
// for i in medic_list do
8689: LD_ADDR_VAR 0 14
8693: PUSH
8694: LD_VAR 0 18
8698: PUSH
8699: FOR_IN
8700: IFFALSE 8718
// ComMoveToArea ( i , healArea ) ;
8702: LD_VAR 0 14
8706: PPUSH
8707: LD_VAR 0 10
8711: PPUSH
8712: CALL_OW 113
8716: GO 8699
8718: POP
8719: POP
// if strategy = 1 then
8720: LD_VAR 0 12
8724: PUSH
8725: LD_INT 1
8727: EQUAL
8728: IFFALSE 9433
// begin repeat wait ( 0 0$3 ) ;
8730: LD_INT 105
8732: PPUSH
8733: CALL_OW 67
// for i in soldiersOK_list do
8737: LD_ADDR_VAR 0 14
8741: PUSH
8742: LD_VAR 0 19
8746: PUSH
8747: FOR_IN
8748: IFFALSE 8782
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8750: LD_VAR 0 14
8754: PPUSH
8755: LD_INT 80
8757: PPUSH
8758: LD_INT 109
8760: PPUSH
8761: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8765: LD_VAR 0 14
8769: PPUSH
8770: LD_INT 39
8772: PPUSH
8773: LD_INT 49
8775: PPUSH
8776: CALL_OW 174
// end ;
8780: GO 8747
8782: POP
8783: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8784: LD_INT 15
8786: PPUSH
8787: LD_INT 22
8789: PUSH
8790: LD_VAR 0 1
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 70
8803: PUSH
8804: LD_INT 0
8806: GREATER
8807: IFFALSE 8730
// repeat wait ( 0 0$1 ) ;
8809: LD_INT 35
8811: PPUSH
8812: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8816: LD_ADDR_VAR 0 17
8820: PUSH
8821: LD_INT 22
8823: PUSH
8824: LD_VAR 0 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 1
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 24
8841: PUSH
8842: LD_INT 550
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 24
8855: PUSH
8856: LD_INT 250
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PPUSH
8872: CALL_OW 69
8876: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8877: LD_ADDR_VAR 0 19
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_VAR 0 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 25
8899: PUSH
8900: LD_INT 1
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 25
8909: PUSH
8910: LD_INT 5
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 25
8919: PUSH
8920: LD_INT 8
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 25
8929: PUSH
8930: LD_INT 9
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 24
8946: PUSH
8947: LD_INT 1000
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: PPUSH
8959: CALL_OW 69
8963: ST_TO_ADDR
// if medicCount > 0 then
8964: LD_VAR 0 7
8968: PUSH
8969: LD_INT 0
8971: GREATER
8972: IFFALSE 9046
// begin if damageUnit_list > 0 then
8974: LD_VAR 0 17
8978: PUSH
8979: LD_INT 0
8981: GREATER
8982: IFFALSE 9046
// begin for i in damageUnit_list do
8984: LD_ADDR_VAR 0 14
8988: PUSH
8989: LD_VAR 0 17
8993: PUSH
8994: FOR_IN
8995: IFFALSE 9044
// begin ComMoveToArea ( i , healArea ) ;
8997: LD_VAR 0 14
9001: PPUSH
9002: LD_VAR 0 10
9006: PPUSH
9007: CALL_OW 113
// for j in medic_list do
9011: LD_ADDR_VAR 0 15
9015: PUSH
9016: LD_VAR 0 18
9020: PUSH
9021: FOR_IN
9022: IFFALSE 9040
// AddComHeal ( j , i ) ;
9024: LD_VAR 0 15
9028: PPUSH
9029: LD_VAR 0 14
9033: PPUSH
9034: CALL_OW 188
9038: GO 9021
9040: POP
9041: POP
// end ;
9042: GO 8994
9044: POP
9045: POP
// end ; end ; for i in soldiersOK_list do
9046: LD_ADDR_VAR 0 14
9050: PUSH
9051: LD_VAR 0 19
9055: PUSH
9056: FOR_IN
9057: IFFALSE 9233
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9059: LD_ADDR_VAR 0 22
9063: PUSH
9064: LD_INT 22
9066: PUSH
9067: LD_VAR 0 11
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 69
9080: PPUSH
9081: LD_VAR 0 14
9085: PPUSH
9086: CALL_OW 74
9090: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9091: LD_ADDR_VAR 0 23
9095: PUSH
9096: LD_INT 22
9098: PUSH
9099: LD_VAR 0 11
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 59
9113: PUSH
9114: EMPTY
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 21
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: PPUSH
9150: CALL_OW 69
9154: PPUSH
9155: LD_VAR 0 14
9159: PPUSH
9160: CALL_OW 74
9164: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9165: LD_VAR 0 14
9169: PPUSH
9170: LD_VAR 0 22
9174: PPUSH
9175: CALL_OW 296
9179: PUSH
9180: LD_INT 8
9182: PLUS
9183: PUSH
9184: LD_VAR 0 14
9188: PPUSH
9189: LD_VAR 0 23
9193: PPUSH
9194: CALL_OW 296
9198: LESS
9199: IFFALSE 9217
// begin ComAttackUnit ( i , target1 ) ;
9201: LD_VAR 0 14
9205: PPUSH
9206: LD_VAR 0 22
9210: PPUSH
9211: CALL_OW 115
// end else
9215: GO 9231
// begin ComAttackUnit ( i , target2 ) ;
9217: LD_VAR 0 14
9221: PPUSH
9222: LD_VAR 0 23
9226: PPUSH
9227: CALL_OW 115
// end ; end ;
9231: GO 9056
9233: POP
9234: POP
// for i in soldiersOK_list do
9235: LD_ADDR_VAR 0 14
9239: PUSH
9240: LD_VAR 0 19
9244: PUSH
9245: FOR_IN
9246: IFFALSE 9422
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9248: LD_ADDR_VAR 0 22
9252: PUSH
9253: LD_INT 22
9255: PUSH
9256: LD_VAR 0 11
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 69
9269: PPUSH
9270: LD_VAR 0 14
9274: PPUSH
9275: CALL_OW 74
9279: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9280: LD_ADDR_VAR 0 23
9284: PUSH
9285: LD_INT 22
9287: PUSH
9288: LD_VAR 0 11
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 2
9299: PUSH
9300: LD_INT 59
9302: PUSH
9303: EMPTY
9304: LIST
9305: PUSH
9306: LD_INT 21
9308: PUSH
9309: LD_INT 1
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 21
9318: PUSH
9319: LD_INT 2
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: PPUSH
9344: LD_VAR 0 14
9348: PPUSH
9349: CALL_OW 74
9353: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9354: LD_VAR 0 14
9358: PPUSH
9359: LD_VAR 0 22
9363: PPUSH
9364: CALL_OW 296
9368: PUSH
9369: LD_INT 8
9371: PLUS
9372: PUSH
9373: LD_VAR 0 14
9377: PPUSH
9378: LD_VAR 0 23
9382: PPUSH
9383: CALL_OW 296
9387: LESS
9388: IFFALSE 9406
// begin ComAttackUnit ( i , target1 ) ;
9390: LD_VAR 0 14
9394: PPUSH
9395: LD_VAR 0 22
9399: PPUSH
9400: CALL_OW 115
// end else
9404: GO 9420
// begin ComAttackUnit ( i , target2 ) ;
9406: LD_VAR 0 14
9410: PPUSH
9411: LD_VAR 0 23
9415: PPUSH
9416: CALL_OW 115
// end ; end ;
9420: GO 9245
9422: POP
9423: POP
// until soldiersOK_list = [ ] ;
9424: LD_VAR 0 19
9428: PUSH
9429: EMPTY
9430: EQUAL
9431: IFFALSE 8809
// end ; if strategy = 2 then
9433: LD_VAR 0 12
9437: PUSH
9438: LD_INT 2
9440: EQUAL
9441: IFFALSE 10146
// begin repeat wait ( 0 0$1 ) ;
9443: LD_INT 35
9445: PPUSH
9446: CALL_OW 67
// for i in soldiersOK_list do
9450: LD_ADDR_VAR 0 14
9454: PUSH
9455: LD_VAR 0 19
9459: PUSH
9460: FOR_IN
9461: IFFALSE 9495
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9463: LD_VAR 0 14
9467: PPUSH
9468: LD_INT 117
9470: PPUSH
9471: LD_INT 97
9473: PPUSH
9474: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9478: LD_VAR 0 14
9482: PPUSH
9483: LD_INT 94
9485: PPUSH
9486: LD_INT 50
9488: PPUSH
9489: CALL_OW 174
// end ;
9493: GO 9460
9495: POP
9496: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9497: LD_INT 16
9499: PPUSH
9500: LD_INT 22
9502: PUSH
9503: LD_VAR 0 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PPUSH
9512: CALL_OW 70
9516: PUSH
9517: LD_INT 0
9519: GREATER
9520: IFFALSE 9443
// repeat wait ( 0 0$3 ) ;
9522: LD_INT 105
9524: PPUSH
9525: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9529: LD_ADDR_VAR 0 17
9533: PUSH
9534: LD_INT 22
9536: PUSH
9537: LD_VAR 0 1
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 1
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: LD_INT 24
9554: PUSH
9555: LD_INT 550
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 24
9568: PUSH
9569: LD_INT 250
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PPUSH
9585: CALL_OW 69
9589: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9590: LD_ADDR_VAR 0 19
9594: PUSH
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 1
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 5
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 8
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 25
9642: PUSH
9643: LD_INT 9
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 24
9659: PUSH
9660: LD_INT 1000
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: PPUSH
9672: CALL_OW 69
9676: ST_TO_ADDR
// if medicCount > 0 then
9677: LD_VAR 0 7
9681: PUSH
9682: LD_INT 0
9684: GREATER
9685: IFFALSE 9759
// begin if damageUnit_list > 0 then
9687: LD_VAR 0 17
9691: PUSH
9692: LD_INT 0
9694: GREATER
9695: IFFALSE 9759
// begin for i in damageUnit_list do
9697: LD_ADDR_VAR 0 14
9701: PUSH
9702: LD_VAR 0 17
9706: PUSH
9707: FOR_IN
9708: IFFALSE 9757
// begin ComMoveToArea ( i , healArea ) ;
9710: LD_VAR 0 14
9714: PPUSH
9715: LD_VAR 0 10
9719: PPUSH
9720: CALL_OW 113
// for j in medic_list do
9724: LD_ADDR_VAR 0 15
9728: PUSH
9729: LD_VAR 0 18
9733: PUSH
9734: FOR_IN
9735: IFFALSE 9753
// AddComHeal ( j , i ) ;
9737: LD_VAR 0 15
9741: PPUSH
9742: LD_VAR 0 14
9746: PPUSH
9747: CALL_OW 188
9751: GO 9734
9753: POP
9754: POP
// end ;
9755: GO 9707
9757: POP
9758: POP
// end ; end ; for i in soldiersOK_list do
9759: LD_ADDR_VAR 0 14
9763: PUSH
9764: LD_VAR 0 19
9768: PUSH
9769: FOR_IN
9770: IFFALSE 9946
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9772: LD_ADDR_VAR 0 22
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_VAR 0 11
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: PPUSH
9794: LD_VAR 0 14
9798: PPUSH
9799: CALL_OW 74
9803: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9804: LD_ADDR_VAR 0 23
9808: PUSH
9809: LD_INT 22
9811: PUSH
9812: LD_VAR 0 11
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 2
9823: PUSH
9824: LD_INT 59
9826: PUSH
9827: EMPTY
9828: LIST
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 1
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 2
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: EMPTY
9861: LIST
9862: PPUSH
9863: CALL_OW 69
9867: PPUSH
9868: LD_VAR 0 14
9872: PPUSH
9873: CALL_OW 74
9877: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9878: LD_VAR 0 14
9882: PPUSH
9883: LD_VAR 0 22
9887: PPUSH
9888: CALL_OW 296
9892: PUSH
9893: LD_INT 8
9895: PLUS
9896: PUSH
9897: LD_VAR 0 14
9901: PPUSH
9902: LD_VAR 0 23
9906: PPUSH
9907: CALL_OW 296
9911: LESS
9912: IFFALSE 9930
// begin ComAttackUnit ( i , target1 ) ;
9914: LD_VAR 0 14
9918: PPUSH
9919: LD_VAR 0 22
9923: PPUSH
9924: CALL_OW 115
// end else
9928: GO 9944
// begin ComAttackUnit ( i , target2 ) ;
9930: LD_VAR 0 14
9934: PPUSH
9935: LD_VAR 0 23
9939: PPUSH
9940: CALL_OW 115
// end ; end ;
9944: GO 9769
9946: POP
9947: POP
// for i in soldiersOK_list do
9948: LD_ADDR_VAR 0 14
9952: PUSH
9953: LD_VAR 0 19
9957: PUSH
9958: FOR_IN
9959: IFFALSE 10135
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9961: LD_ADDR_VAR 0 22
9965: PUSH
9966: LD_INT 22
9968: PUSH
9969: LD_VAR 0 11
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PPUSH
9978: CALL_OW 69
9982: PPUSH
9983: LD_VAR 0 14
9987: PPUSH
9988: CALL_OW 74
9992: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9993: LD_ADDR_VAR 0 23
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_VAR 0 11
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: LD_INT 59
10015: PUSH
10016: EMPTY
10017: LIST
10018: PUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 21
10031: PUSH
10032: LD_INT 2
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: EMPTY
10050: LIST
10051: PPUSH
10052: CALL_OW 69
10056: PPUSH
10057: LD_VAR 0 14
10061: PPUSH
10062: CALL_OW 74
10066: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10067: LD_VAR 0 14
10071: PPUSH
10072: LD_VAR 0 22
10076: PPUSH
10077: CALL_OW 296
10081: PUSH
10082: LD_INT 8
10084: PLUS
10085: PUSH
10086: LD_VAR 0 14
10090: PPUSH
10091: LD_VAR 0 23
10095: PPUSH
10096: CALL_OW 296
10100: LESS
10101: IFFALSE 10119
// begin ComAttackUnit ( i , target1 ) ;
10103: LD_VAR 0 14
10107: PPUSH
10108: LD_VAR 0 22
10112: PPUSH
10113: CALL_OW 115
// end else
10117: GO 10133
// begin ComAttackUnit ( i , target2 ) ;
10119: LD_VAR 0 14
10123: PPUSH
10124: LD_VAR 0 23
10128: PPUSH
10129: CALL_OW 115
// end ; end ;
10133: GO 9958
10135: POP
10136: POP
// until soldiersOK_list = [ ] ;
10137: LD_VAR 0 19
10141: PUSH
10142: EMPTY
10143: EQUAL
10144: IFFALSE 9522
// end ; end ; end_of_file
10146: LD_VAR 0 13
10150: RET
// every 0 0$01 do
10151: GO 10153
10153: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10154: LD_INT 22
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 25
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: PUSH
10183: LD_INT 0
10185: EQUAL
10186: IFFALSE 10200
// SetClass ( JMM , 2 ) ;
10188: LD_EXP 1
10192: PPUSH
10193: LD_INT 2
10195: PPUSH
10196: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10200: LD_STRING M1
10202: PPUSH
10203: CALL_OW 337
// case difficulty of 1 :
10207: LD_OWVAR 67
10211: PUSH
10212: LD_INT 1
10214: DOUBLE
10215: EQUAL
10216: IFTRUE 10220
10218: GO 10230
10220: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10221: LD_STRING M1-1
10223: PPUSH
10224: CALL_OW 337
10228: GO 10267
10230: LD_INT 2
10232: DOUBLE
10233: EQUAL
10234: IFTRUE 10238
10236: GO 10248
10238: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10239: LD_STRING M1-2
10241: PPUSH
10242: CALL_OW 337
10246: GO 10267
10248: LD_INT 3
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10266
10256: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10257: LD_STRING M1-3
10259: PPUSH
10260: CALL_OW 337
10264: GO 10267
10266: POP
// ChangeMissionObjectives ( M1cont ) ;
10267: LD_STRING M1cont
10269: PPUSH
10270: CALL_OW 337
// end ;
10274: END
// every 0 0$1 do
10275: GO 10277
10277: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10278: LD_INT 350
10280: PPUSH
10281: LD_INT 875
10283: PPUSH
10284: CALL_OW 12
10288: PPUSH
10289: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10293: LD_INT 5
10295: PPUSH
10296: LD_INT 4
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: CALL_OW 55
// wait ( 0 0$15 ) ;
10306: LD_INT 525
10308: PPUSH
10309: CALL_OW 67
// if IsOk ( Lisa ) then
10313: LD_EXP 2
10317: PPUSH
10318: CALL_OW 302
10322: IFFALSE 10338
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10324: LD_EXP 2
10328: PPUSH
10329: LD_STRING DR0-Lisa-1
10331: PPUSH
10332: CALL_OW 88
// end else
10336: GO 10584
// begin if IsOK ( Cyrus ) then
10338: LD_EXP 4
10342: PPUSH
10343: CALL_OW 302
10347: IFFALSE 10363
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10349: LD_EXP 4
10353: PPUSH
10354: LD_STRING DR0-Cyrus-1
10356: PPUSH
10357: CALL_OW 88
// end else
10361: GO 10584
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10363: LD_INT 22
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 21
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: LD_INT 25
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 25
10398: PUSH
10399: LD_INT 2
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 25
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 25
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 26
10435: PUSH
10436: LD_INT 1
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: PPUSH
10449: CALL_OW 69
10453: PUSH
10454: LD_EXP 1
10458: PUSH
10459: LD_EXP 8
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: DIFF
10468: PPUSH
10469: LD_STRING DR0-Sol1-1
10471: PPUSH
10472: LD_STRING DR0-Sol1-1
10474: PPUSH
10475: CALL 4542 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10479: LD_INT 22
10481: PUSH
10482: LD_INT 1
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 21
10491: PUSH
10492: LD_INT 1
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: LD_INT 25
10504: PUSH
10505: LD_INT 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 25
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 25
10524: PUSH
10525: LD_INT 4
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 26
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: PUSH
10559: LD_EXP 1
10563: PUSH
10564: LD_EXP 8
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: DIFF
10573: PPUSH
10574: LD_STRING DR0-Sol2-1
10576: PPUSH
10577: LD_STRING DR0-Sol2-1
10579: PPUSH
10580: CALL 4542 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10584: LD_INT 22
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 25
10609: PUSH
10610: LD_INT 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 25
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 25
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 25
10639: PUSH
10640: LD_INT 4
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PUSH
10675: LD_EXP 1
10679: PUSH
10680: LD_EXP 8
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: DIFF
10689: PPUSH
10690: LD_STRING DR0-Sol2-1
10692: PPUSH
10693: LD_STRING DR0-Sol2-1
10695: PPUSH
10696: CALL 4542 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10700: LD_EXP 1
10704: PPUSH
10705: LD_STRING DR0-JMM-1
10707: PPUSH
10708: CALL_OW 88
// end ;
10712: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10713: LD_EXP 5
10717: PPUSH
10718: CALL_OW 302
10722: PUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 16
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 69
10751: PUSH
10752: LD_INT 0
10754: GREATER
10755: AND
10756: IFFALSE 11030
10758: GO 10760
10760: DISABLE
// begin DialogueOn ;
10761: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10765: LD_EXP 5
10769: PPUSH
10770: LD_STRING D10-Frank-1
10772: PPUSH
10773: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10777: LD_INT 22
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 21
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 2
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 25
10832: PUSH
10833: LD_INT 4
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: PPUSH
10852: CALL_OW 69
10856: PUSH
10857: LD_EXP 1
10861: PUSH
10862: LD_EXP 5
10866: PUSH
10867: LD_EXP 2
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: DIFF
10877: PPUSH
10878: LD_STRING D10-Sol1-1
10880: PPUSH
10881: LD_STRING D10-FSol1-1
10883: PPUSH
10884: CALL 4542 0 3
// Say ( Frank , D10-Frank-2 ) ;
10888: LD_EXP 5
10892: PPUSH
10893: LD_STRING D10-Frank-2
10895: PPUSH
10896: CALL_OW 88
// if IsOK ( Lisa ) then
10900: LD_EXP 2
10904: PPUSH
10905: CALL_OW 302
10909: IFFALSE 10925
// begin Say ( Lisa , D10-Lisa-2 ) ;
10911: LD_EXP 2
10915: PPUSH
10916: LD_STRING D10-Lisa-2
10918: PPUSH
10919: CALL_OW 88
// end else
10923: GO 11030
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10925: LD_INT 22
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 25
10960: PUSH
10961: LD_INT 2
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 25
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 25
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: PPUSH
11000: CALL_OW 69
11004: PUSH
11005: LD_EXP 1
11009: PUSH
11010: LD_EXP 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: DIFF
11019: PPUSH
11020: LD_STRING D10-Sol1-2
11022: PPUSH
11023: LD_STRING D10-FSol1-2
11025: PPUSH
11026: CALL 4542 0 3
// end ; end ;
11030: END
// every 10 10$0 do
11031: GO 11033
11033: DISABLE
// begin HarrisonSupport ;
11034: CALL 1816 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11038: LD_EXP 15
11042: PPUSH
11043: CALL_OW 310
11047: PPUSH
11048: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11052: LD_EXP 15
11056: PPUSH
11057: LD_STRING DEng-Eng1-1
11059: PPUSH
11060: CALL_OW 88
// wait ( 1 1$0 ) ;
11064: LD_INT 2100
11066: PPUSH
11067: CALL_OW 67
// DialogueOn ;
11071: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11075: LD_EXP 12
11079: PPUSH
11080: LD_STRING DRem-Har-1
11082: PPUSH
11083: CALL_OW 94
// if contactWithRussian = 1 then
11087: LD_EXP 20
11091: PUSH
11092: LD_INT 1
11094: EQUAL
11095: IFFALSE 11111
// begin Say ( JMM , DRem-JMM-1 ) ;
11097: LD_EXP 1
11101: PPUSH
11102: LD_STRING DRem-JMM-1
11104: PPUSH
11105: CALL_OW 88
// end else
11109: GO 11123
// begin Say ( JMM , DRem-JMM-1a ) ;
11111: LD_EXP 1
11115: PPUSH
11116: LD_STRING DRem-JMM-1a
11118: PPUSH
11119: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11123: LD_EXP 12
11127: PPUSH
11128: LD_STRING DRem-Har-2
11130: PPUSH
11131: CALL_OW 94
// Say ( JMM , DRem-JMM-2 ) ;
11135: LD_EXP 1
11139: PPUSH
11140: LD_STRING DRem-JMM-2
11142: PPUSH
11143: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
11147: LD_EXP 12
11151: PPUSH
11152: LD_STRING DRem-Har-3
11154: PPUSH
11155: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11159: LD_EXP 1
11163: PPUSH
11164: LD_STRING DRem-JMM-3
11166: PPUSH
11167: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11171: LD_EXP 12
11175: PPUSH
11176: LD_STRING DRem-Har-4
11178: PPUSH
11179: CALL_OW 94
// Say ( JMM , DRem-JMM-4 ) ;
11183: LD_EXP 1
11187: PPUSH
11188: LD_STRING DRem-JMM-4
11190: PPUSH
11191: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11195: LD_EXP 12
11199: PPUSH
11200: LD_STRING DRem-Har-5
11202: PPUSH
11203: CALL_OW 94
// DialogueOff ;
11207: CALL_OW 7
// end ;
11211: END
// every 15 15$0 do
11212: GO 11214
11214: DISABLE
// begin PrepareDenis ;
11215: CALL 1737 0 0
// CenterNowOnUnits ( Denis ) ;
11219: LD_EXP 9
11223: PPUSH
11224: CALL_OW 87
// DialogueOn ;
11228: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11232: LD_EXP 9
11236: PPUSH
11237: LD_STRING DDen-Den-1
11239: PPUSH
11240: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11244: LD_EXP 1
11248: PPUSH
11249: LD_STRING DDen-JMM-1
11251: PPUSH
11252: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11256: LD_EXP 9
11260: PPUSH
11261: LD_STRING DDen-Den-2
11263: PPUSH
11264: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11268: LD_EXP 1
11272: PPUSH
11273: LD_STRING DDen-JMM-2
11275: PPUSH
11276: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11280: LD_EXP 9
11284: PPUSH
11285: LD_STRING DDen-Den-3
11287: PPUSH
11288: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11292: LD_EXP 1
11296: PPUSH
11297: LD_STRING DDen-JMM-3
11299: PPUSH
11300: CALL_OW 88
// DialogueOff ;
11304: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11308: LD_INT 36
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11321: LD_INT 15
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11334: LD_STRING MR
11336: PPUSH
11337: CALL_OW 337
// end ;
11341: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11342: CALL 11387 0 0
11346: PUSH
11347: LD_EXP 9
11351: PPUSH
11352: CALL_OW 302
11356: AND
11357: IFFALSE 11386
11359: GO 11361
11361: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11362: LD_EXP 9
11366: PPUSH
11367: LD_STRING DR1-Den-1
11369: PPUSH
11370: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11374: LD_EXP 1
11378: PPUSH
11379: LD_STRING DR1-JMM-1
11381: PPUSH
11382: CALL_OW 88
// end ;
11386: END
// function CheckOptoLab ; var i ; begin
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
// result = false ;
11391: LD_ADDR_VAR 0 1
11395: PUSH
11396: LD_INT 0
11398: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11399: LD_ADDR_VAR 0 2
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_INT 1
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: LD_INT 30
11419: PUSH
11420: LD_INT 7
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 30
11429: PUSH
11430: LD_INT 8
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PPUSH
11446: CALL_OW 69
11450: PUSH
11451: FOR_IN
11452: IFFALSE 11504
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11454: LD_VAR 0 2
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 268
11466: PUSH
11467: LD_INT 15
11469: EQUAL
11470: PUSH
11471: LD_VAR 0 2
11475: PPUSH
11476: LD_INT 2
11478: PPUSH
11479: CALL_OW 268
11483: PUSH
11484: LD_INT 15
11486: EQUAL
11487: OR
11488: IFFALSE 11500
// begin result = true ;
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// break ;
11498: GO 11504
// end ; break ;
11500: GO 11504
// end ;
11502: GO 11451
11504: POP
11505: POP
// end ;
11506: LD_VAR 0 1
11510: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11511: LD_INT 15
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 321
11521: PUSH
11522: LD_INT 2
11524: EQUAL
11525: PUSH
11526: LD_EXP 9
11530: PPUSH
11531: CALL_OW 302
11535: AND
11536: IFFALSE 11723
11538: GO 11540
11540: DISABLE
// begin DialogueOn ;
11541: CALL_OW 6
// if IsOK ( Denis ) then
11545: LD_EXP 9
11549: PPUSH
11550: CALL_OW 302
11554: IFFALSE 11570
// begin Say ( Denis , DR2-Den-1 ) ;
11556: LD_EXP 9
11560: PPUSH
11561: LD_STRING DR2-Den-1
11563: PPUSH
11564: CALL_OW 88
// end else
11568: GO 11629
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11570: LD_INT 22
11572: PUSH
11573: LD_INT 1
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 21
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 25
11592: PUSH
11593: LD_INT 4
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 69
11609: PUSH
11610: LD_EXP 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: DIFF
11618: PPUSH
11619: LD_STRING DR2-Sci1-1
11621: PPUSH
11622: LD_STRING DR2-FSci1-1
11624: PPUSH
11625: CALL 4542 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11629: LD_EXP 1
11633: PPUSH
11634: LD_STRING DR2-JMM-1
11636: PPUSH
11637: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11641: LD_INT 22
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: LD_INT 25
11666: PUSH
11667: LD_INT 4
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: PPUSH
11683: CALL_OW 69
11687: PUSH
11688: LD_EXP 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: DIFF
11696: PPUSH
11697: LD_STRING DR2-Sol1-1
11699: PPUSH
11700: LD_STRING DR2-Sol1-11
11702: PPUSH
11703: CALL 4542 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11707: LD_EXP 1
11711: PPUSH
11712: LD_STRING DR2-JMM-2
11714: PPUSH
11715: CALL_OW 88
// DialogueOff ;
11719: CALL_OW 7
// end ;
11723: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11724: LD_INT 22
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 30
11736: PUSH
11737: LD_INT 36
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 69
11752: PUSH
11753: LD_INT 0
11755: EQUAL
11756: PUSH
11757: LD_INT 22
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 21
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 33
11779: PUSH
11780: LD_INT 2
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: PPUSH
11792: CALL_OW 69
11796: PUSH
11797: LD_INT 0
11799: GREATER
11800: AND
11801: PUSH
11802: LD_EXP 21
11806: PUSH
11807: LD_INT 0
11809: EQUAL
11810: AND
11811: IFFALSE 11883
11813: GO 11815
11815: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11816: LD_INT 22
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: LD_INT 21
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 25
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: PUSH
11856: LD_EXP 1
11860: PUSH
11861: EMPTY
11862: LIST
11863: DIFF
11864: PPUSH
11865: LD_STRING D3a-Mech1-1
11867: PPUSH
11868: LD_STRING D3a-Mech1-1
11870: PPUSH
11871: CALL 4542 0 3
// firstTower = 2 ;
11875: LD_ADDR_EXP 21
11879: PUSH
11880: LD_INT 2
11882: ST_TO_ADDR
// end ;
11883: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
11884: LD_INT 22
11886: PUSH
11887: LD_INT 1
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 30
11896: PUSH
11897: LD_INT 36
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PPUSH
11908: CALL_OW 69
11912: PUSH
11913: LD_INT 0
11915: GREATER
11916: PUSH
11917: LD_INT 22
11919: PUSH
11920: LD_INT 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: LD_INT 21
11929: PUSH
11930: LD_INT 2
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 33
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 69
11956: PUSH
11957: LD_INT 0
11959: GREATER
11960: AND
11961: PUSH
11962: CALL 12544 0 0
11966: AND
11967: IFFALSE 12541
11969: GO 11971
11971: DISABLE
11972: LD_INT 0
11974: PPUSH
11975: PPUSH
11976: PPUSH
11977: PPUSH
11978: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
11979: LD_ADDR_VAR 0 3
11983: PUSH
11984: LD_INT 22
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 30
11996: PUSH
11997: LD_INT 36
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PPUSH
12008: CALL_OW 69
12012: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12013: LD_ADDR_VAR 0 4
12017: PUSH
12018: LD_INT 22
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 21
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 33
12040: PUSH
12041: LD_INT 2
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12058: LD_ADDR_VAR 0 5
12062: PUSH
12063: EMPTY
12064: ST_TO_ADDR
// for i in tmpControlTowers do
12065: LD_ADDR_VAR 0 1
12069: PUSH
12070: LD_VAR 0 3
12074: PUSH
12075: FOR_IN
12076: IFFALSE 12539
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12078: LD_EXP 1
12082: PPUSH
12083: CALL_OW 310
12087: PUSH
12088: LD_VAR 0 1
12092: EQUAL
12093: PUSH
12094: LD_EXP 1
12098: PPUSH
12099: CALL_OW 257
12103: PUSH
12104: LD_INT 3
12106: EQUAL
12107: AND
12108: IFFALSE 12238
// begin InGameOn ;
12110: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12114: LD_VAR 0 4
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12127: LD_EXP 1
12131: PPUSH
12132: LD_STRING D4a-JMM-1
12134: PPUSH
12135: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12139: LD_VAR 0 4
12143: PUSH
12144: LD_INT 1
12146: ARRAY
12147: PPUSH
12148: LD_EXP 1
12152: PPUSH
12153: CALL_OW 53
// wait ( 0 0$1 ) ;
12157: LD_INT 35
12159: PPUSH
12160: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12164: LD_VAR 0 4
12168: PUSH
12169: LD_INT 1
12171: ARRAY
12172: PPUSH
12173: LD_VAR 0 4
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PPUSH
12182: CALL_OW 250
12186: PUSH
12187: LD_INT 3
12189: PLUS
12190: PPUSH
12191: LD_VAR 0 4
12195: PUSH
12196: LD_INT 1
12198: ARRAY
12199: PPUSH
12200: CALL_OW 251
12204: PUSH
12205: LD_INT 2
12207: MINUS
12208: PPUSH
12209: CALL_OW 111
// wait ( 0 0$2 ) ;
12213: LD_INT 70
12215: PPUSH
12216: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12220: LD_EXP 1
12224: PPUSH
12225: LD_STRING D4b-JMM-1
12227: PPUSH
12228: CALL_OW 88
// InGameOff ;
12232: CALL_OW 9
// end else
12236: GO 12537
// begin InGameOn ;
12238: CALL_OW 8
// for j in UnitsInside ( i ) do
12242: LD_ADDR_VAR 0 2
12246: PUSH
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 313
12256: PUSH
12257: FOR_IN
12258: IFFALSE 12293
// if GetClass ( j ) = 3 then
12260: LD_VAR 0 2
12264: PPUSH
12265: CALL_OW 257
12269: PUSH
12270: LD_INT 3
12272: EQUAL
12273: IFFALSE 12291
// tmpMechanicInside = tmpMechanicInside ^ j ;
12275: LD_ADDR_VAR 0 5
12279: PUSH
12280: LD_VAR 0 5
12284: PUSH
12285: LD_VAR 0 2
12289: ADD
12290: ST_TO_ADDR
12291: GO 12257
12293: POP
12294: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12295: LD_VAR 0 5
12299: PUSH
12300: LD_INT 1
12302: ARRAY
12303: PPUSH
12304: CALL_OW 258
12308: PUSH
12309: LD_INT 1
12311: EQUAL
12312: IFFALSE 12330
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12314: LD_VAR 0 5
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: PPUSH
12323: LD_STRING D4a-Mech1-1
12325: PPUSH
12326: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12330: LD_VAR 0 5
12334: PUSH
12335: LD_INT 1
12337: ARRAY
12338: PPUSH
12339: CALL_OW 258
12343: PUSH
12344: LD_INT 2
12346: EQUAL
12347: IFFALSE 12365
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12349: LD_VAR 0 5
12353: PUSH
12354: LD_INT 1
12356: ARRAY
12357: PPUSH
12358: LD_STRING D4a-FMech1-1
12360: PPUSH
12361: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12365: LD_VAR 0 4
12369: PUSH
12370: LD_INT 1
12372: ARRAY
12373: PPUSH
12374: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12378: LD_VAR 0 4
12382: PUSH
12383: LD_INT 1
12385: ARRAY
12386: PPUSH
12387: LD_VAR 0 5
12391: PUSH
12392: LD_INT 1
12394: ARRAY
12395: PPUSH
12396: CALL_OW 53
// wait ( 0 0$1 ) ;
12400: LD_INT 35
12402: PPUSH
12403: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12407: LD_VAR 0 4
12411: PUSH
12412: LD_INT 1
12414: ARRAY
12415: PPUSH
12416: LD_VAR 0 4
12420: PUSH
12421: LD_INT 1
12423: ARRAY
12424: PPUSH
12425: CALL_OW 250
12429: PUSH
12430: LD_INT 3
12432: PLUS
12433: PPUSH
12434: LD_VAR 0 4
12438: PUSH
12439: LD_INT 1
12441: ARRAY
12442: PPUSH
12443: CALL_OW 251
12447: PUSH
12448: LD_INT 2
12450: MINUS
12451: PPUSH
12452: CALL_OW 111
// wait ( 0 0$2 ) ;
12456: LD_INT 70
12458: PPUSH
12459: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12463: LD_VAR 0 5
12467: PUSH
12468: LD_INT 1
12470: ARRAY
12471: PPUSH
12472: CALL_OW 258
12476: PUSH
12477: LD_INT 1
12479: EQUAL
12480: IFFALSE 12498
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12482: LD_VAR 0 5
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: PPUSH
12491: LD_STRING D4b-Mech1-1
12493: PPUSH
12494: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12498: LD_VAR 0 5
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PPUSH
12507: CALL_OW 258
12511: PUSH
12512: LD_INT 2
12514: EQUAL
12515: IFFALSE 12533
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12517: LD_VAR 0 5
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_STRING D4b-FMech1-1
12528: PPUSH
12529: CALL_OW 88
// InGameOff ;
12533: CALL_OW 9
// end ; end ;
12537: GO 12075
12539: POP
12540: POP
// end ;
12541: PPOPN 5
12543: END
// function CheckMehInside ; var i , j ; begin
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
12548: PPUSH
// result = false ;
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_INT 22
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 36
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: PUSH
12591: FOR_IN
12592: IFFALSE 12643
// begin for j in UnitsInside ( i ) do
12594: LD_ADDR_VAR 0 3
12598: PUSH
12599: LD_VAR 0 2
12603: PPUSH
12604: CALL_OW 313
12608: PUSH
12609: FOR_IN
12610: IFFALSE 12639
// begin if GetClass ( j ) = 3 then
12612: LD_VAR 0 3
12616: PPUSH
12617: CALL_OW 257
12621: PUSH
12622: LD_INT 3
12624: EQUAL
12625: IFFALSE 12637
// begin result = true ;
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
// break ;
12635: GO 12639
// end ; end ;
12637: GO 12609
12639: POP
12640: POP
// end ;
12641: GO 12591
12643: POP
12644: POP
// end ;
12645: LD_VAR 0 1
12649: RET
// every 25 25$0 do
12650: GO 12652
12652: DISABLE
// begin PrepareKurt ;
12653: CALL 15394 0 0
// end ;
12657: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12658: LD_EXP 17
12662: PPUSH
12663: LD_INT 9
12665: PPUSH
12666: CALL_OW 308
12670: PUSH
12671: LD_EXP 19
12675: PUSH
12676: LD_INT 1
12678: EQUAL
12679: AND
12680: IFFALSE 12754
12682: GO 12684
12684: DISABLE
// begin RemoveUnit ( Kurt ) ;
12685: LD_EXP 17
12689: PPUSH
12690: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12694: LD_EXP 17
12698: PPUSH
12699: LD_STRING Kurt
12701: PPUSH
12702: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12706: LD_INT 1
12708: PPUSH
12709: LD_INT 2
12711: PPUSH
12712: CALL_OW 81
12716: PUSH
12717: LD_INT 0
12719: EQUAL
12720: IFFALSE 12730
// KurtStatus = 1 ;
12722: LD_ADDR_EXP 18
12726: PUSH
12727: LD_INT 1
12729: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12730: LD_INT 1
12732: PPUSH
12733: LD_INT 2
12735: PPUSH
12736: CALL_OW 81
12740: PUSH
12741: LD_INT 2
12743: EQUAL
12744: IFFALSE 12754
// KurtStatus = 2 ;
12746: LD_ADDR_EXP 18
12750: PUSH
12751: LD_INT 2
12753: ST_TO_ADDR
// end ;
12754: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12755: LD_INT 1
12757: PPUSH
12758: LD_INT 2
12760: PPUSH
12761: CALL_OW 81
12765: PUSH
12766: LD_INT 2
12768: EQUAL
12769: PUSH
12770: LD_EXP 17
12774: PPUSH
12775: CALL_OW 302
12779: AND
12780: IFFALSE 12805
12782: GO 12784
12784: DISABLE
// begin DialogueOn ;
12785: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12789: LD_EXP 17
12793: PPUSH
12794: LD_STRING D2a-Kurt-1
12796: PPUSH
12797: CALL_OW 88
// DialogueOff ;
12801: CALL_OW 7
// end ;
12805: END
// every 35 35$0 do
12806: GO 12808
12808: DISABLE
// begin PrepareJoan ;
12809: CALL 2212 0 0
// wait ( 1 1$0 ) ;
12813: LD_INT 2100
12815: PPUSH
12816: CALL_OW 67
// if IsOK ( Lisa ) then
12820: LD_EXP 2
12824: PPUSH
12825: CALL_OW 302
12829: IFFALSE 12959
// begin DialogueOn ;
12831: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12835: LD_EXP 2
12839: PPUSH
12840: LD_STRING D7-Lisa-1
12842: PPUSH
12843: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12847: LD_EXP 1
12851: PPUSH
12852: LD_STRING D7-JMM-1
12854: PPUSH
12855: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12859: LD_EXP 2
12863: PPUSH
12864: LD_STRING D7-Lisa-2
12866: PPUSH
12867: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12871: LD_EXP 1
12875: PPUSH
12876: LD_STRING D7-JMM-2
12878: PPUSH
12879: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12883: LD_EXP 2
12887: PPUSH
12888: LD_STRING D7-Lisa-3
12890: PPUSH
12891: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12895: LD_EXP 1
12899: PPUSH
12900: LD_STRING D7-JMM-3
12902: PPUSH
12903: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12907: LD_EXP 2
12911: PPUSH
12912: LD_STRING D7-Lisa-4
12914: PPUSH
12915: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12919: LD_EXP 1
12923: PPUSH
12924: LD_STRING D7-JMM-4
12926: PPUSH
12927: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12931: LD_EXP 1
12935: PPUSH
12936: LD_STRING D7-JMM-4a
12938: PPUSH
12939: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12943: LD_EXP 2
12947: PPUSH
12948: LD_STRING D7-Lisa-5
12950: PPUSH
12951: CALL_OW 88
// DialogueOff ;
12955: CALL_OW 7
// end ; end ;
12959: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
12960: LD_INT 22
12962: PUSH
12963: LD_INT 1
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 33
12972: PUSH
12973: LD_INT 2
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: PUSH
12989: LD_INT 2
12991: GREATEREQUAL
12992: IFFALSE 13012
12994: GO 12996
12996: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
12997: LD_STRING MRa
12999: PPUSH
13000: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13004: LD_ADDR_EXP 26
13008: PUSH
13009: LD_INT 1
13011: ST_TO_ADDR
// end ;
13012: END
// every 13 13$0 do
13013: GO 13015
13015: DISABLE
// PrepareRandoms ( 1 ) ;
13016: LD_INT 1
13018: PPUSH
13019: CALL 3109 0 1
13023: END
// every 20 20$0 do
13024: GO 13026
13026: DISABLE
// PrepareRandoms ( 2 ) ;
13027: LD_INT 2
13029: PPUSH
13030: CALL 3109 0 1
13034: END
// every 28 28$0 do
13035: GO 13037
13037: DISABLE
// PrepareRandoms ( 3 ) ;
13038: LD_INT 3
13040: PPUSH
13041: CALL 3109 0 1
13045: END
// every 32 32$0 do
13046: GO 13048
13048: DISABLE
// PrepareRandoms ( 4 ) ;
13049: LD_INT 4
13051: PPUSH
13052: CALL 3109 0 1
13056: END
// every 38 38$0 do
13057: GO 13059
13059: DISABLE
// PrepareRandoms ( 5 ) ;
13060: LD_INT 5
13062: PPUSH
13063: CALL 3109 0 1
13067: END
// every 42 42$0 do
13068: GO 13070
13070: DISABLE
// PrepareRandoms ( 6 ) ;
13071: LD_INT 6
13073: PPUSH
13074: CALL 3109 0 1
13078: END
// every 45 45$0 do
13079: GO 13081
13081: DISABLE
// PrepareRandoms ( 7 ) ;
13082: LD_INT 7
13084: PPUSH
13085: CALL 3109 0 1
13089: END
// every 5 5$0 do
13090: GO 13092
13092: DISABLE
// begin DialogueOn ;
13093: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13097: LD_EXP 10
13101: PPUSH
13102: LD_STRING D12a-Sci-1
13104: PPUSH
13105: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13109: LD_EXP 1
13113: PPUSH
13114: LD_STRING D12a-JMM-1
13116: PPUSH
13117: CALL_OW 88
// DialogueOff ;
13121: CALL_OW 7
// cratesStatus = 1 ;
13125: LD_ADDR_EXP 33
13129: PUSH
13130: LD_INT 1
13132: ST_TO_ADDR
// end ;
13133: END
// every 13 13$0 do
13134: GO 13136
13136: DISABLE
// begin DialogueOn ;
13137: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13141: LD_EXP 10
13145: PPUSH
13146: LD_STRING D12b-Sci-1
13148: PPUSH
13149: CALL_OW 94
// DialogueOff ;
13153: CALL_OW 7
// cratesStatus = 2 ;
13157: LD_ADDR_EXP 33
13161: PUSH
13162: LD_INT 2
13164: ST_TO_ADDR
// end ;
13165: END
// every 32 32$0 do
13166: GO 13168
13168: DISABLE
// begin DialogueOn ;
13169: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13173: LD_EXP 10
13177: PPUSH
13178: LD_STRING  D12c-Sci-1
13180: PPUSH
13181: CALL_OW 94
// DialogueOff ;
13185: CALL_OW 7
// wait ( 3 3$0 ) ;
13189: LD_INT 6300
13191: PPUSH
13192: CALL_OW 67
// DialogueOn ;
13196: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13200: LD_EXP 10
13204: PPUSH
13205: LD_STRING  D12d-Sci-1
13207: PPUSH
13208: CALL_OW 94
// DialogueOff ;
13212: CALL_OW 7
// cratesStatus = 1 ;
13216: LD_ADDR_EXP 33
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// end ;
13224: END
// every 42 42$0 do
13225: GO 13227
13227: DISABLE
// begin DialogueOn ;
13228: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13232: LD_EXP 10
13236: PPUSH
13237: LD_STRING D12e-Sci-1
13239: PPUSH
13240: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13244: LD_EXP 1
13248: PPUSH
13249: LD_STRING D12e-JMM-1
13251: PPUSH
13252: CALL_OW 88
// DialogueOff ;
13256: CALL_OW 7
// cratesStatus = 2 ;
13260: LD_ADDR_EXP 33
13264: PUSH
13265: LD_INT 2
13267: ST_TO_ADDR
// end ;
13268: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13269: LD_INT 22
13271: PUSH
13272: LD_INT 6
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 21
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 34
13291: PUSH
13292: LD_INT 51
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PUSH
13309: LD_INT 0
13311: GREATER
13312: IFFALSE 13366
13314: GO 13316
13316: DISABLE
13317: LD_INT 0
13319: PPUSH
// begin enable ;
13320: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: LD_INT 22
13328: PUSH
13329: LD_INT 6
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: PPUSH
13339: CALL_OW 69
13343: PUSH
13344: FOR_IN
13345: IFFALSE 13364
// ComAgressiveMove ( i , 138 , 168 ) ;
13347: LD_VAR 0 1
13351: PPUSH
13352: LD_INT 138
13354: PPUSH
13355: LD_INT 168
13357: PPUSH
13358: CALL_OW 114
13362: GO 13344
13364: POP
13365: POP
// end ;
13366: PPOPN 1
13368: END
// every 0 0$1 trigger FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13369: LD_INT 5
13371: PPUSH
13372: LD_INT 22
13374: PUSH
13375: LD_INT 6
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 34
13384: PUSH
13385: LD_INT 51
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 70
13400: PUSH
13401: LD_INT 0
13403: GREATER
13404: IFFALSE 13506
13406: GO 13408
13408: DISABLE
13409: LD_INT 0
13411: PPUSH
// begin enable ;
13412: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] ] ) do
13413: LD_ADDR_VAR 0 1
13417: PUSH
13418: LD_INT 5
13420: PPUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 6
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: PPUSH
13434: CALL_OW 70
13438: PUSH
13439: FOR_IN
13440: IFFALSE 13504
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13442: LD_INT 5
13444: PPUSH
13445: LD_INT 22
13447: PUSH
13448: LD_INT 6
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 34
13457: PUSH
13458: LD_INT 51
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 70
13473: PUSH
13474: LD_INT 0
13476: GREATER
13477: IFFALSE 13493
// sendedConvoys = sendedConvoys + 1 ;
13479: LD_ADDR_EXP 34
13483: PUSH
13484: LD_EXP 34
13488: PUSH
13489: LD_INT 1
13491: PLUS
13492: ST_TO_ADDR
// RemoveUnit ( i ) ;
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 64
// end ;
13502: GO 13439
13504: POP
13505: POP
// end ; end_of_file
13506: PPOPN 1
13508: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13509: LD_VAR 0 1
13513: PUSH
13514: LD_INT 1
13516: EQUAL
13517: PUSH
13518: LD_VAR 0 2
13522: PUSH
13523: LD_INT 3
13525: EQUAL
13526: AND
13527: IFFALSE 13537
// contactWithRussian = 1 ;
13529: LD_ADDR_EXP 20
13533: PUSH
13534: LD_INT 1
13536: ST_TO_ADDR
// end ;
13537: PPOPN 2
13539: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13540: LD_VAR 0 1
13544: PPUSH
13545: CALL_OW 266
13549: PUSH
13550: LD_INT 36
13552: EQUAL
13553: PUSH
13554: LD_VAR 0 1
13558: PPUSH
13559: CALL_OW 255
13563: PUSH
13564: LD_INT 1
13566: EQUAL
13567: AND
13568: PUSH
13569: LD_INT 22
13571: PUSH
13572: LD_INT 1
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 21
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PUSH
13589: LD_INT 33
13591: PUSH
13592: LD_INT 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 69
13608: PUSH
13609: LD_INT 0
13611: EQUAL
13612: AND
13613: PUSH
13614: LD_EXP 21
13618: PUSH
13619: LD_INT 0
13621: EQUAL
13622: AND
13623: IFFALSE 13692
// begin firstTower = 1 ;
13625: LD_ADDR_EXP 21
13629: PUSH
13630: LD_INT 1
13632: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13633: LD_INT 22
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 25
13655: PUSH
13656: LD_INT 3
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 69
13672: PUSH
13673: LD_EXP 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: DIFF
13681: PPUSH
13682: LD_STRING D3b-Mech1-1
13684: PPUSH
13685: LD_STRING D3b-Mech1-1
13687: PPUSH
13688: CALL 4542 0 3
// end ; if GetSide ( building ) = 3 then
13692: LD_VAR 0 1
13696: PPUSH
13697: CALL_OW 255
13701: PUSH
13702: LD_INT 3
13704: EQUAL
13705: IFFALSE 13779
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13707: LD_ADDR_EXP 28
13711: PUSH
13712: LD_EXP 28
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 3
13724: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13725: LD_ADDR_EXP 28
13729: PUSH
13730: LD_EXP 28
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 3
13742: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13743: LD_ADDR_EXP 28
13747: PUSH
13748: LD_EXP 28
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 3
13760: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13761: LD_ADDR_EXP 28
13765: PUSH
13766: LD_EXP 28
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 3
13778: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 255
13788: PUSH
13789: LD_INT 3
13791: EQUAL
13792: PUSH
13793: LD_VAR 0 1
13797: PPUSH
13798: CALL_OW 266
13802: PUSH
13803: LD_INT 0
13805: EQUAL
13806: PUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: CALL_OW 266
13816: PUSH
13817: LD_INT 2
13819: EQUAL
13820: OR
13821: PUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 266
13831: PUSH
13832: LD_INT 4
13834: EQUAL
13835: OR
13836: PUSH
13837: EMPTY
13838: LIST
13839: AND
13840: IFFALSE 13851
// ComUpgrade ( building ) ;
13842: LD_VAR 0 1
13846: PPUSH
13847: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13851: LD_VAR 0 1
13855: PPUSH
13856: CALL_OW 255
13860: PUSH
13861: LD_INT 3
13863: EQUAL
13864: PUSH
13865: LD_VAR 0 1
13869: PPUSH
13870: CALL_OW 266
13874: PUSH
13875: LD_INT 32
13877: EQUAL
13878: AND
13879: IFFALSE 13920
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: LD_INT 42
13888: PUSH
13889: LD_INT 43
13891: PUSH
13892: LD_INT 44
13894: PUSH
13895: LD_INT 46
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 1
13906: PPUSH
13907: LD_INT 4
13909: PPUSH
13910: CALL_OW 12
13914: ARRAY
13915: PPUSH
13916: CALL_OW 208
// end ; end ;
13920: PPOPN 1
13922: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 255
13932: PUSH
13933: LD_INT 1
13935: EQUAL
13936: PUSH
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 247
13946: PUSH
13947: LD_INT 1
13949: EQUAL
13950: AND
13951: IFFALSE 13967
// unitLost = unitLost + 1 ;
13953: LD_ADDR_EXP 27
13957: PUSH
13958: LD_EXP 27
13962: PUSH
13963: LD_INT 1
13965: PLUS
13966: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
13967: LD_VAR 0 1
13971: PPUSH
13972: CALL_OW 255
13976: PUSH
13977: LD_INT 3
13979: EQUAL
13980: PUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 247
13990: PUSH
13991: LD_INT 3
13993: EQUAL
13994: AND
13995: IFFALSE 14687
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 266
14006: PUSH
14007: LD_INT 31
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 266
14020: PUSH
14021: LD_INT 32
14023: EQUAL
14024: OR
14025: PUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 266
14035: PUSH
14036: LD_INT 36
14038: EQUAL
14039: OR
14040: PUSH
14041: LD_VAR 0 1
14045: PPUSH
14046: CALL_OW 266
14050: PUSH
14051: LD_INT 0
14053: EQUAL
14054: OR
14055: PUSH
14056: LD_VAR 0 1
14060: PPUSH
14061: CALL_OW 266
14065: PUSH
14066: LD_INT 24
14068: EQUAL
14069: OR
14070: PUSH
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 266
14080: PUSH
14081: LD_INT 17
14083: EQUAL
14084: OR
14085: PUSH
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 266
14095: PUSH
14096: LD_INT 25
14098: EQUAL
14099: OR
14100: PUSH
14101: LD_VAR 0 1
14105: PPUSH
14106: CALL_OW 266
14110: PUSH
14111: LD_INT 19
14113: EQUAL
14114: OR
14115: PUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 266
14125: PUSH
14126: LD_INT 20
14128: EQUAL
14129: OR
14130: PUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL_OW 266
14140: PUSH
14141: LD_INT 18
14143: EQUAL
14144: OR
14145: PUSH
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 266
14155: PUSH
14156: LD_INT 21
14158: EQUAL
14159: OR
14160: PUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 266
14170: PUSH
14171: LD_INT 23
14173: EQUAL
14174: OR
14175: PUSH
14176: LD_VAR 0 1
14180: PPUSH
14181: CALL_OW 266
14185: PUSH
14186: LD_INT 16
14188: EQUAL
14189: OR
14190: PUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 266
14200: PUSH
14201: LD_INT 6
14203: EQUAL
14204: OR
14205: PUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: CALL_OW 266
14215: PUSH
14216: LD_INT 29
14218: EQUAL
14219: OR
14220: PUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: CALL_OW 266
14230: PUSH
14231: LD_INT 26
14233: EQUAL
14234: OR
14235: PUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 266
14245: PUSH
14246: LD_INT 30
14248: EQUAL
14249: OR
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 266
14260: PUSH
14261: LD_INT 28
14263: EQUAL
14264: OR
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 266
14275: PUSH
14276: LD_INT 27
14278: EQUAL
14279: OR
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 266
14290: PUSH
14291: LD_INT 33
14293: EQUAL
14294: OR
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 266
14305: PUSH
14306: LD_INT 2
14308: EQUAL
14309: OR
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 266
14320: PUSH
14321: LD_INT 4
14323: EQUAL
14324: OR
14325: IFFALSE 14411
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14327: LD_ADDR_EXP 28
14331: PUSH
14332: LD_EXP 28
14336: PUSH
14337: LD_VAR 0 1
14341: PPUSH
14342: CALL_OW 266
14346: ADD
14347: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14348: LD_ADDR_EXP 28
14352: PUSH
14353: LD_EXP 28
14357: PUSH
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL_OW 250
14367: ADD
14368: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14369: LD_ADDR_EXP 28
14373: PUSH
14374: LD_EXP 28
14378: PUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 251
14388: ADD
14389: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14390: LD_ADDR_EXP 28
14394: PUSH
14395: LD_EXP 28
14399: PUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 254
14409: ADD
14410: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 266
14420: PUSH
14421: LD_INT 1
14423: EQUAL
14424: IFFALSE 14503
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14426: LD_ADDR_EXP 28
14430: PUSH
14431: LD_EXP 28
14435: PUSH
14436: LD_INT 0
14438: ADD
14439: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14440: LD_ADDR_EXP 28
14444: PUSH
14445: LD_EXP 28
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 250
14459: ADD
14460: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14461: LD_ADDR_EXP 28
14465: PUSH
14466: LD_EXP 28
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 251
14480: ADD
14481: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14482: LD_ADDR_EXP 28
14486: PUSH
14487: LD_EXP 28
14491: PUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 254
14501: ADD
14502: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 266
14512: PUSH
14513: LD_INT 3
14515: EQUAL
14516: IFFALSE 14595
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14518: LD_ADDR_EXP 28
14522: PUSH
14523: LD_EXP 28
14527: PUSH
14528: LD_INT 2
14530: ADD
14531: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14532: LD_ADDR_EXP 28
14536: PUSH
14537: LD_EXP 28
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 250
14551: ADD
14552: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14553: LD_ADDR_EXP 28
14557: PUSH
14558: LD_EXP 28
14562: PUSH
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 251
14572: ADD
14573: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14574: LD_ADDR_EXP 28
14578: PUSH
14579: LD_EXP 28
14583: PUSH
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 254
14593: ADD
14594: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 266
14604: PUSH
14605: LD_INT 5
14607: EQUAL
14608: IFFALSE 14687
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14610: LD_ADDR_EXP 28
14614: PUSH
14615: LD_EXP 28
14619: PUSH
14620: LD_INT 4
14622: ADD
14623: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14624: LD_ADDR_EXP 28
14628: PUSH
14629: LD_EXP 28
14633: PUSH
14634: LD_VAR 0 1
14638: PPUSH
14639: CALL_OW 250
14643: ADD
14644: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14645: LD_ADDR_EXP 28
14649: PUSH
14650: LD_EXP 28
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 251
14664: ADD
14665: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14666: LD_ADDR_EXP 28
14670: PUSH
14671: LD_EXP 28
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: CALL_OW 254
14685: ADD
14686: ST_TO_ADDR
// end ; end ; end ;
14687: PPOPN 1
14689: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14690: LD_INT 0
14692: PPUSH
14693: PPUSH
14694: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 264
14704: PUSH
14705: LD_INT 51
14707: EQUAL
14708: PUSH
14709: LD_VAR 0 1
14713: PPUSH
14714: CALL_OW 255
14718: PUSH
14719: LD_INT 3
14721: EQUAL
14722: AND
14723: IFFALSE 14785
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14725: LD_ADDR_VAR 0 5
14729: PUSH
14730: LD_INT 2
14732: PPUSH
14733: CALL_OW 274
14737: PPUSH
14738: LD_INT 1
14740: PPUSH
14741: CALL_OW 275
14745: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
14746: LD_INT 2
14748: PPUSH
14749: CALL_OW 274
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: LD_VAR 0 5
14761: PUSH
14762: LD_INT 100
14764: MINUS
14765: PPUSH
14766: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
14770: LD_VAR 0 1
14774: PPUSH
14775: LD_INT 1
14777: PPUSH
14778: LD_INT 100
14780: PPUSH
14781: CALL_OW 291
// end ; if building = rufabsupp then
14785: LD_VAR 0 2
14789: PUSH
14790: LD_INT 17
14792: EQUAL
14793: IFFALSE 14807
// SetSide ( vehicle , 6 ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: LD_INT 6
14802: PPUSH
14803: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
14807: LD_VAR 0 2
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 3
14819: EQUAL
14820: PUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: CALL_OW 302
14830: AND
14831: IFFALSE 14901
// begin uc_side = 3 ;
14833: LD_ADDR_OWVAR 20
14837: PUSH
14838: LD_INT 3
14840: ST_TO_ADDR
// uc_nation = 3 ;
14841: LD_ADDR_OWVAR 21
14845: PUSH
14846: LD_INT 3
14848: ST_TO_ADDR
// hc_gallery :=  ;
14849: LD_ADDR_OWVAR 33
14853: PUSH
14854: LD_STRING 
14856: ST_TO_ADDR
// hc_name :=  ;
14857: LD_ADDR_OWVAR 26
14861: PUSH
14862: LD_STRING 
14864: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14865: LD_INT 0
14867: PPUSH
14868: LD_EXP 31
14872: PPUSH
14873: LD_EXP 32
14877: PPUSH
14878: CALL_OW 12
14882: PPUSH
14883: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
14887: CALL_OW 44
14891: PPUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: CALL_OW 52
// end ; end ;
14901: PPOPN 5
14903: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 255
14913: PUSH
14914: LD_INT 3
14916: EQUAL
14917: IFFALSE 14933
// tamedApemans = tamedApemans + 1 ;
14919: LD_ADDR_EXP 29
14923: PUSH
14924: LD_EXP 29
14928: PUSH
14929: LD_INT 1
14931: PLUS
14932: ST_TO_ADDR
// end ; end_of_file
14933: PPOPN 2
14935: END
// every 0 0$30 trigger cratesStatus = 1 do
14936: LD_EXP 33
14940: PUSH
14941: LD_INT 1
14943: EQUAL
14944: IFFALSE 15008
14946: GO 14948
14948: DISABLE
// begin enable ;
14949: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
14950: LD_INT 350
14952: PUSH
14953: LD_INT 1050
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 1
14962: PPUSH
14963: LD_INT 2
14965: PPUSH
14966: CALL_OW 12
14970: ARRAY
14971: PPUSH
14972: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
14976: LD_INT 4
14978: PUSH
14979: LD_INT 5
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 1
14988: PPUSH
14989: LD_INT 2
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: PPUSH
14998: LD_INT 7
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: CALL_OW 55
// end ;
15008: END
// every 1 1$0 trigger cratesStatus = 2 do
15009: LD_EXP 33
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: IFFALSE 15081
15019: GO 15021
15021: DISABLE
// begin enable ;
15022: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15023: LD_INT 3150
15025: PUSH
15026: LD_INT 4550
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_INT 2
15038: PPUSH
15039: CALL_OW 12
15043: ARRAY
15044: PPUSH
15045: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15049: LD_INT 2
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PUSH
15059: LD_INT 1
15061: PPUSH
15062: LD_INT 2
15064: PPUSH
15065: CALL_OW 12
15069: ARRAY
15070: PPUSH
15071: LD_INT 8
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 55
// end ; end_of_file
15081: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15082: LD_EXP 22
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: IFFALSE 15391
15092: GO 15094
15094: DISABLE
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
15099: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: LD_INT 22
15107: PUSH
15108: LD_INT 1
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 3
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 2
15127: PUSH
15128: LD_INT 30
15130: PUSH
15131: LD_INT 0
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 30
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: ST_TO_ADDR
// for i in tmp do
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_VAR 0 2
15172: PUSH
15173: FOR_IN
15174: IFFALSE 15207
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15176: LD_ADDR_VAR 0 3
15180: PUSH
15181: LD_VAR 0 3
15185: PUSH
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 274
15195: PPUSH
15196: LD_INT 1
15198: PPUSH
15199: CALL_OW 275
15203: PLUS
15204: ST_TO_ADDR
15205: GO 15173
15207: POP
15208: POP
// strings = [ ] ;
15209: LD_ADDR_EXP 25
15213: PUSH
15214: EMPTY
15215: ST_TO_ADDR
// if tmp = 0 then
15216: LD_VAR 0 2
15220: PUSH
15221: LD_INT 0
15223: EQUAL
15224: IFFALSE 15249
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15226: LD_ADDR_EXP 25
15230: PUSH
15231: LD_EXP 25
15235: PUSH
15236: LD_STRING #Am06-1
15238: PUSH
15239: LD_EXP 23
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: ADD
15248: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 0
15256: GREATER
15257: PUSH
15258: LD_EXP 23
15262: PUSH
15263: LD_VAR 0 3
15267: GREATER
15268: AND
15269: IFFALSE 15300
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15271: LD_ADDR_EXP 25
15275: PUSH
15276: LD_EXP 25
15280: PUSH
15281: LD_STRING #Am06-1
15283: PUSH
15284: LD_EXP 23
15288: PUSH
15289: LD_VAR 0 3
15293: MINUS
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: ADD
15299: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15300: LD_VAR 0 2
15304: PUSH
15305: LD_INT 0
15307: GREATER
15308: PUSH
15309: LD_EXP 23
15313: PUSH
15314: LD_VAR 0 3
15318: LESSEQUAL
15319: AND
15320: IFFALSE 15343
// strings = strings ^ [ #Am06-1 , 0 ] ;
15322: LD_ADDR_EXP 25
15326: PUSH
15327: LD_EXP 25
15331: PUSH
15332: LD_STRING #Am06-1
15334: PUSH
15335: LD_INT 0
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: ADD
15342: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15343: LD_ADDR_EXP 24
15347: PUSH
15348: LD_EXP 24
15352: PUSH
15353: LD_INT 35
15355: MINUS
15356: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15357: LD_ADDR_EXP 25
15361: PUSH
15362: LD_EXP 25
15366: PUSH
15367: LD_STRING #Am06-2
15369: PUSH
15370: LD_EXP 24
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: ADD
15379: ST_TO_ADDR
// display_strings = strings ;
15380: LD_ADDR_OWVAR 47
15384: PUSH
15385: LD_EXP 25
15389: ST_TO_ADDR
// enable ;
15390: ENABLE
// end ; end_of_file
15391: PPOPN 3
15393: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15394: LD_INT 0
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: LD_INT 22
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 21
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 2
15428: PUSH
15429: LD_INT 25
15431: PUSH
15432: LD_INT 1
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 25
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 25
15451: PUSH
15452: LD_INT 3
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 25
15461: PUSH
15462: LD_INT 4
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 69
15485: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15486: LD_ADDR_VAR 0 3
15490: PUSH
15491: LD_INT 1
15493: PPUSH
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 12
15503: ST_TO_ADDR
// uc_side = 2 ;
15504: LD_ADDR_OWVAR 20
15508: PUSH
15509: LD_INT 2
15511: ST_TO_ADDR
// uc_nation = 2 ;
15512: LD_ADDR_OWVAR 21
15516: PUSH
15517: LD_INT 2
15519: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15520: LD_ADDR_EXP 17
15524: PUSH
15525: LD_STRING Kurt
15527: PPUSH
15528: LD_INT 0
15530: PPUSH
15531: CALL 4485 0 2
15535: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
15536: LD_EXP 17
15540: PPUSH
15541: LD_VAR 0 2
15545: PUSH
15546: LD_VAR 0 3
15550: ARRAY
15551: PPUSH
15552: CALL_OW 250
15556: PPUSH
15557: LD_VAR 0 2
15561: PUSH
15562: LD_VAR 0 3
15566: ARRAY
15567: PPUSH
15568: CALL_OW 251
15572: PPUSH
15573: LD_INT 2
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 50
// InGameOn ;
15583: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15587: LD_EXP 17
15591: PPUSH
15592: CALL_OW 87
// wait ( 0 0$2 ) ;
15596: LD_INT 70
15598: PPUSH
15599: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15603: LD_VAR 0 2
15607: PUSH
15608: LD_VAR 0 3
15612: ARRAY
15613: PPUSH
15614: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15618: LD_VAR 0 2
15622: PUSH
15623: LD_VAR 0 3
15627: ARRAY
15628: PPUSH
15629: CALL_OW 122
// wait ( 0 0$1 ) ;
15633: LD_INT 35
15635: PPUSH
15636: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15640: LD_EXP 17
15644: PPUSH
15645: LD_VAR 0 2
15649: PUSH
15650: LD_VAR 0 3
15654: ARRAY
15655: PPUSH
15656: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15660: LD_VAR 0 2
15664: PUSH
15665: LD_VAR 0 3
15669: ARRAY
15670: PPUSH
15671: LD_EXP 17
15675: PPUSH
15676: CALL_OW 119
// DialogueOn ;
15680: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15684: LD_EXP 17
15688: PPUSH
15689: LD_STRING D2-Kurt-1
15691: PPUSH
15692: CALL_OW 88
// if tmp [ rnd ] = JMM then
15696: LD_VAR 0 2
15700: PUSH
15701: LD_VAR 0 3
15705: ARRAY
15706: PUSH
15707: LD_EXP 1
15711: EQUAL
15712: IFFALSE 15804
// begin Say ( JMM , D2-JMM-1 ) ;
15714: LD_EXP 1
15718: PPUSH
15719: LD_STRING D2-JMM-1
15721: PPUSH
15722: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15726: LD_EXP 17
15730: PPUSH
15731: LD_STRING D2-Kurt-2
15733: PPUSH
15734: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15738: LD_EXP 1
15742: PPUSH
15743: LD_STRING D2-JMM-2
15745: PPUSH
15746: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15750: LD_EXP 17
15754: PPUSH
15755: LD_STRING D2-Kurt-3
15757: PPUSH
15758: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15762: LD_EXP 1
15766: PPUSH
15767: LD_STRING D2-JMM-3
15769: PPUSH
15770: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15774: LD_EXP 17
15778: PPUSH
15779: LD_STRING D2-Kurt-4
15781: PPUSH
15782: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15786: LD_EXP 1
15790: PPUSH
15791: LD_STRING D2-JMM-4
15793: PPUSH
15794: CALL_OW 88
// DialogueOff ;
15798: CALL_OW 7
// end else
15802: GO 16234
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15804: LD_VAR 0 2
15808: PUSH
15809: LD_VAR 0 3
15813: ARRAY
15814: PPUSH
15815: CALL_OW 258
15819: PUSH
15820: LD_INT 1
15822: EQUAL
15823: IFFALSE 15843
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
15825: LD_VAR 0 2
15829: PUSH
15830: LD_VAR 0 3
15834: ARRAY
15835: PPUSH
15836: LD_STRING D2-Sol1-1
15838: PPUSH
15839: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15843: LD_VAR 0 2
15847: PUSH
15848: LD_VAR 0 3
15852: ARRAY
15853: PPUSH
15854: CALL_OW 258
15858: PUSH
15859: LD_INT 2
15861: EQUAL
15862: IFFALSE 15882
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
15864: LD_VAR 0 2
15868: PUSH
15869: LD_VAR 0 3
15873: ARRAY
15874: PPUSH
15875: LD_STRING D2-FSol1-1
15877: PPUSH
15878: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15882: LD_EXP 17
15886: PPUSH
15887: LD_STRING D2-Kurt-2
15889: PPUSH
15890: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15894: LD_VAR 0 2
15898: PUSH
15899: LD_VAR 0 3
15903: ARRAY
15904: PPUSH
15905: CALL_OW 258
15909: PUSH
15910: LD_INT 1
15912: EQUAL
15913: IFFALSE 15933
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
15915: LD_VAR 0 2
15919: PUSH
15920: LD_VAR 0 3
15924: ARRAY
15925: PPUSH
15926: LD_STRING D2-Sol1-2
15928: PPUSH
15929: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15933: LD_VAR 0 2
15937: PUSH
15938: LD_VAR 0 3
15942: ARRAY
15943: PPUSH
15944: CALL_OW 258
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15972
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
15954: LD_VAR 0 2
15958: PUSH
15959: LD_VAR 0 3
15963: ARRAY
15964: PPUSH
15965: LD_STRING D2-FSol1-2
15967: PPUSH
15968: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15972: LD_EXP 17
15976: PPUSH
15977: LD_STRING D2-Kurt-3
15979: PPUSH
15980: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15984: LD_VAR 0 2
15988: PUSH
15989: LD_VAR 0 3
15993: ARRAY
15994: PPUSH
15995: CALL_OW 258
15999: PUSH
16000: LD_INT 1
16002: EQUAL
16003: IFFALSE 16023
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16005: LD_VAR 0 2
16009: PUSH
16010: LD_VAR 0 3
16014: ARRAY
16015: PPUSH
16016: LD_STRING D2-Sol1-3
16018: PPUSH
16019: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16023: LD_VAR 0 2
16027: PUSH
16028: LD_VAR 0 3
16032: ARRAY
16033: PPUSH
16034: CALL_OW 258
16038: PUSH
16039: LD_INT 2
16041: EQUAL
16042: IFFALSE 16062
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16044: LD_VAR 0 2
16048: PUSH
16049: LD_VAR 0 3
16053: ARRAY
16054: PPUSH
16055: LD_STRING D2-FSol1-3
16057: PPUSH
16058: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16062: LD_EXP 17
16066: PPUSH
16067: LD_STRING D2-Kurt-4
16069: PPUSH
16070: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_VAR 0 3
16083: ARRAY
16084: PPUSH
16085: CALL_OW 258
16089: PUSH
16090: LD_INT 1
16092: EQUAL
16093: IFFALSE 16113
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16095: LD_VAR 0 2
16099: PUSH
16100: LD_VAR 0 3
16104: ARRAY
16105: PPUSH
16106: LD_STRING D2-Sol1-4
16108: PPUSH
16109: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16113: LD_VAR 0 2
16117: PUSH
16118: LD_VAR 0 3
16122: ARRAY
16123: PPUSH
16124: CALL_OW 258
16128: PUSH
16129: LD_INT 2
16131: EQUAL
16132: IFFALSE 16152
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16134: LD_VAR 0 2
16138: PUSH
16139: LD_VAR 0 3
16143: ARRAY
16144: PPUSH
16145: LD_STRING D2-FSol1-4
16147: PPUSH
16148: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16152: LD_VAR 0 2
16156: PUSH
16157: LD_VAR 0 3
16161: ARRAY
16162: PPUSH
16163: CALL_OW 258
16167: PUSH
16168: LD_INT 1
16170: EQUAL
16171: IFFALSE 16191
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16173: LD_VAR 0 2
16177: PUSH
16178: LD_VAR 0 3
16182: ARRAY
16183: PPUSH
16184: LD_STRING D2-Sol1-5
16186: PPUSH
16187: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16191: LD_VAR 0 2
16195: PUSH
16196: LD_VAR 0 3
16200: ARRAY
16201: PPUSH
16202: CALL_OW 258
16206: PUSH
16207: LD_INT 2
16209: EQUAL
16210: IFFALSE 16230
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16212: LD_VAR 0 2
16216: PUSH
16217: LD_VAR 0 3
16221: ARRAY
16222: PPUSH
16223: LD_STRING D2-FSol1-5
16225: PPUSH
16226: CALL_OW 88
// DialogueOff ;
16230: CALL_OW 7
// end ; dec = ShowQuery1 ;
16234: LD_ADDR_VAR 0 4
16238: PUSH
16239: CALL 5081 0 0
16243: ST_TO_ADDR
// if dec = 1 then
16244: LD_VAR 0 4
16248: PUSH
16249: LD_INT 1
16251: EQUAL
16252: IFFALSE 16294
// begin DialogueOn ;
16254: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16258: LD_EXP 17
16262: PPUSH
16263: LD_STRING D2a-Kurt-1
16265: PPUSH
16266: CALL_OW 88
// DialogueOff ;
16270: CALL_OW 7
// InGameOff ;
16274: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16278: LD_INT 1
16280: PPUSH
16281: LD_INT 2
16283: PPUSH
16284: LD_INT 2
16286: PPUSH
16287: LD_INT 1
16289: PPUSH
16290: CALL_OW 80
// end ; if dec = 2 then
16294: LD_VAR 0 4
16298: PUSH
16299: LD_INT 2
16301: EQUAL
16302: IFFALSE 16898
// begin DialogueOn ;
16304: CALL_OW 6
// if tmp [ rnd ] = JMM then
16308: LD_VAR 0 2
16312: PUSH
16313: LD_VAR 0 3
16317: ARRAY
16318: PUSH
16319: LD_EXP 1
16323: EQUAL
16324: IFFALSE 16380
// begin Say ( JMM , D2b-JMM-1 ) ;
16326: LD_EXP 1
16330: PPUSH
16331: LD_STRING D2b-JMM-1
16333: PPUSH
16334: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16338: LD_EXP 17
16342: PPUSH
16343: LD_STRING D2b-Kurt-1
16345: PPUSH
16346: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16350: LD_EXP 1
16354: PPUSH
16355: LD_STRING D2b-JMM-2
16357: PPUSH
16358: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16362: LD_EXP 17
16366: PPUSH
16367: LD_STRING D2b-Kurt-2
16369: PPUSH
16370: CALL_OW 88
// DialogueOff ;
16374: CALL_OW 7
// end else
16378: GO 16642
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16380: LD_VAR 0 2
16384: PUSH
16385: LD_VAR 0 3
16389: ARRAY
16390: PPUSH
16391: CALL_OW 258
16395: PUSH
16396: LD_INT 1
16398: EQUAL
16399: IFFALSE 16419
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16401: LD_VAR 0 2
16405: PUSH
16406: LD_VAR 0 3
16410: ARRAY
16411: PPUSH
16412: LD_STRING D2b-Sol1-1
16414: PPUSH
16415: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16419: LD_VAR 0 2
16423: PUSH
16424: LD_VAR 0 3
16428: ARRAY
16429: PPUSH
16430: CALL_OW 258
16434: PUSH
16435: LD_INT 2
16437: EQUAL
16438: IFFALSE 16458
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16440: LD_VAR 0 2
16444: PUSH
16445: LD_VAR 0 3
16449: ARRAY
16450: PPUSH
16451: LD_STRING D2b-FSol1-1
16453: PPUSH
16454: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16458: LD_EXP 17
16462: PPUSH
16463: LD_STRING D2b-Kurt-1
16465: PPUSH
16466: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16470: LD_VAR 0 2
16474: PUSH
16475: LD_VAR 0 3
16479: ARRAY
16480: PPUSH
16481: CALL_OW 258
16485: PUSH
16486: LD_INT 1
16488: EQUAL
16489: IFFALSE 16509
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16491: LD_VAR 0 2
16495: PUSH
16496: LD_VAR 0 3
16500: ARRAY
16501: PPUSH
16502: LD_STRING D2b-Sol1-2
16504: PPUSH
16505: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16509: LD_VAR 0 2
16513: PUSH
16514: LD_VAR 0 3
16518: ARRAY
16519: PPUSH
16520: CALL_OW 258
16524: PUSH
16525: LD_INT 2
16527: EQUAL
16528: IFFALSE 16548
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16530: LD_VAR 0 2
16534: PUSH
16535: LD_VAR 0 3
16539: ARRAY
16540: PPUSH
16541: LD_STRING D2b-FSol1-2
16543: PPUSH
16544: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16548: LD_EXP 17
16552: PPUSH
16553: LD_STRING D2b-Kurt-2
16555: PPUSH
16556: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16560: LD_VAR 0 2
16564: PUSH
16565: LD_VAR 0 3
16569: ARRAY
16570: PPUSH
16571: CALL_OW 258
16575: PUSH
16576: LD_INT 1
16578: EQUAL
16579: IFFALSE 16599
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16581: LD_VAR 0 2
16585: PUSH
16586: LD_VAR 0 3
16590: ARRAY
16591: PPUSH
16592: LD_STRING D2c-Sol1-2
16594: PPUSH
16595: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16599: LD_VAR 0 2
16603: PUSH
16604: LD_VAR 0 3
16608: ARRAY
16609: PPUSH
16610: CALL_OW 258
16614: PUSH
16615: LD_INT 2
16617: EQUAL
16618: IFFALSE 16638
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16620: LD_VAR 0 2
16624: PUSH
16625: LD_VAR 0 3
16629: ARRAY
16630: PPUSH
16631: LD_STRING D2c-FSol1-2
16633: PPUSH
16634: CALL_OW 88
// DialogueOff ;
16638: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16642: LD_ADDR_VAR 0 5
16646: PUSH
16647: CALL 5155 0 0
16651: ST_TO_ADDR
// if dec2 = 1 then
16652: LD_VAR 0 5
16656: PUSH
16657: LD_INT 1
16659: EQUAL
16660: IFFALSE 16698
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16662: LD_EXP 17
16666: PPUSH
16667: LD_STRING D2a-Kurt-1
16669: PPUSH
16670: CALL_OW 88
// DialogueOff ;
16674: CALL_OW 7
// InGameOff ;
16678: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16682: LD_INT 1
16684: PPUSH
16685: LD_INT 2
16687: PPUSH
16688: LD_INT 2
16690: PPUSH
16691: LD_INT 1
16693: PPUSH
16694: CALL_OW 80
// end ; if dec2 = 2 then
16698: LD_VAR 0 5
16702: PUSH
16703: LD_INT 2
16705: EQUAL
16706: IFFALSE 16898
// begin if tmp [ rnd ] = JMM then
16708: LD_VAR 0 2
16712: PUSH
16713: LD_VAR 0 3
16717: ARRAY
16718: PUSH
16719: LD_EXP 1
16723: EQUAL
16724: IFFALSE 16780
// begin Say ( JMM , D2c-JMM-1 ) ;
16726: LD_EXP 1
16730: PPUSH
16731: LD_STRING D2c-JMM-1
16733: PPUSH
16734: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16738: LD_EXP 17
16742: PPUSH
16743: LD_STRING D2c-Kurt-1
16745: PPUSH
16746: CALL_OW 88
// DialogueOff ;
16750: CALL_OW 7
// InGameOff ;
16754: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16758: LD_EXP 17
16762: PPUSH
16763: LD_INT 9
16765: PPUSH
16766: CALL_OW 113
// readyToEscape = 1 ;
16770: LD_ADDR_EXP 19
16774: PUSH
16775: LD_INT 1
16777: ST_TO_ADDR
// end else
16778: GO 16898
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16780: LD_VAR 0 2
16784: PUSH
16785: LD_VAR 0 3
16789: ARRAY
16790: PPUSH
16791: CALL_OW 258
16795: PUSH
16796: LD_INT 1
16798: EQUAL
16799: IFFALSE 16819
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
16801: LD_VAR 0 2
16805: PUSH
16806: LD_VAR 0 3
16810: ARRAY
16811: PPUSH
16812: LD_STRING D2c-Sol1-1
16814: PPUSH
16815: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16819: LD_VAR 0 2
16823: PUSH
16824: LD_VAR 0 3
16828: ARRAY
16829: PPUSH
16830: CALL_OW 258
16834: PUSH
16835: LD_INT 2
16837: EQUAL
16838: IFFALSE 16858
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
16840: LD_VAR 0 2
16844: PUSH
16845: LD_VAR 0 3
16849: ARRAY
16850: PPUSH
16851: LD_STRING D2c-FSol1-1
16853: PPUSH
16854: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16858: LD_EXP 17
16862: PPUSH
16863: LD_STRING D2c-Kurt-1
16865: PPUSH
16866: CALL_OW 88
// DialogueOff ;
16870: CALL_OW 7
// InGameOff ;
16874: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16878: LD_EXP 17
16882: PPUSH
16883: LD_INT 9
16885: PPUSH
16886: CALL_OW 113
// readyToEscape = 1 ;
16890: LD_ADDR_EXP 19
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16898: LD_VAR 0 4
16902: PUSH
16903: LD_INT 3
16905: EQUAL
16906: IFFALSE 17102
// begin DialogueOn ;
16908: CALL_OW 6
// if tmp [ rnd ] = JMM then
16912: LD_VAR 0 2
16916: PUSH
16917: LD_VAR 0 3
16921: ARRAY
16922: PUSH
16923: LD_EXP 1
16927: EQUAL
16928: IFFALSE 16984
// begin Say ( JMM , D2c-JMM-1 ) ;
16930: LD_EXP 1
16934: PPUSH
16935: LD_STRING D2c-JMM-1
16937: PPUSH
16938: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16942: LD_EXP 17
16946: PPUSH
16947: LD_STRING D2c-Kurt-1
16949: PPUSH
16950: CALL_OW 88
// DialogueOff ;
16954: CALL_OW 7
// InGameOff ;
16958: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16962: LD_EXP 17
16966: PPUSH
16967: LD_INT 9
16969: PPUSH
16970: CALL_OW 113
// readyToEscape = 1 ;
16974: LD_ADDR_EXP 19
16978: PUSH
16979: LD_INT 1
16981: ST_TO_ADDR
// end else
16982: GO 17102
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16984: LD_VAR 0 2
16988: PUSH
16989: LD_VAR 0 3
16993: ARRAY
16994: PPUSH
16995: CALL_OW 258
16999: PUSH
17000: LD_INT 1
17002: EQUAL
17003: IFFALSE 17023
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17005: LD_VAR 0 2
17009: PUSH
17010: LD_VAR 0 3
17014: ARRAY
17015: PPUSH
17016: LD_STRING D2c-Sol1-1
17018: PPUSH
17019: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17023: LD_VAR 0 2
17027: PUSH
17028: LD_VAR 0 3
17032: ARRAY
17033: PPUSH
17034: CALL_OW 258
17038: PUSH
17039: LD_INT 2
17041: EQUAL
17042: IFFALSE 17062
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17044: LD_VAR 0 2
17048: PUSH
17049: LD_VAR 0 3
17053: ARRAY
17054: PPUSH
17055: LD_STRING D2c-FSol1-1
17057: PPUSH
17058: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17062: LD_EXP 17
17066: PPUSH
17067: LD_STRING D2c-Kurt-1
17069: PPUSH
17070: CALL_OW 88
// DialogueOff ;
17074: CALL_OW 7
// InGameOff ;
17078: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17082: LD_EXP 17
17086: PPUSH
17087: LD_INT 9
17089: PPUSH
17090: CALL_OW 113
// readyToEscape = 1 ;
17094: LD_ADDR_EXP 19
17098: PUSH
17099: LD_INT 1
17101: ST_TO_ADDR
// end ; end ; end ; end_of_file
17102: LD_VAR 0 1
17106: RET
// every 0 0$1 do
17107: GO 17109
17109: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17110: LD_INT 3
17112: PPUSH
17113: LD_INT 32
17115: PPUSH
17116: LD_INT 3
17118: PPUSH
17119: CALL 5210 0 3
17123: END
// every 0 0$1 do
17124: GO 17126
17126: DISABLE
// begin enable ;
17127: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17128: LD_INT 3
17130: PPUSH
17131: LD_INT 2
17133: PPUSH
17134: CALL 5295 0 2
// if disableHealAI = 0 then
17138: LD_EXP 30
17142: PUSH
17143: LD_INT 0
17145: EQUAL
17146: IFFALSE 17164
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17148: LD_INT 3
17150: PPUSH
17151: LD_INT 10
17153: PPUSH
17154: LD_INT 11
17156: PPUSH
17157: LD_INT 32
17159: PPUSH
17160: CALL 5554 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17164: LD_INT 3
17166: PPUSH
17167: LD_INT 51
17169: PPUSH
17170: LD_INT 7
17172: PPUSH
17173: CALL 6277 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17177: LD_INT 3
17179: PPUSH
17180: LD_INT 14
17182: PPUSH
17183: LD_INT 121
17185: PPUSH
17186: LD_INT 100
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL 6457 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17196: LD_INT 3
17198: PPUSH
17199: LD_EXP 28
17203: PPUSH
17204: CALL 7248 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17208: LD_INT 3
17210: PPUSH
17211: LD_INT 8
17213: PUSH
17214: LD_INT 67
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: PPUSH
17224: LD_INT 2
17226: PPUSH
17227: CALL_OW 12
17231: ARRAY
17232: PPUSH
17233: LD_INT 11
17235: PPUSH
17236: CALL 7454 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17240: LD_INT 3
17242: PPUSH
17243: LD_INT 1
17245: PPUSH
17246: CALL 7811 0 2
// end ;
17250: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17251: LD_INT 22
17253: PUSH
17254: LD_INT 3
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 21
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 3
17273: PUSH
17274: LD_INT 34
17276: PUSH
17277: LD_INT 51
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: PPUSH
17293: CALL_OW 69
17297: PUSH
17298: LD_INT 0
17300: EQUAL
17301: IFFALSE 17435
17303: GO 17305
17305: DISABLE
// begin enable ;
17306: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17307: LD_INT 3
17309: PPUSH
17310: LD_INT 21
17312: PPUSH
17313: LD_INT 4
17315: PUSH
17316: LD_INT 5
17318: PUSH
17319: LD_INT 5
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: PUSH
17327: LD_OWVAR 67
17331: ARRAY
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 43
17338: PUSH
17339: LD_INT 43
17341: PUSH
17342: LD_INT 43
17344: PUSH
17345: LD_INT 44
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 44
17356: PUSH
17357: LD_INT 44
17359: PUSH
17360: LD_INT 44
17362: PUSH
17363: LD_INT 43
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 44
17374: PUSH
17375: LD_INT 44
17377: PUSH
17378: LD_INT 44
17380: PUSH
17381: LD_INT 44
17383: PUSH
17384: LD_INT 46
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_OWVAR 67
17403: ARRAY
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_INT 24
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_OWVAR 67
17429: ARRAY
17430: PPUSH
17431: CALL 5820 0 8
// end ;
17435: END
// every 5 5$0 do
17436: GO 17438
17438: DISABLE
// begin enable ;
17439: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17440: LD_INT 17
17442: PPUSH
17443: LD_INT 22
17445: PPUSH
17446: LD_INT 1
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 42
17454: PUSH
17455: LD_INT 43
17457: PUSH
17458: LD_INT 44
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 1
17468: PPUSH
17469: LD_INT 3
17471: PPUSH
17472: CALL_OW 12
17476: ARRAY
17477: PPUSH
17478: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17482: LD_INT 17
17484: PPUSH
17485: LD_INT 22
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_INT 42
17496: PUSH
17497: LD_INT 43
17499: PUSH
17500: LD_INT 44
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: PPUSH
17511: LD_INT 3
17513: PPUSH
17514: CALL_OW 12
17518: ARRAY
17519: PPUSH
17520: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17524: LD_INT 17
17526: PPUSH
17527: LD_INT 22
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_INT 42
17538: PUSH
17539: LD_INT 43
17541: PUSH
17542: LD_INT 44
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 1
17552: PPUSH
17553: LD_INT 3
17555: PPUSH
17556: CALL_OW 12
17560: ARRAY
17561: PPUSH
17562: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17566: LD_INT 17
17568: PPUSH
17569: LD_INT 22
17571: PPUSH
17572: LD_INT 1
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_INT 51
17580: PPUSH
17581: CALL_OW 185
// end ;
17585: END
// every 2 2$0 do var i , j ;
17586: GO 17588
17588: DISABLE
17589: LD_INT 0
17591: PPUSH
17592: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17593: LD_INT 14700
17595: PUSH
17596: LD_INT 33600
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 1
17605: PPUSH
17606: LD_INT 2
17608: PPUSH
17609: CALL_OW 12
17613: ARRAY
17614: PPUSH
17615: CALL_OW 67
// disableHealAI = 1 ;
17619: LD_ADDR_EXP 30
17623: PUSH
17624: LD_INT 1
17626: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17627: LD_ADDR_VAR 0 1
17631: PUSH
17632: LD_INT 22
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 25
17644: PUSH
17645: LD_INT 4
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PPUSH
17656: CALL_OW 69
17660: PUSH
17661: FOR_IN
17662: IFFALSE 17675
// ComExitBuilding ( i ) ;
17664: LD_VAR 0 1
17668: PPUSH
17669: CALL_OW 122
17673: GO 17661
17675: POP
17676: POP
// wait ( 0 0$1 ) ;
17677: LD_INT 35
17679: PPUSH
17680: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17684: LD_INT 35
17686: PPUSH
17687: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17691: LD_ADDR_VAR 0 1
17695: PUSH
17696: LD_INT 22
17698: PUSH
17699: LD_INT 3
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 25
17708: PUSH
17709: LD_INT 4
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: PPUSH
17720: CALL_OW 69
17724: PUSH
17725: FOR_IN
17726: IFFALSE 17803
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 19
17735: PPUSH
17736: LD_INT 22
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 25
17748: PUSH
17749: LD_INT 12
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PPUSH
17760: CALL_OW 70
17764: PUSH
17765: FOR_IN
17766: IFFALSE 17799
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_VAR 0 2
17777: PPUSH
17778: CALL_OW 250
17782: PPUSH
17783: LD_VAR 0 2
17787: PPUSH
17788: CALL_OW 251
17792: PPUSH
17793: CALL_OW 191
// end ;
17797: GO 17765
17799: POP
17800: POP
// end ;
17801: GO 17725
17803: POP
17804: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] ;
17805: LD_INT 22
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 25
17817: PUSH
17818: LD_INT 4
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: PUSH
17834: LD_INT 0
17836: EQUAL
17837: PUSH
17838: LD_EXP 29
17842: PUSH
17843: LD_INT 6
17845: PUSH
17846: LD_INT 7
17848: PUSH
17849: LD_INT 8
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: PUSH
17857: LD_OWVAR 67
17861: ARRAY
17862: GREATEREQUAL
17863: OR
17864: IFFALSE 17684
// disableHealAI = 0 ;
17866: LD_ADDR_EXP 30
17870: PUSH
17871: LD_INT 0
17873: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17874: LD_ADDR_VAR 0 1
17878: PUSH
17879: LD_INT 22
17881: PUSH
17882: LD_INT 3
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 25
17891: PUSH
17892: LD_INT 12
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: PUSH
17908: FOR_IN
17909: IFFALSE 17925
// SetClass ( i , 16 ) ;
17911: LD_VAR 0 1
17915: PPUSH
17916: LD_INT 16
17918: PPUSH
17919: CALL_OW 336
17923: GO 17908
17925: POP
17926: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17927: LD_ADDR_VAR 0 1
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_INT 3
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 25
17944: PUSH
17945: LD_INT 4
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PPUSH
17956: CALL_OW 69
17960: PUSH
17961: FOR_IN
17962: IFFALSE 17981
// ComMoveXY ( i , 113 , 94 ) ;
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_INT 113
17971: PPUSH
17972: LD_INT 94
17974: PPUSH
17975: CALL_OW 111
17979: GO 17961
17981: POP
17982: POP
// end ;
17983: PPOPN 2
17985: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
17986: LD_INT 21
17988: PPUSH
17989: CALL_OW 255
17993: PUSH
17994: LD_INT 3
17996: EQUAL
17997: PUSH
17998: LD_INT 21
18000: PPUSH
18001: CALL_OW 302
18005: AND
18006: PUSH
18007: LD_INT 22
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 34
18019: PUSH
18020: LD_INT 51
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 69
18035: PUSH
18036: LD_INT 0
18038: EQUAL
18039: AND
18040: IFFALSE 18072
18042: GO 18044
18044: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18045: LD_INT 21
18047: PPUSH
18048: LD_INT 23
18050: PPUSH
18051: LD_INT 1
18053: PPUSH
18054: LD_INT 1
18056: PPUSH
18057: LD_INT 51
18059: PPUSH
18060: CALL_OW 185
// wait ( 5 5$0 ) ;
18064: LD_INT 10500
18066: PPUSH
18067: CALL_OW 67
// enable ;
18071: ENABLE
// end ; end_of_file
18072: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18073: LD_EXP 24
18077: PUSH
18078: LD_INT 0
18080: LESSEQUAL
18081: IFFALSE 18221
18083: GO 18085
18085: DISABLE
18086: LD_INT 0
18088: PPUSH
18089: PPUSH
18090: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18091: LD_ADDR_VAR 0 2
18095: PUSH
18096: LD_INT 22
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 21
18108: PUSH
18109: LD_INT 3
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 30
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ST_TO_ADDR
// for i in tmp do
18154: LD_ADDR_VAR 0 1
18158: PUSH
18159: LD_VAR 0 2
18163: PUSH
18164: FOR_IN
18165: IFFALSE 18198
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18167: LD_ADDR_VAR 0 3
18171: PUSH
18172: LD_VAR 0 3
18176: PUSH
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 274
18186: PPUSH
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 275
18194: PLUS
18195: ST_TO_ADDR
18196: GO 18164
18198: POP
18199: POP
// if yourCrates >= needCrates then
18200: LD_VAR 0 3
18204: PUSH
18205: LD_EXP 23
18209: GREATEREQUAL
18210: IFFALSE 18221
// begin FinishMission ( yourCrates ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: CALL 18224 0 1
// end ; end ;
18221: PPOPN 3
18223: END
// export function FinishMission ( crates ) ; begin
18224: LD_INT 0
18226: PPUSH
// if crates + 100 > crates then
18227: LD_VAR 0 1
18231: PUSH
18232: LD_INT 100
18234: PLUS
18235: PUSH
18236: LD_VAR 0 1
18240: GREATER
18241: IFFALSE 18265
// begin AddMedal ( cans , 1 ) ;
18243: LD_STRING cans
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18253: LD_INT 1
18255: PPUSH
18256: LD_STRING 06_crates_1
18258: PPUSH
18259: CALL_OW 39
// end else
18263: GO 18286
// begin AddMedal ( cans , - 1 ) ;
18265: LD_STRING cans
18267: PPUSH
18268: LD_INT 1
18270: NEG
18271: PPUSH
18272: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18276: LD_INT 0
18278: PPUSH
18279: LD_STRING 06_crates_1
18281: PPUSH
18282: CALL_OW 39
// end ; if unitLost > 2 then
18286: LD_EXP 27
18290: PUSH
18291: LD_INT 2
18293: GREATER
18294: IFFALSE 18308
// begin AddMedal ( people , 1 ) ;
18296: LD_STRING people
18298: PPUSH
18299: LD_INT 1
18301: PPUSH
18302: CALL_OW 101
// end else
18306: GO 18319
// begin AddMedal ( people , - 1 ) ;
18308: LD_STRING people
18310: PPUSH
18311: LD_INT 1
18313: NEG
18314: PPUSH
18315: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18319: LD_EXP 26
18323: PPUSH
18324: LD_STRING 06_remoteVehs_1
18326: PPUSH
18327: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18331: LD_EXP 26
18335: PUSH
18336: LD_INT 1
18338: EQUAL
18339: IFFALSE 18353
// begin AddMedal ( remote , 1 ) ;
18341: LD_STRING remote
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 101
// end else
18351: GO 18393
// begin if GetTech ( 18 , 1 ) = state_enabled then
18353: LD_INT 18
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 321
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18382
// begin AddMedal ( remote , - 1 ) ;
18369: LD_STRING remote
18371: PPUSH
18372: LD_INT 1
18374: NEG
18375: PPUSH
18376: CALL_OW 101
// end else
18380: GO 18393
// begin AddMedal ( remote , - 2 ) ;
18382: LD_STRING remote
18384: PPUSH
18385: LD_INT 2
18387: NEG
18388: PPUSH
18389: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18393: LD_EXP 18
18397: PPUSH
18398: LD_STRING 06_KurtStatus_1
18400: PPUSH
18401: CALL_OW 39
// GiveMedals ( Main ) ;
18405: LD_STRING Main
18407: PPUSH
18408: CALL_OW 102
// RewardPeople ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
18412: LD_INT 22
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18440: LD_EXP 1
18444: PPUSH
18445: LD_STRING JMM
18447: PPUSH
18448: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
18452: LD_EXP 2
18456: PPUSH
18457: LD_STRING Lisa
18459: PPUSH
18460: CALL 4698 0 2
// EnchancedSaveCharacters ( Bobby , Bobby ) ;
18464: LD_EXP 3
18468: PPUSH
18469: LD_STRING Bobby
18471: PPUSH
18472: CALL 4698 0 2
// EnchancedSaveCharacters ( Cyrus , Cyrus ) ;
18476: LD_EXP 4
18480: PPUSH
18481: LD_STRING Cyrus
18483: PPUSH
18484: CALL 4698 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
18488: LD_EXP 5
18492: PPUSH
18493: LD_STRING Frank
18495: PPUSH
18496: CALL 4698 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
18500: LD_EXP 6
18504: PPUSH
18505: LD_STRING Brown
18507: PPUSH
18508: CALL 4698 0 2
// EnchancedSaveCharacters ( Donaldson , Donaldson ) ;
18512: LD_EXP 7
18516: PPUSH
18517: LD_STRING Donaldson
18519: PPUSH
18520: CALL 4698 0 2
// EnchancedSaveCharacters ( Gladstone , Gladstone ) ;
18524: LD_EXP 8
18528: PPUSH
18529: LD_STRING Gladstone
18531: PPUSH
18532: CALL 4698 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
18536: LD_EXP 9
18540: PPUSH
18541: LD_STRING Denis
18543: PPUSH
18544: CALL 4698 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
18548: LD_EXP 13
18552: PPUSH
18553: LD_STRING Joan
18555: PPUSH
18556: CALL 4698 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18560: LD_EXP 14
18564: PPUSH
18565: LD_STRING 06_JoanStatus_1
18567: PPUSH
18568: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18572: LD_INT 50
18574: PUSH
18575: EMPTY
18576: LIST
18577: PUSH
18578: LD_INT 22
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 21
18590: PUSH
18591: LD_INT 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 25
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 25
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 25
18623: PUSH
18624: LD_INT 3
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 25
18633: PUSH
18634: LD_INT 4
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: PPUSH
18654: CALL_OW 69
18658: PUSH
18659: LD_EXP 1
18663: PUSH
18664: LD_EXP 2
18668: PUSH
18669: LD_EXP 3
18673: PUSH
18674: LD_EXP 4
18678: PUSH
18679: LD_EXP 5
18683: PUSH
18684: LD_EXP 6
18688: PUSH
18689: LD_EXP 7
18693: PUSH
18694: LD_EXP 8
18698: PUSH
18699: LD_EXP 9
18703: PUSH
18704: LD_EXP 13
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: DIFF
18721: PPUSH
18722: LD_STRING 06_other_survivors
18724: PPUSH
18725: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18729: LD_INT 50
18731: PUSH
18732: EMPTY
18733: LIST
18734: PUSH
18735: LD_INT 22
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 21
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 25
18760: PUSH
18761: LD_INT 12
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 25
18770: PUSH
18771: LD_INT 16
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: PPUSH
18794: LD_STRING 06_other_apemans
18796: PPUSH
18797: CALL_OW 38
// YouWin ;
18801: CALL_OW 103
// end ; end_of_file
18805: LD_VAR 0 2
18809: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
18810: LD_EXP 34
18814: PUSH
18815: LD_INT 4
18817: PUSH
18818: LD_INT 3
18820: PUSH
18821: LD_INT 3
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: PUSH
18829: LD_OWVAR 67
18833: ARRAY
18834: EQUAL
18835: IFFALSE 18950
18837: GO 18839
18839: DISABLE
// begin enable ;
18840: ENABLE
// sendedConvoys = 0 ;
18841: LD_ADDR_EXP 34
18845: PUSH
18846: LD_INT 0
18848: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
18849: LD_INT 6
18851: PPUSH
18852: LD_INT 3
18854: PPUSH
18855: LD_INT 3
18857: PPUSH
18858: LD_INT 4
18860: PPUSH
18861: CALL_OW 12
18865: PUSH
18866: LD_INT 4
18868: PPUSH
18869: LD_INT 5
18871: PPUSH
18872: CALL_OW 12
18876: PUSH
18877: LD_INT 6
18879: PPUSH
18880: LD_INT 7
18882: PPUSH
18883: CALL_OW 12
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PUSH
18893: LD_OWVAR 67
18897: ARRAY
18898: PPUSH
18899: LD_INT 0
18901: PPUSH
18902: LD_INT 0
18904: PPUSH
18905: LD_INT 0
18907: PPUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_EXP 31
18915: PPUSH
18916: LD_EXP 32
18920: PPUSH
18921: CALL_OW 12
18925: PPUSH
18926: LD_INT 18
18928: PPUSH
18929: LD_INT 17
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: LD_INT 2
18940: PPUSH
18941: CALL_OW 12
18945: PPUSH
18946: CALL 8064 0 12
// end ; end_of_file
18950: END
// export function PrepareNature ; var i , un ; begin
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// for i = 1 to Difficulty + 2 do
18956: LD_ADDR_VAR 0 2
18960: PUSH
18961: DOUBLE
18962: LD_INT 1
18964: DEC
18965: ST_TO_ADDR
18966: LD_OWVAR 67
18970: PUSH
18971: LD_INT 2
18973: PLUS
18974: PUSH
18975: FOR_TO
18976: IFFALSE 19111
// begin hc_sex = sex_male ;
18978: LD_ADDR_OWVAR 27
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// uc_side = 0 ;
18986: LD_ADDR_OWVAR 20
18990: PUSH
18991: LD_INT 0
18993: ST_TO_ADDR
// uc_nation = nation_nature ;
18994: LD_ADDR_OWVAR 21
18998: PUSH
18999: LD_INT 0
19001: ST_TO_ADDR
// hc_class = class_tiger ;
19002: LD_ADDR_OWVAR 28
19006: PUSH
19007: LD_INT 14
19009: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19010: LD_ADDR_OWVAR 31
19014: PUSH
19015: LD_EXP 32
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: LD_INT 0
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
19035: LD_ADDR_OWVAR 35
19039: PUSH
19040: LD_INT 30
19042: PPUSH
19043: LD_INT 40
19045: PPUSH
19046: CALL_OW 12
19050: PUSH
19051: LD_INT 40
19053: PPUSH
19054: LD_INT 50
19056: PPUSH
19057: CALL_OW 12
19061: PUSH
19062: LD_INT 50
19064: PPUSH
19065: LD_INT 60
19067: PPUSH
19068: CALL_OW 12
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: PUSH
19078: LD_OWVAR 67
19082: ARRAY
19083: ST_TO_ADDR
// un = CreateHuman ;
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: CALL_OW 44
19093: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19094: LD_VAR 0 3
19098: PPUSH
19099: LD_INT 20
19101: PPUSH
19102: LD_INT 0
19104: PPUSH
19105: CALL_OW 49
// end ;
19109: GO 18975
19111: POP
19112: POP
// for i = 1 to rand ( 3 , 4 ) do
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: DOUBLE
19119: LD_INT 1
19121: DEC
19122: ST_TO_ADDR
19123: LD_INT 3
19125: PPUSH
19126: LD_INT 4
19128: PPUSH
19129: CALL_OW 12
19133: PUSH
19134: FOR_TO
19135: IFFALSE 19229
// begin hc_sex = sex_male ;
19137: LD_ADDR_OWVAR 27
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// uc_side = 0 ;
19145: LD_ADDR_OWVAR 20
19149: PUSH
19150: LD_INT 0
19152: ST_TO_ADDR
// uc_nation = nation_nature ;
19153: LD_ADDR_OWVAR 21
19157: PUSH
19158: LD_INT 0
19160: ST_TO_ADDR
// hc_class = 18 ;
19161: LD_ADDR_OWVAR 28
19165: PUSH
19166: LD_INT 18
19168: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19169: LD_ADDR_OWVAR 31
19173: PUSH
19174: LD_EXP 32
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: LD_INT 0
19184: PUSH
19185: LD_INT 0
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: ST_TO_ADDR
// hc_agressivity = 0 ;
19194: LD_ADDR_OWVAR 35
19198: PUSH
19199: LD_INT 0
19201: ST_TO_ADDR
// un = CreateHuman ;
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: CALL_OW 44
19211: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19212: LD_VAR 0 3
19216: PPUSH
19217: LD_INT 20
19219: PPUSH
19220: LD_INT 0
19222: PPUSH
19223: CALL_OW 49
// end ;
19227: GO 19134
19229: POP
19230: POP
// end ;
19231: LD_VAR 0 1
19235: RET
