// export JMM , Gladstone , Frank , Woodruff , Lisa , Brown , Denis , Cyrus ; export Harisson , Doctor , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 33
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 18
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 19
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 16
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 12
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 31
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 21
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 22
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 24
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 32
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 27
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 25
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 26
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 23
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 17184 0 0
// PrepareDifficulty ;
 173: CALL 3984 0 0
// PrepareRussian ;
 177: CALL 3148 0 0
// PrepareHeroes ;
 181: CALL 424 0 0
// end ;
 185: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 186: LD_EXP 33
 190: PUSH
 191: LD_INT 1
 193: EQUAL
 194: IFFALSE 421
 196: GO 198
 198: DISABLE
 199: LD_INT 0
 201: PPUSH
// begin enable ;
 202: ENABLE
// fogoff ( true ) ;
 203: LD_INT 1
 205: PPUSH
 206: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 210: LD_ADDR_VAR 0 1
 214: PUSH
 215: LD_INT 22
 217: PUSH
 218: LD_INT 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 21
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PPUSH
 239: CALL_OW 69
 243: PUSH
 244: FOR_IN
 245: IFFALSE 261
// SetLives ( i , 1000 ) ;
 247: LD_VAR 0 1
 251: PPUSH
 252: LD_INT 1000
 254: PPUSH
 255: CALL_OW 234
 259: GO 244
 261: POP
 262: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 263: LD_ADDR_VAR 0 1
 267: PUSH
 268: LD_INT 22
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 0
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PPUSH
 292: CALL_OW 69
 296: PUSH
 297: FOR_IN
 298: IFFALSE 322
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 300: LD_VAR 0 1
 304: PPUSH
 305: CALL_OW 274
 309: PPUSH
 310: LD_INT 1
 312: PPUSH
 313: LD_INT 9999
 315: PPUSH
 316: CALL_OW 277
 320: GO 297
 322: POP
 323: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 324: LD_ADDR_VAR 0 1
 328: PUSH
 329: LD_INT 22
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: LD_INT 30
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 383
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 361: LD_VAR 0 1
 365: PPUSH
 366: CALL_OW 274
 370: PPUSH
 371: LD_INT 2
 373: PPUSH
 374: LD_INT 9999
 376: PPUSH
 377: CALL_OW 277
 381: GO 358
 383: POP
 384: POP
// if IsSelected ( rudepo ) then
 385: LD_INT 2
 387: PPUSH
 388: CALL_OW 306
 392: IFFALSE 402
// your_side = 3 ;
 394: LD_ADDR_OWVAR 2
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// if IsSelected ( JMM ) then
 402: LD_EXP 1
 406: PPUSH
 407: CALL_OW 306
 411: IFFALSE 421
// your_side = 1 ;
 413: LD_ADDR_OWVAR 2
 417: PUSH
 418: LD_INT 1
 420: ST_TO_ADDR
// end ; end_of_file
 421: PPOPN 1
 423: END
// export function PrepareHeroes ; var veh ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// uc_side = 1 ;
 428: LD_ADDR_OWVAR 20
 432: PUSH
 433: LD_INT 1
 435: ST_TO_ADDR
// uc_nation = 1 ;
 436: LD_ADDR_OWVAR 21
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 444: LD_ADDR_EXP 1
 448: PUSH
 449: LD_STRING JMM
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL 3525 0 2
 459: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 460: LD_ADDR_EXP 5
 464: PUSH
 465: LD_STRING Lisa
 467: PPUSH
 468: LD_INT 0
 470: PPUSH
 471: CALL 3525 0 2
 475: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 476: LD_ADDR_EXP 6
 480: PUSH
 481: LD_STRING Brown
 483: PPUSH
 484: LD_INT 0
 486: PPUSH
 487: CALL 3525 0 2
 491: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 492: LD_ADDR_EXP 4
 496: PUSH
 497: LD_STRING EveWoodruff
 499: PPUSH
 500: LD_INT 0
 502: PPUSH
 503: CALL 3525 0 2
 507: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_STRING Gladstone
 515: PPUSH
 516: LD_INT 0
 518: PPUSH
 519: CALL 3525 0 2
 523: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 524: LD_ADDR_EXP 3
 528: PUSH
 529: LD_STRING Frank
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL 3525 0 2
 539: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 540: LD_ADDR_EXP 9
 544: PUSH
 545: LD_STRING Harisson
 547: PPUSH
 548: LD_INT 0
 550: PPUSH
 551: CALL 3525 0 2
 555: ST_TO_ADDR
// hc_class := 4 ;
 556: LD_ADDR_OWVAR 28
 560: PUSH
 561: LD_INT 4
 563: ST_TO_ADDR
// hc_sex := sex_male ;
 564: LD_ADDR_OWVAR 27
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// hc_gallery :=  ;
 572: LD_ADDR_OWVAR 33
 576: PUSH
 577: LD_STRING 
 579: ST_TO_ADDR
// hc_name :=  ;
 580: LD_ADDR_OWVAR 26
 584: PUSH
 585: LD_STRING 
 587: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
 588: LD_ADDR_OWVAR 31
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 1
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// Doctor = CreateHuman ;
 611: LD_ADDR_EXP 10
 615: PUSH
 616: CALL_OW 44
 620: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
 621: LD_ADDR_EXP 13
 625: PUSH
 626: CALL_OW 44
 630: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
 631: LD_EXP 13
 635: PPUSH
 636: LD_VAR 0 2
 640: PPUSH
 641: CALL_OW 52
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 645: LD_EXP 5
 649: PPUSH
 650: LD_INT 2
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: CALL_OW 49
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 660: LD_EXP 6
 664: PPUSH
 665: LD_INT 2
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// PlaceUnitArea ( Woodruff , PlayerSpawn , false ) ;
 675: LD_EXP 4
 679: PPUSH
 680: LD_INT 2
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
 690: LD_EXP 2
 694: PPUSH
 695: LD_INT 2
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 705: LD_EXP 3
 709: PPUSH
 710: LD_INT 2
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 49
// SetClass ( Brown , 2 ) ;
 720: LD_EXP 6
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: CALL_OW 336
// vc_engine = 1 ;
 732: LD_ADDR_OWVAR 39
 736: PUSH
 737: LD_INT 1
 739: ST_TO_ADDR
// vc_control = 1 ;
 740: LD_ADDR_OWVAR 38
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// vc_weapon = 12 ;
 748: LD_ADDR_OWVAR 40
 752: PUSH
 753: LD_INT 12
 755: ST_TO_ADDR
// vc_chassis = 2 ;
 756: LD_ADDR_OWVAR 37
 760: PUSH
 761: LD_INT 2
 763: ST_TO_ADDR
// veh = CreateVehicle ;
 764: LD_ADDR_VAR 0 2
 768: PUSH
 769: CALL_OW 45
 773: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 774: LD_VAR 0 2
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_VAR 0 2
 798: PPUSH
 799: CALL_OW 52
// AddCargo ( veh , 1 , [ 100 , 80 , 50 ] [ Difficulty ] ) ;
 803: LD_VAR 0 2
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 80
 816: PUSH
 817: LD_INT 50
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_OWVAR 67
 829: ARRAY
 830: PPUSH
 831: CALL_OW 291
// SetFuel ( veh , 50 ) ;
 835: LD_VAR 0 2
 839: PPUSH
 840: LD_INT 50
 842: PPUSH
 843: CALL_OW 240
// end ;
 847: LD_VAR 0 1
 851: RET
// export function PrepareDenis ; begin
 852: LD_INT 0
 854: PPUSH
// uc_side = 1 ;
 855: LD_ADDR_OWVAR 20
 859: PUSH
 860: LD_INT 1
 862: ST_TO_ADDR
// uc_nation = 1 ;
 863: LD_ADDR_OWVAR 21
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 871: LD_ADDR_EXP 7
 875: PUSH
 876: LD_STRING Denis
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL 3525 0 2
 886: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
 887: LD_EXP 7
 891: PPUSH
 892: LD_INT 13
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
// SetClass ( Denis , 4 ) ;
 902: LD_EXP 7
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: CALL_OW 336
// SetLives ( Denis , 750 ) ;
 914: LD_EXP 7
 918: PPUSH
 919: LD_INT 750
 921: PPUSH
 922: CALL_OW 234
// end ;
 926: LD_VAR 0 1
 930: RET
// export function HarrisonSupport ; var un , veh ; begin
 931: LD_INT 0
 933: PPUSH
 934: PPUSH
 935: PPUSH
// uc_side = 1 ;
 936: LD_ADDR_OWVAR 20
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// uc_nation = 1 ;
 944: LD_ADDR_OWVAR 21
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// vc_engine = 1 ;
 952: LD_ADDR_OWVAR 39
 956: PUSH
 957: LD_INT 1
 959: ST_TO_ADDR
// vc_control = 1 ;
 960: LD_ADDR_OWVAR 38
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
 968: LD_ADDR_OWVAR 40
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 4
 978: PUSH
 979: LD_INT 2
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_OWVAR 67
 991: ARRAY
 992: ST_TO_ADDR
// vc_chassis = 2 ;
 993: LD_ADDR_OWVAR 37
 997: PUSH
 998: LD_INT 2
1000: ST_TO_ADDR
// veh = CreateVehicle ;
1001: LD_ADDR_VAR 0 3
1005: PUSH
1006: CALL_OW 45
1010: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1011: LD_VAR 0 3
1015: PPUSH
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: CALL_OW 49
// hc_class := 2 ;
1026: LD_ADDR_OWVAR 28
1030: PUSH
1031: LD_INT 2
1033: ST_TO_ADDR
// hc_sex := sex_male ;
1034: LD_ADDR_OWVAR 27
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1042: LD_ADDR_OWVAR 33
1046: PUSH
1047: LD_STRING SecondCharsGal
1049: ST_TO_ADDR
// hc_face_number := 52 ;
1050: LD_ADDR_OWVAR 34
1054: PUSH
1055: LD_INT 52
1057: ST_TO_ADDR
// hc_name := Craig Brown ;
1058: LD_ADDR_OWVAR 26
1062: PUSH
1063: LD_STRING Craig Brown
1065: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1066: LD_ADDR_OWVAR 31
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 3
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1089: LD_ADDR_EXP 13
1093: PUSH
1094: CALL_OW 44
1098: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
1099: LD_EXP 13
1103: PPUSH
1104: LD_VAR 0 3
1108: PPUSH
1109: CALL_OW 52
// vc_engine = 1 ;
1113: LD_ADDR_OWVAR 39
1117: PUSH
1118: LD_INT 1
1120: ST_TO_ADDR
// vc_control = 1 ;
1121: LD_ADDR_OWVAR 38
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
1129: LD_ADDR_OWVAR 40
1133: PUSH
1134: LD_INT 4
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_OWVAR 67
1152: ARRAY
1153: ST_TO_ADDR
// vc_chassis = 2 ;
1154: LD_ADDR_OWVAR 37
1158: PUSH
1159: LD_INT 2
1161: ST_TO_ADDR
// veh = CreateVehicle ;
1162: LD_ADDR_VAR 0 3
1166: PUSH
1167: CALL_OW 45
1171: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1172: LD_VAR 0 3
1176: PPUSH
1177: LD_INT 3
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// SetFuel ( veh , 50 ) ;
1187: LD_VAR 0 3
1191: PPUSH
1192: LD_INT 50
1194: PPUSH
1195: CALL_OW 240
// hc_class := 1 ;
1199: LD_ADDR_OWVAR 28
1203: PUSH
1204: LD_INT 1
1206: ST_TO_ADDR
// hc_sex := sex_female ;
1207: LD_ADDR_OWVAR 27
1211: PUSH
1212: LD_INT 2
1214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1215: LD_ADDR_OWVAR 33
1219: PUSH
1220: LD_STRING SecondCharsGal
1222: ST_TO_ADDR
// hc_face_number := 45 ;
1223: LD_ADDR_OWVAR 34
1227: PUSH
1228: LD_INT 45
1230: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
1231: LD_ADDR_OWVAR 26
1235: PUSH
1236: LD_STRING Ingrid Jonsson
1238: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1239: LD_ADDR_OWVAR 31
1243: PUSH
1244: LD_INT 1
1246: PUSH
1247: LD_INT 3
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
1262: LD_ADDR_EXP 14
1266: PUSH
1267: CALL_OW 44
1271: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
1272: LD_EXP 14
1276: PPUSH
1277: LD_VAR 0 3
1281: PPUSH
1282: CALL_OW 52
// SetFuel ( veh , 45 ) ;
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_INT 45
1293: PPUSH
1294: CALL_OW 240
// end ;
1298: LD_VAR 0 1
1302: RET
// export function PrepareJoan ; var tmp , rnd ; begin
1303: LD_INT 0
1305: PPUSH
1306: PPUSH
1307: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ;
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: LD_INT 22
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 21
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PUSH
1333: LD_INT 26
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_VAR 0 2
1365: PPUSH
1366: CALL_OW 12
1370: ST_TO_ADDR
// uc_side = 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
1379: LD_ADDR_EXP 11
1383: PUSH
1384: LD_STRING Joan
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: CALL 3525 0 2
1394: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
1395: LD_EXP 11
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_VAR 0 3
1409: ARRAY
1410: PPUSH
1411: CALL_OW 250
1415: PPUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_VAR 0 3
1425: ARRAY
1426: PPUSH
1427: CALL_OW 251
1431: PPUSH
1432: LD_INT 2
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL_OW 50
// SetLives ( Joan , 250 ) ;
1442: LD_EXP 11
1446: PPUSH
1447: LD_INT 250
1449: PPUSH
1450: CALL_OW 234
// InGameOn ;
1454: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
1458: LD_EXP 11
1462: PPUSH
1463: CALL_OW 87
// wait ( 0 0$2 ) ;
1467: LD_INT 70
1469: PPUSH
1470: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
1474: LD_VAR 0 2
1478: PUSH
1479: LD_VAR 0 3
1483: ARRAY
1484: PPUSH
1485: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
1489: LD_VAR 0 2
1493: PUSH
1494: LD_VAR 0 3
1498: ARRAY
1499: PPUSH
1500: CALL_OW 122
// wait ( 0 0$1 ) ;
1504: LD_INT 35
1506: PPUSH
1507: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
1511: LD_VAR 0 2
1515: PUSH
1516: LD_VAR 0 3
1520: ARRAY
1521: PPUSH
1522: LD_EXP 11
1526: PPUSH
1527: CALL_OW 112
// wait ( 0 0$2 ) ;
1531: LD_INT 70
1533: PPUSH
1534: CALL_OW 67
// DialogueOn ;
1538: CALL_OW 6
// if tmp [ rnd ] = JMM then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_VAR 0 3
1551: ARRAY
1552: PUSH
1553: LD_EXP 1
1557: EQUAL
1558: IFFALSE 1685
// begin Say ( JMM , D5b-JMM-1 ) ;
1560: LD_EXP 1
1564: PPUSH
1565: LD_STRING D5b-JMM-1
1567: PPUSH
1568: CALL_OW 88
// DialogueOff ;
1572: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1576: LD_EXP 11
1580: PPUSH
1581: LD_INT 500
1583: PPUSH
1584: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
1588: LD_EXP 11
1592: PPUSH
1593: LD_EXP 1
1597: PPUSH
1598: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 11
1611: PPUSH
1612: CALL_OW 119
// wait ( 0 0$1 ) ;
1616: LD_INT 35
1618: PPUSH
1619: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
1623: LD_EXP 11
1627: PPUSH
1628: LD_STRING D5b-Joan-1
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D5b-JMM-2
1642: PPUSH
1643: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
1647: LD_EXP 11
1651: PPUSH
1652: LD_STRING D5b-Joan-2
1654: PPUSH
1655: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
1659: LD_EXP 1
1663: PPUSH
1664: LD_STRING D5b-JMM-3
1666: PPUSH
1667: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
1671: LD_EXP 11
1675: PPUSH
1676: LD_STRING D5b-Joan-3
1678: PPUSH
1679: CALL_OW 88
// end else
1683: GO 2025
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
1685: LD_VAR 0 2
1689: PUSH
1690: LD_VAR 0 3
1694: ARRAY
1695: PPUSH
1696: LD_STRING D5a-Sol1-1
1698: PPUSH
1699: CALL_OW 88
// DialogueOff ;
1703: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1707: LD_EXP 11
1711: PPUSH
1712: LD_INT 500
1714: PPUSH
1715: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
1719: LD_EXP 11
1723: PPUSH
1724: LD_VAR 0 2
1728: PUSH
1729: LD_VAR 0 3
1733: ARRAY
1734: PPUSH
1735: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
1739: LD_VAR 0 2
1743: PUSH
1744: LD_VAR 0 3
1748: ARRAY
1749: PPUSH
1750: LD_EXP 11
1754: PPUSH
1755: CALL_OW 119
// wait ( 0 0$1 ) ;
1759: LD_INT 35
1761: PPUSH
1762: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
1766: LD_EXP 11
1770: PPUSH
1771: LD_STRING D5a-Joan-1
1773: PPUSH
1774: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
1778: LD_VAR 0 2
1782: PUSH
1783: LD_VAR 0 3
1787: ARRAY
1788: PPUSH
1789: LD_STRING D5a-Sol1-2
1791: PPUSH
1792: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
1796: LD_EXP 11
1800: PPUSH
1801: LD_STRING D5a-Joan-2
1803: PPUSH
1804: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
1808: LD_VAR 0 2
1812: PUSH
1813: LD_VAR 0 3
1817: ARRAY
1818: PPUSH
1819: LD_STRING D5a-Sol1-3
1821: PPUSH
1822: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
1826: LD_EXP 11
1830: PPUSH
1831: LD_STRING D5a-Joan-3
1833: PPUSH
1834: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
1838: LD_VAR 0 2
1842: PUSH
1843: LD_VAR 0 3
1847: ARRAY
1848: PPUSH
1849: LD_STRING D5a-Sol1-4
1851: PPUSH
1852: CALL_OW 88
// ComExitVehicle ( JMM ) ;
1856: LD_EXP 1
1860: PPUSH
1861: CALL_OW 121
// ComExitBuilding ( JMM ) ;
1865: LD_EXP 1
1869: PPUSH
1870: CALL_OW 122
// wait ( 0 0$1 ) ;
1874: LD_INT 35
1876: PPUSH
1877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1881: LD_INT 35
1883: PPUSH
1884: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
1888: LD_EXP 11
1892: PUSH
1893: LD_VAR 0 2
1897: PUSH
1898: LD_VAR 0 3
1902: ARRAY
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PPUSH
1908: LD_EXP 1
1912: PPUSH
1913: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
1917: LD_EXP 11
1921: PPUSH
1922: LD_EXP 1
1926: PPUSH
1927: CALL_OW 296
1931: PUSH
1932: LD_INT 5
1934: LESS
1935: IFFALSE 1881
// ComTurnUnit ( Joan , JMM ) ;
1937: LD_EXP 11
1941: PPUSH
1942: LD_EXP 1
1946: PPUSH
1947: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1951: LD_EXP 1
1955: PPUSH
1956: LD_EXP 11
1960: PPUSH
1961: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
1965: LD_EXP 11
1969: PPUSH
1970: LD_STRING D5a-Joan-4
1972: PPUSH
1973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
1977: LD_EXP 1
1981: PPUSH
1982: LD_STRING D5a-JMM-4
1984: PPUSH
1985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
1989: LD_EXP 11
1993: PPUSH
1994: LD_STRING D5a-Joan-5
1996: PPUSH
1997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2001: LD_EXP 1
2005: PPUSH
2006: LD_STRING D5a-JMM-5
2008: PPUSH
2009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2013: LD_EXP 11
2017: PPUSH
2018: LD_STRING D5a-Joan-6
2020: PPUSH
2021: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2025: LD_EXP 1
2029: PPUSH
2030: LD_STRING D6-JMM-1
2032: PPUSH
2033: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
2037: LD_EXP 11
2041: PPUSH
2042: LD_STRING D6-Joan-1
2044: PPUSH
2045: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
2049: LD_EXP 1
2053: PPUSH
2054: LD_STRING D6-JMM-2
2056: PPUSH
2057: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
2061: LD_EXP 11
2065: PPUSH
2066: LD_STRING D6-Joan-2
2068: PPUSH
2069: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
2073: LD_EXP 1
2077: PPUSH
2078: LD_STRING D6-JMM-3
2080: PPUSH
2081: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
2085: LD_EXP 11
2089: PPUSH
2090: LD_STRING D6-Joan-3
2092: PPUSH
2093: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
2097: LD_EXP 1
2101: PPUSH
2102: LD_STRING D6-JMM-4
2104: PPUSH
2105: CALL_OW 88
// DialogueOff ;
2109: CALL_OW 7
// InGameOff ;
2113: CALL_OW 9
// SetSide ( Joan , 1 ) ;
2117: LD_EXP 11
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
2129: LD_STRING MJ
2131: PPUSH
2132: CALL_OW 337
// JoanStatus = 1 ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PrepareRandoms ( number ) ; var un ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
// uc_side = 1 ;
2153: LD_ADDR_OWVAR 20
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// uc_nation = 1 ;
2161: LD_ADDR_OWVAR 21
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// if number = 1 then
2169: LD_VAR 0 1
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2315
// begin hc_class := 1 ;
2179: LD_ADDR_OWVAR 28
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// hc_sex := sex_male ;
2187: LD_ADDR_OWVAR 27
2191: PUSH
2192: LD_INT 1
2194: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2195: LD_ADDR_OWVAR 33
2199: PUSH
2200: LD_STRING AmGalRemake
2202: ST_TO_ADDR
// hc_face_number := 7 ;
2203: LD_ADDR_OWVAR 34
2207: PUSH
2208: LD_INT 7
2210: ST_TO_ADDR
// hc_name := Bobby Jorda ;
2211: LD_ADDR_OWVAR 26
2215: PUSH
2216: LD_STRING Bobby Jorda
2218: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2219: LD_ADDR_OWVAR 31
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 1
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: ST_TO_ADDR
// un = CreateHuman ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: CALL_OW 44
2251: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2252: LD_VAR 0 3
2256: PPUSH
2257: LD_INT 12
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: CALL_OW 87
// wait ( 0 0$1 ) ;
2276: LD_INT 35
2278: PPUSH
2279: CALL_OW 67
// DialogueOn ;
2283: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_STRING D11b-Sol3-1
2294: PPUSH
2295: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
2299: LD_EXP 1
2303: PPUSH
2304: LD_STRING D11b-JMM-1
2306: PPUSH
2307: CALL_OW 88
// DialogueOff ;
2311: CALL_OW 7
// end ; if number = 2 then
2315: LD_VAR 0 1
2319: PUSH
2320: LD_INT 2
2322: EQUAL
2323: IFFALSE 2461
// begin hc_class := 3 ;
2325: LD_ADDR_OWVAR 28
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// hc_sex := sex_male ;
2333: LD_ADDR_OWVAR 27
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2341: LD_ADDR_OWVAR 33
2345: PUSH
2346: LD_STRING SecondCharsGal
2348: ST_TO_ADDR
// hc_face_number := 55 ;
2349: LD_ADDR_OWVAR 34
2353: PUSH
2354: LD_INT 55
2356: ST_TO_ADDR
// hc_name := George McCarthy ;
2357: LD_ADDR_OWVAR 26
2361: PUSH
2362: LD_STRING George McCarthy
2364: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
2365: LD_ADDR_OWVAR 31
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: LD_INT 2
2375: PUSH
2376: LD_INT 3
2378: PUSH
2379: LD_INT 1
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// un = CreateHuman ;
2388: LD_ADDR_VAR 0 3
2392: PUSH
2393: CALL_OW 44
2397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2398: LD_VAR 0 3
2402: PPUSH
2403: LD_INT 12
2405: PPUSH
2406: LD_INT 1
2408: PPUSH
2409: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: CALL_OW 87
// wait ( 0 0$1 ) ;
2422: LD_INT 35
2424: PPUSH
2425: CALL_OW 67
// DialogueOn ;
2429: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
2433: LD_VAR 0 3
2437: PPUSH
2438: LD_STRING D11d-Sol4-1
2440: PPUSH
2441: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
2445: LD_EXP 1
2449: PPUSH
2450: LD_STRING D11d-JMM-1
2452: PPUSH
2453: CALL_OW 88
// DialogueOff ;
2457: CALL_OW 7
// end ; if number = 3 then
2461: LD_VAR 0 1
2465: PUSH
2466: LD_INT 3
2468: EQUAL
2469: IFFALSE 2595
// begin hc_class := 3 ;
2471: LD_ADDR_OWVAR 28
2475: PUSH
2476: LD_INT 3
2478: ST_TO_ADDR
// hc_sex := sex_female ;
2479: LD_ADDR_OWVAR 27
2483: PUSH
2484: LD_INT 2
2486: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2487: LD_ADDR_OWVAR 33
2491: PUSH
2492: LD_STRING SecondCharsGal
2494: ST_TO_ADDR
// hc_face_number := 45 ;
2495: LD_ADDR_OWVAR 34
2499: PUSH
2500: LD_INT 45
2502: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2503: LD_ADDR_OWVAR 26
2507: PUSH
2508: LD_STRING Sylvia Creak
2510: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2511: LD_ADDR_OWVAR 31
2515: PUSH
2516: LD_INT 1
2518: PUSH
2519: LD_INT 3
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: ST_TO_ADDR
// un = CreateHuman ;
2534: LD_ADDR_VAR 0 3
2538: PUSH
2539: CALL_OW 44
2543: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2544: LD_VAR 0 3
2548: PPUSH
2549: LD_INT 12
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2559: LD_VAR 0 3
2563: PPUSH
2564: CALL_OW 87
// wait ( 0 0$1 ) ;
2568: LD_INT 35
2570: PPUSH
2571: CALL_OW 67
// DialogueOn ;
2575: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2579: LD_VAR 0 3
2583: PPUSH
2584: LD_STRING D11e-FSol4-1
2586: PPUSH
2587: CALL_OW 88
// DialogueOff ;
2591: CALL_OW 7
// end ; if number = 4 then
2595: LD_VAR 0 1
2599: PUSH
2600: LD_INT 4
2602: EQUAL
2603: IFFALSE 2729
// begin hc_class := 3 ;
2605: LD_ADDR_OWVAR 28
2609: PUSH
2610: LD_INT 3
2612: ST_TO_ADDR
// hc_sex := sex_female ;
2613: LD_ADDR_OWVAR 27
2617: PUSH
2618: LD_INT 2
2620: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2621: LD_ADDR_OWVAR 33
2625: PUSH
2626: LD_STRING SecondCharsGal
2628: ST_TO_ADDR
// hc_face_number := 46 ;
2629: LD_ADDR_OWVAR 34
2633: PUSH
2634: LD_INT 46
2636: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2637: LD_ADDR_OWVAR 26
2641: PUSH
2642: LD_STRING Sylvia Creak
2644: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2645: LD_ADDR_OWVAR 31
2649: PUSH
2650: LD_INT 1
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 1
2658: PUSH
2659: LD_INT 1
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: ST_TO_ADDR
// un = CreateHuman ;
2668: LD_ADDR_VAR 0 3
2672: PUSH
2673: CALL_OW 44
2677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2678: LD_VAR 0 3
2682: PPUSH
2683: LD_INT 12
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2693: LD_VAR 0 3
2697: PPUSH
2698: CALL_OW 87
// wait ( 0 0$1 ) ;
2702: LD_INT 35
2704: PPUSH
2705: CALL_OW 67
// DialogueOn ;
2709: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2713: LD_VAR 0 3
2717: PPUSH
2718: LD_STRING D11e-FSol4-1
2720: PPUSH
2721: CALL_OW 88
// DialogueOff ;
2725: CALL_OW 7
// end ; if number = 5 then
2729: LD_VAR 0 1
2733: PUSH
2734: LD_INT 5
2736: EQUAL
2737: IFFALSE 2875
// begin hc_class := 1 ;
2739: LD_ADDR_OWVAR 28
2743: PUSH
2744: LD_INT 1
2746: ST_TO_ADDR
// hc_sex := sex_female ;
2747: LD_ADDR_OWVAR 27
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2755: LD_ADDR_OWVAR 33
2759: PUSH
2760: LD_STRING SecondCharsGal
2762: ST_TO_ADDR
// hc_face_number := 37 ;
2763: LD_ADDR_OWVAR 34
2767: PUSH
2768: LD_INT 37
2770: ST_TO_ADDR
// hc_name := Margherite Simpson ;
2771: LD_ADDR_OWVAR 26
2775: PUSH
2776: LD_STRING Margherite Simpson
2778: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
2779: LD_ADDR_OWVAR 31
2783: PUSH
2784: LD_INT 1
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// un = CreateHuman ;
2802: LD_ADDR_VAR 0 3
2806: PUSH
2807: CALL_OW 44
2811: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 12
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2827: LD_VAR 0 3
2831: PPUSH
2832: CALL_OW 87
// wait ( 0 0$1 ) ;
2836: LD_INT 35
2838: PPUSH
2839: CALL_OW 67
// DialogueOn ;
2843: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
2847: LD_VAR 0 3
2851: PPUSH
2852: LD_STRING D11c-FSol3-1
2854: PPUSH
2855: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
2859: LD_EXP 1
2863: PPUSH
2864: LD_STRING D11c-JMM-1
2866: PPUSH
2867: CALL_OW 88
// DialogueOff ;
2871: CALL_OW 7
// end ; if number = 6 then
2875: LD_VAR 0 1
2879: PUSH
2880: LD_INT 6
2882: EQUAL
2883: IFFALSE 3009
// begin hc_class := 1 ;
2885: LD_ADDR_OWVAR 28
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// hc_sex := sex_male ;
2893: LD_ADDR_OWVAR 27
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2901: LD_ADDR_OWVAR 33
2905: PUSH
2906: LD_STRING AmGalRemake
2908: ST_TO_ADDR
// hc_face_number := 1 ;
2909: LD_ADDR_OWVAR 34
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// hc_name := Charles Brown ;
2917: LD_ADDR_OWVAR 26
2921: PUSH
2922: LD_STRING Charles Brown
2924: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
2925: LD_ADDR_OWVAR 31
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: LD_INT 0
2938: PUSH
2939: LD_INT 1
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: ST_TO_ADDR
// un = CreateHuman ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: CALL_OW 44
2957: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2958: LD_VAR 0 3
2962: PPUSH
2963: LD_INT 12
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2973: LD_VAR 0 3
2977: PPUSH
2978: CALL_OW 87
// wait ( 0 0$1 ) ;
2982: LD_INT 35
2984: PPUSH
2985: CALL_OW 67
// DialogueOn ;
2989: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
2993: LD_VAR 0 3
2997: PPUSH
2998: LD_STRING D11f-Sol5-1
3000: PPUSH
3001: CALL_OW 88
// DialogueOff ;
3005: CALL_OW 7
// end ; if number = 7 then
3009: LD_VAR 0 1
3013: PUSH
3014: LD_INT 7
3016: EQUAL
3017: IFFALSE 3143
// begin hc_class := 1 ;
3019: LD_ADDR_OWVAR 28
3023: PUSH
3024: LD_INT 1
3026: ST_TO_ADDR
// hc_sex := sex_female ;
3027: LD_ADDR_OWVAR 27
3031: PUSH
3032: LD_INT 2
3034: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3035: LD_ADDR_OWVAR 33
3039: PUSH
3040: LD_STRING AmGalRemake
3042: ST_TO_ADDR
// hc_face_number := 2 ;
3043: LD_ADDR_OWVAR 34
3047: PUSH
3048: LD_INT 2
3050: ST_TO_ADDR
// hc_name := Johanna Holland ;
3051: LD_ADDR_OWVAR 26
3055: PUSH
3056: LD_STRING Johanna Holland
3058: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3059: LD_ADDR_OWVAR 31
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 0
3069: PUSH
3070: LD_INT 0
3072: PUSH
3073: LD_INT 0
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: ST_TO_ADDR
// un = CreateHuman ;
3082: LD_ADDR_VAR 0 3
3086: PUSH
3087: CALL_OW 44
3091: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3092: LD_VAR 0 3
3096: PPUSH
3097: LD_INT 12
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3107: LD_VAR 0 3
3111: PPUSH
3112: CALL_OW 87
// wait ( 0 0$1 ) ;
3116: LD_INT 35
3118: PPUSH
3119: CALL_OW 67
// DialogueOn ;
3123: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
3127: LD_VAR 0 3
3131: PPUSH
3132: LD_STRING D11a-FSol2-1
3134: PPUSH
3135: CALL_OW 88
// DialogueOff ;
3139: CALL_OW 7
// end ; end ; end_of_file
3143: LD_VAR 0 2
3147: RET
// export function PrepareRussian ; var i ; begin
3148: LD_INT 0
3150: PPUSH
3151: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: LD_EXP 29
3165: PPUSH
3166: LD_EXP 30
3170: PPUSH
3171: CALL_OW 12
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_INT 4
3181: PPUSH
3182: CALL 3738 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 8
3194: PPUSH
3195: LD_EXP 29
3199: PPUSH
3200: LD_EXP 30
3204: PPUSH
3205: CALL_OW 12
3209: PPUSH
3210: LD_INT 1
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: CALL 3738 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 67
3228: PPUSH
3229: LD_EXP 29
3233: PPUSH
3234: LD_EXP 30
3238: PPUSH
3239: CALL_OW 12
3243: PPUSH
3244: LD_INT 1
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3254: LD_INT 3
3256: PPUSH
3257: LD_INT 3
3259: PPUSH
3260: LD_INT 21
3262: PPUSH
3263: LD_EXP 29
3267: PPUSH
3268: LD_EXP 30
3272: PPUSH
3273: CALL_OW 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: LD_INT 6
3283: PPUSH
3284: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3288: LD_INT 3
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_INT 17
3296: PPUSH
3297: LD_EXP 29
3301: PPUSH
3302: LD_EXP 30
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 3
3314: PPUSH
3315: LD_INT 6
3317: PPUSH
3318: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 32
3330: PPUSH
3331: LD_EXP 29
3335: PPUSH
3336: LD_EXP 30
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 2
3351: PPUSH
3352: CALL 3738 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
3356: LD_ADDR_VAR 0 2
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 3
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 30
3383: PUSH
3384: LD_INT 32
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 69
3400: PUSH
3401: FOR_IN
3402: IFFALSE 3442
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
3404: LD_INT 3
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: LD_EXP 29
3419: PPUSH
3420: LD_EXP 30
3424: PPUSH
3425: CALL_OW 12
3429: PPUSH
3430: LD_INT 1
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL 3738 0 6
3440: GO 3401
3442: POP
3443: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 22
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 21
3461: PUSH
3462: LD_INT 3
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 30
3471: PUSH
3472: LD_INT 31
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3518
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
3492: LD_EXP 29
3496: PPUSH
3497: LD_EXP 30
3501: PPUSH
3502: CALL_OW 12
3506: PPUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL 3848 0 2
3516: GO 3489
3518: POP
3519: POP
// end ; end_of_file
3520: LD_VAR 0 1
3524: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3525: LD_INT 0
3527: PPUSH
3528: PPUSH
// if exist_mode then
3529: LD_VAR 0 2
3533: IFFALSE 3552
// begin unit := CreateCharacter ( ident ) ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 34
3549: ST_TO_ADDR
// end else
3550: GO 3567
// begin unit := NewCharacter ( ident ) ;
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL_OW 25
3566: ST_TO_ADDR
// end ; result := unit ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 4
3576: ST_TO_ADDR
// end ;
3577: LD_VAR 0 3
3581: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3582: LD_INT 0
3584: PPUSH
3585: PPUSH
3586: PPUSH
// rnd = rand ( 1 , characters ) ;
3587: LD_ADDR_VAR 0 6
3591: PUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 12
3604: ST_TO_ADDR
// for i = 1 to characters do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 1
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3731
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3623: LD_VAR 0 5
3627: PUSH
3628: LD_VAR 0 6
3632: EQUAL
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: LD_VAR 0 5
3643: ARRAY
3644: PPUSH
3645: CALL_OW 258
3649: PUSH
3650: LD_INT 1
3652: EQUAL
3653: AND
3654: IFFALSE 3676
// Say ( characters [ i ] , dialogMID ) ;
3656: LD_VAR 0 1
3660: PUSH
3661: LD_VAR 0 5
3665: ARRAY
3666: PPUSH
3667: LD_VAR 0 2
3671: PPUSH
3672: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3676: LD_VAR 0 5
3680: PUSH
3681: LD_VAR 0 6
3685: EQUAL
3686: PUSH
3687: LD_VAR 0 1
3691: PUSH
3692: LD_VAR 0 5
3696: ARRAY
3697: PPUSH
3698: CALL_OW 258
3702: PUSH
3703: LD_INT 2
3705: EQUAL
3706: AND
3707: IFFALSE 3729
// Say ( characters [ i ] , dialogFID ) ;
3709: LD_VAR 0 1
3713: PUSH
3714: LD_VAR 0 5
3718: ARRAY
3719: PPUSH
3720: LD_VAR 0 3
3724: PPUSH
3725: CALL_OW 88
// end ;
3729: GO 3620
3731: POP
3732: POP
// end ;
3733: LD_VAR 0 4
3737: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
// for i = 1 to count do
3744: LD_ADDR_VAR 0 8
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 6
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3841
// begin uc_side = side ;
3762: LD_ADDR_OWVAR 20
3766: PUSH
3767: LD_VAR 0 1
3771: ST_TO_ADDR
// uc_nation = nation ;
3772: LD_ADDR_OWVAR 21
3776: PUSH
3777: LD_VAR 0 2
3781: ST_TO_ADDR
// hc_gallery =  ;
3782: LD_ADDR_OWVAR 33
3786: PUSH
3787: LD_STRING 
3789: ST_TO_ADDR
// hc_name =  ;
3790: LD_ADDR_OWVAR 26
3794: PUSH
3795: LD_STRING 
3797: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3798: LD_INT 0
3800: PPUSH
3801: LD_VAR 0 5
3805: PPUSH
3806: LD_VAR 0 4
3810: PPUSH
3811: CALL_OW 380
// un = CreateHuman ;
3815: LD_ADDR_VAR 0 10
3819: PUSH
3820: CALL_OW 44
3824: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3825: LD_VAR 0 10
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: CALL_OW 52
// end ;
3839: GO 3759
3841: POP
3842: POP
// end ;
3843: LD_VAR 0 7
3847: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3848: LD_INT 0
3850: PPUSH
3851: PPUSH
3852: PPUSH
// uc_side := GetSide ( b ) ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_VAR 0 2
3862: PPUSH
3863: CALL_OW 255
3867: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3868: LD_ADDR_OWVAR 21
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 248
3882: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3883: LD_INT 0
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
3898: LD_ADDR_VAR 0 5
3902: PUSH
3903: LD_VAR 0 2
3907: PPUSH
3908: CALL_OW 254
3912: PUSH
3913: LD_INT 3
3915: MINUS
3916: ST_TO_ADDR
// if dir < 0 then
3917: LD_VAR 0 5
3921: PUSH
3922: LD_INT 0
3924: LESS
3925: IFFALSE 3941
// dir := 6 + dir ;
3927: LD_ADDR_VAR 0 5
3931: PUSH
3932: LD_INT 6
3934: PUSH
3935: LD_VAR 0 5
3939: PLUS
3940: ST_TO_ADDR
// un := CreateHuman ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: CALL_OW 44
3950: ST_TO_ADDR
// SetDir ( un , dir ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: LD_VAR 0 5
3960: PPUSH
3961: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: CALL_OW 52
// end ;
3979: LD_VAR 0 3
3983: RET
// export function PrepareDifficulty ; begin
3984: LD_INT 0
3986: PPUSH
// if Difficulty = 1 then
3987: LD_OWVAR 67
3991: PUSH
3992: LD_INT 1
3994: EQUAL
3995: IFFALSE 4013
// begin RuSolMinLevel = 2 ;
3997: LD_ADDR_EXP 29
4001: PUSH
4002: LD_INT 2
4004: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4005: LD_ADDR_EXP 30
4009: PUSH
4010: LD_INT 5
4012: ST_TO_ADDR
// end ; if Difficulty = 2 then
4013: LD_OWVAR 67
4017: PUSH
4018: LD_INT 2
4020: EQUAL
4021: IFFALSE 4039
// begin RuSolMinLevel = 3 ;
4023: LD_ADDR_EXP 29
4027: PUSH
4028: LD_INT 3
4030: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4031: LD_ADDR_EXP 30
4035: PUSH
4036: LD_INT 6
4038: ST_TO_ADDR
// end ; if Difficulty = 3 then
4039: LD_OWVAR 67
4043: PUSH
4044: LD_INT 3
4046: EQUAL
4047: IFFALSE 4065
// begin RuSolMinLevel = 5 ;
4049: LD_ADDR_EXP 29
4053: PUSH
4054: LD_INT 5
4056: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4057: LD_ADDR_EXP 30
4061: PUSH
4062: LD_INT 6
4064: ST_TO_ADDR
// end ; end ;
4065: LD_VAR 0 1
4069: RET
// export function ShowQuery1 ; begin
4070: LD_INT 0
4072: PPUSH
// case query ( QKill ) of 1 :
4073: LD_STRING QKill
4075: PPUSH
4076: CALL_OW 97
4080: PUSH
4081: LD_INT 1
4083: DOUBLE
4084: EQUAL
4085: IFTRUE 4089
4087: GO 4100
4089: POP
// begin result = 1 ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_INT 1
4097: ST_TO_ADDR
// end ; 2 :
4098: GO 4139
4100: LD_INT 2
4102: DOUBLE
4103: EQUAL
4104: IFTRUE 4108
4106: GO 4119
4108: POP
// begin result = 2 ;
4109: LD_ADDR_VAR 0 1
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// end ; 3 :
4117: GO 4139
4119: LD_INT 3
4121: DOUBLE
4122: EQUAL
4123: IFTRUE 4127
4125: GO 4138
4127: POP
// begin result = 3 ;
4128: LD_ADDR_VAR 0 1
4132: PUSH
4133: LD_INT 3
4135: ST_TO_ADDR
// end ; end ;
4136: GO 4139
4138: POP
// end ;
4139: LD_VAR 0 1
4143: RET
// export function ShowQuery2 ; begin
4144: LD_INT 0
4146: PPUSH
// case query ( QKill2 ) of 1 :
4147: LD_STRING QKill2
4149: PPUSH
4150: CALL_OW 97
4154: PUSH
4155: LD_INT 1
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4174
4163: POP
// begin result = 1 ;
4164: LD_ADDR_VAR 0 1
4168: PUSH
4169: LD_INT 1
4171: ST_TO_ADDR
// end ; 2 :
4172: GO 4194
4174: LD_INT 2
4176: DOUBLE
4177: EQUAL
4178: IFTRUE 4182
4180: GO 4193
4182: POP
// begin result = 2 ;
4183: LD_ADDR_VAR 0 1
4187: PUSH
4188: LD_INT 2
4190: ST_TO_ADDR
// end ; end ;
4191: GO 4194
4193: POP
// end ;
4194: LD_VAR 0 1
4198: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
4203: PPUSH
4204: PPUSH
// for i = 1 to 72 do
4205: LD_ADDR_VAR 0 5
4209: PUSH
4210: DOUBLE
4211: LD_INT 1
4213: DEC
4214: ST_TO_ADDR
4215: LD_INT 72
4217: PUSH
4218: FOR_TO
4219: IFFALSE 4277
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 1
4230: PPUSH
4231: CALL_OW 321
4235: PUSH
4236: LD_INT 1
4238: EQUAL
4239: PUSH
4240: LD_VAR 0 5
4244: PPUSH
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 482
4254: PUSH
4255: LD_INT 1
4257: EQUAL
4258: AND
4259: IFFALSE 4275
// AddComResearch ( lab , i ) ;
4261: LD_VAR 0 2
4265: PPUSH
4266: LD_VAR 0 5
4270: PPUSH
4271: CALL_OW 184
4275: GO 4218
4277: POP
4278: POP
// end ;
4279: LD_VAR 0 4
4283: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4284: LD_INT 0
4286: PPUSH
4287: PPUSH
4288: PPUSH
4289: PPUSH
4290: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
4291: LD_ADDR_VAR 0 6
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_VAR 0 1
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 2
4310: PUSH
4311: LD_INT 25
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 25
4323: PUSH
4324: LD_INT 16
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 24
4338: PUSH
4339: LD_INT 1000
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PPUSH
4351: CALL_OW 69
4355: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4356: LD_ADDR_VAR 0 4
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_VAR 0 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 21
4375: PUSH
4376: LD_INT 3
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 3
4385: PUSH
4386: LD_INT 24
4388: PUSH
4389: LD_INT 1000
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: PPUSH
4408: CALL_OW 69
4412: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
4413: LD_VAR 0 4
4417: PUSH
4418: LD_INT 0
4420: GREATER
4421: PUSH
4422: LD_VAR 0 6
4426: PUSH
4427: LD_INT 0
4429: GREATER
4430: AND
4431: IFFALSE 4497
// begin for i in engineerOk_list do
4433: LD_ADDR_VAR 0 5
4437: PUSH
4438: LD_VAR 0 6
4442: PUSH
4443: FOR_IN
4444: IFFALSE 4495
// begin for j in buildings_list do
4446: LD_ADDR_VAR 0 7
4450: PUSH
4451: LD_VAR 0 4
4455: PUSH
4456: FOR_IN
4457: IFFALSE 4491
// begin AddComExitBuilding ( i ) ;
4459: LD_VAR 0 5
4463: PPUSH
4464: CALL_OW 182
// wait ( 0 0$1 ) ;
4468: LD_INT 35
4470: PPUSH
4471: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4475: LD_VAR 0 5
4479: PPUSH
4480: LD_VAR 0 7
4484: PPUSH
4485: CALL_OW 190
// end ;
4489: GO 4456
4491: POP
4492: POP
// end ;
4493: GO 4443
4495: POP
4496: POP
// end ; if buildings_list = 0 then
4497: LD_VAR 0 4
4501: PUSH
4502: LD_INT 0
4504: EQUAL
4505: IFFALSE 4538
// begin for i in engineerOK_list do
4507: LD_ADDR_VAR 0 5
4511: PUSH
4512: LD_VAR 0 6
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4536
// begin ComEnterUnit ( i , building ) ;
4520: LD_VAR 0 5
4524: PPUSH
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL_OW 120
// end ;
4534: GO 4517
4536: POP
4537: POP
// end ; end ;
4538: LD_VAR 0 3
4542: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4550: LD_ADDR_VAR 0 6
4554: PUSH
4555: LD_INT 22
4557: PUSH
4558: LD_VAR 0 1
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 25
4569: PUSH
4570: LD_INT 4
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4586: LD_ADDR_VAR 0 9
4590: PUSH
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_INT 22
4598: PUSH
4599: LD_VAR 0 1
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 21
4610: PUSH
4611: LD_INT 1
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 3
4620: PUSH
4621: LD_INT 24
4623: PUSH
4624: LD_INT 750
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: LIST
4639: PPUSH
4640: CALL_OW 70
4644: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
4645: LD_VAR 0 9
4649: PUSH
4650: LD_INT 0
4652: GREATER
4653: PUSH
4654: LD_VAR 0 6
4658: PUSH
4659: LD_INT 0
4661: GREATER
4662: AND
4663: IFFALSE 4790
// begin for i = 1 to damageUnits do
4665: LD_ADDR_VAR 0 7
4669: PUSH
4670: DOUBLE
4671: LD_INT 1
4673: DEC
4674: ST_TO_ADDR
4675: LD_VAR 0 9
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4705
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4683: LD_VAR 0 9
4687: PUSH
4688: LD_VAR 0 7
4692: ARRAY
4693: PPUSH
4694: LD_VAR 0 2
4698: PPUSH
4699: CALL_OW 113
4703: GO 4680
4705: POP
4706: POP
// for i in sci_list do
4707: LD_ADDR_VAR 0 7
4711: PUSH
4712: LD_VAR 0 6
4716: PUSH
4717: FOR_IN
4718: IFFALSE 4786
// begin ComExitBuilding ( i ) ;
4720: LD_VAR 0 7
4724: PPUSH
4725: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4729: LD_ADDR_VAR 0 8
4733: PUSH
4734: LD_VAR 0 2
4738: PPUSH
4739: LD_INT 22
4741: PUSH
4742: LD_VAR 0 1
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PPUSH
4751: CALL_OW 70
4755: PUSH
4756: FOR_IN
4757: IFFALSE 4782
// begin AddComHeal ( i , j ) ;
4759: LD_VAR 0 7
4763: PPUSH
4764: LD_VAR 0 8
4768: PPUSH
4769: CALL_OW 188
// wait ( 1 1$0 ) ;
4773: LD_INT 2100
4775: PPUSH
4776: CALL_OW 67
// end ;
4780: GO 4756
4782: POP
4783: POP
// end ;
4784: GO 4717
4786: POP
4787: POP
// end else
4788: GO 4804
// begin AddComEnterUnit ( sci_list , build ) ;
4790: LD_VAR 0 6
4794: PPUSH
4795: LD_VAR 0 4
4799: PPUSH
4800: CALL_OW 180
// end ; end ;
4804: LD_VAR 0 5
4808: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
4817: LD_INT 22
4819: PUSH
4820: LD_VAR 0 1
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 2
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PPUSH
4843: CALL_OW 69
4847: PUSH
4848: LD_VAR 0 3
4852: LESSEQUAL
4853: IFFALSE 4920
// for i = 1 to vehCount do
4855: LD_ADDR_VAR 0 10
4859: PUSH
4860: DOUBLE
4861: LD_INT 1
4863: DEC
4864: ST_TO_ADDR
4865: LD_VAR 0 3
4869: PUSH
4870: FOR_TO
4871: IFFALSE 4918
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
4873: LD_VAR 0 2
4877: PPUSH
4878: LD_VAR 0 8
4882: PPUSH
4883: LD_VAR 0 6
4887: PPUSH
4888: LD_VAR 0 7
4892: PPUSH
4893: LD_VAR 0 5
4897: PUSH
4898: LD_INT 1
4900: PPUSH
4901: LD_VAR 0 5
4905: PPUSH
4906: CALL_OW 12
4910: ARRAY
4911: PPUSH
4912: CALL_OW 185
4916: GO 4870
4918: POP
4919: POP
// repeat wait ( 0 0$1 ) ;
4920: LD_INT 35
4922: PPUSH
4923: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
4927: LD_INT 22
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 21
4941: PUSH
4942: LD_INT 2
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 24
4951: PUSH
4952: LD_INT 250
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: PUSH
4969: LD_VAR 0 3
4973: GREATEREQUAL
4974: IFFALSE 4920
// repeat begin wait ( 0 0$1 ) ;
4976: LD_INT 35
4978: PPUSH
4979: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
4983: LD_ADDR_VAR 0 10
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_VAR 0 1
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 21
5002: PUSH
5003: LD_INT 2
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 24
5012: PUSH
5013: LD_INT 651
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: PPUSH
5025: CALL_OW 69
5029: PUSH
5030: FOR_IN
5031: IFFALSE 5207
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5033: LD_ADDR_VAR 0 13
5037: PUSH
5038: LD_INT 22
5040: PUSH
5041: LD_VAR 0 4
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 69
5054: PPUSH
5055: LD_VAR 0 10
5059: PPUSH
5060: CALL_OW 74
5064: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5065: LD_ADDR_VAR 0 14
5069: PUSH
5070: LD_INT 22
5072: PUSH
5073: LD_VAR 0 4
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: LD_INT 2
5084: PUSH
5085: LD_INT 59
5087: PUSH
5088: EMPTY
5089: LIST
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 2
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: PPUSH
5129: LD_VAR 0 10
5133: PPUSH
5134: CALL_OW 74
5138: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5139: LD_VAR 0 10
5143: PPUSH
5144: LD_VAR 0 13
5148: PPUSH
5149: CALL_OW 296
5153: PUSH
5154: LD_INT 8
5156: PLUS
5157: PUSH
5158: LD_VAR 0 10
5162: PPUSH
5163: LD_VAR 0 14
5167: PPUSH
5168: CALL_OW 296
5172: LESS
5173: IFFALSE 5191
// begin ComAttackUnit ( i , target1 ) ;
5175: LD_VAR 0 10
5179: PPUSH
5180: LD_VAR 0 13
5184: PPUSH
5185: CALL_OW 115
// end else
5189: GO 5205
// begin ComAttackUnit ( i , target2 ) ;
5191: LD_VAR 0 10
5195: PPUSH
5196: LD_VAR 0 14
5200: PPUSH
5201: CALL_OW 115
// end ; end ;
5205: GO 5030
5207: POP
5208: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
5209: LD_INT 22
5211: PUSH
5212: LD_INT 3
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 21
5221: PUSH
5222: LD_INT 2
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: LD_INT 3
5231: PUSH
5232: LD_INT 34
5234: PUSH
5235: LD_INT 51
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: PPUSH
5251: CALL_OW 69
5255: PUSH
5256: LD_INT 0
5258: EQUAL
5259: IFFALSE 4976
// end ;
5261: LD_VAR 0 9
5265: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
5266: LD_INT 0
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
// enable ;
5272: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
5273: LD_ADDR_VAR 0 7
5277: PUSH
5278: LD_VAR 0 3
5282: PPUSH
5283: CALL_OW 435
5287: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
5288: LD_ADDR_VAR 0 6
5292: PUSH
5293: LD_INT 22
5295: PUSH
5296: LD_VAR 0 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 34
5307: PUSH
5308: LD_VAR 0 2
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 69
5325: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
5326: LD_VAR 0 6
5330: PUSH
5331: LD_INT 0
5333: GREATER
5334: PUSH
5335: LD_VAR 0 3
5339: PPUSH
5340: CALL_OW 435
5344: AND
5345: PUSH
5346: LD_VAR 0 7
5350: PUSH
5351: LD_INT 0
5353: GREATER
5354: AND
5355: IFFALSE 5404
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
5357: LD_VAR 0 6
5361: PUSH
5362: LD_INT 1
5364: ARRAY
5365: PPUSH
5366: LD_VAR 0 7
5370: PUSH
5371: LD_INT 1
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 7
5379: PUSH
5380: LD_INT 2
5382: ARRAY
5383: PPUSH
5384: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
5388: LD_VAR 0 6
5392: PUSH
5393: LD_INT 1
5395: ARRAY
5396: PPUSH
5397: LD_INT 100
5399: PPUSH
5400: CALL_OW 240
// end ; clear_crates := false ;
5404: LD_ADDR_VAR 0 5
5408: PUSH
5409: LD_INT 0
5411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5412: LD_INT 35
5414: PPUSH
5415: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
5419: LD_VAR 0 6
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: CALL_OW 315
5432: NOT
5433: PUSH
5434: LD_VAR 0 5
5438: OR
5439: IFFALSE 5412
// end ;
5441: LD_VAR 0 4
5445: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
5446: LD_INT 0
5448: PPUSH
5449: PPUSH
5450: PPUSH
5451: PPUSH
5452: PPUSH
5453: PPUSH
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
5458: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5459: LD_ADDR_VAR 0 9
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_VAR 0 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 660
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 3
5498: PUSH
5499: LD_INT 58
5501: PUSH
5502: EMPTY
5503: LIST
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: LD_INT 34
5514: PUSH
5515: LD_INT 53
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 69
5537: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
5538: LD_ADDR_VAR 0 10
5542: PUSH
5543: LD_INT 22
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 21
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 3
5567: PUSH
5568: LD_INT 24
5570: PUSH
5571: LD_INT 660
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: PPUSH
5587: CALL_OW 69
5591: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5592: LD_ADDR_VAR 0 11
5596: PUSH
5597: LD_VAR 0 2
5601: PPUSH
5602: LD_INT 22
5604: PUSH
5605: LD_VAR 0 1
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: LD_INT 21
5616: PUSH
5617: LD_INT 2
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 3
5626: PUSH
5627: LD_INT 24
5629: PUSH
5630: LD_INT 1000
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: LIST
5645: PPUSH
5646: CALL_OW 70
5650: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5651: LD_ADDR_VAR 0 12
5655: PUSH
5656: LD_VAR 0 2
5660: PPUSH
5661: LD_INT 22
5663: PUSH
5664: LD_VAR 0 1
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: LD_INT 21
5675: PUSH
5676: LD_INT 2
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 24
5685: PUSH
5686: LD_INT 1000
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: LD_INT 58
5695: PUSH
5696: EMPTY
5697: LIST
5698: PUSH
5699: LD_INT 3
5701: PUSH
5702: LD_INT 34
5704: PUSH
5705: LD_INT 53
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: PPUSH
5723: CALL_OW 70
5727: ST_TO_ADDR
// mechanicInside_list = [ ] ;
5728: LD_ADDR_VAR 0 13
5732: PUSH
5733: EMPTY
5734: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
5735: LD_ADDR_VAR 0 14
5739: PUSH
5740: LD_VAR 0 2
5744: PPUSH
5745: LD_INT 22
5747: PUSH
5748: LD_VAR 0 1
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: LD_INT 25
5759: PUSH
5760: LD_INT 3
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PPUSH
5771: CALL_OW 70
5775: ST_TO_ADDR
// if damageVehicle_list > 0 then
5776: LD_VAR 0 10
5780: PUSH
5781: LD_INT 0
5783: GREATER
5784: IFFALSE 5822
// begin for i in damageVehicle_list do
5786: LD_ADDR_VAR 0 7
5790: PUSH
5791: LD_VAR 0 10
5795: PUSH
5796: FOR_IN
5797: IFFALSE 5820
// begin ComMoveXY ( i , repX , repY ) ;
5799: LD_VAR 0 7
5803: PPUSH
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 4
5813: PPUSH
5814: CALL_OW 111
// end ;
5818: GO 5796
5820: POP
5821: POP
// end ; if vehicleNeedRepair_list > 0 then
5822: LD_VAR 0 11
5826: PUSH
5827: LD_INT 0
5829: GREATER
5830: IFFALSE 5917
// begin for i in vehicleNeedRepair_list do
5832: LD_ADDR_VAR 0 7
5836: PUSH
5837: LD_VAR 0 11
5841: PUSH
5842: FOR_IN
5843: IFFALSE 5915
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
5845: LD_ADDR_VAR 0 13
5849: PUSH
5850: LD_VAR 0 13
5854: PUSH
5855: LD_VAR 0 7
5859: PPUSH
5860: CALL_OW 313
5864: ADD
5865: ST_TO_ADDR
// for j in mechanicInside_list do
5866: LD_ADDR_VAR 0 8
5870: PUSH
5871: LD_VAR 0 13
5875: PUSH
5876: FOR_IN
5877: IFFALSE 5911
// begin ComExitVehicle ( i ) ;
5879: LD_VAR 0 7
5883: PPUSH
5884: CALL_OW 121
// wait ( 0 0$1 ) ;
5888: LD_INT 35
5890: PPUSH
5891: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
5895: LD_VAR 0 7
5899: PPUSH
5900: LD_VAR 0 8
5904: PPUSH
5905: CALL_OW 129
// end ;
5909: GO 5876
5911: POP
5912: POP
// end ;
5913: GO 5842
5915: POP
5916: POP
// end ; if vehicleDontNeedRepair_list > 0 then
5917: LD_VAR 0 12
5921: PUSH
5922: LD_INT 0
5924: GREATER
5925: IFFALSE 5965
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
5927: LD_VAR 0 14
5931: PUSH
5932: LD_INT 1
5934: ARRAY
5935: PPUSH
5936: LD_VAR 0 12
5940: PUSH
5941: LD_INT 1
5943: ARRAY
5944: PPUSH
5945: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
5949: LD_VAR 0 12
5953: PUSH
5954: LD_INT 1
5956: ARRAY
5957: PPUSH
5958: LD_INT 100
5960: PPUSH
5961: CALL_OW 240
// end ; if vehicleOK_list > 0 then
5965: LD_VAR 0 9
5969: PUSH
5970: LD_INT 0
5972: GREATER
5973: IFFALSE 6164
// begin for i in vehicleOK_list do
5975: LD_ADDR_VAR 0 7
5979: PUSH
5980: LD_VAR 0 9
5984: PUSH
5985: FOR_IN
5986: IFFALSE 6162
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5988: LD_ADDR_VAR 0 15
5992: PUSH
5993: LD_INT 22
5995: PUSH
5996: LD_VAR 0 5
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: PPUSH
6010: LD_VAR 0 7
6014: PPUSH
6015: CALL_OW 74
6019: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6020: LD_ADDR_VAR 0 16
6024: PUSH
6025: LD_INT 22
6027: PUSH
6028: LD_VAR 0 5
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 2
6039: PUSH
6040: LD_INT 59
6042: PUSH
6043: EMPTY
6044: LIST
6045: PUSH
6046: LD_INT 21
6048: PUSH
6049: LD_INT 1
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 21
6058: PUSH
6059: LD_INT 2
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PUSH
6076: EMPTY
6077: LIST
6078: PPUSH
6079: CALL_OW 69
6083: PPUSH
6084: LD_VAR 0 7
6088: PPUSH
6089: CALL_OW 74
6093: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6094: LD_VAR 0 7
6098: PPUSH
6099: LD_VAR 0 15
6103: PPUSH
6104: CALL_OW 296
6108: PUSH
6109: LD_INT 8
6111: PLUS
6112: PUSH
6113: LD_VAR 0 7
6117: PPUSH
6118: LD_VAR 0 16
6122: PPUSH
6123: CALL_OW 296
6127: LESS
6128: IFFALSE 6146
// begin ComAttackUnit ( i , target1 ) ;
6130: LD_VAR 0 7
6134: PPUSH
6135: LD_VAR 0 15
6139: PPUSH
6140: CALL_OW 115
// end else
6144: GO 6160
// begin ComAttackUnit ( i , target2 ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 16
6155: PPUSH
6156: CALL_OW 115
// end ; end ;
6160: GO 5985
6162: POP
6163: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
6164: LD_ADDR_VAR 0 7
6168: PUSH
6169: LD_VAR 0 2
6173: PPUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 25
6188: PUSH
6189: LD_INT 3
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 70
6204: NOT
6205: PUSH
6206: FOR_IN
6207: IFFALSE 6230
// ComMoveXY ( i , repX , repY ) ;
6209: LD_VAR 0 7
6213: PPUSH
6214: LD_VAR 0 3
6218: PPUSH
6219: LD_VAR 0 4
6223: PPUSH
6224: CALL_OW 111
6228: GO 6206
6230: POP
6231: POP
// end ;
6232: LD_VAR 0 6
6236: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
6241: LD_INT 22
6243: PUSH
6244: LD_VAR 0 1
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: CALL_OW 69
6271: PUSH
6272: LD_INT 0
6274: GREATER
6275: PUSH
6276: LD_INT 22
6278: PUSH
6279: LD_VAR 0 1
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 21
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 24
6303: PUSH
6304: LD_INT 1000
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 69
6324: PUSH
6325: LD_INT 0
6327: EQUAL
6328: AND
6329: PUSH
6330: LD_VAR 0 2
6334: PUSH
6335: LD_INT 0
6337: GREATER
6338: AND
6339: IFFALSE 6438
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: LD_INT 22
6348: PUSH
6349: LD_VAR 0 1
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 25
6360: PUSH
6361: LD_INT 2
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PPUSH
6372: CALL_OW 69
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6436
// begin AddComExitBuilding ( i ) ;
6380: LD_VAR 0 4
6384: PPUSH
6385: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
6389: LD_VAR 0 4
6393: PPUSH
6394: LD_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: ARRAY
6402: PPUSH
6403: LD_VAR 0 2
6407: PUSH
6408: LD_INT 2
6410: ARRAY
6411: PPUSH
6412: LD_VAR 0 2
6416: PUSH
6417: LD_INT 3
6419: ARRAY
6420: PPUSH
6421: LD_VAR 0 2
6425: PUSH
6426: LD_INT 4
6428: ARRAY
6429: PPUSH
6430: CALL_OW 205
// end ;
6434: GO 6377
6436: POP
6437: POP
// end ; end ;
6438: LD_VAR 0 3
6442: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
6451: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
6452: LD_ADDR_VAR 0 7
6456: PUSH
6457: LD_INT 22
6459: PUSH
6460: LD_VAR 0 1
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 56
6481: PUSH
6482: EMPTY
6483: LIST
6484: PUSH
6485: LD_INT 24
6487: PUSH
6488: LD_INT 700
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 69
6505: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6506: LD_ADDR_VAR 0 8
6510: PUSH
6511: LD_INT 22
6513: PUSH
6514: LD_VAR 0 1
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: LD_INT 30
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 58
6535: PUSH
6536: EMPTY
6537: LIST
6538: PUSH
6539: LD_INT 24
6541: PUSH
6542: LD_INT 251
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 69
6559: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6560: LD_ADDR_VAR 0 10
6564: PUSH
6565: LD_INT 22
6567: PUSH
6568: LD_VAR 0 1
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 5
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 25
6592: PUSH
6593: LD_INT 8
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 25
6602: PUSH
6603: LD_INT 9
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 69
6624: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
6625: LD_ADDR_VAR 0 9
6629: PUSH
6630: LD_VAR 0 2
6634: PPUSH
6635: CALL_OW 313
6639: PUSH
6640: LD_VAR 0 10
6644: DIFF
6645: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
6646: LD_VAR 0 8
6650: PUSH
6651: LD_INT 0
6653: EQUAL
6654: PUSH
6655: LD_VAR 0 9
6659: PUSH
6660: LD_INT 0
6662: EQUAL
6663: AND
6664: IFFALSE 6710
// begin for i in soldiers_list do
6666: LD_ADDR_VAR 0 5
6670: PUSH
6671: LD_VAR 0 7
6675: PUSH
6676: FOR_IN
6677: IFFALSE 6706
// begin if IsOK ( build ) then
6679: LD_VAR 0 2
6683: PPUSH
6684: CALL_OW 302
6688: IFFALSE 6704
// ComEnterUnit ( i , build ) ;
6690: LD_VAR 0 5
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: CALL_OW 120
// end ;
6704: GO 6676
6706: POP
6707: POP
// end else
6708: GO 6795
// begin for i = 1 to turretList do
6710: LD_ADDR_VAR 0 5
6714: PUSH
6715: DOUBLE
6716: LD_INT 1
6718: DEC
6719: ST_TO_ADDR
6720: LD_VAR 0 8
6724: PUSH
6725: FOR_TO
6726: IFFALSE 6793
// begin for j = 1 to temp do
6728: LD_ADDR_VAR 0 6
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_VAR 0 9
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6789
// begin ComExitBuilding ( temp [ j ] ) ;
6746: LD_VAR 0 9
6750: PUSH
6751: LD_VAR 0 6
6755: ARRAY
6756: PPUSH
6757: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
6761: LD_VAR 0 9
6765: PUSH
6766: LD_VAR 0 6
6770: ARRAY
6771: PPUSH
6772: LD_VAR 0 8
6776: PUSH
6777: LD_VAR 0 5
6781: ARRAY
6782: PPUSH
6783: CALL_OW 180
// end ;
6787: GO 6743
6789: POP
6790: POP
// end ;
6791: GO 6725
6793: POP
6794: POP
// end ; end ;
6795: LD_VAR 0 4
6799: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6800: LD_INT 0
6802: PPUSH
6803: PPUSH
6804: PPUSH
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
// for i = 1 to medicCount do
6813: LD_ADDR_VAR 0 14
6817: PUSH
6818: DOUBLE
6819: LD_INT 1
6821: DEC
6822: ST_TO_ADDR
6823: LD_VAR 0 7
6827: PUSH
6828: FOR_TO
6829: IFFALSE 6911
// begin uc_side = side ;
6831: LD_ADDR_OWVAR 20
6835: PUSH
6836: LD_VAR 0 1
6840: ST_TO_ADDR
// uc_nation = nation ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_VAR 0 2
6850: ST_TO_ADDR
// hc_name =  ;
6851: LD_ADDR_OWVAR 26
6855: PUSH
6856: LD_STRING 
6858: ST_TO_ADDR
// hc_gallery =  ;
6859: LD_ADDR_OWVAR 33
6863: PUSH
6864: LD_STRING 
6866: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6867: LD_INT 0
6869: PPUSH
6870: LD_INT 4
6872: PPUSH
6873: LD_VAR 0 8
6877: PPUSH
6878: CALL_OW 380
// un = CreateHuman ;
6882: LD_ADDR_VAR 0 16
6886: PUSH
6887: CALL_OW 44
6891: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6892: LD_VAR 0 16
6896: PPUSH
6897: LD_VAR 0 9
6901: PPUSH
6902: LD_INT 0
6904: PPUSH
6905: CALL_OW 49
// end ;
6909: GO 6828
6911: POP
6912: POP
// for i = 1 to soldierCount do
6913: LD_ADDR_VAR 0 14
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 3
6927: PUSH
6928: FOR_TO
6929: IFFALSE 7011
// begin uc_side = side ;
6931: LD_ADDR_OWVAR 20
6935: PUSH
6936: LD_VAR 0 1
6940: ST_TO_ADDR
// uc_nation = nation ;
6941: LD_ADDR_OWVAR 21
6945: PUSH
6946: LD_VAR 0 2
6950: ST_TO_ADDR
// hc_name =  ;
6951: LD_ADDR_OWVAR 26
6955: PUSH
6956: LD_STRING 
6958: ST_TO_ADDR
// hc_gallery =  ;
6959: LD_ADDR_OWVAR 33
6963: PUSH
6964: LD_STRING 
6966: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6967: LD_INT 0
6969: PPUSH
6970: LD_INT 1
6972: PPUSH
6973: LD_VAR 0 8
6977: PPUSH
6978: CALL_OW 380
// un = CreateHuman ;
6982: LD_ADDR_VAR 0 16
6986: PUSH
6987: CALL_OW 44
6991: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6992: LD_VAR 0 16
6996: PPUSH
6997: LD_VAR 0 9
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: CALL_OW 49
// end ;
7009: GO 6928
7011: POP
7012: POP
// for i = 1 to sniperCount do
7013: LD_ADDR_VAR 0 14
7017: PUSH
7018: DOUBLE
7019: LD_INT 1
7021: DEC
7022: ST_TO_ADDR
7023: LD_VAR 0 4
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7111
// begin uc_side = side ;
7031: LD_ADDR_OWVAR 20
7035: PUSH
7036: LD_VAR 0 1
7040: ST_TO_ADDR
// uc_nation = nation ;
7041: LD_ADDR_OWVAR 21
7045: PUSH
7046: LD_VAR 0 2
7050: ST_TO_ADDR
// hc_name =  ;
7051: LD_ADDR_OWVAR 26
7055: PUSH
7056: LD_STRING 
7058: ST_TO_ADDR
// hc_gallery =  ;
7059: LD_ADDR_OWVAR 33
7063: PUSH
7064: LD_STRING 
7066: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7067: LD_INT 0
7069: PPUSH
7070: LD_INT 5
7072: PPUSH
7073: LD_VAR 0 8
7077: PPUSH
7078: CALL_OW 380
// un = CreateHuman ;
7082: LD_ADDR_VAR 0 16
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7092: LD_VAR 0 16
7096: PPUSH
7097: LD_VAR 0 9
7101: PPUSH
7102: LD_INT 0
7104: PPUSH
7105: CALL_OW 49
// end ;
7109: GO 7028
7111: POP
7112: POP
// for i = 1 to bazookCount do
7113: LD_ADDR_VAR 0 14
7117: PUSH
7118: DOUBLE
7119: LD_INT 1
7121: DEC
7122: ST_TO_ADDR
7123: LD_VAR 0 5
7127: PUSH
7128: FOR_TO
7129: IFFALSE 7211
// begin uc_side = side ;
7131: LD_ADDR_OWVAR 20
7135: PUSH
7136: LD_VAR 0 1
7140: ST_TO_ADDR
// uc_nation = nation ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_VAR 0 2
7150: ST_TO_ADDR
// hc_name =  ;
7151: LD_ADDR_OWVAR 26
7155: PUSH
7156: LD_STRING 
7158: ST_TO_ADDR
// hc_gallery =  ;
7159: LD_ADDR_OWVAR 33
7163: PUSH
7164: LD_STRING 
7166: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7167: LD_INT 0
7169: PPUSH
7170: LD_INT 9
7172: PPUSH
7173: LD_VAR 0 8
7177: PPUSH
7178: CALL_OW 380
// un = CreateHuman ;
7182: LD_ADDR_VAR 0 16
7186: PUSH
7187: CALL_OW 44
7191: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7192: LD_VAR 0 16
7196: PPUSH
7197: LD_VAR 0 9
7201: PPUSH
7202: LD_INT 0
7204: PPUSH
7205: CALL_OW 49
// end ;
7209: GO 7128
7211: POP
7212: POP
// for i = 1 to mortalCount do
7213: LD_ADDR_VAR 0 14
7217: PUSH
7218: DOUBLE
7219: LD_INT 1
7221: DEC
7222: ST_TO_ADDR
7223: LD_VAR 0 6
7227: PUSH
7228: FOR_TO
7229: IFFALSE 7311
// begin uc_side = side ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_VAR 0 1
7240: ST_TO_ADDR
// uc_nation = nation ;
7241: LD_ADDR_OWVAR 21
7245: PUSH
7246: LD_VAR 0 2
7250: ST_TO_ADDR
// hc_name =  ;
7251: LD_ADDR_OWVAR 26
7255: PUSH
7256: LD_STRING 
7258: ST_TO_ADDR
// hc_gallery =  ;
7259: LD_ADDR_OWVAR 33
7263: PUSH
7264: LD_STRING 
7266: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7267: LD_INT 0
7269: PPUSH
7270: LD_INT 8
7272: PPUSH
7273: LD_VAR 0 8
7277: PPUSH
7278: CALL_OW 380
// un = CreateHuman ;
7282: LD_ADDR_VAR 0 16
7286: PUSH
7287: CALL_OW 44
7291: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7292: LD_VAR 0 16
7296: PPUSH
7297: LD_VAR 0 9
7301: PPUSH
7302: LD_INT 0
7304: PPUSH
7305: CALL_OW 49
// end ;
7309: GO 7228
7311: POP
7312: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7313: LD_ADDR_VAR 0 19
7317: PUSH
7318: LD_INT 22
7320: PUSH
7321: LD_VAR 0 1
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 2
7332: PUSH
7333: LD_INT 25
7335: PUSH
7336: LD_INT 1
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 25
7345: PUSH
7346: LD_INT 5
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 25
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 25
7365: PUSH
7366: LD_INT 9
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PPUSH
7384: CALL_OW 69
7388: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7389: LD_ADDR_VAR 0 18
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_VAR 0 1
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 25
7408: PUSH
7409: LD_INT 4
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 69
7424: ST_TO_ADDR
// for i in medic_list do
7425: LD_ADDR_VAR 0 14
7429: PUSH
7430: LD_VAR 0 18
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7454
// ComMoveToArea ( i , healArea ) ;
7438: LD_VAR 0 14
7442: PPUSH
7443: LD_VAR 0 10
7447: PPUSH
7448: CALL_OW 113
7452: GO 7435
7454: POP
7455: POP
// if strategy = 1 then
7456: LD_VAR 0 12
7460: PUSH
7461: LD_INT 1
7463: EQUAL
7464: IFFALSE 8169
// begin repeat wait ( 0 0$3 ) ;
7466: LD_INT 105
7468: PPUSH
7469: CALL_OW 67
// for i in soldiersOK_list do
7473: LD_ADDR_VAR 0 14
7477: PUSH
7478: LD_VAR 0 19
7482: PUSH
7483: FOR_IN
7484: IFFALSE 7518
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
7486: LD_VAR 0 14
7490: PPUSH
7491: LD_INT 80
7493: PPUSH
7494: LD_INT 109
7496: PPUSH
7497: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
7501: LD_VAR 0 14
7505: PPUSH
7506: LD_INT 39
7508: PPUSH
7509: LD_INT 49
7511: PPUSH
7512: CALL_OW 174
// end ;
7516: GO 7483
7518: POP
7519: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
7520: LD_INT 15
7522: PPUSH
7523: LD_INT 22
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 70
7539: PUSH
7540: LD_INT 0
7542: GREATER
7543: IFFALSE 7466
// repeat wait ( 0 0$1 ) ;
7545: LD_INT 35
7547: PPUSH
7548: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7552: LD_ADDR_VAR 0 17
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 1
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_INT 550
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 24
7591: PUSH
7592: LD_INT 250
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PPUSH
7608: CALL_OW 69
7612: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7613: LD_ADDR_VAR 0 19
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_VAR 0 1
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 5
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: LD_INT 25
7655: PUSH
7656: LD_INT 8
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 25
7665: PUSH
7666: LD_INT 9
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: LD_INT 24
7682: PUSH
7683: LD_INT 1000
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PPUSH
7695: CALL_OW 69
7699: ST_TO_ADDR
// if medicCount > 0 then
7700: LD_VAR 0 7
7704: PUSH
7705: LD_INT 0
7707: GREATER
7708: IFFALSE 7782
// begin if damageUnit_list > 0 then
7710: LD_VAR 0 17
7714: PUSH
7715: LD_INT 0
7717: GREATER
7718: IFFALSE 7782
// begin for i in damageUnit_list do
7720: LD_ADDR_VAR 0 14
7724: PUSH
7725: LD_VAR 0 17
7729: PUSH
7730: FOR_IN
7731: IFFALSE 7780
// begin ComMoveToArea ( i , healArea ) ;
7733: LD_VAR 0 14
7737: PPUSH
7738: LD_VAR 0 10
7742: PPUSH
7743: CALL_OW 113
// for j in medic_list do
7747: LD_ADDR_VAR 0 15
7751: PUSH
7752: LD_VAR 0 18
7756: PUSH
7757: FOR_IN
7758: IFFALSE 7776
// AddComHeal ( j , i ) ;
7760: LD_VAR 0 15
7764: PPUSH
7765: LD_VAR 0 14
7769: PPUSH
7770: CALL_OW 188
7774: GO 7757
7776: POP
7777: POP
// end ;
7778: GO 7730
7780: POP
7781: POP
// end ; end ; for i in soldiersOK_list do
7782: LD_ADDR_VAR 0 14
7786: PUSH
7787: LD_VAR 0 19
7791: PUSH
7792: FOR_IN
7793: IFFALSE 7969
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7795: LD_ADDR_VAR 0 22
7799: PUSH
7800: LD_INT 22
7802: PUSH
7803: LD_VAR 0 11
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PPUSH
7812: CALL_OW 69
7816: PPUSH
7817: LD_VAR 0 14
7821: PPUSH
7822: CALL_OW 74
7826: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7827: LD_ADDR_VAR 0 23
7831: PUSH
7832: LD_INT 22
7834: PUSH
7835: LD_VAR 0 11
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 59
7849: PUSH
7850: EMPTY
7851: LIST
7852: PUSH
7853: LD_INT 21
7855: PUSH
7856: LD_INT 1
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 21
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: PPUSH
7891: LD_VAR 0 14
7895: PPUSH
7896: CALL_OW 74
7900: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7901: LD_VAR 0 14
7905: PPUSH
7906: LD_VAR 0 22
7910: PPUSH
7911: CALL_OW 296
7915: PUSH
7916: LD_INT 8
7918: PLUS
7919: PUSH
7920: LD_VAR 0 14
7924: PPUSH
7925: LD_VAR 0 23
7929: PPUSH
7930: CALL_OW 296
7934: LESS
7935: IFFALSE 7953
// begin ComAttackUnit ( i , target1 ) ;
7937: LD_VAR 0 14
7941: PPUSH
7942: LD_VAR 0 22
7946: PPUSH
7947: CALL_OW 115
// end else
7951: GO 7967
// begin ComAttackUnit ( i , target2 ) ;
7953: LD_VAR 0 14
7957: PPUSH
7958: LD_VAR 0 23
7962: PPUSH
7963: CALL_OW 115
// end ; end ;
7967: GO 7792
7969: POP
7970: POP
// for i in soldiersOK_list do
7971: LD_ADDR_VAR 0 14
7975: PUSH
7976: LD_VAR 0 19
7980: PUSH
7981: FOR_IN
7982: IFFALSE 8158
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7984: LD_ADDR_VAR 0 22
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_VAR 0 11
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PPUSH
8001: CALL_OW 69
8005: PPUSH
8006: LD_VAR 0 14
8010: PPUSH
8011: CALL_OW 74
8015: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8016: LD_ADDR_VAR 0 23
8020: PUSH
8021: LD_INT 22
8023: PUSH
8024: LD_VAR 0 11
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 59
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: LD_INT 21
8044: PUSH
8045: LD_INT 1
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: PPUSH
8080: LD_VAR 0 14
8084: PPUSH
8085: CALL_OW 74
8089: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8090: LD_VAR 0 14
8094: PPUSH
8095: LD_VAR 0 22
8099: PPUSH
8100: CALL_OW 296
8104: PUSH
8105: LD_INT 8
8107: PLUS
8108: PUSH
8109: LD_VAR 0 14
8113: PPUSH
8114: LD_VAR 0 23
8118: PPUSH
8119: CALL_OW 296
8123: LESS
8124: IFFALSE 8142
// begin ComAttackUnit ( i , target1 ) ;
8126: LD_VAR 0 14
8130: PPUSH
8131: LD_VAR 0 22
8135: PPUSH
8136: CALL_OW 115
// end else
8140: GO 8156
// begin ComAttackUnit ( i , target2 ) ;
8142: LD_VAR 0 14
8146: PPUSH
8147: LD_VAR 0 23
8151: PPUSH
8152: CALL_OW 115
// end ; end ;
8156: GO 7981
8158: POP
8159: POP
// until soldiersOK_list = [ ] ;
8160: LD_VAR 0 19
8164: PUSH
8165: EMPTY
8166: EQUAL
8167: IFFALSE 7545
// end ; if strategy = 2 then
8169: LD_VAR 0 12
8173: PUSH
8174: LD_INT 2
8176: EQUAL
8177: IFFALSE 8882
// begin repeat wait ( 0 0$1 ) ;
8179: LD_INT 35
8181: PPUSH
8182: CALL_OW 67
// for i in soldiersOK_list do
8186: LD_ADDR_VAR 0 14
8190: PUSH
8191: LD_VAR 0 19
8195: PUSH
8196: FOR_IN
8197: IFFALSE 8231
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
8199: LD_VAR 0 14
8203: PPUSH
8204: LD_INT 117
8206: PPUSH
8207: LD_INT 97
8209: PPUSH
8210: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
8214: LD_VAR 0 14
8218: PPUSH
8219: LD_INT 94
8221: PPUSH
8222: LD_INT 50
8224: PPUSH
8225: CALL_OW 174
// end ;
8229: GO 8196
8231: POP
8232: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
8233: LD_INT 16
8235: PPUSH
8236: LD_INT 22
8238: PUSH
8239: LD_VAR 0 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 70
8252: PUSH
8253: LD_INT 0
8255: GREATER
8256: IFFALSE 8179
// repeat wait ( 0 0$3 ) ;
8258: LD_INT 105
8260: PPUSH
8261: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8265: LD_ADDR_VAR 0 17
8269: PUSH
8270: LD_INT 22
8272: PUSH
8273: LD_VAR 0 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 1
8284: PUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 24
8290: PUSH
8291: LD_INT 550
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 24
8304: PUSH
8305: LD_INT 250
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8326: LD_ADDR_VAR 0 19
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_VAR 0 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 2
8345: PUSH
8346: LD_INT 25
8348: PUSH
8349: LD_INT 1
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 25
8358: PUSH
8359: LD_INT 5
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 25
8368: PUSH
8369: LD_INT 8
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 25
8378: PUSH
8379: LD_INT 9
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 24
8395: PUSH
8396: LD_INT 1000
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// if medicCount > 0 then
8413: LD_VAR 0 7
8417: PUSH
8418: LD_INT 0
8420: GREATER
8421: IFFALSE 8495
// begin if damageUnit_list > 0 then
8423: LD_VAR 0 17
8427: PUSH
8428: LD_INT 0
8430: GREATER
8431: IFFALSE 8495
// begin for i in damageUnit_list do
8433: LD_ADDR_VAR 0 14
8437: PUSH
8438: LD_VAR 0 17
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8493
// begin ComMoveToArea ( i , healArea ) ;
8446: LD_VAR 0 14
8450: PPUSH
8451: LD_VAR 0 10
8455: PPUSH
8456: CALL_OW 113
// for j in medic_list do
8460: LD_ADDR_VAR 0 15
8464: PUSH
8465: LD_VAR 0 18
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8489
// AddComHeal ( j , i ) ;
8473: LD_VAR 0 15
8477: PPUSH
8478: LD_VAR 0 14
8482: PPUSH
8483: CALL_OW 188
8487: GO 8470
8489: POP
8490: POP
// end ;
8491: GO 8443
8493: POP
8494: POP
// end ; end ; for i in soldiersOK_list do
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_VAR 0 19
8504: PUSH
8505: FOR_IN
8506: IFFALSE 8682
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8508: LD_ADDR_VAR 0 22
8512: PUSH
8513: LD_INT 22
8515: PUSH
8516: LD_VAR 0 11
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: PPUSH
8530: LD_VAR 0 14
8534: PPUSH
8535: CALL_OW 74
8539: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8540: LD_ADDR_VAR 0 23
8544: PUSH
8545: LD_INT 22
8547: PUSH
8548: LD_VAR 0 11
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 59
8562: PUSH
8563: EMPTY
8564: LIST
8565: PUSH
8566: LD_INT 21
8568: PUSH
8569: LD_INT 1
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 2
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: PPUSH
8599: CALL_OW 69
8603: PPUSH
8604: LD_VAR 0 14
8608: PPUSH
8609: CALL_OW 74
8613: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8614: LD_VAR 0 14
8618: PPUSH
8619: LD_VAR 0 22
8623: PPUSH
8624: CALL_OW 296
8628: PUSH
8629: LD_INT 8
8631: PLUS
8632: PUSH
8633: LD_VAR 0 14
8637: PPUSH
8638: LD_VAR 0 23
8642: PPUSH
8643: CALL_OW 296
8647: LESS
8648: IFFALSE 8666
// begin ComAttackUnit ( i , target1 ) ;
8650: LD_VAR 0 14
8654: PPUSH
8655: LD_VAR 0 22
8659: PPUSH
8660: CALL_OW 115
// end else
8664: GO 8680
// begin ComAttackUnit ( i , target2 ) ;
8666: LD_VAR 0 14
8670: PPUSH
8671: LD_VAR 0 23
8675: PPUSH
8676: CALL_OW 115
// end ; end ;
8680: GO 8505
8682: POP
8683: POP
// for i in soldiersOK_list do
8684: LD_ADDR_VAR 0 14
8688: PUSH
8689: LD_VAR 0 19
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8871
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8697: LD_ADDR_VAR 0 22
8701: PUSH
8702: LD_INT 22
8704: PUSH
8705: LD_VAR 0 11
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: PPUSH
8719: LD_VAR 0 14
8723: PPUSH
8724: CALL_OW 74
8728: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8729: LD_ADDR_VAR 0 23
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_VAR 0 11
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 2
8748: PUSH
8749: LD_INT 59
8751: PUSH
8752: EMPTY
8753: LIST
8754: PUSH
8755: LD_INT 21
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 21
8767: PUSH
8768: LD_INT 2
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: EMPTY
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: PPUSH
8793: LD_VAR 0 14
8797: PPUSH
8798: CALL_OW 74
8802: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8803: LD_VAR 0 14
8807: PPUSH
8808: LD_VAR 0 22
8812: PPUSH
8813: CALL_OW 296
8817: PUSH
8818: LD_INT 8
8820: PLUS
8821: PUSH
8822: LD_VAR 0 14
8826: PPUSH
8827: LD_VAR 0 23
8831: PPUSH
8832: CALL_OW 296
8836: LESS
8837: IFFALSE 8855
// begin ComAttackUnit ( i , target1 ) ;
8839: LD_VAR 0 14
8843: PPUSH
8844: LD_VAR 0 22
8848: PPUSH
8849: CALL_OW 115
// end else
8853: GO 8869
// begin ComAttackUnit ( i , target2 ) ;
8855: LD_VAR 0 14
8859: PPUSH
8860: LD_VAR 0 23
8864: PPUSH
8865: CALL_OW 115
// end ; end ;
8869: GO 8694
8871: POP
8872: POP
// until soldiersOK_list = [ ] ;
8873: LD_VAR 0 19
8877: PUSH
8878: EMPTY
8879: EQUAL
8880: IFFALSE 8258
// end ; end ; end_of_file
8882: LD_VAR 0 13
8886: RET
// every 0 0$01 do
8887: GO 8889
8889: DISABLE
// begin ChangeMissionObjectives ( M1 ) ;
8890: LD_STRING M1
8892: PPUSH
8893: CALL_OW 337
// case difficulty of 1 :
8897: LD_OWVAR 67
8901: PUSH
8902: LD_INT 1
8904: DOUBLE
8905: EQUAL
8906: IFTRUE 8910
8908: GO 8920
8910: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
8911: LD_STRING M1-1
8913: PPUSH
8914: CALL_OW 337
8918: GO 8957
8920: LD_INT 2
8922: DOUBLE
8923: EQUAL
8924: IFTRUE 8928
8926: GO 8938
8928: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
8929: LD_STRING M1-2
8931: PPUSH
8932: CALL_OW 337
8936: GO 8957
8938: LD_INT 3
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 8956
8946: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
8947: LD_STRING M1-3
8949: PPUSH
8950: CALL_OW 337
8954: GO 8957
8956: POP
// ChangeMissionObjectives ( M1cont ) ;
8957: LD_STRING M1cont
8959: PPUSH
8960: CALL_OW 337
// end ;
8964: END
// every 0 0$1 do
8965: GO 8967
8967: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
8968: LD_INT 350
8970: PPUSH
8971: LD_INT 875
8973: PPUSH
8974: CALL_OW 12
8978: PPUSH
8979: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
8983: LD_INT 5
8985: PPUSH
8986: LD_INT 4
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: CALL_OW 55
// wait ( 0 0$15 ) ;
8996: LD_INT 525
8998: PPUSH
8999: CALL_OW 67
// if IsOk ( Lisa ) then
9003: LD_EXP 5
9007: PPUSH
9008: CALL_OW 302
9012: IFFALSE 9028
// begin Say ( Lisa , DR0-Lisa-1 ) ;
9014: LD_EXP 5
9018: PPUSH
9019: LD_STRING DR0-Lisa-1
9021: PPUSH
9022: CALL_OW 88
// end else
9026: GO 9171
// begin if IsOK ( Cyrus ) then
9028: LD_EXP 8
9032: PPUSH
9033: CALL_OW 302
9037: IFFALSE 9041
// begin end else
9039: GO 9171
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
9041: LD_INT 22
9043: PUSH
9044: LD_INT 1
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 21
9053: PUSH
9054: LD_INT 1
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 26
9063: PUSH
9064: LD_INT 1
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 69
9080: PUSH
9081: LD_EXP 1
9085: PUSH
9086: LD_EXP 2
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: DIFF
9095: PPUSH
9096: LD_STRING DR0-Sol1-1
9098: PPUSH
9099: LD_STRING DR0-Sol1-1
9101: PPUSH
9102: CALL 3582 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
9106: LD_INT 22
9108: PUSH
9109: LD_INT 1
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 21
9118: PUSH
9119: LD_INT 1
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 26
9128: PUSH
9129: LD_INT 1
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 69
9145: PUSH
9146: LD_EXP 1
9150: PUSH
9151: LD_EXP 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: DIFF
9160: PPUSH
9161: LD_STRING DR0-Sol2-1
9163: PPUSH
9164: LD_STRING DR0-Sol2-1
9166: PPUSH
9167: CALL 3582 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
9171: LD_INT 22
9173: PUSH
9174: LD_INT 1
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 21
9183: PUSH
9184: LD_INT 1
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 26
9193: PUSH
9194: LD_INT 1
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: PPUSH
9206: CALL_OW 69
9210: PUSH
9211: LD_EXP 1
9215: PUSH
9216: LD_EXP 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: DIFF
9225: PPUSH
9226: LD_STRING DR0-Sol2-1
9228: PPUSH
9229: LD_STRING DR0-Sol2-1
9231: PPUSH
9232: CALL 3582 0 3
// Say ( JMM , DR0-JMM-1 ) ;
9236: LD_EXP 1
9240: PPUSH
9241: LD_STRING DR0-JMM-1
9243: PPUSH
9244: CALL_OW 88
// end ;
9248: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
9249: LD_EXP 3
9253: PPUSH
9254: CALL_OW 302
9258: PUSH
9259: LD_INT 22
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 16
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL_OW 69
9287: PUSH
9288: LD_INT 0
9290: GREATER
9291: AND
9292: IFFALSE 9464
9294: GO 9296
9296: DISABLE
// begin DialogueOn ;
9297: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
9301: LD_EXP 3
9305: PPUSH
9306: LD_STRING D10-Frank-1
9308: PPUSH
9309: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
9313: LD_INT 22
9315: PUSH
9316: LD_INT 1
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 21
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: PUSH
9342: LD_EXP 1
9346: PUSH
9347: LD_EXP 3
9351: PUSH
9352: LD_EXP 5
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: DIFF
9362: PPUSH
9363: LD_STRING D10-Sol1-1
9365: PPUSH
9366: LD_STRING D10-FSol1-1
9368: PPUSH
9369: CALL 3582 0 3
// Say ( Frank , D10-Frank-2 ) ;
9373: LD_EXP 3
9377: PPUSH
9378: LD_STRING D10-Frank-2
9380: PPUSH
9381: CALL_OW 88
// if IsOK ( Lisa ) then
9385: LD_EXP 5
9389: PPUSH
9390: CALL_OW 302
9394: IFFALSE 9410
// begin Say ( Lisa , D10-Lisa-2 ) ;
9396: LD_EXP 5
9400: PPUSH
9401: LD_STRING D10-Lisa-2
9403: PPUSH
9404: CALL_OW 88
// end else
9408: GO 9464
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
9410: LD_INT 22
9412: PUSH
9413: LD_INT 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 1
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_EXP 1
9443: PUSH
9444: LD_EXP 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: DIFF
9453: PPUSH
9454: LD_STRING D10-Sol1-2
9456: PPUSH
9457: LD_STRING D10-FSol1-2
9459: PPUSH
9460: CALL 3582 0 3
// end ; end ;
9464: END
// every 10 10$0 do
9465: GO 9467
9467: DISABLE
// begin HarrisonSupport ;
9468: CALL 931 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
9472: LD_EXP 13
9476: PPUSH
9477: CALL_OW 310
9481: PPUSH
9482: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
9486: LD_EXP 13
9490: PPUSH
9491: LD_STRING DEng-Eng1-1
9493: PPUSH
9494: CALL_OW 88
// wait ( 1 1$0 ) ;
9498: LD_INT 2100
9500: PPUSH
9501: CALL_OW 67
// DialogueOn ;
9505: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING DRem-Har-1
9516: PPUSH
9517: CALL_OW 94
// if contactWithRussian = 1 then
9521: LD_EXP 18
9525: PUSH
9526: LD_INT 1
9528: EQUAL
9529: IFFALSE 9545
// begin Say ( JMM , DRem-JMM-1 ) ;
9531: LD_EXP 1
9535: PPUSH
9536: LD_STRING DRem-JMM-1
9538: PPUSH
9539: CALL_OW 88
// end else
9543: GO 9557
// begin Say ( JMM , DRem-JMM-1a ) ;
9545: LD_EXP 1
9549: PPUSH
9550: LD_STRING DRem-JMM-1a
9552: PPUSH
9553: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
9557: LD_EXP 9
9561: PPUSH
9562: LD_STRING DRem-Har-2
9564: PPUSH
9565: CALL_OW 94
// Say ( JMM , DRem-JMM-2 ) ;
9569: LD_EXP 1
9573: PPUSH
9574: LD_STRING DRem-JMM-2
9576: PPUSH
9577: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
9581: LD_EXP 9
9585: PPUSH
9586: LD_STRING DRem-Har-3
9588: PPUSH
9589: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
9593: LD_EXP 1
9597: PPUSH
9598: LD_STRING DRem-JMM-3
9600: PPUSH
9601: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
9605: LD_EXP 9
9609: PPUSH
9610: LD_STRING DRem-Har-4
9612: PPUSH
9613: CALL_OW 94
// Say ( JMM , DRem-JMM-4 ) ;
9617: LD_EXP 1
9621: PPUSH
9622: LD_STRING DRem-JMM-4
9624: PPUSH
9625: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
9629: LD_EXP 9
9633: PPUSH
9634: LD_STRING DRem-Har-5
9636: PPUSH
9637: CALL_OW 94
// DialogueOff ;
9641: CALL_OW 7
// end ;
9645: END
// every 15 15$0 do
9646: GO 9648
9648: DISABLE
// begin PrepareDenis ;
9649: CALL 852 0 0
// CenterNowOnUnits ( Denis ) ;
9653: LD_EXP 7
9657: PPUSH
9658: CALL_OW 87
// DialogueOn ;
9662: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
9666: LD_EXP 7
9670: PPUSH
9671: LD_STRING DDen-Den-1
9673: PPUSH
9674: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
9678: LD_EXP 1
9682: PPUSH
9683: LD_STRING DDen-JMM-1
9685: PPUSH
9686: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
9690: LD_EXP 7
9694: PPUSH
9695: LD_STRING DDen-Den-2
9697: PPUSH
9698: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
9702: LD_EXP 1
9706: PPUSH
9707: LD_STRING DDen-JMM-2
9709: PPUSH
9710: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
9714: LD_EXP 7
9718: PPUSH
9719: LD_STRING DDen-Den-3
9721: PPUSH
9722: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
9726: LD_EXP 1
9730: PPUSH
9731: LD_STRING DDen-JMM-3
9733: PPUSH
9734: CALL_OW 88
// DialogueOff ;
9738: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
9742: LD_INT 36
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
9755: LD_INT 15
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
9768: LD_STRING MR
9770: PPUSH
9771: CALL_OW 337
// end ;
9775: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
9776: CALL 9821 0 0
9780: PUSH
9781: LD_EXP 7
9785: PPUSH
9786: CALL_OW 302
9790: AND
9791: IFFALSE 9820
9793: GO 9795
9795: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
9796: LD_EXP 7
9800: PPUSH
9801: LD_STRING DR1-Den-1
9803: PPUSH
9804: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
9808: LD_EXP 1
9812: PPUSH
9813: LD_STRING DR1-JMM-1
9815: PPUSH
9816: CALL_OW 88
// end ;
9820: END
// function CheckOptoLab ; var i ; begin
9821: LD_INT 0
9823: PPUSH
9824: PPUSH
// result = false ;
9825: LD_ADDR_VAR 0 1
9829: PUSH
9830: LD_INT 0
9832: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
9833: LD_ADDR_VAR 0 2
9837: PUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 7
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 8
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 69
9884: PUSH
9885: FOR_IN
9886: IFFALSE 9938
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
9888: LD_VAR 0 2
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: CALL_OW 268
9900: PUSH
9901: LD_INT 15
9903: EQUAL
9904: PUSH
9905: LD_VAR 0 2
9909: PPUSH
9910: LD_INT 2
9912: PPUSH
9913: CALL_OW 268
9917: PUSH
9918: LD_INT 15
9920: EQUAL
9921: OR
9922: IFFALSE 9934
// begin result = true ;
9924: LD_ADDR_VAR 0 1
9928: PUSH
9929: LD_INT 1
9931: ST_TO_ADDR
// break ;
9932: GO 9938
// end ; break ;
9934: GO 9938
// end ;
9936: GO 9885
9938: POP
9939: POP
// end ;
9940: LD_VAR 0 1
9944: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
9945: LD_INT 15
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 321
9955: PUSH
9956: LD_INT 2
9958: EQUAL
9959: PUSH
9960: LD_EXP 7
9964: PPUSH
9965: CALL_OW 302
9969: AND
9970: IFFALSE 10157
9972: GO 9974
9974: DISABLE
// begin DialogueOn ;
9975: CALL_OW 6
// if IsOK ( Denis ) then
9979: LD_EXP 7
9983: PPUSH
9984: CALL_OW 302
9988: IFFALSE 10004
// begin Say ( Denis , DR2-Den-1 ) ;
9990: LD_EXP 7
9994: PPUSH
9995: LD_STRING DR2-Den-1
9997: PPUSH
9998: CALL_OW 88
// end else
10002: GO 10063
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
10004: LD_INT 22
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 21
10016: PUSH
10017: LD_INT 1
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 25
10026: PUSH
10027: LD_INT 4
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 69
10043: PUSH
10044: LD_EXP 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: DIFF
10052: PPUSH
10053: LD_STRING DR2-Sci1-1
10055: PPUSH
10056: LD_STRING DR2-FSci1-1
10058: PPUSH
10059: CALL 3582 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
10063: LD_EXP 1
10067: PPUSH
10068: LD_STRING DR2-JMM-1
10070: PPUSH
10071: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 1
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 3
10097: PUSH
10098: LD_INT 25
10100: PUSH
10101: LD_INT 4
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PUSH
10122: LD_EXP 1
10126: PUSH
10127: EMPTY
10128: LIST
10129: DIFF
10130: PPUSH
10131: LD_STRING DR2-Sol1-1
10133: PPUSH
10134: LD_STRING DR2-Sol1-11
10136: PPUSH
10137: CALL 3582 0 3
// Say ( JMM , DR2-JMM-2 ) ;
10141: LD_EXP 1
10145: PPUSH
10146: LD_STRING DR2-JMM-2
10148: PPUSH
10149: CALL_OW 88
// DialogueOff ;
10153: CALL_OW 7
// end ;
10157: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
10158: LD_INT 22
10160: PUSH
10161: LD_INT 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 30
10170: PUSH
10171: LD_INT 36
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: PUSH
10187: LD_INT 0
10189: EQUAL
10190: PUSH
10191: LD_INT 22
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 21
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 33
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: PPUSH
10226: CALL_OW 69
10230: PUSH
10231: LD_INT 0
10233: GREATER
10234: AND
10235: PUSH
10236: LD_EXP 19
10240: PUSH
10241: LD_INT 0
10243: EQUAL
10244: AND
10245: IFFALSE 10317
10247: GO 10249
10249: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
10250: LD_INT 22
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 21
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 69
10289: PUSH
10290: LD_EXP 1
10294: PUSH
10295: EMPTY
10296: LIST
10297: DIFF
10298: PPUSH
10299: LD_STRING D3a-Mech1-1
10301: PPUSH
10302: LD_STRING D3a-Mech1-1
10304: PPUSH
10305: CALL 3582 0 3
// firstTower = 2 ;
10309: LD_ADDR_EXP 19
10313: PUSH
10314: LD_INT 2
10316: ST_TO_ADDR
// end ;
10317: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
10318: LD_INT 22
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 30
10330: PUSH
10331: LD_INT 36
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PPUSH
10342: CALL_OW 69
10346: PUSH
10347: LD_INT 0
10349: GREATER
10350: PUSH
10351: LD_INT 22
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 21
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 33
10373: PUSH
10374: LD_INT 2
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: LD_INT 0
10393: GREATER
10394: AND
10395: PUSH
10396: CALL 10978 0 0
10400: AND
10401: IFFALSE 10975
10403: GO 10405
10405: DISABLE
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
10413: LD_ADDR_VAR 0 3
10417: PUSH
10418: LD_INT 22
10420: PUSH
10421: LD_INT 1
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 30
10430: PUSH
10431: LD_INT 36
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
10447: LD_ADDR_VAR 0 4
10451: PUSH
10452: LD_INT 22
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 21
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 33
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
10492: LD_ADDR_VAR 0 5
10496: PUSH
10497: EMPTY
10498: ST_TO_ADDR
// for i in tmpControlTowers do
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: LD_VAR 0 3
10508: PUSH
10509: FOR_IN
10510: IFFALSE 10973
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
10512: LD_EXP 1
10516: PPUSH
10517: CALL_OW 310
10521: PUSH
10522: LD_VAR 0 1
10526: EQUAL
10527: PUSH
10528: LD_EXP 1
10532: PPUSH
10533: CALL_OW 257
10537: PUSH
10538: LD_INT 3
10540: EQUAL
10541: AND
10542: IFFALSE 10672
// begin InGameOn ;
10544: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
10548: LD_VAR 0 4
10552: PUSH
10553: LD_INT 1
10555: ARRAY
10556: PPUSH
10557: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
10561: LD_EXP 1
10565: PPUSH
10566: LD_STRING D4a-JMM-1
10568: PPUSH
10569: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
10573: LD_VAR 0 4
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: PPUSH
10582: LD_EXP 1
10586: PPUSH
10587: CALL_OW 53
// wait ( 0 0$1 ) ;
10591: LD_INT 35
10593: PPUSH
10594: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
10598: LD_VAR 0 4
10602: PUSH
10603: LD_INT 1
10605: ARRAY
10606: PPUSH
10607: LD_VAR 0 4
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: CALL_OW 250
10620: PUSH
10621: LD_INT 3
10623: PLUS
10624: PPUSH
10625: LD_VAR 0 4
10629: PUSH
10630: LD_INT 1
10632: ARRAY
10633: PPUSH
10634: CALL_OW 251
10638: PUSH
10639: LD_INT 2
10641: MINUS
10642: PPUSH
10643: CALL_OW 111
// wait ( 0 0$2 ) ;
10647: LD_INT 70
10649: PPUSH
10650: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
10654: LD_EXP 1
10658: PPUSH
10659: LD_STRING D4b-JMM-1
10661: PPUSH
10662: CALL_OW 88
// InGameOff ;
10666: CALL_OW 9
// end else
10670: GO 10971
// begin InGameOn ;
10672: CALL_OW 8
// for j in UnitsInside ( i ) do
10676: LD_ADDR_VAR 0 2
10680: PUSH
10681: LD_VAR 0 1
10685: PPUSH
10686: CALL_OW 313
10690: PUSH
10691: FOR_IN
10692: IFFALSE 10727
// if GetClass ( j ) = 3 then
10694: LD_VAR 0 2
10698: PPUSH
10699: CALL_OW 257
10703: PUSH
10704: LD_INT 3
10706: EQUAL
10707: IFFALSE 10725
// tmpMechanicInside = tmpMechanicInside ^ j ;
10709: LD_ADDR_VAR 0 5
10713: PUSH
10714: LD_VAR 0 5
10718: PUSH
10719: LD_VAR 0 2
10723: ADD
10724: ST_TO_ADDR
10725: GO 10691
10727: POP
10728: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
10729: LD_VAR 0 5
10733: PUSH
10734: LD_INT 1
10736: ARRAY
10737: PPUSH
10738: CALL_OW 258
10742: PUSH
10743: LD_INT 1
10745: EQUAL
10746: IFFALSE 10764
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
10748: LD_VAR 0 5
10752: PUSH
10753: LD_INT 1
10755: ARRAY
10756: PPUSH
10757: LD_STRING D4a-Mech1-1
10759: PPUSH
10760: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
10764: LD_VAR 0 5
10768: PUSH
10769: LD_INT 1
10771: ARRAY
10772: PPUSH
10773: CALL_OW 258
10777: PUSH
10778: LD_INT 2
10780: EQUAL
10781: IFFALSE 10799
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
10783: LD_VAR 0 5
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_STRING D4a-FMech1-1
10794: PPUSH
10795: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
10799: LD_VAR 0 4
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PPUSH
10808: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
10812: LD_VAR 0 4
10816: PUSH
10817: LD_INT 1
10819: ARRAY
10820: PPUSH
10821: LD_VAR 0 5
10825: PUSH
10826: LD_INT 1
10828: ARRAY
10829: PPUSH
10830: CALL_OW 53
// wait ( 0 0$1 ) ;
10834: LD_INT 35
10836: PPUSH
10837: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
10841: LD_VAR 0 4
10845: PUSH
10846: LD_INT 1
10848: ARRAY
10849: PPUSH
10850: LD_VAR 0 4
10854: PUSH
10855: LD_INT 1
10857: ARRAY
10858: PPUSH
10859: CALL_OW 250
10863: PUSH
10864: LD_INT 3
10866: PLUS
10867: PPUSH
10868: LD_VAR 0 4
10872: PUSH
10873: LD_INT 1
10875: ARRAY
10876: PPUSH
10877: CALL_OW 251
10881: PUSH
10882: LD_INT 2
10884: MINUS
10885: PPUSH
10886: CALL_OW 111
// wait ( 0 0$2 ) ;
10890: LD_INT 70
10892: PPUSH
10893: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
10897: LD_VAR 0 5
10901: PUSH
10902: LD_INT 1
10904: ARRAY
10905: PPUSH
10906: CALL_OW 258
10910: PUSH
10911: LD_INT 1
10913: EQUAL
10914: IFFALSE 10932
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
10916: LD_VAR 0 5
10920: PUSH
10921: LD_INT 1
10923: ARRAY
10924: PPUSH
10925: LD_STRING D4b-Mech1-1
10927: PPUSH
10928: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
10932: LD_VAR 0 5
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: CALL_OW 258
10945: PUSH
10946: LD_INT 2
10948: EQUAL
10949: IFFALSE 10967
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
10951: LD_VAR 0 5
10955: PUSH
10956: LD_INT 1
10958: ARRAY
10959: PPUSH
10960: LD_STRING D4b-FMech1-1
10962: PPUSH
10963: CALL_OW 88
// InGameOff ;
10967: CALL_OW 9
// end ; end ;
10971: GO 10509
10973: POP
10974: POP
// end ;
10975: PPOPN 5
10977: END
// function CheckMehInside ; var i , j ; begin
10978: LD_INT 0
10980: PPUSH
10981: PPUSH
10982: PPUSH
// result = false ;
10983: LD_ADDR_VAR 0 1
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
10991: LD_ADDR_VAR 0 2
10995: PUSH
10996: LD_INT 22
10998: PUSH
10999: LD_INT 1
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 30
11008: PUSH
11009: LD_INT 36
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PPUSH
11020: CALL_OW 69
11024: PUSH
11025: FOR_IN
11026: IFFALSE 11077
// begin for j in UnitsInside ( i ) do
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_VAR 0 2
11037: PPUSH
11038: CALL_OW 313
11042: PUSH
11043: FOR_IN
11044: IFFALSE 11073
// begin if GetClass ( j ) = 3 then
11046: LD_VAR 0 3
11050: PPUSH
11051: CALL_OW 257
11055: PUSH
11056: LD_INT 3
11058: EQUAL
11059: IFFALSE 11071
// begin result = true ;
11061: LD_ADDR_VAR 0 1
11065: PUSH
11066: LD_INT 1
11068: ST_TO_ADDR
// break ;
11069: GO 11073
// end ; end ;
11071: GO 11043
11073: POP
11074: POP
// end ;
11075: GO 11025
11077: POP
11078: POP
// end ;
11079: LD_VAR 0 1
11083: RET
// every 25 25$0 do
11084: GO 11086
11086: DISABLE
// begin PrepareKurt ;
11087: CALL 13828 0 0
// end ;
11091: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
11092: LD_EXP 15
11096: PPUSH
11097: LD_INT 9
11099: PPUSH
11100: CALL_OW 308
11104: PUSH
11105: LD_EXP 17
11109: PUSH
11110: LD_INT 1
11112: EQUAL
11113: AND
11114: IFFALSE 11188
11116: GO 11118
11118: DISABLE
// begin RemoveUnit ( Kurt ) ;
11119: LD_EXP 15
11123: PPUSH
11124: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
11128: LD_EXP 15
11132: PPUSH
11133: LD_STRING Kurt
11135: PPUSH
11136: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 2
11145: PPUSH
11146: CALL_OW 81
11150: PUSH
11151: LD_INT 0
11153: EQUAL
11154: IFFALSE 11164
// KurtStatus = 1 ;
11156: LD_ADDR_EXP 16
11160: PUSH
11161: LD_INT 1
11163: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
11164: LD_INT 1
11166: PPUSH
11167: LD_INT 2
11169: PPUSH
11170: CALL_OW 81
11174: PUSH
11175: LD_INT 2
11177: EQUAL
11178: IFFALSE 11188
// KurtStatus = 2 ;
11180: LD_ADDR_EXP 16
11184: PUSH
11185: LD_INT 2
11187: ST_TO_ADDR
// end ;
11188: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
11189: LD_INT 1
11191: PPUSH
11192: LD_INT 2
11194: PPUSH
11195: CALL_OW 81
11199: PUSH
11200: LD_INT 2
11202: EQUAL
11203: PUSH
11204: LD_EXP 15
11208: PPUSH
11209: CALL_OW 302
11213: AND
11214: IFFALSE 11239
11216: GO 11218
11218: DISABLE
// begin DialogueOn ;
11219: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
11223: LD_EXP 15
11227: PPUSH
11228: LD_STRING D2a-Kurt-1
11230: PPUSH
11231: CALL_OW 88
// DialogueOff ;
11235: CALL_OW 7
// end ;
11239: END
// every 35 35$0 do
11240: GO 11242
11242: DISABLE
// begin PrepareJoan ;
11243: CALL 1303 0 0
// wait ( 1 1$0 ) ;
11247: LD_INT 2100
11249: PPUSH
11250: CALL_OW 67
// if IsOK ( Lisa ) then
11254: LD_EXP 5
11258: PPUSH
11259: CALL_OW 302
11263: IFFALSE 11393
// begin DialogueOn ;
11265: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
11269: LD_EXP 5
11273: PPUSH
11274: LD_STRING D7-Lisa-1
11276: PPUSH
11277: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
11281: LD_EXP 1
11285: PPUSH
11286: LD_STRING D7-JMM-1
11288: PPUSH
11289: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
11293: LD_EXP 5
11297: PPUSH
11298: LD_STRING D7-Lisa-2
11300: PPUSH
11301: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
11305: LD_EXP 1
11309: PPUSH
11310: LD_STRING D7-JMM-2
11312: PPUSH
11313: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
11317: LD_EXP 5
11321: PPUSH
11322: LD_STRING D7-Lisa-3
11324: PPUSH
11325: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
11329: LD_EXP 1
11333: PPUSH
11334: LD_STRING D7-JMM-3
11336: PPUSH
11337: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
11341: LD_EXP 5
11345: PPUSH
11346: LD_STRING D7-Lisa-4
11348: PPUSH
11349: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
11353: LD_EXP 1
11357: PPUSH
11358: LD_STRING D7-JMM-4
11360: PPUSH
11361: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
11365: LD_EXP 1
11369: PPUSH
11370: LD_STRING D7-JMM-4a
11372: PPUSH
11373: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
11377: LD_EXP 5
11381: PPUSH
11382: LD_STRING D7-Lisa-5
11384: PPUSH
11385: CALL_OW 88
// DialogueOff ;
11389: CALL_OW 7
// end ; end ;
11393: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
11394: LD_INT 22
11396: PUSH
11397: LD_INT 1
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 33
11406: PUSH
11407: LD_INT 2
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PPUSH
11418: CALL_OW 69
11422: PUSH
11423: LD_INT 2
11425: GREATEREQUAL
11426: IFFALSE 11446
11428: GO 11430
11430: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
11431: LD_STRING MRa
11433: PPUSH
11434: CALL_OW 337
// remoteVehiclesBuild = 1 ;
11438: LD_ADDR_EXP 24
11442: PUSH
11443: LD_INT 1
11445: ST_TO_ADDR
// end ;
11446: END
// every 13 13$0 do
11447: GO 11449
11449: DISABLE
// PrepareRandoms ( 1 ) ;
11450: LD_INT 1
11452: PPUSH
11453: CALL 2149 0 1
11457: END
// every 20 20$0 do
11458: GO 11460
11460: DISABLE
// PrepareRandoms ( 2 ) ;
11461: LD_INT 2
11463: PPUSH
11464: CALL 2149 0 1
11468: END
// every 28 28$0 do
11469: GO 11471
11471: DISABLE
// PrepareRandoms ( 3 ) ;
11472: LD_INT 3
11474: PPUSH
11475: CALL 2149 0 1
11479: END
// every 32 32$0 do
11480: GO 11482
11482: DISABLE
// PrepareRandoms ( 4 ) ;
11483: LD_INT 4
11485: PPUSH
11486: CALL 2149 0 1
11490: END
// every 38 38$0 do
11491: GO 11493
11493: DISABLE
// PrepareRandoms ( 5 ) ;
11494: LD_INT 5
11496: PPUSH
11497: CALL 2149 0 1
11501: END
// every 42 42$0 do
11502: GO 11504
11504: DISABLE
// PrepareRandoms ( 6 ) ;
11505: LD_INT 6
11507: PPUSH
11508: CALL 2149 0 1
11512: END
// every 45 45$0 do
11513: GO 11515
11515: DISABLE
// PrepareRandoms ( 7 ) ;
11516: LD_INT 7
11518: PPUSH
11519: CALL 2149 0 1
11523: END
// every 5 5$0 do
11524: GO 11526
11526: DISABLE
// begin DialogueOn ;
11527: CALL_OW 6
// SayRadio ( Doctor , D12a-Sci-1 ) ;
11531: LD_EXP 10
11535: PPUSH
11536: LD_STRING D12a-Sci-1
11538: PPUSH
11539: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
11543: LD_EXP 1
11547: PPUSH
11548: LD_STRING D12a-JMM-1
11550: PPUSH
11551: CALL_OW 88
// DialogueOff ;
11555: CALL_OW 7
// cratesStatus = 1 ;
11559: LD_ADDR_EXP 31
11563: PUSH
11564: LD_INT 1
11566: ST_TO_ADDR
// end ;
11567: END
// every 13 13$0 do
11568: GO 11570
11570: DISABLE
// begin DialogueOn ;
11571: CALL_OW 6
// SayRadio ( Doctor , D12b-Sci-1 ) ;
11575: LD_EXP 10
11579: PPUSH
11580: LD_STRING D12b-Sci-1
11582: PPUSH
11583: CALL_OW 94
// DialogueOff ;
11587: CALL_OW 7
// cratesStatus = 2 ;
11591: LD_ADDR_EXP 31
11595: PUSH
11596: LD_INT 2
11598: ST_TO_ADDR
// end ;
11599: END
// every 32 32$0 do
11600: GO 11602
11602: DISABLE
// begin DialogueOn ;
11603: CALL_OW 6
// SayRadio ( Doctor ,  D12c-Sci-1 ) ;
11607: LD_EXP 10
11611: PPUSH
11612: LD_STRING  D12c-Sci-1
11614: PPUSH
11615: CALL_OW 94
// DialogueOff ;
11619: CALL_OW 7
// wait ( 3 3$0 ) ;
11623: LD_INT 6300
11625: PPUSH
11626: CALL_OW 67
// DialogueOn ;
11630: CALL_OW 6
// SayRadio ( Doctor ,  D12d-Sci-1 ) ;
11634: LD_EXP 10
11638: PPUSH
11639: LD_STRING  D12d-Sci-1
11641: PPUSH
11642: CALL_OW 94
// DialogueOff ;
11646: CALL_OW 7
// cratesStatus = 1 ;
11650: LD_ADDR_EXP 31
11654: PUSH
11655: LD_INT 1
11657: ST_TO_ADDR
// end ;
11658: END
// every 42 42$0 do
11659: GO 11661
11661: DISABLE
// begin DialogueOn ;
11662: CALL_OW 6
// SayRadio ( Doctor , D12e-Sci-1 ) ;
11666: LD_EXP 10
11670: PPUSH
11671: LD_STRING D12e-Sci-1
11673: PPUSH
11674: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
11678: LD_EXP 1
11682: PPUSH
11683: LD_STRING D12e-JMM-1
11685: PPUSH
11686: CALL_OW 88
// DialogueOff ;
11690: CALL_OW 7
// cratesStatus = 2 ;
11694: LD_ADDR_EXP 31
11698: PUSH
11699: LD_INT 2
11701: ST_TO_ADDR
// end ;
11702: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
11703: LD_INT 22
11705: PUSH
11706: LD_INT 6
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 21
11715: PUSH
11716: LD_INT 2
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 34
11725: PUSH
11726: LD_INT 51
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PPUSH
11738: CALL_OW 69
11742: PUSH
11743: LD_INT 0
11745: GREATER
11746: IFFALSE 11800
11748: GO 11750
11750: DISABLE
11751: LD_INT 0
11753: PPUSH
// begin enable ;
11754: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_INT 6
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: PPUSH
11773: CALL_OW 69
11777: PUSH
11778: FOR_IN
11779: IFFALSE 11798
// ComAgressiveMove ( i , 138 , 168 ) ;
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_INT 138
11788: PPUSH
11789: LD_INT 168
11791: PPUSH
11792: CALL_OW 114
11796: GO 11778
11798: POP
11799: POP
// end ;
11800: PPOPN 1
11802: END
// every 0 0$1 trigger FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
11803: LD_INT 5
11805: PPUSH
11806: LD_INT 22
11808: PUSH
11809: LD_INT 6
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 34
11818: PUSH
11819: LD_INT 51
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 70
11834: PUSH
11835: LD_INT 0
11837: GREATER
11838: IFFALSE 11940
11840: GO 11842
11842: DISABLE
11843: LD_INT 0
11845: PPUSH
// begin enable ;
11846: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] ] ) do
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_INT 5
11854: PPUSH
11855: LD_INT 22
11857: PUSH
11858: LD_INT 6
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: PPUSH
11868: CALL_OW 70
11872: PUSH
11873: FOR_IN
11874: IFFALSE 11938
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
11876: LD_INT 5
11878: PPUSH
11879: LD_INT 22
11881: PUSH
11882: LD_INT 6
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 34
11891: PUSH
11892: LD_INT 51
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 70
11907: PUSH
11908: LD_INT 0
11910: GREATER
11911: IFFALSE 11927
// sendedConvoys = sendedConvoys + 1 ;
11913: LD_ADDR_EXP 32
11917: PUSH
11918: LD_EXP 32
11922: PUSH
11923: LD_INT 1
11925: PLUS
11926: ST_TO_ADDR
// RemoveUnit ( i ) ;
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 64
// end ;
11936: GO 11873
11938: POP
11939: POP
// end ; end_of_file
11940: PPOPN 1
11942: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 1
11950: EQUAL
11951: PUSH
11952: LD_VAR 0 2
11956: PUSH
11957: LD_INT 3
11959: EQUAL
11960: AND
11961: IFFALSE 11971
// contactWithRussian = 1 ;
11963: LD_ADDR_EXP 18
11967: PUSH
11968: LD_INT 1
11970: ST_TO_ADDR
// end ;
11971: PPOPN 2
11973: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 36
11986: EQUAL
11987: PUSH
11988: LD_VAR 0 1
11992: PPUSH
11993: CALL_OW 255
11997: PUSH
11998: LD_INT 1
12000: EQUAL
12001: AND
12002: PUSH
12003: LD_INT 22
12005: PUSH
12006: LD_INT 1
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 21
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: PUSH
12023: LD_INT 33
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 69
12042: PUSH
12043: LD_INT 0
12045: EQUAL
12046: AND
12047: PUSH
12048: LD_EXP 19
12052: PUSH
12053: LD_INT 0
12055: EQUAL
12056: AND
12057: IFFALSE 12126
// begin firstTower = 1 ;
12059: LD_ADDR_EXP 19
12063: PUSH
12064: LD_INT 1
12066: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
12067: LD_INT 22
12069: PUSH
12070: LD_INT 1
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 21
12079: PUSH
12080: LD_INT 1
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 69
12106: PUSH
12107: LD_EXP 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: DIFF
12115: PPUSH
12116: LD_STRING D3b-Mech1-1
12118: PPUSH
12119: LD_STRING D3b-Mech1-1
12121: PPUSH
12122: CALL 3582 0 3
// end ; if GetSide ( building ) = 3 then
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 255
12135: PUSH
12136: LD_INT 3
12138: EQUAL
12139: IFFALSE 12213
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12141: LD_ADDR_EXP 26
12145: PUSH
12146: LD_EXP 26
12150: PPUSH
12151: LD_INT 1
12153: PPUSH
12154: CALL_OW 3
12158: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12159: LD_ADDR_EXP 26
12163: PUSH
12164: LD_EXP 26
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 3
12176: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12177: LD_ADDR_EXP 26
12181: PUSH
12182: LD_EXP 26
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 3
12194: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12195: LD_ADDR_EXP 26
12199: PUSH
12200: LD_EXP 26
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: CALL_OW 3
12212: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
12213: LD_VAR 0 1
12217: PPUSH
12218: CALL_OW 255
12222: PUSH
12223: LD_INT 3
12225: EQUAL
12226: PUSH
12227: LD_VAR 0 1
12231: PPUSH
12232: CALL_OW 266
12236: PUSH
12237: LD_INT 0
12239: EQUAL
12240: PUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 266
12250: PUSH
12251: LD_INT 2
12253: EQUAL
12254: OR
12255: PUSH
12256: LD_VAR 0 1
12260: PPUSH
12261: CALL_OW 266
12265: PUSH
12266: LD_INT 4
12268: EQUAL
12269: OR
12270: PUSH
12271: EMPTY
12272: LIST
12273: AND
12274: IFFALSE 12285
// ComUpgrade ( building ) ;
12276: LD_VAR 0 1
12280: PPUSH
12281: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 255
12294: PUSH
12295: LD_INT 3
12297: EQUAL
12298: PUSH
12299: LD_VAR 0 1
12303: PPUSH
12304: CALL_OW 266
12308: PUSH
12309: LD_INT 32
12311: EQUAL
12312: AND
12313: IFFALSE 12354
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
12315: LD_VAR 0 1
12319: PPUSH
12320: LD_INT 42
12322: PUSH
12323: LD_INT 43
12325: PUSH
12326: LD_INT 44
12328: PUSH
12329: LD_INT 46
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_INT 4
12343: PPUSH
12344: CALL_OW 12
12348: ARRAY
12349: PPUSH
12350: CALL_OW 208
// end ; end ;
12354: PPOPN 1
12356: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
12357: LD_VAR 0 1
12361: PPUSH
12362: CALL_OW 255
12366: PUSH
12367: LD_INT 1
12369: EQUAL
12370: PUSH
12371: LD_VAR 0 1
12375: PPUSH
12376: CALL_OW 247
12380: PUSH
12381: LD_INT 1
12383: EQUAL
12384: AND
12385: IFFALSE 12401
// unitLost = unitLost + 1 ;
12387: LD_ADDR_EXP 25
12391: PUSH
12392: LD_EXP 25
12396: PUSH
12397: LD_INT 1
12399: PLUS
12400: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 255
12410: PUSH
12411: LD_INT 3
12413: EQUAL
12414: PUSH
12415: LD_VAR 0 1
12419: PPUSH
12420: CALL_OW 247
12424: PUSH
12425: LD_INT 3
12427: EQUAL
12428: AND
12429: IFFALSE 13121
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
12431: LD_VAR 0 1
12435: PPUSH
12436: CALL_OW 266
12440: PUSH
12441: LD_INT 31
12443: EQUAL
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 266
12454: PUSH
12455: LD_INT 32
12457: EQUAL
12458: OR
12459: PUSH
12460: LD_VAR 0 1
12464: PPUSH
12465: CALL_OW 266
12469: PUSH
12470: LD_INT 36
12472: EQUAL
12473: OR
12474: PUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 266
12484: PUSH
12485: LD_INT 0
12487: EQUAL
12488: OR
12489: PUSH
12490: LD_VAR 0 1
12494: PPUSH
12495: CALL_OW 266
12499: PUSH
12500: LD_INT 24
12502: EQUAL
12503: OR
12504: PUSH
12505: LD_VAR 0 1
12509: PPUSH
12510: CALL_OW 266
12514: PUSH
12515: LD_INT 17
12517: EQUAL
12518: OR
12519: PUSH
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 266
12529: PUSH
12530: LD_INT 25
12532: EQUAL
12533: OR
12534: PUSH
12535: LD_VAR 0 1
12539: PPUSH
12540: CALL_OW 266
12544: PUSH
12545: LD_INT 19
12547: EQUAL
12548: OR
12549: PUSH
12550: LD_VAR 0 1
12554: PPUSH
12555: CALL_OW 266
12559: PUSH
12560: LD_INT 20
12562: EQUAL
12563: OR
12564: PUSH
12565: LD_VAR 0 1
12569: PPUSH
12570: CALL_OW 266
12574: PUSH
12575: LD_INT 18
12577: EQUAL
12578: OR
12579: PUSH
12580: LD_VAR 0 1
12584: PPUSH
12585: CALL_OW 266
12589: PUSH
12590: LD_INT 21
12592: EQUAL
12593: OR
12594: PUSH
12595: LD_VAR 0 1
12599: PPUSH
12600: CALL_OW 266
12604: PUSH
12605: LD_INT 23
12607: EQUAL
12608: OR
12609: PUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 266
12619: PUSH
12620: LD_INT 16
12622: EQUAL
12623: OR
12624: PUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 266
12634: PUSH
12635: LD_INT 6
12637: EQUAL
12638: OR
12639: PUSH
12640: LD_VAR 0 1
12644: PPUSH
12645: CALL_OW 266
12649: PUSH
12650: LD_INT 29
12652: EQUAL
12653: OR
12654: PUSH
12655: LD_VAR 0 1
12659: PPUSH
12660: CALL_OW 266
12664: PUSH
12665: LD_INT 26
12667: EQUAL
12668: OR
12669: PUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: CALL_OW 266
12679: PUSH
12680: LD_INT 30
12682: EQUAL
12683: OR
12684: PUSH
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 266
12694: PUSH
12695: LD_INT 28
12697: EQUAL
12698: OR
12699: PUSH
12700: LD_VAR 0 1
12704: PPUSH
12705: CALL_OW 266
12709: PUSH
12710: LD_INT 27
12712: EQUAL
12713: OR
12714: PUSH
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 266
12724: PUSH
12725: LD_INT 33
12727: EQUAL
12728: OR
12729: PUSH
12730: LD_VAR 0 1
12734: PPUSH
12735: CALL_OW 266
12739: PUSH
12740: LD_INT 2
12742: EQUAL
12743: OR
12744: PUSH
12745: LD_VAR 0 1
12749: PPUSH
12750: CALL_OW 266
12754: PUSH
12755: LD_INT 4
12757: EQUAL
12758: OR
12759: IFFALSE 12845
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
12761: LD_ADDR_EXP 26
12765: PUSH
12766: LD_EXP 26
12770: PUSH
12771: LD_VAR 0 1
12775: PPUSH
12776: CALL_OW 266
12780: ADD
12781: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
12782: LD_ADDR_EXP 26
12786: PUSH
12787: LD_EXP 26
12791: PUSH
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 250
12801: ADD
12802: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
12803: LD_ADDR_EXP 26
12807: PUSH
12808: LD_EXP 26
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 251
12822: ADD
12823: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
12824: LD_ADDR_EXP 26
12828: PUSH
12829: LD_EXP 26
12833: PUSH
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 254
12843: ADD
12844: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 266
12854: PUSH
12855: LD_INT 1
12857: EQUAL
12858: IFFALSE 12937
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
12860: LD_ADDR_EXP 26
12864: PUSH
12865: LD_EXP 26
12869: PUSH
12870: LD_INT 0
12872: ADD
12873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
12874: LD_ADDR_EXP 26
12878: PUSH
12879: LD_EXP 26
12883: PUSH
12884: LD_VAR 0 1
12888: PPUSH
12889: CALL_OW 250
12893: ADD
12894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
12895: LD_ADDR_EXP 26
12899: PUSH
12900: LD_EXP 26
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 251
12914: ADD
12915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
12916: LD_ADDR_EXP 26
12920: PUSH
12921: LD_EXP 26
12925: PUSH
12926: LD_VAR 0 1
12930: PPUSH
12931: CALL_OW 254
12935: ADD
12936: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
12937: LD_VAR 0 1
12941: PPUSH
12942: CALL_OW 266
12946: PUSH
12947: LD_INT 3
12949: EQUAL
12950: IFFALSE 13029
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
12952: LD_ADDR_EXP 26
12956: PUSH
12957: LD_EXP 26
12961: PUSH
12962: LD_INT 2
12964: ADD
12965: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
12966: LD_ADDR_EXP 26
12970: PUSH
12971: LD_EXP 26
12975: PUSH
12976: LD_VAR 0 1
12980: PPUSH
12981: CALL_OW 250
12985: ADD
12986: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
12987: LD_ADDR_EXP 26
12991: PUSH
12992: LD_EXP 26
12996: PUSH
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 251
13006: ADD
13007: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13008: LD_ADDR_EXP 26
13012: PUSH
13013: LD_EXP 26
13017: PUSH
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 254
13027: ADD
13028: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
13029: LD_VAR 0 1
13033: PPUSH
13034: CALL_OW 266
13038: PUSH
13039: LD_INT 5
13041: EQUAL
13042: IFFALSE 13121
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
13044: LD_ADDR_EXP 26
13048: PUSH
13049: LD_EXP 26
13053: PUSH
13054: LD_INT 4
13056: ADD
13057: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13058: LD_ADDR_EXP 26
13062: PUSH
13063: LD_EXP 26
13067: PUSH
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 250
13077: ADD
13078: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13079: LD_ADDR_EXP 26
13083: PUSH
13084: LD_EXP 26
13088: PUSH
13089: LD_VAR 0 1
13093: PPUSH
13094: CALL_OW 251
13098: ADD
13099: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13100: LD_ADDR_EXP 26
13104: PUSH
13105: LD_EXP 26
13109: PUSH
13110: LD_VAR 0 1
13114: PPUSH
13115: CALL_OW 254
13119: ADD
13120: ST_TO_ADDR
// end ; end ; end ;
13121: PPOPN 1
13123: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
13124: LD_INT 0
13126: PPUSH
13127: PPUSH
13128: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
13129: LD_VAR 0 1
13133: PPUSH
13134: CALL_OW 264
13138: PUSH
13139: LD_INT 51
13141: EQUAL
13142: PUSH
13143: LD_VAR 0 1
13147: PPUSH
13148: CALL_OW 255
13152: PUSH
13153: LD_INT 3
13155: EQUAL
13156: AND
13157: IFFALSE 13219
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
13159: LD_ADDR_VAR 0 5
13163: PUSH
13164: LD_INT 2
13166: PPUSH
13167: CALL_OW 274
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 275
13179: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
13180: LD_INT 2
13182: PPUSH
13183: CALL_OW 274
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_VAR 0 5
13195: PUSH
13196: LD_INT 100
13198: MINUS
13199: PPUSH
13200: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
13204: LD_VAR 0 1
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: LD_INT 100
13214: PPUSH
13215: CALL_OW 291
// end ; if building = rufabsupp then
13219: LD_VAR 0 2
13223: PUSH
13224: LD_INT 17
13226: EQUAL
13227: IFFALSE 13241
// SetSide ( vehicle , 6 ) ;
13229: LD_VAR 0 1
13233: PPUSH
13234: LD_INT 6
13236: PPUSH
13237: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
13241: LD_VAR 0 2
13245: PPUSH
13246: CALL_OW 255
13250: PUSH
13251: LD_INT 3
13253: EQUAL
13254: PUSH
13255: LD_VAR 0 2
13259: PPUSH
13260: CALL_OW 302
13264: AND
13265: IFFALSE 13335
// begin uc_side = 3 ;
13267: LD_ADDR_OWVAR 20
13271: PUSH
13272: LD_INT 3
13274: ST_TO_ADDR
// uc_nation = 3 ;
13275: LD_ADDR_OWVAR 21
13279: PUSH
13280: LD_INT 3
13282: ST_TO_ADDR
// hc_gallery :=  ;
13283: LD_ADDR_OWVAR 33
13287: PUSH
13288: LD_STRING 
13290: ST_TO_ADDR
// hc_name :=  ;
13291: LD_ADDR_OWVAR 26
13295: PUSH
13296: LD_STRING 
13298: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
13299: LD_INT 0
13301: PPUSH
13302: LD_EXP 29
13306: PPUSH
13307: LD_EXP 30
13311: PPUSH
13312: CALL_OW 12
13316: PPUSH
13317: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
13321: CALL_OW 44
13325: PPUSH
13326: LD_VAR 0 2
13330: PPUSH
13331: CALL_OW 52
// end ; end ;
13335: PPOPN 5
13337: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
13338: LD_VAR 0 1
13342: PPUSH
13343: CALL_OW 255
13347: PUSH
13348: LD_INT 3
13350: EQUAL
13351: IFFALSE 13367
// tamedApemans = tamedApemans + 1 ;
13353: LD_ADDR_EXP 27
13357: PUSH
13358: LD_EXP 27
13362: PUSH
13363: LD_INT 1
13365: PLUS
13366: ST_TO_ADDR
// end ; end_of_file
13367: PPOPN 2
13369: END
// every 0 0$30 trigger cratesStatus = 1 do
13370: LD_EXP 31
13374: PUSH
13375: LD_INT 1
13377: EQUAL
13378: IFFALSE 13442
13380: GO 13382
13382: DISABLE
// begin enable ;
13383: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
13384: LD_INT 350
13386: PUSH
13387: LD_INT 1050
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_INT 2
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: PPUSH
13406: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
13410: LD_INT 4
13412: PUSH
13413: LD_INT 5
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 1
13422: PPUSH
13423: LD_INT 2
13425: PPUSH
13426: CALL_OW 12
13430: ARRAY
13431: PPUSH
13432: LD_INT 7
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 55
// end ;
13442: END
// every 1 1$0 trigger cratesStatus = 2 do
13443: LD_EXP 31
13447: PUSH
13448: LD_INT 2
13450: EQUAL
13451: IFFALSE 13515
13453: GO 13455
13455: DISABLE
// begin enable ;
13456: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
13457: LD_INT 3150
13459: PUSH
13460: LD_INT 4550
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 1
13469: PPUSH
13470: LD_INT 2
13472: PPUSH
13473: CALL_OW 12
13477: ARRAY
13478: PPUSH
13479: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
13483: LD_INT 2
13485: PUSH
13486: LD_INT 5
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 1
13495: PPUSH
13496: LD_INT 2
13498: PPUSH
13499: CALL_OW 12
13503: ARRAY
13504: PPUSH
13505: LD_INT 8
13507: PPUSH
13508: LD_INT 1
13510: PPUSH
13511: CALL_OW 55
// end ; end_of_file
13515: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
13516: LD_EXP 20
13520: PUSH
13521: LD_INT 1
13523: EQUAL
13524: IFFALSE 13825
13526: GO 13528
13528: DISABLE
13529: LD_INT 0
13531: PPUSH
13532: PPUSH
13533: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_INT 22
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 21
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 2
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 30
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: ST_TO_ADDR
// for i in tmp do
13597: LD_ADDR_VAR 0 1
13601: PUSH
13602: LD_VAR 0 2
13606: PUSH
13607: FOR_IN
13608: IFFALSE 13641
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
13610: LD_ADDR_VAR 0 3
13614: PUSH
13615: LD_VAR 0 3
13619: PUSH
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 274
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 275
13637: PLUS
13638: ST_TO_ADDR
13639: GO 13607
13641: POP
13642: POP
// strings = [ ] ;
13643: LD_ADDR_EXP 23
13647: PUSH
13648: EMPTY
13649: ST_TO_ADDR
// if tmp = 0 then
13650: LD_VAR 0 2
13654: PUSH
13655: LD_INT 0
13657: EQUAL
13658: IFFALSE 13683
// strings = strings ^ [ #Am06-1 , needCrates ] ;
13660: LD_ADDR_EXP 23
13664: PUSH
13665: LD_EXP 23
13669: PUSH
13670: LD_STRING #Am06-1
13672: PUSH
13673: LD_EXP 21
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: ADD
13682: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
13683: LD_VAR 0 2
13687: PUSH
13688: LD_INT 0
13690: GREATER
13691: PUSH
13692: LD_EXP 21
13696: PUSH
13697: LD_VAR 0 3
13701: GREATER
13702: AND
13703: IFFALSE 13734
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
13705: LD_ADDR_EXP 23
13709: PUSH
13710: LD_EXP 23
13714: PUSH
13715: LD_STRING #Am06-1
13717: PUSH
13718: LD_EXP 21
13722: PUSH
13723: LD_VAR 0 3
13727: MINUS
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: ADD
13733: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
13734: LD_VAR 0 2
13738: PUSH
13739: LD_INT 0
13741: GREATER
13742: PUSH
13743: LD_EXP 21
13747: PUSH
13748: LD_VAR 0 3
13752: LESSEQUAL
13753: AND
13754: IFFALSE 13777
// strings = strings ^ [ #Am06-1 , 0 ] ;
13756: LD_ADDR_EXP 23
13760: PUSH
13761: LD_EXP 23
13765: PUSH
13766: LD_STRING #Am06-1
13768: PUSH
13769: LD_INT 0
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: ADD
13776: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
13777: LD_ADDR_EXP 22
13781: PUSH
13782: LD_EXP 22
13786: PUSH
13787: LD_INT 35
13789: MINUS
13790: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
13791: LD_ADDR_EXP 23
13795: PUSH
13796: LD_EXP 23
13800: PUSH
13801: LD_STRING #Am06-2
13803: PUSH
13804: LD_EXP 22
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: ADD
13813: ST_TO_ADDR
// display_strings = strings ;
13814: LD_ADDR_OWVAR 47
13818: PUSH
13819: LD_EXP 23
13823: ST_TO_ADDR
// enable ;
13824: ENABLE
// end ; end_of_file
13825: PPOPN 3
13827: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
13828: LD_INT 0
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
13835: LD_ADDR_VAR 0 2
13839: PUSH
13840: LD_INT 22
13842: PUSH
13843: LD_INT 1
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 21
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 69
13868: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_INT 1
13876: PPUSH
13877: LD_VAR 0 2
13881: PPUSH
13882: CALL_OW 12
13886: ST_TO_ADDR
// uc_side = 2 ;
13887: LD_ADDR_OWVAR 20
13891: PUSH
13892: LD_INT 2
13894: ST_TO_ADDR
// uc_nation = 2 ;
13895: LD_ADDR_OWVAR 21
13899: PUSH
13900: LD_INT 2
13902: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
13903: LD_ADDR_EXP 15
13907: PUSH
13908: LD_STRING Kurt
13910: PPUSH
13911: LD_INT 0
13913: PPUSH
13914: CALL 3525 0 2
13918: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
13919: LD_EXP 15
13923: PPUSH
13924: LD_VAR 0 2
13928: PUSH
13929: LD_VAR 0 3
13933: ARRAY
13934: PPUSH
13935: CALL_OW 250
13939: PPUSH
13940: LD_VAR 0 2
13944: PUSH
13945: LD_VAR 0 3
13949: ARRAY
13950: PPUSH
13951: CALL_OW 251
13955: PPUSH
13956: LD_INT 2
13958: PPUSH
13959: LD_INT 1
13961: PPUSH
13962: CALL_OW 50
// InGameOn ;
13966: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
13970: LD_EXP 15
13974: PPUSH
13975: CALL_OW 87
// wait ( 0 0$2 ) ;
13979: LD_INT 70
13981: PPUSH
13982: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
13986: LD_VAR 0 2
13990: PUSH
13991: LD_VAR 0 3
13995: ARRAY
13996: PPUSH
13997: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
14001: LD_VAR 0 2
14005: PUSH
14006: LD_VAR 0 3
14010: ARRAY
14011: PPUSH
14012: CALL_OW 122
// wait ( 0 0$1 ) ;
14016: LD_INT 35
14018: PPUSH
14019: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
14023: LD_EXP 15
14027: PPUSH
14028: LD_VAR 0 2
14032: PUSH
14033: LD_VAR 0 3
14037: ARRAY
14038: PPUSH
14039: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
14043: LD_VAR 0 2
14047: PUSH
14048: LD_VAR 0 3
14052: ARRAY
14053: PPUSH
14054: LD_EXP 15
14058: PPUSH
14059: CALL_OW 119
// DialogueOn ;
14063: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
14067: LD_EXP 15
14071: PPUSH
14072: LD_STRING D2-Kurt-1
14074: PPUSH
14075: CALL_OW 88
// if tmp [ rnd ] = JMM then
14079: LD_VAR 0 2
14083: PUSH
14084: LD_VAR 0 3
14088: ARRAY
14089: PUSH
14090: LD_EXP 1
14094: EQUAL
14095: IFFALSE 14187
// begin Say ( JMM , D2-JMM-1 ) ;
14097: LD_EXP 1
14101: PPUSH
14102: LD_STRING D2-JMM-1
14104: PPUSH
14105: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
14109: LD_EXP 15
14113: PPUSH
14114: LD_STRING D2-Kurt-2
14116: PPUSH
14117: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
14121: LD_EXP 1
14125: PPUSH
14126: LD_STRING D2-JMM-2
14128: PPUSH
14129: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
14133: LD_EXP 15
14137: PPUSH
14138: LD_STRING D2-Kurt-3
14140: PPUSH
14141: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
14145: LD_EXP 1
14149: PPUSH
14150: LD_STRING D2-JMM-3
14152: PPUSH
14153: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
14157: LD_EXP 15
14161: PPUSH
14162: LD_STRING D2-Kurt-4
14164: PPUSH
14165: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
14169: LD_EXP 1
14173: PPUSH
14174: LD_STRING D2-JMM-4
14176: PPUSH
14177: CALL_OW 88
// DialogueOff ;
14181: CALL_OW 7
// end else
14185: GO 14617
// begin if GetSex ( tmp [ rnd ] ) = 1 then
14187: LD_VAR 0 2
14191: PUSH
14192: LD_VAR 0 3
14196: ARRAY
14197: PPUSH
14198: CALL_OW 258
14202: PUSH
14203: LD_INT 1
14205: EQUAL
14206: IFFALSE 14226
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
14208: LD_VAR 0 2
14212: PUSH
14213: LD_VAR 0 3
14217: ARRAY
14218: PPUSH
14219: LD_STRING D2-Sol1-1
14221: PPUSH
14222: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14226: LD_VAR 0 2
14230: PUSH
14231: LD_VAR 0 3
14235: ARRAY
14236: PPUSH
14237: CALL_OW 258
14241: PUSH
14242: LD_INT 2
14244: EQUAL
14245: IFFALSE 14265
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
14247: LD_VAR 0 2
14251: PUSH
14252: LD_VAR 0 3
14256: ARRAY
14257: PPUSH
14258: LD_STRING D2-FSol1-1
14260: PPUSH
14261: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
14265: LD_EXP 15
14269: PPUSH
14270: LD_STRING D2-Kurt-2
14272: PPUSH
14273: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14277: LD_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: ARRAY
14287: PPUSH
14288: CALL_OW 258
14292: PUSH
14293: LD_INT 1
14295: EQUAL
14296: IFFALSE 14316
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
14298: LD_VAR 0 2
14302: PUSH
14303: LD_VAR 0 3
14307: ARRAY
14308: PPUSH
14309: LD_STRING D2-Sol1-2
14311: PPUSH
14312: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14316: LD_VAR 0 2
14320: PUSH
14321: LD_VAR 0 3
14325: ARRAY
14326: PPUSH
14327: CALL_OW 258
14331: PUSH
14332: LD_INT 2
14334: EQUAL
14335: IFFALSE 14355
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
14337: LD_VAR 0 2
14341: PUSH
14342: LD_VAR 0 3
14346: ARRAY
14347: PPUSH
14348: LD_STRING D2-FSol1-2
14350: PPUSH
14351: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
14355: LD_EXP 15
14359: PPUSH
14360: LD_STRING D2-Kurt-3
14362: PPUSH
14363: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14367: LD_VAR 0 2
14371: PUSH
14372: LD_VAR 0 3
14376: ARRAY
14377: PPUSH
14378: CALL_OW 258
14382: PUSH
14383: LD_INT 1
14385: EQUAL
14386: IFFALSE 14406
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
14388: LD_VAR 0 2
14392: PUSH
14393: LD_VAR 0 3
14397: ARRAY
14398: PPUSH
14399: LD_STRING D2-Sol1-3
14401: PPUSH
14402: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14406: LD_VAR 0 2
14410: PUSH
14411: LD_VAR 0 3
14415: ARRAY
14416: PPUSH
14417: CALL_OW 258
14421: PUSH
14422: LD_INT 2
14424: EQUAL
14425: IFFALSE 14445
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
14427: LD_VAR 0 2
14431: PUSH
14432: LD_VAR 0 3
14436: ARRAY
14437: PPUSH
14438: LD_STRING D2-FSol1-3
14440: PPUSH
14441: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
14445: LD_EXP 15
14449: PPUSH
14450: LD_STRING D2-Kurt-4
14452: PPUSH
14453: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14457: LD_VAR 0 2
14461: PUSH
14462: LD_VAR 0 3
14466: ARRAY
14467: PPUSH
14468: CALL_OW 258
14472: PUSH
14473: LD_INT 1
14475: EQUAL
14476: IFFALSE 14496
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
14478: LD_VAR 0 2
14482: PUSH
14483: LD_VAR 0 3
14487: ARRAY
14488: PPUSH
14489: LD_STRING D2-Sol1-4
14491: PPUSH
14492: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14496: LD_VAR 0 2
14500: PUSH
14501: LD_VAR 0 3
14505: ARRAY
14506: PPUSH
14507: CALL_OW 258
14511: PUSH
14512: LD_INT 2
14514: EQUAL
14515: IFFALSE 14535
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
14517: LD_VAR 0 2
14521: PUSH
14522: LD_VAR 0 3
14526: ARRAY
14527: PPUSH
14528: LD_STRING D2-FSol1-4
14530: PPUSH
14531: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14535: LD_VAR 0 2
14539: PUSH
14540: LD_VAR 0 3
14544: ARRAY
14545: PPUSH
14546: CALL_OW 258
14550: PUSH
14551: LD_INT 1
14553: EQUAL
14554: IFFALSE 14574
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
14556: LD_VAR 0 2
14560: PUSH
14561: LD_VAR 0 3
14565: ARRAY
14566: PPUSH
14567: LD_STRING D2-Sol1-5
14569: PPUSH
14570: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14574: LD_VAR 0 2
14578: PUSH
14579: LD_VAR 0 3
14583: ARRAY
14584: PPUSH
14585: CALL_OW 258
14589: PUSH
14590: LD_INT 2
14592: EQUAL
14593: IFFALSE 14613
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
14595: LD_VAR 0 2
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PPUSH
14606: LD_STRING D2-FSol1-5
14608: PPUSH
14609: CALL_OW 88
// DialogueOff ;
14613: CALL_OW 7
// end ; dec = ShowQuery1 ;
14617: LD_ADDR_VAR 0 4
14621: PUSH
14622: CALL 4070 0 0
14626: ST_TO_ADDR
// if dec = 1 then
14627: LD_VAR 0 4
14631: PUSH
14632: LD_INT 1
14634: EQUAL
14635: IFFALSE 14677
// begin DialogueOn ;
14637: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
14641: LD_EXP 15
14645: PPUSH
14646: LD_STRING D2a-Kurt-1
14648: PPUSH
14649: CALL_OW 88
// DialogueOff ;
14653: CALL_OW 7
// InGameOff ;
14657: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
14661: LD_INT 1
14663: PPUSH
14664: LD_INT 2
14666: PPUSH
14667: LD_INT 2
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: CALL_OW 80
// end ; if dec = 2 then
14677: LD_VAR 0 4
14681: PUSH
14682: LD_INT 2
14684: EQUAL
14685: IFFALSE 15281
// begin DialogueOn ;
14687: CALL_OW 6
// if tmp [ rnd ] = JMM then
14691: LD_VAR 0 2
14695: PUSH
14696: LD_VAR 0 3
14700: ARRAY
14701: PUSH
14702: LD_EXP 1
14706: EQUAL
14707: IFFALSE 14763
// begin Say ( JMM , D2b-JMM-1 ) ;
14709: LD_EXP 1
14713: PPUSH
14714: LD_STRING D2b-JMM-1
14716: PPUSH
14717: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
14721: LD_EXP 15
14725: PPUSH
14726: LD_STRING D2b-Kurt-1
14728: PPUSH
14729: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
14733: LD_EXP 1
14737: PPUSH
14738: LD_STRING D2b-JMM-2
14740: PPUSH
14741: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
14745: LD_EXP 15
14749: PPUSH
14750: LD_STRING D2b-Kurt-2
14752: PPUSH
14753: CALL_OW 88
// DialogueOff ;
14757: CALL_OW 7
// end else
14761: GO 15025
// begin if GetSex ( tmp [ rnd ] ) = 1 then
14763: LD_VAR 0 2
14767: PUSH
14768: LD_VAR 0 3
14772: ARRAY
14773: PPUSH
14774: CALL_OW 258
14778: PUSH
14779: LD_INT 1
14781: EQUAL
14782: IFFALSE 14802
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
14784: LD_VAR 0 2
14788: PUSH
14789: LD_VAR 0 3
14793: ARRAY
14794: PPUSH
14795: LD_STRING D2b-Sol1-1
14797: PPUSH
14798: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14802: LD_VAR 0 2
14806: PUSH
14807: LD_VAR 0 3
14811: ARRAY
14812: PPUSH
14813: CALL_OW 258
14817: PUSH
14818: LD_INT 2
14820: EQUAL
14821: IFFALSE 14841
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
14823: LD_VAR 0 2
14827: PUSH
14828: LD_VAR 0 3
14832: ARRAY
14833: PPUSH
14834: LD_STRING D2b-FSol1-1
14836: PPUSH
14837: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
14841: LD_EXP 15
14845: PPUSH
14846: LD_STRING D2b-Kurt-1
14848: PPUSH
14849: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14853: LD_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: ARRAY
14863: PPUSH
14864: CALL_OW 258
14868: PUSH
14869: LD_INT 1
14871: EQUAL
14872: IFFALSE 14892
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
14874: LD_VAR 0 2
14878: PUSH
14879: LD_VAR 0 3
14883: ARRAY
14884: PPUSH
14885: LD_STRING D2b-Sol1-2
14887: PPUSH
14888: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14892: LD_VAR 0 2
14896: PUSH
14897: LD_VAR 0 3
14901: ARRAY
14902: PPUSH
14903: CALL_OW 258
14907: PUSH
14908: LD_INT 2
14910: EQUAL
14911: IFFALSE 14931
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
14913: LD_VAR 0 2
14917: PUSH
14918: LD_VAR 0 3
14922: ARRAY
14923: PPUSH
14924: LD_STRING D2b-FSol1-2
14926: PPUSH
14927: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
14931: LD_EXP 15
14935: PPUSH
14936: LD_STRING D2b-Kurt-2
14938: PPUSH
14939: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14943: LD_VAR 0 2
14947: PUSH
14948: LD_VAR 0 3
14952: ARRAY
14953: PPUSH
14954: CALL_OW 258
14958: PUSH
14959: LD_INT 1
14961: EQUAL
14962: IFFALSE 14982
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
14964: LD_VAR 0 2
14968: PUSH
14969: LD_VAR 0 3
14973: ARRAY
14974: PPUSH
14975: LD_STRING D2c-Sol1-2
14977: PPUSH
14978: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14982: LD_VAR 0 2
14986: PUSH
14987: LD_VAR 0 3
14991: ARRAY
14992: PPUSH
14993: CALL_OW 258
14997: PUSH
14998: LD_INT 2
15000: EQUAL
15001: IFFALSE 15021
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
15003: LD_VAR 0 2
15007: PUSH
15008: LD_VAR 0 3
15012: ARRAY
15013: PPUSH
15014: LD_STRING D2c-FSol1-2
15016: PPUSH
15017: CALL_OW 88
// DialogueOff ;
15021: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
15025: LD_ADDR_VAR 0 5
15029: PUSH
15030: CALL 4144 0 0
15034: ST_TO_ADDR
// if dec2 = 1 then
15035: LD_VAR 0 5
15039: PUSH
15040: LD_INT 1
15042: EQUAL
15043: IFFALSE 15081
// begin Say ( Kurt , D2a-Kurt-1 ) ;
15045: LD_EXP 15
15049: PPUSH
15050: LD_STRING D2a-Kurt-1
15052: PPUSH
15053: CALL_OW 88
// DialogueOff ;
15057: CALL_OW 7
// InGameOff ;
15061: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
15065: LD_INT 1
15067: PPUSH
15068: LD_INT 2
15070: PPUSH
15071: LD_INT 2
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 80
// end ; if dec2 = 2 then
15081: LD_VAR 0 5
15085: PUSH
15086: LD_INT 2
15088: EQUAL
15089: IFFALSE 15281
// begin if tmp [ rnd ] = JMM then
15091: LD_VAR 0 2
15095: PUSH
15096: LD_VAR 0 3
15100: ARRAY
15101: PUSH
15102: LD_EXP 1
15106: EQUAL
15107: IFFALSE 15163
// begin Say ( JMM , D2c-JMM-1 ) ;
15109: LD_EXP 1
15113: PPUSH
15114: LD_STRING D2c-JMM-1
15116: PPUSH
15117: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15121: LD_EXP 15
15125: PPUSH
15126: LD_STRING D2c-Kurt-1
15128: PPUSH
15129: CALL_OW 88
// DialogueOff ;
15133: CALL_OW 7
// InGameOff ;
15137: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15141: LD_EXP 15
15145: PPUSH
15146: LD_INT 9
15148: PPUSH
15149: CALL_OW 113
// readyToEscape = 1 ;
15153: LD_ADDR_EXP 17
15157: PUSH
15158: LD_INT 1
15160: ST_TO_ADDR
// end else
15161: GO 15281
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15163: LD_VAR 0 2
15167: PUSH
15168: LD_VAR 0 3
15172: ARRAY
15173: PPUSH
15174: CALL_OW 258
15178: PUSH
15179: LD_INT 1
15181: EQUAL
15182: IFFALSE 15202
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
15184: LD_VAR 0 2
15188: PUSH
15189: LD_VAR 0 3
15193: ARRAY
15194: PPUSH
15195: LD_STRING D2c-Sol1-1
15197: PPUSH
15198: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 3
15211: ARRAY
15212: PPUSH
15213: CALL_OW 258
15217: PUSH
15218: LD_INT 2
15220: EQUAL
15221: IFFALSE 15241
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
15223: LD_VAR 0 2
15227: PUSH
15228: LD_VAR 0 3
15232: ARRAY
15233: PPUSH
15234: LD_STRING D2c-FSol1-1
15236: PPUSH
15237: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15241: LD_EXP 15
15245: PPUSH
15246: LD_STRING D2c-Kurt-1
15248: PPUSH
15249: CALL_OW 88
// DialogueOff ;
15253: CALL_OW 7
// InGameOff ;
15257: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15261: LD_EXP 15
15265: PPUSH
15266: LD_INT 9
15268: PPUSH
15269: CALL_OW 113
// readyToEscape = 1 ;
15273: LD_ADDR_EXP 17
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
15281: LD_VAR 0 4
15285: PUSH
15286: LD_INT 3
15288: EQUAL
15289: IFFALSE 15485
// begin DialogueOn ;
15291: CALL_OW 6
// if tmp [ rnd ] = JMM then
15295: LD_VAR 0 2
15299: PUSH
15300: LD_VAR 0 3
15304: ARRAY
15305: PUSH
15306: LD_EXP 1
15310: EQUAL
15311: IFFALSE 15367
// begin Say ( JMM , D2c-JMM-1 ) ;
15313: LD_EXP 1
15317: PPUSH
15318: LD_STRING D2c-JMM-1
15320: PPUSH
15321: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15325: LD_EXP 15
15329: PPUSH
15330: LD_STRING D2c-Kurt-1
15332: PPUSH
15333: CALL_OW 88
// DialogueOff ;
15337: CALL_OW 7
// InGameOff ;
15341: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15345: LD_EXP 15
15349: PPUSH
15350: LD_INT 9
15352: PPUSH
15353: CALL_OW 113
// readyToEscape = 1 ;
15357: LD_ADDR_EXP 17
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// end else
15365: GO 15485
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15367: LD_VAR 0 2
15371: PUSH
15372: LD_VAR 0 3
15376: ARRAY
15377: PPUSH
15378: CALL_OW 258
15382: PUSH
15383: LD_INT 1
15385: EQUAL
15386: IFFALSE 15406
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
15388: LD_VAR 0 2
15392: PUSH
15393: LD_VAR 0 3
15397: ARRAY
15398: PPUSH
15399: LD_STRING D2c-Sol1-1
15401: PPUSH
15402: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15406: LD_VAR 0 2
15410: PUSH
15411: LD_VAR 0 3
15415: ARRAY
15416: PPUSH
15417: CALL_OW 258
15421: PUSH
15422: LD_INT 2
15424: EQUAL
15425: IFFALSE 15445
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
15427: LD_VAR 0 2
15431: PUSH
15432: LD_VAR 0 3
15436: ARRAY
15437: PPUSH
15438: LD_STRING D2c-FSol1-1
15440: PPUSH
15441: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15445: LD_EXP 15
15449: PPUSH
15450: LD_STRING D2c-Kurt-1
15452: PPUSH
15453: CALL_OW 88
// DialogueOff ;
15457: CALL_OW 7
// InGameOff ;
15461: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15465: LD_EXP 15
15469: PPUSH
15470: LD_INT 9
15472: PPUSH
15473: CALL_OW 113
// readyToEscape = 1 ;
15477: LD_ADDR_EXP 17
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// end ; end ; end ; end_of_file
15485: LD_VAR 0 1
15489: RET
// every 0 0$1 do
15490: GO 15492
15492: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
15493: LD_INT 3
15495: PPUSH
15496: LD_INT 32
15498: PPUSH
15499: LD_INT 3
15501: PPUSH
15502: CALL 4199 0 3
15506: END
// every 0 0$1 do
15507: GO 15509
15509: DISABLE
// begin enable ;
15510: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
15511: LD_INT 3
15513: PPUSH
15514: LD_INT 2
15516: PPUSH
15517: CALL 4284 0 2
// if disableHealAI = 0 then
15521: LD_EXP 28
15525: PUSH
15526: LD_INT 0
15528: EQUAL
15529: IFFALSE 15547
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
15531: LD_INT 3
15533: PPUSH
15534: LD_INT 10
15536: PPUSH
15537: LD_INT 11
15539: PPUSH
15540: LD_INT 32
15542: PPUSH
15543: CALL 4543 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
15547: LD_INT 3
15549: PPUSH
15550: LD_INT 51
15552: PPUSH
15553: LD_INT 7
15555: PPUSH
15556: CALL 5266 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
15560: LD_INT 3
15562: PPUSH
15563: LD_INT 14
15565: PPUSH
15566: LD_INT 121
15568: PPUSH
15569: LD_INT 100
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL 5446 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
15579: LD_INT 3
15581: PPUSH
15582: LD_EXP 26
15586: PPUSH
15587: CALL 6237 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
15591: LD_INT 3
15593: PPUSH
15594: LD_INT 8
15596: PUSH
15597: LD_INT 67
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 1
15606: PPUSH
15607: LD_INT 2
15609: PPUSH
15610: CALL_OW 12
15614: ARRAY
15615: PPUSH
15616: LD_INT 11
15618: PPUSH
15619: CALL 6443 0 3
// end ;
15623: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
15624: LD_INT 22
15626: PUSH
15627: LD_INT 3
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 21
15636: PUSH
15637: LD_INT 2
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: LD_INT 34
15649: PUSH
15650: LD_INT 51
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: PUSH
15671: LD_INT 0
15673: EQUAL
15674: IFFALSE 15808
15676: GO 15678
15678: DISABLE
// begin enable ;
15679: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
15680: LD_INT 3
15682: PPUSH
15683: LD_INT 21
15685: PPUSH
15686: LD_INT 4
15688: PUSH
15689: LD_INT 5
15691: PUSH
15692: LD_INT 5
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: PUSH
15700: LD_OWVAR 67
15704: ARRAY
15705: PPUSH
15706: LD_INT 1
15708: PPUSH
15709: LD_INT 43
15711: PUSH
15712: LD_INT 43
15714: PUSH
15715: LD_INT 43
15717: PUSH
15718: LD_INT 44
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 44
15729: PUSH
15730: LD_INT 44
15732: PUSH
15733: LD_INT 44
15735: PUSH
15736: LD_INT 43
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 44
15747: PUSH
15748: LD_INT 44
15750: PUSH
15751: LD_INT 44
15753: PUSH
15754: LD_INT 44
15756: PUSH
15757: LD_INT 46
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PUSH
15772: LD_OWVAR 67
15776: ARRAY
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: LD_INT 22
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_INT 24
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_OWVAR 67
15802: ARRAY
15803: PPUSH
15804: CALL 4809 0 8
// end ;
15808: END
// every 5 5$0 do
15809: GO 15811
15811: DISABLE
// begin enable ;
15812: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
15813: LD_INT 17
15815: PPUSH
15816: LD_INT 22
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: LD_INT 42
15827: PUSH
15828: LD_INT 43
15830: PUSH
15831: LD_INT 44
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 1
15841: PPUSH
15842: LD_INT 3
15844: PPUSH
15845: CALL_OW 12
15849: ARRAY
15850: PPUSH
15851: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
15855: LD_INT 17
15857: PPUSH
15858: LD_INT 22
15860: PPUSH
15861: LD_INT 1
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: LD_INT 42
15869: PUSH
15870: LD_INT 43
15872: PUSH
15873: LD_INT 44
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 3
15886: PPUSH
15887: CALL_OW 12
15891: ARRAY
15892: PPUSH
15893: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
15897: LD_INT 17
15899: PPUSH
15900: LD_INT 22
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: LD_INT 1
15908: PPUSH
15909: LD_INT 42
15911: PUSH
15912: LD_INT 43
15914: PUSH
15915: LD_INT 44
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 1
15925: PPUSH
15926: LD_INT 3
15928: PPUSH
15929: CALL_OW 12
15933: ARRAY
15934: PPUSH
15935: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
15939: LD_INT 17
15941: PPUSH
15942: LD_INT 22
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: LD_INT 51
15953: PPUSH
15954: CALL_OW 185
// end ;
15958: END
// every 2 2$0 do var i , j ;
15959: GO 15961
15961: DISABLE
15962: LD_INT 0
15964: PPUSH
15965: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
15966: LD_INT 14700
15968: PUSH
15969: LD_INT 33600
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 1
15978: PPUSH
15979: LD_INT 2
15981: PPUSH
15982: CALL_OW 12
15986: ARRAY
15987: PPUSH
15988: CALL_OW 67
// disableHealAI = 1 ;
15992: LD_ADDR_EXP 28
15996: PUSH
15997: LD_INT 1
15999: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16000: LD_ADDR_VAR 0 1
16004: PUSH
16005: LD_INT 22
16007: PUSH
16008: LD_INT 3
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 25
16017: PUSH
16018: LD_INT 4
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 69
16033: PUSH
16034: FOR_IN
16035: IFFALSE 16048
// ComExitBuilding ( i ) ;
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 122
16046: GO 16034
16048: POP
16049: POP
// wait ( 0 0$1 ) ;
16050: LD_INT 35
16052: PPUSH
16053: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16057: LD_INT 35
16059: PPUSH
16060: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16064: LD_ADDR_VAR 0 1
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_INT 3
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 25
16081: PUSH
16082: LD_INT 4
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PPUSH
16093: CALL_OW 69
16097: PUSH
16098: FOR_IN
16099: IFFALSE 16176
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_INT 19
16108: PPUSH
16109: LD_INT 22
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 25
16121: PUSH
16122: LD_INT 12
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PPUSH
16133: CALL_OW 70
16137: PUSH
16138: FOR_IN
16139: IFFALSE 16172
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16141: LD_VAR 0 1
16145: PPUSH
16146: LD_VAR 0 2
16150: PPUSH
16151: CALL_OW 250
16155: PPUSH
16156: LD_VAR 0 2
16160: PPUSH
16161: CALL_OW 251
16165: PPUSH
16166: CALL_OW 191
// end ;
16170: GO 16138
16172: POP
16173: POP
// end ;
16174: GO 16098
16176: POP
16177: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] ;
16178: LD_INT 22
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 25
16190: PUSH
16191: LD_INT 4
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: PUSH
16207: LD_INT 0
16209: EQUAL
16210: PUSH
16211: LD_EXP 27
16215: PUSH
16216: LD_INT 6
16218: PUSH
16219: LD_INT 7
16221: PUSH
16222: LD_INT 8
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: PUSH
16230: LD_OWVAR 67
16234: ARRAY
16235: GREATEREQUAL
16236: OR
16237: IFFALSE 16057
// disableHealAI = 0 ;
16239: LD_ADDR_EXP 28
16243: PUSH
16244: LD_INT 0
16246: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
16247: LD_ADDR_VAR 0 1
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_INT 3
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 25
16264: PUSH
16265: LD_INT 12
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: PUSH
16281: FOR_IN
16282: IFFALSE 16298
// SetClass ( i , 16 ) ;
16284: LD_VAR 0 1
16288: PPUSH
16289: LD_INT 16
16291: PPUSH
16292: CALL_OW 336
16296: GO 16281
16298: POP
16299: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16300: LD_ADDR_VAR 0 1
16304: PUSH
16305: LD_INT 22
16307: PUSH
16308: LD_INT 3
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 25
16317: PUSH
16318: LD_INT 4
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PPUSH
16329: CALL_OW 69
16333: PUSH
16334: FOR_IN
16335: IFFALSE 16354
// ComMoveXY ( i , 113 , 94 ) ;
16337: LD_VAR 0 1
16341: PPUSH
16342: LD_INT 113
16344: PPUSH
16345: LD_INT 94
16347: PPUSH
16348: CALL_OW 111
16352: GO 16334
16354: POP
16355: POP
// end ;
16356: PPOPN 2
16358: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
16359: LD_INT 21
16361: PPUSH
16362: CALL_OW 255
16366: PUSH
16367: LD_INT 3
16369: EQUAL
16370: PUSH
16371: LD_INT 21
16373: PPUSH
16374: CALL_OW 302
16378: AND
16379: PUSH
16380: LD_INT 22
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 51
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PPUSH
16404: CALL_OW 69
16408: PUSH
16409: LD_INT 0
16411: EQUAL
16412: AND
16413: IFFALSE 16445
16415: GO 16417
16417: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
16418: LD_INT 21
16420: PPUSH
16421: LD_INT 23
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: LD_INT 51
16432: PPUSH
16433: CALL_OW 185
// wait ( 5 5$0 ) ;
16437: LD_INT 10500
16439: PPUSH
16440: CALL_OW 67
// enable ;
16444: ENABLE
// end ; end_of_file
16445: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
16446: LD_EXP 22
16450: PUSH
16451: LD_INT 0
16453: LESSEQUAL
16454: IFFALSE 16594
16456: GO 16458
16458: DISABLE
16459: LD_INT 0
16461: PPUSH
16462: PPUSH
16463: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_INT 22
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 21
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: LD_INT 30
16494: PUSH
16495: LD_INT 0
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 30
16504: PUSH
16505: LD_INT 1
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: ST_TO_ADDR
// for i in tmp do
16527: LD_ADDR_VAR 0 1
16531: PUSH
16532: LD_VAR 0 2
16536: PUSH
16537: FOR_IN
16538: IFFALSE 16571
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16540: LD_ADDR_VAR 0 3
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 274
16559: PPUSH
16560: LD_INT 1
16562: PPUSH
16563: CALL_OW 275
16567: PLUS
16568: ST_TO_ADDR
16569: GO 16537
16571: POP
16572: POP
// if yourCrates >= needCrates then
16573: LD_VAR 0 3
16577: PUSH
16578: LD_EXP 21
16582: GREATEREQUAL
16583: IFFALSE 16594
// begin FinishMission ( yourCrates ) ;
16585: LD_VAR 0 3
16589: PPUSH
16590: CALL 16597 0 1
// end ; end ;
16594: PPOPN 3
16596: END
// export function FinishMission ( crates ) ; begin
16597: LD_INT 0
16599: PPUSH
// if crates + 100 > crates then
16600: LD_VAR 0 1
16604: PUSH
16605: LD_INT 100
16607: PLUS
16608: PUSH
16609: LD_VAR 0 1
16613: GREATER
16614: IFFALSE 16638
// begin AddMedal ( cans , 1 ) ;
16616: LD_STRING cans
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
16626: LD_INT 1
16628: PPUSH
16629: LD_STRING 06_crates_1
16631: PPUSH
16632: CALL_OW 39
// end else
16636: GO 16659
// begin AddMedal ( cans , - 1 ) ;
16638: LD_STRING cans
16640: PPUSH
16641: LD_INT 1
16643: NEG
16644: PPUSH
16645: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
16649: LD_INT 0
16651: PPUSH
16652: LD_STRING 06_crates_1
16654: PPUSH
16655: CALL_OW 39
// end ; if unitLost > 2 then
16659: LD_EXP 25
16663: PUSH
16664: LD_INT 2
16666: GREATER
16667: IFFALSE 16681
// begin AddMedal ( people , 1 ) ;
16669: LD_STRING people
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 101
// end else
16679: GO 16692
// begin AddMedal ( people , - 1 ) ;
16681: LD_STRING people
16683: PPUSH
16684: LD_INT 1
16686: NEG
16687: PPUSH
16688: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
16692: LD_EXP 24
16696: PPUSH
16697: LD_STRING 06_remoteVehs_1
16699: PPUSH
16700: CALL_OW 39
// if remoteVehiclesBuild = 1 then
16704: LD_EXP 24
16708: PUSH
16709: LD_INT 1
16711: EQUAL
16712: IFFALSE 16726
// begin AddMedal ( remote , 1 ) ;
16714: LD_STRING remote
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 101
// end else
16724: GO 16766
// begin if GetTech ( 18 , 1 ) = state_enabled then
16726: LD_INT 18
16728: PPUSH
16729: LD_INT 1
16731: PPUSH
16732: CALL_OW 321
16736: PUSH
16737: LD_INT 1
16739: EQUAL
16740: IFFALSE 16755
// begin AddMedal ( remote , - 1 ) ;
16742: LD_STRING remote
16744: PPUSH
16745: LD_INT 1
16747: NEG
16748: PPUSH
16749: CALL_OW 101
// end else
16753: GO 16766
// begin AddMedal ( remote , - 2 ) ;
16755: LD_STRING remote
16757: PPUSH
16758: LD_INT 2
16760: NEG
16761: PPUSH
16762: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
16766: LD_EXP 16
16770: PPUSH
16771: LD_STRING 06_KurtStatus_1
16773: PPUSH
16774: CALL_OW 39
// GiveMedals ( Main ) ;
16778: LD_STRING Main
16780: PPUSH
16781: CALL_OW 102
// RewardPeople ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
16785: LD_INT 22
16787: PUSH
16788: LD_INT 1
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 21
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PPUSH
16809: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
16813: LD_EXP 1
16817: PPUSH
16818: LD_STRING JMM
16820: PPUSH
16821: CALL_OW 38
// if IsOK ( Lisa ) then
16825: LD_EXP 5
16829: PPUSH
16830: CALL_OW 302
16834: IFFALSE 16848
// SaveCharacters ( Lisa , Lisa ) ;
16836: LD_EXP 5
16840: PPUSH
16841: LD_STRING Lisa
16843: PPUSH
16844: CALL_OW 38
// if IsOK ( Brown ) then
16848: LD_EXP 6
16852: PPUSH
16853: CALL_OW 302
16857: IFFALSE 16871
// SaveCharacters ( Brown , Brown ) ;
16859: LD_EXP 6
16863: PPUSH
16864: LD_STRING Brown
16866: PPUSH
16867: CALL_OW 38
// if IsOK ( Frank ) then
16871: LD_EXP 3
16875: PPUSH
16876: CALL_OW 302
16880: IFFALSE 16894
// SaveCharacters ( Frank , Frank ) ;
16882: LD_EXP 3
16886: PPUSH
16887: LD_STRING Frank
16889: PPUSH
16890: CALL_OW 38
// if IsOK ( Denis ) then
16894: LD_EXP 7
16898: PPUSH
16899: CALL_OW 302
16903: IFFALSE 16917
// SaveCharacters ( Denis , Denis ) ;
16905: LD_EXP 7
16909: PPUSH
16910: LD_STRING Denis
16912: PPUSH
16913: CALL_OW 38
// if IsOK ( Joan ) then
16917: LD_EXP 11
16921: PPUSH
16922: CALL_OW 302
16926: IFFALSE 16940
// SaveCharacters ( Joan , Joan ) ;
16928: LD_EXP 11
16932: PPUSH
16933: LD_STRING Joan
16935: PPUSH
16936: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
16940: LD_EXP 12
16944: PPUSH
16945: LD_STRING 06_JoanStatus_1
16947: PPUSH
16948: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Brown , Frank , Denis , Joan ] , 06_other_survivors ) ;
16952: LD_INT 50
16954: PUSH
16955: EMPTY
16956: LIST
16957: PUSH
16958: LD_INT 22
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 21
16970: PUSH
16971: LD_INT 1
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 69
16987: PUSH
16988: LD_EXP 1
16992: PUSH
16993: LD_EXP 5
16997: PUSH
16998: LD_EXP 6
17002: PUSH
17003: LD_EXP 3
17007: PUSH
17008: LD_EXP 7
17012: PUSH
17013: LD_EXP 11
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: DIFF
17026: PPUSH
17027: LD_STRING 06_other_survivors
17029: PPUSH
17030: CALL_OW 38
// YouWin ;
17034: CALL_OW 103
// end ; end_of_file
17038: LD_VAR 0 2
17042: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
17043: LD_EXP 32
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: LD_INT 3
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: LD_OWVAR 67
17066: ARRAY
17067: EQUAL
17068: IFFALSE 17183
17070: GO 17072
17072: DISABLE
// begin enable ;
17073: ENABLE
// sendedConvoys = 0 ;
17074: LD_ADDR_EXP 32
17078: PUSH
17079: LD_INT 0
17081: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
17082: LD_INT 6
17084: PPUSH
17085: LD_INT 3
17087: PPUSH
17088: LD_INT 3
17090: PPUSH
17091: LD_INT 4
17093: PPUSH
17094: CALL_OW 12
17098: PUSH
17099: LD_INT 4
17101: PPUSH
17102: LD_INT 5
17104: PPUSH
17105: CALL_OW 12
17109: PUSH
17110: LD_INT 6
17112: PPUSH
17113: LD_INT 7
17115: PPUSH
17116: CALL_OW 12
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: LD_OWVAR 67
17130: ARRAY
17131: PPUSH
17132: LD_INT 0
17134: PPUSH
17135: LD_INT 0
17137: PPUSH
17138: LD_INT 0
17140: PPUSH
17141: LD_INT 3
17143: PPUSH
17144: LD_EXP 29
17148: PPUSH
17149: LD_EXP 30
17153: PPUSH
17154: CALL_OW 12
17158: PPUSH
17159: LD_INT 18
17161: PPUSH
17162: LD_INT 17
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: LD_INT 1
17170: PPUSH
17171: LD_INT 2
17173: PPUSH
17174: CALL_OW 12
17178: PPUSH
17179: CALL 6800 0 12
// end ; end_of_file
17183: END
// export function PrepareNature ; var i , un ; begin
17184: LD_INT 0
17186: PPUSH
17187: PPUSH
17188: PPUSH
// for i = 1 to Difficulty + 2 do
17189: LD_ADDR_VAR 0 2
17193: PUSH
17194: DOUBLE
17195: LD_INT 1
17197: DEC
17198: ST_TO_ADDR
17199: LD_OWVAR 67
17203: PUSH
17204: LD_INT 2
17206: PLUS
17207: PUSH
17208: FOR_TO
17209: IFFALSE 17344
// begin hc_sex = sex_male ;
17211: LD_ADDR_OWVAR 27
17215: PUSH
17216: LD_INT 1
17218: ST_TO_ADDR
// uc_side = 0 ;
17219: LD_ADDR_OWVAR 20
17223: PUSH
17224: LD_INT 0
17226: ST_TO_ADDR
// uc_nation = nation_nature ;
17227: LD_ADDR_OWVAR 21
17231: PUSH
17232: LD_INT 0
17234: ST_TO_ADDR
// hc_class = class_tiger ;
17235: LD_ADDR_OWVAR 28
17239: PUSH
17240: LD_INT 14
17242: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17243: LD_ADDR_OWVAR 31
17247: PUSH
17248: LD_EXP 30
17252: PUSH
17253: LD_INT 0
17255: PUSH
17256: LD_INT 0
17258: PUSH
17259: LD_INT 0
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
17268: LD_ADDR_OWVAR 35
17272: PUSH
17273: LD_INT 30
17275: PPUSH
17276: LD_INT 40
17278: PPUSH
17279: CALL_OW 12
17283: PUSH
17284: LD_INT 40
17286: PPUSH
17287: LD_INT 50
17289: PPUSH
17290: CALL_OW 12
17294: PUSH
17295: LD_INT 50
17297: PPUSH
17298: LD_INT 60
17300: PPUSH
17301: CALL_OW 12
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_OWVAR 67
17315: ARRAY
17316: ST_TO_ADDR
// un = CreateHuman ;
17317: LD_ADDR_VAR 0 3
17321: PUSH
17322: CALL_OW 44
17326: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17327: LD_VAR 0 3
17331: PPUSH
17332: LD_INT 20
17334: PPUSH
17335: LD_INT 0
17337: PPUSH
17338: CALL_OW 49
// end ;
17342: GO 17208
17344: POP
17345: POP
// for i = 1 to rand ( 3 , 4 ) do
17346: LD_ADDR_VAR 0 2
17350: PUSH
17351: DOUBLE
17352: LD_INT 1
17354: DEC
17355: ST_TO_ADDR
17356: LD_INT 3
17358: PPUSH
17359: LD_INT 4
17361: PPUSH
17362: CALL_OW 12
17366: PUSH
17367: FOR_TO
17368: IFFALSE 17462
// begin hc_sex = sex_male ;
17370: LD_ADDR_OWVAR 27
17374: PUSH
17375: LD_INT 1
17377: ST_TO_ADDR
// uc_side = 0 ;
17378: LD_ADDR_OWVAR 20
17382: PUSH
17383: LD_INT 0
17385: ST_TO_ADDR
// uc_nation = nation_nature ;
17386: LD_ADDR_OWVAR 21
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// hc_class = 18 ;
17394: LD_ADDR_OWVAR 28
17398: PUSH
17399: LD_INT 18
17401: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17402: LD_ADDR_OWVAR 31
17406: PUSH
17407: LD_EXP 30
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: LD_INT 0
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: ST_TO_ADDR
// hc_agressivity = 0 ;
17427: LD_ADDR_OWVAR 35
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// un = CreateHuman ;
17435: LD_ADDR_VAR 0 3
17439: PUSH
17440: CALL_OW 44
17444: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 20
17452: PPUSH
17453: LD_INT 0
17455: PPUSH
17456: CALL_OW 49
// end ;
17460: GO 17367
17462: POP
17463: POP
// end ;
17464: LD_VAR 0 1
17468: RET
