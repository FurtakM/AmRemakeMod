// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 36
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 21
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 22
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 19
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 20
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 15
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 34
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 23
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 24
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 25
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 27
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 35
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 30
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 28
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 29
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 31
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 19252 0 0
// PrepareDifficulty ;
 173: CALL 5019 0 0
// PrepareRussian ;
 177: CALL 4132 0 0
// PrepareVehicles ;
 181: CALL 1421 0 0
// PrepareHeroes ;
 185: CALL 436 0 0
// PrepareOthers ;
 189: CALL 1682 0 0
// PreparePlayerApemans ;
 193: CALL 1824 0 0
// end ;
 197: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 198: LD_EXP 36
 202: PUSH
 203: LD_INT 1
 205: EQUAL
 206: IFFALSE 433
 208: GO 210
 210: DISABLE
 211: LD_INT 0
 213: PPUSH
// begin enable ;
 214: ENABLE
// fogoff ( true ) ;
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 222: LD_ADDR_VAR 0 1
 226: PUSH
 227: LD_INT 22
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 21
 239: PUSH
 240: LD_INT 1
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PPUSH
 251: CALL_OW 69
 255: PUSH
 256: FOR_IN
 257: IFFALSE 273
// SetLives ( i , 1000 ) ;
 259: LD_VAR 0 1
 263: PPUSH
 264: LD_INT 1000
 266: PPUSH
 267: CALL_OW 234
 271: GO 256
 273: POP
 274: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 30
 292: PUSH
 293: LD_INT 0
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 334
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: CALL_OW 274
 321: PPUSH
 322: LD_INT 1
 324: PPUSH
 325: LD_INT 9999
 327: PPUSH
 328: CALL_OW 277
 332: GO 309
 334: POP
 335: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 336: LD_ADDR_VAR 0 1
 340: PUSH
 341: LD_INT 22
 343: PUSH
 344: LD_INT 1
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: LD_INT 30
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: PPUSH
 365: CALL_OW 69
 369: PUSH
 370: FOR_IN
 371: IFFALSE 395
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 373: LD_VAR 0 1
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 9999
 388: PPUSH
 389: CALL_OW 277
 393: GO 370
 395: POP
 396: POP
// if IsSelected ( rudepo ) then
 397: LD_INT 2
 399: PPUSH
 400: CALL_OW 306
 404: IFFALSE 414
// your_side = 3 ;
 406: LD_ADDR_OWVAR 2
 410: PUSH
 411: LD_INT 3
 413: ST_TO_ADDR
// if IsSelected ( JMM ) then
 414: LD_EXP 1
 418: PPUSH
 419: CALL_OW 306
 423: IFFALSE 433
// your_side = 1 ;
 425: LD_ADDR_OWVAR 2
 429: PUSH
 430: LD_INT 1
 432: ST_TO_ADDR
// end ; end_of_file
 433: PPOPN 1
 435: END
// export function PrepareHeroes ; var veh ; begin
 436: LD_INT 0
 438: PPUSH
 439: PPUSH
// uc_side = 1 ;
 440: LD_ADDR_OWVAR 20
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// uc_nation = 1 ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 456: LD_ADDR_EXP 1
 460: PUSH
 461: LD_STRING JMM
 463: PPUSH
 464: LD_INT 1
 466: PPUSH
 467: CALL 4509 0 2
 471: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 472: LD_ADDR_EXP 13
 476: PUSH
 477: LD_STRING Harisson
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL 4509 0 2
 487: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 488: LD_ADDR_EXP 10
 492: PUSH
 493: LD_STRING DeltaDoctor
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL 4509 0 2
 503: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 504: LD_ADDR_VAR 0 2
 508: PUSH
 509: LD_INT 22
 511: PUSH
 512: LD_INT 1
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 21
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 58
 531: PUSH
 532: EMPTY
 533: LIST
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: CALL_OW 69
 544: ST_TO_ADDR
// if veh > 0 then
 545: LD_VAR 0 2
 549: PUSH
 550: LD_INT 0
 552: GREATER
 553: IFFALSE 575
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 555: LD_EXP 1
 559: PPUSH
 560: LD_VAR 0 2
 564: PUSH
 565: LD_INT 1
 567: ARRAY
 568: PPUSH
 569: CALL_OW 52
// end else
 573: GO 590
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 575: LD_EXP 1
 579: PPUSH
 580: LD_INT 2
 582: PPUSH
 583: LD_INT 0
 585: PPUSH
 586: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 590: LD_STRING LisaIn06
 592: PPUSH
 593: LD_INT 0
 595: PPUSH
 596: CALL_OW 30
 600: PUSH
 601: LD_INT 1
 603: EQUAL
 604: IFFALSE 708
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 606: LD_ADDR_VAR 0 2
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 21
 623: PUSH
 624: LD_INT 2
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: LD_INT 58
 633: PUSH
 634: EMPTY
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_STRING Lisa
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 4509 0 2
 662: ST_TO_ADDR
// if veh > 0 then
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 0
 670: GREATER
 671: IFFALSE 693
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 673: LD_EXP 2
 677: PPUSH
 678: LD_VAR 0 2
 682: PUSH
 683: LD_INT 1
 685: ARRAY
 686: PPUSH
 687: CALL_OW 52
// end else
 691: GO 708
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 693: LD_EXP 2
 697: PPUSH
 698: LD_INT 2
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 708: LD_STRING BobbyIn06
 710: PPUSH
 711: LD_INT 0
 713: PPUSH
 714: CALL_OW 30
 718: PUSH
 719: LD_INT 1
 721: EQUAL
 722: IFFALSE 826
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 724: LD_ADDR_VAR 0 2
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 21
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: LD_INT 58
 751: PUSH
 752: EMPTY
 753: LIST
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PPUSH
 760: CALL_OW 69
 764: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 765: LD_ADDR_EXP 3
 769: PUSH
 770: LD_STRING Bobby
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: CALL 4509 0 2
 780: ST_TO_ADDR
// if veh > 0 then
 781: LD_VAR 0 2
 785: PUSH
 786: LD_INT 0
 788: GREATER
 789: IFFALSE 811
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 791: LD_EXP 3
 795: PPUSH
 796: LD_VAR 0 2
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PPUSH
 805: CALL_OW 52
// end else
 809: GO 826
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 811: LD_EXP 3
 815: PPUSH
 816: LD_INT 2
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 826: LD_STRING CyrusIn06
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL_OW 30
 836: PUSH
 837: LD_INT 1
 839: EQUAL
 840: IFFALSE 944
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: LD_INT 22
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PUSH
 857: LD_INT 21
 859: PUSH
 860: LD_INT 2
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PUSH
 867: LD_INT 58
 869: PUSH
 870: EMPTY
 871: LIST
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: PPUSH
 878: CALL_OW 69
 882: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 883: LD_ADDR_EXP 4
 887: PUSH
 888: LD_STRING Cyrus
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: CALL 4509 0 2
 898: ST_TO_ADDR
// if veh > 0 then
 899: LD_VAR 0 2
 903: PUSH
 904: LD_INT 0
 906: GREATER
 907: IFFALSE 929
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 909: LD_EXP 4
 913: PPUSH
 914: LD_VAR 0 2
 918: PUSH
 919: LD_INT 1
 921: ARRAY
 922: PPUSH
 923: CALL_OW 52
// end else
 927: GO 944
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 929: LD_EXP 4
 933: PPUSH
 934: LD_INT 2
 936: PPUSH
 937: LD_INT 0
 939: PPUSH
 940: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 944: LD_STRING FrankIn06
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 30
 954: PUSH
 955: LD_INT 1
 957: EQUAL
 958: IFFALSE 1062
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 960: LD_ADDR_VAR 0 2
 964: PUSH
 965: LD_INT 22
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PUSH
 975: LD_INT 21
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 58
 987: PUSH
 988: EMPTY
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PPUSH
 996: CALL_OW 69
1000: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1001: LD_ADDR_EXP 5
1005: PUSH
1006: LD_STRING Frank
1008: PPUSH
1009: LD_INT 1
1011: PPUSH
1012: CALL 4509 0 2
1016: ST_TO_ADDR
// if veh > 0 then
1017: LD_VAR 0 2
1021: PUSH
1022: LD_INT 0
1024: GREATER
1025: IFFALSE 1047
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1027: LD_EXP 5
1031: PPUSH
1032: LD_VAR 0 2
1036: PUSH
1037: LD_INT 1
1039: ARRAY
1040: PPUSH
1041: CALL_OW 52
// end else
1045: GO 1062
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1047: LD_EXP 5
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1062: LD_STRING BrownIn06
1064: PPUSH
1065: LD_INT 0
1067: PPUSH
1068: CALL_OW 30
1072: PUSH
1073: LD_INT 1
1075: EQUAL
1076: IFFALSE 1180
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1078: LD_ADDR_VAR 0 2
1082: PUSH
1083: LD_INT 22
1085: PUSH
1086: LD_INT 1
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 21
1095: PUSH
1096: LD_INT 2
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: LD_INT 58
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: LIST
1113: PPUSH
1114: CALL_OW 69
1118: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1119: LD_ADDR_EXP 6
1123: PUSH
1124: LD_STRING Brown
1126: PPUSH
1127: LD_INT 1
1129: PPUSH
1130: CALL 4509 0 2
1134: ST_TO_ADDR
// if veh > 0 then
1135: LD_VAR 0 2
1139: PUSH
1140: LD_INT 0
1142: GREATER
1143: IFFALSE 1165
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1145: LD_EXP 6
1149: PPUSH
1150: LD_VAR 0 2
1154: PUSH
1155: LD_INT 1
1157: ARRAY
1158: PPUSH
1159: CALL_OW 52
// end else
1163: GO 1180
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1165: LD_EXP 6
1169: PPUSH
1170: LD_INT 2
1172: PPUSH
1173: LD_INT 0
1175: PPUSH
1176: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1180: LD_STRING DonaldsonIn06
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: CALL_OW 30
1190: PUSH
1191: LD_INT 1
1193: EQUAL
1194: IFFALSE 1298
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 21
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 58
1223: PUSH
1224: EMPTY
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1237: LD_ADDR_EXP 7
1241: PUSH
1242: LD_STRING Donaldson
1244: PPUSH
1245: LD_INT 1
1247: PPUSH
1248: CALL 4509 0 2
1252: ST_TO_ADDR
// if veh > 0 then
1253: LD_VAR 0 2
1257: PUSH
1258: LD_INT 0
1260: GREATER
1261: IFFALSE 1283
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1263: LD_EXP 7
1267: PPUSH
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PPUSH
1277: CALL_OW 52
// end else
1281: GO 1298
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1283: LD_EXP 7
1287: PPUSH
1288: LD_INT 2
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1298: LD_STRING GladstoneIn06
1300: PPUSH
1301: LD_INT 0
1303: PPUSH
1304: CALL_OW 30
1308: PUSH
1309: LD_INT 1
1311: EQUAL
1312: IFFALSE 1416
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1314: LD_ADDR_VAR 0 2
1318: PUSH
1319: LD_INT 22
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 2
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 58
1341: PUSH
1342: EMPTY
1343: LIST
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 69
1354: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1355: LD_ADDR_EXP 8
1359: PUSH
1360: LD_STRING Gladstone
1362: PPUSH
1363: LD_INT 1
1365: PPUSH
1366: CALL 4509 0 2
1370: ST_TO_ADDR
// if veh > 0 then
1371: LD_VAR 0 2
1375: PUSH
1376: LD_INT 0
1378: GREATER
1379: IFFALSE 1401
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1381: LD_EXP 8
1385: PPUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 1
1393: ARRAY
1394: PPUSH
1395: CALL_OW 52
// end else
1399: GO 1416
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1401: LD_EXP 8
1405: PPUSH
1406: LD_INT 2
1408: PPUSH
1409: LD_INT 0
1411: PPUSH
1412: CALL_OW 49
// end ; end ; end ;
1416: LD_VAR 0 1
1420: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
1427: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1428: LD_ADDR_VAR 0 5
1432: PUSH
1433: LD_STRING 06_VehiclesIn06_1
1435: PPUSH
1436: EMPTY
1437: PPUSH
1438: CALL_OW 30
1442: ST_TO_ADDR
// uc_side = 1 ;
1443: LD_ADDR_OWVAR 20
1447: PUSH
1448: LD_INT 1
1450: ST_TO_ADDR
// if vehicles > 0 then
1451: LD_VAR 0 5
1455: PUSH
1456: LD_INT 0
1458: GREATER
1459: IFFALSE 1677
// begin for i := 1 to vehicles do
1461: LD_ADDR_VAR 0 2
1465: PUSH
1466: DOUBLE
1467: LD_INT 1
1469: DEC
1470: ST_TO_ADDR
1471: LD_VAR 0 5
1475: PUSH
1476: FOR_TO
1477: IFFALSE 1675
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1479: LD_ADDR_OWVAR 21
1483: PUSH
1484: LD_VAR 0 5
1488: PUSH
1489: LD_VAR 0 2
1493: ARRAY
1494: PUSH
1495: LD_INT 1
1497: ARRAY
1498: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1499: LD_ADDR_OWVAR 37
1503: PUSH
1504: LD_VAR 0 5
1508: PUSH
1509: LD_VAR 0 2
1513: ARRAY
1514: PUSH
1515: LD_INT 2
1517: ARRAY
1518: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1519: LD_ADDR_OWVAR 39
1523: PUSH
1524: LD_VAR 0 5
1528: PUSH
1529: LD_VAR 0 2
1533: ARRAY
1534: PUSH
1535: LD_INT 3
1537: ARRAY
1538: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1539: LD_ADDR_OWVAR 38
1543: PUSH
1544: LD_VAR 0 5
1548: PUSH
1549: LD_VAR 0 2
1553: ARRAY
1554: PUSH
1555: LD_INT 4
1557: ARRAY
1558: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1559: LD_ADDR_OWVAR 40
1563: PUSH
1564: LD_VAR 0 5
1568: PUSH
1569: LD_VAR 0 2
1573: ARRAY
1574: PUSH
1575: LD_INT 5
1577: ARRAY
1578: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1579: LD_ADDR_OWVAR 41
1583: PUSH
1584: LD_INT 40
1586: ST_TO_ADDR
// veh = CreateVehicle ;
1587: LD_ADDR_VAR 0 4
1591: PUSH
1592: CALL_OW 45
1596: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1597: LD_VAR 0 4
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1609: LD_VAR 0 4
1613: PPUSH
1614: LD_INT 2
1616: PPUSH
1617: LD_INT 0
1619: PPUSH
1620: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1624: LD_OWVAR 40
1628: PUSH
1629: LD_INT 12
1631: EQUAL
1632: IFFALSE 1673
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1634: LD_VAR 0 4
1638: PPUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_VAR 0 2
1648: ARRAY
1649: PUSH
1650: LD_INT 6
1652: ARRAY
1653: PPUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 7
1667: ARRAY
1668: PPUSH
1669: CALL_OW 291
// end ;
1673: GO 1476
1675: POP
1676: POP
// end ; end ;
1677: LD_VAR 0 1
1681: RET
// export function PrepareOthers ; var i , veh ; begin
1682: LD_INT 0
1684: PPUSH
1685: PPUSH
1686: PPUSH
// uc_side = 1 ;
1687: LD_ADDR_OWVAR 20
1691: PUSH
1692: LD_INT 1
1694: ST_TO_ADDR
// uc_nation = 1 ;
1695: LD_ADDR_OWVAR 21
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1703: LD_ADDR_EXP 11
1707: PUSH
1708: LD_STRING OthersIn06
1710: PPUSH
1711: CALL_OW 31
1715: ST_TO_ADDR
// for i in others do
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: LD_EXP 11
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1817
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: LD_INT 22
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 21
1746: PUSH
1747: LD_INT 2
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 58
1756: PUSH
1757: EMPTY
1758: LIST
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: LIST
1764: PPUSH
1765: CALL_OW 69
1769: ST_TO_ADDR
// if veh > 0 then
1770: LD_VAR 0 3
1774: PUSH
1775: LD_INT 0
1777: GREATER
1778: IFFALSE 1800
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1780: LD_VAR 0 2
1784: PPUSH
1785: LD_VAR 0 3
1789: PUSH
1790: LD_INT 1
1792: ARRAY
1793: PPUSH
1794: CALL_OW 52
// end else
1798: GO 1815
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1800: LD_VAR 0 2
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 49
// end ; end ;
1815: GO 1726
1817: POP
1818: POP
// end ;
1819: LD_VAR 0 1
1823: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1824: LD_INT 0
1826: PPUSH
1827: PPUSH
1828: PPUSH
// uc_side = 1 ;
1829: LD_ADDR_OWVAR 20
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// uc_nation = 0 ;
1837: LD_ADDR_OWVAR 21
1841: PUSH
1842: LD_INT 0
1844: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1845: LD_ADDR_EXP 12
1849: PUSH
1850: LD_STRING ApeIn06
1852: PPUSH
1853: CALL_OW 31
1857: ST_TO_ADDR
// for i in ape do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: LD_EXP 12
1867: PUSH
1868: FOR_IN
1869: IFFALSE 1888
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1871: LD_VAR 0 2
1875: PPUSH
1876: LD_INT 2
1878: PPUSH
1879: LD_INT 0
1881: PPUSH
1882: CALL_OW 49
1886: GO 1868
1888: POP
1889: POP
// end ;
1890: LD_VAR 0 1
1894: RET
// export function PrepareDenis ; begin
1895: LD_INT 0
1897: PPUSH
// uc_side = 1 ;
1898: LD_ADDR_OWVAR 20
1902: PUSH
1903: LD_INT 1
1905: ST_TO_ADDR
// uc_nation = 1 ;
1906: LD_ADDR_OWVAR 21
1910: PUSH
1911: LD_INT 1
1913: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1914: LD_ADDR_EXP 9
1918: PUSH
1919: LD_STRING Denis
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL 4509 0 2
1929: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1930: LD_EXP 9
1934: PPUSH
1935: LD_INT 13
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1945: LD_EXP 9
1949: PPUSH
1950: LD_INT 4
1952: PPUSH
1953: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1957: LD_EXP 9
1961: PPUSH
1962: LD_INT 750
1964: PPUSH
1965: CALL_OW 234
// end ;
1969: LD_VAR 0 1
1973: RET
// export function HarrisonSupport ; var un , veh ; begin
1974: LD_INT 0
1976: PPUSH
1977: PPUSH
1978: PPUSH
// uc_side = 1 ;
1979: LD_ADDR_OWVAR 20
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// uc_nation = 1 ;
1987: LD_ADDR_OWVAR 21
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// vc_engine = 1 ;
1995: LD_ADDR_OWVAR 39
1999: PUSH
2000: LD_INT 1
2002: ST_TO_ADDR
// vc_control = 1 ;
2003: LD_ADDR_OWVAR 38
2007: PUSH
2008: LD_INT 1
2010: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2011: LD_ADDR_OWVAR 40
2015: PUSH
2016: LD_INT 4
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: LIST
2029: PUSH
2030: LD_OWVAR 67
2034: ARRAY
2035: ST_TO_ADDR
// vc_chassis = 2 ;
2036: LD_ADDR_OWVAR 37
2040: PUSH
2041: LD_INT 2
2043: ST_TO_ADDR
// veh = CreateVehicle ;
2044: LD_ADDR_VAR 0 3
2048: PUSH
2049: CALL_OW 45
2053: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 2
2061: PPUSH
2062: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2066: LD_VAR 0 3
2070: PPUSH
2071: LD_INT 3
2073: PPUSH
2074: LD_INT 0
2076: PPUSH
2077: CALL_OW 49
// hc_class := 2 ;
2081: LD_ADDR_OWVAR 28
2085: PUSH
2086: LD_INT 2
2088: ST_TO_ADDR
// hc_sex := sex_male ;
2089: LD_ADDR_OWVAR 27
2093: PUSH
2094: LD_INT 1
2096: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2097: LD_ADDR_OWVAR 33
2101: PUSH
2102: LD_STRING SecondCharsGal
2104: ST_TO_ADDR
// hc_face_number := 52 ;
2105: LD_ADDR_OWVAR 34
2109: PUSH
2110: LD_INT 52
2112: ST_TO_ADDR
// hc_name := Craig Brown ;
2113: LD_ADDR_OWVAR 26
2117: PUSH
2118: LD_STRING Craig Brown
2120: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2121: LD_ADDR_OWVAR 31
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: LD_INT 0
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: LIST
2143: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2144: LD_ADDR_EXP 16
2148: PUSH
2149: CALL_OW 44
2153: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2154: LD_EXP 16
2158: PPUSH
2159: LD_VAR 0 3
2163: PPUSH
2164: CALL_OW 52
// vc_engine = 1 ;
2168: LD_ADDR_OWVAR 39
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_control = 1 ;
2176: LD_ADDR_OWVAR 38
2180: PUSH
2181: LD_INT 1
2183: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2184: LD_ADDR_OWVAR 40
2188: PUSH
2189: LD_INT 4
2191: PUSH
2192: LD_INT 2
2194: PUSH
2195: LD_INT 2
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_OWVAR 67
2207: ARRAY
2208: ST_TO_ADDR
// vc_chassis = 2 ;
2209: LD_ADDR_OWVAR 37
2213: PUSH
2214: LD_INT 2
2216: ST_TO_ADDR
// veh = CreateVehicle ;
2217: LD_ADDR_VAR 0 3
2221: PUSH
2222: CALL_OW 45
2226: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2239: LD_VAR 0 3
2243: PPUSH
2244: LD_INT 3
2246: PPUSH
2247: LD_INT 0
2249: PPUSH
2250: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_INT 50
2261: PPUSH
2262: CALL_OW 240
// hc_class := 1 ;
2266: LD_ADDR_OWVAR 28
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// hc_sex := sex_female ;
2274: LD_ADDR_OWVAR 27
2278: PUSH
2279: LD_INT 2
2281: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2282: LD_ADDR_OWVAR 33
2286: PUSH
2287: LD_STRING SecondCharsGal
2289: ST_TO_ADDR
// hc_face_number := 45 ;
2290: LD_ADDR_OWVAR 34
2294: PUSH
2295: LD_INT 45
2297: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2298: LD_ADDR_OWVAR 26
2302: PUSH
2303: LD_STRING Ingrid Jonsson
2305: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2306: LD_ADDR_OWVAR 31
2310: PUSH
2311: LD_INT 1
2313: PUSH
2314: LD_INT 3
2316: PUSH
2317: LD_INT 1
2319: PUSH
2320: LD_INT 0
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2329: LD_ADDR_EXP 17
2333: PUSH
2334: CALL_OW 44
2338: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2339: LD_EXP 17
2343: PPUSH
2344: LD_VAR 0 3
2348: PPUSH
2349: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_INT 45
2360: PPUSH
2361: CALL_OW 240
// end ;
2365: LD_VAR 0 1
2369: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2370: LD_INT 0
2372: PPUSH
2373: PPUSH
2374: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: LD_INT 22
2382: PUSH
2383: LD_INT 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 21
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 26
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: LD_INT 25
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 25
2425: PUSH
2426: LD_INT 2
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 25
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: EMPTY
2440: LIST
2441: LIST
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 4
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PPUSH
2466: CALL_OW 69
2470: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: LD_INT 1
2478: PPUSH
2479: LD_VAR 0 2
2483: PPUSH
2484: CALL_OW 12
2488: ST_TO_ADDR
// uc_side = 4 ;
2489: LD_ADDR_OWVAR 20
2493: PUSH
2494: LD_INT 4
2496: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2497: LD_ADDR_EXP 14
2501: PUSH
2502: LD_STRING Joan
2504: PPUSH
2505: LD_INT 0
2507: PPUSH
2508: CALL 4509 0 2
2512: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2513: LD_EXP 14
2517: PPUSH
2518: LD_VAR 0 2
2522: PUSH
2523: LD_VAR 0 3
2527: ARRAY
2528: PPUSH
2529: CALL_OW 250
2533: PPUSH
2534: LD_VAR 0 2
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PPUSH
2545: CALL_OW 251
2549: PPUSH
2550: LD_INT 5
2552: PPUSH
2553: LD_INT 1
2555: PPUSH
2556: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2560: LD_EXP 14
2564: PPUSH
2565: LD_INT 250
2567: PPUSH
2568: CALL_OW 234
// InGameOn ;
2572: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2576: LD_EXP 14
2580: PPUSH
2581: CALL_OW 87
// wait ( 0 0$2 ) ;
2585: LD_INT 70
2587: PPUSH
2588: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2592: LD_VAR 0 2
2596: PUSH
2597: LD_VAR 0 3
2601: ARRAY
2602: PPUSH
2603: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2607: LD_VAR 0 2
2611: PUSH
2612: LD_VAR 0 3
2616: ARRAY
2617: PPUSH
2618: CALL_OW 122
// wait ( 0 0$1 ) ;
2622: LD_INT 35
2624: PPUSH
2625: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2629: LD_VAR 0 2
2633: PUSH
2634: LD_VAR 0 3
2638: ARRAY
2639: PPUSH
2640: LD_EXP 14
2644: PPUSH
2645: CALL_OW 112
// wait ( 0 0$2 ) ;
2649: LD_INT 70
2651: PPUSH
2652: CALL_OW 67
// DialogueOn ;
2656: CALL_OW 6
// if tmp [ rnd ] = JMM then
2660: LD_VAR 0 2
2664: PUSH
2665: LD_VAR 0 3
2669: ARRAY
2670: PUSH
2671: LD_EXP 1
2675: EQUAL
2676: IFFALSE 2803
// begin Say ( JMM , D5b-JMM-1 ) ;
2678: LD_EXP 1
2682: PPUSH
2683: LD_STRING D5b-JMM-1
2685: PPUSH
2686: CALL_OW 88
// DialogueOff ;
2690: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2694: LD_EXP 14
2698: PPUSH
2699: LD_INT 500
2701: PPUSH
2702: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2706: LD_EXP 14
2710: PPUSH
2711: LD_EXP 1
2715: PPUSH
2716: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2720: LD_EXP 1
2724: PPUSH
2725: LD_EXP 14
2729: PPUSH
2730: CALL_OW 119
// wait ( 0 0$1 ) ;
2734: LD_INT 35
2736: PPUSH
2737: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2741: LD_EXP 14
2745: PPUSH
2746: LD_STRING D5b-Joan-1
2748: PPUSH
2749: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2753: LD_EXP 1
2757: PPUSH
2758: LD_STRING D5b-JMM-2
2760: PPUSH
2761: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2765: LD_EXP 14
2769: PPUSH
2770: LD_STRING D5b-Joan-2
2772: PPUSH
2773: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2777: LD_EXP 1
2781: PPUSH
2782: LD_STRING D5b-JMM-3
2784: PPUSH
2785: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2789: LD_EXP 14
2793: PPUSH
2794: LD_STRING D5b-Joan-3
2796: PPUSH
2797: CALL_OW 88
// end else
2801: GO 3143
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2803: LD_VAR 0 2
2807: PUSH
2808: LD_VAR 0 3
2812: ARRAY
2813: PPUSH
2814: LD_STRING D5a-Sol1-1
2816: PPUSH
2817: CALL_OW 88
// DialogueOff ;
2821: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2825: LD_EXP 14
2829: PPUSH
2830: LD_INT 500
2832: PPUSH
2833: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2837: LD_EXP 14
2841: PPUSH
2842: LD_VAR 0 2
2846: PUSH
2847: LD_VAR 0 3
2851: ARRAY
2852: PPUSH
2853: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2857: LD_VAR 0 2
2861: PUSH
2862: LD_VAR 0 3
2866: ARRAY
2867: PPUSH
2868: LD_EXP 14
2872: PPUSH
2873: CALL_OW 119
// wait ( 0 0$1 ) ;
2877: LD_INT 35
2879: PPUSH
2880: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2884: LD_EXP 14
2888: PPUSH
2889: LD_STRING D5a-Joan-1
2891: PPUSH
2892: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2896: LD_VAR 0 2
2900: PUSH
2901: LD_VAR 0 3
2905: ARRAY
2906: PPUSH
2907: LD_STRING D5a-Sol1-2
2909: PPUSH
2910: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2914: LD_EXP 14
2918: PPUSH
2919: LD_STRING D5a-Joan-2
2921: PPUSH
2922: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2926: LD_VAR 0 2
2930: PUSH
2931: LD_VAR 0 3
2935: ARRAY
2936: PPUSH
2937: LD_STRING D5a-Sol1-3
2939: PPUSH
2940: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2944: LD_EXP 14
2948: PPUSH
2949: LD_STRING D5a-Joan-3
2951: PPUSH
2952: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2956: LD_VAR 0 2
2960: PUSH
2961: LD_VAR 0 3
2965: ARRAY
2966: PPUSH
2967: LD_STRING D5a-Sol1-4
2969: PPUSH
2970: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2974: LD_EXP 1
2978: PPUSH
2979: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2983: LD_EXP 1
2987: PPUSH
2988: CALL_OW 122
// wait ( 0 0$1 ) ;
2992: LD_INT 35
2994: PPUSH
2995: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2999: LD_INT 35
3001: PPUSH
3002: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
3006: LD_EXP 14
3010: PUSH
3011: LD_VAR 0 2
3015: PUSH
3016: LD_VAR 0 3
3020: ARRAY
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PPUSH
3026: LD_EXP 1
3030: PPUSH
3031: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3035: LD_EXP 14
3039: PPUSH
3040: LD_EXP 1
3044: PPUSH
3045: CALL_OW 296
3049: PUSH
3050: LD_INT 5
3052: LESS
3053: IFFALSE 2999
// ComTurnUnit ( Joan , JMM ) ;
3055: LD_EXP 14
3059: PPUSH
3060: LD_EXP 1
3064: PPUSH
3065: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3069: LD_EXP 1
3073: PPUSH
3074: LD_EXP 14
3078: PPUSH
3079: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
3083: LD_EXP 14
3087: PPUSH
3088: LD_STRING D5a-Joan-4
3090: PPUSH
3091: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3095: LD_EXP 1
3099: PPUSH
3100: LD_STRING D5a-JMM-4
3102: PPUSH
3103: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3107: LD_EXP 14
3111: PPUSH
3112: LD_STRING D5a-Joan-5
3114: PPUSH
3115: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3119: LD_EXP 1
3123: PPUSH
3124: LD_STRING D5a-JMM-5
3126: PPUSH
3127: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3131: LD_EXP 14
3135: PPUSH
3136: LD_STRING D5a-Joan-6
3138: PPUSH
3139: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
3143: LD_EXP 1
3147: PPUSH
3148: LD_STRING D6-JMM-1
3150: PPUSH
3151: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3155: LD_EXP 14
3159: PPUSH
3160: LD_STRING D6-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D6-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3179: LD_EXP 14
3183: PPUSH
3184: LD_STRING D6-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D6-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3203: LD_EXP 14
3207: PPUSH
3208: LD_STRING D6-Joan-3
3210: PPUSH
3211: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3215: LD_EXP 1
3219: PPUSH
3220: LD_STRING D6-JMM-4
3222: PPUSH
3223: CALL_OW 88
// DialogueOff ;
3227: CALL_OW 7
// InGameOff ;
3231: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3235: LD_EXP 14
3239: PPUSH
3240: LD_INT 1
3242: PPUSH
3243: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3247: LD_STRING MJ
3249: PPUSH
3250: CALL_OW 337
// JoanStatus = 1 ;
3254: LD_ADDR_EXP 15
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// end ;
3262: LD_VAR 0 1
3266: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3267: LD_INT 0
3269: PPUSH
3270: PPUSH
// uc_side = 1 ;
3271: LD_ADDR_OWVAR 20
3275: PUSH
3276: LD_INT 1
3278: ST_TO_ADDR
// uc_nation = 1 ;
3279: LD_ADDR_OWVAR 21
3283: PUSH
3284: LD_INT 1
3286: ST_TO_ADDR
// if number = 1 then
3287: LD_VAR 0 1
3291: PUSH
3292: LD_INT 1
3294: EQUAL
3295: IFFALSE 3433
// begin hc_class := 1 ;
3297: LD_ADDR_OWVAR 28
3301: PUSH
3302: LD_INT 1
3304: ST_TO_ADDR
// hc_sex := sex_male ;
3305: LD_ADDR_OWVAR 27
3309: PUSH
3310: LD_INT 1
3312: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3313: LD_ADDR_OWVAR 33
3317: PUSH
3318: LD_STRING AmGalRemake
3320: ST_TO_ADDR
// hc_face_number := 7 ;
3321: LD_ADDR_OWVAR 34
3325: PUSH
3326: LD_INT 7
3328: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3329: LD_ADDR_OWVAR 26
3333: PUSH
3334: LD_STRING Bobby Jordan
3336: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3337: LD_ADDR_OWVAR 31
3341: PUSH
3342: LD_INT 2
3344: PUSH
3345: LD_INT 1
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 1
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// un = CreateHuman ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: CALL_OW 44
3369: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3370: LD_VAR 0 3
3374: PPUSH
3375: LD_INT 12
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: CALL_OW 49
// wait ( 0 0$1 ) ;
3385: LD_INT 35
3387: PPUSH
3388: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3392: LD_VAR 0 3
3396: PPUSH
3397: CALL_OW 87
// DialogueOn ;
3401: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_STRING D11b-Sol3-1
3412: PPUSH
3413: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3417: LD_EXP 1
3421: PPUSH
3422: LD_STRING D11b-JMM-1
3424: PPUSH
3425: CALL_OW 88
// DialogueOff ;
3429: CALL_OW 7
// end ; if number = 2 then
3433: LD_VAR 0 1
3437: PUSH
3438: LD_INT 2
3440: EQUAL
3441: IFFALSE 3579
// begin hc_class := 3 ;
3443: LD_ADDR_OWVAR 28
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// hc_sex := sex_male ;
3451: LD_ADDR_OWVAR 27
3455: PUSH
3456: LD_INT 1
3458: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3459: LD_ADDR_OWVAR 33
3463: PUSH
3464: LD_STRING SecondCharsGal
3466: ST_TO_ADDR
// hc_face_number := 55 ;
3467: LD_ADDR_OWVAR 34
3471: PUSH
3472: LD_INT 55
3474: ST_TO_ADDR
// hc_name := George McCarthy ;
3475: LD_ADDR_OWVAR 26
3479: PUSH
3480: LD_STRING George McCarthy
3482: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3483: LD_ADDR_OWVAR 31
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: LD_INT 2
3493: PUSH
3494: LD_INT 3
3496: PUSH
3497: LD_INT 1
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 12
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3531: LD_VAR 0 3
3535: PPUSH
3536: CALL_OW 87
// wait ( 0 0$1 ) ;
3540: LD_INT 35
3542: PPUSH
3543: CALL_OW 67
// DialogueOn ;
3547: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_STRING D11d-Sol4-1
3558: PPUSH
3559: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3563: LD_EXP 1
3567: PPUSH
3568: LD_STRING D11d-JMM-1
3570: PPUSH
3571: CALL_OW 88
// DialogueOff ;
3575: CALL_OW 7
// end ; if number = 4 then
3579: LD_VAR 0 1
3583: PUSH
3584: LD_INT 4
3586: EQUAL
3587: IFFALSE 3713
// begin hc_class := 3 ;
3589: LD_ADDR_OWVAR 28
3593: PUSH
3594: LD_INT 3
3596: ST_TO_ADDR
// hc_sex := sex_female ;
3597: LD_ADDR_OWVAR 27
3601: PUSH
3602: LD_INT 2
3604: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3605: LD_ADDR_OWVAR 33
3609: PUSH
3610: LD_STRING SecondCharsGal
3612: ST_TO_ADDR
// hc_face_number := 46 ;
3613: LD_ADDR_OWVAR 34
3617: PUSH
3618: LD_INT 46
3620: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING Sylvia Creak
3628: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3629: LD_ADDR_OWVAR 31
3633: PUSH
3634: LD_INT 1
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: LD_INT 1
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: ST_TO_ADDR
// un = CreateHuman ;
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: CALL_OW 44
3661: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3662: LD_VAR 0 3
3666: PPUSH
3667: LD_INT 12
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: CALL_OW 87
// wait ( 0 0$1 ) ;
3686: LD_INT 35
3688: PPUSH
3689: CALL_OW 67
// DialogueOn ;
3693: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_STRING D11e-FSol4-1
3704: PPUSH
3705: CALL_OW 88
// DialogueOff ;
3709: CALL_OW 7
// end ; if number = 5 then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 5
3720: EQUAL
3721: IFFALSE 3859
// begin hc_class := 1 ;
3723: LD_ADDR_OWVAR 28
3727: PUSH
3728: LD_INT 1
3730: ST_TO_ADDR
// hc_sex := sex_female ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 2
3738: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3739: LD_ADDR_OWVAR 33
3743: PUSH
3744: LD_STRING SecondCharsGal
3746: ST_TO_ADDR
// hc_face_number := 37 ;
3747: LD_ADDR_OWVAR 34
3751: PUSH
3752: LD_INT 37
3754: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3755: LD_ADDR_OWVAR 26
3759: PUSH
3760: LD_STRING Margherite Simpson
3762: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3763: LD_ADDR_OWVAR 31
3767: PUSH
3768: LD_INT 1
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 1
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: ST_TO_ADDR
// un = CreateHuman ;
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: CALL_OW 44
3795: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_INT 12
3803: PPUSH
3804: LD_INT 1
3806: PPUSH
3807: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3811: LD_VAR 0 3
3815: PPUSH
3816: CALL_OW 87
// wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// DialogueOn ;
3827: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3831: LD_VAR 0 3
3835: PPUSH
3836: LD_STRING D11c-FSol3-1
3838: PPUSH
3839: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3843: LD_EXP 1
3847: PPUSH
3848: LD_STRING D11c-JMM-1
3850: PPUSH
3851: CALL_OW 88
// DialogueOff ;
3855: CALL_OW 7
// end ; if number = 6 then
3859: LD_VAR 0 1
3863: PUSH
3864: LD_INT 6
3866: EQUAL
3867: IFFALSE 3993
// begin hc_class := 1 ;
3869: LD_ADDR_OWVAR 28
3873: PUSH
3874: LD_INT 1
3876: ST_TO_ADDR
// hc_sex := sex_male ;
3877: LD_ADDR_OWVAR 27
3881: PUSH
3882: LD_INT 1
3884: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3885: LD_ADDR_OWVAR 33
3889: PUSH
3890: LD_STRING AmGalRemake
3892: ST_TO_ADDR
// hc_face_number := 1 ;
3893: LD_ADDR_OWVAR 34
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// hc_name := Charles Brown ;
3901: LD_ADDR_OWVAR 26
3905: PUSH
3906: LD_STRING Charles Brown
3908: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3909: LD_ADDR_OWVAR 31
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 1
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// un = CreateHuman ;
3932: LD_ADDR_VAR 0 3
3936: PUSH
3937: CALL_OW 44
3941: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3942: LD_VAR 0 3
3946: PPUSH
3947: LD_INT 12
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3957: LD_VAR 0 3
3961: PPUSH
3962: CALL_OW 87
// wait ( 0 0$1 ) ;
3966: LD_INT 35
3968: PPUSH
3969: CALL_OW 67
// DialogueOn ;
3973: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3977: LD_VAR 0 3
3981: PPUSH
3982: LD_STRING D11f-Sol5-1
3984: PPUSH
3985: CALL_OW 88
// DialogueOff ;
3989: CALL_OW 7
// end ; if number = 7 then
3993: LD_VAR 0 1
3997: PUSH
3998: LD_INT 7
4000: EQUAL
4001: IFFALSE 4127
// begin hc_class := 1 ;
4003: LD_ADDR_OWVAR 28
4007: PUSH
4008: LD_INT 1
4010: ST_TO_ADDR
// hc_sex := sex_female ;
4011: LD_ADDR_OWVAR 27
4015: PUSH
4016: LD_INT 2
4018: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4019: LD_ADDR_OWVAR 33
4023: PUSH
4024: LD_STRING AmGalRemake
4026: ST_TO_ADDR
// hc_face_number := 2 ;
4027: LD_ADDR_OWVAR 34
4031: PUSH
4032: LD_INT 2
4034: ST_TO_ADDR
// hc_name := Johanna Holland ;
4035: LD_ADDR_OWVAR 26
4039: PUSH
4040: LD_STRING Johanna Holland
4042: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4043: LD_ADDR_OWVAR 31
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: LD_INT 0
4056: PUSH
4057: LD_INT 0
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// un = CreateHuman ;
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4076: LD_VAR 0 3
4080: PPUSH
4081: LD_INT 12
4083: PPUSH
4084: LD_INT 1
4086: PPUSH
4087: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4091: LD_VAR 0 3
4095: PPUSH
4096: CALL_OW 87
// wait ( 0 0$1 ) ;
4100: LD_INT 35
4102: PPUSH
4103: CALL_OW 67
// DialogueOn ;
4107: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_STRING D11a-FSol2-1
4118: PPUSH
4119: CALL_OW 88
// DialogueOff ;
4123: CALL_OW 7
// end ; end ; end_of_file
4127: LD_VAR 0 2
4131: RET
// export function PrepareRussian ; var i ; begin
4132: LD_INT 0
4134: PPUSH
4135: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4136: LD_INT 3
4138: PPUSH
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 2
4144: PPUSH
4145: LD_EXP 32
4149: PPUSH
4150: LD_EXP 33
4154: PPUSH
4155: CALL_OW 12
4159: PPUSH
4160: LD_INT 2
4162: PPUSH
4163: LD_INT 4
4165: PPUSH
4166: CALL 4773 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4170: LD_INT 3
4172: PPUSH
4173: LD_INT 3
4175: PPUSH
4176: LD_INT 8
4178: PPUSH
4179: LD_EXP 32
4183: PPUSH
4184: LD_EXP 33
4188: PPUSH
4189: CALL_OW 12
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: LD_INT 4
4199: PPUSH
4200: CALL 4773 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4204: LD_INT 3
4206: PPUSH
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 67
4212: PPUSH
4213: LD_EXP 32
4217: PPUSH
4218: LD_EXP 33
4222: PPUSH
4223: CALL_OW 12
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_INT 2
4233: PPUSH
4234: CALL 4773 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4238: LD_INT 3
4240: PPUSH
4241: LD_INT 3
4243: PPUSH
4244: LD_INT 21
4246: PPUSH
4247: LD_EXP 32
4251: PPUSH
4252: LD_EXP 33
4256: PPUSH
4257: CALL_OW 12
4261: PPUSH
4262: LD_INT 3
4264: PPUSH
4265: LD_INT 6
4267: PPUSH
4268: CALL 4773 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4272: LD_INT 3
4274: PPUSH
4275: LD_INT 3
4277: PPUSH
4278: LD_INT 17
4280: PPUSH
4281: LD_EXP 32
4285: PPUSH
4286: LD_EXP 33
4290: PPUSH
4291: CALL_OW 12
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: LD_INT 6
4301: PPUSH
4302: CALL 4773 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4306: LD_INT 3
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: LD_INT 32
4314: PPUSH
4315: LD_EXP 32
4319: PPUSH
4320: LD_EXP 33
4324: PPUSH
4325: CALL_OW 12
4329: PPUSH
4330: LD_INT 4
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: CALL 4773 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4340: LD_ADDR_VAR 0 2
4344: PUSH
4345: LD_INT 22
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 21
4357: PUSH
4358: LD_INT 3
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 32
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: PPUSH
4380: CALL_OW 69
4384: PUSH
4385: FOR_IN
4386: IFFALSE 4426
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4388: LD_INT 3
4390: PPUSH
4391: LD_INT 3
4393: PPUSH
4394: LD_VAR 0 2
4398: PPUSH
4399: LD_EXP 32
4403: PPUSH
4404: LD_EXP 33
4408: PPUSH
4409: CALL_OW 12
4413: PPUSH
4414: LD_INT 1
4416: PPUSH
4417: LD_INT 1
4419: PPUSH
4420: CALL 4773 0 6
4424: GO 4385
4426: POP
4427: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4428: LD_ADDR_VAR 0 2
4432: PUSH
4433: LD_INT 22
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 21
4445: PUSH
4446: LD_INT 3
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 30
4455: PUSH
4456: LD_INT 31
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: PPUSH
4468: CALL_OW 69
4472: PUSH
4473: FOR_IN
4474: IFFALSE 4502
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4476: LD_EXP 32
4480: PPUSH
4481: LD_EXP 33
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_VAR 0 2
4495: PPUSH
4496: CALL 4883 0 2
4500: GO 4473
4502: POP
4503: POP
// end ; end_of_file
4504: LD_VAR 0 1
4508: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4509: LD_INT 0
4511: PPUSH
4512: PPUSH
// if exist_mode then
4513: LD_VAR 0 2
4517: IFFALSE 4536
// begin unit := CreateCharacter ( ident ) ;
4519: LD_ADDR_VAR 0 4
4523: PUSH
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 34
4533: ST_TO_ADDR
// end else
4534: GO 4551
// begin unit := NewCharacter ( ident ) ;
4536: LD_ADDR_VAR 0 4
4540: PUSH
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL_OW 25
4550: ST_TO_ADDR
// end ; result := unit ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_VAR 0 4
4560: ST_TO_ADDR
// end ;
4561: LD_VAR 0 3
4565: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4566: LD_INT 0
4568: PPUSH
4569: PPUSH
4570: PPUSH
// rnd = rand ( 1 , characters ) ;
4571: LD_ADDR_VAR 0 6
4575: PUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_VAR 0 1
4583: PPUSH
4584: CALL_OW 12
4588: ST_TO_ADDR
// for i = 1 to characters do
4589: LD_ADDR_VAR 0 5
4593: PUSH
4594: DOUBLE
4595: LD_INT 1
4597: DEC
4598: ST_TO_ADDR
4599: LD_VAR 0 1
4603: PUSH
4604: FOR_TO
4605: IFFALSE 4715
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4607: LD_VAR 0 5
4611: PUSH
4612: LD_VAR 0 6
4616: EQUAL
4617: PUSH
4618: LD_VAR 0 1
4622: PUSH
4623: LD_VAR 0 5
4627: ARRAY
4628: PPUSH
4629: CALL_OW 258
4633: PUSH
4634: LD_INT 1
4636: EQUAL
4637: AND
4638: IFFALSE 4660
// Say ( characters [ i ] , dialogMID ) ;
4640: LD_VAR 0 1
4644: PUSH
4645: LD_VAR 0 5
4649: ARRAY
4650: PPUSH
4651: LD_VAR 0 2
4655: PPUSH
4656: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4660: LD_VAR 0 5
4664: PUSH
4665: LD_VAR 0 6
4669: EQUAL
4670: PUSH
4671: LD_VAR 0 1
4675: PUSH
4676: LD_VAR 0 5
4680: ARRAY
4681: PPUSH
4682: CALL_OW 258
4686: PUSH
4687: LD_INT 2
4689: EQUAL
4690: AND
4691: IFFALSE 4713
// Say ( characters [ i ] , dialogFID ) ;
4693: LD_VAR 0 1
4697: PUSH
4698: LD_VAR 0 5
4702: ARRAY
4703: PPUSH
4704: LD_VAR 0 3
4708: PPUSH
4709: CALL_OW 88
// end ;
4713: GO 4604
4715: POP
4716: POP
// end ;
4717: LD_VAR 0 4
4721: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4722: LD_INT 0
4724: PPUSH
4725: PPUSH
// for i in charactersList do
4726: LD_ADDR_VAR 0 4
4730: PUSH
4731: LD_VAR 0 1
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4766
// begin if IsOk ( i ) then
4739: LD_VAR 0 4
4743: PPUSH
4744: CALL_OW 302
4748: IFFALSE 4764
// SaveCharacters ( i , ident ) ;
4750: LD_VAR 0 4
4754: PPUSH
4755: LD_VAR 0 2
4759: PPUSH
4760: CALL_OW 38
// end ;
4764: GO 4736
4766: POP
4767: POP
// end ;
4768: LD_VAR 0 3
4772: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4773: LD_INT 0
4775: PPUSH
4776: PPUSH
4777: PPUSH
4778: PPUSH
// for i = 1 to count do
4779: LD_ADDR_VAR 0 8
4783: PUSH
4784: DOUBLE
4785: LD_INT 1
4787: DEC
4788: ST_TO_ADDR
4789: LD_VAR 0 6
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4876
// begin uc_side = side ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_VAR 0 1
4806: ST_TO_ADDR
// uc_nation = nation ;
4807: LD_ADDR_OWVAR 21
4811: PUSH
4812: LD_VAR 0 2
4816: ST_TO_ADDR
// hc_gallery =  ;
4817: LD_ADDR_OWVAR 33
4821: PUSH
4822: LD_STRING 
4824: ST_TO_ADDR
// hc_name =  ;
4825: LD_ADDR_OWVAR 26
4829: PUSH
4830: LD_STRING 
4832: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4833: LD_INT 0
4835: PPUSH
4836: LD_VAR 0 5
4840: PPUSH
4841: LD_VAR 0 4
4845: PPUSH
4846: CALL_OW 380
// un = CreateHuman ;
4850: LD_ADDR_VAR 0 10
4854: PUSH
4855: CALL_OW 44
4859: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4860: LD_VAR 0 10
4864: PPUSH
4865: LD_VAR 0 3
4869: PPUSH
4870: CALL_OW 52
// end ;
4874: GO 4794
4876: POP
4877: POP
// end ;
4878: LD_VAR 0 7
4882: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4883: LD_INT 0
4885: PPUSH
4886: PPUSH
4887: PPUSH
// uc_side := GetSide ( b ) ;
4888: LD_ADDR_OWVAR 20
4892: PUSH
4893: LD_VAR 0 2
4897: PPUSH
4898: CALL_OW 255
4902: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4903: LD_ADDR_OWVAR 21
4907: PUSH
4908: LD_VAR 0 2
4912: PPUSH
4913: CALL_OW 248
4917: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4918: LD_INT 0
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: LD_VAR 0 1
4928: PPUSH
4929: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4933: LD_ADDR_VAR 0 5
4937: PUSH
4938: LD_VAR 0 2
4942: PPUSH
4943: CALL_OW 254
4947: PUSH
4948: LD_INT 3
4950: MINUS
4951: ST_TO_ADDR
// if dir < 0 then
4952: LD_VAR 0 5
4956: PUSH
4957: LD_INT 0
4959: LESS
4960: IFFALSE 4976
// dir := 6 + dir ;
4962: LD_ADDR_VAR 0 5
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: LD_VAR 0 5
4974: PLUS
4975: ST_TO_ADDR
// un := CreateHuman ;
4976: LD_ADDR_VAR 0 4
4980: PUSH
4981: CALL_OW 44
4985: ST_TO_ADDR
// SetDir ( un , dir ) ;
4986: LD_VAR 0 4
4990: PPUSH
4991: LD_VAR 0 5
4995: PPUSH
4996: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5000: LD_VAR 0 4
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: CALL_OW 52
// end ;
5014: LD_VAR 0 3
5018: RET
// export function PrepareDifficulty ; begin
5019: LD_INT 0
5021: PPUSH
// if Difficulty = 1 then
5022: LD_OWVAR 67
5026: PUSH
5027: LD_INT 1
5029: EQUAL
5030: IFFALSE 5048
// begin RuSolMinLevel = 2 ;
5032: LD_ADDR_EXP 32
5036: PUSH
5037: LD_INT 2
5039: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5040: LD_ADDR_EXP 33
5044: PUSH
5045: LD_INT 5
5047: ST_TO_ADDR
// end ; if Difficulty = 2 then
5048: LD_OWVAR 67
5052: PUSH
5053: LD_INT 2
5055: EQUAL
5056: IFFALSE 5074
// begin RuSolMinLevel = 3 ;
5058: LD_ADDR_EXP 32
5062: PUSH
5063: LD_INT 3
5065: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5066: LD_ADDR_EXP 33
5070: PUSH
5071: LD_INT 5
5073: ST_TO_ADDR
// end ; if Difficulty = 3 then
5074: LD_OWVAR 67
5078: PUSH
5079: LD_INT 3
5081: EQUAL
5082: IFFALSE 5100
// begin RuSolMinLevel = 4 ;
5084: LD_ADDR_EXP 32
5088: PUSH
5089: LD_INT 4
5091: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5092: LD_ADDR_EXP 33
5096: PUSH
5097: LD_INT 5
5099: ST_TO_ADDR
// end ; end ;
5100: LD_VAR 0 1
5104: RET
// export function ShowQuery1 ; begin
5105: LD_INT 0
5107: PPUSH
// case query ( QKill ) of 1 :
5108: LD_STRING QKill
5110: PPUSH
5111: CALL_OW 97
5115: PUSH
5116: LD_INT 1
5118: DOUBLE
5119: EQUAL
5120: IFTRUE 5124
5122: GO 5135
5124: POP
// begin result = 1 ;
5125: LD_ADDR_VAR 0 1
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// end ; 2 :
5133: GO 5174
5135: LD_INT 2
5137: DOUBLE
5138: EQUAL
5139: IFTRUE 5143
5141: GO 5154
5143: POP
// begin result = 2 ;
5144: LD_ADDR_VAR 0 1
5148: PUSH
5149: LD_INT 2
5151: ST_TO_ADDR
// end ; 3 :
5152: GO 5174
5154: LD_INT 3
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5173
5162: POP
// begin result = 3 ;
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: LD_INT 3
5170: ST_TO_ADDR
// end ; end ;
5171: GO 5174
5173: POP
// end ;
5174: LD_VAR 0 1
5178: RET
// export function ShowQuery2 ; begin
5179: LD_INT 0
5181: PPUSH
// case query ( QKill2 ) of 1 :
5182: LD_STRING QKill2
5184: PPUSH
5185: CALL_OW 97
5189: PUSH
5190: LD_INT 1
5192: DOUBLE
5193: EQUAL
5194: IFTRUE 5198
5196: GO 5209
5198: POP
// begin result = 1 ;
5199: LD_ADDR_VAR 0 1
5203: PUSH
5204: LD_INT 1
5206: ST_TO_ADDR
// end ; 2 :
5207: GO 5229
5209: LD_INT 2
5211: DOUBLE
5212: EQUAL
5213: IFTRUE 5217
5215: GO 5228
5217: POP
// begin result = 2 ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 2
5225: ST_TO_ADDR
// end ; end ;
5226: GO 5229
5228: POP
// end ;
5229: LD_VAR 0 1
5233: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5234: LD_INT 0
5236: PPUSH
5237: PPUSH
5238: PPUSH
5239: PPUSH
// for i = 1 to 72 do
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: DOUBLE
5246: LD_INT 1
5248: DEC
5249: ST_TO_ADDR
5250: LD_INT 72
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5312
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5256: LD_VAR 0 5
5260: PPUSH
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 321
5270: PUSH
5271: LD_INT 1
5273: EQUAL
5274: PUSH
5275: LD_VAR 0 5
5279: PPUSH
5280: LD_VAR 0 3
5284: PPUSH
5285: CALL_OW 482
5289: PUSH
5290: LD_INT 1
5292: EQUAL
5293: AND
5294: IFFALSE 5310
// AddComResearch ( lab , i ) ;
5296: LD_VAR 0 2
5300: PPUSH
5301: LD_VAR 0 5
5305: PPUSH
5306: CALL_OW 184
5310: GO 5253
5312: POP
5313: POP
// end ;
5314: LD_VAR 0 4
5318: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5319: LD_INT 0
5321: PPUSH
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5326: LD_ADDR_VAR 0 6
5330: PUSH
5331: LD_INT 22
5333: PUSH
5334: LD_VAR 0 1
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: LD_INT 2
5345: PUSH
5346: LD_INT 25
5348: PUSH
5349: LD_INT 2
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 25
5358: PUSH
5359: LD_INT 16
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 24
5373: PUSH
5374: LD_INT 1000
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_INT 22
5398: PUSH
5399: LD_VAR 0 1
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: PUSH
5408: LD_INT 21
5410: PUSH
5411: LD_INT 3
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: PUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 24
5423: PUSH
5424: LD_INT 1000
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5448: LD_VAR 0 4
5452: PUSH
5453: LD_INT 0
5455: GREATER
5456: PUSH
5457: LD_VAR 0 6
5461: PUSH
5462: LD_INT 0
5464: GREATER
5465: AND
5466: IFFALSE 5532
// begin for i in engineerOk_list do
5468: LD_ADDR_VAR 0 5
5472: PUSH
5473: LD_VAR 0 6
5477: PUSH
5478: FOR_IN
5479: IFFALSE 5530
// begin for j in buildings_list do
5481: LD_ADDR_VAR 0 7
5485: PUSH
5486: LD_VAR 0 4
5490: PUSH
5491: FOR_IN
5492: IFFALSE 5526
// begin AddComExitBuilding ( i ) ;
5494: LD_VAR 0 5
5498: PPUSH
5499: CALL_OW 182
// wait ( 0 0$1 ) ;
5503: LD_INT 35
5505: PPUSH
5506: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5510: LD_VAR 0 5
5514: PPUSH
5515: LD_VAR 0 7
5519: PPUSH
5520: CALL_OW 190
// end ;
5524: GO 5491
5526: POP
5527: POP
// end ;
5528: GO 5478
5530: POP
5531: POP
// end ; if buildings_list = 0 then
5532: LD_VAR 0 4
5536: PUSH
5537: LD_INT 0
5539: EQUAL
5540: IFFALSE 5573
// begin for i in engineerOK_list do
5542: LD_ADDR_VAR 0 5
5546: PUSH
5547: LD_VAR 0 6
5551: PUSH
5552: FOR_IN
5553: IFFALSE 5571
// begin ComEnterUnit ( i , building ) ;
5555: LD_VAR 0 5
5559: PPUSH
5560: LD_VAR 0 2
5564: PPUSH
5565: CALL_OW 120
// end ;
5569: GO 5552
5571: POP
5572: POP
// end ; end ;
5573: LD_VAR 0 3
5577: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
5584: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5585: LD_ADDR_VAR 0 6
5589: PUSH
5590: LD_INT 22
5592: PUSH
5593: LD_VAR 0 1
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: LD_INT 25
5604: PUSH
5605: LD_INT 4
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: CALL_OW 69
5620: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5621: LD_ADDR_VAR 0 9
5625: PUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 22
5633: PUSH
5634: LD_VAR 0 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 21
5645: PUSH
5646: LD_INT 1
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 3
5655: PUSH
5656: LD_INT 24
5658: PUSH
5659: LD_INT 750
5661: PUSH
5662: EMPTY
5663: LIST
5664: LIST
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 70
5679: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5680: LD_VAR 0 9
5684: PUSH
5685: LD_INT 0
5687: GREATER
5688: PUSH
5689: LD_VAR 0 6
5693: PUSH
5694: LD_INT 0
5696: GREATER
5697: AND
5698: IFFALSE 5825
// begin for i = 1 to damageUnits do
5700: LD_ADDR_VAR 0 7
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_VAR 0 9
5714: PUSH
5715: FOR_TO
5716: IFFALSE 5740
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5718: LD_VAR 0 9
5722: PUSH
5723: LD_VAR 0 7
5727: ARRAY
5728: PPUSH
5729: LD_VAR 0 2
5733: PPUSH
5734: CALL_OW 113
5738: GO 5715
5740: POP
5741: POP
// for i in sci_list do
5742: LD_ADDR_VAR 0 7
5746: PUSH
5747: LD_VAR 0 6
5751: PUSH
5752: FOR_IN
5753: IFFALSE 5821
// begin ComExitBuilding ( i ) ;
5755: LD_VAR 0 7
5759: PPUSH
5760: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5764: LD_ADDR_VAR 0 8
5768: PUSH
5769: LD_VAR 0 2
5773: PPUSH
5774: LD_INT 22
5776: PUSH
5777: LD_VAR 0 1
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PPUSH
5786: CALL_OW 70
5790: PUSH
5791: FOR_IN
5792: IFFALSE 5817
// begin AddComHeal ( i , j ) ;
5794: LD_VAR 0 7
5798: PPUSH
5799: LD_VAR 0 8
5803: PPUSH
5804: CALL_OW 188
// wait ( 1 1$0 ) ;
5808: LD_INT 2100
5810: PPUSH
5811: CALL_OW 67
// end ;
5815: GO 5791
5817: POP
5818: POP
// end ;
5819: GO 5752
5821: POP
5822: POP
// end else
5823: GO 5839
// begin AddComEnterUnit ( sci_list , build ) ;
5825: LD_VAR 0 6
5829: PPUSH
5830: LD_VAR 0 4
5834: PPUSH
5835: CALL_OW 180
// end ; end ;
5839: LD_VAR 0 5
5843: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
5851: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5852: LD_INT 22
5854: PUSH
5855: LD_VAR 0 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 21
5866: PUSH
5867: LD_INT 2
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PUSH
5883: LD_VAR 0 3
5887: LESSEQUAL
5888: IFFALSE 5955
// for i = 1 to vehCount do
5890: LD_ADDR_VAR 0 10
5894: PUSH
5895: DOUBLE
5896: LD_INT 1
5898: DEC
5899: ST_TO_ADDR
5900: LD_VAR 0 3
5904: PUSH
5905: FOR_TO
5906: IFFALSE 5953
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5908: LD_VAR 0 2
5912: PPUSH
5913: LD_VAR 0 8
5917: PPUSH
5918: LD_VAR 0 6
5922: PPUSH
5923: LD_VAR 0 7
5927: PPUSH
5928: LD_VAR 0 5
5932: PUSH
5933: LD_INT 1
5935: PPUSH
5936: LD_VAR 0 5
5940: PPUSH
5941: CALL_OW 12
5945: ARRAY
5946: PPUSH
5947: CALL_OW 185
5951: GO 5905
5953: POP
5954: POP
// repeat wait ( 0 0$1 ) ;
5955: LD_INT 35
5957: PPUSH
5958: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5962: LD_INT 22
5964: PUSH
5965: LD_VAR 0 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 21
5976: PUSH
5977: LD_INT 2
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 24
5986: PUSH
5987: LD_INT 250
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: PUSH
6004: LD_VAR 0 3
6008: GREATEREQUAL
6009: IFFALSE 5955
// repeat begin wait ( 0 0$1 ) ;
6011: LD_INT 35
6013: PPUSH
6014: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6018: LD_ADDR_VAR 0 10
6022: PUSH
6023: LD_INT 22
6025: PUSH
6026: LD_VAR 0 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 2
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 24
6047: PUSH
6048: LD_INT 651
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: PUSH
6065: FOR_IN
6066: IFFALSE 6242
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6068: LD_ADDR_VAR 0 13
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: LD_VAR 0 4
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PPUSH
6085: CALL_OW 69
6089: PPUSH
6090: LD_VAR 0 10
6094: PPUSH
6095: CALL_OW 74
6099: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6100: LD_ADDR_VAR 0 14
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_VAR 0 4
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 2
6119: PUSH
6120: LD_INT 59
6122: PUSH
6123: EMPTY
6124: LIST
6125: PUSH
6126: LD_INT 21
6128: PUSH
6129: LD_INT 1
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 21
6138: PUSH
6139: LD_INT 2
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: EMPTY
6157: LIST
6158: PPUSH
6159: CALL_OW 69
6163: PPUSH
6164: LD_VAR 0 10
6168: PPUSH
6169: CALL_OW 74
6173: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6174: LD_VAR 0 10
6178: PPUSH
6179: LD_VAR 0 13
6183: PPUSH
6184: CALL_OW 296
6188: PUSH
6189: LD_INT 8
6191: PLUS
6192: PUSH
6193: LD_VAR 0 10
6197: PPUSH
6198: LD_VAR 0 14
6202: PPUSH
6203: CALL_OW 296
6207: LESS
6208: IFFALSE 6226
// begin ComAttackUnit ( i , target1 ) ;
6210: LD_VAR 0 10
6214: PPUSH
6215: LD_VAR 0 13
6219: PPUSH
6220: CALL_OW 115
// end else
6224: GO 6240
// begin ComAttackUnit ( i , target2 ) ;
6226: LD_VAR 0 10
6230: PPUSH
6231: LD_VAR 0 14
6235: PPUSH
6236: CALL_OW 115
// end ; end ;
6240: GO 6065
6242: POP
6243: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6244: LD_INT 22
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 21
6256: PUSH
6257: LD_INT 2
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: LD_INT 34
6269: PUSH
6270: LD_INT 51
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: PUSH
6291: LD_INT 0
6293: EQUAL
6294: IFFALSE 6011
// end ;
6296: LD_VAR 0 9
6300: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6301: LD_INT 0
6303: PPUSH
6304: PPUSH
6305: PPUSH
6306: PPUSH
// enable ;
6307: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6308: LD_ADDR_VAR 0 7
6312: PUSH
6313: LD_VAR 0 3
6317: PPUSH
6318: CALL_OW 435
6322: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6323: LD_ADDR_VAR 0 6
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_VAR 0 1
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 34
6342: PUSH
6343: LD_VAR 0 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 69
6360: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6361: LD_VAR 0 6
6365: PUSH
6366: LD_INT 0
6368: GREATER
6369: PUSH
6370: LD_VAR 0 3
6374: PPUSH
6375: CALL_OW 435
6379: AND
6380: PUSH
6381: LD_VAR 0 7
6385: PUSH
6386: LD_INT 0
6388: GREATER
6389: AND
6390: IFFALSE 6439
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6392: LD_VAR 0 6
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_VAR 0 7
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: LD_VAR 0 7
6414: PUSH
6415: LD_INT 2
6417: ARRAY
6418: PPUSH
6419: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6423: LD_VAR 0 6
6427: PUSH
6428: LD_INT 1
6430: ARRAY
6431: PPUSH
6432: LD_INT 100
6434: PPUSH
6435: CALL_OW 240
// end ; clear_crates := false ;
6439: LD_ADDR_VAR 0 5
6443: PUSH
6444: LD_INT 0
6446: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6447: LD_INT 35
6449: PPUSH
6450: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6454: LD_VAR 0 6
6458: PUSH
6459: LD_INT 1
6461: ARRAY
6462: PPUSH
6463: CALL_OW 315
6467: NOT
6468: PUSH
6469: LD_VAR 0 5
6473: OR
6474: IFFALSE 6447
// end ;
6476: LD_VAR 0 4
6480: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6481: LD_INT 0
6483: PPUSH
6484: PPUSH
6485: PPUSH
6486: PPUSH
6487: PPUSH
6488: PPUSH
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
6493: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6494: LD_ADDR_VAR 0 9
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_VAR 0 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 21
6513: PUSH
6514: LD_INT 2
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 24
6523: PUSH
6524: LD_INT 660
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 3
6533: PUSH
6534: LD_INT 58
6536: PUSH
6537: EMPTY
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 34
6549: PUSH
6550: LD_INT 53
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PPUSH
6568: CALL_OW 69
6572: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6573: LD_ADDR_VAR 0 10
6577: PUSH
6578: LD_INT 22
6580: PUSH
6581: LD_VAR 0 1
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 21
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 24
6605: PUSH
6606: LD_INT 660
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: PPUSH
6622: CALL_OW 69
6626: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6627: LD_ADDR_VAR 0 11
6631: PUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_INT 22
6639: PUSH
6640: LD_VAR 0 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 21
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 24
6664: PUSH
6665: LD_INT 1000
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: PPUSH
6681: CALL_OW 70
6685: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6686: LD_ADDR_VAR 0 12
6690: PUSH
6691: LD_VAR 0 2
6695: PPUSH
6696: LD_INT 22
6698: PUSH
6699: LD_VAR 0 1
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 21
6710: PUSH
6711: LD_INT 2
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 24
6720: PUSH
6721: LD_INT 1000
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 58
6730: PUSH
6731: EMPTY
6732: LIST
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: LD_INT 34
6739: PUSH
6740: LD_INT 53
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 70
6762: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6763: LD_ADDR_VAR 0 13
6767: PUSH
6768: EMPTY
6769: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6770: LD_ADDR_VAR 0 14
6774: PUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: LD_INT 22
6782: PUSH
6783: LD_VAR 0 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 25
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PPUSH
6806: CALL_OW 70
6810: ST_TO_ADDR
// if damageVehicle_list > 0 then
6811: LD_VAR 0 10
6815: PUSH
6816: LD_INT 0
6818: GREATER
6819: IFFALSE 6857
// begin for i in damageVehicle_list do
6821: LD_ADDR_VAR 0 7
6825: PUSH
6826: LD_VAR 0 10
6830: PUSH
6831: FOR_IN
6832: IFFALSE 6855
// begin ComMoveXY ( i , repX , repY ) ;
6834: LD_VAR 0 7
6838: PPUSH
6839: LD_VAR 0 3
6843: PPUSH
6844: LD_VAR 0 4
6848: PPUSH
6849: CALL_OW 111
// end ;
6853: GO 6831
6855: POP
6856: POP
// end ; if vehicleNeedRepair_list > 0 then
6857: LD_VAR 0 11
6861: PUSH
6862: LD_INT 0
6864: GREATER
6865: IFFALSE 6952
// begin for i in vehicleNeedRepair_list do
6867: LD_ADDR_VAR 0 7
6871: PUSH
6872: LD_VAR 0 11
6876: PUSH
6877: FOR_IN
6878: IFFALSE 6950
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6880: LD_ADDR_VAR 0 13
6884: PUSH
6885: LD_VAR 0 13
6889: PUSH
6890: LD_VAR 0 7
6894: PPUSH
6895: CALL_OW 313
6899: ADD
6900: ST_TO_ADDR
// for j in mechanicInside_list do
6901: LD_ADDR_VAR 0 8
6905: PUSH
6906: LD_VAR 0 13
6910: PUSH
6911: FOR_IN
6912: IFFALSE 6946
// begin ComExitVehicle ( i ) ;
6914: LD_VAR 0 7
6918: PPUSH
6919: CALL_OW 121
// wait ( 0 0$1 ) ;
6923: LD_INT 35
6925: PPUSH
6926: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6930: LD_VAR 0 7
6934: PPUSH
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 129
// end ;
6944: GO 6911
6946: POP
6947: POP
// end ;
6948: GO 6877
6950: POP
6951: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6952: LD_VAR 0 12
6956: PUSH
6957: LD_INT 0
6959: GREATER
6960: IFFALSE 7000
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6962: LD_VAR 0 14
6966: PUSH
6967: LD_INT 1
6969: ARRAY
6970: PPUSH
6971: LD_VAR 0 12
6975: PUSH
6976: LD_INT 1
6978: ARRAY
6979: PPUSH
6980: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6984: LD_VAR 0 12
6988: PUSH
6989: LD_INT 1
6991: ARRAY
6992: PPUSH
6993: LD_INT 100
6995: PPUSH
6996: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7000: LD_VAR 0 9
7004: PUSH
7005: LD_INT 0
7007: GREATER
7008: IFFALSE 7199
// begin for i in vehicleOK_list do
7010: LD_ADDR_VAR 0 7
7014: PUSH
7015: LD_VAR 0 9
7019: PUSH
7020: FOR_IN
7021: IFFALSE 7197
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7023: LD_ADDR_VAR 0 15
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_VAR 0 5
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PPUSH
7040: CALL_OW 69
7044: PPUSH
7045: LD_VAR 0 7
7049: PPUSH
7050: CALL_OW 74
7054: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7055: LD_ADDR_VAR 0 16
7059: PUSH
7060: LD_INT 22
7062: PUSH
7063: LD_VAR 0 5
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 59
7077: PUSH
7078: EMPTY
7079: LIST
7080: PUSH
7081: LD_INT 21
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 21
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: PPUSH
7119: LD_VAR 0 7
7123: PPUSH
7124: CALL_OW 74
7128: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7129: LD_VAR 0 7
7133: PPUSH
7134: LD_VAR 0 15
7138: PPUSH
7139: CALL_OW 296
7143: PUSH
7144: LD_INT 8
7146: PLUS
7147: PUSH
7148: LD_VAR 0 7
7152: PPUSH
7153: LD_VAR 0 16
7157: PPUSH
7158: CALL_OW 296
7162: LESS
7163: IFFALSE 7181
// begin ComAttackUnit ( i , target1 ) ;
7165: LD_VAR 0 7
7169: PPUSH
7170: LD_VAR 0 15
7174: PPUSH
7175: CALL_OW 115
// end else
7179: GO 7195
// begin ComAttackUnit ( i , target2 ) ;
7181: LD_VAR 0 7
7185: PPUSH
7186: LD_VAR 0 16
7190: PPUSH
7191: CALL_OW 115
// end ; end ;
7195: GO 7020
7197: POP
7198: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7199: LD_ADDR_VAR 0 7
7203: PUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: LD_INT 22
7211: PUSH
7212: LD_VAR 0 1
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 25
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PPUSH
7235: CALL_OW 70
7239: NOT
7240: PUSH
7241: FOR_IN
7242: IFFALSE 7265
// ComMoveXY ( i , repX , repY ) ;
7244: LD_VAR 0 7
7248: PPUSH
7249: LD_VAR 0 3
7253: PPUSH
7254: LD_VAR 0 4
7258: PPUSH
7259: CALL_OW 111
7263: GO 7241
7265: POP
7266: POP
// end ;
7267: LD_VAR 0 6
7271: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7276: LD_INT 22
7278: PUSH
7279: LD_VAR 0 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 2
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 69
7306: PUSH
7307: LD_INT 0
7309: GREATER
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_VAR 0 1
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 3
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 24
7338: PUSH
7339: LD_INT 1000
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: PUSH
7360: LD_INT 0
7362: EQUAL
7363: AND
7364: PUSH
7365: LD_VAR 0 2
7369: PUSH
7370: LD_INT 0
7372: GREATER
7373: AND
7374: IFFALSE 7473
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7376: LD_ADDR_VAR 0 4
7380: PUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 25
7395: PUSH
7396: LD_INT 2
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PUSH
7412: FOR_IN
7413: IFFALSE 7471
// begin AddComExitBuilding ( i ) ;
7415: LD_VAR 0 4
7419: PPUSH
7420: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7424: LD_VAR 0 4
7428: PPUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_INT 1
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 2
7445: ARRAY
7446: PPUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_INT 3
7454: ARRAY
7455: PPUSH
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 4
7463: ARRAY
7464: PPUSH
7465: CALL_OW 205
// end ;
7469: GO 7412
7471: POP
7472: POP
// end ; end ;
7473: LD_VAR 0 3
7477: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7478: LD_INT 0
7480: PPUSH
7481: PPUSH
7482: PPUSH
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7487: LD_ADDR_VAR 0 7
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_VAR 0 1
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 56
7516: PUSH
7517: EMPTY
7518: LIST
7519: PUSH
7520: LD_INT 24
7522: PUSH
7523: LD_INT 700
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 69
7540: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7541: LD_ADDR_VAR 0 8
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 1
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 30
7560: PUSH
7561: LD_INT 32
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 58
7570: PUSH
7571: EMPTY
7572: LIST
7573: PUSH
7574: LD_INT 24
7576: PUSH
7577: LD_INT 251
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PPUSH
7590: CALL_OW 69
7594: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7595: LD_ADDR_VAR 0 10
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_VAR 0 1
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 2
7614: PUSH
7615: LD_INT 25
7617: PUSH
7618: LD_INT 5
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 25
7627: PUSH
7628: LD_INT 8
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 9
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PPUSH
7655: CALL_OW 69
7659: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7660: LD_ADDR_VAR 0 9
7664: PUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: CALL_OW 313
7674: PUSH
7675: LD_VAR 0 10
7679: DIFF
7680: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7681: LD_VAR 0 8
7685: PUSH
7686: LD_INT 0
7688: EQUAL
7689: PUSH
7690: LD_VAR 0 9
7694: PUSH
7695: LD_INT 0
7697: EQUAL
7698: AND
7699: IFFALSE 7745
// begin for i in soldiers_list do
7701: LD_ADDR_VAR 0 5
7705: PUSH
7706: LD_VAR 0 7
7710: PUSH
7711: FOR_IN
7712: IFFALSE 7741
// begin if IsOK ( build ) then
7714: LD_VAR 0 2
7718: PPUSH
7719: CALL_OW 302
7723: IFFALSE 7739
// ComEnterUnit ( i , build ) ;
7725: LD_VAR 0 5
7729: PPUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 120
// end ;
7739: GO 7711
7741: POP
7742: POP
// end else
7743: GO 7830
// begin for i = 1 to turretList do
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: DOUBLE
7751: LD_INT 1
7753: DEC
7754: ST_TO_ADDR
7755: LD_VAR 0 8
7759: PUSH
7760: FOR_TO
7761: IFFALSE 7828
// begin for j = 1 to temp do
7763: LD_ADDR_VAR 0 6
7767: PUSH
7768: DOUBLE
7769: LD_INT 1
7771: DEC
7772: ST_TO_ADDR
7773: LD_VAR 0 9
7777: PUSH
7778: FOR_TO
7779: IFFALSE 7824
// begin ComExitBuilding ( temp [ j ] ) ;
7781: LD_VAR 0 9
7785: PUSH
7786: LD_VAR 0 6
7790: ARRAY
7791: PPUSH
7792: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7796: LD_VAR 0 9
7800: PUSH
7801: LD_VAR 0 6
7805: ARRAY
7806: PPUSH
7807: LD_VAR 0 8
7811: PUSH
7812: LD_VAR 0 5
7816: ARRAY
7817: PPUSH
7818: CALL_OW 180
// end ;
7822: GO 7778
7824: POP
7825: POP
// end ;
7826: GO 7760
7828: POP
7829: POP
// end ; end ;
7830: LD_VAR 0 4
7834: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7835: LD_INT 0
7837: PPUSH
7838: PPUSH
7839: PPUSH
7840: PPUSH
7841: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7842: LD_ADDR_VAR 0 6
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 2
7861: PUSH
7862: LD_INT 30
7864: PUSH
7865: LD_INT 31
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 30
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 30
7884: PUSH
7885: LD_INT 33
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 30
7894: PUSH
7895: LD_INT 4
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 30
7904: PUSH
7905: LD_INT 5
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7929: LD_ADDR_VAR 0 7
7933: PUSH
7934: LD_INT 22
7936: PUSH
7937: LD_VAR 0 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 58
7958: PUSH
7959: EMPTY
7960: LIST
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 69
7971: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7972: LD_VAR 0 6
7976: PUSH
7977: LD_INT 0
7979: GREATER
7980: PUSH
7981: LD_VAR 0 7
7985: PUSH
7986: LD_INT 0
7988: GREATER
7989: AND
7990: IFFALSE 8060
// begin for i in turretsList do
7992: LD_ADDR_VAR 0 4
7996: PUSH
7997: LD_VAR 0 6
8001: PUSH
8002: FOR_IN
8003: IFFALSE 8058
// begin for j in enemyBuildings do
8005: LD_ADDR_VAR 0 5
8009: PUSH
8010: LD_VAR 0 7
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8054
// begin if GetDistUnits ( i , j ) < 20 then
8018: LD_VAR 0 4
8022: PPUSH
8023: LD_VAR 0 5
8027: PPUSH
8028: CALL_OW 296
8032: PUSH
8033: LD_INT 20
8035: LESS
8036: IFFALSE 8052
// begin ComAttackUnit ( i , j ) ;
8038: LD_VAR 0 4
8042: PPUSH
8043: LD_VAR 0 5
8047: PPUSH
8048: CALL_OW 115
// end ; end ;
8052: GO 8015
8054: POP
8055: POP
// end ;
8056: GO 8002
8058: POP
8059: POP
// end ; end ;
8060: LD_VAR 0 3
8064: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
8069: PPUSH
8070: PPUSH
8071: PPUSH
8072: PPUSH
8073: PPUSH
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
// for i = 1 to medicCount do
8078: LD_ADDR_VAR 0 14
8082: PUSH
8083: DOUBLE
8084: LD_INT 1
8086: DEC
8087: ST_TO_ADDR
8088: LD_VAR 0 7
8092: PUSH
8093: FOR_TO
8094: IFFALSE 8176
// begin uc_side = side ;
8096: LD_ADDR_OWVAR 20
8100: PUSH
8101: LD_VAR 0 1
8105: ST_TO_ADDR
// uc_nation = nation ;
8106: LD_ADDR_OWVAR 21
8110: PUSH
8111: LD_VAR 0 2
8115: ST_TO_ADDR
// hc_name =  ;
8116: LD_ADDR_OWVAR 26
8120: PUSH
8121: LD_STRING 
8123: ST_TO_ADDR
// hc_gallery =  ;
8124: LD_ADDR_OWVAR 33
8128: PUSH
8129: LD_STRING 
8131: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8132: LD_INT 0
8134: PPUSH
8135: LD_INT 4
8137: PPUSH
8138: LD_VAR 0 8
8142: PPUSH
8143: CALL_OW 380
// un = CreateHuman ;
8147: LD_ADDR_VAR 0 16
8151: PUSH
8152: CALL_OW 44
8156: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8157: LD_VAR 0 16
8161: PPUSH
8162: LD_VAR 0 9
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: CALL_OW 49
// end ;
8174: GO 8093
8176: POP
8177: POP
// for i = 1 to soldierCount do
8178: LD_ADDR_VAR 0 14
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 3
8192: PUSH
8193: FOR_TO
8194: IFFALSE 8276
// begin uc_side = side ;
8196: LD_ADDR_OWVAR 20
8200: PUSH
8201: LD_VAR 0 1
8205: ST_TO_ADDR
// uc_nation = nation ;
8206: LD_ADDR_OWVAR 21
8210: PUSH
8211: LD_VAR 0 2
8215: ST_TO_ADDR
// hc_name =  ;
8216: LD_ADDR_OWVAR 26
8220: PUSH
8221: LD_STRING 
8223: ST_TO_ADDR
// hc_gallery =  ;
8224: LD_ADDR_OWVAR 33
8228: PUSH
8229: LD_STRING 
8231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8232: LD_INT 0
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: LD_VAR 0 8
8242: PPUSH
8243: CALL_OW 380
// un = CreateHuman ;
8247: LD_ADDR_VAR 0 16
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8257: LD_VAR 0 16
8261: PPUSH
8262: LD_VAR 0 9
8266: PPUSH
8267: LD_INT 0
8269: PPUSH
8270: CALL_OW 49
// end ;
8274: GO 8193
8276: POP
8277: POP
// for i = 1 to sniperCount do
8278: LD_ADDR_VAR 0 14
8282: PUSH
8283: DOUBLE
8284: LD_INT 1
8286: DEC
8287: ST_TO_ADDR
8288: LD_VAR 0 4
8292: PUSH
8293: FOR_TO
8294: IFFALSE 8376
// begin uc_side = side ;
8296: LD_ADDR_OWVAR 20
8300: PUSH
8301: LD_VAR 0 1
8305: ST_TO_ADDR
// uc_nation = nation ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_VAR 0 2
8315: ST_TO_ADDR
// hc_name =  ;
8316: LD_ADDR_OWVAR 26
8320: PUSH
8321: LD_STRING 
8323: ST_TO_ADDR
// hc_gallery =  ;
8324: LD_ADDR_OWVAR 33
8328: PUSH
8329: LD_STRING 
8331: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8332: LD_INT 0
8334: PPUSH
8335: LD_INT 5
8337: PPUSH
8338: LD_VAR 0 8
8342: PPUSH
8343: CALL_OW 380
// un = CreateHuman ;
8347: LD_ADDR_VAR 0 16
8351: PUSH
8352: CALL_OW 44
8356: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8357: LD_VAR 0 16
8361: PPUSH
8362: LD_VAR 0 9
8366: PPUSH
8367: LD_INT 0
8369: PPUSH
8370: CALL_OW 49
// end ;
8374: GO 8293
8376: POP
8377: POP
// for i = 1 to bazookCount do
8378: LD_ADDR_VAR 0 14
8382: PUSH
8383: DOUBLE
8384: LD_INT 1
8386: DEC
8387: ST_TO_ADDR
8388: LD_VAR 0 5
8392: PUSH
8393: FOR_TO
8394: IFFALSE 8476
// begin uc_side = side ;
8396: LD_ADDR_OWVAR 20
8400: PUSH
8401: LD_VAR 0 1
8405: ST_TO_ADDR
// uc_nation = nation ;
8406: LD_ADDR_OWVAR 21
8410: PUSH
8411: LD_VAR 0 2
8415: ST_TO_ADDR
// hc_name =  ;
8416: LD_ADDR_OWVAR 26
8420: PUSH
8421: LD_STRING 
8423: ST_TO_ADDR
// hc_gallery =  ;
8424: LD_ADDR_OWVAR 33
8428: PUSH
8429: LD_STRING 
8431: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8432: LD_INT 0
8434: PPUSH
8435: LD_INT 9
8437: PPUSH
8438: LD_VAR 0 8
8442: PPUSH
8443: CALL_OW 380
// un = CreateHuman ;
8447: LD_ADDR_VAR 0 16
8451: PUSH
8452: CALL_OW 44
8456: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8457: LD_VAR 0 16
8461: PPUSH
8462: LD_VAR 0 9
8466: PPUSH
8467: LD_INT 0
8469: PPUSH
8470: CALL_OW 49
// end ;
8474: GO 8393
8476: POP
8477: POP
// for i = 1 to mortalCount do
8478: LD_ADDR_VAR 0 14
8482: PUSH
8483: DOUBLE
8484: LD_INT 1
8486: DEC
8487: ST_TO_ADDR
8488: LD_VAR 0 6
8492: PUSH
8493: FOR_TO
8494: IFFALSE 8576
// begin uc_side = side ;
8496: LD_ADDR_OWVAR 20
8500: PUSH
8501: LD_VAR 0 1
8505: ST_TO_ADDR
// uc_nation = nation ;
8506: LD_ADDR_OWVAR 21
8510: PUSH
8511: LD_VAR 0 2
8515: ST_TO_ADDR
// hc_name =  ;
8516: LD_ADDR_OWVAR 26
8520: PUSH
8521: LD_STRING 
8523: ST_TO_ADDR
// hc_gallery =  ;
8524: LD_ADDR_OWVAR 33
8528: PUSH
8529: LD_STRING 
8531: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8532: LD_INT 0
8534: PPUSH
8535: LD_INT 8
8537: PPUSH
8538: LD_VAR 0 8
8542: PPUSH
8543: CALL_OW 380
// un = CreateHuman ;
8547: LD_ADDR_VAR 0 16
8551: PUSH
8552: CALL_OW 44
8556: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8557: LD_VAR 0 16
8561: PPUSH
8562: LD_VAR 0 9
8566: PPUSH
8567: LD_INT 0
8569: PPUSH
8570: CALL_OW 49
// end ;
8574: GO 8493
8576: POP
8577: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8578: LD_ADDR_VAR 0 19
8582: PUSH
8583: LD_INT 22
8585: PUSH
8586: LD_VAR 0 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 2
8597: PUSH
8598: LD_INT 25
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 25
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 25
8620: PUSH
8621: LD_INT 8
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 25
8630: PUSH
8631: LD_INT 9
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PPUSH
8649: CALL_OW 69
8653: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8654: LD_ADDR_VAR 0 18
8658: PUSH
8659: LD_INT 22
8661: PUSH
8662: LD_VAR 0 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 25
8673: PUSH
8674: LD_INT 4
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PPUSH
8685: CALL_OW 69
8689: ST_TO_ADDR
// for i in medic_list do
8690: LD_ADDR_VAR 0 14
8694: PUSH
8695: LD_VAR 0 18
8699: PUSH
8700: FOR_IN
8701: IFFALSE 8719
// ComMoveToArea ( i , healArea ) ;
8703: LD_VAR 0 14
8707: PPUSH
8708: LD_VAR 0 10
8712: PPUSH
8713: CALL_OW 113
8717: GO 8700
8719: POP
8720: POP
// if strategy = 1 then
8721: LD_VAR 0 12
8725: PUSH
8726: LD_INT 1
8728: EQUAL
8729: IFFALSE 9434
// begin repeat wait ( 0 0$3 ) ;
8731: LD_INT 105
8733: PPUSH
8734: CALL_OW 67
// for i in soldiersOK_list do
8738: LD_ADDR_VAR 0 14
8742: PUSH
8743: LD_VAR 0 19
8747: PUSH
8748: FOR_IN
8749: IFFALSE 8783
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8751: LD_VAR 0 14
8755: PPUSH
8756: LD_INT 80
8758: PPUSH
8759: LD_INT 109
8761: PPUSH
8762: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8766: LD_VAR 0 14
8770: PPUSH
8771: LD_INT 39
8773: PPUSH
8774: LD_INT 49
8776: PPUSH
8777: CALL_OW 174
// end ;
8781: GO 8748
8783: POP
8784: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8785: LD_INT 15
8787: PPUSH
8788: LD_INT 22
8790: PUSH
8791: LD_VAR 0 1
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PPUSH
8800: CALL_OW 70
8804: PUSH
8805: LD_INT 0
8807: GREATER
8808: IFFALSE 8731
// repeat wait ( 0 0$1 ) ;
8810: LD_INT 35
8812: PPUSH
8813: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8817: LD_ADDR_VAR 0 17
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_VAR 0 1
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: LD_INT 24
8842: PUSH
8843: LD_INT 550
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 24
8856: PUSH
8857: LD_INT 250
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 69
8877: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8878: LD_ADDR_VAR 0 19
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: LD_INT 25
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 25
8910: PUSH
8911: LD_INT 5
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 25
8920: PUSH
8921: LD_INT 8
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 9
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 24
8947: PUSH
8948: LD_INT 1000
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 69
8964: ST_TO_ADDR
// if medicCount > 0 then
8965: LD_VAR 0 7
8969: PUSH
8970: LD_INT 0
8972: GREATER
8973: IFFALSE 9047
// begin if damageUnit_list > 0 then
8975: LD_VAR 0 17
8979: PUSH
8980: LD_INT 0
8982: GREATER
8983: IFFALSE 9047
// begin for i in damageUnit_list do
8985: LD_ADDR_VAR 0 14
8989: PUSH
8990: LD_VAR 0 17
8994: PUSH
8995: FOR_IN
8996: IFFALSE 9045
// begin ComMoveToArea ( i , healArea ) ;
8998: LD_VAR 0 14
9002: PPUSH
9003: LD_VAR 0 10
9007: PPUSH
9008: CALL_OW 113
// for j in medic_list do
9012: LD_ADDR_VAR 0 15
9016: PUSH
9017: LD_VAR 0 18
9021: PUSH
9022: FOR_IN
9023: IFFALSE 9041
// AddComHeal ( j , i ) ;
9025: LD_VAR 0 15
9029: PPUSH
9030: LD_VAR 0 14
9034: PPUSH
9035: CALL_OW 188
9039: GO 9022
9041: POP
9042: POP
// end ;
9043: GO 8995
9045: POP
9046: POP
// end ; end ; for i in soldiersOK_list do
9047: LD_ADDR_VAR 0 14
9051: PUSH
9052: LD_VAR 0 19
9056: PUSH
9057: FOR_IN
9058: IFFALSE 9234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9060: LD_ADDR_VAR 0 22
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_VAR 0 11
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PPUSH
9077: CALL_OW 69
9081: PPUSH
9082: LD_VAR 0 14
9086: PPUSH
9087: CALL_OW 74
9091: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9092: LD_ADDR_VAR 0 23
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_VAR 0 11
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 59
9114: PUSH
9115: EMPTY
9116: LIST
9117: PUSH
9118: LD_INT 21
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 21
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: EMPTY
9149: LIST
9150: PPUSH
9151: CALL_OW 69
9155: PPUSH
9156: LD_VAR 0 14
9160: PPUSH
9161: CALL_OW 74
9165: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9166: LD_VAR 0 14
9170: PPUSH
9171: LD_VAR 0 22
9175: PPUSH
9176: CALL_OW 296
9180: PUSH
9181: LD_INT 8
9183: PLUS
9184: PUSH
9185: LD_VAR 0 14
9189: PPUSH
9190: LD_VAR 0 23
9194: PPUSH
9195: CALL_OW 296
9199: LESS
9200: IFFALSE 9218
// begin ComAttackUnit ( i , target1 ) ;
9202: LD_VAR 0 14
9206: PPUSH
9207: LD_VAR 0 22
9211: PPUSH
9212: CALL_OW 115
// end else
9216: GO 9232
// begin ComAttackUnit ( i , target2 ) ;
9218: LD_VAR 0 14
9222: PPUSH
9223: LD_VAR 0 23
9227: PPUSH
9228: CALL_OW 115
// end ; end ;
9232: GO 9057
9234: POP
9235: POP
// for i in soldiersOK_list do
9236: LD_ADDR_VAR 0 14
9240: PUSH
9241: LD_VAR 0 19
9245: PUSH
9246: FOR_IN
9247: IFFALSE 9423
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9249: LD_ADDR_VAR 0 22
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_VAR 0 11
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PPUSH
9266: CALL_OW 69
9270: PPUSH
9271: LD_VAR 0 14
9275: PPUSH
9276: CALL_OW 74
9280: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9281: LD_ADDR_VAR 0 23
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 11
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 2
9300: PUSH
9301: LD_INT 59
9303: PUSH
9304: EMPTY
9305: LIST
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 21
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: PPUSH
9340: CALL_OW 69
9344: PPUSH
9345: LD_VAR 0 14
9349: PPUSH
9350: CALL_OW 74
9354: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9355: LD_VAR 0 14
9359: PPUSH
9360: LD_VAR 0 22
9364: PPUSH
9365: CALL_OW 296
9369: PUSH
9370: LD_INT 8
9372: PLUS
9373: PUSH
9374: LD_VAR 0 14
9378: PPUSH
9379: LD_VAR 0 23
9383: PPUSH
9384: CALL_OW 296
9388: LESS
9389: IFFALSE 9407
// begin ComAttackUnit ( i , target1 ) ;
9391: LD_VAR 0 14
9395: PPUSH
9396: LD_VAR 0 22
9400: PPUSH
9401: CALL_OW 115
// end else
9405: GO 9421
// begin ComAttackUnit ( i , target2 ) ;
9407: LD_VAR 0 14
9411: PPUSH
9412: LD_VAR 0 23
9416: PPUSH
9417: CALL_OW 115
// end ; end ;
9421: GO 9246
9423: POP
9424: POP
// until soldiersOK_list = [ ] ;
9425: LD_VAR 0 19
9429: PUSH
9430: EMPTY
9431: EQUAL
9432: IFFALSE 8810
// end ; if strategy = 2 then
9434: LD_VAR 0 12
9438: PUSH
9439: LD_INT 2
9441: EQUAL
9442: IFFALSE 10147
// begin repeat wait ( 0 0$1 ) ;
9444: LD_INT 35
9446: PPUSH
9447: CALL_OW 67
// for i in soldiersOK_list do
9451: LD_ADDR_VAR 0 14
9455: PUSH
9456: LD_VAR 0 19
9460: PUSH
9461: FOR_IN
9462: IFFALSE 9496
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9464: LD_VAR 0 14
9468: PPUSH
9469: LD_INT 117
9471: PPUSH
9472: LD_INT 97
9474: PPUSH
9475: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9479: LD_VAR 0 14
9483: PPUSH
9484: LD_INT 94
9486: PPUSH
9487: LD_INT 50
9489: PPUSH
9490: CALL_OW 174
// end ;
9494: GO 9461
9496: POP
9497: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9498: LD_INT 16
9500: PPUSH
9501: LD_INT 22
9503: PUSH
9504: LD_VAR 0 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PPUSH
9513: CALL_OW 70
9517: PUSH
9518: LD_INT 0
9520: GREATER
9521: IFFALSE 9444
// repeat wait ( 0 0$3 ) ;
9523: LD_INT 105
9525: PPUSH
9526: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9530: LD_ADDR_VAR 0 17
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_VAR 0 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: LD_INT 3
9552: PUSH
9553: LD_INT 24
9555: PUSH
9556: LD_INT 550
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 24
9569: PUSH
9570: LD_INT 250
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: CALL_OW 69
9590: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9591: LD_ADDR_VAR 0 19
9595: PUSH
9596: LD_INT 22
9598: PUSH
9599: LD_VAR 0 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 2
9610: PUSH
9611: LD_INT 25
9613: PUSH
9614: LD_INT 1
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 25
9623: PUSH
9624: LD_INT 5
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 25
9633: PUSH
9634: LD_INT 8
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 25
9643: PUSH
9644: LD_INT 9
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: LD_INT 1000
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: PPUSH
9673: CALL_OW 69
9677: ST_TO_ADDR
// if medicCount > 0 then
9678: LD_VAR 0 7
9682: PUSH
9683: LD_INT 0
9685: GREATER
9686: IFFALSE 9760
// begin if damageUnit_list > 0 then
9688: LD_VAR 0 17
9692: PUSH
9693: LD_INT 0
9695: GREATER
9696: IFFALSE 9760
// begin for i in damageUnit_list do
9698: LD_ADDR_VAR 0 14
9702: PUSH
9703: LD_VAR 0 17
9707: PUSH
9708: FOR_IN
9709: IFFALSE 9758
// begin ComMoveToArea ( i , healArea ) ;
9711: LD_VAR 0 14
9715: PPUSH
9716: LD_VAR 0 10
9720: PPUSH
9721: CALL_OW 113
// for j in medic_list do
9725: LD_ADDR_VAR 0 15
9729: PUSH
9730: LD_VAR 0 18
9734: PUSH
9735: FOR_IN
9736: IFFALSE 9754
// AddComHeal ( j , i ) ;
9738: LD_VAR 0 15
9742: PPUSH
9743: LD_VAR 0 14
9747: PPUSH
9748: CALL_OW 188
9752: GO 9735
9754: POP
9755: POP
// end ;
9756: GO 9708
9758: POP
9759: POP
// end ; end ; for i in soldiersOK_list do
9760: LD_ADDR_VAR 0 14
9764: PUSH
9765: LD_VAR 0 19
9769: PUSH
9770: FOR_IN
9771: IFFALSE 9947
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9773: LD_ADDR_VAR 0 22
9777: PUSH
9778: LD_INT 22
9780: PUSH
9781: LD_VAR 0 11
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PPUSH
9790: CALL_OW 69
9794: PPUSH
9795: LD_VAR 0 14
9799: PPUSH
9800: CALL_OW 74
9804: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9805: LD_ADDR_VAR 0 23
9809: PUSH
9810: LD_INT 22
9812: PUSH
9813: LD_VAR 0 11
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: LD_INT 59
9827: PUSH
9828: EMPTY
9829: LIST
9830: PUSH
9831: LD_INT 21
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 21
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: PPUSH
9864: CALL_OW 69
9868: PPUSH
9869: LD_VAR 0 14
9873: PPUSH
9874: CALL_OW 74
9878: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9879: LD_VAR 0 14
9883: PPUSH
9884: LD_VAR 0 22
9888: PPUSH
9889: CALL_OW 296
9893: PUSH
9894: LD_INT 8
9896: PLUS
9897: PUSH
9898: LD_VAR 0 14
9902: PPUSH
9903: LD_VAR 0 23
9907: PPUSH
9908: CALL_OW 296
9912: LESS
9913: IFFALSE 9931
// begin ComAttackUnit ( i , target1 ) ;
9915: LD_VAR 0 14
9919: PPUSH
9920: LD_VAR 0 22
9924: PPUSH
9925: CALL_OW 115
// end else
9929: GO 9945
// begin ComAttackUnit ( i , target2 ) ;
9931: LD_VAR 0 14
9935: PPUSH
9936: LD_VAR 0 23
9940: PPUSH
9941: CALL_OW 115
// end ; end ;
9945: GO 9770
9947: POP
9948: POP
// for i in soldiersOK_list do
9949: LD_ADDR_VAR 0 14
9953: PUSH
9954: LD_VAR 0 19
9958: PUSH
9959: FOR_IN
9960: IFFALSE 10136
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9962: LD_ADDR_VAR 0 22
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_VAR 0 11
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 69
9983: PPUSH
9984: LD_VAR 0 14
9988: PPUSH
9989: CALL_OW 74
9993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9994: LD_ADDR_VAR 0 23
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_VAR 0 11
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 59
10016: PUSH
10017: EMPTY
10018: LIST
10019: PUSH
10020: LD_INT 21
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 21
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: PPUSH
10053: CALL_OW 69
10057: PPUSH
10058: LD_VAR 0 14
10062: PPUSH
10063: CALL_OW 74
10067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10068: LD_VAR 0 14
10072: PPUSH
10073: LD_VAR 0 22
10077: PPUSH
10078: CALL_OW 296
10082: PUSH
10083: LD_INT 8
10085: PLUS
10086: PUSH
10087: LD_VAR 0 14
10091: PPUSH
10092: LD_VAR 0 23
10096: PPUSH
10097: CALL_OW 296
10101: LESS
10102: IFFALSE 10120
// begin ComAttackUnit ( i , target1 ) ;
10104: LD_VAR 0 14
10108: PPUSH
10109: LD_VAR 0 22
10113: PPUSH
10114: CALL_OW 115
// end else
10118: GO 10134
// begin ComAttackUnit ( i , target2 ) ;
10120: LD_VAR 0 14
10124: PPUSH
10125: LD_VAR 0 23
10129: PPUSH
10130: CALL_OW 115
// end ; end ;
10134: GO 9959
10136: POP
10137: POP
// until soldiersOK_list = [ ] ;
10138: LD_VAR 0 19
10142: PUSH
10143: EMPTY
10144: EQUAL
10145: IFFALSE 9523
// end ; end ; end_of_file
10147: LD_VAR 0 13
10151: RET
// every 0 0$01 do
10152: GO 10154
10154: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10155: LD_INT 22
10157: PUSH
10158: LD_INT 1
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 25
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PPUSH
10179: CALL_OW 69
10183: PUSH
10184: LD_INT 0
10186: EQUAL
10187: IFFALSE 10201
// SetClass ( JMM , 2 ) ;
10189: LD_EXP 1
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10201: LD_STRING M1
10203: PPUSH
10204: CALL_OW 337
// case difficulty of 1 :
10208: LD_OWVAR 67
10212: PUSH
10213: LD_INT 1
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10231
10221: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10222: LD_STRING M1-1
10224: PPUSH
10225: CALL_OW 337
10229: GO 10268
10231: LD_INT 2
10233: DOUBLE
10234: EQUAL
10235: IFTRUE 10239
10237: GO 10249
10239: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10240: LD_STRING M1-2
10242: PPUSH
10243: CALL_OW 337
10247: GO 10268
10249: LD_INT 3
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10257
10255: GO 10267
10257: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10258: LD_STRING M1-3
10260: PPUSH
10261: CALL_OW 337
10265: GO 10268
10267: POP
// ChangeMissionObjectives ( M1cont ) ;
10268: LD_STRING M1cont
10270: PPUSH
10271: CALL_OW 337
// SaveForQuickRestart ;
10275: CALL_OW 22
// end ;
10279: END
// every 0 0$1 do
10280: GO 10282
10282: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10283: LD_INT 350
10285: PPUSH
10286: LD_INT 875
10288: PPUSH
10289: CALL_OW 12
10293: PPUSH
10294: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10298: LD_INT 5
10300: PPUSH
10301: LD_INT 4
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: CALL_OW 55
// wait ( 0 0$15 ) ;
10311: LD_INT 525
10313: PPUSH
10314: CALL_OW 67
// if IsOk ( Lisa ) then
10318: LD_EXP 2
10322: PPUSH
10323: CALL_OW 302
10327: IFFALSE 10343
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10329: LD_EXP 2
10333: PPUSH
10334: LD_STRING DR0-Lisa-1
10336: PPUSH
10337: CALL_OW 88
// end else
10341: GO 10493
// begin if IsOK ( Cyrus ) then
10343: LD_EXP 4
10347: PPUSH
10348: CALL_OW 302
10352: IFFALSE 10368
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10354: LD_EXP 4
10358: PPUSH
10359: LD_STRING DR0-Cyrus-1
10361: PPUSH
10362: CALL_OW 88
// end else
10366: GO 10493
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 2
10390: PUSH
10391: LD_INT 25
10393: PUSH
10394: LD_INT 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 2
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 26
10440: PUSH
10441: LD_INT 1
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: EMPTY
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: PUSH
10462: LD_EXP 1
10466: PUSH
10467: LD_EXP 8
10471: PUSH
10472: LD_EXP 5
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: LIST
10481: DIFF
10482: PPUSH
10483: LD_STRING DR0-Sol1-1
10485: PPUSH
10486: LD_STRING DR0-Sol1-1
10488: PPUSH
10489: CALL 4566 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10493: LD_INT 22
10495: PUSH
10496: LD_INT 1
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 21
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 2
10515: PUSH
10516: LD_INT 25
10518: PUSH
10519: LD_INT 1
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 25
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 26
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PUSH
10587: LD_EXP 1
10591: PUSH
10592: LD_EXP 8
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: DIFF
10601: PPUSH
10602: LD_STRING DR0-Sol2-1
10604: PPUSH
10605: LD_STRING DR0-Sol2-1
10607: PPUSH
10608: CALL 4566 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_STRING DR0-JMM-1
10619: PPUSH
10620: CALL_OW 88
// end ;
10624: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10625: LD_EXP 5
10629: PPUSH
10630: CALL_OW 302
10634: PUSH
10635: LD_INT 22
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 25
10647: PUSH
10648: LD_INT 16
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PUSH
10664: LD_INT 0
10666: GREATER
10667: AND
10668: IFFALSE 10946
10670: GO 10672
10672: DISABLE
// begin DialogueOn ;
10673: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10677: LD_EXP 5
10681: PPUSH
10682: LD_STRING D10-Frank-1
10684: PPUSH
10685: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10689: LD_INT 22
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 2
10711: PUSH
10712: LD_INT 25
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 25
10724: PUSH
10725: LD_INT 2
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 25
10734: PUSH
10735: LD_INT 3
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 25
10744: PUSH
10745: LD_INT 4
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: PPUSH
10764: CALL_OW 69
10768: PUSH
10769: LD_EXP 1
10773: PUSH
10774: LD_EXP 5
10778: PUSH
10779: LD_EXP 2
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: DIFF
10789: PPUSH
10790: LD_STRING D10-Sol1-1
10792: PPUSH
10793: LD_STRING D10-FSol1-1
10795: PPUSH
10796: CALL 4566 0 3
// Say ( Frank , D10-Frank-2 ) ;
10800: LD_EXP 5
10804: PPUSH
10805: LD_STRING D10-Frank-2
10807: PPUSH
10808: CALL_OW 88
// if IsOK ( Lisa ) then
10812: LD_EXP 2
10816: PPUSH
10817: CALL_OW 302
10821: IFFALSE 10837
// begin Say ( Lisa , D10-Lisa-2 ) ;
10823: LD_EXP 2
10827: PPUSH
10828: LD_STRING D10-Lisa-2
10830: PPUSH
10831: CALL_OW 88
// end else
10835: GO 10942
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10837: LD_INT 22
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 21
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: LD_INT 25
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 25
10872: PUSH
10873: LD_INT 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 25
10882: PUSH
10883: LD_INT 3
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 25
10892: PUSH
10893: LD_INT 4
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 69
10916: PUSH
10917: LD_EXP 1
10921: PUSH
10922: LD_EXP 5
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: DIFF
10931: PPUSH
10932: LD_STRING D10-Sol1-2
10934: PPUSH
10935: LD_STRING D10-FSol1-2
10937: PPUSH
10938: CALL 4566 0 3
// end ; DialogueOff ;
10942: CALL_OW 7
// end ;
10946: END
// every 10 10$30 do
10947: GO 10949
10949: DISABLE
// begin HarrisonSupport ;
10950: CALL 1974 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10954: LD_EXP 16
10958: PPUSH
10959: CALL_OW 310
10963: PPUSH
10964: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10968: LD_EXP 16
10972: PPUSH
10973: LD_STRING DEng-Eng1-1
10975: PPUSH
10976: CALL_OW 88
// wait ( 1 1$0 ) ;
10980: LD_INT 2100
10982: PPUSH
10983: CALL_OW 67
// DialogueOn ;
10987: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10991: LD_EXP 13
10995: PPUSH
10996: LD_STRING DRem-Har-1
10998: PPUSH
10999: CALL_OW 94
// if contactWithRussian = 1 then
11003: LD_EXP 21
11007: PUSH
11008: LD_INT 1
11010: EQUAL
11011: IFFALSE 11027
// begin Say ( JMM , DRem-JMM-1 ) ;
11013: LD_EXP 1
11017: PPUSH
11018: LD_STRING DRem-JMM-1
11020: PPUSH
11021: CALL_OW 88
// end else
11025: GO 11039
// begin Say ( JMM , DRem-JMM-1a ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_STRING DRem-JMM-1a
11034: PPUSH
11035: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11039: LD_EXP 13
11043: PPUSH
11044: LD_STRING DRem-Har-2
11046: PPUSH
11047: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11051: LD_STRING DenisInDelta
11053: PPUSH
11054: LD_INT 0
11056: PPUSH
11057: CALL_OW 30
11061: PUSH
11062: LD_INT 1
11064: EQUAL
11065: IFFALSE 11081
// begin Say ( JMM , DRem-JMM-2 ) ;
11067: LD_EXP 1
11071: PPUSH
11072: LD_STRING DRem-JMM-2
11074: PPUSH
11075: CALL_OW 88
// end else
11079: GO 11093
// begin Say ( JMM , DRem-JMM-2a ) ;
11081: LD_EXP 1
11085: PPUSH
11086: LD_STRING DRem-JMM-2a
11088: PPUSH
11089: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11093: LD_EXP 13
11097: PPUSH
11098: LD_STRING DRem-Har-3
11100: PPUSH
11101: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING DRem-JMM-3
11112: PPUSH
11113: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11117: LD_EXP 13
11121: PPUSH
11122: LD_STRING DRem-Har-4
11124: PPUSH
11125: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11129: LD_STRING DenisInDelta
11131: PPUSH
11132: LD_INT 0
11134: PPUSH
11135: CALL_OW 30
11139: PUSH
11140: LD_INT 1
11142: EQUAL
11143: IFFALSE 11171
// begin Say ( JMM , DRem-JMM-4 ) ;
11145: LD_EXP 1
11149: PPUSH
11150: LD_STRING DRem-JMM-4
11152: PPUSH
11153: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11157: LD_EXP 13
11161: PPUSH
11162: LD_STRING DRem-Har-5
11164: PPUSH
11165: CALL_OW 94
// end else
11169: GO 11204
// begin SetRestrict ( 36 , 1 , true ) ;
11171: LD_INT 36
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11184: LD_INT 15
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11197: LD_STRING MR
11199: PPUSH
11200: CALL_OW 337
// end ; DialogueOff ;
11204: CALL_OW 7
// end ;
11208: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11209: LD_STRING DenisInDelta
11211: PPUSH
11212: LD_INT 0
11214: PPUSH
11215: CALL_OW 30
11219: PUSH
11220: LD_INT 1
11222: EQUAL
11223: IFFALSE 11354
11225: GO 11227
11227: DISABLE
// begin PrepareDenis ;
11228: CALL 1895 0 0
// CenterNowOnUnits ( Denis ) ;
11232: LD_EXP 9
11236: PPUSH
11237: CALL_OW 87
// DialogueOn ;
11241: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11245: LD_EXP 9
11249: PPUSH
11250: LD_STRING DDen-Den-1
11252: PPUSH
11253: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11257: LD_EXP 1
11261: PPUSH
11262: LD_STRING DDen-JMM-1
11264: PPUSH
11265: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11269: LD_EXP 9
11273: PPUSH
11274: LD_STRING DDen-Den-2
11276: PPUSH
11277: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11281: LD_EXP 1
11285: PPUSH
11286: LD_STRING DDen-JMM-2
11288: PPUSH
11289: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11293: LD_EXP 9
11297: PPUSH
11298: LD_STRING DDen-Den-3
11300: PPUSH
11301: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11305: LD_EXP 1
11309: PPUSH
11310: LD_STRING DDen-JMM-3
11312: PPUSH
11313: CALL_OW 88
// DialogueOff ;
11317: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11321: LD_INT 36
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11334: LD_INT 15
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11347: LD_STRING MR
11349: PPUSH
11350: CALL_OW 337
// end ;
11354: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11355: CALL 11400 0 0
11359: PUSH
11360: LD_EXP 9
11364: PPUSH
11365: CALL_OW 302
11369: AND
11370: IFFALSE 11399
11372: GO 11374
11374: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11375: LD_EXP 9
11379: PPUSH
11380: LD_STRING DR1-Den-1
11382: PPUSH
11383: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11387: LD_EXP 1
11391: PPUSH
11392: LD_STRING DR1-JMM-1
11394: PPUSH
11395: CALL_OW 88
// end ;
11399: END
// function CheckOptoLab ; var i ; begin
11400: LD_INT 0
11402: PPUSH
11403: PPUSH
// result = false ;
11404: LD_ADDR_VAR 0 1
11408: PUSH
11409: LD_INT 0
11411: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11412: LD_ADDR_VAR 0 2
11416: PUSH
11417: LD_INT 22
11419: PUSH
11420: LD_INT 1
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 2
11429: PUSH
11430: LD_INT 30
11432: PUSH
11433: LD_INT 7
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 30
11442: PUSH
11443: LD_INT 8
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PPUSH
11459: CALL_OW 69
11463: PUSH
11464: FOR_IN
11465: IFFALSE 11517
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11467: LD_VAR 0 2
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 268
11479: PUSH
11480: LD_INT 15
11482: EQUAL
11483: PUSH
11484: LD_VAR 0 2
11488: PPUSH
11489: LD_INT 2
11491: PPUSH
11492: CALL_OW 268
11496: PUSH
11497: LD_INT 15
11499: EQUAL
11500: OR
11501: IFFALSE 11513
// begin result = true ;
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
// break ;
11511: GO 11517
// end ; break ;
11513: GO 11517
// end ;
11515: GO 11464
11517: POP
11518: POP
// end ;
11519: LD_VAR 0 1
11523: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11524: LD_INT 15
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 321
11534: PUSH
11535: LD_INT 2
11537: EQUAL
11538: PUSH
11539: LD_EXP 9
11543: PPUSH
11544: CALL_OW 302
11548: AND
11549: IFFALSE 11781
11551: GO 11553
11553: DISABLE
// begin DialogueOn ;
11554: CALL_OW 6
// if IsOK ( Denis ) then
11558: LD_EXP 9
11562: PPUSH
11563: CALL_OW 302
11567: IFFALSE 11583
// begin Say ( Denis , DR2-Den-1 ) ;
11569: LD_EXP 9
11573: PPUSH
11574: LD_STRING DR2-Den-1
11576: PPUSH
11577: CALL_OW 88
// end else
11581: GO 11642
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11583: LD_INT 22
11585: PUSH
11586: LD_INT 1
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 25
11605: PUSH
11606: LD_INT 4
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: PPUSH
11618: CALL_OW 69
11622: PUSH
11623: LD_EXP 1
11627: PUSH
11628: EMPTY
11629: LIST
11630: DIFF
11631: PPUSH
11632: LD_STRING DR2-Sci1-1
11634: PPUSH
11635: LD_STRING DR2-FSci1-1
11637: PPUSH
11638: CALL 4566 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11642: LD_EXP 1
11646: PPUSH
11647: LD_STRING DR2-JMM-1
11649: PPUSH
11650: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11654: LD_INT 22
11656: PUSH
11657: LD_INT 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 21
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 2
11676: PUSH
11677: LD_INT 25
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 25
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 25
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 25
11709: PUSH
11710: LD_INT 4
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: PUSH
11734: LD_EXP 1
11738: PUSH
11739: LD_EXP 9
11743: PUSH
11744: LD_EXP 8
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: DIFF
11754: PPUSH
11755: LD_STRING DR2-Sol1-1
11757: PPUSH
11758: LD_STRING DR2-Sol1-11
11760: PPUSH
11761: CALL 4566 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING DR2-JMM-2
11772: PPUSH
11773: CALL_OW 88
// DialogueOff ;
11777: CALL_OW 7
// end ;
11781: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11782: LD_INT 22
11784: PUSH
11785: LD_INT 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 30
11794: PUSH
11795: LD_INT 36
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: PUSH
11811: LD_INT 0
11813: EQUAL
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 1
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 21
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 33
11837: PUSH
11838: LD_INT 2
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: PPUSH
11850: CALL_OW 69
11854: PUSH
11855: LD_INT 0
11857: GREATER
11858: AND
11859: PUSH
11860: LD_EXP 22
11864: PUSH
11865: LD_INT 0
11867: EQUAL
11868: AND
11869: IFFALSE 11941
11871: GO 11873
11873: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11874: LD_INT 22
11876: PUSH
11877: LD_INT 1
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 21
11886: PUSH
11887: LD_INT 1
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 25
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: PPUSH
11909: CALL_OW 69
11913: PUSH
11914: LD_EXP 1
11918: PUSH
11919: EMPTY
11920: LIST
11921: DIFF
11922: PPUSH
11923: LD_STRING D3a-Mech1-1
11925: PPUSH
11926: LD_STRING D3a-Mech1-1
11928: PPUSH
11929: CALL 4566 0 3
// firstTower = 2 ;
11933: LD_ADDR_EXP 22
11937: PUSH
11938: LD_INT 2
11940: ST_TO_ADDR
// end ;
11941: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11942: LD_INT 22
11944: PUSH
11945: LD_INT 3
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 21
11954: PUSH
11955: LD_INT 3
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 69
11970: PUSH
11971: LD_INT 0
11973: EQUAL
11974: IFFALSE 12089
11976: GO 11978
11978: DISABLE
11979: LD_INT 0
11981: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 1
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 21
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 2
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 1
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 25
12022: PUSH
12023: LD_INT 2
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 25
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 25
12042: PUSH
12043: LD_INT 4
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: PPUSH
12062: CALL_OW 69
12066: PUSH
12067: FOR_IN
12068: IFFALSE 12087
// AddExperience ( i , 1 , 10000 ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: LD_INT 10000
12080: PPUSH
12081: CALL_OW 492
12085: GO 12067
12087: POP
12088: POP
// end ;
12089: PPOPN 1
12091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12092: LD_INT 22
12094: PUSH
12095: LD_INT 1
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 36
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: PUSH
12121: LD_INT 0
12123: GREATER
12124: PUSH
12125: LD_INT 22
12127: PUSH
12128: LD_INT 1
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 21
12137: PUSH
12138: LD_INT 2
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 33
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: PUSH
12165: LD_INT 0
12167: GREATER
12168: AND
12169: PUSH
12170: CALL 12752 0 0
12174: AND
12175: IFFALSE 12749
12177: GO 12179
12179: DISABLE
12180: LD_INT 0
12182: PPUSH
12183: PPUSH
12184: PPUSH
12185: PPUSH
12186: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12187: LD_ADDR_VAR 0 3
12191: PUSH
12192: LD_INT 22
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 36
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12221: LD_ADDR_VAR 0 4
12225: PUSH
12226: LD_INT 22
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 21
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: PPUSH
12261: CALL_OW 69
12265: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12266: LD_ADDR_VAR 0 5
12270: PUSH
12271: EMPTY
12272: ST_TO_ADDR
// for i in tmpControlTowers do
12273: LD_ADDR_VAR 0 1
12277: PUSH
12278: LD_VAR 0 3
12282: PUSH
12283: FOR_IN
12284: IFFALSE 12747
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12286: LD_EXP 1
12290: PPUSH
12291: CALL_OW 310
12295: PUSH
12296: LD_VAR 0 1
12300: EQUAL
12301: PUSH
12302: LD_EXP 1
12306: PPUSH
12307: CALL_OW 257
12311: PUSH
12312: LD_INT 3
12314: EQUAL
12315: AND
12316: IFFALSE 12446
// begin InGameOn ;
12318: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12322: LD_VAR 0 4
12326: PUSH
12327: LD_INT 1
12329: ARRAY
12330: PPUSH
12331: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12335: LD_EXP 1
12339: PPUSH
12340: LD_STRING D4a-JMM-1
12342: PPUSH
12343: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12347: LD_VAR 0 4
12351: PUSH
12352: LD_INT 1
12354: ARRAY
12355: PPUSH
12356: LD_EXP 1
12360: PPUSH
12361: CALL_OW 53
// wait ( 0 0$1 ) ;
12365: LD_INT 35
12367: PPUSH
12368: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12372: LD_VAR 0 4
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: PPUSH
12381: LD_VAR 0 4
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PPUSH
12390: CALL_OW 250
12394: PUSH
12395: LD_INT 3
12397: PLUS
12398: PPUSH
12399: LD_VAR 0 4
12403: PUSH
12404: LD_INT 1
12406: ARRAY
12407: PPUSH
12408: CALL_OW 251
12412: PUSH
12413: LD_INT 2
12415: MINUS
12416: PPUSH
12417: CALL_OW 111
// wait ( 0 0$2 ) ;
12421: LD_INT 70
12423: PPUSH
12424: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12428: LD_EXP 1
12432: PPUSH
12433: LD_STRING D4b-JMM-1
12435: PPUSH
12436: CALL_OW 88
// InGameOff ;
12440: CALL_OW 9
// end else
12444: GO 12745
// begin InGameOn ;
12446: CALL_OW 8
// for j in UnitsInside ( i ) do
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_VAR 0 1
12459: PPUSH
12460: CALL_OW 313
12464: PUSH
12465: FOR_IN
12466: IFFALSE 12501
// if GetClass ( j ) = 3 then
12468: LD_VAR 0 2
12472: PPUSH
12473: CALL_OW 257
12477: PUSH
12478: LD_INT 3
12480: EQUAL
12481: IFFALSE 12499
// tmpMechanicInside = tmpMechanicInside ^ j ;
12483: LD_ADDR_VAR 0 5
12487: PUSH
12488: LD_VAR 0 5
12492: PUSH
12493: LD_VAR 0 2
12497: ADD
12498: ST_TO_ADDR
12499: GO 12465
12501: POP
12502: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12503: LD_VAR 0 5
12507: PUSH
12508: LD_INT 1
12510: ARRAY
12511: PPUSH
12512: CALL_OW 258
12516: PUSH
12517: LD_INT 1
12519: EQUAL
12520: IFFALSE 12538
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12522: LD_VAR 0 5
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PPUSH
12531: LD_STRING D4a-Mech1-1
12533: PPUSH
12534: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12538: LD_VAR 0 5
12542: PUSH
12543: LD_INT 1
12545: ARRAY
12546: PPUSH
12547: CALL_OW 258
12551: PUSH
12552: LD_INT 2
12554: EQUAL
12555: IFFALSE 12573
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12557: LD_VAR 0 5
12561: PUSH
12562: LD_INT 1
12564: ARRAY
12565: PPUSH
12566: LD_STRING D4a-FMech1-1
12568: PPUSH
12569: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12573: LD_VAR 0 4
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: PPUSH
12582: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12586: LD_VAR 0 4
12590: PUSH
12591: LD_INT 1
12593: ARRAY
12594: PPUSH
12595: LD_VAR 0 5
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 53
// wait ( 0 0$1 ) ;
12608: LD_INT 35
12610: PPUSH
12611: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12615: LD_VAR 0 4
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PPUSH
12624: LD_VAR 0 4
12628: PUSH
12629: LD_INT 1
12631: ARRAY
12632: PPUSH
12633: CALL_OW 250
12637: PUSH
12638: LD_INT 3
12640: PLUS
12641: PPUSH
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: CALL_OW 251
12655: PUSH
12656: LD_INT 2
12658: MINUS
12659: PPUSH
12660: CALL_OW 111
// wait ( 0 0$2 ) ;
12664: LD_INT 70
12666: PPUSH
12667: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12671: LD_VAR 0 5
12675: PUSH
12676: LD_INT 1
12678: ARRAY
12679: PPUSH
12680: CALL_OW 258
12684: PUSH
12685: LD_INT 1
12687: EQUAL
12688: IFFALSE 12706
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12690: LD_VAR 0 5
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_STRING D4b-Mech1-1
12701: PPUSH
12702: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12706: LD_VAR 0 5
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: CALL_OW 258
12719: PUSH
12720: LD_INT 2
12722: EQUAL
12723: IFFALSE 12741
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12725: LD_VAR 0 5
12729: PUSH
12730: LD_INT 1
12732: ARRAY
12733: PPUSH
12734: LD_STRING D4b-FMech1-1
12736: PPUSH
12737: CALL_OW 88
// InGameOff ;
12741: CALL_OW 9
// end ; end ;
12745: GO 12283
12747: POP
12748: POP
// end ;
12749: PPOPN 5
12751: END
// function CheckMehInside ; var i , j ; begin
12752: LD_INT 0
12754: PPUSH
12755: PPUSH
12756: PPUSH
// result = false ;
12757: LD_ADDR_VAR 0 1
12761: PUSH
12762: LD_INT 0
12764: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12765: LD_ADDR_VAR 0 2
12769: PUSH
12770: LD_INT 22
12772: PUSH
12773: LD_INT 1
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 30
12782: PUSH
12783: LD_INT 36
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PPUSH
12794: CALL_OW 69
12798: PUSH
12799: FOR_IN
12800: IFFALSE 12851
// begin for j in UnitsInside ( i ) do
12802: LD_ADDR_VAR 0 3
12806: PUSH
12807: LD_VAR 0 2
12811: PPUSH
12812: CALL_OW 313
12816: PUSH
12817: FOR_IN
12818: IFFALSE 12847
// begin if GetClass ( j ) = 3 then
12820: LD_VAR 0 3
12824: PPUSH
12825: CALL_OW 257
12829: PUSH
12830: LD_INT 3
12832: EQUAL
12833: IFFALSE 12845
// begin result = true ;
12835: LD_ADDR_VAR 0 1
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// break ;
12843: GO 12847
// end ; end ;
12845: GO 12817
12847: POP
12848: POP
// end ;
12849: GO 12799
12851: POP
12852: POP
// end ;
12853: LD_VAR 0 1
12857: RET
// every 25 25$0 do
12858: GO 12860
12860: DISABLE
// begin PrepareKurt ;
12861: CALL 15654 0 0
// end ;
12865: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12866: LD_EXP 18
12870: PPUSH
12871: LD_INT 9
12873: PPUSH
12874: CALL_OW 308
12878: PUSH
12879: LD_EXP 20
12883: PUSH
12884: LD_INT 1
12886: EQUAL
12887: AND
12888: IFFALSE 12962
12890: GO 12892
12892: DISABLE
// begin RemoveUnit ( Kurt ) ;
12893: LD_EXP 18
12897: PPUSH
12898: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12902: LD_EXP 18
12906: PPUSH
12907: LD_STRING Kurt
12909: PPUSH
12910: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12914: LD_INT 1
12916: PPUSH
12917: LD_INT 2
12919: PPUSH
12920: CALL_OW 81
12924: PUSH
12925: LD_INT 0
12927: EQUAL
12928: IFFALSE 12938
// KurtStatus = 1 ;
12930: LD_ADDR_EXP 19
12934: PUSH
12935: LD_INT 1
12937: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12938: LD_INT 1
12940: PPUSH
12941: LD_INT 2
12943: PPUSH
12944: CALL_OW 81
12948: PUSH
12949: LD_INT 2
12951: EQUAL
12952: IFFALSE 12962
// KurtStatus = 2 ;
12954: LD_ADDR_EXP 19
12958: PUSH
12959: LD_INT 2
12961: ST_TO_ADDR
// end ;
12962: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12963: LD_INT 1
12965: PPUSH
12966: LD_INT 2
12968: PPUSH
12969: CALL_OW 81
12973: PUSH
12974: LD_INT 2
12976: EQUAL
12977: PUSH
12978: LD_EXP 18
12982: PPUSH
12983: CALL_OW 302
12987: AND
12988: IFFALSE 13013
12990: GO 12992
12992: DISABLE
// begin DialogueOn ;
12993: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12997: LD_EXP 18
13001: PPUSH
13002: LD_STRING D2a-Kurt-1
13004: PPUSH
13005: CALL_OW 88
// DialogueOff ;
13009: CALL_OW 7
// end ;
13013: END
// every 35 35$0 do
13014: GO 13016
13016: DISABLE
// begin PrepareJoan ;
13017: CALL 2370 0 0
// wait ( 1 1$0 ) ;
13021: LD_INT 2100
13023: PPUSH
13024: CALL_OW 67
// if IsOK ( Lisa ) then
13028: LD_EXP 2
13032: PPUSH
13033: CALL_OW 302
13037: IFFALSE 13167
// begin DialogueOn ;
13039: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13043: LD_EXP 2
13047: PPUSH
13048: LD_STRING D7-Lisa-1
13050: PPUSH
13051: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13055: LD_EXP 1
13059: PPUSH
13060: LD_STRING D7-JMM-1
13062: PPUSH
13063: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13067: LD_EXP 2
13071: PPUSH
13072: LD_STRING D7-Lisa-2
13074: PPUSH
13075: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13079: LD_EXP 1
13083: PPUSH
13084: LD_STRING D7-JMM-2
13086: PPUSH
13087: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13091: LD_EXP 2
13095: PPUSH
13096: LD_STRING D7-Lisa-3
13098: PPUSH
13099: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13103: LD_EXP 1
13107: PPUSH
13108: LD_STRING D7-JMM-3
13110: PPUSH
13111: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13115: LD_EXP 2
13119: PPUSH
13120: LD_STRING D7-Lisa-4
13122: PPUSH
13123: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13127: LD_EXP 1
13131: PPUSH
13132: LD_STRING D7-JMM-4
13134: PPUSH
13135: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13139: LD_EXP 1
13143: PPUSH
13144: LD_STRING D7-JMM-4a
13146: PPUSH
13147: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13151: LD_EXP 2
13155: PPUSH
13156: LD_STRING D7-Lisa-5
13158: PPUSH
13159: CALL_OW 88
// DialogueOff ;
13163: CALL_OW 7
// end ; end ;
13167: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13168: LD_INT 22
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 69
13196: PUSH
13197: LD_INT 2
13199: GREATEREQUAL
13200: IFFALSE 13220
13202: GO 13204
13204: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13205: LD_STRING MRa
13207: PPUSH
13208: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13212: LD_ADDR_EXP 27
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// end ;
13220: END
// every 4 4$0 do
13221: GO 13223
13223: DISABLE
// PrepareRandoms ( 1 ) ;
13224: LD_INT 1
13226: PPUSH
13227: CALL 3267 0 1
13231: END
// every 10 10$0 do
13232: GO 13234
13234: DISABLE
// PrepareRandoms ( 2 ) ;
13235: LD_INT 2
13237: PPUSH
13238: CALL 3267 0 1
13242: END
// every 28 28$0 do
13243: GO 13245
13245: DISABLE
// PrepareRandoms ( 4 ) ;
13246: LD_INT 4
13248: PPUSH
13249: CALL 3267 0 1
13253: END
// every 32 32$0 do
13254: GO 13256
13256: DISABLE
// PrepareRandoms ( 5 ) ;
13257: LD_INT 5
13259: PPUSH
13260: CALL 3267 0 1
13264: END
// every 35 35$30 do
13265: GO 13267
13267: DISABLE
// PrepareRandoms ( 6 ) ;
13268: LD_INT 6
13270: PPUSH
13271: CALL 3267 0 1
13275: END
// every 37 37$20 do
13276: GO 13278
13278: DISABLE
// PrepareRandoms ( 7 ) ;
13279: LD_INT 7
13281: PPUSH
13282: CALL 3267 0 1
13286: END
// every 5 5$20 do
13287: GO 13289
13289: DISABLE
// begin DialogueOn ;
13290: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13294: LD_EXP 10
13298: PPUSH
13299: LD_STRING D12a-Sci-1
13301: PPUSH
13302: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13306: LD_EXP 1
13310: PPUSH
13311: LD_STRING D12a-JMM-1
13313: PPUSH
13314: CALL_OW 88
// DialogueOff ;
13318: CALL_OW 7
// cratesStatus = 1 ;
13322: LD_ADDR_EXP 34
13326: PUSH
13327: LD_INT 1
13329: ST_TO_ADDR
// end ;
13330: END
// every 13 13$0 do
13331: GO 13333
13333: DISABLE
// begin DialogueOn ;
13334: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13338: LD_EXP 10
13342: PPUSH
13343: LD_STRING D12b-Sci-1
13345: PPUSH
13346: CALL_OW 94
// DialogueOff ;
13350: CALL_OW 7
// cratesStatus = 2 ;
13354: LD_ADDR_EXP 34
13358: PUSH
13359: LD_INT 2
13361: ST_TO_ADDR
// end ;
13362: END
// every 32 32$0 do
13363: GO 13365
13365: DISABLE
// begin DialogueOn ;
13366: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13370: LD_EXP 10
13374: PPUSH
13375: LD_STRING  D12c-Sci-1
13377: PPUSH
13378: CALL_OW 94
// DialogueOff ;
13382: CALL_OW 7
// wait ( 3 3$0 ) ;
13386: LD_INT 6300
13388: PPUSH
13389: CALL_OW 67
// DialogueOn ;
13393: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13397: LD_EXP 10
13401: PPUSH
13402: LD_STRING  D12d-Sci-1
13404: PPUSH
13405: CALL_OW 94
// DialogueOff ;
13409: CALL_OW 7
// cratesStatus = 1 ;
13413: LD_ADDR_EXP 34
13417: PUSH
13418: LD_INT 1
13420: ST_TO_ADDR
// end ;
13421: END
// every 42 42$0 do
13422: GO 13424
13424: DISABLE
// begin DialogueOn ;
13425: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13429: LD_EXP 10
13433: PPUSH
13434: LD_STRING D12e-Sci-1
13436: PPUSH
13437: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13441: LD_EXP 1
13445: PPUSH
13446: LD_STRING D12e-JMM-1
13448: PPUSH
13449: CALL_OW 88
// DialogueOff ;
13453: CALL_OW 7
// cratesStatus = 2 ;
13457: LD_ADDR_EXP 34
13461: PUSH
13462: LD_INT 2
13464: ST_TO_ADDR
// end ;
13465: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13466: LD_INT 22
13468: PUSH
13469: LD_INT 6
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 21
13478: PUSH
13479: LD_INT 2
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 34
13488: PUSH
13489: LD_INT 51
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: PPUSH
13501: CALL_OW 69
13505: PUSH
13506: LD_INT 0
13508: GREATER
13509: IFFALSE 13592
13511: GO 13513
13513: DISABLE
13514: LD_INT 0
13516: PPUSH
// begin enable ;
13517: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13518: LD_ADDR_VAR 0 1
13522: PUSH
13523: LD_INT 22
13525: PUSH
13526: LD_INT 6
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: LD_INT 21
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: PUSH
13570: FOR_IN
13571: IFFALSE 13590
// ComAgressiveMove ( i , 138 , 168 ) ;
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 138
13580: PPUSH
13581: LD_INT 168
13583: PPUSH
13584: CALL_OW 114
13588: GO 13570
13590: POP
13591: POP
// end ;
13592: PPOPN 1
13594: END
// every 0 0$1 do var i ;
13595: GO 13597
13597: DISABLE
13598: LD_INT 0
13600: PPUSH
// begin enable ;
13601: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_INT 5
13609: PPUSH
13610: LD_INT 2
13612: PUSH
13613: LD_INT 22
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_INT 6
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: PPUSH
13641: CALL_OW 70
13645: PUSH
13646: FOR_IN
13647: IFFALSE 13711
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13649: LD_INT 5
13651: PPUSH
13652: LD_INT 22
13654: PUSH
13655: LD_INT 6
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 34
13664: PUSH
13665: LD_INT 51
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PPUSH
13676: CALL_OW 70
13680: PUSH
13681: LD_INT 0
13683: GREATER
13684: IFFALSE 13700
// sendedConvoys = sendedConvoys + 1 ;
13686: LD_ADDR_EXP 35
13690: PUSH
13691: LD_EXP 35
13695: PUSH
13696: LD_INT 1
13698: PLUS
13699: ST_TO_ADDR
// RemoveUnit ( i ) ;
13700: LD_VAR 0 1
13704: PPUSH
13705: CALL_OW 64
// end ;
13709: GO 13646
13711: POP
13712: POP
// end ; end_of_file
13713: PPOPN 1
13715: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13716: LD_VAR 0 1
13720: PUSH
13721: LD_INT 1
13723: EQUAL
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_INT 3
13732: EQUAL
13733: AND
13734: IFFALSE 13744
// contactWithRussian = 1 ;
13736: LD_ADDR_EXP 21
13740: PUSH
13741: LD_INT 1
13743: ST_TO_ADDR
// end ;
13744: PPOPN 2
13746: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13747: LD_VAR 0 1
13751: PPUSH
13752: CALL_OW 266
13756: PUSH
13757: LD_INT 36
13759: EQUAL
13760: PUSH
13761: LD_VAR 0 1
13765: PPUSH
13766: CALL_OW 255
13770: PUSH
13771: LD_INT 1
13773: EQUAL
13774: AND
13775: PUSH
13776: LD_INT 22
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 21
13788: PUSH
13789: LD_INT 2
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 2
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: PPUSH
13811: CALL_OW 69
13815: PUSH
13816: LD_INT 0
13818: EQUAL
13819: AND
13820: PUSH
13821: LD_EXP 22
13825: PUSH
13826: LD_INT 0
13828: EQUAL
13829: AND
13830: IFFALSE 13899
// begin firstTower = 1 ;
13832: LD_ADDR_EXP 22
13836: PUSH
13837: LD_INT 1
13839: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13840: LD_INT 22
13842: PUSH
13843: LD_INT 1
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 21
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 25
13862: PUSH
13863: LD_INT 3
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PUSH
13880: LD_EXP 1
13884: PUSH
13885: EMPTY
13886: LIST
13887: DIFF
13888: PPUSH
13889: LD_STRING D3b-Mech1-1
13891: PPUSH
13892: LD_STRING D3b-Mech1-1
13894: PPUSH
13895: CALL 4566 0 3
// end ; if GetSide ( building ) = 3 then
13899: LD_VAR 0 1
13903: PPUSH
13904: CALL_OW 255
13908: PUSH
13909: LD_INT 3
13911: EQUAL
13912: IFFALSE 13986
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13914: LD_ADDR_EXP 29
13918: PUSH
13919: LD_EXP 29
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 3
13931: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13932: LD_ADDR_EXP 29
13936: PUSH
13937: LD_EXP 29
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 3
13949: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13950: LD_ADDR_EXP 29
13954: PUSH
13955: LD_EXP 29
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 3
13967: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13968: LD_ADDR_EXP 29
13972: PUSH
13973: LD_EXP 29
13977: PPUSH
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 3
13985: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13986: LD_VAR 0 1
13990: PPUSH
13991: CALL_OW 255
13995: PUSH
13996: LD_INT 3
13998: EQUAL
13999: PUSH
14000: LD_VAR 0 1
14004: PPUSH
14005: CALL_OW 266
14009: PUSH
14010: LD_INT 0
14012: EQUAL
14013: PUSH
14014: LD_VAR 0 1
14018: PPUSH
14019: CALL_OW 266
14023: PUSH
14024: LD_INT 2
14026: EQUAL
14027: OR
14028: PUSH
14029: LD_VAR 0 1
14033: PPUSH
14034: CALL_OW 266
14038: PUSH
14039: LD_INT 4
14041: EQUAL
14042: OR
14043: PUSH
14044: EMPTY
14045: LIST
14046: AND
14047: IFFALSE 14058
// ComUpgrade ( building ) ;
14049: LD_VAR 0 1
14053: PPUSH
14054: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14058: LD_VAR 0 1
14062: PPUSH
14063: CALL_OW 255
14067: PUSH
14068: LD_INT 3
14070: EQUAL
14071: PUSH
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL_OW 266
14081: PUSH
14082: LD_INT 32
14084: EQUAL
14085: AND
14086: IFFALSE 14127
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14088: LD_VAR 0 1
14092: PPUSH
14093: LD_INT 42
14095: PUSH
14096: LD_INT 43
14098: PUSH
14099: LD_INT 44
14101: PUSH
14102: LD_INT 46
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 1
14113: PPUSH
14114: LD_INT 4
14116: PPUSH
14117: CALL_OW 12
14121: ARRAY
14122: PPUSH
14123: CALL_OW 208
// end ; end ;
14127: PPOPN 1
14129: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14130: LD_VAR 0 1
14134: PPUSH
14135: CALL_OW 255
14139: PUSH
14140: LD_INT 1
14142: EQUAL
14143: PUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 247
14153: PUSH
14154: LD_INT 1
14156: EQUAL
14157: AND
14158: PUSH
14159: LD_VAR 0 1
14163: PPUSH
14164: CALL_OW 257
14168: PUSH
14169: LD_INT 1
14171: EQUAL
14172: PUSH
14173: LD_VAR 0 1
14177: PPUSH
14178: CALL_OW 257
14182: PUSH
14183: LD_INT 2
14185: EQUAL
14186: OR
14187: PUSH
14188: LD_VAR 0 1
14192: PPUSH
14193: CALL_OW 257
14197: PUSH
14198: LD_INT 3
14200: EQUAL
14201: OR
14202: PUSH
14203: LD_VAR 0 1
14207: PPUSH
14208: CALL_OW 257
14212: PUSH
14213: LD_INT 4
14215: EQUAL
14216: OR
14217: PUSH
14218: EMPTY
14219: LIST
14220: AND
14221: IFFALSE 14237
// unitLost = unitLost + 1 ;
14223: LD_ADDR_EXP 28
14227: PUSH
14228: LD_EXP 28
14232: PUSH
14233: LD_INT 1
14235: PLUS
14236: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 255
14246: PUSH
14247: LD_INT 3
14249: EQUAL
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 247
14260: PUSH
14261: LD_INT 3
14263: EQUAL
14264: AND
14265: IFFALSE 14957
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14267: LD_VAR 0 1
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 31
14279: EQUAL
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 266
14290: PUSH
14291: LD_INT 32
14293: EQUAL
14294: OR
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 266
14305: PUSH
14306: LD_INT 36
14308: EQUAL
14309: OR
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 266
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: OR
14325: PUSH
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL_OW 266
14335: PUSH
14336: LD_INT 24
14338: EQUAL
14339: OR
14340: PUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 266
14350: PUSH
14351: LD_INT 17
14353: EQUAL
14354: OR
14355: PUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 266
14365: PUSH
14366: LD_INT 25
14368: EQUAL
14369: OR
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 266
14380: PUSH
14381: LD_INT 19
14383: EQUAL
14384: OR
14385: PUSH
14386: LD_VAR 0 1
14390: PPUSH
14391: CALL_OW 266
14395: PUSH
14396: LD_INT 20
14398: EQUAL
14399: OR
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 18
14413: EQUAL
14414: OR
14415: PUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 266
14425: PUSH
14426: LD_INT 21
14428: EQUAL
14429: OR
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 266
14440: PUSH
14441: LD_INT 23
14443: EQUAL
14444: OR
14445: PUSH
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 266
14455: PUSH
14456: LD_INT 16
14458: EQUAL
14459: OR
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 6
14473: EQUAL
14474: OR
14475: PUSH
14476: LD_VAR 0 1
14480: PPUSH
14481: CALL_OW 266
14485: PUSH
14486: LD_INT 29
14488: EQUAL
14489: OR
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 266
14500: PUSH
14501: LD_INT 26
14503: EQUAL
14504: OR
14505: PUSH
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 266
14515: PUSH
14516: LD_INT 30
14518: EQUAL
14519: OR
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 266
14530: PUSH
14531: LD_INT 28
14533: EQUAL
14534: OR
14535: PUSH
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 266
14545: PUSH
14546: LD_INT 27
14548: EQUAL
14549: OR
14550: PUSH
14551: LD_VAR 0 1
14555: PPUSH
14556: CALL_OW 266
14560: PUSH
14561: LD_INT 33
14563: EQUAL
14564: OR
14565: PUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: CALL_OW 266
14575: PUSH
14576: LD_INT 2
14578: EQUAL
14579: OR
14580: PUSH
14581: LD_VAR 0 1
14585: PPUSH
14586: CALL_OW 266
14590: PUSH
14591: LD_INT 4
14593: EQUAL
14594: OR
14595: IFFALSE 14681
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14597: LD_ADDR_EXP 29
14601: PUSH
14602: LD_EXP 29
14606: PUSH
14607: LD_VAR 0 1
14611: PPUSH
14612: CALL_OW 266
14616: ADD
14617: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14618: LD_ADDR_EXP 29
14622: PUSH
14623: LD_EXP 29
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 250
14637: ADD
14638: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14639: LD_ADDR_EXP 29
14643: PUSH
14644: LD_EXP 29
14648: PUSH
14649: LD_VAR 0 1
14653: PPUSH
14654: CALL_OW 251
14658: ADD
14659: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14660: LD_ADDR_EXP 29
14664: PUSH
14665: LD_EXP 29
14669: PUSH
14670: LD_VAR 0 1
14674: PPUSH
14675: CALL_OW 254
14679: ADD
14680: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14681: LD_VAR 0 1
14685: PPUSH
14686: CALL_OW 266
14690: PUSH
14691: LD_INT 1
14693: EQUAL
14694: IFFALSE 14773
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14696: LD_ADDR_EXP 29
14700: PUSH
14701: LD_EXP 29
14705: PUSH
14706: LD_INT 0
14708: ADD
14709: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14710: LD_ADDR_EXP 29
14714: PUSH
14715: LD_EXP 29
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 250
14729: ADD
14730: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14731: LD_ADDR_EXP 29
14735: PUSH
14736: LD_EXP 29
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 251
14750: ADD
14751: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14752: LD_ADDR_EXP 29
14756: PUSH
14757: LD_EXP 29
14761: PUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 254
14771: ADD
14772: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 266
14782: PUSH
14783: LD_INT 3
14785: EQUAL
14786: IFFALSE 14865
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14788: LD_ADDR_EXP 29
14792: PUSH
14793: LD_EXP 29
14797: PUSH
14798: LD_INT 2
14800: ADD
14801: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14802: LD_ADDR_EXP 29
14806: PUSH
14807: LD_EXP 29
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 250
14821: ADD
14822: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14823: LD_ADDR_EXP 29
14827: PUSH
14828: LD_EXP 29
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: CALL_OW 251
14842: ADD
14843: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14844: LD_ADDR_EXP 29
14848: PUSH
14849: LD_EXP 29
14853: PUSH
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 254
14863: ADD
14864: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 266
14874: PUSH
14875: LD_INT 5
14877: EQUAL
14878: IFFALSE 14957
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14880: LD_ADDR_EXP 29
14884: PUSH
14885: LD_EXP 29
14889: PUSH
14890: LD_INT 4
14892: ADD
14893: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14894: LD_ADDR_EXP 29
14898: PUSH
14899: LD_EXP 29
14903: PUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 250
14913: ADD
14914: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14915: LD_ADDR_EXP 29
14919: PUSH
14920: LD_EXP 29
14924: PUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 251
14934: ADD
14935: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14936: LD_ADDR_EXP 29
14940: PUSH
14941: LD_EXP 29
14945: PUSH
14946: LD_VAR 0 1
14950: PPUSH
14951: CALL_OW 254
14955: ADD
14956: ST_TO_ADDR
// end ; end ; end ;
14957: PPOPN 1
14959: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 264
14974: PUSH
14975: LD_INT 51
14977: EQUAL
14978: PUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: CALL_OW 255
14988: PUSH
14989: LD_INT 3
14991: EQUAL
14992: AND
14993: IFFALSE 15055
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14995: LD_ADDR_VAR 0 5
14999: PUSH
15000: LD_INT 2
15002: PPUSH
15003: CALL_OW 274
15007: PPUSH
15008: LD_INT 1
15010: PPUSH
15011: CALL_OW 275
15015: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15016: LD_INT 2
15018: PPUSH
15019: CALL_OW 274
15023: PPUSH
15024: LD_INT 1
15026: PPUSH
15027: LD_VAR 0 5
15031: PUSH
15032: LD_INT 100
15034: MINUS
15035: PPUSH
15036: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15040: LD_VAR 0 1
15044: PPUSH
15045: LD_INT 1
15047: PPUSH
15048: LD_INT 100
15050: PPUSH
15051: CALL_OW 291
// end ; if building = rufabsupp then
15055: LD_VAR 0 2
15059: PUSH
15060: LD_INT 17
15062: EQUAL
15063: IFFALSE 15077
// SetSide ( vehicle , 6 ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_INT 6
15072: PPUSH
15073: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15077: LD_VAR 0 2
15081: PPUSH
15082: CALL_OW 255
15086: PUSH
15087: LD_INT 3
15089: EQUAL
15090: PUSH
15091: LD_VAR 0 2
15095: PPUSH
15096: CALL_OW 302
15100: AND
15101: IFFALSE 15171
// begin uc_side = 3 ;
15103: LD_ADDR_OWVAR 20
15107: PUSH
15108: LD_INT 3
15110: ST_TO_ADDR
// uc_nation = 3 ;
15111: LD_ADDR_OWVAR 21
15115: PUSH
15116: LD_INT 3
15118: ST_TO_ADDR
// hc_gallery :=  ;
15119: LD_ADDR_OWVAR 33
15123: PUSH
15124: LD_STRING 
15126: ST_TO_ADDR
// hc_name :=  ;
15127: LD_ADDR_OWVAR 26
15131: PUSH
15132: LD_STRING 
15134: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15135: LD_INT 0
15137: PPUSH
15138: LD_EXP 32
15142: PPUSH
15143: LD_EXP 33
15147: PPUSH
15148: CALL_OW 12
15152: PPUSH
15153: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15157: CALL_OW 44
15161: PPUSH
15162: LD_VAR 0 2
15166: PPUSH
15167: CALL_OW 52
// end ; end ;
15171: PPOPN 5
15173: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15174: LD_VAR 0 1
15178: PPUSH
15179: CALL_OW 255
15183: PUSH
15184: LD_INT 3
15186: EQUAL
15187: IFFALSE 15203
// tamedApemans = tamedApemans + 1 ;
15189: LD_ADDR_EXP 30
15193: PUSH
15194: LD_EXP 30
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: ST_TO_ADDR
// end ; end_of_file
15203: PPOPN 2
15205: END
// every 0 0$30 trigger cratesStatus = 1 do
15206: LD_EXP 34
15210: PUSH
15211: LD_INT 1
15213: EQUAL
15214: IFFALSE 15278
15216: GO 15218
15218: DISABLE
// begin enable ;
15219: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15220: LD_INT 350
15222: PUSH
15223: LD_INT 1050
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 1
15232: PPUSH
15233: LD_INT 2
15235: PPUSH
15236: CALL_OW 12
15240: ARRAY
15241: PPUSH
15242: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15246: LD_INT 4
15248: PUSH
15249: LD_INT 5
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 1
15258: PPUSH
15259: LD_INT 2
15261: PPUSH
15262: CALL_OW 12
15266: ARRAY
15267: PPUSH
15268: LD_INT 7
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 55
// end ;
15278: END
// every 1 1$0 trigger cratesStatus = 2 do
15279: LD_EXP 34
15283: PUSH
15284: LD_INT 2
15286: EQUAL
15287: IFFALSE 15351
15289: GO 15291
15291: DISABLE
// begin enable ;
15292: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15293: LD_INT 3150
15295: PUSH
15296: LD_INT 4550
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 1
15305: PPUSH
15306: LD_INT 2
15308: PPUSH
15309: CALL_OW 12
15313: ARRAY
15314: PPUSH
15315: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15319: LD_INT 2
15321: PUSH
15322: LD_INT 5
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 1
15331: PPUSH
15332: LD_INT 2
15334: PPUSH
15335: CALL_OW 12
15339: ARRAY
15340: PPUSH
15341: LD_INT 8
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 55
// end ; end_of_file
15351: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15352: LD_EXP 23
15356: PUSH
15357: LD_INT 1
15359: EQUAL
15360: IFFALSE 15651
15362: GO 15364
15364: DISABLE
15365: LD_INT 0
15367: PPUSH
15368: PPUSH
15369: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15370: LD_ADDR_VAR 0 2
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 21
15387: PUSH
15388: LD_INT 3
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 2
15397: PUSH
15398: LD_INT 30
15400: PUSH
15401: LD_INT 0
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: LD_INT 1
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: PPUSH
15428: CALL_OW 69
15432: ST_TO_ADDR
// for i in tmp do
15433: LD_ADDR_VAR 0 1
15437: PUSH
15438: LD_VAR 0 2
15442: PUSH
15443: FOR_IN
15444: IFFALSE 15477
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_VAR 0 3
15455: PUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: CALL_OW 274
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 275
15473: PLUS
15474: ST_TO_ADDR
15475: GO 15443
15477: POP
15478: POP
// strings = [ ] ;
15479: LD_ADDR_EXP 26
15483: PUSH
15484: EMPTY
15485: ST_TO_ADDR
// if tmp = 0 then
15486: LD_VAR 0 2
15490: PUSH
15491: LD_INT 0
15493: EQUAL
15494: IFFALSE 15519
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15496: LD_ADDR_EXP 26
15500: PUSH
15501: LD_EXP 26
15505: PUSH
15506: LD_STRING #Am06-1
15508: PUSH
15509: LD_EXP 24
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: ADD
15518: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15519: LD_VAR 0 2
15523: PUSH
15524: LD_INT 0
15526: GREATER
15527: PUSH
15528: LD_EXP 24
15532: PUSH
15533: LD_VAR 0 3
15537: GREATER
15538: AND
15539: IFFALSE 15570
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15541: LD_ADDR_EXP 26
15545: PUSH
15546: LD_EXP 26
15550: PUSH
15551: LD_STRING #Am06-1
15553: PUSH
15554: LD_EXP 24
15558: PUSH
15559: LD_VAR 0 3
15563: MINUS
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: ADD
15569: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15570: LD_VAR 0 2
15574: PUSH
15575: LD_INT 0
15577: GREATER
15578: PUSH
15579: LD_EXP 24
15583: PUSH
15584: LD_VAR 0 3
15588: LESSEQUAL
15589: AND
15590: IFFALSE 15613
// strings = strings ^ [ #Am06-1 , 0 ] ;
15592: LD_ADDR_EXP 26
15596: PUSH
15597: LD_EXP 26
15601: PUSH
15602: LD_STRING #Am06-1
15604: PUSH
15605: LD_INT 0
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: ADD
15612: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15613: LD_ADDR_EXP 25
15617: PUSH
15618: LD_EXP 25
15622: PUSH
15623: LD_INT 35
15625: MINUS
15626: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15627: LD_ADDR_EXP 26
15631: PUSH
15632: LD_EXP 26
15636: PUSH
15637: LD_STRING #Am06-2
15639: PUSH
15640: LD_EXP 25
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: ADD
15649: ST_TO_ADDR
// enable ;
15650: ENABLE
// end ; end_of_file
15651: PPOPN 3
15653: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15654: LD_INT 0
15656: PPUSH
15657: PPUSH
15658: PPUSH
15659: PPUSH
15660: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15661: LD_ADDR_VAR 0 2
15665: PUSH
15666: LD_INT 22
15668: PUSH
15669: LD_INT 1
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 25
15691: PUSH
15692: LD_INT 1
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 25
15701: PUSH
15702: LD_INT 2
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 25
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 25
15721: PUSH
15722: LD_INT 4
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15746: LD_ADDR_VAR 0 3
15750: PUSH
15751: LD_INT 1
15753: PPUSH
15754: LD_VAR 0 2
15758: PPUSH
15759: CALL_OW 12
15763: ST_TO_ADDR
// uc_side = 2 ;
15764: LD_ADDR_OWVAR 20
15768: PUSH
15769: LD_INT 2
15771: ST_TO_ADDR
// uc_nation = 2 ;
15772: LD_ADDR_OWVAR 21
15776: PUSH
15777: LD_INT 2
15779: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15780: LD_ADDR_EXP 18
15784: PUSH
15785: LD_STRING Kurt
15787: PPUSH
15788: LD_INT 0
15790: PPUSH
15791: CALL 4509 0 2
15795: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
15796: LD_EXP 18
15800: PPUSH
15801: LD_VAR 0 2
15805: PUSH
15806: LD_VAR 0 3
15810: ARRAY
15811: PPUSH
15812: CALL_OW 250
15816: PPUSH
15817: LD_VAR 0 2
15821: PUSH
15822: LD_VAR 0 3
15826: ARRAY
15827: PPUSH
15828: CALL_OW 251
15832: PPUSH
15833: LD_INT 5
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 50
// InGameOn ;
15843: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15847: LD_EXP 18
15851: PPUSH
15852: CALL_OW 87
// wait ( 0 0$2 ) ;
15856: LD_INT 70
15858: PPUSH
15859: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15863: LD_VAR 0 2
15867: PUSH
15868: LD_VAR 0 3
15872: ARRAY
15873: PPUSH
15874: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15878: LD_VAR 0 2
15882: PUSH
15883: LD_VAR 0 3
15887: ARRAY
15888: PPUSH
15889: CALL_OW 122
// wait ( 0 0$1 ) ;
15893: LD_INT 35
15895: PPUSH
15896: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15900: LD_EXP 18
15904: PPUSH
15905: LD_VAR 0 2
15909: PUSH
15910: LD_VAR 0 3
15914: ARRAY
15915: PPUSH
15916: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15920: LD_VAR 0 2
15924: PUSH
15925: LD_VAR 0 3
15929: ARRAY
15930: PPUSH
15931: LD_EXP 18
15935: PPUSH
15936: CALL_OW 119
// DialogueOn ;
15940: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15944: LD_EXP 18
15948: PPUSH
15949: LD_STRING D2-Kurt-1
15951: PPUSH
15952: CALL_OW 88
// if tmp [ rnd ] = JMM then
15956: LD_VAR 0 2
15960: PUSH
15961: LD_VAR 0 3
15965: ARRAY
15966: PUSH
15967: LD_EXP 1
15971: EQUAL
15972: IFFALSE 16064
// begin Say ( JMM , D2-JMM-1 ) ;
15974: LD_EXP 1
15978: PPUSH
15979: LD_STRING D2-JMM-1
15981: PPUSH
15982: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15986: LD_EXP 18
15990: PPUSH
15991: LD_STRING D2-Kurt-2
15993: PPUSH
15994: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15998: LD_EXP 1
16002: PPUSH
16003: LD_STRING D2-JMM-2
16005: PPUSH
16006: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16010: LD_EXP 18
16014: PPUSH
16015: LD_STRING D2-Kurt-3
16017: PPUSH
16018: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16022: LD_EXP 1
16026: PPUSH
16027: LD_STRING D2-JMM-3
16029: PPUSH
16030: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16034: LD_EXP 18
16038: PPUSH
16039: LD_STRING D2-Kurt-4
16041: PPUSH
16042: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16046: LD_EXP 1
16050: PPUSH
16051: LD_STRING D2-JMM-4
16053: PPUSH
16054: CALL_OW 88
// DialogueOff ;
16058: CALL_OW 7
// end else
16062: GO 16494
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_VAR 0 3
16073: ARRAY
16074: PPUSH
16075: CALL_OW 258
16079: PUSH
16080: LD_INT 1
16082: EQUAL
16083: IFFALSE 16103
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
16085: LD_VAR 0 2
16089: PUSH
16090: LD_VAR 0 3
16094: ARRAY
16095: PPUSH
16096: LD_STRING D2-Sol1-1
16098: PPUSH
16099: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16103: LD_VAR 0 2
16107: PUSH
16108: LD_VAR 0 3
16112: ARRAY
16113: PPUSH
16114: CALL_OW 258
16118: PUSH
16119: LD_INT 2
16121: EQUAL
16122: IFFALSE 16142
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
16124: LD_VAR 0 2
16128: PUSH
16129: LD_VAR 0 3
16133: ARRAY
16134: PPUSH
16135: LD_STRING D2-FSol1-1
16137: PPUSH
16138: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16142: LD_EXP 18
16146: PPUSH
16147: LD_STRING D2-Kurt-2
16149: PPUSH
16150: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16154: LD_VAR 0 2
16158: PUSH
16159: LD_VAR 0 3
16163: ARRAY
16164: PPUSH
16165: CALL_OW 258
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: IFFALSE 16193
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
16175: LD_VAR 0 2
16179: PUSH
16180: LD_VAR 0 3
16184: ARRAY
16185: PPUSH
16186: LD_STRING D2-Sol1-2
16188: PPUSH
16189: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16193: LD_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: ARRAY
16203: PPUSH
16204: CALL_OW 258
16208: PUSH
16209: LD_INT 2
16211: EQUAL
16212: IFFALSE 16232
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
16214: LD_VAR 0 2
16218: PUSH
16219: LD_VAR 0 3
16223: ARRAY
16224: PPUSH
16225: LD_STRING D2-FSol1-2
16227: PPUSH
16228: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16232: LD_EXP 18
16236: PPUSH
16237: LD_STRING D2-Kurt-3
16239: PPUSH
16240: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16244: LD_VAR 0 2
16248: PUSH
16249: LD_VAR 0 3
16253: ARRAY
16254: PPUSH
16255: CALL_OW 258
16259: PUSH
16260: LD_INT 1
16262: EQUAL
16263: IFFALSE 16283
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16265: LD_VAR 0 2
16269: PUSH
16270: LD_VAR 0 3
16274: ARRAY
16275: PPUSH
16276: LD_STRING D2-Sol1-3
16278: PPUSH
16279: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16283: LD_VAR 0 2
16287: PUSH
16288: LD_VAR 0 3
16292: ARRAY
16293: PPUSH
16294: CALL_OW 258
16298: PUSH
16299: LD_INT 2
16301: EQUAL
16302: IFFALSE 16322
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16304: LD_VAR 0 2
16308: PUSH
16309: LD_VAR 0 3
16313: ARRAY
16314: PPUSH
16315: LD_STRING D2-FSol1-3
16317: PPUSH
16318: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16322: LD_EXP 18
16326: PPUSH
16327: LD_STRING D2-Kurt-4
16329: PPUSH
16330: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16334: LD_VAR 0 2
16338: PUSH
16339: LD_VAR 0 3
16343: ARRAY
16344: PPUSH
16345: CALL_OW 258
16349: PUSH
16350: LD_INT 1
16352: EQUAL
16353: IFFALSE 16373
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16355: LD_VAR 0 2
16359: PUSH
16360: LD_VAR 0 3
16364: ARRAY
16365: PPUSH
16366: LD_STRING D2-Sol1-4
16368: PPUSH
16369: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16373: LD_VAR 0 2
16377: PUSH
16378: LD_VAR 0 3
16382: ARRAY
16383: PPUSH
16384: CALL_OW 258
16388: PUSH
16389: LD_INT 2
16391: EQUAL
16392: IFFALSE 16412
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16394: LD_VAR 0 2
16398: PUSH
16399: LD_VAR 0 3
16403: ARRAY
16404: PPUSH
16405: LD_STRING D2-FSol1-4
16407: PPUSH
16408: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16412: LD_VAR 0 2
16416: PUSH
16417: LD_VAR 0 3
16421: ARRAY
16422: PPUSH
16423: CALL_OW 258
16427: PUSH
16428: LD_INT 1
16430: EQUAL
16431: IFFALSE 16451
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16433: LD_VAR 0 2
16437: PUSH
16438: LD_VAR 0 3
16442: ARRAY
16443: PPUSH
16444: LD_STRING D2-Sol1-5
16446: PPUSH
16447: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16451: LD_VAR 0 2
16455: PUSH
16456: LD_VAR 0 3
16460: ARRAY
16461: PPUSH
16462: CALL_OW 258
16466: PUSH
16467: LD_INT 2
16469: EQUAL
16470: IFFALSE 16490
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16472: LD_VAR 0 2
16476: PUSH
16477: LD_VAR 0 3
16481: ARRAY
16482: PPUSH
16483: LD_STRING D2-FSol1-5
16485: PPUSH
16486: CALL_OW 88
// DialogueOff ;
16490: CALL_OW 7
// end ; dec = ShowQuery1 ;
16494: LD_ADDR_VAR 0 4
16498: PUSH
16499: CALL 5105 0 0
16503: ST_TO_ADDR
// if dec = 1 then
16504: LD_VAR 0 4
16508: PUSH
16509: LD_INT 1
16511: EQUAL
16512: IFFALSE 16554
// begin DialogueOn ;
16514: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16518: LD_EXP 18
16522: PPUSH
16523: LD_STRING D2a-Kurt-1
16525: PPUSH
16526: CALL_OW 88
// DialogueOff ;
16530: CALL_OW 7
// InGameOff ;
16534: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16538: LD_INT 1
16540: PPUSH
16541: LD_INT 2
16543: PPUSH
16544: LD_INT 2
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 80
// end ; if dec = 2 then
16554: LD_VAR 0 4
16558: PUSH
16559: LD_INT 2
16561: EQUAL
16562: IFFALSE 17158
// begin DialogueOn ;
16564: CALL_OW 6
// if tmp [ rnd ] = JMM then
16568: LD_VAR 0 2
16572: PUSH
16573: LD_VAR 0 3
16577: ARRAY
16578: PUSH
16579: LD_EXP 1
16583: EQUAL
16584: IFFALSE 16640
// begin Say ( JMM , D2b-JMM-1 ) ;
16586: LD_EXP 1
16590: PPUSH
16591: LD_STRING D2b-JMM-1
16593: PPUSH
16594: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16598: LD_EXP 18
16602: PPUSH
16603: LD_STRING D2b-Kurt-1
16605: PPUSH
16606: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16610: LD_EXP 1
16614: PPUSH
16615: LD_STRING D2b-JMM-2
16617: PPUSH
16618: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16622: LD_EXP 18
16626: PPUSH
16627: LD_STRING D2b-Kurt-2
16629: PPUSH
16630: CALL_OW 88
// DialogueOff ;
16634: CALL_OW 7
// end else
16638: GO 16902
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16640: LD_VAR 0 2
16644: PUSH
16645: LD_VAR 0 3
16649: ARRAY
16650: PPUSH
16651: CALL_OW 258
16655: PUSH
16656: LD_INT 1
16658: EQUAL
16659: IFFALSE 16679
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16661: LD_VAR 0 2
16665: PUSH
16666: LD_VAR 0 3
16670: ARRAY
16671: PPUSH
16672: LD_STRING D2b-Sol1-1
16674: PPUSH
16675: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16679: LD_VAR 0 2
16683: PUSH
16684: LD_VAR 0 3
16688: ARRAY
16689: PPUSH
16690: CALL_OW 258
16694: PUSH
16695: LD_INT 2
16697: EQUAL
16698: IFFALSE 16718
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16700: LD_VAR 0 2
16704: PUSH
16705: LD_VAR 0 3
16709: ARRAY
16710: PPUSH
16711: LD_STRING D2b-FSol1-1
16713: PPUSH
16714: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16718: LD_EXP 18
16722: PPUSH
16723: LD_STRING D2b-Kurt-1
16725: PPUSH
16726: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16730: LD_VAR 0 2
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PPUSH
16741: CALL_OW 258
16745: PUSH
16746: LD_INT 1
16748: EQUAL
16749: IFFALSE 16769
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16751: LD_VAR 0 2
16755: PUSH
16756: LD_VAR 0 3
16760: ARRAY
16761: PPUSH
16762: LD_STRING D2b-Sol1-2
16764: PPUSH
16765: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16769: LD_VAR 0 2
16773: PUSH
16774: LD_VAR 0 3
16778: ARRAY
16779: PPUSH
16780: CALL_OW 258
16784: PUSH
16785: LD_INT 2
16787: EQUAL
16788: IFFALSE 16808
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16790: LD_VAR 0 2
16794: PUSH
16795: LD_VAR 0 3
16799: ARRAY
16800: PPUSH
16801: LD_STRING D2b-FSol1-2
16803: PPUSH
16804: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16808: LD_EXP 18
16812: PPUSH
16813: LD_STRING D2b-Kurt-2
16815: PPUSH
16816: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16820: LD_VAR 0 2
16824: PUSH
16825: LD_VAR 0 3
16829: ARRAY
16830: PPUSH
16831: CALL_OW 258
16835: PUSH
16836: LD_INT 1
16838: EQUAL
16839: IFFALSE 16859
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16841: LD_VAR 0 2
16845: PUSH
16846: LD_VAR 0 3
16850: ARRAY
16851: PPUSH
16852: LD_STRING D2c-Sol1-2
16854: PPUSH
16855: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16859: LD_VAR 0 2
16863: PUSH
16864: LD_VAR 0 3
16868: ARRAY
16869: PPUSH
16870: CALL_OW 258
16874: PUSH
16875: LD_INT 2
16877: EQUAL
16878: IFFALSE 16898
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16880: LD_VAR 0 2
16884: PUSH
16885: LD_VAR 0 3
16889: ARRAY
16890: PPUSH
16891: LD_STRING D2c-FSol1-2
16893: PPUSH
16894: CALL_OW 88
// DialogueOff ;
16898: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16902: LD_ADDR_VAR 0 5
16906: PUSH
16907: CALL 5179 0 0
16911: ST_TO_ADDR
// if dec2 = 1 then
16912: LD_VAR 0 5
16916: PUSH
16917: LD_INT 1
16919: EQUAL
16920: IFFALSE 16958
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16922: LD_EXP 18
16926: PPUSH
16927: LD_STRING D2a-Kurt-1
16929: PPUSH
16930: CALL_OW 88
// DialogueOff ;
16934: CALL_OW 7
// InGameOff ;
16938: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16942: LD_INT 1
16944: PPUSH
16945: LD_INT 2
16947: PPUSH
16948: LD_INT 2
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 80
// end ; if dec2 = 2 then
16958: LD_VAR 0 5
16962: PUSH
16963: LD_INT 2
16965: EQUAL
16966: IFFALSE 17158
// begin if tmp [ rnd ] = JMM then
16968: LD_VAR 0 2
16972: PUSH
16973: LD_VAR 0 3
16977: ARRAY
16978: PUSH
16979: LD_EXP 1
16983: EQUAL
16984: IFFALSE 17040
// begin Say ( JMM , D2c-JMM-1 ) ;
16986: LD_EXP 1
16990: PPUSH
16991: LD_STRING D2c-JMM-1
16993: PPUSH
16994: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16998: LD_EXP 18
17002: PPUSH
17003: LD_STRING D2c-Kurt-1
17005: PPUSH
17006: CALL_OW 88
// DialogueOff ;
17010: CALL_OW 7
// InGameOff ;
17014: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17018: LD_EXP 18
17022: PPUSH
17023: LD_INT 9
17025: PPUSH
17026: CALL_OW 113
// readyToEscape = 1 ;
17030: LD_ADDR_EXP 20
17034: PUSH
17035: LD_INT 1
17037: ST_TO_ADDR
// end else
17038: GO 17158
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17040: LD_VAR 0 2
17044: PUSH
17045: LD_VAR 0 3
17049: ARRAY
17050: PPUSH
17051: CALL_OW 258
17055: PUSH
17056: LD_INT 1
17058: EQUAL
17059: IFFALSE 17079
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17061: LD_VAR 0 2
17065: PUSH
17066: LD_VAR 0 3
17070: ARRAY
17071: PPUSH
17072: LD_STRING D2c-Sol1-1
17074: PPUSH
17075: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17079: LD_VAR 0 2
17083: PUSH
17084: LD_VAR 0 3
17088: ARRAY
17089: PPUSH
17090: CALL_OW 258
17094: PUSH
17095: LD_INT 2
17097: EQUAL
17098: IFFALSE 17118
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17100: LD_VAR 0 2
17104: PUSH
17105: LD_VAR 0 3
17109: ARRAY
17110: PPUSH
17111: LD_STRING D2c-FSol1-1
17113: PPUSH
17114: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17118: LD_EXP 18
17122: PPUSH
17123: LD_STRING D2c-Kurt-1
17125: PPUSH
17126: CALL_OW 88
// DialogueOff ;
17130: CALL_OW 7
// InGameOff ;
17134: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17138: LD_EXP 18
17142: PPUSH
17143: LD_INT 9
17145: PPUSH
17146: CALL_OW 113
// readyToEscape = 1 ;
17150: LD_ADDR_EXP 20
17154: PUSH
17155: LD_INT 1
17157: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17158: LD_VAR 0 4
17162: PUSH
17163: LD_INT 3
17165: EQUAL
17166: IFFALSE 17362
// begin DialogueOn ;
17168: CALL_OW 6
// if tmp [ rnd ] = JMM then
17172: LD_VAR 0 2
17176: PUSH
17177: LD_VAR 0 3
17181: ARRAY
17182: PUSH
17183: LD_EXP 1
17187: EQUAL
17188: IFFALSE 17244
// begin Say ( JMM , D2c-JMM-1 ) ;
17190: LD_EXP 1
17194: PPUSH
17195: LD_STRING D2c-JMM-1
17197: PPUSH
17198: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17202: LD_EXP 18
17206: PPUSH
17207: LD_STRING D2c-Kurt-1
17209: PPUSH
17210: CALL_OW 88
// DialogueOff ;
17214: CALL_OW 7
// InGameOff ;
17218: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17222: LD_EXP 18
17226: PPUSH
17227: LD_INT 9
17229: PPUSH
17230: CALL_OW 113
// readyToEscape = 1 ;
17234: LD_ADDR_EXP 20
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// end else
17242: GO 17362
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17244: LD_VAR 0 2
17248: PUSH
17249: LD_VAR 0 3
17253: ARRAY
17254: PPUSH
17255: CALL_OW 258
17259: PUSH
17260: LD_INT 1
17262: EQUAL
17263: IFFALSE 17283
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17265: LD_VAR 0 2
17269: PUSH
17270: LD_VAR 0 3
17274: ARRAY
17275: PPUSH
17276: LD_STRING D2c-Sol1-1
17278: PPUSH
17279: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17283: LD_VAR 0 2
17287: PUSH
17288: LD_VAR 0 3
17292: ARRAY
17293: PPUSH
17294: CALL_OW 258
17298: PUSH
17299: LD_INT 2
17301: EQUAL
17302: IFFALSE 17322
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17304: LD_VAR 0 2
17308: PUSH
17309: LD_VAR 0 3
17313: ARRAY
17314: PPUSH
17315: LD_STRING D2c-FSol1-1
17317: PPUSH
17318: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17322: LD_EXP 18
17326: PPUSH
17327: LD_STRING D2c-Kurt-1
17329: PPUSH
17330: CALL_OW 88
// DialogueOff ;
17334: CALL_OW 7
// InGameOff ;
17338: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17342: LD_EXP 18
17346: PPUSH
17347: LD_INT 9
17349: PPUSH
17350: CALL_OW 113
// readyToEscape = 1 ;
17354: LD_ADDR_EXP 20
17358: PUSH
17359: LD_INT 1
17361: ST_TO_ADDR
// end ; end ; end ; end_of_file
17362: LD_VAR 0 1
17366: RET
// every 0 0$1 do
17367: GO 17369
17369: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17370: LD_INT 3
17372: PPUSH
17373: LD_INT 32
17375: PPUSH
17376: LD_INT 3
17378: PPUSH
17379: CALL 5234 0 3
17383: END
// every 0 0$1 do
17384: GO 17386
17386: DISABLE
// begin enable ;
17387: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17388: LD_INT 3
17390: PPUSH
17391: LD_INT 2
17393: PPUSH
17394: CALL 5319 0 2
// if disableHealAI = 0 then
17398: LD_EXP 31
17402: PUSH
17403: LD_INT 0
17405: EQUAL
17406: IFFALSE 17424
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17408: LD_INT 3
17410: PPUSH
17411: LD_INT 10
17413: PPUSH
17414: LD_INT 11
17416: PPUSH
17417: LD_INT 32
17419: PPUSH
17420: CALL 5578 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17424: LD_INT 3
17426: PPUSH
17427: LD_INT 51
17429: PPUSH
17430: LD_INT 7
17432: PPUSH
17433: CALL 6301 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17437: LD_INT 3
17439: PPUSH
17440: LD_INT 14
17442: PPUSH
17443: LD_INT 121
17445: PPUSH
17446: LD_INT 100
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL 6481 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17456: LD_INT 3
17458: PPUSH
17459: LD_EXP 29
17463: PPUSH
17464: CALL 7272 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17468: LD_INT 3
17470: PPUSH
17471: LD_INT 8
17473: PUSH
17474: LD_INT 67
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_INT 2
17486: PPUSH
17487: CALL_OW 12
17491: ARRAY
17492: PPUSH
17493: LD_INT 11
17495: PPUSH
17496: CALL 7478 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: CALL 7835 0 2
// end ;
17510: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17511: LD_INT 22
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 21
17523: PUSH
17524: LD_INT 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 55
17533: PUSH
17534: EMPTY
17535: LIST
17536: PUSH
17537: LD_INT 3
17539: PUSH
17540: LD_INT 34
17542: PUSH
17543: LD_INT 51
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: PUSH
17565: LD_INT 0
17567: EQUAL
17568: IFFALSE 17720
17570: GO 17572
17572: DISABLE
// begin enable ;
17573: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17574: LD_INT 2
17576: PPUSH
17577: CALL_OW 274
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 1000
17587: PPUSH
17588: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17592: LD_INT 3
17594: PPUSH
17595: LD_INT 21
17597: PPUSH
17598: LD_INT 4
17600: PUSH
17601: LD_INT 5
17603: PUSH
17604: LD_INT 5
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_OWVAR 67
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 43
17623: PUSH
17624: LD_INT 43
17626: PUSH
17627: LD_INT 43
17629: PUSH
17630: LD_INT 44
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 44
17641: PUSH
17642: LD_INT 44
17644: PUSH
17645: LD_INT 44
17647: PUSH
17648: LD_INT 43
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 44
17659: PUSH
17660: LD_INT 44
17662: PUSH
17663: LD_INT 44
17665: PUSH
17666: LD_INT 44
17668: PUSH
17669: LD_INT 46
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: PUSH
17679: EMPTY
17680: LIST
17681: LIST
17682: LIST
17683: PUSH
17684: LD_OWVAR 67
17688: ARRAY
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: LD_INT 22
17698: PUSH
17699: LD_INT 22
17701: PUSH
17702: LD_INT 24
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: PUSH
17710: LD_OWVAR 67
17714: ARRAY
17715: PPUSH
17716: CALL 5844 0 8
// end ;
17720: END
// every 5 5$0 do
17721: GO 17723
17723: DISABLE
// begin enable ;
17724: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17725: LD_INT 17
17727: PPUSH
17728: LD_INT 22
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: LD_INT 42
17739: PUSH
17740: LD_INT 43
17742: PUSH
17743: LD_INT 44
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 1
17753: PPUSH
17754: LD_INT 3
17756: PPUSH
17757: CALL_OW 12
17761: ARRAY
17762: PPUSH
17763: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17767: LD_INT 17
17769: PPUSH
17770: LD_INT 22
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: LD_INT 51
17781: PPUSH
17782: CALL_OW 185
// end ;
17786: END
// every 2 2$0 do var i , j ;
17787: GO 17789
17789: DISABLE
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17794: LD_INT 14700
17796: PUSH
17797: LD_INT 33600
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_INT 2
17809: PPUSH
17810: CALL_OW 12
17814: ARRAY
17815: PPUSH
17816: CALL_OW 67
// disableHealAI = 1 ;
17820: LD_ADDR_EXP 31
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17828: LD_ADDR_VAR 0 1
17832: PUSH
17833: LD_INT 22
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 25
17845: PUSH
17846: LD_INT 4
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PPUSH
17857: CALL_OW 69
17861: PUSH
17862: FOR_IN
17863: IFFALSE 17876
// ComExitBuilding ( i ) ;
17865: LD_VAR 0 1
17869: PPUSH
17870: CALL_OW 122
17874: GO 17862
17876: POP
17877: POP
// wait ( 0 0$1 ) ;
17878: LD_INT 35
17880: PPUSH
17881: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17885: LD_INT 35
17887: PPUSH
17888: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17892: LD_ADDR_VAR 0 1
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_INT 3
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 25
17909: PUSH
17910: LD_INT 4
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 69
17925: PUSH
17926: FOR_IN
17927: IFFALSE 18004
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17929: LD_ADDR_VAR 0 2
17933: PUSH
17934: LD_INT 19
17936: PPUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 25
17949: PUSH
17950: LD_INT 12
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PPUSH
17961: CALL_OW 70
17965: PUSH
17966: FOR_IN
17967: IFFALSE 18000
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17969: LD_VAR 0 1
17973: PPUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: CALL_OW 250
17983: PPUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: CALL_OW 251
17993: PPUSH
17994: CALL_OW 191
// end ;
17998: GO 17966
18000: POP
18001: POP
// end ;
18002: GO 17926
18004: POP
18005: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18006: LD_INT 22
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 25
18018: PUSH
18019: LD_INT 4
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PPUSH
18030: CALL_OW 69
18034: PUSH
18035: LD_INT 0
18037: EQUAL
18038: PUSH
18039: LD_EXP 30
18043: PUSH
18044: LD_INT 6
18046: PUSH
18047: LD_INT 7
18049: PUSH
18050: LD_INT 8
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: PUSH
18058: LD_OWVAR 67
18062: ARRAY
18063: GREATEREQUAL
18064: OR
18065: PUSH
18066: LD_INT 19
18068: PPUSH
18069: LD_INT 22
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 25
18081: PUSH
18082: LD_INT 12
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 70
18097: PUSH
18098: LD_INT 0
18100: EQUAL
18101: OR
18102: IFFALSE 17885
// disableHealAI = 0 ;
18104: LD_ADDR_EXP 31
18108: PUSH
18109: LD_INT 0
18111: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18112: LD_ADDR_VAR 0 1
18116: PUSH
18117: LD_INT 22
18119: PUSH
18120: LD_INT 3
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 25
18129: PUSH
18130: LD_INT 12
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 69
18145: PUSH
18146: FOR_IN
18147: IFFALSE 18163
// SetClass ( i , 16 ) ;
18149: LD_VAR 0 1
18153: PPUSH
18154: LD_INT 16
18156: PPUSH
18157: CALL_OW 336
18161: GO 18146
18163: POP
18164: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18165: LD_ADDR_VAR 0 1
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_INT 3
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 25
18182: PUSH
18183: LD_INT 4
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PPUSH
18194: CALL_OW 69
18198: PUSH
18199: FOR_IN
18200: IFFALSE 18219
// ComMoveXY ( i , 113 , 94 ) ;
18202: LD_VAR 0 1
18206: PPUSH
18207: LD_INT 113
18209: PPUSH
18210: LD_INT 94
18212: PPUSH
18213: CALL_OW 111
18217: GO 18199
18219: POP
18220: POP
// end ;
18221: PPOPN 2
18223: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18224: LD_INT 21
18226: PPUSH
18227: CALL_OW 255
18231: PUSH
18232: LD_INT 3
18234: EQUAL
18235: PUSH
18236: LD_INT 21
18238: PPUSH
18239: CALL_OW 302
18243: AND
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 3
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 34
18257: PUSH
18258: LD_INT 51
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PPUSH
18269: CALL_OW 69
18273: PUSH
18274: LD_INT 0
18276: EQUAL
18277: AND
18278: IFFALSE 18310
18280: GO 18282
18282: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18283: LD_INT 21
18285: PPUSH
18286: LD_INT 23
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: LD_INT 1
18294: PPUSH
18295: LD_INT 51
18297: PPUSH
18298: CALL_OW 185
// wait ( 5 5$0 ) ;
18302: LD_INT 10500
18304: PPUSH
18305: CALL_OW 67
// enable ;
18309: ENABLE
// end ; end_of_file
18310: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18311: LD_EXP 25
18315: PUSH
18316: LD_INT 0
18318: LESSEQUAL
18319: IFFALSE 18459
18321: GO 18323
18323: DISABLE
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18329: LD_ADDR_VAR 0 2
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 21
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 2
18356: PUSH
18357: LD_INT 30
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 30
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: ST_TO_ADDR
// for i in tmp do
18392: LD_ADDR_VAR 0 1
18396: PUSH
18397: LD_VAR 0 2
18401: PUSH
18402: FOR_IN
18403: IFFALSE 18436
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18405: LD_ADDR_VAR 0 3
18409: PUSH
18410: LD_VAR 0 3
18414: PUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 274
18424: PPUSH
18425: LD_INT 1
18427: PPUSH
18428: CALL_OW 275
18432: PLUS
18433: ST_TO_ADDR
18434: GO 18402
18436: POP
18437: POP
// if yourCrates >= needCrates then
18438: LD_VAR 0 3
18442: PUSH
18443: LD_EXP 24
18447: GREATEREQUAL
18448: IFFALSE 18459
// begin FinishMission ( yourCrates ) ;
18450: LD_VAR 0 3
18454: PPUSH
18455: CALL 18462 0 1
// end ; end ;
18459: PPOPN 3
18461: END
// export function FinishMission ( crates ) ; begin
18462: LD_INT 0
18464: PPUSH
// if crates + 100 > crates then
18465: LD_VAR 0 1
18469: PUSH
18470: LD_INT 100
18472: PLUS
18473: PUSH
18474: LD_VAR 0 1
18478: GREATER
18479: IFFALSE 18503
// begin AddMedal ( cans , 1 ) ;
18481: LD_STRING cans
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18491: LD_INT 1
18493: PPUSH
18494: LD_STRING 06_crates_1
18496: PPUSH
18497: CALL_OW 39
// end else
18501: GO 18524
// begin AddMedal ( cans , - 1 ) ;
18503: LD_STRING cans
18505: PPUSH
18506: LD_INT 1
18508: NEG
18509: PPUSH
18510: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18514: LD_INT 0
18516: PPUSH
18517: LD_STRING 06_crates_1
18519: PPUSH
18520: CALL_OW 39
// end ; if unitLost < 2 then
18524: LD_EXP 28
18528: PUSH
18529: LD_INT 2
18531: LESS
18532: IFFALSE 18546
// begin AddMedal ( people , 1 ) ;
18534: LD_STRING people
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: CALL_OW 101
// end else
18544: GO 18557
// begin AddMedal ( people , - 1 ) ;
18546: LD_STRING people
18548: PPUSH
18549: LD_INT 1
18551: NEG
18552: PPUSH
18553: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18557: LD_EXP 27
18561: PPUSH
18562: LD_STRING 06_remoteVehs_1
18564: PPUSH
18565: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18569: LD_EXP 27
18573: PUSH
18574: LD_INT 1
18576: EQUAL
18577: IFFALSE 18591
// begin AddMedal ( remote , 1 ) ;
18579: LD_STRING remote
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 101
// end else
18589: GO 18631
// begin if GetTech ( 18 , 1 ) = state_enabled then
18591: LD_INT 18
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 321
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: IFFALSE 18620
// begin AddMedal ( remote , - 1 ) ;
18607: LD_STRING remote
18609: PPUSH
18610: LD_INT 1
18612: NEG
18613: PPUSH
18614: CALL_OW 101
// end else
18618: GO 18631
// begin AddMedal ( remote , - 2 ) ;
18620: LD_STRING remote
18622: PPUSH
18623: LD_INT 2
18625: NEG
18626: PPUSH
18627: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18631: LD_EXP 19
18635: PPUSH
18636: LD_STRING 06_KurtStatus_1
18638: PPUSH
18639: CALL_OW 39
// GiveMedals ( Main ) ;
18643: LD_STRING Main
18645: PPUSH
18646: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18650: LD_INT 50
18652: PUSH
18653: EMPTY
18654: LIST
18655: PUSH
18656: LD_INT 22
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 21
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: LD_INT 25
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 2
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 3
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: LD_INT 25
18711: PUSH
18712: LD_INT 4
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: PPUSH
18732: CALL_OW 69
18736: PPUSH
18737: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18741: LD_EXP 1
18745: PPUSH
18746: LD_STRING JMM
18748: PPUSH
18749: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
18753: LD_EXP 2
18757: PPUSH
18758: LD_STRING Lisa
18760: PPUSH
18761: CALL 4722 0 2
// EnchancedSaveCharacters ( Bobby , Bobby ) ;
18765: LD_EXP 3
18769: PPUSH
18770: LD_STRING Bobby
18772: PPUSH
18773: CALL 4722 0 2
// EnchancedSaveCharacters ( Cyrus , Cyrus ) ;
18777: LD_EXP 4
18781: PPUSH
18782: LD_STRING Cyrus
18784: PPUSH
18785: CALL 4722 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
18789: LD_EXP 5
18793: PPUSH
18794: LD_STRING Frank
18796: PPUSH
18797: CALL 4722 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
18801: LD_EXP 6
18805: PPUSH
18806: LD_STRING Brown
18808: PPUSH
18809: CALL 4722 0 2
// EnchancedSaveCharacters ( Donaldson , Donaldson ) ;
18813: LD_EXP 7
18817: PPUSH
18818: LD_STRING Donaldson
18820: PPUSH
18821: CALL 4722 0 2
// EnchancedSaveCharacters ( Gladstone , Gladstone ) ;
18825: LD_EXP 8
18829: PPUSH
18830: LD_STRING Gladstone
18832: PPUSH
18833: CALL 4722 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
18837: LD_EXP 9
18841: PPUSH
18842: LD_STRING Denis
18844: PPUSH
18845: CALL 4722 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
18849: LD_EXP 14
18853: PPUSH
18854: LD_STRING Joan
18856: PPUSH
18857: CALL 4722 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18861: LD_EXP 15
18865: PPUSH
18866: LD_STRING 06_JoanStatus_1
18868: PPUSH
18869: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18873: LD_INT 50
18875: PUSH
18876: EMPTY
18877: LIST
18878: PUSH
18879: LD_INT 22
18881: PUSH
18882: LD_INT 1
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 21
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 25
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 25
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 25
18924: PUSH
18925: LD_INT 3
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 25
18934: PUSH
18935: LD_INT 4
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: PUSH
18960: LD_EXP 1
18964: PUSH
18965: LD_EXP 2
18969: PUSH
18970: LD_EXP 3
18974: PUSH
18975: LD_EXP 4
18979: PUSH
18980: LD_EXP 5
18984: PUSH
18985: LD_EXP 6
18989: PUSH
18990: LD_EXP 7
18994: PUSH
18995: LD_EXP 8
18999: PUSH
19000: LD_EXP 9
19004: PUSH
19005: LD_EXP 14
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: DIFF
19022: PPUSH
19023: LD_STRING 06_other_survivors
19025: PPUSH
19026: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19030: LD_INT 50
19032: PUSH
19033: EMPTY
19034: LIST
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 25
19061: PUSH
19062: LD_INT 12
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 25
19071: PUSH
19072: LD_INT 16
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 69
19094: PPUSH
19095: LD_STRING 06_other_apemans
19097: PPUSH
19098: CALL_OW 38
// YouWin ;
19102: CALL_OW 103
// end ; end_of_file
19106: LD_VAR 0 2
19110: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
19111: LD_EXP 35
19115: PUSH
19116: LD_INT 4
19118: PUSH
19119: LD_INT 3
19121: PUSH
19122: LD_INT 3
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: PUSH
19130: LD_OWVAR 67
19134: ARRAY
19135: EQUAL
19136: IFFALSE 19251
19138: GO 19140
19140: DISABLE
// begin enable ;
19141: ENABLE
// sendedConvoys = 0 ;
19142: LD_ADDR_EXP 35
19146: PUSH
19147: LD_INT 0
19149: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19150: LD_INT 6
19152: PPUSH
19153: LD_INT 3
19155: PPUSH
19156: LD_INT 3
19158: PPUSH
19159: LD_INT 4
19161: PPUSH
19162: CALL_OW 12
19166: PUSH
19167: LD_INT 4
19169: PPUSH
19170: LD_INT 5
19172: PPUSH
19173: CALL_OW 12
19177: PUSH
19178: LD_INT 6
19180: PPUSH
19181: LD_INT 7
19183: PPUSH
19184: CALL_OW 12
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: LD_OWVAR 67
19198: ARRAY
19199: PPUSH
19200: LD_INT 0
19202: PPUSH
19203: LD_INT 0
19205: PPUSH
19206: LD_INT 0
19208: PPUSH
19209: LD_INT 3
19211: PPUSH
19212: LD_EXP 32
19216: PPUSH
19217: LD_EXP 33
19221: PPUSH
19222: CALL_OW 12
19226: PPUSH
19227: LD_INT 18
19229: PPUSH
19230: LD_INT 17
19232: PPUSH
19233: LD_INT 1
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: LD_INT 2
19241: PPUSH
19242: CALL_OW 12
19246: PPUSH
19247: CALL 8065 0 12
// end ; end_of_file
19251: END
// export function PrepareNature ; var i , un ; begin
19252: LD_INT 0
19254: PPUSH
19255: PPUSH
19256: PPUSH
// for i = 1 to Difficulty + 2 do
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: DOUBLE
19263: LD_INT 1
19265: DEC
19266: ST_TO_ADDR
19267: LD_OWVAR 67
19271: PUSH
19272: LD_INT 2
19274: PLUS
19275: PUSH
19276: FOR_TO
19277: IFFALSE 19412
// begin hc_sex = sex_male ;
19279: LD_ADDR_OWVAR 27
19283: PUSH
19284: LD_INT 1
19286: ST_TO_ADDR
// uc_side = 0 ;
19287: LD_ADDR_OWVAR 20
19291: PUSH
19292: LD_INT 0
19294: ST_TO_ADDR
// uc_nation = nation_nature ;
19295: LD_ADDR_OWVAR 21
19299: PUSH
19300: LD_INT 0
19302: ST_TO_ADDR
// hc_class = class_tiger ;
19303: LD_ADDR_OWVAR 28
19307: PUSH
19308: LD_INT 14
19310: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19311: LD_ADDR_OWVAR 31
19315: PUSH
19316: LD_EXP 33
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
19336: LD_ADDR_OWVAR 35
19340: PUSH
19341: LD_INT 30
19343: PPUSH
19344: LD_INT 40
19346: PPUSH
19347: CALL_OW 12
19351: PUSH
19352: LD_INT 40
19354: PPUSH
19355: LD_INT 50
19357: PPUSH
19358: CALL_OW 12
19362: PUSH
19363: LD_INT 50
19365: PPUSH
19366: LD_INT 60
19368: PPUSH
19369: CALL_OW 12
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PUSH
19379: LD_OWVAR 67
19383: ARRAY
19384: ST_TO_ADDR
// un = CreateHuman ;
19385: LD_ADDR_VAR 0 3
19389: PUSH
19390: CALL_OW 44
19394: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19395: LD_VAR 0 3
19399: PPUSH
19400: LD_INT 20
19402: PPUSH
19403: LD_INT 0
19405: PPUSH
19406: CALL_OW 49
// end ;
19410: GO 19276
19412: POP
19413: POP
// for i = 1 to rand ( 3 , 4 ) do
19414: LD_ADDR_VAR 0 2
19418: PUSH
19419: DOUBLE
19420: LD_INT 1
19422: DEC
19423: ST_TO_ADDR
19424: LD_INT 3
19426: PPUSH
19427: LD_INT 4
19429: PPUSH
19430: CALL_OW 12
19434: PUSH
19435: FOR_TO
19436: IFFALSE 19530
// begin hc_sex = sex_male ;
19438: LD_ADDR_OWVAR 27
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// uc_side = 0 ;
19446: LD_ADDR_OWVAR 20
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// uc_nation = nation_nature ;
19454: LD_ADDR_OWVAR 21
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// hc_class = 18 ;
19462: LD_ADDR_OWVAR 28
19466: PUSH
19467: LD_INT 18
19469: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19470: LD_ADDR_OWVAR 31
19474: PUSH
19475: LD_EXP 33
19479: PUSH
19480: LD_INT 0
19482: PUSH
19483: LD_INT 0
19485: PUSH
19486: LD_INT 0
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: ST_TO_ADDR
// hc_agressivity = 0 ;
19495: LD_ADDR_OWVAR 35
19499: PUSH
19500: LD_INT 0
19502: ST_TO_ADDR
// un = CreateHuman ;
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: CALL_OW 44
19512: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19513: LD_VAR 0 3
19517: PPUSH
19518: LD_INT 20
19520: PPUSH
19521: LD_INT 0
19523: PPUSH
19524: CALL_OW 49
// end ;
19528: GO 19435
19530: POP
19531: POP
// end ;
19532: LD_VAR 0 1
19536: RET
