// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: NOP4
// RandomizeAll ;
   4: NOP4
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: NOP4
// debugMode = 0 ;
  18: NOP4
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: NOP4
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: NOP4
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: NOP4
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: NOP4
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: NOP4
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: NOP4
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: NOP4
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: NOP4
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: NOP4
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: NOP4
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: NOP4
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: NOP4
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: NOP4
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: NOP4
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: NOP4
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: NOP4
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: NOP4
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: NOP4
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// disableHealAI = 0 ;
 178: NOP4
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// strings = [ ] ;
 186: NOP4
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// PrepareNature ;
 193: NOP4
// PrepareDifficulty ;
 197: NOP4
// PrepareRussian ;
 201: NOP4
// PrepareVehicles ;
 205: NOP4
// PrepareHeroes ;
 209: NOP4
// PrepareOthers ;
 213: NOP4
// PreparePlayerApemans ;
 217: NOP4
// end ;
 221: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 222: NOP4
 226: PUSH
 227: LD_INT 1
 229: EQUAL
 230: IFFALSE 421
 232: GO 234
 234: DISABLE
 235: LD_INT 0
 237: PPUSH
// begin enable ;
 238: ENABLE
// fogoff ( true ) ;
 239: LD_INT 1
 241: PPUSH
 242: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 246: NOP4
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: LD_INT 21
 263: PUSH
 264: LD_INT 1
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PPUSH
 275: NOP4
 279: PUSH
 280: FOR_IN
 281: IFFALSE 297
// SetLives ( i , 1000 ) ;
 283: NOP4
 287: PPUSH
 288: LD_INT 1000
 290: PPUSH
 291: NOP4
 295: GO 280
 297: POP
 298: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 299: NOP4
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 30
 316: PUSH
 317: LD_INT 0
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: NOP4
 332: PUSH
 333: FOR_IN
 334: IFFALSE 358
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 336: NOP4
 340: PPUSH
 341: NOP4
 345: PPUSH
 346: LD_INT 1
 348: PPUSH
 349: LD_INT 9999
 351: PPUSH
 352: NOP4
 356: GO 333
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 360: NOP4
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 30
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PPUSH
 389: NOP4
 393: PUSH
 394: FOR_IN
 395: IFFALSE 419
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 397: NOP4
 401: PPUSH
 402: NOP4
 406: PPUSH
 407: LD_INT 2
 409: PPUSH
 410: LD_INT 9999
 412: PPUSH
 413: NOP4
 417: GO 394
 419: POP
 420: POP
// end ; end_of_file
 421: PPOPN 1
 423: END
// export function PrepareHeroes ; var veh ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// uc_side = 1 ;
 428: LD_ADDR_OWVAR 20
 432: PUSH
 433: LD_INT 1
 435: ST_TO_ADDR
// uc_nation = 1 ;
 436: LD_ADDR_OWVAR 21
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 444: NOP4
 448: PUSH
 449: LD_STRING JMM
 451: PPUSH
 452: LD_INT 1
 454: PPUSH
 455: NOP4
 459: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 460: NOP4
 464: PUSH
 465: LD_STRING Harisson
 467: PPUSH
 468: LD_INT 0
 470: PPUSH
 471: NOP4
 475: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 476: NOP4
 480: PUSH
 481: LD_STRING DeltaDoctor
 483: PPUSH
 484: NOP4
 488: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 489: NOP4
 493: PUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 21
 506: PUSH
 507: LD_INT 2
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 58
 516: PUSH
 517: EMPTY
 518: LIST
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PPUSH
 525: NOP4
 529: ST_TO_ADDR
// if veh > 0 then
 530: NOP4
 534: PUSH
 535: LD_INT 0
 537: GREATER
 538: IFFALSE 560
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 540: NOP4
 544: PPUSH
 545: NOP4
 549: PUSH
 550: LD_INT 1
 552: ARRAY
 553: PPUSH
 554: NOP4
// end else
 558: GO 575
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 560: NOP4
 564: PPUSH
 565: LD_INT 2
 567: PPUSH
 568: LD_INT 0
 570: PPUSH
 571: NOP4
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 575: LD_STRING LisaIn06
 577: PPUSH
 578: LD_INT 0
 580: PPUSH
 581: NOP4
 585: PUSH
 586: LD_INT 1
 588: EQUAL
 589: IFFALSE 693
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 591: NOP4
 595: PUSH
 596: LD_INT 22
 598: PUSH
 599: LD_INT 1
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: PUSH
 606: LD_INT 21
 608: PUSH
 609: LD_INT 2
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: LD_INT 58
 618: PUSH
 619: EMPTY
 620: LIST
 621: PUSH
 622: EMPTY
 623: LIST
 624: LIST
 625: LIST
 626: PPUSH
 627: NOP4
 631: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 632: NOP4
 636: PUSH
 637: LD_STRING Lisa
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: NOP4
 647: ST_TO_ADDR
// if veh > 0 then
 648: NOP4
 652: PUSH
 653: LD_INT 0
 655: GREATER
 656: IFFALSE 678
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 658: NOP4
 662: PPUSH
 663: NOP4
 667: PUSH
 668: LD_INT 1
 670: ARRAY
 671: PPUSH
 672: NOP4
// end else
 676: GO 693
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 678: NOP4
 682: PPUSH
 683: LD_INT 2
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: NOP4
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 693: LD_STRING BobbyIn06
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: NOP4
 703: PUSH
 704: LD_INT 1
 706: EQUAL
 707: IFFALSE 811
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 709: NOP4
 713: PUSH
 714: LD_INT 22
 716: PUSH
 717: LD_INT 1
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 21
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 58
 736: PUSH
 737: EMPTY
 738: LIST
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: PPUSH
 745: NOP4
 749: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 750: NOP4
 754: PUSH
 755: LD_STRING Bobby
 757: PPUSH
 758: LD_INT 1
 760: PPUSH
 761: NOP4
 765: ST_TO_ADDR
// if veh > 0 then
 766: NOP4
 770: PUSH
 771: LD_INT 0
 773: GREATER
 774: IFFALSE 796
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 776: NOP4
 780: PPUSH
 781: NOP4
 785: PUSH
 786: LD_INT 1
 788: ARRAY
 789: PPUSH
 790: NOP4
// end else
 794: GO 811
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 796: NOP4
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: NOP4
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 811: LD_STRING CyrusIn06
 813: PPUSH
 814: LD_INT 0
 816: PPUSH
 817: NOP4
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 929
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 827: NOP4
 831: PUSH
 832: LD_INT 22
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: LD_INT 58
 854: PUSH
 855: EMPTY
 856: LIST
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PPUSH
 863: NOP4
 867: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 868: NOP4
 872: PUSH
 873: LD_STRING Cyrus
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: NOP4
 883: ST_TO_ADDR
// if veh > 0 then
 884: NOP4
 888: PUSH
 889: LD_INT 0
 891: GREATER
 892: IFFALSE 914
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 894: NOP4
 898: PPUSH
 899: NOP4
 903: PUSH
 904: LD_INT 1
 906: ARRAY
 907: PPUSH
 908: NOP4
// end else
 912: GO 929
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 914: NOP4
 918: PPUSH
 919: LD_INT 2
 921: PPUSH
 922: LD_INT 0
 924: PPUSH
 925: NOP4
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 929: LD_STRING FrankIn06
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: NOP4
 939: PUSH
 940: LD_INT 1
 942: EQUAL
 943: IFFALSE 1047
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 945: NOP4
 949: PUSH
 950: LD_INT 22
 952: PUSH
 953: LD_INT 1
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: LD_INT 21
 962: PUSH
 963: LD_INT 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 58
 972: PUSH
 973: EMPTY
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PPUSH
 981: NOP4
 985: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 986: NOP4
 990: PUSH
 991: LD_STRING Frank
 993: PPUSH
 994: LD_INT 1
 996: PPUSH
 997: NOP4
1001: ST_TO_ADDR
// if veh > 0 then
1002: NOP4
1006: PUSH
1007: LD_INT 0
1009: GREATER
1010: IFFALSE 1032
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1012: NOP4
1016: PPUSH
1017: NOP4
1021: PUSH
1022: LD_INT 1
1024: ARRAY
1025: PPUSH
1026: NOP4
// end else
1030: GO 1047
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1032: NOP4
1036: PPUSH
1037: LD_INT 2
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: NOP4
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1047: LD_STRING BrownIn06
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: NOP4
1057: PUSH
1058: LD_INT 1
1060: EQUAL
1061: IFFALSE 1165
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1063: NOP4
1067: PUSH
1068: LD_INT 22
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: LD_INT 21
1080: PUSH
1081: LD_INT 2
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 58
1090: PUSH
1091: EMPTY
1092: LIST
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: PPUSH
1099: NOP4
1103: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1104: NOP4
1108: PUSH
1109: LD_STRING Brown
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: NOP4
1119: ST_TO_ADDR
// if veh > 0 then
1120: NOP4
1124: PUSH
1125: LD_INT 0
1127: GREATER
1128: IFFALSE 1150
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1130: NOP4
1134: PPUSH
1135: NOP4
1139: PUSH
1140: LD_INT 1
1142: ARRAY
1143: PPUSH
1144: NOP4
// end else
1148: GO 1165
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1150: NOP4
1154: PPUSH
1155: LD_INT 2
1157: PPUSH
1158: LD_INT 0
1160: PPUSH
1161: NOP4
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1165: LD_STRING DonaldsonIn06
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: NOP4
1175: PUSH
1176: LD_INT 1
1178: EQUAL
1179: IFFALSE 1283
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1181: NOP4
1185: PUSH
1186: LD_INT 22
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: LD_INT 21
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 58
1208: PUSH
1209: EMPTY
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: PPUSH
1217: NOP4
1221: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1222: NOP4
1226: PUSH
1227: LD_STRING Donaldson
1229: PPUSH
1230: LD_INT 1
1232: PPUSH
1233: NOP4
1237: ST_TO_ADDR
// if veh > 0 then
1238: NOP4
1242: PUSH
1243: LD_INT 0
1245: GREATER
1246: IFFALSE 1268
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1248: NOP4
1252: PPUSH
1253: NOP4
1257: PUSH
1258: LD_INT 1
1260: ARRAY
1261: PPUSH
1262: NOP4
// end else
1266: GO 1283
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1268: NOP4
1272: PPUSH
1273: LD_INT 2
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: NOP4
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1283: LD_STRING GladstoneIn06
1285: PPUSH
1286: LD_INT 0
1288: PPUSH
1289: NOP4
1293: PUSH
1294: LD_INT 1
1296: EQUAL
1297: IFFALSE 1401
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1299: NOP4
1303: PUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 1
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 2
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PUSH
1324: LD_INT 58
1326: PUSH
1327: EMPTY
1328: LIST
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: LIST
1334: PPUSH
1335: NOP4
1339: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1340: NOP4
1344: PUSH
1345: LD_STRING Gladstone
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: NOP4
1355: ST_TO_ADDR
// if veh > 0 then
1356: NOP4
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1386
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1366: NOP4
1370: PPUSH
1371: NOP4
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: PPUSH
1380: NOP4
// end else
1384: GO 1401
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1386: NOP4
1390: PPUSH
1391: LD_INT 2
1393: PPUSH
1394: LD_INT 0
1396: PPUSH
1397: NOP4
// end ; end ; end ;
1401: LD_VAR 0 1
1405: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1406: LD_INT 0
1408: PPUSH
1409: PPUSH
1410: PPUSH
1411: PPUSH
1412: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1413: NOP4
1417: PUSH
1418: LD_STRING 06_VehiclesIn06_1
1420: PPUSH
1421: EMPTY
1422: PPUSH
1423: NOP4
1427: ST_TO_ADDR
// uc_side = 1 ;
1428: LD_ADDR_OWVAR 20
1432: PUSH
1433: LD_INT 1
1435: ST_TO_ADDR
// if vehicles > 0 then
1436: NOP4
1440: PUSH
1441: LD_INT 0
1443: GREATER
1444: IFFALSE 1662
// begin for i := 1 to vehicles do
1446: NOP4
1450: PUSH
1451: DOUBLE
1452: LD_INT 1
1454: DEC
1455: ST_TO_ADDR
1456: NOP4
1460: PUSH
1461: FOR_TO
1462: IFFALSE 1660
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1464: LD_ADDR_OWVAR 21
1468: PUSH
1469: NOP4
1473: PUSH
1474: NOP4
1478: ARRAY
1479: PUSH
1480: LD_INT 1
1482: ARRAY
1483: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1484: LD_ADDR_OWVAR 37
1488: PUSH
1489: NOP4
1493: PUSH
1494: NOP4
1498: ARRAY
1499: PUSH
1500: LD_INT 2
1502: ARRAY
1503: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1504: LD_ADDR_OWVAR 39
1508: PUSH
1509: NOP4
1513: PUSH
1514: NOP4
1518: ARRAY
1519: PUSH
1520: LD_INT 3
1522: ARRAY
1523: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1524: LD_ADDR_OWVAR 38
1528: PUSH
1529: NOP4
1533: PUSH
1534: NOP4
1538: ARRAY
1539: PUSH
1540: LD_INT 4
1542: ARRAY
1543: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1544: LD_ADDR_OWVAR 40
1548: PUSH
1549: NOP4
1553: PUSH
1554: NOP4
1558: ARRAY
1559: PUSH
1560: LD_INT 5
1562: ARRAY
1563: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1564: LD_ADDR_OWVAR 41
1568: PUSH
1569: LD_INT 40
1571: ST_TO_ADDR
// veh = CreateVehicle ;
1572: NOP4
1576: PUSH
1577: NOP4
1581: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1582: NOP4
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: NOP4
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1594: NOP4
1598: PPUSH
1599: LD_INT 2
1601: PPUSH
1602: LD_INT 0
1604: PPUSH
1605: NOP4
// if vc_weapon = us_cargo_bay then
1609: NOP4
1613: PUSH
1614: LD_INT 12
1616: EQUAL
1617: IFFALSE 1658
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1619: NOP4
1623: PPUSH
1624: NOP4
1628: PUSH
1629: NOP4
1633: ARRAY
1634: PUSH
1635: LD_INT 6
1637: ARRAY
1638: PPUSH
1639: NOP4
1643: PUSH
1644: NOP4
1648: ARRAY
1649: PUSH
1650: LD_INT 7
1652: ARRAY
1653: PPUSH
1654: NOP4
// end ;
1658: GO 1461
1660: POP
1661: POP
// end ; end ;
1662: LD_VAR 0 1
1666: RET
// export function PrepareOthers ; var i , veh ; begin
1667: LD_INT 0
1669: PPUSH
1670: PPUSH
1671: PPUSH
// uc_side = 1 ;
1672: LD_ADDR_OWVAR 20
1676: PUSH
1677: LD_INT 1
1679: ST_TO_ADDR
// uc_nation = 1 ;
1680: LD_ADDR_OWVAR 21
1684: PUSH
1685: LD_INT 1
1687: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1688: NOP4
1692: PUSH
1693: LD_STRING OthersIn06
1695: PPUSH
1696: NOP4
1700: ST_TO_ADDR
// for i in others do
1701: NOP4
1705: PUSH
1706: NOP4
1710: PUSH
1711: FOR_IN
1712: IFFALSE 1802
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1714: NOP4
1718: PUSH
1719: LD_INT 22
1721: PUSH
1722: LD_INT 1
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 21
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 58
1741: PUSH
1742: EMPTY
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: NOP4
1754: ST_TO_ADDR
// if veh > 0 then
1755: NOP4
1759: PUSH
1760: LD_INT 0
1762: GREATER
1763: IFFALSE 1785
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1765: NOP4
1769: PPUSH
1770: NOP4
1774: PUSH
1775: LD_INT 1
1777: ARRAY
1778: PPUSH
1779: NOP4
// end else
1783: GO 1800
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1785: NOP4
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: NOP4
// end ; end ;
1800: GO 1711
1802: POP
1803: POP
// end ;
1804: LD_VAR 0 1
1808: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1809: LD_INT 0
1811: PPUSH
1812: PPUSH
1813: PPUSH
// uc_side = 1 ;
1814: LD_ADDR_OWVAR 20
1818: PUSH
1819: LD_INT 1
1821: ST_TO_ADDR
// uc_nation = 0 ;
1822: LD_ADDR_OWVAR 21
1826: PUSH
1827: LD_INT 0
1829: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1830: NOP4
1834: PUSH
1835: LD_STRING ApeIn06
1837: PPUSH
1838: NOP4
1842: ST_TO_ADDR
// for i in ape do
1843: NOP4
1847: PUSH
1848: NOP4
1852: PUSH
1853: FOR_IN
1854: IFFALSE 1873
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1856: NOP4
1860: PPUSH
1861: LD_INT 2
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: NOP4
1871: GO 1853
1873: POP
1874: POP
// end ;
1875: LD_VAR 0 1
1879: RET
// export function PrepareDenis ; begin
1880: LD_INT 0
1882: PPUSH
// uc_side = 1 ;
1883: LD_ADDR_OWVAR 20
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// uc_nation = 1 ;
1891: LD_ADDR_OWVAR 21
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1899: NOP4
1903: PUSH
1904: LD_STRING Denis
1906: PPUSH
1907: LD_INT 1
1909: PPUSH
1910: NOP4
1914: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1915: NOP4
1919: PPUSH
1920: LD_INT 13
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: NOP4
// SetClass ( Denis , 4 ) ;
1930: NOP4
1934: PPUSH
1935: LD_INT 4
1937: PPUSH
1938: NOP4
// SetLives ( Denis , 750 ) ;
1942: NOP4
1946: PPUSH
1947: LD_INT 750
1949: PPUSH
1950: NOP4
// end ;
1954: LD_VAR 0 1
1958: RET
// export function HarrisonSupport ; var un , veh ; begin
1959: LD_INT 0
1961: PPUSH
1962: PPUSH
1963: PPUSH
// uc_side = 1 ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// uc_nation = 1 ;
1972: LD_ADDR_OWVAR 21
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// vc_engine = 1 ;
1980: LD_ADDR_OWVAR 39
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// vc_control = 1 ;
1988: LD_ADDR_OWVAR 38
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1996: LD_ADDR_OWVAR 40
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 2
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: NOP4
2019: ARRAY
2020: ST_TO_ADDR
// vc_chassis = 2 ;
2021: LD_ADDR_OWVAR 37
2025: PUSH
2026: LD_INT 2
2028: ST_TO_ADDR
// veh = CreateVehicle ;
2029: NOP4
2033: PUSH
2034: NOP4
2038: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2039: NOP4
2043: PPUSH
2044: LD_INT 2
2046: PPUSH
2047: NOP4
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2051: NOP4
2055: PPUSH
2056: LD_INT 3
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: NOP4
// hc_class := 2 ;
2066: LD_ADDR_OWVAR 28
2070: PUSH
2071: LD_INT 2
2073: ST_TO_ADDR
// hc_sex := sex_male ;
2074: LD_ADDR_OWVAR 27
2078: PUSH
2079: LD_INT 1
2081: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2082: LD_ADDR_OWVAR 33
2086: PUSH
2087: LD_STRING SecondCharsGal
2089: ST_TO_ADDR
// hc_face_number := 52 ;
2090: LD_ADDR_OWVAR 34
2094: PUSH
2095: LD_INT 52
2097: ST_TO_ADDR
// hc_name := Craig Brown ;
2098: LD_ADDR_OWVAR 26
2102: PUSH
2103: LD_STRING Craig Brown
2105: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2106: LD_ADDR_OWVAR 31
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: LD_INT 3
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 0
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2129: NOP4
2133: PUSH
2134: NOP4
2138: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2139: NOP4
2143: PPUSH
2144: NOP4
2148: PPUSH
2149: NOP4
// vc_engine = 1 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 4
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: LD_INT 2
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: NOP4
2192: ARRAY
2193: ST_TO_ADDR
// vc_chassis = 2 ;
2194: LD_ADDR_OWVAR 37
2198: PUSH
2199: LD_INT 2
2201: ST_TO_ADDR
// veh = CreateVehicle ;
2202: NOP4
2206: PUSH
2207: NOP4
2211: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2212: NOP4
2216: PPUSH
2217: LD_INT 2
2219: PPUSH
2220: NOP4
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2224: NOP4
2228: PPUSH
2229: LD_INT 3
2231: PPUSH
2232: LD_INT 0
2234: PPUSH
2235: NOP4
// SetFuel ( veh , 50 ) ;
2239: NOP4
2243: PPUSH
2244: LD_INT 50
2246: PPUSH
2247: NOP4
// hc_class := 1 ;
2251: LD_ADDR_OWVAR 28
2255: PUSH
2256: LD_INT 1
2258: ST_TO_ADDR
// hc_sex := sex_female ;
2259: LD_ADDR_OWVAR 27
2263: PUSH
2264: LD_INT 2
2266: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2267: LD_ADDR_OWVAR 33
2271: PUSH
2272: LD_STRING SecondCharsGal
2274: ST_TO_ADDR
// hc_face_number := 45 ;
2275: LD_ADDR_OWVAR 34
2279: PUSH
2280: LD_INT 45
2282: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2283: LD_ADDR_OWVAR 26
2287: PUSH
2288: LD_STRING Ingrid Jonsson
2290: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2291: LD_ADDR_OWVAR 31
2295: PUSH
2296: LD_INT 1
2298: PUSH
2299: LD_INT 3
2301: PUSH
2302: LD_INT 1
2304: PUSH
2305: LD_INT 0
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2314: NOP4
2318: PUSH
2319: NOP4
2323: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2324: NOP4
2328: PPUSH
2329: NOP4
2333: PPUSH
2334: NOP4
// SetFuel ( veh , 45 ) ;
2338: NOP4
2342: PPUSH
2343: LD_INT 45
2345: PPUSH
2346: NOP4
// end ;
2350: LD_VAR 0 1
2354: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2355: LD_INT 0
2357: PPUSH
2358: PPUSH
2359: PPUSH
2360: PPUSH
2361: PPUSH
// j = 0 ;
2362: NOP4
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2370: LD_INT 35
2372: PPUSH
2373: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2377: NOP4
2381: PUSH
2382: LD_INT 22
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 21
2394: PUSH
2395: LD_INT 1
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 25
2407: PUSH
2408: LD_INT 1
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 25
2417: PUSH
2418: LD_INT 2
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: LD_INT 25
2427: PUSH
2428: LD_INT 3
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 25
2437: PUSH
2438: LD_INT 4
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: PPUSH
2457: NOP4
2461: PUSH
2462: FOR_IN
2463: IFFALSE 2589
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2465: LD_INT 22
2467: PUSH
2468: LD_INT 3
2470: PUSH
2471: EMPTY
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 2
2477: PUSH
2478: LD_INT 21
2480: PUSH
2481: LD_INT 1
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 21
2490: PUSH
2491: LD_INT 2
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: LD_INT 21
2500: PUSH
2501: LD_INT 3
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 59
2510: PUSH
2511: EMPTY
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 91
2523: PUSH
2524: NOP4
2528: PUSH
2529: LD_INT 25
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: LIST
2541: PPUSH
2542: NOP4
2546: NOT
2547: PUSH
2548: NOP4
2552: PPUSH
2553: NOP4
2557: PPUSH
2558: NOP4
2562: PUSH
2563: LD_INT 15
2565: LESS
2566: AND
2567: IFFALSE 2587
// begin tmp = i ;
2569: NOP4
2573: PUSH
2574: NOP4
2578: ST_TO_ADDR
// j = 1 ;
2579: NOP4
2583: PUSH
2584: LD_INT 1
2586: ST_TO_ADDR
// end ; end ;
2587: GO 2462
2589: POP
2590: POP
// until j = 1 ;
2591: NOP4
2595: PUSH
2596: LD_INT 1
2598: EQUAL
2599: IFFALSE 2370
// blockSpawn = 1 ;
2601: NOP4
2605: PUSH
2606: LD_INT 1
2608: ST_TO_ADDR
// uc_side = 4 ;
2609: LD_ADDR_OWVAR 20
2613: PUSH
2614: LD_INT 4
2616: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2617: NOP4
2621: PUSH
2622: LD_STRING Joan
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: NOP4
2632: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2633: NOP4
2637: PPUSH
2638: NOP4
2642: PPUSH
2643: NOP4
2647: PPUSH
2648: NOP4
2652: PPUSH
2653: NOP4
2657: PPUSH
2658: LD_INT 5
2660: PPUSH
2661: LD_INT 1
2663: PPUSH
2664: NOP4
// SetLives ( Joan , 250 ) ;
2668: NOP4
2672: PPUSH
2673: LD_INT 250
2675: PPUSH
2676: NOP4
// InGameOn ;
2680: NOP4
// CenterNowOnUnits ( Joan ) ;
2684: NOP4
2688: PPUSH
2689: NOP4
// wait ( 0 0$2 ) ;
2693: LD_INT 70
2695: PPUSH
2696: NOP4
// ComExitVehicle ( tmp ) ;
2700: NOP4
2704: PPUSH
2705: NOP4
// ComExitBuilding ( tmp ) ;
2709: NOP4
2713: PPUSH
2714: NOP4
// wait ( 0 0$1 ) ;
2718: LD_INT 35
2720: PPUSH
2721: NOP4
// ComMoveUnit ( tmp , Joan ) ;
2725: NOP4
2729: PPUSH
2730: NOP4
2734: PPUSH
2735: NOP4
// wait ( 0 0$2 ) ;
2739: LD_INT 70
2741: PPUSH
2742: NOP4
// DialogueOn ;
2746: NOP4
// if tmp = JMM then
2750: NOP4
2754: PUSH
2755: NOP4
2759: EQUAL
2760: IFFALSE 2887
// begin Say ( JMM , D5b-JMM-1 ) ;
2762: NOP4
2766: PPUSH
2767: LD_STRING D5b-JMM-1
2769: PPUSH
2770: NOP4
// DialogueOff ;
2774: NOP4
// SetLives ( Joan , 500 ) ;
2778: NOP4
2782: PPUSH
2783: LD_INT 500
2785: PPUSH
2786: NOP4
// ComTurnUnit ( Joan , JMM ) ;
2790: NOP4
2794: PPUSH
2795: NOP4
2799: PPUSH
2800: NOP4
// ComTurnUnit ( JMM , Joan ) ;
2804: NOP4
2808: PPUSH
2809: NOP4
2813: PPUSH
2814: NOP4
// wait ( 0 0$1 ) ;
2818: LD_INT 35
2820: PPUSH
2821: NOP4
// Say ( Joan , D5b-Joan-1 ) ;
2825: NOP4
2829: PPUSH
2830: LD_STRING D5b-Joan-1
2832: PPUSH
2833: NOP4
// Say ( JMM , D5b-JMM-2 ) ;
2837: NOP4
2841: PPUSH
2842: LD_STRING D5b-JMM-2
2844: PPUSH
2845: NOP4
// Say ( Joan , D5b-Joan-2 ) ;
2849: NOP4
2853: PPUSH
2854: LD_STRING D5b-Joan-2
2856: PPUSH
2857: NOP4
// Say ( JMM , D5b-JMM-3 ) ;
2861: NOP4
2865: PPUSH
2866: LD_STRING D5b-JMM-3
2868: PPUSH
2869: NOP4
// Say ( Joan , D5b-Joan-3 ) ;
2873: NOP4
2877: PPUSH
2878: LD_STRING D5b-Joan-3
2880: PPUSH
2881: NOP4
// end else
2885: GO 3185
// begin Say ( tmp , D5a-Sol1-1 ) ;
2887: NOP4
2891: PPUSH
2892: LD_STRING D5a-Sol1-1
2894: PPUSH
2895: NOP4
// DialogueOff ;
2899: NOP4
// SetLives ( Joan , 500 ) ;
2903: NOP4
2907: PPUSH
2908: LD_INT 500
2910: PPUSH
2911: NOP4
// ComTurnUnit ( Joan , tmp ) ;
2915: NOP4
2919: PPUSH
2920: NOP4
2924: PPUSH
2925: NOP4
// ComTurnUnit ( tmp , Joan ) ;
2929: NOP4
2933: PPUSH
2934: NOP4
2938: PPUSH
2939: NOP4
// wait ( 0 0$1 ) ;
2943: LD_INT 35
2945: PPUSH
2946: NOP4
// Say ( Joan , D5a-Joan-1 ) ;
2950: NOP4
2954: PPUSH
2955: LD_STRING D5a-Joan-1
2957: PPUSH
2958: NOP4
// Say ( tmp , D5a-Sol1-2 ) ;
2962: NOP4
2966: PPUSH
2967: LD_STRING D5a-Sol1-2
2969: PPUSH
2970: NOP4
// Say ( Joan , D5a-Joan-2 ) ;
2974: NOP4
2978: PPUSH
2979: LD_STRING D5a-Joan-2
2981: PPUSH
2982: NOP4
// Say ( tmp , D5a-Sol1-3 ) ;
2986: NOP4
2990: PPUSH
2991: LD_STRING D5a-Sol1-3
2993: PPUSH
2994: NOP4
// Say ( Joan , D5a-Joan-3 ) ;
2998: NOP4
3002: PPUSH
3003: LD_STRING D5a-Joan-3
3005: PPUSH
3006: NOP4
// Say ( tmp , D5a-Sol1-4 ) ;
3010: NOP4
3014: PPUSH
3015: LD_STRING D5a-Sol1-4
3017: PPUSH
3018: NOP4
// ComExitVehicle ( JMM ) ;
3022: NOP4
3026: PPUSH
3027: NOP4
// ComExitBuilding ( JMM ) ;
3031: NOP4
3035: PPUSH
3036: NOP4
// wait ( 0 0$1 ) ;
3040: LD_INT 35
3042: PPUSH
3043: NOP4
// repeat wait ( 0 0$1 ) ;
3047: LD_INT 35
3049: PPUSH
3050: NOP4
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3054: NOP4
3058: PUSH
3059: NOP4
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PPUSH
3068: NOP4
3072: PPUSH
3073: NOP4
// until GetDistUnits ( Joan , JMM ) < 5 ;
3077: NOP4
3081: PPUSH
3082: NOP4
3086: PPUSH
3087: NOP4
3091: PUSH
3092: LD_INT 5
3094: LESS
3095: IFFALSE 3047
// ComTurnUnit ( Joan , JMM ) ;
3097: NOP4
3101: PPUSH
3102: NOP4
3106: PPUSH
3107: NOP4
// ComTurnUnit ( JMM , Joan ) ;
3111: NOP4
3115: PPUSH
3116: NOP4
3120: PPUSH
3121: NOP4
// Say ( Joan , D5a-Joan-4 ) ;
3125: NOP4
3129: PPUSH
3130: LD_STRING D5a-Joan-4
3132: PPUSH
3133: NOP4
// Say ( JMM , D5a-JMM-4 ) ;
3137: NOP4
3141: PPUSH
3142: LD_STRING D5a-JMM-4
3144: PPUSH
3145: NOP4
// Say ( Joan , D5a-Joan-5 ) ;
3149: NOP4
3153: PPUSH
3154: LD_STRING D5a-Joan-5
3156: PPUSH
3157: NOP4
// Say ( JMM , D5a-JMM-5 ) ;
3161: NOP4
3165: PPUSH
3166: LD_STRING D5a-JMM-5
3168: PPUSH
3169: NOP4
// Say ( Joan , D5a-Joan-6 ) ;
3173: NOP4
3177: PPUSH
3178: LD_STRING D5a-Joan-6
3180: PPUSH
3181: NOP4
// end ; Say ( JMM , D6-JMM-1 ) ;
3185: NOP4
3189: PPUSH
3190: LD_STRING D6-JMM-1
3192: PPUSH
3193: NOP4
// Say ( Joan , D6-Joan-1 ) ;
3197: NOP4
3201: PPUSH
3202: LD_STRING D6-Joan-1
3204: PPUSH
3205: NOP4
// Say ( JMM , D6-JMM-2 ) ;
3209: NOP4
3213: PPUSH
3214: LD_STRING D6-JMM-2
3216: PPUSH
3217: NOP4
// Say ( Joan , D6-Joan-2 ) ;
3221: NOP4
3225: PPUSH
3226: LD_STRING D6-Joan-2
3228: PPUSH
3229: NOP4
// Say ( JMM , D6-JMM-3 ) ;
3233: NOP4
3237: PPUSH
3238: LD_STRING D6-JMM-3
3240: PPUSH
3241: NOP4
// Say ( Joan , D6-Joan-3 ) ;
3245: NOP4
3249: PPUSH
3250: LD_STRING D6-Joan-3
3252: PPUSH
3253: NOP4
// Say ( JMM , D6-JMM-4 ) ;
3257: NOP4
3261: PPUSH
3262: LD_STRING D6-JMM-4
3264: PPUSH
3265: NOP4
// DialogueOff ;
3269: NOP4
// InGameOff ;
3273: NOP4
// SetSide ( Joan , 1 ) ;
3277: NOP4
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: NOP4
// ChangeMissionObjectives ( MJ ) ;
3289: LD_STRING MJ
3291: PPUSH
3292: NOP4
// JoanStatus = 1 ;
3296: NOP4
3300: PUSH
3301: LD_INT 1
3303: ST_TO_ADDR
// blockSpawn = 0 ;
3304: NOP4
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// end ;
3312: LD_VAR 0 1
3316: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
// repeat wait ( 0 0$3 ) ;
3321: LD_INT 105
3323: PPUSH
3324: NOP4
// until blockSpawn = 0 ;
3328: NOP4
3332: PUSH
3333: LD_INT 0
3335: EQUAL
3336: IFFALSE 3321
// uc_side = 1 ;
3338: LD_ADDR_OWVAR 20
3342: PUSH
3343: LD_INT 1
3345: ST_TO_ADDR
// uc_nation = 1 ;
3346: LD_ADDR_OWVAR 21
3350: PUSH
3351: LD_INT 1
3353: ST_TO_ADDR
// if number = 1 then
3354: NOP4
3358: PUSH
3359: LD_INT 1
3361: EQUAL
3362: IFFALSE 3500
// begin hc_class := 1 ;
3364: LD_ADDR_OWVAR 28
3368: PUSH
3369: LD_INT 1
3371: ST_TO_ADDR
// hc_sex := sex_male ;
3372: LD_ADDR_OWVAR 27
3376: PUSH
3377: LD_INT 1
3379: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3380: LD_ADDR_OWVAR 33
3384: PUSH
3385: LD_STRING AmGalRemake
3387: ST_TO_ADDR
// hc_face_number := 7 ;
3388: LD_ADDR_OWVAR 34
3392: PUSH
3393: LD_INT 7
3395: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3396: LD_ADDR_OWVAR 26
3400: PUSH
3401: LD_STRING Bobby Jordan
3403: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3404: LD_ADDR_OWVAR 31
3408: PUSH
3409: LD_INT 2
3411: PUSH
3412: LD_INT 1
3414: PUSH
3415: LD_INT 1
3417: PUSH
3418: LD_INT 1
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: ST_TO_ADDR
// un = CreateHuman ;
3427: NOP4
3431: PUSH
3432: NOP4
3436: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3437: NOP4
3441: PPUSH
3442: LD_INT 12
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: NOP4
// wait ( 0 0$1 ) ;
3452: LD_INT 35
3454: PPUSH
3455: NOP4
// CenterNowOnUnits ( un ) ;
3459: NOP4
3463: PPUSH
3464: NOP4
// DialogueOn ;
3468: NOP4
// Say ( un , D11b-Sol3-1 ) ;
3472: NOP4
3476: PPUSH
3477: LD_STRING D11b-Sol3-1
3479: PPUSH
3480: NOP4
// Say ( JMM , D11b-JMM-1 ) ;
3484: NOP4
3488: PPUSH
3489: LD_STRING D11b-JMM-1
3491: PPUSH
3492: NOP4
// DialogueOff ;
3496: NOP4
// end ; if number = 2 then
3500: NOP4
3504: PUSH
3505: LD_INT 2
3507: EQUAL
3508: IFFALSE 3646
// begin hc_class := 3 ;
3510: LD_ADDR_OWVAR 28
3514: PUSH
3515: LD_INT 3
3517: ST_TO_ADDR
// hc_sex := sex_male ;
3518: LD_ADDR_OWVAR 27
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3526: LD_ADDR_OWVAR 33
3530: PUSH
3531: LD_STRING SecondCharsGal
3533: ST_TO_ADDR
// hc_face_number := 55 ;
3534: LD_ADDR_OWVAR 34
3538: PUSH
3539: LD_INT 55
3541: ST_TO_ADDR
// hc_name := George McCarthy ;
3542: LD_ADDR_OWVAR 26
3546: PUSH
3547: LD_STRING George McCarthy
3549: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3550: LD_ADDR_OWVAR 31
3554: PUSH
3555: LD_INT 1
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 1
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: LIST
3571: LIST
3572: ST_TO_ADDR
// un = CreateHuman ;
3573: NOP4
3577: PUSH
3578: NOP4
3582: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3583: NOP4
3587: PPUSH
3588: LD_INT 12
3590: PPUSH
3591: LD_INT 1
3593: PPUSH
3594: NOP4
// CenterNowOnUnits ( un ) ;
3598: NOP4
3602: PPUSH
3603: NOP4
// wait ( 0 0$1 ) ;
3607: LD_INT 35
3609: PPUSH
3610: NOP4
// DialogueOn ;
3614: NOP4
// Say ( un , D11d-Sol4-1 ) ;
3618: NOP4
3622: PPUSH
3623: LD_STRING D11d-Sol4-1
3625: PPUSH
3626: NOP4
// Say ( JMM , D11d-JMM-1 ) ;
3630: NOP4
3634: PPUSH
3635: LD_STRING D11d-JMM-1
3637: PPUSH
3638: NOP4
// DialogueOff ;
3642: NOP4
// end ; if number = 4 then
3646: NOP4
3650: PUSH
3651: LD_INT 4
3653: EQUAL
3654: IFFALSE 3780
// begin hc_class := 3 ;
3656: LD_ADDR_OWVAR 28
3660: PUSH
3661: LD_INT 3
3663: ST_TO_ADDR
// hc_sex := sex_female ;
3664: LD_ADDR_OWVAR 27
3668: PUSH
3669: LD_INT 2
3671: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3672: LD_ADDR_OWVAR 33
3676: PUSH
3677: LD_STRING SecondCharsGal
3679: ST_TO_ADDR
// hc_face_number := 46 ;
3680: LD_ADDR_OWVAR 34
3684: PUSH
3685: LD_INT 46
3687: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3688: LD_ADDR_OWVAR 26
3692: PUSH
3693: LD_STRING Sylvia Creak
3695: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_INT 1
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 1
3709: PUSH
3710: LD_INT 1
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: ST_TO_ADDR
// un = CreateHuman ;
3719: NOP4
3723: PUSH
3724: NOP4
3728: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3729: NOP4
3733: PPUSH
3734: LD_INT 12
3736: PPUSH
3737: LD_INT 1
3739: PPUSH
3740: NOP4
// CenterNowOnUnits ( un ) ;
3744: NOP4
3748: PPUSH
3749: NOP4
// wait ( 0 0$1 ) ;
3753: LD_INT 35
3755: PPUSH
3756: NOP4
// DialogueOn ;
3760: NOP4
// Say ( un , D11e-FSol4-1 ) ;
3764: NOP4
3768: PPUSH
3769: LD_STRING D11e-FSol4-1
3771: PPUSH
3772: NOP4
// DialogueOff ;
3776: NOP4
// end ; if number = 5 then
3780: NOP4
3784: PUSH
3785: LD_INT 5
3787: EQUAL
3788: IFFALSE 3926
// begin hc_class := 1 ;
3790: LD_ADDR_OWVAR 28
3794: PUSH
3795: LD_INT 1
3797: ST_TO_ADDR
// hc_sex := sex_female ;
3798: LD_ADDR_OWVAR 27
3802: PUSH
3803: LD_INT 2
3805: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3806: LD_ADDR_OWVAR 33
3810: PUSH
3811: LD_STRING SecondCharsGal
3813: ST_TO_ADDR
// hc_face_number := 37 ;
3814: LD_ADDR_OWVAR 34
3818: PUSH
3819: LD_INT 37
3821: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3822: LD_ADDR_OWVAR 26
3826: PUSH
3827: LD_STRING Margherite Simpson
3829: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3830: LD_ADDR_OWVAR 31
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: LD_INT 1
3840: PUSH
3841: LD_INT 1
3843: PUSH
3844: LD_INT 1
3846: PUSH
3847: EMPTY
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: ST_TO_ADDR
// un = CreateHuman ;
3853: NOP4
3857: PUSH
3858: NOP4
3862: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3863: NOP4
3867: PPUSH
3868: LD_INT 12
3870: PPUSH
3871: LD_INT 1
3873: PPUSH
3874: NOP4
// CenterNowOnUnits ( un ) ;
3878: NOP4
3882: PPUSH
3883: NOP4
// wait ( 0 0$1 ) ;
3887: LD_INT 35
3889: PPUSH
3890: NOP4
// DialogueOn ;
3894: NOP4
// Say ( un , D11c-FSol3-1 ) ;
3898: NOP4
3902: PPUSH
3903: LD_STRING D11c-FSol3-1
3905: PPUSH
3906: NOP4
// Say ( JMM , D11c-JMM-1 ) ;
3910: NOP4
3914: PPUSH
3915: LD_STRING D11c-JMM-1
3917: PPUSH
3918: NOP4
// DialogueOff ;
3922: NOP4
// end ; if number = 6 then
3926: NOP4
3930: PUSH
3931: LD_INT 6
3933: EQUAL
3934: IFFALSE 4060
// begin hc_class := 1 ;
3936: LD_ADDR_OWVAR 28
3940: PUSH
3941: LD_INT 1
3943: ST_TO_ADDR
// hc_sex := sex_male ;
3944: LD_ADDR_OWVAR 27
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING AmGalRemake
3959: ST_TO_ADDR
// hc_face_number := 1 ;
3960: LD_ADDR_OWVAR 34
3964: PUSH
3965: LD_INT 1
3967: ST_TO_ADDR
// hc_name := Charles Brown ;
3968: LD_ADDR_OWVAR 26
3972: PUSH
3973: LD_STRING Charles Brown
3975: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3976: LD_ADDR_OWVAR 31
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 1
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: LIST
3997: LIST
3998: ST_TO_ADDR
// un = CreateHuman ;
3999: NOP4
4003: PUSH
4004: NOP4
4008: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4009: NOP4
4013: PPUSH
4014: LD_INT 12
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: NOP4
// CenterNowOnUnits ( un ) ;
4024: NOP4
4028: PPUSH
4029: NOP4
// wait ( 0 0$1 ) ;
4033: LD_INT 35
4035: PPUSH
4036: NOP4
// DialogueOn ;
4040: NOP4
// Say ( un , D11f-Sol5-1 ) ;
4044: NOP4
4048: PPUSH
4049: LD_STRING D11f-Sol5-1
4051: PPUSH
4052: NOP4
// DialogueOff ;
4056: NOP4
// end ; if number = 7 then
4060: NOP4
4064: PUSH
4065: LD_INT 7
4067: EQUAL
4068: IFFALSE 4194
// begin hc_class := 1 ;
4070: LD_ADDR_OWVAR 28
4074: PUSH
4075: LD_INT 1
4077: ST_TO_ADDR
// hc_sex := sex_female ;
4078: LD_ADDR_OWVAR 27
4082: PUSH
4083: LD_INT 2
4085: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4086: LD_ADDR_OWVAR 33
4090: PUSH
4091: LD_STRING AmGalRemake
4093: ST_TO_ADDR
// hc_face_number := 2 ;
4094: LD_ADDR_OWVAR 34
4098: PUSH
4099: LD_INT 2
4101: ST_TO_ADDR
// hc_name := Johanna Holland ;
4102: LD_ADDR_OWVAR 26
4106: PUSH
4107: LD_STRING Johanna Holland
4109: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4110: LD_ADDR_OWVAR 31
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: LD_INT 0
4120: PUSH
4121: LD_INT 0
4123: PUSH
4124: LD_INT 0
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: ST_TO_ADDR
// un = CreateHuman ;
4133: NOP4
4137: PUSH
4138: NOP4
4142: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4143: NOP4
4147: PPUSH
4148: LD_INT 12
4150: PPUSH
4151: LD_INT 1
4153: PPUSH
4154: NOP4
// CenterNowOnUnits ( un ) ;
4158: NOP4
4162: PPUSH
4163: NOP4
// wait ( 0 0$1 ) ;
4167: LD_INT 35
4169: PPUSH
4170: NOP4
// DialogueOn ;
4174: NOP4
// Say ( un , D11a-FSol2-1 ) ;
4178: NOP4
4182: PPUSH
4183: LD_STRING D11a-FSol2-1
4185: PPUSH
4186: NOP4
// DialogueOff ;
4190: NOP4
// end ; end ; end_of_file
4194: LD_VAR 0 2
4198: RET
// export function PrepareRussian ; var i ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4203: LD_INT 3
4205: PPUSH
4206: LD_INT 3
4208: PPUSH
4209: LD_INT 2
4211: PPUSH
4212: NOP4
4216: PPUSH
4217: NOP4
4221: PPUSH
4222: NOP4
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: LD_INT 4
4232: PPUSH
4233: NOP4
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4237: LD_INT 3
4239: PPUSH
4240: LD_INT 3
4242: PPUSH
4243: LD_INT 8
4245: PPUSH
4246: NOP4
4250: PPUSH
4251: NOP4
4255: PPUSH
4256: NOP4
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 4
4266: PPUSH
4267: NOP4
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4271: LD_INT 3
4273: PPUSH
4274: LD_INT 3
4276: PPUSH
4277: LD_INT 67
4279: PPUSH
4280: NOP4
4284: PPUSH
4285: NOP4
4289: PPUSH
4290: NOP4
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_INT 2
4300: PPUSH
4301: NOP4
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4305: LD_INT 3
4307: PPUSH
4308: LD_INT 3
4310: PPUSH
4311: LD_INT 21
4313: PPUSH
4314: NOP4
4318: PPUSH
4319: NOP4
4323: PPUSH
4324: NOP4
4328: PPUSH
4329: LD_INT 3
4331: PPUSH
4332: LD_INT 6
4334: PPUSH
4335: NOP4
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4339: LD_INT 3
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: LD_INT 17
4347: PPUSH
4348: NOP4
4352: PPUSH
4353: NOP4
4357: PPUSH
4358: NOP4
4362: PPUSH
4363: LD_INT 3
4365: PPUSH
4366: LD_INT 6
4368: PPUSH
4369: NOP4
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4373: LD_INT 3
4375: PPUSH
4376: LD_INT 3
4378: PPUSH
4379: LD_INT 32
4381: PPUSH
4382: NOP4
4386: PPUSH
4387: NOP4
4391: PPUSH
4392: NOP4
4396: PPUSH
4397: LD_INT 4
4399: PPUSH
4400: LD_INT 2
4402: PPUSH
4403: NOP4
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4407: NOP4
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PUSH
4422: LD_INT 21
4424: PUSH
4425: LD_INT 3
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 30
4434: PUSH
4435: LD_INT 32
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: PPUSH
4447: NOP4
4451: PUSH
4452: FOR_IN
4453: IFFALSE 4493
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4455: LD_INT 3
4457: PPUSH
4458: LD_INT 3
4460: PPUSH
4461: NOP4
4465: PPUSH
4466: NOP4
4470: PPUSH
4471: NOP4
4475: PPUSH
4476: NOP4
4480: PPUSH
4481: LD_INT 1
4483: PPUSH
4484: LD_INT 1
4486: PPUSH
4487: NOP4
4491: GO 4452
4493: POP
4494: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4495: NOP4
4499: PUSH
4500: LD_INT 22
4502: PUSH
4503: LD_INT 3
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: LD_INT 21
4512: PUSH
4513: LD_INT 3
4515: PUSH
4516: EMPTY
4517: LIST
4518: LIST
4519: PUSH
4520: LD_INT 30
4522: PUSH
4523: LD_INT 31
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: PPUSH
4535: NOP4
4539: PUSH
4540: FOR_IN
4541: IFFALSE 4569
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4543: NOP4
4547: PPUSH
4548: NOP4
4552: PPUSH
4553: NOP4
4557: PPUSH
4558: NOP4
4562: PPUSH
4563: NOP4
4567: GO 4540
4569: POP
4570: POP
// end ; end_of_file
4571: LD_VAR 0 1
4575: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4576: LD_INT 0
4578: PPUSH
4579: PPUSH
// if exist_mode then
4580: NOP4
4584: IFFALSE 4609
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4586: NOP4
4590: PUSH
4591: NOP4
4595: PUSH
4596: NOP4
4600: STR
4601: PPUSH
4602: NOP4
4606: ST_TO_ADDR
// end else
4607: GO 4624
// begin unit := NewCharacter ( ident ) ;
4609: NOP4
4613: PUSH
4614: NOP4
4618: PPUSH
4619: NOP4
4623: ST_TO_ADDR
// end ; result := unit ;
4624: NOP4
4628: PUSH
4629: NOP4
4633: ST_TO_ADDR
// end ;
4634: LD_VAR 0 3
4638: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4639: LD_INT 0
4641: PPUSH
4642: PPUSH
4643: PPUSH
// rnd = rand ( 1 , characters ) ;
4644: NOP4
4648: PUSH
4649: LD_INT 1
4651: PPUSH
4652: NOP4
4656: PPUSH
4657: NOP4
4661: ST_TO_ADDR
// for i = 1 to characters do
4662: NOP4
4666: PUSH
4667: DOUBLE
4668: LD_INT 1
4670: DEC
4671: ST_TO_ADDR
4672: NOP4
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4788
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4680: NOP4
4684: PUSH
4685: NOP4
4689: EQUAL
4690: PUSH
4691: NOP4
4695: PUSH
4696: NOP4
4700: ARRAY
4701: PPUSH
4702: NOP4
4706: PUSH
4707: LD_INT 1
4709: EQUAL
4710: AND
4711: IFFALSE 4733
// Say ( characters [ i ] , dialogMID ) ;
4713: NOP4
4717: PUSH
4718: NOP4
4722: ARRAY
4723: PPUSH
4724: NOP4
4728: PPUSH
4729: NOP4
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4733: NOP4
4737: PUSH
4738: NOP4
4742: EQUAL
4743: PUSH
4744: NOP4
4748: PUSH
4749: NOP4
4753: ARRAY
4754: PPUSH
4755: NOP4
4759: PUSH
4760: LD_INT 2
4762: EQUAL
4763: AND
4764: IFFALSE 4786
// Say ( characters [ i ] , dialogFID ) ;
4766: NOP4
4770: PUSH
4771: NOP4
4775: ARRAY
4776: PPUSH
4777: NOP4
4781: PPUSH
4782: NOP4
// end ;
4786: GO 4677
4788: POP
4789: POP
// end ;
4790: LD_VAR 0 4
4794: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// for i in charactersList do
4799: NOP4
4803: PUSH
4804: NOP4
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4839
// begin if IsOk ( i ) then
4812: NOP4
4816: PPUSH
4817: NOP4
4821: IFFALSE 4837
// SaveCharacters ( i , ident ) ;
4823: NOP4
4827: PPUSH
4828: NOP4
4832: PPUSH
4833: NOP4
// end ;
4837: GO 4809
4839: POP
4840: POP
// end ;
4841: LD_VAR 0 3
4845: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4846: LD_INT 0
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
// for i = 1 to count do
4852: NOP4
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: NOP4
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4949
// begin uc_side = side ;
4870: LD_ADDR_OWVAR 20
4874: PUSH
4875: NOP4
4879: ST_TO_ADDR
// uc_nation = nation ;
4880: LD_ADDR_OWVAR 21
4884: PUSH
4885: NOP4
4889: ST_TO_ADDR
// hc_gallery =  ;
4890: LD_ADDR_OWVAR 33
4894: PUSH
4895: LD_STRING 
4897: ST_TO_ADDR
// hc_name =  ;
4898: LD_ADDR_OWVAR 26
4902: PUSH
4903: LD_STRING 
4905: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4906: LD_INT 0
4908: PPUSH
4909: NOP4
4913: PPUSH
4914: NOP4
4918: PPUSH
4919: NOP4
// un = CreateHuman ;
4923: NOP4
4927: PUSH
4928: NOP4
4932: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4933: NOP4
4937: PPUSH
4938: NOP4
4942: PPUSH
4943: NOP4
// end ;
4947: GO 4867
4949: POP
4950: POP
// end ;
4951: LD_VAR 0 7
4955: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
// uc_side := GetSide ( b ) ;
4961: LD_ADDR_OWVAR 20
4965: PUSH
4966: NOP4
4970: PPUSH
4971: NOP4
4975: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4976: LD_ADDR_OWVAR 21
4980: PUSH
4981: NOP4
4985: PPUSH
4986: NOP4
4990: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4991: LD_INT 0
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: NOP4
5001: PPUSH
5002: NOP4
// dir := GetDir ( b ) - 3 ;
5006: NOP4
5010: PUSH
5011: NOP4
5015: PPUSH
5016: NOP4
5020: PUSH
5021: LD_INT 3
5023: MINUS
5024: ST_TO_ADDR
// if dir < 0 then
5025: NOP4
5029: PUSH
5030: LD_INT 0
5032: LESS
5033: IFFALSE 5049
// dir := 6 + dir ;
5035: NOP4
5039: PUSH
5040: LD_INT 6
5042: PUSH
5043: NOP4
5047: PLUS
5048: ST_TO_ADDR
// un := CreateHuman ;
5049: NOP4
5053: PUSH
5054: NOP4
5058: ST_TO_ADDR
// SetDir ( un , dir ) ;
5059: NOP4
5063: PPUSH
5064: NOP4
5068: PPUSH
5069: NOP4
// PlaceHumanInUnit ( un , b ) ;
5073: NOP4
5077: PPUSH
5078: NOP4
5082: PPUSH
5083: NOP4
// end ;
5087: LD_VAR 0 3
5091: RET
// export function PrepareDifficulty ; begin
5092: LD_INT 0
5094: PPUSH
// if Difficulty = 1 then
5095: NOP4
5099: PUSH
5100: LD_INT 1
5102: EQUAL
5103: IFFALSE 5121
// begin RuSolMinLevel = 2 ;
5105: NOP4
5109: PUSH
5110: LD_INT 2
5112: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5113: NOP4
5117: PUSH
5118: LD_INT 5
5120: ST_TO_ADDR
// end ; if Difficulty = 2 then
5121: NOP4
5125: PUSH
5126: LD_INT 2
5128: EQUAL
5129: IFFALSE 5147
// begin RuSolMinLevel = 3 ;
5131: NOP4
5135: PUSH
5136: LD_INT 3
5138: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5139: NOP4
5143: PUSH
5144: LD_INT 5
5146: ST_TO_ADDR
// end ; if Difficulty = 3 then
5147: NOP4
5151: PUSH
5152: LD_INT 3
5154: EQUAL
5155: IFFALSE 5173
// begin RuSolMinLevel = 4 ;
5157: NOP4
5161: PUSH
5162: LD_INT 4
5164: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5165: NOP4
5169: PUSH
5170: LD_INT 5
5172: ST_TO_ADDR
// end ; end ;
5173: LD_VAR 0 1
5177: RET
// export function ShowQuery1 ; begin
5178: LD_INT 0
5180: PPUSH
// case query ( QKill ) of 1 :
5181: LD_STRING QKill
5183: PPUSH
5184: NOP4
5188: PUSH
5189: LD_INT 1
5191: DOUBLE
5192: EQUAL
5193: IFTRUE 5197
5195: GO 5208
5197: POP
// begin result = 1 ;
5198: NOP4
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// end ; 2 :
5206: GO 5247
5208: LD_INT 2
5210: DOUBLE
5211: EQUAL
5212: IFTRUE 5216
5214: GO 5227
5216: POP
// begin result = 2 ;
5217: NOP4
5221: PUSH
5222: LD_INT 2
5224: ST_TO_ADDR
// end ; 3 :
5225: GO 5247
5227: LD_INT 3
5229: DOUBLE
5230: EQUAL
5231: IFTRUE 5235
5233: GO 5246
5235: POP
// begin result = 3 ;
5236: NOP4
5240: PUSH
5241: LD_INT 3
5243: ST_TO_ADDR
// end ; end ;
5244: GO 5247
5246: POP
// end ;
5247: LD_VAR 0 1
5251: RET
// export function ShowQuery2 ; begin
5252: LD_INT 0
5254: PPUSH
// case query ( QKill2 ) of 1 :
5255: LD_STRING QKill2
5257: PPUSH
5258: NOP4
5262: PUSH
5263: LD_INT 1
5265: DOUBLE
5266: EQUAL
5267: IFTRUE 5271
5269: GO 5282
5271: POP
// begin result = 1 ;
5272: NOP4
5276: PUSH
5277: LD_INT 1
5279: ST_TO_ADDR
// end ; 2 :
5280: GO 5302
5282: LD_INT 2
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5301
5290: POP
// begin result = 2 ;
5291: NOP4
5295: PUSH
5296: LD_INT 2
5298: ST_TO_ADDR
// end ; end ;
5299: GO 5302
5301: POP
// end ;
5302: LD_VAR 0 1
5306: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5307: LD_INT 0
5309: PPUSH
5310: PPUSH
5311: PPUSH
5312: PPUSH
// for i = 1 to 72 do
5313: NOP4
5317: PUSH
5318: DOUBLE
5319: LD_INT 1
5321: DEC
5322: ST_TO_ADDR
5323: LD_INT 72
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5385
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5329: NOP4
5333: PPUSH
5334: NOP4
5338: PPUSH
5339: NOP4
5343: PUSH
5344: LD_INT 1
5346: EQUAL
5347: PUSH
5348: NOP4
5352: PPUSH
5353: NOP4
5357: PPUSH
5358: NOP4
5362: PUSH
5363: LD_INT 1
5365: EQUAL
5366: AND
5367: IFFALSE 5383
// AddComResearch ( lab , i ) ;
5369: NOP4
5373: PPUSH
5374: NOP4
5378: PPUSH
5379: NOP4
5383: GO 5326
5385: POP
5386: POP
// end ;
5387: LD_VAR 0 4
5391: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5392: LD_INT 0
5394: PPUSH
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5399: NOP4
5403: PUSH
5404: LD_INT 22
5406: PUSH
5407: NOP4
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 25
5431: PUSH
5432: LD_INT 16
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 24
5446: PUSH
5447: LD_INT 1000
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: NOP4
5463: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5464: NOP4
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: NOP4
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: PUSH
5481: LD_INT 21
5483: PUSH
5484: LD_INT 3
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 3
5493: PUSH
5494: LD_INT 24
5496: PUSH
5497: LD_INT 1000
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: LIST
5512: PUSH
5513: EMPTY
5514: LIST
5515: PPUSH
5516: NOP4
5520: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5521: NOP4
5525: PUSH
5526: LD_INT 0
5528: GREATER
5529: PUSH
5530: NOP4
5534: PUSH
5535: LD_INT 0
5537: GREATER
5538: AND
5539: IFFALSE 5605
// begin for i in engineerOk_list do
5541: NOP4
5545: PUSH
5546: NOP4
5550: PUSH
5551: FOR_IN
5552: IFFALSE 5603
// begin for j in buildings_list do
5554: NOP4
5558: PUSH
5559: NOP4
5563: PUSH
5564: FOR_IN
5565: IFFALSE 5599
// begin AddComExitBuilding ( i ) ;
5567: NOP4
5571: PPUSH
5572: NOP4
// wait ( 0 0$1 ) ;
5576: LD_INT 35
5578: PPUSH
5579: NOP4
// AddComRepairBuilding ( i , j ) ;
5583: NOP4
5587: PPUSH
5588: NOP4
5592: PPUSH
5593: NOP4
// end ;
5597: GO 5564
5599: POP
5600: POP
// end ;
5601: GO 5551
5603: POP
5604: POP
// end ; if buildings_list = 0 then
5605: NOP4
5609: PUSH
5610: LD_INT 0
5612: EQUAL
5613: IFFALSE 5646
// begin for i in engineerOK_list do
5615: NOP4
5619: PUSH
5620: NOP4
5624: PUSH
5625: FOR_IN
5626: IFFALSE 5644
// begin ComEnterUnit ( i , building ) ;
5628: NOP4
5632: PPUSH
5633: NOP4
5637: PPUSH
5638: NOP4
// end ;
5642: GO 5625
5644: POP
5645: POP
// end ; end ;
5646: LD_VAR 0 3
5650: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5651: LD_INT 0
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5658: NOP4
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: NOP4
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: LD_INT 25
5677: PUSH
5678: LD_INT 4
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PPUSH
5689: NOP4
5693: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5694: NOP4
5698: PUSH
5699: NOP4
5703: PPUSH
5704: LD_INT 22
5706: PUSH
5707: NOP4
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 1
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 3
5728: PUSH
5729: LD_INT 24
5731: PUSH
5732: LD_INT 750
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: PPUSH
5748: NOP4
5752: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5753: NOP4
5757: PUSH
5758: LD_INT 0
5760: GREATER
5761: PUSH
5762: NOP4
5766: PUSH
5767: LD_INT 0
5769: GREATER
5770: AND
5771: IFFALSE 5898
// begin for i = 1 to damageUnits do
5773: NOP4
5777: PUSH
5778: DOUBLE
5779: LD_INT 1
5781: DEC
5782: ST_TO_ADDR
5783: NOP4
5787: PUSH
5788: FOR_TO
5789: IFFALSE 5813
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5791: NOP4
5795: PUSH
5796: NOP4
5800: ARRAY
5801: PPUSH
5802: NOP4
5806: PPUSH
5807: NOP4
5811: GO 5788
5813: POP
5814: POP
// for i in sci_list do
5815: NOP4
5819: PUSH
5820: NOP4
5824: PUSH
5825: FOR_IN
5826: IFFALSE 5894
// begin ComExitBuilding ( i ) ;
5828: NOP4
5832: PPUSH
5833: NOP4
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5837: NOP4
5841: PUSH
5842: NOP4
5846: PPUSH
5847: LD_INT 22
5849: PUSH
5850: NOP4
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: NOP4
5863: PUSH
5864: FOR_IN
5865: IFFALSE 5890
// begin AddComHeal ( i , j ) ;
5867: NOP4
5871: PPUSH
5872: NOP4
5876: PPUSH
5877: NOP4
// wait ( 1 1$0 ) ;
5881: LD_INT 2100
5883: PPUSH
5884: NOP4
// end ;
5888: GO 5864
5890: POP
5891: POP
// end ;
5892: GO 5825
5894: POP
5895: POP
// end else
5896: GO 5912
// begin AddComEnterUnit ( sci_list , build ) ;
5898: NOP4
5902: PPUSH
5903: NOP4
5907: PPUSH
5908: NOP4
// end ; end ;
5912: LD_VAR 0 5
5916: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5917: LD_INT 0
5919: PPUSH
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5925: LD_INT 22
5927: PUSH
5928: NOP4
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 21
5939: PUSH
5940: LD_INT 2
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: NOP4
5955: PUSH
5956: NOP4
5960: LESSEQUAL
5961: IFFALSE 6028
// for i = 1 to vehCount do
5963: NOP4
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: NOP4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6026
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5981: NOP4
5985: PPUSH
5986: NOP4
5990: PPUSH
5991: NOP4
5995: PPUSH
5996: NOP4
6000: PPUSH
6001: NOP4
6005: PUSH
6006: LD_INT 1
6008: PPUSH
6009: NOP4
6013: PPUSH
6014: NOP4
6018: ARRAY
6019: PPUSH
6020: NOP4
6024: GO 5978
6026: POP
6027: POP
// repeat wait ( 0 0$1 ) ;
6028: LD_INT 35
6030: PPUSH
6031: NOP4
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
6035: LD_INT 22
6037: PUSH
6038: NOP4
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 21
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 24
6059: PUSH
6060: LD_INT 250
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PPUSH
6072: NOP4
6076: PUSH
6077: NOP4
6081: GREATEREQUAL
6082: IFFALSE 6028
// repeat begin wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: NOP4
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6091: NOP4
6095: PUSH
6096: LD_INT 22
6098: PUSH
6099: NOP4
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 21
6110: PUSH
6111: LD_INT 2
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 24
6120: PUSH
6121: LD_INT 651
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: NOP4
6137: PUSH
6138: FOR_IN
6139: IFFALSE 6315
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6141: NOP4
6145: PUSH
6146: LD_INT 22
6148: PUSH
6149: NOP4
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: NOP4
6162: PPUSH
6163: NOP4
6167: PPUSH
6168: NOP4
6172: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6173: NOP4
6177: PUSH
6178: LD_INT 22
6180: PUSH
6181: NOP4
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 2
6192: PUSH
6193: LD_INT 59
6195: PUSH
6196: EMPTY
6197: LIST
6198: PUSH
6199: LD_INT 21
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 21
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: PPUSH
6232: NOP4
6236: PPUSH
6237: NOP4
6241: PPUSH
6242: NOP4
6246: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6247: NOP4
6251: PPUSH
6252: NOP4
6256: PPUSH
6257: NOP4
6261: PUSH
6262: LD_INT 8
6264: PLUS
6265: PUSH
6266: NOP4
6270: PPUSH
6271: NOP4
6275: PPUSH
6276: NOP4
6280: LESS
6281: IFFALSE 6299
// begin ComAttackUnit ( i , target1 ) ;
6283: NOP4
6287: PPUSH
6288: NOP4
6292: PPUSH
6293: NOP4
// end else
6297: GO 6313
// begin ComAttackUnit ( i , target2 ) ;
6299: NOP4
6303: PPUSH
6304: NOP4
6308: PPUSH
6309: NOP4
// end ; end ;
6313: GO 6138
6315: POP
6316: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6317: LD_INT 22
6319: PUSH
6320: LD_INT 3
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 21
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: LD_INT 34
6342: PUSH
6343: LD_INT 51
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: PPUSH
6359: NOP4
6363: PUSH
6364: LD_INT 0
6366: EQUAL
6367: IFFALSE 6084
// end ;
6369: LD_VAR 0 9
6373: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6374: LD_INT 0
6376: PPUSH
6377: PPUSH
6378: PPUSH
6379: PPUSH
// enable ;
6380: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6381: NOP4
6385: PUSH
6386: NOP4
6390: PPUSH
6391: NOP4
6395: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6396: NOP4
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: NOP4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 34
6415: PUSH
6416: NOP4
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: NOP4
6433: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6434: NOP4
6438: PUSH
6439: LD_INT 0
6441: GREATER
6442: PUSH
6443: NOP4
6447: PPUSH
6448: NOP4
6452: AND
6453: PUSH
6454: NOP4
6458: PUSH
6459: LD_INT 0
6461: GREATER
6462: AND
6463: IFFALSE 6512
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6465: NOP4
6469: PUSH
6470: LD_INT 1
6472: ARRAY
6473: PPUSH
6474: NOP4
6478: PUSH
6479: LD_INT 1
6481: ARRAY
6482: PPUSH
6483: NOP4
6487: PUSH
6488: LD_INT 2
6490: ARRAY
6491: PPUSH
6492: NOP4
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6496: NOP4
6500: PUSH
6501: LD_INT 1
6503: ARRAY
6504: PPUSH
6505: LD_INT 100
6507: PPUSH
6508: NOP4
// end ; clear_crates := false ;
6512: NOP4
6516: PUSH
6517: LD_INT 0
6519: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6520: LD_INT 35
6522: PPUSH
6523: NOP4
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6527: NOP4
6531: PUSH
6532: LD_INT 1
6534: ARRAY
6535: PPUSH
6536: NOP4
6540: NOT
6541: PUSH
6542: NOP4
6546: OR
6547: IFFALSE 6520
// end ;
6549: LD_VAR 0 4
6553: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6554: LD_INT 0
6556: PPUSH
6557: PPUSH
6558: PPUSH
6559: PPUSH
6560: PPUSH
6561: PPUSH
6562: PPUSH
6563: PPUSH
6564: PPUSH
6565: PPUSH
6566: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6567: NOP4
6571: PUSH
6572: LD_INT 22
6574: PUSH
6575: NOP4
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 21
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 24
6596: PUSH
6597: LD_INT 660
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 3
6606: PUSH
6607: LD_INT 58
6609: PUSH
6610: EMPTY
6611: LIST
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 3
6619: PUSH
6620: LD_INT 34
6622: PUSH
6623: LD_INT 53
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: PPUSH
6641: NOP4
6645: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6646: NOP4
6650: PUSH
6651: LD_INT 22
6653: PUSH
6654: NOP4
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 21
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 3
6675: PUSH
6676: LD_INT 24
6678: PUSH
6679: LD_INT 660
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: PPUSH
6695: NOP4
6699: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6700: NOP4
6704: PUSH
6705: NOP4
6709: PPUSH
6710: LD_INT 22
6712: PUSH
6713: NOP4
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 21
6724: PUSH
6725: LD_INT 2
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 24
6737: PUSH
6738: LD_INT 1000
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PPUSH
6754: NOP4
6758: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6759: NOP4
6763: PUSH
6764: NOP4
6768: PPUSH
6769: LD_INT 22
6771: PUSH
6772: NOP4
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 21
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 24
6793: PUSH
6794: LD_INT 1000
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 58
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 34
6812: PUSH
6813: LD_INT 53
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: PPUSH
6831: NOP4
6835: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6836: NOP4
6840: PUSH
6841: EMPTY
6842: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6843: NOP4
6847: PUSH
6848: NOP4
6852: PPUSH
6853: LD_INT 22
6855: PUSH
6856: NOP4
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: LD_INT 25
6867: PUSH
6868: LD_INT 3
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PPUSH
6879: NOP4
6883: ST_TO_ADDR
// if damageVehicle_list > 0 then
6884: NOP4
6888: PUSH
6889: LD_INT 0
6891: GREATER
6892: IFFALSE 6930
// begin for i in damageVehicle_list do
6894: NOP4
6898: PUSH
6899: NOP4
6903: PUSH
6904: FOR_IN
6905: IFFALSE 6928
// begin ComMoveXY ( i , repX , repY ) ;
6907: NOP4
6911: PPUSH
6912: NOP4
6916: PPUSH
6917: NOP4
6921: PPUSH
6922: NOP4
// end ;
6926: GO 6904
6928: POP
6929: POP
// end ; if vehicleNeedRepair_list > 0 then
6930: NOP4
6934: PUSH
6935: LD_INT 0
6937: GREATER
6938: IFFALSE 7025
// begin for i in vehicleNeedRepair_list do
6940: NOP4
6944: PUSH
6945: NOP4
6949: PUSH
6950: FOR_IN
6951: IFFALSE 7023
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6953: NOP4
6957: PUSH
6958: NOP4
6962: PUSH
6963: NOP4
6967: PPUSH
6968: NOP4
6972: ADD
6973: ST_TO_ADDR
// for j in mechanicInside_list do
6974: NOP4
6978: PUSH
6979: NOP4
6983: PUSH
6984: FOR_IN
6985: IFFALSE 7019
// begin ComExitVehicle ( i ) ;
6987: NOP4
6991: PPUSH
6992: NOP4
// wait ( 0 0$1 ) ;
6996: LD_INT 35
6998: PPUSH
6999: NOP4
// ComRepairVehicle ( i , j ) ;
7003: NOP4
7007: PPUSH
7008: NOP4
7012: PPUSH
7013: NOP4
// end ;
7017: GO 6984
7019: POP
7020: POP
// end ;
7021: GO 6950
7023: POP
7024: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7025: NOP4
7029: PUSH
7030: LD_INT 0
7032: GREATER
7033: IFFALSE 7073
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7035: NOP4
7039: PUSH
7040: LD_INT 1
7042: ARRAY
7043: PPUSH
7044: NOP4
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: NOP4
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7057: NOP4
7061: PUSH
7062: LD_INT 1
7064: ARRAY
7065: PPUSH
7066: LD_INT 100
7068: PPUSH
7069: NOP4
// end ; if vehicleOK_list > 0 then
7073: NOP4
7077: PUSH
7078: LD_INT 0
7080: GREATER
7081: IFFALSE 7272
// begin for i in vehicleOK_list do
7083: NOP4
7087: PUSH
7088: NOP4
7092: PUSH
7093: FOR_IN
7094: IFFALSE 7270
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7096: NOP4
7100: PUSH
7101: LD_INT 22
7103: PUSH
7104: NOP4
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PPUSH
7113: NOP4
7117: PPUSH
7118: NOP4
7122: PPUSH
7123: NOP4
7127: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7128: NOP4
7132: PUSH
7133: LD_INT 22
7135: PUSH
7136: NOP4
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: LD_INT 59
7150: PUSH
7151: EMPTY
7152: LIST
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 1
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 21
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: PPUSH
7187: NOP4
7191: PPUSH
7192: NOP4
7196: PPUSH
7197: NOP4
7201: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7202: NOP4
7206: PPUSH
7207: NOP4
7211: PPUSH
7212: NOP4
7216: PUSH
7217: LD_INT 8
7219: PLUS
7220: PUSH
7221: NOP4
7225: PPUSH
7226: NOP4
7230: PPUSH
7231: NOP4
7235: LESS
7236: IFFALSE 7254
// begin ComAttackUnit ( i , target1 ) ;
7238: NOP4
7242: PPUSH
7243: NOP4
7247: PPUSH
7248: NOP4
// end else
7252: GO 7268
// begin ComAttackUnit ( i , target2 ) ;
7254: NOP4
7258: PPUSH
7259: NOP4
7263: PPUSH
7264: NOP4
// end ; end ;
7268: GO 7093
7270: POP
7271: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7272: NOP4
7276: PUSH
7277: NOP4
7281: PPUSH
7282: LD_INT 22
7284: PUSH
7285: NOP4
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 3
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: NOP4
7312: NOT
7313: PUSH
7314: FOR_IN
7315: IFFALSE 7338
// ComMoveXY ( i , repX , repY ) ;
7317: NOP4
7321: PPUSH
7322: NOP4
7326: PPUSH
7327: NOP4
7331: PPUSH
7332: NOP4
7336: GO 7314
7338: POP
7339: POP
// end ;
7340: LD_VAR 0 6
7344: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7345: LD_INT 0
7347: PPUSH
7348: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7349: LD_INT 22
7351: PUSH
7352: NOP4
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 25
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: NOP4
7379: PUSH
7380: LD_INT 0
7382: GREATER
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: NOP4
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 24
7411: PUSH
7412: LD_INT 1000
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: PPUSH
7428: NOP4
7432: PUSH
7433: LD_INT 0
7435: EQUAL
7436: AND
7437: PUSH
7438: NOP4
7442: PUSH
7443: LD_INT 0
7445: GREATER
7446: AND
7447: IFFALSE 7546
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7449: NOP4
7453: PUSH
7454: LD_INT 22
7456: PUSH
7457: NOP4
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 25
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: NOP4
7484: PUSH
7485: FOR_IN
7486: IFFALSE 7544
// begin AddComExitBuilding ( i ) ;
7488: NOP4
7492: PPUSH
7493: NOP4
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7497: NOP4
7501: PPUSH
7502: NOP4
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: NOP4
7515: PUSH
7516: LD_INT 2
7518: ARRAY
7519: PPUSH
7520: NOP4
7524: PUSH
7525: LD_INT 3
7527: ARRAY
7528: PPUSH
7529: NOP4
7533: PUSH
7534: LD_INT 4
7536: ARRAY
7537: PPUSH
7538: NOP4
// end ;
7542: GO 7485
7544: POP
7545: POP
// end ; end ;
7546: LD_VAR 0 3
7550: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7560: NOP4
7564: PUSH
7565: LD_INT 22
7567: PUSH
7568: NOP4
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 56
7589: PUSH
7590: EMPTY
7591: LIST
7592: PUSH
7593: LD_INT 24
7595: PUSH
7596: LD_INT 700
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PPUSH
7609: NOP4
7613: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7614: NOP4
7618: PUSH
7619: LD_INT 22
7621: PUSH
7622: NOP4
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 30
7633: PUSH
7634: LD_INT 32
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 58
7643: PUSH
7644: EMPTY
7645: LIST
7646: PUSH
7647: LD_INT 24
7649: PUSH
7650: LD_INT 251
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: PPUSH
7663: NOP4
7667: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7668: NOP4
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: NOP4
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 2
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 5
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 25
7700: PUSH
7701: LD_INT 8
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 9
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PPUSH
7728: NOP4
7732: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7733: NOP4
7737: PUSH
7738: NOP4
7742: PPUSH
7743: NOP4
7747: PUSH
7748: NOP4
7752: DIFF
7753: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7754: NOP4
7758: PUSH
7759: LD_INT 0
7761: EQUAL
7762: PUSH
7763: NOP4
7767: PUSH
7768: LD_INT 0
7770: EQUAL
7771: AND
7772: IFFALSE 7818
// begin for i in soldiers_list do
7774: NOP4
7778: PUSH
7779: NOP4
7783: PUSH
7784: FOR_IN
7785: IFFALSE 7814
// begin if IsOK ( build ) then
7787: NOP4
7791: PPUSH
7792: NOP4
7796: IFFALSE 7812
// ComEnterUnit ( i , build ) ;
7798: NOP4
7802: PPUSH
7803: NOP4
7807: PPUSH
7808: NOP4
// end ;
7812: GO 7784
7814: POP
7815: POP
// end else
7816: GO 7903
// begin for i = 1 to turretList do
7818: NOP4
7822: PUSH
7823: DOUBLE
7824: LD_INT 1
7826: DEC
7827: ST_TO_ADDR
7828: NOP4
7832: PUSH
7833: FOR_TO
7834: IFFALSE 7901
// begin for j = 1 to temp do
7836: NOP4
7840: PUSH
7841: DOUBLE
7842: LD_INT 1
7844: DEC
7845: ST_TO_ADDR
7846: NOP4
7850: PUSH
7851: FOR_TO
7852: IFFALSE 7897
// begin ComExitBuilding ( temp [ j ] ) ;
7854: NOP4
7858: PUSH
7859: NOP4
7863: ARRAY
7864: PPUSH
7865: NOP4
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7869: NOP4
7873: PUSH
7874: NOP4
7878: ARRAY
7879: PPUSH
7880: NOP4
7884: PUSH
7885: NOP4
7889: ARRAY
7890: PPUSH
7891: NOP4
// end ;
7895: GO 7851
7897: POP
7898: POP
// end ;
7899: GO 7833
7901: POP
7902: POP
// end ; end ;
7903: LD_VAR 0 4
7907: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7915: NOP4
7919: PUSH
7920: LD_INT 22
7922: PUSH
7923: NOP4
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 30
7937: PUSH
7938: LD_INT 31
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 30
7947: PUSH
7948: LD_INT 32
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 30
7957: PUSH
7958: LD_INT 33
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 30
7967: PUSH
7968: LD_INT 4
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 30
7977: PUSH
7978: LD_INT 5
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PPUSH
7997: NOP4
8001: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8002: NOP4
8006: PUSH
8007: LD_INT 22
8009: PUSH
8010: NOP4
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 58
8031: PUSH
8032: EMPTY
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: PPUSH
8040: NOP4
8044: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8045: NOP4
8049: PUSH
8050: LD_INT 0
8052: GREATER
8053: PUSH
8054: NOP4
8058: PUSH
8059: LD_INT 0
8061: GREATER
8062: AND
8063: IFFALSE 8133
// begin for i in turretsList do
8065: NOP4
8069: PUSH
8070: NOP4
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8131
// begin for j in enemyBuildings do
8078: NOP4
8082: PUSH
8083: NOP4
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8127
// begin if GetDistUnits ( i , j ) < 20 then
8091: NOP4
8095: PPUSH
8096: NOP4
8100: PPUSH
8101: NOP4
8105: PUSH
8106: LD_INT 20
8108: LESS
8109: IFFALSE 8125
// begin ComAttackUnit ( i , j ) ;
8111: NOP4
8115: PPUSH
8116: NOP4
8120: PPUSH
8121: NOP4
// end ; end ;
8125: GO 8088
8127: POP
8128: POP
// end ;
8129: GO 8075
8131: POP
8132: POP
// end ; end ;
8133: LD_VAR 0 3
8137: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8138: LD_INT 0
8140: PPUSH
8141: PPUSH
8142: PPUSH
8143: PPUSH
8144: PPUSH
8145: PPUSH
8146: PPUSH
8147: PPUSH
8148: PPUSH
8149: PPUSH
8150: PPUSH
// for i = 1 to medicCount do
8151: NOP4
8155: PUSH
8156: DOUBLE
8157: LD_INT 1
8159: DEC
8160: ST_TO_ADDR
8161: NOP4
8165: PUSH
8166: FOR_TO
8167: IFFALSE 8249
// begin uc_side = side ;
8169: LD_ADDR_OWVAR 20
8173: PUSH
8174: NOP4
8178: ST_TO_ADDR
// uc_nation = nation ;
8179: LD_ADDR_OWVAR 21
8183: PUSH
8184: NOP4
8188: ST_TO_ADDR
// hc_name =  ;
8189: LD_ADDR_OWVAR 26
8193: PUSH
8194: LD_STRING 
8196: ST_TO_ADDR
// hc_gallery =  ;
8197: LD_ADDR_OWVAR 33
8201: PUSH
8202: LD_STRING 
8204: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8205: LD_INT 0
8207: PPUSH
8208: LD_INT 4
8210: PPUSH
8211: NOP4
8215: PPUSH
8216: NOP4
// un = CreateHuman ;
8220: NOP4
8224: PUSH
8225: NOP4
8229: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8230: NOP4
8234: PPUSH
8235: NOP4
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: NOP4
// end ;
8247: GO 8166
8249: POP
8250: POP
// for i = 1 to soldierCount do
8251: NOP4
8255: PUSH
8256: DOUBLE
8257: LD_INT 1
8259: DEC
8260: ST_TO_ADDR
8261: NOP4
8265: PUSH
8266: FOR_TO
8267: IFFALSE 8349
// begin uc_side = side ;
8269: LD_ADDR_OWVAR 20
8273: PUSH
8274: NOP4
8278: ST_TO_ADDR
// uc_nation = nation ;
8279: LD_ADDR_OWVAR 21
8283: PUSH
8284: NOP4
8288: ST_TO_ADDR
// hc_name =  ;
8289: LD_ADDR_OWVAR 26
8293: PUSH
8294: LD_STRING 
8296: ST_TO_ADDR
// hc_gallery =  ;
8297: LD_ADDR_OWVAR 33
8301: PUSH
8302: LD_STRING 
8304: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8305: LD_INT 0
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: NOP4
8315: PPUSH
8316: NOP4
// un = CreateHuman ;
8320: NOP4
8324: PUSH
8325: NOP4
8329: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8330: NOP4
8334: PPUSH
8335: NOP4
8339: PPUSH
8340: LD_INT 0
8342: PPUSH
8343: NOP4
// end ;
8347: GO 8266
8349: POP
8350: POP
// for i = 1 to sniperCount do
8351: NOP4
8355: PUSH
8356: DOUBLE
8357: LD_INT 1
8359: DEC
8360: ST_TO_ADDR
8361: NOP4
8365: PUSH
8366: FOR_TO
8367: IFFALSE 8449
// begin uc_side = side ;
8369: LD_ADDR_OWVAR 20
8373: PUSH
8374: NOP4
8378: ST_TO_ADDR
// uc_nation = nation ;
8379: LD_ADDR_OWVAR 21
8383: PUSH
8384: NOP4
8388: ST_TO_ADDR
// hc_name =  ;
8389: LD_ADDR_OWVAR 26
8393: PUSH
8394: LD_STRING 
8396: ST_TO_ADDR
// hc_gallery =  ;
8397: LD_ADDR_OWVAR 33
8401: PUSH
8402: LD_STRING 
8404: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8405: LD_INT 0
8407: PPUSH
8408: LD_INT 5
8410: PPUSH
8411: NOP4
8415: PPUSH
8416: NOP4
// un = CreateHuman ;
8420: NOP4
8424: PUSH
8425: NOP4
8429: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8430: NOP4
8434: PPUSH
8435: NOP4
8439: PPUSH
8440: LD_INT 0
8442: PPUSH
8443: NOP4
// end ;
8447: GO 8366
8449: POP
8450: POP
// for i = 1 to bazookCount do
8451: NOP4
8455: PUSH
8456: DOUBLE
8457: LD_INT 1
8459: DEC
8460: ST_TO_ADDR
8461: NOP4
8465: PUSH
8466: FOR_TO
8467: IFFALSE 8549
// begin uc_side = side ;
8469: LD_ADDR_OWVAR 20
8473: PUSH
8474: NOP4
8478: ST_TO_ADDR
// uc_nation = nation ;
8479: LD_ADDR_OWVAR 21
8483: PUSH
8484: NOP4
8488: ST_TO_ADDR
// hc_name =  ;
8489: LD_ADDR_OWVAR 26
8493: PUSH
8494: LD_STRING 
8496: ST_TO_ADDR
// hc_gallery =  ;
8497: LD_ADDR_OWVAR 33
8501: PUSH
8502: LD_STRING 
8504: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8505: LD_INT 0
8507: PPUSH
8508: LD_INT 9
8510: PPUSH
8511: NOP4
8515: PPUSH
8516: NOP4
// un = CreateHuman ;
8520: NOP4
8524: PUSH
8525: NOP4
8529: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8530: NOP4
8534: PPUSH
8535: NOP4
8539: PPUSH
8540: LD_INT 0
8542: PPUSH
8543: NOP4
// end ;
8547: GO 8466
8549: POP
8550: POP
// for i = 1 to mortalCount do
8551: NOP4
8555: PUSH
8556: DOUBLE
8557: LD_INT 1
8559: DEC
8560: ST_TO_ADDR
8561: NOP4
8565: PUSH
8566: FOR_TO
8567: IFFALSE 8649
// begin uc_side = side ;
8569: LD_ADDR_OWVAR 20
8573: PUSH
8574: NOP4
8578: ST_TO_ADDR
// uc_nation = nation ;
8579: LD_ADDR_OWVAR 21
8583: PUSH
8584: NOP4
8588: ST_TO_ADDR
// hc_name =  ;
8589: LD_ADDR_OWVAR 26
8593: PUSH
8594: LD_STRING 
8596: ST_TO_ADDR
// hc_gallery =  ;
8597: LD_ADDR_OWVAR 33
8601: PUSH
8602: LD_STRING 
8604: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8605: LD_INT 0
8607: PPUSH
8608: LD_INT 8
8610: PPUSH
8611: NOP4
8615: PPUSH
8616: NOP4
// un = CreateHuman ;
8620: NOP4
8624: PUSH
8625: NOP4
8629: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8630: NOP4
8634: PPUSH
8635: NOP4
8639: PPUSH
8640: LD_INT 0
8642: PPUSH
8643: NOP4
// end ;
8647: GO 8566
8649: POP
8650: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8651: NOP4
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: NOP4
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: LD_INT 2
8670: PUSH
8671: LD_INT 25
8673: PUSH
8674: LD_INT 1
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 25
8683: PUSH
8684: LD_INT 5
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 8
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 25
8703: PUSH
8704: LD_INT 9
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: NOP4
8726: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8727: NOP4
8731: PUSH
8732: LD_INT 22
8734: PUSH
8735: NOP4
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 4
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: NOP4
8762: ST_TO_ADDR
// for i in medic_list do
8763: NOP4
8767: PUSH
8768: NOP4
8772: PUSH
8773: FOR_IN
8774: IFFALSE 8792
// ComMoveToArea ( i , healArea ) ;
8776: NOP4
8780: PPUSH
8781: NOP4
8785: PPUSH
8786: NOP4
8790: GO 8773
8792: POP
8793: POP
// if strategy = 1 then
8794: NOP4
8798: PUSH
8799: LD_INT 1
8801: EQUAL
8802: IFFALSE 9507
// begin repeat wait ( 0 0$3 ) ;
8804: LD_INT 105
8806: PPUSH
8807: NOP4
// for i in soldiersOK_list do
8811: NOP4
8815: PUSH
8816: NOP4
8820: PUSH
8821: FOR_IN
8822: IFFALSE 8856
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8824: NOP4
8828: PPUSH
8829: LD_INT 80
8831: PPUSH
8832: LD_INT 109
8834: PPUSH
8835: NOP4
// AddComAgressiveMove ( i , 39 , 49 ) ;
8839: NOP4
8843: PPUSH
8844: LD_INT 39
8846: PPUSH
8847: LD_INT 49
8849: PPUSH
8850: NOP4
// end ;
8854: GO 8821
8856: POP
8857: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8858: LD_INT 15
8860: PPUSH
8861: LD_INT 22
8863: PUSH
8864: NOP4
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: NOP4
8877: PUSH
8878: LD_INT 0
8880: GREATER
8881: IFFALSE 8804
// repeat wait ( 0 0$1 ) ;
8883: LD_INT 35
8885: PPUSH
8886: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8890: NOP4
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: NOP4
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 1
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 24
8915: PUSH
8916: LD_INT 550
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 24
8929: PUSH
8930: LD_INT 250
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PPUSH
8946: NOP4
8950: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8951: NOP4
8955: PUSH
8956: LD_INT 22
8958: PUSH
8959: NOP4
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: LD_INT 25
8973: PUSH
8974: LD_INT 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 25
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 8
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 25
9003: PUSH
9004: LD_INT 9
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 24
9020: PUSH
9021: LD_INT 1000
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: PPUSH
9033: NOP4
9037: ST_TO_ADDR
// if medicCount > 0 then
9038: NOP4
9042: PUSH
9043: LD_INT 0
9045: GREATER
9046: IFFALSE 9120
// begin if damageUnit_list > 0 then
9048: NOP4
9052: PUSH
9053: LD_INT 0
9055: GREATER
9056: IFFALSE 9120
// begin for i in damageUnit_list do
9058: NOP4
9062: PUSH
9063: NOP4
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9118
// begin ComMoveToArea ( i , healArea ) ;
9071: NOP4
9075: PPUSH
9076: NOP4
9080: PPUSH
9081: NOP4
// for j in medic_list do
9085: NOP4
9089: PUSH
9090: NOP4
9094: PUSH
9095: FOR_IN
9096: IFFALSE 9114
// AddComHeal ( j , i ) ;
9098: NOP4
9102: PPUSH
9103: NOP4
9107: PPUSH
9108: NOP4
9112: GO 9095
9114: POP
9115: POP
// end ;
9116: GO 9068
9118: POP
9119: POP
// end ; end ; for i in soldiersOK_list do
9120: NOP4
9124: PUSH
9125: NOP4
9129: PUSH
9130: FOR_IN
9131: IFFALSE 9307
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9133: NOP4
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: NOP4
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PPUSH
9150: NOP4
9154: PPUSH
9155: NOP4
9159: PPUSH
9160: NOP4
9164: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9165: NOP4
9169: PUSH
9170: LD_INT 22
9172: PUSH
9173: NOP4
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: LD_INT 59
9187: PUSH
9188: EMPTY
9189: LIST
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 1
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 21
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: PPUSH
9224: NOP4
9228: PPUSH
9229: NOP4
9233: PPUSH
9234: NOP4
9238: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9239: NOP4
9243: PPUSH
9244: NOP4
9248: PPUSH
9249: NOP4
9253: PUSH
9254: LD_INT 8
9256: PLUS
9257: PUSH
9258: NOP4
9262: PPUSH
9263: NOP4
9267: PPUSH
9268: NOP4
9272: LESS
9273: IFFALSE 9291
// begin ComAttackUnit ( i , target1 ) ;
9275: NOP4
9279: PPUSH
9280: NOP4
9284: PPUSH
9285: NOP4
// end else
9289: GO 9305
// begin ComAttackUnit ( i , target2 ) ;
9291: NOP4
9295: PPUSH
9296: NOP4
9300: PPUSH
9301: NOP4
// end ; end ;
9305: GO 9130
9307: POP
9308: POP
// for i in soldiersOK_list do
9309: NOP4
9313: PUSH
9314: NOP4
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9496
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9322: NOP4
9326: PUSH
9327: LD_INT 22
9329: PUSH
9330: NOP4
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PPUSH
9339: NOP4
9343: PPUSH
9344: NOP4
9348: PPUSH
9349: NOP4
9353: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9354: NOP4
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: NOP4
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 2
9373: PUSH
9374: LD_INT 59
9376: PUSH
9377: EMPTY
9378: LIST
9379: PUSH
9380: LD_INT 21
9382: PUSH
9383: LD_INT 1
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 21
9392: PUSH
9393: LD_INT 2
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: PUSH
9410: EMPTY
9411: LIST
9412: PPUSH
9413: NOP4
9417: PPUSH
9418: NOP4
9422: PPUSH
9423: NOP4
9427: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9428: NOP4
9432: PPUSH
9433: NOP4
9437: PPUSH
9438: NOP4
9442: PUSH
9443: LD_INT 8
9445: PLUS
9446: PUSH
9447: NOP4
9451: PPUSH
9452: NOP4
9456: PPUSH
9457: NOP4
9461: LESS
9462: IFFALSE 9480
// begin ComAttackUnit ( i , target1 ) ;
9464: NOP4
9468: PPUSH
9469: NOP4
9473: PPUSH
9474: NOP4
// end else
9478: GO 9494
// begin ComAttackUnit ( i , target2 ) ;
9480: NOP4
9484: PPUSH
9485: NOP4
9489: PPUSH
9490: NOP4
// end ; end ;
9494: GO 9319
9496: POP
9497: POP
// until soldiersOK_list = [ ] ;
9498: NOP4
9502: PUSH
9503: EMPTY
9504: EQUAL
9505: IFFALSE 8883
// end ; if strategy = 2 then
9507: NOP4
9511: PUSH
9512: LD_INT 2
9514: EQUAL
9515: IFFALSE 10220
// begin repeat wait ( 0 0$1 ) ;
9517: LD_INT 35
9519: PPUSH
9520: NOP4
// for i in soldiersOK_list do
9524: NOP4
9528: PUSH
9529: NOP4
9533: PUSH
9534: FOR_IN
9535: IFFALSE 9569
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9537: NOP4
9541: PPUSH
9542: LD_INT 117
9544: PPUSH
9545: LD_INT 97
9547: PPUSH
9548: NOP4
// AddComAgressiveMove ( i , 94 , 50 ) ;
9552: NOP4
9556: PPUSH
9557: LD_INT 94
9559: PPUSH
9560: LD_INT 50
9562: PPUSH
9563: NOP4
// end ;
9567: GO 9534
9569: POP
9570: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9571: LD_INT 16
9573: PPUSH
9574: LD_INT 22
9576: PUSH
9577: NOP4
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: NOP4
9590: PUSH
9591: LD_INT 0
9593: GREATER
9594: IFFALSE 9517
// repeat wait ( 0 0$3 ) ;
9596: LD_INT 105
9598: PPUSH
9599: NOP4
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9603: NOP4
9607: PUSH
9608: LD_INT 22
9610: PUSH
9611: NOP4
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 3
9625: PUSH
9626: LD_INT 24
9628: PUSH
9629: LD_INT 550
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 24
9642: PUSH
9643: LD_INT 250
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PPUSH
9659: NOP4
9663: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9664: NOP4
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: NOP4
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: LD_INT 25
9686: PUSH
9687: LD_INT 1
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 25
9696: PUSH
9697: LD_INT 5
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 25
9706: PUSH
9707: LD_INT 8
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 25
9716: PUSH
9717: LD_INT 9
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 24
9733: PUSH
9734: LD_INT 1000
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: PPUSH
9746: NOP4
9750: ST_TO_ADDR
// if medicCount > 0 then
9751: NOP4
9755: PUSH
9756: LD_INT 0
9758: GREATER
9759: IFFALSE 9833
// begin if damageUnit_list > 0 then
9761: NOP4
9765: PUSH
9766: LD_INT 0
9768: GREATER
9769: IFFALSE 9833
// begin for i in damageUnit_list do
9771: NOP4
9775: PUSH
9776: NOP4
9780: PUSH
9781: FOR_IN
9782: IFFALSE 9831
// begin ComMoveToArea ( i , healArea ) ;
9784: NOP4
9788: PPUSH
9789: NOP4
9793: PPUSH
9794: NOP4
// for j in medic_list do
9798: NOP4
9802: PUSH
9803: NOP4
9807: PUSH
9808: FOR_IN
9809: IFFALSE 9827
// AddComHeal ( j , i ) ;
9811: NOP4
9815: PPUSH
9816: NOP4
9820: PPUSH
9821: NOP4
9825: GO 9808
9827: POP
9828: POP
// end ;
9829: GO 9781
9831: POP
9832: POP
// end ; end ; for i in soldiersOK_list do
9833: NOP4
9837: PUSH
9838: NOP4
9842: PUSH
9843: FOR_IN
9844: IFFALSE 10020
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9846: NOP4
9850: PUSH
9851: LD_INT 22
9853: PUSH
9854: NOP4
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: NOP4
9867: PPUSH
9868: NOP4
9872: PPUSH
9873: NOP4
9877: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9878: NOP4
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: NOP4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 59
9900: PUSH
9901: EMPTY
9902: LIST
9903: PUSH
9904: LD_INT 21
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 2
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: PPUSH
9937: NOP4
9941: PPUSH
9942: NOP4
9946: PPUSH
9947: NOP4
9951: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9952: NOP4
9956: PPUSH
9957: NOP4
9961: PPUSH
9962: NOP4
9966: PUSH
9967: LD_INT 8
9969: PLUS
9970: PUSH
9971: NOP4
9975: PPUSH
9976: NOP4
9980: PPUSH
9981: NOP4
9985: LESS
9986: IFFALSE 10004
// begin ComAttackUnit ( i , target1 ) ;
9988: NOP4
9992: PPUSH
9993: NOP4
9997: PPUSH
9998: NOP4
// end else
10002: GO 10018
// begin ComAttackUnit ( i , target2 ) ;
10004: NOP4
10008: PPUSH
10009: NOP4
10013: PPUSH
10014: NOP4
// end ; end ;
10018: GO 9843
10020: POP
10021: POP
// for i in soldiersOK_list do
10022: NOP4
10026: PUSH
10027: NOP4
10031: PUSH
10032: FOR_IN
10033: IFFALSE 10209
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10035: NOP4
10039: PUSH
10040: LD_INT 22
10042: PUSH
10043: NOP4
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PPUSH
10052: NOP4
10056: PPUSH
10057: NOP4
10061: PPUSH
10062: NOP4
10066: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10067: NOP4
10071: PUSH
10072: LD_INT 22
10074: PUSH
10075: NOP4
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 2
10086: PUSH
10087: LD_INT 59
10089: PUSH
10090: EMPTY
10091: LIST
10092: PUSH
10093: LD_INT 21
10095: PUSH
10096: LD_INT 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 21
10105: PUSH
10106: LD_INT 2
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: EMPTY
10124: LIST
10125: PPUSH
10126: NOP4
10130: PPUSH
10131: NOP4
10135: PPUSH
10136: NOP4
10140: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10141: NOP4
10145: PPUSH
10146: NOP4
10150: PPUSH
10151: NOP4
10155: PUSH
10156: LD_INT 8
10158: PLUS
10159: PUSH
10160: NOP4
10164: PPUSH
10165: NOP4
10169: PPUSH
10170: NOP4
10174: LESS
10175: IFFALSE 10193
// begin ComAttackUnit ( i , target1 ) ;
10177: NOP4
10181: PPUSH
10182: NOP4
10186: PPUSH
10187: NOP4
// end else
10191: GO 10207
// begin ComAttackUnit ( i , target2 ) ;
10193: NOP4
10197: PPUSH
10198: NOP4
10202: PPUSH
10203: NOP4
// end ; end ;
10207: GO 10032
10209: POP
10210: POP
// until soldiersOK_list = [ ] ;
10211: NOP4
10215: PUSH
10216: EMPTY
10217: EQUAL
10218: IFFALSE 9596
// end ; end ; end_of_file
10220: LD_VAR 0 13
10224: RET
// every 0 0$01 do
10225: GO 10227
10227: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10228: LD_INT 22
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 25
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PPUSH
10252: NOP4
10256: PUSH
10257: LD_INT 0
10259: EQUAL
10260: IFFALSE 10274
// SetClass ( JMM , 2 ) ;
10262: NOP4
10266: PPUSH
10267: LD_INT 2
10269: PPUSH
10270: NOP4
// ChangeMissionObjectives ( M1 ) ;
10274: LD_STRING M1
10276: PPUSH
10277: NOP4
// case difficulty of 1 :
10281: NOP4
10285: PUSH
10286: LD_INT 1
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10304
10294: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10295: LD_STRING M1-1
10297: PPUSH
10298: NOP4
10302: GO 10341
10304: LD_INT 2
10306: DOUBLE
10307: EQUAL
10308: IFTRUE 10312
10310: GO 10322
10312: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10313: LD_STRING M1-2
10315: PPUSH
10316: NOP4
10320: GO 10341
10322: LD_INT 3
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10340
10330: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10331: LD_STRING M1-3
10333: PPUSH
10334: NOP4
10338: GO 10341
10340: POP
// ChangeMissionObjectives ( M1cont ) ;
10341: LD_STRING M1cont
10343: PPUSH
10344: NOP4
// SaveForQuickRestart ;
10348: NOP4
// end ;
10352: END
// every 0 0$1 do
10353: GO 10355
10355: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10356: LD_INT 350
10358: PPUSH
10359: LD_INT 875
10361: PPUSH
10362: NOP4
10366: PPUSH
10367: NOP4
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10371: LD_INT 5
10373: PPUSH
10374: LD_INT 4
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: NOP4
// wait ( 0 0$15 ) ;
10384: LD_INT 525
10386: PPUSH
10387: NOP4
// if IsOk ( Lisa ) then
10391: NOP4
10395: PPUSH
10396: NOP4
10400: IFFALSE 10416
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10402: NOP4
10406: PPUSH
10407: LD_STRING DR0-Lisa-1
10409: PPUSH
10410: NOP4
// end else
10414: GO 10566
// begin if IsOK ( Cyrus ) then
10416: NOP4
10420: PPUSH
10421: NOP4
10425: IFFALSE 10441
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10427: NOP4
10431: PPUSH
10432: LD_STRING DR0-Cyrus-1
10434: PPUSH
10435: NOP4
// end else
10439: GO 10566
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10441: LD_INT 22
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: LD_INT 25
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 25
10476: PUSH
10477: LD_INT 2
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 3
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 4
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 26
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: PPUSH
10530: NOP4
10534: PUSH
10535: NOP4
10539: PUSH
10540: NOP4
10544: PUSH
10545: NOP4
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: DIFF
10555: PPUSH
10556: LD_STRING DR0-Sol1-1
10558: PPUSH
10559: LD_STRING DR0-Sol1-1
10561: PPUSH
10562: NOP4
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10566: LD_INT 22
10568: PUSH
10569: LD_INT 1
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 21
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 2
10588: PUSH
10589: LD_INT 25
10591: PUSH
10592: LD_INT 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 25
10601: PUSH
10602: LD_INT 2
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 25
10611: PUSH
10612: LD_INT 3
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 25
10621: PUSH
10622: LD_INT 4
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: PUSH
10636: LD_INT 26
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: PPUSH
10655: NOP4
10659: PUSH
10660: NOP4
10664: PUSH
10665: NOP4
10669: PUSH
10670: NOP4
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: DIFF
10680: PPUSH
10681: LD_STRING DR0-Sol2-1
10683: PPUSH
10684: LD_STRING DR0-Sol2-1
10686: PPUSH
10687: NOP4
// Say ( JMM , DR0-JMM-1 ) ;
10691: NOP4
10695: PPUSH
10696: LD_STRING DR0-JMM-1
10698: PPUSH
10699: NOP4
// end ;
10703: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10704: NOP4
10708: PPUSH
10709: NOP4
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_INT 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 25
10726: PUSH
10727: LD_INT 16
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PPUSH
10738: NOP4
10742: PUSH
10743: LD_INT 0
10745: GREATER
10746: AND
10747: IFFALSE 11025
10749: GO 10751
10751: DISABLE
// begin DialogueOn ;
10752: NOP4
// Say ( Frank , D10-Frank-1 ) ;
10756: NOP4
10760: PPUSH
10761: LD_STRING D10-Frank-1
10763: PPUSH
10764: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10768: LD_INT 22
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 21
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 2
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 3
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 4
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: PPUSH
10843: NOP4
10847: PUSH
10848: NOP4
10852: PUSH
10853: NOP4
10857: PUSH
10858: NOP4
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: DIFF
10868: PPUSH
10869: LD_STRING D10-Sol1-1
10871: PPUSH
10872: LD_STRING D10-FSol1-1
10874: PPUSH
10875: NOP4
// Say ( Frank , D10-Frank-2 ) ;
10879: NOP4
10883: PPUSH
10884: LD_STRING D10-Frank-2
10886: PPUSH
10887: NOP4
// if IsOK ( Lisa ) then
10891: NOP4
10895: PPUSH
10896: NOP4
10900: IFFALSE 10916
// begin Say ( Lisa , D10-Lisa-2 ) ;
10902: NOP4
10906: PPUSH
10907: LD_STRING D10-Lisa-2
10909: PPUSH
10910: NOP4
// end else
10914: GO 11021
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10916: LD_INT 22
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 21
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 25
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 4
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: PPUSH
10991: NOP4
10995: PUSH
10996: NOP4
11000: PUSH
11001: NOP4
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: DIFF
11010: PPUSH
11011: LD_STRING D10-Sol1-2
11013: PPUSH
11014: LD_STRING D10-FSol1-2
11016: PPUSH
11017: NOP4
// end ; DialogueOff ;
11021: NOP4
// end ;
11025: END
// every 10 10$30 do
11026: GO 11028
11028: DISABLE
// begin HarrisonSupport ;
11029: NOP4
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11033: NOP4
11037: PPUSH
11038: NOP4
11042: PPUSH
11043: NOP4
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11047: NOP4
11051: PPUSH
11052: LD_STRING DEng-Eng1-1
11054: PPUSH
11055: NOP4
// wait ( 1 1$0 ) ;
11059: LD_INT 2100
11061: PPUSH
11062: NOP4
// DialogueOn ;
11066: NOP4
// SayRadio ( Harisson , DRem-Har-1 ) ;
11070: NOP4
11074: PPUSH
11075: LD_STRING DRem-Har-1
11077: PPUSH
11078: NOP4
// if contactWithRussian = 1 then
11082: NOP4
11086: PUSH
11087: LD_INT 1
11089: EQUAL
11090: IFFALSE 11106
// begin Say ( JMM , DRem-JMM-1 ) ;
11092: NOP4
11096: PPUSH
11097: LD_STRING DRem-JMM-1
11099: PPUSH
11100: NOP4
// end else
11104: GO 11118
// begin Say ( JMM , DRem-JMM-1a ) ;
11106: NOP4
11110: PPUSH
11111: LD_STRING DRem-JMM-1a
11113: PPUSH
11114: NOP4
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11118: NOP4
11122: PPUSH
11123: LD_STRING DRem-Har-2
11125: PPUSH
11126: NOP4
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11130: LD_STRING DenisInDelta
11132: PPUSH
11133: LD_INT 0
11135: PPUSH
11136: NOP4
11140: PUSH
11141: LD_INT 1
11143: EQUAL
11144: IFFALSE 11160
// begin Say ( JMM , DRem-JMM-2 ) ;
11146: NOP4
11150: PPUSH
11151: LD_STRING DRem-JMM-2
11153: PPUSH
11154: NOP4
// end else
11158: GO 11172
// begin Say ( JMM , DRem-JMM-2a ) ;
11160: NOP4
11164: PPUSH
11165: LD_STRING DRem-JMM-2a
11167: PPUSH
11168: NOP4
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11172: NOP4
11176: PPUSH
11177: LD_STRING DRem-Har-3
11179: PPUSH
11180: NOP4
// Say ( JMM , DRem-JMM-3 ) ;
11184: NOP4
11188: PPUSH
11189: LD_STRING DRem-JMM-3
11191: PPUSH
11192: NOP4
// SayRadio ( Harisson , DRem-Har-4 ) ;
11196: NOP4
11200: PPUSH
11201: LD_STRING DRem-Har-4
11203: PPUSH
11204: NOP4
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11208: LD_STRING DenisInDelta
11210: PPUSH
11211: LD_INT 0
11213: PPUSH
11214: NOP4
11218: PUSH
11219: LD_INT 1
11221: EQUAL
11222: IFFALSE 11250
// begin Say ( JMM , DRem-JMM-4 ) ;
11224: NOP4
11228: PPUSH
11229: LD_STRING DRem-JMM-4
11231: PPUSH
11232: NOP4
// SayRadio ( Harisson , DRem-Har-5 ) ;
11236: NOP4
11240: PPUSH
11241: LD_STRING DRem-Har-5
11243: PPUSH
11244: NOP4
// end else
11248: GO 11283
// begin SetRestrict ( 36 , 1 , true ) ;
11250: LD_INT 36
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: NOP4
// SetTech ( 15 , 1 , state_enabled ) ;
11263: LD_INT 15
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: NOP4
// ChangeMissionObjectives ( MR ) ;
11276: LD_STRING MR
11278: PPUSH
11279: NOP4
// end ; DialogueOff ;
11283: NOP4
// end ;
11287: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11288: LD_STRING DenisInDelta
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: NOP4
11298: PUSH
11299: LD_INT 1
11301: EQUAL
11302: IFFALSE 11433
11304: GO 11306
11306: DISABLE
// begin PrepareDenis ;
11307: NOP4
// CenterNowOnUnits ( Denis ) ;
11311: NOP4
11315: PPUSH
11316: NOP4
// DialogueOn ;
11320: NOP4
// Say ( Denis , DDen-Den-1 ) ;
11324: NOP4
11328: PPUSH
11329: LD_STRING DDen-Den-1
11331: PPUSH
11332: NOP4
// Say ( JMM , DDen-JMM-1 ) ;
11336: NOP4
11340: PPUSH
11341: LD_STRING DDen-JMM-1
11343: PPUSH
11344: NOP4
// Say ( Denis , DDen-Den-2 ) ;
11348: NOP4
11352: PPUSH
11353: LD_STRING DDen-Den-2
11355: PPUSH
11356: NOP4
// Say ( JMM , DDen-JMM-2 ) ;
11360: NOP4
11364: PPUSH
11365: LD_STRING DDen-JMM-2
11367: PPUSH
11368: NOP4
// Say ( Denis , DDen-Den-3 ) ;
11372: NOP4
11376: PPUSH
11377: LD_STRING DDen-Den-3
11379: PPUSH
11380: NOP4
// Say ( JMM , DDen-JMM-3 ) ;
11384: NOP4
11388: PPUSH
11389: LD_STRING DDen-JMM-3
11391: PPUSH
11392: NOP4
// DialogueOff ;
11396: NOP4
// SetRestrict ( 36 , 1 , true ) ;
11400: LD_INT 36
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: NOP4
// SetTech ( 15 , 1 , state_enabled ) ;
11413: LD_INT 15
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: NOP4
// ChangeMissionObjectives ( MR ) ;
11426: LD_STRING MR
11428: PPUSH
11429: NOP4
// end ;
11433: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11434: NOP4
11438: PUSH
11439: NOP4
11443: PPUSH
11444: NOP4
11448: AND
11449: IFFALSE 11478
11451: GO 11453
11453: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11454: NOP4
11458: PPUSH
11459: LD_STRING DR1-Den-1
11461: PPUSH
11462: NOP4
// Say ( JMM , DR1-JMM-1 ) ;
11466: NOP4
11470: PPUSH
11471: LD_STRING DR1-JMM-1
11473: PPUSH
11474: NOP4
// end ;
11478: END
// function CheckOptoLab ; var i ; begin
11479: LD_INT 0
11481: PPUSH
11482: PPUSH
// result = false ;
11483: NOP4
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11491: NOP4
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: LD_INT 30
11511: PUSH
11512: LD_INT 7
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 8
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: NOP4
11542: PUSH
11543: FOR_IN
11544: IFFALSE 11596
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11546: NOP4
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: NOP4
11558: PUSH
11559: LD_INT 15
11561: EQUAL
11562: PUSH
11563: NOP4
11567: PPUSH
11568: LD_INT 2
11570: PPUSH
11571: NOP4
11575: PUSH
11576: LD_INT 15
11578: EQUAL
11579: OR
11580: IFFALSE 11592
// begin result = true ;
11582: NOP4
11586: PUSH
11587: LD_INT 1
11589: ST_TO_ADDR
// break ;
11590: GO 11596
// end ; break ;
11592: GO 11596
// end ;
11594: GO 11543
11596: POP
11597: POP
// end ;
11598: LD_VAR 0 1
11602: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11603: LD_INT 15
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: NOP4
11613: PUSH
11614: LD_INT 2
11616: EQUAL
11617: PUSH
11618: NOP4
11622: PPUSH
11623: NOP4
11627: AND
11628: IFFALSE 11860
11630: GO 11632
11632: DISABLE
// begin DialogueOn ;
11633: NOP4
// if IsOK ( Denis ) then
11637: NOP4
11641: PPUSH
11642: NOP4
11646: IFFALSE 11662
// begin Say ( Denis , DR2-Den-1 ) ;
11648: NOP4
11652: PPUSH
11653: LD_STRING DR2-Den-1
11655: PPUSH
11656: NOP4
// end else
11660: GO 11721
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11662: LD_INT 22
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 21
11674: PUSH
11675: LD_INT 1
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 4
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: PPUSH
11697: NOP4
11701: PUSH
11702: NOP4
11706: PUSH
11707: EMPTY
11708: LIST
11709: DIFF
11710: PPUSH
11711: LD_STRING DR2-Sci1-1
11713: PPUSH
11714: LD_STRING DR2-FSci1-1
11716: PPUSH
11717: NOP4
// end ; Say ( JMM , DR2-JMM-1 ) ;
11721: NOP4
11725: PPUSH
11726: LD_STRING DR2-JMM-1
11728: PPUSH
11729: NOP4
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11733: LD_INT 22
11735: PUSH
11736: LD_INT 1
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 21
11745: PUSH
11746: LD_INT 1
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: LD_INT 25
11758: PUSH
11759: LD_INT 1
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 25
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 25
11778: PUSH
11779: LD_INT 3
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 25
11788: PUSH
11789: LD_INT 4
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: PPUSH
11808: NOP4
11812: PUSH
11813: NOP4
11817: PUSH
11818: NOP4
11822: PUSH
11823: NOP4
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: DIFF
11833: PPUSH
11834: LD_STRING DR2-Sol1-1
11836: PPUSH
11837: LD_STRING DR2-Sol1-11
11839: PPUSH
11840: NOP4
// Say ( JMM , DR2-JMM-2 ) ;
11844: NOP4
11848: PPUSH
11849: LD_STRING DR2-JMM-2
11851: PPUSH
11852: NOP4
// DialogueOff ;
11856: NOP4
// end ;
11860: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11861: LD_INT 22
11863: PUSH
11864: LD_INT 1
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 36
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PPUSH
11885: NOP4
11889: PUSH
11890: LD_INT 0
11892: EQUAL
11893: PUSH
11894: LD_INT 22
11896: PUSH
11897: LD_INT 1
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 21
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 33
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: LIST
11928: PPUSH
11929: NOP4
11933: PUSH
11934: LD_INT 0
11936: GREATER
11937: AND
11938: PUSH
11939: NOP4
11943: PUSH
11944: LD_INT 0
11946: EQUAL
11947: AND
11948: IFFALSE 12020
11950: GO 11952
11952: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11953: LD_INT 22
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 25
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: LIST
11987: PPUSH
11988: NOP4
11992: PUSH
11993: NOP4
11997: PUSH
11998: EMPTY
11999: LIST
12000: DIFF
12001: PPUSH
12002: LD_STRING D3a-Mech1-1
12004: PPUSH
12005: LD_STRING D3a-Mech1-1
12007: PPUSH
12008: NOP4
// firstTower = 2 ;
12012: NOP4
12016: PUSH
12017: LD_INT 2
12019: ST_TO_ADDR
// end ;
12020: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12021: LD_INT 22
12023: PUSH
12024: LD_INT 3
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 3
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: NOP4
12049: PUSH
12050: LD_INT 0
12052: EQUAL
12053: IFFALSE 12168
12055: GO 12057
12057: DISABLE
12058: LD_INT 0
12060: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12061: NOP4
12065: PUSH
12066: LD_INT 22
12068: PUSH
12069: LD_INT 1
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 21
12078: PUSH
12079: LD_INT 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: LD_INT 25
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 25
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 25
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 25
12121: PUSH
12122: LD_INT 4
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PPUSH
12141: NOP4
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12166
// AddExperience ( i , 1 , 10000 ) ;
12149: NOP4
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: LD_INT 10000
12159: PPUSH
12160: NOP4
12164: GO 12146
12166: POP
12167: POP
// end ;
12168: PPOPN 1
12170: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12171: LD_INT 22
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 30
12183: PUSH
12184: LD_INT 36
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PPUSH
12195: NOP4
12199: PUSH
12200: LD_INT 0
12202: GREATER
12203: PUSH
12204: LD_INT 22
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 21
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 33
12226: PUSH
12227: LD_INT 2
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: PPUSH
12239: NOP4
12243: PUSH
12244: LD_INT 0
12246: GREATER
12247: AND
12248: PUSH
12249: NOP4
12253: AND
12254: IFFALSE 12828
12256: GO 12258
12258: DISABLE
12259: LD_INT 0
12261: PPUSH
12262: PPUSH
12263: PPUSH
12264: PPUSH
12265: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12266: NOP4
12270: PUSH
12271: LD_INT 22
12273: PUSH
12274: LD_INT 1
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 30
12283: PUSH
12284: LD_INT 36
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: NOP4
12299: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12300: NOP4
12304: PUSH
12305: LD_INT 22
12307: PUSH
12308: LD_INT 1
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 2
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 33
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: PPUSH
12340: NOP4
12344: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12345: NOP4
12349: PUSH
12350: EMPTY
12351: ST_TO_ADDR
// for i in tmpControlTowers do
12352: NOP4
12356: PUSH
12357: NOP4
12361: PUSH
12362: FOR_IN
12363: IFFALSE 12826
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12365: NOP4
12369: PPUSH
12370: NOP4
12374: PUSH
12375: NOP4
12379: EQUAL
12380: PUSH
12381: NOP4
12385: PPUSH
12386: NOP4
12390: PUSH
12391: LD_INT 3
12393: EQUAL
12394: AND
12395: IFFALSE 12525
// begin InGameOn ;
12397: NOP4
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12401: NOP4
12405: PUSH
12406: LD_INT 1
12408: ARRAY
12409: PPUSH
12410: NOP4
// Say ( JMM , D4a-JMM-1 ) ;
12414: NOP4
12418: PPUSH
12419: LD_STRING D4a-JMM-1
12421: PPUSH
12422: NOP4
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12426: NOP4
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: PPUSH
12435: NOP4
12439: PPUSH
12440: NOP4
// wait ( 0 0$1 ) ;
12444: LD_INT 35
12446: PPUSH
12447: NOP4
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12451: NOP4
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: PPUSH
12460: NOP4
12464: PUSH
12465: LD_INT 1
12467: ARRAY
12468: PPUSH
12469: NOP4
12473: PUSH
12474: LD_INT 3
12476: PLUS
12477: PPUSH
12478: NOP4
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PPUSH
12487: NOP4
12491: PUSH
12492: LD_INT 2
12494: MINUS
12495: PPUSH
12496: NOP4
// wait ( 0 0$2 ) ;
12500: LD_INT 70
12502: PPUSH
12503: NOP4
// Say ( JMM , D4b-JMM-1 ) ;
12507: NOP4
12511: PPUSH
12512: LD_STRING D4b-JMM-1
12514: PPUSH
12515: NOP4
// InGameOff ;
12519: NOP4
// end else
12523: GO 12824
// begin InGameOn ;
12525: NOP4
// for j in UnitsInside ( i ) do
12529: NOP4
12533: PUSH
12534: NOP4
12538: PPUSH
12539: NOP4
12543: PUSH
12544: FOR_IN
12545: IFFALSE 12580
// if GetClass ( j ) = 3 then
12547: NOP4
12551: PPUSH
12552: NOP4
12556: PUSH
12557: LD_INT 3
12559: EQUAL
12560: IFFALSE 12578
// tmpMechanicInside = tmpMechanicInside ^ j ;
12562: NOP4
12566: PUSH
12567: NOP4
12571: PUSH
12572: NOP4
12576: ADD
12577: ST_TO_ADDR
12578: GO 12544
12580: POP
12581: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12582: NOP4
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: NOP4
12595: PUSH
12596: LD_INT 1
12598: EQUAL
12599: IFFALSE 12617
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12601: NOP4
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: LD_STRING D4a-Mech1-1
12612: PPUSH
12613: NOP4
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12617: NOP4
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: NOP4
12630: PUSH
12631: LD_INT 2
12633: EQUAL
12634: IFFALSE 12652
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12636: NOP4
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: LD_STRING D4a-FMech1-1
12647: PPUSH
12648: NOP4
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12652: NOP4
12656: PUSH
12657: LD_INT 1
12659: ARRAY
12660: PPUSH
12661: NOP4
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12665: NOP4
12669: PUSH
12670: LD_INT 1
12672: ARRAY
12673: PPUSH
12674: NOP4
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PPUSH
12683: NOP4
// wait ( 0 0$1 ) ;
12687: LD_INT 35
12689: PPUSH
12690: NOP4
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12694: NOP4
12698: PUSH
12699: LD_INT 1
12701: ARRAY
12702: PPUSH
12703: NOP4
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: NOP4
12716: PUSH
12717: LD_INT 3
12719: PLUS
12720: PPUSH
12721: NOP4
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: NOP4
12734: PUSH
12735: LD_INT 2
12737: MINUS
12738: PPUSH
12739: NOP4
// wait ( 0 0$2 ) ;
12743: LD_INT 70
12745: PPUSH
12746: NOP4
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12750: NOP4
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: PPUSH
12759: NOP4
12763: PUSH
12764: LD_INT 1
12766: EQUAL
12767: IFFALSE 12785
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12769: NOP4
12773: PUSH
12774: LD_INT 1
12776: ARRAY
12777: PPUSH
12778: LD_STRING D4b-Mech1-1
12780: PPUSH
12781: NOP4
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12785: NOP4
12789: PUSH
12790: LD_INT 1
12792: ARRAY
12793: PPUSH
12794: NOP4
12798: PUSH
12799: LD_INT 2
12801: EQUAL
12802: IFFALSE 12820
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12804: NOP4
12808: PUSH
12809: LD_INT 1
12811: ARRAY
12812: PPUSH
12813: LD_STRING D4b-FMech1-1
12815: PPUSH
12816: NOP4
// InGameOff ;
12820: NOP4
// end ; end ;
12824: GO 12362
12826: POP
12827: POP
// end ;
12828: PPOPN 5
12830: END
// function CheckMehInside ; var i , j ; begin
12831: LD_INT 0
12833: PPUSH
12834: PPUSH
12835: PPUSH
// result = false ;
12836: NOP4
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12844: NOP4
12848: PUSH
12849: LD_INT 22
12851: PUSH
12852: LD_INT 1
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 30
12861: PUSH
12862: LD_INT 36
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PPUSH
12873: NOP4
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12930
// begin for j in UnitsInside ( i ) do
12881: NOP4
12885: PUSH
12886: NOP4
12890: PPUSH
12891: NOP4
12895: PUSH
12896: FOR_IN
12897: IFFALSE 12926
// begin if GetClass ( j ) = 3 then
12899: NOP4
12903: PPUSH
12904: NOP4
12908: PUSH
12909: LD_INT 3
12911: EQUAL
12912: IFFALSE 12924
// begin result = true ;
12914: NOP4
12918: PUSH
12919: LD_INT 1
12921: ST_TO_ADDR
// break ;
12922: GO 12926
// end ; end ;
12924: GO 12896
12926: POP
12927: POP
// end ;
12928: GO 12878
12930: POP
12931: POP
// end ;
12932: LD_VAR 0 1
12936: RET
// every 25 25$0 do
12937: GO 12939
12939: DISABLE
// begin PrepareKurt ;
12940: NOP4
// end ;
12944: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12945: NOP4
12949: PPUSH
12950: LD_INT 9
12952: PPUSH
12953: NOP4
12957: PUSH
12958: NOP4
12962: PUSH
12963: LD_INT 1
12965: EQUAL
12966: AND
12967: IFFALSE 13041
12969: GO 12971
12971: DISABLE
// begin RemoveUnit ( Kurt ) ;
12972: NOP4
12976: PPUSH
12977: NOP4
// SaveCharacters ( Kurt , Kurt ) ;
12981: NOP4
12985: PPUSH
12986: LD_STRING Kurt
12988: PPUSH
12989: NOP4
// if GetAttitude ( 1 , 2 ) = att_neutral then
12993: LD_INT 1
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: NOP4
13003: PUSH
13004: LD_INT 0
13006: EQUAL
13007: IFFALSE 13017
// KurtStatus = 1 ;
13009: NOP4
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13017: LD_INT 1
13019: PPUSH
13020: LD_INT 2
13022: PPUSH
13023: NOP4
13027: PUSH
13028: LD_INT 2
13030: EQUAL
13031: IFFALSE 13041
// KurtStatus = 2 ;
13033: NOP4
13037: PUSH
13038: LD_INT 2
13040: ST_TO_ADDR
// end ;
13041: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13042: LD_INT 1
13044: PPUSH
13045: LD_INT 2
13047: PPUSH
13048: NOP4
13052: PUSH
13053: LD_INT 2
13055: EQUAL
13056: PUSH
13057: NOP4
13061: PPUSH
13062: NOP4
13066: AND
13067: IFFALSE 13092
13069: GO 13071
13071: DISABLE
// begin DialogueOn ;
13072: NOP4
// Say ( Kurt , D2a-Kurt-1 ) ;
13076: NOP4
13080: PPUSH
13081: LD_STRING D2a-Kurt-1
13083: PPUSH
13084: NOP4
// DialogueOff ;
13088: NOP4
// end ;
13092: END
// every 35 35$0 do
13093: GO 13095
13095: DISABLE
// begin PrepareJoan ;
13096: NOP4
// wait ( 1 1$0 ) ;
13100: LD_INT 2100
13102: PPUSH
13103: NOP4
// if IsOK ( Lisa ) then
13107: NOP4
13111: PPUSH
13112: NOP4
13116: IFFALSE 13246
// begin DialogueOn ;
13118: NOP4
// Say ( Lisa , D7-Lisa-1 ) ;
13122: NOP4
13126: PPUSH
13127: LD_STRING D7-Lisa-1
13129: PPUSH
13130: NOP4
// Say ( JMM , D7-JMM-1 ) ;
13134: NOP4
13138: PPUSH
13139: LD_STRING D7-JMM-1
13141: PPUSH
13142: NOP4
// Say ( Lisa , D7-Lisa-2 ) ;
13146: NOP4
13150: PPUSH
13151: LD_STRING D7-Lisa-2
13153: PPUSH
13154: NOP4
// Say ( JMM , D7-JMM-2 ) ;
13158: NOP4
13162: PPUSH
13163: LD_STRING D7-JMM-2
13165: PPUSH
13166: NOP4
// Say ( Lisa , D7-Lisa-3 ) ;
13170: NOP4
13174: PPUSH
13175: LD_STRING D7-Lisa-3
13177: PPUSH
13178: NOP4
// Say ( JMM , D7-JMM-3 ) ;
13182: NOP4
13186: PPUSH
13187: LD_STRING D7-JMM-3
13189: PPUSH
13190: NOP4
// Say ( Lisa , D7-Lisa-4 ) ;
13194: NOP4
13198: PPUSH
13199: LD_STRING D7-Lisa-4
13201: PPUSH
13202: NOP4
// Say ( JMM , D7-JMM-4 ) ;
13206: NOP4
13210: PPUSH
13211: LD_STRING D7-JMM-4
13213: PPUSH
13214: NOP4
// Say ( JMM , D7-JMM-4a ) ;
13218: NOP4
13222: PPUSH
13223: LD_STRING D7-JMM-4a
13225: PPUSH
13226: NOP4
// Say ( Lisa , D7-Lisa-5 ) ;
13230: NOP4
13234: PPUSH
13235: LD_STRING D7-Lisa-5
13237: PPUSH
13238: NOP4
// DialogueOff ;
13242: NOP4
// end ; end ;
13246: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13247: LD_INT 22
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 33
13259: PUSH
13260: LD_INT 2
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: NOP4
13275: PUSH
13276: LD_INT 2
13278: GREATEREQUAL
13279: IFFALSE 13299
13281: GO 13283
13283: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13284: LD_STRING MRa
13286: PPUSH
13287: NOP4
// remoteVehiclesBuild = 1 ;
13291: NOP4
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// end ;
13299: END
// every 4 4$0 do
13300: GO 13302
13302: DISABLE
// PrepareRandoms ( 1 ) ;
13303: LD_INT 1
13305: PPUSH
13306: NOP4
13310: END
// every 10 10$0 do
13311: GO 13313
13313: DISABLE
// PrepareRandoms ( 2 ) ;
13314: LD_INT 2
13316: PPUSH
13317: NOP4
13321: END
// every 28 28$0 do
13322: GO 13324
13324: DISABLE
// PrepareRandoms ( 4 ) ;
13325: LD_INT 4
13327: PPUSH
13328: NOP4
13332: END
// every 32 32$0 do
13333: GO 13335
13335: DISABLE
// PrepareRandoms ( 5 ) ;
13336: LD_INT 5
13338: PPUSH
13339: NOP4
13343: END
// every 35 35$30 do
13344: GO 13346
13346: DISABLE
// PrepareRandoms ( 6 ) ;
13347: LD_INT 6
13349: PPUSH
13350: NOP4
13354: END
// every 37 37$20 do
13355: GO 13357
13357: DISABLE
// PrepareRandoms ( 7 ) ;
13358: LD_INT 7
13360: PPUSH
13361: NOP4
13365: END
// every 5 5$20 do
13366: GO 13368
13368: DISABLE
// begin DialogueOn ;
13369: NOP4
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13373: NOP4
13377: PPUSH
13378: LD_STRING D12a-Sci-1
13380: PPUSH
13381: NOP4
// Say ( JMM , D12a-JMM-1 ) ;
13385: NOP4
13389: PPUSH
13390: LD_STRING D12a-JMM-1
13392: PPUSH
13393: NOP4
// DialogueOff ;
13397: NOP4
// cratesStatus = 1 ;
13401: NOP4
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// end ;
13409: END
// every 13 13$0 do
13410: GO 13412
13412: DISABLE
// begin DialogueOn ;
13413: NOP4
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13417: NOP4
13421: PPUSH
13422: LD_STRING D12b-Sci-1
13424: PPUSH
13425: NOP4
// DialogueOff ;
13429: NOP4
// cratesStatus = 2 ;
13433: NOP4
13437: PUSH
13438: LD_INT 2
13440: ST_TO_ADDR
// end ;
13441: END
// every 32 32$0 do
13442: GO 13444
13444: DISABLE
// begin DialogueOn ;
13445: NOP4
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13449: NOP4
13453: PPUSH
13454: LD_STRING  D12c-Sci-1
13456: PPUSH
13457: NOP4
// DialogueOff ;
13461: NOP4
// wait ( 3 3$0 ) ;
13465: LD_INT 6300
13467: PPUSH
13468: NOP4
// DialogueOn ;
13472: NOP4
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13476: NOP4
13480: PPUSH
13481: LD_STRING  D12d-Sci-1
13483: PPUSH
13484: NOP4
// DialogueOff ;
13488: NOP4
// cratesStatus = 1 ;
13492: NOP4
13496: PUSH
13497: LD_INT 1
13499: ST_TO_ADDR
// end ;
13500: END
// every 42 42$0 do
13501: GO 13503
13503: DISABLE
// begin DialogueOn ;
13504: NOP4
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13508: NOP4
13512: PPUSH
13513: LD_STRING D12e-Sci-1
13515: PPUSH
13516: NOP4
// Say ( JMM , D12e-JMM-1 ) ;
13520: NOP4
13524: PPUSH
13525: LD_STRING D12e-JMM-1
13527: PPUSH
13528: NOP4
// DialogueOff ;
13532: NOP4
// cratesStatus = 2 ;
13536: NOP4
13540: PUSH
13541: LD_INT 2
13543: ST_TO_ADDR
// end ;
13544: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13545: LD_INT 22
13547: PUSH
13548: LD_INT 6
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 21
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 34
13567: PUSH
13568: LD_INT 51
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: PPUSH
13580: NOP4
13584: PUSH
13585: LD_INT 0
13587: GREATER
13588: IFFALSE 13671
13590: GO 13592
13592: DISABLE
13593: LD_INT 0
13595: PPUSH
// begin enable ;
13596: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13597: NOP4
13601: PUSH
13602: LD_INT 22
13604: PUSH
13605: LD_INT 6
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 1
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PPUSH
13644: NOP4
13648: PUSH
13649: FOR_IN
13650: IFFALSE 13669
// ComAgressiveMove ( i , 138 , 168 ) ;
13652: NOP4
13656: PPUSH
13657: LD_INT 138
13659: PPUSH
13660: LD_INT 168
13662: PPUSH
13663: NOP4
13667: GO 13649
13669: POP
13670: POP
// end ;
13671: PPOPN 1
13673: END
// every 0 0$1 do var i ;
13674: GO 13676
13676: DISABLE
13677: LD_INT 0
13679: PPUSH
// begin enable ;
13680: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13681: NOP4
13685: PUSH
13686: LD_INT 5
13688: PPUSH
13689: LD_INT 2
13691: PUSH
13692: LD_INT 22
13694: PUSH
13695: LD_INT 3
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 22
13704: PUSH
13705: LD_INT 6
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: PPUSH
13720: NOP4
13724: PUSH
13725: FOR_IN
13726: IFFALSE 13790
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13728: LD_INT 5
13730: PPUSH
13731: LD_INT 22
13733: PUSH
13734: LD_INT 6
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 34
13743: PUSH
13744: LD_INT 51
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: NOP4
13759: PUSH
13760: LD_INT 0
13762: GREATER
13763: IFFALSE 13779
// sendedConvoys = sendedConvoys + 1 ;
13765: NOP4
13769: PUSH
13770: NOP4
13774: PUSH
13775: LD_INT 1
13777: PLUS
13778: ST_TO_ADDR
// RemoveUnit ( i ) ;
13779: NOP4
13783: PPUSH
13784: NOP4
// end ;
13788: GO 13725
13790: POP
13791: POP
// end ; end_of_file
13792: PPOPN 1
13794: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13795: NOP4
13799: PUSH
13800: LD_INT 1
13802: EQUAL
13803: PUSH
13804: NOP4
13808: PUSH
13809: LD_INT 3
13811: EQUAL
13812: AND
13813: IFFALSE 13823
// contactWithRussian = 1 ;
13815: NOP4
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// end ;
13823: PPOPN 2
13825: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13826: NOP4
13830: PPUSH
13831: NOP4
13835: PUSH
13836: LD_INT 36
13838: EQUAL
13839: PUSH
13840: NOP4
13844: PPUSH
13845: NOP4
13849: PUSH
13850: LD_INT 1
13852: EQUAL
13853: AND
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 33
13877: PUSH
13878: LD_INT 2
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: PPUSH
13890: NOP4
13894: PUSH
13895: LD_INT 0
13897: EQUAL
13898: AND
13899: PUSH
13900: NOP4
13904: PUSH
13905: LD_INT 0
13907: EQUAL
13908: AND
13909: IFFALSE 13978
// begin firstTower = 1 ;
13911: NOP4
13915: PUSH
13916: LD_INT 1
13918: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13919: LD_INT 22
13921: PUSH
13922: LD_INT 1
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 21
13931: PUSH
13932: LD_INT 1
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 25
13941: PUSH
13942: LD_INT 3
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: PPUSH
13954: NOP4
13958: PUSH
13959: NOP4
13963: PUSH
13964: EMPTY
13965: LIST
13966: DIFF
13967: PPUSH
13968: LD_STRING D3b-Mech1-1
13970: PPUSH
13971: LD_STRING D3b-Mech1-1
13973: PPUSH
13974: NOP4
// end ; if GetSide ( building ) = 3 then
13978: NOP4
13982: PPUSH
13983: NOP4
13987: PUSH
13988: LD_INT 3
13990: EQUAL
13991: IFFALSE 14065
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13993: NOP4
13997: PUSH
13998: NOP4
14002: PPUSH
14003: LD_INT 1
14005: PPUSH
14006: NOP4
14010: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14011: NOP4
14015: PUSH
14016: NOP4
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: NOP4
14028: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14029: NOP4
14033: PUSH
14034: NOP4
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: NOP4
14046: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14047: NOP4
14051: PUSH
14052: NOP4
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: NOP4
14064: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14065: NOP4
14069: PPUSH
14070: NOP4
14074: PUSH
14075: LD_INT 3
14077: EQUAL
14078: PUSH
14079: NOP4
14083: PPUSH
14084: NOP4
14088: PUSH
14089: LD_INT 0
14091: EQUAL
14092: PUSH
14093: NOP4
14097: PPUSH
14098: NOP4
14102: PUSH
14103: LD_INT 2
14105: EQUAL
14106: OR
14107: PUSH
14108: NOP4
14112: PPUSH
14113: NOP4
14117: PUSH
14118: LD_INT 4
14120: EQUAL
14121: OR
14122: PUSH
14123: EMPTY
14124: LIST
14125: AND
14126: IFFALSE 14137
// ComUpgrade ( building ) ;
14128: NOP4
14132: PPUSH
14133: NOP4
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14137: NOP4
14141: PPUSH
14142: NOP4
14146: PUSH
14147: LD_INT 3
14149: EQUAL
14150: PUSH
14151: NOP4
14155: PPUSH
14156: NOP4
14160: PUSH
14161: LD_INT 32
14163: EQUAL
14164: AND
14165: IFFALSE 14206
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14167: NOP4
14171: PPUSH
14172: LD_INT 42
14174: PUSH
14175: LD_INT 43
14177: PUSH
14178: LD_INT 44
14180: PUSH
14181: LD_INT 46
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_INT 4
14195: PPUSH
14196: NOP4
14200: ARRAY
14201: PPUSH
14202: NOP4
// end ; end ;
14206: PPOPN 1
14208: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14209: NOP4
14213: PPUSH
14214: NOP4
14218: PUSH
14219: LD_INT 1
14221: EQUAL
14222: PUSH
14223: NOP4
14227: PPUSH
14228: NOP4
14232: PUSH
14233: LD_INT 1
14235: EQUAL
14236: AND
14237: PUSH
14238: NOP4
14242: PPUSH
14243: NOP4
14247: PUSH
14248: LD_INT 1
14250: EQUAL
14251: PUSH
14252: NOP4
14256: PPUSH
14257: NOP4
14261: PUSH
14262: LD_INT 2
14264: EQUAL
14265: OR
14266: PUSH
14267: NOP4
14271: PPUSH
14272: NOP4
14276: PUSH
14277: LD_INT 3
14279: EQUAL
14280: OR
14281: PUSH
14282: NOP4
14286: PPUSH
14287: NOP4
14291: PUSH
14292: LD_INT 4
14294: EQUAL
14295: OR
14296: PUSH
14297: EMPTY
14298: LIST
14299: AND
14300: IFFALSE 14316
// unitLost = unitLost + 1 ;
14302: NOP4
14306: PUSH
14307: NOP4
14311: PUSH
14312: LD_INT 1
14314: PLUS
14315: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14316: NOP4
14320: PPUSH
14321: NOP4
14325: PUSH
14326: LD_INT 3
14328: EQUAL
14329: PUSH
14330: NOP4
14334: PPUSH
14335: NOP4
14339: PUSH
14340: LD_INT 3
14342: EQUAL
14343: AND
14344: IFFALSE 15036
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14346: NOP4
14350: PPUSH
14351: NOP4
14355: PUSH
14356: LD_INT 31
14358: EQUAL
14359: PUSH
14360: NOP4
14364: PPUSH
14365: NOP4
14369: PUSH
14370: LD_INT 32
14372: EQUAL
14373: OR
14374: PUSH
14375: NOP4
14379: PPUSH
14380: NOP4
14384: PUSH
14385: LD_INT 36
14387: EQUAL
14388: OR
14389: PUSH
14390: NOP4
14394: PPUSH
14395: NOP4
14399: PUSH
14400: LD_INT 0
14402: EQUAL
14403: OR
14404: PUSH
14405: NOP4
14409: PPUSH
14410: NOP4
14414: PUSH
14415: LD_INT 24
14417: EQUAL
14418: OR
14419: PUSH
14420: NOP4
14424: PPUSH
14425: NOP4
14429: PUSH
14430: LD_INT 17
14432: EQUAL
14433: OR
14434: PUSH
14435: NOP4
14439: PPUSH
14440: NOP4
14444: PUSH
14445: LD_INT 25
14447: EQUAL
14448: OR
14449: PUSH
14450: NOP4
14454: PPUSH
14455: NOP4
14459: PUSH
14460: LD_INT 19
14462: EQUAL
14463: OR
14464: PUSH
14465: NOP4
14469: PPUSH
14470: NOP4
14474: PUSH
14475: LD_INT 20
14477: EQUAL
14478: OR
14479: PUSH
14480: NOP4
14484: PPUSH
14485: NOP4
14489: PUSH
14490: LD_INT 18
14492: EQUAL
14493: OR
14494: PUSH
14495: NOP4
14499: PPUSH
14500: NOP4
14504: PUSH
14505: LD_INT 21
14507: EQUAL
14508: OR
14509: PUSH
14510: NOP4
14514: PPUSH
14515: NOP4
14519: PUSH
14520: LD_INT 23
14522: EQUAL
14523: OR
14524: PUSH
14525: NOP4
14529: PPUSH
14530: NOP4
14534: PUSH
14535: LD_INT 16
14537: EQUAL
14538: OR
14539: PUSH
14540: NOP4
14544: PPUSH
14545: NOP4
14549: PUSH
14550: LD_INT 6
14552: EQUAL
14553: OR
14554: PUSH
14555: NOP4
14559: PPUSH
14560: NOP4
14564: PUSH
14565: LD_INT 29
14567: EQUAL
14568: OR
14569: PUSH
14570: NOP4
14574: PPUSH
14575: NOP4
14579: PUSH
14580: LD_INT 26
14582: EQUAL
14583: OR
14584: PUSH
14585: NOP4
14589: PPUSH
14590: NOP4
14594: PUSH
14595: LD_INT 30
14597: EQUAL
14598: OR
14599: PUSH
14600: NOP4
14604: PPUSH
14605: NOP4
14609: PUSH
14610: LD_INT 28
14612: EQUAL
14613: OR
14614: PUSH
14615: NOP4
14619: PPUSH
14620: NOP4
14624: PUSH
14625: LD_INT 27
14627: EQUAL
14628: OR
14629: PUSH
14630: NOP4
14634: PPUSH
14635: NOP4
14639: PUSH
14640: LD_INT 33
14642: EQUAL
14643: OR
14644: PUSH
14645: NOP4
14649: PPUSH
14650: NOP4
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: OR
14659: PUSH
14660: NOP4
14664: PPUSH
14665: NOP4
14669: PUSH
14670: LD_INT 4
14672: EQUAL
14673: OR
14674: IFFALSE 14760
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14676: NOP4
14680: PUSH
14681: NOP4
14685: PUSH
14686: NOP4
14690: PPUSH
14691: NOP4
14695: ADD
14696: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14697: NOP4
14701: PUSH
14702: NOP4
14706: PUSH
14707: NOP4
14711: PPUSH
14712: NOP4
14716: ADD
14717: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14718: NOP4
14722: PUSH
14723: NOP4
14727: PUSH
14728: NOP4
14732: PPUSH
14733: NOP4
14737: ADD
14738: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14739: NOP4
14743: PUSH
14744: NOP4
14748: PUSH
14749: NOP4
14753: PPUSH
14754: NOP4
14758: ADD
14759: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14760: NOP4
14764: PPUSH
14765: NOP4
14769: PUSH
14770: LD_INT 1
14772: EQUAL
14773: IFFALSE 14852
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14775: NOP4
14779: PUSH
14780: NOP4
14784: PUSH
14785: LD_INT 0
14787: ADD
14788: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14789: NOP4
14793: PUSH
14794: NOP4
14798: PUSH
14799: NOP4
14803: PPUSH
14804: NOP4
14808: ADD
14809: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14810: NOP4
14814: PUSH
14815: NOP4
14819: PUSH
14820: NOP4
14824: PPUSH
14825: NOP4
14829: ADD
14830: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14831: NOP4
14835: PUSH
14836: NOP4
14840: PUSH
14841: NOP4
14845: PPUSH
14846: NOP4
14850: ADD
14851: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14852: NOP4
14856: PPUSH
14857: NOP4
14861: PUSH
14862: LD_INT 3
14864: EQUAL
14865: IFFALSE 14944
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14867: NOP4
14871: PUSH
14872: NOP4
14876: PUSH
14877: LD_INT 2
14879: ADD
14880: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14881: NOP4
14885: PUSH
14886: NOP4
14890: PUSH
14891: NOP4
14895: PPUSH
14896: NOP4
14900: ADD
14901: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14902: NOP4
14906: PUSH
14907: NOP4
14911: PUSH
14912: NOP4
14916: PPUSH
14917: NOP4
14921: ADD
14922: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14923: NOP4
14927: PUSH
14928: NOP4
14932: PUSH
14933: NOP4
14937: PPUSH
14938: NOP4
14942: ADD
14943: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14944: NOP4
14948: PPUSH
14949: NOP4
14953: PUSH
14954: LD_INT 5
14956: EQUAL
14957: IFFALSE 15036
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14959: NOP4
14963: PUSH
14964: NOP4
14968: PUSH
14969: LD_INT 4
14971: ADD
14972: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14973: NOP4
14977: PUSH
14978: NOP4
14982: PUSH
14983: NOP4
14987: PPUSH
14988: NOP4
14992: ADD
14993: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14994: NOP4
14998: PUSH
14999: NOP4
15003: PUSH
15004: NOP4
15008: PPUSH
15009: NOP4
15013: ADD
15014: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15015: NOP4
15019: PUSH
15020: NOP4
15024: PUSH
15025: NOP4
15029: PPUSH
15030: NOP4
15034: ADD
15035: ST_TO_ADDR
// end ; end ; end ;
15036: PPOPN 1
15038: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15044: NOP4
15048: PPUSH
15049: NOP4
15053: PUSH
15054: LD_INT 51
15056: EQUAL
15057: PUSH
15058: NOP4
15062: PPUSH
15063: NOP4
15067: PUSH
15068: LD_INT 3
15070: EQUAL
15071: AND
15072: IFFALSE 15134
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15074: NOP4
15078: PUSH
15079: LD_INT 2
15081: PPUSH
15082: NOP4
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: NOP4
15094: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15095: LD_INT 2
15097: PPUSH
15098: NOP4
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: NOP4
15110: PUSH
15111: LD_INT 100
15113: MINUS
15114: PPUSH
15115: NOP4
// AddCargo ( vehicle , 1 , 100 ) ;
15119: NOP4
15123: PPUSH
15124: LD_INT 1
15126: PPUSH
15127: LD_INT 100
15129: PPUSH
15130: NOP4
// end ; if building = rufabsupp then
15134: NOP4
15138: PUSH
15139: LD_INT 17
15141: EQUAL
15142: IFFALSE 15156
// SetSide ( vehicle , 6 ) ;
15144: NOP4
15148: PPUSH
15149: LD_INT 6
15151: PPUSH
15152: NOP4
// if GetSide ( building ) = 3 and IsOk ( building ) then
15156: NOP4
15160: PPUSH
15161: NOP4
15165: PUSH
15166: LD_INT 3
15168: EQUAL
15169: PUSH
15170: NOP4
15174: PPUSH
15175: NOP4
15179: AND
15180: IFFALSE 15250
// begin uc_side = 3 ;
15182: LD_ADDR_OWVAR 20
15186: PUSH
15187: LD_INT 3
15189: ST_TO_ADDR
// uc_nation = 3 ;
15190: LD_ADDR_OWVAR 21
15194: PUSH
15195: LD_INT 3
15197: ST_TO_ADDR
// hc_gallery :=  ;
15198: LD_ADDR_OWVAR 33
15202: PUSH
15203: LD_STRING 
15205: ST_TO_ADDR
// hc_name :=  ;
15206: LD_ADDR_OWVAR 26
15210: PUSH
15211: LD_STRING 
15213: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15214: LD_INT 0
15216: PPUSH
15217: NOP4
15221: PPUSH
15222: NOP4
15226: PPUSH
15227: NOP4
15231: PPUSH
15232: NOP4
// PlaceHumanInUnit ( CreateHuman , building ) ;
15236: NOP4
15240: PPUSH
15241: NOP4
15245: PPUSH
15246: NOP4
// end ; end ;
15250: PPOPN 5
15252: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15253: NOP4
15257: PPUSH
15258: NOP4
15262: PUSH
15263: LD_INT 3
15265: EQUAL
15266: IFFALSE 15282
// tamedApemans = tamedApemans + 1 ;
15268: NOP4
15272: PUSH
15273: NOP4
15277: PUSH
15278: LD_INT 1
15280: PLUS
15281: ST_TO_ADDR
// end ; end_of_file
15282: PPOPN 2
15284: END
// every 0 0$30 trigger cratesStatus = 1 do
15285: NOP4
15289: PUSH
15290: LD_INT 1
15292: EQUAL
15293: IFFALSE 15357
15295: GO 15297
15297: DISABLE
// begin enable ;
15298: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15299: LD_INT 350
15301: PUSH
15302: LD_INT 1050
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 1
15311: PPUSH
15312: LD_INT 2
15314: PPUSH
15315: NOP4
15319: ARRAY
15320: PPUSH
15321: NOP4
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15325: LD_INT 4
15327: PUSH
15328: LD_INT 5
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 1
15337: PPUSH
15338: LD_INT 2
15340: PPUSH
15341: NOP4
15345: ARRAY
15346: PPUSH
15347: LD_INT 7
15349: PPUSH
15350: LD_INT 1
15352: PPUSH
15353: NOP4
// end ;
15357: END
// every 1 1$0 trigger cratesStatus = 2 do
15358: NOP4
15362: PUSH
15363: LD_INT 2
15365: EQUAL
15366: IFFALSE 15430
15368: GO 15370
15370: DISABLE
// begin enable ;
15371: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15372: LD_INT 3150
15374: PUSH
15375: LD_INT 4550
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 1
15384: PPUSH
15385: LD_INT 2
15387: PPUSH
15388: NOP4
15392: ARRAY
15393: PPUSH
15394: NOP4
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15398: LD_INT 2
15400: PUSH
15401: LD_INT 5
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 1
15410: PPUSH
15411: LD_INT 2
15413: PPUSH
15414: NOP4
15418: ARRAY
15419: PPUSH
15420: LD_INT 8
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: NOP4
// end ;
15430: END
// every 0 0$30 + 0 0$10 do
15431: GO 15433
15433: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15434: LD_INT 4
15436: PUSH
15437: LD_INT 5
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: PPUSH
15447: LD_INT 2
15449: PPUSH
15450: NOP4
15454: ARRAY
15455: PPUSH
15456: LD_INT 8
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: NOP4
// Wait ( 0 0$15 ) ;
15466: LD_INT 525
15468: PPUSH
15469: NOP4
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15473: LD_INT 4
15475: PUSH
15476: LD_INT 5
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_INT 2
15488: PPUSH
15489: NOP4
15493: ARRAY
15494: PPUSH
15495: LD_INT 8
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: NOP4
// Wait ( 0 0$20 ) ;
15505: LD_INT 700
15507: PPUSH
15508: NOP4
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15512: LD_INT 4
15514: PUSH
15515: LD_INT 5
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 1
15524: PPUSH
15525: LD_INT 2
15527: PPUSH
15528: NOP4
15532: ARRAY
15533: PPUSH
15534: LD_INT 8
15536: PPUSH
15537: LD_INT 1
15539: PPUSH
15540: NOP4
// end ; end_of_file
15544: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15545: NOP4
15549: PUSH
15550: LD_INT 1
15552: EQUAL
15553: IFFALSE 15854
15555: GO 15557
15557: DISABLE
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
15562: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15563: NOP4
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: PUSH
15578: LD_INT 21
15580: PUSH
15581: LD_INT 3
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: LD_INT 30
15593: PUSH
15594: LD_INT 0
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: LIST
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: PPUSH
15621: NOP4
15625: ST_TO_ADDR
// for i in tmp do
15626: NOP4
15630: PUSH
15631: NOP4
15635: PUSH
15636: FOR_IN
15637: IFFALSE 15670
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15639: NOP4
15643: PUSH
15644: NOP4
15648: PUSH
15649: NOP4
15653: PPUSH
15654: NOP4
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: NOP4
15666: PLUS
15667: ST_TO_ADDR
15668: GO 15636
15670: POP
15671: POP
// strings = [ ] ;
15672: NOP4
15676: PUSH
15677: EMPTY
15678: ST_TO_ADDR
// if tmp = 0 then
15679: NOP4
15683: PUSH
15684: LD_INT 0
15686: EQUAL
15687: IFFALSE 15712
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15689: NOP4
15693: PUSH
15694: NOP4
15698: PUSH
15699: LD_STRING #Am06-1
15701: PUSH
15702: NOP4
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: ADD
15711: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15712: NOP4
15716: PUSH
15717: LD_INT 0
15719: GREATER
15720: PUSH
15721: NOP4
15725: PUSH
15726: NOP4
15730: GREATER
15731: AND
15732: IFFALSE 15763
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15734: NOP4
15738: PUSH
15739: NOP4
15743: PUSH
15744: LD_STRING #Am06-1
15746: PUSH
15747: NOP4
15751: PUSH
15752: NOP4
15756: MINUS
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: ADD
15762: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15763: NOP4
15767: PUSH
15768: LD_INT 0
15770: GREATER
15771: PUSH
15772: NOP4
15776: PUSH
15777: NOP4
15781: LESSEQUAL
15782: AND
15783: IFFALSE 15806
// strings = strings ^ [ #Am06-1 , 0 ] ;
15785: NOP4
15789: PUSH
15790: NOP4
15794: PUSH
15795: LD_STRING #Am06-1
15797: PUSH
15798: LD_INT 0
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: ADD
15805: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15806: NOP4
15810: PUSH
15811: NOP4
15815: PUSH
15816: LD_INT 35
15818: MINUS
15819: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15820: NOP4
15824: PUSH
15825: NOP4
15829: PUSH
15830: LD_STRING #Am06-2
15832: PUSH
15833: NOP4
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: ADD
15842: ST_TO_ADDR
// display_strings = strings ;
15843: LD_ADDR_OWVAR 47
15847: PUSH
15848: NOP4
15852: ST_TO_ADDR
// enable ;
15853: ENABLE
// end ; end_of_file
15854: PPOPN 3
15856: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
15857: LD_INT 0
15859: PPUSH
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
15864: PPUSH
15865: PPUSH
// j = 0 ;
15866: NOP4
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15874: LD_INT 35
15876: PPUSH
15877: NOP4
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
15881: NOP4
15885: PUSH
15886: LD_INT 22
15888: PUSH
15889: LD_INT 1
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 21
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 2
15908: PUSH
15909: LD_INT 25
15911: PUSH
15912: LD_INT 1
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 25
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 25
15931: PUSH
15932: LD_INT 3
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 25
15941: PUSH
15942: LD_INT 4
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: LIST
15960: PPUSH
15961: NOP4
15965: PUSH
15966: FOR_IN
15967: IFFALSE 16073
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
15969: LD_INT 22
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: LD_INT 21
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 21
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 59
16014: PUSH
16015: EMPTY
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 91
16027: PUSH
16028: NOP4
16032: PUSH
16033: LD_INT 25
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: PPUSH
16046: NOP4
16050: NOT
16051: IFFALSE 16071
// begin tmp = i ;
16053: NOP4
16057: PUSH
16058: NOP4
16062: ST_TO_ADDR
// j = 1 ;
16063: NOP4
16067: PUSH
16068: LD_INT 1
16070: ST_TO_ADDR
// end ; end ;
16071: GO 15966
16073: POP
16074: POP
// until j = 1 ;
16075: NOP4
16079: PUSH
16080: LD_INT 1
16082: EQUAL
16083: IFFALSE 15874
// blockSpawn = 1 ;
16085: NOP4
16089: PUSH
16090: LD_INT 1
16092: ST_TO_ADDR
// uc_side = 2 ;
16093: LD_ADDR_OWVAR 20
16097: PUSH
16098: LD_INT 2
16100: ST_TO_ADDR
// uc_nation = 2 ;
16101: LD_ADDR_OWVAR 21
16105: PUSH
16106: LD_INT 2
16108: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
16109: NOP4
16113: PUSH
16114: LD_STRING Kurt
16116: PPUSH
16117: LD_INT 0
16119: PPUSH
16120: NOP4
16124: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16125: NOP4
16129: PPUSH
16130: NOP4
16134: PPUSH
16135: NOP4
16139: PPUSH
16140: NOP4
16144: PPUSH
16145: NOP4
16149: PPUSH
16150: LD_INT 5
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: NOP4
// InGameOn ;
16160: NOP4
// CenterNowOnUnits ( Kurt ) ;
16164: NOP4
16168: PPUSH
16169: NOP4
// wait ( 0 0$2 ) ;
16173: LD_INT 70
16175: PPUSH
16176: NOP4
// ComExitVehicle ( tmp ) ;
16180: NOP4
16184: PPUSH
16185: NOP4
// ComExitBuilding ( tmp ) ;
16189: NOP4
16193: PPUSH
16194: NOP4
// wait ( 0 0$1 ) ;
16198: LD_INT 35
16200: PPUSH
16201: NOP4
// ComTurnUnit ( Kurt , tmp ) ;
16205: NOP4
16209: PPUSH
16210: NOP4
16214: PPUSH
16215: NOP4
// ComTurnUnit ( tmp , Kurt ) ;
16219: NOP4
16223: PPUSH
16224: NOP4
16228: PPUSH
16229: NOP4
// DialogueOn ;
16233: NOP4
// Say ( Kurt , D2-Kurt-1 ) ;
16237: NOP4
16241: PPUSH
16242: LD_STRING D2-Kurt-1
16244: PPUSH
16245: NOP4
// if tmp = JMM then
16249: NOP4
16253: PUSH
16254: NOP4
16258: EQUAL
16259: IFFALSE 16351
// begin Say ( JMM , D2-JMM-1 ) ;
16261: NOP4
16265: PPUSH
16266: LD_STRING D2-JMM-1
16268: PPUSH
16269: NOP4
// Say ( Kurt , D2-Kurt-2 ) ;
16273: NOP4
16277: PPUSH
16278: LD_STRING D2-Kurt-2
16280: PPUSH
16281: NOP4
// Say ( JMM , D2-JMM-2 ) ;
16285: NOP4
16289: PPUSH
16290: LD_STRING D2-JMM-2
16292: PPUSH
16293: NOP4
// Say ( Kurt , D2-Kurt-3 ) ;
16297: NOP4
16301: PPUSH
16302: LD_STRING D2-Kurt-3
16304: PPUSH
16305: NOP4
// Say ( JMM , D2-JMM-3 ) ;
16309: NOP4
16313: PPUSH
16314: LD_STRING D2-JMM-3
16316: PPUSH
16317: NOP4
// Say ( Kurt , D2-Kurt-4 ) ;
16321: NOP4
16325: PPUSH
16326: LD_STRING D2-Kurt-4
16328: PPUSH
16329: NOP4
// Say ( JMM , D2-JMM-4 ) ;
16333: NOP4
16337: PPUSH
16338: LD_STRING D2-JMM-4
16340: PPUSH
16341: NOP4
// DialogueOff ;
16345: NOP4
// end else
16349: GO 16661
// begin if GetSex ( tmp ) = 1 then
16351: NOP4
16355: PPUSH
16356: NOP4
16360: PUSH
16361: LD_INT 1
16363: EQUAL
16364: IFFALSE 16378
// Say ( tmp , D2-Sol1-1 ) ;
16366: NOP4
16370: PPUSH
16371: LD_STRING D2-Sol1-1
16373: PPUSH
16374: NOP4
// if GetSex ( tmp ) = 2 then
16378: NOP4
16382: PPUSH
16383: NOP4
16387: PUSH
16388: LD_INT 2
16390: EQUAL
16391: IFFALSE 16405
// Say ( tmp , D2-FSol1-1 ) ;
16393: NOP4
16397: PPUSH
16398: LD_STRING D2-FSol1-1
16400: PPUSH
16401: NOP4
// Say ( Kurt , D2-Kurt-2 ) ;
16405: NOP4
16409: PPUSH
16410: LD_STRING D2-Kurt-2
16412: PPUSH
16413: NOP4
// if GetSex ( tmp ) = 1 then
16417: NOP4
16421: PPUSH
16422: NOP4
16426: PUSH
16427: LD_INT 1
16429: EQUAL
16430: IFFALSE 16444
// Say ( tmp , D2-Sol1-2 ) ;
16432: NOP4
16436: PPUSH
16437: LD_STRING D2-Sol1-2
16439: PPUSH
16440: NOP4
// if GetSex ( tmp ) = 2 then
16444: NOP4
16448: PPUSH
16449: NOP4
16453: PUSH
16454: LD_INT 2
16456: EQUAL
16457: IFFALSE 16471
// Say ( tmp , D2-FSol1-2 ) ;
16459: NOP4
16463: PPUSH
16464: LD_STRING D2-FSol1-2
16466: PPUSH
16467: NOP4
// Say ( Kurt , D2-Kurt-3 ) ;
16471: NOP4
16475: PPUSH
16476: LD_STRING D2-Kurt-3
16478: PPUSH
16479: NOP4
// if GetSex ( tmp ) = 1 then
16483: NOP4
16487: PPUSH
16488: NOP4
16492: PUSH
16493: LD_INT 1
16495: EQUAL
16496: IFFALSE 16510
// Say ( tmp , D2-Sol1-3 ) ;
16498: NOP4
16502: PPUSH
16503: LD_STRING D2-Sol1-3
16505: PPUSH
16506: NOP4
// if GetSex ( tmp ) = 2 then
16510: NOP4
16514: PPUSH
16515: NOP4
16519: PUSH
16520: LD_INT 2
16522: EQUAL
16523: IFFALSE 16537
// Say ( tmp , D2-FSol1-3 ) ;
16525: NOP4
16529: PPUSH
16530: LD_STRING D2-FSol1-3
16532: PPUSH
16533: NOP4
// Say ( Kurt , D2-Kurt-4 ) ;
16537: NOP4
16541: PPUSH
16542: LD_STRING D2-Kurt-4
16544: PPUSH
16545: NOP4
// if GetSex ( tmp ) = 1 then
16549: NOP4
16553: PPUSH
16554: NOP4
16558: PUSH
16559: LD_INT 1
16561: EQUAL
16562: IFFALSE 16576
// Say ( tmp , D2-Sol1-4 ) ;
16564: NOP4
16568: PPUSH
16569: LD_STRING D2-Sol1-4
16571: PPUSH
16572: NOP4
// if GetSex ( tmp ) = 2 then
16576: NOP4
16580: PPUSH
16581: NOP4
16585: PUSH
16586: LD_INT 2
16588: EQUAL
16589: IFFALSE 16603
// Say ( tmp , D2-FSol1-4 ) ;
16591: NOP4
16595: PPUSH
16596: LD_STRING D2-FSol1-4
16598: PPUSH
16599: NOP4
// if GetSex ( tmp ) = 1 then
16603: NOP4
16607: PPUSH
16608: NOP4
16612: PUSH
16613: LD_INT 1
16615: EQUAL
16616: IFFALSE 16630
// Say ( tmp , D2-Sol1-5 ) ;
16618: NOP4
16622: PPUSH
16623: LD_STRING D2-Sol1-5
16625: PPUSH
16626: NOP4
// if GetSex ( tmp ) = 2 then
16630: NOP4
16634: PPUSH
16635: NOP4
16639: PUSH
16640: LD_INT 2
16642: EQUAL
16643: IFFALSE 16657
// Say ( tmp , D2-FSol1-5 ) ;
16645: NOP4
16649: PPUSH
16650: LD_STRING D2-FSol1-5
16652: PPUSH
16653: NOP4
// DialogueOff ;
16657: NOP4
// end ; dec = ShowQuery1 ;
16661: NOP4
16665: PUSH
16666: NOP4
16670: ST_TO_ADDR
// if dec = 1 then
16671: NOP4
16675: PUSH
16676: LD_INT 1
16678: EQUAL
16679: IFFALSE 16721
// begin DialogueOn ;
16681: NOP4
// Say ( Kurt , D2a-Kurt-1 ) ;
16685: NOP4
16689: PPUSH
16690: LD_STRING D2a-Kurt-1
16692: PPUSH
16693: NOP4
// DialogueOff ;
16697: NOP4
// InGameOff ;
16701: NOP4
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16705: LD_INT 1
16707: PPUSH
16708: LD_INT 2
16710: PPUSH
16711: LD_INT 2
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: NOP4
// end ; if dec = 2 then
16721: NOP4
16725: PUSH
16726: LD_INT 2
16728: EQUAL
16729: IFFALSE 17217
// begin DialogueOn ;
16731: NOP4
// if tmp = JMM then
16735: NOP4
16739: PUSH
16740: NOP4
16744: EQUAL
16745: IFFALSE 16801
// begin Say ( JMM , D2b-JMM-1 ) ;
16747: NOP4
16751: PPUSH
16752: LD_STRING D2b-JMM-1
16754: PPUSH
16755: NOP4
// Say ( Kurt , D2b-Kurt-1 ) ;
16759: NOP4
16763: PPUSH
16764: LD_STRING D2b-Kurt-1
16766: PPUSH
16767: NOP4
// Say ( JMM , D2b-JMM-2 ) ;
16771: NOP4
16775: PPUSH
16776: LD_STRING D2b-JMM-2
16778: PPUSH
16779: NOP4
// Say ( Kurt , D2b-Kurt-2 ) ;
16783: NOP4
16787: PPUSH
16788: LD_STRING D2b-Kurt-2
16790: PPUSH
16791: NOP4
// DialogueOff ;
16795: NOP4
// end else
16799: GO 16991
// begin if GetSex ( tmp ) = 1 then
16801: NOP4
16805: PPUSH
16806: NOP4
16810: PUSH
16811: LD_INT 1
16813: EQUAL
16814: IFFALSE 16828
// Say ( tmp , D2b-Sol1-1 ) ;
16816: NOP4
16820: PPUSH
16821: LD_STRING D2b-Sol1-1
16823: PPUSH
16824: NOP4
// if GetSex ( tmp ) = 2 then
16828: NOP4
16832: PPUSH
16833: NOP4
16837: PUSH
16838: LD_INT 2
16840: EQUAL
16841: IFFALSE 16855
// Say ( tmp , D2b-FSol1-1 ) ;
16843: NOP4
16847: PPUSH
16848: LD_STRING D2b-FSol1-1
16850: PPUSH
16851: NOP4
// Say ( Kurt , D2b-Kurt-1 ) ;
16855: NOP4
16859: PPUSH
16860: LD_STRING D2b-Kurt-1
16862: PPUSH
16863: NOP4
// if GetSex ( tmp ) = 1 then
16867: NOP4
16871: PPUSH
16872: NOP4
16876: PUSH
16877: LD_INT 1
16879: EQUAL
16880: IFFALSE 16894
// Say ( tmp , D2b-Sol1-2 ) ;
16882: NOP4
16886: PPUSH
16887: LD_STRING D2b-Sol1-2
16889: PPUSH
16890: NOP4
// if GetSex ( tmp ) = 2 then
16894: NOP4
16898: PPUSH
16899: NOP4
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: IFFALSE 16921
// Say ( tmp , D2b-FSol1-2 ) ;
16909: NOP4
16913: PPUSH
16914: LD_STRING D2b-FSol1-2
16916: PPUSH
16917: NOP4
// Say ( Kurt , D2b-Kurt-2 ) ;
16921: NOP4
16925: PPUSH
16926: LD_STRING D2b-Kurt-2
16928: PPUSH
16929: NOP4
// if GetSex ( tmp ) = 1 then
16933: NOP4
16937: PPUSH
16938: NOP4
16942: PUSH
16943: LD_INT 1
16945: EQUAL
16946: IFFALSE 16960
// Say ( tmp , D2c-Sol1-2 ) ;
16948: NOP4
16952: PPUSH
16953: LD_STRING D2c-Sol1-2
16955: PPUSH
16956: NOP4
// if GetSex ( tmp ) = 2 then
16960: NOP4
16964: PPUSH
16965: NOP4
16969: PUSH
16970: LD_INT 2
16972: EQUAL
16973: IFFALSE 16987
// Say ( tmp , D2c-FSol1-2 ) ;
16975: NOP4
16979: PPUSH
16980: LD_STRING D2c-FSol1-2
16982: PPUSH
16983: NOP4
// DialogueOff ;
16987: NOP4
// end ; dec2 = ShowQuery2 ;
16991: NOP4
16995: PUSH
16996: NOP4
17000: ST_TO_ADDR
// if dec2 = 1 then
17001: NOP4
17005: PUSH
17006: LD_INT 1
17008: EQUAL
17009: IFFALSE 17047
// begin Say ( Kurt , D2a-Kurt-1 ) ;
17011: NOP4
17015: PPUSH
17016: LD_STRING D2a-Kurt-1
17018: PPUSH
17019: NOP4
// DialogueOff ;
17023: NOP4
// InGameOff ;
17027: NOP4
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17031: LD_INT 1
17033: PPUSH
17034: LD_INT 2
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: NOP4
// end ; if dec2 = 2 then
17047: NOP4
17051: PUSH
17052: LD_INT 2
17054: EQUAL
17055: IFFALSE 17217
// begin if tmp = JMM then
17057: NOP4
17061: PUSH
17062: NOP4
17066: EQUAL
17067: IFFALSE 17123
// begin Say ( JMM , D2c-JMM-1 ) ;
17069: NOP4
17073: PPUSH
17074: LD_STRING D2c-JMM-1
17076: PPUSH
17077: NOP4
// Say ( Kurt , D2c-Kurt-1 ) ;
17081: NOP4
17085: PPUSH
17086: LD_STRING D2c-Kurt-1
17088: PPUSH
17089: NOP4
// DialogueOff ;
17093: NOP4
// InGameOff ;
17097: NOP4
// ComMoveToArea ( Kurt , KurtEscape ) ;
17101: NOP4
17105: PPUSH
17106: LD_INT 9
17108: PPUSH
17109: NOP4
// readyToEscape = 1 ;
17113: NOP4
17117: PUSH
17118: LD_INT 1
17120: ST_TO_ADDR
// end else
17121: GO 17217
// begin if GetSex ( tmp ) = 1 then
17123: NOP4
17127: PPUSH
17128: NOP4
17132: PUSH
17133: LD_INT 1
17135: EQUAL
17136: IFFALSE 17150
// Say ( tmp , D2c-Sol1-1 ) ;
17138: NOP4
17142: PPUSH
17143: LD_STRING D2c-Sol1-1
17145: PPUSH
17146: NOP4
// if GetSex ( tmp ) = 2 then
17150: NOP4
17154: PPUSH
17155: NOP4
17159: PUSH
17160: LD_INT 2
17162: EQUAL
17163: IFFALSE 17177
// Say ( tmp , D2c-FSol1-1 ) ;
17165: NOP4
17169: PPUSH
17170: LD_STRING D2c-FSol1-1
17172: PPUSH
17173: NOP4
// Say ( Kurt , D2c-Kurt-1 ) ;
17177: NOP4
17181: PPUSH
17182: LD_STRING D2c-Kurt-1
17184: PPUSH
17185: NOP4
// DialogueOff ;
17189: NOP4
// InGameOff ;
17193: NOP4
// ComMoveToArea ( Kurt , KurtEscape ) ;
17197: NOP4
17201: PPUSH
17202: LD_INT 9
17204: PPUSH
17205: NOP4
// readyToEscape = 1 ;
17209: NOP4
17213: PUSH
17214: LD_INT 1
17216: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17217: NOP4
17221: PUSH
17222: LD_INT 3
17224: EQUAL
17225: IFFALSE 17391
// begin DialogueOn ;
17227: NOP4
// if tmp = JMM then
17231: NOP4
17235: PUSH
17236: NOP4
17240: EQUAL
17241: IFFALSE 17297
// begin Say ( JMM , D2c-JMM-1 ) ;
17243: NOP4
17247: PPUSH
17248: LD_STRING D2c-JMM-1
17250: PPUSH
17251: NOP4
// Say ( Kurt , D2c-Kurt-1 ) ;
17255: NOP4
17259: PPUSH
17260: LD_STRING D2c-Kurt-1
17262: PPUSH
17263: NOP4
// DialogueOff ;
17267: NOP4
// InGameOff ;
17271: NOP4
// ComMoveToArea ( Kurt , KurtEscape ) ;
17275: NOP4
17279: PPUSH
17280: LD_INT 9
17282: PPUSH
17283: NOP4
// readyToEscape = 1 ;
17287: NOP4
17291: PUSH
17292: LD_INT 1
17294: ST_TO_ADDR
// end else
17295: GO 17391
// begin if GetSex ( tmp ) = 1 then
17297: NOP4
17301: PPUSH
17302: NOP4
17306: PUSH
17307: LD_INT 1
17309: EQUAL
17310: IFFALSE 17324
// Say ( tmp , D2c-Sol1-1 ) ;
17312: NOP4
17316: PPUSH
17317: LD_STRING D2c-Sol1-1
17319: PPUSH
17320: NOP4
// if GetSex ( tmp ) = 2 then
17324: NOP4
17328: PPUSH
17329: NOP4
17333: PUSH
17334: LD_INT 2
17336: EQUAL
17337: IFFALSE 17351
// Say ( tmp , D2c-FSol1-1 ) ;
17339: NOP4
17343: PPUSH
17344: LD_STRING D2c-FSol1-1
17346: PPUSH
17347: NOP4
// Say ( Kurt , D2c-Kurt-1 ) ;
17351: NOP4
17355: PPUSH
17356: LD_STRING D2c-Kurt-1
17358: PPUSH
17359: NOP4
// DialogueOff ;
17363: NOP4
// InGameOff ;
17367: NOP4
// ComMoveToArea ( Kurt , KurtEscape ) ;
17371: NOP4
17375: PPUSH
17376: LD_INT 9
17378: PPUSH
17379: NOP4
// readyToEscape = 1 ;
17383: NOP4
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
17391: NOP4
17395: PUSH
17396: LD_INT 0
17398: ST_TO_ADDR
// end ; end_of_file
17399: LD_VAR 0 1
17403: RET
// every 0 0$1 do
17404: GO 17406
17406: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17407: LD_INT 3
17409: PPUSH
17410: LD_INT 32
17412: PPUSH
17413: LD_INT 3
17415: PPUSH
17416: NOP4
17420: END
// every 0 0$1 do
17421: GO 17423
17423: DISABLE
// begin enable ;
17424: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17425: LD_INT 3
17427: PPUSH
17428: LD_INT 2
17430: PPUSH
17431: NOP4
// if disableHealAI = 0 then
17435: NOP4
17439: PUSH
17440: LD_INT 0
17442: EQUAL
17443: IFFALSE 17461
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17445: LD_INT 3
17447: PPUSH
17448: LD_INT 10
17450: PPUSH
17451: LD_INT 11
17453: PPUSH
17454: LD_INT 32
17456: PPUSH
17457: NOP4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17461: LD_INT 3
17463: PPUSH
17464: LD_INT 51
17466: PPUSH
17467: LD_INT 7
17469: PPUSH
17470: NOP4
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17474: LD_INT 3
17476: PPUSH
17477: LD_INT 14
17479: PPUSH
17480: LD_INT 121
17482: PPUSH
17483: LD_INT 100
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: NOP4
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17493: LD_INT 3
17495: PPUSH
17496: NOP4
17500: PPUSH
17501: NOP4
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17505: LD_INT 3
17507: PPUSH
17508: LD_INT 8
17510: PUSH
17511: LD_INT 67
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 1
17520: PPUSH
17521: LD_INT 2
17523: PPUSH
17524: NOP4
17528: ARRAY
17529: PPUSH
17530: LD_INT 11
17532: PPUSH
17533: NOP4
// AttackNearBuildings ( 3 , 1 ) ;
17537: LD_INT 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: NOP4
// end ;
17547: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17548: LD_INT 22
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 2
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 55
17570: PUSH
17571: EMPTY
17572: LIST
17573: PUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 34
17579: PUSH
17580: LD_INT 51
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PPUSH
17597: NOP4
17601: PUSH
17602: LD_INT 0
17604: EQUAL
17605: IFFALSE 17757
17607: GO 17609
17609: DISABLE
// begin enable ;
17610: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17611: LD_INT 2
17613: PPUSH
17614: NOP4
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_INT 1000
17624: PPUSH
17625: NOP4
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17629: LD_INT 3
17631: PPUSH
17632: LD_INT 21
17634: PPUSH
17635: LD_INT 4
17637: PUSH
17638: LD_INT 5
17640: PUSH
17641: LD_INT 5
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: NOP4
17653: ARRAY
17654: PPUSH
17655: LD_INT 1
17657: PPUSH
17658: LD_INT 43
17660: PUSH
17661: LD_INT 43
17663: PUSH
17664: LD_INT 43
17666: PUSH
17667: LD_INT 44
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 44
17678: PUSH
17679: LD_INT 44
17681: PUSH
17682: LD_INT 44
17684: PUSH
17685: LD_INT 43
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 44
17696: PUSH
17697: LD_INT 44
17699: PUSH
17700: LD_INT 44
17702: PUSH
17703: LD_INT 44
17705: PUSH
17706: LD_INT 46
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PUSH
17721: NOP4
17725: ARRAY
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: LD_INT 22
17735: PUSH
17736: LD_INT 22
17738: PUSH
17739: LD_INT 24
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: PUSH
17747: NOP4
17751: ARRAY
17752: PPUSH
17753: NOP4
// end ;
17757: END
// every 5 5$0 do
17758: GO 17760
17760: DISABLE
// begin enable ;
17761: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17762: LD_INT 17
17764: PPUSH
17765: LD_INT 22
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: LD_INT 42
17776: PUSH
17777: LD_INT 43
17779: PUSH
17780: LD_INT 44
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_INT 3
17793: PPUSH
17794: NOP4
17798: ARRAY
17799: PPUSH
17800: NOP4
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17804: LD_INT 17
17806: PPUSH
17807: LD_INT 22
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: LD_INT 51
17818: PPUSH
17819: NOP4
// end ;
17823: END
// every 2 2$0 do var i , j ;
17824: GO 17826
17826: DISABLE
17827: LD_INT 0
17829: PPUSH
17830: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17831: LD_INT 14700
17833: PUSH
17834: LD_INT 33600
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 2
17846: PPUSH
17847: NOP4
17851: ARRAY
17852: PPUSH
17853: NOP4
// disableHealAI = 1 ;
17857: NOP4
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17865: NOP4
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_INT 3
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 25
17882: PUSH
17883: LD_INT 4
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: NOP4
17898: PUSH
17899: FOR_IN
17900: IFFALSE 17913
// ComExitBuilding ( i ) ;
17902: NOP4
17906: PPUSH
17907: NOP4
17911: GO 17899
17913: POP
17914: POP
// wait ( 0 0$1 ) ;
17915: LD_INT 35
17917: PPUSH
17918: NOP4
// repeat wait ( 0 0$1 ) ;
17922: LD_INT 35
17924: PPUSH
17925: NOP4
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17929: NOP4
17933: PUSH
17934: LD_INT 22
17936: PUSH
17937: LD_INT 3
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 25
17946: PUSH
17947: LD_INT 4
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: NOP4
17962: PUSH
17963: FOR_IN
17964: IFFALSE 18041
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17966: NOP4
17970: PUSH
17971: LD_INT 19
17973: PPUSH
17974: LD_INT 22
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 25
17986: PUSH
17987: LD_INT 12
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: NOP4
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18037
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18006: NOP4
18010: PPUSH
18011: NOP4
18015: PPUSH
18016: NOP4
18020: PPUSH
18021: NOP4
18025: PPUSH
18026: NOP4
18030: PPUSH
18031: NOP4
// end ;
18035: GO 18003
18037: POP
18038: POP
// end ;
18039: GO 17963
18041: POP
18042: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18043: LD_INT 22
18045: PUSH
18046: LD_INT 3
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 25
18055: PUSH
18056: LD_INT 4
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PPUSH
18067: NOP4
18071: PUSH
18072: LD_INT 0
18074: EQUAL
18075: PUSH
18076: NOP4
18080: PUSH
18081: LD_INT 6
18083: PUSH
18084: LD_INT 7
18086: PUSH
18087: LD_INT 8
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: NOP4
18099: ARRAY
18100: GREATEREQUAL
18101: OR
18102: PUSH
18103: LD_INT 19
18105: PPUSH
18106: LD_INT 22
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 25
18118: PUSH
18119: LD_INT 12
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PPUSH
18130: NOP4
18134: PUSH
18135: LD_INT 0
18137: EQUAL
18138: OR
18139: IFFALSE 17922
// disableHealAI = 0 ;
18141: NOP4
18145: PUSH
18146: LD_INT 0
18148: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18149: NOP4
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_INT 3
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 25
18166: PUSH
18167: LD_INT 12
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PPUSH
18178: NOP4
18182: PUSH
18183: FOR_IN
18184: IFFALSE 18200
// SetClass ( i , 16 ) ;
18186: NOP4
18190: PPUSH
18191: LD_INT 16
18193: PPUSH
18194: NOP4
18198: GO 18183
18200: POP
18201: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18202: NOP4
18206: PUSH
18207: LD_INT 22
18209: PUSH
18210: LD_INT 3
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 4
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: NOP4
18235: PUSH
18236: FOR_IN
18237: IFFALSE 18256
// ComMoveXY ( i , 113 , 94 ) ;
18239: NOP4
18243: PPUSH
18244: LD_INT 113
18246: PPUSH
18247: LD_INT 94
18249: PPUSH
18250: NOP4
18254: GO 18236
18256: POP
18257: POP
// end ;
18258: PPOPN 2
18260: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18261: LD_INT 21
18263: PPUSH
18264: NOP4
18268: PUSH
18269: LD_INT 3
18271: EQUAL
18272: PUSH
18273: LD_INT 21
18275: PPUSH
18276: NOP4
18280: AND
18281: PUSH
18282: LD_INT 22
18284: PUSH
18285: LD_INT 3
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 34
18294: PUSH
18295: LD_INT 51
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PPUSH
18306: NOP4
18310: PUSH
18311: LD_INT 0
18313: EQUAL
18314: AND
18315: IFFALSE 18347
18317: GO 18319
18319: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18320: LD_INT 21
18322: PPUSH
18323: LD_INT 23
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: LD_INT 51
18334: PPUSH
18335: NOP4
// wait ( 5 5$0 ) ;
18339: LD_INT 10500
18341: PPUSH
18342: NOP4
// enable ;
18346: ENABLE
// end ; end_of_file
18347: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18348: NOP4
18352: PUSH
18353: LD_INT 0
18355: LESSEQUAL
18356: IFFALSE 18505
18358: GO 18360
18360: DISABLE
18361: LD_INT 0
18363: PPUSH
18364: PPUSH
18365: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18366: NOP4
18370: PUSH
18371: LD_INT 22
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 21
18383: PUSH
18384: LD_INT 3
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: LD_INT 30
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 30
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: LIST
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: LIST
18423: PPUSH
18424: NOP4
18428: ST_TO_ADDR
// for i in tmp do
18429: NOP4
18433: PUSH
18434: NOP4
18438: PUSH
18439: FOR_IN
18440: IFFALSE 18473
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18442: NOP4
18446: PUSH
18447: NOP4
18451: PUSH
18452: NOP4
18456: PPUSH
18457: NOP4
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: NOP4
18469: PLUS
18470: ST_TO_ADDR
18471: GO 18439
18473: POP
18474: POP
// if yourCrates >= needCrates then
18475: NOP4
18479: PUSH
18480: NOP4
18484: GREATEREQUAL
18485: IFFALSE 18498
// begin FinishMission ( yourCrates ) ;
18487: NOP4
18491: PPUSH
18492: NOP4
// end else
18496: GO 18505
// begin YouLost ( matmin ) ;
18498: LD_STRING matmin
18500: PPUSH
18501: NOP4
// end ; end ;
18505: PPOPN 3
18507: END
// export function FinishMission ( crates ) ; begin
18508: LD_INT 0
18510: PPUSH
// if crates + 100 > crates then
18511: NOP4
18515: PUSH
18516: LD_INT 100
18518: PLUS
18519: PUSH
18520: NOP4
18524: GREATER
18525: IFFALSE 18549
// begin AddMedal ( cans , 1 ) ;
18527: LD_STRING cans
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: NOP4
// SaveVariable ( 1 , 06_crates_1 ) ;
18537: LD_INT 1
18539: PPUSH
18540: LD_STRING 06_crates_1
18542: PPUSH
18543: NOP4
// end else
18547: GO 18570
// begin AddMedal ( cans , - 1 ) ;
18549: LD_STRING cans
18551: PPUSH
18552: LD_INT 1
18554: NEG
18555: PPUSH
18556: NOP4
// SaveVariable ( 0 , 06_crates_1 ) ;
18560: LD_INT 0
18562: PPUSH
18563: LD_STRING 06_crates_1
18565: PPUSH
18566: NOP4
// end ; if unitLost < 2 then
18570: NOP4
18574: PUSH
18575: LD_INT 2
18577: LESS
18578: IFFALSE 18592
// begin AddMedal ( people , 1 ) ;
18580: LD_STRING people
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: NOP4
// end else
18590: GO 18603
// begin AddMedal ( people , - 1 ) ;
18592: LD_STRING people
18594: PPUSH
18595: LD_INT 1
18597: NEG
18598: PPUSH
18599: NOP4
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18603: NOP4
18607: PPUSH
18608: LD_STRING 06_remoteVehs_1
18610: PPUSH
18611: NOP4
// if remoteVehiclesBuild = 1 then
18615: NOP4
18619: PUSH
18620: LD_INT 1
18622: EQUAL
18623: IFFALSE 18637
// begin AddMedal ( remote , 1 ) ;
18625: LD_STRING remote
18627: PPUSH
18628: LD_INT 1
18630: PPUSH
18631: NOP4
// end else
18635: GO 18677
// begin if GetTech ( 18 , 1 ) = state_enabled then
18637: LD_INT 18
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: NOP4
18647: PUSH
18648: LD_INT 1
18650: EQUAL
18651: IFFALSE 18666
// begin AddMedal ( remote , - 1 ) ;
18653: LD_STRING remote
18655: PPUSH
18656: LD_INT 1
18658: NEG
18659: PPUSH
18660: NOP4
// end else
18664: GO 18677
// begin AddMedal ( remote , - 2 ) ;
18666: LD_STRING remote
18668: PPUSH
18669: LD_INT 2
18671: NEG
18672: PPUSH
18673: NOP4
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18677: NOP4
18681: PPUSH
18682: LD_STRING 06_KurtStatus_1
18684: PPUSH
18685: NOP4
// GiveMedals ( Main ) ;
18689: LD_STRING Main
18691: PPUSH
18692: NOP4
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18696: LD_INT 50
18698: PUSH
18699: EMPTY
18700: LIST
18701: PUSH
18702: LD_INT 22
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 21
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: LD_INT 25
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 25
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 25
18747: PUSH
18748: LD_INT 3
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 25
18757: PUSH
18758: LD_INT 4
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: PPUSH
18778: NOP4
18782: PPUSH
18783: NOP4
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18787: NOP4
18791: PPUSH
18792: NOP4
18796: PUSH
18797: LD_STRING JMM
18799: STR
18800: PPUSH
18801: NOP4
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18805: NOP4
18809: PPUSH
18810: NOP4
18814: PUSH
18815: LD_STRING Lisa
18817: STR
18818: PPUSH
18819: NOP4
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18823: NOP4
18827: PPUSH
18828: NOP4
18832: PUSH
18833: LD_STRING Bobby
18835: STR
18836: PPUSH
18837: NOP4
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18841: NOP4
18845: PPUSH
18846: NOP4
18850: PUSH
18851: LD_STRING Cyrus
18853: STR
18854: PPUSH
18855: NOP4
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18859: NOP4
18863: PPUSH
18864: NOP4
18868: PUSH
18869: LD_STRING Frank
18871: STR
18872: PPUSH
18873: NOP4
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18877: NOP4
18881: PPUSH
18882: NOP4
18886: PUSH
18887: LD_STRING Brown
18889: STR
18890: PPUSH
18891: NOP4
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18895: NOP4
18899: PPUSH
18900: NOP4
18904: PUSH
18905: LD_STRING Donaldson
18907: STR
18908: PPUSH
18909: NOP4
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18913: NOP4
18917: PPUSH
18918: NOP4
18922: PUSH
18923: LD_STRING Gladstone
18925: STR
18926: PPUSH
18927: NOP4
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18931: NOP4
18935: PPUSH
18936: NOP4
18940: PUSH
18941: LD_STRING Denis
18943: STR
18944: PPUSH
18945: NOP4
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18949: NOP4
18953: PPUSH
18954: NOP4
18958: PUSH
18959: LD_STRING Joan
18961: STR
18962: PPUSH
18963: NOP4
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18967: NOP4
18971: PPUSH
18972: LD_STRING 06_JoanStatus_1
18974: PPUSH
18975: NOP4
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18979: LD_INT 50
18981: PUSH
18982: EMPTY
18983: LIST
18984: PUSH
18985: LD_INT 22
18987: PUSH
18988: LD_INT 1
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 21
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: LD_INT 25
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 25
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 25
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 25
19040: PUSH
19041: LD_INT 4
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: PPUSH
19061: NOP4
19065: PUSH
19066: NOP4
19070: PUSH
19071: NOP4
19075: PUSH
19076: NOP4
19080: PUSH
19081: NOP4
19085: PUSH
19086: NOP4
19090: PUSH
19091: NOP4
19095: PUSH
19096: NOP4
19100: PUSH
19101: NOP4
19105: PUSH
19106: NOP4
19110: PUSH
19111: NOP4
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: DIFF
19128: PPUSH
19129: LD_STRING 06_other_survivors
19131: PPUSH
19132: NOP4
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19136: LD_INT 50
19138: PUSH
19139: EMPTY
19140: LIST
19141: PUSH
19142: LD_INT 22
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 21
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 25
19167: PUSH
19168: LD_INT 12
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 25
19177: PUSH
19178: LD_INT 16
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: NOP4
19200: PPUSH
19201: LD_STRING 06_other_apemans
19203: PPUSH
19204: NOP4
// YouWin ;
19208: NOP4
// end ; end_of_file
19212: LD_VAR 0 2
19216: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
19217: NOP4
19221: PUSH
19222: LD_INT 5
19224: PUSH
19225: LD_INT 4
19227: PUSH
19228: LD_INT 3
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: PUSH
19236: NOP4
19240: ARRAY
19241: EQUAL
19242: IFFALSE 19357
19244: GO 19246
19246: DISABLE
// begin enable ;
19247: ENABLE
// sendedConvoys = 0 ;
19248: NOP4
19252: PUSH
19253: LD_INT 0
19255: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19256: LD_INT 6
19258: PPUSH
19259: LD_INT 3
19261: PPUSH
19262: LD_INT 3
19264: PPUSH
19265: LD_INT 4
19267: PPUSH
19268: NOP4
19272: PUSH
19273: LD_INT 4
19275: PPUSH
19276: LD_INT 5
19278: PPUSH
19279: NOP4
19283: PUSH
19284: LD_INT 6
19286: PPUSH
19287: LD_INT 7
19289: PPUSH
19290: NOP4
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: PUSH
19300: NOP4
19304: ARRAY
19305: PPUSH
19306: LD_INT 0
19308: PPUSH
19309: LD_INT 0
19311: PPUSH
19312: LD_INT 0
19314: PPUSH
19315: LD_INT 3
19317: PPUSH
19318: NOP4
19322: PPUSH
19323: NOP4
19327: PPUSH
19328: NOP4
19332: PPUSH
19333: LD_INT 18
19335: PPUSH
19336: LD_INT 17
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: LD_INT 2
19347: PPUSH
19348: NOP4
19352: PPUSH
19353: NOP4
// end ; end_of_file
19357: END
// export function PrepareNature ; var i , un ; begin
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
19362: PPUSH
// for i = 1 to Difficulty + 2 do
19363: NOP4
19367: PUSH
19368: DOUBLE
19369: LD_INT 1
19371: DEC
19372: ST_TO_ADDR
19373: NOP4
19377: PUSH
19378: LD_INT 2
19380: PLUS
19381: PUSH
19382: FOR_TO
19383: IFFALSE 19492
// begin hc_sex = sex_male ;
19385: LD_ADDR_OWVAR 27
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// uc_side = 0 ;
19393: LD_ADDR_OWVAR 20
19397: PUSH
19398: LD_INT 0
19400: ST_TO_ADDR
// uc_nation = nation_nature ;
19401: LD_ADDR_OWVAR 21
19405: PUSH
19406: LD_INT 0
19408: ST_TO_ADDR
// hc_class = class_tiger ;
19409: LD_ADDR_OWVAR 28
19413: PUSH
19414: LD_INT 14
19416: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19417: LD_ADDR_OWVAR 31
19421: PUSH
19422: NOP4
19426: PUSH
19427: LD_INT 0
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19442: LD_ADDR_OWVAR 35
19446: PUSH
19447: LD_INT 5
19449: NEG
19450: PPUSH
19451: LD_INT 5
19453: PPUSH
19454: NOP4
19458: PUSH
19459: NOP4
19463: MUL
19464: ST_TO_ADDR
// un = CreateHuman ;
19465: NOP4
19469: PUSH
19470: NOP4
19474: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19475: NOP4
19479: PPUSH
19480: LD_INT 20
19482: PPUSH
19483: LD_INT 0
19485: PPUSH
19486: NOP4
// end ;
19490: GO 19382
19492: POP
19493: POP
// for i = 1 to rand ( 3 , 4 ) do
19494: NOP4
19498: PUSH
19499: DOUBLE
19500: LD_INT 1
19502: DEC
19503: ST_TO_ADDR
19504: LD_INT 3
19506: PPUSH
19507: LD_INT 4
19509: PPUSH
19510: NOP4
19514: PUSH
19515: FOR_TO
19516: IFFALSE 19610
// begin hc_sex = sex_male ;
19518: LD_ADDR_OWVAR 27
19522: PUSH
19523: LD_INT 1
19525: ST_TO_ADDR
// uc_side = 0 ;
19526: LD_ADDR_OWVAR 20
19530: PUSH
19531: LD_INT 0
19533: ST_TO_ADDR
// uc_nation = nation_nature ;
19534: LD_ADDR_OWVAR 21
19538: PUSH
19539: LD_INT 0
19541: ST_TO_ADDR
// hc_class = 18 ;
19542: LD_ADDR_OWVAR 28
19546: PUSH
19547: LD_INT 18
19549: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19550: LD_ADDR_OWVAR 31
19554: PUSH
19555: NOP4
19559: PUSH
19560: LD_INT 0
19562: PUSH
19563: LD_INT 0
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: ST_TO_ADDR
// hc_agressivity = 0 ;
19575: LD_ADDR_OWVAR 35
19579: PUSH
19580: LD_INT 0
19582: ST_TO_ADDR
// un = CreateHuman ;
19583: NOP4
19587: PUSH
19588: NOP4
19592: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19593: NOP4
19597: PPUSH
19598: LD_INT 20
19600: PPUSH
19601: LD_INT 0
19603: PPUSH
19604: NOP4
// end ;
19608: GO 19515
19610: POP
19611: POP
// for i = 1 to rand ( 2 , 4 ) + Difficulty do
19612: NOP4
19616: PUSH
19617: DOUBLE
19618: LD_INT 1
19620: DEC
19621: ST_TO_ADDR
19622: LD_INT 2
19624: PPUSH
19625: LD_INT 4
19627: PPUSH
19628: NOP4
19632: PUSH
19633: NOP4
19637: PLUS
19638: PUSH
19639: FOR_TO
19640: IFFALSE 19823
// begin hc_sex = sex_male ;
19642: LD_ADDR_OWVAR 27
19646: PUSH
19647: LD_INT 1
19649: ST_TO_ADDR
// uc_side = 0 ;
19650: LD_ADDR_OWVAR 20
19654: PUSH
19655: LD_INT 0
19657: ST_TO_ADDR
// uc_nation = nation_nature ;
19658: LD_ADDR_OWVAR 21
19662: PUSH
19663: LD_INT 0
19665: ST_TO_ADDR
// hc_class = class_apeman ;
19666: LD_ADDR_OWVAR 28
19670: PUSH
19671: LD_INT 12
19673: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
19674: LD_ADDR_OWVAR 31
19678: PUSH
19679: NOP4
19683: PPUSH
19684: NOP4
19688: PPUSH
19689: NOP4
19693: PUSH
19694: NOP4
19698: PPUSH
19699: NOP4
19703: PPUSH
19704: NOP4
19708: PUSH
19709: NOP4
19713: PPUSH
19714: NOP4
19718: PPUSH
19719: NOP4
19723: PUSH
19724: NOP4
19728: PPUSH
19729: NOP4
19733: PPUSH
19734: NOP4
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
19745: LD_ADDR_OWVAR 35
19749: PUSH
19750: LD_INT 20
19752: PPUSH
19753: LD_INT 30
19755: PPUSH
19756: NOP4
19760: PUSH
19761: LD_INT 30
19763: PPUSH
19764: LD_INT 40
19766: PPUSH
19767: NOP4
19771: PUSH
19772: LD_INT 40
19774: PPUSH
19775: LD_INT 50
19777: PPUSH
19778: NOP4
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: PUSH
19788: NOP4
19792: ARRAY
19793: ST_TO_ADDR
// un = CreateHuman ;
19794: NOP4
19798: PUSH
19799: NOP4
19803: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
19804: NOP4
19808: PPUSH
19809: NOP4
19813: PPUSH
19814: LD_INT 0
19816: PPUSH
19817: NOP4
// end ;
19821: GO 19639
19823: POP
19824: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
19825: NOP4
19829: PUSH
19830: DOUBLE
19831: LD_INT 1
19833: DEC
19834: ST_TO_ADDR
19835: LD_INT 5
19837: PPUSH
19838: LD_INT 6
19840: PPUSH
19841: NOP4
19845: PUSH
19846: NOP4
19850: PLUS
19851: PUSH
19852: FOR_TO
19853: IFFALSE 20042
// begin hc_sex = sex_male ;
19855: LD_ADDR_OWVAR 27
19859: PUSH
19860: LD_INT 1
19862: ST_TO_ADDR
// uc_side = 0 ;
19863: LD_ADDR_OWVAR 20
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// uc_nation = nation_nature ;
19871: LD_ADDR_OWVAR 21
19875: PUSH
19876: LD_INT 0
19878: ST_TO_ADDR
// hc_class = class_apeman ;
19879: LD_ADDR_OWVAR 28
19883: PUSH
19884: LD_INT 12
19886: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
19887: LD_ADDR_OWVAR 31
19891: PUSH
19892: NOP4
19896: PPUSH
19897: NOP4
19901: PPUSH
19902: NOP4
19906: PUSH
19907: NOP4
19911: PPUSH
19912: NOP4
19916: PPUSH
19917: NOP4
19921: PUSH
19922: NOP4
19926: PLUS
19927: PUSH
19928: NOP4
19932: PPUSH
19933: NOP4
19937: PPUSH
19938: NOP4
19942: PUSH
19943: NOP4
19947: PPUSH
19948: NOP4
19952: PPUSH
19953: NOP4
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: ST_TO_ADDR
// hc_agressivity = [ rand ( 10 , 20 ) , rand ( 20 , 25 ) , rand ( 25 , 30 ) ] [ Difficulty ] ;
19964: LD_ADDR_OWVAR 35
19968: PUSH
19969: LD_INT 10
19971: PPUSH
19972: LD_INT 20
19974: PPUSH
19975: NOP4
19979: PUSH
19980: LD_INT 20
19982: PPUSH
19983: LD_INT 25
19985: PPUSH
19986: NOP4
19990: PUSH
19991: LD_INT 25
19993: PPUSH
19994: LD_INT 30
19996: PPUSH
19997: NOP4
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: NOP4
20011: ARRAY
20012: ST_TO_ADDR
// un = CreateHuman ;
20013: NOP4
20017: PUSH
20018: NOP4
20022: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20023: NOP4
20027: PPUSH
20028: NOP4
20032: PPUSH
20033: LD_INT 0
20035: PPUSH
20036: NOP4
// end ;
20040: GO 19852
20042: POP
20043: POP
// end ; end_of_file
20044: LD_VAR 0 1
20048: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20049: NOP4
20053: PPUSH
20054: NOP4
20058: IFFALSE 20070
20060: GO 20062
20062: DISABLE
// YouLost ( JMM ) ;
20063: LD_STRING JMM
20065: PPUSH
20066: NOP4
20070: END
