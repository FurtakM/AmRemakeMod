// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 36
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 37
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 38
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// KurtStatus = 0 ;
  58: LD_ADDR_EXP 19
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// readyToEscape = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// JoanStatus = 0 ;
  74: LD_ADDR_EXP 15
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// cratesStatus = 2 ;
  82: LD_ADDR_EXP 34
  86: PUSH
  87: LD_INT 2
  89: ST_TO_ADDR
// timerStatus = 1 ;
  90: LD_ADDR_EXP 23
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 350
 105: PUSH
 106: LD_INT 500
 108: PUSH
 109: LD_INT 700
 111: PUSH
 112: EMPTY
 113: LIST
 114: LIST
 115: LIST
 116: PUSH
 117: LD_OWVAR 67
 121: ARRAY
 122: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 105000
 130: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 131: LD_ADDR_EXP 27
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// sendedConvoys = 0 ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// tamedApemans = 0 ;
 147: LD_ADDR_EXP 30
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// unitLost = 0 ;
 155: LD_ADDR_EXP 28
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: EMPTY
 169: ST_TO_ADDR
// disableHealAI = 0 ;
 170: LD_ADDR_EXP 31
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// strings = [ ] ;
 178: LD_ADDR_EXP 26
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// PrepareNature ;
 185: CALL 19461 0 0
// PrepareDifficulty ;
 189: CALL 5038 0 0
// PrepareRussian ;
 193: CALL 4145 0 0
// PrepareVehicles ;
 197: CALL 1434 0 0
// PrepareHeroes ;
 201: CALL 452 0 0
// PrepareOthers ;
 205: CALL 1695 0 0
// PreparePlayerApemans ;
 209: CALL 1837 0 0
// end ;
 213: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 214: LD_EXP 36
 218: PUSH
 219: LD_INT 1
 221: EQUAL
 222: IFFALSE 449
 224: GO 226
 226: DISABLE
 227: LD_INT 0
 229: PPUSH
// begin enable ;
 230: ENABLE
// fogoff ( true ) ;
 231: LD_INT 1
 233: PPUSH
 234: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 238: LD_ADDR_VAR 0 1
 242: PUSH
 243: LD_INT 22
 245: PUSH
 246: LD_INT 1
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: LD_INT 21
 255: PUSH
 256: LD_INT 1
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: PPUSH
 267: CALL_OW 69
 271: PUSH
 272: FOR_IN
 273: IFFALSE 289
// SetLives ( i , 1000 ) ;
 275: LD_VAR 0 1
 279: PPUSH
 280: LD_INT 1000
 282: PPUSH
 283: CALL_OW 234
 287: GO 272
 289: POP
 290: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 291: LD_ADDR_VAR 0 1
 295: PUSH
 296: LD_INT 22
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 30
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PPUSH
 320: CALL_OW 69
 324: PUSH
 325: FOR_IN
 326: IFFALSE 350
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 274
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: LD_INT 9999
 343: PPUSH
 344: CALL_OW 277
 348: GO 325
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 2
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// if IsSelected ( rudepo ) then
 413: LD_INT 2
 415: PPUSH
 416: CALL_OW 306
 420: IFFALSE 430
// your_side = 3 ;
 422: LD_ADDR_OWVAR 2
 426: PUSH
 427: LD_INT 3
 429: ST_TO_ADDR
// if IsSelected ( JMM ) then
 430: LD_EXP 1
 434: PPUSH
 435: CALL_OW 306
 439: IFFALSE 449
// your_side = 1 ;
 441: LD_ADDR_OWVAR 2
 445: PUSH
 446: LD_INT 1
 448: ST_TO_ADDR
// end ; end_of_file
 449: PPOPN 1
 451: END
// export function PrepareHeroes ; var veh ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// uc_side = 1 ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_INT 1
 463: ST_TO_ADDR
// uc_nation = 1 ;
 464: LD_ADDR_OWVAR 21
 468: PUSH
 469: LD_INT 1
 471: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 472: LD_ADDR_EXP 1
 476: PUSH
 477: LD_STRING JMM
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL 4522 0 2
 487: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 488: LD_ADDR_EXP 13
 492: PUSH
 493: LD_STRING Harisson
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL 4522 0 2
 503: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_STRING DeltaDoctor
 511: PPUSH
 512: CALL_OW 34
 516: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 517: LD_ADDR_VAR 0 2
 521: PUSH
 522: LD_INT 22
 524: PUSH
 525: LD_INT 1
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 21
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 58
 544: PUSH
 545: EMPTY
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: ST_TO_ADDR
// if veh > 0 then
 558: LD_VAR 0 2
 562: PUSH
 563: LD_INT 0
 565: GREATER
 566: IFFALSE 588
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 568: LD_EXP 1
 572: PPUSH
 573: LD_VAR 0 2
 577: PUSH
 578: LD_INT 1
 580: ARRAY
 581: PPUSH
 582: CALL_OW 52
// end else
 586: GO 603
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 588: LD_EXP 1
 592: PPUSH
 593: LD_INT 2
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 603: LD_STRING LisaIn06
 605: PPUSH
 606: LD_INT 0
 608: PPUSH
 609: CALL_OW 30
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 721
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 619: LD_ADDR_VAR 0 2
 623: PUSH
 624: LD_INT 22
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 21
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: LD_INT 58
 646: PUSH
 647: EMPTY
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: PPUSH
 655: CALL_OW 69
 659: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 660: LD_ADDR_EXP 2
 664: PUSH
 665: LD_STRING Lisa
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL 4522 0 2
 675: ST_TO_ADDR
// if veh > 0 then
 676: LD_VAR 0 2
 680: PUSH
 681: LD_INT 0
 683: GREATER
 684: IFFALSE 706
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 686: LD_EXP 2
 690: PPUSH
 691: LD_VAR 0 2
 695: PUSH
 696: LD_INT 1
 698: ARRAY
 699: PPUSH
 700: CALL_OW 52
// end else
 704: GO 721
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 706: LD_EXP 2
 710: PPUSH
 711: LD_INT 2
 713: PPUSH
 714: LD_INT 0
 716: PPUSH
 717: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 721: LD_STRING BobbyIn06
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 30
 731: PUSH
 732: LD_INT 1
 734: EQUAL
 735: IFFALSE 839
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_INT 22
 744: PUSH
 745: LD_INT 1
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 21
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 58
 764: PUSH
 765: EMPTY
 766: LIST
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: PPUSH
 773: CALL_OW 69
 777: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 778: LD_ADDR_EXP 3
 782: PUSH
 783: LD_STRING Bobby
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL 4522 0 2
 793: ST_TO_ADDR
// if veh > 0 then
 794: LD_VAR 0 2
 798: PUSH
 799: LD_INT 0
 801: GREATER
 802: IFFALSE 824
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 804: LD_EXP 3
 808: PPUSH
 809: LD_VAR 0 2
 813: PUSH
 814: LD_INT 1
 816: ARRAY
 817: PPUSH
 818: CALL_OW 52
// end else
 822: GO 839
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 824: LD_EXP 3
 828: PPUSH
 829: LD_INT 2
 831: PPUSH
 832: LD_INT 0
 834: PPUSH
 835: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 839: LD_STRING CyrusIn06
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 30
 849: PUSH
 850: LD_INT 1
 852: EQUAL
 853: IFFALSE 957
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 855: LD_ADDR_VAR 0 2
 859: PUSH
 860: LD_INT 22
 862: PUSH
 863: LD_INT 1
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: LD_INT 21
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: PUSH
 880: LD_INT 58
 882: PUSH
 883: EMPTY
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PPUSH
 891: CALL_OW 69
 895: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_STRING Cyrus
 903: PPUSH
 904: LD_INT 1
 906: PPUSH
 907: CALL 4522 0 2
 911: ST_TO_ADDR
// if veh > 0 then
 912: LD_VAR 0 2
 916: PUSH
 917: LD_INT 0
 919: GREATER
 920: IFFALSE 942
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 922: LD_EXP 4
 926: PPUSH
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: CALL_OW 52
// end else
 940: GO 957
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 942: LD_EXP 4
 946: PPUSH
 947: LD_INT 2
 949: PPUSH
 950: LD_INT 0
 952: PPUSH
 953: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 957: LD_STRING FrankIn06
 959: PPUSH
 960: LD_INT 0
 962: PPUSH
 963: CALL_OW 30
 967: PUSH
 968: LD_INT 1
 970: EQUAL
 971: IFFALSE 1075
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 973: LD_ADDR_VAR 0 2
 977: PUSH
 978: LD_INT 22
 980: PUSH
 981: LD_INT 1
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 21
 990: PUSH
 991: LD_INT 2
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 58
1000: PUSH
1001: EMPTY
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 69
1013: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1014: LD_ADDR_EXP 5
1018: PUSH
1019: LD_STRING Frank
1021: PPUSH
1022: LD_INT 1
1024: PPUSH
1025: CALL 4522 0 2
1029: ST_TO_ADDR
// if veh > 0 then
1030: LD_VAR 0 2
1034: PUSH
1035: LD_INT 0
1037: GREATER
1038: IFFALSE 1060
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1040: LD_EXP 5
1044: PPUSH
1045: LD_VAR 0 2
1049: PUSH
1050: LD_INT 1
1052: ARRAY
1053: PPUSH
1054: CALL_OW 52
// end else
1058: GO 1075
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1060: LD_EXP 5
1064: PPUSH
1065: LD_INT 2
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1075: LD_STRING BrownIn06
1077: PPUSH
1078: LD_INT 0
1080: PPUSH
1081: CALL_OW 30
1085: PUSH
1086: LD_INT 1
1088: EQUAL
1089: IFFALSE 1193
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1091: LD_ADDR_VAR 0 2
1095: PUSH
1096: LD_INT 22
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 21
1108: PUSH
1109: LD_INT 2
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 58
1118: PUSH
1119: EMPTY
1120: LIST
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PPUSH
1127: CALL_OW 69
1131: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1132: LD_ADDR_EXP 6
1136: PUSH
1137: LD_STRING Brown
1139: PPUSH
1140: LD_INT 1
1142: PPUSH
1143: CALL 4522 0 2
1147: ST_TO_ADDR
// if veh > 0 then
1148: LD_VAR 0 2
1152: PUSH
1153: LD_INT 0
1155: GREATER
1156: IFFALSE 1178
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1158: LD_EXP 6
1162: PPUSH
1163: LD_VAR 0 2
1167: PUSH
1168: LD_INT 1
1170: ARRAY
1171: PPUSH
1172: CALL_OW 52
// end else
1176: GO 1193
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1178: LD_EXP 6
1182: PPUSH
1183: LD_INT 2
1185: PPUSH
1186: LD_INT 0
1188: PPUSH
1189: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1193: LD_STRING DonaldsonIn06
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 30
1203: PUSH
1204: LD_INT 1
1206: EQUAL
1207: IFFALSE 1311
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: LD_INT 22
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PUSH
1224: LD_INT 21
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PUSH
1234: LD_INT 58
1236: PUSH
1237: EMPTY
1238: LIST
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1250: LD_ADDR_EXP 7
1254: PUSH
1255: LD_STRING Donaldson
1257: PPUSH
1258: LD_INT 1
1260: PPUSH
1261: CALL 4522 0 2
1265: ST_TO_ADDR
// if veh > 0 then
1266: LD_VAR 0 2
1270: PUSH
1271: LD_INT 0
1273: GREATER
1274: IFFALSE 1296
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1276: LD_EXP 7
1280: PPUSH
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 1
1288: ARRAY
1289: PPUSH
1290: CALL_OW 52
// end else
1294: GO 1311
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1296: LD_EXP 7
1300: PPUSH
1301: LD_INT 2
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1311: LD_STRING GladstoneIn06
1313: PPUSH
1314: LD_INT 0
1316: PPUSH
1317: CALL_OW 30
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1429
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1327: LD_ADDR_VAR 0 2
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 21
1344: PUSH
1345: LD_INT 2
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 58
1354: PUSH
1355: EMPTY
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PPUSH
1363: CALL_OW 69
1367: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1368: LD_ADDR_EXP 8
1372: PUSH
1373: LD_STRING Gladstone
1375: PPUSH
1376: LD_INT 1
1378: PPUSH
1379: CALL 4522 0 2
1383: ST_TO_ADDR
// if veh > 0 then
1384: LD_VAR 0 2
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1414
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1394: LD_EXP 8
1398: PPUSH
1399: LD_VAR 0 2
1403: PUSH
1404: LD_INT 1
1406: ARRAY
1407: PPUSH
1408: CALL_OW 52
// end else
1412: GO 1429
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1414: LD_EXP 8
1418: PPUSH
1419: LD_INT 2
1421: PPUSH
1422: LD_INT 0
1424: PPUSH
1425: CALL_OW 49
// end ; end ; end ;
1429: LD_VAR 0 1
1433: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1434: LD_INT 0
1436: PPUSH
1437: PPUSH
1438: PPUSH
1439: PPUSH
1440: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1441: LD_ADDR_VAR 0 5
1445: PUSH
1446: LD_STRING 06_VehiclesIn06_1
1448: PPUSH
1449: EMPTY
1450: PPUSH
1451: CALL_OW 30
1455: ST_TO_ADDR
// uc_side = 1 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 1
1463: ST_TO_ADDR
// if vehicles > 0 then
1464: LD_VAR 0 5
1468: PUSH
1469: LD_INT 0
1471: GREATER
1472: IFFALSE 1690
// begin for i := 1 to vehicles do
1474: LD_ADDR_VAR 0 2
1478: PUSH
1479: DOUBLE
1480: LD_INT 1
1482: DEC
1483: ST_TO_ADDR
1484: LD_VAR 0 5
1488: PUSH
1489: FOR_TO
1490: IFFALSE 1688
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1492: LD_ADDR_OWVAR 21
1496: PUSH
1497: LD_VAR 0 5
1501: PUSH
1502: LD_VAR 0 2
1506: ARRAY
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1512: LD_ADDR_OWVAR 37
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_VAR 0 2
1526: ARRAY
1527: PUSH
1528: LD_INT 2
1530: ARRAY
1531: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1532: LD_ADDR_OWVAR 39
1536: PUSH
1537: LD_VAR 0 5
1541: PUSH
1542: LD_VAR 0 2
1546: ARRAY
1547: PUSH
1548: LD_INT 3
1550: ARRAY
1551: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1552: LD_ADDR_OWVAR 38
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 4
1570: ARRAY
1571: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1572: LD_ADDR_OWVAR 40
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 5
1590: ARRAY
1591: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1592: LD_ADDR_OWVAR 41
1596: PUSH
1597: LD_INT 40
1599: ST_TO_ADDR
// veh = CreateVehicle ;
1600: LD_ADDR_VAR 0 4
1604: PUSH
1605: CALL_OW 45
1609: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1610: LD_VAR 0 4
1614: PPUSH
1615: LD_INT 3
1617: PPUSH
1618: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1622: LD_VAR 0 4
1626: PPUSH
1627: LD_INT 2
1629: PPUSH
1630: LD_INT 0
1632: PPUSH
1633: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1637: LD_OWVAR 40
1641: PUSH
1642: LD_INT 12
1644: EQUAL
1645: IFFALSE 1686
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1647: LD_VAR 0 4
1651: PPUSH
1652: LD_VAR 0 5
1656: PUSH
1657: LD_VAR 0 2
1661: ARRAY
1662: PUSH
1663: LD_INT 6
1665: ARRAY
1666: PPUSH
1667: LD_VAR 0 5
1671: PUSH
1672: LD_VAR 0 2
1676: ARRAY
1677: PUSH
1678: LD_INT 7
1680: ARRAY
1681: PPUSH
1682: CALL_OW 291
// end ;
1686: GO 1489
1688: POP
1689: POP
// end ; end ;
1690: LD_VAR 0 1
1694: RET
// export function PrepareOthers ; var i , veh ; begin
1695: LD_INT 0
1697: PPUSH
1698: PPUSH
1699: PPUSH
// uc_side = 1 ;
1700: LD_ADDR_OWVAR 20
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// uc_nation = 1 ;
1708: LD_ADDR_OWVAR 21
1712: PUSH
1713: LD_INT 1
1715: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1716: LD_ADDR_EXP 11
1720: PUSH
1721: LD_STRING OthersIn06
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// for i in others do
1729: LD_ADDR_VAR 0 2
1733: PUSH
1734: LD_EXP 11
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1830
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1742: LD_ADDR_VAR 0 3
1746: PUSH
1747: LD_INT 22
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 21
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 58
1769: PUSH
1770: EMPTY
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PPUSH
1778: CALL_OW 69
1782: ST_TO_ADDR
// if veh > 0 then
1783: LD_VAR 0 3
1787: PUSH
1788: LD_INT 0
1790: GREATER
1791: IFFALSE 1813
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1793: LD_VAR 0 2
1797: PPUSH
1798: LD_VAR 0 3
1802: PUSH
1803: LD_INT 1
1805: ARRAY
1806: PPUSH
1807: CALL_OW 52
// end else
1811: GO 1828
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1813: LD_VAR 0 2
1817: PPUSH
1818: LD_INT 2
1820: PPUSH
1821: LD_INT 0
1823: PPUSH
1824: CALL_OW 49
// end ; end ;
1828: GO 1739
1830: POP
1831: POP
// end ;
1832: LD_VAR 0 1
1836: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1837: LD_INT 0
1839: PPUSH
1840: PPUSH
1841: PPUSH
// uc_side = 1 ;
1842: LD_ADDR_OWVAR 20
1846: PUSH
1847: LD_INT 1
1849: ST_TO_ADDR
// uc_nation = 0 ;
1850: LD_ADDR_OWVAR 21
1854: PUSH
1855: LD_INT 0
1857: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1858: LD_ADDR_EXP 12
1862: PUSH
1863: LD_STRING ApeIn06
1865: PPUSH
1866: CALL_OW 31
1870: ST_TO_ADDR
// for i in ape do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: LD_EXP 12
1880: PUSH
1881: FOR_IN
1882: IFFALSE 1901
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1884: LD_VAR 0 2
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
1899: GO 1881
1901: POP
1902: POP
// end ;
1903: LD_VAR 0 1
1907: RET
// export function PrepareDenis ; begin
1908: LD_INT 0
1910: PPUSH
// uc_side = 1 ;
1911: LD_ADDR_OWVAR 20
1915: PUSH
1916: LD_INT 1
1918: ST_TO_ADDR
// uc_nation = 1 ;
1919: LD_ADDR_OWVAR 21
1923: PUSH
1924: LD_INT 1
1926: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1927: LD_ADDR_EXP 9
1931: PUSH
1932: LD_STRING Denis
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL 4522 0 2
1942: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1943: LD_EXP 9
1947: PPUSH
1948: LD_INT 13
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1958: LD_EXP 9
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1970: LD_EXP 9
1974: PPUSH
1975: LD_INT 750
1977: PPUSH
1978: CALL_OW 234
// end ;
1982: LD_VAR 0 1
1986: RET
// export function HarrisonSupport ; var un , veh ; begin
1987: LD_INT 0
1989: PPUSH
1990: PPUSH
1991: PPUSH
// uc_side = 1 ;
1992: LD_ADDR_OWVAR 20
1996: PUSH
1997: LD_INT 1
1999: ST_TO_ADDR
// uc_nation = 1 ;
2000: LD_ADDR_OWVAR 21
2004: PUSH
2005: LD_INT 1
2007: ST_TO_ADDR
// vc_engine = 1 ;
2008: LD_ADDR_OWVAR 39
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// vc_control = 1 ;
2016: LD_ADDR_OWVAR 38
2020: PUSH
2021: LD_INT 1
2023: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2024: LD_ADDR_OWVAR 40
2028: PUSH
2029: LD_INT 4
2031: PUSH
2032: LD_INT 4
2034: PUSH
2035: LD_INT 2
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_OWVAR 67
2047: ARRAY
2048: ST_TO_ADDR
// vc_chassis = 2 ;
2049: LD_ADDR_OWVAR 37
2053: PUSH
2054: LD_INT 2
2056: ST_TO_ADDR
// veh = CreateVehicle ;
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: CALL_OW 45
2066: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2067: LD_VAR 0 3
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 49
// hc_class := 2 ;
2094: LD_ADDR_OWVAR 28
2098: PUSH
2099: LD_INT 2
2101: ST_TO_ADDR
// hc_sex := sex_male ;
2102: LD_ADDR_OWVAR 27
2106: PUSH
2107: LD_INT 1
2109: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING SecondCharsGal
2117: ST_TO_ADDR
// hc_face_number := 52 ;
2118: LD_ADDR_OWVAR 34
2122: PUSH
2123: LD_INT 52
2125: ST_TO_ADDR
// hc_name := Craig Brown ;
2126: LD_ADDR_OWVAR 26
2130: PUSH
2131: LD_STRING Craig Brown
2133: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2134: LD_ADDR_OWVAR 31
2138: PUSH
2139: LD_INT 1
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 1
2147: PUSH
2148: LD_INT 0
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2157: LD_ADDR_EXP 16
2161: PUSH
2162: CALL_OW 44
2166: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2167: LD_EXP 16
2171: PPUSH
2172: LD_VAR 0 3
2176: PPUSH
2177: CALL_OW 52
// vc_engine = 1 ;
2181: LD_ADDR_OWVAR 39
2185: PUSH
2186: LD_INT 1
2188: ST_TO_ADDR
// vc_control = 1 ;
2189: LD_ADDR_OWVAR 38
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2197: LD_ADDR_OWVAR 40
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: LD_INT 2
2207: PUSH
2208: LD_INT 2
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_OWVAR 67
2220: ARRAY
2221: ST_TO_ADDR
// vc_chassis = 2 ;
2222: LD_ADDR_OWVAR 37
2226: PUSH
2227: LD_INT 2
2229: ST_TO_ADDR
// veh = CreateVehicle ;
2230: LD_ADDR_VAR 0 3
2234: PUSH
2235: CALL_OW 45
2239: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2240: LD_VAR 0 3
2244: PPUSH
2245: LD_INT 2
2247: PPUSH
2248: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2252: LD_VAR 0 3
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 50
2274: PPUSH
2275: CALL_OW 240
// hc_class := 1 ;
2279: LD_ADDR_OWVAR 28
2283: PUSH
2284: LD_INT 1
2286: ST_TO_ADDR
// hc_sex := sex_female ;
2287: LD_ADDR_OWVAR 27
2291: PUSH
2292: LD_INT 2
2294: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2295: LD_ADDR_OWVAR 33
2299: PUSH
2300: LD_STRING SecondCharsGal
2302: ST_TO_ADDR
// hc_face_number := 45 ;
2303: LD_ADDR_OWVAR 34
2307: PUSH
2308: LD_INT 45
2310: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2311: LD_ADDR_OWVAR 26
2315: PUSH
2316: LD_STRING Ingrid Jonsson
2318: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2319: LD_ADDR_OWVAR 31
2323: PUSH
2324: LD_INT 1
2326: PUSH
2327: LD_INT 3
2329: PUSH
2330: LD_INT 1
2332: PUSH
2333: LD_INT 0
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2342: LD_ADDR_EXP 17
2346: PUSH
2347: CALL_OW 44
2351: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2352: LD_EXP 17
2356: PPUSH
2357: LD_VAR 0 3
2361: PPUSH
2362: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_INT 45
2373: PPUSH
2374: CALL_OW 240
// end ;
2378: LD_VAR 0 1
2382: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2383: LD_INT 0
2385: PPUSH
2386: PPUSH
2387: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2388: LD_ADDR_VAR 0 2
2392: PUSH
2393: LD_INT 22
2395: PUSH
2396: LD_INT 1
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 21
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 26
2415: PUSH
2416: LD_INT 1
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 2
2425: PUSH
2426: LD_INT 25
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 25
2438: PUSH
2439: LD_INT 2
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 25
2448: PUSH
2449: LD_INT 3
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 25
2458: PUSH
2459: LD_INT 4
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: PPUSH
2479: CALL_OW 69
2483: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2484: LD_ADDR_VAR 0 3
2488: PUSH
2489: LD_INT 1
2491: PPUSH
2492: LD_VAR 0 2
2496: PPUSH
2497: CALL_OW 12
2501: ST_TO_ADDR
// uc_side = 4 ;
2502: LD_ADDR_OWVAR 20
2506: PUSH
2507: LD_INT 4
2509: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2510: LD_ADDR_EXP 14
2514: PUSH
2515: LD_STRING Joan
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL 4522 0 2
2525: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2526: LD_EXP 14
2530: PPUSH
2531: LD_VAR 0 2
2535: PUSH
2536: LD_VAR 0 3
2540: ARRAY
2541: PPUSH
2542: CALL_OW 250
2546: PPUSH
2547: LD_VAR 0 2
2551: PUSH
2552: LD_VAR 0 3
2556: ARRAY
2557: PPUSH
2558: CALL_OW 251
2562: PPUSH
2563: LD_INT 5
2565: PPUSH
2566: LD_INT 1
2568: PPUSH
2569: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2573: LD_EXP 14
2577: PPUSH
2578: LD_INT 250
2580: PPUSH
2581: CALL_OW 234
// InGameOn ;
2585: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2589: LD_EXP 14
2593: PPUSH
2594: CALL_OW 87
// wait ( 0 0$2 ) ;
2598: LD_INT 70
2600: PPUSH
2601: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2605: LD_VAR 0 2
2609: PUSH
2610: LD_VAR 0 3
2614: ARRAY
2615: PPUSH
2616: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2620: LD_VAR 0 2
2624: PUSH
2625: LD_VAR 0 3
2629: ARRAY
2630: PPUSH
2631: CALL_OW 122
// wait ( 0 0$1 ) ;
2635: LD_INT 35
2637: PPUSH
2638: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2642: LD_VAR 0 2
2646: PUSH
2647: LD_VAR 0 3
2651: ARRAY
2652: PPUSH
2653: LD_EXP 14
2657: PPUSH
2658: CALL_OW 112
// wait ( 0 0$2 ) ;
2662: LD_INT 70
2664: PPUSH
2665: CALL_OW 67
// DialogueOn ;
2669: CALL_OW 6
// if tmp [ rnd ] = JMM then
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PUSH
2684: LD_EXP 1
2688: EQUAL
2689: IFFALSE 2816
// begin Say ( JMM , D5b-JMM-1 ) ;
2691: LD_EXP 1
2695: PPUSH
2696: LD_STRING D5b-JMM-1
2698: PPUSH
2699: CALL_OW 88
// DialogueOff ;
2703: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2707: LD_EXP 14
2711: PPUSH
2712: LD_INT 500
2714: PPUSH
2715: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2719: LD_EXP 14
2723: PPUSH
2724: LD_EXP 1
2728: PPUSH
2729: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2733: LD_EXP 1
2737: PPUSH
2738: LD_EXP 14
2742: PPUSH
2743: CALL_OW 119
// wait ( 0 0$1 ) ;
2747: LD_INT 35
2749: PPUSH
2750: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2754: LD_EXP 14
2758: PPUSH
2759: LD_STRING D5b-Joan-1
2761: PPUSH
2762: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2766: LD_EXP 1
2770: PPUSH
2771: LD_STRING D5b-JMM-2
2773: PPUSH
2774: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2778: LD_EXP 14
2782: PPUSH
2783: LD_STRING D5b-Joan-2
2785: PPUSH
2786: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2790: LD_EXP 1
2794: PPUSH
2795: LD_STRING D5b-JMM-3
2797: PPUSH
2798: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2802: LD_EXP 14
2806: PPUSH
2807: LD_STRING D5b-Joan-3
2809: PPUSH
2810: CALL_OW 88
// end else
2814: GO 3156
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2816: LD_VAR 0 2
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: PPUSH
2827: LD_STRING D5a-Sol1-1
2829: PPUSH
2830: CALL_OW 88
// DialogueOff ;
2834: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2838: LD_EXP 14
2842: PPUSH
2843: LD_INT 500
2845: PPUSH
2846: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2850: LD_EXP 14
2854: PPUSH
2855: LD_VAR 0 2
2859: PUSH
2860: LD_VAR 0 3
2864: ARRAY
2865: PPUSH
2866: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2870: LD_VAR 0 2
2874: PUSH
2875: LD_VAR 0 3
2879: ARRAY
2880: PPUSH
2881: LD_EXP 14
2885: PPUSH
2886: CALL_OW 119
// wait ( 0 0$1 ) ;
2890: LD_INT 35
2892: PPUSH
2893: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2897: LD_EXP 14
2901: PPUSH
2902: LD_STRING D5a-Joan-1
2904: PPUSH
2905: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2909: LD_VAR 0 2
2913: PUSH
2914: LD_VAR 0 3
2918: ARRAY
2919: PPUSH
2920: LD_STRING D5a-Sol1-2
2922: PPUSH
2923: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2927: LD_EXP 14
2931: PPUSH
2932: LD_STRING D5a-Joan-2
2934: PPUSH
2935: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2939: LD_VAR 0 2
2943: PUSH
2944: LD_VAR 0 3
2948: ARRAY
2949: PPUSH
2950: LD_STRING D5a-Sol1-3
2952: PPUSH
2953: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2957: LD_EXP 14
2961: PPUSH
2962: LD_STRING D5a-Joan-3
2964: PPUSH
2965: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2969: LD_VAR 0 2
2973: PUSH
2974: LD_VAR 0 3
2978: ARRAY
2979: PPUSH
2980: LD_STRING D5a-Sol1-4
2982: PPUSH
2983: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2987: LD_EXP 1
2991: PPUSH
2992: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2996: LD_EXP 1
3000: PPUSH
3001: CALL_OW 122
// wait ( 0 0$1 ) ;
3005: LD_INT 35
3007: PPUSH
3008: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3012: LD_INT 35
3014: PPUSH
3015: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
3019: LD_EXP 14
3023: PUSH
3024: LD_VAR 0 2
3028: PUSH
3029: LD_VAR 0 3
3033: ARRAY
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PPUSH
3039: LD_EXP 1
3043: PPUSH
3044: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3048: LD_EXP 14
3052: PPUSH
3053: LD_EXP 1
3057: PPUSH
3058: CALL_OW 296
3062: PUSH
3063: LD_INT 5
3065: LESS
3066: IFFALSE 3012
// ComTurnUnit ( Joan , JMM ) ;
3068: LD_EXP 14
3072: PPUSH
3073: LD_EXP 1
3077: PPUSH
3078: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3082: LD_EXP 1
3086: PPUSH
3087: LD_EXP 14
3091: PPUSH
3092: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
3096: LD_EXP 14
3100: PPUSH
3101: LD_STRING D5a-Joan-4
3103: PPUSH
3104: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3108: LD_EXP 1
3112: PPUSH
3113: LD_STRING D5a-JMM-4
3115: PPUSH
3116: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3120: LD_EXP 14
3124: PPUSH
3125: LD_STRING D5a-Joan-5
3127: PPUSH
3128: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3132: LD_EXP 1
3136: PPUSH
3137: LD_STRING D5a-JMM-5
3139: PPUSH
3140: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3144: LD_EXP 14
3148: PPUSH
3149: LD_STRING D5a-Joan-6
3151: PPUSH
3152: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
3156: LD_EXP 1
3160: PPUSH
3161: LD_STRING D6-JMM-1
3163: PPUSH
3164: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3168: LD_EXP 14
3172: PPUSH
3173: LD_STRING D6-Joan-1
3175: PPUSH
3176: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3180: LD_EXP 1
3184: PPUSH
3185: LD_STRING D6-JMM-2
3187: PPUSH
3188: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3192: LD_EXP 14
3196: PPUSH
3197: LD_STRING D6-Joan-2
3199: PPUSH
3200: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3204: LD_EXP 1
3208: PPUSH
3209: LD_STRING D6-JMM-3
3211: PPUSH
3212: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3216: LD_EXP 14
3220: PPUSH
3221: LD_STRING D6-Joan-3
3223: PPUSH
3224: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_STRING D6-JMM-4
3235: PPUSH
3236: CALL_OW 88
// DialogueOff ;
3240: CALL_OW 7
// InGameOff ;
3244: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3248: LD_EXP 14
3252: PPUSH
3253: LD_INT 1
3255: PPUSH
3256: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3260: LD_STRING MJ
3262: PPUSH
3263: CALL_OW 337
// JoanStatus = 1 ;
3267: LD_ADDR_EXP 15
3271: PUSH
3272: LD_INT 1
3274: ST_TO_ADDR
// end ;
3275: LD_VAR 0 1
3279: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3280: LD_INT 0
3282: PPUSH
3283: PPUSH
// uc_side = 1 ;
3284: LD_ADDR_OWVAR 20
3288: PUSH
3289: LD_INT 1
3291: ST_TO_ADDR
// uc_nation = 1 ;
3292: LD_ADDR_OWVAR 21
3296: PUSH
3297: LD_INT 1
3299: ST_TO_ADDR
// if number = 1 then
3300: LD_VAR 0 1
3304: PUSH
3305: LD_INT 1
3307: EQUAL
3308: IFFALSE 3446
// begin hc_class := 1 ;
3310: LD_ADDR_OWVAR 28
3314: PUSH
3315: LD_INT 1
3317: ST_TO_ADDR
// hc_sex := sex_male ;
3318: LD_ADDR_OWVAR 27
3322: PUSH
3323: LD_INT 1
3325: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3326: LD_ADDR_OWVAR 33
3330: PUSH
3331: LD_STRING AmGalRemake
3333: ST_TO_ADDR
// hc_face_number := 7 ;
3334: LD_ADDR_OWVAR 34
3338: PUSH
3339: LD_INT 7
3341: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3342: LD_ADDR_OWVAR 26
3346: PUSH
3347: LD_STRING Bobby Jordan
3349: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3350: LD_ADDR_OWVAR 31
3354: PUSH
3355: LD_INT 2
3357: PUSH
3358: LD_INT 1
3360: PUSH
3361: LD_INT 1
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: ST_TO_ADDR
// un = CreateHuman ;
3373: LD_ADDR_VAR 0 3
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3383: LD_VAR 0 3
3387: PPUSH
3388: LD_INT 12
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 49
// wait ( 0 0$1 ) ;
3398: LD_INT 35
3400: PPUSH
3401: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: CALL_OW 87
// DialogueOn ;
3414: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_STRING D11b-Sol3-1
3425: PPUSH
3426: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3430: LD_EXP 1
3434: PPUSH
3435: LD_STRING D11b-JMM-1
3437: PPUSH
3438: CALL_OW 88
// DialogueOff ;
3442: CALL_OW 7
// end ; if number = 2 then
3446: LD_VAR 0 1
3450: PUSH
3451: LD_INT 2
3453: EQUAL
3454: IFFALSE 3592
// begin hc_class := 3 ;
3456: LD_ADDR_OWVAR 28
3460: PUSH
3461: LD_INT 3
3463: ST_TO_ADDR
// hc_sex := sex_male ;
3464: LD_ADDR_OWVAR 27
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3472: LD_ADDR_OWVAR 33
3476: PUSH
3477: LD_STRING SecondCharsGal
3479: ST_TO_ADDR
// hc_face_number := 55 ;
3480: LD_ADDR_OWVAR 34
3484: PUSH
3485: LD_INT 55
3487: ST_TO_ADDR
// hc_name := George McCarthy ;
3488: LD_ADDR_OWVAR 26
3492: PUSH
3493: LD_STRING George McCarthy
3495: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3496: LD_ADDR_OWVAR 31
3500: PUSH
3501: LD_INT 1
3503: PUSH
3504: LD_INT 2
3506: PUSH
3507: LD_INT 3
3509: PUSH
3510: LD_INT 1
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: ST_TO_ADDR
// un = CreateHuman ;
3519: LD_ADDR_VAR 0 3
3523: PUSH
3524: CALL_OW 44
3528: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3529: LD_VAR 0 3
3533: PPUSH
3534: LD_INT 12
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3544: LD_VAR 0 3
3548: PPUSH
3549: CALL_OW 87
// wait ( 0 0$1 ) ;
3553: LD_INT 35
3555: PPUSH
3556: CALL_OW 67
// DialogueOn ;
3560: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3564: LD_VAR 0 3
3568: PPUSH
3569: LD_STRING D11d-Sol4-1
3571: PPUSH
3572: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3576: LD_EXP 1
3580: PPUSH
3581: LD_STRING D11d-JMM-1
3583: PPUSH
3584: CALL_OW 88
// DialogueOff ;
3588: CALL_OW 7
// end ; if number = 4 then
3592: LD_VAR 0 1
3596: PUSH
3597: LD_INT 4
3599: EQUAL
3600: IFFALSE 3726
// begin hc_class := 3 ;
3602: LD_ADDR_OWVAR 28
3606: PUSH
3607: LD_INT 3
3609: ST_TO_ADDR
// hc_sex := sex_female ;
3610: LD_ADDR_OWVAR 27
3614: PUSH
3615: LD_INT 2
3617: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3618: LD_ADDR_OWVAR 33
3622: PUSH
3623: LD_STRING SecondCharsGal
3625: ST_TO_ADDR
// hc_face_number := 46 ;
3626: LD_ADDR_OWVAR 34
3630: PUSH
3631: LD_INT 46
3633: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3634: LD_ADDR_OWVAR 26
3638: PUSH
3639: LD_STRING Sylvia Creak
3641: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3642: LD_ADDR_OWVAR 31
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: LD_INT 3
3652: PUSH
3653: LD_INT 1
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: ST_TO_ADDR
// un = CreateHuman ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: CALL_OW 44
3674: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: LD_INT 12
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3690: LD_VAR 0 3
3694: PPUSH
3695: CALL_OW 87
// wait ( 0 0$1 ) ;
3699: LD_INT 35
3701: PPUSH
3702: CALL_OW 67
// DialogueOn ;
3706: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3710: LD_VAR 0 3
3714: PPUSH
3715: LD_STRING D11e-FSol4-1
3717: PPUSH
3718: CALL_OW 88
// DialogueOff ;
3722: CALL_OW 7
// end ; if number = 5 then
3726: LD_VAR 0 1
3730: PUSH
3731: LD_INT 5
3733: EQUAL
3734: IFFALSE 3872
// begin hc_class := 1 ;
3736: LD_ADDR_OWVAR 28
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// hc_sex := sex_female ;
3744: LD_ADDR_OWVAR 27
3748: PUSH
3749: LD_INT 2
3751: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3752: LD_ADDR_OWVAR 33
3756: PUSH
3757: LD_STRING SecondCharsGal
3759: ST_TO_ADDR
// hc_face_number := 37 ;
3760: LD_ADDR_OWVAR 34
3764: PUSH
3765: LD_INT 37
3767: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3768: LD_ADDR_OWVAR 26
3772: PUSH
3773: LD_STRING Margherite Simpson
3775: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3776: LD_ADDR_OWVAR 31
3780: PUSH
3781: LD_INT 1
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: ST_TO_ADDR
// un = CreateHuman ;
3799: LD_ADDR_VAR 0 3
3803: PUSH
3804: CALL_OW 44
3808: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3809: LD_VAR 0 3
3813: PPUSH
3814: LD_INT 12
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3824: LD_VAR 0 3
3828: PPUSH
3829: CALL_OW 87
// wait ( 0 0$1 ) ;
3833: LD_INT 35
3835: PPUSH
3836: CALL_OW 67
// DialogueOn ;
3840: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_STRING D11c-FSol3-1
3851: PPUSH
3852: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3856: LD_EXP 1
3860: PPUSH
3861: LD_STRING D11c-JMM-1
3863: PPUSH
3864: CALL_OW 88
// DialogueOff ;
3868: CALL_OW 7
// end ; if number = 6 then
3872: LD_VAR 0 1
3876: PUSH
3877: LD_INT 6
3879: EQUAL
3880: IFFALSE 4006
// begin hc_class := 1 ;
3882: LD_ADDR_OWVAR 28
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// hc_sex := sex_male ;
3890: LD_ADDR_OWVAR 27
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3898: LD_ADDR_OWVAR 33
3902: PUSH
3903: LD_STRING AmGalRemake
3905: ST_TO_ADDR
// hc_face_number := 1 ;
3906: LD_ADDR_OWVAR 34
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// hc_name := Charles Brown ;
3914: LD_ADDR_OWVAR 26
3918: PUSH
3919: LD_STRING Charles Brown
3921: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3922: LD_ADDR_OWVAR 31
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: LD_INT 1
3932: PUSH
3933: LD_INT 0
3935: PUSH
3936: LD_INT 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: ST_TO_ADDR
// un = CreateHuman ;
3945: LD_ADDR_VAR 0 3
3949: PUSH
3950: CALL_OW 44
3954: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: LD_INT 12
3962: PPUSH
3963: LD_INT 1
3965: PPUSH
3966: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3970: LD_VAR 0 3
3974: PPUSH
3975: CALL_OW 87
// wait ( 0 0$1 ) ;
3979: LD_INT 35
3981: PPUSH
3982: CALL_OW 67
// DialogueOn ;
3986: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_STRING D11f-Sol5-1
3997: PPUSH
3998: CALL_OW 88
// DialogueOff ;
4002: CALL_OW 7
// end ; if number = 7 then
4006: LD_VAR 0 1
4010: PUSH
4011: LD_INT 7
4013: EQUAL
4014: IFFALSE 4140
// begin hc_class := 1 ;
4016: LD_ADDR_OWVAR 28
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// hc_sex := sex_female ;
4024: LD_ADDR_OWVAR 27
4028: PUSH
4029: LD_INT 2
4031: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4032: LD_ADDR_OWVAR 33
4036: PUSH
4037: LD_STRING AmGalRemake
4039: ST_TO_ADDR
// hc_face_number := 2 ;
4040: LD_ADDR_OWVAR 34
4044: PUSH
4045: LD_INT 2
4047: ST_TO_ADDR
// hc_name := Johanna Holland ;
4048: LD_ADDR_OWVAR 26
4052: PUSH
4053: LD_STRING Johanna Holland
4055: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4056: LD_ADDR_OWVAR 31
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: LD_INT 0
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
// un = CreateHuman ;
4079: LD_ADDR_VAR 0 3
4083: PUSH
4084: CALL_OW 44
4088: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4089: LD_VAR 0 3
4093: PPUSH
4094: LD_INT 12
4096: PPUSH
4097: LD_INT 1
4099: PPUSH
4100: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4104: LD_VAR 0 3
4108: PPUSH
4109: CALL_OW 87
// wait ( 0 0$1 ) ;
4113: LD_INT 35
4115: PPUSH
4116: CALL_OW 67
// DialogueOn ;
4120: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_STRING D11a-FSol2-1
4131: PPUSH
4132: CALL_OW 88
// DialogueOff ;
4136: CALL_OW 7
// end ; end ; end_of_file
4140: LD_VAR 0 2
4144: RET
// export function PrepareRussian ; var i ; begin
4145: LD_INT 0
4147: PPUSH
4148: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4149: LD_INT 3
4151: PPUSH
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 2
4157: PPUSH
4158: LD_EXP 32
4162: PPUSH
4163: LD_EXP 33
4167: PPUSH
4168: CALL_OW 12
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: LD_INT 4
4178: PPUSH
4179: CALL 4792 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4183: LD_INT 3
4185: PPUSH
4186: LD_INT 3
4188: PPUSH
4189: LD_INT 8
4191: PPUSH
4192: LD_EXP 32
4196: PPUSH
4197: LD_EXP 33
4201: PPUSH
4202: CALL_OW 12
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: LD_INT 4
4212: PPUSH
4213: CALL 4792 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 67
4225: PPUSH
4226: LD_EXP 32
4230: PPUSH
4231: LD_EXP 33
4235: PPUSH
4236: CALL_OW 12
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: LD_INT 2
4246: PPUSH
4247: CALL 4792 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4251: LD_INT 3
4253: PPUSH
4254: LD_INT 3
4256: PPUSH
4257: LD_INT 21
4259: PPUSH
4260: LD_EXP 32
4264: PPUSH
4265: LD_EXP 33
4269: PPUSH
4270: CALL_OW 12
4274: PPUSH
4275: LD_INT 3
4277: PPUSH
4278: LD_INT 6
4280: PPUSH
4281: CALL 4792 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4285: LD_INT 3
4287: PPUSH
4288: LD_INT 3
4290: PPUSH
4291: LD_INT 17
4293: PPUSH
4294: LD_EXP 32
4298: PPUSH
4299: LD_EXP 33
4303: PPUSH
4304: CALL_OW 12
4308: PPUSH
4309: LD_INT 3
4311: PPUSH
4312: LD_INT 6
4314: PPUSH
4315: CALL 4792 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4319: LD_INT 3
4321: PPUSH
4322: LD_INT 3
4324: PPUSH
4325: LD_INT 32
4327: PPUSH
4328: LD_EXP 32
4332: PPUSH
4333: LD_EXP 33
4337: PPUSH
4338: CALL_OW 12
4342: PPUSH
4343: LD_INT 4
4345: PPUSH
4346: LD_INT 2
4348: PPUSH
4349: CALL 4792 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4353: LD_ADDR_VAR 0 2
4357: PUSH
4358: LD_INT 22
4360: PUSH
4361: LD_INT 3
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 21
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 30
4380: PUSH
4381: LD_INT 32
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: LIST
4392: PPUSH
4393: CALL_OW 69
4397: PUSH
4398: FOR_IN
4399: IFFALSE 4439
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4401: LD_INT 3
4403: PPUSH
4404: LD_INT 3
4406: PPUSH
4407: LD_VAR 0 2
4411: PPUSH
4412: LD_EXP 32
4416: PPUSH
4417: LD_EXP 33
4421: PPUSH
4422: CALL_OW 12
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: CALL 4792 0 6
4437: GO 4398
4439: POP
4440: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4441: LD_ADDR_VAR 0 2
4445: PUSH
4446: LD_INT 22
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 21
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 31
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PPUSH
4481: CALL_OW 69
4485: PUSH
4486: FOR_IN
4487: IFFALSE 4515
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4489: LD_EXP 32
4493: PPUSH
4494: LD_EXP 33
4498: PPUSH
4499: CALL_OW 12
4503: PPUSH
4504: LD_VAR 0 2
4508: PPUSH
4509: CALL 4902 0 2
4513: GO 4486
4515: POP
4516: POP
// end ; end_of_file
4517: LD_VAR 0 1
4521: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4522: LD_INT 0
4524: PPUSH
4525: PPUSH
// if exist_mode then
4526: LD_VAR 0 2
4530: IFFALSE 4555
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4532: LD_ADDR_VAR 0 4
4536: PUSH
4537: LD_EXP 38
4541: PUSH
4542: LD_VAR 0 1
4546: STR
4547: PPUSH
4548: CALL_OW 34
4552: ST_TO_ADDR
// end else
4553: GO 4570
// begin unit := NewCharacter ( ident ) ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 25
4569: ST_TO_ADDR
// end ; result := unit ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_VAR 0 4
4579: ST_TO_ADDR
// end ;
4580: LD_VAR 0 3
4584: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4585: LD_INT 0
4587: PPUSH
4588: PPUSH
4589: PPUSH
// rnd = rand ( 1 , characters ) ;
4590: LD_ADDR_VAR 0 6
4594: PUSH
4595: LD_INT 1
4597: PPUSH
4598: LD_VAR 0 1
4602: PPUSH
4603: CALL_OW 12
4607: ST_TO_ADDR
// for i = 1 to characters do
4608: LD_ADDR_VAR 0 5
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_VAR 0 1
4622: PUSH
4623: FOR_TO
4624: IFFALSE 4734
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4626: LD_VAR 0 5
4630: PUSH
4631: LD_VAR 0 6
4635: EQUAL
4636: PUSH
4637: LD_VAR 0 1
4641: PUSH
4642: LD_VAR 0 5
4646: ARRAY
4647: PPUSH
4648: CALL_OW 258
4652: PUSH
4653: LD_INT 1
4655: EQUAL
4656: AND
4657: IFFALSE 4679
// Say ( characters [ i ] , dialogMID ) ;
4659: LD_VAR 0 1
4663: PUSH
4664: LD_VAR 0 5
4668: ARRAY
4669: PPUSH
4670: LD_VAR 0 2
4674: PPUSH
4675: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4679: LD_VAR 0 5
4683: PUSH
4684: LD_VAR 0 6
4688: EQUAL
4689: PUSH
4690: LD_VAR 0 1
4694: PUSH
4695: LD_VAR 0 5
4699: ARRAY
4700: PPUSH
4701: CALL_OW 258
4705: PUSH
4706: LD_INT 2
4708: EQUAL
4709: AND
4710: IFFALSE 4732
// Say ( characters [ i ] , dialogFID ) ;
4712: LD_VAR 0 1
4716: PUSH
4717: LD_VAR 0 5
4721: ARRAY
4722: PPUSH
4723: LD_VAR 0 3
4727: PPUSH
4728: CALL_OW 88
// end ;
4732: GO 4623
4734: POP
4735: POP
// end ;
4736: LD_VAR 0 4
4740: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4741: LD_INT 0
4743: PPUSH
4744: PPUSH
// for i in charactersList do
4745: LD_ADDR_VAR 0 4
4749: PUSH
4750: LD_VAR 0 1
4754: PUSH
4755: FOR_IN
4756: IFFALSE 4785
// begin if IsOk ( i ) then
4758: LD_VAR 0 4
4762: PPUSH
4763: CALL_OW 302
4767: IFFALSE 4783
// SaveCharacters ( i , ident ) ;
4769: LD_VAR 0 4
4773: PPUSH
4774: LD_VAR 0 2
4778: PPUSH
4779: CALL_OW 38
// end ;
4783: GO 4755
4785: POP
4786: POP
// end ;
4787: LD_VAR 0 3
4791: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
4796: PPUSH
4797: PPUSH
// for i = 1 to count do
4798: LD_ADDR_VAR 0 8
4802: PUSH
4803: DOUBLE
4804: LD_INT 1
4806: DEC
4807: ST_TO_ADDR
4808: LD_VAR 0 6
4812: PUSH
4813: FOR_TO
4814: IFFALSE 4895
// begin uc_side = side ;
4816: LD_ADDR_OWVAR 20
4820: PUSH
4821: LD_VAR 0 1
4825: ST_TO_ADDR
// uc_nation = nation ;
4826: LD_ADDR_OWVAR 21
4830: PUSH
4831: LD_VAR 0 2
4835: ST_TO_ADDR
// hc_gallery =  ;
4836: LD_ADDR_OWVAR 33
4840: PUSH
4841: LD_STRING 
4843: ST_TO_ADDR
// hc_name =  ;
4844: LD_ADDR_OWVAR 26
4848: PUSH
4849: LD_STRING 
4851: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4852: LD_INT 0
4854: PPUSH
4855: LD_VAR 0 5
4859: PPUSH
4860: LD_VAR 0 4
4864: PPUSH
4865: CALL_OW 380
// un = CreateHuman ;
4869: LD_ADDR_VAR 0 10
4873: PUSH
4874: CALL_OW 44
4878: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4879: LD_VAR 0 10
4883: PPUSH
4884: LD_VAR 0 3
4888: PPUSH
4889: CALL_OW 52
// end ;
4893: GO 4813
4895: POP
4896: POP
// end ;
4897: LD_VAR 0 7
4901: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4902: LD_INT 0
4904: PPUSH
4905: PPUSH
4906: PPUSH
// uc_side := GetSide ( b ) ;
4907: LD_ADDR_OWVAR 20
4911: PUSH
4912: LD_VAR 0 2
4916: PPUSH
4917: CALL_OW 255
4921: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4922: LD_ADDR_OWVAR 21
4926: PUSH
4927: LD_VAR 0 2
4931: PPUSH
4932: CALL_OW 248
4936: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4937: LD_INT 0
4939: PPUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4952: LD_ADDR_VAR 0 5
4956: PUSH
4957: LD_VAR 0 2
4961: PPUSH
4962: CALL_OW 254
4966: PUSH
4967: LD_INT 3
4969: MINUS
4970: ST_TO_ADDR
// if dir < 0 then
4971: LD_VAR 0 5
4975: PUSH
4976: LD_INT 0
4978: LESS
4979: IFFALSE 4995
// dir := 6 + dir ;
4981: LD_ADDR_VAR 0 5
4985: PUSH
4986: LD_INT 6
4988: PUSH
4989: LD_VAR 0 5
4993: PLUS
4994: ST_TO_ADDR
// un := CreateHuman ;
4995: LD_ADDR_VAR 0 4
4999: PUSH
5000: CALL_OW 44
5004: ST_TO_ADDR
// SetDir ( un , dir ) ;
5005: LD_VAR 0 4
5009: PPUSH
5010: LD_VAR 0 5
5014: PPUSH
5015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5019: LD_VAR 0 4
5023: PPUSH
5024: LD_VAR 0 2
5028: PPUSH
5029: CALL_OW 52
// end ;
5033: LD_VAR 0 3
5037: RET
// export function PrepareDifficulty ; begin
5038: LD_INT 0
5040: PPUSH
// if Difficulty = 1 then
5041: LD_OWVAR 67
5045: PUSH
5046: LD_INT 1
5048: EQUAL
5049: IFFALSE 5067
// begin RuSolMinLevel = 2 ;
5051: LD_ADDR_EXP 32
5055: PUSH
5056: LD_INT 2
5058: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5059: LD_ADDR_EXP 33
5063: PUSH
5064: LD_INT 5
5066: ST_TO_ADDR
// end ; if Difficulty = 2 then
5067: LD_OWVAR 67
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: IFFALSE 5093
// begin RuSolMinLevel = 3 ;
5077: LD_ADDR_EXP 32
5081: PUSH
5082: LD_INT 3
5084: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5085: LD_ADDR_EXP 33
5089: PUSH
5090: LD_INT 5
5092: ST_TO_ADDR
// end ; if Difficulty = 3 then
5093: LD_OWVAR 67
5097: PUSH
5098: LD_INT 3
5100: EQUAL
5101: IFFALSE 5119
// begin RuSolMinLevel = 4 ;
5103: LD_ADDR_EXP 32
5107: PUSH
5108: LD_INT 4
5110: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5111: LD_ADDR_EXP 33
5115: PUSH
5116: LD_INT 5
5118: ST_TO_ADDR
// end ; end ;
5119: LD_VAR 0 1
5123: RET
// export function ShowQuery1 ; begin
5124: LD_INT 0
5126: PPUSH
// case query ( QKill ) of 1 :
5127: LD_STRING QKill
5129: PPUSH
5130: CALL_OW 97
5134: PUSH
5135: LD_INT 1
5137: DOUBLE
5138: EQUAL
5139: IFTRUE 5143
5141: GO 5154
5143: POP
// begin result = 1 ;
5144: LD_ADDR_VAR 0 1
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// end ; 2 :
5152: GO 5193
5154: LD_INT 2
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5173
5162: POP
// begin result = 2 ;
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: LD_INT 2
5170: ST_TO_ADDR
// end ; 3 :
5171: GO 5193
5173: LD_INT 3
5175: DOUBLE
5176: EQUAL
5177: IFTRUE 5181
5179: GO 5192
5181: POP
// begin result = 3 ;
5182: LD_ADDR_VAR 0 1
5186: PUSH
5187: LD_INT 3
5189: ST_TO_ADDR
// end ; end ;
5190: GO 5193
5192: POP
// end ;
5193: LD_VAR 0 1
5197: RET
// export function ShowQuery2 ; begin
5198: LD_INT 0
5200: PPUSH
// case query ( QKill2 ) of 1 :
5201: LD_STRING QKill2
5203: PPUSH
5204: CALL_OW 97
5208: PUSH
5209: LD_INT 1
5211: DOUBLE
5212: EQUAL
5213: IFTRUE 5217
5215: GO 5228
5217: POP
// begin result = 1 ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 1
5225: ST_TO_ADDR
// end ; 2 :
5226: GO 5248
5228: LD_INT 2
5230: DOUBLE
5231: EQUAL
5232: IFTRUE 5236
5234: GO 5247
5236: POP
// begin result = 2 ;
5237: LD_ADDR_VAR 0 1
5241: PUSH
5242: LD_INT 2
5244: ST_TO_ADDR
// end ; end ;
5245: GO 5248
5247: POP
// end ;
5248: LD_VAR 0 1
5252: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5253: LD_INT 0
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
// for i = 1 to 72 do
5259: LD_ADDR_VAR 0 5
5263: PUSH
5264: DOUBLE
5265: LD_INT 1
5267: DEC
5268: ST_TO_ADDR
5269: LD_INT 72
5271: PUSH
5272: FOR_TO
5273: IFFALSE 5331
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5275: LD_VAR 0 5
5279: PPUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 321
5289: PUSH
5290: LD_INT 1
5292: EQUAL
5293: PUSH
5294: LD_VAR 0 5
5298: PPUSH
5299: LD_VAR 0 3
5303: PPUSH
5304: CALL_OW 482
5308: PUSH
5309: LD_INT 1
5311: EQUAL
5312: AND
5313: IFFALSE 5329
// AddComResearch ( lab , i ) ;
5315: LD_VAR 0 2
5319: PPUSH
5320: LD_VAR 0 5
5324: PPUSH
5325: CALL_OW 184
5329: GO 5272
5331: POP
5332: POP
// end ;
5333: LD_VAR 0 4
5337: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
5344: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5345: LD_ADDR_VAR 0 6
5349: PUSH
5350: LD_INT 22
5352: PUSH
5353: LD_VAR 0 1
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PUSH
5362: LD_INT 2
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 16
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_INT 24
5392: PUSH
5393: LD_INT 1000
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 69
5409: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5410: LD_ADDR_VAR 0 4
5414: PUSH
5415: LD_INT 22
5417: PUSH
5418: LD_VAR 0 1
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 21
5429: PUSH
5430: LD_INT 3
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 3
5439: PUSH
5440: LD_INT 24
5442: PUSH
5443: LD_INT 1000
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PUSH
5459: EMPTY
5460: LIST
5461: PPUSH
5462: CALL_OW 69
5466: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5467: LD_VAR 0 4
5471: PUSH
5472: LD_INT 0
5474: GREATER
5475: PUSH
5476: LD_VAR 0 6
5480: PUSH
5481: LD_INT 0
5483: GREATER
5484: AND
5485: IFFALSE 5551
// begin for i in engineerOk_list do
5487: LD_ADDR_VAR 0 5
5491: PUSH
5492: LD_VAR 0 6
5496: PUSH
5497: FOR_IN
5498: IFFALSE 5549
// begin for j in buildings_list do
5500: LD_ADDR_VAR 0 7
5504: PUSH
5505: LD_VAR 0 4
5509: PUSH
5510: FOR_IN
5511: IFFALSE 5545
// begin AddComExitBuilding ( i ) ;
5513: LD_VAR 0 5
5517: PPUSH
5518: CALL_OW 182
// wait ( 0 0$1 ) ;
5522: LD_INT 35
5524: PPUSH
5525: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5529: LD_VAR 0 5
5533: PPUSH
5534: LD_VAR 0 7
5538: PPUSH
5539: CALL_OW 190
// end ;
5543: GO 5510
5545: POP
5546: POP
// end ;
5547: GO 5497
5549: POP
5550: POP
// end ; if buildings_list = 0 then
5551: LD_VAR 0 4
5555: PUSH
5556: LD_INT 0
5558: EQUAL
5559: IFFALSE 5592
// begin for i in engineerOK_list do
5561: LD_ADDR_VAR 0 5
5565: PUSH
5566: LD_VAR 0 6
5570: PUSH
5571: FOR_IN
5572: IFFALSE 5590
// begin ComEnterUnit ( i , building ) ;
5574: LD_VAR 0 5
5578: PPUSH
5579: LD_VAR 0 2
5583: PPUSH
5584: CALL_OW 120
// end ;
5588: GO 5571
5590: POP
5591: POP
// end ; end ;
5592: LD_VAR 0 3
5596: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5597: LD_INT 0
5599: PPUSH
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5604: LD_ADDR_VAR 0 6
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_VAR 0 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 4
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5640: LD_ADDR_VAR 0 9
5644: PUSH
5645: LD_VAR 0 3
5649: PPUSH
5650: LD_INT 22
5652: PUSH
5653: LD_VAR 0 1
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 21
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: LD_INT 24
5677: PUSH
5678: LD_INT 750
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 70
5698: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5699: LD_VAR 0 9
5703: PUSH
5704: LD_INT 0
5706: GREATER
5707: PUSH
5708: LD_VAR 0 6
5712: PUSH
5713: LD_INT 0
5715: GREATER
5716: AND
5717: IFFALSE 5844
// begin for i = 1 to damageUnits do
5719: LD_ADDR_VAR 0 7
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_VAR 0 9
5733: PUSH
5734: FOR_TO
5735: IFFALSE 5759
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5737: LD_VAR 0 9
5741: PUSH
5742: LD_VAR 0 7
5746: ARRAY
5747: PPUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: CALL_OW 113
5757: GO 5734
5759: POP
5760: POP
// for i in sci_list do
5761: LD_ADDR_VAR 0 7
5765: PUSH
5766: LD_VAR 0 6
5770: PUSH
5771: FOR_IN
5772: IFFALSE 5840
// begin ComExitBuilding ( i ) ;
5774: LD_VAR 0 7
5778: PPUSH
5779: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5783: LD_ADDR_VAR 0 8
5787: PUSH
5788: LD_VAR 0 2
5792: PPUSH
5793: LD_INT 22
5795: PUSH
5796: LD_VAR 0 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PPUSH
5805: CALL_OW 70
5809: PUSH
5810: FOR_IN
5811: IFFALSE 5836
// begin AddComHeal ( i , j ) ;
5813: LD_VAR 0 7
5817: PPUSH
5818: LD_VAR 0 8
5822: PPUSH
5823: CALL_OW 188
// wait ( 1 1$0 ) ;
5827: LD_INT 2100
5829: PPUSH
5830: CALL_OW 67
// end ;
5834: GO 5810
5836: POP
5837: POP
// end ;
5838: GO 5771
5840: POP
5841: POP
// end else
5842: GO 5858
// begin AddComEnterUnit ( sci_list , build ) ;
5844: LD_VAR 0 6
5848: PPUSH
5849: LD_VAR 0 4
5853: PPUSH
5854: CALL_OW 180
// end ; end ;
5858: LD_VAR 0 5
5862: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5863: LD_INT 0
5865: PPUSH
5866: PPUSH
5867: PPUSH
5868: PPUSH
5869: PPUSH
5870: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5871: LD_INT 22
5873: PUSH
5874: LD_VAR 0 1
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 2
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: PUSH
5902: LD_VAR 0 3
5906: LESSEQUAL
5907: IFFALSE 5974
// for i = 1 to vehCount do
5909: LD_ADDR_VAR 0 10
5913: PUSH
5914: DOUBLE
5915: LD_INT 1
5917: DEC
5918: ST_TO_ADDR
5919: LD_VAR 0 3
5923: PUSH
5924: FOR_TO
5925: IFFALSE 5972
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: LD_VAR 0 8
5936: PPUSH
5937: LD_VAR 0 6
5941: PPUSH
5942: LD_VAR 0 7
5946: PPUSH
5947: LD_VAR 0 5
5951: PUSH
5952: LD_INT 1
5954: PPUSH
5955: LD_VAR 0 5
5959: PPUSH
5960: CALL_OW 12
5964: ARRAY
5965: PPUSH
5966: CALL_OW 185
5970: GO 5924
5972: POP
5973: POP
// repeat wait ( 0 0$1 ) ;
5974: LD_INT 35
5976: PPUSH
5977: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5981: LD_INT 22
5983: PUSH
5984: LD_VAR 0 1
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: LD_INT 21
5995: PUSH
5996: LD_INT 2
5998: PUSH
5999: EMPTY
6000: LIST
6001: LIST
6002: PUSH
6003: LD_INT 24
6005: PUSH
6006: LD_INT 250
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PPUSH
6018: CALL_OW 69
6022: PUSH
6023: LD_VAR 0 3
6027: GREATEREQUAL
6028: IFFALSE 5974
// repeat begin wait ( 0 0$1 ) ;
6030: LD_INT 35
6032: PPUSH
6033: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6037: LD_ADDR_VAR 0 10
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_VAR 0 1
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 21
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 24
6066: PUSH
6067: LD_INT 651
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: PPUSH
6079: CALL_OW 69
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6261
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6087: LD_ADDR_VAR 0 13
6091: PUSH
6092: LD_INT 22
6094: PUSH
6095: LD_VAR 0 4
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PPUSH
6104: CALL_OW 69
6108: PPUSH
6109: LD_VAR 0 10
6113: PPUSH
6114: CALL_OW 74
6118: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6119: LD_ADDR_VAR 0 14
6123: PUSH
6124: LD_INT 22
6126: PUSH
6127: LD_VAR 0 4
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 2
6138: PUSH
6139: LD_INT 59
6141: PUSH
6142: EMPTY
6143: LIST
6144: PUSH
6145: LD_INT 21
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 2
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: PPUSH
6183: LD_VAR 0 10
6187: PPUSH
6188: CALL_OW 74
6192: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6193: LD_VAR 0 10
6197: PPUSH
6198: LD_VAR 0 13
6202: PPUSH
6203: CALL_OW 296
6207: PUSH
6208: LD_INT 8
6210: PLUS
6211: PUSH
6212: LD_VAR 0 10
6216: PPUSH
6217: LD_VAR 0 14
6221: PPUSH
6222: CALL_OW 296
6226: LESS
6227: IFFALSE 6245
// begin ComAttackUnit ( i , target1 ) ;
6229: LD_VAR 0 10
6233: PPUSH
6234: LD_VAR 0 13
6238: PPUSH
6239: CALL_OW 115
// end else
6243: GO 6259
// begin ComAttackUnit ( i , target2 ) ;
6245: LD_VAR 0 10
6249: PPUSH
6250: LD_VAR 0 14
6254: PPUSH
6255: CALL_OW 115
// end ; end ;
6259: GO 6084
6261: POP
6262: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6263: LD_INT 22
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 21
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 34
6288: PUSH
6289: LD_INT 51
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: PPUSH
6305: CALL_OW 69
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: IFFALSE 6030
// end ;
6315: LD_VAR 0 9
6319: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6320: LD_INT 0
6322: PPUSH
6323: PPUSH
6324: PPUSH
6325: PPUSH
// enable ;
6326: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6327: LD_ADDR_VAR 0 7
6331: PUSH
6332: LD_VAR 0 3
6336: PPUSH
6337: CALL_OW 435
6341: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6342: LD_ADDR_VAR 0 6
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 34
6361: PUSH
6362: LD_VAR 0 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PPUSH
6375: CALL_OW 69
6379: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6380: LD_VAR 0 6
6384: PUSH
6385: LD_INT 0
6387: GREATER
6388: PUSH
6389: LD_VAR 0 3
6393: PPUSH
6394: CALL_OW 435
6398: AND
6399: PUSH
6400: LD_VAR 0 7
6404: PUSH
6405: LD_INT 0
6407: GREATER
6408: AND
6409: IFFALSE 6458
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6411: LD_VAR 0 6
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: PPUSH
6420: LD_VAR 0 7
6424: PUSH
6425: LD_INT 1
6427: ARRAY
6428: PPUSH
6429: LD_VAR 0 7
6433: PUSH
6434: LD_INT 2
6436: ARRAY
6437: PPUSH
6438: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6442: LD_VAR 0 6
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_INT 100
6453: PPUSH
6454: CALL_OW 240
// end ; clear_crates := false ;
6458: LD_ADDR_VAR 0 5
6462: PUSH
6463: LD_INT 0
6465: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6466: LD_INT 35
6468: PPUSH
6469: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6473: LD_VAR 0 6
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 315
6486: NOT
6487: PUSH
6488: LD_VAR 0 5
6492: OR
6493: IFFALSE 6466
// end ;
6495: LD_VAR 0 4
6499: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6500: LD_INT 0
6502: PPUSH
6503: PPUSH
6504: PPUSH
6505: PPUSH
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6513: LD_ADDR_VAR 0 9
6517: PUSH
6518: LD_INT 22
6520: PUSH
6521: LD_VAR 0 1
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 21
6532: PUSH
6533: LD_INT 2
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 24
6542: PUSH
6543: LD_INT 660
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 58
6555: PUSH
6556: EMPTY
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 3
6565: PUSH
6566: LD_INT 34
6568: PUSH
6569: LD_INT 53
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6592: LD_ADDR_VAR 0 10
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 3
6621: PUSH
6622: LD_INT 24
6624: PUSH
6625: LD_INT 660
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: PPUSH
6641: CALL_OW 69
6645: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6646: LD_ADDR_VAR 0 11
6650: PUSH
6651: LD_VAR 0 2
6655: PPUSH
6656: LD_INT 22
6658: PUSH
6659: LD_VAR 0 1
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 21
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 24
6683: PUSH
6684: LD_INT 1000
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: CALL_OW 70
6704: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6705: LD_ADDR_VAR 0 12
6709: PUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_INT 22
6717: PUSH
6718: LD_VAR 0 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 24
6739: PUSH
6740: LD_INT 1000
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: EMPTY
6751: LIST
6752: PUSH
6753: LD_INT 3
6755: PUSH
6756: LD_INT 34
6758: PUSH
6759: LD_INT 53
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PPUSH
6777: CALL_OW 70
6781: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6782: LD_ADDR_VAR 0 13
6786: PUSH
6787: EMPTY
6788: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6789: LD_ADDR_VAR 0 14
6793: PUSH
6794: LD_VAR 0 2
6798: PPUSH
6799: LD_INT 22
6801: PUSH
6802: LD_VAR 0 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 25
6813: PUSH
6814: LD_INT 3
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PPUSH
6825: CALL_OW 70
6829: ST_TO_ADDR
// if damageVehicle_list > 0 then
6830: LD_VAR 0 10
6834: PUSH
6835: LD_INT 0
6837: GREATER
6838: IFFALSE 6876
// begin for i in damageVehicle_list do
6840: LD_ADDR_VAR 0 7
6844: PUSH
6845: LD_VAR 0 10
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6874
// begin ComMoveXY ( i , repX , repY ) ;
6853: LD_VAR 0 7
6857: PPUSH
6858: LD_VAR 0 3
6862: PPUSH
6863: LD_VAR 0 4
6867: PPUSH
6868: CALL_OW 111
// end ;
6872: GO 6850
6874: POP
6875: POP
// end ; if vehicleNeedRepair_list > 0 then
6876: LD_VAR 0 11
6880: PUSH
6881: LD_INT 0
6883: GREATER
6884: IFFALSE 6971
// begin for i in vehicleNeedRepair_list do
6886: LD_ADDR_VAR 0 7
6890: PUSH
6891: LD_VAR 0 11
6895: PUSH
6896: FOR_IN
6897: IFFALSE 6969
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6899: LD_ADDR_VAR 0 13
6903: PUSH
6904: LD_VAR 0 13
6908: PUSH
6909: LD_VAR 0 7
6913: PPUSH
6914: CALL_OW 313
6918: ADD
6919: ST_TO_ADDR
// for j in mechanicInside_list do
6920: LD_ADDR_VAR 0 8
6924: PUSH
6925: LD_VAR 0 13
6929: PUSH
6930: FOR_IN
6931: IFFALSE 6965
// begin ComExitVehicle ( i ) ;
6933: LD_VAR 0 7
6937: PPUSH
6938: CALL_OW 121
// wait ( 0 0$1 ) ;
6942: LD_INT 35
6944: PPUSH
6945: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6949: LD_VAR 0 7
6953: PPUSH
6954: LD_VAR 0 8
6958: PPUSH
6959: CALL_OW 129
// end ;
6963: GO 6930
6965: POP
6966: POP
// end ;
6967: GO 6896
6969: POP
6970: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6971: LD_VAR 0 12
6975: PUSH
6976: LD_INT 0
6978: GREATER
6979: IFFALSE 7019
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6981: LD_VAR 0 14
6985: PUSH
6986: LD_INT 1
6988: ARRAY
6989: PPUSH
6990: LD_VAR 0 12
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7003: LD_VAR 0 12
7007: PUSH
7008: LD_INT 1
7010: ARRAY
7011: PPUSH
7012: LD_INT 100
7014: PPUSH
7015: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7019: LD_VAR 0 9
7023: PUSH
7024: LD_INT 0
7026: GREATER
7027: IFFALSE 7218
// begin for i in vehicleOK_list do
7029: LD_ADDR_VAR 0 7
7033: PUSH
7034: LD_VAR 0 9
7038: PUSH
7039: FOR_IN
7040: IFFALSE 7216
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_INT 22
7049: PUSH
7050: LD_VAR 0 5
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: PPUSH
7064: LD_VAR 0 7
7068: PPUSH
7069: CALL_OW 74
7073: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7074: LD_ADDR_VAR 0 16
7078: PUSH
7079: LD_INT 22
7081: PUSH
7082: LD_VAR 0 5
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 2
7093: PUSH
7094: LD_INT 59
7096: PUSH
7097: EMPTY
7098: LIST
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 1
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 21
7112: PUSH
7113: LD_INT 2
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: PPUSH
7133: CALL_OW 69
7137: PPUSH
7138: LD_VAR 0 7
7142: PPUSH
7143: CALL_OW 74
7147: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7148: LD_VAR 0 7
7152: PPUSH
7153: LD_VAR 0 15
7157: PPUSH
7158: CALL_OW 296
7162: PUSH
7163: LD_INT 8
7165: PLUS
7166: PUSH
7167: LD_VAR 0 7
7171: PPUSH
7172: LD_VAR 0 16
7176: PPUSH
7177: CALL_OW 296
7181: LESS
7182: IFFALSE 7200
// begin ComAttackUnit ( i , target1 ) ;
7184: LD_VAR 0 7
7188: PPUSH
7189: LD_VAR 0 15
7193: PPUSH
7194: CALL_OW 115
// end else
7198: GO 7214
// begin ComAttackUnit ( i , target2 ) ;
7200: LD_VAR 0 7
7204: PPUSH
7205: LD_VAR 0 16
7209: PPUSH
7210: CALL_OW 115
// end ; end ;
7214: GO 7039
7216: POP
7217: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7218: LD_ADDR_VAR 0 7
7222: PUSH
7223: LD_VAR 0 2
7227: PPUSH
7228: LD_INT 22
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 25
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 70
7258: NOT
7259: PUSH
7260: FOR_IN
7261: IFFALSE 7284
// ComMoveXY ( i , repX , repY ) ;
7263: LD_VAR 0 7
7267: PPUSH
7268: LD_VAR 0 3
7272: PPUSH
7273: LD_VAR 0 4
7277: PPUSH
7278: CALL_OW 111
7282: GO 7260
7284: POP
7285: POP
// end ;
7286: LD_VAR 0 6
7290: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7291: LD_INT 0
7293: PPUSH
7294: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7295: LD_INT 22
7297: PUSH
7298: LD_VAR 0 1
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 25
7309: PUSH
7310: LD_INT 2
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PPUSH
7321: CALL_OW 69
7325: PUSH
7326: LD_INT 0
7328: GREATER
7329: PUSH
7330: LD_INT 22
7332: PUSH
7333: LD_VAR 0 1
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 21
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: LD_INT 24
7357: PUSH
7358: LD_INT 1000
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: PUSH
7379: LD_INT 0
7381: EQUAL
7382: AND
7383: PUSH
7384: LD_VAR 0 2
7388: PUSH
7389: LD_INT 0
7391: GREATER
7392: AND
7393: IFFALSE 7492
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7395: LD_ADDR_VAR 0 4
7399: PUSH
7400: LD_INT 22
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: PUSH
7431: FOR_IN
7432: IFFALSE 7490
// begin AddComExitBuilding ( i ) ;
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7443: LD_VAR 0 4
7447: PPUSH
7448: LD_VAR 0 2
7452: PUSH
7453: LD_INT 1
7455: ARRAY
7456: PPUSH
7457: LD_VAR 0 2
7461: PUSH
7462: LD_INT 2
7464: ARRAY
7465: PPUSH
7466: LD_VAR 0 2
7470: PUSH
7471: LD_INT 3
7473: ARRAY
7474: PPUSH
7475: LD_VAR 0 2
7479: PUSH
7480: LD_INT 4
7482: ARRAY
7483: PPUSH
7484: CALL_OW 205
// end ;
7488: GO 7431
7490: POP
7491: POP
// end ; end ;
7492: LD_VAR 0 3
7496: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7497: LD_INT 0
7499: PPUSH
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7506: LD_ADDR_VAR 0 7
7510: PUSH
7511: LD_INT 22
7513: PUSH
7514: LD_VAR 0 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 25
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 56
7535: PUSH
7536: EMPTY
7537: LIST
7538: PUSH
7539: LD_INT 24
7541: PUSH
7542: LD_INT 700
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PPUSH
7555: CALL_OW 69
7559: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7560: LD_ADDR_VAR 0 8
7564: PUSH
7565: LD_INT 22
7567: PUSH
7568: LD_VAR 0 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 30
7579: PUSH
7580: LD_INT 32
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: LD_INT 58
7589: PUSH
7590: EMPTY
7591: LIST
7592: PUSH
7593: LD_INT 24
7595: PUSH
7596: LD_INT 251
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PPUSH
7609: CALL_OW 69
7613: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7614: LD_ADDR_VAR 0 10
7618: PUSH
7619: LD_INT 22
7621: PUSH
7622: LD_VAR 0 1
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 2
7633: PUSH
7634: LD_INT 25
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 25
7646: PUSH
7647: LD_INT 8
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 25
7656: PUSH
7657: LD_INT 9
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: CALL_OW 313
7693: PUSH
7694: LD_VAR 0 10
7698: DIFF
7699: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7700: LD_VAR 0 8
7704: PUSH
7705: LD_INT 0
7707: EQUAL
7708: PUSH
7709: LD_VAR 0 9
7713: PUSH
7714: LD_INT 0
7716: EQUAL
7717: AND
7718: IFFALSE 7764
// begin for i in soldiers_list do
7720: LD_ADDR_VAR 0 5
7724: PUSH
7725: LD_VAR 0 7
7729: PUSH
7730: FOR_IN
7731: IFFALSE 7760
// begin if IsOK ( build ) then
7733: LD_VAR 0 2
7737: PPUSH
7738: CALL_OW 302
7742: IFFALSE 7758
// ComEnterUnit ( i , build ) ;
7744: LD_VAR 0 5
7748: PPUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: CALL_OW 120
// end ;
7758: GO 7730
7760: POP
7761: POP
// end else
7762: GO 7849
// begin for i = 1 to turretList do
7764: LD_ADDR_VAR 0 5
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_VAR 0 8
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7847
// begin for j = 1 to temp do
7782: LD_ADDR_VAR 0 6
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_VAR 0 9
7796: PUSH
7797: FOR_TO
7798: IFFALSE 7843
// begin ComExitBuilding ( temp [ j ] ) ;
7800: LD_VAR 0 9
7804: PUSH
7805: LD_VAR 0 6
7809: ARRAY
7810: PPUSH
7811: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7815: LD_VAR 0 9
7819: PUSH
7820: LD_VAR 0 6
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 8
7830: PUSH
7831: LD_VAR 0 5
7835: ARRAY
7836: PPUSH
7837: CALL_OW 180
// end ;
7841: GO 7797
7843: POP
7844: POP
// end ;
7845: GO 7779
7847: POP
7848: POP
// end ; end ;
7849: LD_VAR 0 4
7853: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7854: LD_INT 0
7856: PPUSH
7857: PPUSH
7858: PPUSH
7859: PPUSH
7860: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7861: LD_ADDR_VAR 0 6
7865: PUSH
7866: LD_INT 22
7868: PUSH
7869: LD_VAR 0 1
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 2
7880: PUSH
7881: LD_INT 30
7883: PUSH
7884: LD_INT 31
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 30
7893: PUSH
7894: LD_INT 32
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 30
7903: PUSH
7904: LD_INT 33
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 30
7913: PUSH
7914: LD_INT 4
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 30
7923: PUSH
7924: LD_INT 5
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 69
7947: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7948: LD_ADDR_VAR 0 7
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_VAR 0 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 58
7977: PUSH
7978: EMPTY
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7991: LD_VAR 0 6
7995: PUSH
7996: LD_INT 0
7998: GREATER
7999: PUSH
8000: LD_VAR 0 7
8004: PUSH
8005: LD_INT 0
8007: GREATER
8008: AND
8009: IFFALSE 8079
// begin for i in turretsList do
8011: LD_ADDR_VAR 0 4
8015: PUSH
8016: LD_VAR 0 6
8020: PUSH
8021: FOR_IN
8022: IFFALSE 8077
// begin for j in enemyBuildings do
8024: LD_ADDR_VAR 0 5
8028: PUSH
8029: LD_VAR 0 7
8033: PUSH
8034: FOR_IN
8035: IFFALSE 8073
// begin if GetDistUnits ( i , j ) < 20 then
8037: LD_VAR 0 4
8041: PPUSH
8042: LD_VAR 0 5
8046: PPUSH
8047: CALL_OW 296
8051: PUSH
8052: LD_INT 20
8054: LESS
8055: IFFALSE 8071
// begin ComAttackUnit ( i , j ) ;
8057: LD_VAR 0 4
8061: PPUSH
8062: LD_VAR 0 5
8066: PPUSH
8067: CALL_OW 115
// end ; end ;
8071: GO 8034
8073: POP
8074: POP
// end ;
8075: GO 8021
8077: POP
8078: POP
// end ; end ;
8079: LD_VAR 0 3
8083: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8084: LD_INT 0
8086: PPUSH
8087: PPUSH
8088: PPUSH
8089: PPUSH
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
// for i = 1 to medicCount do
8097: LD_ADDR_VAR 0 14
8101: PUSH
8102: DOUBLE
8103: LD_INT 1
8105: DEC
8106: ST_TO_ADDR
8107: LD_VAR 0 7
8111: PUSH
8112: FOR_TO
8113: IFFALSE 8195
// begin uc_side = side ;
8115: LD_ADDR_OWVAR 20
8119: PUSH
8120: LD_VAR 0 1
8124: ST_TO_ADDR
// uc_nation = nation ;
8125: LD_ADDR_OWVAR 21
8129: PUSH
8130: LD_VAR 0 2
8134: ST_TO_ADDR
// hc_name =  ;
8135: LD_ADDR_OWVAR 26
8139: PUSH
8140: LD_STRING 
8142: ST_TO_ADDR
// hc_gallery =  ;
8143: LD_ADDR_OWVAR 33
8147: PUSH
8148: LD_STRING 
8150: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8151: LD_INT 0
8153: PPUSH
8154: LD_INT 4
8156: PPUSH
8157: LD_VAR 0 8
8161: PPUSH
8162: CALL_OW 380
// un = CreateHuman ;
8166: LD_ADDR_VAR 0 16
8170: PUSH
8171: CALL_OW 44
8175: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8176: LD_VAR 0 16
8180: PPUSH
8181: LD_VAR 0 9
8185: PPUSH
8186: LD_INT 0
8188: PPUSH
8189: CALL_OW 49
// end ;
8193: GO 8112
8195: POP
8196: POP
// for i = 1 to soldierCount do
8197: LD_ADDR_VAR 0 14
8201: PUSH
8202: DOUBLE
8203: LD_INT 1
8205: DEC
8206: ST_TO_ADDR
8207: LD_VAR 0 3
8211: PUSH
8212: FOR_TO
8213: IFFALSE 8295
// begin uc_side = side ;
8215: LD_ADDR_OWVAR 20
8219: PUSH
8220: LD_VAR 0 1
8224: ST_TO_ADDR
// uc_nation = nation ;
8225: LD_ADDR_OWVAR 21
8229: PUSH
8230: LD_VAR 0 2
8234: ST_TO_ADDR
// hc_name =  ;
8235: LD_ADDR_OWVAR 26
8239: PUSH
8240: LD_STRING 
8242: ST_TO_ADDR
// hc_gallery =  ;
8243: LD_ADDR_OWVAR 33
8247: PUSH
8248: LD_STRING 
8250: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8251: LD_INT 0
8253: PPUSH
8254: LD_INT 1
8256: PPUSH
8257: LD_VAR 0 8
8261: PPUSH
8262: CALL_OW 380
// un = CreateHuman ;
8266: LD_ADDR_VAR 0 16
8270: PUSH
8271: CALL_OW 44
8275: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8276: LD_VAR 0 16
8280: PPUSH
8281: LD_VAR 0 9
8285: PPUSH
8286: LD_INT 0
8288: PPUSH
8289: CALL_OW 49
// end ;
8293: GO 8212
8295: POP
8296: POP
// for i = 1 to sniperCount do
8297: LD_ADDR_VAR 0 14
8301: PUSH
8302: DOUBLE
8303: LD_INT 1
8305: DEC
8306: ST_TO_ADDR
8307: LD_VAR 0 4
8311: PUSH
8312: FOR_TO
8313: IFFALSE 8395
// begin uc_side = side ;
8315: LD_ADDR_OWVAR 20
8319: PUSH
8320: LD_VAR 0 1
8324: ST_TO_ADDR
// uc_nation = nation ;
8325: LD_ADDR_OWVAR 21
8329: PUSH
8330: LD_VAR 0 2
8334: ST_TO_ADDR
// hc_name =  ;
8335: LD_ADDR_OWVAR 26
8339: PUSH
8340: LD_STRING 
8342: ST_TO_ADDR
// hc_gallery =  ;
8343: LD_ADDR_OWVAR 33
8347: PUSH
8348: LD_STRING 
8350: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8351: LD_INT 0
8353: PPUSH
8354: LD_INT 5
8356: PPUSH
8357: LD_VAR 0 8
8361: PPUSH
8362: CALL_OW 380
// un = CreateHuman ;
8366: LD_ADDR_VAR 0 16
8370: PUSH
8371: CALL_OW 44
8375: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8376: LD_VAR 0 16
8380: PPUSH
8381: LD_VAR 0 9
8385: PPUSH
8386: LD_INT 0
8388: PPUSH
8389: CALL_OW 49
// end ;
8393: GO 8312
8395: POP
8396: POP
// for i = 1 to bazookCount do
8397: LD_ADDR_VAR 0 14
8401: PUSH
8402: DOUBLE
8403: LD_INT 1
8405: DEC
8406: ST_TO_ADDR
8407: LD_VAR 0 5
8411: PUSH
8412: FOR_TO
8413: IFFALSE 8495
// begin uc_side = side ;
8415: LD_ADDR_OWVAR 20
8419: PUSH
8420: LD_VAR 0 1
8424: ST_TO_ADDR
// uc_nation = nation ;
8425: LD_ADDR_OWVAR 21
8429: PUSH
8430: LD_VAR 0 2
8434: ST_TO_ADDR
// hc_name =  ;
8435: LD_ADDR_OWVAR 26
8439: PUSH
8440: LD_STRING 
8442: ST_TO_ADDR
// hc_gallery =  ;
8443: LD_ADDR_OWVAR 33
8447: PUSH
8448: LD_STRING 
8450: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8451: LD_INT 0
8453: PPUSH
8454: LD_INT 9
8456: PPUSH
8457: LD_VAR 0 8
8461: PPUSH
8462: CALL_OW 380
// un = CreateHuman ;
8466: LD_ADDR_VAR 0 16
8470: PUSH
8471: CALL_OW 44
8475: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8476: LD_VAR 0 16
8480: PPUSH
8481: LD_VAR 0 9
8485: PPUSH
8486: LD_INT 0
8488: PPUSH
8489: CALL_OW 49
// end ;
8493: GO 8412
8495: POP
8496: POP
// for i = 1 to mortalCount do
8497: LD_ADDR_VAR 0 14
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_VAR 0 6
8511: PUSH
8512: FOR_TO
8513: IFFALSE 8595
// begin uc_side = side ;
8515: LD_ADDR_OWVAR 20
8519: PUSH
8520: LD_VAR 0 1
8524: ST_TO_ADDR
// uc_nation = nation ;
8525: LD_ADDR_OWVAR 21
8529: PUSH
8530: LD_VAR 0 2
8534: ST_TO_ADDR
// hc_name =  ;
8535: LD_ADDR_OWVAR 26
8539: PUSH
8540: LD_STRING 
8542: ST_TO_ADDR
// hc_gallery =  ;
8543: LD_ADDR_OWVAR 33
8547: PUSH
8548: LD_STRING 
8550: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8551: LD_INT 0
8553: PPUSH
8554: LD_INT 8
8556: PPUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: CALL_OW 380
// un = CreateHuman ;
8566: LD_ADDR_VAR 0 16
8570: PUSH
8571: CALL_OW 44
8575: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8576: LD_VAR 0 16
8580: PPUSH
8581: LD_VAR 0 9
8585: PPUSH
8586: LD_INT 0
8588: PPUSH
8589: CALL_OW 49
// end ;
8593: GO 8512
8595: POP
8596: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8597: LD_ADDR_VAR 0 19
8601: PUSH
8602: LD_INT 22
8604: PUSH
8605: LD_VAR 0 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 25
8629: PUSH
8630: LD_INT 5
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 25
8639: PUSH
8640: LD_INT 8
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 25
8649: PUSH
8650: LD_INT 9
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8673: LD_ADDR_VAR 0 18
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_VAR 0 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 25
8692: PUSH
8693: LD_INT 4
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 69
8708: ST_TO_ADDR
// for i in medic_list do
8709: LD_ADDR_VAR 0 14
8713: PUSH
8714: LD_VAR 0 18
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8738
// ComMoveToArea ( i , healArea ) ;
8722: LD_VAR 0 14
8726: PPUSH
8727: LD_VAR 0 10
8731: PPUSH
8732: CALL_OW 113
8736: GO 8719
8738: POP
8739: POP
// if strategy = 1 then
8740: LD_VAR 0 12
8744: PUSH
8745: LD_INT 1
8747: EQUAL
8748: IFFALSE 9453
// begin repeat wait ( 0 0$3 ) ;
8750: LD_INT 105
8752: PPUSH
8753: CALL_OW 67
// for i in soldiersOK_list do
8757: LD_ADDR_VAR 0 14
8761: PUSH
8762: LD_VAR 0 19
8766: PUSH
8767: FOR_IN
8768: IFFALSE 8802
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8770: LD_VAR 0 14
8774: PPUSH
8775: LD_INT 80
8777: PPUSH
8778: LD_INT 109
8780: PPUSH
8781: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8785: LD_VAR 0 14
8789: PPUSH
8790: LD_INT 39
8792: PPUSH
8793: LD_INT 49
8795: PPUSH
8796: CALL_OW 174
// end ;
8800: GO 8767
8802: POP
8803: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8804: LD_INT 15
8806: PPUSH
8807: LD_INT 22
8809: PUSH
8810: LD_VAR 0 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 70
8823: PUSH
8824: LD_INT 0
8826: GREATER
8827: IFFALSE 8750
// repeat wait ( 0 0$1 ) ;
8829: LD_INT 35
8831: PPUSH
8832: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8836: LD_ADDR_VAR 0 17
8840: PUSH
8841: LD_INT 22
8843: PUSH
8844: LD_VAR 0 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 1
8855: PUSH
8856: LD_INT 3
8858: PUSH
8859: LD_INT 24
8861: PUSH
8862: LD_INT 550
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 24
8875: PUSH
8876: LD_INT 250
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8897: LD_ADDR_VAR 0 19
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 25
8919: PUSH
8920: LD_INT 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 25
8929: PUSH
8930: LD_INT 5
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 25
8939: PUSH
8940: LD_INT 8
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 25
8949: PUSH
8950: LD_INT 9
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 24
8966: PUSH
8967: LD_INT 1000
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 69
8983: ST_TO_ADDR
// if medicCount > 0 then
8984: LD_VAR 0 7
8988: PUSH
8989: LD_INT 0
8991: GREATER
8992: IFFALSE 9066
// begin if damageUnit_list > 0 then
8994: LD_VAR 0 17
8998: PUSH
8999: LD_INT 0
9001: GREATER
9002: IFFALSE 9066
// begin for i in damageUnit_list do
9004: LD_ADDR_VAR 0 14
9008: PUSH
9009: LD_VAR 0 17
9013: PUSH
9014: FOR_IN
9015: IFFALSE 9064
// begin ComMoveToArea ( i , healArea ) ;
9017: LD_VAR 0 14
9021: PPUSH
9022: LD_VAR 0 10
9026: PPUSH
9027: CALL_OW 113
// for j in medic_list do
9031: LD_ADDR_VAR 0 15
9035: PUSH
9036: LD_VAR 0 18
9040: PUSH
9041: FOR_IN
9042: IFFALSE 9060
// AddComHeal ( j , i ) ;
9044: LD_VAR 0 15
9048: PPUSH
9049: LD_VAR 0 14
9053: PPUSH
9054: CALL_OW 188
9058: GO 9041
9060: POP
9061: POP
// end ;
9062: GO 9014
9064: POP
9065: POP
// end ; end ; for i in soldiersOK_list do
9066: LD_ADDR_VAR 0 14
9070: PUSH
9071: LD_VAR 0 19
9075: PUSH
9076: FOR_IN
9077: IFFALSE 9253
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9079: LD_ADDR_VAR 0 22
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_VAR 0 11
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PPUSH
9096: CALL_OW 69
9100: PPUSH
9101: LD_VAR 0 14
9105: PPUSH
9106: CALL_OW 74
9110: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9111: LD_ADDR_VAR 0 23
9115: PUSH
9116: LD_INT 22
9118: PUSH
9119: LD_VAR 0 11
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: LD_INT 2
9130: PUSH
9131: LD_INT 59
9133: PUSH
9134: EMPTY
9135: LIST
9136: PUSH
9137: LD_INT 21
9139: PUSH
9140: LD_INT 1
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 21
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: PPUSH
9170: CALL_OW 69
9174: PPUSH
9175: LD_VAR 0 14
9179: PPUSH
9180: CALL_OW 74
9184: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9185: LD_VAR 0 14
9189: PPUSH
9190: LD_VAR 0 22
9194: PPUSH
9195: CALL_OW 296
9199: PUSH
9200: LD_INT 8
9202: PLUS
9203: PUSH
9204: LD_VAR 0 14
9208: PPUSH
9209: LD_VAR 0 23
9213: PPUSH
9214: CALL_OW 296
9218: LESS
9219: IFFALSE 9237
// begin ComAttackUnit ( i , target1 ) ;
9221: LD_VAR 0 14
9225: PPUSH
9226: LD_VAR 0 22
9230: PPUSH
9231: CALL_OW 115
// end else
9235: GO 9251
// begin ComAttackUnit ( i , target2 ) ;
9237: LD_VAR 0 14
9241: PPUSH
9242: LD_VAR 0 23
9246: PPUSH
9247: CALL_OW 115
// end ; end ;
9251: GO 9076
9253: POP
9254: POP
// for i in soldiersOK_list do
9255: LD_ADDR_VAR 0 14
9259: PUSH
9260: LD_VAR 0 19
9264: PUSH
9265: FOR_IN
9266: IFFALSE 9442
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9268: LD_ADDR_VAR 0 22
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_VAR 0 11
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PPUSH
9285: CALL_OW 69
9289: PPUSH
9290: LD_VAR 0 14
9294: PPUSH
9295: CALL_OW 74
9299: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9300: LD_ADDR_VAR 0 23
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_VAR 0 11
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 2
9319: PUSH
9320: LD_INT 59
9322: PUSH
9323: EMPTY
9324: LIST
9325: PUSH
9326: LD_INT 21
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 21
9338: PUSH
9339: LD_INT 2
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: PPUSH
9359: CALL_OW 69
9363: PPUSH
9364: LD_VAR 0 14
9368: PPUSH
9369: CALL_OW 74
9373: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9374: LD_VAR 0 14
9378: PPUSH
9379: LD_VAR 0 22
9383: PPUSH
9384: CALL_OW 296
9388: PUSH
9389: LD_INT 8
9391: PLUS
9392: PUSH
9393: LD_VAR 0 14
9397: PPUSH
9398: LD_VAR 0 23
9402: PPUSH
9403: CALL_OW 296
9407: LESS
9408: IFFALSE 9426
// begin ComAttackUnit ( i , target1 ) ;
9410: LD_VAR 0 14
9414: PPUSH
9415: LD_VAR 0 22
9419: PPUSH
9420: CALL_OW 115
// end else
9424: GO 9440
// begin ComAttackUnit ( i , target2 ) ;
9426: LD_VAR 0 14
9430: PPUSH
9431: LD_VAR 0 23
9435: PPUSH
9436: CALL_OW 115
// end ; end ;
9440: GO 9265
9442: POP
9443: POP
// until soldiersOK_list = [ ] ;
9444: LD_VAR 0 19
9448: PUSH
9449: EMPTY
9450: EQUAL
9451: IFFALSE 8829
// end ; if strategy = 2 then
9453: LD_VAR 0 12
9457: PUSH
9458: LD_INT 2
9460: EQUAL
9461: IFFALSE 10166
// begin repeat wait ( 0 0$1 ) ;
9463: LD_INT 35
9465: PPUSH
9466: CALL_OW 67
// for i in soldiersOK_list do
9470: LD_ADDR_VAR 0 14
9474: PUSH
9475: LD_VAR 0 19
9479: PUSH
9480: FOR_IN
9481: IFFALSE 9515
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9483: LD_VAR 0 14
9487: PPUSH
9488: LD_INT 117
9490: PPUSH
9491: LD_INT 97
9493: PPUSH
9494: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9498: LD_VAR 0 14
9502: PPUSH
9503: LD_INT 94
9505: PPUSH
9506: LD_INT 50
9508: PPUSH
9509: CALL_OW 174
// end ;
9513: GO 9480
9515: POP
9516: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9517: LD_INT 16
9519: PPUSH
9520: LD_INT 22
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PPUSH
9532: CALL_OW 70
9536: PUSH
9537: LD_INT 0
9539: GREATER
9540: IFFALSE 9463
// repeat wait ( 0 0$3 ) ;
9542: LD_INT 105
9544: PPUSH
9545: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9549: LD_ADDR_VAR 0 17
9553: PUSH
9554: LD_INT 22
9556: PUSH
9557: LD_VAR 0 1
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 1
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: LD_INT 24
9574: PUSH
9575: LD_INT 550
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 250
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 69
9609: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9610: LD_ADDR_VAR 0 19
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_VAR 0 1
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 1
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 25
9642: PUSH
9643: LD_INT 5
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 25
9652: PUSH
9653: LD_INT 8
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 9
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: LD_INT 24
9679: PUSH
9680: LD_INT 1000
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: ST_TO_ADDR
// if medicCount > 0 then
9697: LD_VAR 0 7
9701: PUSH
9702: LD_INT 0
9704: GREATER
9705: IFFALSE 9779
// begin if damageUnit_list > 0 then
9707: LD_VAR 0 17
9711: PUSH
9712: LD_INT 0
9714: GREATER
9715: IFFALSE 9779
// begin for i in damageUnit_list do
9717: LD_ADDR_VAR 0 14
9721: PUSH
9722: LD_VAR 0 17
9726: PUSH
9727: FOR_IN
9728: IFFALSE 9777
// begin ComMoveToArea ( i , healArea ) ;
9730: LD_VAR 0 14
9734: PPUSH
9735: LD_VAR 0 10
9739: PPUSH
9740: CALL_OW 113
// for j in medic_list do
9744: LD_ADDR_VAR 0 15
9748: PUSH
9749: LD_VAR 0 18
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9773
// AddComHeal ( j , i ) ;
9757: LD_VAR 0 15
9761: PPUSH
9762: LD_VAR 0 14
9766: PPUSH
9767: CALL_OW 188
9771: GO 9754
9773: POP
9774: POP
// end ;
9775: GO 9727
9777: POP
9778: POP
// end ; end ; for i in soldiersOK_list do
9779: LD_ADDR_VAR 0 14
9783: PUSH
9784: LD_VAR 0 19
9788: PUSH
9789: FOR_IN
9790: IFFALSE 9966
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9792: LD_ADDR_VAR 0 22
9796: PUSH
9797: LD_INT 22
9799: PUSH
9800: LD_VAR 0 11
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: PPUSH
9814: LD_VAR 0 14
9818: PPUSH
9819: CALL_OW 74
9823: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9824: LD_ADDR_VAR 0 23
9828: PUSH
9829: LD_INT 22
9831: PUSH
9832: LD_VAR 0 11
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 59
9846: PUSH
9847: EMPTY
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 1
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 21
9862: PUSH
9863: LD_INT 2
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: EMPTY
9881: LIST
9882: PPUSH
9883: CALL_OW 69
9887: PPUSH
9888: LD_VAR 0 14
9892: PPUSH
9893: CALL_OW 74
9897: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9898: LD_VAR 0 14
9902: PPUSH
9903: LD_VAR 0 22
9907: PPUSH
9908: CALL_OW 296
9912: PUSH
9913: LD_INT 8
9915: PLUS
9916: PUSH
9917: LD_VAR 0 14
9921: PPUSH
9922: LD_VAR 0 23
9926: PPUSH
9927: CALL_OW 296
9931: LESS
9932: IFFALSE 9950
// begin ComAttackUnit ( i , target1 ) ;
9934: LD_VAR 0 14
9938: PPUSH
9939: LD_VAR 0 22
9943: PPUSH
9944: CALL_OW 115
// end else
9948: GO 9964
// begin ComAttackUnit ( i , target2 ) ;
9950: LD_VAR 0 14
9954: PPUSH
9955: LD_VAR 0 23
9959: PPUSH
9960: CALL_OW 115
// end ; end ;
9964: GO 9789
9966: POP
9967: POP
// for i in soldiersOK_list do
9968: LD_ADDR_VAR 0 14
9972: PUSH
9973: LD_VAR 0 19
9977: PUSH
9978: FOR_IN
9979: IFFALSE 10155
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9981: LD_ADDR_VAR 0 22
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_VAR 0 11
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: PPUSH
10003: LD_VAR 0 14
10007: PPUSH
10008: CALL_OW 74
10012: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10013: LD_ADDR_VAR 0 23
10017: PUSH
10018: LD_INT 22
10020: PUSH
10021: LD_VAR 0 11
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 59
10035: PUSH
10036: EMPTY
10037: LIST
10038: PUSH
10039: LD_INT 21
10041: PUSH
10042: LD_INT 1
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PPUSH
10077: LD_VAR 0 14
10081: PPUSH
10082: CALL_OW 74
10086: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10087: LD_VAR 0 14
10091: PPUSH
10092: LD_VAR 0 22
10096: PPUSH
10097: CALL_OW 296
10101: PUSH
10102: LD_INT 8
10104: PLUS
10105: PUSH
10106: LD_VAR 0 14
10110: PPUSH
10111: LD_VAR 0 23
10115: PPUSH
10116: CALL_OW 296
10120: LESS
10121: IFFALSE 10139
// begin ComAttackUnit ( i , target1 ) ;
10123: LD_VAR 0 14
10127: PPUSH
10128: LD_VAR 0 22
10132: PPUSH
10133: CALL_OW 115
// end else
10137: GO 10153
// begin ComAttackUnit ( i , target2 ) ;
10139: LD_VAR 0 14
10143: PPUSH
10144: LD_VAR 0 23
10148: PPUSH
10149: CALL_OW 115
// end ; end ;
10153: GO 9978
10155: POP
10156: POP
// until soldiersOK_list = [ ] ;
10157: LD_VAR 0 19
10161: PUSH
10162: EMPTY
10163: EQUAL
10164: IFFALSE 9542
// end ; end ; end_of_file
10166: LD_VAR 0 13
10170: RET
// every 0 0$01 do
10171: GO 10173
10173: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10174: LD_INT 22
10176: PUSH
10177: LD_INT 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 25
10186: PUSH
10187: LD_INT 2
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: PUSH
10203: LD_INT 0
10205: EQUAL
10206: IFFALSE 10220
// SetClass ( JMM , 2 ) ;
10208: LD_EXP 1
10212: PPUSH
10213: LD_INT 2
10215: PPUSH
10216: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10220: LD_STRING M1
10222: PPUSH
10223: CALL_OW 337
// case difficulty of 1 :
10227: LD_OWVAR 67
10231: PUSH
10232: LD_INT 1
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10250
10240: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10241: LD_STRING M1-1
10243: PPUSH
10244: CALL_OW 337
10248: GO 10287
10250: LD_INT 2
10252: DOUBLE
10253: EQUAL
10254: IFTRUE 10258
10256: GO 10268
10258: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10259: LD_STRING M1-2
10261: PPUSH
10262: CALL_OW 337
10266: GO 10287
10268: LD_INT 3
10270: DOUBLE
10271: EQUAL
10272: IFTRUE 10276
10274: GO 10286
10276: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10277: LD_STRING M1-3
10279: PPUSH
10280: CALL_OW 337
10284: GO 10287
10286: POP
// ChangeMissionObjectives ( M1cont ) ;
10287: LD_STRING M1cont
10289: PPUSH
10290: CALL_OW 337
// SaveForQuickRestart ;
10294: CALL_OW 22
// end ;
10298: END
// every 0 0$1 do
10299: GO 10301
10301: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10302: LD_INT 350
10304: PPUSH
10305: LD_INT 875
10307: PPUSH
10308: CALL_OW 12
10312: PPUSH
10313: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10317: LD_INT 5
10319: PPUSH
10320: LD_INT 4
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 55
// wait ( 0 0$15 ) ;
10330: LD_INT 525
10332: PPUSH
10333: CALL_OW 67
// if IsOk ( Lisa ) then
10337: LD_EXP 2
10341: PPUSH
10342: CALL_OW 302
10346: IFFALSE 10362
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10348: LD_EXP 2
10352: PPUSH
10353: LD_STRING DR0-Lisa-1
10355: PPUSH
10356: CALL_OW 88
// end else
10360: GO 10512
// begin if IsOK ( Cyrus ) then
10362: LD_EXP 4
10366: PPUSH
10367: CALL_OW 302
10371: IFFALSE 10387
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10373: LD_EXP 4
10377: PPUSH
10378: LD_STRING DR0-Cyrus-1
10380: PPUSH
10381: CALL_OW 88
// end else
10385: GO 10512
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10387: LD_INT 22
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 21
10399: PUSH
10400: LD_INT 1
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 25
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 25
10422: PUSH
10423: LD_INT 2
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 25
10432: PUSH
10433: LD_INT 3
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 4
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 26
10459: PUSH
10460: LD_INT 1
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PUSH
10481: LD_EXP 1
10485: PUSH
10486: LD_EXP 8
10490: PUSH
10491: LD_EXP 5
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: DIFF
10501: PPUSH
10502: LD_STRING DR0-Sol1-1
10504: PPUSH
10505: LD_STRING DR0-Sol1-1
10507: PPUSH
10508: CALL 4585 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10512: LD_INT 22
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 21
10524: PUSH
10525: LD_INT 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 25
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 25
10567: PUSH
10568: LD_INT 4
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 26
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_EXP 1
10610: PUSH
10611: LD_EXP 8
10615: PUSH
10616: LD_EXP 5
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: DIFF
10626: PPUSH
10627: LD_STRING DR0-Sol2-1
10629: PPUSH
10630: LD_STRING DR0-Sol2-1
10632: PPUSH
10633: CALL 4585 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10637: LD_EXP 1
10641: PPUSH
10642: LD_STRING DR0-JMM-1
10644: PPUSH
10645: CALL_OW 88
// end ;
10649: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10650: LD_EXP 5
10654: PPUSH
10655: CALL_OW 302
10659: PUSH
10660: LD_INT 22
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 25
10672: PUSH
10673: LD_INT 16
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL_OW 69
10688: PUSH
10689: LD_INT 0
10691: GREATER
10692: AND
10693: IFFALSE 10971
10695: GO 10697
10697: DISABLE
// begin DialogueOn ;
10698: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10702: LD_EXP 5
10706: PPUSH
10707: LD_STRING D10-Frank-1
10709: PPUSH
10710: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10714: LD_INT 22
10716: PUSH
10717: LD_INT 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 21
10726: PUSH
10727: LD_INT 1
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: LD_INT 2
10736: PUSH
10737: LD_INT 25
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 3
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 4
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: PPUSH
10789: CALL_OW 69
10793: PUSH
10794: LD_EXP 1
10798: PUSH
10799: LD_EXP 5
10803: PUSH
10804: LD_EXP 2
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: DIFF
10814: PPUSH
10815: LD_STRING D10-Sol1-1
10817: PPUSH
10818: LD_STRING D10-FSol1-1
10820: PPUSH
10821: CALL 4585 0 3
// Say ( Frank , D10-Frank-2 ) ;
10825: LD_EXP 5
10829: PPUSH
10830: LD_STRING D10-Frank-2
10832: PPUSH
10833: CALL_OW 88
// if IsOK ( Lisa ) then
10837: LD_EXP 2
10841: PPUSH
10842: CALL_OW 302
10846: IFFALSE 10862
// begin Say ( Lisa , D10-Lisa-2 ) ;
10848: LD_EXP 2
10852: PPUSH
10853: LD_STRING D10-Lisa-2
10855: PPUSH
10856: CALL_OW 88
// end else
10860: GO 10967
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10862: LD_INT 22
10864: PUSH
10865: LD_INT 1
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 21
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: LD_INT 25
10887: PUSH
10888: LD_INT 1
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 25
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 25
10907: PUSH
10908: LD_INT 3
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 25
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: PUSH
10942: LD_EXP 1
10946: PUSH
10947: LD_EXP 5
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: DIFF
10956: PPUSH
10957: LD_STRING D10-Sol1-2
10959: PPUSH
10960: LD_STRING D10-FSol1-2
10962: PPUSH
10963: CALL 4585 0 3
// end ; DialogueOff ;
10967: CALL_OW 7
// end ;
10971: END
// every 10 10$30 do
10972: GO 10974
10974: DISABLE
// begin HarrisonSupport ;
10975: CALL 1987 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10979: LD_EXP 16
10983: PPUSH
10984: CALL_OW 310
10988: PPUSH
10989: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10993: LD_EXP 16
10997: PPUSH
10998: LD_STRING DEng-Eng1-1
11000: PPUSH
11001: CALL_OW 88
// wait ( 1 1$0 ) ;
11005: LD_INT 2100
11007: PPUSH
11008: CALL_OW 67
// DialogueOn ;
11012: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11016: LD_EXP 13
11020: PPUSH
11021: LD_STRING DRem-Har-1
11023: PPUSH
11024: CALL_OW 94
// if contactWithRussian = 1 then
11028: LD_EXP 21
11032: PUSH
11033: LD_INT 1
11035: EQUAL
11036: IFFALSE 11052
// begin Say ( JMM , DRem-JMM-1 ) ;
11038: LD_EXP 1
11042: PPUSH
11043: LD_STRING DRem-JMM-1
11045: PPUSH
11046: CALL_OW 88
// end else
11050: GO 11064
// begin Say ( JMM , DRem-JMM-1a ) ;
11052: LD_EXP 1
11056: PPUSH
11057: LD_STRING DRem-JMM-1a
11059: PPUSH
11060: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11064: LD_EXP 13
11068: PPUSH
11069: LD_STRING DRem-Har-2
11071: PPUSH
11072: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11076: LD_STRING DenisInDelta
11078: PPUSH
11079: LD_INT 0
11081: PPUSH
11082: CALL_OW 30
11086: PUSH
11087: LD_INT 1
11089: EQUAL
11090: IFFALSE 11106
// begin Say ( JMM , DRem-JMM-2 ) ;
11092: LD_EXP 1
11096: PPUSH
11097: LD_STRING DRem-JMM-2
11099: PPUSH
11100: CALL_OW 88
// end else
11104: GO 11118
// begin Say ( JMM , DRem-JMM-2a ) ;
11106: LD_EXP 1
11110: PPUSH
11111: LD_STRING DRem-JMM-2a
11113: PPUSH
11114: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11118: LD_EXP 13
11122: PPUSH
11123: LD_STRING DRem-Har-3
11125: PPUSH
11126: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11130: LD_EXP 1
11134: PPUSH
11135: LD_STRING DRem-JMM-3
11137: PPUSH
11138: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11142: LD_EXP 13
11146: PPUSH
11147: LD_STRING DRem-Har-4
11149: PPUSH
11150: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11154: LD_STRING DenisInDelta
11156: PPUSH
11157: LD_INT 0
11159: PPUSH
11160: CALL_OW 30
11164: PUSH
11165: LD_INT 1
11167: EQUAL
11168: IFFALSE 11196
// begin Say ( JMM , DRem-JMM-4 ) ;
11170: LD_EXP 1
11174: PPUSH
11175: LD_STRING DRem-JMM-4
11177: PPUSH
11178: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11182: LD_EXP 13
11186: PPUSH
11187: LD_STRING DRem-Har-5
11189: PPUSH
11190: CALL_OW 94
// end else
11194: GO 11229
// begin SetRestrict ( 36 , 1 , true ) ;
11196: LD_INT 36
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11209: LD_INT 15
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11222: LD_STRING MR
11224: PPUSH
11225: CALL_OW 337
// end ; DialogueOff ;
11229: CALL_OW 7
// end ;
11233: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11234: LD_STRING DenisInDelta
11236: PPUSH
11237: LD_INT 0
11239: PPUSH
11240: CALL_OW 30
11244: PUSH
11245: LD_INT 1
11247: EQUAL
11248: IFFALSE 11379
11250: GO 11252
11252: DISABLE
// begin PrepareDenis ;
11253: CALL 1908 0 0
// CenterNowOnUnits ( Denis ) ;
11257: LD_EXP 9
11261: PPUSH
11262: CALL_OW 87
// DialogueOn ;
11266: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11270: LD_EXP 9
11274: PPUSH
11275: LD_STRING DDen-Den-1
11277: PPUSH
11278: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11282: LD_EXP 1
11286: PPUSH
11287: LD_STRING DDen-JMM-1
11289: PPUSH
11290: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11294: LD_EXP 9
11298: PPUSH
11299: LD_STRING DDen-Den-2
11301: PPUSH
11302: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11306: LD_EXP 1
11310: PPUSH
11311: LD_STRING DDen-JMM-2
11313: PPUSH
11314: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11318: LD_EXP 9
11322: PPUSH
11323: LD_STRING DDen-Den-3
11325: PPUSH
11326: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11330: LD_EXP 1
11334: PPUSH
11335: LD_STRING DDen-JMM-3
11337: PPUSH
11338: CALL_OW 88
// DialogueOff ;
11342: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11346: LD_INT 36
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11359: LD_INT 15
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11372: LD_STRING MR
11374: PPUSH
11375: CALL_OW 337
// end ;
11379: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11380: CALL 11425 0 0
11384: PUSH
11385: LD_EXP 9
11389: PPUSH
11390: CALL_OW 302
11394: AND
11395: IFFALSE 11424
11397: GO 11399
11399: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11400: LD_EXP 9
11404: PPUSH
11405: LD_STRING DR1-Den-1
11407: PPUSH
11408: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11412: LD_EXP 1
11416: PPUSH
11417: LD_STRING DR1-JMM-1
11419: PPUSH
11420: CALL_OW 88
// end ;
11424: END
// function CheckOptoLab ; var i ; begin
11425: LD_INT 0
11427: PPUSH
11428: PPUSH
// result = false ;
11429: LD_ADDR_VAR 0 1
11433: PUSH
11434: LD_INT 0
11436: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11437: LD_ADDR_VAR 0 2
11441: PUSH
11442: LD_INT 22
11444: PUSH
11445: LD_INT 1
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: LD_INT 30
11457: PUSH
11458: LD_INT 7
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 30
11467: PUSH
11468: LD_INT 8
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PPUSH
11484: CALL_OW 69
11488: PUSH
11489: FOR_IN
11490: IFFALSE 11542
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11492: LD_VAR 0 2
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 268
11504: PUSH
11505: LD_INT 15
11507: EQUAL
11508: PUSH
11509: LD_VAR 0 2
11513: PPUSH
11514: LD_INT 2
11516: PPUSH
11517: CALL_OW 268
11521: PUSH
11522: LD_INT 15
11524: EQUAL
11525: OR
11526: IFFALSE 11538
// begin result = true ;
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: LD_INT 1
11535: ST_TO_ADDR
// break ;
11536: GO 11542
// end ; break ;
11538: GO 11542
// end ;
11540: GO 11489
11542: POP
11543: POP
// end ;
11544: LD_VAR 0 1
11548: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11549: LD_INT 15
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 321
11559: PUSH
11560: LD_INT 2
11562: EQUAL
11563: PUSH
11564: LD_EXP 9
11568: PPUSH
11569: CALL_OW 302
11573: AND
11574: IFFALSE 11806
11576: GO 11578
11578: DISABLE
// begin DialogueOn ;
11579: CALL_OW 6
// if IsOK ( Denis ) then
11583: LD_EXP 9
11587: PPUSH
11588: CALL_OW 302
11592: IFFALSE 11608
// begin Say ( Denis , DR2-Den-1 ) ;
11594: LD_EXP 9
11598: PPUSH
11599: LD_STRING DR2-Den-1
11601: PPUSH
11602: CALL_OW 88
// end else
11606: GO 11667
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11608: LD_INT 22
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 21
11620: PUSH
11621: LD_INT 1
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 25
11630: PUSH
11631: LD_INT 4
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: PUSH
11648: LD_EXP 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: DIFF
11656: PPUSH
11657: LD_STRING DR2-Sci1-1
11659: PPUSH
11660: LD_STRING DR2-FSci1-1
11662: PPUSH
11663: CALL 4585 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11667: LD_EXP 1
11671: PPUSH
11672: LD_STRING DR2-JMM-1
11674: PPUSH
11675: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11679: LD_INT 22
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 21
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 2
11701: PUSH
11702: LD_INT 25
11704: PUSH
11705: LD_INT 1
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 25
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 25
11724: PUSH
11725: LD_INT 3
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 4
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 69
11758: PUSH
11759: LD_EXP 1
11763: PUSH
11764: LD_EXP 9
11768: PUSH
11769: LD_EXP 8
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: DIFF
11779: PPUSH
11780: LD_STRING DR2-Sol1-1
11782: PPUSH
11783: LD_STRING DR2-Sol1-11
11785: PPUSH
11786: CALL 4585 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11790: LD_EXP 1
11794: PPUSH
11795: LD_STRING DR2-JMM-2
11797: PPUSH
11798: CALL_OW 88
// DialogueOff ;
11802: CALL_OW 7
// end ;
11806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11807: LD_INT 22
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 36
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PPUSH
11831: CALL_OW 69
11835: PUSH
11836: LD_INT 0
11838: EQUAL
11839: PUSH
11840: LD_INT 22
11842: PUSH
11843: LD_INT 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 33
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: LIST
11874: PPUSH
11875: CALL_OW 69
11879: PUSH
11880: LD_INT 0
11882: GREATER
11883: AND
11884: PUSH
11885: LD_EXP 22
11889: PUSH
11890: LD_INT 0
11892: EQUAL
11893: AND
11894: IFFALSE 11966
11896: GO 11898
11898: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11899: LD_INT 22
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 25
11921: PUSH
11922: LD_INT 3
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: PPUSH
11934: CALL_OW 69
11938: PUSH
11939: LD_EXP 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: DIFF
11947: PPUSH
11948: LD_STRING D3a-Mech1-1
11950: PPUSH
11951: LD_STRING D3a-Mech1-1
11953: PPUSH
11954: CALL 4585 0 3
// firstTower = 2 ;
11958: LD_ADDR_EXP 22
11962: PUSH
11963: LD_INT 2
11965: ST_TO_ADDR
// end ;
11966: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11967: LD_INT 22
11969: PUSH
11970: LD_INT 3
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 21
11979: PUSH
11980: LD_INT 3
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PPUSH
11991: CALL_OW 69
11995: PUSH
11996: LD_INT 0
11998: EQUAL
11999: IFFALSE 12114
12001: GO 12003
12003: DISABLE
12004: LD_INT 0
12006: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12007: LD_ADDR_VAR 0 1
12011: PUSH
12012: LD_INT 22
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 21
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 2
12034: PUSH
12035: LD_INT 25
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 25
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 25
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 4
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: PPUSH
12087: CALL_OW 69
12091: PUSH
12092: FOR_IN
12093: IFFALSE 12112
// AddExperience ( i , 1 , 10000 ) ;
12095: LD_VAR 0 1
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: LD_INT 10000
12105: PPUSH
12106: CALL_OW 492
12110: GO 12092
12112: POP
12113: POP
// end ;
12114: PPOPN 1
12116: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12117: LD_INT 22
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 30
12129: PUSH
12130: LD_INT 36
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: PUSH
12146: LD_INT 0
12148: GREATER
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 21
12162: PUSH
12163: LD_INT 2
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 33
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 69
12189: PUSH
12190: LD_INT 0
12192: GREATER
12193: AND
12194: PUSH
12195: CALL 12777 0 0
12199: AND
12200: IFFALSE 12774
12202: GO 12204
12204: DISABLE
12205: LD_INT 0
12207: PPUSH
12208: PPUSH
12209: PPUSH
12210: PPUSH
12211: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12212: LD_ADDR_VAR 0 3
12216: PUSH
12217: LD_INT 22
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 30
12229: PUSH
12230: LD_INT 36
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 69
12245: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12246: LD_ADDR_VAR 0 4
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 21
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 33
12273: PUSH
12274: LD_INT 2
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12291: LD_ADDR_VAR 0 5
12295: PUSH
12296: EMPTY
12297: ST_TO_ADDR
// for i in tmpControlTowers do
12298: LD_ADDR_VAR 0 1
12302: PUSH
12303: LD_VAR 0 3
12307: PUSH
12308: FOR_IN
12309: IFFALSE 12772
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12311: LD_EXP 1
12315: PPUSH
12316: CALL_OW 310
12320: PUSH
12321: LD_VAR 0 1
12325: EQUAL
12326: PUSH
12327: LD_EXP 1
12331: PPUSH
12332: CALL_OW 257
12336: PUSH
12337: LD_INT 3
12339: EQUAL
12340: AND
12341: IFFALSE 12471
// begin InGameOn ;
12343: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12347: LD_VAR 0 4
12351: PUSH
12352: LD_INT 1
12354: ARRAY
12355: PPUSH
12356: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12360: LD_EXP 1
12364: PPUSH
12365: LD_STRING D4a-JMM-1
12367: PPUSH
12368: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12372: LD_VAR 0 4
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: PPUSH
12381: LD_EXP 1
12385: PPUSH
12386: CALL_OW 53
// wait ( 0 0$1 ) ;
12390: LD_INT 35
12392: PPUSH
12393: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12397: LD_VAR 0 4
12401: PUSH
12402: LD_INT 1
12404: ARRAY
12405: PPUSH
12406: LD_VAR 0 4
12410: PUSH
12411: LD_INT 1
12413: ARRAY
12414: PPUSH
12415: CALL_OW 250
12419: PUSH
12420: LD_INT 3
12422: PLUS
12423: PPUSH
12424: LD_VAR 0 4
12428: PUSH
12429: LD_INT 1
12431: ARRAY
12432: PPUSH
12433: CALL_OW 251
12437: PUSH
12438: LD_INT 2
12440: MINUS
12441: PPUSH
12442: CALL_OW 111
// wait ( 0 0$2 ) ;
12446: LD_INT 70
12448: PPUSH
12449: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12453: LD_EXP 1
12457: PPUSH
12458: LD_STRING D4b-JMM-1
12460: PPUSH
12461: CALL_OW 88
// InGameOff ;
12465: CALL_OW 9
// end else
12469: GO 12770
// begin InGameOn ;
12471: CALL_OW 8
// for j in UnitsInside ( i ) do
12475: LD_ADDR_VAR 0 2
12479: PUSH
12480: LD_VAR 0 1
12484: PPUSH
12485: CALL_OW 313
12489: PUSH
12490: FOR_IN
12491: IFFALSE 12526
// if GetClass ( j ) = 3 then
12493: LD_VAR 0 2
12497: PPUSH
12498: CALL_OW 257
12502: PUSH
12503: LD_INT 3
12505: EQUAL
12506: IFFALSE 12524
// tmpMechanicInside = tmpMechanicInside ^ j ;
12508: LD_ADDR_VAR 0 5
12512: PUSH
12513: LD_VAR 0 5
12517: PUSH
12518: LD_VAR 0 2
12522: ADD
12523: ST_TO_ADDR
12524: GO 12490
12526: POP
12527: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12528: LD_VAR 0 5
12532: PUSH
12533: LD_INT 1
12535: ARRAY
12536: PPUSH
12537: CALL_OW 258
12541: PUSH
12542: LD_INT 1
12544: EQUAL
12545: IFFALSE 12563
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12547: LD_VAR 0 5
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: PPUSH
12556: LD_STRING D4a-Mech1-1
12558: PPUSH
12559: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12563: LD_VAR 0 5
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PPUSH
12572: CALL_OW 258
12576: PUSH
12577: LD_INT 2
12579: EQUAL
12580: IFFALSE 12598
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12582: LD_VAR 0 5
12586: PUSH
12587: LD_INT 1
12589: ARRAY
12590: PPUSH
12591: LD_STRING D4a-FMech1-1
12593: PPUSH
12594: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12598: LD_VAR 0 4
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12611: LD_VAR 0 4
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_VAR 0 5
12624: PUSH
12625: LD_INT 1
12627: ARRAY
12628: PPUSH
12629: CALL_OW 53
// wait ( 0 0$1 ) ;
12633: LD_INT 35
12635: PPUSH
12636: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12640: LD_VAR 0 4
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: LD_VAR 0 4
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PPUSH
12658: CALL_OW 250
12662: PUSH
12663: LD_INT 3
12665: PLUS
12666: PPUSH
12667: LD_VAR 0 4
12671: PUSH
12672: LD_INT 1
12674: ARRAY
12675: PPUSH
12676: CALL_OW 251
12680: PUSH
12681: LD_INT 2
12683: MINUS
12684: PPUSH
12685: CALL_OW 111
// wait ( 0 0$2 ) ;
12689: LD_INT 70
12691: PPUSH
12692: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12696: LD_VAR 0 5
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: CALL_OW 258
12709: PUSH
12710: LD_INT 1
12712: EQUAL
12713: IFFALSE 12731
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12715: LD_VAR 0 5
12719: PUSH
12720: LD_INT 1
12722: ARRAY
12723: PPUSH
12724: LD_STRING D4b-Mech1-1
12726: PPUSH
12727: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12731: LD_VAR 0 5
12735: PUSH
12736: LD_INT 1
12738: ARRAY
12739: PPUSH
12740: CALL_OW 258
12744: PUSH
12745: LD_INT 2
12747: EQUAL
12748: IFFALSE 12766
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12750: LD_VAR 0 5
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: PPUSH
12759: LD_STRING D4b-FMech1-1
12761: PPUSH
12762: CALL_OW 88
// InGameOff ;
12766: CALL_OW 9
// end ; end ;
12770: GO 12308
12772: POP
12773: POP
// end ;
12774: PPOPN 5
12776: END
// function CheckMehInside ; var i , j ; begin
12777: LD_INT 0
12779: PPUSH
12780: PPUSH
12781: PPUSH
// result = false ;
12782: LD_ADDR_VAR 0 1
12786: PUSH
12787: LD_INT 0
12789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12790: LD_ADDR_VAR 0 2
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 30
12807: PUSH
12808: LD_INT 36
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: PUSH
12824: FOR_IN
12825: IFFALSE 12876
// begin for j in UnitsInside ( i ) do
12827: LD_ADDR_VAR 0 3
12831: PUSH
12832: LD_VAR 0 2
12836: PPUSH
12837: CALL_OW 313
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12872
// begin if GetClass ( j ) = 3 then
12845: LD_VAR 0 3
12849: PPUSH
12850: CALL_OW 257
12854: PUSH
12855: LD_INT 3
12857: EQUAL
12858: IFFALSE 12870
// begin result = true ;
12860: LD_ADDR_VAR 0 1
12864: PUSH
12865: LD_INT 1
12867: ST_TO_ADDR
// break ;
12868: GO 12872
// end ; end ;
12870: GO 12842
12872: POP
12873: POP
// end ;
12874: GO 12824
12876: POP
12877: POP
// end ;
12878: LD_VAR 0 1
12882: RET
// every 25 25$0 do
12883: GO 12885
12885: DISABLE
// begin PrepareKurt ;
12886: CALL 15803 0 0
// end ;
12890: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12891: LD_EXP 18
12895: PPUSH
12896: LD_INT 9
12898: PPUSH
12899: CALL_OW 308
12903: PUSH
12904: LD_EXP 20
12908: PUSH
12909: LD_INT 1
12911: EQUAL
12912: AND
12913: IFFALSE 12987
12915: GO 12917
12917: DISABLE
// begin RemoveUnit ( Kurt ) ;
12918: LD_EXP 18
12922: PPUSH
12923: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12927: LD_EXP 18
12931: PPUSH
12932: LD_STRING Kurt
12934: PPUSH
12935: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12939: LD_INT 1
12941: PPUSH
12942: LD_INT 2
12944: PPUSH
12945: CALL_OW 81
12949: PUSH
12950: LD_INT 0
12952: EQUAL
12953: IFFALSE 12963
// KurtStatus = 1 ;
12955: LD_ADDR_EXP 19
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12963: LD_INT 1
12965: PPUSH
12966: LD_INT 2
12968: PPUSH
12969: CALL_OW 81
12973: PUSH
12974: LD_INT 2
12976: EQUAL
12977: IFFALSE 12987
// KurtStatus = 2 ;
12979: LD_ADDR_EXP 19
12983: PUSH
12984: LD_INT 2
12986: ST_TO_ADDR
// end ;
12987: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12988: LD_INT 1
12990: PPUSH
12991: LD_INT 2
12993: PPUSH
12994: CALL_OW 81
12998: PUSH
12999: LD_INT 2
13001: EQUAL
13002: PUSH
13003: LD_EXP 18
13007: PPUSH
13008: CALL_OW 302
13012: AND
13013: IFFALSE 13038
13015: GO 13017
13017: DISABLE
// begin DialogueOn ;
13018: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13022: LD_EXP 18
13026: PPUSH
13027: LD_STRING D2a-Kurt-1
13029: PPUSH
13030: CALL_OW 88
// DialogueOff ;
13034: CALL_OW 7
// end ;
13038: END
// every 35 35$0 do
13039: GO 13041
13041: DISABLE
// begin PrepareJoan ;
13042: CALL 2383 0 0
// wait ( 1 1$0 ) ;
13046: LD_INT 2100
13048: PPUSH
13049: CALL_OW 67
// if IsOK ( Lisa ) then
13053: LD_EXP 2
13057: PPUSH
13058: CALL_OW 302
13062: IFFALSE 13192
// begin DialogueOn ;
13064: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13068: LD_EXP 2
13072: PPUSH
13073: LD_STRING D7-Lisa-1
13075: PPUSH
13076: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13080: LD_EXP 1
13084: PPUSH
13085: LD_STRING D7-JMM-1
13087: PPUSH
13088: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13092: LD_EXP 2
13096: PPUSH
13097: LD_STRING D7-Lisa-2
13099: PPUSH
13100: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13104: LD_EXP 1
13108: PPUSH
13109: LD_STRING D7-JMM-2
13111: PPUSH
13112: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13116: LD_EXP 2
13120: PPUSH
13121: LD_STRING D7-Lisa-3
13123: PPUSH
13124: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13128: LD_EXP 1
13132: PPUSH
13133: LD_STRING D7-JMM-3
13135: PPUSH
13136: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13140: LD_EXP 2
13144: PPUSH
13145: LD_STRING D7-Lisa-4
13147: PPUSH
13148: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13152: LD_EXP 1
13156: PPUSH
13157: LD_STRING D7-JMM-4
13159: PPUSH
13160: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13164: LD_EXP 1
13168: PPUSH
13169: LD_STRING D7-JMM-4a
13171: PPUSH
13172: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13176: LD_EXP 2
13180: PPUSH
13181: LD_STRING D7-Lisa-5
13183: PPUSH
13184: CALL_OW 88
// DialogueOff ;
13188: CALL_OW 7
// end ; end ;
13192: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13193: LD_INT 22
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 33
13205: PUSH
13206: LD_INT 2
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PPUSH
13217: CALL_OW 69
13221: PUSH
13222: LD_INT 2
13224: GREATEREQUAL
13225: IFFALSE 13245
13227: GO 13229
13229: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13230: LD_STRING MRa
13232: PPUSH
13233: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13237: LD_ADDR_EXP 27
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// end ;
13245: END
// every 4 4$0 do
13246: GO 13248
13248: DISABLE
// PrepareRandoms ( 1 ) ;
13249: LD_INT 1
13251: PPUSH
13252: CALL 3280 0 1
13256: END
// every 10 10$0 do
13257: GO 13259
13259: DISABLE
// PrepareRandoms ( 2 ) ;
13260: LD_INT 2
13262: PPUSH
13263: CALL 3280 0 1
13267: END
// every 28 28$0 do
13268: GO 13270
13270: DISABLE
// PrepareRandoms ( 4 ) ;
13271: LD_INT 4
13273: PPUSH
13274: CALL 3280 0 1
13278: END
// every 32 32$0 do
13279: GO 13281
13281: DISABLE
// PrepareRandoms ( 5 ) ;
13282: LD_INT 5
13284: PPUSH
13285: CALL 3280 0 1
13289: END
// every 35 35$30 do
13290: GO 13292
13292: DISABLE
// PrepareRandoms ( 6 ) ;
13293: LD_INT 6
13295: PPUSH
13296: CALL 3280 0 1
13300: END
// every 37 37$20 do
13301: GO 13303
13303: DISABLE
// PrepareRandoms ( 7 ) ;
13304: LD_INT 7
13306: PPUSH
13307: CALL 3280 0 1
13311: END
// every 5 5$20 do
13312: GO 13314
13314: DISABLE
// begin DialogueOn ;
13315: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13319: LD_EXP 10
13323: PPUSH
13324: LD_STRING D12a-Sci-1
13326: PPUSH
13327: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13331: LD_EXP 1
13335: PPUSH
13336: LD_STRING D12a-JMM-1
13338: PPUSH
13339: CALL_OW 88
// DialogueOff ;
13343: CALL_OW 7
// cratesStatus = 1 ;
13347: LD_ADDR_EXP 34
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// end ;
13355: END
// every 13 13$0 do
13356: GO 13358
13358: DISABLE
// begin DialogueOn ;
13359: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13363: LD_EXP 10
13367: PPUSH
13368: LD_STRING D12b-Sci-1
13370: PPUSH
13371: CALL_OW 94
// DialogueOff ;
13375: CALL_OW 7
// cratesStatus = 2 ;
13379: LD_ADDR_EXP 34
13383: PUSH
13384: LD_INT 2
13386: ST_TO_ADDR
// end ;
13387: END
// every 32 32$0 do
13388: GO 13390
13390: DISABLE
// begin DialogueOn ;
13391: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13395: LD_EXP 10
13399: PPUSH
13400: LD_STRING  D12c-Sci-1
13402: PPUSH
13403: CALL_OW 94
// DialogueOff ;
13407: CALL_OW 7
// wait ( 3 3$0 ) ;
13411: LD_INT 6300
13413: PPUSH
13414: CALL_OW 67
// DialogueOn ;
13418: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13422: LD_EXP 10
13426: PPUSH
13427: LD_STRING  D12d-Sci-1
13429: PPUSH
13430: CALL_OW 94
// DialogueOff ;
13434: CALL_OW 7
// cratesStatus = 1 ;
13438: LD_ADDR_EXP 34
13442: PUSH
13443: LD_INT 1
13445: ST_TO_ADDR
// end ;
13446: END
// every 42 42$0 do
13447: GO 13449
13449: DISABLE
// begin DialogueOn ;
13450: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13454: LD_EXP 10
13458: PPUSH
13459: LD_STRING D12e-Sci-1
13461: PPUSH
13462: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13466: LD_EXP 1
13470: PPUSH
13471: LD_STRING D12e-JMM-1
13473: PPUSH
13474: CALL_OW 88
// DialogueOff ;
13478: CALL_OW 7
// cratesStatus = 2 ;
13482: LD_ADDR_EXP 34
13486: PUSH
13487: LD_INT 2
13489: ST_TO_ADDR
// end ;
13490: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13491: LD_INT 22
13493: PUSH
13494: LD_INT 6
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 21
13503: PUSH
13504: LD_INT 2
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 34
13513: PUSH
13514: LD_INT 51
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 69
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: IFFALSE 13617
13536: GO 13538
13538: DISABLE
13539: LD_INT 0
13541: PPUSH
// begin enable ;
13542: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13543: LD_ADDR_VAR 0 1
13547: PUSH
13548: LD_INT 22
13550: PUSH
13551: LD_INT 6
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 2
13560: PUSH
13561: LD_INT 21
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 2
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 69
13594: PUSH
13595: FOR_IN
13596: IFFALSE 13615
// ComAgressiveMove ( i , 138 , 168 ) ;
13598: LD_VAR 0 1
13602: PPUSH
13603: LD_INT 138
13605: PPUSH
13606: LD_INT 168
13608: PPUSH
13609: CALL_OW 114
13613: GO 13595
13615: POP
13616: POP
// end ;
13617: PPOPN 1
13619: END
// every 0 0$1 do var i ;
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
// begin enable ;
13626: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13627: LD_ADDR_VAR 0 1
13631: PUSH
13632: LD_INT 5
13634: PPUSH
13635: LD_INT 2
13637: PUSH
13638: LD_INT 22
13640: PUSH
13641: LD_INT 3
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_INT 6
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: PPUSH
13666: CALL_OW 70
13670: PUSH
13671: FOR_IN
13672: IFFALSE 13736
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13674: LD_INT 5
13676: PPUSH
13677: LD_INT 22
13679: PUSH
13680: LD_INT 6
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 34
13689: PUSH
13690: LD_INT 51
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 70
13705: PUSH
13706: LD_INT 0
13708: GREATER
13709: IFFALSE 13725
// sendedConvoys = sendedConvoys + 1 ;
13711: LD_ADDR_EXP 35
13715: PUSH
13716: LD_EXP 35
13720: PUSH
13721: LD_INT 1
13723: PLUS
13724: ST_TO_ADDR
// RemoveUnit ( i ) ;
13725: LD_VAR 0 1
13729: PPUSH
13730: CALL_OW 64
// end ;
13734: GO 13671
13736: POP
13737: POP
// end ; end_of_file
13738: PPOPN 1
13740: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 1
13748: EQUAL
13749: PUSH
13750: LD_VAR 0 2
13754: PUSH
13755: LD_INT 3
13757: EQUAL
13758: AND
13759: IFFALSE 13769
// contactWithRussian = 1 ;
13761: LD_ADDR_EXP 21
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// end ;
13769: PPOPN 2
13771: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13772: LD_VAR 0 1
13776: PPUSH
13777: CALL_OW 266
13781: PUSH
13782: LD_INT 36
13784: EQUAL
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 255
13795: PUSH
13796: LD_INT 1
13798: EQUAL
13799: AND
13800: PUSH
13801: LD_INT 22
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 21
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 33
13823: PUSH
13824: LD_INT 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: PPUSH
13836: CALL_OW 69
13840: PUSH
13841: LD_INT 0
13843: EQUAL
13844: AND
13845: PUSH
13846: LD_EXP 22
13850: PUSH
13851: LD_INT 0
13853: EQUAL
13854: AND
13855: IFFALSE 13924
// begin firstTower = 1 ;
13857: LD_ADDR_EXP 22
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13865: LD_INT 22
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 1
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: LD_INT 25
13887: PUSH
13888: LD_INT 3
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: PPUSH
13900: CALL_OW 69
13904: PUSH
13905: LD_EXP 1
13909: PUSH
13910: EMPTY
13911: LIST
13912: DIFF
13913: PPUSH
13914: LD_STRING D3b-Mech1-1
13916: PPUSH
13917: LD_STRING D3b-Mech1-1
13919: PPUSH
13920: CALL 4585 0 3
// end ; if GetSide ( building ) = 3 then
13924: LD_VAR 0 1
13928: PPUSH
13929: CALL_OW 255
13933: PUSH
13934: LD_INT 3
13936: EQUAL
13937: IFFALSE 14011
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13939: LD_ADDR_EXP 29
13943: PUSH
13944: LD_EXP 29
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 3
13956: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13957: LD_ADDR_EXP 29
13961: PUSH
13962: LD_EXP 29
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 3
13974: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13975: LD_ADDR_EXP 29
13979: PUSH
13980: LD_EXP 29
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: CALL_OW 3
13992: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13993: LD_ADDR_EXP 29
13997: PUSH
13998: LD_EXP 29
14002: PPUSH
14003: LD_INT 1
14005: PPUSH
14006: CALL_OW 3
14010: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 255
14020: PUSH
14021: LD_INT 3
14023: EQUAL
14024: PUSH
14025: LD_VAR 0 1
14029: PPUSH
14030: CALL_OW 266
14034: PUSH
14035: LD_INT 0
14037: EQUAL
14038: PUSH
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 266
14048: PUSH
14049: LD_INT 2
14051: EQUAL
14052: OR
14053: PUSH
14054: LD_VAR 0 1
14058: PPUSH
14059: CALL_OW 266
14063: PUSH
14064: LD_INT 4
14066: EQUAL
14067: OR
14068: PUSH
14069: EMPTY
14070: LIST
14071: AND
14072: IFFALSE 14083
// ComUpgrade ( building ) ;
14074: LD_VAR 0 1
14078: PPUSH
14079: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 255
14092: PUSH
14093: LD_INT 3
14095: EQUAL
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 266
14106: PUSH
14107: LD_INT 32
14109: EQUAL
14110: AND
14111: IFFALSE 14152
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_INT 42
14120: PUSH
14121: LD_INT 43
14123: PUSH
14124: LD_INT 44
14126: PUSH
14127: LD_INT 46
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 1
14138: PPUSH
14139: LD_INT 4
14141: PPUSH
14142: CALL_OW 12
14146: ARRAY
14147: PPUSH
14148: CALL_OW 208
// end ; end ;
14152: PPOPN 1
14154: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 255
14164: PUSH
14165: LD_INT 1
14167: EQUAL
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 247
14178: PUSH
14179: LD_INT 1
14181: EQUAL
14182: AND
14183: PUSH
14184: LD_VAR 0 1
14188: PPUSH
14189: CALL_OW 257
14193: PUSH
14194: LD_INT 1
14196: EQUAL
14197: PUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 257
14207: PUSH
14208: LD_INT 2
14210: EQUAL
14211: OR
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 257
14222: PUSH
14223: LD_INT 3
14225: EQUAL
14226: OR
14227: PUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 257
14237: PUSH
14238: LD_INT 4
14240: EQUAL
14241: OR
14242: PUSH
14243: EMPTY
14244: LIST
14245: AND
14246: IFFALSE 14262
// unitLost = unitLost + 1 ;
14248: LD_ADDR_EXP 28
14252: PUSH
14253: LD_EXP 28
14257: PUSH
14258: LD_INT 1
14260: PLUS
14261: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 255
14271: PUSH
14272: LD_INT 3
14274: EQUAL
14275: PUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 247
14285: PUSH
14286: LD_INT 3
14288: EQUAL
14289: AND
14290: IFFALSE 14982
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL_OW 266
14301: PUSH
14302: LD_INT 31
14304: EQUAL
14305: PUSH
14306: LD_VAR 0 1
14310: PPUSH
14311: CALL_OW 266
14315: PUSH
14316: LD_INT 32
14318: EQUAL
14319: OR
14320: PUSH
14321: LD_VAR 0 1
14325: PPUSH
14326: CALL_OW 266
14330: PUSH
14331: LD_INT 36
14333: EQUAL
14334: OR
14335: PUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 266
14345: PUSH
14346: LD_INT 0
14348: EQUAL
14349: OR
14350: PUSH
14351: LD_VAR 0 1
14355: PPUSH
14356: CALL_OW 266
14360: PUSH
14361: LD_INT 24
14363: EQUAL
14364: OR
14365: PUSH
14366: LD_VAR 0 1
14370: PPUSH
14371: CALL_OW 266
14375: PUSH
14376: LD_INT 17
14378: EQUAL
14379: OR
14380: PUSH
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 266
14390: PUSH
14391: LD_INT 25
14393: EQUAL
14394: OR
14395: PUSH
14396: LD_VAR 0 1
14400: PPUSH
14401: CALL_OW 266
14405: PUSH
14406: LD_INT 19
14408: EQUAL
14409: OR
14410: PUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 266
14420: PUSH
14421: LD_INT 20
14423: EQUAL
14424: OR
14425: PUSH
14426: LD_VAR 0 1
14430: PPUSH
14431: CALL_OW 266
14435: PUSH
14436: LD_INT 18
14438: EQUAL
14439: OR
14440: PUSH
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 266
14450: PUSH
14451: LD_INT 21
14453: EQUAL
14454: OR
14455: PUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 266
14465: PUSH
14466: LD_INT 23
14468: EQUAL
14469: OR
14470: PUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: CALL_OW 266
14480: PUSH
14481: LD_INT 16
14483: EQUAL
14484: OR
14485: PUSH
14486: LD_VAR 0 1
14490: PPUSH
14491: CALL_OW 266
14495: PUSH
14496: LD_INT 6
14498: EQUAL
14499: OR
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 266
14510: PUSH
14511: LD_INT 29
14513: EQUAL
14514: OR
14515: PUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 266
14525: PUSH
14526: LD_INT 26
14528: EQUAL
14529: OR
14530: PUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 266
14540: PUSH
14541: LD_INT 30
14543: EQUAL
14544: OR
14545: PUSH
14546: LD_VAR 0 1
14550: PPUSH
14551: CALL_OW 266
14555: PUSH
14556: LD_INT 28
14558: EQUAL
14559: OR
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 266
14570: PUSH
14571: LD_INT 27
14573: EQUAL
14574: OR
14575: PUSH
14576: LD_VAR 0 1
14580: PPUSH
14581: CALL_OW 266
14585: PUSH
14586: LD_INT 33
14588: EQUAL
14589: OR
14590: PUSH
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 266
14600: PUSH
14601: LD_INT 2
14603: EQUAL
14604: OR
14605: PUSH
14606: LD_VAR 0 1
14610: PPUSH
14611: CALL_OW 266
14615: PUSH
14616: LD_INT 4
14618: EQUAL
14619: OR
14620: IFFALSE 14706
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14622: LD_ADDR_EXP 29
14626: PUSH
14627: LD_EXP 29
14631: PUSH
14632: LD_VAR 0 1
14636: PPUSH
14637: CALL_OW 266
14641: ADD
14642: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14643: LD_ADDR_EXP 29
14647: PUSH
14648: LD_EXP 29
14652: PUSH
14653: LD_VAR 0 1
14657: PPUSH
14658: CALL_OW 250
14662: ADD
14663: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14664: LD_ADDR_EXP 29
14668: PUSH
14669: LD_EXP 29
14673: PUSH
14674: LD_VAR 0 1
14678: PPUSH
14679: CALL_OW 251
14683: ADD
14684: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14685: LD_ADDR_EXP 29
14689: PUSH
14690: LD_EXP 29
14694: PUSH
14695: LD_VAR 0 1
14699: PPUSH
14700: CALL_OW 254
14704: ADD
14705: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14706: LD_VAR 0 1
14710: PPUSH
14711: CALL_OW 266
14715: PUSH
14716: LD_INT 1
14718: EQUAL
14719: IFFALSE 14798
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14721: LD_ADDR_EXP 29
14725: PUSH
14726: LD_EXP 29
14730: PUSH
14731: LD_INT 0
14733: ADD
14734: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14735: LD_ADDR_EXP 29
14739: PUSH
14740: LD_EXP 29
14744: PUSH
14745: LD_VAR 0 1
14749: PPUSH
14750: CALL_OW 250
14754: ADD
14755: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14756: LD_ADDR_EXP 29
14760: PUSH
14761: LD_EXP 29
14765: PUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 251
14775: ADD
14776: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14777: LD_ADDR_EXP 29
14781: PUSH
14782: LD_EXP 29
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 254
14796: ADD
14797: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14798: LD_VAR 0 1
14802: PPUSH
14803: CALL_OW 266
14807: PUSH
14808: LD_INT 3
14810: EQUAL
14811: IFFALSE 14890
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14813: LD_ADDR_EXP 29
14817: PUSH
14818: LD_EXP 29
14822: PUSH
14823: LD_INT 2
14825: ADD
14826: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14827: LD_ADDR_EXP 29
14831: PUSH
14832: LD_EXP 29
14836: PUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 250
14846: ADD
14847: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14848: LD_ADDR_EXP 29
14852: PUSH
14853: LD_EXP 29
14857: PUSH
14858: LD_VAR 0 1
14862: PPUSH
14863: CALL_OW 251
14867: ADD
14868: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14869: LD_ADDR_EXP 29
14873: PUSH
14874: LD_EXP 29
14878: PUSH
14879: LD_VAR 0 1
14883: PPUSH
14884: CALL_OW 254
14888: ADD
14889: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14890: LD_VAR 0 1
14894: PPUSH
14895: CALL_OW 266
14899: PUSH
14900: LD_INT 5
14902: EQUAL
14903: IFFALSE 14982
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14905: LD_ADDR_EXP 29
14909: PUSH
14910: LD_EXP 29
14914: PUSH
14915: LD_INT 4
14917: ADD
14918: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14919: LD_ADDR_EXP 29
14923: PUSH
14924: LD_EXP 29
14928: PUSH
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 250
14938: ADD
14939: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14940: LD_ADDR_EXP 29
14944: PUSH
14945: LD_EXP 29
14949: PUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 251
14959: ADD
14960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14961: LD_ADDR_EXP 29
14965: PUSH
14966: LD_EXP 29
14970: PUSH
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL_OW 254
14980: ADD
14981: ST_TO_ADDR
// end ; end ; end ;
14982: PPOPN 1
14984: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14985: LD_INT 0
14987: PPUSH
14988: PPUSH
14989: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14990: LD_VAR 0 1
14994: PPUSH
14995: CALL_OW 264
14999: PUSH
15000: LD_INT 51
15002: EQUAL
15003: PUSH
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 255
15013: PUSH
15014: LD_INT 3
15016: EQUAL
15017: AND
15018: IFFALSE 15080
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15020: LD_ADDR_VAR 0 5
15024: PUSH
15025: LD_INT 2
15027: PPUSH
15028: CALL_OW 274
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 275
15040: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15041: LD_INT 2
15043: PPUSH
15044: CALL_OW 274
15048: PPUSH
15049: LD_INT 1
15051: PPUSH
15052: LD_VAR 0 5
15056: PUSH
15057: LD_INT 100
15059: MINUS
15060: PPUSH
15061: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_INT 1
15072: PPUSH
15073: LD_INT 100
15075: PPUSH
15076: CALL_OW 291
// end ; if building = rufabsupp then
15080: LD_VAR 0 2
15084: PUSH
15085: LD_INT 17
15087: EQUAL
15088: IFFALSE 15102
// SetSide ( vehicle , 6 ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_INT 6
15097: PPUSH
15098: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15102: LD_VAR 0 2
15106: PPUSH
15107: CALL_OW 255
15111: PUSH
15112: LD_INT 3
15114: EQUAL
15115: PUSH
15116: LD_VAR 0 2
15120: PPUSH
15121: CALL_OW 302
15125: AND
15126: IFFALSE 15196
// begin uc_side = 3 ;
15128: LD_ADDR_OWVAR 20
15132: PUSH
15133: LD_INT 3
15135: ST_TO_ADDR
// uc_nation = 3 ;
15136: LD_ADDR_OWVAR 21
15140: PUSH
15141: LD_INT 3
15143: ST_TO_ADDR
// hc_gallery :=  ;
15144: LD_ADDR_OWVAR 33
15148: PUSH
15149: LD_STRING 
15151: ST_TO_ADDR
// hc_name :=  ;
15152: LD_ADDR_OWVAR 26
15156: PUSH
15157: LD_STRING 
15159: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15160: LD_INT 0
15162: PPUSH
15163: LD_EXP 32
15167: PPUSH
15168: LD_EXP 33
15172: PPUSH
15173: CALL_OW 12
15177: PPUSH
15178: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15182: CALL_OW 44
15186: PPUSH
15187: LD_VAR 0 2
15191: PPUSH
15192: CALL_OW 52
// end ; end ;
15196: PPOPN 5
15198: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 255
15208: PUSH
15209: LD_INT 3
15211: EQUAL
15212: IFFALSE 15228
// tamedApemans = tamedApemans + 1 ;
15214: LD_ADDR_EXP 30
15218: PUSH
15219: LD_EXP 30
15223: PUSH
15224: LD_INT 1
15226: PLUS
15227: ST_TO_ADDR
// end ; end_of_file
15228: PPOPN 2
15230: END
// every 0 0$30 trigger cratesStatus = 1 do
15231: LD_EXP 34
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: IFFALSE 15303
15241: GO 15243
15243: DISABLE
// begin enable ;
15244: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15245: LD_INT 350
15247: PUSH
15248: LD_INT 1050
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 1
15257: PPUSH
15258: LD_INT 2
15260: PPUSH
15261: CALL_OW 12
15265: ARRAY
15266: PPUSH
15267: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15271: LD_INT 4
15273: PUSH
15274: LD_INT 5
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 1
15283: PPUSH
15284: LD_INT 2
15286: PPUSH
15287: CALL_OW 12
15291: ARRAY
15292: PPUSH
15293: LD_INT 7
15295: PPUSH
15296: LD_INT 1
15298: PPUSH
15299: CALL_OW 55
// end ;
15303: END
// every 1 1$0 trigger cratesStatus = 2 do
15304: LD_EXP 34
15308: PUSH
15309: LD_INT 2
15311: EQUAL
15312: IFFALSE 15376
15314: GO 15316
15316: DISABLE
// begin enable ;
15317: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15318: LD_INT 3150
15320: PUSH
15321: LD_INT 4550
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 1
15330: PPUSH
15331: LD_INT 2
15333: PPUSH
15334: CALL_OW 12
15338: ARRAY
15339: PPUSH
15340: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15344: LD_INT 2
15346: PUSH
15347: LD_INT 5
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 1
15356: PPUSH
15357: LD_INT 2
15359: PPUSH
15360: CALL_OW 12
15364: ARRAY
15365: PPUSH
15366: LD_INT 8
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 55
// end ;
15376: END
// every 0 0$30 + 0 0$10 do
15377: GO 15379
15379: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15380: LD_INT 4
15382: PUSH
15383: LD_INT 5
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 1
15392: PPUSH
15393: LD_INT 2
15395: PPUSH
15396: CALL_OW 12
15400: ARRAY
15401: PPUSH
15402: LD_INT 8
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 55
// Wait ( 0 0$15 ) ;
15412: LD_INT 525
15414: PPUSH
15415: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15419: LD_INT 4
15421: PUSH
15422: LD_INT 5
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: LD_INT 1
15431: PPUSH
15432: LD_INT 2
15434: PPUSH
15435: CALL_OW 12
15439: ARRAY
15440: PPUSH
15441: LD_INT 8
15443: PPUSH
15444: LD_INT 1
15446: PPUSH
15447: CALL_OW 55
// Wait ( 0 0$20 ) ;
15451: LD_INT 700
15453: PPUSH
15454: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15458: LD_INT 4
15460: PUSH
15461: LD_INT 5
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 1
15470: PPUSH
15471: LD_INT 2
15473: PPUSH
15474: CALL_OW 12
15478: ARRAY
15479: PPUSH
15480: LD_INT 8
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 55
// end ; end_of_file
15490: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15491: LD_EXP 23
15495: PUSH
15496: LD_INT 1
15498: EQUAL
15499: IFFALSE 15800
15501: GO 15503
15503: DISABLE
15504: LD_INT 0
15506: PPUSH
15507: PPUSH
15508: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15509: LD_ADDR_VAR 0 2
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 3
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 2
15536: PUSH
15537: LD_INT 30
15539: PUSH
15540: LD_INT 0
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 30
15549: PUSH
15550: LD_INT 1
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: PPUSH
15567: CALL_OW 69
15571: ST_TO_ADDR
// for i in tmp do
15572: LD_ADDR_VAR 0 1
15576: PUSH
15577: LD_VAR 0 2
15581: PUSH
15582: FOR_IN
15583: IFFALSE 15616
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15585: LD_ADDR_VAR 0 3
15589: PUSH
15590: LD_VAR 0 3
15594: PUSH
15595: LD_VAR 0 1
15599: PPUSH
15600: CALL_OW 274
15604: PPUSH
15605: LD_INT 1
15607: PPUSH
15608: CALL_OW 275
15612: PLUS
15613: ST_TO_ADDR
15614: GO 15582
15616: POP
15617: POP
// strings = [ ] ;
15618: LD_ADDR_EXP 26
15622: PUSH
15623: EMPTY
15624: ST_TO_ADDR
// if tmp = 0 then
15625: LD_VAR 0 2
15629: PUSH
15630: LD_INT 0
15632: EQUAL
15633: IFFALSE 15658
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15635: LD_ADDR_EXP 26
15639: PUSH
15640: LD_EXP 26
15644: PUSH
15645: LD_STRING #Am06-1
15647: PUSH
15648: LD_EXP 24
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: ADD
15657: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15658: LD_VAR 0 2
15662: PUSH
15663: LD_INT 0
15665: GREATER
15666: PUSH
15667: LD_EXP 24
15671: PUSH
15672: LD_VAR 0 3
15676: GREATER
15677: AND
15678: IFFALSE 15709
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15680: LD_ADDR_EXP 26
15684: PUSH
15685: LD_EXP 26
15689: PUSH
15690: LD_STRING #Am06-1
15692: PUSH
15693: LD_EXP 24
15697: PUSH
15698: LD_VAR 0 3
15702: MINUS
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: ADD
15708: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15709: LD_VAR 0 2
15713: PUSH
15714: LD_INT 0
15716: GREATER
15717: PUSH
15718: LD_EXP 24
15722: PUSH
15723: LD_VAR 0 3
15727: LESSEQUAL
15728: AND
15729: IFFALSE 15752
// strings = strings ^ [ #Am06-1 , 0 ] ;
15731: LD_ADDR_EXP 26
15735: PUSH
15736: LD_EXP 26
15740: PUSH
15741: LD_STRING #Am06-1
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: ADD
15751: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15752: LD_ADDR_EXP 25
15756: PUSH
15757: LD_EXP 25
15761: PUSH
15762: LD_INT 35
15764: MINUS
15765: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15766: LD_ADDR_EXP 26
15770: PUSH
15771: LD_EXP 26
15775: PUSH
15776: LD_STRING #Am06-2
15778: PUSH
15779: LD_EXP 25
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: ADD
15788: ST_TO_ADDR
// display_strings = strings ;
15789: LD_ADDR_OWVAR 47
15793: PUSH
15794: LD_EXP 26
15798: ST_TO_ADDR
// enable ;
15799: ENABLE
// end ; end_of_file
15800: PPOPN 3
15802: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15803: LD_INT 0
15805: PPUSH
15806: PPUSH
15807: PPUSH
15808: PPUSH
15809: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15810: LD_ADDR_VAR 0 2
15814: PUSH
15815: LD_INT 22
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 21
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 2
15837: PUSH
15838: LD_INT 25
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 25
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 25
15860: PUSH
15861: LD_INT 3
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 25
15870: PUSH
15871: LD_INT 4
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: LIST
15889: PPUSH
15890: CALL_OW 69
15894: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15895: LD_ADDR_VAR 0 3
15899: PUSH
15900: LD_INT 1
15902: PPUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 12
15912: ST_TO_ADDR
// uc_side = 2 ;
15913: LD_ADDR_OWVAR 20
15917: PUSH
15918: LD_INT 2
15920: ST_TO_ADDR
// uc_nation = 2 ;
15921: LD_ADDR_OWVAR 21
15925: PUSH
15926: LD_INT 2
15928: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15929: LD_ADDR_EXP 18
15933: PUSH
15934: LD_STRING Kurt
15936: PPUSH
15937: LD_INT 0
15939: PPUSH
15940: CALL 4522 0 2
15944: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
15945: LD_EXP 18
15949: PPUSH
15950: LD_VAR 0 2
15954: PUSH
15955: LD_VAR 0 3
15959: ARRAY
15960: PPUSH
15961: CALL_OW 250
15965: PPUSH
15966: LD_VAR 0 2
15970: PUSH
15971: LD_VAR 0 3
15975: ARRAY
15976: PPUSH
15977: CALL_OW 251
15981: PPUSH
15982: LD_INT 5
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: CALL_OW 50
// InGameOn ;
15992: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15996: LD_EXP 18
16000: PPUSH
16001: CALL_OW 87
// wait ( 0 0$2 ) ;
16005: LD_INT 70
16007: PPUSH
16008: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
16012: LD_VAR 0 2
16016: PUSH
16017: LD_VAR 0 3
16021: ARRAY
16022: PPUSH
16023: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
16027: LD_VAR 0 2
16031: PUSH
16032: LD_VAR 0 3
16036: ARRAY
16037: PPUSH
16038: CALL_OW 122
// wait ( 0 0$1 ) ;
16042: LD_INT 35
16044: PPUSH
16045: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
16049: LD_EXP 18
16053: PPUSH
16054: LD_VAR 0 2
16058: PUSH
16059: LD_VAR 0 3
16063: ARRAY
16064: PPUSH
16065: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
16069: LD_VAR 0 2
16073: PUSH
16074: LD_VAR 0 3
16078: ARRAY
16079: PPUSH
16080: LD_EXP 18
16084: PPUSH
16085: CALL_OW 119
// DialogueOn ;
16089: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16093: LD_EXP 18
16097: PPUSH
16098: LD_STRING D2-Kurt-1
16100: PPUSH
16101: CALL_OW 88
// if tmp [ rnd ] = JMM then
16105: LD_VAR 0 2
16109: PUSH
16110: LD_VAR 0 3
16114: ARRAY
16115: PUSH
16116: LD_EXP 1
16120: EQUAL
16121: IFFALSE 16213
// begin Say ( JMM , D2-JMM-1 ) ;
16123: LD_EXP 1
16127: PPUSH
16128: LD_STRING D2-JMM-1
16130: PPUSH
16131: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16135: LD_EXP 18
16139: PPUSH
16140: LD_STRING D2-Kurt-2
16142: PPUSH
16143: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16147: LD_EXP 1
16151: PPUSH
16152: LD_STRING D2-JMM-2
16154: PPUSH
16155: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16159: LD_EXP 18
16163: PPUSH
16164: LD_STRING D2-Kurt-3
16166: PPUSH
16167: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16171: LD_EXP 1
16175: PPUSH
16176: LD_STRING D2-JMM-3
16178: PPUSH
16179: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16183: LD_EXP 18
16187: PPUSH
16188: LD_STRING D2-Kurt-4
16190: PPUSH
16191: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16195: LD_EXP 1
16199: PPUSH
16200: LD_STRING D2-JMM-4
16202: PPUSH
16203: CALL_OW 88
// DialogueOff ;
16207: CALL_OW 7
// end else
16211: GO 16643
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16213: LD_VAR 0 2
16217: PUSH
16218: LD_VAR 0 3
16222: ARRAY
16223: PPUSH
16224: CALL_OW 258
16228: PUSH
16229: LD_INT 1
16231: EQUAL
16232: IFFALSE 16252
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
16234: LD_VAR 0 2
16238: PUSH
16239: LD_VAR 0 3
16243: ARRAY
16244: PPUSH
16245: LD_STRING D2-Sol1-1
16247: PPUSH
16248: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16252: LD_VAR 0 2
16256: PUSH
16257: LD_VAR 0 3
16261: ARRAY
16262: PPUSH
16263: CALL_OW 258
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: IFFALSE 16291
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
16273: LD_VAR 0 2
16277: PUSH
16278: LD_VAR 0 3
16282: ARRAY
16283: PPUSH
16284: LD_STRING D2-FSol1-1
16286: PPUSH
16287: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16291: LD_EXP 18
16295: PPUSH
16296: LD_STRING D2-Kurt-2
16298: PPUSH
16299: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16303: LD_VAR 0 2
16307: PUSH
16308: LD_VAR 0 3
16312: ARRAY
16313: PPUSH
16314: CALL_OW 258
16318: PUSH
16319: LD_INT 1
16321: EQUAL
16322: IFFALSE 16342
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
16324: LD_VAR 0 2
16328: PUSH
16329: LD_VAR 0 3
16333: ARRAY
16334: PPUSH
16335: LD_STRING D2-Sol1-2
16337: PPUSH
16338: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16342: LD_VAR 0 2
16346: PUSH
16347: LD_VAR 0 3
16351: ARRAY
16352: PPUSH
16353: CALL_OW 258
16357: PUSH
16358: LD_INT 2
16360: EQUAL
16361: IFFALSE 16381
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
16363: LD_VAR 0 2
16367: PUSH
16368: LD_VAR 0 3
16372: ARRAY
16373: PPUSH
16374: LD_STRING D2-FSol1-2
16376: PPUSH
16377: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16381: LD_EXP 18
16385: PPUSH
16386: LD_STRING D2-Kurt-3
16388: PPUSH
16389: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16393: LD_VAR 0 2
16397: PUSH
16398: LD_VAR 0 3
16402: ARRAY
16403: PPUSH
16404: CALL_OW 258
16408: PUSH
16409: LD_INT 1
16411: EQUAL
16412: IFFALSE 16432
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16414: LD_VAR 0 2
16418: PUSH
16419: LD_VAR 0 3
16423: ARRAY
16424: PPUSH
16425: LD_STRING D2-Sol1-3
16427: PPUSH
16428: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16432: LD_VAR 0 2
16436: PUSH
16437: LD_VAR 0 3
16441: ARRAY
16442: PPUSH
16443: CALL_OW 258
16447: PUSH
16448: LD_INT 2
16450: EQUAL
16451: IFFALSE 16471
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16453: LD_VAR 0 2
16457: PUSH
16458: LD_VAR 0 3
16462: ARRAY
16463: PPUSH
16464: LD_STRING D2-FSol1-3
16466: PPUSH
16467: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16471: LD_EXP 18
16475: PPUSH
16476: LD_STRING D2-Kurt-4
16478: PPUSH
16479: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16483: LD_VAR 0 2
16487: PUSH
16488: LD_VAR 0 3
16492: ARRAY
16493: PPUSH
16494: CALL_OW 258
16498: PUSH
16499: LD_INT 1
16501: EQUAL
16502: IFFALSE 16522
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16504: LD_VAR 0 2
16508: PUSH
16509: LD_VAR 0 3
16513: ARRAY
16514: PPUSH
16515: LD_STRING D2-Sol1-4
16517: PPUSH
16518: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16522: LD_VAR 0 2
16526: PUSH
16527: LD_VAR 0 3
16531: ARRAY
16532: PPUSH
16533: CALL_OW 258
16537: PUSH
16538: LD_INT 2
16540: EQUAL
16541: IFFALSE 16561
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16543: LD_VAR 0 2
16547: PUSH
16548: LD_VAR 0 3
16552: ARRAY
16553: PPUSH
16554: LD_STRING D2-FSol1-4
16556: PPUSH
16557: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16561: LD_VAR 0 2
16565: PUSH
16566: LD_VAR 0 3
16570: ARRAY
16571: PPUSH
16572: CALL_OW 258
16576: PUSH
16577: LD_INT 1
16579: EQUAL
16580: IFFALSE 16600
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16582: LD_VAR 0 2
16586: PUSH
16587: LD_VAR 0 3
16591: ARRAY
16592: PPUSH
16593: LD_STRING D2-Sol1-5
16595: PPUSH
16596: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16600: LD_VAR 0 2
16604: PUSH
16605: LD_VAR 0 3
16609: ARRAY
16610: PPUSH
16611: CALL_OW 258
16615: PUSH
16616: LD_INT 2
16618: EQUAL
16619: IFFALSE 16639
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16621: LD_VAR 0 2
16625: PUSH
16626: LD_VAR 0 3
16630: ARRAY
16631: PPUSH
16632: LD_STRING D2-FSol1-5
16634: PPUSH
16635: CALL_OW 88
// DialogueOff ;
16639: CALL_OW 7
// end ; dec = ShowQuery1 ;
16643: LD_ADDR_VAR 0 4
16647: PUSH
16648: CALL 5124 0 0
16652: ST_TO_ADDR
// if dec = 1 then
16653: LD_VAR 0 4
16657: PUSH
16658: LD_INT 1
16660: EQUAL
16661: IFFALSE 16703
// begin DialogueOn ;
16663: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16667: LD_EXP 18
16671: PPUSH
16672: LD_STRING D2a-Kurt-1
16674: PPUSH
16675: CALL_OW 88
// DialogueOff ;
16679: CALL_OW 7
// InGameOff ;
16683: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16687: LD_INT 1
16689: PPUSH
16690: LD_INT 2
16692: PPUSH
16693: LD_INT 2
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: CALL_OW 80
// end ; if dec = 2 then
16703: LD_VAR 0 4
16707: PUSH
16708: LD_INT 2
16710: EQUAL
16711: IFFALSE 17307
// begin DialogueOn ;
16713: CALL_OW 6
// if tmp [ rnd ] = JMM then
16717: LD_VAR 0 2
16721: PUSH
16722: LD_VAR 0 3
16726: ARRAY
16727: PUSH
16728: LD_EXP 1
16732: EQUAL
16733: IFFALSE 16789
// begin Say ( JMM , D2b-JMM-1 ) ;
16735: LD_EXP 1
16739: PPUSH
16740: LD_STRING D2b-JMM-1
16742: PPUSH
16743: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16747: LD_EXP 18
16751: PPUSH
16752: LD_STRING D2b-Kurt-1
16754: PPUSH
16755: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16759: LD_EXP 1
16763: PPUSH
16764: LD_STRING D2b-JMM-2
16766: PPUSH
16767: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16771: LD_EXP 18
16775: PPUSH
16776: LD_STRING D2b-Kurt-2
16778: PPUSH
16779: CALL_OW 88
// DialogueOff ;
16783: CALL_OW 7
// end else
16787: GO 17051
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16789: LD_VAR 0 2
16793: PUSH
16794: LD_VAR 0 3
16798: ARRAY
16799: PPUSH
16800: CALL_OW 258
16804: PUSH
16805: LD_INT 1
16807: EQUAL
16808: IFFALSE 16828
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16810: LD_VAR 0 2
16814: PUSH
16815: LD_VAR 0 3
16819: ARRAY
16820: PPUSH
16821: LD_STRING D2b-Sol1-1
16823: PPUSH
16824: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16828: LD_VAR 0 2
16832: PUSH
16833: LD_VAR 0 3
16837: ARRAY
16838: PPUSH
16839: CALL_OW 258
16843: PUSH
16844: LD_INT 2
16846: EQUAL
16847: IFFALSE 16867
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16849: LD_VAR 0 2
16853: PUSH
16854: LD_VAR 0 3
16858: ARRAY
16859: PPUSH
16860: LD_STRING D2b-FSol1-1
16862: PPUSH
16863: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16867: LD_EXP 18
16871: PPUSH
16872: LD_STRING D2b-Kurt-1
16874: PPUSH
16875: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16879: LD_VAR 0 2
16883: PUSH
16884: LD_VAR 0 3
16888: ARRAY
16889: PPUSH
16890: CALL_OW 258
16894: PUSH
16895: LD_INT 1
16897: EQUAL
16898: IFFALSE 16918
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16900: LD_VAR 0 2
16904: PUSH
16905: LD_VAR 0 3
16909: ARRAY
16910: PPUSH
16911: LD_STRING D2b-Sol1-2
16913: PPUSH
16914: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16918: LD_VAR 0 2
16922: PUSH
16923: LD_VAR 0 3
16927: ARRAY
16928: PPUSH
16929: CALL_OW 258
16933: PUSH
16934: LD_INT 2
16936: EQUAL
16937: IFFALSE 16957
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16939: LD_VAR 0 2
16943: PUSH
16944: LD_VAR 0 3
16948: ARRAY
16949: PPUSH
16950: LD_STRING D2b-FSol1-2
16952: PPUSH
16953: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16957: LD_EXP 18
16961: PPUSH
16962: LD_STRING D2b-Kurt-2
16964: PPUSH
16965: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16969: LD_VAR 0 2
16973: PUSH
16974: LD_VAR 0 3
16978: ARRAY
16979: PPUSH
16980: CALL_OW 258
16984: PUSH
16985: LD_INT 1
16987: EQUAL
16988: IFFALSE 17008
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16990: LD_VAR 0 2
16994: PUSH
16995: LD_VAR 0 3
16999: ARRAY
17000: PPUSH
17001: LD_STRING D2c-Sol1-2
17003: PPUSH
17004: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17008: LD_VAR 0 2
17012: PUSH
17013: LD_VAR 0 3
17017: ARRAY
17018: PPUSH
17019: CALL_OW 258
17023: PUSH
17024: LD_INT 2
17026: EQUAL
17027: IFFALSE 17047
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
17029: LD_VAR 0 2
17033: PUSH
17034: LD_VAR 0 3
17038: ARRAY
17039: PPUSH
17040: LD_STRING D2c-FSol1-2
17042: PPUSH
17043: CALL_OW 88
// DialogueOff ;
17047: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
17051: LD_ADDR_VAR 0 5
17055: PUSH
17056: CALL 5198 0 0
17060: ST_TO_ADDR
// if dec2 = 1 then
17061: LD_VAR 0 5
17065: PUSH
17066: LD_INT 1
17068: EQUAL
17069: IFFALSE 17107
// begin Say ( Kurt , D2a-Kurt-1 ) ;
17071: LD_EXP 18
17075: PPUSH
17076: LD_STRING D2a-Kurt-1
17078: PPUSH
17079: CALL_OW 88
// DialogueOff ;
17083: CALL_OW 7
// InGameOff ;
17087: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17091: LD_INT 1
17093: PPUSH
17094: LD_INT 2
17096: PPUSH
17097: LD_INT 2
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 80
// end ; if dec2 = 2 then
17107: LD_VAR 0 5
17111: PUSH
17112: LD_INT 2
17114: EQUAL
17115: IFFALSE 17307
// begin if tmp [ rnd ] = JMM then
17117: LD_VAR 0 2
17121: PUSH
17122: LD_VAR 0 3
17126: ARRAY
17127: PUSH
17128: LD_EXP 1
17132: EQUAL
17133: IFFALSE 17189
// begin Say ( JMM , D2c-JMM-1 ) ;
17135: LD_EXP 1
17139: PPUSH
17140: LD_STRING D2c-JMM-1
17142: PPUSH
17143: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17147: LD_EXP 18
17151: PPUSH
17152: LD_STRING D2c-Kurt-1
17154: PPUSH
17155: CALL_OW 88
// DialogueOff ;
17159: CALL_OW 7
// InGameOff ;
17163: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17167: LD_EXP 18
17171: PPUSH
17172: LD_INT 9
17174: PPUSH
17175: CALL_OW 113
// readyToEscape = 1 ;
17179: LD_ADDR_EXP 20
17183: PUSH
17184: LD_INT 1
17186: ST_TO_ADDR
// end else
17187: GO 17307
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17189: LD_VAR 0 2
17193: PUSH
17194: LD_VAR 0 3
17198: ARRAY
17199: PPUSH
17200: CALL_OW 258
17204: PUSH
17205: LD_INT 1
17207: EQUAL
17208: IFFALSE 17228
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17210: LD_VAR 0 2
17214: PUSH
17215: LD_VAR 0 3
17219: ARRAY
17220: PPUSH
17221: LD_STRING D2c-Sol1-1
17223: PPUSH
17224: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17228: LD_VAR 0 2
17232: PUSH
17233: LD_VAR 0 3
17237: ARRAY
17238: PPUSH
17239: CALL_OW 258
17243: PUSH
17244: LD_INT 2
17246: EQUAL
17247: IFFALSE 17267
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17249: LD_VAR 0 2
17253: PUSH
17254: LD_VAR 0 3
17258: ARRAY
17259: PPUSH
17260: LD_STRING D2c-FSol1-1
17262: PPUSH
17263: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17267: LD_EXP 18
17271: PPUSH
17272: LD_STRING D2c-Kurt-1
17274: PPUSH
17275: CALL_OW 88
// DialogueOff ;
17279: CALL_OW 7
// InGameOff ;
17283: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17287: LD_EXP 18
17291: PPUSH
17292: LD_INT 9
17294: PPUSH
17295: CALL_OW 113
// readyToEscape = 1 ;
17299: LD_ADDR_EXP 20
17303: PUSH
17304: LD_INT 1
17306: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17307: LD_VAR 0 4
17311: PUSH
17312: LD_INT 3
17314: EQUAL
17315: IFFALSE 17511
// begin DialogueOn ;
17317: CALL_OW 6
// if tmp [ rnd ] = JMM then
17321: LD_VAR 0 2
17325: PUSH
17326: LD_VAR 0 3
17330: ARRAY
17331: PUSH
17332: LD_EXP 1
17336: EQUAL
17337: IFFALSE 17393
// begin Say ( JMM , D2c-JMM-1 ) ;
17339: LD_EXP 1
17343: PPUSH
17344: LD_STRING D2c-JMM-1
17346: PPUSH
17347: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17351: LD_EXP 18
17355: PPUSH
17356: LD_STRING D2c-Kurt-1
17358: PPUSH
17359: CALL_OW 88
// DialogueOff ;
17363: CALL_OW 7
// InGameOff ;
17367: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17371: LD_EXP 18
17375: PPUSH
17376: LD_INT 9
17378: PPUSH
17379: CALL_OW 113
// readyToEscape = 1 ;
17383: LD_ADDR_EXP 20
17387: PUSH
17388: LD_INT 1
17390: ST_TO_ADDR
// end else
17391: GO 17511
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17393: LD_VAR 0 2
17397: PUSH
17398: LD_VAR 0 3
17402: ARRAY
17403: PPUSH
17404: CALL_OW 258
17408: PUSH
17409: LD_INT 1
17411: EQUAL
17412: IFFALSE 17432
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17414: LD_VAR 0 2
17418: PUSH
17419: LD_VAR 0 3
17423: ARRAY
17424: PPUSH
17425: LD_STRING D2c-Sol1-1
17427: PPUSH
17428: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17432: LD_VAR 0 2
17436: PUSH
17437: LD_VAR 0 3
17441: ARRAY
17442: PPUSH
17443: CALL_OW 258
17447: PUSH
17448: LD_INT 2
17450: EQUAL
17451: IFFALSE 17471
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17453: LD_VAR 0 2
17457: PUSH
17458: LD_VAR 0 3
17462: ARRAY
17463: PPUSH
17464: LD_STRING D2c-FSol1-1
17466: PPUSH
17467: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17471: LD_EXP 18
17475: PPUSH
17476: LD_STRING D2c-Kurt-1
17478: PPUSH
17479: CALL_OW 88
// DialogueOff ;
17483: CALL_OW 7
// InGameOff ;
17487: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17491: LD_EXP 18
17495: PPUSH
17496: LD_INT 9
17498: PPUSH
17499: CALL_OW 113
// readyToEscape = 1 ;
17503: LD_ADDR_EXP 20
17507: PUSH
17508: LD_INT 1
17510: ST_TO_ADDR
// end ; end ; end ; end_of_file
17511: LD_VAR 0 1
17515: RET
// every 0 0$1 do
17516: GO 17518
17518: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17519: LD_INT 3
17521: PPUSH
17522: LD_INT 32
17524: PPUSH
17525: LD_INT 3
17527: PPUSH
17528: CALL 5253 0 3
17532: END
// every 0 0$1 do
17533: GO 17535
17535: DISABLE
// begin enable ;
17536: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17537: LD_INT 3
17539: PPUSH
17540: LD_INT 2
17542: PPUSH
17543: CALL 5338 0 2
// if disableHealAI = 0 then
17547: LD_EXP 31
17551: PUSH
17552: LD_INT 0
17554: EQUAL
17555: IFFALSE 17573
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17557: LD_INT 3
17559: PPUSH
17560: LD_INT 10
17562: PPUSH
17563: LD_INT 11
17565: PPUSH
17566: LD_INT 32
17568: PPUSH
17569: CALL 5597 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 51
17578: PPUSH
17579: LD_INT 7
17581: PPUSH
17582: CALL 6320 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17586: LD_INT 3
17588: PPUSH
17589: LD_INT 14
17591: PPUSH
17592: LD_INT 121
17594: PPUSH
17595: LD_INT 100
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL 6500 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17605: LD_INT 3
17607: PPUSH
17608: LD_EXP 29
17612: PPUSH
17613: CALL 7291 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17617: LD_INT 3
17619: PPUSH
17620: LD_INT 8
17622: PUSH
17623: LD_INT 67
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: PPUSH
17633: LD_INT 2
17635: PPUSH
17636: CALL_OW 12
17640: ARRAY
17641: PPUSH
17642: LD_INT 11
17644: PPUSH
17645: CALL 7497 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17649: LD_INT 3
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL 7854 0 2
// end ;
17659: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17660: LD_INT 22
17662: PUSH
17663: LD_INT 3
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 21
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 55
17682: PUSH
17683: EMPTY
17684: LIST
17685: PUSH
17686: LD_INT 3
17688: PUSH
17689: LD_INT 34
17691: PUSH
17692: LD_INT 51
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: PPUSH
17709: CALL_OW 69
17713: PUSH
17714: LD_INT 0
17716: EQUAL
17717: IFFALSE 17869
17719: GO 17721
17721: DISABLE
// begin enable ;
17722: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17723: LD_INT 2
17725: PPUSH
17726: CALL_OW 274
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: LD_INT 1000
17736: PPUSH
17737: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17741: LD_INT 3
17743: PPUSH
17744: LD_INT 21
17746: PPUSH
17747: LD_INT 4
17749: PUSH
17750: LD_INT 5
17752: PUSH
17753: LD_INT 5
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: PUSH
17761: LD_OWVAR 67
17765: ARRAY
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: LD_INT 43
17772: PUSH
17773: LD_INT 43
17775: PUSH
17776: LD_INT 43
17778: PUSH
17779: LD_INT 44
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 44
17790: PUSH
17791: LD_INT 44
17793: PUSH
17794: LD_INT 44
17796: PUSH
17797: LD_INT 43
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 44
17808: PUSH
17809: LD_INT 44
17811: PUSH
17812: LD_INT 44
17814: PUSH
17815: LD_INT 44
17817: PUSH
17818: LD_INT 46
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: PUSH
17833: LD_OWVAR 67
17837: ARRAY
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: LD_INT 22
17847: PUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 24
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: PUSH
17859: LD_OWVAR 67
17863: ARRAY
17864: PPUSH
17865: CALL 5863 0 8
// end ;
17869: END
// every 5 5$0 do
17870: GO 17872
17872: DISABLE
// begin enable ;
17873: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17874: LD_INT 17
17876: PPUSH
17877: LD_INT 22
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: LD_INT 42
17888: PUSH
17889: LD_INT 43
17891: PUSH
17892: LD_INT 44
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PPUSH
17903: LD_INT 3
17905: PPUSH
17906: CALL_OW 12
17910: ARRAY
17911: PPUSH
17912: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17916: LD_INT 17
17918: PPUSH
17919: LD_INT 22
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: LD_INT 51
17930: PPUSH
17931: CALL_OW 185
// end ;
17935: END
// every 2 2$0 do var i , j ;
17936: GO 17938
17938: DISABLE
17939: LD_INT 0
17941: PPUSH
17942: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17943: LD_INT 14700
17945: PUSH
17946: LD_INT 33600
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 2
17958: PPUSH
17959: CALL_OW 12
17963: ARRAY
17964: PPUSH
17965: CALL_OW 67
// disableHealAI = 1 ;
17969: LD_ADDR_EXP 31
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17977: LD_ADDR_VAR 0 1
17981: PUSH
17982: LD_INT 22
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 25
17994: PUSH
17995: LD_INT 4
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PPUSH
18006: CALL_OW 69
18010: PUSH
18011: FOR_IN
18012: IFFALSE 18025
// ComExitBuilding ( i ) ;
18014: LD_VAR 0 1
18018: PPUSH
18019: CALL_OW 122
18023: GO 18011
18025: POP
18026: POP
// wait ( 0 0$1 ) ;
18027: LD_INT 35
18029: PPUSH
18030: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18034: LD_INT 35
18036: PPUSH
18037: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18041: LD_ADDR_VAR 0 1
18045: PUSH
18046: LD_INT 22
18048: PUSH
18049: LD_INT 3
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: PUSH
18056: LD_INT 25
18058: PUSH
18059: LD_INT 4
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18153
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18078: LD_ADDR_VAR 0 2
18082: PUSH
18083: LD_INT 19
18085: PPUSH
18086: LD_INT 22
18088: PUSH
18089: LD_INT 0
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 25
18098: PUSH
18099: LD_INT 12
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 70
18114: PUSH
18115: FOR_IN
18116: IFFALSE 18149
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18118: LD_VAR 0 1
18122: PPUSH
18123: LD_VAR 0 2
18127: PPUSH
18128: CALL_OW 250
18132: PPUSH
18133: LD_VAR 0 2
18137: PPUSH
18138: CALL_OW 251
18142: PPUSH
18143: CALL_OW 191
// end ;
18147: GO 18115
18149: POP
18150: POP
// end ;
18151: GO 18075
18153: POP
18154: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18155: LD_INT 22
18157: PUSH
18158: LD_INT 3
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 25
18167: PUSH
18168: LD_INT 4
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: PUSH
18184: LD_INT 0
18186: EQUAL
18187: PUSH
18188: LD_EXP 30
18192: PUSH
18193: LD_INT 6
18195: PUSH
18196: LD_INT 7
18198: PUSH
18199: LD_INT 8
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: LIST
18206: PUSH
18207: LD_OWVAR 67
18211: ARRAY
18212: GREATEREQUAL
18213: OR
18214: PUSH
18215: LD_INT 19
18217: PPUSH
18218: LD_INT 22
18220: PUSH
18221: LD_INT 0
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 25
18230: PUSH
18231: LD_INT 12
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 70
18246: PUSH
18247: LD_INT 0
18249: EQUAL
18250: OR
18251: IFFALSE 18034
// disableHealAI = 0 ;
18253: LD_ADDR_EXP 31
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18261: LD_ADDR_VAR 0 1
18265: PUSH
18266: LD_INT 22
18268: PUSH
18269: LD_INT 3
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 25
18278: PUSH
18279: LD_INT 12
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PPUSH
18290: CALL_OW 69
18294: PUSH
18295: FOR_IN
18296: IFFALSE 18312
// SetClass ( i , 16 ) ;
18298: LD_VAR 0 1
18302: PPUSH
18303: LD_INT 16
18305: PPUSH
18306: CALL_OW 336
18310: GO 18295
18312: POP
18313: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_INT 3
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 4
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: PUSH
18348: FOR_IN
18349: IFFALSE 18368
// ComMoveXY ( i , 113 , 94 ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_INT 113
18358: PPUSH
18359: LD_INT 94
18361: PPUSH
18362: CALL_OW 111
18366: GO 18348
18368: POP
18369: POP
// end ;
18370: PPOPN 2
18372: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18373: LD_INT 21
18375: PPUSH
18376: CALL_OW 255
18380: PUSH
18381: LD_INT 3
18383: EQUAL
18384: PUSH
18385: LD_INT 21
18387: PPUSH
18388: CALL_OW 302
18392: AND
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_INT 3
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 34
18406: PUSH
18407: LD_INT 51
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PPUSH
18418: CALL_OW 69
18422: PUSH
18423: LD_INT 0
18425: EQUAL
18426: AND
18427: IFFALSE 18459
18429: GO 18431
18431: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18432: LD_INT 21
18434: PPUSH
18435: LD_INT 23
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: LD_INT 1
18443: PPUSH
18444: LD_INT 51
18446: PPUSH
18447: CALL_OW 185
// wait ( 5 5$0 ) ;
18451: LD_INT 10500
18453: PPUSH
18454: CALL_OW 67
// enable ;
18458: ENABLE
// end ; end_of_file
18459: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18460: LD_EXP 25
18464: PUSH
18465: LD_INT 0
18467: LESSEQUAL
18468: IFFALSE 18608
18470: GO 18472
18472: DISABLE
18473: LD_INT 0
18475: PPUSH
18476: PPUSH
18477: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18478: LD_ADDR_VAR 0 2
18482: PUSH
18483: LD_INT 22
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 21
18495: PUSH
18496: LD_INT 3
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 1
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: PPUSH
18536: CALL_OW 69
18540: ST_TO_ADDR
// for i in tmp do
18541: LD_ADDR_VAR 0 1
18545: PUSH
18546: LD_VAR 0 2
18550: PUSH
18551: FOR_IN
18552: IFFALSE 18585
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18554: LD_ADDR_VAR 0 3
18558: PUSH
18559: LD_VAR 0 3
18563: PUSH
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 274
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: CALL_OW 275
18581: PLUS
18582: ST_TO_ADDR
18583: GO 18551
18585: POP
18586: POP
// if yourCrates >= needCrates then
18587: LD_VAR 0 3
18591: PUSH
18592: LD_EXP 24
18596: GREATEREQUAL
18597: IFFALSE 18608
// begin FinishMission ( yourCrates ) ;
18599: LD_VAR 0 3
18603: PPUSH
18604: CALL 18611 0 1
// end ; end ;
18608: PPOPN 3
18610: END
// export function FinishMission ( crates ) ; begin
18611: LD_INT 0
18613: PPUSH
// if crates + 100 > crates then
18614: LD_VAR 0 1
18618: PUSH
18619: LD_INT 100
18621: PLUS
18622: PUSH
18623: LD_VAR 0 1
18627: GREATER
18628: IFFALSE 18652
// begin AddMedal ( cans , 1 ) ;
18630: LD_STRING cans
18632: PPUSH
18633: LD_INT 1
18635: PPUSH
18636: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18640: LD_INT 1
18642: PPUSH
18643: LD_STRING 06_crates_1
18645: PPUSH
18646: CALL_OW 39
// end else
18650: GO 18673
// begin AddMedal ( cans , - 1 ) ;
18652: LD_STRING cans
18654: PPUSH
18655: LD_INT 1
18657: NEG
18658: PPUSH
18659: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18663: LD_INT 0
18665: PPUSH
18666: LD_STRING 06_crates_1
18668: PPUSH
18669: CALL_OW 39
// end ; if unitLost < 2 then
18673: LD_EXP 28
18677: PUSH
18678: LD_INT 2
18680: LESS
18681: IFFALSE 18695
// begin AddMedal ( people , 1 ) ;
18683: LD_STRING people
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: CALL_OW 101
// end else
18693: GO 18706
// begin AddMedal ( people , - 1 ) ;
18695: LD_STRING people
18697: PPUSH
18698: LD_INT 1
18700: NEG
18701: PPUSH
18702: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18706: LD_EXP 27
18710: PPUSH
18711: LD_STRING 06_remoteVehs_1
18713: PPUSH
18714: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18718: LD_EXP 27
18722: PUSH
18723: LD_INT 1
18725: EQUAL
18726: IFFALSE 18740
// begin AddMedal ( remote , 1 ) ;
18728: LD_STRING remote
18730: PPUSH
18731: LD_INT 1
18733: PPUSH
18734: CALL_OW 101
// end else
18738: GO 18780
// begin if GetTech ( 18 , 1 ) = state_enabled then
18740: LD_INT 18
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL_OW 321
18750: PUSH
18751: LD_INT 1
18753: EQUAL
18754: IFFALSE 18769
// begin AddMedal ( remote , - 1 ) ;
18756: LD_STRING remote
18758: PPUSH
18759: LD_INT 1
18761: NEG
18762: PPUSH
18763: CALL_OW 101
// end else
18767: GO 18780
// begin AddMedal ( remote , - 2 ) ;
18769: LD_STRING remote
18771: PPUSH
18772: LD_INT 2
18774: NEG
18775: PPUSH
18776: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18780: LD_EXP 19
18784: PPUSH
18785: LD_STRING 06_KurtStatus_1
18787: PPUSH
18788: CALL_OW 39
// GiveMedals ( Main ) ;
18792: LD_STRING Main
18794: PPUSH
18795: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18799: LD_INT 50
18801: PUSH
18802: EMPTY
18803: LIST
18804: PUSH
18805: LD_INT 22
18807: PUSH
18808: LD_INT 1
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 21
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: LD_INT 25
18830: PUSH
18831: LD_INT 1
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 25
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 3
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 25
18860: PUSH
18861: LD_INT 4
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 69
18885: PPUSH
18886: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18890: LD_EXP 1
18894: PPUSH
18895: LD_EXP 37
18899: PUSH
18900: LD_STRING JMM
18902: STR
18903: PPUSH
18904: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18908: LD_EXP 2
18912: PPUSH
18913: LD_EXP 37
18917: PUSH
18918: LD_STRING Lisa
18920: STR
18921: PPUSH
18922: CALL 4741 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18926: LD_EXP 3
18930: PPUSH
18931: LD_EXP 37
18935: PUSH
18936: LD_STRING Bobby
18938: STR
18939: PPUSH
18940: CALL 4741 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18944: LD_EXP 4
18948: PPUSH
18949: LD_EXP 37
18953: PUSH
18954: LD_STRING Cyrus
18956: STR
18957: PPUSH
18958: CALL 4741 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18962: LD_EXP 5
18966: PPUSH
18967: LD_EXP 37
18971: PUSH
18972: LD_STRING Frank
18974: STR
18975: PPUSH
18976: CALL 4741 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18980: LD_EXP 6
18984: PPUSH
18985: LD_EXP 37
18989: PUSH
18990: LD_STRING Brown
18992: STR
18993: PPUSH
18994: CALL 4741 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18998: LD_EXP 7
19002: PPUSH
19003: LD_EXP 37
19007: PUSH
19008: LD_STRING Donaldson
19010: STR
19011: PPUSH
19012: CALL 4741 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19016: LD_EXP 8
19020: PPUSH
19021: LD_EXP 37
19025: PUSH
19026: LD_STRING Gladstone
19028: STR
19029: PPUSH
19030: CALL 4741 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19034: LD_EXP 9
19038: PPUSH
19039: LD_EXP 37
19043: PUSH
19044: LD_STRING Denis
19046: STR
19047: PPUSH
19048: CALL 4741 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19052: LD_EXP 14
19056: PPUSH
19057: LD_EXP 37
19061: PUSH
19062: LD_STRING Joan
19064: STR
19065: PPUSH
19066: CALL 4741 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
19070: LD_EXP 15
19074: PPUSH
19075: LD_STRING 06_JoanStatus_1
19077: PPUSH
19078: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19082: LD_INT 50
19084: PUSH
19085: EMPTY
19086: LIST
19087: PUSH
19088: LD_INT 22
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 21
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 2
19110: PUSH
19111: LD_INT 25
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 25
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 25
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 25
19143: PUSH
19144: LD_INT 4
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: PPUSH
19164: CALL_OW 69
19168: PUSH
19169: LD_EXP 1
19173: PUSH
19174: LD_EXP 2
19178: PUSH
19179: LD_EXP 3
19183: PUSH
19184: LD_EXP 4
19188: PUSH
19189: LD_EXP 5
19193: PUSH
19194: LD_EXP 6
19198: PUSH
19199: LD_EXP 7
19203: PUSH
19204: LD_EXP 8
19208: PUSH
19209: LD_EXP 9
19213: PUSH
19214: LD_EXP 14
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: DIFF
19231: PPUSH
19232: LD_STRING 06_other_survivors
19234: PPUSH
19235: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19239: LD_INT 50
19241: PUSH
19242: EMPTY
19243: LIST
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 1
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 25
19270: PUSH
19271: LD_INT 12
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 25
19280: PUSH
19281: LD_INT 16
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 69
19303: PPUSH
19304: LD_STRING 06_other_apemans
19306: PPUSH
19307: CALL_OW 38
// YouWin ;
19311: CALL_OW 103
// end ; end_of_file
19315: LD_VAR 0 2
19319: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
19320: LD_EXP 35
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: LD_INT 3
19330: PUSH
19331: LD_INT 3
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: PUSH
19339: LD_OWVAR 67
19343: ARRAY
19344: EQUAL
19345: IFFALSE 19460
19347: GO 19349
19349: DISABLE
// begin enable ;
19350: ENABLE
// sendedConvoys = 0 ;
19351: LD_ADDR_EXP 35
19355: PUSH
19356: LD_INT 0
19358: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19359: LD_INT 6
19361: PPUSH
19362: LD_INT 3
19364: PPUSH
19365: LD_INT 3
19367: PPUSH
19368: LD_INT 4
19370: PPUSH
19371: CALL_OW 12
19375: PUSH
19376: LD_INT 4
19378: PPUSH
19379: LD_INT 5
19381: PPUSH
19382: CALL_OW 12
19386: PUSH
19387: LD_INT 6
19389: PPUSH
19390: LD_INT 7
19392: PPUSH
19393: CALL_OW 12
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: PUSH
19403: LD_OWVAR 67
19407: ARRAY
19408: PPUSH
19409: LD_INT 0
19411: PPUSH
19412: LD_INT 0
19414: PPUSH
19415: LD_INT 0
19417: PPUSH
19418: LD_INT 3
19420: PPUSH
19421: LD_EXP 32
19425: PPUSH
19426: LD_EXP 33
19430: PPUSH
19431: CALL_OW 12
19435: PPUSH
19436: LD_INT 18
19438: PPUSH
19439: LD_INT 17
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: LD_INT 2
19450: PPUSH
19451: CALL_OW 12
19455: PPUSH
19456: CALL 8084 0 12
// end ; end_of_file
19460: END
// export function PrepareNature ; var i , un ; begin
19461: LD_INT 0
19463: PPUSH
19464: PPUSH
19465: PPUSH
// for i = 1 to Difficulty + 2 do
19466: LD_ADDR_VAR 0 2
19470: PUSH
19471: DOUBLE
19472: LD_INT 1
19474: DEC
19475: ST_TO_ADDR
19476: LD_OWVAR 67
19480: PUSH
19481: LD_INT 2
19483: PLUS
19484: PUSH
19485: FOR_TO
19486: IFFALSE 19595
// begin hc_sex = sex_male ;
19488: LD_ADDR_OWVAR 27
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// uc_side = 0 ;
19496: LD_ADDR_OWVAR 20
19500: PUSH
19501: LD_INT 0
19503: ST_TO_ADDR
// uc_nation = nation_nature ;
19504: LD_ADDR_OWVAR 21
19508: PUSH
19509: LD_INT 0
19511: ST_TO_ADDR
// hc_class = class_tiger ;
19512: LD_ADDR_OWVAR 28
19516: PUSH
19517: LD_INT 14
19519: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19520: LD_ADDR_OWVAR 31
19524: PUSH
19525: LD_EXP 33
19529: PUSH
19530: LD_INT 0
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19545: LD_ADDR_OWVAR 35
19549: PUSH
19550: LD_INT 5
19552: NEG
19553: PPUSH
19554: LD_INT 5
19556: PPUSH
19557: CALL_OW 12
19561: PUSH
19562: LD_OWVAR 67
19566: MUL
19567: ST_TO_ADDR
// un = CreateHuman ;
19568: LD_ADDR_VAR 0 3
19572: PUSH
19573: CALL_OW 44
19577: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19578: LD_VAR 0 3
19582: PPUSH
19583: LD_INT 20
19585: PPUSH
19586: LD_INT 0
19588: PPUSH
19589: CALL_OW 49
// end ;
19593: GO 19485
19595: POP
19596: POP
// for i = 1 to rand ( 3 , 4 ) do
19597: LD_ADDR_VAR 0 2
19601: PUSH
19602: DOUBLE
19603: LD_INT 1
19605: DEC
19606: ST_TO_ADDR
19607: LD_INT 3
19609: PPUSH
19610: LD_INT 4
19612: PPUSH
19613: CALL_OW 12
19617: PUSH
19618: FOR_TO
19619: IFFALSE 19713
// begin hc_sex = sex_male ;
19621: LD_ADDR_OWVAR 27
19625: PUSH
19626: LD_INT 1
19628: ST_TO_ADDR
// uc_side = 0 ;
19629: LD_ADDR_OWVAR 20
19633: PUSH
19634: LD_INT 0
19636: ST_TO_ADDR
// uc_nation = nation_nature ;
19637: LD_ADDR_OWVAR 21
19641: PUSH
19642: LD_INT 0
19644: ST_TO_ADDR
// hc_class = 18 ;
19645: LD_ADDR_OWVAR 28
19649: PUSH
19650: LD_INT 18
19652: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19653: LD_ADDR_OWVAR 31
19657: PUSH
19658: LD_EXP 33
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: ST_TO_ADDR
// hc_agressivity = 0 ;
19678: LD_ADDR_OWVAR 35
19682: PUSH
19683: LD_INT 0
19685: ST_TO_ADDR
// un = CreateHuman ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: CALL_OW 44
19695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 20
19703: PPUSH
19704: LD_INT 0
19706: PPUSH
19707: CALL_OW 49
// end ;
19711: GO 19618
19713: POP
19714: POP
// end ;
19715: LD_VAR 0 1
19719: RET
