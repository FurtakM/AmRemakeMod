// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6356 0 0
// PrepareNature ;
 250: CALL 23239 0 0
// PrepareRussian ;
 254: CALL 5474 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5851 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5851 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5851 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5851 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5851 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5851 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5851 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5851 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5851 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; var _xy , xy , i ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
// uc_side = 4 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 4
2152: ST_TO_ADDR
// uc_nation = 1 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_INT 63
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 70
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 83
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 16
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 27
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 38
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: LD_INT 5
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 54
2238: PUSH
2239: LD_INT 1
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: ST_TO_ADDR
// for i in xy do
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_VAR 0 3
2265: PUSH
2266: FOR_IN
2267: IFFALSE 2329
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_VAR 0 4
2278: ARRAY
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_VAR 0 3
2288: PUSH
2289: LD_VAR 0 4
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: CALL_OW 428
2303: PUSH
2304: LD_INT 0
2306: EQUAL
2307: IFFALSE 2327
// begin _xy := xy [ i ] ;
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: PUSH
2319: LD_VAR 0 4
2323: ARRAY
2324: ST_TO_ADDR
// break ;
2325: GO 2329
// end ;
2327: GO 2266
2329: POP
2330: POP
// Denis = PrepareUnit ( Denis , true ) ;
2331: LD_ADDR_EXP 9
2335: PUSH
2336: LD_STRING Denis
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: CALL 5851 0 2
2346: ST_TO_ADDR
// PlaceUnitXY ( Denis , _xy [ 1 ] , _xy [ 2 ] , false ) ;
2347: LD_EXP 9
2351: PPUSH
2352: LD_VAR 0 2
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 48
// SetClass ( Denis , 4 ) ;
2377: LD_EXP 9
2381: PPUSH
2382: LD_INT 4
2384: PPUSH
2385: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_INT 750
2396: PPUSH
2397: CALL_OW 234
// end ;
2401: LD_VAR 0 1
2405: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
// area := HarrisonSupportArea ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_INT 3
2420: ST_TO_ADDR
// dir := 2 ;
2421: LD_ADDR_VAR 0 5
2425: PUSH
2426: LD_INT 2
2428: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2429: LD_VAR 0 4
2433: PPUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 70
2448: IFFALSE 2466
// begin area := HarrisonSupportArea2 ;
2450: LD_ADDR_VAR 0 4
2454: PUSH
2455: LD_INT 31
2457: ST_TO_ADDR
// dir := 1 ;
2458: LD_ADDR_VAR 0 5
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// end ; uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// uc_nation = 1 ;
2474: LD_ADDR_OWVAR 21
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// vc_engine = 1 ;
2482: LD_ADDR_OWVAR 39
2486: PUSH
2487: LD_INT 1
2489: ST_TO_ADDR
// vc_control = 1 ;
2490: LD_ADDR_OWVAR 38
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2498: LD_ADDR_OWVAR 40
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 2
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_OWVAR 67
2521: ARRAY
2522: ST_TO_ADDR
// vc_chassis = 2 ;
2523: LD_ADDR_OWVAR 37
2527: PUSH
2528: LD_INT 2
2530: ST_TO_ADDR
// veh = CreateVehicle ;
2531: LD_ADDR_VAR 0 3
2535: PUSH
2536: CALL_OW 45
2540: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2541: LD_VAR 0 3
2545: PPUSH
2546: LD_VAR 0 5
2550: PPUSH
2551: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 50
2579: PPUSH
2580: CALL_OW 240
// hc_class := 2 ;
2584: LD_ADDR_OWVAR 28
2588: PUSH
2589: LD_INT 2
2591: ST_TO_ADDR
// hc_sex := sex_male ;
2592: LD_ADDR_OWVAR 27
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2600: LD_ADDR_OWVAR 33
2604: PUSH
2605: LD_STRING SecondCharsGal
2607: ST_TO_ADDR
// hc_face_number := 52 ;
2608: LD_ADDR_OWVAR 34
2612: PUSH
2613: LD_INT 52
2615: ST_TO_ADDR
// hc_name := Craig Brown ;
2616: LD_ADDR_OWVAR 26
2620: PUSH
2621: LD_STRING Craig Brown
2623: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2624: LD_ADDR_OWVAR 29
2628: PUSH
2629: LD_INT 10
2631: PUSH
2632: LD_INT 10
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2639: LD_ADDR_OWVAR 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 0
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2662: LD_ADDR_OWVAR 31
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: LD_INT 0
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2685: LD_ADDR_EXP 17
2689: PUSH
2690: CALL_OW 44
2694: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2695: LD_EXP 17
2699: PPUSH
2700: LD_VAR 0 3
2704: PPUSH
2705: CALL_OW 52
// vc_engine = 1 ;
2709: LD_ADDR_OWVAR 39
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// vc_control = 1 ;
2717: LD_ADDR_OWVAR 38
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2725: LD_ADDR_OWVAR 40
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_chassis = 2 ;
2733: LD_ADDR_OWVAR 37
2737: PUSH
2738: LD_INT 2
2740: ST_TO_ADDR
// veh = CreateVehicle ;
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: CALL_OW 45
2750: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_VAR 0 5
2760: PPUSH
2761: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2765: LD_VAR 0 3
2769: PPUSH
2770: LD_VAR 0 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2782: LD_VAR 0 3
2786: PPUSH
2787: LD_INT 50
2789: PPUSH
2790: CALL_OW 240
// hc_class := 1 ;
2794: LD_ADDR_OWVAR 28
2798: PUSH
2799: LD_INT 1
2801: ST_TO_ADDR
// hc_sex := sex_female ;
2802: LD_ADDR_OWVAR 27
2806: PUSH
2807: LD_INT 2
2809: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2810: LD_ADDR_OWVAR 33
2814: PUSH
2815: LD_STRING SecondCharsGal
2817: ST_TO_ADDR
// hc_face_number := 45 ;
2818: LD_ADDR_OWVAR 34
2822: PUSH
2823: LD_INT 45
2825: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2826: LD_ADDR_OWVAR 29
2830: PUSH
2831: LD_INT 11
2833: PUSH
2834: LD_INT 10
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2841: LD_ADDR_OWVAR 26
2845: PUSH
2846: LD_STRING Ingrid Jonsson
2848: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2849: LD_ADDR_OWVAR 30
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 0
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2872: LD_ADDR_OWVAR 31
2876: PUSH
2877: LD_INT 3
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: LD_INT 1
2885: PUSH
2886: LD_INT 0
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2895: LD_ADDR_EXP 18
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2905: LD_EXP 18
2909: PPUSH
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 52
// end ;
2919: LD_VAR 0 1
2923: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2924: LD_INT 0
2926: PPUSH
2927: PPUSH
2928: PPUSH
2929: PPUSH
2930: PPUSH
// j = 0 ;
2931: LD_ADDR_VAR 0 3
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2939: LD_INT 35
2941: PPUSH
2942: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 21
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 26
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 2
2983: PUSH
2984: LD_INT 25
2986: PUSH
2987: LD_INT 1
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: PUSH
2994: LD_INT 25
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 25
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 25
3016: PUSH
3017: LD_INT 4
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: PUSH
3042: FOR_IN
3043: IFFALSE 3169
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3045: LD_INT 22
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 21
3080: PUSH
3081: LD_INT 3
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 59
3090: PUSH
3091: EMPTY
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 91
3103: PUSH
3104: LD_VAR 0 2
3108: PUSH
3109: LD_INT 25
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: NOT
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_EXP 1
3137: PPUSH
3138: CALL_OW 296
3142: PUSH
3143: LD_INT 15
3145: LESS
3146: AND
3147: IFFALSE 3167
// begin tmp = i ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_VAR 0 2
3158: ST_TO_ADDR
// j = 1 ;
3159: LD_ADDR_VAR 0 3
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// end ; end ;
3167: GO 3042
3169: POP
3170: POP
// until j = 1 ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: EQUAL
3179: IFFALSE 2939
// blockSpawn = 1 ;
3181: LD_ADDR_EXP 29
3185: PUSH
3186: LD_INT 1
3188: ST_TO_ADDR
// uc_side = 4 ;
3189: LD_ADDR_OWVAR 20
3193: PUSH
3194: LD_INT 4
3196: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3197: LD_ADDR_EXP 15
3201: PUSH
3202: LD_STRING Joan
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL 5851 0 2
3212: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3213: LD_EXP 15
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: CALL_OW 250
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 251
3237: PPUSH
3238: LD_INT 5
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3248: LD_EXP 15
3252: PPUSH
3253: LD_INT 250
3255: PPUSH
3256: CALL_OW 234
// InGameOn ;
3260: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3264: LD_EXP 15
3268: PPUSH
3269: CALL_OW 87
// wait ( 0 0$2 ) ;
3273: LD_INT 70
3275: PPUSH
3276: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 122
// wait ( 0 0$1 ) ;
3298: LD_INT 35
3300: PPUSH
3301: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3305: LD_VAR 0 4
3309: PPUSH
3310: LD_EXP 15
3314: PPUSH
3315: CALL_OW 112
// wait ( 0 0$2 ) ;
3319: LD_INT 70
3321: PPUSH
3322: CALL_OW 67
// DialogueOn ;
3326: CALL_OW 6
// if tmp = JMM then
3330: LD_VAR 0 4
3334: PUSH
3335: LD_EXP 1
3339: EQUAL
3340: IFFALSE 3489
// begin ComTurnUnit ( JMM , Joan ) ;
3342: LD_EXP 1
3346: PPUSH
3347: LD_EXP 15
3351: PPUSH
3352: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3356: LD_EXP 1
3360: PPUSH
3361: LD_STRING D5b-JMM-1
3363: PPUSH
3364: CALL_OW 88
// DialogueOff ;
3368: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3372: LD_EXP 15
3376: PPUSH
3377: LD_INT 500
3379: PPUSH
3380: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_EXP 1
3393: PPUSH
3394: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3398: LD_EXP 1
3402: PPUSH
3403: LD_EXP 15
3407: PPUSH
3408: CALL_OW 119
// wait ( 0 0$1 ) ;
3412: LD_INT 35
3414: PPUSH
3415: CALL_OW 67
// DialogueOn ;
3419: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3423: LD_EXP 15
3427: PPUSH
3428: LD_STRING D5b-Joan-1
3430: PPUSH
3431: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3435: LD_EXP 1
3439: PPUSH
3440: LD_STRING D5b-JMM-2
3442: PPUSH
3443: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3447: LD_EXP 15
3451: PPUSH
3452: LD_STRING D5b-Joan-2
3454: PPUSH
3455: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3459: LD_EXP 1
3463: PPUSH
3464: LD_STRING D5b-JMM-3
3466: PPUSH
3467: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3471: LD_EXP 15
3475: PPUSH
3476: LD_STRING D5b-Joan-3
3478: PPUSH
3479: CALL_OW 88
// DialogueOff ;
3483: CALL_OW 7
// end else
3487: GO 3824
// begin ComTurnUnit ( tmp , Joan ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_EXP 15
3498: PPUSH
3499: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3503: LD_VAR 0 4
3507: PPUSH
3508: LD_STRING D5a-Sol1-1
3510: PPUSH
3511: CALL_OW 88
// DialogueOff ;
3515: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_INT 500
3526: PPUSH
3527: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3531: LD_EXP 15
3535: PPUSH
3536: LD_VAR 0 4
3540: PPUSH
3541: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_EXP 15
3554: PPUSH
3555: CALL_OW 119
// wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// DialogueOn ;
3566: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3570: LD_EXP 15
3574: PPUSH
3575: LD_STRING D5a-Joan-1
3577: PPUSH
3578: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3582: LD_VAR 0 4
3586: PPUSH
3587: LD_STRING D5a-Sol1-2
3589: PPUSH
3590: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3594: LD_EXP 15
3598: PPUSH
3599: LD_STRING D5a-Joan-2
3601: PPUSH
3602: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_STRING D5a-Sol1-3
3613: PPUSH
3614: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3618: LD_EXP 15
3622: PPUSH
3623: LD_STRING D5a-Joan-3
3625: PPUSH
3626: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3630: LD_VAR 0 4
3634: PPUSH
3635: LD_STRING D5a-Sol1-4
3637: PPUSH
3638: CALL_OW 88
// DialogueOff ;
3642: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3646: LD_EXP 1
3650: PPUSH
3651: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 122
// wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3671: LD_INT 35
3673: PPUSH
3674: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3678: LD_EXP 15
3682: PUSH
3683: LD_VAR 0 4
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3701: LD_EXP 15
3705: PPUSH
3706: LD_EXP 1
3710: PPUSH
3711: CALL_OW 296
3715: PUSH
3716: LD_INT 5
3718: LESS
3719: IFFALSE 3671
// ComTurnUnit ( Joan , JMM ) ;
3721: LD_EXP 15
3725: PPUSH
3726: LD_EXP 1
3730: PPUSH
3731: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3735: LD_EXP 1
3739: PPUSH
3740: LD_EXP 15
3744: PPUSH
3745: CALL_OW 119
// wait ( 0 0$1 ) ;
3749: LD_INT 35
3751: PPUSH
3752: CALL_OW 67
// DialogueOn ;
3756: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-4
3767: PPUSH
3768: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3772: LD_EXP 1
3776: PPUSH
3777: LD_STRING D5a-JMM-4
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-5
3791: PPUSH
3792: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3796: LD_EXP 1
3800: PPUSH
3801: LD_STRING D5a-JMM-5
3803: PPUSH
3804: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3808: LD_EXP 15
3812: PPUSH
3813: LD_STRING D5a-Joan-6
3815: PPUSH
3816: CALL_OW 88
// DialogueOff ;
3820: CALL_OW 7
// end ; DialogueOn ;
3824: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3828: LD_EXP 1
3832: PPUSH
3833: LD_STRING D6-JMM-1
3835: PPUSH
3836: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3840: LD_EXP 15
3844: PPUSH
3845: LD_STRING D6-Joan-1
3847: PPUSH
3848: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D6-JMM-2
3859: PPUSH
3860: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3864: LD_EXP 15
3868: PPUSH
3869: LD_STRING D6-Joan-2
3871: PPUSH
3872: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_STRING D6-JMM-3
3883: PPUSH
3884: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3888: LD_EXP 15
3892: PPUSH
3893: LD_STRING D6-Joan-3
3895: PPUSH
3896: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING D6-JMM-4
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// InGameOff ;
3916: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3920: LD_EXP 15
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3932: LD_STRING MJ
3934: PPUSH
3935: CALL_OW 337
// JoanStatus = 1 ;
3939: LD_ADDR_EXP 16
3943: PUSH
3944: LD_INT 1
3946: ST_TO_ADDR
// blockSpawn = 0 ;
3947: LD_ADDR_EXP 29
3951: PUSH
3952: LD_INT 0
3954: ST_TO_ADDR
// end ;
3955: LD_VAR 0 1
3959: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
// repeat wait ( 0 0$7 ) ;
3964: LD_INT 245
3966: PPUSH
3967: CALL_OW 67
// until blockSpawn = 0 ;
3971: LD_EXP 29
3975: PUSH
3976: LD_INT 0
3978: EQUAL
3979: IFFALSE 3964
// uc_side = 1 ;
3981: LD_ADDR_OWVAR 20
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// uc_nation = 1 ;
3989: LD_ADDR_OWVAR 21
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// InitHc ;
3997: CALL_OW 19
// if number = 1 then
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 1
4008: EQUAL
4009: IFFALSE 4185
// begin hc_class := 3 ;
4011: LD_ADDR_OWVAR 28
4015: PUSH
4016: LD_INT 3
4018: ST_TO_ADDR
// hc_sex := sex_male ;
4019: LD_ADDR_OWVAR 27
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4027: LD_ADDR_OWVAR 33
4031: PUSH
4032: LD_STRING SecondCharsGal
4034: ST_TO_ADDR
// hc_face_number := 55 ;
4035: LD_ADDR_OWVAR 34
4039: PUSH
4040: LD_INT 55
4042: ST_TO_ADDR
// hc_name := George McCarthy ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING George McCarthy
4050: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4051: LD_ADDR_OWVAR 29
4055: PUSH
4056: LD_INT 11
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4066: LD_ADDR_OWVAR 30
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: LD_INT 0
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4089: LD_ADDR_OWVAR 31
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: ST_TO_ADDR
// un = CreateHuman ;
4112: LD_ADDR_VAR 0 3
4116: PUSH
4117: CALL_OW 44
4121: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4122: LD_VAR 0 3
4126: PPUSH
4127: LD_INT 23
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL_OW 87
// wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// DialogueOn ;
4153: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4157: LD_VAR 0 3
4161: PPUSH
4162: LD_STRING D11d-Sol4-1
4164: PPUSH
4165: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4169: LD_EXP 1
4173: PPUSH
4174: LD_STRING D11d-JMM-1
4176: PPUSH
4177: CALL_OW 88
// DialogueOff ;
4181: CALL_OW 7
// end ; if number = 2 then
4185: LD_VAR 0 1
4189: PUSH
4190: LD_INT 2
4192: EQUAL
4193: IFFALSE 4369
// begin hc_class := 1 ;
4195: LD_ADDR_OWVAR 28
4199: PUSH
4200: LD_INT 1
4202: ST_TO_ADDR
// hc_sex := sex_male ;
4203: LD_ADDR_OWVAR 27
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4211: LD_ADDR_OWVAR 33
4215: PUSH
4216: LD_STRING AmGalRemake
4218: ST_TO_ADDR
// hc_face_number := 7 ;
4219: LD_ADDR_OWVAR 34
4223: PUSH
4224: LD_INT 7
4226: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4227: LD_ADDR_OWVAR 26
4231: PUSH
4232: LD_STRING Bobby Jordan
4234: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4235: LD_ADDR_OWVAR 29
4239: PUSH
4240: LD_INT 9
4242: PUSH
4243: LD_INT 11
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4250: LD_ADDR_OWVAR 30
4254: PUSH
4255: LD_INT 1
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: LD_INT 1
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4273: LD_ADDR_OWVAR 31
4277: PUSH
4278: LD_INT 2
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: LD_INT 1
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: ST_TO_ADDR
// un = CreateHuman ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: CALL_OW 44
4305: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4306: LD_VAR 0 3
4310: PPUSH
4311: LD_INT 24
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL_OW 49
// wait ( 0 0$1 ) ;
4321: LD_INT 35
4323: PPUSH
4324: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 87
// DialogueOn ;
4337: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_STRING D11b-Sol3-1
4348: PPUSH
4349: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4353: LD_EXP 1
4357: PPUSH
4358: LD_STRING D11b-JMM-1
4360: PPUSH
4361: CALL_OW 88
// DialogueOff ;
4365: CALL_OW 7
// end ; if number = 3 then
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 3
4376: EQUAL
4377: IFFALSE 4541
// begin hc_class := 1 ;
4379: LD_ADDR_OWVAR 28
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// hc_sex := sex_male ;
4387: LD_ADDR_OWVAR 27
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// hc_gallery := DJ ;
4395: LD_ADDR_OWVAR 33
4399: PUSH
4400: LD_STRING DJ
4402: ST_TO_ADDR
// hc_face_number := 1 ;
4403: LD_ADDR_OWVAR 34
4407: PUSH
4408: LD_INT 1
4410: ST_TO_ADDR
// hc_name := Darius Dajay ;
4411: LD_ADDR_OWVAR 26
4415: PUSH
4416: LD_STRING Darius Dajay
4418: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4419: LD_ADDR_OWVAR 29
4423: PUSH
4424: LD_INT 11
4426: PUSH
4427: LD_INT 11
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4434: LD_ADDR_OWVAR 30
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: LD_INT 0
4444: PUSH
4445: LD_INT 0
4447: PUSH
4448: LD_INT 0
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4457: LD_ADDR_OWVAR 31
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 0
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// un = CreateHuman ;
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: CALL_OW 44
4489: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 25
4497: PPUSH
4498: LD_INT 1
4500: PPUSH
4501: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: CALL_OW 87
// wait ( 0 0$1 ) ;
4514: LD_INT 35
4516: PPUSH
4517: CALL_OW 67
// DialogueOn ;
4521: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_STRING D11f-Sol5-1
4532: PPUSH
4533: CALL_OW 88
// DialogueOff ;
4537: CALL_OW 7
// end ; if number = 4 then
4541: LD_VAR 0 1
4545: PUSH
4546: LD_INT 4
4548: EQUAL
4549: IFFALSE 4713
// begin hc_class := 3 ;
4551: LD_ADDR_OWVAR 28
4555: PUSH
4556: LD_INT 3
4558: ST_TO_ADDR
// hc_sex := sex_female ;
4559: LD_ADDR_OWVAR 27
4563: PUSH
4564: LD_INT 2
4566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4567: LD_ADDR_OWVAR 33
4571: PUSH
4572: LD_STRING SecondCharsGal
4574: ST_TO_ADDR
// hc_face_number := 46 ;
4575: LD_ADDR_OWVAR 34
4579: PUSH
4580: LD_INT 46
4582: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4583: LD_ADDR_OWVAR 26
4587: PUSH
4588: LD_STRING Sylvia Creak
4590: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4591: LD_ADDR_OWVAR 29
4595: PUSH
4596: LD_INT 10
4598: PUSH
4599: LD_INT 9
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4606: LD_ADDR_OWVAR 30
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 1
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: LD_INT 1
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4629: LD_ADDR_OWVAR 31
4633: PUSH
4634: LD_INT 1
4636: PUSH
4637: LD_INT 3
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: ST_TO_ADDR
// un = CreateHuman ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: CALL_OW 44
4661: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_INT 26
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: CALL_OW 87
// wait ( 0 0$1 ) ;
4686: LD_INT 35
4688: PPUSH
4689: CALL_OW 67
// DialogueOn ;
4693: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_STRING D11e-FSol4-1
4704: PPUSH
4705: CALL_OW 88
// DialogueOff ;
4709: CALL_OW 7
// end ; if number = 5 then
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 5
4720: EQUAL
4721: IFFALSE 4897
// begin hc_class := 1 ;
4723: LD_ADDR_OWVAR 28
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// hc_sex := sex_female ;
4731: LD_ADDR_OWVAR 27
4735: PUSH
4736: LD_INT 2
4738: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4739: LD_ADDR_OWVAR 33
4743: PUSH
4744: LD_STRING SecondCharsGal
4746: ST_TO_ADDR
// hc_face_number := 37 ;
4747: LD_ADDR_OWVAR 34
4751: PUSH
4752: LD_INT 37
4754: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4755: LD_ADDR_OWVAR 26
4759: PUSH
4760: LD_STRING Margherite Simpson
4762: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4763: LD_ADDR_OWVAR 29
4767: PUSH
4768: LD_INT 11
4770: PUSH
4771: LD_INT 10
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4778: LD_ADDR_OWVAR 30
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: LD_INT 0
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4801: LD_ADDR_OWVAR 31
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: LD_INT 1
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: ST_TO_ADDR
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 27
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: CALL_OW 87
// wait ( 0 0$1 ) ;
4858: LD_INT 35
4860: PPUSH
4861: CALL_OW 67
// DialogueOn ;
4865: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_STRING D11c-FSol3-1
4876: PPUSH
4877: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D11c-JMM-1
4888: PPUSH
4889: CALL_OW 88
// DialogueOff ;
4893: CALL_OW 7
// end ; if number = 6 then
4897: LD_VAR 0 1
4901: PUSH
4902: LD_INT 6
4904: EQUAL
4905: IFFALSE 5079
// begin hc_class := 1 ;
4907: LD_ADDR_OWVAR 28
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// hc_sex := sex_male ;
4915: LD_ADDR_OWVAR 27
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4923: LD_ADDR_OWVAR 33
4927: PUSH
4928: LD_STRING AmGalRemake
4930: ST_TO_ADDR
// hc_face_number := 1 ;
4931: LD_ADDR_OWVAR 34
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name := Charles Brown ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING Charles Brown
4946: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4947: LD_ADDR_OWVAR 29
4951: PUSH
4952: LD_INT 12
4954: PUSH
4955: LD_INT 11
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4962: LD_ADDR_OWVAR 30
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 0
4972: PUSH
4973: LD_INT 0
4975: PUSH
4976: LD_INT 0
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4985: LD_ADDR_OWVAR 31
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: LD_INT 0
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: ST_TO_ADDR
// un = CreateHuman ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 44
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 28
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: CALL_OW 87
// wait ( 0 0$1 ) ;
5042: LD_INT 35
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_STRING D4-Sol1-5
5060: PPUSH
5061: CALL_OW 88
// DialogueOff ;
5065: CALL_OW 7
// tempCharles = un ;
5069: LD_ADDR_EXP 13
5073: PUSH
5074: LD_VAR 0 3
5078: ST_TO_ADDR
// end ; if number = 7 then
5079: LD_VAR 0 1
5083: PUSH
5084: LD_INT 7
5086: EQUAL
5087: IFFALSE 5337
// begin hc_class := 1 ;
5089: LD_ADDR_OWVAR 28
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_sex := sex_female ;
5097: LD_ADDR_OWVAR 27
5101: PUSH
5102: LD_INT 2
5104: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5105: LD_ADDR_OWVAR 33
5109: PUSH
5110: LD_STRING AmGalRemake
5112: ST_TO_ADDR
// hc_face_number := 2 ;
5113: LD_ADDR_OWVAR 34
5117: PUSH
5118: LD_INT 2
5120: ST_TO_ADDR
// hc_name := Johanna Holland ;
5121: LD_ADDR_OWVAR 26
5125: PUSH
5126: LD_STRING Johanna Holland
5128: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5129: LD_ADDR_OWVAR 29
5133: PUSH
5134: LD_INT 10
5136: PUSH
5137: LD_INT 10
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5144: LD_ADDR_OWVAR 30
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: LD_INT 0
5154: PUSH
5155: LD_INT 0
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5167: LD_ADDR_OWVAR 31
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: ST_TO_ADDR
// un = CreateHuman ;
5190: LD_ADDR_VAR 0 3
5194: PUSH
5195: CALL_OW 44
5199: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5200: LD_VAR 0 3
5204: PPUSH
5205: LD_INT 29
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: CALL_OW 87
// wait ( 0 0$1 ) ;
5224: LD_INT 35
5226: PPUSH
5227: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5231: LD_INT 30
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 3
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 70
5248: IFFALSE 5337
// begin DialogueOn ;
5250: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5254: LD_VAR 0 3
5258: PPUSH
5259: CALL_OW 250
5263: PPUSH
5264: LD_VAR 0 3
5268: PPUSH
5269: CALL_OW 251
5273: PPUSH
5274: LD_INT 1
5276: PPUSH
5277: LD_INT 15
5279: NEG
5280: PPUSH
5281: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5285: LD_VAR 0 3
5289: PPUSH
5290: CALL_OW 250
5294: PPUSH
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 251
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_STRING D11a-FSol2-1
5319: PPUSH
5320: CALL_OW 88
// ComCrawl ( un ) ;
5324: LD_VAR 0 3
5328: PPUSH
5329: CALL_OW 137
// DialogueOff ;
5333: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5337: LD_ADDR_EXP 45
5341: PUSH
5342: LD_EXP 45
5346: PUSH
5347: LD_VAR 0 3
5351: UNION
5352: ST_TO_ADDR
// arrivals := arrivals union un ;
5353: LD_ADDR_EXP 46
5357: PUSH
5358: LD_EXP 46
5362: PUSH
5363: LD_VAR 0 3
5367: UNION
5368: ST_TO_ADDR
// end ;
5369: LD_VAR 0 2
5373: RET
// every 0 0$1 do var i ;
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin enable ;
5380: ENABLE
// if not ignoreTarget then
5381: LD_EXP 45
5385: NOT
5386: IFFALSE 5390
// exit ;
5388: GO 5471
// for i in ignoreTarget do
5390: LD_ADDR_VAR 0 1
5394: PUSH
5395: LD_EXP 45
5399: PUSH
5400: FOR_IN
5401: IFFALSE 5469
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5403: LD_INT 22
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 91
5415: PUSH
5416: LD_VAR 0 1
5420: PUSH
5421: LD_INT 10
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: PUSH
5438: LD_EXP 45
5442: DIFF
5443: PUSH
5444: LD_INT 1
5446: GREATER
5447: IFFALSE 5467
// begin ignoreTarget := ignoreTarget diff i ;
5449: LD_ADDR_EXP 45
5453: PUSH
5454: LD_EXP 45
5458: PUSH
5459: LD_VAR 0 1
5463: DIFF
5464: ST_TO_ADDR
// break ;
5465: GO 5469
// end ;
5467: GO 5400
5469: POP
5470: POP
// end ; end_of_file
5471: PPOPN 1
5473: END
// export function PrepareRussian ; var i ; begin
5474: LD_INT 0
5476: PPUSH
5477: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5478: LD_INT 3
5480: PPUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 2
5486: PPUSH
5487: LD_EXP 34
5491: PPUSH
5492: LD_EXP 35
5496: PPUSH
5497: CALL_OW 12
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: LD_INT 4
5507: PPUSH
5508: CALL 6110 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5512: LD_INT 3
5514: PPUSH
5515: LD_INT 3
5517: PPUSH
5518: LD_INT 8
5520: PPUSH
5521: LD_EXP 34
5525: PPUSH
5526: LD_EXP 35
5530: PPUSH
5531: CALL_OW 12
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: CALL 6110 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 3
5551: PPUSH
5552: LD_INT 67
5554: PPUSH
5555: LD_EXP 34
5559: PPUSH
5560: LD_EXP 35
5564: PPUSH
5565: CALL_OW 12
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: CALL 6110 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5580: LD_INT 3
5582: PPUSH
5583: LD_INT 3
5585: PPUSH
5586: LD_INT 21
5588: PPUSH
5589: LD_EXP 34
5593: PPUSH
5594: LD_EXP 35
5598: PPUSH
5599: CALL_OW 12
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: LD_INT 6
5609: PPUSH
5610: CALL 6110 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5614: LD_INT 3
5616: PPUSH
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 17
5622: PPUSH
5623: LD_EXP 34
5627: PPUSH
5628: LD_EXP 35
5632: PPUSH
5633: CALL_OW 12
5637: PPUSH
5638: LD_INT 3
5640: PPUSH
5641: LD_INT 6
5643: PPUSH
5644: CALL 6110 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5648: LD_INT 3
5650: PPUSH
5651: LD_INT 3
5653: PPUSH
5654: LD_INT 32
5656: PPUSH
5657: LD_EXP 34
5661: PPUSH
5662: LD_EXP 35
5666: PPUSH
5667: CALL_OW 12
5671: PPUSH
5672: LD_INT 4
5674: PPUSH
5675: LD_INT 2
5677: PPUSH
5678: CALL 6110 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 21
5699: PUSH
5700: LD_INT 3
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 30
5709: PUSH
5710: LD_INT 32
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 69
5726: PUSH
5727: FOR_IN
5728: IFFALSE 5768
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5730: LD_INT 3
5732: PPUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_EXP 34
5745: PPUSH
5746: LD_EXP 35
5750: PPUSH
5751: CALL_OW 12
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_INT 1
5761: PPUSH
5762: CALL 6110 0 6
5766: GO 5727
5768: POP
5769: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_INT 22
5777: PUSH
5778: LD_INT 3
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 21
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 30
5797: PUSH
5798: LD_INT 31
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5844
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5818: LD_EXP 34
5822: PPUSH
5823: LD_EXP 35
5827: PPUSH
5828: CALL_OW 12
5832: PPUSH
5833: LD_VAR 0 2
5837: PPUSH
5838: CALL 6220 0 2
5842: GO 5815
5844: POP
5845: POP
// end ; end_of_file
5846: LD_VAR 0 1
5850: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
// if exist_mode then
5855: LD_VAR 0 2
5859: IFFALSE 5884
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_EXP 44
5870: PUSH
5871: LD_VAR 0 1
5875: STR
5876: PPUSH
5877: CALL_OW 34
5881: ST_TO_ADDR
// end else
5882: GO 5899
// begin unit := NewCharacter ( ident ) ;
5884: LD_ADDR_VAR 0 4
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 25
5898: ST_TO_ADDR
// end ; result := unit ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 4
5908: ST_TO_ADDR
// end ;
5909: LD_VAR 0 3
5913: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5914: LD_INT 0
5916: PPUSH
5917: PPUSH
5918: PPUSH
// rnd = rand ( 1 , characters ) ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_INT 1
5926: PPUSH
5927: LD_VAR 0 1
5931: PPUSH
5932: CALL_OW 12
5936: ST_TO_ADDR
// for i = 1 to characters do
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: DOUBLE
5943: LD_INT 1
5945: DEC
5946: ST_TO_ADDR
5947: LD_VAR 0 1
5951: PUSH
5952: FOR_TO
5953: IFFALSE 6063
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5955: LD_VAR 0 5
5959: PUSH
5960: LD_VAR 0 6
5964: EQUAL
5965: PUSH
5966: LD_VAR 0 1
5970: PUSH
5971: LD_VAR 0 5
5975: ARRAY
5976: PPUSH
5977: CALL_OW 258
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: AND
5986: IFFALSE 6008
// Say ( characters [ i ] , dialogMID ) ;
5988: LD_VAR 0 1
5992: PUSH
5993: LD_VAR 0 5
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 2
6003: PPUSH
6004: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6008: LD_VAR 0 5
6012: PUSH
6013: LD_VAR 0 6
6017: EQUAL
6018: PUSH
6019: LD_VAR 0 1
6023: PUSH
6024: LD_VAR 0 5
6028: ARRAY
6029: PPUSH
6030: CALL_OW 258
6034: PUSH
6035: LD_INT 2
6037: EQUAL
6038: AND
6039: IFFALSE 6061
// Say ( characters [ i ] , dialogFID ) ;
6041: LD_VAR 0 1
6045: PUSH
6046: LD_VAR 0 5
6050: ARRAY
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 88
// end ;
6061: GO 5952
6063: POP
6064: POP
// end ;
6065: LD_VAR 0 4
6069: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6070: LD_INT 0
6072: PPUSH
6073: PPUSH
// for i in charactersList do
6074: LD_ADDR_VAR 0 4
6078: PUSH
6079: LD_VAR 0 1
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6103
// SaveCharacters ( i , ident ) ;
6087: LD_VAR 0 4
6091: PPUSH
6092: LD_VAR 0 2
6096: PPUSH
6097: CALL_OW 38
6101: GO 6084
6103: POP
6104: POP
// end ;
6105: LD_VAR 0 3
6109: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
6114: PPUSH
6115: PPUSH
// for i = 1 to count do
6116: LD_ADDR_VAR 0 8
6120: PUSH
6121: DOUBLE
6122: LD_INT 1
6124: DEC
6125: ST_TO_ADDR
6126: LD_VAR 0 6
6130: PUSH
6131: FOR_TO
6132: IFFALSE 6213
// begin uc_side = side ;
6134: LD_ADDR_OWVAR 20
6138: PUSH
6139: LD_VAR 0 1
6143: ST_TO_ADDR
// uc_nation = nation ;
6144: LD_ADDR_OWVAR 21
6148: PUSH
6149: LD_VAR 0 2
6153: ST_TO_ADDR
// hc_gallery =  ;
6154: LD_ADDR_OWVAR 33
6158: PUSH
6159: LD_STRING 
6161: ST_TO_ADDR
// hc_name =  ;
6162: LD_ADDR_OWVAR 26
6166: PUSH
6167: LD_STRING 
6169: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6170: LD_INT 0
6172: PPUSH
6173: LD_VAR 0 5
6177: PPUSH
6178: LD_VAR 0 4
6182: PPUSH
6183: CALL_OW 380
// un = CreateHuman ;
6187: LD_ADDR_VAR 0 10
6191: PUSH
6192: CALL_OW 44
6196: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6197: LD_VAR 0 10
6201: PPUSH
6202: LD_VAR 0 3
6206: PPUSH
6207: CALL_OW 52
// end ;
6211: GO 6131
6213: POP
6214: POP
// end ;
6215: LD_VAR 0 7
6219: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6220: LD_INT 0
6222: PPUSH
6223: PPUSH
6224: PPUSH
// uc_side := GetSide ( b ) ;
6225: LD_ADDR_OWVAR 20
6229: PUSH
6230: LD_VAR 0 2
6234: PPUSH
6235: CALL_OW 255
6239: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6240: LD_ADDR_OWVAR 21
6244: PUSH
6245: LD_VAR 0 2
6249: PPUSH
6250: CALL_OW 248
6254: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6255: LD_INT 0
6257: PPUSH
6258: LD_INT 1
6260: PPUSH
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6270: LD_ADDR_VAR 0 5
6274: PUSH
6275: LD_VAR 0 2
6279: PPUSH
6280: CALL_OW 254
6284: PUSH
6285: LD_INT 3
6287: MINUS
6288: ST_TO_ADDR
// if dir < 0 then
6289: LD_VAR 0 5
6293: PUSH
6294: LD_INT 0
6296: LESS
6297: IFFALSE 6313
// dir := 6 + dir ;
6299: LD_ADDR_VAR 0 5
6303: PUSH
6304: LD_INT 6
6306: PUSH
6307: LD_VAR 0 5
6311: PLUS
6312: ST_TO_ADDR
// un := CreateHuman ;
6313: LD_ADDR_VAR 0 4
6317: PUSH
6318: CALL_OW 44
6322: ST_TO_ADDR
// SetDir ( un , dir ) ;
6323: LD_VAR 0 4
6327: PPUSH
6328: LD_VAR 0 5
6332: PPUSH
6333: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6337: LD_VAR 0 4
6341: PPUSH
6342: LD_VAR 0 2
6346: PPUSH
6347: CALL_OW 52
// end ;
6351: LD_VAR 0 3
6355: RET
// export function PrepareDifficulty ; begin
6356: LD_INT 0
6358: PPUSH
// if Difficulty = 1 then
6359: LD_OWVAR 67
6363: PUSH
6364: LD_INT 1
6366: EQUAL
6367: IFFALSE 6385
// begin RuSolMinLevel = 2 ;
6369: LD_ADDR_EXP 34
6373: PUSH
6374: LD_INT 2
6376: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6377: LD_ADDR_EXP 35
6381: PUSH
6382: LD_INT 4
6384: ST_TO_ADDR
// end ; if Difficulty = 2 then
6385: LD_OWVAR 67
6389: PUSH
6390: LD_INT 2
6392: EQUAL
6393: IFFALSE 6411
// begin RuSolMinLevel = 3 ;
6395: LD_ADDR_EXP 34
6399: PUSH
6400: LD_INT 3
6402: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6403: LD_ADDR_EXP 35
6407: PUSH
6408: LD_INT 5
6410: ST_TO_ADDR
// end ; if Difficulty = 3 then
6411: LD_OWVAR 67
6415: PUSH
6416: LD_INT 3
6418: EQUAL
6419: IFFALSE 6437
// begin RuSolMinLevel = 3 ;
6421: LD_ADDR_EXP 34
6425: PUSH
6426: LD_INT 3
6428: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6429: LD_ADDR_EXP 35
6433: PUSH
6434: LD_INT 6
6436: ST_TO_ADDR
// end ; end ;
6437: LD_VAR 0 1
6441: RET
// export function ShowQuery1 ; begin
6442: LD_INT 0
6444: PPUSH
// case query ( QKill ) of 1 :
6445: LD_STRING QKill
6447: PPUSH
6448: CALL_OW 97
6452: PUSH
6453: LD_INT 1
6455: DOUBLE
6456: EQUAL
6457: IFTRUE 6461
6459: GO 6472
6461: POP
// begin result = 1 ;
6462: LD_ADDR_VAR 0 1
6466: PUSH
6467: LD_INT 1
6469: ST_TO_ADDR
// end ; 2 :
6470: GO 6511
6472: LD_INT 2
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6491
6480: POP
// begin result = 2 ;
6481: LD_ADDR_VAR 0 1
6485: PUSH
6486: LD_INT 2
6488: ST_TO_ADDR
// end ; 3 :
6489: GO 6511
6491: LD_INT 3
6493: DOUBLE
6494: EQUAL
6495: IFTRUE 6499
6497: GO 6510
6499: POP
// begin result = 3 ;
6500: LD_ADDR_VAR 0 1
6504: PUSH
6505: LD_INT 3
6507: ST_TO_ADDR
// end ; end ;
6508: GO 6511
6510: POP
// end ;
6511: LD_VAR 0 1
6515: RET
// export function ShowQuery2 ; begin
6516: LD_INT 0
6518: PPUSH
// case query ( QKill2 ) of 1 :
6519: LD_STRING QKill2
6521: PPUSH
6522: CALL_OW 97
6526: PUSH
6527: LD_INT 1
6529: DOUBLE
6530: EQUAL
6531: IFTRUE 6535
6533: GO 6546
6535: POP
// begin result = 1 ;
6536: LD_ADDR_VAR 0 1
6540: PUSH
6541: LD_INT 1
6543: ST_TO_ADDR
// end ; 2 :
6544: GO 6566
6546: LD_INT 2
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6565
6554: POP
// begin result = 2 ;
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: LD_INT 2
6562: ST_TO_ADDR
// end ; end ;
6563: GO 6566
6565: POP
// end ;
6566: LD_VAR 0 1
6570: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6571: LD_INT 0
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6578: LD_ADDR_VAR 0 8
6582: PUSH
6583: LD_INT 48
6585: PUSH
6586: LD_INT 49
6588: PUSH
6589: LD_INT 50
6591: PUSH
6592: LD_INT 20
6594: PUSH
6595: LD_INT 1
6597: PUSH
6598: LD_INT 51
6600: PUSH
6601: LD_INT 52
6603: PUSH
6604: LD_INT 69
6606: PUSH
6607: LD_INT 39
6609: PUSH
6610: LD_INT 34
6612: PUSH
6613: LD_INT 40
6615: PUSH
6616: LD_INT 53
6618: PUSH
6619: LD_INT 71
6621: PUSH
6622: LD_INT 57
6624: PUSH
6625: LD_INT 58
6627: PUSH
6628: LD_INT 44
6630: PUSH
6631: LD_INT 32
6633: PUSH
6634: LD_INT 27
6636: PUSH
6637: LD_INT 23
6639: PUSH
6640: LD_INT 33
6642: PUSH
6643: LD_INT 59
6645: PUSH
6646: LD_INT 54
6648: PUSH
6649: LD_INT 55
6651: PUSH
6652: LD_INT 56
6654: PUSH
6655: LD_INT 63
6657: PUSH
6658: LD_INT 64
6660: PUSH
6661: LD_INT 65
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 31
6669: PUSH
6670: LD_INT 21
6672: PUSH
6673: LD_INT 22
6675: PUSH
6676: LD_INT 25
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6713: LD_ADDR_VAR 0 5
6717: PUSH
6718: DOUBLE
6719: LD_INT 1
6721: DEC
6722: ST_TO_ADDR
6723: LD_VAR 0 8
6727: PUSH
6728: FOR_TO
6729: IFFALSE 6805
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6731: LD_VAR 0 8
6735: PUSH
6736: LD_VAR 0 5
6740: ARRAY
6741: PPUSH
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 321
6751: PUSH
6752: LD_INT 1
6754: EQUAL
6755: PUSH
6756: LD_VAR 0 8
6760: PUSH
6761: LD_VAR 0 5
6765: ARRAY
6766: PPUSH
6767: LD_VAR 0 3
6771: PPUSH
6772: CALL_OW 482
6776: PUSH
6777: LD_INT 1
6779: EQUAL
6780: AND
6781: IFFALSE 6803
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6783: LD_VAR 0 2
6787: PPUSH
6788: LD_VAR 0 8
6792: PUSH
6793: LD_VAR 0 5
6797: ARRAY
6798: PPUSH
6799: CALL_OW 184
6803: GO 6728
6805: POP
6806: POP
// end ;
6807: LD_VAR 0 4
6811: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6812: LD_INT 0
6814: PPUSH
6815: PPUSH
6816: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6817: LD_INT 22
6819: PUSH
6820: LD_VAR 0 1
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 21
6831: PUSH
6832: LD_INT 2
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PUSH
6848: LD_VAR 0 3
6852: LESSEQUAL
6853: IFFALSE 6961
// begin for i = 1 to vehCount do
6855: LD_ADDR_VAR 0 9
6859: PUSH
6860: DOUBLE
6861: LD_INT 1
6863: DEC
6864: ST_TO_ADDR
6865: LD_VAR 0 3
6869: PUSH
6870: FOR_TO
6871: IFFALSE 6959
// begin weapon = weaponTab [ i ] ;
6873: LD_ADDR_VAR 0 10
6877: PUSH
6878: LD_VAR 0 4
6882: PUSH
6883: LD_VAR 0 9
6887: ARRAY
6888: ST_TO_ADDR
// if weapon = 46 then
6889: LD_VAR 0 10
6893: PUSH
6894: LD_INT 46
6896: EQUAL
6897: IFFALSE 6928
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6899: LD_VAR 0 2
6903: PPUSH
6904: LD_INT 24
6906: PPUSH
6907: LD_VAR 0 5
6911: PPUSH
6912: LD_VAR 0 6
6916: PPUSH
6917: LD_VAR 0 10
6921: PPUSH
6922: CALL_OW 185
// end else
6926: GO 6957
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_VAR 0 7
6937: PPUSH
6938: LD_VAR 0 5
6942: PPUSH
6943: LD_VAR 0 6
6947: PPUSH
6948: LD_VAR 0 10
6952: PPUSH
6953: CALL_OW 185
// end ; end ;
6957: GO 6870
6959: POP
6960: POP
// end ; end ;
6961: LD_VAR 0 8
6965: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6966: LD_INT 0
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6972: LD_ADDR_VAR 0 8
6976: PUSH
6977: LD_INT 22
6979: PUSH
6980: LD_VAR 0 1
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 21
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: LD_INT 24
7004: PUSH
7005: LD_INT 650
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: ST_TO_ADDR
// if damageVehicles > 0 then
7026: LD_VAR 0 8
7030: PUSH
7031: LD_INT 0
7033: GREATER
7034: IFFALSE 7055
// ComMoveXY ( damageVehicles , repX , repY ) ;
7036: LD_VAR 0 8
7040: PPUSH
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_VAR 0 4
7050: PPUSH
7051: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7055: LD_VAR 0 8
7059: PPUSH
7060: LD_INT 95
7062: PUSH
7063: LD_VAR 0 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 3
7074: PUSH
7075: LD_INT 58
7077: PUSH
7078: EMPTY
7079: LIST
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 72
7093: PUSH
7094: LD_INT 0
7096: GREATER
7097: IFFALSE 7164
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7099: LD_ADDR_VAR 0 6
7103: PUSH
7104: LD_VAR 0 8
7108: PPUSH
7109: LD_INT 95
7111: PUSH
7112: LD_VAR 0 2
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 3
7123: PUSH
7124: LD_INT 58
7126: PUSH
7127: EMPTY
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PPUSH
7138: CALL_OW 72
7142: PUSH
7143: FOR_IN
7144: IFFALSE 7162
// ComExitVehicle ( UnitsInside ( i ) ) ;
7146: LD_VAR 0 6
7150: PPUSH
7151: CALL_OW 313
7155: PPUSH
7156: CALL_OW 121
7160: GO 7143
7162: POP
7163: POP
// end ;
7164: LD_VAR 0 5
7168: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7169: LD_INT 0
7171: PPUSH
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7178: LD_ADDR_VAR 0 8
7182: PUSH
7183: LD_INT 22
7185: PUSH
7186: LD_VAR 0 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 24
7207: PUSH
7208: LD_INT 660
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 3
7217: PUSH
7218: LD_INT 58
7220: PUSH
7221: EMPTY
7222: LIST
7223: PUSH
7224: LD_INT 2
7226: PUSH
7227: LD_INT 34
7229: PUSH
7230: LD_INT 43
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 34
7239: PUSH
7240: LD_INT 44
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 34
7249: PUSH
7250: LD_INT 46
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7279: LD_INT 22
7281: PUSH
7282: LD_VAR 0 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 21
7293: PUSH
7294: LD_INT 2
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: LD_INT 1000
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: LD_INT 58
7316: PUSH
7317: EMPTY
7318: LIST
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: LD_INT 34
7325: PUSH
7326: LD_INT 43
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 34
7335: PUSH
7336: LD_INT 44
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 34
7345: PUSH
7346: LD_INT 46
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PPUSH
7370: CALL_OW 69
7374: PUSH
7375: LD_INT 5
7377: PUSH
7378: LD_INT 6
7380: PUSH
7381: LD_INT 6
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PUSH
7389: LD_OWVAR 67
7393: ARRAY
7394: EQUAL
7395: IFFALSE 7651
// if seeEnemy = 0 then
7397: LD_VAR 0 11
7401: PUSH
7402: LD_INT 0
7404: EQUAL
7405: IFFALSE 7651
// repeat wait ( 0 0$1 ) ;
7407: LD_INT 35
7409: PPUSH
7410: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7414: LD_ADDR_VAR 0 8
7418: PUSH
7419: LD_INT 22
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 21
7433: PUSH
7434: LD_INT 2
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 24
7443: PUSH
7444: LD_INT 660
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: LD_INT 58
7456: PUSH
7457: EMPTY
7458: LIST
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 34
7465: PUSH
7466: LD_INT 43
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 34
7475: PUSH
7476: LD_INT 44
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 34
7485: PUSH
7486: LD_INT 46
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PPUSH
7510: CALL_OW 69
7514: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7515: LD_INT 22
7517: PUSH
7518: LD_VAR 0 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 95
7529: PUSH
7530: LD_VAR 0 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: NOT
7548: PUSH
7549: LD_VAR 0 11
7553: PUSH
7554: LD_INT 0
7556: EQUAL
7557: AND
7558: IFFALSE 7613
// for i := 1 to wayX do
7560: LD_ADDR_VAR 0 6
7564: PUSH
7565: DOUBLE
7566: LD_INT 1
7568: DEC
7569: ST_TO_ADDR
7570: LD_VAR 0 3
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7611
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7578: LD_VAR 0 8
7582: PPUSH
7583: LD_VAR 0 3
7587: PUSH
7588: LD_VAR 0 6
7592: ARRAY
7593: PPUSH
7594: LD_VAR 0 4
7598: PUSH
7599: LD_VAR 0 6
7603: ARRAY
7604: PPUSH
7605: CALL_OW 114
7609: GO 7575
7611: POP
7612: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7613: LD_INT 22
7615: PUSH
7616: LD_VAR 0 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 95
7627: PUSH
7628: LD_VAR 0 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PPUSH
7641: CALL_OW 69
7645: PUSH
7646: LD_INT 0
7648: GREATER
7649: IFFALSE 7407
// seeEnemy = 1 ;
7651: LD_ADDR_VAR 0 11
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7659: LD_INT 35
7661: PPUSH
7662: CALL_OW 67
// for j in vehiclesOK do
7666: LD_ADDR_VAR 0 7
7670: PUSH
7671: LD_VAR 0 8
7675: PUSH
7676: FOR_IN
7677: IFFALSE 7890
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7679: LD_ADDR_VAR 0 9
7683: PUSH
7684: LD_INT 81
7686: PUSH
7687: LD_VAR 0 1
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: LD_INT 101
7698: PUSH
7699: LD_INT 1
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PUSH
7715: LD_EXP 45
7719: DIFF
7720: PPUSH
7721: LD_VAR 0 7
7725: PPUSH
7726: CALL_OW 74
7730: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7731: LD_ADDR_VAR 0 10
7735: PUSH
7736: LD_INT 81
7738: PUSH
7739: LD_VAR 0 1
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 101
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: LD_INT 2
7760: PUSH
7761: LD_INT 59
7763: PUSH
7764: EMPTY
7765: LIST
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 21
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: PPUSH
7801: CALL_OW 69
7805: PUSH
7806: LD_EXP 45
7810: DIFF
7811: PPUSH
7812: LD_VAR 0 7
7816: PPUSH
7817: CALL_OW 74
7821: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7822: LD_VAR 0 7
7826: PPUSH
7827: LD_VAR 0 9
7831: PPUSH
7832: CALL_OW 296
7836: PUSH
7837: LD_INT 8
7839: PLUS
7840: PUSH
7841: LD_VAR 0 7
7845: PPUSH
7846: LD_VAR 0 10
7850: PPUSH
7851: CALL_OW 296
7855: LESS
7856: IFFALSE 7874
// ComAttackUnit ( j , target1 ) else
7858: LD_VAR 0 7
7862: PPUSH
7863: LD_VAR 0 9
7867: PPUSH
7868: CALL_OW 115
7872: GO 7888
// ComAttackUnit ( j , target2 ) ;
7874: LD_VAR 0 7
7878: PPUSH
7879: LD_VAR 0 10
7883: PPUSH
7884: CALL_OW 115
// end ;
7888: GO 7676
7890: POP
7891: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7892: LD_INT 22
7894: PUSH
7895: LD_VAR 0 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 21
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 24
7916: PUSH
7917: LD_INT 1000
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 58
7929: PUSH
7930: EMPTY
7931: LIST
7932: PUSH
7933: LD_INT 2
7935: PUSH
7936: LD_INT 34
7938: PUSH
7939: LD_INT 43
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 34
7948: PUSH
7949: LD_INT 44
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 34
7958: PUSH
7959: LD_INT 46
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PPUSH
7983: CALL_OW 69
7987: PUSH
7988: LD_INT 0
7990: EQUAL
7991: IFFALSE 7659
// seeEnemy = 0 ;
7993: LD_ADDR_VAR 0 11
7997: PUSH
7998: LD_INT 0
8000: ST_TO_ADDR
// end ;
8001: LD_VAR 0 5
8005: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8006: LD_INT 0
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8014: LD_ADDR_VAR 0 8
8018: PUSH
8019: LD_VAR 0 2
8023: PPUSH
8024: CALL_OW 313
8028: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8029: LD_ADDR_VAR 0 9
8033: PUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 22
8041: PUSH
8042: LD_VAR 0 1
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 25
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 24
8063: PUSH
8064: LD_INT 750
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 54
8076: PUSH
8077: EMPTY
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8095: LD_ADDR_VAR 0 6
8099: PUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_INT 22
8107: PUSH
8108: LD_VAR 0 1
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 21
8119: PUSH
8120: LD_INT 3
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 3
8129: PUSH
8130: LD_INT 24
8132: PUSH
8133: LD_INT 1000
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: PPUSH
8152: CALL_OW 70
8156: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8157: LD_VAR 0 6
8161: NOT
8162: PUSH
8163: LD_INT 22
8165: PUSH
8166: LD_VAR 0 1
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 25
8177: PUSH
8178: LD_INT 2
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 24
8187: PUSH
8188: LD_INT 250
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: NOT
8205: AND
8206: IFFALSE 8210
// exit ;
8208: GO 8392
// if buildings_list > 0 and engineerOkInside then
8210: LD_VAR 0 6
8214: PUSH
8215: LD_INT 0
8217: GREATER
8218: PUSH
8219: LD_VAR 0 8
8223: AND
8224: IFFALSE 8235
// ComExitBuilding ( engineerOkInside ) ;
8226: LD_VAR 0 8
8230: PPUSH
8231: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8235: LD_VAR 0 6
8239: PUSH
8240: LD_INT 0
8242: GREATER
8243: PUSH
8244: LD_VAR 0 9
8248: PUSH
8249: LD_INT 0
8251: GREATER
8252: AND
8253: IFFALSE 8273
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8255: LD_VAR 0 9
8259: PPUSH
8260: LD_VAR 0 6
8264: PUSH
8265: LD_INT 1
8267: ARRAY
8268: PPUSH
8269: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8273: LD_VAR 0 6
8277: PUSH
8278: LD_INT 0
8280: EQUAL
8281: PUSH
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 0
8289: EQUAL
8290: AND
8291: PUSH
8292: LD_VAR 0 9
8296: PUSH
8297: LD_INT 0
8299: GREATER
8300: AND
8301: IFFALSE 8317
// ComEnterUnit ( engineerOkOutside , building ) ;
8303: LD_VAR 0 9
8307: PPUSH
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8317: LD_VAR 0 9
8321: PUSH
8322: LD_INT 0
8324: GREATER
8325: PUSH
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 0
8333: EQUAL
8334: AND
8335: PUSH
8336: LD_VAR 0 4
8340: PUSH
8341: LD_INT 0
8343: GREATER
8344: AND
8345: IFFALSE 8392
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8347: LD_VAR 0 9
8351: PPUSH
8352: LD_VAR 0 4
8356: PUSH
8357: LD_INT 1
8359: ARRAY
8360: PPUSH
8361: LD_VAR 0 4
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PPUSH
8370: LD_VAR 0 4
8374: PUSH
8375: LD_INT 3
8377: ARRAY
8378: PPUSH
8379: LD_VAR 0 4
8383: PUSH
8384: LD_INT 4
8386: ARRAY
8387: PPUSH
8388: CALL_OW 145
// end ;
8392: LD_VAR 0 5
8396: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8397: LD_INT 0
8399: PPUSH
8400: PPUSH
8401: PPUSH
8402: PPUSH
8403: PPUSH
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8408: LD_ADDR_VAR 0 6
8412: PUSH
8413: LD_INT 22
8415: PUSH
8416: LD_VAR 0 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 25
8427: PUSH
8428: LD_INT 4
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 23
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 24
8447: PUSH
8448: LD_INT 251
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PPUSH
8461: CALL_OW 69
8465: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8466: LD_ADDR_VAR 0 7
8470: PUSH
8471: LD_VAR 0 3
8475: PPUSH
8476: LD_INT 22
8478: PUSH
8479: LD_VAR 0 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 23
8490: PUSH
8491: LD_INT 2
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 25
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 50
8510: PUSH
8511: EMPTY
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: PPUSH
8520: CALL_OW 70
8524: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8525: LD_ADDR_VAR 0 10
8529: PUSH
8530: LD_VAR 0 3
8534: PPUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 21
8549: PUSH
8550: LD_INT 1
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: LD_INT 25
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 24
8579: PUSH
8580: LD_INT 750
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: PPUSH
8597: CALL_OW 70
8601: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8602: LD_ADDR_VAR 0 11
8606: PUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: LD_INT 22
8614: PUSH
8615: LD_VAR 0 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 3
8636: PUSH
8637: LD_INT 25
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 3
8653: PUSH
8654: LD_INT 24
8656: PUSH
8657: LD_INT 1000
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: PPUSH
8674: CALL_OW 70
8678: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8679: LD_VAR 0 10
8683: NOT
8684: PUSH
8685: LD_VAR 0 11
8689: NOT
8690: AND
8691: PUSH
8692: LD_VAR 0 6
8696: NOT
8697: AND
8698: IFFALSE 8702
// exit ;
8700: GO 8936
// if damageUnits > 0 and sci_list > 0 then
8702: LD_VAR 0 10
8706: PUSH
8707: LD_INT 0
8709: GREATER
8710: PUSH
8711: LD_VAR 0 6
8715: PUSH
8716: LD_INT 0
8718: GREATER
8719: AND
8720: IFFALSE 8736
// ComMoveToArea ( damageUnits , healArea ) ;
8722: LD_VAR 0 10
8726: PPUSH
8727: LD_VAR 0 2
8731: PPUSH
8732: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8736: LD_VAR 0 11
8740: PUSH
8741: LD_INT 0
8743: GREATER
8744: PUSH
8745: LD_VAR 0 6
8749: PUSH
8750: LD_INT 0
8752: GREATER
8753: AND
8754: IFFALSE 8765
// ComExitBuilding ( sci_list ) ;
8756: LD_VAR 0 6
8760: PPUSH
8761: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8765: LD_VAR 0 11
8769: PUSH
8770: LD_INT 0
8772: GREATER
8773: PUSH
8774: LD_VAR 0 7
8778: PUSH
8779: LD_INT 0
8781: GREATER
8782: AND
8783: IFFALSE 8803
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8785: LD_VAR 0 7
8789: PPUSH
8790: LD_VAR 0 11
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8803: LD_VAR 0 10
8807: PUSH
8808: LD_INT 0
8810: EQUAL
8811: PUSH
8812: LD_VAR 0 11
8816: PUSH
8817: LD_INT 0
8819: EQUAL
8820: AND
8821: PUSH
8822: LD_VAR 0 7
8826: PUSH
8827: LD_INT 0
8829: GREATER
8830: AND
8831: IFFALSE 8936
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8833: LD_ADDR_VAR 0 12
8837: PUSH
8838: LD_INT 22
8840: PUSH
8841: LD_VAR 0 1
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 30
8862: PUSH
8863: LD_INT 8
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 69
8879: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8880: LD_ADDR_VAR 0 13
8884: PUSH
8885: LD_INT 1
8887: PPUSH
8888: LD_VAR 0 12
8892: PPUSH
8893: CALL_OW 12
8897: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8898: LD_VAR 0 7
8902: PPUSH
8903: LD_INT 3
8905: PUSH
8906: LD_INT 60
8908: PUSH
8909: EMPTY
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PPUSH
8916: CALL_OW 72
8920: PPUSH
8921: LD_VAR 0 12
8925: PUSH
8926: LD_VAR 0 13
8930: ARRAY
8931: PPUSH
8932: CALL_OW 120
// end ; end ;
8936: LD_VAR 0 5
8940: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
8945: PPUSH
8946: PPUSH
// tmpTab = [ ] ;
8947: LD_ADDR_VAR 0 6
8951: PUSH
8952: EMPTY
8953: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8954: LD_INT 22
8956: PUSH
8957: LD_VAR 0 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 30
8968: PUSH
8969: LD_INT 32
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: PPUSH
8980: CALL_OW 69
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: IFFALSE 9071
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8990: LD_ADDR_VAR 0 4
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 1
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: LD_INT 30
9009: PUSH
9010: LD_INT 32
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 69
9025: PUSH
9026: FOR_IN
9027: IFFALSE 9069
// begin for j in UnitsInside ( i ) do
9029: LD_ADDR_VAR 0 5
9033: PUSH
9034: LD_VAR 0 4
9038: PPUSH
9039: CALL_OW 313
9043: PUSH
9044: FOR_IN
9045: IFFALSE 9065
// tmpTab = tmpTab ^ j ;
9047: LD_ADDR_VAR 0 6
9051: PUSH
9052: LD_VAR 0 6
9056: PUSH
9057: LD_VAR 0 5
9061: ADD
9062: ST_TO_ADDR
9063: GO 9044
9065: POP
9066: POP
// end ;
9067: GO 9026
9069: POP
9070: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9071: LD_VAR 0 6
9075: PPUSH
9076: LD_VAR 0 2
9080: PPUSH
9081: CALL_OW 250
9085: PPUSH
9086: LD_VAR 0 2
9090: PPUSH
9091: CALL_OW 251
9095: PPUSH
9096: CALL_OW 114
// end ;
9100: LD_VAR 0 3
9104: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
9110: PPUSH
// enable ;
9111: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9112: LD_ADDR_VAR 0 7
9116: PUSH
9117: LD_VAR 0 3
9121: PPUSH
9122: CALL_OW 435
9126: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9127: LD_ADDR_VAR 0 6
9131: PUSH
9132: LD_INT 22
9134: PUSH
9135: LD_VAR 0 1
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 34
9146: PUSH
9147: LD_VAR 0 2
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PPUSH
9160: CALL_OW 69
9164: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9165: LD_VAR 0 6
9169: PUSH
9170: LD_INT 0
9172: GREATER
9173: PUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: CALL_OW 435
9183: AND
9184: PUSH
9185: LD_VAR 0 7
9189: PUSH
9190: LD_INT 0
9192: GREATER
9193: AND
9194: IFFALSE 9243
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9196: LD_VAR 0 6
9200: PUSH
9201: LD_INT 1
9203: ARRAY
9204: PPUSH
9205: LD_VAR 0 7
9209: PUSH
9210: LD_INT 1
9212: ARRAY
9213: PPUSH
9214: LD_VAR 0 7
9218: PUSH
9219: LD_INT 2
9221: ARRAY
9222: PPUSH
9223: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9227: LD_VAR 0 6
9231: PUSH
9232: LD_INT 1
9234: ARRAY
9235: PPUSH
9236: LD_INT 100
9238: PPUSH
9239: CALL_OW 240
// end ; end ;
9243: LD_VAR 0 4
9247: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9248: LD_INT 0
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9258: LD_ADDR_VAR 0 6
9262: PUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_INT 22
9270: PUSH
9271: LD_VAR 0 1
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 56
9282: PUSH
9283: EMPTY
9284: LIST
9285: PUSH
9286: LD_INT 24
9288: PUSH
9289: LD_INT 700
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 3
9298: PUSH
9299: LD_INT 60
9301: PUSH
9302: EMPTY
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 2
9311: PUSH
9312: LD_INT 25
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 25
9324: PUSH
9325: LD_INT 5
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 25
9334: PUSH
9335: LD_INT 8
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 25
9344: PUSH
9345: LD_INT 9
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PPUSH
9366: CALL_OW 70
9370: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9371: LD_ADDR_VAR 0 7
9375: PUSH
9376: LD_VAR 0 2
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_VAR 0 1
9388: PUSH
9389: EMPTY
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 30
9395: PUSH
9396: LD_INT 32
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 58
9405: PUSH
9406: EMPTY
9407: LIST
9408: PUSH
9409: LD_INT 24
9411: PUSH
9412: LD_INT 251
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: PPUSH
9425: CALL_OW 70
9429: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9430: LD_ADDR_VAR 0 9
9434: PUSH
9435: LD_VAR 0 2
9439: PPUSH
9440: LD_INT 22
9442: PUSH
9443: LD_VAR 0 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 2
9454: PUSH
9455: LD_INT 30
9457: PUSH
9458: LD_INT 4
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 251
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: ST_TO_ADDR
// if barrackList > 0 then
9500: LD_VAR 0 9
9504: PUSH
9505: LD_INT 0
9507: GREATER
9508: IFFALSE 9656
// begin if turretList = 0 then
9510: LD_VAR 0 7
9514: PUSH
9515: LD_INT 0
9517: EQUAL
9518: IFFALSE 9560
// begin if soldiers_list > 0 then
9520: LD_VAR 0 6
9524: PUSH
9525: LD_INT 0
9527: GREATER
9528: IFFALSE 9558
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9530: LD_VAR 0 6
9534: PPUSH
9535: LD_VAR 0 9
9539: PUSH
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 9
9547: PPUSH
9548: CALL_OW 12
9552: ARRAY
9553: PPUSH
9554: CALL_OW 120
// end else
9558: GO 9656
// begin for i in barrackList do
9560: LD_ADDR_VAR 0 4
9564: PUSH
9565: LD_VAR 0 9
9569: PUSH
9570: FOR_IN
9571: IFFALSE 9654
// begin insideUnits = UnitsInside ( i ) ;
9573: LD_ADDR_VAR 0 10
9577: PUSH
9578: LD_VAR 0 4
9582: PPUSH
9583: CALL_OW 313
9587: ST_TO_ADDR
// if insideUnits > 0 then
9588: LD_VAR 0 10
9592: PUSH
9593: LD_INT 0
9595: GREATER
9596: IFFALSE 9620
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9598: LD_VAR 0 10
9602: PUSH
9603: LD_INT 1
9605: ARRAY
9606: PPUSH
9607: LD_VAR 0 7
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: CALL_OW 120
// if soldiers_list > 0 then
9620: LD_VAR 0 6
9624: PUSH
9625: LD_INT 0
9627: GREATER
9628: IFFALSE 9652
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9630: LD_VAR 0 6
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PPUSH
9639: LD_VAR 0 7
9643: PUSH
9644: LD_INT 1
9646: ARRAY
9647: PPUSH
9648: CALL_OW 120
// end ;
9652: GO 9570
9654: POP
9655: POP
// end ; end ; end ;
9656: LD_VAR 0 3
9660: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9661: LD_INT 0
9663: PPUSH
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9668: LD_ADDR_VAR 0 6
9672: PUSH
9673: LD_INT 22
9675: PUSH
9676: LD_VAR 0 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 2
9687: PUSH
9688: LD_INT 30
9690: PUSH
9691: LD_INT 31
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 30
9700: PUSH
9701: LD_INT 32
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 33
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 30
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 30
9730: PUSH
9731: LD_INT 5
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9755: LD_ADDR_VAR 0 7
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_VAR 0 2
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 21
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 58
9784: PUSH
9785: EMPTY
9786: LIST
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: PPUSH
9793: CALL_OW 69
9797: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9798: LD_VAR 0 6
9802: PUSH
9803: LD_INT 0
9805: GREATER
9806: PUSH
9807: LD_VAR 0 7
9811: PUSH
9812: LD_INT 0
9814: GREATER
9815: AND
9816: IFFALSE 9886
// begin for i in turretsList do
9818: LD_ADDR_VAR 0 4
9822: PUSH
9823: LD_VAR 0 6
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9884
// begin for j in enemyBuildings do
9831: LD_ADDR_VAR 0 5
9835: PUSH
9836: LD_VAR 0 7
9840: PUSH
9841: FOR_IN
9842: IFFALSE 9880
// begin if GetDistUnits ( i , j ) < 20 then
9844: LD_VAR 0 4
9848: PPUSH
9849: LD_VAR 0 5
9853: PPUSH
9854: CALL_OW 296
9858: PUSH
9859: LD_INT 20
9861: LESS
9862: IFFALSE 9878
// begin ComAttackUnit ( i , j ) ;
9864: LD_VAR 0 4
9868: PPUSH
9869: LD_VAR 0 5
9873: PPUSH
9874: CALL_OW 115
// end ; end ;
9878: GO 9841
9880: POP
9881: POP
// end ;
9882: GO 9828
9884: POP
9885: POP
// end ; end ;
9886: LD_VAR 0 3
9890: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9891: LD_INT 0
9893: PPUSH
9894: PPUSH
9895: PPUSH
9896: PPUSH
9897: PPUSH
9898: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9899: LD_ADDR_VAR 0 8
9903: PUSH
9904: LD_INT 22
9906: PUSH
9907: LD_VAR 0 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 34
9928: PUSH
9929: LD_INT 52
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9946: LD_ADDR_VAR 0 9
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_VAR 0 1
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 21
9965: PUSH
9966: LD_INT 3
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 3
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: LD_INT 1000
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: PPUSH
9998: CALL_OW 69
10002: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10003: LD_VAR 0 9
10007: PUSH
10008: LD_INT 0
10010: GREATER
10011: PUSH
10012: LD_VAR 0 8
10016: PPUSH
10017: LD_INT 24
10019: PUSH
10020: LD_INT 750
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PPUSH
10027: CALL_OW 72
10031: PUSH
10032: LD_INT 0
10034: GREATER
10035: AND
10036: IFFALSE 10071
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10038: LD_VAR 0 8
10042: PPUSH
10043: LD_INT 24
10045: PUSH
10046: LD_INT 750
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PPUSH
10053: CALL_OW 72
10057: PPUSH
10058: LD_VAR 0 9
10062: PUSH
10063: LD_INT 1
10065: ARRAY
10066: PPUSH
10067: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10071: LD_VAR 0 8
10075: PPUSH
10076: LD_INT 3
10078: PUSH
10079: LD_INT 24
10081: PUSH
10082: LD_INT 750
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PPUSH
10093: CALL_OW 72
10097: PUSH
10098: LD_INT 0
10100: GREATER
10101: IFFALSE 10139
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10103: LD_VAR 0 8
10107: PPUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: LD_INT 750
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PPUSH
10125: CALL_OW 72
10129: PPUSH
10130: LD_VAR 0 2
10134: PPUSH
10135: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10139: LD_VAR 0 8
10143: PUSH
10144: LD_INT 0
10146: GREATER
10147: PUSH
10148: LD_VAR 0 9
10152: PUSH
10153: LD_INT 0
10155: EQUAL
10156: AND
10157: PUSH
10158: LD_VAR 0 3
10162: PUSH
10163: LD_INT 0
10165: GREATER
10166: AND
10167: IFFALSE 10214
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10169: LD_VAR 0 8
10173: PPUSH
10174: LD_VAR 0 3
10178: PUSH
10179: LD_INT 1
10181: ARRAY
10182: PPUSH
10183: LD_VAR 0 3
10187: PUSH
10188: LD_INT 2
10190: ARRAY
10191: PPUSH
10192: LD_VAR 0 3
10196: PUSH
10197: LD_INT 3
10199: ARRAY
10200: PPUSH
10201: LD_VAR 0 3
10205: PUSH
10206: LD_INT 4
10208: ARRAY
10209: PPUSH
10210: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10214: LD_VAR 0 2
10218: PPUSH
10219: LD_INT 22
10221: PUSH
10222: LD_VAR 0 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 2
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 34
10243: PUSH
10244: LD_INT 52
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 750
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 70
10278: PUSH
10279: LD_INT 0
10281: GREATER
10282: IFFALSE 10484
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10284: LD_ADDR_VAR 0 5
10288: PUSH
10289: LD_VAR 0 2
10293: PPUSH
10294: LD_INT 22
10296: PUSH
10297: LD_VAR 0 1
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 21
10308: PUSH
10309: LD_INT 2
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 34
10318: PUSH
10319: LD_INT 52
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: LD_INT 24
10331: PUSH
10332: LD_INT 750
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 70
10353: PUSH
10354: FOR_IN
10355: IFFALSE 10482
// begin mechTmp = UnitsInside ( i ) ;
10357: LD_ADDR_VAR 0 6
10361: PUSH
10362: LD_VAR 0 5
10366: PPUSH
10367: CALL_OW 313
10371: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10372: LD_VAR 0 6
10376: PPUSH
10377: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10381: LD_VAR 0 6
10385: PPUSH
10386: LD_VAR 0 7
10390: PPUSH
10391: CALL_OW 189
// wait ( 0 0$2 ) ;
10395: LD_INT 70
10397: PPUSH
10398: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10402: LD_VAR 0 6
10406: PPUSH
10407: LD_VAR 0 2
10411: PPUSH
10412: LD_INT 22
10414: PUSH
10415: LD_VAR 0 1
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 21
10426: PUSH
10427: LD_INT 2
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 34
10436: PUSH
10437: LD_INT 52
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 24
10446: PUSH
10447: LD_INT 1000
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 58
10456: PUSH
10457: EMPTY
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: PPUSH
10467: CALL_OW 70
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: CALL_OW 180
// end ;
10480: GO 10354
10482: POP
10483: POP
// end ; end ;
10484: LD_VAR 0 4
10488: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10489: LD_INT 0
10491: PPUSH
10492: PPUSH
10493: PPUSH
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
// for i = 1 to medicCount do
10502: LD_ADDR_VAR 0 14
10506: PUSH
10507: DOUBLE
10508: LD_INT 1
10510: DEC
10511: ST_TO_ADDR
10512: LD_VAR 0 7
10516: PUSH
10517: FOR_TO
10518: IFFALSE 10600
// begin uc_side = side ;
10520: LD_ADDR_OWVAR 20
10524: PUSH
10525: LD_VAR 0 1
10529: ST_TO_ADDR
// uc_nation = nation ;
10530: LD_ADDR_OWVAR 21
10534: PUSH
10535: LD_VAR 0 2
10539: ST_TO_ADDR
// hc_name =  ;
10540: LD_ADDR_OWVAR 26
10544: PUSH
10545: LD_STRING 
10547: ST_TO_ADDR
// hc_gallery =  ;
10548: LD_ADDR_OWVAR 33
10552: PUSH
10553: LD_STRING 
10555: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10556: LD_INT 0
10558: PPUSH
10559: LD_INT 4
10561: PPUSH
10562: LD_VAR 0 8
10566: PPUSH
10567: CALL_OW 380
// un = CreateHuman ;
10571: LD_ADDR_VAR 0 16
10575: PUSH
10576: CALL_OW 44
10580: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10581: LD_VAR 0 16
10585: PPUSH
10586: LD_VAR 0 9
10590: PPUSH
10591: LD_INT 0
10593: PPUSH
10594: CALL_OW 49
// end ;
10598: GO 10517
10600: POP
10601: POP
// for i = 1 to soldierCount do
10602: LD_ADDR_VAR 0 14
10606: PUSH
10607: DOUBLE
10608: LD_INT 1
10610: DEC
10611: ST_TO_ADDR
10612: LD_VAR 0 3
10616: PUSH
10617: FOR_TO
10618: IFFALSE 10700
// begin uc_side = side ;
10620: LD_ADDR_OWVAR 20
10624: PUSH
10625: LD_VAR 0 1
10629: ST_TO_ADDR
// uc_nation = nation ;
10630: LD_ADDR_OWVAR 21
10634: PUSH
10635: LD_VAR 0 2
10639: ST_TO_ADDR
// hc_name =  ;
10640: LD_ADDR_OWVAR 26
10644: PUSH
10645: LD_STRING 
10647: ST_TO_ADDR
// hc_gallery =  ;
10648: LD_ADDR_OWVAR 33
10652: PUSH
10653: LD_STRING 
10655: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10656: LD_INT 0
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_VAR 0 8
10666: PPUSH
10667: CALL_OW 380
// un = CreateHuman ;
10671: LD_ADDR_VAR 0 16
10675: PUSH
10676: CALL_OW 44
10680: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10681: LD_VAR 0 16
10685: PPUSH
10686: LD_VAR 0 9
10690: PPUSH
10691: LD_INT 0
10693: PPUSH
10694: CALL_OW 49
// end ;
10698: GO 10617
10700: POP
10701: POP
// for i = 1 to sniperCount do
10702: LD_ADDR_VAR 0 14
10706: PUSH
10707: DOUBLE
10708: LD_INT 1
10710: DEC
10711: ST_TO_ADDR
10712: LD_VAR 0 4
10716: PUSH
10717: FOR_TO
10718: IFFALSE 10800
// begin uc_side = side ;
10720: LD_ADDR_OWVAR 20
10724: PUSH
10725: LD_VAR 0 1
10729: ST_TO_ADDR
// uc_nation = nation ;
10730: LD_ADDR_OWVAR 21
10734: PUSH
10735: LD_VAR 0 2
10739: ST_TO_ADDR
// hc_name =  ;
10740: LD_ADDR_OWVAR 26
10744: PUSH
10745: LD_STRING 
10747: ST_TO_ADDR
// hc_gallery =  ;
10748: LD_ADDR_OWVAR 33
10752: PUSH
10753: LD_STRING 
10755: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10756: LD_INT 0
10758: PPUSH
10759: LD_INT 5
10761: PPUSH
10762: LD_VAR 0 8
10766: PPUSH
10767: CALL_OW 380
// un = CreateHuman ;
10771: LD_ADDR_VAR 0 16
10775: PUSH
10776: CALL_OW 44
10780: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10781: LD_VAR 0 16
10785: PPUSH
10786: LD_VAR 0 9
10790: PPUSH
10791: LD_INT 0
10793: PPUSH
10794: CALL_OW 49
// end ;
10798: GO 10717
10800: POP
10801: POP
// for i = 1 to bazookCount do
10802: LD_ADDR_VAR 0 14
10806: PUSH
10807: DOUBLE
10808: LD_INT 1
10810: DEC
10811: ST_TO_ADDR
10812: LD_VAR 0 5
10816: PUSH
10817: FOR_TO
10818: IFFALSE 10900
// begin uc_side = side ;
10820: LD_ADDR_OWVAR 20
10824: PUSH
10825: LD_VAR 0 1
10829: ST_TO_ADDR
// uc_nation = nation ;
10830: LD_ADDR_OWVAR 21
10834: PUSH
10835: LD_VAR 0 2
10839: ST_TO_ADDR
// hc_name =  ;
10840: LD_ADDR_OWVAR 26
10844: PUSH
10845: LD_STRING 
10847: ST_TO_ADDR
// hc_gallery =  ;
10848: LD_ADDR_OWVAR 33
10852: PUSH
10853: LD_STRING 
10855: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10856: LD_INT 0
10858: PPUSH
10859: LD_INT 9
10861: PPUSH
10862: LD_VAR 0 8
10866: PPUSH
10867: CALL_OW 380
// un = CreateHuman ;
10871: LD_ADDR_VAR 0 16
10875: PUSH
10876: CALL_OW 44
10880: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10881: LD_VAR 0 16
10885: PPUSH
10886: LD_VAR 0 9
10890: PPUSH
10891: LD_INT 0
10893: PPUSH
10894: CALL_OW 49
// end ;
10898: GO 10817
10900: POP
10901: POP
// for i = 1 to mortalCount do
10902: LD_ADDR_VAR 0 14
10906: PUSH
10907: DOUBLE
10908: LD_INT 1
10910: DEC
10911: ST_TO_ADDR
10912: LD_VAR 0 6
10916: PUSH
10917: FOR_TO
10918: IFFALSE 11000
// begin uc_side = side ;
10920: LD_ADDR_OWVAR 20
10924: PUSH
10925: LD_VAR 0 1
10929: ST_TO_ADDR
// uc_nation = nation ;
10930: LD_ADDR_OWVAR 21
10934: PUSH
10935: LD_VAR 0 2
10939: ST_TO_ADDR
// hc_name =  ;
10940: LD_ADDR_OWVAR 26
10944: PUSH
10945: LD_STRING 
10947: ST_TO_ADDR
// hc_gallery =  ;
10948: LD_ADDR_OWVAR 33
10952: PUSH
10953: LD_STRING 
10955: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10956: LD_INT 0
10958: PPUSH
10959: LD_INT 8
10961: PPUSH
10962: LD_VAR 0 8
10966: PPUSH
10967: CALL_OW 380
// un = CreateHuman ;
10971: LD_ADDR_VAR 0 16
10975: PUSH
10976: CALL_OW 44
10980: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10981: LD_VAR 0 16
10985: PPUSH
10986: LD_VAR 0 9
10990: PPUSH
10991: LD_INT 0
10993: PPUSH
10994: CALL_OW 49
// end ;
10998: GO 10917
11000: POP
11001: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11002: LD_ADDR_VAR 0 19
11006: PUSH
11007: LD_INT 22
11009: PUSH
11010: LD_VAR 0 1
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 25
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 5
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 8
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 25
11054: PUSH
11055: LD_INT 9
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 69
11077: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11078: LD_ADDR_VAR 0 18
11082: PUSH
11083: LD_INT 22
11085: PUSH
11086: LD_VAR 0 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 25
11097: PUSH
11098: LD_INT 4
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL_OW 69
11113: ST_TO_ADDR
// for i in medic_list do
11114: LD_ADDR_VAR 0 14
11118: PUSH
11119: LD_VAR 0 18
11123: PUSH
11124: FOR_IN
11125: IFFALSE 11143
// ComMoveToArea ( i , healArea ) ;
11127: LD_VAR 0 14
11131: PPUSH
11132: LD_VAR 0 10
11136: PPUSH
11137: CALL_OW 113
11141: GO 11124
11143: POP
11144: POP
// if strategy = 1 then
11145: LD_VAR 0 12
11149: PUSH
11150: LD_INT 1
11152: EQUAL
11153: IFFALSE 11870
// begin repeat wait ( 0 0$3 ) ;
11155: LD_INT 105
11157: PPUSH
11158: CALL_OW 67
// for i in soldiersOK_list do
11162: LD_ADDR_VAR 0 14
11166: PUSH
11167: LD_VAR 0 19
11171: PUSH
11172: FOR_IN
11173: IFFALSE 11207
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11175: LD_VAR 0 14
11179: PPUSH
11180: LD_INT 80
11182: PPUSH
11183: LD_INT 109
11185: PPUSH
11186: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11190: LD_VAR 0 14
11194: PPUSH
11195: LD_INT 39
11197: PPUSH
11198: LD_INT 49
11200: PPUSH
11201: CALL_OW 174
// end ;
11205: GO 11172
11207: POP
11208: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11209: LD_INT 13
11211: PPUSH
11212: LD_INT 22
11214: PUSH
11215: LD_VAR 0 1
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 70
11228: PUSH
11229: LD_INT 0
11231: GREATER
11232: IFFALSE 11155
// repeat wait ( 0 0$1 ) ;
11234: LD_INT 35
11236: PPUSH
11237: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11241: LD_ADDR_VAR 0 17
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_VAR 0 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: LD_INT 24
11266: PUSH
11267: LD_INT 550
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 24
11280: PUSH
11281: LD_INT 250
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 69
11301: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11302: LD_ADDR_VAR 0 19
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_VAR 0 1
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: LD_INT 25
11324: PUSH
11325: LD_INT 1
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 25
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 8
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 25
11354: PUSH
11355: LD_INT 9
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 24
11371: PUSH
11372: LD_INT 1000
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: PPUSH
11384: CALL_OW 69
11388: ST_TO_ADDR
// if medicCount > 0 then
11389: LD_VAR 0 7
11393: PUSH
11394: LD_INT 0
11396: GREATER
11397: IFFALSE 11471
// begin if damageUnit_list > 0 then
11399: LD_VAR 0 17
11403: PUSH
11404: LD_INT 0
11406: GREATER
11407: IFFALSE 11471
// begin for i in damageUnit_list do
11409: LD_ADDR_VAR 0 14
11413: PUSH
11414: LD_VAR 0 17
11418: PUSH
11419: FOR_IN
11420: IFFALSE 11469
// begin ComMoveToArea ( i , healArea ) ;
11422: LD_VAR 0 14
11426: PPUSH
11427: LD_VAR 0 10
11431: PPUSH
11432: CALL_OW 113
// for j in medic_list do
11436: LD_ADDR_VAR 0 15
11440: PUSH
11441: LD_VAR 0 18
11445: PUSH
11446: FOR_IN
11447: IFFALSE 11465
// AddComHeal ( j , i ) ;
11449: LD_VAR 0 15
11453: PPUSH
11454: LD_VAR 0 14
11458: PPUSH
11459: CALL_OW 188
11463: GO 11446
11465: POP
11466: POP
// end ;
11467: GO 11419
11469: POP
11470: POP
// end ; end ; for i in soldiersOK_list do
11471: LD_ADDR_VAR 0 14
11475: PUSH
11476: LD_VAR 0 19
11480: PUSH
11481: FOR_IN
11482: IFFALSE 11664
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11484: LD_ADDR_VAR 0 22
11488: PUSH
11489: LD_INT 22
11491: PUSH
11492: LD_VAR 0 11
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 69
11505: PUSH
11506: LD_EXP 45
11510: DIFF
11511: PPUSH
11512: LD_VAR 0 14
11516: PPUSH
11517: CALL_OW 74
11521: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11522: LD_ADDR_VAR 0 23
11526: PUSH
11527: LD_INT 22
11529: PUSH
11530: LD_VAR 0 11
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 59
11544: PUSH
11545: EMPTY
11546: LIST
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: PPUSH
11586: LD_VAR 0 14
11590: PPUSH
11591: CALL_OW 74
11595: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11596: LD_VAR 0 14
11600: PPUSH
11601: LD_VAR 0 22
11605: PPUSH
11606: CALL_OW 296
11610: PUSH
11611: LD_INT 8
11613: PLUS
11614: PUSH
11615: LD_VAR 0 14
11619: PPUSH
11620: LD_VAR 0 23
11624: PPUSH
11625: CALL_OW 296
11629: LESS
11630: IFFALSE 11648
// begin ComAttackUnit ( i , target1 ) ;
11632: LD_VAR 0 14
11636: PPUSH
11637: LD_VAR 0 22
11641: PPUSH
11642: CALL_OW 115
// end else
11646: GO 11662
// begin ComAttackUnit ( i , target2 ) ;
11648: LD_VAR 0 14
11652: PPUSH
11653: LD_VAR 0 23
11657: PPUSH
11658: CALL_OW 115
// end ; end ;
11662: GO 11481
11664: POP
11665: POP
// for i in soldiersOK_list do
11666: LD_ADDR_VAR 0 14
11670: PUSH
11671: LD_VAR 0 19
11675: PUSH
11676: FOR_IN
11677: IFFALSE 11859
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11679: LD_ADDR_VAR 0 22
11683: PUSH
11684: LD_INT 22
11686: PUSH
11687: LD_VAR 0 11
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: PUSH
11701: LD_EXP 45
11705: DIFF
11706: PPUSH
11707: LD_VAR 0 14
11711: PPUSH
11712: CALL_OW 74
11716: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11717: LD_ADDR_VAR 0 23
11721: PUSH
11722: LD_INT 22
11724: PUSH
11725: LD_VAR 0 11
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: LD_INT 59
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: LD_INT 21
11745: PUSH
11746: LD_INT 1
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 21
11755: PUSH
11756: LD_INT 2
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: PPUSH
11776: CALL_OW 69
11780: PPUSH
11781: LD_VAR 0 14
11785: PPUSH
11786: CALL_OW 74
11790: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11791: LD_VAR 0 14
11795: PPUSH
11796: LD_VAR 0 22
11800: PPUSH
11801: CALL_OW 296
11805: PUSH
11806: LD_INT 8
11808: PLUS
11809: PUSH
11810: LD_VAR 0 14
11814: PPUSH
11815: LD_VAR 0 23
11819: PPUSH
11820: CALL_OW 296
11824: LESS
11825: IFFALSE 11843
// begin ComAttackUnit ( i , target1 ) ;
11827: LD_VAR 0 14
11831: PPUSH
11832: LD_VAR 0 22
11836: PPUSH
11837: CALL_OW 115
// end else
11841: GO 11857
// begin ComAttackUnit ( i , target2 ) ;
11843: LD_VAR 0 14
11847: PPUSH
11848: LD_VAR 0 23
11852: PPUSH
11853: CALL_OW 115
// end ; end ;
11857: GO 11676
11859: POP
11860: POP
// until soldiersOK_list = [ ] ;
11861: LD_VAR 0 19
11865: PUSH
11866: EMPTY
11867: EQUAL
11868: IFFALSE 11234
// end ; if strategy = 2 then
11870: LD_VAR 0 12
11874: PUSH
11875: LD_INT 2
11877: EQUAL
11878: IFFALSE 12583
// begin repeat wait ( 0 0$1 ) ;
11880: LD_INT 35
11882: PPUSH
11883: CALL_OW 67
// for i in soldiersOK_list do
11887: LD_ADDR_VAR 0 14
11891: PUSH
11892: LD_VAR 0 19
11896: PUSH
11897: FOR_IN
11898: IFFALSE 11932
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11900: LD_VAR 0 14
11904: PPUSH
11905: LD_INT 117
11907: PPUSH
11908: LD_INT 97
11910: PPUSH
11911: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11915: LD_VAR 0 14
11919: PPUSH
11920: LD_INT 94
11922: PPUSH
11923: LD_INT 50
11925: PPUSH
11926: CALL_OW 174
// end ;
11930: GO 11897
11932: POP
11933: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11934: LD_INT 14
11936: PPUSH
11937: LD_INT 22
11939: PUSH
11940: LD_VAR 0 1
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: PUSH
11954: LD_INT 0
11956: GREATER
11957: IFFALSE 11880
// repeat wait ( 0 0$3 ) ;
11959: LD_INT 105
11961: PPUSH
11962: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11966: LD_ADDR_VAR 0 17
11970: PUSH
11971: LD_INT 22
11973: PUSH
11974: LD_VAR 0 1
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 24
11991: PUSH
11992: LD_INT 550
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 24
12005: PUSH
12006: LD_INT 250
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PPUSH
12022: CALL_OW 69
12026: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12027: LD_ADDR_VAR 0 19
12031: PUSH
12032: LD_INT 22
12034: PUSH
12035: LD_VAR 0 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 25
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 25
12059: PUSH
12060: LD_INT 5
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 25
12069: PUSH
12070: LD_INT 8
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 25
12079: PUSH
12080: LD_INT 9
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 24
12096: PUSH
12097: LD_INT 1000
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 69
12113: ST_TO_ADDR
// if medicCount > 0 then
12114: LD_VAR 0 7
12118: PUSH
12119: LD_INT 0
12121: GREATER
12122: IFFALSE 12196
// begin if damageUnit_list > 0 then
12124: LD_VAR 0 17
12128: PUSH
12129: LD_INT 0
12131: GREATER
12132: IFFALSE 12196
// begin for i in damageUnit_list do
12134: LD_ADDR_VAR 0 14
12138: PUSH
12139: LD_VAR 0 17
12143: PUSH
12144: FOR_IN
12145: IFFALSE 12194
// begin ComMoveToArea ( i , healArea ) ;
12147: LD_VAR 0 14
12151: PPUSH
12152: LD_VAR 0 10
12156: PPUSH
12157: CALL_OW 113
// for j in medic_list do
12161: LD_ADDR_VAR 0 15
12165: PUSH
12166: LD_VAR 0 18
12170: PUSH
12171: FOR_IN
12172: IFFALSE 12190
// AddComHeal ( j , i ) ;
12174: LD_VAR 0 15
12178: PPUSH
12179: LD_VAR 0 14
12183: PPUSH
12184: CALL_OW 188
12188: GO 12171
12190: POP
12191: POP
// end ;
12192: GO 12144
12194: POP
12195: POP
// end ; end ; for i in soldiersOK_list do
12196: LD_ADDR_VAR 0 14
12200: PUSH
12201: LD_VAR 0 19
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12383
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12209: LD_ADDR_VAR 0 22
12213: PUSH
12214: LD_INT 22
12216: PUSH
12217: LD_VAR 0 11
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: PPUSH
12231: LD_VAR 0 14
12235: PPUSH
12236: CALL_OW 74
12240: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12241: LD_ADDR_VAR 0 23
12245: PUSH
12246: LD_INT 22
12248: PUSH
12249: LD_VAR 0 11
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: LD_INT 59
12263: PUSH
12264: EMPTY
12265: LIST
12266: PUSH
12267: LD_INT 21
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 2
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: PPUSH
12300: CALL_OW 69
12304: PPUSH
12305: LD_VAR 0 14
12309: PPUSH
12310: CALL_OW 74
12314: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12315: LD_VAR 0 14
12319: PPUSH
12320: LD_VAR 0 22
12324: PPUSH
12325: CALL_OW 296
12329: PUSH
12330: LD_INT 8
12332: PLUS
12333: PUSH
12334: LD_VAR 0 14
12338: PPUSH
12339: LD_VAR 0 23
12343: PPUSH
12344: CALL_OW 296
12348: LESS
12349: IFFALSE 12367
// begin ComAttackUnit ( i , target1 ) ;
12351: LD_VAR 0 14
12355: PPUSH
12356: LD_VAR 0 22
12360: PPUSH
12361: CALL_OW 115
// end else
12365: GO 12381
// begin ComAttackUnit ( i , target2 ) ;
12367: LD_VAR 0 14
12371: PPUSH
12372: LD_VAR 0 23
12376: PPUSH
12377: CALL_OW 115
// end ; end ;
12381: GO 12206
12383: POP
12384: POP
// for i in soldiersOK_list do
12385: LD_ADDR_VAR 0 14
12389: PUSH
12390: LD_VAR 0 19
12394: PUSH
12395: FOR_IN
12396: IFFALSE 12572
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12398: LD_ADDR_VAR 0 22
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_VAR 0 11
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: PPUSH
12420: LD_VAR 0 14
12424: PPUSH
12425: CALL_OW 74
12429: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12430: LD_ADDR_VAR 0 23
12434: PUSH
12435: LD_INT 22
12437: PUSH
12438: LD_VAR 0 11
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 2
12449: PUSH
12450: LD_INT 59
12452: PUSH
12453: EMPTY
12454: LIST
12455: PUSH
12456: LD_INT 21
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: PPUSH
12494: LD_VAR 0 14
12498: PPUSH
12499: CALL_OW 74
12503: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12504: LD_VAR 0 14
12508: PPUSH
12509: LD_VAR 0 22
12513: PPUSH
12514: CALL_OW 296
12518: PUSH
12519: LD_INT 8
12521: PLUS
12522: PUSH
12523: LD_VAR 0 14
12527: PPUSH
12528: LD_VAR 0 23
12532: PPUSH
12533: CALL_OW 296
12537: LESS
12538: IFFALSE 12556
// begin ComAttackUnit ( i , target1 ) ;
12540: LD_VAR 0 14
12544: PPUSH
12545: LD_VAR 0 22
12549: PPUSH
12550: CALL_OW 115
// end else
12554: GO 12570
// begin ComAttackUnit ( i , target2 ) ;
12556: LD_VAR 0 14
12560: PPUSH
12561: LD_VAR 0 23
12565: PPUSH
12566: CALL_OW 115
// end ; end ;
12570: GO 12395
12572: POP
12573: POP
// until soldiersOK_list = [ ] ;
12574: LD_VAR 0 19
12578: PUSH
12579: EMPTY
12580: EQUAL
12581: IFFALSE 11959
// end ; end ; end_of_file
12583: LD_VAR 0 13
12587: RET
// every 0 0$01 do
12588: GO 12590
12590: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12591: LD_INT 22
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: PUSH
12620: LD_INT 0
12622: EQUAL
12623: IFFALSE 12637
// SetClass ( JMM , 2 ) ;
12625: LD_EXP 1
12629: PPUSH
12630: LD_INT 2
12632: PPUSH
12633: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12637: LD_STRING M1
12639: PPUSH
12640: CALL_OW 337
// case difficulty of 1 :
12644: LD_OWVAR 67
12648: PUSH
12649: LD_INT 1
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12667
12657: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12658: LD_STRING M1-1
12660: PPUSH
12661: CALL_OW 337
12665: GO 12704
12667: LD_INT 2
12669: DOUBLE
12670: EQUAL
12671: IFTRUE 12675
12673: GO 12685
12675: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12676: LD_STRING M1-2
12678: PPUSH
12679: CALL_OW 337
12683: GO 12704
12685: LD_INT 3
12687: DOUBLE
12688: EQUAL
12689: IFTRUE 12693
12691: GO 12703
12693: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12694: LD_STRING M1-3
12696: PPUSH
12697: CALL_OW 337
12701: GO 12704
12703: POP
// ChangeMissionObjectives ( M1cont ) ;
12704: LD_STRING M1cont
12706: PPUSH
12707: CALL_OW 337
// SaveForQuickRestart ;
12711: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12715: LD_INT 525
12717: PPUSH
12718: LD_INT 700
12720: PPUSH
12721: CALL_OW 12
12725: PPUSH
12726: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12730: LD_INT 5
12732: PPUSH
12733: LD_INT 82
12735: PPUSH
12736: LD_INT 38
12738: PPUSH
12739: LD_INT 10
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 56
// wait ( 0 0$14 ) ;
12749: LD_INT 490
12751: PPUSH
12752: CALL_OW 67
// firstCrateSpawn := true ;
12756: LD_ADDR_EXP 41
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// end ;
12764: END
// every 0 0$02 trigger firstCrateSpawn do
12765: LD_EXP 41
12769: IFFALSE 13132
12771: GO 12773
12773: DISABLE
// begin if IsOk ( Lisa ) then
12774: LD_EXP 2
12778: PPUSH
12779: CALL_OW 302
12783: IFFALSE 12799
// Say ( Lisa , DR0-Lisa-1 ) else
12785: LD_EXP 2
12789: PPUSH
12790: LD_STRING DR0-Lisa-1
12792: PPUSH
12793: CALL_OW 88
12797: GO 12945
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 21
12811: PUSH
12812: LD_INT 1
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 26
12821: PUSH
12822: LD_INT 1
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: LD_INT 25
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 25
12844: PUSH
12845: LD_INT 2
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 25
12864: PUSH
12865: LD_INT 4
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 69
12889: PUSH
12890: LD_EXP 1
12894: PUSH
12895: LD_EXP 8
12899: PUSH
12900: LD_EXP 5
12904: PUSH
12905: LD_EXP 6
12909: PUSH
12910: LD_EXP 7
12914: PUSH
12915: LD_EXP 4
12919: PUSH
12920: LD_EXP 3
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: DIFF
12934: PPUSH
12935: LD_STRING DR0-Sol1-1
12937: PPUSH
12938: LD_STRING DR0-Sol1-1
12940: PPUSH
12941: CALL 5914 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12945: LD_INT 22
12947: PUSH
12948: LD_INT 1
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 21
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 26
12967: PUSH
12968: LD_INT 1
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: LD_INT 2
12977: PUSH
12978: LD_INT 25
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 25
12990: PUSH
12991: LD_INT 2
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 25
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 25
13010: PUSH
13011: LD_INT 4
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: PUSH
13036: LD_EXP 1
13040: PUSH
13041: LD_EXP 8
13045: PUSH
13046: LD_EXP 5
13050: PUSH
13051: LD_EXP 2
13055: PUSH
13056: LD_EXP 6
13060: PUSH
13061: LD_EXP 7
13065: PUSH
13066: LD_EXP 4
13070: PUSH
13071: LD_EXP 3
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: DIFF
13086: PPUSH
13087: LD_STRING DR0-Sol2-1
13089: PPUSH
13090: LD_STRING DR0-Sol2-1
13092: PPUSH
13093: CALL 5914 0 3
// if IsOk ( Cyrus ) then
13097: LD_EXP 4
13101: PPUSH
13102: CALL_OW 302
13106: IFFALSE 13120
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13108: LD_EXP 4
13112: PPUSH
13113: LD_STRING DR0-Cyrus-1
13115: PPUSH
13116: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13120: LD_EXP 1
13124: PPUSH
13125: LD_STRING DR0-JMM-1
13127: PPUSH
13128: CALL_OW 88
// end ;
13132: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13133: LD_EXP 5
13137: PPUSH
13138: CALL_OW 302
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_INT 1
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 16
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PPUSH
13167: CALL_OW 69
13171: PUSH
13172: LD_INT 0
13174: GREATER
13175: AND
13176: PUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 463
13184: NOT
13185: AND
13186: IFFALSE 13464
13188: GO 13190
13190: DISABLE
// begin DialogueOn ;
13191: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13195: LD_EXP 5
13199: PPUSH
13200: LD_STRING D10-Frank-1
13202: PPUSH
13203: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13207: LD_INT 22
13209: PUSH
13210: LD_INT 1
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: LD_INT 21
13219: PUSH
13220: LD_INT 1
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: LD_INT 25
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 2
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 25
13252: PUSH
13253: LD_INT 3
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 25
13262: PUSH
13263: LD_INT 4
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: PPUSH
13282: CALL_OW 69
13286: PUSH
13287: LD_EXP 1
13291: PUSH
13292: LD_EXP 5
13296: PUSH
13297: LD_EXP 2
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: DIFF
13307: PPUSH
13308: LD_STRING D10-Sol1-1
13310: PPUSH
13311: LD_STRING D10-FSol1-1
13313: PPUSH
13314: CALL 5914 0 3
// Say ( Frank , D10-Frank-2 ) ;
13318: LD_EXP 5
13322: PPUSH
13323: LD_STRING D10-Frank-2
13325: PPUSH
13326: CALL_OW 88
// if IsOK ( Lisa ) then
13330: LD_EXP 2
13334: PPUSH
13335: CALL_OW 302
13339: IFFALSE 13355
// begin Say ( Lisa , D10-Lisa-2 ) ;
13341: LD_EXP 2
13345: PPUSH
13346: LD_STRING D10-Lisa-2
13348: PPUSH
13349: CALL_OW 88
// end else
13353: GO 13460
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 21
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: LD_INT 25
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 25
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 25
13400: PUSH
13401: LD_INT 3
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 25
13410: PUSH
13411: LD_INT 4
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: PUSH
13435: LD_EXP 1
13439: PUSH
13440: LD_EXP 5
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: DIFF
13449: PPUSH
13450: LD_STRING D10-Sol1-2
13452: PPUSH
13453: LD_STRING D10-FSol1-2
13455: PPUSH
13456: CALL 5914 0 3
// end ; DialogueOff ;
13460: CALL_OW 7
// end ;
13464: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 463
13472: NOT
13473: IFFALSE 13736
13475: GO 13477
13477: DISABLE
// begin HarrisonSupport ;
13478: CALL 2406 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13482: LD_EXP 17
13486: PPUSH
13487: CALL_OW 310
13491: PPUSH
13492: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13496: LD_EXP 17
13500: PPUSH
13501: LD_STRING DEng-Eng1-1
13503: PPUSH
13504: CALL_OW 88
// wait ( 1 1$0 ) ;
13508: LD_INT 2100
13510: PPUSH
13511: CALL_OW 67
// DialogueOn ;
13515: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13519: LD_EXP 14
13523: PPUSH
13524: LD_STRING DRem-Har-1
13526: PPUSH
13527: CALL_OW 94
// if contactWithRussian = 1 then
13531: LD_EXP 22
13535: PUSH
13536: LD_INT 1
13538: EQUAL
13539: IFFALSE 13555
// begin Say ( JMM , DRem-JMM-1 ) ;
13541: LD_EXP 1
13545: PPUSH
13546: LD_STRING DRem-JMM-1
13548: PPUSH
13549: CALL_OW 88
// end else
13553: GO 13567
// begin Say ( JMM , DRem-JMM-1a ) ;
13555: LD_EXP 1
13559: PPUSH
13560: LD_STRING DRem-JMM-1a
13562: PPUSH
13563: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13567: LD_EXP 14
13571: PPUSH
13572: LD_STRING DRem-Har-2
13574: PPUSH
13575: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13579: LD_STRING DenisInDelta
13581: PPUSH
13582: LD_INT 0
13584: PPUSH
13585: CALL_OW 30
13589: PUSH
13590: LD_INT 1
13592: EQUAL
13593: IFFALSE 13609
// begin Say ( JMM , DRem-JMM-2 ) ;
13595: LD_EXP 1
13599: PPUSH
13600: LD_STRING DRem-JMM-2
13602: PPUSH
13603: CALL_OW 88
// end else
13607: GO 13621
// begin Say ( JMM , DRem-JMM-2a ) ;
13609: LD_EXP 1
13613: PPUSH
13614: LD_STRING DRem-JMM-2a
13616: PPUSH
13617: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13621: LD_EXP 14
13625: PPUSH
13626: LD_STRING DRem-Har-3
13628: PPUSH
13629: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13633: LD_EXP 1
13637: PPUSH
13638: LD_STRING DRem-JMM-3
13640: PPUSH
13641: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13645: LD_EXP 14
13649: PPUSH
13650: LD_STRING DRem-Har-4
13652: PPUSH
13653: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13657: LD_STRING DenisInDelta
13659: PPUSH
13660: LD_INT 0
13662: PPUSH
13663: CALL_OW 30
13667: PUSH
13668: LD_INT 1
13670: EQUAL
13671: IFFALSE 13699
// begin Say ( JMM , DRem-JMM-4 ) ;
13673: LD_EXP 1
13677: PPUSH
13678: LD_STRING DRem-JMM-4
13680: PPUSH
13681: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13685: LD_EXP 14
13689: PPUSH
13690: LD_STRING DRem-Har-5
13692: PPUSH
13693: CALL_OW 94
// end else
13697: GO 13732
// begin SetRestrict ( 36 , 1 , true ) ;
13699: LD_INT 36
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13712: LD_INT 15
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13725: LD_STRING MR
13727: PPUSH
13728: CALL_OW 337
// end ; DialogueOff ;
13732: CALL_OW 7
// end ;
13736: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13737: LD_STRING DenisInDelta
13739: PPUSH
13740: LD_INT 0
13742: PPUSH
13743: CALL_OW 30
13747: PUSH
13748: LD_INT 1
13750: EQUAL
13751: PUSH
13752: LD_INT 1
13754: PPUSH
13755: CALL_OW 463
13759: NOT
13760: AND
13761: IFFALSE 13994
13763: GO 13765
13765: DISABLE
13766: LD_INT 0
13768: PPUSH
// begin PrepareDenis ;
13769: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13773: LD_EXP 9
13777: PPUSH
13778: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13782: LD_ADDR_VAR 0 1
13786: PUSH
13787: LD_INT 22
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PPUSH
13797: CALL_OW 69
13801: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13802: LD_EXP 9
13806: PPUSH
13807: LD_VAR 0 1
13811: PPUSH
13812: LD_EXP 9
13816: PPUSH
13817: CALL_OW 74
13821: PPUSH
13822: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13826: LD_INT 35
13828: PPUSH
13829: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13833: LD_INT 22
13835: PUSH
13836: LD_INT 1
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 91
13845: PUSH
13846: LD_EXP 9
13850: PUSH
13851: LD_INT 10
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: IFFALSE 13826
// SetSide ( Denis , 1 ) ;
13869: LD_EXP 9
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 235
// DialogueOn ;
13881: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13885: LD_EXP 9
13889: PPUSH
13890: LD_STRING DDen-Den-1
13892: PPUSH
13893: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13897: LD_EXP 1
13901: PPUSH
13902: LD_STRING DDen-JMM-1
13904: PPUSH
13905: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13909: LD_EXP 9
13913: PPUSH
13914: LD_STRING DDen-Den-2
13916: PPUSH
13917: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13921: LD_EXP 1
13925: PPUSH
13926: LD_STRING DDen-JMM-2
13928: PPUSH
13929: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13933: LD_EXP 9
13937: PPUSH
13938: LD_STRING DDen-Den-3
13940: PPUSH
13941: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13945: LD_EXP 1
13949: PPUSH
13950: LD_STRING DDen-JMM-3
13952: PPUSH
13953: CALL_OW 88
// DialogueOff ;
13957: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13961: LD_INT 36
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13974: LD_INT 15
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: LD_INT 1
13982: PPUSH
13983: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13987: LD_STRING MR
13989: PPUSH
13990: CALL_OW 337
// end ;
13994: PPOPN 1
13996: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13997: CALL 14052 0 0
14001: PUSH
14002: LD_EXP 9
14006: PPUSH
14007: CALL_OW 302
14011: AND
14012: PUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 463
14020: NOT
14021: AND
14022: IFFALSE 14051
14024: GO 14026
14026: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14027: LD_EXP 9
14031: PPUSH
14032: LD_STRING DR1-Den-1
14034: PPUSH
14035: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14039: LD_EXP 1
14043: PPUSH
14044: LD_STRING DR1-JMM-1
14046: PPUSH
14047: CALL_OW 88
// end ;
14051: END
// function CheckOptoLab ; var i ; begin
14052: LD_INT 0
14054: PPUSH
14055: PPUSH
// result = false ;
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14064: LD_ADDR_VAR 0 2
14068: PUSH
14069: LD_INT 22
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PUSH
14079: LD_INT 2
14081: PUSH
14082: LD_INT 30
14084: PUSH
14085: LD_INT 7
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 30
14094: PUSH
14095: LD_INT 8
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PPUSH
14111: CALL_OW 69
14115: PUSH
14116: FOR_IN
14117: IFFALSE 14169
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14119: LD_VAR 0 2
14123: PPUSH
14124: LD_INT 1
14126: PPUSH
14127: CALL_OW 268
14131: PUSH
14132: LD_INT 15
14134: EQUAL
14135: PUSH
14136: LD_VAR 0 2
14140: PPUSH
14141: LD_INT 2
14143: PPUSH
14144: CALL_OW 268
14148: PUSH
14149: LD_INT 15
14151: EQUAL
14152: OR
14153: IFFALSE 14165
// begin result = true ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// break ;
14163: GO 14169
// end ; break ;
14165: GO 14169
// end ;
14167: GO 14116
14169: POP
14170: POP
// end ;
14171: LD_VAR 0 1
14175: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14176: LD_INT 15
14178: PPUSH
14179: LD_INT 1
14181: PPUSH
14182: CALL_OW 321
14186: PUSH
14187: LD_INT 2
14189: EQUAL
14190: PUSH
14191: LD_EXP 9
14195: PPUSH
14196: CALL_OW 302
14200: AND
14201: PUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 463
14209: NOT
14210: AND
14211: IFFALSE 14443
14213: GO 14215
14215: DISABLE
// begin DialogueOn ;
14216: CALL_OW 6
// if IsOK ( Denis ) then
14220: LD_EXP 9
14224: PPUSH
14225: CALL_OW 302
14229: IFFALSE 14245
// begin Say ( Denis , DR2-Den-1 ) ;
14231: LD_EXP 9
14235: PPUSH
14236: LD_STRING DR2-Den-1
14238: PPUSH
14239: CALL_OW 88
// end else
14243: GO 14304
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14245: LD_INT 22
14247: PUSH
14248: LD_INT 1
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 21
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 4
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: PUSH
14285: LD_EXP 1
14289: PUSH
14290: EMPTY
14291: LIST
14292: DIFF
14293: PPUSH
14294: LD_STRING DR2-Sci1-1
14296: PPUSH
14297: LD_STRING DR2-FSci1-1
14299: PPUSH
14300: CALL 5914 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14304: LD_EXP 1
14308: PPUSH
14309: LD_STRING DR2-JMM-1
14311: PPUSH
14312: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14316: LD_INT 22
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 1
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 2
14338: PUSH
14339: LD_INT 25
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 25
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 25
14361: PUSH
14362: LD_INT 3
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 25
14371: PUSH
14372: LD_INT 4
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PUSH
14396: LD_EXP 1
14400: PUSH
14401: LD_EXP 9
14405: PUSH
14406: LD_EXP 8
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: DIFF
14416: PPUSH
14417: LD_STRING DR2-Sol1-1
14419: PPUSH
14420: LD_STRING DR2-Sol1-11
14422: PPUSH
14423: CALL 5914 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14427: LD_EXP 1
14431: PPUSH
14432: LD_STRING DR2-JMM-2
14434: PPUSH
14435: CALL_OW 88
// DialogueOff ;
14439: CALL_OW 7
// end ;
14443: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14444: LD_INT 22
14446: PUSH
14447: LD_INT 1
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 30
14456: PUSH
14457: LD_INT 36
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 69
14472: PUSH
14473: LD_INT 0
14475: EQUAL
14476: PUSH
14477: LD_INT 22
14479: PUSH
14480: LD_INT 1
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 21
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 33
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 69
14516: PUSH
14517: LD_INT 0
14519: GREATER
14520: AND
14521: PUSH
14522: LD_EXP 23
14526: PUSH
14527: LD_INT 0
14529: EQUAL
14530: AND
14531: PUSH
14532: LD_INT 1
14534: PPUSH
14535: CALL_OW 463
14539: NOT
14540: AND
14541: IFFALSE 14667
14543: GO 14545
14545: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14546: LD_INT 22
14548: PUSH
14549: LD_INT 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 21
14558: PUSH
14559: LD_INT 1
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 25
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: PPUSH
14581: CALL_OW 69
14585: PUSH
14586: LD_EXP 1
14590: PUSH
14591: LD_EXP 6
14595: PUSH
14596: LD_EXP 7
14600: PUSH
14601: LD_EXP 9
14605: PUSH
14606: LD_EXP 15
14610: PUSH
14611: LD_EXP 3
14615: PUSH
14616: LD_EXP 4
14620: PUSH
14621: LD_EXP 2
14625: PUSH
14626: LD_EXP 5
14630: PUSH
14631: LD_EXP 8
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: DIFF
14648: PPUSH
14649: LD_STRING D3a-Mech1-1
14651: PPUSH
14652: LD_STRING D3a-Mech1-1
14654: PPUSH
14655: CALL 5914 0 3
// firstTower = 2 ;
14659: LD_ADDR_EXP 23
14663: PUSH
14664: LD_INT 2
14666: ST_TO_ADDR
// end ;
14667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14668: LD_INT 22
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 21
14680: PUSH
14681: LD_INT 3
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PPUSH
14692: CALL_OW 69
14696: PUSH
14697: LD_INT 0
14699: EQUAL
14700: IFFALSE 14815
14702: GO 14704
14704: DISABLE
14705: LD_INT 0
14707: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14708: LD_ADDR_VAR 0 1
14712: PUSH
14713: LD_INT 22
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 21
14725: PUSH
14726: LD_INT 1
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PUSH
14733: LD_INT 2
14735: PUSH
14736: LD_INT 25
14738: PUSH
14739: LD_INT 1
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 25
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 25
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 25
14768: PUSH
14769: LD_INT 4
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 69
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14813
// AddExperience ( i , 1 , 10000 ) ;
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: LD_INT 10000
14806: PPUSH
14807: CALL_OW 492
14811: GO 14793
14813: POP
14814: POP
// end ;
14815: PPOPN 1
14817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14818: LD_INT 22
14820: PUSH
14821: LD_INT 1
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 30
14830: PUSH
14831: LD_INT 36
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PPUSH
14842: CALL_OW 69
14846: PUSH
14847: LD_INT 0
14849: GREATER
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 21
14863: PUSH
14864: LD_INT 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 33
14873: PUSH
14874: LD_INT 2
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: PPUSH
14886: CALL_OW 69
14890: PUSH
14891: LD_INT 0
14893: GREATER
14894: AND
14895: PUSH
14896: CALL 15488 0 0
14900: AND
14901: PUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 463
14909: NOT
14910: AND
14911: IFFALSE 15485
14913: GO 14915
14915: DISABLE
14916: LD_INT 0
14918: PPUSH
14919: PPUSH
14920: PPUSH
14921: PPUSH
14922: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 30
14940: PUSH
14941: LD_INT 36
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PPUSH
14952: CALL_OW 69
14956: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 33
14984: PUSH
14985: LD_INT 2
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PPUSH
14997: CALL_OW 69
15001: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15002: LD_ADDR_VAR 0 5
15006: PUSH
15007: EMPTY
15008: ST_TO_ADDR
// for i in tmpControlTowers do
15009: LD_ADDR_VAR 0 1
15013: PUSH
15014: LD_VAR 0 3
15018: PUSH
15019: FOR_IN
15020: IFFALSE 15483
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15022: LD_EXP 1
15026: PPUSH
15027: CALL_OW 310
15031: PUSH
15032: LD_VAR 0 1
15036: EQUAL
15037: PUSH
15038: LD_EXP 1
15042: PPUSH
15043: CALL_OW 257
15047: PUSH
15048: LD_INT 3
15050: EQUAL
15051: AND
15052: IFFALSE 15182
// begin InGameOn ;
15054: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15058: LD_VAR 0 4
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PPUSH
15067: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15071: LD_EXP 1
15075: PPUSH
15076: LD_STRING D4a-JMM-1
15078: PPUSH
15079: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15083: LD_VAR 0 4
15087: PUSH
15088: LD_INT 1
15090: ARRAY
15091: PPUSH
15092: LD_EXP 1
15096: PPUSH
15097: CALL_OW 53
// wait ( 0 0$1 ) ;
15101: LD_INT 35
15103: PPUSH
15104: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15108: LD_VAR 0 4
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 4
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PPUSH
15126: CALL_OW 250
15130: PUSH
15131: LD_INT 3
15133: PLUS
15134: PPUSH
15135: LD_VAR 0 4
15139: PUSH
15140: LD_INT 1
15142: ARRAY
15143: PPUSH
15144: CALL_OW 251
15148: PUSH
15149: LD_INT 2
15151: MINUS
15152: PPUSH
15153: CALL_OW 111
// wait ( 0 0$2 ) ;
15157: LD_INT 70
15159: PPUSH
15160: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15164: LD_EXP 1
15168: PPUSH
15169: LD_STRING D4b-JMM-1
15171: PPUSH
15172: CALL_OW 88
// InGameOff ;
15176: CALL_OW 9
// end else
15180: GO 15481
// begin InGameOn ;
15182: CALL_OW 8
// for j in UnitsInside ( i ) do
15186: LD_ADDR_VAR 0 2
15190: PUSH
15191: LD_VAR 0 1
15195: PPUSH
15196: CALL_OW 313
15200: PUSH
15201: FOR_IN
15202: IFFALSE 15237
// if GetClass ( j ) = 3 then
15204: LD_VAR 0 2
15208: PPUSH
15209: CALL_OW 257
15213: PUSH
15214: LD_INT 3
15216: EQUAL
15217: IFFALSE 15235
// tmpMechanicInside = tmpMechanicInside ^ j ;
15219: LD_ADDR_VAR 0 5
15223: PUSH
15224: LD_VAR 0 5
15228: PUSH
15229: LD_VAR 0 2
15233: ADD
15234: ST_TO_ADDR
15235: GO 15201
15237: POP
15238: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15239: LD_VAR 0 5
15243: PUSH
15244: LD_INT 1
15246: ARRAY
15247: PPUSH
15248: CALL_OW 258
15252: PUSH
15253: LD_INT 1
15255: EQUAL
15256: IFFALSE 15274
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15258: LD_VAR 0 5
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: PPUSH
15267: LD_STRING D4a-Mech1-1
15269: PPUSH
15270: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15274: LD_VAR 0 5
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: PPUSH
15283: CALL_OW 258
15287: PUSH
15288: LD_INT 2
15290: EQUAL
15291: IFFALSE 15309
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15293: LD_VAR 0 5
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: LD_STRING D4a-FMech1-1
15304: PPUSH
15305: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15309: LD_VAR 0 4
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15322: LD_VAR 0 4
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: LD_VAR 0 5
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: CALL_OW 53
// wait ( 0 0$1 ) ;
15344: LD_INT 35
15346: PPUSH
15347: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15351: LD_VAR 0 4
15355: PUSH
15356: LD_INT 1
15358: ARRAY
15359: PPUSH
15360: LD_VAR 0 4
15364: PUSH
15365: LD_INT 1
15367: ARRAY
15368: PPUSH
15369: CALL_OW 250
15373: PUSH
15374: LD_INT 3
15376: PLUS
15377: PPUSH
15378: LD_VAR 0 4
15382: PUSH
15383: LD_INT 1
15385: ARRAY
15386: PPUSH
15387: CALL_OW 251
15391: PUSH
15392: LD_INT 2
15394: MINUS
15395: PPUSH
15396: CALL_OW 111
// wait ( 0 0$2 ) ;
15400: LD_INT 70
15402: PPUSH
15403: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15407: LD_VAR 0 5
15411: PUSH
15412: LD_INT 1
15414: ARRAY
15415: PPUSH
15416: CALL_OW 258
15420: PUSH
15421: LD_INT 1
15423: EQUAL
15424: IFFALSE 15442
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15426: LD_VAR 0 5
15430: PUSH
15431: LD_INT 1
15433: ARRAY
15434: PPUSH
15435: LD_STRING D4b-Mech1-1
15437: PPUSH
15438: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15442: LD_VAR 0 5
15446: PUSH
15447: LD_INT 1
15449: ARRAY
15450: PPUSH
15451: CALL_OW 258
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: IFFALSE 15477
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15461: LD_VAR 0 5
15465: PUSH
15466: LD_INT 1
15468: ARRAY
15469: PPUSH
15470: LD_STRING D4b-FMech1-1
15472: PPUSH
15473: CALL_OW 88
// InGameOff ;
15477: CALL_OW 9
// end ; end ;
15481: GO 15019
15483: POP
15484: POP
// end ;
15485: PPOPN 5
15487: END
// function CheckMehInside ; var i , j ; begin
15488: LD_INT 0
15490: PPUSH
15491: PPUSH
15492: PPUSH
// result = false ;
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: LD_INT 0
15500: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15501: LD_ADDR_VAR 0 2
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 36
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PPUSH
15530: CALL_OW 69
15534: PUSH
15535: FOR_IN
15536: IFFALSE 15587
// begin for j in UnitsInside ( i ) do
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_VAR 0 2
15547: PPUSH
15548: CALL_OW 313
15552: PUSH
15553: FOR_IN
15554: IFFALSE 15583
// begin if GetClass ( j ) = 3 then
15556: LD_VAR 0 3
15560: PPUSH
15561: CALL_OW 257
15565: PUSH
15566: LD_INT 3
15568: EQUAL
15569: IFFALSE 15581
// begin result = true ;
15571: LD_ADDR_VAR 0 1
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// break ;
15579: GO 15583
// end ; end ;
15581: GO 15553
15583: POP
15584: POP
// end ;
15585: GO 15535
15587: POP
15588: POP
// end ;
15589: LD_VAR 0 1
15593: RET
// every 25 25$0 do
15594: GO 15596
15596: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15597: LD_INT 35
15599: PPUSH
15600: CALL_OW 67
// until not InBattle ( 1 ) ;
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 463
15611: NOT
15612: IFFALSE 15597
// PrepareKurt ;
15614: CALL 19079 0 0
// end ;
15618: END
// every 35 35$0 do
15619: GO 15621
15621: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15622: LD_INT 35
15624: PPUSH
15625: CALL_OW 67
// until not InBattle ( 1 ) ;
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 463
15636: NOT
15637: IFFALSE 15622
// PrepareJoan ;
15639: CALL 2924 0 0
// wait ( 1 1$0 ) ;
15643: LD_INT 2100
15645: PPUSH
15646: CALL_OW 67
// if IsOK ( Lisa ) then
15650: LD_EXP 2
15654: PPUSH
15655: CALL_OW 302
15659: IFFALSE 15789
// begin DialogueOn ;
15661: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15665: LD_EXP 2
15669: PPUSH
15670: LD_STRING D7-Lisa-1
15672: PPUSH
15673: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15677: LD_EXP 1
15681: PPUSH
15682: LD_STRING D7-JMM-1
15684: PPUSH
15685: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15689: LD_EXP 2
15693: PPUSH
15694: LD_STRING D7-Lisa-2
15696: PPUSH
15697: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15701: LD_EXP 1
15705: PPUSH
15706: LD_STRING D7-JMM-2
15708: PPUSH
15709: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15713: LD_EXP 2
15717: PPUSH
15718: LD_STRING D7-Lisa-3
15720: PPUSH
15721: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15725: LD_EXP 1
15729: PPUSH
15730: LD_STRING D7-JMM-3
15732: PPUSH
15733: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15737: LD_EXP 2
15741: PPUSH
15742: LD_STRING D7-Lisa-4
15744: PPUSH
15745: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15749: LD_EXP 1
15753: PPUSH
15754: LD_STRING D7-JMM-4
15756: PPUSH
15757: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15761: LD_EXP 1
15765: PPUSH
15766: LD_STRING D7-JMM-4a
15768: PPUSH
15769: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15773: LD_EXP 2
15777: PPUSH
15778: LD_STRING D7-Lisa-5
15780: PPUSH
15781: CALL_OW 88
// DialogueOff ;
15785: CALL_OW 7
// end ; end ;
15789: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15790: LD_EXP 13
15794: PUSH
15795: LD_INT 22
15797: PUSH
15798: LD_INT 1
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 91
15807: PUSH
15808: LD_EXP 13
15812: PUSH
15813: LD_INT 10
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 2
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 3
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 25
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: PUSH
15881: LD_INT 1
15883: GREATER
15884: AND
15885: IFFALSE 15902
15887: GO 15889
15889: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15890: LD_EXP 13
15894: PPUSH
15895: LD_STRING D5-Sol1-1
15897: PPUSH
15898: CALL_OW 88
// end ;
15902: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15903: LD_INT 22
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 33
15915: PUSH
15916: LD_INT 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PPUSH
15927: CALL_OW 69
15931: PUSH
15932: LD_INT 2
15934: GREATEREQUAL
15935: IFFALSE 15955
15937: GO 15939
15939: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15940: LD_STRING MRa
15942: PPUSH
15943: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15947: LD_ADDR_EXP 28
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// end ;
15955: END
// every 0 0$10 do var i , last ;
15956: GO 15958
15958: DISABLE
15959: LD_INT 0
15961: PPUSH
15962: PPUSH
// begin last := 7 ;
15963: LD_ADDR_VAR 0 2
15967: PUSH
15968: LD_INT 7
15970: ST_TO_ADDR
// for i = 1 to last do
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: DOUBLE
15977: LD_INT 1
15979: DEC
15980: ST_TO_ADDR
15981: LD_VAR 0 2
15985: PUSH
15986: FOR_TO
15987: IFFALSE 16015
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15989: LD_INT 6300
15991: PPUSH
15992: LD_INT 14700
15994: PPUSH
15995: CALL_OW 12
15999: PPUSH
16000: CALL_OW 67
// PrepareRandoms ( i ) ;
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL 3960 0 1
// end ;
16013: GO 15986
16015: POP
16016: POP
// end ;
16017: PPOPN 2
16019: END
// every 5 5$20 do
16020: GO 16022
16022: DISABLE
// begin DialogueOn ;
16023: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16027: LD_EXP 10
16031: PPUSH
16032: LD_STRING D12a-Sci-1
16034: PPUSH
16035: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16039: LD_EXP 1
16043: PPUSH
16044: LD_STRING D12a-JMM-1
16046: PPUSH
16047: CALL_OW 88
// DialogueOff ;
16051: CALL_OW 7
// cratesStatus = 1 ;
16055: LD_ADDR_EXP 38
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// end ;
16063: END
// every 13 13$0 do
16064: GO 16066
16066: DISABLE
// begin DialogueOn ;
16067: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16071: LD_EXP 10
16075: PPUSH
16076: LD_STRING D12b-Sci-1
16078: PPUSH
16079: CALL_OW 94
// DialogueOff ;
16083: CALL_OW 7
// cratesStatus = 2 ;
16087: LD_ADDR_EXP 38
16091: PUSH
16092: LD_INT 2
16094: ST_TO_ADDR
// end ;
16095: END
// every 32 32$0 do
16096: GO 16098
16098: DISABLE
// begin DialogueOn ;
16099: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16103: LD_EXP 10
16107: PPUSH
16108: LD_STRING D12c-Sci-1
16110: PPUSH
16111: CALL_OW 94
// DialogueOff ;
16115: CALL_OW 7
// wait ( 3 3$0 ) ;
16119: LD_INT 6300
16121: PPUSH
16122: CALL_OW 67
// DialogueOn ;
16126: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16130: LD_EXP 10
16134: PPUSH
16135: LD_STRING D12d-Sci-1
16137: PPUSH
16138: CALL_OW 94
// DialogueOff ;
16142: CALL_OW 7
// cratesStatus = 1 ;
16146: LD_ADDR_EXP 38
16150: PUSH
16151: LD_INT 1
16153: ST_TO_ADDR
// end ;
16154: END
// every 42 42$0 do
16155: GO 16157
16157: DISABLE
// begin DialogueOn ;
16158: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16162: LD_EXP 10
16166: PPUSH
16167: LD_STRING D12e-Sci-1
16169: PPUSH
16170: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16174: LD_EXP 1
16178: PPUSH
16179: LD_STRING D12e-JMM-1
16181: PPUSH
16182: CALL_OW 88
// DialogueOff ;
16186: CALL_OW 7
// cratesStatus = 2 ;
16190: LD_ADDR_EXP 38
16194: PUSH
16195: LD_INT 2
16197: ST_TO_ADDR
// end ;
16198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16199: LD_INT 22
16201: PUSH
16202: LD_INT 6
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 21
16211: PUSH
16212: LD_INT 2
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 51
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: LIST
16233: PPUSH
16234: CALL_OW 69
16238: PUSH
16239: LD_INT 0
16241: GREATER
16242: IFFALSE 16325
16244: GO 16246
16246: DISABLE
16247: LD_INT 0
16249: PPUSH
// begin enable ;
16250: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_INT 22
16258: PUSH
16259: LD_INT 6
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 21
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PPUSH
16298: CALL_OW 69
16302: PUSH
16303: FOR_IN
16304: IFFALSE 16323
// ComAgressiveMove ( i , 138 , 168 ) ;
16306: LD_VAR 0 1
16310: PPUSH
16311: LD_INT 138
16313: PPUSH
16314: LD_INT 168
16316: PPUSH
16317: CALL_OW 114
16321: GO 16303
16323: POP
16324: POP
// end ;
16325: PPOPN 1
16327: END
// every 0 0$1 do var i ;
16328: GO 16330
16330: DISABLE
16331: LD_INT 0
16333: PPUSH
// begin enable ;
16334: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16335: LD_ADDR_VAR 0 1
16339: PUSH
16340: LD_INT 4
16342: PPUSH
16343: LD_INT 2
16345: PUSH
16346: LD_INT 22
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 22
16358: PUSH
16359: LD_INT 6
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: PUSH
16371: EMPTY
16372: LIST
16373: PPUSH
16374: CALL_OW 70
16378: PUSH
16379: FOR_IN
16380: IFFALSE 16444
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16382: LD_INT 4
16384: PPUSH
16385: LD_INT 22
16387: PUSH
16388: LD_INT 6
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 34
16397: PUSH
16398: LD_INT 51
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PPUSH
16409: CALL_OW 70
16413: PUSH
16414: LD_INT 0
16416: GREATER
16417: IFFALSE 16433
// sendedConvoys = sendedConvoys + 1 ;
16419: LD_ADDR_EXP 39
16423: PUSH
16424: LD_EXP 39
16428: PUSH
16429: LD_INT 1
16431: PLUS
16432: ST_TO_ADDR
// RemoveUnit ( i ) ;
16433: LD_VAR 0 1
16437: PPUSH
16438: CALL_OW 64
// end ;
16442: GO 16379
16444: POP
16445: POP
// end ; end_of_file
16446: PPOPN 1
16448: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16449: LD_VAR 0 1
16453: PUSH
16454: LD_INT 1
16456: EQUAL
16457: PUSH
16458: LD_VAR 0 2
16462: PUSH
16463: LD_INT 3
16465: EQUAL
16466: AND
16467: IFFALSE 16477
// contactWithRussian = 1 ;
16469: LD_ADDR_EXP 22
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// end ;
16477: PPOPN 2
16479: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16480: LD_VAR 0 1
16484: PPUSH
16485: CALL_OW 266
16489: PUSH
16490: LD_INT 36
16492: EQUAL
16493: PUSH
16494: LD_VAR 0 1
16498: PPUSH
16499: CALL_OW 255
16503: PUSH
16504: LD_INT 1
16506: EQUAL
16507: AND
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 21
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 33
16531: PUSH
16532: LD_INT 2
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: PPUSH
16544: CALL_OW 69
16548: PUSH
16549: LD_INT 0
16551: EQUAL
16552: AND
16553: PUSH
16554: LD_EXP 23
16558: PUSH
16559: LD_INT 0
16561: EQUAL
16562: AND
16563: IFFALSE 16643
// begin firstTower = 1 ;
16565: LD_ADDR_EXP 23
16569: PUSH
16570: LD_INT 1
16572: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16573: LD_INT 22
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 21
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: LD_INT 26
16605: PUSH
16606: LD_INT 1
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: PUSH
16624: LD_EXP 1
16628: PUSH
16629: EMPTY
16630: LIST
16631: DIFF
16632: PPUSH
16633: LD_STRING D3b-Mech1-1
16635: PPUSH
16636: LD_STRING D3b-Mech1-1
16638: PPUSH
16639: CALL 5914 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16643: LD_VAR 0 1
16647: PPUSH
16648: CALL_OW 266
16652: PUSH
16653: LD_INT 0
16655: EQUAL
16656: PUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL_OW 255
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: AND
16671: IFFALSE 16685
// SetBName ( building , theta ) ;
16673: LD_VAR 0 1
16677: PPUSH
16678: LD_STRING theta
16680: PPUSH
16681: CALL_OW 500
// if GetSide ( building ) = 3 then
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 255
16694: PUSH
16695: LD_INT 3
16697: EQUAL
16698: IFFALSE 16772
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16700: LD_ADDR_EXP 31
16704: PUSH
16705: LD_EXP 31
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 3
16717: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16718: LD_ADDR_EXP 31
16722: PUSH
16723: LD_EXP 31
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 3
16735: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16736: LD_ADDR_EXP 31
16740: PUSH
16741: LD_EXP 31
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: CALL_OW 3
16753: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16754: LD_ADDR_EXP 31
16758: PUSH
16759: LD_EXP 31
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: CALL_OW 3
16771: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 255
16781: PUSH
16782: LD_INT 3
16784: EQUAL
16785: PUSH
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 266
16795: PUSH
16796: LD_INT 0
16798: EQUAL
16799: PUSH
16800: LD_VAR 0 1
16804: PPUSH
16805: CALL_OW 266
16809: PUSH
16810: LD_INT 2
16812: EQUAL
16813: OR
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 266
16824: PUSH
16825: LD_INT 4
16827: EQUAL
16828: OR
16829: PUSH
16830: EMPTY
16831: LIST
16832: AND
16833: IFFALSE 16844
// ComUpgrade ( building ) ;
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 255
16853: PUSH
16854: LD_INT 3
16856: EQUAL
16857: PUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 266
16867: PUSH
16868: LD_INT 32
16870: EQUAL
16871: AND
16872: IFFALSE 16913
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16874: LD_VAR 0 1
16878: PPUSH
16879: LD_INT 42
16881: PUSH
16882: LD_INT 43
16884: PUSH
16885: LD_INT 44
16887: PUSH
16888: LD_INT 46
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: PUSH
16897: LD_INT 1
16899: PPUSH
16900: LD_INT 4
16902: PPUSH
16903: CALL_OW 12
16907: ARRAY
16908: PPUSH
16909: CALL_OW 208
// end ; end ;
16913: PPOPN 1
16915: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
16916: LD_VAR 0 1
16920: PUSH
16921: LD_EXP 1
16925: EQUAL
16926: IFFALSE 16935
// YouLost ( JMM ) ;
16928: LD_STRING JMM
16930: PPUSH
16931: CALL_OW 104
// if unit = Joan then
16935: LD_VAR 0 1
16939: PUSH
16940: LD_EXP 15
16944: EQUAL
16945: IFFALSE 16955
// JoanStatus = 0 ;
16947: LD_ADDR_EXP 16
16951: PUSH
16952: LD_INT 0
16954: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 255
16964: PUSH
16965: LD_INT 1
16967: EQUAL
16968: PUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 247
16978: PUSH
16979: LD_INT 1
16981: EQUAL
16982: AND
16983: IFFALSE 17059
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16985: LD_VAR 0 1
16989: PPUSH
16990: CALL_OW 257
16994: PUSH
16995: LD_INT 1
16997: EQUAL
16998: PUSH
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 257
17008: PUSH
17009: LD_INT 2
17011: EQUAL
17012: OR
17013: PUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: CALL_OW 257
17023: PUSH
17024: LD_INT 3
17026: EQUAL
17027: OR
17028: PUSH
17029: LD_VAR 0 1
17033: PPUSH
17034: CALL_OW 257
17038: PUSH
17039: LD_INT 4
17041: EQUAL
17042: OR
17043: IFFALSE 17059
// unitLost = unitLost + 1 ;
17045: LD_ADDR_EXP 30
17049: PUSH
17050: LD_EXP 30
17054: PUSH
17055: LD_INT 1
17057: PLUS
17058: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17059: LD_VAR 0 1
17063: PPUSH
17064: CALL_OW 255
17068: PUSH
17069: LD_INT 3
17071: EQUAL
17072: PUSH
17073: LD_VAR 0 1
17077: PPUSH
17078: CALL_OW 247
17082: PUSH
17083: LD_INT 3
17085: EQUAL
17086: AND
17087: IFFALSE 17779
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17089: LD_VAR 0 1
17093: PPUSH
17094: CALL_OW 266
17098: PUSH
17099: LD_INT 31
17101: EQUAL
17102: PUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 266
17112: PUSH
17113: LD_INT 32
17115: EQUAL
17116: OR
17117: PUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: CALL_OW 266
17127: PUSH
17128: LD_INT 36
17130: EQUAL
17131: OR
17132: PUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 266
17142: PUSH
17143: LD_INT 0
17145: EQUAL
17146: OR
17147: PUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 24
17160: EQUAL
17161: OR
17162: PUSH
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 266
17172: PUSH
17173: LD_INT 17
17175: EQUAL
17176: OR
17177: PUSH
17178: LD_VAR 0 1
17182: PPUSH
17183: CALL_OW 266
17187: PUSH
17188: LD_INT 25
17190: EQUAL
17191: OR
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 266
17202: PUSH
17203: LD_INT 19
17205: EQUAL
17206: OR
17207: PUSH
17208: LD_VAR 0 1
17212: PPUSH
17213: CALL_OW 266
17217: PUSH
17218: LD_INT 20
17220: EQUAL
17221: OR
17222: PUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 266
17232: PUSH
17233: LD_INT 18
17235: EQUAL
17236: OR
17237: PUSH
17238: LD_VAR 0 1
17242: PPUSH
17243: CALL_OW 266
17247: PUSH
17248: LD_INT 21
17250: EQUAL
17251: OR
17252: PUSH
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 266
17262: PUSH
17263: LD_INT 23
17265: EQUAL
17266: OR
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 266
17277: PUSH
17278: LD_INT 16
17280: EQUAL
17281: OR
17282: PUSH
17283: LD_VAR 0 1
17287: PPUSH
17288: CALL_OW 266
17292: PUSH
17293: LD_INT 6
17295: EQUAL
17296: OR
17297: PUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 266
17307: PUSH
17308: LD_INT 29
17310: EQUAL
17311: OR
17312: PUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 266
17322: PUSH
17323: LD_INT 26
17325: EQUAL
17326: OR
17327: PUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 266
17337: PUSH
17338: LD_INT 30
17340: EQUAL
17341: OR
17342: PUSH
17343: LD_VAR 0 1
17347: PPUSH
17348: CALL_OW 266
17352: PUSH
17353: LD_INT 28
17355: EQUAL
17356: OR
17357: PUSH
17358: LD_VAR 0 1
17362: PPUSH
17363: CALL_OW 266
17367: PUSH
17368: LD_INT 27
17370: EQUAL
17371: OR
17372: PUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 266
17382: PUSH
17383: LD_INT 33
17385: EQUAL
17386: OR
17387: PUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 266
17397: PUSH
17398: LD_INT 2
17400: EQUAL
17401: OR
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 266
17412: PUSH
17413: LD_INT 4
17415: EQUAL
17416: OR
17417: IFFALSE 17503
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17419: LD_ADDR_EXP 31
17423: PUSH
17424: LD_EXP 31
17428: PUSH
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 266
17438: ADD
17439: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17440: LD_ADDR_EXP 31
17444: PUSH
17445: LD_EXP 31
17449: PUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 250
17459: ADD
17460: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17461: LD_ADDR_EXP 31
17465: PUSH
17466: LD_EXP 31
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 251
17480: ADD
17481: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17482: LD_ADDR_EXP 31
17486: PUSH
17487: LD_EXP 31
17491: PUSH
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 254
17501: ADD
17502: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 266
17512: PUSH
17513: LD_INT 1
17515: EQUAL
17516: IFFALSE 17595
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17518: LD_ADDR_EXP 31
17522: PUSH
17523: LD_EXP 31
17527: PUSH
17528: LD_INT 0
17530: ADD
17531: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17532: LD_ADDR_EXP 31
17536: PUSH
17537: LD_EXP 31
17541: PUSH
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 250
17551: ADD
17552: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17553: LD_ADDR_EXP 31
17557: PUSH
17558: LD_EXP 31
17562: PUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 251
17572: ADD
17573: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17574: LD_ADDR_EXP 31
17578: PUSH
17579: LD_EXP 31
17583: PUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 254
17593: ADD
17594: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 266
17604: PUSH
17605: LD_INT 3
17607: EQUAL
17608: IFFALSE 17687
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17610: LD_ADDR_EXP 31
17614: PUSH
17615: LD_EXP 31
17619: PUSH
17620: LD_INT 2
17622: ADD
17623: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17624: LD_ADDR_EXP 31
17628: PUSH
17629: LD_EXP 31
17633: PUSH
17634: LD_VAR 0 1
17638: PPUSH
17639: CALL_OW 250
17643: ADD
17644: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17645: LD_ADDR_EXP 31
17649: PUSH
17650: LD_EXP 31
17654: PUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 251
17664: ADD
17665: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17666: LD_ADDR_EXP 31
17670: PUSH
17671: LD_EXP 31
17675: PUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 254
17685: ADD
17686: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 5
17699: EQUAL
17700: IFFALSE 17779
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17702: LD_ADDR_EXP 31
17706: PUSH
17707: LD_EXP 31
17711: PUSH
17712: LD_INT 4
17714: ADD
17715: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17716: LD_ADDR_EXP 31
17720: PUSH
17721: LD_EXP 31
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 250
17735: ADD
17736: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17737: LD_ADDR_EXP 31
17741: PUSH
17742: LD_EXP 31
17746: PUSH
17747: LD_VAR 0 1
17751: PPUSH
17752: CALL_OW 251
17756: ADD
17757: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17758: LD_ADDR_EXP 31
17762: PUSH
17763: LD_EXP 31
17767: PUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 254
17777: ADD
17778: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 257
17788: PUSH
17789: LD_INT 3
17791: EQUAL
17792: PUSH
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 255
17802: PUSH
17803: LD_INT 3
17805: EQUAL
17806: AND
17807: PUSH
17808: LD_INT 21
17810: PPUSH
17811: CALL_OW 302
17815: AND
17816: PUSH
17817: LD_INT 21
17819: PPUSH
17820: CALL_OW 255
17824: PUSH
17825: LD_INT 3
17827: EQUAL
17828: AND
17829: IFFALSE 17897
// begin uc_side = 3 ;
17831: LD_ADDR_OWVAR 20
17835: PUSH
17836: LD_INT 3
17838: ST_TO_ADDR
// uc_nation = 3 ;
17839: LD_ADDR_OWVAR 21
17843: PUSH
17844: LD_INT 3
17846: ST_TO_ADDR
// hc_gallery :=  ;
17847: LD_ADDR_OWVAR 33
17851: PUSH
17852: LD_STRING 
17854: ST_TO_ADDR
// hc_name :=  ;
17855: LD_ADDR_OWVAR 26
17859: PUSH
17860: LD_STRING 
17862: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17863: LD_INT 0
17865: PPUSH
17866: LD_EXP 34
17870: PPUSH
17871: LD_EXP 35
17875: PPUSH
17876: CALL_OW 12
17880: PPUSH
17881: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17885: CALL_OW 44
17889: PPUSH
17890: LD_INT 21
17892: PPUSH
17893: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 255
17906: PUSH
17907: LD_INT 3
17909: EQUAL
17910: PUSH
17911: LD_VAR 0 1
17915: PPUSH
17916: CALL_OW 264
17920: PUSH
17921: LD_INT 52
17923: EQUAL
17924: AND
17925: PUSH
17926: LD_INT 21
17928: PPUSH
17929: CALL_OW 302
17933: AND
17934: PUSH
17935: LD_INT 21
17937: PPUSH
17938: CALL_OW 255
17942: PUSH
17943: LD_INT 3
17945: EQUAL
17946: AND
17947: IFFALSE 17968
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17949: LD_INT 21
17951: PPUSH
17952: LD_INT 22
17954: PPUSH
17955: LD_INT 1
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: LD_INT 52
17963: PPUSH
17964: CALL_OW 125
// end ;
17968: PPOPN 1
17970: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17971: LD_INT 0
17973: PPUSH
17974: PPUSH
17975: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 264
17985: PUSH
17986: LD_INT 51
17988: EQUAL
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 255
17999: PUSH
18000: LD_INT 3
18002: EQUAL
18003: AND
18004: IFFALSE 18066
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18006: LD_ADDR_VAR 0 5
18010: PUSH
18011: LD_INT 2
18013: PPUSH
18014: CALL_OW 274
18018: PPUSH
18019: LD_INT 1
18021: PPUSH
18022: CALL_OW 275
18026: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18027: LD_INT 2
18029: PPUSH
18030: CALL_OW 274
18034: PPUSH
18035: LD_INT 1
18037: PPUSH
18038: LD_VAR 0 5
18042: PUSH
18043: LD_INT 100
18045: MINUS
18046: PPUSH
18047: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18051: LD_VAR 0 1
18055: PPUSH
18056: LD_INT 1
18058: PPUSH
18059: LD_INT 100
18061: PPUSH
18062: CALL_OW 291
// end ; if building = rufabsupp then
18066: LD_VAR 0 2
18070: PUSH
18071: LD_INT 17
18073: EQUAL
18074: IFFALSE 18088
// SetSide ( vehicle , 6 ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_INT 6
18083: PPUSH
18084: CALL_OW 235
// end ;
18088: PPOPN 5
18090: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 255
18100: PUSH
18101: LD_INT 3
18103: EQUAL
18104: IFFALSE 18135
// begin tamedApemans = tamedApemans + 1 ;
18106: LD_ADDR_EXP 32
18110: PUSH
18111: LD_EXP 32
18115: PUSH
18116: LD_INT 1
18118: PLUS
18119: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 106
18127: PPUSH
18128: LD_INT 85
18130: PPUSH
18131: CALL_OW 111
// end ; end ;
18135: PPOPN 2
18137: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18138: LD_INT 0
18140: PPUSH
18141: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 255
18151: PUSH
18152: LD_INT 3
18154: EQUAL
18155: PUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 247
18165: PUSH
18166: LD_INT 2
18168: EQUAL
18169: AND
18170: IFFALSE 18279
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18172: LD_VAR 0 1
18176: PPUSH
18177: CALL_OW 264
18181: PUSH
18182: LD_INT 42
18184: EQUAL
18185: PUSH
18186: LD_VAR 0 1
18190: PPUSH
18191: CALL_OW 264
18195: PUSH
18196: LD_INT 43
18198: EQUAL
18199: OR
18200: PUSH
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 264
18210: PUSH
18211: LD_INT 44
18213: EQUAL
18214: OR
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 264
18225: PUSH
18226: LD_INT 46
18228: EQUAL
18229: OR
18230: IFFALSE 18279
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18232: LD_INT 21
18234: PPUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 265
18244: PPUSH
18245: LD_VAR 0 1
18249: PPUSH
18250: CALL_OW 262
18254: PPUSH
18255: LD_VAR 0 1
18259: PPUSH
18260: CALL_OW 263
18264: PPUSH
18265: LD_VAR 0 1
18269: PPUSH
18270: CALL_OW 264
18274: PPUSH
18275: CALL_OW 185
// end ;
18279: PPOPN 3
18281: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18282: LD_VAR 0 1
18286: PPUSH
18287: CALL_OW 255
18291: PUSH
18292: LD_INT 3
18294: EQUAL
18295: PUSH
18296: LD_VAR 0 2
18300: PPUSH
18301: CALL_OW 255
18305: PUSH
18306: LD_INT 3
18308: EQUAL
18309: AND
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 302
18320: AND
18321: IFFALSE 18363
// begin ComRepairVehicle ( human , vehicle ) ;
18323: LD_VAR 0 2
18327: PPUSH
18328: LD_VAR 0 1
18332: PPUSH
18333: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18337: LD_VAR 0 2
18341: PPUSH
18342: LD_VAR 0 1
18346: PPUSH
18347: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_INT 100
18358: PPUSH
18359: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 255
18372: PUSH
18373: LD_INT 3
18375: EQUAL
18376: PUSH
18377: LD_VAR 0 2
18381: PPUSH
18382: CALL_OW 255
18386: PUSH
18387: LD_INT 3
18389: EQUAL
18390: AND
18391: PUSH
18392: LD_INT 21
18394: PPUSH
18395: CALL_OW 302
18399: AND
18400: PUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: CALL_OW 302
18410: NOT
18411: AND
18412: IFFALSE 18426
// ComEnterUnit ( human , rufab ) ;
18414: LD_VAR 0 2
18418: PPUSH
18419: LD_INT 21
18421: PPUSH
18422: CALL_OW 120
// end ;
18426: PPOPN 2
18428: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18429: LD_VAR 0 1
18433: PUSH
18434: LD_INT 21
18436: EQUAL
18437: PUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: CALL_OW 255
18447: PUSH
18448: LD_INT 3
18450: EQUAL
18451: AND
18452: IFFALSE 18466
// SetLives ( human , 1000 ) ;
18454: LD_VAR 0 2
18458: PPUSH
18459: LD_INT 1000
18461: PPUSH
18462: CALL_OW 234
// end ; end_of_file
18466: PPOPN 2
18468: END
// every 0 0$30 trigger cratesStatus = 1 do
18469: LD_EXP 38
18473: PUSH
18474: LD_INT 1
18476: EQUAL
18477: IFFALSE 18560
18479: GO 18481
18481: DISABLE
// begin enable ;
18482: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18483: LD_INT 350
18485: PUSH
18486: LD_INT 1050
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 1
18495: PPUSH
18496: LD_INT 2
18498: PPUSH
18499: CALL_OW 12
18503: ARRAY
18504: PPUSH
18505: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18509: LD_INT 4
18511: PUSH
18512: LD_INT 5
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 1
18521: PPUSH
18522: LD_INT 2
18524: PPUSH
18525: CALL_OW 12
18529: ARRAY
18530: PPUSH
18531: LD_INT 6
18533: PUSH
18534: LD_INT 7
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PPUSH
18544: LD_INT 2
18546: PPUSH
18547: CALL_OW 12
18551: ARRAY
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 55
// end ;
18560: END
// every 1 1$0 trigger cratesStatus = 2 do
18561: LD_EXP 38
18565: PUSH
18566: LD_INT 2
18568: EQUAL
18569: IFFALSE 18652
18571: GO 18573
18573: DISABLE
// begin enable ;
18574: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18575: LD_INT 3150
18577: PUSH
18578: LD_INT 4550
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: PPUSH
18588: LD_INT 2
18590: PPUSH
18591: CALL_OW 12
18595: ARRAY
18596: PPUSH
18597: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18601: LD_INT 2
18603: PUSH
18604: LD_INT 5
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 1
18613: PPUSH
18614: LD_INT 2
18616: PPUSH
18617: CALL_OW 12
18621: ARRAY
18622: PPUSH
18623: LD_INT 6
18625: PUSH
18626: LD_INT 7
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: PPUSH
18636: LD_INT 2
18638: PPUSH
18639: CALL_OW 12
18643: ARRAY
18644: PPUSH
18645: LD_INT 1
18647: PPUSH
18648: CALL_OW 55
// end ;
18652: END
// every 0 0$30 + 0 0$10 do
18653: GO 18655
18655: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18656: LD_INT 4
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_INT 2
18671: PPUSH
18672: CALL_OW 12
18676: ARRAY
18677: PPUSH
18678: LD_INT 7
18680: PPUSH
18681: LD_INT 1
18683: PPUSH
18684: CALL_OW 55
// Wait ( 0 0$15 ) ;
18688: LD_INT 525
18690: PPUSH
18691: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18695: LD_INT 4
18697: PUSH
18698: LD_INT 5
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PPUSH
18708: LD_INT 2
18710: PPUSH
18711: CALL_OW 12
18715: ARRAY
18716: PPUSH
18717: LD_INT 7
18719: PPUSH
18720: LD_INT 1
18722: PPUSH
18723: CALL_OW 55
// Wait ( 0 0$20 ) ;
18727: LD_INT 700
18729: PPUSH
18730: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18734: LD_INT 4
18736: PUSH
18737: LD_INT 5
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_INT 2
18749: PPUSH
18750: CALL_OW 12
18754: ARRAY
18755: PPUSH
18756: LD_INT 7
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 55
// end ; end_of_file
18766: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18767: LD_EXP 24
18771: PUSH
18772: LD_INT 1
18774: EQUAL
18775: IFFALSE 19076
18777: GO 18779
18779: DISABLE
18780: LD_INT 0
18782: PPUSH
18783: PPUSH
18784: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18785: LD_ADDR_VAR 0 2
18789: PUSH
18790: LD_INT 22
18792: PUSH
18793: LD_INT 1
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 21
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 2
18812: PUSH
18813: LD_INT 30
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 30
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: PPUSH
18843: CALL_OW 69
18847: ST_TO_ADDR
// for i in tmp do
18848: LD_ADDR_VAR 0 1
18852: PUSH
18853: LD_VAR 0 2
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18892
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18861: LD_ADDR_VAR 0 3
18865: PUSH
18866: LD_VAR 0 3
18870: PUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 274
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 275
18888: PLUS
18889: ST_TO_ADDR
18890: GO 18858
18892: POP
18893: POP
// strings = [ ] ;
18894: LD_ADDR_EXP 27
18898: PUSH
18899: EMPTY
18900: ST_TO_ADDR
// if tmp = 0 then
18901: LD_VAR 0 2
18905: PUSH
18906: LD_INT 0
18908: EQUAL
18909: IFFALSE 18934
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18911: LD_ADDR_EXP 27
18915: PUSH
18916: LD_EXP 27
18920: PUSH
18921: LD_STRING #Am06-1
18923: PUSH
18924: LD_EXP 25
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: ADD
18933: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18934: LD_VAR 0 2
18938: PUSH
18939: LD_INT 0
18941: GREATER
18942: PUSH
18943: LD_EXP 25
18947: PUSH
18948: LD_VAR 0 3
18952: GREATER
18953: AND
18954: IFFALSE 18985
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18956: LD_ADDR_EXP 27
18960: PUSH
18961: LD_EXP 27
18965: PUSH
18966: LD_STRING #Am06-1
18968: PUSH
18969: LD_EXP 25
18973: PUSH
18974: LD_VAR 0 3
18978: MINUS
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: ADD
18984: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18985: LD_VAR 0 2
18989: PUSH
18990: LD_INT 0
18992: GREATER
18993: PUSH
18994: LD_EXP 25
18998: PUSH
18999: LD_VAR 0 3
19003: LESSEQUAL
19004: AND
19005: IFFALSE 19028
// strings = strings ^ [ #Am06-1 , 0 ] ;
19007: LD_ADDR_EXP 27
19011: PUSH
19012: LD_EXP 27
19016: PUSH
19017: LD_STRING #Am06-1
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: ADD
19027: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19028: LD_ADDR_EXP 26
19032: PUSH
19033: LD_EXP 26
19037: PUSH
19038: LD_INT 35
19040: MINUS
19041: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19042: LD_ADDR_EXP 27
19046: PUSH
19047: LD_EXP 27
19051: PUSH
19052: LD_STRING #Am06-2
19054: PUSH
19055: LD_EXP 26
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: ADD
19064: ST_TO_ADDR
// display_strings = strings ;
19065: LD_ADDR_OWVAR 47
19069: PUSH
19070: LD_EXP 27
19074: ST_TO_ADDR
// enable ;
19075: ENABLE
// end ; end_of_file
19076: PPOPN 3
19078: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19079: LD_INT 0
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
19086: PPUSH
19087: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19088: LD_ADDR_VAR 0 3
19092: PUSH
19093: LD_INT 22
19095: PUSH
19096: LD_INT 1
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: LD_INT 2
19105: PUSH
19106: LD_INT 30
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 30
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19140: LD_INT 35
19142: PPUSH
19143: CALL_OW 67
// until depot ;
19147: LD_VAR 0 3
19151: IFFALSE 19088
// repeat wait ( 0 0$1 ) ;
19153: LD_INT 35
19155: PPUSH
19156: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19160: LD_ADDR_VAR 0 4
19164: PUSH
19165: LD_INT 22
19167: PUSH
19168: LD_INT 1
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 91
19177: PUSH
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 1
19185: ARRAY
19186: PUSH
19187: LD_INT 15
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 21
19197: PUSH
19198: LD_INT 1
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: LD_INT 25
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 25
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 25
19230: PUSH
19231: LD_INT 3
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 25
19240: PUSH
19241: LD_INT 4
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 3
19257: PUSH
19258: LD_INT 54
19260: PUSH
19261: EMPTY
19262: LIST
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: LD_INT 55
19273: PUSH
19274: EMPTY
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PUSH
19294: LD_EXP 2
19298: PUSH
19299: LD_EXP 3
19303: PUSH
19304: LD_EXP 4
19308: PUSH
19309: LD_EXP 5
19313: PUSH
19314: LD_EXP 7
19318: PUSH
19319: LD_EXP 8
19323: PUSH
19324: LD_EXP 9
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: LD_EXP 46
19342: ADD
19343: DIFF
19344: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 1
19352: PPUSH
19353: CALL_OW 463
19357: NOT
19358: AND
19359: IFFALSE 19153
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_VAR 0 4
19370: PUSH
19371: LD_INT 1
19373: PPUSH
19374: LD_VAR 0 4
19378: PPUSH
19379: CALL_OW 12
19383: ARRAY
19384: ST_TO_ADDR
// blockSpawn = 1 ;
19385: LD_ADDR_EXP 29
19389: PUSH
19390: LD_INT 1
19392: ST_TO_ADDR
// uc_side = 2 ;
19393: LD_ADDR_OWVAR 20
19397: PUSH
19398: LD_INT 2
19400: ST_TO_ADDR
// uc_nation = 2 ;
19401: LD_ADDR_OWVAR 21
19405: PUSH
19406: LD_INT 2
19408: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19409: LD_ADDR_EXP 19
19413: PUSH
19414: LD_STRING Kurt
19416: PPUSH
19417: LD_INT 0
19419: PPUSH
19420: CALL 5851 0 2
19424: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19425: LD_EXP 19
19429: PPUSH
19430: LD_VAR 0 4
19434: PPUSH
19435: CALL_OW 250
19439: PPUSH
19440: LD_VAR 0 4
19444: PPUSH
19445: CALL_OW 251
19449: PPUSH
19450: LD_INT 5
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 50
// InGameOn ;
19460: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19464: LD_EXP 19
19468: PPUSH
19469: CALL_OW 87
// wait ( 0 0$2 ) ;
19473: LD_INT 70
19475: PPUSH
19476: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19480: LD_EXP 19
19484: PPUSH
19485: LD_VAR 0 4
19489: PPUSH
19490: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19494: LD_VAR 0 4
19498: PPUSH
19499: LD_EXP 19
19503: PPUSH
19504: CALL_OW 112
// wait ( 0 0$1 ) ;
19508: LD_INT 35
19510: PPUSH
19511: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19515: LD_VAR 0 4
19519: PPUSH
19520: LD_EXP 19
19524: PPUSH
19525: CALL_OW 119
// DialogueOn ;
19529: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19533: LD_EXP 19
19537: PPUSH
19538: LD_STRING D2-Kurt-1
19540: PPUSH
19541: CALL_OW 88
// if tmp = JMM then
19545: LD_VAR 0 4
19549: PUSH
19550: LD_EXP 1
19554: EQUAL
19555: IFFALSE 19647
// begin Say ( JMM , D2-JMM-1 ) ;
19557: LD_EXP 1
19561: PPUSH
19562: LD_STRING D2-JMM-1
19564: PPUSH
19565: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19569: LD_EXP 19
19573: PPUSH
19574: LD_STRING D2-Kurt-2
19576: PPUSH
19577: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19581: LD_EXP 1
19585: PPUSH
19586: LD_STRING D2-JMM-2
19588: PPUSH
19589: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19593: LD_EXP 19
19597: PPUSH
19598: LD_STRING D2-Kurt-3
19600: PPUSH
19601: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19605: LD_EXP 1
19609: PPUSH
19610: LD_STRING D2-JMM-3
19612: PPUSH
19613: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19617: LD_EXP 19
19621: PPUSH
19622: LD_STRING D2-Kurt-4
19624: PPUSH
19625: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19629: LD_EXP 1
19633: PPUSH
19634: LD_STRING D2-JMM-4
19636: PPUSH
19637: CALL_OW 88
// DialogueOff ;
19641: CALL_OW 7
// end else
19645: GO 19957
// begin if GetSex ( tmp ) = 1 then
19647: LD_VAR 0 4
19651: PPUSH
19652: CALL_OW 258
19656: PUSH
19657: LD_INT 1
19659: EQUAL
19660: IFFALSE 19674
// Say ( tmp , D2-Sol1-1 ) ;
19662: LD_VAR 0 4
19666: PPUSH
19667: LD_STRING D2-Sol1-1
19669: PPUSH
19670: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19674: LD_VAR 0 4
19678: PPUSH
19679: CALL_OW 258
19683: PUSH
19684: LD_INT 2
19686: EQUAL
19687: IFFALSE 19701
// Say ( tmp , D2-FSol1-1 ) ;
19689: LD_VAR 0 4
19693: PPUSH
19694: LD_STRING D2-FSol1-1
19696: PPUSH
19697: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19701: LD_EXP 19
19705: PPUSH
19706: LD_STRING D2-Kurt-2
19708: PPUSH
19709: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19713: LD_VAR 0 4
19717: PPUSH
19718: CALL_OW 258
19722: PUSH
19723: LD_INT 1
19725: EQUAL
19726: IFFALSE 19740
// Say ( tmp , D2-Sol1-2 ) ;
19728: LD_VAR 0 4
19732: PPUSH
19733: LD_STRING D2-Sol1-2
19735: PPUSH
19736: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19740: LD_VAR 0 4
19744: PPUSH
19745: CALL_OW 258
19749: PUSH
19750: LD_INT 2
19752: EQUAL
19753: IFFALSE 19767
// Say ( tmp , D2-FSol1-2 ) ;
19755: LD_VAR 0 4
19759: PPUSH
19760: LD_STRING D2-FSol1-2
19762: PPUSH
19763: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19767: LD_EXP 19
19771: PPUSH
19772: LD_STRING D2-Kurt-3
19774: PPUSH
19775: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19779: LD_VAR 0 4
19783: PPUSH
19784: CALL_OW 258
19788: PUSH
19789: LD_INT 1
19791: EQUAL
19792: IFFALSE 19806
// Say ( tmp , D2-Sol1-3 ) ;
19794: LD_VAR 0 4
19798: PPUSH
19799: LD_STRING D2-Sol1-3
19801: PPUSH
19802: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19806: LD_VAR 0 4
19810: PPUSH
19811: CALL_OW 258
19815: PUSH
19816: LD_INT 2
19818: EQUAL
19819: IFFALSE 19833
// Say ( tmp , D2-FSol1-3 ) ;
19821: LD_VAR 0 4
19825: PPUSH
19826: LD_STRING D2-FSol1-3
19828: PPUSH
19829: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19833: LD_EXP 19
19837: PPUSH
19838: LD_STRING D2-Kurt-4
19840: PPUSH
19841: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19845: LD_VAR 0 4
19849: PPUSH
19850: CALL_OW 258
19854: PUSH
19855: LD_INT 1
19857: EQUAL
19858: IFFALSE 19872
// Say ( tmp , D2-Sol1-4 ) ;
19860: LD_VAR 0 4
19864: PPUSH
19865: LD_STRING D2-Sol1-4
19867: PPUSH
19868: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19872: LD_VAR 0 4
19876: PPUSH
19877: CALL_OW 258
19881: PUSH
19882: LD_INT 2
19884: EQUAL
19885: IFFALSE 19899
// Say ( tmp , D2-FSol1-4 ) ;
19887: LD_VAR 0 4
19891: PPUSH
19892: LD_STRING D2-FSol1-4
19894: PPUSH
19895: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19899: LD_VAR 0 4
19903: PPUSH
19904: CALL_OW 258
19908: PUSH
19909: LD_INT 1
19911: EQUAL
19912: IFFALSE 19926
// Say ( tmp , D2-Sol1-5 ) ;
19914: LD_VAR 0 4
19918: PPUSH
19919: LD_STRING D2-Sol1-5
19921: PPUSH
19922: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19926: LD_VAR 0 4
19930: PPUSH
19931: CALL_OW 258
19935: PUSH
19936: LD_INT 2
19938: EQUAL
19939: IFFALSE 19953
// Say ( tmp , D2-FSol1-5 ) ;
19941: LD_VAR 0 4
19945: PPUSH
19946: LD_STRING D2-FSol1-5
19948: PPUSH
19949: CALL_OW 88
// DialogueOff ;
19953: CALL_OW 7
// end ; dec = ShowQuery1 ;
19957: LD_ADDR_VAR 0 6
19961: PUSH
19962: CALL 6442 0 0
19966: ST_TO_ADDR
// if dec = 1 then
19967: LD_VAR 0 6
19971: PUSH
19972: LD_INT 1
19974: EQUAL
19975: IFFALSE 20017
// begin DialogueOn ;
19977: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19981: LD_EXP 19
19985: PPUSH
19986: LD_STRING D2a-Kurt-1
19988: PPUSH
19989: CALL_OW 88
// DialogueOff ;
19993: CALL_OW 7
// InGameOff ;
19997: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20001: LD_INT 1
20003: PPUSH
20004: LD_INT 2
20006: PPUSH
20007: LD_INT 2
20009: PPUSH
20010: LD_INT 1
20012: PPUSH
20013: CALL_OW 80
// end ; if dec = 2 then
20017: LD_VAR 0 6
20021: PUSH
20022: LD_INT 2
20024: EQUAL
20025: IFFALSE 20525
// begin DialogueOn ;
20027: CALL_OW 6
// if tmp = JMM then
20031: LD_VAR 0 4
20035: PUSH
20036: LD_EXP 1
20040: EQUAL
20041: IFFALSE 20097
// begin Say ( JMM , D2b-JMM-1 ) ;
20043: LD_EXP 1
20047: PPUSH
20048: LD_STRING D2b-JMM-1
20050: PPUSH
20051: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20055: LD_EXP 19
20059: PPUSH
20060: LD_STRING D2b-Kurt-1
20062: PPUSH
20063: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20067: LD_EXP 1
20071: PPUSH
20072: LD_STRING D2b-JMM-2
20074: PPUSH
20075: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20079: LD_EXP 19
20083: PPUSH
20084: LD_STRING D2b-Kurt-2
20086: PPUSH
20087: CALL_OW 88
// DialogueOff ;
20091: CALL_OW 7
// end else
20095: GO 20287
// begin if GetSex ( tmp ) = 1 then
20097: LD_VAR 0 4
20101: PPUSH
20102: CALL_OW 258
20106: PUSH
20107: LD_INT 1
20109: EQUAL
20110: IFFALSE 20124
// Say ( tmp , D2b-Sol1-1 ) ;
20112: LD_VAR 0 4
20116: PPUSH
20117: LD_STRING D2b-Sol1-1
20119: PPUSH
20120: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20124: LD_VAR 0 4
20128: PPUSH
20129: CALL_OW 258
20133: PUSH
20134: LD_INT 2
20136: EQUAL
20137: IFFALSE 20151
// Say ( tmp , D2b-FSol1-1 ) ;
20139: LD_VAR 0 4
20143: PPUSH
20144: LD_STRING D2b-FSol1-1
20146: PPUSH
20147: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20151: LD_EXP 19
20155: PPUSH
20156: LD_STRING D2b-Kurt-1
20158: PPUSH
20159: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20163: LD_VAR 0 4
20167: PPUSH
20168: CALL_OW 258
20172: PUSH
20173: LD_INT 1
20175: EQUAL
20176: IFFALSE 20190
// Say ( tmp , D2b-Sol1-2 ) ;
20178: LD_VAR 0 4
20182: PPUSH
20183: LD_STRING D2b-Sol1-2
20185: PPUSH
20186: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20190: LD_VAR 0 4
20194: PPUSH
20195: CALL_OW 258
20199: PUSH
20200: LD_INT 2
20202: EQUAL
20203: IFFALSE 20217
// Say ( tmp , D2b-FSol1-2 ) ;
20205: LD_VAR 0 4
20209: PPUSH
20210: LD_STRING D2b-FSol1-2
20212: PPUSH
20213: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20217: LD_EXP 19
20221: PPUSH
20222: LD_STRING D2b-Kurt-2
20224: PPUSH
20225: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20229: LD_VAR 0 4
20233: PPUSH
20234: CALL_OW 258
20238: PUSH
20239: LD_INT 1
20241: EQUAL
20242: IFFALSE 20256
// Say ( tmp , D2c-Sol1-2 ) ;
20244: LD_VAR 0 4
20248: PPUSH
20249: LD_STRING D2c-Sol1-2
20251: PPUSH
20252: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20256: LD_VAR 0 4
20260: PPUSH
20261: CALL_OW 258
20265: PUSH
20266: LD_INT 2
20268: EQUAL
20269: IFFALSE 20283
// Say ( tmp , D2c-FSol1-2 ) ;
20271: LD_VAR 0 4
20275: PPUSH
20276: LD_STRING D2c-FSol1-2
20278: PPUSH
20279: CALL_OW 88
// DialogueOff ;
20283: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20287: LD_ADDR_VAR 0 7
20291: PUSH
20292: CALL 6516 0 0
20296: ST_TO_ADDR
// if dec2 = 1 then
20297: LD_VAR 0 7
20301: PUSH
20302: LD_INT 1
20304: EQUAL
20305: IFFALSE 20347
// begin DialogueOn ;
20307: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20311: LD_EXP 19
20315: PPUSH
20316: LD_STRING D2a-Kurt-1
20318: PPUSH
20319: CALL_OW 88
// DialogueOff ;
20323: CALL_OW 7
// InGameOff ;
20327: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20331: LD_INT 1
20333: PPUSH
20334: LD_INT 2
20336: PPUSH
20337: LD_INT 2
20339: PPUSH
20340: LD_INT 1
20342: PPUSH
20343: CALL_OW 80
// end ; if dec2 = 2 then
20347: LD_VAR 0 7
20351: PUSH
20352: LD_INT 2
20354: EQUAL
20355: IFFALSE 20525
// begin if tmp = JMM then
20357: LD_VAR 0 4
20361: PUSH
20362: LD_EXP 1
20366: EQUAL
20367: IFFALSE 20427
// begin DialogueOn ;
20369: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20373: LD_EXP 1
20377: PPUSH
20378: LD_STRING D2c-JMM-1
20380: PPUSH
20381: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20385: LD_EXP 19
20389: PPUSH
20390: LD_STRING D2c-Kurt-1
20392: PPUSH
20393: CALL_OW 88
// DialogueOff ;
20397: CALL_OW 7
// InGameOff ;
20401: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20405: LD_EXP 19
20409: PPUSH
20410: LD_INT 8
20412: PPUSH
20413: CALL_OW 113
// readyToEscape = 1 ;
20417: LD_ADDR_EXP 21
20421: PUSH
20422: LD_INT 1
20424: ST_TO_ADDR
// end else
20425: GO 20525
// begin DialogueOn ;
20427: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20431: LD_VAR 0 4
20435: PPUSH
20436: CALL_OW 258
20440: PUSH
20441: LD_INT 1
20443: EQUAL
20444: IFFALSE 20458
// Say ( tmp , D2c-Sol1-1 ) ;
20446: LD_VAR 0 4
20450: PPUSH
20451: LD_STRING D2c-Sol1-1
20453: PPUSH
20454: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20458: LD_VAR 0 4
20462: PPUSH
20463: CALL_OW 258
20467: PUSH
20468: LD_INT 2
20470: EQUAL
20471: IFFALSE 20485
// Say ( tmp , D2c-FSol1-1 ) ;
20473: LD_VAR 0 4
20477: PPUSH
20478: LD_STRING D2c-FSol1-1
20480: PPUSH
20481: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20485: LD_EXP 19
20489: PPUSH
20490: LD_STRING D2c-Kurt-1
20492: PPUSH
20493: CALL_OW 88
// DialogueOff ;
20497: CALL_OW 7
// InGameOff ;
20501: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20505: LD_EXP 19
20509: PPUSH
20510: LD_INT 8
20512: PPUSH
20513: CALL_OW 113
// readyToEscape = 1 ;
20517: LD_ADDR_EXP 21
20521: PUSH
20522: LD_INT 1
20524: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20525: LD_VAR 0 6
20529: PUSH
20530: LD_INT 3
20532: EQUAL
20533: IFFALSE 20707
// begin DialogueOn ;
20535: CALL_OW 6
// if tmp = JMM then
20539: LD_VAR 0 4
20543: PUSH
20544: LD_EXP 1
20548: EQUAL
20549: IFFALSE 20609
// begin DialogueOn ;
20551: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20555: LD_EXP 1
20559: PPUSH
20560: LD_STRING D2c-JMM-1
20562: PPUSH
20563: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20567: LD_EXP 19
20571: PPUSH
20572: LD_STRING D2c-Kurt-1
20574: PPUSH
20575: CALL_OW 88
// DialogueOff ;
20579: CALL_OW 7
// InGameOff ;
20583: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20587: LD_EXP 19
20591: PPUSH
20592: LD_INT 8
20594: PPUSH
20595: CALL_OW 113
// readyToEscape = 1 ;
20599: LD_ADDR_EXP 21
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// end else
20607: GO 20707
// begin DialogueOn ;
20609: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20613: LD_VAR 0 4
20617: PPUSH
20618: CALL_OW 258
20622: PUSH
20623: LD_INT 1
20625: EQUAL
20626: IFFALSE 20640
// Say ( tmp , D2c-Sol1-1 ) ;
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_STRING D2c-Sol1-1
20635: PPUSH
20636: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20640: LD_VAR 0 4
20644: PPUSH
20645: CALL_OW 258
20649: PUSH
20650: LD_INT 2
20652: EQUAL
20653: IFFALSE 20667
// Say ( tmp , D2c-FSol1-1 ) ;
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_STRING D2c-FSol1-1
20662: PPUSH
20663: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20667: LD_EXP 19
20671: PPUSH
20672: LD_STRING D2c-Kurt-1
20674: PPUSH
20675: CALL_OW 88
// DialogueOff ;
20679: CALL_OW 7
// InGameOff ;
20683: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20687: LD_EXP 19
20691: PPUSH
20692: LD_INT 8
20694: PPUSH
20695: CALL_OW 113
// readyToEscape = 1 ;
20699: LD_ADDR_EXP 21
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20707: LD_ADDR_EXP 29
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20715: LD_INT 35
20717: PPUSH
20718: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20722: LD_EXP 19
20726: PPUSH
20727: LD_INT 8
20729: PPUSH
20730: CALL_OW 308
20734: PUSH
20735: LD_EXP 21
20739: AND
20740: PUSH
20741: LD_EXP 19
20745: PPUSH
20746: CALL_OW 301
20750: OR
20751: IFFALSE 20715
// if IsDead ( Kurt ) then
20753: LD_EXP 19
20757: PPUSH
20758: CALL_OW 301
20762: IFFALSE 20766
// exit ;
20764: GO 20835
// RemoveUnit ( Kurt ) ;
20766: LD_EXP 19
20770: PPUSH
20771: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20775: LD_EXP 19
20779: PPUSH
20780: LD_STRING Kurt
20782: PPUSH
20783: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20787: LD_INT 1
20789: PPUSH
20790: LD_INT 2
20792: PPUSH
20793: CALL_OW 81
20797: PUSH
20798: LD_INT 0
20800: EQUAL
20801: IFFALSE 20811
// KurtStatus = 1 ;
20803: LD_ADDR_EXP 20
20807: PUSH
20808: LD_INT 1
20810: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20811: LD_INT 1
20813: PPUSH
20814: LD_INT 2
20816: PPUSH
20817: CALL_OW 81
20821: PUSH
20822: LD_INT 2
20824: EQUAL
20825: IFFALSE 20835
// KurtStatus = 2 ;
20827: LD_ADDR_EXP 20
20831: PUSH
20832: LD_INT 2
20834: ST_TO_ADDR
// end ; end_of_file
20835: LD_VAR 0 1
20839: RET
// every 0 0$1 do
20840: GO 20842
20842: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20843: LD_INT 3
20845: PPUSH
20846: LD_INT 32
20848: PPUSH
20849: LD_INT 3
20851: PPUSH
20852: CALL 6571 0 3
20856: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20857: GO 20859
20859: DISABLE
20860: LD_INT 0
20862: PPUSH
// begin enemyWayX = [ ] ;
20863: LD_ADDR_EXP 47
20867: PUSH
20868: EMPTY
20869: ST_TO_ADDR
// enemyWayY = [ ] ;
20870: LD_ADDR_EXP 48
20874: PUSH
20875: EMPTY
20876: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20877: LD_ADDR_VAR 0 1
20881: PUSH
20882: LD_INT 1
20884: PPUSH
20885: LD_INT 2
20887: PPUSH
20888: CALL_OW 12
20892: ST_TO_ADDR
// if rnd = 1 then
20893: LD_VAR 0 1
20897: PUSH
20898: LD_INT 1
20900: EQUAL
20901: IFFALSE 20941
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20903: LD_ADDR_EXP 47
20907: PUSH
20908: LD_INT 93
20910: PUSH
20911: LD_INT 84
20913: PUSH
20914: LD_INT 104
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20922: LD_ADDR_EXP 48
20926: PUSH
20927: LD_INT 51
20929: PUSH
20930: LD_INT 35
20932: PUSH
20933: LD_INT 28
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: LIST
20940: ST_TO_ADDR
// end ; if rnd = 2 then
20941: LD_VAR 0 1
20945: PUSH
20946: LD_INT 2
20948: EQUAL
20949: IFFALSE 21005
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20951: LD_ADDR_EXP 47
20955: PUSH
20956: LD_INT 93
20958: PUSH
20959: LD_INT 52
20961: PUSH
20962: LD_INT 34
20964: PUSH
20965: LD_INT 28
20967: PUSH
20968: LD_INT 30
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20978: LD_ADDR_EXP 48
20982: PUSH
20983: LD_INT 51
20985: PUSH
20986: LD_INT 45
20988: PUSH
20989: LD_INT 35
20991: PUSH
20992: LD_INT 26
20994: PUSH
20995: LD_INT 20
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
// end ; enable ;
21005: ENABLE
// end ;
21006: PPOPN 1
21008: END
// every 0 0$1 do
21009: GO 21011
21011: DISABLE
// begin enable ;
21012: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21013: LD_INT 3
21015: PPUSH
21016: LD_INT 2
21018: PPUSH
21019: LD_INT 10
21021: PPUSH
21022: LD_EXP 31
21026: PPUSH
21027: CALL 8006 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21031: LD_INT 3
21033: PPUSH
21034: LD_INT 12
21036: PPUSH
21037: LD_EXP 31
21041: PPUSH
21042: CALL 9891 0 3
// if disableHealAI = 0 then
21046: LD_EXP 33
21050: PUSH
21051: LD_INT 0
21053: EQUAL
21054: IFFALSE 21075
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21056: LD_INT 3
21058: PPUSH
21059: LD_INT 9
21061: PPUSH
21062: LD_INT 10
21064: PPUSH
21065: LD_INT 32
21067: PUSH
21068: EMPTY
21069: LIST
21070: PPUSH
21071: CALL 8397 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21075: LD_INT 3
21077: PPUSH
21078: LD_INT 51
21080: PPUSH
21081: LD_INT 6
21083: PPUSH
21084: CALL 9105 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21088: LD_INT 3
21090: PPUSH
21091: LD_INT 12
21093: PPUSH
21094: LD_INT 121
21096: PPUSH
21097: LD_INT 100
21099: PPUSH
21100: CALL 6966 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21104: LD_INT 3
21106: PPUSH
21107: LD_INT 22
21109: PPUSH
21110: LD_EXP 47
21114: PPUSH
21115: LD_EXP 48
21119: PPUSH
21120: CALL 7169 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21124: LD_INT 3
21126: PPUSH
21127: LD_INT 10
21129: PPUSH
21130: CALL 9248 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21134: LD_INT 3
21136: PPUSH
21137: LD_INT 1
21139: PPUSH
21140: CALL 9661 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21144: LD_INT 2
21146: PPUSH
21147: CALL_OW 303
21151: PUSH
21152: LD_INT 2
21154: PPUSH
21155: CALL_OW 255
21159: PUSH
21160: LD_INT 1
21162: EQUAL
21163: OR
21164: IFFALSE 21176
// DefendDepot ( 3 , rudepo ) ;
21166: LD_INT 3
21168: PPUSH
21169: LD_INT 2
21171: PPUSH
21172: CALL 8941 0 2
// end ;
21176: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21177: LD_INT 22
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 21
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 55
21199: PUSH
21200: EMPTY
21201: LIST
21202: PUSH
21203: LD_INT 3
21205: PUSH
21206: LD_INT 34
21208: PUSH
21209: LD_INT 51
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: PPUSH
21226: CALL_OW 69
21230: PUSH
21231: LD_INT 0
21233: EQUAL
21234: PUSH
21235: LD_INT 21
21237: PPUSH
21238: CALL_OW 255
21242: PUSH
21243: LD_INT 3
21245: EQUAL
21246: AND
21247: PUSH
21248: LD_INT 21
21250: PPUSH
21251: CALL_OW 302
21255: AND
21256: PUSH
21257: LD_INT 2
21259: PPUSH
21260: CALL_OW 255
21264: PUSH
21265: LD_INT 3
21267: EQUAL
21268: AND
21269: PUSH
21270: LD_INT 2
21272: PPUSH
21273: CALL_OW 302
21277: AND
21278: IFFALSE 21462
21280: GO 21282
21282: DISABLE
// begin enable ;
21283: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21284: LD_INT 2
21286: PPUSH
21287: CALL_OW 274
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: LD_INT 1000
21297: PPUSH
21298: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21302: LD_INT 3
21304: PPUSH
21305: LD_INT 21
21307: PPUSH
21308: LD_INT 5
21310: PUSH
21311: LD_INT 6
21313: PUSH
21314: LD_INT 6
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: PUSH
21322: LD_OWVAR 67
21326: ARRAY
21327: PPUSH
21328: LD_INT 43
21330: PUSH
21331: LD_INT 43
21333: PUSH
21334: LD_INT 44
21336: PUSH
21337: LD_INT 44
21339: PUSH
21340: LD_INT 46
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 43
21352: PUSH
21353: LD_INT 43
21355: PUSH
21356: LD_INT 43
21358: PUSH
21359: LD_INT 44
21361: PUSH
21362: LD_INT 44
21364: PUSH
21365: LD_INT 46
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 43
21378: PUSH
21379: LD_INT 43
21381: PUSH
21382: LD_INT 43
21384: PUSH
21385: LD_INT 44
21387: PUSH
21388: LD_INT 44
21390: PUSH
21391: LD_INT 46
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: PUSH
21407: LD_OWVAR 67
21411: ARRAY
21412: PPUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_INT 1
21418: PPUSH
21419: LD_INT 22
21421: PUSH
21422: LD_INT 22
21424: PUSH
21425: LD_INT 24
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: PPUSH
21435: LD_INT 2
21437: PPUSH
21438: CALL_OW 12
21442: ARRAY
21443: PUSH
21444: LD_INT 24
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: PUSH
21452: LD_OWVAR 67
21456: ARRAY
21457: PPUSH
21458: CALL 6812 0 7
// end ;
21462: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21463: LD_INT 17
21465: PPUSH
21466: CALL_OW 255
21470: PUSH
21471: LD_INT 3
21473: EQUAL
21474: PUSH
21475: LD_INT 17
21477: PPUSH
21478: CALL_OW 302
21482: AND
21483: PUSH
21484: LD_INT 2
21486: PPUSH
21487: CALL_OW 255
21491: PUSH
21492: LD_INT 3
21494: EQUAL
21495: AND
21496: PUSH
21497: LD_INT 2
21499: PPUSH
21500: CALL_OW 302
21504: AND
21505: IFFALSE 21572
21507: GO 21509
21509: DISABLE
// begin enable ;
21510: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21511: LD_INT 17
21513: PPUSH
21514: LD_INT 22
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: LD_INT 1
21522: PPUSH
21523: LD_INT 42
21525: PUSH
21526: LD_INT 43
21528: PUSH
21529: LD_INT 44
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: PPUSH
21540: LD_INT 3
21542: PPUSH
21543: CALL_OW 12
21547: ARRAY
21548: PPUSH
21549: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21553: LD_INT 17
21555: PPUSH
21556: LD_INT 22
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: LD_INT 51
21567: PPUSH
21568: CALL_OW 185
// end ;
21572: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21573: LD_INT 17
21575: PPUSH
21576: CALL_OW 302
21580: PUSH
21581: LD_INT 17
21583: PPUSH
21584: CALL_OW 255
21588: PUSH
21589: LD_INT 3
21591: EQUAL
21592: AND
21593: PUSH
21594: LD_INT 2
21596: PPUSH
21597: CALL_OW 302
21601: AND
21602: PUSH
21603: LD_INT 2
21605: PPUSH
21606: CALL_OW 255
21610: PUSH
21611: LD_INT 3
21613: EQUAL
21614: AND
21615: PUSH
21616: LD_INT 17
21618: PPUSH
21619: CALL_OW 313
21623: NOT
21624: AND
21625: IFFALSE 21719
21627: GO 21629
21629: DISABLE
21630: LD_INT 0
21632: PPUSH
// begin for i = 1 to 6 do
21633: LD_ADDR_VAR 0 1
21637: PUSH
21638: DOUBLE
21639: LD_INT 1
21641: DEC
21642: ST_TO_ADDR
21643: LD_INT 6
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21717
// begin uc_side = 3 ;
21649: LD_ADDR_OWVAR 20
21653: PUSH
21654: LD_INT 3
21656: ST_TO_ADDR
// uc_nation = 3 ;
21657: LD_ADDR_OWVAR 21
21661: PUSH
21662: LD_INT 3
21664: ST_TO_ADDR
// hc_gallery :=  ;
21665: LD_ADDR_OWVAR 33
21669: PUSH
21670: LD_STRING 
21672: ST_TO_ADDR
// hc_name :=  ;
21673: LD_ADDR_OWVAR 26
21677: PUSH
21678: LD_STRING 
21680: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21681: LD_INT 0
21683: PPUSH
21684: LD_EXP 34
21688: PPUSH
21689: LD_EXP 35
21693: PPUSH
21694: CALL_OW 12
21698: PPUSH
21699: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21703: CALL_OW 44
21707: PPUSH
21708: LD_INT 17
21710: PPUSH
21711: CALL_OW 52
// end ;
21715: GO 21646
21717: POP
21718: POP
// end ;
21719: PPOPN 1
21721: END
// every 2 2$0 do var i , j ;
21722: GO 21724
21724: DISABLE
21725: LD_INT 0
21727: PPUSH
21728: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21729: LD_INT 14700
21731: PUSH
21732: LD_INT 33600
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PPUSH
21742: LD_INT 2
21744: PPUSH
21745: CALL_OW 12
21749: ARRAY
21750: PPUSH
21751: CALL_OW 67
// disableHealAI = 1 ;
21755: LD_ADDR_EXP 33
21759: PUSH
21760: LD_INT 1
21762: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21763: LD_ADDR_VAR 0 1
21767: PUSH
21768: LD_INT 22
21770: PUSH
21771: LD_INT 3
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 25
21780: PUSH
21781: LD_INT 4
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: PUSH
21797: FOR_IN
21798: IFFALSE 21811
// ComExitBuilding ( i ) ;
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 122
21809: GO 21797
21811: POP
21812: POP
// wait ( 0 0$1 ) ;
21813: LD_INT 35
21815: PPUSH
21816: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21820: LD_INT 35
21822: PPUSH
21823: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21827: LD_ADDR_VAR 0 1
21831: PUSH
21832: LD_INT 22
21834: PUSH
21835: LD_INT 3
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 25
21844: PUSH
21845: LD_INT 4
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PPUSH
21856: CALL_OW 69
21860: PUSH
21861: FOR_IN
21862: IFFALSE 21939
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21864: LD_ADDR_VAR 0 2
21868: PUSH
21869: LD_INT 17
21871: PPUSH
21872: LD_INT 22
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 25
21884: PUSH
21885: LD_INT 12
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PPUSH
21896: CALL_OW 70
21900: PUSH
21901: FOR_IN
21902: IFFALSE 21935
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21904: LD_VAR 0 1
21908: PPUSH
21909: LD_VAR 0 2
21913: PPUSH
21914: CALL_OW 250
21918: PPUSH
21919: LD_VAR 0 2
21923: PPUSH
21924: CALL_OW 251
21928: PPUSH
21929: CALL_OW 191
// end ;
21933: GO 21901
21935: POP
21936: POP
// end ;
21937: GO 21861
21939: POP
21940: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21941: LD_INT 22
21943: PUSH
21944: LD_INT 3
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 25
21953: PUSH
21954: LD_INT 4
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PPUSH
21965: CALL_OW 69
21969: PUSH
21970: LD_INT 0
21972: EQUAL
21973: PUSH
21974: LD_EXP 32
21978: PUSH
21979: LD_INT 6
21981: PUSH
21982: LD_INT 7
21984: PUSH
21985: LD_INT 8
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: LIST
21992: PUSH
21993: LD_OWVAR 67
21997: ARRAY
21998: GREATEREQUAL
21999: OR
22000: PUSH
22001: LD_INT 17
22003: PPUSH
22004: LD_INT 22
22006: PUSH
22007: LD_INT 0
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 25
22016: PUSH
22017: LD_INT 12
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PPUSH
22028: CALL_OW 70
22032: PUSH
22033: LD_INT 0
22035: EQUAL
22036: OR
22037: IFFALSE 21820
// disableHealAI = 0 ;
22039: LD_ADDR_EXP 33
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22047: LD_ADDR_VAR 0 1
22051: PUSH
22052: LD_INT 22
22054: PUSH
22055: LD_INT 3
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 25
22064: PUSH
22065: LD_INT 12
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PPUSH
22076: CALL_OW 69
22080: PUSH
22081: FOR_IN
22082: IFFALSE 22098
// SetClass ( i , 16 ) ;
22084: LD_VAR 0 1
22088: PPUSH
22089: LD_INT 16
22091: PPUSH
22092: CALL_OW 336
22096: GO 22081
22098: POP
22099: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22100: LD_ADDR_VAR 0 1
22104: PUSH
22105: LD_INT 22
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 25
22117: PUSH
22118: LD_INT 4
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PPUSH
22129: CALL_OW 69
22133: PUSH
22134: FOR_IN
22135: IFFALSE 22154
// ComMoveXY ( i , 113 , 94 ) ;
22137: LD_VAR 0 1
22141: PPUSH
22142: LD_INT 113
22144: PPUSH
22145: LD_INT 94
22147: PPUSH
22148: CALL_OW 111
22152: GO 22134
22154: POP
22155: POP
// end ;
22156: PPOPN 2
22158: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22159: LD_INT 21
22161: PPUSH
22162: CALL_OW 255
22166: PUSH
22167: LD_INT 3
22169: EQUAL
22170: PUSH
22171: LD_INT 21
22173: PPUSH
22174: CALL_OW 302
22178: AND
22179: PUSH
22180: LD_INT 22
22182: PUSH
22183: LD_INT 3
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 34
22192: PUSH
22193: LD_INT 51
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: PUSH
22209: LD_INT 0
22211: EQUAL
22212: AND
22213: IFFALSE 22245
22215: GO 22217
22217: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22218: LD_INT 21
22220: PPUSH
22221: LD_INT 23
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: LD_INT 1
22229: PPUSH
22230: LD_INT 51
22232: PPUSH
22233: CALL_OW 185
// wait ( 5 5$0 ) ;
22237: LD_INT 10500
22239: PPUSH
22240: CALL_OW 67
// enable ;
22244: ENABLE
// end ; end_of_file
22245: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22246: LD_EXP 26
22250: PUSH
22251: LD_INT 0
22253: LESSEQUAL
22254: IFFALSE 22403
22256: GO 22258
22258: DISABLE
22259: LD_INT 0
22261: PPUSH
22262: PPUSH
22263: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_INT 22
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 21
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 30
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 69
22326: ST_TO_ADDR
// for i in tmp do
22327: LD_ADDR_VAR 0 1
22331: PUSH
22332: LD_VAR 0 2
22336: PUSH
22337: FOR_IN
22338: IFFALSE 22371
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22340: LD_ADDR_VAR 0 3
22344: PUSH
22345: LD_VAR 0 3
22349: PUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 274
22359: PPUSH
22360: LD_INT 1
22362: PPUSH
22363: CALL_OW 275
22367: PLUS
22368: ST_TO_ADDR
22369: GO 22337
22371: POP
22372: POP
// if yourCrates >= needCrates then
22373: LD_VAR 0 3
22377: PUSH
22378: LD_EXP 25
22382: GREATEREQUAL
22383: IFFALSE 22396
// begin FinishMission ( yourCrates ) ;
22385: LD_VAR 0 3
22389: PPUSH
22390: CALL 22406 0 1
// end else
22394: GO 22403
// begin YouLost ( matmin ) ;
22396: LD_STRING matmin
22398: PPUSH
22399: CALL_OW 104
// end ; end ;
22403: PPOPN 3
22405: END
// export function FinishMission ( crates ) ; begin
22406: LD_INT 0
22408: PPUSH
// if crates + 100 > crates then
22409: LD_VAR 0 1
22413: PUSH
22414: LD_INT 100
22416: PLUS
22417: PUSH
22418: LD_VAR 0 1
22422: GREATER
22423: IFFALSE 22447
// begin AddMedal ( cans , 1 ) ;
22425: LD_STRING cans
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22435: LD_INT 1
22437: PPUSH
22438: LD_STRING 06_crates_1
22440: PPUSH
22441: CALL_OW 39
// end else
22445: GO 22468
// begin AddMedal ( cans , - 1 ) ;
22447: LD_STRING cans
22449: PPUSH
22450: LD_INT 1
22452: NEG
22453: PPUSH
22454: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22458: LD_INT 0
22460: PPUSH
22461: LD_STRING 06_crates_1
22463: PPUSH
22464: CALL_OW 39
// end ; if unitLost < 3 then
22468: LD_EXP 30
22472: PUSH
22473: LD_INT 3
22475: LESS
22476: IFFALSE 22490
// begin AddMedal ( people , 1 ) ;
22478: LD_STRING people
22480: PPUSH
22481: LD_INT 1
22483: PPUSH
22484: CALL_OW 101
// end else
22488: GO 22501
// begin AddMedal ( people , - 1 ) ;
22490: LD_STRING people
22492: PPUSH
22493: LD_INT 1
22495: NEG
22496: PPUSH
22497: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22501: LD_EXP 28
22505: PPUSH
22506: LD_STRING 06_remoteVehs_1
22508: PPUSH
22509: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22513: LD_EXP 28
22517: PUSH
22518: LD_INT 1
22520: EQUAL
22521: IFFALSE 22535
// begin AddMedal ( remote , 1 ) ;
22523: LD_STRING remote
22525: PPUSH
22526: LD_INT 1
22528: PPUSH
22529: CALL_OW 101
// end else
22533: GO 22575
// begin if GetTech ( 18 , 1 ) = state_enabled then
22535: LD_INT 18
22537: PPUSH
22538: LD_INT 1
22540: PPUSH
22541: CALL_OW 321
22545: PUSH
22546: LD_INT 1
22548: EQUAL
22549: IFFALSE 22564
// begin AddMedal ( remote , - 1 ) ;
22551: LD_STRING remote
22553: PPUSH
22554: LD_INT 1
22556: NEG
22557: PPUSH
22558: CALL_OW 101
// end else
22562: GO 22575
// begin AddMedal ( remote , - 2 ) ;
22564: LD_STRING remote
22566: PPUSH
22567: LD_INT 2
22569: NEG
22570: PPUSH
22571: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22575: LD_EXP 20
22579: PPUSH
22580: LD_STRING 06_KurtStatus_1
22582: PPUSH
22583: CALL_OW 39
// GiveMedals ( Main ) ;
22587: LD_STRING Main
22589: PPUSH
22590: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22594: LD_INT 22
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 21
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 50
22616: PUSH
22617: EMPTY
22618: LIST
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 25
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 25
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 25
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 25
22655: PUSH
22656: LD_INT 4
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: PPUSH
22676: CALL_OW 69
22680: PPUSH
22681: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22685: LD_EXP 1
22689: PPUSH
22690: LD_EXP 43
22694: PUSH
22695: LD_STRING JMM
22697: STR
22698: PPUSH
22699: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22703: LD_EXP 2
22707: PPUSH
22708: LD_EXP 43
22712: PUSH
22713: LD_STRING Lisa
22715: STR
22716: PPUSH
22717: CALL 6070 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22721: LD_EXP 3
22725: PPUSH
22726: LD_EXP 43
22730: PUSH
22731: LD_STRING Bobby
22733: STR
22734: PPUSH
22735: CALL 6070 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22739: LD_EXP 4
22743: PPUSH
22744: LD_EXP 43
22748: PUSH
22749: LD_STRING Cyrus
22751: STR
22752: PPUSH
22753: CALL 6070 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22757: LD_EXP 5
22761: PPUSH
22762: LD_EXP 43
22766: PUSH
22767: LD_STRING Frank
22769: STR
22770: PPUSH
22771: CALL 6070 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22775: LD_EXP 6
22779: PPUSH
22780: LD_EXP 43
22784: PUSH
22785: LD_STRING Brown
22787: STR
22788: PPUSH
22789: CALL 6070 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22793: LD_EXP 7
22797: PPUSH
22798: LD_EXP 43
22802: PUSH
22803: LD_STRING Donaldson
22805: STR
22806: PPUSH
22807: CALL 6070 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22811: LD_EXP 8
22815: PPUSH
22816: LD_EXP 43
22820: PUSH
22821: LD_STRING Gladstone
22823: STR
22824: PPUSH
22825: CALL 6070 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22829: LD_EXP 9
22833: PPUSH
22834: LD_EXP 43
22838: PUSH
22839: LD_STRING Denis
22841: STR
22842: PPUSH
22843: CALL 6070 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22847: LD_EXP 15
22851: PPUSH
22852: LD_EXP 43
22856: PUSH
22857: LD_STRING Joan
22859: STR
22860: PPUSH
22861: CALL 6070 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22865: LD_EXP 16
22869: PPUSH
22870: LD_STRING 06_JoanStatus_1
22872: PPUSH
22873: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22877: LD_INT 50
22879: PUSH
22880: EMPTY
22881: LIST
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 25
22908: PUSH
22909: LD_INT 1
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 25
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 25
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 25
22938: PUSH
22939: LD_INT 4
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: PPUSH
22959: CALL_OW 69
22963: PUSH
22964: LD_EXP 1
22968: PUSH
22969: LD_EXP 2
22973: PUSH
22974: LD_EXP 3
22978: PUSH
22979: LD_EXP 4
22983: PUSH
22984: LD_EXP 5
22988: PUSH
22989: LD_EXP 6
22993: PUSH
22994: LD_EXP 7
22998: PUSH
22999: LD_EXP 8
23003: PUSH
23004: LD_EXP 9
23008: PUSH
23009: LD_EXP 15
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: DIFF
23026: PPUSH
23027: LD_STRING 06_other_survivors
23029: PPUSH
23030: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23034: LD_INT 50
23036: PUSH
23037: EMPTY
23038: LIST
23039: PUSH
23040: LD_INT 22
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 21
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: LD_INT 25
23065: PUSH
23066: LD_INT 12
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 25
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: PPUSH
23099: LD_STRING 06_other_apemans
23101: PPUSH
23102: CALL_OW 38
// YouWin ;
23106: CALL_OW 103
// end ; end_of_file
23110: LD_VAR 0 2
23114: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23115: LD_EXP 39
23119: PUSH
23120: LD_INT 3
23122: EQUAL
23123: IFFALSE 23238
23125: GO 23127
23127: DISABLE
// begin enable ;
23128: ENABLE
// sendedConvoys = 0 ;
23129: LD_ADDR_EXP 39
23133: PUSH
23134: LD_INT 0
23136: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23137: LD_INT 6
23139: PPUSH
23140: LD_INT 3
23142: PPUSH
23143: LD_INT 5
23145: PPUSH
23146: LD_INT 10
23148: PPUSH
23149: CALL_OW 12
23153: PUSH
23154: LD_INT 5
23156: PPUSH
23157: LD_INT 11
23159: PPUSH
23160: CALL_OW 12
23164: PUSH
23165: LD_INT 8
23167: PPUSH
23168: LD_INT 12
23170: PPUSH
23171: CALL_OW 12
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: PUSH
23181: LD_OWVAR 67
23185: ARRAY
23186: PPUSH
23187: LD_INT 0
23189: PPUSH
23190: LD_INT 0
23192: PPUSH
23193: LD_INT 0
23195: PPUSH
23196: LD_INT 0
23198: PPUSH
23199: LD_EXP 34
23203: PPUSH
23204: LD_EXP 35
23208: PPUSH
23209: CALL_OW 12
23213: PPUSH
23214: LD_INT 16
23216: PPUSH
23217: LD_INT 15
23219: PPUSH
23220: LD_INT 1
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: LD_INT 2
23228: PPUSH
23229: CALL_OW 12
23233: PPUSH
23234: CALL 10489 0 12
// end ; end_of_file
23238: END
// export function PrepareNature ; var i , un ; begin
23239: LD_INT 0
23241: PPUSH
23242: PPUSH
23243: PPUSH
// for i = 1 to Difficulty + 2 do
23244: LD_ADDR_VAR 0 2
23248: PUSH
23249: DOUBLE
23250: LD_INT 1
23252: DEC
23253: ST_TO_ADDR
23254: LD_OWVAR 67
23258: PUSH
23259: LD_INT 2
23261: PLUS
23262: PUSH
23263: FOR_TO
23264: IFFALSE 23373
// begin hc_sex = sex_male ;
23266: LD_ADDR_OWVAR 27
23270: PUSH
23271: LD_INT 1
23273: ST_TO_ADDR
// uc_side = 0 ;
23274: LD_ADDR_OWVAR 20
23278: PUSH
23279: LD_INT 0
23281: ST_TO_ADDR
// uc_nation = nation_nature ;
23282: LD_ADDR_OWVAR 21
23286: PUSH
23287: LD_INT 0
23289: ST_TO_ADDR
// hc_class = class_tiger ;
23290: LD_ADDR_OWVAR 28
23294: PUSH
23295: LD_INT 14
23297: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23298: LD_ADDR_OWVAR 31
23302: PUSH
23303: LD_EXP 35
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23323: LD_ADDR_OWVAR 35
23327: PUSH
23328: LD_INT 5
23330: NEG
23331: PPUSH
23332: LD_INT 5
23334: PPUSH
23335: CALL_OW 12
23339: PUSH
23340: LD_OWVAR 67
23344: MUL
23345: ST_TO_ADDR
// un = CreateHuman ;
23346: LD_ADDR_VAR 0 3
23350: PUSH
23351: CALL_OW 44
23355: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23356: LD_VAR 0 3
23360: PPUSH
23361: LD_INT 18
23363: PPUSH
23364: LD_INT 0
23366: PPUSH
23367: CALL_OW 49
// end ;
23371: GO 23263
23373: POP
23374: POP
// for i = 1 to rand ( 3 , 4 ) do
23375: LD_ADDR_VAR 0 2
23379: PUSH
23380: DOUBLE
23381: LD_INT 1
23383: DEC
23384: ST_TO_ADDR
23385: LD_INT 3
23387: PPUSH
23388: LD_INT 4
23390: PPUSH
23391: CALL_OW 12
23395: PUSH
23396: FOR_TO
23397: IFFALSE 23491
// begin hc_sex = sex_male ;
23399: LD_ADDR_OWVAR 27
23403: PUSH
23404: LD_INT 1
23406: ST_TO_ADDR
// uc_side = 0 ;
23407: LD_ADDR_OWVAR 20
23411: PUSH
23412: LD_INT 0
23414: ST_TO_ADDR
// uc_nation = nation_nature ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 0
23422: ST_TO_ADDR
// hc_class = 18 ;
23423: LD_ADDR_OWVAR 28
23427: PUSH
23428: LD_INT 18
23430: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23431: LD_ADDR_OWVAR 31
23435: PUSH
23436: LD_EXP 35
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// hc_agressivity = 0 ;
23456: LD_ADDR_OWVAR 35
23460: PUSH
23461: LD_INT 0
23463: ST_TO_ADDR
// un = CreateHuman ;
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: CALL_OW 44
23473: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23474: LD_VAR 0 3
23478: PPUSH
23479: LD_INT 18
23481: PPUSH
23482: LD_INT 0
23484: PPUSH
23485: CALL_OW 49
// end ;
23489: GO 23396
23491: POP
23492: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: DOUBLE
23499: LD_INT 1
23501: DEC
23502: ST_TO_ADDR
23503: LD_INT 1
23505: PPUSH
23506: LD_INT 3
23508: PPUSH
23509: CALL_OW 12
23513: PUSH
23514: LD_OWVAR 67
23518: PLUS
23519: PUSH
23520: FOR_TO
23521: IFFALSE 23670
// begin hc_sex = sex_male ;
23523: LD_ADDR_OWVAR 27
23527: PUSH
23528: LD_INT 1
23530: ST_TO_ADDR
// uc_side = 0 ;
23531: LD_ADDR_OWVAR 20
23535: PUSH
23536: LD_INT 0
23538: ST_TO_ADDR
// uc_nation = nation_nature ;
23539: LD_ADDR_OWVAR 21
23543: PUSH
23544: LD_INT 0
23546: ST_TO_ADDR
// hc_class = class_apeman ;
23547: LD_ADDR_OWVAR 28
23551: PUSH
23552: LD_INT 12
23554: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23555: LD_ADDR_OWVAR 31
23559: PUSH
23560: LD_INT 2
23562: PPUSH
23563: LD_INT 5
23565: PPUSH
23566: CALL_OW 12
23570: PUSH
23571: LD_INT 0
23573: PPUSH
23574: LD_INT 2
23576: PPUSH
23577: CALL_OW 12
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23594: LD_ADDR_OWVAR 35
23598: PUSH
23599: LD_INT 20
23601: PPUSH
23602: LD_INT 30
23604: PPUSH
23605: CALL_OW 12
23609: PUSH
23610: LD_INT 30
23612: PPUSH
23613: LD_INT 40
23615: PPUSH
23616: CALL_OW 12
23620: PUSH
23621: LD_INT 40
23623: PPUSH
23624: LD_INT 50
23626: PPUSH
23627: CALL_OW 12
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: PUSH
23637: LD_OWVAR 67
23641: ARRAY
23642: ST_TO_ADDR
// un = CreateHuman ;
23643: LD_ADDR_VAR 0 3
23647: PUSH
23648: CALL_OW 44
23652: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23653: LD_VAR 0 3
23657: PPUSH
23658: LD_INT 19
23660: PPUSH
23661: LD_INT 0
23663: PPUSH
23664: CALL_OW 49
// end ;
23668: GO 23520
23670: POP
23671: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23672: LD_ADDR_VAR 0 2
23676: PUSH
23677: DOUBLE
23678: LD_INT 1
23680: DEC
23681: ST_TO_ADDR
23682: LD_INT 5
23684: PPUSH
23685: LD_INT 6
23687: PPUSH
23688: CALL_OW 12
23692: PUSH
23693: LD_OWVAR 67
23697: PLUS
23698: PUSH
23699: FOR_TO
23700: IFFALSE 23808
// begin hc_sex = sex_male ;
23702: LD_ADDR_OWVAR 27
23706: PUSH
23707: LD_INT 1
23709: ST_TO_ADDR
// uc_side = 0 ;
23710: LD_ADDR_OWVAR 20
23714: PUSH
23715: LD_INT 0
23717: ST_TO_ADDR
// uc_nation = nation_nature ;
23718: LD_ADDR_OWVAR 21
23722: PUSH
23723: LD_INT 0
23725: ST_TO_ADDR
// hc_class = class_apeman ;
23726: LD_ADDR_OWVAR 28
23730: PUSH
23731: LD_INT 12
23733: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23734: LD_ADDR_OWVAR 31
23738: PUSH
23739: LD_INT 2
23741: PPUSH
23742: LD_INT 5
23744: PPUSH
23745: CALL_OW 12
23749: PUSH
23750: LD_INT 0
23752: PPUSH
23753: LD_INT 2
23755: PPUSH
23756: CALL_OW 12
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
// hc_agressivity = 0 ;
23773: LD_ADDR_OWVAR 35
23777: PUSH
23778: LD_INT 0
23780: ST_TO_ADDR
// un = CreateHuman ;
23781: LD_ADDR_VAR 0 3
23785: PUSH
23786: CALL_OW 44
23790: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23791: LD_VAR 0 3
23795: PPUSH
23796: LD_INT 20
23798: PPUSH
23799: LD_INT 0
23801: PPUSH
23802: CALL_OW 49
// end ;
23806: GO 23699
23808: POP
23809: POP
// end ; end_of_file
23810: LD_VAR 0 1
23814: RET
