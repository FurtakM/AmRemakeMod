// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 35
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 20
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 21
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 18
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 14
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 33
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 24
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 26
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 34
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 29
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 28
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 30
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 25
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 19217 0 0
// PrepareDifficulty ;
 173: CALL 4873 0 0
// PrepareRussian ;
 177: CALL 3986 0 0
// PrepareVehicles ;
 181: CALL 1346 0 0
// PrepareHeroes ;
 185: CALL 432 0 0
// PrepareOthers ;
 189: CALL 1607 0 0
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 35
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 429
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 30
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 330
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: CALL_OW 274
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 9999
 323: PPUSH
 324: CALL_OW 277
 328: GO 305
 330: POP
 331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 332: LD_ADDR_VAR 0 1
 336: PUSH
 337: LD_INT 22
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 30
 349: PUSH
 350: LD_INT 0
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 391
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 369: LD_VAR 0 1
 373: PPUSH
 374: CALL_OW 274
 378: PPUSH
 379: LD_INT 2
 381: PPUSH
 382: LD_INT 9999
 384: PPUSH
 385: CALL_OW 277
 389: GO 366
 391: POP
 392: POP
// if IsSelected ( rudepo ) then
 393: LD_INT 2
 395: PPUSH
 396: CALL_OW 306
 400: IFFALSE 410
// your_side = 3 ;
 402: LD_ADDR_OWVAR 2
 406: PUSH
 407: LD_INT 3
 409: ST_TO_ADDR
// if IsSelected ( JMM ) then
 410: LD_EXP 1
 414: PPUSH
 415: CALL_OW 306
 419: IFFALSE 429
// your_side = 1 ;
 421: LD_ADDR_OWVAR 2
 425: PUSH
 426: LD_INT 1
 428: ST_TO_ADDR
// end ; end_of_file
 429: PPOPN 1
 431: END
// export function PrepareHeroes ; var veh ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// uc_side = 1 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// uc_nation = 1 ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 452: LD_ADDR_EXP 1
 456: PUSH
 457: LD_STRING JMM
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: CALL 4363 0 2
 467: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 468: LD_ADDR_EXP 12
 472: PUSH
 473: LD_STRING Harisson
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL 4363 0 2
 483: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 484: LD_ADDR_EXP 10
 488: PUSH
 489: LD_STRING DeltaDoctor
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL 4363 0 2
 499: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 2
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL_OW 49
// if LoadVariable ( LisaIn06 , 0 ) = 1 then
 515: LD_STRING LisaIn06
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 30
 525: PUSH
 526: LD_INT 1
 528: EQUAL
 529: IFFALSE 633
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: LD_INT 58
 558: PUSH
 559: EMPTY
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PPUSH
 567: CALL_OW 69
 571: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 572: LD_ADDR_EXP 2
 576: PUSH
 577: LD_STRING Lisa
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: CALL 4363 0 2
 587: ST_TO_ADDR
// if veh > 0 then
 588: LD_VAR 0 2
 592: PUSH
 593: LD_INT 0
 595: GREATER
 596: IFFALSE 618
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 598: LD_EXP 2
 602: PPUSH
 603: LD_VAR 0 2
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PPUSH
 612: CALL_OW 52
// end else
 616: GO 633
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 633: LD_STRING BobbyIn06
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 30
 643: PUSH
 644: LD_INT 1
 646: EQUAL
 647: IFFALSE 751
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 58
 676: PUSH
 677: EMPTY
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PPUSH
 685: CALL_OW 69
 689: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Bobby
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4363 0 2
 705: ST_TO_ADDR
// if veh > 0 then
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 0
 713: GREATER
 714: IFFALSE 736
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 716: LD_EXP 3
 720: PPUSH
 721: LD_VAR 0 2
 725: PUSH
 726: LD_INT 1
 728: ARRAY
 729: PPUSH
 730: CALL_OW 52
// end else
 734: GO 751
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 736: LD_EXP 3
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 751: LD_STRING CyrusIn06
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 30
 761: PUSH
 762: LD_INT 1
 764: EQUAL
 765: IFFALSE 869
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: LD_INT 22
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 21
 784: PUSH
 785: LD_INT 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 58
 794: PUSH
 795: EMPTY
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Cyrus
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL 4363 0 2
 823: ST_TO_ADDR
// if veh > 0 then
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 0
 831: GREATER
 832: IFFALSE 854
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 834: LD_EXP 4
 838: PPUSH
 839: LD_VAR 0 2
 843: PUSH
 844: LD_INT 1
 846: ARRAY
 847: PPUSH
 848: CALL_OW 52
// end else
 852: GO 869
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 854: LD_EXP 4
 858: PPUSH
 859: LD_INT 2
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 869: LD_STRING FrankIn06
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: CALL_OW 30
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 987
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 885: LD_ADDR_VAR 0 2
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 58
 912: PUSH
 913: EMPTY
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Frank
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4363 0 2
 941: ST_TO_ADDR
// if veh > 0 then
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 0
 949: GREATER
 950: IFFALSE 972
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
 952: LD_EXP 5
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 52
// end else
 970: GO 987
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 972: LD_EXP 5
 976: PPUSH
 977: LD_INT 2
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
 987: LD_STRING BrownIn06
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 30
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1105
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 21
1020: PUSH
1021: LD_INT 2
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 58
1030: PUSH
1031: EMPTY
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: LD_STRING Brown
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL 4363 0 2
1059: ST_TO_ADDR
// if veh > 0 then
1060: LD_VAR 0 2
1064: PUSH
1065: LD_INT 0
1067: GREATER
1068: IFFALSE 1090
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1070: LD_EXP 6
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: PPUSH
1084: CALL_OW 52
// end else
1088: GO 1105
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1090: LD_EXP 6
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1105: LD_STRING DonaldsonIn06
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: CALL_OW 30
1115: PUSH
1116: LD_INT 1
1118: EQUAL
1119: IFFALSE 1223
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1121: LD_ADDR_VAR 0 2
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: EMPTY
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1162: LD_ADDR_EXP 7
1166: PUSH
1167: LD_STRING Donaldson
1169: PPUSH
1170: LD_INT 1
1172: PPUSH
1173: CALL 4363 0 2
1177: ST_TO_ADDR
// if veh > 0 then
1178: LD_VAR 0 2
1182: PUSH
1183: LD_INT 0
1185: GREATER
1186: IFFALSE 1208
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1188: LD_EXP 7
1192: PPUSH
1193: LD_VAR 0 2
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: CALL_OW 52
// end else
1206: GO 1223
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1208: LD_EXP 7
1212: PPUSH
1213: LD_INT 2
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1223: LD_STRING GladstoneIn06
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 30
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1341
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: LD_INT 22
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 21
1256: PUSH
1257: LD_INT 2
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 58
1266: PUSH
1267: EMPTY
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PPUSH
1275: CALL_OW 69
1279: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1280: LD_ADDR_EXP 8
1284: PUSH
1285: LD_STRING Gladstone
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: CALL 4363 0 2
1295: ST_TO_ADDR
// if veh > 0 then
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 0
1303: GREATER
1304: IFFALSE 1326
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1306: LD_EXP 8
1310: PPUSH
1311: LD_VAR 0 2
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 52
// end else
1324: GO 1341
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1326: LD_EXP 8
1330: PPUSH
1331: LD_INT 2
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 49
// end ; end ; end ;
1341: LD_VAR 0 1
1345: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
1350: PPUSH
1351: PPUSH
1352: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_STRING 06_VehiclesIn06_1
1360: PPUSH
1361: EMPTY
1362: PPUSH
1363: CALL_OW 30
1367: ST_TO_ADDR
// uc_side = 1 ;
1368: LD_ADDR_OWVAR 20
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// if vehicles > 0 then
1376: LD_VAR 0 5
1380: PUSH
1381: LD_INT 0
1383: GREATER
1384: IFFALSE 1602
// begin for i := 1 to vehicles do
1386: LD_ADDR_VAR 0 2
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 5
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1600
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1424: LD_ADDR_OWVAR 37
1428: PUSH
1429: LD_VAR 0 5
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 2
1442: ARRAY
1443: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1444: LD_ADDR_OWVAR 39
1448: PUSH
1449: LD_VAR 0 5
1453: PUSH
1454: LD_VAR 0 2
1458: ARRAY
1459: PUSH
1460: LD_INT 3
1462: ARRAY
1463: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1464: LD_ADDR_OWVAR 38
1468: PUSH
1469: LD_VAR 0 5
1473: PUSH
1474: LD_VAR 0 2
1478: ARRAY
1479: PUSH
1480: LD_INT 4
1482: ARRAY
1483: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1484: LD_ADDR_OWVAR 40
1488: PUSH
1489: LD_VAR 0 5
1493: PUSH
1494: LD_VAR 0 2
1498: ARRAY
1499: PUSH
1500: LD_INT 5
1502: ARRAY
1503: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1504: LD_ADDR_OWVAR 41
1508: PUSH
1509: LD_INT 40
1511: ST_TO_ADDR
// veh = CreateVehicle ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: CALL_OW 45
1521: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: LD_INT 0
1544: PPUSH
1545: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1549: LD_OWVAR 40
1553: PUSH
1554: LD_INT 12
1556: EQUAL
1557: IFFALSE 1598
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1559: LD_VAR 0 4
1563: PPUSH
1564: LD_VAR 0 5
1568: PUSH
1569: LD_VAR 0 2
1573: ARRAY
1574: PUSH
1575: LD_INT 6
1577: ARRAY
1578: PPUSH
1579: LD_VAR 0 5
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: PUSH
1590: LD_INT 7
1592: ARRAY
1593: PPUSH
1594: CALL_OW 291
// end ;
1598: GO 1401
1600: POP
1601: POP
// end ; end ;
1602: LD_VAR 0 1
1606: RET
// export function PrepareOthers ; var i , veh ; begin
1607: LD_INT 0
1609: PPUSH
1610: PPUSH
1611: PPUSH
// uc_side = 1 ;
1612: LD_ADDR_OWVAR 20
1616: PUSH
1617: LD_INT 1
1619: ST_TO_ADDR
// uc_nation = 1 ;
1620: LD_ADDR_OWVAR 21
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1628: LD_ADDR_EXP 11
1632: PUSH
1633: LD_STRING OthersIn06
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// for i in others do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_EXP 11
1650: PUSH
1651: FOR_IN
1652: IFFALSE 1742
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1654: LD_ADDR_VAR 0 3
1658: PUSH
1659: LD_INT 22
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 21
1671: PUSH
1672: LD_INT 2
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 58
1681: PUSH
1682: EMPTY
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PPUSH
1690: CALL_OW 69
1694: ST_TO_ADDR
// if veh > 0 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 0
1702: GREATER
1703: IFFALSE 1725
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_VAR 0 3
1714: PUSH
1715: LD_INT 1
1717: ARRAY
1718: PPUSH
1719: CALL_OW 52
// end else
1723: GO 1740
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1725: LD_VAR 0 2
1729: PPUSH
1730: LD_INT 2
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// end ; end ;
1740: GO 1651
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareDenis ; begin
1749: LD_INT 0
1751: PPUSH
// uc_side = 1 ;
1752: LD_ADDR_OWVAR 20
1756: PUSH
1757: LD_INT 1
1759: ST_TO_ADDR
// uc_nation = 1 ;
1760: LD_ADDR_OWVAR 21
1764: PUSH
1765: LD_INT 1
1767: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1768: LD_ADDR_EXP 9
1772: PUSH
1773: LD_STRING Denis
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL 4363 0 2
1783: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1784: LD_EXP 9
1788: PPUSH
1789: LD_INT 13
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1799: LD_EXP 9
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1811: LD_EXP 9
1815: PPUSH
1816: LD_INT 750
1818: PPUSH
1819: CALL_OW 234
// end ;
1823: LD_VAR 0 1
1827: RET
// export function HarrisonSupport ; var un , veh ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
// uc_side = 1 ;
1833: LD_ADDR_OWVAR 20
1837: PUSH
1838: LD_INT 1
1840: ST_TO_ADDR
// uc_nation = 1 ;
1841: LD_ADDR_OWVAR 21
1845: PUSH
1846: LD_INT 1
1848: ST_TO_ADDR
// vc_engine = 1 ;
1849: LD_ADDR_OWVAR 39
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// vc_control = 1 ;
1857: LD_ADDR_OWVAR 38
1861: PUSH
1862: LD_INT 1
1864: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1865: LD_ADDR_OWVAR 40
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 2
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: ST_TO_ADDR
// vc_chassis = 2 ;
1890: LD_ADDR_OWVAR 37
1894: PUSH
1895: LD_INT 2
1897: ST_TO_ADDR
// veh = CreateVehicle ;
1898: LD_ADDR_VAR 0 3
1902: PUSH
1903: CALL_OW 45
1907: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1908: LD_VAR 0 3
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 0
1930: PPUSH
1931: CALL_OW 49
// hc_class := 2 ;
1935: LD_ADDR_OWVAR 28
1939: PUSH
1940: LD_INT 2
1942: ST_TO_ADDR
// hc_sex := sex_male ;
1943: LD_ADDR_OWVAR 27
1947: PUSH
1948: LD_INT 1
1950: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1951: LD_ADDR_OWVAR 33
1955: PUSH
1956: LD_STRING SecondCharsGal
1958: ST_TO_ADDR
// hc_face_number := 52 ;
1959: LD_ADDR_OWVAR 34
1963: PUSH
1964: LD_INT 52
1966: ST_TO_ADDR
// hc_name := Craig Brown ;
1967: LD_ADDR_OWVAR 26
1971: PUSH
1972: LD_STRING Craig Brown
1974: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1975: LD_ADDR_OWVAR 31
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: LD_INT 1
1988: PUSH
1989: LD_INT 0
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1998: LD_ADDR_EXP 15
2002: PUSH
2003: CALL_OW 44
2007: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2008: LD_EXP 15
2012: PPUSH
2013: LD_VAR 0 3
2017: PPUSH
2018: CALL_OW 52
// vc_engine = 1 ;
2022: LD_ADDR_OWVAR 39
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// vc_control = 1 ;
2030: LD_ADDR_OWVAR 38
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2038: LD_ADDR_OWVAR 40
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_OWVAR 67
2061: ARRAY
2062: ST_TO_ADDR
// vc_chassis = 2 ;
2063: LD_ADDR_OWVAR 37
2067: PUSH
2068: LD_INT 2
2070: ST_TO_ADDR
// veh = CreateVehicle ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 45
2080: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2093: LD_VAR 0 3
2097: PPUSH
2098: LD_INT 3
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2108: LD_VAR 0 3
2112: PPUSH
2113: LD_INT 50
2115: PPUSH
2116: CALL_OW 240
// hc_class := 1 ;
2120: LD_ADDR_OWVAR 28
2124: PUSH
2125: LD_INT 1
2127: ST_TO_ADDR
// hc_sex := sex_female ;
2128: LD_ADDR_OWVAR 27
2132: PUSH
2133: LD_INT 2
2135: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2136: LD_ADDR_OWVAR 33
2140: PUSH
2141: LD_STRING SecondCharsGal
2143: ST_TO_ADDR
// hc_face_number := 45 ;
2144: LD_ADDR_OWVAR 34
2148: PUSH
2149: LD_INT 45
2151: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2152: LD_ADDR_OWVAR 26
2156: PUSH
2157: LD_STRING Ingrid Jonsson
2159: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2160: LD_ADDR_OWVAR 31
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 0
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2183: LD_ADDR_EXP 16
2187: PUSH
2188: CALL_OW 44
2192: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2193: LD_EXP 16
2197: PPUSH
2198: LD_VAR 0 3
2202: PPUSH
2203: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 45
2214: PPUSH
2215: CALL_OW 240
// end ;
2219: LD_VAR 0 1
2223: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2224: LD_INT 0
2226: PPUSH
2227: PPUSH
2228: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 21
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 26
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: LD_INT 25
2269: PUSH
2270: LD_INT 1
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 25
2279: PUSH
2280: LD_INT 2
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 25
2289: PUSH
2290: LD_INT 3
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 25
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL_OW 69
2324: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2325: LD_ADDR_VAR 0 3
2329: PUSH
2330: LD_INT 1
2332: PPUSH
2333: LD_VAR 0 2
2337: PPUSH
2338: CALL_OW 12
2342: ST_TO_ADDR
// uc_side = 4 ;
2343: LD_ADDR_OWVAR 20
2347: PUSH
2348: LD_INT 4
2350: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2351: LD_ADDR_EXP 13
2355: PUSH
2356: LD_STRING Joan
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL 4363 0 2
2366: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2367: LD_EXP 13
2371: PPUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: CALL_OW 250
2387: PPUSH
2388: LD_VAR 0 2
2392: PUSH
2393: LD_VAR 0 3
2397: ARRAY
2398: PPUSH
2399: CALL_OW 251
2403: PPUSH
2404: LD_INT 5
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2414: LD_EXP 13
2418: PPUSH
2419: LD_INT 250
2421: PPUSH
2422: CALL_OW 234
// InGameOn ;
2426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2430: LD_EXP 13
2434: PPUSH
2435: CALL_OW 87
// wait ( 0 0$2 ) ;
2439: LD_INT 70
2441: PPUSH
2442: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2446: LD_VAR 0 2
2450: PUSH
2451: LD_VAR 0 3
2455: ARRAY
2456: PPUSH
2457: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2461: LD_VAR 0 2
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: PPUSH
2472: CALL_OW 122
// wait ( 0 0$1 ) ;
2476: LD_INT 35
2478: PPUSH
2479: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2483: LD_VAR 0 2
2487: PUSH
2488: LD_VAR 0 3
2492: ARRAY
2493: PPUSH
2494: LD_EXP 13
2498: PPUSH
2499: CALL_OW 112
// wait ( 0 0$2 ) ;
2503: LD_INT 70
2505: PPUSH
2506: CALL_OW 67
// DialogueOn ;
2510: CALL_OW 6
// if tmp [ rnd ] = JMM then
2514: LD_VAR 0 2
2518: PUSH
2519: LD_VAR 0 3
2523: ARRAY
2524: PUSH
2525: LD_EXP 1
2529: EQUAL
2530: IFFALSE 2657
// begin Say ( JMM , D5b-JMM-1 ) ;
2532: LD_EXP 1
2536: PPUSH
2537: LD_STRING D5b-JMM-1
2539: PPUSH
2540: CALL_OW 88
// DialogueOff ;
2544: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2548: LD_EXP 13
2552: PPUSH
2553: LD_INT 500
2555: PPUSH
2556: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2560: LD_EXP 13
2564: PPUSH
2565: LD_EXP 1
2569: PPUSH
2570: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2574: LD_EXP 1
2578: PPUSH
2579: LD_EXP 13
2583: PPUSH
2584: CALL_OW 119
// wait ( 0 0$1 ) ;
2588: LD_INT 35
2590: PPUSH
2591: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2595: LD_EXP 13
2599: PPUSH
2600: LD_STRING D5b-Joan-1
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2607: LD_EXP 1
2611: PPUSH
2612: LD_STRING D5b-JMM-2
2614: PPUSH
2615: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2619: LD_EXP 13
2623: PPUSH
2624: LD_STRING D5b-Joan-2
2626: PPUSH
2627: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2631: LD_EXP 1
2635: PPUSH
2636: LD_STRING D5b-JMM-3
2638: PPUSH
2639: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2643: LD_EXP 13
2647: PPUSH
2648: LD_STRING D5b-Joan-3
2650: PPUSH
2651: CALL_OW 88
// end else
2655: GO 2997
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2657: LD_VAR 0 2
2661: PUSH
2662: LD_VAR 0 3
2666: ARRAY
2667: PPUSH
2668: LD_STRING D5a-Sol1-1
2670: PPUSH
2671: CALL_OW 88
// DialogueOff ;
2675: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2679: LD_EXP 13
2683: PPUSH
2684: LD_INT 500
2686: PPUSH
2687: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2691: LD_EXP 13
2695: PPUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_VAR 0 3
2705: ARRAY
2706: PPUSH
2707: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 3
2720: ARRAY
2721: PPUSH
2722: LD_EXP 13
2726: PPUSH
2727: CALL_OW 119
// wait ( 0 0$1 ) ;
2731: LD_INT 35
2733: PPUSH
2734: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2738: LD_EXP 13
2742: PPUSH
2743: LD_STRING D5a-Joan-1
2745: PPUSH
2746: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2750: LD_VAR 0 2
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PPUSH
2761: LD_STRING D5a-Sol1-2
2763: PPUSH
2764: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2768: LD_EXP 13
2772: PPUSH
2773: LD_STRING D5a-Joan-2
2775: PPUSH
2776: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2780: LD_VAR 0 2
2784: PUSH
2785: LD_VAR 0 3
2789: ARRAY
2790: PPUSH
2791: LD_STRING D5a-Sol1-3
2793: PPUSH
2794: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2798: LD_EXP 13
2802: PPUSH
2803: LD_STRING D5a-Joan-3
2805: PPUSH
2806: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2810: LD_VAR 0 2
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PPUSH
2821: LD_STRING D5a-Sol1-4
2823: PPUSH
2824: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2828: LD_EXP 1
2832: PPUSH
2833: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2837: LD_EXP 1
2841: PPUSH
2842: CALL_OW 122
// wait ( 0 0$1 ) ;
2846: LD_INT 35
2848: PPUSH
2849: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2853: LD_INT 35
2855: PPUSH
2856: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
2860: LD_EXP 13
2864: PUSH
2865: LD_VAR 0 2
2869: PUSH
2870: LD_VAR 0 3
2874: ARRAY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: LD_EXP 1
2884: PPUSH
2885: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
2889: LD_EXP 13
2893: PPUSH
2894: LD_EXP 1
2898: PPUSH
2899: CALL_OW 296
2903: PUSH
2904: LD_INT 5
2906: LESS
2907: IFFALSE 2853
// ComTurnUnit ( Joan , JMM ) ;
2909: LD_EXP 13
2913: PPUSH
2914: LD_EXP 1
2918: PPUSH
2919: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2923: LD_EXP 1
2927: PPUSH
2928: LD_EXP 13
2932: PPUSH
2933: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
2937: LD_EXP 13
2941: PPUSH
2942: LD_STRING D5a-Joan-4
2944: PPUSH
2945: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING D5a-JMM-4
2956: PPUSH
2957: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
2961: LD_EXP 13
2965: PPUSH
2966: LD_STRING D5a-Joan-5
2968: PPUSH
2969: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2973: LD_EXP 1
2977: PPUSH
2978: LD_STRING D5a-JMM-5
2980: PPUSH
2981: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2985: LD_EXP 13
2989: PPUSH
2990: LD_STRING D5a-Joan-6
2992: PPUSH
2993: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2997: LD_EXP 1
3001: PPUSH
3002: LD_STRING D6-JMM-1
3004: PPUSH
3005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3009: LD_EXP 13
3013: PPUSH
3014: LD_STRING D6-Joan-1
3016: PPUSH
3017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3021: LD_EXP 1
3025: PPUSH
3026: LD_STRING D6-JMM-2
3028: PPUSH
3029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3033: LD_EXP 13
3037: PPUSH
3038: LD_STRING D6-Joan-2
3040: PPUSH
3041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3045: LD_EXP 1
3049: PPUSH
3050: LD_STRING D6-JMM-3
3052: PPUSH
3053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3057: LD_EXP 13
3061: PPUSH
3062: LD_STRING D6-Joan-3
3064: PPUSH
3065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3069: LD_EXP 1
3073: PPUSH
3074: LD_STRING D6-JMM-4
3076: PPUSH
3077: CALL_OW 88
// DialogueOff ;
3081: CALL_OW 7
// InGameOff ;
3085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3089: LD_EXP 13
3093: PPUSH
3094: LD_INT 1
3096: PPUSH
3097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3101: LD_STRING MJ
3103: PPUSH
3104: CALL_OW 337
// JoanStatus = 1 ;
3108: LD_ADDR_EXP 14
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// end ;
3116: LD_VAR 0 1
3120: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// uc_side = 1 ;
3125: LD_ADDR_OWVAR 20
3129: PUSH
3130: LD_INT 1
3132: ST_TO_ADDR
// uc_nation = 1 ;
3133: LD_ADDR_OWVAR 21
3137: PUSH
3138: LD_INT 1
3140: ST_TO_ADDR
// if number = 1 then
3141: LD_VAR 0 1
3145: PUSH
3146: LD_INT 1
3148: EQUAL
3149: IFFALSE 3287
// begin hc_class := 1 ;
3151: LD_ADDR_OWVAR 28
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// hc_sex := sex_male ;
3159: LD_ADDR_OWVAR 27
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3167: LD_ADDR_OWVAR 33
3171: PUSH
3172: LD_STRING AmGalRemake
3174: ST_TO_ADDR
// hc_face_number := 7 ;
3175: LD_ADDR_OWVAR 34
3179: PUSH
3180: LD_INT 7
3182: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3183: LD_ADDR_OWVAR 26
3187: PUSH
3188: LD_STRING Bobby Jordan
3190: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3191: LD_ADDR_OWVAR 31
3195: PUSH
3196: LD_INT 2
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: LD_INT 1
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// un = CreateHuman ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: CALL_OW 44
3223: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 12
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: CALL_OW 49
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 87
// DialogueOn ;
3255: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3259: LD_VAR 0 3
3263: PPUSH
3264: LD_STRING D11b-Sol3-1
3266: PPUSH
3267: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3271: LD_EXP 1
3275: PPUSH
3276: LD_STRING D11b-JMM-1
3278: PPUSH
3279: CALL_OW 88
// DialogueOff ;
3283: CALL_OW 7
// end ; if number = 2 then
3287: LD_VAR 0 1
3291: PUSH
3292: LD_INT 2
3294: EQUAL
3295: IFFALSE 3433
// begin hc_class := 3 ;
3297: LD_ADDR_OWVAR 28
3301: PUSH
3302: LD_INT 3
3304: ST_TO_ADDR
// hc_sex := sex_male ;
3305: LD_ADDR_OWVAR 27
3309: PUSH
3310: LD_INT 1
3312: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3313: LD_ADDR_OWVAR 33
3317: PUSH
3318: LD_STRING SecondCharsGal
3320: ST_TO_ADDR
// hc_face_number := 55 ;
3321: LD_ADDR_OWVAR 34
3325: PUSH
3326: LD_INT 55
3328: ST_TO_ADDR
// hc_name := George McCarthy ;
3329: LD_ADDR_OWVAR 26
3333: PUSH
3334: LD_STRING George McCarthy
3336: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3337: LD_ADDR_OWVAR 31
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: LD_INT 2
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 1
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// un = CreateHuman ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: CALL_OW 44
3369: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3370: LD_VAR 0 3
3374: PPUSH
3375: LD_INT 12
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: CALL_OW 87
// wait ( 0 0$1 ) ;
3394: LD_INT 35
3396: PPUSH
3397: CALL_OW 67
// DialogueOn ;
3401: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_STRING D11d-Sol4-1
3412: PPUSH
3413: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3417: LD_EXP 1
3421: PPUSH
3422: LD_STRING D11d-JMM-1
3424: PPUSH
3425: CALL_OW 88
// DialogueOff ;
3429: CALL_OW 7
// end ; if number = 4 then
3433: LD_VAR 0 1
3437: PUSH
3438: LD_INT 4
3440: EQUAL
3441: IFFALSE 3567
// begin hc_class := 3 ;
3443: LD_ADDR_OWVAR 28
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// hc_sex := sex_female ;
3451: LD_ADDR_OWVAR 27
3455: PUSH
3456: LD_INT 2
3458: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3459: LD_ADDR_OWVAR 33
3463: PUSH
3464: LD_STRING SecondCharsGal
3466: ST_TO_ADDR
// hc_face_number := 46 ;
3467: LD_ADDR_OWVAR 34
3471: PUSH
3472: LD_INT 46
3474: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3475: LD_ADDR_OWVAR 26
3479: PUSH
3480: LD_STRING Sylvia Creak
3482: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3483: LD_ADDR_OWVAR 31
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: LD_INT 3
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: LD_INT 1
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 12
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3531: LD_VAR 0 3
3535: PPUSH
3536: CALL_OW 87
// wait ( 0 0$1 ) ;
3540: LD_INT 35
3542: PPUSH
3543: CALL_OW 67
// DialogueOn ;
3547: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_STRING D11e-FSol4-1
3558: PPUSH
3559: CALL_OW 88
// DialogueOff ;
3563: CALL_OW 7
// end ; if number = 5 then
3567: LD_VAR 0 1
3571: PUSH
3572: LD_INT 5
3574: EQUAL
3575: IFFALSE 3713
// begin hc_class := 1 ;
3577: LD_ADDR_OWVAR 28
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// hc_sex := sex_female ;
3585: LD_ADDR_OWVAR 27
3589: PUSH
3590: LD_INT 2
3592: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3593: LD_ADDR_OWVAR 33
3597: PUSH
3598: LD_STRING SecondCharsGal
3600: ST_TO_ADDR
// hc_face_number := 37 ;
3601: LD_ADDR_OWVAR 34
3605: PUSH
3606: LD_INT 37
3608: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3609: LD_ADDR_OWVAR 26
3613: PUSH
3614: LD_STRING Margherite Simpson
3616: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3617: LD_ADDR_OWVAR 31
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: LD_INT 1
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: ST_TO_ADDR
// un = CreateHuman ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: CALL_OW 44
3649: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3650: LD_VAR 0 3
3654: PPUSH
3655: LD_INT 12
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3665: LD_VAR 0 3
3669: PPUSH
3670: CALL_OW 87
// wait ( 0 0$1 ) ;
3674: LD_INT 35
3676: PPUSH
3677: CALL_OW 67
// DialogueOn ;
3681: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_STRING D11c-FSol3-1
3692: PPUSH
3693: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3697: LD_EXP 1
3701: PPUSH
3702: LD_STRING D11c-JMM-1
3704: PPUSH
3705: CALL_OW 88
// DialogueOff ;
3709: CALL_OW 7
// end ; if number = 6 then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 6
3720: EQUAL
3721: IFFALSE 3847
// begin hc_class := 1 ;
3723: LD_ADDR_OWVAR 28
3727: PUSH
3728: LD_INT 1
3730: ST_TO_ADDR
// hc_sex := sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3739: LD_ADDR_OWVAR 33
3743: PUSH
3744: LD_STRING AmGalRemake
3746: ST_TO_ADDR
// hc_face_number := 1 ;
3747: LD_ADDR_OWVAR 34
3751: PUSH
3752: LD_INT 1
3754: ST_TO_ADDR
// hc_name := Charles Brown ;
3755: LD_ADDR_OWVAR 26
3759: PUSH
3760: LD_STRING Charles Brown
3762: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3763: LD_ADDR_OWVAR 31
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 0
3776: PUSH
3777: LD_INT 1
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: ST_TO_ADDR
// un = CreateHuman ;
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: CALL_OW 44
3795: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_INT 12
3803: PPUSH
3804: LD_INT 1
3806: PPUSH
3807: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3811: LD_VAR 0 3
3815: PPUSH
3816: CALL_OW 87
// wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// DialogueOn ;
3827: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3831: LD_VAR 0 3
3835: PPUSH
3836: LD_STRING D11f-Sol5-1
3838: PPUSH
3839: CALL_OW 88
// DialogueOff ;
3843: CALL_OW 7
// end ; if number = 7 then
3847: LD_VAR 0 1
3851: PUSH
3852: LD_INT 7
3854: EQUAL
3855: IFFALSE 3981
// begin hc_class := 1 ;
3857: LD_ADDR_OWVAR 28
3861: PUSH
3862: LD_INT 1
3864: ST_TO_ADDR
// hc_sex := sex_female ;
3865: LD_ADDR_OWVAR 27
3869: PUSH
3870: LD_INT 2
3872: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3873: LD_ADDR_OWVAR 33
3877: PUSH
3878: LD_STRING AmGalRemake
3880: ST_TO_ADDR
// hc_face_number := 2 ;
3881: LD_ADDR_OWVAR 34
3885: PUSH
3886: LD_INT 2
3888: ST_TO_ADDR
// hc_name := Johanna Holland ;
3889: LD_ADDR_OWVAR 26
3893: PUSH
3894: LD_STRING Johanna Holland
3896: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3897: LD_ADDR_OWVAR 31
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 0
3907: PUSH
3908: LD_INT 0
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: ST_TO_ADDR
// un = CreateHuman ;
3920: LD_ADDR_VAR 0 3
3924: PUSH
3925: CALL_OW 44
3929: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3930: LD_VAR 0 3
3934: PPUSH
3935: LD_INT 12
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3945: LD_VAR 0 3
3949: PPUSH
3950: CALL_OW 87
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
3965: LD_VAR 0 3
3969: PPUSH
3970: LD_STRING D11a-FSol2-1
3972: PPUSH
3973: CALL_OW 88
// DialogueOff ;
3977: CALL_OW 7
// end ; end ; end_of_file
3981: LD_VAR 0 2
3985: RET
// export function PrepareRussian ; var i ; begin
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
3990: LD_INT 3
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: LD_EXP 31
4003: PPUSH
4004: LD_EXP 32
4008: PPUSH
4009: CALL_OW 12
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: LD_INT 4
4019: PPUSH
4020: CALL 4627 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4024: LD_INT 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 8
4032: PPUSH
4033: LD_EXP 31
4037: PPUSH
4038: LD_EXP 32
4042: PPUSH
4043: CALL_OW 12
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: CALL 4627 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 67
4066: PPUSH
4067: LD_EXP 31
4071: PPUSH
4072: LD_EXP 32
4076: PPUSH
4077: CALL_OW 12
4081: PPUSH
4082: LD_INT 1
4084: PPUSH
4085: LD_INT 2
4087: PPUSH
4088: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4092: LD_INT 3
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 21
4100: PPUSH
4101: LD_EXP 31
4105: PPUSH
4106: LD_EXP 32
4110: PPUSH
4111: CALL_OW 12
4115: PPUSH
4116: LD_INT 3
4118: PPUSH
4119: LD_INT 6
4121: PPUSH
4122: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4126: LD_INT 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 17
4134: PPUSH
4135: LD_EXP 31
4139: PPUSH
4140: LD_EXP 32
4144: PPUSH
4145: CALL_OW 12
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_INT 6
4155: PPUSH
4156: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4160: LD_INT 3
4162: PPUSH
4163: LD_INT 3
4165: PPUSH
4166: LD_INT 32
4168: PPUSH
4169: LD_EXP 31
4173: PPUSH
4174: LD_EXP 32
4178: PPUSH
4179: CALL_OW 12
4183: PPUSH
4184: LD_INT 4
4186: PPUSH
4187: LD_INT 2
4189: PPUSH
4190: CALL 4627 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 3
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 32
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 69
4238: PUSH
4239: FOR_IN
4240: IFFALSE 4280
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 3
4247: PPUSH
4248: LD_VAR 0 2
4252: PPUSH
4253: LD_EXP 31
4257: PPUSH
4258: LD_EXP 32
4262: PPUSH
4263: CALL_OW 12
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 1
4273: PPUSH
4274: CALL 4627 0 6
4278: GO 4239
4280: POP
4281: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4282: LD_ADDR_VAR 0 2
4286: PUSH
4287: LD_INT 22
4289: PUSH
4290: LD_INT 3
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 21
4299: PUSH
4300: LD_INT 3
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 30
4309: PUSH
4310: LD_INT 31
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4356
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4330: LD_EXP 31
4334: PPUSH
4335: LD_EXP 32
4339: PPUSH
4340: CALL_OW 12
4344: PPUSH
4345: LD_VAR 0 2
4349: PPUSH
4350: CALL 4737 0 2
4354: GO 4327
4356: POP
4357: POP
// end ; end_of_file
4358: LD_VAR 0 1
4362: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4363: LD_INT 0
4365: PPUSH
4366: PPUSH
// if exist_mode then
4367: LD_VAR 0 2
4371: IFFALSE 4390
// begin unit := CreateCharacter ( ident ) ;
4373: LD_ADDR_VAR 0 4
4377: PUSH
4378: LD_VAR 0 1
4382: PPUSH
4383: CALL_OW 34
4387: ST_TO_ADDR
// end else
4388: GO 4405
// begin unit := NewCharacter ( ident ) ;
4390: LD_ADDR_VAR 0 4
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: CALL_OW 25
4404: ST_TO_ADDR
// end ; result := unit ;
4405: LD_ADDR_VAR 0 3
4409: PUSH
4410: LD_VAR 0 4
4414: ST_TO_ADDR
// end ;
4415: LD_VAR 0 3
4419: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4420: LD_INT 0
4422: PPUSH
4423: PPUSH
4424: PPUSH
// rnd = rand ( 1 , characters ) ;
4425: LD_ADDR_VAR 0 6
4429: PUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_VAR 0 1
4437: PPUSH
4438: CALL_OW 12
4442: ST_TO_ADDR
// for i = 1 to characters do
4443: LD_ADDR_VAR 0 5
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 1
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4569
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4461: LD_VAR 0 5
4465: PUSH
4466: LD_VAR 0 6
4470: EQUAL
4471: PUSH
4472: LD_VAR 0 1
4476: PUSH
4477: LD_VAR 0 5
4481: ARRAY
4482: PPUSH
4483: CALL_OW 258
4487: PUSH
4488: LD_INT 1
4490: EQUAL
4491: AND
4492: IFFALSE 4514
// Say ( characters [ i ] , dialogMID ) ;
4494: LD_VAR 0 1
4498: PUSH
4499: LD_VAR 0 5
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 2
4509: PPUSH
4510: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4514: LD_VAR 0 5
4518: PUSH
4519: LD_VAR 0 6
4523: EQUAL
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_VAR 0 5
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 2
4543: EQUAL
4544: AND
4545: IFFALSE 4567
// Say ( characters [ i ] , dialogFID ) ;
4547: LD_VAR 0 1
4551: PUSH
4552: LD_VAR 0 5
4556: ARRAY
4557: PPUSH
4558: LD_VAR 0 3
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: GO 4458
4569: POP
4570: POP
// end ;
4571: LD_VAR 0 4
4575: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4576: LD_INT 0
4578: PPUSH
4579: PPUSH
// for i in charactersList do
4580: LD_ADDR_VAR 0 4
4584: PUSH
4585: LD_VAR 0 1
4589: PUSH
4590: FOR_IN
4591: IFFALSE 4620
// begin if IsOk ( i ) then
4593: LD_VAR 0 4
4597: PPUSH
4598: CALL_OW 302
4602: IFFALSE 4618
// SaveCharacters ( i , ident ) ;
4604: LD_VAR 0 4
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: CALL_OW 38
// end ;
4618: GO 4590
4620: POP
4621: POP
// end ;
4622: LD_VAR 0 3
4626: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4627: LD_INT 0
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// for i = 1 to count do
4633: LD_ADDR_VAR 0 8
4637: PUSH
4638: DOUBLE
4639: LD_INT 1
4641: DEC
4642: ST_TO_ADDR
4643: LD_VAR 0 6
4647: PUSH
4648: FOR_TO
4649: IFFALSE 4730
// begin uc_side = side ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_VAR 0 1
4660: ST_TO_ADDR
// uc_nation = nation ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_VAR 0 2
4670: ST_TO_ADDR
// hc_gallery =  ;
4671: LD_ADDR_OWVAR 33
4675: PUSH
4676: LD_STRING 
4678: ST_TO_ADDR
// hc_name =  ;
4679: LD_ADDR_OWVAR 26
4683: PUSH
4684: LD_STRING 
4686: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4687: LD_INT 0
4689: PPUSH
4690: LD_VAR 0 5
4694: PPUSH
4695: LD_VAR 0 4
4699: PPUSH
4700: CALL_OW 380
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 10
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4714: LD_VAR 0 10
4718: PPUSH
4719: LD_VAR 0 3
4723: PPUSH
4724: CALL_OW 52
// end ;
4728: GO 4648
4730: POP
4731: POP
// end ;
4732: LD_VAR 0 7
4736: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4737: LD_INT 0
4739: PPUSH
4740: PPUSH
4741: PPUSH
// uc_side := GetSide ( b ) ;
4742: LD_ADDR_OWVAR 20
4746: PUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 255
4756: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4757: LD_ADDR_OWVAR 21
4761: PUSH
4762: LD_VAR 0 2
4766: PPUSH
4767: CALL_OW 248
4771: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4772: LD_INT 0
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: LD_VAR 0 1
4782: PPUSH
4783: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4787: LD_ADDR_VAR 0 5
4791: PUSH
4792: LD_VAR 0 2
4796: PPUSH
4797: CALL_OW 254
4801: PUSH
4802: LD_INT 3
4804: MINUS
4805: ST_TO_ADDR
// if dir < 0 then
4806: LD_VAR 0 5
4810: PUSH
4811: LD_INT 0
4813: LESS
4814: IFFALSE 4830
// dir := 6 + dir ;
4816: LD_ADDR_VAR 0 5
4820: PUSH
4821: LD_INT 6
4823: PUSH
4824: LD_VAR 0 5
4828: PLUS
4829: ST_TO_ADDR
// un := CreateHuman ;
4830: LD_ADDR_VAR 0 4
4834: PUSH
4835: CALL_OW 44
4839: ST_TO_ADDR
// SetDir ( un , dir ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_VAR 0 5
4849: PPUSH
4850: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4854: LD_VAR 0 4
4858: PPUSH
4859: LD_VAR 0 2
4863: PPUSH
4864: CALL_OW 52
// end ;
4868: LD_VAR 0 3
4872: RET
// export function PrepareDifficulty ; begin
4873: LD_INT 0
4875: PPUSH
// if Difficulty = 1 then
4876: LD_OWVAR 67
4880: PUSH
4881: LD_INT 1
4883: EQUAL
4884: IFFALSE 4902
// begin RuSolMinLevel = 2 ;
4886: LD_ADDR_EXP 31
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_INT 5
4901: ST_TO_ADDR
// end ; if Difficulty = 2 then
4902: LD_OWVAR 67
4906: PUSH
4907: LD_INT 2
4909: EQUAL
4910: IFFALSE 4928
// begin RuSolMinLevel = 3 ;
4912: LD_ADDR_EXP 31
4916: PUSH
4917: LD_INT 3
4919: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4920: LD_ADDR_EXP 32
4924: PUSH
4925: LD_INT 5
4927: ST_TO_ADDR
// end ; if Difficulty = 3 then
4928: LD_OWVAR 67
4932: PUSH
4933: LD_INT 3
4935: EQUAL
4936: IFFALSE 4954
// begin RuSolMinLevel = 4 ;
4938: LD_ADDR_EXP 31
4942: PUSH
4943: LD_INT 4
4945: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4946: LD_ADDR_EXP 32
4950: PUSH
4951: LD_INT 5
4953: ST_TO_ADDR
// end ; end ;
4954: LD_VAR 0 1
4958: RET
// export function ShowQuery1 ; begin
4959: LD_INT 0
4961: PPUSH
// case query ( QKill ) of 1 :
4962: LD_STRING QKill
4964: PPUSH
4965: CALL_OW 97
4969: PUSH
4970: LD_INT 1
4972: DOUBLE
4973: EQUAL
4974: IFTRUE 4978
4976: GO 4989
4978: POP
// begin result = 1 ;
4979: LD_ADDR_VAR 0 1
4983: PUSH
4984: LD_INT 1
4986: ST_TO_ADDR
// end ; 2 :
4987: GO 5028
4989: LD_INT 2
4991: DOUBLE
4992: EQUAL
4993: IFTRUE 4997
4995: GO 5008
4997: POP
// begin result = 2 ;
4998: LD_ADDR_VAR 0 1
5002: PUSH
5003: LD_INT 2
5005: ST_TO_ADDR
// end ; 3 :
5006: GO 5028
5008: LD_INT 3
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5027
5016: POP
// begin result = 3 ;
5017: LD_ADDR_VAR 0 1
5021: PUSH
5022: LD_INT 3
5024: ST_TO_ADDR
// end ; end ;
5025: GO 5028
5027: POP
// end ;
5028: LD_VAR 0 1
5032: RET
// export function ShowQuery2 ; begin
5033: LD_INT 0
5035: PPUSH
// case query ( QKill2 ) of 1 :
5036: LD_STRING QKill2
5038: PPUSH
5039: CALL_OW 97
5043: PUSH
5044: LD_INT 1
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5063
5052: POP
// begin result = 1 ;
5053: LD_ADDR_VAR 0 1
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// end ; 2 :
5061: GO 5083
5063: LD_INT 2
5065: DOUBLE
5066: EQUAL
5067: IFTRUE 5071
5069: GO 5082
5071: POP
// begin result = 2 ;
5072: LD_ADDR_VAR 0 1
5076: PUSH
5077: LD_INT 2
5079: ST_TO_ADDR
// end ; end ;
5080: GO 5083
5082: POP
// end ;
5083: LD_VAR 0 1
5087: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
// for i = 1 to 72 do
5094: LD_ADDR_VAR 0 5
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 72
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5166
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5110: LD_VAR 0 5
5114: PPUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: PUSH
5129: LD_VAR 0 5
5133: PPUSH
5134: LD_VAR 0 3
5138: PPUSH
5139: CALL_OW 482
5143: PUSH
5144: LD_INT 1
5146: EQUAL
5147: AND
5148: IFFALSE 5164
// AddComResearch ( lab , i ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_VAR 0 5
5159: PPUSH
5160: CALL_OW 184
5164: GO 5107
5166: POP
5167: POP
// end ;
5168: LD_VAR 0 4
5172: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5173: LD_INT 0
5175: PPUSH
5176: PPUSH
5177: PPUSH
5178: PPUSH
5179: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5180: LD_ADDR_VAR 0 6
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_VAR 0 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: LD_INT 25
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 16
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 24
5227: PUSH
5228: LD_INT 1000
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 69
5244: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5245: LD_ADDR_VAR 0 4
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_VAR 0 1
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 21
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 24
5277: PUSH
5278: LD_INT 1000
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: PUSH
5294: EMPTY
5295: LIST
5296: PPUSH
5297: CALL_OW 69
5301: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5302: LD_VAR 0 4
5306: PUSH
5307: LD_INT 0
5309: GREATER
5310: PUSH
5311: LD_VAR 0 6
5315: PUSH
5316: LD_INT 0
5318: GREATER
5319: AND
5320: IFFALSE 5386
// begin for i in engineerOk_list do
5322: LD_ADDR_VAR 0 5
5326: PUSH
5327: LD_VAR 0 6
5331: PUSH
5332: FOR_IN
5333: IFFALSE 5384
// begin for j in buildings_list do
5335: LD_ADDR_VAR 0 7
5339: PUSH
5340: LD_VAR 0 4
5344: PUSH
5345: FOR_IN
5346: IFFALSE 5380
// begin AddComExitBuilding ( i ) ;
5348: LD_VAR 0 5
5352: PPUSH
5353: CALL_OW 182
// wait ( 0 0$1 ) ;
5357: LD_INT 35
5359: PPUSH
5360: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5364: LD_VAR 0 5
5368: PPUSH
5369: LD_VAR 0 7
5373: PPUSH
5374: CALL_OW 190
// end ;
5378: GO 5345
5380: POP
5381: POP
// end ;
5382: GO 5332
5384: POP
5385: POP
// end ; if buildings_list = 0 then
5386: LD_VAR 0 4
5390: PUSH
5391: LD_INT 0
5393: EQUAL
5394: IFFALSE 5427
// begin for i in engineerOK_list do
5396: LD_ADDR_VAR 0 5
5400: PUSH
5401: LD_VAR 0 6
5405: PUSH
5406: FOR_IN
5407: IFFALSE 5425
// begin ComEnterUnit ( i , building ) ;
5409: LD_VAR 0 5
5413: PPUSH
5414: LD_VAR 0 2
5418: PPUSH
5419: CALL_OW 120
// end ;
5423: GO 5406
5425: POP
5426: POP
// end ; end ;
5427: LD_VAR 0 3
5431: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_INT 22
5446: PUSH
5447: LD_VAR 0 1
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 25
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 69
5474: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5475: LD_ADDR_VAR 0 9
5479: PUSH
5480: LD_VAR 0 3
5484: PPUSH
5485: LD_INT 22
5487: PUSH
5488: LD_VAR 0 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 21
5499: PUSH
5500: LD_INT 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 24
5512: PUSH
5513: LD_INT 750
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: PPUSH
5529: CALL_OW 70
5533: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5534: LD_VAR 0 9
5538: PUSH
5539: LD_INT 0
5541: GREATER
5542: PUSH
5543: LD_VAR 0 6
5547: PUSH
5548: LD_INT 0
5550: GREATER
5551: AND
5552: IFFALSE 5679
// begin for i = 1 to damageUnits do
5554: LD_ADDR_VAR 0 7
5558: PUSH
5559: DOUBLE
5560: LD_INT 1
5562: DEC
5563: ST_TO_ADDR
5564: LD_VAR 0 9
5568: PUSH
5569: FOR_TO
5570: IFFALSE 5594
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5572: LD_VAR 0 9
5576: PUSH
5577: LD_VAR 0 7
5581: ARRAY
5582: PPUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 113
5592: GO 5569
5594: POP
5595: POP
// for i in sci_list do
5596: LD_ADDR_VAR 0 7
5600: PUSH
5601: LD_VAR 0 6
5605: PUSH
5606: FOR_IN
5607: IFFALSE 5675
// begin ComExitBuilding ( i ) ;
5609: LD_VAR 0 7
5613: PPUSH
5614: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5618: LD_ADDR_VAR 0 8
5622: PUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: LD_INT 22
5630: PUSH
5631: LD_VAR 0 1
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PPUSH
5640: CALL_OW 70
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5671
// begin AddComHeal ( i , j ) ;
5648: LD_VAR 0 7
5652: PPUSH
5653: LD_VAR 0 8
5657: PPUSH
5658: CALL_OW 188
// wait ( 1 1$0 ) ;
5662: LD_INT 2100
5664: PPUSH
5665: CALL_OW 67
// end ;
5669: GO 5645
5671: POP
5672: POP
// end ;
5673: GO 5606
5675: POP
5676: POP
// end else
5677: GO 5693
// begin AddComEnterUnit ( sci_list , build ) ;
5679: LD_VAR 0 6
5683: PPUSH
5684: LD_VAR 0 4
5688: PPUSH
5689: CALL_OW 180
// end ; end ;
5693: LD_VAR 0 5
5697: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5698: LD_INT 0
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5706: LD_INT 22
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 21
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PPUSH
5732: CALL_OW 69
5736: PUSH
5737: LD_VAR 0 3
5741: LESSEQUAL
5742: IFFALSE 5809
// for i = 1 to vehCount do
5744: LD_ADDR_VAR 0 10
5748: PUSH
5749: DOUBLE
5750: LD_INT 1
5752: DEC
5753: ST_TO_ADDR
5754: LD_VAR 0 3
5758: PUSH
5759: FOR_TO
5760: IFFALSE 5807
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: LD_VAR 0 7
5781: PPUSH
5782: LD_VAR 0 5
5786: PUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_VAR 0 5
5794: PPUSH
5795: CALL_OW 12
5799: ARRAY
5800: PPUSH
5801: CALL_OW 185
5805: GO 5759
5807: POP
5808: POP
// repeat wait ( 0 0$1 ) ;
5809: LD_INT 35
5811: PPUSH
5812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5816: LD_INT 22
5818: PUSH
5819: LD_VAR 0 1
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 21
5830: PUSH
5831: LD_INT 2
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 24
5840: PUSH
5841: LD_INT 250
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: PUSH
5858: LD_VAR 0 3
5862: GREATEREQUAL
5863: IFFALSE 5809
// repeat begin wait ( 0 0$1 ) ;
5865: LD_INT 35
5867: PPUSH
5868: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_INT 22
5879: PUSH
5880: LD_VAR 0 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 24
5901: PUSH
5902: LD_INT 651
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: CALL_OW 69
5918: PUSH
5919: FOR_IN
5920: IFFALSE 6096
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5922: LD_ADDR_VAR 0 13
5926: PUSH
5927: LD_INT 22
5929: PUSH
5930: LD_VAR 0 4
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: CALL_OW 69
5943: PPUSH
5944: LD_VAR 0 10
5948: PPUSH
5949: CALL_OW 74
5953: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5954: LD_ADDR_VAR 0 14
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 2
5973: PUSH
5974: LD_INT 59
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 2
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: PPUSH
6013: CALL_OW 69
6017: PPUSH
6018: LD_VAR 0 10
6022: PPUSH
6023: CALL_OW 74
6027: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6028: LD_VAR 0 10
6032: PPUSH
6033: LD_VAR 0 13
6037: PPUSH
6038: CALL_OW 296
6042: PUSH
6043: LD_INT 8
6045: PLUS
6046: PUSH
6047: LD_VAR 0 10
6051: PPUSH
6052: LD_VAR 0 14
6056: PPUSH
6057: CALL_OW 296
6061: LESS
6062: IFFALSE 6080
// begin ComAttackUnit ( i , target1 ) ;
6064: LD_VAR 0 10
6068: PPUSH
6069: LD_VAR 0 13
6073: PPUSH
6074: CALL_OW 115
// end else
6078: GO 6094
// begin ComAttackUnit ( i , target2 ) ;
6080: LD_VAR 0 10
6084: PPUSH
6085: LD_VAR 0 14
6089: PPUSH
6090: CALL_OW 115
// end ; end ;
6094: GO 5919
6096: POP
6097: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6098: LD_INT 22
6100: PUSH
6101: LD_INT 3
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 21
6110: PUSH
6111: LD_INT 2
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 34
6123: PUSH
6124: LD_INT 51
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PPUSH
6140: CALL_OW 69
6144: PUSH
6145: LD_INT 0
6147: EQUAL
6148: IFFALSE 5865
// end ;
6150: LD_VAR 0 9
6154: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
6159: PPUSH
6160: PPUSH
// enable ;
6161: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6162: LD_ADDR_VAR 0 7
6166: PUSH
6167: LD_VAR 0 3
6171: PPUSH
6172: CALL_OW 435
6176: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 34
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6215: LD_VAR 0 6
6219: PUSH
6220: LD_INT 0
6222: GREATER
6223: PUSH
6224: LD_VAR 0 3
6228: PPUSH
6229: CALL_OW 435
6233: AND
6234: PUSH
6235: LD_VAR 0 7
6239: PUSH
6240: LD_INT 0
6242: GREATER
6243: AND
6244: IFFALSE 6293
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6246: LD_VAR 0 6
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_VAR 0 7
6259: PUSH
6260: LD_INT 1
6262: ARRAY
6263: PPUSH
6264: LD_VAR 0 7
6268: PUSH
6269: LD_INT 2
6271: ARRAY
6272: PPUSH
6273: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6277: LD_VAR 0 6
6281: PUSH
6282: LD_INT 1
6284: ARRAY
6285: PPUSH
6286: LD_INT 100
6288: PPUSH
6289: CALL_OW 240
// end ; clear_crates := false ;
6293: LD_ADDR_VAR 0 5
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6301: LD_INT 35
6303: PPUSH
6304: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6308: LD_VAR 0 6
6312: PUSH
6313: LD_INT 1
6315: ARRAY
6316: PPUSH
6317: CALL_OW 315
6321: NOT
6322: PUSH
6323: LD_VAR 0 5
6327: OR
6328: IFFALSE 6301
// end ;
6330: LD_VAR 0 4
6334: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6348: LD_ADDR_VAR 0 9
6352: PUSH
6353: LD_INT 22
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 24
6377: PUSH
6378: LD_INT 660
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 3
6387: PUSH
6388: LD_INT 58
6390: PUSH
6391: EMPTY
6392: LIST
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 34
6403: PUSH
6404: LD_INT 53
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6427: LD_ADDR_VAR 0 10
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_VAR 0 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 21
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: LD_INT 24
6459: PUSH
6460: LD_INT 660
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 69
6480: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6481: LD_ADDR_VAR 0 11
6485: PUSH
6486: LD_VAR 0 2
6490: PPUSH
6491: LD_INT 22
6493: PUSH
6494: LD_VAR 0 1
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 21
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 24
6518: PUSH
6519: LD_INT 1000
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 70
6539: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6540: LD_ADDR_VAR 0 12
6544: PUSH
6545: LD_VAR 0 2
6549: PPUSH
6550: LD_INT 22
6552: PUSH
6553: LD_VAR 0 1
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 21
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 24
6574: PUSH
6575: LD_INT 1000
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 58
6584: PUSH
6585: EMPTY
6586: LIST
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 34
6593: PUSH
6594: LD_INT 53
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PPUSH
6612: CALL_OW 70
6616: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6617: LD_ADDR_VAR 0 13
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6624: LD_ADDR_VAR 0 14
6628: PUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 22
6636: PUSH
6637: LD_VAR 0 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PPUSH
6660: CALL_OW 70
6664: ST_TO_ADDR
// if damageVehicle_list > 0 then
6665: LD_VAR 0 10
6669: PUSH
6670: LD_INT 0
6672: GREATER
6673: IFFALSE 6711
// begin for i in damageVehicle_list do
6675: LD_ADDR_VAR 0 7
6679: PUSH
6680: LD_VAR 0 10
6684: PUSH
6685: FOR_IN
6686: IFFALSE 6709
// begin ComMoveXY ( i , repX , repY ) ;
6688: LD_VAR 0 7
6692: PPUSH
6693: LD_VAR 0 3
6697: PPUSH
6698: LD_VAR 0 4
6702: PPUSH
6703: CALL_OW 111
// end ;
6707: GO 6685
6709: POP
6710: POP
// end ; if vehicleNeedRepair_list > 0 then
6711: LD_VAR 0 11
6715: PUSH
6716: LD_INT 0
6718: GREATER
6719: IFFALSE 6806
// begin for i in vehicleNeedRepair_list do
6721: LD_ADDR_VAR 0 7
6725: PUSH
6726: LD_VAR 0 11
6730: PUSH
6731: FOR_IN
6732: IFFALSE 6804
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6734: LD_ADDR_VAR 0 13
6738: PUSH
6739: LD_VAR 0 13
6743: PUSH
6744: LD_VAR 0 7
6748: PPUSH
6749: CALL_OW 313
6753: ADD
6754: ST_TO_ADDR
// for j in mechanicInside_list do
6755: LD_ADDR_VAR 0 8
6759: PUSH
6760: LD_VAR 0 13
6764: PUSH
6765: FOR_IN
6766: IFFALSE 6800
// begin ComExitVehicle ( i ) ;
6768: LD_VAR 0 7
6772: PPUSH
6773: CALL_OW 121
// wait ( 0 0$1 ) ;
6777: LD_INT 35
6779: PPUSH
6780: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_VAR 0 8
6793: PPUSH
6794: CALL_OW 129
// end ;
6798: GO 6765
6800: POP
6801: POP
// end ;
6802: GO 6731
6804: POP
6805: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6806: LD_VAR 0 12
6810: PUSH
6811: LD_INT 0
6813: GREATER
6814: IFFALSE 6854
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6816: LD_VAR 0 14
6820: PUSH
6821: LD_INT 1
6823: ARRAY
6824: PPUSH
6825: LD_VAR 0 12
6829: PUSH
6830: LD_INT 1
6832: ARRAY
6833: PPUSH
6834: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6838: LD_VAR 0 12
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_INT 100
6849: PPUSH
6850: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6854: LD_VAR 0 9
6858: PUSH
6859: LD_INT 0
6861: GREATER
6862: IFFALSE 7053
// begin for i in vehicleOK_list do
6864: LD_ADDR_VAR 0 7
6868: PUSH
6869: LD_VAR 0 9
6873: PUSH
6874: FOR_IN
6875: IFFALSE 7051
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6877: LD_ADDR_VAR 0 15
6881: PUSH
6882: LD_INT 22
6884: PUSH
6885: LD_VAR 0 5
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 69
6898: PPUSH
6899: LD_VAR 0 7
6903: PPUSH
6904: CALL_OW 74
6908: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6909: LD_ADDR_VAR 0 16
6913: PUSH
6914: LD_INT 22
6916: PUSH
6917: LD_VAR 0 5
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 59
6931: PUSH
6932: EMPTY
6933: LIST
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: PPUSH
6973: LD_VAR 0 7
6977: PPUSH
6978: CALL_OW 74
6982: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6983: LD_VAR 0 7
6987: PPUSH
6988: LD_VAR 0 15
6992: PPUSH
6993: CALL_OW 296
6997: PUSH
6998: LD_INT 8
7000: PLUS
7001: PUSH
7002: LD_VAR 0 7
7006: PPUSH
7007: LD_VAR 0 16
7011: PPUSH
7012: CALL_OW 296
7016: LESS
7017: IFFALSE 7035
// begin ComAttackUnit ( i , target1 ) ;
7019: LD_VAR 0 7
7023: PPUSH
7024: LD_VAR 0 15
7028: PPUSH
7029: CALL_OW 115
// end else
7033: GO 7049
// begin ComAttackUnit ( i , target2 ) ;
7035: LD_VAR 0 7
7039: PPUSH
7040: LD_VAR 0 16
7044: PPUSH
7045: CALL_OW 115
// end ; end ;
7049: GO 6874
7051: POP
7052: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7053: LD_ADDR_VAR 0 7
7057: PUSH
7058: LD_VAR 0 2
7062: PPUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 1
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 3
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 70
7093: NOT
7094: PUSH
7095: FOR_IN
7096: IFFALSE 7119
// ComMoveXY ( i , repX , repY ) ;
7098: LD_VAR 0 7
7102: PPUSH
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_VAR 0 4
7112: PPUSH
7113: CALL_OW 111
7117: GO 7095
7119: POP
7120: POP
// end ;
7121: LD_VAR 0 6
7125: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7130: LD_INT 22
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PPUSH
7156: CALL_OW 69
7160: PUSH
7161: LD_INT 0
7163: GREATER
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: LD_INT 1000
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: PUSH
7214: LD_INT 0
7216: EQUAL
7217: AND
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: LD_INT 0
7226: GREATER
7227: AND
7228: IFFALSE 7327
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: LD_INT 22
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PUSH
7266: FOR_IN
7267: IFFALSE 7325
// begin AddComExitBuilding ( i ) ;
7269: LD_VAR 0 4
7273: PPUSH
7274: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7278: LD_VAR 0 4
7282: PPUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 1
7290: ARRAY
7291: PPUSH
7292: LD_VAR 0 2
7296: PUSH
7297: LD_INT 2
7299: ARRAY
7300: PPUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 3
7308: ARRAY
7309: PPUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 4
7317: ARRAY
7318: PPUSH
7319: CALL_OW 205
// end ;
7323: GO 7266
7325: POP
7326: POP
// end ; end ;
7327: LD_VAR 0 3
7331: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7341: LD_ADDR_VAR 0 7
7345: PUSH
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 25
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 56
7370: PUSH
7371: EMPTY
7372: LIST
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: LD_INT 700
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7395: LD_ADDR_VAR 0 8
7399: PUSH
7400: LD_INT 22
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 30
7414: PUSH
7415: LD_INT 32
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 58
7424: PUSH
7425: EMPTY
7426: LIST
7427: PUSH
7428: LD_INT 24
7430: PUSH
7431: LD_INT 251
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 69
7448: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7449: LD_ADDR_VAR 0 10
7453: PUSH
7454: LD_INT 22
7456: PUSH
7457: LD_VAR 0 1
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 8
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 9
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PPUSH
7509: CALL_OW 69
7513: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 313
7528: PUSH
7529: LD_VAR 0 10
7533: DIFF
7534: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7535: LD_VAR 0 8
7539: PUSH
7540: LD_INT 0
7542: EQUAL
7543: PUSH
7544: LD_VAR 0 9
7548: PUSH
7549: LD_INT 0
7551: EQUAL
7552: AND
7553: IFFALSE 7599
// begin for i in soldiers_list do
7555: LD_ADDR_VAR 0 5
7559: PUSH
7560: LD_VAR 0 7
7564: PUSH
7565: FOR_IN
7566: IFFALSE 7595
// begin if IsOK ( build ) then
7568: LD_VAR 0 2
7572: PPUSH
7573: CALL_OW 302
7577: IFFALSE 7593
// ComEnterUnit ( i , build ) ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL_OW 120
// end ;
7593: GO 7565
7595: POP
7596: POP
// end else
7597: GO 7684
// begin for i = 1 to turretList do
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: DOUBLE
7605: LD_INT 1
7607: DEC
7608: ST_TO_ADDR
7609: LD_VAR 0 8
7613: PUSH
7614: FOR_TO
7615: IFFALSE 7682
// begin for j = 1 to temp do
7617: LD_ADDR_VAR 0 6
7621: PUSH
7622: DOUBLE
7623: LD_INT 1
7625: DEC
7626: ST_TO_ADDR
7627: LD_VAR 0 9
7631: PUSH
7632: FOR_TO
7633: IFFALSE 7678
// begin ComExitBuilding ( temp [ j ] ) ;
7635: LD_VAR 0 9
7639: PUSH
7640: LD_VAR 0 6
7644: ARRAY
7645: PPUSH
7646: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7650: LD_VAR 0 9
7654: PUSH
7655: LD_VAR 0 6
7659: ARRAY
7660: PPUSH
7661: LD_VAR 0 8
7665: PUSH
7666: LD_VAR 0 5
7670: ARRAY
7671: PPUSH
7672: CALL_OW 180
// end ;
7676: GO 7632
7678: POP
7679: POP
// end ;
7680: GO 7614
7682: POP
7683: POP
// end ; end ;
7684: LD_VAR 0 4
7688: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7696: LD_ADDR_VAR 0 6
7700: PUSH
7701: LD_INT 22
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 2
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_INT 31
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 30
7728: PUSH
7729: LD_INT 32
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 30
7738: PUSH
7739: LD_INT 33
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 30
7748: PUSH
7749: LD_INT 4
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 30
7758: PUSH
7759: LD_INT 5
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7783: LD_ADDR_VAR 0 7
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 58
7812: PUSH
7813: EMPTY
7814: LIST
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 0
7833: GREATER
7834: PUSH
7835: LD_VAR 0 7
7839: PUSH
7840: LD_INT 0
7842: GREATER
7843: AND
7844: IFFALSE 7914
// begin for i in turretsList do
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_VAR 0 6
7855: PUSH
7856: FOR_IN
7857: IFFALSE 7912
// begin for j in enemyBuildings do
7859: LD_ADDR_VAR 0 5
7863: PUSH
7864: LD_VAR 0 7
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7908
// begin if GetDistUnits ( i , j ) < 20 then
7872: LD_VAR 0 4
7876: PPUSH
7877: LD_VAR 0 5
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 20
7889: LESS
7890: IFFALSE 7906
// begin ComAttackUnit ( i , j ) ;
7892: LD_VAR 0 4
7896: PPUSH
7897: LD_VAR 0 5
7901: PPUSH
7902: CALL_OW 115
// end ; end ;
7906: GO 7869
7908: POP
7909: POP
// end ;
7910: GO 7856
7912: POP
7913: POP
// end ; end ;
7914: LD_VAR 0 3
7918: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7919: LD_INT 0
7921: PPUSH
7922: PPUSH
7923: PPUSH
7924: PPUSH
7925: PPUSH
7926: PPUSH
7927: PPUSH
7928: PPUSH
7929: PPUSH
7930: PPUSH
7931: PPUSH
// for i = 1 to medicCount do
7932: LD_ADDR_VAR 0 14
7936: PUSH
7937: DOUBLE
7938: LD_INT 1
7940: DEC
7941: ST_TO_ADDR
7942: LD_VAR 0 7
7946: PUSH
7947: FOR_TO
7948: IFFALSE 8030
// begin uc_side = side ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_VAR 0 1
7959: ST_TO_ADDR
// uc_nation = nation ;
7960: LD_ADDR_OWVAR 21
7964: PUSH
7965: LD_VAR 0 2
7969: ST_TO_ADDR
// hc_name =  ;
7970: LD_ADDR_OWVAR 26
7974: PUSH
7975: LD_STRING 
7977: ST_TO_ADDR
// hc_gallery =  ;
7978: LD_ADDR_OWVAR 33
7982: PUSH
7983: LD_STRING 
7985: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7986: LD_INT 0
7988: PPUSH
7989: LD_INT 4
7991: PPUSH
7992: LD_VAR 0 8
7996: PPUSH
7997: CALL_OW 380
// un = CreateHuman ;
8001: LD_ADDR_VAR 0 16
8005: PUSH
8006: CALL_OW 44
8010: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8011: LD_VAR 0 16
8015: PPUSH
8016: LD_VAR 0 9
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 49
// end ;
8028: GO 7947
8030: POP
8031: POP
// for i = 1 to soldierCount do
8032: LD_ADDR_VAR 0 14
8036: PUSH
8037: DOUBLE
8038: LD_INT 1
8040: DEC
8041: ST_TO_ADDR
8042: LD_VAR 0 3
8046: PUSH
8047: FOR_TO
8048: IFFALSE 8130
// begin uc_side = side ;
8050: LD_ADDR_OWVAR 20
8054: PUSH
8055: LD_VAR 0 1
8059: ST_TO_ADDR
// uc_nation = nation ;
8060: LD_ADDR_OWVAR 21
8064: PUSH
8065: LD_VAR 0 2
8069: ST_TO_ADDR
// hc_name =  ;
8070: LD_ADDR_OWVAR 26
8074: PUSH
8075: LD_STRING 
8077: ST_TO_ADDR
// hc_gallery =  ;
8078: LD_ADDR_OWVAR 33
8082: PUSH
8083: LD_STRING 
8085: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8086: LD_INT 0
8088: PPUSH
8089: LD_INT 1
8091: PPUSH
8092: LD_VAR 0 8
8096: PPUSH
8097: CALL_OW 380
// un = CreateHuman ;
8101: LD_ADDR_VAR 0 16
8105: PUSH
8106: CALL_OW 44
8110: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8111: LD_VAR 0 16
8115: PPUSH
8116: LD_VAR 0 9
8120: PPUSH
8121: LD_INT 0
8123: PPUSH
8124: CALL_OW 49
// end ;
8128: GO 8047
8130: POP
8131: POP
// for i = 1 to sniperCount do
8132: LD_ADDR_VAR 0 14
8136: PUSH
8137: DOUBLE
8138: LD_INT 1
8140: DEC
8141: ST_TO_ADDR
8142: LD_VAR 0 4
8146: PUSH
8147: FOR_TO
8148: IFFALSE 8230
// begin uc_side = side ;
8150: LD_ADDR_OWVAR 20
8154: PUSH
8155: LD_VAR 0 1
8159: ST_TO_ADDR
// uc_nation = nation ;
8160: LD_ADDR_OWVAR 21
8164: PUSH
8165: LD_VAR 0 2
8169: ST_TO_ADDR
// hc_name =  ;
8170: LD_ADDR_OWVAR 26
8174: PUSH
8175: LD_STRING 
8177: ST_TO_ADDR
// hc_gallery =  ;
8178: LD_ADDR_OWVAR 33
8182: PUSH
8183: LD_STRING 
8185: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8186: LD_INT 0
8188: PPUSH
8189: LD_INT 5
8191: PPUSH
8192: LD_VAR 0 8
8196: PPUSH
8197: CALL_OW 380
// un = CreateHuman ;
8201: LD_ADDR_VAR 0 16
8205: PUSH
8206: CALL_OW 44
8210: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8211: LD_VAR 0 16
8215: PPUSH
8216: LD_VAR 0 9
8220: PPUSH
8221: LD_INT 0
8223: PPUSH
8224: CALL_OW 49
// end ;
8228: GO 8147
8230: POP
8231: POP
// for i = 1 to bazookCount do
8232: LD_ADDR_VAR 0 14
8236: PUSH
8237: DOUBLE
8238: LD_INT 1
8240: DEC
8241: ST_TO_ADDR
8242: LD_VAR 0 5
8246: PUSH
8247: FOR_TO
8248: IFFALSE 8330
// begin uc_side = side ;
8250: LD_ADDR_OWVAR 20
8254: PUSH
8255: LD_VAR 0 1
8259: ST_TO_ADDR
// uc_nation = nation ;
8260: LD_ADDR_OWVAR 21
8264: PUSH
8265: LD_VAR 0 2
8269: ST_TO_ADDR
// hc_name =  ;
8270: LD_ADDR_OWVAR 26
8274: PUSH
8275: LD_STRING 
8277: ST_TO_ADDR
// hc_gallery =  ;
8278: LD_ADDR_OWVAR 33
8282: PUSH
8283: LD_STRING 
8285: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8286: LD_INT 0
8288: PPUSH
8289: LD_INT 9
8291: PPUSH
8292: LD_VAR 0 8
8296: PPUSH
8297: CALL_OW 380
// un = CreateHuman ;
8301: LD_ADDR_VAR 0 16
8305: PUSH
8306: CALL_OW 44
8310: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8311: LD_VAR 0 16
8315: PPUSH
8316: LD_VAR 0 9
8320: PPUSH
8321: LD_INT 0
8323: PPUSH
8324: CALL_OW 49
// end ;
8328: GO 8247
8330: POP
8331: POP
// for i = 1 to mortalCount do
8332: LD_ADDR_VAR 0 14
8336: PUSH
8337: DOUBLE
8338: LD_INT 1
8340: DEC
8341: ST_TO_ADDR
8342: LD_VAR 0 6
8346: PUSH
8347: FOR_TO
8348: IFFALSE 8430
// begin uc_side = side ;
8350: LD_ADDR_OWVAR 20
8354: PUSH
8355: LD_VAR 0 1
8359: ST_TO_ADDR
// uc_nation = nation ;
8360: LD_ADDR_OWVAR 21
8364: PUSH
8365: LD_VAR 0 2
8369: ST_TO_ADDR
// hc_name =  ;
8370: LD_ADDR_OWVAR 26
8374: PUSH
8375: LD_STRING 
8377: ST_TO_ADDR
// hc_gallery =  ;
8378: LD_ADDR_OWVAR 33
8382: PUSH
8383: LD_STRING 
8385: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8386: LD_INT 0
8388: PPUSH
8389: LD_INT 8
8391: PPUSH
8392: LD_VAR 0 8
8396: PPUSH
8397: CALL_OW 380
// un = CreateHuman ;
8401: LD_ADDR_VAR 0 16
8405: PUSH
8406: CALL_OW 44
8410: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8411: LD_VAR 0 16
8415: PPUSH
8416: LD_VAR 0 9
8420: PPUSH
8421: LD_INT 0
8423: PPUSH
8424: CALL_OW 49
// end ;
8428: GO 8347
8430: POP
8431: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8432: LD_ADDR_VAR 0 19
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_VAR 0 1
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: LD_INT 25
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 25
8464: PUSH
8465: LD_INT 5
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 25
8474: PUSH
8475: LD_INT 8
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 25
8484: PUSH
8485: LD_INT 9
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PPUSH
8503: CALL_OW 69
8507: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8508: LD_ADDR_VAR 0 18
8512: PUSH
8513: LD_INT 22
8515: PUSH
8516: LD_VAR 0 1
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 25
8527: PUSH
8528: LD_INT 4
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PPUSH
8539: CALL_OW 69
8543: ST_TO_ADDR
// for i in medic_list do
8544: LD_ADDR_VAR 0 14
8548: PUSH
8549: LD_VAR 0 18
8553: PUSH
8554: FOR_IN
8555: IFFALSE 8573
// ComMoveToArea ( i , healArea ) ;
8557: LD_VAR 0 14
8561: PPUSH
8562: LD_VAR 0 10
8566: PPUSH
8567: CALL_OW 113
8571: GO 8554
8573: POP
8574: POP
// if strategy = 1 then
8575: LD_VAR 0 12
8579: PUSH
8580: LD_INT 1
8582: EQUAL
8583: IFFALSE 9288
// begin repeat wait ( 0 0$3 ) ;
8585: LD_INT 105
8587: PPUSH
8588: CALL_OW 67
// for i in soldiersOK_list do
8592: LD_ADDR_VAR 0 14
8596: PUSH
8597: LD_VAR 0 19
8601: PUSH
8602: FOR_IN
8603: IFFALSE 8637
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8605: LD_VAR 0 14
8609: PPUSH
8610: LD_INT 80
8612: PPUSH
8613: LD_INT 109
8615: PPUSH
8616: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8620: LD_VAR 0 14
8624: PPUSH
8625: LD_INT 39
8627: PPUSH
8628: LD_INT 49
8630: PPUSH
8631: CALL_OW 174
// end ;
8635: GO 8602
8637: POP
8638: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8639: LD_INT 15
8641: PPUSH
8642: LD_INT 22
8644: PUSH
8645: LD_VAR 0 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PPUSH
8654: CALL_OW 70
8658: PUSH
8659: LD_INT 0
8661: GREATER
8662: IFFALSE 8585
// repeat wait ( 0 0$1 ) ;
8664: LD_INT 35
8666: PPUSH
8667: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8671: LD_ADDR_VAR 0 17
8675: PUSH
8676: LD_INT 22
8678: PUSH
8679: LD_VAR 0 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 1
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: LD_INT 24
8696: PUSH
8697: LD_INT 550
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 24
8710: PUSH
8711: LD_INT 250
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: LIST
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PPUSH
8727: CALL_OW 69
8731: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8732: LD_ADDR_VAR 0 19
8736: PUSH
8737: LD_INT 22
8739: PUSH
8740: LD_VAR 0 1
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: LD_INT 25
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 25
8764: PUSH
8765: LD_INT 5
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 25
8774: PUSH
8775: LD_INT 8
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 9
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 24
8801: PUSH
8802: LD_INT 1000
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: ST_TO_ADDR
// if medicCount > 0 then
8819: LD_VAR 0 7
8823: PUSH
8824: LD_INT 0
8826: GREATER
8827: IFFALSE 8901
// begin if damageUnit_list > 0 then
8829: LD_VAR 0 17
8833: PUSH
8834: LD_INT 0
8836: GREATER
8837: IFFALSE 8901
// begin for i in damageUnit_list do
8839: LD_ADDR_VAR 0 14
8843: PUSH
8844: LD_VAR 0 17
8848: PUSH
8849: FOR_IN
8850: IFFALSE 8899
// begin ComMoveToArea ( i , healArea ) ;
8852: LD_VAR 0 14
8856: PPUSH
8857: LD_VAR 0 10
8861: PPUSH
8862: CALL_OW 113
// for j in medic_list do
8866: LD_ADDR_VAR 0 15
8870: PUSH
8871: LD_VAR 0 18
8875: PUSH
8876: FOR_IN
8877: IFFALSE 8895
// AddComHeal ( j , i ) ;
8879: LD_VAR 0 15
8883: PPUSH
8884: LD_VAR 0 14
8888: PPUSH
8889: CALL_OW 188
8893: GO 8876
8895: POP
8896: POP
// end ;
8897: GO 8849
8899: POP
8900: POP
// end ; end ; for i in soldiersOK_list do
8901: LD_ADDR_VAR 0 14
8905: PUSH
8906: LD_VAR 0 19
8910: PUSH
8911: FOR_IN
8912: IFFALSE 9088
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8914: LD_ADDR_VAR 0 22
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_VAR 0 11
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 69
8935: PPUSH
8936: LD_VAR 0 14
8940: PPUSH
8941: CALL_OW 74
8945: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8946: LD_ADDR_VAR 0 23
8950: PUSH
8951: LD_INT 22
8953: PUSH
8954: LD_VAR 0 11
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: LD_INT 59
8968: PUSH
8969: EMPTY
8970: LIST
8971: PUSH
8972: LD_INT 21
8974: PUSH
8975: LD_INT 1
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: LD_INT 21
8984: PUSH
8985: LD_INT 2
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: EMPTY
9003: LIST
9004: PPUSH
9005: CALL_OW 69
9009: PPUSH
9010: LD_VAR 0 14
9014: PPUSH
9015: CALL_OW 74
9019: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9020: LD_VAR 0 14
9024: PPUSH
9025: LD_VAR 0 22
9029: PPUSH
9030: CALL_OW 296
9034: PUSH
9035: LD_INT 8
9037: PLUS
9038: PUSH
9039: LD_VAR 0 14
9043: PPUSH
9044: LD_VAR 0 23
9048: PPUSH
9049: CALL_OW 296
9053: LESS
9054: IFFALSE 9072
// begin ComAttackUnit ( i , target1 ) ;
9056: LD_VAR 0 14
9060: PPUSH
9061: LD_VAR 0 22
9065: PPUSH
9066: CALL_OW 115
// end else
9070: GO 9086
// begin ComAttackUnit ( i , target2 ) ;
9072: LD_VAR 0 14
9076: PPUSH
9077: LD_VAR 0 23
9081: PPUSH
9082: CALL_OW 115
// end ; end ;
9086: GO 8911
9088: POP
9089: POP
// for i in soldiersOK_list do
9090: LD_ADDR_VAR 0 14
9094: PUSH
9095: LD_VAR 0 19
9099: PUSH
9100: FOR_IN
9101: IFFALSE 9277
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9103: LD_ADDR_VAR 0 22
9107: PUSH
9108: LD_INT 22
9110: PUSH
9111: LD_VAR 0 11
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 69
9124: PPUSH
9125: LD_VAR 0 14
9129: PPUSH
9130: CALL_OW 74
9134: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9135: LD_ADDR_VAR 0 23
9139: PUSH
9140: LD_INT 22
9142: PUSH
9143: LD_VAR 0 11
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: LD_INT 59
9157: PUSH
9158: EMPTY
9159: LIST
9160: PUSH
9161: LD_INT 21
9163: PUSH
9164: LD_INT 1
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 21
9173: PUSH
9174: LD_INT 2
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: PPUSH
9194: CALL_OW 69
9198: PPUSH
9199: LD_VAR 0 14
9203: PPUSH
9204: CALL_OW 74
9208: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9209: LD_VAR 0 14
9213: PPUSH
9214: LD_VAR 0 22
9218: PPUSH
9219: CALL_OW 296
9223: PUSH
9224: LD_INT 8
9226: PLUS
9227: PUSH
9228: LD_VAR 0 14
9232: PPUSH
9233: LD_VAR 0 23
9237: PPUSH
9238: CALL_OW 296
9242: LESS
9243: IFFALSE 9261
// begin ComAttackUnit ( i , target1 ) ;
9245: LD_VAR 0 14
9249: PPUSH
9250: LD_VAR 0 22
9254: PPUSH
9255: CALL_OW 115
// end else
9259: GO 9275
// begin ComAttackUnit ( i , target2 ) ;
9261: LD_VAR 0 14
9265: PPUSH
9266: LD_VAR 0 23
9270: PPUSH
9271: CALL_OW 115
// end ; end ;
9275: GO 9100
9277: POP
9278: POP
// until soldiersOK_list = [ ] ;
9279: LD_VAR 0 19
9283: PUSH
9284: EMPTY
9285: EQUAL
9286: IFFALSE 8664
// end ; if strategy = 2 then
9288: LD_VAR 0 12
9292: PUSH
9293: LD_INT 2
9295: EQUAL
9296: IFFALSE 10001
// begin repeat wait ( 0 0$1 ) ;
9298: LD_INT 35
9300: PPUSH
9301: CALL_OW 67
// for i in soldiersOK_list do
9305: LD_ADDR_VAR 0 14
9309: PUSH
9310: LD_VAR 0 19
9314: PUSH
9315: FOR_IN
9316: IFFALSE 9350
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9318: LD_VAR 0 14
9322: PPUSH
9323: LD_INT 117
9325: PPUSH
9326: LD_INT 97
9328: PPUSH
9329: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9333: LD_VAR 0 14
9337: PPUSH
9338: LD_INT 94
9340: PPUSH
9341: LD_INT 50
9343: PPUSH
9344: CALL_OW 174
// end ;
9348: GO 9315
9350: POP
9351: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9352: LD_INT 16
9354: PPUSH
9355: LD_INT 22
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 70
9371: PUSH
9372: LD_INT 0
9374: GREATER
9375: IFFALSE 9298
// repeat wait ( 0 0$3 ) ;
9377: LD_INT 105
9379: PPUSH
9380: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9384: LD_ADDR_VAR 0 17
9388: PUSH
9389: LD_INT 22
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: LD_INT 3
9406: PUSH
9407: LD_INT 24
9409: PUSH
9410: LD_INT 550
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 24
9423: PUSH
9424: LD_INT 250
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PPUSH
9440: CALL_OW 69
9444: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9445: LD_ADDR_VAR 0 19
9449: PUSH
9450: LD_INT 22
9452: PUSH
9453: LD_VAR 0 1
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 1
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 25
9477: PUSH
9478: LD_INT 5
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 25
9487: PUSH
9488: LD_INT 8
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 25
9497: PUSH
9498: LD_INT 9
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 24
9514: PUSH
9515: LD_INT 1000
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: ST_TO_ADDR
// if medicCount > 0 then
9532: LD_VAR 0 7
9536: PUSH
9537: LD_INT 0
9539: GREATER
9540: IFFALSE 9614
// begin if damageUnit_list > 0 then
9542: LD_VAR 0 17
9546: PUSH
9547: LD_INT 0
9549: GREATER
9550: IFFALSE 9614
// begin for i in damageUnit_list do
9552: LD_ADDR_VAR 0 14
9556: PUSH
9557: LD_VAR 0 17
9561: PUSH
9562: FOR_IN
9563: IFFALSE 9612
// begin ComMoveToArea ( i , healArea ) ;
9565: LD_VAR 0 14
9569: PPUSH
9570: LD_VAR 0 10
9574: PPUSH
9575: CALL_OW 113
// for j in medic_list do
9579: LD_ADDR_VAR 0 15
9583: PUSH
9584: LD_VAR 0 18
9588: PUSH
9589: FOR_IN
9590: IFFALSE 9608
// AddComHeal ( j , i ) ;
9592: LD_VAR 0 15
9596: PPUSH
9597: LD_VAR 0 14
9601: PPUSH
9602: CALL_OW 188
9606: GO 9589
9608: POP
9609: POP
// end ;
9610: GO 9562
9612: POP
9613: POP
// end ; end ; for i in soldiersOK_list do
9614: LD_ADDR_VAR 0 14
9618: PUSH
9619: LD_VAR 0 19
9623: PUSH
9624: FOR_IN
9625: IFFALSE 9801
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9627: LD_ADDR_VAR 0 22
9631: PUSH
9632: LD_INT 22
9634: PUSH
9635: LD_VAR 0 11
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 69
9648: PPUSH
9649: LD_VAR 0 14
9653: PPUSH
9654: CALL_OW 74
9658: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9659: LD_ADDR_VAR 0 23
9663: PUSH
9664: LD_INT 22
9666: PUSH
9667: LD_VAR 0 11
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 59
9681: PUSH
9682: EMPTY
9683: LIST
9684: PUSH
9685: LD_INT 21
9687: PUSH
9688: LD_INT 1
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: LD_INT 21
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: PPUSH
9718: CALL_OW 69
9722: PPUSH
9723: LD_VAR 0 14
9727: PPUSH
9728: CALL_OW 74
9732: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9733: LD_VAR 0 14
9737: PPUSH
9738: LD_VAR 0 22
9742: PPUSH
9743: CALL_OW 296
9747: PUSH
9748: LD_INT 8
9750: PLUS
9751: PUSH
9752: LD_VAR 0 14
9756: PPUSH
9757: LD_VAR 0 23
9761: PPUSH
9762: CALL_OW 296
9766: LESS
9767: IFFALSE 9785
// begin ComAttackUnit ( i , target1 ) ;
9769: LD_VAR 0 14
9773: PPUSH
9774: LD_VAR 0 22
9778: PPUSH
9779: CALL_OW 115
// end else
9783: GO 9799
// begin ComAttackUnit ( i , target2 ) ;
9785: LD_VAR 0 14
9789: PPUSH
9790: LD_VAR 0 23
9794: PPUSH
9795: CALL_OW 115
// end ; end ;
9799: GO 9624
9801: POP
9802: POP
// for i in soldiersOK_list do
9803: LD_ADDR_VAR 0 14
9807: PUSH
9808: LD_VAR 0 19
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9990
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9816: LD_ADDR_VAR 0 22
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_VAR 0 11
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 69
9837: PPUSH
9838: LD_VAR 0 14
9842: PPUSH
9843: CALL_OW 74
9847: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9848: LD_ADDR_VAR 0 23
9852: PUSH
9853: LD_INT 22
9855: PUSH
9856: LD_VAR 0 11
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 59
9870: PUSH
9871: EMPTY
9872: LIST
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 1
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 21
9886: PUSH
9887: LD_INT 2
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: PPUSH
9907: CALL_OW 69
9911: PPUSH
9912: LD_VAR 0 14
9916: PPUSH
9917: CALL_OW 74
9921: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9922: LD_VAR 0 14
9926: PPUSH
9927: LD_VAR 0 22
9931: PPUSH
9932: CALL_OW 296
9936: PUSH
9937: LD_INT 8
9939: PLUS
9940: PUSH
9941: LD_VAR 0 14
9945: PPUSH
9946: LD_VAR 0 23
9950: PPUSH
9951: CALL_OW 296
9955: LESS
9956: IFFALSE 9974
// begin ComAttackUnit ( i , target1 ) ;
9958: LD_VAR 0 14
9962: PPUSH
9963: LD_VAR 0 22
9967: PPUSH
9968: CALL_OW 115
// end else
9972: GO 9988
// begin ComAttackUnit ( i , target2 ) ;
9974: LD_VAR 0 14
9978: PPUSH
9979: LD_VAR 0 23
9983: PPUSH
9984: CALL_OW 115
// end ; end ;
9988: GO 9813
9990: POP
9991: POP
// until soldiersOK_list = [ ] ;
9992: LD_VAR 0 19
9996: PUSH
9997: EMPTY
9998: EQUAL
9999: IFFALSE 9377
// end ; end ; end_of_file
10001: LD_VAR 0 13
10005: RET
// every 0 0$01 do
10006: GO 10008
10008: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10009: LD_INT 22
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 2
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: PUSH
10038: LD_INT 0
10040: EQUAL
10041: IFFALSE 10055
// SetClass ( JMM , 2 ) ;
10043: LD_EXP 1
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10055: LD_STRING M1
10057: PPUSH
10058: CALL_OW 337
// case difficulty of 1 :
10062: LD_OWVAR 67
10066: PUSH
10067: LD_INT 1
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10085
10075: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10076: LD_STRING M1-1
10078: PPUSH
10079: CALL_OW 337
10083: GO 10122
10085: LD_INT 2
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10103
10093: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10094: LD_STRING M1-2
10096: PPUSH
10097: CALL_OW 337
10101: GO 10122
10103: LD_INT 3
10105: DOUBLE
10106: EQUAL
10107: IFTRUE 10111
10109: GO 10121
10111: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10112: LD_STRING M1-3
10114: PPUSH
10115: CALL_OW 337
10119: GO 10122
10121: POP
// ChangeMissionObjectives ( M1cont ) ;
10122: LD_STRING M1cont
10124: PPUSH
10125: CALL_OW 337
// end ;
10129: END
// every 0 0$1 do
10130: GO 10132
10132: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10133: LD_INT 350
10135: PPUSH
10136: LD_INT 875
10138: PPUSH
10139: CALL_OW 12
10143: PPUSH
10144: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10148: LD_INT 5
10150: PPUSH
10151: LD_INT 4
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 55
// wait ( 0 0$15 ) ;
10161: LD_INT 525
10163: PPUSH
10164: CALL_OW 67
// if IsOk ( Lisa ) then
10168: LD_EXP 2
10172: PPUSH
10173: CALL_OW 302
10177: IFFALSE 10193
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10179: LD_EXP 2
10183: PPUSH
10184: LD_STRING DR0-Lisa-1
10186: PPUSH
10187: CALL_OW 88
// end else
10191: GO 10451
// begin if IsOK ( Cyrus ) then
10193: LD_EXP 4
10197: PPUSH
10198: CALL_OW 302
10202: IFFALSE 10218
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10204: LD_EXP 4
10208: PPUSH
10209: LD_STRING DR0-Cyrus-1
10211: PPUSH
10212: CALL_OW 88
// end else
10216: GO 10451
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10218: LD_INT 22
10220: PUSH
10221: LD_INT 1
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 21
10230: PUSH
10231: LD_INT 1
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: LD_INT 25
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 25
10253: PUSH
10254: LD_INT 2
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 25
10263: PUSH
10264: LD_INT 3
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 25
10273: PUSH
10274: LD_INT 4
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 26
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: PUSH
10309: LD_EXP 1
10313: PUSH
10314: LD_EXP 8
10318: PUSH
10319: LD_EXP 5
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: DIFF
10329: PPUSH
10330: LD_STRING DR0-Sol1-1
10332: PPUSH
10333: LD_STRING DR0-Sol1-1
10335: PPUSH
10336: CALL 4420 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10340: LD_INT 22
10342: PUSH
10343: LD_INT 1
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: LD_INT 21
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 2
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 26
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 69
10419: PUSH
10420: LD_EXP 1
10424: PUSH
10425: LD_EXP 8
10429: PUSH
10430: LD_EXP 5
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: DIFF
10440: PPUSH
10441: LD_STRING DR0-Sol2-1
10443: PPUSH
10444: LD_STRING DR0-Sol2-1
10446: PPUSH
10447: CALL 4420 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10451: LD_INT 22
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 21
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 2
10473: PUSH
10474: LD_INT 25
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 3
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 25
10506: PUSH
10507: LD_INT 4
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 26
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: PPUSH
10537: CALL_OW 69
10541: PUSH
10542: LD_EXP 1
10546: PUSH
10547: LD_EXP 8
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: DIFF
10556: PPUSH
10557: LD_STRING DR0-Sol2-1
10559: PPUSH
10560: LD_STRING DR0-Sol2-1
10562: PPUSH
10563: CALL 4420 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10567: LD_EXP 1
10571: PPUSH
10572: LD_STRING DR0-JMM-1
10574: PPUSH
10575: CALL_OW 88
// end ;
10579: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10580: LD_EXP 5
10584: PPUSH
10585: CALL_OW 302
10589: PUSH
10590: LD_INT 22
10592: PUSH
10593: LD_INT 1
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 16
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PUSH
10619: LD_INT 0
10621: GREATER
10622: AND
10623: IFFALSE 10901
10625: GO 10627
10627: DISABLE
// begin DialogueOn ;
10628: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10632: LD_EXP 5
10636: PPUSH
10637: LD_STRING D10-Frank-1
10639: PPUSH
10640: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10644: LD_INT 22
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 21
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 25
10669: PUSH
10670: LD_INT 1
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 25
10679: PUSH
10680: LD_INT 2
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 25
10689: PUSH
10690: LD_INT 3
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 4
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: PUSH
10724: LD_EXP 1
10728: PUSH
10729: LD_EXP 5
10733: PUSH
10734: LD_EXP 2
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: DIFF
10744: PPUSH
10745: LD_STRING D10-Sol1-1
10747: PPUSH
10748: LD_STRING D10-FSol1-1
10750: PPUSH
10751: CALL 4420 0 3
// Say ( Frank , D10-Frank-2 ) ;
10755: LD_EXP 5
10759: PPUSH
10760: LD_STRING D10-Frank-2
10762: PPUSH
10763: CALL_OW 88
// if IsOK ( Lisa ) then
10767: LD_EXP 2
10771: PPUSH
10772: CALL_OW 302
10776: IFFALSE 10792
// begin Say ( Lisa , D10-Lisa-2 ) ;
10778: LD_EXP 2
10782: PPUSH
10783: LD_STRING D10-Lisa-2
10785: PPUSH
10786: CALL_OW 88
// end else
10790: GO 10897
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10792: LD_INT 22
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 21
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 2
10814: PUSH
10815: LD_INT 25
10817: PUSH
10818: LD_INT 1
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 25
10827: PUSH
10828: LD_INT 2
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 25
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 25
10847: PUSH
10848: LD_INT 4
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 69
10871: PUSH
10872: LD_EXP 1
10876: PUSH
10877: LD_EXP 5
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: DIFF
10886: PPUSH
10887: LD_STRING D10-Sol1-2
10889: PPUSH
10890: LD_STRING D10-FSol1-2
10892: PPUSH
10893: CALL 4420 0 3
// end ; DialogueOff ;
10897: CALL_OW 7
// end ;
10901: END
// every 10 10$30 do
10902: GO 10904
10904: DISABLE
// begin HarrisonSupport ;
10905: CALL 1828 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10909: LD_EXP 15
10913: PPUSH
10914: CALL_OW 310
10918: PPUSH
10919: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10923: LD_EXP 15
10927: PPUSH
10928: LD_STRING DEng-Eng1-1
10930: PPUSH
10931: CALL_OW 88
// wait ( 1 1$0 ) ;
10935: LD_INT 2100
10937: PPUSH
10938: CALL_OW 67
// DialogueOn ;
10942: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10946: LD_EXP 12
10950: PPUSH
10951: LD_STRING DRem-Har-1
10953: PPUSH
10954: CALL_OW 94
// if contactWithRussian = 1 then
10958: LD_EXP 20
10962: PUSH
10963: LD_INT 1
10965: EQUAL
10966: IFFALSE 10982
// begin Say ( JMM , DRem-JMM-1 ) ;
10968: LD_EXP 1
10972: PPUSH
10973: LD_STRING DRem-JMM-1
10975: PPUSH
10976: CALL_OW 88
// end else
10980: GO 10994
// begin Say ( JMM , DRem-JMM-1a ) ;
10982: LD_EXP 1
10986: PPUSH
10987: LD_STRING DRem-JMM-1a
10989: PPUSH
10990: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10994: LD_EXP 12
10998: PPUSH
10999: LD_STRING DRem-Har-2
11001: PPUSH
11002: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11006: LD_STRING DenisInDelta
11008: PPUSH
11009: LD_INT 0
11011: PPUSH
11012: CALL_OW 30
11016: PUSH
11017: LD_INT 1
11019: EQUAL
11020: IFFALSE 11036
// begin Say ( JMM , DRem-JMM-2 ) ;
11022: LD_EXP 1
11026: PPUSH
11027: LD_STRING DRem-JMM-2
11029: PPUSH
11030: CALL_OW 88
// end else
11034: GO 11048
// begin Say ( JMM , DRem-JMM-2a ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_STRING DRem-JMM-2a
11043: PPUSH
11044: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11048: LD_EXP 12
11052: PPUSH
11053: LD_STRING DRem-Har-3
11055: PPUSH
11056: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11060: LD_EXP 1
11064: PPUSH
11065: LD_STRING DRem-JMM-3
11067: PPUSH
11068: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11072: LD_EXP 12
11076: PPUSH
11077: LD_STRING DRem-Har-4
11079: PPUSH
11080: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11084: LD_STRING DenisInDelta
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 30
11094: PUSH
11095: LD_INT 1
11097: EQUAL
11098: IFFALSE 11126
// begin Say ( JMM , DRem-JMM-4 ) ;
11100: LD_EXP 1
11104: PPUSH
11105: LD_STRING DRem-JMM-4
11107: PPUSH
11108: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11112: LD_EXP 12
11116: PPUSH
11117: LD_STRING DRem-Har-5
11119: PPUSH
11120: CALL_OW 94
// end else
11124: GO 11159
// begin SetRestrict ( 36 , 1 , true ) ;
11126: LD_INT 36
11128: PPUSH
11129: LD_INT 1
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11139: LD_INT 15
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11152: LD_STRING MR
11154: PPUSH
11155: CALL_OW 337
// end ; DialogueOff ;
11159: CALL_OW 7
// end ;
11163: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11164: LD_STRING DenisInDelta
11166: PPUSH
11167: LD_INT 0
11169: PPUSH
11170: CALL_OW 30
11174: PUSH
11175: LD_INT 1
11177: EQUAL
11178: IFFALSE 11309
11180: GO 11182
11182: DISABLE
// begin PrepareDenis ;
11183: CALL 1749 0 0
// CenterNowOnUnits ( Denis ) ;
11187: LD_EXP 9
11191: PPUSH
11192: CALL_OW 87
// DialogueOn ;
11196: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11200: LD_EXP 9
11204: PPUSH
11205: LD_STRING DDen-Den-1
11207: PPUSH
11208: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11212: LD_EXP 1
11216: PPUSH
11217: LD_STRING DDen-JMM-1
11219: PPUSH
11220: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11224: LD_EXP 9
11228: PPUSH
11229: LD_STRING DDen-Den-2
11231: PPUSH
11232: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11236: LD_EXP 1
11240: PPUSH
11241: LD_STRING DDen-JMM-2
11243: PPUSH
11244: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11248: LD_EXP 9
11252: PPUSH
11253: LD_STRING DDen-Den-3
11255: PPUSH
11256: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11260: LD_EXP 1
11264: PPUSH
11265: LD_STRING DDen-JMM-3
11267: PPUSH
11268: CALL_OW 88
// DialogueOff ;
11272: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11276: LD_INT 36
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11289: LD_INT 15
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11302: LD_STRING MR
11304: PPUSH
11305: CALL_OW 337
// end ;
11309: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11310: CALL 11355 0 0
11314: PUSH
11315: LD_EXP 9
11319: PPUSH
11320: CALL_OW 302
11324: AND
11325: IFFALSE 11354
11327: GO 11329
11329: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11330: LD_EXP 9
11334: PPUSH
11335: LD_STRING DR1-Den-1
11337: PPUSH
11338: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11342: LD_EXP 1
11346: PPUSH
11347: LD_STRING DR1-JMM-1
11349: PPUSH
11350: CALL_OW 88
// end ;
11354: END
// function CheckOptoLab ; var i ; begin
11355: LD_INT 0
11357: PPUSH
11358: PPUSH
// result = false ;
11359: LD_ADDR_VAR 0 1
11363: PUSH
11364: LD_INT 0
11366: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_INT 22
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: LD_INT 7
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 8
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PPUSH
11414: CALL_OW 69
11418: PUSH
11419: FOR_IN
11420: IFFALSE 11472
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11422: LD_VAR 0 2
11426: PPUSH
11427: LD_INT 1
11429: PPUSH
11430: CALL_OW 268
11434: PUSH
11435: LD_INT 15
11437: EQUAL
11438: PUSH
11439: LD_VAR 0 2
11443: PPUSH
11444: LD_INT 2
11446: PPUSH
11447: CALL_OW 268
11451: PUSH
11452: LD_INT 15
11454: EQUAL
11455: OR
11456: IFFALSE 11468
// begin result = true ;
11458: LD_ADDR_VAR 0 1
11462: PUSH
11463: LD_INT 1
11465: ST_TO_ADDR
// break ;
11466: GO 11472
// end ; break ;
11468: GO 11472
// end ;
11470: GO 11419
11472: POP
11473: POP
// end ;
11474: LD_VAR 0 1
11478: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11479: LD_INT 15
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 321
11489: PUSH
11490: LD_INT 2
11492: EQUAL
11493: PUSH
11494: LD_EXP 9
11498: PPUSH
11499: CALL_OW 302
11503: AND
11504: IFFALSE 11736
11506: GO 11508
11508: DISABLE
// begin DialogueOn ;
11509: CALL_OW 6
// if IsOK ( Denis ) then
11513: LD_EXP 9
11517: PPUSH
11518: CALL_OW 302
11522: IFFALSE 11538
// begin Say ( Denis , DR2-Den-1 ) ;
11524: LD_EXP 9
11528: PPUSH
11529: LD_STRING DR2-Den-1
11531: PPUSH
11532: CALL_OW 88
// end else
11536: GO 11597
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11538: LD_INT 22
11540: PUSH
11541: LD_INT 1
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 1
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 25
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 69
11577: PUSH
11578: LD_EXP 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: DIFF
11586: PPUSH
11587: LD_STRING DR2-Sci1-1
11589: PPUSH
11590: LD_STRING DR2-FSci1-1
11592: PPUSH
11593: CALL 4420 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11597: LD_EXP 1
11601: PPUSH
11602: LD_STRING DR2-JMM-1
11604: PPUSH
11605: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11609: LD_INT 22
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 21
11621: PUSH
11622: LD_INT 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 25
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 25
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 25
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 25
11664: PUSH
11665: LD_INT 4
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 69
11688: PUSH
11689: LD_EXP 1
11693: PUSH
11694: LD_EXP 9
11698: PUSH
11699: LD_EXP 8
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: DIFF
11709: PPUSH
11710: LD_STRING DR2-Sol1-1
11712: PPUSH
11713: LD_STRING DR2-Sol1-11
11715: PPUSH
11716: CALL 4420 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11720: LD_EXP 1
11724: PPUSH
11725: LD_STRING DR2-JMM-2
11727: PPUSH
11728: CALL_OW 88
// DialogueOff ;
11732: CALL_OW 7
// end ;
11736: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11737: LD_INT 22
11739: PUSH
11740: LD_INT 1
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 36
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: CALL_OW 69
11765: PUSH
11766: LD_INT 0
11768: EQUAL
11769: PUSH
11770: LD_INT 22
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 21
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 33
11792: PUSH
11793: LD_INT 2
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: PPUSH
11805: CALL_OW 69
11809: PUSH
11810: LD_INT 0
11812: GREATER
11813: AND
11814: PUSH
11815: LD_EXP 21
11819: PUSH
11820: LD_INT 0
11822: EQUAL
11823: AND
11824: IFFALSE 11896
11826: GO 11828
11828: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11829: LD_INT 22
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 21
11841: PUSH
11842: LD_INT 1
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 25
11851: PUSH
11852: LD_INT 3
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 69
11868: PUSH
11869: LD_EXP 1
11873: PUSH
11874: EMPTY
11875: LIST
11876: DIFF
11877: PPUSH
11878: LD_STRING D3a-Mech1-1
11880: PPUSH
11881: LD_STRING D3a-Mech1-1
11883: PPUSH
11884: CALL 4420 0 3
// firstTower = 2 ;
11888: LD_ADDR_EXP 21
11892: PUSH
11893: LD_INT 2
11895: ST_TO_ADDR
// end ;
11896: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11897: LD_INT 22
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 21
11909: PUSH
11910: LD_INT 3
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: PUSH
11926: LD_INT 0
11928: EQUAL
11929: IFFALSE 12044
11931: GO 11933
11933: DISABLE
11934: LD_INT 0
11936: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
11937: LD_ADDR_VAR 0 1
11941: PUSH
11942: LD_INT 22
11944: PUSH
11945: LD_INT 1
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 21
11954: PUSH
11955: LD_INT 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 25
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 25
11987: PUSH
11988: LD_INT 3
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: LD_INT 4
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 69
12021: PUSH
12022: FOR_IN
12023: IFFALSE 12042
// AddExperience ( i , 1 , 10000 ) ;
12025: LD_VAR 0 1
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: LD_INT 10000
12035: PPUSH
12036: CALL_OW 492
12040: GO 12022
12042: POP
12043: POP
// end ;
12044: PPOPN 1
12046: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12047: LD_INT 22
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 36
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: PUSH
12076: LD_INT 0
12078: GREATER
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 1
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 33
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: PPUSH
12115: CALL_OW 69
12119: PUSH
12120: LD_INT 0
12122: GREATER
12123: AND
12124: PUSH
12125: CALL 12707 0 0
12129: AND
12130: IFFALSE 12704
12132: GO 12134
12134: DISABLE
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12142: LD_ADDR_VAR 0 3
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_INT 1
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 30
12159: PUSH
12160: LD_INT 36
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PPUSH
12171: CALL_OW 69
12175: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12176: LD_ADDR_VAR 0 4
12180: PUSH
12181: LD_INT 22
12183: PUSH
12184: LD_INT 1
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 21
12193: PUSH
12194: LD_INT 2
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 33
12203: PUSH
12204: LD_INT 2
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: LIST
12215: PPUSH
12216: CALL_OW 69
12220: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12221: LD_ADDR_VAR 0 5
12225: PUSH
12226: EMPTY
12227: ST_TO_ADDR
// for i in tmpControlTowers do
12228: LD_ADDR_VAR 0 1
12232: PUSH
12233: LD_VAR 0 3
12237: PUSH
12238: FOR_IN
12239: IFFALSE 12702
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12241: LD_EXP 1
12245: PPUSH
12246: CALL_OW 310
12250: PUSH
12251: LD_VAR 0 1
12255: EQUAL
12256: PUSH
12257: LD_EXP 1
12261: PPUSH
12262: CALL_OW 257
12266: PUSH
12267: LD_INT 3
12269: EQUAL
12270: AND
12271: IFFALSE 12401
// begin InGameOn ;
12273: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12277: LD_VAR 0 4
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12290: LD_EXP 1
12294: PPUSH
12295: LD_STRING D4a-JMM-1
12297: PPUSH
12298: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12302: LD_VAR 0 4
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PPUSH
12311: LD_EXP 1
12315: PPUSH
12316: CALL_OW 53
// wait ( 0 0$1 ) ;
12320: LD_INT 35
12322: PPUSH
12323: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12327: LD_VAR 0 4
12331: PUSH
12332: LD_INT 1
12334: ARRAY
12335: PPUSH
12336: LD_VAR 0 4
12340: PUSH
12341: LD_INT 1
12343: ARRAY
12344: PPUSH
12345: CALL_OW 250
12349: PUSH
12350: LD_INT 3
12352: PLUS
12353: PPUSH
12354: LD_VAR 0 4
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: PPUSH
12363: CALL_OW 251
12367: PUSH
12368: LD_INT 2
12370: MINUS
12371: PPUSH
12372: CALL_OW 111
// wait ( 0 0$2 ) ;
12376: LD_INT 70
12378: PPUSH
12379: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12383: LD_EXP 1
12387: PPUSH
12388: LD_STRING D4b-JMM-1
12390: PPUSH
12391: CALL_OW 88
// InGameOff ;
12395: CALL_OW 9
// end else
12399: GO 12700
// begin InGameOn ;
12401: CALL_OW 8
// for j in UnitsInside ( i ) do
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_VAR 0 1
12414: PPUSH
12415: CALL_OW 313
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12456
// if GetClass ( j ) = 3 then
12423: LD_VAR 0 2
12427: PPUSH
12428: CALL_OW 257
12432: PUSH
12433: LD_INT 3
12435: EQUAL
12436: IFFALSE 12454
// tmpMechanicInside = tmpMechanicInside ^ j ;
12438: LD_ADDR_VAR 0 5
12442: PUSH
12443: LD_VAR 0 5
12447: PUSH
12448: LD_VAR 0 2
12452: ADD
12453: ST_TO_ADDR
12454: GO 12420
12456: POP
12457: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12458: LD_VAR 0 5
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PPUSH
12467: CALL_OW 258
12471: PUSH
12472: LD_INT 1
12474: EQUAL
12475: IFFALSE 12493
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12477: LD_VAR 0 5
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: LD_STRING D4a-Mech1-1
12488: PPUSH
12489: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12493: LD_VAR 0 5
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PPUSH
12502: CALL_OW 258
12506: PUSH
12507: LD_INT 2
12509: EQUAL
12510: IFFALSE 12528
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12512: LD_VAR 0 5
12516: PUSH
12517: LD_INT 1
12519: ARRAY
12520: PPUSH
12521: LD_STRING D4a-FMech1-1
12523: PPUSH
12524: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12528: LD_VAR 0 4
12532: PUSH
12533: LD_INT 1
12535: ARRAY
12536: PPUSH
12537: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12541: LD_VAR 0 4
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PPUSH
12550: LD_VAR 0 5
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 53
// wait ( 0 0$1 ) ;
12563: LD_INT 35
12565: PPUSH
12566: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12570: LD_VAR 0 4
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 4
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: CALL_OW 250
12592: PUSH
12593: LD_INT 3
12595: PLUS
12596: PPUSH
12597: LD_VAR 0 4
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: CALL_OW 251
12610: PUSH
12611: LD_INT 2
12613: MINUS
12614: PPUSH
12615: CALL_OW 111
// wait ( 0 0$2 ) ;
12619: LD_INT 70
12621: PPUSH
12622: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12626: LD_VAR 0 5
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: CALL_OW 258
12639: PUSH
12640: LD_INT 1
12642: EQUAL
12643: IFFALSE 12661
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12645: LD_VAR 0 5
12649: PUSH
12650: LD_INT 1
12652: ARRAY
12653: PPUSH
12654: LD_STRING D4b-Mech1-1
12656: PPUSH
12657: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12661: LD_VAR 0 5
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PPUSH
12670: CALL_OW 258
12674: PUSH
12675: LD_INT 2
12677: EQUAL
12678: IFFALSE 12696
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12680: LD_VAR 0 5
12684: PUSH
12685: LD_INT 1
12687: ARRAY
12688: PPUSH
12689: LD_STRING D4b-FMech1-1
12691: PPUSH
12692: CALL_OW 88
// InGameOff ;
12696: CALL_OW 9
// end ; end ;
12700: GO 12238
12702: POP
12703: POP
// end ;
12704: PPOPN 5
12706: END
// function CheckMehInside ; var i , j ; begin
12707: LD_INT 0
12709: PPUSH
12710: PPUSH
12711: PPUSH
// result = false ;
12712: LD_ADDR_VAR 0 1
12716: PUSH
12717: LD_INT 0
12719: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_INT 36
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PPUSH
12749: CALL_OW 69
12753: PUSH
12754: FOR_IN
12755: IFFALSE 12806
// begin for j in UnitsInside ( i ) do
12757: LD_ADDR_VAR 0 3
12761: PUSH
12762: LD_VAR 0 2
12766: PPUSH
12767: CALL_OW 313
12771: PUSH
12772: FOR_IN
12773: IFFALSE 12802
// begin if GetClass ( j ) = 3 then
12775: LD_VAR 0 3
12779: PPUSH
12780: CALL_OW 257
12784: PUSH
12785: LD_INT 3
12787: EQUAL
12788: IFFALSE 12800
// begin result = true ;
12790: LD_ADDR_VAR 0 1
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// break ;
12798: GO 12802
// end ; end ;
12800: GO 12772
12802: POP
12803: POP
// end ;
12804: GO 12754
12806: POP
12807: POP
// end ;
12808: LD_VAR 0 1
12812: RET
// every 25 25$0 do
12813: GO 12815
12815: DISABLE
// begin PrepareKurt ;
12816: CALL 15619 0 0
// end ;
12820: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12821: LD_EXP 17
12825: PPUSH
12826: LD_INT 9
12828: PPUSH
12829: CALL_OW 308
12833: PUSH
12834: LD_EXP 19
12838: PUSH
12839: LD_INT 1
12841: EQUAL
12842: AND
12843: IFFALSE 12917
12845: GO 12847
12847: DISABLE
// begin RemoveUnit ( Kurt ) ;
12848: LD_EXP 17
12852: PPUSH
12853: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12857: LD_EXP 17
12861: PPUSH
12862: LD_STRING Kurt
12864: PPUSH
12865: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12869: LD_INT 1
12871: PPUSH
12872: LD_INT 2
12874: PPUSH
12875: CALL_OW 81
12879: PUSH
12880: LD_INT 0
12882: EQUAL
12883: IFFALSE 12893
// KurtStatus = 1 ;
12885: LD_ADDR_EXP 18
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12893: LD_INT 1
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 81
12903: PUSH
12904: LD_INT 2
12906: EQUAL
12907: IFFALSE 12917
// KurtStatus = 2 ;
12909: LD_ADDR_EXP 18
12913: PUSH
12914: LD_INT 2
12916: ST_TO_ADDR
// end ;
12917: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12918: LD_INT 1
12920: PPUSH
12921: LD_INT 2
12923: PPUSH
12924: CALL_OW 81
12928: PUSH
12929: LD_INT 2
12931: EQUAL
12932: PUSH
12933: LD_EXP 17
12937: PPUSH
12938: CALL_OW 302
12942: AND
12943: IFFALSE 12968
12945: GO 12947
12947: DISABLE
// begin DialogueOn ;
12948: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12952: LD_EXP 17
12956: PPUSH
12957: LD_STRING D2a-Kurt-1
12959: PPUSH
12960: CALL_OW 88
// DialogueOff ;
12964: CALL_OW 7
// end ;
12968: END
// every 35 35$0 do
12969: GO 12971
12971: DISABLE
// begin PrepareJoan ;
12972: CALL 2224 0 0
// wait ( 1 1$0 ) ;
12976: LD_INT 2100
12978: PPUSH
12979: CALL_OW 67
// if IsOK ( Lisa ) then
12983: LD_EXP 2
12987: PPUSH
12988: CALL_OW 302
12992: IFFALSE 13122
// begin DialogueOn ;
12994: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12998: LD_EXP 2
13002: PPUSH
13003: LD_STRING D7-Lisa-1
13005: PPUSH
13006: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13010: LD_EXP 1
13014: PPUSH
13015: LD_STRING D7-JMM-1
13017: PPUSH
13018: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13022: LD_EXP 2
13026: PPUSH
13027: LD_STRING D7-Lisa-2
13029: PPUSH
13030: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13034: LD_EXP 1
13038: PPUSH
13039: LD_STRING D7-JMM-2
13041: PPUSH
13042: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13046: LD_EXP 2
13050: PPUSH
13051: LD_STRING D7-Lisa-3
13053: PPUSH
13054: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13058: LD_EXP 1
13062: PPUSH
13063: LD_STRING D7-JMM-3
13065: PPUSH
13066: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13070: LD_EXP 2
13074: PPUSH
13075: LD_STRING D7-Lisa-4
13077: PPUSH
13078: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13082: LD_EXP 1
13086: PPUSH
13087: LD_STRING D7-JMM-4
13089: PPUSH
13090: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13094: LD_EXP 1
13098: PPUSH
13099: LD_STRING D7-JMM-4a
13101: PPUSH
13102: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13106: LD_EXP 2
13110: PPUSH
13111: LD_STRING D7-Lisa-5
13113: PPUSH
13114: CALL_OW 88
// DialogueOff ;
13118: CALL_OW 7
// end ; end ;
13122: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13123: LD_INT 22
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 33
13135: PUSH
13136: LD_INT 2
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: PUSH
13152: LD_INT 2
13154: GREATEREQUAL
13155: IFFALSE 13175
13157: GO 13159
13159: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13160: LD_STRING MRa
13162: PPUSH
13163: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13167: LD_ADDR_EXP 26
13171: PUSH
13172: LD_INT 1
13174: ST_TO_ADDR
// end ;
13175: END
// every 4 4$0 do
13176: GO 13178
13178: DISABLE
// PrepareRandoms ( 1 ) ;
13179: LD_INT 1
13181: PPUSH
13182: CALL 3121 0 1
13186: END
// every 10 10$0 do
13187: GO 13189
13189: DISABLE
// PrepareRandoms ( 2 ) ;
13190: LD_INT 2
13192: PPUSH
13193: CALL 3121 0 1
13197: END
// every 28 28$0 do
13198: GO 13200
13200: DISABLE
// PrepareRandoms ( 4 ) ;
13201: LD_INT 4
13203: PPUSH
13204: CALL 3121 0 1
13208: END
// every 32 32$0 do
13209: GO 13211
13211: DISABLE
// PrepareRandoms ( 5 ) ;
13212: LD_INT 5
13214: PPUSH
13215: CALL 3121 0 1
13219: END
// every 35 35$30 do
13220: GO 13222
13222: DISABLE
// PrepareRandoms ( 6 ) ;
13223: LD_INT 6
13225: PPUSH
13226: CALL 3121 0 1
13230: END
// every 37 37$20 do
13231: GO 13233
13233: DISABLE
// PrepareRandoms ( 7 ) ;
13234: LD_INT 7
13236: PPUSH
13237: CALL 3121 0 1
13241: END
// every 5 5$20 do
13242: GO 13244
13244: DISABLE
// begin DialogueOn ;
13245: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13249: LD_EXP 10
13253: PPUSH
13254: LD_STRING D12a-Sci-1
13256: PPUSH
13257: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13261: LD_EXP 1
13265: PPUSH
13266: LD_STRING D12a-JMM-1
13268: PPUSH
13269: CALL_OW 88
// DialogueOff ;
13273: CALL_OW 7
// cratesStatus = 1 ;
13277: LD_ADDR_EXP 33
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// end ;
13285: END
// every 13 13$0 do
13286: GO 13288
13288: DISABLE
// begin DialogueOn ;
13289: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13293: LD_EXP 10
13297: PPUSH
13298: LD_STRING D12b-Sci-1
13300: PPUSH
13301: CALL_OW 94
// DialogueOff ;
13305: CALL_OW 7
// cratesStatus = 2 ;
13309: LD_ADDR_EXP 33
13313: PUSH
13314: LD_INT 2
13316: ST_TO_ADDR
// end ;
13317: END
// every 32 32$0 do
13318: GO 13320
13320: DISABLE
// begin DialogueOn ;
13321: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13325: LD_EXP 10
13329: PPUSH
13330: LD_STRING  D12c-Sci-1
13332: PPUSH
13333: CALL_OW 94
// DialogueOff ;
13337: CALL_OW 7
// wait ( 3 3$0 ) ;
13341: LD_INT 6300
13343: PPUSH
13344: CALL_OW 67
// DialogueOn ;
13348: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13352: LD_EXP 10
13356: PPUSH
13357: LD_STRING  D12d-Sci-1
13359: PPUSH
13360: CALL_OW 94
// DialogueOff ;
13364: CALL_OW 7
// cratesStatus = 1 ;
13368: LD_ADDR_EXP 33
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// end ;
13376: END
// every 42 42$0 do
13377: GO 13379
13379: DISABLE
// begin DialogueOn ;
13380: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13384: LD_EXP 10
13388: PPUSH
13389: LD_STRING D12e-Sci-1
13391: PPUSH
13392: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13396: LD_EXP 1
13400: PPUSH
13401: LD_STRING D12e-JMM-1
13403: PPUSH
13404: CALL_OW 88
// DialogueOff ;
13408: CALL_OW 7
// cratesStatus = 2 ;
13412: LD_ADDR_EXP 33
13416: PUSH
13417: LD_INT 2
13419: ST_TO_ADDR
// end ;
13420: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13421: LD_INT 22
13423: PUSH
13424: LD_INT 6
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 34
13443: PUSH
13444: LD_INT 51
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: PUSH
13461: LD_INT 0
13463: GREATER
13464: IFFALSE 13547
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
// begin enable ;
13472: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13473: LD_ADDR_VAR 0 1
13477: PUSH
13478: LD_INT 22
13480: PUSH
13481: LD_INT 6
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 2
13490: PUSH
13491: LD_INT 21
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 21
13503: PUSH
13504: LD_INT 2
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PPUSH
13520: CALL_OW 69
13524: PUSH
13525: FOR_IN
13526: IFFALSE 13545
// ComAgressiveMove ( i , 138 , 168 ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_INT 138
13535: PPUSH
13536: LD_INT 168
13538: PPUSH
13539: CALL_OW 114
13543: GO 13525
13545: POP
13546: POP
// end ;
13547: PPOPN 1
13549: END
// every 0 0$1 do var i ;
13550: GO 13552
13552: DISABLE
13553: LD_INT 0
13555: PPUSH
// begin enable ;
13556: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13557: LD_ADDR_VAR 0 1
13561: PUSH
13562: LD_INT 5
13564: PPUSH
13565: LD_INT 2
13567: PUSH
13568: LD_INT 22
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_INT 6
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: PPUSH
13596: CALL_OW 70
13600: PUSH
13601: FOR_IN
13602: IFFALSE 13666
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13604: LD_INT 5
13606: PPUSH
13607: LD_INT 22
13609: PUSH
13610: LD_INT 6
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 34
13619: PUSH
13620: LD_INT 51
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 70
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: IFFALSE 13655
// sendedConvoys = sendedConvoys + 1 ;
13641: LD_ADDR_EXP 34
13645: PUSH
13646: LD_EXP 34
13650: PUSH
13651: LD_INT 1
13653: PLUS
13654: ST_TO_ADDR
// RemoveUnit ( i ) ;
13655: LD_VAR 0 1
13659: PPUSH
13660: CALL_OW 64
// end ;
13664: GO 13601
13666: POP
13667: POP
// end ; end_of_file
13668: PPOPN 1
13670: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13671: LD_VAR 0 1
13675: PUSH
13676: LD_INT 1
13678: EQUAL
13679: PUSH
13680: LD_VAR 0 2
13684: PUSH
13685: LD_INT 3
13687: EQUAL
13688: AND
13689: IFFALSE 13699
// contactWithRussian = 1 ;
13691: LD_ADDR_EXP 20
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// end ;
13699: PPOPN 2
13701: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 266
13711: PUSH
13712: LD_INT 36
13714: EQUAL
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 255
13725: PUSH
13726: LD_INT 1
13728: EQUAL
13729: AND
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_INT 1
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 21
13743: PUSH
13744: LD_INT 2
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 33
13753: PUSH
13754: LD_INT 2
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: PPUSH
13766: CALL_OW 69
13770: PUSH
13771: LD_INT 0
13773: EQUAL
13774: AND
13775: PUSH
13776: LD_EXP 21
13780: PUSH
13781: LD_INT 0
13783: EQUAL
13784: AND
13785: IFFALSE 13854
// begin firstTower = 1 ;
13787: LD_ADDR_EXP 21
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13795: LD_INT 22
13797: PUSH
13798: LD_INT 1
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 21
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 3
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PPUSH
13830: CALL_OW 69
13834: PUSH
13835: LD_EXP 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: DIFF
13843: PPUSH
13844: LD_STRING D3b-Mech1-1
13846: PPUSH
13847: LD_STRING D3b-Mech1-1
13849: PPUSH
13850: CALL 4420 0 3
// end ; if GetSide ( building ) = 3 then
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 255
13863: PUSH
13864: LD_INT 3
13866: EQUAL
13867: IFFALSE 13941
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13869: LD_ADDR_EXP 28
13873: PUSH
13874: LD_EXP 28
13878: PPUSH
13879: LD_INT 1
13881: PPUSH
13882: CALL_OW 3
13886: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13887: LD_ADDR_EXP 28
13891: PUSH
13892: LD_EXP 28
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 3
13904: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13905: LD_ADDR_EXP 28
13909: PUSH
13910: LD_EXP 28
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 3
13922: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13923: LD_ADDR_EXP 28
13927: PUSH
13928: LD_EXP 28
13932: PPUSH
13933: LD_INT 1
13935: PPUSH
13936: CALL_OW 3
13940: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13941: LD_VAR 0 1
13945: PPUSH
13946: CALL_OW 255
13950: PUSH
13951: LD_INT 3
13953: EQUAL
13954: PUSH
13955: LD_VAR 0 1
13959: PPUSH
13960: CALL_OW 266
13964: PUSH
13965: LD_INT 0
13967: EQUAL
13968: PUSH
13969: LD_VAR 0 1
13973: PPUSH
13974: CALL_OW 266
13978: PUSH
13979: LD_INT 2
13981: EQUAL
13982: OR
13983: PUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 266
13993: PUSH
13994: LD_INT 4
13996: EQUAL
13997: OR
13998: PUSH
13999: EMPTY
14000: LIST
14001: AND
14002: IFFALSE 14013
// ComUpgrade ( building ) ;
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14013: LD_VAR 0 1
14017: PPUSH
14018: CALL_OW 255
14022: PUSH
14023: LD_INT 3
14025: EQUAL
14026: PUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 266
14036: PUSH
14037: LD_INT 32
14039: EQUAL
14040: AND
14041: IFFALSE 14082
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14043: LD_VAR 0 1
14047: PPUSH
14048: LD_INT 42
14050: PUSH
14051: LD_INT 43
14053: PUSH
14054: LD_INT 44
14056: PUSH
14057: LD_INT 46
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 4
14071: PPUSH
14072: CALL_OW 12
14076: ARRAY
14077: PPUSH
14078: CALL_OW 208
// end ; end ;
14082: PPOPN 1
14084: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 255
14094: PUSH
14095: LD_INT 1
14097: EQUAL
14098: PUSH
14099: LD_VAR 0 1
14103: PPUSH
14104: CALL_OW 247
14108: PUSH
14109: LD_INT 1
14111: EQUAL
14112: AND
14113: PUSH
14114: LD_VAR 0 1
14118: PPUSH
14119: CALL_OW 257
14123: PUSH
14124: LD_INT 1
14126: EQUAL
14127: PUSH
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 257
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: OR
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 257
14152: PUSH
14153: LD_INT 3
14155: EQUAL
14156: OR
14157: PUSH
14158: LD_VAR 0 1
14162: PPUSH
14163: CALL_OW 257
14167: PUSH
14168: LD_INT 4
14170: EQUAL
14171: OR
14172: PUSH
14173: EMPTY
14174: LIST
14175: AND
14176: IFFALSE 14192
// unitLost = unitLost + 1 ;
14178: LD_ADDR_EXP 27
14182: PUSH
14183: LD_EXP 27
14187: PUSH
14188: LD_INT 1
14190: PLUS
14191: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14192: LD_VAR 0 1
14196: PPUSH
14197: CALL_OW 255
14201: PUSH
14202: LD_INT 3
14204: EQUAL
14205: PUSH
14206: LD_VAR 0 1
14210: PPUSH
14211: CALL_OW 247
14215: PUSH
14216: LD_INT 3
14218: EQUAL
14219: AND
14220: IFFALSE 14912
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 266
14231: PUSH
14232: LD_INT 31
14234: EQUAL
14235: PUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 266
14245: PUSH
14246: LD_INT 32
14248: EQUAL
14249: OR
14250: PUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 266
14260: PUSH
14261: LD_INT 36
14263: EQUAL
14264: OR
14265: PUSH
14266: LD_VAR 0 1
14270: PPUSH
14271: CALL_OW 266
14275: PUSH
14276: LD_INT 0
14278: EQUAL
14279: OR
14280: PUSH
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 266
14290: PUSH
14291: LD_INT 24
14293: EQUAL
14294: OR
14295: PUSH
14296: LD_VAR 0 1
14300: PPUSH
14301: CALL_OW 266
14305: PUSH
14306: LD_INT 17
14308: EQUAL
14309: OR
14310: PUSH
14311: LD_VAR 0 1
14315: PPUSH
14316: CALL_OW 266
14320: PUSH
14321: LD_INT 25
14323: EQUAL
14324: OR
14325: PUSH
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL_OW 266
14335: PUSH
14336: LD_INT 19
14338: EQUAL
14339: OR
14340: PUSH
14341: LD_VAR 0 1
14345: PPUSH
14346: CALL_OW 266
14350: PUSH
14351: LD_INT 20
14353: EQUAL
14354: OR
14355: PUSH
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 266
14365: PUSH
14366: LD_INT 18
14368: EQUAL
14369: OR
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 266
14380: PUSH
14381: LD_INT 21
14383: EQUAL
14384: OR
14385: PUSH
14386: LD_VAR 0 1
14390: PPUSH
14391: CALL_OW 266
14395: PUSH
14396: LD_INT 23
14398: EQUAL
14399: OR
14400: PUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 266
14410: PUSH
14411: LD_INT 16
14413: EQUAL
14414: OR
14415: PUSH
14416: LD_VAR 0 1
14420: PPUSH
14421: CALL_OW 266
14425: PUSH
14426: LD_INT 6
14428: EQUAL
14429: OR
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 266
14440: PUSH
14441: LD_INT 29
14443: EQUAL
14444: OR
14445: PUSH
14446: LD_VAR 0 1
14450: PPUSH
14451: CALL_OW 266
14455: PUSH
14456: LD_INT 26
14458: EQUAL
14459: OR
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 266
14470: PUSH
14471: LD_INT 30
14473: EQUAL
14474: OR
14475: PUSH
14476: LD_VAR 0 1
14480: PPUSH
14481: CALL_OW 266
14485: PUSH
14486: LD_INT 28
14488: EQUAL
14489: OR
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 266
14500: PUSH
14501: LD_INT 27
14503: EQUAL
14504: OR
14505: PUSH
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 266
14515: PUSH
14516: LD_INT 33
14518: EQUAL
14519: OR
14520: PUSH
14521: LD_VAR 0 1
14525: PPUSH
14526: CALL_OW 266
14530: PUSH
14531: LD_INT 2
14533: EQUAL
14534: OR
14535: PUSH
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 266
14545: PUSH
14546: LD_INT 4
14548: EQUAL
14549: OR
14550: IFFALSE 14636
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14552: LD_ADDR_EXP 28
14556: PUSH
14557: LD_EXP 28
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 266
14571: ADD
14572: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14573: LD_ADDR_EXP 28
14577: PUSH
14578: LD_EXP 28
14582: PUSH
14583: LD_VAR 0 1
14587: PPUSH
14588: CALL_OW 250
14592: ADD
14593: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14594: LD_ADDR_EXP 28
14598: PUSH
14599: LD_EXP 28
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 251
14613: ADD
14614: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14615: LD_ADDR_EXP 28
14619: PUSH
14620: LD_EXP 28
14624: PUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 254
14634: ADD
14635: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 266
14645: PUSH
14646: LD_INT 1
14648: EQUAL
14649: IFFALSE 14728
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14651: LD_ADDR_EXP 28
14655: PUSH
14656: LD_EXP 28
14660: PUSH
14661: LD_INT 0
14663: ADD
14664: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14665: LD_ADDR_EXP 28
14669: PUSH
14670: LD_EXP 28
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 250
14684: ADD
14685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14686: LD_ADDR_EXP 28
14690: PUSH
14691: LD_EXP 28
14695: PUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 251
14705: ADD
14706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14707: LD_ADDR_EXP 28
14711: PUSH
14712: LD_EXP 28
14716: PUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 254
14726: ADD
14727: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14728: LD_VAR 0 1
14732: PPUSH
14733: CALL_OW 266
14737: PUSH
14738: LD_INT 3
14740: EQUAL
14741: IFFALSE 14820
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14743: LD_ADDR_EXP 28
14747: PUSH
14748: LD_EXP 28
14752: PUSH
14753: LD_INT 2
14755: ADD
14756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14757: LD_ADDR_EXP 28
14761: PUSH
14762: LD_EXP 28
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 250
14776: ADD
14777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14778: LD_ADDR_EXP 28
14782: PUSH
14783: LD_EXP 28
14787: PUSH
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 251
14797: ADD
14798: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14799: LD_ADDR_EXP 28
14803: PUSH
14804: LD_EXP 28
14808: PUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 254
14818: ADD
14819: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 266
14829: PUSH
14830: LD_INT 5
14832: EQUAL
14833: IFFALSE 14912
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14835: LD_ADDR_EXP 28
14839: PUSH
14840: LD_EXP 28
14844: PUSH
14845: LD_INT 4
14847: ADD
14848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14849: LD_ADDR_EXP 28
14853: PUSH
14854: LD_EXP 28
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 250
14868: ADD
14869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14870: LD_ADDR_EXP 28
14874: PUSH
14875: LD_EXP 28
14879: PUSH
14880: LD_VAR 0 1
14884: PPUSH
14885: CALL_OW 251
14889: ADD
14890: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14891: LD_ADDR_EXP 28
14895: PUSH
14896: LD_EXP 28
14900: PUSH
14901: LD_VAR 0 1
14905: PPUSH
14906: CALL_OW 254
14910: ADD
14911: ST_TO_ADDR
// end ; end ; end ;
14912: PPOPN 1
14914: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14915: LD_INT 0
14917: PPUSH
14918: PPUSH
14919: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 264
14929: PUSH
14930: LD_INT 51
14932: EQUAL
14933: PUSH
14934: LD_VAR 0 1
14938: PPUSH
14939: CALL_OW 255
14943: PUSH
14944: LD_INT 3
14946: EQUAL
14947: AND
14948: IFFALSE 15010
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14950: LD_ADDR_VAR 0 5
14954: PUSH
14955: LD_INT 2
14957: PPUSH
14958: CALL_OW 274
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 275
14970: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
14971: LD_INT 2
14973: PPUSH
14974: CALL_OW 274
14978: PPUSH
14979: LD_INT 1
14981: PPUSH
14982: LD_VAR 0 5
14986: PUSH
14987: LD_INT 100
14989: MINUS
14990: PPUSH
14991: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
14995: LD_VAR 0 1
14999: PPUSH
15000: LD_INT 1
15002: PPUSH
15003: LD_INT 100
15005: PPUSH
15006: CALL_OW 291
// end ; if building = rufabsupp then
15010: LD_VAR 0 2
15014: PUSH
15015: LD_INT 17
15017: EQUAL
15018: IFFALSE 15032
// SetSide ( vehicle , 6 ) ;
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 6
15027: PPUSH
15028: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15032: LD_VAR 0 2
15036: PPUSH
15037: CALL_OW 255
15041: PUSH
15042: LD_INT 3
15044: EQUAL
15045: PUSH
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 302
15055: AND
15056: IFFALSE 15126
// begin uc_side = 3 ;
15058: LD_ADDR_OWVAR 20
15062: PUSH
15063: LD_INT 3
15065: ST_TO_ADDR
// uc_nation = 3 ;
15066: LD_ADDR_OWVAR 21
15070: PUSH
15071: LD_INT 3
15073: ST_TO_ADDR
// hc_gallery :=  ;
15074: LD_ADDR_OWVAR 33
15078: PUSH
15079: LD_STRING 
15081: ST_TO_ADDR
// hc_name :=  ;
15082: LD_ADDR_OWVAR 26
15086: PUSH
15087: LD_STRING 
15089: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15090: LD_INT 0
15092: PPUSH
15093: LD_EXP 31
15097: PPUSH
15098: LD_EXP 32
15102: PPUSH
15103: CALL_OW 12
15107: PPUSH
15108: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15112: CALL_OW 44
15116: PPUSH
15117: LD_VAR 0 2
15121: PPUSH
15122: CALL_OW 52
// end ; end ;
15126: PPOPN 5
15128: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 255
15138: PUSH
15139: LD_INT 3
15141: EQUAL
15142: IFFALSE 15158
// tamedApemans = tamedApemans + 1 ;
15144: LD_ADDR_EXP 29
15148: PUSH
15149: LD_EXP 29
15153: PUSH
15154: LD_INT 1
15156: PLUS
15157: ST_TO_ADDR
// end ; end_of_file
15158: PPOPN 2
15160: END
// every 0 0$30 trigger cratesStatus = 1 do
15161: LD_EXP 33
15165: PUSH
15166: LD_INT 1
15168: EQUAL
15169: IFFALSE 15233
15171: GO 15173
15173: DISABLE
// begin enable ;
15174: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15175: LD_INT 350
15177: PUSH
15178: LD_INT 1050
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 2
15190: PPUSH
15191: CALL_OW 12
15195: ARRAY
15196: PPUSH
15197: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15201: LD_INT 4
15203: PUSH
15204: LD_INT 5
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 1
15213: PPUSH
15214: LD_INT 2
15216: PPUSH
15217: CALL_OW 12
15221: ARRAY
15222: PPUSH
15223: LD_INT 7
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 55
// end ;
15233: END
// every 1 1$0 trigger cratesStatus = 2 do
15234: LD_EXP 33
15238: PUSH
15239: LD_INT 2
15241: EQUAL
15242: IFFALSE 15306
15244: GO 15246
15246: DISABLE
// begin enable ;
15247: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15248: LD_INT 3150
15250: PUSH
15251: LD_INT 4550
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PUSH
15258: LD_INT 1
15260: PPUSH
15261: LD_INT 2
15263: PPUSH
15264: CALL_OW 12
15268: ARRAY
15269: PPUSH
15270: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15274: LD_INT 2
15276: PUSH
15277: LD_INT 5
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PPUSH
15287: LD_INT 2
15289: PPUSH
15290: CALL_OW 12
15294: ARRAY
15295: PPUSH
15296: LD_INT 8
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 55
// end ; end_of_file
15306: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15307: LD_EXP 22
15311: PUSH
15312: LD_INT 1
15314: EQUAL
15315: IFFALSE 15616
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
15324: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: LD_INT 22
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 21
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 2
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: LD_INT 0
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PUSH
15363: LD_INT 30
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: PPUSH
15383: CALL_OW 69
15387: ST_TO_ADDR
// for i in tmp do
15388: LD_ADDR_VAR 0 1
15392: PUSH
15393: LD_VAR 0 2
15397: PUSH
15398: FOR_IN
15399: IFFALSE 15432
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15401: LD_ADDR_VAR 0 3
15405: PUSH
15406: LD_VAR 0 3
15410: PUSH
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL_OW 274
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 275
15428: PLUS
15429: ST_TO_ADDR
15430: GO 15398
15432: POP
15433: POP
// strings = [ ] ;
15434: LD_ADDR_EXP 25
15438: PUSH
15439: EMPTY
15440: ST_TO_ADDR
// if tmp = 0 then
15441: LD_VAR 0 2
15445: PUSH
15446: LD_INT 0
15448: EQUAL
15449: IFFALSE 15474
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15451: LD_ADDR_EXP 25
15455: PUSH
15456: LD_EXP 25
15460: PUSH
15461: LD_STRING #Am06-1
15463: PUSH
15464: LD_EXP 23
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: ADD
15473: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15474: LD_VAR 0 2
15478: PUSH
15479: LD_INT 0
15481: GREATER
15482: PUSH
15483: LD_EXP 23
15487: PUSH
15488: LD_VAR 0 3
15492: GREATER
15493: AND
15494: IFFALSE 15525
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15496: LD_ADDR_EXP 25
15500: PUSH
15501: LD_EXP 25
15505: PUSH
15506: LD_STRING #Am06-1
15508: PUSH
15509: LD_EXP 23
15513: PUSH
15514: LD_VAR 0 3
15518: MINUS
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: ADD
15524: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15525: LD_VAR 0 2
15529: PUSH
15530: LD_INT 0
15532: GREATER
15533: PUSH
15534: LD_EXP 23
15538: PUSH
15539: LD_VAR 0 3
15543: LESSEQUAL
15544: AND
15545: IFFALSE 15568
// strings = strings ^ [ #Am06-1 , 0 ] ;
15547: LD_ADDR_EXP 25
15551: PUSH
15552: LD_EXP 25
15556: PUSH
15557: LD_STRING #Am06-1
15559: PUSH
15560: LD_INT 0
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: ADD
15567: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15568: LD_ADDR_EXP 24
15572: PUSH
15573: LD_EXP 24
15577: PUSH
15578: LD_INT 35
15580: MINUS
15581: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15582: LD_ADDR_EXP 25
15586: PUSH
15587: LD_EXP 25
15591: PUSH
15592: LD_STRING #Am06-2
15594: PUSH
15595: LD_EXP 24
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: ADD
15604: ST_TO_ADDR
// display_strings = strings ;
15605: LD_ADDR_OWVAR 47
15609: PUSH
15610: LD_EXP 25
15614: ST_TO_ADDR
// enable ;
15615: ENABLE
// end ; end_of_file
15616: PPOPN 3
15618: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15619: LD_INT 0
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 1
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 21
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: LD_INT 25
15656: PUSH
15657: LD_INT 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 25
15666: PUSH
15667: LD_INT 2
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 25
15676: PUSH
15677: LD_INT 3
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 4
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: LIST
15705: PPUSH
15706: CALL_OW 69
15710: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15711: LD_ADDR_VAR 0 3
15715: PUSH
15716: LD_INT 1
15718: PPUSH
15719: LD_VAR 0 2
15723: PPUSH
15724: CALL_OW 12
15728: ST_TO_ADDR
// uc_side = 2 ;
15729: LD_ADDR_OWVAR 20
15733: PUSH
15734: LD_INT 2
15736: ST_TO_ADDR
// uc_nation = 2 ;
15737: LD_ADDR_OWVAR 21
15741: PUSH
15742: LD_INT 2
15744: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15745: LD_ADDR_EXP 17
15749: PUSH
15750: LD_STRING Kurt
15752: PPUSH
15753: LD_INT 0
15755: PPUSH
15756: CALL 4363 0 2
15760: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
15761: LD_EXP 17
15765: PPUSH
15766: LD_VAR 0 2
15770: PUSH
15771: LD_VAR 0 3
15775: ARRAY
15776: PPUSH
15777: CALL_OW 250
15781: PPUSH
15782: LD_VAR 0 2
15786: PUSH
15787: LD_VAR 0 3
15791: ARRAY
15792: PPUSH
15793: CALL_OW 251
15797: PPUSH
15798: LD_INT 5
15800: PPUSH
15801: LD_INT 1
15803: PPUSH
15804: CALL_OW 50
// InGameOn ;
15808: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15812: LD_EXP 17
15816: PPUSH
15817: CALL_OW 87
// wait ( 0 0$2 ) ;
15821: LD_INT 70
15823: PPUSH
15824: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15828: LD_VAR 0 2
15832: PUSH
15833: LD_VAR 0 3
15837: ARRAY
15838: PPUSH
15839: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15843: LD_VAR 0 2
15847: PUSH
15848: LD_VAR 0 3
15852: ARRAY
15853: PPUSH
15854: CALL_OW 122
// wait ( 0 0$1 ) ;
15858: LD_INT 35
15860: PPUSH
15861: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15865: LD_EXP 17
15869: PPUSH
15870: LD_VAR 0 2
15874: PUSH
15875: LD_VAR 0 3
15879: ARRAY
15880: PPUSH
15881: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15885: LD_VAR 0 2
15889: PUSH
15890: LD_VAR 0 3
15894: ARRAY
15895: PPUSH
15896: LD_EXP 17
15900: PPUSH
15901: CALL_OW 119
// DialogueOn ;
15905: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15909: LD_EXP 17
15913: PPUSH
15914: LD_STRING D2-Kurt-1
15916: PPUSH
15917: CALL_OW 88
// if tmp [ rnd ] = JMM then
15921: LD_VAR 0 2
15925: PUSH
15926: LD_VAR 0 3
15930: ARRAY
15931: PUSH
15932: LD_EXP 1
15936: EQUAL
15937: IFFALSE 16029
// begin Say ( JMM , D2-JMM-1 ) ;
15939: LD_EXP 1
15943: PPUSH
15944: LD_STRING D2-JMM-1
15946: PPUSH
15947: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15951: LD_EXP 17
15955: PPUSH
15956: LD_STRING D2-Kurt-2
15958: PPUSH
15959: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15963: LD_EXP 1
15967: PPUSH
15968: LD_STRING D2-JMM-2
15970: PPUSH
15971: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15975: LD_EXP 17
15979: PPUSH
15980: LD_STRING D2-Kurt-3
15982: PPUSH
15983: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15987: LD_EXP 1
15991: PPUSH
15992: LD_STRING D2-JMM-3
15994: PPUSH
15995: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15999: LD_EXP 17
16003: PPUSH
16004: LD_STRING D2-Kurt-4
16006: PPUSH
16007: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16011: LD_EXP 1
16015: PPUSH
16016: LD_STRING D2-JMM-4
16018: PPUSH
16019: CALL_OW 88
// DialogueOff ;
16023: CALL_OW 7
// end else
16027: GO 16459
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16029: LD_VAR 0 2
16033: PUSH
16034: LD_VAR 0 3
16038: ARRAY
16039: PPUSH
16040: CALL_OW 258
16044: PUSH
16045: LD_INT 1
16047: EQUAL
16048: IFFALSE 16068
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
16050: LD_VAR 0 2
16054: PUSH
16055: LD_VAR 0 3
16059: ARRAY
16060: PPUSH
16061: LD_STRING D2-Sol1-1
16063: PPUSH
16064: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16068: LD_VAR 0 2
16072: PUSH
16073: LD_VAR 0 3
16077: ARRAY
16078: PPUSH
16079: CALL_OW 258
16083: PUSH
16084: LD_INT 2
16086: EQUAL
16087: IFFALSE 16107
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
16089: LD_VAR 0 2
16093: PUSH
16094: LD_VAR 0 3
16098: ARRAY
16099: PPUSH
16100: LD_STRING D2-FSol1-1
16102: PPUSH
16103: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16107: LD_EXP 17
16111: PPUSH
16112: LD_STRING D2-Kurt-2
16114: PPUSH
16115: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16119: LD_VAR 0 2
16123: PUSH
16124: LD_VAR 0 3
16128: ARRAY
16129: PPUSH
16130: CALL_OW 258
16134: PUSH
16135: LD_INT 1
16137: EQUAL
16138: IFFALSE 16158
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
16140: LD_VAR 0 2
16144: PUSH
16145: LD_VAR 0 3
16149: ARRAY
16150: PPUSH
16151: LD_STRING D2-Sol1-2
16153: PPUSH
16154: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16158: LD_VAR 0 2
16162: PUSH
16163: LD_VAR 0 3
16167: ARRAY
16168: PPUSH
16169: CALL_OW 258
16173: PUSH
16174: LD_INT 2
16176: EQUAL
16177: IFFALSE 16197
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
16179: LD_VAR 0 2
16183: PUSH
16184: LD_VAR 0 3
16188: ARRAY
16189: PPUSH
16190: LD_STRING D2-FSol1-2
16192: PPUSH
16193: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16197: LD_EXP 17
16201: PPUSH
16202: LD_STRING D2-Kurt-3
16204: PPUSH
16205: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16209: LD_VAR 0 2
16213: PUSH
16214: LD_VAR 0 3
16218: ARRAY
16219: PPUSH
16220: CALL_OW 258
16224: PUSH
16225: LD_INT 1
16227: EQUAL
16228: IFFALSE 16248
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16230: LD_VAR 0 2
16234: PUSH
16235: LD_VAR 0 3
16239: ARRAY
16240: PPUSH
16241: LD_STRING D2-Sol1-3
16243: PPUSH
16244: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16248: LD_VAR 0 2
16252: PUSH
16253: LD_VAR 0 3
16257: ARRAY
16258: PPUSH
16259: CALL_OW 258
16263: PUSH
16264: LD_INT 2
16266: EQUAL
16267: IFFALSE 16287
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16269: LD_VAR 0 2
16273: PUSH
16274: LD_VAR 0 3
16278: ARRAY
16279: PPUSH
16280: LD_STRING D2-FSol1-3
16282: PPUSH
16283: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16287: LD_EXP 17
16291: PPUSH
16292: LD_STRING D2-Kurt-4
16294: PPUSH
16295: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16299: LD_VAR 0 2
16303: PUSH
16304: LD_VAR 0 3
16308: ARRAY
16309: PPUSH
16310: CALL_OW 258
16314: PUSH
16315: LD_INT 1
16317: EQUAL
16318: IFFALSE 16338
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16320: LD_VAR 0 2
16324: PUSH
16325: LD_VAR 0 3
16329: ARRAY
16330: PPUSH
16331: LD_STRING D2-Sol1-4
16333: PPUSH
16334: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16338: LD_VAR 0 2
16342: PUSH
16343: LD_VAR 0 3
16347: ARRAY
16348: PPUSH
16349: CALL_OW 258
16353: PUSH
16354: LD_INT 2
16356: EQUAL
16357: IFFALSE 16377
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16359: LD_VAR 0 2
16363: PUSH
16364: LD_VAR 0 3
16368: ARRAY
16369: PPUSH
16370: LD_STRING D2-FSol1-4
16372: PPUSH
16373: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16377: LD_VAR 0 2
16381: PUSH
16382: LD_VAR 0 3
16386: ARRAY
16387: PPUSH
16388: CALL_OW 258
16392: PUSH
16393: LD_INT 1
16395: EQUAL
16396: IFFALSE 16416
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16398: LD_VAR 0 2
16402: PUSH
16403: LD_VAR 0 3
16407: ARRAY
16408: PPUSH
16409: LD_STRING D2-Sol1-5
16411: PPUSH
16412: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16416: LD_VAR 0 2
16420: PUSH
16421: LD_VAR 0 3
16425: ARRAY
16426: PPUSH
16427: CALL_OW 258
16431: PUSH
16432: LD_INT 2
16434: EQUAL
16435: IFFALSE 16455
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16437: LD_VAR 0 2
16441: PUSH
16442: LD_VAR 0 3
16446: ARRAY
16447: PPUSH
16448: LD_STRING D2-FSol1-5
16450: PPUSH
16451: CALL_OW 88
// DialogueOff ;
16455: CALL_OW 7
// end ; dec = ShowQuery1 ;
16459: LD_ADDR_VAR 0 4
16463: PUSH
16464: CALL 4959 0 0
16468: ST_TO_ADDR
// if dec = 1 then
16469: LD_VAR 0 4
16473: PUSH
16474: LD_INT 1
16476: EQUAL
16477: IFFALSE 16519
// begin DialogueOn ;
16479: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16483: LD_EXP 17
16487: PPUSH
16488: LD_STRING D2a-Kurt-1
16490: PPUSH
16491: CALL_OW 88
// DialogueOff ;
16495: CALL_OW 7
// InGameOff ;
16499: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16503: LD_INT 1
16505: PPUSH
16506: LD_INT 2
16508: PPUSH
16509: LD_INT 2
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 80
// end ; if dec = 2 then
16519: LD_VAR 0 4
16523: PUSH
16524: LD_INT 2
16526: EQUAL
16527: IFFALSE 17123
// begin DialogueOn ;
16529: CALL_OW 6
// if tmp [ rnd ] = JMM then
16533: LD_VAR 0 2
16537: PUSH
16538: LD_VAR 0 3
16542: ARRAY
16543: PUSH
16544: LD_EXP 1
16548: EQUAL
16549: IFFALSE 16605
// begin Say ( JMM , D2b-JMM-1 ) ;
16551: LD_EXP 1
16555: PPUSH
16556: LD_STRING D2b-JMM-1
16558: PPUSH
16559: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16563: LD_EXP 17
16567: PPUSH
16568: LD_STRING D2b-Kurt-1
16570: PPUSH
16571: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16575: LD_EXP 1
16579: PPUSH
16580: LD_STRING D2b-JMM-2
16582: PPUSH
16583: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16587: LD_EXP 17
16591: PPUSH
16592: LD_STRING D2b-Kurt-2
16594: PPUSH
16595: CALL_OW 88
// DialogueOff ;
16599: CALL_OW 7
// end else
16603: GO 16867
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16605: LD_VAR 0 2
16609: PUSH
16610: LD_VAR 0 3
16614: ARRAY
16615: PPUSH
16616: CALL_OW 258
16620: PUSH
16621: LD_INT 1
16623: EQUAL
16624: IFFALSE 16644
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16626: LD_VAR 0 2
16630: PUSH
16631: LD_VAR 0 3
16635: ARRAY
16636: PPUSH
16637: LD_STRING D2b-Sol1-1
16639: PPUSH
16640: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16644: LD_VAR 0 2
16648: PUSH
16649: LD_VAR 0 3
16653: ARRAY
16654: PPUSH
16655: CALL_OW 258
16659: PUSH
16660: LD_INT 2
16662: EQUAL
16663: IFFALSE 16683
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16665: LD_VAR 0 2
16669: PUSH
16670: LD_VAR 0 3
16674: ARRAY
16675: PPUSH
16676: LD_STRING D2b-FSol1-1
16678: PPUSH
16679: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16683: LD_EXP 17
16687: PPUSH
16688: LD_STRING D2b-Kurt-1
16690: PPUSH
16691: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16695: LD_VAR 0 2
16699: PUSH
16700: LD_VAR 0 3
16704: ARRAY
16705: PPUSH
16706: CALL_OW 258
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: IFFALSE 16734
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16716: LD_VAR 0 2
16720: PUSH
16721: LD_VAR 0 3
16725: ARRAY
16726: PPUSH
16727: LD_STRING D2b-Sol1-2
16729: PPUSH
16730: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16734: LD_VAR 0 2
16738: PUSH
16739: LD_VAR 0 3
16743: ARRAY
16744: PPUSH
16745: CALL_OW 258
16749: PUSH
16750: LD_INT 2
16752: EQUAL
16753: IFFALSE 16773
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16755: LD_VAR 0 2
16759: PUSH
16760: LD_VAR 0 3
16764: ARRAY
16765: PPUSH
16766: LD_STRING D2b-FSol1-2
16768: PPUSH
16769: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16773: LD_EXP 17
16777: PPUSH
16778: LD_STRING D2b-Kurt-2
16780: PPUSH
16781: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16785: LD_VAR 0 2
16789: PUSH
16790: LD_VAR 0 3
16794: ARRAY
16795: PPUSH
16796: CALL_OW 258
16800: PUSH
16801: LD_INT 1
16803: EQUAL
16804: IFFALSE 16824
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16806: LD_VAR 0 2
16810: PUSH
16811: LD_VAR 0 3
16815: ARRAY
16816: PPUSH
16817: LD_STRING D2c-Sol1-2
16819: PPUSH
16820: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16824: LD_VAR 0 2
16828: PUSH
16829: LD_VAR 0 3
16833: ARRAY
16834: PPUSH
16835: CALL_OW 258
16839: PUSH
16840: LD_INT 2
16842: EQUAL
16843: IFFALSE 16863
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16845: LD_VAR 0 2
16849: PUSH
16850: LD_VAR 0 3
16854: ARRAY
16855: PPUSH
16856: LD_STRING D2c-FSol1-2
16858: PPUSH
16859: CALL_OW 88
// DialogueOff ;
16863: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16867: LD_ADDR_VAR 0 5
16871: PUSH
16872: CALL 5033 0 0
16876: ST_TO_ADDR
// if dec2 = 1 then
16877: LD_VAR 0 5
16881: PUSH
16882: LD_INT 1
16884: EQUAL
16885: IFFALSE 16923
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16887: LD_EXP 17
16891: PPUSH
16892: LD_STRING D2a-Kurt-1
16894: PPUSH
16895: CALL_OW 88
// DialogueOff ;
16899: CALL_OW 7
// InGameOff ;
16903: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16907: LD_INT 1
16909: PPUSH
16910: LD_INT 2
16912: PPUSH
16913: LD_INT 2
16915: PPUSH
16916: LD_INT 1
16918: PPUSH
16919: CALL_OW 80
// end ; if dec2 = 2 then
16923: LD_VAR 0 5
16927: PUSH
16928: LD_INT 2
16930: EQUAL
16931: IFFALSE 17123
// begin if tmp [ rnd ] = JMM then
16933: LD_VAR 0 2
16937: PUSH
16938: LD_VAR 0 3
16942: ARRAY
16943: PUSH
16944: LD_EXP 1
16948: EQUAL
16949: IFFALSE 17005
// begin Say ( JMM , D2c-JMM-1 ) ;
16951: LD_EXP 1
16955: PPUSH
16956: LD_STRING D2c-JMM-1
16958: PPUSH
16959: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16963: LD_EXP 17
16967: PPUSH
16968: LD_STRING D2c-Kurt-1
16970: PPUSH
16971: CALL_OW 88
// DialogueOff ;
16975: CALL_OW 7
// InGameOff ;
16979: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16983: LD_EXP 17
16987: PPUSH
16988: LD_INT 9
16990: PPUSH
16991: CALL_OW 113
// readyToEscape = 1 ;
16995: LD_ADDR_EXP 19
16999: PUSH
17000: LD_INT 1
17002: ST_TO_ADDR
// end else
17003: GO 17123
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17005: LD_VAR 0 2
17009: PUSH
17010: LD_VAR 0 3
17014: ARRAY
17015: PPUSH
17016: CALL_OW 258
17020: PUSH
17021: LD_INT 1
17023: EQUAL
17024: IFFALSE 17044
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17026: LD_VAR 0 2
17030: PUSH
17031: LD_VAR 0 3
17035: ARRAY
17036: PPUSH
17037: LD_STRING D2c-Sol1-1
17039: PPUSH
17040: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17044: LD_VAR 0 2
17048: PUSH
17049: LD_VAR 0 3
17053: ARRAY
17054: PPUSH
17055: CALL_OW 258
17059: PUSH
17060: LD_INT 2
17062: EQUAL
17063: IFFALSE 17083
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17065: LD_VAR 0 2
17069: PUSH
17070: LD_VAR 0 3
17074: ARRAY
17075: PPUSH
17076: LD_STRING D2c-FSol1-1
17078: PPUSH
17079: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17083: LD_EXP 17
17087: PPUSH
17088: LD_STRING D2c-Kurt-1
17090: PPUSH
17091: CALL_OW 88
// DialogueOff ;
17095: CALL_OW 7
// InGameOff ;
17099: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17103: LD_EXP 17
17107: PPUSH
17108: LD_INT 9
17110: PPUSH
17111: CALL_OW 113
// readyToEscape = 1 ;
17115: LD_ADDR_EXP 19
17119: PUSH
17120: LD_INT 1
17122: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17123: LD_VAR 0 4
17127: PUSH
17128: LD_INT 3
17130: EQUAL
17131: IFFALSE 17327
// begin DialogueOn ;
17133: CALL_OW 6
// if tmp [ rnd ] = JMM then
17137: LD_VAR 0 2
17141: PUSH
17142: LD_VAR 0 3
17146: ARRAY
17147: PUSH
17148: LD_EXP 1
17152: EQUAL
17153: IFFALSE 17209
// begin Say ( JMM , D2c-JMM-1 ) ;
17155: LD_EXP 1
17159: PPUSH
17160: LD_STRING D2c-JMM-1
17162: PPUSH
17163: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17167: LD_EXP 17
17171: PPUSH
17172: LD_STRING D2c-Kurt-1
17174: PPUSH
17175: CALL_OW 88
// DialogueOff ;
17179: CALL_OW 7
// InGameOff ;
17183: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17187: LD_EXP 17
17191: PPUSH
17192: LD_INT 9
17194: PPUSH
17195: CALL_OW 113
// readyToEscape = 1 ;
17199: LD_ADDR_EXP 19
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// end else
17207: GO 17327
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17209: LD_VAR 0 2
17213: PUSH
17214: LD_VAR 0 3
17218: ARRAY
17219: PPUSH
17220: CALL_OW 258
17224: PUSH
17225: LD_INT 1
17227: EQUAL
17228: IFFALSE 17248
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17230: LD_VAR 0 2
17234: PUSH
17235: LD_VAR 0 3
17239: ARRAY
17240: PPUSH
17241: LD_STRING D2c-Sol1-1
17243: PPUSH
17244: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17248: LD_VAR 0 2
17252: PUSH
17253: LD_VAR 0 3
17257: ARRAY
17258: PPUSH
17259: CALL_OW 258
17263: PUSH
17264: LD_INT 2
17266: EQUAL
17267: IFFALSE 17287
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17269: LD_VAR 0 2
17273: PUSH
17274: LD_VAR 0 3
17278: ARRAY
17279: PPUSH
17280: LD_STRING D2c-FSol1-1
17282: PPUSH
17283: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17287: LD_EXP 17
17291: PPUSH
17292: LD_STRING D2c-Kurt-1
17294: PPUSH
17295: CALL_OW 88
// DialogueOff ;
17299: CALL_OW 7
// InGameOff ;
17303: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17307: LD_EXP 17
17311: PPUSH
17312: LD_INT 9
17314: PPUSH
17315: CALL_OW 113
// readyToEscape = 1 ;
17319: LD_ADDR_EXP 19
17323: PUSH
17324: LD_INT 1
17326: ST_TO_ADDR
// end ; end ; end ; end_of_file
17327: LD_VAR 0 1
17331: RET
// every 0 0$1 do
17332: GO 17334
17334: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17335: LD_INT 3
17337: PPUSH
17338: LD_INT 32
17340: PPUSH
17341: LD_INT 3
17343: PPUSH
17344: CALL 5088 0 3
17348: END
// every 0 0$1 do
17349: GO 17351
17351: DISABLE
// begin enable ;
17352: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17353: LD_INT 3
17355: PPUSH
17356: LD_INT 2
17358: PPUSH
17359: CALL 5173 0 2
// if disableHealAI = 0 then
17363: LD_EXP 30
17367: PUSH
17368: LD_INT 0
17370: EQUAL
17371: IFFALSE 17389
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17373: LD_INT 3
17375: PPUSH
17376: LD_INT 10
17378: PPUSH
17379: LD_INT 11
17381: PPUSH
17382: LD_INT 32
17384: PPUSH
17385: CALL 5432 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17389: LD_INT 3
17391: PPUSH
17392: LD_INT 51
17394: PPUSH
17395: LD_INT 7
17397: PPUSH
17398: CALL 6155 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17402: LD_INT 3
17404: PPUSH
17405: LD_INT 14
17407: PPUSH
17408: LD_INT 121
17410: PPUSH
17411: LD_INT 100
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL 6335 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17421: LD_INT 3
17423: PPUSH
17424: LD_EXP 28
17428: PPUSH
17429: CALL 7126 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17433: LD_INT 3
17435: PPUSH
17436: LD_INT 8
17438: PUSH
17439: LD_INT 67
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 1
17448: PPUSH
17449: LD_INT 2
17451: PPUSH
17452: CALL_OW 12
17456: ARRAY
17457: PPUSH
17458: LD_INT 11
17460: PPUSH
17461: CALL 7332 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17465: LD_INT 3
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL 7689 0 2
// end ;
17475: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17476: LD_INT 22
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 2
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 55
17498: PUSH
17499: EMPTY
17500: LIST
17501: PUSH
17502: LD_INT 3
17504: PUSH
17505: LD_INT 34
17507: PUSH
17508: LD_INT 51
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: PPUSH
17525: CALL_OW 69
17529: PUSH
17530: LD_INT 0
17532: EQUAL
17533: IFFALSE 17685
17535: GO 17537
17537: DISABLE
// begin enable ;
17538: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17539: LD_INT 2
17541: PPUSH
17542: CALL_OW 274
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: LD_INT 1000
17552: PPUSH
17553: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17557: LD_INT 3
17559: PPUSH
17560: LD_INT 21
17562: PPUSH
17563: LD_INT 4
17565: PUSH
17566: LD_INT 5
17568: PUSH
17569: LD_INT 5
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: LD_OWVAR 67
17581: ARRAY
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: LD_INT 43
17588: PUSH
17589: LD_INT 43
17591: PUSH
17592: LD_INT 43
17594: PUSH
17595: LD_INT 44
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 44
17606: PUSH
17607: LD_INT 44
17609: PUSH
17610: LD_INT 44
17612: PUSH
17613: LD_INT 43
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 44
17624: PUSH
17625: LD_INT 44
17627: PUSH
17628: LD_INT 44
17630: PUSH
17631: LD_INT 44
17633: PUSH
17634: LD_INT 46
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: PUSH
17649: LD_OWVAR 67
17653: ARRAY
17654: PPUSH
17655: LD_INT 1
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: LD_INT 22
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_INT 24
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: PUSH
17675: LD_OWVAR 67
17679: ARRAY
17680: PPUSH
17681: CALL 5698 0 8
// end ;
17685: END
// every 5 5$0 do
17686: GO 17688
17688: DISABLE
// begin enable ;
17689: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17690: LD_INT 17
17692: PPUSH
17693: LD_INT 22
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_INT 42
17704: PUSH
17705: LD_INT 43
17707: PUSH
17708: LD_INT 44
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PPUSH
17719: LD_INT 3
17721: PPUSH
17722: CALL_OW 12
17726: ARRAY
17727: PPUSH
17728: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17732: LD_INT 17
17734: PPUSH
17735: LD_INT 22
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: LD_INT 51
17746: PPUSH
17747: CALL_OW 185
// end ;
17751: END
// every 2 2$0 do var i , j ;
17752: GO 17754
17754: DISABLE
17755: LD_INT 0
17757: PPUSH
17758: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17759: LD_INT 14700
17761: PUSH
17762: LD_INT 33600
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 1
17771: PPUSH
17772: LD_INT 2
17774: PPUSH
17775: CALL_OW 12
17779: ARRAY
17780: PPUSH
17781: CALL_OW 67
// disableHealAI = 1 ;
17785: LD_ADDR_EXP 30
17789: PUSH
17790: LD_INT 1
17792: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17793: LD_ADDR_VAR 0 1
17797: PUSH
17798: LD_INT 22
17800: PUSH
17801: LD_INT 3
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 4
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: PUSH
17827: FOR_IN
17828: IFFALSE 17841
// ComExitBuilding ( i ) ;
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 122
17839: GO 17827
17841: POP
17842: POP
// wait ( 0 0$1 ) ;
17843: LD_INT 35
17845: PPUSH
17846: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17850: LD_INT 35
17852: PPUSH
17853: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17857: LD_ADDR_VAR 0 1
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_INT 3
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 25
17874: PUSH
17875: LD_INT 4
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: CALL_OW 69
17890: PUSH
17891: FOR_IN
17892: IFFALSE 17969
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17894: LD_ADDR_VAR 0 2
17898: PUSH
17899: LD_INT 19
17901: PPUSH
17902: LD_INT 22
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 25
17914: PUSH
17915: LD_INT 12
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PPUSH
17926: CALL_OW 70
17930: PUSH
17931: FOR_IN
17932: IFFALSE 17965
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17934: LD_VAR 0 1
17938: PPUSH
17939: LD_VAR 0 2
17943: PPUSH
17944: CALL_OW 250
17948: PPUSH
17949: LD_VAR 0 2
17953: PPUSH
17954: CALL_OW 251
17958: PPUSH
17959: CALL_OW 191
// end ;
17963: GO 17931
17965: POP
17966: POP
// end ;
17967: GO 17891
17969: POP
17970: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17971: LD_INT 22
17973: PUSH
17974: LD_INT 3
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 25
17983: PUSH
17984: LD_INT 4
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: PUSH
18000: LD_INT 0
18002: EQUAL
18003: PUSH
18004: LD_EXP 29
18008: PUSH
18009: LD_INT 6
18011: PUSH
18012: LD_INT 7
18014: PUSH
18015: LD_INT 8
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: LD_OWVAR 67
18027: ARRAY
18028: GREATEREQUAL
18029: OR
18030: PUSH
18031: LD_INT 19
18033: PPUSH
18034: LD_INT 22
18036: PUSH
18037: LD_INT 0
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: LD_INT 25
18046: PUSH
18047: LD_INT 12
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 70
18062: PUSH
18063: LD_INT 0
18065: EQUAL
18066: OR
18067: IFFALSE 17850
// disableHealAI = 0 ;
18069: LD_ADDR_EXP 30
18073: PUSH
18074: LD_INT 0
18076: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 12
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: PUSH
18111: FOR_IN
18112: IFFALSE 18128
// SetClass ( i , 16 ) ;
18114: LD_VAR 0 1
18118: PPUSH
18119: LD_INT 16
18121: PPUSH
18122: CALL_OW 336
18126: GO 18111
18128: POP
18129: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18130: LD_ADDR_VAR 0 1
18134: PUSH
18135: LD_INT 22
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: LD_INT 25
18147: PUSH
18148: LD_INT 4
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PUSH
18164: FOR_IN
18165: IFFALSE 18184
// ComMoveXY ( i , 113 , 94 ) ;
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_INT 113
18174: PPUSH
18175: LD_INT 94
18177: PPUSH
18178: CALL_OW 111
18182: GO 18164
18184: POP
18185: POP
// end ;
18186: PPOPN 2
18188: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18189: LD_INT 21
18191: PPUSH
18192: CALL_OW 255
18196: PUSH
18197: LD_INT 3
18199: EQUAL
18200: PUSH
18201: LD_INT 21
18203: PPUSH
18204: CALL_OW 302
18208: AND
18209: PUSH
18210: LD_INT 22
18212: PUSH
18213: LD_INT 3
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 34
18222: PUSH
18223: LD_INT 51
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PPUSH
18234: CALL_OW 69
18238: PUSH
18239: LD_INT 0
18241: EQUAL
18242: AND
18243: IFFALSE 18275
18245: GO 18247
18247: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18248: LD_INT 21
18250: PPUSH
18251: LD_INT 23
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: LD_INT 51
18262: PPUSH
18263: CALL_OW 185
// wait ( 5 5$0 ) ;
18267: LD_INT 10500
18269: PPUSH
18270: CALL_OW 67
// enable ;
18274: ENABLE
// end ; end_of_file
18275: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18276: LD_EXP 24
18280: PUSH
18281: LD_INT 0
18283: LESSEQUAL
18284: IFFALSE 18424
18286: GO 18288
18288: DISABLE
18289: LD_INT 0
18291: PPUSH
18292: PPUSH
18293: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18294: LD_ADDR_VAR 0 2
18298: PUSH
18299: LD_INT 22
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 3
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 30
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: LIST
18351: PPUSH
18352: CALL_OW 69
18356: ST_TO_ADDR
// for i in tmp do
18357: LD_ADDR_VAR 0 1
18361: PUSH
18362: LD_VAR 0 2
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18401
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18370: LD_ADDR_VAR 0 3
18374: PUSH
18375: LD_VAR 0 3
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL_OW 274
18389: PPUSH
18390: LD_INT 1
18392: PPUSH
18393: CALL_OW 275
18397: PLUS
18398: ST_TO_ADDR
18399: GO 18367
18401: POP
18402: POP
// if yourCrates >= needCrates then
18403: LD_VAR 0 3
18407: PUSH
18408: LD_EXP 23
18412: GREATEREQUAL
18413: IFFALSE 18424
// begin FinishMission ( yourCrates ) ;
18415: LD_VAR 0 3
18419: PPUSH
18420: CALL 18427 0 1
// end ; end ;
18424: PPOPN 3
18426: END
// export function FinishMission ( crates ) ; begin
18427: LD_INT 0
18429: PPUSH
// if crates + 100 > crates then
18430: LD_VAR 0 1
18434: PUSH
18435: LD_INT 100
18437: PLUS
18438: PUSH
18439: LD_VAR 0 1
18443: GREATER
18444: IFFALSE 18468
// begin AddMedal ( cans , 1 ) ;
18446: LD_STRING cans
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18456: LD_INT 1
18458: PPUSH
18459: LD_STRING 06_crates_1
18461: PPUSH
18462: CALL_OW 39
// end else
18466: GO 18489
// begin AddMedal ( cans , - 1 ) ;
18468: LD_STRING cans
18470: PPUSH
18471: LD_INT 1
18473: NEG
18474: PPUSH
18475: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18479: LD_INT 0
18481: PPUSH
18482: LD_STRING 06_crates_1
18484: PPUSH
18485: CALL_OW 39
// end ; if unitLost < 2 then
18489: LD_EXP 27
18493: PUSH
18494: LD_INT 2
18496: LESS
18497: IFFALSE 18511
// begin AddMedal ( people , 1 ) ;
18499: LD_STRING people
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: CALL_OW 101
// end else
18509: GO 18522
// begin AddMedal ( people , - 1 ) ;
18511: LD_STRING people
18513: PPUSH
18514: LD_INT 1
18516: NEG
18517: PPUSH
18518: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18522: LD_EXP 26
18526: PPUSH
18527: LD_STRING 06_remoteVehs_1
18529: PPUSH
18530: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18534: LD_EXP 26
18538: PUSH
18539: LD_INT 1
18541: EQUAL
18542: IFFALSE 18556
// begin AddMedal ( remote , 1 ) ;
18544: LD_STRING remote
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: CALL_OW 101
// end else
18554: GO 18596
// begin if GetTech ( 18 , 1 ) = state_enabled then
18556: LD_INT 18
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 321
18566: PUSH
18567: LD_INT 1
18569: EQUAL
18570: IFFALSE 18585
// begin AddMedal ( remote , - 1 ) ;
18572: LD_STRING remote
18574: PPUSH
18575: LD_INT 1
18577: NEG
18578: PPUSH
18579: CALL_OW 101
// end else
18583: GO 18596
// begin AddMedal ( remote , - 2 ) ;
18585: LD_STRING remote
18587: PPUSH
18588: LD_INT 2
18590: NEG
18591: PPUSH
18592: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18596: LD_EXP 18
18600: PPUSH
18601: LD_STRING 06_KurtStatus_1
18603: PPUSH
18604: CALL_OW 39
// GiveMedals ( Main ) ;
18608: LD_STRING Main
18610: PPUSH
18611: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18615: LD_INT 50
18617: PUSH
18618: EMPTY
18619: LIST
18620: PUSH
18621: LD_INT 22
18623: PUSH
18624: LD_INT 1
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 21
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 25
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 25
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 25
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 4
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: PPUSH
18697: CALL_OW 69
18701: PPUSH
18702: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18706: LD_EXP 1
18710: PPUSH
18711: LD_STRING JMM
18713: PPUSH
18714: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
18718: LD_EXP 2
18722: PPUSH
18723: LD_STRING Lisa
18725: PPUSH
18726: CALL 4576 0 2
// EnchancedSaveCharacters ( Bobby , Bobby ) ;
18730: LD_EXP 3
18734: PPUSH
18735: LD_STRING Bobby
18737: PPUSH
18738: CALL 4576 0 2
// EnchancedSaveCharacters ( Cyrus , Cyrus ) ;
18742: LD_EXP 4
18746: PPUSH
18747: LD_STRING Cyrus
18749: PPUSH
18750: CALL 4576 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
18754: LD_EXP 5
18758: PPUSH
18759: LD_STRING Frank
18761: PPUSH
18762: CALL 4576 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
18766: LD_EXP 6
18770: PPUSH
18771: LD_STRING Brown
18773: PPUSH
18774: CALL 4576 0 2
// EnchancedSaveCharacters ( Donaldson , Donaldson ) ;
18778: LD_EXP 7
18782: PPUSH
18783: LD_STRING Donaldson
18785: PPUSH
18786: CALL 4576 0 2
// EnchancedSaveCharacters ( Gladstone , Gladstone ) ;
18790: LD_EXP 8
18794: PPUSH
18795: LD_STRING Gladstone
18797: PPUSH
18798: CALL 4576 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
18802: LD_EXP 9
18806: PPUSH
18807: LD_STRING Denis
18809: PPUSH
18810: CALL 4576 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
18814: LD_EXP 13
18818: PPUSH
18819: LD_STRING Joan
18821: PPUSH
18822: CALL 4576 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18826: LD_EXP 14
18830: PPUSH
18831: LD_STRING 06_JoanStatus_1
18833: PPUSH
18834: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18838: LD_INT 50
18840: PUSH
18841: EMPTY
18842: LIST
18843: PUSH
18844: LD_INT 22
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 21
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 25
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 25
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 25
18889: PUSH
18890: LD_INT 3
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 25
18899: PUSH
18900: LD_INT 4
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: PPUSH
18920: CALL_OW 69
18924: PUSH
18925: LD_EXP 1
18929: PUSH
18930: LD_EXP 2
18934: PUSH
18935: LD_EXP 3
18939: PUSH
18940: LD_EXP 4
18944: PUSH
18945: LD_EXP 5
18949: PUSH
18950: LD_EXP 6
18954: PUSH
18955: LD_EXP 7
18959: PUSH
18960: LD_EXP 8
18964: PUSH
18965: LD_EXP 9
18969: PUSH
18970: LD_EXP 13
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: DIFF
18987: PPUSH
18988: LD_STRING 06_other_survivors
18990: PPUSH
18991: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18995: LD_INT 50
18997: PUSH
18998: EMPTY
18999: LIST
19000: PUSH
19001: LD_INT 22
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: LD_INT 25
19026: PUSH
19027: LD_INT 12
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: LD_INT 25
19036: PUSH
19037: LD_INT 16
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: PPUSH
19055: CALL_OW 69
19059: PPUSH
19060: LD_STRING 06_other_apemans
19062: PPUSH
19063: CALL_OW 38
// YouWin ;
19067: CALL_OW 103
// end ; end_of_file
19071: LD_VAR 0 2
19075: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
19076: LD_EXP 34
19080: PUSH
19081: LD_INT 4
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: LIST
19094: PUSH
19095: LD_OWVAR 67
19099: ARRAY
19100: EQUAL
19101: IFFALSE 19216
19103: GO 19105
19105: DISABLE
// begin enable ;
19106: ENABLE
// sendedConvoys = 0 ;
19107: LD_ADDR_EXP 34
19111: PUSH
19112: LD_INT 0
19114: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19115: LD_INT 6
19117: PPUSH
19118: LD_INT 3
19120: PPUSH
19121: LD_INT 3
19123: PPUSH
19124: LD_INT 4
19126: PPUSH
19127: CALL_OW 12
19131: PUSH
19132: LD_INT 4
19134: PPUSH
19135: LD_INT 5
19137: PPUSH
19138: CALL_OW 12
19142: PUSH
19143: LD_INT 6
19145: PPUSH
19146: LD_INT 7
19148: PPUSH
19149: CALL_OW 12
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: PUSH
19159: LD_OWVAR 67
19163: ARRAY
19164: PPUSH
19165: LD_INT 0
19167: PPUSH
19168: LD_INT 0
19170: PPUSH
19171: LD_INT 0
19173: PPUSH
19174: LD_INT 3
19176: PPUSH
19177: LD_EXP 31
19181: PPUSH
19182: LD_EXP 32
19186: PPUSH
19187: CALL_OW 12
19191: PPUSH
19192: LD_INT 18
19194: PPUSH
19195: LD_INT 17
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: LD_INT 2
19206: PPUSH
19207: CALL_OW 12
19211: PPUSH
19212: CALL 7919 0 12
// end ; end_of_file
19216: END
// export function PrepareNature ; var i , un ; begin
19217: LD_INT 0
19219: PPUSH
19220: PPUSH
19221: PPUSH
// for i = 1 to Difficulty + 2 do
19222: LD_ADDR_VAR 0 2
19226: PUSH
19227: DOUBLE
19228: LD_INT 1
19230: DEC
19231: ST_TO_ADDR
19232: LD_OWVAR 67
19236: PUSH
19237: LD_INT 2
19239: PLUS
19240: PUSH
19241: FOR_TO
19242: IFFALSE 19377
// begin hc_sex = sex_male ;
19244: LD_ADDR_OWVAR 27
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// uc_side = 0 ;
19252: LD_ADDR_OWVAR 20
19256: PUSH
19257: LD_INT 0
19259: ST_TO_ADDR
// uc_nation = nation_nature ;
19260: LD_ADDR_OWVAR 21
19264: PUSH
19265: LD_INT 0
19267: ST_TO_ADDR
// hc_class = class_tiger ;
19268: LD_ADDR_OWVAR 28
19272: PUSH
19273: LD_INT 14
19275: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19276: LD_ADDR_OWVAR 31
19280: PUSH
19281: LD_EXP 32
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 0
19291: PUSH
19292: LD_INT 0
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
19301: LD_ADDR_OWVAR 35
19305: PUSH
19306: LD_INT 30
19308: PPUSH
19309: LD_INT 40
19311: PPUSH
19312: CALL_OW 12
19316: PUSH
19317: LD_INT 40
19319: PPUSH
19320: LD_INT 50
19322: PPUSH
19323: CALL_OW 12
19327: PUSH
19328: LD_INT 50
19330: PPUSH
19331: LD_INT 60
19333: PPUSH
19334: CALL_OW 12
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_OWVAR 67
19348: ARRAY
19349: ST_TO_ADDR
// un = CreateHuman ;
19350: LD_ADDR_VAR 0 3
19354: PUSH
19355: CALL_OW 44
19359: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19360: LD_VAR 0 3
19364: PPUSH
19365: LD_INT 20
19367: PPUSH
19368: LD_INT 0
19370: PPUSH
19371: CALL_OW 49
// end ;
19375: GO 19241
19377: POP
19378: POP
// for i = 1 to rand ( 3 , 4 ) do
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_INT 3
19391: PPUSH
19392: LD_INT 4
19394: PPUSH
19395: CALL_OW 12
19399: PUSH
19400: FOR_TO
19401: IFFALSE 19495
// begin hc_sex = sex_male ;
19403: LD_ADDR_OWVAR 27
19407: PUSH
19408: LD_INT 1
19410: ST_TO_ADDR
// uc_side = 0 ;
19411: LD_ADDR_OWVAR 20
19415: PUSH
19416: LD_INT 0
19418: ST_TO_ADDR
// uc_nation = nation_nature ;
19419: LD_ADDR_OWVAR 21
19423: PUSH
19424: LD_INT 0
19426: ST_TO_ADDR
// hc_class = 18 ;
19427: LD_ADDR_OWVAR 28
19431: PUSH
19432: LD_INT 18
19434: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19435: LD_ADDR_OWVAR 31
19439: PUSH
19440: LD_EXP 32
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: ST_TO_ADDR
// hc_agressivity = 0 ;
19460: LD_ADDR_OWVAR 35
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// un = CreateHuman ;
19468: LD_ADDR_VAR 0 3
19472: PUSH
19473: CALL_OW 44
19477: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19478: LD_VAR 0 3
19482: PPUSH
19483: LD_INT 20
19485: PPUSH
19486: LD_INT 0
19488: PPUSH
19489: CALL_OW 49
// end ;
19493: GO 19400
19495: POP
19496: POP
// end ;
19497: LD_VAR 0 1
19501: RET
