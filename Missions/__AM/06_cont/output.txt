// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 40
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 41
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 42
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 29
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 16
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 38
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 25
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 26
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 28
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 39
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 32
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 30
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 31
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 36
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 37
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 33
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 27
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5487 0 0
// PrepareNature ;
 211: CALL 20641 0 0
// PrepareRussian ;
 215: CALL 4594 0 0
// PrepareVehicles ;
 219: CALL 1420 0 0
// PrepareHeroes ;
 223: CALL 438 0 0
// PrepareOthers ;
 227: CALL 1681 0 0
// PreparePlayerApemans ;
 231: CALL 1823 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 40
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 435
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; var veh ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side = 1 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 1
 449: ST_TO_ADDR
// uc_nation = 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 458: LD_ADDR_EXP 1
 462: PUSH
 463: LD_STRING JMM
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL 4971 0 2
 473: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 474: LD_ADDR_EXP 14
 478: PUSH
 479: LD_STRING Harisson
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 4971 0 2
 489: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING DeltaDoctor
 497: PPUSH
 498: CALL_OW 34
 502: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 21
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 58
 530: PUSH
 531: EMPTY
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PPUSH
 539: CALL_OW 69
 543: ST_TO_ADDR
// if veh > 0 then
 544: LD_VAR 0 2
 548: PUSH
 549: LD_INT 0
 551: GREATER
 552: IFFALSE 574
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 554: LD_EXP 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 52
// end else
 572: GO 589
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 574: LD_EXP 1
 578: PPUSH
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 589: LD_STRING LisaIn06
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: PUSH
 600: LD_INT 1
 602: EQUAL
 603: IFFALSE 707
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 58
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 646: LD_ADDR_EXP 2
 650: PUSH
 651: LD_STRING Lisa
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 4971 0 2
 661: ST_TO_ADDR
// if veh > 0 then
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 0
 669: GREATER
 670: IFFALSE 692
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 672: LD_EXP 2
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: CALL_OW 52
// end else
 690: GO 707
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 707: LD_STRING BobbyIn06
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 30
 717: PUSH
 718: LD_INT 1
 720: EQUAL
 721: IFFALSE 825
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 22
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: EMPTY
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING Bobby
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 4971 0 2
 779: ST_TO_ADDR
// if veh > 0 then
 780: LD_VAR 0 2
 784: PUSH
 785: LD_INT 0
 787: GREATER
 788: IFFALSE 810
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PPUSH
 804: CALL_OW 52
// end else
 808: GO 825
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 810: LD_EXP 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 825: LD_STRING CyrusIn06
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 943
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 58
 868: PUSH
 869: EMPTY
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 882: LD_ADDR_EXP 4
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 4971 0 2
 897: ST_TO_ADDR
// if veh > 0 then
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 0
 905: GREATER
 906: IFFALSE 928
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PPUSH
 922: CALL_OW 52
// end else
 926: GO 943
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 928: LD_EXP 4
 932: PPUSH
 933: LD_INT 2
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 943: LD_STRING FrankIn06
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 30
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 959: LD_ADDR_VAR 0 2
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1000: LD_ADDR_EXP 5
1004: PUSH
1005: LD_STRING Frank
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 4971 0 2
1015: ST_TO_ADDR
// if veh > 0 then
1016: LD_VAR 0 2
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: IFFALSE 1046
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1026: LD_EXP 5
1030: PPUSH
1031: LD_VAR 0 2
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PPUSH
1040: CALL_OW 52
// end else
1044: GO 1061
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1046: LD_EXP 5
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1061: LD_STRING BrownIn06
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1179
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 22
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 58
1104: PUSH
1105: EMPTY
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 69
1117: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1118: LD_ADDR_EXP 6
1122: PUSH
1123: LD_STRING Brown
1125: PPUSH
1126: LD_INT 1
1128: PPUSH
1129: CALL 4971 0 2
1133: ST_TO_ADDR
// if veh > 0 then
1134: LD_VAR 0 2
1138: PUSH
1139: LD_INT 0
1141: GREATER
1142: IFFALSE 1164
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1144: LD_EXP 6
1148: PPUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 52
// end else
1162: GO 1179
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1164: LD_EXP 6
1168: PPUSH
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1179: LD_STRING DonaldsonIn06
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 30
1189: PUSH
1190: LD_INT 1
1192: EQUAL
1193: IFFALSE 1297
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1236: LD_ADDR_EXP 7
1240: PUSH
1241: LD_STRING Donaldson
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 4971 0 2
1251: ST_TO_ADDR
// if veh > 0 then
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 0
1259: GREATER
1260: IFFALSE 1282
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1262: LD_EXP 7
1266: PPUSH
1267: LD_VAR 0 2
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 52
// end else
1280: GO 1297
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1282: LD_EXP 7
1286: PPUSH
1287: LD_INT 2
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1297: LD_STRING GladstoneIn06
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 30
1307: PUSH
1308: LD_INT 1
1310: EQUAL
1311: IFFALSE 1415
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_INT 22
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 21
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 58
1340: PUSH
1341: EMPTY
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 69
1353: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1354: LD_ADDR_EXP 8
1358: PUSH
1359: LD_STRING Gladstone
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL 4971 0 2
1369: ST_TO_ADDR
// if veh > 0 then
1370: LD_VAR 0 2
1374: PUSH
1375: LD_INT 0
1377: GREATER
1378: IFFALSE 1400
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// end else
1398: GO 1415
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 49
// end ; end ; end ;
1415: LD_VAR 0 1
1419: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1420: LD_INT 0
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_STRING 06_VehiclesIn06_1
1434: PPUSH
1435: EMPTY
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// uc_side = 1 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if vehicles > 0 then
1450: LD_VAR 0 5
1454: PUSH
1455: LD_INT 0
1457: GREATER
1458: IFFALSE 1676
// begin for i := 1 to vehicles do
1460: LD_ADDR_VAR 0 2
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 5
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1674
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_VAR 0 5
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: ARRAY
1513: PUSH
1514: LD_INT 2
1516: ARRAY
1517: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 3
1536: ARRAY
1537: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1538: LD_ADDR_OWVAR 38
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1558: LD_ADDR_OWVAR 40
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 5
1576: ARRAY
1577: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1578: LD_ADDR_OWVAR 41
1582: PUSH
1583: LD_INT 40
1585: ST_TO_ADDR
// veh = CreateVehicle ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: CALL_OW 45
1595: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1596: LD_VAR 0 4
1600: PPUSH
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1623: LD_OWVAR 40
1627: PUSH
1628: LD_INT 12
1630: EQUAL
1631: IFFALSE 1672
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 7
1666: ARRAY
1667: PPUSH
1668: CALL_OW 291
// end ;
1672: GO 1475
1674: POP
1675: POP
// end ; end ;
1676: LD_VAR 0 1
1680: RET
// export function PrepareOthers ; var i , veh ; begin
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
// uc_side = 1 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// uc_nation = 1 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1702: LD_ADDR_EXP 11
1706: PUSH
1707: LD_STRING OthersIn06
1709: PPUSH
1710: CALL_OW 31
1714: ST_TO_ADDR
// for i in others do
1715: LD_ADDR_VAR 0 2
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: FOR_IN
1726: IFFALSE 1816
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1728: LD_ADDR_VAR 0 3
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 21
1745: PUSH
1746: LD_INT 2
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 58
1755: PUSH
1756: EMPTY
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: ST_TO_ADDR
// if veh > 0 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1799
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1779: LD_VAR 0 2
1783: PPUSH
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 52
// end else
1797: GO 1814
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 2
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// end ; end ;
1814: GO 1725
1816: POP
1817: POP
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
// uc_side = 1 ;
1828: LD_ADDR_OWVAR 20
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// uc_nation = 0 ;
1836: LD_ADDR_OWVAR 21
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1844: LD_ADDR_EXP 12
1848: PUSH
1849: LD_STRING ApeIn06
1851: PPUSH
1852: CALL_OW 31
1856: ST_TO_ADDR
// for i in ape do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_EXP 12
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1887
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
1885: GO 1867
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 1
1893: RET
// export function PrepareDenis ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_STRING Denis
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL 4971 0 2
1928: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1929: LD_EXP 9
1933: PPUSH
1934: LD_INT 13
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1944: LD_EXP 9
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1956: LD_EXP 9
1960: PPUSH
1961: LD_INT 750
1963: PPUSH
1964: CALL_OW 234
// end ;
1968: LD_VAR 0 1
1972: RET
// export function HarrisonSupport ; var un , veh ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// uc_nation = 1 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// vc_engine = 1 ;
1994: LD_ADDR_OWVAR 39
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_control = 1 ;
2002: LD_ADDR_OWVAR 38
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2010: LD_ADDR_OWVAR 40
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_OWVAR 67
2033: ARRAY
2034: ST_TO_ADDR
// vc_chassis = 2 ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// veh = CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
// hc_class := 2 ;
2080: LD_ADDR_OWVAR 28
2084: PUSH
2085: LD_INT 2
2087: ST_TO_ADDR
// hc_sex := sex_male ;
2088: LD_ADDR_OWVAR 27
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2096: LD_ADDR_OWVAR 33
2100: PUSH
2101: LD_STRING SecondCharsGal
2103: ST_TO_ADDR
// hc_face_number := 52 ;
2104: LD_ADDR_OWVAR 34
2108: PUSH
2109: LD_INT 52
2111: ST_TO_ADDR
// hc_name := Craig Brown ;
2112: LD_ADDR_OWVAR 26
2116: PUSH
2117: LD_STRING Craig Brown
2119: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2120: LD_ADDR_OWVAR 29
2124: PUSH
2125: LD_INT 10
2127: PUSH
2128: LD_INT 10
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2135: LD_ADDR_OWVAR 30
2139: PUSH
2140: LD_INT 0
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 0
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2158: LD_ADDR_OWVAR 31
2162: PUSH
2163: LD_INT 2
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 0
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2181: LD_ADDR_EXP 17
2185: PUSH
2186: CALL_OW 44
2190: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2191: LD_EXP 17
2195: PPUSH
2196: LD_VAR 0 3
2200: PPUSH
2201: CALL_OW 52
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 2
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 1 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// hc_sex := sex_female ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 2
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 45 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 45
2334: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2335: LD_ADDR_OWVAR 29
2339: PUSH
2340: LD_INT 11
2342: PUSH
2343: LD_INT 10
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2350: LD_ADDR_OWVAR 26
2354: PUSH
2355: LD_STRING Ingrid Jonsson
2357: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 3
2388: PUSH
2389: LD_INT 1
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2404: LD_ADDR_EXP 18
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2414: LD_EXP 18
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2428: LD_VAR 0 3
2432: PPUSH
2433: LD_INT 45
2435: PPUSH
2436: CALL_OW 240
// end ;
2440: LD_VAR 0 1
2444: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
2451: PPUSH
// j = 0 ;
2452: LD_ADDR_VAR 0 3
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2460: LD_INT 35
2462: PPUSH
2463: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 21
2484: PUSH
2485: LD_INT 1
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 2
2494: PUSH
2495: LD_INT 25
2497: PUSH
2498: LD_INT 1
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 25
2507: PUSH
2508: LD_INT 2
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 25
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 4
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PPUSH
2547: CALL_OW 69
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2679
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2555: LD_INT 22
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: LD_INT 21
2570: PUSH
2571: LD_INT 1
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: LD_INT 21
2580: PUSH
2581: LD_INT 2
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 21
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PUSH
2598: LD_INT 59
2600: PUSH
2601: EMPTY
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 91
2613: PUSH
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 25
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: PPUSH
2632: CALL_OW 69
2636: NOT
2637: PUSH
2638: LD_VAR 0 2
2642: PPUSH
2643: LD_EXP 1
2647: PPUSH
2648: CALL_OW 296
2652: PUSH
2653: LD_INT 15
2655: LESS
2656: AND
2657: IFFALSE 2677
// begin tmp = i ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 2
2668: ST_TO_ADDR
// j = 1 ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// end ; end ;
2677: GO 2552
2679: POP
2680: POP
// until j = 1 ;
2681: LD_VAR 0 3
2685: PUSH
2686: LD_INT 1
2688: EQUAL
2689: IFFALSE 2460
// blockSpawn = 1 ;
2691: LD_ADDR_EXP 29
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// uc_side = 4 ;
2699: LD_ADDR_OWVAR 20
2703: PUSH
2704: LD_INT 4
2706: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2707: LD_ADDR_EXP 15
2711: PUSH
2712: LD_STRING Joan
2714: PPUSH
2715: LD_INT 0
2717: PPUSH
2718: CALL 4971 0 2
2722: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2723: LD_EXP 15
2727: PPUSH
2728: LD_VAR 0 4
2732: PPUSH
2733: CALL_OW 250
2737: PPUSH
2738: LD_VAR 0 4
2742: PPUSH
2743: CALL_OW 251
2747: PPUSH
2748: LD_INT 5
2750: PPUSH
2751: LD_INT 1
2753: PPUSH
2754: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2758: LD_EXP 15
2762: PPUSH
2763: LD_INT 250
2765: PPUSH
2766: CALL_OW 234
// InGameOn ;
2770: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2774: LD_EXP 15
2778: PPUSH
2779: CALL_OW 87
// wait ( 0 0$2 ) ;
2783: LD_INT 70
2785: PPUSH
2786: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2790: LD_VAR 0 4
2794: PPUSH
2795: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2799: LD_VAR 0 4
2803: PPUSH
2804: CALL_OW 122
// wait ( 0 0$1 ) ;
2808: LD_INT 35
2810: PPUSH
2811: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2815: LD_VAR 0 4
2819: PPUSH
2820: LD_EXP 15
2824: PPUSH
2825: CALL_OW 112
// wait ( 0 0$2 ) ;
2829: LD_INT 70
2831: PPUSH
2832: CALL_OW 67
// DialogueOn ;
2836: CALL_OW 6
// if tmp = JMM then
2840: LD_VAR 0 4
2844: PUSH
2845: LD_EXP 1
2849: EQUAL
2850: IFFALSE 2999
// begin ComTurnUnit ( JMM , Joan ) ;
2852: LD_EXP 1
2856: PPUSH
2857: LD_EXP 15
2861: PPUSH
2862: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2866: LD_EXP 1
2870: PPUSH
2871: LD_STRING D5b-JMM-1
2873: PPUSH
2874: CALL_OW 88
// DialogueOff ;
2878: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2882: LD_EXP 15
2886: PPUSH
2887: LD_INT 500
2889: PPUSH
2890: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2894: LD_EXP 15
2898: PPUSH
2899: LD_EXP 1
2903: PPUSH
2904: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2908: LD_EXP 1
2912: PPUSH
2913: LD_EXP 15
2917: PPUSH
2918: CALL_OW 119
// wait ( 0 0$1 ) ;
2922: LD_INT 35
2924: PPUSH
2925: CALL_OW 67
// DialogueOn ;
2929: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2933: LD_EXP 15
2937: PPUSH
2938: LD_STRING D5b-Joan-1
2940: PPUSH
2941: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2945: LD_EXP 1
2949: PPUSH
2950: LD_STRING D5b-JMM-2
2952: PPUSH
2953: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2957: LD_EXP 15
2961: PPUSH
2962: LD_STRING D5b-Joan-2
2964: PPUSH
2965: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2969: LD_EXP 1
2973: PPUSH
2974: LD_STRING D5b-JMM-3
2976: PPUSH
2977: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2981: LD_EXP 15
2985: PPUSH
2986: LD_STRING D5b-Joan-3
2988: PPUSH
2989: CALL_OW 88
// DialogueOff ;
2993: CALL_OW 7
// end else
2997: GO 3334
// begin ComTurnUnit ( tmp , Joan ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: LD_EXP 15
3008: PPUSH
3009: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3013: LD_VAR 0 4
3017: PPUSH
3018: LD_STRING D5a-Sol1-1
3020: PPUSH
3021: CALL_OW 88
// DialogueOff ;
3025: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3029: LD_EXP 15
3033: PPUSH
3034: LD_INT 500
3036: PPUSH
3037: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3041: LD_EXP 15
3045: PPUSH
3046: LD_VAR 0 4
3050: PPUSH
3051: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3055: LD_VAR 0 4
3059: PPUSH
3060: LD_EXP 15
3064: PPUSH
3065: CALL_OW 119
// wait ( 0 0$1 ) ;
3069: LD_INT 35
3071: PPUSH
3072: CALL_OW 67
// DialogueOn ;
3076: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3080: LD_EXP 15
3084: PPUSH
3085: LD_STRING D5a-Joan-1
3087: PPUSH
3088: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_STRING D5a-Sol1-2
3099: PPUSH
3100: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_STRING D5a-Joan-2
3111: PPUSH
3112: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3116: LD_VAR 0 4
3120: PPUSH
3121: LD_STRING D5a-Sol1-3
3123: PPUSH
3124: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3128: LD_EXP 15
3132: PPUSH
3133: LD_STRING D5a-Joan-3
3135: PPUSH
3136: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3140: LD_VAR 0 4
3144: PPUSH
3145: LD_STRING D5a-Sol1-4
3147: PPUSH
3148: CALL_OW 88
// DialogueOff ;
3152: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3156: LD_EXP 1
3160: PPUSH
3161: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3165: LD_EXP 1
3169: PPUSH
3170: CALL_OW 122
// wait ( 0 0$1 ) ;
3174: LD_INT 35
3176: PPUSH
3177: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3181: LD_INT 35
3183: PPUSH
3184: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3188: LD_EXP 15
3192: PUSH
3193: LD_VAR 0 4
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PPUSH
3202: LD_EXP 1
3206: PPUSH
3207: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3211: LD_EXP 15
3215: PPUSH
3216: LD_EXP 1
3220: PPUSH
3221: CALL_OW 296
3225: PUSH
3226: LD_INT 5
3228: LESS
3229: IFFALSE 3181
// ComTurnUnit ( Joan , JMM ) ;
3231: LD_EXP 15
3235: PPUSH
3236: LD_EXP 1
3240: PPUSH
3241: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3245: LD_EXP 1
3249: PPUSH
3250: LD_EXP 15
3254: PPUSH
3255: CALL_OW 119
// wait ( 0 0$1 ) ;
3259: LD_INT 35
3261: PPUSH
3262: CALL_OW 67
// DialogueOn ;
3266: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3270: LD_EXP 15
3274: PPUSH
3275: LD_STRING D5a-Joan-4
3277: PPUSH
3278: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3282: LD_EXP 1
3286: PPUSH
3287: LD_STRING D5a-JMM-4
3289: PPUSH
3290: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3294: LD_EXP 15
3298: PPUSH
3299: LD_STRING D5a-Joan-5
3301: PPUSH
3302: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_STRING D5a-JMM-5
3313: PPUSH
3314: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3318: LD_EXP 15
3322: PPUSH
3323: LD_STRING D5a-Joan-6
3325: PPUSH
3326: CALL_OW 88
// DialogueOff ;
3330: CALL_OW 7
// end ; DialogueOn ;
3334: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3338: LD_EXP 1
3342: PPUSH
3343: LD_STRING D6-JMM-1
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D6-Joan-1
3357: PPUSH
3358: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3362: LD_EXP 1
3366: PPUSH
3367: LD_STRING D6-JMM-2
3369: PPUSH
3370: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3374: LD_EXP 15
3378: PPUSH
3379: LD_STRING D6-Joan-2
3381: PPUSH
3382: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3386: LD_EXP 1
3390: PPUSH
3391: LD_STRING D6-JMM-3
3393: PPUSH
3394: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3398: LD_EXP 15
3402: PPUSH
3403: LD_STRING D6-Joan-3
3405: PPUSH
3406: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3410: LD_EXP 1
3414: PPUSH
3415: LD_STRING D6-JMM-4
3417: PPUSH
3418: CALL_OW 88
// DialogueOff ;
3422: CALL_OW 7
// InGameOff ;
3426: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3430: LD_EXP 15
3434: PPUSH
3435: LD_INT 1
3437: PPUSH
3438: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3442: LD_STRING MJ
3444: PPUSH
3445: CALL_OW 337
// JoanStatus = 1 ;
3449: LD_ADDR_EXP 16
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// blockSpawn = 0 ;
3457: LD_ADDR_EXP 29
3461: PUSH
3462: LD_INT 0
3464: ST_TO_ADDR
// end ;
3465: LD_VAR 0 1
3469: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3470: LD_INT 0
3472: PPUSH
3473: PPUSH
// repeat wait ( 0 0$7 ) ;
3474: LD_INT 245
3476: PPUSH
3477: CALL_OW 67
// until blockSpawn = 0 ;
3481: LD_EXP 29
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: IFFALSE 3474
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = 1 ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// InitHc ;
3507: CALL_OW 19
// if number = 1 then
3511: LD_VAR 0 1
3515: PUSH
3516: LD_INT 1
3518: EQUAL
3519: IFFALSE 3695
// begin hc_class := 1 ;
3521: LD_ADDR_OWVAR 28
3525: PUSH
3526: LD_INT 1
3528: ST_TO_ADDR
// hc_sex := sex_male ;
3529: LD_ADDR_OWVAR 27
3533: PUSH
3534: LD_INT 1
3536: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3537: LD_ADDR_OWVAR 33
3541: PUSH
3542: LD_STRING AmGalRemake
3544: ST_TO_ADDR
// hc_face_number := 7 ;
3545: LD_ADDR_OWVAR 34
3549: PUSH
3550: LD_INT 7
3552: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING Bobby Jordan
3560: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3561: LD_ADDR_OWVAR 29
3565: PUSH
3566: LD_INT 9
3568: PUSH
3569: LD_INT 11
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3576: LD_ADDR_OWVAR 30
3580: PUSH
3581: LD_INT 1
3583: PUSH
3584: LD_INT 0
3586: PUSH
3587: LD_INT 0
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3599: LD_ADDR_OWVAR 31
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: ST_TO_ADDR
// un = CreateHuman ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: CALL_OW 44
3631: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3632: LD_VAR 0 3
3636: PPUSH
3637: LD_INT 12
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: CALL_OW 49
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: CALL_OW 87
// DialogueOn ;
3663: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3667: LD_VAR 0 3
3671: PPUSH
3672: LD_STRING D11b-Sol3-1
3674: PPUSH
3675: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3679: LD_EXP 1
3683: PPUSH
3684: LD_STRING D11b-JMM-1
3686: PPUSH
3687: CALL_OW 88
// DialogueOff ;
3691: CALL_OW 7
// end ; if number = 2 then
3695: LD_VAR 0 1
3699: PUSH
3700: LD_INT 2
3702: EQUAL
3703: IFFALSE 3879
// begin hc_class := 3 ;
3705: LD_ADDR_OWVAR 28
3709: PUSH
3710: LD_INT 3
3712: ST_TO_ADDR
// hc_sex := sex_male ;
3713: LD_ADDR_OWVAR 27
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3721: LD_ADDR_OWVAR 33
3725: PUSH
3726: LD_STRING SecondCharsGal
3728: ST_TO_ADDR
// hc_face_number := 55 ;
3729: LD_ADDR_OWVAR 34
3733: PUSH
3734: LD_INT 55
3736: ST_TO_ADDR
// hc_name := George McCarthy ;
3737: LD_ADDR_OWVAR 26
3741: PUSH
3742: LD_STRING George McCarthy
3744: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3745: LD_ADDR_OWVAR 29
3749: PUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 10
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3760: LD_ADDR_OWVAR 30
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: LD_INT 0
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 0
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3783: LD_ADDR_OWVAR 31
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: LD_INT 2
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// un = CreateHuman ;
3806: LD_ADDR_VAR 0 3
3810: PUSH
3811: CALL_OW 44
3815: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3816: LD_VAR 0 3
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: LD_INT 1
3826: PPUSH
3827: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3831: LD_VAR 0 3
3835: PPUSH
3836: CALL_OW 87
// wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// DialogueOn ;
3847: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3851: LD_VAR 0 3
3855: PPUSH
3856: LD_STRING D11d-Sol4-1
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING D11d-JMM-1
3870: PPUSH
3871: CALL_OW 88
// DialogueOff ;
3875: CALL_OW 7
// end ; if number = 4 then
3879: LD_VAR 0 1
3883: PUSH
3884: LD_INT 4
3886: EQUAL
3887: IFFALSE 4051
// begin hc_class := 3 ;
3889: LD_ADDR_OWVAR 28
3893: PUSH
3894: LD_INT 3
3896: ST_TO_ADDR
// hc_sex := sex_female ;
3897: LD_ADDR_OWVAR 27
3901: PUSH
3902: LD_INT 2
3904: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3905: LD_ADDR_OWVAR 33
3909: PUSH
3910: LD_STRING SecondCharsGal
3912: ST_TO_ADDR
// hc_face_number := 46 ;
3913: LD_ADDR_OWVAR 34
3917: PUSH
3918: LD_INT 46
3920: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3921: LD_ADDR_OWVAR 26
3925: PUSH
3926: LD_STRING Sylvia Creak
3928: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
3929: LD_ADDR_OWVAR 29
3933: PUSH
3934: LD_INT 10
3936: PUSH
3937: LD_INT 9
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
3944: LD_ADDR_OWVAR 30
3948: PUSH
3949: LD_INT 0
3951: PUSH
3952: LD_INT 1
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3967: LD_ADDR_OWVAR 31
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: ST_TO_ADDR
// un = CreateHuman ;
3990: LD_ADDR_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4000: LD_VAR 0 3
4004: PPUSH
4005: LD_INT 12
4007: PPUSH
4008: LD_INT 1
4010: PPUSH
4011: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4015: LD_VAR 0 3
4019: PPUSH
4020: CALL_OW 87
// wait ( 0 0$1 ) ;
4024: LD_INT 35
4026: PPUSH
4027: CALL_OW 67
// DialogueOn ;
4031: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_STRING D11e-FSol4-1
4042: PPUSH
4043: CALL_OW 88
// DialogueOff ;
4047: CALL_OW 7
// end ; if number = 5 then
4051: LD_VAR 0 1
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: IFFALSE 4235
// begin hc_class := 1 ;
4061: LD_ADDR_OWVAR 28
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// hc_sex := sex_female ;
4069: LD_ADDR_OWVAR 27
4073: PUSH
4074: LD_INT 2
4076: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4077: LD_ADDR_OWVAR 33
4081: PUSH
4082: LD_STRING SecondCharsGal
4084: ST_TO_ADDR
// hc_face_number := 37 ;
4085: LD_ADDR_OWVAR 34
4089: PUSH
4090: LD_INT 37
4092: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4093: LD_ADDR_OWVAR 26
4097: PUSH
4098: LD_STRING Margherite Simpson
4100: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4101: LD_ADDR_OWVAR 29
4105: PUSH
4106: LD_INT 11
4108: PUSH
4109: LD_INT 10
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4116: LD_ADDR_OWVAR 30
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: LD_INT 0
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4139: LD_ADDR_OWVAR 31
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: LD_INT 1
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: ST_TO_ADDR
// un = CreateHuman ;
4162: LD_ADDR_VAR 0 3
4166: PUSH
4167: CALL_OW 44
4171: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 12
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: CALL_OW 87
// wait ( 0 0$1 ) ;
4196: LD_INT 35
4198: PPUSH
4199: CALL_OW 67
// DialogueOn ;
4203: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_STRING D11c-FSol3-1
4214: PPUSH
4215: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4219: LD_EXP 1
4223: PPUSH
4224: LD_STRING D11c-JMM-1
4226: PPUSH
4227: CALL_OW 88
// DialogueOff ;
4231: CALL_OW 7
// end ; if number = 6 then
4235: LD_VAR 0 1
4239: PUSH
4240: LD_INT 6
4242: EQUAL
4243: IFFALSE 4417
// begin hc_class := 1 ;
4245: LD_ADDR_OWVAR 28
4249: PUSH
4250: LD_INT 1
4252: ST_TO_ADDR
// hc_sex := sex_male ;
4253: LD_ADDR_OWVAR 27
4257: PUSH
4258: LD_INT 1
4260: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4261: LD_ADDR_OWVAR 33
4265: PUSH
4266: LD_STRING AmGalRemake
4268: ST_TO_ADDR
// hc_face_number := 1 ;
4269: LD_ADDR_OWVAR 34
4273: PUSH
4274: LD_INT 1
4276: ST_TO_ADDR
// hc_name := Charles Brown ;
4277: LD_ADDR_OWVAR 26
4281: PUSH
4282: LD_STRING Charles Brown
4284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4285: LD_ADDR_OWVAR 29
4289: PUSH
4290: LD_INT 12
4292: PUSH
4293: LD_INT 11
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4300: LD_ADDR_OWVAR 30
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4323: LD_ADDR_OWVAR 31
4327: PUSH
4328: LD_INT 3
4330: PUSH
4331: LD_INT 0
4333: PUSH
4334: LD_INT 1
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: ST_TO_ADDR
// un = CreateHuman ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 87
// wait ( 0 0$1 ) ;
4380: LD_INT 35
4382: PPUSH
4383: CALL_OW 67
// DialogueOn ;
4387: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_STRING D4-Sol1-5
4398: PPUSH
4399: CALL_OW 88
// DialogueOff ;
4403: CALL_OW 7
// tempCharles = un ;
4407: LD_ADDR_EXP 13
4411: PUSH
4412: LD_VAR 0 3
4416: ST_TO_ADDR
// end ; if number = 7 then
4417: LD_VAR 0 1
4421: PUSH
4422: LD_INT 7
4424: EQUAL
4425: IFFALSE 4589
// begin hc_class := 1 ;
4427: LD_ADDR_OWVAR 28
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// hc_sex := sex_female ;
4435: LD_ADDR_OWVAR 27
4439: PUSH
4440: LD_INT 2
4442: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4443: LD_ADDR_OWVAR 33
4447: PUSH
4448: LD_STRING AmGalRemake
4450: ST_TO_ADDR
// hc_face_number := 2 ;
4451: LD_ADDR_OWVAR 34
4455: PUSH
4456: LD_INT 2
4458: ST_TO_ADDR
// hc_name := Johanna Holland ;
4459: LD_ADDR_OWVAR 26
4463: PUSH
4464: LD_STRING Johanna Holland
4466: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4467: LD_ADDR_OWVAR 29
4471: PUSH
4472: LD_INT 10
4474: PUSH
4475: LD_INT 10
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4482: LD_ADDR_OWVAR 30
4486: PUSH
4487: LD_INT 1
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: LD_INT 1
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4505: LD_ADDR_OWVAR 31
4509: PUSH
4510: LD_INT 1
4512: PUSH
4513: LD_INT 0
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// un = CreateHuman ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: CALL_OW 44
4537: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4538: LD_VAR 0 3
4542: PPUSH
4543: LD_INT 12
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4553: LD_VAR 0 3
4557: PPUSH
4558: CALL_OW 87
// wait ( 0 0$1 ) ;
4562: LD_INT 35
4564: PPUSH
4565: CALL_OW 67
// DialogueOn ;
4569: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_STRING D11a-FSol2-1
4580: PPUSH
4581: CALL_OW 88
// DialogueOff ;
4585: CALL_OW 7
// end ; end ; end_of_file
4589: LD_VAR 0 2
4593: RET
// export function PrepareRussian ; var i ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4598: LD_INT 3
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_EXP 34
4611: PPUSH
4612: LD_EXP 35
4616: PPUSH
4617: CALL_OW 12
4621: PPUSH
4622: LD_INT 2
4624: PPUSH
4625: LD_INT 4
4627: PPUSH
4628: CALL 5241 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4632: LD_INT 3
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 8
4640: PPUSH
4641: LD_EXP 34
4645: PPUSH
4646: LD_EXP 35
4650: PPUSH
4651: CALL_OW 12
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 4
4661: PPUSH
4662: CALL 5241 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4666: LD_INT 3
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: LD_INT 67
4674: PPUSH
4675: LD_EXP 34
4679: PPUSH
4680: LD_EXP 35
4684: PPUSH
4685: CALL_OW 12
4689: PPUSH
4690: LD_INT 1
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL 5241 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4700: LD_INT 3
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: LD_INT 21
4708: PPUSH
4709: LD_EXP 34
4713: PPUSH
4714: LD_EXP 35
4718: PPUSH
4719: CALL_OW 12
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: LD_INT 6
4729: PPUSH
4730: CALL 5241 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4734: LD_INT 3
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: LD_INT 17
4742: PPUSH
4743: LD_EXP 34
4747: PPUSH
4748: LD_EXP 35
4752: PPUSH
4753: CALL_OW 12
4757: PPUSH
4758: LD_INT 3
4760: PPUSH
4761: LD_INT 6
4763: PPUSH
4764: CALL 5241 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4768: LD_INT 3
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 32
4776: PPUSH
4777: LD_EXP 34
4781: PPUSH
4782: LD_EXP 35
4786: PPUSH
4787: CALL_OW 12
4791: PPUSH
4792: LD_INT 4
4794: PPUSH
4795: LD_INT 2
4797: PPUSH
4798: CALL 5241 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4802: LD_ADDR_VAR 0 2
4806: PUSH
4807: LD_INT 22
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 21
4819: PUSH
4820: LD_INT 3
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 32
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 69
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4888
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4850: LD_INT 3
4852: PPUSH
4853: LD_INT 3
4855: PPUSH
4856: LD_VAR 0 2
4860: PPUSH
4861: LD_EXP 34
4865: PPUSH
4866: LD_EXP 35
4870: PPUSH
4871: CALL_OW 12
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: LD_INT 1
4881: PPUSH
4882: CALL 5241 0 6
4886: GO 4847
4888: POP
4889: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: LD_INT 22
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 21
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 30
4917: PUSH
4918: LD_INT 31
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: PPUSH
4930: CALL_OW 69
4934: PUSH
4935: FOR_IN
4936: IFFALSE 4964
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4938: LD_EXP 34
4942: PPUSH
4943: LD_EXP 35
4947: PPUSH
4948: CALL_OW 12
4952: PPUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: CALL 5351 0 2
4962: GO 4935
4964: POP
4965: POP
// end ; end_of_file
4966: LD_VAR 0 1
4970: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
// if exist_mode then
4975: LD_VAR 0 2
4979: IFFALSE 5004
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4981: LD_ADDR_VAR 0 4
4985: PUSH
4986: LD_EXP 42
4990: PUSH
4991: LD_VAR 0 1
4995: STR
4996: PPUSH
4997: CALL_OW 34
5001: ST_TO_ADDR
// end else
5002: GO 5019
// begin unit := NewCharacter ( ident ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 1
5013: PPUSH
5014: CALL_OW 25
5018: ST_TO_ADDR
// end ; result := unit ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 4
5028: ST_TO_ADDR
// end ;
5029: LD_VAR 0 3
5033: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5034: LD_INT 0
5036: PPUSH
5037: PPUSH
5038: PPUSH
// rnd = rand ( 1 , characters ) ;
5039: LD_ADDR_VAR 0 6
5043: PUSH
5044: LD_INT 1
5046: PPUSH
5047: LD_VAR 0 1
5051: PPUSH
5052: CALL_OW 12
5056: ST_TO_ADDR
// for i = 1 to characters do
5057: LD_ADDR_VAR 0 5
5061: PUSH
5062: DOUBLE
5063: LD_INT 1
5065: DEC
5066: ST_TO_ADDR
5067: LD_VAR 0 1
5071: PUSH
5072: FOR_TO
5073: IFFALSE 5183
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5075: LD_VAR 0 5
5079: PUSH
5080: LD_VAR 0 6
5084: EQUAL
5085: PUSH
5086: LD_VAR 0 1
5090: PUSH
5091: LD_VAR 0 5
5095: ARRAY
5096: PPUSH
5097: CALL_OW 258
5101: PUSH
5102: LD_INT 1
5104: EQUAL
5105: AND
5106: IFFALSE 5128
// Say ( characters [ i ] , dialogMID ) ;
5108: LD_VAR 0 1
5112: PUSH
5113: LD_VAR 0 5
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 2
5123: PPUSH
5124: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5128: LD_VAR 0 5
5132: PUSH
5133: LD_VAR 0 6
5137: EQUAL
5138: PUSH
5139: LD_VAR 0 1
5143: PUSH
5144: LD_VAR 0 5
5148: ARRAY
5149: PPUSH
5150: CALL_OW 258
5154: PUSH
5155: LD_INT 2
5157: EQUAL
5158: AND
5159: IFFALSE 5181
// Say ( characters [ i ] , dialogFID ) ;
5161: LD_VAR 0 1
5165: PUSH
5166: LD_VAR 0 5
5170: ARRAY
5171: PPUSH
5172: LD_VAR 0 3
5176: PPUSH
5177: CALL_OW 88
// end ;
5181: GO 5072
5183: POP
5184: POP
// end ;
5185: LD_VAR 0 4
5189: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5190: LD_INT 0
5192: PPUSH
5193: PPUSH
// for i in charactersList do
5194: LD_ADDR_VAR 0 4
5198: PUSH
5199: LD_VAR 0 1
5203: PUSH
5204: FOR_IN
5205: IFFALSE 5234
// begin if IsOk ( i ) then
5207: LD_VAR 0 4
5211: PPUSH
5212: CALL_OW 302
5216: IFFALSE 5232
// SaveCharacters ( i , ident ) ;
5218: LD_VAR 0 4
5222: PPUSH
5223: LD_VAR 0 2
5227: PPUSH
5228: CALL_OW 38
// end ;
5232: GO 5204
5234: POP
5235: POP
// end ;
5236: LD_VAR 0 3
5240: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5241: LD_INT 0
5243: PPUSH
5244: PPUSH
5245: PPUSH
5246: PPUSH
// for i = 1 to count do
5247: LD_ADDR_VAR 0 8
5251: PUSH
5252: DOUBLE
5253: LD_INT 1
5255: DEC
5256: ST_TO_ADDR
5257: LD_VAR 0 6
5261: PUSH
5262: FOR_TO
5263: IFFALSE 5344
// begin uc_side = side ;
5265: LD_ADDR_OWVAR 20
5269: PUSH
5270: LD_VAR 0 1
5274: ST_TO_ADDR
// uc_nation = nation ;
5275: LD_ADDR_OWVAR 21
5279: PUSH
5280: LD_VAR 0 2
5284: ST_TO_ADDR
// hc_gallery =  ;
5285: LD_ADDR_OWVAR 33
5289: PUSH
5290: LD_STRING 
5292: ST_TO_ADDR
// hc_name =  ;
5293: LD_ADDR_OWVAR 26
5297: PUSH
5298: LD_STRING 
5300: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5301: LD_INT 0
5303: PPUSH
5304: LD_VAR 0 5
5308: PPUSH
5309: LD_VAR 0 4
5313: PPUSH
5314: CALL_OW 380
// un = CreateHuman ;
5318: LD_ADDR_VAR 0 10
5322: PUSH
5323: CALL_OW 44
5327: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5328: LD_VAR 0 10
5332: PPUSH
5333: LD_VAR 0 3
5337: PPUSH
5338: CALL_OW 52
// end ;
5342: GO 5262
5344: POP
5345: POP
// end ;
5346: LD_VAR 0 7
5350: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5351: LD_INT 0
5353: PPUSH
5354: PPUSH
5355: PPUSH
// uc_side := GetSide ( b ) ;
5356: LD_ADDR_OWVAR 20
5360: PUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL_OW 255
5370: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5371: LD_ADDR_OWVAR 21
5375: PUSH
5376: LD_VAR 0 2
5380: PPUSH
5381: CALL_OW 248
5385: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5386: LD_INT 0
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5401: LD_ADDR_VAR 0 5
5405: PUSH
5406: LD_VAR 0 2
5410: PPUSH
5411: CALL_OW 254
5415: PUSH
5416: LD_INT 3
5418: MINUS
5419: ST_TO_ADDR
// if dir < 0 then
5420: LD_VAR 0 5
5424: PUSH
5425: LD_INT 0
5427: LESS
5428: IFFALSE 5444
// dir := 6 + dir ;
5430: LD_ADDR_VAR 0 5
5434: PUSH
5435: LD_INT 6
5437: PUSH
5438: LD_VAR 0 5
5442: PLUS
5443: ST_TO_ADDR
// un := CreateHuman ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 44
5453: ST_TO_ADDR
// SetDir ( un , dir ) ;
5454: LD_VAR 0 4
5458: PPUSH
5459: LD_VAR 0 5
5463: PPUSH
5464: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5468: LD_VAR 0 4
5472: PPUSH
5473: LD_VAR 0 2
5477: PPUSH
5478: CALL_OW 52
// end ;
5482: LD_VAR 0 3
5486: RET
// export function PrepareDifficulty ; begin
5487: LD_INT 0
5489: PPUSH
// if Difficulty = 1 then
5490: LD_OWVAR 67
5494: PUSH
5495: LD_INT 1
5497: EQUAL
5498: IFFALSE 5516
// begin RuSolMinLevel = 2 ;
5500: LD_ADDR_EXP 34
5504: PUSH
5505: LD_INT 2
5507: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5508: LD_ADDR_EXP 35
5512: PUSH
5513: LD_INT 5
5515: ST_TO_ADDR
// end ; if Difficulty = 2 then
5516: LD_OWVAR 67
5520: PUSH
5521: LD_INT 2
5523: EQUAL
5524: IFFALSE 5542
// begin RuSolMinLevel = 3 ;
5526: LD_ADDR_EXP 34
5530: PUSH
5531: LD_INT 3
5533: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5534: LD_ADDR_EXP 35
5538: PUSH
5539: LD_INT 5
5541: ST_TO_ADDR
// end ; if Difficulty = 3 then
5542: LD_OWVAR 67
5546: PUSH
5547: LD_INT 3
5549: EQUAL
5550: IFFALSE 5568
// begin RuSolMinLevel = 4 ;
5552: LD_ADDR_EXP 34
5556: PUSH
5557: LD_INT 4
5559: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5560: LD_ADDR_EXP 35
5564: PUSH
5565: LD_INT 5
5567: ST_TO_ADDR
// end ; end ;
5568: LD_VAR 0 1
5572: RET
// export function ShowQuery1 ; begin
5573: LD_INT 0
5575: PPUSH
// case query ( QKill ) of 1 :
5576: LD_STRING QKill
5578: PPUSH
5579: CALL_OW 97
5583: PUSH
5584: LD_INT 1
5586: DOUBLE
5587: EQUAL
5588: IFTRUE 5592
5590: GO 5603
5592: POP
// begin result = 1 ;
5593: LD_ADDR_VAR 0 1
5597: PUSH
5598: LD_INT 1
5600: ST_TO_ADDR
// end ; 2 :
5601: GO 5642
5603: LD_INT 2
5605: DOUBLE
5606: EQUAL
5607: IFTRUE 5611
5609: GO 5622
5611: POP
// begin result = 2 ;
5612: LD_ADDR_VAR 0 1
5616: PUSH
5617: LD_INT 2
5619: ST_TO_ADDR
// end ; 3 :
5620: GO 5642
5622: LD_INT 3
5624: DOUBLE
5625: EQUAL
5626: IFTRUE 5630
5628: GO 5641
5630: POP
// begin result = 3 ;
5631: LD_ADDR_VAR 0 1
5635: PUSH
5636: LD_INT 3
5638: ST_TO_ADDR
// end ; end ;
5639: GO 5642
5641: POP
// end ;
5642: LD_VAR 0 1
5646: RET
// export function ShowQuery2 ; begin
5647: LD_INT 0
5649: PPUSH
// case query ( QKill2 ) of 1 :
5650: LD_STRING QKill2
5652: PPUSH
5653: CALL_OW 97
5657: PUSH
5658: LD_INT 1
5660: DOUBLE
5661: EQUAL
5662: IFTRUE 5666
5664: GO 5677
5666: POP
// begin result = 1 ;
5667: LD_ADDR_VAR 0 1
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// end ; 2 :
5675: GO 5697
5677: LD_INT 2
5679: DOUBLE
5680: EQUAL
5681: IFTRUE 5685
5683: GO 5696
5685: POP
// begin result = 2 ;
5686: LD_ADDR_VAR 0 1
5690: PUSH
5691: LD_INT 2
5693: ST_TO_ADDR
// end ; end ;
5694: GO 5697
5696: POP
// end ;
5697: LD_VAR 0 1
5701: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5702: LD_INT 0
5704: PPUSH
5705: PPUSH
5706: PPUSH
5707: PPUSH
// for i = 1 to 72 do
5708: LD_ADDR_VAR 0 5
5712: PUSH
5713: DOUBLE
5714: LD_INT 1
5716: DEC
5717: ST_TO_ADDR
5718: LD_INT 72
5720: PUSH
5721: FOR_TO
5722: IFFALSE 5780
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5724: LD_VAR 0 5
5728: PPUSH
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL_OW 321
5738: PUSH
5739: LD_INT 1
5741: EQUAL
5742: PUSH
5743: LD_VAR 0 5
5747: PPUSH
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 482
5757: PUSH
5758: LD_INT 1
5760: EQUAL
5761: AND
5762: IFFALSE 5778
// AddComResearch ( lab , i ) ;
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_VAR 0 5
5773: PPUSH
5774: CALL_OW 184
5778: GO 5721
5780: POP
5781: POP
// end ;
5782: LD_VAR 0 4
5786: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5787: LD_INT 0
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5794: LD_ADDR_VAR 0 6
5798: PUSH
5799: LD_INT 22
5801: PUSH
5802: LD_VAR 0 1
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 2
5813: PUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 2
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 25
5826: PUSH
5827: LD_INT 16
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 24
5841: PUSH
5842: LD_INT 1000
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 69
5858: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5859: LD_ADDR_VAR 0 4
5863: PUSH
5864: LD_INT 22
5866: PUSH
5867: LD_VAR 0 1
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 21
5878: PUSH
5879: LD_INT 3
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 3
5888: PUSH
5889: LD_INT 24
5891: PUSH
5892: LD_INT 1000
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: PPUSH
5911: CALL_OW 69
5915: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5916: LD_VAR 0 4
5920: PUSH
5921: LD_INT 0
5923: GREATER
5924: PUSH
5925: LD_VAR 0 6
5929: PUSH
5930: LD_INT 0
5932: GREATER
5933: AND
5934: IFFALSE 6000
// begin for i in engineerOk_list do
5936: LD_ADDR_VAR 0 5
5940: PUSH
5941: LD_VAR 0 6
5945: PUSH
5946: FOR_IN
5947: IFFALSE 5998
// begin for j in buildings_list do
5949: LD_ADDR_VAR 0 7
5953: PUSH
5954: LD_VAR 0 4
5958: PUSH
5959: FOR_IN
5960: IFFALSE 5994
// begin AddComExitBuilding ( i ) ;
5962: LD_VAR 0 5
5966: PPUSH
5967: CALL_OW 182
// wait ( 0 0$1 ) ;
5971: LD_INT 35
5973: PPUSH
5974: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5978: LD_VAR 0 5
5982: PPUSH
5983: LD_VAR 0 7
5987: PPUSH
5988: CALL_OW 190
// end ;
5992: GO 5959
5994: POP
5995: POP
// end ;
5996: GO 5946
5998: POP
5999: POP
// end ; if buildings_list = 0 then
6000: LD_VAR 0 4
6004: PUSH
6005: LD_INT 0
6007: EQUAL
6008: IFFALSE 6041
// begin for i in engineerOK_list do
6010: LD_ADDR_VAR 0 5
6014: PUSH
6015: LD_VAR 0 6
6019: PUSH
6020: FOR_IN
6021: IFFALSE 6039
// begin ComEnterUnit ( i , building ) ;
6023: LD_VAR 0 5
6027: PPUSH
6028: LD_VAR 0 2
6032: PPUSH
6033: CALL_OW 120
// end ;
6037: GO 6020
6039: POP
6040: POP
// end ; end ;
6041: LD_VAR 0 3
6045: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6046: LD_INT 0
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6053: LD_ADDR_VAR 0 6
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_VAR 0 1
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: LD_INT 25
6072: PUSH
6073: LD_INT 4
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 69
6088: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6089: LD_ADDR_VAR 0 9
6093: PUSH
6094: LD_VAR 0 3
6098: PPUSH
6099: LD_INT 22
6101: PUSH
6102: LD_VAR 0 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 21
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 24
6126: PUSH
6127: LD_INT 750
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6148: LD_VAR 0 9
6152: PUSH
6153: LD_INT 0
6155: GREATER
6156: PUSH
6157: LD_VAR 0 6
6161: PUSH
6162: LD_INT 0
6164: GREATER
6165: AND
6166: IFFALSE 6293
// begin for i = 1 to damageUnits do
6168: LD_ADDR_VAR 0 7
6172: PUSH
6173: DOUBLE
6174: LD_INT 1
6176: DEC
6177: ST_TO_ADDR
6178: LD_VAR 0 9
6182: PUSH
6183: FOR_TO
6184: IFFALSE 6208
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6186: LD_VAR 0 9
6190: PUSH
6191: LD_VAR 0 7
6195: ARRAY
6196: PPUSH
6197: LD_VAR 0 2
6201: PPUSH
6202: CALL_OW 113
6206: GO 6183
6208: POP
6209: POP
// for i in sci_list do
6210: LD_ADDR_VAR 0 7
6214: PUSH
6215: LD_VAR 0 6
6219: PUSH
6220: FOR_IN
6221: IFFALSE 6289
// begin ComExitBuilding ( i ) ;
6223: LD_VAR 0 7
6227: PPUSH
6228: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6232: LD_ADDR_VAR 0 8
6236: PUSH
6237: LD_VAR 0 2
6241: PPUSH
6242: LD_INT 22
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 70
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6285
// begin AddComHeal ( i , j ) ;
6262: LD_VAR 0 7
6266: PPUSH
6267: LD_VAR 0 8
6271: PPUSH
6272: CALL_OW 188
// wait ( 1 1$0 ) ;
6276: LD_INT 2100
6278: PPUSH
6279: CALL_OW 67
// end ;
6283: GO 6259
6285: POP
6286: POP
// end ;
6287: GO 6220
6289: POP
6290: POP
// end else
6291: GO 6307
// begin AddComEnterUnit ( sci_list , build ) ;
6293: LD_VAR 0 6
6297: PPUSH
6298: LD_VAR 0 4
6302: PPUSH
6303: CALL_OW 180
// end ; end ;
6307: LD_VAR 0 5
6311: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6312: LD_INT 0
6314: PPUSH
6315: PPUSH
6316: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6317: LD_INT 22
6319: PUSH
6320: LD_VAR 0 1
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 21
6331: PUSH
6332: LD_INT 2
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PPUSH
6343: CALL_OW 69
6347: PUSH
6348: LD_VAR 0 3
6352: LESSEQUAL
6353: IFFALSE 6461
// begin for i = 1 to vehCount do
6355: LD_ADDR_VAR 0 9
6359: PUSH
6360: DOUBLE
6361: LD_INT 1
6363: DEC
6364: ST_TO_ADDR
6365: LD_VAR 0 3
6369: PUSH
6370: FOR_TO
6371: IFFALSE 6459
// begin weapon = weaponTab [ i ] ;
6373: LD_ADDR_VAR 0 10
6377: PUSH
6378: LD_VAR 0 4
6382: PUSH
6383: LD_VAR 0 9
6387: ARRAY
6388: ST_TO_ADDR
// if weapon = 44 then
6389: LD_VAR 0 10
6393: PUSH
6394: LD_INT 44
6396: EQUAL
6397: IFFALSE 6428
// begin AddComConstruct ( fabric , 22 , engine , control , weapon ) ;
6399: LD_VAR 0 2
6403: PPUSH
6404: LD_INT 22
6406: PPUSH
6407: LD_VAR 0 5
6411: PPUSH
6412: LD_VAR 0 6
6416: PPUSH
6417: LD_VAR 0 10
6421: PPUSH
6422: CALL_OW 185
// end else
6426: GO 6457
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6428: LD_VAR 0 2
6432: PPUSH
6433: LD_VAR 0 7
6437: PPUSH
6438: LD_VAR 0 5
6442: PPUSH
6443: LD_VAR 0 6
6447: PPUSH
6448: LD_VAR 0 10
6452: PPUSH
6453: CALL_OW 185
// end ; end ;
6457: GO 6370
6459: POP
6460: POP
// end ; end ;
6461: LD_VAR 0 8
6465: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6466: LD_INT 0
6468: PPUSH
6469: PPUSH
6470: PPUSH
6471: PPUSH
6472: PPUSH
// for i := 1 to russianTanks do
6473: LD_ADDR_VAR 0 4
6477: PUSH
6478: DOUBLE
6479: LD_INT 1
6481: DEC
6482: ST_TO_ADDR
6483: LD_EXP 36
6487: PUSH
6488: FOR_TO
6489: IFFALSE 6971
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6491: LD_VAR 0 4
6495: PUSH
6496: LD_INT 5
6498: PUSH
6499: LD_INT 6
6501: PUSH
6502: LD_INT 6
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_OWVAR 67
6514: ARRAY
6515: EQUAL
6516: IFFALSE 6969
// begin repeat wait ( 0 0$1 ) ;
6518: LD_INT 35
6520: PPUSH
6521: CALL_OW 67
// for i in russianTanks do
6525: LD_ADDR_VAR 0 4
6529: PUSH
6530: LD_EXP 36
6534: PUSH
6535: FOR_IN
6536: IFFALSE 6957
// begin if GetLives ( i ) < 659 then
6538: LD_VAR 0 4
6542: PPUSH
6543: CALL_OW 256
6547: PUSH
6548: LD_INT 659
6550: LESS
6551: IFFALSE 6639
// begin tmp = i ;
6553: LD_ADDR_VAR 0 5
6557: PUSH
6558: LD_VAR 0 4
6562: ST_TO_ADDR
// for i := 1 to russianTanks do
6563: LD_ADDR_VAR 0 4
6567: PUSH
6568: DOUBLE
6569: LD_INT 1
6571: DEC
6572: ST_TO_ADDR
6573: LD_EXP 36
6577: PUSH
6578: FOR_TO
6579: IFFALSE 6637
// begin if tmp = russianTanks [ i ] then
6581: LD_VAR 0 5
6585: PUSH
6586: LD_EXP 36
6590: PUSH
6591: LD_VAR 0 4
6595: ARRAY
6596: EQUAL
6597: IFFALSE 6635
// begin russianTanks = Delete ( russianTanks , i ) ;
6599: LD_ADDR_EXP 36
6603: PUSH
6604: LD_EXP 36
6608: PPUSH
6609: LD_VAR 0 4
6613: PPUSH
6614: CALL_OW 3
6618: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6619: LD_ADDR_EXP 37
6623: PUSH
6624: LD_EXP 37
6628: PUSH
6629: LD_VAR 0 5
6633: ADD
6634: ST_TO_ADDR
// end ; end ;
6635: GO 6578
6637: POP
6638: POP
// end ; wait ( 0 0$1 ) ;
6639: LD_INT 35
6641: PPUSH
6642: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6646: LD_INT 23
6648: PPUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 70
6663: PUSH
6664: LD_INT 2
6666: GREATER
6667: IFFALSE 6777
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6669: LD_ADDR_VAR 0 6
6673: PUSH
6674: LD_INT 22
6676: PUSH
6677: LD_VAR 0 2
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 69
6690: PPUSH
6691: LD_VAR 0 4
6695: PPUSH
6696: CALL_OW 74
6700: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6701: LD_ADDR_VAR 0 7
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_VAR 0 2
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 59
6723: PUSH
6724: EMPTY
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 1
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 21
6739: PUSH
6740: LD_INT 2
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: PPUSH
6760: CALL_OW 69
6764: PPUSH
6765: LD_VAR 0 4
6769: PPUSH
6770: CALL_OW 74
6774: ST_TO_ADDR
// end else
6775: GO 6889
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6777: LD_ADDR_VAR 0 6
6781: PUSH
6782: LD_INT 23
6784: PPUSH
6785: LD_INT 22
6787: PUSH
6788: LD_VAR 0 2
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 71
6801: PPUSH
6802: LD_VAR 0 4
6806: PPUSH
6807: CALL_OW 74
6811: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6812: LD_ADDR_VAR 0 7
6816: PUSH
6817: LD_INT 23
6819: PPUSH
6820: LD_INT 22
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 2
6834: PUSH
6835: LD_INT 59
6837: PUSH
6838: EMPTY
6839: LIST
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 1
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 21
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: PPUSH
6874: CALL_OW 71
6878: PPUSH
6879: LD_VAR 0 4
6883: PPUSH
6884: CALL_OW 74
6888: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6889: LD_VAR 0 4
6893: PPUSH
6894: LD_VAR 0 6
6898: PPUSH
6899: CALL_OW 296
6903: PUSH
6904: LD_INT 8
6906: PLUS
6907: PUSH
6908: LD_VAR 0 4
6912: PPUSH
6913: LD_VAR 0 7
6917: PPUSH
6918: CALL_OW 296
6922: LESS
6923: IFFALSE 6941
// begin ComAttackUnit ( i , target1 ) ;
6925: LD_VAR 0 4
6929: PPUSH
6930: LD_VAR 0 6
6934: PPUSH
6935: CALL_OW 115
// end else
6939: GO 6955
// begin ComAttackUnit ( i , target2 ) ;
6941: LD_VAR 0 4
6945: PPUSH
6946: LD_VAR 0 7
6950: PPUSH
6951: CALL_OW 115
// end ; end ;
6955: GO 6535
6957: POP
6958: POP
// until russianTanks = 0 ;
6959: LD_EXP 36
6963: PUSH
6964: LD_INT 0
6966: EQUAL
6967: IFFALSE 6518
// end ; end ;
6969: GO 6488
6971: POP
6972: POP
// end ;
6973: LD_VAR 0 3
6977: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
6978: LD_INT 0
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
6986: PPUSH
6987: PPUSH
6988: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6989: LD_ADDR_VAR 0 8
6993: PUSH
6994: LD_INT 22
6996: PUSH
6997: LD_VAR 0 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 21
7008: PUSH
7009: LD_INT 2
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 24
7018: PUSH
7019: LD_INT 660
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 58
7031: PUSH
7032: EMPTY
7033: LIST
7034: PUSH
7035: LD_INT 2
7037: PUSH
7038: LD_INT 34
7040: PUSH
7041: LD_INT 43
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 34
7050: PUSH
7051: LD_INT 44
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 34
7060: PUSH
7061: LD_INT 46
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL_OW 69
7089: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7090: LD_ADDR_VAR 0 9
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_VAR 0 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 2
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: LD_INT 24
7122: PUSH
7123: LD_INT 660
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7144: LD_ADDR_VAR 0 10
7148: PUSH
7149: LD_VAR 0 2
7153: PPUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 21
7168: PUSH
7169: LD_INT 2
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 24
7181: PUSH
7182: LD_INT 1000
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PPUSH
7198: CALL_OW 70
7202: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7203: LD_ADDR_VAR 0 11
7207: PUSH
7208: LD_VAR 0 2
7212: PPUSH
7213: LD_INT 22
7215: PUSH
7216: LD_VAR 0 1
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 21
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 24
7237: PUSH
7238: LD_INT 1000
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 58
7247: PUSH
7248: EMPTY
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 70
7261: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7262: LD_ADDR_VAR 0 12
7266: PUSH
7267: EMPTY
7268: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7269: LD_ADDR_VAR 0 13
7273: PUSH
7274: LD_VAR 0 2
7278: PPUSH
7279: LD_INT 22
7281: PUSH
7282: LD_VAR 0 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 25
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 70
7309: ST_TO_ADDR
// if damageVehicle_list > 0 then
7310: LD_VAR 0 9
7314: PUSH
7315: LD_INT 0
7317: GREATER
7318: IFFALSE 7356
// for i in damageVehicle_list do
7320: LD_ADDR_VAR 0 6
7324: PUSH
7325: LD_VAR 0 9
7329: PUSH
7330: FOR_IN
7331: IFFALSE 7354
// ComMoveXY ( i , repX , repY ) ;
7333: LD_VAR 0 6
7337: PPUSH
7338: LD_VAR 0 3
7342: PPUSH
7343: LD_VAR 0 4
7347: PPUSH
7348: CALL_OW 111
7352: GO 7330
7354: POP
7355: POP
// if vehicleNeedRepair_list > 0 then
7356: LD_VAR 0 10
7360: PUSH
7361: LD_INT 0
7363: GREATER
7364: IFFALSE 7451
// begin for i in vehicleNeedRepair_list do
7366: LD_ADDR_VAR 0 6
7370: PUSH
7371: LD_VAR 0 10
7375: PUSH
7376: FOR_IN
7377: IFFALSE 7449
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7379: LD_ADDR_VAR 0 12
7383: PUSH
7384: LD_VAR 0 12
7388: PUSH
7389: LD_VAR 0 6
7393: PPUSH
7394: CALL_OW 313
7398: ADD
7399: ST_TO_ADDR
// for j in mechanicInside_list do
7400: LD_ADDR_VAR 0 7
7404: PUSH
7405: LD_VAR 0 12
7409: PUSH
7410: FOR_IN
7411: IFFALSE 7445
// begin ComExitVehicle ( j ) ;
7413: LD_VAR 0 7
7417: PPUSH
7418: CALL_OW 121
// wait ( 0 0$1 ) ;
7422: LD_INT 35
7424: PPUSH
7425: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7429: LD_VAR 0 7
7433: PPUSH
7434: LD_VAR 0 6
7438: PPUSH
7439: CALL_OW 189
// end ;
7443: GO 7410
7445: POP
7446: POP
// end ;
7447: GO 7376
7449: POP
7450: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7451: LD_VAR 0 11
7455: PUSH
7456: LD_INT 0
7458: GREATER
7459: IFFALSE 7483
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7461: LD_VAR 0 13
7465: PUSH
7466: LD_INT 1
7468: ARRAY
7469: PPUSH
7470: LD_VAR 0 11
7474: PUSH
7475: LD_INT 1
7477: ARRAY
7478: PPUSH
7479: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7483: LD_VAR 0 8
7487: PUSH
7488: LD_INT 0
7490: GREATER
7491: PUSH
7492: LD_EXP 37
7496: PUSH
7497: LD_INT 0
7499: GREATER
7500: AND
7501: IFFALSE 7744
// begin for i := 1 to vehicleOK_list do
7503: LD_ADDR_VAR 0 6
7507: PUSH
7508: DOUBLE
7509: LD_INT 1
7511: DEC
7512: ST_TO_ADDR
7513: LD_VAR 0 8
7517: PUSH
7518: FOR_TO
7519: IFFALSE 7742
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7521: LD_VAR 0 6
7525: PUSH
7526: LD_INT 5
7528: PUSH
7529: LD_INT 6
7531: PUSH
7532: LD_INT 6
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_OWVAR 67
7544: ARRAY
7545: EQUAL
7546: IFFALSE 7740
// begin for i in vehicleOk_list do
7548: LD_ADDR_VAR 0 6
7552: PUSH
7553: LD_VAR 0 8
7557: PUSH
7558: FOR_IN
7559: IFFALSE 7579
// russianTanks = russianTanks ^ i ;
7561: LD_ADDR_EXP 36
7565: PUSH
7566: LD_EXP 36
7570: PUSH
7571: LD_VAR 0 6
7575: ADD
7576: ST_TO_ADDR
7577: GO 7558
7579: POP
7580: POP
// for i in vehicleOK_list do
7581: LD_ADDR_VAR 0 6
7585: PUSH
7586: LD_VAR 0 8
7590: PUSH
7591: FOR_IN
7592: IFFALSE 7608
// SetFuel ( i , 100 ) ;
7594: LD_VAR 0 6
7598: PPUSH
7599: LD_INT 100
7601: PPUSH
7602: CALL_OW 240
7606: GO 7591
7608: POP
7609: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7610: LD_ADDR_EXP 37
7614: PUSH
7615: LD_EXP 37
7619: PPUSH
7620: LD_INT 1
7622: PPUSH
7623: CALL_OW 3
7627: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7628: LD_ADDR_EXP 37
7632: PUSH
7633: LD_EXP 37
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: CALL_OW 3
7645: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7646: LD_ADDR_EXP 37
7650: PUSH
7651: LD_EXP 37
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: CALL_OW 3
7663: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7664: LD_ADDR_EXP 37
7668: PUSH
7669: LD_EXP 37
7673: PPUSH
7674: LD_INT 1
7676: PPUSH
7677: CALL_OW 3
7681: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7682: LD_ADDR_EXP 37
7686: PUSH
7687: LD_EXP 37
7691: PPUSH
7692: LD_INT 1
7694: PPUSH
7695: CALL_OW 3
7699: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7700: LD_OWVAR 67
7704: PUSH
7705: LD_INT 2
7707: EQUAL
7708: PUSH
7709: LD_OWVAR 67
7713: PUSH
7714: LD_INT 3
7716: EQUAL
7717: OR
7718: IFFALSE 7738
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7720: LD_ADDR_EXP 37
7724: PUSH
7725: LD_EXP 37
7729: PPUSH
7730: LD_INT 1
7732: PPUSH
7733: CALL_OW 3
7737: ST_TO_ADDR
// break ;
7738: GO 7742
// end ; end ;
7740: GO 7518
7742: POP
7743: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7744: LD_ADDR_VAR 0 6
7748: PUSH
7749: LD_VAR 0 2
7753: PPUSH
7754: LD_INT 22
7756: PUSH
7757: LD_VAR 0 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 25
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PPUSH
7780: CALL_OW 70
7784: NOT
7785: PUSH
7786: FOR_IN
7787: IFFALSE 7810
// ComMoveXY ( i , repX , repY ) ;
7789: LD_VAR 0 6
7793: PPUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: LD_VAR 0 4
7803: PPUSH
7804: CALL_OW 111
7808: GO 7786
7810: POP
7811: POP
// end ;
7812: LD_VAR 0 5
7816: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
// enable ;
7823: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7824: LD_ADDR_VAR 0 7
7828: PUSH
7829: LD_VAR 0 3
7833: PPUSH
7834: CALL_OW 435
7838: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7839: LD_ADDR_VAR 0 6
7843: PUSH
7844: LD_INT 22
7846: PUSH
7847: LD_VAR 0 1
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 34
7858: PUSH
7859: LD_VAR 0 2
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PPUSH
7872: CALL_OW 69
7876: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7877: LD_VAR 0 6
7881: PUSH
7882: LD_INT 0
7884: GREATER
7885: PUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: CALL_OW 435
7895: AND
7896: PUSH
7897: LD_VAR 0 7
7901: PUSH
7902: LD_INT 0
7904: GREATER
7905: AND
7906: IFFALSE 7955
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7908: LD_VAR 0 6
7912: PUSH
7913: LD_INT 1
7915: ARRAY
7916: PPUSH
7917: LD_VAR 0 7
7921: PUSH
7922: LD_INT 1
7924: ARRAY
7925: PPUSH
7926: LD_VAR 0 7
7930: PUSH
7931: LD_INT 2
7933: ARRAY
7934: PPUSH
7935: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7939: LD_VAR 0 6
7943: PUSH
7944: LD_INT 1
7946: ARRAY
7947: PPUSH
7948: LD_INT 100
7950: PPUSH
7951: CALL_OW 240
// end ; end ;
7955: LD_VAR 0 4
7959: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7960: LD_INT 0
7962: PPUSH
7963: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7964: LD_INT 22
7966: PUSH
7967: LD_VAR 0 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 25
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 69
7994: PUSH
7995: LD_INT 0
7997: GREATER
7998: PUSH
7999: LD_INT 22
8001: PUSH
8002: LD_VAR 0 1
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 21
8013: PUSH
8014: LD_INT 3
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 3
8023: PUSH
8024: LD_INT 24
8026: PUSH
8027: LD_INT 1000
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PPUSH
8043: CALL_OW 69
8047: PUSH
8048: LD_INT 0
8050: EQUAL
8051: AND
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: LD_INT 0
8060: GREATER
8061: AND
8062: IFFALSE 8161
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8064: LD_ADDR_VAR 0 4
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_VAR 0 1
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 25
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PPUSH
8095: CALL_OW 69
8099: PUSH
8100: FOR_IN
8101: IFFALSE 8159
// begin AddComExitBuilding ( i ) ;
8103: LD_VAR 0 4
8107: PPUSH
8108: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8112: LD_VAR 0 4
8116: PPUSH
8117: LD_VAR 0 2
8121: PUSH
8122: LD_INT 1
8124: ARRAY
8125: PPUSH
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 2
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 3
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 4
8151: ARRAY
8152: PPUSH
8153: CALL_OW 205
// end ;
8157: GO 8100
8159: POP
8160: POP
// end ; end ;
8161: LD_VAR 0 3
8165: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8166: LD_INT 0
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8175: LD_ADDR_VAR 0 7
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_VAR 0 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 25
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 56
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: LD_INT 24
8210: PUSH
8211: LD_INT 700
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 69
8228: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8229: LD_ADDR_VAR 0 8
8233: PUSH
8234: LD_INT 22
8236: PUSH
8237: LD_VAR 0 1
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 30
8248: PUSH
8249: LD_INT 32
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 58
8258: PUSH
8259: EMPTY
8260: LIST
8261: PUSH
8262: LD_INT 24
8264: PUSH
8265: LD_INT 251
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: PPUSH
8278: CALL_OW 69
8282: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8283: LD_ADDR_VAR 0 10
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_VAR 0 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 2
8302: PUSH
8303: LD_INT 25
8305: PUSH
8306: LD_INT 5
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 25
8315: PUSH
8316: LD_INT 8
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 25
8325: PUSH
8326: LD_INT 9
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8348: LD_ADDR_VAR 0 9
8352: PUSH
8353: LD_VAR 0 2
8357: PPUSH
8358: CALL_OW 313
8362: PUSH
8363: LD_VAR 0 10
8367: DIFF
8368: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8369: LD_VAR 0 8
8373: PUSH
8374: LD_INT 0
8376: EQUAL
8377: PUSH
8378: LD_VAR 0 9
8382: PUSH
8383: LD_INT 0
8385: EQUAL
8386: AND
8387: IFFALSE 8433
// begin for i in soldiers_list do
8389: LD_ADDR_VAR 0 5
8393: PUSH
8394: LD_VAR 0 7
8398: PUSH
8399: FOR_IN
8400: IFFALSE 8429
// begin if IsOK ( build ) then
8402: LD_VAR 0 2
8406: PPUSH
8407: CALL_OW 302
8411: IFFALSE 8427
// ComEnterUnit ( i , build ) ;
8413: LD_VAR 0 5
8417: PPUSH
8418: LD_VAR 0 2
8422: PPUSH
8423: CALL_OW 120
// end ;
8427: GO 8399
8429: POP
8430: POP
// end else
8431: GO 8518
// begin for i = 1 to turretList do
8433: LD_ADDR_VAR 0 5
8437: PUSH
8438: DOUBLE
8439: LD_INT 1
8441: DEC
8442: ST_TO_ADDR
8443: LD_VAR 0 8
8447: PUSH
8448: FOR_TO
8449: IFFALSE 8516
// begin for j = 1 to temp do
8451: LD_ADDR_VAR 0 6
8455: PUSH
8456: DOUBLE
8457: LD_INT 1
8459: DEC
8460: ST_TO_ADDR
8461: LD_VAR 0 9
8465: PUSH
8466: FOR_TO
8467: IFFALSE 8512
// begin ComExitBuilding ( temp [ j ] ) ;
8469: LD_VAR 0 9
8473: PUSH
8474: LD_VAR 0 6
8478: ARRAY
8479: PPUSH
8480: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8484: LD_VAR 0 9
8488: PUSH
8489: LD_VAR 0 6
8493: ARRAY
8494: PPUSH
8495: LD_VAR 0 8
8499: PUSH
8500: LD_VAR 0 5
8504: ARRAY
8505: PPUSH
8506: CALL_OW 180
// end ;
8510: GO 8466
8512: POP
8513: POP
// end ;
8514: GO 8448
8516: POP
8517: POP
// end ; end ;
8518: LD_VAR 0 4
8522: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8523: LD_INT 0
8525: PPUSH
8526: PPUSH
8527: PPUSH
8528: PPUSH
8529: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8530: LD_ADDR_VAR 0 6
8534: PUSH
8535: LD_INT 22
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: PUSH
8547: LD_INT 2
8549: PUSH
8550: LD_INT 30
8552: PUSH
8553: LD_INT 31
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 30
8562: PUSH
8563: LD_INT 32
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 30
8572: PUSH
8573: LD_INT 33
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 30
8582: PUSH
8583: LD_INT 4
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 30
8592: PUSH
8593: LD_INT 5
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 69
8616: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 22
8624: PUSH
8625: LD_VAR 0 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 21
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 58
8646: PUSH
8647: EMPTY
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8660: LD_VAR 0 6
8664: PUSH
8665: LD_INT 0
8667: GREATER
8668: PUSH
8669: LD_VAR 0 7
8673: PUSH
8674: LD_INT 0
8676: GREATER
8677: AND
8678: IFFALSE 8748
// begin for i in turretsList do
8680: LD_ADDR_VAR 0 4
8684: PUSH
8685: LD_VAR 0 6
8689: PUSH
8690: FOR_IN
8691: IFFALSE 8746
// begin for j in enemyBuildings do
8693: LD_ADDR_VAR 0 5
8697: PUSH
8698: LD_VAR 0 7
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8742
// begin if GetDistUnits ( i , j ) < 20 then
8706: LD_VAR 0 4
8710: PPUSH
8711: LD_VAR 0 5
8715: PPUSH
8716: CALL_OW 296
8720: PUSH
8721: LD_INT 20
8723: LESS
8724: IFFALSE 8740
// begin ComAttackUnit ( i , j ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 5
8735: PPUSH
8736: CALL_OW 115
// end ; end ;
8740: GO 8703
8742: POP
8743: POP
// end ;
8744: GO 8690
8746: POP
8747: POP
// end ; end ;
8748: LD_VAR 0 3
8752: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8753: LD_INT 0
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
8764: PPUSH
8765: PPUSH
// for i = 1 to medicCount do
8766: LD_ADDR_VAR 0 14
8770: PUSH
8771: DOUBLE
8772: LD_INT 1
8774: DEC
8775: ST_TO_ADDR
8776: LD_VAR 0 7
8780: PUSH
8781: FOR_TO
8782: IFFALSE 8864
// begin uc_side = side ;
8784: LD_ADDR_OWVAR 20
8788: PUSH
8789: LD_VAR 0 1
8793: ST_TO_ADDR
// uc_nation = nation ;
8794: LD_ADDR_OWVAR 21
8798: PUSH
8799: LD_VAR 0 2
8803: ST_TO_ADDR
// hc_name =  ;
8804: LD_ADDR_OWVAR 26
8808: PUSH
8809: LD_STRING 
8811: ST_TO_ADDR
// hc_gallery =  ;
8812: LD_ADDR_OWVAR 33
8816: PUSH
8817: LD_STRING 
8819: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8820: LD_INT 0
8822: PPUSH
8823: LD_INT 4
8825: PPUSH
8826: LD_VAR 0 8
8830: PPUSH
8831: CALL_OW 380
// un = CreateHuman ;
8835: LD_ADDR_VAR 0 16
8839: PUSH
8840: CALL_OW 44
8844: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8845: LD_VAR 0 16
8849: PPUSH
8850: LD_VAR 0 9
8854: PPUSH
8855: LD_INT 0
8857: PPUSH
8858: CALL_OW 49
// end ;
8862: GO 8781
8864: POP
8865: POP
// for i = 1 to soldierCount do
8866: LD_ADDR_VAR 0 14
8870: PUSH
8871: DOUBLE
8872: LD_INT 1
8874: DEC
8875: ST_TO_ADDR
8876: LD_VAR 0 3
8880: PUSH
8881: FOR_TO
8882: IFFALSE 8964
// begin uc_side = side ;
8884: LD_ADDR_OWVAR 20
8888: PUSH
8889: LD_VAR 0 1
8893: ST_TO_ADDR
// uc_nation = nation ;
8894: LD_ADDR_OWVAR 21
8898: PUSH
8899: LD_VAR 0 2
8903: ST_TO_ADDR
// hc_name =  ;
8904: LD_ADDR_OWVAR 26
8908: PUSH
8909: LD_STRING 
8911: ST_TO_ADDR
// hc_gallery =  ;
8912: LD_ADDR_OWVAR 33
8916: PUSH
8917: LD_STRING 
8919: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8920: LD_INT 0
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: LD_VAR 0 8
8930: PPUSH
8931: CALL_OW 380
// un = CreateHuman ;
8935: LD_ADDR_VAR 0 16
8939: PUSH
8940: CALL_OW 44
8944: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8945: LD_VAR 0 16
8949: PPUSH
8950: LD_VAR 0 9
8954: PPUSH
8955: LD_INT 0
8957: PPUSH
8958: CALL_OW 49
// end ;
8962: GO 8881
8964: POP
8965: POP
// for i = 1 to sniperCount do
8966: LD_ADDR_VAR 0 14
8970: PUSH
8971: DOUBLE
8972: LD_INT 1
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 4
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9064
// begin uc_side = side ;
8984: LD_ADDR_OWVAR 20
8988: PUSH
8989: LD_VAR 0 1
8993: ST_TO_ADDR
// uc_nation = nation ;
8994: LD_ADDR_OWVAR 21
8998: PUSH
8999: LD_VAR 0 2
9003: ST_TO_ADDR
// hc_name =  ;
9004: LD_ADDR_OWVAR 26
9008: PUSH
9009: LD_STRING 
9011: ST_TO_ADDR
// hc_gallery =  ;
9012: LD_ADDR_OWVAR 33
9016: PUSH
9017: LD_STRING 
9019: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9020: LD_INT 0
9022: PPUSH
9023: LD_INT 5
9025: PPUSH
9026: LD_VAR 0 8
9030: PPUSH
9031: CALL_OW 380
// un = CreateHuman ;
9035: LD_ADDR_VAR 0 16
9039: PUSH
9040: CALL_OW 44
9044: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9045: LD_VAR 0 16
9049: PPUSH
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_INT 0
9057: PPUSH
9058: CALL_OW 49
// end ;
9062: GO 8981
9064: POP
9065: POP
// for i = 1 to bazookCount do
9066: LD_ADDR_VAR 0 14
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_VAR 0 5
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9164
// begin uc_side = side ;
9084: LD_ADDR_OWVAR 20
9088: PUSH
9089: LD_VAR 0 1
9093: ST_TO_ADDR
// uc_nation = nation ;
9094: LD_ADDR_OWVAR 21
9098: PUSH
9099: LD_VAR 0 2
9103: ST_TO_ADDR
// hc_name =  ;
9104: LD_ADDR_OWVAR 26
9108: PUSH
9109: LD_STRING 
9111: ST_TO_ADDR
// hc_gallery =  ;
9112: LD_ADDR_OWVAR 33
9116: PUSH
9117: LD_STRING 
9119: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9120: LD_INT 0
9122: PPUSH
9123: LD_INT 9
9125: PPUSH
9126: LD_VAR 0 8
9130: PPUSH
9131: CALL_OW 380
// un = CreateHuman ;
9135: LD_ADDR_VAR 0 16
9139: PUSH
9140: CALL_OW 44
9144: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9145: LD_VAR 0 16
9149: PPUSH
9150: LD_VAR 0 9
9154: PPUSH
9155: LD_INT 0
9157: PPUSH
9158: CALL_OW 49
// end ;
9162: GO 9081
9164: POP
9165: POP
// for i = 1 to mortalCount do
9166: LD_ADDR_VAR 0 14
9170: PUSH
9171: DOUBLE
9172: LD_INT 1
9174: DEC
9175: ST_TO_ADDR
9176: LD_VAR 0 6
9180: PUSH
9181: FOR_TO
9182: IFFALSE 9264
// begin uc_side = side ;
9184: LD_ADDR_OWVAR 20
9188: PUSH
9189: LD_VAR 0 1
9193: ST_TO_ADDR
// uc_nation = nation ;
9194: LD_ADDR_OWVAR 21
9198: PUSH
9199: LD_VAR 0 2
9203: ST_TO_ADDR
// hc_name =  ;
9204: LD_ADDR_OWVAR 26
9208: PUSH
9209: LD_STRING 
9211: ST_TO_ADDR
// hc_gallery =  ;
9212: LD_ADDR_OWVAR 33
9216: PUSH
9217: LD_STRING 
9219: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9220: LD_INT 0
9222: PPUSH
9223: LD_INT 8
9225: PPUSH
9226: LD_VAR 0 8
9230: PPUSH
9231: CALL_OW 380
// un = CreateHuman ;
9235: LD_ADDR_VAR 0 16
9239: PUSH
9240: CALL_OW 44
9244: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9245: LD_VAR 0 16
9249: PPUSH
9250: LD_VAR 0 9
9254: PPUSH
9255: LD_INT 0
9257: PPUSH
9258: CALL_OW 49
// end ;
9262: GO 9181
9264: POP
9265: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9266: LD_ADDR_VAR 0 19
9270: PUSH
9271: LD_INT 22
9273: PUSH
9274: LD_VAR 0 1
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: LD_INT 25
9288: PUSH
9289: LD_INT 1
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 25
9298: PUSH
9299: LD_INT 5
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 25
9308: PUSH
9309: LD_INT 8
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 9
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PPUSH
9337: CALL_OW 69
9341: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9342: LD_ADDR_VAR 0 18
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_VAR 0 1
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 69
9377: ST_TO_ADDR
// for i in medic_list do
9378: LD_ADDR_VAR 0 14
9382: PUSH
9383: LD_VAR 0 18
9387: PUSH
9388: FOR_IN
9389: IFFALSE 9407
// ComMoveToArea ( i , healArea ) ;
9391: LD_VAR 0 14
9395: PPUSH
9396: LD_VAR 0 10
9400: PPUSH
9401: CALL_OW 113
9405: GO 9388
9407: POP
9408: POP
// if strategy = 1 then
9409: LD_VAR 0 12
9413: PUSH
9414: LD_INT 1
9416: EQUAL
9417: IFFALSE 10122
// begin repeat wait ( 0 0$3 ) ;
9419: LD_INT 105
9421: PPUSH
9422: CALL_OW 67
// for i in soldiersOK_list do
9426: LD_ADDR_VAR 0 14
9430: PUSH
9431: LD_VAR 0 19
9435: PUSH
9436: FOR_IN
9437: IFFALSE 9471
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9439: LD_VAR 0 14
9443: PPUSH
9444: LD_INT 80
9446: PPUSH
9447: LD_INT 109
9449: PPUSH
9450: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9454: LD_VAR 0 14
9458: PPUSH
9459: LD_INT 39
9461: PPUSH
9462: LD_INT 49
9464: PPUSH
9465: CALL_OW 174
// end ;
9469: GO 9436
9471: POP
9472: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9473: LD_INT 15
9475: PPUSH
9476: LD_INT 22
9478: PUSH
9479: LD_VAR 0 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PPUSH
9488: CALL_OW 70
9492: PUSH
9493: LD_INT 0
9495: GREATER
9496: IFFALSE 9419
// repeat wait ( 0 0$1 ) ;
9498: LD_INT 35
9500: PPUSH
9501: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9505: LD_ADDR_VAR 0 17
9509: PUSH
9510: LD_INT 22
9512: PUSH
9513: LD_VAR 0 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 1
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 24
9530: PUSH
9531: LD_INT 550
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 24
9544: PUSH
9545: LD_INT 250
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PPUSH
9561: CALL_OW 69
9565: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9566: LD_ADDR_VAR 0 19
9570: PUSH
9571: LD_INT 22
9573: PUSH
9574: LD_VAR 0 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 25
9608: PUSH
9609: LD_INT 8
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 25
9618: PUSH
9619: LD_INT 9
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 24
9635: PUSH
9636: LD_INT 1000
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 69
9652: ST_TO_ADDR
// if medicCount > 0 then
9653: LD_VAR 0 7
9657: PUSH
9658: LD_INT 0
9660: GREATER
9661: IFFALSE 9735
// begin if damageUnit_list > 0 then
9663: LD_VAR 0 17
9667: PUSH
9668: LD_INT 0
9670: GREATER
9671: IFFALSE 9735
// begin for i in damageUnit_list do
9673: LD_ADDR_VAR 0 14
9677: PUSH
9678: LD_VAR 0 17
9682: PUSH
9683: FOR_IN
9684: IFFALSE 9733
// begin ComMoveToArea ( i , healArea ) ;
9686: LD_VAR 0 14
9690: PPUSH
9691: LD_VAR 0 10
9695: PPUSH
9696: CALL_OW 113
// for j in medic_list do
9700: LD_ADDR_VAR 0 15
9704: PUSH
9705: LD_VAR 0 18
9709: PUSH
9710: FOR_IN
9711: IFFALSE 9729
// AddComHeal ( j , i ) ;
9713: LD_VAR 0 15
9717: PPUSH
9718: LD_VAR 0 14
9722: PPUSH
9723: CALL_OW 188
9727: GO 9710
9729: POP
9730: POP
// end ;
9731: GO 9683
9733: POP
9734: POP
// end ; end ; for i in soldiersOK_list do
9735: LD_ADDR_VAR 0 14
9739: PUSH
9740: LD_VAR 0 19
9744: PUSH
9745: FOR_IN
9746: IFFALSE 9922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9748: LD_ADDR_VAR 0 22
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_VAR 0 11
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PPUSH
9765: CALL_OW 69
9769: PPUSH
9770: LD_VAR 0 14
9774: PPUSH
9775: CALL_OW 74
9779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9780: LD_ADDR_VAR 0 23
9784: PUSH
9785: LD_INT 22
9787: PUSH
9788: LD_VAR 0 11
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 59
9802: PUSH
9803: EMPTY
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 1
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: EMPTY
9837: LIST
9838: PPUSH
9839: CALL_OW 69
9843: PPUSH
9844: LD_VAR 0 14
9848: PPUSH
9849: CALL_OW 74
9853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9854: LD_VAR 0 14
9858: PPUSH
9859: LD_VAR 0 22
9863: PPUSH
9864: CALL_OW 296
9868: PUSH
9869: LD_INT 8
9871: PLUS
9872: PUSH
9873: LD_VAR 0 14
9877: PPUSH
9878: LD_VAR 0 23
9882: PPUSH
9883: CALL_OW 296
9887: LESS
9888: IFFALSE 9906
// begin ComAttackUnit ( i , target1 ) ;
9890: LD_VAR 0 14
9894: PPUSH
9895: LD_VAR 0 22
9899: PPUSH
9900: CALL_OW 115
// end else
9904: GO 9920
// begin ComAttackUnit ( i , target2 ) ;
9906: LD_VAR 0 14
9910: PPUSH
9911: LD_VAR 0 23
9915: PPUSH
9916: CALL_OW 115
// end ; end ;
9920: GO 9745
9922: POP
9923: POP
// for i in soldiersOK_list do
9924: LD_ADDR_VAR 0 14
9928: PUSH
9929: LD_VAR 0 19
9933: PUSH
9934: FOR_IN
9935: IFFALSE 10111
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9937: LD_ADDR_VAR 0 22
9941: PUSH
9942: LD_INT 22
9944: PUSH
9945: LD_VAR 0 11
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PPUSH
9954: CALL_OW 69
9958: PPUSH
9959: LD_VAR 0 14
9963: PPUSH
9964: CALL_OW 74
9968: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9969: LD_ADDR_VAR 0 23
9973: PUSH
9974: LD_INT 22
9976: PUSH
9977: LD_VAR 0 11
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: LD_INT 59
9991: PUSH
9992: EMPTY
9993: LIST
9994: PUSH
9995: LD_INT 21
9997: PUSH
9998: LD_INT 1
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 21
10007: PUSH
10008: LD_INT 2
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: PUSH
10025: EMPTY
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: PPUSH
10033: LD_VAR 0 14
10037: PPUSH
10038: CALL_OW 74
10042: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10043: LD_VAR 0 14
10047: PPUSH
10048: LD_VAR 0 22
10052: PPUSH
10053: CALL_OW 296
10057: PUSH
10058: LD_INT 8
10060: PLUS
10061: PUSH
10062: LD_VAR 0 14
10066: PPUSH
10067: LD_VAR 0 23
10071: PPUSH
10072: CALL_OW 296
10076: LESS
10077: IFFALSE 10095
// begin ComAttackUnit ( i , target1 ) ;
10079: LD_VAR 0 14
10083: PPUSH
10084: LD_VAR 0 22
10088: PPUSH
10089: CALL_OW 115
// end else
10093: GO 10109
// begin ComAttackUnit ( i , target2 ) ;
10095: LD_VAR 0 14
10099: PPUSH
10100: LD_VAR 0 23
10104: PPUSH
10105: CALL_OW 115
// end ; end ;
10109: GO 9934
10111: POP
10112: POP
// until soldiersOK_list = [ ] ;
10113: LD_VAR 0 19
10117: PUSH
10118: EMPTY
10119: EQUAL
10120: IFFALSE 9498
// end ; if strategy = 2 then
10122: LD_VAR 0 12
10126: PUSH
10127: LD_INT 2
10129: EQUAL
10130: IFFALSE 10835
// begin repeat wait ( 0 0$1 ) ;
10132: LD_INT 35
10134: PPUSH
10135: CALL_OW 67
// for i in soldiersOK_list do
10139: LD_ADDR_VAR 0 14
10143: PUSH
10144: LD_VAR 0 19
10148: PUSH
10149: FOR_IN
10150: IFFALSE 10184
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10152: LD_VAR 0 14
10156: PPUSH
10157: LD_INT 117
10159: PPUSH
10160: LD_INT 97
10162: PPUSH
10163: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10167: LD_VAR 0 14
10171: PPUSH
10172: LD_INT 94
10174: PPUSH
10175: LD_INT 50
10177: PPUSH
10178: CALL_OW 174
// end ;
10182: GO 10149
10184: POP
10185: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10186: LD_INT 16
10188: PPUSH
10189: LD_INT 22
10191: PUSH
10192: LD_VAR 0 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 70
10205: PUSH
10206: LD_INT 0
10208: GREATER
10209: IFFALSE 10132
// repeat wait ( 0 0$3 ) ;
10211: LD_INT 105
10213: PPUSH
10214: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10218: LD_ADDR_VAR 0 17
10222: PUSH
10223: LD_INT 22
10225: PUSH
10226: LD_VAR 0 1
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: LD_INT 3
10240: PUSH
10241: LD_INT 24
10243: PUSH
10244: LD_INT 550
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: LD_INT 24
10257: PUSH
10258: LD_INT 250
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 69
10278: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10279: LD_ADDR_VAR 0 19
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_VAR 0 1
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: LD_INT 25
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 25
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 25
10321: PUSH
10322: LD_INT 8
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 25
10331: PUSH
10332: LD_INT 9
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 24
10348: PUSH
10349: LD_INT 1000
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: ST_TO_ADDR
// if medicCount > 0 then
10366: LD_VAR 0 7
10370: PUSH
10371: LD_INT 0
10373: GREATER
10374: IFFALSE 10448
// begin if damageUnit_list > 0 then
10376: LD_VAR 0 17
10380: PUSH
10381: LD_INT 0
10383: GREATER
10384: IFFALSE 10448
// begin for i in damageUnit_list do
10386: LD_ADDR_VAR 0 14
10390: PUSH
10391: LD_VAR 0 17
10395: PUSH
10396: FOR_IN
10397: IFFALSE 10446
// begin ComMoveToArea ( i , healArea ) ;
10399: LD_VAR 0 14
10403: PPUSH
10404: LD_VAR 0 10
10408: PPUSH
10409: CALL_OW 113
// for j in medic_list do
10413: LD_ADDR_VAR 0 15
10417: PUSH
10418: LD_VAR 0 18
10422: PUSH
10423: FOR_IN
10424: IFFALSE 10442
// AddComHeal ( j , i ) ;
10426: LD_VAR 0 15
10430: PPUSH
10431: LD_VAR 0 14
10435: PPUSH
10436: CALL_OW 188
10440: GO 10423
10442: POP
10443: POP
// end ;
10444: GO 10396
10446: POP
10447: POP
// end ; end ; for i in soldiersOK_list do
10448: LD_ADDR_VAR 0 14
10452: PUSH
10453: LD_VAR 0 19
10457: PUSH
10458: FOR_IN
10459: IFFALSE 10635
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10461: LD_ADDR_VAR 0 22
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_VAR 0 11
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: PPUSH
10483: LD_VAR 0 14
10487: PPUSH
10488: CALL_OW 74
10492: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10493: LD_ADDR_VAR 0 23
10497: PUSH
10498: LD_INT 22
10500: PUSH
10501: LD_VAR 0 11
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: LD_INT 59
10515: PUSH
10516: EMPTY
10517: LIST
10518: PUSH
10519: LD_INT 21
10521: PUSH
10522: LD_INT 1
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: PPUSH
10552: CALL_OW 69
10556: PPUSH
10557: LD_VAR 0 14
10561: PPUSH
10562: CALL_OW 74
10566: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10567: LD_VAR 0 14
10571: PPUSH
10572: LD_VAR 0 22
10576: PPUSH
10577: CALL_OW 296
10581: PUSH
10582: LD_INT 8
10584: PLUS
10585: PUSH
10586: LD_VAR 0 14
10590: PPUSH
10591: LD_VAR 0 23
10595: PPUSH
10596: CALL_OW 296
10600: LESS
10601: IFFALSE 10619
// begin ComAttackUnit ( i , target1 ) ;
10603: LD_VAR 0 14
10607: PPUSH
10608: LD_VAR 0 22
10612: PPUSH
10613: CALL_OW 115
// end else
10617: GO 10633
// begin ComAttackUnit ( i , target2 ) ;
10619: LD_VAR 0 14
10623: PPUSH
10624: LD_VAR 0 23
10628: PPUSH
10629: CALL_OW 115
// end ; end ;
10633: GO 10458
10635: POP
10636: POP
// for i in soldiersOK_list do
10637: LD_ADDR_VAR 0 14
10641: PUSH
10642: LD_VAR 0 19
10646: PUSH
10647: FOR_IN
10648: IFFALSE 10824
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10650: LD_ADDR_VAR 0 22
10654: PUSH
10655: LD_INT 22
10657: PUSH
10658: LD_VAR 0 11
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 69
10671: PPUSH
10672: LD_VAR 0 14
10676: PPUSH
10677: CALL_OW 74
10681: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10682: LD_ADDR_VAR 0 23
10686: PUSH
10687: LD_INT 22
10689: PUSH
10690: LD_VAR 0 11
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 59
10704: PUSH
10705: EMPTY
10706: LIST
10707: PUSH
10708: LD_INT 21
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: PPUSH
10741: CALL_OW 69
10745: PPUSH
10746: LD_VAR 0 14
10750: PPUSH
10751: CALL_OW 74
10755: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10756: LD_VAR 0 14
10760: PPUSH
10761: LD_VAR 0 22
10765: PPUSH
10766: CALL_OW 296
10770: PUSH
10771: LD_INT 8
10773: PLUS
10774: PUSH
10775: LD_VAR 0 14
10779: PPUSH
10780: LD_VAR 0 23
10784: PPUSH
10785: CALL_OW 296
10789: LESS
10790: IFFALSE 10808
// begin ComAttackUnit ( i , target1 ) ;
10792: LD_VAR 0 14
10796: PPUSH
10797: LD_VAR 0 22
10801: PPUSH
10802: CALL_OW 115
// end else
10806: GO 10822
// begin ComAttackUnit ( i , target2 ) ;
10808: LD_VAR 0 14
10812: PPUSH
10813: LD_VAR 0 23
10817: PPUSH
10818: CALL_OW 115
// end ; end ;
10822: GO 10647
10824: POP
10825: POP
// until soldiersOK_list = [ ] ;
10826: LD_VAR 0 19
10830: PUSH
10831: EMPTY
10832: EQUAL
10833: IFFALSE 10211
// end ; end ; end_of_file
10835: LD_VAR 0 13
10839: RET
// every 0 0$01 do
10840: GO 10842
10842: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10843: LD_INT 22
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 25
10855: PUSH
10856: LD_INT 2
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 69
10871: PUSH
10872: LD_INT 0
10874: EQUAL
10875: IFFALSE 10889
// SetClass ( JMM , 2 ) ;
10877: LD_EXP 1
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10889: LD_STRING M1
10891: PPUSH
10892: CALL_OW 337
// case difficulty of 1 :
10896: LD_OWVAR 67
10900: PUSH
10901: LD_INT 1
10903: DOUBLE
10904: EQUAL
10905: IFTRUE 10909
10907: GO 10919
10909: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10910: LD_STRING M1-1
10912: PPUSH
10913: CALL_OW 337
10917: GO 10956
10919: LD_INT 2
10921: DOUBLE
10922: EQUAL
10923: IFTRUE 10927
10925: GO 10937
10927: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10928: LD_STRING M1-2
10930: PPUSH
10931: CALL_OW 337
10935: GO 10956
10937: LD_INT 3
10939: DOUBLE
10940: EQUAL
10941: IFTRUE 10945
10943: GO 10955
10945: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10946: LD_STRING M1-3
10948: PPUSH
10949: CALL_OW 337
10953: GO 10956
10955: POP
// ChangeMissionObjectives ( M1cont ) ;
10956: LD_STRING M1cont
10958: PPUSH
10959: CALL_OW 337
// SaveForQuickRestart ;
10963: CALL_OW 22
// end ;
10967: END
// every 0 0$1 do
10968: GO 10970
10970: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10971: LD_INT 350
10973: PPUSH
10974: LD_INT 875
10976: PPUSH
10977: CALL_OW 12
10981: PPUSH
10982: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10986: LD_INT 5
10988: PPUSH
10989: LD_INT 4
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 55
// wait ( 0 0$15 ) ;
10999: LD_INT 525
11001: PPUSH
11002: CALL_OW 67
// if IsOk ( Lisa ) then
11006: LD_EXP 2
11010: PPUSH
11011: CALL_OW 302
11015: IFFALSE 11031
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11017: LD_EXP 2
11021: PPUSH
11022: LD_STRING DR0-Lisa-1
11024: PPUSH
11025: CALL_OW 88
// end else
11029: GO 11153
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11031: LD_INT 22
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 26
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 2
11063: PUSH
11064: LD_INT 25
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 2
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: LD_INT 25
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 25
11096: PUSH
11097: LD_INT 4
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: PPUSH
11117: CALL_OW 69
11121: PUSH
11122: LD_EXP 1
11126: PUSH
11127: LD_EXP 8
11131: PUSH
11132: LD_EXP 5
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: DIFF
11142: PPUSH
11143: LD_STRING DR0-Sol1-1
11145: PPUSH
11146: LD_STRING DR0-Sol1-1
11148: PPUSH
11149: CALL 5034 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11153: LD_INT 22
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 21
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 26
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 2
11185: PUSH
11186: LD_INT 25
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 25
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 4
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PPUSH
11239: CALL_OW 69
11243: PUSH
11244: LD_EXP 1
11248: PUSH
11249: LD_EXP 8
11253: PUSH
11254: LD_EXP 5
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: DIFF
11264: PPUSH
11265: LD_STRING DR0-Sol2-1
11267: PPUSH
11268: LD_STRING DR0-Sol2-1
11270: PPUSH
11271: CALL 5034 0 3
// if IsOk ( Cyrus ) then
11275: LD_EXP 4
11279: PPUSH
11280: CALL_OW 302
11284: IFFALSE 11298
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11286: LD_EXP 4
11290: PPUSH
11291: LD_STRING DR0-Cyrus-1
11293: PPUSH
11294: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11298: LD_EXP 1
11302: PPUSH
11303: LD_STRING DR0-JMM-1
11305: PPUSH
11306: CALL_OW 88
// end ;
11310: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11311: LD_EXP 5
11315: PPUSH
11316: CALL_OW 302
11320: PUSH
11321: LD_INT 22
11323: PUSH
11324: LD_INT 1
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 16
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: CALL_OW 69
11349: PUSH
11350: LD_INT 0
11352: GREATER
11353: AND
11354: IFFALSE 11632
11356: GO 11358
11358: DISABLE
// begin DialogueOn ;
11359: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11363: LD_EXP 5
11367: PPUSH
11368: LD_STRING D10-Frank-1
11370: PPUSH
11371: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11375: LD_INT 22
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 21
11387: PUSH
11388: LD_INT 1
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: LD_INT 25
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 25
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 25
11420: PUSH
11421: LD_INT 3
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 25
11430: PUSH
11431: LD_INT 4
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: LIST
11449: PPUSH
11450: CALL_OW 69
11454: PUSH
11455: LD_EXP 1
11459: PUSH
11460: LD_EXP 5
11464: PUSH
11465: LD_EXP 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: DIFF
11475: PPUSH
11476: LD_STRING D10-Sol1-1
11478: PPUSH
11479: LD_STRING D10-FSol1-1
11481: PPUSH
11482: CALL 5034 0 3
// Say ( Frank , D10-Frank-2 ) ;
11486: LD_EXP 5
11490: PPUSH
11491: LD_STRING D10-Frank-2
11493: PPUSH
11494: CALL_OW 88
// if IsOK ( Lisa ) then
11498: LD_EXP 2
11502: PPUSH
11503: CALL_OW 302
11507: IFFALSE 11523
// begin Say ( Lisa , D10-Lisa-2 ) ;
11509: LD_EXP 2
11513: PPUSH
11514: LD_STRING D10-Lisa-2
11516: PPUSH
11517: CALL_OW 88
// end else
11521: GO 11628
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11523: LD_INT 22
11525: PUSH
11526: LD_INT 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 25
11548: PUSH
11549: LD_INT 1
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 25
11558: PUSH
11559: LD_INT 2
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 25
11568: PUSH
11569: LD_INT 3
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 25
11578: PUSH
11579: LD_INT 4
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 69
11602: PUSH
11603: LD_EXP 1
11607: PUSH
11608: LD_EXP 5
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: DIFF
11617: PPUSH
11618: LD_STRING D10-Sol1-2
11620: PPUSH
11621: LD_STRING D10-FSol1-2
11623: PPUSH
11624: CALL 5034 0 3
// end ; DialogueOff ;
11628: CALL_OW 7
// end ;
11632: END
// every 10 10$30 do
11633: GO 11635
11635: DISABLE
// begin HarrisonSupport ;
11636: CALL 1973 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11640: LD_EXP 17
11644: PPUSH
11645: CALL_OW 310
11649: PPUSH
11650: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11654: LD_EXP 17
11658: PPUSH
11659: LD_STRING DEng-Eng1-1
11661: PPUSH
11662: CALL_OW 88
// wait ( 1 1$0 ) ;
11666: LD_INT 2100
11668: PPUSH
11669: CALL_OW 67
// DialogueOn ;
11673: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11677: LD_EXP 14
11681: PPUSH
11682: LD_STRING DRem-Har-1
11684: PPUSH
11685: CALL_OW 94
// if contactWithRussian = 1 then
11689: LD_EXP 22
11693: PUSH
11694: LD_INT 1
11696: EQUAL
11697: IFFALSE 11713
// begin Say ( JMM , DRem-JMM-1 ) ;
11699: LD_EXP 1
11703: PPUSH
11704: LD_STRING DRem-JMM-1
11706: PPUSH
11707: CALL_OW 88
// end else
11711: GO 11725
// begin Say ( JMM , DRem-JMM-1a ) ;
11713: LD_EXP 1
11717: PPUSH
11718: LD_STRING DRem-JMM-1a
11720: PPUSH
11721: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11725: LD_EXP 14
11729: PPUSH
11730: LD_STRING DRem-Har-2
11732: PPUSH
11733: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11737: LD_STRING DenisInDelta
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 30
11747: PUSH
11748: LD_INT 1
11750: EQUAL
11751: IFFALSE 11767
// begin Say ( JMM , DRem-JMM-2 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING DRem-JMM-2
11760: PPUSH
11761: CALL_OW 88
// end else
11765: GO 11779
// begin Say ( JMM , DRem-JMM-2a ) ;
11767: LD_EXP 1
11771: PPUSH
11772: LD_STRING DRem-JMM-2a
11774: PPUSH
11775: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11779: LD_EXP 14
11783: PPUSH
11784: LD_STRING DRem-Har-3
11786: PPUSH
11787: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11791: LD_EXP 1
11795: PPUSH
11796: LD_STRING DRem-JMM-3
11798: PPUSH
11799: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11803: LD_EXP 14
11807: PPUSH
11808: LD_STRING DRem-Har-4
11810: PPUSH
11811: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11815: LD_STRING DenisInDelta
11817: PPUSH
11818: LD_INT 0
11820: PPUSH
11821: CALL_OW 30
11825: PUSH
11826: LD_INT 1
11828: EQUAL
11829: IFFALSE 11857
// begin Say ( JMM , DRem-JMM-4 ) ;
11831: LD_EXP 1
11835: PPUSH
11836: LD_STRING DRem-JMM-4
11838: PPUSH
11839: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11843: LD_EXP 14
11847: PPUSH
11848: LD_STRING DRem-Har-5
11850: PPUSH
11851: CALL_OW 94
// end else
11855: GO 11890
// begin SetRestrict ( 36 , 1 , true ) ;
11857: LD_INT 36
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11870: LD_INT 15
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11883: LD_STRING MR
11885: PPUSH
11886: CALL_OW 337
// end ; DialogueOff ;
11890: CALL_OW 7
// end ;
11894: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11895: LD_STRING DenisInDelta
11897: PPUSH
11898: LD_INT 0
11900: PPUSH
11901: CALL_OW 30
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: IFFALSE 12040
11911: GO 11913
11913: DISABLE
// begin PrepareDenis ;
11914: CALL 1894 0 0
// CenterNowOnUnits ( Denis ) ;
11918: LD_EXP 9
11922: PPUSH
11923: CALL_OW 87
// DialogueOn ;
11927: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11931: LD_EXP 9
11935: PPUSH
11936: LD_STRING DDen-Den-1
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11943: LD_EXP 1
11947: PPUSH
11948: LD_STRING DDen-JMM-1
11950: PPUSH
11951: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11955: LD_EXP 9
11959: PPUSH
11960: LD_STRING DDen-Den-2
11962: PPUSH
11963: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11967: LD_EXP 1
11971: PPUSH
11972: LD_STRING DDen-JMM-2
11974: PPUSH
11975: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11979: LD_EXP 9
11983: PPUSH
11984: LD_STRING DDen-Den-3
11986: PPUSH
11987: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11991: LD_EXP 1
11995: PPUSH
11996: LD_STRING DDen-JMM-3
11998: PPUSH
11999: CALL_OW 88
// DialogueOff ;
12003: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12007: LD_INT 36
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12020: LD_INT 15
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12033: LD_STRING MR
12035: PPUSH
12036: CALL_OW 337
// end ;
12040: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12041: CALL 12086 0 0
12045: PUSH
12046: LD_EXP 9
12050: PPUSH
12051: CALL_OW 302
12055: AND
12056: IFFALSE 12085
12058: GO 12060
12060: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12061: LD_EXP 9
12065: PPUSH
12066: LD_STRING DR1-Den-1
12068: PPUSH
12069: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12073: LD_EXP 1
12077: PPUSH
12078: LD_STRING DR1-JMM-1
12080: PPUSH
12081: CALL_OW 88
// end ;
12085: END
// function CheckOptoLab ; var i ; begin
12086: LD_INT 0
12088: PPUSH
12089: PPUSH
// result = false ;
12090: LD_ADDR_VAR 0 1
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12098: LD_ADDR_VAR 0 2
12102: PUSH
12103: LD_INT 22
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 7
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 30
12128: PUSH
12129: LD_INT 8
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PPUSH
12145: CALL_OW 69
12149: PUSH
12150: FOR_IN
12151: IFFALSE 12203
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12153: LD_VAR 0 2
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 268
12165: PUSH
12166: LD_INT 15
12168: EQUAL
12169: PUSH
12170: LD_VAR 0 2
12174: PPUSH
12175: LD_INT 2
12177: PPUSH
12178: CALL_OW 268
12182: PUSH
12183: LD_INT 15
12185: EQUAL
12186: OR
12187: IFFALSE 12199
// begin result = true ;
12189: LD_ADDR_VAR 0 1
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// break ;
12197: GO 12203
// end ; break ;
12199: GO 12203
// end ;
12201: GO 12150
12203: POP
12204: POP
// end ;
12205: LD_VAR 0 1
12209: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12210: LD_INT 15
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 321
12220: PUSH
12221: LD_INT 2
12223: EQUAL
12224: PUSH
12225: LD_EXP 9
12229: PPUSH
12230: CALL_OW 302
12234: AND
12235: IFFALSE 12467
12237: GO 12239
12239: DISABLE
// begin DialogueOn ;
12240: CALL_OW 6
// if IsOK ( Denis ) then
12244: LD_EXP 9
12248: PPUSH
12249: CALL_OW 302
12253: IFFALSE 12269
// begin Say ( Denis , DR2-Den-1 ) ;
12255: LD_EXP 9
12259: PPUSH
12260: LD_STRING DR2-Den-1
12262: PPUSH
12263: CALL_OW 88
// end else
12267: GO 12328
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12269: LD_INT 22
12271: PUSH
12272: LD_INT 1
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 21
12281: PUSH
12282: LD_INT 1
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 25
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 69
12308: PUSH
12309: LD_EXP 1
12313: PUSH
12314: EMPTY
12315: LIST
12316: DIFF
12317: PPUSH
12318: LD_STRING DR2-Sci1-1
12320: PPUSH
12321: LD_STRING DR2-FSci1-1
12323: PPUSH
12324: CALL 5034 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12328: LD_EXP 1
12332: PPUSH
12333: LD_STRING DR2-JMM-1
12335: PPUSH
12336: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12340: LD_INT 22
12342: PUSH
12343: LD_INT 1
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 21
12352: PUSH
12353: LD_INT 1
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: LD_INT 25
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 25
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 25
12385: PUSH
12386: LD_INT 3
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 25
12395: PUSH
12396: LD_INT 4
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: PUSH
12420: LD_EXP 1
12424: PUSH
12425: LD_EXP 9
12429: PUSH
12430: LD_EXP 8
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: DIFF
12440: PPUSH
12441: LD_STRING DR2-Sol1-1
12443: PPUSH
12444: LD_STRING DR2-Sol1-11
12446: PPUSH
12447: CALL 5034 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12451: LD_EXP 1
12455: PPUSH
12456: LD_STRING DR2-JMM-2
12458: PPUSH
12459: CALL_OW 88
// DialogueOff ;
12463: CALL_OW 7
// end ;
12467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12468: LD_INT 22
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 36
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: PUSH
12497: LD_INT 0
12499: EQUAL
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 33
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: PUSH
12541: LD_INT 0
12543: GREATER
12544: AND
12545: PUSH
12546: LD_EXP 23
12550: PUSH
12551: LD_INT 0
12553: EQUAL
12554: AND
12555: IFFALSE 12681
12557: GO 12559
12559: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12560: LD_INT 22
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 21
12572: PUSH
12573: LD_INT 1
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 25
12582: PUSH
12583: LD_INT 3
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: PPUSH
12595: CALL_OW 69
12599: PUSH
12600: LD_EXP 1
12604: PUSH
12605: LD_EXP 6
12609: PUSH
12610: LD_EXP 7
12614: PUSH
12615: LD_EXP 9
12619: PUSH
12620: LD_EXP 15
12624: PUSH
12625: LD_EXP 3
12629: PUSH
12630: LD_EXP 4
12634: PUSH
12635: LD_EXP 2
12639: PUSH
12640: LD_EXP 5
12644: PUSH
12645: LD_EXP 8
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: DIFF
12662: PPUSH
12663: LD_STRING D3a-Mech1-1
12665: PPUSH
12666: LD_STRING D3a-Mech1-1
12668: PPUSH
12669: CALL 5034 0 3
// firstTower = 2 ;
12673: LD_ADDR_EXP 23
12677: PUSH
12678: LD_INT 2
12680: ST_TO_ADDR
// end ;
12681: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12682: LD_INT 22
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 21
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PPUSH
12706: CALL_OW 69
12710: PUSH
12711: LD_INT 0
12713: EQUAL
12714: IFFALSE 12829
12716: GO 12718
12718: DISABLE
12719: LD_INT 0
12721: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12722: LD_ADDR_VAR 0 1
12726: PUSH
12727: LD_INT 22
12729: PUSH
12730: LD_INT 1
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 21
12739: PUSH
12740: LD_INT 1
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 25
12752: PUSH
12753: LD_INT 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 25
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 25
12772: PUSH
12773: LD_INT 3
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 25
12782: PUSH
12783: LD_INT 4
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: PPUSH
12802: CALL_OW 69
12806: PUSH
12807: FOR_IN
12808: IFFALSE 12827
// AddExperience ( i , 1 , 10000 ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: LD_INT 10000
12820: PPUSH
12821: CALL_OW 492
12825: GO 12807
12827: POP
12828: POP
// end ;
12829: PPOPN 1
12831: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12832: LD_INT 22
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 30
12844: PUSH
12845: LD_INT 36
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: PUSH
12861: LD_INT 0
12863: GREATER
12864: PUSH
12865: LD_INT 22
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 21
12877: PUSH
12878: LD_INT 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 33
12887: PUSH
12888: LD_INT 2
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: PPUSH
12900: CALL_OW 69
12904: PUSH
12905: LD_INT 0
12907: GREATER
12908: AND
12909: PUSH
12910: CALL 13492 0 0
12914: AND
12915: IFFALSE 13489
12917: GO 12919
12919: DISABLE
12920: LD_INT 0
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12927: LD_ADDR_VAR 0 3
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 30
12944: PUSH
12945: LD_INT 36
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12961: LD_ADDR_VAR 0 4
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 33
12988: PUSH
12989: LD_INT 2
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: PPUSH
13001: CALL_OW 69
13005: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13006: LD_ADDR_VAR 0 5
13010: PUSH
13011: EMPTY
13012: ST_TO_ADDR
// for i in tmpControlTowers do
13013: LD_ADDR_VAR 0 1
13017: PUSH
13018: LD_VAR 0 3
13022: PUSH
13023: FOR_IN
13024: IFFALSE 13487
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13026: LD_EXP 1
13030: PPUSH
13031: CALL_OW 310
13035: PUSH
13036: LD_VAR 0 1
13040: EQUAL
13041: PUSH
13042: LD_EXP 1
13046: PPUSH
13047: CALL_OW 257
13051: PUSH
13052: LD_INT 3
13054: EQUAL
13055: AND
13056: IFFALSE 13186
// begin InGameOn ;
13058: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13062: LD_VAR 0 4
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13075: LD_EXP 1
13079: PPUSH
13080: LD_STRING D4a-JMM-1
13082: PPUSH
13083: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13087: LD_VAR 0 4
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PPUSH
13096: LD_EXP 1
13100: PPUSH
13101: CALL_OW 53
// wait ( 0 0$1 ) ;
13105: LD_INT 35
13107: PPUSH
13108: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13112: LD_VAR 0 4
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: LD_VAR 0 4
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 250
13134: PUSH
13135: LD_INT 3
13137: PLUS
13138: PPUSH
13139: LD_VAR 0 4
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: CALL_OW 251
13152: PUSH
13153: LD_INT 2
13155: MINUS
13156: PPUSH
13157: CALL_OW 111
// wait ( 0 0$2 ) ;
13161: LD_INT 70
13163: PPUSH
13164: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13168: LD_EXP 1
13172: PPUSH
13173: LD_STRING D4b-JMM-1
13175: PPUSH
13176: CALL_OW 88
// InGameOff ;
13180: CALL_OW 9
// end else
13184: GO 13485
// begin InGameOn ;
13186: CALL_OW 8
// for j in UnitsInside ( i ) do
13190: LD_ADDR_VAR 0 2
13194: PUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 313
13204: PUSH
13205: FOR_IN
13206: IFFALSE 13241
// if GetClass ( j ) = 3 then
13208: LD_VAR 0 2
13212: PPUSH
13213: CALL_OW 257
13217: PUSH
13218: LD_INT 3
13220: EQUAL
13221: IFFALSE 13239
// tmpMechanicInside = tmpMechanicInside ^ j ;
13223: LD_ADDR_VAR 0 5
13227: PUSH
13228: LD_VAR 0 5
13232: PUSH
13233: LD_VAR 0 2
13237: ADD
13238: ST_TO_ADDR
13239: GO 13205
13241: POP
13242: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13243: LD_VAR 0 5
13247: PUSH
13248: LD_INT 1
13250: ARRAY
13251: PPUSH
13252: CALL_OW 258
13256: PUSH
13257: LD_INT 1
13259: EQUAL
13260: IFFALSE 13278
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13262: LD_VAR 0 5
13266: PUSH
13267: LD_INT 1
13269: ARRAY
13270: PPUSH
13271: LD_STRING D4a-Mech1-1
13273: PPUSH
13274: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13278: LD_VAR 0 5
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: PPUSH
13287: CALL_OW 258
13291: PUSH
13292: LD_INT 2
13294: EQUAL
13295: IFFALSE 13313
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13297: LD_VAR 0 5
13301: PUSH
13302: LD_INT 1
13304: ARRAY
13305: PPUSH
13306: LD_STRING D4a-FMech1-1
13308: PPUSH
13309: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13313: LD_VAR 0 4
13317: PUSH
13318: LD_INT 1
13320: ARRAY
13321: PPUSH
13322: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13326: LD_VAR 0 4
13330: PUSH
13331: LD_INT 1
13333: ARRAY
13334: PPUSH
13335: LD_VAR 0 5
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PPUSH
13344: CALL_OW 53
// wait ( 0 0$1 ) ;
13348: LD_INT 35
13350: PPUSH
13351: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13355: LD_VAR 0 4
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PPUSH
13364: LD_VAR 0 4
13368: PUSH
13369: LD_INT 1
13371: ARRAY
13372: PPUSH
13373: CALL_OW 250
13377: PUSH
13378: LD_INT 3
13380: PLUS
13381: PPUSH
13382: LD_VAR 0 4
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: CALL_OW 251
13395: PUSH
13396: LD_INT 2
13398: MINUS
13399: PPUSH
13400: CALL_OW 111
// wait ( 0 0$2 ) ;
13404: LD_INT 70
13406: PPUSH
13407: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13411: LD_VAR 0 5
13415: PUSH
13416: LD_INT 1
13418: ARRAY
13419: PPUSH
13420: CALL_OW 258
13424: PUSH
13425: LD_INT 1
13427: EQUAL
13428: IFFALSE 13446
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13430: LD_VAR 0 5
13434: PUSH
13435: LD_INT 1
13437: ARRAY
13438: PPUSH
13439: LD_STRING D4b-Mech1-1
13441: PPUSH
13442: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13446: LD_VAR 0 5
13450: PUSH
13451: LD_INT 1
13453: ARRAY
13454: PPUSH
13455: CALL_OW 258
13459: PUSH
13460: LD_INT 2
13462: EQUAL
13463: IFFALSE 13481
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13465: LD_VAR 0 5
13469: PUSH
13470: LD_INT 1
13472: ARRAY
13473: PPUSH
13474: LD_STRING D4b-FMech1-1
13476: PPUSH
13477: CALL_OW 88
// InGameOff ;
13481: CALL_OW 9
// end ; end ;
13485: GO 13023
13487: POP
13488: POP
// end ;
13489: PPOPN 5
13491: END
// function CheckMehInside ; var i , j ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
// result = false ;
13497: LD_ADDR_VAR 0 1
13501: PUSH
13502: LD_INT 0
13504: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13505: LD_ADDR_VAR 0 2
13509: PUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 1
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 30
13522: PUSH
13523: LD_INT 36
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: PUSH
13539: FOR_IN
13540: IFFALSE 13591
// begin for j in UnitsInside ( i ) do
13542: LD_ADDR_VAR 0 3
13546: PUSH
13547: LD_VAR 0 2
13551: PPUSH
13552: CALL_OW 313
13556: PUSH
13557: FOR_IN
13558: IFFALSE 13587
// begin if GetClass ( j ) = 3 then
13560: LD_VAR 0 3
13564: PPUSH
13565: CALL_OW 257
13569: PUSH
13570: LD_INT 3
13572: EQUAL
13573: IFFALSE 13585
// begin result = true ;
13575: LD_ADDR_VAR 0 1
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// break ;
13583: GO 13587
// end ; end ;
13585: GO 13557
13587: POP
13588: POP
// end ;
13589: GO 13539
13591: POP
13592: POP
// end ;
13593: LD_VAR 0 1
13597: RET
// every 25 25$0 do
13598: GO 13600
13600: DISABLE
// begin PrepareKurt ;
13601: CALL 16993 0 0
// end ;
13605: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13606: LD_EXP 19
13610: PPUSH
13611: LD_INT 9
13613: PPUSH
13614: CALL_OW 308
13618: PUSH
13619: LD_EXP 21
13623: PUSH
13624: LD_INT 1
13626: EQUAL
13627: AND
13628: IFFALSE 13702
13630: GO 13632
13632: DISABLE
// begin RemoveUnit ( Kurt ) ;
13633: LD_EXP 19
13637: PPUSH
13638: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13642: LD_EXP 19
13646: PPUSH
13647: LD_STRING Kurt
13649: PPUSH
13650: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13654: LD_INT 1
13656: PPUSH
13657: LD_INT 2
13659: PPUSH
13660: CALL_OW 81
13664: PUSH
13665: LD_INT 0
13667: EQUAL
13668: IFFALSE 13678
// KurtStatus = 1 ;
13670: LD_ADDR_EXP 20
13674: PUSH
13675: LD_INT 1
13677: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13678: LD_INT 1
13680: PPUSH
13681: LD_INT 2
13683: PPUSH
13684: CALL_OW 81
13688: PUSH
13689: LD_INT 2
13691: EQUAL
13692: IFFALSE 13702
// KurtStatus = 2 ;
13694: LD_ADDR_EXP 20
13698: PUSH
13699: LD_INT 2
13701: ST_TO_ADDR
// end ;
13702: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13703: LD_INT 1
13705: PPUSH
13706: LD_INT 2
13708: PPUSH
13709: CALL_OW 81
13713: PUSH
13714: LD_INT 2
13716: EQUAL
13717: PUSH
13718: LD_EXP 19
13722: PPUSH
13723: CALL_OW 302
13727: AND
13728: IFFALSE 13753
13730: GO 13732
13732: DISABLE
// begin DialogueOn ;
13733: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13737: LD_EXP 19
13741: PPUSH
13742: LD_STRING D2a-Kurt-1
13744: PPUSH
13745: CALL_OW 88
// DialogueOff ;
13749: CALL_OW 7
// end ;
13753: END
// every 35 35$0 do
13754: GO 13756
13756: DISABLE
// begin PrepareJoan ;
13757: CALL 2445 0 0
// wait ( 1 1$0 ) ;
13761: LD_INT 2100
13763: PPUSH
13764: CALL_OW 67
// if IsOK ( Lisa ) then
13768: LD_EXP 2
13772: PPUSH
13773: CALL_OW 302
13777: IFFALSE 13907
// begin DialogueOn ;
13779: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13783: LD_EXP 2
13787: PPUSH
13788: LD_STRING D7-Lisa-1
13790: PPUSH
13791: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13795: LD_EXP 1
13799: PPUSH
13800: LD_STRING D7-JMM-1
13802: PPUSH
13803: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13807: LD_EXP 2
13811: PPUSH
13812: LD_STRING D7-Lisa-2
13814: PPUSH
13815: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13819: LD_EXP 1
13823: PPUSH
13824: LD_STRING D7-JMM-2
13826: PPUSH
13827: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13831: LD_EXP 2
13835: PPUSH
13836: LD_STRING D7-Lisa-3
13838: PPUSH
13839: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13843: LD_EXP 1
13847: PPUSH
13848: LD_STRING D7-JMM-3
13850: PPUSH
13851: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13855: LD_EXP 2
13859: PPUSH
13860: LD_STRING D7-Lisa-4
13862: PPUSH
13863: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13867: LD_EXP 1
13871: PPUSH
13872: LD_STRING D7-JMM-4
13874: PPUSH
13875: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13879: LD_EXP 1
13883: PPUSH
13884: LD_STRING D7-JMM-4a
13886: PPUSH
13887: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13891: LD_EXP 2
13895: PPUSH
13896: LD_STRING D7-Lisa-5
13898: PPUSH
13899: CALL_OW 88
// DialogueOff ;
13903: CALL_OW 7
// end ; end ;
13907: END
// every 0 0$1 do var i , others ;
13908: GO 13910
13910: DISABLE
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_INT 22
13922: PUSH
13923: LD_INT 1
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 21
13932: PUSH
13933: LD_INT 1
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: LD_INT 25
13945: PUSH
13946: LD_INT 1
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 25
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 25
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 4
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: PUSH
14000: LD_EXP 13
14004: PUSH
14005: EMPTY
14006: LIST
14007: DIFF
14008: ST_TO_ADDR
// for i in others do
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: LD_VAR 0 2
14018: PUSH
14019: FOR_IN
14020: IFFALSE 14057
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14022: LD_EXP 13
14026: PPUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 296
14036: PUSH
14037: LD_INT 6
14039: LESS
14040: IFFALSE 14055
// begin disable ;
14042: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14043: LD_EXP 13
14047: PPUSH
14048: LD_STRING D5-Sol1-1
14050: PPUSH
14051: CALL_OW 88
// end ; end ;
14055: GO 14019
14057: POP
14058: POP
// end ;
14059: PPOPN 2
14061: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14062: LD_INT 22
14064: PUSH
14065: LD_INT 1
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 33
14074: PUSH
14075: LD_INT 2
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 2
14093: GREATEREQUAL
14094: IFFALSE 14114
14096: GO 14098
14098: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14099: LD_STRING MRa
14101: PPUSH
14102: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14106: LD_ADDR_EXP 28
14110: PUSH
14111: LD_INT 1
14113: ST_TO_ADDR
// end ;
14114: END
// every 4 4$0 do
14115: GO 14117
14117: DISABLE
// PrepareRandoms ( 1 ) ;
14118: LD_INT 1
14120: PPUSH
14121: CALL 3470 0 1
14125: END
// every 10 10$0 do
14126: GO 14128
14128: DISABLE
// PrepareRandoms ( 2 ) ;
14129: LD_INT 2
14131: PPUSH
14132: CALL 3470 0 1
14136: END
// every 28 28$0 do
14137: GO 14139
14139: DISABLE
// PrepareRandoms ( 4 ) ;
14140: LD_INT 4
14142: PPUSH
14143: CALL 3470 0 1
14147: END
// every 32 32$0 do
14148: GO 14150
14150: DISABLE
// PrepareRandoms ( 5 ) ;
14151: LD_INT 5
14153: PPUSH
14154: CALL 3470 0 1
14158: END
// every 35 35$30 do
14159: GO 14161
14161: DISABLE
// PrepareRandoms ( 6 ) ;
14162: LD_INT 6
14164: PPUSH
14165: CALL 3470 0 1
14169: END
// every 37 37$20 do
14170: GO 14172
14172: DISABLE
// PrepareRandoms ( 7 ) ;
14173: LD_INT 7
14175: PPUSH
14176: CALL 3470 0 1
14180: END
// every 5 5$20 do
14181: GO 14183
14183: DISABLE
// begin DialogueOn ;
14184: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14188: LD_EXP 10
14192: PPUSH
14193: LD_STRING D12a-Sci-1
14195: PPUSH
14196: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14200: LD_EXP 1
14204: PPUSH
14205: LD_STRING D12a-JMM-1
14207: PPUSH
14208: CALL_OW 88
// DialogueOff ;
14212: CALL_OW 7
// cratesStatus = 1 ;
14216: LD_ADDR_EXP 38
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// end ;
14224: END
// every 13 13$0 do
14225: GO 14227
14227: DISABLE
// begin DialogueOn ;
14228: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14232: LD_EXP 10
14236: PPUSH
14237: LD_STRING D12b-Sci-1
14239: PPUSH
14240: CALL_OW 94
// DialogueOff ;
14244: CALL_OW 7
// cratesStatus = 2 ;
14248: LD_ADDR_EXP 38
14252: PUSH
14253: LD_INT 2
14255: ST_TO_ADDR
// end ;
14256: END
// every 32 32$0 do
14257: GO 14259
14259: DISABLE
// begin DialogueOn ;
14260: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14264: LD_EXP 10
14268: PPUSH
14269: LD_STRING D12c-Sci-1
14271: PPUSH
14272: CALL_OW 94
// DialogueOff ;
14276: CALL_OW 7
// wait ( 3 3$0 ) ;
14280: LD_INT 6300
14282: PPUSH
14283: CALL_OW 67
// DialogueOn ;
14287: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14291: LD_EXP 10
14295: PPUSH
14296: LD_STRING D12d-Sci-1
14298: PPUSH
14299: CALL_OW 94
// DialogueOff ;
14303: CALL_OW 7
// cratesStatus = 1 ;
14307: LD_ADDR_EXP 38
14311: PUSH
14312: LD_INT 1
14314: ST_TO_ADDR
// end ;
14315: END
// every 42 42$0 do
14316: GO 14318
14318: DISABLE
// begin DialogueOn ;
14319: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14323: LD_EXP 10
14327: PPUSH
14328: LD_STRING D12e-Sci-1
14330: PPUSH
14331: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14335: LD_EXP 1
14339: PPUSH
14340: LD_STRING D12e-JMM-1
14342: PPUSH
14343: CALL_OW 88
// DialogueOff ;
14347: CALL_OW 7
// cratesStatus = 2 ;
14351: LD_ADDR_EXP 38
14355: PUSH
14356: LD_INT 2
14358: ST_TO_ADDR
// end ;
14359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14360: LD_INT 22
14362: PUSH
14363: LD_INT 6
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 34
14382: PUSH
14383: LD_INT 51
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 69
14399: PUSH
14400: LD_INT 0
14402: GREATER
14403: IFFALSE 14486
14405: GO 14407
14407: DISABLE
14408: LD_INT 0
14410: PPUSH
// begin enable ;
14411: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14412: LD_ADDR_VAR 0 1
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_INT 6
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: LD_INT 21
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: LIST
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: PUSH
14464: FOR_IN
14465: IFFALSE 14484
// ComAgressiveMove ( i , 138 , 168 ) ;
14467: LD_VAR 0 1
14471: PPUSH
14472: LD_INT 138
14474: PPUSH
14475: LD_INT 168
14477: PPUSH
14478: CALL_OW 114
14482: GO 14464
14484: POP
14485: POP
// end ;
14486: PPOPN 1
14488: END
// every 0 0$1 do var i ;
14489: GO 14491
14491: DISABLE
14492: LD_INT 0
14494: PPUSH
// begin enable ;
14495: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: LD_INT 5
14503: PPUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 22
14519: PUSH
14520: LD_INT 6
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: PPUSH
14535: CALL_OW 70
14539: PUSH
14540: FOR_IN
14541: IFFALSE 14605
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14543: LD_INT 5
14545: PPUSH
14546: LD_INT 22
14548: PUSH
14549: LD_INT 6
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 34
14558: PUSH
14559: LD_INT 51
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 70
14574: PUSH
14575: LD_INT 0
14577: GREATER
14578: IFFALSE 14594
// sendedConvoys = sendedConvoys + 1 ;
14580: LD_ADDR_EXP 39
14584: PUSH
14585: LD_EXP 39
14589: PUSH
14590: LD_INT 1
14592: PLUS
14593: ST_TO_ADDR
// RemoveUnit ( i ) ;
14594: LD_VAR 0 1
14598: PPUSH
14599: CALL_OW 64
// end ;
14603: GO 14540
14605: POP
14606: POP
// end ; end_of_file
14607: PPOPN 1
14609: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14610: LD_VAR 0 1
14614: PUSH
14615: LD_INT 1
14617: EQUAL
14618: PUSH
14619: LD_VAR 0 2
14623: PUSH
14624: LD_INT 3
14626: EQUAL
14627: AND
14628: IFFALSE 14638
// contactWithRussian = 1 ;
14630: LD_ADDR_EXP 22
14634: PUSH
14635: LD_INT 1
14637: ST_TO_ADDR
// end ;
14638: PPOPN 2
14640: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 266
14650: PUSH
14651: LD_INT 36
14653: EQUAL
14654: PUSH
14655: LD_VAR 0 1
14659: PPUSH
14660: CALL_OW 255
14664: PUSH
14665: LD_INT 1
14667: EQUAL
14668: AND
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 21
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 33
14692: PUSH
14693: LD_INT 2
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: PUSH
14710: LD_INT 0
14712: EQUAL
14713: AND
14714: PUSH
14715: LD_EXP 23
14719: PUSH
14720: LD_INT 0
14722: EQUAL
14723: AND
14724: IFFALSE 14793
// begin firstTower = 1 ;
14726: LD_ADDR_EXP 23
14730: PUSH
14731: LD_INT 1
14733: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14734: LD_INT 22
14736: PUSH
14737: LD_INT 1
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 21
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: LD_INT 3
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: PUSH
14774: LD_EXP 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: DIFF
14782: PPUSH
14783: LD_STRING D3b-Mech1-1
14785: PPUSH
14786: LD_STRING D3b-Mech1-1
14788: PPUSH
14789: CALL 5034 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 266
14802: PUSH
14803: LD_INT 0
14805: EQUAL
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 255
14816: PUSH
14817: LD_INT 1
14819: EQUAL
14820: AND
14821: IFFALSE 14835
// SetBName ( building , theta ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: LD_STRING theta
14830: PPUSH
14831: CALL_OW 500
// if GetSide ( building ) = 3 then
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PUSH
14845: LD_INT 3
14847: EQUAL
14848: IFFALSE 14922
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14850: LD_ADDR_EXP 31
14854: PUSH
14855: LD_EXP 31
14859: PPUSH
14860: LD_INT 1
14862: PPUSH
14863: CALL_OW 3
14867: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14868: LD_ADDR_EXP 31
14872: PUSH
14873: LD_EXP 31
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 3
14885: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14886: LD_ADDR_EXP 31
14890: PUSH
14891: LD_EXP 31
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: CALL_OW 3
14903: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14904: LD_ADDR_EXP 31
14908: PUSH
14909: LD_EXP 31
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 3
14921: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 255
14931: PUSH
14932: LD_INT 3
14934: EQUAL
14935: PUSH
14936: LD_VAR 0 1
14940: PPUSH
14941: CALL_OW 266
14945: PUSH
14946: LD_INT 0
14948: EQUAL
14949: PUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 266
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: OR
14964: PUSH
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 266
14974: PUSH
14975: LD_INT 4
14977: EQUAL
14978: OR
14979: PUSH
14980: EMPTY
14981: LIST
14982: AND
14983: IFFALSE 14994
// ComUpgrade ( building ) ;
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14994: LD_VAR 0 1
14998: PPUSH
14999: CALL_OW 255
15003: PUSH
15004: LD_INT 3
15006: EQUAL
15007: PUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 266
15017: PUSH
15018: LD_INT 32
15020: EQUAL
15021: AND
15022: IFFALSE 15063
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15024: LD_VAR 0 1
15028: PPUSH
15029: LD_INT 42
15031: PUSH
15032: LD_INT 43
15034: PUSH
15035: LD_INT 44
15037: PUSH
15038: LD_INT 46
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: PUSH
15047: LD_INT 1
15049: PPUSH
15050: LD_INT 4
15052: PPUSH
15053: CALL_OW 12
15057: ARRAY
15058: PPUSH
15059: CALL_OW 208
// end ; end ;
15063: PPOPN 1
15065: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
15066: LD_VAR 0 1
15070: PPUSH
15071: CALL_OW 255
15075: PUSH
15076: LD_INT 1
15078: EQUAL
15079: PUSH
15080: LD_VAR 0 1
15084: PPUSH
15085: CALL_OW 247
15089: PUSH
15090: LD_INT 1
15092: EQUAL
15093: AND
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 257
15104: PUSH
15105: LD_INT 1
15107: EQUAL
15108: PUSH
15109: LD_VAR 0 1
15113: PPUSH
15114: CALL_OW 257
15118: PUSH
15119: LD_INT 2
15121: EQUAL
15122: OR
15123: PUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 257
15133: PUSH
15134: LD_INT 3
15136: EQUAL
15137: OR
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 257
15148: PUSH
15149: LD_INT 4
15151: EQUAL
15152: OR
15153: PUSH
15154: EMPTY
15155: LIST
15156: AND
15157: IFFALSE 15173
// unitLost = unitLost + 1 ;
15159: LD_ADDR_EXP 30
15163: PUSH
15164: LD_EXP 30
15168: PUSH
15169: LD_INT 1
15171: PLUS
15172: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: PUSH
15183: LD_INT 3
15185: EQUAL
15186: PUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 247
15196: PUSH
15197: LD_INT 3
15199: EQUAL
15200: AND
15201: IFFALSE 15908
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL_OW 266
15212: PUSH
15213: LD_INT 31
15215: EQUAL
15216: PUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 266
15226: PUSH
15227: LD_INT 32
15229: EQUAL
15230: OR
15231: PUSH
15232: LD_VAR 0 1
15236: PPUSH
15237: CALL_OW 266
15241: PUSH
15242: LD_INT 36
15244: EQUAL
15245: OR
15246: PUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 266
15256: PUSH
15257: LD_INT 0
15259: EQUAL
15260: OR
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 24
15274: EQUAL
15275: OR
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 266
15286: PUSH
15287: LD_INT 17
15289: EQUAL
15290: OR
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 266
15301: PUSH
15302: LD_INT 25
15304: EQUAL
15305: OR
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 266
15316: PUSH
15317: LD_INT 19
15319: EQUAL
15320: OR
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 266
15331: PUSH
15332: LD_INT 20
15334: EQUAL
15335: OR
15336: PUSH
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 266
15346: PUSH
15347: LD_INT 18
15349: EQUAL
15350: OR
15351: PUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 266
15361: PUSH
15362: LD_INT 21
15364: EQUAL
15365: OR
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 266
15376: PUSH
15377: LD_INT 23
15379: EQUAL
15380: OR
15381: PUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 266
15391: PUSH
15392: LD_INT 16
15394: EQUAL
15395: OR
15396: PUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 266
15406: PUSH
15407: LD_INT 6
15409: EQUAL
15410: OR
15411: PUSH
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 266
15421: PUSH
15422: LD_INT 29
15424: EQUAL
15425: OR
15426: PUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 266
15436: PUSH
15437: LD_INT 26
15439: EQUAL
15440: OR
15441: PUSH
15442: LD_VAR 0 1
15446: PPUSH
15447: CALL_OW 266
15451: PUSH
15452: LD_INT 30
15454: EQUAL
15455: OR
15456: PUSH
15457: LD_VAR 0 1
15461: PPUSH
15462: CALL_OW 266
15466: PUSH
15467: LD_INT 28
15469: EQUAL
15470: OR
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 266
15481: PUSH
15482: LD_INT 27
15484: EQUAL
15485: OR
15486: PUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 266
15496: PUSH
15497: LD_INT 33
15499: EQUAL
15500: OR
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 266
15511: PUSH
15512: LD_INT 2
15514: EQUAL
15515: OR
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 266
15526: PUSH
15527: LD_INT 4
15529: EQUAL
15530: OR
15531: IFFALSE 15617
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15533: LD_ADDR_EXP 31
15537: PUSH
15538: LD_EXP 31
15542: PUSH
15543: LD_VAR 0 1
15547: PPUSH
15548: CALL_OW 266
15552: ADD
15553: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15554: LD_ADDR_EXP 31
15558: PUSH
15559: LD_EXP 31
15563: PUSH
15564: LD_VAR 0 1
15568: PPUSH
15569: CALL_OW 250
15573: ADD
15574: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15575: LD_ADDR_EXP 31
15579: PUSH
15580: LD_EXP 31
15584: PUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: CALL_OW 251
15594: ADD
15595: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15596: LD_ADDR_EXP 31
15600: PUSH
15601: LD_EXP 31
15605: PUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 254
15615: ADD
15616: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15617: LD_VAR 0 1
15621: PPUSH
15622: CALL_OW 266
15626: PUSH
15627: LD_INT 1
15629: EQUAL
15630: IFFALSE 15709
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15632: LD_ADDR_EXP 31
15636: PUSH
15637: LD_EXP 31
15641: PUSH
15642: LD_INT 0
15644: ADD
15645: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15646: LD_ADDR_EXP 31
15650: PUSH
15651: LD_EXP 31
15655: PUSH
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 250
15665: ADD
15666: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15667: LD_ADDR_EXP 31
15671: PUSH
15672: LD_EXP 31
15676: PUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 251
15686: ADD
15687: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15688: LD_ADDR_EXP 31
15692: PUSH
15693: LD_EXP 31
15697: PUSH
15698: LD_VAR 0 1
15702: PPUSH
15703: CALL_OW 254
15707: ADD
15708: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15709: LD_VAR 0 1
15713: PPUSH
15714: CALL_OW 266
15718: PUSH
15719: LD_INT 3
15721: EQUAL
15722: IFFALSE 15801
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15724: LD_ADDR_EXP 31
15728: PUSH
15729: LD_EXP 31
15733: PUSH
15734: LD_INT 2
15736: ADD
15737: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15738: LD_ADDR_EXP 31
15742: PUSH
15743: LD_EXP 31
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 250
15757: ADD
15758: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15759: LD_ADDR_EXP 31
15763: PUSH
15764: LD_EXP 31
15768: PUSH
15769: LD_VAR 0 1
15773: PPUSH
15774: CALL_OW 251
15778: ADD
15779: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15780: LD_ADDR_EXP 31
15784: PUSH
15785: LD_EXP 31
15789: PUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 254
15799: ADD
15800: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15801: LD_VAR 0 1
15805: PPUSH
15806: CALL_OW 266
15810: PUSH
15811: LD_INT 5
15813: EQUAL
15814: IFFALSE 15893
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15816: LD_ADDR_EXP 31
15820: PUSH
15821: LD_EXP 31
15825: PUSH
15826: LD_INT 4
15828: ADD
15829: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15830: LD_ADDR_EXP 31
15834: PUSH
15835: LD_EXP 31
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 250
15849: ADD
15850: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15851: LD_ADDR_EXP 31
15855: PUSH
15856: LD_EXP 31
15860: PUSH
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 251
15870: ADD
15871: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15872: LD_ADDR_EXP 31
15876: PUSH
15877: LD_EXP 31
15881: PUSH
15882: LD_VAR 0 1
15886: PPUSH
15887: CALL_OW 254
15891: ADD
15892: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 then
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL_OW 257
15902: PUSH
15903: LD_INT 3
15905: EQUAL
15906: IFFALSE 15908
// begin end ; end ; end ;
15908: PPOPN 1
15910: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15911: LD_INT 0
15913: PPUSH
15914: PPUSH
15915: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 264
15925: PUSH
15926: LD_INT 51
15928: EQUAL
15929: PUSH
15930: LD_VAR 0 1
15934: PPUSH
15935: CALL_OW 255
15939: PUSH
15940: LD_INT 3
15942: EQUAL
15943: AND
15944: IFFALSE 16006
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15946: LD_ADDR_VAR 0 5
15950: PUSH
15951: LD_INT 2
15953: PPUSH
15954: CALL_OW 274
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 275
15966: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15967: LD_INT 2
15969: PPUSH
15970: CALL_OW 274
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 5
15982: PUSH
15983: LD_INT 100
15985: MINUS
15986: PPUSH
15987: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_INT 1
15998: PPUSH
15999: LD_INT 100
16001: PPUSH
16002: CALL_OW 291
// end ; if building = rufabsupp then
16006: LD_VAR 0 2
16010: PUSH
16011: LD_INT 17
16013: EQUAL
16014: IFFALSE 16028
// SetSide ( vehicle , 6 ) ;
16016: LD_VAR 0 1
16020: PPUSH
16021: LD_INT 6
16023: PPUSH
16024: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL_OW 255
16037: PUSH
16038: LD_INT 3
16040: EQUAL
16041: PUSH
16042: LD_VAR 0 2
16046: PPUSH
16047: CALL_OW 302
16051: AND
16052: IFFALSE 16122
// begin uc_side = 3 ;
16054: LD_ADDR_OWVAR 20
16058: PUSH
16059: LD_INT 3
16061: ST_TO_ADDR
// uc_nation = 3 ;
16062: LD_ADDR_OWVAR 21
16066: PUSH
16067: LD_INT 3
16069: ST_TO_ADDR
// hc_gallery :=  ;
16070: LD_ADDR_OWVAR 33
16074: PUSH
16075: LD_STRING 
16077: ST_TO_ADDR
// hc_name :=  ;
16078: LD_ADDR_OWVAR 26
16082: PUSH
16083: LD_STRING 
16085: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16086: LD_INT 0
16088: PPUSH
16089: LD_EXP 34
16093: PPUSH
16094: LD_EXP 35
16098: PPUSH
16099: CALL_OW 12
16103: PPUSH
16104: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16108: CALL_OW 44
16112: PPUSH
16113: LD_VAR 0 2
16117: PPUSH
16118: CALL_OW 52
// end ; if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16122: LD_VAR 0 2
16126: PUSH
16127: LD_INT 21
16129: EQUAL
16130: PUSH
16131: LD_VAR 0 2
16135: PPUSH
16136: CALL_OW 255
16140: PUSH
16141: LD_INT 3
16143: EQUAL
16144: AND
16145: PUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 264
16155: PUSH
16156: LD_INT 42
16158: EQUAL
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 264
16169: PUSH
16170: LD_INT 43
16172: EQUAL
16173: OR
16174: PUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 264
16184: PUSH
16185: LD_INT 44
16187: EQUAL
16188: OR
16189: PUSH
16190: EMPTY
16191: LIST
16192: AND
16193: IFFALSE 16211
// russianTanks = russianTanks ^ vehicle ;
16195: LD_ADDR_EXP 36
16199: PUSH
16200: LD_EXP 36
16204: PUSH
16205: LD_VAR 0 1
16209: ADD
16210: ST_TO_ADDR
// end ;
16211: PPOPN 5
16213: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 255
16223: PUSH
16224: LD_INT 3
16226: EQUAL
16227: IFFALSE 16243
// tamedApemans = tamedApemans + 1 ;
16229: LD_ADDR_EXP 32
16233: PUSH
16234: LD_EXP 32
16238: PUSH
16239: LD_INT 1
16241: PLUS
16242: ST_TO_ADDR
// end ;
16243: PPOPN 2
16245: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16246: LD_INT 0
16248: PPUSH
16249: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16250: LD_VAR 0 1
16254: PPUSH
16255: CALL_OW 255
16259: PUSH
16260: LD_INT 3
16262: EQUAL
16263: PUSH
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL_OW 247
16273: PUSH
16274: LD_INT 2
16276: EQUAL
16277: AND
16278: PUSH
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 42
16291: EQUAL
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 264
16302: PUSH
16303: LD_INT 43
16305: EQUAL
16306: OR
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 264
16317: PUSH
16318: LD_INT 44
16320: EQUAL
16321: OR
16322: PUSH
16323: EMPTY
16324: LIST
16325: AND
16326: IFFALSE 16418
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16328: LD_INT 21
16330: PPUSH
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL_OW 265
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 262
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 263
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 264
16370: PPUSH
16371: CALL_OW 185
// tmpMeh = UnitsInside ( unit ) ;
16375: LD_ADDR_VAR 0 3
16379: PUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 313
16389: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16390: LD_VAR 0 3
16394: PPUSH
16395: CALL_OW 121
// wait ( 0 0$01 ) ;
16399: LD_INT 35
16401: PPUSH
16402: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16406: LD_VAR 0 3
16410: PPUSH
16411: LD_INT 21
16413: PPUSH
16414: CALL_OW 120
// end ; end ; end_of_file
16418: PPOPN 3
16420: END
// every 0 0$30 trigger cratesStatus = 1 do
16421: LD_EXP 38
16425: PUSH
16426: LD_INT 1
16428: EQUAL
16429: IFFALSE 16493
16431: GO 16433
16433: DISABLE
// begin enable ;
16434: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16435: LD_INT 350
16437: PUSH
16438: LD_INT 1050
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 1
16447: PPUSH
16448: LD_INT 2
16450: PPUSH
16451: CALL_OW 12
16455: ARRAY
16456: PPUSH
16457: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16461: LD_INT 4
16463: PUSH
16464: LD_INT 5
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 1
16473: PPUSH
16474: LD_INT 2
16476: PPUSH
16477: CALL_OW 12
16481: ARRAY
16482: PPUSH
16483: LD_INT 7
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 55
// end ;
16493: END
// every 1 1$0 trigger cratesStatus = 2 do
16494: LD_EXP 38
16498: PUSH
16499: LD_INT 2
16501: EQUAL
16502: IFFALSE 16566
16504: GO 16506
16506: DISABLE
// begin enable ;
16507: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16508: LD_INT 3150
16510: PUSH
16511: LD_INT 4550
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: PPUSH
16521: LD_INT 2
16523: PPUSH
16524: CALL_OW 12
16528: ARRAY
16529: PPUSH
16530: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16534: LD_INT 2
16536: PUSH
16537: LD_INT 5
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: LD_INT 1
16546: PPUSH
16547: LD_INT 2
16549: PPUSH
16550: CALL_OW 12
16554: ARRAY
16555: PPUSH
16556: LD_INT 8
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 55
// end ;
16566: END
// every 0 0$30 + 0 0$10 do
16567: GO 16569
16569: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16570: LD_INT 4
16572: PUSH
16573: LD_INT 5
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: PPUSH
16583: LD_INT 2
16585: PPUSH
16586: CALL_OW 12
16590: ARRAY
16591: PPUSH
16592: LD_INT 8
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 55
// Wait ( 0 0$15 ) ;
16602: LD_INT 525
16604: PPUSH
16605: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16609: LD_INT 4
16611: PUSH
16612: LD_INT 5
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 1
16621: PPUSH
16622: LD_INT 2
16624: PPUSH
16625: CALL_OW 12
16629: ARRAY
16630: PPUSH
16631: LD_INT 8
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 55
// Wait ( 0 0$20 ) ;
16641: LD_INT 700
16643: PPUSH
16644: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16648: LD_INT 4
16650: PUSH
16651: LD_INT 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 1
16660: PPUSH
16661: LD_INT 2
16663: PPUSH
16664: CALL_OW 12
16668: ARRAY
16669: PPUSH
16670: LD_INT 8
16672: PPUSH
16673: LD_INT 1
16675: PPUSH
16676: CALL_OW 55
// end ; end_of_file
16680: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16681: LD_EXP 24
16685: PUSH
16686: LD_INT 1
16688: EQUAL
16689: IFFALSE 16990
16691: GO 16693
16693: DISABLE
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
16698: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16699: LD_ADDR_VAR 0 2
16703: PUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 3
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: LD_INT 2
16726: PUSH
16727: LD_INT 30
16729: PUSH
16730: LD_INT 0
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 30
16739: PUSH
16740: LD_INT 1
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 69
16761: ST_TO_ADDR
// for i in tmp do
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: LD_VAR 0 2
16771: PUSH
16772: FOR_IN
16773: IFFALSE 16806
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16775: LD_ADDR_VAR 0 3
16779: PUSH
16780: LD_VAR 0 3
16784: PUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: CALL_OW 274
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 275
16802: PLUS
16803: ST_TO_ADDR
16804: GO 16772
16806: POP
16807: POP
// strings = [ ] ;
16808: LD_ADDR_EXP 27
16812: PUSH
16813: EMPTY
16814: ST_TO_ADDR
// if tmp = 0 then
16815: LD_VAR 0 2
16819: PUSH
16820: LD_INT 0
16822: EQUAL
16823: IFFALSE 16848
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16825: LD_ADDR_EXP 27
16829: PUSH
16830: LD_EXP 27
16834: PUSH
16835: LD_STRING #Am06-1
16837: PUSH
16838: LD_EXP 25
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: ADD
16847: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
16848: LD_VAR 0 2
16852: PUSH
16853: LD_INT 0
16855: GREATER
16856: PUSH
16857: LD_EXP 25
16861: PUSH
16862: LD_VAR 0 3
16866: GREATER
16867: AND
16868: IFFALSE 16899
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16870: LD_ADDR_EXP 27
16874: PUSH
16875: LD_EXP 27
16879: PUSH
16880: LD_STRING #Am06-1
16882: PUSH
16883: LD_EXP 25
16887: PUSH
16888: LD_VAR 0 3
16892: MINUS
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: ADD
16898: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
16899: LD_VAR 0 2
16903: PUSH
16904: LD_INT 0
16906: GREATER
16907: PUSH
16908: LD_EXP 25
16912: PUSH
16913: LD_VAR 0 3
16917: LESSEQUAL
16918: AND
16919: IFFALSE 16942
// strings = strings ^ [ #Am06-1 , 0 ] ;
16921: LD_ADDR_EXP 27
16925: PUSH
16926: LD_EXP 27
16930: PUSH
16931: LD_STRING #Am06-1
16933: PUSH
16934: LD_INT 0
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: ADD
16941: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16942: LD_ADDR_EXP 26
16946: PUSH
16947: LD_EXP 26
16951: PUSH
16952: LD_INT 35
16954: MINUS
16955: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16956: LD_ADDR_EXP 27
16960: PUSH
16961: LD_EXP 27
16965: PUSH
16966: LD_STRING #Am06-2
16968: PUSH
16969: LD_EXP 26
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: ADD
16978: ST_TO_ADDR
// display_strings = strings ;
16979: LD_ADDR_OWVAR 47
16983: PUSH
16984: LD_EXP 27
16988: ST_TO_ADDR
// enable ;
16989: ENABLE
// end ; end_of_file
16990: PPOPN 3
16992: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
16993: LD_INT 0
16995: PPUSH
16996: PPUSH
16997: PPUSH
16998: PPUSH
16999: PPUSH
17000: PPUSH
17001: PPUSH
// j = 0 ;
17002: LD_ADDR_VAR 0 3
17006: PUSH
17007: LD_INT 0
17009: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17010: LD_INT 35
17012: PPUSH
17013: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17017: LD_ADDR_VAR 0 2
17021: PUSH
17022: LD_INT 22
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 21
17034: PUSH
17035: LD_INT 1
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: LD_INT 25
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 25
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 25
17077: PUSH
17078: LD_INT 4
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: PPUSH
17097: CALL_OW 69
17101: PUSH
17102: FOR_IN
17103: IFFALSE 17209
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 21
17120: PUSH
17121: LD_INT 1
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: LD_INT 21
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PUSH
17138: LD_INT 21
17140: PUSH
17141: LD_INT 3
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 59
17150: PUSH
17151: EMPTY
17152: LIST
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 91
17163: PUSH
17164: LD_VAR 0 2
17168: PUSH
17169: LD_INT 25
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: PPUSH
17182: CALL_OW 69
17186: NOT
17187: IFFALSE 17207
// begin tmp = i ;
17189: LD_ADDR_VAR 0 4
17193: PUSH
17194: LD_VAR 0 2
17198: ST_TO_ADDR
// j = 1 ;
17199: LD_ADDR_VAR 0 3
17203: PUSH
17204: LD_INT 1
17206: ST_TO_ADDR
// end ; end ;
17207: GO 17102
17209: POP
17210: POP
// until j = 1 ;
17211: LD_VAR 0 3
17215: PUSH
17216: LD_INT 1
17218: EQUAL
17219: IFFALSE 17010
// blockSpawn = 1 ;
17221: LD_ADDR_EXP 29
17225: PUSH
17226: LD_INT 1
17228: ST_TO_ADDR
// uc_side = 2 ;
17229: LD_ADDR_OWVAR 20
17233: PUSH
17234: LD_INT 2
17236: ST_TO_ADDR
// uc_nation = 2 ;
17237: LD_ADDR_OWVAR 21
17241: PUSH
17242: LD_INT 2
17244: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17245: LD_ADDR_EXP 19
17249: PUSH
17250: LD_STRING Kurt
17252: PPUSH
17253: LD_INT 0
17255: PPUSH
17256: CALL 4971 0 2
17260: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17261: LD_EXP 19
17265: PPUSH
17266: LD_VAR 0 4
17270: PPUSH
17271: CALL_OW 250
17275: PPUSH
17276: LD_VAR 0 4
17280: PPUSH
17281: CALL_OW 251
17285: PPUSH
17286: LD_INT 5
17288: PPUSH
17289: LD_INT 1
17291: PPUSH
17292: CALL_OW 50
// InGameOn ;
17296: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17300: LD_EXP 19
17304: PPUSH
17305: CALL_OW 87
// wait ( 0 0$2 ) ;
17309: LD_INT 70
17311: PPUSH
17312: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17316: LD_VAR 0 4
17320: PPUSH
17321: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17325: LD_VAR 0 4
17329: PPUSH
17330: CALL_OW 122
// wait ( 0 0$1 ) ;
17334: LD_INT 35
17336: PPUSH
17337: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17341: LD_EXP 19
17345: PPUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17355: LD_VAR 0 4
17359: PPUSH
17360: LD_EXP 19
17364: PPUSH
17365: CALL_OW 119
// DialogueOn ;
17369: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17373: LD_EXP 19
17377: PPUSH
17378: LD_STRING D2-Kurt-1
17380: PPUSH
17381: CALL_OW 88
// if tmp = JMM then
17385: LD_VAR 0 4
17389: PUSH
17390: LD_EXP 1
17394: EQUAL
17395: IFFALSE 17487
// begin Say ( JMM , D2-JMM-1 ) ;
17397: LD_EXP 1
17401: PPUSH
17402: LD_STRING D2-JMM-1
17404: PPUSH
17405: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17409: LD_EXP 19
17413: PPUSH
17414: LD_STRING D2-Kurt-2
17416: PPUSH
17417: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17421: LD_EXP 1
17425: PPUSH
17426: LD_STRING D2-JMM-2
17428: PPUSH
17429: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17433: LD_EXP 19
17437: PPUSH
17438: LD_STRING D2-Kurt-3
17440: PPUSH
17441: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17445: LD_EXP 1
17449: PPUSH
17450: LD_STRING D2-JMM-3
17452: PPUSH
17453: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17457: LD_EXP 19
17461: PPUSH
17462: LD_STRING D2-Kurt-4
17464: PPUSH
17465: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17469: LD_EXP 1
17473: PPUSH
17474: LD_STRING D2-JMM-4
17476: PPUSH
17477: CALL_OW 88
// DialogueOff ;
17481: CALL_OW 7
// end else
17485: GO 17797
// begin if GetSex ( tmp ) = 1 then
17487: LD_VAR 0 4
17491: PPUSH
17492: CALL_OW 258
17496: PUSH
17497: LD_INT 1
17499: EQUAL
17500: IFFALSE 17514
// Say ( tmp , D2-Sol1-1 ) ;
17502: LD_VAR 0 4
17506: PPUSH
17507: LD_STRING D2-Sol1-1
17509: PPUSH
17510: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17514: LD_VAR 0 4
17518: PPUSH
17519: CALL_OW 258
17523: PUSH
17524: LD_INT 2
17526: EQUAL
17527: IFFALSE 17541
// Say ( tmp , D2-FSol1-1 ) ;
17529: LD_VAR 0 4
17533: PPUSH
17534: LD_STRING D2-FSol1-1
17536: PPUSH
17537: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17541: LD_EXP 19
17545: PPUSH
17546: LD_STRING D2-Kurt-2
17548: PPUSH
17549: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17553: LD_VAR 0 4
17557: PPUSH
17558: CALL_OW 258
17562: PUSH
17563: LD_INT 1
17565: EQUAL
17566: IFFALSE 17580
// Say ( tmp , D2-Sol1-2 ) ;
17568: LD_VAR 0 4
17572: PPUSH
17573: LD_STRING D2-Sol1-2
17575: PPUSH
17576: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17580: LD_VAR 0 4
17584: PPUSH
17585: CALL_OW 258
17589: PUSH
17590: LD_INT 2
17592: EQUAL
17593: IFFALSE 17607
// Say ( tmp , D2-FSol1-2 ) ;
17595: LD_VAR 0 4
17599: PPUSH
17600: LD_STRING D2-FSol1-2
17602: PPUSH
17603: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17607: LD_EXP 19
17611: PPUSH
17612: LD_STRING D2-Kurt-3
17614: PPUSH
17615: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17619: LD_VAR 0 4
17623: PPUSH
17624: CALL_OW 258
17628: PUSH
17629: LD_INT 1
17631: EQUAL
17632: IFFALSE 17646
// Say ( tmp , D2-Sol1-3 ) ;
17634: LD_VAR 0 4
17638: PPUSH
17639: LD_STRING D2-Sol1-3
17641: PPUSH
17642: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17646: LD_VAR 0 4
17650: PPUSH
17651: CALL_OW 258
17655: PUSH
17656: LD_INT 2
17658: EQUAL
17659: IFFALSE 17673
// Say ( tmp , D2-FSol1-3 ) ;
17661: LD_VAR 0 4
17665: PPUSH
17666: LD_STRING D2-FSol1-3
17668: PPUSH
17669: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17673: LD_EXP 19
17677: PPUSH
17678: LD_STRING D2-Kurt-4
17680: PPUSH
17681: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17685: LD_VAR 0 4
17689: PPUSH
17690: CALL_OW 258
17694: PUSH
17695: LD_INT 1
17697: EQUAL
17698: IFFALSE 17712
// Say ( tmp , D2-Sol1-4 ) ;
17700: LD_VAR 0 4
17704: PPUSH
17705: LD_STRING D2-Sol1-4
17707: PPUSH
17708: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17712: LD_VAR 0 4
17716: PPUSH
17717: CALL_OW 258
17721: PUSH
17722: LD_INT 2
17724: EQUAL
17725: IFFALSE 17739
// Say ( tmp , D2-FSol1-4 ) ;
17727: LD_VAR 0 4
17731: PPUSH
17732: LD_STRING D2-FSol1-4
17734: PPUSH
17735: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17739: LD_VAR 0 4
17743: PPUSH
17744: CALL_OW 258
17748: PUSH
17749: LD_INT 1
17751: EQUAL
17752: IFFALSE 17766
// Say ( tmp , D2-Sol1-5 ) ;
17754: LD_VAR 0 4
17758: PPUSH
17759: LD_STRING D2-Sol1-5
17761: PPUSH
17762: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17766: LD_VAR 0 4
17770: PPUSH
17771: CALL_OW 258
17775: PUSH
17776: LD_INT 2
17778: EQUAL
17779: IFFALSE 17793
// Say ( tmp , D2-FSol1-5 ) ;
17781: LD_VAR 0 4
17785: PPUSH
17786: LD_STRING D2-FSol1-5
17788: PPUSH
17789: CALL_OW 88
// DialogueOff ;
17793: CALL_OW 7
// end ; dec = ShowQuery1 ;
17797: LD_ADDR_VAR 0 6
17801: PUSH
17802: CALL 5573 0 0
17806: ST_TO_ADDR
// if dec = 1 then
17807: LD_VAR 0 6
17811: PUSH
17812: LD_INT 1
17814: EQUAL
17815: IFFALSE 17857
// begin DialogueOn ;
17817: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17821: LD_EXP 19
17825: PPUSH
17826: LD_STRING D2a-Kurt-1
17828: PPUSH
17829: CALL_OW 88
// DialogueOff ;
17833: CALL_OW 7
// InGameOff ;
17837: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 2
17846: PPUSH
17847: LD_INT 2
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 80
// end ; if dec = 2 then
17857: LD_VAR 0 6
17861: PUSH
17862: LD_INT 2
17864: EQUAL
17865: IFFALSE 18365
// begin DialogueOn ;
17867: CALL_OW 6
// if tmp = JMM then
17871: LD_VAR 0 4
17875: PUSH
17876: LD_EXP 1
17880: EQUAL
17881: IFFALSE 17937
// begin Say ( JMM , D2b-JMM-1 ) ;
17883: LD_EXP 1
17887: PPUSH
17888: LD_STRING D2b-JMM-1
17890: PPUSH
17891: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17895: LD_EXP 19
17899: PPUSH
17900: LD_STRING D2b-Kurt-1
17902: PPUSH
17903: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17907: LD_EXP 1
17911: PPUSH
17912: LD_STRING D2b-JMM-2
17914: PPUSH
17915: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17919: LD_EXP 19
17923: PPUSH
17924: LD_STRING D2b-Kurt-2
17926: PPUSH
17927: CALL_OW 88
// DialogueOff ;
17931: CALL_OW 7
// end else
17935: GO 18127
// begin if GetSex ( tmp ) = 1 then
17937: LD_VAR 0 4
17941: PPUSH
17942: CALL_OW 258
17946: PUSH
17947: LD_INT 1
17949: EQUAL
17950: IFFALSE 17964
// Say ( tmp , D2b-Sol1-1 ) ;
17952: LD_VAR 0 4
17956: PPUSH
17957: LD_STRING D2b-Sol1-1
17959: PPUSH
17960: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17964: LD_VAR 0 4
17968: PPUSH
17969: CALL_OW 258
17973: PUSH
17974: LD_INT 2
17976: EQUAL
17977: IFFALSE 17991
// Say ( tmp , D2b-FSol1-1 ) ;
17979: LD_VAR 0 4
17983: PPUSH
17984: LD_STRING D2b-FSol1-1
17986: PPUSH
17987: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17991: LD_EXP 19
17995: PPUSH
17996: LD_STRING D2b-Kurt-1
17998: PPUSH
17999: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18003: LD_VAR 0 4
18007: PPUSH
18008: CALL_OW 258
18012: PUSH
18013: LD_INT 1
18015: EQUAL
18016: IFFALSE 18030
// Say ( tmp , D2b-Sol1-2 ) ;
18018: LD_VAR 0 4
18022: PPUSH
18023: LD_STRING D2b-Sol1-2
18025: PPUSH
18026: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18030: LD_VAR 0 4
18034: PPUSH
18035: CALL_OW 258
18039: PUSH
18040: LD_INT 2
18042: EQUAL
18043: IFFALSE 18057
// Say ( tmp , D2b-FSol1-2 ) ;
18045: LD_VAR 0 4
18049: PPUSH
18050: LD_STRING D2b-FSol1-2
18052: PPUSH
18053: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18057: LD_EXP 19
18061: PPUSH
18062: LD_STRING D2b-Kurt-2
18064: PPUSH
18065: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18069: LD_VAR 0 4
18073: PPUSH
18074: CALL_OW 258
18078: PUSH
18079: LD_INT 1
18081: EQUAL
18082: IFFALSE 18096
// Say ( tmp , D2c-Sol1-2 ) ;
18084: LD_VAR 0 4
18088: PPUSH
18089: LD_STRING D2c-Sol1-2
18091: PPUSH
18092: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18096: LD_VAR 0 4
18100: PPUSH
18101: CALL_OW 258
18105: PUSH
18106: LD_INT 2
18108: EQUAL
18109: IFFALSE 18123
// Say ( tmp , D2c-FSol1-2 ) ;
18111: LD_VAR 0 4
18115: PPUSH
18116: LD_STRING D2c-FSol1-2
18118: PPUSH
18119: CALL_OW 88
// DialogueOff ;
18123: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18127: LD_ADDR_VAR 0 7
18131: PUSH
18132: CALL 5647 0 0
18136: ST_TO_ADDR
// if dec2 = 1 then
18137: LD_VAR 0 7
18141: PUSH
18142: LD_INT 1
18144: EQUAL
18145: IFFALSE 18187
// begin DialogueOn ;
18147: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18151: LD_EXP 19
18155: PPUSH
18156: LD_STRING D2a-Kurt-1
18158: PPUSH
18159: CALL_OW 88
// DialogueOff ;
18163: CALL_OW 7
// InGameOff ;
18167: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18171: LD_INT 1
18173: PPUSH
18174: LD_INT 2
18176: PPUSH
18177: LD_INT 2
18179: PPUSH
18180: LD_INT 1
18182: PPUSH
18183: CALL_OW 80
// end ; if dec2 = 2 then
18187: LD_VAR 0 7
18191: PUSH
18192: LD_INT 2
18194: EQUAL
18195: IFFALSE 18365
// begin if tmp = JMM then
18197: LD_VAR 0 4
18201: PUSH
18202: LD_EXP 1
18206: EQUAL
18207: IFFALSE 18267
// begin DialogueOn ;
18209: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18213: LD_EXP 1
18217: PPUSH
18218: LD_STRING D2c-JMM-1
18220: PPUSH
18221: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18225: LD_EXP 19
18229: PPUSH
18230: LD_STRING D2c-Kurt-1
18232: PPUSH
18233: CALL_OW 88
// DialogueOff ;
18237: CALL_OW 7
// InGameOff ;
18241: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18245: LD_EXP 19
18249: PPUSH
18250: LD_INT 9
18252: PPUSH
18253: CALL_OW 113
// readyToEscape = 1 ;
18257: LD_ADDR_EXP 21
18261: PUSH
18262: LD_INT 1
18264: ST_TO_ADDR
// end else
18265: GO 18365
// begin DialogueOn ;
18267: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18271: LD_VAR 0 4
18275: PPUSH
18276: CALL_OW 258
18280: PUSH
18281: LD_INT 1
18283: EQUAL
18284: IFFALSE 18298
// Say ( tmp , D2c-Sol1-1 ) ;
18286: LD_VAR 0 4
18290: PPUSH
18291: LD_STRING D2c-Sol1-1
18293: PPUSH
18294: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18298: LD_VAR 0 4
18302: PPUSH
18303: CALL_OW 258
18307: PUSH
18308: LD_INT 2
18310: EQUAL
18311: IFFALSE 18325
// Say ( tmp , D2c-FSol1-1 ) ;
18313: LD_VAR 0 4
18317: PPUSH
18318: LD_STRING D2c-FSol1-1
18320: PPUSH
18321: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18325: LD_EXP 19
18329: PPUSH
18330: LD_STRING D2c-Kurt-1
18332: PPUSH
18333: CALL_OW 88
// DialogueOff ;
18337: CALL_OW 7
// InGameOff ;
18341: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18345: LD_EXP 19
18349: PPUSH
18350: LD_INT 9
18352: PPUSH
18353: CALL_OW 113
// readyToEscape = 1 ;
18357: LD_ADDR_EXP 21
18361: PUSH
18362: LD_INT 1
18364: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18365: LD_VAR 0 6
18369: PUSH
18370: LD_INT 3
18372: EQUAL
18373: IFFALSE 18547
// begin DialogueOn ;
18375: CALL_OW 6
// if tmp = JMM then
18379: LD_VAR 0 4
18383: PUSH
18384: LD_EXP 1
18388: EQUAL
18389: IFFALSE 18449
// begin DialogueOn ;
18391: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18395: LD_EXP 1
18399: PPUSH
18400: LD_STRING D2c-JMM-1
18402: PPUSH
18403: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18407: LD_EXP 19
18411: PPUSH
18412: LD_STRING D2c-Kurt-1
18414: PPUSH
18415: CALL_OW 88
// DialogueOff ;
18419: CALL_OW 7
// InGameOff ;
18423: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18427: LD_EXP 19
18431: PPUSH
18432: LD_INT 9
18434: PPUSH
18435: CALL_OW 113
// readyToEscape = 1 ;
18439: LD_ADDR_EXP 21
18443: PUSH
18444: LD_INT 1
18446: ST_TO_ADDR
// end else
18447: GO 18547
// begin DialogueOn ;
18449: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18453: LD_VAR 0 4
18457: PPUSH
18458: CALL_OW 258
18462: PUSH
18463: LD_INT 1
18465: EQUAL
18466: IFFALSE 18480
// Say ( tmp , D2c-Sol1-1 ) ;
18468: LD_VAR 0 4
18472: PPUSH
18473: LD_STRING D2c-Sol1-1
18475: PPUSH
18476: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18480: LD_VAR 0 4
18484: PPUSH
18485: CALL_OW 258
18489: PUSH
18490: LD_INT 2
18492: EQUAL
18493: IFFALSE 18507
// Say ( tmp , D2c-FSol1-1 ) ;
18495: LD_VAR 0 4
18499: PPUSH
18500: LD_STRING D2c-FSol1-1
18502: PPUSH
18503: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18507: LD_EXP 19
18511: PPUSH
18512: LD_STRING D2c-Kurt-1
18514: PPUSH
18515: CALL_OW 88
// DialogueOff ;
18519: CALL_OW 7
// InGameOff ;
18523: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18527: LD_EXP 19
18531: PPUSH
18532: LD_INT 9
18534: PPUSH
18535: CALL_OW 113
// readyToEscape = 1 ;
18539: LD_ADDR_EXP 21
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18547: LD_ADDR_EXP 29
18551: PUSH
18552: LD_INT 0
18554: ST_TO_ADDR
// end ; end_of_file
18555: LD_VAR 0 1
18559: RET
// every 0 0$1 do
18560: GO 18562
18562: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18563: LD_INT 3
18565: PPUSH
18566: LD_INT 32
18568: PPUSH
18569: LD_INT 3
18571: PPUSH
18572: CALL 5702 0 3
18576: END
// every 0 0$1 do
18577: GO 18579
18579: DISABLE
// begin enable ;
18580: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18581: LD_INT 3
18583: PPUSH
18584: LD_INT 2
18586: PPUSH
18587: CALL 5787 0 2
// if disableHealAI = 0 then
18591: LD_EXP 33
18595: PUSH
18596: LD_INT 0
18598: EQUAL
18599: IFFALSE 18617
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18601: LD_INT 3
18603: PPUSH
18604: LD_INT 10
18606: PPUSH
18607: LD_INT 11
18609: PPUSH
18610: LD_INT 32
18612: PPUSH
18613: CALL 6046 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18617: LD_INT 3
18619: PPUSH
18620: LD_INT 51
18622: PPUSH
18623: LD_INT 7
18625: PPUSH
18626: CALL 7817 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18630: LD_INT 3
18632: PPUSH
18633: LD_INT 14
18635: PPUSH
18636: LD_INT 121
18638: PPUSH
18639: LD_INT 100
18641: PPUSH
18642: CALL 6978 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18646: LD_INT 3
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL 6466 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18656: LD_INT 3
18658: PPUSH
18659: LD_EXP 31
18663: PPUSH
18664: CALL 7960 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18668: LD_INT 3
18670: PPUSH
18671: LD_INT 8
18673: PUSH
18674: LD_INT 67
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: PPUSH
18684: LD_INT 2
18686: PPUSH
18687: CALL_OW 12
18691: ARRAY
18692: PPUSH
18693: LD_INT 11
18695: PPUSH
18696: CALL 8166 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18700: LD_INT 3
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL 8523 0 2
// end ;
18710: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18711: LD_INT 22
18713: PUSH
18714: LD_INT 3
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 55
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 3
18739: PUSH
18740: LD_INT 34
18742: PUSH
18743: LD_INT 51
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: PPUSH
18760: CALL_OW 69
18764: PUSH
18765: LD_INT 0
18767: EQUAL
18768: PUSH
18769: LD_INT 21
18771: PPUSH
18772: CALL_OW 255
18776: PUSH
18777: LD_INT 3
18779: EQUAL
18780: AND
18781: PUSH
18782: LD_INT 21
18784: PPUSH
18785: CALL_OW 302
18789: AND
18790: PUSH
18791: LD_INT 2
18793: PPUSH
18794: CALL_OW 255
18798: PUSH
18799: LD_INT 3
18801: EQUAL
18802: AND
18803: PUSH
18804: LD_INT 2
18806: PPUSH
18807: CALL_OW 302
18811: AND
18812: IFFALSE 18996
18814: GO 18816
18816: DISABLE
// begin enable ;
18817: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18818: LD_INT 2
18820: PPUSH
18821: CALL_OW 274
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 1000
18831: PPUSH
18832: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
18836: LD_INT 3
18838: PPUSH
18839: LD_INT 21
18841: PPUSH
18842: LD_INT 5
18844: PUSH
18845: LD_INT 6
18847: PUSH
18848: LD_INT 6
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PUSH
18856: LD_OWVAR 67
18860: ARRAY
18861: PPUSH
18862: LD_INT 43
18864: PUSH
18865: LD_INT 43
18867: PUSH
18868: LD_INT 44
18870: PUSH
18871: LD_INT 44
18873: PUSH
18874: LD_INT 46
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 43
18886: PUSH
18887: LD_INT 43
18889: PUSH
18890: LD_INT 44
18892: PUSH
18893: LD_INT 44
18895: PUSH
18896: LD_INT 44
18898: PUSH
18899: LD_INT 46
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 44
18912: PUSH
18913: LD_INT 44
18915: PUSH
18916: LD_INT 44
18918: PUSH
18919: LD_INT 44
18921: PUSH
18922: LD_INT 46
18924: PUSH
18925: LD_INT 46
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_OWVAR 67
18945: ARRAY
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: LD_INT 1
18952: PPUSH
18953: LD_INT 22
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_INT 24
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_INT 2
18971: PPUSH
18972: CALL_OW 12
18976: ARRAY
18977: PUSH
18978: LD_INT 24
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: LIST
18985: PUSH
18986: LD_OWVAR 67
18990: ARRAY
18991: PPUSH
18992: CALL 6312 0 7
// end ;
18996: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18997: LD_INT 17
18999: PPUSH
19000: CALL_OW 255
19004: PUSH
19005: LD_INT 3
19007: EQUAL
19008: PUSH
19009: LD_INT 17
19011: PPUSH
19012: CALL_OW 302
19016: AND
19017: PUSH
19018: LD_INT 2
19020: PPUSH
19021: CALL_OW 255
19025: PUSH
19026: LD_INT 3
19028: EQUAL
19029: AND
19030: PUSH
19031: LD_INT 2
19033: PPUSH
19034: CALL_OW 302
19038: AND
19039: IFFALSE 19106
19041: GO 19043
19043: DISABLE
// begin enable ;
19044: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19045: LD_INT 17
19047: PPUSH
19048: LD_INT 22
19050: PPUSH
19051: LD_INT 1
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: LD_INT 42
19059: PUSH
19060: LD_INT 43
19062: PUSH
19063: LD_INT 44
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 1
19073: PPUSH
19074: LD_INT 3
19076: PPUSH
19077: CALL_OW 12
19081: ARRAY
19082: PPUSH
19083: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19087: LD_INT 17
19089: PPUSH
19090: LD_INT 22
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: LD_INT 51
19101: PPUSH
19102: CALL_OW 185
// end ;
19106: END
// every 2 2$0 do var i , j ;
19107: GO 19109
19109: DISABLE
19110: LD_INT 0
19112: PPUSH
19113: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19114: LD_INT 14700
19116: PUSH
19117: LD_INT 33600
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 1
19126: PPUSH
19127: LD_INT 2
19129: PPUSH
19130: CALL_OW 12
19134: ARRAY
19135: PPUSH
19136: CALL_OW 67
// disableHealAI = 1 ;
19140: LD_ADDR_EXP 33
19144: PUSH
19145: LD_INT 1
19147: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19148: LD_ADDR_VAR 0 1
19152: PUSH
19153: LD_INT 22
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 25
19165: PUSH
19166: LD_INT 4
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: PUSH
19182: FOR_IN
19183: IFFALSE 19196
// ComExitBuilding ( i ) ;
19185: LD_VAR 0 1
19189: PPUSH
19190: CALL_OW 122
19194: GO 19182
19196: POP
19197: POP
// wait ( 0 0$1 ) ;
19198: LD_INT 35
19200: PPUSH
19201: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19205: LD_INT 35
19207: PPUSH
19208: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19212: LD_ADDR_VAR 0 1
19216: PUSH
19217: LD_INT 22
19219: PUSH
19220: LD_INT 3
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 4
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PPUSH
19241: CALL_OW 69
19245: PUSH
19246: FOR_IN
19247: IFFALSE 19324
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19249: LD_ADDR_VAR 0 2
19253: PUSH
19254: LD_INT 19
19256: PPUSH
19257: LD_INT 22
19259: PUSH
19260: LD_INT 0
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 25
19269: PUSH
19270: LD_INT 12
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PPUSH
19281: CALL_OW 70
19285: PUSH
19286: FOR_IN
19287: IFFALSE 19320
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19289: LD_VAR 0 1
19293: PPUSH
19294: LD_VAR 0 2
19298: PPUSH
19299: CALL_OW 250
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 251
19313: PPUSH
19314: CALL_OW 191
// end ;
19318: GO 19286
19320: POP
19321: POP
// end ;
19322: GO 19246
19324: POP
19325: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19326: LD_INT 22
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 25
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: PUSH
19355: LD_INT 0
19357: EQUAL
19358: PUSH
19359: LD_EXP 32
19363: PUSH
19364: LD_INT 6
19366: PUSH
19367: LD_INT 7
19369: PUSH
19370: LD_INT 8
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: LD_OWVAR 67
19382: ARRAY
19383: GREATEREQUAL
19384: OR
19385: PUSH
19386: LD_INT 19
19388: PPUSH
19389: LD_INT 22
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 25
19401: PUSH
19402: LD_INT 12
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 70
19417: PUSH
19418: LD_INT 0
19420: EQUAL
19421: OR
19422: IFFALSE 19205
// disableHealAI = 0 ;
19424: LD_ADDR_EXP 33
19428: PUSH
19429: LD_INT 0
19431: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19432: LD_ADDR_VAR 0 1
19436: PUSH
19437: LD_INT 22
19439: PUSH
19440: LD_INT 3
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 25
19449: PUSH
19450: LD_INT 12
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 69
19465: PUSH
19466: FOR_IN
19467: IFFALSE 19483
// SetClass ( i , 16 ) ;
19469: LD_VAR 0 1
19473: PPUSH
19474: LD_INT 16
19476: PPUSH
19477: CALL_OW 336
19481: GO 19466
19483: POP
19484: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19485: LD_ADDR_VAR 0 1
19489: PUSH
19490: LD_INT 22
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 25
19502: PUSH
19503: LD_INT 4
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: PUSH
19519: FOR_IN
19520: IFFALSE 19539
// ComMoveXY ( i , 113 , 94 ) ;
19522: LD_VAR 0 1
19526: PPUSH
19527: LD_INT 113
19529: PPUSH
19530: LD_INT 94
19532: PPUSH
19533: CALL_OW 111
19537: GO 19519
19539: POP
19540: POP
// end ;
19541: PPOPN 2
19543: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19544: LD_INT 21
19546: PPUSH
19547: CALL_OW 255
19551: PUSH
19552: LD_INT 3
19554: EQUAL
19555: PUSH
19556: LD_INT 21
19558: PPUSH
19559: CALL_OW 302
19563: AND
19564: PUSH
19565: LD_INT 22
19567: PUSH
19568: LD_INT 3
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 34
19577: PUSH
19578: LD_INT 51
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PPUSH
19589: CALL_OW 69
19593: PUSH
19594: LD_INT 0
19596: EQUAL
19597: AND
19598: IFFALSE 19630
19600: GO 19602
19602: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19603: LD_INT 21
19605: PPUSH
19606: LD_INT 23
19608: PPUSH
19609: LD_INT 1
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: LD_INT 51
19617: PPUSH
19618: CALL_OW 185
// wait ( 5 5$0 ) ;
19622: LD_INT 10500
19624: PPUSH
19625: CALL_OW 67
// enable ;
19629: ENABLE
// end ; end_of_file
19630: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19631: LD_EXP 26
19635: PUSH
19636: LD_INT 0
19638: LESSEQUAL
19639: IFFALSE 19788
19641: GO 19643
19643: DISABLE
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19649: LD_ADDR_VAR 0 2
19653: PUSH
19654: LD_INT 22
19656: PUSH
19657: LD_INT 1
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 21
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 30
19679: PUSH
19680: LD_INT 0
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 30
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: PPUSH
19707: CALL_OW 69
19711: ST_TO_ADDR
// for i in tmp do
19712: LD_ADDR_VAR 0 1
19716: PUSH
19717: LD_VAR 0 2
19721: PUSH
19722: FOR_IN
19723: IFFALSE 19756
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19725: LD_ADDR_VAR 0 3
19729: PUSH
19730: LD_VAR 0 3
19734: PUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 274
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 275
19752: PLUS
19753: ST_TO_ADDR
19754: GO 19722
19756: POP
19757: POP
// if yourCrates >= needCrates then
19758: LD_VAR 0 3
19762: PUSH
19763: LD_EXP 25
19767: GREATEREQUAL
19768: IFFALSE 19781
// begin FinishMission ( yourCrates ) ;
19770: LD_VAR 0 3
19774: PPUSH
19775: CALL 19791 0 1
// end else
19779: GO 19788
// begin YouLost ( matmin ) ;
19781: LD_STRING matmin
19783: PPUSH
19784: CALL_OW 104
// end ; end ;
19788: PPOPN 3
19790: END
// export function FinishMission ( crates ) ; begin
19791: LD_INT 0
19793: PPUSH
// if crates + 100 > crates then
19794: LD_VAR 0 1
19798: PUSH
19799: LD_INT 100
19801: PLUS
19802: PUSH
19803: LD_VAR 0 1
19807: GREATER
19808: IFFALSE 19832
// begin AddMedal ( cans , 1 ) ;
19810: LD_STRING cans
19812: PPUSH
19813: LD_INT 1
19815: PPUSH
19816: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19820: LD_INT 1
19822: PPUSH
19823: LD_STRING 06_crates_1
19825: PPUSH
19826: CALL_OW 39
// end else
19830: GO 19853
// begin AddMedal ( cans , - 1 ) ;
19832: LD_STRING cans
19834: PPUSH
19835: LD_INT 1
19837: NEG
19838: PPUSH
19839: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19843: LD_INT 0
19845: PPUSH
19846: LD_STRING 06_crates_1
19848: PPUSH
19849: CALL_OW 39
// end ; if unitLost < 2 then
19853: LD_EXP 30
19857: PUSH
19858: LD_INT 2
19860: LESS
19861: IFFALSE 19875
// begin AddMedal ( people , 1 ) ;
19863: LD_STRING people
19865: PPUSH
19866: LD_INT 1
19868: PPUSH
19869: CALL_OW 101
// end else
19873: GO 19886
// begin AddMedal ( people , - 1 ) ;
19875: LD_STRING people
19877: PPUSH
19878: LD_INT 1
19880: NEG
19881: PPUSH
19882: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19886: LD_EXP 28
19890: PPUSH
19891: LD_STRING 06_remoteVehs_1
19893: PPUSH
19894: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19898: LD_EXP 28
19902: PUSH
19903: LD_INT 1
19905: EQUAL
19906: IFFALSE 19920
// begin AddMedal ( remote , 1 ) ;
19908: LD_STRING remote
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: CALL_OW 101
// end else
19918: GO 19960
// begin if GetTech ( 18 , 1 ) = state_enabled then
19920: LD_INT 18
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: CALL_OW 321
19930: PUSH
19931: LD_INT 1
19933: EQUAL
19934: IFFALSE 19949
// begin AddMedal ( remote , - 1 ) ;
19936: LD_STRING remote
19938: PPUSH
19939: LD_INT 1
19941: NEG
19942: PPUSH
19943: CALL_OW 101
// end else
19947: GO 19960
// begin AddMedal ( remote , - 2 ) ;
19949: LD_STRING remote
19951: PPUSH
19952: LD_INT 2
19954: NEG
19955: PPUSH
19956: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
19960: LD_EXP 20
19964: PPUSH
19965: LD_STRING 06_KurtStatus_1
19967: PPUSH
19968: CALL_OW 39
// GiveMedals ( Main ) ;
19972: LD_STRING Main
19974: PPUSH
19975: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19979: LD_INT 50
19981: PUSH
19982: EMPTY
19983: LIST
19984: PUSH
19985: LD_INT 22
19987: PUSH
19988: LD_INT 1
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 21
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 1
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 25
20030: PUSH
20031: LD_INT 3
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 25
20040: PUSH
20041: LD_INT 4
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: PPUSH
20061: CALL_OW 69
20065: PPUSH
20066: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20070: LD_EXP 1
20074: PPUSH
20075: LD_EXP 41
20079: PUSH
20080: LD_STRING JMM
20082: STR
20083: PPUSH
20084: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20088: LD_EXP 2
20092: PPUSH
20093: LD_EXP 41
20097: PUSH
20098: LD_STRING Lisa
20100: STR
20101: PPUSH
20102: CALL 5190 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20106: LD_EXP 3
20110: PPUSH
20111: LD_EXP 41
20115: PUSH
20116: LD_STRING Bobby
20118: STR
20119: PPUSH
20120: CALL 5190 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20124: LD_EXP 4
20128: PPUSH
20129: LD_EXP 41
20133: PUSH
20134: LD_STRING Cyrus
20136: STR
20137: PPUSH
20138: CALL 5190 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20142: LD_EXP 5
20146: PPUSH
20147: LD_EXP 41
20151: PUSH
20152: LD_STRING Frank
20154: STR
20155: PPUSH
20156: CALL 5190 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20160: LD_EXP 6
20164: PPUSH
20165: LD_EXP 41
20169: PUSH
20170: LD_STRING Brown
20172: STR
20173: PPUSH
20174: CALL 5190 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20178: LD_EXP 7
20182: PPUSH
20183: LD_EXP 41
20187: PUSH
20188: LD_STRING Donaldson
20190: STR
20191: PPUSH
20192: CALL 5190 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20196: LD_EXP 8
20200: PPUSH
20201: LD_EXP 41
20205: PUSH
20206: LD_STRING Gladstone
20208: STR
20209: PPUSH
20210: CALL 5190 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20214: LD_EXP 9
20218: PPUSH
20219: LD_EXP 41
20223: PUSH
20224: LD_STRING Denis
20226: STR
20227: PPUSH
20228: CALL 5190 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20232: LD_EXP 15
20236: PPUSH
20237: LD_EXP 41
20241: PUSH
20242: LD_STRING Joan
20244: STR
20245: PPUSH
20246: CALL 5190 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20250: LD_EXP 16
20254: PPUSH
20255: LD_STRING 06_JoanStatus_1
20257: PPUSH
20258: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20262: LD_INT 50
20264: PUSH
20265: EMPTY
20266: LIST
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 2
20290: PUSH
20291: LD_INT 25
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 25
20303: PUSH
20304: LD_INT 2
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 25
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 25
20323: PUSH
20324: LD_INT 4
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 69
20348: PUSH
20349: LD_EXP 1
20353: PUSH
20354: LD_EXP 2
20358: PUSH
20359: LD_EXP 3
20363: PUSH
20364: LD_EXP 4
20368: PUSH
20369: LD_EXP 5
20373: PUSH
20374: LD_EXP 6
20378: PUSH
20379: LD_EXP 7
20383: PUSH
20384: LD_EXP 8
20388: PUSH
20389: LD_EXP 9
20393: PUSH
20394: LD_EXP 15
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: DIFF
20411: PPUSH
20412: LD_STRING 06_other_survivors
20414: PPUSH
20415: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20419: LD_INT 50
20421: PUSH
20422: EMPTY
20423: LIST
20424: PUSH
20425: LD_INT 22
20427: PUSH
20428: LD_INT 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 25
20450: PUSH
20451: LD_INT 12
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: LD_INT 25
20460: PUSH
20461: LD_INT 16
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PPUSH
20479: CALL_OW 69
20483: PPUSH
20484: LD_STRING 06_other_apemans
20486: PPUSH
20487: CALL_OW 38
// YouWin ;
20491: CALL_OW 103
// end ; end_of_file
20495: LD_VAR 0 2
20499: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
20500: LD_EXP 39
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: PUSH
20519: LD_OWVAR 67
20523: ARRAY
20524: EQUAL
20525: IFFALSE 20640
20527: GO 20529
20529: DISABLE
// begin enable ;
20530: ENABLE
// sendedConvoys = 0 ;
20531: LD_ADDR_EXP 39
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20539: LD_INT 6
20541: PPUSH
20542: LD_INT 3
20544: PPUSH
20545: LD_INT 5
20547: PPUSH
20548: LD_INT 10
20550: PPUSH
20551: CALL_OW 12
20555: PUSH
20556: LD_INT 5
20558: PPUSH
20559: LD_INT 11
20561: PPUSH
20562: CALL_OW 12
20566: PUSH
20567: LD_INT 8
20569: PPUSH
20570: LD_INT 12
20572: PPUSH
20573: CALL_OW 12
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: PUSH
20583: LD_OWVAR 67
20587: ARRAY
20588: PPUSH
20589: LD_INT 0
20591: PPUSH
20592: LD_INT 0
20594: PPUSH
20595: LD_INT 0
20597: PPUSH
20598: LD_INT 3
20600: PPUSH
20601: LD_EXP 34
20605: PPUSH
20606: LD_EXP 35
20610: PPUSH
20611: CALL_OW 12
20615: PPUSH
20616: LD_INT 18
20618: PPUSH
20619: LD_INT 17
20621: PPUSH
20622: LD_INT 1
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: LD_INT 2
20630: PPUSH
20631: CALL_OW 12
20635: PPUSH
20636: CALL 8753 0 12
// end ; end_of_file
20640: END
// export function PrepareNature ; var i , un ; begin
20641: LD_INT 0
20643: PPUSH
20644: PPUSH
20645: PPUSH
// for i = 1 to Difficulty + 2 do
20646: LD_ADDR_VAR 0 2
20650: PUSH
20651: DOUBLE
20652: LD_INT 1
20654: DEC
20655: ST_TO_ADDR
20656: LD_OWVAR 67
20660: PUSH
20661: LD_INT 2
20663: PLUS
20664: PUSH
20665: FOR_TO
20666: IFFALSE 20775
// begin hc_sex = sex_male ;
20668: LD_ADDR_OWVAR 27
20672: PUSH
20673: LD_INT 1
20675: ST_TO_ADDR
// uc_side = 0 ;
20676: LD_ADDR_OWVAR 20
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// uc_nation = nation_nature ;
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// hc_class = class_tiger ;
20692: LD_ADDR_OWVAR 28
20696: PUSH
20697: LD_INT 14
20699: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20700: LD_ADDR_OWVAR 31
20704: PUSH
20705: LD_EXP 35
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20725: LD_ADDR_OWVAR 35
20729: PUSH
20730: LD_INT 5
20732: NEG
20733: PPUSH
20734: LD_INT 5
20736: PPUSH
20737: CALL_OW 12
20741: PUSH
20742: LD_OWVAR 67
20746: MUL
20747: ST_TO_ADDR
// un = CreateHuman ;
20748: LD_ADDR_VAR 0 3
20752: PUSH
20753: CALL_OW 44
20757: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_INT 20
20765: PPUSH
20766: LD_INT 0
20768: PPUSH
20769: CALL_OW 49
// end ;
20773: GO 20665
20775: POP
20776: POP
// for i = 1 to rand ( 3 , 4 ) do
20777: LD_ADDR_VAR 0 2
20781: PUSH
20782: DOUBLE
20783: LD_INT 1
20785: DEC
20786: ST_TO_ADDR
20787: LD_INT 3
20789: PPUSH
20790: LD_INT 4
20792: PPUSH
20793: CALL_OW 12
20797: PUSH
20798: FOR_TO
20799: IFFALSE 20893
// begin hc_sex = sex_male ;
20801: LD_ADDR_OWVAR 27
20805: PUSH
20806: LD_INT 1
20808: ST_TO_ADDR
// uc_side = 0 ;
20809: LD_ADDR_OWVAR 20
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// uc_nation = nation_nature ;
20817: LD_ADDR_OWVAR 21
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// hc_class = 18 ;
20825: LD_ADDR_OWVAR 28
20829: PUSH
20830: LD_INT 18
20832: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20833: LD_ADDR_OWVAR 31
20837: PUSH
20838: LD_EXP 35
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: ST_TO_ADDR
// hc_agressivity = 0 ;
20858: LD_ADDR_OWVAR 35
20862: PUSH
20863: LD_INT 0
20865: ST_TO_ADDR
// un = CreateHuman ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: CALL_OW 44
20875: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20876: LD_VAR 0 3
20880: PPUSH
20881: LD_INT 20
20883: PPUSH
20884: LD_INT 0
20886: PPUSH
20887: CALL_OW 49
// end ;
20891: GO 20798
20893: POP
20894: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
20895: LD_ADDR_VAR 0 2
20899: PUSH
20900: DOUBLE
20901: LD_INT 1
20903: DEC
20904: ST_TO_ADDR
20905: LD_INT 1
20907: PPUSH
20908: LD_INT 3
20910: PPUSH
20911: CALL_OW 12
20915: PUSH
20916: LD_OWVAR 67
20920: PLUS
20921: PUSH
20922: FOR_TO
20923: IFFALSE 21104
// begin hc_sex = sex_male ;
20925: LD_ADDR_OWVAR 27
20929: PUSH
20930: LD_INT 1
20932: ST_TO_ADDR
// uc_side = 0 ;
20933: LD_ADDR_OWVAR 20
20937: PUSH
20938: LD_INT 0
20940: ST_TO_ADDR
// uc_nation = nation_nature ;
20941: LD_ADDR_OWVAR 21
20945: PUSH
20946: LD_INT 0
20948: ST_TO_ADDR
// hc_class = class_apeman ;
20949: LD_ADDR_OWVAR 28
20953: PUSH
20954: LD_INT 12
20956: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
20957: LD_ADDR_OWVAR 31
20961: PUSH
20962: LD_EXP 34
20966: PPUSH
20967: LD_EXP 35
20971: PPUSH
20972: CALL_OW 12
20976: PUSH
20977: LD_EXP 34
20981: PPUSH
20982: LD_EXP 35
20986: PPUSH
20987: CALL_OW 12
20991: PUSH
20992: LD_EXP 34
20996: PPUSH
20997: LD_EXP 35
21001: PPUSH
21002: CALL_OW 12
21006: PUSH
21007: LD_EXP 34
21011: PPUSH
21012: LD_EXP 35
21016: PPUSH
21017: CALL_OW 12
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21028: LD_ADDR_OWVAR 35
21032: PUSH
21033: LD_INT 20
21035: PPUSH
21036: LD_INT 30
21038: PPUSH
21039: CALL_OW 12
21043: PUSH
21044: LD_INT 30
21046: PPUSH
21047: LD_INT 40
21049: PPUSH
21050: CALL_OW 12
21054: PUSH
21055: LD_INT 40
21057: PPUSH
21058: LD_INT 50
21060: PPUSH
21061: CALL_OW 12
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: LD_OWVAR 67
21075: ARRAY
21076: ST_TO_ADDR
// un = CreateHuman ;
21077: LD_ADDR_VAR 0 3
21081: PUSH
21082: CALL_OW 44
21086: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 21
21094: PPUSH
21095: LD_INT 0
21097: PPUSH
21098: CALL_OW 49
// end ;
21102: GO 20922
21104: POP
21105: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21106: LD_ADDR_VAR 0 2
21110: PUSH
21111: DOUBLE
21112: LD_INT 1
21114: DEC
21115: ST_TO_ADDR
21116: LD_INT 5
21118: PPUSH
21119: LD_INT 6
21121: PPUSH
21122: CALL_OW 12
21126: PUSH
21127: LD_OWVAR 67
21131: PLUS
21132: PUSH
21133: FOR_TO
21134: IFFALSE 21280
// begin hc_sex = sex_male ;
21136: LD_ADDR_OWVAR 27
21140: PUSH
21141: LD_INT 1
21143: ST_TO_ADDR
// uc_side = 0 ;
21144: LD_ADDR_OWVAR 20
21148: PUSH
21149: LD_INT 0
21151: ST_TO_ADDR
// uc_nation = nation_nature ;
21152: LD_ADDR_OWVAR 21
21156: PUSH
21157: LD_INT 0
21159: ST_TO_ADDR
// hc_class = class_apeman ;
21160: LD_ADDR_OWVAR 28
21164: PUSH
21165: LD_INT 12
21167: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21168: LD_ADDR_OWVAR 31
21172: PUSH
21173: LD_EXP 34
21177: PPUSH
21178: LD_EXP 35
21182: PPUSH
21183: CALL_OW 12
21187: PUSH
21188: LD_EXP 34
21192: PPUSH
21193: LD_EXP 35
21197: PPUSH
21198: CALL_OW 12
21202: PUSH
21203: LD_OWVAR 67
21207: PLUS
21208: PUSH
21209: LD_EXP 34
21213: PPUSH
21214: LD_EXP 35
21218: PPUSH
21219: CALL_OW 12
21223: PUSH
21224: LD_EXP 34
21228: PPUSH
21229: LD_EXP 35
21233: PPUSH
21234: CALL_OW 12
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: ST_TO_ADDR
// hc_agressivity = 0 ;
21245: LD_ADDR_OWVAR 35
21249: PUSH
21250: LD_INT 0
21252: ST_TO_ADDR
// un = CreateHuman ;
21253: LD_ADDR_VAR 0 3
21257: PUSH
21258: CALL_OW 44
21262: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_INT 22
21270: PPUSH
21271: LD_INT 0
21273: PPUSH
21274: CALL_OW 49
// end ;
21278: GO 21133
21280: POP
21281: POP
// end ; end_of_file
21282: LD_VAR 0 1
21286: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21287: LD_EXP 1
21291: PPUSH
21292: CALL_OW 301
21296: IFFALSE 21308
21298: GO 21300
21300: DISABLE
// YouLost ( JMM ) ;
21301: LD_STRING JMM
21303: PPUSH
21304: CALL_OW 104
21308: END
