// export JMM , Gladstone , Frank , Woodruff , Lisa , Brown , Denis , Cyrus ; export Harisson , Doctor , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 33
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 18
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 19
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 16
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 17
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 12
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 31
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 21
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 22
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 24
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 32
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 27
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 25
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 26
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 23
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 17432 0 0
// PrepareDifficulty ;
 173: CALL 3984 0 0
// PrepareRussian ;
 177: CALL 3148 0 0
// PrepareHeroes ;
 181: CALL 424 0 0
// end ;
 185: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 186: LD_EXP 33
 190: PUSH
 191: LD_INT 1
 193: EQUAL
 194: IFFALSE 421
 196: GO 198
 198: DISABLE
 199: LD_INT 0
 201: PPUSH
// begin enable ;
 202: ENABLE
// fogoff ( true ) ;
 203: LD_INT 1
 205: PPUSH
 206: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 210: LD_ADDR_VAR 0 1
 214: PUSH
 215: LD_INT 22
 217: PUSH
 218: LD_INT 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 21
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: PPUSH
 239: CALL_OW 69
 243: PUSH
 244: FOR_IN
 245: IFFALSE 261
// SetLives ( i , 1000 ) ;
 247: LD_VAR 0 1
 251: PPUSH
 252: LD_INT 1000
 254: PPUSH
 255: CALL_OW 234
 259: GO 244
 261: POP
 262: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 263: LD_ADDR_VAR 0 1
 267: PUSH
 268: LD_INT 22
 270: PUSH
 271: LD_INT 1
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 0
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PPUSH
 292: CALL_OW 69
 296: PUSH
 297: FOR_IN
 298: IFFALSE 322
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 300: LD_VAR 0 1
 304: PPUSH
 305: CALL_OW 274
 309: PPUSH
 310: LD_INT 1
 312: PPUSH
 313: LD_INT 9999
 315: PPUSH
 316: CALL_OW 277
 320: GO 297
 322: POP
 323: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 324: LD_ADDR_VAR 0 1
 328: PUSH
 329: LD_INT 22
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: LD_INT 30
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PPUSH
 353: CALL_OW 69
 357: PUSH
 358: FOR_IN
 359: IFFALSE 383
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 361: LD_VAR 0 1
 365: PPUSH
 366: CALL_OW 274
 370: PPUSH
 371: LD_INT 2
 373: PPUSH
 374: LD_INT 9999
 376: PPUSH
 377: CALL_OW 277
 381: GO 358
 383: POP
 384: POP
// if IsSelected ( rudepo ) then
 385: LD_INT 2
 387: PPUSH
 388: CALL_OW 306
 392: IFFALSE 402
// your_side = 3 ;
 394: LD_ADDR_OWVAR 2
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// if IsSelected ( JMM ) then
 402: LD_EXP 1
 406: PPUSH
 407: CALL_OW 306
 411: IFFALSE 421
// your_side = 1 ;
 413: LD_ADDR_OWVAR 2
 417: PUSH
 418: LD_INT 1
 420: ST_TO_ADDR
// end ; end_of_file
 421: PPOPN 1
 423: END
// export function PrepareHeroes ; var veh ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
// uc_side = 1 ;
 428: LD_ADDR_OWVAR 20
 432: PUSH
 433: LD_INT 1
 435: ST_TO_ADDR
// uc_nation = 1 ;
 436: LD_ADDR_OWVAR 21
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 444: LD_ADDR_EXP 1
 448: PUSH
 449: LD_STRING JMM
 451: PPUSH
 452: LD_INT 0
 454: PPUSH
 455: CALL 3525 0 2
 459: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 460: LD_ADDR_EXP 5
 464: PUSH
 465: LD_STRING Lisa
 467: PPUSH
 468: LD_INT 0
 470: PPUSH
 471: CALL 3525 0 2
 475: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 476: LD_ADDR_EXP 6
 480: PUSH
 481: LD_STRING Brown
 483: PPUSH
 484: LD_INT 0
 486: PPUSH
 487: CALL 3525 0 2
 491: ST_TO_ADDR
// Woodruff = PrepareUnit ( EveWoodruff , false ) ;
 492: LD_ADDR_EXP 4
 496: PUSH
 497: LD_STRING EveWoodruff
 499: PPUSH
 500: LD_INT 0
 502: PPUSH
 503: CALL 3525 0 2
 507: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_STRING Gladstone
 515: PPUSH
 516: LD_INT 0
 518: PPUSH
 519: CALL 3525 0 2
 523: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
 524: LD_ADDR_EXP 3
 528: PUSH
 529: LD_STRING Frank
 531: PPUSH
 532: LD_INT 0
 534: PPUSH
 535: CALL 3525 0 2
 539: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 540: LD_ADDR_EXP 9
 544: PUSH
 545: LD_STRING Harisson
 547: PPUSH
 548: LD_INT 0
 550: PPUSH
 551: CALL 3525 0 2
 555: ST_TO_ADDR
// hc_class := 4 ;
 556: LD_ADDR_OWVAR 28
 560: PUSH
 561: LD_INT 4
 563: ST_TO_ADDR
// hc_sex := sex_male ;
 564: LD_ADDR_OWVAR 27
 568: PUSH
 569: LD_INT 1
 571: ST_TO_ADDR
// hc_gallery :=  ;
 572: LD_ADDR_OWVAR 33
 576: PUSH
 577: LD_STRING 
 579: ST_TO_ADDR
// hc_name :=  ;
 580: LD_ADDR_OWVAR 26
 584: PUSH
 585: LD_STRING 
 587: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
 588: LD_ADDR_OWVAR 31
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 1
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// Doctor = CreateHuman ;
 611: LD_ADDR_EXP 10
 615: PUSH
 616: CALL_OW 44
 620: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
 621: LD_ADDR_EXP 13
 625: PUSH
 626: CALL_OW 44
 630: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
 631: LD_EXP 13
 635: PPUSH
 636: LD_VAR 0 2
 640: PPUSH
 641: CALL_OW 52
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 645: LD_EXP 5
 649: PPUSH
 650: LD_INT 2
 652: PPUSH
 653: LD_INT 0
 655: PPUSH
 656: CALL_OW 49
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
 660: LD_EXP 6
 664: PPUSH
 665: LD_INT 2
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: CALL_OW 49
// PlaceUnitArea ( Woodruff , PlayerSpawn , false ) ;
 675: LD_EXP 4
 679: PPUSH
 680: LD_INT 2
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
 690: LD_EXP 2
 694: PPUSH
 695: LD_INT 2
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 705: LD_EXP 3
 709: PPUSH
 710: LD_INT 2
 712: PPUSH
 713: LD_INT 0
 715: PPUSH
 716: CALL_OW 49
// SetClass ( Brown , 2 ) ;
 720: LD_EXP 6
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: CALL_OW 336
// vc_engine = 1 ;
 732: LD_ADDR_OWVAR 39
 736: PUSH
 737: LD_INT 1
 739: ST_TO_ADDR
// vc_control = 1 ;
 740: LD_ADDR_OWVAR 38
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// vc_weapon = 12 ;
 748: LD_ADDR_OWVAR 40
 752: PUSH
 753: LD_INT 12
 755: ST_TO_ADDR
// vc_chassis = 2 ;
 756: LD_ADDR_OWVAR 37
 760: PUSH
 761: LD_INT 2
 763: ST_TO_ADDR
// veh = CreateVehicle ;
 764: LD_ADDR_VAR 0 2
 768: PUSH
 769: CALL_OW 45
 773: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 774: LD_VAR 0 2
 778: PPUSH
 779: LD_INT 2
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: CALL_OW 49
// PlaceHumanInUnit ( JMM , veh ) ;
 789: LD_EXP 1
 793: PPUSH
 794: LD_VAR 0 2
 798: PPUSH
 799: CALL_OW 52
// AddCargo ( veh , 1 , [ 100 , 80 , 50 ] [ Difficulty ] ) ;
 803: LD_VAR 0 2
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 100
 813: PUSH
 814: LD_INT 80
 816: PUSH
 817: LD_INT 50
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: PUSH
 825: LD_OWVAR 67
 829: ARRAY
 830: PPUSH
 831: CALL_OW 291
// SetFuel ( veh , 50 ) ;
 835: LD_VAR 0 2
 839: PPUSH
 840: LD_INT 50
 842: PPUSH
 843: CALL_OW 240
// end ;
 847: LD_VAR 0 1
 851: RET
// export function PrepareDenis ; begin
 852: LD_INT 0
 854: PPUSH
// uc_side = 1 ;
 855: LD_ADDR_OWVAR 20
 859: PUSH
 860: LD_INT 1
 862: ST_TO_ADDR
// uc_nation = 1 ;
 863: LD_ADDR_OWVAR 21
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 871: LD_ADDR_EXP 7
 875: PUSH
 876: LD_STRING Denis
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL 3525 0 2
 886: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
 887: LD_EXP 7
 891: PPUSH
 892: LD_INT 13
 894: PPUSH
 895: LD_INT 0
 897: PPUSH
 898: CALL_OW 49
// SetClass ( Denis , 4 ) ;
 902: LD_EXP 7
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: CALL_OW 336
// SetLives ( Denis , 750 ) ;
 914: LD_EXP 7
 918: PPUSH
 919: LD_INT 750
 921: PPUSH
 922: CALL_OW 234
// end ;
 926: LD_VAR 0 1
 930: RET
// export function HarrisonSupport ; var un , veh ; begin
 931: LD_INT 0
 933: PPUSH
 934: PPUSH
 935: PPUSH
// uc_side = 1 ;
 936: LD_ADDR_OWVAR 20
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// uc_nation = 1 ;
 944: LD_ADDR_OWVAR 21
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// vc_engine = 1 ;
 952: LD_ADDR_OWVAR 39
 956: PUSH
 957: LD_INT 1
 959: ST_TO_ADDR
// vc_control = 1 ;
 960: LD_ADDR_OWVAR 38
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
 968: LD_ADDR_OWVAR 40
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 4
 978: PUSH
 979: LD_INT 2
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: LD_OWVAR 67
 991: ARRAY
 992: ST_TO_ADDR
// vc_chassis = 2 ;
 993: LD_ADDR_OWVAR 37
 997: PUSH
 998: LD_INT 2
1000: ST_TO_ADDR
// veh = CreateVehicle ;
1001: LD_ADDR_VAR 0 3
1005: PUSH
1006: CALL_OW 45
1010: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1011: LD_VAR 0 3
1015: PPUSH
1016: LD_INT 3
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: CALL_OW 49
// hc_class := 2 ;
1026: LD_ADDR_OWVAR 28
1030: PUSH
1031: LD_INT 2
1033: ST_TO_ADDR
// hc_sex := sex_male ;
1034: LD_ADDR_OWVAR 27
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1042: LD_ADDR_OWVAR 33
1046: PUSH
1047: LD_STRING SecondCharsGal
1049: ST_TO_ADDR
// hc_face_number := 52 ;
1050: LD_ADDR_OWVAR 34
1054: PUSH
1055: LD_INT 52
1057: ST_TO_ADDR
// hc_name := Craig Brown ;
1058: LD_ADDR_OWVAR 26
1062: PUSH
1063: LD_STRING Craig Brown
1065: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1066: LD_ADDR_OWVAR 31
1070: PUSH
1071: LD_INT 1
1073: PUSH
1074: LD_INT 3
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1089: LD_ADDR_EXP 13
1093: PUSH
1094: CALL_OW 44
1098: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
1099: LD_EXP 13
1103: PPUSH
1104: LD_VAR 0 3
1108: PPUSH
1109: CALL_OW 52
// vc_engine = 1 ;
1113: LD_ADDR_OWVAR 39
1117: PUSH
1118: LD_INT 1
1120: ST_TO_ADDR
// vc_control = 1 ;
1121: LD_ADDR_OWVAR 38
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
1129: LD_ADDR_OWVAR 40
1133: PUSH
1134: LD_INT 4
1136: PUSH
1137: LD_INT 2
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_OWVAR 67
1152: ARRAY
1153: ST_TO_ADDR
// vc_chassis = 2 ;
1154: LD_ADDR_OWVAR 37
1158: PUSH
1159: LD_INT 2
1161: ST_TO_ADDR
// veh = CreateVehicle ;
1162: LD_ADDR_VAR 0 3
1166: PUSH
1167: CALL_OW 45
1171: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1172: LD_VAR 0 3
1176: PPUSH
1177: LD_INT 3
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// SetFuel ( veh , 50 ) ;
1187: LD_VAR 0 3
1191: PPUSH
1192: LD_INT 50
1194: PPUSH
1195: CALL_OW 240
// hc_class := 1 ;
1199: LD_ADDR_OWVAR 28
1203: PUSH
1204: LD_INT 1
1206: ST_TO_ADDR
// hc_sex := sex_female ;
1207: LD_ADDR_OWVAR 27
1211: PUSH
1212: LD_INT 2
1214: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1215: LD_ADDR_OWVAR 33
1219: PUSH
1220: LD_STRING SecondCharsGal
1222: ST_TO_ADDR
// hc_face_number := 45 ;
1223: LD_ADDR_OWVAR 34
1227: PUSH
1228: LD_INT 45
1230: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
1231: LD_ADDR_OWVAR 26
1235: PUSH
1236: LD_STRING Ingrid Jonsson
1238: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1239: LD_ADDR_OWVAR 31
1243: PUSH
1244: LD_INT 1
1246: PUSH
1247: LD_INT 3
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 0
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
1262: LD_ADDR_EXP 14
1266: PUSH
1267: CALL_OW 44
1271: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
1272: LD_EXP 14
1276: PPUSH
1277: LD_VAR 0 3
1281: PPUSH
1282: CALL_OW 52
// SetFuel ( veh , 45 ) ;
1286: LD_VAR 0 3
1290: PPUSH
1291: LD_INT 45
1293: PPUSH
1294: CALL_OW 240
// end ;
1298: LD_VAR 0 1
1302: RET
// export function PrepareJoan ; var tmp , rnd ; begin
1303: LD_INT 0
1305: PPUSH
1306: PPUSH
1307: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ;
1308: LD_ADDR_VAR 0 2
1312: PUSH
1313: LD_INT 22
1315: PUSH
1316: LD_INT 1
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PUSH
1323: LD_INT 21
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PUSH
1333: LD_INT 26
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: PPUSH
1348: CALL_OW 69
1352: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
1353: LD_ADDR_VAR 0 3
1357: PUSH
1358: LD_INT 1
1360: PPUSH
1361: LD_VAR 0 2
1365: PPUSH
1366: CALL_OW 12
1370: ST_TO_ADDR
// uc_side = 4 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 4
1378: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
1379: LD_ADDR_EXP 11
1383: PUSH
1384: LD_STRING Joan
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: CALL 3525 0 2
1394: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
1395: LD_EXP 11
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_VAR 0 3
1409: ARRAY
1410: PPUSH
1411: CALL_OW 250
1415: PPUSH
1416: LD_VAR 0 2
1420: PUSH
1421: LD_VAR 0 3
1425: ARRAY
1426: PPUSH
1427: CALL_OW 251
1431: PPUSH
1432: LD_INT 2
1434: PPUSH
1435: LD_INT 1
1437: PPUSH
1438: CALL_OW 50
// SetLives ( Joan , 250 ) ;
1442: LD_EXP 11
1446: PPUSH
1447: LD_INT 250
1449: PPUSH
1450: CALL_OW 234
// InGameOn ;
1454: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
1458: LD_EXP 11
1462: PPUSH
1463: CALL_OW 87
// wait ( 0 0$2 ) ;
1467: LD_INT 70
1469: PPUSH
1470: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
1474: LD_VAR 0 2
1478: PUSH
1479: LD_VAR 0 3
1483: ARRAY
1484: PPUSH
1485: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
1489: LD_VAR 0 2
1493: PUSH
1494: LD_VAR 0 3
1498: ARRAY
1499: PPUSH
1500: CALL_OW 122
// wait ( 0 0$1 ) ;
1504: LD_INT 35
1506: PPUSH
1507: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
1511: LD_VAR 0 2
1515: PUSH
1516: LD_VAR 0 3
1520: ARRAY
1521: PPUSH
1522: LD_EXP 11
1526: PPUSH
1527: CALL_OW 112
// wait ( 0 0$2 ) ;
1531: LD_INT 70
1533: PPUSH
1534: CALL_OW 67
// DialogueOn ;
1538: CALL_OW 6
// if tmp [ rnd ] = JMM then
1542: LD_VAR 0 2
1546: PUSH
1547: LD_VAR 0 3
1551: ARRAY
1552: PUSH
1553: LD_EXP 1
1557: EQUAL
1558: IFFALSE 1685
// begin Say ( JMM , D5b-JMM-1 ) ;
1560: LD_EXP 1
1564: PPUSH
1565: LD_STRING D5b-JMM-1
1567: PPUSH
1568: CALL_OW 88
// DialogueOff ;
1572: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1576: LD_EXP 11
1580: PPUSH
1581: LD_INT 500
1583: PPUSH
1584: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
1588: LD_EXP 11
1592: PPUSH
1593: LD_EXP 1
1597: PPUSH
1598: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 11
1611: PPUSH
1612: CALL_OW 119
// wait ( 0 0$1 ) ;
1616: LD_INT 35
1618: PPUSH
1619: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
1623: LD_EXP 11
1627: PPUSH
1628: LD_STRING D5b-Joan-1
1630: PPUSH
1631: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
1635: LD_EXP 1
1639: PPUSH
1640: LD_STRING D5b-JMM-2
1642: PPUSH
1643: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
1647: LD_EXP 11
1651: PPUSH
1652: LD_STRING D5b-Joan-2
1654: PPUSH
1655: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
1659: LD_EXP 1
1663: PPUSH
1664: LD_STRING D5b-JMM-3
1666: PPUSH
1667: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
1671: LD_EXP 11
1675: PPUSH
1676: LD_STRING D5b-Joan-3
1678: PPUSH
1679: CALL_OW 88
// end else
1683: GO 2025
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
1685: LD_VAR 0 2
1689: PUSH
1690: LD_VAR 0 3
1694: ARRAY
1695: PPUSH
1696: LD_STRING D5a-Sol1-1
1698: PPUSH
1699: CALL_OW 88
// DialogueOff ;
1703: CALL_OW 7
// SetLives ( Joan , 500 ) ;
1707: LD_EXP 11
1711: PPUSH
1712: LD_INT 500
1714: PPUSH
1715: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
1719: LD_EXP 11
1723: PPUSH
1724: LD_VAR 0 2
1728: PUSH
1729: LD_VAR 0 3
1733: ARRAY
1734: PPUSH
1735: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
1739: LD_VAR 0 2
1743: PUSH
1744: LD_VAR 0 3
1748: ARRAY
1749: PPUSH
1750: LD_EXP 11
1754: PPUSH
1755: CALL_OW 119
// wait ( 0 0$1 ) ;
1759: LD_INT 35
1761: PPUSH
1762: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
1766: LD_EXP 11
1770: PPUSH
1771: LD_STRING D5a-Joan-1
1773: PPUSH
1774: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
1778: LD_VAR 0 2
1782: PUSH
1783: LD_VAR 0 3
1787: ARRAY
1788: PPUSH
1789: LD_STRING D5a-Sol1-2
1791: PPUSH
1792: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
1796: LD_EXP 11
1800: PPUSH
1801: LD_STRING D5a-Joan-2
1803: PPUSH
1804: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
1808: LD_VAR 0 2
1812: PUSH
1813: LD_VAR 0 3
1817: ARRAY
1818: PPUSH
1819: LD_STRING D5a-Sol1-3
1821: PPUSH
1822: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
1826: LD_EXP 11
1830: PPUSH
1831: LD_STRING D5a-Joan-3
1833: PPUSH
1834: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
1838: LD_VAR 0 2
1842: PUSH
1843: LD_VAR 0 3
1847: ARRAY
1848: PPUSH
1849: LD_STRING D5a-Sol1-4
1851: PPUSH
1852: CALL_OW 88
// ComExitVehicle ( JMM ) ;
1856: LD_EXP 1
1860: PPUSH
1861: CALL_OW 121
// ComExitBuilding ( JMM ) ;
1865: LD_EXP 1
1869: PPUSH
1870: CALL_OW 122
// wait ( 0 0$1 ) ;
1874: LD_INT 35
1876: PPUSH
1877: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1881: LD_INT 35
1883: PPUSH
1884: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
1888: LD_EXP 11
1892: PUSH
1893: LD_VAR 0 2
1897: PUSH
1898: LD_VAR 0 3
1902: ARRAY
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PPUSH
1908: LD_EXP 1
1912: PPUSH
1913: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
1917: LD_EXP 11
1921: PPUSH
1922: LD_EXP 1
1926: PPUSH
1927: CALL_OW 296
1931: PUSH
1932: LD_INT 5
1934: LESS
1935: IFFALSE 1881
// ComTurnUnit ( Joan , JMM ) ;
1937: LD_EXP 11
1941: PPUSH
1942: LD_EXP 1
1946: PPUSH
1947: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
1951: LD_EXP 1
1955: PPUSH
1956: LD_EXP 11
1960: PPUSH
1961: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
1965: LD_EXP 11
1969: PPUSH
1970: LD_STRING D5a-Joan-4
1972: PPUSH
1973: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
1977: LD_EXP 1
1981: PPUSH
1982: LD_STRING D5a-JMM-4
1984: PPUSH
1985: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
1989: LD_EXP 11
1993: PPUSH
1994: LD_STRING D5a-Joan-5
1996: PPUSH
1997: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2001: LD_EXP 1
2005: PPUSH
2006: LD_STRING D5a-JMM-5
2008: PPUSH
2009: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2013: LD_EXP 11
2017: PPUSH
2018: LD_STRING D5a-Joan-6
2020: PPUSH
2021: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2025: LD_EXP 1
2029: PPUSH
2030: LD_STRING D6-JMM-1
2032: PPUSH
2033: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
2037: LD_EXP 11
2041: PPUSH
2042: LD_STRING D6-Joan-1
2044: PPUSH
2045: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
2049: LD_EXP 1
2053: PPUSH
2054: LD_STRING D6-JMM-2
2056: PPUSH
2057: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
2061: LD_EXP 11
2065: PPUSH
2066: LD_STRING D6-Joan-2
2068: PPUSH
2069: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
2073: LD_EXP 1
2077: PPUSH
2078: LD_STRING D6-JMM-3
2080: PPUSH
2081: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
2085: LD_EXP 11
2089: PPUSH
2090: LD_STRING D6-Joan-3
2092: PPUSH
2093: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
2097: LD_EXP 1
2101: PPUSH
2102: LD_STRING D6-JMM-4
2104: PPUSH
2105: CALL_OW 88
// DialogueOff ;
2109: CALL_OW 7
// InGameOff ;
2113: CALL_OW 9
// SetSide ( Joan , 1 ) ;
2117: LD_EXP 11
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
2129: LD_STRING MJ
2131: PPUSH
2132: CALL_OW 337
// JoanStatus = 1 ;
2136: LD_ADDR_EXP 12
2140: PUSH
2141: LD_INT 1
2143: ST_TO_ADDR
// end ;
2144: LD_VAR 0 1
2148: RET
// export function PrepareRandoms ( number ) ; var un ; begin
2149: LD_INT 0
2151: PPUSH
2152: PPUSH
// uc_side = 1 ;
2153: LD_ADDR_OWVAR 20
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// uc_nation = 1 ;
2161: LD_ADDR_OWVAR 21
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// if number = 1 then
2169: LD_VAR 0 1
2173: PUSH
2174: LD_INT 1
2176: EQUAL
2177: IFFALSE 2315
// begin hc_class := 1 ;
2179: LD_ADDR_OWVAR 28
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// hc_sex := sex_male ;
2187: LD_ADDR_OWVAR 27
2191: PUSH
2192: LD_INT 1
2194: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2195: LD_ADDR_OWVAR 33
2199: PUSH
2200: LD_STRING AmGalRemake
2202: ST_TO_ADDR
// hc_face_number := 7 ;
2203: LD_ADDR_OWVAR 34
2207: PUSH
2208: LD_INT 7
2210: ST_TO_ADDR
// hc_name := Bobby Jorda ;
2211: LD_ADDR_OWVAR 26
2215: PUSH
2216: LD_STRING Bobby Jorda
2218: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
2219: LD_ADDR_OWVAR 31
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 1
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: ST_TO_ADDR
// un = CreateHuman ;
2242: LD_ADDR_VAR 0 3
2246: PUSH
2247: CALL_OW 44
2251: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2252: LD_VAR 0 3
2256: PPUSH
2257: LD_INT 12
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: CALL_OW 87
// wait ( 0 0$1 ) ;
2276: LD_INT 35
2278: PPUSH
2279: CALL_OW 67
// DialogueOn ;
2283: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_STRING D11b-Sol3-1
2294: PPUSH
2295: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
2299: LD_EXP 1
2303: PPUSH
2304: LD_STRING D11b-JMM-1
2306: PPUSH
2307: CALL_OW 88
// DialogueOff ;
2311: CALL_OW 7
// end ; if number = 2 then
2315: LD_VAR 0 1
2319: PUSH
2320: LD_INT 2
2322: EQUAL
2323: IFFALSE 2461
// begin hc_class := 3 ;
2325: LD_ADDR_OWVAR 28
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// hc_sex := sex_male ;
2333: LD_ADDR_OWVAR 27
2337: PUSH
2338: LD_INT 1
2340: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2341: LD_ADDR_OWVAR 33
2345: PUSH
2346: LD_STRING SecondCharsGal
2348: ST_TO_ADDR
// hc_face_number := 55 ;
2349: LD_ADDR_OWVAR 34
2353: PUSH
2354: LD_INT 55
2356: ST_TO_ADDR
// hc_name := George McCarthy ;
2357: LD_ADDR_OWVAR 26
2361: PUSH
2362: LD_STRING George McCarthy
2364: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
2365: LD_ADDR_OWVAR 31
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: LD_INT 2
2375: PUSH
2376: LD_INT 3
2378: PUSH
2379: LD_INT 1
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: ST_TO_ADDR
// un = CreateHuman ;
2388: LD_ADDR_VAR 0 3
2392: PUSH
2393: CALL_OW 44
2397: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2398: LD_VAR 0 3
2402: PPUSH
2403: LD_INT 12
2405: PPUSH
2406: LD_INT 1
2408: PPUSH
2409: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: CALL_OW 87
// wait ( 0 0$1 ) ;
2422: LD_INT 35
2424: PPUSH
2425: CALL_OW 67
// DialogueOn ;
2429: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
2433: LD_VAR 0 3
2437: PPUSH
2438: LD_STRING D11d-Sol4-1
2440: PPUSH
2441: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
2445: LD_EXP 1
2449: PPUSH
2450: LD_STRING D11d-JMM-1
2452: PPUSH
2453: CALL_OW 88
// DialogueOff ;
2457: CALL_OW 7
// end ; if number = 3 then
2461: LD_VAR 0 1
2465: PUSH
2466: LD_INT 3
2468: EQUAL
2469: IFFALSE 2595
// begin hc_class := 3 ;
2471: LD_ADDR_OWVAR 28
2475: PUSH
2476: LD_INT 3
2478: ST_TO_ADDR
// hc_sex := sex_female ;
2479: LD_ADDR_OWVAR 27
2483: PUSH
2484: LD_INT 2
2486: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2487: LD_ADDR_OWVAR 33
2491: PUSH
2492: LD_STRING SecondCharsGal
2494: ST_TO_ADDR
// hc_face_number := 45 ;
2495: LD_ADDR_OWVAR 34
2499: PUSH
2500: LD_INT 45
2502: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2503: LD_ADDR_OWVAR 26
2507: PUSH
2508: LD_STRING Sylvia Creak
2510: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2511: LD_ADDR_OWVAR 31
2515: PUSH
2516: LD_INT 1
2518: PUSH
2519: LD_INT 3
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: ST_TO_ADDR
// un = CreateHuman ;
2534: LD_ADDR_VAR 0 3
2538: PUSH
2539: CALL_OW 44
2543: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2544: LD_VAR 0 3
2548: PPUSH
2549: LD_INT 12
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2559: LD_VAR 0 3
2563: PPUSH
2564: CALL_OW 87
// wait ( 0 0$1 ) ;
2568: LD_INT 35
2570: PPUSH
2571: CALL_OW 67
// DialogueOn ;
2575: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2579: LD_VAR 0 3
2583: PPUSH
2584: LD_STRING D11e-FSol4-1
2586: PPUSH
2587: CALL_OW 88
// DialogueOff ;
2591: CALL_OW 7
// end ; if number = 4 then
2595: LD_VAR 0 1
2599: PUSH
2600: LD_INT 4
2602: EQUAL
2603: IFFALSE 2729
// begin hc_class := 3 ;
2605: LD_ADDR_OWVAR 28
2609: PUSH
2610: LD_INT 3
2612: ST_TO_ADDR
// hc_sex := sex_female ;
2613: LD_ADDR_OWVAR 27
2617: PUSH
2618: LD_INT 2
2620: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2621: LD_ADDR_OWVAR 33
2625: PUSH
2626: LD_STRING SecondCharsGal
2628: ST_TO_ADDR
// hc_face_number := 46 ;
2629: LD_ADDR_OWVAR 34
2633: PUSH
2634: LD_INT 46
2636: ST_TO_ADDR
// hc_name := Sylvia Creak ;
2637: LD_ADDR_OWVAR 26
2641: PUSH
2642: LD_STRING Sylvia Creak
2644: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
2645: LD_ADDR_OWVAR 31
2649: PUSH
2650: LD_INT 1
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: LD_INT 1
2658: PUSH
2659: LD_INT 1
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: ST_TO_ADDR
// un = CreateHuman ;
2668: LD_ADDR_VAR 0 3
2672: PUSH
2673: CALL_OW 44
2677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2678: LD_VAR 0 3
2682: PPUSH
2683: LD_INT 12
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2693: LD_VAR 0 3
2697: PPUSH
2698: CALL_OW 87
// wait ( 0 0$1 ) ;
2702: LD_INT 35
2704: PPUSH
2705: CALL_OW 67
// DialogueOn ;
2709: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
2713: LD_VAR 0 3
2717: PPUSH
2718: LD_STRING D11e-FSol4-1
2720: PPUSH
2721: CALL_OW 88
// DialogueOff ;
2725: CALL_OW 7
// end ; if number = 5 then
2729: LD_VAR 0 1
2733: PUSH
2734: LD_INT 5
2736: EQUAL
2737: IFFALSE 2875
// begin hc_class := 1 ;
2739: LD_ADDR_OWVAR 28
2743: PUSH
2744: LD_INT 1
2746: ST_TO_ADDR
// hc_sex := sex_female ;
2747: LD_ADDR_OWVAR 27
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2755: LD_ADDR_OWVAR 33
2759: PUSH
2760: LD_STRING SecondCharsGal
2762: ST_TO_ADDR
// hc_face_number := 37 ;
2763: LD_ADDR_OWVAR 34
2767: PUSH
2768: LD_INT 37
2770: ST_TO_ADDR
// hc_name := Margherite Simpson ;
2771: LD_ADDR_OWVAR 26
2775: PUSH
2776: LD_STRING Margherite Simpson
2778: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
2779: LD_ADDR_OWVAR 31
2783: PUSH
2784: LD_INT 1
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: LD_INT 1
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: ST_TO_ADDR
// un = CreateHuman ;
2802: LD_ADDR_VAR 0 3
2806: PUSH
2807: CALL_OW 44
2811: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 12
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2827: LD_VAR 0 3
2831: PPUSH
2832: CALL_OW 87
// wait ( 0 0$1 ) ;
2836: LD_INT 35
2838: PPUSH
2839: CALL_OW 67
// DialogueOn ;
2843: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
2847: LD_VAR 0 3
2851: PPUSH
2852: LD_STRING D11c-FSol3-1
2854: PPUSH
2855: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
2859: LD_EXP 1
2863: PPUSH
2864: LD_STRING D11c-JMM-1
2866: PPUSH
2867: CALL_OW 88
// DialogueOff ;
2871: CALL_OW 7
// end ; if number = 6 then
2875: LD_VAR 0 1
2879: PUSH
2880: LD_INT 6
2882: EQUAL
2883: IFFALSE 3009
// begin hc_class := 1 ;
2885: LD_ADDR_OWVAR 28
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// hc_sex := sex_male ;
2893: LD_ADDR_OWVAR 27
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
2901: LD_ADDR_OWVAR 33
2905: PUSH
2906: LD_STRING AmGalRemake
2908: ST_TO_ADDR
// hc_face_number := 1 ;
2909: LD_ADDR_OWVAR 34
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// hc_name := Charles Brown ;
2917: LD_ADDR_OWVAR 26
2921: PUSH
2922: LD_STRING Charles Brown
2924: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
2925: LD_ADDR_OWVAR 31
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: LD_INT 0
2938: PUSH
2939: LD_INT 1
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: LIST
2946: LIST
2947: ST_TO_ADDR
// un = CreateHuman ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: CALL_OW 44
2957: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
2958: LD_VAR 0 3
2962: PPUSH
2963: LD_INT 12
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 49
// CenterNowOnUnits ( un ) ;
2973: LD_VAR 0 3
2977: PPUSH
2978: CALL_OW 87
// wait ( 0 0$1 ) ;
2982: LD_INT 35
2984: PPUSH
2985: CALL_OW 67
// DialogueOn ;
2989: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
2993: LD_VAR 0 3
2997: PPUSH
2998: LD_STRING D11f-Sol5-1
3000: PPUSH
3001: CALL_OW 88
// DialogueOff ;
3005: CALL_OW 7
// end ; if number = 7 then
3009: LD_VAR 0 1
3013: PUSH
3014: LD_INT 7
3016: EQUAL
3017: IFFALSE 3143
// begin hc_class := 1 ;
3019: LD_ADDR_OWVAR 28
3023: PUSH
3024: LD_INT 1
3026: ST_TO_ADDR
// hc_sex := sex_female ;
3027: LD_ADDR_OWVAR 27
3031: PUSH
3032: LD_INT 2
3034: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3035: LD_ADDR_OWVAR 33
3039: PUSH
3040: LD_STRING AmGalRemake
3042: ST_TO_ADDR
// hc_face_number := 2 ;
3043: LD_ADDR_OWVAR 34
3047: PUSH
3048: LD_INT 2
3050: ST_TO_ADDR
// hc_name := Johanna Holland ;
3051: LD_ADDR_OWVAR 26
3055: PUSH
3056: LD_STRING Johanna Holland
3058: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3059: LD_ADDR_OWVAR 31
3063: PUSH
3064: LD_INT 1
3066: PUSH
3067: LD_INT 0
3069: PUSH
3070: LD_INT 0
3072: PUSH
3073: LD_INT 0
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: ST_TO_ADDR
// un = CreateHuman ;
3082: LD_ADDR_VAR 0 3
3086: PUSH
3087: CALL_OW 44
3091: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3092: LD_VAR 0 3
3096: PPUSH
3097: LD_INT 12
3099: PPUSH
3100: LD_INT 1
3102: PPUSH
3103: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3107: LD_VAR 0 3
3111: PPUSH
3112: CALL_OW 87
// wait ( 0 0$1 ) ;
3116: LD_INT 35
3118: PPUSH
3119: CALL_OW 67
// DialogueOn ;
3123: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
3127: LD_VAR 0 3
3131: PPUSH
3132: LD_STRING D11a-FSol2-1
3134: PPUSH
3135: CALL_OW 88
// DialogueOff ;
3139: CALL_OW 7
// end ; end ; end_of_file
3143: LD_VAR 0 2
3147: RET
// export function PrepareRussian ; var i ; begin
3148: LD_INT 0
3150: PPUSH
3151: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: LD_EXP 29
3165: PPUSH
3166: LD_EXP 30
3170: PPUSH
3171: CALL_OW 12
3175: PPUSH
3176: LD_INT 2
3178: PPUSH
3179: LD_INT 4
3181: PPUSH
3182: CALL 3738 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 8
3194: PPUSH
3195: LD_EXP 29
3199: PPUSH
3200: LD_EXP 30
3204: PPUSH
3205: CALL_OW 12
3209: PPUSH
3210: LD_INT 1
3212: PPUSH
3213: LD_INT 4
3215: PPUSH
3216: CALL 3738 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 67
3228: PPUSH
3229: LD_EXP 29
3233: PPUSH
3234: LD_EXP 30
3238: PPUSH
3239: CALL_OW 12
3243: PPUSH
3244: LD_INT 1
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3254: LD_INT 3
3256: PPUSH
3257: LD_INT 3
3259: PPUSH
3260: LD_INT 21
3262: PPUSH
3263: LD_EXP 29
3267: PPUSH
3268: LD_EXP 30
3272: PPUSH
3273: CALL_OW 12
3277: PPUSH
3278: LD_INT 3
3280: PPUSH
3281: LD_INT 6
3283: PPUSH
3284: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
3288: LD_INT 3
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_INT 17
3296: PPUSH
3297: LD_EXP 29
3301: PPUSH
3302: LD_EXP 30
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 3
3314: PPUSH
3315: LD_INT 6
3317: PPUSH
3318: CALL 3738 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 32
3330: PPUSH
3331: LD_EXP 29
3335: PPUSH
3336: LD_EXP 30
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 2
3351: PPUSH
3352: CALL 3738 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
3356: LD_ADDR_VAR 0 2
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 3
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 21
3373: PUSH
3374: LD_INT 3
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 30
3383: PUSH
3384: LD_INT 32
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: PPUSH
3396: CALL_OW 69
3400: PUSH
3401: FOR_IN
3402: IFFALSE 3442
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
3404: LD_INT 3
3406: PPUSH
3407: LD_INT 3
3409: PPUSH
3410: LD_VAR 0 2
3414: PPUSH
3415: LD_EXP 29
3419: PPUSH
3420: LD_EXP 30
3424: PPUSH
3425: CALL_OW 12
3429: PPUSH
3430: LD_INT 1
3432: PPUSH
3433: LD_INT 1
3435: PPUSH
3436: CALL 3738 0 6
3440: GO 3401
3442: POP
3443: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 22
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 21
3461: PUSH
3462: LD_INT 3
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 30
3471: PUSH
3472: LD_INT 31
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: PPUSH
3484: CALL_OW 69
3488: PUSH
3489: FOR_IN
3490: IFFALSE 3518
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
3492: LD_EXP 29
3496: PPUSH
3497: LD_EXP 30
3501: PPUSH
3502: CALL_OW 12
3506: PPUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL 3848 0 2
3516: GO 3489
3518: POP
3519: POP
// end ; end_of_file
3520: LD_VAR 0 1
3524: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3525: LD_INT 0
3527: PPUSH
3528: PPUSH
// if exist_mode then
3529: LD_VAR 0 2
3533: IFFALSE 3552
// begin unit := CreateCharacter ( ident ) ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 34
3549: ST_TO_ADDR
// end else
3550: GO 3567
// begin unit := NewCharacter ( ident ) ;
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_VAR 0 1
3561: PPUSH
3562: CALL_OW 25
3566: ST_TO_ADDR
// end ; result := unit ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 4
3576: ST_TO_ADDR
// end ;
3577: LD_VAR 0 3
3581: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3582: LD_INT 0
3584: PPUSH
3585: PPUSH
3586: PPUSH
// rnd = rand ( 1 , characters ) ;
3587: LD_ADDR_VAR 0 6
3591: PUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 12
3604: ST_TO_ADDR
// for i = 1 to characters do
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: DOUBLE
3611: LD_INT 1
3613: DEC
3614: ST_TO_ADDR
3615: LD_VAR 0 1
3619: PUSH
3620: FOR_TO
3621: IFFALSE 3731
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3623: LD_VAR 0 5
3627: PUSH
3628: LD_VAR 0 6
3632: EQUAL
3633: PUSH
3634: LD_VAR 0 1
3638: PUSH
3639: LD_VAR 0 5
3643: ARRAY
3644: PPUSH
3645: CALL_OW 258
3649: PUSH
3650: LD_INT 1
3652: EQUAL
3653: AND
3654: IFFALSE 3676
// Say ( characters [ i ] , dialogMID ) ;
3656: LD_VAR 0 1
3660: PUSH
3661: LD_VAR 0 5
3665: ARRAY
3666: PPUSH
3667: LD_VAR 0 2
3671: PPUSH
3672: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3676: LD_VAR 0 5
3680: PUSH
3681: LD_VAR 0 6
3685: EQUAL
3686: PUSH
3687: LD_VAR 0 1
3691: PUSH
3692: LD_VAR 0 5
3696: ARRAY
3697: PPUSH
3698: CALL_OW 258
3702: PUSH
3703: LD_INT 2
3705: EQUAL
3706: AND
3707: IFFALSE 3729
// Say ( characters [ i ] , dialogFID ) ;
3709: LD_VAR 0 1
3713: PUSH
3714: LD_VAR 0 5
3718: ARRAY
3719: PPUSH
3720: LD_VAR 0 3
3724: PPUSH
3725: CALL_OW 88
// end ;
3729: GO 3620
3731: POP
3732: POP
// end ;
3733: LD_VAR 0 4
3737: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
// for i = 1 to count do
3744: LD_ADDR_VAR 0 8
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 6
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3841
// begin uc_side = side ;
3762: LD_ADDR_OWVAR 20
3766: PUSH
3767: LD_VAR 0 1
3771: ST_TO_ADDR
// uc_nation = nation ;
3772: LD_ADDR_OWVAR 21
3776: PUSH
3777: LD_VAR 0 2
3781: ST_TO_ADDR
// hc_gallery =  ;
3782: LD_ADDR_OWVAR 33
3786: PUSH
3787: LD_STRING 
3789: ST_TO_ADDR
// hc_name =  ;
3790: LD_ADDR_OWVAR 26
3794: PUSH
3795: LD_STRING 
3797: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3798: LD_INT 0
3800: PPUSH
3801: LD_VAR 0 5
3805: PPUSH
3806: LD_VAR 0 4
3810: PPUSH
3811: CALL_OW 380
// un = CreateHuman ;
3815: LD_ADDR_VAR 0 10
3819: PUSH
3820: CALL_OW 44
3824: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3825: LD_VAR 0 10
3829: PPUSH
3830: LD_VAR 0 3
3834: PPUSH
3835: CALL_OW 52
// end ;
3839: GO 3759
3841: POP
3842: POP
// end ;
3843: LD_VAR 0 7
3847: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3848: LD_INT 0
3850: PPUSH
3851: PPUSH
3852: PPUSH
// uc_side := GetSide ( b ) ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_VAR 0 2
3862: PPUSH
3863: CALL_OW 255
3867: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3868: LD_ADDR_OWVAR 21
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 248
3882: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3883: LD_INT 0
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: LD_VAR 0 1
3893: PPUSH
3894: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
3898: LD_ADDR_VAR 0 5
3902: PUSH
3903: LD_VAR 0 2
3907: PPUSH
3908: CALL_OW 254
3912: PUSH
3913: LD_INT 3
3915: MINUS
3916: ST_TO_ADDR
// if dir < 0 then
3917: LD_VAR 0 5
3921: PUSH
3922: LD_INT 0
3924: LESS
3925: IFFALSE 3941
// dir := 6 + dir ;
3927: LD_ADDR_VAR 0 5
3931: PUSH
3932: LD_INT 6
3934: PUSH
3935: LD_VAR 0 5
3939: PLUS
3940: ST_TO_ADDR
// un := CreateHuman ;
3941: LD_ADDR_VAR 0 4
3945: PUSH
3946: CALL_OW 44
3950: ST_TO_ADDR
// SetDir ( un , dir ) ;
3951: LD_VAR 0 4
3955: PPUSH
3956: LD_VAR 0 5
3960: PPUSH
3961: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3965: LD_VAR 0 4
3969: PPUSH
3970: LD_VAR 0 2
3974: PPUSH
3975: CALL_OW 52
// end ;
3979: LD_VAR 0 3
3983: RET
// export function PrepareDifficulty ; begin
3984: LD_INT 0
3986: PPUSH
// if Difficulty = 1 then
3987: LD_OWVAR 67
3991: PUSH
3992: LD_INT 1
3994: EQUAL
3995: IFFALSE 4013
// begin RuSolMinLevel = 2 ;
3997: LD_ADDR_EXP 29
4001: PUSH
4002: LD_INT 2
4004: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4005: LD_ADDR_EXP 30
4009: PUSH
4010: LD_INT 5
4012: ST_TO_ADDR
// end ; if Difficulty = 2 then
4013: LD_OWVAR 67
4017: PUSH
4018: LD_INT 2
4020: EQUAL
4021: IFFALSE 4039
// begin RuSolMinLevel = 3 ;
4023: LD_ADDR_EXP 29
4027: PUSH
4028: LD_INT 3
4030: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4031: LD_ADDR_EXP 30
4035: PUSH
4036: LD_INT 6
4038: ST_TO_ADDR
// end ; if Difficulty = 3 then
4039: LD_OWVAR 67
4043: PUSH
4044: LD_INT 3
4046: EQUAL
4047: IFFALSE 4065
// begin RuSolMinLevel = 5 ;
4049: LD_ADDR_EXP 29
4053: PUSH
4054: LD_INT 5
4056: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4057: LD_ADDR_EXP 30
4061: PUSH
4062: LD_INT 6
4064: ST_TO_ADDR
// end ; end ;
4065: LD_VAR 0 1
4069: RET
// export function ShowQuery1 ; begin
4070: LD_INT 0
4072: PPUSH
// case query ( QKill ) of 1 :
4073: LD_STRING QKill
4075: PPUSH
4076: CALL_OW 97
4080: PUSH
4081: LD_INT 1
4083: DOUBLE
4084: EQUAL
4085: IFTRUE 4089
4087: GO 4100
4089: POP
// begin result = 1 ;
4090: LD_ADDR_VAR 0 1
4094: PUSH
4095: LD_INT 1
4097: ST_TO_ADDR
// end ; 2 :
4098: GO 4139
4100: LD_INT 2
4102: DOUBLE
4103: EQUAL
4104: IFTRUE 4108
4106: GO 4119
4108: POP
// begin result = 2 ;
4109: LD_ADDR_VAR 0 1
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
// end ; 3 :
4117: GO 4139
4119: LD_INT 3
4121: DOUBLE
4122: EQUAL
4123: IFTRUE 4127
4125: GO 4138
4127: POP
// begin result = 3 ;
4128: LD_ADDR_VAR 0 1
4132: PUSH
4133: LD_INT 3
4135: ST_TO_ADDR
// end ; end ;
4136: GO 4139
4138: POP
// end ;
4139: LD_VAR 0 1
4143: RET
// export function ShowQuery2 ; begin
4144: LD_INT 0
4146: PPUSH
// case query ( QKill2 ) of 1 :
4147: LD_STRING QKill2
4149: PPUSH
4150: CALL_OW 97
4154: PUSH
4155: LD_INT 1
4157: DOUBLE
4158: EQUAL
4159: IFTRUE 4163
4161: GO 4174
4163: POP
// begin result = 1 ;
4164: LD_ADDR_VAR 0 1
4168: PUSH
4169: LD_INT 1
4171: ST_TO_ADDR
// end ; 2 :
4172: GO 4194
4174: LD_INT 2
4176: DOUBLE
4177: EQUAL
4178: IFTRUE 4182
4180: GO 4193
4182: POP
// begin result = 2 ;
4183: LD_ADDR_VAR 0 1
4187: PUSH
4188: LD_INT 2
4190: ST_TO_ADDR
// end ; end ;
4191: GO 4194
4193: POP
// end ;
4194: LD_VAR 0 1
4198: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4199: LD_INT 0
4201: PPUSH
4202: PPUSH
// for i in charactersList do
4203: LD_ADDR_VAR 0 4
4207: PUSH
4208: LD_VAR 0 1
4212: PUSH
4213: FOR_IN
4214: IFFALSE 4254
// begin if IsOk ( i ) then
4216: LD_VAR 0 4
4220: PPUSH
4221: CALL_OW 302
4225: IFFALSE 4243
// begin SaveCharacters ( i , ident ) ;
4227: LD_VAR 0 4
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: CALL_OW 38
// end else
4241: GO 4252
// begin DeleteCharacters ( ident ) ;
4243: LD_VAR 0 2
4247: PPUSH
4248: CALL_OW 40
// end ; end ;
4252: GO 4213
4254: POP
4255: POP
// end ;
4256: LD_VAR 0 3
4260: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4261: LD_INT 0
4263: PPUSH
4264: PPUSH
4265: PPUSH
4266: PPUSH
// for i = 1 to 72 do
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: DOUBLE
4273: LD_INT 1
4275: DEC
4276: ST_TO_ADDR
4277: LD_INT 72
4279: PUSH
4280: FOR_TO
4281: IFFALSE 4339
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4283: LD_VAR 0 5
4287: PPUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 321
4297: PUSH
4298: LD_INT 1
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 5
4306: PPUSH
4307: LD_VAR 0 3
4311: PPUSH
4312: CALL_OW 482
4316: PUSH
4317: LD_INT 1
4319: EQUAL
4320: AND
4321: IFFALSE 4337
// AddComResearch ( lab , i ) ;
4323: LD_VAR 0 2
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: CALL_OW 184
4337: GO 4280
4339: POP
4340: POP
// end ;
4341: LD_VAR 0 4
4345: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4346: LD_INT 0
4348: PPUSH
4349: PPUSH
4350: PPUSH
4351: PPUSH
4352: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
4353: LD_ADDR_VAR 0 6
4357: PUSH
4358: LD_INT 22
4360: PUSH
4361: LD_VAR 0 1
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 25
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_INT 25
4385: PUSH
4386: LD_INT 16
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 24
4400: PUSH
4401: LD_INT 1000
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: PPUSH
4413: CALL_OW 69
4417: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 22
4425: PUSH
4426: LD_VAR 0 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 21
4437: PUSH
4438: LD_INT 3
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 3
4447: PUSH
4448: LD_INT 24
4450: PUSH
4451: LD_INT 1000
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: PPUSH
4470: CALL_OW 69
4474: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
4475: LD_VAR 0 4
4479: PUSH
4480: LD_INT 0
4482: GREATER
4483: PUSH
4484: LD_VAR 0 6
4488: PUSH
4489: LD_INT 0
4491: GREATER
4492: AND
4493: IFFALSE 4559
// begin for i in engineerOk_list do
4495: LD_ADDR_VAR 0 5
4499: PUSH
4500: LD_VAR 0 6
4504: PUSH
4505: FOR_IN
4506: IFFALSE 4557
// begin for j in buildings_list do
4508: LD_ADDR_VAR 0 7
4512: PUSH
4513: LD_VAR 0 4
4517: PUSH
4518: FOR_IN
4519: IFFALSE 4553
// begin AddComExitBuilding ( i ) ;
4521: LD_VAR 0 5
4525: PPUSH
4526: CALL_OW 182
// wait ( 0 0$1 ) ;
4530: LD_INT 35
4532: PPUSH
4533: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_VAR 0 7
4546: PPUSH
4547: CALL_OW 190
// end ;
4551: GO 4518
4553: POP
4554: POP
// end ;
4555: GO 4505
4557: POP
4558: POP
// end ; if buildings_list = 0 then
4559: LD_VAR 0 4
4563: PUSH
4564: LD_INT 0
4566: EQUAL
4567: IFFALSE 4600
// begin for i in engineerOK_list do
4569: LD_ADDR_VAR 0 5
4573: PUSH
4574: LD_VAR 0 6
4578: PUSH
4579: FOR_IN
4580: IFFALSE 4598
// begin ComEnterUnit ( i , building ) ;
4582: LD_VAR 0 5
4586: PPUSH
4587: LD_VAR 0 2
4591: PPUSH
4592: CALL_OW 120
// end ;
4596: GO 4579
4598: POP
4599: POP
// end ; end ;
4600: LD_VAR 0 3
4604: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4605: LD_INT 0
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
4612: LD_ADDR_VAR 0 6
4616: PUSH
4617: LD_INT 22
4619: PUSH
4620: LD_VAR 0 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 25
4631: PUSH
4632: LD_INT 4
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PPUSH
4643: CALL_OW 69
4647: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4648: LD_ADDR_VAR 0 9
4652: PUSH
4653: LD_VAR 0 3
4657: PPUSH
4658: LD_INT 22
4660: PUSH
4661: LD_VAR 0 1
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 21
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: LD_INT 24
4685: PUSH
4686: LD_INT 750
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: PPUSH
4702: CALL_OW 70
4706: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
4707: LD_VAR 0 9
4711: PUSH
4712: LD_INT 0
4714: GREATER
4715: PUSH
4716: LD_VAR 0 6
4720: PUSH
4721: LD_INT 0
4723: GREATER
4724: AND
4725: IFFALSE 4852
// begin for i = 1 to damageUnits do
4727: LD_ADDR_VAR 0 7
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_VAR 0 9
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4767
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4745: LD_VAR 0 9
4749: PUSH
4750: LD_VAR 0 7
4754: ARRAY
4755: PPUSH
4756: LD_VAR 0 2
4760: PPUSH
4761: CALL_OW 113
4765: GO 4742
4767: POP
4768: POP
// for i in sci_list do
4769: LD_ADDR_VAR 0 7
4773: PUSH
4774: LD_VAR 0 6
4778: PUSH
4779: FOR_IN
4780: IFFALSE 4848
// begin ComExitBuilding ( i ) ;
4782: LD_VAR 0 7
4786: PPUSH
4787: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4791: LD_ADDR_VAR 0 8
4795: PUSH
4796: LD_VAR 0 2
4800: PPUSH
4801: LD_INT 22
4803: PUSH
4804: LD_VAR 0 1
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PPUSH
4813: CALL_OW 70
4817: PUSH
4818: FOR_IN
4819: IFFALSE 4844
// begin AddComHeal ( i , j ) ;
4821: LD_VAR 0 7
4825: PPUSH
4826: LD_VAR 0 8
4830: PPUSH
4831: CALL_OW 188
// wait ( 1 1$0 ) ;
4835: LD_INT 2100
4837: PPUSH
4838: CALL_OW 67
// end ;
4842: GO 4818
4844: POP
4845: POP
// end ;
4846: GO 4779
4848: POP
4849: POP
// end else
4850: GO 4866
// begin AddComEnterUnit ( sci_list , build ) ;
4852: LD_VAR 0 6
4856: PPUSH
4857: LD_VAR 0 4
4861: PPUSH
4862: CALL_OW 180
// end ; end ;
4866: LD_VAR 0 5
4870: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
4871: LD_INT 0
4873: PPUSH
4874: PPUSH
4875: PPUSH
4876: PPUSH
4877: PPUSH
4878: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
4879: LD_INT 22
4881: PUSH
4882: LD_VAR 0 1
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 21
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 69
4909: PUSH
4910: LD_VAR 0 3
4914: LESSEQUAL
4915: IFFALSE 4982
// for i = 1 to vehCount do
4917: LD_ADDR_VAR 0 10
4921: PUSH
4922: DOUBLE
4923: LD_INT 1
4925: DEC
4926: ST_TO_ADDR
4927: LD_VAR 0 3
4931: PUSH
4932: FOR_TO
4933: IFFALSE 4980
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_VAR 0 8
4944: PPUSH
4945: LD_VAR 0 6
4949: PPUSH
4950: LD_VAR 0 7
4954: PPUSH
4955: LD_VAR 0 5
4959: PUSH
4960: LD_INT 1
4962: PPUSH
4963: LD_VAR 0 5
4967: PPUSH
4968: CALL_OW 12
4972: ARRAY
4973: PPUSH
4974: CALL_OW 185
4978: GO 4932
4980: POP
4981: POP
// repeat wait ( 0 0$1 ) ;
4982: LD_INT 35
4984: PPUSH
4985: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
4989: LD_INT 22
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 21
5003: PUSH
5004: LD_INT 2
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 24
5013: PUSH
5014: LD_INT 250
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 69
5030: PUSH
5031: LD_VAR 0 3
5035: GREATEREQUAL
5036: IFFALSE 4982
// repeat begin wait ( 0 0$1 ) ;
5038: LD_INT 35
5040: PPUSH
5041: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5045: LD_ADDR_VAR 0 10
5049: PUSH
5050: LD_INT 22
5052: PUSH
5053: LD_VAR 0 1
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 21
5064: PUSH
5065: LD_INT 2
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: PUSH
5072: LD_INT 24
5074: PUSH
5075: LD_INT 651
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: PUSH
5092: FOR_IN
5093: IFFALSE 5269
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5095: LD_ADDR_VAR 0 13
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_VAR 0 4
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 69
5116: PPUSH
5117: LD_VAR 0 10
5121: PPUSH
5122: CALL_OW 74
5126: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5127: LD_ADDR_VAR 0 14
5131: PUSH
5132: LD_INT 22
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 2
5146: PUSH
5147: LD_INT 59
5149: PUSH
5150: EMPTY
5151: LIST
5152: PUSH
5153: LD_INT 21
5155: PUSH
5156: LD_INT 1
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 2
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: PPUSH
5186: CALL_OW 69
5190: PPUSH
5191: LD_VAR 0 10
5195: PPUSH
5196: CALL_OW 74
5200: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5201: LD_VAR 0 10
5205: PPUSH
5206: LD_VAR 0 13
5210: PPUSH
5211: CALL_OW 296
5215: PUSH
5216: LD_INT 8
5218: PLUS
5219: PUSH
5220: LD_VAR 0 10
5224: PPUSH
5225: LD_VAR 0 14
5229: PPUSH
5230: CALL_OW 296
5234: LESS
5235: IFFALSE 5253
// begin ComAttackUnit ( i , target1 ) ;
5237: LD_VAR 0 10
5241: PPUSH
5242: LD_VAR 0 13
5246: PPUSH
5247: CALL_OW 115
// end else
5251: GO 5267
// begin ComAttackUnit ( i , target2 ) ;
5253: LD_VAR 0 10
5257: PPUSH
5258: LD_VAR 0 14
5262: PPUSH
5263: CALL_OW 115
// end ; end ;
5267: GO 5092
5269: POP
5270: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
5271: LD_INT 22
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PUSH
5281: LD_INT 21
5283: PUSH
5284: LD_INT 2
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: PUSH
5291: LD_INT 3
5293: PUSH
5294: LD_INT 34
5296: PUSH
5297: LD_INT 51
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: PUSH
5318: LD_INT 0
5320: EQUAL
5321: IFFALSE 5038
// end ;
5323: LD_VAR 0 9
5327: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
5328: LD_INT 0
5330: PPUSH
5331: PPUSH
5332: PPUSH
5333: PPUSH
// enable ;
5334: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
5335: LD_ADDR_VAR 0 7
5339: PUSH
5340: LD_VAR 0 3
5344: PPUSH
5345: CALL_OW 435
5349: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
5350: LD_ADDR_VAR 0 6
5354: PUSH
5355: LD_INT 22
5357: PUSH
5358: LD_VAR 0 1
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 34
5369: PUSH
5370: LD_VAR 0 2
5374: PUSH
5375: EMPTY
5376: LIST
5377: LIST
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PPUSH
5383: CALL_OW 69
5387: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
5388: LD_VAR 0 6
5392: PUSH
5393: LD_INT 0
5395: GREATER
5396: PUSH
5397: LD_VAR 0 3
5401: PPUSH
5402: CALL_OW 435
5406: AND
5407: PUSH
5408: LD_VAR 0 7
5412: PUSH
5413: LD_INT 0
5415: GREATER
5416: AND
5417: IFFALSE 5466
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
5419: LD_VAR 0 6
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_VAR 0 7
5432: PUSH
5433: LD_INT 1
5435: ARRAY
5436: PPUSH
5437: LD_VAR 0 7
5441: PUSH
5442: LD_INT 2
5444: ARRAY
5445: PPUSH
5446: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
5450: LD_VAR 0 6
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_INT 100
5461: PPUSH
5462: CALL_OW 240
// end ; clear_crates := false ;
5466: LD_ADDR_VAR 0 5
5470: PUSH
5471: LD_INT 0
5473: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5474: LD_INT 35
5476: PPUSH
5477: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
5481: LD_VAR 0 6
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PPUSH
5490: CALL_OW 315
5494: NOT
5495: PUSH
5496: LD_VAR 0 5
5500: OR
5501: IFFALSE 5474
// end ;
5503: LD_VAR 0 4
5507: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5521: LD_ADDR_VAR 0 9
5525: PUSH
5526: LD_INT 22
5528: PUSH
5529: LD_VAR 0 1
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 21
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 660
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 3
5560: PUSH
5561: LD_INT 58
5563: PUSH
5564: EMPTY
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: LD_INT 34
5576: PUSH
5577: LD_INT 53
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: PPUSH
5595: CALL_OW 69
5599: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
5600: LD_ADDR_VAR 0 10
5604: PUSH
5605: LD_INT 22
5607: PUSH
5608: LD_VAR 0 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 21
5619: PUSH
5620: LD_INT 2
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 3
5629: PUSH
5630: LD_INT 24
5632: PUSH
5633: LD_INT 660
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5654: LD_ADDR_VAR 0 11
5658: PUSH
5659: LD_VAR 0 2
5663: PPUSH
5664: LD_INT 22
5666: PUSH
5667: LD_VAR 0 1
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: LD_INT 21
5678: PUSH
5679: LD_INT 2
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: LD_INT 24
5691: PUSH
5692: LD_INT 1000
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: PPUSH
5708: CALL_OW 70
5712: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5713: LD_ADDR_VAR 0 12
5717: PUSH
5718: LD_VAR 0 2
5722: PPUSH
5723: LD_INT 22
5725: PUSH
5726: LD_VAR 0 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 21
5737: PUSH
5738: LD_INT 2
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 24
5747: PUSH
5748: LD_INT 1000
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 58
5757: PUSH
5758: EMPTY
5759: LIST
5760: PUSH
5761: LD_INT 3
5763: PUSH
5764: LD_INT 34
5766: PUSH
5767: LD_INT 53
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: PPUSH
5785: CALL_OW 70
5789: ST_TO_ADDR
// mechanicInside_list = [ ] ;
5790: LD_ADDR_VAR 0 13
5794: PUSH
5795: EMPTY
5796: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
5797: LD_ADDR_VAR 0 14
5801: PUSH
5802: LD_VAR 0 2
5806: PPUSH
5807: LD_INT 22
5809: PUSH
5810: LD_VAR 0 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: LD_INT 25
5821: PUSH
5822: LD_INT 3
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 70
5837: ST_TO_ADDR
// if damageVehicle_list > 0 then
5838: LD_VAR 0 10
5842: PUSH
5843: LD_INT 0
5845: GREATER
5846: IFFALSE 5884
// begin for i in damageVehicle_list do
5848: LD_ADDR_VAR 0 7
5852: PUSH
5853: LD_VAR 0 10
5857: PUSH
5858: FOR_IN
5859: IFFALSE 5882
// begin ComMoveXY ( i , repX , repY ) ;
5861: LD_VAR 0 7
5865: PPUSH
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 4
5875: PPUSH
5876: CALL_OW 111
// end ;
5880: GO 5858
5882: POP
5883: POP
// end ; if vehicleNeedRepair_list > 0 then
5884: LD_VAR 0 11
5888: PUSH
5889: LD_INT 0
5891: GREATER
5892: IFFALSE 5979
// begin for i in vehicleNeedRepair_list do
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_VAR 0 11
5903: PUSH
5904: FOR_IN
5905: IFFALSE 5977
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
5907: LD_ADDR_VAR 0 13
5911: PUSH
5912: LD_VAR 0 13
5916: PUSH
5917: LD_VAR 0 7
5921: PPUSH
5922: CALL_OW 313
5926: ADD
5927: ST_TO_ADDR
// for j in mechanicInside_list do
5928: LD_ADDR_VAR 0 8
5932: PUSH
5933: LD_VAR 0 13
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5973
// begin ComExitVehicle ( i ) ;
5941: LD_VAR 0 7
5945: PPUSH
5946: CALL_OW 121
// wait ( 0 0$1 ) ;
5950: LD_INT 35
5952: PPUSH
5953: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
5957: LD_VAR 0 7
5961: PPUSH
5962: LD_VAR 0 8
5966: PPUSH
5967: CALL_OW 129
// end ;
5971: GO 5938
5973: POP
5974: POP
// end ;
5975: GO 5904
5977: POP
5978: POP
// end ; if vehicleDontNeedRepair_list > 0 then
5979: LD_VAR 0 12
5983: PUSH
5984: LD_INT 0
5986: GREATER
5987: IFFALSE 6027
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
5989: LD_VAR 0 14
5993: PUSH
5994: LD_INT 1
5996: ARRAY
5997: PPUSH
5998: LD_VAR 0 12
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PPUSH
6007: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6011: LD_VAR 0 12
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: LD_INT 100
6022: PPUSH
6023: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6027: LD_VAR 0 9
6031: PUSH
6032: LD_INT 0
6034: GREATER
6035: IFFALSE 6226
// begin for i in vehicleOK_list do
6037: LD_ADDR_VAR 0 7
6041: PUSH
6042: LD_VAR 0 9
6046: PUSH
6047: FOR_IN
6048: IFFALSE 6224
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6050: LD_ADDR_VAR 0 15
6054: PUSH
6055: LD_INT 22
6057: PUSH
6058: LD_VAR 0 5
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: PPUSH
6072: LD_VAR 0 7
6076: PPUSH
6077: CALL_OW 74
6081: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6082: LD_ADDR_VAR 0 16
6086: PUSH
6087: LD_INT 22
6089: PUSH
6090: LD_VAR 0 5
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 59
6104: PUSH
6105: EMPTY
6106: LIST
6107: PUSH
6108: LD_INT 21
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 21
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: PPUSH
6141: CALL_OW 69
6145: PPUSH
6146: LD_VAR 0 7
6150: PPUSH
6151: CALL_OW 74
6155: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6156: LD_VAR 0 7
6160: PPUSH
6161: LD_VAR 0 15
6165: PPUSH
6166: CALL_OW 296
6170: PUSH
6171: LD_INT 8
6173: PLUS
6174: PUSH
6175: LD_VAR 0 7
6179: PPUSH
6180: LD_VAR 0 16
6184: PPUSH
6185: CALL_OW 296
6189: LESS
6190: IFFALSE 6208
// begin ComAttackUnit ( i , target1 ) ;
6192: LD_VAR 0 7
6196: PPUSH
6197: LD_VAR 0 15
6201: PPUSH
6202: CALL_OW 115
// end else
6206: GO 6222
// begin ComAttackUnit ( i , target2 ) ;
6208: LD_VAR 0 7
6212: PPUSH
6213: LD_VAR 0 16
6217: PPUSH
6218: CALL_OW 115
// end ; end ;
6222: GO 6047
6224: POP
6225: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
6226: LD_ADDR_VAR 0 7
6230: PUSH
6231: LD_VAR 0 2
6235: PPUSH
6236: LD_INT 22
6238: PUSH
6239: LD_VAR 0 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 3
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 70
6266: NOT
6267: PUSH
6268: FOR_IN
6269: IFFALSE 6292
// ComMoveXY ( i , repX , repY ) ;
6271: LD_VAR 0 7
6275: PPUSH
6276: LD_VAR 0 3
6280: PPUSH
6281: LD_VAR 0 4
6285: PPUSH
6286: CALL_OW 111
6290: GO 6268
6292: POP
6293: POP
// end ;
6294: LD_VAR 0 6
6298: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
6299: LD_INT 0
6301: PPUSH
6302: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
6303: LD_INT 22
6305: PUSH
6306: LD_VAR 0 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 25
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: PUSH
6334: LD_INT 0
6336: GREATER
6337: PUSH
6338: LD_INT 22
6340: PUSH
6341: LD_VAR 0 1
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 21
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: LD_INT 24
6365: PUSH
6366: LD_INT 1000
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 69
6386: PUSH
6387: LD_INT 0
6389: EQUAL
6390: AND
6391: PUSH
6392: LD_VAR 0 2
6396: PUSH
6397: LD_INT 0
6399: GREATER
6400: AND
6401: IFFALSE 6500
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
6403: LD_ADDR_VAR 0 4
6407: PUSH
6408: LD_INT 22
6410: PUSH
6411: LD_VAR 0 1
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 25
6422: PUSH
6423: LD_INT 2
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: PUSH
6439: FOR_IN
6440: IFFALSE 6498
// begin AddComExitBuilding ( i ) ;
6442: LD_VAR 0 4
6446: PPUSH
6447: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
6451: LD_VAR 0 4
6455: PPUSH
6456: LD_VAR 0 2
6460: PUSH
6461: LD_INT 1
6463: ARRAY
6464: PPUSH
6465: LD_VAR 0 2
6469: PUSH
6470: LD_INT 2
6472: ARRAY
6473: PPUSH
6474: LD_VAR 0 2
6478: PUSH
6479: LD_INT 3
6481: ARRAY
6482: PPUSH
6483: LD_VAR 0 2
6487: PUSH
6488: LD_INT 4
6490: ARRAY
6491: PPUSH
6492: CALL_OW 205
// end ;
6496: GO 6439
6498: POP
6499: POP
// end ; end ;
6500: LD_VAR 0 3
6504: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
6514: LD_ADDR_VAR 0 7
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_VAR 0 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 25
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 56
6543: PUSH
6544: EMPTY
6545: LIST
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 700
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: PPUSH
6563: CALL_OW 69
6567: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6568: LD_ADDR_VAR 0 8
6572: PUSH
6573: LD_INT 22
6575: PUSH
6576: LD_VAR 0 1
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 30
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 58
6597: PUSH
6598: EMPTY
6599: LIST
6600: PUSH
6601: LD_INT 24
6603: PUSH
6604: LD_INT 251
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6622: LD_ADDR_VAR 0 10
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_VAR 0 1
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 25
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 25
6654: PUSH
6655: LD_INT 8
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 25
6664: PUSH
6665: LD_INT 9
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PPUSH
6682: CALL_OW 69
6686: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
6687: LD_ADDR_VAR 0 9
6691: PUSH
6692: LD_VAR 0 2
6696: PPUSH
6697: CALL_OW 313
6701: PUSH
6702: LD_VAR 0 10
6706: DIFF
6707: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
6708: LD_VAR 0 8
6712: PUSH
6713: LD_INT 0
6715: EQUAL
6716: PUSH
6717: LD_VAR 0 9
6721: PUSH
6722: LD_INT 0
6724: EQUAL
6725: AND
6726: IFFALSE 6772
// begin for i in soldiers_list do
6728: LD_ADDR_VAR 0 5
6732: PUSH
6733: LD_VAR 0 7
6737: PUSH
6738: FOR_IN
6739: IFFALSE 6768
// begin if IsOK ( build ) then
6741: LD_VAR 0 2
6745: PPUSH
6746: CALL_OW 302
6750: IFFALSE 6766
// ComEnterUnit ( i , build ) ;
6752: LD_VAR 0 5
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: CALL_OW 120
// end ;
6766: GO 6738
6768: POP
6769: POP
// end else
6770: GO 6857
// begin for i = 1 to turretList do
6772: LD_ADDR_VAR 0 5
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_VAR 0 8
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6855
// begin for j = 1 to temp do
6790: LD_ADDR_VAR 0 6
6794: PUSH
6795: DOUBLE
6796: LD_INT 1
6798: DEC
6799: ST_TO_ADDR
6800: LD_VAR 0 9
6804: PUSH
6805: FOR_TO
6806: IFFALSE 6851
// begin ComExitBuilding ( temp [ j ] ) ;
6808: LD_VAR 0 9
6812: PUSH
6813: LD_VAR 0 6
6817: ARRAY
6818: PPUSH
6819: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
6823: LD_VAR 0 9
6827: PUSH
6828: LD_VAR 0 6
6832: ARRAY
6833: PPUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_VAR 0 5
6843: ARRAY
6844: PPUSH
6845: CALL_OW 180
// end ;
6849: GO 6805
6851: POP
6852: POP
// end ;
6853: GO 6787
6855: POP
6856: POP
// end ; end ;
6857: LD_VAR 0 4
6861: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
6867: PPUSH
6868: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] ] ] ) ;
6869: LD_ADDR_VAR 0 6
6873: PUSH
6874: LD_INT 22
6876: PUSH
6877: LD_VAR 0 1
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: LD_INT 30
6891: PUSH
6892: LD_INT 31
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: LD_INT 32
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 30
6911: PUSH
6912: LD_INT 33
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
6934: LD_ADDR_VAR 0 7
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_VAR 0 2
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 21
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 58
6963: PUSH
6964: EMPTY
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 69
6976: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
6977: LD_VAR 0 6
6981: PUSH
6982: LD_INT 0
6984: GREATER
6985: PUSH
6986: LD_VAR 0 7
6990: PUSH
6991: LD_INT 0
6993: GREATER
6994: AND
6995: IFFALSE 7088
// begin for i in turretsList do
6997: LD_ADDR_VAR 0 4
7001: PUSH
7002: LD_VAR 0 6
7006: PUSH
7007: FOR_IN
7008: IFFALSE 7086
// begin for j in enemyBuildings do
7010: LD_ADDR_VAR 0 5
7014: PUSH
7015: LD_VAR 0 7
7019: PUSH
7020: FOR_IN
7021: IFFALSE 7082
// begin display_strings = [ GetDistUnits ( i , j ) ] ;
7023: LD_ADDR_OWVAR 47
7027: PUSH
7028: LD_VAR 0 4
7032: PPUSH
7033: LD_VAR 0 5
7037: PPUSH
7038: CALL_OW 296
7042: PUSH
7043: EMPTY
7044: LIST
7045: ST_TO_ADDR
// if GetDistUnits ( i , j ) < 20 then
7046: LD_VAR 0 4
7050: PPUSH
7051: LD_VAR 0 5
7055: PPUSH
7056: CALL_OW 296
7060: PUSH
7061: LD_INT 20
7063: LESS
7064: IFFALSE 7080
// begin ComAttackUnit ( i , j ) ;
7066: LD_VAR 0 4
7070: PPUSH
7071: LD_VAR 0 5
7075: PPUSH
7076: CALL_OW 115
// end ; end ;
7080: GO 7020
7082: POP
7083: POP
// end ;
7084: GO 7007
7086: POP
7087: POP
// end ; end ;
7088: LD_VAR 0 3
7092: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7093: LD_INT 0
7095: PPUSH
7096: PPUSH
7097: PPUSH
7098: PPUSH
7099: PPUSH
7100: PPUSH
7101: PPUSH
7102: PPUSH
7103: PPUSH
7104: PPUSH
7105: PPUSH
// for i = 1 to medicCount do
7106: LD_ADDR_VAR 0 14
7110: PUSH
7111: DOUBLE
7112: LD_INT 1
7114: DEC
7115: ST_TO_ADDR
7116: LD_VAR 0 7
7120: PUSH
7121: FOR_TO
7122: IFFALSE 7204
// begin uc_side = side ;
7124: LD_ADDR_OWVAR 20
7128: PUSH
7129: LD_VAR 0 1
7133: ST_TO_ADDR
// uc_nation = nation ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_VAR 0 2
7143: ST_TO_ADDR
// hc_name =  ;
7144: LD_ADDR_OWVAR 26
7148: PUSH
7149: LD_STRING 
7151: ST_TO_ADDR
// hc_gallery =  ;
7152: LD_ADDR_OWVAR 33
7156: PUSH
7157: LD_STRING 
7159: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7160: LD_INT 0
7162: PPUSH
7163: LD_INT 4
7165: PPUSH
7166: LD_VAR 0 8
7170: PPUSH
7171: CALL_OW 380
// un = CreateHuman ;
7175: LD_ADDR_VAR 0 16
7179: PUSH
7180: CALL_OW 44
7184: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7185: LD_VAR 0 16
7189: PPUSH
7190: LD_VAR 0 9
7194: PPUSH
7195: LD_INT 0
7197: PPUSH
7198: CALL_OW 49
// end ;
7202: GO 7121
7204: POP
7205: POP
// for i = 1 to soldierCount do
7206: LD_ADDR_VAR 0 14
7210: PUSH
7211: DOUBLE
7212: LD_INT 1
7214: DEC
7215: ST_TO_ADDR
7216: LD_VAR 0 3
7220: PUSH
7221: FOR_TO
7222: IFFALSE 7304
// begin uc_side = side ;
7224: LD_ADDR_OWVAR 20
7228: PUSH
7229: LD_VAR 0 1
7233: ST_TO_ADDR
// uc_nation = nation ;
7234: LD_ADDR_OWVAR 21
7238: PUSH
7239: LD_VAR 0 2
7243: ST_TO_ADDR
// hc_name =  ;
7244: LD_ADDR_OWVAR 26
7248: PUSH
7249: LD_STRING 
7251: ST_TO_ADDR
// hc_gallery =  ;
7252: LD_ADDR_OWVAR 33
7256: PUSH
7257: LD_STRING 
7259: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: LD_VAR 0 8
7270: PPUSH
7271: CALL_OW 380
// un = CreateHuman ;
7275: LD_ADDR_VAR 0 16
7279: PUSH
7280: CALL_OW 44
7284: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7285: LD_VAR 0 16
7289: PPUSH
7290: LD_VAR 0 9
7294: PPUSH
7295: LD_INT 0
7297: PPUSH
7298: CALL_OW 49
// end ;
7302: GO 7221
7304: POP
7305: POP
// for i = 1 to sniperCount do
7306: LD_ADDR_VAR 0 14
7310: PUSH
7311: DOUBLE
7312: LD_INT 1
7314: DEC
7315: ST_TO_ADDR
7316: LD_VAR 0 4
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7404
// begin uc_side = side ;
7324: LD_ADDR_OWVAR 20
7328: PUSH
7329: LD_VAR 0 1
7333: ST_TO_ADDR
// uc_nation = nation ;
7334: LD_ADDR_OWVAR 21
7338: PUSH
7339: LD_VAR 0 2
7343: ST_TO_ADDR
// hc_name =  ;
7344: LD_ADDR_OWVAR 26
7348: PUSH
7349: LD_STRING 
7351: ST_TO_ADDR
// hc_gallery =  ;
7352: LD_ADDR_OWVAR 33
7356: PUSH
7357: LD_STRING 
7359: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7360: LD_INT 0
7362: PPUSH
7363: LD_INT 5
7365: PPUSH
7366: LD_VAR 0 8
7370: PPUSH
7371: CALL_OW 380
// un = CreateHuman ;
7375: LD_ADDR_VAR 0 16
7379: PUSH
7380: CALL_OW 44
7384: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7385: LD_VAR 0 16
7389: PPUSH
7390: LD_VAR 0 9
7394: PPUSH
7395: LD_INT 0
7397: PPUSH
7398: CALL_OW 49
// end ;
7402: GO 7321
7404: POP
7405: POP
// for i = 1 to bazookCount do
7406: LD_ADDR_VAR 0 14
7410: PUSH
7411: DOUBLE
7412: LD_INT 1
7414: DEC
7415: ST_TO_ADDR
7416: LD_VAR 0 5
7420: PUSH
7421: FOR_TO
7422: IFFALSE 7504
// begin uc_side = side ;
7424: LD_ADDR_OWVAR 20
7428: PUSH
7429: LD_VAR 0 1
7433: ST_TO_ADDR
// uc_nation = nation ;
7434: LD_ADDR_OWVAR 21
7438: PUSH
7439: LD_VAR 0 2
7443: ST_TO_ADDR
// hc_name =  ;
7444: LD_ADDR_OWVAR 26
7448: PUSH
7449: LD_STRING 
7451: ST_TO_ADDR
// hc_gallery =  ;
7452: LD_ADDR_OWVAR 33
7456: PUSH
7457: LD_STRING 
7459: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7460: LD_INT 0
7462: PPUSH
7463: LD_INT 9
7465: PPUSH
7466: LD_VAR 0 8
7470: PPUSH
7471: CALL_OW 380
// un = CreateHuman ;
7475: LD_ADDR_VAR 0 16
7479: PUSH
7480: CALL_OW 44
7484: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7485: LD_VAR 0 16
7489: PPUSH
7490: LD_VAR 0 9
7494: PPUSH
7495: LD_INT 0
7497: PPUSH
7498: CALL_OW 49
// end ;
7502: GO 7421
7504: POP
7505: POP
// for i = 1 to mortalCount do
7506: LD_ADDR_VAR 0 14
7510: PUSH
7511: DOUBLE
7512: LD_INT 1
7514: DEC
7515: ST_TO_ADDR
7516: LD_VAR 0 6
7520: PUSH
7521: FOR_TO
7522: IFFALSE 7604
// begin uc_side = side ;
7524: LD_ADDR_OWVAR 20
7528: PUSH
7529: LD_VAR 0 1
7533: ST_TO_ADDR
// uc_nation = nation ;
7534: LD_ADDR_OWVAR 21
7538: PUSH
7539: LD_VAR 0 2
7543: ST_TO_ADDR
// hc_name =  ;
7544: LD_ADDR_OWVAR 26
7548: PUSH
7549: LD_STRING 
7551: ST_TO_ADDR
// hc_gallery =  ;
7552: LD_ADDR_OWVAR 33
7556: PUSH
7557: LD_STRING 
7559: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7560: LD_INT 0
7562: PPUSH
7563: LD_INT 8
7565: PPUSH
7566: LD_VAR 0 8
7570: PPUSH
7571: CALL_OW 380
// un = CreateHuman ;
7575: LD_ADDR_VAR 0 16
7579: PUSH
7580: CALL_OW 44
7584: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7585: LD_VAR 0 16
7589: PPUSH
7590: LD_VAR 0 9
7594: PPUSH
7595: LD_INT 0
7597: PPUSH
7598: CALL_OW 49
// end ;
7602: GO 7521
7604: POP
7605: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7606: LD_ADDR_VAR 0 19
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_VAR 0 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 25
7628: PUSH
7629: LD_INT 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 25
7638: PUSH
7639: LD_INT 5
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 25
7648: PUSH
7649: LD_INT 8
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 25
7658: PUSH
7659: LD_INT 9
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7682: LD_ADDR_VAR 0 18
7686: PUSH
7687: LD_INT 22
7689: PUSH
7690: LD_VAR 0 1
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: LD_INT 25
7701: PUSH
7702: LD_INT 4
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PPUSH
7713: CALL_OW 69
7717: ST_TO_ADDR
// for i in medic_list do
7718: LD_ADDR_VAR 0 14
7722: PUSH
7723: LD_VAR 0 18
7727: PUSH
7728: FOR_IN
7729: IFFALSE 7747
// ComMoveToArea ( i , healArea ) ;
7731: LD_VAR 0 14
7735: PPUSH
7736: LD_VAR 0 10
7740: PPUSH
7741: CALL_OW 113
7745: GO 7728
7747: POP
7748: POP
// if strategy = 1 then
7749: LD_VAR 0 12
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 8462
// begin repeat wait ( 0 0$3 ) ;
7759: LD_INT 105
7761: PPUSH
7762: CALL_OW 67
// for i in soldiersOK_list do
7766: LD_ADDR_VAR 0 14
7770: PUSH
7771: LD_VAR 0 19
7775: PUSH
7776: FOR_IN
7777: IFFALSE 7811
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
7779: LD_VAR 0 14
7783: PPUSH
7784: LD_INT 80
7786: PPUSH
7787: LD_INT 109
7789: PPUSH
7790: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
7794: LD_VAR 0 14
7798: PPUSH
7799: LD_INT 39
7801: PPUSH
7802: LD_INT 49
7804: PPUSH
7805: CALL_OW 174
// end ;
7809: GO 7776
7811: POP
7812: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
7813: LD_INT 15
7815: PPUSH
7816: LD_INT 22
7818: PUSH
7819: LD_VAR 0 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 70
7832: PUSH
7833: LD_INT 0
7835: GREATER
7836: IFFALSE 7759
// repeat wait ( 0 0$1 ) ;
7838: LD_INT 35
7840: PPUSH
7841: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7845: LD_ADDR_VAR 0 17
7849: PUSH
7850: LD_INT 22
7852: PUSH
7853: LD_VAR 0 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 1
7864: PUSH
7865: LD_INT 3
7867: PUSH
7868: LD_INT 24
7870: PUSH
7871: LD_INT 550
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: LD_INT 24
7884: PUSH
7885: LD_INT 250
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PPUSH
7901: CALL_OW 69
7905: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7906: LD_ADDR_VAR 0 19
7910: PUSH
7911: LD_INT 22
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: LD_INT 25
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 25
7938: PUSH
7939: LD_INT 5
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 8
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 25
7958: PUSH
7959: LD_INT 9
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 24
7975: PUSH
7976: LD_INT 1000
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: PPUSH
7988: CALL_OW 69
7992: ST_TO_ADDR
// if medicCount > 0 then
7993: LD_VAR 0 7
7997: PUSH
7998: LD_INT 0
8000: GREATER
8001: IFFALSE 8075
// begin if damageUnit_list > 0 then
8003: LD_VAR 0 17
8007: PUSH
8008: LD_INT 0
8010: GREATER
8011: IFFALSE 8075
// begin for i in damageUnit_list do
8013: LD_ADDR_VAR 0 14
8017: PUSH
8018: LD_VAR 0 17
8022: PUSH
8023: FOR_IN
8024: IFFALSE 8073
// begin ComMoveToArea ( i , healArea ) ;
8026: LD_VAR 0 14
8030: PPUSH
8031: LD_VAR 0 10
8035: PPUSH
8036: CALL_OW 113
// for j in medic_list do
8040: LD_ADDR_VAR 0 15
8044: PUSH
8045: LD_VAR 0 18
8049: PUSH
8050: FOR_IN
8051: IFFALSE 8069
// AddComHeal ( j , i ) ;
8053: LD_VAR 0 15
8057: PPUSH
8058: LD_VAR 0 14
8062: PPUSH
8063: CALL_OW 188
8067: GO 8050
8069: POP
8070: POP
// end ;
8071: GO 8023
8073: POP
8074: POP
// end ; end ; for i in soldiersOK_list do
8075: LD_ADDR_VAR 0 14
8079: PUSH
8080: LD_VAR 0 19
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8262
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8088: LD_ADDR_VAR 0 22
8092: PUSH
8093: LD_INT 22
8095: PUSH
8096: LD_VAR 0 11
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PPUSH
8105: CALL_OW 69
8109: PPUSH
8110: LD_VAR 0 14
8114: PPUSH
8115: CALL_OW 74
8119: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8120: LD_ADDR_VAR 0 23
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_VAR 0 11
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 59
8142: PUSH
8143: EMPTY
8144: LIST
8145: PUSH
8146: LD_INT 21
8148: PUSH
8149: LD_INT 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 21
8158: PUSH
8159: LD_INT 2
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: PPUSH
8179: CALL_OW 69
8183: PPUSH
8184: LD_VAR 0 14
8188: PPUSH
8189: CALL_OW 74
8193: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8194: LD_VAR 0 14
8198: PPUSH
8199: LD_VAR 0 22
8203: PPUSH
8204: CALL_OW 296
8208: PUSH
8209: LD_INT 8
8211: PLUS
8212: PUSH
8213: LD_VAR 0 14
8217: PPUSH
8218: LD_VAR 0 23
8222: PPUSH
8223: CALL_OW 296
8227: LESS
8228: IFFALSE 8246
// begin ComAttackUnit ( i , target1 ) ;
8230: LD_VAR 0 14
8234: PPUSH
8235: LD_VAR 0 22
8239: PPUSH
8240: CALL_OW 115
// end else
8244: GO 8260
// begin ComAttackUnit ( i , target2 ) ;
8246: LD_VAR 0 14
8250: PPUSH
8251: LD_VAR 0 23
8255: PPUSH
8256: CALL_OW 115
// end ; end ;
8260: GO 8085
8262: POP
8263: POP
// for i in soldiersOK_list do
8264: LD_ADDR_VAR 0 14
8268: PUSH
8269: LD_VAR 0 19
8273: PUSH
8274: FOR_IN
8275: IFFALSE 8451
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8277: LD_ADDR_VAR 0 22
8281: PUSH
8282: LD_INT 22
8284: PUSH
8285: LD_VAR 0 11
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 69
8298: PPUSH
8299: LD_VAR 0 14
8303: PPUSH
8304: CALL_OW 74
8308: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8309: LD_ADDR_VAR 0 23
8313: PUSH
8314: LD_INT 22
8316: PUSH
8317: LD_VAR 0 11
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: LD_INT 59
8331: PUSH
8332: EMPTY
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 21
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: PPUSH
8368: CALL_OW 69
8372: PPUSH
8373: LD_VAR 0 14
8377: PPUSH
8378: CALL_OW 74
8382: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8383: LD_VAR 0 14
8387: PPUSH
8388: LD_VAR 0 22
8392: PPUSH
8393: CALL_OW 296
8397: PUSH
8398: LD_INT 8
8400: PLUS
8401: PUSH
8402: LD_VAR 0 14
8406: PPUSH
8407: LD_VAR 0 23
8411: PPUSH
8412: CALL_OW 296
8416: LESS
8417: IFFALSE 8435
// begin ComAttackUnit ( i , target1 ) ;
8419: LD_VAR 0 14
8423: PPUSH
8424: LD_VAR 0 22
8428: PPUSH
8429: CALL_OW 115
// end else
8433: GO 8449
// begin ComAttackUnit ( i , target2 ) ;
8435: LD_VAR 0 14
8439: PPUSH
8440: LD_VAR 0 23
8444: PPUSH
8445: CALL_OW 115
// end ; end ;
8449: GO 8274
8451: POP
8452: POP
// until soldiersOK_list = [ ] ;
8453: LD_VAR 0 19
8457: PUSH
8458: EMPTY
8459: EQUAL
8460: IFFALSE 7838
// end ; if strategy = 2 then
8462: LD_VAR 0 12
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 9175
// begin repeat wait ( 0 0$1 ) ;
8472: LD_INT 35
8474: PPUSH
8475: CALL_OW 67
// for i in soldiersOK_list do
8479: LD_ADDR_VAR 0 14
8483: PUSH
8484: LD_VAR 0 19
8488: PUSH
8489: FOR_IN
8490: IFFALSE 8524
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
8492: LD_VAR 0 14
8496: PPUSH
8497: LD_INT 117
8499: PPUSH
8500: LD_INT 97
8502: PPUSH
8503: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
8507: LD_VAR 0 14
8511: PPUSH
8512: LD_INT 94
8514: PPUSH
8515: LD_INT 50
8517: PPUSH
8518: CALL_OW 174
// end ;
8522: GO 8489
8524: POP
8525: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
8526: LD_INT 16
8528: PPUSH
8529: LD_INT 22
8531: PUSH
8532: LD_VAR 0 1
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PPUSH
8541: CALL_OW 70
8545: PUSH
8546: LD_INT 0
8548: GREATER
8549: IFFALSE 8472
// repeat wait ( 0 0$3 ) ;
8551: LD_INT 105
8553: PPUSH
8554: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8558: LD_ADDR_VAR 0 17
8562: PUSH
8563: LD_INT 22
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: LD_INT 3
8580: PUSH
8581: LD_INT 24
8583: PUSH
8584: LD_INT 550
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 250
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PPUSH
8614: CALL_OW 69
8618: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8619: LD_ADDR_VAR 0 19
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_VAR 0 1
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 25
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 25
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 25
8661: PUSH
8662: LD_INT 8
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 25
8671: PUSH
8672: LD_INT 9
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 24
8688: PUSH
8689: LD_INT 1000
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: ST_TO_ADDR
// if medicCount > 0 then
8706: LD_VAR 0 7
8710: PUSH
8711: LD_INT 0
8713: GREATER
8714: IFFALSE 8788
// begin if damageUnit_list > 0 then
8716: LD_VAR 0 17
8720: PUSH
8721: LD_INT 0
8723: GREATER
8724: IFFALSE 8788
// begin for i in damageUnit_list do
8726: LD_ADDR_VAR 0 14
8730: PUSH
8731: LD_VAR 0 17
8735: PUSH
8736: FOR_IN
8737: IFFALSE 8786
// begin ComMoveToArea ( i , healArea ) ;
8739: LD_VAR 0 14
8743: PPUSH
8744: LD_VAR 0 10
8748: PPUSH
8749: CALL_OW 113
// for j in medic_list do
8753: LD_ADDR_VAR 0 15
8757: PUSH
8758: LD_VAR 0 18
8762: PUSH
8763: FOR_IN
8764: IFFALSE 8782
// AddComHeal ( j , i ) ;
8766: LD_VAR 0 15
8770: PPUSH
8771: LD_VAR 0 14
8775: PPUSH
8776: CALL_OW 188
8780: GO 8763
8782: POP
8783: POP
// end ;
8784: GO 8736
8786: POP
8787: POP
// end ; end ; for i in soldiersOK_list do
8788: LD_ADDR_VAR 0 14
8792: PUSH
8793: LD_VAR 0 19
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8975
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8801: LD_ADDR_VAR 0 22
8805: PUSH
8806: LD_INT 22
8808: PUSH
8809: LD_VAR 0 11
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PPUSH
8818: CALL_OW 69
8822: PPUSH
8823: LD_VAR 0 14
8827: PPUSH
8828: CALL_OW 74
8832: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8833: LD_ADDR_VAR 0 23
8837: PUSH
8838: LD_INT 22
8840: PUSH
8841: LD_VAR 0 11
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 2
8852: PUSH
8853: LD_INT 59
8855: PUSH
8856: EMPTY
8857: LIST
8858: PUSH
8859: LD_INT 21
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: PPUSH
8892: CALL_OW 69
8896: PPUSH
8897: LD_VAR 0 14
8901: PPUSH
8902: CALL_OW 74
8906: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8907: LD_VAR 0 14
8911: PPUSH
8912: LD_VAR 0 22
8916: PPUSH
8917: CALL_OW 296
8921: PUSH
8922: LD_INT 8
8924: PLUS
8925: PUSH
8926: LD_VAR 0 14
8930: PPUSH
8931: LD_VAR 0 23
8935: PPUSH
8936: CALL_OW 296
8940: LESS
8941: IFFALSE 8959
// begin ComAttackUnit ( i , target1 ) ;
8943: LD_VAR 0 14
8947: PPUSH
8948: LD_VAR 0 22
8952: PPUSH
8953: CALL_OW 115
// end else
8957: GO 8973
// begin ComAttackUnit ( i , target2 ) ;
8959: LD_VAR 0 14
8963: PPUSH
8964: LD_VAR 0 23
8968: PPUSH
8969: CALL_OW 115
// end ; end ;
8973: GO 8798
8975: POP
8976: POP
// for i in soldiersOK_list do
8977: LD_ADDR_VAR 0 14
8981: PUSH
8982: LD_VAR 0 19
8986: PUSH
8987: FOR_IN
8988: IFFALSE 9164
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8990: LD_ADDR_VAR 0 22
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_VAR 0 11
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PPUSH
9007: CALL_OW 69
9011: PPUSH
9012: LD_VAR 0 14
9016: PPUSH
9017: CALL_OW 74
9021: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9022: LD_ADDR_VAR 0 23
9026: PUSH
9027: LD_INT 22
9029: PUSH
9030: LD_VAR 0 11
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: LD_INT 59
9044: PUSH
9045: EMPTY
9046: LIST
9047: PUSH
9048: LD_INT 21
9050: PUSH
9051: LD_INT 1
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 21
9060: PUSH
9061: LD_INT 2
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: PPUSH
9081: CALL_OW 69
9085: PPUSH
9086: LD_VAR 0 14
9090: PPUSH
9091: CALL_OW 74
9095: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9096: LD_VAR 0 14
9100: PPUSH
9101: LD_VAR 0 22
9105: PPUSH
9106: CALL_OW 296
9110: PUSH
9111: LD_INT 8
9113: PLUS
9114: PUSH
9115: LD_VAR 0 14
9119: PPUSH
9120: LD_VAR 0 23
9124: PPUSH
9125: CALL_OW 296
9129: LESS
9130: IFFALSE 9148
// begin ComAttackUnit ( i , target1 ) ;
9132: LD_VAR 0 14
9136: PPUSH
9137: LD_VAR 0 22
9141: PPUSH
9142: CALL_OW 115
// end else
9146: GO 9162
// begin ComAttackUnit ( i , target2 ) ;
9148: LD_VAR 0 14
9152: PPUSH
9153: LD_VAR 0 23
9157: PPUSH
9158: CALL_OW 115
// end ; end ;
9162: GO 8987
9164: POP
9165: POP
// until soldiersOK_list = [ ] ;
9166: LD_VAR 0 19
9170: PUSH
9171: EMPTY
9172: EQUAL
9173: IFFALSE 8551
// end ; end ; end_of_file
9175: LD_VAR 0 13
9179: RET
// every 0 0$01 do
9180: GO 9182
9182: DISABLE
// begin ChangeMissionObjectives ( M1 ) ;
9183: LD_STRING M1
9185: PPUSH
9186: CALL_OW 337
// case difficulty of 1 :
9190: LD_OWVAR 67
9194: PUSH
9195: LD_INT 1
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9213
9203: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
9204: LD_STRING M1-1
9206: PPUSH
9207: CALL_OW 337
9211: GO 9250
9213: LD_INT 2
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9231
9221: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
9222: LD_STRING M1-2
9224: PPUSH
9225: CALL_OW 337
9229: GO 9250
9231: LD_INT 3
9233: DOUBLE
9234: EQUAL
9235: IFTRUE 9239
9237: GO 9249
9239: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
9240: LD_STRING M1-3
9242: PPUSH
9243: CALL_OW 337
9247: GO 9250
9249: POP
// ChangeMissionObjectives ( M1cont ) ;
9250: LD_STRING M1cont
9252: PPUSH
9253: CALL_OW 337
// end ;
9257: END
// every 0 0$1 do
9258: GO 9260
9260: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
9261: LD_INT 350
9263: PPUSH
9264: LD_INT 875
9266: PPUSH
9267: CALL_OW 12
9271: PPUSH
9272: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
9276: LD_INT 5
9278: PPUSH
9279: LD_INT 4
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 55
// wait ( 0 0$15 ) ;
9289: LD_INT 525
9291: PPUSH
9292: CALL_OW 67
// if IsOk ( Lisa ) then
9296: LD_EXP 5
9300: PPUSH
9301: CALL_OW 302
9305: IFFALSE 9321
// begin Say ( Lisa , DR0-Lisa-1 ) ;
9307: LD_EXP 5
9311: PPUSH
9312: LD_STRING DR0-Lisa-1
9314: PPUSH
9315: CALL_OW 88
// end else
9319: GO 9464
// begin if IsOK ( Cyrus ) then
9321: LD_EXP 8
9325: PPUSH
9326: CALL_OW 302
9330: IFFALSE 9334
// begin end else
9332: GO 9464
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
9334: LD_INT 22
9336: PUSH
9337: LD_INT 1
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PUSH
9344: LD_INT 21
9346: PUSH
9347: LD_INT 1
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 26
9356: PUSH
9357: LD_INT 1
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 69
9373: PUSH
9374: LD_EXP 1
9378: PUSH
9379: LD_EXP 2
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: DIFF
9388: PPUSH
9389: LD_STRING DR0-Sol1-1
9391: PPUSH
9392: LD_STRING DR0-Sol1-1
9394: PPUSH
9395: CALL 3582 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
9399: LD_INT 22
9401: PUSH
9402: LD_INT 1
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 21
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 26
9421: PUSH
9422: LD_INT 1
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_EXP 1
9443: PUSH
9444: LD_EXP 2
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: DIFF
9453: PPUSH
9454: LD_STRING DR0-Sol2-1
9456: PPUSH
9457: LD_STRING DR0-Sol2-1
9459: PPUSH
9460: CALL 3582 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 21
9476: PUSH
9477: LD_INT 1
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 26
9486: PUSH
9487: LD_INT 1
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 69
9503: PUSH
9504: LD_EXP 1
9508: PUSH
9509: LD_EXP 2
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: DIFF
9518: PPUSH
9519: LD_STRING DR0-Sol2-1
9521: PPUSH
9522: LD_STRING DR0-Sol2-1
9524: PPUSH
9525: CALL 3582 0 3
// Say ( JMM , DR0-JMM-1 ) ;
9529: LD_EXP 1
9533: PPUSH
9534: LD_STRING DR0-JMM-1
9536: PPUSH
9537: CALL_OW 88
// end ;
9541: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
9542: LD_EXP 3
9546: PPUSH
9547: CALL_OW 302
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 25
9564: PUSH
9565: LD_INT 16
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PPUSH
9576: CALL_OW 69
9580: PUSH
9581: LD_INT 0
9583: GREATER
9584: AND
9585: IFFALSE 9757
9587: GO 9589
9589: DISABLE
// begin DialogueOn ;
9590: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
9594: LD_EXP 3
9598: PPUSH
9599: LD_STRING D10-Frank-1
9601: PPUSH
9602: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
9606: LD_INT 22
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 21
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 69
9634: PUSH
9635: LD_EXP 1
9639: PUSH
9640: LD_EXP 3
9644: PUSH
9645: LD_EXP 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: DIFF
9655: PPUSH
9656: LD_STRING D10-Sol1-1
9658: PPUSH
9659: LD_STRING D10-FSol1-1
9661: PPUSH
9662: CALL 3582 0 3
// Say ( Frank , D10-Frank-2 ) ;
9666: LD_EXP 3
9670: PPUSH
9671: LD_STRING D10-Frank-2
9673: PPUSH
9674: CALL_OW 88
// if IsOK ( Lisa ) then
9678: LD_EXP 5
9682: PPUSH
9683: CALL_OW 302
9687: IFFALSE 9703
// begin Say ( Lisa , D10-Lisa-2 ) ;
9689: LD_EXP 5
9693: PPUSH
9694: LD_STRING D10-Lisa-2
9696: PPUSH
9697: CALL_OW 88
// end else
9701: GO 9757
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
9703: LD_INT 22
9705: PUSH
9706: LD_INT 1
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 21
9715: PUSH
9716: LD_INT 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: PPUSH
9727: CALL_OW 69
9731: PUSH
9732: LD_EXP 1
9736: PUSH
9737: LD_EXP 3
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: DIFF
9746: PPUSH
9747: LD_STRING D10-Sol1-2
9749: PPUSH
9750: LD_STRING D10-FSol1-2
9752: PPUSH
9753: CALL 3582 0 3
// end ; end ;
9757: END
// every 10 10$0 do
9758: GO 9760
9760: DISABLE
// begin HarrisonSupport ;
9761: CALL 931 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
9765: LD_EXP 13
9769: PPUSH
9770: CALL_OW 310
9774: PPUSH
9775: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
9779: LD_EXP 13
9783: PPUSH
9784: LD_STRING DEng-Eng1-1
9786: PPUSH
9787: CALL_OW 88
// wait ( 1 1$0 ) ;
9791: LD_INT 2100
9793: PPUSH
9794: CALL_OW 67
// DialogueOn ;
9798: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
9802: LD_EXP 9
9806: PPUSH
9807: LD_STRING DRem-Har-1
9809: PPUSH
9810: CALL_OW 94
// if contactWithRussian = 1 then
9814: LD_EXP 18
9818: PUSH
9819: LD_INT 1
9821: EQUAL
9822: IFFALSE 9838
// begin Say ( JMM , DRem-JMM-1 ) ;
9824: LD_EXP 1
9828: PPUSH
9829: LD_STRING DRem-JMM-1
9831: PPUSH
9832: CALL_OW 88
// end else
9836: GO 9850
// begin Say ( JMM , DRem-JMM-1a ) ;
9838: LD_EXP 1
9842: PPUSH
9843: LD_STRING DRem-JMM-1a
9845: PPUSH
9846: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
9850: LD_EXP 9
9854: PPUSH
9855: LD_STRING DRem-Har-2
9857: PPUSH
9858: CALL_OW 94
// Say ( JMM , DRem-JMM-2 ) ;
9862: LD_EXP 1
9866: PPUSH
9867: LD_STRING DRem-JMM-2
9869: PPUSH
9870: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
9874: LD_EXP 9
9878: PPUSH
9879: LD_STRING DRem-Har-3
9881: PPUSH
9882: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
9886: LD_EXP 1
9890: PPUSH
9891: LD_STRING DRem-JMM-3
9893: PPUSH
9894: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
9898: LD_EXP 9
9902: PPUSH
9903: LD_STRING DRem-Har-4
9905: PPUSH
9906: CALL_OW 94
// Say ( JMM , DRem-JMM-4 ) ;
9910: LD_EXP 1
9914: PPUSH
9915: LD_STRING DRem-JMM-4
9917: PPUSH
9918: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
9922: LD_EXP 9
9926: PPUSH
9927: LD_STRING DRem-Har-5
9929: PPUSH
9930: CALL_OW 94
// DialogueOff ;
9934: CALL_OW 7
// end ;
9938: END
// every 15 15$0 do
9939: GO 9941
9941: DISABLE
// begin PrepareDenis ;
9942: CALL 852 0 0
// CenterNowOnUnits ( Denis ) ;
9946: LD_EXP 7
9950: PPUSH
9951: CALL_OW 87
// DialogueOn ;
9955: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
9959: LD_EXP 7
9963: PPUSH
9964: LD_STRING DDen-Den-1
9966: PPUSH
9967: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
9971: LD_EXP 1
9975: PPUSH
9976: LD_STRING DDen-JMM-1
9978: PPUSH
9979: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
9983: LD_EXP 7
9987: PPUSH
9988: LD_STRING DDen-Den-2
9990: PPUSH
9991: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
9995: LD_EXP 1
9999: PPUSH
10000: LD_STRING DDen-JMM-2
10002: PPUSH
10003: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
10007: LD_EXP 7
10011: PPUSH
10012: LD_STRING DDen-Den-3
10014: PPUSH
10015: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
10019: LD_EXP 1
10023: PPUSH
10024: LD_STRING DDen-JMM-3
10026: PPUSH
10027: CALL_OW 88
// DialogueOff ;
10031: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
10035: LD_INT 36
10037: PPUSH
10038: LD_INT 1
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
10048: LD_INT 15
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
10061: LD_STRING MR
10063: PPUSH
10064: CALL_OW 337
// end ;
10068: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
10069: CALL 10114 0 0
10073: PUSH
10074: LD_EXP 7
10078: PPUSH
10079: CALL_OW 302
10083: AND
10084: IFFALSE 10113
10086: GO 10088
10088: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
10089: LD_EXP 7
10093: PPUSH
10094: LD_STRING DR1-Den-1
10096: PPUSH
10097: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
10101: LD_EXP 1
10105: PPUSH
10106: LD_STRING DR1-JMM-1
10108: PPUSH
10109: CALL_OW 88
// end ;
10113: END
// function CheckOptoLab ; var i ; begin
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
// result = false ;
10118: LD_ADDR_VAR 0 1
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: LD_INT 22
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: LD_INT 30
10146: PUSH
10147: LD_INT 7
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 30
10156: PUSH
10157: LD_INT 8
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PPUSH
10173: CALL_OW 69
10177: PUSH
10178: FOR_IN
10179: IFFALSE 10231
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
10181: LD_VAR 0 2
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 268
10193: PUSH
10194: LD_INT 15
10196: EQUAL
10197: PUSH
10198: LD_VAR 0 2
10202: PPUSH
10203: LD_INT 2
10205: PPUSH
10206: CALL_OW 268
10210: PUSH
10211: LD_INT 15
10213: EQUAL
10214: OR
10215: IFFALSE 10227
// begin result = true ;
10217: LD_ADDR_VAR 0 1
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// break ;
10225: GO 10231
// end ; break ;
10227: GO 10231
// end ;
10229: GO 10178
10231: POP
10232: POP
// end ;
10233: LD_VAR 0 1
10237: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
10238: LD_INT 15
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 321
10248: PUSH
10249: LD_INT 2
10251: EQUAL
10252: PUSH
10253: LD_EXP 7
10257: PPUSH
10258: CALL_OW 302
10262: AND
10263: IFFALSE 10450
10265: GO 10267
10267: DISABLE
// begin DialogueOn ;
10268: CALL_OW 6
// if IsOK ( Denis ) then
10272: LD_EXP 7
10276: PPUSH
10277: CALL_OW 302
10281: IFFALSE 10297
// begin Say ( Denis , DR2-Den-1 ) ;
10283: LD_EXP 7
10287: PPUSH
10288: LD_STRING DR2-Den-1
10290: PPUSH
10291: CALL_OW 88
// end else
10295: GO 10356
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
10297: LD_INT 22
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 21
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 25
10319: PUSH
10320: LD_INT 4
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_EXP 1
10341: PUSH
10342: EMPTY
10343: LIST
10344: DIFF
10345: PPUSH
10346: LD_STRING DR2-Sci1-1
10348: PPUSH
10349: LD_STRING DR2-FSci1-1
10351: PPUSH
10352: CALL 3582 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DR2-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: LD_INT 25
10393: PUSH
10394: LD_INT 4
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: PPUSH
10410: CALL_OW 69
10414: PUSH
10415: LD_EXP 1
10419: PUSH
10420: EMPTY
10421: LIST
10422: DIFF
10423: PPUSH
10424: LD_STRING DR2-Sol1-1
10426: PPUSH
10427: LD_STRING DR2-Sol1-11
10429: PPUSH
10430: CALL 3582 0 3
// Say ( JMM , DR2-JMM-2 ) ;
10434: LD_EXP 1
10438: PPUSH
10439: LD_STRING DR2-JMM-2
10441: PPUSH
10442: CALL_OW 88
// DialogueOff ;
10446: CALL_OW 7
// end ;
10450: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
10451: LD_INT 22
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 30
10463: PUSH
10464: LD_INT 36
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 69
10479: PUSH
10480: LD_INT 0
10482: EQUAL
10483: PUSH
10484: LD_INT 22
10486: PUSH
10487: LD_INT 1
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 2
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 33
10506: PUSH
10507: LD_INT 2
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: PPUSH
10519: CALL_OW 69
10523: PUSH
10524: LD_INT 0
10526: GREATER
10527: AND
10528: PUSH
10529: LD_EXP 19
10533: PUSH
10534: LD_INT 0
10536: EQUAL
10537: AND
10538: IFFALSE 10610
10540: GO 10542
10542: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
10543: LD_INT 22
10545: PUSH
10546: LD_INT 1
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 21
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 3
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL_OW 69
10582: PUSH
10583: LD_EXP 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: DIFF
10591: PPUSH
10592: LD_STRING D3a-Mech1-1
10594: PPUSH
10595: LD_STRING D3a-Mech1-1
10597: PPUSH
10598: CALL 3582 0 3
// firstTower = 2 ;
10602: LD_ADDR_EXP 19
10606: PUSH
10607: LD_INT 2
10609: ST_TO_ADDR
// end ;
10610: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
10611: LD_INT 22
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 36
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PPUSH
10635: CALL_OW 69
10639: PUSH
10640: LD_INT 0
10642: GREATER
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 1
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 21
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 33
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 69
10683: PUSH
10684: LD_INT 0
10686: GREATER
10687: AND
10688: PUSH
10689: CALL 11271 0 0
10693: AND
10694: IFFALSE 11268
10696: GO 10698
10698: DISABLE
10699: LD_INT 0
10701: PPUSH
10702: PPUSH
10703: PPUSH
10704: PPUSH
10705: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 22
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 36
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
10740: LD_ADDR_VAR 0 4
10744: PUSH
10745: LD_INT 22
10747: PUSH
10748: LD_INT 1
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 21
10757: PUSH
10758: LD_INT 2
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: PPUSH
10780: CALL_OW 69
10784: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
10785: LD_ADDR_VAR 0 5
10789: PUSH
10790: EMPTY
10791: ST_TO_ADDR
// for i in tmpControlTowers do
10792: LD_ADDR_VAR 0 1
10796: PUSH
10797: LD_VAR 0 3
10801: PUSH
10802: FOR_IN
10803: IFFALSE 11266
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
10805: LD_EXP 1
10809: PPUSH
10810: CALL_OW 310
10814: PUSH
10815: LD_VAR 0 1
10819: EQUAL
10820: PUSH
10821: LD_EXP 1
10825: PPUSH
10826: CALL_OW 257
10830: PUSH
10831: LD_INT 3
10833: EQUAL
10834: AND
10835: IFFALSE 10965
// begin InGameOn ;
10837: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
10841: LD_VAR 0 4
10845: PUSH
10846: LD_INT 1
10848: ARRAY
10849: PPUSH
10850: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
10854: LD_EXP 1
10858: PPUSH
10859: LD_STRING D4a-JMM-1
10861: PPUSH
10862: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
10866: LD_VAR 0 4
10870: PUSH
10871: LD_INT 1
10873: ARRAY
10874: PPUSH
10875: LD_EXP 1
10879: PPUSH
10880: CALL_OW 53
// wait ( 0 0$1 ) ;
10884: LD_INT 35
10886: PPUSH
10887: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
10891: LD_VAR 0 4
10895: PUSH
10896: LD_INT 1
10898: ARRAY
10899: PPUSH
10900: LD_VAR 0 4
10904: PUSH
10905: LD_INT 1
10907: ARRAY
10908: PPUSH
10909: CALL_OW 250
10913: PUSH
10914: LD_INT 3
10916: PLUS
10917: PPUSH
10918: LD_VAR 0 4
10922: PUSH
10923: LD_INT 1
10925: ARRAY
10926: PPUSH
10927: CALL_OW 251
10931: PUSH
10932: LD_INT 2
10934: MINUS
10935: PPUSH
10936: CALL_OW 111
// wait ( 0 0$2 ) ;
10940: LD_INT 70
10942: PPUSH
10943: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
10947: LD_EXP 1
10951: PPUSH
10952: LD_STRING D4b-JMM-1
10954: PPUSH
10955: CALL_OW 88
// InGameOff ;
10959: CALL_OW 9
// end else
10963: GO 11264
// begin InGameOn ;
10965: CALL_OW 8
// for j in UnitsInside ( i ) do
10969: LD_ADDR_VAR 0 2
10973: PUSH
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL_OW 313
10983: PUSH
10984: FOR_IN
10985: IFFALSE 11020
// if GetClass ( j ) = 3 then
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 257
10996: PUSH
10997: LD_INT 3
10999: EQUAL
11000: IFFALSE 11018
// tmpMechanicInside = tmpMechanicInside ^ j ;
11002: LD_ADDR_VAR 0 5
11006: PUSH
11007: LD_VAR 0 5
11011: PUSH
11012: LD_VAR 0 2
11016: ADD
11017: ST_TO_ADDR
11018: GO 10984
11020: POP
11021: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
11022: LD_VAR 0 5
11026: PUSH
11027: LD_INT 1
11029: ARRAY
11030: PPUSH
11031: CALL_OW 258
11035: PUSH
11036: LD_INT 1
11038: EQUAL
11039: IFFALSE 11057
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
11041: LD_VAR 0 5
11045: PUSH
11046: LD_INT 1
11048: ARRAY
11049: PPUSH
11050: LD_STRING D4a-Mech1-1
11052: PPUSH
11053: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
11057: LD_VAR 0 5
11061: PUSH
11062: LD_INT 1
11064: ARRAY
11065: PPUSH
11066: CALL_OW 258
11070: PUSH
11071: LD_INT 2
11073: EQUAL
11074: IFFALSE 11092
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
11076: LD_VAR 0 5
11080: PUSH
11081: LD_INT 1
11083: ARRAY
11084: PPUSH
11085: LD_STRING D4a-FMech1-1
11087: PPUSH
11088: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
11092: LD_VAR 0 4
11096: PUSH
11097: LD_INT 1
11099: ARRAY
11100: PPUSH
11101: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
11105: LD_VAR 0 4
11109: PUSH
11110: LD_INT 1
11112: ARRAY
11113: PPUSH
11114: LD_VAR 0 5
11118: PUSH
11119: LD_INT 1
11121: ARRAY
11122: PPUSH
11123: CALL_OW 53
// wait ( 0 0$1 ) ;
11127: LD_INT 35
11129: PPUSH
11130: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
11134: LD_VAR 0 4
11138: PUSH
11139: LD_INT 1
11141: ARRAY
11142: PPUSH
11143: LD_VAR 0 4
11147: PUSH
11148: LD_INT 1
11150: ARRAY
11151: PPUSH
11152: CALL_OW 250
11156: PUSH
11157: LD_INT 3
11159: PLUS
11160: PPUSH
11161: LD_VAR 0 4
11165: PUSH
11166: LD_INT 1
11168: ARRAY
11169: PPUSH
11170: CALL_OW 251
11174: PUSH
11175: LD_INT 2
11177: MINUS
11178: PPUSH
11179: CALL_OW 111
// wait ( 0 0$2 ) ;
11183: LD_INT 70
11185: PPUSH
11186: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
11190: LD_VAR 0 5
11194: PUSH
11195: LD_INT 1
11197: ARRAY
11198: PPUSH
11199: CALL_OW 258
11203: PUSH
11204: LD_INT 1
11206: EQUAL
11207: IFFALSE 11225
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
11209: LD_VAR 0 5
11213: PUSH
11214: LD_INT 1
11216: ARRAY
11217: PPUSH
11218: LD_STRING D4b-Mech1-1
11220: PPUSH
11221: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
11225: LD_VAR 0 5
11229: PUSH
11230: LD_INT 1
11232: ARRAY
11233: PPUSH
11234: CALL_OW 258
11238: PUSH
11239: LD_INT 2
11241: EQUAL
11242: IFFALSE 11260
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
11244: LD_VAR 0 5
11248: PUSH
11249: LD_INT 1
11251: ARRAY
11252: PPUSH
11253: LD_STRING D4b-FMech1-1
11255: PPUSH
11256: CALL_OW 88
// InGameOff ;
11260: CALL_OW 9
// end ; end ;
11264: GO 10802
11266: POP
11267: POP
// end ;
11268: PPOPN 5
11270: END
// function CheckMehInside ; var i , j ; begin
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
11275: PPUSH
// result = false ;
11276: LD_ADDR_VAR 0 1
11280: PUSH
11281: LD_INT 0
11283: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
11284: LD_ADDR_VAR 0 2
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 30
11301: PUSH
11302: LD_INT 36
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 69
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11370
// begin for j in UnitsInside ( i ) do
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_VAR 0 2
11330: PPUSH
11331: CALL_OW 313
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11366
// begin if GetClass ( j ) = 3 then
11339: LD_VAR 0 3
11343: PPUSH
11344: CALL_OW 257
11348: PUSH
11349: LD_INT 3
11351: EQUAL
11352: IFFALSE 11364
// begin result = true ;
11354: LD_ADDR_VAR 0 1
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
// break ;
11362: GO 11366
// end ; end ;
11364: GO 11336
11366: POP
11367: POP
// end ;
11368: GO 11318
11370: POP
11371: POP
// end ;
11372: LD_VAR 0 1
11376: RET
// every 25 25$0 do
11377: GO 11379
11379: DISABLE
// begin PrepareKurt ;
11380: CALL 14121 0 0
// end ;
11384: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
11385: LD_EXP 15
11389: PPUSH
11390: LD_INT 9
11392: PPUSH
11393: CALL_OW 308
11397: PUSH
11398: LD_EXP 17
11402: PUSH
11403: LD_INT 1
11405: EQUAL
11406: AND
11407: IFFALSE 11481
11409: GO 11411
11411: DISABLE
// begin RemoveUnit ( Kurt ) ;
11412: LD_EXP 15
11416: PPUSH
11417: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
11421: LD_EXP 15
11425: PPUSH
11426: LD_STRING Kurt
11428: PPUSH
11429: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
11433: LD_INT 1
11435: PPUSH
11436: LD_INT 2
11438: PPUSH
11439: CALL_OW 81
11443: PUSH
11444: LD_INT 0
11446: EQUAL
11447: IFFALSE 11457
// KurtStatus = 1 ;
11449: LD_ADDR_EXP 16
11453: PUSH
11454: LD_INT 1
11456: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
11457: LD_INT 1
11459: PPUSH
11460: LD_INT 2
11462: PPUSH
11463: CALL_OW 81
11467: PUSH
11468: LD_INT 2
11470: EQUAL
11471: IFFALSE 11481
// KurtStatus = 2 ;
11473: LD_ADDR_EXP 16
11477: PUSH
11478: LD_INT 2
11480: ST_TO_ADDR
// end ;
11481: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
11482: LD_INT 1
11484: PPUSH
11485: LD_INT 2
11487: PPUSH
11488: CALL_OW 81
11492: PUSH
11493: LD_INT 2
11495: EQUAL
11496: PUSH
11497: LD_EXP 15
11501: PPUSH
11502: CALL_OW 302
11506: AND
11507: IFFALSE 11532
11509: GO 11511
11511: DISABLE
// begin DialogueOn ;
11512: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
11516: LD_EXP 15
11520: PPUSH
11521: LD_STRING D2a-Kurt-1
11523: PPUSH
11524: CALL_OW 88
// DialogueOff ;
11528: CALL_OW 7
// end ;
11532: END
// every 35 35$0 do
11533: GO 11535
11535: DISABLE
// begin PrepareJoan ;
11536: CALL 1303 0 0
// wait ( 1 1$0 ) ;
11540: LD_INT 2100
11542: PPUSH
11543: CALL_OW 67
// if IsOK ( Lisa ) then
11547: LD_EXP 5
11551: PPUSH
11552: CALL_OW 302
11556: IFFALSE 11686
// begin DialogueOn ;
11558: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
11562: LD_EXP 5
11566: PPUSH
11567: LD_STRING D7-Lisa-1
11569: PPUSH
11570: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
11574: LD_EXP 1
11578: PPUSH
11579: LD_STRING D7-JMM-1
11581: PPUSH
11582: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
11586: LD_EXP 5
11590: PPUSH
11591: LD_STRING D7-Lisa-2
11593: PPUSH
11594: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
11598: LD_EXP 1
11602: PPUSH
11603: LD_STRING D7-JMM-2
11605: PPUSH
11606: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
11610: LD_EXP 5
11614: PPUSH
11615: LD_STRING D7-Lisa-3
11617: PPUSH
11618: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
11622: LD_EXP 1
11626: PPUSH
11627: LD_STRING D7-JMM-3
11629: PPUSH
11630: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
11634: LD_EXP 5
11638: PPUSH
11639: LD_STRING D7-Lisa-4
11641: PPUSH
11642: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
11646: LD_EXP 1
11650: PPUSH
11651: LD_STRING D7-JMM-4
11653: PPUSH
11654: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
11658: LD_EXP 1
11662: PPUSH
11663: LD_STRING D7-JMM-4a
11665: PPUSH
11666: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
11670: LD_EXP 5
11674: PPUSH
11675: LD_STRING D7-Lisa-5
11677: PPUSH
11678: CALL_OW 88
// DialogueOff ;
11682: CALL_OW 7
// end ; end ;
11686: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
11687: LD_INT 22
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 33
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PPUSH
11711: CALL_OW 69
11715: PUSH
11716: LD_INT 2
11718: GREATEREQUAL
11719: IFFALSE 11739
11721: GO 11723
11723: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
11724: LD_STRING MRa
11726: PPUSH
11727: CALL_OW 337
// remoteVehiclesBuild = 1 ;
11731: LD_ADDR_EXP 24
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// end ;
11739: END
// every 13 13$0 do
11740: GO 11742
11742: DISABLE
// PrepareRandoms ( 1 ) ;
11743: LD_INT 1
11745: PPUSH
11746: CALL 2149 0 1
11750: END
// every 20 20$0 do
11751: GO 11753
11753: DISABLE
// PrepareRandoms ( 2 ) ;
11754: LD_INT 2
11756: PPUSH
11757: CALL 2149 0 1
11761: END
// every 28 28$0 do
11762: GO 11764
11764: DISABLE
// PrepareRandoms ( 3 ) ;
11765: LD_INT 3
11767: PPUSH
11768: CALL 2149 0 1
11772: END
// every 32 32$0 do
11773: GO 11775
11775: DISABLE
// PrepareRandoms ( 4 ) ;
11776: LD_INT 4
11778: PPUSH
11779: CALL 2149 0 1
11783: END
// every 38 38$0 do
11784: GO 11786
11786: DISABLE
// PrepareRandoms ( 5 ) ;
11787: LD_INT 5
11789: PPUSH
11790: CALL 2149 0 1
11794: END
// every 42 42$0 do
11795: GO 11797
11797: DISABLE
// PrepareRandoms ( 6 ) ;
11798: LD_INT 6
11800: PPUSH
11801: CALL 2149 0 1
11805: END
// every 45 45$0 do
11806: GO 11808
11808: DISABLE
// PrepareRandoms ( 7 ) ;
11809: LD_INT 7
11811: PPUSH
11812: CALL 2149 0 1
11816: END
// every 5 5$0 do
11817: GO 11819
11819: DISABLE
// begin DialogueOn ;
11820: CALL_OW 6
// SayRadio ( Doctor , D12a-Sci-1 ) ;
11824: LD_EXP 10
11828: PPUSH
11829: LD_STRING D12a-Sci-1
11831: PPUSH
11832: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
11836: LD_EXP 1
11840: PPUSH
11841: LD_STRING D12a-JMM-1
11843: PPUSH
11844: CALL_OW 88
// DialogueOff ;
11848: CALL_OW 7
// cratesStatus = 1 ;
11852: LD_ADDR_EXP 31
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// end ;
11860: END
// every 13 13$0 do
11861: GO 11863
11863: DISABLE
// begin DialogueOn ;
11864: CALL_OW 6
// SayRadio ( Doctor , D12b-Sci-1 ) ;
11868: LD_EXP 10
11872: PPUSH
11873: LD_STRING D12b-Sci-1
11875: PPUSH
11876: CALL_OW 94
// DialogueOff ;
11880: CALL_OW 7
// cratesStatus = 2 ;
11884: LD_ADDR_EXP 31
11888: PUSH
11889: LD_INT 2
11891: ST_TO_ADDR
// end ;
11892: END
// every 32 32$0 do
11893: GO 11895
11895: DISABLE
// begin DialogueOn ;
11896: CALL_OW 6
// SayRadio ( Doctor ,  D12c-Sci-1 ) ;
11900: LD_EXP 10
11904: PPUSH
11905: LD_STRING  D12c-Sci-1
11907: PPUSH
11908: CALL_OW 94
// DialogueOff ;
11912: CALL_OW 7
// wait ( 3 3$0 ) ;
11916: LD_INT 6300
11918: PPUSH
11919: CALL_OW 67
// DialogueOn ;
11923: CALL_OW 6
// SayRadio ( Doctor ,  D12d-Sci-1 ) ;
11927: LD_EXP 10
11931: PPUSH
11932: LD_STRING  D12d-Sci-1
11934: PPUSH
11935: CALL_OW 94
// DialogueOff ;
11939: CALL_OW 7
// cratesStatus = 1 ;
11943: LD_ADDR_EXP 31
11947: PUSH
11948: LD_INT 1
11950: ST_TO_ADDR
// end ;
11951: END
// every 42 42$0 do
11952: GO 11954
11954: DISABLE
// begin DialogueOn ;
11955: CALL_OW 6
// SayRadio ( Doctor , D12e-Sci-1 ) ;
11959: LD_EXP 10
11963: PPUSH
11964: LD_STRING D12e-Sci-1
11966: PPUSH
11967: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
11971: LD_EXP 1
11975: PPUSH
11976: LD_STRING D12e-JMM-1
11978: PPUSH
11979: CALL_OW 88
// DialogueOff ;
11983: CALL_OW 7
// cratesStatus = 2 ;
11987: LD_ADDR_EXP 31
11991: PUSH
11992: LD_INT 2
11994: ST_TO_ADDR
// end ;
11995: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
11996: LD_INT 22
11998: PUSH
11999: LD_INT 6
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 21
12008: PUSH
12009: LD_INT 2
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 34
12018: PUSH
12019: LD_INT 51
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 69
12035: PUSH
12036: LD_INT 0
12038: GREATER
12039: IFFALSE 12093
12041: GO 12043
12043: DISABLE
12044: LD_INT 0
12046: PPUSH
// begin enable ;
12047: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
12048: LD_ADDR_VAR 0 1
12052: PUSH
12053: LD_INT 22
12055: PUSH
12056: LD_INT 6
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: PUSH
12071: FOR_IN
12072: IFFALSE 12091
// ComAgressiveMove ( i , 138 , 168 ) ;
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_INT 138
12081: PPUSH
12082: LD_INT 168
12084: PPUSH
12085: CALL_OW 114
12089: GO 12071
12091: POP
12092: POP
// end ;
12093: PPOPN 1
12095: END
// every 0 0$1 trigger FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
12096: LD_INT 5
12098: PPUSH
12099: LD_INT 22
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 34
12111: PUSH
12112: LD_INT 51
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 70
12127: PUSH
12128: LD_INT 0
12130: GREATER
12131: IFFALSE 12233
12133: GO 12135
12135: DISABLE
12136: LD_INT 0
12138: PPUSH
// begin enable ;
12139: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] ] ) do
12140: LD_ADDR_VAR 0 1
12144: PUSH
12145: LD_INT 5
12147: PPUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 6
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: PPUSH
12161: CALL_OW 70
12165: PUSH
12166: FOR_IN
12167: IFFALSE 12231
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
12169: LD_INT 5
12171: PPUSH
12172: LD_INT 22
12174: PUSH
12175: LD_INT 6
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 34
12184: PUSH
12185: LD_INT 51
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 70
12200: PUSH
12201: LD_INT 0
12203: GREATER
12204: IFFALSE 12220
// sendedConvoys = sendedConvoys + 1 ;
12206: LD_ADDR_EXP 32
12210: PUSH
12211: LD_EXP 32
12215: PUSH
12216: LD_INT 1
12218: PLUS
12219: ST_TO_ADDR
// RemoveUnit ( i ) ;
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 64
// end ;
12229: GO 12166
12231: POP
12232: POP
// end ; end_of_file
12233: PPOPN 1
12235: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: EQUAL
12244: PUSH
12245: LD_VAR 0 2
12249: PUSH
12250: LD_INT 3
12252: EQUAL
12253: AND
12254: IFFALSE 12264
// contactWithRussian = 1 ;
12256: LD_ADDR_EXP 18
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// end ;
12264: PPOPN 2
12266: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
12267: LD_VAR 0 1
12271: PPUSH
12272: CALL_OW 266
12276: PUSH
12277: LD_INT 36
12279: EQUAL
12280: PUSH
12281: LD_VAR 0 1
12285: PPUSH
12286: CALL_OW 255
12290: PUSH
12291: LD_INT 1
12293: EQUAL
12294: AND
12295: PUSH
12296: LD_INT 22
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 21
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: PUSH
12336: LD_INT 0
12338: EQUAL
12339: AND
12340: PUSH
12341: LD_EXP 19
12345: PUSH
12346: LD_INT 0
12348: EQUAL
12349: AND
12350: IFFALSE 12419
// begin firstTower = 1 ;
12352: LD_ADDR_EXP 19
12356: PUSH
12357: LD_INT 1
12359: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
12360: LD_INT 22
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 21
12372: PUSH
12373: LD_INT 1
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 25
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: LIST
12394: PPUSH
12395: CALL_OW 69
12399: PUSH
12400: LD_EXP 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: DIFF
12408: PPUSH
12409: LD_STRING D3b-Mech1-1
12411: PPUSH
12412: LD_STRING D3b-Mech1-1
12414: PPUSH
12415: CALL 3582 0 3
// end ; if GetSide ( building ) = 3 then
12419: LD_VAR 0 1
12423: PPUSH
12424: CALL_OW 255
12428: PUSH
12429: LD_INT 3
12431: EQUAL
12432: IFFALSE 12506
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12434: LD_ADDR_EXP 26
12438: PUSH
12439: LD_EXP 26
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 3
12451: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12452: LD_ADDR_EXP 26
12456: PUSH
12457: LD_EXP 26
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 3
12469: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12470: LD_ADDR_EXP 26
12474: PUSH
12475: LD_EXP 26
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 3
12487: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
12488: LD_ADDR_EXP 26
12492: PUSH
12493: LD_EXP 26
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 3
12505: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
12506: LD_VAR 0 1
12510: PPUSH
12511: CALL_OW 255
12515: PUSH
12516: LD_INT 3
12518: EQUAL
12519: PUSH
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 266
12529: PUSH
12530: LD_INT 0
12532: EQUAL
12533: PUSH
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 266
12543: PUSH
12544: LD_INT 2
12546: EQUAL
12547: OR
12548: PUSH
12549: LD_VAR 0 1
12553: PPUSH
12554: CALL_OW 266
12558: PUSH
12559: LD_INT 4
12561: EQUAL
12562: OR
12563: PUSH
12564: EMPTY
12565: LIST
12566: AND
12567: IFFALSE 12578
// ComUpgrade ( building ) ;
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
12578: LD_VAR 0 1
12582: PPUSH
12583: CALL_OW 255
12587: PUSH
12588: LD_INT 3
12590: EQUAL
12591: PUSH
12592: LD_VAR 0 1
12596: PPUSH
12597: CALL_OW 266
12601: PUSH
12602: LD_INT 32
12604: EQUAL
12605: AND
12606: IFFALSE 12647
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
12608: LD_VAR 0 1
12612: PPUSH
12613: LD_INT 42
12615: PUSH
12616: LD_INT 43
12618: PUSH
12619: LD_INT 44
12621: PUSH
12622: LD_INT 46
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 1
12633: PPUSH
12634: LD_INT 4
12636: PPUSH
12637: CALL_OW 12
12641: ARRAY
12642: PPUSH
12643: CALL_OW 208
// end ; end ;
12647: PPOPN 1
12649: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
12650: LD_VAR 0 1
12654: PPUSH
12655: CALL_OW 255
12659: PUSH
12660: LD_INT 1
12662: EQUAL
12663: PUSH
12664: LD_VAR 0 1
12668: PPUSH
12669: CALL_OW 247
12673: PUSH
12674: LD_INT 1
12676: EQUAL
12677: AND
12678: IFFALSE 12694
// unitLost = unitLost + 1 ;
12680: LD_ADDR_EXP 25
12684: PUSH
12685: LD_EXP 25
12689: PUSH
12690: LD_INT 1
12692: PLUS
12693: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
12694: LD_VAR 0 1
12698: PPUSH
12699: CALL_OW 255
12703: PUSH
12704: LD_INT 3
12706: EQUAL
12707: PUSH
12708: LD_VAR 0 1
12712: PPUSH
12713: CALL_OW 247
12717: PUSH
12718: LD_INT 3
12720: EQUAL
12721: AND
12722: IFFALSE 13414
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
12724: LD_VAR 0 1
12728: PPUSH
12729: CALL_OW 266
12733: PUSH
12734: LD_INT 31
12736: EQUAL
12737: PUSH
12738: LD_VAR 0 1
12742: PPUSH
12743: CALL_OW 266
12747: PUSH
12748: LD_INT 32
12750: EQUAL
12751: OR
12752: PUSH
12753: LD_VAR 0 1
12757: PPUSH
12758: CALL_OW 266
12762: PUSH
12763: LD_INT 36
12765: EQUAL
12766: OR
12767: PUSH
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 266
12777: PUSH
12778: LD_INT 0
12780: EQUAL
12781: OR
12782: PUSH
12783: LD_VAR 0 1
12787: PPUSH
12788: CALL_OW 266
12792: PUSH
12793: LD_INT 24
12795: EQUAL
12796: OR
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 266
12807: PUSH
12808: LD_INT 17
12810: EQUAL
12811: OR
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL_OW 266
12822: PUSH
12823: LD_INT 25
12825: EQUAL
12826: OR
12827: PUSH
12828: LD_VAR 0 1
12832: PPUSH
12833: CALL_OW 266
12837: PUSH
12838: LD_INT 19
12840: EQUAL
12841: OR
12842: PUSH
12843: LD_VAR 0 1
12847: PPUSH
12848: CALL_OW 266
12852: PUSH
12853: LD_INT 20
12855: EQUAL
12856: OR
12857: PUSH
12858: LD_VAR 0 1
12862: PPUSH
12863: CALL_OW 266
12867: PUSH
12868: LD_INT 18
12870: EQUAL
12871: OR
12872: PUSH
12873: LD_VAR 0 1
12877: PPUSH
12878: CALL_OW 266
12882: PUSH
12883: LD_INT 21
12885: EQUAL
12886: OR
12887: PUSH
12888: LD_VAR 0 1
12892: PPUSH
12893: CALL_OW 266
12897: PUSH
12898: LD_INT 23
12900: EQUAL
12901: OR
12902: PUSH
12903: LD_VAR 0 1
12907: PPUSH
12908: CALL_OW 266
12912: PUSH
12913: LD_INT 16
12915: EQUAL
12916: OR
12917: PUSH
12918: LD_VAR 0 1
12922: PPUSH
12923: CALL_OW 266
12927: PUSH
12928: LD_INT 6
12930: EQUAL
12931: OR
12932: PUSH
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 266
12942: PUSH
12943: LD_INT 29
12945: EQUAL
12946: OR
12947: PUSH
12948: LD_VAR 0 1
12952: PPUSH
12953: CALL_OW 266
12957: PUSH
12958: LD_INT 26
12960: EQUAL
12961: OR
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 266
12972: PUSH
12973: LD_INT 30
12975: EQUAL
12976: OR
12977: PUSH
12978: LD_VAR 0 1
12982: PPUSH
12983: CALL_OW 266
12987: PUSH
12988: LD_INT 28
12990: EQUAL
12991: OR
12992: PUSH
12993: LD_VAR 0 1
12997: PPUSH
12998: CALL_OW 266
13002: PUSH
13003: LD_INT 27
13005: EQUAL
13006: OR
13007: PUSH
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL_OW 266
13017: PUSH
13018: LD_INT 33
13020: EQUAL
13021: OR
13022: PUSH
13023: LD_VAR 0 1
13027: PPUSH
13028: CALL_OW 266
13032: PUSH
13033: LD_INT 2
13035: EQUAL
13036: OR
13037: PUSH
13038: LD_VAR 0 1
13042: PPUSH
13043: CALL_OW 266
13047: PUSH
13048: LD_INT 4
13050: EQUAL
13051: OR
13052: IFFALSE 13138
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
13054: LD_ADDR_EXP 26
13058: PUSH
13059: LD_EXP 26
13063: PUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: CALL_OW 266
13073: ADD
13074: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13075: LD_ADDR_EXP 26
13079: PUSH
13080: LD_EXP 26
13084: PUSH
13085: LD_VAR 0 1
13089: PPUSH
13090: CALL_OW 250
13094: ADD
13095: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13096: LD_ADDR_EXP 26
13100: PUSH
13101: LD_EXP 26
13105: PUSH
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 251
13115: ADD
13116: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13117: LD_ADDR_EXP 26
13121: PUSH
13122: LD_EXP 26
13126: PUSH
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 254
13136: ADD
13137: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL_OW 266
13147: PUSH
13148: LD_INT 1
13150: EQUAL
13151: IFFALSE 13230
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
13153: LD_ADDR_EXP 26
13157: PUSH
13158: LD_EXP 26
13162: PUSH
13163: LD_INT 0
13165: ADD
13166: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13167: LD_ADDR_EXP 26
13171: PUSH
13172: LD_EXP 26
13176: PUSH
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 250
13186: ADD
13187: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13188: LD_ADDR_EXP 26
13192: PUSH
13193: LD_EXP 26
13197: PUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 251
13207: ADD
13208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13209: LD_ADDR_EXP 26
13213: PUSH
13214: LD_EXP 26
13218: PUSH
13219: LD_VAR 0 1
13223: PPUSH
13224: CALL_OW 254
13228: ADD
13229: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 266
13239: PUSH
13240: LD_INT 3
13242: EQUAL
13243: IFFALSE 13322
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
13245: LD_ADDR_EXP 26
13249: PUSH
13250: LD_EXP 26
13254: PUSH
13255: LD_INT 2
13257: ADD
13258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13259: LD_ADDR_EXP 26
13263: PUSH
13264: LD_EXP 26
13268: PUSH
13269: LD_VAR 0 1
13273: PPUSH
13274: CALL_OW 250
13278: ADD
13279: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13280: LD_ADDR_EXP 26
13284: PUSH
13285: LD_EXP 26
13289: PUSH
13290: LD_VAR 0 1
13294: PPUSH
13295: CALL_OW 251
13299: ADD
13300: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13301: LD_ADDR_EXP 26
13305: PUSH
13306: LD_EXP 26
13310: PUSH
13311: LD_VAR 0 1
13315: PPUSH
13316: CALL_OW 254
13320: ADD
13321: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
13322: LD_VAR 0 1
13326: PPUSH
13327: CALL_OW 266
13331: PUSH
13332: LD_INT 5
13334: EQUAL
13335: IFFALSE 13414
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
13337: LD_ADDR_EXP 26
13341: PUSH
13342: LD_EXP 26
13346: PUSH
13347: LD_INT 4
13349: ADD
13350: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13351: LD_ADDR_EXP 26
13355: PUSH
13356: LD_EXP 26
13360: PUSH
13361: LD_VAR 0 1
13365: PPUSH
13366: CALL_OW 250
13370: ADD
13371: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13372: LD_ADDR_EXP 26
13376: PUSH
13377: LD_EXP 26
13381: PUSH
13382: LD_VAR 0 1
13386: PPUSH
13387: CALL_OW 251
13391: ADD
13392: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
13393: LD_ADDR_EXP 26
13397: PUSH
13398: LD_EXP 26
13402: PUSH
13403: LD_VAR 0 1
13407: PPUSH
13408: CALL_OW 254
13412: ADD
13413: ST_TO_ADDR
// end ; end ; end ;
13414: PPOPN 1
13416: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
13421: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
13422: LD_VAR 0 1
13426: PPUSH
13427: CALL_OW 264
13431: PUSH
13432: LD_INT 51
13434: EQUAL
13435: PUSH
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 255
13445: PUSH
13446: LD_INT 3
13448: EQUAL
13449: AND
13450: IFFALSE 13512
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
13452: LD_ADDR_VAR 0 5
13456: PUSH
13457: LD_INT 2
13459: PPUSH
13460: CALL_OW 274
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 275
13472: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
13473: LD_INT 2
13475: PPUSH
13476: CALL_OW 274
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: LD_VAR 0 5
13488: PUSH
13489: LD_INT 100
13491: MINUS
13492: PPUSH
13493: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
13497: LD_VAR 0 1
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 100
13507: PPUSH
13508: CALL_OW 291
// end ; if building = rufabsupp then
13512: LD_VAR 0 2
13516: PUSH
13517: LD_INT 17
13519: EQUAL
13520: IFFALSE 13534
// SetSide ( vehicle , 6 ) ;
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_INT 6
13529: PPUSH
13530: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
13534: LD_VAR 0 2
13538: PPUSH
13539: CALL_OW 255
13543: PUSH
13544: LD_INT 3
13546: EQUAL
13547: PUSH
13548: LD_VAR 0 2
13552: PPUSH
13553: CALL_OW 302
13557: AND
13558: IFFALSE 13628
// begin uc_side = 3 ;
13560: LD_ADDR_OWVAR 20
13564: PUSH
13565: LD_INT 3
13567: ST_TO_ADDR
// uc_nation = 3 ;
13568: LD_ADDR_OWVAR 21
13572: PUSH
13573: LD_INT 3
13575: ST_TO_ADDR
// hc_gallery :=  ;
13576: LD_ADDR_OWVAR 33
13580: PUSH
13581: LD_STRING 
13583: ST_TO_ADDR
// hc_name :=  ;
13584: LD_ADDR_OWVAR 26
13588: PUSH
13589: LD_STRING 
13591: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
13592: LD_INT 0
13594: PPUSH
13595: LD_EXP 29
13599: PPUSH
13600: LD_EXP 30
13604: PPUSH
13605: CALL_OW 12
13609: PPUSH
13610: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
13614: CALL_OW 44
13618: PPUSH
13619: LD_VAR 0 2
13623: PPUSH
13624: CALL_OW 52
// end ; end ;
13628: PPOPN 5
13630: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
13631: LD_VAR 0 1
13635: PPUSH
13636: CALL_OW 255
13640: PUSH
13641: LD_INT 3
13643: EQUAL
13644: IFFALSE 13660
// tamedApemans = tamedApemans + 1 ;
13646: LD_ADDR_EXP 27
13650: PUSH
13651: LD_EXP 27
13655: PUSH
13656: LD_INT 1
13658: PLUS
13659: ST_TO_ADDR
// end ; end_of_file
13660: PPOPN 2
13662: END
// every 0 0$30 trigger cratesStatus = 1 do
13663: LD_EXP 31
13667: PUSH
13668: LD_INT 1
13670: EQUAL
13671: IFFALSE 13735
13673: GO 13675
13675: DISABLE
// begin enable ;
13676: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
13677: LD_INT 350
13679: PUSH
13680: LD_INT 1050
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 1
13689: PPUSH
13690: LD_INT 2
13692: PPUSH
13693: CALL_OW 12
13697: ARRAY
13698: PPUSH
13699: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
13703: LD_INT 4
13705: PUSH
13706: LD_INT 5
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_INT 2
13718: PPUSH
13719: CALL_OW 12
13723: ARRAY
13724: PPUSH
13725: LD_INT 7
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 55
// end ;
13735: END
// every 1 1$0 trigger cratesStatus = 2 do
13736: LD_EXP 31
13740: PUSH
13741: LD_INT 2
13743: EQUAL
13744: IFFALSE 13808
13746: GO 13748
13748: DISABLE
// begin enable ;
13749: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
13750: LD_INT 3150
13752: PUSH
13753: LD_INT 4550
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 1
13762: PPUSH
13763: LD_INT 2
13765: PPUSH
13766: CALL_OW 12
13770: ARRAY
13771: PPUSH
13772: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
13776: LD_INT 2
13778: PUSH
13779: LD_INT 5
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 1
13788: PPUSH
13789: LD_INT 2
13791: PPUSH
13792: CALL_OW 12
13796: ARRAY
13797: PPUSH
13798: LD_INT 8
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 55
// end ; end_of_file
13808: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
13809: LD_EXP 20
13813: PUSH
13814: LD_INT 1
13816: EQUAL
13817: IFFALSE 14118
13819: GO 13821
13821: DISABLE
13822: LD_INT 0
13824: PPUSH
13825: PPUSH
13826: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13827: LD_ADDR_VAR 0 2
13831: PUSH
13832: LD_INT 22
13834: PUSH
13835: LD_INT 1
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 21
13844: PUSH
13845: LD_INT 3
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 0
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 30
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: ST_TO_ADDR
// for i in tmp do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: LD_VAR 0 2
13899: PUSH
13900: FOR_IN
13901: IFFALSE 13934
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_VAR 0 3
13912: PUSH
13913: LD_VAR 0 1
13917: PPUSH
13918: CALL_OW 274
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 275
13930: PLUS
13931: ST_TO_ADDR
13932: GO 13900
13934: POP
13935: POP
// strings = [ ] ;
13936: LD_ADDR_EXP 23
13940: PUSH
13941: EMPTY
13942: ST_TO_ADDR
// if tmp = 0 then
13943: LD_VAR 0 2
13947: PUSH
13948: LD_INT 0
13950: EQUAL
13951: IFFALSE 13976
// strings = strings ^ [ #Am06-1 , needCrates ] ;
13953: LD_ADDR_EXP 23
13957: PUSH
13958: LD_EXP 23
13962: PUSH
13963: LD_STRING #Am06-1
13965: PUSH
13966: LD_EXP 21
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: ADD
13975: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
13976: LD_VAR 0 2
13980: PUSH
13981: LD_INT 0
13983: GREATER
13984: PUSH
13985: LD_EXP 21
13989: PUSH
13990: LD_VAR 0 3
13994: GREATER
13995: AND
13996: IFFALSE 14027
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
13998: LD_ADDR_EXP 23
14002: PUSH
14003: LD_EXP 23
14007: PUSH
14008: LD_STRING #Am06-1
14010: PUSH
14011: LD_EXP 21
14015: PUSH
14016: LD_VAR 0 3
14020: MINUS
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: ADD
14026: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
14027: LD_VAR 0 2
14031: PUSH
14032: LD_INT 0
14034: GREATER
14035: PUSH
14036: LD_EXP 21
14040: PUSH
14041: LD_VAR 0 3
14045: LESSEQUAL
14046: AND
14047: IFFALSE 14070
// strings = strings ^ [ #Am06-1 , 0 ] ;
14049: LD_ADDR_EXP 23
14053: PUSH
14054: LD_EXP 23
14058: PUSH
14059: LD_STRING #Am06-1
14061: PUSH
14062: LD_INT 0
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: ADD
14069: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
14070: LD_ADDR_EXP 22
14074: PUSH
14075: LD_EXP 22
14079: PUSH
14080: LD_INT 35
14082: MINUS
14083: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
14084: LD_ADDR_EXP 23
14088: PUSH
14089: LD_EXP 23
14093: PUSH
14094: LD_STRING #Am06-2
14096: PUSH
14097: LD_EXP 22
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: ADD
14106: ST_TO_ADDR
// display_strings = strings ;
14107: LD_ADDR_OWVAR 47
14111: PUSH
14112: LD_EXP 23
14116: ST_TO_ADDR
// enable ;
14117: ENABLE
// end ; end_of_file
14118: PPOPN 3
14120: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
14121: LD_INT 0
14123: PPUSH
14124: PPUSH
14125: PPUSH
14126: PPUSH
14127: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
14128: LD_ADDR_VAR 0 2
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 21
14145: PUSH
14146: LD_INT 1
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 1
14169: PPUSH
14170: LD_VAR 0 2
14174: PPUSH
14175: CALL_OW 12
14179: ST_TO_ADDR
// uc_side = 2 ;
14180: LD_ADDR_OWVAR 20
14184: PUSH
14185: LD_INT 2
14187: ST_TO_ADDR
// uc_nation = 2 ;
14188: LD_ADDR_OWVAR 21
14192: PUSH
14193: LD_INT 2
14195: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
14196: LD_ADDR_EXP 15
14200: PUSH
14201: LD_STRING Kurt
14203: PPUSH
14204: LD_INT 0
14206: PPUSH
14207: CALL 3525 0 2
14211: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
14212: LD_EXP 15
14216: PPUSH
14217: LD_VAR 0 2
14221: PUSH
14222: LD_VAR 0 3
14226: ARRAY
14227: PPUSH
14228: CALL_OW 250
14232: PPUSH
14233: LD_VAR 0 2
14237: PUSH
14238: LD_VAR 0 3
14242: ARRAY
14243: PPUSH
14244: CALL_OW 251
14248: PPUSH
14249: LD_INT 2
14251: PPUSH
14252: LD_INT 1
14254: PPUSH
14255: CALL_OW 50
// InGameOn ;
14259: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
14263: LD_EXP 15
14267: PPUSH
14268: CALL_OW 87
// wait ( 0 0$2 ) ;
14272: LD_INT 70
14274: PPUSH
14275: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
14279: LD_VAR 0 2
14283: PUSH
14284: LD_VAR 0 3
14288: ARRAY
14289: PPUSH
14290: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
14294: LD_VAR 0 2
14298: PUSH
14299: LD_VAR 0 3
14303: ARRAY
14304: PPUSH
14305: CALL_OW 122
// wait ( 0 0$1 ) ;
14309: LD_INT 35
14311: PPUSH
14312: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
14316: LD_EXP 15
14320: PPUSH
14321: LD_VAR 0 2
14325: PUSH
14326: LD_VAR 0 3
14330: ARRAY
14331: PPUSH
14332: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
14336: LD_VAR 0 2
14340: PUSH
14341: LD_VAR 0 3
14345: ARRAY
14346: PPUSH
14347: LD_EXP 15
14351: PPUSH
14352: CALL_OW 119
// DialogueOn ;
14356: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
14360: LD_EXP 15
14364: PPUSH
14365: LD_STRING D2-Kurt-1
14367: PPUSH
14368: CALL_OW 88
// if tmp [ rnd ] = JMM then
14372: LD_VAR 0 2
14376: PUSH
14377: LD_VAR 0 3
14381: ARRAY
14382: PUSH
14383: LD_EXP 1
14387: EQUAL
14388: IFFALSE 14480
// begin Say ( JMM , D2-JMM-1 ) ;
14390: LD_EXP 1
14394: PPUSH
14395: LD_STRING D2-JMM-1
14397: PPUSH
14398: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
14402: LD_EXP 15
14406: PPUSH
14407: LD_STRING D2-Kurt-2
14409: PPUSH
14410: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
14414: LD_EXP 1
14418: PPUSH
14419: LD_STRING D2-JMM-2
14421: PPUSH
14422: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
14426: LD_EXP 15
14430: PPUSH
14431: LD_STRING D2-Kurt-3
14433: PPUSH
14434: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
14438: LD_EXP 1
14442: PPUSH
14443: LD_STRING D2-JMM-3
14445: PPUSH
14446: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
14450: LD_EXP 15
14454: PPUSH
14455: LD_STRING D2-Kurt-4
14457: PPUSH
14458: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
14462: LD_EXP 1
14466: PPUSH
14467: LD_STRING D2-JMM-4
14469: PPUSH
14470: CALL_OW 88
// DialogueOff ;
14474: CALL_OW 7
// end else
14478: GO 14910
// begin if GetSex ( tmp [ rnd ] ) = 1 then
14480: LD_VAR 0 2
14484: PUSH
14485: LD_VAR 0 3
14489: ARRAY
14490: PPUSH
14491: CALL_OW 258
14495: PUSH
14496: LD_INT 1
14498: EQUAL
14499: IFFALSE 14519
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
14501: LD_VAR 0 2
14505: PUSH
14506: LD_VAR 0 3
14510: ARRAY
14511: PPUSH
14512: LD_STRING D2-Sol1-1
14514: PPUSH
14515: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14519: LD_VAR 0 2
14523: PUSH
14524: LD_VAR 0 3
14528: ARRAY
14529: PPUSH
14530: CALL_OW 258
14534: PUSH
14535: LD_INT 2
14537: EQUAL
14538: IFFALSE 14558
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
14540: LD_VAR 0 2
14544: PUSH
14545: LD_VAR 0 3
14549: ARRAY
14550: PPUSH
14551: LD_STRING D2-FSol1-1
14553: PPUSH
14554: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
14558: LD_EXP 15
14562: PPUSH
14563: LD_STRING D2-Kurt-2
14565: PPUSH
14566: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14570: LD_VAR 0 2
14574: PUSH
14575: LD_VAR 0 3
14579: ARRAY
14580: PPUSH
14581: CALL_OW 258
14585: PUSH
14586: LD_INT 1
14588: EQUAL
14589: IFFALSE 14609
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
14591: LD_VAR 0 2
14595: PUSH
14596: LD_VAR 0 3
14600: ARRAY
14601: PPUSH
14602: LD_STRING D2-Sol1-2
14604: PPUSH
14605: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14609: LD_VAR 0 2
14613: PUSH
14614: LD_VAR 0 3
14618: ARRAY
14619: PPUSH
14620: CALL_OW 258
14624: PUSH
14625: LD_INT 2
14627: EQUAL
14628: IFFALSE 14648
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
14630: LD_VAR 0 2
14634: PUSH
14635: LD_VAR 0 3
14639: ARRAY
14640: PPUSH
14641: LD_STRING D2-FSol1-2
14643: PPUSH
14644: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
14648: LD_EXP 15
14652: PPUSH
14653: LD_STRING D2-Kurt-3
14655: PPUSH
14656: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14660: LD_VAR 0 2
14664: PUSH
14665: LD_VAR 0 3
14669: ARRAY
14670: PPUSH
14671: CALL_OW 258
14675: PUSH
14676: LD_INT 1
14678: EQUAL
14679: IFFALSE 14699
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
14681: LD_VAR 0 2
14685: PUSH
14686: LD_VAR 0 3
14690: ARRAY
14691: PPUSH
14692: LD_STRING D2-Sol1-3
14694: PPUSH
14695: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14699: LD_VAR 0 2
14703: PUSH
14704: LD_VAR 0 3
14708: ARRAY
14709: PPUSH
14710: CALL_OW 258
14714: PUSH
14715: LD_INT 2
14717: EQUAL
14718: IFFALSE 14738
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
14720: LD_VAR 0 2
14724: PUSH
14725: LD_VAR 0 3
14729: ARRAY
14730: PPUSH
14731: LD_STRING D2-FSol1-3
14733: PPUSH
14734: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
14738: LD_EXP 15
14742: PPUSH
14743: LD_STRING D2-Kurt-4
14745: PPUSH
14746: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14750: LD_VAR 0 2
14754: PUSH
14755: LD_VAR 0 3
14759: ARRAY
14760: PPUSH
14761: CALL_OW 258
14765: PUSH
14766: LD_INT 1
14768: EQUAL
14769: IFFALSE 14789
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
14771: LD_VAR 0 2
14775: PUSH
14776: LD_VAR 0 3
14780: ARRAY
14781: PPUSH
14782: LD_STRING D2-Sol1-4
14784: PPUSH
14785: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14789: LD_VAR 0 2
14793: PUSH
14794: LD_VAR 0 3
14798: ARRAY
14799: PPUSH
14800: CALL_OW 258
14804: PUSH
14805: LD_INT 2
14807: EQUAL
14808: IFFALSE 14828
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
14810: LD_VAR 0 2
14814: PUSH
14815: LD_VAR 0 3
14819: ARRAY
14820: PPUSH
14821: LD_STRING D2-FSol1-4
14823: PPUSH
14824: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
14828: LD_VAR 0 2
14832: PUSH
14833: LD_VAR 0 3
14837: ARRAY
14838: PPUSH
14839: CALL_OW 258
14843: PUSH
14844: LD_INT 1
14846: EQUAL
14847: IFFALSE 14867
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
14849: LD_VAR 0 2
14853: PUSH
14854: LD_VAR 0 3
14858: ARRAY
14859: PPUSH
14860: LD_STRING D2-Sol1-5
14862: PPUSH
14863: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
14867: LD_VAR 0 2
14871: PUSH
14872: LD_VAR 0 3
14876: ARRAY
14877: PPUSH
14878: CALL_OW 258
14882: PUSH
14883: LD_INT 2
14885: EQUAL
14886: IFFALSE 14906
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
14888: LD_VAR 0 2
14892: PUSH
14893: LD_VAR 0 3
14897: ARRAY
14898: PPUSH
14899: LD_STRING D2-FSol1-5
14901: PPUSH
14902: CALL_OW 88
// DialogueOff ;
14906: CALL_OW 7
// end ; dec = ShowQuery1 ;
14910: LD_ADDR_VAR 0 4
14914: PUSH
14915: CALL 4070 0 0
14919: ST_TO_ADDR
// if dec = 1 then
14920: LD_VAR 0 4
14924: PUSH
14925: LD_INT 1
14927: EQUAL
14928: IFFALSE 14970
// begin DialogueOn ;
14930: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
14934: LD_EXP 15
14938: PPUSH
14939: LD_STRING D2a-Kurt-1
14941: PPUSH
14942: CALL_OW 88
// DialogueOff ;
14946: CALL_OW 7
// InGameOff ;
14950: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
14954: LD_INT 1
14956: PPUSH
14957: LD_INT 2
14959: PPUSH
14960: LD_INT 2
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 80
// end ; if dec = 2 then
14970: LD_VAR 0 4
14974: PUSH
14975: LD_INT 2
14977: EQUAL
14978: IFFALSE 15574
// begin DialogueOn ;
14980: CALL_OW 6
// if tmp [ rnd ] = JMM then
14984: LD_VAR 0 2
14988: PUSH
14989: LD_VAR 0 3
14993: ARRAY
14994: PUSH
14995: LD_EXP 1
14999: EQUAL
15000: IFFALSE 15056
// begin Say ( JMM , D2b-JMM-1 ) ;
15002: LD_EXP 1
15006: PPUSH
15007: LD_STRING D2b-JMM-1
15009: PPUSH
15010: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
15014: LD_EXP 15
15018: PPUSH
15019: LD_STRING D2b-Kurt-1
15021: PPUSH
15022: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
15026: LD_EXP 1
15030: PPUSH
15031: LD_STRING D2b-JMM-2
15033: PPUSH
15034: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
15038: LD_EXP 15
15042: PPUSH
15043: LD_STRING D2b-Kurt-2
15045: PPUSH
15046: CALL_OW 88
// DialogueOff ;
15050: CALL_OW 7
// end else
15054: GO 15318
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15056: LD_VAR 0 2
15060: PUSH
15061: LD_VAR 0 3
15065: ARRAY
15066: PPUSH
15067: CALL_OW 258
15071: PUSH
15072: LD_INT 1
15074: EQUAL
15075: IFFALSE 15095
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
15077: LD_VAR 0 2
15081: PUSH
15082: LD_VAR 0 3
15086: ARRAY
15087: PPUSH
15088: LD_STRING D2b-Sol1-1
15090: PPUSH
15091: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15095: LD_VAR 0 2
15099: PUSH
15100: LD_VAR 0 3
15104: ARRAY
15105: PPUSH
15106: CALL_OW 258
15110: PUSH
15111: LD_INT 2
15113: EQUAL
15114: IFFALSE 15134
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
15116: LD_VAR 0 2
15120: PUSH
15121: LD_VAR 0 3
15125: ARRAY
15126: PPUSH
15127: LD_STRING D2b-FSol1-1
15129: PPUSH
15130: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
15134: LD_EXP 15
15138: PPUSH
15139: LD_STRING D2b-Kurt-1
15141: PPUSH
15142: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15146: LD_VAR 0 2
15150: PUSH
15151: LD_VAR 0 3
15155: ARRAY
15156: PPUSH
15157: CALL_OW 258
15161: PUSH
15162: LD_INT 1
15164: EQUAL
15165: IFFALSE 15185
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
15167: LD_VAR 0 2
15171: PUSH
15172: LD_VAR 0 3
15176: ARRAY
15177: PPUSH
15178: LD_STRING D2b-Sol1-2
15180: PPUSH
15181: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15185: LD_VAR 0 2
15189: PUSH
15190: LD_VAR 0 3
15194: ARRAY
15195: PPUSH
15196: CALL_OW 258
15200: PUSH
15201: LD_INT 2
15203: EQUAL
15204: IFFALSE 15224
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
15206: LD_VAR 0 2
15210: PUSH
15211: LD_VAR 0 3
15215: ARRAY
15216: PPUSH
15217: LD_STRING D2b-FSol1-2
15219: PPUSH
15220: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
15224: LD_EXP 15
15228: PPUSH
15229: LD_STRING D2b-Kurt-2
15231: PPUSH
15232: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15236: LD_VAR 0 2
15240: PUSH
15241: LD_VAR 0 3
15245: ARRAY
15246: PPUSH
15247: CALL_OW 258
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: IFFALSE 15275
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
15257: LD_VAR 0 2
15261: PUSH
15262: LD_VAR 0 3
15266: ARRAY
15267: PPUSH
15268: LD_STRING D2c-Sol1-2
15270: PPUSH
15271: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15275: LD_VAR 0 2
15279: PUSH
15280: LD_VAR 0 3
15284: ARRAY
15285: PPUSH
15286: CALL_OW 258
15290: PUSH
15291: LD_INT 2
15293: EQUAL
15294: IFFALSE 15314
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
15296: LD_VAR 0 2
15300: PUSH
15301: LD_VAR 0 3
15305: ARRAY
15306: PPUSH
15307: LD_STRING D2c-FSol1-2
15309: PPUSH
15310: CALL_OW 88
// DialogueOff ;
15314: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
15318: LD_ADDR_VAR 0 5
15322: PUSH
15323: CALL 4144 0 0
15327: ST_TO_ADDR
// if dec2 = 1 then
15328: LD_VAR 0 5
15332: PUSH
15333: LD_INT 1
15335: EQUAL
15336: IFFALSE 15374
// begin Say ( Kurt , D2a-Kurt-1 ) ;
15338: LD_EXP 15
15342: PPUSH
15343: LD_STRING D2a-Kurt-1
15345: PPUSH
15346: CALL_OW 88
// DialogueOff ;
15350: CALL_OW 7
// InGameOff ;
15354: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
15358: LD_INT 1
15360: PPUSH
15361: LD_INT 2
15363: PPUSH
15364: LD_INT 2
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 80
// end ; if dec2 = 2 then
15374: LD_VAR 0 5
15378: PUSH
15379: LD_INT 2
15381: EQUAL
15382: IFFALSE 15574
// begin if tmp [ rnd ] = JMM then
15384: LD_VAR 0 2
15388: PUSH
15389: LD_VAR 0 3
15393: ARRAY
15394: PUSH
15395: LD_EXP 1
15399: EQUAL
15400: IFFALSE 15456
// begin Say ( JMM , D2c-JMM-1 ) ;
15402: LD_EXP 1
15406: PPUSH
15407: LD_STRING D2c-JMM-1
15409: PPUSH
15410: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15414: LD_EXP 15
15418: PPUSH
15419: LD_STRING D2c-Kurt-1
15421: PPUSH
15422: CALL_OW 88
// DialogueOff ;
15426: CALL_OW 7
// InGameOff ;
15430: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15434: LD_EXP 15
15438: PPUSH
15439: LD_INT 9
15441: PPUSH
15442: CALL_OW 113
// readyToEscape = 1 ;
15446: LD_ADDR_EXP 17
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// end else
15454: GO 15574
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15456: LD_VAR 0 2
15460: PUSH
15461: LD_VAR 0 3
15465: ARRAY
15466: PPUSH
15467: CALL_OW 258
15471: PUSH
15472: LD_INT 1
15474: EQUAL
15475: IFFALSE 15495
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
15477: LD_VAR 0 2
15481: PUSH
15482: LD_VAR 0 3
15486: ARRAY
15487: PPUSH
15488: LD_STRING D2c-Sol1-1
15490: PPUSH
15491: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15495: LD_VAR 0 2
15499: PUSH
15500: LD_VAR 0 3
15504: ARRAY
15505: PPUSH
15506: CALL_OW 258
15510: PUSH
15511: LD_INT 2
15513: EQUAL
15514: IFFALSE 15534
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
15516: LD_VAR 0 2
15520: PUSH
15521: LD_VAR 0 3
15525: ARRAY
15526: PPUSH
15527: LD_STRING D2c-FSol1-1
15529: PPUSH
15530: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15534: LD_EXP 15
15538: PPUSH
15539: LD_STRING D2c-Kurt-1
15541: PPUSH
15542: CALL_OW 88
// DialogueOff ;
15546: CALL_OW 7
// InGameOff ;
15550: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15554: LD_EXP 15
15558: PPUSH
15559: LD_INT 9
15561: PPUSH
15562: CALL_OW 113
// readyToEscape = 1 ;
15566: LD_ADDR_EXP 17
15570: PUSH
15571: LD_INT 1
15573: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
15574: LD_VAR 0 4
15578: PUSH
15579: LD_INT 3
15581: EQUAL
15582: IFFALSE 15778
// begin DialogueOn ;
15584: CALL_OW 6
// if tmp [ rnd ] = JMM then
15588: LD_VAR 0 2
15592: PUSH
15593: LD_VAR 0 3
15597: ARRAY
15598: PUSH
15599: LD_EXP 1
15603: EQUAL
15604: IFFALSE 15660
// begin Say ( JMM , D2c-JMM-1 ) ;
15606: LD_EXP 1
15610: PPUSH
15611: LD_STRING D2c-JMM-1
15613: PPUSH
15614: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15618: LD_EXP 15
15622: PPUSH
15623: LD_STRING D2c-Kurt-1
15625: PPUSH
15626: CALL_OW 88
// DialogueOff ;
15630: CALL_OW 7
// InGameOff ;
15634: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15638: LD_EXP 15
15642: PPUSH
15643: LD_INT 9
15645: PPUSH
15646: CALL_OW 113
// readyToEscape = 1 ;
15650: LD_ADDR_EXP 17
15654: PUSH
15655: LD_INT 1
15657: ST_TO_ADDR
// end else
15658: GO 15778
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15660: LD_VAR 0 2
15664: PUSH
15665: LD_VAR 0 3
15669: ARRAY
15670: PPUSH
15671: CALL_OW 258
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: IFFALSE 15699
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
15681: LD_VAR 0 2
15685: PUSH
15686: LD_VAR 0 3
15690: ARRAY
15691: PPUSH
15692: LD_STRING D2c-Sol1-1
15694: PPUSH
15695: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15699: LD_VAR 0 2
15703: PUSH
15704: LD_VAR 0 3
15708: ARRAY
15709: PPUSH
15710: CALL_OW 258
15714: PUSH
15715: LD_INT 2
15717: EQUAL
15718: IFFALSE 15738
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
15720: LD_VAR 0 2
15724: PUSH
15725: LD_VAR 0 3
15729: ARRAY
15730: PPUSH
15731: LD_STRING D2c-FSol1-1
15733: PPUSH
15734: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
15738: LD_EXP 15
15742: PPUSH
15743: LD_STRING D2c-Kurt-1
15745: PPUSH
15746: CALL_OW 88
// DialogueOff ;
15750: CALL_OW 7
// InGameOff ;
15754: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
15758: LD_EXP 15
15762: PPUSH
15763: LD_INT 9
15765: PPUSH
15766: CALL_OW 113
// readyToEscape = 1 ;
15770: LD_ADDR_EXP 17
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// end ; end ; end ; end_of_file
15778: LD_VAR 0 1
15782: RET
// every 0 0$1 do
15783: GO 15785
15785: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
15786: LD_INT 3
15788: PPUSH
15789: LD_INT 32
15791: PPUSH
15792: LD_INT 3
15794: PPUSH
15795: CALL 4261 0 3
15799: END
// every 0 0$1 do
15800: GO 15802
15802: DISABLE
// begin enable ;
15803: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
15804: LD_INT 3
15806: PPUSH
15807: LD_INT 2
15809: PPUSH
15810: CALL 4346 0 2
// if disableHealAI = 0 then
15814: LD_EXP 28
15818: PUSH
15819: LD_INT 0
15821: EQUAL
15822: IFFALSE 15840
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
15824: LD_INT 3
15826: PPUSH
15827: LD_INT 10
15829: PPUSH
15830: LD_INT 11
15832: PPUSH
15833: LD_INT 32
15835: PPUSH
15836: CALL 4605 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
15840: LD_INT 3
15842: PPUSH
15843: LD_INT 51
15845: PPUSH
15846: LD_INT 7
15848: PPUSH
15849: CALL 5328 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
15853: LD_INT 3
15855: PPUSH
15856: LD_INT 14
15858: PPUSH
15859: LD_INT 121
15861: PPUSH
15862: LD_INT 100
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL 5508 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
15872: LD_INT 3
15874: PPUSH
15875: LD_EXP 26
15879: PPUSH
15880: CALL 6299 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
15884: LD_INT 3
15886: PPUSH
15887: LD_INT 8
15889: PUSH
15890: LD_INT 67
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 1
15899: PPUSH
15900: LD_INT 2
15902: PPUSH
15903: CALL_OW 12
15907: ARRAY
15908: PPUSH
15909: LD_INT 11
15911: PPUSH
15912: CALL 6505 0 3
// AttackNearBuildings ( 3 , 1 ) ;
15916: LD_INT 3
15918: PPUSH
15919: LD_INT 1
15921: PPUSH
15922: CALL 6862 0 2
// end ;
15926: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
15927: LD_INT 22
15929: PUSH
15930: LD_INT 3
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: LD_INT 21
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: LD_INT 34
15952: PUSH
15953: LD_INT 51
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: LIST
15968: PPUSH
15969: CALL_OW 69
15973: PUSH
15974: LD_INT 0
15976: EQUAL
15977: IFFALSE 16111
15979: GO 15981
15981: DISABLE
// begin enable ;
15982: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
15983: LD_INT 3
15985: PPUSH
15986: LD_INT 21
15988: PPUSH
15989: LD_INT 4
15991: PUSH
15992: LD_INT 5
15994: PUSH
15995: LD_INT 5
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: LIST
16002: PUSH
16003: LD_OWVAR 67
16007: ARRAY
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: LD_INT 43
16014: PUSH
16015: LD_INT 43
16017: PUSH
16018: LD_INT 43
16020: PUSH
16021: LD_INT 44
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 44
16032: PUSH
16033: LD_INT 44
16035: PUSH
16036: LD_INT 44
16038: PUSH
16039: LD_INT 43
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 44
16050: PUSH
16051: LD_INT 44
16053: PUSH
16054: LD_INT 44
16056: PUSH
16057: LD_INT 44
16059: PUSH
16060: LD_INT 46
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: PUSH
16075: LD_OWVAR 67
16079: ARRAY
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 22
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 24
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: PUSH
16101: LD_OWVAR 67
16105: ARRAY
16106: PPUSH
16107: CALL 4871 0 8
// end ;
16111: END
// every 5 5$0 do
16112: GO 16114
16114: DISABLE
// begin enable ;
16115: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
16116: LD_INT 17
16118: PPUSH
16119: LD_INT 22
16121: PPUSH
16122: LD_INT 1
16124: PPUSH
16125: LD_INT 1
16127: PPUSH
16128: LD_INT 42
16130: PUSH
16131: LD_INT 43
16133: PUSH
16134: LD_INT 44
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 3
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
16158: LD_INT 17
16160: PPUSH
16161: LD_INT 22
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 1
16169: PPUSH
16170: LD_INT 42
16172: PUSH
16173: LD_INT 43
16175: PUSH
16176: LD_INT 44
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_INT 3
16189: PPUSH
16190: CALL_OW 12
16194: ARRAY
16195: PPUSH
16196: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
16200: LD_INT 17
16202: PPUSH
16203: LD_INT 22
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: LD_INT 42
16214: PUSH
16215: LD_INT 43
16217: PUSH
16218: LD_INT 44
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 1
16228: PPUSH
16229: LD_INT 3
16231: PPUSH
16232: CALL_OW 12
16236: ARRAY
16237: PPUSH
16238: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
16242: LD_INT 17
16244: PPUSH
16245: LD_INT 22
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: LD_INT 51
16256: PPUSH
16257: CALL_OW 185
// end ;
16261: END
// every 2 2$0 do var i , j ;
16262: GO 16264
16264: DISABLE
16265: LD_INT 0
16267: PPUSH
16268: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
16269: LD_INT 14700
16271: PUSH
16272: LD_INT 33600
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 1
16281: PPUSH
16282: LD_INT 2
16284: PPUSH
16285: CALL_OW 12
16289: ARRAY
16290: PPUSH
16291: CALL_OW 67
// disableHealAI = 1 ;
16295: LD_ADDR_EXP 28
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16303: LD_ADDR_VAR 0 1
16307: PUSH
16308: LD_INT 22
16310: PUSH
16311: LD_INT 3
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 25
16320: PUSH
16321: LD_INT 4
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PPUSH
16332: CALL_OW 69
16336: PUSH
16337: FOR_IN
16338: IFFALSE 16351
// ComExitBuilding ( i ) ;
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 122
16349: GO 16337
16351: POP
16352: POP
// wait ( 0 0$1 ) ;
16353: LD_INT 35
16355: PPUSH
16356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16360: LD_INT 35
16362: PPUSH
16363: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_INT 3
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 25
16384: PUSH
16385: LD_INT 4
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PPUSH
16396: CALL_OW 69
16400: PUSH
16401: FOR_IN
16402: IFFALSE 16479
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_INT 19
16411: PPUSH
16412: LD_INT 22
16414: PUSH
16415: LD_INT 0
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 25
16424: PUSH
16425: LD_INT 12
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PPUSH
16436: CALL_OW 70
16440: PUSH
16441: FOR_IN
16442: IFFALSE 16475
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16444: LD_VAR 0 1
16448: PPUSH
16449: LD_VAR 0 2
16453: PPUSH
16454: CALL_OW 250
16458: PPUSH
16459: LD_VAR 0 2
16463: PPUSH
16464: CALL_OW 251
16468: PPUSH
16469: CALL_OW 191
// end ;
16473: GO 16441
16475: POP
16476: POP
// end ;
16477: GO 16401
16479: POP
16480: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] ;
16481: LD_INT 22
16483: PUSH
16484: LD_INT 3
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 25
16493: PUSH
16494: LD_INT 4
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: PUSH
16510: LD_INT 0
16512: EQUAL
16513: PUSH
16514: LD_EXP 27
16518: PUSH
16519: LD_INT 6
16521: PUSH
16522: LD_INT 7
16524: PUSH
16525: LD_INT 8
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PUSH
16533: LD_OWVAR 67
16537: ARRAY
16538: GREATEREQUAL
16539: OR
16540: IFFALSE 16360
// disableHealAI = 0 ;
16542: LD_ADDR_EXP 28
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 25
16567: PUSH
16568: LD_INT 12
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PPUSH
16579: CALL_OW 69
16583: PUSH
16584: FOR_IN
16585: IFFALSE 16601
// SetClass ( i , 16 ) ;
16587: LD_VAR 0 1
16591: PPUSH
16592: LD_INT 16
16594: PPUSH
16595: CALL_OW 336
16599: GO 16584
16601: POP
16602: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
16603: LD_ADDR_VAR 0 1
16607: PUSH
16608: LD_INT 22
16610: PUSH
16611: LD_INT 3
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 25
16620: PUSH
16621: LD_INT 4
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PPUSH
16632: CALL_OW 69
16636: PUSH
16637: FOR_IN
16638: IFFALSE 16657
// ComMoveXY ( i , 113 , 94 ) ;
16640: LD_VAR 0 1
16644: PPUSH
16645: LD_INT 113
16647: PPUSH
16648: LD_INT 94
16650: PPUSH
16651: CALL_OW 111
16655: GO 16637
16657: POP
16658: POP
// end ;
16659: PPOPN 2
16661: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
16662: LD_INT 21
16664: PPUSH
16665: CALL_OW 255
16669: PUSH
16670: LD_INT 3
16672: EQUAL
16673: PUSH
16674: LD_INT 21
16676: PPUSH
16677: CALL_OW 302
16681: AND
16682: PUSH
16683: LD_INT 22
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 34
16695: PUSH
16696: LD_INT 51
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PPUSH
16707: CALL_OW 69
16711: PUSH
16712: LD_INT 0
16714: EQUAL
16715: AND
16716: IFFALSE 16748
16718: GO 16720
16720: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
16721: LD_INT 21
16723: PPUSH
16724: LD_INT 23
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: LD_INT 51
16735: PPUSH
16736: CALL_OW 185
// wait ( 5 5$0 ) ;
16740: LD_INT 10500
16742: PPUSH
16743: CALL_OW 67
// enable ;
16747: ENABLE
// end ; end_of_file
16748: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
16749: LD_EXP 22
16753: PUSH
16754: LD_INT 0
16756: LESSEQUAL
16757: IFFALSE 16897
16759: GO 16761
16761: DISABLE
16762: LD_INT 0
16764: PPUSH
16765: PPUSH
16766: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16767: LD_ADDR_VAR 0 2
16771: PUSH
16772: LD_INT 22
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 21
16784: PUSH
16785: LD_INT 3
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: LD_INT 30
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 30
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: PPUSH
16825: CALL_OW 69
16829: ST_TO_ADDR
// for i in tmp do
16830: LD_ADDR_VAR 0 1
16834: PUSH
16835: LD_VAR 0 2
16839: PUSH
16840: FOR_IN
16841: IFFALSE 16874
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16843: LD_ADDR_VAR 0 3
16847: PUSH
16848: LD_VAR 0 3
16852: PUSH
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 274
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 275
16870: PLUS
16871: ST_TO_ADDR
16872: GO 16840
16874: POP
16875: POP
// if yourCrates >= needCrates then
16876: LD_VAR 0 3
16880: PUSH
16881: LD_EXP 21
16885: GREATEREQUAL
16886: IFFALSE 16897
// begin FinishMission ( yourCrates ) ;
16888: LD_VAR 0 3
16892: PPUSH
16893: CALL 16900 0 1
// end ; end ;
16897: PPOPN 3
16899: END
// export function FinishMission ( crates ) ; begin
16900: LD_INT 0
16902: PPUSH
// if crates + 100 > crates then
16903: LD_VAR 0 1
16907: PUSH
16908: LD_INT 100
16910: PLUS
16911: PUSH
16912: LD_VAR 0 1
16916: GREATER
16917: IFFALSE 16941
// begin AddMedal ( cans , 1 ) ;
16919: LD_STRING cans
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
16929: LD_INT 1
16931: PPUSH
16932: LD_STRING 06_crates_1
16934: PPUSH
16935: CALL_OW 39
// end else
16939: GO 16962
// begin AddMedal ( cans , - 1 ) ;
16941: LD_STRING cans
16943: PPUSH
16944: LD_INT 1
16946: NEG
16947: PPUSH
16948: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
16952: LD_INT 0
16954: PPUSH
16955: LD_STRING 06_crates_1
16957: PPUSH
16958: CALL_OW 39
// end ; if unitLost > 2 then
16962: LD_EXP 25
16966: PUSH
16967: LD_INT 2
16969: GREATER
16970: IFFALSE 16984
// begin AddMedal ( people , 1 ) ;
16972: LD_STRING people
16974: PPUSH
16975: LD_INT 1
16977: PPUSH
16978: CALL_OW 101
// end else
16982: GO 16995
// begin AddMedal ( people , - 1 ) ;
16984: LD_STRING people
16986: PPUSH
16987: LD_INT 1
16989: NEG
16990: PPUSH
16991: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
16995: LD_EXP 24
16999: PPUSH
17000: LD_STRING 06_remoteVehs_1
17002: PPUSH
17003: CALL_OW 39
// if remoteVehiclesBuild = 1 then
17007: LD_EXP 24
17011: PUSH
17012: LD_INT 1
17014: EQUAL
17015: IFFALSE 17029
// begin AddMedal ( remote , 1 ) ;
17017: LD_STRING remote
17019: PPUSH
17020: LD_INT 1
17022: PPUSH
17023: CALL_OW 101
// end else
17027: GO 17069
// begin if GetTech ( 18 , 1 ) = state_enabled then
17029: LD_INT 18
17031: PPUSH
17032: LD_INT 1
17034: PPUSH
17035: CALL_OW 321
17039: PUSH
17040: LD_INT 1
17042: EQUAL
17043: IFFALSE 17058
// begin AddMedal ( remote , - 1 ) ;
17045: LD_STRING remote
17047: PPUSH
17048: LD_INT 1
17050: NEG
17051: PPUSH
17052: CALL_OW 101
// end else
17056: GO 17069
// begin AddMedal ( remote , - 2 ) ;
17058: LD_STRING remote
17060: PPUSH
17061: LD_INT 2
17063: NEG
17064: PPUSH
17065: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
17069: LD_EXP 16
17073: PPUSH
17074: LD_STRING 06_KurtStatus_1
17076: PPUSH
17077: CALL_OW 39
// GiveMedals ( Main ) ;
17081: LD_STRING Main
17083: PPUSH
17084: CALL_OW 102
// RewardPeople ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
17088: LD_INT 22
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 21
17100: PUSH
17101: LD_INT 1
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PPUSH
17112: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
17116: LD_EXP 1
17120: PPUSH
17121: LD_STRING JMM
17123: PPUSH
17124: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
17128: LD_EXP 5
17132: PPUSH
17133: LD_STRING Lisa
17135: PPUSH
17136: CALL 4199 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
17140: LD_EXP 6
17144: PPUSH
17145: LD_STRING Brown
17147: PPUSH
17148: CALL 4199 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
17152: LD_EXP 3
17156: PPUSH
17157: LD_STRING Frank
17159: PPUSH
17160: CALL 4199 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
17164: LD_EXP 7
17168: PPUSH
17169: LD_STRING Denis
17171: PPUSH
17172: CALL 4199 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
17176: LD_EXP 11
17180: PPUSH
17181: LD_STRING Joan
17183: PPUSH
17184: CALL 4199 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
17188: LD_EXP 12
17192: PPUSH
17193: LD_STRING 06_JoanStatus_1
17195: PPUSH
17196: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Brown , Frank , Denis , Joan ] , 06_other_survivors ) ;
17200: LD_INT 50
17202: PUSH
17203: EMPTY
17204: LIST
17205: PUSH
17206: LD_INT 22
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: PPUSH
17231: CALL_OW 69
17235: PUSH
17236: LD_EXP 1
17240: PUSH
17241: LD_EXP 5
17245: PUSH
17246: LD_EXP 6
17250: PUSH
17251: LD_EXP 3
17255: PUSH
17256: LD_EXP 7
17260: PUSH
17261: LD_EXP 11
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: DIFF
17274: PPUSH
17275: LD_STRING 06_other_survivors
17277: PPUSH
17278: CALL_OW 38
// YouWin ;
17282: CALL_OW 103
// end ; end_of_file
17286: LD_VAR 0 2
17290: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
17291: LD_EXP 32
17295: PUSH
17296: LD_INT 4
17298: PUSH
17299: LD_INT 3
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: PUSH
17310: LD_OWVAR 67
17314: ARRAY
17315: EQUAL
17316: IFFALSE 17431
17318: GO 17320
17320: DISABLE
// begin enable ;
17321: ENABLE
// sendedConvoys = 0 ;
17322: LD_ADDR_EXP 32
17326: PUSH
17327: LD_INT 0
17329: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
17330: LD_INT 6
17332: PPUSH
17333: LD_INT 3
17335: PPUSH
17336: LD_INT 3
17338: PPUSH
17339: LD_INT 4
17341: PPUSH
17342: CALL_OW 12
17346: PUSH
17347: LD_INT 4
17349: PPUSH
17350: LD_INT 5
17352: PPUSH
17353: CALL_OW 12
17357: PUSH
17358: LD_INT 6
17360: PPUSH
17361: LD_INT 7
17363: PPUSH
17364: CALL_OW 12
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: PUSH
17374: LD_OWVAR 67
17378: ARRAY
17379: PPUSH
17380: LD_INT 0
17382: PPUSH
17383: LD_INT 0
17385: PPUSH
17386: LD_INT 0
17388: PPUSH
17389: LD_INT 3
17391: PPUSH
17392: LD_EXP 29
17396: PPUSH
17397: LD_EXP 30
17401: PPUSH
17402: CALL_OW 12
17406: PPUSH
17407: LD_INT 18
17409: PPUSH
17410: LD_INT 17
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_INT 2
17421: PPUSH
17422: CALL_OW 12
17426: PPUSH
17427: CALL 7093 0 12
// end ; end_of_file
17431: END
// export function PrepareNature ; var i , un ; begin
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// for i = 1 to Difficulty + 2 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_INT 1
17445: DEC
17446: ST_TO_ADDR
17447: LD_OWVAR 67
17451: PUSH
17452: LD_INT 2
17454: PLUS
17455: PUSH
17456: FOR_TO
17457: IFFALSE 17592
// begin hc_sex = sex_male ;
17459: LD_ADDR_OWVAR 27
17463: PUSH
17464: LD_INT 1
17466: ST_TO_ADDR
// uc_side = 0 ;
17467: LD_ADDR_OWVAR 20
17471: PUSH
17472: LD_INT 0
17474: ST_TO_ADDR
// uc_nation = nation_nature ;
17475: LD_ADDR_OWVAR 21
17479: PUSH
17480: LD_INT 0
17482: ST_TO_ADDR
// hc_class = class_tiger ;
17483: LD_ADDR_OWVAR 28
17487: PUSH
17488: LD_INT 14
17490: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17491: LD_ADDR_OWVAR 31
17495: PUSH
17496: LD_EXP 30
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: LD_INT 0
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
17516: LD_ADDR_OWVAR 35
17520: PUSH
17521: LD_INT 30
17523: PPUSH
17524: LD_INT 40
17526: PPUSH
17527: CALL_OW 12
17531: PUSH
17532: LD_INT 40
17534: PPUSH
17535: LD_INT 50
17537: PPUSH
17538: CALL_OW 12
17542: PUSH
17543: LD_INT 50
17545: PPUSH
17546: LD_INT 60
17548: PPUSH
17549: CALL_OW 12
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: LD_OWVAR 67
17563: ARRAY
17564: ST_TO_ADDR
// un = CreateHuman ;
17565: LD_ADDR_VAR 0 3
17569: PUSH
17570: CALL_OW 44
17574: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17575: LD_VAR 0 3
17579: PPUSH
17580: LD_INT 20
17582: PPUSH
17583: LD_INT 0
17585: PPUSH
17586: CALL_OW 49
// end ;
17590: GO 17456
17592: POP
17593: POP
// for i = 1 to rand ( 3 , 4 ) do
17594: LD_ADDR_VAR 0 2
17598: PUSH
17599: DOUBLE
17600: LD_INT 1
17602: DEC
17603: ST_TO_ADDR
17604: LD_INT 3
17606: PPUSH
17607: LD_INT 4
17609: PPUSH
17610: CALL_OW 12
17614: PUSH
17615: FOR_TO
17616: IFFALSE 17710
// begin hc_sex = sex_male ;
17618: LD_ADDR_OWVAR 27
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// uc_side = 0 ;
17626: LD_ADDR_OWVAR 20
17630: PUSH
17631: LD_INT 0
17633: ST_TO_ADDR
// uc_nation = nation_nature ;
17634: LD_ADDR_OWVAR 21
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// hc_class = 18 ;
17642: LD_ADDR_OWVAR 28
17646: PUSH
17647: LD_INT 18
17649: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
17650: LD_ADDR_OWVAR 31
17654: PUSH
17655: LD_EXP 30
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: ST_TO_ADDR
// hc_agressivity = 0 ;
17675: LD_ADDR_OWVAR 35
17679: PUSH
17680: LD_INT 0
17682: ST_TO_ADDR
// un = CreateHuman ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: CALL_OW 44
17692: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 20
17700: PPUSH
17701: LD_INT 0
17703: PPUSH
17704: CALL_OW 49
// end ;
17708: GO 17615
17710: POP
17711: POP
// end ;
17712: LD_VAR 0 1
17716: RET
