// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 22014 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// for i = 1 to 72 do
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 72
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6002
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5946: LD_VAR 0 5
5950: PPUSH
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 321
5960: PUSH
5961: LD_INT 1
5963: EQUAL
5964: PUSH
5965: LD_VAR 0 5
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: CALL_OW 482
5979: PUSH
5980: LD_INT 1
5982: EQUAL
5983: AND
5984: IFFALSE 6000
// AddComResearch ( lab , i ) ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_VAR 0 5
5995: PPUSH
5996: CALL_OW 184
6000: GO 5943
6002: POP
6003: POP
// end ;
6004: LD_VAR 0 4
6008: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_VAR 0 3
6049: LESSEQUAL
6050: IFFALSE 6158
// begin for i = 1 to vehCount do
6052: LD_ADDR_VAR 0 9
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6156
// begin weapon = weaponTab [ i ] ;
6070: LD_ADDR_VAR 0 10
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_VAR 0 9
6084: ARRAY
6085: ST_TO_ADDR
// if weapon = 46 then
6086: LD_VAR 0 10
6090: PUSH
6091: LD_INT 46
6093: EQUAL
6094: IFFALSE 6125
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_INT 24
6103: PPUSH
6104: LD_VAR 0 5
6108: PPUSH
6109: LD_VAR 0 6
6113: PPUSH
6114: LD_VAR 0 10
6118: PPUSH
6119: CALL_OW 185
// end else
6123: GO 6154
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 7
6134: PPUSH
6135: LD_VAR 0 5
6139: PPUSH
6140: LD_VAR 0 6
6144: PPUSH
6145: LD_VAR 0 10
6149: PPUSH
6150: CALL_OW 185
// end ; end ;
6154: GO 6067
6156: POP
6157: POP
// end ; end ;
6158: LD_VAR 0 8
6162: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6169: LD_ADDR_VAR 0 8
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 21
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: LD_INT 650
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: ST_TO_ADDR
// if damageVehicles > 0 then
6223: LD_VAR 0 8
6227: PUSH
6228: LD_INT 0
6230: GREATER
6231: IFFALSE 6252
// ComMoveXY ( damageVehicles , repX , repY ) ;
6233: LD_VAR 0 8
6237: PPUSH
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_VAR 0 4
6247: PPUSH
6248: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6252: LD_VAR 0 8
6256: PPUSH
6257: LD_INT 95
6259: PUSH
6260: LD_VAR 0 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 58
6274: PUSH
6275: EMPTY
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 72
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: IFFALSE 6361
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6296: LD_ADDR_VAR 0 6
6300: PUSH
6301: LD_VAR 0 8
6305: PPUSH
6306: LD_INT 95
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 58
6323: PUSH
6324: EMPTY
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 72
6339: PUSH
6340: FOR_IN
6341: IFFALSE 6359
// ComExitVehicle ( UnitsInside ( i ) ) ;
6343: LD_VAR 0 6
6347: PPUSH
6348: CALL_OW 313
6352: PPUSH
6353: CALL_OW 121
6357: GO 6340
6359: POP
6360: POP
// end ;
6361: LD_VAR 0 5
6365: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
6373: PPUSH
6374: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_INT 22
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 24
6404: PUSH
6405: LD_INT 660
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 58
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 34
6426: PUSH
6427: LD_INT 43
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 34
6436: PUSH
6437: LD_INT 44
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 34
6446: PUSH
6447: LD_INT 46
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 24
6500: PUSH
6501: LD_INT 1000
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: LD_INT 58
6513: PUSH
6514: EMPTY
6515: LIST
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 34
6522: PUSH
6523: LD_INT 43
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 34
6532: PUSH
6533: LD_INT 44
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 46
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 69
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: LD_INT 6
6577: PUSH
6578: LD_INT 6
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_OWVAR 67
6590: ARRAY
6591: EQUAL
6592: IFFALSE 6848
// if seeEnemy = 0 then
6594: LD_VAR 0 11
6598: PUSH
6599: LD_INT 0
6601: EQUAL
6602: IFFALSE 6848
// repeat wait ( 0 0$1 ) ;
6604: LD_INT 35
6606: PPUSH
6607: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6611: LD_ADDR_VAR 0 8
6615: PUSH
6616: LD_INT 22
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 21
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 24
6640: PUSH
6641: LD_INT 660
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 3
6650: PUSH
6651: LD_INT 58
6653: PUSH
6654: EMPTY
6655: LIST
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 43
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 34
6672: PUSH
6673: LD_INT 44
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 34
6682: PUSH
6683: LD_INT 46
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 69
6711: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6712: LD_INT 22
6714: PUSH
6715: LD_VAR 0 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 95
6726: PUSH
6727: LD_VAR 0 2
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: NOT
6745: PUSH
6746: LD_VAR 0 11
6750: PUSH
6751: LD_INT 0
6753: EQUAL
6754: AND
6755: IFFALSE 6810
// for i := 1 to wayX do
6757: LD_ADDR_VAR 0 6
6761: PUSH
6762: DOUBLE
6763: LD_INT 1
6765: DEC
6766: ST_TO_ADDR
6767: LD_VAR 0 3
6771: PUSH
6772: FOR_TO
6773: IFFALSE 6808
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6775: LD_VAR 0 8
6779: PPUSH
6780: LD_VAR 0 3
6784: PUSH
6785: LD_VAR 0 6
6789: ARRAY
6790: PPUSH
6791: LD_VAR 0 4
6795: PUSH
6796: LD_VAR 0 6
6800: ARRAY
6801: PPUSH
6802: CALL_OW 114
6806: GO 6772
6808: POP
6809: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
6810: LD_INT 22
6812: PUSH
6813: LD_VAR 0 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 95
6824: PUSH
6825: LD_VAR 0 2
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PPUSH
6838: CALL_OW 69
6842: PUSH
6843: LD_INT 0
6845: GREATER
6846: IFFALSE 6604
// seeEnemy = 1 ;
6848: LD_ADDR_VAR 0 11
6852: PUSH
6853: LD_INT 1
6855: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6856: LD_INT 35
6858: PPUSH
6859: CALL_OW 67
// for j in vehiclesOK do
6863: LD_ADDR_VAR 0 7
6867: PUSH
6868: LD_VAR 0 8
6872: PUSH
6873: FOR_IN
6874: IFFALSE 7075
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6876: LD_ADDR_VAR 0 9
6880: PUSH
6881: LD_INT 81
6883: PUSH
6884: LD_VAR 0 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 101
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PPUSH
6912: LD_VAR 0 7
6916: PPUSH
6917: CALL_OW 74
6921: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6922: LD_ADDR_VAR 0 10
6926: PUSH
6927: LD_INT 81
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 101
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 2
6951: PUSH
6952: LD_INT 59
6954: PUSH
6955: EMPTY
6956: LIST
6957: PUSH
6958: LD_INT 21
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 2
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: PPUSH
6997: LD_VAR 0 7
7001: PPUSH
7002: CALL_OW 74
7006: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7007: LD_VAR 0 7
7011: PPUSH
7012: LD_VAR 0 9
7016: PPUSH
7017: CALL_OW 296
7021: PUSH
7022: LD_INT 8
7024: PLUS
7025: PUSH
7026: LD_VAR 0 7
7030: PPUSH
7031: LD_VAR 0 10
7035: PPUSH
7036: CALL_OW 296
7040: LESS
7041: IFFALSE 7059
// ComAttackUnit ( j , target1 ) else
7043: LD_VAR 0 7
7047: PPUSH
7048: LD_VAR 0 9
7052: PPUSH
7053: CALL_OW 115
7057: GO 7073
// ComAttackUnit ( j , target2 ) ;
7059: LD_VAR 0 7
7063: PPUSH
7064: LD_VAR 0 10
7068: PPUSH
7069: CALL_OW 115
// end ;
7073: GO 6873
7075: POP
7076: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7077: LD_INT 22
7079: PUSH
7080: LD_VAR 0 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 21
7091: PUSH
7092: LD_INT 2
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 24
7101: PUSH
7102: LD_INT 1000
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 3
7111: PUSH
7112: LD_INT 58
7114: PUSH
7115: EMPTY
7116: LIST
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: LD_INT 34
7123: PUSH
7124: LD_INT 43
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 34
7133: PUSH
7134: LD_INT 44
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 34
7143: PUSH
7144: LD_INT 46
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: LIST
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: PUSH
7173: LD_INT 0
7175: EQUAL
7176: IFFALSE 6856
// seeEnemy = 0 ;
7178: LD_ADDR_VAR 0 11
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// end ;
7186: LD_VAR 0 5
7190: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
7198: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7199: LD_ADDR_VAR 0 8
7203: PUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: CALL_OW 313
7213: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7214: LD_ADDR_VAR 0 9
7218: PUSH
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 22
7226: PUSH
7227: LD_VAR 0 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: LD_INT 750
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_INT 54
7261: PUSH
7262: EMPTY
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 70
7279: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7280: LD_ADDR_VAR 0 6
7284: PUSH
7285: LD_VAR 0 3
7289: PPUSH
7290: LD_INT 22
7292: PUSH
7293: LD_VAR 0 1
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 21
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 3
7314: PUSH
7315: LD_INT 24
7317: PUSH
7318: LD_INT 1000
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: PPUSH
7337: CALL_OW 70
7341: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7342: LD_VAR 0 6
7346: NOT
7347: PUSH
7348: LD_INT 22
7350: PUSH
7351: LD_VAR 0 1
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 25
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 24
7372: PUSH
7373: LD_INT 250
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: NOT
7390: AND
7391: IFFALSE 7395
// exit ;
7393: GO 7577
// if buildings_list > 0 and engineerOkInside then
7395: LD_VAR 0 6
7399: PUSH
7400: LD_INT 0
7402: GREATER
7403: PUSH
7404: LD_VAR 0 8
7408: AND
7409: IFFALSE 7420
// ComExitBuilding ( engineerOkInside ) ;
7411: LD_VAR 0 8
7415: PPUSH
7416: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7420: LD_VAR 0 6
7424: PUSH
7425: LD_INT 0
7427: GREATER
7428: PUSH
7429: LD_VAR 0 9
7433: PUSH
7434: LD_INT 0
7436: GREATER
7437: AND
7438: IFFALSE 7458
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7440: LD_VAR 0 9
7444: PPUSH
7445: LD_VAR 0 6
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7458: LD_VAR 0 6
7462: PUSH
7463: LD_INT 0
7465: EQUAL
7466: PUSH
7467: LD_VAR 0 4
7471: PUSH
7472: LD_INT 0
7474: EQUAL
7475: AND
7476: PUSH
7477: LD_VAR 0 9
7481: PUSH
7482: LD_INT 0
7484: GREATER
7485: AND
7486: IFFALSE 7502
// ComEnterUnit ( engineerOkOutside , building ) ;
7488: LD_VAR 0 9
7492: PPUSH
7493: LD_VAR 0 2
7497: PPUSH
7498: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7502: LD_VAR 0 9
7506: PUSH
7507: LD_INT 0
7509: GREATER
7510: PUSH
7511: LD_VAR 0 6
7515: PUSH
7516: LD_INT 0
7518: EQUAL
7519: AND
7520: PUSH
7521: LD_VAR 0 4
7525: PUSH
7526: LD_INT 0
7528: GREATER
7529: AND
7530: IFFALSE 7577
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7532: LD_VAR 0 9
7536: PPUSH
7537: LD_VAR 0 4
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PPUSH
7546: LD_VAR 0 4
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PPUSH
7555: LD_VAR 0 4
7559: PUSH
7560: LD_INT 3
7562: ARRAY
7563: PPUSH
7564: LD_VAR 0 4
7568: PUSH
7569: LD_INT 4
7571: ARRAY
7572: PPUSH
7573: CALL_OW 145
// end ;
7577: LD_VAR 0 5
7581: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7593: LD_ADDR_VAR 0 6
7597: PUSH
7598: LD_INT 22
7600: PUSH
7601: LD_VAR 0 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 25
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 23
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 24
7632: PUSH
7633: LD_INT 251
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 69
7650: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7651: LD_ADDR_VAR 0 7
7655: PUSH
7656: LD_VAR 0 3
7660: PPUSH
7661: LD_INT 22
7663: PUSH
7664: LD_VAR 0 1
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 23
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 25
7685: PUSH
7686: LD_INT 4
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 50
7695: PUSH
7696: EMPTY
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PPUSH
7705: CALL_OW 70
7709: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7710: LD_ADDR_VAR 0 10
7714: PUSH
7715: LD_VAR 0 3
7719: PPUSH
7720: LD_INT 22
7722: PUSH
7723: LD_VAR 0 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 21
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 3
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 3
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 3
7761: PUSH
7762: LD_INT 24
7764: PUSH
7765: LD_INT 750
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: PPUSH
7782: CALL_OW 70
7786: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7787: LD_ADDR_VAR 0 11
7791: PUSH
7792: LD_VAR 0 2
7796: PPUSH
7797: LD_INT 22
7799: PUSH
7800: LD_VAR 0 1
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 21
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 3
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 3
7838: PUSH
7839: LD_INT 24
7841: PUSH
7842: LD_INT 1000
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 70
7863: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
7864: LD_VAR 0 10
7868: NOT
7869: PUSH
7870: LD_VAR 0 11
7874: NOT
7875: AND
7876: PUSH
7877: LD_VAR 0 6
7881: NOT
7882: AND
7883: IFFALSE 7887
// exit ;
7885: GO 8121
// if damageUnits > 0 and sci_list > 0 then
7887: LD_VAR 0 10
7891: PUSH
7892: LD_INT 0
7894: GREATER
7895: PUSH
7896: LD_VAR 0 6
7900: PUSH
7901: LD_INT 0
7903: GREATER
7904: AND
7905: IFFALSE 7921
// ComMoveToArea ( damageUnits , healArea ) ;
7907: LD_VAR 0 10
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
7921: LD_VAR 0 11
7925: PUSH
7926: LD_INT 0
7928: GREATER
7929: PUSH
7930: LD_VAR 0 6
7934: PUSH
7935: LD_INT 0
7937: GREATER
7938: AND
7939: IFFALSE 7950
// ComExitBuilding ( sci_list ) ;
7941: LD_VAR 0 6
7945: PPUSH
7946: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
7950: LD_VAR 0 11
7954: PUSH
7955: LD_INT 0
7957: GREATER
7958: PUSH
7959: LD_VAR 0 7
7963: PUSH
7964: LD_INT 0
7966: GREATER
7967: AND
7968: IFFALSE 7988
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
7970: LD_VAR 0 7
7974: PPUSH
7975: LD_VAR 0 11
7979: PUSH
7980: LD_INT 1
7982: ARRAY
7983: PPUSH
7984: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
7988: LD_VAR 0 10
7992: PUSH
7993: LD_INT 0
7995: EQUAL
7996: PUSH
7997: LD_VAR 0 11
8001: PUSH
8002: LD_INT 0
8004: EQUAL
8005: AND
8006: PUSH
8007: LD_VAR 0 7
8011: PUSH
8012: LD_INT 0
8014: GREATER
8015: AND
8016: IFFALSE 8121
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8018: LD_ADDR_VAR 0 12
8022: PUSH
8023: LD_INT 22
8025: PUSH
8026: LD_VAR 0 1
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 21
8037: PUSH
8038: LD_INT 3
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 30
8047: PUSH
8048: LD_INT 8
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: PPUSH
8060: CALL_OW 69
8064: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8065: LD_ADDR_VAR 0 13
8069: PUSH
8070: LD_INT 1
8072: PPUSH
8073: LD_VAR 0 12
8077: PPUSH
8078: CALL_OW 12
8082: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8083: LD_VAR 0 7
8087: PPUSH
8088: LD_INT 3
8090: PUSH
8091: LD_INT 60
8093: PUSH
8094: EMPTY
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 72
8105: PPUSH
8106: LD_VAR 0 12
8110: PUSH
8111: LD_VAR 0 13
8115: ARRAY
8116: PPUSH
8117: CALL_OW 120
// end ; end ;
8121: LD_VAR 0 5
8125: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8126: LD_INT 0
8128: PPUSH
8129: PPUSH
8130: PPUSH
8131: PPUSH
// tmpTab = [ ] ;
8132: LD_ADDR_VAR 0 6
8136: PUSH
8137: EMPTY
8138: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8139: LD_INT 22
8141: PUSH
8142: LD_VAR 0 1
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 30
8153: PUSH
8154: LD_INT 32
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PPUSH
8165: CALL_OW 69
8169: PUSH
8170: LD_INT 0
8172: GREATER
8173: IFFALSE 8256
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 22
8182: PUSH
8183: LD_VAR 0 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 30
8194: PUSH
8195: LD_INT 32
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 69
8210: PUSH
8211: FOR_IN
8212: IFFALSE 8254
// begin for j in UnitsInside ( i ) do
8214: LD_ADDR_VAR 0 5
8218: PUSH
8219: LD_VAR 0 4
8223: PPUSH
8224: CALL_OW 313
8228: PUSH
8229: FOR_IN
8230: IFFALSE 8250
// tmpTab = tmpTab ^ j ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_VAR 0 6
8241: PUSH
8242: LD_VAR 0 5
8246: ADD
8247: ST_TO_ADDR
8248: GO 8229
8250: POP
8251: POP
// end ;
8252: GO 8211
8254: POP
8255: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8256: LD_VAR 0 6
8260: PPUSH
8261: LD_VAR 0 2
8265: PPUSH
8266: CALL_OW 250
8270: PPUSH
8271: LD_VAR 0 2
8275: PPUSH
8276: CALL_OW 251
8280: PPUSH
8281: CALL_OW 114
// end ;
8285: LD_VAR 0 3
8289: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
8294: PPUSH
8295: PPUSH
// enable ;
8296: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8297: LD_ADDR_VAR 0 7
8301: PUSH
8302: LD_VAR 0 3
8306: PPUSH
8307: CALL_OW 435
8311: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8312: LD_ADDR_VAR 0 6
8316: PUSH
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 34
8331: PUSH
8332: LD_VAR 0 2
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 69
8349: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8350: LD_VAR 0 6
8354: PUSH
8355: LD_INT 0
8357: GREATER
8358: PUSH
8359: LD_VAR 0 3
8363: PPUSH
8364: CALL_OW 435
8368: AND
8369: PUSH
8370: LD_VAR 0 7
8374: PUSH
8375: LD_INT 0
8377: GREATER
8378: AND
8379: IFFALSE 8428
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8381: LD_VAR 0 6
8385: PUSH
8386: LD_INT 1
8388: ARRAY
8389: PPUSH
8390: LD_VAR 0 7
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 7
8403: PUSH
8404: LD_INT 2
8406: ARRAY
8407: PPUSH
8408: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8412: LD_VAR 0 6
8416: PUSH
8417: LD_INT 1
8419: ARRAY
8420: PPUSH
8421: LD_INT 100
8423: PPUSH
8424: CALL_OW 240
// end ; end ;
8428: LD_VAR 0 4
8432: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8433: LD_INT 0
8435: PPUSH
8436: PPUSH
8437: PPUSH
8438: PPUSH
8439: PPUSH
8440: PPUSH
8441: PPUSH
8442: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_INT 22
8455: PUSH
8456: LD_VAR 0 1
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 56
8467: PUSH
8468: EMPTY
8469: LIST
8470: PUSH
8471: LD_INT 24
8473: PUSH
8474: LD_INT 700
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 60
8486: PUSH
8487: EMPTY
8488: LIST
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 2
8496: PUSH
8497: LD_INT 25
8499: PUSH
8500: LD_INT 1
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 25
8509: PUSH
8510: LD_INT 5
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 25
8519: PUSH
8520: LD_INT 8
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 25
8529: PUSH
8530: LD_INT 9
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 70
8555: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8556: LD_ADDR_VAR 0 7
8560: PUSH
8561: LD_VAR 0 2
8565: PPUSH
8566: LD_INT 22
8568: PUSH
8569: LD_VAR 0 1
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 30
8580: PUSH
8581: LD_INT 32
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 58
8590: PUSH
8591: EMPTY
8592: LIST
8593: PUSH
8594: LD_INT 24
8596: PUSH
8597: LD_INT 251
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 70
8614: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8615: LD_ADDR_VAR 0 9
8619: PUSH
8620: LD_VAR 0 2
8624: PPUSH
8625: LD_INT 22
8627: PUSH
8628: LD_VAR 0 1
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_INT 30
8642: PUSH
8643: LD_INT 4
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 30
8652: PUSH
8653: LD_INT 5
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 24
8667: PUSH
8668: LD_INT 251
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: LIST
8679: PPUSH
8680: CALL_OW 70
8684: ST_TO_ADDR
// if barrackList > 0 then
8685: LD_VAR 0 9
8689: PUSH
8690: LD_INT 0
8692: GREATER
8693: IFFALSE 8841
// begin if turretList = 0 then
8695: LD_VAR 0 7
8699: PUSH
8700: LD_INT 0
8702: EQUAL
8703: IFFALSE 8745
// begin if soldiers_list > 0 then
8705: LD_VAR 0 6
8709: PUSH
8710: LD_INT 0
8712: GREATER
8713: IFFALSE 8743
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8715: LD_VAR 0 6
8719: PPUSH
8720: LD_VAR 0 9
8724: PUSH
8725: LD_INT 1
8727: PPUSH
8728: LD_VAR 0 9
8732: PPUSH
8733: CALL_OW 12
8737: ARRAY
8738: PPUSH
8739: CALL_OW 120
// end else
8743: GO 8841
// begin for i in barrackList do
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_VAR 0 9
8754: PUSH
8755: FOR_IN
8756: IFFALSE 8839
// begin insideUnits = UnitsInside ( i ) ;
8758: LD_ADDR_VAR 0 10
8762: PUSH
8763: LD_VAR 0 4
8767: PPUSH
8768: CALL_OW 313
8772: ST_TO_ADDR
// if insideUnits > 0 then
8773: LD_VAR 0 10
8777: PUSH
8778: LD_INT 0
8780: GREATER
8781: IFFALSE 8805
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8783: LD_VAR 0 10
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PPUSH
8792: LD_VAR 0 7
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: CALL_OW 120
// if soldiers_list > 0 then
8805: LD_VAR 0 6
8809: PUSH
8810: LD_INT 0
8812: GREATER
8813: IFFALSE 8837
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8815: LD_VAR 0 6
8819: PUSH
8820: LD_INT 1
8822: ARRAY
8823: PPUSH
8824: LD_VAR 0 7
8828: PUSH
8829: LD_INT 1
8831: ARRAY
8832: PPUSH
8833: CALL_OW 120
// end ;
8837: GO 8755
8839: POP
8840: POP
// end ; end ; end ;
8841: LD_VAR 0 3
8845: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8853: LD_ADDR_VAR 0 6
8857: PUSH
8858: LD_INT 22
8860: PUSH
8861: LD_VAR 0 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 30
8875: PUSH
8876: LD_INT 31
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 30
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 30
8895: PUSH
8896: LD_INT 33
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 30
8905: PUSH
8906: LD_INT 4
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 30
8915: PUSH
8916: LD_INT 5
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8940: LD_ADDR_VAR 0 7
8944: PUSH
8945: LD_INT 22
8947: PUSH
8948: LD_VAR 0 2
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 3
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 58
8969: PUSH
8970: EMPTY
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: PPUSH
8978: CALL_OW 69
8982: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8983: LD_VAR 0 6
8987: PUSH
8988: LD_INT 0
8990: GREATER
8991: PUSH
8992: LD_VAR 0 7
8996: PUSH
8997: LD_INT 0
8999: GREATER
9000: AND
9001: IFFALSE 9071
// begin for i in turretsList do
9003: LD_ADDR_VAR 0 4
9007: PUSH
9008: LD_VAR 0 6
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9069
// begin for j in enemyBuildings do
9016: LD_ADDR_VAR 0 5
9020: PUSH
9021: LD_VAR 0 7
9025: PUSH
9026: FOR_IN
9027: IFFALSE 9065
// begin if GetDistUnits ( i , j ) < 20 then
9029: LD_VAR 0 4
9033: PPUSH
9034: LD_VAR 0 5
9038: PPUSH
9039: CALL_OW 296
9043: PUSH
9044: LD_INT 20
9046: LESS
9047: IFFALSE 9063
// begin ComAttackUnit ( i , j ) ;
9049: LD_VAR 0 4
9053: PPUSH
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 115
// end ; end ;
9063: GO 9026
9065: POP
9066: POP
// end ;
9067: GO 9013
9069: POP
9070: POP
// end ; end ;
9071: LD_VAR 0 3
9075: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9076: LD_INT 0
9078: PPUSH
9079: PPUSH
9080: PPUSH
9081: PPUSH
9082: PPUSH
9083: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9084: LD_ADDR_VAR 0 8
9088: PUSH
9089: LD_INT 22
9091: PUSH
9092: LD_VAR 0 1
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 21
9103: PUSH
9104: LD_INT 2
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 34
9113: PUSH
9114: LD_INT 52
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: EMPTY
9122: LIST
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 69
9130: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9131: LD_ADDR_VAR 0 9
9135: PUSH
9136: LD_INT 22
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 21
9150: PUSH
9151: LD_INT 3
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: LD_INT 24
9163: PUSH
9164: LD_INT 1000
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: PUSH
9180: EMPTY
9181: LIST
9182: PPUSH
9183: CALL_OW 69
9187: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9188: LD_VAR 0 9
9192: PUSH
9193: LD_INT 0
9195: GREATER
9196: PUSH
9197: LD_VAR 0 8
9201: PPUSH
9202: LD_INT 24
9204: PUSH
9205: LD_INT 750
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 72
9216: PUSH
9217: LD_INT 0
9219: GREATER
9220: AND
9221: IFFALSE 9256
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9223: LD_VAR 0 8
9227: PPUSH
9228: LD_INT 24
9230: PUSH
9231: LD_INT 750
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 72
9242: PPUSH
9243: LD_VAR 0 9
9247: PUSH
9248: LD_INT 1
9250: ARRAY
9251: PPUSH
9252: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9256: LD_VAR 0 8
9260: PPUSH
9261: LD_INT 3
9263: PUSH
9264: LD_INT 24
9266: PUSH
9267: LD_INT 750
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 72
9282: PUSH
9283: LD_INT 0
9285: GREATER
9286: IFFALSE 9324
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9288: LD_VAR 0 8
9292: PPUSH
9293: LD_INT 3
9295: PUSH
9296: LD_INT 24
9298: PUSH
9299: LD_INT 750
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PPUSH
9310: CALL_OW 72
9314: PPUSH
9315: LD_VAR 0 2
9319: PPUSH
9320: CALL_OW 113
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9324: LD_VAR 0 2
9328: PPUSH
9329: LD_INT 22
9331: PUSH
9332: LD_VAR 0 1
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 21
9343: PUSH
9344: LD_INT 2
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: LD_INT 34
9353: PUSH
9354: LD_INT 52
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 3
9363: PUSH
9364: LD_INT 24
9366: PUSH
9367: LD_INT 750
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 70
9388: PUSH
9389: LD_INT 0
9391: GREATER
9392: IFFALSE 9594
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_VAR 0 2
9403: PPUSH
9404: LD_INT 22
9406: PUSH
9407: LD_VAR 0 1
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 21
9418: PUSH
9419: LD_INT 2
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 34
9428: PUSH
9429: LD_INT 52
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 3
9438: PUSH
9439: LD_INT 24
9441: PUSH
9442: LD_INT 750
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: PPUSH
9459: CALL_OW 70
9463: PUSH
9464: FOR_IN
9465: IFFALSE 9592
// begin mechTmp = UnitsInside ( i ) ;
9467: LD_ADDR_VAR 0 6
9471: PUSH
9472: LD_VAR 0 5
9476: PPUSH
9477: CALL_OW 313
9481: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
9482: LD_VAR 0 6
9486: PPUSH
9487: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_VAR 0 7
9500: PPUSH
9501: CALL_OW 189
// wait ( 0 0$2 ) ;
9505: LD_INT 70
9507: PPUSH
9508: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
9512: LD_VAR 0 6
9516: PPUSH
9517: LD_VAR 0 2
9521: PPUSH
9522: LD_INT 22
9524: PUSH
9525: LD_VAR 0 1
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 21
9536: PUSH
9537: LD_INT 2
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 34
9546: PUSH
9547: LD_INT 52
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PUSH
9554: LD_INT 24
9556: PUSH
9557: LD_INT 1000
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 58
9566: PUSH
9567: EMPTY
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 70
9581: PUSH
9582: LD_INT 1
9584: ARRAY
9585: PPUSH
9586: CALL_OW 180
// end ;
9590: GO 9464
9592: POP
9593: POP
// end ; end ;
9594: LD_VAR 0 4
9598: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9599: LD_INT 0
9601: PPUSH
9602: PPUSH
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
9607: PPUSH
9608: PPUSH
9609: PPUSH
9610: PPUSH
9611: PPUSH
// for i = 1 to medicCount do
9612: LD_ADDR_VAR 0 14
9616: PUSH
9617: DOUBLE
9618: LD_INT 1
9620: DEC
9621: ST_TO_ADDR
9622: LD_VAR 0 7
9626: PUSH
9627: FOR_TO
9628: IFFALSE 9710
// begin uc_side = side ;
9630: LD_ADDR_OWVAR 20
9634: PUSH
9635: LD_VAR 0 1
9639: ST_TO_ADDR
// uc_nation = nation ;
9640: LD_ADDR_OWVAR 21
9644: PUSH
9645: LD_VAR 0 2
9649: ST_TO_ADDR
// hc_name =  ;
9650: LD_ADDR_OWVAR 26
9654: PUSH
9655: LD_STRING 
9657: ST_TO_ADDR
// hc_gallery =  ;
9658: LD_ADDR_OWVAR 33
9662: PUSH
9663: LD_STRING 
9665: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9666: LD_INT 0
9668: PPUSH
9669: LD_INT 4
9671: PPUSH
9672: LD_VAR 0 8
9676: PPUSH
9677: CALL_OW 380
// un = CreateHuman ;
9681: LD_ADDR_VAR 0 16
9685: PUSH
9686: CALL_OW 44
9690: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9691: LD_VAR 0 16
9695: PPUSH
9696: LD_VAR 0 9
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL_OW 49
// end ;
9708: GO 9627
9710: POP
9711: POP
// for i = 1 to soldierCount do
9712: LD_ADDR_VAR 0 14
9716: PUSH
9717: DOUBLE
9718: LD_INT 1
9720: DEC
9721: ST_TO_ADDR
9722: LD_VAR 0 3
9726: PUSH
9727: FOR_TO
9728: IFFALSE 9810
// begin uc_side = side ;
9730: LD_ADDR_OWVAR 20
9734: PUSH
9735: LD_VAR 0 1
9739: ST_TO_ADDR
// uc_nation = nation ;
9740: LD_ADDR_OWVAR 21
9744: PUSH
9745: LD_VAR 0 2
9749: ST_TO_ADDR
// hc_name =  ;
9750: LD_ADDR_OWVAR 26
9754: PUSH
9755: LD_STRING 
9757: ST_TO_ADDR
// hc_gallery =  ;
9758: LD_ADDR_OWVAR 33
9762: PUSH
9763: LD_STRING 
9765: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9766: LD_INT 0
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_VAR 0 8
9776: PPUSH
9777: CALL_OW 380
// un = CreateHuman ;
9781: LD_ADDR_VAR 0 16
9785: PUSH
9786: CALL_OW 44
9790: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9791: LD_VAR 0 16
9795: PPUSH
9796: LD_VAR 0 9
9800: PPUSH
9801: LD_INT 0
9803: PPUSH
9804: CALL_OW 49
// end ;
9808: GO 9727
9810: POP
9811: POP
// for i = 1 to sniperCount do
9812: LD_ADDR_VAR 0 14
9816: PUSH
9817: DOUBLE
9818: LD_INT 1
9820: DEC
9821: ST_TO_ADDR
9822: LD_VAR 0 4
9826: PUSH
9827: FOR_TO
9828: IFFALSE 9910
// begin uc_side = side ;
9830: LD_ADDR_OWVAR 20
9834: PUSH
9835: LD_VAR 0 1
9839: ST_TO_ADDR
// uc_nation = nation ;
9840: LD_ADDR_OWVAR 21
9844: PUSH
9845: LD_VAR 0 2
9849: ST_TO_ADDR
// hc_name =  ;
9850: LD_ADDR_OWVAR 26
9854: PUSH
9855: LD_STRING 
9857: ST_TO_ADDR
// hc_gallery =  ;
9858: LD_ADDR_OWVAR 33
9862: PUSH
9863: LD_STRING 
9865: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9866: LD_INT 0
9868: PPUSH
9869: LD_INT 5
9871: PPUSH
9872: LD_VAR 0 8
9876: PPUSH
9877: CALL_OW 380
// un = CreateHuman ;
9881: LD_ADDR_VAR 0 16
9885: PUSH
9886: CALL_OW 44
9890: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9891: LD_VAR 0 16
9895: PPUSH
9896: LD_VAR 0 9
9900: PPUSH
9901: LD_INT 0
9903: PPUSH
9904: CALL_OW 49
// end ;
9908: GO 9827
9910: POP
9911: POP
// for i = 1 to bazookCount do
9912: LD_ADDR_VAR 0 14
9916: PUSH
9917: DOUBLE
9918: LD_INT 1
9920: DEC
9921: ST_TO_ADDR
9922: LD_VAR 0 5
9926: PUSH
9927: FOR_TO
9928: IFFALSE 10010
// begin uc_side = side ;
9930: LD_ADDR_OWVAR 20
9934: PUSH
9935: LD_VAR 0 1
9939: ST_TO_ADDR
// uc_nation = nation ;
9940: LD_ADDR_OWVAR 21
9944: PUSH
9945: LD_VAR 0 2
9949: ST_TO_ADDR
// hc_name =  ;
9950: LD_ADDR_OWVAR 26
9954: PUSH
9955: LD_STRING 
9957: ST_TO_ADDR
// hc_gallery =  ;
9958: LD_ADDR_OWVAR 33
9962: PUSH
9963: LD_STRING 
9965: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9966: LD_INT 0
9968: PPUSH
9969: LD_INT 9
9971: PPUSH
9972: LD_VAR 0 8
9976: PPUSH
9977: CALL_OW 380
// un = CreateHuman ;
9981: LD_ADDR_VAR 0 16
9985: PUSH
9986: CALL_OW 44
9990: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9991: LD_VAR 0 16
9995: PPUSH
9996: LD_VAR 0 9
10000: PPUSH
10001: LD_INT 0
10003: PPUSH
10004: CALL_OW 49
// end ;
10008: GO 9927
10010: POP
10011: POP
// for i = 1 to mortalCount do
10012: LD_ADDR_VAR 0 14
10016: PUSH
10017: DOUBLE
10018: LD_INT 1
10020: DEC
10021: ST_TO_ADDR
10022: LD_VAR 0 6
10026: PUSH
10027: FOR_TO
10028: IFFALSE 10110
// begin uc_side = side ;
10030: LD_ADDR_OWVAR 20
10034: PUSH
10035: LD_VAR 0 1
10039: ST_TO_ADDR
// uc_nation = nation ;
10040: LD_ADDR_OWVAR 21
10044: PUSH
10045: LD_VAR 0 2
10049: ST_TO_ADDR
// hc_name =  ;
10050: LD_ADDR_OWVAR 26
10054: PUSH
10055: LD_STRING 
10057: ST_TO_ADDR
// hc_gallery =  ;
10058: LD_ADDR_OWVAR 33
10062: PUSH
10063: LD_STRING 
10065: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10066: LD_INT 0
10068: PPUSH
10069: LD_INT 8
10071: PPUSH
10072: LD_VAR 0 8
10076: PPUSH
10077: CALL_OW 380
// un = CreateHuman ;
10081: LD_ADDR_VAR 0 16
10085: PUSH
10086: CALL_OW 44
10090: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10091: LD_VAR 0 16
10095: PPUSH
10096: LD_VAR 0 9
10100: PPUSH
10101: LD_INT 0
10103: PPUSH
10104: CALL_OW 49
// end ;
10108: GO 10027
10110: POP
10111: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10112: LD_ADDR_VAR 0 19
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_VAR 0 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: LD_INT 25
10134: PUSH
10135: LD_INT 1
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 25
10144: PUSH
10145: LD_INT 5
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 25
10154: PUSH
10155: LD_INT 8
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 9
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PPUSH
10183: CALL_OW 69
10187: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10188: LD_ADDR_VAR 0 18
10192: PUSH
10193: LD_INT 22
10195: PUSH
10196: LD_VAR 0 1
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 4
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 69
10223: ST_TO_ADDR
// for i in medic_list do
10224: LD_ADDR_VAR 0 14
10228: PUSH
10229: LD_VAR 0 18
10233: PUSH
10234: FOR_IN
10235: IFFALSE 10253
// ComMoveToArea ( i , healArea ) ;
10237: LD_VAR 0 14
10241: PPUSH
10242: LD_VAR 0 10
10246: PPUSH
10247: CALL_OW 113
10251: GO 10234
10253: POP
10254: POP
// if strategy = 1 then
10255: LD_VAR 0 12
10259: PUSH
10260: LD_INT 1
10262: EQUAL
10263: IFFALSE 10968
// begin repeat wait ( 0 0$3 ) ;
10265: LD_INT 105
10267: PPUSH
10268: CALL_OW 67
// for i in soldiersOK_list do
10272: LD_ADDR_VAR 0 14
10276: PUSH
10277: LD_VAR 0 19
10281: PUSH
10282: FOR_IN
10283: IFFALSE 10317
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10285: LD_VAR 0 14
10289: PPUSH
10290: LD_INT 80
10292: PPUSH
10293: LD_INT 109
10295: PPUSH
10296: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10300: LD_VAR 0 14
10304: PPUSH
10305: LD_INT 39
10307: PPUSH
10308: LD_INT 49
10310: PPUSH
10311: CALL_OW 174
// end ;
10315: GO 10282
10317: POP
10318: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10319: LD_INT 15
10321: PPUSH
10322: LD_INT 22
10324: PUSH
10325: LD_VAR 0 1
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PPUSH
10334: CALL_OW 70
10338: PUSH
10339: LD_INT 0
10341: GREATER
10342: IFFALSE 10265
// repeat wait ( 0 0$1 ) ;
10344: LD_INT 35
10346: PPUSH
10347: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10351: LD_ADDR_VAR 0 17
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_VAR 0 1
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 1
10370: PUSH
10371: LD_INT 3
10373: PUSH
10374: LD_INT 24
10376: PUSH
10377: LD_INT 550
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: LD_INT 250
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10412: LD_ADDR_VAR 0 19
10416: PUSH
10417: LD_INT 22
10419: PUSH
10420: LD_VAR 0 1
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: LD_INT 25
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 5
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 8
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 9
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 24
10481: PUSH
10482: LD_INT 1000
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: PPUSH
10494: CALL_OW 69
10498: ST_TO_ADDR
// if medicCount > 0 then
10499: LD_VAR 0 7
10503: PUSH
10504: LD_INT 0
10506: GREATER
10507: IFFALSE 10581
// begin if damageUnit_list > 0 then
10509: LD_VAR 0 17
10513: PUSH
10514: LD_INT 0
10516: GREATER
10517: IFFALSE 10581
// begin for i in damageUnit_list do
10519: LD_ADDR_VAR 0 14
10523: PUSH
10524: LD_VAR 0 17
10528: PUSH
10529: FOR_IN
10530: IFFALSE 10579
// begin ComMoveToArea ( i , healArea ) ;
10532: LD_VAR 0 14
10536: PPUSH
10537: LD_VAR 0 10
10541: PPUSH
10542: CALL_OW 113
// for j in medic_list do
10546: LD_ADDR_VAR 0 15
10550: PUSH
10551: LD_VAR 0 18
10555: PUSH
10556: FOR_IN
10557: IFFALSE 10575
// AddComHeal ( j , i ) ;
10559: LD_VAR 0 15
10563: PPUSH
10564: LD_VAR 0 14
10568: PPUSH
10569: CALL_OW 188
10573: GO 10556
10575: POP
10576: POP
// end ;
10577: GO 10529
10579: POP
10580: POP
// end ; end ; for i in soldiersOK_list do
10581: LD_ADDR_VAR 0 14
10585: PUSH
10586: LD_VAR 0 19
10590: PUSH
10591: FOR_IN
10592: IFFALSE 10768
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10594: LD_ADDR_VAR 0 22
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_VAR 0 11
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: PPUSH
10616: LD_VAR 0 14
10620: PPUSH
10621: CALL_OW 74
10625: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10626: LD_ADDR_VAR 0 23
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_VAR 0 11
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 2
10645: PUSH
10646: LD_INT 59
10648: PUSH
10649: EMPTY
10650: LIST
10651: PUSH
10652: LD_INT 21
10654: PUSH
10655: LD_INT 1
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: PPUSH
10685: CALL_OW 69
10689: PPUSH
10690: LD_VAR 0 14
10694: PPUSH
10695: CALL_OW 74
10699: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10700: LD_VAR 0 14
10704: PPUSH
10705: LD_VAR 0 22
10709: PPUSH
10710: CALL_OW 296
10714: PUSH
10715: LD_INT 8
10717: PLUS
10718: PUSH
10719: LD_VAR 0 14
10723: PPUSH
10724: LD_VAR 0 23
10728: PPUSH
10729: CALL_OW 296
10733: LESS
10734: IFFALSE 10752
// begin ComAttackUnit ( i , target1 ) ;
10736: LD_VAR 0 14
10740: PPUSH
10741: LD_VAR 0 22
10745: PPUSH
10746: CALL_OW 115
// end else
10750: GO 10766
// begin ComAttackUnit ( i , target2 ) ;
10752: LD_VAR 0 14
10756: PPUSH
10757: LD_VAR 0 23
10761: PPUSH
10762: CALL_OW 115
// end ; end ;
10766: GO 10591
10768: POP
10769: POP
// for i in soldiersOK_list do
10770: LD_ADDR_VAR 0 14
10774: PUSH
10775: LD_VAR 0 19
10779: PUSH
10780: FOR_IN
10781: IFFALSE 10957
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10783: LD_ADDR_VAR 0 22
10787: PUSH
10788: LD_INT 22
10790: PUSH
10791: LD_VAR 0 11
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 69
10804: PPUSH
10805: LD_VAR 0 14
10809: PPUSH
10810: CALL_OW 74
10814: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10815: LD_ADDR_VAR 0 23
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_VAR 0 11
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 59
10837: PUSH
10838: EMPTY
10839: LIST
10840: PUSH
10841: LD_INT 21
10843: PUSH
10844: LD_INT 1
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 21
10853: PUSH
10854: LD_INT 2
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: EMPTY
10872: LIST
10873: PPUSH
10874: CALL_OW 69
10878: PPUSH
10879: LD_VAR 0 14
10883: PPUSH
10884: CALL_OW 74
10888: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10889: LD_VAR 0 14
10893: PPUSH
10894: LD_VAR 0 22
10898: PPUSH
10899: CALL_OW 296
10903: PUSH
10904: LD_INT 8
10906: PLUS
10907: PUSH
10908: LD_VAR 0 14
10912: PPUSH
10913: LD_VAR 0 23
10917: PPUSH
10918: CALL_OW 296
10922: LESS
10923: IFFALSE 10941
// begin ComAttackUnit ( i , target1 ) ;
10925: LD_VAR 0 14
10929: PPUSH
10930: LD_VAR 0 22
10934: PPUSH
10935: CALL_OW 115
// end else
10939: GO 10955
// begin ComAttackUnit ( i , target2 ) ;
10941: LD_VAR 0 14
10945: PPUSH
10946: LD_VAR 0 23
10950: PPUSH
10951: CALL_OW 115
// end ; end ;
10955: GO 10780
10957: POP
10958: POP
// until soldiersOK_list = [ ] ;
10959: LD_VAR 0 19
10963: PUSH
10964: EMPTY
10965: EQUAL
10966: IFFALSE 10344
// end ; if strategy = 2 then
10968: LD_VAR 0 12
10972: PUSH
10973: LD_INT 2
10975: EQUAL
10976: IFFALSE 11681
// begin repeat wait ( 0 0$1 ) ;
10978: LD_INT 35
10980: PPUSH
10981: CALL_OW 67
// for i in soldiersOK_list do
10985: LD_ADDR_VAR 0 14
10989: PUSH
10990: LD_VAR 0 19
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11030
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10998: LD_VAR 0 14
11002: PPUSH
11003: LD_INT 117
11005: PPUSH
11006: LD_INT 97
11008: PPUSH
11009: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11013: LD_VAR 0 14
11017: PPUSH
11018: LD_INT 94
11020: PPUSH
11021: LD_INT 50
11023: PPUSH
11024: CALL_OW 174
// end ;
11028: GO 10995
11030: POP
11031: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11032: LD_INT 16
11034: PPUSH
11035: LD_INT 22
11037: PUSH
11038: LD_VAR 0 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 70
11051: PUSH
11052: LD_INT 0
11054: GREATER
11055: IFFALSE 10978
// repeat wait ( 0 0$3 ) ;
11057: LD_INT 105
11059: PPUSH
11060: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11064: LD_ADDR_VAR 0 17
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 1
11083: PUSH
11084: LD_INT 3
11086: PUSH
11087: LD_INT 24
11089: PUSH
11090: LD_INT 550
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 24
11103: PUSH
11104: LD_INT 250
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PPUSH
11120: CALL_OW 69
11124: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11125: LD_ADDR_VAR 0 19
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_VAR 0 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: LD_INT 25
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 25
11157: PUSH
11158: LD_INT 5
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 8
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 25
11177: PUSH
11178: LD_INT 9
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 24
11194: PUSH
11195: LD_INT 1000
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 69
11211: ST_TO_ADDR
// if medicCount > 0 then
11212: LD_VAR 0 7
11216: PUSH
11217: LD_INT 0
11219: GREATER
11220: IFFALSE 11294
// begin if damageUnit_list > 0 then
11222: LD_VAR 0 17
11226: PUSH
11227: LD_INT 0
11229: GREATER
11230: IFFALSE 11294
// begin for i in damageUnit_list do
11232: LD_ADDR_VAR 0 14
11236: PUSH
11237: LD_VAR 0 17
11241: PUSH
11242: FOR_IN
11243: IFFALSE 11292
// begin ComMoveToArea ( i , healArea ) ;
11245: LD_VAR 0 14
11249: PPUSH
11250: LD_VAR 0 10
11254: PPUSH
11255: CALL_OW 113
// for j in medic_list do
11259: LD_ADDR_VAR 0 15
11263: PUSH
11264: LD_VAR 0 18
11268: PUSH
11269: FOR_IN
11270: IFFALSE 11288
// AddComHeal ( j , i ) ;
11272: LD_VAR 0 15
11276: PPUSH
11277: LD_VAR 0 14
11281: PPUSH
11282: CALL_OW 188
11286: GO 11269
11288: POP
11289: POP
// end ;
11290: GO 11242
11292: POP
11293: POP
// end ; end ; for i in soldiersOK_list do
11294: LD_ADDR_VAR 0 14
11298: PUSH
11299: LD_VAR 0 19
11303: PUSH
11304: FOR_IN
11305: IFFALSE 11481
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11307: LD_ADDR_VAR 0 22
11311: PUSH
11312: LD_INT 22
11314: PUSH
11315: LD_VAR 0 11
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: PPUSH
11329: LD_VAR 0 14
11333: PPUSH
11334: CALL_OW 74
11338: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11339: LD_ADDR_VAR 0 23
11343: PUSH
11344: LD_INT 22
11346: PUSH
11347: LD_VAR 0 11
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 2
11358: PUSH
11359: LD_INT 59
11361: PUSH
11362: EMPTY
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 21
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: EMPTY
11396: LIST
11397: PPUSH
11398: CALL_OW 69
11402: PPUSH
11403: LD_VAR 0 14
11407: PPUSH
11408: CALL_OW 74
11412: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11413: LD_VAR 0 14
11417: PPUSH
11418: LD_VAR 0 22
11422: PPUSH
11423: CALL_OW 296
11427: PUSH
11428: LD_INT 8
11430: PLUS
11431: PUSH
11432: LD_VAR 0 14
11436: PPUSH
11437: LD_VAR 0 23
11441: PPUSH
11442: CALL_OW 296
11446: LESS
11447: IFFALSE 11465
// begin ComAttackUnit ( i , target1 ) ;
11449: LD_VAR 0 14
11453: PPUSH
11454: LD_VAR 0 22
11458: PPUSH
11459: CALL_OW 115
// end else
11463: GO 11479
// begin ComAttackUnit ( i , target2 ) ;
11465: LD_VAR 0 14
11469: PPUSH
11470: LD_VAR 0 23
11474: PPUSH
11475: CALL_OW 115
// end ; end ;
11479: GO 11304
11481: POP
11482: POP
// for i in soldiersOK_list do
11483: LD_ADDR_VAR 0 14
11487: PUSH
11488: LD_VAR 0 19
11492: PUSH
11493: FOR_IN
11494: IFFALSE 11670
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11496: LD_ADDR_VAR 0 22
11500: PUSH
11501: LD_INT 22
11503: PUSH
11504: LD_VAR 0 11
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: PPUSH
11518: LD_VAR 0 14
11522: PPUSH
11523: CALL_OW 74
11527: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11528: LD_ADDR_VAR 0 23
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_VAR 0 11
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 59
11550: PUSH
11551: EMPTY
11552: LIST
11553: PUSH
11554: LD_INT 21
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 21
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: PPUSH
11592: LD_VAR 0 14
11596: PPUSH
11597: CALL_OW 74
11601: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11602: LD_VAR 0 14
11606: PPUSH
11607: LD_VAR 0 22
11611: PPUSH
11612: CALL_OW 296
11616: PUSH
11617: LD_INT 8
11619: PLUS
11620: PUSH
11621: LD_VAR 0 14
11625: PPUSH
11626: LD_VAR 0 23
11630: PPUSH
11631: CALL_OW 296
11635: LESS
11636: IFFALSE 11654
// begin ComAttackUnit ( i , target1 ) ;
11638: LD_VAR 0 14
11642: PPUSH
11643: LD_VAR 0 22
11647: PPUSH
11648: CALL_OW 115
// end else
11652: GO 11668
// begin ComAttackUnit ( i , target2 ) ;
11654: LD_VAR 0 14
11658: PPUSH
11659: LD_VAR 0 23
11663: PPUSH
11664: CALL_OW 115
// end ; end ;
11668: GO 11493
11670: POP
11671: POP
// until soldiersOK_list = [ ] ;
11672: LD_VAR 0 19
11676: PUSH
11677: EMPTY
11678: EQUAL
11679: IFFALSE 11057
// end ; end ; end_of_file
11681: LD_VAR 0 13
11685: RET
// every 0 0$01 do
11686: GO 11688
11688: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11689: LD_INT 22
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 25
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PPUSH
11713: CALL_OW 69
11717: PUSH
11718: LD_INT 0
11720: EQUAL
11721: IFFALSE 11735
// SetClass ( JMM , 2 ) ;
11723: LD_EXP 1
11727: PPUSH
11728: LD_INT 2
11730: PPUSH
11731: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11735: LD_STRING M1
11737: PPUSH
11738: CALL_OW 337
// case difficulty of 1 :
11742: LD_OWVAR 67
11746: PUSH
11747: LD_INT 1
11749: DOUBLE
11750: EQUAL
11751: IFTRUE 11755
11753: GO 11765
11755: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11756: LD_STRING M1-1
11758: PPUSH
11759: CALL_OW 337
11763: GO 11802
11765: LD_INT 2
11767: DOUBLE
11768: EQUAL
11769: IFTRUE 11773
11771: GO 11783
11773: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11774: LD_STRING M1-2
11776: PPUSH
11777: CALL_OW 337
11781: GO 11802
11783: LD_INT 3
11785: DOUBLE
11786: EQUAL
11787: IFTRUE 11791
11789: GO 11801
11791: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11792: LD_STRING M1-3
11794: PPUSH
11795: CALL_OW 337
11799: GO 11802
11801: POP
// ChangeMissionObjectives ( M1cont ) ;
11802: LD_STRING M1cont
11804: PPUSH
11805: CALL_OW 337
// SaveForQuickRestart ;
11809: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11813: LD_INT 350
11815: PPUSH
11816: LD_INT 875
11818: PPUSH
11819: CALL_OW 12
11823: PPUSH
11824: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11828: LD_INT 5
11830: PPUSH
11831: LD_INT 4
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 55
// end ;
11841: END
// every 0 0$15 trigger firstCrateSpawn do
11842: LD_EXP 41
11846: IFFALSE 12185
11848: GO 11850
11850: DISABLE
// begin if IsOk ( Lisa ) then
11851: LD_EXP 2
11855: PPUSH
11856: CALL_OW 302
11860: IFFALSE 11876
// Say ( Lisa , DR0-Lisa-1 ) else
11862: LD_EXP 2
11866: PPUSH
11867: LD_STRING DR0-Lisa-1
11869: PPUSH
11870: CALL_OW 88
11874: GO 12010
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11876: LD_INT 22
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 26
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 2
11908: PUSH
11909: LD_INT 25
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 25
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 25
11931: PUSH
11932: LD_INT 3
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 25
11941: PUSH
11942: LD_INT 4
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: PUSH
11967: LD_EXP 1
11971: PUSH
11972: LD_EXP 8
11976: PUSH
11977: LD_EXP 5
11981: PUSH
11982: LD_EXP 6
11986: PUSH
11987: LD_EXP 7
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: DIFF
11999: PPUSH
12000: LD_STRING DR0-Sol1-1
12002: PPUSH
12003: LD_STRING DR0-Sol1-1
12005: PPUSH
12006: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12010: LD_INT 22
12012: PUSH
12013: LD_INT 1
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 21
12022: PUSH
12023: LD_INT 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 2
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 25
12065: PUSH
12066: LD_INT 3
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 4
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: PUSH
12101: LD_EXP 1
12105: PUSH
12106: LD_EXP 8
12110: PUSH
12111: LD_EXP 5
12115: PUSH
12116: LD_EXP 2
12120: PUSH
12121: LD_EXP 6
12125: PUSH
12126: LD_EXP 7
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: DIFF
12139: PPUSH
12140: LD_STRING DR0-Sol2-1
12142: PPUSH
12143: LD_STRING DR0-Sol2-1
12145: PPUSH
12146: CALL 5256 0 3
// if IsOk ( Cyrus ) then
12150: LD_EXP 4
12154: PPUSH
12155: CALL_OW 302
12159: IFFALSE 12173
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12161: LD_EXP 4
12165: PPUSH
12166: LD_STRING DR0-Cyrus-1
12168: PPUSH
12169: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12173: LD_EXP 1
12177: PPUSH
12178: LD_STRING DR0-JMM-1
12180: PPUSH
12181: CALL_OW 88
// end ;
12185: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
12186: LD_EXP 5
12190: PPUSH
12191: CALL_OW 302
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 25
12208: PUSH
12209: LD_INT 16
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: PUSH
12225: LD_INT 0
12227: GREATER
12228: AND
12229: IFFALSE 12507
12231: GO 12233
12233: DISABLE
// begin DialogueOn ;
12234: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12238: LD_EXP 5
12242: PPUSH
12243: LD_STRING D10-Frank-1
12245: PPUSH
12246: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12250: LD_INT 22
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 21
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: LD_INT 25
12275: PUSH
12276: LD_INT 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 25
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 25
12295: PUSH
12296: LD_INT 3
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 25
12305: PUSH
12306: LD_INT 4
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PPUSH
12325: CALL_OW 69
12329: PUSH
12330: LD_EXP 1
12334: PUSH
12335: LD_EXP 5
12339: PUSH
12340: LD_EXP 2
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: DIFF
12350: PPUSH
12351: LD_STRING D10-Sol1-1
12353: PPUSH
12354: LD_STRING D10-FSol1-1
12356: PPUSH
12357: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12361: LD_EXP 5
12365: PPUSH
12366: LD_STRING D10-Frank-2
12368: PPUSH
12369: CALL_OW 88
// if IsOK ( Lisa ) then
12373: LD_EXP 2
12377: PPUSH
12378: CALL_OW 302
12382: IFFALSE 12398
// begin Say ( Lisa , D10-Lisa-2 ) ;
12384: LD_EXP 2
12388: PPUSH
12389: LD_STRING D10-Lisa-2
12391: PPUSH
12392: CALL_OW 88
// end else
12396: GO 12503
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12398: LD_INT 22
12400: PUSH
12401: LD_INT 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 21
12410: PUSH
12411: LD_INT 1
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 2
12420: PUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 25
12433: PUSH
12434: LD_INT 2
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 25
12443: PUSH
12444: LD_INT 3
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 4
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 69
12477: PUSH
12478: LD_EXP 1
12482: PUSH
12483: LD_EXP 5
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: DIFF
12492: PPUSH
12493: LD_STRING D10-Sol1-2
12495: PPUSH
12496: LD_STRING D10-FSol1-2
12498: PPUSH
12499: CALL 5256 0 3
// end ; DialogueOff ;
12503: CALL_OW 7
// end ;
12507: END
// every 10 10$30 do
12508: GO 12510
12510: DISABLE
// begin HarrisonSupport ;
12511: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12515: LD_EXP 17
12519: PPUSH
12520: CALL_OW 310
12524: PPUSH
12525: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12529: LD_EXP 17
12533: PPUSH
12534: LD_STRING DEng-Eng1-1
12536: PPUSH
12537: CALL_OW 88
// wait ( 1 1$0 ) ;
12541: LD_INT 2100
12543: PPUSH
12544: CALL_OW 67
// DialogueOn ;
12548: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12552: LD_EXP 14
12556: PPUSH
12557: LD_STRING DRem-Har-1
12559: PPUSH
12560: CALL_OW 94
// if contactWithRussian = 1 then
12564: LD_EXP 22
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: IFFALSE 12588
// begin Say ( JMM , DRem-JMM-1 ) ;
12574: LD_EXP 1
12578: PPUSH
12579: LD_STRING DRem-JMM-1
12581: PPUSH
12582: CALL_OW 88
// end else
12586: GO 12600
// begin Say ( JMM , DRem-JMM-1a ) ;
12588: LD_EXP 1
12592: PPUSH
12593: LD_STRING DRem-JMM-1a
12595: PPUSH
12596: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12600: LD_EXP 14
12604: PPUSH
12605: LD_STRING DRem-Har-2
12607: PPUSH
12608: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12612: LD_STRING DenisInDelta
12614: PPUSH
12615: LD_INT 0
12617: PPUSH
12618: CALL_OW 30
12622: PUSH
12623: LD_INT 1
12625: EQUAL
12626: IFFALSE 12642
// begin Say ( JMM , DRem-JMM-2 ) ;
12628: LD_EXP 1
12632: PPUSH
12633: LD_STRING DRem-JMM-2
12635: PPUSH
12636: CALL_OW 88
// end else
12640: GO 12654
// begin Say ( JMM , DRem-JMM-2a ) ;
12642: LD_EXP 1
12646: PPUSH
12647: LD_STRING DRem-JMM-2a
12649: PPUSH
12650: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12654: LD_EXP 14
12658: PPUSH
12659: LD_STRING DRem-Har-3
12661: PPUSH
12662: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12666: LD_EXP 1
12670: PPUSH
12671: LD_STRING DRem-JMM-3
12673: PPUSH
12674: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12678: LD_EXP 14
12682: PPUSH
12683: LD_STRING DRem-Har-4
12685: PPUSH
12686: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12690: LD_STRING DenisInDelta
12692: PPUSH
12693: LD_INT 0
12695: PPUSH
12696: CALL_OW 30
12700: PUSH
12701: LD_INT 1
12703: EQUAL
12704: IFFALSE 12732
// begin Say ( JMM , DRem-JMM-4 ) ;
12706: LD_EXP 1
12710: PPUSH
12711: LD_STRING DRem-JMM-4
12713: PPUSH
12714: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12718: LD_EXP 14
12722: PPUSH
12723: LD_STRING DRem-Har-5
12725: PPUSH
12726: CALL_OW 94
// end else
12730: GO 12765
// begin SetRestrict ( 36 , 1 , true ) ;
12732: LD_INT 36
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12745: LD_INT 15
12747: PPUSH
12748: LD_INT 1
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12758: LD_STRING MR
12760: PPUSH
12761: CALL_OW 337
// end ; DialogueOff ;
12765: CALL_OW 7
// end ;
12769: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12770: LD_STRING DenisInDelta
12772: PPUSH
12773: LD_INT 0
12775: PPUSH
12776: CALL_OW 30
12780: PUSH
12781: LD_INT 1
12783: EQUAL
12784: IFFALSE 12915
12786: GO 12788
12788: DISABLE
// begin PrepareDenis ;
12789: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
12793: LD_EXP 9
12797: PPUSH
12798: CALL_OW 87
// DialogueOn ;
12802: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12806: LD_EXP 9
12810: PPUSH
12811: LD_STRING DDen-Den-1
12813: PPUSH
12814: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12818: LD_EXP 1
12822: PPUSH
12823: LD_STRING DDen-JMM-1
12825: PPUSH
12826: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12830: LD_EXP 9
12834: PPUSH
12835: LD_STRING DDen-Den-2
12837: PPUSH
12838: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12842: LD_EXP 1
12846: PPUSH
12847: LD_STRING DDen-JMM-2
12849: PPUSH
12850: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12854: LD_EXP 9
12858: PPUSH
12859: LD_STRING DDen-Den-3
12861: PPUSH
12862: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12866: LD_EXP 1
12870: PPUSH
12871: LD_STRING DDen-JMM-3
12873: PPUSH
12874: CALL_OW 88
// DialogueOff ;
12878: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12882: LD_INT 36
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12895: LD_INT 15
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12908: LD_STRING MR
12910: PPUSH
12911: CALL_OW 337
// end ;
12915: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12916: CALL 12961 0 0
12920: PUSH
12921: LD_EXP 9
12925: PPUSH
12926: CALL_OW 302
12930: AND
12931: IFFALSE 12960
12933: GO 12935
12935: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12936: LD_EXP 9
12940: PPUSH
12941: LD_STRING DR1-Den-1
12943: PPUSH
12944: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12948: LD_EXP 1
12952: PPUSH
12953: LD_STRING DR1-JMM-1
12955: PPUSH
12956: CALL_OW 88
// end ;
12960: END
// function CheckOptoLab ; var i ; begin
12961: LD_INT 0
12963: PPUSH
12964: PPUSH
// result = false ;
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12973: LD_ADDR_VAR 0 2
12977: PUSH
12978: LD_INT 22
12980: PUSH
12981: LD_INT 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: LD_INT 30
12993: PUSH
12994: LD_INT 7
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 8
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13078
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13028: LD_VAR 0 2
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 268
13040: PUSH
13041: LD_INT 15
13043: EQUAL
13044: PUSH
13045: LD_VAR 0 2
13049: PPUSH
13050: LD_INT 2
13052: PPUSH
13053: CALL_OW 268
13057: PUSH
13058: LD_INT 15
13060: EQUAL
13061: OR
13062: IFFALSE 13074
// begin result = true ;
13064: LD_ADDR_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// break ;
13072: GO 13078
// end ; break ;
13074: GO 13078
// end ;
13076: GO 13025
13078: POP
13079: POP
// end ;
13080: LD_VAR 0 1
13084: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
13085: LD_INT 15
13087: PPUSH
13088: LD_INT 1
13090: PPUSH
13091: CALL_OW 321
13095: PUSH
13096: LD_INT 2
13098: EQUAL
13099: PUSH
13100: LD_EXP 9
13104: PPUSH
13105: CALL_OW 302
13109: AND
13110: IFFALSE 13342
13112: GO 13114
13114: DISABLE
// begin DialogueOn ;
13115: CALL_OW 6
// if IsOK ( Denis ) then
13119: LD_EXP 9
13123: PPUSH
13124: CALL_OW 302
13128: IFFALSE 13144
// begin Say ( Denis , DR2-Den-1 ) ;
13130: LD_EXP 9
13134: PPUSH
13135: LD_STRING DR2-Den-1
13137: PPUSH
13138: CALL_OW 88
// end else
13142: GO 13203
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13144: LD_INT 22
13146: PUSH
13147: LD_INT 1
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 21
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 4
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: PUSH
13184: LD_EXP 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: DIFF
13192: PPUSH
13193: LD_STRING DR2-Sci1-1
13195: PPUSH
13196: LD_STRING DR2-FSci1-1
13198: PPUSH
13199: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13203: LD_EXP 1
13207: PPUSH
13208: LD_STRING DR2-JMM-1
13210: PPUSH
13211: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13215: LD_INT 22
13217: PUSH
13218: LD_INT 1
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: LD_INT 25
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 25
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 25
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 25
13270: PUSH
13271: LD_INT 4
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: LIST
13289: PPUSH
13290: CALL_OW 69
13294: PUSH
13295: LD_EXP 1
13299: PUSH
13300: LD_EXP 9
13304: PUSH
13305: LD_EXP 8
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: DIFF
13315: PPUSH
13316: LD_STRING DR2-Sol1-1
13318: PPUSH
13319: LD_STRING DR2-Sol1-11
13321: PPUSH
13322: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13326: LD_EXP 1
13330: PPUSH
13331: LD_STRING DR2-JMM-2
13333: PPUSH
13334: CALL_OW 88
// DialogueOff ;
13338: CALL_OW 7
// end ;
13342: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
13343: LD_INT 22
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 30
13355: PUSH
13356: LD_INT 36
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PPUSH
13367: CALL_OW 69
13371: PUSH
13372: LD_INT 0
13374: EQUAL
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 21
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 33
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: PUSH
13416: LD_INT 0
13418: GREATER
13419: AND
13420: PUSH
13421: LD_EXP 23
13425: PUSH
13426: LD_INT 0
13428: EQUAL
13429: AND
13430: IFFALSE 13556
13432: GO 13434
13434: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13435: LD_INT 22
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 25
13457: PUSH
13458: LD_INT 3
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: PPUSH
13470: CALL_OW 69
13474: PUSH
13475: LD_EXP 1
13479: PUSH
13480: LD_EXP 6
13484: PUSH
13485: LD_EXP 7
13489: PUSH
13490: LD_EXP 9
13494: PUSH
13495: LD_EXP 15
13499: PUSH
13500: LD_EXP 3
13504: PUSH
13505: LD_EXP 4
13509: PUSH
13510: LD_EXP 2
13514: PUSH
13515: LD_EXP 5
13519: PUSH
13520: LD_EXP 8
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: DIFF
13537: PPUSH
13538: LD_STRING D3a-Mech1-1
13540: PPUSH
13541: LD_STRING D3a-Mech1-1
13543: PPUSH
13544: CALL 5256 0 3
// firstTower = 2 ;
13548: LD_ADDR_EXP 23
13552: PUSH
13553: LD_INT 2
13555: ST_TO_ADDR
// end ;
13556: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13557: LD_INT 22
13559: PUSH
13560: LD_INT 3
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: PUSH
13586: LD_INT 0
13588: EQUAL
13589: IFFALSE 13704
13591: GO 13593
13593: DISABLE
13594: LD_INT 0
13596: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13597: LD_ADDR_VAR 0 1
13601: PUSH
13602: LD_INT 22
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 2
13624: PUSH
13625: LD_INT 25
13627: PUSH
13628: LD_INT 1
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 25
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 4
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: LIST
13676: PPUSH
13677: CALL_OW 69
13681: PUSH
13682: FOR_IN
13683: IFFALSE 13702
// AddExperience ( i , 1 , 10000 ) ;
13685: LD_VAR 0 1
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: LD_INT 10000
13695: PPUSH
13696: CALL_OW 492
13700: GO 13682
13702: POP
13703: POP
// end ;
13704: PPOPN 1
13706: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13707: LD_INT 22
13709: PUSH
13710: LD_INT 1
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 30
13719: PUSH
13720: LD_INT 36
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PPUSH
13731: CALL_OW 69
13735: PUSH
13736: LD_INT 0
13738: GREATER
13739: PUSH
13740: LD_INT 22
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 21
13752: PUSH
13753: LD_INT 2
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 33
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: LIST
13774: PPUSH
13775: CALL_OW 69
13779: PUSH
13780: LD_INT 0
13782: GREATER
13783: AND
13784: PUSH
13785: CALL 14367 0 0
13789: AND
13790: IFFALSE 14364
13792: GO 13794
13794: DISABLE
13795: LD_INT 0
13797: PPUSH
13798: PPUSH
13799: PPUSH
13800: PPUSH
13801: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13802: LD_ADDR_VAR 0 3
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 36
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 69
13835: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13836: LD_ADDR_VAR 0 4
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 21
13853: PUSH
13854: LD_INT 2
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 33
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13881: LD_ADDR_VAR 0 5
13885: PUSH
13886: EMPTY
13887: ST_TO_ADDR
// for i in tmpControlTowers do
13888: LD_ADDR_VAR 0 1
13892: PUSH
13893: LD_VAR 0 3
13897: PUSH
13898: FOR_IN
13899: IFFALSE 14362
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13901: LD_EXP 1
13905: PPUSH
13906: CALL_OW 310
13910: PUSH
13911: LD_VAR 0 1
13915: EQUAL
13916: PUSH
13917: LD_EXP 1
13921: PPUSH
13922: CALL_OW 257
13926: PUSH
13927: LD_INT 3
13929: EQUAL
13930: AND
13931: IFFALSE 14061
// begin InGameOn ;
13933: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13937: LD_VAR 0 4
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13950: LD_EXP 1
13954: PPUSH
13955: LD_STRING D4a-JMM-1
13957: PPUSH
13958: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13962: LD_VAR 0 4
13966: PUSH
13967: LD_INT 1
13969: ARRAY
13970: PPUSH
13971: LD_EXP 1
13975: PPUSH
13976: CALL_OW 53
// wait ( 0 0$1 ) ;
13980: LD_INT 35
13982: PPUSH
13983: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13987: LD_VAR 0 4
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 4
14000: PUSH
14001: LD_INT 1
14003: ARRAY
14004: PPUSH
14005: CALL_OW 250
14009: PUSH
14010: LD_INT 3
14012: PLUS
14013: PPUSH
14014: LD_VAR 0 4
14018: PUSH
14019: LD_INT 1
14021: ARRAY
14022: PPUSH
14023: CALL_OW 251
14027: PUSH
14028: LD_INT 2
14030: MINUS
14031: PPUSH
14032: CALL_OW 111
// wait ( 0 0$2 ) ;
14036: LD_INT 70
14038: PPUSH
14039: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14043: LD_EXP 1
14047: PPUSH
14048: LD_STRING D4b-JMM-1
14050: PPUSH
14051: CALL_OW 88
// InGameOff ;
14055: CALL_OW 9
// end else
14059: GO 14360
// begin InGameOn ;
14061: CALL_OW 8
// for j in UnitsInside ( i ) do
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 313
14079: PUSH
14080: FOR_IN
14081: IFFALSE 14116
// if GetClass ( j ) = 3 then
14083: LD_VAR 0 2
14087: PPUSH
14088: CALL_OW 257
14092: PUSH
14093: LD_INT 3
14095: EQUAL
14096: IFFALSE 14114
// tmpMechanicInside = tmpMechanicInside ^ j ;
14098: LD_ADDR_VAR 0 5
14102: PUSH
14103: LD_VAR 0 5
14107: PUSH
14108: LD_VAR 0 2
14112: ADD
14113: ST_TO_ADDR
14114: GO 14080
14116: POP
14117: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14118: LD_VAR 0 5
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: CALL_OW 258
14131: PUSH
14132: LD_INT 1
14134: EQUAL
14135: IFFALSE 14153
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14137: LD_VAR 0 5
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_STRING D4a-Mech1-1
14148: PPUSH
14149: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14153: LD_VAR 0 5
14157: PUSH
14158: LD_INT 1
14160: ARRAY
14161: PPUSH
14162: CALL_OW 258
14166: PUSH
14167: LD_INT 2
14169: EQUAL
14170: IFFALSE 14188
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14172: LD_VAR 0 5
14176: PUSH
14177: LD_INT 1
14179: ARRAY
14180: PPUSH
14181: LD_STRING D4a-FMech1-1
14183: PPUSH
14184: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14188: LD_VAR 0 4
14192: PUSH
14193: LD_INT 1
14195: ARRAY
14196: PPUSH
14197: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14201: LD_VAR 0 4
14205: PUSH
14206: LD_INT 1
14208: ARRAY
14209: PPUSH
14210: LD_VAR 0 5
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PPUSH
14219: CALL_OW 53
// wait ( 0 0$1 ) ;
14223: LD_INT 35
14225: PPUSH
14226: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14230: LD_VAR 0 4
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: LD_VAR 0 4
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: CALL_OW 250
14252: PUSH
14253: LD_INT 3
14255: PLUS
14256: PPUSH
14257: LD_VAR 0 4
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: CALL_OW 251
14270: PUSH
14271: LD_INT 2
14273: MINUS
14274: PPUSH
14275: CALL_OW 111
// wait ( 0 0$2 ) ;
14279: LD_INT 70
14281: PPUSH
14282: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14286: LD_VAR 0 5
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: PPUSH
14295: CALL_OW 258
14299: PUSH
14300: LD_INT 1
14302: EQUAL
14303: IFFALSE 14321
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14305: LD_VAR 0 5
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PPUSH
14314: LD_STRING D4b-Mech1-1
14316: PPUSH
14317: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14321: LD_VAR 0 5
14325: PUSH
14326: LD_INT 1
14328: ARRAY
14329: PPUSH
14330: CALL_OW 258
14334: PUSH
14335: LD_INT 2
14337: EQUAL
14338: IFFALSE 14356
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14340: LD_VAR 0 5
14344: PUSH
14345: LD_INT 1
14347: ARRAY
14348: PPUSH
14349: LD_STRING D4b-FMech1-1
14351: PPUSH
14352: CALL_OW 88
// InGameOff ;
14356: CALL_OW 9
// end ; end ;
14360: GO 13898
14362: POP
14363: POP
// end ;
14364: PPOPN 5
14366: END
// function CheckMehInside ; var i , j ; begin
14367: LD_INT 0
14369: PPUSH
14370: PPUSH
14371: PPUSH
// result = false ;
14372: LD_ADDR_VAR 0 1
14376: PUSH
14377: LD_INT 0
14379: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14380: LD_ADDR_VAR 0 2
14384: PUSH
14385: LD_INT 22
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PPUSH
14409: CALL_OW 69
14413: PUSH
14414: FOR_IN
14415: IFFALSE 14466
// begin for j in UnitsInside ( i ) do
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: CALL_OW 313
14431: PUSH
14432: FOR_IN
14433: IFFALSE 14462
// begin if GetClass ( j ) = 3 then
14435: LD_VAR 0 3
14439: PPUSH
14440: CALL_OW 257
14444: PUSH
14445: LD_INT 3
14447: EQUAL
14448: IFFALSE 14460
// begin result = true ;
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// break ;
14458: GO 14462
// end ; end ;
14460: GO 14432
14462: POP
14463: POP
// end ;
14464: GO 14414
14466: POP
14467: POP
// end ;
14468: LD_VAR 0 1
14472: RET
// every 25 25$0 do
14473: GO 14475
14475: DISABLE
// begin PrepareKurt ;
14476: CALL 17928 0 0
// end ;
14480: END
// every 35 35$0 do
14481: GO 14483
14483: DISABLE
// begin PrepareJoan ;
14484: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14488: LD_INT 2100
14490: PPUSH
14491: CALL_OW 67
// if IsOK ( Lisa ) then
14495: LD_EXP 2
14499: PPUSH
14500: CALL_OW 302
14504: IFFALSE 14634
// begin DialogueOn ;
14506: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14510: LD_EXP 2
14514: PPUSH
14515: LD_STRING D7-Lisa-1
14517: PPUSH
14518: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14522: LD_EXP 1
14526: PPUSH
14527: LD_STRING D7-JMM-1
14529: PPUSH
14530: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14534: LD_EXP 2
14538: PPUSH
14539: LD_STRING D7-Lisa-2
14541: PPUSH
14542: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14546: LD_EXP 1
14550: PPUSH
14551: LD_STRING D7-JMM-2
14553: PPUSH
14554: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14558: LD_EXP 2
14562: PPUSH
14563: LD_STRING D7-Lisa-3
14565: PPUSH
14566: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14570: LD_EXP 1
14574: PPUSH
14575: LD_STRING D7-JMM-3
14577: PPUSH
14578: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14582: LD_EXP 2
14586: PPUSH
14587: LD_STRING D7-Lisa-4
14589: PPUSH
14590: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14594: LD_EXP 1
14598: PPUSH
14599: LD_STRING D7-JMM-4
14601: PPUSH
14602: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14606: LD_EXP 1
14610: PPUSH
14611: LD_STRING D7-JMM-4a
14613: PPUSH
14614: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14618: LD_EXP 2
14622: PPUSH
14623: LD_STRING D7-Lisa-5
14625: PPUSH
14626: CALL_OW 88
// DialogueOff ;
14630: CALL_OW 7
// end ; end ;
14634: END
// every 0 0$1 do var i , others ;
14635: GO 14637
14637: DISABLE
14638: LD_INT 0
14640: PPUSH
14641: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_INT 22
14649: PUSH
14650: LD_INT 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 1
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: LD_INT 25
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 25
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 25
14692: PUSH
14693: LD_INT 3
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 25
14702: PUSH
14703: LD_INT 4
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PPUSH
14722: CALL_OW 69
14726: PUSH
14727: LD_EXP 13
14731: PUSH
14732: EMPTY
14733: LIST
14734: DIFF
14735: ST_TO_ADDR
// for i in others do
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 2
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14784
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14749: LD_EXP 13
14753: PPUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 296
14763: PUSH
14764: LD_INT 6
14766: LESS
14767: IFFALSE 14782
// begin disable ;
14769: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14770: LD_EXP 13
14774: PPUSH
14775: LD_STRING D5-Sol1-1
14777: PPUSH
14778: CALL_OW 88
// end ; end ;
14782: GO 14746
14784: POP
14785: POP
// end ;
14786: PPOPN 2
14788: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14789: LD_INT 22
14791: PUSH
14792: LD_INT 1
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 33
14801: PUSH
14802: LD_INT 2
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PPUSH
14813: CALL_OW 69
14817: PUSH
14818: LD_INT 2
14820: GREATEREQUAL
14821: IFFALSE 14841
14823: GO 14825
14825: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14826: LD_STRING MRa
14828: PPUSH
14829: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14833: LD_ADDR_EXP 28
14837: PUSH
14838: LD_INT 1
14840: ST_TO_ADDR
// end ;
14841: END
// every 4 4$0 do
14842: GO 14844
14844: DISABLE
// PrepareRandoms ( 1 ) ;
14845: LD_INT 1
14847: PPUSH
14848: CALL 3692 0 1
14852: END
// every 10 10$0 do
14853: GO 14855
14855: DISABLE
// PrepareRandoms ( 2 ) ;
14856: LD_INT 2
14858: PPUSH
14859: CALL 3692 0 1
14863: END
// every 28 28$0 do
14864: GO 14866
14866: DISABLE
// PrepareRandoms ( 4 ) ;
14867: LD_INT 4
14869: PPUSH
14870: CALL 3692 0 1
14874: END
// every 32 32$0 do
14875: GO 14877
14877: DISABLE
// PrepareRandoms ( 5 ) ;
14878: LD_INT 5
14880: PPUSH
14881: CALL 3692 0 1
14885: END
// every 35 35$30 do
14886: GO 14888
14888: DISABLE
// PrepareRandoms ( 6 ) ;
14889: LD_INT 6
14891: PPUSH
14892: CALL 3692 0 1
14896: END
// every 37 37$20 do
14897: GO 14899
14899: DISABLE
// PrepareRandoms ( 7 ) ;
14900: LD_INT 7
14902: PPUSH
14903: CALL 3692 0 1
14907: END
// every 5 5$20 do
14908: GO 14910
14910: DISABLE
// begin DialogueOn ;
14911: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14915: LD_EXP 10
14919: PPUSH
14920: LD_STRING D12a-Sci-1
14922: PPUSH
14923: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14927: LD_EXP 1
14931: PPUSH
14932: LD_STRING D12a-JMM-1
14934: PPUSH
14935: CALL_OW 88
// DialogueOff ;
14939: CALL_OW 7
// cratesStatus = 1 ;
14943: LD_ADDR_EXP 38
14947: PUSH
14948: LD_INT 1
14950: ST_TO_ADDR
// end ;
14951: END
// every 13 13$0 do
14952: GO 14954
14954: DISABLE
// begin DialogueOn ;
14955: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14959: LD_EXP 10
14963: PPUSH
14964: LD_STRING D12b-Sci-1
14966: PPUSH
14967: CALL_OW 94
// DialogueOff ;
14971: CALL_OW 7
// cratesStatus = 2 ;
14975: LD_ADDR_EXP 38
14979: PUSH
14980: LD_INT 2
14982: ST_TO_ADDR
// end ;
14983: END
// every 32 32$0 do
14984: GO 14986
14986: DISABLE
// begin DialogueOn ;
14987: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14991: LD_EXP 10
14995: PPUSH
14996: LD_STRING D12c-Sci-1
14998: PPUSH
14999: CALL_OW 94
// DialogueOff ;
15003: CALL_OW 7
// wait ( 3 3$0 ) ;
15007: LD_INT 6300
15009: PPUSH
15010: CALL_OW 67
// DialogueOn ;
15014: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15018: LD_EXP 10
15022: PPUSH
15023: LD_STRING D12d-Sci-1
15025: PPUSH
15026: CALL_OW 94
// DialogueOff ;
15030: CALL_OW 7
// cratesStatus = 1 ;
15034: LD_ADDR_EXP 38
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// end ;
15042: END
// every 42 42$0 do
15043: GO 15045
15045: DISABLE
// begin DialogueOn ;
15046: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15050: LD_EXP 10
15054: PPUSH
15055: LD_STRING D12e-Sci-1
15057: PPUSH
15058: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15062: LD_EXP 1
15066: PPUSH
15067: LD_STRING D12e-JMM-1
15069: PPUSH
15070: CALL_OW 88
// DialogueOff ;
15074: CALL_OW 7
// cratesStatus = 2 ;
15078: LD_ADDR_EXP 38
15082: PUSH
15083: LD_INT 2
15085: ST_TO_ADDR
// end ;
15086: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15087: LD_INT 22
15089: PUSH
15090: LD_INT 6
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 21
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 34
15109: PUSH
15110: LD_INT 51
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: PPUSH
15122: CALL_OW 69
15126: PUSH
15127: LD_INT 0
15129: GREATER
15130: IFFALSE 15213
15132: GO 15134
15134: DISABLE
15135: LD_INT 0
15137: PPUSH
// begin enable ;
15138: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15139: LD_ADDR_VAR 0 1
15143: PUSH
15144: LD_INT 22
15146: PUSH
15147: LD_INT 6
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 2
15156: PUSH
15157: LD_INT 21
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 21
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: PPUSH
15186: CALL_OW 69
15190: PUSH
15191: FOR_IN
15192: IFFALSE 15211
// ComAgressiveMove ( i , 138 , 168 ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_INT 138
15201: PPUSH
15202: LD_INT 168
15204: PPUSH
15205: CALL_OW 114
15209: GO 15191
15211: POP
15212: POP
// end ;
15213: PPOPN 1
15215: END
// every 0 0$1 do var i ;
15216: GO 15218
15218: DISABLE
15219: LD_INT 0
15221: PPUSH
// begin enable ;
15222: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15223: LD_ADDR_VAR 0 1
15227: PUSH
15228: LD_INT 5
15230: PPUSH
15231: LD_INT 2
15233: PUSH
15234: LD_INT 22
15236: PUSH
15237: LD_INT 3
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 22
15246: PUSH
15247: LD_INT 6
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: PPUSH
15262: CALL_OW 70
15266: PUSH
15267: FOR_IN
15268: IFFALSE 15332
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
15270: LD_INT 5
15272: PPUSH
15273: LD_INT 22
15275: PUSH
15276: LD_INT 6
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 34
15285: PUSH
15286: LD_INT 51
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 70
15301: PUSH
15302: LD_INT 0
15304: GREATER
15305: IFFALSE 15321
// sendedConvoys = sendedConvoys + 1 ;
15307: LD_ADDR_EXP 39
15311: PUSH
15312: LD_EXP 39
15316: PUSH
15317: LD_INT 1
15319: PLUS
15320: ST_TO_ADDR
// RemoveUnit ( i ) ;
15321: LD_VAR 0 1
15325: PPUSH
15326: CALL_OW 64
// end ;
15330: GO 15267
15332: POP
15333: POP
// end ; end_of_file
15334: PPOPN 1
15336: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15337: LD_VAR 0 1
15341: PUSH
15342: LD_INT 1
15344: EQUAL
15345: PUSH
15346: LD_VAR 0 2
15350: PUSH
15351: LD_INT 3
15353: EQUAL
15354: AND
15355: IFFALSE 15365
// contactWithRussian = 1 ;
15357: LD_ADDR_EXP 22
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// end ;
15365: PPOPN 2
15367: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15368: LD_VAR 0 1
15372: PPUSH
15373: CALL_OW 266
15377: PUSH
15378: LD_INT 36
15380: EQUAL
15381: PUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 255
15391: PUSH
15392: LD_INT 1
15394: EQUAL
15395: AND
15396: PUSH
15397: LD_INT 22
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 21
15409: PUSH
15410: LD_INT 2
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 33
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: PPUSH
15432: CALL_OW 69
15436: PUSH
15437: LD_INT 0
15439: EQUAL
15440: AND
15441: PUSH
15442: LD_EXP 23
15446: PUSH
15447: LD_INT 0
15449: EQUAL
15450: AND
15451: IFFALSE 15531
// begin firstTower = 1 ;
15453: LD_ADDR_EXP 23
15457: PUSH
15458: LD_INT 1
15460: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15461: LD_INT 22
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 21
15473: PUSH
15474: LD_INT 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 25
15483: PUSH
15484: LD_INT 3
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 26
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: LD_EXP 1
15516: PUSH
15517: EMPTY
15518: LIST
15519: DIFF
15520: PPUSH
15521: LD_STRING D3b-Mech1-1
15523: PPUSH
15524: LD_STRING D3b-Mech1-1
15526: PPUSH
15527: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 266
15540: PUSH
15541: LD_INT 0
15543: EQUAL
15544: PUSH
15545: LD_VAR 0 1
15549: PPUSH
15550: CALL_OW 255
15554: PUSH
15555: LD_INT 1
15557: EQUAL
15558: AND
15559: IFFALSE 15573
// SetBName ( building , theta ) ;
15561: LD_VAR 0 1
15565: PPUSH
15566: LD_STRING theta
15568: PPUSH
15569: CALL_OW 500
// if GetSide ( building ) = 3 then
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 255
15582: PUSH
15583: LD_INT 3
15585: EQUAL
15586: IFFALSE 15660
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15588: LD_ADDR_EXP 31
15592: PUSH
15593: LD_EXP 31
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 3
15605: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15606: LD_ADDR_EXP 31
15610: PUSH
15611: LD_EXP 31
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 3
15623: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15624: LD_ADDR_EXP 31
15628: PUSH
15629: LD_EXP 31
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 3
15641: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15642: LD_ADDR_EXP 31
15646: PUSH
15647: LD_EXP 31
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 3
15659: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15660: LD_VAR 0 1
15664: PPUSH
15665: CALL_OW 255
15669: PUSH
15670: LD_INT 3
15672: EQUAL
15673: PUSH
15674: LD_VAR 0 1
15678: PPUSH
15679: CALL_OW 266
15683: PUSH
15684: LD_INT 0
15686: EQUAL
15687: PUSH
15688: LD_VAR 0 1
15692: PPUSH
15693: CALL_OW 266
15697: PUSH
15698: LD_INT 2
15700: EQUAL
15701: OR
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 266
15712: PUSH
15713: LD_INT 4
15715: EQUAL
15716: OR
15717: PUSH
15718: EMPTY
15719: LIST
15720: AND
15721: IFFALSE 15732
// ComUpgrade ( building ) ;
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 255
15741: PUSH
15742: LD_INT 3
15744: EQUAL
15745: PUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 266
15755: PUSH
15756: LD_INT 32
15758: EQUAL
15759: AND
15760: IFFALSE 15801
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15762: LD_VAR 0 1
15766: PPUSH
15767: LD_INT 42
15769: PUSH
15770: LD_INT 43
15772: PUSH
15773: LD_INT 44
15775: PUSH
15776: LD_INT 46
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 1
15787: PPUSH
15788: LD_INT 4
15790: PPUSH
15791: CALL_OW 12
15795: ARRAY
15796: PPUSH
15797: CALL_OW 208
// end ; end ;
15801: PPOPN 1
15803: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
15804: LD_VAR 0 1
15808: PUSH
15809: LD_EXP 15
15813: EQUAL
15814: IFFALSE 15824
// JoanStatus = 0 ;
15816: LD_ADDR_EXP 16
15820: PUSH
15821: LD_INT 0
15823: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15824: LD_VAR 0 1
15828: PPUSH
15829: CALL_OW 255
15833: PUSH
15834: LD_INT 1
15836: EQUAL
15837: PUSH
15838: LD_VAR 0 1
15842: PPUSH
15843: CALL_OW 247
15847: PUSH
15848: LD_INT 1
15850: EQUAL
15851: AND
15852: IFFALSE 15928
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 257
15863: PUSH
15864: LD_INT 1
15866: EQUAL
15867: PUSH
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 257
15877: PUSH
15878: LD_INT 2
15880: EQUAL
15881: OR
15882: PUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 257
15892: PUSH
15893: LD_INT 3
15895: EQUAL
15896: OR
15897: PUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 257
15907: PUSH
15908: LD_INT 4
15910: EQUAL
15911: OR
15912: IFFALSE 15928
// unitLost = unitLost + 1 ;
15914: LD_ADDR_EXP 30
15918: PUSH
15919: LD_EXP 30
15923: PUSH
15924: LD_INT 1
15926: PLUS
15927: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 255
15937: PUSH
15938: LD_INT 3
15940: EQUAL
15941: PUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 247
15951: PUSH
15952: LD_INT 3
15954: EQUAL
15955: AND
15956: IFFALSE 16648
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15958: LD_VAR 0 1
15962: PPUSH
15963: CALL_OW 266
15967: PUSH
15968: LD_INT 31
15970: EQUAL
15971: PUSH
15972: LD_VAR 0 1
15976: PPUSH
15977: CALL_OW 266
15981: PUSH
15982: LD_INT 32
15984: EQUAL
15985: OR
15986: PUSH
15987: LD_VAR 0 1
15991: PPUSH
15992: CALL_OW 266
15996: PUSH
15997: LD_INT 36
15999: EQUAL
16000: OR
16001: PUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 266
16011: PUSH
16012: LD_INT 0
16014: EQUAL
16015: OR
16016: PUSH
16017: LD_VAR 0 1
16021: PPUSH
16022: CALL_OW 266
16026: PUSH
16027: LD_INT 24
16029: EQUAL
16030: OR
16031: PUSH
16032: LD_VAR 0 1
16036: PPUSH
16037: CALL_OW 266
16041: PUSH
16042: LD_INT 17
16044: EQUAL
16045: OR
16046: PUSH
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 266
16056: PUSH
16057: LD_INT 25
16059: EQUAL
16060: OR
16061: PUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 266
16071: PUSH
16072: LD_INT 19
16074: EQUAL
16075: OR
16076: PUSH
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 266
16086: PUSH
16087: LD_INT 20
16089: EQUAL
16090: OR
16091: PUSH
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 266
16101: PUSH
16102: LD_INT 18
16104: EQUAL
16105: OR
16106: PUSH
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 21
16119: EQUAL
16120: OR
16121: PUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 266
16131: PUSH
16132: LD_INT 23
16134: EQUAL
16135: OR
16136: PUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 266
16146: PUSH
16147: LD_INT 16
16149: EQUAL
16150: OR
16151: PUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 266
16161: PUSH
16162: LD_INT 6
16164: EQUAL
16165: OR
16166: PUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 266
16176: PUSH
16177: LD_INT 29
16179: EQUAL
16180: OR
16181: PUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 266
16191: PUSH
16192: LD_INT 26
16194: EQUAL
16195: OR
16196: PUSH
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 266
16206: PUSH
16207: LD_INT 30
16209: EQUAL
16210: OR
16211: PUSH
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 266
16221: PUSH
16222: LD_INT 28
16224: EQUAL
16225: OR
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 266
16236: PUSH
16237: LD_INT 27
16239: EQUAL
16240: OR
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 266
16251: PUSH
16252: LD_INT 33
16254: EQUAL
16255: OR
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 266
16266: PUSH
16267: LD_INT 2
16269: EQUAL
16270: OR
16271: PUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 266
16281: PUSH
16282: LD_INT 4
16284: EQUAL
16285: OR
16286: IFFALSE 16372
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
16288: LD_ADDR_EXP 31
16292: PUSH
16293: LD_EXP 31
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 266
16307: ADD
16308: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16309: LD_ADDR_EXP 31
16313: PUSH
16314: LD_EXP 31
16318: PUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 250
16328: ADD
16329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16330: LD_ADDR_EXP 31
16334: PUSH
16335: LD_EXP 31
16339: PUSH
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 251
16349: ADD
16350: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16351: LD_ADDR_EXP 31
16355: PUSH
16356: LD_EXP 31
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 254
16370: ADD
16371: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 266
16381: PUSH
16382: LD_INT 1
16384: EQUAL
16385: IFFALSE 16464
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16387: LD_ADDR_EXP 31
16391: PUSH
16392: LD_EXP 31
16396: PUSH
16397: LD_INT 0
16399: ADD
16400: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16401: LD_ADDR_EXP 31
16405: PUSH
16406: LD_EXP 31
16410: PUSH
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 250
16420: ADD
16421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16422: LD_ADDR_EXP 31
16426: PUSH
16427: LD_EXP 31
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 251
16441: ADD
16442: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16443: LD_ADDR_EXP 31
16447: PUSH
16448: LD_EXP 31
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 254
16462: ADD
16463: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16464: LD_VAR 0 1
16468: PPUSH
16469: CALL_OW 266
16473: PUSH
16474: LD_INT 3
16476: EQUAL
16477: IFFALSE 16556
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16479: LD_ADDR_EXP 31
16483: PUSH
16484: LD_EXP 31
16488: PUSH
16489: LD_INT 2
16491: ADD
16492: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16493: LD_ADDR_EXP 31
16497: PUSH
16498: LD_EXP 31
16502: PUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 250
16512: ADD
16513: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16514: LD_ADDR_EXP 31
16518: PUSH
16519: LD_EXP 31
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 251
16533: ADD
16534: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16535: LD_ADDR_EXP 31
16539: PUSH
16540: LD_EXP 31
16544: PUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 254
16554: ADD
16555: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16556: LD_VAR 0 1
16560: PPUSH
16561: CALL_OW 266
16565: PUSH
16566: LD_INT 5
16568: EQUAL
16569: IFFALSE 16648
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16571: LD_ADDR_EXP 31
16575: PUSH
16576: LD_EXP 31
16580: PUSH
16581: LD_INT 4
16583: ADD
16584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16585: LD_ADDR_EXP 31
16589: PUSH
16590: LD_EXP 31
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 250
16604: ADD
16605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16606: LD_ADDR_EXP 31
16610: PUSH
16611: LD_EXP 31
16615: PUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 251
16625: ADD
16626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16627: LD_ADDR_EXP 31
16631: PUSH
16632: LD_EXP 31
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 254
16646: ADD
16647: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 257
16657: PUSH
16658: LD_INT 3
16660: EQUAL
16661: PUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: CALL_OW 255
16671: PUSH
16672: LD_INT 3
16674: EQUAL
16675: AND
16676: PUSH
16677: LD_INT 21
16679: PPUSH
16680: CALL_OW 302
16684: AND
16685: PUSH
16686: LD_INT 21
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 3
16696: EQUAL
16697: AND
16698: IFFALSE 16766
// begin uc_side = 3 ;
16700: LD_ADDR_OWVAR 20
16704: PUSH
16705: LD_INT 3
16707: ST_TO_ADDR
// uc_nation = 3 ;
16708: LD_ADDR_OWVAR 21
16712: PUSH
16713: LD_INT 3
16715: ST_TO_ADDR
// hc_gallery :=  ;
16716: LD_ADDR_OWVAR 33
16720: PUSH
16721: LD_STRING 
16723: ST_TO_ADDR
// hc_name :=  ;
16724: LD_ADDR_OWVAR 26
16728: PUSH
16729: LD_STRING 
16731: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16732: LD_INT 0
16734: PPUSH
16735: LD_EXP 34
16739: PPUSH
16740: LD_EXP 35
16744: PPUSH
16745: CALL_OW 12
16749: PPUSH
16750: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16754: CALL_OW 44
16758: PPUSH
16759: LD_INT 21
16761: PPUSH
16762: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16766: LD_VAR 0 1
16770: PPUSH
16771: CALL_OW 255
16775: PUSH
16776: LD_INT 3
16778: EQUAL
16779: PUSH
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 264
16789: PUSH
16790: LD_INT 52
16792: EQUAL
16793: AND
16794: PUSH
16795: LD_INT 21
16797: PPUSH
16798: CALL_OW 302
16802: AND
16803: PUSH
16804: LD_INT 21
16806: PPUSH
16807: CALL_OW 255
16811: PUSH
16812: LD_INT 3
16814: EQUAL
16815: AND
16816: IFFALSE 16837
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
16818: LD_INT 21
16820: PPUSH
16821: LD_INT 22
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 52
16832: PPUSH
16833: CALL_OW 125
// end ;
16837: PPOPN 1
16839: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
16844: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16845: LD_VAR 0 1
16849: PPUSH
16850: CALL_OW 264
16854: PUSH
16855: LD_INT 51
16857: EQUAL
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 255
16868: PUSH
16869: LD_INT 3
16871: EQUAL
16872: AND
16873: IFFALSE 16935
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16875: LD_ADDR_VAR 0 5
16879: PUSH
16880: LD_INT 2
16882: PPUSH
16883: CALL_OW 274
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 275
16895: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16896: LD_INT 2
16898: PPUSH
16899: CALL_OW 274
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_VAR 0 5
16911: PUSH
16912: LD_INT 100
16914: MINUS
16915: PPUSH
16916: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: LD_INT 100
16930: PPUSH
16931: CALL_OW 291
// end ; if building = rufabsupp then
16935: LD_VAR 0 2
16939: PUSH
16940: LD_INT 17
16942: EQUAL
16943: IFFALSE 16957
// SetSide ( vehicle , 6 ) ;
16945: LD_VAR 0 1
16949: PPUSH
16950: LD_INT 6
16952: PPUSH
16953: CALL_OW 235
// end ;
16957: PPOPN 5
16959: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 255
16969: PUSH
16970: LD_INT 3
16972: EQUAL
16973: IFFALSE 17004
// begin tamedApemans = tamedApemans + 1 ;
16975: LD_ADDR_EXP 32
16979: PUSH
16980: LD_EXP 32
16984: PUSH
16985: LD_INT 1
16987: PLUS
16988: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_INT 106
16996: PPUSH
16997: LD_INT 85
16999: PPUSH
17000: CALL_OW 111
// end ; end ;
17004: PPOPN 2
17006: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17007: LD_INT 0
17009: PPUSH
17010: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 255
17020: PUSH
17021: LD_INT 3
17023: EQUAL
17024: PUSH
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL_OW 247
17034: PUSH
17035: LD_INT 2
17037: EQUAL
17038: AND
17039: IFFALSE 17148
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17041: LD_VAR 0 1
17045: PPUSH
17046: CALL_OW 264
17050: PUSH
17051: LD_INT 42
17053: EQUAL
17054: PUSH
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 264
17064: PUSH
17065: LD_INT 43
17067: EQUAL
17068: OR
17069: PUSH
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 264
17079: PUSH
17080: LD_INT 44
17082: EQUAL
17083: OR
17084: PUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 264
17094: PUSH
17095: LD_INT 46
17097: EQUAL
17098: OR
17099: IFFALSE 17148
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17101: LD_INT 21
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: CALL_OW 265
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 262
17123: PPUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 263
17133: PPUSH
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 264
17143: PPUSH
17144: CALL_OW 185
// end ;
17148: PPOPN 3
17150: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 255
17160: PUSH
17161: LD_INT 3
17163: EQUAL
17164: PUSH
17165: LD_VAR 0 2
17169: PPUSH
17170: CALL_OW 255
17174: PUSH
17175: LD_INT 3
17177: EQUAL
17178: AND
17179: PUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 302
17189: AND
17190: IFFALSE 17232
// begin ComRepairVehicle ( human , vehicle ) ;
17192: LD_VAR 0 2
17196: PPUSH
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17206: LD_VAR 0 2
17210: PPUSH
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_INT 100
17227: PPUSH
17228: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17232: LD_VAR 0 1
17236: PPUSH
17237: CALL_OW 255
17241: PUSH
17242: LD_INT 3
17244: EQUAL
17245: PUSH
17246: LD_VAR 0 2
17250: PPUSH
17251: CALL_OW 255
17255: PUSH
17256: LD_INT 3
17258: EQUAL
17259: AND
17260: PUSH
17261: LD_INT 21
17263: PPUSH
17264: CALL_OW 302
17268: AND
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 302
17279: NOT
17280: AND
17281: IFFALSE 17295
// ComEnterUnit ( human , rufab ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_INT 21
17290: PPUSH
17291: CALL_OW 120
// end ;
17295: PPOPN 2
17297: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
17298: LD_VAR 0 1
17302: PUSH
17303: LD_INT 21
17305: EQUAL
17306: PUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: CALL_OW 255
17316: PUSH
17317: LD_INT 3
17319: EQUAL
17320: AND
17321: IFFALSE 17335
// SetLives ( human , 1000 ) ;
17323: LD_VAR 0 2
17327: PPUSH
17328: LD_INT 1000
17330: PPUSH
17331: CALL_OW 234
// end ;
17335: PPOPN 2
17337: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
17338: LD_EXP 41
17342: NOT
17343: IFFALSE 17353
// firstCrateSpawn := true ;
17345: LD_ADDR_EXP 41
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// end ; end_of_file
17353: PPOPN 5
17355: END
// every 0 0$30 trigger cratesStatus = 1 do
17356: LD_EXP 38
17360: PUSH
17361: LD_INT 1
17363: EQUAL
17364: IFFALSE 17428
17366: GO 17368
17368: DISABLE
// begin enable ;
17369: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
17370: LD_INT 350
17372: PUSH
17373: LD_INT 1050
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 1
17382: PPUSH
17383: LD_INT 2
17385: PPUSH
17386: CALL_OW 12
17390: ARRAY
17391: PPUSH
17392: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17396: LD_INT 4
17398: PUSH
17399: LD_INT 5
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 1
17408: PPUSH
17409: LD_INT 2
17411: PPUSH
17412: CALL_OW 12
17416: ARRAY
17417: PPUSH
17418: LD_INT 7
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 55
// end ;
17428: END
// every 1 1$0 trigger cratesStatus = 2 do
17429: LD_EXP 38
17433: PUSH
17434: LD_INT 2
17436: EQUAL
17437: IFFALSE 17501
17439: GO 17441
17441: DISABLE
// begin enable ;
17442: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17443: LD_INT 3150
17445: PUSH
17446: LD_INT 4550
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_INT 2
17458: PPUSH
17459: CALL_OW 12
17463: ARRAY
17464: PPUSH
17465: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17469: LD_INT 2
17471: PUSH
17472: LD_INT 5
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 2
17484: PPUSH
17485: CALL_OW 12
17489: ARRAY
17490: PPUSH
17491: LD_INT 8
17493: PPUSH
17494: LD_INT 1
17496: PPUSH
17497: CALL_OW 55
// end ;
17501: END
// every 0 0$30 + 0 0$10 do
17502: GO 17504
17504: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17505: LD_INT 4
17507: PUSH
17508: LD_INT 5
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: PPUSH
17527: LD_INT 8
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 55
// Wait ( 0 0$15 ) ;
17537: LD_INT 525
17539: PPUSH
17540: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17544: LD_INT 4
17546: PUSH
17547: LD_INT 5
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 1
17556: PPUSH
17557: LD_INT 2
17559: PPUSH
17560: CALL_OW 12
17564: ARRAY
17565: PPUSH
17566: LD_INT 8
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: CALL_OW 55
// Wait ( 0 0$20 ) ;
17576: LD_INT 700
17578: PPUSH
17579: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17583: LD_INT 4
17585: PUSH
17586: LD_INT 5
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 2
17598: PPUSH
17599: CALL_OW 12
17603: ARRAY
17604: PPUSH
17605: LD_INT 8
17607: PPUSH
17608: LD_INT 1
17610: PPUSH
17611: CALL_OW 55
// end ; end_of_file
17615: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17616: LD_EXP 24
17620: PUSH
17621: LD_INT 1
17623: EQUAL
17624: IFFALSE 17925
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
17632: PPUSH
17633: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_INT 22
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 3
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 2
17661: PUSH
17662: LD_INT 30
17664: PUSH
17665: LD_INT 0
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: PUSH
17672: LD_INT 30
17674: PUSH
17675: LD_INT 1
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: ST_TO_ADDR
// for i in tmp do
17697: LD_ADDR_VAR 0 1
17701: PUSH
17702: LD_VAR 0 2
17706: PUSH
17707: FOR_IN
17708: IFFALSE 17741
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17710: LD_ADDR_VAR 0 3
17714: PUSH
17715: LD_VAR 0 3
17719: PUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 274
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 275
17737: PLUS
17738: ST_TO_ADDR
17739: GO 17707
17741: POP
17742: POP
// strings = [ ] ;
17743: LD_ADDR_EXP 27
17747: PUSH
17748: EMPTY
17749: ST_TO_ADDR
// if tmp = 0 then
17750: LD_VAR 0 2
17754: PUSH
17755: LD_INT 0
17757: EQUAL
17758: IFFALSE 17783
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17760: LD_ADDR_EXP 27
17764: PUSH
17765: LD_EXP 27
17769: PUSH
17770: LD_STRING #Am06-1
17772: PUSH
17773: LD_EXP 25
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: ADD
17782: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17783: LD_VAR 0 2
17787: PUSH
17788: LD_INT 0
17790: GREATER
17791: PUSH
17792: LD_EXP 25
17796: PUSH
17797: LD_VAR 0 3
17801: GREATER
17802: AND
17803: IFFALSE 17834
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17805: LD_ADDR_EXP 27
17809: PUSH
17810: LD_EXP 27
17814: PUSH
17815: LD_STRING #Am06-1
17817: PUSH
17818: LD_EXP 25
17822: PUSH
17823: LD_VAR 0 3
17827: MINUS
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: ADD
17833: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17834: LD_VAR 0 2
17838: PUSH
17839: LD_INT 0
17841: GREATER
17842: PUSH
17843: LD_EXP 25
17847: PUSH
17848: LD_VAR 0 3
17852: LESSEQUAL
17853: AND
17854: IFFALSE 17877
// strings = strings ^ [ #Am06-1 , 0 ] ;
17856: LD_ADDR_EXP 27
17860: PUSH
17861: LD_EXP 27
17865: PUSH
17866: LD_STRING #Am06-1
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: ADD
17876: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17877: LD_ADDR_EXP 26
17881: PUSH
17882: LD_EXP 26
17886: PUSH
17887: LD_INT 35
17889: MINUS
17890: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17891: LD_ADDR_EXP 27
17895: PUSH
17896: LD_EXP 27
17900: PUSH
17901: LD_STRING #Am06-2
17903: PUSH
17904: LD_EXP 26
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: ADD
17913: ST_TO_ADDR
// display_strings = strings ;
17914: LD_ADDR_OWVAR 47
17918: PUSH
17919: LD_EXP 27
17923: ST_TO_ADDR
// enable ;
17924: ENABLE
// end ; end_of_file
17925: PPOPN 3
17927: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17928: LD_INT 0
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
// j = 0 ;
17937: LD_ADDR_VAR 0 3
17941: PUSH
17942: LD_INT 0
17944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17945: LD_INT 35
17947: PPUSH
17948: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 21
17969: PUSH
17970: LD_INT 1
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 2
17979: PUSH
17980: LD_INT 25
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 25
17992: PUSH
17993: LD_INT 2
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 25
18002: PUSH
18003: LD_INT 3
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 25
18012: PUSH
18013: LD_INT 4
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: PPUSH
18032: CALL_OW 69
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18144
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18040: LD_INT 22
18042: PUSH
18043: LD_INT 3
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: LD_INT 21
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 21
18075: PUSH
18076: LD_INT 3
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 59
18085: PUSH
18086: EMPTY
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 91
18098: PUSH
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 25
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: PPUSH
18117: CALL_OW 69
18121: NOT
18122: IFFALSE 18142
// begin tmp = i ;
18124: LD_ADDR_VAR 0 4
18128: PUSH
18129: LD_VAR 0 2
18133: ST_TO_ADDR
// j = 1 ;
18134: LD_ADDR_VAR 0 3
18138: PUSH
18139: LD_INT 1
18141: ST_TO_ADDR
// end ; end ;
18142: GO 18037
18144: POP
18145: POP
// until j = 1 ;
18146: LD_VAR 0 3
18150: PUSH
18151: LD_INT 1
18153: EQUAL
18154: IFFALSE 17945
// blockSpawn = 1 ;
18156: LD_ADDR_EXP 29
18160: PUSH
18161: LD_INT 1
18163: ST_TO_ADDR
// uc_side = 2 ;
18164: LD_ADDR_OWVAR 20
18168: PUSH
18169: LD_INT 2
18171: ST_TO_ADDR
// uc_nation = 2 ;
18172: LD_ADDR_OWVAR 21
18176: PUSH
18177: LD_INT 2
18179: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18180: LD_ADDR_EXP 19
18184: PUSH
18185: LD_STRING Kurt
18187: PPUSH
18188: LD_INT 0
18190: PPUSH
18191: CALL 5193 0 2
18195: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18196: LD_EXP 19
18200: PPUSH
18201: LD_VAR 0 4
18205: PPUSH
18206: CALL_OW 250
18210: PPUSH
18211: LD_VAR 0 4
18215: PPUSH
18216: CALL_OW 251
18220: PPUSH
18221: LD_INT 5
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 50
// InGameOn ;
18231: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18235: LD_EXP 19
18239: PPUSH
18240: CALL_OW 87
// wait ( 0 0$2 ) ;
18244: LD_INT 70
18246: PPUSH
18247: CALL_OW 67
// ComExitVehicle ( tmp ) ;
18251: LD_VAR 0 4
18255: PPUSH
18256: CALL_OW 121
// ComExitBuilding ( tmp ) ;
18260: LD_VAR 0 4
18264: PPUSH
18265: CALL_OW 122
// wait ( 0 0$1 ) ;
18269: LD_INT 35
18271: PPUSH
18272: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
18276: LD_EXP 19
18280: PPUSH
18281: LD_VAR 0 4
18285: PPUSH
18286: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_EXP 19
18299: PPUSH
18300: CALL_OW 119
// DialogueOn ;
18304: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
18308: LD_EXP 19
18312: PPUSH
18313: LD_STRING D2-Kurt-1
18315: PPUSH
18316: CALL_OW 88
// if tmp = JMM then
18320: LD_VAR 0 4
18324: PUSH
18325: LD_EXP 1
18329: EQUAL
18330: IFFALSE 18422
// begin Say ( JMM , D2-JMM-1 ) ;
18332: LD_EXP 1
18336: PPUSH
18337: LD_STRING D2-JMM-1
18339: PPUSH
18340: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18344: LD_EXP 19
18348: PPUSH
18349: LD_STRING D2-Kurt-2
18351: PPUSH
18352: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
18356: LD_EXP 1
18360: PPUSH
18361: LD_STRING D2-JMM-2
18363: PPUSH
18364: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18368: LD_EXP 19
18372: PPUSH
18373: LD_STRING D2-Kurt-3
18375: PPUSH
18376: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
18380: LD_EXP 1
18384: PPUSH
18385: LD_STRING D2-JMM-3
18387: PPUSH
18388: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18392: LD_EXP 19
18396: PPUSH
18397: LD_STRING D2-Kurt-4
18399: PPUSH
18400: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18404: LD_EXP 1
18408: PPUSH
18409: LD_STRING D2-JMM-4
18411: PPUSH
18412: CALL_OW 88
// DialogueOff ;
18416: CALL_OW 7
// end else
18420: GO 18732
// begin if GetSex ( tmp ) = 1 then
18422: LD_VAR 0 4
18426: PPUSH
18427: CALL_OW 258
18431: PUSH
18432: LD_INT 1
18434: EQUAL
18435: IFFALSE 18449
// Say ( tmp , D2-Sol1-1 ) ;
18437: LD_VAR 0 4
18441: PPUSH
18442: LD_STRING D2-Sol1-1
18444: PPUSH
18445: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18449: LD_VAR 0 4
18453: PPUSH
18454: CALL_OW 258
18458: PUSH
18459: LD_INT 2
18461: EQUAL
18462: IFFALSE 18476
// Say ( tmp , D2-FSol1-1 ) ;
18464: LD_VAR 0 4
18468: PPUSH
18469: LD_STRING D2-FSol1-1
18471: PPUSH
18472: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18476: LD_EXP 19
18480: PPUSH
18481: LD_STRING D2-Kurt-2
18483: PPUSH
18484: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 258
18497: PUSH
18498: LD_INT 1
18500: EQUAL
18501: IFFALSE 18515
// Say ( tmp , D2-Sol1-2 ) ;
18503: LD_VAR 0 4
18507: PPUSH
18508: LD_STRING D2-Sol1-2
18510: PPUSH
18511: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18515: LD_VAR 0 4
18519: PPUSH
18520: CALL_OW 258
18524: PUSH
18525: LD_INT 2
18527: EQUAL
18528: IFFALSE 18542
// Say ( tmp , D2-FSol1-2 ) ;
18530: LD_VAR 0 4
18534: PPUSH
18535: LD_STRING D2-FSol1-2
18537: PPUSH
18538: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18542: LD_EXP 19
18546: PPUSH
18547: LD_STRING D2-Kurt-3
18549: PPUSH
18550: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18554: LD_VAR 0 4
18558: PPUSH
18559: CALL_OW 258
18563: PUSH
18564: LD_INT 1
18566: EQUAL
18567: IFFALSE 18581
// Say ( tmp , D2-Sol1-3 ) ;
18569: LD_VAR 0 4
18573: PPUSH
18574: LD_STRING D2-Sol1-3
18576: PPUSH
18577: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18581: LD_VAR 0 4
18585: PPUSH
18586: CALL_OW 258
18590: PUSH
18591: LD_INT 2
18593: EQUAL
18594: IFFALSE 18608
// Say ( tmp , D2-FSol1-3 ) ;
18596: LD_VAR 0 4
18600: PPUSH
18601: LD_STRING D2-FSol1-3
18603: PPUSH
18604: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18608: LD_EXP 19
18612: PPUSH
18613: LD_STRING D2-Kurt-4
18615: PPUSH
18616: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18620: LD_VAR 0 4
18624: PPUSH
18625: CALL_OW 258
18629: PUSH
18630: LD_INT 1
18632: EQUAL
18633: IFFALSE 18647
// Say ( tmp , D2-Sol1-4 ) ;
18635: LD_VAR 0 4
18639: PPUSH
18640: LD_STRING D2-Sol1-4
18642: PPUSH
18643: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18647: LD_VAR 0 4
18651: PPUSH
18652: CALL_OW 258
18656: PUSH
18657: LD_INT 2
18659: EQUAL
18660: IFFALSE 18674
// Say ( tmp , D2-FSol1-4 ) ;
18662: LD_VAR 0 4
18666: PPUSH
18667: LD_STRING D2-FSol1-4
18669: PPUSH
18670: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18674: LD_VAR 0 4
18678: PPUSH
18679: CALL_OW 258
18683: PUSH
18684: LD_INT 1
18686: EQUAL
18687: IFFALSE 18701
// Say ( tmp , D2-Sol1-5 ) ;
18689: LD_VAR 0 4
18693: PPUSH
18694: LD_STRING D2-Sol1-5
18696: PPUSH
18697: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18701: LD_VAR 0 4
18705: PPUSH
18706: CALL_OW 258
18710: PUSH
18711: LD_INT 2
18713: EQUAL
18714: IFFALSE 18728
// Say ( tmp , D2-FSol1-5 ) ;
18716: LD_VAR 0 4
18720: PPUSH
18721: LD_STRING D2-FSol1-5
18723: PPUSH
18724: CALL_OW 88
// DialogueOff ;
18728: CALL_OW 7
// end ; dec = ShowQuery1 ;
18732: LD_ADDR_VAR 0 6
18736: PUSH
18737: CALL 5795 0 0
18741: ST_TO_ADDR
// if dec = 1 then
18742: LD_VAR 0 6
18746: PUSH
18747: LD_INT 1
18749: EQUAL
18750: IFFALSE 18792
// begin DialogueOn ;
18752: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18756: LD_EXP 19
18760: PPUSH
18761: LD_STRING D2a-Kurt-1
18763: PPUSH
18764: CALL_OW 88
// DialogueOff ;
18768: CALL_OW 7
// InGameOff ;
18772: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18776: LD_INT 1
18778: PPUSH
18779: LD_INT 2
18781: PPUSH
18782: LD_INT 2
18784: PPUSH
18785: LD_INT 1
18787: PPUSH
18788: CALL_OW 80
// end ; if dec = 2 then
18792: LD_VAR 0 6
18796: PUSH
18797: LD_INT 2
18799: EQUAL
18800: IFFALSE 19300
// begin DialogueOn ;
18802: CALL_OW 6
// if tmp = JMM then
18806: LD_VAR 0 4
18810: PUSH
18811: LD_EXP 1
18815: EQUAL
18816: IFFALSE 18872
// begin Say ( JMM , D2b-JMM-1 ) ;
18818: LD_EXP 1
18822: PPUSH
18823: LD_STRING D2b-JMM-1
18825: PPUSH
18826: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18830: LD_EXP 19
18834: PPUSH
18835: LD_STRING D2b-Kurt-1
18837: PPUSH
18838: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18842: LD_EXP 1
18846: PPUSH
18847: LD_STRING D2b-JMM-2
18849: PPUSH
18850: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18854: LD_EXP 19
18858: PPUSH
18859: LD_STRING D2b-Kurt-2
18861: PPUSH
18862: CALL_OW 88
// DialogueOff ;
18866: CALL_OW 7
// end else
18870: GO 19062
// begin if GetSex ( tmp ) = 1 then
18872: LD_VAR 0 4
18876: PPUSH
18877: CALL_OW 258
18881: PUSH
18882: LD_INT 1
18884: EQUAL
18885: IFFALSE 18899
// Say ( tmp , D2b-Sol1-1 ) ;
18887: LD_VAR 0 4
18891: PPUSH
18892: LD_STRING D2b-Sol1-1
18894: PPUSH
18895: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18899: LD_VAR 0 4
18903: PPUSH
18904: CALL_OW 258
18908: PUSH
18909: LD_INT 2
18911: EQUAL
18912: IFFALSE 18926
// Say ( tmp , D2b-FSol1-1 ) ;
18914: LD_VAR 0 4
18918: PPUSH
18919: LD_STRING D2b-FSol1-1
18921: PPUSH
18922: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18926: LD_EXP 19
18930: PPUSH
18931: LD_STRING D2b-Kurt-1
18933: PPUSH
18934: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18938: LD_VAR 0 4
18942: PPUSH
18943: CALL_OW 258
18947: PUSH
18948: LD_INT 1
18950: EQUAL
18951: IFFALSE 18965
// Say ( tmp , D2b-Sol1-2 ) ;
18953: LD_VAR 0 4
18957: PPUSH
18958: LD_STRING D2b-Sol1-2
18960: PPUSH
18961: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18965: LD_VAR 0 4
18969: PPUSH
18970: CALL_OW 258
18974: PUSH
18975: LD_INT 2
18977: EQUAL
18978: IFFALSE 18992
// Say ( tmp , D2b-FSol1-2 ) ;
18980: LD_VAR 0 4
18984: PPUSH
18985: LD_STRING D2b-FSol1-2
18987: PPUSH
18988: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18992: LD_EXP 19
18996: PPUSH
18997: LD_STRING D2b-Kurt-2
18999: PPUSH
19000: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19004: LD_VAR 0 4
19008: PPUSH
19009: CALL_OW 258
19013: PUSH
19014: LD_INT 1
19016: EQUAL
19017: IFFALSE 19031
// Say ( tmp , D2c-Sol1-2 ) ;
19019: LD_VAR 0 4
19023: PPUSH
19024: LD_STRING D2c-Sol1-2
19026: PPUSH
19027: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19031: LD_VAR 0 4
19035: PPUSH
19036: CALL_OW 258
19040: PUSH
19041: LD_INT 2
19043: EQUAL
19044: IFFALSE 19058
// Say ( tmp , D2c-FSol1-2 ) ;
19046: LD_VAR 0 4
19050: PPUSH
19051: LD_STRING D2c-FSol1-2
19053: PPUSH
19054: CALL_OW 88
// DialogueOff ;
19058: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19062: LD_ADDR_VAR 0 7
19066: PUSH
19067: CALL 5869 0 0
19071: ST_TO_ADDR
// if dec2 = 1 then
19072: LD_VAR 0 7
19076: PUSH
19077: LD_INT 1
19079: EQUAL
19080: IFFALSE 19122
// begin DialogueOn ;
19082: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19086: LD_EXP 19
19090: PPUSH
19091: LD_STRING D2a-Kurt-1
19093: PPUSH
19094: CALL_OW 88
// DialogueOff ;
19098: CALL_OW 7
// InGameOff ;
19102: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19106: LD_INT 1
19108: PPUSH
19109: LD_INT 2
19111: PPUSH
19112: LD_INT 2
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: CALL_OW 80
// end ; if dec2 = 2 then
19122: LD_VAR 0 7
19126: PUSH
19127: LD_INT 2
19129: EQUAL
19130: IFFALSE 19300
// begin if tmp = JMM then
19132: LD_VAR 0 4
19136: PUSH
19137: LD_EXP 1
19141: EQUAL
19142: IFFALSE 19202
// begin DialogueOn ;
19144: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19148: LD_EXP 1
19152: PPUSH
19153: LD_STRING D2c-JMM-1
19155: PPUSH
19156: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19160: LD_EXP 19
19164: PPUSH
19165: LD_STRING D2c-Kurt-1
19167: PPUSH
19168: CALL_OW 88
// DialogueOff ;
19172: CALL_OW 7
// InGameOff ;
19176: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19180: LD_EXP 19
19184: PPUSH
19185: LD_INT 9
19187: PPUSH
19188: CALL_OW 113
// readyToEscape = 1 ;
19192: LD_ADDR_EXP 21
19196: PUSH
19197: LD_INT 1
19199: ST_TO_ADDR
// end else
19200: GO 19300
// begin DialogueOn ;
19202: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19206: LD_VAR 0 4
19210: PPUSH
19211: CALL_OW 258
19215: PUSH
19216: LD_INT 1
19218: EQUAL
19219: IFFALSE 19233
// Say ( tmp , D2c-Sol1-1 ) ;
19221: LD_VAR 0 4
19225: PPUSH
19226: LD_STRING D2c-Sol1-1
19228: PPUSH
19229: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19233: LD_VAR 0 4
19237: PPUSH
19238: CALL_OW 258
19242: PUSH
19243: LD_INT 2
19245: EQUAL
19246: IFFALSE 19260
// Say ( tmp , D2c-FSol1-1 ) ;
19248: LD_VAR 0 4
19252: PPUSH
19253: LD_STRING D2c-FSol1-1
19255: PPUSH
19256: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19260: LD_EXP 19
19264: PPUSH
19265: LD_STRING D2c-Kurt-1
19267: PPUSH
19268: CALL_OW 88
// DialogueOff ;
19272: CALL_OW 7
// InGameOff ;
19276: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19280: LD_EXP 19
19284: PPUSH
19285: LD_INT 9
19287: PPUSH
19288: CALL_OW 113
// readyToEscape = 1 ;
19292: LD_ADDR_EXP 21
19296: PUSH
19297: LD_INT 1
19299: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
19300: LD_VAR 0 6
19304: PUSH
19305: LD_INT 3
19307: EQUAL
19308: IFFALSE 19482
// begin DialogueOn ;
19310: CALL_OW 6
// if tmp = JMM then
19314: LD_VAR 0 4
19318: PUSH
19319: LD_EXP 1
19323: EQUAL
19324: IFFALSE 19384
// begin DialogueOn ;
19326: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19330: LD_EXP 1
19334: PPUSH
19335: LD_STRING D2c-JMM-1
19337: PPUSH
19338: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19342: LD_EXP 19
19346: PPUSH
19347: LD_STRING D2c-Kurt-1
19349: PPUSH
19350: CALL_OW 88
// DialogueOff ;
19354: CALL_OW 7
// InGameOff ;
19358: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19362: LD_EXP 19
19366: PPUSH
19367: LD_INT 9
19369: PPUSH
19370: CALL_OW 113
// readyToEscape = 1 ;
19374: LD_ADDR_EXP 21
19378: PUSH
19379: LD_INT 1
19381: ST_TO_ADDR
// end else
19382: GO 19482
// begin DialogueOn ;
19384: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19388: LD_VAR 0 4
19392: PPUSH
19393: CALL_OW 258
19397: PUSH
19398: LD_INT 1
19400: EQUAL
19401: IFFALSE 19415
// Say ( tmp , D2c-Sol1-1 ) ;
19403: LD_VAR 0 4
19407: PPUSH
19408: LD_STRING D2c-Sol1-1
19410: PPUSH
19411: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19415: LD_VAR 0 4
19419: PPUSH
19420: CALL_OW 258
19424: PUSH
19425: LD_INT 2
19427: EQUAL
19428: IFFALSE 19442
// Say ( tmp , D2c-FSol1-1 ) ;
19430: LD_VAR 0 4
19434: PPUSH
19435: LD_STRING D2c-FSol1-1
19437: PPUSH
19438: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19442: LD_EXP 19
19446: PPUSH
19447: LD_STRING D2c-Kurt-1
19449: PPUSH
19450: CALL_OW 88
// DialogueOff ;
19454: CALL_OW 7
// InGameOff ;
19458: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19462: LD_EXP 19
19466: PPUSH
19467: LD_INT 9
19469: PPUSH
19470: CALL_OW 113
// readyToEscape = 1 ;
19474: LD_ADDR_EXP 21
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19482: LD_ADDR_EXP 29
19486: PUSH
19487: LD_INT 0
19489: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19490: LD_INT 35
19492: PPUSH
19493: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19497: LD_EXP 19
19501: PPUSH
19502: LD_INT 9
19504: PPUSH
19505: CALL_OW 308
19509: PUSH
19510: LD_EXP 21
19514: AND
19515: PUSH
19516: LD_EXP 19
19520: PPUSH
19521: CALL_OW 301
19525: OR
19526: IFFALSE 19490
// if IsDead ( Kurt ) then
19528: LD_EXP 19
19532: PPUSH
19533: CALL_OW 301
19537: IFFALSE 19541
// exit ;
19539: GO 19610
// RemoveUnit ( Kurt ) ;
19541: LD_EXP 19
19545: PPUSH
19546: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19550: LD_EXP 19
19554: PPUSH
19555: LD_STRING Kurt
19557: PPUSH
19558: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19562: LD_INT 1
19564: PPUSH
19565: LD_INT 2
19567: PPUSH
19568: CALL_OW 81
19572: PUSH
19573: LD_INT 0
19575: EQUAL
19576: IFFALSE 19586
// KurtStatus = 1 ;
19578: LD_ADDR_EXP 20
19582: PUSH
19583: LD_INT 1
19585: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19586: LD_INT 1
19588: PPUSH
19589: LD_INT 2
19591: PPUSH
19592: CALL_OW 81
19596: PUSH
19597: LD_INT 2
19599: EQUAL
19600: IFFALSE 19610
// KurtStatus = 2 ;
19602: LD_ADDR_EXP 20
19606: PUSH
19607: LD_INT 2
19609: ST_TO_ADDR
// end ; end_of_file
19610: LD_VAR 0 1
19614: RET
// every 0 0$1 do
19615: GO 19617
19617: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19618: LD_INT 3
19620: PPUSH
19621: LD_INT 32
19623: PPUSH
19624: LD_INT 3
19626: PPUSH
19627: CALL 5924 0 3
19631: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
19632: GO 19634
19634: DISABLE
19635: LD_INT 0
19637: PPUSH
// begin enemyWayX = [ ] ;
19638: LD_ADDR_EXP 45
19642: PUSH
19643: EMPTY
19644: ST_TO_ADDR
// enemyWayY = [ ] ;
19645: LD_ADDR_EXP 46
19649: PUSH
19650: EMPTY
19651: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19652: LD_ADDR_VAR 0 1
19656: PUSH
19657: LD_INT 1
19659: PPUSH
19660: LD_INT 2
19662: PPUSH
19663: CALL_OW 12
19667: ST_TO_ADDR
// if rnd = 1 then
19668: LD_VAR 0 1
19672: PUSH
19673: LD_INT 1
19675: EQUAL
19676: IFFALSE 19716
// begin enemyWayX = [ 93 , 84 , 104 ] ;
19678: LD_ADDR_EXP 45
19682: PUSH
19683: LD_INT 93
19685: PUSH
19686: LD_INT 84
19688: PUSH
19689: LD_INT 104
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: LIST
19696: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
19697: LD_ADDR_EXP 46
19701: PUSH
19702: LD_INT 51
19704: PUSH
19705: LD_INT 35
19707: PUSH
19708: LD_INT 28
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: ST_TO_ADDR
// end ; if rnd = 2 then
19716: LD_VAR 0 1
19720: PUSH
19721: LD_INT 2
19723: EQUAL
19724: IFFALSE 19780
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
19726: LD_ADDR_EXP 45
19730: PUSH
19731: LD_INT 93
19733: PUSH
19734: LD_INT 52
19736: PUSH
19737: LD_INT 34
19739: PUSH
19740: LD_INT 28
19742: PUSH
19743: LD_INT 30
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
19753: LD_ADDR_EXP 46
19757: PUSH
19758: LD_INT 51
19760: PUSH
19761: LD_INT 45
19763: PUSH
19764: LD_INT 35
19766: PUSH
19767: LD_INT 26
19769: PUSH
19770: LD_INT 20
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: ST_TO_ADDR
// end ; enable ;
19780: ENABLE
// end ;
19781: PPOPN 1
19783: END
// every 0 0$1 do
19784: GO 19786
19786: DISABLE
// begin enable ;
19787: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
19788: LD_INT 3
19790: PPUSH
19791: LD_INT 2
19793: PPUSH
19794: LD_INT 11
19796: PPUSH
19797: LD_EXP 31
19801: PPUSH
19802: CALL 7191 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
19806: LD_INT 3
19808: PPUSH
19809: LD_INT 14
19811: PPUSH
19812: LD_EXP 31
19816: PPUSH
19817: CALL 9076 0 3
// if disableHealAI = 0 then
19821: LD_EXP 33
19825: PUSH
19826: LD_INT 0
19828: EQUAL
19829: IFFALSE 19850
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
19831: LD_INT 3
19833: PPUSH
19834: LD_INT 10
19836: PPUSH
19837: LD_INT 11
19839: PPUSH
19840: LD_INT 32
19842: PUSH
19843: EMPTY
19844: LIST
19845: PPUSH
19846: CALL 7582 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19850: LD_INT 3
19852: PPUSH
19853: LD_INT 51
19855: PPUSH
19856: LD_INT 7
19858: PPUSH
19859: CALL 8290 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
19863: LD_INT 3
19865: PPUSH
19866: LD_INT 14
19868: PPUSH
19869: LD_INT 121
19871: PPUSH
19872: LD_INT 100
19874: PPUSH
19875: CALL 6163 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
19879: LD_INT 3
19881: PPUSH
19882: LD_INT 24
19884: PPUSH
19885: LD_EXP 45
19889: PPUSH
19890: LD_EXP 46
19894: PPUSH
19895: CALL 6366 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
19899: LD_INT 3
19901: PPUSH
19902: LD_INT 11
19904: PPUSH
19905: CALL 8433 0 2
// AttackNearBuildings ( 3 , 1 ) ;
19909: LD_INT 3
19911: PPUSH
19912: LD_INT 1
19914: PPUSH
19915: CALL 8846 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
19919: LD_INT 2
19921: PPUSH
19922: CALL_OW 303
19926: PUSH
19927: LD_INT 2
19929: PPUSH
19930: CALL_OW 255
19934: PUSH
19935: LD_INT 1
19937: EQUAL
19938: OR
19939: IFFALSE 19951
// DefendDepot ( 3 , rudepo ) ;
19941: LD_INT 3
19943: PPUSH
19944: LD_INT 2
19946: PPUSH
19947: CALL 8126 0 2
// end ;
19951: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19952: LD_INT 22
19954: PUSH
19955: LD_INT 3
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 55
19974: PUSH
19975: EMPTY
19976: LIST
19977: PUSH
19978: LD_INT 3
19980: PUSH
19981: LD_INT 34
19983: PUSH
19984: LD_INT 51
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: PUSH
20006: LD_INT 0
20008: EQUAL
20009: PUSH
20010: LD_INT 21
20012: PPUSH
20013: CALL_OW 255
20017: PUSH
20018: LD_INT 3
20020: EQUAL
20021: AND
20022: PUSH
20023: LD_INT 21
20025: PPUSH
20026: CALL_OW 302
20030: AND
20031: PUSH
20032: LD_INT 2
20034: PPUSH
20035: CALL_OW 255
20039: PUSH
20040: LD_INT 3
20042: EQUAL
20043: AND
20044: PUSH
20045: LD_INT 2
20047: PPUSH
20048: CALL_OW 302
20052: AND
20053: IFFALSE 20237
20055: GO 20057
20057: DISABLE
// begin enable ;
20058: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20059: LD_INT 2
20061: PPUSH
20062: CALL_OW 274
20066: PPUSH
20067: LD_INT 1
20069: PPUSH
20070: LD_INT 1000
20072: PPUSH
20073: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20077: LD_INT 3
20079: PPUSH
20080: LD_INT 21
20082: PPUSH
20083: LD_INT 5
20085: PUSH
20086: LD_INT 6
20088: PUSH
20089: LD_INT 6
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: PUSH
20097: LD_OWVAR 67
20101: ARRAY
20102: PPUSH
20103: LD_INT 43
20105: PUSH
20106: LD_INT 43
20108: PUSH
20109: LD_INT 44
20111: PUSH
20112: LD_INT 44
20114: PUSH
20115: LD_INT 46
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 43
20127: PUSH
20128: LD_INT 43
20130: PUSH
20131: LD_INT 43
20133: PUSH
20134: LD_INT 44
20136: PUSH
20137: LD_INT 44
20139: PUSH
20140: LD_INT 46
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 43
20153: PUSH
20154: LD_INT 43
20156: PUSH
20157: LD_INT 43
20159: PUSH
20160: LD_INT 44
20162: PUSH
20163: LD_INT 44
20165: PUSH
20166: LD_INT 46
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: PUSH
20182: LD_OWVAR 67
20186: ARRAY
20187: PPUSH
20188: LD_INT 1
20190: PPUSH
20191: LD_INT 1
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 22
20199: PUSH
20200: LD_INT 24
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 1
20209: PPUSH
20210: LD_INT 2
20212: PPUSH
20213: CALL_OW 12
20217: ARRAY
20218: PUSH
20219: LD_INT 24
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: LD_OWVAR 67
20231: ARRAY
20232: PPUSH
20233: CALL 6009 0 7
// end ;
20237: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20238: LD_INT 17
20240: PPUSH
20241: CALL_OW 255
20245: PUSH
20246: LD_INT 3
20248: EQUAL
20249: PUSH
20250: LD_INT 17
20252: PPUSH
20253: CALL_OW 302
20257: AND
20258: PUSH
20259: LD_INT 2
20261: PPUSH
20262: CALL_OW 255
20266: PUSH
20267: LD_INT 3
20269: EQUAL
20270: AND
20271: PUSH
20272: LD_INT 2
20274: PPUSH
20275: CALL_OW 302
20279: AND
20280: IFFALSE 20347
20282: GO 20284
20284: DISABLE
// begin enable ;
20285: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
20286: LD_INT 17
20288: PPUSH
20289: LD_INT 22
20291: PPUSH
20292: LD_INT 1
20294: PPUSH
20295: LD_INT 1
20297: PPUSH
20298: LD_INT 42
20300: PUSH
20301: LD_INT 43
20303: PUSH
20304: LD_INT 44
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: PUSH
20312: LD_INT 1
20314: PPUSH
20315: LD_INT 3
20317: PPUSH
20318: CALL_OW 12
20322: ARRAY
20323: PPUSH
20324: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
20328: LD_INT 17
20330: PPUSH
20331: LD_INT 22
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_INT 51
20342: PPUSH
20343: CALL_OW 185
// end ;
20347: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
20348: LD_INT 17
20350: PPUSH
20351: CALL_OW 302
20355: PUSH
20356: LD_INT 17
20358: PPUSH
20359: CALL_OW 255
20363: PUSH
20364: LD_INT 3
20366: EQUAL
20367: AND
20368: PUSH
20369: LD_INT 2
20371: PPUSH
20372: CALL_OW 302
20376: AND
20377: PUSH
20378: LD_INT 2
20380: PPUSH
20381: CALL_OW 255
20385: PUSH
20386: LD_INT 3
20388: EQUAL
20389: AND
20390: PUSH
20391: LD_INT 17
20393: PPUSH
20394: CALL_OW 313
20398: NOT
20399: AND
20400: IFFALSE 20494
20402: GO 20404
20404: DISABLE
20405: LD_INT 0
20407: PPUSH
// begin for i = 1 to 6 do
20408: LD_ADDR_VAR 0 1
20412: PUSH
20413: DOUBLE
20414: LD_INT 1
20416: DEC
20417: ST_TO_ADDR
20418: LD_INT 6
20420: PUSH
20421: FOR_TO
20422: IFFALSE 20492
// begin uc_side = 3 ;
20424: LD_ADDR_OWVAR 20
20428: PUSH
20429: LD_INT 3
20431: ST_TO_ADDR
// uc_nation = 3 ;
20432: LD_ADDR_OWVAR 21
20436: PUSH
20437: LD_INT 3
20439: ST_TO_ADDR
// hc_gallery :=  ;
20440: LD_ADDR_OWVAR 33
20444: PUSH
20445: LD_STRING 
20447: ST_TO_ADDR
// hc_name :=  ;
20448: LD_ADDR_OWVAR 26
20452: PUSH
20453: LD_STRING 
20455: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20456: LD_INT 0
20458: PPUSH
20459: LD_EXP 34
20463: PPUSH
20464: LD_EXP 35
20468: PPUSH
20469: CALL_OW 12
20473: PPUSH
20474: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
20478: CALL_OW 44
20482: PPUSH
20483: LD_INT 17
20485: PPUSH
20486: CALL_OW 52
// end ;
20490: GO 20421
20492: POP
20493: POP
// end ;
20494: PPOPN 1
20496: END
// every 2 2$0 do var i , j ;
20497: GO 20499
20499: DISABLE
20500: LD_INT 0
20502: PPUSH
20503: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
20504: LD_INT 14700
20506: PUSH
20507: LD_INT 33600
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: PPUSH
20517: LD_INT 2
20519: PPUSH
20520: CALL_OW 12
20524: ARRAY
20525: PPUSH
20526: CALL_OW 67
// disableHealAI = 1 ;
20530: LD_ADDR_EXP 33
20534: PUSH
20535: LD_INT 1
20537: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20538: LD_ADDR_VAR 0 1
20542: PUSH
20543: LD_INT 22
20545: PUSH
20546: LD_INT 3
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 25
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: PUSH
20572: FOR_IN
20573: IFFALSE 20586
// ComExitBuilding ( i ) ;
20575: LD_VAR 0 1
20579: PPUSH
20580: CALL_OW 122
20584: GO 20572
20586: POP
20587: POP
// wait ( 0 0$1 ) ;
20588: LD_INT 35
20590: PPUSH
20591: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20595: LD_INT 35
20597: PPUSH
20598: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20602: LD_ADDR_VAR 0 1
20606: PUSH
20607: LD_INT 22
20609: PUSH
20610: LD_INT 3
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 25
20619: PUSH
20620: LD_INT 4
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PPUSH
20631: CALL_OW 69
20635: PUSH
20636: FOR_IN
20637: IFFALSE 20714
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20639: LD_ADDR_VAR 0 2
20643: PUSH
20644: LD_INT 19
20646: PPUSH
20647: LD_INT 22
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: LD_INT 25
20659: PUSH
20660: LD_INT 12
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PPUSH
20671: CALL_OW 70
20675: PUSH
20676: FOR_IN
20677: IFFALSE 20710
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_VAR 0 2
20688: PPUSH
20689: CALL_OW 250
20693: PPUSH
20694: LD_VAR 0 2
20698: PPUSH
20699: CALL_OW 251
20703: PPUSH
20704: CALL_OW 191
// end ;
20708: GO 20676
20710: POP
20711: POP
// end ;
20712: GO 20636
20714: POP
20715: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20716: LD_INT 22
20718: PUSH
20719: LD_INT 3
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 25
20728: PUSH
20729: LD_INT 4
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: PUSH
20745: LD_INT 0
20747: EQUAL
20748: PUSH
20749: LD_EXP 32
20753: PUSH
20754: LD_INT 6
20756: PUSH
20757: LD_INT 7
20759: PUSH
20760: LD_INT 8
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: LIST
20767: PUSH
20768: LD_OWVAR 67
20772: ARRAY
20773: GREATEREQUAL
20774: OR
20775: PUSH
20776: LD_INT 19
20778: PPUSH
20779: LD_INT 22
20781: PUSH
20782: LD_INT 0
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 25
20791: PUSH
20792: LD_INT 12
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PPUSH
20803: CALL_OW 70
20807: PUSH
20808: LD_INT 0
20810: EQUAL
20811: OR
20812: IFFALSE 20595
// disableHealAI = 0 ;
20814: LD_ADDR_EXP 33
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20822: LD_ADDR_VAR 0 1
20826: PUSH
20827: LD_INT 22
20829: PUSH
20830: LD_INT 3
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 12
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PPUSH
20851: CALL_OW 69
20855: PUSH
20856: FOR_IN
20857: IFFALSE 20873
// SetClass ( i , 16 ) ;
20859: LD_VAR 0 1
20863: PPUSH
20864: LD_INT 16
20866: PPUSH
20867: CALL_OW 336
20871: GO 20856
20873: POP
20874: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20875: LD_ADDR_VAR 0 1
20879: PUSH
20880: LD_INT 22
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 25
20892: PUSH
20893: LD_INT 4
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PPUSH
20904: CALL_OW 69
20908: PUSH
20909: FOR_IN
20910: IFFALSE 20929
// ComMoveXY ( i , 113 , 94 ) ;
20912: LD_VAR 0 1
20916: PPUSH
20917: LD_INT 113
20919: PPUSH
20920: LD_INT 94
20922: PPUSH
20923: CALL_OW 111
20927: GO 20909
20929: POP
20930: POP
// end ;
20931: PPOPN 2
20933: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20934: LD_INT 21
20936: PPUSH
20937: CALL_OW 255
20941: PUSH
20942: LD_INT 3
20944: EQUAL
20945: PUSH
20946: LD_INT 21
20948: PPUSH
20949: CALL_OW 302
20953: AND
20954: PUSH
20955: LD_INT 22
20957: PUSH
20958: LD_INT 3
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 34
20967: PUSH
20968: LD_INT 51
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PPUSH
20979: CALL_OW 69
20983: PUSH
20984: LD_INT 0
20986: EQUAL
20987: AND
20988: IFFALSE 21020
20990: GO 20992
20992: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20993: LD_INT 21
20995: PPUSH
20996: LD_INT 23
20998: PPUSH
20999: LD_INT 1
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: LD_INT 51
21007: PPUSH
21008: CALL_OW 185
// wait ( 5 5$0 ) ;
21012: LD_INT 10500
21014: PPUSH
21015: CALL_OW 67
// enable ;
21019: ENABLE
// end ; end_of_file
21020: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21021: LD_EXP 26
21025: PUSH
21026: LD_INT 0
21028: LESSEQUAL
21029: IFFALSE 21178
21031: GO 21033
21033: DISABLE
21034: LD_INT 0
21036: PPUSH
21037: PPUSH
21038: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21039: LD_ADDR_VAR 0 2
21043: PUSH
21044: LD_INT 22
21046: PUSH
21047: LD_INT 1
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 21
21056: PUSH
21057: LD_INT 3
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 1
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: PPUSH
21097: CALL_OW 69
21101: ST_TO_ADDR
// for i in tmp do
21102: LD_ADDR_VAR 0 1
21106: PUSH
21107: LD_VAR 0 2
21111: PUSH
21112: FOR_IN
21113: IFFALSE 21146
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21115: LD_ADDR_VAR 0 3
21119: PUSH
21120: LD_VAR 0 3
21124: PUSH
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 274
21134: PPUSH
21135: LD_INT 1
21137: PPUSH
21138: CALL_OW 275
21142: PLUS
21143: ST_TO_ADDR
21144: GO 21112
21146: POP
21147: POP
// if yourCrates >= needCrates then
21148: LD_VAR 0 3
21152: PUSH
21153: LD_EXP 25
21157: GREATEREQUAL
21158: IFFALSE 21171
// begin FinishMission ( yourCrates ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL 21181 0 1
// end else
21169: GO 21178
// begin YouLost ( matmin ) ;
21171: LD_STRING matmin
21173: PPUSH
21174: CALL_OW 104
// end ; end ;
21178: PPOPN 3
21180: END
// export function FinishMission ( crates ) ; begin
21181: LD_INT 0
21183: PPUSH
// if crates + 100 > crates then
21184: LD_VAR 0 1
21188: PUSH
21189: LD_INT 100
21191: PLUS
21192: PUSH
21193: LD_VAR 0 1
21197: GREATER
21198: IFFALSE 21222
// begin AddMedal ( cans , 1 ) ;
21200: LD_STRING cans
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21210: LD_INT 1
21212: PPUSH
21213: LD_STRING 06_crates_1
21215: PPUSH
21216: CALL_OW 39
// end else
21220: GO 21243
// begin AddMedal ( cans , - 1 ) ;
21222: LD_STRING cans
21224: PPUSH
21225: LD_INT 1
21227: NEG
21228: PPUSH
21229: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21233: LD_INT 0
21235: PPUSH
21236: LD_STRING 06_crates_1
21238: PPUSH
21239: CALL_OW 39
// end ; if unitLost < 2 then
21243: LD_EXP 30
21247: PUSH
21248: LD_INT 2
21250: LESS
21251: IFFALSE 21265
// begin AddMedal ( people , 1 ) ;
21253: LD_STRING people
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 101
// end else
21263: GO 21276
// begin AddMedal ( people , - 1 ) ;
21265: LD_STRING people
21267: PPUSH
21268: LD_INT 1
21270: NEG
21271: PPUSH
21272: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
21276: LD_EXP 28
21280: PPUSH
21281: LD_STRING 06_remoteVehs_1
21283: PPUSH
21284: CALL_OW 39
// if remoteVehiclesBuild = 1 then
21288: LD_EXP 28
21292: PUSH
21293: LD_INT 1
21295: EQUAL
21296: IFFALSE 21310
// begin AddMedal ( remote , 1 ) ;
21298: LD_STRING remote
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 101
// end else
21308: GO 21350
// begin if GetTech ( 18 , 1 ) = state_enabled then
21310: LD_INT 18
21312: PPUSH
21313: LD_INT 1
21315: PPUSH
21316: CALL_OW 321
21320: PUSH
21321: LD_INT 1
21323: EQUAL
21324: IFFALSE 21339
// begin AddMedal ( remote , - 1 ) ;
21326: LD_STRING remote
21328: PPUSH
21329: LD_INT 1
21331: NEG
21332: PPUSH
21333: CALL_OW 101
// end else
21337: GO 21350
// begin AddMedal ( remote , - 2 ) ;
21339: LD_STRING remote
21341: PPUSH
21342: LD_INT 2
21344: NEG
21345: PPUSH
21346: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
21350: LD_EXP 20
21354: PPUSH
21355: LD_STRING 06_KurtStatus_1
21357: PPUSH
21358: CALL_OW 39
// GiveMedals ( Main ) ;
21362: LD_STRING Main
21364: PPUSH
21365: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21369: LD_INT 22
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 50
21391: PUSH
21392: EMPTY
21393: LIST
21394: PUSH
21395: LD_INT 2
21397: PUSH
21398: LD_INT 25
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 25
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 25
21420: PUSH
21421: LD_INT 3
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 25
21430: PUSH
21431: LD_INT 4
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: PPUSH
21451: CALL_OW 69
21455: PPUSH
21456: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21460: LD_EXP 1
21464: PPUSH
21465: LD_EXP 43
21469: PUSH
21470: LD_STRING JMM
21472: STR
21473: PPUSH
21474: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21478: LD_EXP 2
21482: PPUSH
21483: LD_EXP 43
21487: PUSH
21488: LD_STRING Lisa
21490: STR
21491: PPUSH
21492: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21496: LD_EXP 3
21500: PPUSH
21501: LD_EXP 43
21505: PUSH
21506: LD_STRING Bobby
21508: STR
21509: PPUSH
21510: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21514: LD_EXP 4
21518: PPUSH
21519: LD_EXP 43
21523: PUSH
21524: LD_STRING Cyrus
21526: STR
21527: PPUSH
21528: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21532: LD_EXP 5
21536: PPUSH
21537: LD_EXP 43
21541: PUSH
21542: LD_STRING Frank
21544: STR
21545: PPUSH
21546: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21550: LD_EXP 6
21554: PPUSH
21555: LD_EXP 43
21559: PUSH
21560: LD_STRING Brown
21562: STR
21563: PPUSH
21564: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21568: LD_EXP 7
21572: PPUSH
21573: LD_EXP 43
21577: PUSH
21578: LD_STRING Donaldson
21580: STR
21581: PPUSH
21582: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21586: LD_EXP 8
21590: PPUSH
21591: LD_EXP 43
21595: PUSH
21596: LD_STRING Gladstone
21598: STR
21599: PPUSH
21600: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21604: LD_EXP 9
21608: PPUSH
21609: LD_EXP 43
21613: PUSH
21614: LD_STRING Denis
21616: STR
21617: PPUSH
21618: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21622: LD_EXP 15
21626: PPUSH
21627: LD_EXP 43
21631: PUSH
21632: LD_STRING Joan
21634: STR
21635: PPUSH
21636: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21640: LD_EXP 16
21644: PPUSH
21645: LD_STRING 06_JoanStatus_1
21647: PPUSH
21648: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21652: LD_INT 50
21654: PUSH
21655: EMPTY
21656: LIST
21657: PUSH
21658: LD_INT 22
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 21
21670: PUSH
21671: LD_INT 1
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: LD_INT 25
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 25
21693: PUSH
21694: LD_INT 2
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 25
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 25
21713: PUSH
21714: LD_INT 4
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 69
21738: PUSH
21739: LD_EXP 1
21743: PUSH
21744: LD_EXP 2
21748: PUSH
21749: LD_EXP 3
21753: PUSH
21754: LD_EXP 4
21758: PUSH
21759: LD_EXP 5
21763: PUSH
21764: LD_EXP 6
21768: PUSH
21769: LD_EXP 7
21773: PUSH
21774: LD_EXP 8
21778: PUSH
21779: LD_EXP 9
21783: PUSH
21784: LD_EXP 15
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: DIFF
21801: PPUSH
21802: LD_STRING 06_other_survivors
21804: PPUSH
21805: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21809: LD_INT 50
21811: PUSH
21812: EMPTY
21813: LIST
21814: PUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 1
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 25
21840: PUSH
21841: LD_INT 12
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 25
21850: PUSH
21851: LD_INT 16
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: PPUSH
21869: CALL_OW 69
21873: PPUSH
21874: LD_STRING 06_other_apemans
21876: PPUSH
21877: CALL_OW 38
// YouWin ;
21881: CALL_OW 103
// end ; end_of_file
21885: LD_VAR 0 2
21889: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21890: LD_EXP 39
21894: PUSH
21895: LD_INT 3
21897: EQUAL
21898: IFFALSE 22013
21900: GO 21902
21902: DISABLE
// begin enable ;
21903: ENABLE
// sendedConvoys = 0 ;
21904: LD_ADDR_EXP 39
21908: PUSH
21909: LD_INT 0
21911: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21912: LD_INT 6
21914: PPUSH
21915: LD_INT 3
21917: PPUSH
21918: LD_INT 5
21920: PPUSH
21921: LD_INT 10
21923: PPUSH
21924: CALL_OW 12
21928: PUSH
21929: LD_INT 5
21931: PPUSH
21932: LD_INT 11
21934: PPUSH
21935: CALL_OW 12
21939: PUSH
21940: LD_INT 8
21942: PPUSH
21943: LD_INT 12
21945: PPUSH
21946: CALL_OW 12
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: PUSH
21956: LD_OWVAR 67
21960: ARRAY
21961: PPUSH
21962: LD_INT 0
21964: PPUSH
21965: LD_INT 0
21967: PPUSH
21968: LD_INT 0
21970: PPUSH
21971: LD_INT 0
21973: PPUSH
21974: LD_EXP 34
21978: PPUSH
21979: LD_EXP 35
21983: PPUSH
21984: CALL_OW 12
21988: PPUSH
21989: LD_INT 18
21991: PPUSH
21992: LD_INT 17
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 2
22003: PPUSH
22004: CALL_OW 12
22008: PPUSH
22009: CALL 9599 0 12
// end ; end_of_file
22013: END
// export function PrepareNature ; var i , un ; begin
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
// for i = 1 to Difficulty + 2 do
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: DOUBLE
22025: LD_INT 1
22027: DEC
22028: ST_TO_ADDR
22029: LD_OWVAR 67
22033: PUSH
22034: LD_INT 2
22036: PLUS
22037: PUSH
22038: FOR_TO
22039: IFFALSE 22148
// begin hc_sex = sex_male ;
22041: LD_ADDR_OWVAR 27
22045: PUSH
22046: LD_INT 1
22048: ST_TO_ADDR
// uc_side = 0 ;
22049: LD_ADDR_OWVAR 20
22053: PUSH
22054: LD_INT 0
22056: ST_TO_ADDR
// uc_nation = nation_nature ;
22057: LD_ADDR_OWVAR 21
22061: PUSH
22062: LD_INT 0
22064: ST_TO_ADDR
// hc_class = class_tiger ;
22065: LD_ADDR_OWVAR 28
22069: PUSH
22070: LD_INT 14
22072: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22073: LD_ADDR_OWVAR 31
22077: PUSH
22078: LD_EXP 35
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: LD_INT 0
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22098: LD_ADDR_OWVAR 35
22102: PUSH
22103: LD_INT 5
22105: NEG
22106: PPUSH
22107: LD_INT 5
22109: PPUSH
22110: CALL_OW 12
22114: PUSH
22115: LD_OWVAR 67
22119: MUL
22120: ST_TO_ADDR
// un = CreateHuman ;
22121: LD_ADDR_VAR 0 3
22125: PUSH
22126: CALL_OW 44
22130: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22131: LD_VAR 0 3
22135: PPUSH
22136: LD_INT 20
22138: PPUSH
22139: LD_INT 0
22141: PPUSH
22142: CALL_OW 49
// end ;
22146: GO 22038
22148: POP
22149: POP
// for i = 1 to rand ( 3 , 4 ) do
22150: LD_ADDR_VAR 0 2
22154: PUSH
22155: DOUBLE
22156: LD_INT 1
22158: DEC
22159: ST_TO_ADDR
22160: LD_INT 3
22162: PPUSH
22163: LD_INT 4
22165: PPUSH
22166: CALL_OW 12
22170: PUSH
22171: FOR_TO
22172: IFFALSE 22266
// begin hc_sex = sex_male ;
22174: LD_ADDR_OWVAR 27
22178: PUSH
22179: LD_INT 1
22181: ST_TO_ADDR
// uc_side = 0 ;
22182: LD_ADDR_OWVAR 20
22186: PUSH
22187: LD_INT 0
22189: ST_TO_ADDR
// uc_nation = nation_nature ;
22190: LD_ADDR_OWVAR 21
22194: PUSH
22195: LD_INT 0
22197: ST_TO_ADDR
// hc_class = 18 ;
22198: LD_ADDR_OWVAR 28
22202: PUSH
22203: LD_INT 18
22205: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22206: LD_ADDR_OWVAR 31
22210: PUSH
22211: LD_EXP 35
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 0
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: ST_TO_ADDR
// hc_agressivity = 0 ;
22231: LD_ADDR_OWVAR 35
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
// un = CreateHuman ;
22239: LD_ADDR_VAR 0 3
22243: PUSH
22244: CALL_OW 44
22248: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22249: LD_VAR 0 3
22253: PPUSH
22254: LD_INT 20
22256: PPUSH
22257: LD_INT 0
22259: PPUSH
22260: CALL_OW 49
// end ;
22264: GO 22171
22266: POP
22267: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
22268: LD_ADDR_VAR 0 2
22272: PUSH
22273: DOUBLE
22274: LD_INT 1
22276: DEC
22277: ST_TO_ADDR
22278: LD_INT 1
22280: PPUSH
22281: LD_INT 3
22283: PPUSH
22284: CALL_OW 12
22288: PUSH
22289: LD_OWVAR 67
22293: PLUS
22294: PUSH
22295: FOR_TO
22296: IFFALSE 22477
// begin hc_sex = sex_male ;
22298: LD_ADDR_OWVAR 27
22302: PUSH
22303: LD_INT 1
22305: ST_TO_ADDR
// uc_side = 0 ;
22306: LD_ADDR_OWVAR 20
22310: PUSH
22311: LD_INT 0
22313: ST_TO_ADDR
// uc_nation = nation_nature ;
22314: LD_ADDR_OWVAR 21
22318: PUSH
22319: LD_INT 0
22321: ST_TO_ADDR
// hc_class = class_apeman ;
22322: LD_ADDR_OWVAR 28
22326: PUSH
22327: LD_INT 12
22329: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22330: LD_ADDR_OWVAR 31
22334: PUSH
22335: LD_EXP 34
22339: PPUSH
22340: LD_EXP 35
22344: PPUSH
22345: CALL_OW 12
22349: PUSH
22350: LD_EXP 34
22354: PPUSH
22355: LD_EXP 35
22359: PPUSH
22360: CALL_OW 12
22364: PUSH
22365: LD_EXP 34
22369: PPUSH
22370: LD_EXP 35
22374: PPUSH
22375: CALL_OW 12
22379: PUSH
22380: LD_EXP 34
22384: PPUSH
22385: LD_EXP 35
22389: PPUSH
22390: CALL_OW 12
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
22401: LD_ADDR_OWVAR 35
22405: PUSH
22406: LD_INT 20
22408: PPUSH
22409: LD_INT 30
22411: PPUSH
22412: CALL_OW 12
22416: PUSH
22417: LD_INT 30
22419: PPUSH
22420: LD_INT 40
22422: PPUSH
22423: CALL_OW 12
22427: PUSH
22428: LD_INT 40
22430: PPUSH
22431: LD_INT 50
22433: PPUSH
22434: CALL_OW 12
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: PUSH
22444: LD_OWVAR 67
22448: ARRAY
22449: ST_TO_ADDR
// un = CreateHuman ;
22450: LD_ADDR_VAR 0 3
22454: PUSH
22455: CALL_OW 44
22459: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22460: LD_VAR 0 3
22464: PPUSH
22465: LD_INT 21
22467: PPUSH
22468: LD_INT 0
22470: PPUSH
22471: CALL_OW 49
// end ;
22475: GO 22295
22477: POP
22478: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
22479: LD_ADDR_VAR 0 2
22483: PUSH
22484: DOUBLE
22485: LD_INT 1
22487: DEC
22488: ST_TO_ADDR
22489: LD_INT 5
22491: PPUSH
22492: LD_INT 6
22494: PPUSH
22495: CALL_OW 12
22499: PUSH
22500: LD_OWVAR 67
22504: PLUS
22505: PUSH
22506: FOR_TO
22507: IFFALSE 22653
// begin hc_sex = sex_male ;
22509: LD_ADDR_OWVAR 27
22513: PUSH
22514: LD_INT 1
22516: ST_TO_ADDR
// uc_side = 0 ;
22517: LD_ADDR_OWVAR 20
22521: PUSH
22522: LD_INT 0
22524: ST_TO_ADDR
// uc_nation = nation_nature ;
22525: LD_ADDR_OWVAR 21
22529: PUSH
22530: LD_INT 0
22532: ST_TO_ADDR
// hc_class = class_apeman ;
22533: LD_ADDR_OWVAR 28
22537: PUSH
22538: LD_INT 12
22540: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22541: LD_ADDR_OWVAR 31
22545: PUSH
22546: LD_EXP 34
22550: PPUSH
22551: LD_EXP 35
22555: PPUSH
22556: CALL_OW 12
22560: PUSH
22561: LD_EXP 34
22565: PPUSH
22566: LD_EXP 35
22570: PPUSH
22571: CALL_OW 12
22575: PUSH
22576: LD_OWVAR 67
22580: PLUS
22581: PUSH
22582: LD_EXP 34
22586: PPUSH
22587: LD_EXP 35
22591: PPUSH
22592: CALL_OW 12
22596: PUSH
22597: LD_EXP 34
22601: PPUSH
22602: LD_EXP 35
22606: PPUSH
22607: CALL_OW 12
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: ST_TO_ADDR
// hc_agressivity = 0 ;
22618: LD_ADDR_OWVAR 35
22622: PUSH
22623: LD_INT 0
22625: ST_TO_ADDR
// un = CreateHuman ;
22626: LD_ADDR_VAR 0 3
22630: PUSH
22631: CALL_OW 44
22635: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22636: LD_VAR 0 3
22640: PPUSH
22641: LD_INT 22
22643: PPUSH
22644: LD_INT 0
22646: PPUSH
22647: CALL_OW 49
// end ;
22651: GO 22506
22653: POP
22654: POP
// end ; end_of_file
22655: LD_VAR 0 1
22659: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22660: LD_EXP 1
22664: PPUSH
22665: CALL_OW 301
22669: IFFALSE 22681
22671: GO 22673
22673: DISABLE
// YouLost ( JMM ) ;
22674: LD_STRING JMM
22676: PPUSH
22677: CALL_OW 104
22681: END
