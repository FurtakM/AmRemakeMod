// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 36
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 37
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 38
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// KurtStatus = 0 ;
  58: LD_ADDR_EXP 19
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// readyToEscape = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// JoanStatus = 0 ;
  74: LD_ADDR_EXP 15
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// cratesStatus = 2 ;
  82: LD_ADDR_EXP 34
  86: PUSH
  87: LD_INT 2
  89: ST_TO_ADDR
// timerStatus = 1 ;
  90: LD_ADDR_EXP 23
  94: PUSH
  95: LD_INT 1
  97: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 350
 105: PUSH
 106: LD_INT 500
 108: PUSH
 109: LD_INT 700
 111: PUSH
 112: EMPTY
 113: LIST
 114: LIST
 115: LIST
 116: PUSH
 117: LD_OWVAR 67
 121: ARRAY
 122: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 105000
 130: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 131: LD_ADDR_EXP 27
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// sendedConvoys = 0 ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// tamedApemans = 0 ;
 147: LD_ADDR_EXP 30
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// unitLost = 0 ;
 155: LD_ADDR_EXP 28
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: EMPTY
 169: ST_TO_ADDR
// disableHealAI = 0 ;
 170: LD_ADDR_EXP 31
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// strings = [ ] ;
 178: LD_ADDR_EXP 26
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// PrepareNature ;
 185: CALL 19334 0 0
// PrepareDifficulty ;
 189: CALL 5041 0 0
// PrepareRussian ;
 193: CALL 4148 0 0
// PrepareVehicles ;
 197: CALL 1437 0 0
// PrepareHeroes ;
 201: CALL 452 0 0
// PrepareOthers ;
 205: CALL 1698 0 0
// PreparePlayerApemans ;
 209: CALL 1840 0 0
// end ;
 213: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 214: LD_EXP 36
 218: PUSH
 219: LD_INT 1
 221: EQUAL
 222: IFFALSE 449
 224: GO 226
 226: DISABLE
 227: LD_INT 0
 229: PPUSH
// begin enable ;
 230: ENABLE
// fogoff ( true ) ;
 231: LD_INT 1
 233: PPUSH
 234: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 238: LD_ADDR_VAR 0 1
 242: PUSH
 243: LD_INT 22
 245: PUSH
 246: LD_INT 1
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: PUSH
 253: LD_INT 21
 255: PUSH
 256: LD_INT 1
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: PPUSH
 267: CALL_OW 69
 271: PUSH
 272: FOR_IN
 273: IFFALSE 289
// SetLives ( i , 1000 ) ;
 275: LD_VAR 0 1
 279: PPUSH
 280: LD_INT 1000
 282: PPUSH
 283: CALL_OW 234
 287: GO 272
 289: POP
 290: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 291: LD_ADDR_VAR 0 1
 295: PUSH
 296: LD_INT 22
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 30
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PPUSH
 320: CALL_OW 69
 324: PUSH
 325: FOR_IN
 326: IFFALSE 350
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 328: LD_VAR 0 1
 332: PPUSH
 333: CALL_OW 274
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: LD_INT 9999
 343: PPUSH
 344: CALL_OW 277
 348: GO 325
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 2
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// if IsSelected ( rudepo ) then
 413: LD_INT 2
 415: PPUSH
 416: CALL_OW 306
 420: IFFALSE 430
// your_side = 3 ;
 422: LD_ADDR_OWVAR 2
 426: PUSH
 427: LD_INT 3
 429: ST_TO_ADDR
// if IsSelected ( JMM ) then
 430: LD_EXP 1
 434: PPUSH
 435: CALL_OW 306
 439: IFFALSE 449
// your_side = 1 ;
 441: LD_ADDR_OWVAR 2
 445: PUSH
 446: LD_INT 1
 448: ST_TO_ADDR
// end ; end_of_file
 449: PPOPN 1
 451: END
// export function PrepareHeroes ; var veh ; begin
 452: LD_INT 0
 454: PPUSH
 455: PPUSH
// uc_side = 1 ;
 456: LD_ADDR_OWVAR 20
 460: PUSH
 461: LD_INT 1
 463: ST_TO_ADDR
// uc_nation = 1 ;
 464: LD_ADDR_OWVAR 21
 468: PUSH
 469: LD_INT 1
 471: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 472: LD_ADDR_EXP 1
 476: PUSH
 477: LD_STRING JMM
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL 4525 0 2
 487: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 488: LD_ADDR_EXP 13
 492: PUSH
 493: LD_STRING Harisson
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL 4525 0 2
 503: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_STRING DeltaDoctor
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: CALL 4525 0 2
 519: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 21
 537: PUSH
 538: LD_INT 2
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 58
 547: PUSH
 548: EMPTY
 549: LIST
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PPUSH
 556: CALL_OW 69
 560: ST_TO_ADDR
// if veh > 0 then
 561: LD_VAR 0 2
 565: PUSH
 566: LD_INT 0
 568: GREATER
 569: IFFALSE 591
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 571: LD_EXP 1
 575: PPUSH
 576: LD_VAR 0 2
 580: PUSH
 581: LD_INT 1
 583: ARRAY
 584: PPUSH
 585: CALL_OW 52
// end else
 589: GO 606
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 591: LD_EXP 1
 595: PPUSH
 596: LD_INT 2
 598: PPUSH
 599: LD_INT 0
 601: PPUSH
 602: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 606: LD_STRING LisaIn06
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 30
 616: PUSH
 617: LD_INT 1
 619: EQUAL
 620: IFFALSE 724
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 1
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: LD_INT 21
 639: PUSH
 640: LD_INT 2
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: PUSH
 647: LD_INT 58
 649: PUSH
 650: EMPTY
 651: LIST
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: PPUSH
 658: CALL_OW 69
 662: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_STRING Lisa
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 4525 0 2
 678: ST_TO_ADDR
// if veh > 0 then
 679: LD_VAR 0 2
 683: PUSH
 684: LD_INT 0
 686: GREATER
 687: IFFALSE 709
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 689: LD_EXP 2
 693: PPUSH
 694: LD_VAR 0 2
 698: PUSH
 699: LD_INT 1
 701: ARRAY
 702: PPUSH
 703: CALL_OW 52
// end else
 707: GO 724
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 709: LD_EXP 2
 713: PPUSH
 714: LD_INT 2
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 724: LD_STRING BobbyIn06
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 30
 734: PUSH
 735: LD_INT 1
 737: EQUAL
 738: IFFALSE 842
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 740: LD_ADDR_VAR 0 2
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 781: LD_ADDR_EXP 3
 785: PUSH
 786: LD_STRING Bobby
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 4525 0 2
 796: ST_TO_ADDR
// if veh > 0 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_INT 0
 804: GREATER
 805: IFFALSE 827
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 807: LD_EXP 3
 811: PPUSH
 812: LD_VAR 0 2
 816: PUSH
 817: LD_INT 1
 819: ARRAY
 820: PPUSH
 821: CALL_OW 52
// end else
 825: GO 842
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 827: LD_EXP 3
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 842: LD_STRING CyrusIn06
 844: PPUSH
 845: LD_INT 0
 847: PPUSH
 848: CALL_OW 30
 852: PUSH
 853: LD_INT 1
 855: EQUAL
 856: IFFALSE 960
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 858: LD_ADDR_VAR 0 2
 862: PUSH
 863: LD_INT 22
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 21
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 58
 885: PUSH
 886: EMPTY
 887: LIST
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: PPUSH
 894: CALL_OW 69
 898: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 899: LD_ADDR_EXP 4
 903: PUSH
 904: LD_STRING Cyrus
 906: PPUSH
 907: LD_INT 1
 909: PPUSH
 910: CALL 4525 0 2
 914: ST_TO_ADDR
// if veh > 0 then
 915: LD_VAR 0 2
 919: PUSH
 920: LD_INT 0
 922: GREATER
 923: IFFALSE 945
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 925: LD_EXP 4
 929: PPUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 1
 937: ARRAY
 938: PPUSH
 939: CALL_OW 52
// end else
 943: GO 960
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 945: LD_EXP 4
 949: PPUSH
 950: LD_INT 2
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 960: LD_STRING FrankIn06
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: PUSH
 971: LD_INT 1
 973: EQUAL
 974: IFFALSE 1078
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 976: LD_ADDR_VAR 0 2
 980: PUSH
 981: LD_INT 22
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 21
 993: PUSH
 994: LD_INT 2
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 58
1003: PUSH
1004: EMPTY
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PPUSH
1012: CALL_OW 69
1016: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1017: LD_ADDR_EXP 5
1021: PUSH
1022: LD_STRING Frank
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: CALL 4525 0 2
1032: ST_TO_ADDR
// if veh > 0 then
1033: LD_VAR 0 2
1037: PUSH
1038: LD_INT 0
1040: GREATER
1041: IFFALSE 1063
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1043: LD_EXP 5
1047: PPUSH
1048: LD_VAR 0 2
1052: PUSH
1053: LD_INT 1
1055: ARRAY
1056: PPUSH
1057: CALL_OW 52
// end else
1061: GO 1078
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1063: LD_EXP 5
1067: PPUSH
1068: LD_INT 2
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1078: LD_STRING BrownIn06
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL_OW 30
1088: PUSH
1089: LD_INT 1
1091: EQUAL
1092: IFFALSE 1196
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1094: LD_ADDR_VAR 0 2
1098: PUSH
1099: LD_INT 22
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 21
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 58
1121: PUSH
1122: EMPTY
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_STRING Brown
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 4525 0 2
1150: ST_TO_ADDR
// if veh > 0 then
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 0
1158: GREATER
1159: IFFALSE 1181
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1161: LD_EXP 6
1165: PPUSH
1166: LD_VAR 0 2
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: PPUSH
1175: CALL_OW 52
// end else
1179: GO 1196
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1181: LD_EXP 6
1185: PPUSH
1186: LD_INT 2
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1196: LD_STRING DonaldsonIn06
1198: PPUSH
1199: LD_INT 0
1201: PPUSH
1202: CALL_OW 30
1206: PUSH
1207: LD_INT 1
1209: EQUAL
1210: IFFALSE 1314
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1212: LD_ADDR_VAR 0 2
1216: PUSH
1217: LD_INT 22
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 21
1229: PUSH
1230: LD_INT 2
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 58
1239: PUSH
1240: EMPTY
1241: LIST
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: LIST
1247: PPUSH
1248: CALL_OW 69
1252: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1253: LD_ADDR_EXP 7
1257: PUSH
1258: LD_STRING Donaldson
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL 4525 0 2
1268: ST_TO_ADDR
// if veh > 0 then
1269: LD_VAR 0 2
1273: PUSH
1274: LD_INT 0
1276: GREATER
1277: IFFALSE 1299
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1279: LD_EXP 7
1283: PPUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: PPUSH
1293: CALL_OW 52
// end else
1297: GO 1314
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1299: LD_EXP 7
1303: PPUSH
1304: LD_INT 2
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1314: LD_STRING GladstoneIn06
1316: PPUSH
1317: LD_INT 0
1319: PPUSH
1320: CALL_OW 30
1324: PUSH
1325: LD_INT 1
1327: EQUAL
1328: IFFALSE 1432
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1330: LD_ADDR_VAR 0 2
1334: PUSH
1335: LD_INT 22
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PUSH
1345: LD_INT 21
1347: PUSH
1348: LD_INT 2
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: LD_INT 58
1357: PUSH
1358: EMPTY
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 69
1370: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1371: LD_ADDR_EXP 8
1375: PUSH
1376: LD_STRING Gladstone
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: CALL 4525 0 2
1386: ST_TO_ADDR
// if veh > 0 then
1387: LD_VAR 0 2
1391: PUSH
1392: LD_INT 0
1394: GREATER
1395: IFFALSE 1417
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1397: LD_EXP 8
1401: PPUSH
1402: LD_VAR 0 2
1406: PUSH
1407: LD_INT 1
1409: ARRAY
1410: PPUSH
1411: CALL_OW 52
// end else
1415: GO 1432
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1417: LD_EXP 8
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 49
// end ; end ; end ;
1432: LD_VAR 0 1
1436: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
1441: PPUSH
1442: PPUSH
1443: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1444: LD_ADDR_VAR 0 5
1448: PUSH
1449: LD_STRING 06_VehiclesIn06_1
1451: PPUSH
1452: EMPTY
1453: PPUSH
1454: CALL_OW 30
1458: ST_TO_ADDR
// uc_side = 1 ;
1459: LD_ADDR_OWVAR 20
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// if vehicles > 0 then
1467: LD_VAR 0 5
1471: PUSH
1472: LD_INT 0
1474: GREATER
1475: IFFALSE 1693
// begin for i := 1 to vehicles do
1477: LD_ADDR_VAR 0 2
1481: PUSH
1482: DOUBLE
1483: LD_INT 1
1485: DEC
1486: ST_TO_ADDR
1487: LD_VAR 0 5
1491: PUSH
1492: FOR_TO
1493: IFFALSE 1691
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1495: LD_ADDR_OWVAR 21
1499: PUSH
1500: LD_VAR 0 5
1504: PUSH
1505: LD_VAR 0 2
1509: ARRAY
1510: PUSH
1511: LD_INT 1
1513: ARRAY
1514: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1515: LD_ADDR_OWVAR 37
1519: PUSH
1520: LD_VAR 0 5
1524: PUSH
1525: LD_VAR 0 2
1529: ARRAY
1530: PUSH
1531: LD_INT 2
1533: ARRAY
1534: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1535: LD_ADDR_OWVAR 39
1539: PUSH
1540: LD_VAR 0 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_INT 3
1553: ARRAY
1554: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1555: LD_ADDR_OWVAR 38
1559: PUSH
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 2
1569: ARRAY
1570: PUSH
1571: LD_INT 4
1573: ARRAY
1574: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1575: LD_ADDR_OWVAR 40
1579: PUSH
1580: LD_VAR 0 5
1584: PUSH
1585: LD_VAR 0 2
1589: ARRAY
1590: PUSH
1591: LD_INT 5
1593: ARRAY
1594: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1595: LD_ADDR_OWVAR 41
1599: PUSH
1600: LD_INT 40
1602: ST_TO_ADDR
// veh = CreateVehicle ;
1603: LD_ADDR_VAR 0 4
1607: PUSH
1608: CALL_OW 45
1612: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1613: LD_VAR 0 4
1617: PPUSH
1618: LD_INT 3
1620: PPUSH
1621: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1625: LD_VAR 0 4
1629: PPUSH
1630: LD_INT 2
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1640: LD_OWVAR 40
1644: PUSH
1645: LD_INT 12
1647: EQUAL
1648: IFFALSE 1689
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1650: LD_VAR 0 4
1654: PPUSH
1655: LD_VAR 0 5
1659: PUSH
1660: LD_VAR 0 2
1664: ARRAY
1665: PUSH
1666: LD_INT 6
1668: ARRAY
1669: PPUSH
1670: LD_VAR 0 5
1674: PUSH
1675: LD_VAR 0 2
1679: ARRAY
1680: PUSH
1681: LD_INT 7
1683: ARRAY
1684: PPUSH
1685: CALL_OW 291
// end ;
1689: GO 1492
1691: POP
1692: POP
// end ; end ;
1693: LD_VAR 0 1
1697: RET
// export function PrepareOthers ; var i , veh ; begin
1698: LD_INT 0
1700: PPUSH
1701: PPUSH
1702: PPUSH
// uc_side = 1 ;
1703: LD_ADDR_OWVAR 20
1707: PUSH
1708: LD_INT 1
1710: ST_TO_ADDR
// uc_nation = 1 ;
1711: LD_ADDR_OWVAR 21
1715: PUSH
1716: LD_INT 1
1718: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1719: LD_ADDR_EXP 11
1723: PUSH
1724: LD_STRING OthersIn06
1726: PPUSH
1727: CALL_OW 31
1731: ST_TO_ADDR
// for i in others do
1732: LD_ADDR_VAR 0 2
1736: PUSH
1737: LD_EXP 11
1741: PUSH
1742: FOR_IN
1743: IFFALSE 1833
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1745: LD_ADDR_VAR 0 3
1749: PUSH
1750: LD_INT 22
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 21
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 58
1772: PUSH
1773: EMPTY
1774: LIST
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PPUSH
1781: CALL_OW 69
1785: ST_TO_ADDR
// if veh > 0 then
1786: LD_VAR 0 3
1790: PUSH
1791: LD_INT 0
1793: GREATER
1794: IFFALSE 1816
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1796: LD_VAR 0 2
1800: PPUSH
1801: LD_VAR 0 3
1805: PUSH
1806: LD_INT 1
1808: ARRAY
1809: PPUSH
1810: CALL_OW 52
// end else
1814: GO 1831
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1816: LD_VAR 0 2
1820: PPUSH
1821: LD_INT 2
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// end ; end ;
1831: GO 1742
1833: POP
1834: POP
// end ;
1835: LD_VAR 0 1
1839: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1840: LD_INT 0
1842: PPUSH
1843: PPUSH
1844: PPUSH
// uc_side = 1 ;
1845: LD_ADDR_OWVAR 20
1849: PUSH
1850: LD_INT 1
1852: ST_TO_ADDR
// uc_nation = 0 ;
1853: LD_ADDR_OWVAR 21
1857: PUSH
1858: LD_INT 0
1860: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1861: LD_ADDR_EXP 12
1865: PUSH
1866: LD_STRING ApeIn06
1868: PPUSH
1869: CALL_OW 31
1873: ST_TO_ADDR
// for i in ape do
1874: LD_ADDR_VAR 0 2
1878: PUSH
1879: LD_EXP 12
1883: PUSH
1884: FOR_IN
1885: IFFALSE 1904
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1887: LD_VAR 0 2
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 49
1902: GO 1884
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function PrepareDenis ; begin
1911: LD_INT 0
1913: PPUSH
// uc_side = 1 ;
1914: LD_ADDR_OWVAR 20
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// uc_nation = 1 ;
1922: LD_ADDR_OWVAR 21
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1930: LD_ADDR_EXP 9
1934: PUSH
1935: LD_STRING Denis
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: CALL 4525 0 2
1945: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1946: LD_EXP 9
1950: PPUSH
1951: LD_INT 13
1953: PPUSH
1954: LD_INT 0
1956: PPUSH
1957: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_INT 4
1968: PPUSH
1969: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1973: LD_EXP 9
1977: PPUSH
1978: LD_INT 750
1980: PPUSH
1981: CALL_OW 234
// end ;
1985: LD_VAR 0 1
1989: RET
// export function HarrisonSupport ; var un , veh ; begin
1990: LD_INT 0
1992: PPUSH
1993: PPUSH
1994: PPUSH
// uc_side = 1 ;
1995: LD_ADDR_OWVAR 20
1999: PUSH
2000: LD_INT 1
2002: ST_TO_ADDR
// uc_nation = 1 ;
2003: LD_ADDR_OWVAR 21
2007: PUSH
2008: LD_INT 1
2010: ST_TO_ADDR
// vc_engine = 1 ;
2011: LD_ADDR_OWVAR 39
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// vc_control = 1 ;
2019: LD_ADDR_OWVAR 38
2023: PUSH
2024: LD_INT 1
2026: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2027: LD_ADDR_OWVAR 40
2031: PUSH
2032: LD_INT 4
2034: PUSH
2035: LD_INT 4
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_OWVAR 67
2050: ARRAY
2051: ST_TO_ADDR
// vc_chassis = 2 ;
2052: LD_ADDR_OWVAR 37
2056: PUSH
2057: LD_INT 2
2059: ST_TO_ADDR
// veh = CreateVehicle ;
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: CALL_OW 45
2069: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2082: LD_VAR 0 3
2086: PPUSH
2087: LD_INT 3
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 49
// hc_class := 2 ;
2097: LD_ADDR_OWVAR 28
2101: PUSH
2102: LD_INT 2
2104: ST_TO_ADDR
// hc_sex := sex_male ;
2105: LD_ADDR_OWVAR 27
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING SecondCharsGal
2120: ST_TO_ADDR
// hc_face_number := 52 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 52
2128: ST_TO_ADDR
// hc_name := Craig Brown ;
2129: LD_ADDR_OWVAR 26
2133: PUSH
2134: LD_STRING Craig Brown
2136: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2137: LD_ADDR_OWVAR 31
2141: PUSH
2142: LD_INT 1
2144: PUSH
2145: LD_INT 3
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 0
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2160: LD_ADDR_EXP 16
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2170: LD_EXP 16
2174: PPUSH
2175: LD_VAR 0 3
2179: PPUSH
2180: CALL_OW 52
// vc_engine = 1 ;
2184: LD_ADDR_OWVAR 39
2188: PUSH
2189: LD_INT 1
2191: ST_TO_ADDR
// vc_control = 1 ;
2192: LD_ADDR_OWVAR 38
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2200: LD_ADDR_OWVAR 40
2204: PUSH
2205: LD_INT 4
2207: PUSH
2208: LD_INT 2
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_OWVAR 67
2223: ARRAY
2224: ST_TO_ADDR
// vc_chassis = 2 ;
2225: LD_ADDR_OWVAR 37
2229: PUSH
2230: LD_INT 2
2232: ST_TO_ADDR
// veh = CreateVehicle ;
2233: LD_ADDR_VAR 0 3
2237: PUSH
2238: CALL_OW 45
2242: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2243: LD_VAR 0 3
2247: PPUSH
2248: LD_INT 2
2250: PPUSH
2251: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2255: LD_VAR 0 3
2259: PPUSH
2260: LD_INT 3
2262: PPUSH
2263: LD_INT 0
2265: PPUSH
2266: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2270: LD_VAR 0 3
2274: PPUSH
2275: LD_INT 50
2277: PPUSH
2278: CALL_OW 240
// hc_class := 1 ;
2282: LD_ADDR_OWVAR 28
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// hc_sex := sex_female ;
2290: LD_ADDR_OWVAR 27
2294: PUSH
2295: LD_INT 2
2297: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2298: LD_ADDR_OWVAR 33
2302: PUSH
2303: LD_STRING SecondCharsGal
2305: ST_TO_ADDR
// hc_face_number := 45 ;
2306: LD_ADDR_OWVAR 34
2310: PUSH
2311: LD_INT 45
2313: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2314: LD_ADDR_OWVAR 26
2318: PUSH
2319: LD_STRING Ingrid Jonsson
2321: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2322: LD_ADDR_OWVAR 31
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: LD_INT 0
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2345: LD_ADDR_EXP 17
2349: PUSH
2350: CALL_OW 44
2354: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2355: LD_EXP 17
2359: PPUSH
2360: LD_VAR 0 3
2364: PPUSH
2365: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2369: LD_VAR 0 3
2373: PPUSH
2374: LD_INT 45
2376: PPUSH
2377: CALL_OW 240
// end ;
2381: LD_VAR 0 1
2385: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2386: LD_INT 0
2388: PPUSH
2389: PPUSH
2390: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2391: LD_ADDR_VAR 0 2
2395: PUSH
2396: LD_INT 22
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 21
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 26
2418: PUSH
2419: LD_INT 1
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PUSH
2426: LD_INT 2
2428: PUSH
2429: LD_INT 25
2431: PUSH
2432: LD_INT 1
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 2
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 25
2451: PUSH
2452: LD_INT 3
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 25
2461: PUSH
2462: LD_INT 4
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: LIST
2480: LIST
2481: PPUSH
2482: CALL_OW 69
2486: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2487: LD_ADDR_VAR 0 3
2491: PUSH
2492: LD_INT 1
2494: PPUSH
2495: LD_VAR 0 2
2499: PPUSH
2500: CALL_OW 12
2504: ST_TO_ADDR
// uc_side = 4 ;
2505: LD_ADDR_OWVAR 20
2509: PUSH
2510: LD_INT 4
2512: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2513: LD_ADDR_EXP 14
2517: PUSH
2518: LD_STRING Joan
2520: PPUSH
2521: LD_INT 0
2523: PPUSH
2524: CALL 4525 0 2
2528: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2529: LD_EXP 14
2533: PPUSH
2534: LD_VAR 0 2
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PPUSH
2545: CALL_OW 250
2549: PPUSH
2550: LD_VAR 0 2
2554: PUSH
2555: LD_VAR 0 3
2559: ARRAY
2560: PPUSH
2561: CALL_OW 251
2565: PPUSH
2566: LD_INT 5
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2576: LD_EXP 14
2580: PPUSH
2581: LD_INT 250
2583: PPUSH
2584: CALL_OW 234
// InGameOn ;
2588: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2592: LD_EXP 14
2596: PPUSH
2597: CALL_OW 87
// wait ( 0 0$2 ) ;
2601: LD_INT 70
2603: PPUSH
2604: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2608: LD_VAR 0 2
2612: PUSH
2613: LD_VAR 0 3
2617: ARRAY
2618: PPUSH
2619: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2623: LD_VAR 0 2
2627: PUSH
2628: LD_VAR 0 3
2632: ARRAY
2633: PPUSH
2634: CALL_OW 122
// wait ( 0 0$1 ) ;
2638: LD_INT 35
2640: PPUSH
2641: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2645: LD_VAR 0 2
2649: PUSH
2650: LD_VAR 0 3
2654: ARRAY
2655: PPUSH
2656: LD_EXP 14
2660: PPUSH
2661: CALL_OW 112
// wait ( 0 0$2 ) ;
2665: LD_INT 70
2667: PPUSH
2668: CALL_OW 67
// DialogueOn ;
2672: CALL_OW 6
// if tmp [ rnd ] = JMM then
2676: LD_VAR 0 2
2680: PUSH
2681: LD_VAR 0 3
2685: ARRAY
2686: PUSH
2687: LD_EXP 1
2691: EQUAL
2692: IFFALSE 2819
// begin Say ( JMM , D5b-JMM-1 ) ;
2694: LD_EXP 1
2698: PPUSH
2699: LD_STRING D5b-JMM-1
2701: PPUSH
2702: CALL_OW 88
// DialogueOff ;
2706: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2710: LD_EXP 14
2714: PPUSH
2715: LD_INT 500
2717: PPUSH
2718: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2722: LD_EXP 14
2726: PPUSH
2727: LD_EXP 1
2731: PPUSH
2732: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2736: LD_EXP 1
2740: PPUSH
2741: LD_EXP 14
2745: PPUSH
2746: CALL_OW 119
// wait ( 0 0$1 ) ;
2750: LD_INT 35
2752: PPUSH
2753: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2757: LD_EXP 14
2761: PPUSH
2762: LD_STRING D5b-Joan-1
2764: PPUSH
2765: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2769: LD_EXP 1
2773: PPUSH
2774: LD_STRING D5b-JMM-2
2776: PPUSH
2777: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2781: LD_EXP 14
2785: PPUSH
2786: LD_STRING D5b-Joan-2
2788: PPUSH
2789: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2793: LD_EXP 1
2797: PPUSH
2798: LD_STRING D5b-JMM-3
2800: PPUSH
2801: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2805: LD_EXP 14
2809: PPUSH
2810: LD_STRING D5b-Joan-3
2812: PPUSH
2813: CALL_OW 88
// end else
2817: GO 3159
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_STRING D5a-Sol1-1
2832: PPUSH
2833: CALL_OW 88
// DialogueOff ;
2837: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2841: LD_EXP 14
2845: PPUSH
2846: LD_INT 500
2848: PPUSH
2849: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2853: LD_EXP 14
2857: PPUSH
2858: LD_VAR 0 2
2862: PUSH
2863: LD_VAR 0 3
2867: ARRAY
2868: PPUSH
2869: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2873: LD_VAR 0 2
2877: PUSH
2878: LD_VAR 0 3
2882: ARRAY
2883: PPUSH
2884: LD_EXP 14
2888: PPUSH
2889: CALL_OW 119
// wait ( 0 0$1 ) ;
2893: LD_INT 35
2895: PPUSH
2896: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2900: LD_EXP 14
2904: PPUSH
2905: LD_STRING D5a-Joan-1
2907: PPUSH
2908: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2912: LD_VAR 0 2
2916: PUSH
2917: LD_VAR 0 3
2921: ARRAY
2922: PPUSH
2923: LD_STRING D5a-Sol1-2
2925: PPUSH
2926: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2930: LD_EXP 14
2934: PPUSH
2935: LD_STRING D5a-Joan-2
2937: PPUSH
2938: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2942: LD_VAR 0 2
2946: PUSH
2947: LD_VAR 0 3
2951: ARRAY
2952: PPUSH
2953: LD_STRING D5a-Sol1-3
2955: PPUSH
2956: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2960: LD_EXP 14
2964: PPUSH
2965: LD_STRING D5a-Joan-3
2967: PPUSH
2968: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2972: LD_VAR 0 2
2976: PUSH
2977: LD_VAR 0 3
2981: ARRAY
2982: PPUSH
2983: LD_STRING D5a-Sol1-4
2985: PPUSH
2986: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2990: LD_EXP 1
2994: PPUSH
2995: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2999: LD_EXP 1
3003: PPUSH
3004: CALL_OW 122
// wait ( 0 0$1 ) ;
3008: LD_INT 35
3010: PPUSH
3011: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3015: LD_INT 35
3017: PPUSH
3018: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
3022: LD_EXP 14
3026: PUSH
3027: LD_VAR 0 2
3031: PUSH
3032: LD_VAR 0 3
3036: ARRAY
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PPUSH
3042: LD_EXP 1
3046: PPUSH
3047: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3051: LD_EXP 14
3055: PPUSH
3056: LD_EXP 1
3060: PPUSH
3061: CALL_OW 296
3065: PUSH
3066: LD_INT 5
3068: LESS
3069: IFFALSE 3015
// ComTurnUnit ( Joan , JMM ) ;
3071: LD_EXP 14
3075: PPUSH
3076: LD_EXP 1
3080: PPUSH
3081: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3085: LD_EXP 1
3089: PPUSH
3090: LD_EXP 14
3094: PPUSH
3095: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
3099: LD_EXP 14
3103: PPUSH
3104: LD_STRING D5a-Joan-4
3106: PPUSH
3107: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3111: LD_EXP 1
3115: PPUSH
3116: LD_STRING D5a-JMM-4
3118: PPUSH
3119: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3123: LD_EXP 14
3127: PPUSH
3128: LD_STRING D5a-Joan-5
3130: PPUSH
3131: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3135: LD_EXP 1
3139: PPUSH
3140: LD_STRING D5a-JMM-5
3142: PPUSH
3143: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3147: LD_EXP 14
3151: PPUSH
3152: LD_STRING D5a-Joan-6
3154: PPUSH
3155: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
3159: LD_EXP 1
3163: PPUSH
3164: LD_STRING D6-JMM-1
3166: PPUSH
3167: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3171: LD_EXP 14
3175: PPUSH
3176: LD_STRING D6-Joan-1
3178: PPUSH
3179: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3183: LD_EXP 1
3187: PPUSH
3188: LD_STRING D6-JMM-2
3190: PPUSH
3191: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3195: LD_EXP 14
3199: PPUSH
3200: LD_STRING D6-Joan-2
3202: PPUSH
3203: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3207: LD_EXP 1
3211: PPUSH
3212: LD_STRING D6-JMM-3
3214: PPUSH
3215: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3219: LD_EXP 14
3223: PPUSH
3224: LD_STRING D6-Joan-3
3226: PPUSH
3227: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3231: LD_EXP 1
3235: PPUSH
3236: LD_STRING D6-JMM-4
3238: PPUSH
3239: CALL_OW 88
// DialogueOff ;
3243: CALL_OW 7
// InGameOff ;
3247: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3251: LD_EXP 14
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3263: LD_STRING MJ
3265: PPUSH
3266: CALL_OW 337
// JoanStatus = 1 ;
3270: LD_ADDR_EXP 15
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// end ;
3278: LD_VAR 0 1
3282: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3283: LD_INT 0
3285: PPUSH
3286: PPUSH
// uc_side = 1 ;
3287: LD_ADDR_OWVAR 20
3291: PUSH
3292: LD_INT 1
3294: ST_TO_ADDR
// uc_nation = 1 ;
3295: LD_ADDR_OWVAR 21
3299: PUSH
3300: LD_INT 1
3302: ST_TO_ADDR
// if number = 1 then
3303: LD_VAR 0 1
3307: PUSH
3308: LD_INT 1
3310: EQUAL
3311: IFFALSE 3449
// begin hc_class := 1 ;
3313: LD_ADDR_OWVAR 28
3317: PUSH
3318: LD_INT 1
3320: ST_TO_ADDR
// hc_sex := sex_male ;
3321: LD_ADDR_OWVAR 27
3325: PUSH
3326: LD_INT 1
3328: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING AmGalRemake
3336: ST_TO_ADDR
// hc_face_number := 7 ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_INT 7
3344: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3345: LD_ADDR_OWVAR 26
3349: PUSH
3350: LD_STRING Bobby Jordan
3352: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3353: LD_ADDR_OWVAR 31
3357: PUSH
3358: LD_INT 2
3360: PUSH
3361: LD_INT 1
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 1
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: ST_TO_ADDR
// un = CreateHuman ;
3376: LD_ADDR_VAR 0 3
3380: PUSH
3381: CALL_OW 44
3385: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3386: LD_VAR 0 3
3390: PPUSH
3391: LD_INT 12
3393: PPUSH
3394: LD_INT 1
3396: PPUSH
3397: CALL_OW 49
// wait ( 0 0$1 ) ;
3401: LD_INT 35
3403: PPUSH
3404: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3408: LD_VAR 0 3
3412: PPUSH
3413: CALL_OW 87
// DialogueOn ;
3417: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_STRING D11b-Sol3-1
3428: PPUSH
3429: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3433: LD_EXP 1
3437: PPUSH
3438: LD_STRING D11b-JMM-1
3440: PPUSH
3441: CALL_OW 88
// DialogueOff ;
3445: CALL_OW 7
// end ; if number = 2 then
3449: LD_VAR 0 1
3453: PUSH
3454: LD_INT 2
3456: EQUAL
3457: IFFALSE 3595
// begin hc_class := 3 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 3
3466: ST_TO_ADDR
// hc_sex := sex_male ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 1
3474: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING SecondCharsGal
3482: ST_TO_ADDR
// hc_face_number := 55 ;
3483: LD_ADDR_OWVAR 34
3487: PUSH
3488: LD_INT 55
3490: ST_TO_ADDR
// hc_name := George McCarthy ;
3491: LD_ADDR_OWVAR 26
3495: PUSH
3496: LD_STRING George McCarthy
3498: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3499: LD_ADDR_OWVAR 31
3503: PUSH
3504: LD_INT 1
3506: PUSH
3507: LD_INT 2
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: LD_INT 1
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: ST_TO_ADDR
// un = CreateHuman ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 44
3531: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 12
3539: PPUSH
3540: LD_INT 1
3542: PPUSH
3543: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3547: LD_VAR 0 3
3551: PPUSH
3552: CALL_OW 87
// wait ( 0 0$1 ) ;
3556: LD_INT 35
3558: PPUSH
3559: CALL_OW 67
// DialogueOn ;
3563: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3567: LD_VAR 0 3
3571: PPUSH
3572: LD_STRING D11d-Sol4-1
3574: PPUSH
3575: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3579: LD_EXP 1
3583: PPUSH
3584: LD_STRING D11d-JMM-1
3586: PPUSH
3587: CALL_OW 88
// DialogueOff ;
3591: CALL_OW 7
// end ; if number = 4 then
3595: LD_VAR 0 1
3599: PUSH
3600: LD_INT 4
3602: EQUAL
3603: IFFALSE 3729
// begin hc_class := 3 ;
3605: LD_ADDR_OWVAR 28
3609: PUSH
3610: LD_INT 3
3612: ST_TO_ADDR
// hc_sex := sex_female ;
3613: LD_ADDR_OWVAR 27
3617: PUSH
3618: LD_INT 2
3620: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING SecondCharsGal
3628: ST_TO_ADDR
// hc_face_number := 46 ;
3629: LD_ADDR_OWVAR 34
3633: PUSH
3634: LD_INT 46
3636: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING Sylvia Creak
3644: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3645: LD_ADDR_OWVAR 31
3649: PUSH
3650: LD_INT 1
3652: PUSH
3653: LD_INT 3
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: LD_INT 1
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: ST_TO_ADDR
// un = CreateHuman ;
3668: LD_ADDR_VAR 0 3
3672: PUSH
3673: CALL_OW 44
3677: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3678: LD_VAR 0 3
3682: PPUSH
3683: LD_INT 12
3685: PPUSH
3686: LD_INT 1
3688: PPUSH
3689: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3693: LD_VAR 0 3
3697: PPUSH
3698: CALL_OW 87
// wait ( 0 0$1 ) ;
3702: LD_INT 35
3704: PPUSH
3705: CALL_OW 67
// DialogueOn ;
3709: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3713: LD_VAR 0 3
3717: PPUSH
3718: LD_STRING D11e-FSol4-1
3720: PPUSH
3721: CALL_OW 88
// DialogueOff ;
3725: CALL_OW 7
// end ; if number = 5 then
3729: LD_VAR 0 1
3733: PUSH
3734: LD_INT 5
3736: EQUAL
3737: IFFALSE 3875
// begin hc_class := 1 ;
3739: LD_ADDR_OWVAR 28
3743: PUSH
3744: LD_INT 1
3746: ST_TO_ADDR
// hc_sex := sex_female ;
3747: LD_ADDR_OWVAR 27
3751: PUSH
3752: LD_INT 2
3754: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3755: LD_ADDR_OWVAR 33
3759: PUSH
3760: LD_STRING SecondCharsGal
3762: ST_TO_ADDR
// hc_face_number := 37 ;
3763: LD_ADDR_OWVAR 34
3767: PUSH
3768: LD_INT 37
3770: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3771: LD_ADDR_OWVAR 26
3775: PUSH
3776: LD_STRING Margherite Simpson
3778: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3779: LD_ADDR_OWVAR 31
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 1
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: ST_TO_ADDR
// un = CreateHuman ;
3802: LD_ADDR_VAR 0 3
3806: PUSH
3807: CALL_OW 44
3811: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3812: LD_VAR 0 3
3816: PPUSH
3817: LD_INT 12
3819: PPUSH
3820: LD_INT 1
3822: PPUSH
3823: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3827: LD_VAR 0 3
3831: PPUSH
3832: CALL_OW 87
// wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// DialogueOn ;
3843: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3847: LD_VAR 0 3
3851: PPUSH
3852: LD_STRING D11c-FSol3-1
3854: PPUSH
3855: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3859: LD_EXP 1
3863: PPUSH
3864: LD_STRING D11c-JMM-1
3866: PPUSH
3867: CALL_OW 88
// DialogueOff ;
3871: CALL_OW 7
// end ; if number = 6 then
3875: LD_VAR 0 1
3879: PUSH
3880: LD_INT 6
3882: EQUAL
3883: IFFALSE 4009
// begin hc_class := 1 ;
3885: LD_ADDR_OWVAR 28
3889: PUSH
3890: LD_INT 1
3892: ST_TO_ADDR
// hc_sex := sex_male ;
3893: LD_ADDR_OWVAR 27
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3901: LD_ADDR_OWVAR 33
3905: PUSH
3906: LD_STRING AmGalRemake
3908: ST_TO_ADDR
// hc_face_number := 1 ;
3909: LD_ADDR_OWVAR 34
3913: PUSH
3914: LD_INT 1
3916: ST_TO_ADDR
// hc_name := Charles Brown ;
3917: LD_ADDR_OWVAR 26
3921: PUSH
3922: LD_STRING Charles Brown
3924: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3925: LD_ADDR_OWVAR 31
3929: PUSH
3930: LD_INT 2
3932: PUSH
3933: LD_INT 1
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: ST_TO_ADDR
// un = CreateHuman ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: CALL_OW 44
3957: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_INT 12
3965: PPUSH
3966: LD_INT 1
3968: PPUSH
3969: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3973: LD_VAR 0 3
3977: PPUSH
3978: CALL_OW 87
// wait ( 0 0$1 ) ;
3982: LD_INT 35
3984: PPUSH
3985: CALL_OW 67
// DialogueOn ;
3989: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3993: LD_VAR 0 3
3997: PPUSH
3998: LD_STRING D11f-Sol5-1
4000: PPUSH
4001: CALL_OW 88
// DialogueOff ;
4005: CALL_OW 7
// end ; if number = 7 then
4009: LD_VAR 0 1
4013: PUSH
4014: LD_INT 7
4016: EQUAL
4017: IFFALSE 4143
// begin hc_class := 1 ;
4019: LD_ADDR_OWVAR 28
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// hc_sex := sex_female ;
4027: LD_ADDR_OWVAR 27
4031: PUSH
4032: LD_INT 2
4034: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4035: LD_ADDR_OWVAR 33
4039: PUSH
4040: LD_STRING AmGalRemake
4042: ST_TO_ADDR
// hc_face_number := 2 ;
4043: LD_ADDR_OWVAR 34
4047: PUSH
4048: LD_INT 2
4050: ST_TO_ADDR
// hc_name := Johanna Holland ;
4051: LD_ADDR_OWVAR 26
4055: PUSH
4056: LD_STRING Johanna Holland
4058: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4059: LD_ADDR_OWVAR 31
4063: PUSH
4064: LD_INT 1
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: ST_TO_ADDR
// un = CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 12
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4107: LD_VAR 0 3
4111: PPUSH
4112: CALL_OW 87
// wait ( 0 0$1 ) ;
4116: LD_INT 35
4118: PPUSH
4119: CALL_OW 67
// DialogueOn ;
4123: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4127: LD_VAR 0 3
4131: PPUSH
4132: LD_STRING D11a-FSol2-1
4134: PPUSH
4135: CALL_OW 88
// DialogueOff ;
4139: CALL_OW 7
// end ; end ; end_of_file
4143: LD_VAR 0 2
4147: RET
// export function PrepareRussian ; var i ; begin
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4152: LD_INT 3
4154: PPUSH
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 2
4160: PPUSH
4161: LD_EXP 32
4165: PPUSH
4166: LD_EXP 33
4170: PPUSH
4171: CALL_OW 12
4175: PPUSH
4176: LD_INT 2
4178: PPUSH
4179: LD_INT 4
4181: PPUSH
4182: CALL 4795 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4186: LD_INT 3
4188: PPUSH
4189: LD_INT 3
4191: PPUSH
4192: LD_INT 8
4194: PPUSH
4195: LD_EXP 32
4199: PPUSH
4200: LD_EXP 33
4204: PPUSH
4205: CALL_OW 12
4209: PPUSH
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 4
4215: PPUSH
4216: CALL 4795 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 3
4225: PPUSH
4226: LD_INT 67
4228: PPUSH
4229: LD_EXP 32
4233: PPUSH
4234: LD_EXP 33
4238: PPUSH
4239: CALL_OW 12
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: LD_INT 2
4249: PPUSH
4250: CALL 4795 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4254: LD_INT 3
4256: PPUSH
4257: LD_INT 3
4259: PPUSH
4260: LD_INT 21
4262: PPUSH
4263: LD_EXP 32
4267: PPUSH
4268: LD_EXP 33
4272: PPUSH
4273: CALL_OW 12
4277: PPUSH
4278: LD_INT 3
4280: PPUSH
4281: LD_INT 6
4283: PPUSH
4284: CALL 4795 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4288: LD_INT 3
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: LD_INT 17
4296: PPUSH
4297: LD_EXP 32
4301: PPUSH
4302: LD_EXP 33
4306: PPUSH
4307: CALL_OW 12
4311: PPUSH
4312: LD_INT 3
4314: PPUSH
4315: LD_INT 6
4317: PPUSH
4318: CALL 4795 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4322: LD_INT 3
4324: PPUSH
4325: LD_INT 3
4327: PPUSH
4328: LD_INT 32
4330: PPUSH
4331: LD_EXP 32
4335: PPUSH
4336: LD_EXP 33
4340: PPUSH
4341: CALL_OW 12
4345: PPUSH
4346: LD_INT 4
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: CALL 4795 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_INT 3
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 21
4373: PUSH
4374: LD_INT 3
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 30
4383: PUSH
4384: LD_INT 32
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: PPUSH
4396: CALL_OW 69
4400: PUSH
4401: FOR_IN
4402: IFFALSE 4442
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4404: LD_INT 3
4406: PPUSH
4407: LD_INT 3
4409: PPUSH
4410: LD_VAR 0 2
4414: PPUSH
4415: LD_EXP 32
4419: PPUSH
4420: LD_EXP 33
4424: PPUSH
4425: CALL_OW 12
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 1
4435: PPUSH
4436: CALL 4795 0 6
4440: GO 4401
4442: POP
4443: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4444: LD_ADDR_VAR 0 2
4448: PUSH
4449: LD_INT 22
4451: PUSH
4452: LD_INT 3
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: PUSH
4459: LD_INT 21
4461: PUSH
4462: LD_INT 3
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 30
4471: PUSH
4472: LD_INT 31
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: LIST
4483: PPUSH
4484: CALL_OW 69
4488: PUSH
4489: FOR_IN
4490: IFFALSE 4518
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4492: LD_EXP 32
4496: PPUSH
4497: LD_EXP 33
4501: PPUSH
4502: CALL_OW 12
4506: PPUSH
4507: LD_VAR 0 2
4511: PPUSH
4512: CALL 4905 0 2
4516: GO 4489
4518: POP
4519: POP
// end ; end_of_file
4520: LD_VAR 0 1
4524: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
// if exist_mode then
4529: LD_VAR 0 2
4533: IFFALSE 4558
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4535: LD_ADDR_VAR 0 4
4539: PUSH
4540: LD_EXP 38
4544: PUSH
4545: LD_VAR 0 1
4549: STR
4550: PPUSH
4551: CALL_OW 34
4555: ST_TO_ADDR
// end else
4556: GO 4573
// begin unit := NewCharacter ( ident ) ;
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_VAR 0 1
4567: PPUSH
4568: CALL_OW 25
4572: ST_TO_ADDR
// end ; result := unit ;
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_VAR 0 4
4582: ST_TO_ADDR
// end ;
4583: LD_VAR 0 3
4587: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4588: LD_INT 0
4590: PPUSH
4591: PPUSH
4592: PPUSH
// rnd = rand ( 1 , characters ) ;
4593: LD_ADDR_VAR 0 6
4597: PUSH
4598: LD_INT 1
4600: PPUSH
4601: LD_VAR 0 1
4605: PPUSH
4606: CALL_OW 12
4610: ST_TO_ADDR
// for i = 1 to characters do
4611: LD_ADDR_VAR 0 5
4615: PUSH
4616: DOUBLE
4617: LD_INT 1
4619: DEC
4620: ST_TO_ADDR
4621: LD_VAR 0 1
4625: PUSH
4626: FOR_TO
4627: IFFALSE 4737
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4629: LD_VAR 0 5
4633: PUSH
4634: LD_VAR 0 6
4638: EQUAL
4639: PUSH
4640: LD_VAR 0 1
4644: PUSH
4645: LD_VAR 0 5
4649: ARRAY
4650: PPUSH
4651: CALL_OW 258
4655: PUSH
4656: LD_INT 1
4658: EQUAL
4659: AND
4660: IFFALSE 4682
// Say ( characters [ i ] , dialogMID ) ;
4662: LD_VAR 0 1
4666: PUSH
4667: LD_VAR 0 5
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 2
4677: PPUSH
4678: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4682: LD_VAR 0 5
4686: PUSH
4687: LD_VAR 0 6
4691: EQUAL
4692: PUSH
4693: LD_VAR 0 1
4697: PUSH
4698: LD_VAR 0 5
4702: ARRAY
4703: PPUSH
4704: CALL_OW 258
4708: PUSH
4709: LD_INT 2
4711: EQUAL
4712: AND
4713: IFFALSE 4735
// Say ( characters [ i ] , dialogFID ) ;
4715: LD_VAR 0 1
4719: PUSH
4720: LD_VAR 0 5
4724: ARRAY
4725: PPUSH
4726: LD_VAR 0 3
4730: PPUSH
4731: CALL_OW 88
// end ;
4735: GO 4626
4737: POP
4738: POP
// end ;
4739: LD_VAR 0 4
4743: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4744: LD_INT 0
4746: PPUSH
4747: PPUSH
// for i in charactersList do
4748: LD_ADDR_VAR 0 4
4752: PUSH
4753: LD_VAR 0 1
4757: PUSH
4758: FOR_IN
4759: IFFALSE 4788
// begin if IsOk ( i ) then
4761: LD_VAR 0 4
4765: PPUSH
4766: CALL_OW 302
4770: IFFALSE 4786
// SaveCharacters ( i , ident ) ;
4772: LD_VAR 0 4
4776: PPUSH
4777: LD_VAR 0 2
4781: PPUSH
4782: CALL_OW 38
// end ;
4786: GO 4758
4788: POP
4789: POP
// end ;
4790: LD_VAR 0 3
4794: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
4799: PPUSH
4800: PPUSH
// for i = 1 to count do
4801: LD_ADDR_VAR 0 8
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_VAR 0 6
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4898
// begin uc_side = side ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_VAR 0 1
4828: ST_TO_ADDR
// uc_nation = nation ;
4829: LD_ADDR_OWVAR 21
4833: PUSH
4834: LD_VAR 0 2
4838: ST_TO_ADDR
// hc_gallery =  ;
4839: LD_ADDR_OWVAR 33
4843: PUSH
4844: LD_STRING 
4846: ST_TO_ADDR
// hc_name =  ;
4847: LD_ADDR_OWVAR 26
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4855: LD_INT 0
4857: PPUSH
4858: LD_VAR 0 5
4862: PPUSH
4863: LD_VAR 0 4
4867: PPUSH
4868: CALL_OW 380
// un = CreateHuman ;
4872: LD_ADDR_VAR 0 10
4876: PUSH
4877: CALL_OW 44
4881: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4882: LD_VAR 0 10
4886: PPUSH
4887: LD_VAR 0 3
4891: PPUSH
4892: CALL_OW 52
// end ;
4896: GO 4816
4898: POP
4899: POP
// end ;
4900: LD_VAR 0 7
4904: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
4909: PPUSH
// uc_side := GetSide ( b ) ;
4910: LD_ADDR_OWVAR 20
4914: PUSH
4915: LD_VAR 0 2
4919: PPUSH
4920: CALL_OW 255
4924: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_VAR 0 2
4934: PPUSH
4935: CALL_OW 248
4939: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: LD_VAR 0 1
4950: PPUSH
4951: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4955: LD_ADDR_VAR 0 5
4959: PUSH
4960: LD_VAR 0 2
4964: PPUSH
4965: CALL_OW 254
4969: PUSH
4970: LD_INT 3
4972: MINUS
4973: ST_TO_ADDR
// if dir < 0 then
4974: LD_VAR 0 5
4978: PUSH
4979: LD_INT 0
4981: LESS
4982: IFFALSE 4998
// dir := 6 + dir ;
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: LD_VAR 0 5
4996: PLUS
4997: ST_TO_ADDR
// un := CreateHuman ;
4998: LD_ADDR_VAR 0 4
5002: PUSH
5003: CALL_OW 44
5007: ST_TO_ADDR
// SetDir ( un , dir ) ;
5008: LD_VAR 0 4
5012: PPUSH
5013: LD_VAR 0 5
5017: PPUSH
5018: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5022: LD_VAR 0 4
5026: PPUSH
5027: LD_VAR 0 2
5031: PPUSH
5032: CALL_OW 52
// end ;
5036: LD_VAR 0 3
5040: RET
// export function PrepareDifficulty ; begin
5041: LD_INT 0
5043: PPUSH
// if Difficulty = 1 then
5044: LD_OWVAR 67
5048: PUSH
5049: LD_INT 1
5051: EQUAL
5052: IFFALSE 5070
// begin RuSolMinLevel = 2 ;
5054: LD_ADDR_EXP 32
5058: PUSH
5059: LD_INT 2
5061: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5062: LD_ADDR_EXP 33
5066: PUSH
5067: LD_INT 5
5069: ST_TO_ADDR
// end ; if Difficulty = 2 then
5070: LD_OWVAR 67
5074: PUSH
5075: LD_INT 2
5077: EQUAL
5078: IFFALSE 5096
// begin RuSolMinLevel = 3 ;
5080: LD_ADDR_EXP 32
5084: PUSH
5085: LD_INT 3
5087: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5088: LD_ADDR_EXP 33
5092: PUSH
5093: LD_INT 5
5095: ST_TO_ADDR
// end ; if Difficulty = 3 then
5096: LD_OWVAR 67
5100: PUSH
5101: LD_INT 3
5103: EQUAL
5104: IFFALSE 5122
// begin RuSolMinLevel = 4 ;
5106: LD_ADDR_EXP 32
5110: PUSH
5111: LD_INT 4
5113: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5114: LD_ADDR_EXP 33
5118: PUSH
5119: LD_INT 5
5121: ST_TO_ADDR
// end ; end ;
5122: LD_VAR 0 1
5126: RET
// export function ShowQuery1 ; begin
5127: LD_INT 0
5129: PPUSH
// case query ( QKill ) of 1 :
5130: LD_STRING QKill
5132: PPUSH
5133: CALL_OW 97
5137: PUSH
5138: LD_INT 1
5140: DOUBLE
5141: EQUAL
5142: IFTRUE 5146
5144: GO 5157
5146: POP
// begin result = 1 ;
5147: LD_ADDR_VAR 0 1
5151: PUSH
5152: LD_INT 1
5154: ST_TO_ADDR
// end ; 2 :
5155: GO 5196
5157: LD_INT 2
5159: DOUBLE
5160: EQUAL
5161: IFTRUE 5165
5163: GO 5176
5165: POP
// begin result = 2 ;
5166: LD_ADDR_VAR 0 1
5170: PUSH
5171: LD_INT 2
5173: ST_TO_ADDR
// end ; 3 :
5174: GO 5196
5176: LD_INT 3
5178: DOUBLE
5179: EQUAL
5180: IFTRUE 5184
5182: GO 5195
5184: POP
// begin result = 3 ;
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 3
5192: ST_TO_ADDR
// end ; end ;
5193: GO 5196
5195: POP
// end ;
5196: LD_VAR 0 1
5200: RET
// export function ShowQuery2 ; begin
5201: LD_INT 0
5203: PPUSH
// case query ( QKill2 ) of 1 :
5204: LD_STRING QKill2
5206: PPUSH
5207: CALL_OW 97
5211: PUSH
5212: LD_INT 1
5214: DOUBLE
5215: EQUAL
5216: IFTRUE 5220
5218: GO 5231
5220: POP
// begin result = 1 ;
5221: LD_ADDR_VAR 0 1
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// end ; 2 :
5229: GO 5251
5231: LD_INT 2
5233: DOUBLE
5234: EQUAL
5235: IFTRUE 5239
5237: GO 5250
5239: POP
// begin result = 2 ;
5240: LD_ADDR_VAR 0 1
5244: PUSH
5245: LD_INT 2
5247: ST_TO_ADDR
// end ; end ;
5248: GO 5251
5250: POP
// end ;
5251: LD_VAR 0 1
5255: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
5261: PPUSH
// for i = 1 to 72 do
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: DOUBLE
5268: LD_INT 1
5270: DEC
5271: ST_TO_ADDR
5272: LD_INT 72
5274: PUSH
5275: FOR_TO
5276: IFFALSE 5334
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5278: LD_VAR 0 5
5282: PPUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL_OW 321
5292: PUSH
5293: LD_INT 1
5295: EQUAL
5296: PUSH
5297: LD_VAR 0 5
5301: PPUSH
5302: LD_VAR 0 3
5306: PPUSH
5307: CALL_OW 482
5311: PUSH
5312: LD_INT 1
5314: EQUAL
5315: AND
5316: IFFALSE 5332
// AddComResearch ( lab , i ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_VAR 0 5
5327: PPUSH
5328: CALL_OW 184
5332: GO 5275
5334: POP
5335: POP
// end ;
5336: LD_VAR 0 4
5340: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5341: LD_INT 0
5343: PPUSH
5344: PPUSH
5345: PPUSH
5346: PPUSH
5347: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5348: LD_ADDR_VAR 0 6
5352: PUSH
5353: LD_INT 22
5355: PUSH
5356: LD_VAR 0 1
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_INT 2
5367: PUSH
5368: LD_INT 25
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: LD_INT 25
5380: PUSH
5381: LD_INT 16
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 24
5395: PUSH
5396: LD_INT 1000
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: LIST
5407: PPUSH
5408: CALL_OW 69
5412: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5413: LD_ADDR_VAR 0 4
5417: PUSH
5418: LD_INT 22
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: EMPTY
5427: LIST
5428: LIST
5429: PUSH
5430: LD_INT 21
5432: PUSH
5433: LD_INT 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: LD_INT 24
5445: PUSH
5446: LD_INT 1000
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5470: LD_VAR 0 4
5474: PUSH
5475: LD_INT 0
5477: GREATER
5478: PUSH
5479: LD_VAR 0 6
5483: PUSH
5484: LD_INT 0
5486: GREATER
5487: AND
5488: IFFALSE 5554
// begin for i in engineerOk_list do
5490: LD_ADDR_VAR 0 5
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: FOR_IN
5501: IFFALSE 5552
// begin for j in buildings_list do
5503: LD_ADDR_VAR 0 7
5507: PUSH
5508: LD_VAR 0 4
5512: PUSH
5513: FOR_IN
5514: IFFALSE 5548
// begin AddComExitBuilding ( i ) ;
5516: LD_VAR 0 5
5520: PPUSH
5521: CALL_OW 182
// wait ( 0 0$1 ) ;
5525: LD_INT 35
5527: PPUSH
5528: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5532: LD_VAR 0 5
5536: PPUSH
5537: LD_VAR 0 7
5541: PPUSH
5542: CALL_OW 190
// end ;
5546: GO 5513
5548: POP
5549: POP
// end ;
5550: GO 5500
5552: POP
5553: POP
// end ; if buildings_list = 0 then
5554: LD_VAR 0 4
5558: PUSH
5559: LD_INT 0
5561: EQUAL
5562: IFFALSE 5595
// begin for i in engineerOK_list do
5564: LD_ADDR_VAR 0 5
5568: PUSH
5569: LD_VAR 0 6
5573: PUSH
5574: FOR_IN
5575: IFFALSE 5593
// begin ComEnterUnit ( i , building ) ;
5577: LD_VAR 0 5
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 120
// end ;
5591: GO 5574
5593: POP
5594: POP
// end ; end ;
5595: LD_VAR 0 3
5599: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5607: LD_ADDR_VAR 0 6
5611: PUSH
5612: LD_INT 22
5614: PUSH
5615: LD_VAR 0 1
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: PUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 4
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PPUSH
5638: CALL_OW 69
5642: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5643: LD_ADDR_VAR 0 9
5647: PUSH
5648: LD_VAR 0 3
5652: PPUSH
5653: LD_INT 22
5655: PUSH
5656: LD_VAR 0 1
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 21
5667: PUSH
5668: LD_INT 1
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: LD_INT 3
5677: PUSH
5678: LD_INT 24
5680: PUSH
5681: LD_INT 750
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5702: LD_VAR 0 9
5706: PUSH
5707: LD_INT 0
5709: GREATER
5710: PUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 0
5718: GREATER
5719: AND
5720: IFFALSE 5847
// begin for i = 1 to damageUnits do
5722: LD_ADDR_VAR 0 7
5726: PUSH
5727: DOUBLE
5728: LD_INT 1
5730: DEC
5731: ST_TO_ADDR
5732: LD_VAR 0 9
5736: PUSH
5737: FOR_TO
5738: IFFALSE 5762
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5740: LD_VAR 0 9
5744: PUSH
5745: LD_VAR 0 7
5749: ARRAY
5750: PPUSH
5751: LD_VAR 0 2
5755: PPUSH
5756: CALL_OW 113
5760: GO 5737
5762: POP
5763: POP
// for i in sci_list do
5764: LD_ADDR_VAR 0 7
5768: PUSH
5769: LD_VAR 0 6
5773: PUSH
5774: FOR_IN
5775: IFFALSE 5843
// begin ComExitBuilding ( i ) ;
5777: LD_VAR 0 7
5781: PPUSH
5782: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5786: LD_ADDR_VAR 0 8
5790: PUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: LD_INT 22
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PPUSH
5808: CALL_OW 70
5812: PUSH
5813: FOR_IN
5814: IFFALSE 5839
// begin AddComHeal ( i , j ) ;
5816: LD_VAR 0 7
5820: PPUSH
5821: LD_VAR 0 8
5825: PPUSH
5826: CALL_OW 188
// wait ( 1 1$0 ) ;
5830: LD_INT 2100
5832: PPUSH
5833: CALL_OW 67
// end ;
5837: GO 5813
5839: POP
5840: POP
// end ;
5841: GO 5774
5843: POP
5844: POP
// end else
5845: GO 5861
// begin AddComEnterUnit ( sci_list , build ) ;
5847: LD_VAR 0 6
5851: PPUSH
5852: LD_VAR 0 4
5856: PPUSH
5857: CALL_OW 180
// end ; end ;
5861: LD_VAR 0 5
5865: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5866: LD_INT 0
5868: PPUSH
5869: PPUSH
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5874: LD_INT 22
5876: PUSH
5877: LD_VAR 0 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 21
5888: PUSH
5889: LD_INT 2
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: PUSH
5905: LD_VAR 0 3
5909: LESSEQUAL
5910: IFFALSE 5977
// for i = 1 to vehCount do
5912: LD_ADDR_VAR 0 10
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_VAR 0 3
5926: PUSH
5927: FOR_TO
5928: IFFALSE 5975
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5930: LD_VAR 0 2
5934: PPUSH
5935: LD_VAR 0 8
5939: PPUSH
5940: LD_VAR 0 6
5944: PPUSH
5945: LD_VAR 0 7
5949: PPUSH
5950: LD_VAR 0 5
5954: PUSH
5955: LD_INT 1
5957: PPUSH
5958: LD_VAR 0 5
5962: PPUSH
5963: CALL_OW 12
5967: ARRAY
5968: PPUSH
5969: CALL_OW 185
5973: GO 5927
5975: POP
5976: POP
// repeat wait ( 0 0$1 ) ;
5977: LD_INT 35
5979: PPUSH
5980: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5984: LD_INT 22
5986: PUSH
5987: LD_VAR 0 1
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 21
5998: PUSH
5999: LD_INT 2
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 24
6008: PUSH
6009: LD_INT 250
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: PPUSH
6021: CALL_OW 69
6025: PUSH
6026: LD_VAR 0 3
6030: GREATEREQUAL
6031: IFFALSE 5977
// repeat begin wait ( 0 0$1 ) ;
6033: LD_INT 35
6035: PPUSH
6036: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6040: LD_ADDR_VAR 0 10
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_VAR 0 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 21
6059: PUSH
6060: LD_INT 2
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 24
6069: PUSH
6070: LD_INT 651
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: PPUSH
6082: CALL_OW 69
6086: PUSH
6087: FOR_IN
6088: IFFALSE 6264
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6090: LD_ADDR_VAR 0 13
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_VAR 0 4
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PPUSH
6107: CALL_OW 69
6111: PPUSH
6112: LD_VAR 0 10
6116: PPUSH
6117: CALL_OW 74
6121: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6122: LD_ADDR_VAR 0 14
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_VAR 0 4
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: LD_INT 2
6141: PUSH
6142: LD_INT 59
6144: PUSH
6145: EMPTY
6146: LIST
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 1
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 21
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: PPUSH
6186: LD_VAR 0 10
6190: PPUSH
6191: CALL_OW 74
6195: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6196: LD_VAR 0 10
6200: PPUSH
6201: LD_VAR 0 13
6205: PPUSH
6206: CALL_OW 296
6210: PUSH
6211: LD_INT 8
6213: PLUS
6214: PUSH
6215: LD_VAR 0 10
6219: PPUSH
6220: LD_VAR 0 14
6224: PPUSH
6225: CALL_OW 296
6229: LESS
6230: IFFALSE 6248
// begin ComAttackUnit ( i , target1 ) ;
6232: LD_VAR 0 10
6236: PPUSH
6237: LD_VAR 0 13
6241: PPUSH
6242: CALL_OW 115
// end else
6246: GO 6262
// begin ComAttackUnit ( i , target2 ) ;
6248: LD_VAR 0 10
6252: PPUSH
6253: LD_VAR 0 14
6257: PPUSH
6258: CALL_OW 115
// end ; end ;
6262: GO 6087
6264: POP
6265: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6266: LD_INT 22
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 21
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 34
6291: PUSH
6292: LD_INT 51
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: PPUSH
6308: CALL_OW 69
6312: PUSH
6313: LD_INT 0
6315: EQUAL
6316: IFFALSE 6033
// end ;
6318: LD_VAR 0 9
6322: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6323: LD_INT 0
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
// enable ;
6329: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6330: LD_ADDR_VAR 0 7
6334: PUSH
6335: LD_VAR 0 3
6339: PPUSH
6340: CALL_OW 435
6344: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6345: LD_ADDR_VAR 0 6
6349: PUSH
6350: LD_INT 22
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 34
6364: PUSH
6365: LD_VAR 0 2
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6383: LD_VAR 0 6
6387: PUSH
6388: LD_INT 0
6390: GREATER
6391: PUSH
6392: LD_VAR 0 3
6396: PPUSH
6397: CALL_OW 435
6401: AND
6402: PUSH
6403: LD_VAR 0 7
6407: PUSH
6408: LD_INT 0
6410: GREATER
6411: AND
6412: IFFALSE 6461
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6414: LD_VAR 0 6
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: PPUSH
6423: LD_VAR 0 7
6427: PUSH
6428: LD_INT 1
6430: ARRAY
6431: PPUSH
6432: LD_VAR 0 7
6436: PUSH
6437: LD_INT 2
6439: ARRAY
6440: PPUSH
6441: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6445: LD_VAR 0 6
6449: PUSH
6450: LD_INT 1
6452: ARRAY
6453: PPUSH
6454: LD_INT 100
6456: PPUSH
6457: CALL_OW 240
// end ; clear_crates := false ;
6461: LD_ADDR_VAR 0 5
6465: PUSH
6466: LD_INT 0
6468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6469: LD_INT 35
6471: PPUSH
6472: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6476: LD_VAR 0 6
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PPUSH
6485: CALL_OW 315
6489: NOT
6490: PUSH
6491: LD_VAR 0 5
6495: OR
6496: IFFALSE 6469
// end ;
6498: LD_VAR 0 4
6502: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6503: LD_INT 0
6505: PPUSH
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
6511: PPUSH
6512: PPUSH
6513: PPUSH
6514: PPUSH
6515: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6516: LD_ADDR_VAR 0 9
6520: PUSH
6521: LD_INT 22
6523: PUSH
6524: LD_VAR 0 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 21
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 24
6545: PUSH
6546: LD_INT 660
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 3
6555: PUSH
6556: LD_INT 58
6558: PUSH
6559: EMPTY
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: LD_INT 34
6571: PUSH
6572: LD_INT 53
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: PPUSH
6590: CALL_OW 69
6594: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6595: LD_ADDR_VAR 0 10
6599: PUSH
6600: LD_INT 22
6602: PUSH
6603: LD_VAR 0 1
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 21
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 3
6624: PUSH
6625: LD_INT 24
6627: PUSH
6628: LD_INT 660
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: PPUSH
6644: CALL_OW 69
6648: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6649: LD_ADDR_VAR 0 11
6653: PUSH
6654: LD_VAR 0 2
6658: PPUSH
6659: LD_INT 22
6661: PUSH
6662: LD_VAR 0 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 21
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 24
6686: PUSH
6687: LD_INT 1000
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: PPUSH
6703: CALL_OW 70
6707: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6708: LD_ADDR_VAR 0 12
6712: PUSH
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_INT 22
6720: PUSH
6721: LD_VAR 0 1
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 2
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 24
6742: PUSH
6743: LD_INT 1000
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 58
6752: PUSH
6753: EMPTY
6754: LIST
6755: PUSH
6756: LD_INT 3
6758: PUSH
6759: LD_INT 34
6761: PUSH
6762: LD_INT 53
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 70
6784: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6785: LD_ADDR_VAR 0 13
6789: PUSH
6790: EMPTY
6791: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6792: LD_ADDR_VAR 0 14
6796: PUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: LD_INT 22
6804: PUSH
6805: LD_VAR 0 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 25
6816: PUSH
6817: LD_INT 3
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 70
6832: ST_TO_ADDR
// if damageVehicle_list > 0 then
6833: LD_VAR 0 10
6837: PUSH
6838: LD_INT 0
6840: GREATER
6841: IFFALSE 6879
// begin for i in damageVehicle_list do
6843: LD_ADDR_VAR 0 7
6847: PUSH
6848: LD_VAR 0 10
6852: PUSH
6853: FOR_IN
6854: IFFALSE 6877
// begin ComMoveXY ( i , repX , repY ) ;
6856: LD_VAR 0 7
6860: PPUSH
6861: LD_VAR 0 3
6865: PPUSH
6866: LD_VAR 0 4
6870: PPUSH
6871: CALL_OW 111
// end ;
6875: GO 6853
6877: POP
6878: POP
// end ; if vehicleNeedRepair_list > 0 then
6879: LD_VAR 0 11
6883: PUSH
6884: LD_INT 0
6886: GREATER
6887: IFFALSE 6974
// begin for i in vehicleNeedRepair_list do
6889: LD_ADDR_VAR 0 7
6893: PUSH
6894: LD_VAR 0 11
6898: PUSH
6899: FOR_IN
6900: IFFALSE 6972
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6902: LD_ADDR_VAR 0 13
6906: PUSH
6907: LD_VAR 0 13
6911: PUSH
6912: LD_VAR 0 7
6916: PPUSH
6917: CALL_OW 313
6921: ADD
6922: ST_TO_ADDR
// for j in mechanicInside_list do
6923: LD_ADDR_VAR 0 8
6927: PUSH
6928: LD_VAR 0 13
6932: PUSH
6933: FOR_IN
6934: IFFALSE 6968
// begin ComExitVehicle ( i ) ;
6936: LD_VAR 0 7
6940: PPUSH
6941: CALL_OW 121
// wait ( 0 0$1 ) ;
6945: LD_INT 35
6947: PPUSH
6948: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6952: LD_VAR 0 7
6956: PPUSH
6957: LD_VAR 0 8
6961: PPUSH
6962: CALL_OW 129
// end ;
6966: GO 6933
6968: POP
6969: POP
// end ;
6970: GO 6899
6972: POP
6973: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6974: LD_VAR 0 12
6978: PUSH
6979: LD_INT 0
6981: GREATER
6982: IFFALSE 7022
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6984: LD_VAR 0 14
6988: PUSH
6989: LD_INT 1
6991: ARRAY
6992: PPUSH
6993: LD_VAR 0 12
6997: PUSH
6998: LD_INT 1
7000: ARRAY
7001: PPUSH
7002: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7006: LD_VAR 0 12
7010: PUSH
7011: LD_INT 1
7013: ARRAY
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7022: LD_VAR 0 9
7026: PUSH
7027: LD_INT 0
7029: GREATER
7030: IFFALSE 7221
// begin for i in vehicleOK_list do
7032: LD_ADDR_VAR 0 7
7036: PUSH
7037: LD_VAR 0 9
7041: PUSH
7042: FOR_IN
7043: IFFALSE 7219
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7045: LD_ADDR_VAR 0 15
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PPUSH
7062: CALL_OW 69
7066: PPUSH
7067: LD_VAR 0 7
7071: PPUSH
7072: CALL_OW 74
7076: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7077: LD_ADDR_VAR 0 16
7081: PUSH
7082: LD_INT 22
7084: PUSH
7085: LD_VAR 0 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: LD_INT 59
7099: PUSH
7100: EMPTY
7101: LIST
7102: PUSH
7103: LD_INT 21
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 2
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: PPUSH
7136: CALL_OW 69
7140: PPUSH
7141: LD_VAR 0 7
7145: PPUSH
7146: CALL_OW 74
7150: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7151: LD_VAR 0 7
7155: PPUSH
7156: LD_VAR 0 15
7160: PPUSH
7161: CALL_OW 296
7165: PUSH
7166: LD_INT 8
7168: PLUS
7169: PUSH
7170: LD_VAR 0 7
7174: PPUSH
7175: LD_VAR 0 16
7179: PPUSH
7180: CALL_OW 296
7184: LESS
7185: IFFALSE 7203
// begin ComAttackUnit ( i , target1 ) ;
7187: LD_VAR 0 7
7191: PPUSH
7192: LD_VAR 0 15
7196: PPUSH
7197: CALL_OW 115
// end else
7201: GO 7217
// begin ComAttackUnit ( i , target2 ) ;
7203: LD_VAR 0 7
7207: PPUSH
7208: LD_VAR 0 16
7212: PPUSH
7213: CALL_OW 115
// end ; end ;
7217: GO 7042
7219: POP
7220: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7221: LD_ADDR_VAR 0 7
7225: PUSH
7226: LD_VAR 0 2
7230: PPUSH
7231: LD_INT 22
7233: PUSH
7234: LD_VAR 0 1
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 25
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 70
7261: NOT
7262: PUSH
7263: FOR_IN
7264: IFFALSE 7287
// ComMoveXY ( i , repX , repY ) ;
7266: LD_VAR 0 7
7270: PPUSH
7271: LD_VAR 0 3
7275: PPUSH
7276: LD_VAR 0 4
7280: PPUSH
7281: CALL_OW 111
7285: GO 7263
7287: POP
7288: POP
// end ;
7289: LD_VAR 0 6
7293: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7298: LD_INT 22
7300: PUSH
7301: LD_VAR 0 1
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: LD_INT 0
7331: GREATER
7332: PUSH
7333: LD_INT 22
7335: PUSH
7336: LD_VAR 0 1
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 21
7347: PUSH
7348: LD_INT 3
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: LD_INT 24
7360: PUSH
7361: LD_INT 1000
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 69
7381: PUSH
7382: LD_INT 0
7384: EQUAL
7385: AND
7386: PUSH
7387: LD_VAR 0 2
7391: PUSH
7392: LD_INT 0
7394: GREATER
7395: AND
7396: IFFALSE 7495
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7398: LD_ADDR_VAR 0 4
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_VAR 0 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 25
7417: PUSH
7418: LD_INT 2
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 69
7433: PUSH
7434: FOR_IN
7435: IFFALSE 7493
// begin AddComExitBuilding ( i ) ;
7437: LD_VAR 0 4
7441: PPUSH
7442: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7446: LD_VAR 0 4
7450: PPUSH
7451: LD_VAR 0 2
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 2
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: LD_VAR 0 2
7473: PUSH
7474: LD_INT 3
7476: ARRAY
7477: PPUSH
7478: LD_VAR 0 2
7482: PUSH
7483: LD_INT 4
7485: ARRAY
7486: PPUSH
7487: CALL_OW 205
// end ;
7491: GO 7434
7493: POP
7494: POP
// end ; end ;
7495: LD_VAR 0 3
7499: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7500: LD_INT 0
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
7507: PPUSH
7508: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7509: LD_ADDR_VAR 0 7
7513: PUSH
7514: LD_INT 22
7516: PUSH
7517: LD_VAR 0 1
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 1
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 56
7538: PUSH
7539: EMPTY
7540: LIST
7541: PUSH
7542: LD_INT 24
7544: PUSH
7545: LD_INT 700
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PPUSH
7558: CALL_OW 69
7562: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7563: LD_ADDR_VAR 0 8
7567: PUSH
7568: LD_INT 22
7570: PUSH
7571: LD_VAR 0 1
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: LD_INT 30
7582: PUSH
7583: LD_INT 32
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 58
7592: PUSH
7593: EMPTY
7594: LIST
7595: PUSH
7596: LD_INT 24
7598: PUSH
7599: LD_INT 251
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 69
7616: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7617: LD_ADDR_VAR 0 10
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_VAR 0 1
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: LD_INT 25
7639: PUSH
7640: LD_INT 5
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 25
7649: PUSH
7650: LD_INT 8
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 25
7659: PUSH
7660: LD_INT 9
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7682: LD_ADDR_VAR 0 9
7686: PUSH
7687: LD_VAR 0 2
7691: PPUSH
7692: CALL_OW 313
7696: PUSH
7697: LD_VAR 0 10
7701: DIFF
7702: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7703: LD_VAR 0 8
7707: PUSH
7708: LD_INT 0
7710: EQUAL
7711: PUSH
7712: LD_VAR 0 9
7716: PUSH
7717: LD_INT 0
7719: EQUAL
7720: AND
7721: IFFALSE 7767
// begin for i in soldiers_list do
7723: LD_ADDR_VAR 0 5
7727: PUSH
7728: LD_VAR 0 7
7732: PUSH
7733: FOR_IN
7734: IFFALSE 7763
// begin if IsOK ( build ) then
7736: LD_VAR 0 2
7740: PPUSH
7741: CALL_OW 302
7745: IFFALSE 7761
// ComEnterUnit ( i , build ) ;
7747: LD_VAR 0 5
7751: PPUSH
7752: LD_VAR 0 2
7756: PPUSH
7757: CALL_OW 120
// end ;
7761: GO 7733
7763: POP
7764: POP
// end else
7765: GO 7852
// begin for i = 1 to turretList do
7767: LD_ADDR_VAR 0 5
7771: PUSH
7772: DOUBLE
7773: LD_INT 1
7775: DEC
7776: ST_TO_ADDR
7777: LD_VAR 0 8
7781: PUSH
7782: FOR_TO
7783: IFFALSE 7850
// begin for j = 1 to temp do
7785: LD_ADDR_VAR 0 6
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_VAR 0 9
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7846
// begin ComExitBuilding ( temp [ j ] ) ;
7803: LD_VAR 0 9
7807: PUSH
7808: LD_VAR 0 6
7812: ARRAY
7813: PPUSH
7814: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7818: LD_VAR 0 9
7822: PUSH
7823: LD_VAR 0 6
7827: ARRAY
7828: PPUSH
7829: LD_VAR 0 8
7833: PUSH
7834: LD_VAR 0 5
7838: ARRAY
7839: PPUSH
7840: CALL_OW 180
// end ;
7844: GO 7800
7846: POP
7847: POP
// end ;
7848: GO 7782
7850: POP
7851: POP
// end ; end ;
7852: LD_VAR 0 4
7856: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7857: LD_INT 0
7859: PPUSH
7860: PPUSH
7861: PPUSH
7862: PPUSH
7863: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7864: LD_ADDR_VAR 0 6
7868: PUSH
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 1
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 30
7886: PUSH
7887: LD_INT 31
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 30
7896: PUSH
7897: LD_INT 32
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 30
7906: PUSH
7907: LD_INT 33
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 30
7916: PUSH
7917: LD_INT 4
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: LD_INT 30
7926: PUSH
7927: LD_INT 5
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 69
7950: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7951: LD_ADDR_VAR 0 7
7955: PUSH
7956: LD_INT 22
7958: PUSH
7959: LD_VAR 0 2
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 21
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 58
7980: PUSH
7981: EMPTY
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PPUSH
7989: CALL_OW 69
7993: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7994: LD_VAR 0 6
7998: PUSH
7999: LD_INT 0
8001: GREATER
8002: PUSH
8003: LD_VAR 0 7
8007: PUSH
8008: LD_INT 0
8010: GREATER
8011: AND
8012: IFFALSE 8082
// begin for i in turretsList do
8014: LD_ADDR_VAR 0 4
8018: PUSH
8019: LD_VAR 0 6
8023: PUSH
8024: FOR_IN
8025: IFFALSE 8080
// begin for j in enemyBuildings do
8027: LD_ADDR_VAR 0 5
8031: PUSH
8032: LD_VAR 0 7
8036: PUSH
8037: FOR_IN
8038: IFFALSE 8076
// begin if GetDistUnits ( i , j ) < 20 then
8040: LD_VAR 0 4
8044: PPUSH
8045: LD_VAR 0 5
8049: PPUSH
8050: CALL_OW 296
8054: PUSH
8055: LD_INT 20
8057: LESS
8058: IFFALSE 8074
// begin ComAttackUnit ( i , j ) ;
8060: LD_VAR 0 4
8064: PPUSH
8065: LD_VAR 0 5
8069: PPUSH
8070: CALL_OW 115
// end ; end ;
8074: GO 8037
8076: POP
8077: POP
// end ;
8078: GO 8024
8080: POP
8081: POP
// end ; end ;
8082: LD_VAR 0 3
8086: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8087: LD_INT 0
8089: PPUSH
8090: PPUSH
8091: PPUSH
8092: PPUSH
8093: PPUSH
8094: PPUSH
8095: PPUSH
8096: PPUSH
8097: PPUSH
8098: PPUSH
8099: PPUSH
// for i = 1 to medicCount do
8100: LD_ADDR_VAR 0 14
8104: PUSH
8105: DOUBLE
8106: LD_INT 1
8108: DEC
8109: ST_TO_ADDR
8110: LD_VAR 0 7
8114: PUSH
8115: FOR_TO
8116: IFFALSE 8198
// begin uc_side = side ;
8118: LD_ADDR_OWVAR 20
8122: PUSH
8123: LD_VAR 0 1
8127: ST_TO_ADDR
// uc_nation = nation ;
8128: LD_ADDR_OWVAR 21
8132: PUSH
8133: LD_VAR 0 2
8137: ST_TO_ADDR
// hc_name =  ;
8138: LD_ADDR_OWVAR 26
8142: PUSH
8143: LD_STRING 
8145: ST_TO_ADDR
// hc_gallery =  ;
8146: LD_ADDR_OWVAR 33
8150: PUSH
8151: LD_STRING 
8153: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8154: LD_INT 0
8156: PPUSH
8157: LD_INT 4
8159: PPUSH
8160: LD_VAR 0 8
8164: PPUSH
8165: CALL_OW 380
// un = CreateHuman ;
8169: LD_ADDR_VAR 0 16
8173: PUSH
8174: CALL_OW 44
8178: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8179: LD_VAR 0 16
8183: PPUSH
8184: LD_VAR 0 9
8188: PPUSH
8189: LD_INT 0
8191: PPUSH
8192: CALL_OW 49
// end ;
8196: GO 8115
8198: POP
8199: POP
// for i = 1 to soldierCount do
8200: LD_ADDR_VAR 0 14
8204: PUSH
8205: DOUBLE
8206: LD_INT 1
8208: DEC
8209: ST_TO_ADDR
8210: LD_VAR 0 3
8214: PUSH
8215: FOR_TO
8216: IFFALSE 8298
// begin uc_side = side ;
8218: LD_ADDR_OWVAR 20
8222: PUSH
8223: LD_VAR 0 1
8227: ST_TO_ADDR
// uc_nation = nation ;
8228: LD_ADDR_OWVAR 21
8232: PUSH
8233: LD_VAR 0 2
8237: ST_TO_ADDR
// hc_name =  ;
8238: LD_ADDR_OWVAR 26
8242: PUSH
8243: LD_STRING 
8245: ST_TO_ADDR
// hc_gallery =  ;
8246: LD_ADDR_OWVAR 33
8250: PUSH
8251: LD_STRING 
8253: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8254: LD_INT 0
8256: PPUSH
8257: LD_INT 1
8259: PPUSH
8260: LD_VAR 0 8
8264: PPUSH
8265: CALL_OW 380
// un = CreateHuman ;
8269: LD_ADDR_VAR 0 16
8273: PUSH
8274: CALL_OW 44
8278: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8279: LD_VAR 0 16
8283: PPUSH
8284: LD_VAR 0 9
8288: PPUSH
8289: LD_INT 0
8291: PPUSH
8292: CALL_OW 49
// end ;
8296: GO 8215
8298: POP
8299: POP
// for i = 1 to sniperCount do
8300: LD_ADDR_VAR 0 14
8304: PUSH
8305: DOUBLE
8306: LD_INT 1
8308: DEC
8309: ST_TO_ADDR
8310: LD_VAR 0 4
8314: PUSH
8315: FOR_TO
8316: IFFALSE 8398
// begin uc_side = side ;
8318: LD_ADDR_OWVAR 20
8322: PUSH
8323: LD_VAR 0 1
8327: ST_TO_ADDR
// uc_nation = nation ;
8328: LD_ADDR_OWVAR 21
8332: PUSH
8333: LD_VAR 0 2
8337: ST_TO_ADDR
// hc_name =  ;
8338: LD_ADDR_OWVAR 26
8342: PUSH
8343: LD_STRING 
8345: ST_TO_ADDR
// hc_gallery =  ;
8346: LD_ADDR_OWVAR 33
8350: PUSH
8351: LD_STRING 
8353: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8354: LD_INT 0
8356: PPUSH
8357: LD_INT 5
8359: PPUSH
8360: LD_VAR 0 8
8364: PPUSH
8365: CALL_OW 380
// un = CreateHuman ;
8369: LD_ADDR_VAR 0 16
8373: PUSH
8374: CALL_OW 44
8378: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8379: LD_VAR 0 16
8383: PPUSH
8384: LD_VAR 0 9
8388: PPUSH
8389: LD_INT 0
8391: PPUSH
8392: CALL_OW 49
// end ;
8396: GO 8315
8398: POP
8399: POP
// for i = 1 to bazookCount do
8400: LD_ADDR_VAR 0 14
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_VAR 0 5
8414: PUSH
8415: FOR_TO
8416: IFFALSE 8498
// begin uc_side = side ;
8418: LD_ADDR_OWVAR 20
8422: PUSH
8423: LD_VAR 0 1
8427: ST_TO_ADDR
// uc_nation = nation ;
8428: LD_ADDR_OWVAR 21
8432: PUSH
8433: LD_VAR 0 2
8437: ST_TO_ADDR
// hc_name =  ;
8438: LD_ADDR_OWVAR 26
8442: PUSH
8443: LD_STRING 
8445: ST_TO_ADDR
// hc_gallery =  ;
8446: LD_ADDR_OWVAR 33
8450: PUSH
8451: LD_STRING 
8453: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8454: LD_INT 0
8456: PPUSH
8457: LD_INT 9
8459: PPUSH
8460: LD_VAR 0 8
8464: PPUSH
8465: CALL_OW 380
// un = CreateHuman ;
8469: LD_ADDR_VAR 0 16
8473: PUSH
8474: CALL_OW 44
8478: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8479: LD_VAR 0 16
8483: PPUSH
8484: LD_VAR 0 9
8488: PPUSH
8489: LD_INT 0
8491: PPUSH
8492: CALL_OW 49
// end ;
8496: GO 8415
8498: POP
8499: POP
// for i = 1 to mortalCount do
8500: LD_ADDR_VAR 0 14
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_VAR 0 6
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8598
// begin uc_side = side ;
8518: LD_ADDR_OWVAR 20
8522: PUSH
8523: LD_VAR 0 1
8527: ST_TO_ADDR
// uc_nation = nation ;
8528: LD_ADDR_OWVAR 21
8532: PUSH
8533: LD_VAR 0 2
8537: ST_TO_ADDR
// hc_name =  ;
8538: LD_ADDR_OWVAR 26
8542: PUSH
8543: LD_STRING 
8545: ST_TO_ADDR
// hc_gallery =  ;
8546: LD_ADDR_OWVAR 33
8550: PUSH
8551: LD_STRING 
8553: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8554: LD_INT 0
8556: PPUSH
8557: LD_INT 8
8559: PPUSH
8560: LD_VAR 0 8
8564: PPUSH
8565: CALL_OW 380
// un = CreateHuman ;
8569: LD_ADDR_VAR 0 16
8573: PUSH
8574: CALL_OW 44
8578: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8579: LD_VAR 0 16
8583: PPUSH
8584: LD_VAR 0 9
8588: PPUSH
8589: LD_INT 0
8591: PPUSH
8592: CALL_OW 49
// end ;
8596: GO 8515
8598: POP
8599: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8600: LD_ADDR_VAR 0 19
8604: PUSH
8605: LD_INT 22
8607: PUSH
8608: LD_VAR 0 1
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: LD_INT 25
8622: PUSH
8623: LD_INT 1
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 25
8632: PUSH
8633: LD_INT 5
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 25
8642: PUSH
8643: LD_INT 8
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 25
8652: PUSH
8653: LD_INT 9
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PPUSH
8671: CALL_OW 69
8675: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8676: LD_ADDR_VAR 0 18
8680: PUSH
8681: LD_INT 22
8683: PUSH
8684: LD_VAR 0 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 25
8695: PUSH
8696: LD_INT 4
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 69
8711: ST_TO_ADDR
// for i in medic_list do
8712: LD_ADDR_VAR 0 14
8716: PUSH
8717: LD_VAR 0 18
8721: PUSH
8722: FOR_IN
8723: IFFALSE 8741
// ComMoveToArea ( i , healArea ) ;
8725: LD_VAR 0 14
8729: PPUSH
8730: LD_VAR 0 10
8734: PPUSH
8735: CALL_OW 113
8739: GO 8722
8741: POP
8742: POP
// if strategy = 1 then
8743: LD_VAR 0 12
8747: PUSH
8748: LD_INT 1
8750: EQUAL
8751: IFFALSE 9456
// begin repeat wait ( 0 0$3 ) ;
8753: LD_INT 105
8755: PPUSH
8756: CALL_OW 67
// for i in soldiersOK_list do
8760: LD_ADDR_VAR 0 14
8764: PUSH
8765: LD_VAR 0 19
8769: PUSH
8770: FOR_IN
8771: IFFALSE 8805
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8773: LD_VAR 0 14
8777: PPUSH
8778: LD_INT 80
8780: PPUSH
8781: LD_INT 109
8783: PPUSH
8784: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8788: LD_VAR 0 14
8792: PPUSH
8793: LD_INT 39
8795: PPUSH
8796: LD_INT 49
8798: PPUSH
8799: CALL_OW 174
// end ;
8803: GO 8770
8805: POP
8806: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8807: LD_INT 15
8809: PPUSH
8810: LD_INT 22
8812: PUSH
8813: LD_VAR 0 1
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 70
8826: PUSH
8827: LD_INT 0
8829: GREATER
8830: IFFALSE 8753
// repeat wait ( 0 0$1 ) ;
8832: LD_INT 35
8834: PPUSH
8835: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8839: LD_ADDR_VAR 0 17
8843: PUSH
8844: LD_INT 22
8846: PUSH
8847: LD_VAR 0 1
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: LD_INT 3
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: LD_INT 550
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 24
8878: PUSH
8879: LD_INT 250
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8900: LD_ADDR_VAR 0 19
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_VAR 0 1
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PUSH
8917: LD_INT 2
8919: PUSH
8920: LD_INT 25
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 5
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 25
8942: PUSH
8943: LD_INT 8
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 25
8952: PUSH
8953: LD_INT 9
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 24
8969: PUSH
8970: LD_INT 1000
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 69
8986: ST_TO_ADDR
// if medicCount > 0 then
8987: LD_VAR 0 7
8991: PUSH
8992: LD_INT 0
8994: GREATER
8995: IFFALSE 9069
// begin if damageUnit_list > 0 then
8997: LD_VAR 0 17
9001: PUSH
9002: LD_INT 0
9004: GREATER
9005: IFFALSE 9069
// begin for i in damageUnit_list do
9007: LD_ADDR_VAR 0 14
9011: PUSH
9012: LD_VAR 0 17
9016: PUSH
9017: FOR_IN
9018: IFFALSE 9067
// begin ComMoveToArea ( i , healArea ) ;
9020: LD_VAR 0 14
9024: PPUSH
9025: LD_VAR 0 10
9029: PPUSH
9030: CALL_OW 113
// for j in medic_list do
9034: LD_ADDR_VAR 0 15
9038: PUSH
9039: LD_VAR 0 18
9043: PUSH
9044: FOR_IN
9045: IFFALSE 9063
// AddComHeal ( j , i ) ;
9047: LD_VAR 0 15
9051: PPUSH
9052: LD_VAR 0 14
9056: PPUSH
9057: CALL_OW 188
9061: GO 9044
9063: POP
9064: POP
// end ;
9065: GO 9017
9067: POP
9068: POP
// end ; end ; for i in soldiersOK_list do
9069: LD_ADDR_VAR 0 14
9073: PUSH
9074: LD_VAR 0 19
9078: PUSH
9079: FOR_IN
9080: IFFALSE 9256
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9082: LD_ADDR_VAR 0 22
9086: PUSH
9087: LD_INT 22
9089: PUSH
9090: LD_VAR 0 11
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 69
9103: PPUSH
9104: LD_VAR 0 14
9108: PPUSH
9109: CALL_OW 74
9113: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9114: LD_ADDR_VAR 0 23
9118: PUSH
9119: LD_INT 22
9121: PUSH
9122: LD_VAR 0 11
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 59
9136: PUSH
9137: EMPTY
9138: LIST
9139: PUSH
9140: LD_INT 21
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: PPUSH
9173: CALL_OW 69
9177: PPUSH
9178: LD_VAR 0 14
9182: PPUSH
9183: CALL_OW 74
9187: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9188: LD_VAR 0 14
9192: PPUSH
9193: LD_VAR 0 22
9197: PPUSH
9198: CALL_OW 296
9202: PUSH
9203: LD_INT 8
9205: PLUS
9206: PUSH
9207: LD_VAR 0 14
9211: PPUSH
9212: LD_VAR 0 23
9216: PPUSH
9217: CALL_OW 296
9221: LESS
9222: IFFALSE 9240
// begin ComAttackUnit ( i , target1 ) ;
9224: LD_VAR 0 14
9228: PPUSH
9229: LD_VAR 0 22
9233: PPUSH
9234: CALL_OW 115
// end else
9238: GO 9254
// begin ComAttackUnit ( i , target2 ) ;
9240: LD_VAR 0 14
9244: PPUSH
9245: LD_VAR 0 23
9249: PPUSH
9250: CALL_OW 115
// end ; end ;
9254: GO 9079
9256: POP
9257: POP
// for i in soldiersOK_list do
9258: LD_ADDR_VAR 0 14
9262: PUSH
9263: LD_VAR 0 19
9267: PUSH
9268: FOR_IN
9269: IFFALSE 9445
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9271: LD_ADDR_VAR 0 22
9275: PUSH
9276: LD_INT 22
9278: PUSH
9279: LD_VAR 0 11
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 69
9292: PPUSH
9293: LD_VAR 0 14
9297: PPUSH
9298: CALL_OW 74
9302: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9303: LD_ADDR_VAR 0 23
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_VAR 0 11
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 59
9325: PUSH
9326: EMPTY
9327: LIST
9328: PUSH
9329: LD_INT 21
9331: PUSH
9332: LD_INT 1
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 2
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: PPUSH
9362: CALL_OW 69
9366: PPUSH
9367: LD_VAR 0 14
9371: PPUSH
9372: CALL_OW 74
9376: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9377: LD_VAR 0 14
9381: PPUSH
9382: LD_VAR 0 22
9386: PPUSH
9387: CALL_OW 296
9391: PUSH
9392: LD_INT 8
9394: PLUS
9395: PUSH
9396: LD_VAR 0 14
9400: PPUSH
9401: LD_VAR 0 23
9405: PPUSH
9406: CALL_OW 296
9410: LESS
9411: IFFALSE 9429
// begin ComAttackUnit ( i , target1 ) ;
9413: LD_VAR 0 14
9417: PPUSH
9418: LD_VAR 0 22
9422: PPUSH
9423: CALL_OW 115
// end else
9427: GO 9443
// begin ComAttackUnit ( i , target2 ) ;
9429: LD_VAR 0 14
9433: PPUSH
9434: LD_VAR 0 23
9438: PPUSH
9439: CALL_OW 115
// end ; end ;
9443: GO 9268
9445: POP
9446: POP
// until soldiersOK_list = [ ] ;
9447: LD_VAR 0 19
9451: PUSH
9452: EMPTY
9453: EQUAL
9454: IFFALSE 8832
// end ; if strategy = 2 then
9456: LD_VAR 0 12
9460: PUSH
9461: LD_INT 2
9463: EQUAL
9464: IFFALSE 10169
// begin repeat wait ( 0 0$1 ) ;
9466: LD_INT 35
9468: PPUSH
9469: CALL_OW 67
// for i in soldiersOK_list do
9473: LD_ADDR_VAR 0 14
9477: PUSH
9478: LD_VAR 0 19
9482: PUSH
9483: FOR_IN
9484: IFFALSE 9518
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9486: LD_VAR 0 14
9490: PPUSH
9491: LD_INT 117
9493: PPUSH
9494: LD_INT 97
9496: PPUSH
9497: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9501: LD_VAR 0 14
9505: PPUSH
9506: LD_INT 94
9508: PPUSH
9509: LD_INT 50
9511: PPUSH
9512: CALL_OW 174
// end ;
9516: GO 9483
9518: POP
9519: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9520: LD_INT 16
9522: PPUSH
9523: LD_INT 22
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PPUSH
9535: CALL_OW 70
9539: PUSH
9540: LD_INT 0
9542: GREATER
9543: IFFALSE 9466
// repeat wait ( 0 0$3 ) ;
9545: LD_INT 105
9547: PPUSH
9548: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9552: LD_ADDR_VAR 0 17
9556: PUSH
9557: LD_INT 22
9559: PUSH
9560: LD_VAR 0 1
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 1
9571: PUSH
9572: LD_INT 3
9574: PUSH
9575: LD_INT 24
9577: PUSH
9578: LD_INT 550
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: PUSH
9589: LD_INT 24
9591: PUSH
9592: LD_INT 250
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PPUSH
9608: CALL_OW 69
9612: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9613: LD_ADDR_VAR 0 19
9617: PUSH
9618: LD_INT 22
9620: PUSH
9621: LD_VAR 0 1
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 2
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 1
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 25
9665: PUSH
9666: LD_INT 9
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 24
9682: PUSH
9683: LD_INT 1000
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: PPUSH
9695: CALL_OW 69
9699: ST_TO_ADDR
// if medicCount > 0 then
9700: LD_VAR 0 7
9704: PUSH
9705: LD_INT 0
9707: GREATER
9708: IFFALSE 9782
// begin if damageUnit_list > 0 then
9710: LD_VAR 0 17
9714: PUSH
9715: LD_INT 0
9717: GREATER
9718: IFFALSE 9782
// begin for i in damageUnit_list do
9720: LD_ADDR_VAR 0 14
9724: PUSH
9725: LD_VAR 0 17
9729: PUSH
9730: FOR_IN
9731: IFFALSE 9780
// begin ComMoveToArea ( i , healArea ) ;
9733: LD_VAR 0 14
9737: PPUSH
9738: LD_VAR 0 10
9742: PPUSH
9743: CALL_OW 113
// for j in medic_list do
9747: LD_ADDR_VAR 0 15
9751: PUSH
9752: LD_VAR 0 18
9756: PUSH
9757: FOR_IN
9758: IFFALSE 9776
// AddComHeal ( j , i ) ;
9760: LD_VAR 0 15
9764: PPUSH
9765: LD_VAR 0 14
9769: PPUSH
9770: CALL_OW 188
9774: GO 9757
9776: POP
9777: POP
// end ;
9778: GO 9730
9780: POP
9781: POP
// end ; end ; for i in soldiersOK_list do
9782: LD_ADDR_VAR 0 14
9786: PUSH
9787: LD_VAR 0 19
9791: PUSH
9792: FOR_IN
9793: IFFALSE 9969
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9795: LD_ADDR_VAR 0 22
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_VAR 0 11
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL_OW 69
9816: PPUSH
9817: LD_VAR 0 14
9821: PPUSH
9822: CALL_OW 74
9826: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9827: LD_ADDR_VAR 0 23
9831: PUSH
9832: LD_INT 22
9834: PUSH
9835: LD_VAR 0 11
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: LD_INT 59
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 1
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 21
9865: PUSH
9866: LD_INT 2
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: EMPTY
9884: LIST
9885: PPUSH
9886: CALL_OW 69
9890: PPUSH
9891: LD_VAR 0 14
9895: PPUSH
9896: CALL_OW 74
9900: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9901: LD_VAR 0 14
9905: PPUSH
9906: LD_VAR 0 22
9910: PPUSH
9911: CALL_OW 296
9915: PUSH
9916: LD_INT 8
9918: PLUS
9919: PUSH
9920: LD_VAR 0 14
9924: PPUSH
9925: LD_VAR 0 23
9929: PPUSH
9930: CALL_OW 296
9934: LESS
9935: IFFALSE 9953
// begin ComAttackUnit ( i , target1 ) ;
9937: LD_VAR 0 14
9941: PPUSH
9942: LD_VAR 0 22
9946: PPUSH
9947: CALL_OW 115
// end else
9951: GO 9967
// begin ComAttackUnit ( i , target2 ) ;
9953: LD_VAR 0 14
9957: PPUSH
9958: LD_VAR 0 23
9962: PPUSH
9963: CALL_OW 115
// end ; end ;
9967: GO 9792
9969: POP
9970: POP
// for i in soldiersOK_list do
9971: LD_ADDR_VAR 0 14
9975: PUSH
9976: LD_VAR 0 19
9980: PUSH
9981: FOR_IN
9982: IFFALSE 10158
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9984: LD_ADDR_VAR 0 22
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_VAR 0 11
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 69
10005: PPUSH
10006: LD_VAR 0 14
10010: PPUSH
10011: CALL_OW 74
10015: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10016: LD_ADDR_VAR 0 23
10020: PUSH
10021: LD_INT 22
10023: PUSH
10024: LD_VAR 0 11
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 59
10038: PUSH
10039: EMPTY
10040: LIST
10041: PUSH
10042: LD_INT 21
10044: PUSH
10045: LD_INT 1
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 21
10054: PUSH
10055: LD_INT 2
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: PPUSH
10080: LD_VAR 0 14
10084: PPUSH
10085: CALL_OW 74
10089: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10090: LD_VAR 0 14
10094: PPUSH
10095: LD_VAR 0 22
10099: PPUSH
10100: CALL_OW 296
10104: PUSH
10105: LD_INT 8
10107: PLUS
10108: PUSH
10109: LD_VAR 0 14
10113: PPUSH
10114: LD_VAR 0 23
10118: PPUSH
10119: CALL_OW 296
10123: LESS
10124: IFFALSE 10142
// begin ComAttackUnit ( i , target1 ) ;
10126: LD_VAR 0 14
10130: PPUSH
10131: LD_VAR 0 22
10135: PPUSH
10136: CALL_OW 115
// end else
10140: GO 10156
// begin ComAttackUnit ( i , target2 ) ;
10142: LD_VAR 0 14
10146: PPUSH
10147: LD_VAR 0 23
10151: PPUSH
10152: CALL_OW 115
// end ; end ;
10156: GO 9981
10158: POP
10159: POP
// until soldiersOK_list = [ ] ;
10160: LD_VAR 0 19
10164: PUSH
10165: EMPTY
10166: EQUAL
10167: IFFALSE 9545
// end ; end ; end_of_file
10169: LD_VAR 0 13
10173: RET
// every 0 0$01 do
10174: GO 10176
10176: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10177: LD_INT 22
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 2
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 69
10205: PUSH
10206: LD_INT 0
10208: EQUAL
10209: IFFALSE 10223
// SetClass ( JMM , 2 ) ;
10211: LD_EXP 1
10215: PPUSH
10216: LD_INT 2
10218: PPUSH
10219: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10223: LD_STRING M1
10225: PPUSH
10226: CALL_OW 337
// case difficulty of 1 :
10230: LD_OWVAR 67
10234: PUSH
10235: LD_INT 1
10237: DOUBLE
10238: EQUAL
10239: IFTRUE 10243
10241: GO 10253
10243: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10244: LD_STRING M1-1
10246: PPUSH
10247: CALL_OW 337
10251: GO 10290
10253: LD_INT 2
10255: DOUBLE
10256: EQUAL
10257: IFTRUE 10261
10259: GO 10271
10261: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10262: LD_STRING M1-2
10264: PPUSH
10265: CALL_OW 337
10269: GO 10290
10271: LD_INT 3
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10289
10279: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10280: LD_STRING M1-3
10282: PPUSH
10283: CALL_OW 337
10287: GO 10290
10289: POP
// ChangeMissionObjectives ( M1cont ) ;
10290: LD_STRING M1cont
10292: PPUSH
10293: CALL_OW 337
// SaveForQuickRestart ;
10297: CALL_OW 22
// end ;
10301: END
// every 0 0$1 do
10302: GO 10304
10304: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10305: LD_INT 350
10307: PPUSH
10308: LD_INT 875
10310: PPUSH
10311: CALL_OW 12
10315: PPUSH
10316: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10320: LD_INT 5
10322: PPUSH
10323: LD_INT 4
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 55
// wait ( 0 0$15 ) ;
10333: LD_INT 525
10335: PPUSH
10336: CALL_OW 67
// if IsOk ( Lisa ) then
10340: LD_EXP 2
10344: PPUSH
10345: CALL_OW 302
10349: IFFALSE 10365
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10351: LD_EXP 2
10355: PPUSH
10356: LD_STRING DR0-Lisa-1
10358: PPUSH
10359: CALL_OW 88
// end else
10363: GO 10515
// begin if IsOK ( Cyrus ) then
10365: LD_EXP 4
10369: PPUSH
10370: CALL_OW 302
10374: IFFALSE 10390
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10376: LD_EXP 4
10380: PPUSH
10381: LD_STRING DR0-Cyrus-1
10383: PPUSH
10384: CALL_OW 88
// end else
10388: GO 10515
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10390: LD_INT 22
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: LD_INT 25
10415: PUSH
10416: LD_INT 1
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 25
10425: PUSH
10426: LD_INT 2
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 25
10435: PUSH
10436: LD_INT 3
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 25
10445: PUSH
10446: LD_INT 4
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 26
10462: PUSH
10463: LD_INT 1
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: EMPTY
10477: LIST
10478: PPUSH
10479: CALL_OW 69
10483: PUSH
10484: LD_EXP 1
10488: PUSH
10489: LD_EXP 8
10493: PUSH
10494: LD_EXP 5
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: DIFF
10504: PPUSH
10505: LD_STRING DR0-Sol1-1
10507: PPUSH
10508: LD_STRING DR0-Sol1-1
10510: PPUSH
10511: CALL 4588 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10515: LD_INT 22
10517: PUSH
10518: LD_INT 1
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 25
10540: PUSH
10541: LD_INT 1
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 2
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 25
10570: PUSH
10571: LD_INT 4
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 26
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: PPUSH
10604: CALL_OW 69
10608: PUSH
10609: LD_EXP 1
10613: PUSH
10614: LD_EXP 8
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: DIFF
10623: PPUSH
10624: LD_STRING DR0-Sol2-1
10626: PPUSH
10627: LD_STRING DR0-Sol2-1
10629: PPUSH
10630: CALL 4588 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10634: LD_EXP 1
10638: PPUSH
10639: LD_STRING DR0-JMM-1
10641: PPUSH
10642: CALL_OW 88
// end ;
10646: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10647: LD_EXP 5
10651: PPUSH
10652: CALL_OW 302
10656: PUSH
10657: LD_INT 22
10659: PUSH
10660: LD_INT 1
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 25
10669: PUSH
10670: LD_INT 16
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 69
10685: PUSH
10686: LD_INT 0
10688: GREATER
10689: AND
10690: IFFALSE 10968
10692: GO 10694
10694: DISABLE
// begin DialogueOn ;
10695: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10699: LD_EXP 5
10703: PPUSH
10704: LD_STRING D10-Frank-1
10706: PPUSH
10707: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10711: LD_INT 22
10713: PUSH
10714: LD_INT 1
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 21
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 25
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: LD_INT 25
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 25
10756: PUSH
10757: LD_INT 3
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 25
10766: PUSH
10767: LD_INT 4
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: PPUSH
10786: CALL_OW 69
10790: PUSH
10791: LD_EXP 1
10795: PUSH
10796: LD_EXP 5
10800: PUSH
10801: LD_EXP 2
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: LIST
10810: DIFF
10811: PPUSH
10812: LD_STRING D10-Sol1-1
10814: PPUSH
10815: LD_STRING D10-FSol1-1
10817: PPUSH
10818: CALL 4588 0 3
// Say ( Frank , D10-Frank-2 ) ;
10822: LD_EXP 5
10826: PPUSH
10827: LD_STRING D10-Frank-2
10829: PPUSH
10830: CALL_OW 88
// if IsOK ( Lisa ) then
10834: LD_EXP 2
10838: PPUSH
10839: CALL_OW 302
10843: IFFALSE 10859
// begin Say ( Lisa , D10-Lisa-2 ) ;
10845: LD_EXP 2
10849: PPUSH
10850: LD_STRING D10-Lisa-2
10852: PPUSH
10853: CALL_OW 88
// end else
10857: GO 10964
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10859: LD_INT 22
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 3
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 4
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: PUSH
10939: LD_EXP 1
10943: PUSH
10944: LD_EXP 5
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: DIFF
10953: PPUSH
10954: LD_STRING D10-Sol1-2
10956: PPUSH
10957: LD_STRING D10-FSol1-2
10959: PPUSH
10960: CALL 4588 0 3
// end ; DialogueOff ;
10964: CALL_OW 7
// end ;
10968: END
// every 10 10$30 do
10969: GO 10971
10971: DISABLE
// begin HarrisonSupport ;
10972: CALL 1990 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10976: LD_EXP 16
10980: PPUSH
10981: CALL_OW 310
10985: PPUSH
10986: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10990: LD_EXP 16
10994: PPUSH
10995: LD_STRING DEng-Eng1-1
10997: PPUSH
10998: CALL_OW 88
// wait ( 1 1$0 ) ;
11002: LD_INT 2100
11004: PPUSH
11005: CALL_OW 67
// DialogueOn ;
11009: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11013: LD_EXP 13
11017: PPUSH
11018: LD_STRING DRem-Har-1
11020: PPUSH
11021: CALL_OW 94
// if contactWithRussian = 1 then
11025: LD_EXP 21
11029: PUSH
11030: LD_INT 1
11032: EQUAL
11033: IFFALSE 11049
// begin Say ( JMM , DRem-JMM-1 ) ;
11035: LD_EXP 1
11039: PPUSH
11040: LD_STRING DRem-JMM-1
11042: PPUSH
11043: CALL_OW 88
// end else
11047: GO 11061
// begin Say ( JMM , DRem-JMM-1a ) ;
11049: LD_EXP 1
11053: PPUSH
11054: LD_STRING DRem-JMM-1a
11056: PPUSH
11057: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11061: LD_EXP 13
11065: PPUSH
11066: LD_STRING DRem-Har-2
11068: PPUSH
11069: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11073: LD_STRING DenisInDelta
11075: PPUSH
11076: LD_INT 0
11078: PPUSH
11079: CALL_OW 30
11083: PUSH
11084: LD_INT 1
11086: EQUAL
11087: IFFALSE 11103
// begin Say ( JMM , DRem-JMM-2 ) ;
11089: LD_EXP 1
11093: PPUSH
11094: LD_STRING DRem-JMM-2
11096: PPUSH
11097: CALL_OW 88
// end else
11101: GO 11115
// begin Say ( JMM , DRem-JMM-2a ) ;
11103: LD_EXP 1
11107: PPUSH
11108: LD_STRING DRem-JMM-2a
11110: PPUSH
11111: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11115: LD_EXP 13
11119: PPUSH
11120: LD_STRING DRem-Har-3
11122: PPUSH
11123: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11127: LD_EXP 1
11131: PPUSH
11132: LD_STRING DRem-JMM-3
11134: PPUSH
11135: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11139: LD_EXP 13
11143: PPUSH
11144: LD_STRING DRem-Har-4
11146: PPUSH
11147: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11151: LD_STRING DenisInDelta
11153: PPUSH
11154: LD_INT 0
11156: PPUSH
11157: CALL_OW 30
11161: PUSH
11162: LD_INT 1
11164: EQUAL
11165: IFFALSE 11193
// begin Say ( JMM , DRem-JMM-4 ) ;
11167: LD_EXP 1
11171: PPUSH
11172: LD_STRING DRem-JMM-4
11174: PPUSH
11175: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11179: LD_EXP 13
11183: PPUSH
11184: LD_STRING DRem-Har-5
11186: PPUSH
11187: CALL_OW 94
// end else
11191: GO 11226
// begin SetRestrict ( 36 , 1 , true ) ;
11193: LD_INT 36
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11206: LD_INT 15
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11219: LD_STRING MR
11221: PPUSH
11222: CALL_OW 337
// end ; DialogueOff ;
11226: CALL_OW 7
// end ;
11230: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11231: LD_STRING DenisInDelta
11233: PPUSH
11234: LD_INT 0
11236: PPUSH
11237: CALL_OW 30
11241: PUSH
11242: LD_INT 1
11244: EQUAL
11245: IFFALSE 11376
11247: GO 11249
11249: DISABLE
// begin PrepareDenis ;
11250: CALL 1911 0 0
// CenterNowOnUnits ( Denis ) ;
11254: LD_EXP 9
11258: PPUSH
11259: CALL_OW 87
// DialogueOn ;
11263: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11267: LD_EXP 9
11271: PPUSH
11272: LD_STRING DDen-Den-1
11274: PPUSH
11275: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11279: LD_EXP 1
11283: PPUSH
11284: LD_STRING DDen-JMM-1
11286: PPUSH
11287: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11291: LD_EXP 9
11295: PPUSH
11296: LD_STRING DDen-Den-2
11298: PPUSH
11299: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11303: LD_EXP 1
11307: PPUSH
11308: LD_STRING DDen-JMM-2
11310: PPUSH
11311: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11315: LD_EXP 9
11319: PPUSH
11320: LD_STRING DDen-Den-3
11322: PPUSH
11323: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11327: LD_EXP 1
11331: PPUSH
11332: LD_STRING DDen-JMM-3
11334: PPUSH
11335: CALL_OW 88
// DialogueOff ;
11339: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11343: LD_INT 36
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11356: LD_INT 15
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11369: LD_STRING MR
11371: PPUSH
11372: CALL_OW 337
// end ;
11376: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11377: CALL 11422 0 0
11381: PUSH
11382: LD_EXP 9
11386: PPUSH
11387: CALL_OW 302
11391: AND
11392: IFFALSE 11421
11394: GO 11396
11396: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11397: LD_EXP 9
11401: PPUSH
11402: LD_STRING DR1-Den-1
11404: PPUSH
11405: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11409: LD_EXP 1
11413: PPUSH
11414: LD_STRING DR1-JMM-1
11416: PPUSH
11417: CALL_OW 88
// end ;
11421: END
// function CheckOptoLab ; var i ; begin
11422: LD_INT 0
11424: PPUSH
11425: PPUSH
// result = false ;
11426: LD_ADDR_VAR 0 1
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11434: LD_ADDR_VAR 0 2
11438: PUSH
11439: LD_INT 22
11441: PUSH
11442: LD_INT 1
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: LD_INT 30
11454: PUSH
11455: LD_INT 7
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 30
11464: PUSH
11465: LD_INT 8
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PPUSH
11481: CALL_OW 69
11485: PUSH
11486: FOR_IN
11487: IFFALSE 11539
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11489: LD_VAR 0 2
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 268
11501: PUSH
11502: LD_INT 15
11504: EQUAL
11505: PUSH
11506: LD_VAR 0 2
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 268
11518: PUSH
11519: LD_INT 15
11521: EQUAL
11522: OR
11523: IFFALSE 11535
// begin result = true ;
11525: LD_ADDR_VAR 0 1
11529: PUSH
11530: LD_INT 1
11532: ST_TO_ADDR
// break ;
11533: GO 11539
// end ; break ;
11535: GO 11539
// end ;
11537: GO 11486
11539: POP
11540: POP
// end ;
11541: LD_VAR 0 1
11545: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11546: LD_INT 15
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 321
11556: PUSH
11557: LD_INT 2
11559: EQUAL
11560: PUSH
11561: LD_EXP 9
11565: PPUSH
11566: CALL_OW 302
11570: AND
11571: IFFALSE 11803
11573: GO 11575
11575: DISABLE
// begin DialogueOn ;
11576: CALL_OW 6
// if IsOK ( Denis ) then
11580: LD_EXP 9
11584: PPUSH
11585: CALL_OW 302
11589: IFFALSE 11605
// begin Say ( Denis , DR2-Den-1 ) ;
11591: LD_EXP 9
11595: PPUSH
11596: LD_STRING DR2-Den-1
11598: PPUSH
11599: CALL_OW 88
// end else
11603: GO 11664
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11605: LD_INT 22
11607: PUSH
11608: LD_INT 1
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 21
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 25
11627: PUSH
11628: LD_INT 4
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 69
11644: PUSH
11645: LD_EXP 1
11649: PUSH
11650: EMPTY
11651: LIST
11652: DIFF
11653: PPUSH
11654: LD_STRING DR2-Sci1-1
11656: PPUSH
11657: LD_STRING DR2-FSci1-1
11659: PPUSH
11660: CALL 4588 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11664: LD_EXP 1
11668: PPUSH
11669: LD_STRING DR2-JMM-1
11671: PPUSH
11672: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11676: LD_INT 22
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 1
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 2
11698: PUSH
11699: LD_INT 25
11701: PUSH
11702: LD_INT 1
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 25
11711: PUSH
11712: LD_INT 2
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 25
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 25
11731: PUSH
11732: LD_INT 4
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: PUSH
11756: LD_EXP 1
11760: PUSH
11761: LD_EXP 9
11765: PUSH
11766: LD_EXP 8
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: DIFF
11776: PPUSH
11777: LD_STRING DR2-Sol1-1
11779: PPUSH
11780: LD_STRING DR2-Sol1-11
11782: PPUSH
11783: CALL 4588 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11787: LD_EXP 1
11791: PPUSH
11792: LD_STRING DR2-JMM-2
11794: PPUSH
11795: CALL_OW 88
// DialogueOff ;
11799: CALL_OW 7
// end ;
11803: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11804: LD_INT 22
11806: PUSH
11807: LD_INT 1
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 30
11816: PUSH
11817: LD_INT 36
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 69
11832: PUSH
11833: LD_INT 0
11835: EQUAL
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: LD_INT 1
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: LD_INT 21
11849: PUSH
11850: LD_INT 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 33
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: PUSH
11877: LD_INT 0
11879: GREATER
11880: AND
11881: PUSH
11882: LD_EXP 22
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: AND
11891: IFFALSE 11963
11893: GO 11895
11895: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11896: LD_INT 22
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 25
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: PUSH
11936: LD_EXP 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: DIFF
11944: PPUSH
11945: LD_STRING D3a-Mech1-1
11947: PPUSH
11948: LD_STRING D3a-Mech1-1
11950: PPUSH
11951: CALL 4588 0 3
// firstTower = 2 ;
11955: LD_ADDR_EXP 22
11959: PUSH
11960: LD_INT 2
11962: ST_TO_ADDR
// end ;
11963: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
11964: LD_INT 22
11966: PUSH
11967: LD_INT 3
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PPUSH
11988: CALL_OW 69
11992: PUSH
11993: LD_INT 0
11995: EQUAL
11996: IFFALSE 12111
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: LD_INT 22
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 21
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 25
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 3
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 25
12064: PUSH
12065: LD_INT 4
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: PPUSH
12084: CALL_OW 69
12088: PUSH
12089: FOR_IN
12090: IFFALSE 12109
// AddExperience ( i , 1 , 10000 ) ;
12092: LD_VAR 0 1
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: LD_INT 10000
12102: PPUSH
12103: CALL_OW 492
12107: GO 12089
12109: POP
12110: POP
// end ;
12111: PPOPN 1
12113: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12114: LD_INT 22
12116: PUSH
12117: LD_INT 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 30
12126: PUSH
12127: LD_INT 36
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 69
12142: PUSH
12143: LD_INT 0
12145: GREATER
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_INT 1
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 21
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 33
12169: PUSH
12170: LD_INT 2
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 69
12186: PUSH
12187: LD_INT 0
12189: GREATER
12190: AND
12191: PUSH
12192: CALL 12774 0 0
12196: AND
12197: IFFALSE 12771
12199: GO 12201
12201: DISABLE
12202: LD_INT 0
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_INT 22
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 36
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PPUSH
12238: CALL_OW 69
12242: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12243: LD_ADDR_VAR 0 4
12247: PUSH
12248: LD_INT 22
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 21
12260: PUSH
12261: LD_INT 2
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 33
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 69
12287: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12288: LD_ADDR_VAR 0 5
12292: PUSH
12293: EMPTY
12294: ST_TO_ADDR
// for i in tmpControlTowers do
12295: LD_ADDR_VAR 0 1
12299: PUSH
12300: LD_VAR 0 3
12304: PUSH
12305: FOR_IN
12306: IFFALSE 12769
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12308: LD_EXP 1
12312: PPUSH
12313: CALL_OW 310
12317: PUSH
12318: LD_VAR 0 1
12322: EQUAL
12323: PUSH
12324: LD_EXP 1
12328: PPUSH
12329: CALL_OW 257
12333: PUSH
12334: LD_INT 3
12336: EQUAL
12337: AND
12338: IFFALSE 12468
// begin InGameOn ;
12340: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12344: LD_VAR 0 4
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12357: LD_EXP 1
12361: PPUSH
12362: LD_STRING D4a-JMM-1
12364: PPUSH
12365: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12369: LD_VAR 0 4
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_EXP 1
12382: PPUSH
12383: CALL_OW 53
// wait ( 0 0$1 ) ;
12387: LD_INT 35
12389: PPUSH
12390: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12394: LD_VAR 0 4
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PPUSH
12403: LD_VAR 0 4
12407: PUSH
12408: LD_INT 1
12410: ARRAY
12411: PPUSH
12412: CALL_OW 250
12416: PUSH
12417: LD_INT 3
12419: PLUS
12420: PPUSH
12421: LD_VAR 0 4
12425: PUSH
12426: LD_INT 1
12428: ARRAY
12429: PPUSH
12430: CALL_OW 251
12434: PUSH
12435: LD_INT 2
12437: MINUS
12438: PPUSH
12439: CALL_OW 111
// wait ( 0 0$2 ) ;
12443: LD_INT 70
12445: PPUSH
12446: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12450: LD_EXP 1
12454: PPUSH
12455: LD_STRING D4b-JMM-1
12457: PPUSH
12458: CALL_OW 88
// InGameOff ;
12462: CALL_OW 9
// end else
12466: GO 12767
// begin InGameOn ;
12468: CALL_OW 8
// for j in UnitsInside ( i ) do
12472: LD_ADDR_VAR 0 2
12476: PUSH
12477: LD_VAR 0 1
12481: PPUSH
12482: CALL_OW 313
12486: PUSH
12487: FOR_IN
12488: IFFALSE 12523
// if GetClass ( j ) = 3 then
12490: LD_VAR 0 2
12494: PPUSH
12495: CALL_OW 257
12499: PUSH
12500: LD_INT 3
12502: EQUAL
12503: IFFALSE 12521
// tmpMechanicInside = tmpMechanicInside ^ j ;
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: LD_VAR 0 5
12514: PUSH
12515: LD_VAR 0 2
12519: ADD
12520: ST_TO_ADDR
12521: GO 12487
12523: POP
12524: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12525: LD_VAR 0 5
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: PPUSH
12534: CALL_OW 258
12538: PUSH
12539: LD_INT 1
12541: EQUAL
12542: IFFALSE 12560
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12544: LD_VAR 0 5
12548: PUSH
12549: LD_INT 1
12551: ARRAY
12552: PPUSH
12553: LD_STRING D4a-Mech1-1
12555: PPUSH
12556: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12560: LD_VAR 0 5
12564: PUSH
12565: LD_INT 1
12567: ARRAY
12568: PPUSH
12569: CALL_OW 258
12573: PUSH
12574: LD_INT 2
12576: EQUAL
12577: IFFALSE 12595
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12579: LD_VAR 0 5
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PPUSH
12588: LD_STRING D4a-FMech1-1
12590: PPUSH
12591: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12595: LD_VAR 0 4
12599: PUSH
12600: LD_INT 1
12602: ARRAY
12603: PPUSH
12604: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12608: LD_VAR 0 4
12612: PUSH
12613: LD_INT 1
12615: ARRAY
12616: PPUSH
12617: LD_VAR 0 5
12621: PUSH
12622: LD_INT 1
12624: ARRAY
12625: PPUSH
12626: CALL_OW 53
// wait ( 0 0$1 ) ;
12630: LD_INT 35
12632: PPUSH
12633: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12637: LD_VAR 0 4
12641: PUSH
12642: LD_INT 1
12644: ARRAY
12645: PPUSH
12646: LD_VAR 0 4
12650: PUSH
12651: LD_INT 1
12653: ARRAY
12654: PPUSH
12655: CALL_OW 250
12659: PUSH
12660: LD_INT 3
12662: PLUS
12663: PPUSH
12664: LD_VAR 0 4
12668: PUSH
12669: LD_INT 1
12671: ARRAY
12672: PPUSH
12673: CALL_OW 251
12677: PUSH
12678: LD_INT 2
12680: MINUS
12681: PPUSH
12682: CALL_OW 111
// wait ( 0 0$2 ) ;
12686: LD_INT 70
12688: PPUSH
12689: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12693: LD_VAR 0 5
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: CALL_OW 258
12706: PUSH
12707: LD_INT 1
12709: EQUAL
12710: IFFALSE 12728
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12712: LD_VAR 0 5
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_STRING D4b-Mech1-1
12723: PPUSH
12724: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12728: LD_VAR 0 5
12732: PUSH
12733: LD_INT 1
12735: ARRAY
12736: PPUSH
12737: CALL_OW 258
12741: PUSH
12742: LD_INT 2
12744: EQUAL
12745: IFFALSE 12763
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12747: LD_VAR 0 5
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: LD_STRING D4b-FMech1-1
12758: PPUSH
12759: CALL_OW 88
// InGameOff ;
12763: CALL_OW 9
// end ; end ;
12767: GO 12305
12769: POP
12770: POP
// end ;
12771: PPOPN 5
12773: END
// function CheckMehInside ; var i , j ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
// result = false ;
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12787: LD_ADDR_VAR 0 2
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 36
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: PUSH
12821: FOR_IN
12822: IFFALSE 12873
// begin for j in UnitsInside ( i ) do
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_VAR 0 2
12833: PPUSH
12834: CALL_OW 313
12838: PUSH
12839: FOR_IN
12840: IFFALSE 12869
// begin if GetClass ( j ) = 3 then
12842: LD_VAR 0 3
12846: PPUSH
12847: CALL_OW 257
12851: PUSH
12852: LD_INT 3
12854: EQUAL
12855: IFFALSE 12867
// begin result = true ;
12857: LD_ADDR_VAR 0 1
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// break ;
12865: GO 12869
// end ; end ;
12867: GO 12839
12869: POP
12870: POP
// end ;
12871: GO 12821
12873: POP
12874: POP
// end ;
12875: LD_VAR 0 1
12879: RET
// every 25 25$0 do
12880: GO 12882
12882: DISABLE
// begin PrepareKurt ;
12883: CALL 15676 0 0
// end ;
12887: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12888: LD_EXP 18
12892: PPUSH
12893: LD_INT 9
12895: PPUSH
12896: CALL_OW 308
12900: PUSH
12901: LD_EXP 20
12905: PUSH
12906: LD_INT 1
12908: EQUAL
12909: AND
12910: IFFALSE 12984
12912: GO 12914
12914: DISABLE
// begin RemoveUnit ( Kurt ) ;
12915: LD_EXP 18
12919: PPUSH
12920: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12924: LD_EXP 18
12928: PPUSH
12929: LD_STRING Kurt
12931: PPUSH
12932: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12936: LD_INT 1
12938: PPUSH
12939: LD_INT 2
12941: PPUSH
12942: CALL_OW 81
12946: PUSH
12947: LD_INT 0
12949: EQUAL
12950: IFFALSE 12960
// KurtStatus = 1 ;
12952: LD_ADDR_EXP 19
12956: PUSH
12957: LD_INT 1
12959: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12960: LD_INT 1
12962: PPUSH
12963: LD_INT 2
12965: PPUSH
12966: CALL_OW 81
12970: PUSH
12971: LD_INT 2
12973: EQUAL
12974: IFFALSE 12984
// KurtStatus = 2 ;
12976: LD_ADDR_EXP 19
12980: PUSH
12981: LD_INT 2
12983: ST_TO_ADDR
// end ;
12984: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12985: LD_INT 1
12987: PPUSH
12988: LD_INT 2
12990: PPUSH
12991: CALL_OW 81
12995: PUSH
12996: LD_INT 2
12998: EQUAL
12999: PUSH
13000: LD_EXP 18
13004: PPUSH
13005: CALL_OW 302
13009: AND
13010: IFFALSE 13035
13012: GO 13014
13014: DISABLE
// begin DialogueOn ;
13015: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13019: LD_EXP 18
13023: PPUSH
13024: LD_STRING D2a-Kurt-1
13026: PPUSH
13027: CALL_OW 88
// DialogueOff ;
13031: CALL_OW 7
// end ;
13035: END
// every 35 35$0 do
13036: GO 13038
13038: DISABLE
// begin PrepareJoan ;
13039: CALL 2386 0 0
// wait ( 1 1$0 ) ;
13043: LD_INT 2100
13045: PPUSH
13046: CALL_OW 67
// if IsOK ( Lisa ) then
13050: LD_EXP 2
13054: PPUSH
13055: CALL_OW 302
13059: IFFALSE 13189
// begin DialogueOn ;
13061: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13065: LD_EXP 2
13069: PPUSH
13070: LD_STRING D7-Lisa-1
13072: PPUSH
13073: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13077: LD_EXP 1
13081: PPUSH
13082: LD_STRING D7-JMM-1
13084: PPUSH
13085: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13089: LD_EXP 2
13093: PPUSH
13094: LD_STRING D7-Lisa-2
13096: PPUSH
13097: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13101: LD_EXP 1
13105: PPUSH
13106: LD_STRING D7-JMM-2
13108: PPUSH
13109: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13113: LD_EXP 2
13117: PPUSH
13118: LD_STRING D7-Lisa-3
13120: PPUSH
13121: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13125: LD_EXP 1
13129: PPUSH
13130: LD_STRING D7-JMM-3
13132: PPUSH
13133: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13137: LD_EXP 2
13141: PPUSH
13142: LD_STRING D7-Lisa-4
13144: PPUSH
13145: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13149: LD_EXP 1
13153: PPUSH
13154: LD_STRING D7-JMM-4
13156: PPUSH
13157: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13161: LD_EXP 1
13165: PPUSH
13166: LD_STRING D7-JMM-4a
13168: PPUSH
13169: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13173: LD_EXP 2
13177: PPUSH
13178: LD_STRING D7-Lisa-5
13180: PPUSH
13181: CALL_OW 88
// DialogueOff ;
13185: CALL_OW 7
// end ; end ;
13189: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13190: LD_INT 22
13192: PUSH
13193: LD_INT 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 33
13202: PUSH
13203: LD_INT 2
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PPUSH
13214: CALL_OW 69
13218: PUSH
13219: LD_INT 2
13221: GREATEREQUAL
13222: IFFALSE 13242
13224: GO 13226
13226: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13227: LD_STRING MRa
13229: PPUSH
13230: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13234: LD_ADDR_EXP 27
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// end ;
13242: END
// every 4 4$0 do
13243: GO 13245
13245: DISABLE
// PrepareRandoms ( 1 ) ;
13246: LD_INT 1
13248: PPUSH
13249: CALL 3283 0 1
13253: END
// every 10 10$0 do
13254: GO 13256
13256: DISABLE
// PrepareRandoms ( 2 ) ;
13257: LD_INT 2
13259: PPUSH
13260: CALL 3283 0 1
13264: END
// every 28 28$0 do
13265: GO 13267
13267: DISABLE
// PrepareRandoms ( 4 ) ;
13268: LD_INT 4
13270: PPUSH
13271: CALL 3283 0 1
13275: END
// every 32 32$0 do
13276: GO 13278
13278: DISABLE
// PrepareRandoms ( 5 ) ;
13279: LD_INT 5
13281: PPUSH
13282: CALL 3283 0 1
13286: END
// every 35 35$30 do
13287: GO 13289
13289: DISABLE
// PrepareRandoms ( 6 ) ;
13290: LD_INT 6
13292: PPUSH
13293: CALL 3283 0 1
13297: END
// every 37 37$20 do
13298: GO 13300
13300: DISABLE
// PrepareRandoms ( 7 ) ;
13301: LD_INT 7
13303: PPUSH
13304: CALL 3283 0 1
13308: END
// every 5 5$20 do
13309: GO 13311
13311: DISABLE
// begin DialogueOn ;
13312: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13316: LD_EXP 10
13320: PPUSH
13321: LD_STRING D12a-Sci-1
13323: PPUSH
13324: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13328: LD_EXP 1
13332: PPUSH
13333: LD_STRING D12a-JMM-1
13335: PPUSH
13336: CALL_OW 88
// DialogueOff ;
13340: CALL_OW 7
// cratesStatus = 1 ;
13344: LD_ADDR_EXP 34
13348: PUSH
13349: LD_INT 1
13351: ST_TO_ADDR
// end ;
13352: END
// every 13 13$0 do
13353: GO 13355
13355: DISABLE
// begin DialogueOn ;
13356: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13360: LD_EXP 10
13364: PPUSH
13365: LD_STRING D12b-Sci-1
13367: PPUSH
13368: CALL_OW 94
// DialogueOff ;
13372: CALL_OW 7
// cratesStatus = 2 ;
13376: LD_ADDR_EXP 34
13380: PUSH
13381: LD_INT 2
13383: ST_TO_ADDR
// end ;
13384: END
// every 32 32$0 do
13385: GO 13387
13387: DISABLE
// begin DialogueOn ;
13388: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13392: LD_EXP 10
13396: PPUSH
13397: LD_STRING  D12c-Sci-1
13399: PPUSH
13400: CALL_OW 94
// DialogueOff ;
13404: CALL_OW 7
// wait ( 3 3$0 ) ;
13408: LD_INT 6300
13410: PPUSH
13411: CALL_OW 67
// DialogueOn ;
13415: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13419: LD_EXP 10
13423: PPUSH
13424: LD_STRING  D12d-Sci-1
13426: PPUSH
13427: CALL_OW 94
// DialogueOff ;
13431: CALL_OW 7
// cratesStatus = 1 ;
13435: LD_ADDR_EXP 34
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// end ;
13443: END
// every 42 42$0 do
13444: GO 13446
13446: DISABLE
// begin DialogueOn ;
13447: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13451: LD_EXP 10
13455: PPUSH
13456: LD_STRING D12e-Sci-1
13458: PPUSH
13459: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13463: LD_EXP 1
13467: PPUSH
13468: LD_STRING D12e-JMM-1
13470: PPUSH
13471: CALL_OW 88
// DialogueOff ;
13475: CALL_OW 7
// cratesStatus = 2 ;
13479: LD_ADDR_EXP 34
13483: PUSH
13484: LD_INT 2
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13488: LD_INT 22
13490: PUSH
13491: LD_INT 6
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 34
13510: PUSH
13511: LD_INT 51
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: PUSH
13528: LD_INT 0
13530: GREATER
13531: IFFALSE 13614
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
// begin enable ;
13539: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13540: LD_ADDR_VAR 0 1
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_INT 6
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 2
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 21
13570: PUSH
13571: LD_INT 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 69
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13612
// ComAgressiveMove ( i , 138 , 168 ) ;
13595: LD_VAR 0 1
13599: PPUSH
13600: LD_INT 138
13602: PPUSH
13603: LD_INT 168
13605: PPUSH
13606: CALL_OW 114
13610: GO 13592
13612: POP
13613: POP
// end ;
13614: PPOPN 1
13616: END
// every 0 0$1 do var i ;
13617: GO 13619
13619: DISABLE
13620: LD_INT 0
13622: PPUSH
// begin enable ;
13623: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13624: LD_ADDR_VAR 0 1
13628: PUSH
13629: LD_INT 5
13631: PPUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 22
13637: PUSH
13638: LD_INT 3
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 22
13647: PUSH
13648: LD_INT 6
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: PUSH
13660: EMPTY
13661: LIST
13662: PPUSH
13663: CALL_OW 70
13667: PUSH
13668: FOR_IN
13669: IFFALSE 13733
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13671: LD_INT 5
13673: PPUSH
13674: LD_INT 22
13676: PUSH
13677: LD_INT 6
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 34
13686: PUSH
13687: LD_INT 51
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PPUSH
13698: CALL_OW 70
13702: PUSH
13703: LD_INT 0
13705: GREATER
13706: IFFALSE 13722
// sendedConvoys = sendedConvoys + 1 ;
13708: LD_ADDR_EXP 35
13712: PUSH
13713: LD_EXP 35
13717: PUSH
13718: LD_INT 1
13720: PLUS
13721: ST_TO_ADDR
// RemoveUnit ( i ) ;
13722: LD_VAR 0 1
13726: PPUSH
13727: CALL_OW 64
// end ;
13731: GO 13668
13733: POP
13734: POP
// end ; end_of_file
13735: PPOPN 1
13737: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13738: LD_VAR 0 1
13742: PUSH
13743: LD_INT 1
13745: EQUAL
13746: PUSH
13747: LD_VAR 0 2
13751: PUSH
13752: LD_INT 3
13754: EQUAL
13755: AND
13756: IFFALSE 13766
// contactWithRussian = 1 ;
13758: LD_ADDR_EXP 21
13762: PUSH
13763: LD_INT 1
13765: ST_TO_ADDR
// end ;
13766: PPOPN 2
13768: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 266
13778: PUSH
13779: LD_INT 36
13781: EQUAL
13782: PUSH
13783: LD_VAR 0 1
13787: PPUSH
13788: CALL_OW 255
13792: PUSH
13793: LD_INT 1
13795: EQUAL
13796: AND
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 2
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: LD_INT 33
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: PUSH
13838: LD_INT 0
13840: EQUAL
13841: AND
13842: PUSH
13843: LD_EXP 22
13847: PUSH
13848: LD_INT 0
13850: EQUAL
13851: AND
13852: IFFALSE 13921
// begin firstTower = 1 ;
13854: LD_ADDR_EXP 22
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13862: LD_INT 22
13864: PUSH
13865: LD_INT 1
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 21
13874: PUSH
13875: LD_INT 1
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 25
13884: PUSH
13885: LD_INT 3
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: PPUSH
13897: CALL_OW 69
13901: PUSH
13902: LD_EXP 1
13906: PUSH
13907: EMPTY
13908: LIST
13909: DIFF
13910: PPUSH
13911: LD_STRING D3b-Mech1-1
13913: PPUSH
13914: LD_STRING D3b-Mech1-1
13916: PPUSH
13917: CALL 4588 0 3
// end ; if GetSide ( building ) = 3 then
13921: LD_VAR 0 1
13925: PPUSH
13926: CALL_OW 255
13930: PUSH
13931: LD_INT 3
13933: EQUAL
13934: IFFALSE 14008
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13936: LD_ADDR_EXP 29
13940: PUSH
13941: LD_EXP 29
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 3
13953: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13954: LD_ADDR_EXP 29
13958: PUSH
13959: LD_EXP 29
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 3
13971: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13972: LD_ADDR_EXP 29
13976: PUSH
13977: LD_EXP 29
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 3
13989: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13990: LD_ADDR_EXP 29
13994: PUSH
13995: LD_EXP 29
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 3
14007: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 255
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 266
14031: PUSH
14032: LD_INT 0
14034: EQUAL
14035: PUSH
14036: LD_VAR 0 1
14040: PPUSH
14041: CALL_OW 266
14045: PUSH
14046: LD_INT 2
14048: EQUAL
14049: OR
14050: PUSH
14051: LD_VAR 0 1
14055: PPUSH
14056: CALL_OW 266
14060: PUSH
14061: LD_INT 4
14063: EQUAL
14064: OR
14065: PUSH
14066: EMPTY
14067: LIST
14068: AND
14069: IFFALSE 14080
// ComUpgrade ( building ) ;
14071: LD_VAR 0 1
14075: PPUSH
14076: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 255
14089: PUSH
14090: LD_INT 3
14092: EQUAL
14093: PUSH
14094: LD_VAR 0 1
14098: PPUSH
14099: CALL_OW 266
14103: PUSH
14104: LD_INT 32
14106: EQUAL
14107: AND
14108: IFFALSE 14149
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_INT 42
14117: PUSH
14118: LD_INT 43
14120: PUSH
14121: LD_INT 44
14123: PUSH
14124: LD_INT 46
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 1
14135: PPUSH
14136: LD_INT 4
14138: PPUSH
14139: CALL_OW 12
14143: ARRAY
14144: PPUSH
14145: CALL_OW 208
// end ; end ;
14149: PPOPN 1
14151: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14152: LD_VAR 0 1
14156: PPUSH
14157: CALL_OW 255
14161: PUSH
14162: LD_INT 1
14164: EQUAL
14165: PUSH
14166: LD_VAR 0 1
14170: PPUSH
14171: CALL_OW 247
14175: PUSH
14176: LD_INT 1
14178: EQUAL
14179: AND
14180: PUSH
14181: LD_VAR 0 1
14185: PPUSH
14186: CALL_OW 257
14190: PUSH
14191: LD_INT 1
14193: EQUAL
14194: PUSH
14195: LD_VAR 0 1
14199: PPUSH
14200: CALL_OW 257
14204: PUSH
14205: LD_INT 2
14207: EQUAL
14208: OR
14209: PUSH
14210: LD_VAR 0 1
14214: PPUSH
14215: CALL_OW 257
14219: PUSH
14220: LD_INT 3
14222: EQUAL
14223: OR
14224: PUSH
14225: LD_VAR 0 1
14229: PPUSH
14230: CALL_OW 257
14234: PUSH
14235: LD_INT 4
14237: EQUAL
14238: OR
14239: PUSH
14240: EMPTY
14241: LIST
14242: AND
14243: IFFALSE 14259
// unitLost = unitLost + 1 ;
14245: LD_ADDR_EXP 28
14249: PUSH
14250: LD_EXP 28
14254: PUSH
14255: LD_INT 1
14257: PLUS
14258: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14259: LD_VAR 0 1
14263: PPUSH
14264: CALL_OW 255
14268: PUSH
14269: LD_INT 3
14271: EQUAL
14272: PUSH
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 247
14282: PUSH
14283: LD_INT 3
14285: EQUAL
14286: AND
14287: IFFALSE 14979
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14289: LD_VAR 0 1
14293: PPUSH
14294: CALL_OW 266
14298: PUSH
14299: LD_INT 31
14301: EQUAL
14302: PUSH
14303: LD_VAR 0 1
14307: PPUSH
14308: CALL_OW 266
14312: PUSH
14313: LD_INT 32
14315: EQUAL
14316: OR
14317: PUSH
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 266
14327: PUSH
14328: LD_INT 36
14330: EQUAL
14331: OR
14332: PUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 266
14342: PUSH
14343: LD_INT 0
14345: EQUAL
14346: OR
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 266
14357: PUSH
14358: LD_INT 24
14360: EQUAL
14361: OR
14362: PUSH
14363: LD_VAR 0 1
14367: PPUSH
14368: CALL_OW 266
14372: PUSH
14373: LD_INT 17
14375: EQUAL
14376: OR
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 266
14387: PUSH
14388: LD_INT 25
14390: EQUAL
14391: OR
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 266
14402: PUSH
14403: LD_INT 19
14405: EQUAL
14406: OR
14407: PUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 266
14417: PUSH
14418: LD_INT 20
14420: EQUAL
14421: OR
14422: PUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 266
14432: PUSH
14433: LD_INT 18
14435: EQUAL
14436: OR
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 266
14447: PUSH
14448: LD_INT 21
14450: EQUAL
14451: OR
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 266
14462: PUSH
14463: LD_INT 23
14465: EQUAL
14466: OR
14467: PUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 266
14477: PUSH
14478: LD_INT 16
14480: EQUAL
14481: OR
14482: PUSH
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 266
14492: PUSH
14493: LD_INT 6
14495: EQUAL
14496: OR
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 266
14507: PUSH
14508: LD_INT 29
14510: EQUAL
14511: OR
14512: PUSH
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 26
14525: EQUAL
14526: OR
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 266
14537: PUSH
14538: LD_INT 30
14540: EQUAL
14541: OR
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 266
14552: PUSH
14553: LD_INT 28
14555: EQUAL
14556: OR
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 266
14567: PUSH
14568: LD_INT 27
14570: EQUAL
14571: OR
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 266
14582: PUSH
14583: LD_INT 33
14585: EQUAL
14586: OR
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 266
14597: PUSH
14598: LD_INT 2
14600: EQUAL
14601: OR
14602: PUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 266
14612: PUSH
14613: LD_INT 4
14615: EQUAL
14616: OR
14617: IFFALSE 14703
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14619: LD_ADDR_EXP 29
14623: PUSH
14624: LD_EXP 29
14628: PUSH
14629: LD_VAR 0 1
14633: PPUSH
14634: CALL_OW 266
14638: ADD
14639: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14640: LD_ADDR_EXP 29
14644: PUSH
14645: LD_EXP 29
14649: PUSH
14650: LD_VAR 0 1
14654: PPUSH
14655: CALL_OW 250
14659: ADD
14660: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14661: LD_ADDR_EXP 29
14665: PUSH
14666: LD_EXP 29
14670: PUSH
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 251
14680: ADD
14681: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14682: LD_ADDR_EXP 29
14686: PUSH
14687: LD_EXP 29
14691: PUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 254
14701: ADD
14702: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 266
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: IFFALSE 14795
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14718: LD_ADDR_EXP 29
14722: PUSH
14723: LD_EXP 29
14727: PUSH
14728: LD_INT 0
14730: ADD
14731: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14732: LD_ADDR_EXP 29
14736: PUSH
14737: LD_EXP 29
14741: PUSH
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 250
14751: ADD
14752: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14753: LD_ADDR_EXP 29
14757: PUSH
14758: LD_EXP 29
14762: PUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 251
14772: ADD
14773: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14774: LD_ADDR_EXP 29
14778: PUSH
14779: LD_EXP 29
14783: PUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 254
14793: ADD
14794: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14795: LD_VAR 0 1
14799: PPUSH
14800: CALL_OW 266
14804: PUSH
14805: LD_INT 3
14807: EQUAL
14808: IFFALSE 14887
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14810: LD_ADDR_EXP 29
14814: PUSH
14815: LD_EXP 29
14819: PUSH
14820: LD_INT 2
14822: ADD
14823: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14824: LD_ADDR_EXP 29
14828: PUSH
14829: LD_EXP 29
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 250
14843: ADD
14844: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14845: LD_ADDR_EXP 29
14849: PUSH
14850: LD_EXP 29
14854: PUSH
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 251
14864: ADD
14865: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14866: LD_ADDR_EXP 29
14870: PUSH
14871: LD_EXP 29
14875: PUSH
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 254
14885: ADD
14886: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14887: LD_VAR 0 1
14891: PPUSH
14892: CALL_OW 266
14896: PUSH
14897: LD_INT 5
14899: EQUAL
14900: IFFALSE 14979
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14902: LD_ADDR_EXP 29
14906: PUSH
14907: LD_EXP 29
14911: PUSH
14912: LD_INT 4
14914: ADD
14915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14916: LD_ADDR_EXP 29
14920: PUSH
14921: LD_EXP 29
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 250
14935: ADD
14936: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14937: LD_ADDR_EXP 29
14941: PUSH
14942: LD_EXP 29
14946: PUSH
14947: LD_VAR 0 1
14951: PPUSH
14952: CALL_OW 251
14956: ADD
14957: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14958: LD_ADDR_EXP 29
14962: PUSH
14963: LD_EXP 29
14967: PUSH
14968: LD_VAR 0 1
14972: PPUSH
14973: CALL_OW 254
14977: ADD
14978: ST_TO_ADDR
// end ; end ; end ;
14979: PPOPN 1
14981: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 264
14996: PUSH
14997: LD_INT 51
14999: EQUAL
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 255
15010: PUSH
15011: LD_INT 3
15013: EQUAL
15014: AND
15015: IFFALSE 15077
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15017: LD_ADDR_VAR 0 5
15021: PUSH
15022: LD_INT 2
15024: PPUSH
15025: CALL_OW 274
15029: PPUSH
15030: LD_INT 1
15032: PPUSH
15033: CALL_OW 275
15037: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15038: LD_INT 2
15040: PPUSH
15041: CALL_OW 274
15045: PPUSH
15046: LD_INT 1
15048: PPUSH
15049: LD_VAR 0 5
15053: PUSH
15054: LD_INT 100
15056: MINUS
15057: PPUSH
15058: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15062: LD_VAR 0 1
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: LD_INT 100
15072: PPUSH
15073: CALL_OW 291
// end ; if building = rufabsupp then
15077: LD_VAR 0 2
15081: PUSH
15082: LD_INT 17
15084: EQUAL
15085: IFFALSE 15099
// SetSide ( vehicle , 6 ) ;
15087: LD_VAR 0 1
15091: PPUSH
15092: LD_INT 6
15094: PPUSH
15095: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15099: LD_VAR 0 2
15103: PPUSH
15104: CALL_OW 255
15108: PUSH
15109: LD_INT 3
15111: EQUAL
15112: PUSH
15113: LD_VAR 0 2
15117: PPUSH
15118: CALL_OW 302
15122: AND
15123: IFFALSE 15193
// begin uc_side = 3 ;
15125: LD_ADDR_OWVAR 20
15129: PUSH
15130: LD_INT 3
15132: ST_TO_ADDR
// uc_nation = 3 ;
15133: LD_ADDR_OWVAR 21
15137: PUSH
15138: LD_INT 3
15140: ST_TO_ADDR
// hc_gallery :=  ;
15141: LD_ADDR_OWVAR 33
15145: PUSH
15146: LD_STRING 
15148: ST_TO_ADDR
// hc_name :=  ;
15149: LD_ADDR_OWVAR 26
15153: PUSH
15154: LD_STRING 
15156: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15157: LD_INT 0
15159: PPUSH
15160: LD_EXP 32
15164: PPUSH
15165: LD_EXP 33
15169: PPUSH
15170: CALL_OW 12
15174: PPUSH
15175: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15179: CALL_OW 44
15183: PPUSH
15184: LD_VAR 0 2
15188: PPUSH
15189: CALL_OW 52
// end ; end ;
15193: PPOPN 5
15195: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15196: LD_VAR 0 1
15200: PPUSH
15201: CALL_OW 255
15205: PUSH
15206: LD_INT 3
15208: EQUAL
15209: IFFALSE 15225
// tamedApemans = tamedApemans + 1 ;
15211: LD_ADDR_EXP 30
15215: PUSH
15216: LD_EXP 30
15220: PUSH
15221: LD_INT 1
15223: PLUS
15224: ST_TO_ADDR
// end ; end_of_file
15225: PPOPN 2
15227: END
// every 0 0$30 trigger cratesStatus = 1 do
15228: LD_EXP 34
15232: PUSH
15233: LD_INT 1
15235: EQUAL
15236: IFFALSE 15300
15238: GO 15240
15240: DISABLE
// begin enable ;
15241: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15242: LD_INT 350
15244: PUSH
15245: LD_INT 1050
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 1
15254: PPUSH
15255: LD_INT 2
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: PPUSH
15264: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15268: LD_INT 4
15270: PUSH
15271: LD_INT 5
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 1
15280: PPUSH
15281: LD_INT 2
15283: PPUSH
15284: CALL_OW 12
15288: ARRAY
15289: PPUSH
15290: LD_INT 7
15292: PPUSH
15293: LD_INT 1
15295: PPUSH
15296: CALL_OW 55
// end ;
15300: END
// every 1 1$0 trigger cratesStatus = 2 do
15301: LD_EXP 34
15305: PUSH
15306: LD_INT 2
15308: EQUAL
15309: IFFALSE 15373
15311: GO 15313
15313: DISABLE
// begin enable ;
15314: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15315: LD_INT 3150
15317: PUSH
15318: LD_INT 4550
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 1
15327: PPUSH
15328: LD_INT 2
15330: PPUSH
15331: CALL_OW 12
15335: ARRAY
15336: PPUSH
15337: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15341: LD_INT 2
15343: PUSH
15344: LD_INT 5
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_INT 2
15356: PPUSH
15357: CALL_OW 12
15361: ARRAY
15362: PPUSH
15363: LD_INT 8
15365: PPUSH
15366: LD_INT 1
15368: PPUSH
15369: CALL_OW 55
// end ; end_of_file
15373: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15374: LD_EXP 23
15378: PUSH
15379: LD_INT 1
15381: EQUAL
15382: IFFALSE 15673
15384: GO 15386
15386: DISABLE
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
15391: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15392: LD_ADDR_VAR 0 2
15396: PUSH
15397: LD_INT 22
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 21
15409: PUSH
15410: LD_INT 3
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 2
15419: PUSH
15420: LD_INT 30
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 30
15432: PUSH
15433: LD_INT 1
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PPUSH
15450: CALL_OW 69
15454: ST_TO_ADDR
// for i in tmp do
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_VAR 0 2
15464: PUSH
15465: FOR_IN
15466: IFFALSE 15499
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15468: LD_ADDR_VAR 0 3
15472: PUSH
15473: LD_VAR 0 3
15477: PUSH
15478: LD_VAR 0 1
15482: PPUSH
15483: CALL_OW 274
15487: PPUSH
15488: LD_INT 1
15490: PPUSH
15491: CALL_OW 275
15495: PLUS
15496: ST_TO_ADDR
15497: GO 15465
15499: POP
15500: POP
// strings = [ ] ;
15501: LD_ADDR_EXP 26
15505: PUSH
15506: EMPTY
15507: ST_TO_ADDR
// if tmp = 0 then
15508: LD_VAR 0 2
15512: PUSH
15513: LD_INT 0
15515: EQUAL
15516: IFFALSE 15541
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15518: LD_ADDR_EXP 26
15522: PUSH
15523: LD_EXP 26
15527: PUSH
15528: LD_STRING #Am06-1
15530: PUSH
15531: LD_EXP 24
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: ADD
15540: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15541: LD_VAR 0 2
15545: PUSH
15546: LD_INT 0
15548: GREATER
15549: PUSH
15550: LD_EXP 24
15554: PUSH
15555: LD_VAR 0 3
15559: GREATER
15560: AND
15561: IFFALSE 15592
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15563: LD_ADDR_EXP 26
15567: PUSH
15568: LD_EXP 26
15572: PUSH
15573: LD_STRING #Am06-1
15575: PUSH
15576: LD_EXP 24
15580: PUSH
15581: LD_VAR 0 3
15585: MINUS
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: ADD
15591: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15592: LD_VAR 0 2
15596: PUSH
15597: LD_INT 0
15599: GREATER
15600: PUSH
15601: LD_EXP 24
15605: PUSH
15606: LD_VAR 0 3
15610: LESSEQUAL
15611: AND
15612: IFFALSE 15635
// strings = strings ^ [ #Am06-1 , 0 ] ;
15614: LD_ADDR_EXP 26
15618: PUSH
15619: LD_EXP 26
15623: PUSH
15624: LD_STRING #Am06-1
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: ADD
15634: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15635: LD_ADDR_EXP 25
15639: PUSH
15640: LD_EXP 25
15644: PUSH
15645: LD_INT 35
15647: MINUS
15648: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15649: LD_ADDR_EXP 26
15653: PUSH
15654: LD_EXP 26
15658: PUSH
15659: LD_STRING #Am06-2
15661: PUSH
15662: LD_EXP 25
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: ADD
15671: ST_TO_ADDR
// enable ;
15672: ENABLE
// end ; end_of_file
15673: PPOPN 3
15675: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15676: LD_INT 0
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 21
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 25
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 2
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 4
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: PPUSH
15763: CALL_OW 69
15767: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15768: LD_ADDR_VAR 0 3
15772: PUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_VAR 0 2
15780: PPUSH
15781: CALL_OW 12
15785: ST_TO_ADDR
// uc_side = 2 ;
15786: LD_ADDR_OWVAR 20
15790: PUSH
15791: LD_INT 2
15793: ST_TO_ADDR
// uc_nation = 2 ;
15794: LD_ADDR_OWVAR 21
15798: PUSH
15799: LD_INT 2
15801: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15802: LD_ADDR_EXP 18
15806: PUSH
15807: LD_STRING Kurt
15809: PPUSH
15810: LD_INT 0
15812: PPUSH
15813: CALL 4525 0 2
15817: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
15818: LD_EXP 18
15822: PPUSH
15823: LD_VAR 0 2
15827: PUSH
15828: LD_VAR 0 3
15832: ARRAY
15833: PPUSH
15834: CALL_OW 250
15838: PPUSH
15839: LD_VAR 0 2
15843: PUSH
15844: LD_VAR 0 3
15848: ARRAY
15849: PPUSH
15850: CALL_OW 251
15854: PPUSH
15855: LD_INT 5
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 50
// InGameOn ;
15865: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15869: LD_EXP 18
15873: PPUSH
15874: CALL_OW 87
// wait ( 0 0$2 ) ;
15878: LD_INT 70
15880: PPUSH
15881: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15885: LD_VAR 0 2
15889: PUSH
15890: LD_VAR 0 3
15894: ARRAY
15895: PPUSH
15896: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15900: LD_VAR 0 2
15904: PUSH
15905: LD_VAR 0 3
15909: ARRAY
15910: PPUSH
15911: CALL_OW 122
// wait ( 0 0$1 ) ;
15915: LD_INT 35
15917: PPUSH
15918: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15922: LD_EXP 18
15926: PPUSH
15927: LD_VAR 0 2
15931: PUSH
15932: LD_VAR 0 3
15936: ARRAY
15937: PPUSH
15938: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15942: LD_VAR 0 2
15946: PUSH
15947: LD_VAR 0 3
15951: ARRAY
15952: PPUSH
15953: LD_EXP 18
15957: PPUSH
15958: CALL_OW 119
// DialogueOn ;
15962: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15966: LD_EXP 18
15970: PPUSH
15971: LD_STRING D2-Kurt-1
15973: PPUSH
15974: CALL_OW 88
// if tmp [ rnd ] = JMM then
15978: LD_VAR 0 2
15982: PUSH
15983: LD_VAR 0 3
15987: ARRAY
15988: PUSH
15989: LD_EXP 1
15993: EQUAL
15994: IFFALSE 16086
// begin Say ( JMM , D2-JMM-1 ) ;
15996: LD_EXP 1
16000: PPUSH
16001: LD_STRING D2-JMM-1
16003: PPUSH
16004: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16008: LD_EXP 18
16012: PPUSH
16013: LD_STRING D2-Kurt-2
16015: PPUSH
16016: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16020: LD_EXP 1
16024: PPUSH
16025: LD_STRING D2-JMM-2
16027: PPUSH
16028: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16032: LD_EXP 18
16036: PPUSH
16037: LD_STRING D2-Kurt-3
16039: PPUSH
16040: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16044: LD_EXP 1
16048: PPUSH
16049: LD_STRING D2-JMM-3
16051: PPUSH
16052: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16056: LD_EXP 18
16060: PPUSH
16061: LD_STRING D2-Kurt-4
16063: PPUSH
16064: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16068: LD_EXP 1
16072: PPUSH
16073: LD_STRING D2-JMM-4
16075: PPUSH
16076: CALL_OW 88
// DialogueOff ;
16080: CALL_OW 7
// end else
16084: GO 16516
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16086: LD_VAR 0 2
16090: PUSH
16091: LD_VAR 0 3
16095: ARRAY
16096: PPUSH
16097: CALL_OW 258
16101: PUSH
16102: LD_INT 1
16104: EQUAL
16105: IFFALSE 16125
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
16107: LD_VAR 0 2
16111: PUSH
16112: LD_VAR 0 3
16116: ARRAY
16117: PPUSH
16118: LD_STRING D2-Sol1-1
16120: PPUSH
16121: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16125: LD_VAR 0 2
16129: PUSH
16130: LD_VAR 0 3
16134: ARRAY
16135: PPUSH
16136: CALL_OW 258
16140: PUSH
16141: LD_INT 2
16143: EQUAL
16144: IFFALSE 16164
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
16146: LD_VAR 0 2
16150: PUSH
16151: LD_VAR 0 3
16155: ARRAY
16156: PPUSH
16157: LD_STRING D2-FSol1-1
16159: PPUSH
16160: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16164: LD_EXP 18
16168: PPUSH
16169: LD_STRING D2-Kurt-2
16171: PPUSH
16172: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16176: LD_VAR 0 2
16180: PUSH
16181: LD_VAR 0 3
16185: ARRAY
16186: PPUSH
16187: CALL_OW 258
16191: PUSH
16192: LD_INT 1
16194: EQUAL
16195: IFFALSE 16215
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
16197: LD_VAR 0 2
16201: PUSH
16202: LD_VAR 0 3
16206: ARRAY
16207: PPUSH
16208: LD_STRING D2-Sol1-2
16210: PPUSH
16211: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16215: LD_VAR 0 2
16219: PUSH
16220: LD_VAR 0 3
16224: ARRAY
16225: PPUSH
16226: CALL_OW 258
16230: PUSH
16231: LD_INT 2
16233: EQUAL
16234: IFFALSE 16254
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
16236: LD_VAR 0 2
16240: PUSH
16241: LD_VAR 0 3
16245: ARRAY
16246: PPUSH
16247: LD_STRING D2-FSol1-2
16249: PPUSH
16250: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16254: LD_EXP 18
16258: PPUSH
16259: LD_STRING D2-Kurt-3
16261: PPUSH
16262: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16266: LD_VAR 0 2
16270: PUSH
16271: LD_VAR 0 3
16275: ARRAY
16276: PPUSH
16277: CALL_OW 258
16281: PUSH
16282: LD_INT 1
16284: EQUAL
16285: IFFALSE 16305
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 3
16296: ARRAY
16297: PPUSH
16298: LD_STRING D2-Sol1-3
16300: PPUSH
16301: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16305: LD_VAR 0 2
16309: PUSH
16310: LD_VAR 0 3
16314: ARRAY
16315: PPUSH
16316: CALL_OW 258
16320: PUSH
16321: LD_INT 2
16323: EQUAL
16324: IFFALSE 16344
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16326: LD_VAR 0 2
16330: PUSH
16331: LD_VAR 0 3
16335: ARRAY
16336: PPUSH
16337: LD_STRING D2-FSol1-3
16339: PPUSH
16340: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16344: LD_EXP 18
16348: PPUSH
16349: LD_STRING D2-Kurt-4
16351: PPUSH
16352: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16356: LD_VAR 0 2
16360: PUSH
16361: LD_VAR 0 3
16365: ARRAY
16366: PPUSH
16367: CALL_OW 258
16371: PUSH
16372: LD_INT 1
16374: EQUAL
16375: IFFALSE 16395
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16377: LD_VAR 0 2
16381: PUSH
16382: LD_VAR 0 3
16386: ARRAY
16387: PPUSH
16388: LD_STRING D2-Sol1-4
16390: PPUSH
16391: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16395: LD_VAR 0 2
16399: PUSH
16400: LD_VAR 0 3
16404: ARRAY
16405: PPUSH
16406: CALL_OW 258
16410: PUSH
16411: LD_INT 2
16413: EQUAL
16414: IFFALSE 16434
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16416: LD_VAR 0 2
16420: PUSH
16421: LD_VAR 0 3
16425: ARRAY
16426: PPUSH
16427: LD_STRING D2-FSol1-4
16429: PPUSH
16430: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16434: LD_VAR 0 2
16438: PUSH
16439: LD_VAR 0 3
16443: ARRAY
16444: PPUSH
16445: CALL_OW 258
16449: PUSH
16450: LD_INT 1
16452: EQUAL
16453: IFFALSE 16473
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16455: LD_VAR 0 2
16459: PUSH
16460: LD_VAR 0 3
16464: ARRAY
16465: PPUSH
16466: LD_STRING D2-Sol1-5
16468: PPUSH
16469: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16473: LD_VAR 0 2
16477: PUSH
16478: LD_VAR 0 3
16482: ARRAY
16483: PPUSH
16484: CALL_OW 258
16488: PUSH
16489: LD_INT 2
16491: EQUAL
16492: IFFALSE 16512
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16494: LD_VAR 0 2
16498: PUSH
16499: LD_VAR 0 3
16503: ARRAY
16504: PPUSH
16505: LD_STRING D2-FSol1-5
16507: PPUSH
16508: CALL_OW 88
// DialogueOff ;
16512: CALL_OW 7
// end ; dec = ShowQuery1 ;
16516: LD_ADDR_VAR 0 4
16520: PUSH
16521: CALL 5127 0 0
16525: ST_TO_ADDR
// if dec = 1 then
16526: LD_VAR 0 4
16530: PUSH
16531: LD_INT 1
16533: EQUAL
16534: IFFALSE 16576
// begin DialogueOn ;
16536: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16540: LD_EXP 18
16544: PPUSH
16545: LD_STRING D2a-Kurt-1
16547: PPUSH
16548: CALL_OW 88
// DialogueOff ;
16552: CALL_OW 7
// InGameOff ;
16556: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16560: LD_INT 1
16562: PPUSH
16563: LD_INT 2
16565: PPUSH
16566: LD_INT 2
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 80
// end ; if dec = 2 then
16576: LD_VAR 0 4
16580: PUSH
16581: LD_INT 2
16583: EQUAL
16584: IFFALSE 17180
// begin DialogueOn ;
16586: CALL_OW 6
// if tmp [ rnd ] = JMM then
16590: LD_VAR 0 2
16594: PUSH
16595: LD_VAR 0 3
16599: ARRAY
16600: PUSH
16601: LD_EXP 1
16605: EQUAL
16606: IFFALSE 16662
// begin Say ( JMM , D2b-JMM-1 ) ;
16608: LD_EXP 1
16612: PPUSH
16613: LD_STRING D2b-JMM-1
16615: PPUSH
16616: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16620: LD_EXP 18
16624: PPUSH
16625: LD_STRING D2b-Kurt-1
16627: PPUSH
16628: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16632: LD_EXP 1
16636: PPUSH
16637: LD_STRING D2b-JMM-2
16639: PPUSH
16640: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16644: LD_EXP 18
16648: PPUSH
16649: LD_STRING D2b-Kurt-2
16651: PPUSH
16652: CALL_OW 88
// DialogueOff ;
16656: CALL_OW 7
// end else
16660: GO 16924
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16662: LD_VAR 0 2
16666: PUSH
16667: LD_VAR 0 3
16671: ARRAY
16672: PPUSH
16673: CALL_OW 258
16677: PUSH
16678: LD_INT 1
16680: EQUAL
16681: IFFALSE 16701
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16683: LD_VAR 0 2
16687: PUSH
16688: LD_VAR 0 3
16692: ARRAY
16693: PPUSH
16694: LD_STRING D2b-Sol1-1
16696: PPUSH
16697: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16701: LD_VAR 0 2
16705: PUSH
16706: LD_VAR 0 3
16710: ARRAY
16711: PPUSH
16712: CALL_OW 258
16716: PUSH
16717: LD_INT 2
16719: EQUAL
16720: IFFALSE 16740
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16722: LD_VAR 0 2
16726: PUSH
16727: LD_VAR 0 3
16731: ARRAY
16732: PPUSH
16733: LD_STRING D2b-FSol1-1
16735: PPUSH
16736: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16740: LD_EXP 18
16744: PPUSH
16745: LD_STRING D2b-Kurt-1
16747: PPUSH
16748: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16752: LD_VAR 0 2
16756: PUSH
16757: LD_VAR 0 3
16761: ARRAY
16762: PPUSH
16763: CALL_OW 258
16767: PUSH
16768: LD_INT 1
16770: EQUAL
16771: IFFALSE 16791
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16773: LD_VAR 0 2
16777: PUSH
16778: LD_VAR 0 3
16782: ARRAY
16783: PPUSH
16784: LD_STRING D2b-Sol1-2
16786: PPUSH
16787: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16791: LD_VAR 0 2
16795: PUSH
16796: LD_VAR 0 3
16800: ARRAY
16801: PPUSH
16802: CALL_OW 258
16806: PUSH
16807: LD_INT 2
16809: EQUAL
16810: IFFALSE 16830
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16812: LD_VAR 0 2
16816: PUSH
16817: LD_VAR 0 3
16821: ARRAY
16822: PPUSH
16823: LD_STRING D2b-FSol1-2
16825: PPUSH
16826: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16830: LD_EXP 18
16834: PPUSH
16835: LD_STRING D2b-Kurt-2
16837: PPUSH
16838: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16842: LD_VAR 0 2
16846: PUSH
16847: LD_VAR 0 3
16851: ARRAY
16852: PPUSH
16853: CALL_OW 258
16857: PUSH
16858: LD_INT 1
16860: EQUAL
16861: IFFALSE 16881
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16863: LD_VAR 0 2
16867: PUSH
16868: LD_VAR 0 3
16872: ARRAY
16873: PPUSH
16874: LD_STRING D2c-Sol1-2
16876: PPUSH
16877: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16881: LD_VAR 0 2
16885: PUSH
16886: LD_VAR 0 3
16890: ARRAY
16891: PPUSH
16892: CALL_OW 258
16896: PUSH
16897: LD_INT 2
16899: EQUAL
16900: IFFALSE 16920
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16902: LD_VAR 0 2
16906: PUSH
16907: LD_VAR 0 3
16911: ARRAY
16912: PPUSH
16913: LD_STRING D2c-FSol1-2
16915: PPUSH
16916: CALL_OW 88
// DialogueOff ;
16920: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16924: LD_ADDR_VAR 0 5
16928: PUSH
16929: CALL 5201 0 0
16933: ST_TO_ADDR
// if dec2 = 1 then
16934: LD_VAR 0 5
16938: PUSH
16939: LD_INT 1
16941: EQUAL
16942: IFFALSE 16980
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16944: LD_EXP 18
16948: PPUSH
16949: LD_STRING D2a-Kurt-1
16951: PPUSH
16952: CALL_OW 88
// DialogueOff ;
16956: CALL_OW 7
// InGameOff ;
16960: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16964: LD_INT 1
16966: PPUSH
16967: LD_INT 2
16969: PPUSH
16970: LD_INT 2
16972: PPUSH
16973: LD_INT 1
16975: PPUSH
16976: CALL_OW 80
// end ; if dec2 = 2 then
16980: LD_VAR 0 5
16984: PUSH
16985: LD_INT 2
16987: EQUAL
16988: IFFALSE 17180
// begin if tmp [ rnd ] = JMM then
16990: LD_VAR 0 2
16994: PUSH
16995: LD_VAR 0 3
16999: ARRAY
17000: PUSH
17001: LD_EXP 1
17005: EQUAL
17006: IFFALSE 17062
// begin Say ( JMM , D2c-JMM-1 ) ;
17008: LD_EXP 1
17012: PPUSH
17013: LD_STRING D2c-JMM-1
17015: PPUSH
17016: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17020: LD_EXP 18
17024: PPUSH
17025: LD_STRING D2c-Kurt-1
17027: PPUSH
17028: CALL_OW 88
// DialogueOff ;
17032: CALL_OW 7
// InGameOff ;
17036: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17040: LD_EXP 18
17044: PPUSH
17045: LD_INT 9
17047: PPUSH
17048: CALL_OW 113
// readyToEscape = 1 ;
17052: LD_ADDR_EXP 20
17056: PUSH
17057: LD_INT 1
17059: ST_TO_ADDR
// end else
17060: GO 17180
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17062: LD_VAR 0 2
17066: PUSH
17067: LD_VAR 0 3
17071: ARRAY
17072: PPUSH
17073: CALL_OW 258
17077: PUSH
17078: LD_INT 1
17080: EQUAL
17081: IFFALSE 17101
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17083: LD_VAR 0 2
17087: PUSH
17088: LD_VAR 0 3
17092: ARRAY
17093: PPUSH
17094: LD_STRING D2c-Sol1-1
17096: PPUSH
17097: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17101: LD_VAR 0 2
17105: PUSH
17106: LD_VAR 0 3
17110: ARRAY
17111: PPUSH
17112: CALL_OW 258
17116: PUSH
17117: LD_INT 2
17119: EQUAL
17120: IFFALSE 17140
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17122: LD_VAR 0 2
17126: PUSH
17127: LD_VAR 0 3
17131: ARRAY
17132: PPUSH
17133: LD_STRING D2c-FSol1-1
17135: PPUSH
17136: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17140: LD_EXP 18
17144: PPUSH
17145: LD_STRING D2c-Kurt-1
17147: PPUSH
17148: CALL_OW 88
// DialogueOff ;
17152: CALL_OW 7
// InGameOff ;
17156: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17160: LD_EXP 18
17164: PPUSH
17165: LD_INT 9
17167: PPUSH
17168: CALL_OW 113
// readyToEscape = 1 ;
17172: LD_ADDR_EXP 20
17176: PUSH
17177: LD_INT 1
17179: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17180: LD_VAR 0 4
17184: PUSH
17185: LD_INT 3
17187: EQUAL
17188: IFFALSE 17384
// begin DialogueOn ;
17190: CALL_OW 6
// if tmp [ rnd ] = JMM then
17194: LD_VAR 0 2
17198: PUSH
17199: LD_VAR 0 3
17203: ARRAY
17204: PUSH
17205: LD_EXP 1
17209: EQUAL
17210: IFFALSE 17266
// begin Say ( JMM , D2c-JMM-1 ) ;
17212: LD_EXP 1
17216: PPUSH
17217: LD_STRING D2c-JMM-1
17219: PPUSH
17220: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17224: LD_EXP 18
17228: PPUSH
17229: LD_STRING D2c-Kurt-1
17231: PPUSH
17232: CALL_OW 88
// DialogueOff ;
17236: CALL_OW 7
// InGameOff ;
17240: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17244: LD_EXP 18
17248: PPUSH
17249: LD_INT 9
17251: PPUSH
17252: CALL_OW 113
// readyToEscape = 1 ;
17256: LD_ADDR_EXP 20
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// end else
17264: GO 17384
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17266: LD_VAR 0 2
17270: PUSH
17271: LD_VAR 0 3
17275: ARRAY
17276: PPUSH
17277: CALL_OW 258
17281: PUSH
17282: LD_INT 1
17284: EQUAL
17285: IFFALSE 17305
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17287: LD_VAR 0 2
17291: PUSH
17292: LD_VAR 0 3
17296: ARRAY
17297: PPUSH
17298: LD_STRING D2c-Sol1-1
17300: PPUSH
17301: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17305: LD_VAR 0 2
17309: PUSH
17310: LD_VAR 0 3
17314: ARRAY
17315: PPUSH
17316: CALL_OW 258
17320: PUSH
17321: LD_INT 2
17323: EQUAL
17324: IFFALSE 17344
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17326: LD_VAR 0 2
17330: PUSH
17331: LD_VAR 0 3
17335: ARRAY
17336: PPUSH
17337: LD_STRING D2c-FSol1-1
17339: PPUSH
17340: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17344: LD_EXP 18
17348: PPUSH
17349: LD_STRING D2c-Kurt-1
17351: PPUSH
17352: CALL_OW 88
// DialogueOff ;
17356: CALL_OW 7
// InGameOff ;
17360: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17364: LD_EXP 18
17368: PPUSH
17369: LD_INT 9
17371: PPUSH
17372: CALL_OW 113
// readyToEscape = 1 ;
17376: LD_ADDR_EXP 20
17380: PUSH
17381: LD_INT 1
17383: ST_TO_ADDR
// end ; end ; end ; end_of_file
17384: LD_VAR 0 1
17388: RET
// every 0 0$1 do
17389: GO 17391
17391: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17392: LD_INT 3
17394: PPUSH
17395: LD_INT 32
17397: PPUSH
17398: LD_INT 3
17400: PPUSH
17401: CALL 5256 0 3
17405: END
// every 0 0$1 do
17406: GO 17408
17408: DISABLE
// begin enable ;
17409: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17410: LD_INT 3
17412: PPUSH
17413: LD_INT 2
17415: PPUSH
17416: CALL 5341 0 2
// if disableHealAI = 0 then
17420: LD_EXP 31
17424: PUSH
17425: LD_INT 0
17427: EQUAL
17428: IFFALSE 17446
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17430: LD_INT 3
17432: PPUSH
17433: LD_INT 10
17435: PPUSH
17436: LD_INT 11
17438: PPUSH
17439: LD_INT 32
17441: PPUSH
17442: CALL 5600 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17446: LD_INT 3
17448: PPUSH
17449: LD_INT 51
17451: PPUSH
17452: LD_INT 7
17454: PPUSH
17455: CALL 6323 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17459: LD_INT 3
17461: PPUSH
17462: LD_INT 14
17464: PPUSH
17465: LD_INT 121
17467: PPUSH
17468: LD_INT 100
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: CALL 6503 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17478: LD_INT 3
17480: PPUSH
17481: LD_EXP 29
17485: PPUSH
17486: CALL 7294 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17490: LD_INT 3
17492: PPUSH
17493: LD_INT 8
17495: PUSH
17496: LD_INT 67
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: PPUSH
17506: LD_INT 2
17508: PPUSH
17509: CALL_OW 12
17513: ARRAY
17514: PPUSH
17515: LD_INT 11
17517: PPUSH
17518: CALL 7500 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17522: LD_INT 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL 7857 0 2
// end ;
17532: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17533: LD_INT 22
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 21
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 55
17555: PUSH
17556: EMPTY
17557: LIST
17558: PUSH
17559: LD_INT 3
17561: PUSH
17562: LD_INT 34
17564: PUSH
17565: LD_INT 51
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 69
17586: PUSH
17587: LD_INT 0
17589: EQUAL
17590: IFFALSE 17742
17592: GO 17594
17594: DISABLE
// begin enable ;
17595: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17596: LD_INT 2
17598: PPUSH
17599: CALL_OW 274
17603: PPUSH
17604: LD_INT 1
17606: PPUSH
17607: LD_INT 1000
17609: PPUSH
17610: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17614: LD_INT 3
17616: PPUSH
17617: LD_INT 21
17619: PPUSH
17620: LD_INT 4
17622: PUSH
17623: LD_INT 5
17625: PUSH
17626: LD_INT 5
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PUSH
17634: LD_OWVAR 67
17638: ARRAY
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: LD_INT 43
17645: PUSH
17646: LD_INT 43
17648: PUSH
17649: LD_INT 43
17651: PUSH
17652: LD_INT 44
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 44
17663: PUSH
17664: LD_INT 44
17666: PUSH
17667: LD_INT 44
17669: PUSH
17670: LD_INT 43
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 44
17681: PUSH
17682: LD_INT 44
17684: PUSH
17685: LD_INT 44
17687: PUSH
17688: LD_INT 44
17690: PUSH
17691: LD_INT 46
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: LD_OWVAR 67
17710: ARRAY
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_INT 24
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: LIST
17731: PUSH
17732: LD_OWVAR 67
17736: ARRAY
17737: PPUSH
17738: CALL 5866 0 8
// end ;
17742: END
// every 5 5$0 do
17743: GO 17745
17745: DISABLE
// begin enable ;
17746: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17747: LD_INT 17
17749: PPUSH
17750: LD_INT 22
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 42
17761: PUSH
17762: LD_INT 43
17764: PUSH
17765: LD_INT 44
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 1
17775: PPUSH
17776: LD_INT 3
17778: PPUSH
17779: CALL_OW 12
17783: ARRAY
17784: PPUSH
17785: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17789: LD_INT 17
17791: PPUSH
17792: LD_INT 22
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: LD_INT 51
17803: PPUSH
17804: CALL_OW 185
// end ;
17808: END
// every 2 2$0 do var i , j ;
17809: GO 17811
17811: DISABLE
17812: LD_INT 0
17814: PPUSH
17815: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17816: LD_INT 14700
17818: PUSH
17819: LD_INT 33600
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_INT 2
17831: PPUSH
17832: CALL_OW 12
17836: ARRAY
17837: PPUSH
17838: CALL_OW 67
// disableHealAI = 1 ;
17842: LD_ADDR_EXP 31
17846: PUSH
17847: LD_INT 1
17849: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 22
17857: PUSH
17858: LD_INT 3
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 25
17867: PUSH
17868: LD_INT 4
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: PUSH
17884: FOR_IN
17885: IFFALSE 17898
// ComExitBuilding ( i ) ;
17887: LD_VAR 0 1
17891: PPUSH
17892: CALL_OW 122
17896: GO 17884
17898: POP
17899: POP
// wait ( 0 0$1 ) ;
17900: LD_INT 35
17902: PPUSH
17903: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17907: LD_INT 35
17909: PPUSH
17910: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_INT 3
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 25
17931: PUSH
17932: LD_INT 4
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 69
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18026
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17951: LD_ADDR_VAR 0 2
17955: PUSH
17956: LD_INT 19
17958: PPUSH
17959: LD_INT 22
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 25
17971: PUSH
17972: LD_INT 12
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PPUSH
17983: CALL_OW 70
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18022
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17991: LD_VAR 0 1
17995: PPUSH
17996: LD_VAR 0 2
18000: PPUSH
18001: CALL_OW 250
18005: PPUSH
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 251
18015: PPUSH
18016: CALL_OW 191
// end ;
18020: GO 17988
18022: POP
18023: POP
// end ;
18024: GO 17948
18026: POP
18027: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18028: LD_INT 22
18030: PUSH
18031: LD_INT 3
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 25
18040: PUSH
18041: LD_INT 4
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: PUSH
18057: LD_INT 0
18059: EQUAL
18060: PUSH
18061: LD_EXP 30
18065: PUSH
18066: LD_INT 6
18068: PUSH
18069: LD_INT 7
18071: PUSH
18072: LD_INT 8
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: LIST
18079: PUSH
18080: LD_OWVAR 67
18084: ARRAY
18085: GREATEREQUAL
18086: OR
18087: PUSH
18088: LD_INT 19
18090: PPUSH
18091: LD_INT 22
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 25
18103: PUSH
18104: LD_INT 12
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PPUSH
18115: CALL_OW 70
18119: PUSH
18120: LD_INT 0
18122: EQUAL
18123: OR
18124: IFFALSE 17907
// disableHealAI = 0 ;
18126: LD_ADDR_EXP 31
18130: PUSH
18131: LD_INT 0
18133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_INT 3
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 25
18151: PUSH
18152: LD_INT 12
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: PUSH
18168: FOR_IN
18169: IFFALSE 18185
// SetClass ( i , 16 ) ;
18171: LD_VAR 0 1
18175: PPUSH
18176: LD_INT 16
18178: PPUSH
18179: CALL_OW 336
18183: GO 18168
18185: POP
18186: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18187: LD_ADDR_VAR 0 1
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 25
18204: PUSH
18205: LD_INT 4
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18241
// ComMoveXY ( i , 113 , 94 ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_INT 113
18231: PPUSH
18232: LD_INT 94
18234: PPUSH
18235: CALL_OW 111
18239: GO 18221
18241: POP
18242: POP
// end ;
18243: PPOPN 2
18245: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18246: LD_INT 21
18248: PPUSH
18249: CALL_OW 255
18253: PUSH
18254: LD_INT 3
18256: EQUAL
18257: PUSH
18258: LD_INT 21
18260: PPUSH
18261: CALL_OW 302
18265: AND
18266: PUSH
18267: LD_INT 22
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 34
18279: PUSH
18280: LD_INT 51
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 69
18295: PUSH
18296: LD_INT 0
18298: EQUAL
18299: AND
18300: IFFALSE 18332
18302: GO 18304
18304: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18305: LD_INT 21
18307: PPUSH
18308: LD_INT 23
18310: PPUSH
18311: LD_INT 1
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: LD_INT 51
18319: PPUSH
18320: CALL_OW 185
// wait ( 5 5$0 ) ;
18324: LD_INT 10500
18326: PPUSH
18327: CALL_OW 67
// enable ;
18331: ENABLE
// end ; end_of_file
18332: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18333: LD_EXP 25
18337: PUSH
18338: LD_INT 0
18340: LESSEQUAL
18341: IFFALSE 18481
18343: GO 18345
18345: DISABLE
18346: LD_INT 0
18348: PPUSH
18349: PPUSH
18350: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_INT 22
18358: PUSH
18359: LD_INT 1
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 21
18368: PUSH
18369: LD_INT 3
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 2
18378: PUSH
18379: LD_INT 30
18381: PUSH
18382: LD_INT 0
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 30
18391: PUSH
18392: LD_INT 1
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: ST_TO_ADDR
// for i in tmp do
18414: LD_ADDR_VAR 0 1
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: FOR_IN
18425: IFFALSE 18458
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18427: LD_ADDR_VAR 0 3
18431: PUSH
18432: LD_VAR 0 3
18436: PUSH
18437: LD_VAR 0 1
18441: PPUSH
18442: CALL_OW 274
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: CALL_OW 275
18454: PLUS
18455: ST_TO_ADDR
18456: GO 18424
18458: POP
18459: POP
// if yourCrates >= needCrates then
18460: LD_VAR 0 3
18464: PUSH
18465: LD_EXP 24
18469: GREATEREQUAL
18470: IFFALSE 18481
// begin FinishMission ( yourCrates ) ;
18472: LD_VAR 0 3
18476: PPUSH
18477: CALL 18484 0 1
// end ; end ;
18481: PPOPN 3
18483: END
// export function FinishMission ( crates ) ; begin
18484: LD_INT 0
18486: PPUSH
// if crates + 100 > crates then
18487: LD_VAR 0 1
18491: PUSH
18492: LD_INT 100
18494: PLUS
18495: PUSH
18496: LD_VAR 0 1
18500: GREATER
18501: IFFALSE 18525
// begin AddMedal ( cans , 1 ) ;
18503: LD_STRING cans
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18513: LD_INT 1
18515: PPUSH
18516: LD_STRING 06_crates_1
18518: PPUSH
18519: CALL_OW 39
// end else
18523: GO 18546
// begin AddMedal ( cans , - 1 ) ;
18525: LD_STRING cans
18527: PPUSH
18528: LD_INT 1
18530: NEG
18531: PPUSH
18532: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18536: LD_INT 0
18538: PPUSH
18539: LD_STRING 06_crates_1
18541: PPUSH
18542: CALL_OW 39
// end ; if unitLost < 2 then
18546: LD_EXP 28
18550: PUSH
18551: LD_INT 2
18553: LESS
18554: IFFALSE 18568
// begin AddMedal ( people , 1 ) ;
18556: LD_STRING people
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 101
// end else
18566: GO 18579
// begin AddMedal ( people , - 1 ) ;
18568: LD_STRING people
18570: PPUSH
18571: LD_INT 1
18573: NEG
18574: PPUSH
18575: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18579: LD_EXP 27
18583: PPUSH
18584: LD_STRING 06_remoteVehs_1
18586: PPUSH
18587: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18591: LD_EXP 27
18595: PUSH
18596: LD_INT 1
18598: EQUAL
18599: IFFALSE 18613
// begin AddMedal ( remote , 1 ) ;
18601: LD_STRING remote
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 101
// end else
18611: GO 18653
// begin if GetTech ( 18 , 1 ) = state_enabled then
18613: LD_INT 18
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 321
18623: PUSH
18624: LD_INT 1
18626: EQUAL
18627: IFFALSE 18642
// begin AddMedal ( remote , - 1 ) ;
18629: LD_STRING remote
18631: PPUSH
18632: LD_INT 1
18634: NEG
18635: PPUSH
18636: CALL_OW 101
// end else
18640: GO 18653
// begin AddMedal ( remote , - 2 ) ;
18642: LD_STRING remote
18644: PPUSH
18645: LD_INT 2
18647: NEG
18648: PPUSH
18649: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18653: LD_EXP 19
18657: PPUSH
18658: LD_STRING 06_KurtStatus_1
18660: PPUSH
18661: CALL_OW 39
// GiveMedals ( Main ) ;
18665: LD_STRING Main
18667: PPUSH
18668: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18672: LD_INT 50
18674: PUSH
18675: EMPTY
18676: LIST
18677: PUSH
18678: LD_INT 22
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 25
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 25
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 25
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 25
18733: PUSH
18734: LD_INT 4
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: PPUSH
18759: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18763: LD_EXP 1
18767: PPUSH
18768: LD_EXP 37
18772: PUSH
18773: LD_STRING JMM
18775: STR
18776: PPUSH
18777: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18781: LD_EXP 2
18785: PPUSH
18786: LD_EXP 37
18790: PUSH
18791: LD_STRING Lisa
18793: STR
18794: PPUSH
18795: CALL 4744 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18799: LD_EXP 3
18803: PPUSH
18804: LD_EXP 37
18808: PUSH
18809: LD_STRING Bobby
18811: STR
18812: PPUSH
18813: CALL 4744 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18817: LD_EXP 4
18821: PPUSH
18822: LD_EXP 37
18826: PUSH
18827: LD_STRING Cyrus
18829: STR
18830: PPUSH
18831: CALL 4744 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18835: LD_EXP 5
18839: PPUSH
18840: LD_EXP 37
18844: PUSH
18845: LD_STRING Frank
18847: STR
18848: PPUSH
18849: CALL 4744 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18853: LD_EXP 6
18857: PPUSH
18858: LD_EXP 37
18862: PUSH
18863: LD_STRING Brown
18865: STR
18866: PPUSH
18867: CALL 4744 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18871: LD_EXP 7
18875: PPUSH
18876: LD_EXP 37
18880: PUSH
18881: LD_STRING Donaldson
18883: STR
18884: PPUSH
18885: CALL 4744 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18889: LD_EXP 8
18893: PPUSH
18894: LD_EXP 37
18898: PUSH
18899: LD_STRING Gladstone
18901: STR
18902: PPUSH
18903: CALL 4744 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18907: LD_EXP 9
18911: PPUSH
18912: LD_EXP 37
18916: PUSH
18917: LD_STRING Denis
18919: STR
18920: PPUSH
18921: CALL 4744 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
18925: LD_EXP 14
18929: PPUSH
18930: LD_EXP 37
18934: PUSH
18935: LD_STRING Joan
18937: STR
18938: PPUSH
18939: CALL 4744 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18943: LD_EXP 15
18947: PPUSH
18948: LD_STRING 06_JoanStatus_1
18950: PPUSH
18951: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18955: LD_INT 50
18957: PUSH
18958: EMPTY
18959: LIST
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_INT 1
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 21
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 2
18983: PUSH
18984: LD_INT 25
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 25
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 25
19006: PUSH
19007: LD_INT 3
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 25
19016: PUSH
19017: LD_INT 4
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 69
19041: PUSH
19042: LD_EXP 1
19046: PUSH
19047: LD_EXP 2
19051: PUSH
19052: LD_EXP 3
19056: PUSH
19057: LD_EXP 4
19061: PUSH
19062: LD_EXP 5
19066: PUSH
19067: LD_EXP 6
19071: PUSH
19072: LD_EXP 7
19076: PUSH
19077: LD_EXP 8
19081: PUSH
19082: LD_EXP 9
19086: PUSH
19087: LD_EXP 14
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: DIFF
19104: PPUSH
19105: LD_STRING 06_other_survivors
19107: PPUSH
19108: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19112: LD_INT 50
19114: PUSH
19115: EMPTY
19116: LIST
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 25
19143: PUSH
19144: LD_INT 12
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 25
19153: PUSH
19154: LD_INT 16
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: PPUSH
19177: LD_STRING 06_other_apemans
19179: PPUSH
19180: CALL_OW 38
// YouWin ;
19184: CALL_OW 103
// end ; end_of_file
19188: LD_VAR 0 2
19192: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
19193: LD_EXP 35
19197: PUSH
19198: LD_INT 4
19200: PUSH
19201: LD_INT 3
19203: PUSH
19204: LD_INT 3
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: LD_OWVAR 67
19216: ARRAY
19217: EQUAL
19218: IFFALSE 19333
19220: GO 19222
19222: DISABLE
// begin enable ;
19223: ENABLE
// sendedConvoys = 0 ;
19224: LD_ADDR_EXP 35
19228: PUSH
19229: LD_INT 0
19231: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19232: LD_INT 6
19234: PPUSH
19235: LD_INT 3
19237: PPUSH
19238: LD_INT 3
19240: PPUSH
19241: LD_INT 4
19243: PPUSH
19244: CALL_OW 12
19248: PUSH
19249: LD_INT 4
19251: PPUSH
19252: LD_INT 5
19254: PPUSH
19255: CALL_OW 12
19259: PUSH
19260: LD_INT 6
19262: PPUSH
19263: LD_INT 7
19265: PPUSH
19266: CALL_OW 12
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: LD_OWVAR 67
19280: ARRAY
19281: PPUSH
19282: LD_INT 0
19284: PPUSH
19285: LD_INT 0
19287: PPUSH
19288: LD_INT 0
19290: PPUSH
19291: LD_INT 3
19293: PPUSH
19294: LD_EXP 32
19298: PPUSH
19299: LD_EXP 33
19303: PPUSH
19304: CALL_OW 12
19308: PPUSH
19309: LD_INT 18
19311: PPUSH
19312: LD_INT 17
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: LD_INT 2
19323: PPUSH
19324: CALL_OW 12
19328: PPUSH
19329: CALL 8087 0 12
// end ; end_of_file
19333: END
// export function PrepareNature ; var i , un ; begin
19334: LD_INT 0
19336: PPUSH
19337: PPUSH
19338: PPUSH
// for i = 1 to Difficulty + 2 do
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: DOUBLE
19345: LD_INT 1
19347: DEC
19348: ST_TO_ADDR
19349: LD_OWVAR 67
19353: PUSH
19354: LD_INT 2
19356: PLUS
19357: PUSH
19358: FOR_TO
19359: IFFALSE 19494
// begin hc_sex = sex_male ;
19361: LD_ADDR_OWVAR 27
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// uc_side = 0 ;
19369: LD_ADDR_OWVAR 20
19373: PUSH
19374: LD_INT 0
19376: ST_TO_ADDR
// uc_nation = nation_nature ;
19377: LD_ADDR_OWVAR 21
19381: PUSH
19382: LD_INT 0
19384: ST_TO_ADDR
// hc_class = class_tiger ;
19385: LD_ADDR_OWVAR 28
19389: PUSH
19390: LD_INT 14
19392: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19393: LD_ADDR_OWVAR 31
19397: PUSH
19398: LD_EXP 33
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
19418: LD_ADDR_OWVAR 35
19422: PUSH
19423: LD_INT 30
19425: PPUSH
19426: LD_INT 40
19428: PPUSH
19429: CALL_OW 12
19433: PUSH
19434: LD_INT 40
19436: PPUSH
19437: LD_INT 50
19439: PPUSH
19440: CALL_OW 12
19444: PUSH
19445: LD_INT 50
19447: PPUSH
19448: LD_INT 60
19450: PPUSH
19451: CALL_OW 12
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: PUSH
19461: LD_OWVAR 67
19465: ARRAY
19466: ST_TO_ADDR
// un = CreateHuman ;
19467: LD_ADDR_VAR 0 3
19471: PUSH
19472: CALL_OW 44
19476: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19477: LD_VAR 0 3
19481: PPUSH
19482: LD_INT 20
19484: PPUSH
19485: LD_INT 0
19487: PPUSH
19488: CALL_OW 49
// end ;
19492: GO 19358
19494: POP
19495: POP
// for i = 1 to rand ( 3 , 4 ) do
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: DOUBLE
19502: LD_INT 1
19504: DEC
19505: ST_TO_ADDR
19506: LD_INT 3
19508: PPUSH
19509: LD_INT 4
19511: PPUSH
19512: CALL_OW 12
19516: PUSH
19517: FOR_TO
19518: IFFALSE 19612
// begin hc_sex = sex_male ;
19520: LD_ADDR_OWVAR 27
19524: PUSH
19525: LD_INT 1
19527: ST_TO_ADDR
// uc_side = 0 ;
19528: LD_ADDR_OWVAR 20
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
// uc_nation = nation_nature ;
19536: LD_ADDR_OWVAR 21
19540: PUSH
19541: LD_INT 0
19543: ST_TO_ADDR
// hc_class = 18 ;
19544: LD_ADDR_OWVAR 28
19548: PUSH
19549: LD_INT 18
19551: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19552: LD_ADDR_OWVAR 31
19556: PUSH
19557: LD_EXP 33
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: LD_INT 0
19567: PUSH
19568: LD_INT 0
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: ST_TO_ADDR
// hc_agressivity = 0 ;
19577: LD_ADDR_OWVAR 35
19581: PUSH
19582: LD_INT 0
19584: ST_TO_ADDR
// un = CreateHuman ;
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: CALL_OW 44
19594: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 20
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: CALL_OW 49
// end ;
19610: GO 19517
19612: POP
19613: POP
// end ;
19614: LD_VAR 0 1
19618: RET
