// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5616 0 0
// PrepareNature ;
 226: CALL 21220 0 0
// PrepareRussian ;
 230: CALL 4723 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1799 0 0
// PreparePlayerApemans ;
 246: CALL 1941 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5100 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5100 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5100 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5100 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5100 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5100 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5100 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5100 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5100 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1478: LD_ADDR_VAR 0 5
1482: PUSH
1483: LD_STRING 06_VehiclesIn06_1
1485: PPUSH
1486: EMPTY
1487: PPUSH
1488: CALL_OW 30
1492: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1493: LD_ADDR_EXP 40
1497: PUSH
1498: LD_STRING 06_ResourcesInCargo06_1
1500: PPUSH
1501: EMPTY
1502: PPUSH
1503: CALL_OW 30
1507: ST_TO_ADDR
// uc_side = 1 ;
1508: LD_ADDR_OWVAR 20
1512: PUSH
1513: LD_INT 1
1515: ST_TO_ADDR
// if vehicles > 0 then
1516: LD_VAR 0 5
1520: PUSH
1521: LD_INT 0
1523: GREATER
1524: IFFALSE 1794
// begin for i := 1 to vehicles do
1526: LD_ADDR_VAR 0 2
1530: PUSH
1531: DOUBLE
1532: LD_INT 1
1534: DEC
1535: ST_TO_ADDR
1536: LD_VAR 0 5
1540: PUSH
1541: FOR_TO
1542: IFFALSE 1792
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1544: LD_ADDR_OWVAR 21
1548: PUSH
1549: LD_VAR 0 5
1553: PUSH
1554: LD_VAR 0 2
1558: ARRAY
1559: PUSH
1560: LD_INT 1
1562: ARRAY
1563: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1564: LD_ADDR_OWVAR 37
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_VAR 0 2
1578: ARRAY
1579: PUSH
1580: LD_INT 2
1582: ARRAY
1583: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1584: LD_ADDR_OWVAR 39
1588: PUSH
1589: LD_VAR 0 5
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 3
1602: ARRAY
1603: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1604: LD_ADDR_OWVAR 38
1608: PUSH
1609: LD_VAR 0 5
1613: PUSH
1614: LD_VAR 0 2
1618: ARRAY
1619: PUSH
1620: LD_INT 4
1622: ARRAY
1623: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1624: LD_ADDR_OWVAR 40
1628: PUSH
1629: LD_VAR 0 5
1633: PUSH
1634: LD_VAR 0 2
1638: ARRAY
1639: PUSH
1640: LD_INT 5
1642: ARRAY
1643: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1644: LD_ADDR_OWVAR 41
1648: PUSH
1649: LD_INT 40
1651: ST_TO_ADDR
// veh = CreateVehicle ;
1652: LD_ADDR_VAR 0 4
1656: PUSH
1657: CALL_OW 45
1661: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1662: LD_VAR 0 4
1666: PPUSH
1667: LD_INT 3
1669: PPUSH
1670: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1674: LD_VAR 0 4
1678: PPUSH
1679: LD_INT 2
1681: PPUSH
1682: LD_INT 0
1684: PPUSH
1685: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1689: LD_OWVAR 40
1693: PUSH
1694: LD_INT 12
1696: EQUAL
1697: IFFALSE 1790
// begin if resources > 0 then
1699: LD_EXP 40
1703: PUSH
1704: LD_INT 0
1706: GREATER
1707: IFFALSE 1790
// begin AddCargo ( veh , 1 , resources [ i ] [ 1 ] ) ;
1709: LD_VAR 0 4
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: LD_EXP 40
1721: PUSH
1722: LD_VAR 0 2
1726: ARRAY
1727: PUSH
1728: LD_INT 1
1730: ARRAY
1731: PPUSH
1732: CALL_OW 291
// AddCargo ( veh , 2 , resources [ i ] [ 2 ] ) ;
1736: LD_VAR 0 4
1740: PPUSH
1741: LD_INT 2
1743: PPUSH
1744: LD_EXP 40
1748: PUSH
1749: LD_VAR 0 2
1753: ARRAY
1754: PUSH
1755: LD_INT 2
1757: ARRAY
1758: PPUSH
1759: CALL_OW 291
// AddCargo ( veh , 3 , resources [ i ] [ 3 ] ) ;
1763: LD_VAR 0 4
1767: PPUSH
1768: LD_INT 3
1770: PPUSH
1771: LD_EXP 40
1775: PUSH
1776: LD_VAR 0 2
1780: ARRAY
1781: PUSH
1782: LD_INT 3
1784: ARRAY
1785: PPUSH
1786: CALL_OW 291
// end ; end ; end ;
1790: GO 1541
1792: POP
1793: POP
// end ; end ;
1794: LD_VAR 0 1
1798: RET
// export function PrepareOthers ; var i , veh ; begin
1799: LD_INT 0
1801: PPUSH
1802: PPUSH
1803: PPUSH
// uc_side = 1 ;
1804: LD_ADDR_OWVAR 20
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// uc_nation = 1 ;
1812: LD_ADDR_OWVAR 21
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1820: LD_ADDR_EXP 11
1824: PUSH
1825: LD_STRING OthersIn06
1827: PPUSH
1828: CALL_OW 31
1832: ST_TO_ADDR
// for i in others do
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: LD_EXP 11
1842: PUSH
1843: FOR_IN
1844: IFFALSE 1934
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1846: LD_ADDR_VAR 0 3
1850: PUSH
1851: LD_INT 22
1853: PUSH
1854: LD_INT 1
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 21
1863: PUSH
1864: LD_INT 2
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 58
1873: PUSH
1874: EMPTY
1875: LIST
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: ST_TO_ADDR
// if veh > 0 then
1887: LD_VAR 0 3
1891: PUSH
1892: LD_INT 0
1894: GREATER
1895: IFFALSE 1917
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_VAR 0 3
1906: PUSH
1907: LD_INT 1
1909: ARRAY
1910: PPUSH
1911: CALL_OW 52
// end else
1915: GO 1932
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// end ; end ;
1932: GO 1843
1934: POP
1935: POP
// end ;
1936: LD_VAR 0 1
1940: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1941: LD_INT 0
1943: PPUSH
1944: PPUSH
1945: PPUSH
// uc_side = 1 ;
1946: LD_ADDR_OWVAR 20
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// uc_nation = 0 ;
1954: LD_ADDR_OWVAR 21
1958: PUSH
1959: LD_INT 0
1961: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1962: LD_ADDR_EXP 12
1966: PUSH
1967: LD_STRING ApeIn06
1969: PPUSH
1970: CALL_OW 31
1974: ST_TO_ADDR
// for i in ape do
1975: LD_ADDR_VAR 0 2
1979: PUSH
1980: LD_EXP 12
1984: PUSH
1985: FOR_IN
1986: IFFALSE 2005
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 49
2003: GO 1985
2005: POP
2006: POP
// end ;
2007: LD_VAR 0 1
2011: RET
// export function PrepareDenis ; begin
2012: LD_INT 0
2014: PPUSH
// uc_side = 1 ;
2015: LD_ADDR_OWVAR 20
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// uc_nation = 1 ;
2023: LD_ADDR_OWVAR 21
2027: PUSH
2028: LD_INT 1
2030: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2031: LD_ADDR_EXP 9
2035: PUSH
2036: LD_STRING Denis
2038: PPUSH
2039: LD_INT 1
2041: PPUSH
2042: CALL 5100 0 2
2046: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2047: LD_EXP 9
2051: PPUSH
2052: LD_INT 13
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2062: LD_EXP 9
2066: PPUSH
2067: LD_INT 4
2069: PPUSH
2070: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2074: LD_EXP 9
2078: PPUSH
2079: LD_INT 750
2081: PPUSH
2082: CALL_OW 234
// end ;
2086: LD_VAR 0 1
2090: RET
// export function HarrisonSupport ; var un , veh ; begin
2091: LD_INT 0
2093: PPUSH
2094: PPUSH
2095: PPUSH
// uc_side = 1 ;
2096: LD_ADDR_OWVAR 20
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// uc_nation = 1 ;
2104: LD_ADDR_OWVAR 21
2108: PUSH
2109: LD_INT 1
2111: ST_TO_ADDR
// vc_engine = 1 ;
2112: LD_ADDR_OWVAR 39
2116: PUSH
2117: LD_INT 1
2119: ST_TO_ADDR
// vc_control = 1 ;
2120: LD_ADDR_OWVAR 38
2124: PUSH
2125: LD_INT 1
2127: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2128: LD_ADDR_OWVAR 40
2132: PUSH
2133: LD_INT 4
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_OWVAR 67
2151: ARRAY
2152: ST_TO_ADDR
// vc_chassis = 2 ;
2153: LD_ADDR_OWVAR 37
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// veh = CreateVehicle ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: CALL_OW 45
2170: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2171: LD_VAR 0 3
2175: PPUSH
2176: LD_INT 2
2178: PPUSH
2179: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2183: LD_VAR 0 3
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2198: LD_VAR 0 3
2202: PPUSH
2203: LD_INT 50
2205: PPUSH
2206: CALL_OW 240
// hc_class := 2 ;
2210: LD_ADDR_OWVAR 28
2214: PUSH
2215: LD_INT 2
2217: ST_TO_ADDR
// hc_sex := sex_male ;
2218: LD_ADDR_OWVAR 27
2222: PUSH
2223: LD_INT 1
2225: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2226: LD_ADDR_OWVAR 33
2230: PUSH
2231: LD_STRING SecondCharsGal
2233: ST_TO_ADDR
// hc_face_number := 52 ;
2234: LD_ADDR_OWVAR 34
2238: PUSH
2239: LD_INT 52
2241: ST_TO_ADDR
// hc_name := Craig Brown ;
2242: LD_ADDR_OWVAR 26
2246: PUSH
2247: LD_STRING Craig Brown
2249: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2250: LD_ADDR_OWVAR 29
2254: PUSH
2255: LD_INT 10
2257: PUSH
2258: LD_INT 10
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2265: LD_ADDR_OWVAR 30
2269: PUSH
2270: LD_INT 0
2272: PUSH
2273: LD_INT 2
2275: PUSH
2276: LD_INT 0
2278: PUSH
2279: LD_INT 0
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2288: LD_ADDR_OWVAR 31
2292: PUSH
2293: LD_INT 2
2295: PUSH
2296: LD_INT 3
2298: PUSH
2299: LD_INT 0
2301: PUSH
2302: LD_INT 0
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2311: LD_ADDR_EXP 17
2315: PUSH
2316: CALL_OW 44
2320: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2321: LD_EXP 17
2325: PPUSH
2326: LD_VAR 0 3
2330: PPUSH
2331: CALL_OW 52
// vc_engine = 1 ;
2335: LD_ADDR_OWVAR 39
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_control = 1 ;
2343: LD_ADDR_OWVAR 38
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2351: LD_ADDR_OWVAR 40
2355: PUSH
2356: LD_INT 4
2358: PUSH
2359: LD_INT 2
2361: PUSH
2362: LD_INT 2
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: LIST
2369: PUSH
2370: LD_OWVAR 67
2374: ARRAY
2375: ST_TO_ADDR
// vc_chassis = 2 ;
2376: LD_ADDR_OWVAR 37
2380: PUSH
2381: LD_INT 2
2383: ST_TO_ADDR
// veh = CreateVehicle ;
2384: LD_ADDR_VAR 0 3
2388: PUSH
2389: CALL_OW 45
2393: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2394: LD_VAR 0 3
2398: PPUSH
2399: LD_INT 2
2401: PPUSH
2402: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2406: LD_VAR 0 3
2410: PPUSH
2411: LD_INT 3
2413: PPUSH
2414: LD_INT 0
2416: PPUSH
2417: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2421: LD_VAR 0 3
2425: PPUSH
2426: LD_INT 50
2428: PPUSH
2429: CALL_OW 240
// hc_class := 1 ;
2433: LD_ADDR_OWVAR 28
2437: PUSH
2438: LD_INT 1
2440: ST_TO_ADDR
// hc_sex := sex_female ;
2441: LD_ADDR_OWVAR 27
2445: PUSH
2446: LD_INT 2
2448: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2449: LD_ADDR_OWVAR 33
2453: PUSH
2454: LD_STRING SecondCharsGal
2456: ST_TO_ADDR
// hc_face_number := 45 ;
2457: LD_ADDR_OWVAR 34
2461: PUSH
2462: LD_INT 45
2464: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2465: LD_ADDR_OWVAR 29
2469: PUSH
2470: LD_INT 11
2472: PUSH
2473: LD_INT 10
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2480: LD_ADDR_OWVAR 26
2484: PUSH
2485: LD_STRING Ingrid Jonsson
2487: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2488: LD_ADDR_OWVAR 30
2492: PUSH
2493: LD_INT 1
2495: PUSH
2496: LD_INT 1
2498: PUSH
2499: LD_INT 0
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2511: LD_ADDR_OWVAR 31
2515: PUSH
2516: LD_INT 3
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: LD_INT 1
2524: PUSH
2525: LD_INT 0
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2534: LD_ADDR_EXP 18
2538: PUSH
2539: CALL_OW 44
2543: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2544: LD_EXP 18
2548: PPUSH
2549: LD_VAR 0 3
2553: PPUSH
2554: CALL_OW 52
// end ;
2558: LD_VAR 0 1
2562: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2563: LD_INT 0
2565: PPUSH
2566: PPUSH
2567: PPUSH
2568: PPUSH
2569: PPUSH
// j = 0 ;
2570: LD_ADDR_VAR 0 3
2574: PUSH
2575: LD_INT 0
2577: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2578: LD_INT 35
2580: PPUSH
2581: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2585: LD_ADDR_VAR 0 2
2589: PUSH
2590: LD_INT 22
2592: PUSH
2593: LD_INT 1
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 21
2602: PUSH
2603: LD_INT 1
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 26
2612: PUSH
2613: LD_INT 1
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 2
2622: PUSH
2623: LD_INT 25
2625: PUSH
2626: LD_INT 1
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 25
2635: PUSH
2636: LD_INT 2
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 25
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 25
2655: PUSH
2656: LD_INT 4
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: PUSH
2681: FOR_IN
2682: IFFALSE 2808
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2684: LD_INT 22
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: PUSH
2694: LD_INT 2
2696: PUSH
2697: LD_INT 21
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 21
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 21
2719: PUSH
2720: LD_INT 3
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 59
2729: PUSH
2730: EMPTY
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: PUSH
2740: LD_INT 91
2742: PUSH
2743: LD_VAR 0 2
2747: PUSH
2748: LD_INT 25
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: NOT
2766: PUSH
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_EXP 1
2776: PPUSH
2777: CALL_OW 296
2781: PUSH
2782: LD_INT 15
2784: LESS
2785: AND
2786: IFFALSE 2806
// begin tmp = i ;
2788: LD_ADDR_VAR 0 4
2792: PUSH
2793: LD_VAR 0 2
2797: ST_TO_ADDR
// j = 1 ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_INT 1
2805: ST_TO_ADDR
// end ; end ;
2806: GO 2681
2808: POP
2809: POP
// until j = 1 ;
2810: LD_VAR 0 3
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: IFFALSE 2578
// blockSpawn = 1 ;
2820: LD_ADDR_EXP 29
2824: PUSH
2825: LD_INT 1
2827: ST_TO_ADDR
// uc_side = 4 ;
2828: LD_ADDR_OWVAR 20
2832: PUSH
2833: LD_INT 4
2835: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2836: LD_ADDR_EXP 15
2840: PUSH
2841: LD_STRING Joan
2843: PPUSH
2844: LD_INT 0
2846: PPUSH
2847: CALL 5100 0 2
2851: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2852: LD_EXP 15
2856: PPUSH
2857: LD_VAR 0 4
2861: PPUSH
2862: CALL_OW 250
2866: PPUSH
2867: LD_VAR 0 4
2871: PPUSH
2872: CALL_OW 251
2876: PPUSH
2877: LD_INT 5
2879: PPUSH
2880: LD_INT 1
2882: PPUSH
2883: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2887: LD_EXP 15
2891: PPUSH
2892: LD_INT 250
2894: PPUSH
2895: CALL_OW 234
// InGameOn ;
2899: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2903: LD_EXP 15
2907: PPUSH
2908: CALL_OW 87
// wait ( 0 0$2 ) ;
2912: LD_INT 70
2914: PPUSH
2915: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2919: LD_VAR 0 4
2923: PPUSH
2924: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2928: LD_VAR 0 4
2932: PPUSH
2933: CALL_OW 122
// wait ( 0 0$1 ) ;
2937: LD_INT 35
2939: PPUSH
2940: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2944: LD_VAR 0 4
2948: PPUSH
2949: LD_EXP 15
2953: PPUSH
2954: CALL_OW 112
// wait ( 0 0$2 ) ;
2958: LD_INT 70
2960: PPUSH
2961: CALL_OW 67
// DialogueOn ;
2965: CALL_OW 6
// if tmp = JMM then
2969: LD_VAR 0 4
2973: PUSH
2974: LD_EXP 1
2978: EQUAL
2979: IFFALSE 3128
// begin ComTurnUnit ( JMM , Joan ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_EXP 15
2990: PPUSH
2991: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2995: LD_EXP 1
2999: PPUSH
3000: LD_STRING D5b-JMM-1
3002: PPUSH
3003: CALL_OW 88
// DialogueOff ;
3007: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3011: LD_EXP 15
3015: PPUSH
3016: LD_INT 500
3018: PPUSH
3019: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3023: LD_EXP 15
3027: PPUSH
3028: LD_EXP 1
3032: PPUSH
3033: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3037: LD_EXP 1
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 119
// wait ( 0 0$1 ) ;
3051: LD_INT 35
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3062: LD_EXP 15
3066: PPUSH
3067: LD_STRING D5b-Joan-1
3069: PPUSH
3070: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_STRING D5b-JMM-2
3081: PPUSH
3082: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3086: LD_EXP 15
3090: PPUSH
3091: LD_STRING D5b-Joan-2
3093: PPUSH
3094: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3098: LD_EXP 1
3102: PPUSH
3103: LD_STRING D5b-JMM-3
3105: PPUSH
3106: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3110: LD_EXP 15
3114: PPUSH
3115: LD_STRING D5b-Joan-3
3117: PPUSH
3118: CALL_OW 88
// DialogueOff ;
3122: CALL_OW 7
// end else
3126: GO 3463
// begin ComTurnUnit ( tmp , Joan ) ;
3128: LD_VAR 0 4
3132: PPUSH
3133: LD_EXP 15
3137: PPUSH
3138: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3142: LD_VAR 0 4
3146: PPUSH
3147: LD_STRING D5a-Sol1-1
3149: PPUSH
3150: CALL_OW 88
// DialogueOff ;
3154: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3158: LD_EXP 15
3162: PPUSH
3163: LD_INT 500
3165: PPUSH
3166: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3170: LD_EXP 15
3174: PPUSH
3175: LD_VAR 0 4
3179: PPUSH
3180: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3184: LD_VAR 0 4
3188: PPUSH
3189: LD_EXP 15
3193: PPUSH
3194: CALL_OW 119
// wait ( 0 0$1 ) ;
3198: LD_INT 35
3200: PPUSH
3201: CALL_OW 67
// DialogueOn ;
3205: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3209: LD_EXP 15
3213: PPUSH
3214: LD_STRING D5a-Joan-1
3216: PPUSH
3217: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_STRING D5a-Sol1-2
3228: PPUSH
3229: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3233: LD_EXP 15
3237: PPUSH
3238: LD_STRING D5a-Joan-2
3240: PPUSH
3241: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3245: LD_VAR 0 4
3249: PPUSH
3250: LD_STRING D5a-Sol1-3
3252: PPUSH
3253: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3257: LD_EXP 15
3261: PPUSH
3262: LD_STRING D5a-Joan-3
3264: PPUSH
3265: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3269: LD_VAR 0 4
3273: PPUSH
3274: LD_STRING D5a-Sol1-4
3276: PPUSH
3277: CALL_OW 88
// DialogueOff ;
3281: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3285: LD_EXP 1
3289: PPUSH
3290: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3294: LD_EXP 1
3298: PPUSH
3299: CALL_OW 122
// wait ( 0 0$1 ) ;
3303: LD_INT 35
3305: PPUSH
3306: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3310: LD_INT 35
3312: PPUSH
3313: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3317: LD_EXP 15
3321: PUSH
3322: LD_VAR 0 4
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PPUSH
3331: LD_EXP 1
3335: PPUSH
3336: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3340: LD_EXP 15
3344: PPUSH
3345: LD_EXP 1
3349: PPUSH
3350: CALL_OW 296
3354: PUSH
3355: LD_INT 5
3357: LESS
3358: IFFALSE 3310
// ComTurnUnit ( Joan , JMM ) ;
3360: LD_EXP 15
3364: PPUSH
3365: LD_EXP 1
3369: PPUSH
3370: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3374: LD_EXP 1
3378: PPUSH
3379: LD_EXP 15
3383: PPUSH
3384: CALL_OW 119
// wait ( 0 0$1 ) ;
3388: LD_INT 35
3390: PPUSH
3391: CALL_OW 67
// DialogueOn ;
3395: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3399: LD_EXP 15
3403: PPUSH
3404: LD_STRING D5a-Joan-4
3406: PPUSH
3407: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3411: LD_EXP 1
3415: PPUSH
3416: LD_STRING D5a-JMM-4
3418: PPUSH
3419: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3423: LD_EXP 15
3427: PPUSH
3428: LD_STRING D5a-Joan-5
3430: PPUSH
3431: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3435: LD_EXP 1
3439: PPUSH
3440: LD_STRING D5a-JMM-5
3442: PPUSH
3443: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3447: LD_EXP 15
3451: PPUSH
3452: LD_STRING D5a-Joan-6
3454: PPUSH
3455: CALL_OW 88
// DialogueOff ;
3459: CALL_OW 7
// end ; DialogueOn ;
3463: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_STRING D6-JMM-1
3474: PPUSH
3475: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3479: LD_EXP 15
3483: PPUSH
3484: LD_STRING D6-Joan-1
3486: PPUSH
3487: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3491: LD_EXP 1
3495: PPUSH
3496: LD_STRING D6-JMM-2
3498: PPUSH
3499: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3503: LD_EXP 15
3507: PPUSH
3508: LD_STRING D6-Joan-2
3510: PPUSH
3511: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3515: LD_EXP 1
3519: PPUSH
3520: LD_STRING D6-JMM-3
3522: PPUSH
3523: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3527: LD_EXP 15
3531: PPUSH
3532: LD_STRING D6-Joan-3
3534: PPUSH
3535: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3539: LD_EXP 1
3543: PPUSH
3544: LD_STRING D6-JMM-4
3546: PPUSH
3547: CALL_OW 88
// DialogueOff ;
3551: CALL_OW 7
// InGameOff ;
3555: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3559: LD_EXP 15
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3571: LD_STRING MJ
3573: PPUSH
3574: CALL_OW 337
// JoanStatus = 1 ;
3578: LD_ADDR_EXP 16
3582: PUSH
3583: LD_INT 1
3585: ST_TO_ADDR
// blockSpawn = 0 ;
3586: LD_ADDR_EXP 29
3590: PUSH
3591: LD_INT 0
3593: ST_TO_ADDR
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
// repeat wait ( 0 0$7 ) ;
3603: LD_INT 245
3605: PPUSH
3606: CALL_OW 67
// until blockSpawn = 0 ;
3610: LD_EXP 29
3614: PUSH
3615: LD_INT 0
3617: EQUAL
3618: IFFALSE 3603
// uc_side = 1 ;
3620: LD_ADDR_OWVAR 20
3624: PUSH
3625: LD_INT 1
3627: ST_TO_ADDR
// uc_nation = 1 ;
3628: LD_ADDR_OWVAR 21
3632: PUSH
3633: LD_INT 1
3635: ST_TO_ADDR
// InitHc ;
3636: CALL_OW 19
// if number = 1 then
3640: LD_VAR 0 1
3644: PUSH
3645: LD_INT 1
3647: EQUAL
3648: IFFALSE 3824
// begin hc_class := 1 ;
3650: LD_ADDR_OWVAR 28
3654: PUSH
3655: LD_INT 1
3657: ST_TO_ADDR
// hc_sex := sex_male ;
3658: LD_ADDR_OWVAR 27
3662: PUSH
3663: LD_INT 1
3665: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3666: LD_ADDR_OWVAR 33
3670: PUSH
3671: LD_STRING AmGalRemake
3673: ST_TO_ADDR
// hc_face_number := 7 ;
3674: LD_ADDR_OWVAR 34
3678: PUSH
3679: LD_INT 7
3681: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3682: LD_ADDR_OWVAR 26
3686: PUSH
3687: LD_STRING Bobby Jordan
3689: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3690: LD_ADDR_OWVAR 29
3694: PUSH
3695: LD_INT 9
3697: PUSH
3698: LD_INT 11
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3705: LD_ADDR_OWVAR 30
3709: PUSH
3710: LD_INT 1
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: LD_INT 0
3718: PUSH
3719: LD_INT 1
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: LIST
3727: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3728: LD_ADDR_OWVAR 31
3732: PUSH
3733: LD_INT 2
3735: PUSH
3736: LD_INT 1
3738: PUSH
3739: LD_INT 1
3741: PUSH
3742: LD_INT 1
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: ST_TO_ADDR
// un = CreateHuman ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: CALL_OW 44
3760: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 12
3768: PPUSH
3769: LD_INT 1
3771: PPUSH
3772: CALL_OW 49
// wait ( 0 0$1 ) ;
3776: LD_INT 35
3778: PPUSH
3779: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3783: LD_VAR 0 3
3787: PPUSH
3788: CALL_OW 87
// DialogueOn ;
3792: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_STRING D11b-Sol3-1
3803: PPUSH
3804: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3808: LD_EXP 1
3812: PPUSH
3813: LD_STRING D11b-JMM-1
3815: PPUSH
3816: CALL_OW 88
// DialogueOff ;
3820: CALL_OW 7
// end ; if number = 2 then
3824: LD_VAR 0 1
3828: PUSH
3829: LD_INT 2
3831: EQUAL
3832: IFFALSE 4008
// begin hc_class := 3 ;
3834: LD_ADDR_OWVAR 28
3838: PUSH
3839: LD_INT 3
3841: ST_TO_ADDR
// hc_sex := sex_male ;
3842: LD_ADDR_OWVAR 27
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3850: LD_ADDR_OWVAR 33
3854: PUSH
3855: LD_STRING SecondCharsGal
3857: ST_TO_ADDR
// hc_face_number := 55 ;
3858: LD_ADDR_OWVAR 34
3862: PUSH
3863: LD_INT 55
3865: ST_TO_ADDR
// hc_name := George McCarthy ;
3866: LD_ADDR_OWVAR 26
3870: PUSH
3871: LD_STRING George McCarthy
3873: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3874: LD_ADDR_OWVAR 29
3878: PUSH
3879: LD_INT 11
3881: PUSH
3882: LD_INT 10
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3889: LD_ADDR_OWVAR 30
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: LD_INT 0
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3912: LD_ADDR_OWVAR 31
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: LD_INT 2
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: ST_TO_ADDR
// un = CreateHuman ;
3935: LD_ADDR_VAR 0 3
3939: PUSH
3940: CALL_OW 44
3944: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3945: LD_VAR 0 3
3949: PPUSH
3950: LD_INT 12
3952: PPUSH
3953: LD_INT 1
3955: PPUSH
3956: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3960: LD_VAR 0 3
3964: PPUSH
3965: CALL_OW 87
// wait ( 0 0$1 ) ;
3969: LD_INT 35
3971: PPUSH
3972: CALL_OW 67
// DialogueOn ;
3976: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3980: LD_VAR 0 3
3984: PPUSH
3985: LD_STRING D11d-Sol4-1
3987: PPUSH
3988: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_STRING D11d-JMM-1
3999: PPUSH
4000: CALL_OW 88
// DialogueOff ;
4004: CALL_OW 7
// end ; if number = 4 then
4008: LD_VAR 0 1
4012: PUSH
4013: LD_INT 4
4015: EQUAL
4016: IFFALSE 4180
// begin hc_class := 3 ;
4018: LD_ADDR_OWVAR 28
4022: PUSH
4023: LD_INT 3
4025: ST_TO_ADDR
// hc_sex := sex_female ;
4026: LD_ADDR_OWVAR 27
4030: PUSH
4031: LD_INT 2
4033: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4034: LD_ADDR_OWVAR 33
4038: PUSH
4039: LD_STRING SecondCharsGal
4041: ST_TO_ADDR
// hc_face_number := 46 ;
4042: LD_ADDR_OWVAR 34
4046: PUSH
4047: LD_INT 46
4049: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4050: LD_ADDR_OWVAR 26
4054: PUSH
4055: LD_STRING Sylvia Creak
4057: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4058: LD_ADDR_OWVAR 29
4062: PUSH
4063: LD_INT 10
4065: PUSH
4066: LD_INT 9
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4073: LD_ADDR_OWVAR 30
4077: PUSH
4078: LD_INT 0
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: LD_INT 1
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4096: LD_ADDR_OWVAR 31
4100: PUSH
4101: LD_INT 1
4103: PUSH
4104: LD_INT 3
4106: PUSH
4107: LD_INT 1
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: ST_TO_ADDR
// un = CreateHuman ;
4119: LD_ADDR_VAR 0 3
4123: PUSH
4124: CALL_OW 44
4128: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4129: LD_VAR 0 3
4133: PPUSH
4134: LD_INT 12
4136: PPUSH
4137: LD_INT 1
4139: PPUSH
4140: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: CALL_OW 87
// wait ( 0 0$1 ) ;
4153: LD_INT 35
4155: PPUSH
4156: CALL_OW 67
// DialogueOn ;
4160: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4164: LD_VAR 0 3
4168: PPUSH
4169: LD_STRING D11e-FSol4-1
4171: PPUSH
4172: CALL_OW 88
// DialogueOff ;
4176: CALL_OW 7
// end ; if number = 5 then
4180: LD_VAR 0 1
4184: PUSH
4185: LD_INT 5
4187: EQUAL
4188: IFFALSE 4364
// begin hc_class := 1 ;
4190: LD_ADDR_OWVAR 28
4194: PUSH
4195: LD_INT 1
4197: ST_TO_ADDR
// hc_sex := sex_female ;
4198: LD_ADDR_OWVAR 27
4202: PUSH
4203: LD_INT 2
4205: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4206: LD_ADDR_OWVAR 33
4210: PUSH
4211: LD_STRING SecondCharsGal
4213: ST_TO_ADDR
// hc_face_number := 37 ;
4214: LD_ADDR_OWVAR 34
4218: PUSH
4219: LD_INT 37
4221: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4222: LD_ADDR_OWVAR 26
4226: PUSH
4227: LD_STRING Margherite Simpson
4229: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4230: LD_ADDR_OWVAR 29
4234: PUSH
4235: LD_INT 11
4237: PUSH
4238: LD_INT 10
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4245: LD_ADDR_OWVAR 30
4249: PUSH
4250: LD_INT 1
4252: PUSH
4253: LD_INT 1
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4268: LD_ADDR_OWVAR 31
4272: PUSH
4273: LD_INT 1
4275: PUSH
4276: LD_INT 1
4278: PUSH
4279: LD_INT 1
4281: PUSH
4282: LD_INT 1
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: ST_TO_ADDR
// un = CreateHuman ;
4291: LD_ADDR_VAR 0 3
4295: PUSH
4296: CALL_OW 44
4300: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4301: LD_VAR 0 3
4305: PPUSH
4306: LD_INT 12
4308: PPUSH
4309: LD_INT 1
4311: PPUSH
4312: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4316: LD_VAR 0 3
4320: PPUSH
4321: CALL_OW 87
// wait ( 0 0$1 ) ;
4325: LD_INT 35
4327: PPUSH
4328: CALL_OW 67
// DialogueOn ;
4332: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4336: LD_VAR 0 3
4340: PPUSH
4341: LD_STRING D11c-FSol3-1
4343: PPUSH
4344: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4348: LD_EXP 1
4352: PPUSH
4353: LD_STRING D11c-JMM-1
4355: PPUSH
4356: CALL_OW 88
// DialogueOff ;
4360: CALL_OW 7
// end ; if number = 6 then
4364: LD_VAR 0 1
4368: PUSH
4369: LD_INT 6
4371: EQUAL
4372: IFFALSE 4546
// begin hc_class := 1 ;
4374: LD_ADDR_OWVAR 28
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// hc_sex := sex_male ;
4382: LD_ADDR_OWVAR 27
4386: PUSH
4387: LD_INT 1
4389: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4390: LD_ADDR_OWVAR 33
4394: PUSH
4395: LD_STRING AmGalRemake
4397: ST_TO_ADDR
// hc_face_number := 1 ;
4398: LD_ADDR_OWVAR 34
4402: PUSH
4403: LD_INT 1
4405: ST_TO_ADDR
// hc_name := Charles Brown ;
4406: LD_ADDR_OWVAR 26
4410: PUSH
4411: LD_STRING Charles Brown
4413: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4414: LD_ADDR_OWVAR 29
4418: PUSH
4419: LD_INT 12
4421: PUSH
4422: LD_INT 11
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4429: LD_ADDR_OWVAR 30
4433: PUSH
4434: LD_INT 2
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4452: LD_ADDR_OWVAR 31
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: LD_INT 1
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: ST_TO_ADDR
// un = CreateHuman ;
4475: LD_ADDR_VAR 0 3
4479: PUSH
4480: CALL_OW 44
4484: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4485: LD_VAR 0 3
4489: PPUSH
4490: LD_INT 12
4492: PPUSH
4493: LD_INT 1
4495: PPUSH
4496: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4500: LD_VAR 0 3
4504: PPUSH
4505: CALL_OW 87
// wait ( 0 0$1 ) ;
4509: LD_INT 35
4511: PPUSH
4512: CALL_OW 67
// DialogueOn ;
4516: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_STRING D4-Sol1-5
4527: PPUSH
4528: CALL_OW 88
// DialogueOff ;
4532: CALL_OW 7
// tempCharles = un ;
4536: LD_ADDR_EXP 13
4540: PUSH
4541: LD_VAR 0 3
4545: ST_TO_ADDR
// end ; if number = 7 then
4546: LD_VAR 0 1
4550: PUSH
4551: LD_INT 7
4553: EQUAL
4554: IFFALSE 4718
// begin hc_class := 1 ;
4556: LD_ADDR_OWVAR 28
4560: PUSH
4561: LD_INT 1
4563: ST_TO_ADDR
// hc_sex := sex_female ;
4564: LD_ADDR_OWVAR 27
4568: PUSH
4569: LD_INT 2
4571: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4572: LD_ADDR_OWVAR 33
4576: PUSH
4577: LD_STRING AmGalRemake
4579: ST_TO_ADDR
// hc_face_number := 2 ;
4580: LD_ADDR_OWVAR 34
4584: PUSH
4585: LD_INT 2
4587: ST_TO_ADDR
// hc_name := Johanna Holland ;
4588: LD_ADDR_OWVAR 26
4592: PUSH
4593: LD_STRING Johanna Holland
4595: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4596: LD_ADDR_OWVAR 29
4600: PUSH
4601: LD_INT 10
4603: PUSH
4604: LD_INT 10
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4611: LD_ADDR_OWVAR 30
4615: PUSH
4616: LD_INT 1
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4634: LD_ADDR_OWVAR 31
4638: PUSH
4639: LD_INT 1
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: LD_INT 1
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
// un = CreateHuman ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: CALL_OW 44
4666: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4667: LD_VAR 0 3
4671: PPUSH
4672: LD_INT 12
4674: PPUSH
4675: LD_INT 1
4677: PPUSH
4678: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4682: LD_VAR 0 3
4686: PPUSH
4687: CALL_OW 87
// wait ( 0 0$1 ) ;
4691: LD_INT 35
4693: PPUSH
4694: CALL_OW 67
// DialogueOn ;
4698: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4702: LD_VAR 0 3
4706: PPUSH
4707: LD_STRING D11a-FSol2-1
4709: PPUSH
4710: CALL_OW 88
// DialogueOff ;
4714: CALL_OW 7
// end ; end ; end_of_file
4718: LD_VAR 0 2
4722: RET
// export function PrepareRussian ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4727: LD_INT 3
4729: PPUSH
4730: LD_INT 3
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_EXP 34
4740: PPUSH
4741: LD_EXP 35
4745: PPUSH
4746: CALL_OW 12
4750: PPUSH
4751: LD_INT 2
4753: PPUSH
4754: LD_INT 4
4756: PPUSH
4757: CALL 5370 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4761: LD_INT 3
4763: PPUSH
4764: LD_INT 3
4766: PPUSH
4767: LD_INT 8
4769: PPUSH
4770: LD_EXP 34
4774: PPUSH
4775: LD_EXP 35
4779: PPUSH
4780: CALL_OW 12
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: LD_INT 4
4790: PPUSH
4791: CALL 5370 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4795: LD_INT 3
4797: PPUSH
4798: LD_INT 3
4800: PPUSH
4801: LD_INT 67
4803: PPUSH
4804: LD_EXP 34
4808: PPUSH
4809: LD_EXP 35
4813: PPUSH
4814: CALL_OW 12
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: LD_INT 2
4824: PPUSH
4825: CALL 5370 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4829: LD_INT 3
4831: PPUSH
4832: LD_INT 3
4834: PPUSH
4835: LD_INT 21
4837: PPUSH
4838: LD_EXP 34
4842: PPUSH
4843: LD_EXP 35
4847: PPUSH
4848: CALL_OW 12
4852: PPUSH
4853: LD_INT 3
4855: PPUSH
4856: LD_INT 6
4858: PPUSH
4859: CALL 5370 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4863: LD_INT 3
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: LD_INT 17
4871: PPUSH
4872: LD_EXP 34
4876: PPUSH
4877: LD_EXP 35
4881: PPUSH
4882: CALL_OW 12
4886: PPUSH
4887: LD_INT 3
4889: PPUSH
4890: LD_INT 6
4892: PPUSH
4893: CALL 5370 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4897: LD_INT 3
4899: PPUSH
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 32
4905: PPUSH
4906: LD_EXP 34
4910: PPUSH
4911: LD_EXP 35
4915: PPUSH
4916: CALL_OW 12
4920: PPUSH
4921: LD_INT 4
4923: PPUSH
4924: LD_INT 2
4926: PPUSH
4927: CALL 5370 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4931: LD_ADDR_VAR 0 2
4935: PUSH
4936: LD_INT 22
4938: PUSH
4939: LD_INT 3
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 3
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 30
4958: PUSH
4959: LD_INT 32
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 69
4975: PUSH
4976: FOR_IN
4977: IFFALSE 5017
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4979: LD_INT 3
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: LD_EXP 34
4994: PPUSH
4995: LD_EXP 35
4999: PPUSH
5000: CALL_OW 12
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 1
5010: PPUSH
5011: CALL 5370 0 6
5015: GO 4976
5017: POP
5018: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 22
5026: PUSH
5027: LD_INT 3
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 30
5046: PUSH
5047: LD_INT 31
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 69
5063: PUSH
5064: FOR_IN
5065: IFFALSE 5093
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5067: LD_EXP 34
5071: PPUSH
5072: LD_EXP 35
5076: PPUSH
5077: CALL_OW 12
5081: PPUSH
5082: LD_VAR 0 2
5086: PPUSH
5087: CALL 5480 0 2
5091: GO 5064
5093: POP
5094: POP
// end ; end_of_file
5095: LD_VAR 0 1
5099: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5100: LD_INT 0
5102: PPUSH
5103: PPUSH
// if exist_mode then
5104: LD_VAR 0 2
5108: IFFALSE 5133
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5110: LD_ADDR_VAR 0 4
5114: PUSH
5115: LD_EXP 44
5119: PUSH
5120: LD_VAR 0 1
5124: STR
5125: PPUSH
5126: CALL_OW 34
5130: ST_TO_ADDR
// end else
5131: GO 5148
// begin unit := NewCharacter ( ident ) ;
5133: LD_ADDR_VAR 0 4
5137: PUSH
5138: LD_VAR 0 1
5142: PPUSH
5143: CALL_OW 25
5147: ST_TO_ADDR
// end ; result := unit ;
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_VAR 0 4
5157: ST_TO_ADDR
// end ;
5158: LD_VAR 0 3
5162: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5163: LD_INT 0
5165: PPUSH
5166: PPUSH
5167: PPUSH
// rnd = rand ( 1 , characters ) ;
5168: LD_ADDR_VAR 0 6
5172: PUSH
5173: LD_INT 1
5175: PPUSH
5176: LD_VAR 0 1
5180: PPUSH
5181: CALL_OW 12
5185: ST_TO_ADDR
// for i = 1 to characters do
5186: LD_ADDR_VAR 0 5
5190: PUSH
5191: DOUBLE
5192: LD_INT 1
5194: DEC
5195: ST_TO_ADDR
5196: LD_VAR 0 1
5200: PUSH
5201: FOR_TO
5202: IFFALSE 5312
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5204: LD_VAR 0 5
5208: PUSH
5209: LD_VAR 0 6
5213: EQUAL
5214: PUSH
5215: LD_VAR 0 1
5219: PUSH
5220: LD_VAR 0 5
5224: ARRAY
5225: PPUSH
5226: CALL_OW 258
5230: PUSH
5231: LD_INT 1
5233: EQUAL
5234: AND
5235: IFFALSE 5257
// Say ( characters [ i ] , dialogMID ) ;
5237: LD_VAR 0 1
5241: PUSH
5242: LD_VAR 0 5
5246: ARRAY
5247: PPUSH
5248: LD_VAR 0 2
5252: PPUSH
5253: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5257: LD_VAR 0 5
5261: PUSH
5262: LD_VAR 0 6
5266: EQUAL
5267: PUSH
5268: LD_VAR 0 1
5272: PUSH
5273: LD_VAR 0 5
5277: ARRAY
5278: PPUSH
5279: CALL_OW 258
5283: PUSH
5284: LD_INT 2
5286: EQUAL
5287: AND
5288: IFFALSE 5310
// Say ( characters [ i ] , dialogFID ) ;
5290: LD_VAR 0 1
5294: PUSH
5295: LD_VAR 0 5
5299: ARRAY
5300: PPUSH
5301: LD_VAR 0 3
5305: PPUSH
5306: CALL_OW 88
// end ;
5310: GO 5201
5312: POP
5313: POP
// end ;
5314: LD_VAR 0 4
5318: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5319: LD_INT 0
5321: PPUSH
5322: PPUSH
// for i in charactersList do
5323: LD_ADDR_VAR 0 4
5327: PUSH
5328: LD_VAR 0 1
5332: PUSH
5333: FOR_IN
5334: IFFALSE 5363
// begin if IsOk ( i ) then
5336: LD_VAR 0 4
5340: PPUSH
5341: CALL_OW 302
5345: IFFALSE 5361
// SaveCharacters ( i , ident ) ;
5347: LD_VAR 0 4
5351: PPUSH
5352: LD_VAR 0 2
5356: PPUSH
5357: CALL_OW 38
// end ;
5361: GO 5333
5363: POP
5364: POP
// end ;
5365: LD_VAR 0 3
5369: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5370: LD_INT 0
5372: PPUSH
5373: PPUSH
5374: PPUSH
5375: PPUSH
// for i = 1 to count do
5376: LD_ADDR_VAR 0 8
5380: PUSH
5381: DOUBLE
5382: LD_INT 1
5384: DEC
5385: ST_TO_ADDR
5386: LD_VAR 0 6
5390: PUSH
5391: FOR_TO
5392: IFFALSE 5473
// begin uc_side = side ;
5394: LD_ADDR_OWVAR 20
5398: PUSH
5399: LD_VAR 0 1
5403: ST_TO_ADDR
// uc_nation = nation ;
5404: LD_ADDR_OWVAR 21
5408: PUSH
5409: LD_VAR 0 2
5413: ST_TO_ADDR
// hc_gallery =  ;
5414: LD_ADDR_OWVAR 33
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// hc_name =  ;
5422: LD_ADDR_OWVAR 26
5426: PUSH
5427: LD_STRING 
5429: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5430: LD_INT 0
5432: PPUSH
5433: LD_VAR 0 5
5437: PPUSH
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 380
// un = CreateHuman ;
5447: LD_ADDR_VAR 0 10
5451: PUSH
5452: CALL_OW 44
5456: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5457: LD_VAR 0 10
5461: PPUSH
5462: LD_VAR 0 3
5466: PPUSH
5467: CALL_OW 52
// end ;
5471: GO 5391
5473: POP
5474: POP
// end ;
5475: LD_VAR 0 7
5479: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5480: LD_INT 0
5482: PPUSH
5483: PPUSH
5484: PPUSH
// uc_side := GetSide ( b ) ;
5485: LD_ADDR_OWVAR 20
5489: PUSH
5490: LD_VAR 0 2
5494: PPUSH
5495: CALL_OW 255
5499: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5500: LD_ADDR_OWVAR 21
5504: PUSH
5505: LD_VAR 0 2
5509: PPUSH
5510: CALL_OW 248
5514: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5515: LD_INT 0
5517: PPUSH
5518: LD_INT 1
5520: PPUSH
5521: LD_VAR 0 1
5525: PPUSH
5526: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5530: LD_ADDR_VAR 0 5
5534: PUSH
5535: LD_VAR 0 2
5539: PPUSH
5540: CALL_OW 254
5544: PUSH
5545: LD_INT 3
5547: MINUS
5548: ST_TO_ADDR
// if dir < 0 then
5549: LD_VAR 0 5
5553: PUSH
5554: LD_INT 0
5556: LESS
5557: IFFALSE 5573
// dir := 6 + dir ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_INT 6
5566: PUSH
5567: LD_VAR 0 5
5571: PLUS
5572: ST_TO_ADDR
// un := CreateHuman ;
5573: LD_ADDR_VAR 0 4
5577: PUSH
5578: CALL_OW 44
5582: ST_TO_ADDR
// SetDir ( un , dir ) ;
5583: LD_VAR 0 4
5587: PPUSH
5588: LD_VAR 0 5
5592: PPUSH
5593: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5597: LD_VAR 0 4
5601: PPUSH
5602: LD_VAR 0 2
5606: PPUSH
5607: CALL_OW 52
// end ;
5611: LD_VAR 0 3
5615: RET
// export function PrepareDifficulty ; begin
5616: LD_INT 0
5618: PPUSH
// if Difficulty = 1 then
5619: LD_OWVAR 67
5623: PUSH
5624: LD_INT 1
5626: EQUAL
5627: IFFALSE 5645
// begin RuSolMinLevel = 3 ;
5629: LD_ADDR_EXP 34
5633: PUSH
5634: LD_INT 3
5636: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5637: LD_ADDR_EXP 35
5641: PUSH
5642: LD_INT 6
5644: ST_TO_ADDR
// end ; if Difficulty = 2 then
5645: LD_OWVAR 67
5649: PUSH
5650: LD_INT 2
5652: EQUAL
5653: IFFALSE 5671
// begin RuSolMinLevel = 5 ;
5655: LD_ADDR_EXP 34
5659: PUSH
5660: LD_INT 5
5662: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5663: LD_ADDR_EXP 35
5667: PUSH
5668: LD_INT 6
5670: ST_TO_ADDR
// end ; if Difficulty = 3 then
5671: LD_OWVAR 67
5675: PUSH
5676: LD_INT 3
5678: EQUAL
5679: IFFALSE 5697
// begin RuSolMinLevel = 5 ;
5681: LD_ADDR_EXP 34
5685: PUSH
5686: LD_INT 5
5688: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5689: LD_ADDR_EXP 35
5693: PUSH
5694: LD_INT 7
5696: ST_TO_ADDR
// end ; end ;
5697: LD_VAR 0 1
5701: RET
// export function ShowQuery1 ; begin
5702: LD_INT 0
5704: PPUSH
// case query ( QKill ) of 1 :
5705: LD_STRING QKill
5707: PPUSH
5708: CALL_OW 97
5712: PUSH
5713: LD_INT 1
5715: DOUBLE
5716: EQUAL
5717: IFTRUE 5721
5719: GO 5732
5721: POP
// begin result = 1 ;
5722: LD_ADDR_VAR 0 1
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// end ; 2 :
5730: GO 5771
5732: LD_INT 2
5734: DOUBLE
5735: EQUAL
5736: IFTRUE 5740
5738: GO 5751
5740: POP
// begin result = 2 ;
5741: LD_ADDR_VAR 0 1
5745: PUSH
5746: LD_INT 2
5748: ST_TO_ADDR
// end ; 3 :
5749: GO 5771
5751: LD_INT 3
5753: DOUBLE
5754: EQUAL
5755: IFTRUE 5759
5757: GO 5770
5759: POP
// begin result = 3 ;
5760: LD_ADDR_VAR 0 1
5764: PUSH
5765: LD_INT 3
5767: ST_TO_ADDR
// end ; end ;
5768: GO 5771
5770: POP
// end ;
5771: LD_VAR 0 1
5775: RET
// export function ShowQuery2 ; begin
5776: LD_INT 0
5778: PPUSH
// case query ( QKill2 ) of 1 :
5779: LD_STRING QKill2
5781: PPUSH
5782: CALL_OW 97
5786: PUSH
5787: LD_INT 1
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5795
5793: GO 5806
5795: POP
// begin result = 1 ;
5796: LD_ADDR_VAR 0 1
5800: PUSH
5801: LD_INT 1
5803: ST_TO_ADDR
// end ; 2 :
5804: GO 5826
5806: LD_INT 2
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 2 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 2
5822: ST_TO_ADDR
// end ; end ;
5823: GO 5826
5825: POP
// end ;
5826: LD_VAR 0 1
5830: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5831: LD_INT 0
5833: PPUSH
5834: PPUSH
5835: PPUSH
5836: PPUSH
// for i = 1 to 72 do
5837: LD_ADDR_VAR 0 5
5841: PUSH
5842: DOUBLE
5843: LD_INT 1
5845: DEC
5846: ST_TO_ADDR
5847: LD_INT 72
5849: PUSH
5850: FOR_TO
5851: IFFALSE 5909
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5853: LD_VAR 0 5
5857: PPUSH
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 321
5867: PUSH
5868: LD_INT 1
5870: EQUAL
5871: PUSH
5872: LD_VAR 0 5
5876: PPUSH
5877: LD_VAR 0 3
5881: PPUSH
5882: CALL_OW 482
5886: PUSH
5887: LD_INT 1
5889: EQUAL
5890: AND
5891: IFFALSE 5907
// AddComResearch ( lab , i ) ;
5893: LD_VAR 0 2
5897: PPUSH
5898: LD_VAR 0 5
5902: PPUSH
5903: CALL_OW 184
5907: GO 5850
5909: POP
5910: POP
// end ;
5911: LD_VAR 0 4
5915: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5916: LD_INT 0
5918: PPUSH
5919: PPUSH
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5924: LD_ADDR_VAR 0 7
5928: PUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: CALL_OW 313
5938: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5939: LD_ADDR_VAR 0 8
5943: PUSH
5944: LD_VAR 0 3
5948: PPUSH
5949: LD_INT 22
5951: PUSH
5952: LD_VAR 0 1
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: LD_INT 25
5963: PUSH
5964: LD_INT 2
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 24
5973: PUSH
5974: LD_INT 1000
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 70
5990: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5991: LD_ADDR_VAR 0 5
5995: PUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_VAR 0 1
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: PUSH
6013: LD_INT 21
6015: PUSH
6016: LD_INT 3
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: LD_INT 24
6028: PUSH
6029: LD_INT 1000
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: PPUSH
6048: CALL_OW 70
6052: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
6053: LD_VAR 0 5
6057: NOT
6058: PUSH
6059: LD_VAR 0 8
6063: NOT
6064: AND
6065: IFFALSE 6069
// exit ;
6067: GO 6228
// if buildings_list > 0 and engineerOkInside > 0 then
6069: LD_VAR 0 5
6073: PUSH
6074: LD_INT 0
6076: GREATER
6077: PUSH
6078: LD_VAR 0 7
6082: PUSH
6083: LD_INT 0
6085: GREATER
6086: AND
6087: IFFALSE 6115
// for i in engineerOkInside do
6089: LD_ADDR_VAR 0 6
6093: PUSH
6094: LD_VAR 0 7
6098: PUSH
6099: FOR_IN
6100: IFFALSE 6113
// ComExitBuilding ( i ) ;
6102: LD_VAR 0 6
6106: PPUSH
6107: CALL_OW 122
6111: GO 6099
6113: POP
6114: POP
// if engineerOkOutside > 0 then
6115: LD_VAR 0 8
6119: PUSH
6120: LD_INT 0
6122: GREATER
6123: IFFALSE 6177
// begin for i in engineerOkOutside do
6125: LD_ADDR_VAR 0 6
6129: PUSH
6130: LD_VAR 0 8
6134: PUSH
6135: FOR_IN
6136: IFFALSE 6175
// for j in buildings_list do
6138: LD_ADDR_VAR 0 9
6142: PUSH
6143: LD_VAR 0 5
6147: PUSH
6148: FOR_IN
6149: IFFALSE 6171
// ComRepairBuilding ( i , j [ 1 ] ) ;
6151: LD_VAR 0 6
6155: PPUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: CALL_OW 130
6169: GO 6148
6171: POP
6172: POP
6173: GO 6135
6175: POP
6176: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
6177: LD_VAR 0 5
6181: PUSH
6182: LD_INT 0
6184: EQUAL
6185: PUSH
6186: LD_VAR 0 8
6190: PUSH
6191: LD_INT 0
6193: GREATER
6194: AND
6195: IFFALSE 6228
// for i in engineerOkOutside do
6197: LD_ADDR_VAR 0 6
6201: PUSH
6202: LD_VAR 0 8
6206: PUSH
6207: FOR_IN
6208: IFFALSE 6226
// ComEnterUnit ( i , building ) ;
6210: LD_VAR 0 6
6214: PPUSH
6215: LD_VAR 0 2
6219: PPUSH
6220: CALL_OW 120
6224: GO 6207
6226: POP
6227: POP
// end ;
6228: LD_VAR 0 4
6232: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
6233: LD_INT 0
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
6241: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
6242: LD_ADDR_VAR 0 6
6246: PUSH
6247: LD_INT 22
6249: PUSH
6250: LD_VAR 0 1
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 24
6271: PUSH
6272: LD_INT 251
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: PPUSH
6284: CALL_OW 69
6288: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6289: LD_ADDR_VAR 0 7
6293: PUSH
6294: LD_VAR 0 3
6298: PPUSH
6299: LD_INT 22
6301: PUSH
6302: LD_VAR 0 1
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 4
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: LD_INT 50
6323: PUSH
6324: EMPTY
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 70
6336: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6337: LD_ADDR_VAR 0 10
6341: PUSH
6342: LD_VAR 0 3
6346: PPUSH
6347: LD_INT 22
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 1
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 3
6371: PUSH
6372: LD_INT 25
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 3
6388: PUSH
6389: LD_INT 24
6391: PUSH
6392: LD_INT 750
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL_OW 70
6413: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6414: LD_ADDR_VAR 0 11
6418: PUSH
6419: LD_VAR 0 2
6423: PPUSH
6424: LD_INT 22
6426: PUSH
6427: LD_VAR 0 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 21
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: LD_INT 25
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 3
6465: PUSH
6466: LD_INT 24
6468: PUSH
6469: LD_INT 1000
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
6491: LD_VAR 0 10
6495: NOT
6496: PUSH
6497: LD_VAR 0 7
6501: NOT
6502: AND
6503: PUSH
6504: LD_VAR 0 11
6508: NOT
6509: AND
6510: IFFALSE 6514
// exit ;
6512: GO 6703
// if damageUnits > 0 and sci_list > 0 then
6514: LD_VAR 0 10
6518: PUSH
6519: LD_INT 0
6521: GREATER
6522: PUSH
6523: LD_VAR 0 6
6527: PUSH
6528: LD_INT 0
6530: GREATER
6531: AND
6532: IFFALSE 6565
// for i in damageUnits do
6534: LD_ADDR_VAR 0 8
6538: PUSH
6539: LD_VAR 0 10
6543: PUSH
6544: FOR_IN
6545: IFFALSE 6563
// ComMoveToArea ( i , healArea ) ;
6547: LD_VAR 0 8
6551: PPUSH
6552: LD_VAR 0 2
6556: PPUSH
6557: CALL_OW 113
6561: GO 6544
6563: POP
6564: POP
// if unitsToHeal > 0 and sci_list > 0 then
6565: LD_VAR 0 11
6569: PUSH
6570: LD_INT 0
6572: GREATER
6573: PUSH
6574: LD_VAR 0 6
6578: PUSH
6579: LD_INT 0
6581: GREATER
6582: AND
6583: IFFALSE 6642
// begin for i in sci_list do
6585: LD_ADDR_VAR 0 8
6589: PUSH
6590: LD_VAR 0 6
6594: PUSH
6595: FOR_IN
6596: IFFALSE 6640
// begin ComExitBuilding ( i ) ;
6598: LD_VAR 0 8
6602: PPUSH
6603: CALL_OW 122
// for j in unitsToHeal do
6607: LD_ADDR_VAR 0 9
6611: PUSH
6612: LD_VAR 0 11
6616: PUSH
6617: FOR_IN
6618: IFFALSE 6636
// AddComHeal ( i , j ) ;
6620: LD_VAR 0 8
6624: PPUSH
6625: LD_VAR 0 9
6629: PPUSH
6630: CALL_OW 188
6634: GO 6617
6636: POP
6637: POP
// end ;
6638: GO 6595
6640: POP
6641: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6642: LD_VAR 0 10
6646: PUSH
6647: LD_INT 0
6649: EQUAL
6650: PUSH
6651: LD_VAR 0 11
6655: PUSH
6656: LD_INT 0
6658: EQUAL
6659: AND
6660: PUSH
6661: LD_VAR 0 7
6665: PUSH
6666: LD_INT 0
6668: GREATER
6669: AND
6670: IFFALSE 6703
// for i in sci_listOutside do
6672: LD_ADDR_VAR 0 8
6676: PUSH
6677: LD_VAR 0 7
6681: PUSH
6682: FOR_IN
6683: IFFALSE 6701
// ComEnterUnit ( i , build ) ;
6685: LD_VAR 0 8
6689: PPUSH
6690: LD_VAR 0 4
6694: PPUSH
6695: CALL_OW 120
6699: GO 6682
6701: POP
6702: POP
// end ;
6703: LD_VAR 0 5
6707: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
6712: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6713: LD_INT 22
6715: PUSH
6716: LD_VAR 0 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 21
6727: PUSH
6728: LD_INT 2
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PPUSH
6739: CALL_OW 69
6743: PUSH
6744: LD_VAR 0 3
6748: LESSEQUAL
6749: IFFALSE 6857
// begin for i = 1 to vehCount do
6751: LD_ADDR_VAR 0 9
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_VAR 0 3
6765: PUSH
6766: FOR_TO
6767: IFFALSE 6855
// begin weapon = weaponTab [ i ] ;
6769: LD_ADDR_VAR 0 10
6773: PUSH
6774: LD_VAR 0 4
6778: PUSH
6779: LD_VAR 0 9
6783: ARRAY
6784: ST_TO_ADDR
// if weapon = 46 then
6785: LD_VAR 0 10
6789: PUSH
6790: LD_INT 46
6792: EQUAL
6793: IFFALSE 6824
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6795: LD_VAR 0 2
6799: PPUSH
6800: LD_INT 24
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: LD_VAR 0 6
6812: PPUSH
6813: LD_VAR 0 10
6817: PPUSH
6818: CALL_OW 185
// end else
6822: GO 6853
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_VAR 0 7
6833: PPUSH
6834: LD_VAR 0 5
6838: PPUSH
6839: LD_VAR 0 6
6843: PPUSH
6844: LD_VAR 0 10
6848: PPUSH
6849: CALL_OW 185
// end ; end ;
6853: GO 6766
6855: POP
6856: POP
// end ; end ;
6857: LD_VAR 0 8
6861: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
6866: PPUSH
6867: PPUSH
6868: PPUSH
// for i := 1 to russianTanks do
6869: LD_ADDR_VAR 0 4
6873: PUSH
6874: DOUBLE
6875: LD_INT 1
6877: DEC
6878: ST_TO_ADDR
6879: LD_EXP 36
6883: PUSH
6884: FOR_TO
6885: IFFALSE 7367
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6887: LD_VAR 0 4
6891: PUSH
6892: LD_INT 5
6894: PUSH
6895: LD_INT 6
6897: PUSH
6898: LD_INT 6
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: PUSH
6906: LD_OWVAR 67
6910: ARRAY
6911: EQUAL
6912: IFFALSE 7365
// begin repeat wait ( 0 0$1 ) ;
6914: LD_INT 35
6916: PPUSH
6917: CALL_OW 67
// for i in russianTanks do
6921: LD_ADDR_VAR 0 4
6925: PUSH
6926: LD_EXP 36
6930: PUSH
6931: FOR_IN
6932: IFFALSE 7353
// begin if GetLives ( i ) < 659 then
6934: LD_VAR 0 4
6938: PPUSH
6939: CALL_OW 256
6943: PUSH
6944: LD_INT 659
6946: LESS
6947: IFFALSE 7035
// begin tmp = i ;
6949: LD_ADDR_VAR 0 5
6953: PUSH
6954: LD_VAR 0 4
6958: ST_TO_ADDR
// for i := 1 to russianTanks do
6959: LD_ADDR_VAR 0 4
6963: PUSH
6964: DOUBLE
6965: LD_INT 1
6967: DEC
6968: ST_TO_ADDR
6969: LD_EXP 36
6973: PUSH
6974: FOR_TO
6975: IFFALSE 7033
// begin if tmp = russianTanks [ i ] then
6977: LD_VAR 0 5
6981: PUSH
6982: LD_EXP 36
6986: PUSH
6987: LD_VAR 0 4
6991: ARRAY
6992: EQUAL
6993: IFFALSE 7031
// begin russianTanks = Delete ( russianTanks , i ) ;
6995: LD_ADDR_EXP 36
6999: PUSH
7000: LD_EXP 36
7004: PPUSH
7005: LD_VAR 0 4
7009: PPUSH
7010: CALL_OW 3
7014: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
7015: LD_ADDR_EXP 37
7019: PUSH
7020: LD_EXP 37
7024: PUSH
7025: LD_VAR 0 5
7029: ADD
7030: ST_TO_ADDR
// end ; end ;
7031: GO 6974
7033: POP
7034: POP
// end ; wait ( 0 0$1 ) ;
7035: LD_INT 35
7037: PPUSH
7038: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
7042: LD_INT 23
7044: PPUSH
7045: LD_INT 22
7047: PUSH
7048: LD_INT 1
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 70
7059: PUSH
7060: LD_INT 2
7062: GREATER
7063: IFFALSE 7173
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7065: LD_ADDR_VAR 0 6
7069: PUSH
7070: LD_INT 22
7072: PUSH
7073: LD_VAR 0 2
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL_OW 69
7086: PPUSH
7087: LD_VAR 0 4
7091: PPUSH
7092: CALL_OW 74
7096: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7097: LD_ADDR_VAR 0 7
7101: PUSH
7102: LD_INT 22
7104: PUSH
7105: LD_VAR 0 2
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 2
7116: PUSH
7117: LD_INT 59
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: LD_INT 21
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 21
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: PPUSH
7156: CALL_OW 69
7160: PPUSH
7161: LD_VAR 0 4
7165: PPUSH
7166: CALL_OW 74
7170: ST_TO_ADDR
// end else
7171: GO 7285
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
7173: LD_ADDR_VAR 0 6
7177: PUSH
7178: LD_INT 23
7180: PPUSH
7181: LD_INT 22
7183: PUSH
7184: LD_VAR 0 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 71
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: CALL_OW 74
7207: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7208: LD_ADDR_VAR 0 7
7212: PUSH
7213: LD_INT 23
7215: PPUSH
7216: LD_INT 22
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: LD_INT 59
7233: PUSH
7234: EMPTY
7235: LIST
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 21
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: PPUSH
7270: CALL_OW 71
7274: PPUSH
7275: LD_VAR 0 4
7279: PPUSH
7280: CALL_OW 74
7284: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7285: LD_VAR 0 4
7289: PPUSH
7290: LD_VAR 0 6
7294: PPUSH
7295: CALL_OW 296
7299: PUSH
7300: LD_INT 8
7302: PLUS
7303: PUSH
7304: LD_VAR 0 4
7308: PPUSH
7309: LD_VAR 0 7
7313: PPUSH
7314: CALL_OW 296
7318: LESS
7319: IFFALSE 7337
// begin ComAttackUnit ( i , target1 ) ;
7321: LD_VAR 0 4
7325: PPUSH
7326: LD_VAR 0 6
7330: PPUSH
7331: CALL_OW 115
// end else
7335: GO 7351
// begin ComAttackUnit ( i , target2 ) ;
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_VAR 0 7
7346: PPUSH
7347: CALL_OW 115
// end ; end ;
7351: GO 6931
7353: POP
7354: POP
// until russianTanks = 0 ;
7355: LD_EXP 36
7359: PUSH
7360: LD_INT 0
7362: EQUAL
7363: IFFALSE 6914
// end ; end ;
7365: GO 6884
7367: POP
7368: POP
// end ;
7369: LD_VAR 0 3
7373: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7385: LD_ADDR_VAR 0 8
7389: PUSH
7390: LD_INT 22
7392: PUSH
7393: LD_VAR 0 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 2
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 24
7414: PUSH
7415: LD_INT 660
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 3
7424: PUSH
7425: LD_INT 58
7427: PUSH
7428: EMPTY
7429: LIST
7430: PUSH
7431: LD_INT 2
7433: PUSH
7434: LD_INT 34
7436: PUSH
7437: LD_INT 43
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 34
7446: PUSH
7447: LD_INT 44
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 34
7456: PUSH
7457: LD_INT 46
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PPUSH
7481: CALL_OW 69
7485: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7486: LD_ADDR_VAR 0 9
7490: PUSH
7491: LD_INT 22
7493: PUSH
7494: LD_VAR 0 1
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 21
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 24
7518: PUSH
7519: LD_INT 660
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: PPUSH
7535: CALL_OW 69
7539: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7540: LD_ADDR_VAR 0 10
7544: PUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 21
7564: PUSH
7565: LD_INT 2
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: LD_INT 24
7577: PUSH
7578: LD_INT 1000
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 70
7598: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7599: LD_ADDR_VAR 0 11
7603: PUSH
7604: LD_VAR 0 2
7608: PPUSH
7609: LD_INT 22
7611: PUSH
7612: LD_VAR 0 1
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 21
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1000
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 58
7643: PUSH
7644: EMPTY
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 70
7657: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7658: LD_ADDR_VAR 0 12
7662: PUSH
7663: EMPTY
7664: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7665: LD_ADDR_VAR 0 13
7669: PUSH
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_INT 22
7677: PUSH
7678: LD_VAR 0 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 3
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 70
7705: ST_TO_ADDR
// if damageVehicle_list = 0 and vehicleOK_list = 0 then
7706: LD_VAR 0 9
7710: PUSH
7711: LD_INT 0
7713: EQUAL
7714: PUSH
7715: LD_VAR 0 8
7719: PUSH
7720: LD_INT 0
7722: EQUAL
7723: AND
7724: IFFALSE 7728
// exit ;
7726: GO 8132
// if damageVehicle_list > 0 then
7728: LD_VAR 0 9
7732: PUSH
7733: LD_INT 0
7735: GREATER
7736: IFFALSE 7774
// for i in damageVehicle_list do
7738: LD_ADDR_VAR 0 6
7742: PUSH
7743: LD_VAR 0 9
7747: PUSH
7748: FOR_IN
7749: IFFALSE 7772
// ComMoveXY ( i , repX , repY ) ;
7751: LD_VAR 0 6
7755: PPUSH
7756: LD_VAR 0 3
7760: PPUSH
7761: LD_VAR 0 4
7765: PPUSH
7766: CALL_OW 111
7770: GO 7748
7772: POP
7773: POP
// if vehicleNeedRepair_list > 0 then
7774: LD_VAR 0 10
7778: PUSH
7779: LD_INT 0
7781: GREATER
7782: IFFALSE 7883
// begin for i in vehicleNeedRepair_list do
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: LD_VAR 0 10
7793: PUSH
7794: FOR_IN
7795: IFFALSE 7881
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7797: LD_ADDR_VAR 0 12
7801: PUSH
7802: LD_VAR 0 12
7806: PUSH
7807: LD_VAR 0 6
7811: PPUSH
7812: CALL_OW 313
7816: ADD
7817: ST_TO_ADDR
// for j in mechanicInside_list do
7818: LD_ADDR_VAR 0 7
7822: PUSH
7823: LD_VAR 0 12
7827: PUSH
7828: FOR_IN
7829: IFFALSE 7877
// begin ComExitVehicle ( j ) ;
7831: LD_VAR 0 7
7835: PPUSH
7836: CALL_OW 121
// wait ( 0 0$1 ) ;
7840: LD_INT 35
7842: PPUSH
7843: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7847: LD_VAR 0 7
7851: PPUSH
7852: LD_VAR 0 6
7856: PPUSH
7857: CALL_OW 189
// AddComEnterUnit ( j , i ) ;
7861: LD_VAR 0 7
7865: PPUSH
7866: LD_VAR 0 6
7870: PPUSH
7871: CALL_OW 180
// end ;
7875: GO 7828
7877: POP
7878: POP
// end ;
7879: GO 7794
7881: POP
7882: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7883: LD_VAR 0 11
7887: PUSH
7888: LD_INT 0
7890: GREATER
7891: IFFALSE 7915
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7893: LD_VAR 0 13
7897: PUSH
7898: LD_INT 1
7900: ARRAY
7901: PPUSH
7902: LD_VAR 0 11
7906: PUSH
7907: LD_INT 1
7909: ARRAY
7910: PPUSH
7911: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7915: LD_VAR 0 8
7919: PUSH
7920: LD_INT 0
7922: GREATER
7923: PUSH
7924: LD_EXP 37
7928: PUSH
7929: LD_INT 0
7931: GREATER
7932: AND
7933: IFFALSE 8064
// begin for i := 1 to vehicleOK_list do
7935: LD_ADDR_VAR 0 6
7939: PUSH
7940: DOUBLE
7941: LD_INT 1
7943: DEC
7944: ST_TO_ADDR
7945: LD_VAR 0 8
7949: PUSH
7950: FOR_TO
7951: IFFALSE 8062
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7953: LD_VAR 0 6
7957: PUSH
7958: LD_INT 5
7960: PUSH
7961: LD_INT 6
7963: PUSH
7964: LD_INT 6
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_OWVAR 67
7976: ARRAY
7977: EQUAL
7978: IFFALSE 8060
// begin for i in vehicleOk_list do
7980: LD_ADDR_VAR 0 6
7984: PUSH
7985: LD_VAR 0 8
7989: PUSH
7990: FOR_IN
7991: IFFALSE 8023
// begin russianTanks = russianTanks ^ i ;
7993: LD_ADDR_EXP 36
7997: PUSH
7998: LD_EXP 36
8002: PUSH
8003: LD_VAR 0 6
8007: ADD
8008: ST_TO_ADDR
// SetFuel ( i , 100 ) ;
8009: LD_VAR 0 6
8013: PPUSH
8014: LD_INT 100
8016: PPUSH
8017: CALL_OW 240
// end ;
8021: GO 7990
8023: POP
8024: POP
// for i in russianDamageTanks do
8025: LD_ADDR_VAR 0 6
8029: PUSH
8030: LD_EXP 37
8034: PUSH
8035: FOR_IN
8036: IFFALSE 8056
// russianDamageTanks = russianDamageTanks diff i ;
8038: LD_ADDR_EXP 37
8042: PUSH
8043: LD_EXP 37
8047: PUSH
8048: LD_VAR 0 6
8052: DIFF
8053: ST_TO_ADDR
8054: GO 8035
8056: POP
8057: POP
// break ;
8058: GO 8062
// end ; end ;
8060: GO 7950
8062: POP
8063: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8064: LD_ADDR_VAR 0 6
8068: PUSH
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 22
8076: PUSH
8077: LD_VAR 0 1
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 25
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PPUSH
8100: CALL_OW 70
8104: NOT
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8130
// ComMoveXY ( i , repX , repY ) ;
8109: LD_VAR 0 6
8113: PPUSH
8114: LD_VAR 0 3
8118: PPUSH
8119: LD_VAR 0 4
8123: PPUSH
8124: CALL_OW 111
8128: GO 8106
8130: POP
8131: POP
// end ;
8132: LD_VAR 0 5
8136: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8137: LD_INT 0
8139: PPUSH
8140: PPUSH
8141: PPUSH
8142: PPUSH
// enable ;
8143: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: CALL_OW 435
8158: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8159: LD_ADDR_VAR 0 6
8163: PUSH
8164: LD_INT 22
8166: PUSH
8167: LD_VAR 0 1
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 34
8178: PUSH
8179: LD_VAR 0 2
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PPUSH
8192: CALL_OW 69
8196: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8197: LD_VAR 0 6
8201: PUSH
8202: LD_INT 0
8204: GREATER
8205: PUSH
8206: LD_VAR 0 3
8210: PPUSH
8211: CALL_OW 435
8215: AND
8216: PUSH
8217: LD_VAR 0 7
8221: PUSH
8222: LD_INT 0
8224: GREATER
8225: AND
8226: IFFALSE 8275
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8228: LD_VAR 0 6
8232: PUSH
8233: LD_INT 1
8235: ARRAY
8236: PPUSH
8237: LD_VAR 0 7
8241: PUSH
8242: LD_INT 1
8244: ARRAY
8245: PPUSH
8246: LD_VAR 0 7
8250: PUSH
8251: LD_INT 2
8253: ARRAY
8254: PPUSH
8255: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PPUSH
8268: LD_INT 100
8270: PPUSH
8271: CALL_OW 240
// end ; end ;
8275: LD_VAR 0 4
8279: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8280: LD_INT 0
8282: PPUSH
8283: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8284: LD_INT 22
8286: PUSH
8287: LD_VAR 0 1
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 2
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PPUSH
8310: CALL_OW 69
8314: PUSH
8315: LD_INT 0
8317: GREATER
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_VAR 0 1
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 21
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 3
8343: PUSH
8344: LD_INT 24
8346: PUSH
8347: LD_INT 1000
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: PPUSH
8363: CALL_OW 69
8367: PUSH
8368: LD_INT 0
8370: EQUAL
8371: AND
8372: PUSH
8373: LD_VAR 0 2
8377: PUSH
8378: LD_INT 0
8380: GREATER
8381: AND
8382: IFFALSE 8481
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8384: LD_ADDR_VAR 0 4
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_VAR 0 1
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 25
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 69
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8479
// begin AddComExitBuilding ( i ) ;
8423: LD_VAR 0 4
8427: PPUSH
8428: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8432: LD_VAR 0 4
8436: PPUSH
8437: LD_VAR 0 2
8441: PUSH
8442: LD_INT 1
8444: ARRAY
8445: PPUSH
8446: LD_VAR 0 2
8450: PUSH
8451: LD_INT 2
8453: ARRAY
8454: PPUSH
8455: LD_VAR 0 2
8459: PUSH
8460: LD_INT 3
8462: ARRAY
8463: PPUSH
8464: LD_VAR 0 2
8468: PUSH
8469: LD_INT 4
8471: ARRAY
8472: PPUSH
8473: CALL_OW 205
// end ;
8477: GO 8420
8479: POP
8480: POP
// end ; end ;
8481: LD_VAR 0 3
8485: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8495: LD_ADDR_VAR 0 7
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_VAR 0 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: LD_INT 25
8514: PUSH
8515: LD_INT 1
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: PUSH
8522: LD_INT 56
8524: PUSH
8525: EMPTY
8526: LIST
8527: PUSH
8528: LD_INT 24
8530: PUSH
8531: LD_INT 700
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 69
8548: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8549: LD_ADDR_VAR 0 8
8553: PUSH
8554: LD_INT 22
8556: PUSH
8557: LD_VAR 0 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: LD_INT 30
8568: PUSH
8569: LD_INT 32
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 58
8578: PUSH
8579: EMPTY
8580: LIST
8581: PUSH
8582: LD_INT 24
8584: PUSH
8585: LD_INT 251
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8603: LD_ADDR_VAR 0 10
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_VAR 0 1
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 2
8622: PUSH
8623: LD_INT 25
8625: PUSH
8626: LD_INT 5
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 25
8635: PUSH
8636: LD_INT 8
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 25
8645: PUSH
8646: LD_INT 9
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 69
8667: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8668: LD_ADDR_VAR 0 9
8672: PUSH
8673: LD_VAR 0 2
8677: PPUSH
8678: CALL_OW 313
8682: PUSH
8683: LD_VAR 0 10
8687: DIFF
8688: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8689: LD_VAR 0 8
8693: PUSH
8694: LD_INT 0
8696: EQUAL
8697: PUSH
8698: LD_VAR 0 9
8702: PUSH
8703: LD_INT 0
8705: EQUAL
8706: AND
8707: IFFALSE 8753
// begin for i in soldiers_list do
8709: LD_ADDR_VAR 0 5
8713: PUSH
8714: LD_VAR 0 7
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8749
// begin if IsOK ( build ) then
8722: LD_VAR 0 2
8726: PPUSH
8727: CALL_OW 302
8731: IFFALSE 8747
// ComEnterUnit ( i , build ) ;
8733: LD_VAR 0 5
8737: PPUSH
8738: LD_VAR 0 2
8742: PPUSH
8743: CALL_OW 120
// end ;
8747: GO 8719
8749: POP
8750: POP
// end else
8751: GO 8838
// begin for i = 1 to turretList do
8753: LD_ADDR_VAR 0 5
8757: PUSH
8758: DOUBLE
8759: LD_INT 1
8761: DEC
8762: ST_TO_ADDR
8763: LD_VAR 0 8
8767: PUSH
8768: FOR_TO
8769: IFFALSE 8836
// begin for j = 1 to temp do
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: DOUBLE
8777: LD_INT 1
8779: DEC
8780: ST_TO_ADDR
8781: LD_VAR 0 9
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8832
// begin ComExitBuilding ( temp [ j ] ) ;
8789: LD_VAR 0 9
8793: PUSH
8794: LD_VAR 0 6
8798: ARRAY
8799: PPUSH
8800: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8804: LD_VAR 0 9
8808: PUSH
8809: LD_VAR 0 6
8813: ARRAY
8814: PPUSH
8815: LD_VAR 0 8
8819: PUSH
8820: LD_VAR 0 5
8824: ARRAY
8825: PPUSH
8826: CALL_OW 180
// end ;
8830: GO 8786
8832: POP
8833: POP
// end ;
8834: GO 8768
8836: POP
8837: POP
// end ; end ;
8838: LD_VAR 0 4
8842: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8850: LD_ADDR_VAR 0 6
8854: PUSH
8855: LD_INT 22
8857: PUSH
8858: LD_VAR 0 1
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_INT 31
8875: PUSH
8876: EMPTY
8877: LIST
8878: LIST
8879: PUSH
8880: LD_INT 30
8882: PUSH
8883: LD_INT 32
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 30
8892: PUSH
8893: LD_INT 33
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 30
8902: PUSH
8903: LD_INT 4
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 30
8912: PUSH
8913: LD_INT 5
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PPUSH
8932: CALL_OW 69
8936: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8937: LD_ADDR_VAR 0 7
8941: PUSH
8942: LD_INT 22
8944: PUSH
8945: LD_VAR 0 2
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 21
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 58
8966: PUSH
8967: EMPTY
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8980: LD_VAR 0 6
8984: PUSH
8985: LD_INT 0
8987: GREATER
8988: PUSH
8989: LD_VAR 0 7
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: AND
8998: IFFALSE 9068
// begin for i in turretsList do
9000: LD_ADDR_VAR 0 4
9004: PUSH
9005: LD_VAR 0 6
9009: PUSH
9010: FOR_IN
9011: IFFALSE 9066
// begin for j in enemyBuildings do
9013: LD_ADDR_VAR 0 5
9017: PUSH
9018: LD_VAR 0 7
9022: PUSH
9023: FOR_IN
9024: IFFALSE 9062
// begin if GetDistUnits ( i , j ) < 20 then
9026: LD_VAR 0 4
9030: PPUSH
9031: LD_VAR 0 5
9035: PPUSH
9036: CALL_OW 296
9040: PUSH
9041: LD_INT 20
9043: LESS
9044: IFFALSE 9060
// begin ComAttackUnit ( i , j ) ;
9046: LD_VAR 0 4
9050: PPUSH
9051: LD_VAR 0 5
9055: PPUSH
9056: CALL_OW 115
// end ; end ;
9060: GO 9023
9062: POP
9063: POP
// end ;
9064: GO 9010
9066: POP
9067: POP
// end ; end ;
9068: LD_VAR 0 3
9072: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
9080: PPUSH
9081: PPUSH
9082: PPUSH
9083: PPUSH
9084: PPUSH
9085: PPUSH
// for i = 1 to medicCount do
9086: LD_ADDR_VAR 0 14
9090: PUSH
9091: DOUBLE
9092: LD_INT 1
9094: DEC
9095: ST_TO_ADDR
9096: LD_VAR 0 7
9100: PUSH
9101: FOR_TO
9102: IFFALSE 9184
// begin uc_side = side ;
9104: LD_ADDR_OWVAR 20
9108: PUSH
9109: LD_VAR 0 1
9113: ST_TO_ADDR
// uc_nation = nation ;
9114: LD_ADDR_OWVAR 21
9118: PUSH
9119: LD_VAR 0 2
9123: ST_TO_ADDR
// hc_name =  ;
9124: LD_ADDR_OWVAR 26
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// hc_gallery =  ;
9132: LD_ADDR_OWVAR 33
9136: PUSH
9137: LD_STRING 
9139: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9140: LD_INT 0
9142: PPUSH
9143: LD_INT 4
9145: PPUSH
9146: LD_VAR 0 8
9150: PPUSH
9151: CALL_OW 380
// un = CreateHuman ;
9155: LD_ADDR_VAR 0 16
9159: PUSH
9160: CALL_OW 44
9164: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9165: LD_VAR 0 16
9169: PPUSH
9170: LD_VAR 0 9
9174: PPUSH
9175: LD_INT 0
9177: PPUSH
9178: CALL_OW 49
// end ;
9182: GO 9101
9184: POP
9185: POP
// for i = 1 to soldierCount do
9186: LD_ADDR_VAR 0 14
9190: PUSH
9191: DOUBLE
9192: LD_INT 1
9194: DEC
9195: ST_TO_ADDR
9196: LD_VAR 0 3
9200: PUSH
9201: FOR_TO
9202: IFFALSE 9284
// begin uc_side = side ;
9204: LD_ADDR_OWVAR 20
9208: PUSH
9209: LD_VAR 0 1
9213: ST_TO_ADDR
// uc_nation = nation ;
9214: LD_ADDR_OWVAR 21
9218: PUSH
9219: LD_VAR 0 2
9223: ST_TO_ADDR
// hc_name =  ;
9224: LD_ADDR_OWVAR 26
9228: PUSH
9229: LD_STRING 
9231: ST_TO_ADDR
// hc_gallery =  ;
9232: LD_ADDR_OWVAR 33
9236: PUSH
9237: LD_STRING 
9239: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9240: LD_INT 0
9242: PPUSH
9243: LD_INT 1
9245: PPUSH
9246: LD_VAR 0 8
9250: PPUSH
9251: CALL_OW 380
// un = CreateHuman ;
9255: LD_ADDR_VAR 0 16
9259: PUSH
9260: CALL_OW 44
9264: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9265: LD_VAR 0 16
9269: PPUSH
9270: LD_VAR 0 9
9274: PPUSH
9275: LD_INT 0
9277: PPUSH
9278: CALL_OW 49
// end ;
9282: GO 9201
9284: POP
9285: POP
// for i = 1 to sniperCount do
9286: LD_ADDR_VAR 0 14
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_VAR 0 4
9300: PUSH
9301: FOR_TO
9302: IFFALSE 9384
// begin uc_side = side ;
9304: LD_ADDR_OWVAR 20
9308: PUSH
9309: LD_VAR 0 1
9313: ST_TO_ADDR
// uc_nation = nation ;
9314: LD_ADDR_OWVAR 21
9318: PUSH
9319: LD_VAR 0 2
9323: ST_TO_ADDR
// hc_name =  ;
9324: LD_ADDR_OWVAR 26
9328: PUSH
9329: LD_STRING 
9331: ST_TO_ADDR
// hc_gallery =  ;
9332: LD_ADDR_OWVAR 33
9336: PUSH
9337: LD_STRING 
9339: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9340: LD_INT 0
9342: PPUSH
9343: LD_INT 5
9345: PPUSH
9346: LD_VAR 0 8
9350: PPUSH
9351: CALL_OW 380
// un = CreateHuman ;
9355: LD_ADDR_VAR 0 16
9359: PUSH
9360: CALL_OW 44
9364: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9365: LD_VAR 0 16
9369: PPUSH
9370: LD_VAR 0 9
9374: PPUSH
9375: LD_INT 0
9377: PPUSH
9378: CALL_OW 49
// end ;
9382: GO 9301
9384: POP
9385: POP
// for i = 1 to bazookCount do
9386: LD_ADDR_VAR 0 14
9390: PUSH
9391: DOUBLE
9392: LD_INT 1
9394: DEC
9395: ST_TO_ADDR
9396: LD_VAR 0 5
9400: PUSH
9401: FOR_TO
9402: IFFALSE 9484
// begin uc_side = side ;
9404: LD_ADDR_OWVAR 20
9408: PUSH
9409: LD_VAR 0 1
9413: ST_TO_ADDR
// uc_nation = nation ;
9414: LD_ADDR_OWVAR 21
9418: PUSH
9419: LD_VAR 0 2
9423: ST_TO_ADDR
// hc_name =  ;
9424: LD_ADDR_OWVAR 26
9428: PUSH
9429: LD_STRING 
9431: ST_TO_ADDR
// hc_gallery =  ;
9432: LD_ADDR_OWVAR 33
9436: PUSH
9437: LD_STRING 
9439: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9440: LD_INT 0
9442: PPUSH
9443: LD_INT 9
9445: PPUSH
9446: LD_VAR 0 8
9450: PPUSH
9451: CALL_OW 380
// un = CreateHuman ;
9455: LD_ADDR_VAR 0 16
9459: PUSH
9460: CALL_OW 44
9464: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9465: LD_VAR 0 16
9469: PPUSH
9470: LD_VAR 0 9
9474: PPUSH
9475: LD_INT 0
9477: PPUSH
9478: CALL_OW 49
// end ;
9482: GO 9401
9484: POP
9485: POP
// for i = 1 to mortalCount do
9486: LD_ADDR_VAR 0 14
9490: PUSH
9491: DOUBLE
9492: LD_INT 1
9494: DEC
9495: ST_TO_ADDR
9496: LD_VAR 0 6
9500: PUSH
9501: FOR_TO
9502: IFFALSE 9584
// begin uc_side = side ;
9504: LD_ADDR_OWVAR 20
9508: PUSH
9509: LD_VAR 0 1
9513: ST_TO_ADDR
// uc_nation = nation ;
9514: LD_ADDR_OWVAR 21
9518: PUSH
9519: LD_VAR 0 2
9523: ST_TO_ADDR
// hc_name =  ;
9524: LD_ADDR_OWVAR 26
9528: PUSH
9529: LD_STRING 
9531: ST_TO_ADDR
// hc_gallery =  ;
9532: LD_ADDR_OWVAR 33
9536: PUSH
9537: LD_STRING 
9539: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9540: LD_INT 0
9542: PPUSH
9543: LD_INT 8
9545: PPUSH
9546: LD_VAR 0 8
9550: PPUSH
9551: CALL_OW 380
// un = CreateHuman ;
9555: LD_ADDR_VAR 0 16
9559: PUSH
9560: CALL_OW 44
9564: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9565: LD_VAR 0 16
9569: PPUSH
9570: LD_VAR 0 9
9574: PPUSH
9575: LD_INT 0
9577: PPUSH
9578: CALL_OW 49
// end ;
9582: GO 9501
9584: POP
9585: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9586: LD_ADDR_VAR 0 19
9590: PUSH
9591: LD_INT 22
9593: PUSH
9594: LD_VAR 0 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: LD_INT 2
9605: PUSH
9606: LD_INT 25
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 25
9618: PUSH
9619: LD_INT 5
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 25
9628: PUSH
9629: LD_INT 8
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 25
9638: PUSH
9639: LD_INT 9
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PPUSH
9657: CALL_OW 69
9661: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9662: LD_ADDR_VAR 0 18
9666: PUSH
9667: LD_INT 22
9669: PUSH
9670: LD_VAR 0 1
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 25
9681: PUSH
9682: LD_INT 4
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: EMPTY
9690: LIST
9691: LIST
9692: PPUSH
9693: CALL_OW 69
9697: ST_TO_ADDR
// for i in medic_list do
9698: LD_ADDR_VAR 0 14
9702: PUSH
9703: LD_VAR 0 18
9707: PUSH
9708: FOR_IN
9709: IFFALSE 9727
// ComMoveToArea ( i , healArea ) ;
9711: LD_VAR 0 14
9715: PPUSH
9716: LD_VAR 0 10
9720: PPUSH
9721: CALL_OW 113
9725: GO 9708
9727: POP
9728: POP
// if strategy = 1 then
9729: LD_VAR 0 12
9733: PUSH
9734: LD_INT 1
9736: EQUAL
9737: IFFALSE 10442
// begin repeat wait ( 0 0$3 ) ;
9739: LD_INT 105
9741: PPUSH
9742: CALL_OW 67
// for i in soldiersOK_list do
9746: LD_ADDR_VAR 0 14
9750: PUSH
9751: LD_VAR 0 19
9755: PUSH
9756: FOR_IN
9757: IFFALSE 9791
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9759: LD_VAR 0 14
9763: PPUSH
9764: LD_INT 80
9766: PPUSH
9767: LD_INT 109
9769: PPUSH
9770: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9774: LD_VAR 0 14
9778: PPUSH
9779: LD_INT 39
9781: PPUSH
9782: LD_INT 49
9784: PPUSH
9785: CALL_OW 174
// end ;
9789: GO 9756
9791: POP
9792: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9793: LD_INT 15
9795: PPUSH
9796: LD_INT 22
9798: PUSH
9799: LD_VAR 0 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_INT 0
9815: GREATER
9816: IFFALSE 9739
// repeat wait ( 0 0$1 ) ;
9818: LD_INT 35
9820: PPUSH
9821: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9825: LD_ADDR_VAR 0 17
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_VAR 0 1
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 1
9844: PUSH
9845: LD_INT 3
9847: PUSH
9848: LD_INT 24
9850: PUSH
9851: LD_INT 550
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 24
9864: PUSH
9865: LD_INT 250
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9886: LD_ADDR_VAR 0 19
9890: PUSH
9891: LD_INT 22
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 2
9905: PUSH
9906: LD_INT 25
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 25
9928: PUSH
9929: LD_INT 8
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 25
9938: PUSH
9939: LD_INT 9
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 24
9955: PUSH
9956: LD_INT 1000
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: ST_TO_ADDR
// if medicCount > 0 then
9973: LD_VAR 0 7
9977: PUSH
9978: LD_INT 0
9980: GREATER
9981: IFFALSE 10055
// begin if damageUnit_list > 0 then
9983: LD_VAR 0 17
9987: PUSH
9988: LD_INT 0
9990: GREATER
9991: IFFALSE 10055
// begin for i in damageUnit_list do
9993: LD_ADDR_VAR 0 14
9997: PUSH
9998: LD_VAR 0 17
10002: PUSH
10003: FOR_IN
10004: IFFALSE 10053
// begin ComMoveToArea ( i , healArea ) ;
10006: LD_VAR 0 14
10010: PPUSH
10011: LD_VAR 0 10
10015: PPUSH
10016: CALL_OW 113
// for j in medic_list do
10020: LD_ADDR_VAR 0 15
10024: PUSH
10025: LD_VAR 0 18
10029: PUSH
10030: FOR_IN
10031: IFFALSE 10049
// AddComHeal ( j , i ) ;
10033: LD_VAR 0 15
10037: PPUSH
10038: LD_VAR 0 14
10042: PPUSH
10043: CALL_OW 188
10047: GO 10030
10049: POP
10050: POP
// end ;
10051: GO 10003
10053: POP
10054: POP
// end ; end ; for i in soldiersOK_list do
10055: LD_ADDR_VAR 0 14
10059: PUSH
10060: LD_VAR 0 19
10064: PUSH
10065: FOR_IN
10066: IFFALSE 10242
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10068: LD_ADDR_VAR 0 22
10072: PUSH
10073: LD_INT 22
10075: PUSH
10076: LD_VAR 0 11
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PPUSH
10085: CALL_OW 69
10089: PPUSH
10090: LD_VAR 0 14
10094: PPUSH
10095: CALL_OW 74
10099: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10100: LD_ADDR_VAR 0 23
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_VAR 0 11
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 59
10122: PUSH
10123: EMPTY
10124: LIST
10125: PUSH
10126: LD_INT 21
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 21
10138: PUSH
10139: LD_INT 2
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: PUSH
10152: EMPTY
10153: LIST
10154: LIST
10155: PUSH
10156: EMPTY
10157: LIST
10158: PPUSH
10159: CALL_OW 69
10163: PPUSH
10164: LD_VAR 0 14
10168: PPUSH
10169: CALL_OW 74
10173: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10174: LD_VAR 0 14
10178: PPUSH
10179: LD_VAR 0 22
10183: PPUSH
10184: CALL_OW 296
10188: PUSH
10189: LD_INT 8
10191: PLUS
10192: PUSH
10193: LD_VAR 0 14
10197: PPUSH
10198: LD_VAR 0 23
10202: PPUSH
10203: CALL_OW 296
10207: LESS
10208: IFFALSE 10226
// begin ComAttackUnit ( i , target1 ) ;
10210: LD_VAR 0 14
10214: PPUSH
10215: LD_VAR 0 22
10219: PPUSH
10220: CALL_OW 115
// end else
10224: GO 10240
// begin ComAttackUnit ( i , target2 ) ;
10226: LD_VAR 0 14
10230: PPUSH
10231: LD_VAR 0 23
10235: PPUSH
10236: CALL_OW 115
// end ; end ;
10240: GO 10065
10242: POP
10243: POP
// for i in soldiersOK_list do
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_VAR 0 19
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10431
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10257: LD_ADDR_VAR 0 22
10261: PUSH
10262: LD_INT 22
10264: PUSH
10265: LD_VAR 0 11
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 69
10278: PPUSH
10279: LD_VAR 0 14
10283: PPUSH
10284: CALL_OW 74
10288: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10289: LD_ADDR_VAR 0 23
10293: PUSH
10294: LD_INT 22
10296: PUSH
10297: LD_VAR 0 11
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 59
10311: PUSH
10312: EMPTY
10313: LIST
10314: PUSH
10315: LD_INT 21
10317: PUSH
10318: LD_INT 1
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 21
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: PPUSH
10348: CALL_OW 69
10352: PPUSH
10353: LD_VAR 0 14
10357: PPUSH
10358: CALL_OW 74
10362: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10363: LD_VAR 0 14
10367: PPUSH
10368: LD_VAR 0 22
10372: PPUSH
10373: CALL_OW 296
10377: PUSH
10378: LD_INT 8
10380: PLUS
10381: PUSH
10382: LD_VAR 0 14
10386: PPUSH
10387: LD_VAR 0 23
10391: PPUSH
10392: CALL_OW 296
10396: LESS
10397: IFFALSE 10415
// begin ComAttackUnit ( i , target1 ) ;
10399: LD_VAR 0 14
10403: PPUSH
10404: LD_VAR 0 22
10408: PPUSH
10409: CALL_OW 115
// end else
10413: GO 10429
// begin ComAttackUnit ( i , target2 ) ;
10415: LD_VAR 0 14
10419: PPUSH
10420: LD_VAR 0 23
10424: PPUSH
10425: CALL_OW 115
// end ; end ;
10429: GO 10254
10431: POP
10432: POP
// until soldiersOK_list = [ ] ;
10433: LD_VAR 0 19
10437: PUSH
10438: EMPTY
10439: EQUAL
10440: IFFALSE 9818
// end ; if strategy = 2 then
10442: LD_VAR 0 12
10446: PUSH
10447: LD_INT 2
10449: EQUAL
10450: IFFALSE 11155
// begin repeat wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// for i in soldiersOK_list do
10459: LD_ADDR_VAR 0 14
10463: PUSH
10464: LD_VAR 0 19
10468: PUSH
10469: FOR_IN
10470: IFFALSE 10504
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10472: LD_VAR 0 14
10476: PPUSH
10477: LD_INT 117
10479: PPUSH
10480: LD_INT 97
10482: PPUSH
10483: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10487: LD_VAR 0 14
10491: PPUSH
10492: LD_INT 94
10494: PPUSH
10495: LD_INT 50
10497: PPUSH
10498: CALL_OW 174
// end ;
10502: GO 10469
10504: POP
10505: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10506: LD_INT 16
10508: PPUSH
10509: LD_INT 22
10511: PUSH
10512: LD_VAR 0 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 70
10525: PUSH
10526: LD_INT 0
10528: GREATER
10529: IFFALSE 10452
// repeat wait ( 0 0$3 ) ;
10531: LD_INT 105
10533: PPUSH
10534: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10538: LD_ADDR_VAR 0 17
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: LD_VAR 0 1
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 1
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 24
10563: PUSH
10564: LD_INT 550
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 24
10577: PUSH
10578: LD_INT 250
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PPUSH
10594: CALL_OW 69
10598: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10599: LD_ADDR_VAR 0 19
10603: PUSH
10604: LD_INT 22
10606: PUSH
10607: LD_VAR 0 1
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_INT 25
10621: PUSH
10622: LD_INT 1
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 25
10631: PUSH
10632: LD_INT 5
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 25
10641: PUSH
10642: LD_INT 8
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 25
10651: PUSH
10652: LD_INT 9
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 24
10668: PUSH
10669: LD_INT 1000
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: PPUSH
10681: CALL_OW 69
10685: ST_TO_ADDR
// if medicCount > 0 then
10686: LD_VAR 0 7
10690: PUSH
10691: LD_INT 0
10693: GREATER
10694: IFFALSE 10768
// begin if damageUnit_list > 0 then
10696: LD_VAR 0 17
10700: PUSH
10701: LD_INT 0
10703: GREATER
10704: IFFALSE 10768
// begin for i in damageUnit_list do
10706: LD_ADDR_VAR 0 14
10710: PUSH
10711: LD_VAR 0 17
10715: PUSH
10716: FOR_IN
10717: IFFALSE 10766
// begin ComMoveToArea ( i , healArea ) ;
10719: LD_VAR 0 14
10723: PPUSH
10724: LD_VAR 0 10
10728: PPUSH
10729: CALL_OW 113
// for j in medic_list do
10733: LD_ADDR_VAR 0 15
10737: PUSH
10738: LD_VAR 0 18
10742: PUSH
10743: FOR_IN
10744: IFFALSE 10762
// AddComHeal ( j , i ) ;
10746: LD_VAR 0 15
10750: PPUSH
10751: LD_VAR 0 14
10755: PPUSH
10756: CALL_OW 188
10760: GO 10743
10762: POP
10763: POP
// end ;
10764: GO 10716
10766: POP
10767: POP
// end ; end ; for i in soldiersOK_list do
10768: LD_ADDR_VAR 0 14
10772: PUSH
10773: LD_VAR 0 19
10777: PUSH
10778: FOR_IN
10779: IFFALSE 10955
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10781: LD_ADDR_VAR 0 22
10785: PUSH
10786: LD_INT 22
10788: PUSH
10789: LD_VAR 0 11
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PPUSH
10798: CALL_OW 69
10802: PPUSH
10803: LD_VAR 0 14
10807: PPUSH
10808: CALL_OW 74
10812: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10813: LD_ADDR_VAR 0 23
10817: PUSH
10818: LD_INT 22
10820: PUSH
10821: LD_VAR 0 11
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 2
10832: PUSH
10833: LD_INT 59
10835: PUSH
10836: EMPTY
10837: LIST
10838: PUSH
10839: LD_INT 21
10841: PUSH
10842: LD_INT 1
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: PPUSH
10872: CALL_OW 69
10876: PPUSH
10877: LD_VAR 0 14
10881: PPUSH
10882: CALL_OW 74
10886: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10887: LD_VAR 0 14
10891: PPUSH
10892: LD_VAR 0 22
10896: PPUSH
10897: CALL_OW 296
10901: PUSH
10902: LD_INT 8
10904: PLUS
10905: PUSH
10906: LD_VAR 0 14
10910: PPUSH
10911: LD_VAR 0 23
10915: PPUSH
10916: CALL_OW 296
10920: LESS
10921: IFFALSE 10939
// begin ComAttackUnit ( i , target1 ) ;
10923: LD_VAR 0 14
10927: PPUSH
10928: LD_VAR 0 22
10932: PPUSH
10933: CALL_OW 115
// end else
10937: GO 10953
// begin ComAttackUnit ( i , target2 ) ;
10939: LD_VAR 0 14
10943: PPUSH
10944: LD_VAR 0 23
10948: PPUSH
10949: CALL_OW 115
// end ; end ;
10953: GO 10778
10955: POP
10956: POP
// for i in soldiersOK_list do
10957: LD_ADDR_VAR 0 14
10961: PUSH
10962: LD_VAR 0 19
10966: PUSH
10967: FOR_IN
10968: IFFALSE 11144
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10970: LD_ADDR_VAR 0 22
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_VAR 0 11
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_VAR 0 14
10996: PPUSH
10997: CALL_OW 74
11001: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11002: LD_ADDR_VAR 0 23
11006: PUSH
11007: LD_INT 22
11009: PUSH
11010: LD_VAR 0 11
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 59
11024: PUSH
11025: EMPTY
11026: LIST
11027: PUSH
11028: LD_INT 21
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 21
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: PPUSH
11061: CALL_OW 69
11065: PPUSH
11066: LD_VAR 0 14
11070: PPUSH
11071: CALL_OW 74
11075: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11076: LD_VAR 0 14
11080: PPUSH
11081: LD_VAR 0 22
11085: PPUSH
11086: CALL_OW 296
11090: PUSH
11091: LD_INT 8
11093: PLUS
11094: PUSH
11095: LD_VAR 0 14
11099: PPUSH
11100: LD_VAR 0 23
11104: PPUSH
11105: CALL_OW 296
11109: LESS
11110: IFFALSE 11128
// begin ComAttackUnit ( i , target1 ) ;
11112: LD_VAR 0 14
11116: PPUSH
11117: LD_VAR 0 22
11121: PPUSH
11122: CALL_OW 115
// end else
11126: GO 11142
// begin ComAttackUnit ( i , target2 ) ;
11128: LD_VAR 0 14
11132: PPUSH
11133: LD_VAR 0 23
11137: PPUSH
11138: CALL_OW 115
// end ; end ;
11142: GO 10967
11144: POP
11145: POP
// until soldiersOK_list = [ ] ;
11146: LD_VAR 0 19
11150: PUSH
11151: EMPTY
11152: EQUAL
11153: IFFALSE 10531
// end ; end ; end_of_file
11155: LD_VAR 0 13
11159: RET
// every 0 0$01 do
11160: GO 11162
11162: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11163: LD_INT 22
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 25
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: PUSH
11192: LD_INT 0
11194: EQUAL
11195: IFFALSE 11209
// SetClass ( JMM , 2 ) ;
11197: LD_EXP 1
11201: PPUSH
11202: LD_INT 2
11204: PPUSH
11205: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11209: LD_STRING M1
11211: PPUSH
11212: CALL_OW 337
// case difficulty of 1 :
11216: LD_OWVAR 67
11220: PUSH
11221: LD_INT 1
11223: DOUBLE
11224: EQUAL
11225: IFTRUE 11229
11227: GO 11239
11229: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11230: LD_STRING M1-1
11232: PPUSH
11233: CALL_OW 337
11237: GO 11276
11239: LD_INT 2
11241: DOUBLE
11242: EQUAL
11243: IFTRUE 11247
11245: GO 11257
11247: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11248: LD_STRING M1-2
11250: PPUSH
11251: CALL_OW 337
11255: GO 11276
11257: LD_INT 3
11259: DOUBLE
11260: EQUAL
11261: IFTRUE 11265
11263: GO 11275
11265: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11266: LD_STRING M1-3
11268: PPUSH
11269: CALL_OW 337
11273: GO 11276
11275: POP
// ChangeMissionObjectives ( M1cont ) ;
11276: LD_STRING M1cont
11278: PPUSH
11279: CALL_OW 337
// SaveForQuickRestart ;
11283: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11287: LD_INT 350
11289: PPUSH
11290: LD_INT 875
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11302: LD_INT 5
11304: PPUSH
11305: LD_INT 4
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 55
// end ;
11315: END
// every 0 0$1 trigger firstCrateSpawn do
11316: LD_EXP 41
11320: IFFALSE 11659
11322: GO 11324
11324: DISABLE
// begin if IsOk ( Lisa ) then
11325: LD_EXP 2
11329: PPUSH
11330: CALL_OW 302
11334: IFFALSE 11350
// Say ( Lisa , DR0-Lisa-1 ) else
11336: LD_EXP 2
11340: PPUSH
11341: LD_STRING DR0-Lisa-1
11343: PPUSH
11344: CALL_OW 88
11348: GO 11484
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11350: LD_INT 22
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 21
11362: PUSH
11363: LD_INT 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 26
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 2
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 4
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PPUSH
11436: CALL_OW 69
11440: PUSH
11441: LD_EXP 1
11445: PUSH
11446: LD_EXP 8
11450: PUSH
11451: LD_EXP 5
11455: PUSH
11456: LD_EXP 6
11460: PUSH
11461: LD_EXP 7
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: DIFF
11473: PPUSH
11474: LD_STRING DR0-Sol1-1
11476: PPUSH
11477: LD_STRING DR0-Sol1-1
11479: PPUSH
11480: CALL 5163 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11484: LD_INT 22
11486: PUSH
11487: LD_INT 1
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 21
11496: PUSH
11497: LD_INT 1
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: LD_INT 26
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 2
11516: PUSH
11517: LD_INT 25
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 25
11529: PUSH
11530: LD_INT 2
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 3
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 4
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PPUSH
11570: CALL_OW 69
11574: PUSH
11575: LD_EXP 1
11579: PUSH
11580: LD_EXP 8
11584: PUSH
11585: LD_EXP 5
11589: PUSH
11590: LD_EXP 2
11594: PUSH
11595: LD_EXP 6
11599: PUSH
11600: LD_EXP 7
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: DIFF
11613: PPUSH
11614: LD_STRING DR0-Sol2-1
11616: PPUSH
11617: LD_STRING DR0-Sol2-1
11619: PPUSH
11620: CALL 5163 0 3
// if IsOk ( Cyrus ) then
11624: LD_EXP 4
11628: PPUSH
11629: CALL_OW 302
11633: IFFALSE 11647
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11635: LD_EXP 4
11639: PPUSH
11640: LD_STRING DR0-Cyrus-1
11642: PPUSH
11643: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11647: LD_EXP 1
11651: PPUSH
11652: LD_STRING DR0-JMM-1
11654: PPUSH
11655: CALL_OW 88
// end ;
11659: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11660: LD_EXP 5
11664: PPUSH
11665: CALL_OW 302
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 25
11682: PUSH
11683: LD_INT 16
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: PUSH
11699: LD_INT 0
11701: GREATER
11702: AND
11703: IFFALSE 11981
11705: GO 11707
11707: DISABLE
// begin DialogueOn ;
11708: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11712: LD_EXP 5
11716: PPUSH
11717: LD_STRING D10-Frank-1
11719: PPUSH
11720: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11724: LD_INT 22
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 21
11736: PUSH
11737: LD_INT 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: LD_INT 25
11749: PUSH
11750: LD_INT 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 25
11759: PUSH
11760: LD_INT 2
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 25
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 25
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: PPUSH
11799: CALL_OW 69
11803: PUSH
11804: LD_EXP 1
11808: PUSH
11809: LD_EXP 5
11813: PUSH
11814: LD_EXP 2
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: DIFF
11824: PPUSH
11825: LD_STRING D10-Sol1-1
11827: PPUSH
11828: LD_STRING D10-FSol1-1
11830: PPUSH
11831: CALL 5163 0 3
// Say ( Frank , D10-Frank-2 ) ;
11835: LD_EXP 5
11839: PPUSH
11840: LD_STRING D10-Frank-2
11842: PPUSH
11843: CALL_OW 88
// if IsOK ( Lisa ) then
11847: LD_EXP 2
11851: PPUSH
11852: CALL_OW 302
11856: IFFALSE 11872
// begin Say ( Lisa , D10-Lisa-2 ) ;
11858: LD_EXP 2
11862: PPUSH
11863: LD_STRING D10-Lisa-2
11865: PPUSH
11866: CALL_OW 88
// end else
11870: GO 11977
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11872: LD_INT 22
11874: PUSH
11875: LD_INT 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 21
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: LD_INT 25
11897: PUSH
11898: LD_INT 1
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 25
11907: PUSH
11908: LD_INT 2
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 3
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 4
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: PUSH
11952: LD_EXP 1
11956: PUSH
11957: LD_EXP 5
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: DIFF
11966: PPUSH
11967: LD_STRING D10-Sol1-2
11969: PPUSH
11970: LD_STRING D10-FSol1-2
11972: PPUSH
11973: CALL 5163 0 3
// end ; DialogueOff ;
11977: CALL_OW 7
// end ;
11981: END
// every 10 10$30 do
11982: GO 11984
11984: DISABLE
// begin HarrisonSupport ;
11985: CALL 2091 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11989: LD_EXP 17
11993: PPUSH
11994: CALL_OW 310
11998: PPUSH
11999: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12003: LD_EXP 17
12007: PPUSH
12008: LD_STRING DEng-Eng1-1
12010: PPUSH
12011: CALL_OW 88
// wait ( 1 1$0 ) ;
12015: LD_INT 2100
12017: PPUSH
12018: CALL_OW 67
// DialogueOn ;
12022: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12026: LD_EXP 14
12030: PPUSH
12031: LD_STRING DRem-Har-1
12033: PPUSH
12034: CALL_OW 94
// if contactWithRussian = 1 then
12038: LD_EXP 22
12042: PUSH
12043: LD_INT 1
12045: EQUAL
12046: IFFALSE 12062
// begin Say ( JMM , DRem-JMM-1 ) ;
12048: LD_EXP 1
12052: PPUSH
12053: LD_STRING DRem-JMM-1
12055: PPUSH
12056: CALL_OW 88
// end else
12060: GO 12074
// begin Say ( JMM , DRem-JMM-1a ) ;
12062: LD_EXP 1
12066: PPUSH
12067: LD_STRING DRem-JMM-1a
12069: PPUSH
12070: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12074: LD_EXP 14
12078: PPUSH
12079: LD_STRING DRem-Har-2
12081: PPUSH
12082: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12086: LD_STRING DenisInDelta
12088: PPUSH
12089: LD_INT 0
12091: PPUSH
12092: CALL_OW 30
12096: PUSH
12097: LD_INT 1
12099: EQUAL
12100: IFFALSE 12116
// begin Say ( JMM , DRem-JMM-2 ) ;
12102: LD_EXP 1
12106: PPUSH
12107: LD_STRING DRem-JMM-2
12109: PPUSH
12110: CALL_OW 88
// end else
12114: GO 12128
// begin Say ( JMM , DRem-JMM-2a ) ;
12116: LD_EXP 1
12120: PPUSH
12121: LD_STRING DRem-JMM-2a
12123: PPUSH
12124: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12128: LD_EXP 14
12132: PPUSH
12133: LD_STRING DRem-Har-3
12135: PPUSH
12136: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12140: LD_EXP 1
12144: PPUSH
12145: LD_STRING DRem-JMM-3
12147: PPUSH
12148: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12152: LD_EXP 14
12156: PPUSH
12157: LD_STRING DRem-Har-4
12159: PPUSH
12160: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12164: LD_STRING DenisInDelta
12166: PPUSH
12167: LD_INT 0
12169: PPUSH
12170: CALL_OW 30
12174: PUSH
12175: LD_INT 1
12177: EQUAL
12178: IFFALSE 12206
// begin Say ( JMM , DRem-JMM-4 ) ;
12180: LD_EXP 1
12184: PPUSH
12185: LD_STRING DRem-JMM-4
12187: PPUSH
12188: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12192: LD_EXP 14
12196: PPUSH
12197: LD_STRING DRem-Har-5
12199: PPUSH
12200: CALL_OW 94
// end else
12204: GO 12239
// begin SetRestrict ( 36 , 1 , true ) ;
12206: LD_INT 36
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12219: LD_INT 15
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12232: LD_STRING MR
12234: PPUSH
12235: CALL_OW 337
// end ; DialogueOff ;
12239: CALL_OW 7
// end ;
12243: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12244: LD_STRING DenisInDelta
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL_OW 30
12254: PUSH
12255: LD_INT 1
12257: EQUAL
12258: IFFALSE 12389
12260: GO 12262
12262: DISABLE
// begin PrepareDenis ;
12263: CALL 2012 0 0
// CenterNowOnUnits ( Denis ) ;
12267: LD_EXP 9
12271: PPUSH
12272: CALL_OW 87
// DialogueOn ;
12276: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12280: LD_EXP 9
12284: PPUSH
12285: LD_STRING DDen-Den-1
12287: PPUSH
12288: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12292: LD_EXP 1
12296: PPUSH
12297: LD_STRING DDen-JMM-1
12299: PPUSH
12300: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12304: LD_EXP 9
12308: PPUSH
12309: LD_STRING DDen-Den-2
12311: PPUSH
12312: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12316: LD_EXP 1
12320: PPUSH
12321: LD_STRING DDen-JMM-2
12323: PPUSH
12324: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12328: LD_EXP 9
12332: PPUSH
12333: LD_STRING DDen-Den-3
12335: PPUSH
12336: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12340: LD_EXP 1
12344: PPUSH
12345: LD_STRING DDen-JMM-3
12347: PPUSH
12348: CALL_OW 88
// DialogueOff ;
12352: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12356: LD_INT 36
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12369: LD_INT 15
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12382: LD_STRING MR
12384: PPUSH
12385: CALL_OW 337
// end ;
12389: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12390: CALL 12435 0 0
12394: PUSH
12395: LD_EXP 9
12399: PPUSH
12400: CALL_OW 302
12404: AND
12405: IFFALSE 12434
12407: GO 12409
12409: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12410: LD_EXP 9
12414: PPUSH
12415: LD_STRING DR1-Den-1
12417: PPUSH
12418: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12422: LD_EXP 1
12426: PPUSH
12427: LD_STRING DR1-JMM-1
12429: PPUSH
12430: CALL_OW 88
// end ;
12434: END
// function CheckOptoLab ; var i ; begin
12435: LD_INT 0
12437: PPUSH
12438: PPUSH
// result = false ;
12439: LD_ADDR_VAR 0 1
12443: PUSH
12444: LD_INT 0
12446: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: LD_INT 22
12454: PUSH
12455: LD_INT 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 30
12467: PUSH
12468: LD_INT 7
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 30
12477: PUSH
12478: LD_INT 8
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: PUSH
12499: FOR_IN
12500: IFFALSE 12552
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12502: LD_VAR 0 2
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 268
12514: PUSH
12515: LD_INT 15
12517: EQUAL
12518: PUSH
12519: LD_VAR 0 2
12523: PPUSH
12524: LD_INT 2
12526: PPUSH
12527: CALL_OW 268
12531: PUSH
12532: LD_INT 15
12534: EQUAL
12535: OR
12536: IFFALSE 12548
// begin result = true ;
12538: LD_ADDR_VAR 0 1
12542: PUSH
12543: LD_INT 1
12545: ST_TO_ADDR
// break ;
12546: GO 12552
// end ; break ;
12548: GO 12552
// end ;
12550: GO 12499
12552: POP
12553: POP
// end ;
12554: LD_VAR 0 1
12558: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12559: LD_INT 15
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 321
12569: PUSH
12570: LD_INT 2
12572: EQUAL
12573: PUSH
12574: LD_EXP 9
12578: PPUSH
12579: CALL_OW 302
12583: AND
12584: IFFALSE 12816
12586: GO 12588
12588: DISABLE
// begin DialogueOn ;
12589: CALL_OW 6
// if IsOK ( Denis ) then
12593: LD_EXP 9
12597: PPUSH
12598: CALL_OW 302
12602: IFFALSE 12618
// begin Say ( Denis , DR2-Den-1 ) ;
12604: LD_EXP 9
12608: PPUSH
12609: LD_STRING DR2-Den-1
12611: PPUSH
12612: CALL_OW 88
// end else
12616: GO 12677
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12618: LD_INT 22
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 21
12630: PUSH
12631: LD_INT 1
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 25
12640: PUSH
12641: LD_INT 4
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_EXP 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: DIFF
12666: PPUSH
12667: LD_STRING DR2-Sci1-1
12669: PPUSH
12670: LD_STRING DR2-FSci1-1
12672: PPUSH
12673: CALL 5163 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12677: LD_EXP 1
12681: PPUSH
12682: LD_STRING DR2-JMM-1
12684: PPUSH
12685: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12689: LD_INT 22
12691: PUSH
12692: LD_INT 1
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 21
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 25
12714: PUSH
12715: LD_INT 1
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 25
12724: PUSH
12725: LD_INT 2
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 25
12734: PUSH
12735: LD_INT 3
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 25
12744: PUSH
12745: LD_INT 4
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: PUSH
12769: LD_EXP 1
12773: PUSH
12774: LD_EXP 9
12778: PUSH
12779: LD_EXP 8
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: DIFF
12789: PPUSH
12790: LD_STRING DR2-Sol1-1
12792: PPUSH
12793: LD_STRING DR2-Sol1-11
12795: PPUSH
12796: CALL 5163 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12800: LD_EXP 1
12804: PPUSH
12805: LD_STRING DR2-JMM-2
12807: PPUSH
12808: CALL_OW 88
// DialogueOff ;
12812: CALL_OW 7
// end ;
12816: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12817: LD_INT 22
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 30
12829: PUSH
12830: LD_INT 36
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PPUSH
12841: CALL_OW 69
12845: PUSH
12846: LD_INT 0
12848: EQUAL
12849: PUSH
12850: LD_INT 22
12852: PUSH
12853: LD_INT 1
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: LD_INT 21
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 33
12872: PUSH
12873: LD_INT 2
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 69
12889: PUSH
12890: LD_INT 0
12892: GREATER
12893: AND
12894: PUSH
12895: LD_EXP 23
12899: PUSH
12900: LD_INT 0
12902: EQUAL
12903: AND
12904: IFFALSE 13030
12906: GO 12908
12908: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12909: LD_INT 22
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 25
12931: PUSH
12932: LD_INT 3
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: PUSH
12949: LD_EXP 1
12953: PUSH
12954: LD_EXP 6
12958: PUSH
12959: LD_EXP 7
12963: PUSH
12964: LD_EXP 9
12968: PUSH
12969: LD_EXP 15
12973: PUSH
12974: LD_EXP 3
12978: PUSH
12979: LD_EXP 4
12983: PUSH
12984: LD_EXP 2
12988: PUSH
12989: LD_EXP 5
12993: PUSH
12994: LD_EXP 8
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: DIFF
13011: PPUSH
13012: LD_STRING D3a-Mech1-1
13014: PPUSH
13015: LD_STRING D3a-Mech1-1
13017: PPUSH
13018: CALL 5163 0 3
// firstTower = 2 ;
13022: LD_ADDR_EXP 23
13026: PUSH
13027: LD_INT 2
13029: ST_TO_ADDR
// end ;
13030: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13031: LD_INT 22
13033: PUSH
13034: LD_INT 3
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 21
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 69
13059: PUSH
13060: LD_INT 0
13062: EQUAL
13063: IFFALSE 13178
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 21
13088: PUSH
13089: LD_INT 1
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 25
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: LD_INT 3
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 25
13131: PUSH
13132: LD_INT 4
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: LIST
13150: PPUSH
13151: CALL_OW 69
13155: PUSH
13156: FOR_IN
13157: IFFALSE 13176
// AddExperience ( i , 1 , 10000 ) ;
13159: LD_VAR 0 1
13163: PPUSH
13164: LD_INT 1
13166: PPUSH
13167: LD_INT 10000
13169: PPUSH
13170: CALL_OW 492
13174: GO 13156
13176: POP
13177: POP
// end ;
13178: PPOPN 1
13180: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13181: LD_INT 22
13183: PUSH
13184: LD_INT 1
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 30
13193: PUSH
13194: LD_INT 36
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PPUSH
13205: CALL_OW 69
13209: PUSH
13210: LD_INT 0
13212: GREATER
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 1
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 21
13226: PUSH
13227: LD_INT 2
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 33
13236: PUSH
13237: LD_INT 2
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: PUSH
13254: LD_INT 0
13256: GREATER
13257: AND
13258: PUSH
13259: CALL 13841 0 0
13263: AND
13264: IFFALSE 13838
13266: GO 13268
13268: DISABLE
13269: LD_INT 0
13271: PPUSH
13272: PPUSH
13273: PPUSH
13274: PPUSH
13275: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_INT 22
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 30
13293: PUSH
13294: LD_INT 36
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 69
13309: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13310: LD_ADDR_VAR 0 4
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 1
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 21
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 33
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13355: LD_ADDR_VAR 0 5
13359: PUSH
13360: EMPTY
13361: ST_TO_ADDR
// for i in tmpControlTowers do
13362: LD_ADDR_VAR 0 1
13366: PUSH
13367: LD_VAR 0 3
13371: PUSH
13372: FOR_IN
13373: IFFALSE 13836
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13375: LD_EXP 1
13379: PPUSH
13380: CALL_OW 310
13384: PUSH
13385: LD_VAR 0 1
13389: EQUAL
13390: PUSH
13391: LD_EXP 1
13395: PPUSH
13396: CALL_OW 257
13400: PUSH
13401: LD_INT 3
13403: EQUAL
13404: AND
13405: IFFALSE 13535
// begin InGameOn ;
13407: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13411: LD_VAR 0 4
13415: PUSH
13416: LD_INT 1
13418: ARRAY
13419: PPUSH
13420: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13424: LD_EXP 1
13428: PPUSH
13429: LD_STRING D4a-JMM-1
13431: PPUSH
13432: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13436: LD_VAR 0 4
13440: PUSH
13441: LD_INT 1
13443: ARRAY
13444: PPUSH
13445: LD_EXP 1
13449: PPUSH
13450: CALL_OW 53
// wait ( 0 0$1 ) ;
13454: LD_INT 35
13456: PPUSH
13457: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13461: LD_VAR 0 4
13465: PUSH
13466: LD_INT 1
13468: ARRAY
13469: PPUSH
13470: LD_VAR 0 4
13474: PUSH
13475: LD_INT 1
13477: ARRAY
13478: PPUSH
13479: CALL_OW 250
13483: PUSH
13484: LD_INT 3
13486: PLUS
13487: PPUSH
13488: LD_VAR 0 4
13492: PUSH
13493: LD_INT 1
13495: ARRAY
13496: PPUSH
13497: CALL_OW 251
13501: PUSH
13502: LD_INT 2
13504: MINUS
13505: PPUSH
13506: CALL_OW 111
// wait ( 0 0$2 ) ;
13510: LD_INT 70
13512: PPUSH
13513: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13517: LD_EXP 1
13521: PPUSH
13522: LD_STRING D4b-JMM-1
13524: PPUSH
13525: CALL_OW 88
// InGameOff ;
13529: CALL_OW 9
// end else
13533: GO 13834
// begin InGameOn ;
13535: CALL_OW 8
// for j in UnitsInside ( i ) do
13539: LD_ADDR_VAR 0 2
13543: PUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 313
13553: PUSH
13554: FOR_IN
13555: IFFALSE 13590
// if GetClass ( j ) = 3 then
13557: LD_VAR 0 2
13561: PPUSH
13562: CALL_OW 257
13566: PUSH
13567: LD_INT 3
13569: EQUAL
13570: IFFALSE 13588
// tmpMechanicInside = tmpMechanicInside ^ j ;
13572: LD_ADDR_VAR 0 5
13576: PUSH
13577: LD_VAR 0 5
13581: PUSH
13582: LD_VAR 0 2
13586: ADD
13587: ST_TO_ADDR
13588: GO 13554
13590: POP
13591: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13592: LD_VAR 0 5
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: CALL_OW 258
13605: PUSH
13606: LD_INT 1
13608: EQUAL
13609: IFFALSE 13627
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13611: LD_VAR 0 5
13615: PUSH
13616: LD_INT 1
13618: ARRAY
13619: PPUSH
13620: LD_STRING D4a-Mech1-1
13622: PPUSH
13623: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13627: LD_VAR 0 5
13631: PUSH
13632: LD_INT 1
13634: ARRAY
13635: PPUSH
13636: CALL_OW 258
13640: PUSH
13641: LD_INT 2
13643: EQUAL
13644: IFFALSE 13662
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13646: LD_VAR 0 5
13650: PUSH
13651: LD_INT 1
13653: ARRAY
13654: PPUSH
13655: LD_STRING D4a-FMech1-1
13657: PPUSH
13658: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13662: LD_VAR 0 4
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13675: LD_VAR 0 4
13679: PUSH
13680: LD_INT 1
13682: ARRAY
13683: PPUSH
13684: LD_VAR 0 5
13688: PUSH
13689: LD_INT 1
13691: ARRAY
13692: PPUSH
13693: CALL_OW 53
// wait ( 0 0$1 ) ;
13697: LD_INT 35
13699: PPUSH
13700: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13704: LD_VAR 0 4
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: LD_VAR 0 4
13717: PUSH
13718: LD_INT 1
13720: ARRAY
13721: PPUSH
13722: CALL_OW 250
13726: PUSH
13727: LD_INT 3
13729: PLUS
13730: PPUSH
13731: LD_VAR 0 4
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PPUSH
13740: CALL_OW 251
13744: PUSH
13745: LD_INT 2
13747: MINUS
13748: PPUSH
13749: CALL_OW 111
// wait ( 0 0$2 ) ;
13753: LD_INT 70
13755: PPUSH
13756: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13760: LD_VAR 0 5
13764: PUSH
13765: LD_INT 1
13767: ARRAY
13768: PPUSH
13769: CALL_OW 258
13773: PUSH
13774: LD_INT 1
13776: EQUAL
13777: IFFALSE 13795
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13779: LD_VAR 0 5
13783: PUSH
13784: LD_INT 1
13786: ARRAY
13787: PPUSH
13788: LD_STRING D4b-Mech1-1
13790: PPUSH
13791: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13795: LD_VAR 0 5
13799: PUSH
13800: LD_INT 1
13802: ARRAY
13803: PPUSH
13804: CALL_OW 258
13808: PUSH
13809: LD_INT 2
13811: EQUAL
13812: IFFALSE 13830
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13814: LD_VAR 0 5
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_STRING D4b-FMech1-1
13825: PPUSH
13826: CALL_OW 88
// InGameOff ;
13830: CALL_OW 9
// end ; end ;
13834: GO 13372
13836: POP
13837: POP
// end ;
13838: PPOPN 5
13840: END
// function CheckMehInside ; var i , j ; begin
13841: LD_INT 0
13843: PPUSH
13844: PPUSH
13845: PPUSH
// result = false ;
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13854: LD_ADDR_VAR 0 2
13858: PUSH
13859: LD_INT 22
13861: PUSH
13862: LD_INT 1
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_INT 36
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: PUSH
13888: FOR_IN
13889: IFFALSE 13940
// begin for j in UnitsInside ( i ) do
13891: LD_ADDR_VAR 0 3
13895: PUSH
13896: LD_VAR 0 2
13900: PPUSH
13901: CALL_OW 313
13905: PUSH
13906: FOR_IN
13907: IFFALSE 13936
// begin if GetClass ( j ) = 3 then
13909: LD_VAR 0 3
13913: PPUSH
13914: CALL_OW 257
13918: PUSH
13919: LD_INT 3
13921: EQUAL
13922: IFFALSE 13934
// begin result = true ;
13924: LD_ADDR_VAR 0 1
13928: PUSH
13929: LD_INT 1
13931: ST_TO_ADDR
// break ;
13932: GO 13936
// end ; end ;
13934: GO 13906
13936: POP
13937: POP
// end ;
13938: GO 13888
13940: POP
13941: POP
// end ;
13942: LD_VAR 0 1
13946: RET
// every 25 25$0 do
13947: GO 13949
13949: DISABLE
// begin PrepareKurt ;
13950: CALL 17317 0 0
// end ;
13954: END
// every 35 35$0 do
13955: GO 13957
13957: DISABLE
// begin PrepareJoan ;
13958: CALL 2563 0 0
// wait ( 1 1$0 ) ;
13962: LD_INT 2100
13964: PPUSH
13965: CALL_OW 67
// if IsOK ( Lisa ) then
13969: LD_EXP 2
13973: PPUSH
13974: CALL_OW 302
13978: IFFALSE 14108
// begin DialogueOn ;
13980: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13984: LD_EXP 2
13988: PPUSH
13989: LD_STRING D7-Lisa-1
13991: PPUSH
13992: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13996: LD_EXP 1
14000: PPUSH
14001: LD_STRING D7-JMM-1
14003: PPUSH
14004: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14008: LD_EXP 2
14012: PPUSH
14013: LD_STRING D7-Lisa-2
14015: PPUSH
14016: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14020: LD_EXP 1
14024: PPUSH
14025: LD_STRING D7-JMM-2
14027: PPUSH
14028: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14032: LD_EXP 2
14036: PPUSH
14037: LD_STRING D7-Lisa-3
14039: PPUSH
14040: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14044: LD_EXP 1
14048: PPUSH
14049: LD_STRING D7-JMM-3
14051: PPUSH
14052: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14056: LD_EXP 2
14060: PPUSH
14061: LD_STRING D7-Lisa-4
14063: PPUSH
14064: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14068: LD_EXP 1
14072: PPUSH
14073: LD_STRING D7-JMM-4
14075: PPUSH
14076: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14080: LD_EXP 1
14084: PPUSH
14085: LD_STRING D7-JMM-4a
14087: PPUSH
14088: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14092: LD_EXP 2
14096: PPUSH
14097: LD_STRING D7-Lisa-5
14099: PPUSH
14100: CALL_OW 88
// DialogueOff ;
14104: CALL_OW 7
// end ; end ;
14108: END
// every 0 0$1 do var i , others ;
14109: GO 14111
14111: DISABLE
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 21
14133: PUSH
14134: LD_INT 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 2
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 1
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 25
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 25
14166: PUSH
14167: LD_INT 3
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 25
14176: PUSH
14177: LD_INT 4
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: PPUSH
14196: CALL_OW 69
14200: PUSH
14201: LD_EXP 13
14205: PUSH
14206: EMPTY
14207: LIST
14208: DIFF
14209: ST_TO_ADDR
// for i in others do
14210: LD_ADDR_VAR 0 1
14214: PUSH
14215: LD_VAR 0 2
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14258
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14223: LD_EXP 13
14227: PPUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 296
14237: PUSH
14238: LD_INT 6
14240: LESS
14241: IFFALSE 14256
// begin disable ;
14243: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14244: LD_EXP 13
14248: PPUSH
14249: LD_STRING D5-Sol1-1
14251: PPUSH
14252: CALL_OW 88
// end ; end ;
14256: GO 14220
14258: POP
14259: POP
// end ;
14260: PPOPN 2
14262: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14263: LD_INT 22
14265: PUSH
14266: LD_INT 1
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 33
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PPUSH
14287: CALL_OW 69
14291: PUSH
14292: LD_INT 2
14294: GREATEREQUAL
14295: IFFALSE 14315
14297: GO 14299
14299: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14300: LD_STRING MRa
14302: PPUSH
14303: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14307: LD_ADDR_EXP 28
14311: PUSH
14312: LD_INT 1
14314: ST_TO_ADDR
// end ;
14315: END
// every 4 4$0 do
14316: GO 14318
14318: DISABLE
// PrepareRandoms ( 1 ) ;
14319: LD_INT 1
14321: PPUSH
14322: CALL 3599 0 1
14326: END
// every 10 10$0 do
14327: GO 14329
14329: DISABLE
// PrepareRandoms ( 2 ) ;
14330: LD_INT 2
14332: PPUSH
14333: CALL 3599 0 1
14337: END
// every 28 28$0 do
14338: GO 14340
14340: DISABLE
// PrepareRandoms ( 4 ) ;
14341: LD_INT 4
14343: PPUSH
14344: CALL 3599 0 1
14348: END
// every 32 32$0 do
14349: GO 14351
14351: DISABLE
// PrepareRandoms ( 5 ) ;
14352: LD_INT 5
14354: PPUSH
14355: CALL 3599 0 1
14359: END
// every 35 35$30 do
14360: GO 14362
14362: DISABLE
// PrepareRandoms ( 6 ) ;
14363: LD_INT 6
14365: PPUSH
14366: CALL 3599 0 1
14370: END
// every 37 37$20 do
14371: GO 14373
14373: DISABLE
// PrepareRandoms ( 7 ) ;
14374: LD_INT 7
14376: PPUSH
14377: CALL 3599 0 1
14381: END
// every 5 5$20 do
14382: GO 14384
14384: DISABLE
// begin DialogueOn ;
14385: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14389: LD_EXP 10
14393: PPUSH
14394: LD_STRING D12a-Sci-1
14396: PPUSH
14397: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14401: LD_EXP 1
14405: PPUSH
14406: LD_STRING D12a-JMM-1
14408: PPUSH
14409: CALL_OW 88
// DialogueOff ;
14413: CALL_OW 7
// cratesStatus = 1 ;
14417: LD_ADDR_EXP 38
14421: PUSH
14422: LD_INT 1
14424: ST_TO_ADDR
// end ;
14425: END
// every 13 13$0 do
14426: GO 14428
14428: DISABLE
// begin DialogueOn ;
14429: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14433: LD_EXP 10
14437: PPUSH
14438: LD_STRING D12b-Sci-1
14440: PPUSH
14441: CALL_OW 94
// DialogueOff ;
14445: CALL_OW 7
// cratesStatus = 2 ;
14449: LD_ADDR_EXP 38
14453: PUSH
14454: LD_INT 2
14456: ST_TO_ADDR
// end ;
14457: END
// every 32 32$0 do
14458: GO 14460
14460: DISABLE
// begin DialogueOn ;
14461: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14465: LD_EXP 10
14469: PPUSH
14470: LD_STRING D12c-Sci-1
14472: PPUSH
14473: CALL_OW 94
// DialogueOff ;
14477: CALL_OW 7
// wait ( 3 3$0 ) ;
14481: LD_INT 6300
14483: PPUSH
14484: CALL_OW 67
// DialogueOn ;
14488: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14492: LD_EXP 10
14496: PPUSH
14497: LD_STRING D12d-Sci-1
14499: PPUSH
14500: CALL_OW 94
// DialogueOff ;
14504: CALL_OW 7
// cratesStatus = 1 ;
14508: LD_ADDR_EXP 38
14512: PUSH
14513: LD_INT 1
14515: ST_TO_ADDR
// end ;
14516: END
// every 42 42$0 do
14517: GO 14519
14519: DISABLE
// begin DialogueOn ;
14520: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14524: LD_EXP 10
14528: PPUSH
14529: LD_STRING D12e-Sci-1
14531: PPUSH
14532: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14536: LD_EXP 1
14540: PPUSH
14541: LD_STRING D12e-JMM-1
14543: PPUSH
14544: CALL_OW 88
// DialogueOff ;
14548: CALL_OW 7
// cratesStatus = 2 ;
14552: LD_ADDR_EXP 38
14556: PUSH
14557: LD_INT 2
14559: ST_TO_ADDR
// end ;
14560: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14561: LD_INT 22
14563: PUSH
14564: LD_INT 6
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 21
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: LD_INT 34
14583: PUSH
14584: LD_INT 51
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: PUSH
14601: LD_INT 0
14603: GREATER
14604: IFFALSE 14687
14606: GO 14608
14608: DISABLE
14609: LD_INT 0
14611: PPUSH
// begin enable ;
14612: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14613: LD_ADDR_VAR 0 1
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_INT 6
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 21
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 21
14643: PUSH
14644: LD_INT 2
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PPUSH
14660: CALL_OW 69
14664: PUSH
14665: FOR_IN
14666: IFFALSE 14685
// ComAgressiveMove ( i , 138 , 168 ) ;
14668: LD_VAR 0 1
14672: PPUSH
14673: LD_INT 138
14675: PPUSH
14676: LD_INT 168
14678: PPUSH
14679: CALL_OW 114
14683: GO 14665
14685: POP
14686: POP
// end ;
14687: PPOPN 1
14689: END
// every 0 0$1 do var i ;
14690: GO 14692
14692: DISABLE
14693: LD_INT 0
14695: PPUSH
// begin enable ;
14696: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: LD_INT 5
14704: PPUSH
14705: LD_INT 2
14707: PUSH
14708: LD_INT 22
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 22
14720: PUSH
14721: LD_INT 6
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: PPUSH
14736: CALL_OW 70
14740: PUSH
14741: FOR_IN
14742: IFFALSE 14806
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14744: LD_INT 5
14746: PPUSH
14747: LD_INT 22
14749: PUSH
14750: LD_INT 6
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 34
14759: PUSH
14760: LD_INT 51
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: PUSH
14776: LD_INT 0
14778: GREATER
14779: IFFALSE 14795
// sendedConvoys = sendedConvoys + 1 ;
14781: LD_ADDR_EXP 39
14785: PUSH
14786: LD_EXP 39
14790: PUSH
14791: LD_INT 1
14793: PLUS
14794: ST_TO_ADDR
// RemoveUnit ( i ) ;
14795: LD_VAR 0 1
14799: PPUSH
14800: CALL_OW 64
// end ;
14804: GO 14741
14806: POP
14807: POP
// end ; end_of_file
14808: PPOPN 1
14810: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14811: LD_VAR 0 1
14815: PUSH
14816: LD_INT 1
14818: EQUAL
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: LD_INT 3
14827: EQUAL
14828: AND
14829: IFFALSE 14839
// contactWithRussian = 1 ;
14831: LD_ADDR_EXP 22
14835: PUSH
14836: LD_INT 1
14838: ST_TO_ADDR
// end ;
14839: PPOPN 2
14841: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14842: LD_VAR 0 1
14846: PPUSH
14847: CALL_OW 266
14851: PUSH
14852: LD_INT 36
14854: EQUAL
14855: PUSH
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 255
14865: PUSH
14866: LD_INT 1
14868: EQUAL
14869: AND
14870: PUSH
14871: LD_INT 22
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 21
14883: PUSH
14884: LD_INT 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 33
14893: PUSH
14894: LD_INT 2
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: PUSH
14911: LD_INT 0
14913: EQUAL
14914: AND
14915: PUSH
14916: LD_EXP 23
14920: PUSH
14921: LD_INT 0
14923: EQUAL
14924: AND
14925: IFFALSE 15005
// begin firstTower = 1 ;
14927: LD_ADDR_EXP 23
14931: PUSH
14932: LD_INT 1
14934: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14935: LD_INT 22
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 25
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 69
14985: PUSH
14986: LD_EXP 1
14990: PUSH
14991: EMPTY
14992: LIST
14993: DIFF
14994: PPUSH
14995: LD_STRING D3b-Mech1-1
14997: PPUSH
14998: LD_STRING D3b-Mech1-1
15000: PPUSH
15001: CALL 5163 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 266
15014: PUSH
15015: LD_INT 0
15017: EQUAL
15018: PUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 255
15028: PUSH
15029: LD_INT 1
15031: EQUAL
15032: AND
15033: IFFALSE 15047
// SetBName ( building , theta ) ;
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_STRING theta
15042: PPUSH
15043: CALL_OW 500
// if GetSide ( building ) = 3 then
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 255
15056: PUSH
15057: LD_INT 3
15059: EQUAL
15060: IFFALSE 15134
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15062: LD_ADDR_EXP 31
15066: PUSH
15067: LD_EXP 31
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 3
15079: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15080: LD_ADDR_EXP 31
15084: PUSH
15085: LD_EXP 31
15089: PPUSH
15090: LD_INT 1
15092: PPUSH
15093: CALL_OW 3
15097: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15098: LD_ADDR_EXP 31
15102: PUSH
15103: LD_EXP 31
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 3
15115: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15116: LD_ADDR_EXP 31
15120: PUSH
15121: LD_EXP 31
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 3
15133: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 255
15143: PUSH
15144: LD_INT 3
15146: EQUAL
15147: PUSH
15148: LD_VAR 0 1
15152: PPUSH
15153: CALL_OW 266
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: PUSH
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 266
15171: PUSH
15172: LD_INT 2
15174: EQUAL
15175: OR
15176: PUSH
15177: LD_VAR 0 1
15181: PPUSH
15182: CALL_OW 266
15186: PUSH
15187: LD_INT 4
15189: EQUAL
15190: OR
15191: PUSH
15192: EMPTY
15193: LIST
15194: AND
15195: IFFALSE 15206
// ComUpgrade ( building ) ;
15197: LD_VAR 0 1
15201: PPUSH
15202: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 255
15215: PUSH
15216: LD_INT 3
15218: EQUAL
15219: PUSH
15220: LD_VAR 0 1
15224: PPUSH
15225: CALL_OW 266
15229: PUSH
15230: LD_INT 32
15232: EQUAL
15233: AND
15234: IFFALSE 15275
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15236: LD_VAR 0 1
15240: PPUSH
15241: LD_INT 42
15243: PUSH
15244: LD_INT 43
15246: PUSH
15247: LD_INT 44
15249: PUSH
15250: LD_INT 46
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 1
15261: PPUSH
15262: LD_INT 4
15264: PPUSH
15265: CALL_OW 12
15269: ARRAY
15270: PPUSH
15271: CALL_OW 208
// end ; end ;
15275: PPOPN 1
15277: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15278: LD_VAR 0 1
15282: PPUSH
15283: CALL_OW 255
15287: PUSH
15288: LD_INT 1
15290: EQUAL
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 247
15301: PUSH
15302: LD_INT 1
15304: EQUAL
15305: AND
15306: IFFALSE 15382
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 257
15317: PUSH
15318: LD_INT 1
15320: EQUAL
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 257
15331: PUSH
15332: LD_INT 2
15334: EQUAL
15335: OR
15336: PUSH
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 257
15346: PUSH
15347: LD_INT 3
15349: EQUAL
15350: OR
15351: PUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 257
15361: PUSH
15362: LD_INT 4
15364: EQUAL
15365: OR
15366: IFFALSE 15382
// unitLost = unitLost + 1 ;
15368: LD_ADDR_EXP 30
15372: PUSH
15373: LD_EXP 30
15377: PUSH
15378: LD_INT 1
15380: PLUS
15381: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 255
15391: PUSH
15392: LD_INT 3
15394: EQUAL
15395: PUSH
15396: LD_VAR 0 1
15400: PPUSH
15401: CALL_OW 247
15405: PUSH
15406: LD_INT 3
15408: EQUAL
15409: AND
15410: IFFALSE 16102
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 266
15421: PUSH
15422: LD_INT 31
15424: EQUAL
15425: PUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 266
15435: PUSH
15436: LD_INT 32
15438: EQUAL
15439: OR
15440: PUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 266
15450: PUSH
15451: LD_INT 36
15453: EQUAL
15454: OR
15455: PUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: CALL_OW 266
15465: PUSH
15466: LD_INT 0
15468: EQUAL
15469: OR
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 266
15480: PUSH
15481: LD_INT 24
15483: EQUAL
15484: OR
15485: PUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 266
15495: PUSH
15496: LD_INT 17
15498: EQUAL
15499: OR
15500: PUSH
15501: LD_VAR 0 1
15505: PPUSH
15506: CALL_OW 266
15510: PUSH
15511: LD_INT 25
15513: EQUAL
15514: OR
15515: PUSH
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL_OW 266
15525: PUSH
15526: LD_INT 19
15528: EQUAL
15529: OR
15530: PUSH
15531: LD_VAR 0 1
15535: PPUSH
15536: CALL_OW 266
15540: PUSH
15541: LD_INT 20
15543: EQUAL
15544: OR
15545: PUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 266
15555: PUSH
15556: LD_INT 18
15558: EQUAL
15559: OR
15560: PUSH
15561: LD_VAR 0 1
15565: PPUSH
15566: CALL_OW 266
15570: PUSH
15571: LD_INT 21
15573: EQUAL
15574: OR
15575: PUSH
15576: LD_VAR 0 1
15580: PPUSH
15581: CALL_OW 266
15585: PUSH
15586: LD_INT 23
15588: EQUAL
15589: OR
15590: PUSH
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 266
15600: PUSH
15601: LD_INT 16
15603: EQUAL
15604: OR
15605: PUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 266
15615: PUSH
15616: LD_INT 6
15618: EQUAL
15619: OR
15620: PUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 266
15630: PUSH
15631: LD_INT 29
15633: EQUAL
15634: OR
15635: PUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 266
15645: PUSH
15646: LD_INT 26
15648: EQUAL
15649: OR
15650: PUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 266
15660: PUSH
15661: LD_INT 30
15663: EQUAL
15664: OR
15665: PUSH
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 266
15675: PUSH
15676: LD_INT 28
15678: EQUAL
15679: OR
15680: PUSH
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 266
15690: PUSH
15691: LD_INT 27
15693: EQUAL
15694: OR
15695: PUSH
15696: LD_VAR 0 1
15700: PPUSH
15701: CALL_OW 266
15705: PUSH
15706: LD_INT 33
15708: EQUAL
15709: OR
15710: PUSH
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 266
15720: PUSH
15721: LD_INT 2
15723: EQUAL
15724: OR
15725: PUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 266
15735: PUSH
15736: LD_INT 4
15738: EQUAL
15739: OR
15740: IFFALSE 15826
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15742: LD_ADDR_EXP 31
15746: PUSH
15747: LD_EXP 31
15751: PUSH
15752: LD_VAR 0 1
15756: PPUSH
15757: CALL_OW 266
15761: ADD
15762: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15763: LD_ADDR_EXP 31
15767: PUSH
15768: LD_EXP 31
15772: PUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 250
15782: ADD
15783: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15784: LD_ADDR_EXP 31
15788: PUSH
15789: LD_EXP 31
15793: PUSH
15794: LD_VAR 0 1
15798: PPUSH
15799: CALL_OW 251
15803: ADD
15804: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15805: LD_ADDR_EXP 31
15809: PUSH
15810: LD_EXP 31
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 254
15824: ADD
15825: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL_OW 266
15835: PUSH
15836: LD_INT 1
15838: EQUAL
15839: IFFALSE 15918
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15841: LD_ADDR_EXP 31
15845: PUSH
15846: LD_EXP 31
15850: PUSH
15851: LD_INT 0
15853: ADD
15854: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15855: LD_ADDR_EXP 31
15859: PUSH
15860: LD_EXP 31
15864: PUSH
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 250
15874: ADD
15875: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15876: LD_ADDR_EXP 31
15880: PUSH
15881: LD_EXP 31
15885: PUSH
15886: LD_VAR 0 1
15890: PPUSH
15891: CALL_OW 251
15895: ADD
15896: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15897: LD_ADDR_EXP 31
15901: PUSH
15902: LD_EXP 31
15906: PUSH
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 254
15916: ADD
15917: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15918: LD_VAR 0 1
15922: PPUSH
15923: CALL_OW 266
15927: PUSH
15928: LD_INT 3
15930: EQUAL
15931: IFFALSE 16010
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15933: LD_ADDR_EXP 31
15937: PUSH
15938: LD_EXP 31
15942: PUSH
15943: LD_INT 2
15945: ADD
15946: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15947: LD_ADDR_EXP 31
15951: PUSH
15952: LD_EXP 31
15956: PUSH
15957: LD_VAR 0 1
15961: PPUSH
15962: CALL_OW 250
15966: ADD
15967: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15968: LD_ADDR_EXP 31
15972: PUSH
15973: LD_EXP 31
15977: PUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 251
15987: ADD
15988: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15989: LD_ADDR_EXP 31
15993: PUSH
15994: LD_EXP 31
15998: PUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 254
16008: ADD
16009: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 266
16019: PUSH
16020: LD_INT 5
16022: EQUAL
16023: IFFALSE 16102
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16025: LD_ADDR_EXP 31
16029: PUSH
16030: LD_EXP 31
16034: PUSH
16035: LD_INT 4
16037: ADD
16038: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16039: LD_ADDR_EXP 31
16043: PUSH
16044: LD_EXP 31
16048: PUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 250
16058: ADD
16059: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16060: LD_ADDR_EXP 31
16064: PUSH
16065: LD_EXP 31
16069: PUSH
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 251
16079: ADD
16080: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16081: LD_ADDR_EXP 31
16085: PUSH
16086: LD_EXP 31
16090: PUSH
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 254
16100: ADD
16101: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 257
16111: PUSH
16112: LD_INT 3
16114: EQUAL
16115: PUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL_OW 255
16125: PUSH
16126: LD_INT 3
16128: EQUAL
16129: AND
16130: PUSH
16131: LD_INT 21
16133: PPUSH
16134: CALL_OW 302
16138: AND
16139: PUSH
16140: LD_INT 21
16142: PPUSH
16143: CALL_OW 255
16147: PUSH
16148: LD_INT 3
16150: EQUAL
16151: AND
16152: IFFALSE 16220
// begin uc_side = 3 ;
16154: LD_ADDR_OWVAR 20
16158: PUSH
16159: LD_INT 3
16161: ST_TO_ADDR
// uc_nation = 3 ;
16162: LD_ADDR_OWVAR 21
16166: PUSH
16167: LD_INT 3
16169: ST_TO_ADDR
// hc_gallery :=  ;
16170: LD_ADDR_OWVAR 33
16174: PUSH
16175: LD_STRING 
16177: ST_TO_ADDR
// hc_name :=  ;
16178: LD_ADDR_OWVAR 26
16182: PUSH
16183: LD_STRING 
16185: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16186: LD_INT 0
16188: PPUSH
16189: LD_EXP 34
16193: PPUSH
16194: LD_EXP 35
16198: PPUSH
16199: CALL_OW 12
16203: PPUSH
16204: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16208: CALL_OW 44
16212: PPUSH
16213: LD_INT 21
16215: PPUSH
16216: CALL_OW 52
// end ; end ;
16220: PPOPN 1
16222: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16223: LD_INT 0
16225: PPUSH
16226: PPUSH
16227: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 264
16237: PUSH
16238: LD_INT 51
16240: EQUAL
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 255
16251: PUSH
16252: LD_INT 3
16254: EQUAL
16255: AND
16256: IFFALSE 16318
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16258: LD_ADDR_VAR 0 5
16262: PUSH
16263: LD_INT 2
16265: PPUSH
16266: CALL_OW 274
16270: PPUSH
16271: LD_INT 1
16273: PPUSH
16274: CALL_OW 275
16278: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16279: LD_INT 2
16281: PPUSH
16282: CALL_OW 274
16286: PPUSH
16287: LD_INT 1
16289: PPUSH
16290: LD_VAR 0 5
16294: PUSH
16295: LD_INT 100
16297: MINUS
16298: PPUSH
16299: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16303: LD_VAR 0 1
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: LD_INT 100
16313: PPUSH
16314: CALL_OW 291
// end ; if building = rufabsupp then
16318: LD_VAR 0 2
16322: PUSH
16323: LD_INT 17
16325: EQUAL
16326: IFFALSE 16340
// SetSide ( vehicle , 6 ) ;
16328: LD_VAR 0 1
16332: PPUSH
16333: LD_INT 6
16335: PPUSH
16336: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16340: LD_VAR 0 2
16344: PUSH
16345: LD_INT 21
16347: EQUAL
16348: PUSH
16349: LD_VAR 0 2
16353: PPUSH
16354: CALL_OW 255
16358: PUSH
16359: LD_INT 3
16361: EQUAL
16362: AND
16363: PUSH
16364: LD_VAR 0 1
16368: PPUSH
16369: CALL_OW 264
16373: PUSH
16374: LD_INT 42
16376: EQUAL
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 264
16387: PUSH
16388: LD_INT 43
16390: EQUAL
16391: OR
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 264
16402: PUSH
16403: LD_INT 44
16405: EQUAL
16406: OR
16407: PUSH
16408: EMPTY
16409: LIST
16410: AND
16411: IFFALSE 16429
// russianTanks = russianTanks ^ vehicle ;
16413: LD_ADDR_EXP 36
16417: PUSH
16418: LD_EXP 36
16422: PUSH
16423: LD_VAR 0 1
16427: ADD
16428: ST_TO_ADDR
// end ;
16429: PPOPN 5
16431: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 255
16441: PUSH
16442: LD_INT 3
16444: EQUAL
16445: IFFALSE 16461
// tamedApemans = tamedApemans + 1 ;
16447: LD_ADDR_EXP 32
16451: PUSH
16452: LD_EXP 32
16456: PUSH
16457: LD_INT 1
16459: PLUS
16460: ST_TO_ADDR
// end ;
16461: PPOPN 2
16463: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16464: LD_INT 0
16466: PPUSH
16467: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 255
16477: PUSH
16478: LD_INT 3
16480: EQUAL
16481: PUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 247
16491: PUSH
16492: LD_INT 2
16494: EQUAL
16495: AND
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 264
16506: PUSH
16507: LD_INT 42
16509: EQUAL
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 264
16520: PUSH
16521: LD_INT 43
16523: EQUAL
16524: OR
16525: PUSH
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 264
16535: PUSH
16536: LD_INT 44
16538: EQUAL
16539: OR
16540: PUSH
16541: EMPTY
16542: LIST
16543: AND
16544: IFFALSE 16684
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16546: LD_INT 21
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: CALL_OW 265
16558: PPUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 262
16568: PPUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 263
16578: PPUSH
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 264
16588: PPUSH
16589: CALL_OW 185
// for i in russianDamageTanks do
16593: LD_ADDR_VAR 0 2
16597: PUSH
16598: LD_EXP 37
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16639
// if i = unit then
16606: LD_VAR 0 2
16610: PUSH
16611: LD_VAR 0 1
16615: EQUAL
16616: IFFALSE 16637
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16618: LD_ADDR_EXP 37
16622: PUSH
16623: LD_EXP 37
16627: PUSH
16628: LD_VAR 0 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: DIFF
16636: ST_TO_ADDR
16637: GO 16603
16639: POP
16640: POP
// tmpMeh = UnitsInside ( unit ) ;
16641: LD_ADDR_VAR 0 3
16645: PUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 313
16655: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16656: LD_VAR 0 3
16660: PPUSH
16661: CALL_OW 121
// wait ( 0 0$01 ) ;
16665: LD_INT 35
16667: PPUSH
16668: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 21
16679: PPUSH
16680: CALL_OW 120
// end ; end ;
16684: PPOPN 3
16686: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16687: LD_VAR 0 1
16691: PUSH
16692: LD_INT 21
16694: EQUAL
16695: PUSH
16696: LD_VAR 0 2
16700: PPUSH
16701: CALL_OW 255
16705: PUSH
16706: LD_INT 3
16708: EQUAL
16709: AND
16710: IFFALSE 16724
// SetLives ( human , 1000 ) ;
16712: LD_VAR 0 2
16716: PPUSH
16717: LD_INT 1000
16719: PPUSH
16720: CALL_OW 234
// end ;
16724: PPOPN 2
16726: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
16727: LD_EXP 41
16731: NOT
16732: IFFALSE 16742
// firstCrateSpawn := true ;
16734: LD_ADDR_EXP 41
16738: PUSH
16739: LD_INT 1
16741: ST_TO_ADDR
// end ; end_of_file
16742: PPOPN 5
16744: END
// every 0 0$30 trigger cratesStatus = 1 do
16745: LD_EXP 38
16749: PUSH
16750: LD_INT 1
16752: EQUAL
16753: IFFALSE 16817
16755: GO 16757
16757: DISABLE
// begin enable ;
16758: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16759: LD_INT 350
16761: PUSH
16762: LD_INT 1050
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 1
16771: PPUSH
16772: LD_INT 2
16774: PPUSH
16775: CALL_OW 12
16779: ARRAY
16780: PPUSH
16781: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16785: LD_INT 4
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PPUSH
16798: LD_INT 2
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: PPUSH
16807: LD_INT 7
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 55
// end ;
16817: END
// every 1 1$0 trigger cratesStatus = 2 do
16818: LD_EXP 38
16822: PUSH
16823: LD_INT 2
16825: EQUAL
16826: IFFALSE 16890
16828: GO 16830
16830: DISABLE
// begin enable ;
16831: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16832: LD_INT 3150
16834: PUSH
16835: LD_INT 4550
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 2
16847: PPUSH
16848: CALL_OW 12
16852: ARRAY
16853: PPUSH
16854: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16858: LD_INT 2
16860: PUSH
16861: LD_INT 5
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 1
16870: PPUSH
16871: LD_INT 2
16873: PPUSH
16874: CALL_OW 12
16878: ARRAY
16879: PPUSH
16880: LD_INT 8
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: CALL_OW 55
// end ;
16890: END
// every 0 0$30 + 0 0$10 do
16891: GO 16893
16893: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16894: LD_INT 4
16896: PUSH
16897: LD_INT 5
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_INT 2
16909: PPUSH
16910: CALL_OW 12
16914: ARRAY
16915: PPUSH
16916: LD_INT 8
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 55
// Wait ( 0 0$15 ) ;
16926: LD_INT 525
16928: PPUSH
16929: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16933: LD_INT 4
16935: PUSH
16936: LD_INT 5
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 1
16945: PPUSH
16946: LD_INT 2
16948: PPUSH
16949: CALL_OW 12
16953: ARRAY
16954: PPUSH
16955: LD_INT 8
16957: PPUSH
16958: LD_INT 1
16960: PPUSH
16961: CALL_OW 55
// Wait ( 0 0$20 ) ;
16965: LD_INT 700
16967: PPUSH
16968: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16972: LD_INT 4
16974: PUSH
16975: LD_INT 5
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 1
16984: PPUSH
16985: LD_INT 2
16987: PPUSH
16988: CALL_OW 12
16992: ARRAY
16993: PPUSH
16994: LD_INT 8
16996: PPUSH
16997: LD_INT 1
16999: PPUSH
17000: CALL_OW 55
// end ; end_of_file
17004: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17005: LD_EXP 24
17009: PUSH
17010: LD_INT 1
17012: EQUAL
17013: IFFALSE 17314
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
17022: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17023: LD_ADDR_VAR 0 2
17027: PUSH
17028: LD_INT 22
17030: PUSH
17031: LD_INT 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 21
17040: PUSH
17041: LD_INT 3
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 30
17053: PUSH
17054: LD_INT 0
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 30
17063: PUSH
17064: LD_INT 1
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: ST_TO_ADDR
// for i in tmp do
17086: LD_ADDR_VAR 0 1
17090: PUSH
17091: LD_VAR 0 2
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17130
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17099: LD_ADDR_VAR 0 3
17103: PUSH
17104: LD_VAR 0 3
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 274
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 275
17126: PLUS
17127: ST_TO_ADDR
17128: GO 17096
17130: POP
17131: POP
// strings = [ ] ;
17132: LD_ADDR_EXP 27
17136: PUSH
17137: EMPTY
17138: ST_TO_ADDR
// if tmp = 0 then
17139: LD_VAR 0 2
17143: PUSH
17144: LD_INT 0
17146: EQUAL
17147: IFFALSE 17172
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17149: LD_ADDR_EXP 27
17153: PUSH
17154: LD_EXP 27
17158: PUSH
17159: LD_STRING #Am06-1
17161: PUSH
17162: LD_EXP 25
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: ADD
17171: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17172: LD_VAR 0 2
17176: PUSH
17177: LD_INT 0
17179: GREATER
17180: PUSH
17181: LD_EXP 25
17185: PUSH
17186: LD_VAR 0 3
17190: GREATER
17191: AND
17192: IFFALSE 17223
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17194: LD_ADDR_EXP 27
17198: PUSH
17199: LD_EXP 27
17203: PUSH
17204: LD_STRING #Am06-1
17206: PUSH
17207: LD_EXP 25
17211: PUSH
17212: LD_VAR 0 3
17216: MINUS
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: ADD
17222: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17223: LD_VAR 0 2
17227: PUSH
17228: LD_INT 0
17230: GREATER
17231: PUSH
17232: LD_EXP 25
17236: PUSH
17237: LD_VAR 0 3
17241: LESSEQUAL
17242: AND
17243: IFFALSE 17266
// strings = strings ^ [ #Am06-1 , 0 ] ;
17245: LD_ADDR_EXP 27
17249: PUSH
17250: LD_EXP 27
17254: PUSH
17255: LD_STRING #Am06-1
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: ADD
17265: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17266: LD_ADDR_EXP 26
17270: PUSH
17271: LD_EXP 26
17275: PUSH
17276: LD_INT 35
17278: MINUS
17279: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17280: LD_ADDR_EXP 27
17284: PUSH
17285: LD_EXP 27
17289: PUSH
17290: LD_STRING #Am06-2
17292: PUSH
17293: LD_EXP 26
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: ADD
17302: ST_TO_ADDR
// display_strings = strings ;
17303: LD_ADDR_OWVAR 47
17307: PUSH
17308: LD_EXP 27
17312: ST_TO_ADDR
// enable ;
17313: ENABLE
// end ; end_of_file
17314: PPOPN 3
17316: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17317: LD_INT 0
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
// j = 0 ;
17326: LD_ADDR_VAR 0 3
17330: PUSH
17331: LD_INT 0
17333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17334: LD_INT 35
17336: PPUSH
17337: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17341: LD_ADDR_VAR 0 2
17345: PUSH
17346: LD_INT 22
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 21
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 25
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 25
17381: PUSH
17382: LD_INT 2
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 25
17391: PUSH
17392: LD_INT 3
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 25
17401: PUSH
17402: LD_INT 4
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: PPUSH
17421: CALL_OW 69
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17533
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17429: LD_INT 22
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 2
17441: PUSH
17442: LD_INT 21
17444: PUSH
17445: LD_INT 1
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 21
17464: PUSH
17465: LD_INT 3
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 59
17474: PUSH
17475: EMPTY
17476: LIST
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 91
17487: PUSH
17488: LD_VAR 0 2
17492: PUSH
17493: LD_INT 25
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 69
17510: NOT
17511: IFFALSE 17531
// begin tmp = i ;
17513: LD_ADDR_VAR 0 4
17517: PUSH
17518: LD_VAR 0 2
17522: ST_TO_ADDR
// j = 1 ;
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: LD_INT 1
17530: ST_TO_ADDR
// end ; end ;
17531: GO 17426
17533: POP
17534: POP
// until j = 1 ;
17535: LD_VAR 0 3
17539: PUSH
17540: LD_INT 1
17542: EQUAL
17543: IFFALSE 17334
// blockSpawn = 1 ;
17545: LD_ADDR_EXP 29
17549: PUSH
17550: LD_INT 1
17552: ST_TO_ADDR
// uc_side = 2 ;
17553: LD_ADDR_OWVAR 20
17557: PUSH
17558: LD_INT 2
17560: ST_TO_ADDR
// uc_nation = 2 ;
17561: LD_ADDR_OWVAR 21
17565: PUSH
17566: LD_INT 2
17568: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17569: LD_ADDR_EXP 19
17573: PUSH
17574: LD_STRING Kurt
17576: PPUSH
17577: LD_INT 0
17579: PPUSH
17580: CALL 5100 0 2
17584: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17585: LD_EXP 19
17589: PPUSH
17590: LD_VAR 0 4
17594: PPUSH
17595: CALL_OW 250
17599: PPUSH
17600: LD_VAR 0 4
17604: PPUSH
17605: CALL_OW 251
17609: PPUSH
17610: LD_INT 5
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 50
// InGameOn ;
17620: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17624: LD_EXP 19
17628: PPUSH
17629: CALL_OW 87
// wait ( 0 0$2 ) ;
17633: LD_INT 70
17635: PPUSH
17636: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17640: LD_VAR 0 4
17644: PPUSH
17645: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17649: LD_VAR 0 4
17653: PPUSH
17654: CALL_OW 122
// wait ( 0 0$1 ) ;
17658: LD_INT 35
17660: PPUSH
17661: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17665: LD_EXP 19
17669: PPUSH
17670: LD_VAR 0 4
17674: PPUSH
17675: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17679: LD_VAR 0 4
17683: PPUSH
17684: LD_EXP 19
17688: PPUSH
17689: CALL_OW 119
// DialogueOn ;
17693: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17697: LD_EXP 19
17701: PPUSH
17702: LD_STRING D2-Kurt-1
17704: PPUSH
17705: CALL_OW 88
// if tmp = JMM then
17709: LD_VAR 0 4
17713: PUSH
17714: LD_EXP 1
17718: EQUAL
17719: IFFALSE 17811
// begin Say ( JMM , D2-JMM-1 ) ;
17721: LD_EXP 1
17725: PPUSH
17726: LD_STRING D2-JMM-1
17728: PPUSH
17729: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17733: LD_EXP 19
17737: PPUSH
17738: LD_STRING D2-Kurt-2
17740: PPUSH
17741: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17745: LD_EXP 1
17749: PPUSH
17750: LD_STRING D2-JMM-2
17752: PPUSH
17753: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17757: LD_EXP 19
17761: PPUSH
17762: LD_STRING D2-Kurt-3
17764: PPUSH
17765: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17769: LD_EXP 1
17773: PPUSH
17774: LD_STRING D2-JMM-3
17776: PPUSH
17777: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17781: LD_EXP 19
17785: PPUSH
17786: LD_STRING D2-Kurt-4
17788: PPUSH
17789: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17793: LD_EXP 1
17797: PPUSH
17798: LD_STRING D2-JMM-4
17800: PPUSH
17801: CALL_OW 88
// DialogueOff ;
17805: CALL_OW 7
// end else
17809: GO 18121
// begin if GetSex ( tmp ) = 1 then
17811: LD_VAR 0 4
17815: PPUSH
17816: CALL_OW 258
17820: PUSH
17821: LD_INT 1
17823: EQUAL
17824: IFFALSE 17838
// Say ( tmp , D2-Sol1-1 ) ;
17826: LD_VAR 0 4
17830: PPUSH
17831: LD_STRING D2-Sol1-1
17833: PPUSH
17834: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17838: LD_VAR 0 4
17842: PPUSH
17843: CALL_OW 258
17847: PUSH
17848: LD_INT 2
17850: EQUAL
17851: IFFALSE 17865
// Say ( tmp , D2-FSol1-1 ) ;
17853: LD_VAR 0 4
17857: PPUSH
17858: LD_STRING D2-FSol1-1
17860: PPUSH
17861: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17865: LD_EXP 19
17869: PPUSH
17870: LD_STRING D2-Kurt-2
17872: PPUSH
17873: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17877: LD_VAR 0 4
17881: PPUSH
17882: CALL_OW 258
17886: PUSH
17887: LD_INT 1
17889: EQUAL
17890: IFFALSE 17904
// Say ( tmp , D2-Sol1-2 ) ;
17892: LD_VAR 0 4
17896: PPUSH
17897: LD_STRING D2-Sol1-2
17899: PPUSH
17900: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 258
17913: PUSH
17914: LD_INT 2
17916: EQUAL
17917: IFFALSE 17931
// Say ( tmp , D2-FSol1-2 ) ;
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_STRING D2-FSol1-2
17926: PPUSH
17927: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17931: LD_EXP 19
17935: PPUSH
17936: LD_STRING D2-Kurt-3
17938: PPUSH
17939: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17943: LD_VAR 0 4
17947: PPUSH
17948: CALL_OW 258
17952: PUSH
17953: LD_INT 1
17955: EQUAL
17956: IFFALSE 17970
// Say ( tmp , D2-Sol1-3 ) ;
17958: LD_VAR 0 4
17962: PPUSH
17963: LD_STRING D2-Sol1-3
17965: PPUSH
17966: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17970: LD_VAR 0 4
17974: PPUSH
17975: CALL_OW 258
17979: PUSH
17980: LD_INT 2
17982: EQUAL
17983: IFFALSE 17997
// Say ( tmp , D2-FSol1-3 ) ;
17985: LD_VAR 0 4
17989: PPUSH
17990: LD_STRING D2-FSol1-3
17992: PPUSH
17993: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17997: LD_EXP 19
18001: PPUSH
18002: LD_STRING D2-Kurt-4
18004: PPUSH
18005: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18009: LD_VAR 0 4
18013: PPUSH
18014: CALL_OW 258
18018: PUSH
18019: LD_INT 1
18021: EQUAL
18022: IFFALSE 18036
// Say ( tmp , D2-Sol1-4 ) ;
18024: LD_VAR 0 4
18028: PPUSH
18029: LD_STRING D2-Sol1-4
18031: PPUSH
18032: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18036: LD_VAR 0 4
18040: PPUSH
18041: CALL_OW 258
18045: PUSH
18046: LD_INT 2
18048: EQUAL
18049: IFFALSE 18063
// Say ( tmp , D2-FSol1-4 ) ;
18051: LD_VAR 0 4
18055: PPUSH
18056: LD_STRING D2-FSol1-4
18058: PPUSH
18059: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18063: LD_VAR 0 4
18067: PPUSH
18068: CALL_OW 258
18072: PUSH
18073: LD_INT 1
18075: EQUAL
18076: IFFALSE 18090
// Say ( tmp , D2-Sol1-5 ) ;
18078: LD_VAR 0 4
18082: PPUSH
18083: LD_STRING D2-Sol1-5
18085: PPUSH
18086: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18090: LD_VAR 0 4
18094: PPUSH
18095: CALL_OW 258
18099: PUSH
18100: LD_INT 2
18102: EQUAL
18103: IFFALSE 18117
// Say ( tmp , D2-FSol1-5 ) ;
18105: LD_VAR 0 4
18109: PPUSH
18110: LD_STRING D2-FSol1-5
18112: PPUSH
18113: CALL_OW 88
// DialogueOff ;
18117: CALL_OW 7
// end ; dec = ShowQuery1 ;
18121: LD_ADDR_VAR 0 6
18125: PUSH
18126: CALL 5702 0 0
18130: ST_TO_ADDR
// if dec = 1 then
18131: LD_VAR 0 6
18135: PUSH
18136: LD_INT 1
18138: EQUAL
18139: IFFALSE 18181
// begin DialogueOn ;
18141: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18145: LD_EXP 19
18149: PPUSH
18150: LD_STRING D2a-Kurt-1
18152: PPUSH
18153: CALL_OW 88
// DialogueOff ;
18157: CALL_OW 7
// InGameOff ;
18161: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18165: LD_INT 1
18167: PPUSH
18168: LD_INT 2
18170: PPUSH
18171: LD_INT 2
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 80
// end ; if dec = 2 then
18181: LD_VAR 0 6
18185: PUSH
18186: LD_INT 2
18188: EQUAL
18189: IFFALSE 18689
// begin DialogueOn ;
18191: CALL_OW 6
// if tmp = JMM then
18195: LD_VAR 0 4
18199: PUSH
18200: LD_EXP 1
18204: EQUAL
18205: IFFALSE 18261
// begin Say ( JMM , D2b-JMM-1 ) ;
18207: LD_EXP 1
18211: PPUSH
18212: LD_STRING D2b-JMM-1
18214: PPUSH
18215: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18219: LD_EXP 19
18223: PPUSH
18224: LD_STRING D2b-Kurt-1
18226: PPUSH
18227: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18231: LD_EXP 1
18235: PPUSH
18236: LD_STRING D2b-JMM-2
18238: PPUSH
18239: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18243: LD_EXP 19
18247: PPUSH
18248: LD_STRING D2b-Kurt-2
18250: PPUSH
18251: CALL_OW 88
// DialogueOff ;
18255: CALL_OW 7
// end else
18259: GO 18451
// begin if GetSex ( tmp ) = 1 then
18261: LD_VAR 0 4
18265: PPUSH
18266: CALL_OW 258
18270: PUSH
18271: LD_INT 1
18273: EQUAL
18274: IFFALSE 18288
// Say ( tmp , D2b-Sol1-1 ) ;
18276: LD_VAR 0 4
18280: PPUSH
18281: LD_STRING D2b-Sol1-1
18283: PPUSH
18284: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18288: LD_VAR 0 4
18292: PPUSH
18293: CALL_OW 258
18297: PUSH
18298: LD_INT 2
18300: EQUAL
18301: IFFALSE 18315
// Say ( tmp , D2b-FSol1-1 ) ;
18303: LD_VAR 0 4
18307: PPUSH
18308: LD_STRING D2b-FSol1-1
18310: PPUSH
18311: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18315: LD_EXP 19
18319: PPUSH
18320: LD_STRING D2b-Kurt-1
18322: PPUSH
18323: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18327: LD_VAR 0 4
18331: PPUSH
18332: CALL_OW 258
18336: PUSH
18337: LD_INT 1
18339: EQUAL
18340: IFFALSE 18354
// Say ( tmp , D2b-Sol1-2 ) ;
18342: LD_VAR 0 4
18346: PPUSH
18347: LD_STRING D2b-Sol1-2
18349: PPUSH
18350: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 2
18366: EQUAL
18367: IFFALSE 18381
// Say ( tmp , D2b-FSol1-2 ) ;
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2b-FSol1-2
18376: PPUSH
18377: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18381: LD_EXP 19
18385: PPUSH
18386: LD_STRING D2b-Kurt-2
18388: PPUSH
18389: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18393: LD_VAR 0 4
18397: PPUSH
18398: CALL_OW 258
18402: PUSH
18403: LD_INT 1
18405: EQUAL
18406: IFFALSE 18420
// Say ( tmp , D2c-Sol1-2 ) ;
18408: LD_VAR 0 4
18412: PPUSH
18413: LD_STRING D2c-Sol1-2
18415: PPUSH
18416: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18420: LD_VAR 0 4
18424: PPUSH
18425: CALL_OW 258
18429: PUSH
18430: LD_INT 2
18432: EQUAL
18433: IFFALSE 18447
// Say ( tmp , D2c-FSol1-2 ) ;
18435: LD_VAR 0 4
18439: PPUSH
18440: LD_STRING D2c-FSol1-2
18442: PPUSH
18443: CALL_OW 88
// DialogueOff ;
18447: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18451: LD_ADDR_VAR 0 7
18455: PUSH
18456: CALL 5776 0 0
18460: ST_TO_ADDR
// if dec2 = 1 then
18461: LD_VAR 0 7
18465: PUSH
18466: LD_INT 1
18468: EQUAL
18469: IFFALSE 18511
// begin DialogueOn ;
18471: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18475: LD_EXP 19
18479: PPUSH
18480: LD_STRING D2a-Kurt-1
18482: PPUSH
18483: CALL_OW 88
// DialogueOff ;
18487: CALL_OW 7
// InGameOff ;
18491: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18495: LD_INT 1
18497: PPUSH
18498: LD_INT 2
18500: PPUSH
18501: LD_INT 2
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 80
// end ; if dec2 = 2 then
18511: LD_VAR 0 7
18515: PUSH
18516: LD_INT 2
18518: EQUAL
18519: IFFALSE 18689
// begin if tmp = JMM then
18521: LD_VAR 0 4
18525: PUSH
18526: LD_EXP 1
18530: EQUAL
18531: IFFALSE 18591
// begin DialogueOn ;
18533: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18537: LD_EXP 1
18541: PPUSH
18542: LD_STRING D2c-JMM-1
18544: PPUSH
18545: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18549: LD_EXP 19
18553: PPUSH
18554: LD_STRING D2c-Kurt-1
18556: PPUSH
18557: CALL_OW 88
// DialogueOff ;
18561: CALL_OW 7
// InGameOff ;
18565: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18569: LD_EXP 19
18573: PPUSH
18574: LD_INT 9
18576: PPUSH
18577: CALL_OW 113
// readyToEscape = 1 ;
18581: LD_ADDR_EXP 21
18585: PUSH
18586: LD_INT 1
18588: ST_TO_ADDR
// end else
18589: GO 18689
// begin DialogueOn ;
18591: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18595: LD_VAR 0 4
18599: PPUSH
18600: CALL_OW 258
18604: PUSH
18605: LD_INT 1
18607: EQUAL
18608: IFFALSE 18622
// Say ( tmp , D2c-Sol1-1 ) ;
18610: LD_VAR 0 4
18614: PPUSH
18615: LD_STRING D2c-Sol1-1
18617: PPUSH
18618: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18622: LD_VAR 0 4
18626: PPUSH
18627: CALL_OW 258
18631: PUSH
18632: LD_INT 2
18634: EQUAL
18635: IFFALSE 18649
// Say ( tmp , D2c-FSol1-1 ) ;
18637: LD_VAR 0 4
18641: PPUSH
18642: LD_STRING D2c-FSol1-1
18644: PPUSH
18645: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18649: LD_EXP 19
18653: PPUSH
18654: LD_STRING D2c-Kurt-1
18656: PPUSH
18657: CALL_OW 88
// DialogueOff ;
18661: CALL_OW 7
// InGameOff ;
18665: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18669: LD_EXP 19
18673: PPUSH
18674: LD_INT 9
18676: PPUSH
18677: CALL_OW 113
// readyToEscape = 1 ;
18681: LD_ADDR_EXP 21
18685: PUSH
18686: LD_INT 1
18688: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18689: LD_VAR 0 6
18693: PUSH
18694: LD_INT 3
18696: EQUAL
18697: IFFALSE 18871
// begin DialogueOn ;
18699: CALL_OW 6
// if tmp = JMM then
18703: LD_VAR 0 4
18707: PUSH
18708: LD_EXP 1
18712: EQUAL
18713: IFFALSE 18773
// begin DialogueOn ;
18715: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18719: LD_EXP 1
18723: PPUSH
18724: LD_STRING D2c-JMM-1
18726: PPUSH
18727: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18731: LD_EXP 19
18735: PPUSH
18736: LD_STRING D2c-Kurt-1
18738: PPUSH
18739: CALL_OW 88
// DialogueOff ;
18743: CALL_OW 7
// InGameOff ;
18747: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18751: LD_EXP 19
18755: PPUSH
18756: LD_INT 9
18758: PPUSH
18759: CALL_OW 113
// readyToEscape = 1 ;
18763: LD_ADDR_EXP 21
18767: PUSH
18768: LD_INT 1
18770: ST_TO_ADDR
// end else
18771: GO 18871
// begin DialogueOn ;
18773: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18777: LD_VAR 0 4
18781: PPUSH
18782: CALL_OW 258
18786: PUSH
18787: LD_INT 1
18789: EQUAL
18790: IFFALSE 18804
// Say ( tmp , D2c-Sol1-1 ) ;
18792: LD_VAR 0 4
18796: PPUSH
18797: LD_STRING D2c-Sol1-1
18799: PPUSH
18800: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18804: LD_VAR 0 4
18808: PPUSH
18809: CALL_OW 258
18813: PUSH
18814: LD_INT 2
18816: EQUAL
18817: IFFALSE 18831
// Say ( tmp , D2c-FSol1-1 ) ;
18819: LD_VAR 0 4
18823: PPUSH
18824: LD_STRING D2c-FSol1-1
18826: PPUSH
18827: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18831: LD_EXP 19
18835: PPUSH
18836: LD_STRING D2c-Kurt-1
18838: PPUSH
18839: CALL_OW 88
// DialogueOff ;
18843: CALL_OW 7
// InGameOff ;
18847: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18851: LD_EXP 19
18855: PPUSH
18856: LD_INT 9
18858: PPUSH
18859: CALL_OW 113
// readyToEscape = 1 ;
18863: LD_ADDR_EXP 21
18867: PUSH
18868: LD_INT 1
18870: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18871: LD_ADDR_EXP 29
18875: PUSH
18876: LD_INT 0
18878: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18879: LD_INT 35
18881: PPUSH
18882: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
18886: LD_EXP 19
18890: PPUSH
18891: LD_INT 9
18893: PPUSH
18894: CALL_OW 308
18898: PUSH
18899: LD_EXP 21
18903: AND
18904: PUSH
18905: LD_EXP 19
18909: PPUSH
18910: CALL_OW 301
18914: OR
18915: IFFALSE 18879
// if IsDead ( Kurt ) then
18917: LD_EXP 19
18921: PPUSH
18922: CALL_OW 301
18926: IFFALSE 18930
// exit ;
18928: GO 18999
// RemoveUnit ( Kurt ) ;
18930: LD_EXP 19
18934: PPUSH
18935: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
18939: LD_EXP 19
18943: PPUSH
18944: LD_STRING Kurt
18946: PPUSH
18947: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
18951: LD_INT 1
18953: PPUSH
18954: LD_INT 2
18956: PPUSH
18957: CALL_OW 81
18961: PUSH
18962: LD_INT 0
18964: EQUAL
18965: IFFALSE 18975
// KurtStatus = 1 ;
18967: LD_ADDR_EXP 20
18971: PUSH
18972: LD_INT 1
18974: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
18975: LD_INT 1
18977: PPUSH
18978: LD_INT 2
18980: PPUSH
18981: CALL_OW 81
18985: PUSH
18986: LD_INT 2
18988: EQUAL
18989: IFFALSE 18999
// KurtStatus = 2 ;
18991: LD_ADDR_EXP 20
18995: PUSH
18996: LD_INT 2
18998: ST_TO_ADDR
// end ; end_of_file
18999: LD_VAR 0 1
19003: RET
// every 0 0$1 do
19004: GO 19006
19006: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19007: LD_INT 3
19009: PPUSH
19010: LD_INT 32
19012: PPUSH
19013: LD_INT 3
19015: PPUSH
19016: CALL 5831 0 3
19020: END
// every 0 0$1 do
19021: GO 19023
19023: DISABLE
// begin enable ;
19024: ENABLE
// RepairBuilding ( 3 , rudepo , RussianBase ) ;
19025: LD_INT 3
19027: PPUSH
19028: LD_INT 2
19030: PPUSH
19031: LD_INT 11
19033: PPUSH
19034: CALL 5916 0 3
// if disableHealAI = 0 then
19038: LD_EXP 33
19042: PUSH
19043: LD_INT 0
19045: EQUAL
19046: IFFALSE 19064
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
19048: LD_INT 3
19050: PPUSH
19051: LD_INT 10
19053: PPUSH
19054: LD_INT 11
19056: PPUSH
19057: LD_INT 32
19059: PPUSH
19060: CALL 6233 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19064: LD_INT 3
19066: PPUSH
19067: LD_INT 51
19069: PPUSH
19070: LD_INT 7
19072: PPUSH
19073: CALL 8137 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
19077: LD_INT 3
19079: PPUSH
19080: LD_INT 14
19082: PPUSH
19083: LD_INT 121
19085: PPUSH
19086: LD_INT 100
19088: PPUSH
19089: CALL 7374 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
19093: LD_INT 3
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: CALL 6862 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19103: LD_INT 3
19105: PPUSH
19106: LD_EXP 31
19110: PPUSH
19111: CALL 8280 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
19115: LD_INT 3
19117: PPUSH
19118: LD_INT 8
19120: PUSH
19121: LD_INT 67
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: PPUSH
19131: LD_INT 2
19133: PPUSH
19134: CALL_OW 12
19138: ARRAY
19139: PPUSH
19140: LD_INT 11
19142: PPUSH
19143: CALL 8486 0 3
// AttackNearBuildings ( 3 , 1 ) ;
19147: LD_INT 3
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: CALL 8843 0 2
// end ;
19157: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19158: LD_INT 22
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 21
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 55
19180: PUSH
19181: EMPTY
19182: LIST
19183: PUSH
19184: LD_INT 3
19186: PUSH
19187: LD_INT 34
19189: PUSH
19190: LD_INT 51
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: PUSH
19212: LD_INT 0
19214: EQUAL
19215: PUSH
19216: LD_INT 21
19218: PPUSH
19219: CALL_OW 255
19223: PUSH
19224: LD_INT 3
19226: EQUAL
19227: AND
19228: PUSH
19229: LD_INT 21
19231: PPUSH
19232: CALL_OW 302
19236: AND
19237: PUSH
19238: LD_INT 2
19240: PPUSH
19241: CALL_OW 255
19245: PUSH
19246: LD_INT 3
19248: EQUAL
19249: AND
19250: PUSH
19251: LD_INT 2
19253: PPUSH
19254: CALL_OW 302
19258: AND
19259: IFFALSE 19443
19261: GO 19263
19263: DISABLE
// begin enable ;
19264: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
19265: LD_INT 2
19267: PPUSH
19268: CALL_OW 274
19272: PPUSH
19273: LD_INT 1
19275: PPUSH
19276: LD_INT 1000
19278: PPUSH
19279: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19283: LD_INT 3
19285: PPUSH
19286: LD_INT 21
19288: PPUSH
19289: LD_INT 5
19291: PUSH
19292: LD_INT 6
19294: PUSH
19295: LD_INT 6
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: LIST
19302: PUSH
19303: LD_OWVAR 67
19307: ARRAY
19308: PPUSH
19309: LD_INT 43
19311: PUSH
19312: LD_INT 43
19314: PUSH
19315: LD_INT 44
19317: PUSH
19318: LD_INT 44
19320: PUSH
19321: LD_INT 46
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: PUSH
19331: LD_INT 43
19333: PUSH
19334: LD_INT 43
19336: PUSH
19337: LD_INT 44
19339: PUSH
19340: LD_INT 44
19342: PUSH
19343: LD_INT 44
19345: PUSH
19346: LD_INT 46
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 44
19359: PUSH
19360: LD_INT 44
19362: PUSH
19363: LD_INT 44
19365: PUSH
19366: LD_INT 44
19368: PUSH
19369: LD_INT 46
19371: PUSH
19372: LD_INT 46
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: PUSH
19388: LD_OWVAR 67
19392: ARRAY
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: LD_INT 22
19402: PUSH
19403: LD_INT 22
19405: PUSH
19406: LD_INT 24
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: PPUSH
19416: LD_INT 2
19418: PPUSH
19419: CALL_OW 12
19423: ARRAY
19424: PUSH
19425: LD_INT 24
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: PUSH
19433: LD_OWVAR 67
19437: ARRAY
19438: PPUSH
19439: CALL 6708 0 7
// end ;
19443: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19444: LD_INT 17
19446: PPUSH
19447: CALL_OW 255
19451: PUSH
19452: LD_INT 3
19454: EQUAL
19455: PUSH
19456: LD_INT 17
19458: PPUSH
19459: CALL_OW 302
19463: AND
19464: PUSH
19465: LD_INT 2
19467: PPUSH
19468: CALL_OW 255
19472: PUSH
19473: LD_INT 3
19475: EQUAL
19476: AND
19477: PUSH
19478: LD_INT 2
19480: PPUSH
19481: CALL_OW 302
19485: AND
19486: IFFALSE 19553
19488: GO 19490
19490: DISABLE
// begin enable ;
19491: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19492: LD_INT 17
19494: PPUSH
19495: LD_INT 22
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: LD_INT 42
19506: PUSH
19507: LD_INT 43
19509: PUSH
19510: LD_INT 44
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 1
19520: PPUSH
19521: LD_INT 3
19523: PPUSH
19524: CALL_OW 12
19528: ARRAY
19529: PPUSH
19530: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19534: LD_INT 17
19536: PPUSH
19537: LD_INT 22
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: LD_INT 51
19548: PPUSH
19549: CALL_OW 185
// end ;
19553: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19554: LD_INT 17
19556: PPUSH
19557: CALL_OW 302
19561: PUSH
19562: LD_INT 17
19564: PPUSH
19565: CALL_OW 255
19569: PUSH
19570: LD_INT 3
19572: EQUAL
19573: AND
19574: PUSH
19575: LD_INT 2
19577: PPUSH
19578: CALL_OW 302
19582: AND
19583: PUSH
19584: LD_INT 2
19586: PPUSH
19587: CALL_OW 255
19591: PUSH
19592: LD_INT 3
19594: EQUAL
19595: AND
19596: PUSH
19597: LD_INT 17
19599: PPUSH
19600: CALL_OW 313
19604: NOT
19605: AND
19606: IFFALSE 19700
19608: GO 19610
19610: DISABLE
19611: LD_INT 0
19613: PPUSH
// begin for i = 1 to 6 do
19614: LD_ADDR_VAR 0 1
19618: PUSH
19619: DOUBLE
19620: LD_INT 1
19622: DEC
19623: ST_TO_ADDR
19624: LD_INT 6
19626: PUSH
19627: FOR_TO
19628: IFFALSE 19698
// begin uc_side = 3 ;
19630: LD_ADDR_OWVAR 20
19634: PUSH
19635: LD_INT 3
19637: ST_TO_ADDR
// uc_nation = 3 ;
19638: LD_ADDR_OWVAR 21
19642: PUSH
19643: LD_INT 3
19645: ST_TO_ADDR
// hc_gallery :=  ;
19646: LD_ADDR_OWVAR 33
19650: PUSH
19651: LD_STRING 
19653: ST_TO_ADDR
// hc_name :=  ;
19654: LD_ADDR_OWVAR 26
19658: PUSH
19659: LD_STRING 
19661: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19662: LD_INT 0
19664: PPUSH
19665: LD_EXP 34
19669: PPUSH
19670: LD_EXP 35
19674: PPUSH
19675: CALL_OW 12
19679: PPUSH
19680: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19684: CALL_OW 44
19688: PPUSH
19689: LD_INT 17
19691: PPUSH
19692: CALL_OW 52
// end ;
19696: GO 19627
19698: POP
19699: POP
// end ;
19700: PPOPN 1
19702: END
// every 2 2$0 do var i , j ;
19703: GO 19705
19705: DISABLE
19706: LD_INT 0
19708: PPUSH
19709: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19710: LD_INT 14700
19712: PUSH
19713: LD_INT 33600
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 1
19722: PPUSH
19723: LD_INT 2
19725: PPUSH
19726: CALL_OW 12
19730: ARRAY
19731: PPUSH
19732: CALL_OW 67
// disableHealAI = 1 ;
19736: LD_ADDR_EXP 33
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19744: LD_ADDR_VAR 0 1
19748: PUSH
19749: LD_INT 22
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 25
19761: PUSH
19762: LD_INT 4
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PPUSH
19773: CALL_OW 69
19777: PUSH
19778: FOR_IN
19779: IFFALSE 19792
// ComExitBuilding ( i ) ;
19781: LD_VAR 0 1
19785: PPUSH
19786: CALL_OW 122
19790: GO 19778
19792: POP
19793: POP
// wait ( 0 0$1 ) ;
19794: LD_INT 35
19796: PPUSH
19797: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19801: LD_INT 35
19803: PPUSH
19804: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_INT 22
19815: PUSH
19816: LD_INT 3
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 25
19825: PUSH
19826: LD_INT 4
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: PUSH
19842: FOR_IN
19843: IFFALSE 19920
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19845: LD_ADDR_VAR 0 2
19849: PUSH
19850: LD_INT 19
19852: PPUSH
19853: LD_INT 22
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 25
19865: PUSH
19866: LD_INT 12
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PPUSH
19877: CALL_OW 70
19881: PUSH
19882: FOR_IN
19883: IFFALSE 19916
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19885: LD_VAR 0 1
19889: PPUSH
19890: LD_VAR 0 2
19894: PPUSH
19895: CALL_OW 250
19899: PPUSH
19900: LD_VAR 0 2
19904: PPUSH
19905: CALL_OW 251
19909: PPUSH
19910: CALL_OW 191
// end ;
19914: GO 19882
19916: POP
19917: POP
// end ;
19918: GO 19842
19920: POP
19921: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19922: LD_INT 22
19924: PUSH
19925: LD_INT 3
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 25
19934: PUSH
19935: LD_INT 4
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PPUSH
19946: CALL_OW 69
19950: PUSH
19951: LD_INT 0
19953: EQUAL
19954: PUSH
19955: LD_EXP 32
19959: PUSH
19960: LD_INT 6
19962: PUSH
19963: LD_INT 7
19965: PUSH
19966: LD_INT 8
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: PUSH
19974: LD_OWVAR 67
19978: ARRAY
19979: GREATEREQUAL
19980: OR
19981: PUSH
19982: LD_INT 19
19984: PPUSH
19985: LD_INT 22
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 25
19997: PUSH
19998: LD_INT 12
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PPUSH
20009: CALL_OW 70
20013: PUSH
20014: LD_INT 0
20016: EQUAL
20017: OR
20018: IFFALSE 19801
// disableHealAI = 0 ;
20020: LD_ADDR_EXP 33
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20028: LD_ADDR_VAR 0 1
20032: PUSH
20033: LD_INT 22
20035: PUSH
20036: LD_INT 3
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 25
20045: PUSH
20046: LD_INT 12
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: PUSH
20062: FOR_IN
20063: IFFALSE 20079
// SetClass ( i , 16 ) ;
20065: LD_VAR 0 1
20069: PPUSH
20070: LD_INT 16
20072: PPUSH
20073: CALL_OW 336
20077: GO 20062
20079: POP
20080: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20081: LD_ADDR_VAR 0 1
20085: PUSH
20086: LD_INT 22
20088: PUSH
20089: LD_INT 3
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 25
20098: PUSH
20099: LD_INT 4
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PPUSH
20110: CALL_OW 69
20114: PUSH
20115: FOR_IN
20116: IFFALSE 20135
// ComMoveXY ( i , 113 , 94 ) ;
20118: LD_VAR 0 1
20122: PPUSH
20123: LD_INT 113
20125: PPUSH
20126: LD_INT 94
20128: PPUSH
20129: CALL_OW 111
20133: GO 20115
20135: POP
20136: POP
// end ;
20137: PPOPN 2
20139: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20140: LD_INT 21
20142: PPUSH
20143: CALL_OW 255
20147: PUSH
20148: LD_INT 3
20150: EQUAL
20151: PUSH
20152: LD_INT 21
20154: PPUSH
20155: CALL_OW 302
20159: AND
20160: PUSH
20161: LD_INT 22
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 34
20173: PUSH
20174: LD_INT 51
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PUSH
20190: LD_INT 0
20192: EQUAL
20193: AND
20194: IFFALSE 20226
20196: GO 20198
20198: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20199: LD_INT 21
20201: PPUSH
20202: LD_INT 23
20204: PPUSH
20205: LD_INT 1
20207: PPUSH
20208: LD_INT 1
20210: PPUSH
20211: LD_INT 51
20213: PPUSH
20214: CALL_OW 185
// wait ( 5 5$0 ) ;
20218: LD_INT 10500
20220: PPUSH
20221: CALL_OW 67
// enable ;
20225: ENABLE
// end ; end_of_file
20226: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
20227: LD_EXP 26
20231: PUSH
20232: LD_INT 0
20234: LESSEQUAL
20235: IFFALSE 20384
20237: GO 20239
20239: DISABLE
20240: LD_INT 0
20242: PPUSH
20243: PPUSH
20244: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20245: LD_ADDR_VAR 0 2
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 1
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 21
20262: PUSH
20263: LD_INT 3
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 2
20272: PUSH
20273: LD_INT 30
20275: PUSH
20276: LD_INT 0
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 30
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ST_TO_ADDR
// for i in tmp do
20308: LD_ADDR_VAR 0 1
20312: PUSH
20313: LD_VAR 0 2
20317: PUSH
20318: FOR_IN
20319: IFFALSE 20352
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20321: LD_ADDR_VAR 0 3
20325: PUSH
20326: LD_VAR 0 3
20330: PUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 274
20340: PPUSH
20341: LD_INT 1
20343: PPUSH
20344: CALL_OW 275
20348: PLUS
20349: ST_TO_ADDR
20350: GO 20318
20352: POP
20353: POP
// if yourCrates >= needCrates then
20354: LD_VAR 0 3
20358: PUSH
20359: LD_EXP 25
20363: GREATEREQUAL
20364: IFFALSE 20377
// begin FinishMission ( yourCrates ) ;
20366: LD_VAR 0 3
20370: PPUSH
20371: CALL 20387 0 1
// end else
20375: GO 20384
// begin YouLost ( matmin ) ;
20377: LD_STRING matmin
20379: PPUSH
20380: CALL_OW 104
// end ; end ;
20384: PPOPN 3
20386: END
// export function FinishMission ( crates ) ; begin
20387: LD_INT 0
20389: PPUSH
// if crates + 100 > crates then
20390: LD_VAR 0 1
20394: PUSH
20395: LD_INT 100
20397: PLUS
20398: PUSH
20399: LD_VAR 0 1
20403: GREATER
20404: IFFALSE 20428
// begin AddMedal ( cans , 1 ) ;
20406: LD_STRING cans
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20416: LD_INT 1
20418: PPUSH
20419: LD_STRING 06_crates_1
20421: PPUSH
20422: CALL_OW 39
// end else
20426: GO 20449
// begin AddMedal ( cans , - 1 ) ;
20428: LD_STRING cans
20430: PPUSH
20431: LD_INT 1
20433: NEG
20434: PPUSH
20435: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20439: LD_INT 0
20441: PPUSH
20442: LD_STRING 06_crates_1
20444: PPUSH
20445: CALL_OW 39
// end ; if unitLost < 2 then
20449: LD_EXP 30
20453: PUSH
20454: LD_INT 2
20456: LESS
20457: IFFALSE 20471
// begin AddMedal ( people , 1 ) ;
20459: LD_STRING people
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: CALL_OW 101
// end else
20469: GO 20482
// begin AddMedal ( people , - 1 ) ;
20471: LD_STRING people
20473: PPUSH
20474: LD_INT 1
20476: NEG
20477: PPUSH
20478: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20482: LD_EXP 28
20486: PPUSH
20487: LD_STRING 06_remoteVehs_1
20489: PPUSH
20490: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20494: LD_EXP 28
20498: PUSH
20499: LD_INT 1
20501: EQUAL
20502: IFFALSE 20516
// begin AddMedal ( remote , 1 ) ;
20504: LD_STRING remote
20506: PPUSH
20507: LD_INT 1
20509: PPUSH
20510: CALL_OW 101
// end else
20514: GO 20556
// begin if GetTech ( 18 , 1 ) = state_enabled then
20516: LD_INT 18
20518: PPUSH
20519: LD_INT 1
20521: PPUSH
20522: CALL_OW 321
20526: PUSH
20527: LD_INT 1
20529: EQUAL
20530: IFFALSE 20545
// begin AddMedal ( remote , - 1 ) ;
20532: LD_STRING remote
20534: PPUSH
20535: LD_INT 1
20537: NEG
20538: PPUSH
20539: CALL_OW 101
// end else
20543: GO 20556
// begin AddMedal ( remote , - 2 ) ;
20545: LD_STRING remote
20547: PPUSH
20548: LD_INT 2
20550: NEG
20551: PPUSH
20552: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20556: LD_EXP 20
20560: PPUSH
20561: LD_STRING 06_KurtStatus_1
20563: PPUSH
20564: CALL_OW 39
// GiveMedals ( Main ) ;
20568: LD_STRING Main
20570: PPUSH
20571: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20575: LD_INT 50
20577: PUSH
20578: EMPTY
20579: LIST
20580: PUSH
20581: LD_INT 22
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 21
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 25
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 25
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 25
20626: PUSH
20627: LD_INT 3
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: LD_INT 25
20636: PUSH
20637: LD_INT 4
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: PPUSH
20662: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20666: LD_EXP 1
20670: PPUSH
20671: LD_EXP 43
20675: PUSH
20676: LD_STRING JMM
20678: STR
20679: PPUSH
20680: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20684: LD_EXP 2
20688: PPUSH
20689: LD_EXP 43
20693: PUSH
20694: LD_STRING Lisa
20696: STR
20697: PPUSH
20698: CALL 5319 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20702: LD_EXP 3
20706: PPUSH
20707: LD_EXP 43
20711: PUSH
20712: LD_STRING Bobby
20714: STR
20715: PPUSH
20716: CALL 5319 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20720: LD_EXP 4
20724: PPUSH
20725: LD_EXP 43
20729: PUSH
20730: LD_STRING Cyrus
20732: STR
20733: PPUSH
20734: CALL 5319 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20738: LD_EXP 5
20742: PPUSH
20743: LD_EXP 43
20747: PUSH
20748: LD_STRING Frank
20750: STR
20751: PPUSH
20752: CALL 5319 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20756: LD_EXP 6
20760: PPUSH
20761: LD_EXP 43
20765: PUSH
20766: LD_STRING Brown
20768: STR
20769: PPUSH
20770: CALL 5319 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20774: LD_EXP 7
20778: PPUSH
20779: LD_EXP 43
20783: PUSH
20784: LD_STRING Donaldson
20786: STR
20787: PPUSH
20788: CALL 5319 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20792: LD_EXP 8
20796: PPUSH
20797: LD_EXP 43
20801: PUSH
20802: LD_STRING Gladstone
20804: STR
20805: PPUSH
20806: CALL 5319 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20810: LD_EXP 9
20814: PPUSH
20815: LD_EXP 43
20819: PUSH
20820: LD_STRING Denis
20822: STR
20823: PPUSH
20824: CALL 5319 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20828: LD_EXP 15
20832: PPUSH
20833: LD_EXP 43
20837: PUSH
20838: LD_STRING Joan
20840: STR
20841: PPUSH
20842: CALL 5319 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20846: LD_EXP 16
20850: PPUSH
20851: LD_STRING 06_JoanStatus_1
20853: PPUSH
20854: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20858: LD_INT 50
20860: PUSH
20861: EMPTY
20862: LIST
20863: PUSH
20864: LD_INT 22
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 21
20876: PUSH
20877: LD_INT 1
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 25
20889: PUSH
20890: LD_INT 1
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 25
20909: PUSH
20910: LD_INT 3
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 25
20919: PUSH
20920: LD_INT 4
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PPUSH
20940: CALL_OW 69
20944: PUSH
20945: LD_EXP 1
20949: PUSH
20950: LD_EXP 2
20954: PUSH
20955: LD_EXP 3
20959: PUSH
20960: LD_EXP 4
20964: PUSH
20965: LD_EXP 5
20969: PUSH
20970: LD_EXP 6
20974: PUSH
20975: LD_EXP 7
20979: PUSH
20980: LD_EXP 8
20984: PUSH
20985: LD_EXP 9
20989: PUSH
20990: LD_EXP 15
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: DIFF
21007: PPUSH
21008: LD_STRING 06_other_survivors
21010: PPUSH
21011: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21015: LD_INT 50
21017: PUSH
21018: EMPTY
21019: LIST
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 21
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 2
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 12
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 25
21056: PUSH
21057: LD_INT 16
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: PPUSH
21080: LD_STRING 06_other_apemans
21082: PPUSH
21083: CALL_OW 38
// YouWin ;
21087: CALL_OW 103
// end ; end_of_file
21091: LD_VAR 0 2
21095: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21096: LD_EXP 39
21100: PUSH
21101: LD_INT 3
21103: EQUAL
21104: IFFALSE 21219
21106: GO 21108
21108: DISABLE
// begin enable ;
21109: ENABLE
// sendedConvoys = 0 ;
21110: LD_ADDR_EXP 39
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21118: LD_INT 6
21120: PPUSH
21121: LD_INT 3
21123: PPUSH
21124: LD_INT 5
21126: PPUSH
21127: LD_INT 10
21129: PPUSH
21130: CALL_OW 12
21134: PUSH
21135: LD_INT 5
21137: PPUSH
21138: LD_INT 11
21140: PPUSH
21141: CALL_OW 12
21145: PUSH
21146: LD_INT 8
21148: PPUSH
21149: LD_INT 12
21151: PPUSH
21152: CALL_OW 12
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: LD_OWVAR 67
21166: ARRAY
21167: PPUSH
21168: LD_INT 0
21170: PPUSH
21171: LD_INT 0
21173: PPUSH
21174: LD_INT 0
21176: PPUSH
21177: LD_INT 3
21179: PPUSH
21180: LD_EXP 34
21184: PPUSH
21185: LD_EXP 35
21189: PPUSH
21190: CALL_OW 12
21194: PPUSH
21195: LD_INT 18
21197: PPUSH
21198: LD_INT 17
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: LD_INT 1
21206: PPUSH
21207: LD_INT 2
21209: PPUSH
21210: CALL_OW 12
21214: PPUSH
21215: CALL 9073 0 12
// end ; end_of_file
21219: END
// export function PrepareNature ; var i , un ; begin
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
21224: PPUSH
// for i = 1 to Difficulty + 2 do
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: DOUBLE
21231: LD_INT 1
21233: DEC
21234: ST_TO_ADDR
21235: LD_OWVAR 67
21239: PUSH
21240: LD_INT 2
21242: PLUS
21243: PUSH
21244: FOR_TO
21245: IFFALSE 21354
// begin hc_sex = sex_male ;
21247: LD_ADDR_OWVAR 27
21251: PUSH
21252: LD_INT 1
21254: ST_TO_ADDR
// uc_side = 0 ;
21255: LD_ADDR_OWVAR 20
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// uc_nation = nation_nature ;
21263: LD_ADDR_OWVAR 21
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// hc_class = class_tiger ;
21271: LD_ADDR_OWVAR 28
21275: PUSH
21276: LD_INT 14
21278: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21279: LD_ADDR_OWVAR 31
21283: PUSH
21284: LD_EXP 35
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21304: LD_ADDR_OWVAR 35
21308: PUSH
21309: LD_INT 5
21311: NEG
21312: PPUSH
21313: LD_INT 5
21315: PPUSH
21316: CALL_OW 12
21320: PUSH
21321: LD_OWVAR 67
21325: MUL
21326: ST_TO_ADDR
// un = CreateHuman ;
21327: LD_ADDR_VAR 0 3
21331: PUSH
21332: CALL_OW 44
21336: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21337: LD_VAR 0 3
21341: PPUSH
21342: LD_INT 20
21344: PPUSH
21345: LD_INT 0
21347: PPUSH
21348: CALL_OW 49
// end ;
21352: GO 21244
21354: POP
21355: POP
// for i = 1 to rand ( 3 , 4 ) do
21356: LD_ADDR_VAR 0 2
21360: PUSH
21361: DOUBLE
21362: LD_INT 1
21364: DEC
21365: ST_TO_ADDR
21366: LD_INT 3
21368: PPUSH
21369: LD_INT 4
21371: PPUSH
21372: CALL_OW 12
21376: PUSH
21377: FOR_TO
21378: IFFALSE 21472
// begin hc_sex = sex_male ;
21380: LD_ADDR_OWVAR 27
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// uc_side = 0 ;
21388: LD_ADDR_OWVAR 20
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// uc_nation = nation_nature ;
21396: LD_ADDR_OWVAR 21
21400: PUSH
21401: LD_INT 0
21403: ST_TO_ADDR
// hc_class = 18 ;
21404: LD_ADDR_OWVAR 28
21408: PUSH
21409: LD_INT 18
21411: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21412: LD_ADDR_OWVAR 31
21416: PUSH
21417: LD_EXP 35
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: LD_INT 0
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: ST_TO_ADDR
// hc_agressivity = 0 ;
21437: LD_ADDR_OWVAR 35
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
// un = CreateHuman ;
21445: LD_ADDR_VAR 0 3
21449: PUSH
21450: CALL_OW 44
21454: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21455: LD_VAR 0 3
21459: PPUSH
21460: LD_INT 20
21462: PPUSH
21463: LD_INT 0
21465: PPUSH
21466: CALL_OW 49
// end ;
21470: GO 21377
21472: POP
21473: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21474: LD_ADDR_VAR 0 2
21478: PUSH
21479: DOUBLE
21480: LD_INT 1
21482: DEC
21483: ST_TO_ADDR
21484: LD_INT 1
21486: PPUSH
21487: LD_INT 3
21489: PPUSH
21490: CALL_OW 12
21494: PUSH
21495: LD_OWVAR 67
21499: PLUS
21500: PUSH
21501: FOR_TO
21502: IFFALSE 21683
// begin hc_sex = sex_male ;
21504: LD_ADDR_OWVAR 27
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// uc_side = 0 ;
21512: LD_ADDR_OWVAR 20
21516: PUSH
21517: LD_INT 0
21519: ST_TO_ADDR
// uc_nation = nation_nature ;
21520: LD_ADDR_OWVAR 21
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
// hc_class = class_apeman ;
21528: LD_ADDR_OWVAR 28
21532: PUSH
21533: LD_INT 12
21535: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21536: LD_ADDR_OWVAR 31
21540: PUSH
21541: LD_EXP 34
21545: PPUSH
21546: LD_EXP 35
21550: PPUSH
21551: CALL_OW 12
21555: PUSH
21556: LD_EXP 34
21560: PPUSH
21561: LD_EXP 35
21565: PPUSH
21566: CALL_OW 12
21570: PUSH
21571: LD_EXP 34
21575: PPUSH
21576: LD_EXP 35
21580: PPUSH
21581: CALL_OW 12
21585: PUSH
21586: LD_EXP 34
21590: PPUSH
21591: LD_EXP 35
21595: PPUSH
21596: CALL_OW 12
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21607: LD_ADDR_OWVAR 35
21611: PUSH
21612: LD_INT 20
21614: PPUSH
21615: LD_INT 30
21617: PPUSH
21618: CALL_OW 12
21622: PUSH
21623: LD_INT 30
21625: PPUSH
21626: LD_INT 40
21628: PPUSH
21629: CALL_OW 12
21633: PUSH
21634: LD_INT 40
21636: PPUSH
21637: LD_INT 50
21639: PPUSH
21640: CALL_OW 12
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: LIST
21649: PUSH
21650: LD_OWVAR 67
21654: ARRAY
21655: ST_TO_ADDR
// un = CreateHuman ;
21656: LD_ADDR_VAR 0 3
21660: PUSH
21661: CALL_OW 44
21665: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 21
21673: PPUSH
21674: LD_INT 0
21676: PPUSH
21677: CALL_OW 49
// end ;
21681: GO 21501
21683: POP
21684: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21685: LD_ADDR_VAR 0 2
21689: PUSH
21690: DOUBLE
21691: LD_INT 1
21693: DEC
21694: ST_TO_ADDR
21695: LD_INT 5
21697: PPUSH
21698: LD_INT 6
21700: PPUSH
21701: CALL_OW 12
21705: PUSH
21706: LD_OWVAR 67
21710: PLUS
21711: PUSH
21712: FOR_TO
21713: IFFALSE 21859
// begin hc_sex = sex_male ;
21715: LD_ADDR_OWVAR 27
21719: PUSH
21720: LD_INT 1
21722: ST_TO_ADDR
// uc_side = 0 ;
21723: LD_ADDR_OWVAR 20
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
// uc_nation = nation_nature ;
21731: LD_ADDR_OWVAR 21
21735: PUSH
21736: LD_INT 0
21738: ST_TO_ADDR
// hc_class = class_apeman ;
21739: LD_ADDR_OWVAR 28
21743: PUSH
21744: LD_INT 12
21746: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21747: LD_ADDR_OWVAR 31
21751: PUSH
21752: LD_EXP 34
21756: PPUSH
21757: LD_EXP 35
21761: PPUSH
21762: CALL_OW 12
21766: PUSH
21767: LD_EXP 34
21771: PPUSH
21772: LD_EXP 35
21776: PPUSH
21777: CALL_OW 12
21781: PUSH
21782: LD_OWVAR 67
21786: PLUS
21787: PUSH
21788: LD_EXP 34
21792: PPUSH
21793: LD_EXP 35
21797: PPUSH
21798: CALL_OW 12
21802: PUSH
21803: LD_EXP 34
21807: PPUSH
21808: LD_EXP 35
21812: PPUSH
21813: CALL_OW 12
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: ST_TO_ADDR
// hc_agressivity = 0 ;
21824: LD_ADDR_OWVAR 35
21828: PUSH
21829: LD_INT 0
21831: ST_TO_ADDR
// un = CreateHuman ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: CALL_OW 44
21841: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21842: LD_VAR 0 3
21846: PPUSH
21847: LD_INT 22
21849: PPUSH
21850: LD_INT 0
21852: PPUSH
21853: CALL_OW 49
// end ;
21857: GO 21712
21859: POP
21860: POP
// end ; end_of_file
21861: LD_VAR 0 1
21865: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21866: LD_EXP 1
21870: PPUSH
21871: CALL_OW 301
21875: IFFALSE 21887
21877: GO 21879
21879: DISABLE
// YouLost ( JMM ) ;
21880: LD_STRING JMM
21882: PPUSH
21883: CALL_OW 104
21887: END
