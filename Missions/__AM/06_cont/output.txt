// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 41
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 42
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 43
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// blockSpawn = 0 ;
  65: LD_ADDR_EXP 29
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// KurtStatus = 0 ;
  73: LD_ADDR_EXP 20
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// readyToEscape = 0 ;
  81: LD_ADDR_EXP 21
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// JoanStatus = 0 ;
  89: LD_ADDR_EXP 16
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// cratesStatus = 2 ;
  97: LD_ADDR_EXP 38
 101: PUSH
 102: LD_INT 2
 104: ST_TO_ADDR
// timerStatus = 1 ;
 105: LD_ADDR_EXP 24
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 113: LD_ADDR_EXP 25
 117: PUSH
 118: LD_INT 350
 120: PUSH
 121: LD_INT 500
 123: PUSH
 124: LD_INT 700
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_OWVAR 67
 136: ARRAY
 137: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 138: LD_ADDR_EXP 26
 142: PUSH
 143: LD_INT 105000
 145: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 146: LD_ADDR_EXP 28
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// sendedConvoys = 0 ;
 154: LD_ADDR_EXP 39
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// tamedApemans = 0 ;
 162: LD_ADDR_EXP 32
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// unitLost = 0 ;
 170: LD_ADDR_EXP 30
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 178: LD_ADDR_EXP 31
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianTanks = [ ] ;
 185: LD_ADDR_EXP 36
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 192: LD_ADDR_EXP 37
 196: PUSH
 197: EMPTY
 198: ST_TO_ADDR
// disableHealAI = 0 ;
 199: LD_ADDR_EXP 33
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// strings = [ ] ;
 207: LD_ADDR_EXP 27
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// PrepareDifficulty ;
 214: CALL 5608 0 0
// PrepareNature ;
 218: CALL 21193 0 0
// PrepareRussian ;
 222: CALL 4715 0 0
// PrepareVehicles ;
 226: CALL 1463 0 0
// PrepareHeroes ;
 230: CALL 481 0 0
// PrepareOthers ;
 234: CALL 1791 0 0
// PreparePlayerApemans ;
 238: CALL 1933 0 0
// end ;
 242: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 243: LD_EXP 41
 247: PUSH
 248: LD_INT 1
 250: EQUAL
 251: IFFALSE 478
 253: GO 255
 255: DISABLE
 256: LD_INT 0
 258: PPUSH
// begin enable ;
 259: ENABLE
// fogoff ( true ) ;
 260: LD_INT 1
 262: PPUSH
 263: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 267: LD_ADDR_VAR 0 1
 271: PUSH
 272: LD_INT 22
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 21
 284: PUSH
 285: LD_INT 1
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 318
// SetLives ( i , 1000 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: LD_INT 1000
 311: PPUSH
 312: CALL_OW 234
 316: GO 301
 318: POP
 319: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 320: LD_ADDR_VAR 0 1
 324: PUSH
 325: LD_INT 22
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: FOR_IN
 355: IFFALSE 379
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 1
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
 377: GO 354
 379: POP
 380: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 381: LD_ADDR_VAR 0 1
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PPUSH
 410: CALL_OW 69
 414: PUSH
 415: FOR_IN
 416: IFFALSE 440
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 418: LD_VAR 0 1
 422: PPUSH
 423: CALL_OW 274
 427: PPUSH
 428: LD_INT 2
 430: PPUSH
 431: LD_INT 9999
 433: PPUSH
 434: CALL_OW 277
 438: GO 415
 440: POP
 441: POP
// if IsSelected ( rudepo ) then
 442: LD_INT 2
 444: PPUSH
 445: CALL_OW 306
 449: IFFALSE 459
// your_side = 3 ;
 451: LD_ADDR_OWVAR 2
 455: PUSH
 456: LD_INT 3
 458: ST_TO_ADDR
// if IsSelected ( JMM ) then
 459: LD_EXP 1
 463: PPUSH
 464: CALL_OW 306
 468: IFFALSE 478
// your_side = 1 ;
 470: LD_ADDR_OWVAR 2
 474: PUSH
 475: LD_INT 1
 477: ST_TO_ADDR
// end ; end_of_file
 478: PPOPN 1
 480: END
// export function PrepareHeroes ; var veh ; begin
 481: LD_INT 0
 483: PPUSH
 484: PPUSH
// uc_side = 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation = 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 501: LD_ADDR_EXP 1
 505: PUSH
 506: LD_STRING JMM
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: CALL 5092 0 2
 516: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 517: LD_ADDR_EXP 14
 521: PUSH
 522: LD_STRING Harisson
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL 5092 0 2
 532: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 533: LD_ADDR_EXP 10
 537: PUSH
 538: LD_STRING DeltaDoctor
 540: PPUSH
 541: CALL_OW 34
 545: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 546: LD_ADDR_VAR 0 2
 550: PUSH
 551: LD_INT 22
 553: PUSH
 554: LD_INT 1
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 21
 563: PUSH
 564: LD_INT 2
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: LD_INT 58
 573: PUSH
 574: EMPTY
 575: LIST
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: ST_TO_ADDR
// if veh > 0 then
 587: LD_VAR 0 2
 591: PUSH
 592: LD_INT 0
 594: GREATER
 595: IFFALSE 617
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 597: LD_EXP 1
 601: PPUSH
 602: LD_VAR 0 2
 606: PUSH
 607: LD_INT 1
 609: ARRAY
 610: PPUSH
 611: CALL_OW 52
// end else
 615: GO 632
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 617: LD_EXP 1
 621: PPUSH
 622: LD_INT 2
 624: PPUSH
 625: LD_INT 0
 627: PPUSH
 628: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 632: LD_STRING LisaIn06
 634: PPUSH
 635: LD_INT 0
 637: PPUSH
 638: CALL_OW 30
 642: PUSH
 643: LD_INT 1
 645: EQUAL
 646: IFFALSE 750
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 648: LD_ADDR_VAR 0 2
 652: PUSH
 653: LD_INT 22
 655: PUSH
 656: LD_INT 1
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PUSH
 663: LD_INT 21
 665: PUSH
 666: LD_INT 2
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 58
 675: PUSH
 676: EMPTY
 677: LIST
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 69
 688: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 689: LD_ADDR_EXP 2
 693: PUSH
 694: LD_STRING Lisa
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: CALL 5092 0 2
 704: ST_TO_ADDR
// if veh > 0 then
 705: LD_VAR 0 2
 709: PUSH
 710: LD_INT 0
 712: GREATER
 713: IFFALSE 735
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 715: LD_EXP 2
 719: PPUSH
 720: LD_VAR 0 2
 724: PUSH
 725: LD_INT 1
 727: ARRAY
 728: PPUSH
 729: CALL_OW 52
// end else
 733: GO 750
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 735: LD_EXP 2
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 750: LD_STRING BobbyIn06
 752: PPUSH
 753: LD_INT 0
 755: PPUSH
 756: CALL_OW 30
 760: PUSH
 761: LD_INT 1
 763: EQUAL
 764: IFFALSE 868
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 766: LD_ADDR_VAR 0 2
 770: PUSH
 771: LD_INT 22
 773: PUSH
 774: LD_INT 1
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: LD_INT 21
 783: PUSH
 784: LD_INT 2
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 58
 793: PUSH
 794: EMPTY
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: PPUSH
 802: CALL_OW 69
 806: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 807: LD_ADDR_EXP 3
 811: PUSH
 812: LD_STRING Bobby
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 5092 0 2
 822: ST_TO_ADDR
// if veh > 0 then
 823: LD_VAR 0 2
 827: PUSH
 828: LD_INT 0
 830: GREATER
 831: IFFALSE 853
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 833: LD_EXP 3
 837: PPUSH
 838: LD_VAR 0 2
 842: PUSH
 843: LD_INT 1
 845: ARRAY
 846: PPUSH
 847: CALL_OW 52
// end else
 851: GO 868
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 853: LD_EXP 3
 857: PPUSH
 858: LD_INT 2
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 868: LD_STRING CyrusIn06
 870: PPUSH
 871: LD_INT 0
 873: PPUSH
 874: CALL_OW 30
 878: PUSH
 879: LD_INT 1
 881: EQUAL
 882: IFFALSE 986
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 884: LD_ADDR_VAR 0 2
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_INT 1
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: LD_INT 21
 901: PUSH
 902: LD_INT 2
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 58
 911: PUSH
 912: EMPTY
 913: LIST
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 925: LD_ADDR_EXP 4
 929: PUSH
 930: LD_STRING Cyrus
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL 5092 0 2
 940: ST_TO_ADDR
// if veh > 0 then
 941: LD_VAR 0 2
 945: PUSH
 946: LD_INT 0
 948: GREATER
 949: IFFALSE 971
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 951: LD_EXP 4
 955: PPUSH
 956: LD_VAR 0 2
 960: PUSH
 961: LD_INT 1
 963: ARRAY
 964: PPUSH
 965: CALL_OW 52
// end else
 969: GO 986
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 971: LD_EXP 4
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 986: LD_STRING FrankIn06
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: CALL_OW 30
 996: PUSH
 997: LD_INT 1
 999: EQUAL
1000: IFFALSE 1104
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1002: LD_ADDR_VAR 0 2
1006: PUSH
1007: LD_INT 22
1009: PUSH
1010: LD_INT 1
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 21
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 58
1029: PUSH
1030: EMPTY
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PPUSH
1038: CALL_OW 69
1042: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1043: LD_ADDR_EXP 5
1047: PUSH
1048: LD_STRING Frank
1050: PPUSH
1051: LD_INT 1
1053: PPUSH
1054: CALL 5092 0 2
1058: ST_TO_ADDR
// if veh > 0 then
1059: LD_VAR 0 2
1063: PUSH
1064: LD_INT 0
1066: GREATER
1067: IFFALSE 1089
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1069: LD_EXP 5
1073: PPUSH
1074: LD_VAR 0 2
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: CALL_OW 52
// end else
1087: GO 1104
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 5
1093: PPUSH
1094: LD_INT 2
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1104: LD_STRING BrownIn06
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 30
1114: PUSH
1115: LD_INT 1
1117: EQUAL
1118: IFFALSE 1222
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_INT 22
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: LD_INT 21
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 58
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1161: LD_ADDR_EXP 6
1165: PUSH
1166: LD_STRING Brown
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: CALL 5092 0 2
1176: ST_TO_ADDR
// if veh > 0 then
1177: LD_VAR 0 2
1181: PUSH
1182: LD_INT 0
1184: GREATER
1185: IFFALSE 1207
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1187: LD_EXP 6
1191: PPUSH
1192: LD_VAR 0 2
1196: PUSH
1197: LD_INT 1
1199: ARRAY
1200: PPUSH
1201: CALL_OW 52
// end else
1205: GO 1222
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1207: LD_EXP 6
1211: PPUSH
1212: LD_INT 2
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1222: LD_STRING DonaldsonIn06
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 30
1232: PUSH
1233: LD_INT 1
1235: EQUAL
1236: IFFALSE 1340
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1238: LD_ADDR_VAR 0 2
1242: PUSH
1243: LD_INT 22
1245: PUSH
1246: LD_INT 1
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: PUSH
1253: LD_INT 21
1255: PUSH
1256: LD_INT 2
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 58
1265: PUSH
1266: EMPTY
1267: LIST
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: LIST
1273: PPUSH
1274: CALL_OW 69
1278: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1279: LD_ADDR_EXP 7
1283: PUSH
1284: LD_STRING Donaldson
1286: PPUSH
1287: LD_INT 1
1289: PPUSH
1290: CALL 5092 0 2
1294: ST_TO_ADDR
// if veh > 0 then
1295: LD_VAR 0 2
1299: PUSH
1300: LD_INT 0
1302: GREATER
1303: IFFALSE 1325
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1305: LD_EXP 7
1309: PPUSH
1310: LD_VAR 0 2
1314: PUSH
1315: LD_INT 1
1317: ARRAY
1318: PPUSH
1319: CALL_OW 52
// end else
1323: GO 1340
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1325: LD_EXP 7
1329: PPUSH
1330: LD_INT 2
1332: PPUSH
1333: LD_INT 0
1335: PPUSH
1336: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1340: LD_STRING GladstoneIn06
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 30
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1458
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 22
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 21
1373: PUSH
1374: LD_INT 2
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 58
1383: PUSH
1384: EMPTY
1385: LIST
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: PPUSH
1392: CALL_OW 69
1396: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1397: LD_ADDR_EXP 8
1401: PUSH
1402: LD_STRING Gladstone
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL 5092 0 2
1412: ST_TO_ADDR
// if veh > 0 then
1413: LD_VAR 0 2
1417: PUSH
1418: LD_INT 0
1420: GREATER
1421: IFFALSE 1443
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1423: LD_EXP 8
1427: PPUSH
1428: LD_VAR 0 2
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 52
// end else
1441: GO 1458
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1443: LD_EXP 8
1447: PPUSH
1448: LD_INT 2
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// end ; end ; end ;
1458: LD_VAR 0 1
1462: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1463: LD_INT 0
1465: PPUSH
1466: PPUSH
1467: PPUSH
1468: PPUSH
1469: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1470: LD_ADDR_VAR 0 5
1474: PUSH
1475: LD_STRING 06_VehiclesIn06_1
1477: PPUSH
1478: EMPTY
1479: PPUSH
1480: CALL_OW 30
1484: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1485: LD_ADDR_EXP 40
1489: PUSH
1490: LD_STRING 06_ResourcesInCargo06_1
1492: PPUSH
1493: EMPTY
1494: PPUSH
1495: CALL_OW 30
1499: ST_TO_ADDR
// uc_side = 1 ;
1500: LD_ADDR_OWVAR 20
1504: PUSH
1505: LD_INT 1
1507: ST_TO_ADDR
// if vehicles > 0 then
1508: LD_VAR 0 5
1512: PUSH
1513: LD_INT 0
1515: GREATER
1516: IFFALSE 1786
// begin for i := 1 to vehicles do
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: DOUBLE
1524: LD_INT 1
1526: DEC
1527: ST_TO_ADDR
1528: LD_VAR 0 5
1532: PUSH
1533: FOR_TO
1534: IFFALSE 1784
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1536: LD_ADDR_OWVAR 21
1540: PUSH
1541: LD_VAR 0 5
1545: PUSH
1546: LD_VAR 0 2
1550: ARRAY
1551: PUSH
1552: LD_INT 1
1554: ARRAY
1555: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1556: LD_ADDR_OWVAR 37
1560: PUSH
1561: LD_VAR 0 5
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 2
1574: ARRAY
1575: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_VAR 0 5
1585: PUSH
1586: LD_VAR 0 2
1590: ARRAY
1591: PUSH
1592: LD_INT 3
1594: ARRAY
1595: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1596: LD_ADDR_OWVAR 38
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_VAR 0 2
1610: ARRAY
1611: PUSH
1612: LD_INT 4
1614: ARRAY
1615: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1616: LD_ADDR_OWVAR 40
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PUSH
1632: LD_INT 5
1634: ARRAY
1635: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1636: LD_ADDR_OWVAR 41
1640: PUSH
1641: LD_INT 40
1643: ST_TO_ADDR
// veh = CreateVehicle ;
1644: LD_ADDR_VAR 0 4
1648: PUSH
1649: CALL_OW 45
1653: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1654: LD_VAR 0 4
1658: PPUSH
1659: LD_INT 3
1661: PPUSH
1662: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1666: LD_VAR 0 4
1670: PPUSH
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 0
1676: PPUSH
1677: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1681: LD_OWVAR 40
1685: PUSH
1686: LD_INT 12
1688: EQUAL
1689: IFFALSE 1782
// begin if resources > 0 then
1691: LD_EXP 40
1695: PUSH
1696: LD_INT 0
1698: GREATER
1699: IFFALSE 1782
// begin AddCargo ( veh , 1 , resources [ i ] [ 1 ] ) ;
1701: LD_VAR 0 4
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: LD_EXP 40
1713: PUSH
1714: LD_VAR 0 2
1718: ARRAY
1719: PUSH
1720: LD_INT 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 291
// AddCargo ( veh , 2 , resources [ i ] [ 2 ] ) ;
1728: LD_VAR 0 4
1732: PPUSH
1733: LD_INT 2
1735: PPUSH
1736: LD_EXP 40
1740: PUSH
1741: LD_VAR 0 2
1745: ARRAY
1746: PUSH
1747: LD_INT 2
1749: ARRAY
1750: PPUSH
1751: CALL_OW 291
// AddCargo ( veh , 3 , resources [ i ] [ 3 ] ) ;
1755: LD_VAR 0 4
1759: PPUSH
1760: LD_INT 3
1762: PPUSH
1763: LD_EXP 40
1767: PUSH
1768: LD_VAR 0 2
1772: ARRAY
1773: PUSH
1774: LD_INT 3
1776: ARRAY
1777: PPUSH
1778: CALL_OW 291
// end ; end ; end ;
1782: GO 1533
1784: POP
1785: POP
// end ; end ;
1786: LD_VAR 0 1
1790: RET
// export function PrepareOthers ; var i , veh ; begin
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
// uc_side = 1 ;
1796: LD_ADDR_OWVAR 20
1800: PUSH
1801: LD_INT 1
1803: ST_TO_ADDR
// uc_nation = 1 ;
1804: LD_ADDR_OWVAR 21
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1812: LD_ADDR_EXP 11
1816: PUSH
1817: LD_STRING OthersIn06
1819: PPUSH
1820: CALL_OW 31
1824: ST_TO_ADDR
// for i in others do
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_EXP 11
1834: PUSH
1835: FOR_IN
1836: IFFALSE 1926
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1838: LD_ADDR_VAR 0 3
1842: PUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 21
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 58
1865: PUSH
1866: EMPTY
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: ST_TO_ADDR
// if veh > 0 then
1879: LD_VAR 0 3
1883: PUSH
1884: LD_INT 0
1886: GREATER
1887: IFFALSE 1909
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1889: LD_VAR 0 2
1893: PPUSH
1894: LD_VAR 0 3
1898: PUSH
1899: LD_INT 1
1901: ARRAY
1902: PPUSH
1903: CALL_OW 52
// end else
1907: GO 1924
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1909: LD_VAR 0 2
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: LD_INT 0
1919: PPUSH
1920: CALL_OW 49
// end ; end ;
1924: GO 1835
1926: POP
1927: POP
// end ;
1928: LD_VAR 0 1
1932: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1933: LD_INT 0
1935: PPUSH
1936: PPUSH
1937: PPUSH
// uc_side = 1 ;
1938: LD_ADDR_OWVAR 20
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// uc_nation = 0 ;
1946: LD_ADDR_OWVAR 21
1950: PUSH
1951: LD_INT 0
1953: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1954: LD_ADDR_EXP 12
1958: PUSH
1959: LD_STRING ApeIn06
1961: PPUSH
1962: CALL_OW 31
1966: ST_TO_ADDR
// for i in ape do
1967: LD_ADDR_VAR 0 2
1971: PUSH
1972: LD_EXP 12
1976: PUSH
1977: FOR_IN
1978: IFFALSE 1997
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1980: LD_VAR 0 2
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 49
1995: GO 1977
1997: POP
1998: POP
// end ;
1999: LD_VAR 0 1
2003: RET
// export function PrepareDenis ; begin
2004: LD_INT 0
2006: PPUSH
// uc_side = 1 ;
2007: LD_ADDR_OWVAR 20
2011: PUSH
2012: LD_INT 1
2014: ST_TO_ADDR
// uc_nation = 1 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2023: LD_ADDR_EXP 9
2027: PUSH
2028: LD_STRING Denis
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: CALL 5092 0 2
2038: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2039: LD_EXP 9
2043: PPUSH
2044: LD_INT 13
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2054: LD_EXP 9
2058: PPUSH
2059: LD_INT 4
2061: PPUSH
2062: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2066: LD_EXP 9
2070: PPUSH
2071: LD_INT 750
2073: PPUSH
2074: CALL_OW 234
// end ;
2078: LD_VAR 0 1
2082: RET
// export function HarrisonSupport ; var un , veh ; begin
2083: LD_INT 0
2085: PPUSH
2086: PPUSH
2087: PPUSH
// uc_side = 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation = 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// vc_engine = 1 ;
2104: LD_ADDR_OWVAR 39
2108: PUSH
2109: LD_INT 1
2111: ST_TO_ADDR
// vc_control = 1 ;
2112: LD_ADDR_OWVAR 38
2116: PUSH
2117: LD_INT 1
2119: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2120: LD_ADDR_OWVAR 40
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_OWVAR 67
2143: ARRAY
2144: ST_TO_ADDR
// vc_chassis = 2 ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// veh = CreateVehicle ;
2153: LD_ADDR_VAR 0 3
2157: PUSH
2158: CALL_OW 45
2162: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2163: LD_VAR 0 3
2167: PPUSH
2168: LD_INT 2
2170: PPUSH
2171: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2175: LD_VAR 0 3
2179: PPUSH
2180: LD_INT 3
2182: PPUSH
2183: LD_INT 0
2185: PPUSH
2186: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2190: LD_VAR 0 3
2194: PPUSH
2195: LD_INT 50
2197: PPUSH
2198: CALL_OW 240
// hc_class := 2 ;
2202: LD_ADDR_OWVAR 28
2206: PUSH
2207: LD_INT 2
2209: ST_TO_ADDR
// hc_sex := sex_male ;
2210: LD_ADDR_OWVAR 27
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2218: LD_ADDR_OWVAR 33
2222: PUSH
2223: LD_STRING SecondCharsGal
2225: ST_TO_ADDR
// hc_face_number := 52 ;
2226: LD_ADDR_OWVAR 34
2230: PUSH
2231: LD_INT 52
2233: ST_TO_ADDR
// hc_name := Craig Brown ;
2234: LD_ADDR_OWVAR 26
2238: PUSH
2239: LD_STRING Craig Brown
2241: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2242: LD_ADDR_OWVAR 29
2246: PUSH
2247: LD_INT 10
2249: PUSH
2250: LD_INT 10
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2257: LD_ADDR_OWVAR 30
2261: PUSH
2262: LD_INT 0
2264: PUSH
2265: LD_INT 2
2267: PUSH
2268: LD_INT 0
2270: PUSH
2271: LD_INT 0
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2280: LD_ADDR_OWVAR 31
2284: PUSH
2285: LD_INT 2
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 0
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2303: LD_ADDR_EXP 17
2307: PUSH
2308: CALL_OW 44
2312: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2313: LD_EXP 17
2317: PPUSH
2318: LD_VAR 0 3
2322: PPUSH
2323: CALL_OW 52
// vc_engine = 1 ;
2327: LD_ADDR_OWVAR 39
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// vc_control = 1 ;
2335: LD_ADDR_OWVAR 38
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2343: LD_ADDR_OWVAR 40
2347: PUSH
2348: LD_INT 4
2350: PUSH
2351: LD_INT 2
2353: PUSH
2354: LD_INT 2
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: ST_TO_ADDR
// vc_chassis = 2 ;
2368: LD_ADDR_OWVAR 37
2372: PUSH
2373: LD_INT 2
2375: ST_TO_ADDR
// veh = CreateVehicle ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: CALL_OW 45
2385: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2386: LD_VAR 0 3
2390: PPUSH
2391: LD_INT 2
2393: PPUSH
2394: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2398: LD_VAR 0 3
2402: PPUSH
2403: LD_INT 3
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2413: LD_VAR 0 3
2417: PPUSH
2418: LD_INT 50
2420: PPUSH
2421: CALL_OW 240
// hc_class := 1 ;
2425: LD_ADDR_OWVAR 28
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// hc_sex := sex_female ;
2433: LD_ADDR_OWVAR 27
2437: PUSH
2438: LD_INT 2
2440: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2441: LD_ADDR_OWVAR 33
2445: PUSH
2446: LD_STRING SecondCharsGal
2448: ST_TO_ADDR
// hc_face_number := 45 ;
2449: LD_ADDR_OWVAR 34
2453: PUSH
2454: LD_INT 45
2456: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2457: LD_ADDR_OWVAR 29
2461: PUSH
2462: LD_INT 11
2464: PUSH
2465: LD_INT 10
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2472: LD_ADDR_OWVAR 26
2476: PUSH
2477: LD_STRING Ingrid Jonsson
2479: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2480: LD_ADDR_OWVAR 30
2484: PUSH
2485: LD_INT 1
2487: PUSH
2488: LD_INT 1
2490: PUSH
2491: LD_INT 0
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2503: LD_ADDR_OWVAR 31
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: LD_INT 0
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2526: LD_ADDR_EXP 18
2530: PUSH
2531: CALL_OW 44
2535: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2536: LD_EXP 18
2540: PPUSH
2541: LD_VAR 0 3
2545: PPUSH
2546: CALL_OW 52
// end ;
2550: LD_VAR 0 1
2554: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2555: LD_INT 0
2557: PPUSH
2558: PPUSH
2559: PPUSH
2560: PPUSH
2561: PPUSH
// j = 0 ;
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_INT 0
2569: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2570: LD_INT 35
2572: PPUSH
2573: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: LD_INT 22
2584: PUSH
2585: LD_INT 1
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 21
2594: PUSH
2595: LD_INT 1
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 26
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 25
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 2
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 25
2637: PUSH
2638: LD_INT 3
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 25
2647: PUSH
2648: LD_INT 4
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PUSH
2673: FOR_IN
2674: IFFALSE 2800
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2676: LD_INT 22
2678: PUSH
2679: LD_INT 3
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 2
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 21
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 21
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 59
2721: PUSH
2722: EMPTY
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 91
2734: PUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 25
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: PPUSH
2753: CALL_OW 69
2757: NOT
2758: PUSH
2759: LD_VAR 0 2
2763: PPUSH
2764: LD_EXP 1
2768: PPUSH
2769: CALL_OW 296
2773: PUSH
2774: LD_INT 15
2776: LESS
2777: AND
2778: IFFALSE 2798
// begin tmp = i ;
2780: LD_ADDR_VAR 0 4
2784: PUSH
2785: LD_VAR 0 2
2789: ST_TO_ADDR
// j = 1 ;
2790: LD_ADDR_VAR 0 3
2794: PUSH
2795: LD_INT 1
2797: ST_TO_ADDR
// end ; end ;
2798: GO 2673
2800: POP
2801: POP
// until j = 1 ;
2802: LD_VAR 0 3
2806: PUSH
2807: LD_INT 1
2809: EQUAL
2810: IFFALSE 2570
// blockSpawn = 1 ;
2812: LD_ADDR_EXP 29
2816: PUSH
2817: LD_INT 1
2819: ST_TO_ADDR
// uc_side = 4 ;
2820: LD_ADDR_OWVAR 20
2824: PUSH
2825: LD_INT 4
2827: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2828: LD_ADDR_EXP 15
2832: PUSH
2833: LD_STRING Joan
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL 5092 0 2
2843: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2844: LD_EXP 15
2848: PPUSH
2849: LD_VAR 0 4
2853: PPUSH
2854: CALL_OW 250
2858: PPUSH
2859: LD_VAR 0 4
2863: PPUSH
2864: CALL_OW 251
2868: PPUSH
2869: LD_INT 5
2871: PPUSH
2872: LD_INT 1
2874: PPUSH
2875: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2879: LD_EXP 15
2883: PPUSH
2884: LD_INT 250
2886: PPUSH
2887: CALL_OW 234
// InGameOn ;
2891: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2895: LD_EXP 15
2899: PPUSH
2900: CALL_OW 87
// wait ( 0 0$2 ) ;
2904: LD_INT 70
2906: PPUSH
2907: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: CALL_OW 122
// wait ( 0 0$1 ) ;
2929: LD_INT 35
2931: PPUSH
2932: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2936: LD_VAR 0 4
2940: PPUSH
2941: LD_EXP 15
2945: PPUSH
2946: CALL_OW 112
// wait ( 0 0$2 ) ;
2950: LD_INT 70
2952: PPUSH
2953: CALL_OW 67
// DialogueOn ;
2957: CALL_OW 6
// if tmp = JMM then
2961: LD_VAR 0 4
2965: PUSH
2966: LD_EXP 1
2970: EQUAL
2971: IFFALSE 3120
// begin ComTurnUnit ( JMM , Joan ) ;
2973: LD_EXP 1
2977: PPUSH
2978: LD_EXP 15
2982: PPUSH
2983: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2987: LD_EXP 1
2991: PPUSH
2992: LD_STRING D5b-JMM-1
2994: PPUSH
2995: CALL_OW 88
// DialogueOff ;
2999: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3003: LD_EXP 15
3007: PPUSH
3008: LD_INT 500
3010: PPUSH
3011: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3015: LD_EXP 15
3019: PPUSH
3020: LD_EXP 1
3024: PPUSH
3025: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3029: LD_EXP 1
3033: PPUSH
3034: LD_EXP 15
3038: PPUSH
3039: CALL_OW 119
// wait ( 0 0$1 ) ;
3043: LD_INT 35
3045: PPUSH
3046: CALL_OW 67
// DialogueOn ;
3050: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3054: LD_EXP 15
3058: PPUSH
3059: LD_STRING D5b-Joan-1
3061: PPUSH
3062: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3066: LD_EXP 1
3070: PPUSH
3071: LD_STRING D5b-JMM-2
3073: PPUSH
3074: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3078: LD_EXP 15
3082: PPUSH
3083: LD_STRING D5b-Joan-2
3085: PPUSH
3086: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3090: LD_EXP 1
3094: PPUSH
3095: LD_STRING D5b-JMM-3
3097: PPUSH
3098: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3102: LD_EXP 15
3106: PPUSH
3107: LD_STRING D5b-Joan-3
3109: PPUSH
3110: CALL_OW 88
// DialogueOff ;
3114: CALL_OW 7
// end else
3118: GO 3455
// begin ComTurnUnit ( tmp , Joan ) ;
3120: LD_VAR 0 4
3124: PPUSH
3125: LD_EXP 15
3129: PPUSH
3130: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_STRING D5a-Sol1-1
3141: PPUSH
3142: CALL_OW 88
// DialogueOff ;
3146: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3150: LD_EXP 15
3154: PPUSH
3155: LD_INT 500
3157: PPUSH
3158: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3162: LD_EXP 15
3166: PPUSH
3167: LD_VAR 0 4
3171: PPUSH
3172: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3176: LD_VAR 0 4
3180: PPUSH
3181: LD_EXP 15
3185: PPUSH
3186: CALL_OW 119
// wait ( 0 0$1 ) ;
3190: LD_INT 35
3192: PPUSH
3193: CALL_OW 67
// DialogueOn ;
3197: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3201: LD_EXP 15
3205: PPUSH
3206: LD_STRING D5a-Joan-1
3208: PPUSH
3209: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_STRING D5a-Sol1-2
3220: PPUSH
3221: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3225: LD_EXP 15
3229: PPUSH
3230: LD_STRING D5a-Joan-2
3232: PPUSH
3233: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_STRING D5a-Sol1-3
3244: PPUSH
3245: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3249: LD_EXP 15
3253: PPUSH
3254: LD_STRING D5a-Joan-3
3256: PPUSH
3257: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_STRING D5a-Sol1-4
3268: PPUSH
3269: CALL_OW 88
// DialogueOff ;
3273: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3277: LD_EXP 1
3281: PPUSH
3282: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3286: LD_EXP 1
3290: PPUSH
3291: CALL_OW 122
// wait ( 0 0$1 ) ;
3295: LD_INT 35
3297: PPUSH
3298: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3302: LD_INT 35
3304: PPUSH
3305: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3309: LD_EXP 15
3313: PUSH
3314: LD_VAR 0 4
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PPUSH
3323: LD_EXP 1
3327: PPUSH
3328: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3332: LD_EXP 15
3336: PPUSH
3337: LD_EXP 1
3341: PPUSH
3342: CALL_OW 296
3346: PUSH
3347: LD_INT 5
3349: LESS
3350: IFFALSE 3302
// ComTurnUnit ( Joan , JMM ) ;
3352: LD_EXP 15
3356: PPUSH
3357: LD_EXP 1
3361: PPUSH
3362: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3366: LD_EXP 1
3370: PPUSH
3371: LD_EXP 15
3375: PPUSH
3376: CALL_OW 119
// wait ( 0 0$1 ) ;
3380: LD_INT 35
3382: PPUSH
3383: CALL_OW 67
// DialogueOn ;
3387: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3391: LD_EXP 15
3395: PPUSH
3396: LD_STRING D5a-Joan-4
3398: PPUSH
3399: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3403: LD_EXP 1
3407: PPUSH
3408: LD_STRING D5a-JMM-4
3410: PPUSH
3411: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3415: LD_EXP 15
3419: PPUSH
3420: LD_STRING D5a-Joan-5
3422: PPUSH
3423: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3427: LD_EXP 1
3431: PPUSH
3432: LD_STRING D5a-JMM-5
3434: PPUSH
3435: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3439: LD_EXP 15
3443: PPUSH
3444: LD_STRING D5a-Joan-6
3446: PPUSH
3447: CALL_OW 88
// DialogueOff ;
3451: CALL_OW 7
// end ; DialogueOn ;
3455: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3459: LD_EXP 1
3463: PPUSH
3464: LD_STRING D6-JMM-1
3466: PPUSH
3467: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3471: LD_EXP 15
3475: PPUSH
3476: LD_STRING D6-Joan-1
3478: PPUSH
3479: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3483: LD_EXP 1
3487: PPUSH
3488: LD_STRING D6-JMM-2
3490: PPUSH
3491: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3495: LD_EXP 15
3499: PPUSH
3500: LD_STRING D6-Joan-2
3502: PPUSH
3503: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3507: LD_EXP 1
3511: PPUSH
3512: LD_STRING D6-JMM-3
3514: PPUSH
3515: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_STRING D6-Joan-3
3526: PPUSH
3527: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3531: LD_EXP 1
3535: PPUSH
3536: LD_STRING D6-JMM-4
3538: PPUSH
3539: CALL_OW 88
// DialogueOff ;
3543: CALL_OW 7
// InGameOff ;
3547: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3551: LD_EXP 15
3555: PPUSH
3556: LD_INT 1
3558: PPUSH
3559: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3563: LD_STRING MJ
3565: PPUSH
3566: CALL_OW 337
// JoanStatus = 1 ;
3570: LD_ADDR_EXP 16
3574: PUSH
3575: LD_INT 1
3577: ST_TO_ADDR
// blockSpawn = 0 ;
3578: LD_ADDR_EXP 29
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// end ;
3586: LD_VAR 0 1
3590: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3591: LD_INT 0
3593: PPUSH
3594: PPUSH
// repeat wait ( 0 0$7 ) ;
3595: LD_INT 245
3597: PPUSH
3598: CALL_OW 67
// until blockSpawn = 0 ;
3602: LD_EXP 29
3606: PUSH
3607: LD_INT 0
3609: EQUAL
3610: IFFALSE 3595
// uc_side = 1 ;
3612: LD_ADDR_OWVAR 20
3616: PUSH
3617: LD_INT 1
3619: ST_TO_ADDR
// uc_nation = 1 ;
3620: LD_ADDR_OWVAR 21
3624: PUSH
3625: LD_INT 1
3627: ST_TO_ADDR
// InitHc ;
3628: CALL_OW 19
// if number = 1 then
3632: LD_VAR 0 1
3636: PUSH
3637: LD_INT 1
3639: EQUAL
3640: IFFALSE 3816
// begin hc_class := 1 ;
3642: LD_ADDR_OWVAR 28
3646: PUSH
3647: LD_INT 1
3649: ST_TO_ADDR
// hc_sex := sex_male ;
3650: LD_ADDR_OWVAR 27
3654: PUSH
3655: LD_INT 1
3657: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3658: LD_ADDR_OWVAR 33
3662: PUSH
3663: LD_STRING AmGalRemake
3665: ST_TO_ADDR
// hc_face_number := 7 ;
3666: LD_ADDR_OWVAR 34
3670: PUSH
3671: LD_INT 7
3673: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3674: LD_ADDR_OWVAR 26
3678: PUSH
3679: LD_STRING Bobby Jordan
3681: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3682: LD_ADDR_OWVAR 29
3686: PUSH
3687: LD_INT 9
3689: PUSH
3690: LD_INT 11
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3697: LD_ADDR_OWVAR 30
3701: PUSH
3702: LD_INT 1
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: LD_INT 1
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3720: LD_ADDR_OWVAR 31
3724: PUSH
3725: LD_INT 2
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: LD_INT 1
3733: PUSH
3734: LD_INT 1
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: ST_TO_ADDR
// un = CreateHuman ;
3743: LD_ADDR_VAR 0 3
3747: PUSH
3748: CALL_OW 44
3752: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3753: LD_VAR 0 3
3757: PPUSH
3758: LD_INT 12
3760: PPUSH
3761: LD_INT 1
3763: PPUSH
3764: CALL_OW 49
// wait ( 0 0$1 ) ;
3768: LD_INT 35
3770: PPUSH
3771: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3775: LD_VAR 0 3
3779: PPUSH
3780: CALL_OW 87
// DialogueOn ;
3784: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: LD_STRING D11b-Sol3-1
3795: PPUSH
3796: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3800: LD_EXP 1
3804: PPUSH
3805: LD_STRING D11b-JMM-1
3807: PPUSH
3808: CALL_OW 88
// DialogueOff ;
3812: CALL_OW 7
// end ; if number = 2 then
3816: LD_VAR 0 1
3820: PUSH
3821: LD_INT 2
3823: EQUAL
3824: IFFALSE 4000
// begin hc_class := 3 ;
3826: LD_ADDR_OWVAR 28
3830: PUSH
3831: LD_INT 3
3833: ST_TO_ADDR
// hc_sex := sex_male ;
3834: LD_ADDR_OWVAR 27
3838: PUSH
3839: LD_INT 1
3841: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3842: LD_ADDR_OWVAR 33
3846: PUSH
3847: LD_STRING SecondCharsGal
3849: ST_TO_ADDR
// hc_face_number := 55 ;
3850: LD_ADDR_OWVAR 34
3854: PUSH
3855: LD_INT 55
3857: ST_TO_ADDR
// hc_name := George McCarthy ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING George McCarthy
3865: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3866: LD_ADDR_OWVAR 29
3870: PUSH
3871: LD_INT 11
3873: PUSH
3874: LD_INT 10
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3881: LD_ADDR_OWVAR 30
3885: PUSH
3886: LD_INT 0
3888: PUSH
3889: LD_INT 0
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3904: LD_ADDR_OWVAR 31
3908: PUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: ST_TO_ADDR
// un = CreateHuman ;
3927: LD_ADDR_VAR 0 3
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: LD_INT 12
3944: PPUSH
3945: LD_INT 1
3947: PPUSH
3948: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 87
// wait ( 0 0$1 ) ;
3961: LD_INT 35
3963: PPUSH
3964: CALL_OW 67
// DialogueOn ;
3968: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_STRING D11d-Sol4-1
3979: PPUSH
3980: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3984: LD_EXP 1
3988: PPUSH
3989: LD_STRING D11d-JMM-1
3991: PPUSH
3992: CALL_OW 88
// DialogueOff ;
3996: CALL_OW 7
// end ; if number = 4 then
4000: LD_VAR 0 1
4004: PUSH
4005: LD_INT 4
4007: EQUAL
4008: IFFALSE 4172
// begin hc_class := 3 ;
4010: LD_ADDR_OWVAR 28
4014: PUSH
4015: LD_INT 3
4017: ST_TO_ADDR
// hc_sex := sex_female ;
4018: LD_ADDR_OWVAR 27
4022: PUSH
4023: LD_INT 2
4025: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4026: LD_ADDR_OWVAR 33
4030: PUSH
4031: LD_STRING SecondCharsGal
4033: ST_TO_ADDR
// hc_face_number := 46 ;
4034: LD_ADDR_OWVAR 34
4038: PUSH
4039: LD_INT 46
4041: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4042: LD_ADDR_OWVAR 26
4046: PUSH
4047: LD_STRING Sylvia Creak
4049: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4050: LD_ADDR_OWVAR 29
4054: PUSH
4055: LD_INT 10
4057: PUSH
4058: LD_INT 9
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4065: LD_ADDR_OWVAR 30
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: LD_INT 1
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4088: LD_ADDR_OWVAR 31
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: LD_INT 3
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: LD_INT 1
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: ST_TO_ADDR
// un = CreateHuman ;
4111: LD_ADDR_VAR 0 3
4115: PUSH
4116: CALL_OW 44
4120: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 12
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4136: LD_VAR 0 3
4140: PPUSH
4141: CALL_OW 87
// wait ( 0 0$1 ) ;
4145: LD_INT 35
4147: PPUSH
4148: CALL_OW 67
// DialogueOn ;
4152: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4156: LD_VAR 0 3
4160: PPUSH
4161: LD_STRING D11e-FSol4-1
4163: PPUSH
4164: CALL_OW 88
// DialogueOff ;
4168: CALL_OW 7
// end ; if number = 5 then
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 5
4179: EQUAL
4180: IFFALSE 4356
// begin hc_class := 1 ;
4182: LD_ADDR_OWVAR 28
4186: PUSH
4187: LD_INT 1
4189: ST_TO_ADDR
// hc_sex := sex_female ;
4190: LD_ADDR_OWVAR 27
4194: PUSH
4195: LD_INT 2
4197: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4198: LD_ADDR_OWVAR 33
4202: PUSH
4203: LD_STRING SecondCharsGal
4205: ST_TO_ADDR
// hc_face_number := 37 ;
4206: LD_ADDR_OWVAR 34
4210: PUSH
4211: LD_INT 37
4213: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4214: LD_ADDR_OWVAR 26
4218: PUSH
4219: LD_STRING Margherite Simpson
4221: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4222: LD_ADDR_OWVAR 29
4226: PUSH
4227: LD_INT 11
4229: PUSH
4230: LD_INT 10
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4237: LD_ADDR_OWVAR 30
4241: PUSH
4242: LD_INT 1
4244: PUSH
4245: LD_INT 1
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4260: LD_ADDR_OWVAR 31
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: LD_INT 1
4270: PUSH
4271: LD_INT 1
4273: PUSH
4274: LD_INT 1
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: ST_TO_ADDR
// un = CreateHuman ;
4283: LD_ADDR_VAR 0 3
4287: PUSH
4288: CALL_OW 44
4292: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4293: LD_VAR 0 3
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 1
4303: PPUSH
4304: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4308: LD_VAR 0 3
4312: PPUSH
4313: CALL_OW 87
// wait ( 0 0$1 ) ;
4317: LD_INT 35
4319: PPUSH
4320: CALL_OW 67
// DialogueOn ;
4324: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: LD_STRING D11c-FSol3-1
4335: PPUSH
4336: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4340: LD_EXP 1
4344: PPUSH
4345: LD_STRING D11c-JMM-1
4347: PPUSH
4348: CALL_OW 88
// DialogueOff ;
4352: CALL_OW 7
// end ; if number = 6 then
4356: LD_VAR 0 1
4360: PUSH
4361: LD_INT 6
4363: EQUAL
4364: IFFALSE 4538
// begin hc_class := 1 ;
4366: LD_ADDR_OWVAR 28
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// hc_sex := sex_male ;
4374: LD_ADDR_OWVAR 27
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4382: LD_ADDR_OWVAR 33
4386: PUSH
4387: LD_STRING AmGalRemake
4389: ST_TO_ADDR
// hc_face_number := 1 ;
4390: LD_ADDR_OWVAR 34
4394: PUSH
4395: LD_INT 1
4397: ST_TO_ADDR
// hc_name := Charles Brown ;
4398: LD_ADDR_OWVAR 26
4402: PUSH
4403: LD_STRING Charles Brown
4405: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4406: LD_ADDR_OWVAR 29
4410: PUSH
4411: LD_INT 12
4413: PUSH
4414: LD_INT 11
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4421: LD_ADDR_OWVAR 30
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 0
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4444: LD_ADDR_OWVAR 31
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: LD_INT 1
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: ST_TO_ADDR
// un = CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4477: LD_VAR 0 3
4481: PPUSH
4482: LD_INT 12
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4492: LD_VAR 0 3
4496: PPUSH
4497: CALL_OW 87
// wait ( 0 0$1 ) ;
4501: LD_INT 35
4503: PPUSH
4504: CALL_OW 67
// DialogueOn ;
4508: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_STRING D4-Sol1-5
4519: PPUSH
4520: CALL_OW 88
// DialogueOff ;
4524: CALL_OW 7
// tempCharles = un ;
4528: LD_ADDR_EXP 13
4532: PUSH
4533: LD_VAR 0 3
4537: ST_TO_ADDR
// end ; if number = 7 then
4538: LD_VAR 0 1
4542: PUSH
4543: LD_INT 7
4545: EQUAL
4546: IFFALSE 4710
// begin hc_class := 1 ;
4548: LD_ADDR_OWVAR 28
4552: PUSH
4553: LD_INT 1
4555: ST_TO_ADDR
// hc_sex := sex_female ;
4556: LD_ADDR_OWVAR 27
4560: PUSH
4561: LD_INT 2
4563: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4564: LD_ADDR_OWVAR 33
4568: PUSH
4569: LD_STRING AmGalRemake
4571: ST_TO_ADDR
// hc_face_number := 2 ;
4572: LD_ADDR_OWVAR 34
4576: PUSH
4577: LD_INT 2
4579: ST_TO_ADDR
// hc_name := Johanna Holland ;
4580: LD_ADDR_OWVAR 26
4584: PUSH
4585: LD_STRING Johanna Holland
4587: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4588: LD_ADDR_OWVAR 29
4592: PUSH
4593: LD_INT 10
4595: PUSH
4596: LD_INT 10
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4603: LD_ADDR_OWVAR 30
4607: PUSH
4608: LD_INT 1
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 0
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4626: LD_ADDR_OWVAR 31
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: LD_INT 0
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: ST_TO_ADDR
// un = CreateHuman ;
4649: LD_ADDR_VAR 0 3
4653: PUSH
4654: CALL_OW 44
4658: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4659: LD_VAR 0 3
4663: PPUSH
4664: LD_INT 12
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4674: LD_VAR 0 3
4678: PPUSH
4679: CALL_OW 87
// wait ( 0 0$1 ) ;
4683: LD_INT 35
4685: PPUSH
4686: CALL_OW 67
// DialogueOn ;
4690: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4694: LD_VAR 0 3
4698: PPUSH
4699: LD_STRING D11a-FSol2-1
4701: PPUSH
4702: CALL_OW 88
// DialogueOff ;
4706: CALL_OW 7
// end ; end ; end_of_file
4710: LD_VAR 0 2
4714: RET
// export function PrepareRussian ; var i ; begin
4715: LD_INT 0
4717: PPUSH
4718: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 2
4727: PPUSH
4728: LD_EXP 34
4732: PPUSH
4733: LD_EXP 35
4737: PPUSH
4738: CALL_OW 12
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: LD_INT 4
4748: PPUSH
4749: CALL 5362 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4753: LD_INT 3
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: LD_EXP 34
4766: PPUSH
4767: LD_EXP 35
4771: PPUSH
4772: CALL_OW 12
4776: PPUSH
4777: LD_INT 1
4779: PPUSH
4780: LD_INT 4
4782: PPUSH
4783: CALL 5362 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4787: LD_INT 3
4789: PPUSH
4790: LD_INT 3
4792: PPUSH
4793: LD_INT 67
4795: PPUSH
4796: LD_EXP 34
4800: PPUSH
4801: LD_EXP 35
4805: PPUSH
4806: CALL_OW 12
4810: PPUSH
4811: LD_INT 1
4813: PPUSH
4814: LD_INT 2
4816: PPUSH
4817: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4821: LD_INT 3
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 21
4829: PPUSH
4830: LD_EXP 34
4834: PPUSH
4835: LD_EXP 35
4839: PPUSH
4840: CALL_OW 12
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: LD_INT 6
4850: PPUSH
4851: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4855: LD_INT 3
4857: PPUSH
4858: LD_INT 3
4860: PPUSH
4861: LD_INT 17
4863: PPUSH
4864: LD_EXP 34
4868: PPUSH
4869: LD_EXP 35
4873: PPUSH
4874: CALL_OW 12
4878: PPUSH
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 6
4884: PPUSH
4885: CALL 5362 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4889: LD_INT 3
4891: PPUSH
4892: LD_INT 3
4894: PPUSH
4895: LD_INT 32
4897: PPUSH
4898: LD_EXP 34
4902: PPUSH
4903: LD_EXP 35
4907: PPUSH
4908: CALL_OW 12
4912: PPUSH
4913: LD_INT 4
4915: PPUSH
4916: LD_INT 2
4918: PPUSH
4919: CALL 5362 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 22
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 21
4940: PUSH
4941: LD_INT 3
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 30
4950: PUSH
4951: LD_INT 32
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PPUSH
4963: CALL_OW 69
4967: PUSH
4968: FOR_IN
4969: IFFALSE 5009
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4971: LD_INT 3
4973: PPUSH
4974: LD_INT 3
4976: PPUSH
4977: LD_VAR 0 2
4981: PPUSH
4982: LD_EXP 34
4986: PPUSH
4987: LD_EXP 35
4991: PPUSH
4992: CALL_OW 12
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: LD_INT 1
5002: PPUSH
5003: CALL 5362 0 6
5007: GO 4968
5009: POP
5010: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 21
5028: PUSH
5029: LD_INT 3
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: LD_INT 30
5038: PUSH
5039: LD_INT 31
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: LIST
5050: PPUSH
5051: CALL_OW 69
5055: PUSH
5056: FOR_IN
5057: IFFALSE 5085
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5059: LD_EXP 34
5063: PPUSH
5064: LD_EXP 35
5068: PPUSH
5069: CALL_OW 12
5073: PPUSH
5074: LD_VAR 0 2
5078: PPUSH
5079: CALL 5472 0 2
5083: GO 5056
5085: POP
5086: POP
// end ; end_of_file
5087: LD_VAR 0 1
5091: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5092: LD_INT 0
5094: PPUSH
5095: PPUSH
// if exist_mode then
5096: LD_VAR 0 2
5100: IFFALSE 5125
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5102: LD_ADDR_VAR 0 4
5106: PUSH
5107: LD_EXP 43
5111: PUSH
5112: LD_VAR 0 1
5116: STR
5117: PPUSH
5118: CALL_OW 34
5122: ST_TO_ADDR
// end else
5123: GO 5140
// begin unit := NewCharacter ( ident ) ;
5125: LD_ADDR_VAR 0 4
5129: PUSH
5130: LD_VAR 0 1
5134: PPUSH
5135: CALL_OW 25
5139: ST_TO_ADDR
// end ; result := unit ;
5140: LD_ADDR_VAR 0 3
5144: PUSH
5145: LD_VAR 0 4
5149: ST_TO_ADDR
// end ;
5150: LD_VAR 0 3
5154: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5155: LD_INT 0
5157: PPUSH
5158: PPUSH
5159: PPUSH
// rnd = rand ( 1 , characters ) ;
5160: LD_ADDR_VAR 0 6
5164: PUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 12
5177: ST_TO_ADDR
// for i = 1 to characters do
5178: LD_ADDR_VAR 0 5
5182: PUSH
5183: DOUBLE
5184: LD_INT 1
5186: DEC
5187: ST_TO_ADDR
5188: LD_VAR 0 1
5192: PUSH
5193: FOR_TO
5194: IFFALSE 5304
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5196: LD_VAR 0 5
5200: PUSH
5201: LD_VAR 0 6
5205: EQUAL
5206: PUSH
5207: LD_VAR 0 1
5211: PUSH
5212: LD_VAR 0 5
5216: ARRAY
5217: PPUSH
5218: CALL_OW 258
5222: PUSH
5223: LD_INT 1
5225: EQUAL
5226: AND
5227: IFFALSE 5249
// Say ( characters [ i ] , dialogMID ) ;
5229: LD_VAR 0 1
5233: PUSH
5234: LD_VAR 0 5
5238: ARRAY
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5249: LD_VAR 0 5
5253: PUSH
5254: LD_VAR 0 6
5258: EQUAL
5259: PUSH
5260: LD_VAR 0 1
5264: PUSH
5265: LD_VAR 0 5
5269: ARRAY
5270: PPUSH
5271: CALL_OW 258
5275: PUSH
5276: LD_INT 2
5278: EQUAL
5279: AND
5280: IFFALSE 5302
// Say ( characters [ i ] , dialogFID ) ;
5282: LD_VAR 0 1
5286: PUSH
5287: LD_VAR 0 5
5291: ARRAY
5292: PPUSH
5293: LD_VAR 0 3
5297: PPUSH
5298: CALL_OW 88
// end ;
5302: GO 5193
5304: POP
5305: POP
// end ;
5306: LD_VAR 0 4
5310: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5311: LD_INT 0
5313: PPUSH
5314: PPUSH
// for i in charactersList do
5315: LD_ADDR_VAR 0 4
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: FOR_IN
5326: IFFALSE 5355
// begin if IsOk ( i ) then
5328: LD_VAR 0 4
5332: PPUSH
5333: CALL_OW 302
5337: IFFALSE 5353
// SaveCharacters ( i , ident ) ;
5339: LD_VAR 0 4
5343: PPUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: CALL_OW 38
// end ;
5353: GO 5325
5355: POP
5356: POP
// end ;
5357: LD_VAR 0 3
5361: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5362: LD_INT 0
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
// for i = 1 to count do
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: DOUBLE
5374: LD_INT 1
5376: DEC
5377: ST_TO_ADDR
5378: LD_VAR 0 6
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5465
// begin uc_side = side ;
5386: LD_ADDR_OWVAR 20
5390: PUSH
5391: LD_VAR 0 1
5395: ST_TO_ADDR
// uc_nation = nation ;
5396: LD_ADDR_OWVAR 21
5400: PUSH
5401: LD_VAR 0 2
5405: ST_TO_ADDR
// hc_gallery =  ;
5406: LD_ADDR_OWVAR 33
5410: PUSH
5411: LD_STRING 
5413: ST_TO_ADDR
// hc_name =  ;
5414: LD_ADDR_OWVAR 26
5418: PUSH
5419: LD_STRING 
5421: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5422: LD_INT 0
5424: PPUSH
5425: LD_VAR 0 5
5429: PPUSH
5430: LD_VAR 0 4
5434: PPUSH
5435: CALL_OW 380
// un = CreateHuman ;
5439: LD_ADDR_VAR 0 10
5443: PUSH
5444: CALL_OW 44
5448: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5449: LD_VAR 0 10
5453: PPUSH
5454: LD_VAR 0 3
5458: PPUSH
5459: CALL_OW 52
// end ;
5463: GO 5383
5465: POP
5466: POP
// end ;
5467: LD_VAR 0 7
5471: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
5476: PPUSH
// uc_side := GetSide ( b ) ;
5477: LD_ADDR_OWVAR 20
5481: PUSH
5482: LD_VAR 0 2
5486: PPUSH
5487: CALL_OW 255
5491: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5492: LD_ADDR_OWVAR 21
5496: PUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: CALL_OW 248
5506: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5507: LD_INT 0
5509: PPUSH
5510: LD_INT 1
5512: PPUSH
5513: LD_VAR 0 1
5517: PPUSH
5518: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5522: LD_ADDR_VAR 0 5
5526: PUSH
5527: LD_VAR 0 2
5531: PPUSH
5532: CALL_OW 254
5536: PUSH
5537: LD_INT 3
5539: MINUS
5540: ST_TO_ADDR
// if dir < 0 then
5541: LD_VAR 0 5
5545: PUSH
5546: LD_INT 0
5548: LESS
5549: IFFALSE 5565
// dir := 6 + dir ;
5551: LD_ADDR_VAR 0 5
5555: PUSH
5556: LD_INT 6
5558: PUSH
5559: LD_VAR 0 5
5563: PLUS
5564: ST_TO_ADDR
// un := CreateHuman ;
5565: LD_ADDR_VAR 0 4
5569: PUSH
5570: CALL_OW 44
5574: ST_TO_ADDR
// SetDir ( un , dir ) ;
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_VAR 0 5
5584: PPUSH
5585: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5589: LD_VAR 0 4
5593: PPUSH
5594: LD_VAR 0 2
5598: PPUSH
5599: CALL_OW 52
// end ;
5603: LD_VAR 0 3
5607: RET
// export function PrepareDifficulty ; begin
5608: LD_INT 0
5610: PPUSH
// if Difficulty = 1 then
5611: LD_OWVAR 67
5615: PUSH
5616: LD_INT 1
5618: EQUAL
5619: IFFALSE 5637
// begin RuSolMinLevel = 3 ;
5621: LD_ADDR_EXP 34
5625: PUSH
5626: LD_INT 3
5628: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5629: LD_ADDR_EXP 35
5633: PUSH
5634: LD_INT 6
5636: ST_TO_ADDR
// end ; if Difficulty = 2 then
5637: LD_OWVAR 67
5641: PUSH
5642: LD_INT 2
5644: EQUAL
5645: IFFALSE 5663
// begin RuSolMinLevel = 5 ;
5647: LD_ADDR_EXP 34
5651: PUSH
5652: LD_INT 5
5654: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5655: LD_ADDR_EXP 35
5659: PUSH
5660: LD_INT 6
5662: ST_TO_ADDR
// end ; if Difficulty = 3 then
5663: LD_OWVAR 67
5667: PUSH
5668: LD_INT 3
5670: EQUAL
5671: IFFALSE 5689
// begin RuSolMinLevel = 5 ;
5673: LD_ADDR_EXP 34
5677: PUSH
5678: LD_INT 5
5680: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5681: LD_ADDR_EXP 35
5685: PUSH
5686: LD_INT 7
5688: ST_TO_ADDR
// end ; end ;
5689: LD_VAR 0 1
5693: RET
// export function ShowQuery1 ; begin
5694: LD_INT 0
5696: PPUSH
// case query ( QKill ) of 1 :
5697: LD_STRING QKill
5699: PPUSH
5700: CALL_OW 97
5704: PUSH
5705: LD_INT 1
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5724
5713: POP
// begin result = 1 ;
5714: LD_ADDR_VAR 0 1
5718: PUSH
5719: LD_INT 1
5721: ST_TO_ADDR
// end ; 2 :
5722: GO 5763
5724: LD_INT 2
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5743
5732: POP
// begin result = 2 ;
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// end ; 3 :
5741: GO 5763
5743: LD_INT 3
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5762
5751: POP
// begin result = 3 ;
5752: LD_ADDR_VAR 0 1
5756: PUSH
5757: LD_INT 3
5759: ST_TO_ADDR
// end ; end ;
5760: GO 5763
5762: POP
// end ;
5763: LD_VAR 0 1
5767: RET
// export function ShowQuery2 ; begin
5768: LD_INT 0
5770: PPUSH
// case query ( QKill2 ) of 1 :
5771: LD_STRING QKill2
5773: PPUSH
5774: CALL_OW 97
5778: PUSH
5779: LD_INT 1
5781: DOUBLE
5782: EQUAL
5783: IFTRUE 5787
5785: GO 5798
5787: POP
// begin result = 1 ;
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 1
5795: ST_TO_ADDR
// end ; 2 :
5796: GO 5818
5798: LD_INT 2
5800: DOUBLE
5801: EQUAL
5802: IFTRUE 5806
5804: GO 5817
5806: POP
// begin result = 2 ;
5807: LD_ADDR_VAR 0 1
5811: PUSH
5812: LD_INT 2
5814: ST_TO_ADDR
// end ; end ;
5815: GO 5818
5817: POP
// end ;
5818: LD_VAR 0 1
5822: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5823: LD_INT 0
5825: PPUSH
5826: PPUSH
5827: PPUSH
5828: PPUSH
// for i = 1 to 72 do
5829: LD_ADDR_VAR 0 5
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_INT 72
5841: PUSH
5842: FOR_TO
5843: IFFALSE 5901
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5845: LD_VAR 0 5
5849: PPUSH
5850: LD_VAR 0 1
5854: PPUSH
5855: CALL_OW 321
5859: PUSH
5860: LD_INT 1
5862: EQUAL
5863: PUSH
5864: LD_VAR 0 5
5868: PPUSH
5869: LD_VAR 0 3
5873: PPUSH
5874: CALL_OW 482
5878: PUSH
5879: LD_INT 1
5881: EQUAL
5882: AND
5883: IFFALSE 5899
// AddComResearch ( lab , i ) ;
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_VAR 0 5
5894: PPUSH
5895: CALL_OW 184
5899: GO 5842
5901: POP
5902: POP
// end ;
5903: LD_VAR 0 4
5907: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5908: LD_INT 0
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5916: LD_ADDR_VAR 0 7
5920: PUSH
5921: LD_VAR 0 2
5925: PPUSH
5926: CALL_OW 313
5930: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_INT 22
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 25
5955: PUSH
5956: LD_INT 2
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 24
5965: PUSH
5966: LD_INT 1000
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 70
5982: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5983: LD_ADDR_VAR 0 5
5987: PUSH
5988: LD_VAR 0 3
5992: PPUSH
5993: LD_INT 22
5995: PUSH
5996: LD_VAR 0 1
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 21
6007: PUSH
6008: LD_INT 3
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 24
6020: PUSH
6021: LD_INT 1000
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: EMPTY
6038: LIST
6039: PPUSH
6040: CALL_OW 70
6044: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
6045: LD_VAR 0 5
6049: NOT
6050: PUSH
6051: LD_VAR 0 8
6055: NOT
6056: AND
6057: IFFALSE 6061
// exit ;
6059: GO 6220
// if buildings_list > 0 and engineerOkInside > 0 then
6061: LD_VAR 0 5
6065: PUSH
6066: LD_INT 0
6068: GREATER
6069: PUSH
6070: LD_VAR 0 7
6074: PUSH
6075: LD_INT 0
6077: GREATER
6078: AND
6079: IFFALSE 6107
// for i in engineerOkInside do
6081: LD_ADDR_VAR 0 6
6085: PUSH
6086: LD_VAR 0 7
6090: PUSH
6091: FOR_IN
6092: IFFALSE 6105
// ComExitBuilding ( i ) ;
6094: LD_VAR 0 6
6098: PPUSH
6099: CALL_OW 122
6103: GO 6091
6105: POP
6106: POP
// if engineerOkOutside > 0 then
6107: LD_VAR 0 8
6111: PUSH
6112: LD_INT 0
6114: GREATER
6115: IFFALSE 6169
// begin for i in engineerOkOutside do
6117: LD_ADDR_VAR 0 6
6121: PUSH
6122: LD_VAR 0 8
6126: PUSH
6127: FOR_IN
6128: IFFALSE 6167
// for j in buildings_list do
6130: LD_ADDR_VAR 0 9
6134: PUSH
6135: LD_VAR 0 5
6139: PUSH
6140: FOR_IN
6141: IFFALSE 6163
// ComRepairBuilding ( i , j [ 1 ] ) ;
6143: LD_VAR 0 6
6147: PPUSH
6148: LD_VAR 0 9
6152: PUSH
6153: LD_INT 1
6155: ARRAY
6156: PPUSH
6157: CALL_OW 130
6161: GO 6140
6163: POP
6164: POP
6165: GO 6127
6167: POP
6168: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
6169: LD_VAR 0 5
6173: PUSH
6174: LD_INT 0
6176: EQUAL
6177: PUSH
6178: LD_VAR 0 8
6182: PUSH
6183: LD_INT 0
6185: GREATER
6186: AND
6187: IFFALSE 6220
// for i in engineerOkOutside do
6189: LD_ADDR_VAR 0 6
6193: PUSH
6194: LD_VAR 0 8
6198: PUSH
6199: FOR_IN
6200: IFFALSE 6218
// ComEnterUnit ( i , building ) ;
6202: LD_VAR 0 6
6206: PPUSH
6207: LD_VAR 0 2
6211: PPUSH
6212: CALL_OW 120
6216: GO 6199
6218: POP
6219: POP
// end ;
6220: LD_VAR 0 4
6224: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
6225: LD_INT 0
6227: PPUSH
6228: PPUSH
6229: PPUSH
6230: PPUSH
6231: PPUSH
6232: PPUSH
6233: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
6234: LD_ADDR_VAR 0 6
6238: PUSH
6239: LD_INT 22
6241: PUSH
6242: LD_VAR 0 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 25
6253: PUSH
6254: LD_INT 4
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 24
6263: PUSH
6264: LD_INT 251
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: PPUSH
6276: CALL_OW 69
6280: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6281: LD_ADDR_VAR 0 7
6285: PUSH
6286: LD_VAR 0 3
6290: PPUSH
6291: LD_INT 22
6293: PUSH
6294: LD_VAR 0 1
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: PUSH
6303: LD_INT 25
6305: PUSH
6306: LD_INT 4
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 50
6315: PUSH
6316: EMPTY
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 70
6328: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6329: LD_ADDR_VAR 0 10
6333: PUSH
6334: LD_VAR 0 3
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_VAR 0 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 21
6353: PUSH
6354: LD_INT 1
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 25
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 24
6383: PUSH
6384: LD_INT 750
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: PPUSH
6401: CALL_OW 70
6405: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6406: LD_ADDR_VAR 0 11
6410: PUSH
6411: LD_VAR 0 2
6415: PPUSH
6416: LD_INT 22
6418: PUSH
6419: LD_VAR 0 1
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 21
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: LD_INT 24
6460: PUSH
6461: LD_INT 1000
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 70
6482: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
6483: LD_VAR 0 10
6487: NOT
6488: PUSH
6489: LD_VAR 0 7
6493: NOT
6494: AND
6495: PUSH
6496: LD_VAR 0 11
6500: NOT
6501: AND
6502: IFFALSE 6506
// exit ;
6504: GO 6695
// if damageUnits > 0 and sci_list > 0 then
6506: LD_VAR 0 10
6510: PUSH
6511: LD_INT 0
6513: GREATER
6514: PUSH
6515: LD_VAR 0 6
6519: PUSH
6520: LD_INT 0
6522: GREATER
6523: AND
6524: IFFALSE 6557
// for i in damageUnits do
6526: LD_ADDR_VAR 0 8
6530: PUSH
6531: LD_VAR 0 10
6535: PUSH
6536: FOR_IN
6537: IFFALSE 6555
// ComMoveToArea ( i , healArea ) ;
6539: LD_VAR 0 8
6543: PPUSH
6544: LD_VAR 0 2
6548: PPUSH
6549: CALL_OW 113
6553: GO 6536
6555: POP
6556: POP
// if unitsToHeal > 0 and sci_list > 0 then
6557: LD_VAR 0 11
6561: PUSH
6562: LD_INT 0
6564: GREATER
6565: PUSH
6566: LD_VAR 0 6
6570: PUSH
6571: LD_INT 0
6573: GREATER
6574: AND
6575: IFFALSE 6634
// begin for i in sci_list do
6577: LD_ADDR_VAR 0 8
6581: PUSH
6582: LD_VAR 0 6
6586: PUSH
6587: FOR_IN
6588: IFFALSE 6632
// begin ComExitBuilding ( i ) ;
6590: LD_VAR 0 8
6594: PPUSH
6595: CALL_OW 122
// for j in unitsToHeal do
6599: LD_ADDR_VAR 0 9
6603: PUSH
6604: LD_VAR 0 11
6608: PUSH
6609: FOR_IN
6610: IFFALSE 6628
// AddComHeal ( i , j ) ;
6612: LD_VAR 0 8
6616: PPUSH
6617: LD_VAR 0 9
6621: PPUSH
6622: CALL_OW 188
6626: GO 6609
6628: POP
6629: POP
// end ;
6630: GO 6587
6632: POP
6633: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6634: LD_VAR 0 10
6638: PUSH
6639: LD_INT 0
6641: EQUAL
6642: PUSH
6643: LD_VAR 0 11
6647: PUSH
6648: LD_INT 0
6650: EQUAL
6651: AND
6652: PUSH
6653: LD_VAR 0 7
6657: PUSH
6658: LD_INT 0
6660: GREATER
6661: AND
6662: IFFALSE 6695
// for i in sci_listOutside do
6664: LD_ADDR_VAR 0 8
6668: PUSH
6669: LD_VAR 0 7
6673: PUSH
6674: FOR_IN
6675: IFFALSE 6693
// ComEnterUnit ( i , build ) ;
6677: LD_VAR 0 8
6681: PPUSH
6682: LD_VAR 0 4
6686: PPUSH
6687: CALL_OW 120
6691: GO 6674
6693: POP
6694: POP
// end ;
6695: LD_VAR 0 5
6699: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6700: LD_INT 0
6702: PPUSH
6703: PPUSH
6704: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6705: LD_INT 22
6707: PUSH
6708: LD_VAR 0 1
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 69
6735: PUSH
6736: LD_VAR 0 3
6740: LESSEQUAL
6741: IFFALSE 6849
// begin for i = 1 to vehCount do
6743: LD_ADDR_VAR 0 9
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_VAR 0 3
6757: PUSH
6758: FOR_TO
6759: IFFALSE 6847
// begin weapon = weaponTab [ i ] ;
6761: LD_ADDR_VAR 0 10
6765: PUSH
6766: LD_VAR 0 4
6770: PUSH
6771: LD_VAR 0 9
6775: ARRAY
6776: ST_TO_ADDR
// if weapon = 46 then
6777: LD_VAR 0 10
6781: PUSH
6782: LD_INT 46
6784: EQUAL
6785: IFFALSE 6816
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6787: LD_VAR 0 2
6791: PPUSH
6792: LD_INT 24
6794: PPUSH
6795: LD_VAR 0 5
6799: PPUSH
6800: LD_VAR 0 6
6804: PPUSH
6805: LD_VAR 0 10
6809: PPUSH
6810: CALL_OW 185
// end else
6814: GO 6845
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6816: LD_VAR 0 2
6820: PPUSH
6821: LD_VAR 0 7
6825: PPUSH
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_VAR 0 6
6835: PPUSH
6836: LD_VAR 0 10
6840: PPUSH
6841: CALL_OW 185
// end ; end ;
6845: GO 6758
6847: POP
6848: POP
// end ; end ;
6849: LD_VAR 0 8
6853: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6854: LD_INT 0
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
// for i := 1 to russianTanks do
6861: LD_ADDR_VAR 0 4
6865: PUSH
6866: DOUBLE
6867: LD_INT 1
6869: DEC
6870: ST_TO_ADDR
6871: LD_EXP 36
6875: PUSH
6876: FOR_TO
6877: IFFALSE 7359
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6879: LD_VAR 0 4
6883: PUSH
6884: LD_INT 5
6886: PUSH
6887: LD_INT 6
6889: PUSH
6890: LD_INT 6
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: EQUAL
6904: IFFALSE 7357
// begin repeat wait ( 0 0$1 ) ;
6906: LD_INT 35
6908: PPUSH
6909: CALL_OW 67
// for i in russianTanks do
6913: LD_ADDR_VAR 0 4
6917: PUSH
6918: LD_EXP 36
6922: PUSH
6923: FOR_IN
6924: IFFALSE 7345
// begin if GetLives ( i ) < 659 then
6926: LD_VAR 0 4
6930: PPUSH
6931: CALL_OW 256
6935: PUSH
6936: LD_INT 659
6938: LESS
6939: IFFALSE 7027
// begin tmp = i ;
6941: LD_ADDR_VAR 0 5
6945: PUSH
6946: LD_VAR 0 4
6950: ST_TO_ADDR
// for i := 1 to russianTanks do
6951: LD_ADDR_VAR 0 4
6955: PUSH
6956: DOUBLE
6957: LD_INT 1
6959: DEC
6960: ST_TO_ADDR
6961: LD_EXP 36
6965: PUSH
6966: FOR_TO
6967: IFFALSE 7025
// begin if tmp = russianTanks [ i ] then
6969: LD_VAR 0 5
6973: PUSH
6974: LD_EXP 36
6978: PUSH
6979: LD_VAR 0 4
6983: ARRAY
6984: EQUAL
6985: IFFALSE 7023
// begin russianTanks = Delete ( russianTanks , i ) ;
6987: LD_ADDR_EXP 36
6991: PUSH
6992: LD_EXP 36
6996: PPUSH
6997: LD_VAR 0 4
7001: PPUSH
7002: CALL_OW 3
7006: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
7007: LD_ADDR_EXP 37
7011: PUSH
7012: LD_EXP 37
7016: PUSH
7017: LD_VAR 0 5
7021: ADD
7022: ST_TO_ADDR
// end ; end ;
7023: GO 6966
7025: POP
7026: POP
// end ; wait ( 0 0$1 ) ;
7027: LD_INT 35
7029: PPUSH
7030: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
7034: LD_INT 23
7036: PPUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PPUSH
7047: CALL_OW 70
7051: PUSH
7052: LD_INT 2
7054: GREATER
7055: IFFALSE 7165
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7057: LD_ADDR_VAR 0 6
7061: PUSH
7062: LD_INT 22
7064: PUSH
7065: LD_VAR 0 2
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PPUSH
7074: CALL_OW 69
7078: PPUSH
7079: LD_VAR 0 4
7083: PPUSH
7084: CALL_OW 74
7088: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7089: LD_ADDR_VAR 0 7
7093: PUSH
7094: LD_INT 22
7096: PUSH
7097: LD_VAR 0 2
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PUSH
7106: LD_INT 2
7108: PUSH
7109: LD_INT 59
7111: PUSH
7112: EMPTY
7113: LIST
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 21
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PPUSH
7153: LD_VAR 0 4
7157: PPUSH
7158: CALL_OW 74
7162: ST_TO_ADDR
// end else
7163: GO 7277
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
7165: LD_ADDR_VAR 0 6
7169: PUSH
7170: LD_INT 23
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_VAR 0 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 71
7189: PPUSH
7190: LD_VAR 0 4
7194: PPUSH
7195: CALL_OW 74
7199: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7200: LD_ADDR_VAR 0 7
7204: PUSH
7205: LD_INT 23
7207: PPUSH
7208: LD_INT 22
7210: PUSH
7211: LD_VAR 0 2
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 2
7222: PUSH
7223: LD_INT 59
7225: PUSH
7226: EMPTY
7227: LIST
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: PPUSH
7262: CALL_OW 71
7266: PPUSH
7267: LD_VAR 0 4
7271: PPUSH
7272: CALL_OW 74
7276: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7277: LD_VAR 0 4
7281: PPUSH
7282: LD_VAR 0 6
7286: PPUSH
7287: CALL_OW 296
7291: PUSH
7292: LD_INT 8
7294: PLUS
7295: PUSH
7296: LD_VAR 0 4
7300: PPUSH
7301: LD_VAR 0 7
7305: PPUSH
7306: CALL_OW 296
7310: LESS
7311: IFFALSE 7329
// begin ComAttackUnit ( i , target1 ) ;
7313: LD_VAR 0 4
7317: PPUSH
7318: LD_VAR 0 6
7322: PPUSH
7323: CALL_OW 115
// end else
7327: GO 7343
// begin ComAttackUnit ( i , target2 ) ;
7329: LD_VAR 0 4
7333: PPUSH
7334: LD_VAR 0 7
7338: PPUSH
7339: CALL_OW 115
// end ; end ;
7343: GO 6923
7345: POP
7346: POP
// until russianTanks = 0 ;
7347: LD_EXP 36
7351: PUSH
7352: LD_INT 0
7354: EQUAL
7355: IFFALSE 6906
// end ; end ;
7357: GO 6876
7359: POP
7360: POP
// end ;
7361: LD_VAR 0 3
7365: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7377: LD_ADDR_VAR 0 8
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_VAR 0 1
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 21
7396: PUSH
7397: LD_INT 2
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 24
7406: PUSH
7407: LD_INT 660
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: LD_INT 58
7419: PUSH
7420: EMPTY
7421: LIST
7422: PUSH
7423: LD_INT 2
7425: PUSH
7426: LD_INT 34
7428: PUSH
7429: LD_INT 43
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 34
7438: PUSH
7439: LD_INT 44
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 34
7448: PUSH
7449: LD_INT 46
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: PPUSH
7473: CALL_OW 69
7477: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_VAR 0 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 3
7507: PUSH
7508: LD_INT 24
7510: PUSH
7511: LD_INT 660
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 69
7531: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7532: LD_ADDR_VAR 0 10
7536: PUSH
7537: LD_VAR 0 2
7541: PPUSH
7542: LD_INT 22
7544: PUSH
7545: LD_VAR 0 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 21
7556: PUSH
7557: LD_INT 2
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 24
7569: PUSH
7570: LD_INT 1000
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 70
7590: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7591: LD_ADDR_VAR 0 11
7595: PUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: LD_INT 22
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 21
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 24
7625: PUSH
7626: LD_INT 1000
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 58
7635: PUSH
7636: EMPTY
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PPUSH
7645: CALL_OW 70
7649: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7650: LD_ADDR_VAR 0 12
7654: PUSH
7655: EMPTY
7656: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_VAR 0 2
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_VAR 0 1
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 25
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PPUSH
7693: CALL_OW 70
7697: ST_TO_ADDR
// if damageVehicle_list = 0 and vehicleOK_list = 0 then
7698: LD_VAR 0 9
7702: PUSH
7703: LD_INT 0
7705: EQUAL
7706: PUSH
7707: LD_VAR 0 8
7711: PUSH
7712: LD_INT 0
7714: EQUAL
7715: AND
7716: IFFALSE 7720
// exit ;
7718: GO 8124
// if damageVehicle_list > 0 then
7720: LD_VAR 0 9
7724: PUSH
7725: LD_INT 0
7727: GREATER
7728: IFFALSE 7766
// for i in damageVehicle_list do
7730: LD_ADDR_VAR 0 6
7734: PUSH
7735: LD_VAR 0 9
7739: PUSH
7740: FOR_IN
7741: IFFALSE 7764
// ComMoveXY ( i , repX , repY ) ;
7743: LD_VAR 0 6
7747: PPUSH
7748: LD_VAR 0 3
7752: PPUSH
7753: LD_VAR 0 4
7757: PPUSH
7758: CALL_OW 111
7762: GO 7740
7764: POP
7765: POP
// if vehicleNeedRepair_list > 0 then
7766: LD_VAR 0 10
7770: PUSH
7771: LD_INT 0
7773: GREATER
7774: IFFALSE 7875
// begin for i in vehicleNeedRepair_list do
7776: LD_ADDR_VAR 0 6
7780: PUSH
7781: LD_VAR 0 10
7785: PUSH
7786: FOR_IN
7787: IFFALSE 7873
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7789: LD_ADDR_VAR 0 12
7793: PUSH
7794: LD_VAR 0 12
7798: PUSH
7799: LD_VAR 0 6
7803: PPUSH
7804: CALL_OW 313
7808: ADD
7809: ST_TO_ADDR
// for j in mechanicInside_list do
7810: LD_ADDR_VAR 0 7
7814: PUSH
7815: LD_VAR 0 12
7819: PUSH
7820: FOR_IN
7821: IFFALSE 7869
// begin ComExitVehicle ( j ) ;
7823: LD_VAR 0 7
7827: PPUSH
7828: CALL_OW 121
// wait ( 0 0$1 ) ;
7832: LD_INT 35
7834: PPUSH
7835: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7839: LD_VAR 0 7
7843: PPUSH
7844: LD_VAR 0 6
7848: PPUSH
7849: CALL_OW 189
// AddComEnterUnit ( j , i ) ;
7853: LD_VAR 0 7
7857: PPUSH
7858: LD_VAR 0 6
7862: PPUSH
7863: CALL_OW 180
// end ;
7867: GO 7820
7869: POP
7870: POP
// end ;
7871: GO 7786
7873: POP
7874: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7875: LD_VAR 0 11
7879: PUSH
7880: LD_INT 0
7882: GREATER
7883: IFFALSE 7907
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7885: LD_VAR 0 13
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PPUSH
7894: LD_VAR 0 11
7898: PUSH
7899: LD_INT 1
7901: ARRAY
7902: PPUSH
7903: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7907: LD_VAR 0 8
7911: PUSH
7912: LD_INT 0
7914: GREATER
7915: PUSH
7916: LD_EXP 37
7920: PUSH
7921: LD_INT 0
7923: GREATER
7924: AND
7925: IFFALSE 8056
// begin for i := 1 to vehicleOK_list do
7927: LD_ADDR_VAR 0 6
7931: PUSH
7932: DOUBLE
7933: LD_INT 1
7935: DEC
7936: ST_TO_ADDR
7937: LD_VAR 0 8
7941: PUSH
7942: FOR_TO
7943: IFFALSE 8054
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7945: LD_VAR 0 6
7949: PUSH
7950: LD_INT 5
7952: PUSH
7953: LD_INT 6
7955: PUSH
7956: LD_INT 6
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: LD_OWVAR 67
7968: ARRAY
7969: EQUAL
7970: IFFALSE 8052
// begin for i in vehicleOk_list do
7972: LD_ADDR_VAR 0 6
7976: PUSH
7977: LD_VAR 0 8
7981: PUSH
7982: FOR_IN
7983: IFFALSE 8015
// begin russianTanks = russianTanks ^ i ;
7985: LD_ADDR_EXP 36
7989: PUSH
7990: LD_EXP 36
7994: PUSH
7995: LD_VAR 0 6
7999: ADD
8000: ST_TO_ADDR
// SetFuel ( i , 100 ) ;
8001: LD_VAR 0 6
8005: PPUSH
8006: LD_INT 100
8008: PPUSH
8009: CALL_OW 240
// end ;
8013: GO 7982
8015: POP
8016: POP
// for i in russianDamageTanks do
8017: LD_ADDR_VAR 0 6
8021: PUSH
8022: LD_EXP 37
8026: PUSH
8027: FOR_IN
8028: IFFALSE 8048
// russianDamageTanks = russianDamageTanks diff i ;
8030: LD_ADDR_EXP 37
8034: PUSH
8035: LD_EXP 37
8039: PUSH
8040: LD_VAR 0 6
8044: DIFF
8045: ST_TO_ADDR
8046: GO 8027
8048: POP
8049: POP
// break ;
8050: GO 8054
// end ; end ;
8052: GO 7942
8054: POP
8055: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8056: LD_ADDR_VAR 0 6
8060: PUSH
8061: LD_VAR 0 2
8065: PPUSH
8066: LD_INT 22
8068: PUSH
8069: LD_VAR 0 1
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 25
8080: PUSH
8081: LD_INT 3
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 70
8096: NOT
8097: PUSH
8098: FOR_IN
8099: IFFALSE 8122
// ComMoveXY ( i , repX , repY ) ;
8101: LD_VAR 0 6
8105: PPUSH
8106: LD_VAR 0 3
8110: PPUSH
8111: LD_VAR 0 4
8115: PPUSH
8116: CALL_OW 111
8120: GO 8098
8122: POP
8123: POP
// end ;
8124: LD_VAR 0 5
8128: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
8133: PPUSH
8134: PPUSH
// enable ;
8135: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8136: LD_ADDR_VAR 0 7
8140: PUSH
8141: LD_VAR 0 3
8145: PPUSH
8146: CALL_OW 435
8150: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8151: LD_ADDR_VAR 0 6
8155: PUSH
8156: LD_INT 22
8158: PUSH
8159: LD_VAR 0 1
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 34
8170: PUSH
8171: LD_VAR 0 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8189: LD_VAR 0 6
8193: PUSH
8194: LD_INT 0
8196: GREATER
8197: PUSH
8198: LD_VAR 0 3
8202: PPUSH
8203: CALL_OW 435
8207: AND
8208: PUSH
8209: LD_VAR 0 7
8213: PUSH
8214: LD_INT 0
8216: GREATER
8217: AND
8218: IFFALSE 8267
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8220: LD_VAR 0 6
8224: PUSH
8225: LD_INT 1
8227: ARRAY
8228: PPUSH
8229: LD_VAR 0 7
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: LD_VAR 0 7
8242: PUSH
8243: LD_INT 2
8245: ARRAY
8246: PPUSH
8247: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8251: LD_VAR 0 6
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: LD_INT 100
8262: PPUSH
8263: CALL_OW 240
// end ; end ;
8267: LD_VAR 0 4
8271: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
8272: LD_INT 0
8274: PPUSH
8275: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
8276: LD_INT 22
8278: PUSH
8279: LD_VAR 0 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: PUSH
8307: LD_INT 0
8309: GREATER
8310: PUSH
8311: LD_INT 22
8313: PUSH
8314: LD_VAR 0 1
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 21
8325: PUSH
8326: LD_INT 3
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 3
8335: PUSH
8336: LD_INT 24
8338: PUSH
8339: LD_INT 1000
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: LD_INT 0
8362: EQUAL
8363: AND
8364: PUSH
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 0
8372: GREATER
8373: AND
8374: IFFALSE 8473
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8376: LD_ADDR_VAR 0 4
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_VAR 0 1
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PPUSH
8407: CALL_OW 69
8411: PUSH
8412: FOR_IN
8413: IFFALSE 8471
// begin AddComExitBuilding ( i ) ;
8415: LD_VAR 0 4
8419: PPUSH
8420: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8424: LD_VAR 0 4
8428: PPUSH
8429: LD_VAR 0 2
8433: PUSH
8434: LD_INT 1
8436: ARRAY
8437: PPUSH
8438: LD_VAR 0 2
8442: PUSH
8443: LD_INT 2
8445: ARRAY
8446: PPUSH
8447: LD_VAR 0 2
8451: PUSH
8452: LD_INT 3
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 2
8460: PUSH
8461: LD_INT 4
8463: ARRAY
8464: PPUSH
8465: CALL_OW 205
// end ;
8469: GO 8412
8471: POP
8472: POP
// end ; end ;
8473: LD_VAR 0 3
8477: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8478: LD_INT 0
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
8486: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8487: LD_ADDR_VAR 0 7
8491: PUSH
8492: LD_INT 22
8494: PUSH
8495: LD_VAR 0 1
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 25
8506: PUSH
8507: LD_INT 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 56
8516: PUSH
8517: EMPTY
8518: LIST
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 700
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PPUSH
8536: CALL_OW 69
8540: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8541: LD_ADDR_VAR 0 8
8545: PUSH
8546: LD_INT 22
8548: PUSH
8549: LD_VAR 0 1
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 30
8560: PUSH
8561: LD_INT 32
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 58
8570: PUSH
8571: EMPTY
8572: LIST
8573: PUSH
8574: LD_INT 24
8576: PUSH
8577: LD_INT 251
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8595: LD_ADDR_VAR 0 10
8599: PUSH
8600: LD_INT 22
8602: PUSH
8603: LD_VAR 0 1
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 2
8614: PUSH
8615: LD_INT 25
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 25
8627: PUSH
8628: LD_INT 8
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 25
8637: PUSH
8638: LD_INT 9
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8660: LD_ADDR_VAR 0 9
8664: PUSH
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 313
8674: PUSH
8675: LD_VAR 0 10
8679: DIFF
8680: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8681: LD_VAR 0 8
8685: PUSH
8686: LD_INT 0
8688: EQUAL
8689: PUSH
8690: LD_VAR 0 9
8694: PUSH
8695: LD_INT 0
8697: EQUAL
8698: AND
8699: IFFALSE 8745
// begin for i in soldiers_list do
8701: LD_ADDR_VAR 0 5
8705: PUSH
8706: LD_VAR 0 7
8710: PUSH
8711: FOR_IN
8712: IFFALSE 8741
// begin if IsOK ( build ) then
8714: LD_VAR 0 2
8718: PPUSH
8719: CALL_OW 302
8723: IFFALSE 8739
// ComEnterUnit ( i , build ) ;
8725: LD_VAR 0 5
8729: PPUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: CALL_OW 120
// end ;
8739: GO 8711
8741: POP
8742: POP
// end else
8743: GO 8830
// begin for i = 1 to turretList do
8745: LD_ADDR_VAR 0 5
8749: PUSH
8750: DOUBLE
8751: LD_INT 1
8753: DEC
8754: ST_TO_ADDR
8755: LD_VAR 0 8
8759: PUSH
8760: FOR_TO
8761: IFFALSE 8828
// begin for j = 1 to temp do
8763: LD_ADDR_VAR 0 6
8767: PUSH
8768: DOUBLE
8769: LD_INT 1
8771: DEC
8772: ST_TO_ADDR
8773: LD_VAR 0 9
8777: PUSH
8778: FOR_TO
8779: IFFALSE 8824
// begin ComExitBuilding ( temp [ j ] ) ;
8781: LD_VAR 0 9
8785: PUSH
8786: LD_VAR 0 6
8790: ARRAY
8791: PPUSH
8792: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8796: LD_VAR 0 9
8800: PUSH
8801: LD_VAR 0 6
8805: ARRAY
8806: PPUSH
8807: LD_VAR 0 8
8811: PUSH
8812: LD_VAR 0 5
8816: ARRAY
8817: PPUSH
8818: CALL_OW 180
// end ;
8822: GO 8778
8824: POP
8825: POP
// end ;
8826: GO 8760
8828: POP
8829: POP
// end ; end ;
8830: LD_VAR 0 4
8834: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8835: LD_INT 0
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8842: LD_ADDR_VAR 0 6
8846: PUSH
8847: LD_INT 22
8849: PUSH
8850: LD_VAR 0 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 31
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 32
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 30
8884: PUSH
8885: LD_INT 33
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 30
8894: PUSH
8895: LD_INT 4
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 30
8904: PUSH
8905: LD_INT 5
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8929: LD_ADDR_VAR 0 7
8933: PUSH
8934: LD_INT 22
8936: PUSH
8937: LD_VAR 0 2
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 21
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 58
8958: PUSH
8959: EMPTY
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8972: LD_VAR 0 6
8976: PUSH
8977: LD_INT 0
8979: GREATER
8980: PUSH
8981: LD_VAR 0 7
8985: PUSH
8986: LD_INT 0
8988: GREATER
8989: AND
8990: IFFALSE 9060
// begin for i in turretsList do
8992: LD_ADDR_VAR 0 4
8996: PUSH
8997: LD_VAR 0 6
9001: PUSH
9002: FOR_IN
9003: IFFALSE 9058
// begin for j in enemyBuildings do
9005: LD_ADDR_VAR 0 5
9009: PUSH
9010: LD_VAR 0 7
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9054
// begin if GetDistUnits ( i , j ) < 20 then
9018: LD_VAR 0 4
9022: PPUSH
9023: LD_VAR 0 5
9027: PPUSH
9028: CALL_OW 296
9032: PUSH
9033: LD_INT 20
9035: LESS
9036: IFFALSE 9052
// begin ComAttackUnit ( i , j ) ;
9038: LD_VAR 0 4
9042: PPUSH
9043: LD_VAR 0 5
9047: PPUSH
9048: CALL_OW 115
// end ; end ;
9052: GO 9015
9054: POP
9055: POP
// end ;
9056: GO 9002
9058: POP
9059: POP
// end ; end ;
9060: LD_VAR 0 3
9064: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
9070: PPUSH
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
// for i = 1 to medicCount do
9078: LD_ADDR_VAR 0 14
9082: PUSH
9083: DOUBLE
9084: LD_INT 1
9086: DEC
9087: ST_TO_ADDR
9088: LD_VAR 0 7
9092: PUSH
9093: FOR_TO
9094: IFFALSE 9176
// begin uc_side = side ;
9096: LD_ADDR_OWVAR 20
9100: PUSH
9101: LD_VAR 0 1
9105: ST_TO_ADDR
// uc_nation = nation ;
9106: LD_ADDR_OWVAR 21
9110: PUSH
9111: LD_VAR 0 2
9115: ST_TO_ADDR
// hc_name =  ;
9116: LD_ADDR_OWVAR 26
9120: PUSH
9121: LD_STRING 
9123: ST_TO_ADDR
// hc_gallery =  ;
9124: LD_ADDR_OWVAR 33
9128: PUSH
9129: LD_STRING 
9131: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 4
9137: PPUSH
9138: LD_VAR 0 8
9142: PPUSH
9143: CALL_OW 380
// un = CreateHuman ;
9147: LD_ADDR_VAR 0 16
9151: PUSH
9152: CALL_OW 44
9156: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9157: LD_VAR 0 16
9161: PPUSH
9162: LD_VAR 0 9
9166: PPUSH
9167: LD_INT 0
9169: PPUSH
9170: CALL_OW 49
// end ;
9174: GO 9093
9176: POP
9177: POP
// for i = 1 to soldierCount do
9178: LD_ADDR_VAR 0 14
9182: PUSH
9183: DOUBLE
9184: LD_INT 1
9186: DEC
9187: ST_TO_ADDR
9188: LD_VAR 0 3
9192: PUSH
9193: FOR_TO
9194: IFFALSE 9276
// begin uc_side = side ;
9196: LD_ADDR_OWVAR 20
9200: PUSH
9201: LD_VAR 0 1
9205: ST_TO_ADDR
// uc_nation = nation ;
9206: LD_ADDR_OWVAR 21
9210: PUSH
9211: LD_VAR 0 2
9215: ST_TO_ADDR
// hc_name =  ;
9216: LD_ADDR_OWVAR 26
9220: PUSH
9221: LD_STRING 
9223: ST_TO_ADDR
// hc_gallery =  ;
9224: LD_ADDR_OWVAR 33
9228: PUSH
9229: LD_STRING 
9231: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9232: LD_INT 0
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: LD_VAR 0 8
9242: PPUSH
9243: CALL_OW 380
// un = CreateHuman ;
9247: LD_ADDR_VAR 0 16
9251: PUSH
9252: CALL_OW 44
9256: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9257: LD_VAR 0 16
9261: PPUSH
9262: LD_VAR 0 9
9266: PPUSH
9267: LD_INT 0
9269: PPUSH
9270: CALL_OW 49
// end ;
9274: GO 9193
9276: POP
9277: POP
// for i = 1 to sniperCount do
9278: LD_ADDR_VAR 0 14
9282: PUSH
9283: DOUBLE
9284: LD_INT 1
9286: DEC
9287: ST_TO_ADDR
9288: LD_VAR 0 4
9292: PUSH
9293: FOR_TO
9294: IFFALSE 9376
// begin uc_side = side ;
9296: LD_ADDR_OWVAR 20
9300: PUSH
9301: LD_VAR 0 1
9305: ST_TO_ADDR
// uc_nation = nation ;
9306: LD_ADDR_OWVAR 21
9310: PUSH
9311: LD_VAR 0 2
9315: ST_TO_ADDR
// hc_name =  ;
9316: LD_ADDR_OWVAR 26
9320: PUSH
9321: LD_STRING 
9323: ST_TO_ADDR
// hc_gallery =  ;
9324: LD_ADDR_OWVAR 33
9328: PUSH
9329: LD_STRING 
9331: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9332: LD_INT 0
9334: PPUSH
9335: LD_INT 5
9337: PPUSH
9338: LD_VAR 0 8
9342: PPUSH
9343: CALL_OW 380
// un = CreateHuman ;
9347: LD_ADDR_VAR 0 16
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9357: LD_VAR 0 16
9361: PPUSH
9362: LD_VAR 0 9
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: CALL_OW 49
// end ;
9374: GO 9293
9376: POP
9377: POP
// for i = 1 to bazookCount do
9378: LD_ADDR_VAR 0 14
9382: PUSH
9383: DOUBLE
9384: LD_INT 1
9386: DEC
9387: ST_TO_ADDR
9388: LD_VAR 0 5
9392: PUSH
9393: FOR_TO
9394: IFFALSE 9476
// begin uc_side = side ;
9396: LD_ADDR_OWVAR 20
9400: PUSH
9401: LD_VAR 0 1
9405: ST_TO_ADDR
// uc_nation = nation ;
9406: LD_ADDR_OWVAR 21
9410: PUSH
9411: LD_VAR 0 2
9415: ST_TO_ADDR
// hc_name =  ;
9416: LD_ADDR_OWVAR 26
9420: PUSH
9421: LD_STRING 
9423: ST_TO_ADDR
// hc_gallery =  ;
9424: LD_ADDR_OWVAR 33
9428: PUSH
9429: LD_STRING 
9431: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9432: LD_INT 0
9434: PPUSH
9435: LD_INT 9
9437: PPUSH
9438: LD_VAR 0 8
9442: PPUSH
9443: CALL_OW 380
// un = CreateHuman ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 44
9456: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 9
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// end ;
9474: GO 9393
9476: POP
9477: POP
// for i = 1 to mortalCount do
9478: LD_ADDR_VAR 0 14
9482: PUSH
9483: DOUBLE
9484: LD_INT 1
9486: DEC
9487: ST_TO_ADDR
9488: LD_VAR 0 6
9492: PUSH
9493: FOR_TO
9494: IFFALSE 9576
// begin uc_side = side ;
9496: LD_ADDR_OWVAR 20
9500: PUSH
9501: LD_VAR 0 1
9505: ST_TO_ADDR
// uc_nation = nation ;
9506: LD_ADDR_OWVAR 21
9510: PUSH
9511: LD_VAR 0 2
9515: ST_TO_ADDR
// hc_name =  ;
9516: LD_ADDR_OWVAR 26
9520: PUSH
9521: LD_STRING 
9523: ST_TO_ADDR
// hc_gallery =  ;
9524: LD_ADDR_OWVAR 33
9528: PUSH
9529: LD_STRING 
9531: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9532: LD_INT 0
9534: PPUSH
9535: LD_INT 8
9537: PPUSH
9538: LD_VAR 0 8
9542: PPUSH
9543: CALL_OW 380
// un = CreateHuman ;
9547: LD_ADDR_VAR 0 16
9551: PUSH
9552: CALL_OW 44
9556: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9557: LD_VAR 0 16
9561: PPUSH
9562: LD_VAR 0 9
9566: PPUSH
9567: LD_INT 0
9569: PPUSH
9570: CALL_OW 49
// end ;
9574: GO 9493
9576: POP
9577: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9578: LD_ADDR_VAR 0 19
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_VAR 0 1
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 8
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 9
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PPUSH
9649: CALL_OW 69
9653: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9654: LD_ADDR_VAR 0 18
9658: PUSH
9659: LD_INT 22
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 25
9673: PUSH
9674: LD_INT 4
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 69
9689: ST_TO_ADDR
// for i in medic_list do
9690: LD_ADDR_VAR 0 14
9694: PUSH
9695: LD_VAR 0 18
9699: PUSH
9700: FOR_IN
9701: IFFALSE 9719
// ComMoveToArea ( i , healArea ) ;
9703: LD_VAR 0 14
9707: PPUSH
9708: LD_VAR 0 10
9712: PPUSH
9713: CALL_OW 113
9717: GO 9700
9719: POP
9720: POP
// if strategy = 1 then
9721: LD_VAR 0 12
9725: PUSH
9726: LD_INT 1
9728: EQUAL
9729: IFFALSE 10434
// begin repeat wait ( 0 0$3 ) ;
9731: LD_INT 105
9733: PPUSH
9734: CALL_OW 67
// for i in soldiersOK_list do
9738: LD_ADDR_VAR 0 14
9742: PUSH
9743: LD_VAR 0 19
9747: PUSH
9748: FOR_IN
9749: IFFALSE 9783
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9751: LD_VAR 0 14
9755: PPUSH
9756: LD_INT 80
9758: PPUSH
9759: LD_INT 109
9761: PPUSH
9762: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9766: LD_VAR 0 14
9770: PPUSH
9771: LD_INT 39
9773: PPUSH
9774: LD_INT 49
9776: PPUSH
9777: CALL_OW 174
// end ;
9781: GO 9748
9783: POP
9784: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9785: LD_INT 15
9787: PPUSH
9788: LD_INT 22
9790: PUSH
9791: LD_VAR 0 1
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PPUSH
9800: CALL_OW 70
9804: PUSH
9805: LD_INT 0
9807: GREATER
9808: IFFALSE 9731
// repeat wait ( 0 0$1 ) ;
9810: LD_INT 35
9812: PPUSH
9813: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9817: LD_ADDR_VAR 0 17
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_VAR 0 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 3
9839: PUSH
9840: LD_INT 24
9842: PUSH
9843: LD_INT 550
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 24
9856: PUSH
9857: LD_INT 250
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9878: LD_ADDR_VAR 0 19
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_VAR 0 1
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 25
9900: PUSH
9901: LD_INT 1
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 25
9910: PUSH
9911: LD_INT 5
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 25
9920: PUSH
9921: LD_INT 8
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: LD_INT 25
9930: PUSH
9931: LD_INT 9
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 24
9947: PUSH
9948: LD_INT 1000
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 69
9964: ST_TO_ADDR
// if medicCount > 0 then
9965: LD_VAR 0 7
9969: PUSH
9970: LD_INT 0
9972: GREATER
9973: IFFALSE 10047
// begin if damageUnit_list > 0 then
9975: LD_VAR 0 17
9979: PUSH
9980: LD_INT 0
9982: GREATER
9983: IFFALSE 10047
// begin for i in damageUnit_list do
9985: LD_ADDR_VAR 0 14
9989: PUSH
9990: LD_VAR 0 17
9994: PUSH
9995: FOR_IN
9996: IFFALSE 10045
// begin ComMoveToArea ( i , healArea ) ;
9998: LD_VAR 0 14
10002: PPUSH
10003: LD_VAR 0 10
10007: PPUSH
10008: CALL_OW 113
// for j in medic_list do
10012: LD_ADDR_VAR 0 15
10016: PUSH
10017: LD_VAR 0 18
10021: PUSH
10022: FOR_IN
10023: IFFALSE 10041
// AddComHeal ( j , i ) ;
10025: LD_VAR 0 15
10029: PPUSH
10030: LD_VAR 0 14
10034: PPUSH
10035: CALL_OW 188
10039: GO 10022
10041: POP
10042: POP
// end ;
10043: GO 9995
10045: POP
10046: POP
// end ; end ; for i in soldiersOK_list do
10047: LD_ADDR_VAR 0 14
10051: PUSH
10052: LD_VAR 0 19
10056: PUSH
10057: FOR_IN
10058: IFFALSE 10234
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10060: LD_ADDR_VAR 0 22
10064: PUSH
10065: LD_INT 22
10067: PUSH
10068: LD_VAR 0 11
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 69
10081: PPUSH
10082: LD_VAR 0 14
10086: PPUSH
10087: CALL_OW 74
10091: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10092: LD_ADDR_VAR 0 23
10096: PUSH
10097: LD_INT 22
10099: PUSH
10100: LD_VAR 0 11
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 2
10111: PUSH
10112: LD_INT 59
10114: PUSH
10115: EMPTY
10116: LIST
10117: PUSH
10118: LD_INT 21
10120: PUSH
10121: LD_INT 1
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 21
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: EMPTY
10149: LIST
10150: PPUSH
10151: CALL_OW 69
10155: PPUSH
10156: LD_VAR 0 14
10160: PPUSH
10161: CALL_OW 74
10165: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10166: LD_VAR 0 14
10170: PPUSH
10171: LD_VAR 0 22
10175: PPUSH
10176: CALL_OW 296
10180: PUSH
10181: LD_INT 8
10183: PLUS
10184: PUSH
10185: LD_VAR 0 14
10189: PPUSH
10190: LD_VAR 0 23
10194: PPUSH
10195: CALL_OW 296
10199: LESS
10200: IFFALSE 10218
// begin ComAttackUnit ( i , target1 ) ;
10202: LD_VAR 0 14
10206: PPUSH
10207: LD_VAR 0 22
10211: PPUSH
10212: CALL_OW 115
// end else
10216: GO 10232
// begin ComAttackUnit ( i , target2 ) ;
10218: LD_VAR 0 14
10222: PPUSH
10223: LD_VAR 0 23
10227: PPUSH
10228: CALL_OW 115
// end ; end ;
10232: GO 10057
10234: POP
10235: POP
// for i in soldiersOK_list do
10236: LD_ADDR_VAR 0 14
10240: PUSH
10241: LD_VAR 0 19
10245: PUSH
10246: FOR_IN
10247: IFFALSE 10423
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10249: LD_ADDR_VAR 0 22
10253: PUSH
10254: LD_INT 22
10256: PUSH
10257: LD_VAR 0 11
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PPUSH
10266: CALL_OW 69
10270: PPUSH
10271: LD_VAR 0 14
10275: PPUSH
10276: CALL_OW 74
10280: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10281: LD_ADDR_VAR 0 23
10285: PUSH
10286: LD_INT 22
10288: PUSH
10289: LD_VAR 0 11
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: LD_INT 59
10303: PUSH
10304: EMPTY
10305: LIST
10306: PUSH
10307: LD_INT 21
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 2
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: EMPTY
10338: LIST
10339: PPUSH
10340: CALL_OW 69
10344: PPUSH
10345: LD_VAR 0 14
10349: PPUSH
10350: CALL_OW 74
10354: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10355: LD_VAR 0 14
10359: PPUSH
10360: LD_VAR 0 22
10364: PPUSH
10365: CALL_OW 296
10369: PUSH
10370: LD_INT 8
10372: PLUS
10373: PUSH
10374: LD_VAR 0 14
10378: PPUSH
10379: LD_VAR 0 23
10383: PPUSH
10384: CALL_OW 296
10388: LESS
10389: IFFALSE 10407
// begin ComAttackUnit ( i , target1 ) ;
10391: LD_VAR 0 14
10395: PPUSH
10396: LD_VAR 0 22
10400: PPUSH
10401: CALL_OW 115
// end else
10405: GO 10421
// begin ComAttackUnit ( i , target2 ) ;
10407: LD_VAR 0 14
10411: PPUSH
10412: LD_VAR 0 23
10416: PPUSH
10417: CALL_OW 115
// end ; end ;
10421: GO 10246
10423: POP
10424: POP
// until soldiersOK_list = [ ] ;
10425: LD_VAR 0 19
10429: PUSH
10430: EMPTY
10431: EQUAL
10432: IFFALSE 9810
// end ; if strategy = 2 then
10434: LD_VAR 0 12
10438: PUSH
10439: LD_INT 2
10441: EQUAL
10442: IFFALSE 11147
// begin repeat wait ( 0 0$1 ) ;
10444: LD_INT 35
10446: PPUSH
10447: CALL_OW 67
// for i in soldiersOK_list do
10451: LD_ADDR_VAR 0 14
10455: PUSH
10456: LD_VAR 0 19
10460: PUSH
10461: FOR_IN
10462: IFFALSE 10496
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10464: LD_VAR 0 14
10468: PPUSH
10469: LD_INT 117
10471: PPUSH
10472: LD_INT 97
10474: PPUSH
10475: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10479: LD_VAR 0 14
10483: PPUSH
10484: LD_INT 94
10486: PPUSH
10487: LD_INT 50
10489: PPUSH
10490: CALL_OW 174
// end ;
10494: GO 10461
10496: POP
10497: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10498: LD_INT 16
10500: PPUSH
10501: LD_INT 22
10503: PUSH
10504: LD_VAR 0 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 70
10517: PUSH
10518: LD_INT 0
10520: GREATER
10521: IFFALSE 10444
// repeat wait ( 0 0$3 ) ;
10523: LD_INT 105
10525: PPUSH
10526: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10530: LD_ADDR_VAR 0 17
10534: PUSH
10535: LD_INT 22
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: LD_INT 3
10552: PUSH
10553: LD_INT 24
10555: PUSH
10556: LD_INT 550
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 24
10569: PUSH
10570: LD_INT 250
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PPUSH
10586: CALL_OW 69
10590: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10591: LD_ADDR_VAR 0 19
10595: PUSH
10596: LD_INT 22
10598: PUSH
10599: LD_VAR 0 1
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 2
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 1
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 25
10623: PUSH
10624: LD_INT 5
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 25
10633: PUSH
10634: LD_INT 8
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 25
10643: PUSH
10644: LD_INT 9
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 24
10660: PUSH
10661: LD_INT 1000
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: ST_TO_ADDR
// if medicCount > 0 then
10678: LD_VAR 0 7
10682: PUSH
10683: LD_INT 0
10685: GREATER
10686: IFFALSE 10760
// begin if damageUnit_list > 0 then
10688: LD_VAR 0 17
10692: PUSH
10693: LD_INT 0
10695: GREATER
10696: IFFALSE 10760
// begin for i in damageUnit_list do
10698: LD_ADDR_VAR 0 14
10702: PUSH
10703: LD_VAR 0 17
10707: PUSH
10708: FOR_IN
10709: IFFALSE 10758
// begin ComMoveToArea ( i , healArea ) ;
10711: LD_VAR 0 14
10715: PPUSH
10716: LD_VAR 0 10
10720: PPUSH
10721: CALL_OW 113
// for j in medic_list do
10725: LD_ADDR_VAR 0 15
10729: PUSH
10730: LD_VAR 0 18
10734: PUSH
10735: FOR_IN
10736: IFFALSE 10754
// AddComHeal ( j , i ) ;
10738: LD_VAR 0 15
10742: PPUSH
10743: LD_VAR 0 14
10747: PPUSH
10748: CALL_OW 188
10752: GO 10735
10754: POP
10755: POP
// end ;
10756: GO 10708
10758: POP
10759: POP
// end ; end ; for i in soldiersOK_list do
10760: LD_ADDR_VAR 0 14
10764: PUSH
10765: LD_VAR 0 19
10769: PUSH
10770: FOR_IN
10771: IFFALSE 10947
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10773: LD_ADDR_VAR 0 22
10777: PUSH
10778: LD_INT 22
10780: PUSH
10781: LD_VAR 0 11
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PPUSH
10790: CALL_OW 69
10794: PPUSH
10795: LD_VAR 0 14
10799: PPUSH
10800: CALL_OW 74
10804: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10805: LD_ADDR_VAR 0 23
10809: PUSH
10810: LD_INT 22
10812: PUSH
10813: LD_VAR 0 11
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: LD_INT 59
10827: PUSH
10828: EMPTY
10829: LIST
10830: PUSH
10831: LD_INT 21
10833: PUSH
10834: LD_INT 1
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 21
10843: PUSH
10844: LD_INT 2
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: EMPTY
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_VAR 0 14
10873: PPUSH
10874: CALL_OW 74
10878: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10879: LD_VAR 0 14
10883: PPUSH
10884: LD_VAR 0 22
10888: PPUSH
10889: CALL_OW 296
10893: PUSH
10894: LD_INT 8
10896: PLUS
10897: PUSH
10898: LD_VAR 0 14
10902: PPUSH
10903: LD_VAR 0 23
10907: PPUSH
10908: CALL_OW 296
10912: LESS
10913: IFFALSE 10931
// begin ComAttackUnit ( i , target1 ) ;
10915: LD_VAR 0 14
10919: PPUSH
10920: LD_VAR 0 22
10924: PPUSH
10925: CALL_OW 115
// end else
10929: GO 10945
// begin ComAttackUnit ( i , target2 ) ;
10931: LD_VAR 0 14
10935: PPUSH
10936: LD_VAR 0 23
10940: PPUSH
10941: CALL_OW 115
// end ; end ;
10945: GO 10770
10947: POP
10948: POP
// for i in soldiersOK_list do
10949: LD_ADDR_VAR 0 14
10953: PUSH
10954: LD_VAR 0 19
10958: PUSH
10959: FOR_IN
10960: IFFALSE 11136
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10962: LD_ADDR_VAR 0 22
10966: PUSH
10967: LD_INT 22
10969: PUSH
10970: LD_VAR 0 11
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PPUSH
10979: CALL_OW 69
10983: PPUSH
10984: LD_VAR 0 14
10988: PPUSH
10989: CALL_OW 74
10993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10994: LD_ADDR_VAR 0 23
10998: PUSH
10999: LD_INT 22
11001: PUSH
11002: LD_VAR 0 11
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: LD_INT 59
11016: PUSH
11017: EMPTY
11018: LIST
11019: PUSH
11020: LD_INT 21
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: PPUSH
11053: CALL_OW 69
11057: PPUSH
11058: LD_VAR 0 14
11062: PPUSH
11063: CALL_OW 74
11067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11068: LD_VAR 0 14
11072: PPUSH
11073: LD_VAR 0 22
11077: PPUSH
11078: CALL_OW 296
11082: PUSH
11083: LD_INT 8
11085: PLUS
11086: PUSH
11087: LD_VAR 0 14
11091: PPUSH
11092: LD_VAR 0 23
11096: PPUSH
11097: CALL_OW 296
11101: LESS
11102: IFFALSE 11120
// begin ComAttackUnit ( i , target1 ) ;
11104: LD_VAR 0 14
11108: PPUSH
11109: LD_VAR 0 22
11113: PPUSH
11114: CALL_OW 115
// end else
11118: GO 11134
// begin ComAttackUnit ( i , target2 ) ;
11120: LD_VAR 0 14
11124: PPUSH
11125: LD_VAR 0 23
11129: PPUSH
11130: CALL_OW 115
// end ; end ;
11134: GO 10959
11136: POP
11137: POP
// until soldiersOK_list = [ ] ;
11138: LD_VAR 0 19
11142: PUSH
11143: EMPTY
11144: EQUAL
11145: IFFALSE 10523
// end ; end ; end_of_file
11147: LD_VAR 0 13
11151: RET
// every 0 0$01 do
11152: GO 11154
11154: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11155: LD_INT 22
11157: PUSH
11158: LD_INT 1
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 25
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL_OW 69
11183: PUSH
11184: LD_INT 0
11186: EQUAL
11187: IFFALSE 11201
// SetClass ( JMM , 2 ) ;
11189: LD_EXP 1
11193: PPUSH
11194: LD_INT 2
11196: PPUSH
11197: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11201: LD_STRING M1
11203: PPUSH
11204: CALL_OW 337
// case difficulty of 1 :
11208: LD_OWVAR 67
11212: PUSH
11213: LD_INT 1
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11231
11221: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11222: LD_STRING M1-1
11224: PPUSH
11225: CALL_OW 337
11229: GO 11268
11231: LD_INT 2
11233: DOUBLE
11234: EQUAL
11235: IFTRUE 11239
11237: GO 11249
11239: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11240: LD_STRING M1-2
11242: PPUSH
11243: CALL_OW 337
11247: GO 11268
11249: LD_INT 3
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11267
11257: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11258: LD_STRING M1-3
11260: PPUSH
11261: CALL_OW 337
11265: GO 11268
11267: POP
// ChangeMissionObjectives ( M1cont ) ;
11268: LD_STRING M1cont
11270: PPUSH
11271: CALL_OW 337
// SaveForQuickRestart ;
11275: CALL_OW 22
// end ;
11279: END
// every 0 0$1 do
11280: GO 11282
11282: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11283: LD_INT 350
11285: PPUSH
11286: LD_INT 875
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11298: LD_INT 5
11300: PPUSH
11301: LD_INT 4
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 55
// wait ( 0 0$15 ) ;
11311: LD_INT 525
11313: PPUSH
11314: CALL_OW 67
// if IsOk ( Lisa ) then
11318: LD_EXP 2
11322: PPUSH
11323: CALL_OW 302
11327: IFFALSE 11343
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11329: LD_EXP 2
11333: PPUSH
11334: LD_STRING DR0-Lisa-1
11336: PPUSH
11337: CALL_OW 88
// end else
11341: GO 11465
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11343: LD_INT 22
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 26
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 25
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 25
11408: PUSH
11409: LD_INT 4
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: PPUSH
11429: CALL_OW 69
11433: PUSH
11434: LD_EXP 1
11438: PUSH
11439: LD_EXP 8
11443: PUSH
11444: LD_EXP 5
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: DIFF
11454: PPUSH
11455: LD_STRING DR0-Sol1-1
11457: PPUSH
11458: LD_STRING DR0-Sol1-1
11460: PPUSH
11461: CALL 5155 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11465: LD_INT 22
11467: PUSH
11468: LD_INT 1
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 21
11477: PUSH
11478: LD_INT 1
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 26
11487: PUSH
11488: LD_INT 1
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: LD_INT 25
11500: PUSH
11501: LD_INT 1
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PUSH
11508: LD_INT 25
11510: PUSH
11511: LD_INT 2
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 25
11520: PUSH
11521: LD_INT 3
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 25
11530: PUSH
11531: LD_INT 4
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PPUSH
11551: CALL_OW 69
11555: PUSH
11556: LD_EXP 1
11560: PUSH
11561: LD_EXP 8
11565: PUSH
11566: LD_EXP 5
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_STRING DR0-Sol2-1
11579: PPUSH
11580: LD_STRING DR0-Sol2-1
11582: PPUSH
11583: CALL 5155 0 3
// if IsOk ( Cyrus ) then
11587: LD_EXP 4
11591: PPUSH
11592: CALL_OW 302
11596: IFFALSE 11610
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11598: LD_EXP 4
11602: PPUSH
11603: LD_STRING DR0-Cyrus-1
11605: PPUSH
11606: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11610: LD_EXP 1
11614: PPUSH
11615: LD_STRING DR0-JMM-1
11617: PPUSH
11618: CALL_OW 88
// end ;
11622: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11623: LD_EXP 5
11627: PPUSH
11628: CALL_OW 302
11632: PUSH
11633: LD_INT 22
11635: PUSH
11636: LD_INT 1
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 16
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 69
11661: PUSH
11662: LD_INT 0
11664: GREATER
11665: AND
11666: IFFALSE 11944
11668: GO 11670
11670: DISABLE
// begin DialogueOn ;
11671: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11675: LD_EXP 5
11679: PPUSH
11680: LD_STRING D10-Frank-1
11682: PPUSH
11683: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11687: LD_INT 22
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 21
11699: PUSH
11700: LD_INT 1
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 2
11709: PUSH
11710: LD_INT 25
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 25
11732: PUSH
11733: LD_INT 3
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 25
11742: PUSH
11743: LD_INT 4
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 69
11766: PUSH
11767: LD_EXP 1
11771: PUSH
11772: LD_EXP 5
11776: PUSH
11777: LD_EXP 2
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: DIFF
11787: PPUSH
11788: LD_STRING D10-Sol1-1
11790: PPUSH
11791: LD_STRING D10-FSol1-1
11793: PPUSH
11794: CALL 5155 0 3
// Say ( Frank , D10-Frank-2 ) ;
11798: LD_EXP 5
11802: PPUSH
11803: LD_STRING D10-Frank-2
11805: PPUSH
11806: CALL_OW 88
// if IsOK ( Lisa ) then
11810: LD_EXP 2
11814: PPUSH
11815: CALL_OW 302
11819: IFFALSE 11835
// begin Say ( Lisa , D10-Lisa-2 ) ;
11821: LD_EXP 2
11825: PPUSH
11826: LD_STRING D10-Lisa-2
11828: PPUSH
11829: CALL_OW 88
// end else
11833: GO 11940
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11835: LD_INT 22
11837: PUSH
11838: LD_INT 1
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 21
11847: PUSH
11848: LD_INT 1
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 2
11857: PUSH
11858: LD_INT 25
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 25
11870: PUSH
11871: LD_INT 2
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 3
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 25
11890: PUSH
11891: LD_INT 4
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: PUSH
11915: LD_EXP 1
11919: PUSH
11920: LD_EXP 5
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: DIFF
11929: PPUSH
11930: LD_STRING D10-Sol1-2
11932: PPUSH
11933: LD_STRING D10-FSol1-2
11935: PPUSH
11936: CALL 5155 0 3
// end ; DialogueOff ;
11940: CALL_OW 7
// end ;
11944: END
// every 10 10$30 do
11945: GO 11947
11947: DISABLE
// begin HarrisonSupport ;
11948: CALL 2083 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11952: LD_EXP 17
11956: PPUSH
11957: CALL_OW 310
11961: PPUSH
11962: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11966: LD_EXP 17
11970: PPUSH
11971: LD_STRING DEng-Eng1-1
11973: PPUSH
11974: CALL_OW 88
// wait ( 1 1$0 ) ;
11978: LD_INT 2100
11980: PPUSH
11981: CALL_OW 67
// DialogueOn ;
11985: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11989: LD_EXP 14
11993: PPUSH
11994: LD_STRING DRem-Har-1
11996: PPUSH
11997: CALL_OW 94
// if contactWithRussian = 1 then
12001: LD_EXP 22
12005: PUSH
12006: LD_INT 1
12008: EQUAL
12009: IFFALSE 12025
// begin Say ( JMM , DRem-JMM-1 ) ;
12011: LD_EXP 1
12015: PPUSH
12016: LD_STRING DRem-JMM-1
12018: PPUSH
12019: CALL_OW 88
// end else
12023: GO 12037
// begin Say ( JMM , DRem-JMM-1a ) ;
12025: LD_EXP 1
12029: PPUSH
12030: LD_STRING DRem-JMM-1a
12032: PPUSH
12033: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12037: LD_EXP 14
12041: PPUSH
12042: LD_STRING DRem-Har-2
12044: PPUSH
12045: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12049: LD_STRING DenisInDelta
12051: PPUSH
12052: LD_INT 0
12054: PPUSH
12055: CALL_OW 30
12059: PUSH
12060: LD_INT 1
12062: EQUAL
12063: IFFALSE 12079
// begin Say ( JMM , DRem-JMM-2 ) ;
12065: LD_EXP 1
12069: PPUSH
12070: LD_STRING DRem-JMM-2
12072: PPUSH
12073: CALL_OW 88
// end else
12077: GO 12091
// begin Say ( JMM , DRem-JMM-2a ) ;
12079: LD_EXP 1
12083: PPUSH
12084: LD_STRING DRem-JMM-2a
12086: PPUSH
12087: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12091: LD_EXP 14
12095: PPUSH
12096: LD_STRING DRem-Har-3
12098: PPUSH
12099: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12103: LD_EXP 1
12107: PPUSH
12108: LD_STRING DRem-JMM-3
12110: PPUSH
12111: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12115: LD_EXP 14
12119: PPUSH
12120: LD_STRING DRem-Har-4
12122: PPUSH
12123: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12127: LD_STRING DenisInDelta
12129: PPUSH
12130: LD_INT 0
12132: PPUSH
12133: CALL_OW 30
12137: PUSH
12138: LD_INT 1
12140: EQUAL
12141: IFFALSE 12169
// begin Say ( JMM , DRem-JMM-4 ) ;
12143: LD_EXP 1
12147: PPUSH
12148: LD_STRING DRem-JMM-4
12150: PPUSH
12151: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12155: LD_EXP 14
12159: PPUSH
12160: LD_STRING DRem-Har-5
12162: PPUSH
12163: CALL_OW 94
// end else
12167: GO 12202
// begin SetRestrict ( 36 , 1 , true ) ;
12169: LD_INT 36
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: LD_INT 1
12177: PPUSH
12178: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12182: LD_INT 15
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12195: LD_STRING MR
12197: PPUSH
12198: CALL_OW 337
// end ; DialogueOff ;
12202: CALL_OW 7
// end ;
12206: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12207: LD_STRING DenisInDelta
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 30
12217: PUSH
12218: LD_INT 1
12220: EQUAL
12221: IFFALSE 12352
12223: GO 12225
12225: DISABLE
// begin PrepareDenis ;
12226: CALL 2004 0 0
// CenterNowOnUnits ( Denis ) ;
12230: LD_EXP 9
12234: PPUSH
12235: CALL_OW 87
// DialogueOn ;
12239: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12243: LD_EXP 9
12247: PPUSH
12248: LD_STRING DDen-Den-1
12250: PPUSH
12251: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12255: LD_EXP 1
12259: PPUSH
12260: LD_STRING DDen-JMM-1
12262: PPUSH
12263: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12267: LD_EXP 9
12271: PPUSH
12272: LD_STRING DDen-Den-2
12274: PPUSH
12275: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12279: LD_EXP 1
12283: PPUSH
12284: LD_STRING DDen-JMM-2
12286: PPUSH
12287: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12291: LD_EXP 9
12295: PPUSH
12296: LD_STRING DDen-Den-3
12298: PPUSH
12299: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12303: LD_EXP 1
12307: PPUSH
12308: LD_STRING DDen-JMM-3
12310: PPUSH
12311: CALL_OW 88
// DialogueOff ;
12315: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12319: LD_INT 36
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12332: LD_INT 15
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12345: LD_STRING MR
12347: PPUSH
12348: CALL_OW 337
// end ;
12352: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12353: CALL 12398 0 0
12357: PUSH
12358: LD_EXP 9
12362: PPUSH
12363: CALL_OW 302
12367: AND
12368: IFFALSE 12397
12370: GO 12372
12372: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12373: LD_EXP 9
12377: PPUSH
12378: LD_STRING DR1-Den-1
12380: PPUSH
12381: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12385: LD_EXP 1
12389: PPUSH
12390: LD_STRING DR1-JMM-1
12392: PPUSH
12393: CALL_OW 88
// end ;
12397: END
// function CheckOptoLab ; var i ; begin
12398: LD_INT 0
12400: PPUSH
12401: PPUSH
// result = false ;
12402: LD_ADDR_VAR 0 1
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12410: LD_ADDR_VAR 0 2
12414: PUSH
12415: LD_INT 22
12417: PUSH
12418: LD_INT 1
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PUSH
12425: LD_INT 2
12427: PUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 7
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 30
12440: PUSH
12441: LD_INT 8
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: PUSH
12462: FOR_IN
12463: IFFALSE 12515
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12465: LD_VAR 0 2
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 268
12477: PUSH
12478: LD_INT 15
12480: EQUAL
12481: PUSH
12482: LD_VAR 0 2
12486: PPUSH
12487: LD_INT 2
12489: PPUSH
12490: CALL_OW 268
12494: PUSH
12495: LD_INT 15
12497: EQUAL
12498: OR
12499: IFFALSE 12511
// begin result = true ;
12501: LD_ADDR_VAR 0 1
12505: PUSH
12506: LD_INT 1
12508: ST_TO_ADDR
// break ;
12509: GO 12515
// end ; break ;
12511: GO 12515
// end ;
12513: GO 12462
12515: POP
12516: POP
// end ;
12517: LD_VAR 0 1
12521: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12522: LD_INT 15
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 321
12532: PUSH
12533: LD_INT 2
12535: EQUAL
12536: PUSH
12537: LD_EXP 9
12541: PPUSH
12542: CALL_OW 302
12546: AND
12547: IFFALSE 12779
12549: GO 12551
12551: DISABLE
// begin DialogueOn ;
12552: CALL_OW 6
// if IsOK ( Denis ) then
12556: LD_EXP 9
12560: PPUSH
12561: CALL_OW 302
12565: IFFALSE 12581
// begin Say ( Denis , DR2-Den-1 ) ;
12567: LD_EXP 9
12571: PPUSH
12572: LD_STRING DR2-Den-1
12574: PPUSH
12575: CALL_OW 88
// end else
12579: GO 12640
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12581: LD_INT 22
12583: PUSH
12584: LD_INT 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 4
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: PUSH
12621: LD_EXP 1
12625: PUSH
12626: EMPTY
12627: LIST
12628: DIFF
12629: PPUSH
12630: LD_STRING DR2-Sci1-1
12632: PPUSH
12633: LD_STRING DR2-FSci1-1
12635: PPUSH
12636: CALL 5155 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12640: LD_EXP 1
12644: PPUSH
12645: LD_STRING DR2-JMM-1
12647: PPUSH
12648: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12652: LD_INT 22
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 21
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 2
12674: PUSH
12675: LD_INT 25
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 25
12697: PUSH
12698: LD_INT 3
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 4
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PPUSH
12727: CALL_OW 69
12731: PUSH
12732: LD_EXP 1
12736: PUSH
12737: LD_EXP 9
12741: PUSH
12742: LD_EXP 8
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: DIFF
12752: PPUSH
12753: LD_STRING DR2-Sol1-1
12755: PPUSH
12756: LD_STRING DR2-Sol1-11
12758: PPUSH
12759: CALL 5155 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12763: LD_EXP 1
12767: PPUSH
12768: LD_STRING DR2-JMM-2
12770: PPUSH
12771: CALL_OW 88
// DialogueOff ;
12775: CALL_OW 7
// end ;
12779: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12780: LD_INT 22
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 30
12792: PUSH
12793: LD_INT 36
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PPUSH
12804: CALL_OW 69
12808: PUSH
12809: LD_INT 0
12811: EQUAL
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 21
12825: PUSH
12826: LD_INT 2
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 33
12835: PUSH
12836: LD_INT 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: PUSH
12853: LD_INT 0
12855: GREATER
12856: AND
12857: PUSH
12858: LD_EXP 23
12862: PUSH
12863: LD_INT 0
12865: EQUAL
12866: AND
12867: IFFALSE 12993
12869: GO 12871
12871: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12872: LD_INT 22
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 25
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_EXP 1
12916: PUSH
12917: LD_EXP 6
12921: PUSH
12922: LD_EXP 7
12926: PUSH
12927: LD_EXP 9
12931: PUSH
12932: LD_EXP 15
12936: PUSH
12937: LD_EXP 3
12941: PUSH
12942: LD_EXP 4
12946: PUSH
12947: LD_EXP 2
12951: PUSH
12952: LD_EXP 5
12956: PUSH
12957: LD_EXP 8
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: DIFF
12974: PPUSH
12975: LD_STRING D3a-Mech1-1
12977: PPUSH
12978: LD_STRING D3a-Mech1-1
12980: PPUSH
12981: CALL 5155 0 3
// firstTower = 2 ;
12985: LD_ADDR_EXP 23
12989: PUSH
12990: LD_INT 2
12992: ST_TO_ADDR
// end ;
12993: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12994: LD_INT 22
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PUSH
13004: LD_INT 21
13006: PUSH
13007: LD_INT 3
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PPUSH
13018: CALL_OW 69
13022: PUSH
13023: LD_INT 0
13025: EQUAL
13026: IFFALSE 13141
13028: GO 13030
13030: DISABLE
13031: LD_INT 0
13033: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 21
13051: PUSH
13052: LD_INT 1
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 25
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 25
13074: PUSH
13075: LD_INT 2
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 25
13084: PUSH
13085: LD_INT 3
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 25
13094: PUSH
13095: LD_INT 4
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: PUSH
13119: FOR_IN
13120: IFFALSE 13139
// AddExperience ( i , 1 , 10000 ) ;
13122: LD_VAR 0 1
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: LD_INT 10000
13132: PPUSH
13133: CALL_OW 492
13137: GO 13119
13139: POP
13140: POP
// end ;
13141: PPOPN 1
13143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13144: LD_INT 22
13146: PUSH
13147: LD_INT 1
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 30
13156: PUSH
13157: LD_INT 36
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PPUSH
13168: CALL_OW 69
13172: PUSH
13173: LD_INT 0
13175: GREATER
13176: PUSH
13177: LD_INT 22
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 2
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 33
13199: PUSH
13200: LD_INT 2
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: PUSH
13217: LD_INT 0
13219: GREATER
13220: AND
13221: PUSH
13222: CALL 13804 0 0
13226: AND
13227: IFFALSE 13801
13229: GO 13231
13231: DISABLE
13232: LD_INT 0
13234: PPUSH
13235: PPUSH
13236: PPUSH
13237: PPUSH
13238: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13239: LD_ADDR_VAR 0 3
13243: PUSH
13244: LD_INT 22
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 30
13256: PUSH
13257: LD_INT 36
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13273: LD_ADDR_VAR 0 4
13277: PUSH
13278: LD_INT 22
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 21
13290: PUSH
13291: LD_INT 2
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 33
13300: PUSH
13301: LD_INT 2
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 69
13317: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13318: LD_ADDR_VAR 0 5
13322: PUSH
13323: EMPTY
13324: ST_TO_ADDR
// for i in tmpControlTowers do
13325: LD_ADDR_VAR 0 1
13329: PUSH
13330: LD_VAR 0 3
13334: PUSH
13335: FOR_IN
13336: IFFALSE 13799
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13338: LD_EXP 1
13342: PPUSH
13343: CALL_OW 310
13347: PUSH
13348: LD_VAR 0 1
13352: EQUAL
13353: PUSH
13354: LD_EXP 1
13358: PPUSH
13359: CALL_OW 257
13363: PUSH
13364: LD_INT 3
13366: EQUAL
13367: AND
13368: IFFALSE 13498
// begin InGameOn ;
13370: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13374: LD_VAR 0 4
13378: PUSH
13379: LD_INT 1
13381: ARRAY
13382: PPUSH
13383: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13387: LD_EXP 1
13391: PPUSH
13392: LD_STRING D4a-JMM-1
13394: PPUSH
13395: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13399: LD_VAR 0 4
13403: PUSH
13404: LD_INT 1
13406: ARRAY
13407: PPUSH
13408: LD_EXP 1
13412: PPUSH
13413: CALL_OW 53
// wait ( 0 0$1 ) ;
13417: LD_INT 35
13419: PPUSH
13420: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13424: LD_VAR 0 4
13428: PUSH
13429: LD_INT 1
13431: ARRAY
13432: PPUSH
13433: LD_VAR 0 4
13437: PUSH
13438: LD_INT 1
13440: ARRAY
13441: PPUSH
13442: CALL_OW 250
13446: PUSH
13447: LD_INT 3
13449: PLUS
13450: PPUSH
13451: LD_VAR 0 4
13455: PUSH
13456: LD_INT 1
13458: ARRAY
13459: PPUSH
13460: CALL_OW 251
13464: PUSH
13465: LD_INT 2
13467: MINUS
13468: PPUSH
13469: CALL_OW 111
// wait ( 0 0$2 ) ;
13473: LD_INT 70
13475: PPUSH
13476: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13480: LD_EXP 1
13484: PPUSH
13485: LD_STRING D4b-JMM-1
13487: PPUSH
13488: CALL_OW 88
// InGameOff ;
13492: CALL_OW 9
// end else
13496: GO 13797
// begin InGameOn ;
13498: CALL_OW 8
// for j in UnitsInside ( i ) do
13502: LD_ADDR_VAR 0 2
13506: PUSH
13507: LD_VAR 0 1
13511: PPUSH
13512: CALL_OW 313
13516: PUSH
13517: FOR_IN
13518: IFFALSE 13553
// if GetClass ( j ) = 3 then
13520: LD_VAR 0 2
13524: PPUSH
13525: CALL_OW 257
13529: PUSH
13530: LD_INT 3
13532: EQUAL
13533: IFFALSE 13551
// tmpMechanicInside = tmpMechanicInside ^ j ;
13535: LD_ADDR_VAR 0 5
13539: PUSH
13540: LD_VAR 0 5
13544: PUSH
13545: LD_VAR 0 2
13549: ADD
13550: ST_TO_ADDR
13551: GO 13517
13553: POP
13554: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13555: LD_VAR 0 5
13559: PUSH
13560: LD_INT 1
13562: ARRAY
13563: PPUSH
13564: CALL_OW 258
13568: PUSH
13569: LD_INT 1
13571: EQUAL
13572: IFFALSE 13590
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13574: LD_VAR 0 5
13578: PUSH
13579: LD_INT 1
13581: ARRAY
13582: PPUSH
13583: LD_STRING D4a-Mech1-1
13585: PPUSH
13586: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13590: LD_VAR 0 5
13594: PUSH
13595: LD_INT 1
13597: ARRAY
13598: PPUSH
13599: CALL_OW 258
13603: PUSH
13604: LD_INT 2
13606: EQUAL
13607: IFFALSE 13625
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13609: LD_VAR 0 5
13613: PUSH
13614: LD_INT 1
13616: ARRAY
13617: PPUSH
13618: LD_STRING D4a-FMech1-1
13620: PPUSH
13621: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13625: LD_VAR 0 4
13629: PUSH
13630: LD_INT 1
13632: ARRAY
13633: PPUSH
13634: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13638: LD_VAR 0 4
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: LD_VAR 0 5
13651: PUSH
13652: LD_INT 1
13654: ARRAY
13655: PPUSH
13656: CALL_OW 53
// wait ( 0 0$1 ) ;
13660: LD_INT 35
13662: PPUSH
13663: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13667: LD_VAR 0 4
13671: PUSH
13672: LD_INT 1
13674: ARRAY
13675: PPUSH
13676: LD_VAR 0 4
13680: PUSH
13681: LD_INT 1
13683: ARRAY
13684: PPUSH
13685: CALL_OW 250
13689: PUSH
13690: LD_INT 3
13692: PLUS
13693: PPUSH
13694: LD_VAR 0 4
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PPUSH
13703: CALL_OW 251
13707: PUSH
13708: LD_INT 2
13710: MINUS
13711: PPUSH
13712: CALL_OW 111
// wait ( 0 0$2 ) ;
13716: LD_INT 70
13718: PPUSH
13719: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13723: LD_VAR 0 5
13727: PUSH
13728: LD_INT 1
13730: ARRAY
13731: PPUSH
13732: CALL_OW 258
13736: PUSH
13737: LD_INT 1
13739: EQUAL
13740: IFFALSE 13758
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13742: LD_VAR 0 5
13746: PUSH
13747: LD_INT 1
13749: ARRAY
13750: PPUSH
13751: LD_STRING D4b-Mech1-1
13753: PPUSH
13754: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13758: LD_VAR 0 5
13762: PUSH
13763: LD_INT 1
13765: ARRAY
13766: PPUSH
13767: CALL_OW 258
13771: PUSH
13772: LD_INT 2
13774: EQUAL
13775: IFFALSE 13793
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13777: LD_VAR 0 5
13781: PUSH
13782: LD_INT 1
13784: ARRAY
13785: PPUSH
13786: LD_STRING D4b-FMech1-1
13788: PPUSH
13789: CALL_OW 88
// InGameOff ;
13793: CALL_OW 9
// end ; end ;
13797: GO 13335
13799: POP
13800: POP
// end ;
13801: PPOPN 5
13803: END
// function CheckMehInside ; var i , j ; begin
13804: LD_INT 0
13806: PPUSH
13807: PPUSH
13808: PPUSH
// result = false ;
13809: LD_ADDR_VAR 0 1
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_INT 1
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 30
13834: PUSH
13835: LD_INT 36
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PPUSH
13846: CALL_OW 69
13850: PUSH
13851: FOR_IN
13852: IFFALSE 13903
// begin for j in UnitsInside ( i ) do
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: LD_VAR 0 2
13863: PPUSH
13864: CALL_OW 313
13868: PUSH
13869: FOR_IN
13870: IFFALSE 13899
// begin if GetClass ( j ) = 3 then
13872: LD_VAR 0 3
13876: PPUSH
13877: CALL_OW 257
13881: PUSH
13882: LD_INT 3
13884: EQUAL
13885: IFFALSE 13897
// begin result = true ;
13887: LD_ADDR_VAR 0 1
13891: PUSH
13892: LD_INT 1
13894: ST_TO_ADDR
// break ;
13895: GO 13899
// end ; end ;
13897: GO 13869
13899: POP
13900: POP
// end ;
13901: GO 13851
13903: POP
13904: POP
// end ;
13905: LD_VAR 0 1
13909: RET
// every 25 25$0 do
13910: GO 13912
13912: DISABLE
// begin PrepareKurt ;
13913: CALL 17410 0 0
// end ;
13917: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13918: LD_EXP 19
13922: PPUSH
13923: LD_INT 9
13925: PPUSH
13926: CALL_OW 308
13930: PUSH
13931: LD_EXP 21
13935: PUSH
13936: LD_INT 1
13938: EQUAL
13939: AND
13940: IFFALSE 14014
13942: GO 13944
13944: DISABLE
// begin RemoveUnit ( Kurt ) ;
13945: LD_EXP 19
13949: PPUSH
13950: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13954: LD_EXP 19
13958: PPUSH
13959: LD_STRING Kurt
13961: PPUSH
13962: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13966: LD_INT 1
13968: PPUSH
13969: LD_INT 2
13971: PPUSH
13972: CALL_OW 81
13976: PUSH
13977: LD_INT 0
13979: EQUAL
13980: IFFALSE 13990
// KurtStatus = 1 ;
13982: LD_ADDR_EXP 20
13986: PUSH
13987: LD_INT 1
13989: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13990: LD_INT 1
13992: PPUSH
13993: LD_INT 2
13995: PPUSH
13996: CALL_OW 81
14000: PUSH
14001: LD_INT 2
14003: EQUAL
14004: IFFALSE 14014
// KurtStatus = 2 ;
14006: LD_ADDR_EXP 20
14010: PUSH
14011: LD_INT 2
14013: ST_TO_ADDR
// end ;
14014: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
14015: LD_INT 1
14017: PPUSH
14018: LD_INT 2
14020: PPUSH
14021: CALL_OW 81
14025: PUSH
14026: LD_INT 2
14028: EQUAL
14029: PUSH
14030: LD_EXP 19
14034: PPUSH
14035: CALL_OW 302
14039: AND
14040: IFFALSE 14065
14042: GO 14044
14044: DISABLE
// begin DialogueOn ;
14045: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
14049: LD_EXP 19
14053: PPUSH
14054: LD_STRING D2a-Kurt-1
14056: PPUSH
14057: CALL_OW 88
// DialogueOff ;
14061: CALL_OW 7
// end ;
14065: END
// every 35 35$0 do
14066: GO 14068
14068: DISABLE
// begin PrepareJoan ;
14069: CALL 2555 0 0
// wait ( 1 1$0 ) ;
14073: LD_INT 2100
14075: PPUSH
14076: CALL_OW 67
// if IsOK ( Lisa ) then
14080: LD_EXP 2
14084: PPUSH
14085: CALL_OW 302
14089: IFFALSE 14219
// begin DialogueOn ;
14091: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14095: LD_EXP 2
14099: PPUSH
14100: LD_STRING D7-Lisa-1
14102: PPUSH
14103: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14107: LD_EXP 1
14111: PPUSH
14112: LD_STRING D7-JMM-1
14114: PPUSH
14115: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14119: LD_EXP 2
14123: PPUSH
14124: LD_STRING D7-Lisa-2
14126: PPUSH
14127: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14131: LD_EXP 1
14135: PPUSH
14136: LD_STRING D7-JMM-2
14138: PPUSH
14139: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14143: LD_EXP 2
14147: PPUSH
14148: LD_STRING D7-Lisa-3
14150: PPUSH
14151: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14155: LD_EXP 1
14159: PPUSH
14160: LD_STRING D7-JMM-3
14162: PPUSH
14163: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14167: LD_EXP 2
14171: PPUSH
14172: LD_STRING D7-Lisa-4
14174: PPUSH
14175: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14179: LD_EXP 1
14183: PPUSH
14184: LD_STRING D7-JMM-4
14186: PPUSH
14187: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14191: LD_EXP 1
14195: PPUSH
14196: LD_STRING D7-JMM-4a
14198: PPUSH
14199: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14203: LD_EXP 2
14207: PPUSH
14208: LD_STRING D7-Lisa-5
14210: PPUSH
14211: CALL_OW 88
// DialogueOff ;
14215: CALL_OW 7
// end ; end ;
14219: END
// every 0 0$1 do var i , others ;
14220: GO 14222
14222: DISABLE
14223: LD_INT 0
14225: PPUSH
14226: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14227: LD_ADDR_VAR 0 2
14231: PUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 1
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 2
14254: PUSH
14255: LD_INT 25
14257: PUSH
14258: LD_INT 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 25
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 3
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 25
14287: PUSH
14288: LD_INT 4
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: PUSH
14312: LD_EXP 13
14316: PUSH
14317: EMPTY
14318: LIST
14319: DIFF
14320: ST_TO_ADDR
// for i in others do
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_VAR 0 2
14330: PUSH
14331: FOR_IN
14332: IFFALSE 14369
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14334: LD_EXP 13
14338: PPUSH
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 296
14348: PUSH
14349: LD_INT 6
14351: LESS
14352: IFFALSE 14367
// begin disable ;
14354: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14355: LD_EXP 13
14359: PPUSH
14360: LD_STRING D5-Sol1-1
14362: PPUSH
14363: CALL_OW 88
// end ; end ;
14367: GO 14331
14369: POP
14370: POP
// end ;
14371: PPOPN 2
14373: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14374: LD_INT 22
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 33
14386: PUSH
14387: LD_INT 2
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 69
14402: PUSH
14403: LD_INT 2
14405: GREATEREQUAL
14406: IFFALSE 14426
14408: GO 14410
14410: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14411: LD_STRING MRa
14413: PPUSH
14414: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14418: LD_ADDR_EXP 28
14422: PUSH
14423: LD_INT 1
14425: ST_TO_ADDR
// end ;
14426: END
// every 4 4$0 do
14427: GO 14429
14429: DISABLE
// PrepareRandoms ( 1 ) ;
14430: LD_INT 1
14432: PPUSH
14433: CALL 3591 0 1
14437: END
// every 10 10$0 do
14438: GO 14440
14440: DISABLE
// PrepareRandoms ( 2 ) ;
14441: LD_INT 2
14443: PPUSH
14444: CALL 3591 0 1
14448: END
// every 28 28$0 do
14449: GO 14451
14451: DISABLE
// PrepareRandoms ( 4 ) ;
14452: LD_INT 4
14454: PPUSH
14455: CALL 3591 0 1
14459: END
// every 32 32$0 do
14460: GO 14462
14462: DISABLE
// PrepareRandoms ( 5 ) ;
14463: LD_INT 5
14465: PPUSH
14466: CALL 3591 0 1
14470: END
// every 35 35$30 do
14471: GO 14473
14473: DISABLE
// PrepareRandoms ( 6 ) ;
14474: LD_INT 6
14476: PPUSH
14477: CALL 3591 0 1
14481: END
// every 37 37$20 do
14482: GO 14484
14484: DISABLE
// PrepareRandoms ( 7 ) ;
14485: LD_INT 7
14487: PPUSH
14488: CALL 3591 0 1
14492: END
// every 5 5$20 do
14493: GO 14495
14495: DISABLE
// begin DialogueOn ;
14496: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14500: LD_EXP 10
14504: PPUSH
14505: LD_STRING D12a-Sci-1
14507: PPUSH
14508: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14512: LD_EXP 1
14516: PPUSH
14517: LD_STRING D12a-JMM-1
14519: PPUSH
14520: CALL_OW 88
// DialogueOff ;
14524: CALL_OW 7
// cratesStatus = 1 ;
14528: LD_ADDR_EXP 38
14532: PUSH
14533: LD_INT 1
14535: ST_TO_ADDR
// end ;
14536: END
// every 13 13$0 do
14537: GO 14539
14539: DISABLE
// begin DialogueOn ;
14540: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14544: LD_EXP 10
14548: PPUSH
14549: LD_STRING D12b-Sci-1
14551: PPUSH
14552: CALL_OW 94
// DialogueOff ;
14556: CALL_OW 7
// cratesStatus = 2 ;
14560: LD_ADDR_EXP 38
14564: PUSH
14565: LD_INT 2
14567: ST_TO_ADDR
// end ;
14568: END
// every 32 32$0 do
14569: GO 14571
14571: DISABLE
// begin DialogueOn ;
14572: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14576: LD_EXP 10
14580: PPUSH
14581: LD_STRING D12c-Sci-1
14583: PPUSH
14584: CALL_OW 94
// DialogueOff ;
14588: CALL_OW 7
// wait ( 3 3$0 ) ;
14592: LD_INT 6300
14594: PPUSH
14595: CALL_OW 67
// DialogueOn ;
14599: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14603: LD_EXP 10
14607: PPUSH
14608: LD_STRING D12d-Sci-1
14610: PPUSH
14611: CALL_OW 94
// DialogueOff ;
14615: CALL_OW 7
// cratesStatus = 1 ;
14619: LD_ADDR_EXP 38
14623: PUSH
14624: LD_INT 1
14626: ST_TO_ADDR
// end ;
14627: END
// every 42 42$0 do
14628: GO 14630
14630: DISABLE
// begin DialogueOn ;
14631: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14635: LD_EXP 10
14639: PPUSH
14640: LD_STRING D12e-Sci-1
14642: PPUSH
14643: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14647: LD_EXP 1
14651: PPUSH
14652: LD_STRING D12e-JMM-1
14654: PPUSH
14655: CALL_OW 88
// DialogueOff ;
14659: CALL_OW 7
// cratesStatus = 2 ;
14663: LD_ADDR_EXP 38
14667: PUSH
14668: LD_INT 2
14670: ST_TO_ADDR
// end ;
14671: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14672: LD_INT 22
14674: PUSH
14675: LD_INT 6
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 34
14694: PUSH
14695: LD_INT 51
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: PUSH
14712: LD_INT 0
14714: GREATER
14715: IFFALSE 14798
14717: GO 14719
14719: DISABLE
14720: LD_INT 0
14722: PPUSH
// begin enable ;
14723: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14724: LD_ADDR_VAR 0 1
14728: PUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 6
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 21
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: PUSH
14776: FOR_IN
14777: IFFALSE 14796
// ComAgressiveMove ( i , 138 , 168 ) ;
14779: LD_VAR 0 1
14783: PPUSH
14784: LD_INT 138
14786: PPUSH
14787: LD_INT 168
14789: PPUSH
14790: CALL_OW 114
14794: GO 14776
14796: POP
14797: POP
// end ;
14798: PPOPN 1
14800: END
// every 0 0$1 do var i ;
14801: GO 14803
14803: DISABLE
14804: LD_INT 0
14806: PPUSH
// begin enable ;
14807: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_INT 5
14815: PPUSH
14816: LD_INT 2
14818: PUSH
14819: LD_INT 22
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 22
14831: PUSH
14832: LD_INT 6
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: PPUSH
14847: CALL_OW 70
14851: PUSH
14852: FOR_IN
14853: IFFALSE 14917
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14855: LD_INT 5
14857: PPUSH
14858: LD_INT 22
14860: PUSH
14861: LD_INT 6
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 34
14870: PUSH
14871: LD_INT 51
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 70
14886: PUSH
14887: LD_INT 0
14889: GREATER
14890: IFFALSE 14906
// sendedConvoys = sendedConvoys + 1 ;
14892: LD_ADDR_EXP 39
14896: PUSH
14897: LD_EXP 39
14901: PUSH
14902: LD_INT 1
14904: PLUS
14905: ST_TO_ADDR
// RemoveUnit ( i ) ;
14906: LD_VAR 0 1
14910: PPUSH
14911: CALL_OW 64
// end ;
14915: GO 14852
14917: POP
14918: POP
// end ; end_of_file
14919: PPOPN 1
14921: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14922: LD_VAR 0 1
14926: PUSH
14927: LD_INT 1
14929: EQUAL
14930: PUSH
14931: LD_VAR 0 2
14935: PUSH
14936: LD_INT 3
14938: EQUAL
14939: AND
14940: IFFALSE 14950
// contactWithRussian = 1 ;
14942: LD_ADDR_EXP 22
14946: PUSH
14947: LD_INT 1
14949: ST_TO_ADDR
// end ;
14950: PPOPN 2
14952: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 266
14962: PUSH
14963: LD_INT 36
14965: EQUAL
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 255
14976: PUSH
14977: LD_INT 1
14979: EQUAL
14980: AND
14981: PUSH
14982: LD_INT 22
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 33
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 69
15021: PUSH
15022: LD_INT 0
15024: EQUAL
15025: AND
15026: PUSH
15027: LD_EXP 23
15031: PUSH
15032: LD_INT 0
15034: EQUAL
15035: AND
15036: IFFALSE 15116
// begin firstTower = 1 ;
15038: LD_ADDR_EXP 23
15042: PUSH
15043: LD_INT 1
15045: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15046: LD_INT 22
15048: PUSH
15049: LD_INT 1
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: PUSH
15056: LD_INT 21
15058: PUSH
15059: LD_INT 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 25
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 26
15078: PUSH
15079: LD_INT 1
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: PPUSH
15092: CALL_OW 69
15096: PUSH
15097: LD_EXP 1
15101: PUSH
15102: EMPTY
15103: LIST
15104: DIFF
15105: PPUSH
15106: LD_STRING D3b-Mech1-1
15108: PPUSH
15109: LD_STRING D3b-Mech1-1
15111: PPUSH
15112: CALL 5155 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 266
15125: PUSH
15126: LD_INT 0
15128: EQUAL
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 255
15139: PUSH
15140: LD_INT 1
15142: EQUAL
15143: AND
15144: IFFALSE 15158
// SetBName ( building , theta ) ;
15146: LD_VAR 0 1
15150: PPUSH
15151: LD_STRING theta
15153: PPUSH
15154: CALL_OW 500
// if GetSide ( building ) = 3 then
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 255
15167: PUSH
15168: LD_INT 3
15170: EQUAL
15171: IFFALSE 15245
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15173: LD_ADDR_EXP 31
15177: PUSH
15178: LD_EXP 31
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 3
15190: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15191: LD_ADDR_EXP 31
15195: PUSH
15196: LD_EXP 31
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 3
15208: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15209: LD_ADDR_EXP 31
15213: PUSH
15214: LD_EXP 31
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 3
15226: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15227: LD_ADDR_EXP 31
15231: PUSH
15232: LD_EXP 31
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 3
15244: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL_OW 255
15254: PUSH
15255: LD_INT 3
15257: EQUAL
15258: PUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 266
15268: PUSH
15269: LD_INT 0
15271: EQUAL
15272: PUSH
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 266
15282: PUSH
15283: LD_INT 2
15285: EQUAL
15286: OR
15287: PUSH
15288: LD_VAR 0 1
15292: PPUSH
15293: CALL_OW 266
15297: PUSH
15298: LD_INT 4
15300: EQUAL
15301: OR
15302: PUSH
15303: EMPTY
15304: LIST
15305: AND
15306: IFFALSE 15317
// ComUpgrade ( building ) ;
15308: LD_VAR 0 1
15312: PPUSH
15313: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 255
15326: PUSH
15327: LD_INT 3
15329: EQUAL
15330: PUSH
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 266
15340: PUSH
15341: LD_INT 32
15343: EQUAL
15344: AND
15345: IFFALSE 15386
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_INT 42
15354: PUSH
15355: LD_INT 43
15357: PUSH
15358: LD_INT 44
15360: PUSH
15361: LD_INT 46
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 1
15372: PPUSH
15373: LD_INT 4
15375: PPUSH
15376: CALL_OW 12
15380: ARRAY
15381: PPUSH
15382: CALL_OW 208
// end ; end ;
15386: PPOPN 1
15388: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 255
15398: PUSH
15399: LD_INT 1
15401: EQUAL
15402: PUSH
15403: LD_VAR 0 1
15407: PPUSH
15408: CALL_OW 247
15412: PUSH
15413: LD_INT 1
15415: EQUAL
15416: AND
15417: IFFALSE 15493
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 257
15428: PUSH
15429: LD_INT 1
15431: EQUAL
15432: PUSH
15433: LD_VAR 0 1
15437: PPUSH
15438: CALL_OW 257
15442: PUSH
15443: LD_INT 2
15445: EQUAL
15446: OR
15447: PUSH
15448: LD_VAR 0 1
15452: PPUSH
15453: CALL_OW 257
15457: PUSH
15458: LD_INT 3
15460: EQUAL
15461: OR
15462: PUSH
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 257
15472: PUSH
15473: LD_INT 4
15475: EQUAL
15476: OR
15477: IFFALSE 15493
// unitLost = unitLost + 1 ;
15479: LD_ADDR_EXP 30
15483: PUSH
15484: LD_EXP 30
15488: PUSH
15489: LD_INT 1
15491: PLUS
15492: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15493: LD_VAR 0 1
15497: PPUSH
15498: CALL_OW 255
15502: PUSH
15503: LD_INT 3
15505: EQUAL
15506: PUSH
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 247
15516: PUSH
15517: LD_INT 3
15519: EQUAL
15520: AND
15521: IFFALSE 16213
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 266
15532: PUSH
15533: LD_INT 31
15535: EQUAL
15536: PUSH
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 266
15546: PUSH
15547: LD_INT 32
15549: EQUAL
15550: OR
15551: PUSH
15552: LD_VAR 0 1
15556: PPUSH
15557: CALL_OW 266
15561: PUSH
15562: LD_INT 36
15564: EQUAL
15565: OR
15566: PUSH
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 266
15576: PUSH
15577: LD_INT 0
15579: EQUAL
15580: OR
15581: PUSH
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 266
15591: PUSH
15592: LD_INT 24
15594: EQUAL
15595: OR
15596: PUSH
15597: LD_VAR 0 1
15601: PPUSH
15602: CALL_OW 266
15606: PUSH
15607: LD_INT 17
15609: EQUAL
15610: OR
15611: PUSH
15612: LD_VAR 0 1
15616: PPUSH
15617: CALL_OW 266
15621: PUSH
15622: LD_INT 25
15624: EQUAL
15625: OR
15626: PUSH
15627: LD_VAR 0 1
15631: PPUSH
15632: CALL_OW 266
15636: PUSH
15637: LD_INT 19
15639: EQUAL
15640: OR
15641: PUSH
15642: LD_VAR 0 1
15646: PPUSH
15647: CALL_OW 266
15651: PUSH
15652: LD_INT 20
15654: EQUAL
15655: OR
15656: PUSH
15657: LD_VAR 0 1
15661: PPUSH
15662: CALL_OW 266
15666: PUSH
15667: LD_INT 18
15669: EQUAL
15670: OR
15671: PUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 266
15681: PUSH
15682: LD_INT 21
15684: EQUAL
15685: OR
15686: PUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 266
15696: PUSH
15697: LD_INT 23
15699: EQUAL
15700: OR
15701: PUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 266
15711: PUSH
15712: LD_INT 16
15714: EQUAL
15715: OR
15716: PUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 266
15726: PUSH
15727: LD_INT 6
15729: EQUAL
15730: OR
15731: PUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 266
15741: PUSH
15742: LD_INT 29
15744: EQUAL
15745: OR
15746: PUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: CALL_OW 266
15756: PUSH
15757: LD_INT 26
15759: EQUAL
15760: OR
15761: PUSH
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 266
15771: PUSH
15772: LD_INT 30
15774: EQUAL
15775: OR
15776: PUSH
15777: LD_VAR 0 1
15781: PPUSH
15782: CALL_OW 266
15786: PUSH
15787: LD_INT 28
15789: EQUAL
15790: OR
15791: PUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL_OW 266
15801: PUSH
15802: LD_INT 27
15804: EQUAL
15805: OR
15806: PUSH
15807: LD_VAR 0 1
15811: PPUSH
15812: CALL_OW 266
15816: PUSH
15817: LD_INT 33
15819: EQUAL
15820: OR
15821: PUSH
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 266
15831: PUSH
15832: LD_INT 2
15834: EQUAL
15835: OR
15836: PUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 266
15846: PUSH
15847: LD_INT 4
15849: EQUAL
15850: OR
15851: IFFALSE 15937
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15853: LD_ADDR_EXP 31
15857: PUSH
15858: LD_EXP 31
15862: PUSH
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 266
15872: ADD
15873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15874: LD_ADDR_EXP 31
15878: PUSH
15879: LD_EXP 31
15883: PUSH
15884: LD_VAR 0 1
15888: PPUSH
15889: CALL_OW 250
15893: ADD
15894: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15895: LD_ADDR_EXP 31
15899: PUSH
15900: LD_EXP 31
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 251
15914: ADD
15915: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15916: LD_ADDR_EXP 31
15920: PUSH
15921: LD_EXP 31
15925: PUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 254
15935: ADD
15936: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 266
15946: PUSH
15947: LD_INT 1
15949: EQUAL
15950: IFFALSE 16029
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15952: LD_ADDR_EXP 31
15956: PUSH
15957: LD_EXP 31
15961: PUSH
15962: LD_INT 0
15964: ADD
15965: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15966: LD_ADDR_EXP 31
15970: PUSH
15971: LD_EXP 31
15975: PUSH
15976: LD_VAR 0 1
15980: PPUSH
15981: CALL_OW 250
15985: ADD
15986: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15987: LD_ADDR_EXP 31
15991: PUSH
15992: LD_EXP 31
15996: PUSH
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 251
16006: ADD
16007: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16008: LD_ADDR_EXP 31
16012: PUSH
16013: LD_EXP 31
16017: PUSH
16018: LD_VAR 0 1
16022: PPUSH
16023: CALL_OW 254
16027: ADD
16028: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 266
16038: PUSH
16039: LD_INT 3
16041: EQUAL
16042: IFFALSE 16121
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16044: LD_ADDR_EXP 31
16048: PUSH
16049: LD_EXP 31
16053: PUSH
16054: LD_INT 2
16056: ADD
16057: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16058: LD_ADDR_EXP 31
16062: PUSH
16063: LD_EXP 31
16067: PUSH
16068: LD_VAR 0 1
16072: PPUSH
16073: CALL_OW 250
16077: ADD
16078: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16079: LD_ADDR_EXP 31
16083: PUSH
16084: LD_EXP 31
16088: PUSH
16089: LD_VAR 0 1
16093: PPUSH
16094: CALL_OW 251
16098: ADD
16099: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16100: LD_ADDR_EXP 31
16104: PUSH
16105: LD_EXP 31
16109: PUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 254
16119: ADD
16120: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16121: LD_VAR 0 1
16125: PPUSH
16126: CALL_OW 266
16130: PUSH
16131: LD_INT 5
16133: EQUAL
16134: IFFALSE 16213
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16136: LD_ADDR_EXP 31
16140: PUSH
16141: LD_EXP 31
16145: PUSH
16146: LD_INT 4
16148: ADD
16149: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16150: LD_ADDR_EXP 31
16154: PUSH
16155: LD_EXP 31
16159: PUSH
16160: LD_VAR 0 1
16164: PPUSH
16165: CALL_OW 250
16169: ADD
16170: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16171: LD_ADDR_EXP 31
16175: PUSH
16176: LD_EXP 31
16180: PUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 251
16190: ADD
16191: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16192: LD_ADDR_EXP 31
16196: PUSH
16197: LD_EXP 31
16201: PUSH
16202: LD_VAR 0 1
16206: PPUSH
16207: CALL_OW 254
16211: ADD
16212: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16213: LD_VAR 0 1
16217: PPUSH
16218: CALL_OW 257
16222: PUSH
16223: LD_INT 3
16225: EQUAL
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 255
16236: PUSH
16237: LD_INT 3
16239: EQUAL
16240: AND
16241: PUSH
16242: LD_INT 21
16244: PPUSH
16245: CALL_OW 302
16249: AND
16250: PUSH
16251: LD_INT 21
16253: PPUSH
16254: CALL_OW 255
16258: PUSH
16259: LD_INT 3
16261: EQUAL
16262: AND
16263: IFFALSE 16331
// begin uc_side = 3 ;
16265: LD_ADDR_OWVAR 20
16269: PUSH
16270: LD_INT 3
16272: ST_TO_ADDR
// uc_nation = 3 ;
16273: LD_ADDR_OWVAR 21
16277: PUSH
16278: LD_INT 3
16280: ST_TO_ADDR
// hc_gallery :=  ;
16281: LD_ADDR_OWVAR 33
16285: PUSH
16286: LD_STRING 
16288: ST_TO_ADDR
// hc_name :=  ;
16289: LD_ADDR_OWVAR 26
16293: PUSH
16294: LD_STRING 
16296: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16297: LD_INT 0
16299: PPUSH
16300: LD_EXP 34
16304: PPUSH
16305: LD_EXP 35
16309: PPUSH
16310: CALL_OW 12
16314: PPUSH
16315: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16319: CALL_OW 44
16323: PPUSH
16324: LD_INT 21
16326: PPUSH
16327: CALL_OW 52
// end ; end ;
16331: PPOPN 1
16333: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16334: LD_INT 0
16336: PPUSH
16337: PPUSH
16338: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL_OW 264
16348: PUSH
16349: LD_INT 51
16351: EQUAL
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 255
16362: PUSH
16363: LD_INT 3
16365: EQUAL
16366: AND
16367: IFFALSE 16429
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16369: LD_ADDR_VAR 0 5
16373: PUSH
16374: LD_INT 2
16376: PPUSH
16377: CALL_OW 274
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 275
16389: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16390: LD_INT 2
16392: PPUSH
16393: CALL_OW 274
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: LD_VAR 0 5
16405: PUSH
16406: LD_INT 100
16408: MINUS
16409: PPUSH
16410: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16414: LD_VAR 0 1
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: LD_INT 100
16424: PPUSH
16425: CALL_OW 291
// end ; if building = rufabsupp then
16429: LD_VAR 0 2
16433: PUSH
16434: LD_INT 17
16436: EQUAL
16437: IFFALSE 16451
// SetSide ( vehicle , 6 ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_INT 6
16446: PPUSH
16447: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16451: LD_VAR 0 2
16455: PUSH
16456: LD_INT 21
16458: EQUAL
16459: PUSH
16460: LD_VAR 0 2
16464: PPUSH
16465: CALL_OW 255
16469: PUSH
16470: LD_INT 3
16472: EQUAL
16473: AND
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 264
16484: PUSH
16485: LD_INT 42
16487: EQUAL
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 264
16498: PUSH
16499: LD_INT 43
16501: EQUAL
16502: OR
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 264
16513: PUSH
16514: LD_INT 44
16516: EQUAL
16517: OR
16518: PUSH
16519: EMPTY
16520: LIST
16521: AND
16522: IFFALSE 16540
// russianTanks = russianTanks ^ vehicle ;
16524: LD_ADDR_EXP 36
16528: PUSH
16529: LD_EXP 36
16533: PUSH
16534: LD_VAR 0 1
16538: ADD
16539: ST_TO_ADDR
// end ;
16540: PPOPN 5
16542: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16543: LD_VAR 0 1
16547: PPUSH
16548: CALL_OW 255
16552: PUSH
16553: LD_INT 3
16555: EQUAL
16556: IFFALSE 16572
// tamedApemans = tamedApemans + 1 ;
16558: LD_ADDR_EXP 32
16562: PUSH
16563: LD_EXP 32
16567: PUSH
16568: LD_INT 1
16570: PLUS
16571: ST_TO_ADDR
// end ;
16572: PPOPN 2
16574: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16575: LD_INT 0
16577: PPUSH
16578: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 255
16588: PUSH
16589: LD_INT 3
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 247
16602: PUSH
16603: LD_INT 2
16605: EQUAL
16606: AND
16607: PUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: CALL_OW 264
16617: PUSH
16618: LD_INT 42
16620: EQUAL
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 264
16631: PUSH
16632: LD_INT 43
16634: EQUAL
16635: OR
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 264
16646: PUSH
16647: LD_INT 44
16649: EQUAL
16650: OR
16651: PUSH
16652: EMPTY
16653: LIST
16654: AND
16655: IFFALSE 16795
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16657: LD_INT 21
16659: PPUSH
16660: LD_VAR 0 1
16664: PPUSH
16665: CALL_OW 265
16669: PPUSH
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 262
16679: PPUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 263
16689: PPUSH
16690: LD_VAR 0 1
16694: PPUSH
16695: CALL_OW 264
16699: PPUSH
16700: CALL_OW 185
// for i in russianDamageTanks do
16704: LD_ADDR_VAR 0 2
16708: PUSH
16709: LD_EXP 37
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16750
// if i = unit then
16717: LD_VAR 0 2
16721: PUSH
16722: LD_VAR 0 1
16726: EQUAL
16727: IFFALSE 16748
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16729: LD_ADDR_EXP 37
16733: PUSH
16734: LD_EXP 37
16738: PUSH
16739: LD_VAR 0 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: DIFF
16747: ST_TO_ADDR
16748: GO 16714
16750: POP
16751: POP
// tmpMeh = UnitsInside ( unit ) ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 313
16766: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16767: LD_VAR 0 3
16771: PPUSH
16772: CALL_OW 121
// wait ( 0 0$01 ) ;
16776: LD_INT 35
16778: PPUSH
16779: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_INT 21
16790: PPUSH
16791: CALL_OW 120
// end ; end ;
16795: PPOPN 3
16797: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16798: LD_VAR 0 1
16802: PUSH
16803: LD_INT 21
16805: EQUAL
16806: PUSH
16807: LD_VAR 0 2
16811: PPUSH
16812: CALL_OW 255
16816: PUSH
16817: LD_INT 3
16819: EQUAL
16820: AND
16821: IFFALSE 16835
// SetLives ( human , 1000 ) ;
16823: LD_VAR 0 2
16827: PPUSH
16828: LD_INT 1000
16830: PPUSH
16831: CALL_OW 234
// end ; end_of_file
16835: PPOPN 2
16837: END
// every 0 0$30 trigger cratesStatus = 1 do
16838: LD_EXP 38
16842: PUSH
16843: LD_INT 1
16845: EQUAL
16846: IFFALSE 16910
16848: GO 16850
16850: DISABLE
// begin enable ;
16851: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16852: LD_INT 350
16854: PUSH
16855: LD_INT 1050
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: PPUSH
16865: LD_INT 2
16867: PPUSH
16868: CALL_OW 12
16872: ARRAY
16873: PPUSH
16874: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16878: LD_INT 4
16880: PUSH
16881: LD_INT 5
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 1
16890: PPUSH
16891: LD_INT 2
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: PPUSH
16900: LD_INT 7
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 55
// end ;
16910: END
// every 1 1$0 trigger cratesStatus = 2 do
16911: LD_EXP 38
16915: PUSH
16916: LD_INT 2
16918: EQUAL
16919: IFFALSE 16983
16921: GO 16923
16923: DISABLE
// begin enable ;
16924: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16925: LD_INT 3150
16927: PUSH
16928: LD_INT 4550
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 1
16937: PPUSH
16938: LD_INT 2
16940: PPUSH
16941: CALL_OW 12
16945: ARRAY
16946: PPUSH
16947: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16951: LD_INT 2
16953: PUSH
16954: LD_INT 5
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_INT 2
16966: PPUSH
16967: CALL_OW 12
16971: ARRAY
16972: PPUSH
16973: LD_INT 8
16975: PPUSH
16976: LD_INT 1
16978: PPUSH
16979: CALL_OW 55
// end ;
16983: END
// every 0 0$30 + 0 0$10 do
16984: GO 16986
16986: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16987: LD_INT 4
16989: PUSH
16990: LD_INT 5
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 1
16999: PPUSH
17000: LD_INT 2
17002: PPUSH
17003: CALL_OW 12
17007: ARRAY
17008: PPUSH
17009: LD_INT 8
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL_OW 55
// Wait ( 0 0$15 ) ;
17019: LD_INT 525
17021: PPUSH
17022: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17026: LD_INT 4
17028: PUSH
17029: LD_INT 5
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 1
17038: PPUSH
17039: LD_INT 2
17041: PPUSH
17042: CALL_OW 12
17046: ARRAY
17047: PPUSH
17048: LD_INT 8
17050: PPUSH
17051: LD_INT 1
17053: PPUSH
17054: CALL_OW 55
// Wait ( 0 0$20 ) ;
17058: LD_INT 700
17060: PPUSH
17061: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17065: LD_INT 4
17067: PUSH
17068: LD_INT 5
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 1
17077: PPUSH
17078: LD_INT 2
17080: PPUSH
17081: CALL_OW 12
17085: ARRAY
17086: PPUSH
17087: LD_INT 8
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 55
// end ; end_of_file
17097: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17098: LD_EXP 24
17102: PUSH
17103: LD_INT 1
17105: EQUAL
17106: IFFALSE 17407
17108: GO 17110
17110: DISABLE
17111: LD_INT 0
17113: PPUSH
17114: PPUSH
17115: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17116: LD_ADDR_VAR 0 2
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_INT 1
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 21
17133: PUSH
17134: LD_INT 3
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 2
17143: PUSH
17144: LD_INT 30
17146: PUSH
17147: LD_INT 0
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: PPUSH
17174: CALL_OW 69
17178: ST_TO_ADDR
// for i in tmp do
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_VAR 0 2
17188: PUSH
17189: FOR_IN
17190: IFFALSE 17223
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17192: LD_ADDR_VAR 0 3
17196: PUSH
17197: LD_VAR 0 3
17201: PUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 274
17211: PPUSH
17212: LD_INT 1
17214: PPUSH
17215: CALL_OW 275
17219: PLUS
17220: ST_TO_ADDR
17221: GO 17189
17223: POP
17224: POP
// strings = [ ] ;
17225: LD_ADDR_EXP 27
17229: PUSH
17230: EMPTY
17231: ST_TO_ADDR
// if tmp = 0 then
17232: LD_VAR 0 2
17236: PUSH
17237: LD_INT 0
17239: EQUAL
17240: IFFALSE 17265
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17242: LD_ADDR_EXP 27
17246: PUSH
17247: LD_EXP 27
17251: PUSH
17252: LD_STRING #Am06-1
17254: PUSH
17255: LD_EXP 25
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: ADD
17264: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17265: LD_VAR 0 2
17269: PUSH
17270: LD_INT 0
17272: GREATER
17273: PUSH
17274: LD_EXP 25
17278: PUSH
17279: LD_VAR 0 3
17283: GREATER
17284: AND
17285: IFFALSE 17316
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17287: LD_ADDR_EXP 27
17291: PUSH
17292: LD_EXP 27
17296: PUSH
17297: LD_STRING #Am06-1
17299: PUSH
17300: LD_EXP 25
17304: PUSH
17305: LD_VAR 0 3
17309: MINUS
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: ADD
17315: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17316: LD_VAR 0 2
17320: PUSH
17321: LD_INT 0
17323: GREATER
17324: PUSH
17325: LD_EXP 25
17329: PUSH
17330: LD_VAR 0 3
17334: LESSEQUAL
17335: AND
17336: IFFALSE 17359
// strings = strings ^ [ #Am06-1 , 0 ] ;
17338: LD_ADDR_EXP 27
17342: PUSH
17343: LD_EXP 27
17347: PUSH
17348: LD_STRING #Am06-1
17350: PUSH
17351: LD_INT 0
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: ADD
17358: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17359: LD_ADDR_EXP 26
17363: PUSH
17364: LD_EXP 26
17368: PUSH
17369: LD_INT 35
17371: MINUS
17372: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17373: LD_ADDR_EXP 27
17377: PUSH
17378: LD_EXP 27
17382: PUSH
17383: LD_STRING #Am06-2
17385: PUSH
17386: LD_EXP 26
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: ADD
17395: ST_TO_ADDR
// display_strings = strings ;
17396: LD_ADDR_OWVAR 47
17400: PUSH
17401: LD_EXP 27
17405: ST_TO_ADDR
// enable ;
17406: ENABLE
// end ; end_of_file
17407: PPOPN 3
17409: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17410: LD_INT 0
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
// j = 0 ;
17419: LD_ADDR_VAR 0 3
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17427: LD_INT 35
17429: PPUSH
17430: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17434: LD_ADDR_VAR 0 2
17438: PUSH
17439: LD_INT 22
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 21
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 2
17461: PUSH
17462: LD_INT 25
17464: PUSH
17465: LD_INT 1
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 25
17474: PUSH
17475: LD_INT 2
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 25
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 25
17494: PUSH
17495: LD_INT 4
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: PPUSH
17514: CALL_OW 69
17518: PUSH
17519: FOR_IN
17520: IFFALSE 17626
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17522: LD_INT 22
17524: PUSH
17525: LD_INT 3
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 2
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 2
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 21
17557: PUSH
17558: LD_INT 3
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 59
17567: PUSH
17568: EMPTY
17569: LIST
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 91
17580: PUSH
17581: LD_VAR 0 2
17585: PUSH
17586: LD_INT 25
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 69
17603: NOT
17604: IFFALSE 17624
// begin tmp = i ;
17606: LD_ADDR_VAR 0 4
17610: PUSH
17611: LD_VAR 0 2
17615: ST_TO_ADDR
// j = 1 ;
17616: LD_ADDR_VAR 0 3
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
// end ; end ;
17624: GO 17519
17626: POP
17627: POP
// until j = 1 ;
17628: LD_VAR 0 3
17632: PUSH
17633: LD_INT 1
17635: EQUAL
17636: IFFALSE 17427
// blockSpawn = 1 ;
17638: LD_ADDR_EXP 29
17642: PUSH
17643: LD_INT 1
17645: ST_TO_ADDR
// uc_side = 2 ;
17646: LD_ADDR_OWVAR 20
17650: PUSH
17651: LD_INT 2
17653: ST_TO_ADDR
// uc_nation = 2 ;
17654: LD_ADDR_OWVAR 21
17658: PUSH
17659: LD_INT 2
17661: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17662: LD_ADDR_EXP 19
17666: PUSH
17667: LD_STRING Kurt
17669: PPUSH
17670: LD_INT 0
17672: PPUSH
17673: CALL 5092 0 2
17677: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17678: LD_EXP 19
17682: PPUSH
17683: LD_VAR 0 4
17687: PPUSH
17688: CALL_OW 250
17692: PPUSH
17693: LD_VAR 0 4
17697: PPUSH
17698: CALL_OW 251
17702: PPUSH
17703: LD_INT 5
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 50
// InGameOn ;
17713: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17717: LD_EXP 19
17721: PPUSH
17722: CALL_OW 87
// wait ( 0 0$2 ) ;
17726: LD_INT 70
17728: PPUSH
17729: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17733: LD_VAR 0 4
17737: PPUSH
17738: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 122
// wait ( 0 0$1 ) ;
17751: LD_INT 35
17753: PPUSH
17754: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17758: LD_EXP 19
17762: PPUSH
17763: LD_VAR 0 4
17767: PPUSH
17768: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17772: LD_VAR 0 4
17776: PPUSH
17777: LD_EXP 19
17781: PPUSH
17782: CALL_OW 119
// DialogueOn ;
17786: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17790: LD_EXP 19
17794: PPUSH
17795: LD_STRING D2-Kurt-1
17797: PPUSH
17798: CALL_OW 88
// if tmp = JMM then
17802: LD_VAR 0 4
17806: PUSH
17807: LD_EXP 1
17811: EQUAL
17812: IFFALSE 17904
// begin Say ( JMM , D2-JMM-1 ) ;
17814: LD_EXP 1
17818: PPUSH
17819: LD_STRING D2-JMM-1
17821: PPUSH
17822: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17826: LD_EXP 19
17830: PPUSH
17831: LD_STRING D2-Kurt-2
17833: PPUSH
17834: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17838: LD_EXP 1
17842: PPUSH
17843: LD_STRING D2-JMM-2
17845: PPUSH
17846: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17850: LD_EXP 19
17854: PPUSH
17855: LD_STRING D2-Kurt-3
17857: PPUSH
17858: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17862: LD_EXP 1
17866: PPUSH
17867: LD_STRING D2-JMM-3
17869: PPUSH
17870: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17874: LD_EXP 19
17878: PPUSH
17879: LD_STRING D2-Kurt-4
17881: PPUSH
17882: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17886: LD_EXP 1
17890: PPUSH
17891: LD_STRING D2-JMM-4
17893: PPUSH
17894: CALL_OW 88
// DialogueOff ;
17898: CALL_OW 7
// end else
17902: GO 18214
// begin if GetSex ( tmp ) = 1 then
17904: LD_VAR 0 4
17908: PPUSH
17909: CALL_OW 258
17913: PUSH
17914: LD_INT 1
17916: EQUAL
17917: IFFALSE 17931
// Say ( tmp , D2-Sol1-1 ) ;
17919: LD_VAR 0 4
17923: PPUSH
17924: LD_STRING D2-Sol1-1
17926: PPUSH
17927: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17931: LD_VAR 0 4
17935: PPUSH
17936: CALL_OW 258
17940: PUSH
17941: LD_INT 2
17943: EQUAL
17944: IFFALSE 17958
// Say ( tmp , D2-FSol1-1 ) ;
17946: LD_VAR 0 4
17950: PPUSH
17951: LD_STRING D2-FSol1-1
17953: PPUSH
17954: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17958: LD_EXP 19
17962: PPUSH
17963: LD_STRING D2-Kurt-2
17965: PPUSH
17966: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17970: LD_VAR 0 4
17974: PPUSH
17975: CALL_OW 258
17979: PUSH
17980: LD_INT 1
17982: EQUAL
17983: IFFALSE 17997
// Say ( tmp , D2-Sol1-2 ) ;
17985: LD_VAR 0 4
17989: PPUSH
17990: LD_STRING D2-Sol1-2
17992: PPUSH
17993: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17997: LD_VAR 0 4
18001: PPUSH
18002: CALL_OW 258
18006: PUSH
18007: LD_INT 2
18009: EQUAL
18010: IFFALSE 18024
// Say ( tmp , D2-FSol1-2 ) ;
18012: LD_VAR 0 4
18016: PPUSH
18017: LD_STRING D2-FSol1-2
18019: PPUSH
18020: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18024: LD_EXP 19
18028: PPUSH
18029: LD_STRING D2-Kurt-3
18031: PPUSH
18032: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18036: LD_VAR 0 4
18040: PPUSH
18041: CALL_OW 258
18045: PUSH
18046: LD_INT 1
18048: EQUAL
18049: IFFALSE 18063
// Say ( tmp , D2-Sol1-3 ) ;
18051: LD_VAR 0 4
18055: PPUSH
18056: LD_STRING D2-Sol1-3
18058: PPUSH
18059: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18063: LD_VAR 0 4
18067: PPUSH
18068: CALL_OW 258
18072: PUSH
18073: LD_INT 2
18075: EQUAL
18076: IFFALSE 18090
// Say ( tmp , D2-FSol1-3 ) ;
18078: LD_VAR 0 4
18082: PPUSH
18083: LD_STRING D2-FSol1-3
18085: PPUSH
18086: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18090: LD_EXP 19
18094: PPUSH
18095: LD_STRING D2-Kurt-4
18097: PPUSH
18098: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18102: LD_VAR 0 4
18106: PPUSH
18107: CALL_OW 258
18111: PUSH
18112: LD_INT 1
18114: EQUAL
18115: IFFALSE 18129
// Say ( tmp , D2-Sol1-4 ) ;
18117: LD_VAR 0 4
18121: PPUSH
18122: LD_STRING D2-Sol1-4
18124: PPUSH
18125: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18129: LD_VAR 0 4
18133: PPUSH
18134: CALL_OW 258
18138: PUSH
18139: LD_INT 2
18141: EQUAL
18142: IFFALSE 18156
// Say ( tmp , D2-FSol1-4 ) ;
18144: LD_VAR 0 4
18148: PPUSH
18149: LD_STRING D2-FSol1-4
18151: PPUSH
18152: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18156: LD_VAR 0 4
18160: PPUSH
18161: CALL_OW 258
18165: PUSH
18166: LD_INT 1
18168: EQUAL
18169: IFFALSE 18183
// Say ( tmp , D2-Sol1-5 ) ;
18171: LD_VAR 0 4
18175: PPUSH
18176: LD_STRING D2-Sol1-5
18178: PPUSH
18179: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18183: LD_VAR 0 4
18187: PPUSH
18188: CALL_OW 258
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: IFFALSE 18210
// Say ( tmp , D2-FSol1-5 ) ;
18198: LD_VAR 0 4
18202: PPUSH
18203: LD_STRING D2-FSol1-5
18205: PPUSH
18206: CALL_OW 88
// DialogueOff ;
18210: CALL_OW 7
// end ; dec = ShowQuery1 ;
18214: LD_ADDR_VAR 0 6
18218: PUSH
18219: CALL 5694 0 0
18223: ST_TO_ADDR
// if dec = 1 then
18224: LD_VAR 0 6
18228: PUSH
18229: LD_INT 1
18231: EQUAL
18232: IFFALSE 18274
// begin DialogueOn ;
18234: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18238: LD_EXP 19
18242: PPUSH
18243: LD_STRING D2a-Kurt-1
18245: PPUSH
18246: CALL_OW 88
// DialogueOff ;
18250: CALL_OW 7
// InGameOff ;
18254: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18258: LD_INT 1
18260: PPUSH
18261: LD_INT 2
18263: PPUSH
18264: LD_INT 2
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: CALL_OW 80
// end ; if dec = 2 then
18274: LD_VAR 0 6
18278: PUSH
18279: LD_INT 2
18281: EQUAL
18282: IFFALSE 18782
// begin DialogueOn ;
18284: CALL_OW 6
// if tmp = JMM then
18288: LD_VAR 0 4
18292: PUSH
18293: LD_EXP 1
18297: EQUAL
18298: IFFALSE 18354
// begin Say ( JMM , D2b-JMM-1 ) ;
18300: LD_EXP 1
18304: PPUSH
18305: LD_STRING D2b-JMM-1
18307: PPUSH
18308: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18312: LD_EXP 19
18316: PPUSH
18317: LD_STRING D2b-Kurt-1
18319: PPUSH
18320: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18324: LD_EXP 1
18328: PPUSH
18329: LD_STRING D2b-JMM-2
18331: PPUSH
18332: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18336: LD_EXP 19
18340: PPUSH
18341: LD_STRING D2b-Kurt-2
18343: PPUSH
18344: CALL_OW 88
// DialogueOff ;
18348: CALL_OW 7
// end else
18352: GO 18544
// begin if GetSex ( tmp ) = 1 then
18354: LD_VAR 0 4
18358: PPUSH
18359: CALL_OW 258
18363: PUSH
18364: LD_INT 1
18366: EQUAL
18367: IFFALSE 18381
// Say ( tmp , D2b-Sol1-1 ) ;
18369: LD_VAR 0 4
18373: PPUSH
18374: LD_STRING D2b-Sol1-1
18376: PPUSH
18377: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18381: LD_VAR 0 4
18385: PPUSH
18386: CALL_OW 258
18390: PUSH
18391: LD_INT 2
18393: EQUAL
18394: IFFALSE 18408
// Say ( tmp , D2b-FSol1-1 ) ;
18396: LD_VAR 0 4
18400: PPUSH
18401: LD_STRING D2b-FSol1-1
18403: PPUSH
18404: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18408: LD_EXP 19
18412: PPUSH
18413: LD_STRING D2b-Kurt-1
18415: PPUSH
18416: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18420: LD_VAR 0 4
18424: PPUSH
18425: CALL_OW 258
18429: PUSH
18430: LD_INT 1
18432: EQUAL
18433: IFFALSE 18447
// Say ( tmp , D2b-Sol1-2 ) ;
18435: LD_VAR 0 4
18439: PPUSH
18440: LD_STRING D2b-Sol1-2
18442: PPUSH
18443: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18447: LD_VAR 0 4
18451: PPUSH
18452: CALL_OW 258
18456: PUSH
18457: LD_INT 2
18459: EQUAL
18460: IFFALSE 18474
// Say ( tmp , D2b-FSol1-2 ) ;
18462: LD_VAR 0 4
18466: PPUSH
18467: LD_STRING D2b-FSol1-2
18469: PPUSH
18470: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18474: LD_EXP 19
18478: PPUSH
18479: LD_STRING D2b-Kurt-2
18481: PPUSH
18482: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18486: LD_VAR 0 4
18490: PPUSH
18491: CALL_OW 258
18495: PUSH
18496: LD_INT 1
18498: EQUAL
18499: IFFALSE 18513
// Say ( tmp , D2c-Sol1-2 ) ;
18501: LD_VAR 0 4
18505: PPUSH
18506: LD_STRING D2c-Sol1-2
18508: PPUSH
18509: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18513: LD_VAR 0 4
18517: PPUSH
18518: CALL_OW 258
18522: PUSH
18523: LD_INT 2
18525: EQUAL
18526: IFFALSE 18540
// Say ( tmp , D2c-FSol1-2 ) ;
18528: LD_VAR 0 4
18532: PPUSH
18533: LD_STRING D2c-FSol1-2
18535: PPUSH
18536: CALL_OW 88
// DialogueOff ;
18540: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18544: LD_ADDR_VAR 0 7
18548: PUSH
18549: CALL 5768 0 0
18553: ST_TO_ADDR
// if dec2 = 1 then
18554: LD_VAR 0 7
18558: PUSH
18559: LD_INT 1
18561: EQUAL
18562: IFFALSE 18604
// begin DialogueOn ;
18564: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18568: LD_EXP 19
18572: PPUSH
18573: LD_STRING D2a-Kurt-1
18575: PPUSH
18576: CALL_OW 88
// DialogueOff ;
18580: CALL_OW 7
// InGameOff ;
18584: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18588: LD_INT 1
18590: PPUSH
18591: LD_INT 2
18593: PPUSH
18594: LD_INT 2
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 80
// end ; if dec2 = 2 then
18604: LD_VAR 0 7
18608: PUSH
18609: LD_INT 2
18611: EQUAL
18612: IFFALSE 18782
// begin if tmp = JMM then
18614: LD_VAR 0 4
18618: PUSH
18619: LD_EXP 1
18623: EQUAL
18624: IFFALSE 18684
// begin DialogueOn ;
18626: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18630: LD_EXP 1
18634: PPUSH
18635: LD_STRING D2c-JMM-1
18637: PPUSH
18638: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18642: LD_EXP 19
18646: PPUSH
18647: LD_STRING D2c-Kurt-1
18649: PPUSH
18650: CALL_OW 88
// DialogueOff ;
18654: CALL_OW 7
// InGameOff ;
18658: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18662: LD_EXP 19
18666: PPUSH
18667: LD_INT 9
18669: PPUSH
18670: CALL_OW 113
// readyToEscape = 1 ;
18674: LD_ADDR_EXP 21
18678: PUSH
18679: LD_INT 1
18681: ST_TO_ADDR
// end else
18682: GO 18782
// begin DialogueOn ;
18684: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18688: LD_VAR 0 4
18692: PPUSH
18693: CALL_OW 258
18697: PUSH
18698: LD_INT 1
18700: EQUAL
18701: IFFALSE 18715
// Say ( tmp , D2c-Sol1-1 ) ;
18703: LD_VAR 0 4
18707: PPUSH
18708: LD_STRING D2c-Sol1-1
18710: PPUSH
18711: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18715: LD_VAR 0 4
18719: PPUSH
18720: CALL_OW 258
18724: PUSH
18725: LD_INT 2
18727: EQUAL
18728: IFFALSE 18742
// Say ( tmp , D2c-FSol1-1 ) ;
18730: LD_VAR 0 4
18734: PPUSH
18735: LD_STRING D2c-FSol1-1
18737: PPUSH
18738: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18742: LD_EXP 19
18746: PPUSH
18747: LD_STRING D2c-Kurt-1
18749: PPUSH
18750: CALL_OW 88
// DialogueOff ;
18754: CALL_OW 7
// InGameOff ;
18758: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18762: LD_EXP 19
18766: PPUSH
18767: LD_INT 9
18769: PPUSH
18770: CALL_OW 113
// readyToEscape = 1 ;
18774: LD_ADDR_EXP 21
18778: PUSH
18779: LD_INT 1
18781: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18782: LD_VAR 0 6
18786: PUSH
18787: LD_INT 3
18789: EQUAL
18790: IFFALSE 18964
// begin DialogueOn ;
18792: CALL_OW 6
// if tmp = JMM then
18796: LD_VAR 0 4
18800: PUSH
18801: LD_EXP 1
18805: EQUAL
18806: IFFALSE 18866
// begin DialogueOn ;
18808: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18812: LD_EXP 1
18816: PPUSH
18817: LD_STRING D2c-JMM-1
18819: PPUSH
18820: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18824: LD_EXP 19
18828: PPUSH
18829: LD_STRING D2c-Kurt-1
18831: PPUSH
18832: CALL_OW 88
// DialogueOff ;
18836: CALL_OW 7
// InGameOff ;
18840: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18844: LD_EXP 19
18848: PPUSH
18849: LD_INT 9
18851: PPUSH
18852: CALL_OW 113
// readyToEscape = 1 ;
18856: LD_ADDR_EXP 21
18860: PUSH
18861: LD_INT 1
18863: ST_TO_ADDR
// end else
18864: GO 18964
// begin DialogueOn ;
18866: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18870: LD_VAR 0 4
18874: PPUSH
18875: CALL_OW 258
18879: PUSH
18880: LD_INT 1
18882: EQUAL
18883: IFFALSE 18897
// Say ( tmp , D2c-Sol1-1 ) ;
18885: LD_VAR 0 4
18889: PPUSH
18890: LD_STRING D2c-Sol1-1
18892: PPUSH
18893: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18897: LD_VAR 0 4
18901: PPUSH
18902: CALL_OW 258
18906: PUSH
18907: LD_INT 2
18909: EQUAL
18910: IFFALSE 18924
// Say ( tmp , D2c-FSol1-1 ) ;
18912: LD_VAR 0 4
18916: PPUSH
18917: LD_STRING D2c-FSol1-1
18919: PPUSH
18920: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18924: LD_EXP 19
18928: PPUSH
18929: LD_STRING D2c-Kurt-1
18931: PPUSH
18932: CALL_OW 88
// DialogueOff ;
18936: CALL_OW 7
// InGameOff ;
18940: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18944: LD_EXP 19
18948: PPUSH
18949: LD_INT 9
18951: PPUSH
18952: CALL_OW 113
// readyToEscape = 1 ;
18956: LD_ADDR_EXP 21
18960: PUSH
18961: LD_INT 1
18963: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18964: LD_ADDR_EXP 29
18968: PUSH
18969: LD_INT 0
18971: ST_TO_ADDR
// end ; end_of_file
18972: LD_VAR 0 1
18976: RET
// every 0 0$1 do
18977: GO 18979
18979: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18980: LD_INT 3
18982: PPUSH
18983: LD_INT 32
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: CALL 5823 0 3
18993: END
// every 0 0$1 do
18994: GO 18996
18996: DISABLE
// begin enable ;
18997: ENABLE
// RepairBuilding ( 3 , rudepo , RussianBase ) ;
18998: LD_INT 3
19000: PPUSH
19001: LD_INT 2
19003: PPUSH
19004: LD_INT 11
19006: PPUSH
19007: CALL 5908 0 3
// if disableHealAI = 0 then
19011: LD_EXP 33
19015: PUSH
19016: LD_INT 0
19018: EQUAL
19019: IFFALSE 19037
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
19021: LD_INT 3
19023: PPUSH
19024: LD_INT 10
19026: PPUSH
19027: LD_INT 11
19029: PPUSH
19030: LD_INT 32
19032: PPUSH
19033: CALL 6225 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19037: LD_INT 3
19039: PPUSH
19040: LD_INT 51
19042: PPUSH
19043: LD_INT 7
19045: PPUSH
19046: CALL 8129 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
19050: LD_INT 3
19052: PPUSH
19053: LD_INT 14
19055: PPUSH
19056: LD_INT 121
19058: PPUSH
19059: LD_INT 100
19061: PPUSH
19062: CALL 7366 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
19066: LD_INT 3
19068: PPUSH
19069: LD_INT 1
19071: PPUSH
19072: CALL 6854 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19076: LD_INT 3
19078: PPUSH
19079: LD_EXP 31
19083: PPUSH
19084: CALL 8272 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
19088: LD_INT 3
19090: PPUSH
19091: LD_INT 8
19093: PUSH
19094: LD_INT 67
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_INT 2
19106: PPUSH
19107: CALL_OW 12
19111: ARRAY
19112: PPUSH
19113: LD_INT 11
19115: PPUSH
19116: CALL 8478 0 3
// AttackNearBuildings ( 3 , 1 ) ;
19120: LD_INT 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL 8835 0 2
// end ;
19130: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19131: LD_INT 22
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 21
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 55
19153: PUSH
19154: EMPTY
19155: LIST
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 34
19162: PUSH
19163: LD_INT 51
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: PPUSH
19180: CALL_OW 69
19184: PUSH
19185: LD_INT 0
19187: EQUAL
19188: PUSH
19189: LD_INT 21
19191: PPUSH
19192: CALL_OW 255
19196: PUSH
19197: LD_INT 3
19199: EQUAL
19200: AND
19201: PUSH
19202: LD_INT 21
19204: PPUSH
19205: CALL_OW 302
19209: AND
19210: PUSH
19211: LD_INT 2
19213: PPUSH
19214: CALL_OW 255
19218: PUSH
19219: LD_INT 3
19221: EQUAL
19222: AND
19223: PUSH
19224: LD_INT 2
19226: PPUSH
19227: CALL_OW 302
19231: AND
19232: IFFALSE 19416
19234: GO 19236
19236: DISABLE
// begin enable ;
19237: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
19238: LD_INT 2
19240: PPUSH
19241: CALL_OW 274
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: LD_INT 1000
19251: PPUSH
19252: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19256: LD_INT 3
19258: PPUSH
19259: LD_INT 21
19261: PPUSH
19262: LD_INT 5
19264: PUSH
19265: LD_INT 6
19267: PUSH
19268: LD_INT 6
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: LD_OWVAR 67
19280: ARRAY
19281: PPUSH
19282: LD_INT 43
19284: PUSH
19285: LD_INT 43
19287: PUSH
19288: LD_INT 44
19290: PUSH
19291: LD_INT 44
19293: PUSH
19294: LD_INT 46
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 43
19306: PUSH
19307: LD_INT 43
19309: PUSH
19310: LD_INT 44
19312: PUSH
19313: LD_INT 44
19315: PUSH
19316: LD_INT 44
19318: PUSH
19319: LD_INT 46
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: PUSH
19330: LD_INT 44
19332: PUSH
19333: LD_INT 44
19335: PUSH
19336: LD_INT 44
19338: PUSH
19339: LD_INT 44
19341: PUSH
19342: LD_INT 46
19344: PUSH
19345: LD_INT 46
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: PUSH
19361: LD_OWVAR 67
19365: ARRAY
19366: PPUSH
19367: LD_INT 1
19369: PPUSH
19370: LD_INT 1
19372: PPUSH
19373: LD_INT 22
19375: PUSH
19376: LD_INT 22
19378: PUSH
19379: LD_INT 24
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 2
19391: PPUSH
19392: CALL_OW 12
19396: ARRAY
19397: PUSH
19398: LD_INT 24
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: PUSH
19406: LD_OWVAR 67
19410: ARRAY
19411: PPUSH
19412: CALL 6700 0 7
// end ;
19416: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19417: LD_INT 17
19419: PPUSH
19420: CALL_OW 255
19424: PUSH
19425: LD_INT 3
19427: EQUAL
19428: PUSH
19429: LD_INT 17
19431: PPUSH
19432: CALL_OW 302
19436: AND
19437: PUSH
19438: LD_INT 2
19440: PPUSH
19441: CALL_OW 255
19445: PUSH
19446: LD_INT 3
19448: EQUAL
19449: AND
19450: PUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 302
19458: AND
19459: IFFALSE 19526
19461: GO 19463
19463: DISABLE
// begin enable ;
19464: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19465: LD_INT 17
19467: PPUSH
19468: LD_INT 22
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: LD_INT 1
19476: PPUSH
19477: LD_INT 42
19479: PUSH
19480: LD_INT 43
19482: PUSH
19483: LD_INT 44
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PPUSH
19494: LD_INT 3
19496: PPUSH
19497: CALL_OW 12
19501: ARRAY
19502: PPUSH
19503: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19507: LD_INT 17
19509: PPUSH
19510: LD_INT 22
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: LD_INT 51
19521: PPUSH
19522: CALL_OW 185
// end ;
19526: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19527: LD_INT 17
19529: PPUSH
19530: CALL_OW 302
19534: PUSH
19535: LD_INT 17
19537: PPUSH
19538: CALL_OW 255
19542: PUSH
19543: LD_INT 3
19545: EQUAL
19546: AND
19547: PUSH
19548: LD_INT 2
19550: PPUSH
19551: CALL_OW 302
19555: AND
19556: PUSH
19557: LD_INT 2
19559: PPUSH
19560: CALL_OW 255
19564: PUSH
19565: LD_INT 3
19567: EQUAL
19568: AND
19569: PUSH
19570: LD_INT 17
19572: PPUSH
19573: CALL_OW 313
19577: NOT
19578: AND
19579: IFFALSE 19673
19581: GO 19583
19583: DISABLE
19584: LD_INT 0
19586: PPUSH
// begin for i = 1 to 6 do
19587: LD_ADDR_VAR 0 1
19591: PUSH
19592: DOUBLE
19593: LD_INT 1
19595: DEC
19596: ST_TO_ADDR
19597: LD_INT 6
19599: PUSH
19600: FOR_TO
19601: IFFALSE 19671
// begin uc_side = 3 ;
19603: LD_ADDR_OWVAR 20
19607: PUSH
19608: LD_INT 3
19610: ST_TO_ADDR
// uc_nation = 3 ;
19611: LD_ADDR_OWVAR 21
19615: PUSH
19616: LD_INT 3
19618: ST_TO_ADDR
// hc_gallery :=  ;
19619: LD_ADDR_OWVAR 33
19623: PUSH
19624: LD_STRING 
19626: ST_TO_ADDR
// hc_name :=  ;
19627: LD_ADDR_OWVAR 26
19631: PUSH
19632: LD_STRING 
19634: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19635: LD_INT 0
19637: PPUSH
19638: LD_EXP 34
19642: PPUSH
19643: LD_EXP 35
19647: PPUSH
19648: CALL_OW 12
19652: PPUSH
19653: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19657: CALL_OW 44
19661: PPUSH
19662: LD_INT 17
19664: PPUSH
19665: CALL_OW 52
// end ;
19669: GO 19600
19671: POP
19672: POP
// end ;
19673: PPOPN 1
19675: END
// every 2 2$0 do var i , j ;
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19683: LD_INT 14700
19685: PUSH
19686: LD_INT 33600
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 1
19695: PPUSH
19696: LD_INT 2
19698: PPUSH
19699: CALL_OW 12
19703: ARRAY
19704: PPUSH
19705: CALL_OW 67
// disableHealAI = 1 ;
19709: LD_ADDR_EXP 33
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19717: LD_ADDR_VAR 0 1
19721: PUSH
19722: LD_INT 22
19724: PUSH
19725: LD_INT 3
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 25
19734: PUSH
19735: LD_INT 4
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PPUSH
19746: CALL_OW 69
19750: PUSH
19751: FOR_IN
19752: IFFALSE 19765
// ComExitBuilding ( i ) ;
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL_OW 122
19763: GO 19751
19765: POP
19766: POP
// wait ( 0 0$1 ) ;
19767: LD_INT 35
19769: PPUSH
19770: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19774: LD_INT 35
19776: PPUSH
19777: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19781: LD_ADDR_VAR 0 1
19785: PUSH
19786: LD_INT 22
19788: PUSH
19789: LD_INT 3
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 25
19798: PUSH
19799: LD_INT 4
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: PUSH
19815: FOR_IN
19816: IFFALSE 19893
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19818: LD_ADDR_VAR 0 2
19822: PUSH
19823: LD_INT 19
19825: PPUSH
19826: LD_INT 22
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 25
19838: PUSH
19839: LD_INT 12
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PPUSH
19850: CALL_OW 70
19854: PUSH
19855: FOR_IN
19856: IFFALSE 19889
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19858: LD_VAR 0 1
19862: PPUSH
19863: LD_VAR 0 2
19867: PPUSH
19868: CALL_OW 250
19872: PPUSH
19873: LD_VAR 0 2
19877: PPUSH
19878: CALL_OW 251
19882: PPUSH
19883: CALL_OW 191
// end ;
19887: GO 19855
19889: POP
19890: POP
// end ;
19891: GO 19815
19893: POP
19894: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19895: LD_INT 22
19897: PUSH
19898: LD_INT 3
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 4
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PPUSH
19919: CALL_OW 69
19923: PUSH
19924: LD_INT 0
19926: EQUAL
19927: PUSH
19928: LD_EXP 32
19932: PUSH
19933: LD_INT 6
19935: PUSH
19936: LD_INT 7
19938: PUSH
19939: LD_INT 8
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: LD_OWVAR 67
19951: ARRAY
19952: GREATEREQUAL
19953: OR
19954: PUSH
19955: LD_INT 19
19957: PPUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 25
19970: PUSH
19971: LD_INT 12
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 70
19986: PUSH
19987: LD_INT 0
19989: EQUAL
19990: OR
19991: IFFALSE 19774
// disableHealAI = 0 ;
19993: LD_ADDR_EXP 33
19997: PUSH
19998: LD_INT 0
20000: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20001: LD_ADDR_VAR 0 1
20005: PUSH
20006: LD_INT 22
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PUSH
20016: LD_INT 25
20018: PUSH
20019: LD_INT 12
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PPUSH
20030: CALL_OW 69
20034: PUSH
20035: FOR_IN
20036: IFFALSE 20052
// SetClass ( i , 16 ) ;
20038: LD_VAR 0 1
20042: PPUSH
20043: LD_INT 16
20045: PPUSH
20046: CALL_OW 336
20050: GO 20035
20052: POP
20053: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 25
20071: PUSH
20072: LD_INT 4
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PPUSH
20083: CALL_OW 69
20087: PUSH
20088: FOR_IN
20089: IFFALSE 20108
// ComMoveXY ( i , 113 , 94 ) ;
20091: LD_VAR 0 1
20095: PPUSH
20096: LD_INT 113
20098: PPUSH
20099: LD_INT 94
20101: PPUSH
20102: CALL_OW 111
20106: GO 20088
20108: POP
20109: POP
// end ;
20110: PPOPN 2
20112: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20113: LD_INT 21
20115: PPUSH
20116: CALL_OW 255
20120: PUSH
20121: LD_INT 3
20123: EQUAL
20124: PUSH
20125: LD_INT 21
20127: PPUSH
20128: CALL_OW 302
20132: AND
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 3
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 34
20146: PUSH
20147: LD_INT 51
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PPUSH
20158: CALL_OW 69
20162: PUSH
20163: LD_INT 0
20165: EQUAL
20166: AND
20167: IFFALSE 20199
20169: GO 20171
20171: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20172: LD_INT 21
20174: PPUSH
20175: LD_INT 23
20177: PPUSH
20178: LD_INT 1
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: LD_INT 51
20186: PPUSH
20187: CALL_OW 185
// wait ( 5 5$0 ) ;
20191: LD_INT 10500
20193: PPUSH
20194: CALL_OW 67
// enable ;
20198: ENABLE
// end ; end_of_file
20199: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
20200: LD_EXP 26
20204: PUSH
20205: LD_INT 0
20207: LESSEQUAL
20208: IFFALSE 20357
20210: GO 20212
20212: DISABLE
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
20217: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20218: LD_ADDR_VAR 0 2
20222: PUSH
20223: LD_INT 22
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 21
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_INT 30
20248: PUSH
20249: LD_INT 0
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 30
20258: PUSH
20259: LD_INT 1
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: ST_TO_ADDR
// for i in tmp do
20281: LD_ADDR_VAR 0 1
20285: PUSH
20286: LD_VAR 0 2
20290: PUSH
20291: FOR_IN
20292: IFFALSE 20325
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_VAR 0 3
20303: PUSH
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 274
20313: PPUSH
20314: LD_INT 1
20316: PPUSH
20317: CALL_OW 275
20321: PLUS
20322: ST_TO_ADDR
20323: GO 20291
20325: POP
20326: POP
// if yourCrates >= needCrates then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_EXP 25
20336: GREATEREQUAL
20337: IFFALSE 20350
// begin FinishMission ( yourCrates ) ;
20339: LD_VAR 0 3
20343: PPUSH
20344: CALL 20360 0 1
// end else
20348: GO 20357
// begin YouLost ( matmin ) ;
20350: LD_STRING matmin
20352: PPUSH
20353: CALL_OW 104
// end ; end ;
20357: PPOPN 3
20359: END
// export function FinishMission ( crates ) ; begin
20360: LD_INT 0
20362: PPUSH
// if crates + 100 > crates then
20363: LD_VAR 0 1
20367: PUSH
20368: LD_INT 100
20370: PLUS
20371: PUSH
20372: LD_VAR 0 1
20376: GREATER
20377: IFFALSE 20401
// begin AddMedal ( cans , 1 ) ;
20379: LD_STRING cans
20381: PPUSH
20382: LD_INT 1
20384: PPUSH
20385: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20389: LD_INT 1
20391: PPUSH
20392: LD_STRING 06_crates_1
20394: PPUSH
20395: CALL_OW 39
// end else
20399: GO 20422
// begin AddMedal ( cans , - 1 ) ;
20401: LD_STRING cans
20403: PPUSH
20404: LD_INT 1
20406: NEG
20407: PPUSH
20408: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20412: LD_INT 0
20414: PPUSH
20415: LD_STRING 06_crates_1
20417: PPUSH
20418: CALL_OW 39
// end ; if unitLost < 2 then
20422: LD_EXP 30
20426: PUSH
20427: LD_INT 2
20429: LESS
20430: IFFALSE 20444
// begin AddMedal ( people , 1 ) ;
20432: LD_STRING people
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 101
// end else
20442: GO 20455
// begin AddMedal ( people , - 1 ) ;
20444: LD_STRING people
20446: PPUSH
20447: LD_INT 1
20449: NEG
20450: PPUSH
20451: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20455: LD_EXP 28
20459: PPUSH
20460: LD_STRING 06_remoteVehs_1
20462: PPUSH
20463: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20467: LD_EXP 28
20471: PUSH
20472: LD_INT 1
20474: EQUAL
20475: IFFALSE 20489
// begin AddMedal ( remote , 1 ) ;
20477: LD_STRING remote
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: CALL_OW 101
// end else
20487: GO 20529
// begin if GetTech ( 18 , 1 ) = state_enabled then
20489: LD_INT 18
20491: PPUSH
20492: LD_INT 1
20494: PPUSH
20495: CALL_OW 321
20499: PUSH
20500: LD_INT 1
20502: EQUAL
20503: IFFALSE 20518
// begin AddMedal ( remote , - 1 ) ;
20505: LD_STRING remote
20507: PPUSH
20508: LD_INT 1
20510: NEG
20511: PPUSH
20512: CALL_OW 101
// end else
20516: GO 20529
// begin AddMedal ( remote , - 2 ) ;
20518: LD_STRING remote
20520: PPUSH
20521: LD_INT 2
20523: NEG
20524: PPUSH
20525: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20529: LD_EXP 20
20533: PPUSH
20534: LD_STRING 06_KurtStatus_1
20536: PPUSH
20537: CALL_OW 39
// GiveMedals ( Main ) ;
20541: LD_STRING Main
20543: PPUSH
20544: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20548: LD_INT 50
20550: PUSH
20551: EMPTY
20552: LIST
20553: PUSH
20554: LD_INT 22
20556: PUSH
20557: LD_INT 1
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 21
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 2
20576: PUSH
20577: LD_INT 25
20579: PUSH
20580: LD_INT 1
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 25
20589: PUSH
20590: LD_INT 2
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: LD_INT 25
20599: PUSH
20600: LD_INT 3
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 25
20609: PUSH
20610: LD_INT 4
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: PPUSH
20635: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20639: LD_EXP 1
20643: PPUSH
20644: LD_EXP 42
20648: PUSH
20649: LD_STRING JMM
20651: STR
20652: PPUSH
20653: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20657: LD_EXP 2
20661: PPUSH
20662: LD_EXP 42
20666: PUSH
20667: LD_STRING Lisa
20669: STR
20670: PPUSH
20671: CALL 5311 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20675: LD_EXP 3
20679: PPUSH
20680: LD_EXP 42
20684: PUSH
20685: LD_STRING Bobby
20687: STR
20688: PPUSH
20689: CALL 5311 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20693: LD_EXP 4
20697: PPUSH
20698: LD_EXP 42
20702: PUSH
20703: LD_STRING Cyrus
20705: STR
20706: PPUSH
20707: CALL 5311 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20711: LD_EXP 5
20715: PPUSH
20716: LD_EXP 42
20720: PUSH
20721: LD_STRING Frank
20723: STR
20724: PPUSH
20725: CALL 5311 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20729: LD_EXP 6
20733: PPUSH
20734: LD_EXP 42
20738: PUSH
20739: LD_STRING Brown
20741: STR
20742: PPUSH
20743: CALL 5311 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20747: LD_EXP 7
20751: PPUSH
20752: LD_EXP 42
20756: PUSH
20757: LD_STRING Donaldson
20759: STR
20760: PPUSH
20761: CALL 5311 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20765: LD_EXP 8
20769: PPUSH
20770: LD_EXP 42
20774: PUSH
20775: LD_STRING Gladstone
20777: STR
20778: PPUSH
20779: CALL 5311 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20783: LD_EXP 9
20787: PPUSH
20788: LD_EXP 42
20792: PUSH
20793: LD_STRING Denis
20795: STR
20796: PPUSH
20797: CALL 5311 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20801: LD_EXP 15
20805: PPUSH
20806: LD_EXP 42
20810: PUSH
20811: LD_STRING Joan
20813: STR
20814: PPUSH
20815: CALL 5311 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20819: LD_EXP 16
20823: PPUSH
20824: LD_STRING 06_JoanStatus_1
20826: PPUSH
20827: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20831: LD_INT 50
20833: PUSH
20834: EMPTY
20835: LIST
20836: PUSH
20837: LD_INT 22
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 21
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 2
20859: PUSH
20860: LD_INT 25
20862: PUSH
20863: LD_INT 1
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 25
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 25
20882: PUSH
20883: LD_INT 3
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 25
20892: PUSH
20893: LD_INT 4
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: PPUSH
20913: CALL_OW 69
20917: PUSH
20918: LD_EXP 1
20922: PUSH
20923: LD_EXP 2
20927: PUSH
20928: LD_EXP 3
20932: PUSH
20933: LD_EXP 4
20937: PUSH
20938: LD_EXP 5
20942: PUSH
20943: LD_EXP 6
20947: PUSH
20948: LD_EXP 7
20952: PUSH
20953: LD_EXP 8
20957: PUSH
20958: LD_EXP 9
20962: PUSH
20963: LD_EXP 15
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: DIFF
20980: PPUSH
20981: LD_STRING 06_other_survivors
20983: PPUSH
20984: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20988: LD_INT 50
20990: PUSH
20991: EMPTY
20992: LIST
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 21
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 12
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 25
21029: PUSH
21030: LD_INT 16
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PPUSH
21053: LD_STRING 06_other_apemans
21055: PPUSH
21056: CALL_OW 38
// YouWin ;
21060: CALL_OW 103
// end ; end_of_file
21064: LD_VAR 0 2
21068: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21069: LD_EXP 39
21073: PUSH
21074: LD_INT 3
21076: EQUAL
21077: IFFALSE 21192
21079: GO 21081
21081: DISABLE
// begin enable ;
21082: ENABLE
// sendedConvoys = 0 ;
21083: LD_ADDR_EXP 39
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21091: LD_INT 6
21093: PPUSH
21094: LD_INT 3
21096: PPUSH
21097: LD_INT 5
21099: PPUSH
21100: LD_INT 10
21102: PPUSH
21103: CALL_OW 12
21107: PUSH
21108: LD_INT 5
21110: PPUSH
21111: LD_INT 11
21113: PPUSH
21114: CALL_OW 12
21118: PUSH
21119: LD_INT 8
21121: PPUSH
21122: LD_INT 12
21124: PPUSH
21125: CALL_OW 12
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: LIST
21134: PUSH
21135: LD_OWVAR 67
21139: ARRAY
21140: PPUSH
21141: LD_INT 0
21143: PPUSH
21144: LD_INT 0
21146: PPUSH
21147: LD_INT 0
21149: PPUSH
21150: LD_INT 3
21152: PPUSH
21153: LD_EXP 34
21157: PPUSH
21158: LD_EXP 35
21162: PPUSH
21163: CALL_OW 12
21167: PPUSH
21168: LD_INT 18
21170: PPUSH
21171: LD_INT 17
21173: PPUSH
21174: LD_INT 1
21176: PPUSH
21177: LD_INT 1
21179: PPUSH
21180: LD_INT 2
21182: PPUSH
21183: CALL_OW 12
21187: PPUSH
21188: CALL 9065 0 12
// end ; end_of_file
21192: END
// export function PrepareNature ; var i , un ; begin
21193: LD_INT 0
21195: PPUSH
21196: PPUSH
21197: PPUSH
// for i = 1 to Difficulty + 2 do
21198: LD_ADDR_VAR 0 2
21202: PUSH
21203: DOUBLE
21204: LD_INT 1
21206: DEC
21207: ST_TO_ADDR
21208: LD_OWVAR 67
21212: PUSH
21213: LD_INT 2
21215: PLUS
21216: PUSH
21217: FOR_TO
21218: IFFALSE 21327
// begin hc_sex = sex_male ;
21220: LD_ADDR_OWVAR 27
21224: PUSH
21225: LD_INT 1
21227: ST_TO_ADDR
// uc_side = 0 ;
21228: LD_ADDR_OWVAR 20
21232: PUSH
21233: LD_INT 0
21235: ST_TO_ADDR
// uc_nation = nation_nature ;
21236: LD_ADDR_OWVAR 21
21240: PUSH
21241: LD_INT 0
21243: ST_TO_ADDR
// hc_class = class_tiger ;
21244: LD_ADDR_OWVAR 28
21248: PUSH
21249: LD_INT 14
21251: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21252: LD_ADDR_OWVAR 31
21256: PUSH
21257: LD_EXP 35
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21277: LD_ADDR_OWVAR 35
21281: PUSH
21282: LD_INT 5
21284: NEG
21285: PPUSH
21286: LD_INT 5
21288: PPUSH
21289: CALL_OW 12
21293: PUSH
21294: LD_OWVAR 67
21298: MUL
21299: ST_TO_ADDR
// un = CreateHuman ;
21300: LD_ADDR_VAR 0 3
21304: PUSH
21305: CALL_OW 44
21309: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21310: LD_VAR 0 3
21314: PPUSH
21315: LD_INT 20
21317: PPUSH
21318: LD_INT 0
21320: PPUSH
21321: CALL_OW 49
// end ;
21325: GO 21217
21327: POP
21328: POP
// for i = 1 to rand ( 3 , 4 ) do
21329: LD_ADDR_VAR 0 2
21333: PUSH
21334: DOUBLE
21335: LD_INT 1
21337: DEC
21338: ST_TO_ADDR
21339: LD_INT 3
21341: PPUSH
21342: LD_INT 4
21344: PPUSH
21345: CALL_OW 12
21349: PUSH
21350: FOR_TO
21351: IFFALSE 21445
// begin hc_sex = sex_male ;
21353: LD_ADDR_OWVAR 27
21357: PUSH
21358: LD_INT 1
21360: ST_TO_ADDR
// uc_side = 0 ;
21361: LD_ADDR_OWVAR 20
21365: PUSH
21366: LD_INT 0
21368: ST_TO_ADDR
// uc_nation = nation_nature ;
21369: LD_ADDR_OWVAR 21
21373: PUSH
21374: LD_INT 0
21376: ST_TO_ADDR
// hc_class = 18 ;
21377: LD_ADDR_OWVAR 28
21381: PUSH
21382: LD_INT 18
21384: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21385: LD_ADDR_OWVAR 31
21389: PUSH
21390: LD_EXP 35
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: LD_INT 0
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: ST_TO_ADDR
// hc_agressivity = 0 ;
21410: LD_ADDR_OWVAR 35
21414: PUSH
21415: LD_INT 0
21417: ST_TO_ADDR
// un = CreateHuman ;
21418: LD_ADDR_VAR 0 3
21422: PUSH
21423: CALL_OW 44
21427: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21428: LD_VAR 0 3
21432: PPUSH
21433: LD_INT 20
21435: PPUSH
21436: LD_INT 0
21438: PPUSH
21439: CALL_OW 49
// end ;
21443: GO 21350
21445: POP
21446: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21447: LD_ADDR_VAR 0 2
21451: PUSH
21452: DOUBLE
21453: LD_INT 1
21455: DEC
21456: ST_TO_ADDR
21457: LD_INT 1
21459: PPUSH
21460: LD_INT 3
21462: PPUSH
21463: CALL_OW 12
21467: PUSH
21468: LD_OWVAR 67
21472: PLUS
21473: PUSH
21474: FOR_TO
21475: IFFALSE 21656
// begin hc_sex = sex_male ;
21477: LD_ADDR_OWVAR 27
21481: PUSH
21482: LD_INT 1
21484: ST_TO_ADDR
// uc_side = 0 ;
21485: LD_ADDR_OWVAR 20
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// uc_nation = nation_nature ;
21493: LD_ADDR_OWVAR 21
21497: PUSH
21498: LD_INT 0
21500: ST_TO_ADDR
// hc_class = class_apeman ;
21501: LD_ADDR_OWVAR 28
21505: PUSH
21506: LD_INT 12
21508: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21509: LD_ADDR_OWVAR 31
21513: PUSH
21514: LD_EXP 34
21518: PPUSH
21519: LD_EXP 35
21523: PPUSH
21524: CALL_OW 12
21528: PUSH
21529: LD_EXP 34
21533: PPUSH
21534: LD_EXP 35
21538: PPUSH
21539: CALL_OW 12
21543: PUSH
21544: LD_EXP 34
21548: PPUSH
21549: LD_EXP 35
21553: PPUSH
21554: CALL_OW 12
21558: PUSH
21559: LD_EXP 34
21563: PPUSH
21564: LD_EXP 35
21568: PPUSH
21569: CALL_OW 12
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21580: LD_ADDR_OWVAR 35
21584: PUSH
21585: LD_INT 20
21587: PPUSH
21588: LD_INT 30
21590: PPUSH
21591: CALL_OW 12
21595: PUSH
21596: LD_INT 30
21598: PPUSH
21599: LD_INT 40
21601: PPUSH
21602: CALL_OW 12
21606: PUSH
21607: LD_INT 40
21609: PPUSH
21610: LD_INT 50
21612: PPUSH
21613: CALL_OW 12
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: PUSH
21623: LD_OWVAR 67
21627: ARRAY
21628: ST_TO_ADDR
// un = CreateHuman ;
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: CALL_OW 44
21638: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21639: LD_VAR 0 3
21643: PPUSH
21644: LD_INT 21
21646: PPUSH
21647: LD_INT 0
21649: PPUSH
21650: CALL_OW 49
// end ;
21654: GO 21474
21656: POP
21657: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21658: LD_ADDR_VAR 0 2
21662: PUSH
21663: DOUBLE
21664: LD_INT 1
21666: DEC
21667: ST_TO_ADDR
21668: LD_INT 5
21670: PPUSH
21671: LD_INT 6
21673: PPUSH
21674: CALL_OW 12
21678: PUSH
21679: LD_OWVAR 67
21683: PLUS
21684: PUSH
21685: FOR_TO
21686: IFFALSE 21832
// begin hc_sex = sex_male ;
21688: LD_ADDR_OWVAR 27
21692: PUSH
21693: LD_INT 1
21695: ST_TO_ADDR
// uc_side = 0 ;
21696: LD_ADDR_OWVAR 20
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
// uc_nation = nation_nature ;
21704: LD_ADDR_OWVAR 21
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// hc_class = class_apeman ;
21712: LD_ADDR_OWVAR 28
21716: PUSH
21717: LD_INT 12
21719: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21720: LD_ADDR_OWVAR 31
21724: PUSH
21725: LD_EXP 34
21729: PPUSH
21730: LD_EXP 35
21734: PPUSH
21735: CALL_OW 12
21739: PUSH
21740: LD_EXP 34
21744: PPUSH
21745: LD_EXP 35
21749: PPUSH
21750: CALL_OW 12
21754: PUSH
21755: LD_OWVAR 67
21759: PLUS
21760: PUSH
21761: LD_EXP 34
21765: PPUSH
21766: LD_EXP 35
21770: PPUSH
21771: CALL_OW 12
21775: PUSH
21776: LD_EXP 34
21780: PPUSH
21781: LD_EXP 35
21785: PPUSH
21786: CALL_OW 12
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: ST_TO_ADDR
// hc_agressivity = 0 ;
21797: LD_ADDR_OWVAR 35
21801: PUSH
21802: LD_INT 0
21804: ST_TO_ADDR
// un = CreateHuman ;
21805: LD_ADDR_VAR 0 3
21809: PUSH
21810: CALL_OW 44
21814: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21815: LD_VAR 0 3
21819: PPUSH
21820: LD_INT 22
21822: PPUSH
21823: LD_INT 0
21825: PPUSH
21826: CALL_OW 49
// end ;
21830: GO 21685
21832: POP
21833: POP
// end ; end_of_file
21834: LD_VAR 0 1
21838: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21839: LD_EXP 1
21843: PPUSH
21844: CALL_OW 301
21848: IFFALSE 21860
21850: GO 21852
21852: DISABLE
// YouLost ( JMM ) ;
21853: LD_STRING JMM
21855: PPUSH
21856: CALL_OW 104
21860: END
