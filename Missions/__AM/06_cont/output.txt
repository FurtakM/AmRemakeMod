// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6289 0 0
// PrepareNature ;
 250: CALL 23195 0 0
// PrepareRussian ;
 254: CALL 5474 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5851 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5851 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5851 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5851 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5851 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5851 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5851 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5851 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5851 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; var _xy , xy , i ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
// uc_side = 4 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 4
2152: ST_TO_ADDR
// uc_nation = 1 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_INT 63
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 70
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 83
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 16
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 27
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 38
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: LD_INT 5
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 54
2238: PUSH
2239: LD_INT 1
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: ST_TO_ADDR
// for i in xy do
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_VAR 0 3
2265: PUSH
2266: FOR_IN
2267: IFFALSE 2329
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_VAR 0 4
2278: ARRAY
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_VAR 0 3
2288: PUSH
2289: LD_VAR 0 4
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: CALL_OW 428
2303: PUSH
2304: LD_INT 0
2306: EQUAL
2307: IFFALSE 2327
// begin _xy := xy [ i ] ;
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: PUSH
2319: LD_VAR 0 4
2323: ARRAY
2324: ST_TO_ADDR
// break ;
2325: GO 2329
// end ;
2327: GO 2266
2329: POP
2330: POP
// Denis = PrepareUnit ( Denis , true ) ;
2331: LD_ADDR_EXP 9
2335: PUSH
2336: LD_STRING Denis
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: CALL 5851 0 2
2346: ST_TO_ADDR
// PlaceUnitXY ( Denis , _xy [ 1 ] , _xy [ 2 ] , false ) ;
2347: LD_EXP 9
2351: PPUSH
2352: LD_VAR 0 2
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 48
// SetClass ( Denis , 4 ) ;
2377: LD_EXP 9
2381: PPUSH
2382: LD_INT 4
2384: PPUSH
2385: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_INT 750
2396: PPUSH
2397: CALL_OW 234
// end ;
2401: LD_VAR 0 1
2405: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
// area := HarrisonSupportArea ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_INT 3
2420: ST_TO_ADDR
// dir := 2 ;
2421: LD_ADDR_VAR 0 5
2425: PUSH
2426: LD_INT 2
2428: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2429: LD_VAR 0 4
2433: PPUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 70
2448: IFFALSE 2466
// begin area := HarrisonSupportArea2 ;
2450: LD_ADDR_VAR 0 4
2454: PUSH
2455: LD_INT 31
2457: ST_TO_ADDR
// dir := 1 ;
2458: LD_ADDR_VAR 0 5
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// end ; uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// uc_nation = 1 ;
2474: LD_ADDR_OWVAR 21
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// vc_engine = 1 ;
2482: LD_ADDR_OWVAR 39
2486: PUSH
2487: LD_INT 1
2489: ST_TO_ADDR
// vc_control = 1 ;
2490: LD_ADDR_OWVAR 38
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2498: LD_ADDR_OWVAR 40
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 2
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_OWVAR 67
2521: ARRAY
2522: ST_TO_ADDR
// vc_chassis = 2 ;
2523: LD_ADDR_OWVAR 37
2527: PUSH
2528: LD_INT 2
2530: ST_TO_ADDR
// veh = CreateVehicle ;
2531: LD_ADDR_VAR 0 3
2535: PUSH
2536: CALL_OW 45
2540: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2541: LD_VAR 0 3
2545: PPUSH
2546: LD_VAR 0 5
2550: PPUSH
2551: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 50
2579: PPUSH
2580: CALL_OW 240
// hc_class := 2 ;
2584: LD_ADDR_OWVAR 28
2588: PUSH
2589: LD_INT 2
2591: ST_TO_ADDR
// hc_sex := sex_male ;
2592: LD_ADDR_OWVAR 27
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2600: LD_ADDR_OWVAR 33
2604: PUSH
2605: LD_STRING SecondCharsGal
2607: ST_TO_ADDR
// hc_face_number := 52 ;
2608: LD_ADDR_OWVAR 34
2612: PUSH
2613: LD_INT 52
2615: ST_TO_ADDR
// hc_name := Craig Brown ;
2616: LD_ADDR_OWVAR 26
2620: PUSH
2621: LD_STRING Craig Brown
2623: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2624: LD_ADDR_OWVAR 29
2628: PUSH
2629: LD_INT 10
2631: PUSH
2632: LD_INT 10
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2639: LD_ADDR_OWVAR 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 0
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2662: LD_ADDR_OWVAR 31
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: LD_INT 0
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2685: LD_ADDR_EXP 17
2689: PUSH
2690: CALL_OW 44
2694: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2695: LD_EXP 17
2699: PPUSH
2700: LD_VAR 0 3
2704: PPUSH
2705: CALL_OW 52
// vc_engine = 1 ;
2709: LD_ADDR_OWVAR 39
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// vc_control = 1 ;
2717: LD_ADDR_OWVAR 38
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2725: LD_ADDR_OWVAR 40
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_chassis = 2 ;
2733: LD_ADDR_OWVAR 37
2737: PUSH
2738: LD_INT 2
2740: ST_TO_ADDR
// veh = CreateVehicle ;
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: CALL_OW 45
2750: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_VAR 0 5
2760: PPUSH
2761: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2765: LD_VAR 0 3
2769: PPUSH
2770: LD_VAR 0 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2782: LD_VAR 0 3
2786: PPUSH
2787: LD_INT 50
2789: PPUSH
2790: CALL_OW 240
// hc_class := 1 ;
2794: LD_ADDR_OWVAR 28
2798: PUSH
2799: LD_INT 1
2801: ST_TO_ADDR
// hc_sex := sex_female ;
2802: LD_ADDR_OWVAR 27
2806: PUSH
2807: LD_INT 2
2809: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2810: LD_ADDR_OWVAR 33
2814: PUSH
2815: LD_STRING SecondCharsGal
2817: ST_TO_ADDR
// hc_face_number := 45 ;
2818: LD_ADDR_OWVAR 34
2822: PUSH
2823: LD_INT 45
2825: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2826: LD_ADDR_OWVAR 29
2830: PUSH
2831: LD_INT 11
2833: PUSH
2834: LD_INT 10
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2841: LD_ADDR_OWVAR 26
2845: PUSH
2846: LD_STRING Ingrid Jonsson
2848: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2849: LD_ADDR_OWVAR 30
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 0
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2872: LD_ADDR_OWVAR 31
2876: PUSH
2877: LD_INT 3
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: LD_INT 1
2885: PUSH
2886: LD_INT 0
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2895: LD_ADDR_EXP 18
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2905: LD_EXP 18
2909: PPUSH
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 52
// end ;
2919: LD_VAR 0 1
2923: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2924: LD_INT 0
2926: PPUSH
2927: PPUSH
2928: PPUSH
2929: PPUSH
2930: PPUSH
// j = 0 ;
2931: LD_ADDR_VAR 0 3
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2939: LD_INT 35
2941: PPUSH
2942: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 21
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 26
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 2
2983: PUSH
2984: LD_INT 25
2986: PUSH
2987: LD_INT 1
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: PUSH
2994: LD_INT 25
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 25
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 25
3016: PUSH
3017: LD_INT 4
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: PUSH
3042: FOR_IN
3043: IFFALSE 3169
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3045: LD_INT 22
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 21
3080: PUSH
3081: LD_INT 3
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 59
3090: PUSH
3091: EMPTY
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 91
3103: PUSH
3104: LD_VAR 0 2
3108: PUSH
3109: LD_INT 25
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: NOT
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_EXP 1
3137: PPUSH
3138: CALL_OW 296
3142: PUSH
3143: LD_INT 15
3145: LESS
3146: AND
3147: IFFALSE 3167
// begin tmp = i ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_VAR 0 2
3158: ST_TO_ADDR
// j = 1 ;
3159: LD_ADDR_VAR 0 3
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// end ; end ;
3167: GO 3042
3169: POP
3170: POP
// until j = 1 ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: EQUAL
3179: IFFALSE 2939
// blockSpawn = 1 ;
3181: LD_ADDR_EXP 29
3185: PUSH
3186: LD_INT 1
3188: ST_TO_ADDR
// uc_side = 4 ;
3189: LD_ADDR_OWVAR 20
3193: PUSH
3194: LD_INT 4
3196: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3197: LD_ADDR_EXP 15
3201: PUSH
3202: LD_STRING Joan
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL 5851 0 2
3212: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3213: LD_EXP 15
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: CALL_OW 250
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 251
3237: PPUSH
3238: LD_INT 5
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3248: LD_EXP 15
3252: PPUSH
3253: LD_INT 250
3255: PPUSH
3256: CALL_OW 234
// InGameOn ;
3260: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3264: LD_EXP 15
3268: PPUSH
3269: CALL_OW 87
// wait ( 0 0$2 ) ;
3273: LD_INT 70
3275: PPUSH
3276: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 122
// wait ( 0 0$1 ) ;
3298: LD_INT 35
3300: PPUSH
3301: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3305: LD_VAR 0 4
3309: PPUSH
3310: LD_EXP 15
3314: PPUSH
3315: CALL_OW 112
// wait ( 0 0$2 ) ;
3319: LD_INT 70
3321: PPUSH
3322: CALL_OW 67
// DialogueOn ;
3326: CALL_OW 6
// if tmp = JMM then
3330: LD_VAR 0 4
3334: PUSH
3335: LD_EXP 1
3339: EQUAL
3340: IFFALSE 3489
// begin ComTurnUnit ( JMM , Joan ) ;
3342: LD_EXP 1
3346: PPUSH
3347: LD_EXP 15
3351: PPUSH
3352: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3356: LD_EXP 1
3360: PPUSH
3361: LD_STRING D5b-JMM-1
3363: PPUSH
3364: CALL_OW 88
// DialogueOff ;
3368: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3372: LD_EXP 15
3376: PPUSH
3377: LD_INT 500
3379: PPUSH
3380: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_EXP 1
3393: PPUSH
3394: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3398: LD_EXP 1
3402: PPUSH
3403: LD_EXP 15
3407: PPUSH
3408: CALL_OW 119
// wait ( 0 0$1 ) ;
3412: LD_INT 35
3414: PPUSH
3415: CALL_OW 67
// DialogueOn ;
3419: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3423: LD_EXP 15
3427: PPUSH
3428: LD_STRING D5b-Joan-1
3430: PPUSH
3431: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3435: LD_EXP 1
3439: PPUSH
3440: LD_STRING D5b-JMM-2
3442: PPUSH
3443: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3447: LD_EXP 15
3451: PPUSH
3452: LD_STRING D5b-Joan-2
3454: PPUSH
3455: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3459: LD_EXP 1
3463: PPUSH
3464: LD_STRING D5b-JMM-3
3466: PPUSH
3467: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3471: LD_EXP 15
3475: PPUSH
3476: LD_STRING D5b-Joan-3
3478: PPUSH
3479: CALL_OW 88
// DialogueOff ;
3483: CALL_OW 7
// end else
3487: GO 3824
// begin ComTurnUnit ( tmp , Joan ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_EXP 15
3498: PPUSH
3499: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3503: LD_VAR 0 4
3507: PPUSH
3508: LD_STRING D5a-Sol1-1
3510: PPUSH
3511: CALL_OW 88
// DialogueOff ;
3515: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_INT 500
3526: PPUSH
3527: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3531: LD_EXP 15
3535: PPUSH
3536: LD_VAR 0 4
3540: PPUSH
3541: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_EXP 15
3554: PPUSH
3555: CALL_OW 119
// wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// DialogueOn ;
3566: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3570: LD_EXP 15
3574: PPUSH
3575: LD_STRING D5a-Joan-1
3577: PPUSH
3578: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3582: LD_VAR 0 4
3586: PPUSH
3587: LD_STRING D5a-Sol1-2
3589: PPUSH
3590: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3594: LD_EXP 15
3598: PPUSH
3599: LD_STRING D5a-Joan-2
3601: PPUSH
3602: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_STRING D5a-Sol1-3
3613: PPUSH
3614: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3618: LD_EXP 15
3622: PPUSH
3623: LD_STRING D5a-Joan-3
3625: PPUSH
3626: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3630: LD_VAR 0 4
3634: PPUSH
3635: LD_STRING D5a-Sol1-4
3637: PPUSH
3638: CALL_OW 88
// DialogueOff ;
3642: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3646: LD_EXP 1
3650: PPUSH
3651: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 122
// wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3671: LD_INT 35
3673: PPUSH
3674: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3678: LD_EXP 15
3682: PUSH
3683: LD_VAR 0 4
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3701: LD_EXP 15
3705: PPUSH
3706: LD_EXP 1
3710: PPUSH
3711: CALL_OW 296
3715: PUSH
3716: LD_INT 5
3718: LESS
3719: IFFALSE 3671
// ComTurnUnit ( Joan , JMM ) ;
3721: LD_EXP 15
3725: PPUSH
3726: LD_EXP 1
3730: PPUSH
3731: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3735: LD_EXP 1
3739: PPUSH
3740: LD_EXP 15
3744: PPUSH
3745: CALL_OW 119
// wait ( 0 0$1 ) ;
3749: LD_INT 35
3751: PPUSH
3752: CALL_OW 67
// DialogueOn ;
3756: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-4
3767: PPUSH
3768: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3772: LD_EXP 1
3776: PPUSH
3777: LD_STRING D5a-JMM-4
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-5
3791: PPUSH
3792: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3796: LD_EXP 1
3800: PPUSH
3801: LD_STRING D5a-JMM-5
3803: PPUSH
3804: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3808: LD_EXP 15
3812: PPUSH
3813: LD_STRING D5a-Joan-6
3815: PPUSH
3816: CALL_OW 88
// DialogueOff ;
3820: CALL_OW 7
// end ; DialogueOn ;
3824: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3828: LD_EXP 1
3832: PPUSH
3833: LD_STRING D6-JMM-1
3835: PPUSH
3836: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3840: LD_EXP 15
3844: PPUSH
3845: LD_STRING D6-Joan-1
3847: PPUSH
3848: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D6-JMM-2
3859: PPUSH
3860: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3864: LD_EXP 15
3868: PPUSH
3869: LD_STRING D6-Joan-2
3871: PPUSH
3872: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_STRING D6-JMM-3
3883: PPUSH
3884: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3888: LD_EXP 15
3892: PPUSH
3893: LD_STRING D6-Joan-3
3895: PPUSH
3896: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING D6-JMM-4
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// InGameOff ;
3916: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3920: LD_EXP 15
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3932: LD_STRING MJ
3934: PPUSH
3935: CALL_OW 337
// JoanStatus = 1 ;
3939: LD_ADDR_EXP 16
3943: PUSH
3944: LD_INT 1
3946: ST_TO_ADDR
// blockSpawn = 0 ;
3947: LD_ADDR_EXP 29
3951: PUSH
3952: LD_INT 0
3954: ST_TO_ADDR
// end ;
3955: LD_VAR 0 1
3959: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
// repeat wait ( 0 0$7 ) ;
3964: LD_INT 245
3966: PPUSH
3967: CALL_OW 67
// until blockSpawn = 0 ;
3971: LD_EXP 29
3975: PUSH
3976: LD_INT 0
3978: EQUAL
3979: IFFALSE 3964
// uc_side = 1 ;
3981: LD_ADDR_OWVAR 20
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// uc_nation = 1 ;
3989: LD_ADDR_OWVAR 21
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// InitHc ;
3997: CALL_OW 19
// if number = 1 then
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 1
4008: EQUAL
4009: IFFALSE 4185
// begin hc_class := 3 ;
4011: LD_ADDR_OWVAR 28
4015: PUSH
4016: LD_INT 3
4018: ST_TO_ADDR
// hc_sex := sex_male ;
4019: LD_ADDR_OWVAR 27
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4027: LD_ADDR_OWVAR 33
4031: PUSH
4032: LD_STRING SecondCharsGal
4034: ST_TO_ADDR
// hc_face_number := 55 ;
4035: LD_ADDR_OWVAR 34
4039: PUSH
4040: LD_INT 55
4042: ST_TO_ADDR
// hc_name := George McCarthy ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING George McCarthy
4050: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4051: LD_ADDR_OWVAR 29
4055: PUSH
4056: LD_INT 11
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4066: LD_ADDR_OWVAR 30
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: LD_INT 0
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4089: LD_ADDR_OWVAR 31
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: ST_TO_ADDR
// un = CreateHuman ;
4112: LD_ADDR_VAR 0 3
4116: PUSH
4117: CALL_OW 44
4121: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4122: LD_VAR 0 3
4126: PPUSH
4127: LD_INT 23
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL_OW 87
// wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// DialogueOn ;
4153: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4157: LD_VAR 0 3
4161: PPUSH
4162: LD_STRING D11d-Sol4-1
4164: PPUSH
4165: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4169: LD_EXP 1
4173: PPUSH
4174: LD_STRING D11d-JMM-1
4176: PPUSH
4177: CALL_OW 88
// DialogueOff ;
4181: CALL_OW 7
// end ; if number = 2 then
4185: LD_VAR 0 1
4189: PUSH
4190: LD_INT 2
4192: EQUAL
4193: IFFALSE 4369
// begin hc_class := 1 ;
4195: LD_ADDR_OWVAR 28
4199: PUSH
4200: LD_INT 1
4202: ST_TO_ADDR
// hc_sex := sex_male ;
4203: LD_ADDR_OWVAR 27
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4211: LD_ADDR_OWVAR 33
4215: PUSH
4216: LD_STRING AmGalRemake
4218: ST_TO_ADDR
// hc_face_number := 7 ;
4219: LD_ADDR_OWVAR 34
4223: PUSH
4224: LD_INT 7
4226: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4227: LD_ADDR_OWVAR 26
4231: PUSH
4232: LD_STRING Bobby Jordan
4234: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4235: LD_ADDR_OWVAR 29
4239: PUSH
4240: LD_INT 9
4242: PUSH
4243: LD_INT 11
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4250: LD_ADDR_OWVAR 30
4254: PUSH
4255: LD_INT 1
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: LD_INT 1
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4273: LD_ADDR_OWVAR 31
4277: PUSH
4278: LD_INT 2
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: LD_INT 1
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: ST_TO_ADDR
// un = CreateHuman ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: CALL_OW 44
4305: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4306: LD_VAR 0 3
4310: PPUSH
4311: LD_INT 24
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL_OW 49
// wait ( 0 0$1 ) ;
4321: LD_INT 35
4323: PPUSH
4324: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 87
// DialogueOn ;
4337: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_STRING D11b-Sol3-1
4348: PPUSH
4349: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4353: LD_EXP 1
4357: PPUSH
4358: LD_STRING D11b-JMM-1
4360: PPUSH
4361: CALL_OW 88
// DialogueOff ;
4365: CALL_OW 7
// end ; if number = 3 then
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 3
4376: EQUAL
4377: IFFALSE 4541
// begin hc_class := 1 ;
4379: LD_ADDR_OWVAR 28
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// hc_sex := sex_male ;
4387: LD_ADDR_OWVAR 27
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// hc_gallery := DJ ;
4395: LD_ADDR_OWVAR 33
4399: PUSH
4400: LD_STRING DJ
4402: ST_TO_ADDR
// hc_face_number := 1 ;
4403: LD_ADDR_OWVAR 34
4407: PUSH
4408: LD_INT 1
4410: ST_TO_ADDR
// hc_name := Darius Dajay ;
4411: LD_ADDR_OWVAR 26
4415: PUSH
4416: LD_STRING Darius Dajay
4418: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4419: LD_ADDR_OWVAR 29
4423: PUSH
4424: LD_INT 11
4426: PUSH
4427: LD_INT 11
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4434: LD_ADDR_OWVAR 30
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: LD_INT 0
4444: PUSH
4445: LD_INT 0
4447: PUSH
4448: LD_INT 0
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4457: LD_ADDR_OWVAR 31
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 0
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// un = CreateHuman ;
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: CALL_OW 44
4489: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 25
4497: PPUSH
4498: LD_INT 1
4500: PPUSH
4501: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: CALL_OW 87
// wait ( 0 0$1 ) ;
4514: LD_INT 35
4516: PPUSH
4517: CALL_OW 67
// DialogueOn ;
4521: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_STRING D11f-Sol5-1
4532: PPUSH
4533: CALL_OW 88
// DialogueOff ;
4537: CALL_OW 7
// end ; if number = 4 then
4541: LD_VAR 0 1
4545: PUSH
4546: LD_INT 4
4548: EQUAL
4549: IFFALSE 4713
// begin hc_class := 3 ;
4551: LD_ADDR_OWVAR 28
4555: PUSH
4556: LD_INT 3
4558: ST_TO_ADDR
// hc_sex := sex_female ;
4559: LD_ADDR_OWVAR 27
4563: PUSH
4564: LD_INT 2
4566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4567: LD_ADDR_OWVAR 33
4571: PUSH
4572: LD_STRING SecondCharsGal
4574: ST_TO_ADDR
// hc_face_number := 46 ;
4575: LD_ADDR_OWVAR 34
4579: PUSH
4580: LD_INT 46
4582: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4583: LD_ADDR_OWVAR 26
4587: PUSH
4588: LD_STRING Sylvia Creak
4590: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4591: LD_ADDR_OWVAR 29
4595: PUSH
4596: LD_INT 10
4598: PUSH
4599: LD_INT 9
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4606: LD_ADDR_OWVAR 30
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 1
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: LD_INT 1
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4629: LD_ADDR_OWVAR 31
4633: PUSH
4634: LD_INT 1
4636: PUSH
4637: LD_INT 3
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: ST_TO_ADDR
// un = CreateHuman ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: CALL_OW 44
4661: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_INT 26
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: CALL_OW 87
// wait ( 0 0$1 ) ;
4686: LD_INT 35
4688: PPUSH
4689: CALL_OW 67
// DialogueOn ;
4693: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_STRING D11e-FSol4-1
4704: PPUSH
4705: CALL_OW 88
// DialogueOff ;
4709: CALL_OW 7
// end ; if number = 5 then
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 5
4720: EQUAL
4721: IFFALSE 4897
// begin hc_class := 1 ;
4723: LD_ADDR_OWVAR 28
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// hc_sex := sex_female ;
4731: LD_ADDR_OWVAR 27
4735: PUSH
4736: LD_INT 2
4738: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4739: LD_ADDR_OWVAR 33
4743: PUSH
4744: LD_STRING SecondCharsGal
4746: ST_TO_ADDR
// hc_face_number := 37 ;
4747: LD_ADDR_OWVAR 34
4751: PUSH
4752: LD_INT 37
4754: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4755: LD_ADDR_OWVAR 26
4759: PUSH
4760: LD_STRING Margherite Simpson
4762: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4763: LD_ADDR_OWVAR 29
4767: PUSH
4768: LD_INT 11
4770: PUSH
4771: LD_INT 10
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4778: LD_ADDR_OWVAR 30
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: LD_INT 0
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4801: LD_ADDR_OWVAR 31
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: LD_INT 1
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: ST_TO_ADDR
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 27
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: CALL_OW 87
// wait ( 0 0$1 ) ;
4858: LD_INT 35
4860: PPUSH
4861: CALL_OW 67
// DialogueOn ;
4865: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_STRING D11c-FSol3-1
4876: PPUSH
4877: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D11c-JMM-1
4888: PPUSH
4889: CALL_OW 88
// DialogueOff ;
4893: CALL_OW 7
// end ; if number = 6 then
4897: LD_VAR 0 1
4901: PUSH
4902: LD_INT 6
4904: EQUAL
4905: IFFALSE 5079
// begin hc_class := 1 ;
4907: LD_ADDR_OWVAR 28
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// hc_sex := sex_male ;
4915: LD_ADDR_OWVAR 27
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4923: LD_ADDR_OWVAR 33
4927: PUSH
4928: LD_STRING AmGalRemake
4930: ST_TO_ADDR
// hc_face_number := 1 ;
4931: LD_ADDR_OWVAR 34
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name := Charles Brown ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING Charles Brown
4946: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4947: LD_ADDR_OWVAR 29
4951: PUSH
4952: LD_INT 12
4954: PUSH
4955: LD_INT 11
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4962: LD_ADDR_OWVAR 30
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 0
4972: PUSH
4973: LD_INT 0
4975: PUSH
4976: LD_INT 0
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4985: LD_ADDR_OWVAR 31
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: LD_INT 0
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: ST_TO_ADDR
// un = CreateHuman ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 44
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 28
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: CALL_OW 87
// wait ( 0 0$1 ) ;
5042: LD_INT 35
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_STRING D4-Sol1-5
5060: PPUSH
5061: CALL_OW 88
// DialogueOff ;
5065: CALL_OW 7
// tempCharles = un ;
5069: LD_ADDR_EXP 13
5073: PUSH
5074: LD_VAR 0 3
5078: ST_TO_ADDR
// end ; if number = 7 then
5079: LD_VAR 0 1
5083: PUSH
5084: LD_INT 7
5086: EQUAL
5087: IFFALSE 5337
// begin hc_class := 1 ;
5089: LD_ADDR_OWVAR 28
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_sex := sex_female ;
5097: LD_ADDR_OWVAR 27
5101: PUSH
5102: LD_INT 2
5104: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5105: LD_ADDR_OWVAR 33
5109: PUSH
5110: LD_STRING AmGalRemake
5112: ST_TO_ADDR
// hc_face_number := 2 ;
5113: LD_ADDR_OWVAR 34
5117: PUSH
5118: LD_INT 2
5120: ST_TO_ADDR
// hc_name := Rebecca Macdonald ;
5121: LD_ADDR_OWVAR 26
5125: PUSH
5126: LD_STRING Rebecca Macdonald
5128: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5129: LD_ADDR_OWVAR 29
5133: PUSH
5134: LD_INT 10
5136: PUSH
5137: LD_INT 10
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5144: LD_ADDR_OWVAR 30
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: LD_INT 0
5154: PUSH
5155: LD_INT 0
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5167: LD_ADDR_OWVAR 31
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: ST_TO_ADDR
// un = CreateHuman ;
5190: LD_ADDR_VAR 0 3
5194: PUSH
5195: CALL_OW 44
5199: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5200: LD_VAR 0 3
5204: PPUSH
5205: LD_INT 29
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: CALL_OW 87
// wait ( 0 0$1 ) ;
5224: LD_INT 35
5226: PPUSH
5227: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5231: LD_INT 30
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 3
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 70
5248: IFFALSE 5337
// begin DialogueOn ;
5250: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5254: LD_VAR 0 3
5258: PPUSH
5259: CALL_OW 250
5263: PPUSH
5264: LD_VAR 0 3
5268: PPUSH
5269: CALL_OW 251
5273: PPUSH
5274: LD_INT 1
5276: PPUSH
5277: LD_INT 15
5279: NEG
5280: PPUSH
5281: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5285: LD_VAR 0 3
5289: PPUSH
5290: CALL_OW 250
5294: PPUSH
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 251
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_STRING D11a-FSol2-1
5319: PPUSH
5320: CALL_OW 88
// ComCrawl ( un ) ;
5324: LD_VAR 0 3
5328: PPUSH
5329: CALL_OW 137
// DialogueOff ;
5333: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5337: LD_ADDR_EXP 45
5341: PUSH
5342: LD_EXP 45
5346: PUSH
5347: LD_VAR 0 3
5351: UNION
5352: ST_TO_ADDR
// arrivals := arrivals union un ;
5353: LD_ADDR_EXP 46
5357: PUSH
5358: LD_EXP 46
5362: PUSH
5363: LD_VAR 0 3
5367: UNION
5368: ST_TO_ADDR
// end ;
5369: LD_VAR 0 2
5373: RET
// every 0 0$1 do var i ;
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin enable ;
5380: ENABLE
// if not ignoreTarget then
5381: LD_EXP 45
5385: NOT
5386: IFFALSE 5390
// exit ;
5388: GO 5471
// for i in ignoreTarget do
5390: LD_ADDR_VAR 0 1
5394: PUSH
5395: LD_EXP 45
5399: PUSH
5400: FOR_IN
5401: IFFALSE 5469
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5403: LD_INT 22
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 91
5415: PUSH
5416: LD_VAR 0 1
5420: PUSH
5421: LD_INT 10
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: PUSH
5438: LD_EXP 45
5442: DIFF
5443: PUSH
5444: LD_INT 1
5446: GREATER
5447: IFFALSE 5467
// begin ignoreTarget := ignoreTarget diff i ;
5449: LD_ADDR_EXP 45
5453: PUSH
5454: LD_EXP 45
5458: PUSH
5459: LD_VAR 0 1
5463: DIFF
5464: ST_TO_ADDR
// break ;
5465: GO 5469
// end ;
5467: GO 5400
5469: POP
5470: POP
// end ; end_of_file
5471: PPOPN 1
5473: END
// export function PrepareRussian ; var i ; begin
5474: LD_INT 0
5476: PPUSH
5477: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5478: LD_INT 3
5480: PPUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 2
5486: PPUSH
5487: LD_EXP 34
5491: PPUSH
5492: LD_EXP 35
5496: PPUSH
5497: CALL_OW 12
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: LD_INT 4
5507: PPUSH
5508: CALL 6043 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5512: LD_INT 3
5514: PPUSH
5515: LD_INT 3
5517: PPUSH
5518: LD_INT 8
5520: PPUSH
5521: LD_EXP 34
5525: PPUSH
5526: LD_EXP 35
5530: PPUSH
5531: CALL_OW 12
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: CALL 6043 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 3
5551: PPUSH
5552: LD_INT 67
5554: PPUSH
5555: LD_EXP 34
5559: PPUSH
5560: LD_EXP 35
5564: PPUSH
5565: CALL_OW 12
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: CALL 6043 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5580: LD_INT 3
5582: PPUSH
5583: LD_INT 3
5585: PPUSH
5586: LD_INT 21
5588: PPUSH
5589: LD_EXP 34
5593: PPUSH
5594: LD_EXP 35
5598: PPUSH
5599: CALL_OW 12
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: LD_INT 6
5609: PPUSH
5610: CALL 6043 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5614: LD_INT 3
5616: PPUSH
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 17
5622: PPUSH
5623: LD_EXP 34
5627: PPUSH
5628: LD_EXP 35
5632: PPUSH
5633: CALL_OW 12
5637: PPUSH
5638: LD_INT 3
5640: PPUSH
5641: LD_INT 6
5643: PPUSH
5644: CALL 6043 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5648: LD_INT 3
5650: PPUSH
5651: LD_INT 3
5653: PPUSH
5654: LD_INT 32
5656: PPUSH
5657: LD_EXP 34
5661: PPUSH
5662: LD_EXP 35
5666: PPUSH
5667: CALL_OW 12
5671: PPUSH
5672: LD_INT 4
5674: PPUSH
5675: LD_INT 2
5677: PPUSH
5678: CALL 6043 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 21
5699: PUSH
5700: LD_INT 3
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 30
5709: PUSH
5710: LD_INT 32
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 69
5726: PUSH
5727: FOR_IN
5728: IFFALSE 5768
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5730: LD_INT 3
5732: PPUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_EXP 34
5745: PPUSH
5746: LD_EXP 35
5750: PPUSH
5751: CALL_OW 12
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_INT 1
5761: PPUSH
5762: CALL 6043 0 6
5766: GO 5727
5768: POP
5769: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_INT 22
5777: PUSH
5778: LD_INT 3
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 21
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 30
5797: PUSH
5798: LD_INT 31
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5844
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5818: LD_EXP 34
5822: PPUSH
5823: LD_EXP 35
5827: PPUSH
5828: CALL_OW 12
5832: PPUSH
5833: LD_VAR 0 2
5837: PPUSH
5838: CALL 6153 0 2
5842: GO 5815
5844: POP
5845: POP
// end ; end_of_file
5846: LD_VAR 0 1
5850: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
// if exist_mode then
5855: LD_VAR 0 2
5859: IFFALSE 5884
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_EXP 44
5870: PUSH
5871: LD_VAR 0 1
5875: STR
5876: PPUSH
5877: CALL_OW 34
5881: ST_TO_ADDR
// end else
5882: GO 5899
// begin unit := NewCharacter ( ident ) ;
5884: LD_ADDR_VAR 0 4
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 25
5898: ST_TO_ADDR
// end ; result := unit ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 4
5908: ST_TO_ADDR
// end ;
5909: LD_VAR 0 3
5913: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5914: LD_INT 0
5916: PPUSH
5917: PPUSH
5918: PPUSH
// speaker := characters [ rand ( 1 , characters ) ] ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_INT 1
5931: PPUSH
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 12
5941: ARRAY
5942: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
5943: LD_VAR 0 6
5947: PPUSH
5948: CALL_OW 258
5952: PUSH
5953: LD_INT 1
5955: EQUAL
5956: IFFALSE 5974
// Say ( speaker , dialogMID ) else
5958: LD_VAR 0 6
5962: PPUSH
5963: LD_VAR 0 2
5967: PPUSH
5968: CALL_OW 88
5972: GO 5988
// Say ( speaker , dialogFID ) ;
5974: LD_VAR 0 6
5978: PPUSH
5979: LD_VAR 0 3
5983: PPUSH
5984: CALL_OW 88
// result := speaker ;
5988: LD_ADDR_VAR 0 4
5992: PUSH
5993: LD_VAR 0 6
5997: ST_TO_ADDR
// end ;
5998: LD_VAR 0 4
6002: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6003: LD_INT 0
6005: PPUSH
6006: PPUSH
// for i in charactersList do
6007: LD_ADDR_VAR 0 4
6011: PUSH
6012: LD_VAR 0 1
6016: PUSH
6017: FOR_IN
6018: IFFALSE 6036
// SaveCharacters ( i , ident ) ;
6020: LD_VAR 0 4
6024: PPUSH
6025: LD_VAR 0 2
6029: PPUSH
6030: CALL_OW 38
6034: GO 6017
6036: POP
6037: POP
// end ;
6038: LD_VAR 0 3
6042: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6043: LD_INT 0
6045: PPUSH
6046: PPUSH
6047: PPUSH
6048: PPUSH
// for i = 1 to count do
6049: LD_ADDR_VAR 0 8
6053: PUSH
6054: DOUBLE
6055: LD_INT 1
6057: DEC
6058: ST_TO_ADDR
6059: LD_VAR 0 6
6063: PUSH
6064: FOR_TO
6065: IFFALSE 6146
// begin uc_side = side ;
6067: LD_ADDR_OWVAR 20
6071: PUSH
6072: LD_VAR 0 1
6076: ST_TO_ADDR
// uc_nation = nation ;
6077: LD_ADDR_OWVAR 21
6081: PUSH
6082: LD_VAR 0 2
6086: ST_TO_ADDR
// hc_gallery =  ;
6087: LD_ADDR_OWVAR 33
6091: PUSH
6092: LD_STRING 
6094: ST_TO_ADDR
// hc_name =  ;
6095: LD_ADDR_OWVAR 26
6099: PUSH
6100: LD_STRING 
6102: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6103: LD_INT 0
6105: PPUSH
6106: LD_VAR 0 5
6110: PPUSH
6111: LD_VAR 0 4
6115: PPUSH
6116: CALL_OW 380
// un = CreateHuman ;
6120: LD_ADDR_VAR 0 10
6124: PUSH
6125: CALL_OW 44
6129: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6130: LD_VAR 0 10
6134: PPUSH
6135: LD_VAR 0 3
6139: PPUSH
6140: CALL_OW 52
// end ;
6144: GO 6064
6146: POP
6147: POP
// end ;
6148: LD_VAR 0 7
6152: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6153: LD_INT 0
6155: PPUSH
6156: PPUSH
6157: PPUSH
// uc_side := GetSide ( b ) ;
6158: LD_ADDR_OWVAR 20
6162: PUSH
6163: LD_VAR 0 2
6167: PPUSH
6168: CALL_OW 255
6172: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6173: LD_ADDR_OWVAR 21
6177: PUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: CALL_OW 248
6187: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6188: LD_INT 0
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6203: LD_ADDR_VAR 0 5
6207: PUSH
6208: LD_VAR 0 2
6212: PPUSH
6213: CALL_OW 254
6217: PUSH
6218: LD_INT 3
6220: MINUS
6221: ST_TO_ADDR
// if dir < 0 then
6222: LD_VAR 0 5
6226: PUSH
6227: LD_INT 0
6229: LESS
6230: IFFALSE 6246
// dir := 6 + dir ;
6232: LD_ADDR_VAR 0 5
6236: PUSH
6237: LD_INT 6
6239: PUSH
6240: LD_VAR 0 5
6244: PLUS
6245: ST_TO_ADDR
// un := CreateHuman ;
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: CALL_OW 44
6255: ST_TO_ADDR
// SetDir ( un , dir ) ;
6256: LD_VAR 0 4
6260: PPUSH
6261: LD_VAR 0 5
6265: PPUSH
6266: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6270: LD_VAR 0 4
6274: PPUSH
6275: LD_VAR 0 2
6279: PPUSH
6280: CALL_OW 52
// end ;
6284: LD_VAR 0 3
6288: RET
// export function PrepareDifficulty ; begin
6289: LD_INT 0
6291: PPUSH
// if Difficulty = 1 then
6292: LD_OWVAR 67
6296: PUSH
6297: LD_INT 1
6299: EQUAL
6300: IFFALSE 6318
// begin RuSolMinLevel = 2 ;
6302: LD_ADDR_EXP 34
6306: PUSH
6307: LD_INT 2
6309: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6310: LD_ADDR_EXP 35
6314: PUSH
6315: LD_INT 4
6317: ST_TO_ADDR
// end ; if Difficulty = 2 then
6318: LD_OWVAR 67
6322: PUSH
6323: LD_INT 2
6325: EQUAL
6326: IFFALSE 6344
// begin RuSolMinLevel = 3 ;
6328: LD_ADDR_EXP 34
6332: PUSH
6333: LD_INT 3
6335: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6336: LD_ADDR_EXP 35
6340: PUSH
6341: LD_INT 5
6343: ST_TO_ADDR
// end ; if Difficulty = 3 then
6344: LD_OWVAR 67
6348: PUSH
6349: LD_INT 3
6351: EQUAL
6352: IFFALSE 6370
// begin RuSolMinLevel = 3 ;
6354: LD_ADDR_EXP 34
6358: PUSH
6359: LD_INT 3
6361: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6362: LD_ADDR_EXP 35
6366: PUSH
6367: LD_INT 6
6369: ST_TO_ADDR
// end ; end ;
6370: LD_VAR 0 1
6374: RET
// export function ShowQuery1 ; begin
6375: LD_INT 0
6377: PPUSH
// case query ( QKill ) of 1 :
6378: LD_STRING QKill
6380: PPUSH
6381: CALL_OW 97
6385: PUSH
6386: LD_INT 1
6388: DOUBLE
6389: EQUAL
6390: IFTRUE 6394
6392: GO 6405
6394: POP
// begin result = 1 ;
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_INT 1
6402: ST_TO_ADDR
// end ; 2 :
6403: GO 6444
6405: LD_INT 2
6407: DOUBLE
6408: EQUAL
6409: IFTRUE 6413
6411: GO 6424
6413: POP
// begin result = 2 ;
6414: LD_ADDR_VAR 0 1
6418: PUSH
6419: LD_INT 2
6421: ST_TO_ADDR
// end ; 3 :
6422: GO 6444
6424: LD_INT 3
6426: DOUBLE
6427: EQUAL
6428: IFTRUE 6432
6430: GO 6443
6432: POP
// begin result = 3 ;
6433: LD_ADDR_VAR 0 1
6437: PUSH
6438: LD_INT 3
6440: ST_TO_ADDR
// end ; end ;
6441: GO 6444
6443: POP
// end ;
6444: LD_VAR 0 1
6448: RET
// export function ShowQuery2 ; begin
6449: LD_INT 0
6451: PPUSH
// case query ( QKill2 ) of 1 :
6452: LD_STRING QKill2
6454: PPUSH
6455: CALL_OW 97
6459: PUSH
6460: LD_INT 1
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6479
6468: POP
// begin result = 1 ;
6469: LD_ADDR_VAR 0 1
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// end ; 2 :
6477: GO 6499
6479: LD_INT 2
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6498
6487: POP
// begin result = 2 ;
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_INT 2
6495: ST_TO_ADDR
// end ; end ;
6496: GO 6499
6498: POP
// end ;
6499: LD_VAR 0 1
6503: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6504: LD_INT 0
6506: PPUSH
6507: PPUSH
6508: PPUSH
6509: PPUSH
6510: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6511: LD_ADDR_VAR 0 8
6515: PUSH
6516: LD_INT 48
6518: PUSH
6519: LD_INT 49
6521: PUSH
6522: LD_INT 50
6524: PUSH
6525: LD_INT 20
6527: PUSH
6528: LD_INT 1
6530: PUSH
6531: LD_INT 51
6533: PUSH
6534: LD_INT 52
6536: PUSH
6537: LD_INT 69
6539: PUSH
6540: LD_INT 39
6542: PUSH
6543: LD_INT 34
6545: PUSH
6546: LD_INT 40
6548: PUSH
6549: LD_INT 53
6551: PUSH
6552: LD_INT 71
6554: PUSH
6555: LD_INT 57
6557: PUSH
6558: LD_INT 58
6560: PUSH
6561: LD_INT 44
6563: PUSH
6564: LD_INT 32
6566: PUSH
6567: LD_INT 27
6569: PUSH
6570: LD_INT 23
6572: PUSH
6573: LD_INT 33
6575: PUSH
6576: LD_INT 59
6578: PUSH
6579: LD_INT 54
6581: PUSH
6582: LD_INT 55
6584: PUSH
6585: LD_INT 56
6587: PUSH
6588: LD_INT 63
6590: PUSH
6591: LD_INT 64
6593: PUSH
6594: LD_INT 65
6596: PUSH
6597: LD_INT 30
6599: PUSH
6600: LD_INT 31
6602: PUSH
6603: LD_INT 21
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_INT 25
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6646: LD_ADDR_VAR 0 5
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_VAR 0 8
6660: PUSH
6661: FOR_TO
6662: IFFALSE 6738
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6664: LD_VAR 0 8
6668: PUSH
6669: LD_VAR 0 5
6673: ARRAY
6674: PPUSH
6675: LD_VAR 0 1
6679: PPUSH
6680: CALL_OW 321
6684: PUSH
6685: LD_INT 1
6687: EQUAL
6688: PUSH
6689: LD_VAR 0 8
6693: PUSH
6694: LD_VAR 0 5
6698: ARRAY
6699: PPUSH
6700: LD_VAR 0 3
6704: PPUSH
6705: CALL_OW 482
6709: PUSH
6710: LD_INT 1
6712: EQUAL
6713: AND
6714: IFFALSE 6736
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 8
6725: PUSH
6726: LD_VAR 0 5
6730: ARRAY
6731: PPUSH
6732: CALL_OW 184
6736: GO 6661
6738: POP
6739: POP
// end ;
6740: LD_VAR 0 4
6744: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6745: LD_INT 0
6747: PPUSH
6748: PPUSH
6749: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6750: LD_INT 22
6752: PUSH
6753: LD_VAR 0 1
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 21
6764: PUSH
6765: LD_INT 2
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 69
6780: PUSH
6781: LD_VAR 0 3
6785: LESSEQUAL
6786: IFFALSE 6894
// begin for i = 1 to vehCount do
6788: LD_ADDR_VAR 0 9
6792: PUSH
6793: DOUBLE
6794: LD_INT 1
6796: DEC
6797: ST_TO_ADDR
6798: LD_VAR 0 3
6802: PUSH
6803: FOR_TO
6804: IFFALSE 6892
// begin weapon = weaponTab [ i ] ;
6806: LD_ADDR_VAR 0 10
6810: PUSH
6811: LD_VAR 0 4
6815: PUSH
6816: LD_VAR 0 9
6820: ARRAY
6821: ST_TO_ADDR
// if weapon = 46 then
6822: LD_VAR 0 10
6826: PUSH
6827: LD_INT 46
6829: EQUAL
6830: IFFALSE 6861
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6832: LD_VAR 0 2
6836: PPUSH
6837: LD_INT 24
6839: PPUSH
6840: LD_VAR 0 5
6844: PPUSH
6845: LD_VAR 0 6
6849: PPUSH
6850: LD_VAR 0 10
6854: PPUSH
6855: CALL_OW 185
// end else
6859: GO 6890
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6861: LD_VAR 0 2
6865: PPUSH
6866: LD_VAR 0 7
6870: PPUSH
6871: LD_VAR 0 5
6875: PPUSH
6876: LD_VAR 0 6
6880: PPUSH
6881: LD_VAR 0 10
6885: PPUSH
6886: CALL_OW 185
// end ; end ;
6890: GO 6803
6892: POP
6893: POP
// end ; end ;
6894: LD_VAR 0 8
6898: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6899: LD_INT 0
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6905: LD_ADDR_VAR 0 8
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_VAR 0 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 21
6924: PUSH
6925: LD_INT 2
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 650
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: PPUSH
6954: CALL_OW 69
6958: ST_TO_ADDR
// if damageVehicles > 0 then
6959: LD_VAR 0 8
6963: PUSH
6964: LD_INT 0
6966: GREATER
6967: IFFALSE 6988
// ComMoveXY ( damageVehicles , repX , repY ) ;
6969: LD_VAR 0 8
6973: PPUSH
6974: LD_VAR 0 3
6978: PPUSH
6979: LD_VAR 0 4
6983: PPUSH
6984: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6988: LD_VAR 0 8
6992: PPUSH
6993: LD_INT 95
6995: PUSH
6996: LD_VAR 0 2
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 58
7010: PUSH
7011: EMPTY
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 72
7026: PUSH
7027: LD_INT 0
7029: GREATER
7030: IFFALSE 7097
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7032: LD_ADDR_VAR 0 6
7036: PUSH
7037: LD_VAR 0 8
7041: PPUSH
7042: LD_INT 95
7044: PUSH
7045: LD_VAR 0 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: LD_INT 58
7059: PUSH
7060: EMPTY
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 72
7075: PUSH
7076: FOR_IN
7077: IFFALSE 7095
// ComExitVehicle ( UnitsInside ( i ) ) ;
7079: LD_VAR 0 6
7083: PPUSH
7084: CALL_OW 313
7088: PPUSH
7089: CALL_OW 121
7093: GO 7076
7095: POP
7096: POP
// end ;
7097: LD_VAR 0 5
7101: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7102: LD_INT 0
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7111: LD_ADDR_VAR 0 8
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_VAR 0 1
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 21
7130: PUSH
7131: LD_INT 2
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PUSH
7138: LD_INT 24
7140: PUSH
7141: LD_INT 660
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 3
7150: PUSH
7151: LD_INT 58
7153: PUSH
7154: EMPTY
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 34
7162: PUSH
7163: LD_INT 43
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 34
7172: PUSH
7173: LD_INT 44
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 34
7182: PUSH
7183: LD_INT 46
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PPUSH
7207: CALL_OW 69
7211: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7212: LD_INT 22
7214: PUSH
7215: LD_VAR 0 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 21
7226: PUSH
7227: LD_INT 2
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 24
7236: PUSH
7237: LD_INT 1000
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: LD_INT 58
7249: PUSH
7250: EMPTY
7251: LIST
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: LD_INT 34
7258: PUSH
7259: LD_INT 43
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 34
7268: PUSH
7269: LD_INT 44
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 34
7278: PUSH
7279: LD_INT 46
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: PUSH
7308: LD_INT 5
7310: PUSH
7311: LD_INT 6
7313: PUSH
7314: LD_INT 6
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: EQUAL
7328: IFFALSE 7584
// if seeEnemy = 0 then
7330: LD_VAR 0 11
7334: PUSH
7335: LD_INT 0
7337: EQUAL
7338: IFFALSE 7584
// repeat wait ( 0 0$1 ) ;
7340: LD_INT 35
7342: PPUSH
7343: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7347: LD_ADDR_VAR 0 8
7351: PUSH
7352: LD_INT 22
7354: PUSH
7355: LD_VAR 0 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 21
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: LD_INT 660
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 58
7389: PUSH
7390: EMPTY
7391: LIST
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: LD_INT 34
7398: PUSH
7399: LD_INT 43
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 34
7408: PUSH
7409: LD_INT 44
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 34
7418: PUSH
7419: LD_INT 46
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7448: LD_INT 22
7450: PUSH
7451: LD_VAR 0 1
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 95
7462: PUSH
7463: LD_VAR 0 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: NOT
7481: PUSH
7482: LD_VAR 0 11
7486: PUSH
7487: LD_INT 0
7489: EQUAL
7490: AND
7491: IFFALSE 7546
// for i := 1 to wayX do
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: DOUBLE
7499: LD_INT 1
7501: DEC
7502: ST_TO_ADDR
7503: LD_VAR 0 3
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7544
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7511: LD_VAR 0 8
7515: PPUSH
7516: LD_VAR 0 3
7520: PUSH
7521: LD_VAR 0 6
7525: ARRAY
7526: PPUSH
7527: LD_VAR 0 4
7531: PUSH
7532: LD_VAR 0 6
7536: ARRAY
7537: PPUSH
7538: CALL_OW 114
7542: GO 7508
7544: POP
7545: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7546: LD_INT 22
7548: PUSH
7549: LD_VAR 0 1
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 95
7560: PUSH
7561: LD_VAR 0 2
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 69
7578: PUSH
7579: LD_INT 0
7581: GREATER
7582: IFFALSE 7340
// seeEnemy = 1 ;
7584: LD_ADDR_VAR 0 11
7588: PUSH
7589: LD_INT 1
7591: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// for j in vehiclesOK do
7599: LD_ADDR_VAR 0 7
7603: PUSH
7604: LD_VAR 0 8
7608: PUSH
7609: FOR_IN
7610: IFFALSE 7823
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7612: LD_ADDR_VAR 0 9
7616: PUSH
7617: LD_INT 81
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: LD_INT 101
7631: PUSH
7632: LD_INT 1
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PPUSH
7643: CALL_OW 69
7647: PUSH
7648: LD_EXP 45
7652: DIFF
7653: PPUSH
7654: LD_VAR 0 7
7658: PPUSH
7659: CALL_OW 74
7663: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7664: LD_ADDR_VAR 0 10
7668: PUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 101
7683: PUSH
7684: LD_INT 1
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 59
7696: PUSH
7697: EMPTY
7698: LIST
7699: PUSH
7700: LD_INT 21
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 21
7712: PUSH
7713: LD_INT 2
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: PPUSH
7734: CALL_OW 69
7738: PUSH
7739: LD_EXP 45
7743: DIFF
7744: PPUSH
7745: LD_VAR 0 7
7749: PPUSH
7750: CALL_OW 74
7754: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7755: LD_VAR 0 7
7759: PPUSH
7760: LD_VAR 0 9
7764: PPUSH
7765: CALL_OW 296
7769: PUSH
7770: LD_INT 8
7772: PLUS
7773: PUSH
7774: LD_VAR 0 7
7778: PPUSH
7779: LD_VAR 0 10
7783: PPUSH
7784: CALL_OW 296
7788: LESS
7789: IFFALSE 7807
// ComAttackUnit ( j , target1 ) else
7791: LD_VAR 0 7
7795: PPUSH
7796: LD_VAR 0 9
7800: PPUSH
7801: CALL_OW 115
7805: GO 7821
// ComAttackUnit ( j , target2 ) ;
7807: LD_VAR 0 7
7811: PPUSH
7812: LD_VAR 0 10
7816: PPUSH
7817: CALL_OW 115
// end ;
7821: GO 7609
7823: POP
7824: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7825: LD_INT 22
7827: PUSH
7828: LD_VAR 0 1
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 21
7839: PUSH
7840: LD_INT 2
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 24
7849: PUSH
7850: LD_INT 1000
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 58
7862: PUSH
7863: EMPTY
7864: LIST
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: LD_INT 34
7871: PUSH
7872: LD_INT 43
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 34
7881: PUSH
7882: LD_INT 44
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 34
7891: PUSH
7892: LD_INT 46
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PPUSH
7916: CALL_OW 69
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7592
// seeEnemy = 0 ;
7926: LD_ADDR_VAR 0 11
7930: PUSH
7931: LD_INT 0
7933: ST_TO_ADDR
// end ;
7934: LD_VAR 0 5
7938: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7939: LD_INT 0
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
7946: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7947: LD_ADDR_VAR 0 8
7951: PUSH
7952: LD_VAR 0 2
7956: PPUSH
7957: CALL_OW 313
7961: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7962: LD_ADDR_VAR 0 9
7966: PUSH
7967: LD_VAR 0 3
7971: PPUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 25
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 24
7996: PUSH
7997: LD_INT 750
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 3
8006: PUSH
8007: LD_INT 54
8009: PUSH
8010: EMPTY
8011: LIST
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 70
8027: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8028: LD_ADDR_VAR 0 6
8032: PUSH
8033: LD_VAR 0 3
8037: PPUSH
8038: LD_INT 22
8040: PUSH
8041: LD_VAR 0 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 21
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 24
8065: PUSH
8066: LD_INT 1000
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: PPUSH
8085: CALL_OW 70
8089: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8090: LD_VAR 0 6
8094: NOT
8095: PUSH
8096: LD_INT 22
8098: PUSH
8099: LD_VAR 0 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 25
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 24
8120: PUSH
8121: LD_INT 250
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: PPUSH
8133: CALL_OW 69
8137: NOT
8138: AND
8139: IFFALSE 8143
// exit ;
8141: GO 8325
// if buildings_list > 0 and engineerOkInside then
8143: LD_VAR 0 6
8147: PUSH
8148: LD_INT 0
8150: GREATER
8151: PUSH
8152: LD_VAR 0 8
8156: AND
8157: IFFALSE 8168
// ComExitBuilding ( engineerOkInside ) ;
8159: LD_VAR 0 8
8163: PPUSH
8164: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8168: LD_VAR 0 6
8172: PUSH
8173: LD_INT 0
8175: GREATER
8176: PUSH
8177: LD_VAR 0 9
8181: PUSH
8182: LD_INT 0
8184: GREATER
8185: AND
8186: IFFALSE 8206
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8188: LD_VAR 0 9
8192: PPUSH
8193: LD_VAR 0 6
8197: PUSH
8198: LD_INT 1
8200: ARRAY
8201: PPUSH
8202: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8206: LD_VAR 0 6
8210: PUSH
8211: LD_INT 0
8213: EQUAL
8214: PUSH
8215: LD_VAR 0 4
8219: PUSH
8220: LD_INT 0
8222: EQUAL
8223: AND
8224: PUSH
8225: LD_VAR 0 9
8229: PUSH
8230: LD_INT 0
8232: GREATER
8233: AND
8234: IFFALSE 8250
// ComEnterUnit ( engineerOkOutside , building ) ;
8236: LD_VAR 0 9
8240: PPUSH
8241: LD_VAR 0 2
8245: PPUSH
8246: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8250: LD_VAR 0 9
8254: PUSH
8255: LD_INT 0
8257: GREATER
8258: PUSH
8259: LD_VAR 0 6
8263: PUSH
8264: LD_INT 0
8266: EQUAL
8267: AND
8268: PUSH
8269: LD_VAR 0 4
8273: PUSH
8274: LD_INT 0
8276: GREATER
8277: AND
8278: IFFALSE 8325
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8280: LD_VAR 0 9
8284: PPUSH
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 1
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 4
8298: PUSH
8299: LD_INT 2
8301: ARRAY
8302: PPUSH
8303: LD_VAR 0 4
8307: PUSH
8308: LD_INT 3
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 4
8316: PUSH
8317: LD_INT 4
8319: ARRAY
8320: PPUSH
8321: CALL_OW 145
// end ;
8325: LD_VAR 0 5
8329: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8330: LD_INT 0
8332: PPUSH
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
8338: PPUSH
8339: PPUSH
8340: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8341: LD_ADDR_VAR 0 6
8345: PUSH
8346: LD_INT 22
8348: PUSH
8349: LD_VAR 0 1
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 25
8360: PUSH
8361: LD_INT 4
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_INT 23
8370: PUSH
8371: LD_INT 2
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 24
8380: PUSH
8381: LD_INT 251
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: PPUSH
8394: CALL_OW 69
8398: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8399: LD_ADDR_VAR 0 7
8403: PUSH
8404: LD_VAR 0 3
8408: PPUSH
8409: LD_INT 22
8411: PUSH
8412: LD_VAR 0 1
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 23
8423: PUSH
8424: LD_INT 2
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 25
8433: PUSH
8434: LD_INT 4
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 50
8443: PUSH
8444: EMPTY
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: PPUSH
8453: CALL_OW 70
8457: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8458: LD_ADDR_VAR 0 10
8462: PUSH
8463: LD_VAR 0 3
8467: PPUSH
8468: LD_INT 22
8470: PUSH
8471: LD_VAR 0 1
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 1
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 25
8495: PUSH
8496: LD_INT 3
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 3
8509: PUSH
8510: LD_INT 24
8512: PUSH
8513: LD_INT 750
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8535: LD_ADDR_VAR 0 11
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_INT 22
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 21
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 25
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: LD_INT 24
8589: PUSH
8590: LD_INT 1000
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 70
8611: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8612: LD_VAR 0 10
8616: NOT
8617: PUSH
8618: LD_VAR 0 11
8622: NOT
8623: AND
8624: PUSH
8625: LD_VAR 0 6
8629: NOT
8630: AND
8631: IFFALSE 8635
// exit ;
8633: GO 8869
// if damageUnits > 0 and sci_list > 0 then
8635: LD_VAR 0 10
8639: PUSH
8640: LD_INT 0
8642: GREATER
8643: PUSH
8644: LD_VAR 0 6
8648: PUSH
8649: LD_INT 0
8651: GREATER
8652: AND
8653: IFFALSE 8669
// ComMoveToArea ( damageUnits , healArea ) ;
8655: LD_VAR 0 10
8659: PPUSH
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8669: LD_VAR 0 11
8673: PUSH
8674: LD_INT 0
8676: GREATER
8677: PUSH
8678: LD_VAR 0 6
8682: PUSH
8683: LD_INT 0
8685: GREATER
8686: AND
8687: IFFALSE 8698
// ComExitBuilding ( sci_list ) ;
8689: LD_VAR 0 6
8693: PPUSH
8694: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8698: LD_VAR 0 11
8702: PUSH
8703: LD_INT 0
8705: GREATER
8706: PUSH
8707: LD_VAR 0 7
8711: PUSH
8712: LD_INT 0
8714: GREATER
8715: AND
8716: IFFALSE 8736
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 11
8727: PUSH
8728: LD_INT 1
8730: ARRAY
8731: PPUSH
8732: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8736: LD_VAR 0 10
8740: PUSH
8741: LD_INT 0
8743: EQUAL
8744: PUSH
8745: LD_VAR 0 11
8749: PUSH
8750: LD_INT 0
8752: EQUAL
8753: AND
8754: PUSH
8755: LD_VAR 0 7
8759: PUSH
8760: LD_INT 0
8762: GREATER
8763: AND
8764: IFFALSE 8869
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8766: LD_ADDR_VAR 0 12
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_VAR 0 1
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 21
8785: PUSH
8786: LD_INT 3
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 30
8795: PUSH
8796: LD_INT 8
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8813: LD_ADDR_VAR 0 13
8817: PUSH
8818: LD_INT 1
8820: PPUSH
8821: LD_VAR 0 12
8825: PPUSH
8826: CALL_OW 12
8830: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8831: LD_VAR 0 7
8835: PPUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 60
8841: PUSH
8842: EMPTY
8843: LIST
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PPUSH
8849: CALL_OW 72
8853: PPUSH
8854: LD_VAR 0 12
8858: PUSH
8859: LD_VAR 0 13
8863: ARRAY
8864: PPUSH
8865: CALL_OW 120
// end ; end ;
8869: LD_VAR 0 5
8873: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8874: LD_INT 0
8876: PPUSH
8877: PPUSH
8878: PPUSH
8879: PPUSH
// tmpTab = [ ] ;
8880: LD_ADDR_VAR 0 6
8884: PUSH
8885: EMPTY
8886: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8887: LD_INT 22
8889: PUSH
8890: LD_VAR 0 1
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 30
8901: PUSH
8902: LD_INT 32
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PPUSH
8913: CALL_OW 69
8917: PUSH
8918: LD_INT 0
8920: GREATER
8921: IFFALSE 9004
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8923: LD_ADDR_VAR 0 4
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_VAR 0 1
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 30
8942: PUSH
8943: LD_INT 32
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PPUSH
8954: CALL_OW 69
8958: PUSH
8959: FOR_IN
8960: IFFALSE 9002
// begin for j in UnitsInside ( i ) do
8962: LD_ADDR_VAR 0 5
8966: PUSH
8967: LD_VAR 0 4
8971: PPUSH
8972: CALL_OW 313
8976: PUSH
8977: FOR_IN
8978: IFFALSE 8998
// tmpTab = tmpTab ^ j ;
8980: LD_ADDR_VAR 0 6
8984: PUSH
8985: LD_VAR 0 6
8989: PUSH
8990: LD_VAR 0 5
8994: ADD
8995: ST_TO_ADDR
8996: GO 8977
8998: POP
8999: POP
// end ;
9000: GO 8959
9002: POP
9003: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9004: LD_VAR 0 6
9008: PPUSH
9009: LD_VAR 0 2
9013: PPUSH
9014: CALL_OW 250
9018: PPUSH
9019: LD_VAR 0 2
9023: PPUSH
9024: CALL_OW 251
9028: PPUSH
9029: CALL_OW 114
// end ;
9033: LD_VAR 0 3
9037: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
9043: PPUSH
// enable ;
9044: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9045: LD_ADDR_VAR 0 7
9049: PUSH
9050: LD_VAR 0 3
9054: PPUSH
9055: CALL_OW 435
9059: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9060: LD_ADDR_VAR 0 6
9064: PUSH
9065: LD_INT 22
9067: PUSH
9068: LD_VAR 0 1
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 34
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 69
9097: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9098: LD_VAR 0 6
9102: PUSH
9103: LD_INT 0
9105: GREATER
9106: PUSH
9107: LD_VAR 0 3
9111: PPUSH
9112: CALL_OW 435
9116: AND
9117: PUSH
9118: LD_VAR 0 7
9122: PUSH
9123: LD_INT 0
9125: GREATER
9126: AND
9127: IFFALSE 9176
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9129: LD_VAR 0 6
9133: PUSH
9134: LD_INT 1
9136: ARRAY
9137: PPUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_INT 1
9145: ARRAY
9146: PPUSH
9147: LD_VAR 0 7
9151: PUSH
9152: LD_INT 2
9154: ARRAY
9155: PPUSH
9156: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9160: LD_VAR 0 6
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_INT 100
9171: PPUSH
9172: CALL_OW 240
// end ; end ;
9176: LD_VAR 0 4
9180: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9181: LD_INT 0
9183: PPUSH
9184: PPUSH
9185: PPUSH
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
9190: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9191: LD_ADDR_VAR 0 6
9195: PUSH
9196: LD_VAR 0 2
9200: PPUSH
9201: LD_INT 22
9203: PUSH
9204: LD_VAR 0 1
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 56
9215: PUSH
9216: EMPTY
9217: LIST
9218: PUSH
9219: LD_INT 24
9221: PUSH
9222: LD_INT 700
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 3
9231: PUSH
9232: LD_INT 60
9234: PUSH
9235: EMPTY
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 2
9244: PUSH
9245: LD_INT 25
9247: PUSH
9248: LD_INT 1
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 8
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 9
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 70
9303: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 2
9313: PPUSH
9314: LD_INT 22
9316: PUSH
9317: LD_VAR 0 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 30
9328: PUSH
9329: LD_INT 32
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 58
9338: PUSH
9339: EMPTY
9340: LIST
9341: PUSH
9342: LD_INT 24
9344: PUSH
9345: LD_INT 251
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PPUSH
9358: CALL_OW 70
9362: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9363: LD_ADDR_VAR 0 9
9367: PUSH
9368: LD_VAR 0 2
9372: PPUSH
9373: LD_INT 22
9375: PUSH
9376: LD_VAR 0 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: LD_INT 2
9387: PUSH
9388: LD_INT 30
9390: PUSH
9391: LD_INT 4
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PUSH
9398: LD_INT 30
9400: PUSH
9401: LD_INT 5
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: LD_INT 24
9415: PUSH
9416: LD_INT 251
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: PPUSH
9428: CALL_OW 70
9432: ST_TO_ADDR
// if barrackList > 0 then
9433: LD_VAR 0 9
9437: PUSH
9438: LD_INT 0
9440: GREATER
9441: IFFALSE 9589
// begin if turretList = 0 then
9443: LD_VAR 0 7
9447: PUSH
9448: LD_INT 0
9450: EQUAL
9451: IFFALSE 9493
// begin if soldiers_list > 0 then
9453: LD_VAR 0 6
9457: PUSH
9458: LD_INT 0
9460: GREATER
9461: IFFALSE 9491
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9463: LD_VAR 0 6
9467: PPUSH
9468: LD_VAR 0 9
9472: PUSH
9473: LD_INT 1
9475: PPUSH
9476: LD_VAR 0 9
9480: PPUSH
9481: CALL_OW 12
9485: ARRAY
9486: PPUSH
9487: CALL_OW 120
// end else
9491: GO 9589
// begin for i in barrackList do
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_VAR 0 9
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9587
// begin insideUnits = UnitsInside ( i ) ;
9506: LD_ADDR_VAR 0 10
9510: PUSH
9511: LD_VAR 0 4
9515: PPUSH
9516: CALL_OW 313
9520: ST_TO_ADDR
// if insideUnits > 0 then
9521: LD_VAR 0 10
9525: PUSH
9526: LD_INT 0
9528: GREATER
9529: IFFALSE 9553
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9531: LD_VAR 0 10
9535: PUSH
9536: LD_INT 1
9538: ARRAY
9539: PPUSH
9540: LD_VAR 0 7
9544: PUSH
9545: LD_INT 1
9547: ARRAY
9548: PPUSH
9549: CALL_OW 120
// if soldiers_list > 0 then
9553: LD_VAR 0 6
9557: PUSH
9558: LD_INT 0
9560: GREATER
9561: IFFALSE 9585
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9563: LD_VAR 0 6
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PPUSH
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: CALL_OW 120
// end ;
9585: GO 9503
9587: POP
9588: POP
// end ; end ; end ;
9589: LD_VAR 0 3
9593: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9594: LD_INT 0
9596: PPUSH
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9601: LD_ADDR_VAR 0 6
9605: PUSH
9606: LD_INT 22
9608: PUSH
9609: LD_VAR 0 1
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 2
9620: PUSH
9621: LD_INT 30
9623: PUSH
9624: LD_INT 31
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 30
9633: PUSH
9634: LD_INT 32
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 30
9643: PUSH
9644: LD_INT 33
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 30
9653: PUSH
9654: LD_INT 4
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 30
9663: PUSH
9664: LD_INT 5
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: CALL_OW 69
9687: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9688: LD_ADDR_VAR 0 7
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_VAR 0 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 58
9717: PUSH
9718: EMPTY
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9731: LD_VAR 0 6
9735: PUSH
9736: LD_INT 0
9738: GREATER
9739: PUSH
9740: LD_VAR 0 7
9744: PUSH
9745: LD_INT 0
9747: GREATER
9748: AND
9749: IFFALSE 9819
// begin for i in turretsList do
9751: LD_ADDR_VAR 0 4
9755: PUSH
9756: LD_VAR 0 6
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9817
// begin for j in enemyBuildings do
9764: LD_ADDR_VAR 0 5
9768: PUSH
9769: LD_VAR 0 7
9773: PUSH
9774: FOR_IN
9775: IFFALSE 9813
// begin if GetDistUnits ( i , j ) < 20 then
9777: LD_VAR 0 4
9781: PPUSH
9782: LD_VAR 0 5
9786: PPUSH
9787: CALL_OW 296
9791: PUSH
9792: LD_INT 20
9794: LESS
9795: IFFALSE 9811
// begin ComAttackUnit ( i , j ) ;
9797: LD_VAR 0 4
9801: PPUSH
9802: LD_VAR 0 5
9806: PPUSH
9807: CALL_OW 115
// end ; end ;
9811: GO 9774
9813: POP
9814: POP
// end ;
9815: GO 9761
9817: POP
9818: POP
// end ; end ;
9819: LD_VAR 0 3
9823: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9824: LD_INT 0
9826: PPUSH
9827: PPUSH
9828: PPUSH
9829: PPUSH
9830: PPUSH
9831: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9832: LD_ADDR_VAR 0 8
9836: PUSH
9837: LD_INT 22
9839: PUSH
9840: LD_VAR 0 1
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 21
9851: PUSH
9852: LD_INT 2
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 34
9861: PUSH
9862: LD_INT 52
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 69
9878: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9879: LD_ADDR_VAR 0 9
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: LD_VAR 0 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: LD_INT 24
9911: PUSH
9912: LD_INT 1000
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: PPUSH
9931: CALL_OW 69
9935: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9936: LD_VAR 0 9
9940: PUSH
9941: LD_INT 0
9943: GREATER
9944: PUSH
9945: LD_VAR 0 8
9949: PPUSH
9950: LD_INT 24
9952: PUSH
9953: LD_INT 750
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 72
9964: PUSH
9965: LD_INT 0
9967: GREATER
9968: AND
9969: IFFALSE 10004
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9971: LD_VAR 0 8
9975: PPUSH
9976: LD_INT 24
9978: PUSH
9979: LD_INT 750
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: PPUSH
9991: LD_VAR 0 9
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PPUSH
10000: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10004: LD_VAR 0 8
10008: PPUSH
10009: LD_INT 3
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 750
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 72
10030: PUSH
10031: LD_INT 0
10033: GREATER
10034: IFFALSE 10072
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10036: LD_VAR 0 8
10040: PPUSH
10041: LD_INT 3
10043: PUSH
10044: LD_INT 24
10046: PUSH
10047: LD_INT 750
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL_OW 72
10062: PPUSH
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10072: LD_VAR 0 8
10076: PUSH
10077: LD_INT 0
10079: GREATER
10080: PUSH
10081: LD_VAR 0 9
10085: PUSH
10086: LD_INT 0
10088: EQUAL
10089: AND
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 0
10098: GREATER
10099: AND
10100: IFFALSE 10147
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10102: LD_VAR 0 8
10106: PPUSH
10107: LD_VAR 0 3
10111: PUSH
10112: LD_INT 1
10114: ARRAY
10115: PPUSH
10116: LD_VAR 0 3
10120: PUSH
10121: LD_INT 2
10123: ARRAY
10124: PPUSH
10125: LD_VAR 0 3
10129: PUSH
10130: LD_INT 3
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 3
10138: PUSH
10139: LD_INT 4
10141: ARRAY
10142: PPUSH
10143: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10147: LD_VAR 0 2
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_VAR 0 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 34
10176: PUSH
10177: LD_INT 52
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 3
10186: PUSH
10187: LD_INT 24
10189: PUSH
10190: LD_INT 750
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: PPUSH
10207: CALL_OW 70
10211: PUSH
10212: LD_INT 0
10214: GREATER
10215: IFFALSE 10417
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10217: LD_ADDR_VAR 0 5
10221: PUSH
10222: LD_VAR 0 2
10226: PPUSH
10227: LD_INT 22
10229: PUSH
10230: LD_VAR 0 1
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 21
10241: PUSH
10242: LD_INT 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 34
10251: PUSH
10252: LD_INT 52
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 24
10264: PUSH
10265: LD_INT 750
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: PPUSH
10282: CALL_OW 70
10286: PUSH
10287: FOR_IN
10288: IFFALSE 10415
// begin mechTmp = UnitsInside ( i ) ;
10290: LD_ADDR_VAR 0 6
10294: PUSH
10295: LD_VAR 0 5
10299: PPUSH
10300: CALL_OW 313
10304: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10305: LD_VAR 0 6
10309: PPUSH
10310: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10314: LD_VAR 0 6
10318: PPUSH
10319: LD_VAR 0 7
10323: PPUSH
10324: CALL_OW 189
// wait ( 0 0$2 ) ;
10328: LD_INT 70
10330: PPUSH
10331: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10335: LD_VAR 0 6
10339: PPUSH
10340: LD_VAR 0 2
10344: PPUSH
10345: LD_INT 22
10347: PUSH
10348: LD_VAR 0 1
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 21
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 34
10369: PUSH
10370: LD_INT 52
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 24
10379: PUSH
10380: LD_INT 1000
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 58
10389: PUSH
10390: EMPTY
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: PPUSH
10400: CALL_OW 70
10404: PUSH
10405: LD_INT 1
10407: ARRAY
10408: PPUSH
10409: CALL_OW 180
// end ;
10413: GO 10287
10415: POP
10416: POP
// end ; end ;
10417: LD_VAR 0 4
10421: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10422: LD_INT 0
10424: PPUSH
10425: PPUSH
10426: PPUSH
10427: PPUSH
10428: PPUSH
10429: PPUSH
10430: PPUSH
10431: PPUSH
10432: PPUSH
10433: PPUSH
10434: PPUSH
// for i = 1 to medicCount do
10435: LD_ADDR_VAR 0 14
10439: PUSH
10440: DOUBLE
10441: LD_INT 1
10443: DEC
10444: ST_TO_ADDR
10445: LD_VAR 0 7
10449: PUSH
10450: FOR_TO
10451: IFFALSE 10533
// begin uc_side = side ;
10453: LD_ADDR_OWVAR 20
10457: PUSH
10458: LD_VAR 0 1
10462: ST_TO_ADDR
// uc_nation = nation ;
10463: LD_ADDR_OWVAR 21
10467: PUSH
10468: LD_VAR 0 2
10472: ST_TO_ADDR
// hc_name =  ;
10473: LD_ADDR_OWVAR 26
10477: PUSH
10478: LD_STRING 
10480: ST_TO_ADDR
// hc_gallery =  ;
10481: LD_ADDR_OWVAR 33
10485: PUSH
10486: LD_STRING 
10488: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10489: LD_INT 0
10491: PPUSH
10492: LD_INT 4
10494: PPUSH
10495: LD_VAR 0 8
10499: PPUSH
10500: CALL_OW 380
// un = CreateHuman ;
10504: LD_ADDR_VAR 0 16
10508: PUSH
10509: CALL_OW 44
10513: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10514: LD_VAR 0 16
10518: PPUSH
10519: LD_VAR 0 9
10523: PPUSH
10524: LD_INT 0
10526: PPUSH
10527: CALL_OW 49
// end ;
10531: GO 10450
10533: POP
10534: POP
// for i = 1 to soldierCount do
10535: LD_ADDR_VAR 0 14
10539: PUSH
10540: DOUBLE
10541: LD_INT 1
10543: DEC
10544: ST_TO_ADDR
10545: LD_VAR 0 3
10549: PUSH
10550: FOR_TO
10551: IFFALSE 10633
// begin uc_side = side ;
10553: LD_ADDR_OWVAR 20
10557: PUSH
10558: LD_VAR 0 1
10562: ST_TO_ADDR
// uc_nation = nation ;
10563: LD_ADDR_OWVAR 21
10567: PUSH
10568: LD_VAR 0 2
10572: ST_TO_ADDR
// hc_name =  ;
10573: LD_ADDR_OWVAR 26
10577: PUSH
10578: LD_STRING 
10580: ST_TO_ADDR
// hc_gallery =  ;
10581: LD_ADDR_OWVAR 33
10585: PUSH
10586: LD_STRING 
10588: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10589: LD_INT 0
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: LD_VAR 0 8
10599: PPUSH
10600: CALL_OW 380
// un = CreateHuman ;
10604: LD_ADDR_VAR 0 16
10608: PUSH
10609: CALL_OW 44
10613: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10614: LD_VAR 0 16
10618: PPUSH
10619: LD_VAR 0 9
10623: PPUSH
10624: LD_INT 0
10626: PPUSH
10627: CALL_OW 49
// end ;
10631: GO 10550
10633: POP
10634: POP
// for i = 1 to sniperCount do
10635: LD_ADDR_VAR 0 14
10639: PUSH
10640: DOUBLE
10641: LD_INT 1
10643: DEC
10644: ST_TO_ADDR
10645: LD_VAR 0 4
10649: PUSH
10650: FOR_TO
10651: IFFALSE 10733
// begin uc_side = side ;
10653: LD_ADDR_OWVAR 20
10657: PUSH
10658: LD_VAR 0 1
10662: ST_TO_ADDR
// uc_nation = nation ;
10663: LD_ADDR_OWVAR 21
10667: PUSH
10668: LD_VAR 0 2
10672: ST_TO_ADDR
// hc_name =  ;
10673: LD_ADDR_OWVAR 26
10677: PUSH
10678: LD_STRING 
10680: ST_TO_ADDR
// hc_gallery =  ;
10681: LD_ADDR_OWVAR 33
10685: PUSH
10686: LD_STRING 
10688: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10689: LD_INT 0
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: LD_VAR 0 8
10699: PPUSH
10700: CALL_OW 380
// un = CreateHuman ;
10704: LD_ADDR_VAR 0 16
10708: PUSH
10709: CALL_OW 44
10713: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10714: LD_VAR 0 16
10718: PPUSH
10719: LD_VAR 0 9
10723: PPUSH
10724: LD_INT 0
10726: PPUSH
10727: CALL_OW 49
// end ;
10731: GO 10650
10733: POP
10734: POP
// for i = 1 to bazookCount do
10735: LD_ADDR_VAR 0 14
10739: PUSH
10740: DOUBLE
10741: LD_INT 1
10743: DEC
10744: ST_TO_ADDR
10745: LD_VAR 0 5
10749: PUSH
10750: FOR_TO
10751: IFFALSE 10833
// begin uc_side = side ;
10753: LD_ADDR_OWVAR 20
10757: PUSH
10758: LD_VAR 0 1
10762: ST_TO_ADDR
// uc_nation = nation ;
10763: LD_ADDR_OWVAR 21
10767: PUSH
10768: LD_VAR 0 2
10772: ST_TO_ADDR
// hc_name =  ;
10773: LD_ADDR_OWVAR 26
10777: PUSH
10778: LD_STRING 
10780: ST_TO_ADDR
// hc_gallery =  ;
10781: LD_ADDR_OWVAR 33
10785: PUSH
10786: LD_STRING 
10788: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_INT 9
10794: PPUSH
10795: LD_VAR 0 8
10799: PPUSH
10800: CALL_OW 380
// un = CreateHuman ;
10804: LD_ADDR_VAR 0 16
10808: PUSH
10809: CALL_OW 44
10813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10814: LD_VAR 0 16
10818: PPUSH
10819: LD_VAR 0 9
10823: PPUSH
10824: LD_INT 0
10826: PPUSH
10827: CALL_OW 49
// end ;
10831: GO 10750
10833: POP
10834: POP
// for i = 1 to mortalCount do
10835: LD_ADDR_VAR 0 14
10839: PUSH
10840: DOUBLE
10841: LD_INT 1
10843: DEC
10844: ST_TO_ADDR
10845: LD_VAR 0 6
10849: PUSH
10850: FOR_TO
10851: IFFALSE 10933
// begin uc_side = side ;
10853: LD_ADDR_OWVAR 20
10857: PUSH
10858: LD_VAR 0 1
10862: ST_TO_ADDR
// uc_nation = nation ;
10863: LD_ADDR_OWVAR 21
10867: PUSH
10868: LD_VAR 0 2
10872: ST_TO_ADDR
// hc_name =  ;
10873: LD_ADDR_OWVAR 26
10877: PUSH
10878: LD_STRING 
10880: ST_TO_ADDR
// hc_gallery =  ;
10881: LD_ADDR_OWVAR 33
10885: PUSH
10886: LD_STRING 
10888: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10889: LD_INT 0
10891: PPUSH
10892: LD_INT 8
10894: PPUSH
10895: LD_VAR 0 8
10899: PPUSH
10900: CALL_OW 380
// un = CreateHuman ;
10904: LD_ADDR_VAR 0 16
10908: PUSH
10909: CALL_OW 44
10913: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10914: LD_VAR 0 16
10918: PPUSH
10919: LD_VAR 0 9
10923: PPUSH
10924: LD_INT 0
10926: PPUSH
10927: CALL_OW 49
// end ;
10931: GO 10850
10933: POP
10934: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10935: LD_ADDR_VAR 0 19
10939: PUSH
10940: LD_INT 22
10942: PUSH
10943: LD_VAR 0 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 5
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 8
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 9
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 69
11010: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11011: LD_ADDR_VAR 0 18
11015: PUSH
11016: LD_INT 22
11018: PUSH
11019: LD_VAR 0 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 4
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PPUSH
11042: CALL_OW 69
11046: ST_TO_ADDR
// for i in medic_list do
11047: LD_ADDR_VAR 0 14
11051: PUSH
11052: LD_VAR 0 18
11056: PUSH
11057: FOR_IN
11058: IFFALSE 11076
// ComMoveToArea ( i , healArea ) ;
11060: LD_VAR 0 14
11064: PPUSH
11065: LD_VAR 0 10
11069: PPUSH
11070: CALL_OW 113
11074: GO 11057
11076: POP
11077: POP
// if strategy = 1 then
11078: LD_VAR 0 12
11082: PUSH
11083: LD_INT 1
11085: EQUAL
11086: IFFALSE 11803
// begin repeat wait ( 0 0$3 ) ;
11088: LD_INT 105
11090: PPUSH
11091: CALL_OW 67
// for i in soldiersOK_list do
11095: LD_ADDR_VAR 0 14
11099: PUSH
11100: LD_VAR 0 19
11104: PUSH
11105: FOR_IN
11106: IFFALSE 11140
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11108: LD_VAR 0 14
11112: PPUSH
11113: LD_INT 80
11115: PPUSH
11116: LD_INT 109
11118: PPUSH
11119: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11123: LD_VAR 0 14
11127: PPUSH
11128: LD_INT 39
11130: PPUSH
11131: LD_INT 49
11133: PPUSH
11134: CALL_OW 174
// end ;
11138: GO 11105
11140: POP
11141: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11142: LD_INT 13
11144: PPUSH
11145: LD_INT 22
11147: PUSH
11148: LD_VAR 0 1
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PPUSH
11157: CALL_OW 70
11161: PUSH
11162: LD_INT 0
11164: GREATER
11165: IFFALSE 11088
// repeat wait ( 0 0$1 ) ;
11167: LD_INT 35
11169: PPUSH
11170: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11174: LD_ADDR_VAR 0 17
11178: PUSH
11179: LD_INT 22
11181: PUSH
11182: LD_VAR 0 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 1
11193: PUSH
11194: LD_INT 3
11196: PUSH
11197: LD_INT 24
11199: PUSH
11200: LD_INT 550
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 24
11213: PUSH
11214: LD_INT 250
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 69
11234: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11235: LD_ADDR_VAR 0 19
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 25
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 25
11267: PUSH
11268: LD_INT 5
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 25
11277: PUSH
11278: LD_INT 8
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 9
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 24
11304: PUSH
11305: LD_INT 1000
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: ST_TO_ADDR
// if medicCount > 0 then
11322: LD_VAR 0 7
11326: PUSH
11327: LD_INT 0
11329: GREATER
11330: IFFALSE 11404
// begin if damageUnit_list > 0 then
11332: LD_VAR 0 17
11336: PUSH
11337: LD_INT 0
11339: GREATER
11340: IFFALSE 11404
// begin for i in damageUnit_list do
11342: LD_ADDR_VAR 0 14
11346: PUSH
11347: LD_VAR 0 17
11351: PUSH
11352: FOR_IN
11353: IFFALSE 11402
// begin ComMoveToArea ( i , healArea ) ;
11355: LD_VAR 0 14
11359: PPUSH
11360: LD_VAR 0 10
11364: PPUSH
11365: CALL_OW 113
// for j in medic_list do
11369: LD_ADDR_VAR 0 15
11373: PUSH
11374: LD_VAR 0 18
11378: PUSH
11379: FOR_IN
11380: IFFALSE 11398
// AddComHeal ( j , i ) ;
11382: LD_VAR 0 15
11386: PPUSH
11387: LD_VAR 0 14
11391: PPUSH
11392: CALL_OW 188
11396: GO 11379
11398: POP
11399: POP
// end ;
11400: GO 11352
11402: POP
11403: POP
// end ; end ; for i in soldiersOK_list do
11404: LD_ADDR_VAR 0 14
11408: PUSH
11409: LD_VAR 0 19
11413: PUSH
11414: FOR_IN
11415: IFFALSE 11597
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11417: LD_ADDR_VAR 0 22
11421: PUSH
11422: LD_INT 22
11424: PUSH
11425: LD_VAR 0 11
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 69
11438: PUSH
11439: LD_EXP 45
11443: DIFF
11444: PPUSH
11445: LD_VAR 0 14
11449: PPUSH
11450: CALL_OW 74
11454: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11455: LD_ADDR_VAR 0 23
11459: PUSH
11460: LD_INT 22
11462: PUSH
11463: LD_VAR 0 11
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: LD_INT 59
11477: PUSH
11478: EMPTY
11479: LIST
11480: PUSH
11481: LD_INT 21
11483: PUSH
11484: LD_INT 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 21
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: PPUSH
11519: LD_VAR 0 14
11523: PPUSH
11524: CALL_OW 74
11528: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11529: LD_VAR 0 14
11533: PPUSH
11534: LD_VAR 0 22
11538: PPUSH
11539: CALL_OW 296
11543: PUSH
11544: LD_INT 8
11546: PLUS
11547: PUSH
11548: LD_VAR 0 14
11552: PPUSH
11553: LD_VAR 0 23
11557: PPUSH
11558: CALL_OW 296
11562: LESS
11563: IFFALSE 11581
// begin ComAttackUnit ( i , target1 ) ;
11565: LD_VAR 0 14
11569: PPUSH
11570: LD_VAR 0 22
11574: PPUSH
11575: CALL_OW 115
// end else
11579: GO 11595
// begin ComAttackUnit ( i , target2 ) ;
11581: LD_VAR 0 14
11585: PPUSH
11586: LD_VAR 0 23
11590: PPUSH
11591: CALL_OW 115
// end ; end ;
11595: GO 11414
11597: POP
11598: POP
// for i in soldiersOK_list do
11599: LD_ADDR_VAR 0 14
11603: PUSH
11604: LD_VAR 0 19
11608: PUSH
11609: FOR_IN
11610: IFFALSE 11792
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11612: LD_ADDR_VAR 0 22
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 11
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 69
11633: PUSH
11634: LD_EXP 45
11638: DIFF
11639: PPUSH
11640: LD_VAR 0 14
11644: PPUSH
11645: CALL_OW 74
11649: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11650: LD_ADDR_VAR 0 23
11654: PUSH
11655: LD_INT 22
11657: PUSH
11658: LD_VAR 0 11
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 2
11669: PUSH
11670: LD_INT 59
11672: PUSH
11673: EMPTY
11674: LIST
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: LD_INT 1
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: PPUSH
11709: CALL_OW 69
11713: PPUSH
11714: LD_VAR 0 14
11718: PPUSH
11719: CALL_OW 74
11723: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11724: LD_VAR 0 14
11728: PPUSH
11729: LD_VAR 0 22
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 8
11741: PLUS
11742: PUSH
11743: LD_VAR 0 14
11747: PPUSH
11748: LD_VAR 0 23
11752: PPUSH
11753: CALL_OW 296
11757: LESS
11758: IFFALSE 11776
// begin ComAttackUnit ( i , target1 ) ;
11760: LD_VAR 0 14
11764: PPUSH
11765: LD_VAR 0 22
11769: PPUSH
11770: CALL_OW 115
// end else
11774: GO 11790
// begin ComAttackUnit ( i , target2 ) ;
11776: LD_VAR 0 14
11780: PPUSH
11781: LD_VAR 0 23
11785: PPUSH
11786: CALL_OW 115
// end ; end ;
11790: GO 11609
11792: POP
11793: POP
// until soldiersOK_list = [ ] ;
11794: LD_VAR 0 19
11798: PUSH
11799: EMPTY
11800: EQUAL
11801: IFFALSE 11167
// end ; if strategy = 2 then
11803: LD_VAR 0 12
11807: PUSH
11808: LD_INT 2
11810: EQUAL
11811: IFFALSE 12516
// begin repeat wait ( 0 0$1 ) ;
11813: LD_INT 35
11815: PPUSH
11816: CALL_OW 67
// for i in soldiersOK_list do
11820: LD_ADDR_VAR 0 14
11824: PUSH
11825: LD_VAR 0 19
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11865
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11833: LD_VAR 0 14
11837: PPUSH
11838: LD_INT 117
11840: PPUSH
11841: LD_INT 97
11843: PPUSH
11844: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11848: LD_VAR 0 14
11852: PPUSH
11853: LD_INT 94
11855: PPUSH
11856: LD_INT 50
11858: PPUSH
11859: CALL_OW 174
// end ;
11863: GO 11830
11865: POP
11866: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11867: LD_INT 14
11869: PPUSH
11870: LD_INT 22
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PPUSH
11882: CALL_OW 70
11886: PUSH
11887: LD_INT 0
11889: GREATER
11890: IFFALSE 11813
// repeat wait ( 0 0$3 ) ;
11892: LD_INT 105
11894: PPUSH
11895: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11899: LD_ADDR_VAR 0 17
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_VAR 0 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 1
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 550
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 24
11938: PUSH
11939: LD_INT 250
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11960: LD_ADDR_VAR 0 19
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_VAR 0 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 2
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 25
11992: PUSH
11993: LD_INT 5
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 25
12002: PUSH
12003: LD_INT 8
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 9
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 1000
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 69
12046: ST_TO_ADDR
// if medicCount > 0 then
12047: LD_VAR 0 7
12051: PUSH
12052: LD_INT 0
12054: GREATER
12055: IFFALSE 12129
// begin if damageUnit_list > 0 then
12057: LD_VAR 0 17
12061: PUSH
12062: LD_INT 0
12064: GREATER
12065: IFFALSE 12129
// begin for i in damageUnit_list do
12067: LD_ADDR_VAR 0 14
12071: PUSH
12072: LD_VAR 0 17
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12127
// begin ComMoveToArea ( i , healArea ) ;
12080: LD_VAR 0 14
12084: PPUSH
12085: LD_VAR 0 10
12089: PPUSH
12090: CALL_OW 113
// for j in medic_list do
12094: LD_ADDR_VAR 0 15
12098: PUSH
12099: LD_VAR 0 18
12103: PUSH
12104: FOR_IN
12105: IFFALSE 12123
// AddComHeal ( j , i ) ;
12107: LD_VAR 0 15
12111: PPUSH
12112: LD_VAR 0 14
12116: PPUSH
12117: CALL_OW 188
12121: GO 12104
12123: POP
12124: POP
// end ;
12125: GO 12077
12127: POP
12128: POP
// end ; end ; for i in soldiersOK_list do
12129: LD_ADDR_VAR 0 14
12133: PUSH
12134: LD_VAR 0 19
12138: PUSH
12139: FOR_IN
12140: IFFALSE 12316
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12142: LD_ADDR_VAR 0 22
12146: PUSH
12147: LD_INT 22
12149: PUSH
12150: LD_VAR 0 11
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: PPUSH
12164: LD_VAR 0 14
12168: PPUSH
12169: CALL_OW 74
12173: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12174: LD_ADDR_VAR 0 23
12178: PUSH
12179: LD_INT 22
12181: PUSH
12182: LD_VAR 0 11
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 59
12196: PUSH
12197: EMPTY
12198: LIST
12199: PUSH
12200: LD_INT 21
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: PPUSH
12238: LD_VAR 0 14
12242: PPUSH
12243: CALL_OW 74
12247: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12248: LD_VAR 0 14
12252: PPUSH
12253: LD_VAR 0 22
12257: PPUSH
12258: CALL_OW 296
12262: PUSH
12263: LD_INT 8
12265: PLUS
12266: PUSH
12267: LD_VAR 0 14
12271: PPUSH
12272: LD_VAR 0 23
12276: PPUSH
12277: CALL_OW 296
12281: LESS
12282: IFFALSE 12300
// begin ComAttackUnit ( i , target1 ) ;
12284: LD_VAR 0 14
12288: PPUSH
12289: LD_VAR 0 22
12293: PPUSH
12294: CALL_OW 115
// end else
12298: GO 12314
// begin ComAttackUnit ( i , target2 ) ;
12300: LD_VAR 0 14
12304: PPUSH
12305: LD_VAR 0 23
12309: PPUSH
12310: CALL_OW 115
// end ; end ;
12314: GO 12139
12316: POP
12317: POP
// for i in soldiersOK_list do
12318: LD_ADDR_VAR 0 14
12322: PUSH
12323: LD_VAR 0 19
12327: PUSH
12328: FOR_IN
12329: IFFALSE 12505
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12331: LD_ADDR_VAR 0 22
12335: PUSH
12336: LD_INT 22
12338: PUSH
12339: LD_VAR 0 11
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PPUSH
12348: CALL_OW 69
12352: PPUSH
12353: LD_VAR 0 14
12357: PPUSH
12358: CALL_OW 74
12362: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12363: LD_ADDR_VAR 0 23
12367: PUSH
12368: LD_INT 22
12370: PUSH
12371: LD_VAR 0 11
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 2
12382: PUSH
12383: LD_INT 59
12385: PUSH
12386: EMPTY
12387: LIST
12388: PUSH
12389: LD_INT 21
12391: PUSH
12392: LD_INT 1
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: PPUSH
12422: CALL_OW 69
12426: PPUSH
12427: LD_VAR 0 14
12431: PPUSH
12432: CALL_OW 74
12436: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12437: LD_VAR 0 14
12441: PPUSH
12442: LD_VAR 0 22
12446: PPUSH
12447: CALL_OW 296
12451: PUSH
12452: LD_INT 8
12454: PLUS
12455: PUSH
12456: LD_VAR 0 14
12460: PPUSH
12461: LD_VAR 0 23
12465: PPUSH
12466: CALL_OW 296
12470: LESS
12471: IFFALSE 12489
// begin ComAttackUnit ( i , target1 ) ;
12473: LD_VAR 0 14
12477: PPUSH
12478: LD_VAR 0 22
12482: PPUSH
12483: CALL_OW 115
// end else
12487: GO 12503
// begin ComAttackUnit ( i , target2 ) ;
12489: LD_VAR 0 14
12493: PPUSH
12494: LD_VAR 0 23
12498: PPUSH
12499: CALL_OW 115
// end ; end ;
12503: GO 12328
12505: POP
12506: POP
// until soldiersOK_list = [ ] ;
12507: LD_VAR 0 19
12511: PUSH
12512: EMPTY
12513: EQUAL
12514: IFFALSE 11892
// end ; end ; end_of_file
12516: LD_VAR 0 13
12520: RET
// every 0 0$01 do
12521: GO 12523
12523: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12524: LD_INT 22
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 2
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PUSH
12553: LD_INT 0
12555: EQUAL
12556: IFFALSE 12570
// SetClass ( JMM , 2 ) ;
12558: LD_EXP 1
12562: PPUSH
12563: LD_INT 2
12565: PPUSH
12566: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12570: LD_STRING M1
12572: PPUSH
12573: CALL_OW 337
// case difficulty of 1 :
12577: LD_OWVAR 67
12581: PUSH
12582: LD_INT 1
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 12600
12590: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12591: LD_STRING M1-1
12593: PPUSH
12594: CALL_OW 337
12598: GO 12637
12600: LD_INT 2
12602: DOUBLE
12603: EQUAL
12604: IFTRUE 12608
12606: GO 12618
12608: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12609: LD_STRING M1-2
12611: PPUSH
12612: CALL_OW 337
12616: GO 12637
12618: LD_INT 3
12620: DOUBLE
12621: EQUAL
12622: IFTRUE 12626
12624: GO 12636
12626: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12627: LD_STRING M1-3
12629: PPUSH
12630: CALL_OW 337
12634: GO 12637
12636: POP
// ChangeMissionObjectives ( M1cont ) ;
12637: LD_STRING M1cont
12639: PPUSH
12640: CALL_OW 337
// SaveForQuickRestart ;
12644: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12648: LD_INT 525
12650: PPUSH
12651: LD_INT 700
12653: PPUSH
12654: CALL_OW 12
12658: PPUSH
12659: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12663: LD_INT 5
12665: PPUSH
12666: LD_INT 82
12668: PPUSH
12669: LD_INT 38
12671: PPUSH
12672: LD_INT 10
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 56
// wait ( 0 0$14 ) ;
12682: LD_INT 490
12684: PPUSH
12685: CALL_OW 67
// firstCrateSpawn := true ;
12689: LD_ADDR_EXP 41
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// end ;
12697: END
// every 0 0$02 trigger firstCrateSpawn do
12698: LD_EXP 41
12702: IFFALSE 13065
12704: GO 12706
12706: DISABLE
// begin if IsOk ( Lisa ) then
12707: LD_EXP 2
12711: PPUSH
12712: CALL_OW 302
12716: IFFALSE 12732
// Say ( Lisa , DR0-Lisa-1 ) else
12718: LD_EXP 2
12722: PPUSH
12723: LD_STRING DR0-Lisa-1
12725: PPUSH
12726: CALL_OW 88
12730: GO 12878
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12732: LD_INT 22
12734: PUSH
12735: LD_INT 1
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 21
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 26
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: LD_INT 25
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 25
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 25
12787: PUSH
12788: LD_INT 3
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 25
12797: PUSH
12798: LD_INT 4
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 69
12822: PUSH
12823: LD_EXP 1
12827: PUSH
12828: LD_EXP 8
12832: PUSH
12833: LD_EXP 5
12837: PUSH
12838: LD_EXP 6
12842: PUSH
12843: LD_EXP 7
12847: PUSH
12848: LD_EXP 4
12852: PUSH
12853: LD_EXP 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: DIFF
12867: PPUSH
12868: LD_STRING DR0-Sol1-1
12870: PPUSH
12871: LD_STRING DR0-Sol1-1
12873: PPUSH
12874: CALL 5914 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12878: LD_INT 22
12880: PUSH
12881: LD_INT 1
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 21
12890: PUSH
12891: LD_INT 1
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 26
12900: PUSH
12901: LD_INT 1
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: LD_INT 25
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 25
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 25
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 4
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 69
12968: PUSH
12969: LD_EXP 1
12973: PUSH
12974: LD_EXP 8
12978: PUSH
12979: LD_EXP 5
12983: PUSH
12984: LD_EXP 2
12988: PUSH
12989: LD_EXP 6
12993: PUSH
12994: LD_EXP 7
12998: PUSH
12999: LD_EXP 4
13003: PUSH
13004: LD_EXP 3
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: DIFF
13019: PPUSH
13020: LD_STRING DR0-Sol2-1
13022: PPUSH
13023: LD_STRING DR0-Sol2-1
13025: PPUSH
13026: CALL 5914 0 3
// if IsOk ( Cyrus ) then
13030: LD_EXP 4
13034: PPUSH
13035: CALL_OW 302
13039: IFFALSE 13053
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13041: LD_EXP 4
13045: PPUSH
13046: LD_STRING DR0-Cyrus-1
13048: PPUSH
13049: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13053: LD_EXP 1
13057: PPUSH
13058: LD_STRING DR0-JMM-1
13060: PPUSH
13061: CALL_OW 88
// end ;
13065: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13066: LD_EXP 5
13070: PPUSH
13071: CALL_OW 302
13075: PUSH
13076: LD_INT 22
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 25
13088: PUSH
13089: LD_INT 16
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: LD_INT 0
13107: GREATER
13108: AND
13109: PUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 463
13117: NOT
13118: AND
13119: IFFALSE 13397
13121: GO 13123
13123: DISABLE
// begin DialogueOn ;
13124: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13128: LD_EXP 5
13132: PPUSH
13133: LD_STRING D10-Frank-1
13135: PPUSH
13136: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13140: LD_INT 22
13142: PUSH
13143: LD_INT 1
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 21
13152: PUSH
13153: LD_INT 1
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 25
13165: PUSH
13166: LD_INT 1
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 25
13175: PUSH
13176: LD_INT 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 25
13185: PUSH
13186: LD_INT 3
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 25
13195: PUSH
13196: LD_INT 4
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: PUSH
13220: LD_EXP 1
13224: PUSH
13225: LD_EXP 5
13229: PUSH
13230: LD_EXP 2
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: DIFF
13240: PPUSH
13241: LD_STRING D10-Sol1-1
13243: PPUSH
13244: LD_STRING D10-FSol1-1
13246: PPUSH
13247: CALL 5914 0 3
// Say ( Frank , D10-Frank-2 ) ;
13251: LD_EXP 5
13255: PPUSH
13256: LD_STRING D10-Frank-2
13258: PPUSH
13259: CALL_OW 88
// if IsOK ( Lisa ) then
13263: LD_EXP 2
13267: PPUSH
13268: CALL_OW 302
13272: IFFALSE 13288
// begin Say ( Lisa , D10-Lisa-2 ) ;
13274: LD_EXP 2
13278: PPUSH
13279: LD_STRING D10-Lisa-2
13281: PPUSH
13282: CALL_OW 88
// end else
13286: GO 13393
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13288: LD_INT 22
13290: PUSH
13291: LD_INT 1
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 25
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 25
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 25
13333: PUSH
13334: LD_INT 3
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 25
13343: PUSH
13344: LD_INT 4
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 69
13367: PUSH
13368: LD_EXP 1
13372: PUSH
13373: LD_EXP 5
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: DIFF
13382: PPUSH
13383: LD_STRING D10-Sol1-2
13385: PPUSH
13386: LD_STRING D10-FSol1-2
13388: PPUSH
13389: CALL 5914 0 3
// end ; DialogueOff ;
13393: CALL_OW 7
// end ;
13397: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 463
13405: NOT
13406: IFFALSE 13669
13408: GO 13410
13410: DISABLE
// begin HarrisonSupport ;
13411: CALL 2406 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13415: LD_EXP 17
13419: PPUSH
13420: CALL_OW 310
13424: PPUSH
13425: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13429: LD_EXP 17
13433: PPUSH
13434: LD_STRING DEng-Eng1-1
13436: PPUSH
13437: CALL_OW 88
// wait ( 1 1$0 ) ;
13441: LD_INT 2100
13443: PPUSH
13444: CALL_OW 67
// DialogueOn ;
13448: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13452: LD_EXP 14
13456: PPUSH
13457: LD_STRING DRem-Har-1
13459: PPUSH
13460: CALL_OW 94
// if contactWithRussian = 1 then
13464: LD_EXP 22
13468: PUSH
13469: LD_INT 1
13471: EQUAL
13472: IFFALSE 13488
// begin Say ( JMM , DRem-JMM-1 ) ;
13474: LD_EXP 1
13478: PPUSH
13479: LD_STRING DRem-JMM-1
13481: PPUSH
13482: CALL_OW 88
// end else
13486: GO 13500
// begin Say ( JMM , DRem-JMM-1a ) ;
13488: LD_EXP 1
13492: PPUSH
13493: LD_STRING DRem-JMM-1a
13495: PPUSH
13496: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13500: LD_EXP 14
13504: PPUSH
13505: LD_STRING DRem-Har-2
13507: PPUSH
13508: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13512: LD_STRING DenisInDelta
13514: PPUSH
13515: LD_INT 0
13517: PPUSH
13518: CALL_OW 30
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: IFFALSE 13542
// begin Say ( JMM , DRem-JMM-2 ) ;
13528: LD_EXP 1
13532: PPUSH
13533: LD_STRING DRem-JMM-2
13535: PPUSH
13536: CALL_OW 88
// end else
13540: GO 13554
// begin Say ( JMM , DRem-JMM-2a ) ;
13542: LD_EXP 1
13546: PPUSH
13547: LD_STRING DRem-JMM-2a
13549: PPUSH
13550: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13554: LD_EXP 14
13558: PPUSH
13559: LD_STRING DRem-Har-3
13561: PPUSH
13562: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13566: LD_EXP 1
13570: PPUSH
13571: LD_STRING DRem-JMM-3
13573: PPUSH
13574: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13578: LD_EXP 14
13582: PPUSH
13583: LD_STRING DRem-Har-4
13585: PPUSH
13586: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13590: LD_STRING DenisInDelta
13592: PPUSH
13593: LD_INT 0
13595: PPUSH
13596: CALL_OW 30
13600: PUSH
13601: LD_INT 1
13603: EQUAL
13604: IFFALSE 13632
// begin Say ( JMM , DRem-JMM-4 ) ;
13606: LD_EXP 1
13610: PPUSH
13611: LD_STRING DRem-JMM-4
13613: PPUSH
13614: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13618: LD_EXP 14
13622: PPUSH
13623: LD_STRING DRem-Har-5
13625: PPUSH
13626: CALL_OW 94
// end else
13630: GO 13665
// begin SetRestrict ( 36 , 1 , true ) ;
13632: LD_INT 36
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13645: LD_INT 15
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: LD_INT 1
13653: PPUSH
13654: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13658: LD_STRING MR
13660: PPUSH
13661: CALL_OW 337
// end ; DialogueOff ;
13665: CALL_OW 7
// end ;
13669: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13670: LD_STRING DenisInDelta
13672: PPUSH
13673: LD_INT 0
13675: PPUSH
13676: CALL_OW 30
13680: PUSH
13681: LD_INT 1
13683: EQUAL
13684: PUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 463
13692: NOT
13693: AND
13694: IFFALSE 13927
13696: GO 13698
13698: DISABLE
13699: LD_INT 0
13701: PPUSH
// begin PrepareDenis ;
13702: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13706: LD_EXP 9
13710: PPUSH
13711: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13715: LD_ADDR_VAR 0 1
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 69
13734: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13735: LD_EXP 9
13739: PPUSH
13740: LD_VAR 0 1
13744: PPUSH
13745: LD_EXP 9
13749: PPUSH
13750: CALL_OW 74
13754: PPUSH
13755: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13759: LD_INT 35
13761: PPUSH
13762: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13766: LD_INT 22
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 91
13778: PUSH
13779: LD_EXP 9
13783: PUSH
13784: LD_INT 10
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL_OW 69
13800: IFFALSE 13759
// SetSide ( Denis , 1 ) ;
13802: LD_EXP 9
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 235
// DialogueOn ;
13814: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13818: LD_EXP 9
13822: PPUSH
13823: LD_STRING DDen-Den-1
13825: PPUSH
13826: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13830: LD_EXP 1
13834: PPUSH
13835: LD_STRING DDen-JMM-1
13837: PPUSH
13838: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13842: LD_EXP 9
13846: PPUSH
13847: LD_STRING DDen-Den-2
13849: PPUSH
13850: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13854: LD_EXP 1
13858: PPUSH
13859: LD_STRING DDen-JMM-2
13861: PPUSH
13862: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13866: LD_EXP 9
13870: PPUSH
13871: LD_STRING DDen-Den-3
13873: PPUSH
13874: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13878: LD_EXP 1
13882: PPUSH
13883: LD_STRING DDen-JMM-3
13885: PPUSH
13886: CALL_OW 88
// DialogueOff ;
13890: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13894: LD_INT 36
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13907: LD_INT 15
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13920: LD_STRING MR
13922: PPUSH
13923: CALL_OW 337
// end ;
13927: PPOPN 1
13929: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13930: CALL 13985 0 0
13934: PUSH
13935: LD_EXP 9
13939: PPUSH
13940: CALL_OW 302
13944: AND
13945: PUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 463
13953: NOT
13954: AND
13955: IFFALSE 13984
13957: GO 13959
13959: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13960: LD_EXP 9
13964: PPUSH
13965: LD_STRING DR1-Den-1
13967: PPUSH
13968: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13972: LD_EXP 1
13976: PPUSH
13977: LD_STRING DR1-JMM-1
13979: PPUSH
13980: CALL_OW 88
// end ;
13984: END
// function CheckOptoLab ; var i ; begin
13985: LD_INT 0
13987: PPUSH
13988: PPUSH
// result = false ;
13989: LD_ADDR_VAR 0 1
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13997: LD_ADDR_VAR 0 2
14001: PUSH
14002: LD_INT 22
14004: PUSH
14005: LD_INT 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 7
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 30
14027: PUSH
14028: LD_INT 8
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14102
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14052: LD_VAR 0 2
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 268
14064: PUSH
14065: LD_INT 15
14067: EQUAL
14068: PUSH
14069: LD_VAR 0 2
14073: PPUSH
14074: LD_INT 2
14076: PPUSH
14077: CALL_OW 268
14081: PUSH
14082: LD_INT 15
14084: EQUAL
14085: OR
14086: IFFALSE 14098
// begin result = true ;
14088: LD_ADDR_VAR 0 1
14092: PUSH
14093: LD_INT 1
14095: ST_TO_ADDR
// break ;
14096: GO 14102
// end ; break ;
14098: GO 14102
// end ;
14100: GO 14049
14102: POP
14103: POP
// end ;
14104: LD_VAR 0 1
14108: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14109: LD_INT 15
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 321
14119: PUSH
14120: LD_INT 2
14122: EQUAL
14123: PUSH
14124: LD_EXP 9
14128: PPUSH
14129: CALL_OW 302
14133: AND
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: CALL_OW 463
14142: NOT
14143: AND
14144: IFFALSE 14376
14146: GO 14148
14148: DISABLE
// begin DialogueOn ;
14149: CALL_OW 6
// if IsOK ( Denis ) then
14153: LD_EXP 9
14157: PPUSH
14158: CALL_OW 302
14162: IFFALSE 14178
// begin Say ( Denis , DR2-Den-1 ) ;
14164: LD_EXP 9
14168: PPUSH
14169: LD_STRING DR2-Den-1
14171: PPUSH
14172: CALL_OW 88
// end else
14176: GO 14237
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14178: LD_INT 22
14180: PUSH
14181: LD_INT 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 25
14200: PUSH
14201: LD_INT 4
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: PUSH
14218: LD_EXP 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: DIFF
14226: PPUSH
14227: LD_STRING DR2-Sci1-1
14229: PPUSH
14230: LD_STRING DR2-FSci1-1
14232: PPUSH
14233: CALL 5914 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14237: LD_EXP 1
14241: PPUSH
14242: LD_STRING DR2-JMM-1
14244: PPUSH
14245: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14249: LD_INT 22
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 2
14271: PUSH
14272: LD_INT 25
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 25
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 25
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: PUSH
14329: LD_EXP 1
14333: PUSH
14334: LD_EXP 9
14338: PUSH
14339: LD_EXP 8
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: DIFF
14349: PPUSH
14350: LD_STRING DR2-Sol1-1
14352: PPUSH
14353: LD_STRING DR2-Sol1-11
14355: PPUSH
14356: CALL 5914 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14360: LD_EXP 1
14364: PPUSH
14365: LD_STRING DR2-JMM-2
14367: PPUSH
14368: CALL_OW 88
// DialogueOff ;
14372: CALL_OW 7
// end ;
14376: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14377: LD_INT 22
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 30
14389: PUSH
14390: LD_INT 36
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PPUSH
14401: CALL_OW 69
14405: PUSH
14406: LD_INT 0
14408: EQUAL
14409: PUSH
14410: LD_INT 22
14412: PUSH
14413: LD_INT 1
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 33
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PUSH
14450: LD_INT 0
14452: GREATER
14453: AND
14454: PUSH
14455: LD_EXP 23
14459: PUSH
14460: LD_INT 0
14462: EQUAL
14463: AND
14464: PUSH
14465: LD_INT 1
14467: PPUSH
14468: CALL_OW 463
14472: NOT
14473: AND
14474: IFFALSE 14600
14476: GO 14478
14478: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14479: LD_INT 22
14481: PUSH
14482: LD_INT 1
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 21
14491: PUSH
14492: LD_INT 1
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 25
14501: PUSH
14502: LD_INT 3
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: LIST
14513: PPUSH
14514: CALL_OW 69
14518: PUSH
14519: LD_EXP 1
14523: PUSH
14524: LD_EXP 6
14528: PUSH
14529: LD_EXP 7
14533: PUSH
14534: LD_EXP 9
14538: PUSH
14539: LD_EXP 15
14543: PUSH
14544: LD_EXP 3
14548: PUSH
14549: LD_EXP 4
14553: PUSH
14554: LD_EXP 2
14558: PUSH
14559: LD_EXP 5
14563: PUSH
14564: LD_EXP 8
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: DIFF
14581: PPUSH
14582: LD_STRING D3a-Mech1-1
14584: PPUSH
14585: LD_STRING D3a-Mech1-1
14587: PPUSH
14588: CALL 5914 0 3
// firstTower = 2 ;
14592: LD_ADDR_EXP 23
14596: PUSH
14597: LD_INT 2
14599: ST_TO_ADDR
// end ;
14600: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14601: LD_INT 22
14603: PUSH
14604: LD_INT 3
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 3
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 69
14629: PUSH
14630: LD_INT 0
14632: EQUAL
14633: IFFALSE 14748
14635: GO 14637
14637: DISABLE
14638: LD_INT 0
14640: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14641: LD_ADDR_VAR 0 1
14645: PUSH
14646: LD_INT 22
14648: PUSH
14649: LD_INT 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 1
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 2
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 25
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 25
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 4
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14746
// AddExperience ( i , 1 , 10000 ) ;
14729: LD_VAR 0 1
14733: PPUSH
14734: LD_INT 1
14736: PPUSH
14737: LD_INT 10000
14739: PPUSH
14740: CALL_OW 492
14744: GO 14726
14746: POP
14747: POP
// end ;
14748: PPOPN 1
14750: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14751: LD_INT 22
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 30
14763: PUSH
14764: LD_INT 36
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PPUSH
14775: CALL_OW 69
14779: PUSH
14780: LD_INT 0
14782: GREATER
14783: PUSH
14784: LD_INT 22
14786: PUSH
14787: LD_INT 1
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 21
14796: PUSH
14797: LD_INT 2
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 33
14806: PUSH
14807: LD_INT 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 69
14823: PUSH
14824: LD_INT 0
14826: GREATER
14827: AND
14828: PUSH
14829: CALL 15421 0 0
14833: AND
14834: PUSH
14835: LD_INT 1
14837: PPUSH
14838: CALL_OW 463
14842: NOT
14843: AND
14844: IFFALSE 15418
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14856: LD_ADDR_VAR 0 3
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 30
14873: PUSH
14874: LD_INT 36
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PPUSH
14885: CALL_OW 69
14889: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14890: LD_ADDR_VAR 0 4
14894: PUSH
14895: LD_INT 22
14897: PUSH
14898: LD_INT 1
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 2
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 33
14917: PUSH
14918: LD_INT 2
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: EMPTY
14941: ST_TO_ADDR
// for i in tmpControlTowers do
14942: LD_ADDR_VAR 0 1
14946: PUSH
14947: LD_VAR 0 3
14951: PUSH
14952: FOR_IN
14953: IFFALSE 15416
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14955: LD_EXP 1
14959: PPUSH
14960: CALL_OW 310
14964: PUSH
14965: LD_VAR 0 1
14969: EQUAL
14970: PUSH
14971: LD_EXP 1
14975: PPUSH
14976: CALL_OW 257
14980: PUSH
14981: LD_INT 3
14983: EQUAL
14984: AND
14985: IFFALSE 15115
// begin InGameOn ;
14987: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14991: LD_VAR 0 4
14995: PUSH
14996: LD_INT 1
14998: ARRAY
14999: PPUSH
15000: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15004: LD_EXP 1
15008: PPUSH
15009: LD_STRING D4a-JMM-1
15011: PPUSH
15012: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15016: LD_VAR 0 4
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: LD_EXP 1
15029: PPUSH
15030: CALL_OW 53
// wait ( 0 0$1 ) ;
15034: LD_INT 35
15036: PPUSH
15037: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15041: LD_VAR 0 4
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: LD_VAR 0 4
15054: PUSH
15055: LD_INT 1
15057: ARRAY
15058: PPUSH
15059: CALL_OW 250
15063: PUSH
15064: LD_INT 3
15066: PLUS
15067: PPUSH
15068: LD_VAR 0 4
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: PPUSH
15077: CALL_OW 251
15081: PUSH
15082: LD_INT 2
15084: MINUS
15085: PPUSH
15086: CALL_OW 111
// wait ( 0 0$2 ) ;
15090: LD_INT 70
15092: PPUSH
15093: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15097: LD_EXP 1
15101: PPUSH
15102: LD_STRING D4b-JMM-1
15104: PPUSH
15105: CALL_OW 88
// InGameOff ;
15109: CALL_OW 9
// end else
15113: GO 15414
// begin InGameOn ;
15115: CALL_OW 8
// for j in UnitsInside ( i ) do
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 313
15133: PUSH
15134: FOR_IN
15135: IFFALSE 15170
// if GetClass ( j ) = 3 then
15137: LD_VAR 0 2
15141: PPUSH
15142: CALL_OW 257
15146: PUSH
15147: LD_INT 3
15149: EQUAL
15150: IFFALSE 15168
// tmpMechanicInside = tmpMechanicInside ^ j ;
15152: LD_ADDR_VAR 0 5
15156: PUSH
15157: LD_VAR 0 5
15161: PUSH
15162: LD_VAR 0 2
15166: ADD
15167: ST_TO_ADDR
15168: GO 15134
15170: POP
15171: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15172: LD_VAR 0 5
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: CALL_OW 258
15185: PUSH
15186: LD_INT 1
15188: EQUAL
15189: IFFALSE 15207
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15191: LD_VAR 0 5
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PPUSH
15200: LD_STRING D4a-Mech1-1
15202: PPUSH
15203: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15207: LD_VAR 0 5
15211: PUSH
15212: LD_INT 1
15214: ARRAY
15215: PPUSH
15216: CALL_OW 258
15220: PUSH
15221: LD_INT 2
15223: EQUAL
15224: IFFALSE 15242
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15226: LD_VAR 0 5
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: PPUSH
15235: LD_STRING D4a-FMech1-1
15237: PPUSH
15238: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15242: LD_VAR 0 4
15246: PUSH
15247: LD_INT 1
15249: ARRAY
15250: PPUSH
15251: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15255: LD_VAR 0 4
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: LD_VAR 0 5
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: PPUSH
15273: CALL_OW 53
// wait ( 0 0$1 ) ;
15277: LD_INT 35
15279: PPUSH
15280: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15284: LD_VAR 0 4
15288: PUSH
15289: LD_INT 1
15291: ARRAY
15292: PPUSH
15293: LD_VAR 0 4
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: CALL_OW 250
15306: PUSH
15307: LD_INT 3
15309: PLUS
15310: PPUSH
15311: LD_VAR 0 4
15315: PUSH
15316: LD_INT 1
15318: ARRAY
15319: PPUSH
15320: CALL_OW 251
15324: PUSH
15325: LD_INT 2
15327: MINUS
15328: PPUSH
15329: CALL_OW 111
// wait ( 0 0$2 ) ;
15333: LD_INT 70
15335: PPUSH
15336: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15340: LD_VAR 0 5
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PPUSH
15349: CALL_OW 258
15353: PUSH
15354: LD_INT 1
15356: EQUAL
15357: IFFALSE 15375
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15359: LD_VAR 0 5
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: PPUSH
15368: LD_STRING D4b-Mech1-1
15370: PPUSH
15371: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15375: LD_VAR 0 5
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: CALL_OW 258
15388: PUSH
15389: LD_INT 2
15391: EQUAL
15392: IFFALSE 15410
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15394: LD_VAR 0 5
15398: PUSH
15399: LD_INT 1
15401: ARRAY
15402: PPUSH
15403: LD_STRING D4b-FMech1-1
15405: PPUSH
15406: CALL_OW 88
// InGameOff ;
15410: CALL_OW 9
// end ; end ;
15414: GO 14952
15416: POP
15417: POP
// end ;
15418: PPOPN 5
15420: END
// function CheckMehInside ; var i , j ; begin
15421: LD_INT 0
15423: PPUSH
15424: PPUSH
15425: PPUSH
// result = false ;
15426: LD_ADDR_VAR 0 1
15430: PUSH
15431: LD_INT 0
15433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 30
15451: PUSH
15452: LD_INT 36
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PPUSH
15463: CALL_OW 69
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15520
// begin for j in UnitsInside ( i ) do
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 313
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15516
// begin if GetClass ( j ) = 3 then
15489: LD_VAR 0 3
15493: PPUSH
15494: CALL_OW 257
15498: PUSH
15499: LD_INT 3
15501: EQUAL
15502: IFFALSE 15514
// begin result = true ;
15504: LD_ADDR_VAR 0 1
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// break ;
15512: GO 15516
// end ; end ;
15514: GO 15486
15516: POP
15517: POP
// end ;
15518: GO 15468
15520: POP
15521: POP
// end ;
15522: LD_VAR 0 1
15526: RET
// every 25 25$0 do
15527: GO 15529
15529: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15530: LD_INT 35
15532: PPUSH
15533: CALL_OW 67
// until not InBattle ( 1 ) ;
15537: LD_INT 1
15539: PPUSH
15540: CALL_OW 463
15544: NOT
15545: IFFALSE 15530
// PrepareKurt ;
15547: CALL 19012 0 0
// end ;
15551: END
// every 35 35$0 do
15552: GO 15554
15554: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15555: LD_INT 35
15557: PPUSH
15558: CALL_OW 67
// until not InBattle ( 1 ) ;
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 463
15569: NOT
15570: IFFALSE 15555
// PrepareJoan ;
15572: CALL 2924 0 0
// wait ( 1 1$0 ) ;
15576: LD_INT 2100
15578: PPUSH
15579: CALL_OW 67
// if IsOK ( Lisa ) then
15583: LD_EXP 2
15587: PPUSH
15588: CALL_OW 302
15592: IFFALSE 15722
// begin DialogueOn ;
15594: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15598: LD_EXP 2
15602: PPUSH
15603: LD_STRING D7-Lisa-1
15605: PPUSH
15606: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15610: LD_EXP 1
15614: PPUSH
15615: LD_STRING D7-JMM-1
15617: PPUSH
15618: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15622: LD_EXP 2
15626: PPUSH
15627: LD_STRING D7-Lisa-2
15629: PPUSH
15630: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15634: LD_EXP 1
15638: PPUSH
15639: LD_STRING D7-JMM-2
15641: PPUSH
15642: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15646: LD_EXP 2
15650: PPUSH
15651: LD_STRING D7-Lisa-3
15653: PPUSH
15654: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15658: LD_EXP 1
15662: PPUSH
15663: LD_STRING D7-JMM-3
15665: PPUSH
15666: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15670: LD_EXP 2
15674: PPUSH
15675: LD_STRING D7-Lisa-4
15677: PPUSH
15678: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15682: LD_EXP 1
15686: PPUSH
15687: LD_STRING D7-JMM-4
15689: PPUSH
15690: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15694: LD_EXP 1
15698: PPUSH
15699: LD_STRING D7-JMM-4a
15701: PPUSH
15702: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15706: LD_EXP 2
15710: PPUSH
15711: LD_STRING D7-Lisa-5
15713: PPUSH
15714: CALL_OW 88
// DialogueOff ;
15718: CALL_OW 7
// end ; end ;
15722: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15723: LD_EXP 13
15727: PUSH
15728: LD_INT 22
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 91
15740: PUSH
15741: LD_EXP 13
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 2
15756: PUSH
15757: LD_INT 25
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 25
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 25
15779: PUSH
15780: LD_INT 3
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 25
15789: PUSH
15790: LD_INT 4
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: PUSH
15814: LD_INT 1
15816: GREATER
15817: AND
15818: IFFALSE 15835
15820: GO 15822
15822: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15823: LD_EXP 13
15827: PPUSH
15828: LD_STRING D5-Sol1-1
15830: PPUSH
15831: CALL_OW 88
// end ;
15835: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15836: LD_INT 22
15838: PUSH
15839: LD_INT 1
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 33
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 69
15864: PUSH
15865: LD_INT 2
15867: GREATEREQUAL
15868: IFFALSE 15888
15870: GO 15872
15872: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15873: LD_STRING MRa
15875: PPUSH
15876: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15880: LD_ADDR_EXP 28
15884: PUSH
15885: LD_INT 1
15887: ST_TO_ADDR
// end ;
15888: END
// every 0 0$10 do var i , last ;
15889: GO 15891
15891: DISABLE
15892: LD_INT 0
15894: PPUSH
15895: PPUSH
// begin last := 7 ;
15896: LD_ADDR_VAR 0 2
15900: PUSH
15901: LD_INT 7
15903: ST_TO_ADDR
// for i = 1 to last do
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: DOUBLE
15910: LD_INT 1
15912: DEC
15913: ST_TO_ADDR
15914: LD_VAR 0 2
15918: PUSH
15919: FOR_TO
15920: IFFALSE 15948
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15922: LD_INT 6300
15924: PPUSH
15925: LD_INT 14700
15927: PPUSH
15928: CALL_OW 12
15932: PPUSH
15933: CALL_OW 67
// PrepareRandoms ( i ) ;
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL 3960 0 1
// end ;
15946: GO 15919
15948: POP
15949: POP
// end ;
15950: PPOPN 2
15952: END
// every 5 5$20 do
15953: GO 15955
15955: DISABLE
// begin DialogueOn ;
15956: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15960: LD_EXP 10
15964: PPUSH
15965: LD_STRING D12a-Sci-1
15967: PPUSH
15968: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15972: LD_EXP 1
15976: PPUSH
15977: LD_STRING D12a-JMM-1
15979: PPUSH
15980: CALL_OW 88
// DialogueOff ;
15984: CALL_OW 7
// cratesStatus = 1 ;
15988: LD_ADDR_EXP 38
15992: PUSH
15993: LD_INT 1
15995: ST_TO_ADDR
// end ;
15996: END
// every 13 13$0 do
15997: GO 15999
15999: DISABLE
// begin DialogueOn ;
16000: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16004: LD_EXP 10
16008: PPUSH
16009: LD_STRING D12b-Sci-1
16011: PPUSH
16012: CALL_OW 94
// DialogueOff ;
16016: CALL_OW 7
// cratesStatus = 2 ;
16020: LD_ADDR_EXP 38
16024: PUSH
16025: LD_INT 2
16027: ST_TO_ADDR
// end ;
16028: END
// every 32 32$0 do
16029: GO 16031
16031: DISABLE
// begin DialogueOn ;
16032: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16036: LD_EXP 10
16040: PPUSH
16041: LD_STRING D12c-Sci-1
16043: PPUSH
16044: CALL_OW 94
// DialogueOff ;
16048: CALL_OW 7
// wait ( 3 3$0 ) ;
16052: LD_INT 6300
16054: PPUSH
16055: CALL_OW 67
// DialogueOn ;
16059: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16063: LD_EXP 10
16067: PPUSH
16068: LD_STRING D12d-Sci-1
16070: PPUSH
16071: CALL_OW 94
// DialogueOff ;
16075: CALL_OW 7
// cratesStatus = 1 ;
16079: LD_ADDR_EXP 38
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// end ;
16087: END
// every 42 42$0 do
16088: GO 16090
16090: DISABLE
// begin DialogueOn ;
16091: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16095: LD_EXP 10
16099: PPUSH
16100: LD_STRING D12e-Sci-1
16102: PPUSH
16103: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16107: LD_EXP 1
16111: PPUSH
16112: LD_STRING D12e-JMM-1
16114: PPUSH
16115: CALL_OW 88
// DialogueOff ;
16119: CALL_OW 7
// cratesStatus = 2 ;
16123: LD_ADDR_EXP 38
16127: PUSH
16128: LD_INT 2
16130: ST_TO_ADDR
// end ;
16131: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16132: LD_INT 22
16134: PUSH
16135: LD_INT 6
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 21
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 34
16154: PUSH
16155: LD_INT 51
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: PUSH
16172: LD_INT 0
16174: GREATER
16175: IFFALSE 16258
16177: GO 16179
16179: DISABLE
16180: LD_INT 0
16182: PPUSH
// begin enable ;
16183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16184: LD_ADDR_VAR 0 1
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 6
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: LD_INT 21
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 21
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PUSH
16236: FOR_IN
16237: IFFALSE 16256
// ComAgressiveMove ( i , 138 , 168 ) ;
16239: LD_VAR 0 1
16243: PPUSH
16244: LD_INT 138
16246: PPUSH
16247: LD_INT 168
16249: PPUSH
16250: CALL_OW 114
16254: GO 16236
16256: POP
16257: POP
// end ;
16258: PPOPN 1
16260: END
// every 0 0$1 do var i ;
16261: GO 16263
16263: DISABLE
16264: LD_INT 0
16266: PPUSH
// begin enable ;
16267: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16268: LD_ADDR_VAR 0 1
16272: PUSH
16273: LD_INT 4
16275: PPUSH
16276: LD_INT 2
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_INT 3
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 22
16291: PUSH
16292: LD_INT 6
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PUSH
16304: EMPTY
16305: LIST
16306: PPUSH
16307: CALL_OW 70
16311: PUSH
16312: FOR_IN
16313: IFFALSE 16377
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16315: LD_INT 4
16317: PPUSH
16318: LD_INT 22
16320: PUSH
16321: LD_INT 6
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 34
16330: PUSH
16331: LD_INT 51
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PPUSH
16342: CALL_OW 70
16346: PUSH
16347: LD_INT 0
16349: GREATER
16350: IFFALSE 16366
// sendedConvoys = sendedConvoys + 1 ;
16352: LD_ADDR_EXP 39
16356: PUSH
16357: LD_EXP 39
16361: PUSH
16362: LD_INT 1
16364: PLUS
16365: ST_TO_ADDR
// RemoveUnit ( i ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 64
// end ;
16375: GO 16312
16377: POP
16378: POP
// end ; end_of_file
16379: PPOPN 1
16381: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16382: LD_VAR 0 1
16386: PUSH
16387: LD_INT 1
16389: EQUAL
16390: PUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 3
16398: EQUAL
16399: AND
16400: IFFALSE 16410
// contactWithRussian = 1 ;
16402: LD_ADDR_EXP 22
16406: PUSH
16407: LD_INT 1
16409: ST_TO_ADDR
// end ;
16410: PPOPN 2
16412: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 266
16422: PUSH
16423: LD_INT 36
16425: EQUAL
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 255
16436: PUSH
16437: LD_INT 1
16439: EQUAL
16440: AND
16441: PUSH
16442: LD_INT 22
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 33
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: PUSH
16482: LD_INT 0
16484: EQUAL
16485: AND
16486: PUSH
16487: LD_EXP 23
16491: PUSH
16492: LD_INT 0
16494: EQUAL
16495: AND
16496: IFFALSE 16576
// begin firstTower = 1 ;
16498: LD_ADDR_EXP 23
16502: PUSH
16503: LD_INT 1
16505: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16506: LD_INT 22
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 21
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 25
16528: PUSH
16529: LD_INT 3
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 26
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: PPUSH
16552: CALL_OW 69
16556: PUSH
16557: LD_EXP 1
16561: PUSH
16562: EMPTY
16563: LIST
16564: DIFF
16565: PPUSH
16566: LD_STRING D3b-Mech1-1
16568: PPUSH
16569: LD_STRING D3b-Mech1-1
16571: PPUSH
16572: CALL 5914 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 266
16585: PUSH
16586: LD_INT 0
16588: EQUAL
16589: PUSH
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 255
16599: PUSH
16600: LD_INT 1
16602: EQUAL
16603: AND
16604: IFFALSE 16618
// SetBName ( building , theta ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_STRING theta
16613: PPUSH
16614: CALL_OW 500
// if GetSide ( building ) = 3 then
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 255
16627: PUSH
16628: LD_INT 3
16630: EQUAL
16631: IFFALSE 16705
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16633: LD_ADDR_EXP 31
16637: PUSH
16638: LD_EXP 31
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: CALL_OW 3
16650: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16651: LD_ADDR_EXP 31
16655: PUSH
16656: LD_EXP 31
16660: PPUSH
16661: LD_INT 1
16663: PPUSH
16664: CALL_OW 3
16668: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16669: LD_ADDR_EXP 31
16673: PUSH
16674: LD_EXP 31
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 3
16686: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16687: LD_ADDR_EXP 31
16691: PUSH
16692: LD_EXP 31
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 3
16704: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 255
16714: PUSH
16715: LD_INT 3
16717: EQUAL
16718: PUSH
16719: LD_VAR 0 1
16723: PPUSH
16724: CALL_OW 266
16728: PUSH
16729: LD_INT 0
16731: EQUAL
16732: PUSH
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: OR
16747: PUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 266
16757: PUSH
16758: LD_INT 4
16760: EQUAL
16761: OR
16762: PUSH
16763: EMPTY
16764: LIST
16765: AND
16766: IFFALSE 16777
// ComUpgrade ( building ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16777: LD_VAR 0 1
16781: PPUSH
16782: CALL_OW 255
16786: PUSH
16787: LD_INT 3
16789: EQUAL
16790: PUSH
16791: LD_VAR 0 1
16795: PPUSH
16796: CALL_OW 266
16800: PUSH
16801: LD_INT 32
16803: EQUAL
16804: AND
16805: IFFALSE 16846
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16807: LD_VAR 0 1
16811: PPUSH
16812: LD_INT 42
16814: PUSH
16815: LD_INT 43
16817: PUSH
16818: LD_INT 44
16820: PUSH
16821: LD_INT 46
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 1
16832: PPUSH
16833: LD_INT 4
16835: PPUSH
16836: CALL_OW 12
16840: ARRAY
16841: PPUSH
16842: CALL_OW 208
// end ; end ;
16846: PPOPN 1
16848: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
16849: LD_VAR 0 1
16853: PUSH
16854: LD_EXP 1
16858: EQUAL
16859: IFFALSE 16868
// YouLost ( JMM ) ;
16861: LD_STRING JMM
16863: PPUSH
16864: CALL_OW 104
// if unit = Joan then
16868: LD_VAR 0 1
16872: PUSH
16873: LD_EXP 15
16877: EQUAL
16878: IFFALSE 16888
// JoanStatus = 0 ;
16880: LD_ADDR_EXP 16
16884: PUSH
16885: LD_INT 0
16887: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 255
16897: PUSH
16898: LD_INT 1
16900: EQUAL
16901: PUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: CALL_OW 247
16911: PUSH
16912: LD_INT 1
16914: EQUAL
16915: AND
16916: IFFALSE 16992
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 257
16927: PUSH
16928: LD_INT 1
16930: EQUAL
16931: PUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 257
16941: PUSH
16942: LD_INT 2
16944: EQUAL
16945: OR
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 257
16956: PUSH
16957: LD_INT 3
16959: EQUAL
16960: OR
16961: PUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 257
16971: PUSH
16972: LD_INT 4
16974: EQUAL
16975: OR
16976: IFFALSE 16992
// unitLost = unitLost + 1 ;
16978: LD_ADDR_EXP 30
16982: PUSH
16983: LD_EXP 30
16987: PUSH
16988: LD_INT 1
16990: PLUS
16991: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16992: LD_VAR 0 1
16996: PPUSH
16997: CALL_OW 255
17001: PUSH
17002: LD_INT 3
17004: EQUAL
17005: PUSH
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL_OW 247
17015: PUSH
17016: LD_INT 3
17018: EQUAL
17019: AND
17020: IFFALSE 17712
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 266
17031: PUSH
17032: LD_INT 31
17034: EQUAL
17035: PUSH
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 266
17045: PUSH
17046: LD_INT 32
17048: EQUAL
17049: OR
17050: PUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL_OW 266
17060: PUSH
17061: LD_INT 36
17063: EQUAL
17064: OR
17065: PUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 266
17075: PUSH
17076: LD_INT 0
17078: EQUAL
17079: OR
17080: PUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: CALL_OW 266
17090: PUSH
17091: LD_INT 24
17093: EQUAL
17094: OR
17095: PUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: CALL_OW 266
17105: PUSH
17106: LD_INT 17
17108: EQUAL
17109: OR
17110: PUSH
17111: LD_VAR 0 1
17115: PPUSH
17116: CALL_OW 266
17120: PUSH
17121: LD_INT 25
17123: EQUAL
17124: OR
17125: PUSH
17126: LD_VAR 0 1
17130: PPUSH
17131: CALL_OW 266
17135: PUSH
17136: LD_INT 19
17138: EQUAL
17139: OR
17140: PUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 266
17150: PUSH
17151: LD_INT 20
17153: EQUAL
17154: OR
17155: PUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 266
17165: PUSH
17166: LD_INT 18
17168: EQUAL
17169: OR
17170: PUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 266
17180: PUSH
17181: LD_INT 21
17183: EQUAL
17184: OR
17185: PUSH
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 266
17195: PUSH
17196: LD_INT 23
17198: EQUAL
17199: OR
17200: PUSH
17201: LD_VAR 0 1
17205: PPUSH
17206: CALL_OW 266
17210: PUSH
17211: LD_INT 16
17213: EQUAL
17214: OR
17215: PUSH
17216: LD_VAR 0 1
17220: PPUSH
17221: CALL_OW 266
17225: PUSH
17226: LD_INT 6
17228: EQUAL
17229: OR
17230: PUSH
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL_OW 266
17240: PUSH
17241: LD_INT 29
17243: EQUAL
17244: OR
17245: PUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: CALL_OW 266
17255: PUSH
17256: LD_INT 26
17258: EQUAL
17259: OR
17260: PUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 266
17270: PUSH
17271: LD_INT 30
17273: EQUAL
17274: OR
17275: PUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 266
17285: PUSH
17286: LD_INT 28
17288: EQUAL
17289: OR
17290: PUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: CALL_OW 266
17300: PUSH
17301: LD_INT 27
17303: EQUAL
17304: OR
17305: PUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 266
17315: PUSH
17316: LD_INT 33
17318: EQUAL
17319: OR
17320: PUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 266
17330: PUSH
17331: LD_INT 2
17333: EQUAL
17334: OR
17335: PUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 266
17345: PUSH
17346: LD_INT 4
17348: EQUAL
17349: OR
17350: IFFALSE 17436
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17352: LD_ADDR_EXP 31
17356: PUSH
17357: LD_EXP 31
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: CALL_OW 266
17371: ADD
17372: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17373: LD_ADDR_EXP 31
17377: PUSH
17378: LD_EXP 31
17382: PUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 250
17392: ADD
17393: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17394: LD_ADDR_EXP 31
17398: PUSH
17399: LD_EXP 31
17403: PUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 251
17413: ADD
17414: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17415: LD_ADDR_EXP 31
17419: PUSH
17420: LD_EXP 31
17424: PUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 254
17434: ADD
17435: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 266
17445: PUSH
17446: LD_INT 1
17448: EQUAL
17449: IFFALSE 17528
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17451: LD_ADDR_EXP 31
17455: PUSH
17456: LD_EXP 31
17460: PUSH
17461: LD_INT 0
17463: ADD
17464: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17465: LD_ADDR_EXP 31
17469: PUSH
17470: LD_EXP 31
17474: PUSH
17475: LD_VAR 0 1
17479: PPUSH
17480: CALL_OW 250
17484: ADD
17485: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17486: LD_ADDR_EXP 31
17490: PUSH
17491: LD_EXP 31
17495: PUSH
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 251
17505: ADD
17506: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17507: LD_ADDR_EXP 31
17511: PUSH
17512: LD_EXP 31
17516: PUSH
17517: LD_VAR 0 1
17521: PPUSH
17522: CALL_OW 254
17526: ADD
17527: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17528: LD_VAR 0 1
17532: PPUSH
17533: CALL_OW 266
17537: PUSH
17538: LD_INT 3
17540: EQUAL
17541: IFFALSE 17620
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17543: LD_ADDR_EXP 31
17547: PUSH
17548: LD_EXP 31
17552: PUSH
17553: LD_INT 2
17555: ADD
17556: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17557: LD_ADDR_EXP 31
17561: PUSH
17562: LD_EXP 31
17566: PUSH
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 250
17576: ADD
17577: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17578: LD_ADDR_EXP 31
17582: PUSH
17583: LD_EXP 31
17587: PUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 251
17597: ADD
17598: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17599: LD_ADDR_EXP 31
17603: PUSH
17604: LD_EXP 31
17608: PUSH
17609: LD_VAR 0 1
17613: PPUSH
17614: CALL_OW 254
17618: ADD
17619: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17620: LD_VAR 0 1
17624: PPUSH
17625: CALL_OW 266
17629: PUSH
17630: LD_INT 5
17632: EQUAL
17633: IFFALSE 17712
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17635: LD_ADDR_EXP 31
17639: PUSH
17640: LD_EXP 31
17644: PUSH
17645: LD_INT 4
17647: ADD
17648: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17649: LD_ADDR_EXP 31
17653: PUSH
17654: LD_EXP 31
17658: PUSH
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 250
17668: ADD
17669: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17670: LD_ADDR_EXP 31
17674: PUSH
17675: LD_EXP 31
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 251
17689: ADD
17690: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17691: LD_ADDR_EXP 31
17695: PUSH
17696: LD_EXP 31
17700: PUSH
17701: LD_VAR 0 1
17705: PPUSH
17706: CALL_OW 254
17710: ADD
17711: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17712: LD_VAR 0 1
17716: PPUSH
17717: CALL_OW 257
17721: PUSH
17722: LD_INT 3
17724: EQUAL
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 255
17735: PUSH
17736: LD_INT 3
17738: EQUAL
17739: AND
17740: PUSH
17741: LD_INT 21
17743: PPUSH
17744: CALL_OW 302
17748: AND
17749: PUSH
17750: LD_INT 21
17752: PPUSH
17753: CALL_OW 255
17757: PUSH
17758: LD_INT 3
17760: EQUAL
17761: AND
17762: IFFALSE 17830
// begin uc_side = 3 ;
17764: LD_ADDR_OWVAR 20
17768: PUSH
17769: LD_INT 3
17771: ST_TO_ADDR
// uc_nation = 3 ;
17772: LD_ADDR_OWVAR 21
17776: PUSH
17777: LD_INT 3
17779: ST_TO_ADDR
// hc_gallery :=  ;
17780: LD_ADDR_OWVAR 33
17784: PUSH
17785: LD_STRING 
17787: ST_TO_ADDR
// hc_name :=  ;
17788: LD_ADDR_OWVAR 26
17792: PUSH
17793: LD_STRING 
17795: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17796: LD_INT 0
17798: PPUSH
17799: LD_EXP 34
17803: PPUSH
17804: LD_EXP 35
17808: PPUSH
17809: CALL_OW 12
17813: PPUSH
17814: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17818: CALL_OW 44
17822: PPUSH
17823: LD_INT 21
17825: PPUSH
17826: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 255
17839: PUSH
17840: LD_INT 3
17842: EQUAL
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 264
17853: PUSH
17854: LD_INT 52
17856: EQUAL
17857: AND
17858: PUSH
17859: LD_INT 21
17861: PPUSH
17862: CALL_OW 302
17866: AND
17867: PUSH
17868: LD_INT 21
17870: PPUSH
17871: CALL_OW 255
17875: PUSH
17876: LD_INT 3
17878: EQUAL
17879: AND
17880: IFFALSE 17901
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17882: LD_INT 21
17884: PPUSH
17885: LD_INT 22
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: LD_INT 52
17896: PPUSH
17897: CALL_OW 125
// end ;
17901: PPOPN 1
17903: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
17908: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17909: LD_VAR 0 1
17913: PPUSH
17914: CALL_OW 264
17918: PUSH
17919: LD_INT 51
17921: EQUAL
17922: PUSH
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: PUSH
17933: LD_INT 3
17935: EQUAL
17936: AND
17937: IFFALSE 17999
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17939: LD_ADDR_VAR 0 5
17943: PUSH
17944: LD_INT 2
17946: PPUSH
17947: CALL_OW 274
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 275
17959: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17960: LD_INT 2
17962: PPUSH
17963: CALL_OW 274
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: LD_VAR 0 5
17975: PUSH
17976: LD_INT 100
17978: MINUS
17979: PPUSH
17980: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17984: LD_VAR 0 1
17988: PPUSH
17989: LD_INT 1
17991: PPUSH
17992: LD_INT 100
17994: PPUSH
17995: CALL_OW 291
// end ; if building = rufabsupp then
17999: LD_VAR 0 2
18003: PUSH
18004: LD_INT 17
18006: EQUAL
18007: IFFALSE 18021
// SetSide ( vehicle , 6 ) ;
18009: LD_VAR 0 1
18013: PPUSH
18014: LD_INT 6
18016: PPUSH
18017: CALL_OW 235
// end ;
18021: PPOPN 5
18023: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 255
18033: PUSH
18034: LD_INT 3
18036: EQUAL
18037: IFFALSE 18068
// begin tamedApemans = tamedApemans + 1 ;
18039: LD_ADDR_EXP 32
18043: PUSH
18044: LD_EXP 32
18048: PUSH
18049: LD_INT 1
18051: PLUS
18052: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18053: LD_VAR 0 1
18057: PPUSH
18058: LD_INT 106
18060: PPUSH
18061: LD_INT 85
18063: PPUSH
18064: CALL_OW 111
// end ; end ;
18068: PPOPN 2
18070: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18071: LD_INT 0
18073: PPUSH
18074: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18075: LD_VAR 0 1
18079: PPUSH
18080: CALL_OW 255
18084: PUSH
18085: LD_INT 3
18087: EQUAL
18088: PUSH
18089: LD_VAR 0 1
18093: PPUSH
18094: CALL_OW 247
18098: PUSH
18099: LD_INT 2
18101: EQUAL
18102: AND
18103: IFFALSE 18212
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18105: LD_VAR 0 1
18109: PPUSH
18110: CALL_OW 264
18114: PUSH
18115: LD_INT 42
18117: EQUAL
18118: PUSH
18119: LD_VAR 0 1
18123: PPUSH
18124: CALL_OW 264
18128: PUSH
18129: LD_INT 43
18131: EQUAL
18132: OR
18133: PUSH
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL_OW 264
18143: PUSH
18144: LD_INT 44
18146: EQUAL
18147: OR
18148: PUSH
18149: LD_VAR 0 1
18153: PPUSH
18154: CALL_OW 264
18158: PUSH
18159: LD_INT 46
18161: EQUAL
18162: OR
18163: IFFALSE 18212
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18165: LD_INT 21
18167: PPUSH
18168: LD_VAR 0 1
18172: PPUSH
18173: CALL_OW 265
18177: PPUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 262
18187: PPUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: CALL_OW 263
18197: PPUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 264
18207: PPUSH
18208: CALL_OW 185
// end ;
18212: PPOPN 3
18214: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 255
18224: PUSH
18225: LD_INT 3
18227: EQUAL
18228: PUSH
18229: LD_VAR 0 2
18233: PPUSH
18234: CALL_OW 255
18238: PUSH
18239: LD_INT 3
18241: EQUAL
18242: AND
18243: PUSH
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 302
18253: AND
18254: IFFALSE 18296
// begin ComRepairVehicle ( human , vehicle ) ;
18256: LD_VAR 0 2
18260: PPUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18284: LD_VAR 0 1
18288: PPUSH
18289: LD_INT 100
18291: PPUSH
18292: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 255
18305: PUSH
18306: LD_INT 3
18308: EQUAL
18309: PUSH
18310: LD_VAR 0 2
18314: PPUSH
18315: CALL_OW 255
18319: PUSH
18320: LD_INT 3
18322: EQUAL
18323: AND
18324: PUSH
18325: LD_INT 21
18327: PPUSH
18328: CALL_OW 302
18332: AND
18333: PUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 302
18343: NOT
18344: AND
18345: IFFALSE 18359
// ComEnterUnit ( human , rufab ) ;
18347: LD_VAR 0 2
18351: PPUSH
18352: LD_INT 21
18354: PPUSH
18355: CALL_OW 120
// end ;
18359: PPOPN 2
18361: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18362: LD_VAR 0 1
18366: PUSH
18367: LD_INT 21
18369: EQUAL
18370: PUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: CALL_OW 255
18380: PUSH
18381: LD_INT 3
18383: EQUAL
18384: AND
18385: IFFALSE 18399
// SetLives ( human , 1000 ) ;
18387: LD_VAR 0 2
18391: PPUSH
18392: LD_INT 1000
18394: PPUSH
18395: CALL_OW 234
// end ; end_of_file
18399: PPOPN 2
18401: END
// every 0 0$30 trigger cratesStatus = 1 do
18402: LD_EXP 38
18406: PUSH
18407: LD_INT 1
18409: EQUAL
18410: IFFALSE 18493
18412: GO 18414
18414: DISABLE
// begin enable ;
18415: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18416: LD_INT 350
18418: PUSH
18419: LD_INT 1050
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 1
18428: PPUSH
18429: LD_INT 2
18431: PPUSH
18432: CALL_OW 12
18436: ARRAY
18437: PPUSH
18438: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18442: LD_INT 4
18444: PUSH
18445: LD_INT 5
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 1
18454: PPUSH
18455: LD_INT 2
18457: PPUSH
18458: CALL_OW 12
18462: ARRAY
18463: PPUSH
18464: LD_INT 6
18466: PUSH
18467: LD_INT 7
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PPUSH
18477: LD_INT 2
18479: PPUSH
18480: CALL_OW 12
18484: ARRAY
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: CALL_OW 55
// end ;
18493: END
// every 1 1$0 trigger cratesStatus = 2 do
18494: LD_EXP 38
18498: PUSH
18499: LD_INT 2
18501: EQUAL
18502: IFFALSE 18585
18504: GO 18506
18506: DISABLE
// begin enable ;
18507: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18508: LD_INT 3150
18510: PUSH
18511: LD_INT 4550
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PPUSH
18521: LD_INT 2
18523: PPUSH
18524: CALL_OW 12
18528: ARRAY
18529: PPUSH
18530: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18534: LD_INT 2
18536: PUSH
18537: LD_INT 5
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: PPUSH
18547: LD_INT 2
18549: PPUSH
18550: CALL_OW 12
18554: ARRAY
18555: PPUSH
18556: LD_INT 6
18558: PUSH
18559: LD_INT 7
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 2
18571: PPUSH
18572: CALL_OW 12
18576: ARRAY
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 55
// end ;
18585: END
// every 0 0$30 + 0 0$10 do
18586: GO 18588
18588: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18589: LD_INT 4
18591: PUSH
18592: LD_INT 5
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: PPUSH
18602: LD_INT 2
18604: PPUSH
18605: CALL_OW 12
18609: ARRAY
18610: PPUSH
18611: LD_INT 7
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 55
// Wait ( 0 0$15 ) ;
18621: LD_INT 525
18623: PPUSH
18624: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18628: LD_INT 4
18630: PUSH
18631: LD_INT 5
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 1
18640: PPUSH
18641: LD_INT 2
18643: PPUSH
18644: CALL_OW 12
18648: ARRAY
18649: PPUSH
18650: LD_INT 7
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 55
// Wait ( 0 0$20 ) ;
18660: LD_INT 700
18662: PPUSH
18663: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18667: LD_INT 4
18669: PUSH
18670: LD_INT 5
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: PPUSH
18680: LD_INT 2
18682: PPUSH
18683: CALL_OW 12
18687: ARRAY
18688: PPUSH
18689: LD_INT 7
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 55
// end ; end_of_file
18699: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18700: LD_EXP 24
18704: PUSH
18705: LD_INT 1
18707: EQUAL
18708: IFFALSE 19009
18710: GO 18712
18712: DISABLE
18713: LD_INT 0
18715: PPUSH
18716: PPUSH
18717: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18718: LD_ADDR_VAR 0 2
18722: PUSH
18723: LD_INT 22
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 21
18735: PUSH
18736: LD_INT 3
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 2
18745: PUSH
18746: LD_INT 30
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 30
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: ST_TO_ADDR
// for i in tmp do
18781: LD_ADDR_VAR 0 1
18785: PUSH
18786: LD_VAR 0 2
18790: PUSH
18791: FOR_IN
18792: IFFALSE 18825
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18794: LD_ADDR_VAR 0 3
18798: PUSH
18799: LD_VAR 0 3
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 274
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 275
18821: PLUS
18822: ST_TO_ADDR
18823: GO 18791
18825: POP
18826: POP
// strings = [ ] ;
18827: LD_ADDR_EXP 27
18831: PUSH
18832: EMPTY
18833: ST_TO_ADDR
// if tmp = 0 then
18834: LD_VAR 0 2
18838: PUSH
18839: LD_INT 0
18841: EQUAL
18842: IFFALSE 18867
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18844: LD_ADDR_EXP 27
18848: PUSH
18849: LD_EXP 27
18853: PUSH
18854: LD_STRING #Am06-1
18856: PUSH
18857: LD_EXP 25
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: ADD
18866: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18867: LD_VAR 0 2
18871: PUSH
18872: LD_INT 0
18874: GREATER
18875: PUSH
18876: LD_EXP 25
18880: PUSH
18881: LD_VAR 0 3
18885: GREATER
18886: AND
18887: IFFALSE 18918
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18889: LD_ADDR_EXP 27
18893: PUSH
18894: LD_EXP 27
18898: PUSH
18899: LD_STRING #Am06-1
18901: PUSH
18902: LD_EXP 25
18906: PUSH
18907: LD_VAR 0 3
18911: MINUS
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: ADD
18917: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18918: LD_VAR 0 2
18922: PUSH
18923: LD_INT 0
18925: GREATER
18926: PUSH
18927: LD_EXP 25
18931: PUSH
18932: LD_VAR 0 3
18936: LESSEQUAL
18937: AND
18938: IFFALSE 18961
// strings = strings ^ [ #Am06-1 , 0 ] ;
18940: LD_ADDR_EXP 27
18944: PUSH
18945: LD_EXP 27
18949: PUSH
18950: LD_STRING #Am06-1
18952: PUSH
18953: LD_INT 0
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: ADD
18960: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18961: LD_ADDR_EXP 26
18965: PUSH
18966: LD_EXP 26
18970: PUSH
18971: LD_INT 35
18973: MINUS
18974: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18975: LD_ADDR_EXP 27
18979: PUSH
18980: LD_EXP 27
18984: PUSH
18985: LD_STRING #Am06-2
18987: PUSH
18988: LD_EXP 26
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: ADD
18997: ST_TO_ADDR
// display_strings = strings ;
18998: LD_ADDR_OWVAR 47
19002: PUSH
19003: LD_EXP 27
19007: ST_TO_ADDR
// enable ;
19008: ENABLE
// end ; end_of_file
19009: PPOPN 3
19011: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19012: LD_INT 0
19014: PPUSH
19015: PPUSH
19016: PPUSH
19017: PPUSH
19018: PPUSH
19019: PPUSH
19020: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19021: LD_ADDR_VAR 0 3
19025: PUSH
19026: LD_INT 22
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: LD_INT 30
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 30
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 69
19072: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19073: LD_INT 35
19075: PPUSH
19076: CALL_OW 67
// until depot ;
19080: LD_VAR 0 3
19084: IFFALSE 19021
// repeat wait ( 0 0$1 ) ;
19086: LD_INT 35
19088: PPUSH
19089: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19093: LD_ADDR_VAR 0 4
19097: PUSH
19098: LD_INT 22
19100: PUSH
19101: LD_INT 1
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 91
19110: PUSH
19111: LD_VAR 0 3
19115: PUSH
19116: LD_INT 1
19118: ARRAY
19119: PUSH
19120: LD_INT 15
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 21
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 25
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 25
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 25
19163: PUSH
19164: LD_INT 3
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 25
19173: PUSH
19174: LD_INT 4
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: LD_INT 54
19193: PUSH
19194: EMPTY
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 3
19203: PUSH
19204: LD_INT 55
19206: PUSH
19207: EMPTY
19208: LIST
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: PPUSH
19222: CALL_OW 69
19226: PUSH
19227: LD_EXP 2
19231: PUSH
19232: LD_EXP 3
19236: PUSH
19237: LD_EXP 4
19241: PUSH
19242: LD_EXP 5
19246: PUSH
19247: LD_EXP 7
19251: PUSH
19252: LD_EXP 8
19256: PUSH
19257: LD_EXP 9
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: LD_EXP 46
19275: ADD
19276: DIFF
19277: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19278: LD_VAR 0 4
19282: PUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 463
19290: NOT
19291: AND
19292: IFFALSE 19086
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19294: LD_ADDR_VAR 0 4
19298: PUSH
19299: LD_VAR 0 4
19303: PUSH
19304: LD_INT 1
19306: PPUSH
19307: LD_VAR 0 4
19311: PPUSH
19312: CALL_OW 12
19316: ARRAY
19317: ST_TO_ADDR
// blockSpawn = 1 ;
19318: LD_ADDR_EXP 29
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// uc_side = 2 ;
19326: LD_ADDR_OWVAR 20
19330: PUSH
19331: LD_INT 2
19333: ST_TO_ADDR
// uc_nation = 2 ;
19334: LD_ADDR_OWVAR 21
19338: PUSH
19339: LD_INT 2
19341: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19342: LD_ADDR_EXP 19
19346: PUSH
19347: LD_STRING Kurt
19349: PPUSH
19350: LD_INT 0
19352: PPUSH
19353: CALL 5851 0 2
19357: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19358: LD_EXP 19
19362: PPUSH
19363: LD_VAR 0 4
19367: PPUSH
19368: CALL_OW 250
19372: PPUSH
19373: LD_VAR 0 4
19377: PPUSH
19378: CALL_OW 251
19382: PPUSH
19383: LD_INT 5
19385: PPUSH
19386: LD_INT 1
19388: PPUSH
19389: CALL_OW 50
// InGameOn ;
19393: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19397: LD_EXP 19
19401: PPUSH
19402: CALL_OW 87
// wait ( 0 0$2 ) ;
19406: LD_INT 70
19408: PPUSH
19409: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19413: LD_EXP 19
19417: PPUSH
19418: LD_VAR 0 4
19422: PPUSH
19423: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19427: LD_VAR 0 4
19431: PPUSH
19432: LD_EXP 19
19436: PPUSH
19437: CALL_OW 112
// wait ( 0 0$1 ) ;
19441: LD_INT 35
19443: PPUSH
19444: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19448: LD_VAR 0 4
19452: PPUSH
19453: LD_EXP 19
19457: PPUSH
19458: CALL_OW 119
// DialogueOn ;
19462: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19466: LD_EXP 19
19470: PPUSH
19471: LD_STRING D2-Kurt-1
19473: PPUSH
19474: CALL_OW 88
// if tmp = JMM then
19478: LD_VAR 0 4
19482: PUSH
19483: LD_EXP 1
19487: EQUAL
19488: IFFALSE 19580
// begin Say ( JMM , D2-JMM-1 ) ;
19490: LD_EXP 1
19494: PPUSH
19495: LD_STRING D2-JMM-1
19497: PPUSH
19498: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19502: LD_EXP 19
19506: PPUSH
19507: LD_STRING D2-Kurt-2
19509: PPUSH
19510: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19514: LD_EXP 1
19518: PPUSH
19519: LD_STRING D2-JMM-2
19521: PPUSH
19522: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19526: LD_EXP 19
19530: PPUSH
19531: LD_STRING D2-Kurt-3
19533: PPUSH
19534: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19538: LD_EXP 1
19542: PPUSH
19543: LD_STRING D2-JMM-3
19545: PPUSH
19546: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19550: LD_EXP 19
19554: PPUSH
19555: LD_STRING D2-Kurt-4
19557: PPUSH
19558: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19562: LD_EXP 1
19566: PPUSH
19567: LD_STRING D2-JMM-4
19569: PPUSH
19570: CALL_OW 88
// DialogueOff ;
19574: CALL_OW 7
// end else
19578: GO 19890
// begin if GetSex ( tmp ) = 1 then
19580: LD_VAR 0 4
19584: PPUSH
19585: CALL_OW 258
19589: PUSH
19590: LD_INT 1
19592: EQUAL
19593: IFFALSE 19607
// Say ( tmp , D2-Sol1-1 ) ;
19595: LD_VAR 0 4
19599: PPUSH
19600: LD_STRING D2-Sol1-1
19602: PPUSH
19603: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19607: LD_VAR 0 4
19611: PPUSH
19612: CALL_OW 258
19616: PUSH
19617: LD_INT 2
19619: EQUAL
19620: IFFALSE 19634
// Say ( tmp , D2-FSol1-1 ) ;
19622: LD_VAR 0 4
19626: PPUSH
19627: LD_STRING D2-FSol1-1
19629: PPUSH
19630: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19634: LD_EXP 19
19638: PPUSH
19639: LD_STRING D2-Kurt-2
19641: PPUSH
19642: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19646: LD_VAR 0 4
19650: PPUSH
19651: CALL_OW 258
19655: PUSH
19656: LD_INT 1
19658: EQUAL
19659: IFFALSE 19673
// Say ( tmp , D2-Sol1-2 ) ;
19661: LD_VAR 0 4
19665: PPUSH
19666: LD_STRING D2-Sol1-2
19668: PPUSH
19669: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19673: LD_VAR 0 4
19677: PPUSH
19678: CALL_OW 258
19682: PUSH
19683: LD_INT 2
19685: EQUAL
19686: IFFALSE 19700
// Say ( tmp , D2-FSol1-2 ) ;
19688: LD_VAR 0 4
19692: PPUSH
19693: LD_STRING D2-FSol1-2
19695: PPUSH
19696: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19700: LD_EXP 19
19704: PPUSH
19705: LD_STRING D2-Kurt-3
19707: PPUSH
19708: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19712: LD_VAR 0 4
19716: PPUSH
19717: CALL_OW 258
19721: PUSH
19722: LD_INT 1
19724: EQUAL
19725: IFFALSE 19739
// Say ( tmp , D2-Sol1-3 ) ;
19727: LD_VAR 0 4
19731: PPUSH
19732: LD_STRING D2-Sol1-3
19734: PPUSH
19735: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19739: LD_VAR 0 4
19743: PPUSH
19744: CALL_OW 258
19748: PUSH
19749: LD_INT 2
19751: EQUAL
19752: IFFALSE 19766
// Say ( tmp , D2-FSol1-3 ) ;
19754: LD_VAR 0 4
19758: PPUSH
19759: LD_STRING D2-FSol1-3
19761: PPUSH
19762: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19766: LD_EXP 19
19770: PPUSH
19771: LD_STRING D2-Kurt-4
19773: PPUSH
19774: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19778: LD_VAR 0 4
19782: PPUSH
19783: CALL_OW 258
19787: PUSH
19788: LD_INT 1
19790: EQUAL
19791: IFFALSE 19805
// Say ( tmp , D2-Sol1-4 ) ;
19793: LD_VAR 0 4
19797: PPUSH
19798: LD_STRING D2-Sol1-4
19800: PPUSH
19801: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19805: LD_VAR 0 4
19809: PPUSH
19810: CALL_OW 258
19814: PUSH
19815: LD_INT 2
19817: EQUAL
19818: IFFALSE 19832
// Say ( tmp , D2-FSol1-4 ) ;
19820: LD_VAR 0 4
19824: PPUSH
19825: LD_STRING D2-FSol1-4
19827: PPUSH
19828: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19832: LD_VAR 0 4
19836: PPUSH
19837: CALL_OW 258
19841: PUSH
19842: LD_INT 1
19844: EQUAL
19845: IFFALSE 19859
// Say ( tmp , D2-Sol1-5 ) ;
19847: LD_VAR 0 4
19851: PPUSH
19852: LD_STRING D2-Sol1-5
19854: PPUSH
19855: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19859: LD_VAR 0 4
19863: PPUSH
19864: CALL_OW 258
19868: PUSH
19869: LD_INT 2
19871: EQUAL
19872: IFFALSE 19886
// Say ( tmp , D2-FSol1-5 ) ;
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_STRING D2-FSol1-5
19881: PPUSH
19882: CALL_OW 88
// DialogueOff ;
19886: CALL_OW 7
// end ; dec = ShowQuery1 ;
19890: LD_ADDR_VAR 0 6
19894: PUSH
19895: CALL 6375 0 0
19899: ST_TO_ADDR
// if dec = 1 then
19900: LD_VAR 0 6
19904: PUSH
19905: LD_INT 1
19907: EQUAL
19908: IFFALSE 19950
// begin DialogueOn ;
19910: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19914: LD_EXP 19
19918: PPUSH
19919: LD_STRING D2a-Kurt-1
19921: PPUSH
19922: CALL_OW 88
// DialogueOff ;
19926: CALL_OW 7
// InGameOff ;
19930: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19934: LD_INT 1
19936: PPUSH
19937: LD_INT 2
19939: PPUSH
19940: LD_INT 2
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 80
// end ; if dec = 2 then
19950: LD_VAR 0 6
19954: PUSH
19955: LD_INT 2
19957: EQUAL
19958: IFFALSE 20458
// begin DialogueOn ;
19960: CALL_OW 6
// if tmp = JMM then
19964: LD_VAR 0 4
19968: PUSH
19969: LD_EXP 1
19973: EQUAL
19974: IFFALSE 20030
// begin Say ( JMM , D2b-JMM-1 ) ;
19976: LD_EXP 1
19980: PPUSH
19981: LD_STRING D2b-JMM-1
19983: PPUSH
19984: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19988: LD_EXP 19
19992: PPUSH
19993: LD_STRING D2b-Kurt-1
19995: PPUSH
19996: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20000: LD_EXP 1
20004: PPUSH
20005: LD_STRING D2b-JMM-2
20007: PPUSH
20008: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20012: LD_EXP 19
20016: PPUSH
20017: LD_STRING D2b-Kurt-2
20019: PPUSH
20020: CALL_OW 88
// DialogueOff ;
20024: CALL_OW 7
// end else
20028: GO 20220
// begin if GetSex ( tmp ) = 1 then
20030: LD_VAR 0 4
20034: PPUSH
20035: CALL_OW 258
20039: PUSH
20040: LD_INT 1
20042: EQUAL
20043: IFFALSE 20057
// Say ( tmp , D2b-Sol1-1 ) ;
20045: LD_VAR 0 4
20049: PPUSH
20050: LD_STRING D2b-Sol1-1
20052: PPUSH
20053: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20057: LD_VAR 0 4
20061: PPUSH
20062: CALL_OW 258
20066: PUSH
20067: LD_INT 2
20069: EQUAL
20070: IFFALSE 20084
// Say ( tmp , D2b-FSol1-1 ) ;
20072: LD_VAR 0 4
20076: PPUSH
20077: LD_STRING D2b-FSol1-1
20079: PPUSH
20080: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20084: LD_EXP 19
20088: PPUSH
20089: LD_STRING D2b-Kurt-1
20091: PPUSH
20092: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20096: LD_VAR 0 4
20100: PPUSH
20101: CALL_OW 258
20105: PUSH
20106: LD_INT 1
20108: EQUAL
20109: IFFALSE 20123
// Say ( tmp , D2b-Sol1-2 ) ;
20111: LD_VAR 0 4
20115: PPUSH
20116: LD_STRING D2b-Sol1-2
20118: PPUSH
20119: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20123: LD_VAR 0 4
20127: PPUSH
20128: CALL_OW 258
20132: PUSH
20133: LD_INT 2
20135: EQUAL
20136: IFFALSE 20150
// Say ( tmp , D2b-FSol1-2 ) ;
20138: LD_VAR 0 4
20142: PPUSH
20143: LD_STRING D2b-FSol1-2
20145: PPUSH
20146: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20150: LD_EXP 19
20154: PPUSH
20155: LD_STRING D2b-Kurt-2
20157: PPUSH
20158: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20162: LD_VAR 0 4
20166: PPUSH
20167: CALL_OW 258
20171: PUSH
20172: LD_INT 1
20174: EQUAL
20175: IFFALSE 20189
// Say ( tmp , D2c-Sol1-2 ) ;
20177: LD_VAR 0 4
20181: PPUSH
20182: LD_STRING D2c-Sol1-2
20184: PPUSH
20185: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20189: LD_VAR 0 4
20193: PPUSH
20194: CALL_OW 258
20198: PUSH
20199: LD_INT 2
20201: EQUAL
20202: IFFALSE 20216
// Say ( tmp , D2c-FSol1-2 ) ;
20204: LD_VAR 0 4
20208: PPUSH
20209: LD_STRING D2c-FSol1-2
20211: PPUSH
20212: CALL_OW 88
// DialogueOff ;
20216: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20220: LD_ADDR_VAR 0 7
20224: PUSH
20225: CALL 6449 0 0
20229: ST_TO_ADDR
// if dec2 = 1 then
20230: LD_VAR 0 7
20234: PUSH
20235: LD_INT 1
20237: EQUAL
20238: IFFALSE 20280
// begin DialogueOn ;
20240: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20244: LD_EXP 19
20248: PPUSH
20249: LD_STRING D2a-Kurt-1
20251: PPUSH
20252: CALL_OW 88
// DialogueOff ;
20256: CALL_OW 7
// InGameOff ;
20260: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20264: LD_INT 1
20266: PPUSH
20267: LD_INT 2
20269: PPUSH
20270: LD_INT 2
20272: PPUSH
20273: LD_INT 1
20275: PPUSH
20276: CALL_OW 80
// end ; if dec2 = 2 then
20280: LD_VAR 0 7
20284: PUSH
20285: LD_INT 2
20287: EQUAL
20288: IFFALSE 20458
// begin if tmp = JMM then
20290: LD_VAR 0 4
20294: PUSH
20295: LD_EXP 1
20299: EQUAL
20300: IFFALSE 20360
// begin DialogueOn ;
20302: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20306: LD_EXP 1
20310: PPUSH
20311: LD_STRING D2c-JMM-1
20313: PPUSH
20314: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20318: LD_EXP 19
20322: PPUSH
20323: LD_STRING D2c-Kurt-1
20325: PPUSH
20326: CALL_OW 88
// DialogueOff ;
20330: CALL_OW 7
// InGameOff ;
20334: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20338: LD_EXP 19
20342: PPUSH
20343: LD_INT 8
20345: PPUSH
20346: CALL_OW 113
// readyToEscape = 1 ;
20350: LD_ADDR_EXP 21
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// end else
20358: GO 20458
// begin DialogueOn ;
20360: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20364: LD_VAR 0 4
20368: PPUSH
20369: CALL_OW 258
20373: PUSH
20374: LD_INT 1
20376: EQUAL
20377: IFFALSE 20391
// Say ( tmp , D2c-Sol1-1 ) ;
20379: LD_VAR 0 4
20383: PPUSH
20384: LD_STRING D2c-Sol1-1
20386: PPUSH
20387: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20391: LD_VAR 0 4
20395: PPUSH
20396: CALL_OW 258
20400: PUSH
20401: LD_INT 2
20403: EQUAL
20404: IFFALSE 20418
// Say ( tmp , D2c-FSol1-1 ) ;
20406: LD_VAR 0 4
20410: PPUSH
20411: LD_STRING D2c-FSol1-1
20413: PPUSH
20414: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20418: LD_EXP 19
20422: PPUSH
20423: LD_STRING D2c-Kurt-1
20425: PPUSH
20426: CALL_OW 88
// DialogueOff ;
20430: CALL_OW 7
// InGameOff ;
20434: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20438: LD_EXP 19
20442: PPUSH
20443: LD_INT 8
20445: PPUSH
20446: CALL_OW 113
// readyToEscape = 1 ;
20450: LD_ADDR_EXP 21
20454: PUSH
20455: LD_INT 1
20457: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20458: LD_VAR 0 6
20462: PUSH
20463: LD_INT 3
20465: EQUAL
20466: IFFALSE 20640
// begin DialogueOn ;
20468: CALL_OW 6
// if tmp = JMM then
20472: LD_VAR 0 4
20476: PUSH
20477: LD_EXP 1
20481: EQUAL
20482: IFFALSE 20542
// begin DialogueOn ;
20484: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20488: LD_EXP 1
20492: PPUSH
20493: LD_STRING D2c-JMM-1
20495: PPUSH
20496: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20500: LD_EXP 19
20504: PPUSH
20505: LD_STRING D2c-Kurt-1
20507: PPUSH
20508: CALL_OW 88
// DialogueOff ;
20512: CALL_OW 7
// InGameOff ;
20516: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20520: LD_EXP 19
20524: PPUSH
20525: LD_INT 8
20527: PPUSH
20528: CALL_OW 113
// readyToEscape = 1 ;
20532: LD_ADDR_EXP 21
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// end else
20540: GO 20640
// begin DialogueOn ;
20542: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20546: LD_VAR 0 4
20550: PPUSH
20551: CALL_OW 258
20555: PUSH
20556: LD_INT 1
20558: EQUAL
20559: IFFALSE 20573
// Say ( tmp , D2c-Sol1-1 ) ;
20561: LD_VAR 0 4
20565: PPUSH
20566: LD_STRING D2c-Sol1-1
20568: PPUSH
20569: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20573: LD_VAR 0 4
20577: PPUSH
20578: CALL_OW 258
20582: PUSH
20583: LD_INT 2
20585: EQUAL
20586: IFFALSE 20600
// Say ( tmp , D2c-FSol1-1 ) ;
20588: LD_VAR 0 4
20592: PPUSH
20593: LD_STRING D2c-FSol1-1
20595: PPUSH
20596: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20600: LD_EXP 19
20604: PPUSH
20605: LD_STRING D2c-Kurt-1
20607: PPUSH
20608: CALL_OW 88
// DialogueOff ;
20612: CALL_OW 7
// InGameOff ;
20616: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20620: LD_EXP 19
20624: PPUSH
20625: LD_INT 8
20627: PPUSH
20628: CALL_OW 113
// readyToEscape = 1 ;
20632: LD_ADDR_EXP 21
20636: PUSH
20637: LD_INT 1
20639: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20640: LD_ADDR_EXP 29
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20648: LD_INT 35
20650: PPUSH
20651: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20655: LD_EXP 19
20659: PPUSH
20660: LD_INT 8
20662: PPUSH
20663: CALL_OW 308
20667: PUSH
20668: LD_EXP 21
20672: AND
20673: PUSH
20674: LD_EXP 19
20678: PPUSH
20679: CALL_OW 301
20683: OR
20684: IFFALSE 20648
// if IsDead ( Kurt ) then
20686: LD_EXP 19
20690: PPUSH
20691: CALL_OW 301
20695: IFFALSE 20699
// exit ;
20697: GO 20768
// RemoveUnit ( Kurt ) ;
20699: LD_EXP 19
20703: PPUSH
20704: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20708: LD_EXP 19
20712: PPUSH
20713: LD_STRING Kurt
20715: PPUSH
20716: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20720: LD_INT 1
20722: PPUSH
20723: LD_INT 2
20725: PPUSH
20726: CALL_OW 81
20730: PUSH
20731: LD_INT 0
20733: EQUAL
20734: IFFALSE 20744
// KurtStatus = 1 ;
20736: LD_ADDR_EXP 20
20740: PUSH
20741: LD_INT 1
20743: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20744: LD_INT 1
20746: PPUSH
20747: LD_INT 2
20749: PPUSH
20750: CALL_OW 81
20754: PUSH
20755: LD_INT 2
20757: EQUAL
20758: IFFALSE 20768
// KurtStatus = 2 ;
20760: LD_ADDR_EXP 20
20764: PUSH
20765: LD_INT 2
20767: ST_TO_ADDR
// end ; end_of_file
20768: LD_VAR 0 1
20772: RET
// every 0 0$1 do
20773: GO 20775
20775: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20776: LD_INT 3
20778: PPUSH
20779: LD_INT 32
20781: PPUSH
20782: LD_INT 3
20784: PPUSH
20785: CALL 6504 0 3
20789: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20790: GO 20792
20792: DISABLE
20793: LD_INT 0
20795: PPUSH
// begin enemyWayX = [ ] ;
20796: LD_ADDR_EXP 47
20800: PUSH
20801: EMPTY
20802: ST_TO_ADDR
// enemyWayY = [ ] ;
20803: LD_ADDR_EXP 48
20807: PUSH
20808: EMPTY
20809: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20810: LD_ADDR_VAR 0 1
20814: PUSH
20815: LD_INT 1
20817: PPUSH
20818: LD_INT 2
20820: PPUSH
20821: CALL_OW 12
20825: ST_TO_ADDR
// if rnd = 1 then
20826: LD_VAR 0 1
20830: PUSH
20831: LD_INT 1
20833: EQUAL
20834: IFFALSE 20874
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20836: LD_ADDR_EXP 47
20840: PUSH
20841: LD_INT 93
20843: PUSH
20844: LD_INT 84
20846: PUSH
20847: LD_INT 104
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20855: LD_ADDR_EXP 48
20859: PUSH
20860: LD_INT 51
20862: PUSH
20863: LD_INT 35
20865: PUSH
20866: LD_INT 28
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: LIST
20873: ST_TO_ADDR
// end ; if rnd = 2 then
20874: LD_VAR 0 1
20878: PUSH
20879: LD_INT 2
20881: EQUAL
20882: IFFALSE 20938
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20884: LD_ADDR_EXP 47
20888: PUSH
20889: LD_INT 93
20891: PUSH
20892: LD_INT 52
20894: PUSH
20895: LD_INT 34
20897: PUSH
20898: LD_INT 28
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20911: LD_ADDR_EXP 48
20915: PUSH
20916: LD_INT 51
20918: PUSH
20919: LD_INT 45
20921: PUSH
20922: LD_INT 35
20924: PUSH
20925: LD_INT 26
20927: PUSH
20928: LD_INT 20
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: ST_TO_ADDR
// end ; enable ;
20938: ENABLE
// end ;
20939: PPOPN 1
20941: END
// every 0 0$1 do
20942: GO 20944
20944: DISABLE
// begin enable ;
20945: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20946: LD_INT 3
20948: PPUSH
20949: LD_INT 2
20951: PPUSH
20952: LD_INT 10
20954: PPUSH
20955: LD_EXP 31
20959: PPUSH
20960: CALL 7939 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20964: LD_INT 3
20966: PPUSH
20967: LD_INT 12
20969: PPUSH
20970: LD_EXP 31
20974: PPUSH
20975: CALL 9824 0 3
// if disableHealAI = 0 then
20979: LD_EXP 33
20983: PUSH
20984: LD_INT 0
20986: EQUAL
20987: IFFALSE 21008
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20989: LD_INT 3
20991: PPUSH
20992: LD_INT 9
20994: PPUSH
20995: LD_INT 10
20997: PPUSH
20998: LD_INT 32
21000: PUSH
21001: EMPTY
21002: LIST
21003: PPUSH
21004: CALL 8330 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21008: LD_INT 3
21010: PPUSH
21011: LD_INT 51
21013: PPUSH
21014: LD_INT 6
21016: PPUSH
21017: CALL 9038 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21021: LD_INT 3
21023: PPUSH
21024: LD_INT 12
21026: PPUSH
21027: LD_INT 121
21029: PPUSH
21030: LD_INT 100
21032: PPUSH
21033: CALL 6899 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21037: LD_INT 3
21039: PPUSH
21040: LD_INT 22
21042: PPUSH
21043: LD_EXP 47
21047: PPUSH
21048: LD_EXP 48
21052: PPUSH
21053: CALL 7102 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21057: LD_INT 3
21059: PPUSH
21060: LD_INT 10
21062: PPUSH
21063: CALL 9181 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21067: LD_INT 3
21069: PPUSH
21070: LD_INT 1
21072: PPUSH
21073: CALL 9594 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21077: LD_INT 2
21079: PPUSH
21080: CALL_OW 303
21084: PUSH
21085: LD_INT 2
21087: PPUSH
21088: CALL_OW 255
21092: PUSH
21093: LD_INT 1
21095: EQUAL
21096: OR
21097: IFFALSE 21109
// DefendDepot ( 3 , rudepo ) ;
21099: LD_INT 3
21101: PPUSH
21102: LD_INT 2
21104: PPUSH
21105: CALL 8874 0 2
// end ;
21109: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21110: LD_INT 22
21112: PUSH
21113: LD_INT 3
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 21
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 55
21132: PUSH
21133: EMPTY
21134: LIST
21135: PUSH
21136: LD_INT 3
21138: PUSH
21139: LD_INT 34
21141: PUSH
21142: LD_INT 51
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: PPUSH
21159: CALL_OW 69
21163: PUSH
21164: LD_INT 0
21166: EQUAL
21167: PUSH
21168: LD_INT 21
21170: PPUSH
21171: CALL_OW 255
21175: PUSH
21176: LD_INT 3
21178: EQUAL
21179: AND
21180: PUSH
21181: LD_INT 21
21183: PPUSH
21184: CALL_OW 302
21188: AND
21189: PUSH
21190: LD_INT 2
21192: PPUSH
21193: CALL_OW 255
21197: PUSH
21198: LD_INT 3
21200: EQUAL
21201: AND
21202: PUSH
21203: LD_INT 2
21205: PPUSH
21206: CALL_OW 302
21210: AND
21211: IFFALSE 21395
21213: GO 21215
21215: DISABLE
// begin enable ;
21216: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21217: LD_INT 2
21219: PPUSH
21220: CALL_OW 274
21224: PPUSH
21225: LD_INT 1
21227: PPUSH
21228: LD_INT 1000
21230: PPUSH
21231: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21235: LD_INT 3
21237: PPUSH
21238: LD_INT 21
21240: PPUSH
21241: LD_INT 5
21243: PUSH
21244: LD_INT 6
21246: PUSH
21247: LD_INT 6
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: LD_OWVAR 67
21259: ARRAY
21260: PPUSH
21261: LD_INT 43
21263: PUSH
21264: LD_INT 43
21266: PUSH
21267: LD_INT 44
21269: PUSH
21270: LD_INT 44
21272: PUSH
21273: LD_INT 46
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 43
21285: PUSH
21286: LD_INT 43
21288: PUSH
21289: LD_INT 43
21291: PUSH
21292: LD_INT 44
21294: PUSH
21295: LD_INT 44
21297: PUSH
21298: LD_INT 46
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 43
21311: PUSH
21312: LD_INT 43
21314: PUSH
21315: LD_INT 43
21317: PUSH
21318: LD_INT 44
21320: PUSH
21321: LD_INT 44
21323: PUSH
21324: LD_INT 46
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: LIST
21339: PUSH
21340: LD_OWVAR 67
21344: ARRAY
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: LD_INT 22
21354: PUSH
21355: LD_INT 22
21357: PUSH
21358: LD_INT 24
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PPUSH
21368: LD_INT 2
21370: PPUSH
21371: CALL_OW 12
21375: ARRAY
21376: PUSH
21377: LD_INT 24
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: LIST
21384: PUSH
21385: LD_OWVAR 67
21389: ARRAY
21390: PPUSH
21391: CALL 6745 0 7
// end ;
21395: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21396: LD_INT 17
21398: PPUSH
21399: CALL_OW 255
21403: PUSH
21404: LD_INT 3
21406: EQUAL
21407: PUSH
21408: LD_INT 17
21410: PPUSH
21411: CALL_OW 302
21415: AND
21416: PUSH
21417: LD_INT 2
21419: PPUSH
21420: CALL_OW 255
21424: PUSH
21425: LD_INT 3
21427: EQUAL
21428: AND
21429: PUSH
21430: LD_INT 2
21432: PPUSH
21433: CALL_OW 302
21437: AND
21438: IFFALSE 21505
21440: GO 21442
21442: DISABLE
// begin enable ;
21443: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21444: LD_INT 17
21446: PPUSH
21447: LD_INT 22
21449: PPUSH
21450: LD_INT 1
21452: PPUSH
21453: LD_INT 1
21455: PPUSH
21456: LD_INT 42
21458: PUSH
21459: LD_INT 43
21461: PUSH
21462: LD_INT 44
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 1
21472: PPUSH
21473: LD_INT 3
21475: PPUSH
21476: CALL_OW 12
21480: ARRAY
21481: PPUSH
21482: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21486: LD_INT 17
21488: PPUSH
21489: LD_INT 22
21491: PPUSH
21492: LD_INT 1
21494: PPUSH
21495: LD_INT 1
21497: PPUSH
21498: LD_INT 51
21500: PPUSH
21501: CALL_OW 185
// end ;
21505: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21506: LD_INT 17
21508: PPUSH
21509: CALL_OW 302
21513: PUSH
21514: LD_INT 17
21516: PPUSH
21517: CALL_OW 255
21521: PUSH
21522: LD_INT 3
21524: EQUAL
21525: AND
21526: PUSH
21527: LD_INT 2
21529: PPUSH
21530: CALL_OW 302
21534: AND
21535: PUSH
21536: LD_INT 2
21538: PPUSH
21539: CALL_OW 255
21543: PUSH
21544: LD_INT 3
21546: EQUAL
21547: AND
21548: PUSH
21549: LD_INT 17
21551: PPUSH
21552: CALL_OW 313
21556: NOT
21557: AND
21558: IFFALSE 21652
21560: GO 21562
21562: DISABLE
21563: LD_INT 0
21565: PPUSH
// begin for i = 1 to 6 do
21566: LD_ADDR_VAR 0 1
21570: PUSH
21571: DOUBLE
21572: LD_INT 1
21574: DEC
21575: ST_TO_ADDR
21576: LD_INT 6
21578: PUSH
21579: FOR_TO
21580: IFFALSE 21650
// begin uc_side = 3 ;
21582: LD_ADDR_OWVAR 20
21586: PUSH
21587: LD_INT 3
21589: ST_TO_ADDR
// uc_nation = 3 ;
21590: LD_ADDR_OWVAR 21
21594: PUSH
21595: LD_INT 3
21597: ST_TO_ADDR
// hc_gallery :=  ;
21598: LD_ADDR_OWVAR 33
21602: PUSH
21603: LD_STRING 
21605: ST_TO_ADDR
// hc_name :=  ;
21606: LD_ADDR_OWVAR 26
21610: PUSH
21611: LD_STRING 
21613: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21614: LD_INT 0
21616: PPUSH
21617: LD_EXP 34
21621: PPUSH
21622: LD_EXP 35
21626: PPUSH
21627: CALL_OW 12
21631: PPUSH
21632: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21636: CALL_OW 44
21640: PPUSH
21641: LD_INT 17
21643: PPUSH
21644: CALL_OW 52
// end ;
21648: GO 21579
21650: POP
21651: POP
// end ;
21652: PPOPN 1
21654: END
// every 2 2$0 do var i , j ;
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21662: LD_INT 14700
21664: PUSH
21665: LD_INT 33600
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 1
21674: PPUSH
21675: LD_INT 2
21677: PPUSH
21678: CALL_OW 12
21682: ARRAY
21683: PPUSH
21684: CALL_OW 67
// disableHealAI = 1 ;
21688: LD_ADDR_EXP 33
21692: PUSH
21693: LD_INT 1
21695: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21696: LD_ADDR_VAR 0 1
21700: PUSH
21701: LD_INT 22
21703: PUSH
21704: LD_INT 3
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 25
21713: PUSH
21714: LD_INT 4
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 69
21729: PUSH
21730: FOR_IN
21731: IFFALSE 21744
// ComExitBuilding ( i ) ;
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 122
21742: GO 21730
21744: POP
21745: POP
// wait ( 0 0$1 ) ;
21746: LD_INT 35
21748: PPUSH
21749: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21753: LD_INT 35
21755: PPUSH
21756: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21760: LD_ADDR_VAR 0 1
21764: PUSH
21765: LD_INT 22
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 25
21777: PUSH
21778: LD_INT 4
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PPUSH
21789: CALL_OW 69
21793: PUSH
21794: FOR_IN
21795: IFFALSE 21872
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 17
21804: PPUSH
21805: LD_INT 22
21807: PUSH
21808: LD_INT 0
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 25
21817: PUSH
21818: LD_INT 12
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PPUSH
21829: CALL_OW 70
21833: PUSH
21834: FOR_IN
21835: IFFALSE 21868
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21837: LD_VAR 0 1
21841: PPUSH
21842: LD_VAR 0 2
21846: PPUSH
21847: CALL_OW 250
21851: PPUSH
21852: LD_VAR 0 2
21856: PPUSH
21857: CALL_OW 251
21861: PPUSH
21862: CALL_OW 191
// end ;
21866: GO 21834
21868: POP
21869: POP
// end ;
21870: GO 21794
21872: POP
21873: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21874: LD_INT 22
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 25
21886: PUSH
21887: LD_INT 4
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PPUSH
21898: CALL_OW 69
21902: PUSH
21903: LD_INT 0
21905: EQUAL
21906: PUSH
21907: LD_EXP 32
21911: PUSH
21912: LD_INT 6
21914: PUSH
21915: LD_INT 7
21917: PUSH
21918: LD_INT 8
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: PUSH
21926: LD_OWVAR 67
21930: ARRAY
21931: GREATEREQUAL
21932: OR
21933: PUSH
21934: LD_INT 17
21936: PPUSH
21937: LD_INT 22
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 25
21949: PUSH
21950: LD_INT 12
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PPUSH
21961: CALL_OW 70
21965: PUSH
21966: LD_INT 0
21968: EQUAL
21969: OR
21970: IFFALSE 21753
// disableHealAI = 0 ;
21972: LD_ADDR_EXP 33
21976: PUSH
21977: LD_INT 0
21979: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21980: LD_ADDR_VAR 0 1
21984: PUSH
21985: LD_INT 22
21987: PUSH
21988: LD_INT 3
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 25
21997: PUSH
21998: LD_INT 12
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PPUSH
22009: CALL_OW 69
22013: PUSH
22014: FOR_IN
22015: IFFALSE 22031
// SetClass ( i , 16 ) ;
22017: LD_VAR 0 1
22021: PPUSH
22022: LD_INT 16
22024: PPUSH
22025: CALL_OW 336
22029: GO 22014
22031: POP
22032: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22033: LD_ADDR_VAR 0 1
22037: PUSH
22038: LD_INT 22
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 25
22050: PUSH
22051: LD_INT 4
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: PUSH
22067: FOR_IN
22068: IFFALSE 22087
// ComMoveXY ( i , 113 , 94 ) ;
22070: LD_VAR 0 1
22074: PPUSH
22075: LD_INT 113
22077: PPUSH
22078: LD_INT 94
22080: PPUSH
22081: CALL_OW 111
22085: GO 22067
22087: POP
22088: POP
// end ;
22089: PPOPN 2
22091: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22092: LD_INT 21
22094: PPUSH
22095: CALL_OW 255
22099: PUSH
22100: LD_INT 3
22102: EQUAL
22103: PUSH
22104: LD_INT 21
22106: PPUSH
22107: CALL_OW 302
22111: AND
22112: PUSH
22113: LD_INT 22
22115: PUSH
22116: LD_INT 3
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 34
22125: PUSH
22126: LD_INT 51
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PPUSH
22137: CALL_OW 69
22141: PUSH
22142: LD_INT 0
22144: EQUAL
22145: AND
22146: IFFALSE 22178
22148: GO 22150
22150: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22151: LD_INT 21
22153: PPUSH
22154: LD_INT 23
22156: PPUSH
22157: LD_INT 1
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: LD_INT 51
22165: PPUSH
22166: CALL_OW 185
// wait ( 5 5$0 ) ;
22170: LD_INT 10500
22172: PPUSH
22173: CALL_OW 67
// enable ;
22177: ENABLE
// end ; end_of_file
22178: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22179: LD_EXP 26
22183: PUSH
22184: LD_INT 0
22186: LESSEQUAL
22187: IFFALSE 22336
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
22195: PPUSH
22196: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22197: LD_ADDR_VAR 0 2
22201: PUSH
22202: LD_INT 22
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 21
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: PUSH
22225: LD_INT 30
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 30
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: PPUSH
22255: CALL_OW 69
22259: ST_TO_ADDR
// for i in tmp do
22260: LD_ADDR_VAR 0 1
22264: PUSH
22265: LD_VAR 0 2
22269: PUSH
22270: FOR_IN
22271: IFFALSE 22304
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22273: LD_ADDR_VAR 0 3
22277: PUSH
22278: LD_VAR 0 3
22282: PUSH
22283: LD_VAR 0 1
22287: PPUSH
22288: CALL_OW 274
22292: PPUSH
22293: LD_INT 1
22295: PPUSH
22296: CALL_OW 275
22300: PLUS
22301: ST_TO_ADDR
22302: GO 22270
22304: POP
22305: POP
// if yourCrates >= needCrates then
22306: LD_VAR 0 3
22310: PUSH
22311: LD_EXP 25
22315: GREATEREQUAL
22316: IFFALSE 22329
// begin FinishMission ( yourCrates ) ;
22318: LD_VAR 0 3
22322: PPUSH
22323: CALL 22339 0 1
// end else
22327: GO 22336
// begin YouLost ( matmin ) ;
22329: LD_STRING matmin
22331: PPUSH
22332: CALL_OW 104
// end ; end ;
22336: PPOPN 3
22338: END
// export function FinishMission ( crates ) ; begin
22339: LD_INT 0
22341: PPUSH
// if crates + 100 > crates then
22342: LD_VAR 0 1
22346: PUSH
22347: LD_INT 100
22349: PLUS
22350: PUSH
22351: LD_VAR 0 1
22355: GREATER
22356: IFFALSE 22380
// begin AddMedal ( cans , 1 ) ;
22358: LD_STRING cans
22360: PPUSH
22361: LD_INT 1
22363: PPUSH
22364: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22368: LD_INT 1
22370: PPUSH
22371: LD_STRING 06_crates_1
22373: PPUSH
22374: CALL_OW 39
// end else
22378: GO 22401
// begin AddMedal ( cans , - 1 ) ;
22380: LD_STRING cans
22382: PPUSH
22383: LD_INT 1
22385: NEG
22386: PPUSH
22387: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22391: LD_INT 0
22393: PPUSH
22394: LD_STRING 06_crates_1
22396: PPUSH
22397: CALL_OW 39
// end ; if unitLost < 3 then
22401: LD_EXP 30
22405: PUSH
22406: LD_INT 3
22408: LESS
22409: IFFALSE 22423
// begin AddMedal ( people , 1 ) ;
22411: LD_STRING people
22413: PPUSH
22414: LD_INT 1
22416: PPUSH
22417: CALL_OW 101
// end else
22421: GO 22434
// begin AddMedal ( people , - 1 ) ;
22423: LD_STRING people
22425: PPUSH
22426: LD_INT 1
22428: NEG
22429: PPUSH
22430: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22434: LD_EXP 28
22438: PPUSH
22439: LD_STRING 06_remoteVehs_1
22441: PPUSH
22442: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22446: LD_EXP 28
22450: PUSH
22451: LD_INT 1
22453: EQUAL
22454: IFFALSE 22468
// begin AddMedal ( remote , 1 ) ;
22456: LD_STRING remote
22458: PPUSH
22459: LD_INT 1
22461: PPUSH
22462: CALL_OW 101
// end else
22466: GO 22508
// begin if GetTech ( 18 , 1 ) = state_enabled then
22468: LD_INT 18
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 321
22478: PUSH
22479: LD_INT 1
22481: EQUAL
22482: IFFALSE 22497
// begin AddMedal ( remote , - 1 ) ;
22484: LD_STRING remote
22486: PPUSH
22487: LD_INT 1
22489: NEG
22490: PPUSH
22491: CALL_OW 101
// end else
22495: GO 22508
// begin AddMedal ( remote , - 2 ) ;
22497: LD_STRING remote
22499: PPUSH
22500: LD_INT 2
22502: NEG
22503: PPUSH
22504: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22508: LD_EXP 20
22512: PPUSH
22513: LD_STRING 06_KurtStatus_1
22515: PPUSH
22516: CALL_OW 39
// GiveMedals ( Main ) ;
22520: LD_STRING Main
22522: PPUSH
22523: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22527: LD_INT 22
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 21
22539: PUSH
22540: LD_INT 1
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 50
22549: PUSH
22550: EMPTY
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 25
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 25
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 25
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 25
22588: PUSH
22589: LD_INT 4
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: PPUSH
22609: CALL_OW 69
22613: PPUSH
22614: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22618: LD_EXP 1
22622: PPUSH
22623: LD_EXP 43
22627: PUSH
22628: LD_STRING JMM
22630: STR
22631: PPUSH
22632: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22636: LD_EXP 2
22640: PPUSH
22641: LD_EXP 43
22645: PUSH
22646: LD_STRING Lisa
22648: STR
22649: PPUSH
22650: CALL 6003 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22654: LD_EXP 3
22658: PPUSH
22659: LD_EXP 43
22663: PUSH
22664: LD_STRING Bobby
22666: STR
22667: PPUSH
22668: CALL 6003 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22672: LD_EXP 4
22676: PPUSH
22677: LD_EXP 43
22681: PUSH
22682: LD_STRING Cyrus
22684: STR
22685: PPUSH
22686: CALL 6003 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22690: LD_EXP 5
22694: PPUSH
22695: LD_EXP 43
22699: PUSH
22700: LD_STRING Frank
22702: STR
22703: PPUSH
22704: CALL 6003 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22708: LD_EXP 6
22712: PPUSH
22713: LD_EXP 43
22717: PUSH
22718: LD_STRING Brown
22720: STR
22721: PPUSH
22722: CALL 6003 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22726: LD_EXP 7
22730: PPUSH
22731: LD_EXP 43
22735: PUSH
22736: LD_STRING Donaldson
22738: STR
22739: PPUSH
22740: CALL 6003 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22744: LD_EXP 8
22748: PPUSH
22749: LD_EXP 43
22753: PUSH
22754: LD_STRING Gladstone
22756: STR
22757: PPUSH
22758: CALL 6003 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22762: LD_EXP 9
22766: PPUSH
22767: LD_EXP 43
22771: PUSH
22772: LD_STRING Denis
22774: STR
22775: PPUSH
22776: CALL 6003 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22780: LD_EXP 15
22784: PPUSH
22785: LD_EXP 43
22789: PUSH
22790: LD_STRING Joan
22792: STR
22793: PPUSH
22794: CALL 6003 0 2
// if IsLive ( Joan ) then
22798: LD_EXP 15
22802: PPUSH
22803: CALL_OW 300
22807: IFFALSE 22821
// SaveCharacters ( Joan , Joan ) ;
22809: LD_EXP 15
22813: PPUSH
22814: LD_STRING Joan
22816: PPUSH
22817: CALL_OW 38
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22821: LD_EXP 16
22825: PPUSH
22826: LD_STRING 06_JoanStatus_1
22828: PPUSH
22829: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22833: LD_INT 50
22835: PUSH
22836: EMPTY
22837: LIST
22838: PUSH
22839: LD_INT 22
22841: PUSH
22842: LD_INT 1
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 21
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: PUSH
22862: LD_INT 25
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 25
22874: PUSH
22875: LD_INT 2
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 4
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: PPUSH
22915: CALL_OW 69
22919: PUSH
22920: LD_EXP 1
22924: PUSH
22925: LD_EXP 2
22929: PUSH
22930: LD_EXP 3
22934: PUSH
22935: LD_EXP 4
22939: PUSH
22940: LD_EXP 5
22944: PUSH
22945: LD_EXP 6
22949: PUSH
22950: LD_EXP 7
22954: PUSH
22955: LD_EXP 8
22959: PUSH
22960: LD_EXP 9
22964: PUSH
22965: LD_EXP 15
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: DIFF
22982: PPUSH
22983: LD_STRING 06_other_survivors
22985: PPUSH
22986: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22990: LD_INT 50
22992: PUSH
22993: EMPTY
22994: LIST
22995: PUSH
22996: LD_INT 22
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 21
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 25
23021: PUSH
23022: LD_INT 12
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 25
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: PPUSH
23050: CALL_OW 69
23054: PPUSH
23055: LD_STRING 06_other_apemans
23057: PPUSH
23058: CALL_OW 38
// YouWin ;
23062: CALL_OW 103
// end ; end_of_file
23066: LD_VAR 0 2
23070: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23071: LD_EXP 39
23075: PUSH
23076: LD_INT 3
23078: EQUAL
23079: IFFALSE 23194
23081: GO 23083
23083: DISABLE
// begin enable ;
23084: ENABLE
// sendedConvoys = 0 ;
23085: LD_ADDR_EXP 39
23089: PUSH
23090: LD_INT 0
23092: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23093: LD_INT 6
23095: PPUSH
23096: LD_INT 3
23098: PPUSH
23099: LD_INT 5
23101: PPUSH
23102: LD_INT 10
23104: PPUSH
23105: CALL_OW 12
23109: PUSH
23110: LD_INT 5
23112: PPUSH
23113: LD_INT 11
23115: PPUSH
23116: CALL_OW 12
23120: PUSH
23121: LD_INT 8
23123: PPUSH
23124: LD_INT 12
23126: PPUSH
23127: CALL_OW 12
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: LD_OWVAR 67
23141: ARRAY
23142: PPUSH
23143: LD_INT 0
23145: PPUSH
23146: LD_INT 0
23148: PPUSH
23149: LD_INT 0
23151: PPUSH
23152: LD_INT 0
23154: PPUSH
23155: LD_EXP 34
23159: PPUSH
23160: LD_EXP 35
23164: PPUSH
23165: CALL_OW 12
23169: PPUSH
23170: LD_INT 16
23172: PPUSH
23173: LD_INT 15
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: LD_INT 2
23184: PPUSH
23185: CALL_OW 12
23189: PPUSH
23190: CALL 10422 0 12
// end ; end_of_file
23194: END
// export function PrepareNature ; var i , un ; begin
23195: LD_INT 0
23197: PPUSH
23198: PPUSH
23199: PPUSH
// for i = 1 to Difficulty + 2 do
23200: LD_ADDR_VAR 0 2
23204: PUSH
23205: DOUBLE
23206: LD_INT 1
23208: DEC
23209: ST_TO_ADDR
23210: LD_OWVAR 67
23214: PUSH
23215: LD_INT 2
23217: PLUS
23218: PUSH
23219: FOR_TO
23220: IFFALSE 23329
// begin hc_sex = sex_male ;
23222: LD_ADDR_OWVAR 27
23226: PUSH
23227: LD_INT 1
23229: ST_TO_ADDR
// uc_side = 0 ;
23230: LD_ADDR_OWVAR 20
23234: PUSH
23235: LD_INT 0
23237: ST_TO_ADDR
// uc_nation = nation_nature ;
23238: LD_ADDR_OWVAR 21
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// hc_class = class_tiger ;
23246: LD_ADDR_OWVAR 28
23250: PUSH
23251: LD_INT 14
23253: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23254: LD_ADDR_OWVAR 31
23258: PUSH
23259: LD_EXP 35
23263: PUSH
23264: LD_INT 0
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23279: LD_ADDR_OWVAR 35
23283: PUSH
23284: LD_INT 5
23286: NEG
23287: PPUSH
23288: LD_INT 5
23290: PPUSH
23291: CALL_OW 12
23295: PUSH
23296: LD_OWVAR 67
23300: MUL
23301: ST_TO_ADDR
// un = CreateHuman ;
23302: LD_ADDR_VAR 0 3
23306: PUSH
23307: CALL_OW 44
23311: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23312: LD_VAR 0 3
23316: PPUSH
23317: LD_INT 18
23319: PPUSH
23320: LD_INT 0
23322: PPUSH
23323: CALL_OW 49
// end ;
23327: GO 23219
23329: POP
23330: POP
// for i = 1 to rand ( 3 , 4 ) do
23331: LD_ADDR_VAR 0 2
23335: PUSH
23336: DOUBLE
23337: LD_INT 1
23339: DEC
23340: ST_TO_ADDR
23341: LD_INT 3
23343: PPUSH
23344: LD_INT 4
23346: PPUSH
23347: CALL_OW 12
23351: PUSH
23352: FOR_TO
23353: IFFALSE 23447
// begin hc_sex = sex_male ;
23355: LD_ADDR_OWVAR 27
23359: PUSH
23360: LD_INT 1
23362: ST_TO_ADDR
// uc_side = 0 ;
23363: LD_ADDR_OWVAR 20
23367: PUSH
23368: LD_INT 0
23370: ST_TO_ADDR
// uc_nation = nation_nature ;
23371: LD_ADDR_OWVAR 21
23375: PUSH
23376: LD_INT 0
23378: ST_TO_ADDR
// hc_class = 18 ;
23379: LD_ADDR_OWVAR 28
23383: PUSH
23384: LD_INT 18
23386: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23387: LD_ADDR_OWVAR 31
23391: PUSH
23392: LD_EXP 35
23396: PUSH
23397: LD_INT 0
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: ST_TO_ADDR
// hc_agressivity = 0 ;
23412: LD_ADDR_OWVAR 35
23416: PUSH
23417: LD_INT 0
23419: ST_TO_ADDR
// un = CreateHuman ;
23420: LD_ADDR_VAR 0 3
23424: PUSH
23425: CALL_OW 44
23429: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23430: LD_VAR 0 3
23434: PPUSH
23435: LD_INT 18
23437: PPUSH
23438: LD_INT 0
23440: PPUSH
23441: CALL_OW 49
// end ;
23445: GO 23352
23447: POP
23448: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23449: LD_ADDR_VAR 0 2
23453: PUSH
23454: DOUBLE
23455: LD_INT 1
23457: DEC
23458: ST_TO_ADDR
23459: LD_INT 1
23461: PPUSH
23462: LD_INT 3
23464: PPUSH
23465: CALL_OW 12
23469: PUSH
23470: LD_OWVAR 67
23474: PLUS
23475: PUSH
23476: FOR_TO
23477: IFFALSE 23626
// begin hc_sex = sex_male ;
23479: LD_ADDR_OWVAR 27
23483: PUSH
23484: LD_INT 1
23486: ST_TO_ADDR
// uc_side = 0 ;
23487: LD_ADDR_OWVAR 20
23491: PUSH
23492: LD_INT 0
23494: ST_TO_ADDR
// uc_nation = nation_nature ;
23495: LD_ADDR_OWVAR 21
23499: PUSH
23500: LD_INT 0
23502: ST_TO_ADDR
// hc_class = class_apeman ;
23503: LD_ADDR_OWVAR 28
23507: PUSH
23508: LD_INT 12
23510: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23511: LD_ADDR_OWVAR 31
23515: PUSH
23516: LD_INT 2
23518: PPUSH
23519: LD_INT 5
23521: PPUSH
23522: CALL_OW 12
23526: PUSH
23527: LD_INT 0
23529: PPUSH
23530: LD_INT 2
23532: PPUSH
23533: CALL_OW 12
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23550: LD_ADDR_OWVAR 35
23554: PUSH
23555: LD_INT 20
23557: PPUSH
23558: LD_INT 30
23560: PPUSH
23561: CALL_OW 12
23565: PUSH
23566: LD_INT 30
23568: PPUSH
23569: LD_INT 40
23571: PPUSH
23572: CALL_OW 12
23576: PUSH
23577: LD_INT 40
23579: PPUSH
23580: LD_INT 50
23582: PPUSH
23583: CALL_OW 12
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: PUSH
23593: LD_OWVAR 67
23597: ARRAY
23598: ST_TO_ADDR
// un = CreateHuman ;
23599: LD_ADDR_VAR 0 3
23603: PUSH
23604: CALL_OW 44
23608: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 19
23616: PPUSH
23617: LD_INT 0
23619: PPUSH
23620: CALL_OW 49
// end ;
23624: GO 23476
23626: POP
23627: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23628: LD_ADDR_VAR 0 2
23632: PUSH
23633: DOUBLE
23634: LD_INT 1
23636: DEC
23637: ST_TO_ADDR
23638: LD_INT 5
23640: PPUSH
23641: LD_INT 6
23643: PPUSH
23644: CALL_OW 12
23648: PUSH
23649: LD_OWVAR 67
23653: PLUS
23654: PUSH
23655: FOR_TO
23656: IFFALSE 23764
// begin hc_sex = sex_male ;
23658: LD_ADDR_OWVAR 27
23662: PUSH
23663: LD_INT 1
23665: ST_TO_ADDR
// uc_side = 0 ;
23666: LD_ADDR_OWVAR 20
23670: PUSH
23671: LD_INT 0
23673: ST_TO_ADDR
// uc_nation = nation_nature ;
23674: LD_ADDR_OWVAR 21
23678: PUSH
23679: LD_INT 0
23681: ST_TO_ADDR
// hc_class = class_apeman ;
23682: LD_ADDR_OWVAR 28
23686: PUSH
23687: LD_INT 12
23689: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23690: LD_ADDR_OWVAR 31
23694: PUSH
23695: LD_INT 2
23697: PPUSH
23698: LD_INT 5
23700: PPUSH
23701: CALL_OW 12
23705: PUSH
23706: LD_INT 0
23708: PPUSH
23709: LD_INT 2
23711: PPUSH
23712: CALL_OW 12
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: ST_TO_ADDR
// hc_agressivity = 0 ;
23729: LD_ADDR_OWVAR 35
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// un = CreateHuman ;
23737: LD_ADDR_VAR 0 3
23741: PUSH
23742: CALL_OW 44
23746: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23747: LD_VAR 0 3
23751: PPUSH
23752: LD_INT 20
23754: PPUSH
23755: LD_INT 0
23757: PPUSH
23758: CALL_OW 49
// end ;
23762: GO 23655
23764: POP
23765: POP
// end ; end_of_file
23766: LD_VAR 0 1
23770: RET
