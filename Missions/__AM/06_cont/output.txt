// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 39
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 40
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 41
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 28
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 19
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 15
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 37
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 23
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 24
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 25
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 38
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 31
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 30
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 36
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 32
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5169 0 0
// PrepareNature ;
 211: CALL 20136 0 0
// PrepareRussian ;
 215: CALL 4276 0 0
// PrepareVehicles ;
 219: CALL 1420 0 0
// PrepareHeroes ;
 223: CALL 438 0 0
// PrepareOthers ;
 227: CALL 1681 0 0
// PreparePlayerApemans ;
 231: CALL 1823 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 39
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 435
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; var veh ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side = 1 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 1
 449: ST_TO_ADDR
// uc_nation = 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 458: LD_ADDR_EXP 1
 462: PUSH
 463: LD_STRING JMM
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL 4653 0 2
 473: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 474: LD_ADDR_EXP 13
 478: PUSH
 479: LD_STRING Harisson
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 4653 0 2
 489: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING DeltaDoctor
 497: PPUSH
 498: CALL_OW 34
 502: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 21
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 58
 530: PUSH
 531: EMPTY
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PPUSH
 539: CALL_OW 69
 543: ST_TO_ADDR
// if veh > 0 then
 544: LD_VAR 0 2
 548: PUSH
 549: LD_INT 0
 551: GREATER
 552: IFFALSE 574
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 554: LD_EXP 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 52
// end else
 572: GO 589
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 574: LD_EXP 1
 578: PPUSH
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 589: LD_STRING LisaIn06
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: PUSH
 600: LD_INT 1
 602: EQUAL
 603: IFFALSE 707
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 58
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 646: LD_ADDR_EXP 2
 650: PUSH
 651: LD_STRING Lisa
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 4653 0 2
 661: ST_TO_ADDR
// if veh > 0 then
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 0
 669: GREATER
 670: IFFALSE 692
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 672: LD_EXP 2
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: CALL_OW 52
// end else
 690: GO 707
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 707: LD_STRING BobbyIn06
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 30
 717: PUSH
 718: LD_INT 1
 720: EQUAL
 721: IFFALSE 825
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 22
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: EMPTY
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING Bobby
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 4653 0 2
 779: ST_TO_ADDR
// if veh > 0 then
 780: LD_VAR 0 2
 784: PUSH
 785: LD_INT 0
 787: GREATER
 788: IFFALSE 810
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PPUSH
 804: CALL_OW 52
// end else
 808: GO 825
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 810: LD_EXP 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 825: LD_STRING CyrusIn06
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 943
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 58
 868: PUSH
 869: EMPTY
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 882: LD_ADDR_EXP 4
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 4653 0 2
 897: ST_TO_ADDR
// if veh > 0 then
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 0
 905: GREATER
 906: IFFALSE 928
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PPUSH
 922: CALL_OW 52
// end else
 926: GO 943
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 928: LD_EXP 4
 932: PPUSH
 933: LD_INT 2
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 943: LD_STRING FrankIn06
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 30
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 959: LD_ADDR_VAR 0 2
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1000: LD_ADDR_EXP 5
1004: PUSH
1005: LD_STRING Frank
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 4653 0 2
1015: ST_TO_ADDR
// if veh > 0 then
1016: LD_VAR 0 2
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: IFFALSE 1046
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1026: LD_EXP 5
1030: PPUSH
1031: LD_VAR 0 2
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PPUSH
1040: CALL_OW 52
// end else
1044: GO 1061
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1046: LD_EXP 5
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1061: LD_STRING BrownIn06
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1179
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 22
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 58
1104: PUSH
1105: EMPTY
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 69
1117: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1118: LD_ADDR_EXP 6
1122: PUSH
1123: LD_STRING Brown
1125: PPUSH
1126: LD_INT 1
1128: PPUSH
1129: CALL 4653 0 2
1133: ST_TO_ADDR
// if veh > 0 then
1134: LD_VAR 0 2
1138: PUSH
1139: LD_INT 0
1141: GREATER
1142: IFFALSE 1164
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1144: LD_EXP 6
1148: PPUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 52
// end else
1162: GO 1179
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1164: LD_EXP 6
1168: PPUSH
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1179: LD_STRING DonaldsonIn06
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 30
1189: PUSH
1190: LD_INT 1
1192: EQUAL
1193: IFFALSE 1297
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1236: LD_ADDR_EXP 7
1240: PUSH
1241: LD_STRING Donaldson
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 4653 0 2
1251: ST_TO_ADDR
// if veh > 0 then
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 0
1259: GREATER
1260: IFFALSE 1282
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1262: LD_EXP 7
1266: PPUSH
1267: LD_VAR 0 2
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 52
// end else
1280: GO 1297
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1282: LD_EXP 7
1286: PPUSH
1287: LD_INT 2
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1297: LD_STRING GladstoneIn06
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 30
1307: PUSH
1308: LD_INT 1
1310: EQUAL
1311: IFFALSE 1415
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_INT 22
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 21
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 58
1340: PUSH
1341: EMPTY
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 69
1353: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1354: LD_ADDR_EXP 8
1358: PUSH
1359: LD_STRING Gladstone
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL 4653 0 2
1369: ST_TO_ADDR
// if veh > 0 then
1370: LD_VAR 0 2
1374: PUSH
1375: LD_INT 0
1377: GREATER
1378: IFFALSE 1400
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// end else
1398: GO 1415
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 49
// end ; end ; end ;
1415: LD_VAR 0 1
1419: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1420: LD_INT 0
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_STRING 06_VehiclesIn06_1
1434: PPUSH
1435: EMPTY
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// uc_side = 1 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if vehicles > 0 then
1450: LD_VAR 0 5
1454: PUSH
1455: LD_INT 0
1457: GREATER
1458: IFFALSE 1676
// begin for i := 1 to vehicles do
1460: LD_ADDR_VAR 0 2
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 5
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1674
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_VAR 0 5
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: ARRAY
1513: PUSH
1514: LD_INT 2
1516: ARRAY
1517: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 3
1536: ARRAY
1537: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1538: LD_ADDR_OWVAR 38
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1558: LD_ADDR_OWVAR 40
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 5
1576: ARRAY
1577: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1578: LD_ADDR_OWVAR 41
1582: PUSH
1583: LD_INT 40
1585: ST_TO_ADDR
// veh = CreateVehicle ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: CALL_OW 45
1595: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1596: LD_VAR 0 4
1600: PPUSH
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1623: LD_OWVAR 40
1627: PUSH
1628: LD_INT 12
1630: EQUAL
1631: IFFALSE 1672
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 7
1666: ARRAY
1667: PPUSH
1668: CALL_OW 291
// end ;
1672: GO 1475
1674: POP
1675: POP
// end ; end ;
1676: LD_VAR 0 1
1680: RET
// export function PrepareOthers ; var i , veh ; begin
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
// uc_side = 1 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// uc_nation = 1 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1702: LD_ADDR_EXP 11
1706: PUSH
1707: LD_STRING OthersIn06
1709: PPUSH
1710: CALL_OW 31
1714: ST_TO_ADDR
// for i in others do
1715: LD_ADDR_VAR 0 2
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: FOR_IN
1726: IFFALSE 1816
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1728: LD_ADDR_VAR 0 3
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 21
1745: PUSH
1746: LD_INT 2
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 58
1755: PUSH
1756: EMPTY
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: ST_TO_ADDR
// if veh > 0 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1799
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1779: LD_VAR 0 2
1783: PPUSH
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 52
// end else
1797: GO 1814
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 2
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// end ; end ;
1814: GO 1725
1816: POP
1817: POP
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
// uc_side = 1 ;
1828: LD_ADDR_OWVAR 20
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// uc_nation = 0 ;
1836: LD_ADDR_OWVAR 21
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1844: LD_ADDR_EXP 12
1848: PUSH
1849: LD_STRING ApeIn06
1851: PPUSH
1852: CALL_OW 31
1856: ST_TO_ADDR
// for i in ape do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_EXP 12
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1887
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
1885: GO 1867
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 1
1893: RET
// export function PrepareDenis ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_STRING Denis
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL 4653 0 2
1928: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1929: LD_EXP 9
1933: PPUSH
1934: LD_INT 13
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1944: LD_EXP 9
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1956: LD_EXP 9
1960: PPUSH
1961: LD_INT 750
1963: PPUSH
1964: CALL_OW 234
// end ;
1968: LD_VAR 0 1
1972: RET
// export function HarrisonSupport ; var un , veh ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// uc_nation = 1 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// vc_engine = 1 ;
1994: LD_ADDR_OWVAR 39
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_control = 1 ;
2002: LD_ADDR_OWVAR 38
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2010: LD_ADDR_OWVAR 40
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_OWVAR 67
2033: ARRAY
2034: ST_TO_ADDR
// vc_chassis = 2 ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// veh = CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
// hc_class := 2 ;
2080: LD_ADDR_OWVAR 28
2084: PUSH
2085: LD_INT 2
2087: ST_TO_ADDR
// hc_sex := sex_male ;
2088: LD_ADDR_OWVAR 27
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2096: LD_ADDR_OWVAR 33
2100: PUSH
2101: LD_STRING SecondCharsGal
2103: ST_TO_ADDR
// hc_face_number := 52 ;
2104: LD_ADDR_OWVAR 34
2108: PUSH
2109: LD_INT 52
2111: ST_TO_ADDR
// hc_name := Craig Brown ;
2112: LD_ADDR_OWVAR 26
2116: PUSH
2117: LD_STRING Craig Brown
2119: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2120: LD_ADDR_OWVAR 31
2124: PUSH
2125: LD_INT 1
2127: PUSH
2128: LD_INT 3
2130: PUSH
2131: LD_INT 1
2133: PUSH
2134: LD_INT 0
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2143: LD_ADDR_EXP 16
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2153: LD_EXP 16
2157: PPUSH
2158: LD_VAR 0 3
2162: PPUSH
2163: CALL_OW 52
// vc_engine = 1 ;
2167: LD_ADDR_OWVAR 39
2171: PUSH
2172: LD_INT 1
2174: ST_TO_ADDR
// vc_control = 1 ;
2175: LD_ADDR_OWVAR 38
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2183: LD_ADDR_OWVAR 40
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 2
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_OWVAR 67
2206: ARRAY
2207: ST_TO_ADDR
// vc_chassis = 2 ;
2208: LD_ADDR_OWVAR 37
2212: PUSH
2213: LD_INT 2
2215: ST_TO_ADDR
// veh = CreateVehicle ;
2216: LD_ADDR_VAR 0 3
2220: PUSH
2221: CALL_OW 45
2225: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2226: LD_VAR 0 3
2230: PPUSH
2231: LD_INT 2
2233: PPUSH
2234: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_INT 3
2245: PPUSH
2246: LD_INT 0
2248: PPUSH
2249: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2253: LD_VAR 0 3
2257: PPUSH
2258: LD_INT 50
2260: PPUSH
2261: CALL_OW 240
// hc_class := 1 ;
2265: LD_ADDR_OWVAR 28
2269: PUSH
2270: LD_INT 1
2272: ST_TO_ADDR
// hc_sex := sex_female ;
2273: LD_ADDR_OWVAR 27
2277: PUSH
2278: LD_INT 2
2280: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2281: LD_ADDR_OWVAR 33
2285: PUSH
2286: LD_STRING SecondCharsGal
2288: ST_TO_ADDR
// hc_face_number := 45 ;
2289: LD_ADDR_OWVAR 34
2293: PUSH
2294: LD_INT 45
2296: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2297: LD_ADDR_OWVAR 26
2301: PUSH
2302: LD_STRING Ingrid Jonsson
2304: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2305: LD_ADDR_OWVAR 31
2309: PUSH
2310: LD_INT 1
2312: PUSH
2313: LD_INT 3
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: LD_INT 0
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: LIST
2327: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2328: LD_ADDR_EXP 17
2332: PUSH
2333: CALL_OW 44
2337: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2338: LD_EXP 17
2342: PPUSH
2343: LD_VAR 0 3
2347: PPUSH
2348: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2352: LD_VAR 0 3
2356: PPUSH
2357: LD_INT 45
2359: PPUSH
2360: CALL_OW 240
// end ;
2364: LD_VAR 0 1
2368: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2369: LD_INT 0
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
2375: PPUSH
// j = 0 ;
2376: LD_ADDR_VAR 0 3
2380: PUSH
2381: LD_INT 0
2383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2384: LD_INT 35
2386: PPUSH
2387: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2391: LD_ADDR_VAR 0 2
2395: PUSH
2396: LD_INT 22
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 21
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: PUSH
2416: LD_INT 2
2418: PUSH
2419: LD_INT 25
2421: PUSH
2422: LD_INT 1
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 25
2431: PUSH
2432: LD_INT 2
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: PUSH
2439: LD_INT 25
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: PUSH
2449: LD_INT 25
2451: PUSH
2452: LD_INT 4
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: PPUSH
2471: CALL_OW 69
2475: PUSH
2476: FOR_IN
2477: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2479: LD_INT 22
2481: PUSH
2482: LD_INT 3
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: LD_INT 21
2494: PUSH
2495: LD_INT 1
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: LD_INT 21
2504: PUSH
2505: LD_INT 2
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 21
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 59
2524: PUSH
2525: EMPTY
2526: LIST
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 91
2537: PUSH
2538: LD_VAR 0 2
2542: PUSH
2543: LD_INT 25
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: PPUSH
2556: CALL_OW 69
2560: NOT
2561: PUSH
2562: LD_VAR 0 2
2566: PPUSH
2567: LD_EXP 1
2571: PPUSH
2572: CALL_OW 296
2576: PUSH
2577: LD_INT 15
2579: LESS
2580: AND
2581: IFFALSE 2601
// begin tmp = i ;
2583: LD_ADDR_VAR 0 4
2587: PUSH
2588: LD_VAR 0 2
2592: ST_TO_ADDR
// j = 1 ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 1
2600: ST_TO_ADDR
// end ; end ;
2601: GO 2476
2603: POP
2604: POP
// until j = 1 ;
2605: LD_VAR 0 3
2609: PUSH
2610: LD_INT 1
2612: EQUAL
2613: IFFALSE 2384
// blockSpawn = 1 ;
2615: LD_ADDR_EXP 28
2619: PUSH
2620: LD_INT 1
2622: ST_TO_ADDR
// uc_side = 4 ;
2623: LD_ADDR_OWVAR 20
2627: PUSH
2628: LD_INT 4
2630: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2631: LD_ADDR_EXP 14
2635: PUSH
2636: LD_STRING Joan
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL 4653 0 2
2646: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2647: LD_EXP 14
2651: PPUSH
2652: LD_VAR 0 4
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_VAR 0 4
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 5
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_INT 250
2689: PPUSH
2690: CALL_OW 234
// InGameOn ;
2694: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2698: LD_EXP 14
2702: PPUSH
2703: CALL_OW 87
// wait ( 0 0$2 ) ;
2707: LD_INT 70
2709: PPUSH
2710: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2714: LD_VAR 0 4
2718: PPUSH
2719: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2723: LD_VAR 0 4
2727: PPUSH
2728: CALL_OW 122
// wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2739: LD_VAR 0 4
2743: PPUSH
2744: LD_EXP 14
2748: PPUSH
2749: CALL_OW 112
// wait ( 0 0$2 ) ;
2753: LD_INT 70
2755: PPUSH
2756: CALL_OW 67
// DialogueOn ;
2760: CALL_OW 6
// if tmp = JMM then
2764: LD_VAR 0 4
2768: PUSH
2769: LD_EXP 1
2773: EQUAL
2774: IFFALSE 2923
// begin ComTurnUnit ( JMM , Joan ) ;
2776: LD_EXP 1
2780: PPUSH
2781: LD_EXP 14
2785: PPUSH
2786: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2790: LD_EXP 1
2794: PPUSH
2795: LD_STRING D5b-JMM-1
2797: PPUSH
2798: CALL_OW 88
// DialogueOff ;
2802: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_INT 500
2813: PPUSH
2814: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2818: LD_EXP 14
2822: PPUSH
2823: LD_EXP 1
2827: PPUSH
2828: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2832: LD_EXP 1
2836: PPUSH
2837: LD_EXP 14
2841: PPUSH
2842: CALL_OW 119
// wait ( 0 0$1 ) ;
2846: LD_INT 35
2848: PPUSH
2849: CALL_OW 67
// DialogueOn ;
2853: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2857: LD_EXP 14
2861: PPUSH
2862: LD_STRING D5b-Joan-1
2864: PPUSH
2865: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2869: LD_EXP 1
2873: PPUSH
2874: LD_STRING D5b-JMM-2
2876: PPUSH
2877: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2881: LD_EXP 14
2885: PPUSH
2886: LD_STRING D5b-Joan-2
2888: PPUSH
2889: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2893: LD_EXP 1
2897: PPUSH
2898: LD_STRING D5b-JMM-3
2900: PPUSH
2901: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2905: LD_EXP 14
2909: PPUSH
2910: LD_STRING D5b-Joan-3
2912: PPUSH
2913: CALL_OW 88
// DialogueOff ;
2917: CALL_OW 7
// end else
2921: GO 3258
// begin ComTurnUnit ( tmp , Joan ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_EXP 14
2932: PPUSH
2933: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
2937: LD_VAR 0 4
2941: PPUSH
2942: LD_STRING D5a-Sol1-1
2944: PPUSH
2945: CALL_OW 88
// DialogueOff ;
2949: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2953: LD_EXP 14
2957: PPUSH
2958: LD_INT 500
2960: PPUSH
2961: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
2965: LD_EXP 14
2969: PPUSH
2970: LD_VAR 0 4
2974: PPUSH
2975: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
2979: LD_VAR 0 4
2983: PPUSH
2984: LD_EXP 14
2988: PPUSH
2989: CALL_OW 119
// wait ( 0 0$1 ) ;
2993: LD_INT 35
2995: PPUSH
2996: CALL_OW 67
// DialogueOn ;
3000: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3004: LD_EXP 14
3008: PPUSH
3009: LD_STRING D5a-Joan-1
3011: PPUSH
3012: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3016: LD_VAR 0 4
3020: PPUSH
3021: LD_STRING D5a-Sol1-2
3023: PPUSH
3024: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3028: LD_EXP 14
3032: PPUSH
3033: LD_STRING D5a-Joan-2
3035: PPUSH
3036: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3040: LD_VAR 0 4
3044: PPUSH
3045: LD_STRING D5a-Sol1-3
3047: PPUSH
3048: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3052: LD_EXP 14
3056: PPUSH
3057: LD_STRING D5a-Joan-3
3059: PPUSH
3060: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_STRING D5a-Sol1-4
3071: PPUSH
3072: CALL_OW 88
// DialogueOff ;
3076: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3080: LD_EXP 1
3084: PPUSH
3085: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3089: LD_EXP 1
3093: PPUSH
3094: CALL_OW 122
// wait ( 0 0$1 ) ;
3098: LD_INT 35
3100: PPUSH
3101: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3105: LD_INT 35
3107: PPUSH
3108: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3112: LD_EXP 14
3116: PUSH
3117: LD_VAR 0 4
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PPUSH
3126: LD_EXP 1
3130: PPUSH
3131: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3135: LD_EXP 14
3139: PPUSH
3140: LD_EXP 1
3144: PPUSH
3145: CALL_OW 296
3149: PUSH
3150: LD_INT 5
3152: LESS
3153: IFFALSE 3105
// ComTurnUnit ( Joan , JMM ) ;
3155: LD_EXP 14
3159: PPUSH
3160: LD_EXP 1
3164: PPUSH
3165: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3169: LD_EXP 1
3173: PPUSH
3174: LD_EXP 14
3178: PPUSH
3179: CALL_OW 119
// wait ( 0 0$1 ) ;
3183: LD_INT 35
3185: PPUSH
3186: CALL_OW 67
// DialogueOn ;
3190: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3194: LD_EXP 14
3198: PPUSH
3199: LD_STRING D5a-Joan-4
3201: PPUSH
3202: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3206: LD_EXP 1
3210: PPUSH
3211: LD_STRING D5a-JMM-4
3213: PPUSH
3214: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3218: LD_EXP 14
3222: PPUSH
3223: LD_STRING D5a-Joan-5
3225: PPUSH
3226: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3230: LD_EXP 1
3234: PPUSH
3235: LD_STRING D5a-JMM-5
3237: PPUSH
3238: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3242: LD_EXP 14
3246: PPUSH
3247: LD_STRING D5a-Joan-6
3249: PPUSH
3250: CALL_OW 88
// DialogueOff ;
3254: CALL_OW 7
// end ; DialogueOn ;
3258: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3262: LD_EXP 1
3266: PPUSH
3267: LD_STRING D6-JMM-1
3269: PPUSH
3270: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3274: LD_EXP 14
3278: PPUSH
3279: LD_STRING D6-Joan-1
3281: PPUSH
3282: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3286: LD_EXP 1
3290: PPUSH
3291: LD_STRING D6-JMM-2
3293: PPUSH
3294: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3298: LD_EXP 14
3302: PPUSH
3303: LD_STRING D6-Joan-2
3305: PPUSH
3306: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3310: LD_EXP 1
3314: PPUSH
3315: LD_STRING D6-JMM-3
3317: PPUSH
3318: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3322: LD_EXP 14
3326: PPUSH
3327: LD_STRING D6-Joan-3
3329: PPUSH
3330: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3334: LD_EXP 1
3338: PPUSH
3339: LD_STRING D6-JMM-4
3341: PPUSH
3342: CALL_OW 88
// DialogueOff ;
3346: CALL_OW 7
// InGameOff ;
3350: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3354: LD_EXP 14
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3366: LD_STRING MJ
3368: PPUSH
3369: CALL_OW 337
// JoanStatus = 1 ;
3373: LD_ADDR_EXP 15
3377: PUSH
3378: LD_INT 1
3380: ST_TO_ADDR
// blockSpawn = 0 ;
3381: LD_ADDR_EXP 28
3385: PUSH
3386: LD_INT 0
3388: ST_TO_ADDR
// end ;
3389: LD_VAR 0 1
3393: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3394: LD_INT 0
3396: PPUSH
3397: PPUSH
// repeat wait ( 0 0$7 ) ;
3398: LD_INT 245
3400: PPUSH
3401: CALL_OW 67
// until blockSpawn = 0 ;
3405: LD_EXP 28
3409: PUSH
3410: LD_INT 0
3412: EQUAL
3413: IFFALSE 3398
// uc_side = 1 ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_INT 1
3422: ST_TO_ADDR
// uc_nation = 1 ;
3423: LD_ADDR_OWVAR 21
3427: PUSH
3428: LD_INT 1
3430: ST_TO_ADDR
// if number = 1 then
3431: LD_VAR 0 1
3435: PUSH
3436: LD_INT 1
3438: EQUAL
3439: IFFALSE 3577
// begin hc_class := 1 ;
3441: LD_ADDR_OWVAR 28
3445: PUSH
3446: LD_INT 1
3448: ST_TO_ADDR
// hc_sex := sex_male ;
3449: LD_ADDR_OWVAR 27
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3457: LD_ADDR_OWVAR 33
3461: PUSH
3462: LD_STRING AmGalRemake
3464: ST_TO_ADDR
// hc_face_number := 7 ;
3465: LD_ADDR_OWVAR 34
3469: PUSH
3470: LD_INT 7
3472: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3473: LD_ADDR_OWVAR 26
3477: PUSH
3478: LD_STRING Bobby Jordan
3480: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3481: LD_ADDR_OWVAR 31
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: LD_INT 1
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: LD_INT 1
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: ST_TO_ADDR
// un = CreateHuman ;
3504: LD_ADDR_VAR 0 3
3508: PUSH
3509: CALL_OW 44
3513: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3514: LD_VAR 0 3
3518: PPUSH
3519: LD_INT 12
3521: PPUSH
3522: LD_INT 1
3524: PPUSH
3525: CALL_OW 49
// wait ( 0 0$1 ) ;
3529: LD_INT 35
3531: PPUSH
3532: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3536: LD_VAR 0 3
3540: PPUSH
3541: CALL_OW 87
// DialogueOn ;
3545: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_STRING D11b-Sol3-1
3556: PPUSH
3557: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3561: LD_EXP 1
3565: PPUSH
3566: LD_STRING D11b-JMM-1
3568: PPUSH
3569: CALL_OW 88
// DialogueOff ;
3573: CALL_OW 7
// end ; if number = 2 then
3577: LD_VAR 0 1
3581: PUSH
3582: LD_INT 2
3584: EQUAL
3585: IFFALSE 3723
// begin hc_class := 3 ;
3587: LD_ADDR_OWVAR 28
3591: PUSH
3592: LD_INT 3
3594: ST_TO_ADDR
// hc_sex := sex_male ;
3595: LD_ADDR_OWVAR 27
3599: PUSH
3600: LD_INT 1
3602: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3603: LD_ADDR_OWVAR 33
3607: PUSH
3608: LD_STRING SecondCharsGal
3610: ST_TO_ADDR
// hc_face_number := 55 ;
3611: LD_ADDR_OWVAR 34
3615: PUSH
3616: LD_INT 55
3618: ST_TO_ADDR
// hc_name := George McCarthy ;
3619: LD_ADDR_OWVAR 26
3623: PUSH
3624: LD_STRING George McCarthy
3626: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3627: LD_ADDR_OWVAR 31
3631: PUSH
3632: LD_INT 1
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: LD_INT 1
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: ST_TO_ADDR
// un = CreateHuman ;
3650: LD_ADDR_VAR 0 3
3654: PUSH
3655: CALL_OW 44
3659: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3660: LD_VAR 0 3
3664: PPUSH
3665: LD_INT 12
3667: PPUSH
3668: LD_INT 1
3670: PPUSH
3671: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3675: LD_VAR 0 3
3679: PPUSH
3680: CALL_OW 87
// wait ( 0 0$1 ) ;
3684: LD_INT 35
3686: PPUSH
3687: CALL_OW 67
// DialogueOn ;
3691: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_STRING D11d-Sol4-1
3702: PPUSH
3703: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3707: LD_EXP 1
3711: PPUSH
3712: LD_STRING D11d-JMM-1
3714: PPUSH
3715: CALL_OW 88
// DialogueOff ;
3719: CALL_OW 7
// end ; if number = 4 then
3723: LD_VAR 0 1
3727: PUSH
3728: LD_INT 4
3730: EQUAL
3731: IFFALSE 3857
// begin hc_class := 3 ;
3733: LD_ADDR_OWVAR 28
3737: PUSH
3738: LD_INT 3
3740: ST_TO_ADDR
// hc_sex := sex_female ;
3741: LD_ADDR_OWVAR 27
3745: PUSH
3746: LD_INT 2
3748: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3749: LD_ADDR_OWVAR 33
3753: PUSH
3754: LD_STRING SecondCharsGal
3756: ST_TO_ADDR
// hc_face_number := 46 ;
3757: LD_ADDR_OWVAR 34
3761: PUSH
3762: LD_INT 46
3764: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3765: LD_ADDR_OWVAR 26
3769: PUSH
3770: LD_STRING Sylvia Creak
3772: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3773: LD_ADDR_OWVAR 31
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 1
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: ST_TO_ADDR
// un = CreateHuman ;
3796: LD_ADDR_VAR 0 3
3800: PUSH
3801: CALL_OW 44
3805: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3806: LD_VAR 0 3
3810: PPUSH
3811: LD_INT 12
3813: PPUSH
3814: LD_INT 1
3816: PPUSH
3817: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: CALL_OW 87
// wait ( 0 0$1 ) ;
3830: LD_INT 35
3832: PPUSH
3833: CALL_OW 67
// DialogueOn ;
3837: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3841: LD_VAR 0 3
3845: PPUSH
3846: LD_STRING D11e-FSol4-1
3848: PPUSH
3849: CALL_OW 88
// DialogueOff ;
3853: CALL_OW 7
// end ; if number = 5 then
3857: LD_VAR 0 1
3861: PUSH
3862: LD_INT 5
3864: EQUAL
3865: IFFALSE 4003
// begin hc_class := 1 ;
3867: LD_ADDR_OWVAR 28
3871: PUSH
3872: LD_INT 1
3874: ST_TO_ADDR
// hc_sex := sex_female ;
3875: LD_ADDR_OWVAR 27
3879: PUSH
3880: LD_INT 2
3882: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3883: LD_ADDR_OWVAR 33
3887: PUSH
3888: LD_STRING SecondCharsGal
3890: ST_TO_ADDR
// hc_face_number := 37 ;
3891: LD_ADDR_OWVAR 34
3895: PUSH
3896: LD_INT 37
3898: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3899: LD_ADDR_OWVAR 26
3903: PUSH
3904: LD_STRING Margherite Simpson
3906: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3907: LD_ADDR_OWVAR 31
3911: PUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 1
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: ST_TO_ADDR
// un = CreateHuman ;
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: CALL_OW 44
3939: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3940: LD_VAR 0 3
3944: PPUSH
3945: LD_INT 12
3947: PPUSH
3948: LD_INT 1
3950: PPUSH
3951: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3955: LD_VAR 0 3
3959: PPUSH
3960: CALL_OW 87
// wait ( 0 0$1 ) ;
3964: LD_INT 35
3966: PPUSH
3967: CALL_OW 67
// DialogueOn ;
3971: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3975: LD_VAR 0 3
3979: PPUSH
3980: LD_STRING D11c-FSol3-1
3982: PPUSH
3983: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3987: LD_EXP 1
3991: PPUSH
3992: LD_STRING D11c-JMM-1
3994: PPUSH
3995: CALL_OW 88
// DialogueOff ;
3999: CALL_OW 7
// end ; if number = 6 then
4003: LD_VAR 0 1
4007: PUSH
4008: LD_INT 6
4010: EQUAL
4011: IFFALSE 4137
// begin hc_class := 1 ;
4013: LD_ADDR_OWVAR 28
4017: PUSH
4018: LD_INT 1
4020: ST_TO_ADDR
// hc_sex := sex_male ;
4021: LD_ADDR_OWVAR 27
4025: PUSH
4026: LD_INT 1
4028: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4029: LD_ADDR_OWVAR 33
4033: PUSH
4034: LD_STRING AmGalRemake
4036: ST_TO_ADDR
// hc_face_number := 1 ;
4037: LD_ADDR_OWVAR 34
4041: PUSH
4042: LD_INT 1
4044: ST_TO_ADDR
// hc_name := Charles Brown ;
4045: LD_ADDR_OWVAR 26
4049: PUSH
4050: LD_STRING Charles Brown
4052: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
4053: LD_ADDR_OWVAR 31
4057: PUSH
4058: LD_INT 2
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: LD_INT 0
4066: PUSH
4067: LD_INT 1
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: ST_TO_ADDR
// un = CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4086: LD_VAR 0 3
4090: PPUSH
4091: LD_INT 12
4093: PPUSH
4094: LD_INT 1
4096: PPUSH
4097: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4101: LD_VAR 0 3
4105: PPUSH
4106: CALL_OW 87
// wait ( 0 0$1 ) ;
4110: LD_INT 35
4112: PPUSH
4113: CALL_OW 67
// DialogueOn ;
4117: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_STRING D11f-Sol5-1
4128: PPUSH
4129: CALL_OW 88
// DialogueOff ;
4133: CALL_OW 7
// end ; if number = 7 then
4137: LD_VAR 0 1
4141: PUSH
4142: LD_INT 7
4144: EQUAL
4145: IFFALSE 4271
// begin hc_class := 1 ;
4147: LD_ADDR_OWVAR 28
4151: PUSH
4152: LD_INT 1
4154: ST_TO_ADDR
// hc_sex := sex_female ;
4155: LD_ADDR_OWVAR 27
4159: PUSH
4160: LD_INT 2
4162: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4163: LD_ADDR_OWVAR 33
4167: PUSH
4168: LD_STRING AmGalRemake
4170: ST_TO_ADDR
// hc_face_number := 2 ;
4171: LD_ADDR_OWVAR 34
4175: PUSH
4176: LD_INT 2
4178: ST_TO_ADDR
// hc_name := Johanna Holland ;
4179: LD_ADDR_OWVAR 26
4183: PUSH
4184: LD_STRING Johanna Holland
4186: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4187: LD_ADDR_OWVAR 31
4191: PUSH
4192: LD_INT 1
4194: PUSH
4195: LD_INT 0
4197: PUSH
4198: LD_INT 0
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: ST_TO_ADDR
// un = CreateHuman ;
4210: LD_ADDR_VAR 0 3
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4220: LD_VAR 0 3
4224: PPUSH
4225: LD_INT 12
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4235: LD_VAR 0 3
4239: PPUSH
4240: CALL_OW 87
// wait ( 0 0$1 ) ;
4244: LD_INT 35
4246: PPUSH
4247: CALL_OW 67
// DialogueOn ;
4251: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4255: LD_VAR 0 3
4259: PPUSH
4260: LD_STRING D11a-FSol2-1
4262: PPUSH
4263: CALL_OW 88
// DialogueOff ;
4267: CALL_OW 7
// end ; end ; end_of_file
4271: LD_VAR 0 2
4275: RET
// export function PrepareRussian ; var i ; begin
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4280: LD_INT 3
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: LD_EXP 33
4293: PPUSH
4294: LD_EXP 34
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: LD_INT 2
4306: PPUSH
4307: LD_INT 4
4309: PPUSH
4310: CALL 4923 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4314: LD_INT 3
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: LD_INT 8
4322: PPUSH
4323: LD_EXP 33
4327: PPUSH
4328: LD_EXP 34
4332: PPUSH
4333: CALL_OW 12
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_INT 4
4343: PPUSH
4344: CALL 4923 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 3
4353: PPUSH
4354: LD_INT 67
4356: PPUSH
4357: LD_EXP 33
4361: PPUSH
4362: LD_EXP 34
4366: PPUSH
4367: CALL_OW 12
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_INT 2
4377: PPUSH
4378: CALL 4923 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4382: LD_INT 3
4384: PPUSH
4385: LD_INT 3
4387: PPUSH
4388: LD_INT 21
4390: PPUSH
4391: LD_EXP 33
4395: PPUSH
4396: LD_EXP 34
4400: PPUSH
4401: CALL_OW 12
4405: PPUSH
4406: LD_INT 3
4408: PPUSH
4409: LD_INT 6
4411: PPUSH
4412: CALL 4923 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4416: LD_INT 3
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: LD_INT 17
4424: PPUSH
4425: LD_EXP 33
4429: PPUSH
4430: LD_EXP 34
4434: PPUSH
4435: CALL_OW 12
4439: PPUSH
4440: LD_INT 3
4442: PPUSH
4443: LD_INT 6
4445: PPUSH
4446: CALL 4923 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4450: LD_INT 3
4452: PPUSH
4453: LD_INT 3
4455: PPUSH
4456: LD_INT 32
4458: PPUSH
4459: LD_EXP 33
4463: PPUSH
4464: LD_EXP 34
4468: PPUSH
4469: CALL_OW 12
4473: PPUSH
4474: LD_INT 4
4476: PPUSH
4477: LD_INT 2
4479: PPUSH
4480: CALL 4923 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4484: LD_ADDR_VAR 0 2
4488: PUSH
4489: LD_INT 22
4491: PUSH
4492: LD_INT 3
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 21
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: LD_INT 30
4511: PUSH
4512: LD_INT 32
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: PPUSH
4524: CALL_OW 69
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4570
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4532: LD_INT 3
4534: PPUSH
4535: LD_INT 3
4537: PPUSH
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_EXP 33
4547: PPUSH
4548: LD_EXP 34
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: LD_INT 1
4563: PPUSH
4564: CALL 4923 0 6
4568: GO 4529
4570: POP
4571: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: LD_INT 22
4579: PUSH
4580: LD_INT 3
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 21
4589: PUSH
4590: LD_INT 3
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 31
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 69
4616: PUSH
4617: FOR_IN
4618: IFFALSE 4646
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4620: LD_EXP 33
4624: PPUSH
4625: LD_EXP 34
4629: PPUSH
4630: CALL_OW 12
4634: PPUSH
4635: LD_VAR 0 2
4639: PPUSH
4640: CALL 5033 0 2
4644: GO 4617
4646: POP
4647: POP
// end ; end_of_file
4648: LD_VAR 0 1
4652: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4653: LD_INT 0
4655: PPUSH
4656: PPUSH
// if exist_mode then
4657: LD_VAR 0 2
4661: IFFALSE 4686
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: LD_EXP 41
4672: PUSH
4673: LD_VAR 0 1
4677: STR
4678: PPUSH
4679: CALL_OW 34
4683: ST_TO_ADDR
// end else
4684: GO 4701
// begin unit := NewCharacter ( ident ) ;
4686: LD_ADDR_VAR 0 4
4690: PUSH
4691: LD_VAR 0 1
4695: PPUSH
4696: CALL_OW 25
4700: ST_TO_ADDR
// end ; result := unit ;
4701: LD_ADDR_VAR 0 3
4705: PUSH
4706: LD_VAR 0 4
4710: ST_TO_ADDR
// end ;
4711: LD_VAR 0 3
4715: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4716: LD_INT 0
4718: PPUSH
4719: PPUSH
4720: PPUSH
// rnd = rand ( 1 , characters ) ;
4721: LD_ADDR_VAR 0 6
4725: PUSH
4726: LD_INT 1
4728: PPUSH
4729: LD_VAR 0 1
4733: PPUSH
4734: CALL_OW 12
4738: ST_TO_ADDR
// for i = 1 to characters do
4739: LD_ADDR_VAR 0 5
4743: PUSH
4744: DOUBLE
4745: LD_INT 1
4747: DEC
4748: ST_TO_ADDR
4749: LD_VAR 0 1
4753: PUSH
4754: FOR_TO
4755: IFFALSE 4865
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4757: LD_VAR 0 5
4761: PUSH
4762: LD_VAR 0 6
4766: EQUAL
4767: PUSH
4768: LD_VAR 0 1
4772: PUSH
4773: LD_VAR 0 5
4777: ARRAY
4778: PPUSH
4779: CALL_OW 258
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: AND
4788: IFFALSE 4810
// Say ( characters [ i ] , dialogMID ) ;
4790: LD_VAR 0 1
4794: PUSH
4795: LD_VAR 0 5
4799: ARRAY
4800: PPUSH
4801: LD_VAR 0 2
4805: PPUSH
4806: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4810: LD_VAR 0 5
4814: PUSH
4815: LD_VAR 0 6
4819: EQUAL
4820: PUSH
4821: LD_VAR 0 1
4825: PUSH
4826: LD_VAR 0 5
4830: ARRAY
4831: PPUSH
4832: CALL_OW 258
4836: PUSH
4837: LD_INT 2
4839: EQUAL
4840: AND
4841: IFFALSE 4863
// Say ( characters [ i ] , dialogFID ) ;
4843: LD_VAR 0 1
4847: PUSH
4848: LD_VAR 0 5
4852: ARRAY
4853: PPUSH
4854: LD_VAR 0 3
4858: PPUSH
4859: CALL_OW 88
// end ;
4863: GO 4754
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 4
4871: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4872: LD_INT 0
4874: PPUSH
4875: PPUSH
// for i in charactersList do
4876: LD_ADDR_VAR 0 4
4880: PUSH
4881: LD_VAR 0 1
4885: PUSH
4886: FOR_IN
4887: IFFALSE 4916
// begin if IsOk ( i ) then
4889: LD_VAR 0 4
4893: PPUSH
4894: CALL_OW 302
4898: IFFALSE 4914
// SaveCharacters ( i , ident ) ;
4900: LD_VAR 0 4
4904: PPUSH
4905: LD_VAR 0 2
4909: PPUSH
4910: CALL_OW 38
// end ;
4914: GO 4886
4916: POP
4917: POP
// end ;
4918: LD_VAR 0 3
4922: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4923: LD_INT 0
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
// for i = 1 to count do
4929: LD_ADDR_VAR 0 8
4933: PUSH
4934: DOUBLE
4935: LD_INT 1
4937: DEC
4938: ST_TO_ADDR
4939: LD_VAR 0 6
4943: PUSH
4944: FOR_TO
4945: IFFALSE 5026
// begin uc_side = side ;
4947: LD_ADDR_OWVAR 20
4951: PUSH
4952: LD_VAR 0 1
4956: ST_TO_ADDR
// uc_nation = nation ;
4957: LD_ADDR_OWVAR 21
4961: PUSH
4962: LD_VAR 0 2
4966: ST_TO_ADDR
// hc_gallery =  ;
4967: LD_ADDR_OWVAR 33
4971: PUSH
4972: LD_STRING 
4974: ST_TO_ADDR
// hc_name =  ;
4975: LD_ADDR_OWVAR 26
4979: PUSH
4980: LD_STRING 
4982: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4983: LD_INT 0
4985: PPUSH
4986: LD_VAR 0 5
4990: PPUSH
4991: LD_VAR 0 4
4995: PPUSH
4996: CALL_OW 380
// un = CreateHuman ;
5000: LD_ADDR_VAR 0 10
5004: PUSH
5005: CALL_OW 44
5009: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5010: LD_VAR 0 10
5014: PPUSH
5015: LD_VAR 0 3
5019: PPUSH
5020: CALL_OW 52
// end ;
5024: GO 4944
5026: POP
5027: POP
// end ;
5028: LD_VAR 0 7
5032: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5033: LD_INT 0
5035: PPUSH
5036: PPUSH
5037: PPUSH
// uc_side := GetSide ( b ) ;
5038: LD_ADDR_OWVAR 20
5042: PUSH
5043: LD_VAR 0 2
5047: PPUSH
5048: CALL_OW 255
5052: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5053: LD_ADDR_OWVAR 21
5057: PUSH
5058: LD_VAR 0 2
5062: PPUSH
5063: CALL_OW 248
5067: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: LD_VAR 0 1
5078: PPUSH
5079: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5083: LD_ADDR_VAR 0 5
5087: PUSH
5088: LD_VAR 0 2
5092: PPUSH
5093: CALL_OW 254
5097: PUSH
5098: LD_INT 3
5100: MINUS
5101: ST_TO_ADDR
// if dir < 0 then
5102: LD_VAR 0 5
5106: PUSH
5107: LD_INT 0
5109: LESS
5110: IFFALSE 5126
// dir := 6 + dir ;
5112: LD_ADDR_VAR 0 5
5116: PUSH
5117: LD_INT 6
5119: PUSH
5120: LD_VAR 0 5
5124: PLUS
5125: ST_TO_ADDR
// un := CreateHuman ;
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: CALL_OW 44
5135: ST_TO_ADDR
// SetDir ( un , dir ) ;
5136: LD_VAR 0 4
5140: PPUSH
5141: LD_VAR 0 5
5145: PPUSH
5146: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5150: LD_VAR 0 4
5154: PPUSH
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 52
// end ;
5164: LD_VAR 0 3
5168: RET
// export function PrepareDifficulty ; begin
5169: LD_INT 0
5171: PPUSH
// if Difficulty = 1 then
5172: LD_OWVAR 67
5176: PUSH
5177: LD_INT 1
5179: EQUAL
5180: IFFALSE 5198
// begin RuSolMinLevel = 2 ;
5182: LD_ADDR_EXP 33
5186: PUSH
5187: LD_INT 2
5189: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5190: LD_ADDR_EXP 34
5194: PUSH
5195: LD_INT 5
5197: ST_TO_ADDR
// end ; if Difficulty = 2 then
5198: LD_OWVAR 67
5202: PUSH
5203: LD_INT 2
5205: EQUAL
5206: IFFALSE 5224
// begin RuSolMinLevel = 3 ;
5208: LD_ADDR_EXP 33
5212: PUSH
5213: LD_INT 3
5215: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5216: LD_ADDR_EXP 34
5220: PUSH
5221: LD_INT 5
5223: ST_TO_ADDR
// end ; if Difficulty = 3 then
5224: LD_OWVAR 67
5228: PUSH
5229: LD_INT 3
5231: EQUAL
5232: IFFALSE 5250
// begin RuSolMinLevel = 4 ;
5234: LD_ADDR_EXP 33
5238: PUSH
5239: LD_INT 4
5241: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5242: LD_ADDR_EXP 34
5246: PUSH
5247: LD_INT 5
5249: ST_TO_ADDR
// end ; end ;
5250: LD_VAR 0 1
5254: RET
// export function ShowQuery1 ; begin
5255: LD_INT 0
5257: PPUSH
// case query ( QKill ) of 1 :
5258: LD_STRING QKill
5260: PPUSH
5261: CALL_OW 97
5265: PUSH
5266: LD_INT 1
5268: DOUBLE
5269: EQUAL
5270: IFTRUE 5274
5272: GO 5285
5274: POP
// begin result = 1 ;
5275: LD_ADDR_VAR 0 1
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// end ; 2 :
5283: GO 5324
5285: LD_INT 2
5287: DOUBLE
5288: EQUAL
5289: IFTRUE 5293
5291: GO 5304
5293: POP
// begin result = 2 ;
5294: LD_ADDR_VAR 0 1
5298: PUSH
5299: LD_INT 2
5301: ST_TO_ADDR
// end ; 3 :
5302: GO 5324
5304: LD_INT 3
5306: DOUBLE
5307: EQUAL
5308: IFTRUE 5312
5310: GO 5323
5312: POP
// begin result = 3 ;
5313: LD_ADDR_VAR 0 1
5317: PUSH
5318: LD_INT 3
5320: ST_TO_ADDR
// end ; end ;
5321: GO 5324
5323: POP
// end ;
5324: LD_VAR 0 1
5328: RET
// export function ShowQuery2 ; begin
5329: LD_INT 0
5331: PPUSH
// case query ( QKill2 ) of 1 :
5332: LD_STRING QKill2
5334: PPUSH
5335: CALL_OW 97
5339: PUSH
5340: LD_INT 1
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5359
5348: POP
// begin result = 1 ;
5349: LD_ADDR_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ST_TO_ADDR
// end ; 2 :
5357: GO 5379
5359: LD_INT 2
5361: DOUBLE
5362: EQUAL
5363: IFTRUE 5367
5365: GO 5378
5367: POP
// begin result = 2 ;
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_INT 2
5375: ST_TO_ADDR
// end ; end ;
5376: GO 5379
5378: POP
// end ;
5379: LD_VAR 0 1
5383: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5384: LD_INT 0
5386: PPUSH
5387: PPUSH
5388: PPUSH
5389: PPUSH
// for i = 1 to 72 do
5390: LD_ADDR_VAR 0 5
5394: PUSH
5395: DOUBLE
5396: LD_INT 1
5398: DEC
5399: ST_TO_ADDR
5400: LD_INT 72
5402: PUSH
5403: FOR_TO
5404: IFFALSE 5462
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5406: LD_VAR 0 5
5410: PPUSH
5411: LD_VAR 0 1
5415: PPUSH
5416: CALL_OW 321
5420: PUSH
5421: LD_INT 1
5423: EQUAL
5424: PUSH
5425: LD_VAR 0 5
5429: PPUSH
5430: LD_VAR 0 3
5434: PPUSH
5435: CALL_OW 482
5439: PUSH
5440: LD_INT 1
5442: EQUAL
5443: AND
5444: IFFALSE 5460
// AddComResearch ( lab , i ) ;
5446: LD_VAR 0 2
5450: PPUSH
5451: LD_VAR 0 5
5455: PPUSH
5456: CALL_OW 184
5460: GO 5403
5462: POP
5463: POP
// end ;
5464: LD_VAR 0 4
5468: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
5473: PPUSH
5474: PPUSH
5475: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5476: LD_ADDR_VAR 0 6
5480: PUSH
5481: LD_INT 22
5483: PUSH
5484: LD_VAR 0 1
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 2
5495: PUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 25
5508: PUSH
5509: LD_INT 16
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 24
5523: PUSH
5524: LD_INT 1000
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: PPUSH
5536: CALL_OW 69
5540: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5541: LD_ADDR_VAR 0 4
5545: PUSH
5546: LD_INT 22
5548: PUSH
5549: LD_VAR 0 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 21
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 3
5570: PUSH
5571: LD_INT 24
5573: PUSH
5574: LD_INT 1000
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5598: LD_VAR 0 4
5602: PUSH
5603: LD_INT 0
5605: GREATER
5606: PUSH
5607: LD_VAR 0 6
5611: PUSH
5612: LD_INT 0
5614: GREATER
5615: AND
5616: IFFALSE 5682
// begin for i in engineerOk_list do
5618: LD_ADDR_VAR 0 5
5622: PUSH
5623: LD_VAR 0 6
5627: PUSH
5628: FOR_IN
5629: IFFALSE 5680
// begin for j in buildings_list do
5631: LD_ADDR_VAR 0 7
5635: PUSH
5636: LD_VAR 0 4
5640: PUSH
5641: FOR_IN
5642: IFFALSE 5676
// begin AddComExitBuilding ( i ) ;
5644: LD_VAR 0 5
5648: PPUSH
5649: CALL_OW 182
// wait ( 0 0$1 ) ;
5653: LD_INT 35
5655: PPUSH
5656: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5660: LD_VAR 0 5
5664: PPUSH
5665: LD_VAR 0 7
5669: PPUSH
5670: CALL_OW 190
// end ;
5674: GO 5641
5676: POP
5677: POP
// end ;
5678: GO 5628
5680: POP
5681: POP
// end ; if buildings_list = 0 then
5682: LD_VAR 0 4
5686: PUSH
5687: LD_INT 0
5689: EQUAL
5690: IFFALSE 5723
// begin for i in engineerOK_list do
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_VAR 0 6
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5721
// begin ComEnterUnit ( i , building ) ;
5705: LD_VAR 0 5
5709: PPUSH
5710: LD_VAR 0 2
5714: PPUSH
5715: CALL_OW 120
// end ;
5719: GO 5702
5721: POP
5722: POP
// end ; end ;
5723: LD_VAR 0 3
5727: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5728: LD_INT 0
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5735: LD_ADDR_VAR 0 6
5739: PUSH
5740: LD_INT 22
5742: PUSH
5743: LD_VAR 0 1
5747: PUSH
5748: EMPTY
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 25
5754: PUSH
5755: LD_INT 4
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5771: LD_ADDR_VAR 0 9
5775: PUSH
5776: LD_VAR 0 3
5780: PPUSH
5781: LD_INT 22
5783: PUSH
5784: LD_VAR 0 1
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 21
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 3
5805: PUSH
5806: LD_INT 24
5808: PUSH
5809: LD_INT 750
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 70
5829: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5830: LD_VAR 0 9
5834: PUSH
5835: LD_INT 0
5837: GREATER
5838: PUSH
5839: LD_VAR 0 6
5843: PUSH
5844: LD_INT 0
5846: GREATER
5847: AND
5848: IFFALSE 5975
// begin for i = 1 to damageUnits do
5850: LD_ADDR_VAR 0 7
5854: PUSH
5855: DOUBLE
5856: LD_INT 1
5858: DEC
5859: ST_TO_ADDR
5860: LD_VAR 0 9
5864: PUSH
5865: FOR_TO
5866: IFFALSE 5890
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5868: LD_VAR 0 9
5872: PUSH
5873: LD_VAR 0 7
5877: ARRAY
5878: PPUSH
5879: LD_VAR 0 2
5883: PPUSH
5884: CALL_OW 113
5888: GO 5865
5890: POP
5891: POP
// for i in sci_list do
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_VAR 0 6
5901: PUSH
5902: FOR_IN
5903: IFFALSE 5971
// begin ComExitBuilding ( i ) ;
5905: LD_VAR 0 7
5909: PPUSH
5910: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5914: LD_ADDR_VAR 0 8
5918: PUSH
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_INT 22
5926: PUSH
5927: LD_VAR 0 1
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PPUSH
5936: CALL_OW 70
5940: PUSH
5941: FOR_IN
5942: IFFALSE 5967
// begin AddComHeal ( i , j ) ;
5944: LD_VAR 0 7
5948: PPUSH
5949: LD_VAR 0 8
5953: PPUSH
5954: CALL_OW 188
// wait ( 1 1$0 ) ;
5958: LD_INT 2100
5960: PPUSH
5961: CALL_OW 67
// end ;
5965: GO 5941
5967: POP
5968: POP
// end ;
5969: GO 5902
5971: POP
5972: POP
// end else
5973: GO 5989
// begin AddComEnterUnit ( sci_list , build ) ;
5975: LD_VAR 0 6
5979: PPUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 180
// end ; end ;
5989: LD_VAR 0 5
5993: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
5994: LD_INT 0
5996: PPUSH
5997: PPUSH
5998: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5999: LD_INT 22
6001: PUSH
6002: LD_VAR 0 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 21
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PPUSH
6025: CALL_OW 69
6029: PUSH
6030: LD_VAR 0 3
6034: LESSEQUAL
6035: IFFALSE 6143
// begin for i = 1 to vehCount do
6037: LD_ADDR_VAR 0 9
6041: PUSH
6042: DOUBLE
6043: LD_INT 1
6045: DEC
6046: ST_TO_ADDR
6047: LD_VAR 0 3
6051: PUSH
6052: FOR_TO
6053: IFFALSE 6141
// begin weapon = weaponTab [ i ] ;
6055: LD_ADDR_VAR 0 10
6059: PUSH
6060: LD_VAR 0 4
6064: PUSH
6065: LD_VAR 0 9
6069: ARRAY
6070: ST_TO_ADDR
// if weapon = 44 then
6071: LD_VAR 0 10
6075: PUSH
6076: LD_INT 44
6078: EQUAL
6079: IFFALSE 6110
// begin AddComConstruct ( fabric , 22 , engine , control , weapon ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_INT 22
6088: PPUSH
6089: LD_VAR 0 5
6093: PPUSH
6094: LD_VAR 0 6
6098: PPUSH
6099: LD_VAR 0 10
6103: PPUSH
6104: CALL_OW 185
// end else
6108: GO 6139
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6110: LD_VAR 0 2
6114: PPUSH
6115: LD_VAR 0 7
6119: PPUSH
6120: LD_VAR 0 5
6124: PPUSH
6125: LD_VAR 0 6
6129: PPUSH
6130: LD_VAR 0 10
6134: PPUSH
6135: CALL_OW 185
// end ; end ;
6139: GO 6052
6141: POP
6142: POP
// end ; end ;
6143: LD_VAR 0 8
6147: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6148: LD_INT 0
6150: PPUSH
6151: PPUSH
6152: PPUSH
6153: PPUSH
6154: PPUSH
// for i := 1 to russianTanks do
6155: LD_ADDR_VAR 0 4
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_EXP 35
6169: PUSH
6170: FOR_TO
6171: IFFALSE 6653
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6173: LD_VAR 0 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 6
6183: PUSH
6184: LD_INT 6
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: LD_OWVAR 67
6196: ARRAY
6197: EQUAL
6198: IFFALSE 6651
// begin repeat wait ( 0 0$1 ) ;
6200: LD_INT 35
6202: PPUSH
6203: CALL_OW 67
// for i in russianTanks do
6207: LD_ADDR_VAR 0 4
6211: PUSH
6212: LD_EXP 35
6216: PUSH
6217: FOR_IN
6218: IFFALSE 6639
// begin if GetLives ( i ) < 659 then
6220: LD_VAR 0 4
6224: PPUSH
6225: CALL_OW 256
6229: PUSH
6230: LD_INT 659
6232: LESS
6233: IFFALSE 6321
// begin tmp = i ;
6235: LD_ADDR_VAR 0 5
6239: PUSH
6240: LD_VAR 0 4
6244: ST_TO_ADDR
// for i := 1 to russianTanks do
6245: LD_ADDR_VAR 0 4
6249: PUSH
6250: DOUBLE
6251: LD_INT 1
6253: DEC
6254: ST_TO_ADDR
6255: LD_EXP 35
6259: PUSH
6260: FOR_TO
6261: IFFALSE 6319
// begin if tmp = russianTanks [ i ] then
6263: LD_VAR 0 5
6267: PUSH
6268: LD_EXP 35
6272: PUSH
6273: LD_VAR 0 4
6277: ARRAY
6278: EQUAL
6279: IFFALSE 6317
// begin russianTanks = Delete ( russianTanks , i ) ;
6281: LD_ADDR_EXP 35
6285: PUSH
6286: LD_EXP 35
6290: PPUSH
6291: LD_VAR 0 4
6295: PPUSH
6296: CALL_OW 3
6300: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6301: LD_ADDR_EXP 36
6305: PUSH
6306: LD_EXP 36
6310: PUSH
6311: LD_VAR 0 5
6315: ADD
6316: ST_TO_ADDR
// end ; end ;
6317: GO 6260
6319: POP
6320: POP
// end ; wait ( 0 0$1 ) ;
6321: LD_INT 35
6323: PPUSH
6324: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6328: LD_INT 23
6330: PPUSH
6331: LD_INT 22
6333: PUSH
6334: LD_INT 1
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: PPUSH
6341: CALL_OW 70
6345: PUSH
6346: LD_INT 2
6348: GREATER
6349: IFFALSE 6459
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 22
6358: PUSH
6359: LD_VAR 0 2
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: CALL_OW 74
6382: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6383: LD_ADDR_VAR 0 7
6387: PUSH
6388: LD_INT 22
6390: PUSH
6391: LD_VAR 0 2
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: LD_INT 59
6405: PUSH
6406: EMPTY
6407: LIST
6408: PUSH
6409: LD_INT 21
6411: PUSH
6412: LD_INT 1
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 21
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: PPUSH
6447: LD_VAR 0 4
6451: PPUSH
6452: CALL_OW 74
6456: ST_TO_ADDR
// end else
6457: GO 6571
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6459: LD_ADDR_VAR 0 6
6463: PUSH
6464: LD_INT 23
6466: PPUSH
6467: LD_INT 22
6469: PUSH
6470: LD_VAR 0 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 71
6483: PPUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: CALL_OW 74
6493: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6494: LD_ADDR_VAR 0 7
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 2
6516: PUSH
6517: LD_INT 59
6519: PUSH
6520: EMPTY
6521: LIST
6522: PUSH
6523: LD_INT 21
6525: PUSH
6526: LD_INT 1
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 21
6535: PUSH
6536: LD_INT 2
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: PPUSH
6556: CALL_OW 71
6560: PPUSH
6561: LD_VAR 0 4
6565: PPUSH
6566: CALL_OW 74
6570: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6571: LD_VAR 0 4
6575: PPUSH
6576: LD_VAR 0 6
6580: PPUSH
6581: CALL_OW 296
6585: PUSH
6586: LD_INT 8
6588: PLUS
6589: PUSH
6590: LD_VAR 0 4
6594: PPUSH
6595: LD_VAR 0 7
6599: PPUSH
6600: CALL_OW 296
6604: LESS
6605: IFFALSE 6623
// begin ComAttackUnit ( i , target1 ) ;
6607: LD_VAR 0 4
6611: PPUSH
6612: LD_VAR 0 6
6616: PPUSH
6617: CALL_OW 115
// end else
6621: GO 6637
// begin ComAttackUnit ( i , target2 ) ;
6623: LD_VAR 0 4
6627: PPUSH
6628: LD_VAR 0 7
6632: PPUSH
6633: CALL_OW 115
// end ; end ;
6637: GO 6217
6639: POP
6640: POP
// until russianTanks = 0 ;
6641: LD_EXP 35
6645: PUSH
6646: LD_INT 0
6648: EQUAL
6649: IFFALSE 6200
// end ; end ;
6651: GO 6170
6653: POP
6654: POP
// end ;
6655: LD_VAR 0 3
6659: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
6660: LD_INT 0
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6671: LD_ADDR_VAR 0 8
6675: PUSH
6676: LD_INT 22
6678: PUSH
6679: LD_VAR 0 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 21
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 24
6700: PUSH
6701: LD_INT 660
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 58
6713: PUSH
6714: EMPTY
6715: LIST
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: LD_INT 34
6722: PUSH
6723: LD_INT 43
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 34
6732: PUSH
6733: LD_INT 44
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 34
6742: PUSH
6743: LD_INT 46
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PPUSH
6767: CALL_OW 69
6771: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6772: LD_ADDR_VAR 0 9
6776: PUSH
6777: LD_INT 22
6779: PUSH
6780: LD_VAR 0 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 21
6791: PUSH
6792: LD_INT 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 3
6801: PUSH
6802: LD_INT 24
6804: PUSH
6805: LD_INT 660
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PPUSH
6821: CALL_OW 69
6825: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6826: LD_ADDR_VAR 0 10
6830: PUSH
6831: LD_VAR 0 2
6835: PPUSH
6836: LD_INT 22
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 21
6850: PUSH
6851: LD_INT 2
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 3
6860: PUSH
6861: LD_INT 24
6863: PUSH
6864: LD_INT 1000
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 70
6884: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
6885: LD_ADDR_VAR 0 11
6889: PUSH
6890: LD_VAR 0 2
6894: PPUSH
6895: LD_INT 22
6897: PUSH
6898: LD_VAR 0 1
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 21
6909: PUSH
6910: LD_INT 2
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 24
6919: PUSH
6920: LD_INT 1000
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 58
6929: PUSH
6930: EMPTY
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 70
6943: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6944: LD_ADDR_VAR 0 12
6948: PUSH
6949: EMPTY
6950: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6951: LD_ADDR_VAR 0 13
6955: PUSH
6956: LD_VAR 0 2
6960: PPUSH
6961: LD_INT 22
6963: PUSH
6964: LD_VAR 0 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 25
6975: PUSH
6976: LD_INT 3
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 70
6991: ST_TO_ADDR
// if damageVehicle_list > 0 then
6992: LD_VAR 0 9
6996: PUSH
6997: LD_INT 0
6999: GREATER
7000: IFFALSE 7038
// for i in damageVehicle_list do
7002: LD_ADDR_VAR 0 6
7006: PUSH
7007: LD_VAR 0 9
7011: PUSH
7012: FOR_IN
7013: IFFALSE 7036
// ComMoveXY ( i , repX , repY ) ;
7015: LD_VAR 0 6
7019: PPUSH
7020: LD_VAR 0 3
7024: PPUSH
7025: LD_VAR 0 4
7029: PPUSH
7030: CALL_OW 111
7034: GO 7012
7036: POP
7037: POP
// if vehicleNeedRepair_list > 0 then
7038: LD_VAR 0 10
7042: PUSH
7043: LD_INT 0
7045: GREATER
7046: IFFALSE 7133
// begin for i in vehicleNeedRepair_list do
7048: LD_ADDR_VAR 0 6
7052: PUSH
7053: LD_VAR 0 10
7057: PUSH
7058: FOR_IN
7059: IFFALSE 7131
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7061: LD_ADDR_VAR 0 12
7065: PUSH
7066: LD_VAR 0 12
7070: PUSH
7071: LD_VAR 0 6
7075: PPUSH
7076: CALL_OW 313
7080: ADD
7081: ST_TO_ADDR
// for j in mechanicInside_list do
7082: LD_ADDR_VAR 0 7
7086: PUSH
7087: LD_VAR 0 12
7091: PUSH
7092: FOR_IN
7093: IFFALSE 7127
// begin ComExitVehicle ( j ) ;
7095: LD_VAR 0 7
7099: PPUSH
7100: CALL_OW 121
// wait ( 0 0$1 ) ;
7104: LD_INT 35
7106: PPUSH
7107: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7111: LD_VAR 0 7
7115: PPUSH
7116: LD_VAR 0 6
7120: PPUSH
7121: CALL_OW 189
// end ;
7125: GO 7092
7127: POP
7128: POP
// end ;
7129: GO 7058
7131: POP
7132: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7133: LD_VAR 0 11
7137: PUSH
7138: LD_INT 0
7140: GREATER
7141: IFFALSE 7165
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7143: LD_VAR 0 13
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PPUSH
7152: LD_VAR 0 11
7156: PUSH
7157: LD_INT 1
7159: ARRAY
7160: PPUSH
7161: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7165: LD_VAR 0 8
7169: PUSH
7170: LD_INT 0
7172: GREATER
7173: PUSH
7174: LD_EXP 36
7178: PUSH
7179: LD_INT 0
7181: GREATER
7182: AND
7183: IFFALSE 7426
// begin for i := 1 to vehicleOK_list do
7185: LD_ADDR_VAR 0 6
7189: PUSH
7190: DOUBLE
7191: LD_INT 1
7193: DEC
7194: ST_TO_ADDR
7195: LD_VAR 0 8
7199: PUSH
7200: FOR_TO
7201: IFFALSE 7424
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7203: LD_VAR 0 6
7207: PUSH
7208: LD_INT 5
7210: PUSH
7211: LD_INT 6
7213: PUSH
7214: LD_INT 6
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PUSH
7222: LD_OWVAR 67
7226: ARRAY
7227: EQUAL
7228: IFFALSE 7422
// begin for i in vehicleOk_list do
7230: LD_ADDR_VAR 0 6
7234: PUSH
7235: LD_VAR 0 8
7239: PUSH
7240: FOR_IN
7241: IFFALSE 7261
// russianTanks = russianTanks ^ i ;
7243: LD_ADDR_EXP 35
7247: PUSH
7248: LD_EXP 35
7252: PUSH
7253: LD_VAR 0 6
7257: ADD
7258: ST_TO_ADDR
7259: GO 7240
7261: POP
7262: POP
// for i in vehicleOK_list do
7263: LD_ADDR_VAR 0 6
7267: PUSH
7268: LD_VAR 0 8
7272: PUSH
7273: FOR_IN
7274: IFFALSE 7290
// SetFuel ( i , 100 ) ;
7276: LD_VAR 0 6
7280: PPUSH
7281: LD_INT 100
7283: PPUSH
7284: CALL_OW 240
7288: GO 7273
7290: POP
7291: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7292: LD_ADDR_EXP 36
7296: PUSH
7297: LD_EXP 36
7301: PPUSH
7302: LD_INT 1
7304: PPUSH
7305: CALL_OW 3
7309: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7310: LD_ADDR_EXP 36
7314: PUSH
7315: LD_EXP 36
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: CALL_OW 3
7327: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7328: LD_ADDR_EXP 36
7332: PUSH
7333: LD_EXP 36
7337: PPUSH
7338: LD_INT 1
7340: PPUSH
7341: CALL_OW 3
7345: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7346: LD_ADDR_EXP 36
7350: PUSH
7351: LD_EXP 36
7355: PPUSH
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 3
7363: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7364: LD_ADDR_EXP 36
7368: PUSH
7369: LD_EXP 36
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: CALL_OW 3
7381: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7382: LD_OWVAR 67
7386: PUSH
7387: LD_INT 2
7389: EQUAL
7390: PUSH
7391: LD_OWVAR 67
7395: PUSH
7396: LD_INT 3
7398: EQUAL
7399: OR
7400: IFFALSE 7420
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7402: LD_ADDR_EXP 36
7406: PUSH
7407: LD_EXP 36
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 3
7419: ST_TO_ADDR
// break ;
7420: GO 7424
// end ; end ;
7422: GO 7200
7424: POP
7425: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7426: LD_ADDR_VAR 0 6
7430: PUSH
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_INT 22
7438: PUSH
7439: LD_VAR 0 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 25
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PPUSH
7462: CALL_OW 70
7466: NOT
7467: PUSH
7468: FOR_IN
7469: IFFALSE 7492
// ComMoveXY ( i , repX , repY ) ;
7471: LD_VAR 0 6
7475: PPUSH
7476: LD_VAR 0 3
7480: PPUSH
7481: LD_VAR 0 4
7485: PPUSH
7486: CALL_OW 111
7490: GO 7468
7492: POP
7493: POP
// end ;
7494: LD_VAR 0 5
7498: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7499: LD_INT 0
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
// enable ;
7505: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7506: LD_ADDR_VAR 0 7
7510: PUSH
7511: LD_VAR 0 3
7515: PPUSH
7516: CALL_OW 435
7520: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7521: LD_ADDR_VAR 0 6
7525: PUSH
7526: LD_INT 22
7528: PUSH
7529: LD_VAR 0 1
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 34
7540: PUSH
7541: LD_VAR 0 2
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PPUSH
7554: CALL_OW 69
7558: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7559: LD_VAR 0 6
7563: PUSH
7564: LD_INT 0
7566: GREATER
7567: PUSH
7568: LD_VAR 0 3
7572: PPUSH
7573: CALL_OW 435
7577: AND
7578: PUSH
7579: LD_VAR 0 7
7583: PUSH
7584: LD_INT 0
7586: GREATER
7587: AND
7588: IFFALSE 7637
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7590: LD_VAR 0 6
7594: PUSH
7595: LD_INT 1
7597: ARRAY
7598: PPUSH
7599: LD_VAR 0 7
7603: PUSH
7604: LD_INT 1
7606: ARRAY
7607: PPUSH
7608: LD_VAR 0 7
7612: PUSH
7613: LD_INT 2
7615: ARRAY
7616: PPUSH
7617: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7621: LD_VAR 0 6
7625: PUSH
7626: LD_INT 1
7628: ARRAY
7629: PPUSH
7630: LD_INT 100
7632: PPUSH
7633: CALL_OW 240
// end ; end ;
7637: LD_VAR 0 4
7641: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7642: LD_INT 0
7644: PPUSH
7645: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7646: LD_INT 22
7648: PUSH
7649: LD_VAR 0 1
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 25
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PPUSH
7672: CALL_OW 69
7676: PUSH
7677: LD_INT 0
7679: GREATER
7680: PUSH
7681: LD_INT 22
7683: PUSH
7684: LD_VAR 0 1
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 21
7695: PUSH
7696: LD_INT 3
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 3
7705: PUSH
7706: LD_INT 24
7708: PUSH
7709: LD_INT 1000
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: PUSH
7730: LD_INT 0
7732: EQUAL
7733: AND
7734: PUSH
7735: LD_VAR 0 2
7739: PUSH
7740: LD_INT 0
7742: GREATER
7743: AND
7744: IFFALSE 7843
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: LD_INT 22
7753: PUSH
7754: LD_VAR 0 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 25
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PPUSH
7777: CALL_OW 69
7781: PUSH
7782: FOR_IN
7783: IFFALSE 7841
// begin AddComExitBuilding ( i ) ;
7785: LD_VAR 0 4
7789: PPUSH
7790: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7794: LD_VAR 0 4
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_VAR 0 2
7812: PUSH
7813: LD_INT 2
7815: ARRAY
7816: PPUSH
7817: LD_VAR 0 2
7821: PUSH
7822: LD_INT 3
7824: ARRAY
7825: PPUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_INT 4
7833: ARRAY
7834: PPUSH
7835: CALL_OW 205
// end ;
7839: GO 7782
7841: POP
7842: POP
// end ; end ;
7843: LD_VAR 0 3
7847: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7848: LD_INT 0
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_INT 22
7864: PUSH
7865: LD_VAR 0 1
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 25
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 56
7886: PUSH
7887: EMPTY
7888: LIST
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 700
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7911: LD_ADDR_VAR 0 8
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 30
7930: PUSH
7931: LD_INT 32
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 58
7940: PUSH
7941: EMPTY
7942: LIST
7943: PUSH
7944: LD_INT 24
7946: PUSH
7947: LD_INT 251
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7965: LD_ADDR_VAR 0 10
7969: PUSH
7970: LD_INT 22
7972: PUSH
7973: LD_VAR 0 1
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 2
7984: PUSH
7985: LD_INT 25
7987: PUSH
7988: LD_INT 5
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 25
7997: PUSH
7998: LD_INT 8
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 25
8007: PUSH
8008: LD_INT 9
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 69
8029: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8030: LD_ADDR_VAR 0 9
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 313
8044: PUSH
8045: LD_VAR 0 10
8049: DIFF
8050: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8051: LD_VAR 0 8
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: PUSH
8060: LD_VAR 0 9
8064: PUSH
8065: LD_INT 0
8067: EQUAL
8068: AND
8069: IFFALSE 8115
// begin for i in soldiers_list do
8071: LD_ADDR_VAR 0 5
8075: PUSH
8076: LD_VAR 0 7
8080: PUSH
8081: FOR_IN
8082: IFFALSE 8111
// begin if IsOK ( build ) then
8084: LD_VAR 0 2
8088: PPUSH
8089: CALL_OW 302
8093: IFFALSE 8109
// ComEnterUnit ( i , build ) ;
8095: LD_VAR 0 5
8099: PPUSH
8100: LD_VAR 0 2
8104: PPUSH
8105: CALL_OW 120
// end ;
8109: GO 8081
8111: POP
8112: POP
// end else
8113: GO 8200
// begin for i = 1 to turretList do
8115: LD_ADDR_VAR 0 5
8119: PUSH
8120: DOUBLE
8121: LD_INT 1
8123: DEC
8124: ST_TO_ADDR
8125: LD_VAR 0 8
8129: PUSH
8130: FOR_TO
8131: IFFALSE 8198
// begin for j = 1 to temp do
8133: LD_ADDR_VAR 0 6
8137: PUSH
8138: DOUBLE
8139: LD_INT 1
8141: DEC
8142: ST_TO_ADDR
8143: LD_VAR 0 9
8147: PUSH
8148: FOR_TO
8149: IFFALSE 8194
// begin ComExitBuilding ( temp [ j ] ) ;
8151: LD_VAR 0 9
8155: PUSH
8156: LD_VAR 0 6
8160: ARRAY
8161: PPUSH
8162: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8166: LD_VAR 0 9
8170: PUSH
8171: LD_VAR 0 6
8175: ARRAY
8176: PPUSH
8177: LD_VAR 0 8
8181: PUSH
8182: LD_VAR 0 5
8186: ARRAY
8187: PPUSH
8188: CALL_OW 180
// end ;
8192: GO 8148
8194: POP
8195: POP
// end ;
8196: GO 8130
8198: POP
8199: POP
// end ; end ;
8200: LD_VAR 0 4
8204: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8205: LD_INT 0
8207: PPUSH
8208: PPUSH
8209: PPUSH
8210: PPUSH
8211: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8212: LD_ADDR_VAR 0 6
8216: PUSH
8217: LD_INT 22
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 2
8231: PUSH
8232: LD_INT 30
8234: PUSH
8235: LD_INT 31
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 30
8244: PUSH
8245: LD_INT 32
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 30
8254: PUSH
8255: LD_INT 33
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 30
8264: PUSH
8265: LD_INT 4
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 30
8274: PUSH
8275: LD_INT 5
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PPUSH
8294: CALL_OW 69
8298: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8299: LD_ADDR_VAR 0 7
8303: PUSH
8304: LD_INT 22
8306: PUSH
8307: LD_VAR 0 2
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: PUSH
8316: LD_INT 21
8318: PUSH
8319: LD_INT 3
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: PUSH
8326: LD_INT 58
8328: PUSH
8329: EMPTY
8330: LIST
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 69
8341: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8342: LD_VAR 0 6
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: PUSH
8351: LD_VAR 0 7
8355: PUSH
8356: LD_INT 0
8358: GREATER
8359: AND
8360: IFFALSE 8430
// begin for i in turretsList do
8362: LD_ADDR_VAR 0 4
8366: PUSH
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_IN
8373: IFFALSE 8428
// begin for j in enemyBuildings do
8375: LD_ADDR_VAR 0 5
8379: PUSH
8380: LD_VAR 0 7
8384: PUSH
8385: FOR_IN
8386: IFFALSE 8424
// begin if GetDistUnits ( i , j ) < 20 then
8388: LD_VAR 0 4
8392: PPUSH
8393: LD_VAR 0 5
8397: PPUSH
8398: CALL_OW 296
8402: PUSH
8403: LD_INT 20
8405: LESS
8406: IFFALSE 8422
// begin ComAttackUnit ( i , j ) ;
8408: LD_VAR 0 4
8412: PPUSH
8413: LD_VAR 0 5
8417: PPUSH
8418: CALL_OW 115
// end ; end ;
8422: GO 8385
8424: POP
8425: POP
// end ;
8426: GO 8372
8428: POP
8429: POP
// end ; end ;
8430: LD_VAR 0 3
8434: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8435: LD_INT 0
8437: PPUSH
8438: PPUSH
8439: PPUSH
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
// for i = 1 to medicCount do
8448: LD_ADDR_VAR 0 14
8452: PUSH
8453: DOUBLE
8454: LD_INT 1
8456: DEC
8457: ST_TO_ADDR
8458: LD_VAR 0 7
8462: PUSH
8463: FOR_TO
8464: IFFALSE 8546
// begin uc_side = side ;
8466: LD_ADDR_OWVAR 20
8470: PUSH
8471: LD_VAR 0 1
8475: ST_TO_ADDR
// uc_nation = nation ;
8476: LD_ADDR_OWVAR 21
8480: PUSH
8481: LD_VAR 0 2
8485: ST_TO_ADDR
// hc_name =  ;
8486: LD_ADDR_OWVAR 26
8490: PUSH
8491: LD_STRING 
8493: ST_TO_ADDR
// hc_gallery =  ;
8494: LD_ADDR_OWVAR 33
8498: PUSH
8499: LD_STRING 
8501: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8502: LD_INT 0
8504: PPUSH
8505: LD_INT 4
8507: PPUSH
8508: LD_VAR 0 8
8512: PPUSH
8513: CALL_OW 380
// un = CreateHuman ;
8517: LD_ADDR_VAR 0 16
8521: PUSH
8522: CALL_OW 44
8526: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8527: LD_VAR 0 16
8531: PPUSH
8532: LD_VAR 0 9
8536: PPUSH
8537: LD_INT 0
8539: PPUSH
8540: CALL_OW 49
// end ;
8544: GO 8463
8546: POP
8547: POP
// for i = 1 to soldierCount do
8548: LD_ADDR_VAR 0 14
8552: PUSH
8553: DOUBLE
8554: LD_INT 1
8556: DEC
8557: ST_TO_ADDR
8558: LD_VAR 0 3
8562: PUSH
8563: FOR_TO
8564: IFFALSE 8646
// begin uc_side = side ;
8566: LD_ADDR_OWVAR 20
8570: PUSH
8571: LD_VAR 0 1
8575: ST_TO_ADDR
// uc_nation = nation ;
8576: LD_ADDR_OWVAR 21
8580: PUSH
8581: LD_VAR 0 2
8585: ST_TO_ADDR
// hc_name =  ;
8586: LD_ADDR_OWVAR 26
8590: PUSH
8591: LD_STRING 
8593: ST_TO_ADDR
// hc_gallery =  ;
8594: LD_ADDR_OWVAR 33
8598: PUSH
8599: LD_STRING 
8601: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8602: LD_INT 0
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: LD_VAR 0 8
8612: PPUSH
8613: CALL_OW 380
// un = CreateHuman ;
8617: LD_ADDR_VAR 0 16
8621: PUSH
8622: CALL_OW 44
8626: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8627: LD_VAR 0 16
8631: PPUSH
8632: LD_VAR 0 9
8636: PPUSH
8637: LD_INT 0
8639: PPUSH
8640: CALL_OW 49
// end ;
8644: GO 8563
8646: POP
8647: POP
// for i = 1 to sniperCount do
8648: LD_ADDR_VAR 0 14
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_VAR 0 4
8662: PUSH
8663: FOR_TO
8664: IFFALSE 8746
// begin uc_side = side ;
8666: LD_ADDR_OWVAR 20
8670: PUSH
8671: LD_VAR 0 1
8675: ST_TO_ADDR
// uc_nation = nation ;
8676: LD_ADDR_OWVAR 21
8680: PUSH
8681: LD_VAR 0 2
8685: ST_TO_ADDR
// hc_name =  ;
8686: LD_ADDR_OWVAR 26
8690: PUSH
8691: LD_STRING 
8693: ST_TO_ADDR
// hc_gallery =  ;
8694: LD_ADDR_OWVAR 33
8698: PUSH
8699: LD_STRING 
8701: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8702: LD_INT 0
8704: PPUSH
8705: LD_INT 5
8707: PPUSH
8708: LD_VAR 0 8
8712: PPUSH
8713: CALL_OW 380
// un = CreateHuman ;
8717: LD_ADDR_VAR 0 16
8721: PUSH
8722: CALL_OW 44
8726: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8727: LD_VAR 0 16
8731: PPUSH
8732: LD_VAR 0 9
8736: PPUSH
8737: LD_INT 0
8739: PPUSH
8740: CALL_OW 49
// end ;
8744: GO 8663
8746: POP
8747: POP
// for i = 1 to bazookCount do
8748: LD_ADDR_VAR 0 14
8752: PUSH
8753: DOUBLE
8754: LD_INT 1
8756: DEC
8757: ST_TO_ADDR
8758: LD_VAR 0 5
8762: PUSH
8763: FOR_TO
8764: IFFALSE 8846
// begin uc_side = side ;
8766: LD_ADDR_OWVAR 20
8770: PUSH
8771: LD_VAR 0 1
8775: ST_TO_ADDR
// uc_nation = nation ;
8776: LD_ADDR_OWVAR 21
8780: PUSH
8781: LD_VAR 0 2
8785: ST_TO_ADDR
// hc_name =  ;
8786: LD_ADDR_OWVAR 26
8790: PUSH
8791: LD_STRING 
8793: ST_TO_ADDR
// hc_gallery =  ;
8794: LD_ADDR_OWVAR 33
8798: PUSH
8799: LD_STRING 
8801: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8802: LD_INT 0
8804: PPUSH
8805: LD_INT 9
8807: PPUSH
8808: LD_VAR 0 8
8812: PPUSH
8813: CALL_OW 380
// un = CreateHuman ;
8817: LD_ADDR_VAR 0 16
8821: PUSH
8822: CALL_OW 44
8826: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8827: LD_VAR 0 16
8831: PPUSH
8832: LD_VAR 0 9
8836: PPUSH
8837: LD_INT 0
8839: PPUSH
8840: CALL_OW 49
// end ;
8844: GO 8763
8846: POP
8847: POP
// for i = 1 to mortalCount do
8848: LD_ADDR_VAR 0 14
8852: PUSH
8853: DOUBLE
8854: LD_INT 1
8856: DEC
8857: ST_TO_ADDR
8858: LD_VAR 0 6
8862: PUSH
8863: FOR_TO
8864: IFFALSE 8946
// begin uc_side = side ;
8866: LD_ADDR_OWVAR 20
8870: PUSH
8871: LD_VAR 0 1
8875: ST_TO_ADDR
// uc_nation = nation ;
8876: LD_ADDR_OWVAR 21
8880: PUSH
8881: LD_VAR 0 2
8885: ST_TO_ADDR
// hc_name =  ;
8886: LD_ADDR_OWVAR 26
8890: PUSH
8891: LD_STRING 
8893: ST_TO_ADDR
// hc_gallery =  ;
8894: LD_ADDR_OWVAR 33
8898: PUSH
8899: LD_STRING 
8901: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8902: LD_INT 0
8904: PPUSH
8905: LD_INT 8
8907: PPUSH
8908: LD_VAR 0 8
8912: PPUSH
8913: CALL_OW 380
// un = CreateHuman ;
8917: LD_ADDR_VAR 0 16
8921: PUSH
8922: CALL_OW 44
8926: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8927: LD_VAR 0 16
8931: PPUSH
8932: LD_VAR 0 9
8936: PPUSH
8937: LD_INT 0
8939: PPUSH
8940: CALL_OW 49
// end ;
8944: GO 8863
8946: POP
8947: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8948: LD_ADDR_VAR 0 19
8952: PUSH
8953: LD_INT 22
8955: PUSH
8956: LD_VAR 0 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 2
8967: PUSH
8968: LD_INT 25
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 9
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9024: LD_ADDR_VAR 0 18
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_VAR 0 1
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 25
9043: PUSH
9044: LD_INT 4
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 69
9059: ST_TO_ADDR
// for i in medic_list do
9060: LD_ADDR_VAR 0 14
9064: PUSH
9065: LD_VAR 0 18
9069: PUSH
9070: FOR_IN
9071: IFFALSE 9089
// ComMoveToArea ( i , healArea ) ;
9073: LD_VAR 0 14
9077: PPUSH
9078: LD_VAR 0 10
9082: PPUSH
9083: CALL_OW 113
9087: GO 9070
9089: POP
9090: POP
// if strategy = 1 then
9091: LD_VAR 0 12
9095: PUSH
9096: LD_INT 1
9098: EQUAL
9099: IFFALSE 9804
// begin repeat wait ( 0 0$3 ) ;
9101: LD_INT 105
9103: PPUSH
9104: CALL_OW 67
// for i in soldiersOK_list do
9108: LD_ADDR_VAR 0 14
9112: PUSH
9113: LD_VAR 0 19
9117: PUSH
9118: FOR_IN
9119: IFFALSE 9153
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9121: LD_VAR 0 14
9125: PPUSH
9126: LD_INT 80
9128: PPUSH
9129: LD_INT 109
9131: PPUSH
9132: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9136: LD_VAR 0 14
9140: PPUSH
9141: LD_INT 39
9143: PPUSH
9144: LD_INT 49
9146: PPUSH
9147: CALL_OW 174
// end ;
9151: GO 9118
9153: POP
9154: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9155: LD_INT 15
9157: PPUSH
9158: LD_INT 22
9160: PUSH
9161: LD_VAR 0 1
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PPUSH
9170: CALL_OW 70
9174: PUSH
9175: LD_INT 0
9177: GREATER
9178: IFFALSE 9101
// repeat wait ( 0 0$1 ) ;
9180: LD_INT 35
9182: PPUSH
9183: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9187: LD_ADDR_VAR 0 17
9191: PUSH
9192: LD_INT 22
9194: PUSH
9195: LD_VAR 0 1
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 24
9212: PUSH
9213: LD_INT 550
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 24
9226: PUSH
9227: LD_INT 250
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PPUSH
9243: CALL_OW 69
9247: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9248: LD_ADDR_VAR 0 19
9252: PUSH
9253: LD_INT 22
9255: PUSH
9256: LD_VAR 0 1
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: LD_INT 25
9270: PUSH
9271: LD_INT 1
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 25
9280: PUSH
9281: LD_INT 5
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 25
9290: PUSH
9291: LD_INT 8
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 25
9300: PUSH
9301: LD_INT 9
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 1000
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 69
9334: ST_TO_ADDR
// if medicCount > 0 then
9335: LD_VAR 0 7
9339: PUSH
9340: LD_INT 0
9342: GREATER
9343: IFFALSE 9417
// begin if damageUnit_list > 0 then
9345: LD_VAR 0 17
9349: PUSH
9350: LD_INT 0
9352: GREATER
9353: IFFALSE 9417
// begin for i in damageUnit_list do
9355: LD_ADDR_VAR 0 14
9359: PUSH
9360: LD_VAR 0 17
9364: PUSH
9365: FOR_IN
9366: IFFALSE 9415
// begin ComMoveToArea ( i , healArea ) ;
9368: LD_VAR 0 14
9372: PPUSH
9373: LD_VAR 0 10
9377: PPUSH
9378: CALL_OW 113
// for j in medic_list do
9382: LD_ADDR_VAR 0 15
9386: PUSH
9387: LD_VAR 0 18
9391: PUSH
9392: FOR_IN
9393: IFFALSE 9411
// AddComHeal ( j , i ) ;
9395: LD_VAR 0 15
9399: PPUSH
9400: LD_VAR 0 14
9404: PPUSH
9405: CALL_OW 188
9409: GO 9392
9411: POP
9412: POP
// end ;
9413: GO 9365
9415: POP
9416: POP
// end ; end ; for i in soldiersOK_list do
9417: LD_ADDR_VAR 0 14
9421: PUSH
9422: LD_VAR 0 19
9426: PUSH
9427: FOR_IN
9428: IFFALSE 9604
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9430: LD_ADDR_VAR 0 22
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_VAR 0 11
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: PPUSH
9447: CALL_OW 69
9451: PPUSH
9452: LD_VAR 0 14
9456: PPUSH
9457: CALL_OW 74
9461: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9462: LD_ADDR_VAR 0 23
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_VAR 0 11
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: LD_INT 59
9484: PUSH
9485: EMPTY
9486: LIST
9487: PUSH
9488: LD_INT 21
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 21
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: EMPTY
9519: LIST
9520: PPUSH
9521: CALL_OW 69
9525: PPUSH
9526: LD_VAR 0 14
9530: PPUSH
9531: CALL_OW 74
9535: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9536: LD_VAR 0 14
9540: PPUSH
9541: LD_VAR 0 22
9545: PPUSH
9546: CALL_OW 296
9550: PUSH
9551: LD_INT 8
9553: PLUS
9554: PUSH
9555: LD_VAR 0 14
9559: PPUSH
9560: LD_VAR 0 23
9564: PPUSH
9565: CALL_OW 296
9569: LESS
9570: IFFALSE 9588
// begin ComAttackUnit ( i , target1 ) ;
9572: LD_VAR 0 14
9576: PPUSH
9577: LD_VAR 0 22
9581: PPUSH
9582: CALL_OW 115
// end else
9586: GO 9602
// begin ComAttackUnit ( i , target2 ) ;
9588: LD_VAR 0 14
9592: PPUSH
9593: LD_VAR 0 23
9597: PPUSH
9598: CALL_OW 115
// end ; end ;
9602: GO 9427
9604: POP
9605: POP
// for i in soldiersOK_list do
9606: LD_ADDR_VAR 0 14
9610: PUSH
9611: LD_VAR 0 19
9615: PUSH
9616: FOR_IN
9617: IFFALSE 9793
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9619: LD_ADDR_VAR 0 22
9623: PUSH
9624: LD_INT 22
9626: PUSH
9627: LD_VAR 0 11
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PPUSH
9636: CALL_OW 69
9640: PPUSH
9641: LD_VAR 0 14
9645: PPUSH
9646: CALL_OW 74
9650: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9651: LD_ADDR_VAR 0 23
9655: PUSH
9656: LD_INT 22
9658: PUSH
9659: LD_VAR 0 11
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 2
9670: PUSH
9671: LD_INT 59
9673: PUSH
9674: EMPTY
9675: LIST
9676: PUSH
9677: LD_INT 21
9679: PUSH
9680: LD_INT 1
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: PUSH
9687: LD_INT 21
9689: PUSH
9690: LD_INT 2
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: PUSH
9707: EMPTY
9708: LIST
9709: PPUSH
9710: CALL_OW 69
9714: PPUSH
9715: LD_VAR 0 14
9719: PPUSH
9720: CALL_OW 74
9724: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9725: LD_VAR 0 14
9729: PPUSH
9730: LD_VAR 0 22
9734: PPUSH
9735: CALL_OW 296
9739: PUSH
9740: LD_INT 8
9742: PLUS
9743: PUSH
9744: LD_VAR 0 14
9748: PPUSH
9749: LD_VAR 0 23
9753: PPUSH
9754: CALL_OW 296
9758: LESS
9759: IFFALSE 9777
// begin ComAttackUnit ( i , target1 ) ;
9761: LD_VAR 0 14
9765: PPUSH
9766: LD_VAR 0 22
9770: PPUSH
9771: CALL_OW 115
// end else
9775: GO 9791
// begin ComAttackUnit ( i , target2 ) ;
9777: LD_VAR 0 14
9781: PPUSH
9782: LD_VAR 0 23
9786: PPUSH
9787: CALL_OW 115
// end ; end ;
9791: GO 9616
9793: POP
9794: POP
// until soldiersOK_list = [ ] ;
9795: LD_VAR 0 19
9799: PUSH
9800: EMPTY
9801: EQUAL
9802: IFFALSE 9180
// end ; if strategy = 2 then
9804: LD_VAR 0 12
9808: PUSH
9809: LD_INT 2
9811: EQUAL
9812: IFFALSE 10517
// begin repeat wait ( 0 0$1 ) ;
9814: LD_INT 35
9816: PPUSH
9817: CALL_OW 67
// for i in soldiersOK_list do
9821: LD_ADDR_VAR 0 14
9825: PUSH
9826: LD_VAR 0 19
9830: PUSH
9831: FOR_IN
9832: IFFALSE 9866
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9834: LD_VAR 0 14
9838: PPUSH
9839: LD_INT 117
9841: PPUSH
9842: LD_INT 97
9844: PPUSH
9845: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9849: LD_VAR 0 14
9853: PPUSH
9854: LD_INT 94
9856: PPUSH
9857: LD_INT 50
9859: PPUSH
9860: CALL_OW 174
// end ;
9864: GO 9831
9866: POP
9867: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9868: LD_INT 16
9870: PPUSH
9871: LD_INT 22
9873: PUSH
9874: LD_VAR 0 1
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PPUSH
9883: CALL_OW 70
9887: PUSH
9888: LD_INT 0
9890: GREATER
9891: IFFALSE 9814
// repeat wait ( 0 0$3 ) ;
9893: LD_INT 105
9895: PPUSH
9896: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9900: LD_ADDR_VAR 0 17
9904: PUSH
9905: LD_INT 22
9907: PUSH
9908: LD_VAR 0 1
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: LD_INT 3
9922: PUSH
9923: LD_INT 24
9925: PUSH
9926: LD_INT 550
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 250
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PPUSH
9956: CALL_OW 69
9960: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9961: LD_ADDR_VAR 0 19
9965: PUSH
9966: LD_INT 22
9968: PUSH
9969: LD_VAR 0 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: LD_INT 25
9983: PUSH
9984: LD_INT 1
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 25
9993: PUSH
9994: LD_INT 5
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 25
10003: PUSH
10004: LD_INT 8
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 9
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 24
10030: PUSH
10031: LD_INT 1000
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: PPUSH
10043: CALL_OW 69
10047: ST_TO_ADDR
// if medicCount > 0 then
10048: LD_VAR 0 7
10052: PUSH
10053: LD_INT 0
10055: GREATER
10056: IFFALSE 10130
// begin if damageUnit_list > 0 then
10058: LD_VAR 0 17
10062: PUSH
10063: LD_INT 0
10065: GREATER
10066: IFFALSE 10130
// begin for i in damageUnit_list do
10068: LD_ADDR_VAR 0 14
10072: PUSH
10073: LD_VAR 0 17
10077: PUSH
10078: FOR_IN
10079: IFFALSE 10128
// begin ComMoveToArea ( i , healArea ) ;
10081: LD_VAR 0 14
10085: PPUSH
10086: LD_VAR 0 10
10090: PPUSH
10091: CALL_OW 113
// for j in medic_list do
10095: LD_ADDR_VAR 0 15
10099: PUSH
10100: LD_VAR 0 18
10104: PUSH
10105: FOR_IN
10106: IFFALSE 10124
// AddComHeal ( j , i ) ;
10108: LD_VAR 0 15
10112: PPUSH
10113: LD_VAR 0 14
10117: PPUSH
10118: CALL_OW 188
10122: GO 10105
10124: POP
10125: POP
// end ;
10126: GO 10078
10128: POP
10129: POP
// end ; end ; for i in soldiersOK_list do
10130: LD_ADDR_VAR 0 14
10134: PUSH
10135: LD_VAR 0 19
10139: PUSH
10140: FOR_IN
10141: IFFALSE 10317
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10143: LD_ADDR_VAR 0 22
10147: PUSH
10148: LD_INT 22
10150: PUSH
10151: LD_VAR 0 11
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PPUSH
10160: CALL_OW 69
10164: PPUSH
10165: LD_VAR 0 14
10169: PPUSH
10170: CALL_OW 74
10174: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10175: LD_ADDR_VAR 0 23
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_VAR 0 11
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 2
10194: PUSH
10195: LD_INT 59
10197: PUSH
10198: EMPTY
10199: LIST
10200: PUSH
10201: LD_INT 21
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 21
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: PPUSH
10234: CALL_OW 69
10238: PPUSH
10239: LD_VAR 0 14
10243: PPUSH
10244: CALL_OW 74
10248: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10249: LD_VAR 0 14
10253: PPUSH
10254: LD_VAR 0 22
10258: PPUSH
10259: CALL_OW 296
10263: PUSH
10264: LD_INT 8
10266: PLUS
10267: PUSH
10268: LD_VAR 0 14
10272: PPUSH
10273: LD_VAR 0 23
10277: PPUSH
10278: CALL_OW 296
10282: LESS
10283: IFFALSE 10301
// begin ComAttackUnit ( i , target1 ) ;
10285: LD_VAR 0 14
10289: PPUSH
10290: LD_VAR 0 22
10294: PPUSH
10295: CALL_OW 115
// end else
10299: GO 10315
// begin ComAttackUnit ( i , target2 ) ;
10301: LD_VAR 0 14
10305: PPUSH
10306: LD_VAR 0 23
10310: PPUSH
10311: CALL_OW 115
// end ; end ;
10315: GO 10140
10317: POP
10318: POP
// for i in soldiersOK_list do
10319: LD_ADDR_VAR 0 14
10323: PUSH
10324: LD_VAR 0 19
10328: PUSH
10329: FOR_IN
10330: IFFALSE 10506
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10332: LD_ADDR_VAR 0 22
10336: PUSH
10337: LD_INT 22
10339: PUSH
10340: LD_VAR 0 11
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PPUSH
10354: LD_VAR 0 14
10358: PPUSH
10359: CALL_OW 74
10363: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10364: LD_ADDR_VAR 0 23
10368: PUSH
10369: LD_INT 22
10371: PUSH
10372: LD_VAR 0 11
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 59
10386: PUSH
10387: EMPTY
10388: LIST
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 21
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: PPUSH
10428: LD_VAR 0 14
10432: PPUSH
10433: CALL_OW 74
10437: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10438: LD_VAR 0 14
10442: PPUSH
10443: LD_VAR 0 22
10447: PPUSH
10448: CALL_OW 296
10452: PUSH
10453: LD_INT 8
10455: PLUS
10456: PUSH
10457: LD_VAR 0 14
10461: PPUSH
10462: LD_VAR 0 23
10466: PPUSH
10467: CALL_OW 296
10471: LESS
10472: IFFALSE 10490
// begin ComAttackUnit ( i , target1 ) ;
10474: LD_VAR 0 14
10478: PPUSH
10479: LD_VAR 0 22
10483: PPUSH
10484: CALL_OW 115
// end else
10488: GO 10504
// begin ComAttackUnit ( i , target2 ) ;
10490: LD_VAR 0 14
10494: PPUSH
10495: LD_VAR 0 23
10499: PPUSH
10500: CALL_OW 115
// end ; end ;
10504: GO 10329
10506: POP
10507: POP
// until soldiersOK_list = [ ] ;
10508: LD_VAR 0 19
10512: PUSH
10513: EMPTY
10514: EQUAL
10515: IFFALSE 9893
// end ; end ; end_of_file
10517: LD_VAR 0 13
10521: RET
// every 0 0$01 do
10522: GO 10524
10524: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10525: LD_INT 22
10527: PUSH
10528: LD_INT 1
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 2
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PPUSH
10549: CALL_OW 69
10553: PUSH
10554: LD_INT 0
10556: EQUAL
10557: IFFALSE 10571
// SetClass ( JMM , 2 ) ;
10559: LD_EXP 1
10563: PPUSH
10564: LD_INT 2
10566: PPUSH
10567: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10571: LD_STRING M1
10573: PPUSH
10574: CALL_OW 337
// case difficulty of 1 :
10578: LD_OWVAR 67
10582: PUSH
10583: LD_INT 1
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10601
10591: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10592: LD_STRING M1-1
10594: PPUSH
10595: CALL_OW 337
10599: GO 10638
10601: LD_INT 2
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10619
10609: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10610: LD_STRING M1-2
10612: PPUSH
10613: CALL_OW 337
10617: GO 10638
10619: LD_INT 3
10621: DOUBLE
10622: EQUAL
10623: IFTRUE 10627
10625: GO 10637
10627: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10628: LD_STRING M1-3
10630: PPUSH
10631: CALL_OW 337
10635: GO 10638
10637: POP
// ChangeMissionObjectives ( M1cont ) ;
10638: LD_STRING M1cont
10640: PPUSH
10641: CALL_OW 337
// SaveForQuickRestart ;
10645: CALL_OW 22
// end ;
10649: END
// every 0 0$1 do
10650: GO 10652
10652: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10653: LD_INT 350
10655: PPUSH
10656: LD_INT 875
10658: PPUSH
10659: CALL_OW 12
10663: PPUSH
10664: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10668: LD_INT 5
10670: PPUSH
10671: LD_INT 4
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 55
// wait ( 0 0$15 ) ;
10681: LD_INT 525
10683: PPUSH
10684: CALL_OW 67
// if IsOk ( Lisa ) then
10688: LD_EXP 2
10692: PPUSH
10693: CALL_OW 302
10697: IFFALSE 10713
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10699: LD_EXP 2
10703: PPUSH
10704: LD_STRING DR0-Lisa-1
10706: PPUSH
10707: CALL_OW 88
// end else
10711: GO 10863
// begin if IsOK ( Cyrus ) then
10713: LD_EXP 4
10717: PPUSH
10718: CALL_OW 302
10722: IFFALSE 10738
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10724: LD_EXP 4
10728: PPUSH
10729: LD_STRING DR0-Cyrus-1
10731: PPUSH
10732: CALL_OW 88
// end else
10736: GO 10863
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10738: LD_INT 22
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 21
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 2
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 3
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 4
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 26
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: PUSH
10824: EMPTY
10825: LIST
10826: PPUSH
10827: CALL_OW 69
10831: PUSH
10832: LD_EXP 1
10836: PUSH
10837: LD_EXP 8
10841: PUSH
10842: LD_EXP 5
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: DIFF
10852: PPUSH
10853: LD_STRING DR0-Sol1-1
10855: PPUSH
10856: LD_STRING DR0-Sol1-1
10858: PPUSH
10859: CALL 4716 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10863: LD_INT 22
10865: PUSH
10866: LD_INT 1
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 21
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 25
10918: PUSH
10919: LD_INT 4
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 26
10935: PUSH
10936: LD_INT 1
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: PPUSH
10952: CALL_OW 69
10956: PUSH
10957: LD_EXP 1
10961: PUSH
10962: LD_EXP 8
10966: PUSH
10967: LD_EXP 5
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: DIFF
10977: PPUSH
10978: LD_STRING DR0-Sol2-1
10980: PPUSH
10981: LD_STRING DR0-Sol2-1
10983: PPUSH
10984: CALL 4716 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10988: LD_EXP 1
10992: PPUSH
10993: LD_STRING DR0-JMM-1
10995: PPUSH
10996: CALL_OW 88
// end ;
11000: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11001: LD_EXP 5
11005: PPUSH
11006: CALL_OW 302
11010: PUSH
11011: LD_INT 22
11013: PUSH
11014: LD_INT 1
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 16
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PPUSH
11035: CALL_OW 69
11039: PUSH
11040: LD_INT 0
11042: GREATER
11043: AND
11044: IFFALSE 11322
11046: GO 11048
11048: DISABLE
// begin DialogueOn ;
11049: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11053: LD_EXP 5
11057: PPUSH
11058: LD_STRING D10-Frank-1
11060: PPUSH
11061: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11065: LD_INT 22
11067: PUSH
11068: LD_INT 1
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 21
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 25
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 25
11100: PUSH
11101: LD_INT 2
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 25
11110: PUSH
11111: LD_INT 3
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 25
11120: PUSH
11121: LD_INT 4
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: PPUSH
11140: CALL_OW 69
11144: PUSH
11145: LD_EXP 1
11149: PUSH
11150: LD_EXP 5
11154: PUSH
11155: LD_EXP 2
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: DIFF
11165: PPUSH
11166: LD_STRING D10-Sol1-1
11168: PPUSH
11169: LD_STRING D10-FSol1-1
11171: PPUSH
11172: CALL 4716 0 3
// Say ( Frank , D10-Frank-2 ) ;
11176: LD_EXP 5
11180: PPUSH
11181: LD_STRING D10-Frank-2
11183: PPUSH
11184: CALL_OW 88
// if IsOK ( Lisa ) then
11188: LD_EXP 2
11192: PPUSH
11193: CALL_OW 302
11197: IFFALSE 11213
// begin Say ( Lisa , D10-Lisa-2 ) ;
11199: LD_EXP 2
11203: PPUSH
11204: LD_STRING D10-Lisa-2
11206: PPUSH
11207: CALL_OW 88
// end else
11211: GO 11318
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11213: LD_INT 22
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 21
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 2
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 1
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 3
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 25
11268: PUSH
11269: LD_INT 4
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: PUSH
11293: LD_EXP 1
11297: PUSH
11298: LD_EXP 5
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: DIFF
11307: PPUSH
11308: LD_STRING D10-Sol1-2
11310: PPUSH
11311: LD_STRING D10-FSol1-2
11313: PPUSH
11314: CALL 4716 0 3
// end ; DialogueOff ;
11318: CALL_OW 7
// end ;
11322: END
// every 10 10$30 do
11323: GO 11325
11325: DISABLE
// begin HarrisonSupport ;
11326: CALL 1973 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11330: LD_EXP 16
11334: PPUSH
11335: CALL_OW 310
11339: PPUSH
11340: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11344: LD_EXP 16
11348: PPUSH
11349: LD_STRING DEng-Eng1-1
11351: PPUSH
11352: CALL_OW 88
// wait ( 1 1$0 ) ;
11356: LD_INT 2100
11358: PPUSH
11359: CALL_OW 67
// DialogueOn ;
11363: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11367: LD_EXP 13
11371: PPUSH
11372: LD_STRING DRem-Har-1
11374: PPUSH
11375: CALL_OW 94
// if contactWithRussian = 1 then
11379: LD_EXP 21
11383: PUSH
11384: LD_INT 1
11386: EQUAL
11387: IFFALSE 11403
// begin Say ( JMM , DRem-JMM-1 ) ;
11389: LD_EXP 1
11393: PPUSH
11394: LD_STRING DRem-JMM-1
11396: PPUSH
11397: CALL_OW 88
// end else
11401: GO 11415
// begin Say ( JMM , DRem-JMM-1a ) ;
11403: LD_EXP 1
11407: PPUSH
11408: LD_STRING DRem-JMM-1a
11410: PPUSH
11411: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11415: LD_EXP 13
11419: PPUSH
11420: LD_STRING DRem-Har-2
11422: PPUSH
11423: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11427: LD_STRING DenisInDelta
11429: PPUSH
11430: LD_INT 0
11432: PPUSH
11433: CALL_OW 30
11437: PUSH
11438: LD_INT 1
11440: EQUAL
11441: IFFALSE 11457
// begin Say ( JMM , DRem-JMM-2 ) ;
11443: LD_EXP 1
11447: PPUSH
11448: LD_STRING DRem-JMM-2
11450: PPUSH
11451: CALL_OW 88
// end else
11455: GO 11469
// begin Say ( JMM , DRem-JMM-2a ) ;
11457: LD_EXP 1
11461: PPUSH
11462: LD_STRING DRem-JMM-2a
11464: PPUSH
11465: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11469: LD_EXP 13
11473: PPUSH
11474: LD_STRING DRem-Har-3
11476: PPUSH
11477: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11481: LD_EXP 1
11485: PPUSH
11486: LD_STRING DRem-JMM-3
11488: PPUSH
11489: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11493: LD_EXP 13
11497: PPUSH
11498: LD_STRING DRem-Har-4
11500: PPUSH
11501: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11505: LD_STRING DenisInDelta
11507: PPUSH
11508: LD_INT 0
11510: PPUSH
11511: CALL_OW 30
11515: PUSH
11516: LD_INT 1
11518: EQUAL
11519: IFFALSE 11547
// begin Say ( JMM , DRem-JMM-4 ) ;
11521: LD_EXP 1
11525: PPUSH
11526: LD_STRING DRem-JMM-4
11528: PPUSH
11529: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11533: LD_EXP 13
11537: PPUSH
11538: LD_STRING DRem-Har-5
11540: PPUSH
11541: CALL_OW 94
// end else
11545: GO 11580
// begin SetRestrict ( 36 , 1 , true ) ;
11547: LD_INT 36
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11560: LD_INT 15
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11573: LD_STRING MR
11575: PPUSH
11576: CALL_OW 337
// end ; DialogueOff ;
11580: CALL_OW 7
// end ;
11584: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11585: LD_STRING DenisInDelta
11587: PPUSH
11588: LD_INT 0
11590: PPUSH
11591: CALL_OW 30
11595: PUSH
11596: LD_INT 1
11598: EQUAL
11599: IFFALSE 11730
11601: GO 11603
11603: DISABLE
// begin PrepareDenis ;
11604: CALL 1894 0 0
// CenterNowOnUnits ( Denis ) ;
11608: LD_EXP 9
11612: PPUSH
11613: CALL_OW 87
// DialogueOn ;
11617: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11621: LD_EXP 9
11625: PPUSH
11626: LD_STRING DDen-Den-1
11628: PPUSH
11629: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11633: LD_EXP 1
11637: PPUSH
11638: LD_STRING DDen-JMM-1
11640: PPUSH
11641: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11645: LD_EXP 9
11649: PPUSH
11650: LD_STRING DDen-Den-2
11652: PPUSH
11653: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11657: LD_EXP 1
11661: PPUSH
11662: LD_STRING DDen-JMM-2
11664: PPUSH
11665: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11669: LD_EXP 9
11673: PPUSH
11674: LD_STRING DDen-Den-3
11676: PPUSH
11677: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11681: LD_EXP 1
11685: PPUSH
11686: LD_STRING DDen-JMM-3
11688: PPUSH
11689: CALL_OW 88
// DialogueOff ;
11693: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11697: LD_INT 36
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11710: LD_INT 15
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11723: LD_STRING MR
11725: PPUSH
11726: CALL_OW 337
// end ;
11730: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11731: CALL 11776 0 0
11735: PUSH
11736: LD_EXP 9
11740: PPUSH
11741: CALL_OW 302
11745: AND
11746: IFFALSE 11775
11748: GO 11750
11750: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11751: LD_EXP 9
11755: PPUSH
11756: LD_STRING DR1-Den-1
11758: PPUSH
11759: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11763: LD_EXP 1
11767: PPUSH
11768: LD_STRING DR1-JMM-1
11770: PPUSH
11771: CALL_OW 88
// end ;
11775: END
// function CheckOptoLab ; var i ; begin
11776: LD_INT 0
11778: PPUSH
11779: PPUSH
// result = false ;
11780: LD_ADDR_VAR 0 1
11784: PUSH
11785: LD_INT 0
11787: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11788: LD_ADDR_VAR 0 2
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 2
11805: PUSH
11806: LD_INT 30
11808: PUSH
11809: LD_INT 7
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 30
11818: PUSH
11819: LD_INT 8
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PPUSH
11835: CALL_OW 69
11839: PUSH
11840: FOR_IN
11841: IFFALSE 11893
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11843: LD_VAR 0 2
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 268
11855: PUSH
11856: LD_INT 15
11858: EQUAL
11859: PUSH
11860: LD_VAR 0 2
11864: PPUSH
11865: LD_INT 2
11867: PPUSH
11868: CALL_OW 268
11872: PUSH
11873: LD_INT 15
11875: EQUAL
11876: OR
11877: IFFALSE 11889
// begin result = true ;
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// break ;
11887: GO 11893
// end ; break ;
11889: GO 11893
// end ;
11891: GO 11840
11893: POP
11894: POP
// end ;
11895: LD_VAR 0 1
11899: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11900: LD_INT 15
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL_OW 321
11910: PUSH
11911: LD_INT 2
11913: EQUAL
11914: PUSH
11915: LD_EXP 9
11919: PPUSH
11920: CALL_OW 302
11924: AND
11925: IFFALSE 12157
11927: GO 11929
11929: DISABLE
// begin DialogueOn ;
11930: CALL_OW 6
// if IsOK ( Denis ) then
11934: LD_EXP 9
11938: PPUSH
11939: CALL_OW 302
11943: IFFALSE 11959
// begin Say ( Denis , DR2-Den-1 ) ;
11945: LD_EXP 9
11949: PPUSH
11950: LD_STRING DR2-Den-1
11952: PPUSH
11953: CALL_OW 88
// end else
11957: GO 12018
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11959: LD_INT 22
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 1
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 25
11981: PUSH
11982: LD_INT 4
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: PPUSH
11994: CALL_OW 69
11998: PUSH
11999: LD_EXP 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: DIFF
12007: PPUSH
12008: LD_STRING DR2-Sci1-1
12010: PPUSH
12011: LD_STRING DR2-FSci1-1
12013: PPUSH
12014: CALL 4716 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12018: LD_EXP 1
12022: PPUSH
12023: LD_STRING DR2-JMM-1
12025: PPUSH
12026: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12030: LD_INT 22
12032: PUSH
12033: LD_INT 1
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 21
12042: PUSH
12043: LD_INT 1
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 2
12052: PUSH
12053: LD_INT 25
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 25
12065: PUSH
12066: LD_INT 2
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 25
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 25
12085: PUSH
12086: LD_INT 4
12088: PUSH
12089: EMPTY
12090: LIST
12091: LIST
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 69
12109: PUSH
12110: LD_EXP 1
12114: PUSH
12115: LD_EXP 9
12119: PUSH
12120: LD_EXP 8
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: DIFF
12130: PPUSH
12131: LD_STRING DR2-Sol1-1
12133: PPUSH
12134: LD_STRING DR2-Sol1-11
12136: PPUSH
12137: CALL 4716 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12141: LD_EXP 1
12145: PPUSH
12146: LD_STRING DR2-JMM-2
12148: PPUSH
12149: CALL_OW 88
// DialogueOff ;
12153: CALL_OW 7
// end ;
12157: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12158: LD_INT 22
12160: PUSH
12161: LD_INT 1
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 36
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 69
12186: PUSH
12187: LD_INT 0
12189: EQUAL
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 21
12203: PUSH
12204: LD_INT 2
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 33
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PPUSH
12226: CALL_OW 69
12230: PUSH
12231: LD_INT 0
12233: GREATER
12234: AND
12235: PUSH
12236: LD_EXP 22
12240: PUSH
12241: LD_INT 0
12243: EQUAL
12244: AND
12245: IFFALSE 12317
12247: GO 12249
12249: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12250: LD_INT 22
12252: PUSH
12253: LD_INT 1
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 21
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 25
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: PPUSH
12285: CALL_OW 69
12289: PUSH
12290: LD_EXP 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: DIFF
12298: PPUSH
12299: LD_STRING D3a-Mech1-1
12301: PPUSH
12302: LD_STRING D3a-Mech1-1
12304: PPUSH
12305: CALL 4716 0 3
// firstTower = 2 ;
12309: LD_ADDR_EXP 22
12313: PUSH
12314: LD_INT 2
12316: ST_TO_ADDR
// end ;
12317: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12318: LD_INT 22
12320: PUSH
12321: LD_INT 3
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: PUSH
12347: LD_INT 0
12349: EQUAL
12350: IFFALSE 12465
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12358: LD_ADDR_VAR 0 1
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: LD_INT 25
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 25
12398: PUSH
12399: LD_INT 2
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 25
12408: PUSH
12409: LD_INT 3
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 4
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 69
12442: PUSH
12443: FOR_IN
12444: IFFALSE 12463
// AddExperience ( i , 1 , 10000 ) ;
12446: LD_VAR 0 1
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: LD_INT 10000
12456: PPUSH
12457: CALL_OW 492
12461: GO 12443
12463: POP
12464: POP
// end ;
12465: PPOPN 1
12467: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12468: LD_INT 22
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 30
12480: PUSH
12481: LD_INT 36
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: PUSH
12497: LD_INT 0
12499: GREATER
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 21
12513: PUSH
12514: LD_INT 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 33
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: PUSH
12541: LD_INT 0
12543: GREATER
12544: AND
12545: PUSH
12546: CALL 13128 0 0
12550: AND
12551: IFFALSE 13125
12553: GO 12555
12555: DISABLE
12556: LD_INT 0
12558: PPUSH
12559: PPUSH
12560: PPUSH
12561: PPUSH
12562: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12563: LD_ADDR_VAR 0 3
12567: PUSH
12568: LD_INT 22
12570: PUSH
12571: LD_INT 1
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 36
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PPUSH
12592: CALL_OW 69
12596: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12597: LD_ADDR_VAR 0 4
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 21
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 33
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12642: LD_ADDR_VAR 0 5
12646: PUSH
12647: EMPTY
12648: ST_TO_ADDR
// for i in tmpControlTowers do
12649: LD_ADDR_VAR 0 1
12653: PUSH
12654: LD_VAR 0 3
12658: PUSH
12659: FOR_IN
12660: IFFALSE 13123
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12662: LD_EXP 1
12666: PPUSH
12667: CALL_OW 310
12671: PUSH
12672: LD_VAR 0 1
12676: EQUAL
12677: PUSH
12678: LD_EXP 1
12682: PPUSH
12683: CALL_OW 257
12687: PUSH
12688: LD_INT 3
12690: EQUAL
12691: AND
12692: IFFALSE 12822
// begin InGameOn ;
12694: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12698: LD_VAR 0 4
12702: PUSH
12703: LD_INT 1
12705: ARRAY
12706: PPUSH
12707: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12711: LD_EXP 1
12715: PPUSH
12716: LD_STRING D4a-JMM-1
12718: PPUSH
12719: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12723: LD_VAR 0 4
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: LD_EXP 1
12736: PPUSH
12737: CALL_OW 53
// wait ( 0 0$1 ) ;
12741: LD_INT 35
12743: PPUSH
12744: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12748: LD_VAR 0 4
12752: PUSH
12753: LD_INT 1
12755: ARRAY
12756: PPUSH
12757: LD_VAR 0 4
12761: PUSH
12762: LD_INT 1
12764: ARRAY
12765: PPUSH
12766: CALL_OW 250
12770: PUSH
12771: LD_INT 3
12773: PLUS
12774: PPUSH
12775: LD_VAR 0 4
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: PPUSH
12784: CALL_OW 251
12788: PUSH
12789: LD_INT 2
12791: MINUS
12792: PPUSH
12793: CALL_OW 111
// wait ( 0 0$2 ) ;
12797: LD_INT 70
12799: PPUSH
12800: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12804: LD_EXP 1
12808: PPUSH
12809: LD_STRING D4b-JMM-1
12811: PPUSH
12812: CALL_OW 88
// InGameOff ;
12816: CALL_OW 9
// end else
12820: GO 13121
// begin InGameOn ;
12822: CALL_OW 8
// for j in UnitsInside ( i ) do
12826: LD_ADDR_VAR 0 2
12830: PUSH
12831: LD_VAR 0 1
12835: PPUSH
12836: CALL_OW 313
12840: PUSH
12841: FOR_IN
12842: IFFALSE 12877
// if GetClass ( j ) = 3 then
12844: LD_VAR 0 2
12848: PPUSH
12849: CALL_OW 257
12853: PUSH
12854: LD_INT 3
12856: EQUAL
12857: IFFALSE 12875
// tmpMechanicInside = tmpMechanicInside ^ j ;
12859: LD_ADDR_VAR 0 5
12863: PUSH
12864: LD_VAR 0 5
12868: PUSH
12869: LD_VAR 0 2
12873: ADD
12874: ST_TO_ADDR
12875: GO 12841
12877: POP
12878: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12879: LD_VAR 0 5
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 258
12892: PUSH
12893: LD_INT 1
12895: EQUAL
12896: IFFALSE 12914
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12898: LD_VAR 0 5
12902: PUSH
12903: LD_INT 1
12905: ARRAY
12906: PPUSH
12907: LD_STRING D4a-Mech1-1
12909: PPUSH
12910: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12914: LD_VAR 0 5
12918: PUSH
12919: LD_INT 1
12921: ARRAY
12922: PPUSH
12923: CALL_OW 258
12927: PUSH
12928: LD_INT 2
12930: EQUAL
12931: IFFALSE 12949
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12933: LD_VAR 0 5
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: LD_STRING D4a-FMech1-1
12944: PPUSH
12945: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12949: LD_VAR 0 4
12953: PUSH
12954: LD_INT 1
12956: ARRAY
12957: PPUSH
12958: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12962: LD_VAR 0 4
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: LD_VAR 0 5
12975: PUSH
12976: LD_INT 1
12978: ARRAY
12979: PPUSH
12980: CALL_OW 53
// wait ( 0 0$1 ) ;
12984: LD_INT 35
12986: PPUSH
12987: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12991: LD_VAR 0 4
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: LD_VAR 0 4
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PPUSH
13009: CALL_OW 250
13013: PUSH
13014: LD_INT 3
13016: PLUS
13017: PPUSH
13018: LD_VAR 0 4
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PPUSH
13027: CALL_OW 251
13031: PUSH
13032: LD_INT 2
13034: MINUS
13035: PPUSH
13036: CALL_OW 111
// wait ( 0 0$2 ) ;
13040: LD_INT 70
13042: PPUSH
13043: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13047: LD_VAR 0 5
13051: PUSH
13052: LD_INT 1
13054: ARRAY
13055: PPUSH
13056: CALL_OW 258
13060: PUSH
13061: LD_INT 1
13063: EQUAL
13064: IFFALSE 13082
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13066: LD_VAR 0 5
13070: PUSH
13071: LD_INT 1
13073: ARRAY
13074: PPUSH
13075: LD_STRING D4b-Mech1-1
13077: PPUSH
13078: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13082: LD_VAR 0 5
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PPUSH
13091: CALL_OW 258
13095: PUSH
13096: LD_INT 2
13098: EQUAL
13099: IFFALSE 13117
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13101: LD_VAR 0 5
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: PPUSH
13110: LD_STRING D4b-FMech1-1
13112: PPUSH
13113: CALL_OW 88
// InGameOff ;
13117: CALL_OW 9
// end ; end ;
13121: GO 12659
13123: POP
13124: POP
// end ;
13125: PPOPN 5
13127: END
// function CheckMehInside ; var i , j ; begin
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
13132: PPUSH
// result = false ;
13133: LD_ADDR_VAR 0 1
13137: PUSH
13138: LD_INT 0
13140: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13141: LD_ADDR_VAR 0 2
13145: PUSH
13146: LD_INT 22
13148: PUSH
13149: LD_INT 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 30
13158: PUSH
13159: LD_INT 36
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PPUSH
13170: CALL_OW 69
13174: PUSH
13175: FOR_IN
13176: IFFALSE 13227
// begin for j in UnitsInside ( i ) do
13178: LD_ADDR_VAR 0 3
13182: PUSH
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 313
13192: PUSH
13193: FOR_IN
13194: IFFALSE 13223
// begin if GetClass ( j ) = 3 then
13196: LD_VAR 0 3
13200: PPUSH
13201: CALL_OW 257
13205: PUSH
13206: LD_INT 3
13208: EQUAL
13209: IFFALSE 13221
// begin result = true ;
13211: LD_ADDR_VAR 0 1
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// break ;
13219: GO 13223
// end ; end ;
13221: GO 13193
13223: POP
13224: POP
// end ;
13225: GO 13175
13227: POP
13228: POP
// end ;
13229: LD_VAR 0 1
13233: RET
// every 25 25$0 do
13234: GO 13236
13236: DISABLE
// begin PrepareKurt ;
13237: CALL 16488 0 0
// end ;
13241: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13242: LD_EXP 18
13246: PPUSH
13247: LD_INT 9
13249: PPUSH
13250: CALL_OW 308
13254: PUSH
13255: LD_EXP 20
13259: PUSH
13260: LD_INT 1
13262: EQUAL
13263: AND
13264: IFFALSE 13338
13266: GO 13268
13268: DISABLE
// begin RemoveUnit ( Kurt ) ;
13269: LD_EXP 18
13273: PPUSH
13274: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13278: LD_EXP 18
13282: PPUSH
13283: LD_STRING Kurt
13285: PPUSH
13286: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13290: LD_INT 1
13292: PPUSH
13293: LD_INT 2
13295: PPUSH
13296: CALL_OW 81
13300: PUSH
13301: LD_INT 0
13303: EQUAL
13304: IFFALSE 13314
// KurtStatus = 1 ;
13306: LD_ADDR_EXP 19
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13314: LD_INT 1
13316: PPUSH
13317: LD_INT 2
13319: PPUSH
13320: CALL_OW 81
13324: PUSH
13325: LD_INT 2
13327: EQUAL
13328: IFFALSE 13338
// KurtStatus = 2 ;
13330: LD_ADDR_EXP 19
13334: PUSH
13335: LD_INT 2
13337: ST_TO_ADDR
// end ;
13338: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13339: LD_INT 1
13341: PPUSH
13342: LD_INT 2
13344: PPUSH
13345: CALL_OW 81
13349: PUSH
13350: LD_INT 2
13352: EQUAL
13353: PUSH
13354: LD_EXP 18
13358: PPUSH
13359: CALL_OW 302
13363: AND
13364: IFFALSE 13389
13366: GO 13368
13368: DISABLE
// begin DialogueOn ;
13369: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13373: LD_EXP 18
13377: PPUSH
13378: LD_STRING D2a-Kurt-1
13380: PPUSH
13381: CALL_OW 88
// DialogueOff ;
13385: CALL_OW 7
// end ;
13389: END
// every 35 35$0 do
13390: GO 13392
13392: DISABLE
// begin PrepareJoan ;
13393: CALL 2369 0 0
// wait ( 1 1$0 ) ;
13397: LD_INT 2100
13399: PPUSH
13400: CALL_OW 67
// if IsOK ( Lisa ) then
13404: LD_EXP 2
13408: PPUSH
13409: CALL_OW 302
13413: IFFALSE 13543
// begin DialogueOn ;
13415: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13419: LD_EXP 2
13423: PPUSH
13424: LD_STRING D7-Lisa-1
13426: PPUSH
13427: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13431: LD_EXP 1
13435: PPUSH
13436: LD_STRING D7-JMM-1
13438: PPUSH
13439: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13443: LD_EXP 2
13447: PPUSH
13448: LD_STRING D7-Lisa-2
13450: PPUSH
13451: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13455: LD_EXP 1
13459: PPUSH
13460: LD_STRING D7-JMM-2
13462: PPUSH
13463: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13467: LD_EXP 2
13471: PPUSH
13472: LD_STRING D7-Lisa-3
13474: PPUSH
13475: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13479: LD_EXP 1
13483: PPUSH
13484: LD_STRING D7-JMM-3
13486: PPUSH
13487: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13491: LD_EXP 2
13495: PPUSH
13496: LD_STRING D7-Lisa-4
13498: PPUSH
13499: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13503: LD_EXP 1
13507: PPUSH
13508: LD_STRING D7-JMM-4
13510: PPUSH
13511: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13515: LD_EXP 1
13519: PPUSH
13520: LD_STRING D7-JMM-4a
13522: PPUSH
13523: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13527: LD_EXP 2
13531: PPUSH
13532: LD_STRING D7-Lisa-5
13534: PPUSH
13535: CALL_OW 88
// DialogueOff ;
13539: CALL_OW 7
// end ; end ;
13543: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13544: LD_INT 22
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 33
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: PUSH
13573: LD_INT 2
13575: GREATEREQUAL
13576: IFFALSE 13596
13578: GO 13580
13580: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13581: LD_STRING MRa
13583: PPUSH
13584: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13588: LD_ADDR_EXP 27
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// end ;
13596: END
// every 4 4$0 do
13597: GO 13599
13599: DISABLE
// PrepareRandoms ( 1 ) ;
13600: LD_INT 1
13602: PPUSH
13603: CALL 3394 0 1
13607: END
// every 10 10$0 do
13608: GO 13610
13610: DISABLE
// PrepareRandoms ( 2 ) ;
13611: LD_INT 2
13613: PPUSH
13614: CALL 3394 0 1
13618: END
// every 28 28$0 do
13619: GO 13621
13621: DISABLE
// PrepareRandoms ( 4 ) ;
13622: LD_INT 4
13624: PPUSH
13625: CALL 3394 0 1
13629: END
// every 32 32$0 do
13630: GO 13632
13632: DISABLE
// PrepareRandoms ( 5 ) ;
13633: LD_INT 5
13635: PPUSH
13636: CALL 3394 0 1
13640: END
// every 35 35$30 do
13641: GO 13643
13643: DISABLE
// PrepareRandoms ( 6 ) ;
13644: LD_INT 6
13646: PPUSH
13647: CALL 3394 0 1
13651: END
// every 37 37$20 do
13652: GO 13654
13654: DISABLE
// PrepareRandoms ( 7 ) ;
13655: LD_INT 7
13657: PPUSH
13658: CALL 3394 0 1
13662: END
// every 5 5$20 do
13663: GO 13665
13665: DISABLE
// begin DialogueOn ;
13666: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13670: LD_EXP 10
13674: PPUSH
13675: LD_STRING D12a-Sci-1
13677: PPUSH
13678: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13682: LD_EXP 1
13686: PPUSH
13687: LD_STRING D12a-JMM-1
13689: PPUSH
13690: CALL_OW 88
// DialogueOff ;
13694: CALL_OW 7
// cratesStatus = 1 ;
13698: LD_ADDR_EXP 37
13702: PUSH
13703: LD_INT 1
13705: ST_TO_ADDR
// end ;
13706: END
// every 13 13$0 do
13707: GO 13709
13709: DISABLE
// begin DialogueOn ;
13710: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13714: LD_EXP 10
13718: PPUSH
13719: LD_STRING D12b-Sci-1
13721: PPUSH
13722: CALL_OW 94
// DialogueOff ;
13726: CALL_OW 7
// cratesStatus = 2 ;
13730: LD_ADDR_EXP 37
13734: PUSH
13735: LD_INT 2
13737: ST_TO_ADDR
// end ;
13738: END
// every 32 32$0 do
13739: GO 13741
13741: DISABLE
// begin DialogueOn ;
13742: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13746: LD_EXP 10
13750: PPUSH
13751: LD_STRING  D12c-Sci-1
13753: PPUSH
13754: CALL_OW 94
// DialogueOff ;
13758: CALL_OW 7
// wait ( 3 3$0 ) ;
13762: LD_INT 6300
13764: PPUSH
13765: CALL_OW 67
// DialogueOn ;
13769: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13773: LD_EXP 10
13777: PPUSH
13778: LD_STRING  D12d-Sci-1
13780: PPUSH
13781: CALL_OW 94
// DialogueOff ;
13785: CALL_OW 7
// cratesStatus = 1 ;
13789: LD_ADDR_EXP 37
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// end ;
13797: END
// every 42 42$0 do
13798: GO 13800
13800: DISABLE
// begin DialogueOn ;
13801: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13805: LD_EXP 10
13809: PPUSH
13810: LD_STRING D12e-Sci-1
13812: PPUSH
13813: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13817: LD_EXP 1
13821: PPUSH
13822: LD_STRING D12e-JMM-1
13824: PPUSH
13825: CALL_OW 88
// DialogueOff ;
13829: CALL_OW 7
// cratesStatus = 2 ;
13833: LD_ADDR_EXP 37
13837: PUSH
13838: LD_INT 2
13840: ST_TO_ADDR
// end ;
13841: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13842: LD_INT 22
13844: PUSH
13845: LD_INT 6
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 21
13854: PUSH
13855: LD_INT 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 34
13864: PUSH
13865: LD_INT 51
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: PUSH
13882: LD_INT 0
13884: GREATER
13885: IFFALSE 13968
13887: GO 13889
13889: DISABLE
13890: LD_INT 0
13892: PPUSH
// begin enable ;
13893: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: LD_INT 22
13901: PUSH
13902: LD_INT 6
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 2
13911: PUSH
13912: LD_INT 21
13914: PUSH
13915: LD_INT 1
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 21
13924: PUSH
13925: LD_INT 2
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PPUSH
13941: CALL_OW 69
13945: PUSH
13946: FOR_IN
13947: IFFALSE 13966
// ComAgressiveMove ( i , 138 , 168 ) ;
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_INT 138
13956: PPUSH
13957: LD_INT 168
13959: PPUSH
13960: CALL_OW 114
13964: GO 13946
13966: POP
13967: POP
// end ;
13968: PPOPN 1
13970: END
// every 0 0$1 do var i ;
13971: GO 13973
13973: DISABLE
13974: LD_INT 0
13976: PPUSH
// begin enable ;
13977: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13978: LD_ADDR_VAR 0 1
13982: PUSH
13983: LD_INT 5
13985: PPUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 22
13991: PUSH
13992: LD_INT 3
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 6
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: PPUSH
14017: CALL_OW 70
14021: PUSH
14022: FOR_IN
14023: IFFALSE 14087
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14025: LD_INT 5
14027: PPUSH
14028: LD_INT 22
14030: PUSH
14031: LD_INT 6
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 34
14040: PUSH
14041: LD_INT 51
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 70
14056: PUSH
14057: LD_INT 0
14059: GREATER
14060: IFFALSE 14076
// sendedConvoys = sendedConvoys + 1 ;
14062: LD_ADDR_EXP 38
14066: PUSH
14067: LD_EXP 38
14071: PUSH
14072: LD_INT 1
14074: PLUS
14075: ST_TO_ADDR
// RemoveUnit ( i ) ;
14076: LD_VAR 0 1
14080: PPUSH
14081: CALL_OW 64
// end ;
14085: GO 14022
14087: POP
14088: POP
// end ; end_of_file
14089: PPOPN 1
14091: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14092: LD_VAR 0 1
14096: PUSH
14097: LD_INT 1
14099: EQUAL
14100: PUSH
14101: LD_VAR 0 2
14105: PUSH
14106: LD_INT 3
14108: EQUAL
14109: AND
14110: IFFALSE 14120
// contactWithRussian = 1 ;
14112: LD_ADDR_EXP 21
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// end ;
14120: PPOPN 2
14122: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14123: LD_VAR 0 1
14127: PPUSH
14128: CALL_OW 266
14132: PUSH
14133: LD_INT 36
14135: EQUAL
14136: PUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 255
14146: PUSH
14147: LD_INT 1
14149: EQUAL
14150: AND
14151: PUSH
14152: LD_INT 22
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 21
14164: PUSH
14165: LD_INT 2
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 33
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: PUSH
14192: LD_INT 0
14194: EQUAL
14195: AND
14196: PUSH
14197: LD_EXP 22
14201: PUSH
14202: LD_INT 0
14204: EQUAL
14205: AND
14206: IFFALSE 14275
// begin firstTower = 1 ;
14208: LD_ADDR_EXP 22
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14216: LD_INT 22
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 25
14238: PUSH
14239: LD_INT 3
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 69
14255: PUSH
14256: LD_EXP 1
14260: PUSH
14261: EMPTY
14262: LIST
14263: DIFF
14264: PPUSH
14265: LD_STRING D3b-Mech1-1
14267: PPUSH
14268: LD_STRING D3b-Mech1-1
14270: PPUSH
14271: CALL 4716 0 3
// end ; if GetSide ( building ) = 3 then
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 255
14284: PUSH
14285: LD_INT 3
14287: EQUAL
14288: IFFALSE 14362
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14290: LD_ADDR_EXP 30
14294: PUSH
14295: LD_EXP 30
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: CALL_OW 3
14307: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14308: LD_ADDR_EXP 30
14312: PUSH
14313: LD_EXP 30
14317: PPUSH
14318: LD_INT 1
14320: PPUSH
14321: CALL_OW 3
14325: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14326: LD_ADDR_EXP 30
14330: PUSH
14331: LD_EXP 30
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 3
14343: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14344: LD_ADDR_EXP 30
14348: PUSH
14349: LD_EXP 30
14353: PPUSH
14354: LD_INT 1
14356: PPUSH
14357: CALL_OW 3
14361: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14362: LD_VAR 0 1
14366: PPUSH
14367: CALL_OW 255
14371: PUSH
14372: LD_INT 3
14374: EQUAL
14375: PUSH
14376: LD_VAR 0 1
14380: PPUSH
14381: CALL_OW 266
14385: PUSH
14386: LD_INT 0
14388: EQUAL
14389: PUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 266
14399: PUSH
14400: LD_INT 2
14402: EQUAL
14403: OR
14404: PUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 266
14414: PUSH
14415: LD_INT 4
14417: EQUAL
14418: OR
14419: PUSH
14420: EMPTY
14421: LIST
14422: AND
14423: IFFALSE 14434
// ComUpgrade ( building ) ;
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 255
14443: PUSH
14444: LD_INT 3
14446: EQUAL
14447: PUSH
14448: LD_VAR 0 1
14452: PPUSH
14453: CALL_OW 266
14457: PUSH
14458: LD_INT 32
14460: EQUAL
14461: AND
14462: IFFALSE 14503
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_INT 42
14471: PUSH
14472: LD_INT 43
14474: PUSH
14475: LD_INT 44
14477: PUSH
14478: LD_INT 46
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 1
14489: PPUSH
14490: LD_INT 4
14492: PPUSH
14493: CALL_OW 12
14497: ARRAY
14498: PPUSH
14499: CALL_OW 208
// end ; end ;
14503: PPOPN 1
14505: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14506: LD_VAR 0 1
14510: PPUSH
14511: CALL_OW 255
14515: PUSH
14516: LD_INT 1
14518: EQUAL
14519: PUSH
14520: LD_VAR 0 1
14524: PPUSH
14525: CALL_OW 247
14529: PUSH
14530: LD_INT 1
14532: EQUAL
14533: AND
14534: PUSH
14535: LD_VAR 0 1
14539: PPUSH
14540: CALL_OW 257
14544: PUSH
14545: LD_INT 1
14547: EQUAL
14548: PUSH
14549: LD_VAR 0 1
14553: PPUSH
14554: CALL_OW 257
14558: PUSH
14559: LD_INT 2
14561: EQUAL
14562: OR
14563: PUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 257
14573: PUSH
14574: LD_INT 3
14576: EQUAL
14577: OR
14578: PUSH
14579: LD_VAR 0 1
14583: PPUSH
14584: CALL_OW 257
14588: PUSH
14589: LD_INT 4
14591: EQUAL
14592: OR
14593: PUSH
14594: EMPTY
14595: LIST
14596: AND
14597: IFFALSE 14613
// unitLost = unitLost + 1 ;
14599: LD_ADDR_EXP 29
14603: PUSH
14604: LD_EXP 29
14608: PUSH
14609: LD_INT 1
14611: PLUS
14612: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14613: LD_VAR 0 1
14617: PPUSH
14618: CALL_OW 255
14622: PUSH
14623: LD_INT 3
14625: EQUAL
14626: PUSH
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 247
14636: PUSH
14637: LD_INT 3
14639: EQUAL
14640: AND
14641: IFFALSE 15348
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 266
14652: PUSH
14653: LD_INT 31
14655: EQUAL
14656: PUSH
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 266
14666: PUSH
14667: LD_INT 32
14669: EQUAL
14670: OR
14671: PUSH
14672: LD_VAR 0 1
14676: PPUSH
14677: CALL_OW 266
14681: PUSH
14682: LD_INT 36
14684: EQUAL
14685: OR
14686: PUSH
14687: LD_VAR 0 1
14691: PPUSH
14692: CALL_OW 266
14696: PUSH
14697: LD_INT 0
14699: EQUAL
14700: OR
14701: PUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 266
14711: PUSH
14712: LD_INT 24
14714: EQUAL
14715: OR
14716: PUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 266
14726: PUSH
14727: LD_INT 17
14729: EQUAL
14730: OR
14731: PUSH
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 266
14741: PUSH
14742: LD_INT 25
14744: EQUAL
14745: OR
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 266
14756: PUSH
14757: LD_INT 19
14759: EQUAL
14760: OR
14761: PUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: CALL_OW 266
14771: PUSH
14772: LD_INT 20
14774: EQUAL
14775: OR
14776: PUSH
14777: LD_VAR 0 1
14781: PPUSH
14782: CALL_OW 266
14786: PUSH
14787: LD_INT 18
14789: EQUAL
14790: OR
14791: PUSH
14792: LD_VAR 0 1
14796: PPUSH
14797: CALL_OW 266
14801: PUSH
14802: LD_INT 21
14804: EQUAL
14805: OR
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 266
14816: PUSH
14817: LD_INT 23
14819: EQUAL
14820: OR
14821: PUSH
14822: LD_VAR 0 1
14826: PPUSH
14827: CALL_OW 266
14831: PUSH
14832: LD_INT 16
14834: EQUAL
14835: OR
14836: PUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 266
14846: PUSH
14847: LD_INT 6
14849: EQUAL
14850: OR
14851: PUSH
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 266
14861: PUSH
14862: LD_INT 29
14864: EQUAL
14865: OR
14866: PUSH
14867: LD_VAR 0 1
14871: PPUSH
14872: CALL_OW 266
14876: PUSH
14877: LD_INT 26
14879: EQUAL
14880: OR
14881: PUSH
14882: LD_VAR 0 1
14886: PPUSH
14887: CALL_OW 266
14891: PUSH
14892: LD_INT 30
14894: EQUAL
14895: OR
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 266
14906: PUSH
14907: LD_INT 28
14909: EQUAL
14910: OR
14911: PUSH
14912: LD_VAR 0 1
14916: PPUSH
14917: CALL_OW 266
14921: PUSH
14922: LD_INT 27
14924: EQUAL
14925: OR
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL_OW 266
14936: PUSH
14937: LD_INT 33
14939: EQUAL
14940: OR
14941: PUSH
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 266
14951: PUSH
14952: LD_INT 2
14954: EQUAL
14955: OR
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 266
14966: PUSH
14967: LD_INT 4
14969: EQUAL
14970: OR
14971: IFFALSE 15057
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14973: LD_ADDR_EXP 30
14977: PUSH
14978: LD_EXP 30
14982: PUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 266
14992: ADD
14993: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14994: LD_ADDR_EXP 30
14998: PUSH
14999: LD_EXP 30
15003: PUSH
15004: LD_VAR 0 1
15008: PPUSH
15009: CALL_OW 250
15013: ADD
15014: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15015: LD_ADDR_EXP 30
15019: PUSH
15020: LD_EXP 30
15024: PUSH
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 251
15034: ADD
15035: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15036: LD_ADDR_EXP 30
15040: PUSH
15041: LD_EXP 30
15045: PUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: CALL_OW 254
15055: ADD
15056: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15057: LD_VAR 0 1
15061: PPUSH
15062: CALL_OW 266
15066: PUSH
15067: LD_INT 1
15069: EQUAL
15070: IFFALSE 15149
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15072: LD_ADDR_EXP 30
15076: PUSH
15077: LD_EXP 30
15081: PUSH
15082: LD_INT 0
15084: ADD
15085: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15086: LD_ADDR_EXP 30
15090: PUSH
15091: LD_EXP 30
15095: PUSH
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 250
15105: ADD
15106: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15107: LD_ADDR_EXP 30
15111: PUSH
15112: LD_EXP 30
15116: PUSH
15117: LD_VAR 0 1
15121: PPUSH
15122: CALL_OW 251
15126: ADD
15127: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15128: LD_ADDR_EXP 30
15132: PUSH
15133: LD_EXP 30
15137: PUSH
15138: LD_VAR 0 1
15142: PPUSH
15143: CALL_OW 254
15147: ADD
15148: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15149: LD_VAR 0 1
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 3
15161: EQUAL
15162: IFFALSE 15241
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15164: LD_ADDR_EXP 30
15168: PUSH
15169: LD_EXP 30
15173: PUSH
15174: LD_INT 2
15176: ADD
15177: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15178: LD_ADDR_EXP 30
15182: PUSH
15183: LD_EXP 30
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 250
15197: ADD
15198: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15199: LD_ADDR_EXP 30
15203: PUSH
15204: LD_EXP 30
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 251
15218: ADD
15219: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15220: LD_ADDR_EXP 30
15224: PUSH
15225: LD_EXP 30
15229: PUSH
15230: LD_VAR 0 1
15234: PPUSH
15235: CALL_OW 254
15239: ADD
15240: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 266
15250: PUSH
15251: LD_INT 5
15253: EQUAL
15254: IFFALSE 15333
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15256: LD_ADDR_EXP 30
15260: PUSH
15261: LD_EXP 30
15265: PUSH
15266: LD_INT 4
15268: ADD
15269: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15270: LD_ADDR_EXP 30
15274: PUSH
15275: LD_EXP 30
15279: PUSH
15280: LD_VAR 0 1
15284: PPUSH
15285: CALL_OW 250
15289: ADD
15290: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15291: LD_ADDR_EXP 30
15295: PUSH
15296: LD_EXP 30
15300: PUSH
15301: LD_VAR 0 1
15305: PPUSH
15306: CALL_OW 251
15310: ADD
15311: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15312: LD_ADDR_EXP 30
15316: PUSH
15317: LD_EXP 30
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 254
15331: ADD
15332: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 then
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 257
15342: PUSH
15343: LD_INT 3
15345: EQUAL
15346: IFFALSE 15348
// begin end ; end ; end ;
15348: PPOPN 1
15350: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15351: LD_INT 0
15353: PPUSH
15354: PPUSH
15355: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15356: LD_VAR 0 1
15360: PPUSH
15361: CALL_OW 264
15365: PUSH
15366: LD_INT 51
15368: EQUAL
15369: PUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 255
15379: PUSH
15380: LD_INT 3
15382: EQUAL
15383: AND
15384: IFFALSE 15446
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_INT 2
15393: PPUSH
15394: CALL_OW 274
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 275
15406: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15407: LD_INT 2
15409: PPUSH
15410: CALL_OW 274
15414: PPUSH
15415: LD_INT 1
15417: PPUSH
15418: LD_VAR 0 5
15422: PUSH
15423: LD_INT 100
15425: MINUS
15426: PPUSH
15427: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15431: LD_VAR 0 1
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: LD_INT 100
15441: PPUSH
15442: CALL_OW 291
// end ; if building = rufabsupp then
15446: LD_VAR 0 2
15450: PUSH
15451: LD_INT 17
15453: EQUAL
15454: IFFALSE 15468
// SetSide ( vehicle , 6 ) ;
15456: LD_VAR 0 1
15460: PPUSH
15461: LD_INT 6
15463: PPUSH
15464: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15468: LD_VAR 0 2
15472: PPUSH
15473: CALL_OW 255
15477: PUSH
15478: LD_INT 3
15480: EQUAL
15481: PUSH
15482: LD_VAR 0 2
15486: PPUSH
15487: CALL_OW 302
15491: AND
15492: IFFALSE 15562
// begin uc_side = 3 ;
15494: LD_ADDR_OWVAR 20
15498: PUSH
15499: LD_INT 3
15501: ST_TO_ADDR
// uc_nation = 3 ;
15502: LD_ADDR_OWVAR 21
15506: PUSH
15507: LD_INT 3
15509: ST_TO_ADDR
// hc_gallery :=  ;
15510: LD_ADDR_OWVAR 33
15514: PUSH
15515: LD_STRING 
15517: ST_TO_ADDR
// hc_name :=  ;
15518: LD_ADDR_OWVAR 26
15522: PUSH
15523: LD_STRING 
15525: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15526: LD_INT 0
15528: PPUSH
15529: LD_EXP 33
15533: PPUSH
15534: LD_EXP 34
15538: PPUSH
15539: CALL_OW 12
15543: PPUSH
15544: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15548: CALL_OW 44
15552: PPUSH
15553: LD_VAR 0 2
15557: PPUSH
15558: CALL_OW 52
// end ; if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
15562: LD_VAR 0 2
15566: PUSH
15567: LD_INT 21
15569: EQUAL
15570: PUSH
15571: LD_VAR 0 2
15575: PPUSH
15576: CALL_OW 255
15580: PUSH
15581: LD_INT 3
15583: EQUAL
15584: AND
15585: PUSH
15586: LD_VAR 0 1
15590: PPUSH
15591: CALL_OW 264
15595: PUSH
15596: LD_INT 42
15598: EQUAL
15599: PUSH
15600: LD_VAR 0 1
15604: PPUSH
15605: CALL_OW 264
15609: PUSH
15610: LD_INT 43
15612: EQUAL
15613: OR
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 264
15624: PUSH
15625: LD_INT 44
15627: EQUAL
15628: OR
15629: PUSH
15630: EMPTY
15631: LIST
15632: AND
15633: IFFALSE 15651
// russianTanks = russianTanks ^ vehicle ;
15635: LD_ADDR_EXP 35
15639: PUSH
15640: LD_EXP 35
15644: PUSH
15645: LD_VAR 0 1
15649: ADD
15650: ST_TO_ADDR
// end ;
15651: PPOPN 5
15653: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15654: LD_VAR 0 1
15658: PPUSH
15659: CALL_OW 255
15663: PUSH
15664: LD_INT 3
15666: EQUAL
15667: IFFALSE 15683
// tamedApemans = tamedApemans + 1 ;
15669: LD_ADDR_EXP 31
15673: PUSH
15674: LD_EXP 31
15678: PUSH
15679: LD_INT 1
15681: PLUS
15682: ST_TO_ADDR
// end ;
15683: PPOPN 2
15685: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
15686: LD_INT 0
15688: PPUSH
15689: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
15690: LD_VAR 0 1
15694: PPUSH
15695: CALL_OW 255
15699: PUSH
15700: LD_INT 3
15702: EQUAL
15703: PUSH
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 247
15713: PUSH
15714: LD_INT 2
15716: EQUAL
15717: AND
15718: PUSH
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 264
15728: PUSH
15729: LD_INT 42
15731: EQUAL
15732: PUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL_OW 264
15742: PUSH
15743: LD_INT 43
15745: EQUAL
15746: OR
15747: PUSH
15748: LD_VAR 0 1
15752: PPUSH
15753: CALL_OW 264
15757: PUSH
15758: LD_INT 44
15760: EQUAL
15761: OR
15762: PUSH
15763: EMPTY
15764: LIST
15765: AND
15766: IFFALSE 15913
// begin tmpMeh = UnitsInside ( unit ) ;
15768: LD_ADDR_VAR 0 3
15772: PUSH
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL_OW 313
15782: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15783: LD_VAR 0 3
15787: PPUSH
15788: CALL_OW 121
// wait ( 0 0$1 ) ;
15792: LD_INT 35
15794: PPUSH
15795: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 21
15806: PPUSH
15807: CALL_OW 120
// for i in russianDamageTanks do
15811: LD_ADDR_VAR 0 2
15815: PUSH
15816: LD_EXP 36
15820: PUSH
15821: FOR_IN
15822: IFFALSE 15911
// begin if i = unit then
15824: LD_VAR 0 2
15828: PUSH
15829: LD_VAR 0 1
15833: EQUAL
15834: IFFALSE 15909
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
15836: LD_INT 21
15838: PPUSH
15839: LD_VAR 0 1
15843: PPUSH
15844: CALL_OW 265
15848: PPUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 262
15858: PPUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 263
15868: PPUSH
15869: LD_VAR 0 1
15873: PPUSH
15874: CALL_OW 264
15878: PPUSH
15879: CALL_OW 185
// russianDamageTanks = Delete ( russianDamageTanks , i [ i ] ) ;
15883: LD_ADDR_EXP 36
15887: PUSH
15888: LD_EXP 36
15892: PPUSH
15893: LD_VAR 0 2
15897: PUSH
15898: LD_VAR 0 2
15902: ARRAY
15903: PPUSH
15904: CALL_OW 3
15908: ST_TO_ADDR
// end ; end ;
15909: GO 15821
15911: POP
15912: POP
// end ; end ; end_of_file
15913: PPOPN 3
15915: END
// every 0 0$30 trigger cratesStatus = 1 do
15916: LD_EXP 37
15920: PUSH
15921: LD_INT 1
15923: EQUAL
15924: IFFALSE 15988
15926: GO 15928
15928: DISABLE
// begin enable ;
15929: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15930: LD_INT 350
15932: PUSH
15933: LD_INT 1050
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 1
15942: PPUSH
15943: LD_INT 2
15945: PPUSH
15946: CALL_OW 12
15950: ARRAY
15951: PPUSH
15952: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15956: LD_INT 4
15958: PUSH
15959: LD_INT 5
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 1
15968: PPUSH
15969: LD_INT 2
15971: PPUSH
15972: CALL_OW 12
15976: ARRAY
15977: PPUSH
15978: LD_INT 7
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 55
// end ;
15988: END
// every 1 1$0 trigger cratesStatus = 2 do
15989: LD_EXP 37
15993: PUSH
15994: LD_INT 2
15996: EQUAL
15997: IFFALSE 16061
15999: GO 16001
16001: DISABLE
// begin enable ;
16002: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16003: LD_INT 3150
16005: PUSH
16006: LD_INT 4550
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 1
16015: PPUSH
16016: LD_INT 2
16018: PPUSH
16019: CALL_OW 12
16023: ARRAY
16024: PPUSH
16025: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16029: LD_INT 2
16031: PUSH
16032: LD_INT 5
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 1
16041: PPUSH
16042: LD_INT 2
16044: PPUSH
16045: CALL_OW 12
16049: ARRAY
16050: PPUSH
16051: LD_INT 8
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: CALL_OW 55
// end ;
16061: END
// every 0 0$30 + 0 0$10 do
16062: GO 16064
16064: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 2
16080: PPUSH
16081: CALL_OW 12
16085: ARRAY
16086: PPUSH
16087: LD_INT 8
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 55
// Wait ( 0 0$15 ) ;
16097: LD_INT 525
16099: PPUSH
16100: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16104: LD_INT 4
16106: PUSH
16107: LD_INT 5
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: LD_INT 1
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 12
16124: ARRAY
16125: PPUSH
16126: LD_INT 8
16128: PPUSH
16129: LD_INT 1
16131: PPUSH
16132: CALL_OW 55
// Wait ( 0 0$20 ) ;
16136: LD_INT 700
16138: PPUSH
16139: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16143: LD_INT 4
16145: PUSH
16146: LD_INT 5
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 1
16155: PPUSH
16156: LD_INT 2
16158: PPUSH
16159: CALL_OW 12
16163: ARRAY
16164: PPUSH
16165: LD_INT 8
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: CALL_OW 55
// end ; end_of_file
16175: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16176: LD_EXP 23
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16485
16186: GO 16188
16188: DISABLE
16189: LD_INT 0
16191: PPUSH
16192: PPUSH
16193: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16194: LD_ADDR_VAR 0 2
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_INT 1
16204: PUSH
16205: EMPTY
16206: LIST
16207: LIST
16208: PUSH
16209: LD_INT 21
16211: PUSH
16212: LD_INT 3
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: LD_INT 30
16224: PUSH
16225: LD_INT 0
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 30
16234: PUSH
16235: LD_INT 1
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// for i in tmp do
16257: LD_ADDR_VAR 0 1
16261: PUSH
16262: LD_VAR 0 2
16266: PUSH
16267: FOR_IN
16268: IFFALSE 16301
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16270: LD_ADDR_VAR 0 3
16274: PUSH
16275: LD_VAR 0 3
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 274
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: CALL_OW 275
16297: PLUS
16298: ST_TO_ADDR
16299: GO 16267
16301: POP
16302: POP
// strings = [ ] ;
16303: LD_ADDR_EXP 26
16307: PUSH
16308: EMPTY
16309: ST_TO_ADDR
// if tmp = 0 then
16310: LD_VAR 0 2
16314: PUSH
16315: LD_INT 0
16317: EQUAL
16318: IFFALSE 16343
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16320: LD_ADDR_EXP 26
16324: PUSH
16325: LD_EXP 26
16329: PUSH
16330: LD_STRING #Am06-1
16332: PUSH
16333: LD_EXP 24
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: ADD
16342: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
16343: LD_VAR 0 2
16347: PUSH
16348: LD_INT 0
16350: GREATER
16351: PUSH
16352: LD_EXP 24
16356: PUSH
16357: LD_VAR 0 3
16361: GREATER
16362: AND
16363: IFFALSE 16394
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16365: LD_ADDR_EXP 26
16369: PUSH
16370: LD_EXP 26
16374: PUSH
16375: LD_STRING #Am06-1
16377: PUSH
16378: LD_EXP 24
16382: PUSH
16383: LD_VAR 0 3
16387: MINUS
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: ADD
16393: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 0
16401: GREATER
16402: PUSH
16403: LD_EXP 24
16407: PUSH
16408: LD_VAR 0 3
16412: LESSEQUAL
16413: AND
16414: IFFALSE 16437
// strings = strings ^ [ #Am06-1 , 0 ] ;
16416: LD_ADDR_EXP 26
16420: PUSH
16421: LD_EXP 26
16425: PUSH
16426: LD_STRING #Am06-1
16428: PUSH
16429: LD_INT 0
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: ADD
16436: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16437: LD_ADDR_EXP 25
16441: PUSH
16442: LD_EXP 25
16446: PUSH
16447: LD_INT 35
16449: MINUS
16450: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16451: LD_ADDR_EXP 26
16455: PUSH
16456: LD_EXP 26
16460: PUSH
16461: LD_STRING #Am06-2
16463: PUSH
16464: LD_EXP 25
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: ADD
16473: ST_TO_ADDR
// display_strings = strings ;
16474: LD_ADDR_OWVAR 47
16478: PUSH
16479: LD_EXP 26
16483: ST_TO_ADDR
// enable ;
16484: ENABLE
// end ; end_of_file
16485: PPOPN 3
16487: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
16488: LD_INT 0
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
// j = 0 ;
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_INT 0
16504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16505: LD_INT 35
16507: PPUSH
16508: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
16512: LD_ADDR_VAR 0 2
16516: PUSH
16517: LD_INT 22
16519: PUSH
16520: LD_INT 1
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 21
16529: PUSH
16530: LD_INT 1
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 25
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 25
16562: PUSH
16563: LD_INT 3
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 25
16572: PUSH
16573: LD_INT 4
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16704
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
16600: LD_INT 22
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 21
16635: PUSH
16636: LD_INT 3
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 59
16645: PUSH
16646: EMPTY
16647: LIST
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 91
16658: PUSH
16659: LD_VAR 0 2
16663: PUSH
16664: LD_INT 25
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL_OW 69
16681: NOT
16682: IFFALSE 16702
// begin tmp = i ;
16684: LD_ADDR_VAR 0 4
16688: PUSH
16689: LD_VAR 0 2
16693: ST_TO_ADDR
// j = 1 ;
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_INT 1
16701: ST_TO_ADDR
// end ; end ;
16702: GO 16597
16704: POP
16705: POP
// until j = 1 ;
16706: LD_VAR 0 3
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: IFFALSE 16505
// blockSpawn = 1 ;
16716: LD_ADDR_EXP 28
16720: PUSH
16721: LD_INT 1
16723: ST_TO_ADDR
// uc_side = 2 ;
16724: LD_ADDR_OWVAR 20
16728: PUSH
16729: LD_INT 2
16731: ST_TO_ADDR
// uc_nation = 2 ;
16732: LD_ADDR_OWVAR 21
16736: PUSH
16737: LD_INT 2
16739: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
16740: LD_ADDR_EXP 18
16744: PUSH
16745: LD_STRING Kurt
16747: PPUSH
16748: LD_INT 0
16750: PPUSH
16751: CALL 4653 0 2
16755: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
16756: LD_EXP 18
16760: PPUSH
16761: LD_VAR 0 4
16765: PPUSH
16766: CALL_OW 250
16770: PPUSH
16771: LD_VAR 0 4
16775: PPUSH
16776: CALL_OW 251
16780: PPUSH
16781: LD_INT 5
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 50
// InGameOn ;
16791: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16795: LD_EXP 18
16799: PPUSH
16800: CALL_OW 87
// wait ( 0 0$2 ) ;
16804: LD_INT 70
16806: PPUSH
16807: CALL_OW 67
// ComExitVehicle ( tmp ) ;
16811: LD_VAR 0 4
16815: PPUSH
16816: CALL_OW 121
// ComExitBuilding ( tmp ) ;
16820: LD_VAR 0 4
16824: PPUSH
16825: CALL_OW 122
// wait ( 0 0$1 ) ;
16829: LD_INT 35
16831: PPUSH
16832: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
16836: LD_EXP 18
16840: PPUSH
16841: LD_VAR 0 4
16845: PPUSH
16846: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
16850: LD_VAR 0 4
16854: PPUSH
16855: LD_EXP 18
16859: PPUSH
16860: CALL_OW 119
// DialogueOn ;
16864: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16868: LD_EXP 18
16872: PPUSH
16873: LD_STRING D2-Kurt-1
16875: PPUSH
16876: CALL_OW 88
// if tmp = JMM then
16880: LD_VAR 0 4
16884: PUSH
16885: LD_EXP 1
16889: EQUAL
16890: IFFALSE 16982
// begin Say ( JMM , D2-JMM-1 ) ;
16892: LD_EXP 1
16896: PPUSH
16897: LD_STRING D2-JMM-1
16899: PPUSH
16900: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16904: LD_EXP 18
16908: PPUSH
16909: LD_STRING D2-Kurt-2
16911: PPUSH
16912: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16916: LD_EXP 1
16920: PPUSH
16921: LD_STRING D2-JMM-2
16923: PPUSH
16924: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16928: LD_EXP 18
16932: PPUSH
16933: LD_STRING D2-Kurt-3
16935: PPUSH
16936: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16940: LD_EXP 1
16944: PPUSH
16945: LD_STRING D2-JMM-3
16947: PPUSH
16948: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16952: LD_EXP 18
16956: PPUSH
16957: LD_STRING D2-Kurt-4
16959: PPUSH
16960: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16964: LD_EXP 1
16968: PPUSH
16969: LD_STRING D2-JMM-4
16971: PPUSH
16972: CALL_OW 88
// DialogueOff ;
16976: CALL_OW 7
// end else
16980: GO 17292
// begin if GetSex ( tmp ) = 1 then
16982: LD_VAR 0 4
16986: PPUSH
16987: CALL_OW 258
16991: PUSH
16992: LD_INT 1
16994: EQUAL
16995: IFFALSE 17009
// Say ( tmp , D2-Sol1-1 ) ;
16997: LD_VAR 0 4
17001: PPUSH
17002: LD_STRING D2-Sol1-1
17004: PPUSH
17005: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17009: LD_VAR 0 4
17013: PPUSH
17014: CALL_OW 258
17018: PUSH
17019: LD_INT 2
17021: EQUAL
17022: IFFALSE 17036
// Say ( tmp , D2-FSol1-1 ) ;
17024: LD_VAR 0 4
17028: PPUSH
17029: LD_STRING D2-FSol1-1
17031: PPUSH
17032: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17036: LD_EXP 18
17040: PPUSH
17041: LD_STRING D2-Kurt-2
17043: PPUSH
17044: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17048: LD_VAR 0 4
17052: PPUSH
17053: CALL_OW 258
17057: PUSH
17058: LD_INT 1
17060: EQUAL
17061: IFFALSE 17075
// Say ( tmp , D2-Sol1-2 ) ;
17063: LD_VAR 0 4
17067: PPUSH
17068: LD_STRING D2-Sol1-2
17070: PPUSH
17071: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17075: LD_VAR 0 4
17079: PPUSH
17080: CALL_OW 258
17084: PUSH
17085: LD_INT 2
17087: EQUAL
17088: IFFALSE 17102
// Say ( tmp , D2-FSol1-2 ) ;
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_STRING D2-FSol1-2
17097: PPUSH
17098: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17102: LD_EXP 18
17106: PPUSH
17107: LD_STRING D2-Kurt-3
17109: PPUSH
17110: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17114: LD_VAR 0 4
17118: PPUSH
17119: CALL_OW 258
17123: PUSH
17124: LD_INT 1
17126: EQUAL
17127: IFFALSE 17141
// Say ( tmp , D2-Sol1-3 ) ;
17129: LD_VAR 0 4
17133: PPUSH
17134: LD_STRING D2-Sol1-3
17136: PPUSH
17137: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17141: LD_VAR 0 4
17145: PPUSH
17146: CALL_OW 258
17150: PUSH
17151: LD_INT 2
17153: EQUAL
17154: IFFALSE 17168
// Say ( tmp , D2-FSol1-3 ) ;
17156: LD_VAR 0 4
17160: PPUSH
17161: LD_STRING D2-FSol1-3
17163: PPUSH
17164: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17168: LD_EXP 18
17172: PPUSH
17173: LD_STRING D2-Kurt-4
17175: PPUSH
17176: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17180: LD_VAR 0 4
17184: PPUSH
17185: CALL_OW 258
17189: PUSH
17190: LD_INT 1
17192: EQUAL
17193: IFFALSE 17207
// Say ( tmp , D2-Sol1-4 ) ;
17195: LD_VAR 0 4
17199: PPUSH
17200: LD_STRING D2-Sol1-4
17202: PPUSH
17203: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17207: LD_VAR 0 4
17211: PPUSH
17212: CALL_OW 258
17216: PUSH
17217: LD_INT 2
17219: EQUAL
17220: IFFALSE 17234
// Say ( tmp , D2-FSol1-4 ) ;
17222: LD_VAR 0 4
17226: PPUSH
17227: LD_STRING D2-FSol1-4
17229: PPUSH
17230: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17234: LD_VAR 0 4
17238: PPUSH
17239: CALL_OW 258
17243: PUSH
17244: LD_INT 1
17246: EQUAL
17247: IFFALSE 17261
// Say ( tmp , D2-Sol1-5 ) ;
17249: LD_VAR 0 4
17253: PPUSH
17254: LD_STRING D2-Sol1-5
17256: PPUSH
17257: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17261: LD_VAR 0 4
17265: PPUSH
17266: CALL_OW 258
17270: PUSH
17271: LD_INT 2
17273: EQUAL
17274: IFFALSE 17288
// Say ( tmp , D2-FSol1-5 ) ;
17276: LD_VAR 0 4
17280: PPUSH
17281: LD_STRING D2-FSol1-5
17283: PPUSH
17284: CALL_OW 88
// DialogueOff ;
17288: CALL_OW 7
// end ; dec = ShowQuery1 ;
17292: LD_ADDR_VAR 0 6
17296: PUSH
17297: CALL 5255 0 0
17301: ST_TO_ADDR
// if dec = 1 then
17302: LD_VAR 0 6
17306: PUSH
17307: LD_INT 1
17309: EQUAL
17310: IFFALSE 17352
// begin DialogueOn ;
17312: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17316: LD_EXP 18
17320: PPUSH
17321: LD_STRING D2a-Kurt-1
17323: PPUSH
17324: CALL_OW 88
// DialogueOff ;
17328: CALL_OW 7
// InGameOff ;
17332: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17336: LD_INT 1
17338: PPUSH
17339: LD_INT 2
17341: PPUSH
17342: LD_INT 2
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 80
// end ; if dec = 2 then
17352: LD_VAR 0 6
17356: PUSH
17357: LD_INT 2
17359: EQUAL
17360: IFFALSE 17860
// begin DialogueOn ;
17362: CALL_OW 6
// if tmp = JMM then
17366: LD_VAR 0 4
17370: PUSH
17371: LD_EXP 1
17375: EQUAL
17376: IFFALSE 17432
// begin Say ( JMM , D2b-JMM-1 ) ;
17378: LD_EXP 1
17382: PPUSH
17383: LD_STRING D2b-JMM-1
17385: PPUSH
17386: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17390: LD_EXP 18
17394: PPUSH
17395: LD_STRING D2b-Kurt-1
17397: PPUSH
17398: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17402: LD_EXP 1
17406: PPUSH
17407: LD_STRING D2b-JMM-2
17409: PPUSH
17410: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17414: LD_EXP 18
17418: PPUSH
17419: LD_STRING D2b-Kurt-2
17421: PPUSH
17422: CALL_OW 88
// DialogueOff ;
17426: CALL_OW 7
// end else
17430: GO 17622
// begin if GetSex ( tmp ) = 1 then
17432: LD_VAR 0 4
17436: PPUSH
17437: CALL_OW 258
17441: PUSH
17442: LD_INT 1
17444: EQUAL
17445: IFFALSE 17459
// Say ( tmp , D2b-Sol1-1 ) ;
17447: LD_VAR 0 4
17451: PPUSH
17452: LD_STRING D2b-Sol1-1
17454: PPUSH
17455: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17459: LD_VAR 0 4
17463: PPUSH
17464: CALL_OW 258
17468: PUSH
17469: LD_INT 2
17471: EQUAL
17472: IFFALSE 17486
// Say ( tmp , D2b-FSol1-1 ) ;
17474: LD_VAR 0 4
17478: PPUSH
17479: LD_STRING D2b-FSol1-1
17481: PPUSH
17482: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17486: LD_EXP 18
17490: PPUSH
17491: LD_STRING D2b-Kurt-1
17493: PPUSH
17494: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17498: LD_VAR 0 4
17502: PPUSH
17503: CALL_OW 258
17507: PUSH
17508: LD_INT 1
17510: EQUAL
17511: IFFALSE 17525
// Say ( tmp , D2b-Sol1-2 ) ;
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_STRING D2b-Sol1-2
17520: PPUSH
17521: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17525: LD_VAR 0 4
17529: PPUSH
17530: CALL_OW 258
17534: PUSH
17535: LD_INT 2
17537: EQUAL
17538: IFFALSE 17552
// Say ( tmp , D2b-FSol1-2 ) ;
17540: LD_VAR 0 4
17544: PPUSH
17545: LD_STRING D2b-FSol1-2
17547: PPUSH
17548: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17552: LD_EXP 18
17556: PPUSH
17557: LD_STRING D2b-Kurt-2
17559: PPUSH
17560: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17564: LD_VAR 0 4
17568: PPUSH
17569: CALL_OW 258
17573: PUSH
17574: LD_INT 1
17576: EQUAL
17577: IFFALSE 17591
// Say ( tmp , D2c-Sol1-2 ) ;
17579: LD_VAR 0 4
17583: PPUSH
17584: LD_STRING D2c-Sol1-2
17586: PPUSH
17587: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17591: LD_VAR 0 4
17595: PPUSH
17596: CALL_OW 258
17600: PUSH
17601: LD_INT 2
17603: EQUAL
17604: IFFALSE 17618
// Say ( tmp , D2c-FSol1-2 ) ;
17606: LD_VAR 0 4
17610: PPUSH
17611: LD_STRING D2c-FSol1-2
17613: PPUSH
17614: CALL_OW 88
// DialogueOff ;
17618: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
17622: LD_ADDR_VAR 0 7
17626: PUSH
17627: CALL 5329 0 0
17631: ST_TO_ADDR
// if dec2 = 1 then
17632: LD_VAR 0 7
17636: PUSH
17637: LD_INT 1
17639: EQUAL
17640: IFFALSE 17682
// begin DialogueOn ;
17642: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17646: LD_EXP 18
17650: PPUSH
17651: LD_STRING D2a-Kurt-1
17653: PPUSH
17654: CALL_OW 88
// DialogueOff ;
17658: CALL_OW 7
// InGameOff ;
17662: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17666: LD_INT 1
17668: PPUSH
17669: LD_INT 2
17671: PPUSH
17672: LD_INT 2
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL_OW 80
// end ; if dec2 = 2 then
17682: LD_VAR 0 7
17686: PUSH
17687: LD_INT 2
17689: EQUAL
17690: IFFALSE 17860
// begin if tmp = JMM then
17692: LD_VAR 0 4
17696: PUSH
17697: LD_EXP 1
17701: EQUAL
17702: IFFALSE 17762
// begin DialogueOn ;
17704: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17708: LD_EXP 1
17712: PPUSH
17713: LD_STRING D2c-JMM-1
17715: PPUSH
17716: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17720: LD_EXP 18
17724: PPUSH
17725: LD_STRING D2c-Kurt-1
17727: PPUSH
17728: CALL_OW 88
// DialogueOff ;
17732: CALL_OW 7
// InGameOff ;
17736: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17740: LD_EXP 18
17744: PPUSH
17745: LD_INT 9
17747: PPUSH
17748: CALL_OW 113
// readyToEscape = 1 ;
17752: LD_ADDR_EXP 20
17756: PUSH
17757: LD_INT 1
17759: ST_TO_ADDR
// end else
17760: GO 17860
// begin DialogueOn ;
17762: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17766: LD_VAR 0 4
17770: PPUSH
17771: CALL_OW 258
17775: PUSH
17776: LD_INT 1
17778: EQUAL
17779: IFFALSE 17793
// Say ( tmp , D2c-Sol1-1 ) ;
17781: LD_VAR 0 4
17785: PPUSH
17786: LD_STRING D2c-Sol1-1
17788: PPUSH
17789: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17793: LD_VAR 0 4
17797: PPUSH
17798: CALL_OW 258
17802: PUSH
17803: LD_INT 2
17805: EQUAL
17806: IFFALSE 17820
// Say ( tmp , D2c-FSol1-1 ) ;
17808: LD_VAR 0 4
17812: PPUSH
17813: LD_STRING D2c-FSol1-1
17815: PPUSH
17816: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17820: LD_EXP 18
17824: PPUSH
17825: LD_STRING D2c-Kurt-1
17827: PPUSH
17828: CALL_OW 88
// DialogueOff ;
17832: CALL_OW 7
// InGameOff ;
17836: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17840: LD_EXP 18
17844: PPUSH
17845: LD_INT 9
17847: PPUSH
17848: CALL_OW 113
// readyToEscape = 1 ;
17852: LD_ADDR_EXP 20
17856: PUSH
17857: LD_INT 1
17859: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17860: LD_VAR 0 6
17864: PUSH
17865: LD_INT 3
17867: EQUAL
17868: IFFALSE 18042
// begin DialogueOn ;
17870: CALL_OW 6
// if tmp = JMM then
17874: LD_VAR 0 4
17878: PUSH
17879: LD_EXP 1
17883: EQUAL
17884: IFFALSE 17944
// begin DialogueOn ;
17886: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
17890: LD_EXP 1
17894: PPUSH
17895: LD_STRING D2c-JMM-1
17897: PPUSH
17898: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17902: LD_EXP 18
17906: PPUSH
17907: LD_STRING D2c-Kurt-1
17909: PPUSH
17910: CALL_OW 88
// DialogueOff ;
17914: CALL_OW 7
// InGameOff ;
17918: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17922: LD_EXP 18
17926: PPUSH
17927: LD_INT 9
17929: PPUSH
17930: CALL_OW 113
// readyToEscape = 1 ;
17934: LD_ADDR_EXP 20
17938: PUSH
17939: LD_INT 1
17941: ST_TO_ADDR
// end else
17942: GO 18042
// begin DialogueOn ;
17944: CALL_OW 6
// if GetSex ( tmp ) = 1 then
17948: LD_VAR 0 4
17952: PPUSH
17953: CALL_OW 258
17957: PUSH
17958: LD_INT 1
17960: EQUAL
17961: IFFALSE 17975
// Say ( tmp , D2c-Sol1-1 ) ;
17963: LD_VAR 0 4
17967: PPUSH
17968: LD_STRING D2c-Sol1-1
17970: PPUSH
17971: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17975: LD_VAR 0 4
17979: PPUSH
17980: CALL_OW 258
17984: PUSH
17985: LD_INT 2
17987: EQUAL
17988: IFFALSE 18002
// Say ( tmp , D2c-FSol1-1 ) ;
17990: LD_VAR 0 4
17994: PPUSH
17995: LD_STRING D2c-FSol1-1
17997: PPUSH
17998: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18002: LD_EXP 18
18006: PPUSH
18007: LD_STRING D2c-Kurt-1
18009: PPUSH
18010: CALL_OW 88
// DialogueOff ;
18014: CALL_OW 7
// InGameOff ;
18018: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18022: LD_EXP 18
18026: PPUSH
18027: LD_INT 9
18029: PPUSH
18030: CALL_OW 113
// readyToEscape = 1 ;
18034: LD_ADDR_EXP 20
18038: PUSH
18039: LD_INT 1
18041: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18042: LD_ADDR_EXP 28
18046: PUSH
18047: LD_INT 0
18049: ST_TO_ADDR
// end ; end_of_file
18050: LD_VAR 0 1
18054: RET
// every 0 0$1 do
18055: GO 18057
18057: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18058: LD_INT 3
18060: PPUSH
18061: LD_INT 32
18063: PPUSH
18064: LD_INT 3
18066: PPUSH
18067: CALL 5384 0 3
18071: END
// every 0 0$1 do
18072: GO 18074
18074: DISABLE
// begin enable ;
18075: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18076: LD_INT 3
18078: PPUSH
18079: LD_INT 2
18081: PPUSH
18082: CALL 5469 0 2
// if disableHealAI = 0 then
18086: LD_EXP 32
18090: PUSH
18091: LD_INT 0
18093: EQUAL
18094: IFFALSE 18112
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18096: LD_INT 3
18098: PPUSH
18099: LD_INT 10
18101: PPUSH
18102: LD_INT 11
18104: PPUSH
18105: LD_INT 32
18107: PPUSH
18108: CALL 5728 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18112: LD_INT 3
18114: PPUSH
18115: LD_INT 51
18117: PPUSH
18118: LD_INT 7
18120: PPUSH
18121: CALL 7499 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18125: LD_INT 3
18127: PPUSH
18128: LD_INT 14
18130: PPUSH
18131: LD_INT 121
18133: PPUSH
18134: LD_INT 100
18136: PPUSH
18137: CALL 6660 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18141: LD_INT 3
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: CALL 6148 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18151: LD_INT 3
18153: PPUSH
18154: LD_EXP 30
18158: PPUSH
18159: CALL 7642 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18163: LD_INT 3
18165: PPUSH
18166: LD_INT 8
18168: PUSH
18169: LD_INT 67
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PPUSH
18179: LD_INT 2
18181: PPUSH
18182: CALL_OW 12
18186: ARRAY
18187: PPUSH
18188: LD_INT 11
18190: PPUSH
18191: CALL 7848 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18195: LD_INT 3
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL 8205 0 2
// end ;
18205: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18206: LD_INT 22
18208: PUSH
18209: LD_INT 3
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 21
18218: PUSH
18219: LD_INT 2
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 55
18228: PUSH
18229: EMPTY
18230: LIST
18231: PUSH
18232: LD_INT 3
18234: PUSH
18235: LD_INT 34
18237: PUSH
18238: LD_INT 51
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: PUSH
18260: LD_INT 0
18262: EQUAL
18263: PUSH
18264: LD_INT 21
18266: PPUSH
18267: CALL_OW 255
18271: PUSH
18272: LD_INT 3
18274: EQUAL
18275: AND
18276: PUSH
18277: LD_INT 21
18279: PPUSH
18280: CALL_OW 302
18284: AND
18285: PUSH
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 255
18293: PUSH
18294: LD_INT 3
18296: EQUAL
18297: AND
18298: PUSH
18299: LD_INT 2
18301: PPUSH
18302: CALL_OW 302
18306: AND
18307: IFFALSE 18491
18309: GO 18311
18311: DISABLE
// begin enable ;
18312: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18313: LD_INT 2
18315: PPUSH
18316: CALL_OW 274
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: LD_INT 1000
18326: PPUSH
18327: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
18331: LD_INT 3
18333: PPUSH
18334: LD_INT 21
18336: PPUSH
18337: LD_INT 5
18339: PUSH
18340: LD_INT 6
18342: PUSH
18343: LD_INT 6
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_OWVAR 67
18355: ARRAY
18356: PPUSH
18357: LD_INT 43
18359: PUSH
18360: LD_INT 43
18362: PUSH
18363: LD_INT 44
18365: PUSH
18366: LD_INT 44
18368: PUSH
18369: LD_INT 46
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 43
18381: PUSH
18382: LD_INT 43
18384: PUSH
18385: LD_INT 44
18387: PUSH
18388: LD_INT 44
18390: PUSH
18391: LD_INT 44
18393: PUSH
18394: LD_INT 46
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: PUSH
18405: LD_INT 44
18407: PUSH
18408: LD_INT 44
18410: PUSH
18411: LD_INT 44
18413: PUSH
18414: LD_INT 44
18416: PUSH
18417: LD_INT 46
18419: PUSH
18420: LD_INT 46
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: LIST
18435: PUSH
18436: LD_OWVAR 67
18440: ARRAY
18441: PPUSH
18442: LD_INT 1
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: LD_INT 22
18450: PUSH
18451: LD_INT 22
18453: PUSH
18454: LD_INT 24
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PPUSH
18464: LD_INT 2
18466: PPUSH
18467: CALL_OW 12
18471: ARRAY
18472: PUSH
18473: LD_INT 24
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: PUSH
18481: LD_OWVAR 67
18485: ARRAY
18486: PPUSH
18487: CALL 5994 0 7
// end ;
18491: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18492: LD_INT 17
18494: PPUSH
18495: CALL_OW 255
18499: PUSH
18500: LD_INT 3
18502: EQUAL
18503: PUSH
18504: LD_INT 17
18506: PPUSH
18507: CALL_OW 302
18511: AND
18512: PUSH
18513: LD_INT 2
18515: PPUSH
18516: CALL_OW 255
18520: PUSH
18521: LD_INT 3
18523: EQUAL
18524: AND
18525: PUSH
18526: LD_INT 2
18528: PPUSH
18529: CALL_OW 302
18533: AND
18534: IFFALSE 18601
18536: GO 18538
18538: DISABLE
// begin enable ;
18539: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18540: LD_INT 17
18542: PPUSH
18543: LD_INT 22
18545: PPUSH
18546: LD_INT 1
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: LD_INT 42
18554: PUSH
18555: LD_INT 43
18557: PUSH
18558: LD_INT 44
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 3
18571: PPUSH
18572: CALL_OW 12
18576: ARRAY
18577: PPUSH
18578: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
18582: LD_INT 17
18584: PPUSH
18585: LD_INT 22
18587: PPUSH
18588: LD_INT 1
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: LD_INT 51
18596: PPUSH
18597: CALL_OW 185
// end ;
18601: END
// every 2 2$0 do var i , j ;
18602: GO 18604
18604: DISABLE
18605: LD_INT 0
18607: PPUSH
18608: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18609: LD_INT 14700
18611: PUSH
18612: LD_INT 33600
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 1
18621: PPUSH
18622: LD_INT 2
18624: PPUSH
18625: CALL_OW 12
18629: ARRAY
18630: PPUSH
18631: CALL_OW 67
// disableHealAI = 1 ;
18635: LD_ADDR_EXP 32
18639: PUSH
18640: LD_INT 1
18642: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_INT 3
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 4
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PPUSH
18672: CALL_OW 69
18676: PUSH
18677: FOR_IN
18678: IFFALSE 18691
// ComExitBuilding ( i ) ;
18680: LD_VAR 0 1
18684: PPUSH
18685: CALL_OW 122
18689: GO 18677
18691: POP
18692: POP
// wait ( 0 0$1 ) ;
18693: LD_INT 35
18695: PPUSH
18696: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18700: LD_INT 35
18702: PPUSH
18703: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18707: LD_ADDR_VAR 0 1
18711: PUSH
18712: LD_INT 22
18714: PUSH
18715: LD_INT 3
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 25
18724: PUSH
18725: LD_INT 4
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PPUSH
18736: CALL_OW 69
18740: PUSH
18741: FOR_IN
18742: IFFALSE 18819
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18744: LD_ADDR_VAR 0 2
18748: PUSH
18749: LD_INT 19
18751: PPUSH
18752: LD_INT 22
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 25
18764: PUSH
18765: LD_INT 12
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 70
18780: PUSH
18781: FOR_IN
18782: IFFALSE 18815
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18784: LD_VAR 0 1
18788: PPUSH
18789: LD_VAR 0 2
18793: PPUSH
18794: CALL_OW 250
18798: PPUSH
18799: LD_VAR 0 2
18803: PPUSH
18804: CALL_OW 251
18808: PPUSH
18809: CALL_OW 191
// end ;
18813: GO 18781
18815: POP
18816: POP
// end ;
18817: GO 18741
18819: POP
18820: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18821: LD_INT 22
18823: PUSH
18824: LD_INT 3
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 4
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 69
18849: PUSH
18850: LD_INT 0
18852: EQUAL
18853: PUSH
18854: LD_EXP 31
18858: PUSH
18859: LD_INT 6
18861: PUSH
18862: LD_INT 7
18864: PUSH
18865: LD_INT 8
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PUSH
18873: LD_OWVAR 67
18877: ARRAY
18878: GREATEREQUAL
18879: OR
18880: PUSH
18881: LD_INT 19
18883: PPUSH
18884: LD_INT 22
18886: PUSH
18887: LD_INT 0
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 25
18896: PUSH
18897: LD_INT 12
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 70
18912: PUSH
18913: LD_INT 0
18915: EQUAL
18916: OR
18917: IFFALSE 18700
// disableHealAI = 0 ;
18919: LD_ADDR_EXP 32
18923: PUSH
18924: LD_INT 0
18926: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_INT 22
18934: PUSH
18935: LD_INT 3
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 25
18944: PUSH
18945: LD_INT 12
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PPUSH
18956: CALL_OW 69
18960: PUSH
18961: FOR_IN
18962: IFFALSE 18978
// SetClass ( i , 16 ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_INT 16
18971: PPUSH
18972: CALL_OW 336
18976: GO 18961
18978: POP
18979: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18980: LD_ADDR_VAR 0 1
18984: PUSH
18985: LD_INT 22
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 25
18997: PUSH
18998: LD_INT 4
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 69
19013: PUSH
19014: FOR_IN
19015: IFFALSE 19034
// ComMoveXY ( i , 113 , 94 ) ;
19017: LD_VAR 0 1
19021: PPUSH
19022: LD_INT 113
19024: PPUSH
19025: LD_INT 94
19027: PPUSH
19028: CALL_OW 111
19032: GO 19014
19034: POP
19035: POP
// end ;
19036: PPOPN 2
19038: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19039: LD_INT 21
19041: PPUSH
19042: CALL_OW 255
19046: PUSH
19047: LD_INT 3
19049: EQUAL
19050: PUSH
19051: LD_INT 21
19053: PPUSH
19054: CALL_OW 302
19058: AND
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_INT 3
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 34
19072: PUSH
19073: LD_INT 51
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: PUSH
19089: LD_INT 0
19091: EQUAL
19092: AND
19093: IFFALSE 19125
19095: GO 19097
19097: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19098: LD_INT 21
19100: PPUSH
19101: LD_INT 23
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: LD_INT 51
19112: PPUSH
19113: CALL_OW 185
// wait ( 5 5$0 ) ;
19117: LD_INT 10500
19119: PPUSH
19120: CALL_OW 67
// enable ;
19124: ENABLE
// end ; end_of_file
19125: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19126: LD_EXP 25
19130: PUSH
19131: LD_INT 0
19133: LESSEQUAL
19134: IFFALSE 19283
19136: GO 19138
19138: DISABLE
19139: LD_INT 0
19141: PPUSH
19142: PPUSH
19143: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19144: LD_ADDR_VAR 0 2
19148: PUSH
19149: LD_INT 22
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: LD_INT 21
19161: PUSH
19162: LD_INT 3
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 2
19171: PUSH
19172: LD_INT 30
19174: PUSH
19175: LD_INT 0
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: ST_TO_ADDR
// for i in tmp do
19207: LD_ADDR_VAR 0 1
19211: PUSH
19212: LD_VAR 0 2
19216: PUSH
19217: FOR_IN
19218: IFFALSE 19251
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19220: LD_ADDR_VAR 0 3
19224: PUSH
19225: LD_VAR 0 3
19229: PUSH
19230: LD_VAR 0 1
19234: PPUSH
19235: CALL_OW 274
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 275
19247: PLUS
19248: ST_TO_ADDR
19249: GO 19217
19251: POP
19252: POP
// if yourCrates >= needCrates then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_EXP 24
19262: GREATEREQUAL
19263: IFFALSE 19276
// begin FinishMission ( yourCrates ) ;
19265: LD_VAR 0 3
19269: PPUSH
19270: CALL 19286 0 1
// end else
19274: GO 19283
// begin YouLost ( matmin ) ;
19276: LD_STRING matmin
19278: PPUSH
19279: CALL_OW 104
// end ; end ;
19283: PPOPN 3
19285: END
// export function FinishMission ( crates ) ; begin
19286: LD_INT 0
19288: PPUSH
// if crates + 100 > crates then
19289: LD_VAR 0 1
19293: PUSH
19294: LD_INT 100
19296: PLUS
19297: PUSH
19298: LD_VAR 0 1
19302: GREATER
19303: IFFALSE 19327
// begin AddMedal ( cans , 1 ) ;
19305: LD_STRING cans
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19315: LD_INT 1
19317: PPUSH
19318: LD_STRING 06_crates_1
19320: PPUSH
19321: CALL_OW 39
// end else
19325: GO 19348
// begin AddMedal ( cans , - 1 ) ;
19327: LD_STRING cans
19329: PPUSH
19330: LD_INT 1
19332: NEG
19333: PPUSH
19334: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19338: LD_INT 0
19340: PPUSH
19341: LD_STRING 06_crates_1
19343: PPUSH
19344: CALL_OW 39
// end ; if unitLost < 2 then
19348: LD_EXP 29
19352: PUSH
19353: LD_INT 2
19355: LESS
19356: IFFALSE 19370
// begin AddMedal ( people , 1 ) ;
19358: LD_STRING people
19360: PPUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 101
// end else
19368: GO 19381
// begin AddMedal ( people , - 1 ) ;
19370: LD_STRING people
19372: PPUSH
19373: LD_INT 1
19375: NEG
19376: PPUSH
19377: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19381: LD_EXP 27
19385: PPUSH
19386: LD_STRING 06_remoteVehs_1
19388: PPUSH
19389: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19393: LD_EXP 27
19397: PUSH
19398: LD_INT 1
19400: EQUAL
19401: IFFALSE 19415
// begin AddMedal ( remote , 1 ) ;
19403: LD_STRING remote
19405: PPUSH
19406: LD_INT 1
19408: PPUSH
19409: CALL_OW 101
// end else
19413: GO 19455
// begin if GetTech ( 18 , 1 ) = state_enabled then
19415: LD_INT 18
19417: PPUSH
19418: LD_INT 1
19420: PPUSH
19421: CALL_OW 321
19425: PUSH
19426: LD_INT 1
19428: EQUAL
19429: IFFALSE 19444
// begin AddMedal ( remote , - 1 ) ;
19431: LD_STRING remote
19433: PPUSH
19434: LD_INT 1
19436: NEG
19437: PPUSH
19438: CALL_OW 101
// end else
19442: GO 19455
// begin AddMedal ( remote , - 2 ) ;
19444: LD_STRING remote
19446: PPUSH
19447: LD_INT 2
19449: NEG
19450: PPUSH
19451: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
19455: LD_EXP 19
19459: PPUSH
19460: LD_STRING 06_KurtStatus_1
19462: PPUSH
19463: CALL_OW 39
// GiveMedals ( Main ) ;
19467: LD_STRING Main
19469: PPUSH
19470: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19474: LD_INT 50
19476: PUSH
19477: EMPTY
19478: LIST
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 1
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 2
19502: PUSH
19503: LD_INT 25
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 25
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 3
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 25
19535: PUSH
19536: LD_INT 4
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: PPUSH
19561: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19565: LD_EXP 1
19569: PPUSH
19570: LD_EXP 40
19574: PUSH
19575: LD_STRING JMM
19577: STR
19578: PPUSH
19579: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19583: LD_EXP 2
19587: PPUSH
19588: LD_EXP 40
19592: PUSH
19593: LD_STRING Lisa
19595: STR
19596: PPUSH
19597: CALL 4872 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19601: LD_EXP 3
19605: PPUSH
19606: LD_EXP 40
19610: PUSH
19611: LD_STRING Bobby
19613: STR
19614: PPUSH
19615: CALL 4872 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19619: LD_EXP 4
19623: PPUSH
19624: LD_EXP 40
19628: PUSH
19629: LD_STRING Cyrus
19631: STR
19632: PPUSH
19633: CALL 4872 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19637: LD_EXP 5
19641: PPUSH
19642: LD_EXP 40
19646: PUSH
19647: LD_STRING Frank
19649: STR
19650: PPUSH
19651: CALL 4872 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19655: LD_EXP 6
19659: PPUSH
19660: LD_EXP 40
19664: PUSH
19665: LD_STRING Brown
19667: STR
19668: PPUSH
19669: CALL 4872 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19673: LD_EXP 7
19677: PPUSH
19678: LD_EXP 40
19682: PUSH
19683: LD_STRING Donaldson
19685: STR
19686: PPUSH
19687: CALL 4872 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19691: LD_EXP 8
19695: PPUSH
19696: LD_EXP 40
19700: PUSH
19701: LD_STRING Gladstone
19703: STR
19704: PPUSH
19705: CALL 4872 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19709: LD_EXP 9
19713: PPUSH
19714: LD_EXP 40
19718: PUSH
19719: LD_STRING Denis
19721: STR
19722: PPUSH
19723: CALL 4872 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19727: LD_EXP 14
19731: PPUSH
19732: LD_EXP 40
19736: PUSH
19737: LD_STRING Joan
19739: STR
19740: PPUSH
19741: CALL 4872 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
19745: LD_EXP 15
19749: PPUSH
19750: LD_STRING 06_JoanStatus_1
19752: PPUSH
19753: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19757: LD_INT 50
19759: PUSH
19760: EMPTY
19761: LIST
19762: PUSH
19763: LD_INT 22
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 21
19775: PUSH
19776: LD_INT 1
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 25
19788: PUSH
19789: LD_INT 1
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 25
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 25
19808: PUSH
19809: LD_INT 3
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 25
19818: PUSH
19819: LD_INT 4
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: PPUSH
19839: CALL_OW 69
19843: PUSH
19844: LD_EXP 1
19848: PUSH
19849: LD_EXP 2
19853: PUSH
19854: LD_EXP 3
19858: PUSH
19859: LD_EXP 4
19863: PUSH
19864: LD_EXP 5
19868: PUSH
19869: LD_EXP 6
19873: PUSH
19874: LD_EXP 7
19878: PUSH
19879: LD_EXP 8
19883: PUSH
19884: LD_EXP 9
19888: PUSH
19889: LD_EXP 14
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: DIFF
19906: PPUSH
19907: LD_STRING 06_other_survivors
19909: PPUSH
19910: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19914: LD_INT 50
19916: PUSH
19917: EMPTY
19918: LIST
19919: PUSH
19920: LD_INT 22
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 21
19932: PUSH
19933: LD_INT 1
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 25
19945: PUSH
19946: LD_INT 12
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 25
19955: PUSH
19956: LD_INT 16
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: PPUSH
19979: LD_STRING 06_other_apemans
19981: PPUSH
19982: CALL_OW 38
// YouWin ;
19986: CALL_OW 103
// end ; end_of_file
19990: LD_VAR 0 2
19994: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
19995: LD_EXP 38
19999: PUSH
20000: LD_INT 5
20002: PUSH
20003: LD_INT 4
20005: PUSH
20006: LD_INT 3
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_OWVAR 67
20018: ARRAY
20019: EQUAL
20020: IFFALSE 20135
20022: GO 20024
20024: DISABLE
// begin enable ;
20025: ENABLE
// sendedConvoys = 0 ;
20026: LD_ADDR_EXP 38
20030: PUSH
20031: LD_INT 0
20033: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20034: LD_INT 6
20036: PPUSH
20037: LD_INT 3
20039: PPUSH
20040: LD_INT 5
20042: PPUSH
20043: LD_INT 10
20045: PPUSH
20046: CALL_OW 12
20050: PUSH
20051: LD_INT 5
20053: PPUSH
20054: LD_INT 11
20056: PPUSH
20057: CALL_OW 12
20061: PUSH
20062: LD_INT 8
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL_OW 12
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: PUSH
20078: LD_OWVAR 67
20082: ARRAY
20083: PPUSH
20084: LD_INT 0
20086: PPUSH
20087: LD_INT 0
20089: PPUSH
20090: LD_INT 0
20092: PPUSH
20093: LD_INT 3
20095: PPUSH
20096: LD_EXP 33
20100: PPUSH
20101: LD_EXP 34
20105: PPUSH
20106: CALL_OW 12
20110: PPUSH
20111: LD_INT 18
20113: PPUSH
20114: LD_INT 17
20116: PPUSH
20117: LD_INT 1
20119: PPUSH
20120: LD_INT 1
20122: PPUSH
20123: LD_INT 2
20125: PPUSH
20126: CALL_OW 12
20130: PPUSH
20131: CALL 8435 0 12
// end ; end_of_file
20135: END
// export function PrepareNature ; var i , un ; begin
20136: LD_INT 0
20138: PPUSH
20139: PPUSH
20140: PPUSH
// for i = 1 to Difficulty + 2 do
20141: LD_ADDR_VAR 0 2
20145: PUSH
20146: DOUBLE
20147: LD_INT 1
20149: DEC
20150: ST_TO_ADDR
20151: LD_OWVAR 67
20155: PUSH
20156: LD_INT 2
20158: PLUS
20159: PUSH
20160: FOR_TO
20161: IFFALSE 20270
// begin hc_sex = sex_male ;
20163: LD_ADDR_OWVAR 27
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// uc_side = 0 ;
20171: LD_ADDR_OWVAR 20
20175: PUSH
20176: LD_INT 0
20178: ST_TO_ADDR
// uc_nation = nation_nature ;
20179: LD_ADDR_OWVAR 21
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// hc_class = class_tiger ;
20187: LD_ADDR_OWVAR 28
20191: PUSH
20192: LD_INT 14
20194: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20195: LD_ADDR_OWVAR 31
20199: PUSH
20200: LD_EXP 34
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 0
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20220: LD_ADDR_OWVAR 35
20224: PUSH
20225: LD_INT 5
20227: NEG
20228: PPUSH
20229: LD_INT 5
20231: PPUSH
20232: CALL_OW 12
20236: PUSH
20237: LD_OWVAR 67
20241: MUL
20242: ST_TO_ADDR
// un = CreateHuman ;
20243: LD_ADDR_VAR 0 3
20247: PUSH
20248: CALL_OW 44
20252: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20253: LD_VAR 0 3
20257: PPUSH
20258: LD_INT 20
20260: PPUSH
20261: LD_INT 0
20263: PPUSH
20264: CALL_OW 49
// end ;
20268: GO 20160
20270: POP
20271: POP
// for i = 1 to rand ( 3 , 4 ) do
20272: LD_ADDR_VAR 0 2
20276: PUSH
20277: DOUBLE
20278: LD_INT 1
20280: DEC
20281: ST_TO_ADDR
20282: LD_INT 3
20284: PPUSH
20285: LD_INT 4
20287: PPUSH
20288: CALL_OW 12
20292: PUSH
20293: FOR_TO
20294: IFFALSE 20388
// begin hc_sex = sex_male ;
20296: LD_ADDR_OWVAR 27
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// uc_side = 0 ;
20304: LD_ADDR_OWVAR 20
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// uc_nation = nation_nature ;
20312: LD_ADDR_OWVAR 21
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// hc_class = 18 ;
20320: LD_ADDR_OWVAR 28
20324: PUSH
20325: LD_INT 18
20327: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20328: LD_ADDR_OWVAR 31
20332: PUSH
20333: LD_EXP 34
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: ST_TO_ADDR
// hc_agressivity = 0 ;
20353: LD_ADDR_OWVAR 35
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// un = CreateHuman ;
20361: LD_ADDR_VAR 0 3
20365: PUSH
20366: CALL_OW 44
20370: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20371: LD_VAR 0 3
20375: PPUSH
20376: LD_INT 20
20378: PPUSH
20379: LD_INT 0
20381: PPUSH
20382: CALL_OW 49
// end ;
20386: GO 20293
20388: POP
20389: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: DOUBLE
20396: LD_INT 1
20398: DEC
20399: ST_TO_ADDR
20400: LD_INT 1
20402: PPUSH
20403: LD_INT 3
20405: PPUSH
20406: CALL_OW 12
20410: PUSH
20411: LD_OWVAR 67
20415: PLUS
20416: PUSH
20417: FOR_TO
20418: IFFALSE 20599
// begin hc_sex = sex_male ;
20420: LD_ADDR_OWVAR 27
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// uc_side = 0 ;
20428: LD_ADDR_OWVAR 20
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// uc_nation = nation_nature ;
20436: LD_ADDR_OWVAR 21
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// hc_class = class_apeman ;
20444: LD_ADDR_OWVAR 28
20448: PUSH
20449: LD_INT 12
20451: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
20452: LD_ADDR_OWVAR 31
20456: PUSH
20457: LD_EXP 33
20461: PPUSH
20462: LD_EXP 34
20466: PPUSH
20467: CALL_OW 12
20471: PUSH
20472: LD_EXP 33
20476: PPUSH
20477: LD_EXP 34
20481: PPUSH
20482: CALL_OW 12
20486: PUSH
20487: LD_EXP 33
20491: PPUSH
20492: LD_EXP 34
20496: PPUSH
20497: CALL_OW 12
20501: PUSH
20502: LD_EXP 33
20506: PPUSH
20507: LD_EXP 34
20511: PPUSH
20512: CALL_OW 12
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
20523: LD_ADDR_OWVAR 35
20527: PUSH
20528: LD_INT 20
20530: PPUSH
20531: LD_INT 30
20533: PPUSH
20534: CALL_OW 12
20538: PUSH
20539: LD_INT 30
20541: PPUSH
20542: LD_INT 40
20544: PPUSH
20545: CALL_OW 12
20549: PUSH
20550: LD_INT 40
20552: PPUSH
20553: LD_INT 50
20555: PPUSH
20556: CALL_OW 12
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: LD_OWVAR 67
20570: ARRAY
20571: ST_TO_ADDR
// un = CreateHuman ;
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: CALL_OW 44
20581: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20582: LD_VAR 0 3
20586: PPUSH
20587: LD_INT 21
20589: PPUSH
20590: LD_INT 0
20592: PPUSH
20593: CALL_OW 49
// end ;
20597: GO 20417
20599: POP
20600: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
20601: LD_ADDR_VAR 0 2
20605: PUSH
20606: DOUBLE
20607: LD_INT 1
20609: DEC
20610: ST_TO_ADDR
20611: LD_INT 5
20613: PPUSH
20614: LD_INT 6
20616: PPUSH
20617: CALL_OW 12
20621: PUSH
20622: LD_OWVAR 67
20626: PLUS
20627: PUSH
20628: FOR_TO
20629: IFFALSE 20775
// begin hc_sex = sex_male ;
20631: LD_ADDR_OWVAR 27
20635: PUSH
20636: LD_INT 1
20638: ST_TO_ADDR
// uc_side = 0 ;
20639: LD_ADDR_OWVAR 20
20643: PUSH
20644: LD_INT 0
20646: ST_TO_ADDR
// uc_nation = nation_nature ;
20647: LD_ADDR_OWVAR 21
20651: PUSH
20652: LD_INT 0
20654: ST_TO_ADDR
// hc_class = class_apeman ;
20655: LD_ADDR_OWVAR 28
20659: PUSH
20660: LD_INT 12
20662: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
20663: LD_ADDR_OWVAR 31
20667: PUSH
20668: LD_EXP 33
20672: PPUSH
20673: LD_EXP 34
20677: PPUSH
20678: CALL_OW 12
20682: PUSH
20683: LD_EXP 33
20687: PPUSH
20688: LD_EXP 34
20692: PPUSH
20693: CALL_OW 12
20697: PUSH
20698: LD_OWVAR 67
20702: PLUS
20703: PUSH
20704: LD_EXP 33
20708: PPUSH
20709: LD_EXP 34
20713: PPUSH
20714: CALL_OW 12
20718: PUSH
20719: LD_EXP 33
20723: PPUSH
20724: LD_EXP 34
20728: PPUSH
20729: CALL_OW 12
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: ST_TO_ADDR
// hc_agressivity = 0 ;
20740: LD_ADDR_OWVAR 35
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// un = CreateHuman ;
20748: LD_ADDR_VAR 0 3
20752: PUSH
20753: CALL_OW 44
20757: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
20758: LD_VAR 0 3
20762: PPUSH
20763: LD_INT 22
20765: PPUSH
20766: LD_INT 0
20768: PPUSH
20769: CALL_OW 49
// end ;
20773: GO 20628
20775: POP
20776: POP
// end ; end_of_file
20777: LD_VAR 0 1
20781: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20782: LD_EXP 1
20786: PPUSH
20787: CALL_OW 301
20791: IFFALSE 20803
20793: GO 20795
20795: DISABLE
// YouLost ( JMM ) ;
20796: LD_STRING JMM
20798: PPUSH
20799: CALL_OW 104
20803: END
