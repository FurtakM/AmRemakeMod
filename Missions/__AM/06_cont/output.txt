// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6116 0 0
// PrepareNature ;
 250: CALL 22980 0 0
// PrepareRussian ;
 254: CALL 5223 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5600 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5600 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5600 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5600 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5600 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5600 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5600 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5600 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5600 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; begin
2139: LD_INT 0
2141: PPUSH
// uc_side = 4 ;
2142: LD_ADDR_OWVAR 20
2146: PUSH
2147: LD_INT 4
2149: ST_TO_ADDR
// uc_nation = 1 ;
2150: LD_ADDR_OWVAR 21
2154: PUSH
2155: LD_INT 1
2157: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2158: LD_ADDR_EXP 9
2162: PUSH
2163: LD_STRING Denis
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: CALL 5600 0 2
2173: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2174: LD_EXP 9
2178: PPUSH
2179: LD_INT 11
2181: PPUSH
2182: LD_INT 0
2184: PPUSH
2185: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2189: LD_EXP 9
2193: PPUSH
2194: LD_INT 4
2196: PPUSH
2197: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2201: LD_EXP 9
2205: PPUSH
2206: LD_INT 750
2208: PPUSH
2209: CALL_OW 234
// end ;
2213: LD_VAR 0 1
2217: RET
// export function HarrisonSupport ; var un , veh ; begin
2218: LD_INT 0
2220: PPUSH
2221: PPUSH
2222: PPUSH
// uc_side = 1 ;
2223: LD_ADDR_OWVAR 20
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// uc_nation = 1 ;
2231: LD_ADDR_OWVAR 21
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// vc_engine = 1 ;
2239: LD_ADDR_OWVAR 39
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// vc_control = 1 ;
2247: LD_ADDR_OWVAR 38
2251: PUSH
2252: LD_INT 1
2254: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2255: LD_ADDR_OWVAR 40
2259: PUSH
2260: LD_INT 4
2262: PUSH
2263: LD_INT 4
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: LD_OWVAR 67
2278: ARRAY
2279: ST_TO_ADDR
// vc_chassis = 2 ;
2280: LD_ADDR_OWVAR 37
2284: PUSH
2285: LD_INT 2
2287: ST_TO_ADDR
// veh = CreateVehicle ;
2288: LD_ADDR_VAR 0 3
2292: PUSH
2293: CALL_OW 45
2297: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2298: LD_VAR 0 3
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2310: LD_VAR 0 3
2314: PPUSH
2315: LD_INT 3
2317: PPUSH
2318: LD_INT 0
2320: PPUSH
2321: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2325: LD_VAR 0 3
2329: PPUSH
2330: LD_INT 50
2332: PPUSH
2333: CALL_OW 240
// hc_class := 2 ;
2337: LD_ADDR_OWVAR 28
2341: PUSH
2342: LD_INT 2
2344: ST_TO_ADDR
// hc_sex := sex_male ;
2345: LD_ADDR_OWVAR 27
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2353: LD_ADDR_OWVAR 33
2357: PUSH
2358: LD_STRING SecondCharsGal
2360: ST_TO_ADDR
// hc_face_number := 52 ;
2361: LD_ADDR_OWVAR 34
2365: PUSH
2366: LD_INT 52
2368: ST_TO_ADDR
// hc_name := Craig Brown ;
2369: LD_ADDR_OWVAR 26
2373: PUSH
2374: LD_STRING Craig Brown
2376: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2377: LD_ADDR_OWVAR 29
2381: PUSH
2382: LD_INT 10
2384: PUSH
2385: LD_INT 10
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2392: LD_ADDR_OWVAR 30
2396: PUSH
2397: LD_INT 0
2399: PUSH
2400: LD_INT 2
2402: PUSH
2403: LD_INT 0
2405: PUSH
2406: LD_INT 0
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2415: LD_ADDR_OWVAR 31
2419: PUSH
2420: LD_INT 2
2422: PUSH
2423: LD_INT 3
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: LD_INT 0
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2438: LD_ADDR_EXP 17
2442: PUSH
2443: CALL_OW 44
2447: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2448: LD_EXP 17
2452: PPUSH
2453: LD_VAR 0 3
2457: PPUSH
2458: CALL_OW 52
// vc_engine = 1 ;
2462: LD_ADDR_OWVAR 39
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// vc_control = 1 ;
2470: LD_ADDR_OWVAR 38
2474: PUSH
2475: LD_INT 1
2477: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2478: LD_ADDR_OWVAR 40
2482: PUSH
2483: LD_INT 3
2485: ST_TO_ADDR
// vc_chassis = 2 ;
2486: LD_ADDR_OWVAR 37
2490: PUSH
2491: LD_INT 2
2493: ST_TO_ADDR
// veh = CreateVehicle ;
2494: LD_ADDR_VAR 0 3
2498: PUSH
2499: CALL_OW 45
2503: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2504: LD_VAR 0 3
2508: PPUSH
2509: LD_INT 2
2511: PPUSH
2512: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2516: LD_VAR 0 3
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: LD_INT 0
2526: PPUSH
2527: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2531: LD_VAR 0 3
2535: PPUSH
2536: LD_INT 50
2538: PPUSH
2539: CALL_OW 240
// hc_class := 1 ;
2543: LD_ADDR_OWVAR 28
2547: PUSH
2548: LD_INT 1
2550: ST_TO_ADDR
// hc_sex := sex_female ;
2551: LD_ADDR_OWVAR 27
2555: PUSH
2556: LD_INT 2
2558: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2559: LD_ADDR_OWVAR 33
2563: PUSH
2564: LD_STRING SecondCharsGal
2566: ST_TO_ADDR
// hc_face_number := 45 ;
2567: LD_ADDR_OWVAR 34
2571: PUSH
2572: LD_INT 45
2574: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2575: LD_ADDR_OWVAR 29
2579: PUSH
2580: LD_INT 11
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2590: LD_ADDR_OWVAR 26
2594: PUSH
2595: LD_STRING Ingrid Jonsson
2597: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2598: LD_ADDR_OWVAR 30
2602: PUSH
2603: LD_INT 1
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: LD_INT 0
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2621: LD_ADDR_OWVAR 31
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: LD_INT 1
2634: PUSH
2635: LD_INT 0
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2644: LD_ADDR_EXP 18
2648: PUSH
2649: CALL_OW 44
2653: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2654: LD_EXP 18
2658: PPUSH
2659: LD_VAR 0 3
2663: PPUSH
2664: CALL_OW 52
// end ;
2668: LD_VAR 0 1
2672: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// j = 0 ;
2680: LD_ADDR_VAR 0 3
2684: PUSH
2685: LD_INT 0
2687: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 22
2702: PUSH
2703: LD_INT 1
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 21
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 26
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: LD_INT 25
2735: PUSH
2736: LD_INT 1
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 25
2745: PUSH
2746: LD_INT 2
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 3
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 25
2765: PUSH
2766: LD_INT 4
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2918
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2794: LD_INT 22
2796: PUSH
2797: LD_INT 3
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: LD_INT 21
2809: PUSH
2810: LD_INT 1
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 21
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 59
2839: PUSH
2840: EMPTY
2841: LIST
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 91
2852: PUSH
2853: LD_VAR 0 2
2857: PUSH
2858: LD_INT 25
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: PPUSH
2871: CALL_OW 69
2875: NOT
2876: PUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: LD_EXP 1
2886: PPUSH
2887: CALL_OW 296
2891: PUSH
2892: LD_INT 15
2894: LESS
2895: AND
2896: IFFALSE 2916
// begin tmp = i ;
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: LD_VAR 0 2
2907: ST_TO_ADDR
// j = 1 ;
2908: LD_ADDR_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// end ; end ;
2916: GO 2791
2918: POP
2919: POP
// until j = 1 ;
2920: LD_VAR 0 3
2924: PUSH
2925: LD_INT 1
2927: EQUAL
2928: IFFALSE 2688
// blockSpawn = 1 ;
2930: LD_ADDR_EXP 29
2934: PUSH
2935: LD_INT 1
2937: ST_TO_ADDR
// uc_side = 4 ;
2938: LD_ADDR_OWVAR 20
2942: PUSH
2943: LD_INT 4
2945: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2946: LD_ADDR_EXP 15
2950: PUSH
2951: LD_STRING Joan
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL 5600 0 2
2961: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2962: LD_EXP 15
2966: PPUSH
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 250
2976: PPUSH
2977: LD_VAR 0 4
2981: PPUSH
2982: CALL_OW 251
2986: PPUSH
2987: LD_INT 5
2989: PPUSH
2990: LD_INT 1
2992: PPUSH
2993: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2997: LD_EXP 15
3001: PPUSH
3002: LD_INT 250
3004: PPUSH
3005: CALL_OW 234
// InGameOn ;
3009: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3013: LD_EXP 15
3017: PPUSH
3018: CALL_OW 87
// wait ( 0 0$2 ) ;
3022: LD_INT 70
3024: PPUSH
3025: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3029: LD_VAR 0 4
3033: PPUSH
3034: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3038: LD_VAR 0 4
3042: PPUSH
3043: CALL_OW 122
// wait ( 0 0$1 ) ;
3047: LD_INT 35
3049: PPUSH
3050: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_EXP 15
3063: PPUSH
3064: CALL_OW 112
// wait ( 0 0$2 ) ;
3068: LD_INT 70
3070: PPUSH
3071: CALL_OW 67
// DialogueOn ;
3075: CALL_OW 6
// if tmp = JMM then
3079: LD_VAR 0 4
3083: PUSH
3084: LD_EXP 1
3088: EQUAL
3089: IFFALSE 3238
// begin ComTurnUnit ( JMM , Joan ) ;
3091: LD_EXP 1
3095: PPUSH
3096: LD_EXP 15
3100: PPUSH
3101: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3105: LD_EXP 1
3109: PPUSH
3110: LD_STRING D5b-JMM-1
3112: PPUSH
3113: CALL_OW 88
// DialogueOff ;
3117: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3121: LD_EXP 15
3125: PPUSH
3126: LD_INT 500
3128: PPUSH
3129: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3133: LD_EXP 15
3137: PPUSH
3138: LD_EXP 1
3142: PPUSH
3143: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3147: LD_EXP 1
3151: PPUSH
3152: LD_EXP 15
3156: PPUSH
3157: CALL_OW 119
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// DialogueOn ;
3168: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3172: LD_EXP 15
3176: PPUSH
3177: LD_STRING D5b-Joan-1
3179: PPUSH
3180: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING D5b-JMM-2
3191: PPUSH
3192: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3196: LD_EXP 15
3200: PPUSH
3201: LD_STRING D5b-Joan-2
3203: PPUSH
3204: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3208: LD_EXP 1
3212: PPUSH
3213: LD_STRING D5b-JMM-3
3215: PPUSH
3216: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3220: LD_EXP 15
3224: PPUSH
3225: LD_STRING D5b-Joan-3
3227: PPUSH
3228: CALL_OW 88
// DialogueOff ;
3232: CALL_OW 7
// end else
3236: GO 3573
// begin ComTurnUnit ( tmp , Joan ) ;
3238: LD_VAR 0 4
3242: PPUSH
3243: LD_EXP 15
3247: PPUSH
3248: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3252: LD_VAR 0 4
3256: PPUSH
3257: LD_STRING D5a-Sol1-1
3259: PPUSH
3260: CALL_OW 88
// DialogueOff ;
3264: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3268: LD_EXP 15
3272: PPUSH
3273: LD_INT 500
3275: PPUSH
3276: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3280: LD_EXP 15
3284: PPUSH
3285: LD_VAR 0 4
3289: PPUSH
3290: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3294: LD_VAR 0 4
3298: PPUSH
3299: LD_EXP 15
3303: PPUSH
3304: CALL_OW 119
// wait ( 0 0$1 ) ;
3308: LD_INT 35
3310: PPUSH
3311: CALL_OW 67
// DialogueOn ;
3315: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3319: LD_EXP 15
3323: PPUSH
3324: LD_STRING D5a-Joan-1
3326: PPUSH
3327: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3331: LD_VAR 0 4
3335: PPUSH
3336: LD_STRING D5a-Sol1-2
3338: PPUSH
3339: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3343: LD_EXP 15
3347: PPUSH
3348: LD_STRING D5a-Joan-2
3350: PPUSH
3351: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3355: LD_VAR 0 4
3359: PPUSH
3360: LD_STRING D5a-Sol1-3
3362: PPUSH
3363: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3367: LD_EXP 15
3371: PPUSH
3372: LD_STRING D5a-Joan-3
3374: PPUSH
3375: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3379: LD_VAR 0 4
3383: PPUSH
3384: LD_STRING D5a-Sol1-4
3386: PPUSH
3387: CALL_OW 88
// DialogueOff ;
3391: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3395: LD_EXP 1
3399: PPUSH
3400: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3404: LD_EXP 1
3408: PPUSH
3409: CALL_OW 122
// wait ( 0 0$1 ) ;
3413: LD_INT 35
3415: PPUSH
3416: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3420: LD_INT 35
3422: PPUSH
3423: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3427: LD_EXP 15
3431: PUSH
3432: LD_VAR 0 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PPUSH
3441: LD_EXP 1
3445: PPUSH
3446: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3450: LD_EXP 15
3454: PPUSH
3455: LD_EXP 1
3459: PPUSH
3460: CALL_OW 296
3464: PUSH
3465: LD_INT 5
3467: LESS
3468: IFFALSE 3420
// ComTurnUnit ( Joan , JMM ) ;
3470: LD_EXP 15
3474: PPUSH
3475: LD_EXP 1
3479: PPUSH
3480: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3484: LD_EXP 1
3488: PPUSH
3489: LD_EXP 15
3493: PPUSH
3494: CALL_OW 119
// wait ( 0 0$1 ) ;
3498: LD_INT 35
3500: PPUSH
3501: CALL_OW 67
// DialogueOn ;
3505: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3509: LD_EXP 15
3513: PPUSH
3514: LD_STRING D5a-Joan-4
3516: PPUSH
3517: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3521: LD_EXP 1
3525: PPUSH
3526: LD_STRING D5a-JMM-4
3528: PPUSH
3529: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3533: LD_EXP 15
3537: PPUSH
3538: LD_STRING D5a-Joan-5
3540: PPUSH
3541: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3545: LD_EXP 1
3549: PPUSH
3550: LD_STRING D5a-JMM-5
3552: PPUSH
3553: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3557: LD_EXP 15
3561: PPUSH
3562: LD_STRING D5a-Joan-6
3564: PPUSH
3565: CALL_OW 88
// DialogueOff ;
3569: CALL_OW 7
// end ; DialogueOn ;
3573: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D6-JMM-1
3584: PPUSH
3585: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3589: LD_EXP 15
3593: PPUSH
3594: LD_STRING D6-Joan-1
3596: PPUSH
3597: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3601: LD_EXP 1
3605: PPUSH
3606: LD_STRING D6-JMM-2
3608: PPUSH
3609: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3613: LD_EXP 15
3617: PPUSH
3618: LD_STRING D6-Joan-2
3620: PPUSH
3621: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3625: LD_EXP 1
3629: PPUSH
3630: LD_STRING D6-JMM-3
3632: PPUSH
3633: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3637: LD_EXP 15
3641: PPUSH
3642: LD_STRING D6-Joan-3
3644: PPUSH
3645: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3649: LD_EXP 1
3653: PPUSH
3654: LD_STRING D6-JMM-4
3656: PPUSH
3657: CALL_OW 88
// DialogueOff ;
3661: CALL_OW 7
// InGameOff ;
3665: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3669: LD_EXP 15
3673: PPUSH
3674: LD_INT 1
3676: PPUSH
3677: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3681: LD_STRING MJ
3683: PPUSH
3684: CALL_OW 337
// JoanStatus = 1 ;
3688: LD_ADDR_EXP 16
3692: PUSH
3693: LD_INT 1
3695: ST_TO_ADDR
// blockSpawn = 0 ;
3696: LD_ADDR_EXP 29
3700: PUSH
3701: LD_INT 0
3703: ST_TO_ADDR
// end ;
3704: LD_VAR 0 1
3708: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3709: LD_INT 0
3711: PPUSH
3712: PPUSH
// repeat wait ( 0 0$7 ) ;
3713: LD_INT 245
3715: PPUSH
3716: CALL_OW 67
// until blockSpawn = 0 ;
3720: LD_EXP 29
3724: PUSH
3725: LD_INT 0
3727: EQUAL
3728: IFFALSE 3713
// uc_side = 1 ;
3730: LD_ADDR_OWVAR 20
3734: PUSH
3735: LD_INT 1
3737: ST_TO_ADDR
// uc_nation = 1 ;
3738: LD_ADDR_OWVAR 21
3742: PUSH
3743: LD_INT 1
3745: ST_TO_ADDR
// InitHc ;
3746: CALL_OW 19
// if number = 1 then
3750: LD_VAR 0 1
3754: PUSH
3755: LD_INT 1
3757: EQUAL
3758: IFFALSE 3934
// begin hc_class := 3 ;
3760: LD_ADDR_OWVAR 28
3764: PUSH
3765: LD_INT 3
3767: ST_TO_ADDR
// hc_sex := sex_male ;
3768: LD_ADDR_OWVAR 27
3772: PUSH
3773: LD_INT 1
3775: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3776: LD_ADDR_OWVAR 33
3780: PUSH
3781: LD_STRING SecondCharsGal
3783: ST_TO_ADDR
// hc_face_number := 55 ;
3784: LD_ADDR_OWVAR 34
3788: PUSH
3789: LD_INT 55
3791: ST_TO_ADDR
// hc_name := George McCarthy ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING George McCarthy
3799: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3800: LD_ADDR_OWVAR 29
3804: PUSH
3805: LD_INT 11
3807: PUSH
3808: LD_INT 10
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3815: LD_ADDR_OWVAR 30
3819: PUSH
3820: LD_INT 0
3822: PUSH
3823: LD_INT 0
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 0
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3838: LD_ADDR_OWVAR 31
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: LD_INT 3
3851: PUSH
3852: LD_INT 1
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: ST_TO_ADDR
// un = CreateHuman ;
3861: LD_ADDR_VAR 0 3
3865: PUSH
3866: CALL_OW 44
3870: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
3871: LD_VAR 0 3
3875: PPUSH
3876: LD_INT 23
3878: PPUSH
3879: LD_INT 1
3881: PPUSH
3882: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3886: LD_VAR 0 3
3890: PPUSH
3891: CALL_OW 87
// wait ( 0 0$1 ) ;
3895: LD_INT 35
3897: PPUSH
3898: CALL_OW 67
// DialogueOn ;
3902: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3906: LD_VAR 0 3
3910: PPUSH
3911: LD_STRING D11d-Sol4-1
3913: PPUSH
3914: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3918: LD_EXP 1
3922: PPUSH
3923: LD_STRING D11d-JMM-1
3925: PPUSH
3926: CALL_OW 88
// DialogueOff ;
3930: CALL_OW 7
// end ; if number = 2 then
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 2
3941: EQUAL
3942: IFFALSE 4118
// begin hc_class := 1 ;
3944: LD_ADDR_OWVAR 28
3948: PUSH
3949: LD_INT 1
3951: ST_TO_ADDR
// hc_sex := sex_male ;
3952: LD_ADDR_OWVAR 27
3956: PUSH
3957: LD_INT 1
3959: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3960: LD_ADDR_OWVAR 33
3964: PUSH
3965: LD_STRING AmGalRemake
3967: ST_TO_ADDR
// hc_face_number := 7 ;
3968: LD_ADDR_OWVAR 34
3972: PUSH
3973: LD_INT 7
3975: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3976: LD_ADDR_OWVAR 26
3980: PUSH
3981: LD_STRING Bobby Jordan
3983: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3984: LD_ADDR_OWVAR 29
3988: PUSH
3989: LD_INT 9
3991: PUSH
3992: LD_INT 11
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3999: LD_ADDR_OWVAR 30
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 0
4009: PUSH
4010: LD_INT 0
4012: PUSH
4013: LD_INT 1
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4022: LD_ADDR_OWVAR 31
4026: PUSH
4027: LD_INT 2
4029: PUSH
4030: LD_INT 1
4032: PUSH
4033: LD_INT 1
4035: PUSH
4036: LD_INT 1
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: ST_TO_ADDR
// un = CreateHuman ;
4045: LD_ADDR_VAR 0 3
4049: PUSH
4050: CALL_OW 44
4054: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4055: LD_VAR 0 3
4059: PPUSH
4060: LD_INT 24
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: CALL_OW 49
// wait ( 0 0$1 ) ;
4070: LD_INT 35
4072: PPUSH
4073: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4077: LD_VAR 0 3
4081: PPUSH
4082: CALL_OW 87
// DialogueOn ;
4086: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4090: LD_VAR 0 3
4094: PPUSH
4095: LD_STRING D11b-Sol3-1
4097: PPUSH
4098: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4102: LD_EXP 1
4106: PPUSH
4107: LD_STRING D11b-JMM-1
4109: PPUSH
4110: CALL_OW 88
// DialogueOff ;
4114: CALL_OW 7
// end ; if number = 3 then
4118: LD_VAR 0 1
4122: PUSH
4123: LD_INT 3
4125: EQUAL
4126: IFFALSE 4290
// begin hc_class := 1 ;
4128: LD_ADDR_OWVAR 28
4132: PUSH
4133: LD_INT 1
4135: ST_TO_ADDR
// hc_sex := sex_male ;
4136: LD_ADDR_OWVAR 27
4140: PUSH
4141: LD_INT 1
4143: ST_TO_ADDR
// hc_gallery := DJ ;
4144: LD_ADDR_OWVAR 33
4148: PUSH
4149: LD_STRING DJ
4151: ST_TO_ADDR
// hc_face_number := 1 ;
4152: LD_ADDR_OWVAR 34
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// hc_name := Darius Dajay ;
4160: LD_ADDR_OWVAR 26
4164: PUSH
4165: LD_STRING Darius Dajay
4167: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4168: LD_ADDR_OWVAR 29
4172: PUSH
4173: LD_INT 11
4175: PUSH
4176: LD_INT 11
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4183: LD_ADDR_OWVAR 30
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: LD_INT 0
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4206: LD_ADDR_OWVAR 31
4210: PUSH
4211: LD_INT 4
4213: PUSH
4214: LD_INT 0
4216: PUSH
4217: LD_INT 1
4219: PUSH
4220: LD_INT 0
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: ST_TO_ADDR
// un = CreateHuman ;
4229: LD_ADDR_VAR 0 3
4233: PUSH
4234: CALL_OW 44
4238: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4239: LD_VAR 0 3
4243: PPUSH
4244: LD_INT 25
4246: PPUSH
4247: LD_INT 1
4249: PPUSH
4250: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 87
// wait ( 0 0$1 ) ;
4263: LD_INT 35
4265: PPUSH
4266: CALL_OW 67
// DialogueOn ;
4270: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_STRING D11f-Sol5-1
4281: PPUSH
4282: CALL_OW 88
// DialogueOff ;
4286: CALL_OW 7
// end ; if number = 4 then
4290: LD_VAR 0 1
4294: PUSH
4295: LD_INT 4
4297: EQUAL
4298: IFFALSE 4462
// begin hc_class := 3 ;
4300: LD_ADDR_OWVAR 28
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// hc_sex := sex_female ;
4308: LD_ADDR_OWVAR 27
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4316: LD_ADDR_OWVAR 33
4320: PUSH
4321: LD_STRING SecondCharsGal
4323: ST_TO_ADDR
// hc_face_number := 46 ;
4324: LD_ADDR_OWVAR 34
4328: PUSH
4329: LD_INT 46
4331: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING Sylvia Creak
4339: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4340: LD_ADDR_OWVAR 29
4344: PUSH
4345: LD_INT 10
4347: PUSH
4348: LD_INT 9
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4355: LD_ADDR_OWVAR 30
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 1
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4378: LD_ADDR_OWVAR 31
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 1
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: ST_TO_ADDR
// un = CreateHuman ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 44
4410: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 26
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4426: LD_VAR 0 3
4430: PPUSH
4431: CALL_OW 87
// wait ( 0 0$1 ) ;
4435: LD_INT 35
4437: PPUSH
4438: CALL_OW 67
// DialogueOn ;
4442: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_STRING D11e-FSol4-1
4453: PPUSH
4454: CALL_OW 88
// DialogueOff ;
4458: CALL_OW 7
// end ; if number = 5 then
4462: LD_VAR 0 1
4466: PUSH
4467: LD_INT 5
4469: EQUAL
4470: IFFALSE 4646
// begin hc_class := 1 ;
4472: LD_ADDR_OWVAR 28
4476: PUSH
4477: LD_INT 1
4479: ST_TO_ADDR
// hc_sex := sex_female ;
4480: LD_ADDR_OWVAR 27
4484: PUSH
4485: LD_INT 2
4487: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4488: LD_ADDR_OWVAR 33
4492: PUSH
4493: LD_STRING SecondCharsGal
4495: ST_TO_ADDR
// hc_face_number := 37 ;
4496: LD_ADDR_OWVAR 34
4500: PUSH
4501: LD_INT 37
4503: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4504: LD_ADDR_OWVAR 26
4508: PUSH
4509: LD_STRING Margherite Simpson
4511: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4512: LD_ADDR_OWVAR 29
4516: PUSH
4517: LD_INT 11
4519: PUSH
4520: LD_INT 10
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4527: LD_ADDR_OWVAR 30
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: LD_INT 1
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4550: LD_ADDR_OWVAR 31
4554: PUSH
4555: LD_INT 1
4557: PUSH
4558: LD_INT 1
4560: PUSH
4561: LD_INT 1
4563: PUSH
4564: LD_INT 1
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: ST_TO_ADDR
// un = CreateHuman ;
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: CALL_OW 44
4582: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4583: LD_VAR 0 3
4587: PPUSH
4588: LD_INT 27
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4598: LD_VAR 0 3
4602: PPUSH
4603: CALL_OW 87
// wait ( 0 0$1 ) ;
4607: LD_INT 35
4609: PPUSH
4610: CALL_OW 67
// DialogueOn ;
4614: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4618: LD_VAR 0 3
4622: PPUSH
4623: LD_STRING D11c-FSol3-1
4625: PPUSH
4626: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4630: LD_EXP 1
4634: PPUSH
4635: LD_STRING D11c-JMM-1
4637: PPUSH
4638: CALL_OW 88
// DialogueOff ;
4642: CALL_OW 7
// end ; if number = 6 then
4646: LD_VAR 0 1
4650: PUSH
4651: LD_INT 6
4653: EQUAL
4654: IFFALSE 4828
// begin hc_class := 1 ;
4656: LD_ADDR_OWVAR 28
4660: PUSH
4661: LD_INT 1
4663: ST_TO_ADDR
// hc_sex := sex_male ;
4664: LD_ADDR_OWVAR 27
4668: PUSH
4669: LD_INT 1
4671: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4672: LD_ADDR_OWVAR 33
4676: PUSH
4677: LD_STRING AmGalRemake
4679: ST_TO_ADDR
// hc_face_number := 1 ;
4680: LD_ADDR_OWVAR 34
4684: PUSH
4685: LD_INT 1
4687: ST_TO_ADDR
// hc_name := Charles Brown ;
4688: LD_ADDR_OWVAR 26
4692: PUSH
4693: LD_STRING Charles Brown
4695: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4696: LD_ADDR_OWVAR 29
4700: PUSH
4701: LD_INT 12
4703: PUSH
4704: LD_INT 11
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4711: LD_ADDR_OWVAR 30
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4734: LD_ADDR_OWVAR 31
4738: PUSH
4739: LD_INT 3
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: LD_INT 1
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: ST_TO_ADDR
// un = CreateHuman ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: CALL_OW 44
4766: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
4767: LD_VAR 0 3
4771: PPUSH
4772: LD_INT 28
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4782: LD_VAR 0 3
4786: PPUSH
4787: CALL_OW 87
// wait ( 0 0$1 ) ;
4791: LD_INT 35
4793: PPUSH
4794: CALL_OW 67
// DialogueOn ;
4798: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4802: LD_VAR 0 3
4806: PPUSH
4807: LD_STRING D4-Sol1-5
4809: PPUSH
4810: CALL_OW 88
// DialogueOff ;
4814: CALL_OW 7
// tempCharles = un ;
4818: LD_ADDR_EXP 13
4822: PUSH
4823: LD_VAR 0 3
4827: ST_TO_ADDR
// end ; if number = 7 then
4828: LD_VAR 0 1
4832: PUSH
4833: LD_INT 7
4835: EQUAL
4836: IFFALSE 5086
// begin hc_class := 1 ;
4838: LD_ADDR_OWVAR 28
4842: PUSH
4843: LD_INT 1
4845: ST_TO_ADDR
// hc_sex := sex_female ;
4846: LD_ADDR_OWVAR 27
4850: PUSH
4851: LD_INT 2
4853: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4854: LD_ADDR_OWVAR 33
4858: PUSH
4859: LD_STRING AmGalRemake
4861: ST_TO_ADDR
// hc_face_number := 2 ;
4862: LD_ADDR_OWVAR 34
4866: PUSH
4867: LD_INT 2
4869: ST_TO_ADDR
// hc_name := Johanna Holland ;
4870: LD_ADDR_OWVAR 26
4874: PUSH
4875: LD_STRING Johanna Holland
4877: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4878: LD_ADDR_OWVAR 29
4882: PUSH
4883: LD_INT 10
4885: PUSH
4886: LD_INT 10
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4893: LD_ADDR_OWVAR 30
4897: PUSH
4898: LD_INT 1
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: LD_INT 0
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4916: LD_ADDR_OWVAR 31
4920: PUSH
4921: LD_INT 1
4923: PUSH
4924: LD_INT 0
4926: PUSH
4927: LD_INT 0
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: ST_TO_ADDR
// un = CreateHuman ;
4939: LD_ADDR_VAR 0 3
4943: PUSH
4944: CALL_OW 44
4948: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
4949: LD_VAR 0 3
4953: PPUSH
4954: LD_INT 29
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4964: LD_VAR 0 3
4968: PPUSH
4969: CALL_OW 87
// wait ( 0 0$1 ) ;
4973: LD_INT 35
4975: PPUSH
4976: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
4980: LD_INT 30
4982: PPUSH
4983: LD_INT 22
4985: PUSH
4986: LD_INT 3
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: PPUSH
4993: CALL_OW 70
4997: IFFALSE 5086
// begin DialogueOn ;
4999: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5003: LD_VAR 0 3
5007: PPUSH
5008: CALL_OW 250
5012: PPUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: CALL_OW 251
5022: PPUSH
5023: LD_INT 1
5025: PPUSH
5026: LD_INT 15
5028: NEG
5029: PPUSH
5030: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5034: LD_VAR 0 3
5038: PPUSH
5039: CALL_OW 250
5043: PPUSH
5044: LD_VAR 0 3
5048: PPUSH
5049: CALL_OW 251
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5061: LD_VAR 0 3
5065: PPUSH
5066: LD_STRING D11a-FSol2-1
5068: PPUSH
5069: CALL_OW 88
// ComCrawl ( un ) ;
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 137
// DialogueOff ;
5082: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5086: LD_ADDR_EXP 45
5090: PUSH
5091: LD_EXP 45
5095: PUSH
5096: LD_VAR 0 3
5100: UNION
5101: ST_TO_ADDR
// arrivals := arrivals union un ;
5102: LD_ADDR_EXP 46
5106: PUSH
5107: LD_EXP 46
5111: PUSH
5112: LD_VAR 0 3
5116: UNION
5117: ST_TO_ADDR
// end ;
5118: LD_VAR 0 2
5122: RET
// every 0 0$1 do var i ;
5123: GO 5125
5125: DISABLE
5126: LD_INT 0
5128: PPUSH
// begin enable ;
5129: ENABLE
// if not ignoreTarget then
5130: LD_EXP 45
5134: NOT
5135: IFFALSE 5139
// exit ;
5137: GO 5220
// for i in ignoreTarget do
5139: LD_ADDR_VAR 0 1
5143: PUSH
5144: LD_EXP 45
5148: PUSH
5149: FOR_IN
5150: IFFALSE 5218
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5152: LD_INT 22
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 91
5164: PUSH
5165: LD_VAR 0 1
5169: PUSH
5170: LD_INT 10
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PPUSH
5182: CALL_OW 69
5186: PUSH
5187: LD_EXP 45
5191: DIFF
5192: PUSH
5193: LD_INT 1
5195: GREATER
5196: IFFALSE 5216
// begin ignoreTarget := ignoreTarget diff i ;
5198: LD_ADDR_EXP 45
5202: PUSH
5203: LD_EXP 45
5207: PUSH
5208: LD_VAR 0 1
5212: DIFF
5213: ST_TO_ADDR
// break ;
5214: GO 5218
// end ;
5216: GO 5149
5218: POP
5219: POP
// end ; end_of_file
5220: PPOPN 1
5222: END
// export function PrepareRussian ; var i ; begin
5223: LD_INT 0
5225: PPUSH
5226: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5227: LD_INT 3
5229: PPUSH
5230: LD_INT 3
5232: PPUSH
5233: LD_INT 2
5235: PPUSH
5236: LD_EXP 34
5240: PPUSH
5241: LD_EXP 35
5245: PPUSH
5246: CALL_OW 12
5250: PPUSH
5251: LD_INT 2
5253: PPUSH
5254: LD_INT 4
5256: PPUSH
5257: CALL 5870 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5261: LD_INT 3
5263: PPUSH
5264: LD_INT 3
5266: PPUSH
5267: LD_INT 8
5269: PPUSH
5270: LD_EXP 34
5274: PPUSH
5275: LD_EXP 35
5279: PPUSH
5280: CALL_OW 12
5284: PPUSH
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 4
5290: PPUSH
5291: CALL 5870 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5295: LD_INT 3
5297: PPUSH
5298: LD_INT 3
5300: PPUSH
5301: LD_INT 67
5303: PPUSH
5304: LD_EXP 34
5308: PPUSH
5309: LD_EXP 35
5313: PPUSH
5314: CALL_OW 12
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: LD_INT 2
5324: PPUSH
5325: CALL 5870 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 3
5334: PPUSH
5335: LD_INT 21
5337: PPUSH
5338: LD_EXP 34
5342: PPUSH
5343: LD_EXP 35
5347: PPUSH
5348: CALL_OW 12
5352: PPUSH
5353: LD_INT 3
5355: PPUSH
5356: LD_INT 6
5358: PPUSH
5359: CALL 5870 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5363: LD_INT 3
5365: PPUSH
5366: LD_INT 3
5368: PPUSH
5369: LD_INT 17
5371: PPUSH
5372: LD_EXP 34
5376: PPUSH
5377: LD_EXP 35
5381: PPUSH
5382: CALL_OW 12
5386: PPUSH
5387: LD_INT 3
5389: PPUSH
5390: LD_INT 6
5392: PPUSH
5393: CALL 5870 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5397: LD_INT 3
5399: PPUSH
5400: LD_INT 3
5402: PPUSH
5403: LD_INT 32
5405: PPUSH
5406: LD_EXP 34
5410: PPUSH
5411: LD_EXP 35
5415: PPUSH
5416: CALL_OW 12
5420: PPUSH
5421: LD_INT 4
5423: PPUSH
5424: LD_INT 2
5426: PPUSH
5427: CALL 5870 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: LD_INT 22
5438: PUSH
5439: LD_INT 3
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: LD_INT 21
5448: PUSH
5449: LD_INT 3
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 30
5458: PUSH
5459: LD_INT 32
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PPUSH
5471: CALL_OW 69
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5517
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5479: LD_INT 3
5481: PPUSH
5482: LD_INT 3
5484: PPUSH
5485: LD_VAR 0 2
5489: PPUSH
5490: LD_EXP 34
5494: PPUSH
5495: LD_EXP 35
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: CALL 5870 0 6
5515: GO 5476
5517: POP
5518: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 22
5526: PUSH
5527: LD_INT 3
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PUSH
5534: LD_INT 21
5536: PUSH
5537: LD_INT 3
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 30
5546: PUSH
5547: LD_INT 31
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 69
5563: PUSH
5564: FOR_IN
5565: IFFALSE 5593
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5567: LD_EXP 34
5571: PPUSH
5572: LD_EXP 35
5576: PPUSH
5577: CALL_OW 12
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL 5980 0 2
5591: GO 5564
5593: POP
5594: POP
// end ; end_of_file
5595: LD_VAR 0 1
5599: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
// if exist_mode then
5604: LD_VAR 0 2
5608: IFFALSE 5633
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5610: LD_ADDR_VAR 0 4
5614: PUSH
5615: LD_EXP 44
5619: PUSH
5620: LD_VAR 0 1
5624: STR
5625: PPUSH
5626: CALL_OW 34
5630: ST_TO_ADDR
// end else
5631: GO 5648
// begin unit := NewCharacter ( ident ) ;
5633: LD_ADDR_VAR 0 4
5637: PUSH
5638: LD_VAR 0 1
5642: PPUSH
5643: CALL_OW 25
5647: ST_TO_ADDR
// end ; result := unit ;
5648: LD_ADDR_VAR 0 3
5652: PUSH
5653: LD_VAR 0 4
5657: ST_TO_ADDR
// end ;
5658: LD_VAR 0 3
5662: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
5667: PPUSH
// rnd = rand ( 1 , characters ) ;
5668: LD_ADDR_VAR 0 6
5672: PUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_VAR 0 1
5680: PPUSH
5681: CALL_OW 12
5685: ST_TO_ADDR
// for i = 1 to characters do
5686: LD_ADDR_VAR 0 5
5690: PUSH
5691: DOUBLE
5692: LD_INT 1
5694: DEC
5695: ST_TO_ADDR
5696: LD_VAR 0 1
5700: PUSH
5701: FOR_TO
5702: IFFALSE 5812
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5704: LD_VAR 0 5
5708: PUSH
5709: LD_VAR 0 6
5713: EQUAL
5714: PUSH
5715: LD_VAR 0 1
5719: PUSH
5720: LD_VAR 0 5
5724: ARRAY
5725: PPUSH
5726: CALL_OW 258
5730: PUSH
5731: LD_INT 1
5733: EQUAL
5734: AND
5735: IFFALSE 5757
// Say ( characters [ i ] , dialogMID ) ;
5737: LD_VAR 0 1
5741: PUSH
5742: LD_VAR 0 5
5746: ARRAY
5747: PPUSH
5748: LD_VAR 0 2
5752: PPUSH
5753: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5757: LD_VAR 0 5
5761: PUSH
5762: LD_VAR 0 6
5766: EQUAL
5767: PUSH
5768: LD_VAR 0 1
5772: PUSH
5773: LD_VAR 0 5
5777: ARRAY
5778: PPUSH
5779: CALL_OW 258
5783: PUSH
5784: LD_INT 2
5786: EQUAL
5787: AND
5788: IFFALSE 5810
// Say ( characters [ i ] , dialogFID ) ;
5790: LD_VAR 0 1
5794: PUSH
5795: LD_VAR 0 5
5799: ARRAY
5800: PPUSH
5801: LD_VAR 0 3
5805: PPUSH
5806: CALL_OW 88
// end ;
5810: GO 5701
5812: POP
5813: POP
// end ;
5814: LD_VAR 0 4
5818: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5819: LD_INT 0
5821: PPUSH
5822: PPUSH
// for i in charactersList do
5823: LD_ADDR_VAR 0 4
5827: PUSH
5828: LD_VAR 0 1
5832: PUSH
5833: FOR_IN
5834: IFFALSE 5863
// begin if IsOk ( i ) then
5836: LD_VAR 0 4
5840: PPUSH
5841: CALL_OW 302
5845: IFFALSE 5861
// SaveCharacters ( i , ident ) ;
5847: LD_VAR 0 4
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: CALL_OW 38
// end ;
5861: GO 5833
5863: POP
5864: POP
// end ;
5865: LD_VAR 0 3
5869: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5870: LD_INT 0
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
// for i = 1 to count do
5876: LD_ADDR_VAR 0 8
5880: PUSH
5881: DOUBLE
5882: LD_INT 1
5884: DEC
5885: ST_TO_ADDR
5886: LD_VAR 0 6
5890: PUSH
5891: FOR_TO
5892: IFFALSE 5973
// begin uc_side = side ;
5894: LD_ADDR_OWVAR 20
5898: PUSH
5899: LD_VAR 0 1
5903: ST_TO_ADDR
// uc_nation = nation ;
5904: LD_ADDR_OWVAR 21
5908: PUSH
5909: LD_VAR 0 2
5913: ST_TO_ADDR
// hc_gallery =  ;
5914: LD_ADDR_OWVAR 33
5918: PUSH
5919: LD_STRING 
5921: ST_TO_ADDR
// hc_name =  ;
5922: LD_ADDR_OWVAR 26
5926: PUSH
5927: LD_STRING 
5929: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5930: LD_INT 0
5932: PPUSH
5933: LD_VAR 0 5
5937: PPUSH
5938: LD_VAR 0 4
5942: PPUSH
5943: CALL_OW 380
// un = CreateHuman ;
5947: LD_ADDR_VAR 0 10
5951: PUSH
5952: CALL_OW 44
5956: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5957: LD_VAR 0 10
5961: PPUSH
5962: LD_VAR 0 3
5966: PPUSH
5967: CALL_OW 52
// end ;
5971: GO 5891
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 7
5979: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5980: LD_INT 0
5982: PPUSH
5983: PPUSH
5984: PPUSH
// uc_side := GetSide ( b ) ;
5985: LD_ADDR_OWVAR 20
5989: PUSH
5990: LD_VAR 0 2
5994: PPUSH
5995: CALL_OW 255
5999: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6000: LD_ADDR_OWVAR 21
6004: PUSH
6005: LD_VAR 0 2
6009: PPUSH
6010: CALL_OW 248
6014: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6015: LD_INT 0
6017: PPUSH
6018: LD_INT 1
6020: PPUSH
6021: LD_VAR 0 1
6025: PPUSH
6026: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6030: LD_ADDR_VAR 0 5
6034: PUSH
6035: LD_VAR 0 2
6039: PPUSH
6040: CALL_OW 254
6044: PUSH
6045: LD_INT 3
6047: MINUS
6048: ST_TO_ADDR
// if dir < 0 then
6049: LD_VAR 0 5
6053: PUSH
6054: LD_INT 0
6056: LESS
6057: IFFALSE 6073
// dir := 6 + dir ;
6059: LD_ADDR_VAR 0 5
6063: PUSH
6064: LD_INT 6
6066: PUSH
6067: LD_VAR 0 5
6071: PLUS
6072: ST_TO_ADDR
// un := CreateHuman ;
6073: LD_ADDR_VAR 0 4
6077: PUSH
6078: CALL_OW 44
6082: ST_TO_ADDR
// SetDir ( un , dir ) ;
6083: LD_VAR 0 4
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6097: LD_VAR 0 4
6101: PPUSH
6102: LD_VAR 0 2
6106: PPUSH
6107: CALL_OW 52
// end ;
6111: LD_VAR 0 3
6115: RET
// export function PrepareDifficulty ; begin
6116: LD_INT 0
6118: PPUSH
// if Difficulty = 1 then
6119: LD_OWVAR 67
6123: PUSH
6124: LD_INT 1
6126: EQUAL
6127: IFFALSE 6145
// begin RuSolMinLevel = 2 ;
6129: LD_ADDR_EXP 34
6133: PUSH
6134: LD_INT 2
6136: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6137: LD_ADDR_EXP 35
6141: PUSH
6142: LD_INT 4
6144: ST_TO_ADDR
// end ; if Difficulty = 2 then
6145: LD_OWVAR 67
6149: PUSH
6150: LD_INT 2
6152: EQUAL
6153: IFFALSE 6171
// begin RuSolMinLevel = 3 ;
6155: LD_ADDR_EXP 34
6159: PUSH
6160: LD_INT 3
6162: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6163: LD_ADDR_EXP 35
6167: PUSH
6168: LD_INT 5
6170: ST_TO_ADDR
// end ; if Difficulty = 3 then
6171: LD_OWVAR 67
6175: PUSH
6176: LD_INT 3
6178: EQUAL
6179: IFFALSE 6197
// begin RuSolMinLevel = 3 ;
6181: LD_ADDR_EXP 34
6185: PUSH
6186: LD_INT 3
6188: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6189: LD_ADDR_EXP 35
6193: PUSH
6194: LD_INT 6
6196: ST_TO_ADDR
// end ; end ;
6197: LD_VAR 0 1
6201: RET
// export function ShowQuery1 ; begin
6202: LD_INT 0
6204: PPUSH
// case query ( QKill ) of 1 :
6205: LD_STRING QKill
6207: PPUSH
6208: CALL_OW 97
6212: PUSH
6213: LD_INT 1
6215: DOUBLE
6216: EQUAL
6217: IFTRUE 6221
6219: GO 6232
6221: POP
// begin result = 1 ;
6222: LD_ADDR_VAR 0 1
6226: PUSH
6227: LD_INT 1
6229: ST_TO_ADDR
// end ; 2 :
6230: GO 6271
6232: LD_INT 2
6234: DOUBLE
6235: EQUAL
6236: IFTRUE 6240
6238: GO 6251
6240: POP
// begin result = 2 ;
6241: LD_ADDR_VAR 0 1
6245: PUSH
6246: LD_INT 2
6248: ST_TO_ADDR
// end ; 3 :
6249: GO 6271
6251: LD_INT 3
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// begin result = 3 ;
6260: LD_ADDR_VAR 0 1
6264: PUSH
6265: LD_INT 3
6267: ST_TO_ADDR
// end ; end ;
6268: GO 6271
6270: POP
// end ;
6271: LD_VAR 0 1
6275: RET
// export function ShowQuery2 ; begin
6276: LD_INT 0
6278: PPUSH
// case query ( QKill2 ) of 1 :
6279: LD_STRING QKill2
6281: PPUSH
6282: CALL_OW 97
6286: PUSH
6287: LD_INT 1
6289: DOUBLE
6290: EQUAL
6291: IFTRUE 6295
6293: GO 6306
6295: POP
// begin result = 1 ;
6296: LD_ADDR_VAR 0 1
6300: PUSH
6301: LD_INT 1
6303: ST_TO_ADDR
// end ; 2 :
6304: GO 6326
6306: LD_INT 2
6308: DOUBLE
6309: EQUAL
6310: IFTRUE 6314
6312: GO 6325
6314: POP
// begin result = 2 ;
6315: LD_ADDR_VAR 0 1
6319: PUSH
6320: LD_INT 2
6322: ST_TO_ADDR
// end ; end ;
6323: GO 6326
6325: POP
// end ;
6326: LD_VAR 0 1
6330: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6331: LD_INT 0
6333: PPUSH
6334: PPUSH
6335: PPUSH
6336: PPUSH
6337: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6338: LD_ADDR_VAR 0 8
6342: PUSH
6343: LD_INT 48
6345: PUSH
6346: LD_INT 49
6348: PUSH
6349: LD_INT 50
6351: PUSH
6352: LD_INT 20
6354: PUSH
6355: LD_INT 1
6357: PUSH
6358: LD_INT 51
6360: PUSH
6361: LD_INT 52
6363: PUSH
6364: LD_INT 69
6366: PUSH
6367: LD_INT 39
6369: PUSH
6370: LD_INT 34
6372: PUSH
6373: LD_INT 40
6375: PUSH
6376: LD_INT 53
6378: PUSH
6379: LD_INT 71
6381: PUSH
6382: LD_INT 57
6384: PUSH
6385: LD_INT 58
6387: PUSH
6388: LD_INT 44
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 27
6396: PUSH
6397: LD_INT 23
6399: PUSH
6400: LD_INT 33
6402: PUSH
6403: LD_INT 59
6405: PUSH
6406: LD_INT 54
6408: PUSH
6409: LD_INT 55
6411: PUSH
6412: LD_INT 56
6414: PUSH
6415: LD_INT 63
6417: PUSH
6418: LD_INT 64
6420: PUSH
6421: LD_INT 65
6423: PUSH
6424: LD_INT 30
6426: PUSH
6427: LD_INT 31
6429: PUSH
6430: LD_INT 21
6432: PUSH
6433: LD_INT 22
6435: PUSH
6436: LD_INT 25
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6473: LD_ADDR_VAR 0 5
6477: PUSH
6478: DOUBLE
6479: LD_INT 1
6481: DEC
6482: ST_TO_ADDR
6483: LD_VAR 0 8
6487: PUSH
6488: FOR_TO
6489: IFFALSE 6565
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6491: LD_VAR 0 8
6495: PUSH
6496: LD_VAR 0 5
6500: ARRAY
6501: PPUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 321
6511: PUSH
6512: LD_INT 1
6514: EQUAL
6515: PUSH
6516: LD_VAR 0 8
6520: PUSH
6521: LD_VAR 0 5
6525: ARRAY
6526: PPUSH
6527: LD_VAR 0 3
6531: PPUSH
6532: CALL_OW 482
6536: PUSH
6537: LD_INT 1
6539: EQUAL
6540: AND
6541: IFFALSE 6563
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_VAR 0 8
6552: PUSH
6553: LD_VAR 0 5
6557: ARRAY
6558: PPUSH
6559: CALL_OW 184
6563: GO 6488
6565: POP
6566: POP
// end ;
6567: LD_VAR 0 4
6571: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6572: LD_INT 0
6574: PPUSH
6575: PPUSH
6576: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6577: LD_INT 22
6579: PUSH
6580: LD_VAR 0 1
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_VAR 0 3
6612: LESSEQUAL
6613: IFFALSE 6721
// begin for i = 1 to vehCount do
6615: LD_ADDR_VAR 0 9
6619: PUSH
6620: DOUBLE
6621: LD_INT 1
6623: DEC
6624: ST_TO_ADDR
6625: LD_VAR 0 3
6629: PUSH
6630: FOR_TO
6631: IFFALSE 6719
// begin weapon = weaponTab [ i ] ;
6633: LD_ADDR_VAR 0 10
6637: PUSH
6638: LD_VAR 0 4
6642: PUSH
6643: LD_VAR 0 9
6647: ARRAY
6648: ST_TO_ADDR
// if weapon = 46 then
6649: LD_VAR 0 10
6653: PUSH
6654: LD_INT 46
6656: EQUAL
6657: IFFALSE 6688
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6659: LD_VAR 0 2
6663: PPUSH
6664: LD_INT 24
6666: PPUSH
6667: LD_VAR 0 5
6671: PPUSH
6672: LD_VAR 0 6
6676: PPUSH
6677: LD_VAR 0 10
6681: PPUSH
6682: CALL_OW 185
// end else
6686: GO 6717
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6688: LD_VAR 0 2
6692: PPUSH
6693: LD_VAR 0 7
6697: PPUSH
6698: LD_VAR 0 5
6702: PPUSH
6703: LD_VAR 0 6
6707: PPUSH
6708: LD_VAR 0 10
6712: PPUSH
6713: CALL_OW 185
// end ; end ;
6717: GO 6630
6719: POP
6720: POP
// end ; end ;
6721: LD_VAR 0 8
6725: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6726: LD_INT 0
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6732: LD_ADDR_VAR 0 8
6736: PUSH
6737: LD_INT 22
6739: PUSH
6740: LD_VAR 0 1
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 21
6751: PUSH
6752: LD_INT 2
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 24
6764: PUSH
6765: LD_INT 650
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 69
6785: ST_TO_ADDR
// if damageVehicles > 0 then
6786: LD_VAR 0 8
6790: PUSH
6791: LD_INT 0
6793: GREATER
6794: IFFALSE 6815
// ComMoveXY ( damageVehicles , repX , repY ) ;
6796: LD_VAR 0 8
6800: PPUSH
6801: LD_VAR 0 3
6805: PPUSH
6806: LD_VAR 0 4
6810: PPUSH
6811: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6815: LD_VAR 0 8
6819: PPUSH
6820: LD_INT 95
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: LD_INT 58
6837: PUSH
6838: EMPTY
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 72
6853: PUSH
6854: LD_INT 0
6856: GREATER
6857: IFFALSE 6924
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6859: LD_ADDR_VAR 0 6
6863: PUSH
6864: LD_VAR 0 8
6868: PPUSH
6869: LD_INT 95
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: LD_INT 58
6886: PUSH
6887: EMPTY
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 72
6902: PUSH
6903: FOR_IN
6904: IFFALSE 6922
// ComExitVehicle ( UnitsInside ( i ) ) ;
6906: LD_VAR 0 6
6910: PPUSH
6911: CALL_OW 313
6915: PPUSH
6916: CALL_OW 121
6920: GO 6903
6922: POP
6923: POP
// end ;
6924: LD_VAR 0 5
6928: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6929: LD_INT 0
6931: PPUSH
6932: PPUSH
6933: PPUSH
6934: PPUSH
6935: PPUSH
6936: PPUSH
6937: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6938: LD_ADDR_VAR 0 8
6942: PUSH
6943: LD_INT 22
6945: PUSH
6946: LD_VAR 0 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 24
6967: PUSH
6968: LD_INT 660
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: LD_INT 58
6980: PUSH
6981: EMPTY
6982: LIST
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 34
6989: PUSH
6990: LD_INT 43
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 34
6999: PUSH
7000: LD_INT 44
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 34
7009: PUSH
7010: LD_INT 46
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 69
7038: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7039: LD_INT 22
7041: PUSH
7042: LD_VAR 0 1
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 21
7053: PUSH
7054: LD_INT 2
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 24
7063: PUSH
7064: LD_INT 1000
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 3
7073: PUSH
7074: LD_INT 58
7076: PUSH
7077: EMPTY
7078: LIST
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 34
7085: PUSH
7086: LD_INT 43
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: LD_INT 34
7095: PUSH
7096: LD_INT 44
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 34
7105: PUSH
7106: LD_INT 46
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: PPUSH
7130: CALL_OW 69
7134: PUSH
7135: LD_INT 5
7137: PUSH
7138: LD_INT 6
7140: PUSH
7141: LD_INT 6
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_OWVAR 67
7153: ARRAY
7154: EQUAL
7155: IFFALSE 7411
// if seeEnemy = 0 then
7157: LD_VAR 0 11
7161: PUSH
7162: LD_INT 0
7164: EQUAL
7165: IFFALSE 7411
// repeat wait ( 0 0$1 ) ;
7167: LD_INT 35
7169: PPUSH
7170: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7174: LD_ADDR_VAR 0 8
7178: PUSH
7179: LD_INT 22
7181: PUSH
7182: LD_VAR 0 1
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 21
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 24
7203: PUSH
7204: LD_INT 660
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 58
7216: PUSH
7217: EMPTY
7218: LIST
7219: PUSH
7220: LD_INT 2
7222: PUSH
7223: LD_INT 34
7225: PUSH
7226: LD_INT 43
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: LD_INT 34
7235: PUSH
7236: LD_INT 44
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 34
7245: PUSH
7246: LD_INT 46
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7275: LD_INT 22
7277: PUSH
7278: LD_VAR 0 1
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 95
7289: PUSH
7290: LD_VAR 0 2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: NOT
7308: PUSH
7309: LD_VAR 0 11
7313: PUSH
7314: LD_INT 0
7316: EQUAL
7317: AND
7318: IFFALSE 7373
// for i := 1 to wayX do
7320: LD_ADDR_VAR 0 6
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_VAR 0 3
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7371
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7338: LD_VAR 0 8
7342: PPUSH
7343: LD_VAR 0 3
7347: PUSH
7348: LD_VAR 0 6
7352: ARRAY
7353: PPUSH
7354: LD_VAR 0 4
7358: PUSH
7359: LD_VAR 0 6
7363: ARRAY
7364: PPUSH
7365: CALL_OW 114
7369: GO 7335
7371: POP
7372: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7373: LD_INT 22
7375: PUSH
7376: LD_VAR 0 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 95
7387: PUSH
7388: LD_VAR 0 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PPUSH
7401: CALL_OW 69
7405: PUSH
7406: LD_INT 0
7408: GREATER
7409: IFFALSE 7167
// seeEnemy = 1 ;
7411: LD_ADDR_VAR 0 11
7415: PUSH
7416: LD_INT 1
7418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7419: LD_INT 35
7421: PPUSH
7422: CALL_OW 67
// for j in vehiclesOK do
7426: LD_ADDR_VAR 0 7
7430: PUSH
7431: LD_VAR 0 8
7435: PUSH
7436: FOR_IN
7437: IFFALSE 7650
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7439: LD_ADDR_VAR 0 9
7443: PUSH
7444: LD_INT 81
7446: PUSH
7447: LD_VAR 0 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 101
7458: PUSH
7459: LD_INT 1
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PPUSH
7470: CALL_OW 69
7474: PUSH
7475: LD_EXP 45
7479: DIFF
7480: PPUSH
7481: LD_VAR 0 7
7485: PPUSH
7486: CALL_OW 74
7490: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7491: LD_ADDR_VAR 0 10
7495: PUSH
7496: LD_INT 81
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 101
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 2
7520: PUSH
7521: LD_INT 59
7523: PUSH
7524: EMPTY
7525: LIST
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 21
7539: PUSH
7540: LD_INT 2
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: PUSH
7566: LD_EXP 45
7570: DIFF
7571: PPUSH
7572: LD_VAR 0 7
7576: PPUSH
7577: CALL_OW 74
7581: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7582: LD_VAR 0 7
7586: PPUSH
7587: LD_VAR 0 9
7591: PPUSH
7592: CALL_OW 296
7596: PUSH
7597: LD_INT 8
7599: PLUS
7600: PUSH
7601: LD_VAR 0 7
7605: PPUSH
7606: LD_VAR 0 10
7610: PPUSH
7611: CALL_OW 296
7615: LESS
7616: IFFALSE 7634
// ComAttackUnit ( j , target1 ) else
7618: LD_VAR 0 7
7622: PPUSH
7623: LD_VAR 0 9
7627: PPUSH
7628: CALL_OW 115
7632: GO 7648
// ComAttackUnit ( j , target2 ) ;
7634: LD_VAR 0 7
7638: PPUSH
7639: LD_VAR 0 10
7643: PPUSH
7644: CALL_OW 115
// end ;
7648: GO 7436
7650: POP
7651: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 24
7676: PUSH
7677: LD_INT 1000
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 58
7689: PUSH
7690: EMPTY
7691: LIST
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 34
7698: PUSH
7699: LD_INT 43
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 34
7708: PUSH
7709: LD_INT 44
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 34
7718: PUSH
7719: LD_INT 46
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 69
7747: PUSH
7748: LD_INT 0
7750: EQUAL
7751: IFFALSE 7419
// seeEnemy = 0 ;
7753: LD_ADDR_VAR 0 11
7757: PUSH
7758: LD_INT 0
7760: ST_TO_ADDR
// end ;
7761: LD_VAR 0 5
7765: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7766: LD_INT 0
7768: PPUSH
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
7773: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7774: LD_ADDR_VAR 0 8
7778: PUSH
7779: LD_VAR 0 2
7783: PPUSH
7784: CALL_OW 313
7788: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7789: LD_ADDR_VAR 0 9
7793: PUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: LD_INT 22
7801: PUSH
7802: LD_VAR 0 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 25
7813: PUSH
7814: LD_INT 2
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 24
7823: PUSH
7824: LD_INT 750
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 3
7833: PUSH
7834: LD_INT 54
7836: PUSH
7837: EMPTY
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 70
7854: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7855: LD_ADDR_VAR 0 6
7859: PUSH
7860: LD_VAR 0 3
7864: PPUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 3
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 1000
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: PPUSH
7912: CALL_OW 70
7916: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7917: LD_VAR 0 6
7921: NOT
7922: PUSH
7923: LD_INT 22
7925: PUSH
7926: LD_VAR 0 1
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 250
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: NOT
7965: AND
7966: IFFALSE 7970
// exit ;
7968: GO 8152
// if buildings_list > 0 and engineerOkInside then
7970: LD_VAR 0 6
7974: PUSH
7975: LD_INT 0
7977: GREATER
7978: PUSH
7979: LD_VAR 0 8
7983: AND
7984: IFFALSE 7995
// ComExitBuilding ( engineerOkInside ) ;
7986: LD_VAR 0 8
7990: PPUSH
7991: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7995: LD_VAR 0 6
7999: PUSH
8000: LD_INT 0
8002: GREATER
8003: PUSH
8004: LD_VAR 0 9
8008: PUSH
8009: LD_INT 0
8011: GREATER
8012: AND
8013: IFFALSE 8033
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8015: LD_VAR 0 9
8019: PPUSH
8020: LD_VAR 0 6
8024: PUSH
8025: LD_INT 1
8027: ARRAY
8028: PPUSH
8029: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8033: LD_VAR 0 6
8037: PUSH
8038: LD_INT 0
8040: EQUAL
8041: PUSH
8042: LD_VAR 0 4
8046: PUSH
8047: LD_INT 0
8049: EQUAL
8050: AND
8051: PUSH
8052: LD_VAR 0 9
8056: PUSH
8057: LD_INT 0
8059: GREATER
8060: AND
8061: IFFALSE 8077
// ComEnterUnit ( engineerOkOutside , building ) ;
8063: LD_VAR 0 9
8067: PPUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8077: LD_VAR 0 9
8081: PUSH
8082: LD_INT 0
8084: GREATER
8085: PUSH
8086: LD_VAR 0 6
8090: PUSH
8091: LD_INT 0
8093: EQUAL
8094: AND
8095: PUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_INT 0
8103: GREATER
8104: AND
8105: IFFALSE 8152
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8107: LD_VAR 0 9
8111: PPUSH
8112: LD_VAR 0 4
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 4
8125: PUSH
8126: LD_INT 2
8128: ARRAY
8129: PPUSH
8130: LD_VAR 0 4
8134: PUSH
8135: LD_INT 3
8137: ARRAY
8138: PPUSH
8139: LD_VAR 0 4
8143: PUSH
8144: LD_INT 4
8146: ARRAY
8147: PPUSH
8148: CALL_OW 145
// end ;
8152: LD_VAR 0 5
8156: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8168: LD_ADDR_VAR 0 6
8172: PUSH
8173: LD_INT 22
8175: PUSH
8176: LD_VAR 0 1
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 25
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 23
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_INT 24
8207: PUSH
8208: LD_INT 251
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: PPUSH
8221: CALL_OW 69
8225: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8226: LD_ADDR_VAR 0 7
8230: PUSH
8231: LD_VAR 0 3
8235: PPUSH
8236: LD_INT 22
8238: PUSH
8239: LD_VAR 0 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 23
8250: PUSH
8251: LD_INT 2
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: LD_INT 25
8260: PUSH
8261: LD_INT 4
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 50
8270: PUSH
8271: EMPTY
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 70
8284: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8285: LD_ADDR_VAR 0 10
8289: PUSH
8290: LD_VAR 0 3
8294: PPUSH
8295: LD_INT 22
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 21
8309: PUSH
8310: LD_INT 1
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 25
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: LD_INT 24
8339: PUSH
8340: LD_INT 750
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: PPUSH
8357: CALL_OW 70
8361: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8362: LD_ADDR_VAR 0 11
8366: PUSH
8367: LD_VAR 0 2
8371: PPUSH
8372: LD_INT 22
8374: PUSH
8375: LD_VAR 0 1
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: LD_INT 3
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 3
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: LD_INT 3
8413: PUSH
8414: LD_INT 24
8416: PUSH
8417: LD_INT 1000
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: PPUSH
8434: CALL_OW 70
8438: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8439: LD_VAR 0 10
8443: NOT
8444: PUSH
8445: LD_VAR 0 11
8449: NOT
8450: AND
8451: PUSH
8452: LD_VAR 0 6
8456: NOT
8457: AND
8458: IFFALSE 8462
// exit ;
8460: GO 8696
// if damageUnits > 0 and sci_list > 0 then
8462: LD_VAR 0 10
8466: PUSH
8467: LD_INT 0
8469: GREATER
8470: PUSH
8471: LD_VAR 0 6
8475: PUSH
8476: LD_INT 0
8478: GREATER
8479: AND
8480: IFFALSE 8496
// ComMoveToArea ( damageUnits , healArea ) ;
8482: LD_VAR 0 10
8486: PPUSH
8487: LD_VAR 0 2
8491: PPUSH
8492: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8496: LD_VAR 0 11
8500: PUSH
8501: LD_INT 0
8503: GREATER
8504: PUSH
8505: LD_VAR 0 6
8509: PUSH
8510: LD_INT 0
8512: GREATER
8513: AND
8514: IFFALSE 8525
// ComExitBuilding ( sci_list ) ;
8516: LD_VAR 0 6
8520: PPUSH
8521: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8525: LD_VAR 0 11
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: PUSH
8534: LD_VAR 0 7
8538: PUSH
8539: LD_INT 0
8541: GREATER
8542: AND
8543: IFFALSE 8563
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8545: LD_VAR 0 7
8549: PPUSH
8550: LD_VAR 0 11
8554: PUSH
8555: LD_INT 1
8557: ARRAY
8558: PPUSH
8559: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8563: LD_VAR 0 10
8567: PUSH
8568: LD_INT 0
8570: EQUAL
8571: PUSH
8572: LD_VAR 0 11
8576: PUSH
8577: LD_INT 0
8579: EQUAL
8580: AND
8581: PUSH
8582: LD_VAR 0 7
8586: PUSH
8587: LD_INT 0
8589: GREATER
8590: AND
8591: IFFALSE 8696
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8593: LD_ADDR_VAR 0 12
8597: PUSH
8598: LD_INT 22
8600: PUSH
8601: LD_VAR 0 1
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 21
8612: PUSH
8613: LD_INT 3
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 8
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: PPUSH
8635: CALL_OW 69
8639: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8640: LD_ADDR_VAR 0 13
8644: PUSH
8645: LD_INT 1
8647: PPUSH
8648: LD_VAR 0 12
8652: PPUSH
8653: CALL_OW 12
8657: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8658: LD_VAR 0 7
8662: PPUSH
8663: LD_INT 3
8665: PUSH
8666: LD_INT 60
8668: PUSH
8669: EMPTY
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PPUSH
8676: CALL_OW 72
8680: PPUSH
8681: LD_VAR 0 12
8685: PUSH
8686: LD_VAR 0 13
8690: ARRAY
8691: PPUSH
8692: CALL_OW 120
// end ; end ;
8696: LD_VAR 0 5
8700: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8701: LD_INT 0
8703: PPUSH
8704: PPUSH
8705: PPUSH
8706: PPUSH
// tmpTab = [ ] ;
8707: LD_ADDR_VAR 0 6
8711: PUSH
8712: EMPTY
8713: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8714: LD_INT 22
8716: PUSH
8717: LD_VAR 0 1
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_INT 32
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: PUSH
8745: LD_INT 0
8747: GREATER
8748: IFFALSE 8831
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8750: LD_ADDR_VAR 0 4
8754: PUSH
8755: LD_INT 22
8757: PUSH
8758: LD_VAR 0 1
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 30
8769: PUSH
8770: LD_INT 32
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 69
8785: PUSH
8786: FOR_IN
8787: IFFALSE 8829
// begin for j in UnitsInside ( i ) do
8789: LD_ADDR_VAR 0 5
8793: PUSH
8794: LD_VAR 0 4
8798: PPUSH
8799: CALL_OW 313
8803: PUSH
8804: FOR_IN
8805: IFFALSE 8825
// tmpTab = tmpTab ^ j ;
8807: LD_ADDR_VAR 0 6
8811: PUSH
8812: LD_VAR 0 6
8816: PUSH
8817: LD_VAR 0 5
8821: ADD
8822: ST_TO_ADDR
8823: GO 8804
8825: POP
8826: POP
// end ;
8827: GO 8786
8829: POP
8830: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8831: LD_VAR 0 6
8835: PPUSH
8836: LD_VAR 0 2
8840: PPUSH
8841: CALL_OW 250
8845: PPUSH
8846: LD_VAR 0 2
8850: PPUSH
8851: CALL_OW 251
8855: PPUSH
8856: CALL_OW 114
// end ;
8860: LD_VAR 0 3
8864: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8865: LD_INT 0
8867: PPUSH
8868: PPUSH
8869: PPUSH
8870: PPUSH
// enable ;
8871: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8872: LD_ADDR_VAR 0 7
8876: PUSH
8877: LD_VAR 0 3
8881: PPUSH
8882: CALL_OW 435
8886: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8887: LD_ADDR_VAR 0 6
8891: PUSH
8892: LD_INT 22
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 34
8906: PUSH
8907: LD_VAR 0 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PPUSH
8920: CALL_OW 69
8924: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8925: LD_VAR 0 6
8929: PUSH
8930: LD_INT 0
8932: GREATER
8933: PUSH
8934: LD_VAR 0 3
8938: PPUSH
8939: CALL_OW 435
8943: AND
8944: PUSH
8945: LD_VAR 0 7
8949: PUSH
8950: LD_INT 0
8952: GREATER
8953: AND
8954: IFFALSE 9003
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8956: LD_VAR 0 6
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: LD_VAR 0 7
8969: PUSH
8970: LD_INT 1
8972: ARRAY
8973: PPUSH
8974: LD_VAR 0 7
8978: PUSH
8979: LD_INT 2
8981: ARRAY
8982: PPUSH
8983: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8987: LD_VAR 0 6
8991: PUSH
8992: LD_INT 1
8994: ARRAY
8995: PPUSH
8996: LD_INT 100
8998: PPUSH
8999: CALL_OW 240
// end ; end ;
9003: LD_VAR 0 4
9007: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9008: LD_INT 0
9010: PPUSH
9011: PPUSH
9012: PPUSH
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9018: LD_ADDR_VAR 0 6
9022: PUSH
9023: LD_VAR 0 2
9027: PPUSH
9028: LD_INT 22
9030: PUSH
9031: LD_VAR 0 1
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 56
9042: PUSH
9043: EMPTY
9044: LIST
9045: PUSH
9046: LD_INT 24
9048: PUSH
9049: LD_INT 700
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 3
9058: PUSH
9059: LD_INT 60
9061: PUSH
9062: EMPTY
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 2
9071: PUSH
9072: LD_INT 25
9074: PUSH
9075: LD_INT 1
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 25
9084: PUSH
9085: LD_INT 5
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 25
9094: PUSH
9095: LD_INT 8
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 25
9104: PUSH
9105: LD_INT 9
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 70
9130: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9131: LD_ADDR_VAR 0 7
9135: PUSH
9136: LD_VAR 0 2
9140: PPUSH
9141: LD_INT 22
9143: PUSH
9144: LD_VAR 0 1
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 32
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 58
9165: PUSH
9166: EMPTY
9167: LIST
9168: PUSH
9169: LD_INT 24
9171: PUSH
9172: LD_INT 251
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: PPUSH
9185: CALL_OW 70
9189: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9190: LD_ADDR_VAR 0 9
9194: PUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: LD_INT 22
9202: PUSH
9203: LD_VAR 0 1
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 30
9217: PUSH
9218: LD_INT 4
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 30
9227: PUSH
9228: LD_INT 5
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 24
9242: PUSH
9243: LD_INT 251
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 70
9259: ST_TO_ADDR
// if barrackList > 0 then
9260: LD_VAR 0 9
9264: PUSH
9265: LD_INT 0
9267: GREATER
9268: IFFALSE 9416
// begin if turretList = 0 then
9270: LD_VAR 0 7
9274: PUSH
9275: LD_INT 0
9277: EQUAL
9278: IFFALSE 9320
// begin if soldiers_list > 0 then
9280: LD_VAR 0 6
9284: PUSH
9285: LD_INT 0
9287: GREATER
9288: IFFALSE 9318
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9290: LD_VAR 0 6
9294: PPUSH
9295: LD_VAR 0 9
9299: PUSH
9300: LD_INT 1
9302: PPUSH
9303: LD_VAR 0 9
9307: PPUSH
9308: CALL_OW 12
9312: ARRAY
9313: PPUSH
9314: CALL_OW 120
// end else
9318: GO 9416
// begin for i in barrackList do
9320: LD_ADDR_VAR 0 4
9324: PUSH
9325: LD_VAR 0 9
9329: PUSH
9330: FOR_IN
9331: IFFALSE 9414
// begin insideUnits = UnitsInside ( i ) ;
9333: LD_ADDR_VAR 0 10
9337: PUSH
9338: LD_VAR 0 4
9342: PPUSH
9343: CALL_OW 313
9347: ST_TO_ADDR
// if insideUnits > 0 then
9348: LD_VAR 0 10
9352: PUSH
9353: LD_INT 0
9355: GREATER
9356: IFFALSE 9380
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9358: LD_VAR 0 10
9362: PUSH
9363: LD_INT 1
9365: ARRAY
9366: PPUSH
9367: LD_VAR 0 7
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: PPUSH
9376: CALL_OW 120
// if soldiers_list > 0 then
9380: LD_VAR 0 6
9384: PUSH
9385: LD_INT 0
9387: GREATER
9388: IFFALSE 9412
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9390: LD_VAR 0 6
9394: PUSH
9395: LD_INT 1
9397: ARRAY
9398: PPUSH
9399: LD_VAR 0 7
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 120
// end ;
9412: GO 9330
9414: POP
9415: POP
// end ; end ; end ;
9416: LD_VAR 0 3
9420: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9421: LD_INT 0
9423: PPUSH
9424: PPUSH
9425: PPUSH
9426: PPUSH
9427: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9428: LD_ADDR_VAR 0 6
9432: PUSH
9433: LD_INT 22
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: LD_INT 30
9450: PUSH
9451: LD_INT 31
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 30
9460: PUSH
9461: LD_INT 32
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 33
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 4
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 5
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PPUSH
9510: CALL_OW 69
9514: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9515: LD_ADDR_VAR 0 7
9519: PUSH
9520: LD_INT 22
9522: PUSH
9523: LD_VAR 0 2
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 21
9534: PUSH
9535: LD_INT 3
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 58
9544: PUSH
9545: EMPTY
9546: LIST
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 69
9557: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9558: LD_VAR 0 6
9562: PUSH
9563: LD_INT 0
9565: GREATER
9566: PUSH
9567: LD_VAR 0 7
9571: PUSH
9572: LD_INT 0
9574: GREATER
9575: AND
9576: IFFALSE 9646
// begin for i in turretsList do
9578: LD_ADDR_VAR 0 4
9582: PUSH
9583: LD_VAR 0 6
9587: PUSH
9588: FOR_IN
9589: IFFALSE 9644
// begin for j in enemyBuildings do
9591: LD_ADDR_VAR 0 5
9595: PUSH
9596: LD_VAR 0 7
9600: PUSH
9601: FOR_IN
9602: IFFALSE 9640
// begin if GetDistUnits ( i , j ) < 20 then
9604: LD_VAR 0 4
9608: PPUSH
9609: LD_VAR 0 5
9613: PPUSH
9614: CALL_OW 296
9618: PUSH
9619: LD_INT 20
9621: LESS
9622: IFFALSE 9638
// begin ComAttackUnit ( i , j ) ;
9624: LD_VAR 0 4
9628: PPUSH
9629: LD_VAR 0 5
9633: PPUSH
9634: CALL_OW 115
// end ; end ;
9638: GO 9601
9640: POP
9641: POP
// end ;
9642: GO 9588
9644: POP
9645: POP
// end ; end ;
9646: LD_VAR 0 3
9650: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9651: LD_INT 0
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
9657: PPUSH
9658: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9659: LD_ADDR_VAR 0 8
9663: PUSH
9664: LD_INT 22
9666: PUSH
9667: LD_VAR 0 1
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 2
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: LD_INT 52
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9706: LD_ADDR_VAR 0 9
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 3
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 24
9738: PUSH
9739: LD_INT 1000
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: EMPTY
9756: LIST
9757: PPUSH
9758: CALL_OW 69
9762: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9763: LD_VAR 0 9
9767: PUSH
9768: LD_INT 0
9770: GREATER
9771: PUSH
9772: LD_VAR 0 8
9776: PPUSH
9777: LD_INT 24
9779: PUSH
9780: LD_INT 750
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PPUSH
9787: CALL_OW 72
9791: PUSH
9792: LD_INT 0
9794: GREATER
9795: AND
9796: IFFALSE 9831
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9798: LD_VAR 0 8
9802: PPUSH
9803: LD_INT 24
9805: PUSH
9806: LD_INT 750
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 72
9817: PPUSH
9818: LD_VAR 0 9
9822: PUSH
9823: LD_INT 1
9825: ARRAY
9826: PPUSH
9827: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9831: LD_VAR 0 8
9835: PPUSH
9836: LD_INT 3
9838: PUSH
9839: LD_INT 24
9841: PUSH
9842: LD_INT 750
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PPUSH
9853: CALL_OW 72
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 9899
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9863: LD_VAR 0 8
9867: PPUSH
9868: LD_INT 3
9870: PUSH
9871: LD_INT 24
9873: PUSH
9874: LD_INT 750
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 72
9889: PPUSH
9890: LD_VAR 0 2
9894: PPUSH
9895: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9899: LD_VAR 0 8
9903: PUSH
9904: LD_INT 0
9906: GREATER
9907: PUSH
9908: LD_VAR 0 9
9912: PUSH
9913: LD_INT 0
9915: EQUAL
9916: AND
9917: PUSH
9918: LD_VAR 0 3
9922: PUSH
9923: LD_INT 0
9925: GREATER
9926: AND
9927: IFFALSE 9974
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9929: LD_VAR 0 8
9933: PPUSH
9934: LD_VAR 0 3
9938: PUSH
9939: LD_INT 1
9941: ARRAY
9942: PPUSH
9943: LD_VAR 0 3
9947: PUSH
9948: LD_INT 2
9950: ARRAY
9951: PPUSH
9952: LD_VAR 0 3
9956: PUSH
9957: LD_INT 3
9959: ARRAY
9960: PPUSH
9961: LD_VAR 0 3
9965: PUSH
9966: LD_INT 4
9968: ARRAY
9969: PPUSH
9970: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9974: LD_VAR 0 2
9978: PPUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 1
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 21
9993: PUSH
9994: LD_INT 2
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 34
10003: PUSH
10004: LD_INT 52
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 3
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: LD_INT 750
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PPUSH
10034: CALL_OW 70
10038: PUSH
10039: LD_INT 0
10041: GREATER
10042: IFFALSE 10244
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10044: LD_ADDR_VAR 0 5
10048: PUSH
10049: LD_VAR 0 2
10053: PPUSH
10054: LD_INT 22
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 21
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 34
10078: PUSH
10079: LD_INT 52
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 3
10088: PUSH
10089: LD_INT 24
10091: PUSH
10092: LD_INT 750
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: PPUSH
10109: CALL_OW 70
10113: PUSH
10114: FOR_IN
10115: IFFALSE 10242
// begin mechTmp = UnitsInside ( i ) ;
10117: LD_ADDR_VAR 0 6
10121: PUSH
10122: LD_VAR 0 5
10126: PPUSH
10127: CALL_OW 313
10131: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10132: LD_VAR 0 6
10136: PPUSH
10137: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10141: LD_VAR 0 6
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: CALL_OW 189
// wait ( 0 0$2 ) ;
10155: LD_INT 70
10157: PPUSH
10158: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10162: LD_VAR 0 6
10166: PPUSH
10167: LD_VAR 0 2
10171: PPUSH
10172: LD_INT 22
10174: PUSH
10175: LD_VAR 0 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 21
10186: PUSH
10187: LD_INT 2
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 34
10196: PUSH
10197: LD_INT 52
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 24
10206: PUSH
10207: LD_INT 1000
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: LD_INT 58
10216: PUSH
10217: EMPTY
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: PPUSH
10227: CALL_OW 70
10231: PUSH
10232: LD_INT 1
10234: ARRAY
10235: PPUSH
10236: CALL_OW 180
// end ;
10240: GO 10114
10242: POP
10243: POP
// end ; end ;
10244: LD_VAR 0 4
10248: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10249: LD_INT 0
10251: PPUSH
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
10261: PPUSH
// for i = 1 to medicCount do
10262: LD_ADDR_VAR 0 14
10266: PUSH
10267: DOUBLE
10268: LD_INT 1
10270: DEC
10271: ST_TO_ADDR
10272: LD_VAR 0 7
10276: PUSH
10277: FOR_TO
10278: IFFALSE 10360
// begin uc_side = side ;
10280: LD_ADDR_OWVAR 20
10284: PUSH
10285: LD_VAR 0 1
10289: ST_TO_ADDR
// uc_nation = nation ;
10290: LD_ADDR_OWVAR 21
10294: PUSH
10295: LD_VAR 0 2
10299: ST_TO_ADDR
// hc_name =  ;
10300: LD_ADDR_OWVAR 26
10304: PUSH
10305: LD_STRING 
10307: ST_TO_ADDR
// hc_gallery =  ;
10308: LD_ADDR_OWVAR 33
10312: PUSH
10313: LD_STRING 
10315: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10316: LD_INT 0
10318: PPUSH
10319: LD_INT 4
10321: PPUSH
10322: LD_VAR 0 8
10326: PPUSH
10327: CALL_OW 380
// un = CreateHuman ;
10331: LD_ADDR_VAR 0 16
10335: PUSH
10336: CALL_OW 44
10340: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10341: LD_VAR 0 16
10345: PPUSH
10346: LD_VAR 0 9
10350: PPUSH
10351: LD_INT 0
10353: PPUSH
10354: CALL_OW 49
// end ;
10358: GO 10277
10360: POP
10361: POP
// for i = 1 to soldierCount do
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: DOUBLE
10368: LD_INT 1
10370: DEC
10371: ST_TO_ADDR
10372: LD_VAR 0 3
10376: PUSH
10377: FOR_TO
10378: IFFALSE 10460
// begin uc_side = side ;
10380: LD_ADDR_OWVAR 20
10384: PUSH
10385: LD_VAR 0 1
10389: ST_TO_ADDR
// uc_nation = nation ;
10390: LD_ADDR_OWVAR 21
10394: PUSH
10395: LD_VAR 0 2
10399: ST_TO_ADDR
// hc_name =  ;
10400: LD_ADDR_OWVAR 26
10404: PUSH
10405: LD_STRING 
10407: ST_TO_ADDR
// hc_gallery =  ;
10408: LD_ADDR_OWVAR 33
10412: PUSH
10413: LD_STRING 
10415: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10416: LD_INT 0
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: LD_VAR 0 8
10426: PPUSH
10427: CALL_OW 380
// un = CreateHuman ;
10431: LD_ADDR_VAR 0 16
10435: PUSH
10436: CALL_OW 44
10440: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10441: LD_VAR 0 16
10445: PPUSH
10446: LD_VAR 0 9
10450: PPUSH
10451: LD_INT 0
10453: PPUSH
10454: CALL_OW 49
// end ;
10458: GO 10377
10460: POP
10461: POP
// for i = 1 to sniperCount do
10462: LD_ADDR_VAR 0 14
10466: PUSH
10467: DOUBLE
10468: LD_INT 1
10470: DEC
10471: ST_TO_ADDR
10472: LD_VAR 0 4
10476: PUSH
10477: FOR_TO
10478: IFFALSE 10560
// begin uc_side = side ;
10480: LD_ADDR_OWVAR 20
10484: PUSH
10485: LD_VAR 0 1
10489: ST_TO_ADDR
// uc_nation = nation ;
10490: LD_ADDR_OWVAR 21
10494: PUSH
10495: LD_VAR 0 2
10499: ST_TO_ADDR
// hc_name =  ;
10500: LD_ADDR_OWVAR 26
10504: PUSH
10505: LD_STRING 
10507: ST_TO_ADDR
// hc_gallery =  ;
10508: LD_ADDR_OWVAR 33
10512: PUSH
10513: LD_STRING 
10515: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10516: LD_INT 0
10518: PPUSH
10519: LD_INT 5
10521: PPUSH
10522: LD_VAR 0 8
10526: PPUSH
10527: CALL_OW 380
// un = CreateHuman ;
10531: LD_ADDR_VAR 0 16
10535: PUSH
10536: CALL_OW 44
10540: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10541: LD_VAR 0 16
10545: PPUSH
10546: LD_VAR 0 9
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 49
// end ;
10558: GO 10477
10560: POP
10561: POP
// for i = 1 to bazookCount do
10562: LD_ADDR_VAR 0 14
10566: PUSH
10567: DOUBLE
10568: LD_INT 1
10570: DEC
10571: ST_TO_ADDR
10572: LD_VAR 0 5
10576: PUSH
10577: FOR_TO
10578: IFFALSE 10660
// begin uc_side = side ;
10580: LD_ADDR_OWVAR 20
10584: PUSH
10585: LD_VAR 0 1
10589: ST_TO_ADDR
// uc_nation = nation ;
10590: LD_ADDR_OWVAR 21
10594: PUSH
10595: LD_VAR 0 2
10599: ST_TO_ADDR
// hc_name =  ;
10600: LD_ADDR_OWVAR 26
10604: PUSH
10605: LD_STRING 
10607: ST_TO_ADDR
// hc_gallery =  ;
10608: LD_ADDR_OWVAR 33
10612: PUSH
10613: LD_STRING 
10615: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10616: LD_INT 0
10618: PPUSH
10619: LD_INT 9
10621: PPUSH
10622: LD_VAR 0 8
10626: PPUSH
10627: CALL_OW 380
// un = CreateHuman ;
10631: LD_ADDR_VAR 0 16
10635: PUSH
10636: CALL_OW 44
10640: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10641: LD_VAR 0 16
10645: PPUSH
10646: LD_VAR 0 9
10650: PPUSH
10651: LD_INT 0
10653: PPUSH
10654: CALL_OW 49
// end ;
10658: GO 10577
10660: POP
10661: POP
// for i = 1 to mortalCount do
10662: LD_ADDR_VAR 0 14
10666: PUSH
10667: DOUBLE
10668: LD_INT 1
10670: DEC
10671: ST_TO_ADDR
10672: LD_VAR 0 6
10676: PUSH
10677: FOR_TO
10678: IFFALSE 10760
// begin uc_side = side ;
10680: LD_ADDR_OWVAR 20
10684: PUSH
10685: LD_VAR 0 1
10689: ST_TO_ADDR
// uc_nation = nation ;
10690: LD_ADDR_OWVAR 21
10694: PUSH
10695: LD_VAR 0 2
10699: ST_TO_ADDR
// hc_name =  ;
10700: LD_ADDR_OWVAR 26
10704: PUSH
10705: LD_STRING 
10707: ST_TO_ADDR
// hc_gallery =  ;
10708: LD_ADDR_OWVAR 33
10712: PUSH
10713: LD_STRING 
10715: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10716: LD_INT 0
10718: PPUSH
10719: LD_INT 8
10721: PPUSH
10722: LD_VAR 0 8
10726: PPUSH
10727: CALL_OW 380
// un = CreateHuman ;
10731: LD_ADDR_VAR 0 16
10735: PUSH
10736: CALL_OW 44
10740: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10741: LD_VAR 0 16
10745: PPUSH
10746: LD_VAR 0 9
10750: PPUSH
10751: LD_INT 0
10753: PPUSH
10754: CALL_OW 49
// end ;
10758: GO 10677
10760: POP
10761: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10762: LD_ADDR_VAR 0 19
10766: PUSH
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 5
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 8
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 9
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10838: LD_ADDR_VAR 0 18
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_VAR 0 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 25
10857: PUSH
10858: LD_INT 4
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PPUSH
10869: CALL_OW 69
10873: ST_TO_ADDR
// for i in medic_list do
10874: LD_ADDR_VAR 0 14
10878: PUSH
10879: LD_VAR 0 18
10883: PUSH
10884: FOR_IN
10885: IFFALSE 10903
// ComMoveToArea ( i , healArea ) ;
10887: LD_VAR 0 14
10891: PPUSH
10892: LD_VAR 0 10
10896: PPUSH
10897: CALL_OW 113
10901: GO 10884
10903: POP
10904: POP
// if strategy = 1 then
10905: LD_VAR 0 12
10909: PUSH
10910: LD_INT 1
10912: EQUAL
10913: IFFALSE 11630
// begin repeat wait ( 0 0$3 ) ;
10915: LD_INT 105
10917: PPUSH
10918: CALL_OW 67
// for i in soldiersOK_list do
10922: LD_ADDR_VAR 0 14
10926: PUSH
10927: LD_VAR 0 19
10931: PUSH
10932: FOR_IN
10933: IFFALSE 10967
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10935: LD_VAR 0 14
10939: PPUSH
10940: LD_INT 80
10942: PPUSH
10943: LD_INT 109
10945: PPUSH
10946: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10950: LD_VAR 0 14
10954: PPUSH
10955: LD_INT 39
10957: PPUSH
10958: LD_INT 49
10960: PPUSH
10961: CALL_OW 174
// end ;
10965: GO 10932
10967: POP
10968: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10969: LD_INT 13
10971: PPUSH
10972: LD_INT 22
10974: PUSH
10975: LD_VAR 0 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PPUSH
10984: CALL_OW 70
10988: PUSH
10989: LD_INT 0
10991: GREATER
10992: IFFALSE 10915
// repeat wait ( 0 0$1 ) ;
10994: LD_INT 35
10996: PPUSH
10997: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11001: LD_ADDR_VAR 0 17
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: LD_INT 3
11023: PUSH
11024: LD_INT 24
11026: PUSH
11027: LD_INT 550
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 24
11040: PUSH
11041: LD_INT 250
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PPUSH
11057: CALL_OW 69
11061: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11062: LD_ADDR_VAR 0 19
11066: PUSH
11067: LD_INT 22
11069: PUSH
11070: LD_VAR 0 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 25
11084: PUSH
11085: LD_INT 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 25
11094: PUSH
11095: LD_INT 5
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 25
11104: PUSH
11105: LD_INT 8
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 25
11114: PUSH
11115: LD_INT 9
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 24
11131: PUSH
11132: LD_INT 1000
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PPUSH
11144: CALL_OW 69
11148: ST_TO_ADDR
// if medicCount > 0 then
11149: LD_VAR 0 7
11153: PUSH
11154: LD_INT 0
11156: GREATER
11157: IFFALSE 11231
// begin if damageUnit_list > 0 then
11159: LD_VAR 0 17
11163: PUSH
11164: LD_INT 0
11166: GREATER
11167: IFFALSE 11231
// begin for i in damageUnit_list do
11169: LD_ADDR_VAR 0 14
11173: PUSH
11174: LD_VAR 0 17
11178: PUSH
11179: FOR_IN
11180: IFFALSE 11229
// begin ComMoveToArea ( i , healArea ) ;
11182: LD_VAR 0 14
11186: PPUSH
11187: LD_VAR 0 10
11191: PPUSH
11192: CALL_OW 113
// for j in medic_list do
11196: LD_ADDR_VAR 0 15
11200: PUSH
11201: LD_VAR 0 18
11205: PUSH
11206: FOR_IN
11207: IFFALSE 11225
// AddComHeal ( j , i ) ;
11209: LD_VAR 0 15
11213: PPUSH
11214: LD_VAR 0 14
11218: PPUSH
11219: CALL_OW 188
11223: GO 11206
11225: POP
11226: POP
// end ;
11227: GO 11179
11229: POP
11230: POP
// end ; end ; for i in soldiersOK_list do
11231: LD_ADDR_VAR 0 14
11235: PUSH
11236: LD_VAR 0 19
11240: PUSH
11241: FOR_IN
11242: IFFALSE 11424
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11244: LD_ADDR_VAR 0 22
11248: PUSH
11249: LD_INT 22
11251: PUSH
11252: LD_VAR 0 11
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: PUSH
11266: LD_EXP 45
11270: DIFF
11271: PPUSH
11272: LD_VAR 0 14
11276: PPUSH
11277: CALL_OW 74
11281: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11282: LD_ADDR_VAR 0 23
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_VAR 0 11
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 59
11304: PUSH
11305: EMPTY
11306: LIST
11307: PUSH
11308: LD_INT 21
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 21
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: EMPTY
11339: LIST
11340: PPUSH
11341: CALL_OW 69
11345: PPUSH
11346: LD_VAR 0 14
11350: PPUSH
11351: CALL_OW 74
11355: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11356: LD_VAR 0 14
11360: PPUSH
11361: LD_VAR 0 22
11365: PPUSH
11366: CALL_OW 296
11370: PUSH
11371: LD_INT 8
11373: PLUS
11374: PUSH
11375: LD_VAR 0 14
11379: PPUSH
11380: LD_VAR 0 23
11384: PPUSH
11385: CALL_OW 296
11389: LESS
11390: IFFALSE 11408
// begin ComAttackUnit ( i , target1 ) ;
11392: LD_VAR 0 14
11396: PPUSH
11397: LD_VAR 0 22
11401: PPUSH
11402: CALL_OW 115
// end else
11406: GO 11422
// begin ComAttackUnit ( i , target2 ) ;
11408: LD_VAR 0 14
11412: PPUSH
11413: LD_VAR 0 23
11417: PPUSH
11418: CALL_OW 115
// end ; end ;
11422: GO 11241
11424: POP
11425: POP
// for i in soldiersOK_list do
11426: LD_ADDR_VAR 0 14
11430: PUSH
11431: LD_VAR 0 19
11435: PUSH
11436: FOR_IN
11437: IFFALSE 11619
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11439: LD_ADDR_VAR 0 22
11443: PUSH
11444: LD_INT 22
11446: PUSH
11447: LD_VAR 0 11
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PPUSH
11456: CALL_OW 69
11460: PUSH
11461: LD_EXP 45
11465: DIFF
11466: PPUSH
11467: LD_VAR 0 14
11471: PPUSH
11472: CALL_OW 74
11476: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11477: LD_ADDR_VAR 0 23
11481: PUSH
11482: LD_INT 22
11484: PUSH
11485: LD_VAR 0 11
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 2
11496: PUSH
11497: LD_INT 59
11499: PUSH
11500: EMPTY
11501: LIST
11502: PUSH
11503: LD_INT 21
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 21
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: PPUSH
11536: CALL_OW 69
11540: PPUSH
11541: LD_VAR 0 14
11545: PPUSH
11546: CALL_OW 74
11550: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11551: LD_VAR 0 14
11555: PPUSH
11556: LD_VAR 0 22
11560: PPUSH
11561: CALL_OW 296
11565: PUSH
11566: LD_INT 8
11568: PLUS
11569: PUSH
11570: LD_VAR 0 14
11574: PPUSH
11575: LD_VAR 0 23
11579: PPUSH
11580: CALL_OW 296
11584: LESS
11585: IFFALSE 11603
// begin ComAttackUnit ( i , target1 ) ;
11587: LD_VAR 0 14
11591: PPUSH
11592: LD_VAR 0 22
11596: PPUSH
11597: CALL_OW 115
// end else
11601: GO 11617
// begin ComAttackUnit ( i , target2 ) ;
11603: LD_VAR 0 14
11607: PPUSH
11608: LD_VAR 0 23
11612: PPUSH
11613: CALL_OW 115
// end ; end ;
11617: GO 11436
11619: POP
11620: POP
// until soldiersOK_list = [ ] ;
11621: LD_VAR 0 19
11625: PUSH
11626: EMPTY
11627: EQUAL
11628: IFFALSE 10994
// end ; if strategy = 2 then
11630: LD_VAR 0 12
11634: PUSH
11635: LD_INT 2
11637: EQUAL
11638: IFFALSE 12343
// begin repeat wait ( 0 0$1 ) ;
11640: LD_INT 35
11642: PPUSH
11643: CALL_OW 67
// for i in soldiersOK_list do
11647: LD_ADDR_VAR 0 14
11651: PUSH
11652: LD_VAR 0 19
11656: PUSH
11657: FOR_IN
11658: IFFALSE 11692
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11660: LD_VAR 0 14
11664: PPUSH
11665: LD_INT 117
11667: PPUSH
11668: LD_INT 97
11670: PPUSH
11671: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11675: LD_VAR 0 14
11679: PPUSH
11680: LD_INT 94
11682: PPUSH
11683: LD_INT 50
11685: PPUSH
11686: CALL_OW 174
// end ;
11690: GO 11657
11692: POP
11693: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11694: LD_INT 14
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_VAR 0 1
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 70
11713: PUSH
11714: LD_INT 0
11716: GREATER
11717: IFFALSE 11640
// repeat wait ( 0 0$3 ) ;
11719: LD_INT 105
11721: PPUSH
11722: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11726: LD_ADDR_VAR 0 17
11730: PUSH
11731: LD_INT 22
11733: PUSH
11734: LD_VAR 0 1
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 1
11745: PUSH
11746: LD_INT 3
11748: PUSH
11749: LD_INT 24
11751: PUSH
11752: LD_INT 550
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 24
11765: PUSH
11766: LD_INT 250
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PPUSH
11782: CALL_OW 69
11786: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11787: LD_ADDR_VAR 0 19
11791: PUSH
11792: LD_INT 22
11794: PUSH
11795: LD_VAR 0 1
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 25
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 5
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 8
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 25
11839: PUSH
11840: LD_INT 9
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 24
11856: PUSH
11857: LD_INT 1000
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: LIST
11868: PPUSH
11869: CALL_OW 69
11873: ST_TO_ADDR
// if medicCount > 0 then
11874: LD_VAR 0 7
11878: PUSH
11879: LD_INT 0
11881: GREATER
11882: IFFALSE 11956
// begin if damageUnit_list > 0 then
11884: LD_VAR 0 17
11888: PUSH
11889: LD_INT 0
11891: GREATER
11892: IFFALSE 11956
// begin for i in damageUnit_list do
11894: LD_ADDR_VAR 0 14
11898: PUSH
11899: LD_VAR 0 17
11903: PUSH
11904: FOR_IN
11905: IFFALSE 11954
// begin ComMoveToArea ( i , healArea ) ;
11907: LD_VAR 0 14
11911: PPUSH
11912: LD_VAR 0 10
11916: PPUSH
11917: CALL_OW 113
// for j in medic_list do
11921: LD_ADDR_VAR 0 15
11925: PUSH
11926: LD_VAR 0 18
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11950
// AddComHeal ( j , i ) ;
11934: LD_VAR 0 15
11938: PPUSH
11939: LD_VAR 0 14
11943: PPUSH
11944: CALL_OW 188
11948: GO 11931
11950: POP
11951: POP
// end ;
11952: GO 11904
11954: POP
11955: POP
// end ; end ; for i in soldiersOK_list do
11956: LD_ADDR_VAR 0 14
11960: PUSH
11961: LD_VAR 0 19
11965: PUSH
11966: FOR_IN
11967: IFFALSE 12143
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11969: LD_ADDR_VAR 0 22
11973: PUSH
11974: LD_INT 22
11976: PUSH
11977: LD_VAR 0 11
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 69
11990: PPUSH
11991: LD_VAR 0 14
11995: PPUSH
11996: CALL_OW 74
12000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12001: LD_ADDR_VAR 0 23
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_VAR 0 11
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: LD_INT 59
12023: PUSH
12024: EMPTY
12025: LIST
12026: PUSH
12027: LD_INT 21
12029: PUSH
12030: LD_INT 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 21
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: EMPTY
12058: LIST
12059: PPUSH
12060: CALL_OW 69
12064: PPUSH
12065: LD_VAR 0 14
12069: PPUSH
12070: CALL_OW 74
12074: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12075: LD_VAR 0 14
12079: PPUSH
12080: LD_VAR 0 22
12084: PPUSH
12085: CALL_OW 296
12089: PUSH
12090: LD_INT 8
12092: PLUS
12093: PUSH
12094: LD_VAR 0 14
12098: PPUSH
12099: LD_VAR 0 23
12103: PPUSH
12104: CALL_OW 296
12108: LESS
12109: IFFALSE 12127
// begin ComAttackUnit ( i , target1 ) ;
12111: LD_VAR 0 14
12115: PPUSH
12116: LD_VAR 0 22
12120: PPUSH
12121: CALL_OW 115
// end else
12125: GO 12141
// begin ComAttackUnit ( i , target2 ) ;
12127: LD_VAR 0 14
12131: PPUSH
12132: LD_VAR 0 23
12136: PPUSH
12137: CALL_OW 115
// end ; end ;
12141: GO 11966
12143: POP
12144: POP
// for i in soldiersOK_list do
12145: LD_ADDR_VAR 0 14
12149: PUSH
12150: LD_VAR 0 19
12154: PUSH
12155: FOR_IN
12156: IFFALSE 12332
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12158: LD_ADDR_VAR 0 22
12162: PUSH
12163: LD_INT 22
12165: PUSH
12166: LD_VAR 0 11
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 69
12179: PPUSH
12180: LD_VAR 0 14
12184: PPUSH
12185: CALL_OW 74
12189: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12190: LD_ADDR_VAR 0 23
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_VAR 0 11
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 2
12209: PUSH
12210: LD_INT 59
12212: PUSH
12213: EMPTY
12214: LIST
12215: PUSH
12216: LD_INT 21
12218: PUSH
12219: LD_INT 1
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 21
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: PPUSH
12254: LD_VAR 0 14
12258: PPUSH
12259: CALL_OW 74
12263: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12264: LD_VAR 0 14
12268: PPUSH
12269: LD_VAR 0 22
12273: PPUSH
12274: CALL_OW 296
12278: PUSH
12279: LD_INT 8
12281: PLUS
12282: PUSH
12283: LD_VAR 0 14
12287: PPUSH
12288: LD_VAR 0 23
12292: PPUSH
12293: CALL_OW 296
12297: LESS
12298: IFFALSE 12316
// begin ComAttackUnit ( i , target1 ) ;
12300: LD_VAR 0 14
12304: PPUSH
12305: LD_VAR 0 22
12309: PPUSH
12310: CALL_OW 115
// end else
12314: GO 12330
// begin ComAttackUnit ( i , target2 ) ;
12316: LD_VAR 0 14
12320: PPUSH
12321: LD_VAR 0 23
12325: PPUSH
12326: CALL_OW 115
// end ; end ;
12330: GO 12155
12332: POP
12333: POP
// until soldiersOK_list = [ ] ;
12334: LD_VAR 0 19
12338: PUSH
12339: EMPTY
12340: EQUAL
12341: IFFALSE 11719
// end ; end ; end_of_file
12343: LD_VAR 0 13
12347: RET
// every 0 0$01 do
12348: GO 12350
12350: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12351: LD_INT 22
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 2
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: PUSH
12380: LD_INT 0
12382: EQUAL
12383: IFFALSE 12397
// SetClass ( JMM , 2 ) ;
12385: LD_EXP 1
12389: PPUSH
12390: LD_INT 2
12392: PPUSH
12393: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12397: LD_STRING M1
12399: PPUSH
12400: CALL_OW 337
// case difficulty of 1 :
12404: LD_OWVAR 67
12408: PUSH
12409: LD_INT 1
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12427
12417: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12418: LD_STRING M1-1
12420: PPUSH
12421: CALL_OW 337
12425: GO 12464
12427: LD_INT 2
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12445
12435: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12436: LD_STRING M1-2
12438: PPUSH
12439: CALL_OW 337
12443: GO 12464
12445: LD_INT 3
12447: DOUBLE
12448: EQUAL
12449: IFTRUE 12453
12451: GO 12463
12453: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12454: LD_STRING M1-3
12456: PPUSH
12457: CALL_OW 337
12461: GO 12464
12463: POP
// ChangeMissionObjectives ( M1cont ) ;
12464: LD_STRING M1cont
12466: PPUSH
12467: CALL_OW 337
// SaveForQuickRestart ;
12471: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12475: LD_INT 525
12477: PPUSH
12478: LD_INT 700
12480: PPUSH
12481: CALL_OW 12
12485: PPUSH
12486: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12490: LD_INT 5
12492: PPUSH
12493: LD_INT 82
12495: PPUSH
12496: LD_INT 38
12498: PPUSH
12499: LD_INT 10
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 56
// wait ( 0 0$14 ) ;
12509: LD_INT 490
12511: PPUSH
12512: CALL_OW 67
// firstCrateSpawn := true ;
12516: LD_ADDR_EXP 41
12520: PUSH
12521: LD_INT 1
12523: ST_TO_ADDR
// end ;
12524: END
// every 0 0$02 trigger firstCrateSpawn do
12525: LD_EXP 41
12529: IFFALSE 12892
12531: GO 12533
12533: DISABLE
// begin if IsOk ( Lisa ) then
12534: LD_EXP 2
12538: PPUSH
12539: CALL_OW 302
12543: IFFALSE 12559
// Say ( Lisa , DR0-Lisa-1 ) else
12545: LD_EXP 2
12549: PPUSH
12550: LD_STRING DR0-Lisa-1
12552: PPUSH
12553: CALL_OW 88
12557: GO 12705
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12559: LD_INT 22
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 21
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 26
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 2
12591: PUSH
12592: LD_INT 25
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 25
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 69
12649: PUSH
12650: LD_EXP 1
12654: PUSH
12655: LD_EXP 8
12659: PUSH
12660: LD_EXP 5
12664: PUSH
12665: LD_EXP 6
12669: PUSH
12670: LD_EXP 7
12674: PUSH
12675: LD_EXP 4
12679: PUSH
12680: LD_EXP 3
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: DIFF
12694: PPUSH
12695: LD_STRING DR0-Sol1-1
12697: PPUSH
12698: LD_STRING DR0-Sol1-1
12700: PPUSH
12701: CALL 5663 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12705: LD_INT 22
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 21
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 26
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: LD_INT 25
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 25
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 25
12760: PUSH
12761: LD_INT 3
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 25
12770: PUSH
12771: LD_INT 4
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 69
12795: PUSH
12796: LD_EXP 1
12800: PUSH
12801: LD_EXP 8
12805: PUSH
12806: LD_EXP 5
12810: PUSH
12811: LD_EXP 2
12815: PUSH
12816: LD_EXP 6
12820: PUSH
12821: LD_EXP 7
12825: PUSH
12826: LD_EXP 4
12830: PUSH
12831: LD_EXP 3
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: DIFF
12846: PPUSH
12847: LD_STRING DR0-Sol2-1
12849: PPUSH
12850: LD_STRING DR0-Sol2-1
12852: PPUSH
12853: CALL 5663 0 3
// if IsOk ( Cyrus ) then
12857: LD_EXP 4
12861: PPUSH
12862: CALL_OW 302
12866: IFFALSE 12880
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12868: LD_EXP 4
12872: PPUSH
12873: LD_STRING DR0-Cyrus-1
12875: PPUSH
12876: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12880: LD_EXP 1
12884: PPUSH
12885: LD_STRING DR0-JMM-1
12887: PPUSH
12888: CALL_OW 88
// end ;
12892: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
12893: LD_EXP 5
12897: PPUSH
12898: CALL_OW 302
12902: PUSH
12903: LD_INT 22
12905: PUSH
12906: LD_INT 1
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 16
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: PUSH
12932: LD_INT 0
12934: GREATER
12935: AND
12936: PUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 463
12944: NOT
12945: AND
12946: IFFALSE 13224
12948: GO 12950
12950: DISABLE
// begin DialogueOn ;
12951: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12955: LD_EXP 5
12959: PPUSH
12960: LD_STRING D10-Frank-1
12962: PPUSH
12963: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12967: LD_INT 22
12969: PUSH
12970: LD_INT 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 21
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 25
13002: PUSH
13003: LD_INT 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 3
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 25
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: PUSH
13047: LD_EXP 1
13051: PUSH
13052: LD_EXP 5
13056: PUSH
13057: LD_EXP 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: DIFF
13067: PPUSH
13068: LD_STRING D10-Sol1-1
13070: PPUSH
13071: LD_STRING D10-FSol1-1
13073: PPUSH
13074: CALL 5663 0 3
// Say ( Frank , D10-Frank-2 ) ;
13078: LD_EXP 5
13082: PPUSH
13083: LD_STRING D10-Frank-2
13085: PPUSH
13086: CALL_OW 88
// if IsOK ( Lisa ) then
13090: LD_EXP 2
13094: PPUSH
13095: CALL_OW 302
13099: IFFALSE 13115
// begin Say ( Lisa , D10-Lisa-2 ) ;
13101: LD_EXP 2
13105: PPUSH
13106: LD_STRING D10-Lisa-2
13108: PPUSH
13109: CALL_OW 88
// end else
13113: GO 13220
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13115: LD_INT 22
13117: PUSH
13118: LD_INT 1
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 21
13127: PUSH
13128: LD_INT 1
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 2
13137: PUSH
13138: LD_INT 25
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 4
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 69
13194: PUSH
13195: LD_EXP 1
13199: PUSH
13200: LD_EXP 5
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: DIFF
13209: PPUSH
13210: LD_STRING D10-Sol1-2
13212: PPUSH
13213: LD_STRING D10-FSol1-2
13215: PPUSH
13216: CALL 5663 0 3
// end ; DialogueOff ;
13220: CALL_OW 7
// end ;
13224: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 463
13232: NOT
13233: IFFALSE 13496
13235: GO 13237
13237: DISABLE
// begin HarrisonSupport ;
13238: CALL 2218 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13242: LD_EXP 17
13246: PPUSH
13247: CALL_OW 310
13251: PPUSH
13252: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13256: LD_EXP 17
13260: PPUSH
13261: LD_STRING DEng-Eng1-1
13263: PPUSH
13264: CALL_OW 88
// wait ( 1 1$0 ) ;
13268: LD_INT 2100
13270: PPUSH
13271: CALL_OW 67
// DialogueOn ;
13275: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13279: LD_EXP 14
13283: PPUSH
13284: LD_STRING DRem-Har-1
13286: PPUSH
13287: CALL_OW 94
// if contactWithRussian = 1 then
13291: LD_EXP 22
13295: PUSH
13296: LD_INT 1
13298: EQUAL
13299: IFFALSE 13315
// begin Say ( JMM , DRem-JMM-1 ) ;
13301: LD_EXP 1
13305: PPUSH
13306: LD_STRING DRem-JMM-1
13308: PPUSH
13309: CALL_OW 88
// end else
13313: GO 13327
// begin Say ( JMM , DRem-JMM-1a ) ;
13315: LD_EXP 1
13319: PPUSH
13320: LD_STRING DRem-JMM-1a
13322: PPUSH
13323: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13327: LD_EXP 14
13331: PPUSH
13332: LD_STRING DRem-Har-2
13334: PPUSH
13335: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13339: LD_STRING DenisInDelta
13341: PPUSH
13342: LD_INT 0
13344: PPUSH
13345: CALL_OW 30
13349: PUSH
13350: LD_INT 1
13352: EQUAL
13353: IFFALSE 13369
// begin Say ( JMM , DRem-JMM-2 ) ;
13355: LD_EXP 1
13359: PPUSH
13360: LD_STRING DRem-JMM-2
13362: PPUSH
13363: CALL_OW 88
// end else
13367: GO 13381
// begin Say ( JMM , DRem-JMM-2a ) ;
13369: LD_EXP 1
13373: PPUSH
13374: LD_STRING DRem-JMM-2a
13376: PPUSH
13377: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13381: LD_EXP 14
13385: PPUSH
13386: LD_STRING DRem-Har-3
13388: PPUSH
13389: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13393: LD_EXP 1
13397: PPUSH
13398: LD_STRING DRem-JMM-3
13400: PPUSH
13401: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13405: LD_EXP 14
13409: PPUSH
13410: LD_STRING DRem-Har-4
13412: PPUSH
13413: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13417: LD_STRING DenisInDelta
13419: PPUSH
13420: LD_INT 0
13422: PPUSH
13423: CALL_OW 30
13427: PUSH
13428: LD_INT 1
13430: EQUAL
13431: IFFALSE 13459
// begin Say ( JMM , DRem-JMM-4 ) ;
13433: LD_EXP 1
13437: PPUSH
13438: LD_STRING DRem-JMM-4
13440: PPUSH
13441: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13445: LD_EXP 14
13449: PPUSH
13450: LD_STRING DRem-Har-5
13452: PPUSH
13453: CALL_OW 94
// end else
13457: GO 13492
// begin SetRestrict ( 36 , 1 , true ) ;
13459: LD_INT 36
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13472: LD_INT 15
13474: PPUSH
13475: LD_INT 1
13477: PPUSH
13478: LD_INT 1
13480: PPUSH
13481: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13485: LD_STRING MR
13487: PPUSH
13488: CALL_OW 337
// end ; DialogueOff ;
13492: CALL_OW 7
// end ;
13496: END
// every 0 0$30 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13497: LD_STRING DenisInDelta
13499: PPUSH
13500: LD_INT 0
13502: PPUSH
13503: CALL_OW 30
13507: PUSH
13508: LD_INT 1
13510: EQUAL
13511: PUSH
13512: LD_INT 1
13514: PPUSH
13515: CALL_OW 463
13519: NOT
13520: AND
13521: IFFALSE 13754
13523: GO 13525
13525: DISABLE
13526: LD_INT 0
13528: PPUSH
// begin PrepareDenis ;
13529: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13533: LD_EXP 9
13537: PPUSH
13538: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13542: LD_ADDR_VAR 0 1
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PPUSH
13557: CALL_OW 69
13561: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13562: LD_EXP 9
13566: PPUSH
13567: LD_VAR 0 1
13571: PPUSH
13572: LD_EXP 9
13576: PPUSH
13577: CALL_OW 74
13581: PPUSH
13582: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13586: LD_INT 35
13588: PPUSH
13589: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13593: LD_INT 22
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 91
13605: PUSH
13606: LD_EXP 9
13610: PUSH
13611: LD_INT 10
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 69
13627: IFFALSE 13586
// SetSide ( Denis , 1 ) ;
13629: LD_EXP 9
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 235
// DialogueOn ;
13641: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13645: LD_EXP 9
13649: PPUSH
13650: LD_STRING DDen-Den-1
13652: PPUSH
13653: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13657: LD_EXP 1
13661: PPUSH
13662: LD_STRING DDen-JMM-1
13664: PPUSH
13665: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13669: LD_EXP 9
13673: PPUSH
13674: LD_STRING DDen-Den-2
13676: PPUSH
13677: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13681: LD_EXP 1
13685: PPUSH
13686: LD_STRING DDen-JMM-2
13688: PPUSH
13689: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13693: LD_EXP 9
13697: PPUSH
13698: LD_STRING DDen-Den-3
13700: PPUSH
13701: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13705: LD_EXP 1
13709: PPUSH
13710: LD_STRING DDen-JMM-3
13712: PPUSH
13713: CALL_OW 88
// DialogueOff ;
13717: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13721: LD_INT 36
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13734: LD_INT 15
13736: PPUSH
13737: LD_INT 1
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13747: LD_STRING MR
13749: PPUSH
13750: CALL_OW 337
// end ;
13754: PPOPN 1
13756: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13757: CALL 13812 0 0
13761: PUSH
13762: LD_EXP 9
13766: PPUSH
13767: CALL_OW 302
13771: AND
13772: PUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 463
13780: NOT
13781: AND
13782: IFFALSE 13811
13784: GO 13786
13786: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13787: LD_EXP 9
13791: PPUSH
13792: LD_STRING DR1-Den-1
13794: PPUSH
13795: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13799: LD_EXP 1
13803: PPUSH
13804: LD_STRING DR1-JMM-1
13806: PPUSH
13807: CALL_OW 88
// end ;
13811: END
// function CheckOptoLab ; var i ; begin
13812: LD_INT 0
13814: PPUSH
13815: PPUSH
// result = false ;
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: LD_INT 0
13823: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 2
13841: PUSH
13842: LD_INT 30
13844: PUSH
13845: LD_INT 7
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 30
13854: PUSH
13855: LD_INT 8
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PPUSH
13871: CALL_OW 69
13875: PUSH
13876: FOR_IN
13877: IFFALSE 13929
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 268
13891: PUSH
13892: LD_INT 15
13894: EQUAL
13895: PUSH
13896: LD_VAR 0 2
13900: PPUSH
13901: LD_INT 2
13903: PPUSH
13904: CALL_OW 268
13908: PUSH
13909: LD_INT 15
13911: EQUAL
13912: OR
13913: IFFALSE 13925
// begin result = true ;
13915: LD_ADDR_VAR 0 1
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// break ;
13923: GO 13929
// end ; break ;
13925: GO 13929
// end ;
13927: GO 13876
13929: POP
13930: POP
// end ;
13931: LD_VAR 0 1
13935: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
13936: LD_INT 15
13938: PPUSH
13939: LD_INT 1
13941: PPUSH
13942: CALL_OW 321
13946: PUSH
13947: LD_INT 2
13949: EQUAL
13950: PUSH
13951: LD_EXP 9
13955: PPUSH
13956: CALL_OW 302
13960: AND
13961: PUSH
13962: LD_INT 1
13964: PPUSH
13965: CALL_OW 463
13969: NOT
13970: AND
13971: IFFALSE 14203
13973: GO 13975
13975: DISABLE
// begin DialogueOn ;
13976: CALL_OW 6
// if IsOK ( Denis ) then
13980: LD_EXP 9
13984: PPUSH
13985: CALL_OW 302
13989: IFFALSE 14005
// begin Say ( Denis , DR2-Den-1 ) ;
13991: LD_EXP 9
13995: PPUSH
13996: LD_STRING DR2-Den-1
13998: PPUSH
13999: CALL_OW 88
// end else
14003: GO 14064
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14005: LD_INT 22
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: LD_INT 25
14027: PUSH
14028: LD_INT 4
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: PPUSH
14040: CALL_OW 69
14044: PUSH
14045: LD_EXP 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: DIFF
14053: PPUSH
14054: LD_STRING DR2-Sci1-1
14056: PPUSH
14057: LD_STRING DR2-FSci1-1
14059: PPUSH
14060: CALL 5663 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14064: LD_EXP 1
14068: PPUSH
14069: LD_STRING DR2-JMM-1
14071: PPUSH
14072: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14076: LD_INT 22
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 21
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 25
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 25
14111: PUSH
14112: LD_INT 2
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 25
14121: PUSH
14122: LD_INT 3
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 25
14131: PUSH
14132: LD_INT 4
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: PUSH
14156: LD_EXP 1
14160: PUSH
14161: LD_EXP 9
14165: PUSH
14166: LD_EXP 8
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: DIFF
14176: PPUSH
14177: LD_STRING DR2-Sol1-1
14179: PPUSH
14180: LD_STRING DR2-Sol1-11
14182: PPUSH
14183: CALL 5663 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14187: LD_EXP 1
14191: PPUSH
14192: LD_STRING DR2-JMM-2
14194: PPUSH
14195: CALL_OW 88
// DialogueOff ;
14199: CALL_OW 7
// end ;
14203: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14204: LD_INT 22
14206: PUSH
14207: LD_INT 1
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 30
14216: PUSH
14217: LD_INT 36
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 69
14232: PUSH
14233: LD_INT 0
14235: EQUAL
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 33
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PUSH
14277: LD_INT 0
14279: GREATER
14280: AND
14281: PUSH
14282: LD_EXP 23
14286: PUSH
14287: LD_INT 0
14289: EQUAL
14290: AND
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 463
14299: NOT
14300: AND
14301: IFFALSE 14427
14303: GO 14305
14305: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14306: LD_INT 22
14308: PUSH
14309: LD_INT 1
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 25
14328: PUSH
14329: LD_INT 3
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: LIST
14340: PPUSH
14341: CALL_OW 69
14345: PUSH
14346: LD_EXP 1
14350: PUSH
14351: LD_EXP 6
14355: PUSH
14356: LD_EXP 7
14360: PUSH
14361: LD_EXP 9
14365: PUSH
14366: LD_EXP 15
14370: PUSH
14371: LD_EXP 3
14375: PUSH
14376: LD_EXP 4
14380: PUSH
14381: LD_EXP 2
14385: PUSH
14386: LD_EXP 5
14390: PUSH
14391: LD_EXP 8
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: DIFF
14408: PPUSH
14409: LD_STRING D3a-Mech1-1
14411: PPUSH
14412: LD_STRING D3a-Mech1-1
14414: PPUSH
14415: CALL 5663 0 3
// firstTower = 2 ;
14419: LD_ADDR_EXP 23
14423: PUSH
14424: LD_INT 2
14426: ST_TO_ADDR
// end ;
14427: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14428: LD_INT 22
14430: PUSH
14431: LD_INT 3
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PPUSH
14452: CALL_OW 69
14456: PUSH
14457: LD_INT 0
14459: EQUAL
14460: IFFALSE 14575
14462: GO 14464
14464: DISABLE
14465: LD_INT 0
14467: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14468: LD_ADDR_VAR 0 1
14472: PUSH
14473: LD_INT 22
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 21
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 2
14495: PUSH
14496: LD_INT 25
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 25
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 25
14518: PUSH
14519: LD_INT 3
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 25
14528: PUSH
14529: LD_INT 4
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PPUSH
14548: CALL_OW 69
14552: PUSH
14553: FOR_IN
14554: IFFALSE 14573
// AddExperience ( i , 1 , 10000 ) ;
14556: LD_VAR 0 1
14560: PPUSH
14561: LD_INT 1
14563: PPUSH
14564: LD_INT 10000
14566: PPUSH
14567: CALL_OW 492
14571: GO 14553
14573: POP
14574: POP
// end ;
14575: PPOPN 1
14577: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14578: LD_INT 22
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 36
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PPUSH
14602: CALL_OW 69
14606: PUSH
14607: LD_INT 0
14609: GREATER
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 21
14623: PUSH
14624: LD_INT 2
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 33
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: PUSH
14651: LD_INT 0
14653: GREATER
14654: AND
14655: PUSH
14656: CALL 15248 0 0
14660: AND
14661: PUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 463
14669: NOT
14670: AND
14671: IFFALSE 15245
14673: GO 14675
14675: DISABLE
14676: LD_INT 0
14678: PPUSH
14679: PPUSH
14680: PPUSH
14681: PPUSH
14682: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_INT 22
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 30
14700: PUSH
14701: LD_INT 36
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 33
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 69
14761: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14762: LD_ADDR_VAR 0 5
14766: PUSH
14767: EMPTY
14768: ST_TO_ADDR
// for i in tmpControlTowers do
14769: LD_ADDR_VAR 0 1
14773: PUSH
14774: LD_VAR 0 3
14778: PUSH
14779: FOR_IN
14780: IFFALSE 15243
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14782: LD_EXP 1
14786: PPUSH
14787: CALL_OW 310
14791: PUSH
14792: LD_VAR 0 1
14796: EQUAL
14797: PUSH
14798: LD_EXP 1
14802: PPUSH
14803: CALL_OW 257
14807: PUSH
14808: LD_INT 3
14810: EQUAL
14811: AND
14812: IFFALSE 14942
// begin InGameOn ;
14814: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14818: LD_VAR 0 4
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14831: LD_EXP 1
14835: PPUSH
14836: LD_STRING D4a-JMM-1
14838: PPUSH
14839: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14843: LD_VAR 0 4
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_EXP 1
14856: PPUSH
14857: CALL_OW 53
// wait ( 0 0$1 ) ;
14861: LD_INT 35
14863: PPUSH
14864: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14868: LD_VAR 0 4
14872: PUSH
14873: LD_INT 1
14875: ARRAY
14876: PPUSH
14877: LD_VAR 0 4
14881: PUSH
14882: LD_INT 1
14884: ARRAY
14885: PPUSH
14886: CALL_OW 250
14890: PUSH
14891: LD_INT 3
14893: PLUS
14894: PPUSH
14895: LD_VAR 0 4
14899: PUSH
14900: LD_INT 1
14902: ARRAY
14903: PPUSH
14904: CALL_OW 251
14908: PUSH
14909: LD_INT 2
14911: MINUS
14912: PPUSH
14913: CALL_OW 111
// wait ( 0 0$2 ) ;
14917: LD_INT 70
14919: PPUSH
14920: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14924: LD_EXP 1
14928: PPUSH
14929: LD_STRING D4b-JMM-1
14931: PPUSH
14932: CALL_OW 88
// InGameOff ;
14936: CALL_OW 9
// end else
14940: GO 15241
// begin InGameOn ;
14942: CALL_OW 8
// for j in UnitsInside ( i ) do
14946: LD_ADDR_VAR 0 2
14950: PUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 313
14960: PUSH
14961: FOR_IN
14962: IFFALSE 14997
// if GetClass ( j ) = 3 then
14964: LD_VAR 0 2
14968: PPUSH
14969: CALL_OW 257
14973: PUSH
14974: LD_INT 3
14976: EQUAL
14977: IFFALSE 14995
// tmpMechanicInside = tmpMechanicInside ^ j ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_VAR 0 5
14988: PUSH
14989: LD_VAR 0 2
14993: ADD
14994: ST_TO_ADDR
14995: GO 14961
14997: POP
14998: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14999: LD_VAR 0 5
15003: PUSH
15004: LD_INT 1
15006: ARRAY
15007: PPUSH
15008: CALL_OW 258
15012: PUSH
15013: LD_INT 1
15015: EQUAL
15016: IFFALSE 15034
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15018: LD_VAR 0 5
15022: PUSH
15023: LD_INT 1
15025: ARRAY
15026: PPUSH
15027: LD_STRING D4a-Mech1-1
15029: PPUSH
15030: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15034: LD_VAR 0 5
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: CALL_OW 258
15047: PUSH
15048: LD_INT 2
15050: EQUAL
15051: IFFALSE 15069
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15053: LD_VAR 0 5
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: PPUSH
15062: LD_STRING D4a-FMech1-1
15064: PPUSH
15065: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15069: LD_VAR 0 4
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15082: LD_VAR 0 4
15086: PUSH
15087: LD_INT 1
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 5
15095: PUSH
15096: LD_INT 1
15098: ARRAY
15099: PPUSH
15100: CALL_OW 53
// wait ( 0 0$1 ) ;
15104: LD_INT 35
15106: PPUSH
15107: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15111: LD_VAR 0 4
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: LD_VAR 0 4
15124: PUSH
15125: LD_INT 1
15127: ARRAY
15128: PPUSH
15129: CALL_OW 250
15133: PUSH
15134: LD_INT 3
15136: PLUS
15137: PPUSH
15138: LD_VAR 0 4
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PPUSH
15147: CALL_OW 251
15151: PUSH
15152: LD_INT 2
15154: MINUS
15155: PPUSH
15156: CALL_OW 111
// wait ( 0 0$2 ) ;
15160: LD_INT 70
15162: PPUSH
15163: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15167: LD_VAR 0 5
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PPUSH
15176: CALL_OW 258
15180: PUSH
15181: LD_INT 1
15183: EQUAL
15184: IFFALSE 15202
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15186: LD_VAR 0 5
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: PPUSH
15195: LD_STRING D4b-Mech1-1
15197: PPUSH
15198: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15202: LD_VAR 0 5
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PPUSH
15211: CALL_OW 258
15215: PUSH
15216: LD_INT 2
15218: EQUAL
15219: IFFALSE 15237
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15221: LD_VAR 0 5
15225: PUSH
15226: LD_INT 1
15228: ARRAY
15229: PPUSH
15230: LD_STRING D4b-FMech1-1
15232: PPUSH
15233: CALL_OW 88
// InGameOff ;
15237: CALL_OW 9
// end ; end ;
15241: GO 14779
15243: POP
15244: POP
// end ;
15245: PPOPN 5
15247: END
// function CheckMehInside ; var i , j ; begin
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
15252: PPUSH
// result = false ;
15253: LD_ADDR_VAR 0 1
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15261: LD_ADDR_VAR 0 2
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 30
15278: PUSH
15279: LD_INT 36
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 69
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15347
// begin for j in UnitsInside ( i ) do
15298: LD_ADDR_VAR 0 3
15302: PUSH
15303: LD_VAR 0 2
15307: PPUSH
15308: CALL_OW 313
15312: PUSH
15313: FOR_IN
15314: IFFALSE 15343
// begin if GetClass ( j ) = 3 then
15316: LD_VAR 0 3
15320: PPUSH
15321: CALL_OW 257
15325: PUSH
15326: LD_INT 3
15328: EQUAL
15329: IFFALSE 15341
// begin result = true ;
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: LD_INT 1
15338: ST_TO_ADDR
// break ;
15339: GO 15343
// end ; end ;
15341: GO 15313
15343: POP
15344: POP
// end ;
15345: GO 15295
15347: POP
15348: POP
// end ;
15349: LD_VAR 0 1
15353: RET
// every 25 25$0 do
15354: GO 15356
15356: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15357: LD_INT 35
15359: PPUSH
15360: CALL_OW 67
// until not InBattle ( 1 ) ;
15364: LD_INT 1
15366: PPUSH
15367: CALL_OW 463
15371: NOT
15372: IFFALSE 15357
// PrepareKurt ;
15374: CALL 18820 0 0
// end ;
15378: END
// every 35 35$0 do
15379: GO 15381
15381: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15382: LD_INT 35
15384: PPUSH
15385: CALL_OW 67
// until not InBattle ( 1 ) ;
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 463
15396: NOT
15397: IFFALSE 15382
// PrepareJoan ;
15399: CALL 2673 0 0
// wait ( 1 1$0 ) ;
15403: LD_INT 2100
15405: PPUSH
15406: CALL_OW 67
// if IsOK ( Lisa ) then
15410: LD_EXP 2
15414: PPUSH
15415: CALL_OW 302
15419: IFFALSE 15549
// begin DialogueOn ;
15421: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15425: LD_EXP 2
15429: PPUSH
15430: LD_STRING D7-Lisa-1
15432: PPUSH
15433: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15437: LD_EXP 1
15441: PPUSH
15442: LD_STRING D7-JMM-1
15444: PPUSH
15445: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15449: LD_EXP 2
15453: PPUSH
15454: LD_STRING D7-Lisa-2
15456: PPUSH
15457: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15461: LD_EXP 1
15465: PPUSH
15466: LD_STRING D7-JMM-2
15468: PPUSH
15469: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15473: LD_EXP 2
15477: PPUSH
15478: LD_STRING D7-Lisa-3
15480: PPUSH
15481: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15485: LD_EXP 1
15489: PPUSH
15490: LD_STRING D7-JMM-3
15492: PPUSH
15493: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15497: LD_EXP 2
15501: PPUSH
15502: LD_STRING D7-Lisa-4
15504: PPUSH
15505: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15509: LD_EXP 1
15513: PPUSH
15514: LD_STRING D7-JMM-4
15516: PPUSH
15517: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15521: LD_EXP 1
15525: PPUSH
15526: LD_STRING D7-JMM-4a
15528: PPUSH
15529: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15533: LD_EXP 2
15537: PPUSH
15538: LD_STRING D7-Lisa-5
15540: PPUSH
15541: CALL_OW 88
// DialogueOff ;
15545: CALL_OW 7
// end ; end ;
15549: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15550: LD_EXP 13
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_INT 1
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 91
15567: PUSH
15568: LD_EXP 13
15572: PUSH
15573: LD_INT 10
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 2
15583: PUSH
15584: LD_INT 25
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 25
15596: PUSH
15597: LD_INT 2
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 25
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 25
15616: PUSH
15617: LD_INT 4
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 69
15640: PUSH
15641: LD_INT 1
15643: GREATER
15644: AND
15645: IFFALSE 15662
15647: GO 15649
15649: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15650: LD_EXP 13
15654: PPUSH
15655: LD_STRING D5-Sol1-1
15657: PPUSH
15658: CALL_OW 88
// end ;
15662: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15663: LD_INT 22
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 33
15675: PUSH
15676: LD_INT 2
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 69
15691: PUSH
15692: LD_INT 2
15694: GREATEREQUAL
15695: IFFALSE 15715
15697: GO 15699
15699: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15700: LD_STRING MRa
15702: PPUSH
15703: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15707: LD_ADDR_EXP 28
15711: PUSH
15712: LD_INT 1
15714: ST_TO_ADDR
// end ;
15715: END
// every 0 0$10 do var i , last ;
15716: GO 15718
15718: DISABLE
15719: LD_INT 0
15721: PPUSH
15722: PPUSH
// begin last := 7 ;
15723: LD_ADDR_VAR 0 2
15727: PUSH
15728: LD_INT 7
15730: ST_TO_ADDR
// for i = 1 to last do
15731: LD_ADDR_VAR 0 1
15735: PUSH
15736: DOUBLE
15737: LD_INT 1
15739: DEC
15740: ST_TO_ADDR
15741: LD_VAR 0 2
15745: PUSH
15746: FOR_TO
15747: IFFALSE 15775
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
15749: LD_INT 6300
15751: PPUSH
15752: LD_INT 14700
15754: PPUSH
15755: CALL_OW 12
15759: PPUSH
15760: CALL_OW 67
// PrepareRandoms ( i ) ;
15764: LD_VAR 0 1
15768: PPUSH
15769: CALL 3709 0 1
// end ;
15773: GO 15746
15775: POP
15776: POP
// end ;
15777: PPOPN 2
15779: END
// every 5 5$20 do
15780: GO 15782
15782: DISABLE
// begin DialogueOn ;
15783: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15787: LD_EXP 10
15791: PPUSH
15792: LD_STRING D12a-Sci-1
15794: PPUSH
15795: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15799: LD_EXP 1
15803: PPUSH
15804: LD_STRING D12a-JMM-1
15806: PPUSH
15807: CALL_OW 88
// DialogueOff ;
15811: CALL_OW 7
// cratesStatus = 1 ;
15815: LD_ADDR_EXP 38
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// end ;
15823: END
// every 13 13$0 do
15824: GO 15826
15826: DISABLE
// begin DialogueOn ;
15827: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15831: LD_EXP 10
15835: PPUSH
15836: LD_STRING D12b-Sci-1
15838: PPUSH
15839: CALL_OW 94
// DialogueOff ;
15843: CALL_OW 7
// cratesStatus = 2 ;
15847: LD_ADDR_EXP 38
15851: PUSH
15852: LD_INT 2
15854: ST_TO_ADDR
// end ;
15855: END
// every 32 32$0 do
15856: GO 15858
15858: DISABLE
// begin DialogueOn ;
15859: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15863: LD_EXP 10
15867: PPUSH
15868: LD_STRING D12c-Sci-1
15870: PPUSH
15871: CALL_OW 94
// DialogueOff ;
15875: CALL_OW 7
// wait ( 3 3$0 ) ;
15879: LD_INT 6300
15881: PPUSH
15882: CALL_OW 67
// DialogueOn ;
15886: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15890: LD_EXP 10
15894: PPUSH
15895: LD_STRING D12d-Sci-1
15897: PPUSH
15898: CALL_OW 94
// DialogueOff ;
15902: CALL_OW 7
// cratesStatus = 1 ;
15906: LD_ADDR_EXP 38
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// end ;
15914: END
// every 42 42$0 do
15915: GO 15917
15917: DISABLE
// begin DialogueOn ;
15918: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15922: LD_EXP 10
15926: PPUSH
15927: LD_STRING D12e-Sci-1
15929: PPUSH
15930: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15934: LD_EXP 1
15938: PPUSH
15939: LD_STRING D12e-JMM-1
15941: PPUSH
15942: CALL_OW 88
// DialogueOff ;
15946: CALL_OW 7
// cratesStatus = 2 ;
15950: LD_ADDR_EXP 38
15954: PUSH
15955: LD_INT 2
15957: ST_TO_ADDR
// end ;
15958: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15959: LD_INT 22
15961: PUSH
15962: LD_INT 6
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 34
15981: PUSH
15982: LD_INT 51
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: PPUSH
15994: CALL_OW 69
15998: PUSH
15999: LD_INT 0
16001: GREATER
16002: IFFALSE 16085
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
// begin enable ;
16010: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_INT 22
16018: PUSH
16019: LD_INT 6
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 21
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 21
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PPUSH
16058: CALL_OW 69
16062: PUSH
16063: FOR_IN
16064: IFFALSE 16083
// ComAgressiveMove ( i , 138 , 168 ) ;
16066: LD_VAR 0 1
16070: PPUSH
16071: LD_INT 138
16073: PPUSH
16074: LD_INT 168
16076: PPUSH
16077: CALL_OW 114
16081: GO 16063
16083: POP
16084: POP
// end ;
16085: PPOPN 1
16087: END
// every 0 0$1 do var i ;
16088: GO 16090
16090: DISABLE
16091: LD_INT 0
16093: PPUSH
// begin enable ;
16094: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16095: LD_ADDR_VAR 0 1
16099: PUSH
16100: LD_INT 4
16102: PPUSH
16103: LD_INT 2
16105: PUSH
16106: LD_INT 22
16108: PUSH
16109: LD_INT 3
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_INT 6
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: PUSH
16131: EMPTY
16132: LIST
16133: PPUSH
16134: CALL_OW 70
16138: PUSH
16139: FOR_IN
16140: IFFALSE 16204
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16142: LD_INT 4
16144: PPUSH
16145: LD_INT 22
16147: PUSH
16148: LD_INT 6
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 51
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 70
16173: PUSH
16174: LD_INT 0
16176: GREATER
16177: IFFALSE 16193
// sendedConvoys = sendedConvoys + 1 ;
16179: LD_ADDR_EXP 39
16183: PUSH
16184: LD_EXP 39
16188: PUSH
16189: LD_INT 1
16191: PLUS
16192: ST_TO_ADDR
// RemoveUnit ( i ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 64
// end ;
16202: GO 16139
16204: POP
16205: POP
// end ; end_of_file
16206: PPOPN 1
16208: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16209: LD_VAR 0 1
16213: PUSH
16214: LD_INT 1
16216: EQUAL
16217: PUSH
16218: LD_VAR 0 2
16222: PUSH
16223: LD_INT 3
16225: EQUAL
16226: AND
16227: IFFALSE 16237
// contactWithRussian = 1 ;
16229: LD_ADDR_EXP 22
16233: PUSH
16234: LD_INT 1
16236: ST_TO_ADDR
// end ;
16237: PPOPN 2
16239: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16240: LD_VAR 0 1
16244: PPUSH
16245: CALL_OW 266
16249: PUSH
16250: LD_INT 36
16252: EQUAL
16253: PUSH
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 255
16263: PUSH
16264: LD_INT 1
16266: EQUAL
16267: AND
16268: PUSH
16269: LD_INT 22
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 21
16281: PUSH
16282: LD_INT 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 33
16291: PUSH
16292: LD_INT 2
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: PUSH
16309: LD_INT 0
16311: EQUAL
16312: AND
16313: PUSH
16314: LD_EXP 23
16318: PUSH
16319: LD_INT 0
16321: EQUAL
16322: AND
16323: IFFALSE 16403
// begin firstTower = 1 ;
16325: LD_ADDR_EXP 23
16329: PUSH
16330: LD_INT 1
16332: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16333: LD_INT 22
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 25
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 26
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: PUSH
16384: LD_EXP 1
16388: PUSH
16389: EMPTY
16390: LIST
16391: DIFF
16392: PPUSH
16393: LD_STRING D3b-Mech1-1
16395: PPUSH
16396: LD_STRING D3b-Mech1-1
16398: PPUSH
16399: CALL 5663 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL_OW 266
16412: PUSH
16413: LD_INT 0
16415: EQUAL
16416: PUSH
16417: LD_VAR 0 1
16421: PPUSH
16422: CALL_OW 255
16426: PUSH
16427: LD_INT 1
16429: EQUAL
16430: AND
16431: IFFALSE 16445
// SetBName ( building , theta ) ;
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_STRING theta
16440: PPUSH
16441: CALL_OW 500
// if GetSide ( building ) = 3 then
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: LD_INT 3
16457: EQUAL
16458: IFFALSE 16532
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16460: LD_ADDR_EXP 31
16464: PUSH
16465: LD_EXP 31
16469: PPUSH
16470: LD_INT 1
16472: PPUSH
16473: CALL_OW 3
16477: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16478: LD_ADDR_EXP 31
16482: PUSH
16483: LD_EXP 31
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 3
16495: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16496: LD_ADDR_EXP 31
16500: PUSH
16501: LD_EXP 31
16505: PPUSH
16506: LD_INT 1
16508: PPUSH
16509: CALL_OW 3
16513: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16514: LD_ADDR_EXP 31
16518: PUSH
16519: LD_EXP 31
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 3
16531: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 255
16541: PUSH
16542: LD_INT 3
16544: EQUAL
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 266
16555: PUSH
16556: LD_INT 0
16558: EQUAL
16559: PUSH
16560: LD_VAR 0 1
16564: PPUSH
16565: CALL_OW 266
16569: PUSH
16570: LD_INT 2
16572: EQUAL
16573: OR
16574: PUSH
16575: LD_VAR 0 1
16579: PPUSH
16580: CALL_OW 266
16584: PUSH
16585: LD_INT 4
16587: EQUAL
16588: OR
16589: PUSH
16590: EMPTY
16591: LIST
16592: AND
16593: IFFALSE 16604
// ComUpgrade ( building ) ;
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 255
16613: PUSH
16614: LD_INT 3
16616: EQUAL
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 266
16627: PUSH
16628: LD_INT 32
16630: EQUAL
16631: AND
16632: IFFALSE 16673
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 42
16641: PUSH
16642: LD_INT 43
16644: PUSH
16645: LD_INT 44
16647: PUSH
16648: LD_INT 46
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PPUSH
16660: LD_INT 4
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PPUSH
16669: CALL_OW 208
// end ; end ;
16673: PPOPN 1
16675: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
16676: LD_VAR 0 1
16680: PUSH
16681: LD_EXP 15
16685: EQUAL
16686: IFFALSE 16696
// JoanStatus = 0 ;
16688: LD_ADDR_EXP 16
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 255
16705: PUSH
16706: LD_INT 1
16708: EQUAL
16709: PUSH
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 247
16719: PUSH
16720: LD_INT 1
16722: EQUAL
16723: AND
16724: IFFALSE 16800
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 257
16735: PUSH
16736: LD_INT 1
16738: EQUAL
16739: PUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 257
16749: PUSH
16750: LD_INT 2
16752: EQUAL
16753: OR
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 257
16764: PUSH
16765: LD_INT 3
16767: EQUAL
16768: OR
16769: PUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 257
16779: PUSH
16780: LD_INT 4
16782: EQUAL
16783: OR
16784: IFFALSE 16800
// unitLost = unitLost + 1 ;
16786: LD_ADDR_EXP 30
16790: PUSH
16791: LD_EXP 30
16795: PUSH
16796: LD_INT 1
16798: PLUS
16799: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16800: LD_VAR 0 1
16804: PPUSH
16805: CALL_OW 255
16809: PUSH
16810: LD_INT 3
16812: EQUAL
16813: PUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: CALL_OW 247
16823: PUSH
16824: LD_INT 3
16826: EQUAL
16827: AND
16828: IFFALSE 17520
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL_OW 266
16839: PUSH
16840: LD_INT 31
16842: EQUAL
16843: PUSH
16844: LD_VAR 0 1
16848: PPUSH
16849: CALL_OW 266
16853: PUSH
16854: LD_INT 32
16856: EQUAL
16857: OR
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 266
16868: PUSH
16869: LD_INT 36
16871: EQUAL
16872: OR
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 266
16883: PUSH
16884: LD_INT 0
16886: EQUAL
16887: OR
16888: PUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 266
16898: PUSH
16899: LD_INT 24
16901: EQUAL
16902: OR
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 266
16913: PUSH
16914: LD_INT 17
16916: EQUAL
16917: OR
16918: PUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 266
16928: PUSH
16929: LD_INT 25
16931: EQUAL
16932: OR
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 266
16943: PUSH
16944: LD_INT 19
16946: EQUAL
16947: OR
16948: PUSH
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 266
16958: PUSH
16959: LD_INT 20
16961: EQUAL
16962: OR
16963: PUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 266
16973: PUSH
16974: LD_INT 18
16976: EQUAL
16977: OR
16978: PUSH
16979: LD_VAR 0 1
16983: PPUSH
16984: CALL_OW 266
16988: PUSH
16989: LD_INT 21
16991: EQUAL
16992: OR
16993: PUSH
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 266
17003: PUSH
17004: LD_INT 23
17006: EQUAL
17007: OR
17008: PUSH
17009: LD_VAR 0 1
17013: PPUSH
17014: CALL_OW 266
17018: PUSH
17019: LD_INT 16
17021: EQUAL
17022: OR
17023: PUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 266
17033: PUSH
17034: LD_INT 6
17036: EQUAL
17037: OR
17038: PUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: CALL_OW 266
17048: PUSH
17049: LD_INT 29
17051: EQUAL
17052: OR
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 266
17063: PUSH
17064: LD_INT 26
17066: EQUAL
17067: OR
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 266
17078: PUSH
17079: LD_INT 30
17081: EQUAL
17082: OR
17083: PUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 266
17093: PUSH
17094: LD_INT 28
17096: EQUAL
17097: OR
17098: PUSH
17099: LD_VAR 0 1
17103: PPUSH
17104: CALL_OW 266
17108: PUSH
17109: LD_INT 27
17111: EQUAL
17112: OR
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 266
17123: PUSH
17124: LD_INT 33
17126: EQUAL
17127: OR
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 266
17138: PUSH
17139: LD_INT 2
17141: EQUAL
17142: OR
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 266
17153: PUSH
17154: LD_INT 4
17156: EQUAL
17157: OR
17158: IFFALSE 17244
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17160: LD_ADDR_EXP 31
17164: PUSH
17165: LD_EXP 31
17169: PUSH
17170: LD_VAR 0 1
17174: PPUSH
17175: CALL_OW 266
17179: ADD
17180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17181: LD_ADDR_EXP 31
17185: PUSH
17186: LD_EXP 31
17190: PUSH
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 250
17200: ADD
17201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17202: LD_ADDR_EXP 31
17206: PUSH
17207: LD_EXP 31
17211: PUSH
17212: LD_VAR 0 1
17216: PPUSH
17217: CALL_OW 251
17221: ADD
17222: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17223: LD_ADDR_EXP 31
17227: PUSH
17228: LD_EXP 31
17232: PUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 254
17242: ADD
17243: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 266
17253: PUSH
17254: LD_INT 1
17256: EQUAL
17257: IFFALSE 17336
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17259: LD_ADDR_EXP 31
17263: PUSH
17264: LD_EXP 31
17268: PUSH
17269: LD_INT 0
17271: ADD
17272: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17273: LD_ADDR_EXP 31
17277: PUSH
17278: LD_EXP 31
17282: PUSH
17283: LD_VAR 0 1
17287: PPUSH
17288: CALL_OW 250
17292: ADD
17293: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17294: LD_ADDR_EXP 31
17298: PUSH
17299: LD_EXP 31
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 251
17313: ADD
17314: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17315: LD_ADDR_EXP 31
17319: PUSH
17320: LD_EXP 31
17324: PUSH
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 254
17334: ADD
17335: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 266
17345: PUSH
17346: LD_INT 3
17348: EQUAL
17349: IFFALSE 17428
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17351: LD_ADDR_EXP 31
17355: PUSH
17356: LD_EXP 31
17360: PUSH
17361: LD_INT 2
17363: ADD
17364: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17365: LD_ADDR_EXP 31
17369: PUSH
17370: LD_EXP 31
17374: PUSH
17375: LD_VAR 0 1
17379: PPUSH
17380: CALL_OW 250
17384: ADD
17385: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17386: LD_ADDR_EXP 31
17390: PUSH
17391: LD_EXP 31
17395: PUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: CALL_OW 251
17405: ADD
17406: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17407: LD_ADDR_EXP 31
17411: PUSH
17412: LD_EXP 31
17416: PUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 254
17426: ADD
17427: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 266
17437: PUSH
17438: LD_INT 5
17440: EQUAL
17441: IFFALSE 17520
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17443: LD_ADDR_EXP 31
17447: PUSH
17448: LD_EXP 31
17452: PUSH
17453: LD_INT 4
17455: ADD
17456: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17457: LD_ADDR_EXP 31
17461: PUSH
17462: LD_EXP 31
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 250
17476: ADD
17477: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17478: LD_ADDR_EXP 31
17482: PUSH
17483: LD_EXP 31
17487: PUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 251
17497: ADD
17498: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17499: LD_ADDR_EXP 31
17503: PUSH
17504: LD_EXP 31
17508: PUSH
17509: LD_VAR 0 1
17513: PPUSH
17514: CALL_OW 254
17518: ADD
17519: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17520: LD_VAR 0 1
17524: PPUSH
17525: CALL_OW 257
17529: PUSH
17530: LD_INT 3
17532: EQUAL
17533: PUSH
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 255
17543: PUSH
17544: LD_INT 3
17546: EQUAL
17547: AND
17548: PUSH
17549: LD_INT 21
17551: PPUSH
17552: CALL_OW 302
17556: AND
17557: PUSH
17558: LD_INT 21
17560: PPUSH
17561: CALL_OW 255
17565: PUSH
17566: LD_INT 3
17568: EQUAL
17569: AND
17570: IFFALSE 17638
// begin uc_side = 3 ;
17572: LD_ADDR_OWVAR 20
17576: PUSH
17577: LD_INT 3
17579: ST_TO_ADDR
// uc_nation = 3 ;
17580: LD_ADDR_OWVAR 21
17584: PUSH
17585: LD_INT 3
17587: ST_TO_ADDR
// hc_gallery :=  ;
17588: LD_ADDR_OWVAR 33
17592: PUSH
17593: LD_STRING 
17595: ST_TO_ADDR
// hc_name :=  ;
17596: LD_ADDR_OWVAR 26
17600: PUSH
17601: LD_STRING 
17603: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17604: LD_INT 0
17606: PPUSH
17607: LD_EXP 34
17611: PPUSH
17612: LD_EXP 35
17616: PPUSH
17617: CALL_OW 12
17621: PPUSH
17622: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17626: CALL_OW 44
17630: PPUSH
17631: LD_INT 21
17633: PPUSH
17634: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 255
17647: PUSH
17648: LD_INT 3
17650: EQUAL
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 264
17661: PUSH
17662: LD_INT 52
17664: EQUAL
17665: AND
17666: PUSH
17667: LD_INT 21
17669: PPUSH
17670: CALL_OW 302
17674: AND
17675: PUSH
17676: LD_INT 21
17678: PPUSH
17679: CALL_OW 255
17683: PUSH
17684: LD_INT 3
17686: EQUAL
17687: AND
17688: IFFALSE 17709
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17690: LD_INT 21
17692: PPUSH
17693: LD_INT 22
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_INT 52
17704: PPUSH
17705: CALL_OW 125
// end ;
17709: PPOPN 1
17711: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17712: LD_INT 0
17714: PPUSH
17715: PPUSH
17716: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 264
17726: PUSH
17727: LD_INT 51
17729: EQUAL
17730: PUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 255
17740: PUSH
17741: LD_INT 3
17743: EQUAL
17744: AND
17745: IFFALSE 17807
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17747: LD_ADDR_VAR 0 5
17751: PUSH
17752: LD_INT 2
17754: PPUSH
17755: CALL_OW 274
17759: PPUSH
17760: LD_INT 1
17762: PPUSH
17763: CALL_OW 275
17767: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17768: LD_INT 2
17770: PPUSH
17771: CALL_OW 274
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: LD_VAR 0 5
17783: PUSH
17784: LD_INT 100
17786: MINUS
17787: PPUSH
17788: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17792: LD_VAR 0 1
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: LD_INT 100
17802: PPUSH
17803: CALL_OW 291
// end ; if building = rufabsupp then
17807: LD_VAR 0 2
17811: PUSH
17812: LD_INT 17
17814: EQUAL
17815: IFFALSE 17829
// SetSide ( vehicle , 6 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 6
17824: PPUSH
17825: CALL_OW 235
// end ;
17829: PPOPN 5
17831: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17832: LD_VAR 0 1
17836: PPUSH
17837: CALL_OW 255
17841: PUSH
17842: LD_INT 3
17844: EQUAL
17845: IFFALSE 17876
// begin tamedApemans = tamedApemans + 1 ;
17847: LD_ADDR_EXP 32
17851: PUSH
17852: LD_EXP 32
17856: PUSH
17857: LD_INT 1
17859: PLUS
17860: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17861: LD_VAR 0 1
17865: PPUSH
17866: LD_INT 106
17868: PPUSH
17869: LD_INT 85
17871: PPUSH
17872: CALL_OW 111
// end ; end ;
17876: PPOPN 2
17878: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17879: LD_INT 0
17881: PPUSH
17882: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 255
17892: PUSH
17893: LD_INT 3
17895: EQUAL
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 247
17906: PUSH
17907: LD_INT 2
17909: EQUAL
17910: AND
17911: IFFALSE 18020
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 264
17922: PUSH
17923: LD_INT 42
17925: EQUAL
17926: PUSH
17927: LD_VAR 0 1
17931: PPUSH
17932: CALL_OW 264
17936: PUSH
17937: LD_INT 43
17939: EQUAL
17940: OR
17941: PUSH
17942: LD_VAR 0 1
17946: PPUSH
17947: CALL_OW 264
17951: PUSH
17952: LD_INT 44
17954: EQUAL
17955: OR
17956: PUSH
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 264
17966: PUSH
17967: LD_INT 46
17969: EQUAL
17970: OR
17971: IFFALSE 18020
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17973: LD_INT 21
17975: PPUSH
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 265
17985: PPUSH
17986: LD_VAR 0 1
17990: PPUSH
17991: CALL_OW 262
17995: PPUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 263
18005: PPUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 264
18015: PPUSH
18016: CALL_OW 185
// end ;
18020: PPOPN 3
18022: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 255
18032: PUSH
18033: LD_INT 3
18035: EQUAL
18036: PUSH
18037: LD_VAR 0 2
18041: PPUSH
18042: CALL_OW 255
18046: PUSH
18047: LD_INT 3
18049: EQUAL
18050: AND
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 302
18061: AND
18062: IFFALSE 18104
// begin ComRepairVehicle ( human , vehicle ) ;
18064: LD_VAR 0 2
18068: PPUSH
18069: LD_VAR 0 1
18073: PPUSH
18074: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18078: LD_VAR 0 2
18082: PPUSH
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18092: LD_VAR 0 1
18096: PPUSH
18097: LD_INT 100
18099: PPUSH
18100: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL_OW 255
18113: PUSH
18114: LD_INT 3
18116: EQUAL
18117: PUSH
18118: LD_VAR 0 2
18122: PPUSH
18123: CALL_OW 255
18127: PUSH
18128: LD_INT 3
18130: EQUAL
18131: AND
18132: PUSH
18133: LD_INT 21
18135: PPUSH
18136: CALL_OW 302
18140: AND
18141: PUSH
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 302
18151: NOT
18152: AND
18153: IFFALSE 18167
// ComEnterUnit ( human , rufab ) ;
18155: LD_VAR 0 2
18159: PPUSH
18160: LD_INT 21
18162: PPUSH
18163: CALL_OW 120
// end ;
18167: PPOPN 2
18169: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 21
18177: EQUAL
18178: PUSH
18179: LD_VAR 0 2
18183: PPUSH
18184: CALL_OW 255
18188: PUSH
18189: LD_INT 3
18191: EQUAL
18192: AND
18193: IFFALSE 18207
// SetLives ( human , 1000 ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_INT 1000
18202: PPUSH
18203: CALL_OW 234
// end ; end_of_file
18207: PPOPN 2
18209: END
// every 0 0$30 trigger cratesStatus = 1 do
18210: LD_EXP 38
18214: PUSH
18215: LD_INT 1
18217: EQUAL
18218: IFFALSE 18301
18220: GO 18222
18222: DISABLE
// begin enable ;
18223: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18224: LD_INT 350
18226: PUSH
18227: LD_INT 1050
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: PPUSH
18237: LD_INT 2
18239: PPUSH
18240: CALL_OW 12
18244: ARRAY
18245: PPUSH
18246: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18250: LD_INT 4
18252: PUSH
18253: LD_INT 5
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: PPUSH
18263: LD_INT 2
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: PPUSH
18272: LD_INT 6
18274: PUSH
18275: LD_INT 7
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_INT 2
18287: PPUSH
18288: CALL_OW 12
18292: ARRAY
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: CALL_OW 55
// end ;
18301: END
// every 1 1$0 trigger cratesStatus = 2 do
18302: LD_EXP 38
18306: PUSH
18307: LD_INT 2
18309: EQUAL
18310: IFFALSE 18393
18312: GO 18314
18314: DISABLE
// begin enable ;
18315: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18316: LD_INT 3150
18318: PUSH
18319: LD_INT 4550
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: PPUSH
18329: LD_INT 2
18331: PPUSH
18332: CALL_OW 12
18336: ARRAY
18337: PPUSH
18338: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18342: LD_INT 2
18344: PUSH
18345: LD_INT 5
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 1
18354: PPUSH
18355: LD_INT 2
18357: PPUSH
18358: CALL_OW 12
18362: ARRAY
18363: PPUSH
18364: LD_INT 6
18366: PUSH
18367: LD_INT 7
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 1
18376: PPUSH
18377: LD_INT 2
18379: PPUSH
18380: CALL_OW 12
18384: ARRAY
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 55
// end ;
18393: END
// every 0 0$30 + 0 0$10 do
18394: GO 18396
18396: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18397: LD_INT 4
18399: PUSH
18400: LD_INT 5
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_INT 2
18412: PPUSH
18413: CALL_OW 12
18417: ARRAY
18418: PPUSH
18419: LD_INT 7
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 55
// Wait ( 0 0$15 ) ;
18429: LD_INT 525
18431: PPUSH
18432: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18436: LD_INT 4
18438: PUSH
18439: LD_INT 5
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 1
18448: PPUSH
18449: LD_INT 2
18451: PPUSH
18452: CALL_OW 12
18456: ARRAY
18457: PPUSH
18458: LD_INT 7
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 55
// Wait ( 0 0$20 ) ;
18468: LD_INT 700
18470: PPUSH
18471: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18475: LD_INT 4
18477: PUSH
18478: LD_INT 5
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 1
18487: PPUSH
18488: LD_INT 2
18490: PPUSH
18491: CALL_OW 12
18495: ARRAY
18496: PPUSH
18497: LD_INT 7
18499: PPUSH
18500: LD_INT 1
18502: PPUSH
18503: CALL_OW 55
// end ; end_of_file
18507: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18508: LD_EXP 24
18512: PUSH
18513: LD_INT 1
18515: EQUAL
18516: IFFALSE 18817
18518: GO 18520
18520: DISABLE
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18526: LD_ADDR_VAR 0 2
18530: PUSH
18531: LD_INT 22
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 21
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 2
18553: PUSH
18554: LD_INT 30
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 30
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PPUSH
18584: CALL_OW 69
18588: ST_TO_ADDR
// for i in tmp do
18589: LD_ADDR_VAR 0 1
18593: PUSH
18594: LD_VAR 0 2
18598: PUSH
18599: FOR_IN
18600: IFFALSE 18633
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: LD_VAR 0 3
18611: PUSH
18612: LD_VAR 0 1
18616: PPUSH
18617: CALL_OW 274
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 275
18629: PLUS
18630: ST_TO_ADDR
18631: GO 18599
18633: POP
18634: POP
// strings = [ ] ;
18635: LD_ADDR_EXP 27
18639: PUSH
18640: EMPTY
18641: ST_TO_ADDR
// if tmp = 0 then
18642: LD_VAR 0 2
18646: PUSH
18647: LD_INT 0
18649: EQUAL
18650: IFFALSE 18675
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18652: LD_ADDR_EXP 27
18656: PUSH
18657: LD_EXP 27
18661: PUSH
18662: LD_STRING #Am06-1
18664: PUSH
18665: LD_EXP 25
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: ADD
18674: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 0
18682: GREATER
18683: PUSH
18684: LD_EXP 25
18688: PUSH
18689: LD_VAR 0 3
18693: GREATER
18694: AND
18695: IFFALSE 18726
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18697: LD_ADDR_EXP 27
18701: PUSH
18702: LD_EXP 27
18706: PUSH
18707: LD_STRING #Am06-1
18709: PUSH
18710: LD_EXP 25
18714: PUSH
18715: LD_VAR 0 3
18719: MINUS
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: ADD
18725: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18726: LD_VAR 0 2
18730: PUSH
18731: LD_INT 0
18733: GREATER
18734: PUSH
18735: LD_EXP 25
18739: PUSH
18740: LD_VAR 0 3
18744: LESSEQUAL
18745: AND
18746: IFFALSE 18769
// strings = strings ^ [ #Am06-1 , 0 ] ;
18748: LD_ADDR_EXP 27
18752: PUSH
18753: LD_EXP 27
18757: PUSH
18758: LD_STRING #Am06-1
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: ADD
18768: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18769: LD_ADDR_EXP 26
18773: PUSH
18774: LD_EXP 26
18778: PUSH
18779: LD_INT 35
18781: MINUS
18782: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18783: LD_ADDR_EXP 27
18787: PUSH
18788: LD_EXP 27
18792: PUSH
18793: LD_STRING #Am06-2
18795: PUSH
18796: LD_EXP 26
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: ADD
18805: ST_TO_ADDR
// display_strings = strings ;
18806: LD_ADDR_OWVAR 47
18810: PUSH
18811: LD_EXP 27
18815: ST_TO_ADDR
// enable ;
18816: ENABLE
// end ; end_of_file
18817: PPOPN 3
18819: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18829: LD_ADDR_VAR 0 3
18833: PUSH
18834: LD_INT 22
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: LD_INT 30
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 30
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 69
18880: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18881: LD_INT 35
18883: PPUSH
18884: CALL_OW 67
// until depot ;
18888: LD_VAR 0 3
18892: IFFALSE 18829
// repeat wait ( 0 0$1 ) ;
18894: LD_INT 35
18896: PPUSH
18897: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
18901: LD_ADDR_VAR 0 4
18905: PUSH
18906: LD_INT 22
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 91
18918: PUSH
18919: LD_VAR 0 3
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: PUSH
18928: LD_INT 15
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 21
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 2
18948: PUSH
18949: LD_INT 25
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 25
18961: PUSH
18962: LD_INT 2
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 25
18971: PUSH
18972: LD_INT 3
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 25
18981: PUSH
18982: LD_INT 4
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 3
18998: PUSH
18999: LD_INT 54
19001: PUSH
19002: EMPTY
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: LD_INT 55
19014: PUSH
19015: EMPTY
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: PUSH
19035: LD_EXP 2
19039: PUSH
19040: LD_EXP 3
19044: PUSH
19045: LD_EXP 4
19049: PUSH
19050: LD_EXP 5
19054: PUSH
19055: LD_EXP 7
19059: PUSH
19060: LD_EXP 8
19064: PUSH
19065: LD_EXP 9
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: PUSH
19079: LD_EXP 46
19083: ADD
19084: DIFF
19085: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19086: LD_VAR 0 4
19090: PUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 463
19098: NOT
19099: AND
19100: IFFALSE 18894
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19102: LD_ADDR_VAR 0 4
19106: PUSH
19107: LD_VAR 0 4
19111: PUSH
19112: LD_INT 1
19114: PPUSH
19115: LD_VAR 0 4
19119: PPUSH
19120: CALL_OW 12
19124: ARRAY
19125: ST_TO_ADDR
// blockSpawn = 1 ;
19126: LD_ADDR_EXP 29
19130: PUSH
19131: LD_INT 1
19133: ST_TO_ADDR
// uc_side = 2 ;
19134: LD_ADDR_OWVAR 20
19138: PUSH
19139: LD_INT 2
19141: ST_TO_ADDR
// uc_nation = 2 ;
19142: LD_ADDR_OWVAR 21
19146: PUSH
19147: LD_INT 2
19149: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19150: LD_ADDR_EXP 19
19154: PUSH
19155: LD_STRING Kurt
19157: PPUSH
19158: LD_INT 0
19160: PPUSH
19161: CALL 5600 0 2
19165: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19166: LD_EXP 19
19170: PPUSH
19171: LD_VAR 0 4
19175: PPUSH
19176: CALL_OW 250
19180: PPUSH
19181: LD_VAR 0 4
19185: PPUSH
19186: CALL_OW 251
19190: PPUSH
19191: LD_INT 5
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 50
// InGameOn ;
19201: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19205: LD_EXP 19
19209: PPUSH
19210: CALL_OW 87
// wait ( 0 0$2 ) ;
19214: LD_INT 70
19216: PPUSH
19217: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19221: LD_EXP 19
19225: PPUSH
19226: LD_VAR 0 4
19230: PPUSH
19231: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19235: LD_VAR 0 4
19239: PPUSH
19240: LD_EXP 19
19244: PPUSH
19245: CALL_OW 112
// wait ( 0 0$1 ) ;
19249: LD_INT 35
19251: PPUSH
19252: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_EXP 19
19265: PPUSH
19266: CALL_OW 119
// DialogueOn ;
19270: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19274: LD_EXP 19
19278: PPUSH
19279: LD_STRING D2-Kurt-1
19281: PPUSH
19282: CALL_OW 88
// if tmp = JMM then
19286: LD_VAR 0 4
19290: PUSH
19291: LD_EXP 1
19295: EQUAL
19296: IFFALSE 19388
// begin Say ( JMM , D2-JMM-1 ) ;
19298: LD_EXP 1
19302: PPUSH
19303: LD_STRING D2-JMM-1
19305: PPUSH
19306: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19310: LD_EXP 19
19314: PPUSH
19315: LD_STRING D2-Kurt-2
19317: PPUSH
19318: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19322: LD_EXP 1
19326: PPUSH
19327: LD_STRING D2-JMM-2
19329: PPUSH
19330: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19334: LD_EXP 19
19338: PPUSH
19339: LD_STRING D2-Kurt-3
19341: PPUSH
19342: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19346: LD_EXP 1
19350: PPUSH
19351: LD_STRING D2-JMM-3
19353: PPUSH
19354: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19358: LD_EXP 19
19362: PPUSH
19363: LD_STRING D2-Kurt-4
19365: PPUSH
19366: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19370: LD_EXP 1
19374: PPUSH
19375: LD_STRING D2-JMM-4
19377: PPUSH
19378: CALL_OW 88
// DialogueOff ;
19382: CALL_OW 7
// end else
19386: GO 19698
// begin if GetSex ( tmp ) = 1 then
19388: LD_VAR 0 4
19392: PPUSH
19393: CALL_OW 258
19397: PUSH
19398: LD_INT 1
19400: EQUAL
19401: IFFALSE 19415
// Say ( tmp , D2-Sol1-1 ) ;
19403: LD_VAR 0 4
19407: PPUSH
19408: LD_STRING D2-Sol1-1
19410: PPUSH
19411: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19415: LD_VAR 0 4
19419: PPUSH
19420: CALL_OW 258
19424: PUSH
19425: LD_INT 2
19427: EQUAL
19428: IFFALSE 19442
// Say ( tmp , D2-FSol1-1 ) ;
19430: LD_VAR 0 4
19434: PPUSH
19435: LD_STRING D2-FSol1-1
19437: PPUSH
19438: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19442: LD_EXP 19
19446: PPUSH
19447: LD_STRING D2-Kurt-2
19449: PPUSH
19450: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19454: LD_VAR 0 4
19458: PPUSH
19459: CALL_OW 258
19463: PUSH
19464: LD_INT 1
19466: EQUAL
19467: IFFALSE 19481
// Say ( tmp , D2-Sol1-2 ) ;
19469: LD_VAR 0 4
19473: PPUSH
19474: LD_STRING D2-Sol1-2
19476: PPUSH
19477: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19481: LD_VAR 0 4
19485: PPUSH
19486: CALL_OW 258
19490: PUSH
19491: LD_INT 2
19493: EQUAL
19494: IFFALSE 19508
// Say ( tmp , D2-FSol1-2 ) ;
19496: LD_VAR 0 4
19500: PPUSH
19501: LD_STRING D2-FSol1-2
19503: PPUSH
19504: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19508: LD_EXP 19
19512: PPUSH
19513: LD_STRING D2-Kurt-3
19515: PPUSH
19516: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19520: LD_VAR 0 4
19524: PPUSH
19525: CALL_OW 258
19529: PUSH
19530: LD_INT 1
19532: EQUAL
19533: IFFALSE 19547
// Say ( tmp , D2-Sol1-3 ) ;
19535: LD_VAR 0 4
19539: PPUSH
19540: LD_STRING D2-Sol1-3
19542: PPUSH
19543: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19547: LD_VAR 0 4
19551: PPUSH
19552: CALL_OW 258
19556: PUSH
19557: LD_INT 2
19559: EQUAL
19560: IFFALSE 19574
// Say ( tmp , D2-FSol1-3 ) ;
19562: LD_VAR 0 4
19566: PPUSH
19567: LD_STRING D2-FSol1-3
19569: PPUSH
19570: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19574: LD_EXP 19
19578: PPUSH
19579: LD_STRING D2-Kurt-4
19581: PPUSH
19582: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19586: LD_VAR 0 4
19590: PPUSH
19591: CALL_OW 258
19595: PUSH
19596: LD_INT 1
19598: EQUAL
19599: IFFALSE 19613
// Say ( tmp , D2-Sol1-4 ) ;
19601: LD_VAR 0 4
19605: PPUSH
19606: LD_STRING D2-Sol1-4
19608: PPUSH
19609: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19613: LD_VAR 0 4
19617: PPUSH
19618: CALL_OW 258
19622: PUSH
19623: LD_INT 2
19625: EQUAL
19626: IFFALSE 19640
// Say ( tmp , D2-FSol1-4 ) ;
19628: LD_VAR 0 4
19632: PPUSH
19633: LD_STRING D2-FSol1-4
19635: PPUSH
19636: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19640: LD_VAR 0 4
19644: PPUSH
19645: CALL_OW 258
19649: PUSH
19650: LD_INT 1
19652: EQUAL
19653: IFFALSE 19667
// Say ( tmp , D2-Sol1-5 ) ;
19655: LD_VAR 0 4
19659: PPUSH
19660: LD_STRING D2-Sol1-5
19662: PPUSH
19663: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19667: LD_VAR 0 4
19671: PPUSH
19672: CALL_OW 258
19676: PUSH
19677: LD_INT 2
19679: EQUAL
19680: IFFALSE 19694
// Say ( tmp , D2-FSol1-5 ) ;
19682: LD_VAR 0 4
19686: PPUSH
19687: LD_STRING D2-FSol1-5
19689: PPUSH
19690: CALL_OW 88
// DialogueOff ;
19694: CALL_OW 7
// end ; dec = ShowQuery1 ;
19698: LD_ADDR_VAR 0 6
19702: PUSH
19703: CALL 6202 0 0
19707: ST_TO_ADDR
// if dec = 1 then
19708: LD_VAR 0 6
19712: PUSH
19713: LD_INT 1
19715: EQUAL
19716: IFFALSE 19758
// begin DialogueOn ;
19718: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19722: LD_EXP 19
19726: PPUSH
19727: LD_STRING D2a-Kurt-1
19729: PPUSH
19730: CALL_OW 88
// DialogueOff ;
19734: CALL_OW 7
// InGameOff ;
19738: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 2
19747: PPUSH
19748: LD_INT 2
19750: PPUSH
19751: LD_INT 1
19753: PPUSH
19754: CALL_OW 80
// end ; if dec = 2 then
19758: LD_VAR 0 6
19762: PUSH
19763: LD_INT 2
19765: EQUAL
19766: IFFALSE 20266
// begin DialogueOn ;
19768: CALL_OW 6
// if tmp = JMM then
19772: LD_VAR 0 4
19776: PUSH
19777: LD_EXP 1
19781: EQUAL
19782: IFFALSE 19838
// begin Say ( JMM , D2b-JMM-1 ) ;
19784: LD_EXP 1
19788: PPUSH
19789: LD_STRING D2b-JMM-1
19791: PPUSH
19792: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19796: LD_EXP 19
19800: PPUSH
19801: LD_STRING D2b-Kurt-1
19803: PPUSH
19804: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
19808: LD_EXP 1
19812: PPUSH
19813: LD_STRING D2b-JMM-2
19815: PPUSH
19816: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19820: LD_EXP 19
19824: PPUSH
19825: LD_STRING D2b-Kurt-2
19827: PPUSH
19828: CALL_OW 88
// DialogueOff ;
19832: CALL_OW 7
// end else
19836: GO 20028
// begin if GetSex ( tmp ) = 1 then
19838: LD_VAR 0 4
19842: PPUSH
19843: CALL_OW 258
19847: PUSH
19848: LD_INT 1
19850: EQUAL
19851: IFFALSE 19865
// Say ( tmp , D2b-Sol1-1 ) ;
19853: LD_VAR 0 4
19857: PPUSH
19858: LD_STRING D2b-Sol1-1
19860: PPUSH
19861: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19865: LD_VAR 0 4
19869: PPUSH
19870: CALL_OW 258
19874: PUSH
19875: LD_INT 2
19877: EQUAL
19878: IFFALSE 19892
// Say ( tmp , D2b-FSol1-1 ) ;
19880: LD_VAR 0 4
19884: PPUSH
19885: LD_STRING D2b-FSol1-1
19887: PPUSH
19888: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19892: LD_EXP 19
19896: PPUSH
19897: LD_STRING D2b-Kurt-1
19899: PPUSH
19900: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19904: LD_VAR 0 4
19908: PPUSH
19909: CALL_OW 258
19913: PUSH
19914: LD_INT 1
19916: EQUAL
19917: IFFALSE 19931
// Say ( tmp , D2b-Sol1-2 ) ;
19919: LD_VAR 0 4
19923: PPUSH
19924: LD_STRING D2b-Sol1-2
19926: PPUSH
19927: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19931: LD_VAR 0 4
19935: PPUSH
19936: CALL_OW 258
19940: PUSH
19941: LD_INT 2
19943: EQUAL
19944: IFFALSE 19958
// Say ( tmp , D2b-FSol1-2 ) ;
19946: LD_VAR 0 4
19950: PPUSH
19951: LD_STRING D2b-FSol1-2
19953: PPUSH
19954: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19958: LD_EXP 19
19962: PPUSH
19963: LD_STRING D2b-Kurt-2
19965: PPUSH
19966: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19970: LD_VAR 0 4
19974: PPUSH
19975: CALL_OW 258
19979: PUSH
19980: LD_INT 1
19982: EQUAL
19983: IFFALSE 19997
// Say ( tmp , D2c-Sol1-2 ) ;
19985: LD_VAR 0 4
19989: PPUSH
19990: LD_STRING D2c-Sol1-2
19992: PPUSH
19993: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19997: LD_VAR 0 4
20001: PPUSH
20002: CALL_OW 258
20006: PUSH
20007: LD_INT 2
20009: EQUAL
20010: IFFALSE 20024
// Say ( tmp , D2c-FSol1-2 ) ;
20012: LD_VAR 0 4
20016: PPUSH
20017: LD_STRING D2c-FSol1-2
20019: PPUSH
20020: CALL_OW 88
// DialogueOff ;
20024: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20028: LD_ADDR_VAR 0 7
20032: PUSH
20033: CALL 6276 0 0
20037: ST_TO_ADDR
// if dec2 = 1 then
20038: LD_VAR 0 7
20042: PUSH
20043: LD_INT 1
20045: EQUAL
20046: IFFALSE 20088
// begin DialogueOn ;
20048: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20052: LD_EXP 19
20056: PPUSH
20057: LD_STRING D2a-Kurt-1
20059: PPUSH
20060: CALL_OW 88
// DialogueOff ;
20064: CALL_OW 7
// InGameOff ;
20068: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20072: LD_INT 1
20074: PPUSH
20075: LD_INT 2
20077: PPUSH
20078: LD_INT 2
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 80
// end ; if dec2 = 2 then
20088: LD_VAR 0 7
20092: PUSH
20093: LD_INT 2
20095: EQUAL
20096: IFFALSE 20266
// begin if tmp = JMM then
20098: LD_VAR 0 4
20102: PUSH
20103: LD_EXP 1
20107: EQUAL
20108: IFFALSE 20168
// begin DialogueOn ;
20110: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20114: LD_EXP 1
20118: PPUSH
20119: LD_STRING D2c-JMM-1
20121: PPUSH
20122: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20126: LD_EXP 19
20130: PPUSH
20131: LD_STRING D2c-Kurt-1
20133: PPUSH
20134: CALL_OW 88
// DialogueOff ;
20138: CALL_OW 7
// InGameOff ;
20142: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20146: LD_EXP 19
20150: PPUSH
20151: LD_INT 8
20153: PPUSH
20154: CALL_OW 113
// readyToEscape = 1 ;
20158: LD_ADDR_EXP 21
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// end else
20166: GO 20266
// begin DialogueOn ;
20168: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20172: LD_VAR 0 4
20176: PPUSH
20177: CALL_OW 258
20181: PUSH
20182: LD_INT 1
20184: EQUAL
20185: IFFALSE 20199
// Say ( tmp , D2c-Sol1-1 ) ;
20187: LD_VAR 0 4
20191: PPUSH
20192: LD_STRING D2c-Sol1-1
20194: PPUSH
20195: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20199: LD_VAR 0 4
20203: PPUSH
20204: CALL_OW 258
20208: PUSH
20209: LD_INT 2
20211: EQUAL
20212: IFFALSE 20226
// Say ( tmp , D2c-FSol1-1 ) ;
20214: LD_VAR 0 4
20218: PPUSH
20219: LD_STRING D2c-FSol1-1
20221: PPUSH
20222: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20226: LD_EXP 19
20230: PPUSH
20231: LD_STRING D2c-Kurt-1
20233: PPUSH
20234: CALL_OW 88
// DialogueOff ;
20238: CALL_OW 7
// InGameOff ;
20242: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20246: LD_EXP 19
20250: PPUSH
20251: LD_INT 8
20253: PPUSH
20254: CALL_OW 113
// readyToEscape = 1 ;
20258: LD_ADDR_EXP 21
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20266: LD_VAR 0 6
20270: PUSH
20271: LD_INT 3
20273: EQUAL
20274: IFFALSE 20448
// begin DialogueOn ;
20276: CALL_OW 6
// if tmp = JMM then
20280: LD_VAR 0 4
20284: PUSH
20285: LD_EXP 1
20289: EQUAL
20290: IFFALSE 20350
// begin DialogueOn ;
20292: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20296: LD_EXP 1
20300: PPUSH
20301: LD_STRING D2c-JMM-1
20303: PPUSH
20304: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20308: LD_EXP 19
20312: PPUSH
20313: LD_STRING D2c-Kurt-1
20315: PPUSH
20316: CALL_OW 88
// DialogueOff ;
20320: CALL_OW 7
// InGameOff ;
20324: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20328: LD_EXP 19
20332: PPUSH
20333: LD_INT 8
20335: PPUSH
20336: CALL_OW 113
// readyToEscape = 1 ;
20340: LD_ADDR_EXP 21
20344: PUSH
20345: LD_INT 1
20347: ST_TO_ADDR
// end else
20348: GO 20448
// begin DialogueOn ;
20350: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20354: LD_VAR 0 4
20358: PPUSH
20359: CALL_OW 258
20363: PUSH
20364: LD_INT 1
20366: EQUAL
20367: IFFALSE 20381
// Say ( tmp , D2c-Sol1-1 ) ;
20369: LD_VAR 0 4
20373: PPUSH
20374: LD_STRING D2c-Sol1-1
20376: PPUSH
20377: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20381: LD_VAR 0 4
20385: PPUSH
20386: CALL_OW 258
20390: PUSH
20391: LD_INT 2
20393: EQUAL
20394: IFFALSE 20408
// Say ( tmp , D2c-FSol1-1 ) ;
20396: LD_VAR 0 4
20400: PPUSH
20401: LD_STRING D2c-FSol1-1
20403: PPUSH
20404: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20408: LD_EXP 19
20412: PPUSH
20413: LD_STRING D2c-Kurt-1
20415: PPUSH
20416: CALL_OW 88
// DialogueOff ;
20420: CALL_OW 7
// InGameOff ;
20424: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20428: LD_EXP 19
20432: PPUSH
20433: LD_INT 8
20435: PPUSH
20436: CALL_OW 113
// readyToEscape = 1 ;
20440: LD_ADDR_EXP 21
20444: PUSH
20445: LD_INT 1
20447: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20448: LD_ADDR_EXP 29
20452: PUSH
20453: LD_INT 0
20455: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20456: LD_INT 35
20458: PPUSH
20459: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20463: LD_EXP 19
20467: PPUSH
20468: LD_INT 8
20470: PPUSH
20471: CALL_OW 308
20475: PUSH
20476: LD_EXP 21
20480: AND
20481: PUSH
20482: LD_EXP 19
20486: PPUSH
20487: CALL_OW 301
20491: OR
20492: IFFALSE 20456
// if IsDead ( Kurt ) then
20494: LD_EXP 19
20498: PPUSH
20499: CALL_OW 301
20503: IFFALSE 20507
// exit ;
20505: GO 20576
// RemoveUnit ( Kurt ) ;
20507: LD_EXP 19
20511: PPUSH
20512: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20516: LD_EXP 19
20520: PPUSH
20521: LD_STRING Kurt
20523: PPUSH
20524: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20528: LD_INT 1
20530: PPUSH
20531: LD_INT 2
20533: PPUSH
20534: CALL_OW 81
20538: PUSH
20539: LD_INT 0
20541: EQUAL
20542: IFFALSE 20552
// KurtStatus = 1 ;
20544: LD_ADDR_EXP 20
20548: PUSH
20549: LD_INT 1
20551: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20552: LD_INT 1
20554: PPUSH
20555: LD_INT 2
20557: PPUSH
20558: CALL_OW 81
20562: PUSH
20563: LD_INT 2
20565: EQUAL
20566: IFFALSE 20576
// KurtStatus = 2 ;
20568: LD_ADDR_EXP 20
20572: PUSH
20573: LD_INT 2
20575: ST_TO_ADDR
// end ; end_of_file
20576: LD_VAR 0 1
20580: RET
// every 0 0$1 do
20581: GO 20583
20583: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20584: LD_INT 3
20586: PPUSH
20587: LD_INT 32
20589: PPUSH
20590: LD_INT 3
20592: PPUSH
20593: CALL 6331 0 3
20597: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20598: GO 20600
20600: DISABLE
20601: LD_INT 0
20603: PPUSH
// begin enemyWayX = [ ] ;
20604: LD_ADDR_EXP 47
20608: PUSH
20609: EMPTY
20610: ST_TO_ADDR
// enemyWayY = [ ] ;
20611: LD_ADDR_EXP 48
20615: PUSH
20616: EMPTY
20617: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20618: LD_ADDR_VAR 0 1
20622: PUSH
20623: LD_INT 1
20625: PPUSH
20626: LD_INT 2
20628: PPUSH
20629: CALL_OW 12
20633: ST_TO_ADDR
// if rnd = 1 then
20634: LD_VAR 0 1
20638: PUSH
20639: LD_INT 1
20641: EQUAL
20642: IFFALSE 20682
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20644: LD_ADDR_EXP 47
20648: PUSH
20649: LD_INT 93
20651: PUSH
20652: LD_INT 84
20654: PUSH
20655: LD_INT 104
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20663: LD_ADDR_EXP 48
20667: PUSH
20668: LD_INT 51
20670: PUSH
20671: LD_INT 35
20673: PUSH
20674: LD_INT 28
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: ST_TO_ADDR
// end ; if rnd = 2 then
20682: LD_VAR 0 1
20686: PUSH
20687: LD_INT 2
20689: EQUAL
20690: IFFALSE 20746
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20692: LD_ADDR_EXP 47
20696: PUSH
20697: LD_INT 93
20699: PUSH
20700: LD_INT 52
20702: PUSH
20703: LD_INT 34
20705: PUSH
20706: LD_INT 28
20708: PUSH
20709: LD_INT 30
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20719: LD_ADDR_EXP 48
20723: PUSH
20724: LD_INT 51
20726: PUSH
20727: LD_INT 45
20729: PUSH
20730: LD_INT 35
20732: PUSH
20733: LD_INT 26
20735: PUSH
20736: LD_INT 20
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: ST_TO_ADDR
// end ; enable ;
20746: ENABLE
// end ;
20747: PPOPN 1
20749: END
// every 0 0$1 do
20750: GO 20752
20752: DISABLE
// begin enable ;
20753: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20754: LD_INT 3
20756: PPUSH
20757: LD_INT 2
20759: PPUSH
20760: LD_INT 10
20762: PPUSH
20763: LD_EXP 31
20767: PPUSH
20768: CALL 7766 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20772: LD_INT 3
20774: PPUSH
20775: LD_INT 12
20777: PPUSH
20778: LD_EXP 31
20782: PPUSH
20783: CALL 9651 0 3
// if disableHealAI = 0 then
20787: LD_EXP 33
20791: PUSH
20792: LD_INT 0
20794: EQUAL
20795: IFFALSE 20816
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20797: LD_INT 3
20799: PPUSH
20800: LD_INT 9
20802: PPUSH
20803: LD_INT 10
20805: PPUSH
20806: LD_INT 32
20808: PUSH
20809: EMPTY
20810: LIST
20811: PPUSH
20812: CALL 8157 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20816: LD_INT 3
20818: PPUSH
20819: LD_INT 51
20821: PPUSH
20822: LD_INT 6
20824: PPUSH
20825: CALL 8865 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20829: LD_INT 3
20831: PPUSH
20832: LD_INT 12
20834: PPUSH
20835: LD_INT 121
20837: PPUSH
20838: LD_INT 100
20840: PPUSH
20841: CALL 6726 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20845: LD_INT 3
20847: PPUSH
20848: LD_INT 22
20850: PPUSH
20851: LD_EXP 47
20855: PPUSH
20856: LD_EXP 48
20860: PPUSH
20861: CALL 6929 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20865: LD_INT 3
20867: PPUSH
20868: LD_INT 10
20870: PPUSH
20871: CALL 9008 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20875: LD_INT 3
20877: PPUSH
20878: LD_INT 1
20880: PPUSH
20881: CALL 9421 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20885: LD_INT 2
20887: PPUSH
20888: CALL_OW 303
20892: PUSH
20893: LD_INT 2
20895: PPUSH
20896: CALL_OW 255
20900: PUSH
20901: LD_INT 1
20903: EQUAL
20904: OR
20905: IFFALSE 20917
// DefendDepot ( 3 , rudepo ) ;
20907: LD_INT 3
20909: PPUSH
20910: LD_INT 2
20912: PPUSH
20913: CALL 8701 0 2
// end ;
20917: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20918: LD_INT 22
20920: PUSH
20921: LD_INT 3
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 21
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 55
20940: PUSH
20941: EMPTY
20942: LIST
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: LD_INT 34
20949: PUSH
20950: LD_INT 51
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PUSH
20972: LD_INT 0
20974: EQUAL
20975: PUSH
20976: LD_INT 21
20978: PPUSH
20979: CALL_OW 255
20983: PUSH
20984: LD_INT 3
20986: EQUAL
20987: AND
20988: PUSH
20989: LD_INT 21
20991: PPUSH
20992: CALL_OW 302
20996: AND
20997: PUSH
20998: LD_INT 2
21000: PPUSH
21001: CALL_OW 255
21005: PUSH
21006: LD_INT 3
21008: EQUAL
21009: AND
21010: PUSH
21011: LD_INT 2
21013: PPUSH
21014: CALL_OW 302
21018: AND
21019: IFFALSE 21203
21021: GO 21023
21023: DISABLE
// begin enable ;
21024: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21025: LD_INT 2
21027: PPUSH
21028: CALL_OW 274
21032: PPUSH
21033: LD_INT 1
21035: PPUSH
21036: LD_INT 1000
21038: PPUSH
21039: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21043: LD_INT 3
21045: PPUSH
21046: LD_INT 21
21048: PPUSH
21049: LD_INT 5
21051: PUSH
21052: LD_INT 6
21054: PUSH
21055: LD_INT 6
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: PUSH
21063: LD_OWVAR 67
21067: ARRAY
21068: PPUSH
21069: LD_INT 43
21071: PUSH
21072: LD_INT 43
21074: PUSH
21075: LD_INT 44
21077: PUSH
21078: LD_INT 44
21080: PUSH
21081: LD_INT 46
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 43
21093: PUSH
21094: LD_INT 43
21096: PUSH
21097: LD_INT 43
21099: PUSH
21100: LD_INT 44
21102: PUSH
21103: LD_INT 44
21105: PUSH
21106: LD_INT 46
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 43
21119: PUSH
21120: LD_INT 43
21122: PUSH
21123: LD_INT 43
21125: PUSH
21126: LD_INT 44
21128: PUSH
21129: LD_INT 44
21131: PUSH
21132: LD_INT 46
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_OWVAR 67
21152: ARRAY
21153: PPUSH
21154: LD_INT 1
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 22
21165: PUSH
21166: LD_INT 24
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PPUSH
21176: LD_INT 2
21178: PPUSH
21179: CALL_OW 12
21183: ARRAY
21184: PUSH
21185: LD_INT 24
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: PUSH
21193: LD_OWVAR 67
21197: ARRAY
21198: PPUSH
21199: CALL 6572 0 7
// end ;
21203: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21204: LD_INT 17
21206: PPUSH
21207: CALL_OW 255
21211: PUSH
21212: LD_INT 3
21214: EQUAL
21215: PUSH
21216: LD_INT 17
21218: PPUSH
21219: CALL_OW 302
21223: AND
21224: PUSH
21225: LD_INT 2
21227: PPUSH
21228: CALL_OW 255
21232: PUSH
21233: LD_INT 3
21235: EQUAL
21236: AND
21237: PUSH
21238: LD_INT 2
21240: PPUSH
21241: CALL_OW 302
21245: AND
21246: IFFALSE 21313
21248: GO 21250
21250: DISABLE
// begin enable ;
21251: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21252: LD_INT 17
21254: PPUSH
21255: LD_INT 22
21257: PPUSH
21258: LD_INT 1
21260: PPUSH
21261: LD_INT 1
21263: PPUSH
21264: LD_INT 42
21266: PUSH
21267: LD_INT 43
21269: PUSH
21270: LD_INT 44
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: PPUSH
21281: LD_INT 3
21283: PPUSH
21284: CALL_OW 12
21288: ARRAY
21289: PPUSH
21290: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21294: LD_INT 17
21296: PPUSH
21297: LD_INT 22
21299: PPUSH
21300: LD_INT 1
21302: PPUSH
21303: LD_INT 1
21305: PPUSH
21306: LD_INT 51
21308: PPUSH
21309: CALL_OW 185
// end ;
21313: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21314: LD_INT 17
21316: PPUSH
21317: CALL_OW 302
21321: PUSH
21322: LD_INT 17
21324: PPUSH
21325: CALL_OW 255
21329: PUSH
21330: LD_INT 3
21332: EQUAL
21333: AND
21334: PUSH
21335: LD_INT 2
21337: PPUSH
21338: CALL_OW 302
21342: AND
21343: PUSH
21344: LD_INT 2
21346: PPUSH
21347: CALL_OW 255
21351: PUSH
21352: LD_INT 3
21354: EQUAL
21355: AND
21356: PUSH
21357: LD_INT 17
21359: PPUSH
21360: CALL_OW 313
21364: NOT
21365: AND
21366: IFFALSE 21460
21368: GO 21370
21370: DISABLE
21371: LD_INT 0
21373: PPUSH
// begin for i = 1 to 6 do
21374: LD_ADDR_VAR 0 1
21378: PUSH
21379: DOUBLE
21380: LD_INT 1
21382: DEC
21383: ST_TO_ADDR
21384: LD_INT 6
21386: PUSH
21387: FOR_TO
21388: IFFALSE 21458
// begin uc_side = 3 ;
21390: LD_ADDR_OWVAR 20
21394: PUSH
21395: LD_INT 3
21397: ST_TO_ADDR
// uc_nation = 3 ;
21398: LD_ADDR_OWVAR 21
21402: PUSH
21403: LD_INT 3
21405: ST_TO_ADDR
// hc_gallery :=  ;
21406: LD_ADDR_OWVAR 33
21410: PUSH
21411: LD_STRING 
21413: ST_TO_ADDR
// hc_name :=  ;
21414: LD_ADDR_OWVAR 26
21418: PUSH
21419: LD_STRING 
21421: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21422: LD_INT 0
21424: PPUSH
21425: LD_EXP 34
21429: PPUSH
21430: LD_EXP 35
21434: PPUSH
21435: CALL_OW 12
21439: PPUSH
21440: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21444: CALL_OW 44
21448: PPUSH
21449: LD_INT 17
21451: PPUSH
21452: CALL_OW 52
// end ;
21456: GO 21387
21458: POP
21459: POP
// end ;
21460: PPOPN 1
21462: END
// every 2 2$0 do var i , j ;
21463: GO 21465
21465: DISABLE
21466: LD_INT 0
21468: PPUSH
21469: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21470: LD_INT 14700
21472: PUSH
21473: LD_INT 33600
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_INT 2
21485: PPUSH
21486: CALL_OW 12
21490: ARRAY
21491: PPUSH
21492: CALL_OW 67
// disableHealAI = 1 ;
21496: LD_ADDR_EXP 33
21500: PUSH
21501: LD_INT 1
21503: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21504: LD_ADDR_VAR 0 1
21508: PUSH
21509: LD_INT 22
21511: PUSH
21512: LD_INT 3
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 25
21521: PUSH
21522: LD_INT 4
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PPUSH
21533: CALL_OW 69
21537: PUSH
21538: FOR_IN
21539: IFFALSE 21552
// ComExitBuilding ( i ) ;
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 122
21550: GO 21538
21552: POP
21553: POP
// wait ( 0 0$1 ) ;
21554: LD_INT 35
21556: PPUSH
21557: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21561: LD_INT 35
21563: PPUSH
21564: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21568: LD_ADDR_VAR 0 1
21572: PUSH
21573: LD_INT 22
21575: PUSH
21576: LD_INT 3
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 25
21585: PUSH
21586: LD_INT 4
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 69
21601: PUSH
21602: FOR_IN
21603: IFFALSE 21680
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21605: LD_ADDR_VAR 0 2
21609: PUSH
21610: LD_INT 17
21612: PPUSH
21613: LD_INT 22
21615: PUSH
21616: LD_INT 0
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 25
21625: PUSH
21626: LD_INT 12
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PPUSH
21637: CALL_OW 70
21641: PUSH
21642: FOR_IN
21643: IFFALSE 21676
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21645: LD_VAR 0 1
21649: PPUSH
21650: LD_VAR 0 2
21654: PPUSH
21655: CALL_OW 250
21659: PPUSH
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 251
21669: PPUSH
21670: CALL_OW 191
// end ;
21674: GO 21642
21676: POP
21677: POP
// end ;
21678: GO 21602
21680: POP
21681: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21682: LD_INT 22
21684: PUSH
21685: LD_INT 3
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 25
21694: PUSH
21695: LD_INT 4
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PPUSH
21706: CALL_OW 69
21710: PUSH
21711: LD_INT 0
21713: EQUAL
21714: PUSH
21715: LD_EXP 32
21719: PUSH
21720: LD_INT 6
21722: PUSH
21723: LD_INT 7
21725: PUSH
21726: LD_INT 8
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: PUSH
21734: LD_OWVAR 67
21738: ARRAY
21739: GREATEREQUAL
21740: OR
21741: PUSH
21742: LD_INT 17
21744: PPUSH
21745: LD_INT 22
21747: PUSH
21748: LD_INT 0
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 25
21757: PUSH
21758: LD_INT 12
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PPUSH
21769: CALL_OW 70
21773: PUSH
21774: LD_INT 0
21776: EQUAL
21777: OR
21778: IFFALSE 21561
// disableHealAI = 0 ;
21780: LD_ADDR_EXP 33
21784: PUSH
21785: LD_INT 0
21787: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21788: LD_ADDR_VAR 0 1
21792: PUSH
21793: LD_INT 22
21795: PUSH
21796: LD_INT 3
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 25
21805: PUSH
21806: LD_INT 12
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PPUSH
21817: CALL_OW 69
21821: PUSH
21822: FOR_IN
21823: IFFALSE 21839
// SetClass ( i , 16 ) ;
21825: LD_VAR 0 1
21829: PPUSH
21830: LD_INT 16
21832: PPUSH
21833: CALL_OW 336
21837: GO 21822
21839: POP
21840: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21841: LD_ADDR_VAR 0 1
21845: PUSH
21846: LD_INT 22
21848: PUSH
21849: LD_INT 3
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 25
21858: PUSH
21859: LD_INT 4
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PPUSH
21870: CALL_OW 69
21874: PUSH
21875: FOR_IN
21876: IFFALSE 21895
// ComMoveXY ( i , 113 , 94 ) ;
21878: LD_VAR 0 1
21882: PPUSH
21883: LD_INT 113
21885: PPUSH
21886: LD_INT 94
21888: PPUSH
21889: CALL_OW 111
21893: GO 21875
21895: POP
21896: POP
// end ;
21897: PPOPN 2
21899: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21900: LD_INT 21
21902: PPUSH
21903: CALL_OW 255
21907: PUSH
21908: LD_INT 3
21910: EQUAL
21911: PUSH
21912: LD_INT 21
21914: PPUSH
21915: CALL_OW 302
21919: AND
21920: PUSH
21921: LD_INT 22
21923: PUSH
21924: LD_INT 3
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 34
21933: PUSH
21934: LD_INT 51
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: PUSH
21950: LD_INT 0
21952: EQUAL
21953: AND
21954: IFFALSE 21986
21956: GO 21958
21958: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
21959: LD_INT 21
21961: PPUSH
21962: LD_INT 23
21964: PPUSH
21965: LD_INT 1
21967: PPUSH
21968: LD_INT 1
21970: PPUSH
21971: LD_INT 51
21973: PPUSH
21974: CALL_OW 185
// wait ( 5 5$0 ) ;
21978: LD_INT 10500
21980: PPUSH
21981: CALL_OW 67
// enable ;
21985: ENABLE
// end ; end_of_file
21986: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21987: LD_EXP 26
21991: PUSH
21992: LD_INT 0
21994: LESSEQUAL
21995: IFFALSE 22144
21997: GO 21999
21999: DISABLE
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22005: LD_ADDR_VAR 0 2
22009: PUSH
22010: LD_INT 22
22012: PUSH
22013: LD_INT 1
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 21
22022: PUSH
22023: LD_INT 3
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: LD_INT 30
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 30
22045: PUSH
22046: LD_INT 1
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: ST_TO_ADDR
// for i in tmp do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_VAR 0 2
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22112
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22081: LD_ADDR_VAR 0 3
22085: PUSH
22086: LD_VAR 0 3
22090: PUSH
22091: LD_VAR 0 1
22095: PPUSH
22096: CALL_OW 274
22100: PPUSH
22101: LD_INT 1
22103: PPUSH
22104: CALL_OW 275
22108: PLUS
22109: ST_TO_ADDR
22110: GO 22078
22112: POP
22113: POP
// if yourCrates >= needCrates then
22114: LD_VAR 0 3
22118: PUSH
22119: LD_EXP 25
22123: GREATEREQUAL
22124: IFFALSE 22137
// begin FinishMission ( yourCrates ) ;
22126: LD_VAR 0 3
22130: PPUSH
22131: CALL 22147 0 1
// end else
22135: GO 22144
// begin YouLost ( matmin ) ;
22137: LD_STRING matmin
22139: PPUSH
22140: CALL_OW 104
// end ; end ;
22144: PPOPN 3
22146: END
// export function FinishMission ( crates ) ; begin
22147: LD_INT 0
22149: PPUSH
// if crates + 100 > crates then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 100
22157: PLUS
22158: PUSH
22159: LD_VAR 0 1
22163: GREATER
22164: IFFALSE 22188
// begin AddMedal ( cans , 1 ) ;
22166: LD_STRING cans
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22176: LD_INT 1
22178: PPUSH
22179: LD_STRING 06_crates_1
22181: PPUSH
22182: CALL_OW 39
// end else
22186: GO 22209
// begin AddMedal ( cans , - 1 ) ;
22188: LD_STRING cans
22190: PPUSH
22191: LD_INT 1
22193: NEG
22194: PPUSH
22195: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22199: LD_INT 0
22201: PPUSH
22202: LD_STRING 06_crates_1
22204: PPUSH
22205: CALL_OW 39
// end ; if unitLost < 3 then
22209: LD_EXP 30
22213: PUSH
22214: LD_INT 3
22216: LESS
22217: IFFALSE 22231
// begin AddMedal ( people , 1 ) ;
22219: LD_STRING people
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 101
// end else
22229: GO 22242
// begin AddMedal ( people , - 1 ) ;
22231: LD_STRING people
22233: PPUSH
22234: LD_INT 1
22236: NEG
22237: PPUSH
22238: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22242: LD_EXP 28
22246: PPUSH
22247: LD_STRING 06_remoteVehs_1
22249: PPUSH
22250: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22254: LD_EXP 28
22258: PUSH
22259: LD_INT 1
22261: EQUAL
22262: IFFALSE 22276
// begin AddMedal ( remote , 1 ) ;
22264: LD_STRING remote
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 101
// end else
22274: GO 22316
// begin if GetTech ( 18 , 1 ) = state_enabled then
22276: LD_INT 18
22278: PPUSH
22279: LD_INT 1
22281: PPUSH
22282: CALL_OW 321
22286: PUSH
22287: LD_INT 1
22289: EQUAL
22290: IFFALSE 22305
// begin AddMedal ( remote , - 1 ) ;
22292: LD_STRING remote
22294: PPUSH
22295: LD_INT 1
22297: NEG
22298: PPUSH
22299: CALL_OW 101
// end else
22303: GO 22316
// begin AddMedal ( remote , - 2 ) ;
22305: LD_STRING remote
22307: PPUSH
22308: LD_INT 2
22310: NEG
22311: PPUSH
22312: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22316: LD_EXP 20
22320: PPUSH
22321: LD_STRING 06_KurtStatus_1
22323: PPUSH
22324: CALL_OW 39
// GiveMedals ( Main ) ;
22328: LD_STRING Main
22330: PPUSH
22331: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22335: LD_INT 22
22337: PUSH
22338: LD_INT 1
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 50
22357: PUSH
22358: EMPTY
22359: LIST
22360: PUSH
22361: LD_INT 2
22363: PUSH
22364: LD_INT 25
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 25
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 25
22386: PUSH
22387: LD_INT 3
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 25
22396: PUSH
22397: LD_INT 4
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: PPUSH
22417: CALL_OW 69
22421: PPUSH
22422: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22426: LD_EXP 1
22430: PPUSH
22431: LD_EXP 43
22435: PUSH
22436: LD_STRING JMM
22438: STR
22439: PPUSH
22440: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22444: LD_EXP 2
22448: PPUSH
22449: LD_EXP 43
22453: PUSH
22454: LD_STRING Lisa
22456: STR
22457: PPUSH
22458: CALL 5819 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22462: LD_EXP 3
22466: PPUSH
22467: LD_EXP 43
22471: PUSH
22472: LD_STRING Bobby
22474: STR
22475: PPUSH
22476: CALL 5819 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22480: LD_EXP 4
22484: PPUSH
22485: LD_EXP 43
22489: PUSH
22490: LD_STRING Cyrus
22492: STR
22493: PPUSH
22494: CALL 5819 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22498: LD_EXP 5
22502: PPUSH
22503: LD_EXP 43
22507: PUSH
22508: LD_STRING Frank
22510: STR
22511: PPUSH
22512: CALL 5819 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22516: LD_EXP 6
22520: PPUSH
22521: LD_EXP 43
22525: PUSH
22526: LD_STRING Brown
22528: STR
22529: PPUSH
22530: CALL 5819 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22534: LD_EXP 7
22538: PPUSH
22539: LD_EXP 43
22543: PUSH
22544: LD_STRING Donaldson
22546: STR
22547: PPUSH
22548: CALL 5819 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22552: LD_EXP 8
22556: PPUSH
22557: LD_EXP 43
22561: PUSH
22562: LD_STRING Gladstone
22564: STR
22565: PPUSH
22566: CALL 5819 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22570: LD_EXP 9
22574: PPUSH
22575: LD_EXP 43
22579: PUSH
22580: LD_STRING Denis
22582: STR
22583: PPUSH
22584: CALL 5819 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22588: LD_EXP 15
22592: PPUSH
22593: LD_EXP 43
22597: PUSH
22598: LD_STRING Joan
22600: STR
22601: PPUSH
22602: CALL 5819 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22606: LD_EXP 16
22610: PPUSH
22611: LD_STRING 06_JoanStatus_1
22613: PPUSH
22614: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22618: LD_INT 50
22620: PUSH
22621: EMPTY
22622: LIST
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 21
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 2
22646: PUSH
22647: LD_INT 25
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 25
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 25
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 25
22679: PUSH
22680: LD_INT 4
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: PPUSH
22700: CALL_OW 69
22704: PUSH
22705: LD_EXP 1
22709: PUSH
22710: LD_EXP 2
22714: PUSH
22715: LD_EXP 3
22719: PUSH
22720: LD_EXP 4
22724: PUSH
22725: LD_EXP 5
22729: PUSH
22730: LD_EXP 6
22734: PUSH
22735: LD_EXP 7
22739: PUSH
22740: LD_EXP 8
22744: PUSH
22745: LD_EXP 9
22749: PUSH
22750: LD_EXP 15
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: DIFF
22767: PPUSH
22768: LD_STRING 06_other_survivors
22770: PPUSH
22771: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22775: LD_INT 50
22777: PUSH
22778: EMPTY
22779: LIST
22780: PUSH
22781: LD_INT 22
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 21
22793: PUSH
22794: LD_INT 1
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 2
22803: PUSH
22804: LD_INT 25
22806: PUSH
22807: LD_INT 12
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 25
22816: PUSH
22817: LD_INT 16
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 69
22839: PPUSH
22840: LD_STRING 06_other_apemans
22842: PPUSH
22843: CALL_OW 38
// YouWin ;
22847: CALL_OW 103
// end ; end_of_file
22851: LD_VAR 0 2
22855: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22856: LD_EXP 39
22860: PUSH
22861: LD_INT 3
22863: EQUAL
22864: IFFALSE 22979
22866: GO 22868
22868: DISABLE
// begin enable ;
22869: ENABLE
// sendedConvoys = 0 ;
22870: LD_ADDR_EXP 39
22874: PUSH
22875: LD_INT 0
22877: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22878: LD_INT 6
22880: PPUSH
22881: LD_INT 3
22883: PPUSH
22884: LD_INT 5
22886: PPUSH
22887: LD_INT 10
22889: PPUSH
22890: CALL_OW 12
22894: PUSH
22895: LD_INT 5
22897: PPUSH
22898: LD_INT 11
22900: PPUSH
22901: CALL_OW 12
22905: PUSH
22906: LD_INT 8
22908: PPUSH
22909: LD_INT 12
22911: PPUSH
22912: CALL_OW 12
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: PUSH
22922: LD_OWVAR 67
22926: ARRAY
22927: PPUSH
22928: LD_INT 0
22930: PPUSH
22931: LD_INT 0
22933: PPUSH
22934: LD_INT 0
22936: PPUSH
22937: LD_INT 0
22939: PPUSH
22940: LD_EXP 34
22944: PPUSH
22945: LD_EXP 35
22949: PPUSH
22950: CALL_OW 12
22954: PPUSH
22955: LD_INT 16
22957: PPUSH
22958: LD_INT 15
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: LD_INT 2
22969: PPUSH
22970: CALL_OW 12
22974: PPUSH
22975: CALL 10249 0 12
// end ; end_of_file
22979: END
// export function PrepareNature ; var i , un ; begin
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
22984: PPUSH
// for i = 1 to Difficulty + 2 do
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: DOUBLE
22991: LD_INT 1
22993: DEC
22994: ST_TO_ADDR
22995: LD_OWVAR 67
22999: PUSH
23000: LD_INT 2
23002: PLUS
23003: PUSH
23004: FOR_TO
23005: IFFALSE 23114
// begin hc_sex = sex_male ;
23007: LD_ADDR_OWVAR 27
23011: PUSH
23012: LD_INT 1
23014: ST_TO_ADDR
// uc_side = 0 ;
23015: LD_ADDR_OWVAR 20
23019: PUSH
23020: LD_INT 0
23022: ST_TO_ADDR
// uc_nation = nation_nature ;
23023: LD_ADDR_OWVAR 21
23027: PUSH
23028: LD_INT 0
23030: ST_TO_ADDR
// hc_class = class_tiger ;
23031: LD_ADDR_OWVAR 28
23035: PUSH
23036: LD_INT 14
23038: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23039: LD_ADDR_OWVAR 31
23043: PUSH
23044: LD_EXP 35
23048: PUSH
23049: LD_INT 0
23051: PUSH
23052: LD_INT 0
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23064: LD_ADDR_OWVAR 35
23068: PUSH
23069: LD_INT 5
23071: NEG
23072: PPUSH
23073: LD_INT 5
23075: PPUSH
23076: CALL_OW 12
23080: PUSH
23081: LD_OWVAR 67
23085: MUL
23086: ST_TO_ADDR
// un = CreateHuman ;
23087: LD_ADDR_VAR 0 3
23091: PUSH
23092: CALL_OW 44
23096: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23097: LD_VAR 0 3
23101: PPUSH
23102: LD_INT 18
23104: PPUSH
23105: LD_INT 0
23107: PPUSH
23108: CALL_OW 49
// end ;
23112: GO 23004
23114: POP
23115: POP
// for i = 1 to rand ( 3 , 4 ) do
23116: LD_ADDR_VAR 0 2
23120: PUSH
23121: DOUBLE
23122: LD_INT 1
23124: DEC
23125: ST_TO_ADDR
23126: LD_INT 3
23128: PPUSH
23129: LD_INT 4
23131: PPUSH
23132: CALL_OW 12
23136: PUSH
23137: FOR_TO
23138: IFFALSE 23232
// begin hc_sex = sex_male ;
23140: LD_ADDR_OWVAR 27
23144: PUSH
23145: LD_INT 1
23147: ST_TO_ADDR
// uc_side = 0 ;
23148: LD_ADDR_OWVAR 20
23152: PUSH
23153: LD_INT 0
23155: ST_TO_ADDR
// uc_nation = nation_nature ;
23156: LD_ADDR_OWVAR 21
23160: PUSH
23161: LD_INT 0
23163: ST_TO_ADDR
// hc_class = 18 ;
23164: LD_ADDR_OWVAR 28
23168: PUSH
23169: LD_INT 18
23171: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23172: LD_ADDR_OWVAR 31
23176: PUSH
23177: LD_EXP 35
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: ST_TO_ADDR
// hc_agressivity = 0 ;
23197: LD_ADDR_OWVAR 35
23201: PUSH
23202: LD_INT 0
23204: ST_TO_ADDR
// un = CreateHuman ;
23205: LD_ADDR_VAR 0 3
23209: PUSH
23210: CALL_OW 44
23214: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23215: LD_VAR 0 3
23219: PPUSH
23220: LD_INT 18
23222: PPUSH
23223: LD_INT 0
23225: PPUSH
23226: CALL_OW 49
// end ;
23230: GO 23137
23232: POP
23233: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23234: LD_ADDR_VAR 0 2
23238: PUSH
23239: DOUBLE
23240: LD_INT 1
23242: DEC
23243: ST_TO_ADDR
23244: LD_INT 1
23246: PPUSH
23247: LD_INT 3
23249: PPUSH
23250: CALL_OW 12
23254: PUSH
23255: LD_OWVAR 67
23259: PLUS
23260: PUSH
23261: FOR_TO
23262: IFFALSE 23411
// begin hc_sex = sex_male ;
23264: LD_ADDR_OWVAR 27
23268: PUSH
23269: LD_INT 1
23271: ST_TO_ADDR
// uc_side = 0 ;
23272: LD_ADDR_OWVAR 20
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
// uc_nation = nation_nature ;
23280: LD_ADDR_OWVAR 21
23284: PUSH
23285: LD_INT 0
23287: ST_TO_ADDR
// hc_class = class_apeman ;
23288: LD_ADDR_OWVAR 28
23292: PUSH
23293: LD_INT 12
23295: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23296: LD_ADDR_OWVAR 31
23300: PUSH
23301: LD_INT 2
23303: PPUSH
23304: LD_INT 5
23306: PPUSH
23307: CALL_OW 12
23311: PUSH
23312: LD_INT 0
23314: PPUSH
23315: LD_INT 2
23317: PPUSH
23318: CALL_OW 12
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23335: LD_ADDR_OWVAR 35
23339: PUSH
23340: LD_INT 20
23342: PPUSH
23343: LD_INT 30
23345: PPUSH
23346: CALL_OW 12
23350: PUSH
23351: LD_INT 30
23353: PPUSH
23354: LD_INT 40
23356: PPUSH
23357: CALL_OW 12
23361: PUSH
23362: LD_INT 40
23364: PPUSH
23365: LD_INT 50
23367: PPUSH
23368: CALL_OW 12
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: PUSH
23378: LD_OWVAR 67
23382: ARRAY
23383: ST_TO_ADDR
// un = CreateHuman ;
23384: LD_ADDR_VAR 0 3
23388: PUSH
23389: CALL_OW 44
23393: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 19
23401: PPUSH
23402: LD_INT 0
23404: PPUSH
23405: CALL_OW 49
// end ;
23409: GO 23261
23411: POP
23412: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23413: LD_ADDR_VAR 0 2
23417: PUSH
23418: DOUBLE
23419: LD_INT 1
23421: DEC
23422: ST_TO_ADDR
23423: LD_INT 5
23425: PPUSH
23426: LD_INT 6
23428: PPUSH
23429: CALL_OW 12
23433: PUSH
23434: LD_OWVAR 67
23438: PLUS
23439: PUSH
23440: FOR_TO
23441: IFFALSE 23549
// begin hc_sex = sex_male ;
23443: LD_ADDR_OWVAR 27
23447: PUSH
23448: LD_INT 1
23450: ST_TO_ADDR
// uc_side = 0 ;
23451: LD_ADDR_OWVAR 20
23455: PUSH
23456: LD_INT 0
23458: ST_TO_ADDR
// uc_nation = nation_nature ;
23459: LD_ADDR_OWVAR 21
23463: PUSH
23464: LD_INT 0
23466: ST_TO_ADDR
// hc_class = class_apeman ;
23467: LD_ADDR_OWVAR 28
23471: PUSH
23472: LD_INT 12
23474: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23475: LD_ADDR_OWVAR 31
23479: PUSH
23480: LD_INT 2
23482: PPUSH
23483: LD_INT 5
23485: PPUSH
23486: CALL_OW 12
23490: PUSH
23491: LD_INT 0
23493: PPUSH
23494: LD_INT 2
23496: PPUSH
23497: CALL_OW 12
23501: PUSH
23502: LD_INT 0
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: ST_TO_ADDR
// hc_agressivity = 0 ;
23514: LD_ADDR_OWVAR 35
23518: PUSH
23519: LD_INT 0
23521: ST_TO_ADDR
// un = CreateHuman ;
23522: LD_ADDR_VAR 0 3
23526: PUSH
23527: CALL_OW 44
23531: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23532: LD_VAR 0 3
23536: PPUSH
23537: LD_INT 20
23539: PPUSH
23540: LD_INT 0
23542: PPUSH
23543: CALL_OW 49
// end ;
23547: GO 23440
23549: POP
23550: POP
// end ; end_of_file
23551: LD_VAR 0 1
23555: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23556: LD_EXP 1
23560: PPUSH
23561: CALL_OW 301
23565: IFFALSE 23577
23567: GO 23569
23569: DISABLE
// YouLost ( JMM ) ;
23570: LD_STRING JMM
23572: PPUSH
23573: CALL_OW 104
23577: END
