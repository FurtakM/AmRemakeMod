// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 22170 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 48
5938: PUSH
5939: LD_INT 49
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 51
5953: PUSH
5954: LD_INT 52
5956: PUSH
5957: LD_INT 69
5959: PUSH
5960: LD_INT 39
5962: PUSH
5963: LD_INT 34
5965: PUSH
5966: LD_INT 40
5968: PUSH
5969: LD_INT 53
5971: PUSH
5972: LD_INT 71
5974: PUSH
5975: LD_INT 57
5977: PUSH
5978: LD_INT 58
5980: PUSH
5981: LD_INT 44
5983: PUSH
5984: LD_INT 32
5986: PUSH
5987: LD_INT 27
5989: PUSH
5990: LD_INT 23
5992: PUSH
5993: LD_INT 33
5995: PUSH
5996: LD_INT 59
5998: PUSH
5999: LD_INT 54
6001: PUSH
6002: LD_INT 55
6004: PUSH
6005: LD_INT 56
6007: PUSH
6008: LD_INT 63
6010: PUSH
6011: LD_INT 64
6013: PUSH
6014: LD_INT 65
6016: PUSH
6017: LD_INT 30
6019: PUSH
6020: LD_INT 31
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6066: LD_ADDR_VAR 0 5
6070: PUSH
6071: DOUBLE
6072: LD_INT 1
6074: DEC
6075: ST_TO_ADDR
6076: LD_VAR 0 8
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6158
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6084: LD_VAR 0 8
6088: PUSH
6089: LD_VAR 0 5
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 321
6104: PUSH
6105: LD_INT 1
6107: EQUAL
6108: PUSH
6109: LD_VAR 0 8
6113: PUSH
6114: LD_VAR 0 5
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 3
6124: PPUSH
6125: CALL_OW 482
6129: PUSH
6130: LD_INT 1
6132: EQUAL
6133: AND
6134: IFFALSE 6156
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6136: LD_VAR 0 2
6140: PPUSH
6141: LD_VAR 0 8
6145: PUSH
6146: LD_VAR 0 5
6150: ARRAY
6151: PPUSH
6152: CALL_OW 184
6156: GO 6081
6158: POP
6159: POP
// end ;
6160: LD_VAR 0 4
6164: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6170: LD_INT 22
6172: PUSH
6173: LD_VAR 0 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: LD_VAR 0 3
6205: LESSEQUAL
6206: IFFALSE 6314
// begin for i = 1 to vehCount do
6208: LD_ADDR_VAR 0 9
6212: PUSH
6213: DOUBLE
6214: LD_INT 1
6216: DEC
6217: ST_TO_ADDR
6218: LD_VAR 0 3
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6312
// begin weapon = weaponTab [ i ] ;
6226: LD_ADDR_VAR 0 10
6230: PUSH
6231: LD_VAR 0 4
6235: PUSH
6236: LD_VAR 0 9
6240: ARRAY
6241: ST_TO_ADDR
// if weapon = 46 then
6242: LD_VAR 0 10
6246: PUSH
6247: LD_INT 46
6249: EQUAL
6250: IFFALSE 6281
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_INT 24
6259: PPUSH
6260: LD_VAR 0 5
6264: PPUSH
6265: LD_VAR 0 6
6269: PPUSH
6270: LD_VAR 0 10
6274: PPUSH
6275: CALL_OW 185
// end else
6279: GO 6310
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6281: LD_VAR 0 2
6285: PPUSH
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_VAR 0 6
6300: PPUSH
6301: LD_VAR 0 10
6305: PPUSH
6306: CALL_OW 185
// end ; end ;
6310: GO 6223
6312: POP
6313: POP
// end ; end ;
6314: LD_VAR 0 8
6318: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
6323: PPUSH
6324: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6325: LD_ADDR_VAR 0 8
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_VAR 0 1
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 24
6357: PUSH
6358: LD_INT 650
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: ST_TO_ADDR
// if damageVehicles > 0 then
6379: LD_VAR 0 8
6383: PUSH
6384: LD_INT 0
6386: GREATER
6387: IFFALSE 6408
// ComMoveXY ( damageVehicles , repX , repY ) ;
6389: LD_VAR 0 8
6393: PPUSH
6394: LD_VAR 0 3
6398: PPUSH
6399: LD_VAR 0 4
6403: PPUSH
6404: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6408: LD_VAR 0 8
6412: PPUSH
6413: LD_INT 95
6415: PUSH
6416: LD_VAR 0 2
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 58
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 72
6446: PUSH
6447: LD_INT 0
6449: GREATER
6450: IFFALSE 6517
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: LD_INT 95
6464: PUSH
6465: LD_VAR 0 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: LD_INT 58
6479: PUSH
6480: EMPTY
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PUSH
6496: FOR_IN
6497: IFFALSE 6515
// ComExitVehicle ( UnitsInside ( i ) ) ;
6499: LD_VAR 0 6
6503: PPUSH
6504: CALL_OW 313
6508: PPUSH
6509: CALL_OW 121
6513: GO 6496
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 5
6521: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6531: LD_ADDR_VAR 0 8
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: LD_INT 660
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 3
6570: PUSH
6571: LD_INT 58
6573: PUSH
6574: EMPTY
6575: LIST
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 34
6582: PUSH
6583: LD_INT 43
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 34
6592: PUSH
6593: LD_INT 44
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 34
6602: PUSH
6603: LD_INT 46
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 69
6631: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6632: LD_INT 22
6634: PUSH
6635: LD_VAR 0 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 21
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 1000
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 58
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 34
6678: PUSH
6679: LD_INT 43
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 34
6688: PUSH
6689: LD_INT 44
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 34
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: LD_INT 6
6733: PUSH
6734: LD_INT 6
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_OWVAR 67
6746: ARRAY
6747: EQUAL
6748: IFFALSE 7004
// if seeEnemy = 0 then
6750: LD_VAR 0 11
6754: PUSH
6755: LD_INT 0
6757: EQUAL
6758: IFFALSE 7004
// repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6767: LD_ADDR_VAR 0 8
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 24
6796: PUSH
6797: LD_INT 660
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: LD_INT 58
6809: PUSH
6810: EMPTY
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 34
6818: PUSH
6819: LD_INT 43
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 34
6828: PUSH
6829: LD_INT 44
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 34
6838: PUSH
6839: LD_INT 46
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PPUSH
6863: CALL_OW 69
6867: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6868: LD_INT 22
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 95
6882: PUSH
6883: LD_VAR 0 2
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PPUSH
6896: CALL_OW 69
6900: NOT
6901: PUSH
6902: LD_VAR 0 11
6906: PUSH
6907: LD_INT 0
6909: EQUAL
6910: AND
6911: IFFALSE 6966
// for i := 1 to wayX do
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 3
6927: PUSH
6928: FOR_TO
6929: IFFALSE 6964
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6931: LD_VAR 0 8
6935: PPUSH
6936: LD_VAR 0 3
6940: PUSH
6941: LD_VAR 0 6
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 4
6951: PUSH
6952: LD_VAR 0 6
6956: ARRAY
6957: PPUSH
6958: CALL_OW 114
6962: GO 6928
6964: POP
6965: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
6966: LD_INT 22
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 95
6980: PUSH
6981: LD_VAR 0 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PUSH
6999: LD_INT 0
7001: GREATER
7002: IFFALSE 6760
// seeEnemy = 1 ;
7004: LD_ADDR_VAR 0 11
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// for j in vehiclesOK do
7019: LD_ADDR_VAR 0 7
7023: PUSH
7024: LD_VAR 0 8
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7231
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7032: LD_ADDR_VAR 0 9
7036: PUSH
7037: LD_INT 81
7039: PUSH
7040: LD_VAR 0 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 101
7051: PUSH
7052: LD_INT 1
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: PPUSH
7068: LD_VAR 0 7
7072: PPUSH
7073: CALL_OW 74
7077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7078: LD_ADDR_VAR 0 10
7082: PUSH
7083: LD_INT 81
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 101
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: LD_INT 59
7110: PUSH
7111: EMPTY
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 21
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PPUSH
7153: LD_VAR 0 7
7157: PPUSH
7158: CALL_OW 74
7162: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7163: LD_VAR 0 7
7167: PPUSH
7168: LD_VAR 0 9
7172: PPUSH
7173: CALL_OW 296
7177: PUSH
7178: LD_INT 8
7180: PLUS
7181: PUSH
7182: LD_VAR 0 7
7186: PPUSH
7187: LD_VAR 0 10
7191: PPUSH
7192: CALL_OW 296
7196: LESS
7197: IFFALSE 7215
// ComAttackUnit ( j , target1 ) else
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 9
7208: PPUSH
7209: CALL_OW 115
7213: GO 7229
// ComAttackUnit ( j , target2 ) ;
7215: LD_VAR 0 7
7219: PPUSH
7220: LD_VAR 0 10
7224: PPUSH
7225: CALL_OW 115
// end ;
7229: GO 7029
7231: POP
7232: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 1000
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: LD_INT 0
7331: EQUAL
7332: IFFALSE 7012
// seeEnemy = 0 ;
7334: LD_ADDR_VAR 0 11
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 5
7346: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7355: LD_ADDR_VAR 0 8
7359: PUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: CALL_OW 313
7369: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7370: LD_ADDR_VAR 0 9
7374: PUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: LD_INT 22
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 24
7404: PUSH
7405: LD_INT 750
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 3
7414: PUSH
7415: LD_INT 54
7417: PUSH
7418: EMPTY
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 70
7435: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: LD_INT 22
7448: PUSH
7449: LD_VAR 0 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 24
7473: PUSH
7474: LD_INT 1000
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: PPUSH
7493: CALL_OW 70
7497: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7498: LD_VAR 0 6
7502: NOT
7503: PUSH
7504: LD_INT 22
7506: PUSH
7507: LD_VAR 0 1
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: LD_INT 250
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: NOT
7546: AND
7547: IFFALSE 7551
// exit ;
7549: GO 7733
// if buildings_list > 0 and engineerOkInside then
7551: LD_VAR 0 6
7555: PUSH
7556: LD_INT 0
7558: GREATER
7559: PUSH
7560: LD_VAR 0 8
7564: AND
7565: IFFALSE 7576
// ComExitBuilding ( engineerOkInside ) ;
7567: LD_VAR 0 8
7571: PPUSH
7572: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 0
7583: GREATER
7584: PUSH
7585: LD_VAR 0 9
7589: PUSH
7590: LD_INT 0
7592: GREATER
7593: AND
7594: IFFALSE 7614
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7596: LD_VAR 0 9
7600: PPUSH
7601: LD_VAR 0 6
7605: PUSH
7606: LD_INT 1
7608: ARRAY
7609: PPUSH
7610: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7614: LD_VAR 0 6
7618: PUSH
7619: LD_INT 0
7621: EQUAL
7622: PUSH
7623: LD_VAR 0 4
7627: PUSH
7628: LD_INT 0
7630: EQUAL
7631: AND
7632: PUSH
7633: LD_VAR 0 9
7637: PUSH
7638: LD_INT 0
7640: GREATER
7641: AND
7642: IFFALSE 7658
// ComEnterUnit ( engineerOkOutside , building ) ;
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 2
7653: PPUSH
7654: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7658: LD_VAR 0 9
7662: PUSH
7663: LD_INT 0
7665: GREATER
7666: PUSH
7667: LD_VAR 0 6
7671: PUSH
7672: LD_INT 0
7674: EQUAL
7675: AND
7676: PUSH
7677: LD_VAR 0 4
7681: PUSH
7682: LD_INT 0
7684: GREATER
7685: AND
7686: IFFALSE 7733
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7688: LD_VAR 0 9
7692: PPUSH
7693: LD_VAR 0 4
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PPUSH
7702: LD_VAR 0 4
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: LD_VAR 0 4
7715: PUSH
7716: LD_INT 3
7718: ARRAY
7719: PPUSH
7720: LD_VAR 0 4
7724: PUSH
7725: LD_INT 4
7727: ARRAY
7728: PPUSH
7729: CALL_OW 145
// end ;
7733: LD_VAR 0 5
7737: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7738: LD_INT 0
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 22
7756: PUSH
7757: LD_VAR 0 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 25
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 24
7788: PUSH
7789: LD_INT 251
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 3
7816: PPUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 23
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 25
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 50
7851: PUSH
7852: EMPTY
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 70
7865: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7866: LD_ADDR_VAR 0 10
7870: PUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_VAR 0 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 3
7900: PUSH
7901: LD_INT 25
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 24
7920: PUSH
7921: LD_INT 750
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PPUSH
7938: CALL_OW 70
7942: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7943: LD_ADDR_VAR 0 11
7947: PUSH
7948: LD_VAR 0 2
7952: PPUSH
7953: LD_INT 22
7955: PUSH
7956: LD_VAR 0 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: LD_INT 25
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: LD_INT 1000
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 70
8019: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8020: LD_VAR 0 10
8024: NOT
8025: PUSH
8026: LD_VAR 0 11
8030: NOT
8031: AND
8032: PUSH
8033: LD_VAR 0 6
8037: NOT
8038: AND
8039: IFFALSE 8043
// exit ;
8041: GO 8277
// if damageUnits > 0 and sci_list > 0 then
8043: LD_VAR 0 10
8047: PUSH
8048: LD_INT 0
8050: GREATER
8051: PUSH
8052: LD_VAR 0 6
8056: PUSH
8057: LD_INT 0
8059: GREATER
8060: AND
8061: IFFALSE 8077
// ComMoveToArea ( damageUnits , healArea ) ;
8063: LD_VAR 0 10
8067: PPUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8077: LD_VAR 0 11
8081: PUSH
8082: LD_INT 0
8084: GREATER
8085: PUSH
8086: LD_VAR 0 6
8090: PUSH
8091: LD_INT 0
8093: GREATER
8094: AND
8095: IFFALSE 8106
// ComExitBuilding ( sci_list ) ;
8097: LD_VAR 0 6
8101: PPUSH
8102: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8106: LD_VAR 0 11
8110: PUSH
8111: LD_INT 0
8113: GREATER
8114: PUSH
8115: LD_VAR 0 7
8119: PUSH
8120: LD_INT 0
8122: GREATER
8123: AND
8124: IFFALSE 8144
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8126: LD_VAR 0 7
8130: PPUSH
8131: LD_VAR 0 11
8135: PUSH
8136: LD_INT 1
8138: ARRAY
8139: PPUSH
8140: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8144: LD_VAR 0 10
8148: PUSH
8149: LD_INT 0
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 11
8157: PUSH
8158: LD_INT 0
8160: EQUAL
8161: AND
8162: PUSH
8163: LD_VAR 0 7
8167: PUSH
8168: LD_INT 0
8170: GREATER
8171: AND
8172: IFFALSE 8277
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8174: LD_ADDR_VAR 0 12
8178: PUSH
8179: LD_INT 22
8181: PUSH
8182: LD_VAR 0 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8221: LD_ADDR_VAR 0 13
8225: PUSH
8226: LD_INT 1
8228: PPUSH
8229: LD_VAR 0 12
8233: PPUSH
8234: CALL_OW 12
8238: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8239: LD_VAR 0 7
8243: PPUSH
8244: LD_INT 3
8246: PUSH
8247: LD_INT 60
8249: PUSH
8250: EMPTY
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 72
8261: PPUSH
8262: LD_VAR 0 12
8266: PUSH
8267: LD_VAR 0 13
8271: ARRAY
8272: PPUSH
8273: CALL_OW 120
// end ; end ;
8277: LD_VAR 0 5
8281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// tmpTab = [ ] ;
8288: LD_ADDR_VAR 0 6
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8295: LD_INT 22
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 30
8309: PUSH
8310: LD_INT 32
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: IFFALSE 8412
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8331: LD_ADDR_VAR 0 4
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 30
8350: PUSH
8351: LD_INT 32
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8410
// begin for j in UnitsInside ( i ) do
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_VAR 0 4
8379: PPUSH
8380: CALL_OW 313
8384: PUSH
8385: FOR_IN
8386: IFFALSE 8406
// tmpTab = tmpTab ^ j ;
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: LD_VAR 0 6
8397: PUSH
8398: LD_VAR 0 5
8402: ADD
8403: ST_TO_ADDR
8404: GO 8385
8406: POP
8407: POP
// end ;
8408: GO 8367
8410: POP
8411: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8412: LD_VAR 0 6
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: CALL_OW 250
8426: PPUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: CALL_OW 251
8436: PPUSH
8437: CALL_OW 114
// end ;
8441: LD_VAR 0 3
8445: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
// enable ;
8452: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8453: LD_ADDR_VAR 0 7
8457: PUSH
8458: LD_VAR 0 3
8462: PPUSH
8463: CALL_OW 435
8467: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8468: LD_ADDR_VAR 0 6
8472: PUSH
8473: LD_INT 22
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 34
8487: PUSH
8488: LD_VAR 0 2
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 0
8513: GREATER
8514: PUSH
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 435
8524: AND
8525: PUSH
8526: LD_VAR 0 7
8530: PUSH
8531: LD_INT 0
8533: GREATER
8534: AND
8535: IFFALSE 8584
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 7
8550: PUSH
8551: LD_INT 1
8553: ARRAY
8554: PPUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_INT 2
8562: ARRAY
8563: PPUSH
8564: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_INT 100
8579: PPUSH
8580: CALL_OW 240
// end ; end ;
8584: LD_VAR 0 4
8588: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
8598: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8599: LD_ADDR_VAR 0 6
8603: PUSH
8604: LD_VAR 0 2
8608: PPUSH
8609: LD_INT 22
8611: PUSH
8612: LD_VAR 0 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 56
8623: PUSH
8624: EMPTY
8625: LIST
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 700
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: LD_INT 60
8642: PUSH
8643: EMPTY
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 70
8711: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8712: LD_ADDR_VAR 0 7
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 58
8746: PUSH
8747: EMPTY
8748: LIST
8749: PUSH
8750: LD_INT 24
8752: PUSH
8753: LD_INT 251
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PPUSH
8766: CALL_OW 70
8770: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_INT 22
8783: PUSH
8784: LD_VAR 0 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 4
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 30
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 251
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: ST_TO_ADDR
// if barrackList > 0 then
8841: LD_VAR 0 9
8845: PUSH
8846: LD_INT 0
8848: GREATER
8849: IFFALSE 8997
// begin if turretList = 0 then
8851: LD_VAR 0 7
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: IFFALSE 8901
// begin if soldiers_list > 0 then
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 0
8868: GREATER
8869: IFFALSE 8899
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_VAR 0 9
8888: PPUSH
8889: CALL_OW 12
8893: ARRAY
8894: PPUSH
8895: CALL_OW 120
// end else
8899: GO 8997
// begin for i in barrackList do
8901: LD_ADDR_VAR 0 4
8905: PUSH
8906: LD_VAR 0 9
8910: PUSH
8911: FOR_IN
8912: IFFALSE 8995
// begin insideUnits = UnitsInside ( i ) ;
8914: LD_ADDR_VAR 0 10
8918: PUSH
8919: LD_VAR 0 4
8923: PPUSH
8924: CALL_OW 313
8928: ST_TO_ADDR
// if insideUnits > 0 then
8929: LD_VAR 0 10
8933: PUSH
8934: LD_INT 0
8936: GREATER
8937: IFFALSE 8961
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8939: LD_VAR 0 10
8943: PUSH
8944: LD_INT 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 7
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 120
// if soldiers_list > 0 then
8961: LD_VAR 0 6
8965: PUSH
8966: LD_INT 0
8968: GREATER
8969: IFFALSE 8993
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8971: LD_VAR 0 6
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PPUSH
8980: LD_VAR 0 7
8984: PUSH
8985: LD_INT 1
8987: ARRAY
8988: PPUSH
8989: CALL_OW 120
// end ;
8993: GO 8911
8995: POP
8996: POP
// end ; end ; end ;
8997: LD_VAR 0 3
9001: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9002: LD_INT 0
9004: PPUSH
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9009: LD_ADDR_VAR 0 6
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 33
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 2
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 3
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 58
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9139: LD_VAR 0 6
9143: PUSH
9144: LD_INT 0
9146: GREATER
9147: PUSH
9148: LD_VAR 0 7
9152: PUSH
9153: LD_INT 0
9155: GREATER
9156: AND
9157: IFFALSE 9227
// begin for i in turretsList do
9159: LD_ADDR_VAR 0 4
9163: PUSH
9164: LD_VAR 0 6
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9225
// begin for j in enemyBuildings do
9172: LD_ADDR_VAR 0 5
9176: PUSH
9177: LD_VAR 0 7
9181: PUSH
9182: FOR_IN
9183: IFFALSE 9221
// begin if GetDistUnits ( i , j ) < 20 then
9185: LD_VAR 0 4
9189: PPUSH
9190: LD_VAR 0 5
9194: PPUSH
9195: CALL_OW 296
9199: PUSH
9200: LD_INT 20
9202: LESS
9203: IFFALSE 9219
// begin ComAttackUnit ( i , j ) ;
9205: LD_VAR 0 4
9209: PPUSH
9210: LD_VAR 0 5
9214: PPUSH
9215: CALL_OW 115
// end ; end ;
9219: GO 9182
9221: POP
9222: POP
// end ;
9223: GO 9169
9225: POP
9226: POP
// end ; end ;
9227: LD_VAR 0 3
9231: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9232: LD_INT 0
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: LD_VAR 0 1
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 34
9269: PUSH
9270: LD_INT 52
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: PPUSH
9282: CALL_OW 69
9286: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9287: LD_ADDR_VAR 0 9
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_VAR 0 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 21
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 3
9316: PUSH
9317: LD_INT 24
9319: PUSH
9320: LD_INT 1000
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9344: LD_VAR 0 9
9348: PUSH
9349: LD_INT 0
9351: GREATER
9352: PUSH
9353: LD_VAR 0 8
9357: PPUSH
9358: LD_INT 24
9360: PUSH
9361: LD_INT 750
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 72
9372: PUSH
9373: LD_INT 0
9375: GREATER
9376: AND
9377: IFFALSE 9412
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9379: LD_VAR 0 8
9383: PPUSH
9384: LD_INT 24
9386: PUSH
9387: LD_INT 750
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: PPUSH
9399: LD_VAR 0 9
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9412: LD_VAR 0 8
9416: PPUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 750
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 72
9438: PUSH
9439: LD_INT 0
9441: GREATER
9442: IFFALSE 9480
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9444: LD_VAR 0 8
9448: PPUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 24
9454: PUSH
9455: LD_INT 750
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 72
9470: PPUSH
9471: LD_VAR 0 2
9475: PPUSH
9476: CALL_OW 113
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9480: LD_VAR 0 2
9484: PPUSH
9485: LD_INT 22
9487: PUSH
9488: LD_VAR 0 1
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 21
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 34
9509: PUSH
9510: LD_INT 52
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 3
9519: PUSH
9520: LD_INT 24
9522: PUSH
9523: LD_INT 750
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 70
9544: PUSH
9545: LD_INT 0
9547: GREATER
9548: IFFALSE 9750
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
9550: LD_ADDR_VAR 0 5
9554: PUSH
9555: LD_VAR 0 2
9559: PPUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 52
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: LD_INT 24
9597: PUSH
9598: LD_INT 750
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9748
// begin mechTmp = UnitsInside ( i ) ;
9623: LD_ADDR_VAR 0 6
9627: PUSH
9628: LD_VAR 0 5
9632: PPUSH
9633: CALL_OW 313
9637: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
9638: LD_VAR 0 6
9642: PPUSH
9643: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
9647: LD_VAR 0 6
9651: PPUSH
9652: LD_VAR 0 7
9656: PPUSH
9657: CALL_OW 189
// wait ( 0 0$2 ) ;
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
9668: LD_VAR 0 6
9672: PPUSH
9673: LD_VAR 0 2
9677: PPUSH
9678: LD_INT 22
9680: PUSH
9681: LD_VAR 0 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 21
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 34
9702: PUSH
9703: LD_INT 52
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 24
9712: PUSH
9713: LD_INT 1000
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 58
9722: PUSH
9723: EMPTY
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 70
9737: PUSH
9738: LD_INT 1
9740: ARRAY
9741: PPUSH
9742: CALL_OW 180
// end ;
9746: GO 9620
9748: POP
9749: POP
// end ; end ;
9750: LD_VAR 0 4
9754: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9755: LD_INT 0
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
// for i = 1 to medicCount do
9768: LD_ADDR_VAR 0 14
9772: PUSH
9773: DOUBLE
9774: LD_INT 1
9776: DEC
9777: ST_TO_ADDR
9778: LD_VAR 0 7
9782: PUSH
9783: FOR_TO
9784: IFFALSE 9866
// begin uc_side = side ;
9786: LD_ADDR_OWVAR 20
9790: PUSH
9791: LD_VAR 0 1
9795: ST_TO_ADDR
// uc_nation = nation ;
9796: LD_ADDR_OWVAR 21
9800: PUSH
9801: LD_VAR 0 2
9805: ST_TO_ADDR
// hc_name =  ;
9806: LD_ADDR_OWVAR 26
9810: PUSH
9811: LD_STRING 
9813: ST_TO_ADDR
// hc_gallery =  ;
9814: LD_ADDR_OWVAR 33
9818: PUSH
9819: LD_STRING 
9821: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9822: LD_INT 0
9824: PPUSH
9825: LD_INT 4
9827: PPUSH
9828: LD_VAR 0 8
9832: PPUSH
9833: CALL_OW 380
// un = CreateHuman ;
9837: LD_ADDR_VAR 0 16
9841: PUSH
9842: CALL_OW 44
9846: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9847: LD_VAR 0 16
9851: PPUSH
9852: LD_VAR 0 9
9856: PPUSH
9857: LD_INT 0
9859: PPUSH
9860: CALL_OW 49
// end ;
9864: GO 9783
9866: POP
9867: POP
// for i = 1 to soldierCount do
9868: LD_ADDR_VAR 0 14
9872: PUSH
9873: DOUBLE
9874: LD_INT 1
9876: DEC
9877: ST_TO_ADDR
9878: LD_VAR 0 3
9882: PUSH
9883: FOR_TO
9884: IFFALSE 9966
// begin uc_side = side ;
9886: LD_ADDR_OWVAR 20
9890: PUSH
9891: LD_VAR 0 1
9895: ST_TO_ADDR
// uc_nation = nation ;
9896: LD_ADDR_OWVAR 21
9900: PUSH
9901: LD_VAR 0 2
9905: ST_TO_ADDR
// hc_name =  ;
9906: LD_ADDR_OWVAR 26
9910: PUSH
9911: LD_STRING 
9913: ST_TO_ADDR
// hc_gallery =  ;
9914: LD_ADDR_OWVAR 33
9918: PUSH
9919: LD_STRING 
9921: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9922: LD_INT 0
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: LD_VAR 0 8
9932: PPUSH
9933: CALL_OW 380
// un = CreateHuman ;
9937: LD_ADDR_VAR 0 16
9941: PUSH
9942: CALL_OW 44
9946: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9947: LD_VAR 0 16
9951: PPUSH
9952: LD_VAR 0 9
9956: PPUSH
9957: LD_INT 0
9959: PPUSH
9960: CALL_OW 49
// end ;
9964: GO 9883
9966: POP
9967: POP
// for i = 1 to sniperCount do
9968: LD_ADDR_VAR 0 14
9972: PUSH
9973: DOUBLE
9974: LD_INT 1
9976: DEC
9977: ST_TO_ADDR
9978: LD_VAR 0 4
9982: PUSH
9983: FOR_TO
9984: IFFALSE 10066
// begin uc_side = side ;
9986: LD_ADDR_OWVAR 20
9990: PUSH
9991: LD_VAR 0 1
9995: ST_TO_ADDR
// uc_nation = nation ;
9996: LD_ADDR_OWVAR 21
10000: PUSH
10001: LD_VAR 0 2
10005: ST_TO_ADDR
// hc_name =  ;
10006: LD_ADDR_OWVAR 26
10010: PUSH
10011: LD_STRING 
10013: ST_TO_ADDR
// hc_gallery =  ;
10014: LD_ADDR_OWVAR 33
10018: PUSH
10019: LD_STRING 
10021: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10022: LD_INT 0
10024: PPUSH
10025: LD_INT 5
10027: PPUSH
10028: LD_VAR 0 8
10032: PPUSH
10033: CALL_OW 380
// un = CreateHuman ;
10037: LD_ADDR_VAR 0 16
10041: PUSH
10042: CALL_OW 44
10046: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10047: LD_VAR 0 16
10051: PPUSH
10052: LD_VAR 0 9
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL_OW 49
// end ;
10064: GO 9983
10066: POP
10067: POP
// for i = 1 to bazookCount do
10068: LD_ADDR_VAR 0 14
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_VAR 0 5
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10166
// begin uc_side = side ;
10086: LD_ADDR_OWVAR 20
10090: PUSH
10091: LD_VAR 0 1
10095: ST_TO_ADDR
// uc_nation = nation ;
10096: LD_ADDR_OWVAR 21
10100: PUSH
10101: LD_VAR 0 2
10105: ST_TO_ADDR
// hc_name =  ;
10106: LD_ADDR_OWVAR 26
10110: PUSH
10111: LD_STRING 
10113: ST_TO_ADDR
// hc_gallery =  ;
10114: LD_ADDR_OWVAR 33
10118: PUSH
10119: LD_STRING 
10121: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10122: LD_INT 0
10124: PPUSH
10125: LD_INT 9
10127: PPUSH
10128: LD_VAR 0 8
10132: PPUSH
10133: CALL_OW 380
// un = CreateHuman ;
10137: LD_ADDR_VAR 0 16
10141: PUSH
10142: CALL_OW 44
10146: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10147: LD_VAR 0 16
10151: PPUSH
10152: LD_VAR 0 9
10156: PPUSH
10157: LD_INT 0
10159: PPUSH
10160: CALL_OW 49
// end ;
10164: GO 10083
10166: POP
10167: POP
// for i = 1 to mortalCount do
10168: LD_ADDR_VAR 0 14
10172: PUSH
10173: DOUBLE
10174: LD_INT 1
10176: DEC
10177: ST_TO_ADDR
10178: LD_VAR 0 6
10182: PUSH
10183: FOR_TO
10184: IFFALSE 10266
// begin uc_side = side ;
10186: LD_ADDR_OWVAR 20
10190: PUSH
10191: LD_VAR 0 1
10195: ST_TO_ADDR
// uc_nation = nation ;
10196: LD_ADDR_OWVAR 21
10200: PUSH
10201: LD_VAR 0 2
10205: ST_TO_ADDR
// hc_name =  ;
10206: LD_ADDR_OWVAR 26
10210: PUSH
10211: LD_STRING 
10213: ST_TO_ADDR
// hc_gallery =  ;
10214: LD_ADDR_OWVAR 33
10218: PUSH
10219: LD_STRING 
10221: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10222: LD_INT 0
10224: PPUSH
10225: LD_INT 8
10227: PPUSH
10228: LD_VAR 0 8
10232: PPUSH
10233: CALL_OW 380
// un = CreateHuman ;
10237: LD_ADDR_VAR 0 16
10241: PUSH
10242: CALL_OW 44
10246: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10247: LD_VAR 0 16
10251: PPUSH
10252: LD_VAR 0 9
10256: PPUSH
10257: LD_INT 0
10259: PPUSH
10260: CALL_OW 49
// end ;
10264: GO 10183
10266: POP
10267: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10268: LD_ADDR_VAR 0 19
10272: PUSH
10273: LD_INT 22
10275: PUSH
10276: LD_VAR 0 1
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 2
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 5
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 8
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 25
10320: PUSH
10321: LD_INT 9
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PPUSH
10339: CALL_OW 69
10343: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10344: LD_ADDR_VAR 0 18
10348: PUSH
10349: LD_INT 22
10351: PUSH
10352: LD_VAR 0 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 25
10363: PUSH
10364: LD_INT 4
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: ST_TO_ADDR
// for i in medic_list do
10380: LD_ADDR_VAR 0 14
10384: PUSH
10385: LD_VAR 0 18
10389: PUSH
10390: FOR_IN
10391: IFFALSE 10409
// ComMoveToArea ( i , healArea ) ;
10393: LD_VAR 0 14
10397: PPUSH
10398: LD_VAR 0 10
10402: PPUSH
10403: CALL_OW 113
10407: GO 10390
10409: POP
10410: POP
// if strategy = 1 then
10411: LD_VAR 0 12
10415: PUSH
10416: LD_INT 1
10418: EQUAL
10419: IFFALSE 11124
// begin repeat wait ( 0 0$3 ) ;
10421: LD_INT 105
10423: PPUSH
10424: CALL_OW 67
// for i in soldiersOK_list do
10428: LD_ADDR_VAR 0 14
10432: PUSH
10433: LD_VAR 0 19
10437: PUSH
10438: FOR_IN
10439: IFFALSE 10473
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10441: LD_VAR 0 14
10445: PPUSH
10446: LD_INT 80
10448: PPUSH
10449: LD_INT 109
10451: PPUSH
10452: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10456: LD_VAR 0 14
10460: PPUSH
10461: LD_INT 39
10463: PPUSH
10464: LD_INT 49
10466: PPUSH
10467: CALL_OW 174
// end ;
10471: GO 10438
10473: POP
10474: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10475: LD_INT 15
10477: PPUSH
10478: LD_INT 22
10480: PUSH
10481: LD_VAR 0 1
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 70
10494: PUSH
10495: LD_INT 0
10497: GREATER
10498: IFFALSE 10421
// repeat wait ( 0 0$1 ) ;
10500: LD_INT 35
10502: PPUSH
10503: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10507: LD_ADDR_VAR 0 17
10511: PUSH
10512: LD_INT 22
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: LD_INT 3
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: LD_INT 550
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 24
10546: PUSH
10547: LD_INT 250
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10568: LD_ADDR_VAR 0 19
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 25
10590: PUSH
10591: LD_INT 1
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 25
10600: PUSH
10601: LD_INT 5
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 25
10610: PUSH
10611: LD_INT 8
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 9
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 24
10637: PUSH
10638: LD_INT 1000
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 69
10654: ST_TO_ADDR
// if medicCount > 0 then
10655: LD_VAR 0 7
10659: PUSH
10660: LD_INT 0
10662: GREATER
10663: IFFALSE 10737
// begin if damageUnit_list > 0 then
10665: LD_VAR 0 17
10669: PUSH
10670: LD_INT 0
10672: GREATER
10673: IFFALSE 10737
// begin for i in damageUnit_list do
10675: LD_ADDR_VAR 0 14
10679: PUSH
10680: LD_VAR 0 17
10684: PUSH
10685: FOR_IN
10686: IFFALSE 10735
// begin ComMoveToArea ( i , healArea ) ;
10688: LD_VAR 0 14
10692: PPUSH
10693: LD_VAR 0 10
10697: PPUSH
10698: CALL_OW 113
// for j in medic_list do
10702: LD_ADDR_VAR 0 15
10706: PUSH
10707: LD_VAR 0 18
10711: PUSH
10712: FOR_IN
10713: IFFALSE 10731
// AddComHeal ( j , i ) ;
10715: LD_VAR 0 15
10719: PPUSH
10720: LD_VAR 0 14
10724: PPUSH
10725: CALL_OW 188
10729: GO 10712
10731: POP
10732: POP
// end ;
10733: GO 10685
10735: POP
10736: POP
// end ; end ; for i in soldiersOK_list do
10737: LD_ADDR_VAR 0 14
10741: PUSH
10742: LD_VAR 0 19
10746: PUSH
10747: FOR_IN
10748: IFFALSE 10924
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10750: LD_ADDR_VAR 0 22
10754: PUSH
10755: LD_INT 22
10757: PUSH
10758: LD_VAR 0 11
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PPUSH
10767: CALL_OW 69
10771: PPUSH
10772: LD_VAR 0 14
10776: PPUSH
10777: CALL_OW 74
10781: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10782: LD_ADDR_VAR 0 23
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_VAR 0 11
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 59
10804: PUSH
10805: EMPTY
10806: LIST
10807: PUSH
10808: LD_INT 21
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 21
10820: PUSH
10821: LD_INT 2
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: PPUSH
10841: CALL_OW 69
10845: PPUSH
10846: LD_VAR 0 14
10850: PPUSH
10851: CALL_OW 74
10855: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10856: LD_VAR 0 14
10860: PPUSH
10861: LD_VAR 0 22
10865: PPUSH
10866: CALL_OW 296
10870: PUSH
10871: LD_INT 8
10873: PLUS
10874: PUSH
10875: LD_VAR 0 14
10879: PPUSH
10880: LD_VAR 0 23
10884: PPUSH
10885: CALL_OW 296
10889: LESS
10890: IFFALSE 10908
// begin ComAttackUnit ( i , target1 ) ;
10892: LD_VAR 0 14
10896: PPUSH
10897: LD_VAR 0 22
10901: PPUSH
10902: CALL_OW 115
// end else
10906: GO 10922
// begin ComAttackUnit ( i , target2 ) ;
10908: LD_VAR 0 14
10912: PPUSH
10913: LD_VAR 0 23
10917: PPUSH
10918: CALL_OW 115
// end ; end ;
10922: GO 10747
10924: POP
10925: POP
// for i in soldiersOK_list do
10926: LD_ADDR_VAR 0 14
10930: PUSH
10931: LD_VAR 0 19
10935: PUSH
10936: FOR_IN
10937: IFFALSE 11113
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10939: LD_ADDR_VAR 0 22
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_VAR 0 11
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PPUSH
10956: CALL_OW 69
10960: PPUSH
10961: LD_VAR 0 14
10965: PPUSH
10966: CALL_OW 74
10970: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10971: LD_ADDR_VAR 0 23
10975: PUSH
10976: LD_INT 22
10978: PUSH
10979: LD_VAR 0 11
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 2
10990: PUSH
10991: LD_INT 59
10993: PUSH
10994: EMPTY
10995: LIST
10996: PUSH
10997: LD_INT 21
10999: PUSH
11000: LD_INT 1
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 21
11009: PUSH
11010: LD_INT 2
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: EMPTY
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: PPUSH
11035: LD_VAR 0 14
11039: PPUSH
11040: CALL_OW 74
11044: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11045: LD_VAR 0 14
11049: PPUSH
11050: LD_VAR 0 22
11054: PPUSH
11055: CALL_OW 296
11059: PUSH
11060: LD_INT 8
11062: PLUS
11063: PUSH
11064: LD_VAR 0 14
11068: PPUSH
11069: LD_VAR 0 23
11073: PPUSH
11074: CALL_OW 296
11078: LESS
11079: IFFALSE 11097
// begin ComAttackUnit ( i , target1 ) ;
11081: LD_VAR 0 14
11085: PPUSH
11086: LD_VAR 0 22
11090: PPUSH
11091: CALL_OW 115
// end else
11095: GO 11111
// begin ComAttackUnit ( i , target2 ) ;
11097: LD_VAR 0 14
11101: PPUSH
11102: LD_VAR 0 23
11106: PPUSH
11107: CALL_OW 115
// end ; end ;
11111: GO 10936
11113: POP
11114: POP
// until soldiersOK_list = [ ] ;
11115: LD_VAR 0 19
11119: PUSH
11120: EMPTY
11121: EQUAL
11122: IFFALSE 10500
// end ; if strategy = 2 then
11124: LD_VAR 0 12
11128: PUSH
11129: LD_INT 2
11131: EQUAL
11132: IFFALSE 11837
// begin repeat wait ( 0 0$1 ) ;
11134: LD_INT 35
11136: PPUSH
11137: CALL_OW 67
// for i in soldiersOK_list do
11141: LD_ADDR_VAR 0 14
11145: PUSH
11146: LD_VAR 0 19
11150: PUSH
11151: FOR_IN
11152: IFFALSE 11186
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11154: LD_VAR 0 14
11158: PPUSH
11159: LD_INT 117
11161: PPUSH
11162: LD_INT 97
11164: PPUSH
11165: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11169: LD_VAR 0 14
11173: PPUSH
11174: LD_INT 94
11176: PPUSH
11177: LD_INT 50
11179: PPUSH
11180: CALL_OW 174
// end ;
11184: GO 11151
11186: POP
11187: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11188: LD_INT 16
11190: PPUSH
11191: LD_INT 22
11193: PUSH
11194: LD_VAR 0 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 70
11207: PUSH
11208: LD_INT 0
11210: GREATER
11211: IFFALSE 11134
// repeat wait ( 0 0$3 ) ;
11213: LD_INT 105
11215: PPUSH
11216: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11220: LD_ADDR_VAR 0 17
11224: PUSH
11225: LD_INT 22
11227: PUSH
11228: LD_VAR 0 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: LD_INT 24
11245: PUSH
11246: LD_INT 550
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 250
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11281: LD_ADDR_VAR 0 19
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 2
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 5
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 8
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 9
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 24
11350: PUSH
11351: LD_INT 1000
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: ST_TO_ADDR
// if medicCount > 0 then
11368: LD_VAR 0 7
11372: PUSH
11373: LD_INT 0
11375: GREATER
11376: IFFALSE 11450
// begin if damageUnit_list > 0 then
11378: LD_VAR 0 17
11382: PUSH
11383: LD_INT 0
11385: GREATER
11386: IFFALSE 11450
// begin for i in damageUnit_list do
11388: LD_ADDR_VAR 0 14
11392: PUSH
11393: LD_VAR 0 17
11397: PUSH
11398: FOR_IN
11399: IFFALSE 11448
// begin ComMoveToArea ( i , healArea ) ;
11401: LD_VAR 0 14
11405: PPUSH
11406: LD_VAR 0 10
11410: PPUSH
11411: CALL_OW 113
// for j in medic_list do
11415: LD_ADDR_VAR 0 15
11419: PUSH
11420: LD_VAR 0 18
11424: PUSH
11425: FOR_IN
11426: IFFALSE 11444
// AddComHeal ( j , i ) ;
11428: LD_VAR 0 15
11432: PPUSH
11433: LD_VAR 0 14
11437: PPUSH
11438: CALL_OW 188
11442: GO 11425
11444: POP
11445: POP
// end ;
11446: GO 11398
11448: POP
11449: POP
// end ; end ; for i in soldiersOK_list do
11450: LD_ADDR_VAR 0 14
11454: PUSH
11455: LD_VAR 0 19
11459: PUSH
11460: FOR_IN
11461: IFFALSE 11637
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11463: LD_ADDR_VAR 0 22
11467: PUSH
11468: LD_INT 22
11470: PUSH
11471: LD_VAR 0 11
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: PPUSH
11485: LD_VAR 0 14
11489: PPUSH
11490: CALL_OW 74
11494: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11495: LD_ADDR_VAR 0 23
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_VAR 0 11
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 2
11514: PUSH
11515: LD_INT 59
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 21
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: PPUSH
11554: CALL_OW 69
11558: PPUSH
11559: LD_VAR 0 14
11563: PPUSH
11564: CALL_OW 74
11568: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11569: LD_VAR 0 14
11573: PPUSH
11574: LD_VAR 0 22
11578: PPUSH
11579: CALL_OW 296
11583: PUSH
11584: LD_INT 8
11586: PLUS
11587: PUSH
11588: LD_VAR 0 14
11592: PPUSH
11593: LD_VAR 0 23
11597: PPUSH
11598: CALL_OW 296
11602: LESS
11603: IFFALSE 11621
// begin ComAttackUnit ( i , target1 ) ;
11605: LD_VAR 0 14
11609: PPUSH
11610: LD_VAR 0 22
11614: PPUSH
11615: CALL_OW 115
// end else
11619: GO 11635
// begin ComAttackUnit ( i , target2 ) ;
11621: LD_VAR 0 14
11625: PPUSH
11626: LD_VAR 0 23
11630: PPUSH
11631: CALL_OW 115
// end ; end ;
11635: GO 11460
11637: POP
11638: POP
// for i in soldiersOK_list do
11639: LD_ADDR_VAR 0 14
11643: PUSH
11644: LD_VAR 0 19
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11826
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11652: LD_ADDR_VAR 0 22
11656: PUSH
11657: LD_INT 22
11659: PUSH
11660: LD_VAR 0 11
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PPUSH
11669: CALL_OW 69
11673: PPUSH
11674: LD_VAR 0 14
11678: PPUSH
11679: CALL_OW 74
11683: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11684: LD_ADDR_VAR 0 23
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_VAR 0 11
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 2
11703: PUSH
11704: LD_INT 59
11706: PUSH
11707: EMPTY
11708: LIST
11709: PUSH
11710: LD_INT 21
11712: PUSH
11713: LD_INT 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 21
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: PPUSH
11743: CALL_OW 69
11747: PPUSH
11748: LD_VAR 0 14
11752: PPUSH
11753: CALL_OW 74
11757: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11758: LD_VAR 0 14
11762: PPUSH
11763: LD_VAR 0 22
11767: PPUSH
11768: CALL_OW 296
11772: PUSH
11773: LD_INT 8
11775: PLUS
11776: PUSH
11777: LD_VAR 0 14
11781: PPUSH
11782: LD_VAR 0 23
11786: PPUSH
11787: CALL_OW 296
11791: LESS
11792: IFFALSE 11810
// begin ComAttackUnit ( i , target1 ) ;
11794: LD_VAR 0 14
11798: PPUSH
11799: LD_VAR 0 22
11803: PPUSH
11804: CALL_OW 115
// end else
11808: GO 11824
// begin ComAttackUnit ( i , target2 ) ;
11810: LD_VAR 0 14
11814: PPUSH
11815: LD_VAR 0 23
11819: PPUSH
11820: CALL_OW 115
// end ; end ;
11824: GO 11649
11826: POP
11827: POP
// until soldiersOK_list = [ ] ;
11828: LD_VAR 0 19
11832: PUSH
11833: EMPTY
11834: EQUAL
11835: IFFALSE 11213
// end ; end ; end_of_file
11837: LD_VAR 0 13
11841: RET
// every 0 0$01 do
11842: GO 11844
11844: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11845: LD_INT 22
11847: PUSH
11848: LD_INT 1
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 25
11857: PUSH
11858: LD_INT 2
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PPUSH
11869: CALL_OW 69
11873: PUSH
11874: LD_INT 0
11876: EQUAL
11877: IFFALSE 11891
// SetClass ( JMM , 2 ) ;
11879: LD_EXP 1
11883: PPUSH
11884: LD_INT 2
11886: PPUSH
11887: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11891: LD_STRING M1
11893: PPUSH
11894: CALL_OW 337
// case difficulty of 1 :
11898: LD_OWVAR 67
11902: PUSH
11903: LD_INT 1
11905: DOUBLE
11906: EQUAL
11907: IFTRUE 11911
11909: GO 11921
11911: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11912: LD_STRING M1-1
11914: PPUSH
11915: CALL_OW 337
11919: GO 11958
11921: LD_INT 2
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 11939
11929: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11930: LD_STRING M1-2
11932: PPUSH
11933: CALL_OW 337
11937: GO 11958
11939: LD_INT 3
11941: DOUBLE
11942: EQUAL
11943: IFTRUE 11947
11945: GO 11957
11947: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11948: LD_STRING M1-3
11950: PPUSH
11951: CALL_OW 337
11955: GO 11958
11957: POP
// ChangeMissionObjectives ( M1cont ) ;
11958: LD_STRING M1cont
11960: PPUSH
11961: CALL_OW 337
// SaveForQuickRestart ;
11965: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11969: LD_INT 350
11971: PPUSH
11972: LD_INT 875
11974: PPUSH
11975: CALL_OW 12
11979: PPUSH
11980: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11984: LD_INT 5
11986: PPUSH
11987: LD_INT 4
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 55
// end ;
11997: END
// every 0 0$15 trigger firstCrateSpawn do
11998: LD_EXP 41
12002: IFFALSE 12341
12004: GO 12006
12006: DISABLE
// begin if IsOk ( Lisa ) then
12007: LD_EXP 2
12011: PPUSH
12012: CALL_OW 302
12016: IFFALSE 12032
// Say ( Lisa , DR0-Lisa-1 ) else
12018: LD_EXP 2
12022: PPUSH
12023: LD_STRING DR0-Lisa-1
12025: PPUSH
12026: CALL_OW 88
12030: GO 12166
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12032: LD_INT 22
12034: PUSH
12035: LD_INT 1
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 21
12044: PUSH
12045: LD_INT 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 26
12054: PUSH
12055: LD_INT 1
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: LD_INT 25
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 25
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 25
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 25
12097: PUSH
12098: LD_INT 4
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: PUSH
12123: LD_EXP 1
12127: PUSH
12128: LD_EXP 8
12132: PUSH
12133: LD_EXP 5
12137: PUSH
12138: LD_EXP 6
12142: PUSH
12143: LD_EXP 7
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: DIFF
12155: PPUSH
12156: LD_STRING DR0-Sol1-1
12158: PPUSH
12159: LD_STRING DR0-Sol1-1
12161: PPUSH
12162: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12166: LD_INT 22
12168: PUSH
12169: LD_INT 1
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 26
12188: PUSH
12189: LD_INT 1
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 2
12198: PUSH
12199: LD_INT 25
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 25
12211: PUSH
12212: LD_INT 2
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 25
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 25
12231: PUSH
12232: LD_INT 4
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: PPUSH
12252: CALL_OW 69
12256: PUSH
12257: LD_EXP 1
12261: PUSH
12262: LD_EXP 8
12266: PUSH
12267: LD_EXP 5
12271: PUSH
12272: LD_EXP 2
12276: PUSH
12277: LD_EXP 6
12281: PUSH
12282: LD_EXP 7
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: DIFF
12295: PPUSH
12296: LD_STRING DR0-Sol2-1
12298: PPUSH
12299: LD_STRING DR0-Sol2-1
12301: PPUSH
12302: CALL 5256 0 3
// if IsOk ( Cyrus ) then
12306: LD_EXP 4
12310: PPUSH
12311: CALL_OW 302
12315: IFFALSE 12329
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12317: LD_EXP 4
12321: PPUSH
12322: LD_STRING DR0-Cyrus-1
12324: PPUSH
12325: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12329: LD_EXP 1
12333: PPUSH
12334: LD_STRING DR0-JMM-1
12336: PPUSH
12337: CALL_OW 88
// end ;
12341: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
12342: LD_EXP 5
12346: PPUSH
12347: CALL_OW 302
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 25
12364: PUSH
12365: LD_INT 16
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 69
12380: PUSH
12381: LD_INT 0
12383: GREATER
12384: AND
12385: IFFALSE 12663
12387: GO 12389
12389: DISABLE
// begin DialogueOn ;
12390: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12394: LD_EXP 5
12398: PPUSH
12399: LD_STRING D10-Frank-1
12401: PPUSH
12402: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 1
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 2
12428: PUSH
12429: LD_INT 25
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 2
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 25
12451: PUSH
12452: LD_INT 3
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 25
12461: PUSH
12462: LD_INT 4
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: LIST
12480: PPUSH
12481: CALL_OW 69
12485: PUSH
12486: LD_EXP 1
12490: PUSH
12491: LD_EXP 5
12495: PUSH
12496: LD_EXP 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: DIFF
12506: PPUSH
12507: LD_STRING D10-Sol1-1
12509: PPUSH
12510: LD_STRING D10-FSol1-1
12512: PPUSH
12513: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12517: LD_EXP 5
12521: PPUSH
12522: LD_STRING D10-Frank-2
12524: PPUSH
12525: CALL_OW 88
// if IsOK ( Lisa ) then
12529: LD_EXP 2
12533: PPUSH
12534: CALL_OW 302
12538: IFFALSE 12554
// begin Say ( Lisa , D10-Lisa-2 ) ;
12540: LD_EXP 2
12544: PPUSH
12545: LD_STRING D10-Lisa-2
12547: PPUSH
12548: CALL_OW 88
// end else
12552: GO 12659
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12554: LD_INT 22
12556: PUSH
12557: LD_INT 1
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 21
12566: PUSH
12567: LD_INT 1
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 2
12576: PUSH
12577: LD_INT 25
12579: PUSH
12580: LD_INT 1
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 25
12599: PUSH
12600: LD_INT 3
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 25
12609: PUSH
12610: LD_INT 4
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: PUSH
12634: LD_EXP 1
12638: PUSH
12639: LD_EXP 5
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: DIFF
12648: PPUSH
12649: LD_STRING D10-Sol1-2
12651: PPUSH
12652: LD_STRING D10-FSol1-2
12654: PPUSH
12655: CALL 5256 0 3
// end ; DialogueOff ;
12659: CALL_OW 7
// end ;
12663: END
// every 10 10$30 do
12664: GO 12666
12666: DISABLE
// begin HarrisonSupport ;
12667: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12671: LD_EXP 17
12675: PPUSH
12676: CALL_OW 310
12680: PPUSH
12681: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12685: LD_EXP 17
12689: PPUSH
12690: LD_STRING DEng-Eng1-1
12692: PPUSH
12693: CALL_OW 88
// wait ( 1 1$0 ) ;
12697: LD_INT 2100
12699: PPUSH
12700: CALL_OW 67
// DialogueOn ;
12704: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12708: LD_EXP 14
12712: PPUSH
12713: LD_STRING DRem-Har-1
12715: PPUSH
12716: CALL_OW 94
// if contactWithRussian = 1 then
12720: LD_EXP 22
12724: PUSH
12725: LD_INT 1
12727: EQUAL
12728: IFFALSE 12744
// begin Say ( JMM , DRem-JMM-1 ) ;
12730: LD_EXP 1
12734: PPUSH
12735: LD_STRING DRem-JMM-1
12737: PPUSH
12738: CALL_OW 88
// end else
12742: GO 12756
// begin Say ( JMM , DRem-JMM-1a ) ;
12744: LD_EXP 1
12748: PPUSH
12749: LD_STRING DRem-JMM-1a
12751: PPUSH
12752: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12756: LD_EXP 14
12760: PPUSH
12761: LD_STRING DRem-Har-2
12763: PPUSH
12764: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12768: LD_STRING DenisInDelta
12770: PPUSH
12771: LD_INT 0
12773: PPUSH
12774: CALL_OW 30
12778: PUSH
12779: LD_INT 1
12781: EQUAL
12782: IFFALSE 12798
// begin Say ( JMM , DRem-JMM-2 ) ;
12784: LD_EXP 1
12788: PPUSH
12789: LD_STRING DRem-JMM-2
12791: PPUSH
12792: CALL_OW 88
// end else
12796: GO 12810
// begin Say ( JMM , DRem-JMM-2a ) ;
12798: LD_EXP 1
12802: PPUSH
12803: LD_STRING DRem-JMM-2a
12805: PPUSH
12806: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12810: LD_EXP 14
12814: PPUSH
12815: LD_STRING DRem-Har-3
12817: PPUSH
12818: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12822: LD_EXP 1
12826: PPUSH
12827: LD_STRING DRem-JMM-3
12829: PPUSH
12830: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12834: LD_EXP 14
12838: PPUSH
12839: LD_STRING DRem-Har-4
12841: PPUSH
12842: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12846: LD_STRING DenisInDelta
12848: PPUSH
12849: LD_INT 0
12851: PPUSH
12852: CALL_OW 30
12856: PUSH
12857: LD_INT 1
12859: EQUAL
12860: IFFALSE 12888
// begin Say ( JMM , DRem-JMM-4 ) ;
12862: LD_EXP 1
12866: PPUSH
12867: LD_STRING DRem-JMM-4
12869: PPUSH
12870: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12874: LD_EXP 14
12878: PPUSH
12879: LD_STRING DRem-Har-5
12881: PPUSH
12882: CALL_OW 94
// end else
12886: GO 12921
// begin SetRestrict ( 36 , 1 , true ) ;
12888: LD_INT 36
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12901: LD_INT 15
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12914: LD_STRING MR
12916: PPUSH
12917: CALL_OW 337
// end ; DialogueOff ;
12921: CALL_OW 7
// end ;
12925: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12926: LD_STRING DenisInDelta
12928: PPUSH
12929: LD_INT 0
12931: PPUSH
12932: CALL_OW 30
12936: PUSH
12937: LD_INT 1
12939: EQUAL
12940: IFFALSE 13071
12942: GO 12944
12944: DISABLE
// begin PrepareDenis ;
12945: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
12949: LD_EXP 9
12953: PPUSH
12954: CALL_OW 87
// DialogueOn ;
12958: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12962: LD_EXP 9
12966: PPUSH
12967: LD_STRING DDen-Den-1
12969: PPUSH
12970: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12974: LD_EXP 1
12978: PPUSH
12979: LD_STRING DDen-JMM-1
12981: PPUSH
12982: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12986: LD_EXP 9
12990: PPUSH
12991: LD_STRING DDen-Den-2
12993: PPUSH
12994: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12998: LD_EXP 1
13002: PPUSH
13003: LD_STRING DDen-JMM-2
13005: PPUSH
13006: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13010: LD_EXP 9
13014: PPUSH
13015: LD_STRING DDen-Den-3
13017: PPUSH
13018: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13022: LD_EXP 1
13026: PPUSH
13027: LD_STRING DDen-JMM-3
13029: PPUSH
13030: CALL_OW 88
// DialogueOff ;
13034: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13038: LD_INT 36
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13051: LD_INT 15
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13064: LD_STRING MR
13066: PPUSH
13067: CALL_OW 337
// end ;
13071: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
13072: CALL 13117 0 0
13076: PUSH
13077: LD_EXP 9
13081: PPUSH
13082: CALL_OW 302
13086: AND
13087: IFFALSE 13116
13089: GO 13091
13091: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13092: LD_EXP 9
13096: PPUSH
13097: LD_STRING DR1-Den-1
13099: PPUSH
13100: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13104: LD_EXP 1
13108: PPUSH
13109: LD_STRING DR1-JMM-1
13111: PPUSH
13112: CALL_OW 88
// end ;
13116: END
// function CheckOptoLab ; var i ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
// result = false ;
13121: LD_ADDR_VAR 0 1
13125: PUSH
13126: LD_INT 0
13128: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13129: LD_ADDR_VAR 0 2
13133: PUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 2
13146: PUSH
13147: LD_INT 30
13149: PUSH
13150: LD_INT 7
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 30
13159: PUSH
13160: LD_INT 8
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PPUSH
13176: CALL_OW 69
13180: PUSH
13181: FOR_IN
13182: IFFALSE 13234
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13184: LD_VAR 0 2
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 268
13196: PUSH
13197: LD_INT 15
13199: EQUAL
13200: PUSH
13201: LD_VAR 0 2
13205: PPUSH
13206: LD_INT 2
13208: PPUSH
13209: CALL_OW 268
13213: PUSH
13214: LD_INT 15
13216: EQUAL
13217: OR
13218: IFFALSE 13230
// begin result = true ;
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// break ;
13228: GO 13234
// end ; break ;
13230: GO 13234
// end ;
13232: GO 13181
13234: POP
13235: POP
// end ;
13236: LD_VAR 0 1
13240: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
13241: LD_INT 15
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 321
13251: PUSH
13252: LD_INT 2
13254: EQUAL
13255: PUSH
13256: LD_EXP 9
13260: PPUSH
13261: CALL_OW 302
13265: AND
13266: IFFALSE 13498
13268: GO 13270
13270: DISABLE
// begin DialogueOn ;
13271: CALL_OW 6
// if IsOK ( Denis ) then
13275: LD_EXP 9
13279: PPUSH
13280: CALL_OW 302
13284: IFFALSE 13300
// begin Say ( Denis , DR2-Den-1 ) ;
13286: LD_EXP 9
13290: PPUSH
13291: LD_STRING DR2-Den-1
13293: PPUSH
13294: CALL_OW 88
// end else
13298: GO 13359
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13300: LD_INT 22
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 21
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 25
13322: PUSH
13323: LD_INT 4
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 69
13339: PUSH
13340: LD_EXP 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: DIFF
13348: PPUSH
13349: LD_STRING DR2-Sci1-1
13351: PPUSH
13352: LD_STRING DR2-FSci1-1
13354: PPUSH
13355: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13359: LD_EXP 1
13363: PPUSH
13364: LD_STRING DR2-JMM-1
13366: PPUSH
13367: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13371: LD_INT 22
13373: PUSH
13374: LD_INT 1
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 21
13383: PUSH
13384: LD_INT 1
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 2
13393: PUSH
13394: LD_INT 25
13396: PUSH
13397: LD_INT 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 25
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 3
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 25
13426: PUSH
13427: LD_INT 4
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: LIST
13445: PPUSH
13446: CALL_OW 69
13450: PUSH
13451: LD_EXP 1
13455: PUSH
13456: LD_EXP 9
13460: PUSH
13461: LD_EXP 8
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: DIFF
13471: PPUSH
13472: LD_STRING DR2-Sol1-1
13474: PPUSH
13475: LD_STRING DR2-Sol1-11
13477: PPUSH
13478: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13482: LD_EXP 1
13486: PPUSH
13487: LD_STRING DR2-JMM-2
13489: PPUSH
13490: CALL_OW 88
// DialogueOff ;
13494: CALL_OW 7
// end ;
13498: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
13499: LD_INT 22
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_INT 36
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: PUSH
13528: LD_INT 0
13530: EQUAL
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 1
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 21
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 33
13554: PUSH
13555: LD_INT 2
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: LIST
13566: PPUSH
13567: CALL_OW 69
13571: PUSH
13572: LD_INT 0
13574: GREATER
13575: AND
13576: PUSH
13577: LD_EXP 23
13581: PUSH
13582: LD_INT 0
13584: EQUAL
13585: AND
13586: IFFALSE 13712
13588: GO 13590
13590: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13591: LD_INT 22
13593: PUSH
13594: LD_INT 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 21
13603: PUSH
13604: LD_INT 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: PPUSH
13626: CALL_OW 69
13630: PUSH
13631: LD_EXP 1
13635: PUSH
13636: LD_EXP 6
13640: PUSH
13641: LD_EXP 7
13645: PUSH
13646: LD_EXP 9
13650: PUSH
13651: LD_EXP 15
13655: PUSH
13656: LD_EXP 3
13660: PUSH
13661: LD_EXP 4
13665: PUSH
13666: LD_EXP 2
13670: PUSH
13671: LD_EXP 5
13675: PUSH
13676: LD_EXP 8
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: DIFF
13693: PPUSH
13694: LD_STRING D3a-Mech1-1
13696: PPUSH
13697: LD_STRING D3a-Mech1-1
13699: PPUSH
13700: CALL 5256 0 3
// firstTower = 2 ;
13704: LD_ADDR_EXP 23
13708: PUSH
13709: LD_INT 2
13711: ST_TO_ADDR
// end ;
13712: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13713: LD_INT 22
13715: PUSH
13716: LD_INT 3
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 21
13725: PUSH
13726: LD_INT 3
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: PUSH
13742: LD_INT 0
13744: EQUAL
13745: IFFALSE 13860
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_INT 1
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 21
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 25
13783: PUSH
13784: LD_INT 1
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 25
13793: PUSH
13794: LD_INT 2
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 25
13803: PUSH
13804: LD_INT 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 25
13813: PUSH
13814: LD_INT 4
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: PUSH
13838: FOR_IN
13839: IFFALSE 13858
// AddExperience ( i , 1 , 10000 ) ;
13841: LD_VAR 0 1
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: LD_INT 10000
13851: PPUSH
13852: CALL_OW 492
13856: GO 13838
13858: POP
13859: POP
// end ;
13860: PPOPN 1
13862: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13863: LD_INT 22
13865: PUSH
13866: LD_INT 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 30
13875: PUSH
13876: LD_INT 36
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PPUSH
13887: CALL_OW 69
13891: PUSH
13892: LD_INT 0
13894: GREATER
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_INT 1
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 21
13908: PUSH
13909: LD_INT 2
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 33
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: PUSH
13936: LD_INT 0
13938: GREATER
13939: AND
13940: PUSH
13941: CALL 14523 0 0
13945: AND
13946: IFFALSE 14520
13948: GO 13950
13950: DISABLE
13951: LD_INT 0
13953: PPUSH
13954: PPUSH
13955: PPUSH
13956: PPUSH
13957: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13958: LD_ADDR_VAR 0 3
13962: PUSH
13963: LD_INT 22
13965: PUSH
13966: LD_INT 1
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 30
13975: PUSH
13976: LD_INT 36
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PPUSH
13987: CALL_OW 69
13991: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13992: LD_ADDR_VAR 0 4
13996: PUSH
13997: LD_INT 22
13999: PUSH
14000: LD_INT 1
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 21
14009: PUSH
14010: LD_INT 2
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 33
14019: PUSH
14020: LD_INT 2
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 69
14036: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14037: LD_ADDR_VAR 0 5
14041: PUSH
14042: EMPTY
14043: ST_TO_ADDR
// for i in tmpControlTowers do
14044: LD_ADDR_VAR 0 1
14048: PUSH
14049: LD_VAR 0 3
14053: PUSH
14054: FOR_IN
14055: IFFALSE 14518
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14057: LD_EXP 1
14061: PPUSH
14062: CALL_OW 310
14066: PUSH
14067: LD_VAR 0 1
14071: EQUAL
14072: PUSH
14073: LD_EXP 1
14077: PPUSH
14078: CALL_OW 257
14082: PUSH
14083: LD_INT 3
14085: EQUAL
14086: AND
14087: IFFALSE 14217
// begin InGameOn ;
14089: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14106: LD_EXP 1
14110: PPUSH
14111: LD_STRING D4a-JMM-1
14113: PPUSH
14114: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14118: LD_VAR 0 4
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: PPUSH
14127: LD_EXP 1
14131: PPUSH
14132: CALL_OW 53
// wait ( 0 0$1 ) ;
14136: LD_INT 35
14138: PPUSH
14139: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14143: LD_VAR 0 4
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: LD_VAR 0 4
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: PPUSH
14161: CALL_OW 250
14165: PUSH
14166: LD_INT 3
14168: PLUS
14169: PPUSH
14170: LD_VAR 0 4
14174: PUSH
14175: LD_INT 1
14177: ARRAY
14178: PPUSH
14179: CALL_OW 251
14183: PUSH
14184: LD_INT 2
14186: MINUS
14187: PPUSH
14188: CALL_OW 111
// wait ( 0 0$2 ) ;
14192: LD_INT 70
14194: PPUSH
14195: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14199: LD_EXP 1
14203: PPUSH
14204: LD_STRING D4b-JMM-1
14206: PPUSH
14207: CALL_OW 88
// InGameOff ;
14211: CALL_OW 9
// end else
14215: GO 14516
// begin InGameOn ;
14217: CALL_OW 8
// for j in UnitsInside ( i ) do
14221: LD_ADDR_VAR 0 2
14225: PUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: CALL_OW 313
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14272
// if GetClass ( j ) = 3 then
14239: LD_VAR 0 2
14243: PPUSH
14244: CALL_OW 257
14248: PUSH
14249: LD_INT 3
14251: EQUAL
14252: IFFALSE 14270
// tmpMechanicInside = tmpMechanicInside ^ j ;
14254: LD_ADDR_VAR 0 5
14258: PUSH
14259: LD_VAR 0 5
14263: PUSH
14264: LD_VAR 0 2
14268: ADD
14269: ST_TO_ADDR
14270: GO 14236
14272: POP
14273: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14274: LD_VAR 0 5
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: PPUSH
14283: CALL_OW 258
14287: PUSH
14288: LD_INT 1
14290: EQUAL
14291: IFFALSE 14309
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14293: LD_VAR 0 5
14297: PUSH
14298: LD_INT 1
14300: ARRAY
14301: PPUSH
14302: LD_STRING D4a-Mech1-1
14304: PPUSH
14305: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14309: LD_VAR 0 5
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PPUSH
14318: CALL_OW 258
14322: PUSH
14323: LD_INT 2
14325: EQUAL
14326: IFFALSE 14344
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14328: LD_VAR 0 5
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: LD_STRING D4a-FMech1-1
14339: PPUSH
14340: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14344: LD_VAR 0 4
14348: PUSH
14349: LD_INT 1
14351: ARRAY
14352: PPUSH
14353: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14357: LD_VAR 0 4
14361: PUSH
14362: LD_INT 1
14364: ARRAY
14365: PPUSH
14366: LD_VAR 0 5
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: CALL_OW 53
// wait ( 0 0$1 ) ;
14379: LD_INT 35
14381: PPUSH
14382: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14386: LD_VAR 0 4
14390: PUSH
14391: LD_INT 1
14393: ARRAY
14394: PPUSH
14395: LD_VAR 0 4
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: CALL_OW 250
14408: PUSH
14409: LD_INT 3
14411: PLUS
14412: PPUSH
14413: LD_VAR 0 4
14417: PUSH
14418: LD_INT 1
14420: ARRAY
14421: PPUSH
14422: CALL_OW 251
14426: PUSH
14427: LD_INT 2
14429: MINUS
14430: PPUSH
14431: CALL_OW 111
// wait ( 0 0$2 ) ;
14435: LD_INT 70
14437: PPUSH
14438: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14442: LD_VAR 0 5
14446: PUSH
14447: LD_INT 1
14449: ARRAY
14450: PPUSH
14451: CALL_OW 258
14455: PUSH
14456: LD_INT 1
14458: EQUAL
14459: IFFALSE 14477
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14461: LD_VAR 0 5
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PPUSH
14470: LD_STRING D4b-Mech1-1
14472: PPUSH
14473: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14477: LD_VAR 0 5
14481: PUSH
14482: LD_INT 1
14484: ARRAY
14485: PPUSH
14486: CALL_OW 258
14490: PUSH
14491: LD_INT 2
14493: EQUAL
14494: IFFALSE 14512
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14496: LD_VAR 0 5
14500: PUSH
14501: LD_INT 1
14503: ARRAY
14504: PPUSH
14505: LD_STRING D4b-FMech1-1
14507: PPUSH
14508: CALL_OW 88
// InGameOff ;
14512: CALL_OW 9
// end ; end ;
14516: GO 14054
14518: POP
14519: POP
// end ;
14520: PPOPN 5
14522: END
// function CheckMehInside ; var i , j ; begin
14523: LD_INT 0
14525: PPUSH
14526: PPUSH
14527: PPUSH
// result = false ;
14528: LD_ADDR_VAR 0 1
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14536: LD_ADDR_VAR 0 2
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 30
14553: PUSH
14554: LD_INT 36
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: PUSH
14570: FOR_IN
14571: IFFALSE 14622
// begin for j in UnitsInside ( i ) do
14573: LD_ADDR_VAR 0 3
14577: PUSH
14578: LD_VAR 0 2
14582: PPUSH
14583: CALL_OW 313
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14618
// begin if GetClass ( j ) = 3 then
14591: LD_VAR 0 3
14595: PPUSH
14596: CALL_OW 257
14600: PUSH
14601: LD_INT 3
14603: EQUAL
14604: IFFALSE 14616
// begin result = true ;
14606: LD_ADDR_VAR 0 1
14610: PUSH
14611: LD_INT 1
14613: ST_TO_ADDR
// break ;
14614: GO 14618
// end ; end ;
14616: GO 14588
14618: POP
14619: POP
// end ;
14620: GO 14570
14622: POP
14623: POP
// end ;
14624: LD_VAR 0 1
14628: RET
// every 25 25$0 do
14629: GO 14631
14631: DISABLE
// begin PrepareKurt ;
14632: CALL 18084 0 0
// end ;
14636: END
// every 35 35$0 do
14637: GO 14639
14639: DISABLE
// begin PrepareJoan ;
14640: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14644: LD_INT 2100
14646: PPUSH
14647: CALL_OW 67
// if IsOK ( Lisa ) then
14651: LD_EXP 2
14655: PPUSH
14656: CALL_OW 302
14660: IFFALSE 14790
// begin DialogueOn ;
14662: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14666: LD_EXP 2
14670: PPUSH
14671: LD_STRING D7-Lisa-1
14673: PPUSH
14674: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14678: LD_EXP 1
14682: PPUSH
14683: LD_STRING D7-JMM-1
14685: PPUSH
14686: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14690: LD_EXP 2
14694: PPUSH
14695: LD_STRING D7-Lisa-2
14697: PPUSH
14698: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14702: LD_EXP 1
14706: PPUSH
14707: LD_STRING D7-JMM-2
14709: PPUSH
14710: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14714: LD_EXP 2
14718: PPUSH
14719: LD_STRING D7-Lisa-3
14721: PPUSH
14722: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14726: LD_EXP 1
14730: PPUSH
14731: LD_STRING D7-JMM-3
14733: PPUSH
14734: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14738: LD_EXP 2
14742: PPUSH
14743: LD_STRING D7-Lisa-4
14745: PPUSH
14746: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14750: LD_EXP 1
14754: PPUSH
14755: LD_STRING D7-JMM-4
14757: PPUSH
14758: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14762: LD_EXP 1
14766: PPUSH
14767: LD_STRING D7-JMM-4a
14769: PPUSH
14770: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14774: LD_EXP 2
14778: PPUSH
14779: LD_STRING D7-Lisa-5
14781: PPUSH
14782: CALL_OW 88
// DialogueOff ;
14786: CALL_OW 7
// end ; end ;
14790: END
// every 0 0$1 do var i , others ;
14791: GO 14793
14793: DISABLE
14794: LD_INT 0
14796: PPUSH
14797: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14798: LD_ADDR_VAR 0 2
14802: PUSH
14803: LD_INT 22
14805: PUSH
14806: LD_INT 1
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 25
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 25
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 25
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 4
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: PPUSH
14878: CALL_OW 69
14882: PUSH
14883: LD_EXP 13
14887: PUSH
14888: EMPTY
14889: LIST
14890: DIFF
14891: ST_TO_ADDR
// for i in others do
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: FOR_IN
14903: IFFALSE 14940
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14905: LD_EXP 13
14909: PPUSH
14910: LD_VAR 0 1
14914: PPUSH
14915: CALL_OW 296
14919: PUSH
14920: LD_INT 6
14922: LESS
14923: IFFALSE 14938
// begin disable ;
14925: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14926: LD_EXP 13
14930: PPUSH
14931: LD_STRING D5-Sol1-1
14933: PPUSH
14934: CALL_OW 88
// end ; end ;
14938: GO 14902
14940: POP
14941: POP
// end ;
14942: PPOPN 2
14944: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14945: LD_INT 22
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 33
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PPUSH
14969: CALL_OW 69
14973: PUSH
14974: LD_INT 2
14976: GREATEREQUAL
14977: IFFALSE 14997
14979: GO 14981
14981: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14982: LD_STRING MRa
14984: PPUSH
14985: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14989: LD_ADDR_EXP 28
14993: PUSH
14994: LD_INT 1
14996: ST_TO_ADDR
// end ;
14997: END
// every 4 4$0 do
14998: GO 15000
15000: DISABLE
// PrepareRandoms ( 1 ) ;
15001: LD_INT 1
15003: PPUSH
15004: CALL 3692 0 1
15008: END
// every 10 10$0 do
15009: GO 15011
15011: DISABLE
// PrepareRandoms ( 2 ) ;
15012: LD_INT 2
15014: PPUSH
15015: CALL 3692 0 1
15019: END
// every 28 28$0 do
15020: GO 15022
15022: DISABLE
// PrepareRandoms ( 4 ) ;
15023: LD_INT 4
15025: PPUSH
15026: CALL 3692 0 1
15030: END
// every 32 32$0 do
15031: GO 15033
15033: DISABLE
// PrepareRandoms ( 5 ) ;
15034: LD_INT 5
15036: PPUSH
15037: CALL 3692 0 1
15041: END
// every 35 35$30 do
15042: GO 15044
15044: DISABLE
// PrepareRandoms ( 6 ) ;
15045: LD_INT 6
15047: PPUSH
15048: CALL 3692 0 1
15052: END
// every 37 37$20 do
15053: GO 15055
15055: DISABLE
// PrepareRandoms ( 7 ) ;
15056: LD_INT 7
15058: PPUSH
15059: CALL 3692 0 1
15063: END
// every 5 5$20 do
15064: GO 15066
15066: DISABLE
// begin DialogueOn ;
15067: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15071: LD_EXP 10
15075: PPUSH
15076: LD_STRING D12a-Sci-1
15078: PPUSH
15079: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15083: LD_EXP 1
15087: PPUSH
15088: LD_STRING D12a-JMM-1
15090: PPUSH
15091: CALL_OW 88
// DialogueOff ;
15095: CALL_OW 7
// cratesStatus = 1 ;
15099: LD_ADDR_EXP 38
15103: PUSH
15104: LD_INT 1
15106: ST_TO_ADDR
// end ;
15107: END
// every 13 13$0 do
15108: GO 15110
15110: DISABLE
// begin DialogueOn ;
15111: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15115: LD_EXP 10
15119: PPUSH
15120: LD_STRING D12b-Sci-1
15122: PPUSH
15123: CALL_OW 94
// DialogueOff ;
15127: CALL_OW 7
// cratesStatus = 2 ;
15131: LD_ADDR_EXP 38
15135: PUSH
15136: LD_INT 2
15138: ST_TO_ADDR
// end ;
15139: END
// every 32 32$0 do
15140: GO 15142
15142: DISABLE
// begin DialogueOn ;
15143: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15147: LD_EXP 10
15151: PPUSH
15152: LD_STRING D12c-Sci-1
15154: PPUSH
15155: CALL_OW 94
// DialogueOff ;
15159: CALL_OW 7
// wait ( 3 3$0 ) ;
15163: LD_INT 6300
15165: PPUSH
15166: CALL_OW 67
// DialogueOn ;
15170: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15174: LD_EXP 10
15178: PPUSH
15179: LD_STRING D12d-Sci-1
15181: PPUSH
15182: CALL_OW 94
// DialogueOff ;
15186: CALL_OW 7
// cratesStatus = 1 ;
15190: LD_ADDR_EXP 38
15194: PUSH
15195: LD_INT 1
15197: ST_TO_ADDR
// end ;
15198: END
// every 42 42$0 do
15199: GO 15201
15201: DISABLE
// begin DialogueOn ;
15202: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15206: LD_EXP 10
15210: PPUSH
15211: LD_STRING D12e-Sci-1
15213: PPUSH
15214: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15218: LD_EXP 1
15222: PPUSH
15223: LD_STRING D12e-JMM-1
15225: PPUSH
15226: CALL_OW 88
// DialogueOff ;
15230: CALL_OW 7
// cratesStatus = 2 ;
15234: LD_ADDR_EXP 38
15238: PUSH
15239: LD_INT 2
15241: ST_TO_ADDR
// end ;
15242: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15243: LD_INT 22
15245: PUSH
15246: LD_INT 6
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 21
15255: PUSH
15256: LD_INT 2
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 34
15265: PUSH
15266: LD_INT 51
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: PPUSH
15278: CALL_OW 69
15282: PUSH
15283: LD_INT 0
15285: GREATER
15286: IFFALSE 15369
15288: GO 15290
15290: DISABLE
15291: LD_INT 0
15293: PPUSH
// begin enable ;
15294: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15295: LD_ADDR_VAR 0 1
15299: PUSH
15300: LD_INT 22
15302: PUSH
15303: LD_INT 6
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: LD_INT 21
15315: PUSH
15316: LD_INT 1
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 21
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 69
15346: PUSH
15347: FOR_IN
15348: IFFALSE 15367
// ComAgressiveMove ( i , 138 , 168 ) ;
15350: LD_VAR 0 1
15354: PPUSH
15355: LD_INT 138
15357: PPUSH
15358: LD_INT 168
15360: PPUSH
15361: CALL_OW 114
15365: GO 15347
15367: POP
15368: POP
// end ;
15369: PPOPN 1
15371: END
// every 0 0$1 do var i ;
15372: GO 15374
15374: DISABLE
15375: LD_INT 0
15377: PPUSH
// begin enable ;
15378: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15379: LD_ADDR_VAR 0 1
15383: PUSH
15384: LD_INT 5
15386: PPUSH
15387: LD_INT 2
15389: PUSH
15390: LD_INT 22
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 22
15402: PUSH
15403: LD_INT 6
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: PPUSH
15418: CALL_OW 70
15422: PUSH
15423: FOR_IN
15424: IFFALSE 15488
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
15426: LD_INT 5
15428: PPUSH
15429: LD_INT 22
15431: PUSH
15432: LD_INT 6
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PUSH
15439: LD_INT 34
15441: PUSH
15442: LD_INT 51
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 70
15457: PUSH
15458: LD_INT 0
15460: GREATER
15461: IFFALSE 15477
// sendedConvoys = sendedConvoys + 1 ;
15463: LD_ADDR_EXP 39
15467: PUSH
15468: LD_EXP 39
15472: PUSH
15473: LD_INT 1
15475: PLUS
15476: ST_TO_ADDR
// RemoveUnit ( i ) ;
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 64
// end ;
15486: GO 15423
15488: POP
15489: POP
// end ; end_of_file
15490: PPOPN 1
15492: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15493: LD_VAR 0 1
15497: PUSH
15498: LD_INT 1
15500: EQUAL
15501: PUSH
15502: LD_VAR 0 2
15506: PUSH
15507: LD_INT 3
15509: EQUAL
15510: AND
15511: IFFALSE 15521
// contactWithRussian = 1 ;
15513: LD_ADDR_EXP 22
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// end ;
15521: PPOPN 2
15523: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 266
15533: PUSH
15534: LD_INT 36
15536: EQUAL
15537: PUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 255
15547: PUSH
15548: LD_INT 1
15550: EQUAL
15551: AND
15552: PUSH
15553: LD_INT 22
15555: PUSH
15556: LD_INT 1
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 21
15565: PUSH
15566: LD_INT 2
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 33
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: LIST
15587: PPUSH
15588: CALL_OW 69
15592: PUSH
15593: LD_INT 0
15595: EQUAL
15596: AND
15597: PUSH
15598: LD_EXP 23
15602: PUSH
15603: LD_INT 0
15605: EQUAL
15606: AND
15607: IFFALSE 15687
// begin firstTower = 1 ;
15609: LD_ADDR_EXP 23
15613: PUSH
15614: LD_INT 1
15616: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15617: LD_INT 22
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 21
15629: PUSH
15630: LD_INT 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 25
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 26
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_EXP 1
15672: PUSH
15673: EMPTY
15674: LIST
15675: DIFF
15676: PPUSH
15677: LD_STRING D3b-Mech1-1
15679: PPUSH
15680: LD_STRING D3b-Mech1-1
15682: PPUSH
15683: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 266
15696: PUSH
15697: LD_INT 0
15699: EQUAL
15700: PUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 255
15710: PUSH
15711: LD_INT 1
15713: EQUAL
15714: AND
15715: IFFALSE 15729
// SetBName ( building , theta ) ;
15717: LD_VAR 0 1
15721: PPUSH
15722: LD_STRING theta
15724: PPUSH
15725: CALL_OW 500
// if GetSide ( building ) = 3 then
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 255
15738: PUSH
15739: LD_INT 3
15741: EQUAL
15742: IFFALSE 15816
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15744: LD_ADDR_EXP 31
15748: PUSH
15749: LD_EXP 31
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: CALL_OW 3
15761: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15762: LD_ADDR_EXP 31
15766: PUSH
15767: LD_EXP 31
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 3
15779: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15780: LD_ADDR_EXP 31
15784: PUSH
15785: LD_EXP 31
15789: PPUSH
15790: LD_INT 1
15792: PPUSH
15793: CALL_OW 3
15797: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15798: LD_ADDR_EXP 31
15802: PUSH
15803: LD_EXP 31
15807: PPUSH
15808: LD_INT 1
15810: PPUSH
15811: CALL_OW 3
15815: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15816: LD_VAR 0 1
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 3
15828: EQUAL
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 266
15839: PUSH
15840: LD_INT 0
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 1
15848: PPUSH
15849: CALL_OW 266
15853: PUSH
15854: LD_INT 2
15856: EQUAL
15857: OR
15858: PUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 266
15868: PUSH
15869: LD_INT 4
15871: EQUAL
15872: OR
15873: PUSH
15874: EMPTY
15875: LIST
15876: AND
15877: IFFALSE 15888
// ComUpgrade ( building ) ;
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15888: LD_VAR 0 1
15892: PPUSH
15893: CALL_OW 255
15897: PUSH
15898: LD_INT 3
15900: EQUAL
15901: PUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PUSH
15912: LD_INT 32
15914: EQUAL
15915: AND
15916: IFFALSE 15957
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15918: LD_VAR 0 1
15922: PPUSH
15923: LD_INT 42
15925: PUSH
15926: LD_INT 43
15928: PUSH
15929: LD_INT 44
15931: PUSH
15932: LD_INT 46
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: PPUSH
15944: LD_INT 4
15946: PPUSH
15947: CALL_OW 12
15951: ARRAY
15952: PPUSH
15953: CALL_OW 208
// end ; end ;
15957: PPOPN 1
15959: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
15960: LD_VAR 0 1
15964: PUSH
15965: LD_EXP 15
15969: EQUAL
15970: IFFALSE 15980
// JoanStatus = 0 ;
15972: LD_ADDR_EXP 16
15976: PUSH
15977: LD_INT 0
15979: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15980: LD_VAR 0 1
15984: PPUSH
15985: CALL_OW 255
15989: PUSH
15990: LD_INT 1
15992: EQUAL
15993: PUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL_OW 247
16003: PUSH
16004: LD_INT 1
16006: EQUAL
16007: AND
16008: IFFALSE 16084
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 257
16019: PUSH
16020: LD_INT 1
16022: EQUAL
16023: PUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 257
16033: PUSH
16034: LD_INT 2
16036: EQUAL
16037: OR
16038: PUSH
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 257
16048: PUSH
16049: LD_INT 3
16051: EQUAL
16052: OR
16053: PUSH
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 257
16063: PUSH
16064: LD_INT 4
16066: EQUAL
16067: OR
16068: IFFALSE 16084
// unitLost = unitLost + 1 ;
16070: LD_ADDR_EXP 30
16074: PUSH
16075: LD_EXP 30
16079: PUSH
16080: LD_INT 1
16082: PLUS
16083: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 255
16093: PUSH
16094: LD_INT 3
16096: EQUAL
16097: PUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: CALL_OW 247
16107: PUSH
16108: LD_INT 3
16110: EQUAL
16111: AND
16112: IFFALSE 16804
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 266
16123: PUSH
16124: LD_INT 31
16126: EQUAL
16127: PUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: CALL_OW 266
16137: PUSH
16138: LD_INT 32
16140: EQUAL
16141: OR
16142: PUSH
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 266
16152: PUSH
16153: LD_INT 36
16155: EQUAL
16156: OR
16157: PUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 266
16167: PUSH
16168: LD_INT 0
16170: EQUAL
16171: OR
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 266
16182: PUSH
16183: LD_INT 24
16185: EQUAL
16186: OR
16187: PUSH
16188: LD_VAR 0 1
16192: PPUSH
16193: CALL_OW 266
16197: PUSH
16198: LD_INT 17
16200: EQUAL
16201: OR
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 266
16212: PUSH
16213: LD_INT 25
16215: EQUAL
16216: OR
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 266
16227: PUSH
16228: LD_INT 19
16230: EQUAL
16231: OR
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 266
16242: PUSH
16243: LD_INT 20
16245: EQUAL
16246: OR
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 266
16257: PUSH
16258: LD_INT 18
16260: EQUAL
16261: OR
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 266
16272: PUSH
16273: LD_INT 21
16275: EQUAL
16276: OR
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 266
16287: PUSH
16288: LD_INT 23
16290: EQUAL
16291: OR
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 266
16302: PUSH
16303: LD_INT 16
16305: EQUAL
16306: OR
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 266
16317: PUSH
16318: LD_INT 6
16320: EQUAL
16321: OR
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 266
16332: PUSH
16333: LD_INT 29
16335: EQUAL
16336: OR
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 266
16347: PUSH
16348: LD_INT 26
16350: EQUAL
16351: OR
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 266
16362: PUSH
16363: LD_INT 30
16365: EQUAL
16366: OR
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 266
16377: PUSH
16378: LD_INT 28
16380: EQUAL
16381: OR
16382: PUSH
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 266
16392: PUSH
16393: LD_INT 27
16395: EQUAL
16396: OR
16397: PUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 266
16407: PUSH
16408: LD_INT 33
16410: EQUAL
16411: OR
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 266
16422: PUSH
16423: LD_INT 2
16425: EQUAL
16426: OR
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 266
16437: PUSH
16438: LD_INT 4
16440: EQUAL
16441: OR
16442: IFFALSE 16528
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
16444: LD_ADDR_EXP 31
16448: PUSH
16449: LD_EXP 31
16453: PUSH
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 266
16463: ADD
16464: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16465: LD_ADDR_EXP 31
16469: PUSH
16470: LD_EXP 31
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 250
16484: ADD
16485: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16486: LD_ADDR_EXP 31
16490: PUSH
16491: LD_EXP 31
16495: PUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 251
16505: ADD
16506: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16507: LD_ADDR_EXP 31
16511: PUSH
16512: LD_EXP 31
16516: PUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 254
16526: ADD
16527: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 266
16537: PUSH
16538: LD_INT 1
16540: EQUAL
16541: IFFALSE 16620
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16543: LD_ADDR_EXP 31
16547: PUSH
16548: LD_EXP 31
16552: PUSH
16553: LD_INT 0
16555: ADD
16556: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16557: LD_ADDR_EXP 31
16561: PUSH
16562: LD_EXP 31
16566: PUSH
16567: LD_VAR 0 1
16571: PPUSH
16572: CALL_OW 250
16576: ADD
16577: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16578: LD_ADDR_EXP 31
16582: PUSH
16583: LD_EXP 31
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 251
16597: ADD
16598: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16599: LD_ADDR_EXP 31
16603: PUSH
16604: LD_EXP 31
16608: PUSH
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 254
16618: ADD
16619: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 266
16629: PUSH
16630: LD_INT 3
16632: EQUAL
16633: IFFALSE 16712
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16635: LD_ADDR_EXP 31
16639: PUSH
16640: LD_EXP 31
16644: PUSH
16645: LD_INT 2
16647: ADD
16648: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16649: LD_ADDR_EXP 31
16653: PUSH
16654: LD_EXP 31
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 250
16668: ADD
16669: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16670: LD_ADDR_EXP 31
16674: PUSH
16675: LD_EXP 31
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 251
16689: ADD
16690: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16691: LD_ADDR_EXP 31
16695: PUSH
16696: LD_EXP 31
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 254
16710: ADD
16711: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 266
16721: PUSH
16722: LD_INT 5
16724: EQUAL
16725: IFFALSE 16804
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16727: LD_ADDR_EXP 31
16731: PUSH
16732: LD_EXP 31
16736: PUSH
16737: LD_INT 4
16739: ADD
16740: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16741: LD_ADDR_EXP 31
16745: PUSH
16746: LD_EXP 31
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 250
16760: ADD
16761: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16762: LD_ADDR_EXP 31
16766: PUSH
16767: LD_EXP 31
16771: PUSH
16772: LD_VAR 0 1
16776: PPUSH
16777: CALL_OW 251
16781: ADD
16782: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16783: LD_ADDR_EXP 31
16787: PUSH
16788: LD_EXP 31
16792: PUSH
16793: LD_VAR 0 1
16797: PPUSH
16798: CALL_OW 254
16802: ADD
16803: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL_OW 257
16813: PUSH
16814: LD_INT 3
16816: EQUAL
16817: PUSH
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL_OW 255
16827: PUSH
16828: LD_INT 3
16830: EQUAL
16831: AND
16832: PUSH
16833: LD_INT 21
16835: PPUSH
16836: CALL_OW 302
16840: AND
16841: PUSH
16842: LD_INT 21
16844: PPUSH
16845: CALL_OW 255
16849: PUSH
16850: LD_INT 3
16852: EQUAL
16853: AND
16854: IFFALSE 16922
// begin uc_side = 3 ;
16856: LD_ADDR_OWVAR 20
16860: PUSH
16861: LD_INT 3
16863: ST_TO_ADDR
// uc_nation = 3 ;
16864: LD_ADDR_OWVAR 21
16868: PUSH
16869: LD_INT 3
16871: ST_TO_ADDR
// hc_gallery :=  ;
16872: LD_ADDR_OWVAR 33
16876: PUSH
16877: LD_STRING 
16879: ST_TO_ADDR
// hc_name :=  ;
16880: LD_ADDR_OWVAR 26
16884: PUSH
16885: LD_STRING 
16887: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16888: LD_INT 0
16890: PPUSH
16891: LD_EXP 34
16895: PPUSH
16896: LD_EXP 35
16900: PPUSH
16901: CALL_OW 12
16905: PPUSH
16906: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16910: CALL_OW 44
16914: PPUSH
16915: LD_INT 21
16917: PPUSH
16918: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 255
16931: PUSH
16932: LD_INT 3
16934: EQUAL
16935: PUSH
16936: LD_VAR 0 1
16940: PPUSH
16941: CALL_OW 264
16945: PUSH
16946: LD_INT 52
16948: EQUAL
16949: AND
16950: PUSH
16951: LD_INT 21
16953: PPUSH
16954: CALL_OW 302
16958: AND
16959: PUSH
16960: LD_INT 21
16962: PPUSH
16963: CALL_OW 255
16967: PUSH
16968: LD_INT 3
16970: EQUAL
16971: AND
16972: IFFALSE 16993
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
16974: LD_INT 21
16976: PPUSH
16977: LD_INT 22
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: LD_INT 52
16988: PPUSH
16989: CALL_OW 125
// end ;
16993: PPOPN 1
16995: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
17000: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17001: LD_VAR 0 1
17005: PPUSH
17006: CALL_OW 264
17010: PUSH
17011: LD_INT 51
17013: EQUAL
17014: PUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 255
17024: PUSH
17025: LD_INT 3
17027: EQUAL
17028: AND
17029: IFFALSE 17091
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17031: LD_ADDR_VAR 0 5
17035: PUSH
17036: LD_INT 2
17038: PPUSH
17039: CALL_OW 274
17043: PPUSH
17044: LD_INT 1
17046: PPUSH
17047: CALL_OW 275
17051: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17052: LD_INT 2
17054: PPUSH
17055: CALL_OW 274
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: LD_VAR 0 5
17067: PUSH
17068: LD_INT 100
17070: MINUS
17071: PPUSH
17072: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17076: LD_VAR 0 1
17080: PPUSH
17081: LD_INT 1
17083: PPUSH
17084: LD_INT 100
17086: PPUSH
17087: CALL_OW 291
// end ; if building = rufabsupp then
17091: LD_VAR 0 2
17095: PUSH
17096: LD_INT 17
17098: EQUAL
17099: IFFALSE 17113
// SetSide ( vehicle , 6 ) ;
17101: LD_VAR 0 1
17105: PPUSH
17106: LD_INT 6
17108: PPUSH
17109: CALL_OW 235
// end ;
17113: PPOPN 5
17115: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 255
17125: PUSH
17126: LD_INT 3
17128: EQUAL
17129: IFFALSE 17160
// begin tamedApemans = tamedApemans + 1 ;
17131: LD_ADDR_EXP 32
17135: PUSH
17136: LD_EXP 32
17140: PUSH
17141: LD_INT 1
17143: PLUS
17144: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17145: LD_VAR 0 1
17149: PPUSH
17150: LD_INT 106
17152: PPUSH
17153: LD_INT 85
17155: PPUSH
17156: CALL_OW 111
// end ; end ;
17160: PPOPN 2
17162: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17163: LD_INT 0
17165: PPUSH
17166: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 255
17176: PUSH
17177: LD_INT 3
17179: EQUAL
17180: PUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 247
17190: PUSH
17191: LD_INT 2
17193: EQUAL
17194: AND
17195: IFFALSE 17304
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17197: LD_VAR 0 1
17201: PPUSH
17202: CALL_OW 264
17206: PUSH
17207: LD_INT 42
17209: EQUAL
17210: PUSH
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 264
17220: PUSH
17221: LD_INT 43
17223: EQUAL
17224: OR
17225: PUSH
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 264
17235: PUSH
17236: LD_INT 44
17238: EQUAL
17239: OR
17240: PUSH
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 264
17250: PUSH
17251: LD_INT 46
17253: EQUAL
17254: OR
17255: IFFALSE 17304
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17257: LD_INT 21
17259: PPUSH
17260: LD_VAR 0 1
17264: PPUSH
17265: CALL_OW 265
17269: PPUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: CALL_OW 262
17279: PPUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 263
17289: PPUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: CALL_OW 264
17299: PPUSH
17300: CALL_OW 185
// end ;
17304: PPOPN 3
17306: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 255
17316: PUSH
17317: LD_INT 3
17319: EQUAL
17320: PUSH
17321: LD_VAR 0 2
17325: PPUSH
17326: CALL_OW 255
17330: PUSH
17331: LD_INT 3
17333: EQUAL
17334: AND
17335: PUSH
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 302
17345: AND
17346: IFFALSE 17388
// begin ComRepairVehicle ( human , vehicle ) ;
17348: LD_VAR 0 2
17352: PPUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17362: LD_VAR 0 2
17366: PPUSH
17367: LD_VAR 0 1
17371: PPUSH
17372: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 100
17383: PPUSH
17384: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17388: LD_VAR 0 1
17392: PPUSH
17393: CALL_OW 255
17397: PUSH
17398: LD_INT 3
17400: EQUAL
17401: PUSH
17402: LD_VAR 0 2
17406: PPUSH
17407: CALL_OW 255
17411: PUSH
17412: LD_INT 3
17414: EQUAL
17415: AND
17416: PUSH
17417: LD_INT 21
17419: PPUSH
17420: CALL_OW 302
17424: AND
17425: PUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 302
17435: NOT
17436: AND
17437: IFFALSE 17451
// ComEnterUnit ( human , rufab ) ;
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_INT 21
17446: PPUSH
17447: CALL_OW 120
// end ;
17451: PPOPN 2
17453: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
17454: LD_VAR 0 1
17458: PUSH
17459: LD_INT 21
17461: EQUAL
17462: PUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: CALL_OW 255
17472: PUSH
17473: LD_INT 3
17475: EQUAL
17476: AND
17477: IFFALSE 17491
// SetLives ( human , 1000 ) ;
17479: LD_VAR 0 2
17483: PPUSH
17484: LD_INT 1000
17486: PPUSH
17487: CALL_OW 234
// end ;
17491: PPOPN 2
17493: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
17494: LD_EXP 41
17498: NOT
17499: IFFALSE 17509
// firstCrateSpawn := true ;
17501: LD_ADDR_EXP 41
17505: PUSH
17506: LD_INT 1
17508: ST_TO_ADDR
// end ; end_of_file
17509: PPOPN 5
17511: END
// every 0 0$30 trigger cratesStatus = 1 do
17512: LD_EXP 38
17516: PUSH
17517: LD_INT 1
17519: EQUAL
17520: IFFALSE 17584
17522: GO 17524
17524: DISABLE
// begin enable ;
17525: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
17526: LD_INT 350
17528: PUSH
17529: LD_INT 1050
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 2
17541: PPUSH
17542: CALL_OW 12
17546: ARRAY
17547: PPUSH
17548: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17552: LD_INT 4
17554: PUSH
17555: LD_INT 5
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_INT 2
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 7
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 55
// end ;
17584: END
// every 1 1$0 trigger cratesStatus = 2 do
17585: LD_EXP 38
17589: PUSH
17590: LD_INT 2
17592: EQUAL
17593: IFFALSE 17657
17595: GO 17597
17597: DISABLE
// begin enable ;
17598: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17599: LD_INT 3150
17601: PUSH
17602: LD_INT 4550
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 1
17611: PPUSH
17612: LD_INT 2
17614: PPUSH
17615: CALL_OW 12
17619: ARRAY
17620: PPUSH
17621: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17625: LD_INT 2
17627: PUSH
17628: LD_INT 5
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 2
17640: PPUSH
17641: CALL_OW 12
17645: ARRAY
17646: PPUSH
17647: LD_INT 8
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 55
// end ;
17657: END
// every 0 0$30 + 0 0$10 do
17658: GO 17660
17660: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17661: LD_INT 4
17663: PUSH
17664: LD_INT 5
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 1
17673: PPUSH
17674: LD_INT 2
17676: PPUSH
17677: CALL_OW 12
17681: ARRAY
17682: PPUSH
17683: LD_INT 8
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 55
// Wait ( 0 0$15 ) ;
17693: LD_INT 525
17695: PPUSH
17696: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17700: LD_INT 4
17702: PUSH
17703: LD_INT 5
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 2
17715: PPUSH
17716: CALL_OW 12
17720: ARRAY
17721: PPUSH
17722: LD_INT 8
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 55
// Wait ( 0 0$20 ) ;
17732: LD_INT 700
17734: PPUSH
17735: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17739: LD_INT 4
17741: PUSH
17742: LD_INT 5
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_INT 2
17754: PPUSH
17755: CALL_OW 12
17759: ARRAY
17760: PPUSH
17761: LD_INT 8
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: CALL_OW 55
// end ; end_of_file
17771: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17772: LD_EXP 24
17776: PUSH
17777: LD_INT 1
17779: EQUAL
17780: IFFALSE 18081
17782: GO 17784
17784: DISABLE
17785: LD_INT 0
17787: PPUSH
17788: PPUSH
17789: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_INT 22
17797: PUSH
17798: LD_INT 1
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 2
17817: PUSH
17818: LD_INT 30
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: PUSH
17828: LD_INT 30
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: LIST
17847: PPUSH
17848: CALL_OW 69
17852: ST_TO_ADDR
// for i in tmp do
17853: LD_ADDR_VAR 0 1
17857: PUSH
17858: LD_VAR 0 2
17862: PUSH
17863: FOR_IN
17864: IFFALSE 17897
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17866: LD_ADDR_VAR 0 3
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_VAR 0 1
17880: PPUSH
17881: CALL_OW 274
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 275
17893: PLUS
17894: ST_TO_ADDR
17895: GO 17863
17897: POP
17898: POP
// strings = [ ] ;
17899: LD_ADDR_EXP 27
17903: PUSH
17904: EMPTY
17905: ST_TO_ADDR
// if tmp = 0 then
17906: LD_VAR 0 2
17910: PUSH
17911: LD_INT 0
17913: EQUAL
17914: IFFALSE 17939
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17916: LD_ADDR_EXP 27
17920: PUSH
17921: LD_EXP 27
17925: PUSH
17926: LD_STRING #Am06-1
17928: PUSH
17929: LD_EXP 25
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: ADD
17938: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17939: LD_VAR 0 2
17943: PUSH
17944: LD_INT 0
17946: GREATER
17947: PUSH
17948: LD_EXP 25
17952: PUSH
17953: LD_VAR 0 3
17957: GREATER
17958: AND
17959: IFFALSE 17990
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17961: LD_ADDR_EXP 27
17965: PUSH
17966: LD_EXP 27
17970: PUSH
17971: LD_STRING #Am06-1
17973: PUSH
17974: LD_EXP 25
17978: PUSH
17979: LD_VAR 0 3
17983: MINUS
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: ADD
17989: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17990: LD_VAR 0 2
17994: PUSH
17995: LD_INT 0
17997: GREATER
17998: PUSH
17999: LD_EXP 25
18003: PUSH
18004: LD_VAR 0 3
18008: LESSEQUAL
18009: AND
18010: IFFALSE 18033
// strings = strings ^ [ #Am06-1 , 0 ] ;
18012: LD_ADDR_EXP 27
18016: PUSH
18017: LD_EXP 27
18021: PUSH
18022: LD_STRING #Am06-1
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: ADD
18032: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18033: LD_ADDR_EXP 26
18037: PUSH
18038: LD_EXP 26
18042: PUSH
18043: LD_INT 35
18045: MINUS
18046: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18047: LD_ADDR_EXP 27
18051: PUSH
18052: LD_EXP 27
18056: PUSH
18057: LD_STRING #Am06-2
18059: PUSH
18060: LD_EXP 26
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: ADD
18069: ST_TO_ADDR
// display_strings = strings ;
18070: LD_ADDR_OWVAR 47
18074: PUSH
18075: LD_EXP 27
18079: ST_TO_ADDR
// enable ;
18080: ENABLE
// end ; end_of_file
18081: PPOPN 3
18083: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
// j = 0 ;
18093: LD_ADDR_VAR 0 3
18097: PUSH
18098: LD_INT 0
18100: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18101: LD_INT 35
18103: PPUSH
18104: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
18108: LD_ADDR_VAR 0 2
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_INT 1
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 25
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 25
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 25
18158: PUSH
18159: LD_INT 3
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 25
18168: PUSH
18169: LD_INT 4
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: LIST
18187: PPUSH
18188: CALL_OW 69
18192: PUSH
18193: FOR_IN
18194: IFFALSE 18300
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18196: LD_INT 22
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 2
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 21
18231: PUSH
18232: LD_INT 3
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 59
18241: PUSH
18242: EMPTY
18243: LIST
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 91
18254: PUSH
18255: LD_VAR 0 2
18259: PUSH
18260: LD_INT 25
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: NOT
18278: IFFALSE 18298
// begin tmp = i ;
18280: LD_ADDR_VAR 0 4
18284: PUSH
18285: LD_VAR 0 2
18289: ST_TO_ADDR
// j = 1 ;
18290: LD_ADDR_VAR 0 3
18294: PUSH
18295: LD_INT 1
18297: ST_TO_ADDR
// end ; end ;
18298: GO 18193
18300: POP
18301: POP
// until j = 1 ;
18302: LD_VAR 0 3
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18101
// blockSpawn = 1 ;
18312: LD_ADDR_EXP 29
18316: PUSH
18317: LD_INT 1
18319: ST_TO_ADDR
// uc_side = 2 ;
18320: LD_ADDR_OWVAR 20
18324: PUSH
18325: LD_INT 2
18327: ST_TO_ADDR
// uc_nation = 2 ;
18328: LD_ADDR_OWVAR 21
18332: PUSH
18333: LD_INT 2
18335: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18336: LD_ADDR_EXP 19
18340: PUSH
18341: LD_STRING Kurt
18343: PPUSH
18344: LD_INT 0
18346: PPUSH
18347: CALL 5193 0 2
18351: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18352: LD_EXP 19
18356: PPUSH
18357: LD_VAR 0 4
18361: PPUSH
18362: CALL_OW 250
18366: PPUSH
18367: LD_VAR 0 4
18371: PPUSH
18372: CALL_OW 251
18376: PPUSH
18377: LD_INT 5
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 50
// InGameOn ;
18387: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18391: LD_EXP 19
18395: PPUSH
18396: CALL_OW 87
// wait ( 0 0$2 ) ;
18400: LD_INT 70
18402: PPUSH
18403: CALL_OW 67
// ComExitVehicle ( tmp ) ;
18407: LD_VAR 0 4
18411: PPUSH
18412: CALL_OW 121
// ComExitBuilding ( tmp ) ;
18416: LD_VAR 0 4
18420: PPUSH
18421: CALL_OW 122
// wait ( 0 0$1 ) ;
18425: LD_INT 35
18427: PPUSH
18428: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
18432: LD_EXP 19
18436: PPUSH
18437: LD_VAR 0 4
18441: PPUSH
18442: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
18446: LD_VAR 0 4
18450: PPUSH
18451: LD_EXP 19
18455: PPUSH
18456: CALL_OW 119
// DialogueOn ;
18460: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
18464: LD_EXP 19
18468: PPUSH
18469: LD_STRING D2-Kurt-1
18471: PPUSH
18472: CALL_OW 88
// if tmp = JMM then
18476: LD_VAR 0 4
18480: PUSH
18481: LD_EXP 1
18485: EQUAL
18486: IFFALSE 18578
// begin Say ( JMM , D2-JMM-1 ) ;
18488: LD_EXP 1
18492: PPUSH
18493: LD_STRING D2-JMM-1
18495: PPUSH
18496: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18500: LD_EXP 19
18504: PPUSH
18505: LD_STRING D2-Kurt-2
18507: PPUSH
18508: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
18512: LD_EXP 1
18516: PPUSH
18517: LD_STRING D2-JMM-2
18519: PPUSH
18520: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18524: LD_EXP 19
18528: PPUSH
18529: LD_STRING D2-Kurt-3
18531: PPUSH
18532: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
18536: LD_EXP 1
18540: PPUSH
18541: LD_STRING D2-JMM-3
18543: PPUSH
18544: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18548: LD_EXP 19
18552: PPUSH
18553: LD_STRING D2-Kurt-4
18555: PPUSH
18556: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18560: LD_EXP 1
18564: PPUSH
18565: LD_STRING D2-JMM-4
18567: PPUSH
18568: CALL_OW 88
// DialogueOff ;
18572: CALL_OW 7
// end else
18576: GO 18888
// begin if GetSex ( tmp ) = 1 then
18578: LD_VAR 0 4
18582: PPUSH
18583: CALL_OW 258
18587: PUSH
18588: LD_INT 1
18590: EQUAL
18591: IFFALSE 18605
// Say ( tmp , D2-Sol1-1 ) ;
18593: LD_VAR 0 4
18597: PPUSH
18598: LD_STRING D2-Sol1-1
18600: PPUSH
18601: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18605: LD_VAR 0 4
18609: PPUSH
18610: CALL_OW 258
18614: PUSH
18615: LD_INT 2
18617: EQUAL
18618: IFFALSE 18632
// Say ( tmp , D2-FSol1-1 ) ;
18620: LD_VAR 0 4
18624: PPUSH
18625: LD_STRING D2-FSol1-1
18627: PPUSH
18628: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18632: LD_EXP 19
18636: PPUSH
18637: LD_STRING D2-Kurt-2
18639: PPUSH
18640: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18644: LD_VAR 0 4
18648: PPUSH
18649: CALL_OW 258
18653: PUSH
18654: LD_INT 1
18656: EQUAL
18657: IFFALSE 18671
// Say ( tmp , D2-Sol1-2 ) ;
18659: LD_VAR 0 4
18663: PPUSH
18664: LD_STRING D2-Sol1-2
18666: PPUSH
18667: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18671: LD_VAR 0 4
18675: PPUSH
18676: CALL_OW 258
18680: PUSH
18681: LD_INT 2
18683: EQUAL
18684: IFFALSE 18698
// Say ( tmp , D2-FSol1-2 ) ;
18686: LD_VAR 0 4
18690: PPUSH
18691: LD_STRING D2-FSol1-2
18693: PPUSH
18694: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18698: LD_EXP 19
18702: PPUSH
18703: LD_STRING D2-Kurt-3
18705: PPUSH
18706: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18710: LD_VAR 0 4
18714: PPUSH
18715: CALL_OW 258
18719: PUSH
18720: LD_INT 1
18722: EQUAL
18723: IFFALSE 18737
// Say ( tmp , D2-Sol1-3 ) ;
18725: LD_VAR 0 4
18729: PPUSH
18730: LD_STRING D2-Sol1-3
18732: PPUSH
18733: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18737: LD_VAR 0 4
18741: PPUSH
18742: CALL_OW 258
18746: PUSH
18747: LD_INT 2
18749: EQUAL
18750: IFFALSE 18764
// Say ( tmp , D2-FSol1-3 ) ;
18752: LD_VAR 0 4
18756: PPUSH
18757: LD_STRING D2-FSol1-3
18759: PPUSH
18760: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18764: LD_EXP 19
18768: PPUSH
18769: LD_STRING D2-Kurt-4
18771: PPUSH
18772: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18776: LD_VAR 0 4
18780: PPUSH
18781: CALL_OW 258
18785: PUSH
18786: LD_INT 1
18788: EQUAL
18789: IFFALSE 18803
// Say ( tmp , D2-Sol1-4 ) ;
18791: LD_VAR 0 4
18795: PPUSH
18796: LD_STRING D2-Sol1-4
18798: PPUSH
18799: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18803: LD_VAR 0 4
18807: PPUSH
18808: CALL_OW 258
18812: PUSH
18813: LD_INT 2
18815: EQUAL
18816: IFFALSE 18830
// Say ( tmp , D2-FSol1-4 ) ;
18818: LD_VAR 0 4
18822: PPUSH
18823: LD_STRING D2-FSol1-4
18825: PPUSH
18826: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18830: LD_VAR 0 4
18834: PPUSH
18835: CALL_OW 258
18839: PUSH
18840: LD_INT 1
18842: EQUAL
18843: IFFALSE 18857
// Say ( tmp , D2-Sol1-5 ) ;
18845: LD_VAR 0 4
18849: PPUSH
18850: LD_STRING D2-Sol1-5
18852: PPUSH
18853: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18857: LD_VAR 0 4
18861: PPUSH
18862: CALL_OW 258
18866: PUSH
18867: LD_INT 2
18869: EQUAL
18870: IFFALSE 18884
// Say ( tmp , D2-FSol1-5 ) ;
18872: LD_VAR 0 4
18876: PPUSH
18877: LD_STRING D2-FSol1-5
18879: PPUSH
18880: CALL_OW 88
// DialogueOff ;
18884: CALL_OW 7
// end ; dec = ShowQuery1 ;
18888: LD_ADDR_VAR 0 6
18892: PUSH
18893: CALL 5795 0 0
18897: ST_TO_ADDR
// if dec = 1 then
18898: LD_VAR 0 6
18902: PUSH
18903: LD_INT 1
18905: EQUAL
18906: IFFALSE 18948
// begin DialogueOn ;
18908: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18912: LD_EXP 19
18916: PPUSH
18917: LD_STRING D2a-Kurt-1
18919: PPUSH
18920: CALL_OW 88
// DialogueOff ;
18924: CALL_OW 7
// InGameOff ;
18928: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18932: LD_INT 1
18934: PPUSH
18935: LD_INT 2
18937: PPUSH
18938: LD_INT 2
18940: PPUSH
18941: LD_INT 1
18943: PPUSH
18944: CALL_OW 80
// end ; if dec = 2 then
18948: LD_VAR 0 6
18952: PUSH
18953: LD_INT 2
18955: EQUAL
18956: IFFALSE 19456
// begin DialogueOn ;
18958: CALL_OW 6
// if tmp = JMM then
18962: LD_VAR 0 4
18966: PUSH
18967: LD_EXP 1
18971: EQUAL
18972: IFFALSE 19028
// begin Say ( JMM , D2b-JMM-1 ) ;
18974: LD_EXP 1
18978: PPUSH
18979: LD_STRING D2b-JMM-1
18981: PPUSH
18982: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18986: LD_EXP 19
18990: PPUSH
18991: LD_STRING D2b-Kurt-1
18993: PPUSH
18994: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18998: LD_EXP 1
19002: PPUSH
19003: LD_STRING D2b-JMM-2
19005: PPUSH
19006: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19010: LD_EXP 19
19014: PPUSH
19015: LD_STRING D2b-Kurt-2
19017: PPUSH
19018: CALL_OW 88
// DialogueOff ;
19022: CALL_OW 7
// end else
19026: GO 19218
// begin if GetSex ( tmp ) = 1 then
19028: LD_VAR 0 4
19032: PPUSH
19033: CALL_OW 258
19037: PUSH
19038: LD_INT 1
19040: EQUAL
19041: IFFALSE 19055
// Say ( tmp , D2b-Sol1-1 ) ;
19043: LD_VAR 0 4
19047: PPUSH
19048: LD_STRING D2b-Sol1-1
19050: PPUSH
19051: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19055: LD_VAR 0 4
19059: PPUSH
19060: CALL_OW 258
19064: PUSH
19065: LD_INT 2
19067: EQUAL
19068: IFFALSE 19082
// Say ( tmp , D2b-FSol1-1 ) ;
19070: LD_VAR 0 4
19074: PPUSH
19075: LD_STRING D2b-FSol1-1
19077: PPUSH
19078: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19082: LD_EXP 19
19086: PPUSH
19087: LD_STRING D2b-Kurt-1
19089: PPUSH
19090: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19094: LD_VAR 0 4
19098: PPUSH
19099: CALL_OW 258
19103: PUSH
19104: LD_INT 1
19106: EQUAL
19107: IFFALSE 19121
// Say ( tmp , D2b-Sol1-2 ) ;
19109: LD_VAR 0 4
19113: PPUSH
19114: LD_STRING D2b-Sol1-2
19116: PPUSH
19117: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19121: LD_VAR 0 4
19125: PPUSH
19126: CALL_OW 258
19130: PUSH
19131: LD_INT 2
19133: EQUAL
19134: IFFALSE 19148
// Say ( tmp , D2b-FSol1-2 ) ;
19136: LD_VAR 0 4
19140: PPUSH
19141: LD_STRING D2b-FSol1-2
19143: PPUSH
19144: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19148: LD_EXP 19
19152: PPUSH
19153: LD_STRING D2b-Kurt-2
19155: PPUSH
19156: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19160: LD_VAR 0 4
19164: PPUSH
19165: CALL_OW 258
19169: PUSH
19170: LD_INT 1
19172: EQUAL
19173: IFFALSE 19187
// Say ( tmp , D2c-Sol1-2 ) ;
19175: LD_VAR 0 4
19179: PPUSH
19180: LD_STRING D2c-Sol1-2
19182: PPUSH
19183: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19187: LD_VAR 0 4
19191: PPUSH
19192: CALL_OW 258
19196: PUSH
19197: LD_INT 2
19199: EQUAL
19200: IFFALSE 19214
// Say ( tmp , D2c-FSol1-2 ) ;
19202: LD_VAR 0 4
19206: PPUSH
19207: LD_STRING D2c-FSol1-2
19209: PPUSH
19210: CALL_OW 88
// DialogueOff ;
19214: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19218: LD_ADDR_VAR 0 7
19222: PUSH
19223: CALL 5869 0 0
19227: ST_TO_ADDR
// if dec2 = 1 then
19228: LD_VAR 0 7
19232: PUSH
19233: LD_INT 1
19235: EQUAL
19236: IFFALSE 19278
// begin DialogueOn ;
19238: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19242: LD_EXP 19
19246: PPUSH
19247: LD_STRING D2a-Kurt-1
19249: PPUSH
19250: CALL_OW 88
// DialogueOff ;
19254: CALL_OW 7
// InGameOff ;
19258: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19262: LD_INT 1
19264: PPUSH
19265: LD_INT 2
19267: PPUSH
19268: LD_INT 2
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL_OW 80
// end ; if dec2 = 2 then
19278: LD_VAR 0 7
19282: PUSH
19283: LD_INT 2
19285: EQUAL
19286: IFFALSE 19456
// begin if tmp = JMM then
19288: LD_VAR 0 4
19292: PUSH
19293: LD_EXP 1
19297: EQUAL
19298: IFFALSE 19358
// begin DialogueOn ;
19300: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19304: LD_EXP 1
19308: PPUSH
19309: LD_STRING D2c-JMM-1
19311: PPUSH
19312: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19316: LD_EXP 19
19320: PPUSH
19321: LD_STRING D2c-Kurt-1
19323: PPUSH
19324: CALL_OW 88
// DialogueOff ;
19328: CALL_OW 7
// InGameOff ;
19332: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19336: LD_EXP 19
19340: PPUSH
19341: LD_INT 9
19343: PPUSH
19344: CALL_OW 113
// readyToEscape = 1 ;
19348: LD_ADDR_EXP 21
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// end else
19356: GO 19456
// begin DialogueOn ;
19358: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19362: LD_VAR 0 4
19366: PPUSH
19367: CALL_OW 258
19371: PUSH
19372: LD_INT 1
19374: EQUAL
19375: IFFALSE 19389
// Say ( tmp , D2c-Sol1-1 ) ;
19377: LD_VAR 0 4
19381: PPUSH
19382: LD_STRING D2c-Sol1-1
19384: PPUSH
19385: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19389: LD_VAR 0 4
19393: PPUSH
19394: CALL_OW 258
19398: PUSH
19399: LD_INT 2
19401: EQUAL
19402: IFFALSE 19416
// Say ( tmp , D2c-FSol1-1 ) ;
19404: LD_VAR 0 4
19408: PPUSH
19409: LD_STRING D2c-FSol1-1
19411: PPUSH
19412: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19416: LD_EXP 19
19420: PPUSH
19421: LD_STRING D2c-Kurt-1
19423: PPUSH
19424: CALL_OW 88
// DialogueOff ;
19428: CALL_OW 7
// InGameOff ;
19432: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19436: LD_EXP 19
19440: PPUSH
19441: LD_INT 9
19443: PPUSH
19444: CALL_OW 113
// readyToEscape = 1 ;
19448: LD_ADDR_EXP 21
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
19456: LD_VAR 0 6
19460: PUSH
19461: LD_INT 3
19463: EQUAL
19464: IFFALSE 19638
// begin DialogueOn ;
19466: CALL_OW 6
// if tmp = JMM then
19470: LD_VAR 0 4
19474: PUSH
19475: LD_EXP 1
19479: EQUAL
19480: IFFALSE 19540
// begin DialogueOn ;
19482: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19486: LD_EXP 1
19490: PPUSH
19491: LD_STRING D2c-JMM-1
19493: PPUSH
19494: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19498: LD_EXP 19
19502: PPUSH
19503: LD_STRING D2c-Kurt-1
19505: PPUSH
19506: CALL_OW 88
// DialogueOff ;
19510: CALL_OW 7
// InGameOff ;
19514: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19518: LD_EXP 19
19522: PPUSH
19523: LD_INT 9
19525: PPUSH
19526: CALL_OW 113
// readyToEscape = 1 ;
19530: LD_ADDR_EXP 21
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// end else
19538: GO 19638
// begin DialogueOn ;
19540: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19544: LD_VAR 0 4
19548: PPUSH
19549: CALL_OW 258
19553: PUSH
19554: LD_INT 1
19556: EQUAL
19557: IFFALSE 19571
// Say ( tmp , D2c-Sol1-1 ) ;
19559: LD_VAR 0 4
19563: PPUSH
19564: LD_STRING D2c-Sol1-1
19566: PPUSH
19567: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19571: LD_VAR 0 4
19575: PPUSH
19576: CALL_OW 258
19580: PUSH
19581: LD_INT 2
19583: EQUAL
19584: IFFALSE 19598
// Say ( tmp , D2c-FSol1-1 ) ;
19586: LD_VAR 0 4
19590: PPUSH
19591: LD_STRING D2c-FSol1-1
19593: PPUSH
19594: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19598: LD_EXP 19
19602: PPUSH
19603: LD_STRING D2c-Kurt-1
19605: PPUSH
19606: CALL_OW 88
// DialogueOff ;
19610: CALL_OW 7
// InGameOff ;
19614: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19618: LD_EXP 19
19622: PPUSH
19623: LD_INT 9
19625: PPUSH
19626: CALL_OW 113
// readyToEscape = 1 ;
19630: LD_ADDR_EXP 21
19634: PUSH
19635: LD_INT 1
19637: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19638: LD_ADDR_EXP 29
19642: PUSH
19643: LD_INT 0
19645: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19646: LD_INT 35
19648: PPUSH
19649: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19653: LD_EXP 19
19657: PPUSH
19658: LD_INT 9
19660: PPUSH
19661: CALL_OW 308
19665: PUSH
19666: LD_EXP 21
19670: AND
19671: PUSH
19672: LD_EXP 19
19676: PPUSH
19677: CALL_OW 301
19681: OR
19682: IFFALSE 19646
// if IsDead ( Kurt ) then
19684: LD_EXP 19
19688: PPUSH
19689: CALL_OW 301
19693: IFFALSE 19697
// exit ;
19695: GO 19766
// RemoveUnit ( Kurt ) ;
19697: LD_EXP 19
19701: PPUSH
19702: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19706: LD_EXP 19
19710: PPUSH
19711: LD_STRING Kurt
19713: PPUSH
19714: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19718: LD_INT 1
19720: PPUSH
19721: LD_INT 2
19723: PPUSH
19724: CALL_OW 81
19728: PUSH
19729: LD_INT 0
19731: EQUAL
19732: IFFALSE 19742
// KurtStatus = 1 ;
19734: LD_ADDR_EXP 20
19738: PUSH
19739: LD_INT 1
19741: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19742: LD_INT 1
19744: PPUSH
19745: LD_INT 2
19747: PPUSH
19748: CALL_OW 81
19752: PUSH
19753: LD_INT 2
19755: EQUAL
19756: IFFALSE 19766
// KurtStatus = 2 ;
19758: LD_ADDR_EXP 20
19762: PUSH
19763: LD_INT 2
19765: ST_TO_ADDR
// end ; end_of_file
19766: LD_VAR 0 1
19770: RET
// every 0 0$1 do
19771: GO 19773
19773: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19774: LD_INT 3
19776: PPUSH
19777: LD_INT 32
19779: PPUSH
19780: LD_INT 3
19782: PPUSH
19783: CALL 5924 0 3
19787: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
19788: GO 19790
19790: DISABLE
19791: LD_INT 0
19793: PPUSH
// begin enemyWayX = [ ] ;
19794: LD_ADDR_EXP 45
19798: PUSH
19799: EMPTY
19800: ST_TO_ADDR
// enemyWayY = [ ] ;
19801: LD_ADDR_EXP 46
19805: PUSH
19806: EMPTY
19807: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_INT 1
19815: PPUSH
19816: LD_INT 2
19818: PPUSH
19819: CALL_OW 12
19823: ST_TO_ADDR
// if rnd = 1 then
19824: LD_VAR 0 1
19828: PUSH
19829: LD_INT 1
19831: EQUAL
19832: IFFALSE 19872
// begin enemyWayX = [ 93 , 84 , 104 ] ;
19834: LD_ADDR_EXP 45
19838: PUSH
19839: LD_INT 93
19841: PUSH
19842: LD_INT 84
19844: PUSH
19845: LD_INT 104
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
19853: LD_ADDR_EXP 46
19857: PUSH
19858: LD_INT 51
19860: PUSH
19861: LD_INT 35
19863: PUSH
19864: LD_INT 28
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: ST_TO_ADDR
// end ; if rnd = 2 then
19872: LD_VAR 0 1
19876: PUSH
19877: LD_INT 2
19879: EQUAL
19880: IFFALSE 19936
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
19882: LD_ADDR_EXP 45
19886: PUSH
19887: LD_INT 93
19889: PUSH
19890: LD_INT 52
19892: PUSH
19893: LD_INT 34
19895: PUSH
19896: LD_INT 28
19898: PUSH
19899: LD_INT 30
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
19909: LD_ADDR_EXP 46
19913: PUSH
19914: LD_INT 51
19916: PUSH
19917: LD_INT 45
19919: PUSH
19920: LD_INT 35
19922: PUSH
19923: LD_INT 26
19925: PUSH
19926: LD_INT 20
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: ST_TO_ADDR
// end ; enable ;
19936: ENABLE
// end ;
19937: PPOPN 1
19939: END
// every 0 0$1 do
19940: GO 19942
19942: DISABLE
// begin enable ;
19943: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
19944: LD_INT 3
19946: PPUSH
19947: LD_INT 2
19949: PPUSH
19950: LD_INT 11
19952: PPUSH
19953: LD_EXP 31
19957: PPUSH
19958: CALL 7347 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
19962: LD_INT 3
19964: PPUSH
19965: LD_INT 14
19967: PPUSH
19968: LD_EXP 31
19972: PPUSH
19973: CALL 9232 0 3
// if disableHealAI = 0 then
19977: LD_EXP 33
19981: PUSH
19982: LD_INT 0
19984: EQUAL
19985: IFFALSE 20006
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
19987: LD_INT 3
19989: PPUSH
19990: LD_INT 10
19992: PPUSH
19993: LD_INT 11
19995: PPUSH
19996: LD_INT 32
19998: PUSH
19999: EMPTY
20000: LIST
20001: PPUSH
20002: CALL 7738 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20006: LD_INT 3
20008: PPUSH
20009: LD_INT 51
20011: PPUSH
20012: LD_INT 7
20014: PPUSH
20015: CALL 8446 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20019: LD_INT 3
20021: PPUSH
20022: LD_INT 14
20024: PPUSH
20025: LD_INT 121
20027: PPUSH
20028: LD_INT 100
20030: PPUSH
20031: CALL 6319 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20035: LD_INT 3
20037: PPUSH
20038: LD_INT 24
20040: PPUSH
20041: LD_EXP 45
20045: PPUSH
20046: LD_EXP 46
20050: PPUSH
20051: CALL 6522 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20055: LD_INT 3
20057: PPUSH
20058: LD_INT 11
20060: PPUSH
20061: CALL 8589 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20065: LD_INT 3
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: CALL 9002 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20075: LD_INT 2
20077: PPUSH
20078: CALL_OW 303
20082: PUSH
20083: LD_INT 2
20085: PPUSH
20086: CALL_OW 255
20090: PUSH
20091: LD_INT 1
20093: EQUAL
20094: OR
20095: IFFALSE 20107
// DefendDepot ( 3 , rudepo ) ;
20097: LD_INT 3
20099: PPUSH
20100: LD_INT 2
20102: PPUSH
20103: CALL 8282 0 2
// end ;
20107: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20108: LD_INT 22
20110: PUSH
20111: LD_INT 3
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 21
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 55
20130: PUSH
20131: EMPTY
20132: LIST
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: LD_INT 34
20139: PUSH
20140: LD_INT 51
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: PUSH
20162: LD_INT 0
20164: EQUAL
20165: PUSH
20166: LD_INT 21
20168: PPUSH
20169: CALL_OW 255
20173: PUSH
20174: LD_INT 3
20176: EQUAL
20177: AND
20178: PUSH
20179: LD_INT 21
20181: PPUSH
20182: CALL_OW 302
20186: AND
20187: PUSH
20188: LD_INT 2
20190: PPUSH
20191: CALL_OW 255
20195: PUSH
20196: LD_INT 3
20198: EQUAL
20199: AND
20200: PUSH
20201: LD_INT 2
20203: PPUSH
20204: CALL_OW 302
20208: AND
20209: IFFALSE 20393
20211: GO 20213
20213: DISABLE
// begin enable ;
20214: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20215: LD_INT 2
20217: PPUSH
20218: CALL_OW 274
20222: PPUSH
20223: LD_INT 1
20225: PPUSH
20226: LD_INT 1000
20228: PPUSH
20229: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20233: LD_INT 3
20235: PPUSH
20236: LD_INT 21
20238: PPUSH
20239: LD_INT 5
20241: PUSH
20242: LD_INT 6
20244: PUSH
20245: LD_INT 6
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: PUSH
20253: LD_OWVAR 67
20257: ARRAY
20258: PPUSH
20259: LD_INT 43
20261: PUSH
20262: LD_INT 43
20264: PUSH
20265: LD_INT 44
20267: PUSH
20268: LD_INT 44
20270: PUSH
20271: LD_INT 46
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 43
20283: PUSH
20284: LD_INT 43
20286: PUSH
20287: LD_INT 43
20289: PUSH
20290: LD_INT 44
20292: PUSH
20293: LD_INT 44
20295: PUSH
20296: LD_INT 46
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 43
20309: PUSH
20310: LD_INT 43
20312: PUSH
20313: LD_INT 43
20315: PUSH
20316: LD_INT 44
20318: PUSH
20319: LD_INT 44
20321: PUSH
20322: LD_INT 46
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: PUSH
20338: LD_OWVAR 67
20342: ARRAY
20343: PPUSH
20344: LD_INT 1
20346: PPUSH
20347: LD_INT 1
20349: PPUSH
20350: LD_INT 22
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_INT 24
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: PPUSH
20366: LD_INT 2
20368: PPUSH
20369: CALL_OW 12
20373: ARRAY
20374: PUSH
20375: LD_INT 24
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: LD_OWVAR 67
20387: ARRAY
20388: PPUSH
20389: CALL 6165 0 7
// end ;
20393: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20394: LD_INT 17
20396: PPUSH
20397: CALL_OW 255
20401: PUSH
20402: LD_INT 3
20404: EQUAL
20405: PUSH
20406: LD_INT 17
20408: PPUSH
20409: CALL_OW 302
20413: AND
20414: PUSH
20415: LD_INT 2
20417: PPUSH
20418: CALL_OW 255
20422: PUSH
20423: LD_INT 3
20425: EQUAL
20426: AND
20427: PUSH
20428: LD_INT 2
20430: PPUSH
20431: CALL_OW 302
20435: AND
20436: IFFALSE 20503
20438: GO 20440
20440: DISABLE
// begin enable ;
20441: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
20442: LD_INT 17
20444: PPUSH
20445: LD_INT 22
20447: PPUSH
20448: LD_INT 1
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: LD_INT 42
20456: PUSH
20457: LD_INT 43
20459: PUSH
20460: LD_INT 44
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PPUSH
20471: LD_INT 3
20473: PPUSH
20474: CALL_OW 12
20478: ARRAY
20479: PPUSH
20480: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
20484: LD_INT 17
20486: PPUSH
20487: LD_INT 22
20489: PPUSH
20490: LD_INT 1
20492: PPUSH
20493: LD_INT 1
20495: PPUSH
20496: LD_INT 51
20498: PPUSH
20499: CALL_OW 185
// end ;
20503: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
20504: LD_INT 17
20506: PPUSH
20507: CALL_OW 302
20511: PUSH
20512: LD_INT 17
20514: PPUSH
20515: CALL_OW 255
20519: PUSH
20520: LD_INT 3
20522: EQUAL
20523: AND
20524: PUSH
20525: LD_INT 2
20527: PPUSH
20528: CALL_OW 302
20532: AND
20533: PUSH
20534: LD_INT 2
20536: PPUSH
20537: CALL_OW 255
20541: PUSH
20542: LD_INT 3
20544: EQUAL
20545: AND
20546: PUSH
20547: LD_INT 17
20549: PPUSH
20550: CALL_OW 313
20554: NOT
20555: AND
20556: IFFALSE 20650
20558: GO 20560
20560: DISABLE
20561: LD_INT 0
20563: PPUSH
// begin for i = 1 to 6 do
20564: LD_ADDR_VAR 0 1
20568: PUSH
20569: DOUBLE
20570: LD_INT 1
20572: DEC
20573: ST_TO_ADDR
20574: LD_INT 6
20576: PUSH
20577: FOR_TO
20578: IFFALSE 20648
// begin uc_side = 3 ;
20580: LD_ADDR_OWVAR 20
20584: PUSH
20585: LD_INT 3
20587: ST_TO_ADDR
// uc_nation = 3 ;
20588: LD_ADDR_OWVAR 21
20592: PUSH
20593: LD_INT 3
20595: ST_TO_ADDR
// hc_gallery :=  ;
20596: LD_ADDR_OWVAR 33
20600: PUSH
20601: LD_STRING 
20603: ST_TO_ADDR
// hc_name :=  ;
20604: LD_ADDR_OWVAR 26
20608: PUSH
20609: LD_STRING 
20611: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20612: LD_INT 0
20614: PPUSH
20615: LD_EXP 34
20619: PPUSH
20620: LD_EXP 35
20624: PPUSH
20625: CALL_OW 12
20629: PPUSH
20630: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
20634: CALL_OW 44
20638: PPUSH
20639: LD_INT 17
20641: PPUSH
20642: CALL_OW 52
// end ;
20646: GO 20577
20648: POP
20649: POP
// end ;
20650: PPOPN 1
20652: END
// every 2 2$0 do var i , j ;
20653: GO 20655
20655: DISABLE
20656: LD_INT 0
20658: PPUSH
20659: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
20660: LD_INT 14700
20662: PUSH
20663: LD_INT 33600
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PPUSH
20673: LD_INT 2
20675: PPUSH
20676: CALL_OW 12
20680: ARRAY
20681: PPUSH
20682: CALL_OW 67
// disableHealAI = 1 ;
20686: LD_ADDR_EXP 33
20690: PUSH
20691: LD_INT 1
20693: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20694: LD_ADDR_VAR 0 1
20698: PUSH
20699: LD_INT 22
20701: PUSH
20702: LD_INT 3
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 25
20711: PUSH
20712: LD_INT 4
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PPUSH
20723: CALL_OW 69
20727: PUSH
20728: FOR_IN
20729: IFFALSE 20742
// ComExitBuilding ( i ) ;
20731: LD_VAR 0 1
20735: PPUSH
20736: CALL_OW 122
20740: GO 20728
20742: POP
20743: POP
// wait ( 0 0$1 ) ;
20744: LD_INT 35
20746: PPUSH
20747: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20751: LD_INT 35
20753: PPUSH
20754: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_INT 3
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: PUSH
20773: LD_INT 25
20775: PUSH
20776: LD_INT 4
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PPUSH
20787: CALL_OW 69
20791: PUSH
20792: FOR_IN
20793: IFFALSE 20870
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20795: LD_ADDR_VAR 0 2
20799: PUSH
20800: LD_INT 19
20802: PPUSH
20803: LD_INT 22
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 25
20815: PUSH
20816: LD_INT 12
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 70
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20866
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20835: LD_VAR 0 1
20839: PPUSH
20840: LD_VAR 0 2
20844: PPUSH
20845: CALL_OW 250
20849: PPUSH
20850: LD_VAR 0 2
20854: PPUSH
20855: CALL_OW 251
20859: PPUSH
20860: CALL_OW 191
// end ;
20864: GO 20832
20866: POP
20867: POP
// end ;
20868: GO 20792
20870: POP
20871: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20872: LD_INT 22
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 25
20884: PUSH
20885: LD_INT 4
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 69
20900: PUSH
20901: LD_INT 0
20903: EQUAL
20904: PUSH
20905: LD_EXP 32
20909: PUSH
20910: LD_INT 6
20912: PUSH
20913: LD_INT 7
20915: PUSH
20916: LD_INT 8
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: PUSH
20924: LD_OWVAR 67
20928: ARRAY
20929: GREATEREQUAL
20930: OR
20931: PUSH
20932: LD_INT 19
20934: PPUSH
20935: LD_INT 22
20937: PUSH
20938: LD_INT 0
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 25
20947: PUSH
20948: LD_INT 12
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PPUSH
20959: CALL_OW 70
20963: PUSH
20964: LD_INT 0
20966: EQUAL
20967: OR
20968: IFFALSE 20751
// disableHealAI = 0 ;
20970: LD_ADDR_EXP 33
20974: PUSH
20975: LD_INT 0
20977: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20978: LD_ADDR_VAR 0 1
20982: PUSH
20983: LD_INT 22
20985: PUSH
20986: LD_INT 3
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 25
20995: PUSH
20996: LD_INT 12
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PPUSH
21007: CALL_OW 69
21011: PUSH
21012: FOR_IN
21013: IFFALSE 21029
// SetClass ( i , 16 ) ;
21015: LD_VAR 0 1
21019: PPUSH
21020: LD_INT 16
21022: PPUSH
21023: CALL_OW 336
21027: GO 21012
21029: POP
21030: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21031: LD_ADDR_VAR 0 1
21035: PUSH
21036: LD_INT 22
21038: PUSH
21039: LD_INT 3
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 25
21048: PUSH
21049: LD_INT 4
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 69
21064: PUSH
21065: FOR_IN
21066: IFFALSE 21085
// ComMoveXY ( i , 113 , 94 ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_INT 113
21075: PPUSH
21076: LD_INT 94
21078: PPUSH
21079: CALL_OW 111
21083: GO 21065
21085: POP
21086: POP
// end ;
21087: PPOPN 2
21089: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21090: LD_INT 21
21092: PPUSH
21093: CALL_OW 255
21097: PUSH
21098: LD_INT 3
21100: EQUAL
21101: PUSH
21102: LD_INT 21
21104: PPUSH
21105: CALL_OW 302
21109: AND
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_INT 3
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 34
21123: PUSH
21124: LD_INT 51
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: PUSH
21140: LD_INT 0
21142: EQUAL
21143: AND
21144: IFFALSE 21176
21146: GO 21148
21148: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
21149: LD_INT 21
21151: PPUSH
21152: LD_INT 23
21154: PPUSH
21155: LD_INT 1
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: LD_INT 51
21163: PPUSH
21164: CALL_OW 185
// wait ( 5 5$0 ) ;
21168: LD_INT 10500
21170: PPUSH
21171: CALL_OW 67
// enable ;
21175: ENABLE
// end ; end_of_file
21176: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21177: LD_EXP 26
21181: PUSH
21182: LD_INT 0
21184: LESSEQUAL
21185: IFFALSE 21334
21187: GO 21189
21189: DISABLE
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 21
21212: PUSH
21213: LD_INT 3
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 30
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: PPUSH
21253: CALL_OW 69
21257: ST_TO_ADDR
// for i in tmp do
21258: LD_ADDR_VAR 0 1
21262: PUSH
21263: LD_VAR 0 2
21267: PUSH
21268: FOR_IN
21269: IFFALSE 21302
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_VAR 0 3
21280: PUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 274
21290: PPUSH
21291: LD_INT 1
21293: PPUSH
21294: CALL_OW 275
21298: PLUS
21299: ST_TO_ADDR
21300: GO 21268
21302: POP
21303: POP
// if yourCrates >= needCrates then
21304: LD_VAR 0 3
21308: PUSH
21309: LD_EXP 25
21313: GREATEREQUAL
21314: IFFALSE 21327
// begin FinishMission ( yourCrates ) ;
21316: LD_VAR 0 3
21320: PPUSH
21321: CALL 21337 0 1
// end else
21325: GO 21334
// begin YouLost ( matmin ) ;
21327: LD_STRING matmin
21329: PPUSH
21330: CALL_OW 104
// end ; end ;
21334: PPOPN 3
21336: END
// export function FinishMission ( crates ) ; begin
21337: LD_INT 0
21339: PPUSH
// if crates + 100 > crates then
21340: LD_VAR 0 1
21344: PUSH
21345: LD_INT 100
21347: PLUS
21348: PUSH
21349: LD_VAR 0 1
21353: GREATER
21354: IFFALSE 21378
// begin AddMedal ( cans , 1 ) ;
21356: LD_STRING cans
21358: PPUSH
21359: LD_INT 1
21361: PPUSH
21362: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21366: LD_INT 1
21368: PPUSH
21369: LD_STRING 06_crates_1
21371: PPUSH
21372: CALL_OW 39
// end else
21376: GO 21399
// begin AddMedal ( cans , - 1 ) ;
21378: LD_STRING cans
21380: PPUSH
21381: LD_INT 1
21383: NEG
21384: PPUSH
21385: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21389: LD_INT 0
21391: PPUSH
21392: LD_STRING 06_crates_1
21394: PPUSH
21395: CALL_OW 39
// end ; if unitLost < 2 then
21399: LD_EXP 30
21403: PUSH
21404: LD_INT 2
21406: LESS
21407: IFFALSE 21421
// begin AddMedal ( people , 1 ) ;
21409: LD_STRING people
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: CALL_OW 101
// end else
21419: GO 21432
// begin AddMedal ( people , - 1 ) ;
21421: LD_STRING people
21423: PPUSH
21424: LD_INT 1
21426: NEG
21427: PPUSH
21428: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
21432: LD_EXP 28
21436: PPUSH
21437: LD_STRING 06_remoteVehs_1
21439: PPUSH
21440: CALL_OW 39
// if remoteVehiclesBuild = 1 then
21444: LD_EXP 28
21448: PUSH
21449: LD_INT 1
21451: EQUAL
21452: IFFALSE 21466
// begin AddMedal ( remote , 1 ) ;
21454: LD_STRING remote
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 101
// end else
21464: GO 21506
// begin if GetTech ( 18 , 1 ) = state_enabled then
21466: LD_INT 18
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 321
21476: PUSH
21477: LD_INT 1
21479: EQUAL
21480: IFFALSE 21495
// begin AddMedal ( remote , - 1 ) ;
21482: LD_STRING remote
21484: PPUSH
21485: LD_INT 1
21487: NEG
21488: PPUSH
21489: CALL_OW 101
// end else
21493: GO 21506
// begin AddMedal ( remote , - 2 ) ;
21495: LD_STRING remote
21497: PPUSH
21498: LD_INT 2
21500: NEG
21501: PPUSH
21502: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
21506: LD_EXP 20
21510: PPUSH
21511: LD_STRING 06_KurtStatus_1
21513: PPUSH
21514: CALL_OW 39
// GiveMedals ( Main ) ;
21518: LD_STRING Main
21520: PPUSH
21521: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21525: LD_INT 22
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 21
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 50
21547: PUSH
21548: EMPTY
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 25
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 25
21566: PUSH
21567: LD_INT 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 25
21576: PUSH
21577: LD_INT 3
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 25
21586: PUSH
21587: LD_INT 4
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: PPUSH
21612: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21616: LD_EXP 1
21620: PPUSH
21621: LD_EXP 43
21625: PUSH
21626: LD_STRING JMM
21628: STR
21629: PPUSH
21630: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21634: LD_EXP 2
21638: PPUSH
21639: LD_EXP 43
21643: PUSH
21644: LD_STRING Lisa
21646: STR
21647: PPUSH
21648: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21652: LD_EXP 3
21656: PPUSH
21657: LD_EXP 43
21661: PUSH
21662: LD_STRING Bobby
21664: STR
21665: PPUSH
21666: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21670: LD_EXP 4
21674: PPUSH
21675: LD_EXP 43
21679: PUSH
21680: LD_STRING Cyrus
21682: STR
21683: PPUSH
21684: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21688: LD_EXP 5
21692: PPUSH
21693: LD_EXP 43
21697: PUSH
21698: LD_STRING Frank
21700: STR
21701: PPUSH
21702: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21706: LD_EXP 6
21710: PPUSH
21711: LD_EXP 43
21715: PUSH
21716: LD_STRING Brown
21718: STR
21719: PPUSH
21720: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21724: LD_EXP 7
21728: PPUSH
21729: LD_EXP 43
21733: PUSH
21734: LD_STRING Donaldson
21736: STR
21737: PPUSH
21738: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21742: LD_EXP 8
21746: PPUSH
21747: LD_EXP 43
21751: PUSH
21752: LD_STRING Gladstone
21754: STR
21755: PPUSH
21756: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21760: LD_EXP 9
21764: PPUSH
21765: LD_EXP 43
21769: PUSH
21770: LD_STRING Denis
21772: STR
21773: PPUSH
21774: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21778: LD_EXP 15
21782: PPUSH
21783: LD_EXP 43
21787: PUSH
21788: LD_STRING Joan
21790: STR
21791: PPUSH
21792: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21796: LD_EXP 16
21800: PPUSH
21801: LD_STRING 06_JoanStatus_1
21803: PPUSH
21804: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21808: LD_INT 50
21810: PUSH
21811: EMPTY
21812: LIST
21813: PUSH
21814: LD_INT 22
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: PUSH
21837: LD_INT 25
21839: PUSH
21840: LD_INT 1
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 25
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 25
21859: PUSH
21860: LD_INT 3
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 25
21869: PUSH
21870: LD_INT 4
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PPUSH
21890: CALL_OW 69
21894: PUSH
21895: LD_EXP 1
21899: PUSH
21900: LD_EXP 2
21904: PUSH
21905: LD_EXP 3
21909: PUSH
21910: LD_EXP 4
21914: PUSH
21915: LD_EXP 5
21919: PUSH
21920: LD_EXP 6
21924: PUSH
21925: LD_EXP 7
21929: PUSH
21930: LD_EXP 8
21934: PUSH
21935: LD_EXP 9
21939: PUSH
21940: LD_EXP 15
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: DIFF
21957: PPUSH
21958: LD_STRING 06_other_survivors
21960: PPUSH
21961: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21965: LD_INT 50
21967: PUSH
21968: EMPTY
21969: LIST
21970: PUSH
21971: LD_INT 22
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 21
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: LD_INT 25
21996: PUSH
21997: LD_INT 12
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 25
22006: PUSH
22007: LD_INT 16
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: PPUSH
22025: CALL_OW 69
22029: PPUSH
22030: LD_STRING 06_other_apemans
22032: PPUSH
22033: CALL_OW 38
// YouWin ;
22037: CALL_OW 103
// end ; end_of_file
22041: LD_VAR 0 2
22045: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22046: LD_EXP 39
22050: PUSH
22051: LD_INT 3
22053: EQUAL
22054: IFFALSE 22169
22056: GO 22058
22058: DISABLE
// begin enable ;
22059: ENABLE
// sendedConvoys = 0 ;
22060: LD_ADDR_EXP 39
22064: PUSH
22065: LD_INT 0
22067: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22068: LD_INT 6
22070: PPUSH
22071: LD_INT 3
22073: PPUSH
22074: LD_INT 5
22076: PPUSH
22077: LD_INT 10
22079: PPUSH
22080: CALL_OW 12
22084: PUSH
22085: LD_INT 5
22087: PPUSH
22088: LD_INT 11
22090: PPUSH
22091: CALL_OW 12
22095: PUSH
22096: LD_INT 8
22098: PPUSH
22099: LD_INT 12
22101: PPUSH
22102: CALL_OW 12
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: PUSH
22112: LD_OWVAR 67
22116: ARRAY
22117: PPUSH
22118: LD_INT 0
22120: PPUSH
22121: LD_INT 0
22123: PPUSH
22124: LD_INT 0
22126: PPUSH
22127: LD_INT 0
22129: PPUSH
22130: LD_EXP 34
22134: PPUSH
22135: LD_EXP 35
22139: PPUSH
22140: CALL_OW 12
22144: PPUSH
22145: LD_INT 18
22147: PPUSH
22148: LD_INT 17
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_INT 1
22156: PPUSH
22157: LD_INT 2
22159: PPUSH
22160: CALL_OW 12
22164: PPUSH
22165: CALL 9755 0 12
// end ; end_of_file
22169: END
// export function PrepareNature ; var i , un ; begin
22170: LD_INT 0
22172: PPUSH
22173: PPUSH
22174: PPUSH
// for i = 1 to Difficulty + 2 do
22175: LD_ADDR_VAR 0 2
22179: PUSH
22180: DOUBLE
22181: LD_INT 1
22183: DEC
22184: ST_TO_ADDR
22185: LD_OWVAR 67
22189: PUSH
22190: LD_INT 2
22192: PLUS
22193: PUSH
22194: FOR_TO
22195: IFFALSE 22304
// begin hc_sex = sex_male ;
22197: LD_ADDR_OWVAR 27
22201: PUSH
22202: LD_INT 1
22204: ST_TO_ADDR
// uc_side = 0 ;
22205: LD_ADDR_OWVAR 20
22209: PUSH
22210: LD_INT 0
22212: ST_TO_ADDR
// uc_nation = nation_nature ;
22213: LD_ADDR_OWVAR 21
22217: PUSH
22218: LD_INT 0
22220: ST_TO_ADDR
// hc_class = class_tiger ;
22221: LD_ADDR_OWVAR 28
22225: PUSH
22226: LD_INT 14
22228: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22229: LD_ADDR_OWVAR 31
22233: PUSH
22234: LD_EXP 35
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22254: LD_ADDR_OWVAR 35
22258: PUSH
22259: LD_INT 5
22261: NEG
22262: PPUSH
22263: LD_INT 5
22265: PPUSH
22266: CALL_OW 12
22270: PUSH
22271: LD_OWVAR 67
22275: MUL
22276: ST_TO_ADDR
// un = CreateHuman ;
22277: LD_ADDR_VAR 0 3
22281: PUSH
22282: CALL_OW 44
22286: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22287: LD_VAR 0 3
22291: PPUSH
22292: LD_INT 20
22294: PPUSH
22295: LD_INT 0
22297: PPUSH
22298: CALL_OW 49
// end ;
22302: GO 22194
22304: POP
22305: POP
// for i = 1 to rand ( 3 , 4 ) do
22306: LD_ADDR_VAR 0 2
22310: PUSH
22311: DOUBLE
22312: LD_INT 1
22314: DEC
22315: ST_TO_ADDR
22316: LD_INT 3
22318: PPUSH
22319: LD_INT 4
22321: PPUSH
22322: CALL_OW 12
22326: PUSH
22327: FOR_TO
22328: IFFALSE 22422
// begin hc_sex = sex_male ;
22330: LD_ADDR_OWVAR 27
22334: PUSH
22335: LD_INT 1
22337: ST_TO_ADDR
// uc_side = 0 ;
22338: LD_ADDR_OWVAR 20
22342: PUSH
22343: LD_INT 0
22345: ST_TO_ADDR
// uc_nation = nation_nature ;
22346: LD_ADDR_OWVAR 21
22350: PUSH
22351: LD_INT 0
22353: ST_TO_ADDR
// hc_class = 18 ;
22354: LD_ADDR_OWVAR 28
22358: PUSH
22359: LD_INT 18
22361: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22362: LD_ADDR_OWVAR 31
22366: PUSH
22367: LD_EXP 35
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// hc_agressivity = 0 ;
22387: LD_ADDR_OWVAR 35
22391: PUSH
22392: LD_INT 0
22394: ST_TO_ADDR
// un = CreateHuman ;
22395: LD_ADDR_VAR 0 3
22399: PUSH
22400: CALL_OW 44
22404: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22405: LD_VAR 0 3
22409: PPUSH
22410: LD_INT 20
22412: PPUSH
22413: LD_INT 0
22415: PPUSH
22416: CALL_OW 49
// end ;
22420: GO 22327
22422: POP
22423: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: DOUBLE
22430: LD_INT 1
22432: DEC
22433: ST_TO_ADDR
22434: LD_INT 1
22436: PPUSH
22437: LD_INT 3
22439: PPUSH
22440: CALL_OW 12
22444: PUSH
22445: LD_OWVAR 67
22449: PLUS
22450: PUSH
22451: FOR_TO
22452: IFFALSE 22633
// begin hc_sex = sex_male ;
22454: LD_ADDR_OWVAR 27
22458: PUSH
22459: LD_INT 1
22461: ST_TO_ADDR
// uc_side = 0 ;
22462: LD_ADDR_OWVAR 20
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// uc_nation = nation_nature ;
22470: LD_ADDR_OWVAR 21
22474: PUSH
22475: LD_INT 0
22477: ST_TO_ADDR
// hc_class = class_apeman ;
22478: LD_ADDR_OWVAR 28
22482: PUSH
22483: LD_INT 12
22485: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22486: LD_ADDR_OWVAR 31
22490: PUSH
22491: LD_EXP 34
22495: PPUSH
22496: LD_EXP 35
22500: PPUSH
22501: CALL_OW 12
22505: PUSH
22506: LD_EXP 34
22510: PPUSH
22511: LD_EXP 35
22515: PPUSH
22516: CALL_OW 12
22520: PUSH
22521: LD_EXP 34
22525: PPUSH
22526: LD_EXP 35
22530: PPUSH
22531: CALL_OW 12
22535: PUSH
22536: LD_EXP 34
22540: PPUSH
22541: LD_EXP 35
22545: PPUSH
22546: CALL_OW 12
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
22557: LD_ADDR_OWVAR 35
22561: PUSH
22562: LD_INT 20
22564: PPUSH
22565: LD_INT 30
22567: PPUSH
22568: CALL_OW 12
22572: PUSH
22573: LD_INT 30
22575: PPUSH
22576: LD_INT 40
22578: PPUSH
22579: CALL_OW 12
22583: PUSH
22584: LD_INT 40
22586: PPUSH
22587: LD_INT 50
22589: PPUSH
22590: CALL_OW 12
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: LD_OWVAR 67
22604: ARRAY
22605: ST_TO_ADDR
// un = CreateHuman ;
22606: LD_ADDR_VAR 0 3
22610: PUSH
22611: CALL_OW 44
22615: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22616: LD_VAR 0 3
22620: PPUSH
22621: LD_INT 21
22623: PPUSH
22624: LD_INT 0
22626: PPUSH
22627: CALL_OW 49
// end ;
22631: GO 22451
22633: POP
22634: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
22635: LD_ADDR_VAR 0 2
22639: PUSH
22640: DOUBLE
22641: LD_INT 1
22643: DEC
22644: ST_TO_ADDR
22645: LD_INT 5
22647: PPUSH
22648: LD_INT 6
22650: PPUSH
22651: CALL_OW 12
22655: PUSH
22656: LD_OWVAR 67
22660: PLUS
22661: PUSH
22662: FOR_TO
22663: IFFALSE 22809
// begin hc_sex = sex_male ;
22665: LD_ADDR_OWVAR 27
22669: PUSH
22670: LD_INT 1
22672: ST_TO_ADDR
// uc_side = 0 ;
22673: LD_ADDR_OWVAR 20
22677: PUSH
22678: LD_INT 0
22680: ST_TO_ADDR
// uc_nation = nation_nature ;
22681: LD_ADDR_OWVAR 21
22685: PUSH
22686: LD_INT 0
22688: ST_TO_ADDR
// hc_class = class_apeman ;
22689: LD_ADDR_OWVAR 28
22693: PUSH
22694: LD_INT 12
22696: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22697: LD_ADDR_OWVAR 31
22701: PUSH
22702: LD_EXP 34
22706: PPUSH
22707: LD_EXP 35
22711: PPUSH
22712: CALL_OW 12
22716: PUSH
22717: LD_EXP 34
22721: PPUSH
22722: LD_EXP 35
22726: PPUSH
22727: CALL_OW 12
22731: PUSH
22732: LD_OWVAR 67
22736: PLUS
22737: PUSH
22738: LD_EXP 34
22742: PPUSH
22743: LD_EXP 35
22747: PPUSH
22748: CALL_OW 12
22752: PUSH
22753: LD_EXP 34
22757: PPUSH
22758: LD_EXP 35
22762: PPUSH
22763: CALL_OW 12
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: ST_TO_ADDR
// hc_agressivity = 0 ;
22774: LD_ADDR_OWVAR 35
22778: PUSH
22779: LD_INT 0
22781: ST_TO_ADDR
// un = CreateHuman ;
22782: LD_ADDR_VAR 0 3
22786: PUSH
22787: CALL_OW 44
22791: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22792: LD_VAR 0 3
22796: PPUSH
22797: LD_INT 22
22799: PPUSH
22800: LD_INT 0
22802: PPUSH
22803: CALL_OW 49
// end ;
22807: GO 22662
22809: POP
22810: POP
// end ; end_of_file
22811: LD_VAR 0 1
22815: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22816: LD_EXP 1
22820: PPUSH
22821: CALL_OW 301
22825: IFFALSE 22837
22827: GO 22829
22829: DISABLE
// YouLost ( JMM ) ;
22830: LD_STRING JMM
22832: PPUSH
22833: CALL_OW 104
22837: END
