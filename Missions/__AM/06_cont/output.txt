// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 35
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 20
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 21
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 18
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 14
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 33
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 24
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 26
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 34
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 29
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 28
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 30
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 25
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 19008 0 0
// PrepareDifficulty ;
 173: CALL 4873 0 0
// PrepareRussian ;
 177: CALL 3986 0 0
// PrepareVehicles ;
 181: CALL 1346 0 0
// PrepareHeroes ;
 185: CALL 432 0 0
// PrepareOthers ;
 189: CALL 1607 0 0
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 35
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 429
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 30
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 330
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: CALL_OW 274
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 9999
 323: PPUSH
 324: CALL_OW 277
 328: GO 305
 330: POP
 331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 332: LD_ADDR_VAR 0 1
 336: PUSH
 337: LD_INT 22
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 30
 349: PUSH
 350: LD_INT 0
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 391
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 369: LD_VAR 0 1
 373: PPUSH
 374: CALL_OW 274
 378: PPUSH
 379: LD_INT 2
 381: PPUSH
 382: LD_INT 9999
 384: PPUSH
 385: CALL_OW 277
 389: GO 366
 391: POP
 392: POP
// if IsSelected ( rudepo ) then
 393: LD_INT 2
 395: PPUSH
 396: CALL_OW 306
 400: IFFALSE 410
// your_side = 3 ;
 402: LD_ADDR_OWVAR 2
 406: PUSH
 407: LD_INT 3
 409: ST_TO_ADDR
// if IsSelected ( JMM ) then
 410: LD_EXP 1
 414: PPUSH
 415: CALL_OW 306
 419: IFFALSE 429
// your_side = 1 ;
 421: LD_ADDR_OWVAR 2
 425: PUSH
 426: LD_INT 1
 428: ST_TO_ADDR
// end ; end_of_file
 429: PPOPN 1
 431: END
// export function PrepareHeroes ; var veh ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// uc_side = 1 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// uc_nation = 1 ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 452: LD_ADDR_EXP 1
 456: PUSH
 457: LD_STRING JMM
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: CALL 4363 0 2
 467: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 468: LD_ADDR_EXP 12
 472: PUSH
 473: LD_STRING Harisson
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL 4363 0 2
 483: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 484: LD_ADDR_EXP 10
 488: PUSH
 489: LD_STRING DeltaDoctor
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL 4363 0 2
 499: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 2
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL_OW 49
// if LoadVariable ( LisaIn06 , 0 ) = 1 then
 515: LD_STRING LisaIn06
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 30
 525: PUSH
 526: LD_INT 1
 528: EQUAL
 529: IFFALSE 633
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: LD_INT 58
 558: PUSH
 559: EMPTY
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PPUSH
 567: CALL_OW 69
 571: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 572: LD_ADDR_EXP 2
 576: PUSH
 577: LD_STRING Lisa
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: CALL 4363 0 2
 587: ST_TO_ADDR
// if veh > 0 then
 588: LD_VAR 0 2
 592: PUSH
 593: LD_INT 0
 595: GREATER
 596: IFFALSE 618
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 598: LD_EXP 2
 602: PPUSH
 603: LD_VAR 0 2
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PPUSH
 612: CALL_OW 52
// end else
 616: GO 633
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 633: LD_STRING BobbyIn06
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 30
 643: PUSH
 644: LD_INT 1
 646: EQUAL
 647: IFFALSE 751
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 58
 676: PUSH
 677: EMPTY
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PPUSH
 685: CALL_OW 69
 689: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Bobby
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4363 0 2
 705: ST_TO_ADDR
// if veh > 0 then
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 0
 713: GREATER
 714: IFFALSE 736
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 716: LD_EXP 3
 720: PPUSH
 721: LD_VAR 0 2
 725: PUSH
 726: LD_INT 1
 728: ARRAY
 729: PPUSH
 730: CALL_OW 52
// end else
 734: GO 751
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 736: LD_EXP 3
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 751: LD_STRING CyrusIn06
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 30
 761: PUSH
 762: LD_INT 1
 764: EQUAL
 765: IFFALSE 869
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: LD_INT 22
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 21
 784: PUSH
 785: LD_INT 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 58
 794: PUSH
 795: EMPTY
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Cyrus
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL 4363 0 2
 823: ST_TO_ADDR
// if veh > 0 then
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 0
 831: GREATER
 832: IFFALSE 854
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 834: LD_EXP 4
 838: PPUSH
 839: LD_VAR 0 2
 843: PUSH
 844: LD_INT 1
 846: ARRAY
 847: PPUSH
 848: CALL_OW 52
// end else
 852: GO 869
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 854: LD_EXP 4
 858: PPUSH
 859: LD_INT 2
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 869: LD_STRING FrankIn06
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: CALL_OW 30
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 987
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 885: LD_ADDR_VAR 0 2
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 58
 912: PUSH
 913: EMPTY
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Frank
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4363 0 2
 941: ST_TO_ADDR
// if veh > 0 then
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 0
 949: GREATER
 950: IFFALSE 972
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
 952: LD_EXP 5
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 52
// end else
 970: GO 987
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 972: LD_EXP 5
 976: PPUSH
 977: LD_INT 2
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
 987: LD_STRING BrownIn06
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 30
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1105
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 21
1020: PUSH
1021: LD_INT 2
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 58
1030: PUSH
1031: EMPTY
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: LD_STRING Brown
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL 4363 0 2
1059: ST_TO_ADDR
// if veh > 0 then
1060: LD_VAR 0 2
1064: PUSH
1065: LD_INT 0
1067: GREATER
1068: IFFALSE 1090
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1070: LD_EXP 6
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: PPUSH
1084: CALL_OW 52
// end else
1088: GO 1105
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1090: LD_EXP 6
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1105: LD_STRING DonaldsonIn06
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: CALL_OW 30
1115: PUSH
1116: LD_INT 1
1118: EQUAL
1119: IFFALSE 1223
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1121: LD_ADDR_VAR 0 2
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: EMPTY
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1162: LD_ADDR_EXP 7
1166: PUSH
1167: LD_STRING Donaldson
1169: PPUSH
1170: LD_INT 1
1172: PPUSH
1173: CALL 4363 0 2
1177: ST_TO_ADDR
// if veh > 0 then
1178: LD_VAR 0 2
1182: PUSH
1183: LD_INT 0
1185: GREATER
1186: IFFALSE 1208
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1188: LD_EXP 7
1192: PPUSH
1193: LD_VAR 0 2
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: CALL_OW 52
// end else
1206: GO 1223
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1208: LD_EXP 7
1212: PPUSH
1213: LD_INT 2
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1223: LD_STRING GladstoneIn06
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 30
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1341
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: LD_INT 22
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 21
1256: PUSH
1257: LD_INT 2
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 58
1266: PUSH
1267: EMPTY
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PPUSH
1275: CALL_OW 69
1279: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1280: LD_ADDR_EXP 8
1284: PUSH
1285: LD_STRING Gladstone
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: CALL 4363 0 2
1295: ST_TO_ADDR
// if veh > 0 then
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 0
1303: GREATER
1304: IFFALSE 1326
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1306: LD_EXP 8
1310: PPUSH
1311: LD_VAR 0 2
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 52
// end else
1324: GO 1341
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1326: LD_EXP 8
1330: PPUSH
1331: LD_INT 2
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 49
// end ; end ; end ;
1341: LD_VAR 0 1
1345: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
1350: PPUSH
1351: PPUSH
1352: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_STRING 06_VehiclesIn06_1
1360: PPUSH
1361: EMPTY
1362: PPUSH
1363: CALL_OW 30
1367: ST_TO_ADDR
// uc_side = 1 ;
1368: LD_ADDR_OWVAR 20
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// if vehicles > 0 then
1376: LD_VAR 0 5
1380: PUSH
1381: LD_INT 0
1383: GREATER
1384: IFFALSE 1602
// begin for i := 1 to vehicles do
1386: LD_ADDR_VAR 0 2
1390: PUSH
1391: DOUBLE
1392: LD_INT 1
1394: DEC
1395: ST_TO_ADDR
1396: LD_VAR 0 5
1400: PUSH
1401: FOR_TO
1402: IFFALSE 1600
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1424: LD_ADDR_OWVAR 37
1428: PUSH
1429: LD_VAR 0 5
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 2
1442: ARRAY
1443: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1444: LD_ADDR_OWVAR 39
1448: PUSH
1449: LD_VAR 0 5
1453: PUSH
1454: LD_VAR 0 2
1458: ARRAY
1459: PUSH
1460: LD_INT 3
1462: ARRAY
1463: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1464: LD_ADDR_OWVAR 38
1468: PUSH
1469: LD_VAR 0 5
1473: PUSH
1474: LD_VAR 0 2
1478: ARRAY
1479: PUSH
1480: LD_INT 4
1482: ARRAY
1483: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1484: LD_ADDR_OWVAR 40
1488: PUSH
1489: LD_VAR 0 5
1493: PUSH
1494: LD_VAR 0 2
1498: ARRAY
1499: PUSH
1500: LD_INT 5
1502: ARRAY
1503: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1504: LD_ADDR_OWVAR 41
1508: PUSH
1509: LD_INT 40
1511: ST_TO_ADDR
// veh = CreateVehicle ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: CALL_OW 45
1521: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1534: LD_VAR 0 4
1538: PPUSH
1539: LD_INT 2
1541: PPUSH
1542: LD_INT 0
1544: PPUSH
1545: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1549: LD_OWVAR 40
1553: PUSH
1554: LD_INT 12
1556: EQUAL
1557: IFFALSE 1598
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1559: LD_VAR 0 4
1563: PPUSH
1564: LD_VAR 0 5
1568: PUSH
1569: LD_VAR 0 2
1573: ARRAY
1574: PUSH
1575: LD_INT 6
1577: ARRAY
1578: PPUSH
1579: LD_VAR 0 5
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: PUSH
1590: LD_INT 7
1592: ARRAY
1593: PPUSH
1594: CALL_OW 291
// end ;
1598: GO 1401
1600: POP
1601: POP
// end ; end ;
1602: LD_VAR 0 1
1606: RET
// export function PrepareOthers ; var i , veh ; begin
1607: LD_INT 0
1609: PPUSH
1610: PPUSH
1611: PPUSH
// uc_side = 1 ;
1612: LD_ADDR_OWVAR 20
1616: PUSH
1617: LD_INT 1
1619: ST_TO_ADDR
// uc_nation = 1 ;
1620: LD_ADDR_OWVAR 21
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1628: LD_ADDR_EXP 11
1632: PUSH
1633: LD_STRING OthersIn06
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// for i in others do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_EXP 11
1650: PUSH
1651: FOR_IN
1652: IFFALSE 1742
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1654: LD_ADDR_VAR 0 3
1658: PUSH
1659: LD_INT 22
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 21
1671: PUSH
1672: LD_INT 2
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 58
1681: PUSH
1682: EMPTY
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PPUSH
1690: CALL_OW 69
1694: ST_TO_ADDR
// if veh > 0 then
1695: LD_VAR 0 3
1699: PUSH
1700: LD_INT 0
1702: GREATER
1703: IFFALSE 1725
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_VAR 0 3
1714: PUSH
1715: LD_INT 1
1717: ARRAY
1718: PPUSH
1719: CALL_OW 52
// end else
1723: GO 1740
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1725: LD_VAR 0 2
1729: PPUSH
1730: LD_INT 2
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// end ; end ;
1740: GO 1651
1742: POP
1743: POP
// end ;
1744: LD_VAR 0 1
1748: RET
// export function PrepareDenis ; begin
1749: LD_INT 0
1751: PPUSH
// uc_side = 1 ;
1752: LD_ADDR_OWVAR 20
1756: PUSH
1757: LD_INT 1
1759: ST_TO_ADDR
// uc_nation = 1 ;
1760: LD_ADDR_OWVAR 21
1764: PUSH
1765: LD_INT 1
1767: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1768: LD_ADDR_EXP 9
1772: PUSH
1773: LD_STRING Denis
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL 4363 0 2
1783: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1784: LD_EXP 9
1788: PPUSH
1789: LD_INT 13
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1799: LD_EXP 9
1803: PPUSH
1804: LD_INT 4
1806: PPUSH
1807: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1811: LD_EXP 9
1815: PPUSH
1816: LD_INT 750
1818: PPUSH
1819: CALL_OW 234
// end ;
1823: LD_VAR 0 1
1827: RET
// export function HarrisonSupport ; var un , veh ; begin
1828: LD_INT 0
1830: PPUSH
1831: PPUSH
1832: PPUSH
// uc_side = 1 ;
1833: LD_ADDR_OWVAR 20
1837: PUSH
1838: LD_INT 1
1840: ST_TO_ADDR
// uc_nation = 1 ;
1841: LD_ADDR_OWVAR 21
1845: PUSH
1846: LD_INT 1
1848: ST_TO_ADDR
// vc_engine = 1 ;
1849: LD_ADDR_OWVAR 39
1853: PUSH
1854: LD_INT 1
1856: ST_TO_ADDR
// vc_control = 1 ;
1857: LD_ADDR_OWVAR 38
1861: PUSH
1862: LD_INT 1
1864: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1865: LD_ADDR_OWVAR 40
1869: PUSH
1870: LD_INT 4
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: LD_INT 2
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_OWVAR 67
1888: ARRAY
1889: ST_TO_ADDR
// vc_chassis = 2 ;
1890: LD_ADDR_OWVAR 37
1894: PUSH
1895: LD_INT 2
1897: ST_TO_ADDR
// veh = CreateVehicle ;
1898: LD_ADDR_VAR 0 3
1902: PUSH
1903: CALL_OW 45
1907: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1908: LD_VAR 0 3
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 0
1930: PPUSH
1931: CALL_OW 49
// hc_class := 2 ;
1935: LD_ADDR_OWVAR 28
1939: PUSH
1940: LD_INT 2
1942: ST_TO_ADDR
// hc_sex := sex_male ;
1943: LD_ADDR_OWVAR 27
1947: PUSH
1948: LD_INT 1
1950: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1951: LD_ADDR_OWVAR 33
1955: PUSH
1956: LD_STRING SecondCharsGal
1958: ST_TO_ADDR
// hc_face_number := 52 ;
1959: LD_ADDR_OWVAR 34
1963: PUSH
1964: LD_INT 52
1966: ST_TO_ADDR
// hc_name := Craig Brown ;
1967: LD_ADDR_OWVAR 26
1971: PUSH
1972: LD_STRING Craig Brown
1974: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1975: LD_ADDR_OWVAR 31
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: LD_INT 1
1988: PUSH
1989: LD_INT 0
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1998: LD_ADDR_EXP 15
2002: PUSH
2003: CALL_OW 44
2007: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2008: LD_EXP 15
2012: PPUSH
2013: LD_VAR 0 3
2017: PPUSH
2018: CALL_OW 52
// vc_engine = 1 ;
2022: LD_ADDR_OWVAR 39
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// vc_control = 1 ;
2030: LD_ADDR_OWVAR 38
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2038: LD_ADDR_OWVAR 40
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: LD_INT 2
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_OWVAR 67
2061: ARRAY
2062: ST_TO_ADDR
// vc_chassis = 2 ;
2063: LD_ADDR_OWVAR 37
2067: PUSH
2068: LD_INT 2
2070: ST_TO_ADDR
// veh = CreateVehicle ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: CALL_OW 45
2080: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2081: LD_VAR 0 3
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2093: LD_VAR 0 3
2097: PPUSH
2098: LD_INT 3
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2108: LD_VAR 0 3
2112: PPUSH
2113: LD_INT 50
2115: PPUSH
2116: CALL_OW 240
// hc_class := 1 ;
2120: LD_ADDR_OWVAR 28
2124: PUSH
2125: LD_INT 1
2127: ST_TO_ADDR
// hc_sex := sex_female ;
2128: LD_ADDR_OWVAR 27
2132: PUSH
2133: LD_INT 2
2135: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2136: LD_ADDR_OWVAR 33
2140: PUSH
2141: LD_STRING SecondCharsGal
2143: ST_TO_ADDR
// hc_face_number := 45 ;
2144: LD_ADDR_OWVAR 34
2148: PUSH
2149: LD_INT 45
2151: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2152: LD_ADDR_OWVAR 26
2156: PUSH
2157: LD_STRING Ingrid Jonsson
2159: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2160: LD_ADDR_OWVAR 31
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 0
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2183: LD_ADDR_EXP 16
2187: PUSH
2188: CALL_OW 44
2192: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2193: LD_EXP 16
2197: PPUSH
2198: LD_VAR 0 3
2202: PPUSH
2203: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2207: LD_VAR 0 3
2211: PPUSH
2212: LD_INT 45
2214: PPUSH
2215: CALL_OW 240
// end ;
2219: LD_VAR 0 1
2223: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2224: LD_INT 0
2226: PPUSH
2227: PPUSH
2228: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: LD_INT 22
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 21
2246: PUSH
2247: LD_INT 1
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 26
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 2
2266: PUSH
2267: LD_INT 25
2269: PUSH
2270: LD_INT 1
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 25
2279: PUSH
2280: LD_INT 2
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 25
2289: PUSH
2290: LD_INT 3
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 25
2299: PUSH
2300: LD_INT 4
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL_OW 69
2324: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2325: LD_ADDR_VAR 0 3
2329: PUSH
2330: LD_INT 1
2332: PPUSH
2333: LD_VAR 0 2
2337: PPUSH
2338: CALL_OW 12
2342: ST_TO_ADDR
// uc_side = 4 ;
2343: LD_ADDR_OWVAR 20
2347: PUSH
2348: LD_INT 4
2350: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2351: LD_ADDR_EXP 13
2355: PUSH
2356: LD_STRING Joan
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL 4363 0 2
2366: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2367: LD_EXP 13
2371: PPUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_VAR 0 3
2381: ARRAY
2382: PPUSH
2383: CALL_OW 250
2387: PPUSH
2388: LD_VAR 0 2
2392: PUSH
2393: LD_VAR 0 3
2397: ARRAY
2398: PPUSH
2399: CALL_OW 251
2403: PPUSH
2404: LD_INT 5
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2414: LD_EXP 13
2418: PPUSH
2419: LD_INT 250
2421: PPUSH
2422: CALL_OW 234
// InGameOn ;
2426: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2430: LD_EXP 13
2434: PPUSH
2435: CALL_OW 87
// wait ( 0 0$2 ) ;
2439: LD_INT 70
2441: PPUSH
2442: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2446: LD_VAR 0 2
2450: PUSH
2451: LD_VAR 0 3
2455: ARRAY
2456: PPUSH
2457: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2461: LD_VAR 0 2
2465: PUSH
2466: LD_VAR 0 3
2470: ARRAY
2471: PPUSH
2472: CALL_OW 122
// wait ( 0 0$1 ) ;
2476: LD_INT 35
2478: PPUSH
2479: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2483: LD_VAR 0 2
2487: PUSH
2488: LD_VAR 0 3
2492: ARRAY
2493: PPUSH
2494: LD_EXP 13
2498: PPUSH
2499: CALL_OW 112
// wait ( 0 0$2 ) ;
2503: LD_INT 70
2505: PPUSH
2506: CALL_OW 67
// DialogueOn ;
2510: CALL_OW 6
// if tmp [ rnd ] = JMM then
2514: LD_VAR 0 2
2518: PUSH
2519: LD_VAR 0 3
2523: ARRAY
2524: PUSH
2525: LD_EXP 1
2529: EQUAL
2530: IFFALSE 2657
// begin Say ( JMM , D5b-JMM-1 ) ;
2532: LD_EXP 1
2536: PPUSH
2537: LD_STRING D5b-JMM-1
2539: PPUSH
2540: CALL_OW 88
// DialogueOff ;
2544: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2548: LD_EXP 13
2552: PPUSH
2553: LD_INT 500
2555: PPUSH
2556: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2560: LD_EXP 13
2564: PPUSH
2565: LD_EXP 1
2569: PPUSH
2570: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2574: LD_EXP 1
2578: PPUSH
2579: LD_EXP 13
2583: PPUSH
2584: CALL_OW 119
// wait ( 0 0$1 ) ;
2588: LD_INT 35
2590: PPUSH
2591: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2595: LD_EXP 13
2599: PPUSH
2600: LD_STRING D5b-Joan-1
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2607: LD_EXP 1
2611: PPUSH
2612: LD_STRING D5b-JMM-2
2614: PPUSH
2615: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2619: LD_EXP 13
2623: PPUSH
2624: LD_STRING D5b-Joan-2
2626: PPUSH
2627: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2631: LD_EXP 1
2635: PPUSH
2636: LD_STRING D5b-JMM-3
2638: PPUSH
2639: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2643: LD_EXP 13
2647: PPUSH
2648: LD_STRING D5b-Joan-3
2650: PPUSH
2651: CALL_OW 88
// end else
2655: GO 2997
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2657: LD_VAR 0 2
2661: PUSH
2662: LD_VAR 0 3
2666: ARRAY
2667: PPUSH
2668: LD_STRING D5a-Sol1-1
2670: PPUSH
2671: CALL_OW 88
// DialogueOff ;
2675: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2679: LD_EXP 13
2683: PPUSH
2684: LD_INT 500
2686: PPUSH
2687: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2691: LD_EXP 13
2695: PPUSH
2696: LD_VAR 0 2
2700: PUSH
2701: LD_VAR 0 3
2705: ARRAY
2706: PPUSH
2707: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2711: LD_VAR 0 2
2715: PUSH
2716: LD_VAR 0 3
2720: ARRAY
2721: PPUSH
2722: LD_EXP 13
2726: PPUSH
2727: CALL_OW 119
// wait ( 0 0$1 ) ;
2731: LD_INT 35
2733: PPUSH
2734: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2738: LD_EXP 13
2742: PPUSH
2743: LD_STRING D5a-Joan-1
2745: PPUSH
2746: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2750: LD_VAR 0 2
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PPUSH
2761: LD_STRING D5a-Sol1-2
2763: PPUSH
2764: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2768: LD_EXP 13
2772: PPUSH
2773: LD_STRING D5a-Joan-2
2775: PPUSH
2776: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2780: LD_VAR 0 2
2784: PUSH
2785: LD_VAR 0 3
2789: ARRAY
2790: PPUSH
2791: LD_STRING D5a-Sol1-3
2793: PPUSH
2794: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2798: LD_EXP 13
2802: PPUSH
2803: LD_STRING D5a-Joan-3
2805: PPUSH
2806: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2810: LD_VAR 0 2
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PPUSH
2821: LD_STRING D5a-Sol1-4
2823: PPUSH
2824: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2828: LD_EXP 1
2832: PPUSH
2833: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2837: LD_EXP 1
2841: PPUSH
2842: CALL_OW 122
// wait ( 0 0$1 ) ;
2846: LD_INT 35
2848: PPUSH
2849: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2853: LD_INT 35
2855: PPUSH
2856: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
2860: LD_EXP 13
2864: PUSH
2865: LD_VAR 0 2
2869: PUSH
2870: LD_VAR 0 3
2874: ARRAY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PPUSH
2880: LD_EXP 1
2884: PPUSH
2885: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
2889: LD_EXP 13
2893: PPUSH
2894: LD_EXP 1
2898: PPUSH
2899: CALL_OW 296
2903: PUSH
2904: LD_INT 5
2906: LESS
2907: IFFALSE 2853
// ComTurnUnit ( Joan , JMM ) ;
2909: LD_EXP 13
2913: PPUSH
2914: LD_EXP 1
2918: PPUSH
2919: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2923: LD_EXP 1
2927: PPUSH
2928: LD_EXP 13
2932: PPUSH
2933: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
2937: LD_EXP 13
2941: PPUSH
2942: LD_STRING D5a-Joan-4
2944: PPUSH
2945: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
2949: LD_EXP 1
2953: PPUSH
2954: LD_STRING D5a-JMM-4
2956: PPUSH
2957: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
2961: LD_EXP 13
2965: PPUSH
2966: LD_STRING D5a-Joan-5
2968: PPUSH
2969: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2973: LD_EXP 1
2977: PPUSH
2978: LD_STRING D5a-JMM-5
2980: PPUSH
2981: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2985: LD_EXP 13
2989: PPUSH
2990: LD_STRING D5a-Joan-6
2992: PPUSH
2993: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2997: LD_EXP 1
3001: PPUSH
3002: LD_STRING D6-JMM-1
3004: PPUSH
3005: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3009: LD_EXP 13
3013: PPUSH
3014: LD_STRING D6-Joan-1
3016: PPUSH
3017: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3021: LD_EXP 1
3025: PPUSH
3026: LD_STRING D6-JMM-2
3028: PPUSH
3029: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3033: LD_EXP 13
3037: PPUSH
3038: LD_STRING D6-Joan-2
3040: PPUSH
3041: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3045: LD_EXP 1
3049: PPUSH
3050: LD_STRING D6-JMM-3
3052: PPUSH
3053: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3057: LD_EXP 13
3061: PPUSH
3062: LD_STRING D6-Joan-3
3064: PPUSH
3065: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3069: LD_EXP 1
3073: PPUSH
3074: LD_STRING D6-JMM-4
3076: PPUSH
3077: CALL_OW 88
// DialogueOff ;
3081: CALL_OW 7
// InGameOff ;
3085: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3089: LD_EXP 13
3093: PPUSH
3094: LD_INT 1
3096: PPUSH
3097: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3101: LD_STRING MJ
3103: PPUSH
3104: CALL_OW 337
// JoanStatus = 1 ;
3108: LD_ADDR_EXP 14
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// end ;
3116: LD_VAR 0 1
3120: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// uc_side = 1 ;
3125: LD_ADDR_OWVAR 20
3129: PUSH
3130: LD_INT 1
3132: ST_TO_ADDR
// uc_nation = 1 ;
3133: LD_ADDR_OWVAR 21
3137: PUSH
3138: LD_INT 1
3140: ST_TO_ADDR
// if number = 1 then
3141: LD_VAR 0 1
3145: PUSH
3146: LD_INT 1
3148: EQUAL
3149: IFFALSE 3287
// begin hc_class := 1 ;
3151: LD_ADDR_OWVAR 28
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// hc_sex := sex_male ;
3159: LD_ADDR_OWVAR 27
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3167: LD_ADDR_OWVAR 33
3171: PUSH
3172: LD_STRING AmGalRemake
3174: ST_TO_ADDR
// hc_face_number := 7 ;
3175: LD_ADDR_OWVAR 34
3179: PUSH
3180: LD_INT 7
3182: ST_TO_ADDR
// hc_name := Bobby Jorda ;
3183: LD_ADDR_OWVAR 26
3187: PUSH
3188: LD_STRING Bobby Jorda
3190: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3191: LD_ADDR_OWVAR 31
3195: PUSH
3196: LD_INT 2
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: LD_INT 1
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// un = CreateHuman ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: CALL_OW 44
3223: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 12
3231: PPUSH
3232: LD_INT 1
3234: PPUSH
3235: CALL_OW 49
// wait ( 0 0$1 ) ;
3239: LD_INT 35
3241: PPUSH
3242: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 87
// DialogueOn ;
3255: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3259: LD_VAR 0 3
3263: PPUSH
3264: LD_STRING D11b-Sol3-1
3266: PPUSH
3267: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3271: LD_EXP 1
3275: PPUSH
3276: LD_STRING D11b-JMM-1
3278: PPUSH
3279: CALL_OW 88
// DialogueOff ;
3283: CALL_OW 7
// end ; if number = 2 then
3287: LD_VAR 0 1
3291: PUSH
3292: LD_INT 2
3294: EQUAL
3295: IFFALSE 3433
// begin hc_class := 3 ;
3297: LD_ADDR_OWVAR 28
3301: PUSH
3302: LD_INT 3
3304: ST_TO_ADDR
// hc_sex := sex_male ;
3305: LD_ADDR_OWVAR 27
3309: PUSH
3310: LD_INT 1
3312: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3313: LD_ADDR_OWVAR 33
3317: PUSH
3318: LD_STRING SecondCharsGal
3320: ST_TO_ADDR
// hc_face_number := 55 ;
3321: LD_ADDR_OWVAR 34
3325: PUSH
3326: LD_INT 55
3328: ST_TO_ADDR
// hc_name := George McCarthy ;
3329: LD_ADDR_OWVAR 26
3333: PUSH
3334: LD_STRING George McCarthy
3336: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3337: LD_ADDR_OWVAR 31
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: LD_INT 2
3347: PUSH
3348: LD_INT 3
3350: PUSH
3351: LD_INT 1
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// un = CreateHuman ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: CALL_OW 44
3369: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3370: LD_VAR 0 3
3374: PPUSH
3375: LD_INT 12
3377: PPUSH
3378: LD_INT 1
3380: PPUSH
3381: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: CALL_OW 87
// wait ( 0 0$1 ) ;
3394: LD_INT 35
3396: PPUSH
3397: CALL_OW 67
// DialogueOn ;
3401: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3405: LD_VAR 0 3
3409: PPUSH
3410: LD_STRING D11d-Sol4-1
3412: PPUSH
3413: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3417: LD_EXP 1
3421: PPUSH
3422: LD_STRING D11d-JMM-1
3424: PPUSH
3425: CALL_OW 88
// DialogueOff ;
3429: CALL_OW 7
// end ; if number = 4 then
3433: LD_VAR 0 1
3437: PUSH
3438: LD_INT 4
3440: EQUAL
3441: IFFALSE 3567
// begin hc_class := 3 ;
3443: LD_ADDR_OWVAR 28
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// hc_sex := sex_female ;
3451: LD_ADDR_OWVAR 27
3455: PUSH
3456: LD_INT 2
3458: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3459: LD_ADDR_OWVAR 33
3463: PUSH
3464: LD_STRING SecondCharsGal
3466: ST_TO_ADDR
// hc_face_number := 46 ;
3467: LD_ADDR_OWVAR 34
3471: PUSH
3472: LD_INT 46
3474: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3475: LD_ADDR_OWVAR 26
3479: PUSH
3480: LD_STRING Sylvia Creak
3482: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3483: LD_ADDR_OWVAR 31
3487: PUSH
3488: LD_INT 1
3490: PUSH
3491: LD_INT 3
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: LD_INT 1
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 12
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3531: LD_VAR 0 3
3535: PPUSH
3536: CALL_OW 87
// wait ( 0 0$1 ) ;
3540: LD_INT 35
3542: PPUSH
3543: CALL_OW 67
// DialogueOn ;
3547: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_STRING D11e-FSol4-1
3558: PPUSH
3559: CALL_OW 88
// DialogueOff ;
3563: CALL_OW 7
// end ; if number = 5 then
3567: LD_VAR 0 1
3571: PUSH
3572: LD_INT 5
3574: EQUAL
3575: IFFALSE 3713
// begin hc_class := 1 ;
3577: LD_ADDR_OWVAR 28
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// hc_sex := sex_female ;
3585: LD_ADDR_OWVAR 27
3589: PUSH
3590: LD_INT 2
3592: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3593: LD_ADDR_OWVAR 33
3597: PUSH
3598: LD_STRING SecondCharsGal
3600: ST_TO_ADDR
// hc_face_number := 37 ;
3601: LD_ADDR_OWVAR 34
3605: PUSH
3606: LD_INT 37
3608: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3609: LD_ADDR_OWVAR 26
3613: PUSH
3614: LD_STRING Margherite Simpson
3616: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3617: LD_ADDR_OWVAR 31
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: LD_INT 1
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: ST_TO_ADDR
// un = CreateHuman ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: CALL_OW 44
3649: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3650: LD_VAR 0 3
3654: PPUSH
3655: LD_INT 12
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3665: LD_VAR 0 3
3669: PPUSH
3670: CALL_OW 87
// wait ( 0 0$1 ) ;
3674: LD_INT 35
3676: PPUSH
3677: CALL_OW 67
// DialogueOn ;
3681: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_STRING D11c-FSol3-1
3692: PPUSH
3693: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3697: LD_EXP 1
3701: PPUSH
3702: LD_STRING D11c-JMM-1
3704: PPUSH
3705: CALL_OW 88
// DialogueOff ;
3709: CALL_OW 7
// end ; if number = 6 then
3713: LD_VAR 0 1
3717: PUSH
3718: LD_INT 6
3720: EQUAL
3721: IFFALSE 3847
// begin hc_class := 1 ;
3723: LD_ADDR_OWVAR 28
3727: PUSH
3728: LD_INT 1
3730: ST_TO_ADDR
// hc_sex := sex_male ;
3731: LD_ADDR_OWVAR 27
3735: PUSH
3736: LD_INT 1
3738: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3739: LD_ADDR_OWVAR 33
3743: PUSH
3744: LD_STRING AmGalRemake
3746: ST_TO_ADDR
// hc_face_number := 1 ;
3747: LD_ADDR_OWVAR 34
3751: PUSH
3752: LD_INT 1
3754: ST_TO_ADDR
// hc_name := Charles Brown ;
3755: LD_ADDR_OWVAR 26
3759: PUSH
3760: LD_STRING Charles Brown
3762: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3763: LD_ADDR_OWVAR 31
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: LD_INT 0
3776: PUSH
3777: LD_INT 1
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: ST_TO_ADDR
// un = CreateHuman ;
3786: LD_ADDR_VAR 0 3
3790: PUSH
3791: CALL_OW 44
3795: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3796: LD_VAR 0 3
3800: PPUSH
3801: LD_INT 12
3803: PPUSH
3804: LD_INT 1
3806: PPUSH
3807: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3811: LD_VAR 0 3
3815: PPUSH
3816: CALL_OW 87
// wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// DialogueOn ;
3827: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3831: LD_VAR 0 3
3835: PPUSH
3836: LD_STRING D11f-Sol5-1
3838: PPUSH
3839: CALL_OW 88
// DialogueOff ;
3843: CALL_OW 7
// end ; if number = 7 then
3847: LD_VAR 0 1
3851: PUSH
3852: LD_INT 7
3854: EQUAL
3855: IFFALSE 3981
// begin hc_class := 1 ;
3857: LD_ADDR_OWVAR 28
3861: PUSH
3862: LD_INT 1
3864: ST_TO_ADDR
// hc_sex := sex_female ;
3865: LD_ADDR_OWVAR 27
3869: PUSH
3870: LD_INT 2
3872: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3873: LD_ADDR_OWVAR 33
3877: PUSH
3878: LD_STRING AmGalRemake
3880: ST_TO_ADDR
// hc_face_number := 2 ;
3881: LD_ADDR_OWVAR 34
3885: PUSH
3886: LD_INT 2
3888: ST_TO_ADDR
// hc_name := Johanna Holland ;
3889: LD_ADDR_OWVAR 26
3893: PUSH
3894: LD_STRING Johanna Holland
3896: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3897: LD_ADDR_OWVAR 31
3901: PUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 0
3907: PUSH
3908: LD_INT 0
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: ST_TO_ADDR
// un = CreateHuman ;
3920: LD_ADDR_VAR 0 3
3924: PUSH
3925: CALL_OW 44
3929: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3930: LD_VAR 0 3
3934: PPUSH
3935: LD_INT 12
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3945: LD_VAR 0 3
3949: PPUSH
3950: CALL_OW 87
// wait ( 0 0$1 ) ;
3954: LD_INT 35
3956: PPUSH
3957: CALL_OW 67
// DialogueOn ;
3961: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
3965: LD_VAR 0 3
3969: PPUSH
3970: LD_STRING D11a-FSol2-1
3972: PPUSH
3973: CALL_OW 88
// DialogueOff ;
3977: CALL_OW 7
// end ; end ; end_of_file
3981: LD_VAR 0 2
3985: RET
// export function PrepareRussian ; var i ; begin
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
3990: LD_INT 3
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 2
3998: PPUSH
3999: LD_EXP 31
4003: PPUSH
4004: LD_EXP 32
4008: PPUSH
4009: CALL_OW 12
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: LD_INT 4
4019: PPUSH
4020: CALL 4627 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4024: LD_INT 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 8
4032: PPUSH
4033: LD_EXP 31
4037: PPUSH
4038: LD_EXP 32
4042: PPUSH
4043: CALL_OW 12
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_INT 4
4053: PPUSH
4054: CALL 4627 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4058: LD_INT 3
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_INT 67
4066: PPUSH
4067: LD_EXP 31
4071: PPUSH
4072: LD_EXP 32
4076: PPUSH
4077: CALL_OW 12
4081: PPUSH
4082: LD_INT 1
4084: PPUSH
4085: LD_INT 2
4087: PPUSH
4088: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4092: LD_INT 3
4094: PPUSH
4095: LD_INT 3
4097: PPUSH
4098: LD_INT 21
4100: PPUSH
4101: LD_EXP 31
4105: PPUSH
4106: LD_EXP 32
4110: PPUSH
4111: CALL_OW 12
4115: PPUSH
4116: LD_INT 3
4118: PPUSH
4119: LD_INT 6
4121: PPUSH
4122: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4126: LD_INT 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 17
4134: PPUSH
4135: LD_EXP 31
4139: PPUSH
4140: LD_EXP 32
4144: PPUSH
4145: CALL_OW 12
4149: PPUSH
4150: LD_INT 3
4152: PPUSH
4153: LD_INT 6
4155: PPUSH
4156: CALL 4627 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4160: LD_INT 3
4162: PPUSH
4163: LD_INT 3
4165: PPUSH
4166: LD_INT 32
4168: PPUSH
4169: LD_EXP 31
4173: PPUSH
4174: LD_EXP 32
4178: PPUSH
4179: CALL_OW 12
4183: PPUSH
4184: LD_INT 4
4186: PPUSH
4187: LD_INT 2
4189: PPUSH
4190: CALL 4627 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 3
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 21
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 32
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: PPUSH
4234: CALL_OW 69
4238: PUSH
4239: FOR_IN
4240: IFFALSE 4280
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4242: LD_INT 3
4244: PPUSH
4245: LD_INT 3
4247: PPUSH
4248: LD_VAR 0 2
4252: PPUSH
4253: LD_EXP 31
4257: PPUSH
4258: LD_EXP 32
4262: PPUSH
4263: CALL_OW 12
4267: PPUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 1
4273: PPUSH
4274: CALL 4627 0 6
4278: GO 4239
4280: POP
4281: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4282: LD_ADDR_VAR 0 2
4286: PUSH
4287: LD_INT 22
4289: PUSH
4290: LD_INT 3
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 21
4299: PUSH
4300: LD_INT 3
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 30
4309: PUSH
4310: LD_INT 31
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: PUSH
4327: FOR_IN
4328: IFFALSE 4356
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4330: LD_EXP 31
4334: PPUSH
4335: LD_EXP 32
4339: PPUSH
4340: CALL_OW 12
4344: PPUSH
4345: LD_VAR 0 2
4349: PPUSH
4350: CALL 4737 0 2
4354: GO 4327
4356: POP
4357: POP
// end ; end_of_file
4358: LD_VAR 0 1
4362: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4363: LD_INT 0
4365: PPUSH
4366: PPUSH
// if exist_mode then
4367: LD_VAR 0 2
4371: IFFALSE 4390
// begin unit := CreateCharacter ( ident ) ;
4373: LD_ADDR_VAR 0 4
4377: PUSH
4378: LD_VAR 0 1
4382: PPUSH
4383: CALL_OW 34
4387: ST_TO_ADDR
// end else
4388: GO 4405
// begin unit := NewCharacter ( ident ) ;
4390: LD_ADDR_VAR 0 4
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: CALL_OW 25
4404: ST_TO_ADDR
// end ; result := unit ;
4405: LD_ADDR_VAR 0 3
4409: PUSH
4410: LD_VAR 0 4
4414: ST_TO_ADDR
// end ;
4415: LD_VAR 0 3
4419: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4420: LD_INT 0
4422: PPUSH
4423: PPUSH
4424: PPUSH
// rnd = rand ( 1 , characters ) ;
4425: LD_ADDR_VAR 0 6
4429: PUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_VAR 0 1
4437: PPUSH
4438: CALL_OW 12
4442: ST_TO_ADDR
// for i = 1 to characters do
4443: LD_ADDR_VAR 0 5
4447: PUSH
4448: DOUBLE
4449: LD_INT 1
4451: DEC
4452: ST_TO_ADDR
4453: LD_VAR 0 1
4457: PUSH
4458: FOR_TO
4459: IFFALSE 4569
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4461: LD_VAR 0 5
4465: PUSH
4466: LD_VAR 0 6
4470: EQUAL
4471: PUSH
4472: LD_VAR 0 1
4476: PUSH
4477: LD_VAR 0 5
4481: ARRAY
4482: PPUSH
4483: CALL_OW 258
4487: PUSH
4488: LD_INT 1
4490: EQUAL
4491: AND
4492: IFFALSE 4514
// Say ( characters [ i ] , dialogMID ) ;
4494: LD_VAR 0 1
4498: PUSH
4499: LD_VAR 0 5
4503: ARRAY
4504: PPUSH
4505: LD_VAR 0 2
4509: PPUSH
4510: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4514: LD_VAR 0 5
4518: PUSH
4519: LD_VAR 0 6
4523: EQUAL
4524: PUSH
4525: LD_VAR 0 1
4529: PUSH
4530: LD_VAR 0 5
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 2
4543: EQUAL
4544: AND
4545: IFFALSE 4567
// Say ( characters [ i ] , dialogFID ) ;
4547: LD_VAR 0 1
4551: PUSH
4552: LD_VAR 0 5
4556: ARRAY
4557: PPUSH
4558: LD_VAR 0 3
4562: PPUSH
4563: CALL_OW 88
// end ;
4567: GO 4458
4569: POP
4570: POP
// end ;
4571: LD_VAR 0 4
4575: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4576: LD_INT 0
4578: PPUSH
4579: PPUSH
// for i in charactersList do
4580: LD_ADDR_VAR 0 4
4584: PUSH
4585: LD_VAR 0 1
4589: PUSH
4590: FOR_IN
4591: IFFALSE 4620
// begin if IsOk ( i ) then
4593: LD_VAR 0 4
4597: PPUSH
4598: CALL_OW 302
4602: IFFALSE 4618
// SaveCharacters ( i , ident ) ;
4604: LD_VAR 0 4
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: CALL_OW 38
// end ;
4618: GO 4590
4620: POP
4621: POP
// end ;
4622: LD_VAR 0 3
4626: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4627: LD_INT 0
4629: PPUSH
4630: PPUSH
4631: PPUSH
4632: PPUSH
// for i = 1 to count do
4633: LD_ADDR_VAR 0 8
4637: PUSH
4638: DOUBLE
4639: LD_INT 1
4641: DEC
4642: ST_TO_ADDR
4643: LD_VAR 0 6
4647: PUSH
4648: FOR_TO
4649: IFFALSE 4730
// begin uc_side = side ;
4651: LD_ADDR_OWVAR 20
4655: PUSH
4656: LD_VAR 0 1
4660: ST_TO_ADDR
// uc_nation = nation ;
4661: LD_ADDR_OWVAR 21
4665: PUSH
4666: LD_VAR 0 2
4670: ST_TO_ADDR
// hc_gallery =  ;
4671: LD_ADDR_OWVAR 33
4675: PUSH
4676: LD_STRING 
4678: ST_TO_ADDR
// hc_name =  ;
4679: LD_ADDR_OWVAR 26
4683: PUSH
4684: LD_STRING 
4686: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4687: LD_INT 0
4689: PPUSH
4690: LD_VAR 0 5
4694: PPUSH
4695: LD_VAR 0 4
4699: PPUSH
4700: CALL_OW 380
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 10
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4714: LD_VAR 0 10
4718: PPUSH
4719: LD_VAR 0 3
4723: PPUSH
4724: CALL_OW 52
// end ;
4728: GO 4648
4730: POP
4731: POP
// end ;
4732: LD_VAR 0 7
4736: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4737: LD_INT 0
4739: PPUSH
4740: PPUSH
4741: PPUSH
// uc_side := GetSide ( b ) ;
4742: LD_ADDR_OWVAR 20
4746: PUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: CALL_OW 255
4756: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4757: LD_ADDR_OWVAR 21
4761: PUSH
4762: LD_VAR 0 2
4766: PPUSH
4767: CALL_OW 248
4771: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4772: LD_INT 0
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: LD_VAR 0 1
4782: PPUSH
4783: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4787: LD_ADDR_VAR 0 5
4791: PUSH
4792: LD_VAR 0 2
4796: PPUSH
4797: CALL_OW 254
4801: PUSH
4802: LD_INT 3
4804: MINUS
4805: ST_TO_ADDR
// if dir < 0 then
4806: LD_VAR 0 5
4810: PUSH
4811: LD_INT 0
4813: LESS
4814: IFFALSE 4830
// dir := 6 + dir ;
4816: LD_ADDR_VAR 0 5
4820: PUSH
4821: LD_INT 6
4823: PUSH
4824: LD_VAR 0 5
4828: PLUS
4829: ST_TO_ADDR
// un := CreateHuman ;
4830: LD_ADDR_VAR 0 4
4834: PUSH
4835: CALL_OW 44
4839: ST_TO_ADDR
// SetDir ( un , dir ) ;
4840: LD_VAR 0 4
4844: PPUSH
4845: LD_VAR 0 5
4849: PPUSH
4850: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4854: LD_VAR 0 4
4858: PPUSH
4859: LD_VAR 0 2
4863: PPUSH
4864: CALL_OW 52
// end ;
4868: LD_VAR 0 3
4872: RET
// export function PrepareDifficulty ; begin
4873: LD_INT 0
4875: PPUSH
// if Difficulty = 1 then
4876: LD_OWVAR 67
4880: PUSH
4881: LD_INT 1
4883: EQUAL
4884: IFFALSE 4902
// begin RuSolMinLevel = 2 ;
4886: LD_ADDR_EXP 31
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4894: LD_ADDR_EXP 32
4898: PUSH
4899: LD_INT 5
4901: ST_TO_ADDR
// end ; if Difficulty = 2 then
4902: LD_OWVAR 67
4906: PUSH
4907: LD_INT 2
4909: EQUAL
4910: IFFALSE 4928
// begin RuSolMinLevel = 3 ;
4912: LD_ADDR_EXP 31
4916: PUSH
4917: LD_INT 3
4919: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4920: LD_ADDR_EXP 32
4924: PUSH
4925: LD_INT 6
4927: ST_TO_ADDR
// end ; if Difficulty = 3 then
4928: LD_OWVAR 67
4932: PUSH
4933: LD_INT 3
4935: EQUAL
4936: IFFALSE 4954
// begin RuSolMinLevel = 5 ;
4938: LD_ADDR_EXP 31
4942: PUSH
4943: LD_INT 5
4945: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4946: LD_ADDR_EXP 32
4950: PUSH
4951: LD_INT 6
4953: ST_TO_ADDR
// end ; end ;
4954: LD_VAR 0 1
4958: RET
// export function ShowQuery1 ; begin
4959: LD_INT 0
4961: PPUSH
// case query ( QKill ) of 1 :
4962: LD_STRING QKill
4964: PPUSH
4965: CALL_OW 97
4969: PUSH
4970: LD_INT 1
4972: DOUBLE
4973: EQUAL
4974: IFTRUE 4978
4976: GO 4989
4978: POP
// begin result = 1 ;
4979: LD_ADDR_VAR 0 1
4983: PUSH
4984: LD_INT 1
4986: ST_TO_ADDR
// end ; 2 :
4987: GO 5028
4989: LD_INT 2
4991: DOUBLE
4992: EQUAL
4993: IFTRUE 4997
4995: GO 5008
4997: POP
// begin result = 2 ;
4998: LD_ADDR_VAR 0 1
5002: PUSH
5003: LD_INT 2
5005: ST_TO_ADDR
// end ; 3 :
5006: GO 5028
5008: LD_INT 3
5010: DOUBLE
5011: EQUAL
5012: IFTRUE 5016
5014: GO 5027
5016: POP
// begin result = 3 ;
5017: LD_ADDR_VAR 0 1
5021: PUSH
5022: LD_INT 3
5024: ST_TO_ADDR
// end ; end ;
5025: GO 5028
5027: POP
// end ;
5028: LD_VAR 0 1
5032: RET
// export function ShowQuery2 ; begin
5033: LD_INT 0
5035: PPUSH
// case query ( QKill2 ) of 1 :
5036: LD_STRING QKill2
5038: PPUSH
5039: CALL_OW 97
5043: PUSH
5044: LD_INT 1
5046: DOUBLE
5047: EQUAL
5048: IFTRUE 5052
5050: GO 5063
5052: POP
// begin result = 1 ;
5053: LD_ADDR_VAR 0 1
5057: PUSH
5058: LD_INT 1
5060: ST_TO_ADDR
// end ; 2 :
5061: GO 5083
5063: LD_INT 2
5065: DOUBLE
5066: EQUAL
5067: IFTRUE 5071
5069: GO 5082
5071: POP
// begin result = 2 ;
5072: LD_ADDR_VAR 0 1
5076: PUSH
5077: LD_INT 2
5079: ST_TO_ADDR
// end ; end ;
5080: GO 5083
5082: POP
// end ;
5083: LD_VAR 0 1
5087: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
5092: PPUSH
5093: PPUSH
// for i = 1 to 72 do
5094: LD_ADDR_VAR 0 5
5098: PUSH
5099: DOUBLE
5100: LD_INT 1
5102: DEC
5103: ST_TO_ADDR
5104: LD_INT 72
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5166
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5110: LD_VAR 0 5
5114: PPUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL_OW 321
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: PUSH
5129: LD_VAR 0 5
5133: PPUSH
5134: LD_VAR 0 3
5138: PPUSH
5139: CALL_OW 482
5143: PUSH
5144: LD_INT 1
5146: EQUAL
5147: AND
5148: IFFALSE 5164
// AddComResearch ( lab , i ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_VAR 0 5
5159: PPUSH
5160: CALL_OW 184
5164: GO 5107
5166: POP
5167: POP
// end ;
5168: LD_VAR 0 4
5172: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5173: LD_INT 0
5175: PPUSH
5176: PPUSH
5177: PPUSH
5178: PPUSH
5179: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5180: LD_ADDR_VAR 0 6
5184: PUSH
5185: LD_INT 22
5187: PUSH
5188: LD_VAR 0 1
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: LD_INT 25
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 16
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 24
5227: PUSH
5228: LD_INT 1000
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 69
5244: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5245: LD_ADDR_VAR 0 4
5249: PUSH
5250: LD_INT 22
5252: PUSH
5253: LD_VAR 0 1
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 21
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 24
5277: PUSH
5278: LD_INT 1000
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: LIST
5293: PUSH
5294: EMPTY
5295: LIST
5296: PPUSH
5297: CALL_OW 69
5301: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5302: LD_VAR 0 4
5306: PUSH
5307: LD_INT 0
5309: GREATER
5310: PUSH
5311: LD_VAR 0 6
5315: PUSH
5316: LD_INT 0
5318: GREATER
5319: AND
5320: IFFALSE 5386
// begin for i in engineerOk_list do
5322: LD_ADDR_VAR 0 5
5326: PUSH
5327: LD_VAR 0 6
5331: PUSH
5332: FOR_IN
5333: IFFALSE 5384
// begin for j in buildings_list do
5335: LD_ADDR_VAR 0 7
5339: PUSH
5340: LD_VAR 0 4
5344: PUSH
5345: FOR_IN
5346: IFFALSE 5380
// begin AddComExitBuilding ( i ) ;
5348: LD_VAR 0 5
5352: PPUSH
5353: CALL_OW 182
// wait ( 0 0$1 ) ;
5357: LD_INT 35
5359: PPUSH
5360: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5364: LD_VAR 0 5
5368: PPUSH
5369: LD_VAR 0 7
5373: PPUSH
5374: CALL_OW 190
// end ;
5378: GO 5345
5380: POP
5381: POP
// end ;
5382: GO 5332
5384: POP
5385: POP
// end ; if buildings_list = 0 then
5386: LD_VAR 0 4
5390: PUSH
5391: LD_INT 0
5393: EQUAL
5394: IFFALSE 5427
// begin for i in engineerOK_list do
5396: LD_ADDR_VAR 0 5
5400: PUSH
5401: LD_VAR 0 6
5405: PUSH
5406: FOR_IN
5407: IFFALSE 5425
// begin ComEnterUnit ( i , building ) ;
5409: LD_VAR 0 5
5413: PPUSH
5414: LD_VAR 0 2
5418: PPUSH
5419: CALL_OW 120
// end ;
5423: GO 5406
5425: POP
5426: POP
// end ; end ;
5427: LD_VAR 0 3
5431: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_INT 22
5446: PUSH
5447: LD_VAR 0 1
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: PUSH
5456: LD_INT 25
5458: PUSH
5459: LD_INT 4
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 69
5474: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5475: LD_ADDR_VAR 0 9
5479: PUSH
5480: LD_VAR 0 3
5484: PPUSH
5485: LD_INT 22
5487: PUSH
5488: LD_VAR 0 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 21
5499: PUSH
5500: LD_INT 1
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 24
5512: PUSH
5513: LD_INT 750
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: PPUSH
5529: CALL_OW 70
5533: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5534: LD_VAR 0 9
5538: PUSH
5539: LD_INT 0
5541: GREATER
5542: PUSH
5543: LD_VAR 0 6
5547: PUSH
5548: LD_INT 0
5550: GREATER
5551: AND
5552: IFFALSE 5679
// begin for i = 1 to damageUnits do
5554: LD_ADDR_VAR 0 7
5558: PUSH
5559: DOUBLE
5560: LD_INT 1
5562: DEC
5563: ST_TO_ADDR
5564: LD_VAR 0 9
5568: PUSH
5569: FOR_TO
5570: IFFALSE 5594
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5572: LD_VAR 0 9
5576: PUSH
5577: LD_VAR 0 7
5581: ARRAY
5582: PPUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 113
5592: GO 5569
5594: POP
5595: POP
// for i in sci_list do
5596: LD_ADDR_VAR 0 7
5600: PUSH
5601: LD_VAR 0 6
5605: PUSH
5606: FOR_IN
5607: IFFALSE 5675
// begin ComExitBuilding ( i ) ;
5609: LD_VAR 0 7
5613: PPUSH
5614: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5618: LD_ADDR_VAR 0 8
5622: PUSH
5623: LD_VAR 0 2
5627: PPUSH
5628: LD_INT 22
5630: PUSH
5631: LD_VAR 0 1
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PPUSH
5640: CALL_OW 70
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5671
// begin AddComHeal ( i , j ) ;
5648: LD_VAR 0 7
5652: PPUSH
5653: LD_VAR 0 8
5657: PPUSH
5658: CALL_OW 188
// wait ( 1 1$0 ) ;
5662: LD_INT 2100
5664: PPUSH
5665: CALL_OW 67
// end ;
5669: GO 5645
5671: POP
5672: POP
// end ;
5673: GO 5606
5675: POP
5676: POP
// end else
5677: GO 5693
// begin AddComEnterUnit ( sci_list , build ) ;
5679: LD_VAR 0 6
5683: PPUSH
5684: LD_VAR 0 4
5688: PPUSH
5689: CALL_OW 180
// end ; end ;
5693: LD_VAR 0 5
5697: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5698: LD_INT 0
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
5704: PPUSH
5705: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5706: LD_INT 22
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 21
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PPUSH
5732: CALL_OW 69
5736: PUSH
5737: LD_VAR 0 3
5741: LESSEQUAL
5742: IFFALSE 5809
// for i = 1 to vehCount do
5744: LD_ADDR_VAR 0 10
5748: PUSH
5749: DOUBLE
5750: LD_INT 1
5752: DEC
5753: ST_TO_ADDR
5754: LD_VAR 0 3
5758: PUSH
5759: FOR_TO
5760: IFFALSE 5807
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5762: LD_VAR 0 2
5766: PPUSH
5767: LD_VAR 0 8
5771: PPUSH
5772: LD_VAR 0 6
5776: PPUSH
5777: LD_VAR 0 7
5781: PPUSH
5782: LD_VAR 0 5
5786: PUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_VAR 0 5
5794: PPUSH
5795: CALL_OW 12
5799: ARRAY
5800: PPUSH
5801: CALL_OW 185
5805: GO 5759
5807: POP
5808: POP
// repeat wait ( 0 0$1 ) ;
5809: LD_INT 35
5811: PPUSH
5812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5816: LD_INT 22
5818: PUSH
5819: LD_VAR 0 1
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 21
5830: PUSH
5831: LD_INT 2
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 24
5840: PUSH
5841: LD_INT 250
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: PUSH
5858: LD_VAR 0 3
5862: GREATEREQUAL
5863: IFFALSE 5809
// repeat begin wait ( 0 0$1 ) ;
5865: LD_INT 35
5867: PPUSH
5868: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5872: LD_ADDR_VAR 0 10
5876: PUSH
5877: LD_INT 22
5879: PUSH
5880: LD_VAR 0 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: PUSH
5899: LD_INT 24
5901: PUSH
5902: LD_INT 651
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: PPUSH
5914: CALL_OW 69
5918: PUSH
5919: FOR_IN
5920: IFFALSE 6096
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5922: LD_ADDR_VAR 0 13
5926: PUSH
5927: LD_INT 22
5929: PUSH
5930: LD_VAR 0 4
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: CALL_OW 69
5943: PPUSH
5944: LD_VAR 0 10
5948: PPUSH
5949: CALL_OW 74
5953: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5954: LD_ADDR_VAR 0 14
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_VAR 0 4
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: LD_INT 2
5973: PUSH
5974: LD_INT 59
5976: PUSH
5977: EMPTY
5978: LIST
5979: PUSH
5980: LD_INT 21
5982: PUSH
5983: LD_INT 1
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 2
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: PPUSH
6013: CALL_OW 69
6017: PPUSH
6018: LD_VAR 0 10
6022: PPUSH
6023: CALL_OW 74
6027: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6028: LD_VAR 0 10
6032: PPUSH
6033: LD_VAR 0 13
6037: PPUSH
6038: CALL_OW 296
6042: PUSH
6043: LD_INT 8
6045: PLUS
6046: PUSH
6047: LD_VAR 0 10
6051: PPUSH
6052: LD_VAR 0 14
6056: PPUSH
6057: CALL_OW 296
6061: LESS
6062: IFFALSE 6080
// begin ComAttackUnit ( i , target1 ) ;
6064: LD_VAR 0 10
6068: PPUSH
6069: LD_VAR 0 13
6073: PPUSH
6074: CALL_OW 115
// end else
6078: GO 6094
// begin ComAttackUnit ( i , target2 ) ;
6080: LD_VAR 0 10
6084: PPUSH
6085: LD_VAR 0 14
6089: PPUSH
6090: CALL_OW 115
// end ; end ;
6094: GO 5919
6096: POP
6097: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6098: LD_INT 22
6100: PUSH
6101: LD_INT 3
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: LD_INT 21
6110: PUSH
6111: LD_INT 2
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 34
6123: PUSH
6124: LD_INT 51
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PPUSH
6140: CALL_OW 69
6144: PUSH
6145: LD_INT 0
6147: EQUAL
6148: IFFALSE 5865
// end ;
6150: LD_VAR 0 9
6154: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
6159: PPUSH
6160: PPUSH
// enable ;
6161: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6162: LD_ADDR_VAR 0 7
6166: PUSH
6167: LD_VAR 0 3
6171: PPUSH
6172: CALL_OW 435
6176: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6177: LD_ADDR_VAR 0 6
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 34
6196: PUSH
6197: LD_VAR 0 2
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6215: LD_VAR 0 6
6219: PUSH
6220: LD_INT 0
6222: GREATER
6223: PUSH
6224: LD_VAR 0 3
6228: PPUSH
6229: CALL_OW 435
6233: AND
6234: PUSH
6235: LD_VAR 0 7
6239: PUSH
6240: LD_INT 0
6242: GREATER
6243: AND
6244: IFFALSE 6293
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6246: LD_VAR 0 6
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_VAR 0 7
6259: PUSH
6260: LD_INT 1
6262: ARRAY
6263: PPUSH
6264: LD_VAR 0 7
6268: PUSH
6269: LD_INT 2
6271: ARRAY
6272: PPUSH
6273: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6277: LD_VAR 0 6
6281: PUSH
6282: LD_INT 1
6284: ARRAY
6285: PPUSH
6286: LD_INT 100
6288: PPUSH
6289: CALL_OW 240
// end ; clear_crates := false ;
6293: LD_ADDR_VAR 0 5
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6301: LD_INT 35
6303: PPUSH
6304: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6308: LD_VAR 0 6
6312: PUSH
6313: LD_INT 1
6315: ARRAY
6316: PPUSH
6317: CALL_OW 315
6321: NOT
6322: PUSH
6323: LD_VAR 0 5
6327: OR
6328: IFFALSE 6301
// end ;
6330: LD_VAR 0 4
6334: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6348: LD_ADDR_VAR 0 9
6352: PUSH
6353: LD_INT 22
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 24
6377: PUSH
6378: LD_INT 660
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 3
6387: PUSH
6388: LD_INT 58
6390: PUSH
6391: EMPTY
6392: LIST
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 34
6403: PUSH
6404: LD_INT 53
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6427: LD_ADDR_VAR 0 10
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_VAR 0 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 21
6446: PUSH
6447: LD_INT 2
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: LD_INT 24
6459: PUSH
6460: LD_INT 660
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 69
6480: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6481: LD_ADDR_VAR 0 11
6485: PUSH
6486: LD_VAR 0 2
6490: PPUSH
6491: LD_INT 22
6493: PUSH
6494: LD_VAR 0 1
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: LD_INT 21
6505: PUSH
6506: LD_INT 2
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 24
6518: PUSH
6519: LD_INT 1000
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 70
6539: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6540: LD_ADDR_VAR 0 12
6544: PUSH
6545: LD_VAR 0 2
6549: PPUSH
6550: LD_INT 22
6552: PUSH
6553: LD_VAR 0 1
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: LD_INT 21
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 24
6574: PUSH
6575: LD_INT 1000
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PUSH
6582: LD_INT 58
6584: PUSH
6585: EMPTY
6586: LIST
6587: PUSH
6588: LD_INT 3
6590: PUSH
6591: LD_INT 34
6593: PUSH
6594: LD_INT 53
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PPUSH
6612: CALL_OW 70
6616: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6617: LD_ADDR_VAR 0 13
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6624: LD_ADDR_VAR 0 14
6628: PUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_INT 22
6636: PUSH
6637: LD_VAR 0 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PPUSH
6660: CALL_OW 70
6664: ST_TO_ADDR
// if damageVehicle_list > 0 then
6665: LD_VAR 0 10
6669: PUSH
6670: LD_INT 0
6672: GREATER
6673: IFFALSE 6711
// begin for i in damageVehicle_list do
6675: LD_ADDR_VAR 0 7
6679: PUSH
6680: LD_VAR 0 10
6684: PUSH
6685: FOR_IN
6686: IFFALSE 6709
// begin ComMoveXY ( i , repX , repY ) ;
6688: LD_VAR 0 7
6692: PPUSH
6693: LD_VAR 0 3
6697: PPUSH
6698: LD_VAR 0 4
6702: PPUSH
6703: CALL_OW 111
// end ;
6707: GO 6685
6709: POP
6710: POP
// end ; if vehicleNeedRepair_list > 0 then
6711: LD_VAR 0 11
6715: PUSH
6716: LD_INT 0
6718: GREATER
6719: IFFALSE 6806
// begin for i in vehicleNeedRepair_list do
6721: LD_ADDR_VAR 0 7
6725: PUSH
6726: LD_VAR 0 11
6730: PUSH
6731: FOR_IN
6732: IFFALSE 6804
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6734: LD_ADDR_VAR 0 13
6738: PUSH
6739: LD_VAR 0 13
6743: PUSH
6744: LD_VAR 0 7
6748: PPUSH
6749: CALL_OW 313
6753: ADD
6754: ST_TO_ADDR
// for j in mechanicInside_list do
6755: LD_ADDR_VAR 0 8
6759: PUSH
6760: LD_VAR 0 13
6764: PUSH
6765: FOR_IN
6766: IFFALSE 6800
// begin ComExitVehicle ( i ) ;
6768: LD_VAR 0 7
6772: PPUSH
6773: CALL_OW 121
// wait ( 0 0$1 ) ;
6777: LD_INT 35
6779: PPUSH
6780: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6784: LD_VAR 0 7
6788: PPUSH
6789: LD_VAR 0 8
6793: PPUSH
6794: CALL_OW 129
// end ;
6798: GO 6765
6800: POP
6801: POP
// end ;
6802: GO 6731
6804: POP
6805: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6806: LD_VAR 0 12
6810: PUSH
6811: LD_INT 0
6813: GREATER
6814: IFFALSE 6854
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6816: LD_VAR 0 14
6820: PUSH
6821: LD_INT 1
6823: ARRAY
6824: PPUSH
6825: LD_VAR 0 12
6829: PUSH
6830: LD_INT 1
6832: ARRAY
6833: PPUSH
6834: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6838: LD_VAR 0 12
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_INT 100
6849: PPUSH
6850: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6854: LD_VAR 0 9
6858: PUSH
6859: LD_INT 0
6861: GREATER
6862: IFFALSE 7053
// begin for i in vehicleOK_list do
6864: LD_ADDR_VAR 0 7
6868: PUSH
6869: LD_VAR 0 9
6873: PUSH
6874: FOR_IN
6875: IFFALSE 7051
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6877: LD_ADDR_VAR 0 15
6881: PUSH
6882: LD_INT 22
6884: PUSH
6885: LD_VAR 0 5
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 69
6898: PPUSH
6899: LD_VAR 0 7
6903: PPUSH
6904: CALL_OW 74
6908: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6909: LD_ADDR_VAR 0 16
6913: PUSH
6914: LD_INT 22
6916: PUSH
6917: LD_VAR 0 5
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 59
6931: PUSH
6932: EMPTY
6933: LIST
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 21
6947: PUSH
6948: LD_INT 2
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: PPUSH
6973: LD_VAR 0 7
6977: PPUSH
6978: CALL_OW 74
6982: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6983: LD_VAR 0 7
6987: PPUSH
6988: LD_VAR 0 15
6992: PPUSH
6993: CALL_OW 296
6997: PUSH
6998: LD_INT 8
7000: PLUS
7001: PUSH
7002: LD_VAR 0 7
7006: PPUSH
7007: LD_VAR 0 16
7011: PPUSH
7012: CALL_OW 296
7016: LESS
7017: IFFALSE 7035
// begin ComAttackUnit ( i , target1 ) ;
7019: LD_VAR 0 7
7023: PPUSH
7024: LD_VAR 0 15
7028: PPUSH
7029: CALL_OW 115
// end else
7033: GO 7049
// begin ComAttackUnit ( i , target2 ) ;
7035: LD_VAR 0 7
7039: PPUSH
7040: LD_VAR 0 16
7044: PPUSH
7045: CALL_OW 115
// end ; end ;
7049: GO 6874
7051: POP
7052: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7053: LD_ADDR_VAR 0 7
7057: PUSH
7058: LD_VAR 0 2
7062: PPUSH
7063: LD_INT 22
7065: PUSH
7066: LD_VAR 0 1
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 3
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 70
7093: NOT
7094: PUSH
7095: FOR_IN
7096: IFFALSE 7119
// ComMoveXY ( i , repX , repY ) ;
7098: LD_VAR 0 7
7102: PPUSH
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_VAR 0 4
7112: PPUSH
7113: CALL_OW 111
7117: GO 7095
7119: POP
7120: POP
// end ;
7121: LD_VAR 0 6
7125: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7130: LD_INT 22
7132: PUSH
7133: LD_VAR 0 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PPUSH
7156: CALL_OW 69
7160: PUSH
7161: LD_INT 0
7163: GREATER
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_VAR 0 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 3
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: LD_INT 24
7192: PUSH
7193: LD_INT 1000
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: PUSH
7214: LD_INT 0
7216: EQUAL
7217: AND
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: LD_INT 0
7226: GREATER
7227: AND
7228: IFFALSE 7327
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7230: LD_ADDR_VAR 0 4
7234: PUSH
7235: LD_INT 22
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: PUSH
7266: FOR_IN
7267: IFFALSE 7325
// begin AddComExitBuilding ( i ) ;
7269: LD_VAR 0 4
7273: PPUSH
7274: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7278: LD_VAR 0 4
7282: PPUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 1
7290: ARRAY
7291: PPUSH
7292: LD_VAR 0 2
7296: PUSH
7297: LD_INT 2
7299: ARRAY
7300: PPUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 3
7308: ARRAY
7309: PPUSH
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 4
7317: ARRAY
7318: PPUSH
7319: CALL_OW 205
// end ;
7323: GO 7266
7325: POP
7326: POP
// end ; end ;
7327: LD_VAR 0 3
7331: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
7339: PPUSH
7340: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7341: LD_ADDR_VAR 0 7
7345: PUSH
7346: LD_INT 22
7348: PUSH
7349: LD_VAR 0 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 25
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 56
7370: PUSH
7371: EMPTY
7372: LIST
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: LD_INT 700
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7395: LD_ADDR_VAR 0 8
7399: PUSH
7400: LD_INT 22
7402: PUSH
7403: LD_VAR 0 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 30
7414: PUSH
7415: LD_INT 32
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 58
7424: PUSH
7425: EMPTY
7426: LIST
7427: PUSH
7428: LD_INT 24
7430: PUSH
7431: LD_INT 251
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PPUSH
7444: CALL_OW 69
7448: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7449: LD_ADDR_VAR 0 10
7453: PUSH
7454: LD_INT 22
7456: PUSH
7457: LD_VAR 0 1
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 5
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 8
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 9
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PPUSH
7509: CALL_OW 69
7513: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_VAR 0 2
7523: PPUSH
7524: CALL_OW 313
7528: PUSH
7529: LD_VAR 0 10
7533: DIFF
7534: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7535: LD_VAR 0 8
7539: PUSH
7540: LD_INT 0
7542: EQUAL
7543: PUSH
7544: LD_VAR 0 9
7548: PUSH
7549: LD_INT 0
7551: EQUAL
7552: AND
7553: IFFALSE 7599
// begin for i in soldiers_list do
7555: LD_ADDR_VAR 0 5
7559: PUSH
7560: LD_VAR 0 7
7564: PUSH
7565: FOR_IN
7566: IFFALSE 7595
// begin if IsOK ( build ) then
7568: LD_VAR 0 2
7572: PPUSH
7573: CALL_OW 302
7577: IFFALSE 7593
// ComEnterUnit ( i , build ) ;
7579: LD_VAR 0 5
7583: PPUSH
7584: LD_VAR 0 2
7588: PPUSH
7589: CALL_OW 120
// end ;
7593: GO 7565
7595: POP
7596: POP
// end else
7597: GO 7684
// begin for i = 1 to turretList do
7599: LD_ADDR_VAR 0 5
7603: PUSH
7604: DOUBLE
7605: LD_INT 1
7607: DEC
7608: ST_TO_ADDR
7609: LD_VAR 0 8
7613: PUSH
7614: FOR_TO
7615: IFFALSE 7682
// begin for j = 1 to temp do
7617: LD_ADDR_VAR 0 6
7621: PUSH
7622: DOUBLE
7623: LD_INT 1
7625: DEC
7626: ST_TO_ADDR
7627: LD_VAR 0 9
7631: PUSH
7632: FOR_TO
7633: IFFALSE 7678
// begin ComExitBuilding ( temp [ j ] ) ;
7635: LD_VAR 0 9
7639: PUSH
7640: LD_VAR 0 6
7644: ARRAY
7645: PPUSH
7646: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7650: LD_VAR 0 9
7654: PUSH
7655: LD_VAR 0 6
7659: ARRAY
7660: PPUSH
7661: LD_VAR 0 8
7665: PUSH
7666: LD_VAR 0 5
7670: ARRAY
7671: PPUSH
7672: CALL_OW 180
// end ;
7676: GO 7632
7678: POP
7679: POP
// end ;
7680: GO 7614
7682: POP
7683: POP
// end ; end ;
7684: LD_VAR 0 4
7688: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
7693: PPUSH
7694: PPUSH
7695: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7696: LD_ADDR_VAR 0 6
7700: PUSH
7701: LD_INT 22
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 2
7715: PUSH
7716: LD_INT 30
7718: PUSH
7719: LD_INT 31
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 30
7728: PUSH
7729: LD_INT 32
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: LD_INT 30
7738: PUSH
7739: LD_INT 33
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 30
7748: PUSH
7749: LD_INT 4
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 30
7758: PUSH
7759: LD_INT 5
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7783: LD_ADDR_VAR 0 7
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 21
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 58
7812: PUSH
7813: EMPTY
7814: LIST
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7826: LD_VAR 0 6
7830: PUSH
7831: LD_INT 0
7833: GREATER
7834: PUSH
7835: LD_VAR 0 7
7839: PUSH
7840: LD_INT 0
7842: GREATER
7843: AND
7844: IFFALSE 7937
// begin for i in turretsList do
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_VAR 0 6
7855: PUSH
7856: FOR_IN
7857: IFFALSE 7935
// begin for j in enemyBuildings do
7859: LD_ADDR_VAR 0 5
7863: PUSH
7864: LD_VAR 0 7
7868: PUSH
7869: FOR_IN
7870: IFFALSE 7931
// begin display_strings = [ GetDistUnits ( i , j ) ] ;
7872: LD_ADDR_OWVAR 47
7876: PUSH
7877: LD_VAR 0 4
7881: PPUSH
7882: LD_VAR 0 5
7886: PPUSH
7887: CALL_OW 296
7891: PUSH
7892: EMPTY
7893: LIST
7894: ST_TO_ADDR
// if GetDistUnits ( i , j ) < 20 then
7895: LD_VAR 0 4
7899: PPUSH
7900: LD_VAR 0 5
7904: PPUSH
7905: CALL_OW 296
7909: PUSH
7910: LD_INT 20
7912: LESS
7913: IFFALSE 7929
// begin ComAttackUnit ( i , j ) ;
7915: LD_VAR 0 4
7919: PPUSH
7920: LD_VAR 0 5
7924: PPUSH
7925: CALL_OW 115
// end ; end ;
7929: GO 7869
7931: POP
7932: POP
// end ;
7933: GO 7856
7935: POP
7936: POP
// end ; end ;
7937: LD_VAR 0 3
7941: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// for i = 1 to medicCount do
7955: LD_ADDR_VAR 0 14
7959: PUSH
7960: DOUBLE
7961: LD_INT 1
7963: DEC
7964: ST_TO_ADDR
7965: LD_VAR 0 7
7969: PUSH
7970: FOR_TO
7971: IFFALSE 8053
// begin uc_side = side ;
7973: LD_ADDR_OWVAR 20
7977: PUSH
7978: LD_VAR 0 1
7982: ST_TO_ADDR
// uc_nation = nation ;
7983: LD_ADDR_OWVAR 21
7987: PUSH
7988: LD_VAR 0 2
7992: ST_TO_ADDR
// hc_name =  ;
7993: LD_ADDR_OWVAR 26
7997: PUSH
7998: LD_STRING 
8000: ST_TO_ADDR
// hc_gallery =  ;
8001: LD_ADDR_OWVAR 33
8005: PUSH
8006: LD_STRING 
8008: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8009: LD_INT 0
8011: PPUSH
8012: LD_INT 4
8014: PPUSH
8015: LD_VAR 0 8
8019: PPUSH
8020: CALL_OW 380
// un = CreateHuman ;
8024: LD_ADDR_VAR 0 16
8028: PUSH
8029: CALL_OW 44
8033: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8034: LD_VAR 0 16
8038: PPUSH
8039: LD_VAR 0 9
8043: PPUSH
8044: LD_INT 0
8046: PPUSH
8047: CALL_OW 49
// end ;
8051: GO 7970
8053: POP
8054: POP
// for i = 1 to soldierCount do
8055: LD_ADDR_VAR 0 14
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_VAR 0 3
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8153
// begin uc_side = side ;
8073: LD_ADDR_OWVAR 20
8077: PUSH
8078: LD_VAR 0 1
8082: ST_TO_ADDR
// uc_nation = nation ;
8083: LD_ADDR_OWVAR 21
8087: PUSH
8088: LD_VAR 0 2
8092: ST_TO_ADDR
// hc_name =  ;
8093: LD_ADDR_OWVAR 26
8097: PUSH
8098: LD_STRING 
8100: ST_TO_ADDR
// hc_gallery =  ;
8101: LD_ADDR_OWVAR 33
8105: PUSH
8106: LD_STRING 
8108: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8109: LD_INT 0
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: LD_VAR 0 8
8119: PPUSH
8120: CALL_OW 380
// un = CreateHuman ;
8124: LD_ADDR_VAR 0 16
8128: PUSH
8129: CALL_OW 44
8133: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8134: LD_VAR 0 16
8138: PPUSH
8139: LD_VAR 0 9
8143: PPUSH
8144: LD_INT 0
8146: PPUSH
8147: CALL_OW 49
// end ;
8151: GO 8070
8153: POP
8154: POP
// for i = 1 to sniperCount do
8155: LD_ADDR_VAR 0 14
8159: PUSH
8160: DOUBLE
8161: LD_INT 1
8163: DEC
8164: ST_TO_ADDR
8165: LD_VAR 0 4
8169: PUSH
8170: FOR_TO
8171: IFFALSE 8253
// begin uc_side = side ;
8173: LD_ADDR_OWVAR 20
8177: PUSH
8178: LD_VAR 0 1
8182: ST_TO_ADDR
// uc_nation = nation ;
8183: LD_ADDR_OWVAR 21
8187: PUSH
8188: LD_VAR 0 2
8192: ST_TO_ADDR
// hc_name =  ;
8193: LD_ADDR_OWVAR 26
8197: PUSH
8198: LD_STRING 
8200: ST_TO_ADDR
// hc_gallery =  ;
8201: LD_ADDR_OWVAR 33
8205: PUSH
8206: LD_STRING 
8208: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8209: LD_INT 0
8211: PPUSH
8212: LD_INT 5
8214: PPUSH
8215: LD_VAR 0 8
8219: PPUSH
8220: CALL_OW 380
// un = CreateHuman ;
8224: LD_ADDR_VAR 0 16
8228: PUSH
8229: CALL_OW 44
8233: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8234: LD_VAR 0 16
8238: PPUSH
8239: LD_VAR 0 9
8243: PPUSH
8244: LD_INT 0
8246: PPUSH
8247: CALL_OW 49
// end ;
8251: GO 8170
8253: POP
8254: POP
// for i = 1 to bazookCount do
8255: LD_ADDR_VAR 0 14
8259: PUSH
8260: DOUBLE
8261: LD_INT 1
8263: DEC
8264: ST_TO_ADDR
8265: LD_VAR 0 5
8269: PUSH
8270: FOR_TO
8271: IFFALSE 8353
// begin uc_side = side ;
8273: LD_ADDR_OWVAR 20
8277: PUSH
8278: LD_VAR 0 1
8282: ST_TO_ADDR
// uc_nation = nation ;
8283: LD_ADDR_OWVAR 21
8287: PUSH
8288: LD_VAR 0 2
8292: ST_TO_ADDR
// hc_name =  ;
8293: LD_ADDR_OWVAR 26
8297: PUSH
8298: LD_STRING 
8300: ST_TO_ADDR
// hc_gallery =  ;
8301: LD_ADDR_OWVAR 33
8305: PUSH
8306: LD_STRING 
8308: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8309: LD_INT 0
8311: PPUSH
8312: LD_INT 9
8314: PPUSH
8315: LD_VAR 0 8
8319: PPUSH
8320: CALL_OW 380
// un = CreateHuman ;
8324: LD_ADDR_VAR 0 16
8328: PUSH
8329: CALL_OW 44
8333: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8334: LD_VAR 0 16
8338: PPUSH
8339: LD_VAR 0 9
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL_OW 49
// end ;
8351: GO 8270
8353: POP
8354: POP
// for i = 1 to mortalCount do
8355: LD_ADDR_VAR 0 14
8359: PUSH
8360: DOUBLE
8361: LD_INT 1
8363: DEC
8364: ST_TO_ADDR
8365: LD_VAR 0 6
8369: PUSH
8370: FOR_TO
8371: IFFALSE 8453
// begin uc_side = side ;
8373: LD_ADDR_OWVAR 20
8377: PUSH
8378: LD_VAR 0 1
8382: ST_TO_ADDR
// uc_nation = nation ;
8383: LD_ADDR_OWVAR 21
8387: PUSH
8388: LD_VAR 0 2
8392: ST_TO_ADDR
// hc_name =  ;
8393: LD_ADDR_OWVAR 26
8397: PUSH
8398: LD_STRING 
8400: ST_TO_ADDR
// hc_gallery =  ;
8401: LD_ADDR_OWVAR 33
8405: PUSH
8406: LD_STRING 
8408: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8409: LD_INT 0
8411: PPUSH
8412: LD_INT 8
8414: PPUSH
8415: LD_VAR 0 8
8419: PPUSH
8420: CALL_OW 380
// un = CreateHuman ;
8424: LD_ADDR_VAR 0 16
8428: PUSH
8429: CALL_OW 44
8433: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8434: LD_VAR 0 16
8438: PPUSH
8439: LD_VAR 0 9
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 49
// end ;
8451: GO 8370
8453: POP
8454: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8455: LD_ADDR_VAR 0 19
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_VAR 0 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: LD_INT 25
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 25
8487: PUSH
8488: LD_INT 5
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 25
8497: PUSH
8498: LD_INT 8
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 25
8507: PUSH
8508: LD_INT 9
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 69
8530: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8531: LD_ADDR_VAR 0 18
8535: PUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 25
8550: PUSH
8551: LD_INT 4
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: ST_TO_ADDR
// for i in medic_list do
8567: LD_ADDR_VAR 0 14
8571: PUSH
8572: LD_VAR 0 18
8576: PUSH
8577: FOR_IN
8578: IFFALSE 8596
// ComMoveToArea ( i , healArea ) ;
8580: LD_VAR 0 14
8584: PPUSH
8585: LD_VAR 0 10
8589: PPUSH
8590: CALL_OW 113
8594: GO 8577
8596: POP
8597: POP
// if strategy = 1 then
8598: LD_VAR 0 12
8602: PUSH
8603: LD_INT 1
8605: EQUAL
8606: IFFALSE 9311
// begin repeat wait ( 0 0$3 ) ;
8608: LD_INT 105
8610: PPUSH
8611: CALL_OW 67
// for i in soldiersOK_list do
8615: LD_ADDR_VAR 0 14
8619: PUSH
8620: LD_VAR 0 19
8624: PUSH
8625: FOR_IN
8626: IFFALSE 8660
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8628: LD_VAR 0 14
8632: PPUSH
8633: LD_INT 80
8635: PPUSH
8636: LD_INT 109
8638: PPUSH
8639: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8643: LD_VAR 0 14
8647: PPUSH
8648: LD_INT 39
8650: PPUSH
8651: LD_INT 49
8653: PPUSH
8654: CALL_OW 174
// end ;
8658: GO 8625
8660: POP
8661: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8662: LD_INT 15
8664: PPUSH
8665: LD_INT 22
8667: PUSH
8668: LD_VAR 0 1
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PPUSH
8677: CALL_OW 70
8681: PUSH
8682: LD_INT 0
8684: GREATER
8685: IFFALSE 8608
// repeat wait ( 0 0$1 ) ;
8687: LD_INT 35
8689: PPUSH
8690: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8694: LD_ADDR_VAR 0 17
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_VAR 0 1
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 1
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: LD_INT 24
8719: PUSH
8720: LD_INT 550
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 24
8733: PUSH
8734: LD_INT 250
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8755: LD_ADDR_VAR 0 19
8759: PUSH
8760: LD_INT 22
8762: PUSH
8763: LD_VAR 0 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 2
8774: PUSH
8775: LD_INT 25
8777: PUSH
8778: LD_INT 1
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 25
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: LD_INT 25
8797: PUSH
8798: LD_INT 8
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 25
8807: PUSH
8808: LD_INT 9
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 24
8824: PUSH
8825: LD_INT 1000
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: PPUSH
8837: CALL_OW 69
8841: ST_TO_ADDR
// if medicCount > 0 then
8842: LD_VAR 0 7
8846: PUSH
8847: LD_INT 0
8849: GREATER
8850: IFFALSE 8924
// begin if damageUnit_list > 0 then
8852: LD_VAR 0 17
8856: PUSH
8857: LD_INT 0
8859: GREATER
8860: IFFALSE 8924
// begin for i in damageUnit_list do
8862: LD_ADDR_VAR 0 14
8866: PUSH
8867: LD_VAR 0 17
8871: PUSH
8872: FOR_IN
8873: IFFALSE 8922
// begin ComMoveToArea ( i , healArea ) ;
8875: LD_VAR 0 14
8879: PPUSH
8880: LD_VAR 0 10
8884: PPUSH
8885: CALL_OW 113
// for j in medic_list do
8889: LD_ADDR_VAR 0 15
8893: PUSH
8894: LD_VAR 0 18
8898: PUSH
8899: FOR_IN
8900: IFFALSE 8918
// AddComHeal ( j , i ) ;
8902: LD_VAR 0 15
8906: PPUSH
8907: LD_VAR 0 14
8911: PPUSH
8912: CALL_OW 188
8916: GO 8899
8918: POP
8919: POP
// end ;
8920: GO 8872
8922: POP
8923: POP
// end ; end ; for i in soldiersOK_list do
8924: LD_ADDR_VAR 0 14
8928: PUSH
8929: LD_VAR 0 19
8933: PUSH
8934: FOR_IN
8935: IFFALSE 9111
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8937: LD_ADDR_VAR 0 22
8941: PUSH
8942: LD_INT 22
8944: PUSH
8945: LD_VAR 0 11
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PPUSH
8954: CALL_OW 69
8958: PPUSH
8959: LD_VAR 0 14
8963: PPUSH
8964: CALL_OW 74
8968: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8969: LD_ADDR_VAR 0 23
8973: PUSH
8974: LD_INT 22
8976: PUSH
8977: LD_VAR 0 11
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: LD_INT 59
8991: PUSH
8992: EMPTY
8993: LIST
8994: PUSH
8995: LD_INT 21
8997: PUSH
8998: LD_INT 1
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 2
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PPUSH
9033: LD_VAR 0 14
9037: PPUSH
9038: CALL_OW 74
9042: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9043: LD_VAR 0 14
9047: PPUSH
9048: LD_VAR 0 22
9052: PPUSH
9053: CALL_OW 296
9057: PUSH
9058: LD_INT 8
9060: PLUS
9061: PUSH
9062: LD_VAR 0 14
9066: PPUSH
9067: LD_VAR 0 23
9071: PPUSH
9072: CALL_OW 296
9076: LESS
9077: IFFALSE 9095
// begin ComAttackUnit ( i , target1 ) ;
9079: LD_VAR 0 14
9083: PPUSH
9084: LD_VAR 0 22
9088: PPUSH
9089: CALL_OW 115
// end else
9093: GO 9109
// begin ComAttackUnit ( i , target2 ) ;
9095: LD_VAR 0 14
9099: PPUSH
9100: LD_VAR 0 23
9104: PPUSH
9105: CALL_OW 115
// end ; end ;
9109: GO 8934
9111: POP
9112: POP
// for i in soldiersOK_list do
9113: LD_ADDR_VAR 0 14
9117: PUSH
9118: LD_VAR 0 19
9122: PUSH
9123: FOR_IN
9124: IFFALSE 9300
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9126: LD_ADDR_VAR 0 22
9130: PUSH
9131: LD_INT 22
9133: PUSH
9134: LD_VAR 0 11
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PPUSH
9143: CALL_OW 69
9147: PPUSH
9148: LD_VAR 0 14
9152: PPUSH
9153: CALL_OW 74
9157: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9158: LD_ADDR_VAR 0 23
9162: PUSH
9163: LD_INT 22
9165: PUSH
9166: LD_VAR 0 11
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: LD_INT 59
9180: PUSH
9181: EMPTY
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 21
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: PPUSH
9222: LD_VAR 0 14
9226: PPUSH
9227: CALL_OW 74
9231: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9232: LD_VAR 0 14
9236: PPUSH
9237: LD_VAR 0 22
9241: PPUSH
9242: CALL_OW 296
9246: PUSH
9247: LD_INT 8
9249: PLUS
9250: PUSH
9251: LD_VAR 0 14
9255: PPUSH
9256: LD_VAR 0 23
9260: PPUSH
9261: CALL_OW 296
9265: LESS
9266: IFFALSE 9284
// begin ComAttackUnit ( i , target1 ) ;
9268: LD_VAR 0 14
9272: PPUSH
9273: LD_VAR 0 22
9277: PPUSH
9278: CALL_OW 115
// end else
9282: GO 9298
// begin ComAttackUnit ( i , target2 ) ;
9284: LD_VAR 0 14
9288: PPUSH
9289: LD_VAR 0 23
9293: PPUSH
9294: CALL_OW 115
// end ; end ;
9298: GO 9123
9300: POP
9301: POP
// until soldiersOK_list = [ ] ;
9302: LD_VAR 0 19
9306: PUSH
9307: EMPTY
9308: EQUAL
9309: IFFALSE 8687
// end ; if strategy = 2 then
9311: LD_VAR 0 12
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: IFFALSE 10024
// begin repeat wait ( 0 0$1 ) ;
9321: LD_INT 35
9323: PPUSH
9324: CALL_OW 67
// for i in soldiersOK_list do
9328: LD_ADDR_VAR 0 14
9332: PUSH
9333: LD_VAR 0 19
9337: PUSH
9338: FOR_IN
9339: IFFALSE 9373
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9341: LD_VAR 0 14
9345: PPUSH
9346: LD_INT 117
9348: PPUSH
9349: LD_INT 97
9351: PPUSH
9352: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9356: LD_VAR 0 14
9360: PPUSH
9361: LD_INT 94
9363: PPUSH
9364: LD_INT 50
9366: PPUSH
9367: CALL_OW 174
// end ;
9371: GO 9338
9373: POP
9374: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9375: LD_INT 16
9377: PPUSH
9378: LD_INT 22
9380: PUSH
9381: LD_VAR 0 1
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 70
9394: PUSH
9395: LD_INT 0
9397: GREATER
9398: IFFALSE 9321
// repeat wait ( 0 0$3 ) ;
9400: LD_INT 105
9402: PPUSH
9403: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9407: LD_ADDR_VAR 0 17
9411: PUSH
9412: LD_INT 22
9414: PUSH
9415: LD_VAR 0 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 24
9432: PUSH
9433: LD_INT 550
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 24
9446: PUSH
9447: LD_INT 250
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PPUSH
9463: CALL_OW 69
9467: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9468: LD_ADDR_VAR 0 19
9472: PUSH
9473: LD_INT 22
9475: PUSH
9476: LD_VAR 0 1
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 2
9487: PUSH
9488: LD_INT 25
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 25
9500: PUSH
9501: LD_INT 5
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 25
9510: PUSH
9511: LD_INT 8
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 25
9520: PUSH
9521: LD_INT 9
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 24
9537: PUSH
9538: LD_INT 1000
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: PPUSH
9550: CALL_OW 69
9554: ST_TO_ADDR
// if medicCount > 0 then
9555: LD_VAR 0 7
9559: PUSH
9560: LD_INT 0
9562: GREATER
9563: IFFALSE 9637
// begin if damageUnit_list > 0 then
9565: LD_VAR 0 17
9569: PUSH
9570: LD_INT 0
9572: GREATER
9573: IFFALSE 9637
// begin for i in damageUnit_list do
9575: LD_ADDR_VAR 0 14
9579: PUSH
9580: LD_VAR 0 17
9584: PUSH
9585: FOR_IN
9586: IFFALSE 9635
// begin ComMoveToArea ( i , healArea ) ;
9588: LD_VAR 0 14
9592: PPUSH
9593: LD_VAR 0 10
9597: PPUSH
9598: CALL_OW 113
// for j in medic_list do
9602: LD_ADDR_VAR 0 15
9606: PUSH
9607: LD_VAR 0 18
9611: PUSH
9612: FOR_IN
9613: IFFALSE 9631
// AddComHeal ( j , i ) ;
9615: LD_VAR 0 15
9619: PPUSH
9620: LD_VAR 0 14
9624: PPUSH
9625: CALL_OW 188
9629: GO 9612
9631: POP
9632: POP
// end ;
9633: GO 9585
9635: POP
9636: POP
// end ; end ; for i in soldiersOK_list do
9637: LD_ADDR_VAR 0 14
9641: PUSH
9642: LD_VAR 0 19
9646: PUSH
9647: FOR_IN
9648: IFFALSE 9824
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9650: LD_ADDR_VAR 0 22
9654: PUSH
9655: LD_INT 22
9657: PUSH
9658: LD_VAR 0 11
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PPUSH
9672: LD_VAR 0 14
9676: PPUSH
9677: CALL_OW 74
9681: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9682: LD_ADDR_VAR 0 23
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 11
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 59
9704: PUSH
9705: EMPTY
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 21
9720: PUSH
9721: LD_INT 2
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: PPUSH
9741: CALL_OW 69
9745: PPUSH
9746: LD_VAR 0 14
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9756: LD_VAR 0 14
9760: PPUSH
9761: LD_VAR 0 22
9765: PPUSH
9766: CALL_OW 296
9770: PUSH
9771: LD_INT 8
9773: PLUS
9774: PUSH
9775: LD_VAR 0 14
9779: PPUSH
9780: LD_VAR 0 23
9784: PPUSH
9785: CALL_OW 296
9789: LESS
9790: IFFALSE 9808
// begin ComAttackUnit ( i , target1 ) ;
9792: LD_VAR 0 14
9796: PPUSH
9797: LD_VAR 0 22
9801: PPUSH
9802: CALL_OW 115
// end else
9806: GO 9822
// begin ComAttackUnit ( i , target2 ) ;
9808: LD_VAR 0 14
9812: PPUSH
9813: LD_VAR 0 23
9817: PPUSH
9818: CALL_OW 115
// end ; end ;
9822: GO 9647
9824: POP
9825: POP
// for i in soldiersOK_list do
9826: LD_ADDR_VAR 0 14
9830: PUSH
9831: LD_VAR 0 19
9835: PUSH
9836: FOR_IN
9837: IFFALSE 10013
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9839: LD_ADDR_VAR 0 22
9843: PUSH
9844: LD_INT 22
9846: PUSH
9847: LD_VAR 0 11
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PPUSH
9856: CALL_OW 69
9860: PPUSH
9861: LD_VAR 0 14
9865: PPUSH
9866: CALL_OW 74
9870: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9871: LD_ADDR_VAR 0 23
9875: PUSH
9876: LD_INT 22
9878: PUSH
9879: LD_VAR 0 11
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 2
9890: PUSH
9891: LD_INT 59
9893: PUSH
9894: EMPTY
9895: LIST
9896: PUSH
9897: LD_INT 21
9899: PUSH
9900: LD_INT 1
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: PPUSH
9930: CALL_OW 69
9934: PPUSH
9935: LD_VAR 0 14
9939: PPUSH
9940: CALL_OW 74
9944: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9945: LD_VAR 0 14
9949: PPUSH
9950: LD_VAR 0 22
9954: PPUSH
9955: CALL_OW 296
9959: PUSH
9960: LD_INT 8
9962: PLUS
9963: PUSH
9964: LD_VAR 0 14
9968: PPUSH
9969: LD_VAR 0 23
9973: PPUSH
9974: CALL_OW 296
9978: LESS
9979: IFFALSE 9997
// begin ComAttackUnit ( i , target1 ) ;
9981: LD_VAR 0 14
9985: PPUSH
9986: LD_VAR 0 22
9990: PPUSH
9991: CALL_OW 115
// end else
9995: GO 10011
// begin ComAttackUnit ( i , target2 ) ;
9997: LD_VAR 0 14
10001: PPUSH
10002: LD_VAR 0 23
10006: PPUSH
10007: CALL_OW 115
// end ; end ;
10011: GO 9836
10013: POP
10014: POP
// until soldiersOK_list = [ ] ;
10015: LD_VAR 0 19
10019: PUSH
10020: EMPTY
10021: EQUAL
10022: IFFALSE 9400
// end ; end ; end_of_file
10024: LD_VAR 0 13
10028: RET
// every 0 0$01 do
10029: GO 10031
10031: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10032: LD_INT 22
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 25
10044: PUSH
10045: LD_INT 2
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PPUSH
10056: CALL_OW 69
10060: PUSH
10061: LD_INT 0
10063: EQUAL
10064: IFFALSE 10078
// SetClass ( JMM , 2 ) ;
10066: LD_EXP 1
10070: PPUSH
10071: LD_INT 2
10073: PPUSH
10074: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10078: LD_STRING M1
10080: PPUSH
10081: CALL_OW 337
// case difficulty of 1 :
10085: LD_OWVAR 67
10089: PUSH
10090: LD_INT 1
10092: DOUBLE
10093: EQUAL
10094: IFTRUE 10098
10096: GO 10108
10098: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10099: LD_STRING M1-1
10101: PPUSH
10102: CALL_OW 337
10106: GO 10145
10108: LD_INT 2
10110: DOUBLE
10111: EQUAL
10112: IFTRUE 10116
10114: GO 10126
10116: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10117: LD_STRING M1-2
10119: PPUSH
10120: CALL_OW 337
10124: GO 10145
10126: LD_INT 3
10128: DOUBLE
10129: EQUAL
10130: IFTRUE 10134
10132: GO 10144
10134: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10135: LD_STRING M1-3
10137: PPUSH
10138: CALL_OW 337
10142: GO 10145
10144: POP
// ChangeMissionObjectives ( M1cont ) ;
10145: LD_STRING M1cont
10147: PPUSH
10148: CALL_OW 337
// end ;
10152: END
// every 0 0$1 do
10153: GO 10155
10155: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10156: LD_INT 350
10158: PPUSH
10159: LD_INT 875
10161: PPUSH
10162: CALL_OW 12
10166: PPUSH
10167: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10171: LD_INT 5
10173: PPUSH
10174: LD_INT 4
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 55
// wait ( 0 0$15 ) ;
10184: LD_INT 525
10186: PPUSH
10187: CALL_OW 67
// if IsOk ( Lisa ) then
10191: LD_EXP 2
10195: PPUSH
10196: CALL_OW 302
10200: IFFALSE 10216
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10202: LD_EXP 2
10206: PPUSH
10207: LD_STRING DR0-Lisa-1
10209: PPUSH
10210: CALL_OW 88
// end else
10214: GO 10462
// begin if IsOK ( Cyrus ) then
10216: LD_EXP 4
10220: PPUSH
10221: CALL_OW 302
10225: IFFALSE 10241
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10227: LD_EXP 4
10231: PPUSH
10232: LD_STRING DR0-Cyrus-1
10234: PPUSH
10235: CALL_OW 88
// end else
10239: GO 10462
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10241: LD_INT 22
10243: PUSH
10244: LD_INT 1
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 1
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: LD_INT 25
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PUSH
10274: LD_INT 25
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 25
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 25
10296: PUSH
10297: LD_INT 4
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 26
10313: PUSH
10314: LD_INT 1
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PPUSH
10327: CALL_OW 69
10331: PUSH
10332: LD_EXP 1
10336: PUSH
10337: LD_EXP 8
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: DIFF
10346: PPUSH
10347: LD_STRING DR0-Sol1-1
10349: PPUSH
10350: LD_STRING DR0-Sol1-1
10352: PPUSH
10353: CALL 4420 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10357: LD_INT 22
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 21
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: LD_INT 25
10382: PUSH
10383: LD_INT 2
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 25
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 25
10402: PUSH
10403: LD_INT 4
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 26
10418: PUSH
10419: LD_INT 1
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: PPUSH
10432: CALL_OW 69
10436: PUSH
10437: LD_EXP 1
10441: PUSH
10442: LD_EXP 8
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: DIFF
10451: PPUSH
10452: LD_STRING DR0-Sol2-1
10454: PPUSH
10455: LD_STRING DR0-Sol2-1
10457: PPUSH
10458: CALL 4420 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10462: LD_INT 22
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 21
10474: PUSH
10475: LD_INT 1
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 25
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 25
10517: PUSH
10518: LD_INT 4
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 26
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: PUSH
10553: LD_EXP 1
10557: PUSH
10558: LD_EXP 8
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: DIFF
10567: PPUSH
10568: LD_STRING DR0-Sol2-1
10570: PPUSH
10571: LD_STRING DR0-Sol2-1
10573: PPUSH
10574: CALL 4420 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10578: LD_EXP 1
10582: PPUSH
10583: LD_STRING DR0-JMM-1
10585: PPUSH
10586: CALL_OW 88
// end ;
10590: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10591: LD_EXP 5
10595: PPUSH
10596: CALL_OW 302
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 1
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 25
10613: PUSH
10614: LD_INT 16
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PPUSH
10625: CALL_OW 69
10629: PUSH
10630: LD_INT 0
10632: GREATER
10633: AND
10634: IFFALSE 10912
10636: GO 10638
10638: DISABLE
// begin DialogueOn ;
10639: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10643: LD_EXP 5
10647: PPUSH
10648: LD_STRING D10-Frank-1
10650: PPUSH
10651: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10655: LD_INT 22
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 1
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 25
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 25
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 25
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 25
10710: PUSH
10711: LD_INT 4
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 69
10734: PUSH
10735: LD_EXP 1
10739: PUSH
10740: LD_EXP 5
10744: PUSH
10745: LD_EXP 2
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: DIFF
10755: PPUSH
10756: LD_STRING D10-Sol1-1
10758: PPUSH
10759: LD_STRING D10-FSol1-1
10761: PPUSH
10762: CALL 4420 0 3
// Say ( Frank , D10-Frank-2 ) ;
10766: LD_EXP 5
10770: PPUSH
10771: LD_STRING D10-Frank-2
10773: PPUSH
10774: CALL_OW 88
// if IsOK ( Lisa ) then
10778: LD_EXP 2
10782: PPUSH
10783: CALL_OW 302
10787: IFFALSE 10803
// begin Say ( Lisa , D10-Lisa-2 ) ;
10789: LD_EXP 2
10793: PPUSH
10794: LD_STRING D10-Lisa-2
10796: PPUSH
10797: CALL_OW 88
// end else
10801: GO 10908
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10803: LD_INT 22
10805: PUSH
10806: LD_INT 1
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 2
10825: PUSH
10826: LD_INT 25
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 25
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 25
10848: PUSH
10849: LD_INT 3
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 25
10858: PUSH
10859: LD_INT 4
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: PPUSH
10878: CALL_OW 69
10882: PUSH
10883: LD_EXP 1
10887: PUSH
10888: LD_EXP 5
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: DIFF
10897: PPUSH
10898: LD_STRING D10-Sol1-2
10900: PPUSH
10901: LD_STRING D10-FSol1-2
10903: PPUSH
10904: CALL 4420 0 3
// end ; DialogueOff ;
10908: CALL_OW 7
// end ;
10912: END
// every 10 10$30 do
10913: GO 10915
10915: DISABLE
// begin HarrisonSupport ;
10916: CALL 1828 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10920: LD_EXP 15
10924: PPUSH
10925: CALL_OW 310
10929: PPUSH
10930: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10934: LD_EXP 15
10938: PPUSH
10939: LD_STRING DEng-Eng1-1
10941: PPUSH
10942: CALL_OW 88
// wait ( 1 1$0 ) ;
10946: LD_INT 2100
10948: PPUSH
10949: CALL_OW 67
// DialogueOn ;
10953: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10957: LD_EXP 12
10961: PPUSH
10962: LD_STRING DRem-Har-1
10964: PPUSH
10965: CALL_OW 94
// if contactWithRussian = 1 then
10969: LD_EXP 20
10973: PUSH
10974: LD_INT 1
10976: EQUAL
10977: IFFALSE 10993
// begin Say ( JMM , DRem-JMM-1 ) ;
10979: LD_EXP 1
10983: PPUSH
10984: LD_STRING DRem-JMM-1
10986: PPUSH
10987: CALL_OW 88
// end else
10991: GO 11005
// begin Say ( JMM , DRem-JMM-1a ) ;
10993: LD_EXP 1
10997: PPUSH
10998: LD_STRING DRem-JMM-1a
11000: PPUSH
11001: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11005: LD_EXP 12
11009: PPUSH
11010: LD_STRING DRem-Har-2
11012: PPUSH
11013: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11017: LD_STRING DenisInDelta
11019: PPUSH
11020: LD_INT 0
11022: PPUSH
11023: CALL_OW 30
11027: PUSH
11028: LD_INT 1
11030: EQUAL
11031: IFFALSE 11047
// begin Say ( JMM , DRem-JMM-2 ) ;
11033: LD_EXP 1
11037: PPUSH
11038: LD_STRING DRem-JMM-2
11040: PPUSH
11041: CALL_OW 88
// end else
11045: GO 11059
// begin Say ( JMM , DRem-JMM-2a ) ;
11047: LD_EXP 1
11051: PPUSH
11052: LD_STRING DRem-JMM-2a
11054: PPUSH
11055: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11059: LD_EXP 12
11063: PPUSH
11064: LD_STRING DRem-Har-3
11066: PPUSH
11067: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11071: LD_EXP 1
11075: PPUSH
11076: LD_STRING DRem-JMM-3
11078: PPUSH
11079: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11083: LD_EXP 12
11087: PPUSH
11088: LD_STRING DRem-Har-4
11090: PPUSH
11091: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11095: LD_STRING DenisInDelta
11097: PPUSH
11098: LD_INT 0
11100: PPUSH
11101: CALL_OW 30
11105: PUSH
11106: LD_INT 1
11108: EQUAL
11109: IFFALSE 11137
// begin Say ( JMM , DRem-JMM-4 ) ;
11111: LD_EXP 1
11115: PPUSH
11116: LD_STRING DRem-JMM-4
11118: PPUSH
11119: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11123: LD_EXP 12
11127: PPUSH
11128: LD_STRING DRem-Har-5
11130: PPUSH
11131: CALL_OW 94
// end else
11135: GO 11170
// begin SetRestrict ( 36 , 1 , true ) ;
11137: LD_INT 36
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11150: LD_INT 15
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11163: LD_STRING MR
11165: PPUSH
11166: CALL_OW 337
// end ; DialogueOff ;
11170: CALL_OW 7
// end ;
11174: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11175: LD_STRING DenisInDelta
11177: PPUSH
11178: LD_INT 0
11180: PPUSH
11181: CALL_OW 30
11185: PUSH
11186: LD_INT 1
11188: EQUAL
11189: IFFALSE 11320
11191: GO 11193
11193: DISABLE
// begin PrepareDenis ;
11194: CALL 1749 0 0
// CenterNowOnUnits ( Denis ) ;
11198: LD_EXP 9
11202: PPUSH
11203: CALL_OW 87
// DialogueOn ;
11207: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11211: LD_EXP 9
11215: PPUSH
11216: LD_STRING DDen-Den-1
11218: PPUSH
11219: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11223: LD_EXP 1
11227: PPUSH
11228: LD_STRING DDen-JMM-1
11230: PPUSH
11231: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11235: LD_EXP 9
11239: PPUSH
11240: LD_STRING DDen-Den-2
11242: PPUSH
11243: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11247: LD_EXP 1
11251: PPUSH
11252: LD_STRING DDen-JMM-2
11254: PPUSH
11255: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11259: LD_EXP 9
11263: PPUSH
11264: LD_STRING DDen-Den-3
11266: PPUSH
11267: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11271: LD_EXP 1
11275: PPUSH
11276: LD_STRING DDen-JMM-3
11278: PPUSH
11279: CALL_OW 88
// DialogueOff ;
11283: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11287: LD_INT 36
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11300: LD_INT 15
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11313: LD_STRING MR
11315: PPUSH
11316: CALL_OW 337
// end ;
11320: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11321: CALL 11366 0 0
11325: PUSH
11326: LD_EXP 9
11330: PPUSH
11331: CALL_OW 302
11335: AND
11336: IFFALSE 11365
11338: GO 11340
11340: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11341: LD_EXP 9
11345: PPUSH
11346: LD_STRING DR1-Den-1
11348: PPUSH
11349: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11353: LD_EXP 1
11357: PPUSH
11358: LD_STRING DR1-JMM-1
11360: PPUSH
11361: CALL_OW 88
// end ;
11365: END
// function CheckOptoLab ; var i ; begin
11366: LD_INT 0
11368: PPUSH
11369: PPUSH
// result = false ;
11370: LD_ADDR_VAR 0 1
11374: PUSH
11375: LD_INT 0
11377: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11378: LD_ADDR_VAR 0 2
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: LD_INT 30
11398: PUSH
11399: LD_INT 7
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 30
11408: PUSH
11409: LD_INT 8
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PPUSH
11425: CALL_OW 69
11429: PUSH
11430: FOR_IN
11431: IFFALSE 11483
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11433: LD_VAR 0 2
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 268
11445: PUSH
11446: LD_INT 15
11448: EQUAL
11449: PUSH
11450: LD_VAR 0 2
11454: PPUSH
11455: LD_INT 2
11457: PPUSH
11458: CALL_OW 268
11462: PUSH
11463: LD_INT 15
11465: EQUAL
11466: OR
11467: IFFALSE 11479
// begin result = true ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// break ;
11477: GO 11483
// end ; break ;
11479: GO 11483
// end ;
11481: GO 11430
11483: POP
11484: POP
// end ;
11485: LD_VAR 0 1
11489: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11490: LD_INT 15
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 321
11500: PUSH
11501: LD_INT 2
11503: EQUAL
11504: PUSH
11505: LD_EXP 9
11509: PPUSH
11510: CALL_OW 302
11514: AND
11515: IFFALSE 11702
11517: GO 11519
11519: DISABLE
// begin DialogueOn ;
11520: CALL_OW 6
// if IsOK ( Denis ) then
11524: LD_EXP 9
11528: PPUSH
11529: CALL_OW 302
11533: IFFALSE 11549
// begin Say ( Denis , DR2-Den-1 ) ;
11535: LD_EXP 9
11539: PPUSH
11540: LD_STRING DR2-Den-1
11542: PPUSH
11543: CALL_OW 88
// end else
11547: GO 11608
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11549: LD_INT 22
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 4
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: PUSH
11589: LD_EXP 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: DIFF
11597: PPUSH
11598: LD_STRING DR2-Sci1-1
11600: PPUSH
11601: LD_STRING DR2-FSci1-1
11603: PPUSH
11604: CALL 4420 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11608: LD_EXP 1
11612: PPUSH
11613: LD_STRING DR2-JMM-1
11615: PPUSH
11616: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11620: LD_INT 22
11622: PUSH
11623: LD_INT 1
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 21
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 4
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 69
11666: PUSH
11667: LD_EXP 1
11671: PUSH
11672: EMPTY
11673: LIST
11674: DIFF
11675: PPUSH
11676: LD_STRING DR2-Sol1-1
11678: PPUSH
11679: LD_STRING DR2-Sol1-11
11681: PPUSH
11682: CALL 4420 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11686: LD_EXP 1
11690: PPUSH
11691: LD_STRING DR2-JMM-2
11693: PPUSH
11694: CALL_OW 88
// DialogueOff ;
11698: CALL_OW 7
// end ;
11702: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11703: LD_INT 22
11705: PUSH
11706: LD_INT 1
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 36
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PPUSH
11727: CALL_OW 69
11731: PUSH
11732: LD_INT 0
11734: EQUAL
11735: PUSH
11736: LD_INT 22
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 2
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 33
11758: PUSH
11759: LD_INT 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL_OW 69
11775: PUSH
11776: LD_INT 0
11778: GREATER
11779: AND
11780: PUSH
11781: LD_EXP 21
11785: PUSH
11786: LD_INT 0
11788: EQUAL
11789: AND
11790: IFFALSE 11862
11792: GO 11794
11794: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11795: LD_INT 22
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 1
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 25
11817: PUSH
11818: LD_INT 3
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: LIST
11829: PPUSH
11830: CALL_OW 69
11834: PUSH
11835: LD_EXP 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: DIFF
11843: PPUSH
11844: LD_STRING D3a-Mech1-1
11846: PPUSH
11847: LD_STRING D3a-Mech1-1
11849: PPUSH
11850: CALL 4420 0 3
// firstTower = 2 ;
11854: LD_ADDR_EXP 21
11858: PUSH
11859: LD_INT 2
11861: ST_TO_ADDR
// end ;
11862: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
11863: LD_INT 22
11865: PUSH
11866: LD_INT 1
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 30
11875: PUSH
11876: LD_INT 36
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PPUSH
11887: CALL_OW 69
11891: PUSH
11892: LD_INT 0
11894: GREATER
11895: PUSH
11896: LD_INT 22
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 33
11918: PUSH
11919: LD_INT 2
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 69
11935: PUSH
11936: LD_INT 0
11938: GREATER
11939: AND
11940: PUSH
11941: CALL 12523 0 0
11945: AND
11946: IFFALSE 12520
11948: GO 11950
11950: DISABLE
11951: LD_INT 0
11953: PPUSH
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 30
11975: PUSH
11976: LD_INT 36
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
11992: LD_ADDR_VAR 0 4
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 21
12009: PUSH
12010: LD_INT 2
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 33
12019: PUSH
12020: LD_INT 2
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: LIST
12031: PPUSH
12032: CALL_OW 69
12036: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12037: LD_ADDR_VAR 0 5
12041: PUSH
12042: EMPTY
12043: ST_TO_ADDR
// for i in tmpControlTowers do
12044: LD_ADDR_VAR 0 1
12048: PUSH
12049: LD_VAR 0 3
12053: PUSH
12054: FOR_IN
12055: IFFALSE 12518
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12057: LD_EXP 1
12061: PPUSH
12062: CALL_OW 310
12066: PUSH
12067: LD_VAR 0 1
12071: EQUAL
12072: PUSH
12073: LD_EXP 1
12077: PPUSH
12078: CALL_OW 257
12082: PUSH
12083: LD_INT 3
12085: EQUAL
12086: AND
12087: IFFALSE 12217
// begin InGameOn ;
12089: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12093: LD_VAR 0 4
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PPUSH
12102: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12106: LD_EXP 1
12110: PPUSH
12111: LD_STRING D4a-JMM-1
12113: PPUSH
12114: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12118: LD_VAR 0 4
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: LD_EXP 1
12131: PPUSH
12132: CALL_OW 53
// wait ( 0 0$1 ) ;
12136: LD_INT 35
12138: PPUSH
12139: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12143: LD_VAR 0 4
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: PPUSH
12152: LD_VAR 0 4
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: PPUSH
12161: CALL_OW 250
12165: PUSH
12166: LD_INT 3
12168: PLUS
12169: PPUSH
12170: LD_VAR 0 4
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: PPUSH
12179: CALL_OW 251
12183: PUSH
12184: LD_INT 2
12186: MINUS
12187: PPUSH
12188: CALL_OW 111
// wait ( 0 0$2 ) ;
12192: LD_INT 70
12194: PPUSH
12195: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12199: LD_EXP 1
12203: PPUSH
12204: LD_STRING D4b-JMM-1
12206: PPUSH
12207: CALL_OW 88
// InGameOff ;
12211: CALL_OW 9
// end else
12215: GO 12516
// begin InGameOn ;
12217: CALL_OW 8
// for j in UnitsInside ( i ) do
12221: LD_ADDR_VAR 0 2
12225: PUSH
12226: LD_VAR 0 1
12230: PPUSH
12231: CALL_OW 313
12235: PUSH
12236: FOR_IN
12237: IFFALSE 12272
// if GetClass ( j ) = 3 then
12239: LD_VAR 0 2
12243: PPUSH
12244: CALL_OW 257
12248: PUSH
12249: LD_INT 3
12251: EQUAL
12252: IFFALSE 12270
// tmpMechanicInside = tmpMechanicInside ^ j ;
12254: LD_ADDR_VAR 0 5
12258: PUSH
12259: LD_VAR 0 5
12263: PUSH
12264: LD_VAR 0 2
12268: ADD
12269: ST_TO_ADDR
12270: GO 12236
12272: POP
12273: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12274: LD_VAR 0 5
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: CALL_OW 258
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12309
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12293: LD_VAR 0 5
12297: PUSH
12298: LD_INT 1
12300: ARRAY
12301: PPUSH
12302: LD_STRING D4a-Mech1-1
12304: PPUSH
12305: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12309: LD_VAR 0 5
12313: PUSH
12314: LD_INT 1
12316: ARRAY
12317: PPUSH
12318: CALL_OW 258
12322: PUSH
12323: LD_INT 2
12325: EQUAL
12326: IFFALSE 12344
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12328: LD_VAR 0 5
12332: PUSH
12333: LD_INT 1
12335: ARRAY
12336: PPUSH
12337: LD_STRING D4a-FMech1-1
12339: PPUSH
12340: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12344: LD_VAR 0 4
12348: PUSH
12349: LD_INT 1
12351: ARRAY
12352: PPUSH
12353: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12357: LD_VAR 0 4
12361: PUSH
12362: LD_INT 1
12364: ARRAY
12365: PPUSH
12366: LD_VAR 0 5
12370: PUSH
12371: LD_INT 1
12373: ARRAY
12374: PPUSH
12375: CALL_OW 53
// wait ( 0 0$1 ) ;
12379: LD_INT 35
12381: PPUSH
12382: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12386: LD_VAR 0 4
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: PPUSH
12395: LD_VAR 0 4
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: PPUSH
12404: CALL_OW 250
12408: PUSH
12409: LD_INT 3
12411: PLUS
12412: PPUSH
12413: LD_VAR 0 4
12417: PUSH
12418: LD_INT 1
12420: ARRAY
12421: PPUSH
12422: CALL_OW 251
12426: PUSH
12427: LD_INT 2
12429: MINUS
12430: PPUSH
12431: CALL_OW 111
// wait ( 0 0$2 ) ;
12435: LD_INT 70
12437: PPUSH
12438: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12442: LD_VAR 0 5
12446: PUSH
12447: LD_INT 1
12449: ARRAY
12450: PPUSH
12451: CALL_OW 258
12455: PUSH
12456: LD_INT 1
12458: EQUAL
12459: IFFALSE 12477
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12461: LD_VAR 0 5
12465: PUSH
12466: LD_INT 1
12468: ARRAY
12469: PPUSH
12470: LD_STRING D4b-Mech1-1
12472: PPUSH
12473: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12477: LD_VAR 0 5
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: CALL_OW 258
12490: PUSH
12491: LD_INT 2
12493: EQUAL
12494: IFFALSE 12512
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12496: LD_VAR 0 5
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PPUSH
12505: LD_STRING D4b-FMech1-1
12507: PPUSH
12508: CALL_OW 88
// InGameOff ;
12512: CALL_OW 9
// end ; end ;
12516: GO 12054
12518: POP
12519: POP
// end ;
12520: PPOPN 5
12522: END
// function CheckMehInside ; var i , j ; begin
12523: LD_INT 0
12525: PPUSH
12526: PPUSH
12527: PPUSH
// result = false ;
12528: LD_ADDR_VAR 0 1
12532: PUSH
12533: LD_INT 0
12535: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 30
12553: PUSH
12554: LD_INT 36
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 69
12569: PUSH
12570: FOR_IN
12571: IFFALSE 12622
// begin for j in UnitsInside ( i ) do
12573: LD_ADDR_VAR 0 3
12577: PUSH
12578: LD_VAR 0 2
12582: PPUSH
12583: CALL_OW 313
12587: PUSH
12588: FOR_IN
12589: IFFALSE 12618
// begin if GetClass ( j ) = 3 then
12591: LD_VAR 0 3
12595: PPUSH
12596: CALL_OW 257
12600: PUSH
12601: LD_INT 3
12603: EQUAL
12604: IFFALSE 12616
// begin result = true ;
12606: LD_ADDR_VAR 0 1
12610: PUSH
12611: LD_INT 1
12613: ST_TO_ADDR
// break ;
12614: GO 12618
// end ; end ;
12616: GO 12588
12618: POP
12619: POP
// end ;
12620: GO 12570
12622: POP
12623: POP
// end ;
12624: LD_VAR 0 1
12628: RET
// every 25 25$0 do
12629: GO 12631
12631: DISABLE
// begin PrepareKurt ;
12632: CALL 15435 0 0
// end ;
12636: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12637: LD_EXP 17
12641: PPUSH
12642: LD_INT 9
12644: PPUSH
12645: CALL_OW 308
12649: PUSH
12650: LD_EXP 19
12654: PUSH
12655: LD_INT 1
12657: EQUAL
12658: AND
12659: IFFALSE 12733
12661: GO 12663
12663: DISABLE
// begin RemoveUnit ( Kurt ) ;
12664: LD_EXP 17
12668: PPUSH
12669: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12673: LD_EXP 17
12677: PPUSH
12678: LD_STRING Kurt
12680: PPUSH
12681: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 2
12690: PPUSH
12691: CALL_OW 81
12695: PUSH
12696: LD_INT 0
12698: EQUAL
12699: IFFALSE 12709
// KurtStatus = 1 ;
12701: LD_ADDR_EXP 18
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12709: LD_INT 1
12711: PPUSH
12712: LD_INT 2
12714: PPUSH
12715: CALL_OW 81
12719: PUSH
12720: LD_INT 2
12722: EQUAL
12723: IFFALSE 12733
// KurtStatus = 2 ;
12725: LD_ADDR_EXP 18
12729: PUSH
12730: LD_INT 2
12732: ST_TO_ADDR
// end ;
12733: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12734: LD_INT 1
12736: PPUSH
12737: LD_INT 2
12739: PPUSH
12740: CALL_OW 81
12744: PUSH
12745: LD_INT 2
12747: EQUAL
12748: PUSH
12749: LD_EXP 17
12753: PPUSH
12754: CALL_OW 302
12758: AND
12759: IFFALSE 12784
12761: GO 12763
12763: DISABLE
// begin DialogueOn ;
12764: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12768: LD_EXP 17
12772: PPUSH
12773: LD_STRING D2a-Kurt-1
12775: PPUSH
12776: CALL_OW 88
// DialogueOff ;
12780: CALL_OW 7
// end ;
12784: END
// every 35 35$0 do
12785: GO 12787
12787: DISABLE
// begin PrepareJoan ;
12788: CALL 2224 0 0
// wait ( 1 1$0 ) ;
12792: LD_INT 2100
12794: PPUSH
12795: CALL_OW 67
// if IsOK ( Lisa ) then
12799: LD_EXP 2
12803: PPUSH
12804: CALL_OW 302
12808: IFFALSE 12938
// begin DialogueOn ;
12810: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12814: LD_EXP 2
12818: PPUSH
12819: LD_STRING D7-Lisa-1
12821: PPUSH
12822: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12826: LD_EXP 1
12830: PPUSH
12831: LD_STRING D7-JMM-1
12833: PPUSH
12834: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12838: LD_EXP 2
12842: PPUSH
12843: LD_STRING D7-Lisa-2
12845: PPUSH
12846: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12850: LD_EXP 1
12854: PPUSH
12855: LD_STRING D7-JMM-2
12857: PPUSH
12858: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12862: LD_EXP 2
12866: PPUSH
12867: LD_STRING D7-Lisa-3
12869: PPUSH
12870: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12874: LD_EXP 1
12878: PPUSH
12879: LD_STRING D7-JMM-3
12881: PPUSH
12882: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12886: LD_EXP 2
12890: PPUSH
12891: LD_STRING D7-Lisa-4
12893: PPUSH
12894: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12898: LD_EXP 1
12902: PPUSH
12903: LD_STRING D7-JMM-4
12905: PPUSH
12906: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12910: LD_EXP 1
12914: PPUSH
12915: LD_STRING D7-JMM-4a
12917: PPUSH
12918: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12922: LD_EXP 2
12926: PPUSH
12927: LD_STRING D7-Lisa-5
12929: PPUSH
12930: CALL_OW 88
// DialogueOff ;
12934: CALL_OW 7
// end ; end ;
12938: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
12939: LD_INT 22
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 33
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 2
12970: GREATEREQUAL
12971: IFFALSE 12991
12973: GO 12975
12975: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
12976: LD_STRING MRa
12978: PPUSH
12979: CALL_OW 337
// remoteVehiclesBuild = 1 ;
12983: LD_ADDR_EXP 26
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// end ;
12991: END
// every 4 4$0 do
12992: GO 12994
12994: DISABLE
// PrepareRandoms ( 1 ) ;
12995: LD_INT 1
12997: PPUSH
12998: CALL 3121 0 1
13002: END
// every 10 10$0 do
13003: GO 13005
13005: DISABLE
// PrepareRandoms ( 2 ) ;
13006: LD_INT 2
13008: PPUSH
13009: CALL 3121 0 1
13013: END
// every 28 28$0 do
13014: GO 13016
13016: DISABLE
// PrepareRandoms ( 4 ) ;
13017: LD_INT 4
13019: PPUSH
13020: CALL 3121 0 1
13024: END
// every 32 32$0 do
13025: GO 13027
13027: DISABLE
// PrepareRandoms ( 5 ) ;
13028: LD_INT 5
13030: PPUSH
13031: CALL 3121 0 1
13035: END
// every 48 48$0 do
13036: GO 13038
13038: DISABLE
// PrepareRandoms ( 6 ) ;
13039: LD_INT 6
13041: PPUSH
13042: CALL 3121 0 1
13046: END
// every 42 42$0 do
13047: GO 13049
13049: DISABLE
// PrepareRandoms ( 7 ) ;
13050: LD_INT 7
13052: PPUSH
13053: CALL 3121 0 1
13057: END
// every 5 5$20 do
13058: GO 13060
13060: DISABLE
// begin DialogueOn ;
13061: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13065: LD_EXP 10
13069: PPUSH
13070: LD_STRING D12a-Sci-1
13072: PPUSH
13073: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13077: LD_EXP 1
13081: PPUSH
13082: LD_STRING D12a-JMM-1
13084: PPUSH
13085: CALL_OW 88
// DialogueOff ;
13089: CALL_OW 7
// cratesStatus = 1 ;
13093: LD_ADDR_EXP 33
13097: PUSH
13098: LD_INT 1
13100: ST_TO_ADDR
// end ;
13101: END
// every 13 13$0 do
13102: GO 13104
13104: DISABLE
// begin DialogueOn ;
13105: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13109: LD_EXP 10
13113: PPUSH
13114: LD_STRING D12b-Sci-1
13116: PPUSH
13117: CALL_OW 94
// DialogueOff ;
13121: CALL_OW 7
// cratesStatus = 2 ;
13125: LD_ADDR_EXP 33
13129: PUSH
13130: LD_INT 2
13132: ST_TO_ADDR
// end ;
13133: END
// every 32 32$0 do
13134: GO 13136
13136: DISABLE
// begin DialogueOn ;
13137: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13141: LD_EXP 10
13145: PPUSH
13146: LD_STRING  D12c-Sci-1
13148: PPUSH
13149: CALL_OW 94
// DialogueOff ;
13153: CALL_OW 7
// wait ( 3 3$0 ) ;
13157: LD_INT 6300
13159: PPUSH
13160: CALL_OW 67
// DialogueOn ;
13164: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13168: LD_EXP 10
13172: PPUSH
13173: LD_STRING  D12d-Sci-1
13175: PPUSH
13176: CALL_OW 94
// DialogueOff ;
13180: CALL_OW 7
// cratesStatus = 1 ;
13184: LD_ADDR_EXP 33
13188: PUSH
13189: LD_INT 1
13191: ST_TO_ADDR
// end ;
13192: END
// every 42 42$0 do
13193: GO 13195
13195: DISABLE
// begin DialogueOn ;
13196: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13200: LD_EXP 10
13204: PPUSH
13205: LD_STRING D12e-Sci-1
13207: PPUSH
13208: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13212: LD_EXP 1
13216: PPUSH
13217: LD_STRING D12e-JMM-1
13219: PPUSH
13220: CALL_OW 88
// DialogueOff ;
13224: CALL_OW 7
// cratesStatus = 2 ;
13228: LD_ADDR_EXP 33
13232: PUSH
13233: LD_INT 2
13235: ST_TO_ADDR
// end ;
13236: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13237: LD_INT 22
13239: PUSH
13240: LD_INT 6
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 34
13259: PUSH
13260: LD_INT 51
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 69
13276: PUSH
13277: LD_INT 0
13279: GREATER
13280: IFFALSE 13363
13282: GO 13284
13284: DISABLE
13285: LD_INT 0
13287: PPUSH
// begin enable ;
13288: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13289: LD_ADDR_VAR 0 1
13293: PUSH
13294: LD_INT 22
13296: PUSH
13297: LD_INT 6
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 2
13306: PUSH
13307: LD_INT 21
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 21
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: PUSH
13341: FOR_IN
13342: IFFALSE 13361
// ComAgressiveMove ( i , 138 , 168 ) ;
13344: LD_VAR 0 1
13348: PPUSH
13349: LD_INT 138
13351: PPUSH
13352: LD_INT 168
13354: PPUSH
13355: CALL_OW 114
13359: GO 13341
13361: POP
13362: POP
// end ;
13363: PPOPN 1
13365: END
// every 0 0$1 do var i ;
13366: GO 13368
13368: DISABLE
13369: LD_INT 0
13371: PPUSH
// begin enable ;
13372: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13373: LD_ADDR_VAR 0 1
13377: PUSH
13378: LD_INT 5
13380: PPUSH
13381: LD_INT 2
13383: PUSH
13384: LD_INT 22
13386: PUSH
13387: LD_INT 3
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 22
13396: PUSH
13397: LD_INT 6
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: PUSH
13409: EMPTY
13410: LIST
13411: PPUSH
13412: CALL_OW 70
13416: PUSH
13417: FOR_IN
13418: IFFALSE 13482
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13420: LD_INT 5
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_INT 6
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 34
13435: PUSH
13436: LD_INT 51
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 70
13451: PUSH
13452: LD_INT 0
13454: GREATER
13455: IFFALSE 13471
// sendedConvoys = sendedConvoys + 1 ;
13457: LD_ADDR_EXP 34
13461: PUSH
13462: LD_EXP 34
13466: PUSH
13467: LD_INT 1
13469: PLUS
13470: ST_TO_ADDR
// RemoveUnit ( i ) ;
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL_OW 64
// end ;
13480: GO 13417
13482: POP
13483: POP
// end ; end_of_file
13484: PPOPN 1
13486: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13487: LD_VAR 0 1
13491: PUSH
13492: LD_INT 1
13494: EQUAL
13495: PUSH
13496: LD_VAR 0 2
13500: PUSH
13501: LD_INT 3
13503: EQUAL
13504: AND
13505: IFFALSE 13515
// contactWithRussian = 1 ;
13507: LD_ADDR_EXP 20
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// end ;
13515: PPOPN 2
13517: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13518: LD_VAR 0 1
13522: PPUSH
13523: CALL_OW 266
13527: PUSH
13528: LD_INT 36
13530: EQUAL
13531: PUSH
13532: LD_VAR 0 1
13536: PPUSH
13537: CALL_OW 255
13541: PUSH
13542: LD_INT 1
13544: EQUAL
13545: AND
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 21
13559: PUSH
13560: LD_INT 2
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 33
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: PPUSH
13582: CALL_OW 69
13586: PUSH
13587: LD_INT 0
13589: EQUAL
13590: AND
13591: PUSH
13592: LD_EXP 21
13596: PUSH
13597: LD_INT 0
13599: EQUAL
13600: AND
13601: IFFALSE 13670
// begin firstTower = 1 ;
13603: LD_ADDR_EXP 21
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13611: LD_INT 22
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 21
13623: PUSH
13624: LD_INT 1
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 25
13633: PUSH
13634: LD_INT 3
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 69
13650: PUSH
13651: LD_EXP 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: DIFF
13659: PPUSH
13660: LD_STRING D3b-Mech1-1
13662: PPUSH
13663: LD_STRING D3b-Mech1-1
13665: PPUSH
13666: CALL 4420 0 3
// end ; if GetSide ( building ) = 3 then
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 255
13679: PUSH
13680: LD_INT 3
13682: EQUAL
13683: IFFALSE 13757
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13685: LD_ADDR_EXP 28
13689: PUSH
13690: LD_EXP 28
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 3
13702: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13703: LD_ADDR_EXP 28
13707: PUSH
13708: LD_EXP 28
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 3
13720: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13721: LD_ADDR_EXP 28
13725: PUSH
13726: LD_EXP 28
13730: PPUSH
13731: LD_INT 1
13733: PPUSH
13734: CALL_OW 3
13738: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13739: LD_ADDR_EXP 28
13743: PUSH
13744: LD_EXP 28
13748: PPUSH
13749: LD_INT 1
13751: PPUSH
13752: CALL_OW 3
13756: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 255
13766: PUSH
13767: LD_INT 3
13769: EQUAL
13770: PUSH
13771: LD_VAR 0 1
13775: PPUSH
13776: CALL_OW 266
13780: PUSH
13781: LD_INT 0
13783: EQUAL
13784: PUSH
13785: LD_VAR 0 1
13789: PPUSH
13790: CALL_OW 266
13794: PUSH
13795: LD_INT 2
13797: EQUAL
13798: OR
13799: PUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 266
13809: PUSH
13810: LD_INT 4
13812: EQUAL
13813: OR
13814: PUSH
13815: EMPTY
13816: LIST
13817: AND
13818: IFFALSE 13829
// ComUpgrade ( building ) ;
13820: LD_VAR 0 1
13824: PPUSH
13825: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 255
13838: PUSH
13839: LD_INT 3
13841: EQUAL
13842: PUSH
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 266
13852: PUSH
13853: LD_INT 32
13855: EQUAL
13856: AND
13857: IFFALSE 13898
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_INT 42
13866: PUSH
13867: LD_INT 43
13869: PUSH
13870: LD_INT 44
13872: PUSH
13873: LD_INT 46
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 1
13884: PPUSH
13885: LD_INT 4
13887: PPUSH
13888: CALL_OW 12
13892: ARRAY
13893: PPUSH
13894: CALL_OW 208
// end ; end ;
13898: PPOPN 1
13900: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 255
13910: PUSH
13911: LD_INT 1
13913: EQUAL
13914: PUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 247
13924: PUSH
13925: LD_INT 1
13927: EQUAL
13928: AND
13929: PUSH
13930: LD_VAR 0 1
13934: PPUSH
13935: CALL_OW 257
13939: PUSH
13940: LD_INT 1
13942: EQUAL
13943: PUSH
13944: LD_VAR 0 1
13948: PPUSH
13949: CALL_OW 257
13953: PUSH
13954: LD_INT 2
13956: EQUAL
13957: OR
13958: PUSH
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 257
13968: PUSH
13969: LD_INT 3
13971: EQUAL
13972: OR
13973: PUSH
13974: LD_VAR 0 1
13978: PPUSH
13979: CALL_OW 257
13983: PUSH
13984: LD_INT 4
13986: EQUAL
13987: OR
13988: PUSH
13989: EMPTY
13990: LIST
13991: AND
13992: IFFALSE 14008
// unitLost = unitLost + 1 ;
13994: LD_ADDR_EXP 27
13998: PUSH
13999: LD_EXP 27
14003: PUSH
14004: LD_INT 1
14006: PLUS
14007: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14008: LD_VAR 0 1
14012: PPUSH
14013: CALL_OW 255
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 1
14026: PPUSH
14027: CALL_OW 247
14031: PUSH
14032: LD_INT 3
14034: EQUAL
14035: AND
14036: IFFALSE 14728
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 266
14047: PUSH
14048: LD_INT 31
14050: EQUAL
14051: PUSH
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 266
14061: PUSH
14062: LD_INT 32
14064: EQUAL
14065: OR
14066: PUSH
14067: LD_VAR 0 1
14071: PPUSH
14072: CALL_OW 266
14076: PUSH
14077: LD_INT 36
14079: EQUAL
14080: OR
14081: PUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 266
14091: PUSH
14092: LD_INT 0
14094: EQUAL
14095: OR
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 266
14106: PUSH
14107: LD_INT 24
14109: EQUAL
14110: OR
14111: PUSH
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 266
14121: PUSH
14122: LD_INT 17
14124: EQUAL
14125: OR
14126: PUSH
14127: LD_VAR 0 1
14131: PPUSH
14132: CALL_OW 266
14136: PUSH
14137: LD_INT 25
14139: EQUAL
14140: OR
14141: PUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 266
14151: PUSH
14152: LD_INT 19
14154: EQUAL
14155: OR
14156: PUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 266
14166: PUSH
14167: LD_INT 20
14169: EQUAL
14170: OR
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 266
14181: PUSH
14182: LD_INT 18
14184: EQUAL
14185: OR
14186: PUSH
14187: LD_VAR 0 1
14191: PPUSH
14192: CALL_OW 266
14196: PUSH
14197: LD_INT 21
14199: EQUAL
14200: OR
14201: PUSH
14202: LD_VAR 0 1
14206: PPUSH
14207: CALL_OW 266
14211: PUSH
14212: LD_INT 23
14214: EQUAL
14215: OR
14216: PUSH
14217: LD_VAR 0 1
14221: PPUSH
14222: CALL_OW 266
14226: PUSH
14227: LD_INT 16
14229: EQUAL
14230: OR
14231: PUSH
14232: LD_VAR 0 1
14236: PPUSH
14237: CALL_OW 266
14241: PUSH
14242: LD_INT 6
14244: EQUAL
14245: OR
14246: PUSH
14247: LD_VAR 0 1
14251: PPUSH
14252: CALL_OW 266
14256: PUSH
14257: LD_INT 29
14259: EQUAL
14260: OR
14261: PUSH
14262: LD_VAR 0 1
14266: PPUSH
14267: CALL_OW 266
14271: PUSH
14272: LD_INT 26
14274: EQUAL
14275: OR
14276: PUSH
14277: LD_VAR 0 1
14281: PPUSH
14282: CALL_OW 266
14286: PUSH
14287: LD_INT 30
14289: EQUAL
14290: OR
14291: PUSH
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL_OW 266
14301: PUSH
14302: LD_INT 28
14304: EQUAL
14305: OR
14306: PUSH
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL_OW 266
14316: PUSH
14317: LD_INT 27
14319: EQUAL
14320: OR
14321: PUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 266
14331: PUSH
14332: LD_INT 33
14334: EQUAL
14335: OR
14336: PUSH
14337: LD_VAR 0 1
14341: PPUSH
14342: CALL_OW 266
14346: PUSH
14347: LD_INT 2
14349: EQUAL
14350: OR
14351: PUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: CALL_OW 266
14361: PUSH
14362: LD_INT 4
14364: EQUAL
14365: OR
14366: IFFALSE 14452
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14368: LD_ADDR_EXP 28
14372: PUSH
14373: LD_EXP 28
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 266
14387: ADD
14388: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14389: LD_ADDR_EXP 28
14393: PUSH
14394: LD_EXP 28
14398: PUSH
14399: LD_VAR 0 1
14403: PPUSH
14404: CALL_OW 250
14408: ADD
14409: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14410: LD_ADDR_EXP 28
14414: PUSH
14415: LD_EXP 28
14419: PUSH
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 251
14429: ADD
14430: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14431: LD_ADDR_EXP 28
14435: PUSH
14436: LD_EXP 28
14440: PUSH
14441: LD_VAR 0 1
14445: PPUSH
14446: CALL_OW 254
14450: ADD
14451: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14452: LD_VAR 0 1
14456: PPUSH
14457: CALL_OW 266
14461: PUSH
14462: LD_INT 1
14464: EQUAL
14465: IFFALSE 14544
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14467: LD_ADDR_EXP 28
14471: PUSH
14472: LD_EXP 28
14476: PUSH
14477: LD_INT 0
14479: ADD
14480: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14481: LD_ADDR_EXP 28
14485: PUSH
14486: LD_EXP 28
14490: PUSH
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 250
14500: ADD
14501: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14502: LD_ADDR_EXP 28
14506: PUSH
14507: LD_EXP 28
14511: PUSH
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 251
14521: ADD
14522: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14523: LD_ADDR_EXP 28
14527: PUSH
14528: LD_EXP 28
14532: PUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 254
14542: ADD
14543: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 266
14553: PUSH
14554: LD_INT 3
14556: EQUAL
14557: IFFALSE 14636
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14559: LD_ADDR_EXP 28
14563: PUSH
14564: LD_EXP 28
14568: PUSH
14569: LD_INT 2
14571: ADD
14572: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14573: LD_ADDR_EXP 28
14577: PUSH
14578: LD_EXP 28
14582: PUSH
14583: LD_VAR 0 1
14587: PPUSH
14588: CALL_OW 250
14592: ADD
14593: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14594: LD_ADDR_EXP 28
14598: PUSH
14599: LD_EXP 28
14603: PUSH
14604: LD_VAR 0 1
14608: PPUSH
14609: CALL_OW 251
14613: ADD
14614: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14615: LD_ADDR_EXP 28
14619: PUSH
14620: LD_EXP 28
14624: PUSH
14625: LD_VAR 0 1
14629: PPUSH
14630: CALL_OW 254
14634: ADD
14635: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14636: LD_VAR 0 1
14640: PPUSH
14641: CALL_OW 266
14645: PUSH
14646: LD_INT 5
14648: EQUAL
14649: IFFALSE 14728
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14651: LD_ADDR_EXP 28
14655: PUSH
14656: LD_EXP 28
14660: PUSH
14661: LD_INT 4
14663: ADD
14664: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14665: LD_ADDR_EXP 28
14669: PUSH
14670: LD_EXP 28
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 250
14684: ADD
14685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14686: LD_ADDR_EXP 28
14690: PUSH
14691: LD_EXP 28
14695: PUSH
14696: LD_VAR 0 1
14700: PPUSH
14701: CALL_OW 251
14705: ADD
14706: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14707: LD_ADDR_EXP 28
14711: PUSH
14712: LD_EXP 28
14716: PUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 254
14726: ADD
14727: ST_TO_ADDR
// end ; end ; end ;
14728: PPOPN 1
14730: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
14735: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 264
14745: PUSH
14746: LD_INT 51
14748: EQUAL
14749: PUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: CALL_OW 255
14759: PUSH
14760: LD_INT 3
14762: EQUAL
14763: AND
14764: IFFALSE 14826
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14766: LD_ADDR_VAR 0 5
14770: PUSH
14771: LD_INT 2
14773: PPUSH
14774: CALL_OW 274
14778: PPUSH
14779: LD_INT 1
14781: PPUSH
14782: CALL_OW 275
14786: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
14787: LD_INT 2
14789: PPUSH
14790: CALL_OW 274
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_VAR 0 5
14802: PUSH
14803: LD_INT 100
14805: MINUS
14806: PPUSH
14807: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
14811: LD_VAR 0 1
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_INT 100
14821: PPUSH
14822: CALL_OW 291
// end ; if building = rufabsupp then
14826: LD_VAR 0 2
14830: PUSH
14831: LD_INT 17
14833: EQUAL
14834: IFFALSE 14848
// SetSide ( vehicle , 6 ) ;
14836: LD_VAR 0 1
14840: PPUSH
14841: LD_INT 6
14843: PPUSH
14844: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 255
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: PUSH
14862: LD_VAR 0 2
14866: PPUSH
14867: CALL_OW 302
14871: AND
14872: IFFALSE 14942
// begin uc_side = 3 ;
14874: LD_ADDR_OWVAR 20
14878: PUSH
14879: LD_INT 3
14881: ST_TO_ADDR
// uc_nation = 3 ;
14882: LD_ADDR_OWVAR 21
14886: PUSH
14887: LD_INT 3
14889: ST_TO_ADDR
// hc_gallery :=  ;
14890: LD_ADDR_OWVAR 33
14894: PUSH
14895: LD_STRING 
14897: ST_TO_ADDR
// hc_name :=  ;
14898: LD_ADDR_OWVAR 26
14902: PUSH
14903: LD_STRING 
14905: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14906: LD_INT 0
14908: PPUSH
14909: LD_EXP 31
14913: PPUSH
14914: LD_EXP 32
14918: PPUSH
14919: CALL_OW 12
14923: PPUSH
14924: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
14928: CALL_OW 44
14932: PPUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: CALL_OW 52
// end ; end ;
14942: PPOPN 5
14944: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14945: LD_VAR 0 1
14949: PPUSH
14950: CALL_OW 255
14954: PUSH
14955: LD_INT 3
14957: EQUAL
14958: IFFALSE 14974
// tamedApemans = tamedApemans + 1 ;
14960: LD_ADDR_EXP 29
14964: PUSH
14965: LD_EXP 29
14969: PUSH
14970: LD_INT 1
14972: PLUS
14973: ST_TO_ADDR
// end ; end_of_file
14974: PPOPN 2
14976: END
// every 0 0$30 trigger cratesStatus = 1 do
14977: LD_EXP 33
14981: PUSH
14982: LD_INT 1
14984: EQUAL
14985: IFFALSE 15049
14987: GO 14989
14989: DISABLE
// begin enable ;
14990: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
14991: LD_INT 350
14993: PUSH
14994: LD_INT 1050
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_INT 2
15006: PPUSH
15007: CALL_OW 12
15011: ARRAY
15012: PPUSH
15013: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15017: LD_INT 4
15019: PUSH
15020: LD_INT 5
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 1
15029: PPUSH
15030: LD_INT 2
15032: PPUSH
15033: CALL_OW 12
15037: ARRAY
15038: PPUSH
15039: LD_INT 7
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 55
// end ;
15049: END
// every 1 1$0 trigger cratesStatus = 2 do
15050: LD_EXP 33
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: IFFALSE 15122
15060: GO 15062
15062: DISABLE
// begin enable ;
15063: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15064: LD_INT 3150
15066: PUSH
15067: LD_INT 4550
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_INT 2
15079: PPUSH
15080: CALL_OW 12
15084: ARRAY
15085: PPUSH
15086: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15090: LD_INT 2
15092: PUSH
15093: LD_INT 5
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 1
15102: PPUSH
15103: LD_INT 2
15105: PPUSH
15106: CALL_OW 12
15110: ARRAY
15111: PPUSH
15112: LD_INT 8
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: CALL_OW 55
// end ; end_of_file
15122: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15123: LD_EXP 22
15127: PUSH
15128: LD_INT 1
15130: EQUAL
15131: IFFALSE 15432
15133: GO 15135
15135: DISABLE
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
15140: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 22
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 21
15158: PUSH
15159: LD_INT 3
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: LD_INT 30
15171: PUSH
15172: LD_INT 0
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 30
15181: PUSH
15182: LD_INT 1
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: ST_TO_ADDR
// for i in tmp do
15204: LD_ADDR_VAR 0 1
15208: PUSH
15209: LD_VAR 0 2
15213: PUSH
15214: FOR_IN
15215: IFFALSE 15248
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_VAR 0 3
15226: PUSH
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 274
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 275
15244: PLUS
15245: ST_TO_ADDR
15246: GO 15214
15248: POP
15249: POP
// strings = [ ] ;
15250: LD_ADDR_EXP 25
15254: PUSH
15255: EMPTY
15256: ST_TO_ADDR
// if tmp = 0 then
15257: LD_VAR 0 2
15261: PUSH
15262: LD_INT 0
15264: EQUAL
15265: IFFALSE 15290
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15267: LD_ADDR_EXP 25
15271: PUSH
15272: LD_EXP 25
15276: PUSH
15277: LD_STRING #Am06-1
15279: PUSH
15280: LD_EXP 23
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: ADD
15289: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15290: LD_VAR 0 2
15294: PUSH
15295: LD_INT 0
15297: GREATER
15298: PUSH
15299: LD_EXP 23
15303: PUSH
15304: LD_VAR 0 3
15308: GREATER
15309: AND
15310: IFFALSE 15341
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15312: LD_ADDR_EXP 25
15316: PUSH
15317: LD_EXP 25
15321: PUSH
15322: LD_STRING #Am06-1
15324: PUSH
15325: LD_EXP 23
15329: PUSH
15330: LD_VAR 0 3
15334: MINUS
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: ADD
15340: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15341: LD_VAR 0 2
15345: PUSH
15346: LD_INT 0
15348: GREATER
15349: PUSH
15350: LD_EXP 23
15354: PUSH
15355: LD_VAR 0 3
15359: LESSEQUAL
15360: AND
15361: IFFALSE 15384
// strings = strings ^ [ #Am06-1 , 0 ] ;
15363: LD_ADDR_EXP 25
15367: PUSH
15368: LD_EXP 25
15372: PUSH
15373: LD_STRING #Am06-1
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: ADD
15383: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15384: LD_ADDR_EXP 24
15388: PUSH
15389: LD_EXP 24
15393: PUSH
15394: LD_INT 35
15396: MINUS
15397: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15398: LD_ADDR_EXP 25
15402: PUSH
15403: LD_EXP 25
15407: PUSH
15408: LD_STRING #Am06-2
15410: PUSH
15411: LD_EXP 24
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: ADD
15420: ST_TO_ADDR
// display_strings = strings ;
15421: LD_ADDR_OWVAR 47
15425: PUSH
15426: LD_EXP 25
15430: ST_TO_ADDR
// enable ;
15431: ENABLE
// end ; end_of_file
15432: PPOPN 3
15434: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15435: LD_INT 0
15437: PPUSH
15438: PPUSH
15439: PPUSH
15440: PPUSH
15441: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15442: LD_ADDR_VAR 0 2
15446: PUSH
15447: LD_INT 22
15449: PUSH
15450: LD_INT 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: LD_INT 25
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 25
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 25
15492: PUSH
15493: LD_INT 3
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 25
15502: PUSH
15503: LD_INT 4
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15527: LD_ADDR_VAR 0 3
15531: PUSH
15532: LD_INT 1
15534: PPUSH
15535: LD_VAR 0 2
15539: PPUSH
15540: CALL_OW 12
15544: ST_TO_ADDR
// uc_side = 2 ;
15545: LD_ADDR_OWVAR 20
15549: PUSH
15550: LD_INT 2
15552: ST_TO_ADDR
// uc_nation = 2 ;
15553: LD_ADDR_OWVAR 21
15557: PUSH
15558: LD_INT 2
15560: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15561: LD_ADDR_EXP 17
15565: PUSH
15566: LD_STRING Kurt
15568: PPUSH
15569: LD_INT 0
15571: PPUSH
15572: CALL 4363 0 2
15576: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
15577: LD_EXP 17
15581: PPUSH
15582: LD_VAR 0 2
15586: PUSH
15587: LD_VAR 0 3
15591: ARRAY
15592: PPUSH
15593: CALL_OW 250
15597: PPUSH
15598: LD_VAR 0 2
15602: PUSH
15603: LD_VAR 0 3
15607: ARRAY
15608: PPUSH
15609: CALL_OW 251
15613: PPUSH
15614: LD_INT 5
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 50
// InGameOn ;
15624: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15628: LD_EXP 17
15632: PPUSH
15633: CALL_OW 87
// wait ( 0 0$2 ) ;
15637: LD_INT 70
15639: PPUSH
15640: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15644: LD_VAR 0 2
15648: PUSH
15649: LD_VAR 0 3
15653: ARRAY
15654: PPUSH
15655: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15659: LD_VAR 0 2
15663: PUSH
15664: LD_VAR 0 3
15668: ARRAY
15669: PPUSH
15670: CALL_OW 122
// wait ( 0 0$1 ) ;
15674: LD_INT 35
15676: PPUSH
15677: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15681: LD_EXP 17
15685: PPUSH
15686: LD_VAR 0 2
15690: PUSH
15691: LD_VAR 0 3
15695: ARRAY
15696: PPUSH
15697: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15701: LD_VAR 0 2
15705: PUSH
15706: LD_VAR 0 3
15710: ARRAY
15711: PPUSH
15712: LD_EXP 17
15716: PPUSH
15717: CALL_OW 119
// DialogueOn ;
15721: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15725: LD_EXP 17
15729: PPUSH
15730: LD_STRING D2-Kurt-1
15732: PPUSH
15733: CALL_OW 88
// if tmp [ rnd ] = JMM then
15737: LD_VAR 0 2
15741: PUSH
15742: LD_VAR 0 3
15746: ARRAY
15747: PUSH
15748: LD_EXP 1
15752: EQUAL
15753: IFFALSE 15845
// begin Say ( JMM , D2-JMM-1 ) ;
15755: LD_EXP 1
15759: PPUSH
15760: LD_STRING D2-JMM-1
15762: PPUSH
15763: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15767: LD_EXP 17
15771: PPUSH
15772: LD_STRING D2-Kurt-2
15774: PPUSH
15775: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15779: LD_EXP 1
15783: PPUSH
15784: LD_STRING D2-JMM-2
15786: PPUSH
15787: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15791: LD_EXP 17
15795: PPUSH
15796: LD_STRING D2-Kurt-3
15798: PPUSH
15799: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15803: LD_EXP 1
15807: PPUSH
15808: LD_STRING D2-JMM-3
15810: PPUSH
15811: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15815: LD_EXP 17
15819: PPUSH
15820: LD_STRING D2-Kurt-4
15822: PPUSH
15823: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15827: LD_EXP 1
15831: PPUSH
15832: LD_STRING D2-JMM-4
15834: PPUSH
15835: CALL_OW 88
// DialogueOff ;
15839: CALL_OW 7
// end else
15843: GO 16275
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15845: LD_VAR 0 2
15849: PUSH
15850: LD_VAR 0 3
15854: ARRAY
15855: PPUSH
15856: CALL_OW 258
15860: PUSH
15861: LD_INT 1
15863: EQUAL
15864: IFFALSE 15884
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
15866: LD_VAR 0 2
15870: PUSH
15871: LD_VAR 0 3
15875: ARRAY
15876: PPUSH
15877: LD_STRING D2-Sol1-1
15879: PPUSH
15880: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15884: LD_VAR 0 2
15888: PUSH
15889: LD_VAR 0 3
15893: ARRAY
15894: PPUSH
15895: CALL_OW 258
15899: PUSH
15900: LD_INT 2
15902: EQUAL
15903: IFFALSE 15923
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
15905: LD_VAR 0 2
15909: PUSH
15910: LD_VAR 0 3
15914: ARRAY
15915: PPUSH
15916: LD_STRING D2-FSol1-1
15918: PPUSH
15919: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15923: LD_EXP 17
15927: PPUSH
15928: LD_STRING D2-Kurt-2
15930: PPUSH
15931: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15935: LD_VAR 0 2
15939: PUSH
15940: LD_VAR 0 3
15944: ARRAY
15945: PPUSH
15946: CALL_OW 258
15950: PUSH
15951: LD_INT 1
15953: EQUAL
15954: IFFALSE 15974
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
15956: LD_VAR 0 2
15960: PUSH
15961: LD_VAR 0 3
15965: ARRAY
15966: PPUSH
15967: LD_STRING D2-Sol1-2
15969: PPUSH
15970: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15974: LD_VAR 0 2
15978: PUSH
15979: LD_VAR 0 3
15983: ARRAY
15984: PPUSH
15985: CALL_OW 258
15989: PUSH
15990: LD_INT 2
15992: EQUAL
15993: IFFALSE 16013
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
15995: LD_VAR 0 2
15999: PUSH
16000: LD_VAR 0 3
16004: ARRAY
16005: PPUSH
16006: LD_STRING D2-FSol1-2
16008: PPUSH
16009: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16013: LD_EXP 17
16017: PPUSH
16018: LD_STRING D2-Kurt-3
16020: PPUSH
16021: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16025: LD_VAR 0 2
16029: PUSH
16030: LD_VAR 0 3
16034: ARRAY
16035: PPUSH
16036: CALL_OW 258
16040: PUSH
16041: LD_INT 1
16043: EQUAL
16044: IFFALSE 16064
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16046: LD_VAR 0 2
16050: PUSH
16051: LD_VAR 0 3
16055: ARRAY
16056: PPUSH
16057: LD_STRING D2-Sol1-3
16059: PPUSH
16060: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16064: LD_VAR 0 2
16068: PUSH
16069: LD_VAR 0 3
16073: ARRAY
16074: PPUSH
16075: CALL_OW 258
16079: PUSH
16080: LD_INT 2
16082: EQUAL
16083: IFFALSE 16103
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16085: LD_VAR 0 2
16089: PUSH
16090: LD_VAR 0 3
16094: ARRAY
16095: PPUSH
16096: LD_STRING D2-FSol1-3
16098: PPUSH
16099: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16103: LD_EXP 17
16107: PPUSH
16108: LD_STRING D2-Kurt-4
16110: PPUSH
16111: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16115: LD_VAR 0 2
16119: PUSH
16120: LD_VAR 0 3
16124: ARRAY
16125: PPUSH
16126: CALL_OW 258
16130: PUSH
16131: LD_INT 1
16133: EQUAL
16134: IFFALSE 16154
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16136: LD_VAR 0 2
16140: PUSH
16141: LD_VAR 0 3
16145: ARRAY
16146: PPUSH
16147: LD_STRING D2-Sol1-4
16149: PPUSH
16150: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16154: LD_VAR 0 2
16158: PUSH
16159: LD_VAR 0 3
16163: ARRAY
16164: PPUSH
16165: CALL_OW 258
16169: PUSH
16170: LD_INT 2
16172: EQUAL
16173: IFFALSE 16193
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16175: LD_VAR 0 2
16179: PUSH
16180: LD_VAR 0 3
16184: ARRAY
16185: PPUSH
16186: LD_STRING D2-FSol1-4
16188: PPUSH
16189: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16193: LD_VAR 0 2
16197: PUSH
16198: LD_VAR 0 3
16202: ARRAY
16203: PPUSH
16204: CALL_OW 258
16208: PUSH
16209: LD_INT 1
16211: EQUAL
16212: IFFALSE 16232
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16214: LD_VAR 0 2
16218: PUSH
16219: LD_VAR 0 3
16223: ARRAY
16224: PPUSH
16225: LD_STRING D2-Sol1-5
16227: PPUSH
16228: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16232: LD_VAR 0 2
16236: PUSH
16237: LD_VAR 0 3
16241: ARRAY
16242: PPUSH
16243: CALL_OW 258
16247: PUSH
16248: LD_INT 2
16250: EQUAL
16251: IFFALSE 16271
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16253: LD_VAR 0 2
16257: PUSH
16258: LD_VAR 0 3
16262: ARRAY
16263: PPUSH
16264: LD_STRING D2-FSol1-5
16266: PPUSH
16267: CALL_OW 88
// DialogueOff ;
16271: CALL_OW 7
// end ; dec = ShowQuery1 ;
16275: LD_ADDR_VAR 0 4
16279: PUSH
16280: CALL 4959 0 0
16284: ST_TO_ADDR
// if dec = 1 then
16285: LD_VAR 0 4
16289: PUSH
16290: LD_INT 1
16292: EQUAL
16293: IFFALSE 16335
// begin DialogueOn ;
16295: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16299: LD_EXP 17
16303: PPUSH
16304: LD_STRING D2a-Kurt-1
16306: PPUSH
16307: CALL_OW 88
// DialogueOff ;
16311: CALL_OW 7
// InGameOff ;
16315: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16319: LD_INT 1
16321: PPUSH
16322: LD_INT 2
16324: PPUSH
16325: LD_INT 2
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: CALL_OW 80
// end ; if dec = 2 then
16335: LD_VAR 0 4
16339: PUSH
16340: LD_INT 2
16342: EQUAL
16343: IFFALSE 16939
// begin DialogueOn ;
16345: CALL_OW 6
// if tmp [ rnd ] = JMM then
16349: LD_VAR 0 2
16353: PUSH
16354: LD_VAR 0 3
16358: ARRAY
16359: PUSH
16360: LD_EXP 1
16364: EQUAL
16365: IFFALSE 16421
// begin Say ( JMM , D2b-JMM-1 ) ;
16367: LD_EXP 1
16371: PPUSH
16372: LD_STRING D2b-JMM-1
16374: PPUSH
16375: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16379: LD_EXP 17
16383: PPUSH
16384: LD_STRING D2b-Kurt-1
16386: PPUSH
16387: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16391: LD_EXP 1
16395: PPUSH
16396: LD_STRING D2b-JMM-2
16398: PPUSH
16399: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16403: LD_EXP 17
16407: PPUSH
16408: LD_STRING D2b-Kurt-2
16410: PPUSH
16411: CALL_OW 88
// DialogueOff ;
16415: CALL_OW 7
// end else
16419: GO 16683
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16421: LD_VAR 0 2
16425: PUSH
16426: LD_VAR 0 3
16430: ARRAY
16431: PPUSH
16432: CALL_OW 258
16436: PUSH
16437: LD_INT 1
16439: EQUAL
16440: IFFALSE 16460
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16442: LD_VAR 0 2
16446: PUSH
16447: LD_VAR 0 3
16451: ARRAY
16452: PPUSH
16453: LD_STRING D2b-Sol1-1
16455: PPUSH
16456: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16460: LD_VAR 0 2
16464: PUSH
16465: LD_VAR 0 3
16469: ARRAY
16470: PPUSH
16471: CALL_OW 258
16475: PUSH
16476: LD_INT 2
16478: EQUAL
16479: IFFALSE 16499
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16481: LD_VAR 0 2
16485: PUSH
16486: LD_VAR 0 3
16490: ARRAY
16491: PPUSH
16492: LD_STRING D2b-FSol1-1
16494: PPUSH
16495: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16499: LD_EXP 17
16503: PPUSH
16504: LD_STRING D2b-Kurt-1
16506: PPUSH
16507: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16511: LD_VAR 0 2
16515: PUSH
16516: LD_VAR 0 3
16520: ARRAY
16521: PPUSH
16522: CALL_OW 258
16526: PUSH
16527: LD_INT 1
16529: EQUAL
16530: IFFALSE 16550
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16532: LD_VAR 0 2
16536: PUSH
16537: LD_VAR 0 3
16541: ARRAY
16542: PPUSH
16543: LD_STRING D2b-Sol1-2
16545: PPUSH
16546: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16550: LD_VAR 0 2
16554: PUSH
16555: LD_VAR 0 3
16559: ARRAY
16560: PPUSH
16561: CALL_OW 258
16565: PUSH
16566: LD_INT 2
16568: EQUAL
16569: IFFALSE 16589
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16571: LD_VAR 0 2
16575: PUSH
16576: LD_VAR 0 3
16580: ARRAY
16581: PPUSH
16582: LD_STRING D2b-FSol1-2
16584: PPUSH
16585: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16589: LD_EXP 17
16593: PPUSH
16594: LD_STRING D2b-Kurt-2
16596: PPUSH
16597: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16601: LD_VAR 0 2
16605: PUSH
16606: LD_VAR 0 3
16610: ARRAY
16611: PPUSH
16612: CALL_OW 258
16616: PUSH
16617: LD_INT 1
16619: EQUAL
16620: IFFALSE 16640
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16622: LD_VAR 0 2
16626: PUSH
16627: LD_VAR 0 3
16631: ARRAY
16632: PPUSH
16633: LD_STRING D2c-Sol1-2
16635: PPUSH
16636: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16640: LD_VAR 0 2
16644: PUSH
16645: LD_VAR 0 3
16649: ARRAY
16650: PPUSH
16651: CALL_OW 258
16655: PUSH
16656: LD_INT 2
16658: EQUAL
16659: IFFALSE 16679
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16661: LD_VAR 0 2
16665: PUSH
16666: LD_VAR 0 3
16670: ARRAY
16671: PPUSH
16672: LD_STRING D2c-FSol1-2
16674: PPUSH
16675: CALL_OW 88
// DialogueOff ;
16679: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16683: LD_ADDR_VAR 0 5
16687: PUSH
16688: CALL 5033 0 0
16692: ST_TO_ADDR
// if dec2 = 1 then
16693: LD_VAR 0 5
16697: PUSH
16698: LD_INT 1
16700: EQUAL
16701: IFFALSE 16739
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16703: LD_EXP 17
16707: PPUSH
16708: LD_STRING D2a-Kurt-1
16710: PPUSH
16711: CALL_OW 88
// DialogueOff ;
16715: CALL_OW 7
// InGameOff ;
16719: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16723: LD_INT 1
16725: PPUSH
16726: LD_INT 2
16728: PPUSH
16729: LD_INT 2
16731: PPUSH
16732: LD_INT 1
16734: PPUSH
16735: CALL_OW 80
// end ; if dec2 = 2 then
16739: LD_VAR 0 5
16743: PUSH
16744: LD_INT 2
16746: EQUAL
16747: IFFALSE 16939
// begin if tmp [ rnd ] = JMM then
16749: LD_VAR 0 2
16753: PUSH
16754: LD_VAR 0 3
16758: ARRAY
16759: PUSH
16760: LD_EXP 1
16764: EQUAL
16765: IFFALSE 16821
// begin Say ( JMM , D2c-JMM-1 ) ;
16767: LD_EXP 1
16771: PPUSH
16772: LD_STRING D2c-JMM-1
16774: PPUSH
16775: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16779: LD_EXP 17
16783: PPUSH
16784: LD_STRING D2c-Kurt-1
16786: PPUSH
16787: CALL_OW 88
// DialogueOff ;
16791: CALL_OW 7
// InGameOff ;
16795: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16799: LD_EXP 17
16803: PPUSH
16804: LD_INT 9
16806: PPUSH
16807: CALL_OW 113
// readyToEscape = 1 ;
16811: LD_ADDR_EXP 19
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// end else
16819: GO 16939
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16821: LD_VAR 0 2
16825: PUSH
16826: LD_VAR 0 3
16830: ARRAY
16831: PPUSH
16832: CALL_OW 258
16836: PUSH
16837: LD_INT 1
16839: EQUAL
16840: IFFALSE 16860
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
16842: LD_VAR 0 2
16846: PUSH
16847: LD_VAR 0 3
16851: ARRAY
16852: PPUSH
16853: LD_STRING D2c-Sol1-1
16855: PPUSH
16856: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16860: LD_VAR 0 2
16864: PUSH
16865: LD_VAR 0 3
16869: ARRAY
16870: PPUSH
16871: CALL_OW 258
16875: PUSH
16876: LD_INT 2
16878: EQUAL
16879: IFFALSE 16899
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
16881: LD_VAR 0 2
16885: PUSH
16886: LD_VAR 0 3
16890: ARRAY
16891: PPUSH
16892: LD_STRING D2c-FSol1-1
16894: PPUSH
16895: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16899: LD_EXP 17
16903: PPUSH
16904: LD_STRING D2c-Kurt-1
16906: PPUSH
16907: CALL_OW 88
// DialogueOff ;
16911: CALL_OW 7
// InGameOff ;
16915: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16919: LD_EXP 17
16923: PPUSH
16924: LD_INT 9
16926: PPUSH
16927: CALL_OW 113
// readyToEscape = 1 ;
16931: LD_ADDR_EXP 19
16935: PUSH
16936: LD_INT 1
16938: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16939: LD_VAR 0 4
16943: PUSH
16944: LD_INT 3
16946: EQUAL
16947: IFFALSE 17143
// begin DialogueOn ;
16949: CALL_OW 6
// if tmp [ rnd ] = JMM then
16953: LD_VAR 0 2
16957: PUSH
16958: LD_VAR 0 3
16962: ARRAY
16963: PUSH
16964: LD_EXP 1
16968: EQUAL
16969: IFFALSE 17025
// begin Say ( JMM , D2c-JMM-1 ) ;
16971: LD_EXP 1
16975: PPUSH
16976: LD_STRING D2c-JMM-1
16978: PPUSH
16979: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16983: LD_EXP 17
16987: PPUSH
16988: LD_STRING D2c-Kurt-1
16990: PPUSH
16991: CALL_OW 88
// DialogueOff ;
16995: CALL_OW 7
// InGameOff ;
16999: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17003: LD_EXP 17
17007: PPUSH
17008: LD_INT 9
17010: PPUSH
17011: CALL_OW 113
// readyToEscape = 1 ;
17015: LD_ADDR_EXP 19
17019: PUSH
17020: LD_INT 1
17022: ST_TO_ADDR
// end else
17023: GO 17143
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17025: LD_VAR 0 2
17029: PUSH
17030: LD_VAR 0 3
17034: ARRAY
17035: PPUSH
17036: CALL_OW 258
17040: PUSH
17041: LD_INT 1
17043: EQUAL
17044: IFFALSE 17064
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17046: LD_VAR 0 2
17050: PUSH
17051: LD_VAR 0 3
17055: ARRAY
17056: PPUSH
17057: LD_STRING D2c-Sol1-1
17059: PPUSH
17060: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17064: LD_VAR 0 2
17068: PUSH
17069: LD_VAR 0 3
17073: ARRAY
17074: PPUSH
17075: CALL_OW 258
17079: PUSH
17080: LD_INT 2
17082: EQUAL
17083: IFFALSE 17103
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17085: LD_VAR 0 2
17089: PUSH
17090: LD_VAR 0 3
17094: ARRAY
17095: PPUSH
17096: LD_STRING D2c-FSol1-1
17098: PPUSH
17099: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17103: LD_EXP 17
17107: PPUSH
17108: LD_STRING D2c-Kurt-1
17110: PPUSH
17111: CALL_OW 88
// DialogueOff ;
17115: CALL_OW 7
// InGameOff ;
17119: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17123: LD_EXP 17
17127: PPUSH
17128: LD_INT 9
17130: PPUSH
17131: CALL_OW 113
// readyToEscape = 1 ;
17135: LD_ADDR_EXP 19
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// end ; end ; end ; end_of_file
17143: LD_VAR 0 1
17147: RET
// every 0 0$1 do
17148: GO 17150
17150: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17151: LD_INT 3
17153: PPUSH
17154: LD_INT 32
17156: PPUSH
17157: LD_INT 3
17159: PPUSH
17160: CALL 5088 0 3
17164: END
// every 0 0$1 do
17165: GO 17167
17167: DISABLE
// begin enable ;
17168: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17169: LD_INT 3
17171: PPUSH
17172: LD_INT 2
17174: PPUSH
17175: CALL 5173 0 2
// if disableHealAI = 0 then
17179: LD_EXP 30
17183: PUSH
17184: LD_INT 0
17186: EQUAL
17187: IFFALSE 17205
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17189: LD_INT 3
17191: PPUSH
17192: LD_INT 10
17194: PPUSH
17195: LD_INT 11
17197: PPUSH
17198: LD_INT 32
17200: PPUSH
17201: CALL 5432 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17205: LD_INT 3
17207: PPUSH
17208: LD_INT 51
17210: PPUSH
17211: LD_INT 7
17213: PPUSH
17214: CALL 6155 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17218: LD_INT 3
17220: PPUSH
17221: LD_INT 14
17223: PPUSH
17224: LD_INT 121
17226: PPUSH
17227: LD_INT 100
17229: PPUSH
17230: LD_INT 1
17232: PPUSH
17233: CALL 6335 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17237: LD_INT 3
17239: PPUSH
17240: LD_EXP 28
17244: PPUSH
17245: CALL 7126 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17249: LD_INT 3
17251: PPUSH
17252: LD_INT 8
17254: PUSH
17255: LD_INT 67
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 1
17264: PPUSH
17265: LD_INT 2
17267: PPUSH
17268: CALL_OW 12
17272: ARRAY
17273: PPUSH
17274: LD_INT 11
17276: PPUSH
17277: CALL 7332 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17281: LD_INT 3
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: CALL 7689 0 2
// end ;
17291: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17292: LD_INT 22
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: LD_INT 51
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 69
17338: PUSH
17339: LD_INT 0
17341: EQUAL
17342: IFFALSE 17476
17344: GO 17346
17346: DISABLE
// begin enable ;
17347: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17348: LD_INT 3
17350: PPUSH
17351: LD_INT 21
17353: PPUSH
17354: LD_INT 4
17356: PUSH
17357: LD_INT 5
17359: PUSH
17360: LD_INT 5
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_OWVAR 67
17372: ARRAY
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: LD_INT 43
17379: PUSH
17380: LD_INT 43
17382: PUSH
17383: LD_INT 43
17385: PUSH
17386: LD_INT 44
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: LD_INT 44
17397: PUSH
17398: LD_INT 44
17400: PUSH
17401: LD_INT 44
17403: PUSH
17404: LD_INT 43
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 44
17415: PUSH
17416: LD_INT 44
17418: PUSH
17419: LD_INT 44
17421: PUSH
17422: LD_INT 44
17424: PUSH
17425: LD_INT 46
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: LD_OWVAR 67
17444: ARRAY
17445: PPUSH
17446: LD_INT 1
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: LD_INT 22
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_INT 24
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PUSH
17466: LD_OWVAR 67
17470: ARRAY
17471: PPUSH
17472: CALL 5698 0 8
// end ;
17476: END
// every 5 5$0 do
17477: GO 17479
17479: DISABLE
// begin enable ;
17480: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17481: LD_INT 17
17483: PPUSH
17484: LD_INT 22
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_INT 1
17492: PPUSH
17493: LD_INT 42
17495: PUSH
17496: LD_INT 43
17498: PUSH
17499: LD_INT 44
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: PPUSH
17510: LD_INT 3
17512: PPUSH
17513: CALL_OW 12
17517: ARRAY
17518: PPUSH
17519: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17523: LD_INT 17
17525: PPUSH
17526: LD_INT 22
17528: PPUSH
17529: LD_INT 1
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: LD_INT 51
17537: PPUSH
17538: CALL_OW 185
// end ;
17542: END
// every 2 2$0 do var i , j ;
17543: GO 17545
17545: DISABLE
17546: LD_INT 0
17548: PPUSH
17549: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17550: LD_INT 14700
17552: PUSH
17553: LD_INT 33600
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_INT 2
17565: PPUSH
17566: CALL_OW 12
17570: ARRAY
17571: PPUSH
17572: CALL_OW 67
// disableHealAI = 1 ;
17576: LD_ADDR_EXP 30
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17584: LD_ADDR_VAR 0 1
17588: PUSH
17589: LD_INT 22
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 25
17601: PUSH
17602: LD_INT 4
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 69
17617: PUSH
17618: FOR_IN
17619: IFFALSE 17632
// ComExitBuilding ( i ) ;
17621: LD_VAR 0 1
17625: PPUSH
17626: CALL_OW 122
17630: GO 17618
17632: POP
17633: POP
// wait ( 0 0$1 ) ;
17634: LD_INT 35
17636: PPUSH
17637: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17641: LD_INT 35
17643: PPUSH
17644: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17648: LD_ADDR_VAR 0 1
17652: PUSH
17653: LD_INT 22
17655: PUSH
17656: LD_INT 3
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 25
17665: PUSH
17666: LD_INT 4
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PPUSH
17677: CALL_OW 69
17681: PUSH
17682: FOR_IN
17683: IFFALSE 17760
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 19
17692: PPUSH
17693: LD_INT 22
17695: PUSH
17696: LD_INT 0
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 25
17705: PUSH
17706: LD_INT 12
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 70
17721: PUSH
17722: FOR_IN
17723: IFFALSE 17756
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17725: LD_VAR 0 1
17729: PPUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: CALL_OW 250
17739: PPUSH
17740: LD_VAR 0 2
17744: PPUSH
17745: CALL_OW 251
17749: PPUSH
17750: CALL_OW 191
// end ;
17754: GO 17722
17756: POP
17757: POP
// end ;
17758: GO 17682
17760: POP
17761: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17762: LD_INT 22
17764: PUSH
17765: LD_INT 3
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 25
17774: PUSH
17775: LD_INT 4
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PPUSH
17786: CALL_OW 69
17790: PUSH
17791: LD_INT 0
17793: EQUAL
17794: PUSH
17795: LD_EXP 29
17799: PUSH
17800: LD_INT 6
17802: PUSH
17803: LD_INT 7
17805: PUSH
17806: LD_INT 8
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: LD_OWVAR 67
17818: ARRAY
17819: GREATEREQUAL
17820: OR
17821: PUSH
17822: LD_INT 19
17824: PPUSH
17825: LD_INT 22
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 25
17837: PUSH
17838: LD_INT 12
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 70
17853: PUSH
17854: LD_INT 0
17856: EQUAL
17857: OR
17858: IFFALSE 17641
// disableHealAI = 0 ;
17860: LD_ADDR_EXP 30
17864: PUSH
17865: LD_INT 0
17867: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17868: LD_ADDR_VAR 0 1
17872: PUSH
17873: LD_INT 22
17875: PUSH
17876: LD_INT 3
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 25
17885: PUSH
17886: LD_INT 12
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17919
// SetClass ( i , 16 ) ;
17905: LD_VAR 0 1
17909: PPUSH
17910: LD_INT 16
17912: PPUSH
17913: CALL_OW 336
17917: GO 17902
17919: POP
17920: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17921: LD_ADDR_VAR 0 1
17925: PUSH
17926: LD_INT 22
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 4
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: PUSH
17955: FOR_IN
17956: IFFALSE 17975
// ComMoveXY ( i , 113 , 94 ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_INT 113
17965: PPUSH
17966: LD_INT 94
17968: PPUSH
17969: CALL_OW 111
17973: GO 17955
17975: POP
17976: POP
// end ;
17977: PPOPN 2
17979: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
17980: LD_INT 21
17982: PPUSH
17983: CALL_OW 255
17987: PUSH
17988: LD_INT 3
17990: EQUAL
17991: PUSH
17992: LD_INT 21
17994: PPUSH
17995: CALL_OW 302
17999: AND
18000: PUSH
18001: LD_INT 22
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 34
18013: PUSH
18014: LD_INT 51
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: PUSH
18030: LD_INT 0
18032: EQUAL
18033: AND
18034: IFFALSE 18066
18036: GO 18038
18038: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18039: LD_INT 21
18041: PPUSH
18042: LD_INT 23
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: LD_INT 51
18053: PPUSH
18054: CALL_OW 185
// wait ( 5 5$0 ) ;
18058: LD_INT 10500
18060: PPUSH
18061: CALL_OW 67
// enable ;
18065: ENABLE
// end ; end_of_file
18066: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18067: LD_EXP 24
18071: PUSH
18072: LD_INT 0
18074: LESSEQUAL
18075: IFFALSE 18215
18077: GO 18079
18079: DISABLE
18080: LD_INT 0
18082: PPUSH
18083: PPUSH
18084: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18085: LD_ADDR_VAR 0 2
18089: PUSH
18090: LD_INT 22
18092: PUSH
18093: LD_INT 1
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 21
18102: PUSH
18103: LD_INT 3
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 30
18115: PUSH
18116: LD_INT 0
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 30
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: PPUSH
18143: CALL_OW 69
18147: ST_TO_ADDR
// for i in tmp do
18148: LD_ADDR_VAR 0 1
18152: PUSH
18153: LD_VAR 0 2
18157: PUSH
18158: FOR_IN
18159: IFFALSE 18192
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18161: LD_ADDR_VAR 0 3
18165: PUSH
18166: LD_VAR 0 3
18170: PUSH
18171: LD_VAR 0 1
18175: PPUSH
18176: CALL_OW 274
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 275
18188: PLUS
18189: ST_TO_ADDR
18190: GO 18158
18192: POP
18193: POP
// if yourCrates >= needCrates then
18194: LD_VAR 0 3
18198: PUSH
18199: LD_EXP 23
18203: GREATEREQUAL
18204: IFFALSE 18215
// begin FinishMission ( yourCrates ) ;
18206: LD_VAR 0 3
18210: PPUSH
18211: CALL 18218 0 1
// end ; end ;
18215: PPOPN 3
18217: END
// export function FinishMission ( crates ) ; begin
18218: LD_INT 0
18220: PPUSH
// if crates + 100 > crates then
18221: LD_VAR 0 1
18225: PUSH
18226: LD_INT 100
18228: PLUS
18229: PUSH
18230: LD_VAR 0 1
18234: GREATER
18235: IFFALSE 18259
// begin AddMedal ( cans , 1 ) ;
18237: LD_STRING cans
18239: PPUSH
18240: LD_INT 1
18242: PPUSH
18243: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18247: LD_INT 1
18249: PPUSH
18250: LD_STRING 06_crates_1
18252: PPUSH
18253: CALL_OW 39
// end else
18257: GO 18280
// begin AddMedal ( cans , - 1 ) ;
18259: LD_STRING cans
18261: PPUSH
18262: LD_INT 1
18264: NEG
18265: PPUSH
18266: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18270: LD_INT 0
18272: PPUSH
18273: LD_STRING 06_crates_1
18275: PPUSH
18276: CALL_OW 39
// end ; if unitLost < 2 then
18280: LD_EXP 27
18284: PUSH
18285: LD_INT 2
18287: LESS
18288: IFFALSE 18302
// begin AddMedal ( people , 1 ) ;
18290: LD_STRING people
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 101
// end else
18300: GO 18313
// begin AddMedal ( people , - 1 ) ;
18302: LD_STRING people
18304: PPUSH
18305: LD_INT 1
18307: NEG
18308: PPUSH
18309: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18313: LD_EXP 26
18317: PPUSH
18318: LD_STRING 06_remoteVehs_1
18320: PPUSH
18321: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18325: LD_EXP 26
18329: PUSH
18330: LD_INT 1
18332: EQUAL
18333: IFFALSE 18347
// begin AddMedal ( remote , 1 ) ;
18335: LD_STRING remote
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 101
// end else
18345: GO 18387
// begin if GetTech ( 18 , 1 ) = state_enabled then
18347: LD_INT 18
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: CALL_OW 321
18357: PUSH
18358: LD_INT 1
18360: EQUAL
18361: IFFALSE 18376
// begin AddMedal ( remote , - 1 ) ;
18363: LD_STRING remote
18365: PPUSH
18366: LD_INT 1
18368: NEG
18369: PPUSH
18370: CALL_OW 101
// end else
18374: GO 18387
// begin AddMedal ( remote , - 2 ) ;
18376: LD_STRING remote
18378: PPUSH
18379: LD_INT 2
18381: NEG
18382: PPUSH
18383: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18387: LD_EXP 18
18391: PPUSH
18392: LD_STRING 06_KurtStatus_1
18394: PPUSH
18395: CALL_OW 39
// GiveMedals ( Main ) ;
18399: LD_STRING Main
18401: PPUSH
18402: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18406: LD_INT 50
18408: PUSH
18409: EMPTY
18410: LIST
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 21
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 25
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 4
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: PPUSH
18488: CALL_OW 69
18492: PPUSH
18493: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18497: LD_EXP 1
18501: PPUSH
18502: LD_STRING JMM
18504: PPUSH
18505: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
18509: LD_EXP 2
18513: PPUSH
18514: LD_STRING Lisa
18516: PPUSH
18517: CALL 4576 0 2
// EnchancedSaveCharacters ( Bobby , Bobby ) ;
18521: LD_EXP 3
18525: PPUSH
18526: LD_STRING Bobby
18528: PPUSH
18529: CALL 4576 0 2
// EnchancedSaveCharacters ( Cyrus , Cyrus ) ;
18533: LD_EXP 4
18537: PPUSH
18538: LD_STRING Cyrus
18540: PPUSH
18541: CALL 4576 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
18545: LD_EXP 5
18549: PPUSH
18550: LD_STRING Frank
18552: PPUSH
18553: CALL 4576 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
18557: LD_EXP 6
18561: PPUSH
18562: LD_STRING Brown
18564: PPUSH
18565: CALL 4576 0 2
// EnchancedSaveCharacters ( Donaldson , Donaldson ) ;
18569: LD_EXP 7
18573: PPUSH
18574: LD_STRING Donaldson
18576: PPUSH
18577: CALL 4576 0 2
// EnchancedSaveCharacters ( Gladstone , Gladstone ) ;
18581: LD_EXP 8
18585: PPUSH
18586: LD_STRING Gladstone
18588: PPUSH
18589: CALL 4576 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
18593: LD_EXP 9
18597: PPUSH
18598: LD_STRING Denis
18600: PPUSH
18601: CALL 4576 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
18605: LD_EXP 13
18609: PPUSH
18610: LD_STRING Joan
18612: PPUSH
18613: CALL 4576 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18617: LD_EXP 14
18621: PPUSH
18622: LD_STRING 06_JoanStatus_1
18624: PPUSH
18625: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
18629: LD_INT 50
18631: PUSH
18632: EMPTY
18633: LIST
18634: PUSH
18635: LD_INT 22
18637: PUSH
18638: LD_INT 1
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 21
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 25
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 25
18690: PUSH
18691: LD_INT 4
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: PPUSH
18711: CALL_OW 69
18715: PUSH
18716: LD_EXP 1
18720: PUSH
18721: LD_EXP 2
18725: PUSH
18726: LD_EXP 3
18730: PUSH
18731: LD_EXP 4
18735: PUSH
18736: LD_EXP 5
18740: PUSH
18741: LD_EXP 6
18745: PUSH
18746: LD_EXP 7
18750: PUSH
18751: LD_EXP 8
18755: PUSH
18756: LD_EXP 9
18760: PUSH
18761: LD_EXP 13
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: DIFF
18778: PPUSH
18779: LD_STRING 06_other_survivors
18781: PPUSH
18782: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
18786: LD_INT 50
18788: PUSH
18789: EMPTY
18790: LIST
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 21
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: LD_INT 25
18817: PUSH
18818: LD_INT 12
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 25
18827: PUSH
18828: LD_INT 16
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: PPUSH
18851: LD_STRING 06_other_apemans
18853: PPUSH
18854: CALL_OW 38
// YouWin ;
18858: CALL_OW 103
// end ; end_of_file
18862: LD_VAR 0 2
18866: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
18867: LD_EXP 34
18871: PUSH
18872: LD_INT 4
18874: PUSH
18875: LD_INT 3
18877: PUSH
18878: LD_INT 3
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_OWVAR 67
18890: ARRAY
18891: EQUAL
18892: IFFALSE 19007
18894: GO 18896
18896: DISABLE
// begin enable ;
18897: ENABLE
// sendedConvoys = 0 ;
18898: LD_ADDR_EXP 34
18902: PUSH
18903: LD_INT 0
18905: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
18906: LD_INT 6
18908: PPUSH
18909: LD_INT 3
18911: PPUSH
18912: LD_INT 3
18914: PPUSH
18915: LD_INT 4
18917: PPUSH
18918: CALL_OW 12
18922: PUSH
18923: LD_INT 4
18925: PPUSH
18926: LD_INT 5
18928: PPUSH
18929: CALL_OW 12
18933: PUSH
18934: LD_INT 6
18936: PPUSH
18937: LD_INT 7
18939: PPUSH
18940: CALL_OW 12
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: LIST
18949: PUSH
18950: LD_OWVAR 67
18954: ARRAY
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: LD_INT 0
18961: PPUSH
18962: LD_INT 0
18964: PPUSH
18965: LD_INT 3
18967: PPUSH
18968: LD_EXP 31
18972: PPUSH
18973: LD_EXP 32
18977: PPUSH
18978: CALL_OW 12
18982: PPUSH
18983: LD_INT 18
18985: PPUSH
18986: LD_INT 17
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: LD_INT 2
18997: PPUSH
18998: CALL_OW 12
19002: PPUSH
19003: CALL 7942 0 12
// end ; end_of_file
19007: END
// export function PrepareNature ; var i , un ; begin
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
19012: PPUSH
// for i = 1 to Difficulty + 2 do
19013: LD_ADDR_VAR 0 2
19017: PUSH
19018: DOUBLE
19019: LD_INT 1
19021: DEC
19022: ST_TO_ADDR
19023: LD_OWVAR 67
19027: PUSH
19028: LD_INT 2
19030: PLUS
19031: PUSH
19032: FOR_TO
19033: IFFALSE 19168
// begin hc_sex = sex_male ;
19035: LD_ADDR_OWVAR 27
19039: PUSH
19040: LD_INT 1
19042: ST_TO_ADDR
// uc_side = 0 ;
19043: LD_ADDR_OWVAR 20
19047: PUSH
19048: LD_INT 0
19050: ST_TO_ADDR
// uc_nation = nation_nature ;
19051: LD_ADDR_OWVAR 21
19055: PUSH
19056: LD_INT 0
19058: ST_TO_ADDR
// hc_class = class_tiger ;
19059: LD_ADDR_OWVAR 28
19063: PUSH
19064: LD_INT 14
19066: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19067: LD_ADDR_OWVAR 31
19071: PUSH
19072: LD_EXP 32
19076: PUSH
19077: LD_INT 0
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
19092: LD_ADDR_OWVAR 35
19096: PUSH
19097: LD_INT 30
19099: PPUSH
19100: LD_INT 40
19102: PPUSH
19103: CALL_OW 12
19107: PUSH
19108: LD_INT 40
19110: PPUSH
19111: LD_INT 50
19113: PPUSH
19114: CALL_OW 12
19118: PUSH
19119: LD_INT 50
19121: PPUSH
19122: LD_INT 60
19124: PPUSH
19125: CALL_OW 12
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: PUSH
19135: LD_OWVAR 67
19139: ARRAY
19140: ST_TO_ADDR
// un = CreateHuman ;
19141: LD_ADDR_VAR 0 3
19145: PUSH
19146: CALL_OW 44
19150: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19151: LD_VAR 0 3
19155: PPUSH
19156: LD_INT 20
19158: PPUSH
19159: LD_INT 0
19161: PPUSH
19162: CALL_OW 49
// end ;
19166: GO 19032
19168: POP
19169: POP
// for i = 1 to rand ( 3 , 4 ) do
19170: LD_ADDR_VAR 0 2
19174: PUSH
19175: DOUBLE
19176: LD_INT 1
19178: DEC
19179: ST_TO_ADDR
19180: LD_INT 3
19182: PPUSH
19183: LD_INT 4
19185: PPUSH
19186: CALL_OW 12
19190: PUSH
19191: FOR_TO
19192: IFFALSE 19286
// begin hc_sex = sex_male ;
19194: LD_ADDR_OWVAR 27
19198: PUSH
19199: LD_INT 1
19201: ST_TO_ADDR
// uc_side = 0 ;
19202: LD_ADDR_OWVAR 20
19206: PUSH
19207: LD_INT 0
19209: ST_TO_ADDR
// uc_nation = nation_nature ;
19210: LD_ADDR_OWVAR 21
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// hc_class = 18 ;
19218: LD_ADDR_OWVAR 28
19222: PUSH
19223: LD_INT 18
19225: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19226: LD_ADDR_OWVAR 31
19230: PUSH
19231: LD_EXP 32
19235: PUSH
19236: LD_INT 0
19238: PUSH
19239: LD_INT 0
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: ST_TO_ADDR
// hc_agressivity = 0 ;
19251: LD_ADDR_OWVAR 35
19255: PUSH
19256: LD_INT 0
19258: ST_TO_ADDR
// un = CreateHuman ;
19259: LD_ADDR_VAR 0 3
19263: PUSH
19264: CALL_OW 44
19268: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 20
19276: PPUSH
19277: LD_INT 0
19279: PPUSH
19280: CALL_OW 49
// end ;
19284: GO 19191
19286: POP
19287: POP
// end ;
19288: LD_VAR 0 1
19292: RET
