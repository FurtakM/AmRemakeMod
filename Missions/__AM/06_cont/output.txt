// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 40
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 41
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 42
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 29
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 20
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 21
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 16
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 38
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 24
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 25
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 26
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 28
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 39
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 32
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 30
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 31
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 36
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 37
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 33
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 27
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5499 0 0
// PrepareNature ;
 211: CALL 20671 0 0
// PrepareRussian ;
 215: CALL 4606 0 0
// PrepareVehicles ;
 219: CALL 1420 0 0
// PrepareHeroes ;
 223: CALL 438 0 0
// PrepareOthers ;
 227: CALL 1681 0 0
// PreparePlayerApemans ;
 231: CALL 1823 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 40
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 435
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; var veh ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side = 1 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 1
 449: ST_TO_ADDR
// uc_nation = 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 458: LD_ADDR_EXP 1
 462: PUSH
 463: LD_STRING JMM
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL 4983 0 2
 473: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 474: LD_ADDR_EXP 14
 478: PUSH
 479: LD_STRING Harisson
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 4983 0 2
 489: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING DeltaDoctor
 497: PPUSH
 498: CALL_OW 34
 502: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 21
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 58
 530: PUSH
 531: EMPTY
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PPUSH
 539: CALL_OW 69
 543: ST_TO_ADDR
// if veh > 0 then
 544: LD_VAR 0 2
 548: PUSH
 549: LD_INT 0
 551: GREATER
 552: IFFALSE 574
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 554: LD_EXP 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 52
// end else
 572: GO 589
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 574: LD_EXP 1
 578: PPUSH
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 589: LD_STRING LisaIn06
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: PUSH
 600: LD_INT 1
 602: EQUAL
 603: IFFALSE 707
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 58
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 646: LD_ADDR_EXP 2
 650: PUSH
 651: LD_STRING Lisa
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 4983 0 2
 661: ST_TO_ADDR
// if veh > 0 then
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 0
 669: GREATER
 670: IFFALSE 692
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 672: LD_EXP 2
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: CALL_OW 52
// end else
 690: GO 707
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 707: LD_STRING BobbyIn06
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 30
 717: PUSH
 718: LD_INT 1
 720: EQUAL
 721: IFFALSE 825
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 22
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: EMPTY
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING Bobby
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 4983 0 2
 779: ST_TO_ADDR
// if veh > 0 then
 780: LD_VAR 0 2
 784: PUSH
 785: LD_INT 0
 787: GREATER
 788: IFFALSE 810
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PPUSH
 804: CALL_OW 52
// end else
 808: GO 825
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 810: LD_EXP 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 825: LD_STRING CyrusIn06
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 943
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 58
 868: PUSH
 869: EMPTY
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 882: LD_ADDR_EXP 4
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 4983 0 2
 897: ST_TO_ADDR
// if veh > 0 then
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 0
 905: GREATER
 906: IFFALSE 928
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PPUSH
 922: CALL_OW 52
// end else
 926: GO 943
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 928: LD_EXP 4
 932: PPUSH
 933: LD_INT 2
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 943: LD_STRING FrankIn06
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 30
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 959: LD_ADDR_VAR 0 2
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1000: LD_ADDR_EXP 5
1004: PUSH
1005: LD_STRING Frank
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 4983 0 2
1015: ST_TO_ADDR
// if veh > 0 then
1016: LD_VAR 0 2
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: IFFALSE 1046
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1026: LD_EXP 5
1030: PPUSH
1031: LD_VAR 0 2
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PPUSH
1040: CALL_OW 52
// end else
1044: GO 1061
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1046: LD_EXP 5
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1061: LD_STRING BrownIn06
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1179
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 22
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 58
1104: PUSH
1105: EMPTY
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 69
1117: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1118: LD_ADDR_EXP 6
1122: PUSH
1123: LD_STRING Brown
1125: PPUSH
1126: LD_INT 1
1128: PPUSH
1129: CALL 4983 0 2
1133: ST_TO_ADDR
// if veh > 0 then
1134: LD_VAR 0 2
1138: PUSH
1139: LD_INT 0
1141: GREATER
1142: IFFALSE 1164
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1144: LD_EXP 6
1148: PPUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 52
// end else
1162: GO 1179
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1164: LD_EXP 6
1168: PPUSH
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1179: LD_STRING DonaldsonIn06
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 30
1189: PUSH
1190: LD_INT 1
1192: EQUAL
1193: IFFALSE 1297
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1236: LD_ADDR_EXP 7
1240: PUSH
1241: LD_STRING Donaldson
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 4983 0 2
1251: ST_TO_ADDR
// if veh > 0 then
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 0
1259: GREATER
1260: IFFALSE 1282
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1262: LD_EXP 7
1266: PPUSH
1267: LD_VAR 0 2
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 52
// end else
1280: GO 1297
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1282: LD_EXP 7
1286: PPUSH
1287: LD_INT 2
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1297: LD_STRING GladstoneIn06
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 30
1307: PUSH
1308: LD_INT 1
1310: EQUAL
1311: IFFALSE 1415
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_INT 22
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 21
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 58
1340: PUSH
1341: EMPTY
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 69
1353: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1354: LD_ADDR_EXP 8
1358: PUSH
1359: LD_STRING Gladstone
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL 4983 0 2
1369: ST_TO_ADDR
// if veh > 0 then
1370: LD_VAR 0 2
1374: PUSH
1375: LD_INT 0
1377: GREATER
1378: IFFALSE 1400
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// end else
1398: GO 1415
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 49
// end ; end ; end ;
1415: LD_VAR 0 1
1419: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1420: LD_INT 0
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_STRING 06_VehiclesIn06_1
1434: PPUSH
1435: EMPTY
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// uc_side = 1 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if vehicles > 0 then
1450: LD_VAR 0 5
1454: PUSH
1455: LD_INT 0
1457: GREATER
1458: IFFALSE 1676
// begin for i := 1 to vehicles do
1460: LD_ADDR_VAR 0 2
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 5
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1674
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_VAR 0 5
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: ARRAY
1513: PUSH
1514: LD_INT 2
1516: ARRAY
1517: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 3
1536: ARRAY
1537: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1538: LD_ADDR_OWVAR 38
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1558: LD_ADDR_OWVAR 40
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 5
1576: ARRAY
1577: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1578: LD_ADDR_OWVAR 41
1582: PUSH
1583: LD_INT 40
1585: ST_TO_ADDR
// veh = CreateVehicle ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: CALL_OW 45
1595: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1596: LD_VAR 0 4
1600: PPUSH
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1623: LD_OWVAR 40
1627: PUSH
1628: LD_INT 12
1630: EQUAL
1631: IFFALSE 1672
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 7
1666: ARRAY
1667: PPUSH
1668: CALL_OW 291
// end ;
1672: GO 1475
1674: POP
1675: POP
// end ; end ;
1676: LD_VAR 0 1
1680: RET
// export function PrepareOthers ; var i , veh ; begin
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
// uc_side = 1 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// uc_nation = 1 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1702: LD_ADDR_EXP 11
1706: PUSH
1707: LD_STRING OthersIn06
1709: PPUSH
1710: CALL_OW 31
1714: ST_TO_ADDR
// for i in others do
1715: LD_ADDR_VAR 0 2
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: FOR_IN
1726: IFFALSE 1816
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1728: LD_ADDR_VAR 0 3
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 21
1745: PUSH
1746: LD_INT 2
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 58
1755: PUSH
1756: EMPTY
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: ST_TO_ADDR
// if veh > 0 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1799
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1779: LD_VAR 0 2
1783: PPUSH
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 52
// end else
1797: GO 1814
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 2
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// end ; end ;
1814: GO 1725
1816: POP
1817: POP
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
// uc_side = 1 ;
1828: LD_ADDR_OWVAR 20
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// uc_nation = 0 ;
1836: LD_ADDR_OWVAR 21
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1844: LD_ADDR_EXP 12
1848: PUSH
1849: LD_STRING ApeIn06
1851: PPUSH
1852: CALL_OW 31
1856: ST_TO_ADDR
// for i in ape do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_EXP 12
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1887
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
1885: GO 1867
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 1
1893: RET
// export function PrepareDenis ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_STRING Denis
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL 4983 0 2
1928: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1929: LD_EXP 9
1933: PPUSH
1934: LD_INT 13
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1944: LD_EXP 9
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1956: LD_EXP 9
1960: PPUSH
1961: LD_INT 750
1963: PPUSH
1964: CALL_OW 234
// end ;
1968: LD_VAR 0 1
1972: RET
// export function HarrisonSupport ; var un , veh ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// uc_nation = 1 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// vc_engine = 1 ;
1994: LD_ADDR_OWVAR 39
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_control = 1 ;
2002: LD_ADDR_OWVAR 38
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2010: LD_ADDR_OWVAR 40
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_OWVAR 67
2033: ARRAY
2034: ST_TO_ADDR
// vc_chassis = 2 ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// veh = CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2080: LD_VAR 0 3
2084: PPUSH
2085: LD_INT 50
2087: PPUSH
2088: CALL_OW 240
// hc_class := 2 ;
2092: LD_ADDR_OWVAR 28
2096: PUSH
2097: LD_INT 2
2099: ST_TO_ADDR
// hc_sex := sex_male ;
2100: LD_ADDR_OWVAR 27
2104: PUSH
2105: LD_INT 1
2107: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2108: LD_ADDR_OWVAR 33
2112: PUSH
2113: LD_STRING SecondCharsGal
2115: ST_TO_ADDR
// hc_face_number := 52 ;
2116: LD_ADDR_OWVAR 34
2120: PUSH
2121: LD_INT 52
2123: ST_TO_ADDR
// hc_name := Craig Brown ;
2124: LD_ADDR_OWVAR 26
2128: PUSH
2129: LD_STRING Craig Brown
2131: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2132: LD_ADDR_OWVAR 29
2136: PUSH
2137: LD_INT 10
2139: PUSH
2140: LD_INT 10
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2147: LD_ADDR_OWVAR 30
2151: PUSH
2152: LD_INT 0
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: LD_INT 0
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2170: LD_ADDR_OWVAR 31
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: LD_INT 3
2180: PUSH
2181: LD_INT 0
2183: PUSH
2184: LD_INT 0
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: LIST
2191: LIST
2192: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2193: LD_ADDR_EXP 17
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2203: LD_EXP 17
2207: PPUSH
2208: LD_VAR 0 3
2212: PPUSH
2213: CALL_OW 52
// vc_engine = 1 ;
2217: LD_ADDR_OWVAR 39
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// vc_control = 1 ;
2225: LD_ADDR_OWVAR 38
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2233: LD_ADDR_OWVAR 40
2237: PUSH
2238: LD_INT 4
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: LD_INT 2
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_OWVAR 67
2256: ARRAY
2257: ST_TO_ADDR
// vc_chassis = 2 ;
2258: LD_ADDR_OWVAR 37
2262: PUSH
2263: LD_INT 2
2265: ST_TO_ADDR
// veh = CreateVehicle ;
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: CALL_OW 45
2275: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 2
2283: PPUSH
2284: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2288: LD_VAR 0 3
2292: PPUSH
2293: LD_INT 3
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2303: LD_VAR 0 3
2307: PPUSH
2308: LD_INT 50
2310: PPUSH
2311: CALL_OW 240
// hc_class := 1 ;
2315: LD_ADDR_OWVAR 28
2319: PUSH
2320: LD_INT 1
2322: ST_TO_ADDR
// hc_sex := sex_female ;
2323: LD_ADDR_OWVAR 27
2327: PUSH
2328: LD_INT 2
2330: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2331: LD_ADDR_OWVAR 33
2335: PUSH
2336: LD_STRING SecondCharsGal
2338: ST_TO_ADDR
// hc_face_number := 45 ;
2339: LD_ADDR_OWVAR 34
2343: PUSH
2344: LD_INT 45
2346: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2347: LD_ADDR_OWVAR 29
2351: PUSH
2352: LD_INT 11
2354: PUSH
2355: LD_INT 10
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2362: LD_ADDR_OWVAR 26
2366: PUSH
2367: LD_STRING Ingrid Jonsson
2369: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2370: LD_ADDR_OWVAR 30
2374: PUSH
2375: LD_INT 1
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 0
2383: PUSH
2384: LD_INT 0
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2393: LD_ADDR_OWVAR 31
2397: PUSH
2398: LD_INT 3
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: LD_INT 1
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2416: LD_ADDR_EXP 18
2420: PUSH
2421: CALL_OW 44
2425: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2426: LD_EXP 18
2430: PPUSH
2431: LD_VAR 0 3
2435: PPUSH
2436: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2440: LD_VAR 0 3
2444: PPUSH
2445: LD_INT 45
2447: PPUSH
2448: CALL_OW 240
// end ;
2452: LD_VAR 0 1
2456: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2457: LD_INT 0
2459: PPUSH
2460: PPUSH
2461: PPUSH
2462: PPUSH
2463: PPUSH
// j = 0 ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_INT 0
2471: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2472: LD_INT 35
2474: PPUSH
2475: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2479: LD_ADDR_VAR 0 2
2483: PUSH
2484: LD_INT 22
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 21
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 2
2506: PUSH
2507: LD_INT 25
2509: PUSH
2510: LD_INT 1
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 25
2519: PUSH
2520: LD_INT 2
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 25
2529: PUSH
2530: LD_INT 3
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 25
2539: PUSH
2540: LD_INT 4
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: PPUSH
2559: CALL_OW 69
2563: PUSH
2564: FOR_IN
2565: IFFALSE 2691
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2567: LD_INT 22
2569: PUSH
2570: LD_INT 3
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 2
2579: PUSH
2580: LD_INT 21
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PUSH
2590: LD_INT 21
2592: PUSH
2593: LD_INT 2
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 21
2602: PUSH
2603: LD_INT 3
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: LD_INT 59
2612: PUSH
2613: EMPTY
2614: LIST
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 91
2625: PUSH
2626: LD_VAR 0 2
2630: PUSH
2631: LD_INT 25
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: NOT
2649: PUSH
2650: LD_VAR 0 2
2654: PPUSH
2655: LD_EXP 1
2659: PPUSH
2660: CALL_OW 296
2664: PUSH
2665: LD_INT 15
2667: LESS
2668: AND
2669: IFFALSE 2689
// begin tmp = i ;
2671: LD_ADDR_VAR 0 4
2675: PUSH
2676: LD_VAR 0 2
2680: ST_TO_ADDR
// j = 1 ;
2681: LD_ADDR_VAR 0 3
2685: PUSH
2686: LD_INT 1
2688: ST_TO_ADDR
// end ; end ;
2689: GO 2564
2691: POP
2692: POP
// until j = 1 ;
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 1
2700: EQUAL
2701: IFFALSE 2472
// blockSpawn = 1 ;
2703: LD_ADDR_EXP 29
2707: PUSH
2708: LD_INT 1
2710: ST_TO_ADDR
// uc_side = 4 ;
2711: LD_ADDR_OWVAR 20
2715: PUSH
2716: LD_INT 4
2718: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2719: LD_ADDR_EXP 15
2723: PUSH
2724: LD_STRING Joan
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL 4983 0 2
2734: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2735: LD_EXP 15
2739: PPUSH
2740: LD_VAR 0 4
2744: PPUSH
2745: CALL_OW 250
2749: PPUSH
2750: LD_VAR 0 4
2754: PPUSH
2755: CALL_OW 251
2759: PPUSH
2760: LD_INT 5
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2770: LD_EXP 15
2774: PPUSH
2775: LD_INT 250
2777: PPUSH
2778: CALL_OW 234
// InGameOn ;
2782: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2786: LD_EXP 15
2790: PPUSH
2791: CALL_OW 87
// wait ( 0 0$2 ) ;
2795: LD_INT 70
2797: PPUSH
2798: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2802: LD_VAR 0 4
2806: PPUSH
2807: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2811: LD_VAR 0 4
2815: PPUSH
2816: CALL_OW 122
// wait ( 0 0$1 ) ;
2820: LD_INT 35
2822: PPUSH
2823: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2827: LD_VAR 0 4
2831: PPUSH
2832: LD_EXP 15
2836: PPUSH
2837: CALL_OW 112
// wait ( 0 0$2 ) ;
2841: LD_INT 70
2843: PPUSH
2844: CALL_OW 67
// DialogueOn ;
2848: CALL_OW 6
// if tmp = JMM then
2852: LD_VAR 0 4
2856: PUSH
2857: LD_EXP 1
2861: EQUAL
2862: IFFALSE 3011
// begin ComTurnUnit ( JMM , Joan ) ;
2864: LD_EXP 1
2868: PPUSH
2869: LD_EXP 15
2873: PPUSH
2874: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2878: LD_EXP 1
2882: PPUSH
2883: LD_STRING D5b-JMM-1
2885: PPUSH
2886: CALL_OW 88
// DialogueOff ;
2890: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2894: LD_EXP 15
2898: PPUSH
2899: LD_INT 500
2901: PPUSH
2902: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2906: LD_EXP 15
2910: PPUSH
2911: LD_EXP 1
2915: PPUSH
2916: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2920: LD_EXP 1
2924: PPUSH
2925: LD_EXP 15
2929: PPUSH
2930: CALL_OW 119
// wait ( 0 0$1 ) ;
2934: LD_INT 35
2936: PPUSH
2937: CALL_OW 67
// DialogueOn ;
2941: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_STRING D5b-Joan-1
2952: PPUSH
2953: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2957: LD_EXP 1
2961: PPUSH
2962: LD_STRING D5b-JMM-2
2964: PPUSH
2965: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2969: LD_EXP 15
2973: PPUSH
2974: LD_STRING D5b-Joan-2
2976: PPUSH
2977: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2981: LD_EXP 1
2985: PPUSH
2986: LD_STRING D5b-JMM-3
2988: PPUSH
2989: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2993: LD_EXP 15
2997: PPUSH
2998: LD_STRING D5b-Joan-3
3000: PPUSH
3001: CALL_OW 88
// DialogueOff ;
3005: CALL_OW 7
// end else
3009: GO 3346
// begin ComTurnUnit ( tmp , Joan ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_EXP 15
3020: PPUSH
3021: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_STRING D5a-Sol1-1
3032: PPUSH
3033: CALL_OW 88
// DialogueOff ;
3037: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3041: LD_EXP 15
3045: PPUSH
3046: LD_INT 500
3048: PPUSH
3049: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3053: LD_EXP 15
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3067: LD_VAR 0 4
3071: PPUSH
3072: LD_EXP 15
3076: PPUSH
3077: CALL_OW 119
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// DialogueOn ;
3088: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3092: LD_EXP 15
3096: PPUSH
3097: LD_STRING D5a-Joan-1
3099: PPUSH
3100: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_STRING D5a-Sol1-2
3111: PPUSH
3112: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_STRING D5a-Joan-2
3123: PPUSH
3124: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3128: LD_VAR 0 4
3132: PPUSH
3133: LD_STRING D5a-Sol1-3
3135: PPUSH
3136: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3140: LD_EXP 15
3144: PPUSH
3145: LD_STRING D5a-Joan-3
3147: PPUSH
3148: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_STRING D5a-Sol1-4
3159: PPUSH
3160: CALL_OW 88
// DialogueOff ;
3164: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3168: LD_EXP 1
3172: PPUSH
3173: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3177: LD_EXP 1
3181: PPUSH
3182: CALL_OW 122
// wait ( 0 0$1 ) ;
3186: LD_INT 35
3188: PPUSH
3189: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3193: LD_INT 35
3195: PPUSH
3196: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3200: LD_EXP 15
3204: PUSH
3205: LD_VAR 0 4
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: LD_EXP 1
3218: PPUSH
3219: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3223: LD_EXP 15
3227: PPUSH
3228: LD_EXP 1
3232: PPUSH
3233: CALL_OW 296
3237: PUSH
3238: LD_INT 5
3240: LESS
3241: IFFALSE 3193
// ComTurnUnit ( Joan , JMM ) ;
3243: LD_EXP 15
3247: PPUSH
3248: LD_EXP 1
3252: PPUSH
3253: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3257: LD_EXP 1
3261: PPUSH
3262: LD_EXP 15
3266: PPUSH
3267: CALL_OW 119
// wait ( 0 0$1 ) ;
3271: LD_INT 35
3273: PPUSH
3274: CALL_OW 67
// DialogueOn ;
3278: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3282: LD_EXP 15
3286: PPUSH
3287: LD_STRING D5a-Joan-4
3289: PPUSH
3290: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3294: LD_EXP 1
3298: PPUSH
3299: LD_STRING D5a-JMM-4
3301: PPUSH
3302: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3306: LD_EXP 15
3310: PPUSH
3311: LD_STRING D5a-Joan-5
3313: PPUSH
3314: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3318: LD_EXP 1
3322: PPUSH
3323: LD_STRING D5a-JMM-5
3325: PPUSH
3326: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3330: LD_EXP 15
3334: PPUSH
3335: LD_STRING D5a-Joan-6
3337: PPUSH
3338: CALL_OW 88
// DialogueOff ;
3342: CALL_OW 7
// end ; DialogueOn ;
3346: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3350: LD_EXP 1
3354: PPUSH
3355: LD_STRING D6-JMM-1
3357: PPUSH
3358: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3362: LD_EXP 15
3366: PPUSH
3367: LD_STRING D6-Joan-1
3369: PPUSH
3370: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3374: LD_EXP 1
3378: PPUSH
3379: LD_STRING D6-JMM-2
3381: PPUSH
3382: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3386: LD_EXP 15
3390: PPUSH
3391: LD_STRING D6-Joan-2
3393: PPUSH
3394: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3398: LD_EXP 1
3402: PPUSH
3403: LD_STRING D6-JMM-3
3405: PPUSH
3406: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3410: LD_EXP 15
3414: PPUSH
3415: LD_STRING D6-Joan-3
3417: PPUSH
3418: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3422: LD_EXP 1
3426: PPUSH
3427: LD_STRING D6-JMM-4
3429: PPUSH
3430: CALL_OW 88
// DialogueOff ;
3434: CALL_OW 7
// InGameOff ;
3438: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3442: LD_EXP 15
3446: PPUSH
3447: LD_INT 1
3449: PPUSH
3450: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3454: LD_STRING MJ
3456: PPUSH
3457: CALL_OW 337
// JoanStatus = 1 ;
3461: LD_ADDR_EXP 16
3465: PUSH
3466: LD_INT 1
3468: ST_TO_ADDR
// blockSpawn = 0 ;
3469: LD_ADDR_EXP 29
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// end ;
3477: LD_VAR 0 1
3481: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
// repeat wait ( 0 0$7 ) ;
3486: LD_INT 245
3488: PPUSH
3489: CALL_OW 67
// until blockSpawn = 0 ;
3493: LD_EXP 29
3497: PUSH
3498: LD_INT 0
3500: EQUAL
3501: IFFALSE 3486
// uc_side = 1 ;
3503: LD_ADDR_OWVAR 20
3507: PUSH
3508: LD_INT 1
3510: ST_TO_ADDR
// uc_nation = 1 ;
3511: LD_ADDR_OWVAR 21
3515: PUSH
3516: LD_INT 1
3518: ST_TO_ADDR
// InitHc ;
3519: CALL_OW 19
// if number = 1 then
3523: LD_VAR 0 1
3527: PUSH
3528: LD_INT 1
3530: EQUAL
3531: IFFALSE 3707
// begin hc_class := 1 ;
3533: LD_ADDR_OWVAR 28
3537: PUSH
3538: LD_INT 1
3540: ST_TO_ADDR
// hc_sex := sex_male ;
3541: LD_ADDR_OWVAR 27
3545: PUSH
3546: LD_INT 1
3548: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3549: LD_ADDR_OWVAR 33
3553: PUSH
3554: LD_STRING AmGalRemake
3556: ST_TO_ADDR
// hc_face_number := 7 ;
3557: LD_ADDR_OWVAR 34
3561: PUSH
3562: LD_INT 7
3564: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3565: LD_ADDR_OWVAR 26
3569: PUSH
3570: LD_STRING Bobby Jordan
3572: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3573: LD_ADDR_OWVAR 29
3577: PUSH
3578: LD_INT 9
3580: PUSH
3581: LD_INT 11
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3588: LD_ADDR_OWVAR 30
3592: PUSH
3593: LD_INT 1
3595: PUSH
3596: LD_INT 0
3598: PUSH
3599: LD_INT 0
3601: PUSH
3602: LD_INT 1
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3611: LD_ADDR_OWVAR 31
3615: PUSH
3616: LD_INT 2
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: LD_INT 1
3624: PUSH
3625: LD_INT 1
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: ST_TO_ADDR
// un = CreateHuman ;
3634: LD_ADDR_VAR 0 3
3638: PUSH
3639: CALL_OW 44
3643: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3644: LD_VAR 0 3
3648: PPUSH
3649: LD_INT 12
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: CALL_OW 49
// wait ( 0 0$1 ) ;
3659: LD_INT 35
3661: PPUSH
3662: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3666: LD_VAR 0 3
3670: PPUSH
3671: CALL_OW 87
// DialogueOn ;
3675: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_STRING D11b-Sol3-1
3686: PPUSH
3687: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3691: LD_EXP 1
3695: PPUSH
3696: LD_STRING D11b-JMM-1
3698: PPUSH
3699: CALL_OW 88
// DialogueOff ;
3703: CALL_OW 7
// end ; if number = 2 then
3707: LD_VAR 0 1
3711: PUSH
3712: LD_INT 2
3714: EQUAL
3715: IFFALSE 3891
// begin hc_class := 3 ;
3717: LD_ADDR_OWVAR 28
3721: PUSH
3722: LD_INT 3
3724: ST_TO_ADDR
// hc_sex := sex_male ;
3725: LD_ADDR_OWVAR 27
3729: PUSH
3730: LD_INT 1
3732: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3733: LD_ADDR_OWVAR 33
3737: PUSH
3738: LD_STRING SecondCharsGal
3740: ST_TO_ADDR
// hc_face_number := 55 ;
3741: LD_ADDR_OWVAR 34
3745: PUSH
3746: LD_INT 55
3748: ST_TO_ADDR
// hc_name := George McCarthy ;
3749: LD_ADDR_OWVAR 26
3753: PUSH
3754: LD_STRING George McCarthy
3756: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3757: LD_ADDR_OWVAR 29
3761: PUSH
3762: LD_INT 11
3764: PUSH
3765: LD_INT 10
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3772: LD_ADDR_OWVAR 30
3776: PUSH
3777: LD_INT 0
3779: PUSH
3780: LD_INT 0
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: LD_INT 0
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3795: LD_ADDR_OWVAR 31
3799: PUSH
3800: LD_INT 1
3802: PUSH
3803: LD_INT 2
3805: PUSH
3806: LD_INT 3
3808: PUSH
3809: LD_INT 1
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: ST_TO_ADDR
// un = CreateHuman ;
3818: LD_ADDR_VAR 0 3
3822: PUSH
3823: CALL_OW 44
3827: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3828: LD_VAR 0 3
3832: PPUSH
3833: LD_INT 12
3835: PPUSH
3836: LD_INT 1
3838: PPUSH
3839: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3843: LD_VAR 0 3
3847: PPUSH
3848: CALL_OW 87
// wait ( 0 0$1 ) ;
3852: LD_INT 35
3854: PPUSH
3855: CALL_OW 67
// DialogueOn ;
3859: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3863: LD_VAR 0 3
3867: PPUSH
3868: LD_STRING D11d-Sol4-1
3870: PPUSH
3871: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3875: LD_EXP 1
3879: PPUSH
3880: LD_STRING D11d-JMM-1
3882: PPUSH
3883: CALL_OW 88
// DialogueOff ;
3887: CALL_OW 7
// end ; if number = 4 then
3891: LD_VAR 0 1
3895: PUSH
3896: LD_INT 4
3898: EQUAL
3899: IFFALSE 4063
// begin hc_class := 3 ;
3901: LD_ADDR_OWVAR 28
3905: PUSH
3906: LD_INT 3
3908: ST_TO_ADDR
// hc_sex := sex_female ;
3909: LD_ADDR_OWVAR 27
3913: PUSH
3914: LD_INT 2
3916: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3917: LD_ADDR_OWVAR 33
3921: PUSH
3922: LD_STRING SecondCharsGal
3924: ST_TO_ADDR
// hc_face_number := 46 ;
3925: LD_ADDR_OWVAR 34
3929: PUSH
3930: LD_INT 46
3932: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING Sylvia Creak
3940: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
3941: LD_ADDR_OWVAR 29
3945: PUSH
3946: LD_INT 10
3948: PUSH
3949: LD_INT 9
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
3956: LD_ADDR_OWVAR 30
3960: PUSH
3961: LD_INT 0
3963: PUSH
3964: LD_INT 1
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3979: LD_ADDR_OWVAR 31
3983: PUSH
3984: LD_INT 1
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 1
3992: PUSH
3993: LD_INT 1
3995: PUSH
3996: EMPTY
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: ST_TO_ADDR
// un = CreateHuman ;
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4012: LD_VAR 0 3
4016: PPUSH
4017: LD_INT 12
4019: PPUSH
4020: LD_INT 1
4022: PPUSH
4023: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4027: LD_VAR 0 3
4031: PPUSH
4032: CALL_OW 87
// wait ( 0 0$1 ) ;
4036: LD_INT 35
4038: PPUSH
4039: CALL_OW 67
// DialogueOn ;
4043: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_STRING D11e-FSol4-1
4054: PPUSH
4055: CALL_OW 88
// DialogueOff ;
4059: CALL_OW 7
// end ; if number = 5 then
4063: LD_VAR 0 1
4067: PUSH
4068: LD_INT 5
4070: EQUAL
4071: IFFALSE 4247
// begin hc_class := 1 ;
4073: LD_ADDR_OWVAR 28
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// hc_sex := sex_female ;
4081: LD_ADDR_OWVAR 27
4085: PUSH
4086: LD_INT 2
4088: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4089: LD_ADDR_OWVAR 33
4093: PUSH
4094: LD_STRING SecondCharsGal
4096: ST_TO_ADDR
// hc_face_number := 37 ;
4097: LD_ADDR_OWVAR 34
4101: PUSH
4102: LD_INT 37
4104: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4105: LD_ADDR_OWVAR 26
4109: PUSH
4110: LD_STRING Margherite Simpson
4112: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4113: LD_ADDR_OWVAR 29
4117: PUSH
4118: LD_INT 11
4120: PUSH
4121: LD_INT 10
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4128: LD_ADDR_OWVAR 30
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: LD_INT 1
4138: PUSH
4139: LD_INT 0
4141: PUSH
4142: LD_INT 0
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4151: LD_ADDR_OWVAR 31
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: LD_INT 1
4161: PUSH
4162: LD_INT 1
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: ST_TO_ADDR
// un = CreateHuman ;
4174: LD_ADDR_VAR 0 3
4178: PUSH
4179: CALL_OW 44
4183: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4184: LD_VAR 0 3
4188: PPUSH
4189: LD_INT 12
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: CALL_OW 87
// wait ( 0 0$1 ) ;
4208: LD_INT 35
4210: PPUSH
4211: CALL_OW 67
// DialogueOn ;
4215: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4219: LD_VAR 0 3
4223: PPUSH
4224: LD_STRING D11c-FSol3-1
4226: PPUSH
4227: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4231: LD_EXP 1
4235: PPUSH
4236: LD_STRING D11c-JMM-1
4238: PPUSH
4239: CALL_OW 88
// DialogueOff ;
4243: CALL_OW 7
// end ; if number = 6 then
4247: LD_VAR 0 1
4251: PUSH
4252: LD_INT 6
4254: EQUAL
4255: IFFALSE 4429
// begin hc_class := 1 ;
4257: LD_ADDR_OWVAR 28
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// hc_sex := sex_male ;
4265: LD_ADDR_OWVAR 27
4269: PUSH
4270: LD_INT 1
4272: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4273: LD_ADDR_OWVAR 33
4277: PUSH
4278: LD_STRING AmGalRemake
4280: ST_TO_ADDR
// hc_face_number := 1 ;
4281: LD_ADDR_OWVAR 34
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// hc_name := Charles Brown ;
4289: LD_ADDR_OWVAR 26
4293: PUSH
4294: LD_STRING Charles Brown
4296: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4297: LD_ADDR_OWVAR 29
4301: PUSH
4302: LD_INT 12
4304: PUSH
4305: LD_INT 11
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4312: LD_ADDR_OWVAR 30
4316: PUSH
4317: LD_INT 2
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4335: LD_ADDR_OWVAR 31
4339: PUSH
4340: LD_INT 3
4342: PUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 1
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: ST_TO_ADDR
// un = CreateHuman ;
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: CALL_OW 44
4367: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4368: LD_VAR 0 3
4372: PPUSH
4373: LD_INT 12
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 87
// wait ( 0 0$1 ) ;
4392: LD_INT 35
4394: PPUSH
4395: CALL_OW 67
// DialogueOn ;
4399: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_STRING D4-Sol1-5
4410: PPUSH
4411: CALL_OW 88
// DialogueOff ;
4415: CALL_OW 7
// tempCharles = un ;
4419: LD_ADDR_EXP 13
4423: PUSH
4424: LD_VAR 0 3
4428: ST_TO_ADDR
// end ; if number = 7 then
4429: LD_VAR 0 1
4433: PUSH
4434: LD_INT 7
4436: EQUAL
4437: IFFALSE 4601
// begin hc_class := 1 ;
4439: LD_ADDR_OWVAR 28
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// hc_sex := sex_female ;
4447: LD_ADDR_OWVAR 27
4451: PUSH
4452: LD_INT 2
4454: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4455: LD_ADDR_OWVAR 33
4459: PUSH
4460: LD_STRING AmGalRemake
4462: ST_TO_ADDR
// hc_face_number := 2 ;
4463: LD_ADDR_OWVAR 34
4467: PUSH
4468: LD_INT 2
4470: ST_TO_ADDR
// hc_name := Johanna Holland ;
4471: LD_ADDR_OWVAR 26
4475: PUSH
4476: LD_STRING Johanna Holland
4478: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4479: LD_ADDR_OWVAR 29
4483: PUSH
4484: LD_INT 10
4486: PUSH
4487: LD_INT 10
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4494: LD_ADDR_OWVAR 30
4498: PUSH
4499: LD_INT 1
4501: PUSH
4502: LD_INT 0
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 1
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4517: LD_ADDR_OWVAR 31
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: LD_INT 0
4527: PUSH
4528: LD_INT 0
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: ST_TO_ADDR
// un = CreateHuman ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: CALL_OW 44
4549: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4550: LD_VAR 0 3
4554: PPUSH
4555: LD_INT 12
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4565: LD_VAR 0 3
4569: PPUSH
4570: CALL_OW 87
// wait ( 0 0$1 ) ;
4574: LD_INT 35
4576: PPUSH
4577: CALL_OW 67
// DialogueOn ;
4581: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4585: LD_VAR 0 3
4589: PPUSH
4590: LD_STRING D11a-FSol2-1
4592: PPUSH
4593: CALL_OW 88
// DialogueOff ;
4597: CALL_OW 7
// end ; end ; end_of_file
4601: LD_VAR 0 2
4605: RET
// export function PrepareRussian ; var i ; begin
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4610: LD_INT 3
4612: PPUSH
4613: LD_INT 3
4615: PPUSH
4616: LD_INT 2
4618: PPUSH
4619: LD_EXP 34
4623: PPUSH
4624: LD_EXP 35
4628: PPUSH
4629: CALL_OW 12
4633: PPUSH
4634: LD_INT 2
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: CALL 5253 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4644: LD_INT 3
4646: PPUSH
4647: LD_INT 3
4649: PPUSH
4650: LD_INT 8
4652: PPUSH
4653: LD_EXP 34
4657: PPUSH
4658: LD_EXP 35
4662: PPUSH
4663: CALL_OW 12
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_INT 4
4673: PPUSH
4674: CALL 5253 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4678: LD_INT 3
4680: PPUSH
4681: LD_INT 3
4683: PPUSH
4684: LD_INT 67
4686: PPUSH
4687: LD_EXP 34
4691: PPUSH
4692: LD_EXP 35
4696: PPUSH
4697: CALL_OW 12
4701: PPUSH
4702: LD_INT 1
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL 5253 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4712: LD_INT 3
4714: PPUSH
4715: LD_INT 3
4717: PPUSH
4718: LD_INT 21
4720: PPUSH
4721: LD_EXP 34
4725: PPUSH
4726: LD_EXP 35
4730: PPUSH
4731: CALL_OW 12
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: LD_INT 6
4741: PPUSH
4742: CALL 5253 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 17
4754: PPUSH
4755: LD_EXP 34
4759: PPUSH
4760: LD_EXP 35
4764: PPUSH
4765: CALL_OW 12
4769: PPUSH
4770: LD_INT 3
4772: PPUSH
4773: LD_INT 6
4775: PPUSH
4776: CALL 5253 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4780: LD_INT 3
4782: PPUSH
4783: LD_INT 3
4785: PPUSH
4786: LD_INT 32
4788: PPUSH
4789: LD_EXP 34
4793: PPUSH
4794: LD_EXP 35
4798: PPUSH
4799: CALL_OW 12
4803: PPUSH
4804: LD_INT 4
4806: PPUSH
4807: LD_INT 2
4809: PPUSH
4810: CALL 5253 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4814: LD_ADDR_VAR 0 2
4818: PUSH
4819: LD_INT 22
4821: PUSH
4822: LD_INT 3
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: PUSH
4829: LD_INT 21
4831: PUSH
4832: LD_INT 3
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 32
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PPUSH
4854: CALL_OW 69
4858: PUSH
4859: FOR_IN
4860: IFFALSE 4900
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4862: LD_INT 3
4864: PPUSH
4865: LD_INT 3
4867: PPUSH
4868: LD_VAR 0 2
4872: PPUSH
4873: LD_EXP 34
4877: PPUSH
4878: LD_EXP 35
4882: PPUSH
4883: CALL_OW 12
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: LD_INT 1
4893: PPUSH
4894: CALL 5253 0 6
4898: GO 4859
4900: POP
4901: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 3
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 21
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 69
4946: PUSH
4947: FOR_IN
4948: IFFALSE 4976
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4950: LD_EXP 34
4954: PPUSH
4955: LD_EXP 35
4959: PPUSH
4960: CALL_OW 12
4964: PPUSH
4965: LD_VAR 0 2
4969: PPUSH
4970: CALL 5363 0 2
4974: GO 4947
4976: POP
4977: POP
// end ; end_of_file
4978: LD_VAR 0 1
4982: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4983: LD_INT 0
4985: PPUSH
4986: PPUSH
// if exist_mode then
4987: LD_VAR 0 2
4991: IFFALSE 5016
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4993: LD_ADDR_VAR 0 4
4997: PUSH
4998: LD_EXP 42
5002: PUSH
5003: LD_VAR 0 1
5007: STR
5008: PPUSH
5009: CALL_OW 34
5013: ST_TO_ADDR
// end else
5014: GO 5031
// begin unit := NewCharacter ( ident ) ;
5016: LD_ADDR_VAR 0 4
5020: PUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 25
5030: ST_TO_ADDR
// end ; result := unit ;
5031: LD_ADDR_VAR 0 3
5035: PUSH
5036: LD_VAR 0 4
5040: ST_TO_ADDR
// end ;
5041: LD_VAR 0 3
5045: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5046: LD_INT 0
5048: PPUSH
5049: PPUSH
5050: PPUSH
// rnd = rand ( 1 , characters ) ;
5051: LD_ADDR_VAR 0 6
5055: PUSH
5056: LD_INT 1
5058: PPUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 12
5068: ST_TO_ADDR
// for i = 1 to characters do
5069: LD_ADDR_VAR 0 5
5073: PUSH
5074: DOUBLE
5075: LD_INT 1
5077: DEC
5078: ST_TO_ADDR
5079: LD_VAR 0 1
5083: PUSH
5084: FOR_TO
5085: IFFALSE 5195
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5087: LD_VAR 0 5
5091: PUSH
5092: LD_VAR 0 6
5096: EQUAL
5097: PUSH
5098: LD_VAR 0 1
5102: PUSH
5103: LD_VAR 0 5
5107: ARRAY
5108: PPUSH
5109: CALL_OW 258
5113: PUSH
5114: LD_INT 1
5116: EQUAL
5117: AND
5118: IFFALSE 5140
// Say ( characters [ i ] , dialogMID ) ;
5120: LD_VAR 0 1
5124: PUSH
5125: LD_VAR 0 5
5129: ARRAY
5130: PPUSH
5131: LD_VAR 0 2
5135: PPUSH
5136: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5140: LD_VAR 0 5
5144: PUSH
5145: LD_VAR 0 6
5149: EQUAL
5150: PUSH
5151: LD_VAR 0 1
5155: PUSH
5156: LD_VAR 0 5
5160: ARRAY
5161: PPUSH
5162: CALL_OW 258
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: AND
5171: IFFALSE 5193
// Say ( characters [ i ] , dialogFID ) ;
5173: LD_VAR 0 1
5177: PUSH
5178: LD_VAR 0 5
5182: ARRAY
5183: PPUSH
5184: LD_VAR 0 3
5188: PPUSH
5189: CALL_OW 88
// end ;
5193: GO 5084
5195: POP
5196: POP
// end ;
5197: LD_VAR 0 4
5201: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5202: LD_INT 0
5204: PPUSH
5205: PPUSH
// for i in charactersList do
5206: LD_ADDR_VAR 0 4
5210: PUSH
5211: LD_VAR 0 1
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5246
// begin if IsOk ( i ) then
5219: LD_VAR 0 4
5223: PPUSH
5224: CALL_OW 302
5228: IFFALSE 5244
// SaveCharacters ( i , ident ) ;
5230: LD_VAR 0 4
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: CALL_OW 38
// end ;
5244: GO 5216
5246: POP
5247: POP
// end ;
5248: LD_VAR 0 3
5252: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5253: LD_INT 0
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
// for i = 1 to count do
5259: LD_ADDR_VAR 0 8
5263: PUSH
5264: DOUBLE
5265: LD_INT 1
5267: DEC
5268: ST_TO_ADDR
5269: LD_VAR 0 6
5273: PUSH
5274: FOR_TO
5275: IFFALSE 5356
// begin uc_side = side ;
5277: LD_ADDR_OWVAR 20
5281: PUSH
5282: LD_VAR 0 1
5286: ST_TO_ADDR
// uc_nation = nation ;
5287: LD_ADDR_OWVAR 21
5291: PUSH
5292: LD_VAR 0 2
5296: ST_TO_ADDR
// hc_gallery =  ;
5297: LD_ADDR_OWVAR 33
5301: PUSH
5302: LD_STRING 
5304: ST_TO_ADDR
// hc_name =  ;
5305: LD_ADDR_OWVAR 26
5309: PUSH
5310: LD_STRING 
5312: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5313: LD_INT 0
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: LD_VAR 0 4
5325: PPUSH
5326: CALL_OW 380
// un = CreateHuman ;
5330: LD_ADDR_VAR 0 10
5334: PUSH
5335: CALL_OW 44
5339: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5340: LD_VAR 0 10
5344: PPUSH
5345: LD_VAR 0 3
5349: PPUSH
5350: CALL_OW 52
// end ;
5354: GO 5274
5356: POP
5357: POP
// end ;
5358: LD_VAR 0 7
5362: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5363: LD_INT 0
5365: PPUSH
5366: PPUSH
5367: PPUSH
// uc_side := GetSide ( b ) ;
5368: LD_ADDR_OWVAR 20
5372: PUSH
5373: LD_VAR 0 2
5377: PPUSH
5378: CALL_OW 255
5382: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5383: LD_ADDR_OWVAR 21
5387: PUSH
5388: LD_VAR 0 2
5392: PPUSH
5393: CALL_OW 248
5397: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5398: LD_INT 0
5400: PPUSH
5401: LD_INT 1
5403: PPUSH
5404: LD_VAR 0 1
5408: PPUSH
5409: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5413: LD_ADDR_VAR 0 5
5417: PUSH
5418: LD_VAR 0 2
5422: PPUSH
5423: CALL_OW 254
5427: PUSH
5428: LD_INT 3
5430: MINUS
5431: ST_TO_ADDR
// if dir < 0 then
5432: LD_VAR 0 5
5436: PUSH
5437: LD_INT 0
5439: LESS
5440: IFFALSE 5456
// dir := 6 + dir ;
5442: LD_ADDR_VAR 0 5
5446: PUSH
5447: LD_INT 6
5449: PUSH
5450: LD_VAR 0 5
5454: PLUS
5455: ST_TO_ADDR
// un := CreateHuman ;
5456: LD_ADDR_VAR 0 4
5460: PUSH
5461: CALL_OW 44
5465: ST_TO_ADDR
// SetDir ( un , dir ) ;
5466: LD_VAR 0 4
5470: PPUSH
5471: LD_VAR 0 5
5475: PPUSH
5476: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5480: LD_VAR 0 4
5484: PPUSH
5485: LD_VAR 0 2
5489: PPUSH
5490: CALL_OW 52
// end ;
5494: LD_VAR 0 3
5498: RET
// export function PrepareDifficulty ; begin
5499: LD_INT 0
5501: PPUSH
// if Difficulty = 1 then
5502: LD_OWVAR 67
5506: PUSH
5507: LD_INT 1
5509: EQUAL
5510: IFFALSE 5528
// begin RuSolMinLevel = 3 ;
5512: LD_ADDR_EXP 34
5516: PUSH
5517: LD_INT 3
5519: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5520: LD_ADDR_EXP 35
5524: PUSH
5525: LD_INT 6
5527: ST_TO_ADDR
// end ; if Difficulty = 2 then
5528: LD_OWVAR 67
5532: PUSH
5533: LD_INT 2
5535: EQUAL
5536: IFFALSE 5554
// begin RuSolMinLevel = 5 ;
5538: LD_ADDR_EXP 34
5542: PUSH
5543: LD_INT 5
5545: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5546: LD_ADDR_EXP 35
5550: PUSH
5551: LD_INT 6
5553: ST_TO_ADDR
// end ; if Difficulty = 3 then
5554: LD_OWVAR 67
5558: PUSH
5559: LD_INT 3
5561: EQUAL
5562: IFFALSE 5580
// begin RuSolMinLevel = 5 ;
5564: LD_ADDR_EXP 34
5568: PUSH
5569: LD_INT 5
5571: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5572: LD_ADDR_EXP 35
5576: PUSH
5577: LD_INT 7
5579: ST_TO_ADDR
// end ; end ;
5580: LD_VAR 0 1
5584: RET
// export function ShowQuery1 ; begin
5585: LD_INT 0
5587: PPUSH
// case query ( QKill ) of 1 :
5588: LD_STRING QKill
5590: PPUSH
5591: CALL_OW 97
5595: PUSH
5596: LD_INT 1
5598: DOUBLE
5599: EQUAL
5600: IFTRUE 5604
5602: GO 5615
5604: POP
// begin result = 1 ;
5605: LD_ADDR_VAR 0 1
5609: PUSH
5610: LD_INT 1
5612: ST_TO_ADDR
// end ; 2 :
5613: GO 5654
5615: LD_INT 2
5617: DOUBLE
5618: EQUAL
5619: IFTRUE 5623
5621: GO 5634
5623: POP
// begin result = 2 ;
5624: LD_ADDR_VAR 0 1
5628: PUSH
5629: LD_INT 2
5631: ST_TO_ADDR
// end ; 3 :
5632: GO 5654
5634: LD_INT 3
5636: DOUBLE
5637: EQUAL
5638: IFTRUE 5642
5640: GO 5653
5642: POP
// begin result = 3 ;
5643: LD_ADDR_VAR 0 1
5647: PUSH
5648: LD_INT 3
5650: ST_TO_ADDR
// end ; end ;
5651: GO 5654
5653: POP
// end ;
5654: LD_VAR 0 1
5658: RET
// export function ShowQuery2 ; begin
5659: LD_INT 0
5661: PPUSH
// case query ( QKill2 ) of 1 :
5662: LD_STRING QKill2
5664: PPUSH
5665: CALL_OW 97
5669: PUSH
5670: LD_INT 1
5672: DOUBLE
5673: EQUAL
5674: IFTRUE 5678
5676: GO 5689
5678: POP
// begin result = 1 ;
5679: LD_ADDR_VAR 0 1
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// end ; 2 :
5687: GO 5709
5689: LD_INT 2
5691: DOUBLE
5692: EQUAL
5693: IFTRUE 5697
5695: GO 5708
5697: POP
// begin result = 2 ;
5698: LD_ADDR_VAR 0 1
5702: PUSH
5703: LD_INT 2
5705: ST_TO_ADDR
// end ; end ;
5706: GO 5709
5708: POP
// end ;
5709: LD_VAR 0 1
5713: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5714: LD_INT 0
5716: PPUSH
5717: PPUSH
5718: PPUSH
5719: PPUSH
// for i = 1 to 72 do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_INT 72
5732: PUSH
5733: FOR_TO
5734: IFFALSE 5792
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5736: LD_VAR 0 5
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL_OW 321
5750: PUSH
5751: LD_INT 1
5753: EQUAL
5754: PUSH
5755: LD_VAR 0 5
5759: PPUSH
5760: LD_VAR 0 3
5764: PPUSH
5765: CALL_OW 482
5769: PUSH
5770: LD_INT 1
5772: EQUAL
5773: AND
5774: IFFALSE 5790
// AddComResearch ( lab , i ) ;
5776: LD_VAR 0 2
5780: PPUSH
5781: LD_VAR 0 5
5785: PPUSH
5786: CALL_OW 184
5790: GO 5733
5792: POP
5793: POP
// end ;
5794: LD_VAR 0 4
5798: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5799: LD_INT 0
5801: PPUSH
5802: PPUSH
5803: PPUSH
5804: PPUSH
5805: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5806: LD_ADDR_VAR 0 6
5810: PUSH
5811: LD_INT 22
5813: PUSH
5814: LD_VAR 0 1
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: LD_INT 2
5825: PUSH
5826: LD_INT 25
5828: PUSH
5829: LD_INT 2
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: LD_INT 25
5838: PUSH
5839: LD_INT 16
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 24
5853: PUSH
5854: LD_INT 1000
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: PPUSH
5866: CALL_OW 69
5870: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5871: LD_ADDR_VAR 0 4
5875: PUSH
5876: LD_INT 22
5878: PUSH
5879: LD_VAR 0 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 3
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PUSH
5920: EMPTY
5921: LIST
5922: PPUSH
5923: CALL_OW 69
5927: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5928: LD_VAR 0 4
5932: PUSH
5933: LD_INT 0
5935: GREATER
5936: PUSH
5937: LD_VAR 0 6
5941: PUSH
5942: LD_INT 0
5944: GREATER
5945: AND
5946: IFFALSE 6012
// begin for i in engineerOk_list do
5948: LD_ADDR_VAR 0 5
5952: PUSH
5953: LD_VAR 0 6
5957: PUSH
5958: FOR_IN
5959: IFFALSE 6010
// begin for j in buildings_list do
5961: LD_ADDR_VAR 0 7
5965: PUSH
5966: LD_VAR 0 4
5970: PUSH
5971: FOR_IN
5972: IFFALSE 6006
// begin AddComExitBuilding ( i ) ;
5974: LD_VAR 0 5
5978: PPUSH
5979: CALL_OW 182
// wait ( 0 0$1 ) ;
5983: LD_INT 35
5985: PPUSH
5986: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5990: LD_VAR 0 5
5994: PPUSH
5995: LD_VAR 0 7
5999: PPUSH
6000: CALL_OW 190
// end ;
6004: GO 5971
6006: POP
6007: POP
// end ;
6008: GO 5958
6010: POP
6011: POP
// end ; if buildings_list = 0 then
6012: LD_VAR 0 4
6016: PUSH
6017: LD_INT 0
6019: EQUAL
6020: IFFALSE 6053
// begin for i in engineerOK_list do
6022: LD_ADDR_VAR 0 5
6026: PUSH
6027: LD_VAR 0 6
6031: PUSH
6032: FOR_IN
6033: IFFALSE 6051
// begin ComEnterUnit ( i , building ) ;
6035: LD_VAR 0 5
6039: PPUSH
6040: LD_VAR 0 2
6044: PPUSH
6045: CALL_OW 120
// end ;
6049: GO 6032
6051: POP
6052: POP
// end ; end ;
6053: LD_VAR 0 3
6057: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6065: LD_ADDR_VAR 0 6
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_VAR 0 1
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 4
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 69
6100: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6101: LD_ADDR_VAR 0 9
6105: PUSH
6106: LD_VAR 0 3
6110: PPUSH
6111: LD_INT 22
6113: PUSH
6114: LD_VAR 0 1
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 21
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: LD_INT 25
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: LD_INT 24
6155: PUSH
6156: LD_INT 750
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: PPUSH
6173: CALL_OW 70
6177: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6178: LD_VAR 0 9
6182: PUSH
6183: LD_INT 0
6185: GREATER
6186: PUSH
6187: LD_VAR 0 6
6191: PUSH
6192: LD_INT 0
6194: GREATER
6195: AND
6196: IFFALSE 6323
// begin for i = 1 to damageUnits do
6198: LD_ADDR_VAR 0 7
6202: PUSH
6203: DOUBLE
6204: LD_INT 1
6206: DEC
6207: ST_TO_ADDR
6208: LD_VAR 0 9
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6238
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6216: LD_VAR 0 9
6220: PUSH
6221: LD_VAR 0 7
6225: ARRAY
6226: PPUSH
6227: LD_VAR 0 2
6231: PPUSH
6232: CALL_OW 113
6236: GO 6213
6238: POP
6239: POP
// for i in sci_list do
6240: LD_ADDR_VAR 0 7
6244: PUSH
6245: LD_VAR 0 6
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6319
// begin ComExitBuilding ( i ) ;
6253: LD_VAR 0 7
6257: PPUSH
6258: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6262: LD_ADDR_VAR 0 8
6266: PUSH
6267: LD_VAR 0 2
6271: PPUSH
6272: LD_INT 22
6274: PUSH
6275: LD_VAR 0 1
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PPUSH
6284: CALL_OW 70
6288: PUSH
6289: FOR_IN
6290: IFFALSE 6315
// begin AddComHeal ( i , j ) ;
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 8
6301: PPUSH
6302: CALL_OW 188
// wait ( 1 1$0 ) ;
6306: LD_INT 2100
6308: PPUSH
6309: CALL_OW 67
// end ;
6313: GO 6289
6315: POP
6316: POP
// end ;
6317: GO 6250
6319: POP
6320: POP
// end else
6321: GO 6337
// begin AddComEnterUnit ( sci_list , build ) ;
6323: LD_VAR 0 6
6327: PPUSH
6328: LD_VAR 0 4
6332: PPUSH
6333: CALL_OW 180
// end ; end ;
6337: LD_VAR 0 5
6341: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6347: LD_INT 22
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL_OW 69
6377: PUSH
6378: LD_VAR 0 3
6382: LESSEQUAL
6383: IFFALSE 6491
// begin for i = 1 to vehCount do
6385: LD_ADDR_VAR 0 9
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_VAR 0 3
6399: PUSH
6400: FOR_TO
6401: IFFALSE 6489
// begin weapon = weaponTab [ i ] ;
6403: LD_ADDR_VAR 0 10
6407: PUSH
6408: LD_VAR 0 4
6412: PUSH
6413: LD_VAR 0 9
6417: ARRAY
6418: ST_TO_ADDR
// if weapon = 46 then
6419: LD_VAR 0 10
6423: PUSH
6424: LD_INT 46
6426: EQUAL
6427: IFFALSE 6458
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6429: LD_VAR 0 2
6433: PPUSH
6434: LD_INT 24
6436: PPUSH
6437: LD_VAR 0 5
6441: PPUSH
6442: LD_VAR 0 6
6446: PPUSH
6447: LD_VAR 0 10
6451: PPUSH
6452: CALL_OW 185
// end else
6456: GO 6487
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6458: LD_VAR 0 2
6462: PPUSH
6463: LD_VAR 0 7
6467: PPUSH
6468: LD_VAR 0 5
6472: PPUSH
6473: LD_VAR 0 6
6477: PPUSH
6478: LD_VAR 0 10
6482: PPUSH
6483: CALL_OW 185
// end ; end ;
6487: GO 6400
6489: POP
6490: POP
// end ; end ;
6491: LD_VAR 0 8
6495: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6496: LD_INT 0
6498: PPUSH
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
// for i := 1 to russianTanks do
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: DOUBLE
6509: LD_INT 1
6511: DEC
6512: ST_TO_ADDR
6513: LD_EXP 36
6517: PUSH
6518: FOR_TO
6519: IFFALSE 7001
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6521: LD_VAR 0 4
6525: PUSH
6526: LD_INT 5
6528: PUSH
6529: LD_INT 6
6531: PUSH
6532: LD_INT 6
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: PUSH
6540: LD_OWVAR 67
6544: ARRAY
6545: EQUAL
6546: IFFALSE 6999
// begin repeat wait ( 0 0$1 ) ;
6548: LD_INT 35
6550: PPUSH
6551: CALL_OW 67
// for i in russianTanks do
6555: LD_ADDR_VAR 0 4
6559: PUSH
6560: LD_EXP 36
6564: PUSH
6565: FOR_IN
6566: IFFALSE 6987
// begin if GetLives ( i ) < 659 then
6568: LD_VAR 0 4
6572: PPUSH
6573: CALL_OW 256
6577: PUSH
6578: LD_INT 659
6580: LESS
6581: IFFALSE 6669
// begin tmp = i ;
6583: LD_ADDR_VAR 0 5
6587: PUSH
6588: LD_VAR 0 4
6592: ST_TO_ADDR
// for i := 1 to russianTanks do
6593: LD_ADDR_VAR 0 4
6597: PUSH
6598: DOUBLE
6599: LD_INT 1
6601: DEC
6602: ST_TO_ADDR
6603: LD_EXP 36
6607: PUSH
6608: FOR_TO
6609: IFFALSE 6667
// begin if tmp = russianTanks [ i ] then
6611: LD_VAR 0 5
6615: PUSH
6616: LD_EXP 36
6620: PUSH
6621: LD_VAR 0 4
6625: ARRAY
6626: EQUAL
6627: IFFALSE 6665
// begin russianTanks = Delete ( russianTanks , i ) ;
6629: LD_ADDR_EXP 36
6633: PUSH
6634: LD_EXP 36
6638: PPUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: CALL_OW 3
6648: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6649: LD_ADDR_EXP 37
6653: PUSH
6654: LD_EXP 37
6658: PUSH
6659: LD_VAR 0 5
6663: ADD
6664: ST_TO_ADDR
// end ; end ;
6665: GO 6608
6667: POP
6668: POP
// end ; wait ( 0 0$1 ) ;
6669: LD_INT 35
6671: PPUSH
6672: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6676: LD_INT 23
6678: PPUSH
6679: LD_INT 22
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PPUSH
6689: CALL_OW 70
6693: PUSH
6694: LD_INT 2
6696: GREATER
6697: IFFALSE 6807
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6699: LD_ADDR_VAR 0 6
6703: PUSH
6704: LD_INT 22
6706: PUSH
6707: LD_VAR 0 2
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: PPUSH
6721: LD_VAR 0 4
6725: PPUSH
6726: CALL_OW 74
6730: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6731: LD_ADDR_VAR 0 7
6735: PUSH
6736: LD_INT 22
6738: PUSH
6739: LD_VAR 0 2
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 59
6753: PUSH
6754: EMPTY
6755: LIST
6756: PUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 21
6769: PUSH
6770: LD_INT 2
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: EMPTY
6788: LIST
6789: PPUSH
6790: CALL_OW 69
6794: PPUSH
6795: LD_VAR 0 4
6799: PPUSH
6800: CALL_OW 74
6804: ST_TO_ADDR
// end else
6805: GO 6919
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6807: LD_ADDR_VAR 0 6
6811: PUSH
6812: LD_INT 23
6814: PPUSH
6815: LD_INT 22
6817: PUSH
6818: LD_VAR 0 2
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 71
6831: PPUSH
6832: LD_VAR 0 4
6836: PPUSH
6837: CALL_OW 74
6841: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6842: LD_ADDR_VAR 0 7
6846: PUSH
6847: LD_INT 23
6849: PPUSH
6850: LD_INT 22
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 2
6864: PUSH
6865: LD_INT 59
6867: PUSH
6868: EMPTY
6869: LIST
6870: PUSH
6871: LD_INT 21
6873: PUSH
6874: LD_INT 1
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 21
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: PPUSH
6904: CALL_OW 71
6908: PPUSH
6909: LD_VAR 0 4
6913: PPUSH
6914: CALL_OW 74
6918: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6919: LD_VAR 0 4
6923: PPUSH
6924: LD_VAR 0 6
6928: PPUSH
6929: CALL_OW 296
6933: PUSH
6934: LD_INT 8
6936: PLUS
6937: PUSH
6938: LD_VAR 0 4
6942: PPUSH
6943: LD_VAR 0 7
6947: PPUSH
6948: CALL_OW 296
6952: LESS
6953: IFFALSE 6971
// begin ComAttackUnit ( i , target1 ) ;
6955: LD_VAR 0 4
6959: PPUSH
6960: LD_VAR 0 6
6964: PPUSH
6965: CALL_OW 115
// end else
6969: GO 6985
// begin ComAttackUnit ( i , target2 ) ;
6971: LD_VAR 0 4
6975: PPUSH
6976: LD_VAR 0 7
6980: PPUSH
6981: CALL_OW 115
// end ; end ;
6985: GO 6565
6987: POP
6988: POP
// until russianTanks = 0 ;
6989: LD_EXP 36
6993: PUSH
6994: LD_INT 0
6996: EQUAL
6997: IFFALSE 6548
// end ; end ;
6999: GO 6518
7001: POP
7002: POP
// end ;
7003: LD_VAR 0 3
7007: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7008: LD_INT 0
7010: PPUSH
7011: PPUSH
7012: PPUSH
7013: PPUSH
7014: PPUSH
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7019: LD_ADDR_VAR 0 8
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_VAR 0 1
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 21
7038: PUSH
7039: LD_INT 2
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 24
7048: PUSH
7049: LD_INT 660
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 58
7061: PUSH
7062: EMPTY
7063: LIST
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: LD_INT 34
7070: PUSH
7071: LD_INT 43
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 34
7080: PUSH
7081: LD_INT 44
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 34
7090: PUSH
7091: LD_INT 46
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7120: LD_ADDR_VAR 0 9
7124: PUSH
7125: LD_INT 22
7127: PUSH
7128: LD_VAR 0 1
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 3
7149: PUSH
7150: LD_INT 24
7152: PUSH
7153: LD_INT 660
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: LIST
7168: PPUSH
7169: CALL_OW 69
7173: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7174: LD_ADDR_VAR 0 10
7178: PUSH
7179: LD_VAR 0 2
7183: PPUSH
7184: LD_INT 22
7186: PUSH
7187: LD_VAR 0 1
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 21
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: LD_INT 24
7211: PUSH
7212: LD_INT 1000
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 70
7232: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7233: LD_ADDR_VAR 0 11
7237: PUSH
7238: LD_VAR 0 2
7242: PPUSH
7243: LD_INT 22
7245: PUSH
7246: LD_VAR 0 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 21
7257: PUSH
7258: LD_INT 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 24
7267: PUSH
7268: LD_INT 1000
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 58
7277: PUSH
7278: EMPTY
7279: LIST
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: PPUSH
7287: CALL_OW 70
7291: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7292: LD_ADDR_VAR 0 12
7296: PUSH
7297: EMPTY
7298: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7299: LD_ADDR_VAR 0 13
7303: PUSH
7304: LD_VAR 0 2
7308: PPUSH
7309: LD_INT 22
7311: PUSH
7312: LD_VAR 0 1
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 25
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 70
7339: ST_TO_ADDR
// if damageVehicle_list > 0 then
7340: LD_VAR 0 9
7344: PUSH
7345: LD_INT 0
7347: GREATER
7348: IFFALSE 7386
// for i in damageVehicle_list do
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_VAR 0 9
7359: PUSH
7360: FOR_IN
7361: IFFALSE 7384
// ComMoveXY ( i , repX , repY ) ;
7363: LD_VAR 0 6
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: LD_VAR 0 4
7377: PPUSH
7378: CALL_OW 111
7382: GO 7360
7384: POP
7385: POP
// if vehicleNeedRepair_list > 0 then
7386: LD_VAR 0 10
7390: PUSH
7391: LD_INT 0
7393: GREATER
7394: IFFALSE 7481
// begin for i in vehicleNeedRepair_list do
7396: LD_ADDR_VAR 0 6
7400: PUSH
7401: LD_VAR 0 10
7405: PUSH
7406: FOR_IN
7407: IFFALSE 7479
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7409: LD_ADDR_VAR 0 12
7413: PUSH
7414: LD_VAR 0 12
7418: PUSH
7419: LD_VAR 0 6
7423: PPUSH
7424: CALL_OW 313
7428: ADD
7429: ST_TO_ADDR
// for j in mechanicInside_list do
7430: LD_ADDR_VAR 0 7
7434: PUSH
7435: LD_VAR 0 12
7439: PUSH
7440: FOR_IN
7441: IFFALSE 7475
// begin ComExitVehicle ( j ) ;
7443: LD_VAR 0 7
7447: PPUSH
7448: CALL_OW 121
// wait ( 0 0$1 ) ;
7452: LD_INT 35
7454: PPUSH
7455: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7459: LD_VAR 0 7
7463: PPUSH
7464: LD_VAR 0 6
7468: PPUSH
7469: CALL_OW 189
// end ;
7473: GO 7440
7475: POP
7476: POP
// end ;
7477: GO 7406
7479: POP
7480: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7481: LD_VAR 0 11
7485: PUSH
7486: LD_INT 0
7488: GREATER
7489: IFFALSE 7513
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7491: LD_VAR 0 13
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7513: LD_VAR 0 8
7517: PUSH
7518: LD_INT 0
7520: GREATER
7521: PUSH
7522: LD_EXP 37
7526: PUSH
7527: LD_INT 0
7529: GREATER
7530: AND
7531: IFFALSE 7774
// begin for i := 1 to vehicleOK_list do
7533: LD_ADDR_VAR 0 6
7537: PUSH
7538: DOUBLE
7539: LD_INT 1
7541: DEC
7542: ST_TO_ADDR
7543: LD_VAR 0 8
7547: PUSH
7548: FOR_TO
7549: IFFALSE 7772
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7551: LD_VAR 0 6
7555: PUSH
7556: LD_INT 5
7558: PUSH
7559: LD_INT 6
7561: PUSH
7562: LD_INT 6
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_OWVAR 67
7574: ARRAY
7575: EQUAL
7576: IFFALSE 7770
// begin for i in vehicleOk_list do
7578: LD_ADDR_VAR 0 6
7582: PUSH
7583: LD_VAR 0 8
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7609
// russianTanks = russianTanks ^ i ;
7591: LD_ADDR_EXP 36
7595: PUSH
7596: LD_EXP 36
7600: PUSH
7601: LD_VAR 0 6
7605: ADD
7606: ST_TO_ADDR
7607: GO 7588
7609: POP
7610: POP
// for i in vehicleOK_list do
7611: LD_ADDR_VAR 0 6
7615: PUSH
7616: LD_VAR 0 8
7620: PUSH
7621: FOR_IN
7622: IFFALSE 7638
// SetFuel ( i , 100 ) ;
7624: LD_VAR 0 6
7628: PPUSH
7629: LD_INT 100
7631: PPUSH
7632: CALL_OW 240
7636: GO 7621
7638: POP
7639: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7640: LD_ADDR_EXP 37
7644: PUSH
7645: LD_EXP 37
7649: PPUSH
7650: LD_INT 1
7652: PPUSH
7653: CALL_OW 3
7657: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7658: LD_ADDR_EXP 37
7662: PUSH
7663: LD_EXP 37
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 3
7675: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7676: LD_ADDR_EXP 37
7680: PUSH
7681: LD_EXP 37
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 3
7693: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7694: LD_ADDR_EXP 37
7698: PUSH
7699: LD_EXP 37
7703: PPUSH
7704: LD_INT 1
7706: PPUSH
7707: CALL_OW 3
7711: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7712: LD_ADDR_EXP 37
7716: PUSH
7717: LD_EXP 37
7721: PPUSH
7722: LD_INT 1
7724: PPUSH
7725: CALL_OW 3
7729: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7730: LD_OWVAR 67
7734: PUSH
7735: LD_INT 2
7737: EQUAL
7738: PUSH
7739: LD_OWVAR 67
7743: PUSH
7744: LD_INT 3
7746: EQUAL
7747: OR
7748: IFFALSE 7768
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7750: LD_ADDR_EXP 37
7754: PUSH
7755: LD_EXP 37
7759: PPUSH
7760: LD_INT 1
7762: PPUSH
7763: CALL_OW 3
7767: ST_TO_ADDR
// break ;
7768: GO 7772
// end ; end ;
7770: GO 7548
7772: POP
7773: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7774: LD_ADDR_VAR 0 6
7778: PUSH
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_INT 22
7786: PUSH
7787: LD_VAR 0 1
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 70
7814: NOT
7815: PUSH
7816: FOR_IN
7817: IFFALSE 7840
// ComMoveXY ( i , repX , repY ) ;
7819: LD_VAR 0 6
7823: PPUSH
7824: LD_VAR 0 3
7828: PPUSH
7829: LD_VAR 0 4
7833: PPUSH
7834: CALL_OW 111
7838: GO 7816
7840: POP
7841: POP
// end ;
7842: LD_VAR 0 5
7846: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7847: LD_INT 0
7849: PPUSH
7850: PPUSH
7851: PPUSH
7852: PPUSH
// enable ;
7853: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7854: LD_ADDR_VAR 0 7
7858: PUSH
7859: LD_VAR 0 3
7863: PPUSH
7864: CALL_OW 435
7868: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7869: LD_ADDR_VAR 0 6
7873: PUSH
7874: LD_INT 22
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: LD_INT 34
7888: PUSH
7889: LD_VAR 0 2
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7907: LD_VAR 0 6
7911: PUSH
7912: LD_INT 0
7914: GREATER
7915: PUSH
7916: LD_VAR 0 3
7920: PPUSH
7921: CALL_OW 435
7925: AND
7926: PUSH
7927: LD_VAR 0 7
7931: PUSH
7932: LD_INT 0
7934: GREATER
7935: AND
7936: IFFALSE 7985
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7938: LD_VAR 0 6
7942: PUSH
7943: LD_INT 1
7945: ARRAY
7946: PPUSH
7947: LD_VAR 0 7
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 7
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7969: LD_VAR 0 6
7973: PUSH
7974: LD_INT 1
7976: ARRAY
7977: PPUSH
7978: LD_INT 100
7980: PPUSH
7981: CALL_OW 240
// end ; end ;
7985: LD_VAR 0 4
7989: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7990: LD_INT 0
7992: PPUSH
7993: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7994: LD_INT 22
7996: PUSH
7997: LD_VAR 0 1
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 25
8008: PUSH
8009: LD_INT 2
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: PPUSH
8020: CALL_OW 69
8024: PUSH
8025: LD_INT 0
8027: GREATER
8028: PUSH
8029: LD_INT 22
8031: PUSH
8032: LD_VAR 0 1
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 21
8043: PUSH
8044: LD_INT 3
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 3
8053: PUSH
8054: LD_INT 24
8056: PUSH
8057: LD_INT 1000
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: PPUSH
8073: CALL_OW 69
8077: PUSH
8078: LD_INT 0
8080: EQUAL
8081: AND
8082: PUSH
8083: LD_VAR 0 2
8087: PUSH
8088: LD_INT 0
8090: GREATER
8091: AND
8092: IFFALSE 8191
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8094: LD_ADDR_VAR 0 4
8098: PUSH
8099: LD_INT 22
8101: PUSH
8102: LD_VAR 0 1
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 25
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PPUSH
8125: CALL_OW 69
8129: PUSH
8130: FOR_IN
8131: IFFALSE 8189
// begin AddComExitBuilding ( i ) ;
8133: LD_VAR 0 4
8137: PPUSH
8138: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8142: LD_VAR 0 4
8146: PPUSH
8147: LD_VAR 0 2
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PPUSH
8156: LD_VAR 0 2
8160: PUSH
8161: LD_INT 2
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_INT 3
8172: ARRAY
8173: PPUSH
8174: LD_VAR 0 2
8178: PUSH
8179: LD_INT 4
8181: ARRAY
8182: PPUSH
8183: CALL_OW 205
// end ;
8187: GO 8130
8189: POP
8190: POP
// end ; end ;
8191: LD_VAR 0 3
8195: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8196: LD_INT 0
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
8204: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8205: LD_ADDR_VAR 0 7
8209: PUSH
8210: LD_INT 22
8212: PUSH
8213: LD_VAR 0 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 1
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 56
8234: PUSH
8235: EMPTY
8236: LIST
8237: PUSH
8238: LD_INT 24
8240: PUSH
8241: LD_INT 700
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 69
8258: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8259: LD_ADDR_VAR 0 8
8263: PUSH
8264: LD_INT 22
8266: PUSH
8267: LD_VAR 0 1
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 30
8278: PUSH
8279: LD_INT 32
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 58
8288: PUSH
8289: EMPTY
8290: LIST
8291: PUSH
8292: LD_INT 24
8294: PUSH
8295: LD_INT 251
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PPUSH
8308: CALL_OW 69
8312: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8313: LD_ADDR_VAR 0 10
8317: PUSH
8318: LD_INT 22
8320: PUSH
8321: LD_VAR 0 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 5
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 8
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 9
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8378: LD_ADDR_VAR 0 9
8382: PUSH
8383: LD_VAR 0 2
8387: PPUSH
8388: CALL_OW 313
8392: PUSH
8393: LD_VAR 0 10
8397: DIFF
8398: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8399: LD_VAR 0 8
8403: PUSH
8404: LD_INT 0
8406: EQUAL
8407: PUSH
8408: LD_VAR 0 9
8412: PUSH
8413: LD_INT 0
8415: EQUAL
8416: AND
8417: IFFALSE 8463
// begin for i in soldiers_list do
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: LD_VAR 0 7
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8459
// begin if IsOK ( build ) then
8432: LD_VAR 0 2
8436: PPUSH
8437: CALL_OW 302
8441: IFFALSE 8457
// ComEnterUnit ( i , build ) ;
8443: LD_VAR 0 5
8447: PPUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: CALL_OW 120
// end ;
8457: GO 8429
8459: POP
8460: POP
// end else
8461: GO 8548
// begin for i = 1 to turretList do
8463: LD_ADDR_VAR 0 5
8467: PUSH
8468: DOUBLE
8469: LD_INT 1
8471: DEC
8472: ST_TO_ADDR
8473: LD_VAR 0 8
8477: PUSH
8478: FOR_TO
8479: IFFALSE 8546
// begin for j = 1 to temp do
8481: LD_ADDR_VAR 0 6
8485: PUSH
8486: DOUBLE
8487: LD_INT 1
8489: DEC
8490: ST_TO_ADDR
8491: LD_VAR 0 9
8495: PUSH
8496: FOR_TO
8497: IFFALSE 8542
// begin ComExitBuilding ( temp [ j ] ) ;
8499: LD_VAR 0 9
8503: PUSH
8504: LD_VAR 0 6
8508: ARRAY
8509: PPUSH
8510: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8514: LD_VAR 0 9
8518: PUSH
8519: LD_VAR 0 6
8523: ARRAY
8524: PPUSH
8525: LD_VAR 0 8
8529: PUSH
8530: LD_VAR 0 5
8534: ARRAY
8535: PPUSH
8536: CALL_OW 180
// end ;
8540: GO 8496
8542: POP
8543: POP
// end ;
8544: GO 8478
8546: POP
8547: POP
// end ; end ;
8548: LD_VAR 0 4
8552: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8553: LD_INT 0
8555: PPUSH
8556: PPUSH
8557: PPUSH
8558: PPUSH
8559: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8560: LD_ADDR_VAR 0 6
8564: PUSH
8565: LD_INT 22
8567: PUSH
8568: LD_VAR 0 1
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 2
8579: PUSH
8580: LD_INT 30
8582: PUSH
8583: LD_INT 31
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 30
8592: PUSH
8593: LD_INT 32
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 30
8602: PUSH
8603: LD_INT 33
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 30
8612: PUSH
8613: LD_INT 4
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 30
8622: PUSH
8623: LD_INT 5
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8647: LD_ADDR_VAR 0 7
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_VAR 0 2
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 58
8676: PUSH
8677: EMPTY
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: PPUSH
8685: CALL_OW 69
8689: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8690: LD_VAR 0 6
8694: PUSH
8695: LD_INT 0
8697: GREATER
8698: PUSH
8699: LD_VAR 0 7
8703: PUSH
8704: LD_INT 0
8706: GREATER
8707: AND
8708: IFFALSE 8778
// begin for i in turretsList do
8710: LD_ADDR_VAR 0 4
8714: PUSH
8715: LD_VAR 0 6
8719: PUSH
8720: FOR_IN
8721: IFFALSE 8776
// begin for j in enemyBuildings do
8723: LD_ADDR_VAR 0 5
8727: PUSH
8728: LD_VAR 0 7
8732: PUSH
8733: FOR_IN
8734: IFFALSE 8772
// begin if GetDistUnits ( i , j ) < 20 then
8736: LD_VAR 0 4
8740: PPUSH
8741: LD_VAR 0 5
8745: PPUSH
8746: CALL_OW 296
8750: PUSH
8751: LD_INT 20
8753: LESS
8754: IFFALSE 8770
// begin ComAttackUnit ( i , j ) ;
8756: LD_VAR 0 4
8760: PPUSH
8761: LD_VAR 0 5
8765: PPUSH
8766: CALL_OW 115
// end ; end ;
8770: GO 8733
8772: POP
8773: POP
// end ;
8774: GO 8720
8776: POP
8777: POP
// end ; end ;
8778: LD_VAR 0 3
8782: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8783: LD_INT 0
8785: PPUSH
8786: PPUSH
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
8792: PPUSH
8793: PPUSH
8794: PPUSH
8795: PPUSH
// for i = 1 to medicCount do
8796: LD_ADDR_VAR 0 14
8800: PUSH
8801: DOUBLE
8802: LD_INT 1
8804: DEC
8805: ST_TO_ADDR
8806: LD_VAR 0 7
8810: PUSH
8811: FOR_TO
8812: IFFALSE 8894
// begin uc_side = side ;
8814: LD_ADDR_OWVAR 20
8818: PUSH
8819: LD_VAR 0 1
8823: ST_TO_ADDR
// uc_nation = nation ;
8824: LD_ADDR_OWVAR 21
8828: PUSH
8829: LD_VAR 0 2
8833: ST_TO_ADDR
// hc_name =  ;
8834: LD_ADDR_OWVAR 26
8838: PUSH
8839: LD_STRING 
8841: ST_TO_ADDR
// hc_gallery =  ;
8842: LD_ADDR_OWVAR 33
8846: PUSH
8847: LD_STRING 
8849: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8850: LD_INT 0
8852: PPUSH
8853: LD_INT 4
8855: PPUSH
8856: LD_VAR 0 8
8860: PPUSH
8861: CALL_OW 380
// un = CreateHuman ;
8865: LD_ADDR_VAR 0 16
8869: PUSH
8870: CALL_OW 44
8874: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8875: LD_VAR 0 16
8879: PPUSH
8880: LD_VAR 0 9
8884: PPUSH
8885: LD_INT 0
8887: PPUSH
8888: CALL_OW 49
// end ;
8892: GO 8811
8894: POP
8895: POP
// for i = 1 to soldierCount do
8896: LD_ADDR_VAR 0 14
8900: PUSH
8901: DOUBLE
8902: LD_INT 1
8904: DEC
8905: ST_TO_ADDR
8906: LD_VAR 0 3
8910: PUSH
8911: FOR_TO
8912: IFFALSE 8994
// begin uc_side = side ;
8914: LD_ADDR_OWVAR 20
8918: PUSH
8919: LD_VAR 0 1
8923: ST_TO_ADDR
// uc_nation = nation ;
8924: LD_ADDR_OWVAR 21
8928: PUSH
8929: LD_VAR 0 2
8933: ST_TO_ADDR
// hc_name =  ;
8934: LD_ADDR_OWVAR 26
8938: PUSH
8939: LD_STRING 
8941: ST_TO_ADDR
// hc_gallery =  ;
8942: LD_ADDR_OWVAR 33
8946: PUSH
8947: LD_STRING 
8949: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8950: LD_INT 0
8952: PPUSH
8953: LD_INT 1
8955: PPUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: CALL_OW 380
// un = CreateHuman ;
8965: LD_ADDR_VAR 0 16
8969: PUSH
8970: CALL_OW 44
8974: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8975: LD_VAR 0 16
8979: PPUSH
8980: LD_VAR 0 9
8984: PPUSH
8985: LD_INT 0
8987: PPUSH
8988: CALL_OW 49
// end ;
8992: GO 8911
8994: POP
8995: POP
// for i = 1 to sniperCount do
8996: LD_ADDR_VAR 0 14
9000: PUSH
9001: DOUBLE
9002: LD_INT 1
9004: DEC
9005: ST_TO_ADDR
9006: LD_VAR 0 4
9010: PUSH
9011: FOR_TO
9012: IFFALSE 9094
// begin uc_side = side ;
9014: LD_ADDR_OWVAR 20
9018: PUSH
9019: LD_VAR 0 1
9023: ST_TO_ADDR
// uc_nation = nation ;
9024: LD_ADDR_OWVAR 21
9028: PUSH
9029: LD_VAR 0 2
9033: ST_TO_ADDR
// hc_name =  ;
9034: LD_ADDR_OWVAR 26
9038: PUSH
9039: LD_STRING 
9041: ST_TO_ADDR
// hc_gallery =  ;
9042: LD_ADDR_OWVAR 33
9046: PUSH
9047: LD_STRING 
9049: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9050: LD_INT 0
9052: PPUSH
9053: LD_INT 5
9055: PPUSH
9056: LD_VAR 0 8
9060: PPUSH
9061: CALL_OW 380
// un = CreateHuman ;
9065: LD_ADDR_VAR 0 16
9069: PUSH
9070: CALL_OW 44
9074: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9075: LD_VAR 0 16
9079: PPUSH
9080: LD_VAR 0 9
9084: PPUSH
9085: LD_INT 0
9087: PPUSH
9088: CALL_OW 49
// end ;
9092: GO 9011
9094: POP
9095: POP
// for i = 1 to bazookCount do
9096: LD_ADDR_VAR 0 14
9100: PUSH
9101: DOUBLE
9102: LD_INT 1
9104: DEC
9105: ST_TO_ADDR
9106: LD_VAR 0 5
9110: PUSH
9111: FOR_TO
9112: IFFALSE 9194
// begin uc_side = side ;
9114: LD_ADDR_OWVAR 20
9118: PUSH
9119: LD_VAR 0 1
9123: ST_TO_ADDR
// uc_nation = nation ;
9124: LD_ADDR_OWVAR 21
9128: PUSH
9129: LD_VAR 0 2
9133: ST_TO_ADDR
// hc_name =  ;
9134: LD_ADDR_OWVAR 26
9138: PUSH
9139: LD_STRING 
9141: ST_TO_ADDR
// hc_gallery =  ;
9142: LD_ADDR_OWVAR 33
9146: PUSH
9147: LD_STRING 
9149: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9150: LD_INT 0
9152: PPUSH
9153: LD_INT 9
9155: PPUSH
9156: LD_VAR 0 8
9160: PPUSH
9161: CALL_OW 380
// un = CreateHuman ;
9165: LD_ADDR_VAR 0 16
9169: PUSH
9170: CALL_OW 44
9174: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9175: LD_VAR 0 16
9179: PPUSH
9180: LD_VAR 0 9
9184: PPUSH
9185: LD_INT 0
9187: PPUSH
9188: CALL_OW 49
// end ;
9192: GO 9111
9194: POP
9195: POP
// for i = 1 to mortalCount do
9196: LD_ADDR_VAR 0 14
9200: PUSH
9201: DOUBLE
9202: LD_INT 1
9204: DEC
9205: ST_TO_ADDR
9206: LD_VAR 0 6
9210: PUSH
9211: FOR_TO
9212: IFFALSE 9294
// begin uc_side = side ;
9214: LD_ADDR_OWVAR 20
9218: PUSH
9219: LD_VAR 0 1
9223: ST_TO_ADDR
// uc_nation = nation ;
9224: LD_ADDR_OWVAR 21
9228: PUSH
9229: LD_VAR 0 2
9233: ST_TO_ADDR
// hc_name =  ;
9234: LD_ADDR_OWVAR 26
9238: PUSH
9239: LD_STRING 
9241: ST_TO_ADDR
// hc_gallery =  ;
9242: LD_ADDR_OWVAR 33
9246: PUSH
9247: LD_STRING 
9249: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9250: LD_INT 0
9252: PPUSH
9253: LD_INT 8
9255: PPUSH
9256: LD_VAR 0 8
9260: PPUSH
9261: CALL_OW 380
// un = CreateHuman ;
9265: LD_ADDR_VAR 0 16
9269: PUSH
9270: CALL_OW 44
9274: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9275: LD_VAR 0 16
9279: PPUSH
9280: LD_VAR 0 9
9284: PPUSH
9285: LD_INT 0
9287: PPUSH
9288: CALL_OW 49
// end ;
9292: GO 9211
9294: POP
9295: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9296: LD_ADDR_VAR 0 19
9300: PUSH
9301: LD_INT 22
9303: PUSH
9304: LD_VAR 0 1
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 25
9328: PUSH
9329: LD_INT 5
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 25
9338: PUSH
9339: LD_INT 8
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 9
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 69
9371: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9372: LD_ADDR_VAR 0 18
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 1
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 25
9391: PUSH
9392: LD_INT 4
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// for i in medic_list do
9408: LD_ADDR_VAR 0 14
9412: PUSH
9413: LD_VAR 0 18
9417: PUSH
9418: FOR_IN
9419: IFFALSE 9437
// ComMoveToArea ( i , healArea ) ;
9421: LD_VAR 0 14
9425: PPUSH
9426: LD_VAR 0 10
9430: PPUSH
9431: CALL_OW 113
9435: GO 9418
9437: POP
9438: POP
// if strategy = 1 then
9439: LD_VAR 0 12
9443: PUSH
9444: LD_INT 1
9446: EQUAL
9447: IFFALSE 10152
// begin repeat wait ( 0 0$3 ) ;
9449: LD_INT 105
9451: PPUSH
9452: CALL_OW 67
// for i in soldiersOK_list do
9456: LD_ADDR_VAR 0 14
9460: PUSH
9461: LD_VAR 0 19
9465: PUSH
9466: FOR_IN
9467: IFFALSE 9501
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9469: LD_VAR 0 14
9473: PPUSH
9474: LD_INT 80
9476: PPUSH
9477: LD_INT 109
9479: PPUSH
9480: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9484: LD_VAR 0 14
9488: PPUSH
9489: LD_INT 39
9491: PPUSH
9492: LD_INT 49
9494: PPUSH
9495: CALL_OW 174
// end ;
9499: GO 9466
9501: POP
9502: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9503: LD_INT 15
9505: PPUSH
9506: LD_INT 22
9508: PUSH
9509: LD_VAR 0 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PPUSH
9518: CALL_OW 70
9522: PUSH
9523: LD_INT 0
9525: GREATER
9526: IFFALSE 9449
// repeat wait ( 0 0$1 ) ;
9528: LD_INT 35
9530: PPUSH
9531: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9535: LD_ADDR_VAR 0 17
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_VAR 0 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 1
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 24
9560: PUSH
9561: LD_INT 550
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 24
9574: PUSH
9575: LD_INT 250
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PPUSH
9591: CALL_OW 69
9595: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9596: LD_ADDR_VAR 0 19
9600: PUSH
9601: LD_INT 22
9603: PUSH
9604: LD_VAR 0 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 2
9615: PUSH
9616: LD_INT 25
9618: PUSH
9619: LD_INT 1
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 25
9628: PUSH
9629: LD_INT 5
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 25
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 25
9648: PUSH
9649: LD_INT 9
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 24
9665: PUSH
9666: LD_INT 1000
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: PPUSH
9678: CALL_OW 69
9682: ST_TO_ADDR
// if medicCount > 0 then
9683: LD_VAR 0 7
9687: PUSH
9688: LD_INT 0
9690: GREATER
9691: IFFALSE 9765
// begin if damageUnit_list > 0 then
9693: LD_VAR 0 17
9697: PUSH
9698: LD_INT 0
9700: GREATER
9701: IFFALSE 9765
// begin for i in damageUnit_list do
9703: LD_ADDR_VAR 0 14
9707: PUSH
9708: LD_VAR 0 17
9712: PUSH
9713: FOR_IN
9714: IFFALSE 9763
// begin ComMoveToArea ( i , healArea ) ;
9716: LD_VAR 0 14
9720: PPUSH
9721: LD_VAR 0 10
9725: PPUSH
9726: CALL_OW 113
// for j in medic_list do
9730: LD_ADDR_VAR 0 15
9734: PUSH
9735: LD_VAR 0 18
9739: PUSH
9740: FOR_IN
9741: IFFALSE 9759
// AddComHeal ( j , i ) ;
9743: LD_VAR 0 15
9747: PPUSH
9748: LD_VAR 0 14
9752: PPUSH
9753: CALL_OW 188
9757: GO 9740
9759: POP
9760: POP
// end ;
9761: GO 9713
9763: POP
9764: POP
// end ; end ; for i in soldiersOK_list do
9765: LD_ADDR_VAR 0 14
9769: PUSH
9770: LD_VAR 0 19
9774: PUSH
9775: FOR_IN
9776: IFFALSE 9952
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9778: LD_ADDR_VAR 0 22
9782: PUSH
9783: LD_INT 22
9785: PUSH
9786: LD_VAR 0 11
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 69
9799: PPUSH
9800: LD_VAR 0 14
9804: PPUSH
9805: CALL_OW 74
9809: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9810: LD_ADDR_VAR 0 23
9814: PUSH
9815: LD_INT 22
9817: PUSH
9818: LD_VAR 0 11
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: LD_INT 59
9832: PUSH
9833: EMPTY
9834: LIST
9835: PUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: PPUSH
9869: CALL_OW 69
9873: PPUSH
9874: LD_VAR 0 14
9878: PPUSH
9879: CALL_OW 74
9883: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9884: LD_VAR 0 14
9888: PPUSH
9889: LD_VAR 0 22
9893: PPUSH
9894: CALL_OW 296
9898: PUSH
9899: LD_INT 8
9901: PLUS
9902: PUSH
9903: LD_VAR 0 14
9907: PPUSH
9908: LD_VAR 0 23
9912: PPUSH
9913: CALL_OW 296
9917: LESS
9918: IFFALSE 9936
// begin ComAttackUnit ( i , target1 ) ;
9920: LD_VAR 0 14
9924: PPUSH
9925: LD_VAR 0 22
9929: PPUSH
9930: CALL_OW 115
// end else
9934: GO 9950
// begin ComAttackUnit ( i , target2 ) ;
9936: LD_VAR 0 14
9940: PPUSH
9941: LD_VAR 0 23
9945: PPUSH
9946: CALL_OW 115
// end ; end ;
9950: GO 9775
9952: POP
9953: POP
// for i in soldiersOK_list do
9954: LD_ADDR_VAR 0 14
9958: PUSH
9959: LD_VAR 0 19
9963: PUSH
9964: FOR_IN
9965: IFFALSE 10141
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9967: LD_ADDR_VAR 0 22
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_VAR 0 11
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: PPUSH
9989: LD_VAR 0 14
9993: PPUSH
9994: CALL_OW 74
9998: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9999: LD_ADDR_VAR 0 23
10003: PUSH
10004: LD_INT 22
10006: PUSH
10007: LD_VAR 0 11
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 59
10021: PUSH
10022: EMPTY
10023: LIST
10024: PUSH
10025: LD_INT 21
10027: PUSH
10028: LD_INT 1
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 2
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: PPUSH
10058: CALL_OW 69
10062: PPUSH
10063: LD_VAR 0 14
10067: PPUSH
10068: CALL_OW 74
10072: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10073: LD_VAR 0 14
10077: PPUSH
10078: LD_VAR 0 22
10082: PPUSH
10083: CALL_OW 296
10087: PUSH
10088: LD_INT 8
10090: PLUS
10091: PUSH
10092: LD_VAR 0 14
10096: PPUSH
10097: LD_VAR 0 23
10101: PPUSH
10102: CALL_OW 296
10106: LESS
10107: IFFALSE 10125
// begin ComAttackUnit ( i , target1 ) ;
10109: LD_VAR 0 14
10113: PPUSH
10114: LD_VAR 0 22
10118: PPUSH
10119: CALL_OW 115
// end else
10123: GO 10139
// begin ComAttackUnit ( i , target2 ) ;
10125: LD_VAR 0 14
10129: PPUSH
10130: LD_VAR 0 23
10134: PPUSH
10135: CALL_OW 115
// end ; end ;
10139: GO 9964
10141: POP
10142: POP
// until soldiersOK_list = [ ] ;
10143: LD_VAR 0 19
10147: PUSH
10148: EMPTY
10149: EQUAL
10150: IFFALSE 9528
// end ; if strategy = 2 then
10152: LD_VAR 0 12
10156: PUSH
10157: LD_INT 2
10159: EQUAL
10160: IFFALSE 10865
// begin repeat wait ( 0 0$1 ) ;
10162: LD_INT 35
10164: PPUSH
10165: CALL_OW 67
// for i in soldiersOK_list do
10169: LD_ADDR_VAR 0 14
10173: PUSH
10174: LD_VAR 0 19
10178: PUSH
10179: FOR_IN
10180: IFFALSE 10214
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10182: LD_VAR 0 14
10186: PPUSH
10187: LD_INT 117
10189: PPUSH
10190: LD_INT 97
10192: PPUSH
10193: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10197: LD_VAR 0 14
10201: PPUSH
10202: LD_INT 94
10204: PPUSH
10205: LD_INT 50
10207: PPUSH
10208: CALL_OW 174
// end ;
10212: GO 10179
10214: POP
10215: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10216: LD_INT 16
10218: PPUSH
10219: LD_INT 22
10221: PUSH
10222: LD_VAR 0 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PPUSH
10231: CALL_OW 70
10235: PUSH
10236: LD_INT 0
10238: GREATER
10239: IFFALSE 10162
// repeat wait ( 0 0$3 ) ;
10241: LD_INT 105
10243: PPUSH
10244: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10248: LD_ADDR_VAR 0 17
10252: PUSH
10253: LD_INT 22
10255: PUSH
10256: LD_VAR 0 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: LD_INT 3
10270: PUSH
10271: LD_INT 24
10273: PUSH
10274: LD_INT 550
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 24
10287: PUSH
10288: LD_INT 250
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10309: LD_ADDR_VAR 0 19
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_VAR 0 1
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 2
10328: PUSH
10329: LD_INT 25
10331: PUSH
10332: LD_INT 1
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 25
10341: PUSH
10342: LD_INT 5
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 25
10351: PUSH
10352: LD_INT 8
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 25
10361: PUSH
10362: LD_INT 9
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 24
10378: PUSH
10379: LD_INT 1000
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 69
10395: ST_TO_ADDR
// if medicCount > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10478
// begin if damageUnit_list > 0 then
10406: LD_VAR 0 17
10410: PUSH
10411: LD_INT 0
10413: GREATER
10414: IFFALSE 10478
// begin for i in damageUnit_list do
10416: LD_ADDR_VAR 0 14
10420: PUSH
10421: LD_VAR 0 17
10425: PUSH
10426: FOR_IN
10427: IFFALSE 10476
// begin ComMoveToArea ( i , healArea ) ;
10429: LD_VAR 0 14
10433: PPUSH
10434: LD_VAR 0 10
10438: PPUSH
10439: CALL_OW 113
// for j in medic_list do
10443: LD_ADDR_VAR 0 15
10447: PUSH
10448: LD_VAR 0 18
10452: PUSH
10453: FOR_IN
10454: IFFALSE 10472
// AddComHeal ( j , i ) ;
10456: LD_VAR 0 15
10460: PPUSH
10461: LD_VAR 0 14
10465: PPUSH
10466: CALL_OW 188
10470: GO 10453
10472: POP
10473: POP
// end ;
10474: GO 10426
10476: POP
10477: POP
// end ; end ; for i in soldiersOK_list do
10478: LD_ADDR_VAR 0 14
10482: PUSH
10483: LD_VAR 0 19
10487: PUSH
10488: FOR_IN
10489: IFFALSE 10665
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10491: LD_ADDR_VAR 0 22
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_VAR 0 11
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: PPUSH
10513: LD_VAR 0 14
10517: PPUSH
10518: CALL_OW 74
10522: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10523: LD_ADDR_VAR 0 23
10527: PUSH
10528: LD_INT 22
10530: PUSH
10531: LD_VAR 0 11
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 2
10542: PUSH
10543: LD_INT 59
10545: PUSH
10546: EMPTY
10547: LIST
10548: PUSH
10549: LD_INT 21
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: LD_INT 21
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: EMPTY
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: PPUSH
10587: LD_VAR 0 14
10591: PPUSH
10592: CALL_OW 74
10596: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10597: LD_VAR 0 14
10601: PPUSH
10602: LD_VAR 0 22
10606: PPUSH
10607: CALL_OW 296
10611: PUSH
10612: LD_INT 8
10614: PLUS
10615: PUSH
10616: LD_VAR 0 14
10620: PPUSH
10621: LD_VAR 0 23
10625: PPUSH
10626: CALL_OW 296
10630: LESS
10631: IFFALSE 10649
// begin ComAttackUnit ( i , target1 ) ;
10633: LD_VAR 0 14
10637: PPUSH
10638: LD_VAR 0 22
10642: PPUSH
10643: CALL_OW 115
// end else
10647: GO 10663
// begin ComAttackUnit ( i , target2 ) ;
10649: LD_VAR 0 14
10653: PPUSH
10654: LD_VAR 0 23
10658: PPUSH
10659: CALL_OW 115
// end ; end ;
10663: GO 10488
10665: POP
10666: POP
// for i in soldiersOK_list do
10667: LD_ADDR_VAR 0 14
10671: PUSH
10672: LD_VAR 0 19
10676: PUSH
10677: FOR_IN
10678: IFFALSE 10854
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10680: LD_ADDR_VAR 0 22
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_VAR 0 11
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PPUSH
10697: CALL_OW 69
10701: PPUSH
10702: LD_VAR 0 14
10706: PPUSH
10707: CALL_OW 74
10711: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10712: LD_ADDR_VAR 0 23
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_VAR 0 11
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: LD_INT 59
10734: PUSH
10735: EMPTY
10736: LIST
10737: PUSH
10738: LD_INT 21
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 21
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: EMPTY
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PPUSH
10776: LD_VAR 0 14
10780: PPUSH
10781: CALL_OW 74
10785: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10786: LD_VAR 0 14
10790: PPUSH
10791: LD_VAR 0 22
10795: PPUSH
10796: CALL_OW 296
10800: PUSH
10801: LD_INT 8
10803: PLUS
10804: PUSH
10805: LD_VAR 0 14
10809: PPUSH
10810: LD_VAR 0 23
10814: PPUSH
10815: CALL_OW 296
10819: LESS
10820: IFFALSE 10838
// begin ComAttackUnit ( i , target1 ) ;
10822: LD_VAR 0 14
10826: PPUSH
10827: LD_VAR 0 22
10831: PPUSH
10832: CALL_OW 115
// end else
10836: GO 10852
// begin ComAttackUnit ( i , target2 ) ;
10838: LD_VAR 0 14
10842: PPUSH
10843: LD_VAR 0 23
10847: PPUSH
10848: CALL_OW 115
// end ; end ;
10852: GO 10677
10854: POP
10855: POP
// until soldiersOK_list = [ ] ;
10856: LD_VAR 0 19
10860: PUSH
10861: EMPTY
10862: EQUAL
10863: IFFALSE 10241
// end ; end ; end_of_file
10865: LD_VAR 0 13
10869: RET
// every 0 0$01 do
10870: GO 10872
10872: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10873: LD_INT 22
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 25
10885: PUSH
10886: LD_INT 2
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PPUSH
10897: CALL_OW 69
10901: PUSH
10902: LD_INT 0
10904: EQUAL
10905: IFFALSE 10919
// SetClass ( JMM , 2 ) ;
10907: LD_EXP 1
10911: PPUSH
10912: LD_INT 2
10914: PPUSH
10915: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10919: LD_STRING M1
10921: PPUSH
10922: CALL_OW 337
// case difficulty of 1 :
10926: LD_OWVAR 67
10930: PUSH
10931: LD_INT 1
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 10949
10939: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10940: LD_STRING M1-1
10942: PPUSH
10943: CALL_OW 337
10947: GO 10986
10949: LD_INT 2
10951: DOUBLE
10952: EQUAL
10953: IFTRUE 10957
10955: GO 10967
10957: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10958: LD_STRING M1-2
10960: PPUSH
10961: CALL_OW 337
10965: GO 10986
10967: LD_INT 3
10969: DOUBLE
10970: EQUAL
10971: IFTRUE 10975
10973: GO 10985
10975: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10976: LD_STRING M1-3
10978: PPUSH
10979: CALL_OW 337
10983: GO 10986
10985: POP
// ChangeMissionObjectives ( M1cont ) ;
10986: LD_STRING M1cont
10988: PPUSH
10989: CALL_OW 337
// SaveForQuickRestart ;
10993: CALL_OW 22
// end ;
10997: END
// every 0 0$1 do
10998: GO 11000
11000: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11001: LD_INT 350
11003: PPUSH
11004: LD_INT 875
11006: PPUSH
11007: CALL_OW 12
11011: PPUSH
11012: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11016: LD_INT 5
11018: PPUSH
11019: LD_INT 4
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 55
// wait ( 0 0$15 ) ;
11029: LD_INT 525
11031: PPUSH
11032: CALL_OW 67
// if IsOk ( Lisa ) then
11036: LD_EXP 2
11040: PPUSH
11041: CALL_OW 302
11045: IFFALSE 11061
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11047: LD_EXP 2
11051: PPUSH
11052: LD_STRING DR0-Lisa-1
11054: PPUSH
11055: CALL_OW 88
// end else
11059: GO 11183
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11061: LD_INT 22
11063: PUSH
11064: LD_INT 1
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 21
11073: PUSH
11074: LD_INT 1
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 26
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: LD_INT 25
11096: PUSH
11097: LD_INT 1
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 25
11106: PUSH
11107: LD_INT 2
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 25
11116: PUSH
11117: LD_INT 3
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 4
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: PPUSH
11147: CALL_OW 69
11151: PUSH
11152: LD_EXP 1
11156: PUSH
11157: LD_EXP 8
11161: PUSH
11162: LD_EXP 5
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: DIFF
11172: PPUSH
11173: LD_STRING DR0-Sol1-1
11175: PPUSH
11176: LD_STRING DR0-Sol1-1
11178: PPUSH
11179: CALL 5046 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11183: LD_INT 22
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 26
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 69
11273: PUSH
11274: LD_EXP 1
11278: PUSH
11279: LD_EXP 8
11283: PUSH
11284: LD_EXP 5
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: DIFF
11294: PPUSH
11295: LD_STRING DR0-Sol2-1
11297: PPUSH
11298: LD_STRING DR0-Sol2-1
11300: PPUSH
11301: CALL 5046 0 3
// if IsOk ( Cyrus ) then
11305: LD_EXP 4
11309: PPUSH
11310: CALL_OW 302
11314: IFFALSE 11328
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11316: LD_EXP 4
11320: PPUSH
11321: LD_STRING DR0-Cyrus-1
11323: PPUSH
11324: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11328: LD_EXP 1
11332: PPUSH
11333: LD_STRING DR0-JMM-1
11335: PPUSH
11336: CALL_OW 88
// end ;
11340: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11341: LD_EXP 5
11345: PPUSH
11346: CALL_OW 302
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 25
11363: PUSH
11364: LD_INT 16
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PPUSH
11375: CALL_OW 69
11379: PUSH
11380: LD_INT 0
11382: GREATER
11383: AND
11384: IFFALSE 11662
11386: GO 11388
11388: DISABLE
// begin DialogueOn ;
11389: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11393: LD_EXP 5
11397: PPUSH
11398: LD_STRING D10-Frank-1
11400: PPUSH
11401: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11405: LD_INT 22
11407: PUSH
11408: LD_INT 1
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 21
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 2
11427: PUSH
11428: LD_INT 25
11430: PUSH
11431: LD_INT 1
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 25
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 25
11460: PUSH
11461: LD_INT 4
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: PUSH
11485: LD_EXP 1
11489: PUSH
11490: LD_EXP 5
11494: PUSH
11495: LD_EXP 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: DIFF
11505: PPUSH
11506: LD_STRING D10-Sol1-1
11508: PPUSH
11509: LD_STRING D10-FSol1-1
11511: PPUSH
11512: CALL 5046 0 3
// Say ( Frank , D10-Frank-2 ) ;
11516: LD_EXP 5
11520: PPUSH
11521: LD_STRING D10-Frank-2
11523: PPUSH
11524: CALL_OW 88
// if IsOK ( Lisa ) then
11528: LD_EXP 2
11532: PPUSH
11533: CALL_OW 302
11537: IFFALSE 11553
// begin Say ( Lisa , D10-Lisa-2 ) ;
11539: LD_EXP 2
11543: PPUSH
11544: LD_STRING D10-Lisa-2
11546: PPUSH
11547: CALL_OW 88
// end else
11551: GO 11658
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11553: LD_INT 22
11555: PUSH
11556: LD_INT 1
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 1
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 2
11575: PUSH
11576: LD_INT 25
11578: PUSH
11579: LD_INT 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 25
11588: PUSH
11589: LD_INT 2
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 25
11598: PUSH
11599: LD_INT 3
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 25
11608: PUSH
11609: LD_INT 4
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: PPUSH
11628: CALL_OW 69
11632: PUSH
11633: LD_EXP 1
11637: PUSH
11638: LD_EXP 5
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: DIFF
11647: PPUSH
11648: LD_STRING D10-Sol1-2
11650: PPUSH
11651: LD_STRING D10-FSol1-2
11653: PPUSH
11654: CALL 5046 0 3
// end ; DialogueOff ;
11658: CALL_OW 7
// end ;
11662: END
// every 10 10$30 do
11663: GO 11665
11665: DISABLE
// begin HarrisonSupport ;
11666: CALL 1973 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11670: LD_EXP 17
11674: PPUSH
11675: CALL_OW 310
11679: PPUSH
11680: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11684: LD_EXP 17
11688: PPUSH
11689: LD_STRING DEng-Eng1-1
11691: PPUSH
11692: CALL_OW 88
// wait ( 1 1$0 ) ;
11696: LD_INT 2100
11698: PPUSH
11699: CALL_OW 67
// DialogueOn ;
11703: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11707: LD_EXP 14
11711: PPUSH
11712: LD_STRING DRem-Har-1
11714: PPUSH
11715: CALL_OW 94
// if contactWithRussian = 1 then
11719: LD_EXP 22
11723: PUSH
11724: LD_INT 1
11726: EQUAL
11727: IFFALSE 11743
// begin Say ( JMM , DRem-JMM-1 ) ;
11729: LD_EXP 1
11733: PPUSH
11734: LD_STRING DRem-JMM-1
11736: PPUSH
11737: CALL_OW 88
// end else
11741: GO 11755
// begin Say ( JMM , DRem-JMM-1a ) ;
11743: LD_EXP 1
11747: PPUSH
11748: LD_STRING DRem-JMM-1a
11750: PPUSH
11751: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11755: LD_EXP 14
11759: PPUSH
11760: LD_STRING DRem-Har-2
11762: PPUSH
11763: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11767: LD_STRING DenisInDelta
11769: PPUSH
11770: LD_INT 0
11772: PPUSH
11773: CALL_OW 30
11777: PUSH
11778: LD_INT 1
11780: EQUAL
11781: IFFALSE 11797
// begin Say ( JMM , DRem-JMM-2 ) ;
11783: LD_EXP 1
11787: PPUSH
11788: LD_STRING DRem-JMM-2
11790: PPUSH
11791: CALL_OW 88
// end else
11795: GO 11809
// begin Say ( JMM , DRem-JMM-2a ) ;
11797: LD_EXP 1
11801: PPUSH
11802: LD_STRING DRem-JMM-2a
11804: PPUSH
11805: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11809: LD_EXP 14
11813: PPUSH
11814: LD_STRING DRem-Har-3
11816: PPUSH
11817: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11821: LD_EXP 1
11825: PPUSH
11826: LD_STRING DRem-JMM-3
11828: PPUSH
11829: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11833: LD_EXP 14
11837: PPUSH
11838: LD_STRING DRem-Har-4
11840: PPUSH
11841: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11845: LD_STRING DenisInDelta
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL_OW 30
11855: PUSH
11856: LD_INT 1
11858: EQUAL
11859: IFFALSE 11887
// begin Say ( JMM , DRem-JMM-4 ) ;
11861: LD_EXP 1
11865: PPUSH
11866: LD_STRING DRem-JMM-4
11868: PPUSH
11869: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11873: LD_EXP 14
11877: PPUSH
11878: LD_STRING DRem-Har-5
11880: PPUSH
11881: CALL_OW 94
// end else
11885: GO 11920
// begin SetRestrict ( 36 , 1 , true ) ;
11887: LD_INT 36
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: LD_INT 1
11895: PPUSH
11896: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11900: LD_INT 15
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11913: LD_STRING MR
11915: PPUSH
11916: CALL_OW 337
// end ; DialogueOff ;
11920: CALL_OW 7
// end ;
11924: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11925: LD_STRING DenisInDelta
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL_OW 30
11935: PUSH
11936: LD_INT 1
11938: EQUAL
11939: IFFALSE 12070
11941: GO 11943
11943: DISABLE
// begin PrepareDenis ;
11944: CALL 1894 0 0
// CenterNowOnUnits ( Denis ) ;
11948: LD_EXP 9
11952: PPUSH
11953: CALL_OW 87
// DialogueOn ;
11957: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11961: LD_EXP 9
11965: PPUSH
11966: LD_STRING DDen-Den-1
11968: PPUSH
11969: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11973: LD_EXP 1
11977: PPUSH
11978: LD_STRING DDen-JMM-1
11980: PPUSH
11981: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11985: LD_EXP 9
11989: PPUSH
11990: LD_STRING DDen-Den-2
11992: PPUSH
11993: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11997: LD_EXP 1
12001: PPUSH
12002: LD_STRING DDen-JMM-2
12004: PPUSH
12005: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12009: LD_EXP 9
12013: PPUSH
12014: LD_STRING DDen-Den-3
12016: PPUSH
12017: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12021: LD_EXP 1
12025: PPUSH
12026: LD_STRING DDen-JMM-3
12028: PPUSH
12029: CALL_OW 88
// DialogueOff ;
12033: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12037: LD_INT 36
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: LD_INT 1
12045: PPUSH
12046: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12050: LD_INT 15
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12063: LD_STRING MR
12065: PPUSH
12066: CALL_OW 337
// end ;
12070: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12071: CALL 12116 0 0
12075: PUSH
12076: LD_EXP 9
12080: PPUSH
12081: CALL_OW 302
12085: AND
12086: IFFALSE 12115
12088: GO 12090
12090: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12091: LD_EXP 9
12095: PPUSH
12096: LD_STRING DR1-Den-1
12098: PPUSH
12099: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12103: LD_EXP 1
12107: PPUSH
12108: LD_STRING DR1-JMM-1
12110: PPUSH
12111: CALL_OW 88
// end ;
12115: END
// function CheckOptoLab ; var i ; begin
12116: LD_INT 0
12118: PPUSH
12119: PPUSH
// result = false ;
12120: LD_ADDR_VAR 0 1
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: LD_INT 30
12148: PUSH
12149: LD_INT 7
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 30
12158: PUSH
12159: LD_INT 8
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PPUSH
12175: CALL_OW 69
12179: PUSH
12180: FOR_IN
12181: IFFALSE 12233
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 268
12195: PUSH
12196: LD_INT 15
12198: EQUAL
12199: PUSH
12200: LD_VAR 0 2
12204: PPUSH
12205: LD_INT 2
12207: PPUSH
12208: CALL_OW 268
12212: PUSH
12213: LD_INT 15
12215: EQUAL
12216: OR
12217: IFFALSE 12229
// begin result = true ;
12219: LD_ADDR_VAR 0 1
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// break ;
12227: GO 12233
// end ; break ;
12229: GO 12233
// end ;
12231: GO 12180
12233: POP
12234: POP
// end ;
12235: LD_VAR 0 1
12239: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12240: LD_INT 15
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 321
12250: PUSH
12251: LD_INT 2
12253: EQUAL
12254: PUSH
12255: LD_EXP 9
12259: PPUSH
12260: CALL_OW 302
12264: AND
12265: IFFALSE 12497
12267: GO 12269
12269: DISABLE
// begin DialogueOn ;
12270: CALL_OW 6
// if IsOK ( Denis ) then
12274: LD_EXP 9
12278: PPUSH
12279: CALL_OW 302
12283: IFFALSE 12299
// begin Say ( Denis , DR2-Den-1 ) ;
12285: LD_EXP 9
12289: PPUSH
12290: LD_STRING DR2-Den-1
12292: PPUSH
12293: CALL_OW 88
// end else
12297: GO 12358
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12299: LD_INT 22
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 21
12311: PUSH
12312: LD_INT 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 25
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 69
12338: PUSH
12339: LD_EXP 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: DIFF
12347: PPUSH
12348: LD_STRING DR2-Sci1-1
12350: PPUSH
12351: LD_STRING DR2-FSci1-1
12353: PPUSH
12354: CALL 5046 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12358: LD_EXP 1
12362: PPUSH
12363: LD_STRING DR2-JMM-1
12365: PPUSH
12366: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12370: LD_INT 22
12372: PUSH
12373: LD_INT 1
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: LD_INT 25
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 25
12405: PUSH
12406: LD_INT 2
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 25
12415: PUSH
12416: LD_INT 3
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 25
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: PPUSH
12445: CALL_OW 69
12449: PUSH
12450: LD_EXP 1
12454: PUSH
12455: LD_EXP 9
12459: PUSH
12460: LD_EXP 8
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: DIFF
12470: PPUSH
12471: LD_STRING DR2-Sol1-1
12473: PPUSH
12474: LD_STRING DR2-Sol1-11
12476: PPUSH
12477: CALL 5046 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12481: LD_EXP 1
12485: PPUSH
12486: LD_STRING DR2-JMM-2
12488: PPUSH
12489: CALL_OW 88
// DialogueOff ;
12493: CALL_OW 7
// end ;
12497: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12498: LD_INT 22
12500: PUSH
12501: LD_INT 1
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 30
12510: PUSH
12511: LD_INT 36
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 69
12526: PUSH
12527: LD_INT 0
12529: EQUAL
12530: PUSH
12531: LD_INT 22
12533: PUSH
12534: LD_INT 1
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 21
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 33
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PUSH
12571: LD_INT 0
12573: GREATER
12574: AND
12575: PUSH
12576: LD_EXP 23
12580: PUSH
12581: LD_INT 0
12583: EQUAL
12584: AND
12585: IFFALSE 12711
12587: GO 12589
12589: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12590: LD_INT 22
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 21
12602: PUSH
12603: LD_INT 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 3
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: PPUSH
12625: CALL_OW 69
12629: PUSH
12630: LD_EXP 1
12634: PUSH
12635: LD_EXP 6
12639: PUSH
12640: LD_EXP 7
12644: PUSH
12645: LD_EXP 9
12649: PUSH
12650: LD_EXP 15
12654: PUSH
12655: LD_EXP 3
12659: PUSH
12660: LD_EXP 4
12664: PUSH
12665: LD_EXP 2
12669: PUSH
12670: LD_EXP 5
12674: PUSH
12675: LD_EXP 8
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: DIFF
12692: PPUSH
12693: LD_STRING D3a-Mech1-1
12695: PPUSH
12696: LD_STRING D3a-Mech1-1
12698: PPUSH
12699: CALL 5046 0 3
// firstTower = 2 ;
12703: LD_ADDR_EXP 23
12707: PUSH
12708: LD_INT 2
12710: ST_TO_ADDR
// end ;
12711: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12712: LD_INT 22
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 3
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 69
12740: PUSH
12741: LD_INT 0
12743: EQUAL
12744: IFFALSE 12859
12746: GO 12748
12748: DISABLE
12749: LD_INT 0
12751: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12752: LD_ADDR_VAR 0 1
12756: PUSH
12757: LD_INT 22
12759: PUSH
12760: LD_INT 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 21
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: LD_INT 25
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 25
12792: PUSH
12793: LD_INT 2
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 25
12802: PUSH
12803: LD_INT 3
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 25
12812: PUSH
12813: LD_INT 4
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 69
12836: PUSH
12837: FOR_IN
12838: IFFALSE 12857
// AddExperience ( i , 1 , 10000 ) ;
12840: LD_VAR 0 1
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_INT 10000
12850: PPUSH
12851: CALL_OW 492
12855: GO 12837
12857: POP
12858: POP
// end ;
12859: PPOPN 1
12861: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12862: LD_INT 22
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 30
12874: PUSH
12875: LD_INT 36
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 69
12890: PUSH
12891: LD_INT 0
12893: GREATER
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 33
12917: PUSH
12918: LD_INT 2
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 69
12934: PUSH
12935: LD_INT 0
12937: GREATER
12938: AND
12939: PUSH
12940: CALL 13522 0 0
12944: AND
12945: IFFALSE 13519
12947: GO 12949
12949: DISABLE
12950: LD_INT 0
12952: PPUSH
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12957: LD_ADDR_VAR 0 3
12961: PUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 30
12974: PUSH
12975: LD_INT 36
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12991: LD_ADDR_VAR 0 4
12995: PUSH
12996: LD_INT 22
12998: PUSH
12999: LD_INT 1
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 21
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 33
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13036: LD_ADDR_VAR 0 5
13040: PUSH
13041: EMPTY
13042: ST_TO_ADDR
// for i in tmpControlTowers do
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_VAR 0 3
13052: PUSH
13053: FOR_IN
13054: IFFALSE 13517
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13056: LD_EXP 1
13060: PPUSH
13061: CALL_OW 310
13065: PUSH
13066: LD_VAR 0 1
13070: EQUAL
13071: PUSH
13072: LD_EXP 1
13076: PPUSH
13077: CALL_OW 257
13081: PUSH
13082: LD_INT 3
13084: EQUAL
13085: AND
13086: IFFALSE 13216
// begin InGameOn ;
13088: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13092: LD_VAR 0 4
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13105: LD_EXP 1
13109: PPUSH
13110: LD_STRING D4a-JMM-1
13112: PPUSH
13113: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13117: LD_VAR 0 4
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PPUSH
13126: LD_EXP 1
13130: PPUSH
13131: CALL_OW 53
// wait ( 0 0$1 ) ;
13135: LD_INT 35
13137: PPUSH
13138: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13142: LD_VAR 0 4
13146: PUSH
13147: LD_INT 1
13149: ARRAY
13150: PPUSH
13151: LD_VAR 0 4
13155: PUSH
13156: LD_INT 1
13158: ARRAY
13159: PPUSH
13160: CALL_OW 250
13164: PUSH
13165: LD_INT 3
13167: PLUS
13168: PPUSH
13169: LD_VAR 0 4
13173: PUSH
13174: LD_INT 1
13176: ARRAY
13177: PPUSH
13178: CALL_OW 251
13182: PUSH
13183: LD_INT 2
13185: MINUS
13186: PPUSH
13187: CALL_OW 111
// wait ( 0 0$2 ) ;
13191: LD_INT 70
13193: PPUSH
13194: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13198: LD_EXP 1
13202: PPUSH
13203: LD_STRING D4b-JMM-1
13205: PPUSH
13206: CALL_OW 88
// InGameOff ;
13210: CALL_OW 9
// end else
13214: GO 13515
// begin InGameOn ;
13216: CALL_OW 8
// for j in UnitsInside ( i ) do
13220: LD_ADDR_VAR 0 2
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: CALL_OW 313
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13271
// if GetClass ( j ) = 3 then
13238: LD_VAR 0 2
13242: PPUSH
13243: CALL_OW 257
13247: PUSH
13248: LD_INT 3
13250: EQUAL
13251: IFFALSE 13269
// tmpMechanicInside = tmpMechanicInside ^ j ;
13253: LD_ADDR_VAR 0 5
13257: PUSH
13258: LD_VAR 0 5
13262: PUSH
13263: LD_VAR 0 2
13267: ADD
13268: ST_TO_ADDR
13269: GO 13235
13271: POP
13272: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13273: LD_VAR 0 5
13277: PUSH
13278: LD_INT 1
13280: ARRAY
13281: PPUSH
13282: CALL_OW 258
13286: PUSH
13287: LD_INT 1
13289: EQUAL
13290: IFFALSE 13308
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13292: LD_VAR 0 5
13296: PUSH
13297: LD_INT 1
13299: ARRAY
13300: PPUSH
13301: LD_STRING D4a-Mech1-1
13303: PPUSH
13304: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13308: LD_VAR 0 5
13312: PUSH
13313: LD_INT 1
13315: ARRAY
13316: PPUSH
13317: CALL_OW 258
13321: PUSH
13322: LD_INT 2
13324: EQUAL
13325: IFFALSE 13343
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13327: LD_VAR 0 5
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: LD_STRING D4a-FMech1-1
13338: PPUSH
13339: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13343: LD_VAR 0 4
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13356: LD_VAR 0 4
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: LD_VAR 0 5
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 53
// wait ( 0 0$1 ) ;
13378: LD_INT 35
13380: PPUSH
13381: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13385: LD_VAR 0 4
13389: PUSH
13390: LD_INT 1
13392: ARRAY
13393: PPUSH
13394: LD_VAR 0 4
13398: PUSH
13399: LD_INT 1
13401: ARRAY
13402: PPUSH
13403: CALL_OW 250
13407: PUSH
13408: LD_INT 3
13410: PLUS
13411: PPUSH
13412: LD_VAR 0 4
13416: PUSH
13417: LD_INT 1
13419: ARRAY
13420: PPUSH
13421: CALL_OW 251
13425: PUSH
13426: LD_INT 2
13428: MINUS
13429: PPUSH
13430: CALL_OW 111
// wait ( 0 0$2 ) ;
13434: LD_INT 70
13436: PPUSH
13437: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13441: LD_VAR 0 5
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: CALL_OW 258
13454: PUSH
13455: LD_INT 1
13457: EQUAL
13458: IFFALSE 13476
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13460: LD_VAR 0 5
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: PPUSH
13469: LD_STRING D4b-Mech1-1
13471: PPUSH
13472: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13476: LD_VAR 0 5
13480: PUSH
13481: LD_INT 1
13483: ARRAY
13484: PPUSH
13485: CALL_OW 258
13489: PUSH
13490: LD_INT 2
13492: EQUAL
13493: IFFALSE 13511
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13495: LD_VAR 0 5
13499: PUSH
13500: LD_INT 1
13502: ARRAY
13503: PPUSH
13504: LD_STRING D4b-FMech1-1
13506: PPUSH
13507: CALL_OW 88
// InGameOff ;
13511: CALL_OW 9
// end ; end ;
13515: GO 13053
13517: POP
13518: POP
// end ;
13519: PPOPN 5
13521: END
// function CheckMehInside ; var i , j ; begin
13522: LD_INT 0
13524: PPUSH
13525: PPUSH
13526: PPUSH
// result = false ;
13527: LD_ADDR_VAR 0 1
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13535: LD_ADDR_VAR 0 2
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 30
13552: PUSH
13553: LD_INT 36
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: PUSH
13569: FOR_IN
13570: IFFALSE 13621
// begin for j in UnitsInside ( i ) do
13572: LD_ADDR_VAR 0 3
13576: PUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL_OW 313
13586: PUSH
13587: FOR_IN
13588: IFFALSE 13617
// begin if GetClass ( j ) = 3 then
13590: LD_VAR 0 3
13594: PPUSH
13595: CALL_OW 257
13599: PUSH
13600: LD_INT 3
13602: EQUAL
13603: IFFALSE 13615
// begin result = true ;
13605: LD_ADDR_VAR 0 1
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// break ;
13613: GO 13617
// end ; end ;
13615: GO 13587
13617: POP
13618: POP
// end ;
13619: GO 13569
13621: POP
13622: POP
// end ;
13623: LD_VAR 0 1
13627: RET
// every 25 25$0 do
13628: GO 13630
13630: DISABLE
// begin PrepareKurt ;
13631: CALL 17023 0 0
// end ;
13635: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13636: LD_EXP 19
13640: PPUSH
13641: LD_INT 9
13643: PPUSH
13644: CALL_OW 308
13648: PUSH
13649: LD_EXP 21
13653: PUSH
13654: LD_INT 1
13656: EQUAL
13657: AND
13658: IFFALSE 13732
13660: GO 13662
13662: DISABLE
// begin RemoveUnit ( Kurt ) ;
13663: LD_EXP 19
13667: PPUSH
13668: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13672: LD_EXP 19
13676: PPUSH
13677: LD_STRING Kurt
13679: PPUSH
13680: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13684: LD_INT 1
13686: PPUSH
13687: LD_INT 2
13689: PPUSH
13690: CALL_OW 81
13694: PUSH
13695: LD_INT 0
13697: EQUAL
13698: IFFALSE 13708
// KurtStatus = 1 ;
13700: LD_ADDR_EXP 20
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13708: LD_INT 1
13710: PPUSH
13711: LD_INT 2
13713: PPUSH
13714: CALL_OW 81
13718: PUSH
13719: LD_INT 2
13721: EQUAL
13722: IFFALSE 13732
// KurtStatus = 2 ;
13724: LD_ADDR_EXP 20
13728: PUSH
13729: LD_INT 2
13731: ST_TO_ADDR
// end ;
13732: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13733: LD_INT 1
13735: PPUSH
13736: LD_INT 2
13738: PPUSH
13739: CALL_OW 81
13743: PUSH
13744: LD_INT 2
13746: EQUAL
13747: PUSH
13748: LD_EXP 19
13752: PPUSH
13753: CALL_OW 302
13757: AND
13758: IFFALSE 13783
13760: GO 13762
13762: DISABLE
// begin DialogueOn ;
13763: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13767: LD_EXP 19
13771: PPUSH
13772: LD_STRING D2a-Kurt-1
13774: PPUSH
13775: CALL_OW 88
// DialogueOff ;
13779: CALL_OW 7
// end ;
13783: END
// every 35 35$0 do
13784: GO 13786
13786: DISABLE
// begin PrepareJoan ;
13787: CALL 2457 0 0
// wait ( 1 1$0 ) ;
13791: LD_INT 2100
13793: PPUSH
13794: CALL_OW 67
// if IsOK ( Lisa ) then
13798: LD_EXP 2
13802: PPUSH
13803: CALL_OW 302
13807: IFFALSE 13937
// begin DialogueOn ;
13809: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13813: LD_EXP 2
13817: PPUSH
13818: LD_STRING D7-Lisa-1
13820: PPUSH
13821: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13825: LD_EXP 1
13829: PPUSH
13830: LD_STRING D7-JMM-1
13832: PPUSH
13833: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13837: LD_EXP 2
13841: PPUSH
13842: LD_STRING D7-Lisa-2
13844: PPUSH
13845: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13849: LD_EXP 1
13853: PPUSH
13854: LD_STRING D7-JMM-2
13856: PPUSH
13857: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13861: LD_EXP 2
13865: PPUSH
13866: LD_STRING D7-Lisa-3
13868: PPUSH
13869: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13873: LD_EXP 1
13877: PPUSH
13878: LD_STRING D7-JMM-3
13880: PPUSH
13881: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13885: LD_EXP 2
13889: PPUSH
13890: LD_STRING D7-Lisa-4
13892: PPUSH
13893: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13897: LD_EXP 1
13901: PPUSH
13902: LD_STRING D7-JMM-4
13904: PPUSH
13905: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13909: LD_EXP 1
13913: PPUSH
13914: LD_STRING D7-JMM-4a
13916: PPUSH
13917: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13921: LD_EXP 2
13925: PPUSH
13926: LD_STRING D7-Lisa-5
13928: PPUSH
13929: CALL_OW 88
// DialogueOff ;
13933: CALL_OW 7
// end ; end ;
13937: END
// every 0 0$1 do var i , others ;
13938: GO 13940
13940: DISABLE
13941: LD_INT 0
13943: PPUSH
13944: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
13945: LD_ADDR_VAR 0 2
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_INT 1
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 21
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 2
13972: PUSH
13973: LD_INT 25
13975: PUSH
13976: LD_INT 1
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 25
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 25
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 4
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PUSH
14030: LD_EXP 13
14034: PUSH
14035: EMPTY
14036: LIST
14037: DIFF
14038: ST_TO_ADDR
// for i in others do
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_VAR 0 2
14048: PUSH
14049: FOR_IN
14050: IFFALSE 14087
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14052: LD_EXP 13
14056: PPUSH
14057: LD_VAR 0 1
14061: PPUSH
14062: CALL_OW 296
14066: PUSH
14067: LD_INT 6
14069: LESS
14070: IFFALSE 14085
// begin disable ;
14072: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14073: LD_EXP 13
14077: PPUSH
14078: LD_STRING D5-Sol1-1
14080: PPUSH
14081: CALL_OW 88
// end ; end ;
14085: GO 14049
14087: POP
14088: POP
// end ;
14089: PPOPN 2
14091: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14092: LD_INT 22
14094: PUSH
14095: LD_INT 1
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 33
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 69
14120: PUSH
14121: LD_INT 2
14123: GREATEREQUAL
14124: IFFALSE 14144
14126: GO 14128
14128: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14129: LD_STRING MRa
14131: PPUSH
14132: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14136: LD_ADDR_EXP 28
14140: PUSH
14141: LD_INT 1
14143: ST_TO_ADDR
// end ;
14144: END
// every 4 4$0 do
14145: GO 14147
14147: DISABLE
// PrepareRandoms ( 1 ) ;
14148: LD_INT 1
14150: PPUSH
14151: CALL 3482 0 1
14155: END
// every 10 10$0 do
14156: GO 14158
14158: DISABLE
// PrepareRandoms ( 2 ) ;
14159: LD_INT 2
14161: PPUSH
14162: CALL 3482 0 1
14166: END
// every 28 28$0 do
14167: GO 14169
14169: DISABLE
// PrepareRandoms ( 4 ) ;
14170: LD_INT 4
14172: PPUSH
14173: CALL 3482 0 1
14177: END
// every 32 32$0 do
14178: GO 14180
14180: DISABLE
// PrepareRandoms ( 5 ) ;
14181: LD_INT 5
14183: PPUSH
14184: CALL 3482 0 1
14188: END
// every 35 35$30 do
14189: GO 14191
14191: DISABLE
// PrepareRandoms ( 6 ) ;
14192: LD_INT 6
14194: PPUSH
14195: CALL 3482 0 1
14199: END
// every 37 37$20 do
14200: GO 14202
14202: DISABLE
// PrepareRandoms ( 7 ) ;
14203: LD_INT 7
14205: PPUSH
14206: CALL 3482 0 1
14210: END
// every 5 5$20 do
14211: GO 14213
14213: DISABLE
// begin DialogueOn ;
14214: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14218: LD_EXP 10
14222: PPUSH
14223: LD_STRING D12a-Sci-1
14225: PPUSH
14226: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14230: LD_EXP 1
14234: PPUSH
14235: LD_STRING D12a-JMM-1
14237: PPUSH
14238: CALL_OW 88
// DialogueOff ;
14242: CALL_OW 7
// cratesStatus = 1 ;
14246: LD_ADDR_EXP 38
14250: PUSH
14251: LD_INT 1
14253: ST_TO_ADDR
// end ;
14254: END
// every 13 13$0 do
14255: GO 14257
14257: DISABLE
// begin DialogueOn ;
14258: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14262: LD_EXP 10
14266: PPUSH
14267: LD_STRING D12b-Sci-1
14269: PPUSH
14270: CALL_OW 94
// DialogueOff ;
14274: CALL_OW 7
// cratesStatus = 2 ;
14278: LD_ADDR_EXP 38
14282: PUSH
14283: LD_INT 2
14285: ST_TO_ADDR
// end ;
14286: END
// every 32 32$0 do
14287: GO 14289
14289: DISABLE
// begin DialogueOn ;
14290: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14294: LD_EXP 10
14298: PPUSH
14299: LD_STRING D12c-Sci-1
14301: PPUSH
14302: CALL_OW 94
// DialogueOff ;
14306: CALL_OW 7
// wait ( 3 3$0 ) ;
14310: LD_INT 6300
14312: PPUSH
14313: CALL_OW 67
// DialogueOn ;
14317: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14321: LD_EXP 10
14325: PPUSH
14326: LD_STRING D12d-Sci-1
14328: PPUSH
14329: CALL_OW 94
// DialogueOff ;
14333: CALL_OW 7
// cratesStatus = 1 ;
14337: LD_ADDR_EXP 38
14341: PUSH
14342: LD_INT 1
14344: ST_TO_ADDR
// end ;
14345: END
// every 42 42$0 do
14346: GO 14348
14348: DISABLE
// begin DialogueOn ;
14349: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14353: LD_EXP 10
14357: PPUSH
14358: LD_STRING D12e-Sci-1
14360: PPUSH
14361: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14365: LD_EXP 1
14369: PPUSH
14370: LD_STRING D12e-JMM-1
14372: PPUSH
14373: CALL_OW 88
// DialogueOff ;
14377: CALL_OW 7
// cratesStatus = 2 ;
14381: LD_ADDR_EXP 38
14385: PUSH
14386: LD_INT 2
14388: ST_TO_ADDR
// end ;
14389: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14390: LD_INT 22
14392: PUSH
14393: LD_INT 6
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 21
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 34
14412: PUSH
14413: LD_INT 51
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: PUSH
14430: LD_INT 0
14432: GREATER
14433: IFFALSE 14516
14435: GO 14437
14437: DISABLE
14438: LD_INT 0
14440: PPUSH
// begin enable ;
14441: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14442: LD_ADDR_VAR 0 1
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_INT 6
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 2
14459: PUSH
14460: LD_INT 21
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 21
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 69
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14514
// ComAgressiveMove ( i , 138 , 168 ) ;
14497: LD_VAR 0 1
14501: PPUSH
14502: LD_INT 138
14504: PPUSH
14505: LD_INT 168
14507: PPUSH
14508: CALL_OW 114
14512: GO 14494
14514: POP
14515: POP
// end ;
14516: PPOPN 1
14518: END
// every 0 0$1 do var i ;
14519: GO 14521
14521: DISABLE
14522: LD_INT 0
14524: PPUSH
// begin enable ;
14525: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14526: LD_ADDR_VAR 0 1
14530: PUSH
14531: LD_INT 5
14533: PPUSH
14534: LD_INT 2
14536: PUSH
14537: LD_INT 22
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 22
14549: PUSH
14550: LD_INT 6
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: PPUSH
14565: CALL_OW 70
14569: PUSH
14570: FOR_IN
14571: IFFALSE 14635
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14573: LD_INT 5
14575: PPUSH
14576: LD_INT 22
14578: PUSH
14579: LD_INT 6
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 34
14588: PUSH
14589: LD_INT 51
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 70
14604: PUSH
14605: LD_INT 0
14607: GREATER
14608: IFFALSE 14624
// sendedConvoys = sendedConvoys + 1 ;
14610: LD_ADDR_EXP 39
14614: PUSH
14615: LD_EXP 39
14619: PUSH
14620: LD_INT 1
14622: PLUS
14623: ST_TO_ADDR
// RemoveUnit ( i ) ;
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 64
// end ;
14633: GO 14570
14635: POP
14636: POP
// end ; end_of_file
14637: PPOPN 1
14639: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14640: LD_VAR 0 1
14644: PUSH
14645: LD_INT 1
14647: EQUAL
14648: PUSH
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 3
14656: EQUAL
14657: AND
14658: IFFALSE 14668
// contactWithRussian = 1 ;
14660: LD_ADDR_EXP 22
14664: PUSH
14665: LD_INT 1
14667: ST_TO_ADDR
// end ;
14668: PPOPN 2
14670: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 266
14680: PUSH
14681: LD_INT 36
14683: EQUAL
14684: PUSH
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 255
14694: PUSH
14695: LD_INT 1
14697: EQUAL
14698: AND
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_INT 1
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 21
14712: PUSH
14713: LD_INT 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: PUSH
14740: LD_INT 0
14742: EQUAL
14743: AND
14744: PUSH
14745: LD_EXP 23
14749: PUSH
14750: LD_INT 0
14752: EQUAL
14753: AND
14754: IFFALSE 14823
// begin firstTower = 1 ;
14756: LD_ADDR_EXP 23
14760: PUSH
14761: LD_INT 1
14763: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14764: LD_INT 22
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: LD_EXP 1
14808: PUSH
14809: EMPTY
14810: LIST
14811: DIFF
14812: PPUSH
14813: LD_STRING D3b-Mech1-1
14815: PPUSH
14816: LD_STRING D3b-Mech1-1
14818: PPUSH
14819: CALL 5046 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 266
14832: PUSH
14833: LD_INT 0
14835: EQUAL
14836: PUSH
14837: LD_VAR 0 1
14841: PPUSH
14842: CALL_OW 255
14846: PUSH
14847: LD_INT 1
14849: EQUAL
14850: AND
14851: IFFALSE 14865
// SetBName ( building , theta ) ;
14853: LD_VAR 0 1
14857: PPUSH
14858: LD_STRING theta
14860: PPUSH
14861: CALL_OW 500
// if GetSide ( building ) = 3 then
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 255
14874: PUSH
14875: LD_INT 3
14877: EQUAL
14878: IFFALSE 14952
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14880: LD_ADDR_EXP 31
14884: PUSH
14885: LD_EXP 31
14889: PPUSH
14890: LD_INT 1
14892: PPUSH
14893: CALL_OW 3
14897: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14898: LD_ADDR_EXP 31
14902: PUSH
14903: LD_EXP 31
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 3
14915: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14916: LD_ADDR_EXP 31
14920: PUSH
14921: LD_EXP 31
14925: PPUSH
14926: LD_INT 1
14928: PPUSH
14929: CALL_OW 3
14933: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14934: LD_ADDR_EXP 31
14938: PUSH
14939: LD_EXP 31
14943: PPUSH
14944: LD_INT 1
14946: PPUSH
14947: CALL_OW 3
14951: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 255
14961: PUSH
14962: LD_INT 3
14964: EQUAL
14965: PUSH
14966: LD_VAR 0 1
14970: PPUSH
14971: CALL_OW 266
14975: PUSH
14976: LD_INT 0
14978: EQUAL
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 266
14989: PUSH
14990: LD_INT 2
14992: EQUAL
14993: OR
14994: PUSH
14995: LD_VAR 0 1
14999: PPUSH
15000: CALL_OW 266
15004: PUSH
15005: LD_INT 4
15007: EQUAL
15008: OR
15009: PUSH
15010: EMPTY
15011: LIST
15012: AND
15013: IFFALSE 15024
// ComUpgrade ( building ) ;
15015: LD_VAR 0 1
15019: PPUSH
15020: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 255
15033: PUSH
15034: LD_INT 3
15036: EQUAL
15037: PUSH
15038: LD_VAR 0 1
15042: PPUSH
15043: CALL_OW 266
15047: PUSH
15048: LD_INT 32
15050: EQUAL
15051: AND
15052: IFFALSE 15093
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15054: LD_VAR 0 1
15058: PPUSH
15059: LD_INT 42
15061: PUSH
15062: LD_INT 43
15064: PUSH
15065: LD_INT 44
15067: PUSH
15068: LD_INT 46
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 1
15079: PPUSH
15080: LD_INT 4
15082: PPUSH
15083: CALL_OW 12
15087: ARRAY
15088: PPUSH
15089: CALL_OW 208
// end ; end ;
15093: PPOPN 1
15095: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
15096: LD_VAR 0 1
15100: PPUSH
15101: CALL_OW 255
15105: PUSH
15106: LD_INT 1
15108: EQUAL
15109: PUSH
15110: LD_VAR 0 1
15114: PPUSH
15115: CALL_OW 247
15119: PUSH
15120: LD_INT 1
15122: EQUAL
15123: AND
15124: PUSH
15125: LD_VAR 0 1
15129: PPUSH
15130: CALL_OW 257
15134: PUSH
15135: LD_INT 1
15137: EQUAL
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 257
15148: PUSH
15149: LD_INT 2
15151: EQUAL
15152: OR
15153: PUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 257
15163: PUSH
15164: LD_INT 3
15166: EQUAL
15167: OR
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 257
15178: PUSH
15179: LD_INT 4
15181: EQUAL
15182: OR
15183: PUSH
15184: EMPTY
15185: LIST
15186: AND
15187: IFFALSE 15203
// unitLost = unitLost + 1 ;
15189: LD_ADDR_EXP 30
15193: PUSH
15194: LD_EXP 30
15198: PUSH
15199: LD_INT 1
15201: PLUS
15202: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL_OW 255
15212: PUSH
15213: LD_INT 3
15215: EQUAL
15216: PUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: CALL_OW 247
15226: PUSH
15227: LD_INT 3
15229: EQUAL
15230: AND
15231: IFFALSE 15938
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15233: LD_VAR 0 1
15237: PPUSH
15238: CALL_OW 266
15242: PUSH
15243: LD_INT 31
15245: EQUAL
15246: PUSH
15247: LD_VAR 0 1
15251: PPUSH
15252: CALL_OW 266
15256: PUSH
15257: LD_INT 32
15259: EQUAL
15260: OR
15261: PUSH
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 266
15271: PUSH
15272: LD_INT 36
15274: EQUAL
15275: OR
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 266
15286: PUSH
15287: LD_INT 0
15289: EQUAL
15290: OR
15291: PUSH
15292: LD_VAR 0 1
15296: PPUSH
15297: CALL_OW 266
15301: PUSH
15302: LD_INT 24
15304: EQUAL
15305: OR
15306: PUSH
15307: LD_VAR 0 1
15311: PPUSH
15312: CALL_OW 266
15316: PUSH
15317: LD_INT 17
15319: EQUAL
15320: OR
15321: PUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 266
15331: PUSH
15332: LD_INT 25
15334: EQUAL
15335: OR
15336: PUSH
15337: LD_VAR 0 1
15341: PPUSH
15342: CALL_OW 266
15346: PUSH
15347: LD_INT 19
15349: EQUAL
15350: OR
15351: PUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 266
15361: PUSH
15362: LD_INT 20
15364: EQUAL
15365: OR
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 266
15376: PUSH
15377: LD_INT 18
15379: EQUAL
15380: OR
15381: PUSH
15382: LD_VAR 0 1
15386: PPUSH
15387: CALL_OW 266
15391: PUSH
15392: LD_INT 21
15394: EQUAL
15395: OR
15396: PUSH
15397: LD_VAR 0 1
15401: PPUSH
15402: CALL_OW 266
15406: PUSH
15407: LD_INT 23
15409: EQUAL
15410: OR
15411: PUSH
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 266
15421: PUSH
15422: LD_INT 16
15424: EQUAL
15425: OR
15426: PUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 266
15436: PUSH
15437: LD_INT 6
15439: EQUAL
15440: OR
15441: PUSH
15442: LD_VAR 0 1
15446: PPUSH
15447: CALL_OW 266
15451: PUSH
15452: LD_INT 29
15454: EQUAL
15455: OR
15456: PUSH
15457: LD_VAR 0 1
15461: PPUSH
15462: CALL_OW 266
15466: PUSH
15467: LD_INT 26
15469: EQUAL
15470: OR
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 266
15481: PUSH
15482: LD_INT 30
15484: EQUAL
15485: OR
15486: PUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 266
15496: PUSH
15497: LD_INT 28
15499: EQUAL
15500: OR
15501: PUSH
15502: LD_VAR 0 1
15506: PPUSH
15507: CALL_OW 266
15511: PUSH
15512: LD_INT 27
15514: EQUAL
15515: OR
15516: PUSH
15517: LD_VAR 0 1
15521: PPUSH
15522: CALL_OW 266
15526: PUSH
15527: LD_INT 33
15529: EQUAL
15530: OR
15531: PUSH
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 266
15541: PUSH
15542: LD_INT 2
15544: EQUAL
15545: OR
15546: PUSH
15547: LD_VAR 0 1
15551: PPUSH
15552: CALL_OW 266
15556: PUSH
15557: LD_INT 4
15559: EQUAL
15560: OR
15561: IFFALSE 15647
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15563: LD_ADDR_EXP 31
15567: PUSH
15568: LD_EXP 31
15572: PUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 266
15582: ADD
15583: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15584: LD_ADDR_EXP 31
15588: PUSH
15589: LD_EXP 31
15593: PUSH
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 250
15603: ADD
15604: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15605: LD_ADDR_EXP 31
15609: PUSH
15610: LD_EXP 31
15614: PUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 251
15624: ADD
15625: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15626: LD_ADDR_EXP 31
15630: PUSH
15631: LD_EXP 31
15635: PUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 254
15645: ADD
15646: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 266
15656: PUSH
15657: LD_INT 1
15659: EQUAL
15660: IFFALSE 15739
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15662: LD_ADDR_EXP 31
15666: PUSH
15667: LD_EXP 31
15671: PUSH
15672: LD_INT 0
15674: ADD
15675: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15676: LD_ADDR_EXP 31
15680: PUSH
15681: LD_EXP 31
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 250
15695: ADD
15696: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15697: LD_ADDR_EXP 31
15701: PUSH
15702: LD_EXP 31
15706: PUSH
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL_OW 251
15716: ADD
15717: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15718: LD_ADDR_EXP 31
15722: PUSH
15723: LD_EXP 31
15727: PUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 254
15737: ADD
15738: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 266
15748: PUSH
15749: LD_INT 3
15751: EQUAL
15752: IFFALSE 15831
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15754: LD_ADDR_EXP 31
15758: PUSH
15759: LD_EXP 31
15763: PUSH
15764: LD_INT 2
15766: ADD
15767: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15768: LD_ADDR_EXP 31
15772: PUSH
15773: LD_EXP 31
15777: PUSH
15778: LD_VAR 0 1
15782: PPUSH
15783: CALL_OW 250
15787: ADD
15788: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15789: LD_ADDR_EXP 31
15793: PUSH
15794: LD_EXP 31
15798: PUSH
15799: LD_VAR 0 1
15803: PPUSH
15804: CALL_OW 251
15808: ADD
15809: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15810: LD_ADDR_EXP 31
15814: PUSH
15815: LD_EXP 31
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 254
15829: ADD
15830: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15831: LD_VAR 0 1
15835: PPUSH
15836: CALL_OW 266
15840: PUSH
15841: LD_INT 5
15843: EQUAL
15844: IFFALSE 15923
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15846: LD_ADDR_EXP 31
15850: PUSH
15851: LD_EXP 31
15855: PUSH
15856: LD_INT 4
15858: ADD
15859: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15860: LD_ADDR_EXP 31
15864: PUSH
15865: LD_EXP 31
15869: PUSH
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 250
15879: ADD
15880: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15881: LD_ADDR_EXP 31
15885: PUSH
15886: LD_EXP 31
15890: PUSH
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 251
15900: ADD
15901: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15902: LD_ADDR_EXP 31
15906: PUSH
15907: LD_EXP 31
15911: PUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 254
15921: ADD
15922: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 then
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 257
15932: PUSH
15933: LD_INT 3
15935: EQUAL
15936: IFFALSE 15938
// begin end ; end ; end ;
15938: PPOPN 1
15940: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15941: LD_INT 0
15943: PPUSH
15944: PPUSH
15945: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15946: LD_VAR 0 1
15950: PPUSH
15951: CALL_OW 264
15955: PUSH
15956: LD_INT 51
15958: EQUAL
15959: PUSH
15960: LD_VAR 0 1
15964: PPUSH
15965: CALL_OW 255
15969: PUSH
15970: LD_INT 3
15972: EQUAL
15973: AND
15974: IFFALSE 16036
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15976: LD_ADDR_VAR 0 5
15980: PUSH
15981: LD_INT 2
15983: PPUSH
15984: CALL_OW 274
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 275
15996: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15997: LD_INT 2
15999: PPUSH
16000: CALL_OW 274
16004: PPUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 5
16012: PUSH
16013: LD_INT 100
16015: MINUS
16016: PPUSH
16017: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_INT 1
16028: PPUSH
16029: LD_INT 100
16031: PPUSH
16032: CALL_OW 291
// end ; if building = rufabsupp then
16036: LD_VAR 0 2
16040: PUSH
16041: LD_INT 17
16043: EQUAL
16044: IFFALSE 16058
// SetSide ( vehicle , 6 ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: LD_INT 6
16053: PPUSH
16054: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
16058: LD_VAR 0 2
16062: PPUSH
16063: CALL_OW 255
16067: PUSH
16068: LD_INT 3
16070: EQUAL
16071: PUSH
16072: LD_VAR 0 2
16076: PPUSH
16077: CALL_OW 302
16081: AND
16082: IFFALSE 16152
// begin uc_side = 3 ;
16084: LD_ADDR_OWVAR 20
16088: PUSH
16089: LD_INT 3
16091: ST_TO_ADDR
// uc_nation = 3 ;
16092: LD_ADDR_OWVAR 21
16096: PUSH
16097: LD_INT 3
16099: ST_TO_ADDR
// hc_gallery :=  ;
16100: LD_ADDR_OWVAR 33
16104: PUSH
16105: LD_STRING 
16107: ST_TO_ADDR
// hc_name :=  ;
16108: LD_ADDR_OWVAR 26
16112: PUSH
16113: LD_STRING 
16115: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16116: LD_INT 0
16118: PPUSH
16119: LD_EXP 34
16123: PPUSH
16124: LD_EXP 35
16128: PPUSH
16129: CALL_OW 12
16133: PPUSH
16134: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16138: CALL_OW 44
16142: PPUSH
16143: LD_VAR 0 2
16147: PPUSH
16148: CALL_OW 52
// end ; if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16152: LD_VAR 0 2
16156: PUSH
16157: LD_INT 21
16159: EQUAL
16160: PUSH
16161: LD_VAR 0 2
16165: PPUSH
16166: CALL_OW 255
16170: PUSH
16171: LD_INT 3
16173: EQUAL
16174: AND
16175: PUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 264
16185: PUSH
16186: LD_INT 42
16188: EQUAL
16189: PUSH
16190: LD_VAR 0 1
16194: PPUSH
16195: CALL_OW 264
16199: PUSH
16200: LD_INT 43
16202: EQUAL
16203: OR
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 264
16214: PUSH
16215: LD_INT 44
16217: EQUAL
16218: OR
16219: PUSH
16220: EMPTY
16221: LIST
16222: AND
16223: IFFALSE 16241
// russianTanks = russianTanks ^ vehicle ;
16225: LD_ADDR_EXP 36
16229: PUSH
16230: LD_EXP 36
16234: PUSH
16235: LD_VAR 0 1
16239: ADD
16240: ST_TO_ADDR
// end ;
16241: PPOPN 5
16243: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 255
16253: PUSH
16254: LD_INT 3
16256: EQUAL
16257: IFFALSE 16273
// tamedApemans = tamedApemans + 1 ;
16259: LD_ADDR_EXP 32
16263: PUSH
16264: LD_EXP 32
16268: PUSH
16269: LD_INT 1
16271: PLUS
16272: ST_TO_ADDR
// end ;
16273: PPOPN 2
16275: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16276: LD_INT 0
16278: PPUSH
16279: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 255
16289: PUSH
16290: LD_INT 3
16292: EQUAL
16293: PUSH
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL_OW 247
16303: PUSH
16304: LD_INT 2
16306: EQUAL
16307: AND
16308: PUSH
16309: LD_VAR 0 1
16313: PPUSH
16314: CALL_OW 264
16318: PUSH
16319: LD_INT 42
16321: EQUAL
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 264
16332: PUSH
16333: LD_INT 43
16335: EQUAL
16336: OR
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 264
16347: PUSH
16348: LD_INT 44
16350: EQUAL
16351: OR
16352: PUSH
16353: EMPTY
16354: LIST
16355: AND
16356: IFFALSE 16448
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16358: LD_INT 21
16360: PPUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 265
16370: PPUSH
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 262
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 263
16390: PPUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 264
16400: PPUSH
16401: CALL_OW 185
// tmpMeh = UnitsInside ( unit ) ;
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 313
16419: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16420: LD_VAR 0 3
16424: PPUSH
16425: CALL_OW 121
// wait ( 0 0$01 ) ;
16429: LD_INT 35
16431: PPUSH
16432: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16436: LD_VAR 0 3
16440: PPUSH
16441: LD_INT 21
16443: PPUSH
16444: CALL_OW 120
// end ; end ; end_of_file
16448: PPOPN 3
16450: END
// every 0 0$30 trigger cratesStatus = 1 do
16451: LD_EXP 38
16455: PUSH
16456: LD_INT 1
16458: EQUAL
16459: IFFALSE 16523
16461: GO 16463
16463: DISABLE
// begin enable ;
16464: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16465: LD_INT 350
16467: PUSH
16468: LD_INT 1050
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: PPUSH
16478: LD_INT 2
16480: PPUSH
16481: CALL_OW 12
16485: ARRAY
16486: PPUSH
16487: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16491: LD_INT 4
16493: PUSH
16494: LD_INT 5
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ARRAY
16512: PPUSH
16513: LD_INT 7
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: CALL_OW 55
// end ;
16523: END
// every 1 1$0 trigger cratesStatus = 2 do
16524: LD_EXP 38
16528: PUSH
16529: LD_INT 2
16531: EQUAL
16532: IFFALSE 16596
16534: GO 16536
16536: DISABLE
// begin enable ;
16537: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16538: LD_INT 3150
16540: PUSH
16541: LD_INT 4550
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 1
16550: PPUSH
16551: LD_INT 2
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: PPUSH
16560: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16564: LD_INT 2
16566: PUSH
16567: LD_INT 5
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 1
16576: PPUSH
16577: LD_INT 2
16579: PPUSH
16580: CALL_OW 12
16584: ARRAY
16585: PPUSH
16586: LD_INT 8
16588: PPUSH
16589: LD_INT 1
16591: PPUSH
16592: CALL_OW 55
// end ;
16596: END
// every 0 0$30 + 0 0$10 do
16597: GO 16599
16599: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16600: LD_INT 4
16602: PUSH
16603: LD_INT 5
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 1
16612: PPUSH
16613: LD_INT 2
16615: PPUSH
16616: CALL_OW 12
16620: ARRAY
16621: PPUSH
16622: LD_INT 8
16624: PPUSH
16625: LD_INT 1
16627: PPUSH
16628: CALL_OW 55
// Wait ( 0 0$15 ) ;
16632: LD_INT 525
16634: PPUSH
16635: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16639: LD_INT 4
16641: PUSH
16642: LD_INT 5
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PPUSH
16652: LD_INT 2
16654: PPUSH
16655: CALL_OW 12
16659: ARRAY
16660: PPUSH
16661: LD_INT 8
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 55
// Wait ( 0 0$20 ) ;
16671: LD_INT 700
16673: PPUSH
16674: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16678: LD_INT 4
16680: PUSH
16681: LD_INT 5
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 1
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 12
16698: ARRAY
16699: PPUSH
16700: LD_INT 8
16702: PPUSH
16703: LD_INT 1
16705: PPUSH
16706: CALL_OW 55
// end ; end_of_file
16710: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16711: LD_EXP 24
16715: PUSH
16716: LD_INT 1
16718: EQUAL
16719: IFFALSE 17020
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16729: LD_ADDR_VAR 0 2
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 21
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 30
16759: PUSH
16760: LD_INT 0
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 30
16769: PUSH
16770: LD_INT 1
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: PPUSH
16787: CALL_OW 69
16791: ST_TO_ADDR
// for i in tmp do
16792: LD_ADDR_VAR 0 1
16796: PUSH
16797: LD_VAR 0 2
16801: PUSH
16802: FOR_IN
16803: IFFALSE 16836
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16805: LD_ADDR_VAR 0 3
16809: PUSH
16810: LD_VAR 0 3
16814: PUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 274
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 275
16832: PLUS
16833: ST_TO_ADDR
16834: GO 16802
16836: POP
16837: POP
// strings = [ ] ;
16838: LD_ADDR_EXP 27
16842: PUSH
16843: EMPTY
16844: ST_TO_ADDR
// if tmp = 0 then
16845: LD_VAR 0 2
16849: PUSH
16850: LD_INT 0
16852: EQUAL
16853: IFFALSE 16878
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16855: LD_ADDR_EXP 27
16859: PUSH
16860: LD_EXP 27
16864: PUSH
16865: LD_STRING #Am06-1
16867: PUSH
16868: LD_EXP 25
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: ADD
16877: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 0
16885: GREATER
16886: PUSH
16887: LD_EXP 25
16891: PUSH
16892: LD_VAR 0 3
16896: GREATER
16897: AND
16898: IFFALSE 16929
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16900: LD_ADDR_EXP 27
16904: PUSH
16905: LD_EXP 27
16909: PUSH
16910: LD_STRING #Am06-1
16912: PUSH
16913: LD_EXP 25
16917: PUSH
16918: LD_VAR 0 3
16922: MINUS
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: ADD
16928: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
16929: LD_VAR 0 2
16933: PUSH
16934: LD_INT 0
16936: GREATER
16937: PUSH
16938: LD_EXP 25
16942: PUSH
16943: LD_VAR 0 3
16947: LESSEQUAL
16948: AND
16949: IFFALSE 16972
// strings = strings ^ [ #Am06-1 , 0 ] ;
16951: LD_ADDR_EXP 27
16955: PUSH
16956: LD_EXP 27
16960: PUSH
16961: LD_STRING #Am06-1
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: ADD
16971: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16972: LD_ADDR_EXP 26
16976: PUSH
16977: LD_EXP 26
16981: PUSH
16982: LD_INT 35
16984: MINUS
16985: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16986: LD_ADDR_EXP 27
16990: PUSH
16991: LD_EXP 27
16995: PUSH
16996: LD_STRING #Am06-2
16998: PUSH
16999: LD_EXP 26
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: ADD
17008: ST_TO_ADDR
// display_strings = strings ;
17009: LD_ADDR_OWVAR 47
17013: PUSH
17014: LD_EXP 27
17018: ST_TO_ADDR
// enable ;
17019: ENABLE
// end ; end_of_file
17020: PPOPN 3
17022: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17023: LD_INT 0
17025: PPUSH
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
17031: PPUSH
// j = 0 ;
17032: LD_ADDR_VAR 0 3
17036: PUSH
17037: LD_INT 0
17039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17040: LD_INT 35
17042: PPUSH
17043: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 25
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 25
17087: PUSH
17088: LD_INT 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 3
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: LD_INT 25
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: PUSH
17132: FOR_IN
17133: IFFALSE 17239
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17135: LD_INT 22
17137: PUSH
17138: LD_INT 3
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 21
17160: PUSH
17161: LD_INT 2
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 21
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 59
17180: PUSH
17181: EMPTY
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 91
17193: PUSH
17194: LD_VAR 0 2
17198: PUSH
17199: LD_INT 25
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: PPUSH
17212: CALL_OW 69
17216: NOT
17217: IFFALSE 17237
// begin tmp = i ;
17219: LD_ADDR_VAR 0 4
17223: PUSH
17224: LD_VAR 0 2
17228: ST_TO_ADDR
// j = 1 ;
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_INT 1
17236: ST_TO_ADDR
// end ; end ;
17237: GO 17132
17239: POP
17240: POP
// until j = 1 ;
17241: LD_VAR 0 3
17245: PUSH
17246: LD_INT 1
17248: EQUAL
17249: IFFALSE 17040
// blockSpawn = 1 ;
17251: LD_ADDR_EXP 29
17255: PUSH
17256: LD_INT 1
17258: ST_TO_ADDR
// uc_side = 2 ;
17259: LD_ADDR_OWVAR 20
17263: PUSH
17264: LD_INT 2
17266: ST_TO_ADDR
// uc_nation = 2 ;
17267: LD_ADDR_OWVAR 21
17271: PUSH
17272: LD_INT 2
17274: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17275: LD_ADDR_EXP 19
17279: PUSH
17280: LD_STRING Kurt
17282: PPUSH
17283: LD_INT 0
17285: PPUSH
17286: CALL 4983 0 2
17290: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17291: LD_EXP 19
17295: PPUSH
17296: LD_VAR 0 4
17300: PPUSH
17301: CALL_OW 250
17305: PPUSH
17306: LD_VAR 0 4
17310: PPUSH
17311: CALL_OW 251
17315: PPUSH
17316: LD_INT 5
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: CALL_OW 50
// InGameOn ;
17326: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17330: LD_EXP 19
17334: PPUSH
17335: CALL_OW 87
// wait ( 0 0$2 ) ;
17339: LD_INT 70
17341: PPUSH
17342: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17346: LD_VAR 0 4
17350: PPUSH
17351: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17355: LD_VAR 0 4
17359: PPUSH
17360: CALL_OW 122
// wait ( 0 0$1 ) ;
17364: LD_INT 35
17366: PPUSH
17367: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17371: LD_EXP 19
17375: PPUSH
17376: LD_VAR 0 4
17380: PPUSH
17381: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17385: LD_VAR 0 4
17389: PPUSH
17390: LD_EXP 19
17394: PPUSH
17395: CALL_OW 119
// DialogueOn ;
17399: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17403: LD_EXP 19
17407: PPUSH
17408: LD_STRING D2-Kurt-1
17410: PPUSH
17411: CALL_OW 88
// if tmp = JMM then
17415: LD_VAR 0 4
17419: PUSH
17420: LD_EXP 1
17424: EQUAL
17425: IFFALSE 17517
// begin Say ( JMM , D2-JMM-1 ) ;
17427: LD_EXP 1
17431: PPUSH
17432: LD_STRING D2-JMM-1
17434: PPUSH
17435: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17439: LD_EXP 19
17443: PPUSH
17444: LD_STRING D2-Kurt-2
17446: PPUSH
17447: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17451: LD_EXP 1
17455: PPUSH
17456: LD_STRING D2-JMM-2
17458: PPUSH
17459: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17463: LD_EXP 19
17467: PPUSH
17468: LD_STRING D2-Kurt-3
17470: PPUSH
17471: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17475: LD_EXP 1
17479: PPUSH
17480: LD_STRING D2-JMM-3
17482: PPUSH
17483: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17487: LD_EXP 19
17491: PPUSH
17492: LD_STRING D2-Kurt-4
17494: PPUSH
17495: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17499: LD_EXP 1
17503: PPUSH
17504: LD_STRING D2-JMM-4
17506: PPUSH
17507: CALL_OW 88
// DialogueOff ;
17511: CALL_OW 7
// end else
17515: GO 17827
// begin if GetSex ( tmp ) = 1 then
17517: LD_VAR 0 4
17521: PPUSH
17522: CALL_OW 258
17526: PUSH
17527: LD_INT 1
17529: EQUAL
17530: IFFALSE 17544
// Say ( tmp , D2-Sol1-1 ) ;
17532: LD_VAR 0 4
17536: PPUSH
17537: LD_STRING D2-Sol1-1
17539: PPUSH
17540: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17544: LD_VAR 0 4
17548: PPUSH
17549: CALL_OW 258
17553: PUSH
17554: LD_INT 2
17556: EQUAL
17557: IFFALSE 17571
// Say ( tmp , D2-FSol1-1 ) ;
17559: LD_VAR 0 4
17563: PPUSH
17564: LD_STRING D2-FSol1-1
17566: PPUSH
17567: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17571: LD_EXP 19
17575: PPUSH
17576: LD_STRING D2-Kurt-2
17578: PPUSH
17579: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17583: LD_VAR 0 4
17587: PPUSH
17588: CALL_OW 258
17592: PUSH
17593: LD_INT 1
17595: EQUAL
17596: IFFALSE 17610
// Say ( tmp , D2-Sol1-2 ) ;
17598: LD_VAR 0 4
17602: PPUSH
17603: LD_STRING D2-Sol1-2
17605: PPUSH
17606: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17610: LD_VAR 0 4
17614: PPUSH
17615: CALL_OW 258
17619: PUSH
17620: LD_INT 2
17622: EQUAL
17623: IFFALSE 17637
// Say ( tmp , D2-FSol1-2 ) ;
17625: LD_VAR 0 4
17629: PPUSH
17630: LD_STRING D2-FSol1-2
17632: PPUSH
17633: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17637: LD_EXP 19
17641: PPUSH
17642: LD_STRING D2-Kurt-3
17644: PPUSH
17645: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17649: LD_VAR 0 4
17653: PPUSH
17654: CALL_OW 258
17658: PUSH
17659: LD_INT 1
17661: EQUAL
17662: IFFALSE 17676
// Say ( tmp , D2-Sol1-3 ) ;
17664: LD_VAR 0 4
17668: PPUSH
17669: LD_STRING D2-Sol1-3
17671: PPUSH
17672: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17676: LD_VAR 0 4
17680: PPUSH
17681: CALL_OW 258
17685: PUSH
17686: LD_INT 2
17688: EQUAL
17689: IFFALSE 17703
// Say ( tmp , D2-FSol1-3 ) ;
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_STRING D2-FSol1-3
17698: PPUSH
17699: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17703: LD_EXP 19
17707: PPUSH
17708: LD_STRING D2-Kurt-4
17710: PPUSH
17711: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17715: LD_VAR 0 4
17719: PPUSH
17720: CALL_OW 258
17724: PUSH
17725: LD_INT 1
17727: EQUAL
17728: IFFALSE 17742
// Say ( tmp , D2-Sol1-4 ) ;
17730: LD_VAR 0 4
17734: PPUSH
17735: LD_STRING D2-Sol1-4
17737: PPUSH
17738: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17742: LD_VAR 0 4
17746: PPUSH
17747: CALL_OW 258
17751: PUSH
17752: LD_INT 2
17754: EQUAL
17755: IFFALSE 17769
// Say ( tmp , D2-FSol1-4 ) ;
17757: LD_VAR 0 4
17761: PPUSH
17762: LD_STRING D2-FSol1-4
17764: PPUSH
17765: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17769: LD_VAR 0 4
17773: PPUSH
17774: CALL_OW 258
17778: PUSH
17779: LD_INT 1
17781: EQUAL
17782: IFFALSE 17796
// Say ( tmp , D2-Sol1-5 ) ;
17784: LD_VAR 0 4
17788: PPUSH
17789: LD_STRING D2-Sol1-5
17791: PPUSH
17792: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17796: LD_VAR 0 4
17800: PPUSH
17801: CALL_OW 258
17805: PUSH
17806: LD_INT 2
17808: EQUAL
17809: IFFALSE 17823
// Say ( tmp , D2-FSol1-5 ) ;
17811: LD_VAR 0 4
17815: PPUSH
17816: LD_STRING D2-FSol1-5
17818: PPUSH
17819: CALL_OW 88
// DialogueOff ;
17823: CALL_OW 7
// end ; dec = ShowQuery1 ;
17827: LD_ADDR_VAR 0 6
17831: PUSH
17832: CALL 5585 0 0
17836: ST_TO_ADDR
// if dec = 1 then
17837: LD_VAR 0 6
17841: PUSH
17842: LD_INT 1
17844: EQUAL
17845: IFFALSE 17887
// begin DialogueOn ;
17847: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17851: LD_EXP 19
17855: PPUSH
17856: LD_STRING D2a-Kurt-1
17858: PPUSH
17859: CALL_OW 88
// DialogueOff ;
17863: CALL_OW 7
// InGameOff ;
17867: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17871: LD_INT 1
17873: PPUSH
17874: LD_INT 2
17876: PPUSH
17877: LD_INT 2
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 80
// end ; if dec = 2 then
17887: LD_VAR 0 6
17891: PUSH
17892: LD_INT 2
17894: EQUAL
17895: IFFALSE 18395
// begin DialogueOn ;
17897: CALL_OW 6
// if tmp = JMM then
17901: LD_VAR 0 4
17905: PUSH
17906: LD_EXP 1
17910: EQUAL
17911: IFFALSE 17967
// begin Say ( JMM , D2b-JMM-1 ) ;
17913: LD_EXP 1
17917: PPUSH
17918: LD_STRING D2b-JMM-1
17920: PPUSH
17921: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17925: LD_EXP 19
17929: PPUSH
17930: LD_STRING D2b-Kurt-1
17932: PPUSH
17933: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17937: LD_EXP 1
17941: PPUSH
17942: LD_STRING D2b-JMM-2
17944: PPUSH
17945: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17949: LD_EXP 19
17953: PPUSH
17954: LD_STRING D2b-Kurt-2
17956: PPUSH
17957: CALL_OW 88
// DialogueOff ;
17961: CALL_OW 7
// end else
17965: GO 18157
// begin if GetSex ( tmp ) = 1 then
17967: LD_VAR 0 4
17971: PPUSH
17972: CALL_OW 258
17976: PUSH
17977: LD_INT 1
17979: EQUAL
17980: IFFALSE 17994
// Say ( tmp , D2b-Sol1-1 ) ;
17982: LD_VAR 0 4
17986: PPUSH
17987: LD_STRING D2b-Sol1-1
17989: PPUSH
17990: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17994: LD_VAR 0 4
17998: PPUSH
17999: CALL_OW 258
18003: PUSH
18004: LD_INT 2
18006: EQUAL
18007: IFFALSE 18021
// Say ( tmp , D2b-FSol1-1 ) ;
18009: LD_VAR 0 4
18013: PPUSH
18014: LD_STRING D2b-FSol1-1
18016: PPUSH
18017: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18021: LD_EXP 19
18025: PPUSH
18026: LD_STRING D2b-Kurt-1
18028: PPUSH
18029: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18033: LD_VAR 0 4
18037: PPUSH
18038: CALL_OW 258
18042: PUSH
18043: LD_INT 1
18045: EQUAL
18046: IFFALSE 18060
// Say ( tmp , D2b-Sol1-2 ) ;
18048: LD_VAR 0 4
18052: PPUSH
18053: LD_STRING D2b-Sol1-2
18055: PPUSH
18056: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18060: LD_VAR 0 4
18064: PPUSH
18065: CALL_OW 258
18069: PUSH
18070: LD_INT 2
18072: EQUAL
18073: IFFALSE 18087
// Say ( tmp , D2b-FSol1-2 ) ;
18075: LD_VAR 0 4
18079: PPUSH
18080: LD_STRING D2b-FSol1-2
18082: PPUSH
18083: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18087: LD_EXP 19
18091: PPUSH
18092: LD_STRING D2b-Kurt-2
18094: PPUSH
18095: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18099: LD_VAR 0 4
18103: PPUSH
18104: CALL_OW 258
18108: PUSH
18109: LD_INT 1
18111: EQUAL
18112: IFFALSE 18126
// Say ( tmp , D2c-Sol1-2 ) ;
18114: LD_VAR 0 4
18118: PPUSH
18119: LD_STRING D2c-Sol1-2
18121: PPUSH
18122: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18126: LD_VAR 0 4
18130: PPUSH
18131: CALL_OW 258
18135: PUSH
18136: LD_INT 2
18138: EQUAL
18139: IFFALSE 18153
// Say ( tmp , D2c-FSol1-2 ) ;
18141: LD_VAR 0 4
18145: PPUSH
18146: LD_STRING D2c-FSol1-2
18148: PPUSH
18149: CALL_OW 88
// DialogueOff ;
18153: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18157: LD_ADDR_VAR 0 7
18161: PUSH
18162: CALL 5659 0 0
18166: ST_TO_ADDR
// if dec2 = 1 then
18167: LD_VAR 0 7
18171: PUSH
18172: LD_INT 1
18174: EQUAL
18175: IFFALSE 18217
// begin DialogueOn ;
18177: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18181: LD_EXP 19
18185: PPUSH
18186: LD_STRING D2a-Kurt-1
18188: PPUSH
18189: CALL_OW 88
// DialogueOff ;
18193: CALL_OW 7
// InGameOff ;
18197: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18201: LD_INT 1
18203: PPUSH
18204: LD_INT 2
18206: PPUSH
18207: LD_INT 2
18209: PPUSH
18210: LD_INT 1
18212: PPUSH
18213: CALL_OW 80
// end ; if dec2 = 2 then
18217: LD_VAR 0 7
18221: PUSH
18222: LD_INT 2
18224: EQUAL
18225: IFFALSE 18395
// begin if tmp = JMM then
18227: LD_VAR 0 4
18231: PUSH
18232: LD_EXP 1
18236: EQUAL
18237: IFFALSE 18297
// begin DialogueOn ;
18239: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18243: LD_EXP 1
18247: PPUSH
18248: LD_STRING D2c-JMM-1
18250: PPUSH
18251: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18255: LD_EXP 19
18259: PPUSH
18260: LD_STRING D2c-Kurt-1
18262: PPUSH
18263: CALL_OW 88
// DialogueOff ;
18267: CALL_OW 7
// InGameOff ;
18271: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18275: LD_EXP 19
18279: PPUSH
18280: LD_INT 9
18282: PPUSH
18283: CALL_OW 113
// readyToEscape = 1 ;
18287: LD_ADDR_EXP 21
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// end else
18295: GO 18395
// begin DialogueOn ;
18297: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18301: LD_VAR 0 4
18305: PPUSH
18306: CALL_OW 258
18310: PUSH
18311: LD_INT 1
18313: EQUAL
18314: IFFALSE 18328
// Say ( tmp , D2c-Sol1-1 ) ;
18316: LD_VAR 0 4
18320: PPUSH
18321: LD_STRING D2c-Sol1-1
18323: PPUSH
18324: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18328: LD_VAR 0 4
18332: PPUSH
18333: CALL_OW 258
18337: PUSH
18338: LD_INT 2
18340: EQUAL
18341: IFFALSE 18355
// Say ( tmp , D2c-FSol1-1 ) ;
18343: LD_VAR 0 4
18347: PPUSH
18348: LD_STRING D2c-FSol1-1
18350: PPUSH
18351: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18355: LD_EXP 19
18359: PPUSH
18360: LD_STRING D2c-Kurt-1
18362: PPUSH
18363: CALL_OW 88
// DialogueOff ;
18367: CALL_OW 7
// InGameOff ;
18371: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18375: LD_EXP 19
18379: PPUSH
18380: LD_INT 9
18382: PPUSH
18383: CALL_OW 113
// readyToEscape = 1 ;
18387: LD_ADDR_EXP 21
18391: PUSH
18392: LD_INT 1
18394: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18395: LD_VAR 0 6
18399: PUSH
18400: LD_INT 3
18402: EQUAL
18403: IFFALSE 18577
// begin DialogueOn ;
18405: CALL_OW 6
// if tmp = JMM then
18409: LD_VAR 0 4
18413: PUSH
18414: LD_EXP 1
18418: EQUAL
18419: IFFALSE 18479
// begin DialogueOn ;
18421: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18425: LD_EXP 1
18429: PPUSH
18430: LD_STRING D2c-JMM-1
18432: PPUSH
18433: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18437: LD_EXP 19
18441: PPUSH
18442: LD_STRING D2c-Kurt-1
18444: PPUSH
18445: CALL_OW 88
// DialogueOff ;
18449: CALL_OW 7
// InGameOff ;
18453: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18457: LD_EXP 19
18461: PPUSH
18462: LD_INT 9
18464: PPUSH
18465: CALL_OW 113
// readyToEscape = 1 ;
18469: LD_ADDR_EXP 21
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// end else
18477: GO 18577
// begin DialogueOn ;
18479: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18483: LD_VAR 0 4
18487: PPUSH
18488: CALL_OW 258
18492: PUSH
18493: LD_INT 1
18495: EQUAL
18496: IFFALSE 18510
// Say ( tmp , D2c-Sol1-1 ) ;
18498: LD_VAR 0 4
18502: PPUSH
18503: LD_STRING D2c-Sol1-1
18505: PPUSH
18506: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18510: LD_VAR 0 4
18514: PPUSH
18515: CALL_OW 258
18519: PUSH
18520: LD_INT 2
18522: EQUAL
18523: IFFALSE 18537
// Say ( tmp , D2c-FSol1-1 ) ;
18525: LD_VAR 0 4
18529: PPUSH
18530: LD_STRING D2c-FSol1-1
18532: PPUSH
18533: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18537: LD_EXP 19
18541: PPUSH
18542: LD_STRING D2c-Kurt-1
18544: PPUSH
18545: CALL_OW 88
// DialogueOff ;
18549: CALL_OW 7
// InGameOff ;
18553: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18557: LD_EXP 19
18561: PPUSH
18562: LD_INT 9
18564: PPUSH
18565: CALL_OW 113
// readyToEscape = 1 ;
18569: LD_ADDR_EXP 21
18573: PUSH
18574: LD_INT 1
18576: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18577: LD_ADDR_EXP 29
18581: PUSH
18582: LD_INT 0
18584: ST_TO_ADDR
// end ; end_of_file
18585: LD_VAR 0 1
18589: RET
// every 0 0$1 do
18590: GO 18592
18592: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18593: LD_INT 3
18595: PPUSH
18596: LD_INT 32
18598: PPUSH
18599: LD_INT 3
18601: PPUSH
18602: CALL 5714 0 3
18606: END
// every 0 0$1 do
18607: GO 18609
18609: DISABLE
// begin enable ;
18610: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18611: LD_INT 3
18613: PPUSH
18614: LD_INT 2
18616: PPUSH
18617: CALL 5799 0 2
// if disableHealAI = 0 then
18621: LD_EXP 33
18625: PUSH
18626: LD_INT 0
18628: EQUAL
18629: IFFALSE 18647
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18631: LD_INT 3
18633: PPUSH
18634: LD_INT 10
18636: PPUSH
18637: LD_INT 11
18639: PPUSH
18640: LD_INT 32
18642: PPUSH
18643: CALL 6058 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18647: LD_INT 3
18649: PPUSH
18650: LD_INT 51
18652: PPUSH
18653: LD_INT 7
18655: PPUSH
18656: CALL 7847 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18660: LD_INT 3
18662: PPUSH
18663: LD_INT 14
18665: PPUSH
18666: LD_INT 121
18668: PPUSH
18669: LD_INT 100
18671: PPUSH
18672: CALL 7008 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18676: LD_INT 3
18678: PPUSH
18679: LD_INT 1
18681: PPUSH
18682: CALL 6496 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18686: LD_INT 3
18688: PPUSH
18689: LD_EXP 31
18693: PPUSH
18694: CALL 7990 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18698: LD_INT 3
18700: PPUSH
18701: LD_INT 8
18703: PUSH
18704: LD_INT 67
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PPUSH
18714: LD_INT 2
18716: PPUSH
18717: CALL_OW 12
18721: ARRAY
18722: PPUSH
18723: LD_INT 11
18725: PPUSH
18726: CALL 8196 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18730: LD_INT 3
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL 8553 0 2
// end ;
18740: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18741: LD_INT 22
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 21
18753: PUSH
18754: LD_INT 2
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 55
18763: PUSH
18764: EMPTY
18765: LIST
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 34
18772: PUSH
18773: LD_INT 51
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: PPUSH
18790: CALL_OW 69
18794: PUSH
18795: LD_INT 0
18797: EQUAL
18798: PUSH
18799: LD_INT 21
18801: PPUSH
18802: CALL_OW 255
18806: PUSH
18807: LD_INT 3
18809: EQUAL
18810: AND
18811: PUSH
18812: LD_INT 21
18814: PPUSH
18815: CALL_OW 302
18819: AND
18820: PUSH
18821: LD_INT 2
18823: PPUSH
18824: CALL_OW 255
18828: PUSH
18829: LD_INT 3
18831: EQUAL
18832: AND
18833: PUSH
18834: LD_INT 2
18836: PPUSH
18837: CALL_OW 302
18841: AND
18842: IFFALSE 19026
18844: GO 18846
18846: DISABLE
// begin enable ;
18847: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18848: LD_INT 2
18850: PPUSH
18851: CALL_OW 274
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: LD_INT 1000
18861: PPUSH
18862: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
18866: LD_INT 3
18868: PPUSH
18869: LD_INT 21
18871: PPUSH
18872: LD_INT 5
18874: PUSH
18875: LD_INT 6
18877: PUSH
18878: LD_INT 6
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: LD_OWVAR 67
18890: ARRAY
18891: PPUSH
18892: LD_INT 43
18894: PUSH
18895: LD_INT 43
18897: PUSH
18898: LD_INT 44
18900: PUSH
18901: LD_INT 44
18903: PUSH
18904: LD_INT 46
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 43
18916: PUSH
18917: LD_INT 43
18919: PUSH
18920: LD_INT 44
18922: PUSH
18923: LD_INT 44
18925: PUSH
18926: LD_INT 44
18928: PUSH
18929: LD_INT 46
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 44
18942: PUSH
18943: LD_INT 44
18945: PUSH
18946: LD_INT 44
18948: PUSH
18949: LD_INT 44
18951: PUSH
18952: LD_INT 46
18954: PUSH
18955: LD_INT 46
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: LIST
18970: PUSH
18971: LD_OWVAR 67
18975: ARRAY
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: LD_INT 22
18985: PUSH
18986: LD_INT 22
18988: PUSH
18989: LD_INT 24
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: PPUSH
18999: LD_INT 2
19001: PPUSH
19002: CALL_OW 12
19006: ARRAY
19007: PUSH
19008: LD_INT 24
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: LIST
19015: PUSH
19016: LD_OWVAR 67
19020: ARRAY
19021: PPUSH
19022: CALL 6342 0 7
// end ;
19026: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19027: LD_INT 17
19029: PPUSH
19030: CALL_OW 255
19034: PUSH
19035: LD_INT 3
19037: EQUAL
19038: PUSH
19039: LD_INT 17
19041: PPUSH
19042: CALL_OW 302
19046: AND
19047: PUSH
19048: LD_INT 2
19050: PPUSH
19051: CALL_OW 255
19055: PUSH
19056: LD_INT 3
19058: EQUAL
19059: AND
19060: PUSH
19061: LD_INT 2
19063: PPUSH
19064: CALL_OW 302
19068: AND
19069: IFFALSE 19136
19071: GO 19073
19073: DISABLE
// begin enable ;
19074: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19075: LD_INT 17
19077: PPUSH
19078: LD_INT 22
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_INT 42
19089: PUSH
19090: LD_INT 43
19092: PUSH
19093: LD_INT 44
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 1
19103: PPUSH
19104: LD_INT 3
19106: PPUSH
19107: CALL_OW 12
19111: ARRAY
19112: PPUSH
19113: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19117: LD_INT 17
19119: PPUSH
19120: LD_INT 22
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: LD_INT 51
19131: PPUSH
19132: CALL_OW 185
// end ;
19136: END
// every 2 2$0 do var i , j ;
19137: GO 19139
19139: DISABLE
19140: LD_INT 0
19142: PPUSH
19143: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19144: LD_INT 14700
19146: PUSH
19147: LD_INT 33600
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 1
19156: PPUSH
19157: LD_INT 2
19159: PPUSH
19160: CALL_OW 12
19164: ARRAY
19165: PPUSH
19166: CALL_OW 67
// disableHealAI = 1 ;
19170: LD_ADDR_EXP 33
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19178: LD_ADDR_VAR 0 1
19182: PUSH
19183: LD_INT 22
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 25
19195: PUSH
19196: LD_INT 4
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: PUSH
19212: FOR_IN
19213: IFFALSE 19226
// ComExitBuilding ( i ) ;
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 122
19224: GO 19212
19226: POP
19227: POP
// wait ( 0 0$1 ) ;
19228: LD_INT 35
19230: PPUSH
19231: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19235: LD_INT 35
19237: PPUSH
19238: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19242: LD_ADDR_VAR 0 1
19246: PUSH
19247: LD_INT 22
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 25
19259: PUSH
19260: LD_INT 4
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: PUSH
19276: FOR_IN
19277: IFFALSE 19354
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19279: LD_ADDR_VAR 0 2
19283: PUSH
19284: LD_INT 19
19286: PPUSH
19287: LD_INT 22
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 25
19299: PUSH
19300: LD_INT 12
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 70
19315: PUSH
19316: FOR_IN
19317: IFFALSE 19350
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL_OW 250
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: CALL_OW 251
19343: PPUSH
19344: CALL_OW 191
// end ;
19348: GO 19316
19350: POP
19351: POP
// end ;
19352: GO 19276
19354: POP
19355: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19356: LD_INT 22
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 25
19368: PUSH
19369: LD_INT 4
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PPUSH
19380: CALL_OW 69
19384: PUSH
19385: LD_INT 0
19387: EQUAL
19388: PUSH
19389: LD_EXP 32
19393: PUSH
19394: LD_INT 6
19396: PUSH
19397: LD_INT 7
19399: PUSH
19400: LD_INT 8
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_OWVAR 67
19412: ARRAY
19413: GREATEREQUAL
19414: OR
19415: PUSH
19416: LD_INT 19
19418: PPUSH
19419: LD_INT 22
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 25
19431: PUSH
19432: LD_INT 12
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 70
19447: PUSH
19448: LD_INT 0
19450: EQUAL
19451: OR
19452: IFFALSE 19235
// disableHealAI = 0 ;
19454: LD_ADDR_EXP 33
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19462: LD_ADDR_VAR 0 1
19466: PUSH
19467: LD_INT 22
19469: PUSH
19470: LD_INT 3
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 25
19479: PUSH
19480: LD_INT 12
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PPUSH
19491: CALL_OW 69
19495: PUSH
19496: FOR_IN
19497: IFFALSE 19513
// SetClass ( i , 16 ) ;
19499: LD_VAR 0 1
19503: PPUSH
19504: LD_INT 16
19506: PPUSH
19507: CALL_OW 336
19511: GO 19496
19513: POP
19514: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19515: LD_ADDR_VAR 0 1
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 3
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 25
19532: PUSH
19533: LD_INT 4
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: PUSH
19549: FOR_IN
19550: IFFALSE 19569
// ComMoveXY ( i , 113 , 94 ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_INT 113
19559: PPUSH
19560: LD_INT 94
19562: PPUSH
19563: CALL_OW 111
19567: GO 19549
19569: POP
19570: POP
// end ;
19571: PPOPN 2
19573: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19574: LD_INT 21
19576: PPUSH
19577: CALL_OW 255
19581: PUSH
19582: LD_INT 3
19584: EQUAL
19585: PUSH
19586: LD_INT 21
19588: PPUSH
19589: CALL_OW 302
19593: AND
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_INT 3
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 34
19607: PUSH
19608: LD_INT 51
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PPUSH
19619: CALL_OW 69
19623: PUSH
19624: LD_INT 0
19626: EQUAL
19627: AND
19628: IFFALSE 19660
19630: GO 19632
19632: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19633: LD_INT 21
19635: PPUSH
19636: LD_INT 23
19638: PPUSH
19639: LD_INT 1
19641: PPUSH
19642: LD_INT 1
19644: PPUSH
19645: LD_INT 51
19647: PPUSH
19648: CALL_OW 185
// wait ( 5 5$0 ) ;
19652: LD_INT 10500
19654: PPUSH
19655: CALL_OW 67
// enable ;
19659: ENABLE
// end ; end_of_file
19660: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19661: LD_EXP 26
19665: PUSH
19666: LD_INT 0
19668: LESSEQUAL
19669: IFFALSE 19818
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
19678: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19679: LD_ADDR_VAR 0 2
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 21
19696: PUSH
19697: LD_INT 3
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: LD_INT 30
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 30
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: PPUSH
19737: CALL_OW 69
19741: ST_TO_ADDR
// for i in tmp do
19742: LD_ADDR_VAR 0 1
19746: PUSH
19747: LD_VAR 0 2
19751: PUSH
19752: FOR_IN
19753: IFFALSE 19786
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: LD_VAR 0 3
19764: PUSH
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 274
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 275
19782: PLUS
19783: ST_TO_ADDR
19784: GO 19752
19786: POP
19787: POP
// if yourCrates >= needCrates then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_EXP 25
19797: GREATEREQUAL
19798: IFFALSE 19811
// begin FinishMission ( yourCrates ) ;
19800: LD_VAR 0 3
19804: PPUSH
19805: CALL 19821 0 1
// end else
19809: GO 19818
// begin YouLost ( matmin ) ;
19811: LD_STRING matmin
19813: PPUSH
19814: CALL_OW 104
// end ; end ;
19818: PPOPN 3
19820: END
// export function FinishMission ( crates ) ; begin
19821: LD_INT 0
19823: PPUSH
// if crates + 100 > crates then
19824: LD_VAR 0 1
19828: PUSH
19829: LD_INT 100
19831: PLUS
19832: PUSH
19833: LD_VAR 0 1
19837: GREATER
19838: IFFALSE 19862
// begin AddMedal ( cans , 1 ) ;
19840: LD_STRING cans
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19850: LD_INT 1
19852: PPUSH
19853: LD_STRING 06_crates_1
19855: PPUSH
19856: CALL_OW 39
// end else
19860: GO 19883
// begin AddMedal ( cans , - 1 ) ;
19862: LD_STRING cans
19864: PPUSH
19865: LD_INT 1
19867: NEG
19868: PPUSH
19869: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19873: LD_INT 0
19875: PPUSH
19876: LD_STRING 06_crates_1
19878: PPUSH
19879: CALL_OW 39
// end ; if unitLost < 2 then
19883: LD_EXP 30
19887: PUSH
19888: LD_INT 2
19890: LESS
19891: IFFALSE 19905
// begin AddMedal ( people , 1 ) ;
19893: LD_STRING people
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: CALL_OW 101
// end else
19903: GO 19916
// begin AddMedal ( people , - 1 ) ;
19905: LD_STRING people
19907: PPUSH
19908: LD_INT 1
19910: NEG
19911: PPUSH
19912: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19916: LD_EXP 28
19920: PPUSH
19921: LD_STRING 06_remoteVehs_1
19923: PPUSH
19924: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19928: LD_EXP 28
19932: PUSH
19933: LD_INT 1
19935: EQUAL
19936: IFFALSE 19950
// begin AddMedal ( remote , 1 ) ;
19938: LD_STRING remote
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 101
// end else
19948: GO 19990
// begin if GetTech ( 18 , 1 ) = state_enabled then
19950: LD_INT 18
19952: PPUSH
19953: LD_INT 1
19955: PPUSH
19956: CALL_OW 321
19960: PUSH
19961: LD_INT 1
19963: EQUAL
19964: IFFALSE 19979
// begin AddMedal ( remote , - 1 ) ;
19966: LD_STRING remote
19968: PPUSH
19969: LD_INT 1
19971: NEG
19972: PPUSH
19973: CALL_OW 101
// end else
19977: GO 19990
// begin AddMedal ( remote , - 2 ) ;
19979: LD_STRING remote
19981: PPUSH
19982: LD_INT 2
19984: NEG
19985: PPUSH
19986: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
19990: LD_EXP 20
19994: PPUSH
19995: LD_STRING 06_KurtStatus_1
19997: PPUSH
19998: CALL_OW 39
// GiveMedals ( Main ) ;
20002: LD_STRING Main
20004: PPUSH
20005: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20009: LD_INT 50
20011: PUSH
20012: EMPTY
20013: LIST
20014: PUSH
20015: LD_INT 22
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 1
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 25
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 25
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 25
20060: PUSH
20061: LD_INT 3
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 25
20070: PUSH
20071: LD_INT 4
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 69
20095: PPUSH
20096: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20100: LD_EXP 1
20104: PPUSH
20105: LD_EXP 41
20109: PUSH
20110: LD_STRING JMM
20112: STR
20113: PPUSH
20114: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20118: LD_EXP 2
20122: PPUSH
20123: LD_EXP 41
20127: PUSH
20128: LD_STRING Lisa
20130: STR
20131: PPUSH
20132: CALL 5202 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20136: LD_EXP 3
20140: PPUSH
20141: LD_EXP 41
20145: PUSH
20146: LD_STRING Bobby
20148: STR
20149: PPUSH
20150: CALL 5202 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20154: LD_EXP 4
20158: PPUSH
20159: LD_EXP 41
20163: PUSH
20164: LD_STRING Cyrus
20166: STR
20167: PPUSH
20168: CALL 5202 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20172: LD_EXP 5
20176: PPUSH
20177: LD_EXP 41
20181: PUSH
20182: LD_STRING Frank
20184: STR
20185: PPUSH
20186: CALL 5202 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20190: LD_EXP 6
20194: PPUSH
20195: LD_EXP 41
20199: PUSH
20200: LD_STRING Brown
20202: STR
20203: PPUSH
20204: CALL 5202 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20208: LD_EXP 7
20212: PPUSH
20213: LD_EXP 41
20217: PUSH
20218: LD_STRING Donaldson
20220: STR
20221: PPUSH
20222: CALL 5202 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20226: LD_EXP 8
20230: PPUSH
20231: LD_EXP 41
20235: PUSH
20236: LD_STRING Gladstone
20238: STR
20239: PPUSH
20240: CALL 5202 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20244: LD_EXP 9
20248: PPUSH
20249: LD_EXP 41
20253: PUSH
20254: LD_STRING Denis
20256: STR
20257: PPUSH
20258: CALL 5202 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20262: LD_EXP 15
20266: PPUSH
20267: LD_EXP 41
20271: PUSH
20272: LD_STRING Joan
20274: STR
20275: PPUSH
20276: CALL 5202 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20280: LD_EXP 16
20284: PPUSH
20285: LD_STRING 06_JoanStatus_1
20287: PPUSH
20288: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20292: LD_INT 50
20294: PUSH
20295: EMPTY
20296: LIST
20297: PUSH
20298: LD_INT 22
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 21
20310: PUSH
20311: LD_INT 1
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 2
20320: PUSH
20321: LD_INT 25
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 25
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 25
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 25
20353: PUSH
20354: LD_INT 4
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: PUSH
20379: LD_EXP 1
20383: PUSH
20384: LD_EXP 2
20388: PUSH
20389: LD_EXP 3
20393: PUSH
20394: LD_EXP 4
20398: PUSH
20399: LD_EXP 5
20403: PUSH
20404: LD_EXP 6
20408: PUSH
20409: LD_EXP 7
20413: PUSH
20414: LD_EXP 8
20418: PUSH
20419: LD_EXP 9
20423: PUSH
20424: LD_EXP 15
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: DIFF
20441: PPUSH
20442: LD_STRING 06_other_survivors
20444: PPUSH
20445: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20449: LD_INT 50
20451: PUSH
20452: EMPTY
20453: LIST
20454: PUSH
20455: LD_INT 22
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 21
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 12
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 25
20490: PUSH
20491: LD_INT 16
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: LIST
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL_OW 69
20513: PPUSH
20514: LD_STRING 06_other_apemans
20516: PPUSH
20517: CALL_OW 38
// YouWin ;
20521: CALL_OW 103
// end ; end_of_file
20525: LD_VAR 0 2
20529: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
20530: LD_EXP 39
20534: PUSH
20535: LD_INT 5
20537: PUSH
20538: LD_INT 4
20540: PUSH
20541: LD_INT 3
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: PUSH
20549: LD_OWVAR 67
20553: ARRAY
20554: EQUAL
20555: IFFALSE 20670
20557: GO 20559
20559: DISABLE
// begin enable ;
20560: ENABLE
// sendedConvoys = 0 ;
20561: LD_ADDR_EXP 39
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20569: LD_INT 6
20571: PPUSH
20572: LD_INT 3
20574: PPUSH
20575: LD_INT 5
20577: PPUSH
20578: LD_INT 10
20580: PPUSH
20581: CALL_OW 12
20585: PUSH
20586: LD_INT 5
20588: PPUSH
20589: LD_INT 11
20591: PPUSH
20592: CALL_OW 12
20596: PUSH
20597: LD_INT 8
20599: PPUSH
20600: LD_INT 12
20602: PPUSH
20603: CALL_OW 12
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: PUSH
20613: LD_OWVAR 67
20617: ARRAY
20618: PPUSH
20619: LD_INT 0
20621: PPUSH
20622: LD_INT 0
20624: PPUSH
20625: LD_INT 0
20627: PPUSH
20628: LD_INT 3
20630: PPUSH
20631: LD_EXP 34
20635: PPUSH
20636: LD_EXP 35
20640: PPUSH
20641: CALL_OW 12
20645: PPUSH
20646: LD_INT 18
20648: PPUSH
20649: LD_INT 17
20651: PPUSH
20652: LD_INT 1
20654: PPUSH
20655: LD_INT 1
20657: PPUSH
20658: LD_INT 2
20660: PPUSH
20661: CALL_OW 12
20665: PPUSH
20666: CALL 8783 0 12
// end ; end_of_file
20670: END
// export function PrepareNature ; var i , un ; begin
20671: LD_INT 0
20673: PPUSH
20674: PPUSH
20675: PPUSH
// for i = 1 to Difficulty + 2 do
20676: LD_ADDR_VAR 0 2
20680: PUSH
20681: DOUBLE
20682: LD_INT 1
20684: DEC
20685: ST_TO_ADDR
20686: LD_OWVAR 67
20690: PUSH
20691: LD_INT 2
20693: PLUS
20694: PUSH
20695: FOR_TO
20696: IFFALSE 20805
// begin hc_sex = sex_male ;
20698: LD_ADDR_OWVAR 27
20702: PUSH
20703: LD_INT 1
20705: ST_TO_ADDR
// uc_side = 0 ;
20706: LD_ADDR_OWVAR 20
20710: PUSH
20711: LD_INT 0
20713: ST_TO_ADDR
// uc_nation = nation_nature ;
20714: LD_ADDR_OWVAR 21
20718: PUSH
20719: LD_INT 0
20721: ST_TO_ADDR
// hc_class = class_tiger ;
20722: LD_ADDR_OWVAR 28
20726: PUSH
20727: LD_INT 14
20729: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20730: LD_ADDR_OWVAR 31
20734: PUSH
20735: LD_EXP 35
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: LD_INT 0
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20755: LD_ADDR_OWVAR 35
20759: PUSH
20760: LD_INT 5
20762: NEG
20763: PPUSH
20764: LD_INT 5
20766: PPUSH
20767: CALL_OW 12
20771: PUSH
20772: LD_OWVAR 67
20776: MUL
20777: ST_TO_ADDR
// un = CreateHuman ;
20778: LD_ADDR_VAR 0 3
20782: PUSH
20783: CALL_OW 44
20787: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20788: LD_VAR 0 3
20792: PPUSH
20793: LD_INT 20
20795: PPUSH
20796: LD_INT 0
20798: PPUSH
20799: CALL_OW 49
// end ;
20803: GO 20695
20805: POP
20806: POP
// for i = 1 to rand ( 3 , 4 ) do
20807: LD_ADDR_VAR 0 2
20811: PUSH
20812: DOUBLE
20813: LD_INT 1
20815: DEC
20816: ST_TO_ADDR
20817: LD_INT 3
20819: PPUSH
20820: LD_INT 4
20822: PPUSH
20823: CALL_OW 12
20827: PUSH
20828: FOR_TO
20829: IFFALSE 20923
// begin hc_sex = sex_male ;
20831: LD_ADDR_OWVAR 27
20835: PUSH
20836: LD_INT 1
20838: ST_TO_ADDR
// uc_side = 0 ;
20839: LD_ADDR_OWVAR 20
20843: PUSH
20844: LD_INT 0
20846: ST_TO_ADDR
// uc_nation = nation_nature ;
20847: LD_ADDR_OWVAR 21
20851: PUSH
20852: LD_INT 0
20854: ST_TO_ADDR
// hc_class = 18 ;
20855: LD_ADDR_OWVAR 28
20859: PUSH
20860: LD_INT 18
20862: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20863: LD_ADDR_OWVAR 31
20867: PUSH
20868: LD_EXP 35
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: ST_TO_ADDR
// hc_agressivity = 0 ;
20888: LD_ADDR_OWVAR 35
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
// un = CreateHuman ;
20896: LD_ADDR_VAR 0 3
20900: PUSH
20901: CALL_OW 44
20905: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20906: LD_VAR 0 3
20910: PPUSH
20911: LD_INT 20
20913: PPUSH
20914: LD_INT 0
20916: PPUSH
20917: CALL_OW 49
// end ;
20921: GO 20828
20923: POP
20924: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
20925: LD_ADDR_VAR 0 2
20929: PUSH
20930: DOUBLE
20931: LD_INT 1
20933: DEC
20934: ST_TO_ADDR
20935: LD_INT 1
20937: PPUSH
20938: LD_INT 3
20940: PPUSH
20941: CALL_OW 12
20945: PUSH
20946: LD_OWVAR 67
20950: PLUS
20951: PUSH
20952: FOR_TO
20953: IFFALSE 21134
// begin hc_sex = sex_male ;
20955: LD_ADDR_OWVAR 27
20959: PUSH
20960: LD_INT 1
20962: ST_TO_ADDR
// uc_side = 0 ;
20963: LD_ADDR_OWVAR 20
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// uc_nation = nation_nature ;
20971: LD_ADDR_OWVAR 21
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// hc_class = class_apeman ;
20979: LD_ADDR_OWVAR 28
20983: PUSH
20984: LD_INT 12
20986: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
20987: LD_ADDR_OWVAR 31
20991: PUSH
20992: LD_EXP 34
20996: PPUSH
20997: LD_EXP 35
21001: PPUSH
21002: CALL_OW 12
21006: PUSH
21007: LD_EXP 34
21011: PPUSH
21012: LD_EXP 35
21016: PPUSH
21017: CALL_OW 12
21021: PUSH
21022: LD_EXP 34
21026: PPUSH
21027: LD_EXP 35
21031: PPUSH
21032: CALL_OW 12
21036: PUSH
21037: LD_EXP 34
21041: PPUSH
21042: LD_EXP 35
21046: PPUSH
21047: CALL_OW 12
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21058: LD_ADDR_OWVAR 35
21062: PUSH
21063: LD_INT 20
21065: PPUSH
21066: LD_INT 30
21068: PPUSH
21069: CALL_OW 12
21073: PUSH
21074: LD_INT 30
21076: PPUSH
21077: LD_INT 40
21079: PPUSH
21080: CALL_OW 12
21084: PUSH
21085: LD_INT 40
21087: PPUSH
21088: LD_INT 50
21090: PPUSH
21091: CALL_OW 12
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: PUSH
21101: LD_OWVAR 67
21105: ARRAY
21106: ST_TO_ADDR
// un = CreateHuman ;
21107: LD_ADDR_VAR 0 3
21111: PUSH
21112: CALL_OW 44
21116: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21117: LD_VAR 0 3
21121: PPUSH
21122: LD_INT 21
21124: PPUSH
21125: LD_INT 0
21127: PPUSH
21128: CALL_OW 49
// end ;
21132: GO 20952
21134: POP
21135: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: DOUBLE
21142: LD_INT 1
21144: DEC
21145: ST_TO_ADDR
21146: LD_INT 5
21148: PPUSH
21149: LD_INT 6
21151: PPUSH
21152: CALL_OW 12
21156: PUSH
21157: LD_OWVAR 67
21161: PLUS
21162: PUSH
21163: FOR_TO
21164: IFFALSE 21310
// begin hc_sex = sex_male ;
21166: LD_ADDR_OWVAR 27
21170: PUSH
21171: LD_INT 1
21173: ST_TO_ADDR
// uc_side = 0 ;
21174: LD_ADDR_OWVAR 20
21178: PUSH
21179: LD_INT 0
21181: ST_TO_ADDR
// uc_nation = nation_nature ;
21182: LD_ADDR_OWVAR 21
21186: PUSH
21187: LD_INT 0
21189: ST_TO_ADDR
// hc_class = class_apeman ;
21190: LD_ADDR_OWVAR 28
21194: PUSH
21195: LD_INT 12
21197: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21198: LD_ADDR_OWVAR 31
21202: PUSH
21203: LD_EXP 34
21207: PPUSH
21208: LD_EXP 35
21212: PPUSH
21213: CALL_OW 12
21217: PUSH
21218: LD_EXP 34
21222: PPUSH
21223: LD_EXP 35
21227: PPUSH
21228: CALL_OW 12
21232: PUSH
21233: LD_OWVAR 67
21237: PLUS
21238: PUSH
21239: LD_EXP 34
21243: PPUSH
21244: LD_EXP 35
21248: PPUSH
21249: CALL_OW 12
21253: PUSH
21254: LD_EXP 34
21258: PPUSH
21259: LD_EXP 35
21263: PPUSH
21264: CALL_OW 12
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: ST_TO_ADDR
// hc_agressivity = 0 ;
21275: LD_ADDR_OWVAR 35
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// un = CreateHuman ;
21283: LD_ADDR_VAR 0 3
21287: PUSH
21288: CALL_OW 44
21292: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21293: LD_VAR 0 3
21297: PPUSH
21298: LD_INT 22
21300: PPUSH
21301: LD_INT 0
21303: PPUSH
21304: CALL_OW 49
// end ;
21308: GO 21163
21310: POP
21311: POP
// end ; end_of_file
21312: LD_VAR 0 1
21316: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21317: LD_EXP 1
21321: PPUSH
21322: CALL_OW 301
21326: IFFALSE 21338
21328: GO 21330
21330: DISABLE
// YouLost ( JMM ) ;
21331: LD_STRING JMM
21333: PPUSH
21334: CALL_OW 104
21338: END
