// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeALl ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 35
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// contactWithRussian = 0 ;
  26: LD_ADDR_EXP 20
  30: PUSH
  31: LD_INT 0
  33: ST_TO_ADDR
// firstTower = 0 ;
  34: LD_ADDR_EXP 21
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// KurtStatus = 0 ;
  42: LD_ADDR_EXP 18
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// readyToEscape = 0 ;
  50: LD_ADDR_EXP 19
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// JoanStatus = 0 ;
  58: LD_ADDR_EXP 14
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// cratesStatus = 2 ;
  66: LD_ADDR_EXP 33
  70: PUSH
  71: LD_INT 2
  73: ST_TO_ADDR
// timerStatus = 1 ;
  74: LD_ADDR_EXP 22
  78: PUSH
  79: LD_INT 1
  81: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 350
  89: PUSH
  90: LD_INT 500
  92: PUSH
  93: LD_INT 700
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: PUSH
 101: LD_OWVAR 67
 105: ARRAY
 106: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 107: LD_ADDR_EXP 24
 111: PUSH
 112: LD_INT 105000
 114: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 115: LD_ADDR_EXP 26
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// sendedConvoys = 0 ;
 123: LD_ADDR_EXP 34
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// tamedApemans = 0 ;
 131: LD_ADDR_EXP 29
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// unitLost = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 147: LD_ADDR_EXP 28
 151: PUSH
 152: EMPTY
 153: ST_TO_ADDR
// disableHealAI = 0 ;
 154: LD_ADDR_EXP 30
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// strings = [ ] ;
 162: LD_ADDR_EXP 25
 166: PUSH
 167: EMPTY
 168: ST_TO_ADDR
// PrepareNature ;
 169: CALL 18328 0 0
// PrepareDifficulty ;
 173: CALL 4920 0 0
// PrepareRussian ;
 177: CALL 4033 0 0
// PrepareVehicles ;
 181: CALL 1346 0 0
// PrepareHeroes ;
 185: CALL 432 0 0
// PrepareOthers ;
 189: CALL 1595 0 0
// end ;
 193: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 194: LD_EXP 35
 198: PUSH
 199: LD_INT 1
 201: EQUAL
 202: IFFALSE 429
 204: GO 206
 206: DISABLE
 207: LD_INT 0
 209: PPUSH
// begin enable ;
 210: ENABLE
// fogoff ( true ) ;
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 218: LD_ADDR_VAR 0 1
 222: PUSH
 223: LD_INT 22
 225: PUSH
 226: LD_INT 1
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PUSH
 233: LD_INT 21
 235: PUSH
 236: LD_INT 1
 238: PUSH
 239: EMPTY
 240: LIST
 241: LIST
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PPUSH
 247: CALL_OW 69
 251: PUSH
 252: FOR_IN
 253: IFFALSE 269
// SetLives ( i , 1000 ) ;
 255: LD_VAR 0 1
 259: PPUSH
 260: LD_INT 1000
 262: PPUSH
 263: CALL_OW 234
 267: GO 252
 269: POP
 270: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 30
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 330
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: CALL_OW 274
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 9999
 323: PPUSH
 324: CALL_OW 277
 328: GO 305
 330: POP
 331: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 332: LD_ADDR_VAR 0 1
 336: PUSH
 337: LD_INT 22
 339: PUSH
 340: LD_INT 1
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: LD_INT 30
 349: PUSH
 350: LD_INT 0
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PPUSH
 361: CALL_OW 69
 365: PUSH
 366: FOR_IN
 367: IFFALSE 391
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 369: LD_VAR 0 1
 373: PPUSH
 374: CALL_OW 274
 378: PPUSH
 379: LD_INT 2
 381: PPUSH
 382: LD_INT 9999
 384: PPUSH
 385: CALL_OW 277
 389: GO 366
 391: POP
 392: POP
// if IsSelected ( rudepo ) then
 393: LD_INT 2
 395: PPUSH
 396: CALL_OW 306
 400: IFFALSE 410
// your_side = 3 ;
 402: LD_ADDR_OWVAR 2
 406: PUSH
 407: LD_INT 3
 409: ST_TO_ADDR
// if IsSelected ( JMM ) then
 410: LD_EXP 1
 414: PPUSH
 415: CALL_OW 306
 419: IFFALSE 429
// your_side = 1 ;
 421: LD_ADDR_OWVAR 2
 425: PUSH
 426: LD_INT 1
 428: ST_TO_ADDR
// end ; end_of_file
 429: PPOPN 1
 431: END
// export function PrepareHeroes ; var veh ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// uc_side = 1 ;
 436: LD_ADDR_OWVAR 20
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// uc_nation = 1 ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 452: LD_ADDR_EXP 1
 456: PUSH
 457: LD_STRING JMM
 459: PPUSH
 460: LD_INT 1
 462: PPUSH
 463: CALL 4410 0 2
 467: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 468: LD_ADDR_EXP 12
 472: PUSH
 473: LD_STRING Harisson
 475: PPUSH
 476: LD_INT 0
 478: PPUSH
 479: CALL 4410 0 2
 483: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
 484: LD_ADDR_EXP 10
 488: PUSH
 489: LD_STRING DeltaDoctor
 491: PPUSH
 492: LD_INT 1
 494: PPUSH
 495: CALL 4410 0 2
 499: ST_TO_ADDR
// PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 500: LD_EXP 1
 504: PPUSH
 505: LD_INT 2
 507: PPUSH
 508: LD_INT 0
 510: PPUSH
 511: CALL_OW 49
// if LoadVariable ( LisaIn06 , 0 ) = 1 then
 515: LD_STRING LisaIn06
 517: PPUSH
 518: LD_INT 0
 520: PPUSH
 521: CALL_OW 30
 525: PUSH
 526: LD_INT 1
 528: EQUAL
 529: IFFALSE 633
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: LD_INT 22
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 21
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: LD_INT 58
 558: PUSH
 559: EMPTY
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PPUSH
 567: CALL_OW 69
 571: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 572: LD_ADDR_EXP 2
 576: PUSH
 577: LD_STRING Lisa
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: CALL 4410 0 2
 587: ST_TO_ADDR
// if veh > 0 then
 588: LD_VAR 0 2
 592: PUSH
 593: LD_INT 0
 595: GREATER
 596: IFFALSE 618
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 598: LD_EXP 2
 602: PPUSH
 603: LD_VAR 0 2
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PPUSH
 612: CALL_OW 52
// end else
 616: GO 633
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 618: LD_EXP 2
 622: PPUSH
 623: LD_INT 2
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 633: LD_STRING BobbyIn06
 635: PPUSH
 636: LD_INT 0
 638: PPUSH
 639: CALL_OW 30
 643: PUSH
 644: LD_INT 1
 646: EQUAL
 647: IFFALSE 751
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 21
 666: PUSH
 667: LD_INT 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 58
 676: PUSH
 677: EMPTY
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PPUSH
 685: CALL_OW 69
 689: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 690: LD_ADDR_EXP 3
 694: PUSH
 695: LD_STRING Bobby
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL 4410 0 2
 705: ST_TO_ADDR
// if veh > 0 then
 706: LD_VAR 0 2
 710: PUSH
 711: LD_INT 0
 713: GREATER
 714: IFFALSE 736
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 716: LD_EXP 3
 720: PPUSH
 721: LD_VAR 0 2
 725: PUSH
 726: LD_INT 1
 728: ARRAY
 729: PPUSH
 730: CALL_OW 52
// end else
 734: GO 751
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 736: LD_EXP 3
 740: PPUSH
 741: LD_INT 2
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 751: LD_STRING CyrusIn06
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 30
 761: PUSH
 762: LD_INT 1
 764: EQUAL
 765: IFFALSE 869
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: LD_INT 22
 774: PUSH
 775: LD_INT 1
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 21
 784: PUSH
 785: LD_INT 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 58
 794: PUSH
 795: EMPTY
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 808: LD_ADDR_EXP 4
 812: PUSH
 813: LD_STRING Cyrus
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: CALL 4410 0 2
 823: ST_TO_ADDR
// if veh > 0 then
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 0
 831: GREATER
 832: IFFALSE 854
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 834: LD_EXP 4
 838: PPUSH
 839: LD_VAR 0 2
 843: PUSH
 844: LD_INT 1
 846: ARRAY
 847: PPUSH
 848: CALL_OW 52
// end else
 852: GO 869
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 854: LD_EXP 4
 858: PPUSH
 859: LD_INT 2
 861: PPUSH
 862: LD_INT 0
 864: PPUSH
 865: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 869: LD_STRING FrankIn06
 871: PPUSH
 872: LD_INT 0
 874: PPUSH
 875: CALL_OW 30
 879: PUSH
 880: LD_INT 1
 882: EQUAL
 883: IFFALSE 987
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 885: LD_ADDR_VAR 0 2
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 2
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 58
 912: PUSH
 913: EMPTY
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Frank
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 4410 0 2
 941: ST_TO_ADDR
// if veh > 0 then
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 0
 949: GREATER
 950: IFFALSE 972
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
 952: LD_EXP 5
 956: PPUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_INT 1
 964: ARRAY
 965: PPUSH
 966: CALL_OW 52
// end else
 970: GO 987
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 972: LD_EXP 5
 976: PPUSH
 977: LD_INT 2
 979: PPUSH
 980: LD_INT 0
 982: PPUSH
 983: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
 987: LD_STRING BrownIn06
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 30
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1105
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: LD_INT 22
1010: PUSH
1011: LD_INT 1
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 21
1020: PUSH
1021: LD_INT 2
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 58
1030: PUSH
1031: EMPTY
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1044: LD_ADDR_EXP 6
1048: PUSH
1049: LD_STRING Brown
1051: PPUSH
1052: LD_INT 1
1054: PPUSH
1055: CALL 4410 0 2
1059: ST_TO_ADDR
// if veh > 0 then
1060: LD_VAR 0 2
1064: PUSH
1065: LD_INT 0
1067: GREATER
1068: IFFALSE 1090
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1070: LD_EXP 6
1074: PPUSH
1075: LD_VAR 0 2
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: PPUSH
1084: CALL_OW 52
// end else
1088: GO 1105
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1090: LD_EXP 6
1094: PPUSH
1095: LD_INT 2
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1105: LD_STRING DonaldsonIn06
1107: PPUSH
1108: LD_INT 0
1110: PPUSH
1111: CALL_OW 30
1115: PUSH
1116: LD_INT 1
1118: EQUAL
1119: IFFALSE 1223
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1121: LD_ADDR_VAR 0 2
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 1
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 2
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 58
1148: PUSH
1149: EMPTY
1150: LIST
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1162: LD_ADDR_EXP 7
1166: PUSH
1167: LD_STRING Donaldson
1169: PPUSH
1170: LD_INT 1
1172: PPUSH
1173: CALL 4410 0 2
1177: ST_TO_ADDR
// if veh > 0 then
1178: LD_VAR 0 2
1182: PUSH
1183: LD_INT 0
1185: GREATER
1186: IFFALSE 1208
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1188: LD_EXP 7
1192: PPUSH
1193: LD_VAR 0 2
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: CALL_OW 52
// end else
1206: GO 1223
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1208: LD_EXP 7
1212: PPUSH
1213: LD_INT 2
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1223: LD_STRING GladstoneIn06
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 30
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1341
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1239: LD_ADDR_VAR 0 2
1243: PUSH
1244: LD_INT 22
1246: PUSH
1247: LD_INT 1
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 21
1256: PUSH
1257: LD_INT 2
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 58
1266: PUSH
1267: EMPTY
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PPUSH
1275: CALL_OW 69
1279: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1280: LD_ADDR_EXP 8
1284: PUSH
1285: LD_STRING Gladstone
1287: PPUSH
1288: LD_INT 1
1290: PPUSH
1291: CALL 4410 0 2
1295: ST_TO_ADDR
// if veh > 0 then
1296: LD_VAR 0 2
1300: PUSH
1301: LD_INT 0
1303: GREATER
1304: IFFALSE 1326
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1306: LD_EXP 8
1310: PPUSH
1311: LD_VAR 0 2
1315: PUSH
1316: LD_INT 1
1318: ARRAY
1319: PPUSH
1320: CALL_OW 52
// end else
1324: GO 1341
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1326: LD_EXP 8
1330: PPUSH
1331: LD_INT 2
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: CALL_OW 49
// end ; end ; end ;
1341: LD_VAR 0 1
1345: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1346: LD_INT 0
1348: PPUSH
1349: PPUSH
1350: PPUSH
1351: PPUSH
1352: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_STRING 06_VehiclesIn06_1
1360: PPUSH
1361: EMPTY
1362: PPUSH
1363: CALL_OW 30
1367: ST_TO_ADDR
// uc_side = 1 ;
1368: LD_ADDR_OWVAR 20
1372: PUSH
1373: LD_INT 1
1375: ST_TO_ADDR
// uc_nation = 1 ;
1376: LD_ADDR_OWVAR 21
1380: PUSH
1381: LD_INT 1
1383: ST_TO_ADDR
// if vehicles > 0 then
1384: LD_VAR 0 5
1388: PUSH
1389: LD_INT 0
1391: GREATER
1392: IFFALSE 1590
// begin for i := 1 to vehicles do
1394: LD_ADDR_VAR 0 2
1398: PUSH
1399: DOUBLE
1400: LD_INT 1
1402: DEC
1403: ST_TO_ADDR
1404: LD_VAR 0 5
1408: PUSH
1409: FOR_TO
1410: IFFALSE 1588
// begin vc_chassis = vehicles [ i ] [ 1 ] ;
1412: LD_ADDR_OWVAR 37
1416: PUSH
1417: LD_VAR 0 5
1421: PUSH
1422: LD_VAR 0 2
1426: ARRAY
1427: PUSH
1428: LD_INT 1
1430: ARRAY
1431: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 2 ] ;
1432: LD_ADDR_OWVAR 39
1436: PUSH
1437: LD_VAR 0 5
1441: PUSH
1442: LD_VAR 0 2
1446: ARRAY
1447: PUSH
1448: LD_INT 2
1450: ARRAY
1451: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 3 ] ;
1452: LD_ADDR_OWVAR 38
1456: PUSH
1457: LD_VAR 0 5
1461: PUSH
1462: LD_VAR 0 2
1466: ARRAY
1467: PUSH
1468: LD_INT 3
1470: ARRAY
1471: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 4 ] ;
1472: LD_ADDR_OWVAR 40
1476: PUSH
1477: LD_VAR 0 5
1481: PUSH
1482: LD_VAR 0 2
1486: ARRAY
1487: PUSH
1488: LD_INT 4
1490: ARRAY
1491: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1492: LD_ADDR_OWVAR 41
1496: PUSH
1497: LD_INT 40
1499: ST_TO_ADDR
// veh = CreateVehicle ;
1500: LD_ADDR_VAR 0 4
1504: PUSH
1505: CALL_OW 45
1509: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1510: LD_VAR 0 4
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1522: LD_VAR 0 4
1526: PPUSH
1527: LD_INT 2
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1537: LD_OWVAR 40
1541: PUSH
1542: LD_INT 12
1544: EQUAL
1545: IFFALSE 1586
// AddCargo ( veh , vehicles [ i ] [ 5 ] , vehicles [ i ] [ 6 ] ) ;
1547: LD_VAR 0 4
1551: PPUSH
1552: LD_VAR 0 5
1556: PUSH
1557: LD_VAR 0 2
1561: ARRAY
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: PPUSH
1567: LD_VAR 0 5
1571: PUSH
1572: LD_VAR 0 2
1576: ARRAY
1577: PUSH
1578: LD_INT 6
1580: ARRAY
1581: PPUSH
1582: CALL_OW 291
// end ;
1586: GO 1409
1588: POP
1589: POP
// end ; end ;
1590: LD_VAR 0 1
1594: RET
// export function PrepareOthers ; var i , veh ; begin
1595: LD_INT 0
1597: PPUSH
1598: PPUSH
1599: PPUSH
// uc_side = 1 ;
1600: LD_ADDR_OWVAR 20
1604: PUSH
1605: LD_INT 1
1607: ST_TO_ADDR
// uc_nation = 1 ;
1608: LD_ADDR_OWVAR 21
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// others = CreateCharacter ( OthersIn06 ) ;
1616: LD_ADDR_EXP 11
1620: PUSH
1621: LD_STRING OthersIn06
1623: PPUSH
1624: CALL_OW 34
1628: ST_TO_ADDR
// for i in others do
1629: LD_ADDR_VAR 0 2
1633: PUSH
1634: LD_EXP 11
1638: PUSH
1639: FOR_IN
1640: IFFALSE 1730
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 21
1659: PUSH
1660: LD_INT 2
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 58
1669: PUSH
1670: EMPTY
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 69
1682: ST_TO_ADDR
// if veh > 0 then
1683: LD_VAR 0 3
1687: PUSH
1688: LD_INT 0
1690: GREATER
1691: IFFALSE 1713
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1693: LD_VAR 0 2
1697: PPUSH
1698: LD_VAR 0 3
1702: PUSH
1703: LD_INT 1
1705: ARRAY
1706: PPUSH
1707: CALL_OW 52
// end else
1711: GO 1728
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1713: LD_VAR 0 2
1717: PPUSH
1718: LD_INT 2
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 49
// end ; end ;
1728: GO 1639
1730: POP
1731: POP
// end ;
1732: LD_VAR 0 1
1736: RET
// export function PrepareDenis ; begin
1737: LD_INT 0
1739: PPUSH
// uc_side = 1 ;
1740: LD_ADDR_OWVAR 20
1744: PUSH
1745: LD_INT 1
1747: ST_TO_ADDR
// uc_nation = 1 ;
1748: LD_ADDR_OWVAR 21
1752: PUSH
1753: LD_INT 1
1755: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1756: LD_ADDR_EXP 9
1760: PUSH
1761: LD_STRING Denis
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: CALL 4410 0 2
1771: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1772: LD_EXP 9
1776: PPUSH
1777: LD_INT 13
1779: PPUSH
1780: LD_INT 0
1782: PPUSH
1783: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1787: LD_EXP 9
1791: PPUSH
1792: LD_INT 4
1794: PPUSH
1795: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1799: LD_EXP 9
1803: PPUSH
1804: LD_INT 750
1806: PPUSH
1807: CALL_OW 234
// end ;
1811: LD_VAR 0 1
1815: RET
// export function HarrisonSupport ; var un , veh ; begin
1816: LD_INT 0
1818: PPUSH
1819: PPUSH
1820: PPUSH
// uc_side = 1 ;
1821: LD_ADDR_OWVAR 20
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// uc_nation = 1 ;
1829: LD_ADDR_OWVAR 21
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// vc_engine = 1 ;
1837: LD_ADDR_OWVAR 39
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// vc_control = 1 ;
1845: LD_ADDR_OWVAR 38
1849: PUSH
1850: LD_INT 1
1852: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1853: LD_ADDR_OWVAR 40
1857: PUSH
1858: LD_INT 4
1860: PUSH
1861: LD_INT 4
1863: PUSH
1864: LD_INT 2
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_OWVAR 67
1876: ARRAY
1877: ST_TO_ADDR
// vc_chassis = 2 ;
1878: LD_ADDR_OWVAR 37
1882: PUSH
1883: LD_INT 2
1885: ST_TO_ADDR
// veh = CreateVehicle ;
1886: LD_ADDR_VAR 0 3
1890: PUSH
1891: CALL_OW 45
1895: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1896: LD_VAR 0 3
1900: PPUSH
1901: LD_INT 3
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// hc_class := 2 ;
1911: LD_ADDR_OWVAR 28
1915: PUSH
1916: LD_INT 2
1918: ST_TO_ADDR
// hc_sex := sex_male ;
1919: LD_ADDR_OWVAR 27
1923: PUSH
1924: LD_INT 1
1926: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1927: LD_ADDR_OWVAR 33
1931: PUSH
1932: LD_STRING SecondCharsGal
1934: ST_TO_ADDR
// hc_face_number := 52 ;
1935: LD_ADDR_OWVAR 34
1939: PUSH
1940: LD_INT 52
1942: ST_TO_ADDR
// hc_name := Craig Brown ;
1943: LD_ADDR_OWVAR 26
1947: PUSH
1948: LD_STRING Craig Brown
1950: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1951: LD_ADDR_OWVAR 31
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
1974: LD_ADDR_EXP 15
1978: PUSH
1979: CALL_OW 44
1983: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
1984: LD_EXP 15
1988: PPUSH
1989: LD_VAR 0 3
1993: PPUSH
1994: CALL_OW 52
// vc_engine = 1 ;
1998: LD_ADDR_OWVAR 39
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// vc_control = 1 ;
2006: LD_ADDR_OWVAR 38
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2014: LD_ADDR_OWVAR 40
2018: PUSH
2019: LD_INT 4
2021: PUSH
2022: LD_INT 2
2024: PUSH
2025: LD_INT 2
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: PUSH
2033: LD_OWVAR 67
2037: ARRAY
2038: ST_TO_ADDR
// vc_chassis = 2 ;
2039: LD_ADDR_OWVAR 37
2043: PUSH
2044: LD_INT 2
2046: ST_TO_ADDR
// veh = CreateVehicle ;
2047: LD_ADDR_VAR 0 3
2051: PUSH
2052: CALL_OW 45
2056: ST_TO_ADDR
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2057: LD_VAR 0 3
2061: PPUSH
2062: LD_INT 3
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2072: LD_VAR 0 3
2076: PPUSH
2077: LD_INT 50
2079: PPUSH
2080: CALL_OW 240
// hc_class := 1 ;
2084: LD_ADDR_OWVAR 28
2088: PUSH
2089: LD_INT 1
2091: ST_TO_ADDR
// hc_sex := sex_female ;
2092: LD_ADDR_OWVAR 27
2096: PUSH
2097: LD_INT 2
2099: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2100: LD_ADDR_OWVAR 33
2104: PUSH
2105: LD_STRING SecondCharsGal
2107: ST_TO_ADDR
// hc_face_number := 45 ;
2108: LD_ADDR_OWVAR 34
2112: PUSH
2113: LD_INT 45
2115: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2116: LD_ADDR_OWVAR 26
2120: PUSH
2121: LD_STRING Ingrid Jonsson
2123: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2124: LD_ADDR_OWVAR 31
2128: PUSH
2129: LD_INT 1
2131: PUSH
2132: LD_INT 3
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2147: LD_ADDR_EXP 16
2151: PUSH
2152: CALL_OW 44
2156: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2157: LD_EXP 16
2161: PPUSH
2162: LD_VAR 0 3
2166: PPUSH
2167: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2171: LD_VAR 0 3
2175: PPUSH
2176: LD_INT 45
2178: PPUSH
2179: CALL_OW 240
// end ;
2183: LD_VAR 0 1
2187: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) ;
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: LD_INT 22
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 21
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 26
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: PPUSH
2233: CALL_OW 69
2237: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2238: LD_ADDR_VAR 0 3
2242: PUSH
2243: LD_INT 1
2245: PPUSH
2246: LD_VAR 0 2
2250: PPUSH
2251: CALL_OW 12
2255: ST_TO_ADDR
// uc_side = 4 ;
2256: LD_ADDR_OWVAR 20
2260: PUSH
2261: LD_INT 4
2263: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2264: LD_ADDR_EXP 13
2268: PUSH
2269: LD_STRING Joan
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: CALL 4410 0 2
2279: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
2280: LD_EXP 13
2284: PPUSH
2285: LD_VAR 0 2
2289: PUSH
2290: LD_VAR 0 3
2294: ARRAY
2295: PPUSH
2296: CALL_OW 250
2300: PPUSH
2301: LD_VAR 0 2
2305: PUSH
2306: LD_VAR 0 3
2310: ARRAY
2311: PPUSH
2312: CALL_OW 251
2316: PPUSH
2317: LD_INT 2
2319: PPUSH
2320: LD_INT 1
2322: PPUSH
2323: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2327: LD_EXP 13
2331: PPUSH
2332: LD_INT 250
2334: PPUSH
2335: CALL_OW 234
// InGameOn ;
2339: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2343: LD_EXP 13
2347: PPUSH
2348: CALL_OW 87
// wait ( 0 0$2 ) ;
2352: LD_INT 70
2354: PPUSH
2355: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2359: LD_VAR 0 2
2363: PUSH
2364: LD_VAR 0 3
2368: ARRAY
2369: PPUSH
2370: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2374: LD_VAR 0 2
2378: PUSH
2379: LD_VAR 0 3
2383: ARRAY
2384: PPUSH
2385: CALL_OW 122
// wait ( 0 0$1 ) ;
2389: LD_INT 35
2391: PPUSH
2392: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2396: LD_VAR 0 2
2400: PUSH
2401: LD_VAR 0 3
2405: ARRAY
2406: PPUSH
2407: LD_EXP 13
2411: PPUSH
2412: CALL_OW 112
// wait ( 0 0$2 ) ;
2416: LD_INT 70
2418: PPUSH
2419: CALL_OW 67
// DialogueOn ;
2423: CALL_OW 6
// if tmp [ rnd ] = JMM then
2427: LD_VAR 0 2
2431: PUSH
2432: LD_VAR 0 3
2436: ARRAY
2437: PUSH
2438: LD_EXP 1
2442: EQUAL
2443: IFFALSE 2570
// begin Say ( JMM , D5b-JMM-1 ) ;
2445: LD_EXP 1
2449: PPUSH
2450: LD_STRING D5b-JMM-1
2452: PPUSH
2453: CALL_OW 88
// DialogueOff ;
2457: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2461: LD_EXP 13
2465: PPUSH
2466: LD_INT 500
2468: PPUSH
2469: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2473: LD_EXP 13
2477: PPUSH
2478: LD_EXP 1
2482: PPUSH
2483: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2487: LD_EXP 1
2491: PPUSH
2492: LD_EXP 13
2496: PPUSH
2497: CALL_OW 119
// wait ( 0 0$1 ) ;
2501: LD_INT 35
2503: PPUSH
2504: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2508: LD_EXP 13
2512: PPUSH
2513: LD_STRING D5b-Joan-1
2515: PPUSH
2516: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2520: LD_EXP 1
2524: PPUSH
2525: LD_STRING D5b-JMM-2
2527: PPUSH
2528: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2532: LD_EXP 13
2536: PPUSH
2537: LD_STRING D5b-Joan-2
2539: PPUSH
2540: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2544: LD_EXP 1
2548: PPUSH
2549: LD_STRING D5b-JMM-3
2551: PPUSH
2552: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2556: LD_EXP 13
2560: PPUSH
2561: LD_STRING D5b-Joan-3
2563: PPUSH
2564: CALL_OW 88
// end else
2568: GO 2910
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2570: LD_VAR 0 2
2574: PUSH
2575: LD_VAR 0 3
2579: ARRAY
2580: PPUSH
2581: LD_STRING D5a-Sol1-1
2583: PPUSH
2584: CALL_OW 88
// DialogueOff ;
2588: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2592: LD_EXP 13
2596: PPUSH
2597: LD_INT 500
2599: PPUSH
2600: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2604: LD_EXP 13
2608: PPUSH
2609: LD_VAR 0 2
2613: PUSH
2614: LD_VAR 0 3
2618: ARRAY
2619: PPUSH
2620: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2624: LD_VAR 0 2
2628: PUSH
2629: LD_VAR 0 3
2633: ARRAY
2634: PPUSH
2635: LD_EXP 13
2639: PPUSH
2640: CALL_OW 119
// wait ( 0 0$1 ) ;
2644: LD_INT 35
2646: PPUSH
2647: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2651: LD_EXP 13
2655: PPUSH
2656: LD_STRING D5a-Joan-1
2658: PPUSH
2659: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2663: LD_VAR 0 2
2667: PUSH
2668: LD_VAR 0 3
2672: ARRAY
2673: PPUSH
2674: LD_STRING D5a-Sol1-2
2676: PPUSH
2677: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2681: LD_EXP 13
2685: PPUSH
2686: LD_STRING D5a-Joan-2
2688: PPUSH
2689: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2693: LD_VAR 0 2
2697: PUSH
2698: LD_VAR 0 3
2702: ARRAY
2703: PPUSH
2704: LD_STRING D5a-Sol1-3
2706: PPUSH
2707: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
2711: LD_EXP 13
2715: PPUSH
2716: LD_STRING D5a-Joan-3
2718: PPUSH
2719: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_STRING D5a-Sol1-4
2736: PPUSH
2737: CALL_OW 88
// ComExitVehicle ( JMM ) ;
2741: LD_EXP 1
2745: PPUSH
2746: CALL_OW 121
// ComExitBuilding ( JMM ) ;
2750: LD_EXP 1
2754: PPUSH
2755: CALL_OW 122
// wait ( 0 0$1 ) ;
2759: LD_INT 35
2761: PPUSH
2762: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2766: LD_INT 35
2768: PPUSH
2769: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
2773: LD_EXP 13
2777: PUSH
2778: LD_VAR 0 2
2782: PUSH
2783: LD_VAR 0 3
2787: ARRAY
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PPUSH
2793: LD_EXP 1
2797: PPUSH
2798: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
2802: LD_EXP 13
2806: PPUSH
2807: LD_EXP 1
2811: PPUSH
2812: CALL_OW 296
2816: PUSH
2817: LD_INT 5
2819: LESS
2820: IFFALSE 2766
// ComTurnUnit ( Joan , JMM ) ;
2822: LD_EXP 13
2826: PPUSH
2827: LD_EXP 1
2831: PPUSH
2832: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2836: LD_EXP 1
2840: PPUSH
2841: LD_EXP 13
2845: PPUSH
2846: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
2850: LD_EXP 13
2854: PPUSH
2855: LD_STRING D5a-Joan-4
2857: PPUSH
2858: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
2862: LD_EXP 1
2866: PPUSH
2867: LD_STRING D5a-JMM-4
2869: PPUSH
2870: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
2874: LD_EXP 13
2878: PPUSH
2879: LD_STRING D5a-Joan-5
2881: PPUSH
2882: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
2886: LD_EXP 1
2890: PPUSH
2891: LD_STRING D5a-JMM-5
2893: PPUSH
2894: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
2898: LD_EXP 13
2902: PPUSH
2903: LD_STRING D5a-Joan-6
2905: PPUSH
2906: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
2910: LD_EXP 1
2914: PPUSH
2915: LD_STRING D6-JMM-1
2917: PPUSH
2918: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
2922: LD_EXP 13
2926: PPUSH
2927: LD_STRING D6-Joan-1
2929: PPUSH
2930: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
2934: LD_EXP 1
2938: PPUSH
2939: LD_STRING D6-JMM-2
2941: PPUSH
2942: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
2946: LD_EXP 13
2950: PPUSH
2951: LD_STRING D6-Joan-2
2953: PPUSH
2954: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
2958: LD_EXP 1
2962: PPUSH
2963: LD_STRING D6-JMM-3
2965: PPUSH
2966: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
2970: LD_EXP 13
2974: PPUSH
2975: LD_STRING D6-Joan-3
2977: PPUSH
2978: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
2982: LD_EXP 1
2986: PPUSH
2987: LD_STRING D6-JMM-4
2989: PPUSH
2990: CALL_OW 88
// DialogueOff ;
2994: CALL_OW 7
// InGameOff ;
2998: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3002: LD_EXP 13
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3014: LD_STRING MJ
3016: PPUSH
3017: CALL_OW 337
// JoanStatus = 1 ;
3021: LD_ADDR_EXP 14
3025: PUSH
3026: LD_INT 1
3028: ST_TO_ADDR
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
// uc_side = 1 ;
3038: LD_ADDR_OWVAR 20
3042: PUSH
3043: LD_INT 1
3045: ST_TO_ADDR
// uc_nation = 1 ;
3046: LD_ADDR_OWVAR 21
3050: PUSH
3051: LD_INT 1
3053: ST_TO_ADDR
// if number = 1 then
3054: LD_VAR 0 1
3058: PUSH
3059: LD_INT 1
3061: EQUAL
3062: IFFALSE 3200
// begin hc_class := 1 ;
3064: LD_ADDR_OWVAR 28
3068: PUSH
3069: LD_INT 1
3071: ST_TO_ADDR
// hc_sex := sex_male ;
3072: LD_ADDR_OWVAR 27
3076: PUSH
3077: LD_INT 1
3079: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3080: LD_ADDR_OWVAR 33
3084: PUSH
3085: LD_STRING AmGalRemake
3087: ST_TO_ADDR
// hc_face_number := 7 ;
3088: LD_ADDR_OWVAR 34
3092: PUSH
3093: LD_INT 7
3095: ST_TO_ADDR
// hc_name := Bobby Jorda ;
3096: LD_ADDR_OWVAR 26
3100: PUSH
3101: LD_STRING Bobby Jorda
3103: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3104: LD_ADDR_OWVAR 31
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 1
3114: PUSH
3115: LD_INT 1
3117: PUSH
3118: LD_INT 1
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: ST_TO_ADDR
// un = CreateHuman ;
3127: LD_ADDR_VAR 0 3
3131: PUSH
3132: CALL_OW 44
3136: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3137: LD_VAR 0 3
3141: PPUSH
3142: LD_INT 12
3144: PPUSH
3145: LD_INT 1
3147: PPUSH
3148: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3152: LD_VAR 0 3
3156: PPUSH
3157: CALL_OW 87
// wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// DialogueOn ;
3168: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_STRING D11b-Sol3-1
3179: PPUSH
3180: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3184: LD_EXP 1
3188: PPUSH
3189: LD_STRING D11b-JMM-1
3191: PPUSH
3192: CALL_OW 88
// DialogueOff ;
3196: CALL_OW 7
// end ; if number = 2 then
3200: LD_VAR 0 1
3204: PUSH
3205: LD_INT 2
3207: EQUAL
3208: IFFALSE 3346
// begin hc_class := 3 ;
3210: LD_ADDR_OWVAR 28
3214: PUSH
3215: LD_INT 3
3217: ST_TO_ADDR
// hc_sex := sex_male ;
3218: LD_ADDR_OWVAR 27
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3226: LD_ADDR_OWVAR 33
3230: PUSH
3231: LD_STRING SecondCharsGal
3233: ST_TO_ADDR
// hc_face_number := 55 ;
3234: LD_ADDR_OWVAR 34
3238: PUSH
3239: LD_INT 55
3241: ST_TO_ADDR
// hc_name := George McCarthy ;
3242: LD_ADDR_OWVAR 26
3246: PUSH
3247: LD_STRING George McCarthy
3249: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3250: LD_ADDR_OWVAR 31
3254: PUSH
3255: LD_INT 1
3257: PUSH
3258: LD_INT 2
3260: PUSH
3261: LD_INT 3
3263: PUSH
3264: LD_INT 1
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: ST_TO_ADDR
// un = CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3283: LD_VAR 0 3
3287: PPUSH
3288: LD_INT 12
3290: PPUSH
3291: LD_INT 1
3293: PPUSH
3294: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3298: LD_VAR 0 3
3302: PPUSH
3303: CALL_OW 87
// wait ( 0 0$1 ) ;
3307: LD_INT 35
3309: PPUSH
3310: CALL_OW 67
// DialogueOn ;
3314: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3318: LD_VAR 0 3
3322: PPUSH
3323: LD_STRING D11d-Sol4-1
3325: PPUSH
3326: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3330: LD_EXP 1
3334: PPUSH
3335: LD_STRING D11d-JMM-1
3337: PPUSH
3338: CALL_OW 88
// DialogueOff ;
3342: CALL_OW 7
// end ; if number = 3 then
3346: LD_VAR 0 1
3350: PUSH
3351: LD_INT 3
3353: EQUAL
3354: IFFALSE 3480
// begin hc_class := 3 ;
3356: LD_ADDR_OWVAR 28
3360: PUSH
3361: LD_INT 3
3363: ST_TO_ADDR
// hc_sex := sex_female ;
3364: LD_ADDR_OWVAR 27
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3372: LD_ADDR_OWVAR 33
3376: PUSH
3377: LD_STRING SecondCharsGal
3379: ST_TO_ADDR
// hc_face_number := 45 ;
3380: LD_ADDR_OWVAR 34
3384: PUSH
3385: LD_INT 45
3387: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING Sylvia Creak
3395: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3396: LD_ADDR_OWVAR 31
3400: PUSH
3401: LD_INT 1
3403: PUSH
3404: LD_INT 3
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 1
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: ST_TO_ADDR
// un = CreateHuman ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3429: LD_VAR 0 3
3433: PPUSH
3434: LD_INT 12
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: CALL_OW 87
// wait ( 0 0$1 ) ;
3453: LD_INT 35
3455: PPUSH
3456: CALL_OW 67
// DialogueOn ;
3460: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3464: LD_VAR 0 3
3468: PPUSH
3469: LD_STRING D11e-FSol4-1
3471: PPUSH
3472: CALL_OW 88
// DialogueOff ;
3476: CALL_OW 7
// end ; if number = 4 then
3480: LD_VAR 0 1
3484: PUSH
3485: LD_INT 4
3487: EQUAL
3488: IFFALSE 3614
// begin hc_class := 3 ;
3490: LD_ADDR_OWVAR 28
3494: PUSH
3495: LD_INT 3
3497: ST_TO_ADDR
// hc_sex := sex_female ;
3498: LD_ADDR_OWVAR 27
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3506: LD_ADDR_OWVAR 33
3510: PUSH
3511: LD_STRING SecondCharsGal
3513: ST_TO_ADDR
// hc_face_number := 46 ;
3514: LD_ADDR_OWVAR 34
3518: PUSH
3519: LD_INT 46
3521: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3522: LD_ADDR_OWVAR 26
3526: PUSH
3527: LD_STRING Sylvia Creak
3529: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3530: LD_ADDR_OWVAR 31
3534: PUSH
3535: LD_INT 1
3537: PUSH
3538: LD_INT 3
3540: PUSH
3541: LD_INT 1
3543: PUSH
3544: LD_INT 1
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: ST_TO_ADDR
// un = CreateHuman ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: CALL_OW 44
3562: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3563: LD_VAR 0 3
3567: PPUSH
3568: LD_INT 12
3570: PPUSH
3571: LD_INT 1
3573: PPUSH
3574: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3578: LD_VAR 0 3
3582: PPUSH
3583: CALL_OW 87
// wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// DialogueOn ;
3594: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_STRING D11e-FSol4-1
3605: PPUSH
3606: CALL_OW 88
// DialogueOff ;
3610: CALL_OW 7
// end ; if number = 5 then
3614: LD_VAR 0 1
3618: PUSH
3619: LD_INT 5
3621: EQUAL
3622: IFFALSE 3760
// begin hc_class := 1 ;
3624: LD_ADDR_OWVAR 28
3628: PUSH
3629: LD_INT 1
3631: ST_TO_ADDR
// hc_sex := sex_female ;
3632: LD_ADDR_OWVAR 27
3636: PUSH
3637: LD_INT 2
3639: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3640: LD_ADDR_OWVAR 33
3644: PUSH
3645: LD_STRING SecondCharsGal
3647: ST_TO_ADDR
// hc_face_number := 37 ;
3648: LD_ADDR_OWVAR 34
3652: PUSH
3653: LD_INT 37
3655: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3656: LD_ADDR_OWVAR 26
3660: PUSH
3661: LD_STRING Margherite Simpson
3663: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3664: LD_ADDR_OWVAR 31
3668: PUSH
3669: LD_INT 1
3671: PUSH
3672: LD_INT 1
3674: PUSH
3675: LD_INT 1
3677: PUSH
3678: LD_INT 1
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: LIST
3685: LIST
3686: ST_TO_ADDR
// un = CreateHuman ;
3687: LD_ADDR_VAR 0 3
3691: PUSH
3692: CALL_OW 44
3696: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3697: LD_VAR 0 3
3701: PPUSH
3702: LD_INT 12
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: CALL_OW 87
// wait ( 0 0$1 ) ;
3721: LD_INT 35
3723: PPUSH
3724: CALL_OW 67
// DialogueOn ;
3728: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3732: LD_VAR 0 3
3736: PPUSH
3737: LD_STRING D11c-FSol3-1
3739: PPUSH
3740: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3744: LD_EXP 1
3748: PPUSH
3749: LD_STRING D11c-JMM-1
3751: PPUSH
3752: CALL_OW 88
// DialogueOff ;
3756: CALL_OW 7
// end ; if number = 6 then
3760: LD_VAR 0 1
3764: PUSH
3765: LD_INT 6
3767: EQUAL
3768: IFFALSE 3894
// begin hc_class := 1 ;
3770: LD_ADDR_OWVAR 28
3774: PUSH
3775: LD_INT 1
3777: ST_TO_ADDR
// hc_sex := sex_male ;
3778: LD_ADDR_OWVAR 27
3782: PUSH
3783: LD_INT 1
3785: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3786: LD_ADDR_OWVAR 33
3790: PUSH
3791: LD_STRING AmGalRemake
3793: ST_TO_ADDR
// hc_face_number := 1 ;
3794: LD_ADDR_OWVAR 34
3798: PUSH
3799: LD_INT 1
3801: ST_TO_ADDR
// hc_name := Charles Brown ;
3802: LD_ADDR_OWVAR 26
3806: PUSH
3807: LD_STRING Charles Brown
3809: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3810: LD_ADDR_OWVAR 31
3814: PUSH
3815: LD_INT 2
3817: PUSH
3818: LD_INT 1
3820: PUSH
3821: LD_INT 0
3823: PUSH
3824: LD_INT 1
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: ST_TO_ADDR
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3843: LD_VAR 0 3
3847: PPUSH
3848: LD_INT 12
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3858: LD_VAR 0 3
3862: PPUSH
3863: CALL_OW 87
// wait ( 0 0$1 ) ;
3867: LD_INT 35
3869: PPUSH
3870: CALL_OW 67
// DialogueOn ;
3874: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
3878: LD_VAR 0 3
3882: PPUSH
3883: LD_STRING D11f-Sol5-1
3885: PPUSH
3886: CALL_OW 88
// DialogueOff ;
3890: CALL_OW 7
// end ; if number = 7 then
3894: LD_VAR 0 1
3898: PUSH
3899: LD_INT 7
3901: EQUAL
3902: IFFALSE 4028
// begin hc_class := 1 ;
3904: LD_ADDR_OWVAR 28
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// hc_sex := sex_female ;
3912: LD_ADDR_OWVAR 27
3916: PUSH
3917: LD_INT 2
3919: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3920: LD_ADDR_OWVAR 33
3924: PUSH
3925: LD_STRING AmGalRemake
3927: ST_TO_ADDR
// hc_face_number := 2 ;
3928: LD_ADDR_OWVAR 34
3932: PUSH
3933: LD_INT 2
3935: ST_TO_ADDR
// hc_name := Johanna Holland ;
3936: LD_ADDR_OWVAR 26
3940: PUSH
3941: LD_STRING Johanna Holland
3943: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
3944: LD_ADDR_OWVAR 31
3948: PUSH
3949: LD_INT 1
3951: PUSH
3952: LD_INT 0
3954: PUSH
3955: LD_INT 0
3957: PUSH
3958: LD_INT 0
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: ST_TO_ADDR
// un = CreateHuman ;
3967: LD_ADDR_VAR 0 3
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3977: LD_VAR 0 3
3981: PPUSH
3982: LD_INT 12
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3992: LD_VAR 0 3
3996: PPUSH
3997: CALL_OW 87
// wait ( 0 0$1 ) ;
4001: LD_INT 35
4003: PPUSH
4004: CALL_OW 67
// DialogueOn ;
4008: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4012: LD_VAR 0 3
4016: PPUSH
4017: LD_STRING D11a-FSol2-1
4019: PPUSH
4020: CALL_OW 88
// DialogueOff ;
4024: CALL_OW 7
// end ; end ; end_of_file
4028: LD_VAR 0 2
4032: RET
// export function PrepareRussian ; var i ; begin
4033: LD_INT 0
4035: PPUSH
4036: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4037: LD_INT 3
4039: PPUSH
4040: LD_INT 3
4042: PPUSH
4043: LD_INT 2
4045: PPUSH
4046: LD_EXP 31
4050: PPUSH
4051: LD_EXP 32
4055: PPUSH
4056: CALL_OW 12
4060: PPUSH
4061: LD_INT 2
4063: PPUSH
4064: LD_INT 4
4066: PPUSH
4067: CALL 4674 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4071: LD_INT 3
4073: PPUSH
4074: LD_INT 3
4076: PPUSH
4077: LD_INT 8
4079: PPUSH
4080: LD_EXP 31
4084: PPUSH
4085: LD_EXP 32
4089: PPUSH
4090: CALL_OW 12
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: CALL 4674 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4105: LD_INT 3
4107: PPUSH
4108: LD_INT 3
4110: PPUSH
4111: LD_INT 67
4113: PPUSH
4114: LD_EXP 31
4118: PPUSH
4119: LD_EXP 32
4123: PPUSH
4124: CALL_OW 12
4128: PPUSH
4129: LD_INT 1
4131: PPUSH
4132: LD_INT 2
4134: PPUSH
4135: CALL 4674 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: LD_INT 21
4147: PPUSH
4148: LD_EXP 31
4152: PPUSH
4153: LD_EXP 32
4157: PPUSH
4158: CALL_OW 12
4162: PPUSH
4163: LD_INT 3
4165: PPUSH
4166: LD_INT 6
4168: PPUSH
4169: CALL 4674 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4173: LD_INT 3
4175: PPUSH
4176: LD_INT 3
4178: PPUSH
4179: LD_INT 17
4181: PPUSH
4182: LD_EXP 31
4186: PPUSH
4187: LD_EXP 32
4191: PPUSH
4192: CALL_OW 12
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 6
4202: PPUSH
4203: CALL 4674 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4207: LD_INT 3
4209: PPUSH
4210: LD_INT 3
4212: PPUSH
4213: LD_INT 32
4215: PPUSH
4216: LD_EXP 31
4220: PPUSH
4221: LD_EXP 32
4225: PPUSH
4226: CALL_OW 12
4230: PPUSH
4231: LD_INT 4
4233: PPUSH
4234: LD_INT 2
4236: PPUSH
4237: CALL 4674 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4241: LD_ADDR_VAR 0 2
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 3
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 21
4258: PUSH
4259: LD_INT 3
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 30
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: PPUSH
4281: CALL_OW 69
4285: PUSH
4286: FOR_IN
4287: IFFALSE 4327
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4289: LD_INT 3
4291: PPUSH
4292: LD_INT 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PPUSH
4300: LD_EXP 31
4304: PPUSH
4305: LD_EXP 32
4309: PPUSH
4310: CALL_OW 12
4314: PPUSH
4315: LD_INT 1
4317: PPUSH
4318: LD_INT 1
4320: PPUSH
4321: CALL 4674 0 6
4325: GO 4286
4327: POP
4328: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: LD_INT 22
4336: PUSH
4337: LD_INT 3
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 21
4346: PUSH
4347: LD_INT 3
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 30
4356: PUSH
4357: LD_INT 31
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: PPUSH
4369: CALL_OW 69
4373: PUSH
4374: FOR_IN
4375: IFFALSE 4403
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4377: LD_EXP 31
4381: PPUSH
4382: LD_EXP 32
4386: PPUSH
4387: CALL_OW 12
4391: PPUSH
4392: LD_VAR 0 2
4396: PPUSH
4397: CALL 4784 0 2
4401: GO 4374
4403: POP
4404: POP
// end ; end_of_file
4405: LD_VAR 0 1
4409: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4410: LD_INT 0
4412: PPUSH
4413: PPUSH
// if exist_mode then
4414: LD_VAR 0 2
4418: IFFALSE 4437
// begin unit := CreateCharacter ( ident ) ;
4420: LD_ADDR_VAR 0 4
4424: PUSH
4425: LD_VAR 0 1
4429: PPUSH
4430: CALL_OW 34
4434: ST_TO_ADDR
// end else
4435: GO 4452
// begin unit := NewCharacter ( ident ) ;
4437: LD_ADDR_VAR 0 4
4441: PUSH
4442: LD_VAR 0 1
4446: PPUSH
4447: CALL_OW 25
4451: ST_TO_ADDR
// end ; result := unit ;
4452: LD_ADDR_VAR 0 3
4456: PUSH
4457: LD_VAR 0 4
4461: ST_TO_ADDR
// end ;
4462: LD_VAR 0 3
4466: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
// rnd = rand ( 1 , characters ) ;
4472: LD_ADDR_VAR 0 6
4476: PUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_VAR 0 1
4484: PPUSH
4485: CALL_OW 12
4489: ST_TO_ADDR
// for i = 1 to characters do
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: DOUBLE
4496: LD_INT 1
4498: DEC
4499: ST_TO_ADDR
4500: LD_VAR 0 1
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4616
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4508: LD_VAR 0 5
4512: PUSH
4513: LD_VAR 0 6
4517: EQUAL
4518: PUSH
4519: LD_VAR 0 1
4523: PUSH
4524: LD_VAR 0 5
4528: ARRAY
4529: PPUSH
4530: CALL_OW 258
4534: PUSH
4535: LD_INT 1
4537: EQUAL
4538: AND
4539: IFFALSE 4561
// Say ( characters [ i ] , dialogMID ) ;
4541: LD_VAR 0 1
4545: PUSH
4546: LD_VAR 0 5
4550: ARRAY
4551: PPUSH
4552: LD_VAR 0 2
4556: PPUSH
4557: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4561: LD_VAR 0 5
4565: PUSH
4566: LD_VAR 0 6
4570: EQUAL
4571: PUSH
4572: LD_VAR 0 1
4576: PUSH
4577: LD_VAR 0 5
4581: ARRAY
4582: PPUSH
4583: CALL_OW 258
4587: PUSH
4588: LD_INT 2
4590: EQUAL
4591: AND
4592: IFFALSE 4614
// Say ( characters [ i ] , dialogFID ) ;
4594: LD_VAR 0 1
4598: PUSH
4599: LD_VAR 0 5
4603: ARRAY
4604: PPUSH
4605: LD_VAR 0 3
4609: PPUSH
4610: CALL_OW 88
// end ;
4614: GO 4505
4616: POP
4617: POP
// end ;
4618: LD_VAR 0 4
4622: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4623: LD_INT 0
4625: PPUSH
4626: PPUSH
// for i in charactersList do
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: LD_VAR 0 1
4636: PUSH
4637: FOR_IN
4638: IFFALSE 4667
// begin if IsOk ( i ) then
4640: LD_VAR 0 4
4644: PPUSH
4645: CALL_OW 302
4649: IFFALSE 4665
// SaveCharacters ( i , ident ) ;
4651: LD_VAR 0 4
4655: PPUSH
4656: LD_VAR 0 2
4660: PPUSH
4661: CALL_OW 38
// end ;
4665: GO 4637
4667: POP
4668: POP
// end ;
4669: LD_VAR 0 3
4673: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4674: LD_INT 0
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
// for i = 1 to count do
4680: LD_ADDR_VAR 0 8
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_VAR 0 6
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4777
// begin uc_side = side ;
4698: LD_ADDR_OWVAR 20
4702: PUSH
4703: LD_VAR 0 1
4707: ST_TO_ADDR
// uc_nation = nation ;
4708: LD_ADDR_OWVAR 21
4712: PUSH
4713: LD_VAR 0 2
4717: ST_TO_ADDR
// hc_gallery =  ;
4718: LD_ADDR_OWVAR 33
4722: PUSH
4723: LD_STRING 
4725: ST_TO_ADDR
// hc_name =  ;
4726: LD_ADDR_OWVAR 26
4730: PUSH
4731: LD_STRING 
4733: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_VAR 0 5
4741: PPUSH
4742: LD_VAR 0 4
4746: PPUSH
4747: CALL_OW 380
// un = CreateHuman ;
4751: LD_ADDR_VAR 0 10
4755: PUSH
4756: CALL_OW 44
4760: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4761: LD_VAR 0 10
4765: PPUSH
4766: LD_VAR 0 3
4770: PPUSH
4771: CALL_OW 52
// end ;
4775: GO 4695
4777: POP
4778: POP
// end ;
4779: LD_VAR 0 7
4783: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4784: LD_INT 0
4786: PPUSH
4787: PPUSH
4788: PPUSH
// uc_side := GetSide ( b ) ;
4789: LD_ADDR_OWVAR 20
4793: PUSH
4794: LD_VAR 0 2
4798: PPUSH
4799: CALL_OW 255
4803: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4804: LD_ADDR_OWVAR 21
4808: PUSH
4809: LD_VAR 0 2
4813: PPUSH
4814: CALL_OW 248
4818: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4819: LD_INT 0
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: LD_VAR 0 1
4829: PPUSH
4830: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
4834: LD_ADDR_VAR 0 5
4838: PUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 254
4848: PUSH
4849: LD_INT 3
4851: MINUS
4852: ST_TO_ADDR
// if dir < 0 then
4853: LD_VAR 0 5
4857: PUSH
4858: LD_INT 0
4860: LESS
4861: IFFALSE 4877
// dir := 6 + dir ;
4863: LD_ADDR_VAR 0 5
4867: PUSH
4868: LD_INT 6
4870: PUSH
4871: LD_VAR 0 5
4875: PLUS
4876: ST_TO_ADDR
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 4
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , dir ) ;
4887: LD_VAR 0 4
4891: PPUSH
4892: LD_VAR 0 5
4896: PPUSH
4897: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4901: LD_VAR 0 4
4905: PPUSH
4906: LD_VAR 0 2
4910: PPUSH
4911: CALL_OW 52
// end ;
4915: LD_VAR 0 3
4919: RET
// export function PrepareDifficulty ; begin
4920: LD_INT 0
4922: PPUSH
// if Difficulty = 1 then
4923: LD_OWVAR 67
4927: PUSH
4928: LD_INT 1
4930: EQUAL
4931: IFFALSE 4949
// begin RuSolMinLevel = 2 ;
4933: LD_ADDR_EXP 31
4937: PUSH
4938: LD_INT 2
4940: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
4941: LD_ADDR_EXP 32
4945: PUSH
4946: LD_INT 5
4948: ST_TO_ADDR
// end ; if Difficulty = 2 then
4949: LD_OWVAR 67
4953: PUSH
4954: LD_INT 2
4956: EQUAL
4957: IFFALSE 4975
// begin RuSolMinLevel = 3 ;
4959: LD_ADDR_EXP 31
4963: PUSH
4964: LD_INT 3
4966: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4967: LD_ADDR_EXP 32
4971: PUSH
4972: LD_INT 6
4974: ST_TO_ADDR
// end ; if Difficulty = 3 then
4975: LD_OWVAR 67
4979: PUSH
4980: LD_INT 3
4982: EQUAL
4983: IFFALSE 5001
// begin RuSolMinLevel = 5 ;
4985: LD_ADDR_EXP 31
4989: PUSH
4990: LD_INT 5
4992: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
4993: LD_ADDR_EXP 32
4997: PUSH
4998: LD_INT 6
5000: ST_TO_ADDR
// end ; end ;
5001: LD_VAR 0 1
5005: RET
// export function ShowQuery1 ; begin
5006: LD_INT 0
5008: PPUSH
// case query ( QKill ) of 1 :
5009: LD_STRING QKill
5011: PPUSH
5012: CALL_OW 97
5016: PUSH
5017: LD_INT 1
5019: DOUBLE
5020: EQUAL
5021: IFTRUE 5025
5023: GO 5036
5025: POP
// begin result = 1 ;
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// end ; 2 :
5034: GO 5075
5036: LD_INT 2
5038: DOUBLE
5039: EQUAL
5040: IFTRUE 5044
5042: GO 5055
5044: POP
// begin result = 2 ;
5045: LD_ADDR_VAR 0 1
5049: PUSH
5050: LD_INT 2
5052: ST_TO_ADDR
// end ; 3 :
5053: GO 5075
5055: LD_INT 3
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5074
5063: POP
// begin result = 3 ;
5064: LD_ADDR_VAR 0 1
5068: PUSH
5069: LD_INT 3
5071: ST_TO_ADDR
// end ; end ;
5072: GO 5075
5074: POP
// end ;
5075: LD_VAR 0 1
5079: RET
// export function ShowQuery2 ; begin
5080: LD_INT 0
5082: PPUSH
// case query ( QKill2 ) of 1 :
5083: LD_STRING QKill2
5085: PPUSH
5086: CALL_OW 97
5090: PUSH
5091: LD_INT 1
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5099
5097: GO 5110
5099: POP
// begin result = 1 ;
5100: LD_ADDR_VAR 0 1
5104: PUSH
5105: LD_INT 1
5107: ST_TO_ADDR
// end ; 2 :
5108: GO 5130
5110: LD_INT 2
5112: DOUBLE
5113: EQUAL
5114: IFTRUE 5118
5116: GO 5129
5118: POP
// begin result = 2 ;
5119: LD_ADDR_VAR 0 1
5123: PUSH
5124: LD_INT 2
5126: ST_TO_ADDR
// end ; end ;
5127: GO 5130
5129: POP
// end ;
5130: LD_VAR 0 1
5134: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5135: LD_INT 0
5137: PPUSH
5138: PPUSH
5139: PPUSH
5140: PPUSH
// for i = 1 to 72 do
5141: LD_ADDR_VAR 0 5
5145: PUSH
5146: DOUBLE
5147: LD_INT 1
5149: DEC
5150: ST_TO_ADDR
5151: LD_INT 72
5153: PUSH
5154: FOR_TO
5155: IFFALSE 5213
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5157: LD_VAR 0 5
5161: PPUSH
5162: LD_VAR 0 1
5166: PPUSH
5167: CALL_OW 321
5171: PUSH
5172: LD_INT 1
5174: EQUAL
5175: PUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: CALL_OW 482
5190: PUSH
5191: LD_INT 1
5193: EQUAL
5194: AND
5195: IFFALSE 5211
// AddComResearch ( lab , i ) ;
5197: LD_VAR 0 2
5201: PPUSH
5202: LD_VAR 0 5
5206: PPUSH
5207: CALL_OW 184
5211: GO 5154
5213: POP
5214: POP
// end ;
5215: LD_VAR 0 4
5219: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
5226: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5227: LD_ADDR_VAR 0 6
5231: PUSH
5232: LD_INT 22
5234: PUSH
5235: LD_VAR 0 1
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 2
5246: PUSH
5247: LD_INT 25
5249: PUSH
5250: LD_INT 2
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PUSH
5257: LD_INT 25
5259: PUSH
5260: LD_INT 16
5262: PUSH
5263: EMPTY
5264: LIST
5265: LIST
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 24
5274: PUSH
5275: LD_INT 1000
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5292: LD_ADDR_VAR 0 4
5296: PUSH
5297: LD_INT 22
5299: PUSH
5300: LD_VAR 0 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 3
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: LD_INT 24
5324: PUSH
5325: LD_INT 1000
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: EMPTY
5342: LIST
5343: PPUSH
5344: CALL_OW 69
5348: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5349: LD_VAR 0 4
5353: PUSH
5354: LD_INT 0
5356: GREATER
5357: PUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 0
5365: GREATER
5366: AND
5367: IFFALSE 5433
// begin for i in engineerOk_list do
5369: LD_ADDR_VAR 0 5
5373: PUSH
5374: LD_VAR 0 6
5378: PUSH
5379: FOR_IN
5380: IFFALSE 5431
// begin for j in buildings_list do
5382: LD_ADDR_VAR 0 7
5386: PUSH
5387: LD_VAR 0 4
5391: PUSH
5392: FOR_IN
5393: IFFALSE 5427
// begin AddComExitBuilding ( i ) ;
5395: LD_VAR 0 5
5399: PPUSH
5400: CALL_OW 182
// wait ( 0 0$1 ) ;
5404: LD_INT 35
5406: PPUSH
5407: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5411: LD_VAR 0 5
5415: PPUSH
5416: LD_VAR 0 7
5420: PPUSH
5421: CALL_OW 190
// end ;
5425: GO 5392
5427: POP
5428: POP
// end ;
5429: GO 5379
5431: POP
5432: POP
// end ; if buildings_list = 0 then
5433: LD_VAR 0 4
5437: PUSH
5438: LD_INT 0
5440: EQUAL
5441: IFFALSE 5474
// begin for i in engineerOK_list do
5443: LD_ADDR_VAR 0 5
5447: PUSH
5448: LD_VAR 0 6
5452: PUSH
5453: FOR_IN
5454: IFFALSE 5472
// begin ComEnterUnit ( i , building ) ;
5456: LD_VAR 0 5
5460: PPUSH
5461: LD_VAR 0 2
5465: PPUSH
5466: CALL_OW 120
// end ;
5470: GO 5453
5472: POP
5473: POP
// end ; end ;
5474: LD_VAR 0 3
5478: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5479: LD_INT 0
5481: PPUSH
5482: PPUSH
5483: PPUSH
5484: PPUSH
5485: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5486: LD_ADDR_VAR 0 6
5490: PUSH
5491: LD_INT 22
5493: PUSH
5494: LD_VAR 0 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 25
5505: PUSH
5506: LD_INT 4
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PPUSH
5517: CALL_OW 69
5521: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5522: LD_ADDR_VAR 0 9
5526: PUSH
5527: LD_VAR 0 3
5531: PPUSH
5532: LD_INT 22
5534: PUSH
5535: LD_VAR 0 1
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: LD_INT 21
5546: PUSH
5547: LD_INT 1
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: LD_INT 3
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 750
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: PPUSH
5576: CALL_OW 70
5580: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5581: LD_VAR 0 9
5585: PUSH
5586: LD_INT 0
5588: GREATER
5589: PUSH
5590: LD_VAR 0 6
5594: PUSH
5595: LD_INT 0
5597: GREATER
5598: AND
5599: IFFALSE 5726
// begin for i = 1 to damageUnits do
5601: LD_ADDR_VAR 0 7
5605: PUSH
5606: DOUBLE
5607: LD_INT 1
5609: DEC
5610: ST_TO_ADDR
5611: LD_VAR 0 9
5615: PUSH
5616: FOR_TO
5617: IFFALSE 5641
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5619: LD_VAR 0 9
5623: PUSH
5624: LD_VAR 0 7
5628: ARRAY
5629: PPUSH
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL_OW 113
5639: GO 5616
5641: POP
5642: POP
// for i in sci_list do
5643: LD_ADDR_VAR 0 7
5647: PUSH
5648: LD_VAR 0 6
5652: PUSH
5653: FOR_IN
5654: IFFALSE 5722
// begin ComExitBuilding ( i ) ;
5656: LD_VAR 0 7
5660: PPUSH
5661: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5665: LD_ADDR_VAR 0 8
5669: PUSH
5670: LD_VAR 0 2
5674: PPUSH
5675: LD_INT 22
5677: PUSH
5678: LD_VAR 0 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PPUSH
5687: CALL_OW 70
5691: PUSH
5692: FOR_IN
5693: IFFALSE 5718
// begin AddComHeal ( i , j ) ;
5695: LD_VAR 0 7
5699: PPUSH
5700: LD_VAR 0 8
5704: PPUSH
5705: CALL_OW 188
// wait ( 1 1$0 ) ;
5709: LD_INT 2100
5711: PPUSH
5712: CALL_OW 67
// end ;
5716: GO 5692
5718: POP
5719: POP
// end ;
5720: GO 5653
5722: POP
5723: POP
// end else
5724: GO 5740
// begin AddComEnterUnit ( sci_list , build ) ;
5726: LD_VAR 0 6
5730: PPUSH
5731: LD_VAR 0 4
5735: PPUSH
5736: CALL_OW 180
// end ; end ;
5740: LD_VAR 0 5
5744: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
5751: PPUSH
5752: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5753: LD_INT 22
5755: PUSH
5756: LD_VAR 0 1
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 21
5767: PUSH
5768: LD_INT 2
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PPUSH
5779: CALL_OW 69
5783: PUSH
5784: LD_VAR 0 3
5788: LESSEQUAL
5789: IFFALSE 5856
// for i = 1 to vehCount do
5791: LD_ADDR_VAR 0 10
5795: PUSH
5796: DOUBLE
5797: LD_INT 1
5799: DEC
5800: ST_TO_ADDR
5801: LD_VAR 0 3
5805: PUSH
5806: FOR_TO
5807: IFFALSE 5854
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_VAR 0 6
5823: PPUSH
5824: LD_VAR 0 7
5828: PPUSH
5829: LD_VAR 0 5
5833: PUSH
5834: LD_INT 1
5836: PPUSH
5837: LD_VAR 0 5
5841: PPUSH
5842: CALL_OW 12
5846: ARRAY
5847: PPUSH
5848: CALL_OW 185
5852: GO 5806
5854: POP
5855: POP
// repeat wait ( 0 0$1 ) ;
5856: LD_INT 35
5858: PPUSH
5859: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
5863: LD_INT 22
5865: PUSH
5866: LD_VAR 0 1
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 21
5877: PUSH
5878: LD_INT 2
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 24
5887: PUSH
5888: LD_INT 250
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: PPUSH
5900: CALL_OW 69
5904: PUSH
5905: LD_VAR 0 3
5909: GREATEREQUAL
5910: IFFALSE 5856
// repeat begin wait ( 0 0$1 ) ;
5912: LD_INT 35
5914: PPUSH
5915: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5919: LD_ADDR_VAR 0 10
5923: PUSH
5924: LD_INT 22
5926: PUSH
5927: LD_VAR 0 1
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 21
5938: PUSH
5939: LD_INT 2
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 24
5948: PUSH
5949: LD_INT 651
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: PPUSH
5961: CALL_OW 69
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6143
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5969: LD_ADDR_VAR 0 13
5973: PUSH
5974: LD_INT 22
5976: PUSH
5977: LD_VAR 0 4
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PPUSH
5986: CALL_OW 69
5990: PPUSH
5991: LD_VAR 0 10
5995: PPUSH
5996: CALL_OW 74
6000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6001: LD_ADDR_VAR 0 14
6005: PUSH
6006: LD_INT 22
6008: PUSH
6009: LD_VAR 0 4
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 59
6023: PUSH
6024: EMPTY
6025: LIST
6026: PUSH
6027: LD_INT 21
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 21
6039: PUSH
6040: LD_INT 2
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: PPUSH
6060: CALL_OW 69
6064: PPUSH
6065: LD_VAR 0 10
6069: PPUSH
6070: CALL_OW 74
6074: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6075: LD_VAR 0 10
6079: PPUSH
6080: LD_VAR 0 13
6084: PPUSH
6085: CALL_OW 296
6089: PUSH
6090: LD_INT 8
6092: PLUS
6093: PUSH
6094: LD_VAR 0 10
6098: PPUSH
6099: LD_VAR 0 14
6103: PPUSH
6104: CALL_OW 296
6108: LESS
6109: IFFALSE 6127
// begin ComAttackUnit ( i , target1 ) ;
6111: LD_VAR 0 10
6115: PPUSH
6116: LD_VAR 0 13
6120: PPUSH
6121: CALL_OW 115
// end else
6125: GO 6141
// begin ComAttackUnit ( i , target2 ) ;
6127: LD_VAR 0 10
6131: PPUSH
6132: LD_VAR 0 14
6136: PPUSH
6137: CALL_OW 115
// end ; end ;
6141: GO 5966
6143: POP
6144: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6145: LD_INT 22
6147: PUSH
6148: LD_INT 3
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 2
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 3
6167: PUSH
6168: LD_INT 34
6170: PUSH
6171: LD_INT 51
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: PUSH
6192: LD_INT 0
6194: EQUAL
6195: IFFALSE 5912
// end ;
6197: LD_VAR 0 9
6201: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6202: LD_INT 0
6204: PPUSH
6205: PPUSH
6206: PPUSH
6207: PPUSH
// enable ;
6208: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6209: LD_ADDR_VAR 0 7
6213: PUSH
6214: LD_VAR 0 3
6218: PPUSH
6219: CALL_OW 435
6223: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6224: LD_ADDR_VAR 0 6
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_VAR 0 1
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 34
6243: PUSH
6244: LD_VAR 0 2
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PPUSH
6257: CALL_OW 69
6261: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6262: LD_VAR 0 6
6266: PUSH
6267: LD_INT 0
6269: GREATER
6270: PUSH
6271: LD_VAR 0 3
6275: PPUSH
6276: CALL_OW 435
6280: AND
6281: PUSH
6282: LD_VAR 0 7
6286: PUSH
6287: LD_INT 0
6289: GREATER
6290: AND
6291: IFFALSE 6340
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6293: LD_VAR 0 6
6297: PUSH
6298: LD_INT 1
6300: ARRAY
6301: PPUSH
6302: LD_VAR 0 7
6306: PUSH
6307: LD_INT 1
6309: ARRAY
6310: PPUSH
6311: LD_VAR 0 7
6315: PUSH
6316: LD_INT 2
6318: ARRAY
6319: PPUSH
6320: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6324: LD_VAR 0 6
6328: PUSH
6329: LD_INT 1
6331: ARRAY
6332: PPUSH
6333: LD_INT 100
6335: PPUSH
6336: CALL_OW 240
// end ; clear_crates := false ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_INT 0
6347: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6348: LD_INT 35
6350: PPUSH
6351: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6355: LD_VAR 0 6
6359: PUSH
6360: LD_INT 1
6362: ARRAY
6363: PPUSH
6364: CALL_OW 315
6368: NOT
6369: PUSH
6370: LD_VAR 0 5
6374: OR
6375: IFFALSE 6348
// end ;
6377: LD_VAR 0 4
6381: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6382: LD_INT 0
6384: PPUSH
6385: PPUSH
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6395: LD_ADDR_VAR 0 9
6399: PUSH
6400: LD_INT 22
6402: PUSH
6403: LD_VAR 0 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 2
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 24
6424: PUSH
6425: LD_INT 660
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 58
6437: PUSH
6438: EMPTY
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 3
6447: PUSH
6448: LD_INT 34
6450: PUSH
6451: LD_INT 53
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6474: LD_ADDR_VAR 0 10
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_VAR 0 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 21
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 24
6506: PUSH
6507: LD_INT 660
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 69
6527: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6528: LD_ADDR_VAR 0 11
6532: PUSH
6533: LD_VAR 0 2
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_VAR 0 1
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 21
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 3
6562: PUSH
6563: LD_INT 24
6565: PUSH
6566: LD_INT 1000
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6587: LD_ADDR_VAR 0 12
6591: PUSH
6592: LD_VAR 0 2
6596: PPUSH
6597: LD_INT 22
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 21
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 24
6621: PUSH
6622: LD_INT 1000
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 58
6631: PUSH
6632: EMPTY
6633: LIST
6634: PUSH
6635: LD_INT 3
6637: PUSH
6638: LD_INT 34
6640: PUSH
6641: LD_INT 53
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 70
6663: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6664: LD_ADDR_VAR 0 13
6668: PUSH
6669: EMPTY
6670: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6671: LD_ADDR_VAR 0 14
6675: PUSH
6676: LD_VAR 0 2
6680: PPUSH
6681: LD_INT 22
6683: PUSH
6684: LD_VAR 0 1
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 25
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 70
6711: ST_TO_ADDR
// if damageVehicle_list > 0 then
6712: LD_VAR 0 10
6716: PUSH
6717: LD_INT 0
6719: GREATER
6720: IFFALSE 6758
// begin for i in damageVehicle_list do
6722: LD_ADDR_VAR 0 7
6726: PUSH
6727: LD_VAR 0 10
6731: PUSH
6732: FOR_IN
6733: IFFALSE 6756
// begin ComMoveXY ( i , repX , repY ) ;
6735: LD_VAR 0 7
6739: PPUSH
6740: LD_VAR 0 3
6744: PPUSH
6745: LD_VAR 0 4
6749: PPUSH
6750: CALL_OW 111
// end ;
6754: GO 6732
6756: POP
6757: POP
// end ; if vehicleNeedRepair_list > 0 then
6758: LD_VAR 0 11
6762: PUSH
6763: LD_INT 0
6765: GREATER
6766: IFFALSE 6853
// begin for i in vehicleNeedRepair_list do
6768: LD_ADDR_VAR 0 7
6772: PUSH
6773: LD_VAR 0 11
6777: PUSH
6778: FOR_IN
6779: IFFALSE 6851
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6781: LD_ADDR_VAR 0 13
6785: PUSH
6786: LD_VAR 0 13
6790: PUSH
6791: LD_VAR 0 7
6795: PPUSH
6796: CALL_OW 313
6800: ADD
6801: ST_TO_ADDR
// for j in mechanicInside_list do
6802: LD_ADDR_VAR 0 8
6806: PUSH
6807: LD_VAR 0 13
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6847
// begin ComExitVehicle ( i ) ;
6815: LD_VAR 0 7
6819: PPUSH
6820: CALL_OW 121
// wait ( 0 0$1 ) ;
6824: LD_INT 35
6826: PPUSH
6827: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6831: LD_VAR 0 7
6835: PPUSH
6836: LD_VAR 0 8
6840: PPUSH
6841: CALL_OW 129
// end ;
6845: GO 6812
6847: POP
6848: POP
// end ;
6849: GO 6778
6851: POP
6852: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6853: LD_VAR 0 12
6857: PUSH
6858: LD_INT 0
6860: GREATER
6861: IFFALSE 6901
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6863: LD_VAR 0 14
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: LD_VAR 0 12
6876: PUSH
6877: LD_INT 1
6879: ARRAY
6880: PPUSH
6881: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6885: LD_VAR 0 12
6889: PUSH
6890: LD_INT 1
6892: ARRAY
6893: PPUSH
6894: LD_INT 100
6896: PPUSH
6897: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6901: LD_VAR 0 9
6905: PUSH
6906: LD_INT 0
6908: GREATER
6909: IFFALSE 7100
// begin for i in vehicleOK_list do
6911: LD_ADDR_VAR 0 7
6915: PUSH
6916: LD_VAR 0 9
6920: PUSH
6921: FOR_IN
6922: IFFALSE 7098
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6924: LD_ADDR_VAR 0 15
6928: PUSH
6929: LD_INT 22
6931: PUSH
6932: LD_VAR 0 5
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 69
6945: PPUSH
6946: LD_VAR 0 7
6950: PPUSH
6951: CALL_OW 74
6955: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6956: LD_ADDR_VAR 0 16
6960: PUSH
6961: LD_INT 22
6963: PUSH
6964: LD_VAR 0 5
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: LD_INT 59
6978: PUSH
6979: EMPTY
6980: LIST
6981: PUSH
6982: LD_INT 21
6984: PUSH
6985: LD_INT 1
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 21
6994: PUSH
6995: LD_INT 2
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: PPUSH
7015: CALL_OW 69
7019: PPUSH
7020: LD_VAR 0 7
7024: PPUSH
7025: CALL_OW 74
7029: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7030: LD_VAR 0 7
7034: PPUSH
7035: LD_VAR 0 15
7039: PPUSH
7040: CALL_OW 296
7044: PUSH
7045: LD_INT 8
7047: PLUS
7048: PUSH
7049: LD_VAR 0 7
7053: PPUSH
7054: LD_VAR 0 16
7058: PPUSH
7059: CALL_OW 296
7063: LESS
7064: IFFALSE 7082
// begin ComAttackUnit ( i , target1 ) ;
7066: LD_VAR 0 7
7070: PPUSH
7071: LD_VAR 0 15
7075: PPUSH
7076: CALL_OW 115
// end else
7080: GO 7096
// begin ComAttackUnit ( i , target2 ) ;
7082: LD_VAR 0 7
7086: PPUSH
7087: LD_VAR 0 16
7091: PPUSH
7092: CALL_OW 115
// end ; end ;
7096: GO 6921
7098: POP
7099: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7100: LD_ADDR_VAR 0 7
7104: PUSH
7105: LD_VAR 0 2
7109: PPUSH
7110: LD_INT 22
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 70
7140: NOT
7141: PUSH
7142: FOR_IN
7143: IFFALSE 7166
// ComMoveXY ( i , repX , repY ) ;
7145: LD_VAR 0 7
7149: PPUSH
7150: LD_VAR 0 3
7154: PPUSH
7155: LD_VAR 0 4
7159: PPUSH
7160: CALL_OW 111
7164: GO 7142
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 6
7172: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7177: LD_INT 22
7179: PUSH
7180: LD_VAR 0 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 2
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: PUSH
7208: LD_INT 0
7210: GREATER
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_VAR 0 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 21
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 24
7239: PUSH
7240: LD_INT 1000
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: PPUSH
7256: CALL_OW 69
7260: PUSH
7261: LD_INT 0
7263: EQUAL
7264: AND
7265: PUSH
7266: LD_VAR 0 2
7270: PUSH
7271: LD_INT 0
7273: GREATER
7274: AND
7275: IFFALSE 7374
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_INT 22
7284: PUSH
7285: LD_VAR 0 1
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 69
7312: PUSH
7313: FOR_IN
7314: IFFALSE 7372
// begin AddComExitBuilding ( i ) ;
7316: LD_VAR 0 4
7320: PPUSH
7321: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7325: LD_VAR 0 4
7329: PPUSH
7330: LD_VAR 0 2
7334: PUSH
7335: LD_INT 1
7337: ARRAY
7338: PPUSH
7339: LD_VAR 0 2
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: LD_VAR 0 2
7352: PUSH
7353: LD_INT 3
7355: ARRAY
7356: PPUSH
7357: LD_VAR 0 2
7361: PUSH
7362: LD_INT 4
7364: ARRAY
7365: PPUSH
7366: CALL_OW 205
// end ;
7370: GO 7313
7372: POP
7373: POP
// end ; end ;
7374: LD_VAR 0 3
7378: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7379: LD_INT 0
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
7387: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7388: LD_ADDR_VAR 0 7
7392: PUSH
7393: LD_INT 22
7395: PUSH
7396: LD_VAR 0 1
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 25
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 56
7417: PUSH
7418: EMPTY
7419: LIST
7420: PUSH
7421: LD_INT 24
7423: PUSH
7424: LD_INT 700
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PPUSH
7437: CALL_OW 69
7441: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7442: LD_ADDR_VAR 0 8
7446: PUSH
7447: LD_INT 22
7449: PUSH
7450: LD_VAR 0 1
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 30
7461: PUSH
7462: LD_INT 32
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 58
7471: PUSH
7472: EMPTY
7473: LIST
7474: PUSH
7475: LD_INT 24
7477: PUSH
7478: LD_INT 251
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: PPUSH
7491: CALL_OW 69
7495: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7496: LD_ADDR_VAR 0 10
7500: PUSH
7501: LD_INT 22
7503: PUSH
7504: LD_VAR 0 1
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 25
7528: PUSH
7529: LD_INT 8
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 9
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PPUSH
7556: CALL_OW 69
7560: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7561: LD_ADDR_VAR 0 9
7565: PUSH
7566: LD_VAR 0 2
7570: PPUSH
7571: CALL_OW 313
7575: PUSH
7576: LD_VAR 0 10
7580: DIFF
7581: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7582: LD_VAR 0 8
7586: PUSH
7587: LD_INT 0
7589: EQUAL
7590: PUSH
7591: LD_VAR 0 9
7595: PUSH
7596: LD_INT 0
7598: EQUAL
7599: AND
7600: IFFALSE 7646
// begin for i in soldiers_list do
7602: LD_ADDR_VAR 0 5
7606: PUSH
7607: LD_VAR 0 7
7611: PUSH
7612: FOR_IN
7613: IFFALSE 7642
// begin if IsOK ( build ) then
7615: LD_VAR 0 2
7619: PPUSH
7620: CALL_OW 302
7624: IFFALSE 7640
// ComEnterUnit ( i , build ) ;
7626: LD_VAR 0 5
7630: PPUSH
7631: LD_VAR 0 2
7635: PPUSH
7636: CALL_OW 120
// end ;
7640: GO 7612
7642: POP
7643: POP
// end else
7644: GO 7731
// begin for i = 1 to turretList do
7646: LD_ADDR_VAR 0 5
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_VAR 0 8
7660: PUSH
7661: FOR_TO
7662: IFFALSE 7729
// begin for j = 1 to temp do
7664: LD_ADDR_VAR 0 6
7668: PUSH
7669: DOUBLE
7670: LD_INT 1
7672: DEC
7673: ST_TO_ADDR
7674: LD_VAR 0 9
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7725
// begin ComExitBuilding ( temp [ j ] ) ;
7682: LD_VAR 0 9
7686: PUSH
7687: LD_VAR 0 6
7691: ARRAY
7692: PPUSH
7693: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7697: LD_VAR 0 9
7701: PUSH
7702: LD_VAR 0 6
7706: ARRAY
7707: PPUSH
7708: LD_VAR 0 8
7712: PUSH
7713: LD_VAR 0 5
7717: ARRAY
7718: PPUSH
7719: CALL_OW 180
// end ;
7723: GO 7679
7725: POP
7726: POP
// end ;
7727: GO 7661
7729: POP
7730: POP
// end ; end ;
7731: LD_VAR 0 4
7735: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7736: LD_INT 0
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7743: LD_ADDR_VAR 0 6
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 30
7765: PUSH
7766: LD_INT 31
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 30
7775: PUSH
7776: LD_INT 32
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 30
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: LD_INT 5
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PPUSH
7825: CALL_OW 69
7829: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
7830: LD_ADDR_VAR 0 7
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_VAR 0 2
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 21
7849: PUSH
7850: LD_INT 3
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 58
7859: PUSH
7860: EMPTY
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: PPUSH
7868: CALL_OW 69
7872: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
7873: LD_VAR 0 6
7877: PUSH
7878: LD_INT 0
7880: GREATER
7881: PUSH
7882: LD_VAR 0 7
7886: PUSH
7887: LD_INT 0
7889: GREATER
7890: AND
7891: IFFALSE 7984
// begin for i in turretsList do
7893: LD_ADDR_VAR 0 4
7897: PUSH
7898: LD_VAR 0 6
7902: PUSH
7903: FOR_IN
7904: IFFALSE 7982
// begin for j in enemyBuildings do
7906: LD_ADDR_VAR 0 5
7910: PUSH
7911: LD_VAR 0 7
7915: PUSH
7916: FOR_IN
7917: IFFALSE 7978
// begin display_strings = [ GetDistUnits ( i , j ) ] ;
7919: LD_ADDR_OWVAR 47
7923: PUSH
7924: LD_VAR 0 4
7928: PPUSH
7929: LD_VAR 0 5
7933: PPUSH
7934: CALL_OW 296
7938: PUSH
7939: EMPTY
7940: LIST
7941: ST_TO_ADDR
// if GetDistUnits ( i , j ) < 20 then
7942: LD_VAR 0 4
7946: PPUSH
7947: LD_VAR 0 5
7951: PPUSH
7952: CALL_OW 296
7956: PUSH
7957: LD_INT 20
7959: LESS
7960: IFFALSE 7976
// begin ComAttackUnit ( i , j ) ;
7962: LD_VAR 0 4
7966: PPUSH
7967: LD_VAR 0 5
7971: PPUSH
7972: CALL_OW 115
// end ; end ;
7976: GO 7916
7978: POP
7979: POP
// end ;
7980: GO 7903
7982: POP
7983: POP
// end ; end ;
7984: LD_VAR 0 3
7988: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7989: LD_INT 0
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
7997: PPUSH
7998: PPUSH
7999: PPUSH
8000: PPUSH
8001: PPUSH
// for i = 1 to medicCount do
8002: LD_ADDR_VAR 0 14
8006: PUSH
8007: DOUBLE
8008: LD_INT 1
8010: DEC
8011: ST_TO_ADDR
8012: LD_VAR 0 7
8016: PUSH
8017: FOR_TO
8018: IFFALSE 8100
// begin uc_side = side ;
8020: LD_ADDR_OWVAR 20
8024: PUSH
8025: LD_VAR 0 1
8029: ST_TO_ADDR
// uc_nation = nation ;
8030: LD_ADDR_OWVAR 21
8034: PUSH
8035: LD_VAR 0 2
8039: ST_TO_ADDR
// hc_name =  ;
8040: LD_ADDR_OWVAR 26
8044: PUSH
8045: LD_STRING 
8047: ST_TO_ADDR
// hc_gallery =  ;
8048: LD_ADDR_OWVAR 33
8052: PUSH
8053: LD_STRING 
8055: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8056: LD_INT 0
8058: PPUSH
8059: LD_INT 4
8061: PPUSH
8062: LD_VAR 0 8
8066: PPUSH
8067: CALL_OW 380
// un = CreateHuman ;
8071: LD_ADDR_VAR 0 16
8075: PUSH
8076: CALL_OW 44
8080: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8081: LD_VAR 0 16
8085: PPUSH
8086: LD_VAR 0 9
8090: PPUSH
8091: LD_INT 0
8093: PPUSH
8094: CALL_OW 49
// end ;
8098: GO 8017
8100: POP
8101: POP
// for i = 1 to soldierCount do
8102: LD_ADDR_VAR 0 14
8106: PUSH
8107: DOUBLE
8108: LD_INT 1
8110: DEC
8111: ST_TO_ADDR
8112: LD_VAR 0 3
8116: PUSH
8117: FOR_TO
8118: IFFALSE 8200
// begin uc_side = side ;
8120: LD_ADDR_OWVAR 20
8124: PUSH
8125: LD_VAR 0 1
8129: ST_TO_ADDR
// uc_nation = nation ;
8130: LD_ADDR_OWVAR 21
8134: PUSH
8135: LD_VAR 0 2
8139: ST_TO_ADDR
// hc_name =  ;
8140: LD_ADDR_OWVAR 26
8144: PUSH
8145: LD_STRING 
8147: ST_TO_ADDR
// hc_gallery =  ;
8148: LD_ADDR_OWVAR 33
8152: PUSH
8153: LD_STRING 
8155: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8156: LD_INT 0
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: LD_VAR 0 8
8166: PPUSH
8167: CALL_OW 380
// un = CreateHuman ;
8171: LD_ADDR_VAR 0 16
8175: PUSH
8176: CALL_OW 44
8180: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8181: LD_VAR 0 16
8185: PPUSH
8186: LD_VAR 0 9
8190: PPUSH
8191: LD_INT 0
8193: PPUSH
8194: CALL_OW 49
// end ;
8198: GO 8117
8200: POP
8201: POP
// for i = 1 to sniperCount do
8202: LD_ADDR_VAR 0 14
8206: PUSH
8207: DOUBLE
8208: LD_INT 1
8210: DEC
8211: ST_TO_ADDR
8212: LD_VAR 0 4
8216: PUSH
8217: FOR_TO
8218: IFFALSE 8300
// begin uc_side = side ;
8220: LD_ADDR_OWVAR 20
8224: PUSH
8225: LD_VAR 0 1
8229: ST_TO_ADDR
// uc_nation = nation ;
8230: LD_ADDR_OWVAR 21
8234: PUSH
8235: LD_VAR 0 2
8239: ST_TO_ADDR
// hc_name =  ;
8240: LD_ADDR_OWVAR 26
8244: PUSH
8245: LD_STRING 
8247: ST_TO_ADDR
// hc_gallery =  ;
8248: LD_ADDR_OWVAR 33
8252: PUSH
8253: LD_STRING 
8255: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8256: LD_INT 0
8258: PPUSH
8259: LD_INT 5
8261: PPUSH
8262: LD_VAR 0 8
8266: PPUSH
8267: CALL_OW 380
// un = CreateHuman ;
8271: LD_ADDR_VAR 0 16
8275: PUSH
8276: CALL_OW 44
8280: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8281: LD_VAR 0 16
8285: PPUSH
8286: LD_VAR 0 9
8290: PPUSH
8291: LD_INT 0
8293: PPUSH
8294: CALL_OW 49
// end ;
8298: GO 8217
8300: POP
8301: POP
// for i = 1 to bazookCount do
8302: LD_ADDR_VAR 0 14
8306: PUSH
8307: DOUBLE
8308: LD_INT 1
8310: DEC
8311: ST_TO_ADDR
8312: LD_VAR 0 5
8316: PUSH
8317: FOR_TO
8318: IFFALSE 8400
// begin uc_side = side ;
8320: LD_ADDR_OWVAR 20
8324: PUSH
8325: LD_VAR 0 1
8329: ST_TO_ADDR
// uc_nation = nation ;
8330: LD_ADDR_OWVAR 21
8334: PUSH
8335: LD_VAR 0 2
8339: ST_TO_ADDR
// hc_name =  ;
8340: LD_ADDR_OWVAR 26
8344: PUSH
8345: LD_STRING 
8347: ST_TO_ADDR
// hc_gallery =  ;
8348: LD_ADDR_OWVAR 33
8352: PUSH
8353: LD_STRING 
8355: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8356: LD_INT 0
8358: PPUSH
8359: LD_INT 9
8361: PPUSH
8362: LD_VAR 0 8
8366: PPUSH
8367: CALL_OW 380
// un = CreateHuman ;
8371: LD_ADDR_VAR 0 16
8375: PUSH
8376: CALL_OW 44
8380: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8381: LD_VAR 0 16
8385: PPUSH
8386: LD_VAR 0 9
8390: PPUSH
8391: LD_INT 0
8393: PPUSH
8394: CALL_OW 49
// end ;
8398: GO 8317
8400: POP
8401: POP
// for i = 1 to mortalCount do
8402: LD_ADDR_VAR 0 14
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_VAR 0 6
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8500
// begin uc_side = side ;
8420: LD_ADDR_OWVAR 20
8424: PUSH
8425: LD_VAR 0 1
8429: ST_TO_ADDR
// uc_nation = nation ;
8430: LD_ADDR_OWVAR 21
8434: PUSH
8435: LD_VAR 0 2
8439: ST_TO_ADDR
// hc_name =  ;
8440: LD_ADDR_OWVAR 26
8444: PUSH
8445: LD_STRING 
8447: ST_TO_ADDR
// hc_gallery =  ;
8448: LD_ADDR_OWVAR 33
8452: PUSH
8453: LD_STRING 
8455: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8456: LD_INT 0
8458: PPUSH
8459: LD_INT 8
8461: PPUSH
8462: LD_VAR 0 8
8466: PPUSH
8467: CALL_OW 380
// un = CreateHuman ;
8471: LD_ADDR_VAR 0 16
8475: PUSH
8476: CALL_OW 44
8480: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8481: LD_VAR 0 16
8485: PPUSH
8486: LD_VAR 0 9
8490: PPUSH
8491: LD_INT 0
8493: PPUSH
8494: CALL_OW 49
// end ;
8498: GO 8417
8500: POP
8501: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8502: LD_ADDR_VAR 0 19
8506: PUSH
8507: LD_INT 22
8509: PUSH
8510: LD_VAR 0 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_INT 25
8524: PUSH
8525: LD_INT 1
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 25
8534: PUSH
8535: LD_INT 5
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 25
8544: PUSH
8545: LD_INT 8
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: LD_INT 25
8554: PUSH
8555: LD_INT 9
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL_OW 69
8577: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8578: LD_ADDR_VAR 0 18
8582: PUSH
8583: LD_INT 22
8585: PUSH
8586: LD_VAR 0 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 25
8597: PUSH
8598: LD_INT 4
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// for i in medic_list do
8614: LD_ADDR_VAR 0 14
8618: PUSH
8619: LD_VAR 0 18
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8643
// ComMoveToArea ( i , healArea ) ;
8627: LD_VAR 0 14
8631: PPUSH
8632: LD_VAR 0 10
8636: PPUSH
8637: CALL_OW 113
8641: GO 8624
8643: POP
8644: POP
// if strategy = 1 then
8645: LD_VAR 0 12
8649: PUSH
8650: LD_INT 1
8652: EQUAL
8653: IFFALSE 9358
// begin repeat wait ( 0 0$3 ) ;
8655: LD_INT 105
8657: PPUSH
8658: CALL_OW 67
// for i in soldiersOK_list do
8662: LD_ADDR_VAR 0 14
8666: PUSH
8667: LD_VAR 0 19
8671: PUSH
8672: FOR_IN
8673: IFFALSE 8707
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8675: LD_VAR 0 14
8679: PPUSH
8680: LD_INT 80
8682: PPUSH
8683: LD_INT 109
8685: PPUSH
8686: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8690: LD_VAR 0 14
8694: PPUSH
8695: LD_INT 39
8697: PPUSH
8698: LD_INT 49
8700: PPUSH
8701: CALL_OW 174
// end ;
8705: GO 8672
8707: POP
8708: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8709: LD_INT 15
8711: PPUSH
8712: LD_INT 22
8714: PUSH
8715: LD_VAR 0 1
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PPUSH
8724: CALL_OW 70
8728: PUSH
8729: LD_INT 0
8731: GREATER
8732: IFFALSE 8655
// repeat wait ( 0 0$1 ) ;
8734: LD_INT 35
8736: PPUSH
8737: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8741: LD_ADDR_VAR 0 17
8745: PUSH
8746: LD_INT 22
8748: PUSH
8749: LD_VAR 0 1
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 3
8763: PUSH
8764: LD_INT 24
8766: PUSH
8767: LD_INT 550
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 24
8780: PUSH
8781: LD_INT 250
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PPUSH
8797: CALL_OW 69
8801: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8802: LD_ADDR_VAR 0 19
8806: PUSH
8807: LD_INT 22
8809: PUSH
8810: LD_VAR 0 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 2
8821: PUSH
8822: LD_INT 25
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: LD_INT 25
8834: PUSH
8835: LD_INT 5
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 25
8844: PUSH
8845: LD_INT 8
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 25
8854: PUSH
8855: LD_INT 9
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 24
8871: PUSH
8872: LD_INT 1000
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: PPUSH
8884: CALL_OW 69
8888: ST_TO_ADDR
// if medicCount > 0 then
8889: LD_VAR 0 7
8893: PUSH
8894: LD_INT 0
8896: GREATER
8897: IFFALSE 8971
// begin if damageUnit_list > 0 then
8899: LD_VAR 0 17
8903: PUSH
8904: LD_INT 0
8906: GREATER
8907: IFFALSE 8971
// begin for i in damageUnit_list do
8909: LD_ADDR_VAR 0 14
8913: PUSH
8914: LD_VAR 0 17
8918: PUSH
8919: FOR_IN
8920: IFFALSE 8969
// begin ComMoveToArea ( i , healArea ) ;
8922: LD_VAR 0 14
8926: PPUSH
8927: LD_VAR 0 10
8931: PPUSH
8932: CALL_OW 113
// for j in medic_list do
8936: LD_ADDR_VAR 0 15
8940: PUSH
8941: LD_VAR 0 18
8945: PUSH
8946: FOR_IN
8947: IFFALSE 8965
// AddComHeal ( j , i ) ;
8949: LD_VAR 0 15
8953: PPUSH
8954: LD_VAR 0 14
8958: PPUSH
8959: CALL_OW 188
8963: GO 8946
8965: POP
8966: POP
// end ;
8967: GO 8919
8969: POP
8970: POP
// end ; end ; for i in soldiersOK_list do
8971: LD_ADDR_VAR 0 14
8975: PUSH
8976: LD_VAR 0 19
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9158
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8984: LD_ADDR_VAR 0 22
8988: PUSH
8989: LD_INT 22
8991: PUSH
8992: LD_VAR 0 11
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 69
9005: PPUSH
9006: LD_VAR 0 14
9010: PPUSH
9011: CALL_OW 74
9015: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9016: LD_ADDR_VAR 0 23
9020: PUSH
9021: LD_INT 22
9023: PUSH
9024: LD_VAR 0 11
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 59
9038: PUSH
9039: EMPTY
9040: LIST
9041: PUSH
9042: LD_INT 21
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 21
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: PPUSH
9075: CALL_OW 69
9079: PPUSH
9080: LD_VAR 0 14
9084: PPUSH
9085: CALL_OW 74
9089: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9090: LD_VAR 0 14
9094: PPUSH
9095: LD_VAR 0 22
9099: PPUSH
9100: CALL_OW 296
9104: PUSH
9105: LD_INT 8
9107: PLUS
9108: PUSH
9109: LD_VAR 0 14
9113: PPUSH
9114: LD_VAR 0 23
9118: PPUSH
9119: CALL_OW 296
9123: LESS
9124: IFFALSE 9142
// begin ComAttackUnit ( i , target1 ) ;
9126: LD_VAR 0 14
9130: PPUSH
9131: LD_VAR 0 22
9135: PPUSH
9136: CALL_OW 115
// end else
9140: GO 9156
// begin ComAttackUnit ( i , target2 ) ;
9142: LD_VAR 0 14
9146: PPUSH
9147: LD_VAR 0 23
9151: PPUSH
9152: CALL_OW 115
// end ; end ;
9156: GO 8981
9158: POP
9159: POP
// for i in soldiersOK_list do
9160: LD_ADDR_VAR 0 14
9164: PUSH
9165: LD_VAR 0 19
9169: PUSH
9170: FOR_IN
9171: IFFALSE 9347
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9173: LD_ADDR_VAR 0 22
9177: PUSH
9178: LD_INT 22
9180: PUSH
9181: LD_VAR 0 11
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PPUSH
9190: CALL_OW 69
9194: PPUSH
9195: LD_VAR 0 14
9199: PPUSH
9200: CALL_OW 74
9204: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9205: LD_ADDR_VAR 0 23
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_VAR 0 11
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 59
9227: PUSH
9228: EMPTY
9229: LIST
9230: PUSH
9231: LD_INT 21
9233: PUSH
9234: LD_INT 1
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 21
9243: PUSH
9244: LD_INT 2
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: PPUSH
9264: CALL_OW 69
9268: PPUSH
9269: LD_VAR 0 14
9273: PPUSH
9274: CALL_OW 74
9278: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9279: LD_VAR 0 14
9283: PPUSH
9284: LD_VAR 0 22
9288: PPUSH
9289: CALL_OW 296
9293: PUSH
9294: LD_INT 8
9296: PLUS
9297: PUSH
9298: LD_VAR 0 14
9302: PPUSH
9303: LD_VAR 0 23
9307: PPUSH
9308: CALL_OW 296
9312: LESS
9313: IFFALSE 9331
// begin ComAttackUnit ( i , target1 ) ;
9315: LD_VAR 0 14
9319: PPUSH
9320: LD_VAR 0 22
9324: PPUSH
9325: CALL_OW 115
// end else
9329: GO 9345
// begin ComAttackUnit ( i , target2 ) ;
9331: LD_VAR 0 14
9335: PPUSH
9336: LD_VAR 0 23
9340: PPUSH
9341: CALL_OW 115
// end ; end ;
9345: GO 9170
9347: POP
9348: POP
// until soldiersOK_list = [ ] ;
9349: LD_VAR 0 19
9353: PUSH
9354: EMPTY
9355: EQUAL
9356: IFFALSE 8734
// end ; if strategy = 2 then
9358: LD_VAR 0 12
9362: PUSH
9363: LD_INT 2
9365: EQUAL
9366: IFFALSE 10071
// begin repeat wait ( 0 0$1 ) ;
9368: LD_INT 35
9370: PPUSH
9371: CALL_OW 67
// for i in soldiersOK_list do
9375: LD_ADDR_VAR 0 14
9379: PUSH
9380: LD_VAR 0 19
9384: PUSH
9385: FOR_IN
9386: IFFALSE 9420
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9388: LD_VAR 0 14
9392: PPUSH
9393: LD_INT 117
9395: PPUSH
9396: LD_INT 97
9398: PPUSH
9399: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9403: LD_VAR 0 14
9407: PPUSH
9408: LD_INT 94
9410: PPUSH
9411: LD_INT 50
9413: PPUSH
9414: CALL_OW 174
// end ;
9418: GO 9385
9420: POP
9421: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9422: LD_INT 16
9424: PPUSH
9425: LD_INT 22
9427: PUSH
9428: LD_VAR 0 1
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 70
9441: PUSH
9442: LD_INT 0
9444: GREATER
9445: IFFALSE 9368
// repeat wait ( 0 0$3 ) ;
9447: LD_INT 105
9449: PPUSH
9450: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9454: LD_ADDR_VAR 0 17
9458: PUSH
9459: LD_INT 22
9461: PUSH
9462: LD_VAR 0 1
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 1
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: LD_INT 24
9479: PUSH
9480: LD_INT 550
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 24
9493: PUSH
9494: LD_INT 250
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PPUSH
9510: CALL_OW 69
9514: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9515: LD_ADDR_VAR 0 19
9519: PUSH
9520: LD_INT 22
9522: PUSH
9523: LD_VAR 0 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 2
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 1
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 8
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 9
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 24
9584: PUSH
9585: LD_INT 1000
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: PPUSH
9597: CALL_OW 69
9601: ST_TO_ADDR
// if medicCount > 0 then
9602: LD_VAR 0 7
9606: PUSH
9607: LD_INT 0
9609: GREATER
9610: IFFALSE 9684
// begin if damageUnit_list > 0 then
9612: LD_VAR 0 17
9616: PUSH
9617: LD_INT 0
9619: GREATER
9620: IFFALSE 9684
// begin for i in damageUnit_list do
9622: LD_ADDR_VAR 0 14
9626: PUSH
9627: LD_VAR 0 17
9631: PUSH
9632: FOR_IN
9633: IFFALSE 9682
// begin ComMoveToArea ( i , healArea ) ;
9635: LD_VAR 0 14
9639: PPUSH
9640: LD_VAR 0 10
9644: PPUSH
9645: CALL_OW 113
// for j in medic_list do
9649: LD_ADDR_VAR 0 15
9653: PUSH
9654: LD_VAR 0 18
9658: PUSH
9659: FOR_IN
9660: IFFALSE 9678
// AddComHeal ( j , i ) ;
9662: LD_VAR 0 15
9666: PPUSH
9667: LD_VAR 0 14
9671: PPUSH
9672: CALL_OW 188
9676: GO 9659
9678: POP
9679: POP
// end ;
9680: GO 9632
9682: POP
9683: POP
// end ; end ; for i in soldiersOK_list do
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_VAR 0 19
9693: PUSH
9694: FOR_IN
9695: IFFALSE 9871
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9697: LD_ADDR_VAR 0 22
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_VAR 0 11
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: PPUSH
9719: LD_VAR 0 14
9723: PPUSH
9724: CALL_OW 74
9728: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9729: LD_ADDR_VAR 0 23
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: LD_VAR 0 11
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 59
9751: PUSH
9752: EMPTY
9753: LIST
9754: PUSH
9755: LD_INT 21
9757: PUSH
9758: LD_INT 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 21
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: PPUSH
9788: CALL_OW 69
9792: PPUSH
9793: LD_VAR 0 14
9797: PPUSH
9798: CALL_OW 74
9802: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9803: LD_VAR 0 14
9807: PPUSH
9808: LD_VAR 0 22
9812: PPUSH
9813: CALL_OW 296
9817: PUSH
9818: LD_INT 8
9820: PLUS
9821: PUSH
9822: LD_VAR 0 14
9826: PPUSH
9827: LD_VAR 0 23
9831: PPUSH
9832: CALL_OW 296
9836: LESS
9837: IFFALSE 9855
// begin ComAttackUnit ( i , target1 ) ;
9839: LD_VAR 0 14
9843: PPUSH
9844: LD_VAR 0 22
9848: PPUSH
9849: CALL_OW 115
// end else
9853: GO 9869
// begin ComAttackUnit ( i , target2 ) ;
9855: LD_VAR 0 14
9859: PPUSH
9860: LD_VAR 0 23
9864: PPUSH
9865: CALL_OW 115
// end ; end ;
9869: GO 9694
9871: POP
9872: POP
// for i in soldiersOK_list do
9873: LD_ADDR_VAR 0 14
9877: PUSH
9878: LD_VAR 0 19
9882: PUSH
9883: FOR_IN
9884: IFFALSE 10060
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9886: LD_ADDR_VAR 0 22
9890: PUSH
9891: LD_INT 22
9893: PUSH
9894: LD_VAR 0 11
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 69
9907: PPUSH
9908: LD_VAR 0 14
9912: PPUSH
9913: CALL_OW 74
9917: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9918: LD_ADDR_VAR 0 23
9922: PUSH
9923: LD_INT 22
9925: PUSH
9926: LD_VAR 0 11
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 2
9937: PUSH
9938: LD_INT 59
9940: PUSH
9941: EMPTY
9942: LIST
9943: PUSH
9944: LD_INT 21
9946: PUSH
9947: LD_INT 1
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 21
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: EMPTY
9975: LIST
9976: PPUSH
9977: CALL_OW 69
9981: PPUSH
9982: LD_VAR 0 14
9986: PPUSH
9987: CALL_OW 74
9991: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9992: LD_VAR 0 14
9996: PPUSH
9997: LD_VAR 0 22
10001: PPUSH
10002: CALL_OW 296
10006: PUSH
10007: LD_INT 8
10009: PLUS
10010: PUSH
10011: LD_VAR 0 14
10015: PPUSH
10016: LD_VAR 0 23
10020: PPUSH
10021: CALL_OW 296
10025: LESS
10026: IFFALSE 10044
// begin ComAttackUnit ( i , target1 ) ;
10028: LD_VAR 0 14
10032: PPUSH
10033: LD_VAR 0 22
10037: PPUSH
10038: CALL_OW 115
// end else
10042: GO 10058
// begin ComAttackUnit ( i , target2 ) ;
10044: LD_VAR 0 14
10048: PPUSH
10049: LD_VAR 0 23
10053: PPUSH
10054: CALL_OW 115
// end ; end ;
10058: GO 9883
10060: POP
10061: POP
// until soldiersOK_list = [ ] ;
10062: LD_VAR 0 19
10066: PUSH
10067: EMPTY
10068: EQUAL
10069: IFFALSE 9447
// end ; end ; end_of_file
10071: LD_VAR 0 13
10075: RET
// every 0 0$01 do
10076: GO 10078
10078: DISABLE
// begin ChangeMissionObjectives ( M1 ) ;
10079: LD_STRING M1
10081: PPUSH
10082: CALL_OW 337
// case difficulty of 1 :
10086: LD_OWVAR 67
10090: PUSH
10091: LD_INT 1
10093: DOUBLE
10094: EQUAL
10095: IFTRUE 10099
10097: GO 10109
10099: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10100: LD_STRING M1-1
10102: PPUSH
10103: CALL_OW 337
10107: GO 10146
10109: LD_INT 2
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10127
10117: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10118: LD_STRING M1-2
10120: PPUSH
10121: CALL_OW 337
10125: GO 10146
10127: LD_INT 3
10129: DOUBLE
10130: EQUAL
10131: IFTRUE 10135
10133: GO 10145
10135: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10136: LD_STRING M1-3
10138: PPUSH
10139: CALL_OW 337
10143: GO 10146
10145: POP
// ChangeMissionObjectives ( M1cont ) ;
10146: LD_STRING M1cont
10148: PPUSH
10149: CALL_OW 337
// end ;
10153: END
// every 0 0$1 do
10154: GO 10156
10156: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10157: LD_INT 350
10159: PPUSH
10160: LD_INT 875
10162: PPUSH
10163: CALL_OW 12
10167: PPUSH
10168: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10172: LD_INT 5
10174: PPUSH
10175: LD_INT 4
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 55
// wait ( 0 0$15 ) ;
10185: LD_INT 525
10187: PPUSH
10188: CALL_OW 67
// if IsOk ( Lisa ) then
10192: LD_EXP 2
10196: PPUSH
10197: CALL_OW 302
10201: IFFALSE 10217
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10203: LD_EXP 2
10207: PPUSH
10208: LD_STRING DR0-Lisa-1
10210: PPUSH
10211: CALL_OW 88
// end else
10215: GO 10360
// begin if IsOK ( Cyrus ) then
10217: LD_EXP 4
10221: PPUSH
10222: CALL_OW 302
10226: IFFALSE 10230
// begin end else
10228: GO 10360
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10230: LD_INT 22
10232: PUSH
10233: LD_INT 1
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 21
10242: PUSH
10243: LD_INT 1
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 26
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: PUSH
10270: LD_EXP 1
10274: PUSH
10275: LD_EXP 8
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: DIFF
10284: PPUSH
10285: LD_STRING DR0-Sol1-1
10287: PPUSH
10288: LD_STRING DR0-Sol1-1
10290: PPUSH
10291: CALL 4467 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10295: LD_INT 22
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 21
10307: PUSH
10308: LD_INT 1
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PUSH
10315: LD_INT 26
10317: PUSH
10318: LD_INT 1
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: PPUSH
10330: CALL_OW 69
10334: PUSH
10335: LD_EXP 1
10339: PUSH
10340: LD_EXP 8
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: DIFF
10349: PPUSH
10350: LD_STRING DR0-Sol2-1
10352: PPUSH
10353: LD_STRING DR0-Sol2-1
10355: PPUSH
10356: CALL 4467 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Gladstone ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10360: LD_INT 22
10362: PUSH
10363: LD_INT 1
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 21
10372: PUSH
10373: LD_INT 1
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 26
10382: PUSH
10383: LD_INT 1
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 69
10399: PUSH
10400: LD_EXP 1
10404: PUSH
10405: LD_EXP 8
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: DIFF
10414: PPUSH
10415: LD_STRING DR0-Sol2-1
10417: PPUSH
10418: LD_STRING DR0-Sol2-1
10420: PPUSH
10421: CALL 4467 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10425: LD_EXP 1
10429: PPUSH
10430: LD_STRING DR0-JMM-1
10432: PPUSH
10433: CALL_OW 88
// end ;
10437: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10438: LD_EXP 5
10442: PPUSH
10443: CALL_OW 302
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_INT 1
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 25
10460: PUSH
10461: LD_INT 16
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PPUSH
10472: CALL_OW 69
10476: PUSH
10477: LD_INT 0
10479: GREATER
10480: AND
10481: IFFALSE 10653
10483: GO 10485
10485: DISABLE
// begin DialogueOn ;
10486: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10490: LD_EXP 5
10494: PPUSH
10495: LD_STRING D10-Frank-1
10497: PPUSH
10498: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10502: LD_INT 22
10504: PUSH
10505: LD_INT 1
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 21
10514: PUSH
10515: LD_INT 1
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: PUSH
10531: LD_EXP 1
10535: PUSH
10536: LD_EXP 5
10540: PUSH
10541: LD_EXP 2
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: DIFF
10551: PPUSH
10552: LD_STRING D10-Sol1-1
10554: PPUSH
10555: LD_STRING D10-FSol1-1
10557: PPUSH
10558: CALL 4467 0 3
// Say ( Frank , D10-Frank-2 ) ;
10562: LD_EXP 5
10566: PPUSH
10567: LD_STRING D10-Frank-2
10569: PPUSH
10570: CALL_OW 88
// if IsOK ( Lisa ) then
10574: LD_EXP 2
10578: PPUSH
10579: CALL_OW 302
10583: IFFALSE 10599
// begin Say ( Lisa , D10-Lisa-2 ) ;
10585: LD_EXP 2
10589: PPUSH
10590: LD_STRING D10-Lisa-2
10592: PPUSH
10593: CALL_OW 88
// end else
10597: GO 10653
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10599: LD_INT 22
10601: PUSH
10602: LD_INT 1
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 21
10611: PUSH
10612: LD_INT 1
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PPUSH
10623: CALL_OW 69
10627: PUSH
10628: LD_EXP 1
10632: PUSH
10633: LD_EXP 5
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: DIFF
10642: PPUSH
10643: LD_STRING D10-Sol1-2
10645: PPUSH
10646: LD_STRING D10-FSol1-2
10648: PPUSH
10649: CALL 4467 0 3
// end ; end ;
10653: END
// every 10 10$0 do
10654: GO 10656
10656: DISABLE
// begin HarrisonSupport ;
10657: CALL 1816 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
10661: LD_EXP 15
10665: PPUSH
10666: CALL_OW 310
10670: PPUSH
10671: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
10675: LD_EXP 15
10679: PPUSH
10680: LD_STRING DEng-Eng1-1
10682: PPUSH
10683: CALL_OW 88
// wait ( 1 1$0 ) ;
10687: LD_INT 2100
10689: PPUSH
10690: CALL_OW 67
// DialogueOn ;
10694: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
10698: LD_EXP 12
10702: PPUSH
10703: LD_STRING DRem-Har-1
10705: PPUSH
10706: CALL_OW 94
// if contactWithRussian = 1 then
10710: LD_EXP 20
10714: PUSH
10715: LD_INT 1
10717: EQUAL
10718: IFFALSE 10734
// begin Say ( JMM , DRem-JMM-1 ) ;
10720: LD_EXP 1
10724: PPUSH
10725: LD_STRING DRem-JMM-1
10727: PPUSH
10728: CALL_OW 88
// end else
10732: GO 10746
// begin Say ( JMM , DRem-JMM-1a ) ;
10734: LD_EXP 1
10738: PPUSH
10739: LD_STRING DRem-JMM-1a
10741: PPUSH
10742: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
10746: LD_EXP 12
10750: PPUSH
10751: LD_STRING DRem-Har-2
10753: PPUSH
10754: CALL_OW 94
// Say ( JMM , DRem-JMM-2 ) ;
10758: LD_EXP 1
10762: PPUSH
10763: LD_STRING DRem-JMM-2
10765: PPUSH
10766: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-3 ) ;
10770: LD_EXP 12
10774: PPUSH
10775: LD_STRING DRem-Har-3
10777: PPUSH
10778: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
10782: LD_EXP 1
10786: PPUSH
10787: LD_STRING DRem-JMM-3
10789: PPUSH
10790: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
10794: LD_EXP 12
10798: PPUSH
10799: LD_STRING DRem-Har-4
10801: PPUSH
10802: CALL_OW 94
// Say ( JMM , DRem-JMM-4 ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_STRING DRem-JMM-4
10813: PPUSH
10814: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
10818: LD_EXP 12
10822: PPUSH
10823: LD_STRING DRem-Har-5
10825: PPUSH
10826: CALL_OW 94
// DialogueOff ;
10830: CALL_OW 7
// end ;
10834: END
// every 15 15$0 do
10835: GO 10837
10837: DISABLE
// begin PrepareDenis ;
10838: CALL 1737 0 0
// CenterNowOnUnits ( Denis ) ;
10842: LD_EXP 9
10846: PPUSH
10847: CALL_OW 87
// DialogueOn ;
10851: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
10855: LD_EXP 9
10859: PPUSH
10860: LD_STRING DDen-Den-1
10862: PPUSH
10863: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
10867: LD_EXP 1
10871: PPUSH
10872: LD_STRING DDen-JMM-1
10874: PPUSH
10875: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
10879: LD_EXP 9
10883: PPUSH
10884: LD_STRING DDen-Den-2
10886: PPUSH
10887: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
10891: LD_EXP 1
10895: PPUSH
10896: LD_STRING DDen-JMM-2
10898: PPUSH
10899: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
10903: LD_EXP 9
10907: PPUSH
10908: LD_STRING DDen-Den-3
10910: PPUSH
10911: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
10915: LD_EXP 1
10919: PPUSH
10920: LD_STRING DDen-JMM-3
10922: PPUSH
10923: CALL_OW 88
// DialogueOff ;
10927: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
10931: LD_INT 36
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
10944: LD_INT 15
10946: PPUSH
10947: LD_INT 1
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
10957: LD_STRING MR
10959: PPUSH
10960: CALL_OW 337
// end ;
10964: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
10965: CALL 11010 0 0
10969: PUSH
10970: LD_EXP 9
10974: PPUSH
10975: CALL_OW 302
10979: AND
10980: IFFALSE 11009
10982: GO 10984
10984: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
10985: LD_EXP 9
10989: PPUSH
10990: LD_STRING DR1-Den-1
10992: PPUSH
10993: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
10997: LD_EXP 1
11001: PPUSH
11002: LD_STRING DR1-JMM-1
11004: PPUSH
11005: CALL_OW 88
// end ;
11009: END
// function CheckOptoLab ; var i ; begin
11010: LD_INT 0
11012: PPUSH
11013: PPUSH
// result = false ;
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_INT 0
11021: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11022: LD_ADDR_VAR 0 2
11026: PUSH
11027: LD_INT 22
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 2
11039: PUSH
11040: LD_INT 30
11042: PUSH
11043: LD_INT 7
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 30
11052: PUSH
11053: LD_INT 8
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PPUSH
11069: CALL_OW 69
11073: PUSH
11074: FOR_IN
11075: IFFALSE 11127
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11077: LD_VAR 0 2
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: CALL_OW 268
11089: PUSH
11090: LD_INT 15
11092: EQUAL
11093: PUSH
11094: LD_VAR 0 2
11098: PPUSH
11099: LD_INT 2
11101: PPUSH
11102: CALL_OW 268
11106: PUSH
11107: LD_INT 15
11109: EQUAL
11110: OR
11111: IFFALSE 11123
// begin result = true ;
11113: LD_ADDR_VAR 0 1
11117: PUSH
11118: LD_INT 1
11120: ST_TO_ADDR
// break ;
11121: GO 11127
// end ; break ;
11123: GO 11127
// end ;
11125: GO 11074
11127: POP
11128: POP
// end ;
11129: LD_VAR 0 1
11133: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11134: LD_INT 15
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 321
11144: PUSH
11145: LD_INT 2
11147: EQUAL
11148: PUSH
11149: LD_EXP 9
11153: PPUSH
11154: CALL_OW 302
11158: AND
11159: IFFALSE 11346
11161: GO 11163
11163: DISABLE
// begin DialogueOn ;
11164: CALL_OW 6
// if IsOK ( Denis ) then
11168: LD_EXP 9
11172: PPUSH
11173: CALL_OW 302
11177: IFFALSE 11193
// begin Say ( Denis , DR2-Den-1 ) ;
11179: LD_EXP 9
11183: PPUSH
11184: LD_STRING DR2-Den-1
11186: PPUSH
11187: CALL_OW 88
// end else
11191: GO 11252
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11193: LD_INT 22
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 21
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 4
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: PPUSH
11228: CALL_OW 69
11232: PUSH
11233: LD_EXP 1
11237: PUSH
11238: EMPTY
11239: LIST
11240: DIFF
11241: PPUSH
11242: LD_STRING DR2-Sci1-1
11244: PPUSH
11245: LD_STRING DR2-FSci1-1
11247: PPUSH
11248: CALL 4467 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11252: LD_EXP 1
11256: PPUSH
11257: LD_STRING DR2-JMM-1
11259: PPUSH
11260: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , 4 ] ] ] ) diff [ JMM ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11264: LD_INT 22
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 21
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 3
11286: PUSH
11287: LD_INT 25
11289: PUSH
11290: LD_INT 4
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: PPUSH
11306: CALL_OW 69
11310: PUSH
11311: LD_EXP 1
11315: PUSH
11316: EMPTY
11317: LIST
11318: DIFF
11319: PPUSH
11320: LD_STRING DR2-Sol1-1
11322: PPUSH
11323: LD_STRING DR2-Sol1-11
11325: PPUSH
11326: CALL 4467 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11330: LD_EXP 1
11334: PPUSH
11335: LD_STRING DR2-JMM-2
11337: PPUSH
11338: CALL_OW 88
// DialogueOff ;
11342: CALL_OW 7
// end ;
11346: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11347: LD_INT 22
11349: PUSH
11350: LD_INT 1
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 30
11359: PUSH
11360: LD_INT 36
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PUSH
11376: LD_INT 0
11378: EQUAL
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 33
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: LIST
11414: PPUSH
11415: CALL_OW 69
11419: PUSH
11420: LD_INT 0
11422: GREATER
11423: AND
11424: PUSH
11425: LD_EXP 21
11429: PUSH
11430: LD_INT 0
11432: EQUAL
11433: AND
11434: IFFALSE 11506
11436: GO 11438
11438: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11439: LD_INT 22
11441: PUSH
11442: LD_INT 1
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 21
11451: PUSH
11452: LD_INT 1
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 25
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: PUSH
11479: LD_EXP 1
11483: PUSH
11484: EMPTY
11485: LIST
11486: DIFF
11487: PPUSH
11488: LD_STRING D3a-Mech1-1
11490: PPUSH
11491: LD_STRING D3a-Mech1-1
11493: PPUSH
11494: CALL 4467 0 3
// firstTower = 2 ;
11498: LD_ADDR_EXP 21
11502: PUSH
11503: LD_INT 2
11505: ST_TO_ADDR
// end ;
11506: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
11507: LD_INT 22
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 30
11519: PUSH
11520: LD_INT 36
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PPUSH
11531: CALL_OW 69
11535: PUSH
11536: LD_INT 0
11538: GREATER
11539: PUSH
11540: LD_INT 22
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: LD_INT 33
11562: PUSH
11563: LD_INT 2
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: PPUSH
11575: CALL_OW 69
11579: PUSH
11580: LD_INT 0
11582: GREATER
11583: AND
11584: PUSH
11585: CALL 12167 0 0
11589: AND
11590: IFFALSE 12164
11592: GO 11594
11594: DISABLE
11595: LD_INT 0
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 30
11619: PUSH
11620: LD_INT 36
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 69
11635: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
11636: LD_ADDR_VAR 0 4
11640: PUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 21
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 33
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: PPUSH
11676: CALL_OW 69
11680: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
11681: LD_ADDR_VAR 0 5
11685: PUSH
11686: EMPTY
11687: ST_TO_ADDR
// for i in tmpControlTowers do
11688: LD_ADDR_VAR 0 1
11692: PUSH
11693: LD_VAR 0 3
11697: PUSH
11698: FOR_IN
11699: IFFALSE 12162
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
11701: LD_EXP 1
11705: PPUSH
11706: CALL_OW 310
11710: PUSH
11711: LD_VAR 0 1
11715: EQUAL
11716: PUSH
11717: LD_EXP 1
11721: PPUSH
11722: CALL_OW 257
11726: PUSH
11727: LD_INT 3
11729: EQUAL
11730: AND
11731: IFFALSE 11861
// begin InGameOn ;
11733: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
11737: LD_VAR 0 4
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
11750: LD_EXP 1
11754: PPUSH
11755: LD_STRING D4a-JMM-1
11757: PPUSH
11758: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
11762: LD_VAR 0 4
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: LD_EXP 1
11775: PPUSH
11776: CALL_OW 53
// wait ( 0 0$1 ) ;
11780: LD_INT 35
11782: PPUSH
11783: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
11787: LD_VAR 0 4
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PPUSH
11796: LD_VAR 0 4
11800: PUSH
11801: LD_INT 1
11803: ARRAY
11804: PPUSH
11805: CALL_OW 250
11809: PUSH
11810: LD_INT 3
11812: PLUS
11813: PPUSH
11814: LD_VAR 0 4
11818: PUSH
11819: LD_INT 1
11821: ARRAY
11822: PPUSH
11823: CALL_OW 251
11827: PUSH
11828: LD_INT 2
11830: MINUS
11831: PPUSH
11832: CALL_OW 111
// wait ( 0 0$2 ) ;
11836: LD_INT 70
11838: PPUSH
11839: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
11843: LD_EXP 1
11847: PPUSH
11848: LD_STRING D4b-JMM-1
11850: PPUSH
11851: CALL_OW 88
// InGameOff ;
11855: CALL_OW 9
// end else
11859: GO 12160
// begin InGameOn ;
11861: CALL_OW 8
// for j in UnitsInside ( i ) do
11865: LD_ADDR_VAR 0 2
11869: PUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 313
11879: PUSH
11880: FOR_IN
11881: IFFALSE 11916
// if GetClass ( j ) = 3 then
11883: LD_VAR 0 2
11887: PPUSH
11888: CALL_OW 257
11892: PUSH
11893: LD_INT 3
11895: EQUAL
11896: IFFALSE 11914
// tmpMechanicInside = tmpMechanicInside ^ j ;
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_VAR 0 5
11907: PUSH
11908: LD_VAR 0 2
11912: ADD
11913: ST_TO_ADDR
11914: GO 11880
11916: POP
11917: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
11918: LD_VAR 0 5
11922: PUSH
11923: LD_INT 1
11925: ARRAY
11926: PPUSH
11927: CALL_OW 258
11931: PUSH
11932: LD_INT 1
11934: EQUAL
11935: IFFALSE 11953
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
11937: LD_VAR 0 5
11941: PUSH
11942: LD_INT 1
11944: ARRAY
11945: PPUSH
11946: LD_STRING D4a-Mech1-1
11948: PPUSH
11949: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
11953: LD_VAR 0 5
11957: PUSH
11958: LD_INT 1
11960: ARRAY
11961: PPUSH
11962: CALL_OW 258
11966: PUSH
11967: LD_INT 2
11969: EQUAL
11970: IFFALSE 11988
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
11972: LD_VAR 0 5
11976: PUSH
11977: LD_INT 1
11979: ARRAY
11980: PPUSH
11981: LD_STRING D4a-FMech1-1
11983: PPUSH
11984: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
11988: LD_VAR 0 4
11992: PUSH
11993: LD_INT 1
11995: ARRAY
11996: PPUSH
11997: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12001: LD_VAR 0 4
12005: PUSH
12006: LD_INT 1
12008: ARRAY
12009: PPUSH
12010: LD_VAR 0 5
12014: PUSH
12015: LD_INT 1
12017: ARRAY
12018: PPUSH
12019: CALL_OW 53
// wait ( 0 0$1 ) ;
12023: LD_INT 35
12025: PPUSH
12026: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12030: LD_VAR 0 4
12034: PUSH
12035: LD_INT 1
12037: ARRAY
12038: PPUSH
12039: LD_VAR 0 4
12043: PUSH
12044: LD_INT 1
12046: ARRAY
12047: PPUSH
12048: CALL_OW 250
12052: PUSH
12053: LD_INT 3
12055: PLUS
12056: PPUSH
12057: LD_VAR 0 4
12061: PUSH
12062: LD_INT 1
12064: ARRAY
12065: PPUSH
12066: CALL_OW 251
12070: PUSH
12071: LD_INT 2
12073: MINUS
12074: PPUSH
12075: CALL_OW 111
// wait ( 0 0$2 ) ;
12079: LD_INT 70
12081: PPUSH
12082: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12086: LD_VAR 0 5
12090: PUSH
12091: LD_INT 1
12093: ARRAY
12094: PPUSH
12095: CALL_OW 258
12099: PUSH
12100: LD_INT 1
12102: EQUAL
12103: IFFALSE 12121
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12105: LD_VAR 0 5
12109: PUSH
12110: LD_INT 1
12112: ARRAY
12113: PPUSH
12114: LD_STRING D4b-Mech1-1
12116: PPUSH
12117: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12121: LD_VAR 0 5
12125: PUSH
12126: LD_INT 1
12128: ARRAY
12129: PPUSH
12130: CALL_OW 258
12134: PUSH
12135: LD_INT 2
12137: EQUAL
12138: IFFALSE 12156
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12140: LD_VAR 0 5
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: PPUSH
12149: LD_STRING D4b-FMech1-1
12151: PPUSH
12152: CALL_OW 88
// InGameOff ;
12156: CALL_OW 9
// end ; end ;
12160: GO 11698
12162: POP
12163: POP
// end ;
12164: PPOPN 5
12166: END
// function CheckMehInside ; var i , j ; begin
12167: LD_INT 0
12169: PPUSH
12170: PPUSH
12171: PPUSH
// result = false ;
12172: LD_ADDR_VAR 0 1
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12180: LD_ADDR_VAR 0 2
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 1
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 30
12197: PUSH
12198: LD_INT 36
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 69
12213: PUSH
12214: FOR_IN
12215: IFFALSE 12266
// begin for j in UnitsInside ( i ) do
12217: LD_ADDR_VAR 0 3
12221: PUSH
12222: LD_VAR 0 2
12226: PPUSH
12227: CALL_OW 313
12231: PUSH
12232: FOR_IN
12233: IFFALSE 12262
// begin if GetClass ( j ) = 3 then
12235: LD_VAR 0 3
12239: PPUSH
12240: CALL_OW 257
12244: PUSH
12245: LD_INT 3
12247: EQUAL
12248: IFFALSE 12260
// begin result = true ;
12250: LD_ADDR_VAR 0 1
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// break ;
12258: GO 12262
// end ; end ;
12260: GO 12232
12262: POP
12263: POP
// end ;
12264: GO 12214
12266: POP
12267: POP
// end ;
12268: LD_VAR 0 1
12272: RET
// every 25 25$0 do
12273: GO 12275
12275: DISABLE
// begin PrepareKurt ;
12276: CALL 15017 0 0
// end ;
12280: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12281: LD_EXP 17
12285: PPUSH
12286: LD_INT 9
12288: PPUSH
12289: CALL_OW 308
12293: PUSH
12294: LD_EXP 19
12298: PUSH
12299: LD_INT 1
12301: EQUAL
12302: AND
12303: IFFALSE 12377
12305: GO 12307
12307: DISABLE
// begin RemoveUnit ( Kurt ) ;
12308: LD_EXP 17
12312: PPUSH
12313: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12317: LD_EXP 17
12321: PPUSH
12322: LD_STRING Kurt
12324: PPUSH
12325: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
12329: LD_INT 1
12331: PPUSH
12332: LD_INT 2
12334: PPUSH
12335: CALL_OW 81
12339: PUSH
12340: LD_INT 0
12342: EQUAL
12343: IFFALSE 12353
// KurtStatus = 1 ;
12345: LD_ADDR_EXP 18
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
12353: LD_INT 1
12355: PPUSH
12356: LD_INT 2
12358: PPUSH
12359: CALL_OW 81
12363: PUSH
12364: LD_INT 2
12366: EQUAL
12367: IFFALSE 12377
// KurtStatus = 2 ;
12369: LD_ADDR_EXP 18
12373: PUSH
12374: LD_INT 2
12376: ST_TO_ADDR
// end ;
12377: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
12378: LD_INT 1
12380: PPUSH
12381: LD_INT 2
12383: PPUSH
12384: CALL_OW 81
12388: PUSH
12389: LD_INT 2
12391: EQUAL
12392: PUSH
12393: LD_EXP 17
12397: PPUSH
12398: CALL_OW 302
12402: AND
12403: IFFALSE 12428
12405: GO 12407
12407: DISABLE
// begin DialogueOn ;
12408: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
12412: LD_EXP 17
12416: PPUSH
12417: LD_STRING D2a-Kurt-1
12419: PPUSH
12420: CALL_OW 88
// DialogueOff ;
12424: CALL_OW 7
// end ;
12428: END
// every 35 35$0 do
12429: GO 12431
12431: DISABLE
// begin PrepareJoan ;
12432: CALL 2188 0 0
// wait ( 1 1$0 ) ;
12436: LD_INT 2100
12438: PPUSH
12439: CALL_OW 67
// if IsOK ( Lisa ) then
12443: LD_EXP 2
12447: PPUSH
12448: CALL_OW 302
12452: IFFALSE 12582
// begin DialogueOn ;
12454: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
12458: LD_EXP 2
12462: PPUSH
12463: LD_STRING D7-Lisa-1
12465: PPUSH
12466: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
12470: LD_EXP 1
12474: PPUSH
12475: LD_STRING D7-JMM-1
12477: PPUSH
12478: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
12482: LD_EXP 2
12486: PPUSH
12487: LD_STRING D7-Lisa-2
12489: PPUSH
12490: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
12494: LD_EXP 1
12498: PPUSH
12499: LD_STRING D7-JMM-2
12501: PPUSH
12502: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
12506: LD_EXP 2
12510: PPUSH
12511: LD_STRING D7-Lisa-3
12513: PPUSH
12514: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
12518: LD_EXP 1
12522: PPUSH
12523: LD_STRING D7-JMM-3
12525: PPUSH
12526: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
12530: LD_EXP 2
12534: PPUSH
12535: LD_STRING D7-Lisa-4
12537: PPUSH
12538: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
12542: LD_EXP 1
12546: PPUSH
12547: LD_STRING D7-JMM-4
12549: PPUSH
12550: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
12554: LD_EXP 1
12558: PPUSH
12559: LD_STRING D7-JMM-4a
12561: PPUSH
12562: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
12566: LD_EXP 2
12570: PPUSH
12571: LD_STRING D7-Lisa-5
12573: PPUSH
12574: CALL_OW 88
// DialogueOff ;
12578: CALL_OW 7
// end ; end ;
12582: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
12583: LD_INT 22
12585: PUSH
12586: LD_INT 1
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 33
12595: PUSH
12596: LD_INT 2
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: PUSH
12612: LD_INT 2
12614: GREATEREQUAL
12615: IFFALSE 12635
12617: GO 12619
12619: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
12620: LD_STRING MRa
12622: PPUSH
12623: CALL_OW 337
// remoteVehiclesBuild = 1 ;
12627: LD_ADDR_EXP 26
12631: PUSH
12632: LD_INT 1
12634: ST_TO_ADDR
// end ;
12635: END
// every 13 13$0 do
12636: GO 12638
12638: DISABLE
// PrepareRandoms ( 1 ) ;
12639: LD_INT 1
12641: PPUSH
12642: CALL 3034 0 1
12646: END
// every 20 20$0 do
12647: GO 12649
12649: DISABLE
// PrepareRandoms ( 2 ) ;
12650: LD_INT 2
12652: PPUSH
12653: CALL 3034 0 1
12657: END
// every 28 28$0 do
12658: GO 12660
12660: DISABLE
// PrepareRandoms ( 3 ) ;
12661: LD_INT 3
12663: PPUSH
12664: CALL 3034 0 1
12668: END
// every 32 32$0 do
12669: GO 12671
12671: DISABLE
// PrepareRandoms ( 4 ) ;
12672: LD_INT 4
12674: PPUSH
12675: CALL 3034 0 1
12679: END
// every 38 38$0 do
12680: GO 12682
12682: DISABLE
// PrepareRandoms ( 5 ) ;
12683: LD_INT 5
12685: PPUSH
12686: CALL 3034 0 1
12690: END
// every 42 42$0 do
12691: GO 12693
12693: DISABLE
// PrepareRandoms ( 6 ) ;
12694: LD_INT 6
12696: PPUSH
12697: CALL 3034 0 1
12701: END
// every 45 45$0 do
12702: GO 12704
12704: DISABLE
// PrepareRandoms ( 7 ) ;
12705: LD_INT 7
12707: PPUSH
12708: CALL 3034 0 1
12712: END
// every 5 5$0 do
12713: GO 12715
12715: DISABLE
// begin DialogueOn ;
12716: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
12720: LD_EXP 10
12724: PPUSH
12725: LD_STRING D12a-Sci-1
12727: PPUSH
12728: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
12732: LD_EXP 1
12736: PPUSH
12737: LD_STRING D12a-JMM-1
12739: PPUSH
12740: CALL_OW 88
// DialogueOff ;
12744: CALL_OW 7
// cratesStatus = 1 ;
12748: LD_ADDR_EXP 33
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// end ;
12756: END
// every 13 13$0 do
12757: GO 12759
12759: DISABLE
// begin DialogueOn ;
12760: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
12764: LD_EXP 10
12768: PPUSH
12769: LD_STRING D12b-Sci-1
12771: PPUSH
12772: CALL_OW 94
// DialogueOff ;
12776: CALL_OW 7
// cratesStatus = 2 ;
12780: LD_ADDR_EXP 33
12784: PUSH
12785: LD_INT 2
12787: ST_TO_ADDR
// end ;
12788: END
// every 32 32$0 do
12789: GO 12791
12791: DISABLE
// begin DialogueOn ;
12792: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
12796: LD_EXP 10
12800: PPUSH
12801: LD_STRING  D12c-Sci-1
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// wait ( 3 3$0 ) ;
12812: LD_INT 6300
12814: PPUSH
12815: CALL_OW 67
// DialogueOn ;
12819: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
12823: LD_EXP 10
12827: PPUSH
12828: LD_STRING  D12d-Sci-1
12830: PPUSH
12831: CALL_OW 94
// DialogueOff ;
12835: CALL_OW 7
// cratesStatus = 1 ;
12839: LD_ADDR_EXP 33
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// end ;
12847: END
// every 42 42$0 do
12848: GO 12850
12850: DISABLE
// begin DialogueOn ;
12851: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
12855: LD_EXP 10
12859: PPUSH
12860: LD_STRING D12e-Sci-1
12862: PPUSH
12863: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
12867: LD_EXP 1
12871: PPUSH
12872: LD_STRING D12e-JMM-1
12874: PPUSH
12875: CALL_OW 88
// DialogueOff ;
12879: CALL_OW 7
// cratesStatus = 2 ;
12883: LD_ADDR_EXP 33
12887: PUSH
12888: LD_INT 2
12890: ST_TO_ADDR
// end ;
12891: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
12892: LD_INT 22
12894: PUSH
12895: LD_INT 6
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 2
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 34
12914: PUSH
12915: LD_INT 51
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: PUSH
12932: LD_INT 0
12934: GREATER
12935: IFFALSE 12989
12937: GO 12939
12939: DISABLE
12940: LD_INT 0
12942: PPUSH
// begin enable ;
12943: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] ] ) do
12944: LD_ADDR_VAR 0 1
12948: PUSH
12949: LD_INT 22
12951: PUSH
12952: LD_INT 6
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: FOR_IN
12968: IFFALSE 12987
// ComAgressiveMove ( i , 138 , 168 ) ;
12970: LD_VAR 0 1
12974: PPUSH
12975: LD_INT 138
12977: PPUSH
12978: LD_INT 168
12980: PPUSH
12981: CALL_OW 114
12985: GO 12967
12987: POP
12988: POP
// end ;
12989: PPOPN 1
12991: END
// every 0 0$1 trigger FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
12992: LD_INT 5
12994: PPUSH
12995: LD_INT 22
12997: PUSH
12998: LD_INT 6
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 34
13007: PUSH
13008: LD_INT 51
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 70
13023: PUSH
13024: LD_INT 0
13026: GREATER
13027: IFFALSE 13129
13029: GO 13031
13031: DISABLE
13032: LD_INT 0
13034: PPUSH
// begin enable ;
13035: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] ] ) do
13036: LD_ADDR_VAR 0 1
13040: PUSH
13041: LD_INT 5
13043: PPUSH
13044: LD_INT 22
13046: PUSH
13047: LD_INT 6
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: EMPTY
13055: LIST
13056: PPUSH
13057: CALL_OW 70
13061: PUSH
13062: FOR_IN
13063: IFFALSE 13127
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13065: LD_INT 5
13067: PPUSH
13068: LD_INT 22
13070: PUSH
13071: LD_INT 6
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 34
13080: PUSH
13081: LD_INT 51
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 70
13096: PUSH
13097: LD_INT 0
13099: GREATER
13100: IFFALSE 13116
// sendedConvoys = sendedConvoys + 1 ;
13102: LD_ADDR_EXP 34
13106: PUSH
13107: LD_EXP 34
13111: PUSH
13112: LD_INT 1
13114: PLUS
13115: ST_TO_ADDR
// RemoveUnit ( i ) ;
13116: LD_VAR 0 1
13120: PPUSH
13121: CALL_OW 64
// end ;
13125: GO 13062
13127: POP
13128: POP
// end ; end_of_file
13129: PPOPN 1
13131: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13132: LD_VAR 0 1
13136: PUSH
13137: LD_INT 1
13139: EQUAL
13140: PUSH
13141: LD_VAR 0 2
13145: PUSH
13146: LD_INT 3
13148: EQUAL
13149: AND
13150: IFFALSE 13160
// contactWithRussian = 1 ;
13152: LD_ADDR_EXP 20
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// end ;
13160: PPOPN 2
13162: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13163: LD_VAR 0 1
13167: PPUSH
13168: CALL_OW 266
13172: PUSH
13173: LD_INT 36
13175: EQUAL
13176: PUSH
13177: LD_VAR 0 1
13181: PPUSH
13182: CALL_OW 255
13186: PUSH
13187: LD_INT 1
13189: EQUAL
13190: AND
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 21
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 33
13214: PUSH
13215: LD_INT 2
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_INT 0
13234: EQUAL
13235: AND
13236: PUSH
13237: LD_EXP 21
13241: PUSH
13242: LD_INT 0
13244: EQUAL
13245: AND
13246: IFFALSE 13315
// begin firstTower = 1 ;
13248: LD_ADDR_EXP 21
13252: PUSH
13253: LD_INT 1
13255: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13256: LD_INT 22
13258: PUSH
13259: LD_INT 1
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 21
13268: PUSH
13269: LD_INT 1
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 25
13278: PUSH
13279: LD_INT 3
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 69
13295: PUSH
13296: LD_EXP 1
13300: PUSH
13301: EMPTY
13302: LIST
13303: DIFF
13304: PPUSH
13305: LD_STRING D3b-Mech1-1
13307: PPUSH
13308: LD_STRING D3b-Mech1-1
13310: PPUSH
13311: CALL 4467 0 3
// end ; if GetSide ( building ) = 3 then
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 255
13324: PUSH
13325: LD_INT 3
13327: EQUAL
13328: IFFALSE 13402
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13330: LD_ADDR_EXP 28
13334: PUSH
13335: LD_EXP 28
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 3
13347: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13348: LD_ADDR_EXP 28
13352: PUSH
13353: LD_EXP 28
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: CALL_OW 3
13365: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13366: LD_ADDR_EXP 28
13370: PUSH
13371: LD_EXP 28
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 3
13383: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
13384: LD_ADDR_EXP 28
13388: PUSH
13389: LD_EXP 28
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 3
13401: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
13402: LD_VAR 0 1
13406: PPUSH
13407: CALL_OW 255
13411: PUSH
13412: LD_INT 3
13414: EQUAL
13415: PUSH
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 266
13425: PUSH
13426: LD_INT 0
13428: EQUAL
13429: PUSH
13430: LD_VAR 0 1
13434: PPUSH
13435: CALL_OW 266
13439: PUSH
13440: LD_INT 2
13442: EQUAL
13443: OR
13444: PUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 266
13454: PUSH
13455: LD_INT 4
13457: EQUAL
13458: OR
13459: PUSH
13460: EMPTY
13461: LIST
13462: AND
13463: IFFALSE 13474
// ComUpgrade ( building ) ;
13465: LD_VAR 0 1
13469: PPUSH
13470: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 255
13483: PUSH
13484: LD_INT 3
13486: EQUAL
13487: PUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 266
13497: PUSH
13498: LD_INT 32
13500: EQUAL
13501: AND
13502: IFFALSE 13543
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
13504: LD_VAR 0 1
13508: PPUSH
13509: LD_INT 42
13511: PUSH
13512: LD_INT 43
13514: PUSH
13515: LD_INT 44
13517: PUSH
13518: LD_INT 46
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_INT 4
13532: PPUSH
13533: CALL_OW 12
13537: ARRAY
13538: PPUSH
13539: CALL_OW 208
// end ; end ;
13543: PPOPN 1
13545: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13546: LD_VAR 0 1
13550: PPUSH
13551: CALL_OW 255
13555: PUSH
13556: LD_INT 1
13558: EQUAL
13559: PUSH
13560: LD_VAR 0 1
13564: PPUSH
13565: CALL_OW 247
13569: PUSH
13570: LD_INT 1
13572: EQUAL
13573: AND
13574: IFFALSE 13590
// unitLost = unitLost + 1 ;
13576: LD_ADDR_EXP 27
13580: PUSH
13581: LD_EXP 27
13585: PUSH
13586: LD_INT 1
13588: PLUS
13589: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
13590: LD_VAR 0 1
13594: PPUSH
13595: CALL_OW 255
13599: PUSH
13600: LD_INT 3
13602: EQUAL
13603: PUSH
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 247
13613: PUSH
13614: LD_INT 3
13616: EQUAL
13617: AND
13618: IFFALSE 14310
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 266
13629: PUSH
13630: LD_INT 31
13632: EQUAL
13633: PUSH
13634: LD_VAR 0 1
13638: PPUSH
13639: CALL_OW 266
13643: PUSH
13644: LD_INT 32
13646: EQUAL
13647: OR
13648: PUSH
13649: LD_VAR 0 1
13653: PPUSH
13654: CALL_OW 266
13658: PUSH
13659: LD_INT 36
13661: EQUAL
13662: OR
13663: PUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 266
13673: PUSH
13674: LD_INT 0
13676: EQUAL
13677: OR
13678: PUSH
13679: LD_VAR 0 1
13683: PPUSH
13684: CALL_OW 266
13688: PUSH
13689: LD_INT 24
13691: EQUAL
13692: OR
13693: PUSH
13694: LD_VAR 0 1
13698: PPUSH
13699: CALL_OW 266
13703: PUSH
13704: LD_INT 17
13706: EQUAL
13707: OR
13708: PUSH
13709: LD_VAR 0 1
13713: PPUSH
13714: CALL_OW 266
13718: PUSH
13719: LD_INT 25
13721: EQUAL
13722: OR
13723: PUSH
13724: LD_VAR 0 1
13728: PPUSH
13729: CALL_OW 266
13733: PUSH
13734: LD_INT 19
13736: EQUAL
13737: OR
13738: PUSH
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 266
13748: PUSH
13749: LD_INT 20
13751: EQUAL
13752: OR
13753: PUSH
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 266
13763: PUSH
13764: LD_INT 18
13766: EQUAL
13767: OR
13768: PUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 266
13778: PUSH
13779: LD_INT 21
13781: EQUAL
13782: OR
13783: PUSH
13784: LD_VAR 0 1
13788: PPUSH
13789: CALL_OW 266
13793: PUSH
13794: LD_INT 23
13796: EQUAL
13797: OR
13798: PUSH
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL_OW 266
13808: PUSH
13809: LD_INT 16
13811: EQUAL
13812: OR
13813: PUSH
13814: LD_VAR 0 1
13818: PPUSH
13819: CALL_OW 266
13823: PUSH
13824: LD_INT 6
13826: EQUAL
13827: OR
13828: PUSH
13829: LD_VAR 0 1
13833: PPUSH
13834: CALL_OW 266
13838: PUSH
13839: LD_INT 29
13841: EQUAL
13842: OR
13843: PUSH
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL_OW 266
13853: PUSH
13854: LD_INT 26
13856: EQUAL
13857: OR
13858: PUSH
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 266
13868: PUSH
13869: LD_INT 30
13871: EQUAL
13872: OR
13873: PUSH
13874: LD_VAR 0 1
13878: PPUSH
13879: CALL_OW 266
13883: PUSH
13884: LD_INT 28
13886: EQUAL
13887: OR
13888: PUSH
13889: LD_VAR 0 1
13893: PPUSH
13894: CALL_OW 266
13898: PUSH
13899: LD_INT 27
13901: EQUAL
13902: OR
13903: PUSH
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 266
13913: PUSH
13914: LD_INT 33
13916: EQUAL
13917: OR
13918: PUSH
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 266
13928: PUSH
13929: LD_INT 2
13931: EQUAL
13932: OR
13933: PUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 266
13943: PUSH
13944: LD_INT 4
13946: EQUAL
13947: OR
13948: IFFALSE 14034
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
13950: LD_ADDR_EXP 28
13954: PUSH
13955: LD_EXP 28
13959: PUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: CALL_OW 266
13969: ADD
13970: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
13971: LD_ADDR_EXP 28
13975: PUSH
13976: LD_EXP 28
13980: PUSH
13981: LD_VAR 0 1
13985: PPUSH
13986: CALL_OW 250
13990: ADD
13991: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
13992: LD_ADDR_EXP 28
13996: PUSH
13997: LD_EXP 28
14001: PUSH
14002: LD_VAR 0 1
14006: PPUSH
14007: CALL_OW 251
14011: ADD
14012: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14013: LD_ADDR_EXP 28
14017: PUSH
14018: LD_EXP 28
14022: PUSH
14023: LD_VAR 0 1
14027: PPUSH
14028: CALL_OW 254
14032: ADD
14033: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 266
14043: PUSH
14044: LD_INT 1
14046: EQUAL
14047: IFFALSE 14126
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14049: LD_ADDR_EXP 28
14053: PUSH
14054: LD_EXP 28
14058: PUSH
14059: LD_INT 0
14061: ADD
14062: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14063: LD_ADDR_EXP 28
14067: PUSH
14068: LD_EXP 28
14072: PUSH
14073: LD_VAR 0 1
14077: PPUSH
14078: CALL_OW 250
14082: ADD
14083: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14084: LD_ADDR_EXP 28
14088: PUSH
14089: LD_EXP 28
14093: PUSH
14094: LD_VAR 0 1
14098: PPUSH
14099: CALL_OW 251
14103: ADD
14104: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14105: LD_ADDR_EXP 28
14109: PUSH
14110: LD_EXP 28
14114: PUSH
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 254
14124: ADD
14125: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 266
14135: PUSH
14136: LD_INT 3
14138: EQUAL
14139: IFFALSE 14218
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14141: LD_ADDR_EXP 28
14145: PUSH
14146: LD_EXP 28
14150: PUSH
14151: LD_INT 2
14153: ADD
14154: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14155: LD_ADDR_EXP 28
14159: PUSH
14160: LD_EXP 28
14164: PUSH
14165: LD_VAR 0 1
14169: PPUSH
14170: CALL_OW 250
14174: ADD
14175: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14176: LD_ADDR_EXP 28
14180: PUSH
14181: LD_EXP 28
14185: PUSH
14186: LD_VAR 0 1
14190: PPUSH
14191: CALL_OW 251
14195: ADD
14196: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14197: LD_ADDR_EXP 28
14201: PUSH
14202: LD_EXP 28
14206: PUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 254
14216: ADD
14217: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 266
14227: PUSH
14228: LD_INT 5
14230: EQUAL
14231: IFFALSE 14310
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14233: LD_ADDR_EXP 28
14237: PUSH
14238: LD_EXP 28
14242: PUSH
14243: LD_INT 4
14245: ADD
14246: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14247: LD_ADDR_EXP 28
14251: PUSH
14252: LD_EXP 28
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 250
14266: ADD
14267: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14268: LD_ADDR_EXP 28
14272: PUSH
14273: LD_EXP 28
14277: PUSH
14278: LD_VAR 0 1
14282: PPUSH
14283: CALL_OW 251
14287: ADD
14288: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14289: LD_ADDR_EXP 28
14293: PUSH
14294: LD_EXP 28
14298: PUSH
14299: LD_VAR 0 1
14303: PPUSH
14304: CALL_OW 254
14308: ADD
14309: ST_TO_ADDR
// end ; end ; end ;
14310: PPOPN 1
14312: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
14313: LD_INT 0
14315: PPUSH
14316: PPUSH
14317: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
14318: LD_VAR 0 1
14322: PPUSH
14323: CALL_OW 264
14327: PUSH
14328: LD_INT 51
14330: EQUAL
14331: PUSH
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 255
14341: PUSH
14342: LD_INT 3
14344: EQUAL
14345: AND
14346: IFFALSE 14408
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
14348: LD_ADDR_VAR 0 5
14352: PUSH
14353: LD_INT 2
14355: PPUSH
14356: CALL_OW 274
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 275
14368: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 274
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_VAR 0 5
14384: PUSH
14385: LD_INT 100
14387: MINUS
14388: PPUSH
14389: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
14393: LD_VAR 0 1
14397: PPUSH
14398: LD_INT 1
14400: PPUSH
14401: LD_INT 100
14403: PPUSH
14404: CALL_OW 291
// end ; if building = rufabsupp then
14408: LD_VAR 0 2
14412: PUSH
14413: LD_INT 17
14415: EQUAL
14416: IFFALSE 14430
// SetSide ( vehicle , 6 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_INT 6
14425: PPUSH
14426: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
14430: LD_VAR 0 2
14434: PPUSH
14435: CALL_OW 255
14439: PUSH
14440: LD_INT 3
14442: EQUAL
14443: PUSH
14444: LD_VAR 0 2
14448: PPUSH
14449: CALL_OW 302
14453: AND
14454: IFFALSE 14524
// begin uc_side = 3 ;
14456: LD_ADDR_OWVAR 20
14460: PUSH
14461: LD_INT 3
14463: ST_TO_ADDR
// uc_nation = 3 ;
14464: LD_ADDR_OWVAR 21
14468: PUSH
14469: LD_INT 3
14471: ST_TO_ADDR
// hc_gallery :=  ;
14472: LD_ADDR_OWVAR 33
14476: PUSH
14477: LD_STRING 
14479: ST_TO_ADDR
// hc_name :=  ;
14480: LD_ADDR_OWVAR 26
14484: PUSH
14485: LD_STRING 
14487: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
14488: LD_INT 0
14490: PPUSH
14491: LD_EXP 31
14495: PPUSH
14496: LD_EXP 32
14500: PPUSH
14501: CALL_OW 12
14505: PPUSH
14506: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
14510: CALL_OW 44
14514: PPUSH
14515: LD_VAR 0 2
14519: PPUSH
14520: CALL_OW 52
// end ; end ;
14524: PPOPN 5
14526: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 255
14536: PUSH
14537: LD_INT 3
14539: EQUAL
14540: IFFALSE 14556
// tamedApemans = tamedApemans + 1 ;
14542: LD_ADDR_EXP 29
14546: PUSH
14547: LD_EXP 29
14551: PUSH
14552: LD_INT 1
14554: PLUS
14555: ST_TO_ADDR
// end ; end_of_file
14556: PPOPN 2
14558: END
// every 0 0$30 trigger cratesStatus = 1 do
14559: LD_EXP 33
14563: PUSH
14564: LD_INT 1
14566: EQUAL
14567: IFFALSE 14631
14569: GO 14571
14571: DISABLE
// begin enable ;
14572: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
14573: LD_INT 350
14575: PUSH
14576: LD_INT 1050
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_INT 2
14588: PPUSH
14589: CALL_OW 12
14593: ARRAY
14594: PPUSH
14595: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
14599: LD_INT 4
14601: PUSH
14602: LD_INT 5
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 1
14611: PPUSH
14612: LD_INT 2
14614: PPUSH
14615: CALL_OW 12
14619: ARRAY
14620: PPUSH
14621: LD_INT 7
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 55
// end ;
14631: END
// every 1 1$0 trigger cratesStatus = 2 do
14632: LD_EXP 33
14636: PUSH
14637: LD_INT 2
14639: EQUAL
14640: IFFALSE 14704
14642: GO 14644
14644: DISABLE
// begin enable ;
14645: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
14646: LD_INT 3150
14648: PUSH
14649: LD_INT 4550
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: CALL_OW 12
14666: ARRAY
14667: PPUSH
14668: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
14672: LD_INT 2
14674: PUSH
14675: LD_INT 5
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 1
14684: PPUSH
14685: LD_INT 2
14687: PPUSH
14688: CALL_OW 12
14692: ARRAY
14693: PPUSH
14694: LD_INT 8
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 55
// end ; end_of_file
14704: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
14705: LD_EXP 22
14709: PUSH
14710: LD_INT 1
14712: EQUAL
14713: IFFALSE 15014
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
14722: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_INT 1
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 21
14740: PUSH
14741: LD_INT 3
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 2
14750: PUSH
14751: LD_INT 30
14753: PUSH
14754: LD_INT 0
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 30
14763: PUSH
14764: LD_INT 1
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: PPUSH
14781: CALL_OW 69
14785: ST_TO_ADDR
// for i in tmp do
14786: LD_ADDR_VAR 0 1
14790: PUSH
14791: LD_VAR 0 2
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14830
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_VAR 0 3
14808: PUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 274
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 275
14826: PLUS
14827: ST_TO_ADDR
14828: GO 14796
14830: POP
14831: POP
// strings = [ ] ;
14832: LD_ADDR_EXP 25
14836: PUSH
14837: EMPTY
14838: ST_TO_ADDR
// if tmp = 0 then
14839: LD_VAR 0 2
14843: PUSH
14844: LD_INT 0
14846: EQUAL
14847: IFFALSE 14872
// strings = strings ^ [ #Am06-1 , needCrates ] ;
14849: LD_ADDR_EXP 25
14853: PUSH
14854: LD_EXP 25
14858: PUSH
14859: LD_STRING #Am06-1
14861: PUSH
14862: LD_EXP 23
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: ADD
14871: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
14872: LD_VAR 0 2
14876: PUSH
14877: LD_INT 0
14879: GREATER
14880: PUSH
14881: LD_EXP 23
14885: PUSH
14886: LD_VAR 0 3
14890: GREATER
14891: AND
14892: IFFALSE 14923
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
14894: LD_ADDR_EXP 25
14898: PUSH
14899: LD_EXP 25
14903: PUSH
14904: LD_STRING #Am06-1
14906: PUSH
14907: LD_EXP 23
14911: PUSH
14912: LD_VAR 0 3
14916: MINUS
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: ADD
14922: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
14923: LD_VAR 0 2
14927: PUSH
14928: LD_INT 0
14930: GREATER
14931: PUSH
14932: LD_EXP 23
14936: PUSH
14937: LD_VAR 0 3
14941: LESSEQUAL
14942: AND
14943: IFFALSE 14966
// strings = strings ^ [ #Am06-1 , 0 ] ;
14945: LD_ADDR_EXP 25
14949: PUSH
14950: LD_EXP 25
14954: PUSH
14955: LD_STRING #Am06-1
14957: PUSH
14958: LD_INT 0
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: ADD
14965: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
14966: LD_ADDR_EXP 24
14970: PUSH
14971: LD_EXP 24
14975: PUSH
14976: LD_INT 35
14978: MINUS
14979: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
14980: LD_ADDR_EXP 25
14984: PUSH
14985: LD_EXP 25
14989: PUSH
14990: LD_STRING #Am06-2
14992: PUSH
14993: LD_EXP 24
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: ADD
15002: ST_TO_ADDR
// display_strings = strings ;
15003: LD_ADDR_OWVAR 47
15007: PUSH
15008: LD_EXP 25
15012: ST_TO_ADDR
// enable ;
15013: ENABLE
// end ; end_of_file
15014: PPOPN 3
15016: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
15021: PPUSH
15022: PPUSH
15023: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_INT 22
15031: PUSH
15032: LD_INT 1
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 21
15041: PUSH
15042: LD_INT 1
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 69
15057: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15058: LD_ADDR_VAR 0 3
15062: PUSH
15063: LD_INT 1
15065: PPUSH
15066: LD_VAR 0 2
15070: PPUSH
15071: CALL_OW 12
15075: ST_TO_ADDR
// uc_side = 2 ;
15076: LD_ADDR_OWVAR 20
15080: PUSH
15081: LD_INT 2
15083: ST_TO_ADDR
// uc_nation = 2 ;
15084: LD_ADDR_OWVAR 21
15088: PUSH
15089: LD_INT 2
15091: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
15092: LD_ADDR_EXP 17
15096: PUSH
15097: LD_STRING Kurt
15099: PPUSH
15100: LD_INT 0
15102: PPUSH
15103: CALL 4410 0 2
15107: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 2 , true ) ;
15108: LD_EXP 17
15112: PPUSH
15113: LD_VAR 0 2
15117: PUSH
15118: LD_VAR 0 3
15122: ARRAY
15123: PPUSH
15124: CALL_OW 250
15128: PPUSH
15129: LD_VAR 0 2
15133: PUSH
15134: LD_VAR 0 3
15138: ARRAY
15139: PPUSH
15140: CALL_OW 251
15144: PPUSH
15145: LD_INT 2
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 50
// InGameOn ;
15155: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
15159: LD_EXP 17
15163: PPUSH
15164: CALL_OW 87
// wait ( 0 0$2 ) ;
15168: LD_INT 70
15170: PPUSH
15171: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
15175: LD_VAR 0 2
15179: PUSH
15180: LD_VAR 0 3
15184: ARRAY
15185: PPUSH
15186: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
15190: LD_VAR 0 2
15194: PUSH
15195: LD_VAR 0 3
15199: ARRAY
15200: PPUSH
15201: CALL_OW 122
// wait ( 0 0$1 ) ;
15205: LD_INT 35
15207: PPUSH
15208: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
15212: LD_EXP 17
15216: PPUSH
15217: LD_VAR 0 2
15221: PUSH
15222: LD_VAR 0 3
15226: ARRAY
15227: PPUSH
15228: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
15232: LD_VAR 0 2
15236: PUSH
15237: LD_VAR 0 3
15241: ARRAY
15242: PPUSH
15243: LD_EXP 17
15247: PPUSH
15248: CALL_OW 119
// DialogueOn ;
15252: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
15256: LD_EXP 17
15260: PPUSH
15261: LD_STRING D2-Kurt-1
15263: PPUSH
15264: CALL_OW 88
// if tmp [ rnd ] = JMM then
15268: LD_VAR 0 2
15272: PUSH
15273: LD_VAR 0 3
15277: ARRAY
15278: PUSH
15279: LD_EXP 1
15283: EQUAL
15284: IFFALSE 15376
// begin Say ( JMM , D2-JMM-1 ) ;
15286: LD_EXP 1
15290: PPUSH
15291: LD_STRING D2-JMM-1
15293: PPUSH
15294: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15298: LD_EXP 17
15302: PPUSH
15303: LD_STRING D2-Kurt-2
15305: PPUSH
15306: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
15310: LD_EXP 1
15314: PPUSH
15315: LD_STRING D2-JMM-2
15317: PPUSH
15318: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15322: LD_EXP 17
15326: PPUSH
15327: LD_STRING D2-Kurt-3
15329: PPUSH
15330: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
15334: LD_EXP 1
15338: PPUSH
15339: LD_STRING D2-JMM-3
15341: PPUSH
15342: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15346: LD_EXP 17
15350: PPUSH
15351: LD_STRING D2-Kurt-4
15353: PPUSH
15354: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
15358: LD_EXP 1
15362: PPUSH
15363: LD_STRING D2-JMM-4
15365: PPUSH
15366: CALL_OW 88
// DialogueOff ;
15370: CALL_OW 7
// end else
15374: GO 15806
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15376: LD_VAR 0 2
15380: PUSH
15381: LD_VAR 0 3
15385: ARRAY
15386: PPUSH
15387: CALL_OW 258
15391: PUSH
15392: LD_INT 1
15394: EQUAL
15395: IFFALSE 15415
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
15397: LD_VAR 0 2
15401: PUSH
15402: LD_VAR 0 3
15406: ARRAY
15407: PPUSH
15408: LD_STRING D2-Sol1-1
15410: PPUSH
15411: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15415: LD_VAR 0 2
15419: PUSH
15420: LD_VAR 0 3
15424: ARRAY
15425: PPUSH
15426: CALL_OW 258
15430: PUSH
15431: LD_INT 2
15433: EQUAL
15434: IFFALSE 15454
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
15436: LD_VAR 0 2
15440: PUSH
15441: LD_VAR 0 3
15445: ARRAY
15446: PPUSH
15447: LD_STRING D2-FSol1-1
15449: PPUSH
15450: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
15454: LD_EXP 17
15458: PPUSH
15459: LD_STRING D2-Kurt-2
15461: PPUSH
15462: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15466: LD_VAR 0 2
15470: PUSH
15471: LD_VAR 0 3
15475: ARRAY
15476: PPUSH
15477: CALL_OW 258
15481: PUSH
15482: LD_INT 1
15484: EQUAL
15485: IFFALSE 15505
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
15487: LD_VAR 0 2
15491: PUSH
15492: LD_VAR 0 3
15496: ARRAY
15497: PPUSH
15498: LD_STRING D2-Sol1-2
15500: PPUSH
15501: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15505: LD_VAR 0 2
15509: PUSH
15510: LD_VAR 0 3
15514: ARRAY
15515: PPUSH
15516: CALL_OW 258
15520: PUSH
15521: LD_INT 2
15523: EQUAL
15524: IFFALSE 15544
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
15526: LD_VAR 0 2
15530: PUSH
15531: LD_VAR 0 3
15535: ARRAY
15536: PPUSH
15537: LD_STRING D2-FSol1-2
15539: PPUSH
15540: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
15544: LD_EXP 17
15548: PPUSH
15549: LD_STRING D2-Kurt-3
15551: PPUSH
15552: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15556: LD_VAR 0 2
15560: PUSH
15561: LD_VAR 0 3
15565: ARRAY
15566: PPUSH
15567: CALL_OW 258
15571: PUSH
15572: LD_INT 1
15574: EQUAL
15575: IFFALSE 15595
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
15577: LD_VAR 0 2
15581: PUSH
15582: LD_VAR 0 3
15586: ARRAY
15587: PPUSH
15588: LD_STRING D2-Sol1-3
15590: PPUSH
15591: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15595: LD_VAR 0 2
15599: PUSH
15600: LD_VAR 0 3
15604: ARRAY
15605: PPUSH
15606: CALL_OW 258
15610: PUSH
15611: LD_INT 2
15613: EQUAL
15614: IFFALSE 15634
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 3
15625: ARRAY
15626: PPUSH
15627: LD_STRING D2-FSol1-3
15629: PPUSH
15630: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
15634: LD_EXP 17
15638: PPUSH
15639: LD_STRING D2-Kurt-4
15641: PPUSH
15642: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15646: LD_VAR 0 2
15650: PUSH
15651: LD_VAR 0 3
15655: ARRAY
15656: PPUSH
15657: CALL_OW 258
15661: PUSH
15662: LD_INT 1
15664: EQUAL
15665: IFFALSE 15685
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
15667: LD_VAR 0 2
15671: PUSH
15672: LD_VAR 0 3
15676: ARRAY
15677: PPUSH
15678: LD_STRING D2-Sol1-4
15680: PPUSH
15681: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15685: LD_VAR 0 2
15689: PUSH
15690: LD_VAR 0 3
15694: ARRAY
15695: PPUSH
15696: CALL_OW 258
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15724
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
15706: LD_VAR 0 2
15710: PUSH
15711: LD_VAR 0 3
15715: ARRAY
15716: PPUSH
15717: LD_STRING D2-FSol1-4
15719: PPUSH
15720: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
15724: LD_VAR 0 2
15728: PUSH
15729: LD_VAR 0 3
15733: ARRAY
15734: PPUSH
15735: CALL_OW 258
15739: PUSH
15740: LD_INT 1
15742: EQUAL
15743: IFFALSE 15763
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
15745: LD_VAR 0 2
15749: PUSH
15750: LD_VAR 0 3
15754: ARRAY
15755: PPUSH
15756: LD_STRING D2-Sol1-5
15758: PPUSH
15759: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15763: LD_VAR 0 2
15767: PUSH
15768: LD_VAR 0 3
15772: ARRAY
15773: PPUSH
15774: CALL_OW 258
15778: PUSH
15779: LD_INT 2
15781: EQUAL
15782: IFFALSE 15802
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
15784: LD_VAR 0 2
15788: PUSH
15789: LD_VAR 0 3
15793: ARRAY
15794: PPUSH
15795: LD_STRING D2-FSol1-5
15797: PPUSH
15798: CALL_OW 88
// DialogueOff ;
15802: CALL_OW 7
// end ; dec = ShowQuery1 ;
15806: LD_ADDR_VAR 0 4
15810: PUSH
15811: CALL 5006 0 0
15815: ST_TO_ADDR
// if dec = 1 then
15816: LD_VAR 0 4
15820: PUSH
15821: LD_INT 1
15823: EQUAL
15824: IFFALSE 15866
// begin DialogueOn ;
15826: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
15830: LD_EXP 17
15834: PPUSH
15835: LD_STRING D2a-Kurt-1
15837: PPUSH
15838: CALL_OW 88
// DialogueOff ;
15842: CALL_OW 7
// InGameOff ;
15846: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
15850: LD_INT 1
15852: PPUSH
15853: LD_INT 2
15855: PPUSH
15856: LD_INT 2
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 80
// end ; if dec = 2 then
15866: LD_VAR 0 4
15870: PUSH
15871: LD_INT 2
15873: EQUAL
15874: IFFALSE 16470
// begin DialogueOn ;
15876: CALL_OW 6
// if tmp [ rnd ] = JMM then
15880: LD_VAR 0 2
15884: PUSH
15885: LD_VAR 0 3
15889: ARRAY
15890: PUSH
15891: LD_EXP 1
15895: EQUAL
15896: IFFALSE 15952
// begin Say ( JMM , D2b-JMM-1 ) ;
15898: LD_EXP 1
15902: PPUSH
15903: LD_STRING D2b-JMM-1
15905: PPUSH
15906: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
15910: LD_EXP 17
15914: PPUSH
15915: LD_STRING D2b-Kurt-1
15917: PPUSH
15918: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
15922: LD_EXP 1
15926: PPUSH
15927: LD_STRING D2b-JMM-2
15929: PPUSH
15930: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
15934: LD_EXP 17
15938: PPUSH
15939: LD_STRING D2b-Kurt-2
15941: PPUSH
15942: CALL_OW 88
// DialogueOff ;
15946: CALL_OW 7
// end else
15950: GO 16214
// begin if GetSex ( tmp [ rnd ] ) = 1 then
15952: LD_VAR 0 2
15956: PUSH
15957: LD_VAR 0 3
15961: ARRAY
15962: PPUSH
15963: CALL_OW 258
15967: PUSH
15968: LD_INT 1
15970: EQUAL
15971: IFFALSE 15991
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
15973: LD_VAR 0 2
15977: PUSH
15978: LD_VAR 0 3
15982: ARRAY
15983: PPUSH
15984: LD_STRING D2b-Sol1-1
15986: PPUSH
15987: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
15991: LD_VAR 0 2
15995: PUSH
15996: LD_VAR 0 3
16000: ARRAY
16001: PPUSH
16002: CALL_OW 258
16006: PUSH
16007: LD_INT 2
16009: EQUAL
16010: IFFALSE 16030
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
16012: LD_VAR 0 2
16016: PUSH
16017: LD_VAR 0 3
16021: ARRAY
16022: PPUSH
16023: LD_STRING D2b-FSol1-1
16025: PPUSH
16026: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16030: LD_EXP 17
16034: PPUSH
16035: LD_STRING D2b-Kurt-1
16037: PPUSH
16038: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16042: LD_VAR 0 2
16046: PUSH
16047: LD_VAR 0 3
16051: ARRAY
16052: PPUSH
16053: CALL_OW 258
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: IFFALSE 16081
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
16063: LD_VAR 0 2
16067: PUSH
16068: LD_VAR 0 3
16072: ARRAY
16073: PPUSH
16074: LD_STRING D2b-Sol1-2
16076: PPUSH
16077: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16081: LD_VAR 0 2
16085: PUSH
16086: LD_VAR 0 3
16090: ARRAY
16091: PPUSH
16092: CALL_OW 258
16096: PUSH
16097: LD_INT 2
16099: EQUAL
16100: IFFALSE 16120
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
16102: LD_VAR 0 2
16106: PUSH
16107: LD_VAR 0 3
16111: ARRAY
16112: PPUSH
16113: LD_STRING D2b-FSol1-2
16115: PPUSH
16116: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16120: LD_EXP 17
16124: PPUSH
16125: LD_STRING D2b-Kurt-2
16127: PPUSH
16128: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16132: LD_VAR 0 2
16136: PUSH
16137: LD_VAR 0 3
16141: ARRAY
16142: PPUSH
16143: CALL_OW 258
16147: PUSH
16148: LD_INT 1
16150: EQUAL
16151: IFFALSE 16171
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
16153: LD_VAR 0 2
16157: PUSH
16158: LD_VAR 0 3
16162: ARRAY
16163: PPUSH
16164: LD_STRING D2c-Sol1-2
16166: PPUSH
16167: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16171: LD_VAR 0 2
16175: PUSH
16176: LD_VAR 0 3
16180: ARRAY
16181: PPUSH
16182: CALL_OW 258
16186: PUSH
16187: LD_INT 2
16189: EQUAL
16190: IFFALSE 16210
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
16192: LD_VAR 0 2
16196: PUSH
16197: LD_VAR 0 3
16201: ARRAY
16202: PPUSH
16203: LD_STRING D2c-FSol1-2
16205: PPUSH
16206: CALL_OW 88
// DialogueOff ;
16210: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
16214: LD_ADDR_VAR 0 5
16218: PUSH
16219: CALL 5080 0 0
16223: ST_TO_ADDR
// if dec2 = 1 then
16224: LD_VAR 0 5
16228: PUSH
16229: LD_INT 1
16231: EQUAL
16232: IFFALSE 16270
// begin Say ( Kurt , D2a-Kurt-1 ) ;
16234: LD_EXP 17
16238: PPUSH
16239: LD_STRING D2a-Kurt-1
16241: PPUSH
16242: CALL_OW 88
// DialogueOff ;
16246: CALL_OW 7
// InGameOff ;
16250: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16254: LD_INT 1
16256: PPUSH
16257: LD_INT 2
16259: PPUSH
16260: LD_INT 2
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 80
// end ; if dec2 = 2 then
16270: LD_VAR 0 5
16274: PUSH
16275: LD_INT 2
16277: EQUAL
16278: IFFALSE 16470
// begin if tmp [ rnd ] = JMM then
16280: LD_VAR 0 2
16284: PUSH
16285: LD_VAR 0 3
16289: ARRAY
16290: PUSH
16291: LD_EXP 1
16295: EQUAL
16296: IFFALSE 16352
// begin Say ( JMM , D2c-JMM-1 ) ;
16298: LD_EXP 1
16302: PPUSH
16303: LD_STRING D2c-JMM-1
16305: PPUSH
16306: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16310: LD_EXP 17
16314: PPUSH
16315: LD_STRING D2c-Kurt-1
16317: PPUSH
16318: CALL_OW 88
// DialogueOff ;
16322: CALL_OW 7
// InGameOff ;
16326: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16330: LD_EXP 17
16334: PPUSH
16335: LD_INT 9
16337: PPUSH
16338: CALL_OW 113
// readyToEscape = 1 ;
16342: LD_ADDR_EXP 19
16346: PUSH
16347: LD_INT 1
16349: ST_TO_ADDR
// end else
16350: GO 16470
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16352: LD_VAR 0 2
16356: PUSH
16357: LD_VAR 0 3
16361: ARRAY
16362: PPUSH
16363: CALL_OW 258
16367: PUSH
16368: LD_INT 1
16370: EQUAL
16371: IFFALSE 16391
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
16373: LD_VAR 0 2
16377: PUSH
16378: LD_VAR 0 3
16382: ARRAY
16383: PPUSH
16384: LD_STRING D2c-Sol1-1
16386: PPUSH
16387: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16391: LD_VAR 0 2
16395: PUSH
16396: LD_VAR 0 3
16400: ARRAY
16401: PPUSH
16402: CALL_OW 258
16406: PUSH
16407: LD_INT 2
16409: EQUAL
16410: IFFALSE 16430
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
16412: LD_VAR 0 2
16416: PUSH
16417: LD_VAR 0 3
16421: ARRAY
16422: PPUSH
16423: LD_STRING D2c-FSol1-1
16425: PPUSH
16426: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16430: LD_EXP 17
16434: PPUSH
16435: LD_STRING D2c-Kurt-1
16437: PPUSH
16438: CALL_OW 88
// DialogueOff ;
16442: CALL_OW 7
// InGameOff ;
16446: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16450: LD_EXP 17
16454: PPUSH
16455: LD_INT 9
16457: PPUSH
16458: CALL_OW 113
// readyToEscape = 1 ;
16462: LD_ADDR_EXP 19
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
16470: LD_VAR 0 4
16474: PUSH
16475: LD_INT 3
16477: EQUAL
16478: IFFALSE 16674
// begin DialogueOn ;
16480: CALL_OW 6
// if tmp [ rnd ] = JMM then
16484: LD_VAR 0 2
16488: PUSH
16489: LD_VAR 0 3
16493: ARRAY
16494: PUSH
16495: LD_EXP 1
16499: EQUAL
16500: IFFALSE 16556
// begin Say ( JMM , D2c-JMM-1 ) ;
16502: LD_EXP 1
16506: PPUSH
16507: LD_STRING D2c-JMM-1
16509: PPUSH
16510: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16514: LD_EXP 17
16518: PPUSH
16519: LD_STRING D2c-Kurt-1
16521: PPUSH
16522: CALL_OW 88
// DialogueOff ;
16526: CALL_OW 7
// InGameOff ;
16530: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16534: LD_EXP 17
16538: PPUSH
16539: LD_INT 9
16541: PPUSH
16542: CALL_OW 113
// readyToEscape = 1 ;
16546: LD_ADDR_EXP 19
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
// end else
16554: GO 16674
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16556: LD_VAR 0 2
16560: PUSH
16561: LD_VAR 0 3
16565: ARRAY
16566: PPUSH
16567: CALL_OW 258
16571: PUSH
16572: LD_INT 1
16574: EQUAL
16575: IFFALSE 16595
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
16577: LD_VAR 0 2
16581: PUSH
16582: LD_VAR 0 3
16586: ARRAY
16587: PPUSH
16588: LD_STRING D2c-Sol1-1
16590: PPUSH
16591: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16595: LD_VAR 0 2
16599: PUSH
16600: LD_VAR 0 3
16604: ARRAY
16605: PPUSH
16606: CALL_OW 258
16610: PUSH
16611: LD_INT 2
16613: EQUAL
16614: IFFALSE 16634
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
16616: LD_VAR 0 2
16620: PUSH
16621: LD_VAR 0 3
16625: ARRAY
16626: PPUSH
16627: LD_STRING D2c-FSol1-1
16629: PPUSH
16630: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
16634: LD_EXP 17
16638: PPUSH
16639: LD_STRING D2c-Kurt-1
16641: PPUSH
16642: CALL_OW 88
// DialogueOff ;
16646: CALL_OW 7
// InGameOff ;
16650: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
16654: LD_EXP 17
16658: PPUSH
16659: LD_INT 9
16661: PPUSH
16662: CALL_OW 113
// readyToEscape = 1 ;
16666: LD_ADDR_EXP 19
16670: PUSH
16671: LD_INT 1
16673: ST_TO_ADDR
// end ; end ; end ; end_of_file
16674: LD_VAR 0 1
16678: RET
// every 0 0$1 do
16679: GO 16681
16681: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
16682: LD_INT 3
16684: PPUSH
16685: LD_INT 32
16687: PPUSH
16688: LD_INT 3
16690: PPUSH
16691: CALL 5135 0 3
16695: END
// every 0 0$1 do
16696: GO 16698
16698: DISABLE
// begin enable ;
16699: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
16700: LD_INT 3
16702: PPUSH
16703: LD_INT 2
16705: PPUSH
16706: CALL 5220 0 2
// if disableHealAI = 0 then
16710: LD_EXP 30
16714: PUSH
16715: LD_INT 0
16717: EQUAL
16718: IFFALSE 16736
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
16720: LD_INT 3
16722: PPUSH
16723: LD_INT 10
16725: PPUSH
16726: LD_INT 11
16728: PPUSH
16729: LD_INT 32
16731: PPUSH
16732: CALL 5479 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
16736: LD_INT 3
16738: PPUSH
16739: LD_INT 51
16741: PPUSH
16742: LD_INT 7
16744: PPUSH
16745: CALL 6202 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
16749: LD_INT 3
16751: PPUSH
16752: LD_INT 14
16754: PPUSH
16755: LD_INT 121
16757: PPUSH
16758: LD_INT 100
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL 6382 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
16768: LD_INT 3
16770: PPUSH
16771: LD_EXP 28
16775: PPUSH
16776: CALL 7173 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
16780: LD_INT 3
16782: PPUSH
16783: LD_INT 8
16785: PUSH
16786: LD_INT 67
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 1
16795: PPUSH
16796: LD_INT 2
16798: PPUSH
16799: CALL_OW 12
16803: ARRAY
16804: PPUSH
16805: LD_INT 11
16807: PPUSH
16808: CALL 7379 0 3
// AttackNearBuildings ( 3 , 1 ) ;
16812: LD_INT 3
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL 7736 0 2
// end ;
16822: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
16823: LD_INT 22
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 21
16835: PUSH
16836: LD_INT 2
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 3
16845: PUSH
16846: LD_INT 34
16848: PUSH
16849: LD_INT 51
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: PPUSH
16865: CALL_OW 69
16869: PUSH
16870: LD_INT 0
16872: EQUAL
16873: IFFALSE 17007
16875: GO 16877
16877: DISABLE
// begin enable ;
16878: ENABLE
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
16879: LD_INT 3
16881: PPUSH
16882: LD_INT 21
16884: PPUSH
16885: LD_INT 4
16887: PUSH
16888: LD_INT 5
16890: PUSH
16891: LD_INT 5
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: LD_OWVAR 67
16903: ARRAY
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: LD_INT 43
16910: PUSH
16911: LD_INT 43
16913: PUSH
16914: LD_INT 43
16916: PUSH
16917: LD_INT 44
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 44
16928: PUSH
16929: LD_INT 44
16931: PUSH
16932: LD_INT 44
16934: PUSH
16935: LD_INT 43
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 44
16946: PUSH
16947: LD_INT 44
16949: PUSH
16950: LD_INT 44
16952: PUSH
16953: LD_INT 44
16955: PUSH
16956: LD_INT 46
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: PUSH
16971: LD_OWVAR 67
16975: ARRAY
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_INT 22
16985: PUSH
16986: LD_INT 22
16988: PUSH
16989: LD_INT 24
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_OWVAR 67
17001: ARRAY
17002: PPUSH
17003: CALL 5745 0 8
// end ;
17007: END
// every 5 5$0 do
17008: GO 17010
17010: DISABLE
// begin enable ;
17011: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17012: LD_INT 17
17014: PPUSH
17015: LD_INT 22
17017: PPUSH
17018: LD_INT 1
17020: PPUSH
17021: LD_INT 1
17023: PPUSH
17024: LD_INT 42
17026: PUSH
17027: LD_INT 43
17029: PUSH
17030: LD_INT 44
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: PPUSH
17041: LD_INT 3
17043: PPUSH
17044: CALL_OW 12
17048: ARRAY
17049: PPUSH
17050: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17054: LD_INT 17
17056: PPUSH
17057: LD_INT 22
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: LD_INT 1
17065: PPUSH
17066: LD_INT 42
17068: PUSH
17069: LD_INT 43
17071: PUSH
17072: LD_INT 44
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: PPUSH
17083: LD_INT 3
17085: PPUSH
17086: CALL_OW 12
17090: ARRAY
17091: PPUSH
17092: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
17096: LD_INT 17
17098: PPUSH
17099: LD_INT 22
17101: PPUSH
17102: LD_INT 1
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: LD_INT 42
17110: PUSH
17111: LD_INT 43
17113: PUSH
17114: LD_INT 44
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: PPUSH
17125: LD_INT 3
17127: PPUSH
17128: CALL_OW 12
17132: ARRAY
17133: PPUSH
17134: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
17138: LD_INT 17
17140: PPUSH
17141: LD_INT 22
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: LD_INT 51
17152: PPUSH
17153: CALL_OW 185
// end ;
17157: END
// every 2 2$0 do var i , j ;
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
17165: LD_INT 14700
17167: PUSH
17168: LD_INT 33600
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: PPUSH
17178: LD_INT 2
17180: PPUSH
17181: CALL_OW 12
17185: ARRAY
17186: PPUSH
17187: CALL_OW 67
// disableHealAI = 1 ;
17191: LD_ADDR_EXP 30
17195: PUSH
17196: LD_INT 1
17198: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17199: LD_ADDR_VAR 0 1
17203: PUSH
17204: LD_INT 22
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 4
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: PUSH
17233: FOR_IN
17234: IFFALSE 17247
// ComExitBuilding ( i ) ;
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 122
17245: GO 17233
17247: POP
17248: POP
// wait ( 0 0$1 ) ;
17249: LD_INT 35
17251: PPUSH
17252: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
17256: LD_INT 35
17258: PPUSH
17259: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17263: LD_ADDR_VAR 0 1
17267: PUSH
17268: LD_INT 22
17270: PUSH
17271: LD_INT 3
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 25
17280: PUSH
17281: LD_INT 4
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: PUSH
17297: FOR_IN
17298: IFFALSE 17375
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17300: LD_ADDR_VAR 0 2
17304: PUSH
17305: LD_INT 19
17307: PPUSH
17308: LD_INT 22
17310: PUSH
17311: LD_INT 0
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 25
17320: PUSH
17321: LD_INT 12
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PPUSH
17332: CALL_OW 70
17336: PUSH
17337: FOR_IN
17338: IFFALSE 17371
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17340: LD_VAR 0 1
17344: PPUSH
17345: LD_VAR 0 2
17349: PPUSH
17350: CALL_OW 250
17354: PPUSH
17355: LD_VAR 0 2
17359: PPUSH
17360: CALL_OW 251
17364: PPUSH
17365: CALL_OW 191
// end ;
17369: GO 17337
17371: POP
17372: POP
// end ;
17373: GO 17297
17375: POP
17376: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] ;
17377: LD_INT 22
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 25
17389: PUSH
17390: LD_INT 4
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 69
17405: PUSH
17406: LD_INT 0
17408: EQUAL
17409: PUSH
17410: LD_EXP 29
17414: PUSH
17415: LD_INT 6
17417: PUSH
17418: LD_INT 7
17420: PUSH
17421: LD_INT 8
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: PUSH
17429: LD_OWVAR 67
17433: ARRAY
17434: GREATEREQUAL
17435: OR
17436: IFFALSE 17256
// disableHealAI = 0 ;
17438: LD_ADDR_EXP 30
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: LD_INT 22
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 25
17463: PUSH
17464: LD_INT 12
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 69
17479: PUSH
17480: FOR_IN
17481: IFFALSE 17497
// SetClass ( i , 16 ) ;
17483: LD_VAR 0 1
17487: PPUSH
17488: LD_INT 16
17490: PPUSH
17491: CALL_OW 336
17495: GO 17480
17497: POP
17498: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_INT 22
17506: PUSH
17507: LD_INT 3
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 25
17516: PUSH
17517: LD_INT 4
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PPUSH
17528: CALL_OW 69
17532: PUSH
17533: FOR_IN
17534: IFFALSE 17553
// ComMoveXY ( i , 113 , 94 ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_INT 113
17543: PPUSH
17544: LD_INT 94
17546: PPUSH
17547: CALL_OW 111
17551: GO 17533
17553: POP
17554: POP
// end ;
17555: PPOPN 2
17557: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
17558: LD_INT 21
17560: PPUSH
17561: CALL_OW 255
17565: PUSH
17566: LD_INT 3
17568: EQUAL
17569: PUSH
17570: LD_INT 21
17572: PPUSH
17573: CALL_OW 302
17577: AND
17578: PUSH
17579: LD_INT 22
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 34
17591: PUSH
17592: LD_INT 51
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PPUSH
17603: CALL_OW 69
17607: PUSH
17608: LD_INT 0
17610: EQUAL
17611: AND
17612: IFFALSE 17644
17614: GO 17616
17616: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
17617: LD_INT 21
17619: PPUSH
17620: LD_INT 23
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: LD_INT 51
17631: PPUSH
17632: CALL_OW 185
// wait ( 5 5$0 ) ;
17636: LD_INT 10500
17638: PPUSH
17639: CALL_OW 67
// enable ;
17643: ENABLE
// end ; end_of_file
17644: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
17645: LD_EXP 24
17649: PUSH
17650: LD_INT 0
17652: LESSEQUAL
17653: IFFALSE 17793
17655: GO 17657
17657: DISABLE
17658: LD_INT 0
17660: PPUSH
17661: PPUSH
17662: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17663: LD_ADDR_VAR 0 2
17667: PUSH
17668: LD_INT 22
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 21
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 30
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 30
17703: PUSH
17704: LD_INT 1
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// for i in tmp do
17726: LD_ADDR_VAR 0 1
17730: PUSH
17731: LD_VAR 0 2
17735: PUSH
17736: FOR_IN
17737: IFFALSE 17770
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_VAR 0 3
17748: PUSH
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 274
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 275
17766: PLUS
17767: ST_TO_ADDR
17768: GO 17736
17770: POP
17771: POP
// if yourCrates >= needCrates then
17772: LD_VAR 0 3
17776: PUSH
17777: LD_EXP 23
17781: GREATEREQUAL
17782: IFFALSE 17793
// begin FinishMission ( yourCrates ) ;
17784: LD_VAR 0 3
17788: PPUSH
17789: CALL 17796 0 1
// end ; end ;
17793: PPOPN 3
17795: END
// export function FinishMission ( crates ) ; begin
17796: LD_INT 0
17798: PPUSH
// if crates + 100 > crates then
17799: LD_VAR 0 1
17803: PUSH
17804: LD_INT 100
17806: PLUS
17807: PUSH
17808: LD_VAR 0 1
17812: GREATER
17813: IFFALSE 17837
// begin AddMedal ( cans , 1 ) ;
17815: LD_STRING cans
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
17825: LD_INT 1
17827: PPUSH
17828: LD_STRING 06_crates_1
17830: PPUSH
17831: CALL_OW 39
// end else
17835: GO 17858
// begin AddMedal ( cans , - 1 ) ;
17837: LD_STRING cans
17839: PPUSH
17840: LD_INT 1
17842: NEG
17843: PPUSH
17844: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
17848: LD_INT 0
17850: PPUSH
17851: LD_STRING 06_crates_1
17853: PPUSH
17854: CALL_OW 39
// end ; if unitLost > 2 then
17858: LD_EXP 27
17862: PUSH
17863: LD_INT 2
17865: GREATER
17866: IFFALSE 17880
// begin AddMedal ( people , 1 ) ;
17868: LD_STRING people
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 101
// end else
17878: GO 17891
// begin AddMedal ( people , - 1 ) ;
17880: LD_STRING people
17882: PPUSH
17883: LD_INT 1
17885: NEG
17886: PPUSH
17887: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
17891: LD_EXP 26
17895: PPUSH
17896: LD_STRING 06_remoteVehs_1
17898: PPUSH
17899: CALL_OW 39
// if remoteVehiclesBuild = 1 then
17903: LD_EXP 26
17907: PUSH
17908: LD_INT 1
17910: EQUAL
17911: IFFALSE 17925
// begin AddMedal ( remote , 1 ) ;
17913: LD_STRING remote
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: CALL_OW 101
// end else
17923: GO 17965
// begin if GetTech ( 18 , 1 ) = state_enabled then
17925: LD_INT 18
17927: PPUSH
17928: LD_INT 1
17930: PPUSH
17931: CALL_OW 321
17935: PUSH
17936: LD_INT 1
17938: EQUAL
17939: IFFALSE 17954
// begin AddMedal ( remote , - 1 ) ;
17941: LD_STRING remote
17943: PPUSH
17944: LD_INT 1
17946: NEG
17947: PPUSH
17948: CALL_OW 101
// end else
17952: GO 17965
// begin AddMedal ( remote , - 2 ) ;
17954: LD_STRING remote
17956: PPUSH
17957: LD_INT 2
17959: NEG
17960: PPUSH
17961: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
17965: LD_EXP 18
17969: PPUSH
17970: LD_STRING 06_KurtStatus_1
17972: PPUSH
17973: CALL_OW 39
// GiveMedals ( Main ) ;
17977: LD_STRING Main
17979: PPUSH
17980: CALL_OW 102
// RewardPeople ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
17984: LD_INT 22
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 21
17996: PUSH
17997: LD_INT 1
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PPUSH
18008: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18012: LD_EXP 1
18016: PPUSH
18017: LD_STRING JMM
18019: PPUSH
18020: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , Lisa ) ;
18024: LD_EXP 2
18028: PPUSH
18029: LD_STRING Lisa
18031: PPUSH
18032: CALL 4623 0 2
// EnchancedSaveCharacters ( Brown , Brown ) ;
18036: LD_EXP 6
18040: PPUSH
18041: LD_STRING Brown
18043: PPUSH
18044: CALL 4623 0 2
// EnchancedSaveCharacters ( Frank , Frank ) ;
18048: LD_EXP 5
18052: PPUSH
18053: LD_STRING Frank
18055: PPUSH
18056: CALL 4623 0 2
// EnchancedSaveCharacters ( Denis , Denis ) ;
18060: LD_EXP 9
18064: PPUSH
18065: LD_STRING Denis
18067: PPUSH
18068: CALL 4623 0 2
// EnchancedSaveCharacters ( Joan , Joan ) ;
18072: LD_EXP 13
18076: PPUSH
18077: LD_STRING Joan
18079: PPUSH
18080: CALL 4623 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
18084: LD_EXP 14
18088: PPUSH
18089: LD_STRING 06_JoanStatus_1
18091: PPUSH
18092: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Lisa , Brown , Frank , Denis , Joan ] , 06_other_survivors ) ;
18096: LD_INT 50
18098: PUSH
18099: EMPTY
18100: LIST
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 21
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: PUSH
18132: LD_EXP 1
18136: PUSH
18137: LD_EXP 2
18141: PUSH
18142: LD_EXP 6
18146: PUSH
18147: LD_EXP 5
18151: PUSH
18152: LD_EXP 9
18156: PUSH
18157: LD_EXP 13
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: DIFF
18170: PPUSH
18171: LD_STRING 06_other_survivors
18173: PPUSH
18174: CALL_OW 38
// YouWin ;
18178: CALL_OW 103
// end ; end_of_file
18182: LD_VAR 0 2
18186: RET
// every 1 1$0 trigger sendedConvoys = [ 4 , 3 , 3 ] [ Difficulty ] do
18187: LD_EXP 34
18191: PUSH
18192: LD_INT 4
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: LD_INT 3
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: LIST
18205: PUSH
18206: LD_OWVAR 67
18210: ARRAY
18211: EQUAL
18212: IFFALSE 18327
18214: GO 18216
18216: DISABLE
// begin enable ;
18217: ENABLE
// sendedConvoys = 0 ;
18218: LD_ADDR_EXP 34
18222: PUSH
18223: LD_INT 0
18225: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
18226: LD_INT 6
18228: PPUSH
18229: LD_INT 3
18231: PPUSH
18232: LD_INT 3
18234: PPUSH
18235: LD_INT 4
18237: PPUSH
18238: CALL_OW 12
18242: PUSH
18243: LD_INT 4
18245: PPUSH
18246: LD_INT 5
18248: PPUSH
18249: CALL_OW 12
18253: PUSH
18254: LD_INT 6
18256: PPUSH
18257: LD_INT 7
18259: PPUSH
18260: CALL_OW 12
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: PUSH
18270: LD_OWVAR 67
18274: ARRAY
18275: PPUSH
18276: LD_INT 0
18278: PPUSH
18279: LD_INT 0
18281: PPUSH
18282: LD_INT 0
18284: PPUSH
18285: LD_INT 3
18287: PPUSH
18288: LD_EXP 31
18292: PPUSH
18293: LD_EXP 32
18297: PPUSH
18298: CALL_OW 12
18302: PPUSH
18303: LD_INT 18
18305: PPUSH
18306: LD_INT 17
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: LD_INT 2
18317: PPUSH
18318: CALL_OW 12
18322: PPUSH
18323: CALL 7989 0 12
// end ; end_of_file
18327: END
// export function PrepareNature ; var i , un ; begin
18328: LD_INT 0
18330: PPUSH
18331: PPUSH
18332: PPUSH
// for i = 1 to Difficulty + 2 do
18333: LD_ADDR_VAR 0 2
18337: PUSH
18338: DOUBLE
18339: LD_INT 1
18341: DEC
18342: ST_TO_ADDR
18343: LD_OWVAR 67
18347: PUSH
18348: LD_INT 2
18350: PLUS
18351: PUSH
18352: FOR_TO
18353: IFFALSE 18488
// begin hc_sex = sex_male ;
18355: LD_ADDR_OWVAR 27
18359: PUSH
18360: LD_INT 1
18362: ST_TO_ADDR
// uc_side = 0 ;
18363: LD_ADDR_OWVAR 20
18367: PUSH
18368: LD_INT 0
18370: ST_TO_ADDR
// uc_nation = nation_nature ;
18371: LD_ADDR_OWVAR 21
18375: PUSH
18376: LD_INT 0
18378: ST_TO_ADDR
// hc_class = class_tiger ;
18379: LD_ADDR_OWVAR 28
18383: PUSH
18384: LD_INT 14
18386: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
18387: LD_ADDR_OWVAR 31
18391: PUSH
18392: LD_EXP 32
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: ST_TO_ADDR
// hc_agressivity = [ rand ( 30 , 40 ) , rand ( 40 , 50 ) , rand ( 50 , 60 ) ] [ Difficulty ] ;
18412: LD_ADDR_OWVAR 35
18416: PUSH
18417: LD_INT 30
18419: PPUSH
18420: LD_INT 40
18422: PPUSH
18423: CALL_OW 12
18427: PUSH
18428: LD_INT 40
18430: PPUSH
18431: LD_INT 50
18433: PPUSH
18434: CALL_OW 12
18438: PUSH
18439: LD_INT 50
18441: PPUSH
18442: LD_INT 60
18444: PPUSH
18445: CALL_OW 12
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: PUSH
18455: LD_OWVAR 67
18459: ARRAY
18460: ST_TO_ADDR
// un = CreateHuman ;
18461: LD_ADDR_VAR 0 3
18465: PUSH
18466: CALL_OW 44
18470: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 20
18478: PPUSH
18479: LD_INT 0
18481: PPUSH
18482: CALL_OW 49
// end ;
18486: GO 18352
18488: POP
18489: POP
// for i = 1 to rand ( 3 , 4 ) do
18490: LD_ADDR_VAR 0 2
18494: PUSH
18495: DOUBLE
18496: LD_INT 1
18498: DEC
18499: ST_TO_ADDR
18500: LD_INT 3
18502: PPUSH
18503: LD_INT 4
18505: PPUSH
18506: CALL_OW 12
18510: PUSH
18511: FOR_TO
18512: IFFALSE 18606
// begin hc_sex = sex_male ;
18514: LD_ADDR_OWVAR 27
18518: PUSH
18519: LD_INT 1
18521: ST_TO_ADDR
// uc_side = 0 ;
18522: LD_ADDR_OWVAR 20
18526: PUSH
18527: LD_INT 0
18529: ST_TO_ADDR
// uc_nation = nation_nature ;
18530: LD_ADDR_OWVAR 21
18534: PUSH
18535: LD_INT 0
18537: ST_TO_ADDR
// hc_class = 18 ;
18538: LD_ADDR_OWVAR 28
18542: PUSH
18543: LD_INT 18
18545: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
18546: LD_ADDR_OWVAR 31
18550: PUSH
18551: LD_EXP 32
18555: PUSH
18556: LD_INT 0
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: LD_INT 0
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: ST_TO_ADDR
// hc_agressivity = 0 ;
18571: LD_ADDR_OWVAR 35
18575: PUSH
18576: LD_INT 0
18578: ST_TO_ADDR
// un = CreateHuman ;
18579: LD_ADDR_VAR 0 3
18583: PUSH
18584: CALL_OW 44
18588: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 20
18596: PPUSH
18597: LD_INT 0
18599: PPUSH
18600: CALL_OW 49
// end ;
18604: GO 18511
18606: POP
18607: POP
// end ;
18608: LD_VAR 0 1
18612: RET
