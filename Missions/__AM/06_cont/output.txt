// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 39
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 40
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 41
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 28
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 19
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 15
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 37
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 23
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 24
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 25
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 38
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 31
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 30
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// russianTanks = [ ] ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 185: LD_ADDR_EXP 36
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// disableHealAI = 0 ;
 192: LD_ADDR_EXP 32
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// strings = [ ] ;
 200: LD_ADDR_EXP 26
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// PrepareDifficulty ;
 207: CALL 5477 0 0
// PrepareNature ;
 211: CALL 20498 0 0
// PrepareRussian ;
 215: CALL 4584 0 0
// PrepareVehicles ;
 219: CALL 1420 0 0
// PrepareHeroes ;
 223: CALL 438 0 0
// PrepareOthers ;
 227: CALL 1681 0 0
// PreparePlayerApemans ;
 231: CALL 1823 0 0
// end ;
 235: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 236: LD_EXP 39
 240: PUSH
 241: LD_INT 1
 243: EQUAL
 244: IFFALSE 435
 246: GO 248
 248: DISABLE
 249: LD_INT 0
 251: PPUSH
// begin enable ;
 252: ENABLE
// fogoff ( true ) ;
 253: LD_INT 1
 255: PPUSH
 256: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 260: LD_ADDR_VAR 0 1
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 21
 277: PUSH
 278: LD_INT 1
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PPUSH
 289: CALL_OW 69
 293: PUSH
 294: FOR_IN
 295: IFFALSE 311
// SetLives ( i , 1000 ) ;
 297: LD_VAR 0 1
 301: PPUSH
 302: LD_INT 1000
 304: PPUSH
 305: CALL_OW 234
 309: GO 294
 311: POP
 312: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 313: LD_ADDR_VAR 0 1
 317: PUSH
 318: LD_INT 22
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: LD_INT 30
 330: PUSH
 331: LD_INT 0
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PPUSH
 342: CALL_OW 69
 346: PUSH
 347: FOR_IN
 348: IFFALSE 372
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 350: LD_VAR 0 1
 354: PPUSH
 355: CALL_OW 274
 359: PPUSH
 360: LD_INT 1
 362: PPUSH
 363: LD_INT 9999
 365: PPUSH
 366: CALL_OW 277
 370: GO 347
 372: POP
 373: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: LD_INT 22
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 30
 391: PUSH
 392: LD_INT 0
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 2
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// end ; end_of_file
 435: PPOPN 1
 437: END
// export function PrepareHeroes ; var veh ; begin
 438: LD_INT 0
 440: PPUSH
 441: PPUSH
// uc_side = 1 ;
 442: LD_ADDR_OWVAR 20
 446: PUSH
 447: LD_INT 1
 449: ST_TO_ADDR
// uc_nation = 1 ;
 450: LD_ADDR_OWVAR 21
 454: PUSH
 455: LD_INT 1
 457: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 458: LD_ADDR_EXP 1
 462: PUSH
 463: LD_STRING JMM
 465: PPUSH
 466: LD_INT 1
 468: PPUSH
 469: CALL 4961 0 2
 473: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 474: LD_ADDR_EXP 13
 478: PUSH
 479: LD_STRING Harisson
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 4961 0 2
 489: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING DeltaDoctor
 497: PPUSH
 498: CALL_OW 34
 502: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: LD_INT 22
 510: PUSH
 511: LD_INT 1
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: PUSH
 518: LD_INT 21
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 58
 530: PUSH
 531: EMPTY
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: PPUSH
 539: CALL_OW 69
 543: ST_TO_ADDR
// if veh > 0 then
 544: LD_VAR 0 2
 548: PUSH
 549: LD_INT 0
 551: GREATER
 552: IFFALSE 574
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 554: LD_EXP 1
 558: PPUSH
 559: LD_VAR 0 2
 563: PUSH
 564: LD_INT 1
 566: ARRAY
 567: PPUSH
 568: CALL_OW 52
// end else
 572: GO 589
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 574: LD_EXP 1
 578: PPUSH
 579: LD_INT 2
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 589: LD_STRING LisaIn06
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: PUSH
 600: LD_INT 1
 602: EQUAL
 603: IFFALSE 707
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 2
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 58
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 646: LD_ADDR_EXP 2
 650: PUSH
 651: LD_STRING Lisa
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 4961 0 2
 661: ST_TO_ADDR
// if veh > 0 then
 662: LD_VAR 0 2
 666: PUSH
 667: LD_INT 0
 669: GREATER
 670: IFFALSE 692
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 672: LD_EXP 2
 676: PPUSH
 677: LD_VAR 0 2
 681: PUSH
 682: LD_INT 1
 684: ARRAY
 685: PPUSH
 686: CALL_OW 52
// end else
 690: GO 707
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 692: LD_EXP 2
 696: PPUSH
 697: LD_INT 2
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 707: LD_STRING BobbyIn06
 709: PPUSH
 710: LD_INT 0
 712: PPUSH
 713: CALL_OW 30
 717: PUSH
 718: LD_INT 1
 720: EQUAL
 721: IFFALSE 825
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 723: LD_ADDR_VAR 0 2
 727: PUSH
 728: LD_INT 22
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 21
 740: PUSH
 741: LD_INT 2
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PUSH
 748: LD_INT 58
 750: PUSH
 751: EMPTY
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL_OW 69
 763: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 764: LD_ADDR_EXP 3
 768: PUSH
 769: LD_STRING Bobby
 771: PPUSH
 772: LD_INT 1
 774: PPUSH
 775: CALL 4961 0 2
 779: ST_TO_ADDR
// if veh > 0 then
 780: LD_VAR 0 2
 784: PUSH
 785: LD_INT 0
 787: GREATER
 788: IFFALSE 810
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_VAR 0 2
 799: PUSH
 800: LD_INT 1
 802: ARRAY
 803: PPUSH
 804: CALL_OW 52
// end else
 808: GO 825
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 810: LD_EXP 3
 814: PPUSH
 815: LD_INT 2
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 825: LD_STRING CyrusIn06
 827: PPUSH
 828: LD_INT 0
 830: PPUSH
 831: CALL_OW 30
 835: PUSH
 836: LD_INT 1
 838: EQUAL
 839: IFFALSE 943
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_INT 22
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 21
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: LD_INT 58
 868: PUSH
 869: EMPTY
 870: LIST
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 69
 881: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 882: LD_ADDR_EXP 4
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL 4961 0 2
 897: ST_TO_ADDR
// if veh > 0 then
 898: LD_VAR 0 2
 902: PUSH
 903: LD_INT 0
 905: GREATER
 906: IFFALSE 928
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 908: LD_EXP 4
 912: PPUSH
 913: LD_VAR 0 2
 917: PUSH
 918: LD_INT 1
 920: ARRAY
 921: PPUSH
 922: CALL_OW 52
// end else
 926: GO 943
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 928: LD_EXP 4
 932: PPUSH
 933: LD_INT 2
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 943: LD_STRING FrankIn06
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 30
 953: PUSH
 954: LD_INT 1
 956: EQUAL
 957: IFFALSE 1061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 959: LD_ADDR_VAR 0 2
 963: PUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1000: LD_ADDR_EXP 5
1004: PUSH
1005: LD_STRING Frank
1007: PPUSH
1008: LD_INT 1
1010: PPUSH
1011: CALL 4961 0 2
1015: ST_TO_ADDR
// if veh > 0 then
1016: LD_VAR 0 2
1020: PUSH
1021: LD_INT 0
1023: GREATER
1024: IFFALSE 1046
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1026: LD_EXP 5
1030: PPUSH
1031: LD_VAR 0 2
1035: PUSH
1036: LD_INT 1
1038: ARRAY
1039: PPUSH
1040: CALL_OW 52
// end else
1044: GO 1061
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1046: LD_EXP 5
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1061: LD_STRING BrownIn06
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: CALL_OW 30
1071: PUSH
1072: LD_INT 1
1074: EQUAL
1075: IFFALSE 1179
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1077: LD_ADDR_VAR 0 2
1081: PUSH
1082: LD_INT 22
1084: PUSH
1085: LD_INT 1
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 21
1094: PUSH
1095: LD_INT 2
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 58
1104: PUSH
1105: EMPTY
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PPUSH
1113: CALL_OW 69
1117: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1118: LD_ADDR_EXP 6
1122: PUSH
1123: LD_STRING Brown
1125: PPUSH
1126: LD_INT 1
1128: PPUSH
1129: CALL 4961 0 2
1133: ST_TO_ADDR
// if veh > 0 then
1134: LD_VAR 0 2
1138: PUSH
1139: LD_INT 0
1141: GREATER
1142: IFFALSE 1164
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1144: LD_EXP 6
1148: PPUSH
1149: LD_VAR 0 2
1153: PUSH
1154: LD_INT 1
1156: ARRAY
1157: PPUSH
1158: CALL_OW 52
// end else
1162: GO 1179
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1164: LD_EXP 6
1168: PPUSH
1169: LD_INT 2
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1179: LD_STRING DonaldsonIn06
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 30
1189: PUSH
1190: LD_INT 1
1192: EQUAL
1193: IFFALSE 1297
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 21
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 58
1222: PUSH
1223: EMPTY
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 69
1235: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1236: LD_ADDR_EXP 7
1240: PUSH
1241: LD_STRING Donaldson
1243: PPUSH
1244: LD_INT 1
1246: PPUSH
1247: CALL 4961 0 2
1251: ST_TO_ADDR
// if veh > 0 then
1252: LD_VAR 0 2
1256: PUSH
1257: LD_INT 0
1259: GREATER
1260: IFFALSE 1282
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1262: LD_EXP 7
1266: PPUSH
1267: LD_VAR 0 2
1271: PUSH
1272: LD_INT 1
1274: ARRAY
1275: PPUSH
1276: CALL_OW 52
// end else
1280: GO 1297
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1282: LD_EXP 7
1286: PPUSH
1287: LD_INT 2
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1297: LD_STRING GladstoneIn06
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 30
1307: PUSH
1308: LD_INT 1
1310: EQUAL
1311: IFFALSE 1415
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1313: LD_ADDR_VAR 0 2
1317: PUSH
1318: LD_INT 22
1320: PUSH
1321: LD_INT 1
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 21
1330: PUSH
1331: LD_INT 2
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 58
1340: PUSH
1341: EMPTY
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PPUSH
1349: CALL_OW 69
1353: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1354: LD_ADDR_EXP 8
1358: PUSH
1359: LD_STRING Gladstone
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: CALL 4961 0 2
1369: ST_TO_ADDR
// if veh > 0 then
1370: LD_VAR 0 2
1374: PUSH
1375: LD_INT 0
1377: GREATER
1378: IFFALSE 1400
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1380: LD_EXP 8
1384: PPUSH
1385: LD_VAR 0 2
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// end else
1398: GO 1415
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_INT 2
1407: PPUSH
1408: LD_INT 0
1410: PPUSH
1411: CALL_OW 49
// end ; end ; end ;
1415: LD_VAR 0 1
1419: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1420: LD_INT 0
1422: PPUSH
1423: PPUSH
1424: PPUSH
1425: PPUSH
1426: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1427: LD_ADDR_VAR 0 5
1431: PUSH
1432: LD_STRING 06_VehiclesIn06_1
1434: PPUSH
1435: EMPTY
1436: PPUSH
1437: CALL_OW 30
1441: ST_TO_ADDR
// uc_side = 1 ;
1442: LD_ADDR_OWVAR 20
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// if vehicles > 0 then
1450: LD_VAR 0 5
1454: PUSH
1455: LD_INT 0
1457: GREATER
1458: IFFALSE 1676
// begin for i := 1 to vehicles do
1460: LD_ADDR_VAR 0 2
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 5
1474: PUSH
1475: FOR_TO
1476: IFFALSE 1674
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_VAR 0 5
1487: PUSH
1488: LD_VAR 0 2
1492: ARRAY
1493: PUSH
1494: LD_INT 1
1496: ARRAY
1497: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_VAR 0 5
1507: PUSH
1508: LD_VAR 0 2
1512: ARRAY
1513: PUSH
1514: LD_INT 2
1516: ARRAY
1517: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_VAR 0 5
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 3
1536: ARRAY
1537: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1538: LD_ADDR_OWVAR 38
1542: PUSH
1543: LD_VAR 0 5
1547: PUSH
1548: LD_VAR 0 2
1552: ARRAY
1553: PUSH
1554: LD_INT 4
1556: ARRAY
1557: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1558: LD_ADDR_OWVAR 40
1562: PUSH
1563: LD_VAR 0 5
1567: PUSH
1568: LD_VAR 0 2
1572: ARRAY
1573: PUSH
1574: LD_INT 5
1576: ARRAY
1577: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1578: LD_ADDR_OWVAR 41
1582: PUSH
1583: LD_INT 40
1585: ST_TO_ADDR
// veh = CreateVehicle ;
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: CALL_OW 45
1595: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1596: LD_VAR 0 4
1600: PPUSH
1601: LD_INT 3
1603: PPUSH
1604: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1608: LD_VAR 0 4
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1623: LD_OWVAR 40
1627: PUSH
1628: LD_INT 12
1630: EQUAL
1631: IFFALSE 1672
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1633: LD_VAR 0 4
1637: PPUSH
1638: LD_VAR 0 5
1642: PUSH
1643: LD_VAR 0 2
1647: ARRAY
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 7
1666: ARRAY
1667: PPUSH
1668: CALL_OW 291
// end ;
1672: GO 1475
1674: POP
1675: POP
// end ; end ;
1676: LD_VAR 0 1
1680: RET
// export function PrepareOthers ; var i , veh ; begin
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
// uc_side = 1 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 1
1693: ST_TO_ADDR
// uc_nation = 1 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 1
1701: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1702: LD_ADDR_EXP 11
1706: PUSH
1707: LD_STRING OthersIn06
1709: PPUSH
1710: CALL_OW 31
1714: ST_TO_ADDR
// for i in others do
1715: LD_ADDR_VAR 0 2
1719: PUSH
1720: LD_EXP 11
1724: PUSH
1725: FOR_IN
1726: IFFALSE 1816
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1728: LD_ADDR_VAR 0 3
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 21
1745: PUSH
1746: LD_INT 2
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 58
1755: PUSH
1756: EMPTY
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 69
1768: ST_TO_ADDR
// if veh > 0 then
1769: LD_VAR 0 3
1773: PUSH
1774: LD_INT 0
1776: GREATER
1777: IFFALSE 1799
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1779: LD_VAR 0 2
1783: PPUSH
1784: LD_VAR 0 3
1788: PUSH
1789: LD_INT 1
1791: ARRAY
1792: PPUSH
1793: CALL_OW 52
// end else
1797: GO 1814
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1799: LD_VAR 0 2
1803: PPUSH
1804: LD_INT 2
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// end ; end ;
1814: GO 1725
1816: POP
1817: POP
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
// uc_side = 1 ;
1828: LD_ADDR_OWVAR 20
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// uc_nation = 0 ;
1836: LD_ADDR_OWVAR 21
1840: PUSH
1841: LD_INT 0
1843: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1844: LD_ADDR_EXP 12
1848: PUSH
1849: LD_STRING ApeIn06
1851: PPUSH
1852: CALL_OW 31
1856: ST_TO_ADDR
// for i in ape do
1857: LD_ADDR_VAR 0 2
1861: PUSH
1862: LD_EXP 12
1866: PUSH
1867: FOR_IN
1868: IFFALSE 1887
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1870: LD_VAR 0 2
1874: PPUSH
1875: LD_INT 2
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
1885: GO 1867
1887: POP
1888: POP
// end ;
1889: LD_VAR 0 1
1893: RET
// export function PrepareDenis ; begin
1894: LD_INT 0
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1913: LD_ADDR_EXP 9
1917: PUSH
1918: LD_STRING Denis
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: CALL 4961 0 2
1928: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1929: LD_EXP 9
1933: PPUSH
1934: LD_INT 13
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1944: LD_EXP 9
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1956: LD_EXP 9
1960: PPUSH
1961: LD_INT 750
1963: PPUSH
1964: CALL_OW 234
// end ;
1968: LD_VAR 0 1
1972: RET
// export function HarrisonSupport ; var un , veh ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// uc_nation = 1 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 1
1993: ST_TO_ADDR
// vc_engine = 1 ;
1994: LD_ADDR_OWVAR 39
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_control = 1 ;
2002: LD_ADDR_OWVAR 38
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2010: LD_ADDR_OWVAR 40
2014: PUSH
2015: LD_INT 4
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_OWVAR 67
2033: ARRAY
2034: ST_TO_ADDR
// vc_chassis = 2 ;
2035: LD_ADDR_OWVAR 37
2039: PUSH
2040: LD_INT 2
2042: ST_TO_ADDR
// veh = CreateVehicle ;
2043: LD_ADDR_VAR 0 3
2047: PUSH
2048: CALL_OW 45
2052: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2053: LD_VAR 0 3
2057: PPUSH
2058: LD_INT 2
2060: PPUSH
2061: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: LD_INT 0
2075: PPUSH
2076: CALL_OW 49
// hc_class := 2 ;
2080: LD_ADDR_OWVAR 28
2084: PUSH
2085: LD_INT 2
2087: ST_TO_ADDR
// hc_sex := sex_male ;
2088: LD_ADDR_OWVAR 27
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2096: LD_ADDR_OWVAR 33
2100: PUSH
2101: LD_STRING SecondCharsGal
2103: ST_TO_ADDR
// hc_face_number := 52 ;
2104: LD_ADDR_OWVAR 34
2108: PUSH
2109: LD_INT 52
2111: ST_TO_ADDR
// hc_name := Craig Brown ;
2112: LD_ADDR_OWVAR 26
2116: PUSH
2117: LD_STRING Craig Brown
2119: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2120: LD_ADDR_OWVAR 29
2124: PUSH
2125: LD_INT 10
2127: PUSH
2128: LD_INT 10
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2135: LD_ADDR_OWVAR 30
2139: PUSH
2140: LD_INT 0
2142: PUSH
2143: LD_INT 2
2145: PUSH
2146: LD_INT 0
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2158: LD_ADDR_OWVAR 31
2162: PUSH
2163: LD_INT 2
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: LD_INT 0
2171: PUSH
2172: LD_INT 0
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2181: LD_ADDR_EXP 16
2185: PUSH
2186: CALL_OW 44
2190: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2191: LD_EXP 16
2195: PPUSH
2196: LD_VAR 0 3
2200: PPUSH
2201: CALL_OW 52
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 2
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 1 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// hc_sex := sex_female ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 2
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 45 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 45
2334: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2335: LD_ADDR_OWVAR 29
2339: PUSH
2340: LD_INT 11
2342: PUSH
2343: LD_INT 10
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2350: LD_ADDR_OWVAR 26
2354: PUSH
2355: LD_STRING Ingrid Jonsson
2357: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 3
2388: PUSH
2389: LD_INT 1
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2428: LD_VAR 0 3
2432: PPUSH
2433: LD_INT 45
2435: PPUSH
2436: CALL_OW 240
// end ;
2440: LD_VAR 0 1
2444: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2445: LD_INT 0
2447: PPUSH
2448: PPUSH
2449: PPUSH
2450: PPUSH
2451: PPUSH
// j = 0 ;
2452: LD_ADDR_VAR 0 3
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2460: LD_INT 35
2462: PPUSH
2463: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2467: LD_ADDR_VAR 0 2
2471: PUSH
2472: LD_INT 22
2474: PUSH
2475: LD_INT 1
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 21
2484: PUSH
2485: LD_INT 1
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 2
2494: PUSH
2495: LD_INT 25
2497: PUSH
2498: LD_INT 1
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 25
2507: PUSH
2508: LD_INT 2
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 25
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 4
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PPUSH
2547: CALL_OW 69
2551: PUSH
2552: FOR_IN
2553: IFFALSE 2679
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2555: LD_INT 22
2557: PUSH
2558: LD_INT 3
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 2
2567: PUSH
2568: LD_INT 21
2570: PUSH
2571: LD_INT 1
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: LD_INT 21
2580: PUSH
2581: LD_INT 2
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 21
2590: PUSH
2591: LD_INT 3
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PUSH
2598: LD_INT 59
2600: PUSH
2601: EMPTY
2602: LIST
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 91
2613: PUSH
2614: LD_VAR 0 2
2618: PUSH
2619: LD_INT 25
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: PPUSH
2632: CALL_OW 69
2636: NOT
2637: PUSH
2638: LD_VAR 0 2
2642: PPUSH
2643: LD_EXP 1
2647: PPUSH
2648: CALL_OW 296
2652: PUSH
2653: LD_INT 15
2655: LESS
2656: AND
2657: IFFALSE 2677
// begin tmp = i ;
2659: LD_ADDR_VAR 0 4
2663: PUSH
2664: LD_VAR 0 2
2668: ST_TO_ADDR
// j = 1 ;
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: LD_INT 1
2676: ST_TO_ADDR
// end ; end ;
2677: GO 2552
2679: POP
2680: POP
// until j = 1 ;
2681: LD_VAR 0 3
2685: PUSH
2686: LD_INT 1
2688: EQUAL
2689: IFFALSE 2460
// blockSpawn = 1 ;
2691: LD_ADDR_EXP 28
2695: PUSH
2696: LD_INT 1
2698: ST_TO_ADDR
// uc_side = 4 ;
2699: LD_ADDR_OWVAR 20
2703: PUSH
2704: LD_INT 4
2706: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2707: LD_ADDR_EXP 14
2711: PUSH
2712: LD_STRING Joan
2714: PPUSH
2715: LD_INT 0
2717: PPUSH
2718: CALL 4961 0 2
2722: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2723: LD_EXP 14
2727: PPUSH
2728: LD_VAR 0 4
2732: PPUSH
2733: CALL_OW 250
2737: PPUSH
2738: LD_VAR 0 4
2742: PPUSH
2743: CALL_OW 251
2747: PPUSH
2748: LD_INT 5
2750: PPUSH
2751: LD_INT 1
2753: PPUSH
2754: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2758: LD_EXP 14
2762: PPUSH
2763: LD_INT 250
2765: PPUSH
2766: CALL_OW 234
// InGameOn ;
2770: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2774: LD_EXP 14
2778: PPUSH
2779: CALL_OW 87
// wait ( 0 0$2 ) ;
2783: LD_INT 70
2785: PPUSH
2786: CALL_OW 67
// ComExitVehicle ( tmp ) ;
2790: LD_VAR 0 4
2794: PPUSH
2795: CALL_OW 121
// ComExitBuilding ( tmp ) ;
2799: LD_VAR 0 4
2803: PPUSH
2804: CALL_OW 122
// wait ( 0 0$1 ) ;
2808: LD_INT 35
2810: PPUSH
2811: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
2815: LD_VAR 0 4
2819: PPUSH
2820: LD_EXP 14
2824: PPUSH
2825: CALL_OW 112
// wait ( 0 0$2 ) ;
2829: LD_INT 70
2831: PPUSH
2832: CALL_OW 67
// DialogueOn ;
2836: CALL_OW 6
// if tmp = JMM then
2840: LD_VAR 0 4
2844: PUSH
2845: LD_EXP 1
2849: EQUAL
2850: IFFALSE 2999
// begin ComTurnUnit ( JMM , Joan ) ;
2852: LD_EXP 1
2856: PPUSH
2857: LD_EXP 14
2861: PPUSH
2862: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
2866: LD_EXP 1
2870: PPUSH
2871: LD_STRING D5b-JMM-1
2873: PPUSH
2874: CALL_OW 88
// DialogueOff ;
2878: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2882: LD_EXP 14
2886: PPUSH
2887: LD_INT 500
2889: PPUSH
2890: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2894: LD_EXP 14
2898: PPUSH
2899: LD_EXP 1
2903: PPUSH
2904: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2908: LD_EXP 1
2912: PPUSH
2913: LD_EXP 14
2917: PPUSH
2918: CALL_OW 119
// wait ( 0 0$1 ) ;
2922: LD_INT 35
2924: PPUSH
2925: CALL_OW 67
// DialogueOn ;
2929: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
2933: LD_EXP 14
2937: PPUSH
2938: LD_STRING D5b-Joan-1
2940: PPUSH
2941: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2945: LD_EXP 1
2949: PPUSH
2950: LD_STRING D5b-JMM-2
2952: PPUSH
2953: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2957: LD_EXP 14
2961: PPUSH
2962: LD_STRING D5b-Joan-2
2964: PPUSH
2965: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2969: LD_EXP 1
2973: PPUSH
2974: LD_STRING D5b-JMM-3
2976: PPUSH
2977: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2981: LD_EXP 14
2985: PPUSH
2986: LD_STRING D5b-Joan-3
2988: PPUSH
2989: CALL_OW 88
// DialogueOff ;
2993: CALL_OW 7
// end else
2997: GO 3334
// begin ComTurnUnit ( tmp , Joan ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: LD_EXP 14
3008: PPUSH
3009: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3013: LD_VAR 0 4
3017: PPUSH
3018: LD_STRING D5a-Sol1-1
3020: PPUSH
3021: CALL_OW 88
// DialogueOff ;
3025: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3029: LD_EXP 14
3033: PPUSH
3034: LD_INT 500
3036: PPUSH
3037: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3041: LD_EXP 14
3045: PPUSH
3046: LD_VAR 0 4
3050: PPUSH
3051: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3055: LD_VAR 0 4
3059: PPUSH
3060: LD_EXP 14
3064: PPUSH
3065: CALL_OW 119
// wait ( 0 0$1 ) ;
3069: LD_INT 35
3071: PPUSH
3072: CALL_OW 67
// DialogueOn ;
3076: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3080: LD_EXP 14
3084: PPUSH
3085: LD_STRING D5a-Joan-1
3087: PPUSH
3088: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_STRING D5a-Sol1-2
3099: PPUSH
3100: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3104: LD_EXP 14
3108: PPUSH
3109: LD_STRING D5a-Joan-2
3111: PPUSH
3112: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3116: LD_VAR 0 4
3120: PPUSH
3121: LD_STRING D5a-Sol1-3
3123: PPUSH
3124: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3128: LD_EXP 14
3132: PPUSH
3133: LD_STRING D5a-Joan-3
3135: PPUSH
3136: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3140: LD_VAR 0 4
3144: PPUSH
3145: LD_STRING D5a-Sol1-4
3147: PPUSH
3148: CALL_OW 88
// DialogueOff ;
3152: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3156: LD_EXP 1
3160: PPUSH
3161: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3165: LD_EXP 1
3169: PPUSH
3170: CALL_OW 122
// wait ( 0 0$1 ) ;
3174: LD_INT 35
3176: PPUSH
3177: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3181: LD_INT 35
3183: PPUSH
3184: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3188: LD_EXP 14
3192: PUSH
3193: LD_VAR 0 4
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PPUSH
3202: LD_EXP 1
3206: PPUSH
3207: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3211: LD_EXP 14
3215: PPUSH
3216: LD_EXP 1
3220: PPUSH
3221: CALL_OW 296
3225: PUSH
3226: LD_INT 5
3228: LESS
3229: IFFALSE 3181
// ComTurnUnit ( Joan , JMM ) ;
3231: LD_EXP 14
3235: PPUSH
3236: LD_EXP 1
3240: PPUSH
3241: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3245: LD_EXP 1
3249: PPUSH
3250: LD_EXP 14
3254: PPUSH
3255: CALL_OW 119
// wait ( 0 0$1 ) ;
3259: LD_INT 35
3261: PPUSH
3262: CALL_OW 67
// DialogueOn ;
3266: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3270: LD_EXP 14
3274: PPUSH
3275: LD_STRING D5a-Joan-4
3277: PPUSH
3278: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3282: LD_EXP 1
3286: PPUSH
3287: LD_STRING D5a-JMM-4
3289: PPUSH
3290: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3294: LD_EXP 14
3298: PPUSH
3299: LD_STRING D5a-Joan-5
3301: PPUSH
3302: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_STRING D5a-JMM-5
3313: PPUSH
3314: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3318: LD_EXP 14
3322: PPUSH
3323: LD_STRING D5a-Joan-6
3325: PPUSH
3326: CALL_OW 88
// DialogueOff ;
3330: CALL_OW 7
// end ; DialogueOn ;
3334: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3338: LD_EXP 1
3342: PPUSH
3343: LD_STRING D6-JMM-1
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3350: LD_EXP 14
3354: PPUSH
3355: LD_STRING D6-Joan-1
3357: PPUSH
3358: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3362: LD_EXP 1
3366: PPUSH
3367: LD_STRING D6-JMM-2
3369: PPUSH
3370: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3374: LD_EXP 14
3378: PPUSH
3379: LD_STRING D6-Joan-2
3381: PPUSH
3382: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3386: LD_EXP 1
3390: PPUSH
3391: LD_STRING D6-JMM-3
3393: PPUSH
3394: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3398: LD_EXP 14
3402: PPUSH
3403: LD_STRING D6-Joan-3
3405: PPUSH
3406: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3410: LD_EXP 1
3414: PPUSH
3415: LD_STRING D6-JMM-4
3417: PPUSH
3418: CALL_OW 88
// DialogueOff ;
3422: CALL_OW 7
// InGameOff ;
3426: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3430: LD_EXP 14
3434: PPUSH
3435: LD_INT 1
3437: PPUSH
3438: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3442: LD_STRING MJ
3444: PPUSH
3445: CALL_OW 337
// JoanStatus = 1 ;
3449: LD_ADDR_EXP 15
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// blockSpawn = 0 ;
3457: LD_ADDR_EXP 28
3461: PUSH
3462: LD_INT 0
3464: ST_TO_ADDR
// end ;
3465: LD_VAR 0 1
3469: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3470: LD_INT 0
3472: PPUSH
3473: PPUSH
// repeat wait ( 0 0$7 ) ;
3474: LD_INT 245
3476: PPUSH
3477: CALL_OW 67
// until blockSpawn = 0 ;
3481: LD_EXP 28
3485: PUSH
3486: LD_INT 0
3488: EQUAL
3489: IFFALSE 3474
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = 1 ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// InitHc ;
3507: CALL_OW 19
// if number = 1 then
3511: LD_VAR 0 1
3515: PUSH
3516: LD_INT 1
3518: EQUAL
3519: IFFALSE 3695
// begin hc_class := 1 ;
3521: LD_ADDR_OWVAR 28
3525: PUSH
3526: LD_INT 1
3528: ST_TO_ADDR
// hc_sex := sex_male ;
3529: LD_ADDR_OWVAR 27
3533: PUSH
3534: LD_INT 1
3536: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3537: LD_ADDR_OWVAR 33
3541: PUSH
3542: LD_STRING AmGalRemake
3544: ST_TO_ADDR
// hc_face_number := 7 ;
3545: LD_ADDR_OWVAR 34
3549: PUSH
3550: LD_INT 7
3552: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING Bobby Jordan
3560: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3561: LD_ADDR_OWVAR 29
3565: PUSH
3566: LD_INT 9
3568: PUSH
3569: LD_INT 11
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3576: LD_ADDR_OWVAR 30
3580: PUSH
3581: LD_INT 1
3583: PUSH
3584: LD_INT 0
3586: PUSH
3587: LD_INT 0
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3599: LD_ADDR_OWVAR 31
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: LD_INT 1
3609: PUSH
3610: LD_INT 1
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: ST_TO_ADDR
// un = CreateHuman ;
3622: LD_ADDR_VAR 0 3
3626: PUSH
3627: CALL_OW 44
3631: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3632: LD_VAR 0 3
3636: PPUSH
3637: LD_INT 12
3639: PPUSH
3640: LD_INT 1
3642: PPUSH
3643: CALL_OW 49
// wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: CALL_OW 87
// DialogueOn ;
3663: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3667: LD_VAR 0 3
3671: PPUSH
3672: LD_STRING D11b-Sol3-1
3674: PPUSH
3675: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3679: LD_EXP 1
3683: PPUSH
3684: LD_STRING D11b-JMM-1
3686: PPUSH
3687: CALL_OW 88
// DialogueOff ;
3691: CALL_OW 7
// end ; if number = 2 then
3695: LD_VAR 0 1
3699: PUSH
3700: LD_INT 2
3702: EQUAL
3703: IFFALSE 3879
// begin hc_class := 3 ;
3705: LD_ADDR_OWVAR 28
3709: PUSH
3710: LD_INT 3
3712: ST_TO_ADDR
// hc_sex := sex_male ;
3713: LD_ADDR_OWVAR 27
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3721: LD_ADDR_OWVAR 33
3725: PUSH
3726: LD_STRING SecondCharsGal
3728: ST_TO_ADDR
// hc_face_number := 55 ;
3729: LD_ADDR_OWVAR 34
3733: PUSH
3734: LD_INT 55
3736: ST_TO_ADDR
// hc_name := George McCarthy ;
3737: LD_ADDR_OWVAR 26
3741: PUSH
3742: LD_STRING George McCarthy
3744: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3745: LD_ADDR_OWVAR 29
3749: PUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 10
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3760: LD_ADDR_OWVAR 30
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: LD_INT 0
3770: PUSH
3771: LD_INT 2
3773: PUSH
3774: LD_INT 0
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3783: LD_ADDR_OWVAR 31
3787: PUSH
3788: LD_INT 1
3790: PUSH
3791: LD_INT 2
3793: PUSH
3794: LD_INT 3
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: ST_TO_ADDR
// un = CreateHuman ;
3806: LD_ADDR_VAR 0 3
3810: PUSH
3811: CALL_OW 44
3815: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3816: LD_VAR 0 3
3820: PPUSH
3821: LD_INT 12
3823: PPUSH
3824: LD_INT 1
3826: PPUSH
3827: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3831: LD_VAR 0 3
3835: PPUSH
3836: CALL_OW 87
// wait ( 0 0$1 ) ;
3840: LD_INT 35
3842: PPUSH
3843: CALL_OW 67
// DialogueOn ;
3847: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3851: LD_VAR 0 3
3855: PPUSH
3856: LD_STRING D11d-Sol4-1
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING D11d-JMM-1
3870: PPUSH
3871: CALL_OW 88
// DialogueOff ;
3875: CALL_OW 7
// end ; if number = 4 then
3879: LD_VAR 0 1
3883: PUSH
3884: LD_INT 4
3886: EQUAL
3887: IFFALSE 4051
// begin hc_class := 3 ;
3889: LD_ADDR_OWVAR 28
3893: PUSH
3894: LD_INT 3
3896: ST_TO_ADDR
// hc_sex := sex_female ;
3897: LD_ADDR_OWVAR 27
3901: PUSH
3902: LD_INT 2
3904: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3905: LD_ADDR_OWVAR 33
3909: PUSH
3910: LD_STRING SecondCharsGal
3912: ST_TO_ADDR
// hc_face_number := 46 ;
3913: LD_ADDR_OWVAR 34
3917: PUSH
3918: LD_INT 46
3920: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3921: LD_ADDR_OWVAR 26
3925: PUSH
3926: LD_STRING Sylvia Creak
3928: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
3929: LD_ADDR_OWVAR 29
3933: PUSH
3934: LD_INT 10
3936: PUSH
3937: LD_INT 9
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
3944: LD_ADDR_OWVAR 30
3948: PUSH
3949: LD_INT 0
3951: PUSH
3952: LD_INT 1
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 1
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3967: LD_ADDR_OWVAR 31
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: ST_TO_ADDR
// un = CreateHuman ;
3990: LD_ADDR_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4000: LD_VAR 0 3
4004: PPUSH
4005: LD_INT 12
4007: PPUSH
4008: LD_INT 1
4010: PPUSH
4011: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4015: LD_VAR 0 3
4019: PPUSH
4020: CALL_OW 87
// wait ( 0 0$1 ) ;
4024: LD_INT 35
4026: PPUSH
4027: CALL_OW 67
// DialogueOn ;
4031: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4035: LD_VAR 0 3
4039: PPUSH
4040: LD_STRING D11e-FSol4-1
4042: PPUSH
4043: CALL_OW 88
// DialogueOff ;
4047: CALL_OW 7
// end ; if number = 5 then
4051: LD_VAR 0 1
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: IFFALSE 4235
// begin hc_class := 1 ;
4061: LD_ADDR_OWVAR 28
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// hc_sex := sex_female ;
4069: LD_ADDR_OWVAR 27
4073: PUSH
4074: LD_INT 2
4076: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4077: LD_ADDR_OWVAR 33
4081: PUSH
4082: LD_STRING SecondCharsGal
4084: ST_TO_ADDR
// hc_face_number := 37 ;
4085: LD_ADDR_OWVAR 34
4089: PUSH
4090: LD_INT 37
4092: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4093: LD_ADDR_OWVAR 26
4097: PUSH
4098: LD_STRING Margherite Simpson
4100: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4101: LD_ADDR_OWVAR 29
4105: PUSH
4106: LD_INT 11
4108: PUSH
4109: LD_INT 10
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4116: LD_ADDR_OWVAR 30
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 0
4129: PUSH
4130: LD_INT 0
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4139: LD_ADDR_OWVAR 31
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: LD_INT 1
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: ST_TO_ADDR
// un = CreateHuman ;
4162: LD_ADDR_VAR 0 3
4166: PUSH
4167: CALL_OW 44
4171: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4172: LD_VAR 0 3
4176: PPUSH
4177: LD_INT 12
4179: PPUSH
4180: LD_INT 1
4182: PPUSH
4183: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4187: LD_VAR 0 3
4191: PPUSH
4192: CALL_OW 87
// wait ( 0 0$1 ) ;
4196: LD_INT 35
4198: PPUSH
4199: CALL_OW 67
// DialogueOn ;
4203: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4207: LD_VAR 0 3
4211: PPUSH
4212: LD_STRING D11c-FSol3-1
4214: PPUSH
4215: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4219: LD_EXP 1
4223: PPUSH
4224: LD_STRING D11c-JMM-1
4226: PPUSH
4227: CALL_OW 88
// DialogueOff ;
4231: CALL_OW 7
// end ; if number = 6 then
4235: LD_VAR 0 1
4239: PUSH
4240: LD_INT 6
4242: EQUAL
4243: IFFALSE 4407
// begin hc_class := 1 ;
4245: LD_ADDR_OWVAR 28
4249: PUSH
4250: LD_INT 1
4252: ST_TO_ADDR
// hc_sex := sex_male ;
4253: LD_ADDR_OWVAR 27
4257: PUSH
4258: LD_INT 1
4260: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4261: LD_ADDR_OWVAR 33
4265: PUSH
4266: LD_STRING AmGalRemake
4268: ST_TO_ADDR
// hc_face_number := 1 ;
4269: LD_ADDR_OWVAR 34
4273: PUSH
4274: LD_INT 1
4276: ST_TO_ADDR
// hc_name := Charles Brown ;
4277: LD_ADDR_OWVAR 26
4281: PUSH
4282: LD_STRING Charles Brown
4284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4285: LD_ADDR_OWVAR 29
4289: PUSH
4290: LD_INT 12
4292: PUSH
4293: LD_INT 11
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4300: LD_ADDR_OWVAR 30
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
4323: LD_ADDR_OWVAR 31
4327: PUSH
4328: LD_INT 2
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: ST_TO_ADDR
// un = CreateHuman ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 12
4363: PPUSH
4364: LD_INT 1
4366: PPUSH
4367: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4371: LD_VAR 0 3
4375: PPUSH
4376: CALL_OW 87
// wait ( 0 0$1 ) ;
4380: LD_INT 35
4382: PPUSH
4383: CALL_OW 67
// DialogueOn ;
4387: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4391: LD_VAR 0 3
4395: PPUSH
4396: LD_STRING D11f-Sol5-1
4398: PPUSH
4399: CALL_OW 88
// DialogueOff ;
4403: CALL_OW 7
// end ; if number = 7 then
4407: LD_VAR 0 1
4411: PUSH
4412: LD_INT 7
4414: EQUAL
4415: IFFALSE 4579
// begin hc_class := 1 ;
4417: LD_ADDR_OWVAR 28
4421: PUSH
4422: LD_INT 1
4424: ST_TO_ADDR
// hc_sex := sex_female ;
4425: LD_ADDR_OWVAR 27
4429: PUSH
4430: LD_INT 2
4432: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4433: LD_ADDR_OWVAR 33
4437: PUSH
4438: LD_STRING AmGalRemake
4440: ST_TO_ADDR
// hc_face_number := 2 ;
4441: LD_ADDR_OWVAR 34
4445: PUSH
4446: LD_INT 2
4448: ST_TO_ADDR
// hc_name := Johanna Holland ;
4449: LD_ADDR_OWVAR 26
4453: PUSH
4454: LD_STRING Johanna Holland
4456: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4457: LD_ADDR_OWVAR 29
4461: PUSH
4462: LD_INT 10
4464: PUSH
4465: LD_INT 10
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4472: LD_ADDR_OWVAR 30
4476: PUSH
4477: LD_INT 1
4479: PUSH
4480: LD_INT 0
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4495: LD_ADDR_OWVAR 31
4499: PUSH
4500: LD_INT 1
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: ST_TO_ADDR
// un = CreateHuman ;
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: CALL_OW 44
4527: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4528: LD_VAR 0 3
4532: PPUSH
4533: LD_INT 12
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: CALL_OW 87
// wait ( 0 0$1 ) ;
4552: LD_INT 35
4554: PPUSH
4555: CALL_OW 67
// DialogueOn ;
4559: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4563: LD_VAR 0 3
4567: PPUSH
4568: LD_STRING D11a-FSol2-1
4570: PPUSH
4571: CALL_OW 88
// DialogueOff ;
4575: CALL_OW 7
// end ; end ; end_of_file
4579: LD_VAR 0 2
4583: RET
// export function PrepareRussian ; var i ; begin
4584: LD_INT 0
4586: PPUSH
4587: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4588: LD_INT 3
4590: PPUSH
4591: LD_INT 3
4593: PPUSH
4594: LD_INT 2
4596: PPUSH
4597: LD_EXP 33
4601: PPUSH
4602: LD_EXP 34
4606: PPUSH
4607: CALL_OW 12
4611: PPUSH
4612: LD_INT 2
4614: PPUSH
4615: LD_INT 4
4617: PPUSH
4618: CALL 5231 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4622: LD_INT 3
4624: PPUSH
4625: LD_INT 3
4627: PPUSH
4628: LD_INT 8
4630: PPUSH
4631: LD_EXP 33
4635: PPUSH
4636: LD_EXP 34
4640: PPUSH
4641: CALL_OW 12
4645: PPUSH
4646: LD_INT 1
4648: PPUSH
4649: LD_INT 4
4651: PPUSH
4652: CALL 5231 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4656: LD_INT 3
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: LD_INT 67
4664: PPUSH
4665: LD_EXP 33
4669: PPUSH
4670: LD_EXP 34
4674: PPUSH
4675: CALL_OW 12
4679: PPUSH
4680: LD_INT 1
4682: PPUSH
4683: LD_INT 2
4685: PPUSH
4686: CALL 5231 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4690: LD_INT 3
4692: PPUSH
4693: LD_INT 3
4695: PPUSH
4696: LD_INT 21
4698: PPUSH
4699: LD_EXP 33
4703: PPUSH
4704: LD_EXP 34
4708: PPUSH
4709: CALL_OW 12
4713: PPUSH
4714: LD_INT 3
4716: PPUSH
4717: LD_INT 6
4719: PPUSH
4720: CALL 5231 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4724: LD_INT 3
4726: PPUSH
4727: LD_INT 3
4729: PPUSH
4730: LD_INT 17
4732: PPUSH
4733: LD_EXP 33
4737: PPUSH
4738: LD_EXP 34
4742: PPUSH
4743: CALL_OW 12
4747: PPUSH
4748: LD_INT 3
4750: PPUSH
4751: LD_INT 6
4753: PPUSH
4754: CALL 5231 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4758: LD_INT 3
4760: PPUSH
4761: LD_INT 3
4763: PPUSH
4764: LD_INT 32
4766: PPUSH
4767: LD_EXP 33
4771: PPUSH
4772: LD_EXP 34
4776: PPUSH
4777: CALL_OW 12
4781: PPUSH
4782: LD_INT 4
4784: PPUSH
4785: LD_INT 2
4787: PPUSH
4788: CALL 5231 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 22
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PUSH
4807: LD_INT 21
4809: PUSH
4810: LD_INT 3
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 30
4819: PUSH
4820: LD_INT 32
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: PPUSH
4832: CALL_OW 69
4836: PUSH
4837: FOR_IN
4838: IFFALSE 4878
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4840: LD_INT 3
4842: PPUSH
4843: LD_INT 3
4845: PPUSH
4846: LD_VAR 0 2
4850: PPUSH
4851: LD_EXP 33
4855: PPUSH
4856: LD_EXP 34
4860: PPUSH
4861: CALL_OW 12
4865: PPUSH
4866: LD_INT 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL 5231 0 6
4876: GO 4837
4878: POP
4879: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4880: LD_ADDR_VAR 0 2
4884: PUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 3
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 31
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL_OW 69
4924: PUSH
4925: FOR_IN
4926: IFFALSE 4954
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4928: LD_EXP 33
4932: PPUSH
4933: LD_EXP 34
4937: PPUSH
4938: CALL_OW 12
4942: PPUSH
4943: LD_VAR 0 2
4947: PPUSH
4948: CALL 5341 0 2
4952: GO 4925
4954: POP
4955: POP
// end ; end_of_file
4956: LD_VAR 0 1
4960: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4961: LD_INT 0
4963: PPUSH
4964: PPUSH
// if exist_mode then
4965: LD_VAR 0 2
4969: IFFALSE 4994
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4971: LD_ADDR_VAR 0 4
4975: PUSH
4976: LD_EXP 41
4980: PUSH
4981: LD_VAR 0 1
4985: STR
4986: PPUSH
4987: CALL_OW 34
4991: ST_TO_ADDR
// end else
4992: GO 5009
// begin unit := NewCharacter ( ident ) ;
4994: LD_ADDR_VAR 0 4
4998: PUSH
4999: LD_VAR 0 1
5003: PPUSH
5004: CALL_OW 25
5008: ST_TO_ADDR
// end ; result := unit ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_VAR 0 4
5018: ST_TO_ADDR
// end ;
5019: LD_VAR 0 3
5023: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
5028: PPUSH
// rnd = rand ( 1 , characters ) ;
5029: LD_ADDR_VAR 0 6
5033: PUSH
5034: LD_INT 1
5036: PPUSH
5037: LD_VAR 0 1
5041: PPUSH
5042: CALL_OW 12
5046: ST_TO_ADDR
// for i = 1 to characters do
5047: LD_ADDR_VAR 0 5
5051: PUSH
5052: DOUBLE
5053: LD_INT 1
5055: DEC
5056: ST_TO_ADDR
5057: LD_VAR 0 1
5061: PUSH
5062: FOR_TO
5063: IFFALSE 5173
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5065: LD_VAR 0 5
5069: PUSH
5070: LD_VAR 0 6
5074: EQUAL
5075: PUSH
5076: LD_VAR 0 1
5080: PUSH
5081: LD_VAR 0 5
5085: ARRAY
5086: PPUSH
5087: CALL_OW 258
5091: PUSH
5092: LD_INT 1
5094: EQUAL
5095: AND
5096: IFFALSE 5118
// Say ( characters [ i ] , dialogMID ) ;
5098: LD_VAR 0 1
5102: PUSH
5103: LD_VAR 0 5
5107: ARRAY
5108: PPUSH
5109: LD_VAR 0 2
5113: PPUSH
5114: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5118: LD_VAR 0 5
5122: PUSH
5123: LD_VAR 0 6
5127: EQUAL
5128: PUSH
5129: LD_VAR 0 1
5133: PUSH
5134: LD_VAR 0 5
5138: ARRAY
5139: PPUSH
5140: CALL_OW 258
5144: PUSH
5145: LD_INT 2
5147: EQUAL
5148: AND
5149: IFFALSE 5171
// Say ( characters [ i ] , dialogFID ) ;
5151: LD_VAR 0 1
5155: PUSH
5156: LD_VAR 0 5
5160: ARRAY
5161: PPUSH
5162: LD_VAR 0 3
5166: PPUSH
5167: CALL_OW 88
// end ;
5171: GO 5062
5173: POP
5174: POP
// end ;
5175: LD_VAR 0 4
5179: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
// for i in charactersList do
5184: LD_ADDR_VAR 0 4
5188: PUSH
5189: LD_VAR 0 1
5193: PUSH
5194: FOR_IN
5195: IFFALSE 5224
// begin if IsOk ( i ) then
5197: LD_VAR 0 4
5201: PPUSH
5202: CALL_OW 302
5206: IFFALSE 5222
// SaveCharacters ( i , ident ) ;
5208: LD_VAR 0 4
5212: PPUSH
5213: LD_VAR 0 2
5217: PPUSH
5218: CALL_OW 38
// end ;
5222: GO 5194
5224: POP
5225: POP
// end ;
5226: LD_VAR 0 3
5230: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5231: LD_INT 0
5233: PPUSH
5234: PPUSH
5235: PPUSH
5236: PPUSH
// for i = 1 to count do
5237: LD_ADDR_VAR 0 8
5241: PUSH
5242: DOUBLE
5243: LD_INT 1
5245: DEC
5246: ST_TO_ADDR
5247: LD_VAR 0 6
5251: PUSH
5252: FOR_TO
5253: IFFALSE 5334
// begin uc_side = side ;
5255: LD_ADDR_OWVAR 20
5259: PUSH
5260: LD_VAR 0 1
5264: ST_TO_ADDR
// uc_nation = nation ;
5265: LD_ADDR_OWVAR 21
5269: PUSH
5270: LD_VAR 0 2
5274: ST_TO_ADDR
// hc_gallery =  ;
5275: LD_ADDR_OWVAR 33
5279: PUSH
5280: LD_STRING 
5282: ST_TO_ADDR
// hc_name =  ;
5283: LD_ADDR_OWVAR 26
5287: PUSH
5288: LD_STRING 
5290: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5291: LD_INT 0
5293: PPUSH
5294: LD_VAR 0 5
5298: PPUSH
5299: LD_VAR 0 4
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 10
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5318: LD_VAR 0 10
5322: PPUSH
5323: LD_VAR 0 3
5327: PPUSH
5328: CALL_OW 52
// end ;
5332: GO 5252
5334: POP
5335: POP
// end ;
5336: LD_VAR 0 7
5340: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5341: LD_INT 0
5343: PPUSH
5344: PPUSH
5345: PPUSH
// uc_side := GetSide ( b ) ;
5346: LD_ADDR_OWVAR 20
5350: PUSH
5351: LD_VAR 0 2
5355: PPUSH
5356: CALL_OW 255
5360: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_VAR 0 2
5370: PPUSH
5371: CALL_OW 248
5375: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5376: LD_INT 0
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 1
5386: PPUSH
5387: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5391: LD_ADDR_VAR 0 5
5395: PUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: CALL_OW 254
5405: PUSH
5406: LD_INT 3
5408: MINUS
5409: ST_TO_ADDR
// if dir < 0 then
5410: LD_VAR 0 5
5414: PUSH
5415: LD_INT 0
5417: LESS
5418: IFFALSE 5434
// dir := 6 + dir ;
5420: LD_ADDR_VAR 0 5
5424: PUSH
5425: LD_INT 6
5427: PUSH
5428: LD_VAR 0 5
5432: PLUS
5433: ST_TO_ADDR
// un := CreateHuman ;
5434: LD_ADDR_VAR 0 4
5438: PUSH
5439: CALL_OW 44
5443: ST_TO_ADDR
// SetDir ( un , dir ) ;
5444: LD_VAR 0 4
5448: PPUSH
5449: LD_VAR 0 5
5453: PPUSH
5454: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5458: LD_VAR 0 4
5462: PPUSH
5463: LD_VAR 0 2
5467: PPUSH
5468: CALL_OW 52
// end ;
5472: LD_VAR 0 3
5476: RET
// export function PrepareDifficulty ; begin
5477: LD_INT 0
5479: PPUSH
// if Difficulty = 1 then
5480: LD_OWVAR 67
5484: PUSH
5485: LD_INT 1
5487: EQUAL
5488: IFFALSE 5506
// begin RuSolMinLevel = 2 ;
5490: LD_ADDR_EXP 33
5494: PUSH
5495: LD_INT 2
5497: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5498: LD_ADDR_EXP 34
5502: PUSH
5503: LD_INT 5
5505: ST_TO_ADDR
// end ; if Difficulty = 2 then
5506: LD_OWVAR 67
5510: PUSH
5511: LD_INT 2
5513: EQUAL
5514: IFFALSE 5532
// begin RuSolMinLevel = 3 ;
5516: LD_ADDR_EXP 33
5520: PUSH
5521: LD_INT 3
5523: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5524: LD_ADDR_EXP 34
5528: PUSH
5529: LD_INT 5
5531: ST_TO_ADDR
// end ; if Difficulty = 3 then
5532: LD_OWVAR 67
5536: PUSH
5537: LD_INT 3
5539: EQUAL
5540: IFFALSE 5558
// begin RuSolMinLevel = 4 ;
5542: LD_ADDR_EXP 33
5546: PUSH
5547: LD_INT 4
5549: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5550: LD_ADDR_EXP 34
5554: PUSH
5555: LD_INT 5
5557: ST_TO_ADDR
// end ; end ;
5558: LD_VAR 0 1
5562: RET
// export function ShowQuery1 ; begin
5563: LD_INT 0
5565: PPUSH
// case query ( QKill ) of 1 :
5566: LD_STRING QKill
5568: PPUSH
5569: CALL_OW 97
5573: PUSH
5574: LD_INT 1
5576: DOUBLE
5577: EQUAL
5578: IFTRUE 5582
5580: GO 5593
5582: POP
// begin result = 1 ;
5583: LD_ADDR_VAR 0 1
5587: PUSH
5588: LD_INT 1
5590: ST_TO_ADDR
// end ; 2 :
5591: GO 5632
5593: LD_INT 2
5595: DOUBLE
5596: EQUAL
5597: IFTRUE 5601
5599: GO 5612
5601: POP
// begin result = 2 ;
5602: LD_ADDR_VAR 0 1
5606: PUSH
5607: LD_INT 2
5609: ST_TO_ADDR
// end ; 3 :
5610: GO 5632
5612: LD_INT 3
5614: DOUBLE
5615: EQUAL
5616: IFTRUE 5620
5618: GO 5631
5620: POP
// begin result = 3 ;
5621: LD_ADDR_VAR 0 1
5625: PUSH
5626: LD_INT 3
5628: ST_TO_ADDR
// end ; end ;
5629: GO 5632
5631: POP
// end ;
5632: LD_VAR 0 1
5636: RET
// export function ShowQuery2 ; begin
5637: LD_INT 0
5639: PPUSH
// case query ( QKill2 ) of 1 :
5640: LD_STRING QKill2
5642: PPUSH
5643: CALL_OW 97
5647: PUSH
5648: LD_INT 1
5650: DOUBLE
5651: EQUAL
5652: IFTRUE 5656
5654: GO 5667
5656: POP
// begin result = 1 ;
5657: LD_ADDR_VAR 0 1
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// end ; 2 :
5665: GO 5687
5667: LD_INT 2
5669: DOUBLE
5670: EQUAL
5671: IFTRUE 5675
5673: GO 5686
5675: POP
// begin result = 2 ;
5676: LD_ADDR_VAR 0 1
5680: PUSH
5681: LD_INT 2
5683: ST_TO_ADDR
// end ; end ;
5684: GO 5687
5686: POP
// end ;
5687: LD_VAR 0 1
5691: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5692: LD_INT 0
5694: PPUSH
5695: PPUSH
5696: PPUSH
5697: PPUSH
// for i = 1 to 72 do
5698: LD_ADDR_VAR 0 5
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 72
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5770
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5714: LD_VAR 0 5
5718: PPUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 321
5728: PUSH
5729: LD_INT 1
5731: EQUAL
5732: PUSH
5733: LD_VAR 0 5
5737: PPUSH
5738: LD_VAR 0 3
5742: PPUSH
5743: CALL_OW 482
5747: PUSH
5748: LD_INT 1
5750: EQUAL
5751: AND
5752: IFFALSE 5768
// AddComResearch ( lab , i ) ;
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_VAR 0 5
5763: PPUSH
5764: CALL_OW 184
5768: GO 5711
5770: POP
5771: POP
// end ;
5772: LD_VAR 0 4
5776: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5777: LD_INT 0
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5784: LD_ADDR_VAR 0 6
5788: PUSH
5789: LD_INT 22
5791: PUSH
5792: LD_VAR 0 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 2
5803: PUSH
5804: LD_INT 25
5806: PUSH
5807: LD_INT 2
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 25
5816: PUSH
5817: LD_INT 16
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 24
5831: PUSH
5832: LD_INT 1000
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: LD_INT 22
5856: PUSH
5857: LD_VAR 0 1
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 21
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: LD_INT 24
5881: PUSH
5882: LD_INT 1000
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: PPUSH
5901: CALL_OW 69
5905: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5906: LD_VAR 0 4
5910: PUSH
5911: LD_INT 0
5913: GREATER
5914: PUSH
5915: LD_VAR 0 6
5919: PUSH
5920: LD_INT 0
5922: GREATER
5923: AND
5924: IFFALSE 5990
// begin for i in engineerOk_list do
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_VAR 0 6
5935: PUSH
5936: FOR_IN
5937: IFFALSE 5988
// begin for j in buildings_list do
5939: LD_ADDR_VAR 0 7
5943: PUSH
5944: LD_VAR 0 4
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5984
// begin AddComExitBuilding ( i ) ;
5952: LD_VAR 0 5
5956: PPUSH
5957: CALL_OW 182
// wait ( 0 0$1 ) ;
5961: LD_INT 35
5963: PPUSH
5964: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5968: LD_VAR 0 5
5972: PPUSH
5973: LD_VAR 0 7
5977: PPUSH
5978: CALL_OW 190
// end ;
5982: GO 5949
5984: POP
5985: POP
// end ;
5986: GO 5936
5988: POP
5989: POP
// end ; if buildings_list = 0 then
5990: LD_VAR 0 4
5994: PUSH
5995: LD_INT 0
5997: EQUAL
5998: IFFALSE 6031
// begin for i in engineerOK_list do
6000: LD_ADDR_VAR 0 5
6004: PUSH
6005: LD_VAR 0 6
6009: PUSH
6010: FOR_IN
6011: IFFALSE 6029
// begin ComEnterUnit ( i , building ) ;
6013: LD_VAR 0 5
6017: PPUSH
6018: LD_VAR 0 2
6022: PPUSH
6023: CALL_OW 120
// end ;
6027: GO 6010
6029: POP
6030: POP
// end ; end ;
6031: LD_VAR 0 3
6035: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
6036: LD_INT 0
6038: PPUSH
6039: PPUSH
6040: PPUSH
6041: PPUSH
6042: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6043: LD_ADDR_VAR 0 6
6047: PUSH
6048: LD_INT 22
6050: PUSH
6051: LD_VAR 0 1
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: LD_INT 25
6062: PUSH
6063: LD_INT 4
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6079: LD_ADDR_VAR 0 9
6083: PUSH
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 22
6091: PUSH
6092: LD_VAR 0 1
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 750
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
6138: LD_VAR 0 9
6142: PUSH
6143: LD_INT 0
6145: GREATER
6146: PUSH
6147: LD_VAR 0 6
6151: PUSH
6152: LD_INT 0
6154: GREATER
6155: AND
6156: IFFALSE 6283
// begin for i = 1 to damageUnits do
6158: LD_ADDR_VAR 0 7
6162: PUSH
6163: DOUBLE
6164: LD_INT 1
6166: DEC
6167: ST_TO_ADDR
6168: LD_VAR 0 9
6172: PUSH
6173: FOR_TO
6174: IFFALSE 6198
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
6176: LD_VAR 0 9
6180: PUSH
6181: LD_VAR 0 7
6185: ARRAY
6186: PPUSH
6187: LD_VAR 0 2
6191: PPUSH
6192: CALL_OW 113
6196: GO 6173
6198: POP
6199: POP
// for i in sci_list do
6200: LD_ADDR_VAR 0 7
6204: PUSH
6205: LD_VAR 0 6
6209: PUSH
6210: FOR_IN
6211: IFFALSE 6279
// begin ComExitBuilding ( i ) ;
6213: LD_VAR 0 7
6217: PPUSH
6218: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
6222: LD_ADDR_VAR 0 8
6226: PUSH
6227: LD_VAR 0 2
6231: PPUSH
6232: LD_INT 22
6234: PUSH
6235: LD_VAR 0 1
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PPUSH
6244: CALL_OW 70
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6275
// begin AddComHeal ( i , j ) ;
6252: LD_VAR 0 7
6256: PPUSH
6257: LD_VAR 0 8
6261: PPUSH
6262: CALL_OW 188
// wait ( 1 1$0 ) ;
6266: LD_INT 2100
6268: PPUSH
6269: CALL_OW 67
// end ;
6273: GO 6249
6275: POP
6276: POP
// end ;
6277: GO 6210
6279: POP
6280: POP
// end else
6281: GO 6297
// begin AddComEnterUnit ( sci_list , build ) ;
6283: LD_VAR 0 6
6287: PPUSH
6288: LD_VAR 0 4
6292: PPUSH
6293: CALL_OW 180
// end ; end ;
6297: LD_VAR 0 5
6301: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6302: LD_INT 0
6304: PPUSH
6305: PPUSH
6306: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6307: LD_INT 22
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 21
6321: PUSH
6322: LD_INT 2
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: PPUSH
6333: CALL_OW 69
6337: PUSH
6338: LD_VAR 0 3
6342: LESSEQUAL
6343: IFFALSE 6451
// begin for i = 1 to vehCount do
6345: LD_ADDR_VAR 0 9
6349: PUSH
6350: DOUBLE
6351: LD_INT 1
6353: DEC
6354: ST_TO_ADDR
6355: LD_VAR 0 3
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6449
// begin weapon = weaponTab [ i ] ;
6363: LD_ADDR_VAR 0 10
6367: PUSH
6368: LD_VAR 0 4
6372: PUSH
6373: LD_VAR 0 9
6377: ARRAY
6378: ST_TO_ADDR
// if weapon = 44 then
6379: LD_VAR 0 10
6383: PUSH
6384: LD_INT 44
6386: EQUAL
6387: IFFALSE 6418
// begin AddComConstruct ( fabric , 22 , engine , control , weapon ) ;
6389: LD_VAR 0 2
6393: PPUSH
6394: LD_INT 22
6396: PPUSH
6397: LD_VAR 0 5
6401: PPUSH
6402: LD_VAR 0 6
6406: PPUSH
6407: LD_VAR 0 10
6411: PPUSH
6412: CALL_OW 185
// end else
6416: GO 6447
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6418: LD_VAR 0 2
6422: PPUSH
6423: LD_VAR 0 7
6427: PPUSH
6428: LD_VAR 0 5
6432: PPUSH
6433: LD_VAR 0 6
6437: PPUSH
6438: LD_VAR 0 10
6442: PPUSH
6443: CALL_OW 185
// end ; end ;
6447: GO 6360
6449: POP
6450: POP
// end ; end ;
6451: LD_VAR 0 8
6455: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6456: LD_INT 0
6458: PPUSH
6459: PPUSH
6460: PPUSH
6461: PPUSH
6462: PPUSH
// for i := 1 to russianTanks do
6463: LD_ADDR_VAR 0 4
6467: PUSH
6468: DOUBLE
6469: LD_INT 1
6471: DEC
6472: ST_TO_ADDR
6473: LD_EXP 35
6477: PUSH
6478: FOR_TO
6479: IFFALSE 6961
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6481: LD_VAR 0 4
6485: PUSH
6486: LD_INT 5
6488: PUSH
6489: LD_INT 6
6491: PUSH
6492: LD_INT 6
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_OWVAR 67
6504: ARRAY
6505: EQUAL
6506: IFFALSE 6959
// begin repeat wait ( 0 0$1 ) ;
6508: LD_INT 35
6510: PPUSH
6511: CALL_OW 67
// for i in russianTanks do
6515: LD_ADDR_VAR 0 4
6519: PUSH
6520: LD_EXP 35
6524: PUSH
6525: FOR_IN
6526: IFFALSE 6947
// begin if GetLives ( i ) < 659 then
6528: LD_VAR 0 4
6532: PPUSH
6533: CALL_OW 256
6537: PUSH
6538: LD_INT 659
6540: LESS
6541: IFFALSE 6629
// begin tmp = i ;
6543: LD_ADDR_VAR 0 5
6547: PUSH
6548: LD_VAR 0 4
6552: ST_TO_ADDR
// for i := 1 to russianTanks do
6553: LD_ADDR_VAR 0 4
6557: PUSH
6558: DOUBLE
6559: LD_INT 1
6561: DEC
6562: ST_TO_ADDR
6563: LD_EXP 35
6567: PUSH
6568: FOR_TO
6569: IFFALSE 6627
// begin if tmp = russianTanks [ i ] then
6571: LD_VAR 0 5
6575: PUSH
6576: LD_EXP 35
6580: PUSH
6581: LD_VAR 0 4
6585: ARRAY
6586: EQUAL
6587: IFFALSE 6625
// begin russianTanks = Delete ( russianTanks , i ) ;
6589: LD_ADDR_EXP 35
6593: PUSH
6594: LD_EXP 35
6598: PPUSH
6599: LD_VAR 0 4
6603: PPUSH
6604: CALL_OW 3
6608: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6609: LD_ADDR_EXP 36
6613: PUSH
6614: LD_EXP 36
6618: PUSH
6619: LD_VAR 0 5
6623: ADD
6624: ST_TO_ADDR
// end ; end ;
6625: GO 6568
6627: POP
6628: POP
// end ; wait ( 0 0$1 ) ;
6629: LD_INT 35
6631: PPUSH
6632: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
6636: LD_INT 23
6638: PPUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PPUSH
6649: CALL_OW 70
6653: PUSH
6654: LD_INT 2
6656: GREATER
6657: IFFALSE 6767
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6659: LD_ADDR_VAR 0 6
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_VAR 0 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PPUSH
6676: CALL_OW 69
6680: PPUSH
6681: LD_VAR 0 4
6685: PPUSH
6686: CALL_OW 74
6690: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6691: LD_ADDR_VAR 0 7
6695: PUSH
6696: LD_INT 22
6698: PUSH
6699: LD_VAR 0 2
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: LD_INT 59
6713: PUSH
6714: EMPTY
6715: LIST
6716: PUSH
6717: LD_INT 21
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 2
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: PPUSH
6750: CALL_OW 69
6754: PPUSH
6755: LD_VAR 0 4
6759: PPUSH
6760: CALL_OW 74
6764: ST_TO_ADDR
// end else
6765: GO 6879
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
6767: LD_ADDR_VAR 0 6
6771: PUSH
6772: LD_INT 23
6774: PPUSH
6775: LD_INT 22
6777: PUSH
6778: LD_VAR 0 2
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 71
6791: PPUSH
6792: LD_VAR 0 4
6796: PPUSH
6797: CALL_OW 74
6801: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6802: LD_ADDR_VAR 0 7
6806: PUSH
6807: LD_INT 23
6809: PPUSH
6810: LD_INT 22
6812: PUSH
6813: LD_VAR 0 2
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 2
6824: PUSH
6825: LD_INT 59
6827: PUSH
6828: EMPTY
6829: LIST
6830: PUSH
6831: LD_INT 21
6833: PUSH
6834: LD_INT 1
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 21
6843: PUSH
6844: LD_INT 2
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: EMPTY
6862: LIST
6863: PPUSH
6864: CALL_OW 71
6868: PPUSH
6869: LD_VAR 0 4
6873: PPUSH
6874: CALL_OW 74
6878: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6879: LD_VAR 0 4
6883: PPUSH
6884: LD_VAR 0 6
6888: PPUSH
6889: CALL_OW 296
6893: PUSH
6894: LD_INT 8
6896: PLUS
6897: PUSH
6898: LD_VAR 0 4
6902: PPUSH
6903: LD_VAR 0 7
6907: PPUSH
6908: CALL_OW 296
6912: LESS
6913: IFFALSE 6931
// begin ComAttackUnit ( i , target1 ) ;
6915: LD_VAR 0 4
6919: PPUSH
6920: LD_VAR 0 6
6924: PPUSH
6925: CALL_OW 115
// end else
6929: GO 6945
// begin ComAttackUnit ( i , target2 ) ;
6931: LD_VAR 0 4
6935: PPUSH
6936: LD_VAR 0 7
6940: PPUSH
6941: CALL_OW 115
// end ; end ;
6945: GO 6525
6947: POP
6948: POP
// until russianTanks = 0 ;
6949: LD_EXP 35
6953: PUSH
6954: LD_INT 0
6956: EQUAL
6957: IFFALSE 6508
// end ; end ;
6959: GO 6478
6961: POP
6962: POP
// end ;
6963: LD_VAR 0 3
6967: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6979: LD_ADDR_VAR 0 8
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 1
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 21
6998: PUSH
6999: LD_INT 2
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 24
7008: PUSH
7009: LD_INT 660
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 58
7021: PUSH
7022: EMPTY
7023: LIST
7024: PUSH
7025: LD_INT 2
7027: PUSH
7028: LD_INT 34
7030: PUSH
7031: LD_INT 43
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 34
7040: PUSH
7041: LD_INT 44
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 34
7050: PUSH
7051: LD_INT 46
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: PPUSH
7075: CALL_OW 69
7079: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7080: LD_ADDR_VAR 0 9
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_VAR 0 1
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: LD_INT 21
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: LD_INT 24
7112: PUSH
7113: LD_INT 660
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7134: LD_ADDR_VAR 0 10
7138: PUSH
7139: LD_VAR 0 2
7143: PPUSH
7144: LD_INT 22
7146: PUSH
7147: LD_VAR 0 1
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 21
7158: PUSH
7159: LD_INT 2
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 3
7168: PUSH
7169: LD_INT 24
7171: PUSH
7172: LD_INT 1000
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 70
7192: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7193: LD_ADDR_VAR 0 11
7197: PUSH
7198: LD_VAR 0 2
7202: PPUSH
7203: LD_INT 22
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 21
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 24
7227: PUSH
7228: LD_INT 1000
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 58
7237: PUSH
7238: EMPTY
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 70
7251: ST_TO_ADDR
// mechanicInside_list = [ ] ;
7252: LD_ADDR_VAR 0 12
7256: PUSH
7257: EMPTY
7258: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
7259: LD_ADDR_VAR 0 13
7263: PUSH
7264: LD_VAR 0 2
7268: PPUSH
7269: LD_INT 22
7271: PUSH
7272: LD_VAR 0 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 25
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 70
7299: ST_TO_ADDR
// if damageVehicle_list > 0 then
7300: LD_VAR 0 9
7304: PUSH
7305: LD_INT 0
7307: GREATER
7308: IFFALSE 7346
// for i in damageVehicle_list do
7310: LD_ADDR_VAR 0 6
7314: PUSH
7315: LD_VAR 0 9
7319: PUSH
7320: FOR_IN
7321: IFFALSE 7344
// ComMoveXY ( i , repX , repY ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_VAR 0 3
7332: PPUSH
7333: LD_VAR 0 4
7337: PPUSH
7338: CALL_OW 111
7342: GO 7320
7344: POP
7345: POP
// if vehicleNeedRepair_list > 0 then
7346: LD_VAR 0 10
7350: PUSH
7351: LD_INT 0
7353: GREATER
7354: IFFALSE 7441
// begin for i in vehicleNeedRepair_list do
7356: LD_ADDR_VAR 0 6
7360: PUSH
7361: LD_VAR 0 10
7365: PUSH
7366: FOR_IN
7367: IFFALSE 7439
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
7369: LD_ADDR_VAR 0 12
7373: PUSH
7374: LD_VAR 0 12
7378: PUSH
7379: LD_VAR 0 6
7383: PPUSH
7384: CALL_OW 313
7388: ADD
7389: ST_TO_ADDR
// for j in mechanicInside_list do
7390: LD_ADDR_VAR 0 7
7394: PUSH
7395: LD_VAR 0 12
7399: PUSH
7400: FOR_IN
7401: IFFALSE 7435
// begin ComExitVehicle ( j ) ;
7403: LD_VAR 0 7
7407: PPUSH
7408: CALL_OW 121
// wait ( 0 0$1 ) ;
7412: LD_INT 35
7414: PPUSH
7415: CALL_OW 67
// AddComRepairVehicle ( j , i ) ;
7419: LD_VAR 0 7
7423: PPUSH
7424: LD_VAR 0 6
7428: PPUSH
7429: CALL_OW 189
// end ;
7433: GO 7400
7435: POP
7436: POP
// end ;
7437: GO 7366
7439: POP
7440: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7441: LD_VAR 0 11
7445: PUSH
7446: LD_INT 0
7448: GREATER
7449: IFFALSE 7473
// ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7451: LD_VAR 0 13
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 11
7464: PUSH
7465: LD_INT 1
7467: ARRAY
7468: PPUSH
7469: CALL_OW 120
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
7473: LD_VAR 0 8
7477: PUSH
7478: LD_INT 0
7480: GREATER
7481: PUSH
7482: LD_EXP 36
7486: PUSH
7487: LD_INT 0
7489: GREATER
7490: AND
7491: IFFALSE 7734
// begin for i := 1 to vehicleOK_list do
7493: LD_ADDR_VAR 0 6
7497: PUSH
7498: DOUBLE
7499: LD_INT 1
7501: DEC
7502: ST_TO_ADDR
7503: LD_VAR 0 8
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7732
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7511: LD_VAR 0 6
7515: PUSH
7516: LD_INT 5
7518: PUSH
7519: LD_INT 6
7521: PUSH
7522: LD_INT 6
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_OWVAR 67
7534: ARRAY
7535: EQUAL
7536: IFFALSE 7730
// begin for i in vehicleOk_list do
7538: LD_ADDR_VAR 0 6
7542: PUSH
7543: LD_VAR 0 8
7547: PUSH
7548: FOR_IN
7549: IFFALSE 7569
// russianTanks = russianTanks ^ i ;
7551: LD_ADDR_EXP 35
7555: PUSH
7556: LD_EXP 35
7560: PUSH
7561: LD_VAR 0 6
7565: ADD
7566: ST_TO_ADDR
7567: GO 7548
7569: POP
7570: POP
// for i in vehicleOK_list do
7571: LD_ADDR_VAR 0 6
7575: PUSH
7576: LD_VAR 0 8
7580: PUSH
7581: FOR_IN
7582: IFFALSE 7598
// SetFuel ( i , 100 ) ;
7584: LD_VAR 0 6
7588: PPUSH
7589: LD_INT 100
7591: PPUSH
7592: CALL_OW 240
7596: GO 7581
7598: POP
7599: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7600: LD_ADDR_EXP 36
7604: PUSH
7605: LD_EXP 36
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 3
7617: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7618: LD_ADDR_EXP 36
7622: PUSH
7623: LD_EXP 36
7627: PPUSH
7628: LD_INT 1
7630: PPUSH
7631: CALL_OW 3
7635: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7636: LD_ADDR_EXP 36
7640: PUSH
7641: LD_EXP 36
7645: PPUSH
7646: LD_INT 1
7648: PPUSH
7649: CALL_OW 3
7653: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7654: LD_ADDR_EXP 36
7658: PUSH
7659: LD_EXP 36
7663: PPUSH
7664: LD_INT 1
7666: PPUSH
7667: CALL_OW 3
7671: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7672: LD_ADDR_EXP 36
7676: PUSH
7677: LD_EXP 36
7681: PPUSH
7682: LD_INT 1
7684: PPUSH
7685: CALL_OW 3
7689: ST_TO_ADDR
// if Difficulty = 2 or Difficulty = 3 then
7690: LD_OWVAR 67
7694: PUSH
7695: LD_INT 2
7697: EQUAL
7698: PUSH
7699: LD_OWVAR 67
7703: PUSH
7704: LD_INT 3
7706: EQUAL
7707: OR
7708: IFFALSE 7728
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
7710: LD_ADDR_EXP 36
7714: PUSH
7715: LD_EXP 36
7719: PPUSH
7720: LD_INT 1
7722: PPUSH
7723: CALL_OW 3
7727: ST_TO_ADDR
// break ;
7728: GO 7732
// end ; end ;
7730: GO 7508
7732: POP
7733: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7734: LD_ADDR_VAR 0 6
7738: PUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_INT 22
7746: PUSH
7747: LD_VAR 0 1
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: LD_INT 25
7758: PUSH
7759: LD_INT 3
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PPUSH
7770: CALL_OW 70
7774: NOT
7775: PUSH
7776: FOR_IN
7777: IFFALSE 7800
// ComMoveXY ( i , repX , repY ) ;
7779: LD_VAR 0 6
7783: PPUSH
7784: LD_VAR 0 3
7788: PPUSH
7789: LD_VAR 0 4
7793: PPUSH
7794: CALL_OW 111
7798: GO 7776
7800: POP
7801: POP
// end ;
7802: LD_VAR 0 5
7806: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
7807: LD_INT 0
7809: PPUSH
7810: PPUSH
7811: PPUSH
7812: PPUSH
// enable ;
7813: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
7814: LD_ADDR_VAR 0 7
7818: PUSH
7819: LD_VAR 0 3
7823: PPUSH
7824: CALL_OW 435
7828: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
7829: LD_ADDR_VAR 0 6
7833: PUSH
7834: LD_INT 22
7836: PUSH
7837: LD_VAR 0 1
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 34
7848: PUSH
7849: LD_VAR 0 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PPUSH
7862: CALL_OW 69
7866: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
7867: LD_VAR 0 6
7871: PUSH
7872: LD_INT 0
7874: GREATER
7875: PUSH
7876: LD_VAR 0 3
7880: PPUSH
7881: CALL_OW 435
7885: AND
7886: PUSH
7887: LD_VAR 0 7
7891: PUSH
7892: LD_INT 0
7894: GREATER
7895: AND
7896: IFFALSE 7945
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
7898: LD_VAR 0 6
7902: PUSH
7903: LD_INT 1
7905: ARRAY
7906: PPUSH
7907: LD_VAR 0 7
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: PPUSH
7916: LD_VAR 0 7
7920: PUSH
7921: LD_INT 2
7923: ARRAY
7924: PPUSH
7925: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
7929: LD_VAR 0 6
7933: PUSH
7934: LD_INT 1
7936: ARRAY
7937: PPUSH
7938: LD_INT 100
7940: PPUSH
7941: CALL_OW 240
// end ; end ;
7945: LD_VAR 0 4
7949: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7950: LD_INT 0
7952: PPUSH
7953: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7954: LD_INT 22
7956: PUSH
7957: LD_VAR 0 1
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 25
7968: PUSH
7969: LD_INT 2
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PUSH
7985: LD_INT 0
7987: GREATER
7988: PUSH
7989: LD_INT 22
7991: PUSH
7992: LD_VAR 0 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 21
8003: PUSH
8004: LD_INT 3
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: LD_INT 3
8013: PUSH
8014: LD_INT 24
8016: PUSH
8017: LD_INT 1000
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: PPUSH
8033: CALL_OW 69
8037: PUSH
8038: LD_INT 0
8040: EQUAL
8041: AND
8042: PUSH
8043: LD_VAR 0 2
8047: PUSH
8048: LD_INT 0
8050: GREATER
8051: AND
8052: IFFALSE 8151
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
8054: LD_ADDR_VAR 0 4
8058: PUSH
8059: LD_INT 22
8061: PUSH
8062: LD_VAR 0 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 25
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 69
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8149
// begin AddComExitBuilding ( i ) ;
8093: LD_VAR 0 4
8097: PPUSH
8098: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8102: LD_VAR 0 4
8106: PPUSH
8107: LD_VAR 0 2
8111: PUSH
8112: LD_INT 1
8114: ARRAY
8115: PPUSH
8116: LD_VAR 0 2
8120: PUSH
8121: LD_INT 2
8123: ARRAY
8124: PPUSH
8125: LD_VAR 0 2
8129: PUSH
8130: LD_INT 3
8132: ARRAY
8133: PPUSH
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 4
8141: ARRAY
8142: PPUSH
8143: CALL_OW 205
// end ;
8147: GO 8090
8149: POP
8150: POP
// end ; end ;
8151: LD_VAR 0 3
8155: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
8156: LD_INT 0
8158: PPUSH
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
8165: LD_ADDR_VAR 0 7
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_INT 25
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 56
8194: PUSH
8195: EMPTY
8196: LIST
8197: PUSH
8198: LD_INT 24
8200: PUSH
8201: LD_INT 700
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: PPUSH
8214: CALL_OW 69
8218: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8219: LD_ADDR_VAR 0 8
8223: PUSH
8224: LD_INT 22
8226: PUSH
8227: LD_VAR 0 1
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 30
8238: PUSH
8239: LD_INT 32
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 58
8248: PUSH
8249: EMPTY
8250: LIST
8251: PUSH
8252: LD_INT 24
8254: PUSH
8255: LD_INT 251
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: PPUSH
8268: CALL_OW 69
8272: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8273: LD_ADDR_VAR 0 10
8277: PUSH
8278: LD_INT 22
8280: PUSH
8281: LD_VAR 0 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 25
8295: PUSH
8296: LD_INT 5
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 25
8305: PUSH
8306: LD_INT 8
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 25
8315: PUSH
8316: LD_INT 9
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
8338: LD_ADDR_VAR 0 9
8342: PUSH
8343: LD_VAR 0 2
8347: PPUSH
8348: CALL_OW 313
8352: PUSH
8353: LD_VAR 0 10
8357: DIFF
8358: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
8359: LD_VAR 0 8
8363: PUSH
8364: LD_INT 0
8366: EQUAL
8367: PUSH
8368: LD_VAR 0 9
8372: PUSH
8373: LD_INT 0
8375: EQUAL
8376: AND
8377: IFFALSE 8423
// begin for i in soldiers_list do
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: LD_VAR 0 7
8388: PUSH
8389: FOR_IN
8390: IFFALSE 8419
// begin if IsOK ( build ) then
8392: LD_VAR 0 2
8396: PPUSH
8397: CALL_OW 302
8401: IFFALSE 8417
// ComEnterUnit ( i , build ) ;
8403: LD_VAR 0 5
8407: PPUSH
8408: LD_VAR 0 2
8412: PPUSH
8413: CALL_OW 120
// end ;
8417: GO 8389
8419: POP
8420: POP
// end else
8421: GO 8508
// begin for i = 1 to turretList do
8423: LD_ADDR_VAR 0 5
8427: PUSH
8428: DOUBLE
8429: LD_INT 1
8431: DEC
8432: ST_TO_ADDR
8433: LD_VAR 0 8
8437: PUSH
8438: FOR_TO
8439: IFFALSE 8506
// begin for j = 1 to temp do
8441: LD_ADDR_VAR 0 6
8445: PUSH
8446: DOUBLE
8447: LD_INT 1
8449: DEC
8450: ST_TO_ADDR
8451: LD_VAR 0 9
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8502
// begin ComExitBuilding ( temp [ j ] ) ;
8459: LD_VAR 0 9
8463: PUSH
8464: LD_VAR 0 6
8468: ARRAY
8469: PPUSH
8470: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
8474: LD_VAR 0 9
8478: PUSH
8479: LD_VAR 0 6
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 8
8489: PUSH
8490: LD_VAR 0 5
8494: ARRAY
8495: PPUSH
8496: CALL_OW 180
// end ;
8500: GO 8456
8502: POP
8503: POP
// end ;
8504: GO 8438
8506: POP
8507: POP
// end ; end ;
8508: LD_VAR 0 4
8512: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8520: LD_ADDR_VAR 0 6
8524: PUSH
8525: LD_INT 22
8527: PUSH
8528: LD_VAR 0 1
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: LD_INT 30
8542: PUSH
8543: LD_INT 31
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: PUSH
8550: LD_INT 30
8552: PUSH
8553: LD_INT 32
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PUSH
8560: LD_INT 30
8562: PUSH
8563: LD_INT 33
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 30
8572: PUSH
8573: LD_INT 4
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 30
8582: PUSH
8583: LD_INT 5
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PPUSH
8602: CALL_OW 69
8606: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8607: LD_ADDR_VAR 0 7
8611: PUSH
8612: LD_INT 22
8614: PUSH
8615: LD_VAR 0 2
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 3
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 58
8636: PUSH
8637: EMPTY
8638: LIST
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: PPUSH
8645: CALL_OW 69
8649: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8650: LD_VAR 0 6
8654: PUSH
8655: LD_INT 0
8657: GREATER
8658: PUSH
8659: LD_VAR 0 7
8663: PUSH
8664: LD_INT 0
8666: GREATER
8667: AND
8668: IFFALSE 8738
// begin for i in turretsList do
8670: LD_ADDR_VAR 0 4
8674: PUSH
8675: LD_VAR 0 6
8679: PUSH
8680: FOR_IN
8681: IFFALSE 8736
// begin for j in enemyBuildings do
8683: LD_ADDR_VAR 0 5
8687: PUSH
8688: LD_VAR 0 7
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8732
// begin if GetDistUnits ( i , j ) < 20 then
8696: LD_VAR 0 4
8700: PPUSH
8701: LD_VAR 0 5
8705: PPUSH
8706: CALL_OW 296
8710: PUSH
8711: LD_INT 20
8713: LESS
8714: IFFALSE 8730
// begin ComAttackUnit ( i , j ) ;
8716: LD_VAR 0 4
8720: PPUSH
8721: LD_VAR 0 5
8725: PPUSH
8726: CALL_OW 115
// end ; end ;
8730: GO 8693
8732: POP
8733: POP
// end ;
8734: GO 8680
8736: POP
8737: POP
// end ; end ;
8738: LD_VAR 0 3
8742: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
8750: PPUSH
8751: PPUSH
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
// for i = 1 to medicCount do
8756: LD_ADDR_VAR 0 14
8760: PUSH
8761: DOUBLE
8762: LD_INT 1
8764: DEC
8765: ST_TO_ADDR
8766: LD_VAR 0 7
8770: PUSH
8771: FOR_TO
8772: IFFALSE 8854
// begin uc_side = side ;
8774: LD_ADDR_OWVAR 20
8778: PUSH
8779: LD_VAR 0 1
8783: ST_TO_ADDR
// uc_nation = nation ;
8784: LD_ADDR_OWVAR 21
8788: PUSH
8789: LD_VAR 0 2
8793: ST_TO_ADDR
// hc_name =  ;
8794: LD_ADDR_OWVAR 26
8798: PUSH
8799: LD_STRING 
8801: ST_TO_ADDR
// hc_gallery =  ;
8802: LD_ADDR_OWVAR 33
8806: PUSH
8807: LD_STRING 
8809: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8810: LD_INT 0
8812: PPUSH
8813: LD_INT 4
8815: PPUSH
8816: LD_VAR 0 8
8820: PPUSH
8821: CALL_OW 380
// un = CreateHuman ;
8825: LD_ADDR_VAR 0 16
8829: PUSH
8830: CALL_OW 44
8834: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8835: LD_VAR 0 16
8839: PPUSH
8840: LD_VAR 0 9
8844: PPUSH
8845: LD_INT 0
8847: PPUSH
8848: CALL_OW 49
// end ;
8852: GO 8771
8854: POP
8855: POP
// for i = 1 to soldierCount do
8856: LD_ADDR_VAR 0 14
8860: PUSH
8861: DOUBLE
8862: LD_INT 1
8864: DEC
8865: ST_TO_ADDR
8866: LD_VAR 0 3
8870: PUSH
8871: FOR_TO
8872: IFFALSE 8954
// begin uc_side = side ;
8874: LD_ADDR_OWVAR 20
8878: PUSH
8879: LD_VAR 0 1
8883: ST_TO_ADDR
// uc_nation = nation ;
8884: LD_ADDR_OWVAR 21
8888: PUSH
8889: LD_VAR 0 2
8893: ST_TO_ADDR
// hc_name =  ;
8894: LD_ADDR_OWVAR 26
8898: PUSH
8899: LD_STRING 
8901: ST_TO_ADDR
// hc_gallery =  ;
8902: LD_ADDR_OWVAR 33
8906: PUSH
8907: LD_STRING 
8909: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8910: LD_INT 0
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: LD_VAR 0 8
8920: PPUSH
8921: CALL_OW 380
// un = CreateHuman ;
8925: LD_ADDR_VAR 0 16
8929: PUSH
8930: CALL_OW 44
8934: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8935: LD_VAR 0 16
8939: PPUSH
8940: LD_VAR 0 9
8944: PPUSH
8945: LD_INT 0
8947: PPUSH
8948: CALL_OW 49
// end ;
8952: GO 8871
8954: POP
8955: POP
// for i = 1 to sniperCount do
8956: LD_ADDR_VAR 0 14
8960: PUSH
8961: DOUBLE
8962: LD_INT 1
8964: DEC
8965: ST_TO_ADDR
8966: LD_VAR 0 4
8970: PUSH
8971: FOR_TO
8972: IFFALSE 9054
// begin uc_side = side ;
8974: LD_ADDR_OWVAR 20
8978: PUSH
8979: LD_VAR 0 1
8983: ST_TO_ADDR
// uc_nation = nation ;
8984: LD_ADDR_OWVAR 21
8988: PUSH
8989: LD_VAR 0 2
8993: ST_TO_ADDR
// hc_name =  ;
8994: LD_ADDR_OWVAR 26
8998: PUSH
8999: LD_STRING 
9001: ST_TO_ADDR
// hc_gallery =  ;
9002: LD_ADDR_OWVAR 33
9006: PUSH
9007: LD_STRING 
9009: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9010: LD_INT 0
9012: PPUSH
9013: LD_INT 5
9015: PPUSH
9016: LD_VAR 0 8
9020: PPUSH
9021: CALL_OW 380
// un = CreateHuman ;
9025: LD_ADDR_VAR 0 16
9029: PUSH
9030: CALL_OW 44
9034: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9035: LD_VAR 0 16
9039: PPUSH
9040: LD_VAR 0 9
9044: PPUSH
9045: LD_INT 0
9047: PPUSH
9048: CALL_OW 49
// end ;
9052: GO 8971
9054: POP
9055: POP
// for i = 1 to bazookCount do
9056: LD_ADDR_VAR 0 14
9060: PUSH
9061: DOUBLE
9062: LD_INT 1
9064: DEC
9065: ST_TO_ADDR
9066: LD_VAR 0 5
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9154
// begin uc_side = side ;
9074: LD_ADDR_OWVAR 20
9078: PUSH
9079: LD_VAR 0 1
9083: ST_TO_ADDR
// uc_nation = nation ;
9084: LD_ADDR_OWVAR 21
9088: PUSH
9089: LD_VAR 0 2
9093: ST_TO_ADDR
// hc_name =  ;
9094: LD_ADDR_OWVAR 26
9098: PUSH
9099: LD_STRING 
9101: ST_TO_ADDR
// hc_gallery =  ;
9102: LD_ADDR_OWVAR 33
9106: PUSH
9107: LD_STRING 
9109: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9110: LD_INT 0
9112: PPUSH
9113: LD_INT 9
9115: PPUSH
9116: LD_VAR 0 8
9120: PPUSH
9121: CALL_OW 380
// un = CreateHuman ;
9125: LD_ADDR_VAR 0 16
9129: PUSH
9130: CALL_OW 44
9134: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9135: LD_VAR 0 16
9139: PPUSH
9140: LD_VAR 0 9
9144: PPUSH
9145: LD_INT 0
9147: PPUSH
9148: CALL_OW 49
// end ;
9152: GO 9071
9154: POP
9155: POP
// for i = 1 to mortalCount do
9156: LD_ADDR_VAR 0 14
9160: PUSH
9161: DOUBLE
9162: LD_INT 1
9164: DEC
9165: ST_TO_ADDR
9166: LD_VAR 0 6
9170: PUSH
9171: FOR_TO
9172: IFFALSE 9254
// begin uc_side = side ;
9174: LD_ADDR_OWVAR 20
9178: PUSH
9179: LD_VAR 0 1
9183: ST_TO_ADDR
// uc_nation = nation ;
9184: LD_ADDR_OWVAR 21
9188: PUSH
9189: LD_VAR 0 2
9193: ST_TO_ADDR
// hc_name =  ;
9194: LD_ADDR_OWVAR 26
9198: PUSH
9199: LD_STRING 
9201: ST_TO_ADDR
// hc_gallery =  ;
9202: LD_ADDR_OWVAR 33
9206: PUSH
9207: LD_STRING 
9209: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9210: LD_INT 0
9212: PPUSH
9213: LD_INT 8
9215: PPUSH
9216: LD_VAR 0 8
9220: PPUSH
9221: CALL_OW 380
// un = CreateHuman ;
9225: LD_ADDR_VAR 0 16
9229: PUSH
9230: CALL_OW 44
9234: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9235: LD_VAR 0 16
9239: PPUSH
9240: LD_VAR 0 9
9244: PPUSH
9245: LD_INT 0
9247: PPUSH
9248: CALL_OW 49
// end ;
9252: GO 9171
9254: POP
9255: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9256: LD_ADDR_VAR 0 19
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: LD_INT 25
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 25
9288: PUSH
9289: LD_INT 5
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 25
9298: PUSH
9299: LD_INT 8
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 25
9308: PUSH
9309: LD_INT 9
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PPUSH
9327: CALL_OW 69
9331: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9332: LD_ADDR_VAR 0 18
9336: PUSH
9337: LD_INT 22
9339: PUSH
9340: LD_VAR 0 1
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 25
9351: PUSH
9352: LD_INT 4
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// for i in medic_list do
9368: LD_ADDR_VAR 0 14
9372: PUSH
9373: LD_VAR 0 18
9377: PUSH
9378: FOR_IN
9379: IFFALSE 9397
// ComMoveToArea ( i , healArea ) ;
9381: LD_VAR 0 14
9385: PPUSH
9386: LD_VAR 0 10
9390: PPUSH
9391: CALL_OW 113
9395: GO 9378
9397: POP
9398: POP
// if strategy = 1 then
9399: LD_VAR 0 12
9403: PUSH
9404: LD_INT 1
9406: EQUAL
9407: IFFALSE 10112
// begin repeat wait ( 0 0$3 ) ;
9409: LD_INT 105
9411: PPUSH
9412: CALL_OW 67
// for i in soldiersOK_list do
9416: LD_ADDR_VAR 0 14
9420: PUSH
9421: LD_VAR 0 19
9425: PUSH
9426: FOR_IN
9427: IFFALSE 9461
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9429: LD_VAR 0 14
9433: PPUSH
9434: LD_INT 80
9436: PPUSH
9437: LD_INT 109
9439: PPUSH
9440: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
9444: LD_VAR 0 14
9448: PPUSH
9449: LD_INT 39
9451: PPUSH
9452: LD_INT 49
9454: PPUSH
9455: CALL_OW 174
// end ;
9459: GO 9426
9461: POP
9462: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
9463: LD_INT 15
9465: PPUSH
9466: LD_INT 22
9468: PUSH
9469: LD_VAR 0 1
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PPUSH
9478: CALL_OW 70
9482: PUSH
9483: LD_INT 0
9485: GREATER
9486: IFFALSE 9409
// repeat wait ( 0 0$1 ) ;
9488: LD_INT 35
9490: PPUSH
9491: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9495: LD_ADDR_VAR 0 17
9499: PUSH
9500: LD_INT 22
9502: PUSH
9503: LD_VAR 0 1
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: PUSH
9512: LD_INT 1
9514: PUSH
9515: LD_INT 3
9517: PUSH
9518: LD_INT 24
9520: PUSH
9521: LD_INT 550
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 24
9534: PUSH
9535: LD_INT 250
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 69
9555: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9556: LD_ADDR_VAR 0 19
9560: PUSH
9561: LD_INT 22
9563: PUSH
9564: LD_VAR 0 1
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 1
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 25
9608: PUSH
9609: LD_INT 9
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 24
9625: PUSH
9626: LD_INT 1000
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PPUSH
9638: CALL_OW 69
9642: ST_TO_ADDR
// if medicCount > 0 then
9643: LD_VAR 0 7
9647: PUSH
9648: LD_INT 0
9650: GREATER
9651: IFFALSE 9725
// begin if damageUnit_list > 0 then
9653: LD_VAR 0 17
9657: PUSH
9658: LD_INT 0
9660: GREATER
9661: IFFALSE 9725
// begin for i in damageUnit_list do
9663: LD_ADDR_VAR 0 14
9667: PUSH
9668: LD_VAR 0 17
9672: PUSH
9673: FOR_IN
9674: IFFALSE 9723
// begin ComMoveToArea ( i , healArea ) ;
9676: LD_VAR 0 14
9680: PPUSH
9681: LD_VAR 0 10
9685: PPUSH
9686: CALL_OW 113
// for j in medic_list do
9690: LD_ADDR_VAR 0 15
9694: PUSH
9695: LD_VAR 0 18
9699: PUSH
9700: FOR_IN
9701: IFFALSE 9719
// AddComHeal ( j , i ) ;
9703: LD_VAR 0 15
9707: PPUSH
9708: LD_VAR 0 14
9712: PPUSH
9713: CALL_OW 188
9717: GO 9700
9719: POP
9720: POP
// end ;
9721: GO 9673
9723: POP
9724: POP
// end ; end ; for i in soldiersOK_list do
9725: LD_ADDR_VAR 0 14
9729: PUSH
9730: LD_VAR 0 19
9734: PUSH
9735: FOR_IN
9736: IFFALSE 9912
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9738: LD_ADDR_VAR 0 22
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_VAR 0 11
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: PPUSH
9755: CALL_OW 69
9759: PPUSH
9760: LD_VAR 0 14
9764: PPUSH
9765: CALL_OW 74
9769: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9770: LD_ADDR_VAR 0 23
9774: PUSH
9775: LD_INT 22
9777: PUSH
9778: LD_VAR 0 11
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: LD_INT 59
9792: PUSH
9793: EMPTY
9794: LIST
9795: PUSH
9796: LD_INT 21
9798: PUSH
9799: LD_INT 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 21
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: PPUSH
9829: CALL_OW 69
9833: PPUSH
9834: LD_VAR 0 14
9838: PPUSH
9839: CALL_OW 74
9843: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9844: LD_VAR 0 14
9848: PPUSH
9849: LD_VAR 0 22
9853: PPUSH
9854: CALL_OW 296
9858: PUSH
9859: LD_INT 8
9861: PLUS
9862: PUSH
9863: LD_VAR 0 14
9867: PPUSH
9868: LD_VAR 0 23
9872: PPUSH
9873: CALL_OW 296
9877: LESS
9878: IFFALSE 9896
// begin ComAttackUnit ( i , target1 ) ;
9880: LD_VAR 0 14
9884: PPUSH
9885: LD_VAR 0 22
9889: PPUSH
9890: CALL_OW 115
// end else
9894: GO 9910
// begin ComAttackUnit ( i , target2 ) ;
9896: LD_VAR 0 14
9900: PPUSH
9901: LD_VAR 0 23
9905: PPUSH
9906: CALL_OW 115
// end ; end ;
9910: GO 9735
9912: POP
9913: POP
// for i in soldiersOK_list do
9914: LD_ADDR_VAR 0 14
9918: PUSH
9919: LD_VAR 0 19
9923: PUSH
9924: FOR_IN
9925: IFFALSE 10101
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9927: LD_ADDR_VAR 0 22
9931: PUSH
9932: LD_INT 22
9934: PUSH
9935: LD_VAR 0 11
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PPUSH
9949: LD_VAR 0 14
9953: PPUSH
9954: CALL_OW 74
9958: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9959: LD_ADDR_VAR 0 23
9963: PUSH
9964: LD_INT 22
9966: PUSH
9967: LD_VAR 0 11
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 2
9978: PUSH
9979: LD_INT 59
9981: PUSH
9982: EMPTY
9983: LIST
9984: PUSH
9985: LD_INT 21
9987: PUSH
9988: LD_INT 1
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 21
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: PPUSH
10018: CALL_OW 69
10022: PPUSH
10023: LD_VAR 0 14
10027: PPUSH
10028: CALL_OW 74
10032: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10033: LD_VAR 0 14
10037: PPUSH
10038: LD_VAR 0 22
10042: PPUSH
10043: CALL_OW 296
10047: PUSH
10048: LD_INT 8
10050: PLUS
10051: PUSH
10052: LD_VAR 0 14
10056: PPUSH
10057: LD_VAR 0 23
10061: PPUSH
10062: CALL_OW 296
10066: LESS
10067: IFFALSE 10085
// begin ComAttackUnit ( i , target1 ) ;
10069: LD_VAR 0 14
10073: PPUSH
10074: LD_VAR 0 22
10078: PPUSH
10079: CALL_OW 115
// end else
10083: GO 10099
// begin ComAttackUnit ( i , target2 ) ;
10085: LD_VAR 0 14
10089: PPUSH
10090: LD_VAR 0 23
10094: PPUSH
10095: CALL_OW 115
// end ; end ;
10099: GO 9924
10101: POP
10102: POP
// until soldiersOK_list = [ ] ;
10103: LD_VAR 0 19
10107: PUSH
10108: EMPTY
10109: EQUAL
10110: IFFALSE 9488
// end ; if strategy = 2 then
10112: LD_VAR 0 12
10116: PUSH
10117: LD_INT 2
10119: EQUAL
10120: IFFALSE 10825
// begin repeat wait ( 0 0$1 ) ;
10122: LD_INT 35
10124: PPUSH
10125: CALL_OW 67
// for i in soldiersOK_list do
10129: LD_ADDR_VAR 0 14
10133: PUSH
10134: LD_VAR 0 19
10138: PUSH
10139: FOR_IN
10140: IFFALSE 10174
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10142: LD_VAR 0 14
10146: PPUSH
10147: LD_INT 117
10149: PPUSH
10150: LD_INT 97
10152: PPUSH
10153: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10157: LD_VAR 0 14
10161: PPUSH
10162: LD_INT 94
10164: PPUSH
10165: LD_INT 50
10167: PPUSH
10168: CALL_OW 174
// end ;
10172: GO 10139
10174: POP
10175: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10176: LD_INT 16
10178: PPUSH
10179: LD_INT 22
10181: PUSH
10182: LD_VAR 0 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PPUSH
10191: CALL_OW 70
10195: PUSH
10196: LD_INT 0
10198: GREATER
10199: IFFALSE 10122
// repeat wait ( 0 0$3 ) ;
10201: LD_INT 105
10203: PPUSH
10204: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10208: LD_ADDR_VAR 0 17
10212: PUSH
10213: LD_INT 22
10215: PUSH
10216: LD_VAR 0 1
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: LD_INT 3
10230: PUSH
10231: LD_INT 24
10233: PUSH
10234: LD_INT 550
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: LD_INT 250
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 69
10268: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10269: LD_ADDR_VAR 0 19
10273: PUSH
10274: LD_INT 22
10276: PUSH
10277: LD_VAR 0 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 2
10288: PUSH
10289: LD_INT 25
10291: PUSH
10292: LD_INT 1
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 25
10301: PUSH
10302: LD_INT 5
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 25
10311: PUSH
10312: LD_INT 8
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: PUSH
10319: LD_INT 25
10321: PUSH
10322: LD_INT 9
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 24
10338: PUSH
10339: LD_INT 1000
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: ST_TO_ADDR
// if medicCount > 0 then
10356: LD_VAR 0 7
10360: PUSH
10361: LD_INT 0
10363: GREATER
10364: IFFALSE 10438
// begin if damageUnit_list > 0 then
10366: LD_VAR 0 17
10370: PUSH
10371: LD_INT 0
10373: GREATER
10374: IFFALSE 10438
// begin for i in damageUnit_list do
10376: LD_ADDR_VAR 0 14
10380: PUSH
10381: LD_VAR 0 17
10385: PUSH
10386: FOR_IN
10387: IFFALSE 10436
// begin ComMoveToArea ( i , healArea ) ;
10389: LD_VAR 0 14
10393: PPUSH
10394: LD_VAR 0 10
10398: PPUSH
10399: CALL_OW 113
// for j in medic_list do
10403: LD_ADDR_VAR 0 15
10407: PUSH
10408: LD_VAR 0 18
10412: PUSH
10413: FOR_IN
10414: IFFALSE 10432
// AddComHeal ( j , i ) ;
10416: LD_VAR 0 15
10420: PPUSH
10421: LD_VAR 0 14
10425: PPUSH
10426: CALL_OW 188
10430: GO 10413
10432: POP
10433: POP
// end ;
10434: GO 10386
10436: POP
10437: POP
// end ; end ; for i in soldiersOK_list do
10438: LD_ADDR_VAR 0 14
10442: PUSH
10443: LD_VAR 0 19
10447: PUSH
10448: FOR_IN
10449: IFFALSE 10625
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10451: LD_ADDR_VAR 0 22
10455: PUSH
10456: LD_INT 22
10458: PUSH
10459: LD_VAR 0 11
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: PPUSH
10473: LD_VAR 0 14
10477: PPUSH
10478: CALL_OW 74
10482: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10483: LD_ADDR_VAR 0 23
10487: PUSH
10488: LD_INT 22
10490: PUSH
10491: LD_VAR 0 11
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: LD_INT 59
10505: PUSH
10506: EMPTY
10507: LIST
10508: PUSH
10509: LD_INT 21
10511: PUSH
10512: LD_INT 1
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 21
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: PPUSH
10542: CALL_OW 69
10546: PPUSH
10547: LD_VAR 0 14
10551: PPUSH
10552: CALL_OW 74
10556: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10557: LD_VAR 0 14
10561: PPUSH
10562: LD_VAR 0 22
10566: PPUSH
10567: CALL_OW 296
10571: PUSH
10572: LD_INT 8
10574: PLUS
10575: PUSH
10576: LD_VAR 0 14
10580: PPUSH
10581: LD_VAR 0 23
10585: PPUSH
10586: CALL_OW 296
10590: LESS
10591: IFFALSE 10609
// begin ComAttackUnit ( i , target1 ) ;
10593: LD_VAR 0 14
10597: PPUSH
10598: LD_VAR 0 22
10602: PPUSH
10603: CALL_OW 115
// end else
10607: GO 10623
// begin ComAttackUnit ( i , target2 ) ;
10609: LD_VAR 0 14
10613: PPUSH
10614: LD_VAR 0 23
10618: PPUSH
10619: CALL_OW 115
// end ; end ;
10623: GO 10448
10625: POP
10626: POP
// for i in soldiersOK_list do
10627: LD_ADDR_VAR 0 14
10631: PUSH
10632: LD_VAR 0 19
10636: PUSH
10637: FOR_IN
10638: IFFALSE 10814
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10640: LD_ADDR_VAR 0 22
10644: PUSH
10645: LD_INT 22
10647: PUSH
10648: LD_VAR 0 11
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PPUSH
10657: CALL_OW 69
10661: PPUSH
10662: LD_VAR 0 14
10666: PPUSH
10667: CALL_OW 74
10671: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10672: LD_ADDR_VAR 0 23
10676: PUSH
10677: LD_INT 22
10679: PUSH
10680: LD_VAR 0 11
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 59
10694: PUSH
10695: EMPTY
10696: LIST
10697: PUSH
10698: LD_INT 21
10700: PUSH
10701: LD_INT 1
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 21
10710: PUSH
10711: LD_INT 2
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: EMPTY
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_VAR 0 14
10740: PPUSH
10741: CALL_OW 74
10745: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10746: LD_VAR 0 14
10750: PPUSH
10751: LD_VAR 0 22
10755: PPUSH
10756: CALL_OW 296
10760: PUSH
10761: LD_INT 8
10763: PLUS
10764: PUSH
10765: LD_VAR 0 14
10769: PPUSH
10770: LD_VAR 0 23
10774: PPUSH
10775: CALL_OW 296
10779: LESS
10780: IFFALSE 10798
// begin ComAttackUnit ( i , target1 ) ;
10782: LD_VAR 0 14
10786: PPUSH
10787: LD_VAR 0 22
10791: PPUSH
10792: CALL_OW 115
// end else
10796: GO 10812
// begin ComAttackUnit ( i , target2 ) ;
10798: LD_VAR 0 14
10802: PPUSH
10803: LD_VAR 0 23
10807: PPUSH
10808: CALL_OW 115
// end ; end ;
10812: GO 10637
10814: POP
10815: POP
// until soldiersOK_list = [ ] ;
10816: LD_VAR 0 19
10820: PUSH
10821: EMPTY
10822: EQUAL
10823: IFFALSE 10201
// end ; end ; end_of_file
10825: LD_VAR 0 13
10829: RET
// every 0 0$01 do
10830: GO 10832
10832: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10833: LD_INT 22
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 25
10845: PUSH
10846: LD_INT 2
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: PUSH
10862: LD_INT 0
10864: EQUAL
10865: IFFALSE 10879
// SetClass ( JMM , 2 ) ;
10867: LD_EXP 1
10871: PPUSH
10872: LD_INT 2
10874: PPUSH
10875: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10879: LD_STRING M1
10881: PPUSH
10882: CALL_OW 337
// case difficulty of 1 :
10886: LD_OWVAR 67
10890: PUSH
10891: LD_INT 1
10893: DOUBLE
10894: EQUAL
10895: IFTRUE 10899
10897: GO 10909
10899: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10900: LD_STRING M1-1
10902: PPUSH
10903: CALL_OW 337
10907: GO 10946
10909: LD_INT 2
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 10927
10917: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10918: LD_STRING M1-2
10920: PPUSH
10921: CALL_OW 337
10925: GO 10946
10927: LD_INT 3
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10935
10933: GO 10945
10935: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10936: LD_STRING M1-3
10938: PPUSH
10939: CALL_OW 337
10943: GO 10946
10945: POP
// ChangeMissionObjectives ( M1cont ) ;
10946: LD_STRING M1cont
10948: PPUSH
10949: CALL_OW 337
// SaveForQuickRestart ;
10953: CALL_OW 22
// end ;
10957: END
// every 0 0$1 do
10958: GO 10960
10960: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10961: LD_INT 350
10963: PPUSH
10964: LD_INT 875
10966: PPUSH
10967: CALL_OW 12
10971: PPUSH
10972: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10976: LD_INT 5
10978: PPUSH
10979: LD_INT 4
10981: PPUSH
10982: LD_INT 1
10984: PPUSH
10985: CALL_OW 55
// wait ( 0 0$15 ) ;
10989: LD_INT 525
10991: PPUSH
10992: CALL_OW 67
// if IsOk ( Lisa ) then
10996: LD_EXP 2
11000: PPUSH
11001: CALL_OW 302
11005: IFFALSE 11021
// begin Say ( Lisa , DR0-Lisa-1 ) ;
11007: LD_EXP 2
11011: PPUSH
11012: LD_STRING DR0-Lisa-1
11014: PPUSH
11015: CALL_OW 88
// end else
11019: GO 11171
// begin if IsOK ( Cyrus ) then
11021: LD_EXP 4
11025: PPUSH
11026: CALL_OW 302
11030: IFFALSE 11046
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
11032: LD_EXP 4
11036: PPUSH
11037: LD_STRING DR0-Cyrus-1
11039: PPUSH
11040: CALL_OW 88
// end else
11044: GO 11171
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11046: LD_INT 22
11048: PUSH
11049: LD_INT 1
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 21
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: LD_INT 25
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 2
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 25
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 4
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 26
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: PPUSH
11135: CALL_OW 69
11139: PUSH
11140: LD_EXP 1
11144: PUSH
11145: LD_EXP 8
11149: PUSH
11150: LD_EXP 5
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: DIFF
11160: PPUSH
11161: LD_STRING DR0-Sol1-1
11163: PPUSH
11164: LD_STRING DR0-Sol1-1
11166: PPUSH
11167: CALL 5024 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11171: LD_INT 22
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 21
11183: PUSH
11184: LD_INT 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 2
11193: PUSH
11194: LD_INT 25
11196: PUSH
11197: LD_INT 1
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 25
11206: PUSH
11207: LD_INT 2
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 25
11216: PUSH
11217: LD_INT 3
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 25
11226: PUSH
11227: LD_INT 4
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 26
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: PPUSH
11260: CALL_OW 69
11264: PUSH
11265: LD_EXP 1
11269: PUSH
11270: LD_EXP 8
11274: PUSH
11275: LD_EXP 5
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: DIFF
11285: PPUSH
11286: LD_STRING DR0-Sol2-1
11288: PPUSH
11289: LD_STRING DR0-Sol2-1
11291: PPUSH
11292: CALL 5024 0 3
// Say ( JMM , DR0-JMM-1 ) ;
11296: LD_EXP 1
11300: PPUSH
11301: LD_STRING DR0-JMM-1
11303: PPUSH
11304: CALL_OW 88
// end ;
11308: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11309: LD_EXP 5
11313: PPUSH
11314: CALL_OW 302
11318: PUSH
11319: LD_INT 22
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 25
11331: PUSH
11332: LD_INT 16
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PPUSH
11343: CALL_OW 69
11347: PUSH
11348: LD_INT 0
11350: GREATER
11351: AND
11352: IFFALSE 11630
11354: GO 11356
11356: DISABLE
// begin DialogueOn ;
11357: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11361: LD_EXP 5
11365: PPUSH
11366: LD_STRING D10-Frank-1
11368: PPUSH
11369: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11373: LD_INT 22
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 21
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 1
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 25
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 25
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 25
11428: PUSH
11429: LD_INT 4
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: PPUSH
11448: CALL_OW 69
11452: PUSH
11453: LD_EXP 1
11457: PUSH
11458: LD_EXP 5
11462: PUSH
11463: LD_EXP 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: DIFF
11473: PPUSH
11474: LD_STRING D10-Sol1-1
11476: PPUSH
11477: LD_STRING D10-FSol1-1
11479: PPUSH
11480: CALL 5024 0 3
// Say ( Frank , D10-Frank-2 ) ;
11484: LD_EXP 5
11488: PPUSH
11489: LD_STRING D10-Frank-2
11491: PPUSH
11492: CALL_OW 88
// if IsOK ( Lisa ) then
11496: LD_EXP 2
11500: PPUSH
11501: CALL_OW 302
11505: IFFALSE 11521
// begin Say ( Lisa , D10-Lisa-2 ) ;
11507: LD_EXP 2
11511: PPUSH
11512: LD_STRING D10-Lisa-2
11514: PPUSH
11515: CALL_OW 88
// end else
11519: GO 11626
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
11521: LD_INT 22
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 21
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 2
11543: PUSH
11544: LD_INT 25
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 25
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 25
11566: PUSH
11567: LD_INT 3
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 25
11576: PUSH
11577: LD_INT 4
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: PUSH
11601: LD_EXP 1
11605: PUSH
11606: LD_EXP 5
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: DIFF
11615: PPUSH
11616: LD_STRING D10-Sol1-2
11618: PPUSH
11619: LD_STRING D10-FSol1-2
11621: PPUSH
11622: CALL 5024 0 3
// end ; DialogueOff ;
11626: CALL_OW 7
// end ;
11630: END
// every 10 10$30 do
11631: GO 11633
11633: DISABLE
// begin HarrisonSupport ;
11634: CALL 1973 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11638: LD_EXP 16
11642: PPUSH
11643: CALL_OW 310
11647: PPUSH
11648: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11652: LD_EXP 16
11656: PPUSH
11657: LD_STRING DEng-Eng1-1
11659: PPUSH
11660: CALL_OW 88
// wait ( 1 1$0 ) ;
11664: LD_INT 2100
11666: PPUSH
11667: CALL_OW 67
// DialogueOn ;
11671: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11675: LD_EXP 13
11679: PPUSH
11680: LD_STRING DRem-Har-1
11682: PPUSH
11683: CALL_OW 94
// if contactWithRussian = 1 then
11687: LD_EXP 21
11691: PUSH
11692: LD_INT 1
11694: EQUAL
11695: IFFALSE 11711
// begin Say ( JMM , DRem-JMM-1 ) ;
11697: LD_EXP 1
11701: PPUSH
11702: LD_STRING DRem-JMM-1
11704: PPUSH
11705: CALL_OW 88
// end else
11709: GO 11723
// begin Say ( JMM , DRem-JMM-1a ) ;
11711: LD_EXP 1
11715: PPUSH
11716: LD_STRING DRem-JMM-1a
11718: PPUSH
11719: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11723: LD_EXP 13
11727: PPUSH
11728: LD_STRING DRem-Har-2
11730: PPUSH
11731: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11735: LD_STRING DenisInDelta
11737: PPUSH
11738: LD_INT 0
11740: PPUSH
11741: CALL_OW 30
11745: PUSH
11746: LD_INT 1
11748: EQUAL
11749: IFFALSE 11765
// begin Say ( JMM , DRem-JMM-2 ) ;
11751: LD_EXP 1
11755: PPUSH
11756: LD_STRING DRem-JMM-2
11758: PPUSH
11759: CALL_OW 88
// end else
11763: GO 11777
// begin Say ( JMM , DRem-JMM-2a ) ;
11765: LD_EXP 1
11769: PPUSH
11770: LD_STRING DRem-JMM-2a
11772: PPUSH
11773: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11777: LD_EXP 13
11781: PPUSH
11782: LD_STRING DRem-Har-3
11784: PPUSH
11785: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11789: LD_EXP 1
11793: PPUSH
11794: LD_STRING DRem-JMM-3
11796: PPUSH
11797: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11801: LD_EXP 13
11805: PPUSH
11806: LD_STRING DRem-Har-4
11808: PPUSH
11809: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11813: LD_STRING DenisInDelta
11815: PPUSH
11816: LD_INT 0
11818: PPUSH
11819: CALL_OW 30
11823: PUSH
11824: LD_INT 1
11826: EQUAL
11827: IFFALSE 11855
// begin Say ( JMM , DRem-JMM-4 ) ;
11829: LD_EXP 1
11833: PPUSH
11834: LD_STRING DRem-JMM-4
11836: PPUSH
11837: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11841: LD_EXP 13
11845: PPUSH
11846: LD_STRING DRem-Har-5
11848: PPUSH
11849: CALL_OW 94
// end else
11853: GO 11888
// begin SetRestrict ( 36 , 1 , true ) ;
11855: LD_INT 36
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11868: LD_INT 15
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11881: LD_STRING MR
11883: PPUSH
11884: CALL_OW 337
// end ; DialogueOff ;
11888: CALL_OW 7
// end ;
11892: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11893: LD_STRING DenisInDelta
11895: PPUSH
11896: LD_INT 0
11898: PPUSH
11899: CALL_OW 30
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: IFFALSE 12038
11909: GO 11911
11911: DISABLE
// begin PrepareDenis ;
11912: CALL 1894 0 0
// CenterNowOnUnits ( Denis ) ;
11916: LD_EXP 9
11920: PPUSH
11921: CALL_OW 87
// DialogueOn ;
11925: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11929: LD_EXP 9
11933: PPUSH
11934: LD_STRING DDen-Den-1
11936: PPUSH
11937: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11941: LD_EXP 1
11945: PPUSH
11946: LD_STRING DDen-JMM-1
11948: PPUSH
11949: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11953: LD_EXP 9
11957: PPUSH
11958: LD_STRING DDen-Den-2
11960: PPUSH
11961: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11965: LD_EXP 1
11969: PPUSH
11970: LD_STRING DDen-JMM-2
11972: PPUSH
11973: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11977: LD_EXP 9
11981: PPUSH
11982: LD_STRING DDen-Den-3
11984: PPUSH
11985: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11989: LD_EXP 1
11993: PPUSH
11994: LD_STRING DDen-JMM-3
11996: PPUSH
11997: CALL_OW 88
// DialogueOff ;
12001: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12005: LD_INT 36
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12018: LD_INT 15
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12031: LD_STRING MR
12033: PPUSH
12034: CALL_OW 337
// end ;
12038: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12039: CALL 12084 0 0
12043: PUSH
12044: LD_EXP 9
12048: PPUSH
12049: CALL_OW 302
12053: AND
12054: IFFALSE 12083
12056: GO 12058
12058: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12059: LD_EXP 9
12063: PPUSH
12064: LD_STRING DR1-Den-1
12066: PPUSH
12067: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12071: LD_EXP 1
12075: PPUSH
12076: LD_STRING DR1-JMM-1
12078: PPUSH
12079: CALL_OW 88
// end ;
12083: END
// function CheckOptoLab ; var i ; begin
12084: LD_INT 0
12086: PPUSH
12087: PPUSH
// result = false ;
12088: LD_ADDR_VAR 0 1
12092: PUSH
12093: LD_INT 0
12095: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12096: LD_ADDR_VAR 0 2
12100: PUSH
12101: LD_INT 22
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 7
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 30
12126: PUSH
12127: LD_INT 8
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: FOR_IN
12149: IFFALSE 12201
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12151: LD_VAR 0 2
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 268
12163: PUSH
12164: LD_INT 15
12166: EQUAL
12167: PUSH
12168: LD_VAR 0 2
12172: PPUSH
12173: LD_INT 2
12175: PPUSH
12176: CALL_OW 268
12180: PUSH
12181: LD_INT 15
12183: EQUAL
12184: OR
12185: IFFALSE 12197
// begin result = true ;
12187: LD_ADDR_VAR 0 1
12191: PUSH
12192: LD_INT 1
12194: ST_TO_ADDR
// break ;
12195: GO 12201
// end ; break ;
12197: GO 12201
// end ;
12199: GO 12148
12201: POP
12202: POP
// end ;
12203: LD_VAR 0 1
12207: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12208: LD_INT 15
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 321
12218: PUSH
12219: LD_INT 2
12221: EQUAL
12222: PUSH
12223: LD_EXP 9
12227: PPUSH
12228: CALL_OW 302
12232: AND
12233: IFFALSE 12465
12235: GO 12237
12237: DISABLE
// begin DialogueOn ;
12238: CALL_OW 6
// if IsOK ( Denis ) then
12242: LD_EXP 9
12246: PPUSH
12247: CALL_OW 302
12251: IFFALSE 12267
// begin Say ( Denis , DR2-Den-1 ) ;
12253: LD_EXP 9
12257: PPUSH
12258: LD_STRING DR2-Den-1
12260: PPUSH
12261: CALL_OW 88
// end else
12265: GO 12326
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12267: LD_INT 22
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 25
12289: PUSH
12290: LD_INT 4
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 69
12306: PUSH
12307: LD_EXP 1
12311: PUSH
12312: EMPTY
12313: LIST
12314: DIFF
12315: PPUSH
12316: LD_STRING DR2-Sci1-1
12318: PPUSH
12319: LD_STRING DR2-FSci1-1
12321: PPUSH
12322: CALL 5024 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12326: LD_EXP 1
12330: PPUSH
12331: LD_STRING DR2-JMM-1
12333: PPUSH
12334: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12338: LD_INT 22
12340: PUSH
12341: LD_INT 1
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 21
12350: PUSH
12351: LD_INT 1
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PUSH
12358: LD_INT 2
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 1
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: LD_INT 25
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 25
12383: PUSH
12384: LD_INT 3
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 25
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: LIST
12412: PPUSH
12413: CALL_OW 69
12417: PUSH
12418: LD_EXP 1
12422: PUSH
12423: LD_EXP 9
12427: PUSH
12428: LD_EXP 8
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: DIFF
12438: PPUSH
12439: LD_STRING DR2-Sol1-1
12441: PPUSH
12442: LD_STRING DR2-Sol1-11
12444: PPUSH
12445: CALL 5024 0 3
// Say ( JMM , DR2-JMM-2 ) ;
12449: LD_EXP 1
12453: PPUSH
12454: LD_STRING DR2-JMM-2
12456: PPUSH
12457: CALL_OW 88
// DialogueOff ;
12461: CALL_OW 7
// end ;
12465: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
12466: LD_INT 22
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 30
12478: PUSH
12479: LD_INT 36
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PPUSH
12490: CALL_OW 69
12494: PUSH
12495: LD_INT 0
12497: EQUAL
12498: PUSH
12499: LD_INT 22
12501: PUSH
12502: LD_INT 1
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 33
12521: PUSH
12522: LD_INT 2
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 69
12538: PUSH
12539: LD_INT 0
12541: GREATER
12542: AND
12543: PUSH
12544: LD_EXP 22
12548: PUSH
12549: LD_INT 0
12551: EQUAL
12552: AND
12553: IFFALSE 12679
12555: GO 12557
12557: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
12558: LD_INT 22
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 21
12570: PUSH
12571: LD_INT 1
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 25
12580: PUSH
12581: LD_INT 3
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: PUSH
12598: LD_EXP 1
12602: PUSH
12603: LD_EXP 6
12607: PUSH
12608: LD_EXP 7
12612: PUSH
12613: LD_EXP 9
12617: PUSH
12618: LD_EXP 14
12622: PUSH
12623: LD_EXP 3
12627: PUSH
12628: LD_EXP 4
12632: PUSH
12633: LD_EXP 2
12637: PUSH
12638: LD_EXP 5
12642: PUSH
12643: LD_EXP 8
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: DIFF
12660: PPUSH
12661: LD_STRING D3a-Mech1-1
12663: PPUSH
12664: LD_STRING D3a-Mech1-1
12666: PPUSH
12667: CALL 5024 0 3
// firstTower = 2 ;
12671: LD_ADDR_EXP 22
12675: PUSH
12676: LD_INT 2
12678: ST_TO_ADDR
// end ;
12679: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12680: LD_INT 22
12682: PUSH
12683: LD_INT 3
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 21
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: PUSH
12709: LD_INT 0
12711: EQUAL
12712: IFFALSE 12827
12714: GO 12716
12716: DISABLE
12717: LD_INT 0
12719: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12720: LD_ADDR_VAR 0 1
12724: PUSH
12725: LD_INT 22
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 21
12737: PUSH
12738: LD_INT 1
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: LD_INT 2
12747: PUSH
12748: LD_INT 25
12750: PUSH
12751: LD_INT 1
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 25
12760: PUSH
12761: LD_INT 2
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 25
12770: PUSH
12771: LD_INT 3
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 25
12780: PUSH
12781: LD_INT 4
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: LIST
12799: PPUSH
12800: CALL_OW 69
12804: PUSH
12805: FOR_IN
12806: IFFALSE 12825
// AddExperience ( i , 1 , 10000 ) ;
12808: LD_VAR 0 1
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: LD_INT 10000
12818: PPUSH
12819: CALL_OW 492
12823: GO 12805
12825: POP
12826: POP
// end ;
12827: PPOPN 1
12829: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12830: LD_INT 22
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 30
12842: PUSH
12843: LD_INT 36
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 69
12858: PUSH
12859: LD_INT 0
12861: GREATER
12862: PUSH
12863: LD_INT 22
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 21
12875: PUSH
12876: LD_INT 2
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 33
12885: PUSH
12886: LD_INT 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: PUSH
12903: LD_INT 0
12905: GREATER
12906: AND
12907: PUSH
12908: CALL 13490 0 0
12912: AND
12913: IFFALSE 13487
12915: GO 12917
12917: DISABLE
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12925: LD_ADDR_VAR 0 3
12929: PUSH
12930: LD_INT 22
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 30
12942: PUSH
12943: LD_INT 36
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PPUSH
12954: CALL_OW 69
12958: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12959: LD_ADDR_VAR 0 4
12963: PUSH
12964: LD_INT 22
12966: PUSH
12967: LD_INT 1
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 33
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 69
13003: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13004: LD_ADDR_VAR 0 5
13008: PUSH
13009: EMPTY
13010: ST_TO_ADDR
// for i in tmpControlTowers do
13011: LD_ADDR_VAR 0 1
13015: PUSH
13016: LD_VAR 0 3
13020: PUSH
13021: FOR_IN
13022: IFFALSE 13485
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13024: LD_EXP 1
13028: PPUSH
13029: CALL_OW 310
13033: PUSH
13034: LD_VAR 0 1
13038: EQUAL
13039: PUSH
13040: LD_EXP 1
13044: PPUSH
13045: CALL_OW 257
13049: PUSH
13050: LD_INT 3
13052: EQUAL
13053: AND
13054: IFFALSE 13184
// begin InGameOn ;
13056: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13060: LD_VAR 0 4
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13073: LD_EXP 1
13077: PPUSH
13078: LD_STRING D4a-JMM-1
13080: PPUSH
13081: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13085: LD_VAR 0 4
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: LD_EXP 1
13098: PPUSH
13099: CALL_OW 53
// wait ( 0 0$1 ) ;
13103: LD_INT 35
13105: PPUSH
13106: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13110: LD_VAR 0 4
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: PPUSH
13119: LD_VAR 0 4
13123: PUSH
13124: LD_INT 1
13126: ARRAY
13127: PPUSH
13128: CALL_OW 250
13132: PUSH
13133: LD_INT 3
13135: PLUS
13136: PPUSH
13137: LD_VAR 0 4
13141: PUSH
13142: LD_INT 1
13144: ARRAY
13145: PPUSH
13146: CALL_OW 251
13150: PUSH
13151: LD_INT 2
13153: MINUS
13154: PPUSH
13155: CALL_OW 111
// wait ( 0 0$2 ) ;
13159: LD_INT 70
13161: PPUSH
13162: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13166: LD_EXP 1
13170: PPUSH
13171: LD_STRING D4b-JMM-1
13173: PPUSH
13174: CALL_OW 88
// InGameOff ;
13178: CALL_OW 9
// end else
13182: GO 13483
// begin InGameOn ;
13184: CALL_OW 8
// for j in UnitsInside ( i ) do
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: LD_VAR 0 1
13197: PPUSH
13198: CALL_OW 313
13202: PUSH
13203: FOR_IN
13204: IFFALSE 13239
// if GetClass ( j ) = 3 then
13206: LD_VAR 0 2
13210: PPUSH
13211: CALL_OW 257
13215: PUSH
13216: LD_INT 3
13218: EQUAL
13219: IFFALSE 13237
// tmpMechanicInside = tmpMechanicInside ^ j ;
13221: LD_ADDR_VAR 0 5
13225: PUSH
13226: LD_VAR 0 5
13230: PUSH
13231: LD_VAR 0 2
13235: ADD
13236: ST_TO_ADDR
13237: GO 13203
13239: POP
13240: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13241: LD_VAR 0 5
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: PPUSH
13250: CALL_OW 258
13254: PUSH
13255: LD_INT 1
13257: EQUAL
13258: IFFALSE 13276
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13260: LD_VAR 0 5
13264: PUSH
13265: LD_INT 1
13267: ARRAY
13268: PPUSH
13269: LD_STRING D4a-Mech1-1
13271: PPUSH
13272: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13276: LD_VAR 0 5
13280: PUSH
13281: LD_INT 1
13283: ARRAY
13284: PPUSH
13285: CALL_OW 258
13289: PUSH
13290: LD_INT 2
13292: EQUAL
13293: IFFALSE 13311
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13295: LD_VAR 0 5
13299: PUSH
13300: LD_INT 1
13302: ARRAY
13303: PPUSH
13304: LD_STRING D4a-FMech1-1
13306: PPUSH
13307: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13311: LD_VAR 0 4
13315: PUSH
13316: LD_INT 1
13318: ARRAY
13319: PPUSH
13320: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13324: LD_VAR 0 4
13328: PUSH
13329: LD_INT 1
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 5
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PPUSH
13342: CALL_OW 53
// wait ( 0 0$1 ) ;
13346: LD_INT 35
13348: PPUSH
13349: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13353: LD_VAR 0 4
13357: PUSH
13358: LD_INT 1
13360: ARRAY
13361: PPUSH
13362: LD_VAR 0 4
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: CALL_OW 250
13375: PUSH
13376: LD_INT 3
13378: PLUS
13379: PPUSH
13380: LD_VAR 0 4
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: CALL_OW 251
13393: PUSH
13394: LD_INT 2
13396: MINUS
13397: PPUSH
13398: CALL_OW 111
// wait ( 0 0$2 ) ;
13402: LD_INT 70
13404: PPUSH
13405: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13409: LD_VAR 0 5
13413: PUSH
13414: LD_INT 1
13416: ARRAY
13417: PPUSH
13418: CALL_OW 258
13422: PUSH
13423: LD_INT 1
13425: EQUAL
13426: IFFALSE 13444
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
13428: LD_VAR 0 5
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_STRING D4b-Mech1-1
13439: PPUSH
13440: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13444: LD_VAR 0 5
13448: PUSH
13449: LD_INT 1
13451: ARRAY
13452: PPUSH
13453: CALL_OW 258
13457: PUSH
13458: LD_INT 2
13460: EQUAL
13461: IFFALSE 13479
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
13463: LD_VAR 0 5
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: LD_STRING D4b-FMech1-1
13474: PPUSH
13475: CALL_OW 88
// InGameOff ;
13479: CALL_OW 9
// end ; end ;
13483: GO 13021
13485: POP
13486: POP
// end ;
13487: PPOPN 5
13489: END
// function CheckMehInside ; var i , j ; begin
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
// result = false ;
13495: LD_ADDR_VAR 0 1
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
13503: LD_ADDR_VAR 0 2
13507: PUSH
13508: LD_INT 22
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 30
13520: PUSH
13521: LD_INT 36
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 69
13536: PUSH
13537: FOR_IN
13538: IFFALSE 13589
// begin for j in UnitsInside ( i ) do
13540: LD_ADDR_VAR 0 3
13544: PUSH
13545: LD_VAR 0 2
13549: PPUSH
13550: CALL_OW 313
13554: PUSH
13555: FOR_IN
13556: IFFALSE 13585
// begin if GetClass ( j ) = 3 then
13558: LD_VAR 0 3
13562: PPUSH
13563: CALL_OW 257
13567: PUSH
13568: LD_INT 3
13570: EQUAL
13571: IFFALSE 13583
// begin result = true ;
13573: LD_ADDR_VAR 0 1
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// break ;
13581: GO 13585
// end ; end ;
13583: GO 13555
13585: POP
13586: POP
// end ;
13587: GO 13537
13589: POP
13590: POP
// end ;
13591: LD_VAR 0 1
13595: RET
// every 25 25$0 do
13596: GO 13598
13598: DISABLE
// begin PrepareKurt ;
13599: CALL 16850 0 0
// end ;
13603: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
13604: LD_EXP 18
13608: PPUSH
13609: LD_INT 9
13611: PPUSH
13612: CALL_OW 308
13616: PUSH
13617: LD_EXP 20
13621: PUSH
13622: LD_INT 1
13624: EQUAL
13625: AND
13626: IFFALSE 13700
13628: GO 13630
13630: DISABLE
// begin RemoveUnit ( Kurt ) ;
13631: LD_EXP 18
13635: PPUSH
13636: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
13640: LD_EXP 18
13644: PPUSH
13645: LD_STRING Kurt
13647: PPUSH
13648: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13652: LD_INT 1
13654: PPUSH
13655: LD_INT 2
13657: PPUSH
13658: CALL_OW 81
13662: PUSH
13663: LD_INT 0
13665: EQUAL
13666: IFFALSE 13676
// KurtStatus = 1 ;
13668: LD_ADDR_EXP 19
13672: PUSH
13673: LD_INT 1
13675: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13676: LD_INT 1
13678: PPUSH
13679: LD_INT 2
13681: PPUSH
13682: CALL_OW 81
13686: PUSH
13687: LD_INT 2
13689: EQUAL
13690: IFFALSE 13700
// KurtStatus = 2 ;
13692: LD_ADDR_EXP 19
13696: PUSH
13697: LD_INT 2
13699: ST_TO_ADDR
// end ;
13700: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13701: LD_INT 1
13703: PPUSH
13704: LD_INT 2
13706: PPUSH
13707: CALL_OW 81
13711: PUSH
13712: LD_INT 2
13714: EQUAL
13715: PUSH
13716: LD_EXP 18
13720: PPUSH
13721: CALL_OW 302
13725: AND
13726: IFFALSE 13751
13728: GO 13730
13730: DISABLE
// begin DialogueOn ;
13731: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13735: LD_EXP 18
13739: PPUSH
13740: LD_STRING D2a-Kurt-1
13742: PPUSH
13743: CALL_OW 88
// DialogueOff ;
13747: CALL_OW 7
// end ;
13751: END
// every 35 35$0 do
13752: GO 13754
13754: DISABLE
// begin PrepareJoan ;
13755: CALL 2445 0 0
// wait ( 1 1$0 ) ;
13759: LD_INT 2100
13761: PPUSH
13762: CALL_OW 67
// if IsOK ( Lisa ) then
13766: LD_EXP 2
13770: PPUSH
13771: CALL_OW 302
13775: IFFALSE 13905
// begin DialogueOn ;
13777: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13781: LD_EXP 2
13785: PPUSH
13786: LD_STRING D7-Lisa-1
13788: PPUSH
13789: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13793: LD_EXP 1
13797: PPUSH
13798: LD_STRING D7-JMM-1
13800: PPUSH
13801: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13805: LD_EXP 2
13809: PPUSH
13810: LD_STRING D7-Lisa-2
13812: PPUSH
13813: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13817: LD_EXP 1
13821: PPUSH
13822: LD_STRING D7-JMM-2
13824: PPUSH
13825: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13829: LD_EXP 2
13833: PPUSH
13834: LD_STRING D7-Lisa-3
13836: PPUSH
13837: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13841: LD_EXP 1
13845: PPUSH
13846: LD_STRING D7-JMM-3
13848: PPUSH
13849: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13853: LD_EXP 2
13857: PPUSH
13858: LD_STRING D7-Lisa-4
13860: PPUSH
13861: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13865: LD_EXP 1
13869: PPUSH
13870: LD_STRING D7-JMM-4
13872: PPUSH
13873: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13877: LD_EXP 1
13881: PPUSH
13882: LD_STRING D7-JMM-4a
13884: PPUSH
13885: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13889: LD_EXP 2
13893: PPUSH
13894: LD_STRING D7-Lisa-5
13896: PPUSH
13897: CALL_OW 88
// DialogueOff ;
13901: CALL_OW 7
// end ; end ;
13905: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13906: LD_INT 22
13908: PUSH
13909: LD_INT 1
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 33
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: PUSH
13935: LD_INT 2
13937: GREATEREQUAL
13938: IFFALSE 13958
13940: GO 13942
13942: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13943: LD_STRING MRa
13945: PPUSH
13946: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13950: LD_ADDR_EXP 27
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// end ;
13958: END
// every 4 4$0 do
13959: GO 13961
13961: DISABLE
// PrepareRandoms ( 1 ) ;
13962: LD_INT 1
13964: PPUSH
13965: CALL 3470 0 1
13969: END
// every 10 10$0 do
13970: GO 13972
13972: DISABLE
// PrepareRandoms ( 2 ) ;
13973: LD_INT 2
13975: PPUSH
13976: CALL 3470 0 1
13980: END
// every 28 28$0 do
13981: GO 13983
13983: DISABLE
// PrepareRandoms ( 4 ) ;
13984: LD_INT 4
13986: PPUSH
13987: CALL 3470 0 1
13991: END
// every 32 32$0 do
13992: GO 13994
13994: DISABLE
// PrepareRandoms ( 5 ) ;
13995: LD_INT 5
13997: PPUSH
13998: CALL 3470 0 1
14002: END
// every 35 35$30 do
14003: GO 14005
14005: DISABLE
// PrepareRandoms ( 6 ) ;
14006: LD_INT 6
14008: PPUSH
14009: CALL 3470 0 1
14013: END
// every 37 37$20 do
14014: GO 14016
14016: DISABLE
// PrepareRandoms ( 7 ) ;
14017: LD_INT 7
14019: PPUSH
14020: CALL 3470 0 1
14024: END
// every 5 5$20 do
14025: GO 14027
14027: DISABLE
// begin DialogueOn ;
14028: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14032: LD_EXP 10
14036: PPUSH
14037: LD_STRING D12a-Sci-1
14039: PPUSH
14040: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14044: LD_EXP 1
14048: PPUSH
14049: LD_STRING D12a-JMM-1
14051: PPUSH
14052: CALL_OW 88
// DialogueOff ;
14056: CALL_OW 7
// cratesStatus = 1 ;
14060: LD_ADDR_EXP 37
14064: PUSH
14065: LD_INT 1
14067: ST_TO_ADDR
// end ;
14068: END
// every 13 13$0 do
14069: GO 14071
14071: DISABLE
// begin DialogueOn ;
14072: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14076: LD_EXP 10
14080: PPUSH
14081: LD_STRING D12b-Sci-1
14083: PPUSH
14084: CALL_OW 94
// DialogueOff ;
14088: CALL_OW 7
// cratesStatus = 2 ;
14092: LD_ADDR_EXP 37
14096: PUSH
14097: LD_INT 2
14099: ST_TO_ADDR
// end ;
14100: END
// every 32 32$0 do
14101: GO 14103
14103: DISABLE
// begin DialogueOn ;
14104: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14108: LD_EXP 10
14112: PPUSH
14113: LD_STRING D12c-Sci-1
14115: PPUSH
14116: CALL_OW 94
// DialogueOff ;
14120: CALL_OW 7
// wait ( 3 3$0 ) ;
14124: LD_INT 6300
14126: PPUSH
14127: CALL_OW 67
// DialogueOn ;
14131: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14135: LD_EXP 10
14139: PPUSH
14140: LD_STRING D12d-Sci-1
14142: PPUSH
14143: CALL_OW 94
// DialogueOff ;
14147: CALL_OW 7
// cratesStatus = 1 ;
14151: LD_ADDR_EXP 37
14155: PUSH
14156: LD_INT 1
14158: ST_TO_ADDR
// end ;
14159: END
// every 42 42$0 do
14160: GO 14162
14162: DISABLE
// begin DialogueOn ;
14163: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14167: LD_EXP 10
14171: PPUSH
14172: LD_STRING D12e-Sci-1
14174: PPUSH
14175: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14179: LD_EXP 1
14183: PPUSH
14184: LD_STRING D12e-JMM-1
14186: PPUSH
14187: CALL_OW 88
// DialogueOff ;
14191: CALL_OW 7
// cratesStatus = 2 ;
14195: LD_ADDR_EXP 37
14199: PUSH
14200: LD_INT 2
14202: ST_TO_ADDR
// end ;
14203: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14204: LD_INT 22
14206: PUSH
14207: LD_INT 6
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 21
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 34
14226: PUSH
14227: LD_INT 51
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 69
14243: PUSH
14244: LD_INT 0
14246: GREATER
14247: IFFALSE 14330
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
// begin enable ;
14255: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14256: LD_ADDR_VAR 0 1
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_INT 6
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PPUSH
14303: CALL_OW 69
14307: PUSH
14308: FOR_IN
14309: IFFALSE 14328
// ComAgressiveMove ( i , 138 , 168 ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_INT 138
14318: PPUSH
14319: LD_INT 168
14321: PPUSH
14322: CALL_OW 114
14326: GO 14308
14328: POP
14329: POP
// end ;
14330: PPOPN 1
14332: END
// every 0 0$1 do var i ;
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
// begin enable ;
14339: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14340: LD_ADDR_VAR 0 1
14344: PUSH
14345: LD_INT 5
14347: PPUSH
14348: LD_INT 2
14350: PUSH
14351: LD_INT 22
14353: PUSH
14354: LD_INT 3
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 22
14363: PUSH
14364: LD_INT 6
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: PPUSH
14379: CALL_OW 70
14383: PUSH
14384: FOR_IN
14385: IFFALSE 14449
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14387: LD_INT 5
14389: PPUSH
14390: LD_INT 22
14392: PUSH
14393: LD_INT 6
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 34
14402: PUSH
14403: LD_INT 51
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 70
14418: PUSH
14419: LD_INT 0
14421: GREATER
14422: IFFALSE 14438
// sendedConvoys = sendedConvoys + 1 ;
14424: LD_ADDR_EXP 38
14428: PUSH
14429: LD_EXP 38
14433: PUSH
14434: LD_INT 1
14436: PLUS
14437: ST_TO_ADDR
// RemoveUnit ( i ) ;
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 64
// end ;
14447: GO 14384
14449: POP
14450: POP
// end ; end_of_file
14451: PPOPN 1
14453: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
14454: LD_VAR 0 1
14458: PUSH
14459: LD_INT 1
14461: EQUAL
14462: PUSH
14463: LD_VAR 0 2
14467: PUSH
14468: LD_INT 3
14470: EQUAL
14471: AND
14472: IFFALSE 14482
// contactWithRussian = 1 ;
14474: LD_ADDR_EXP 21
14478: PUSH
14479: LD_INT 1
14481: ST_TO_ADDR
// end ;
14482: PPOPN 2
14484: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 266
14494: PUSH
14495: LD_INT 36
14497: EQUAL
14498: PUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 255
14508: PUSH
14509: LD_INT 1
14511: EQUAL
14512: AND
14513: PUSH
14514: LD_INT 22
14516: PUSH
14517: LD_INT 1
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 33
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: PUSH
14554: LD_INT 0
14556: EQUAL
14557: AND
14558: PUSH
14559: LD_EXP 22
14563: PUSH
14564: LD_INT 0
14566: EQUAL
14567: AND
14568: IFFALSE 14637
// begin firstTower = 1 ;
14570: LD_ADDR_EXP 22
14574: PUSH
14575: LD_INT 1
14577: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
14578: LD_INT 22
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: LD_INT 21
14590: PUSH
14591: LD_INT 1
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 25
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: PUSH
14618: LD_EXP 1
14622: PUSH
14623: EMPTY
14624: LIST
14625: DIFF
14626: PPUSH
14627: LD_STRING D3b-Mech1-1
14629: PPUSH
14630: LD_STRING D3b-Mech1-1
14632: PPUSH
14633: CALL 5024 0 3
// end ; if GetSide ( building ) = 3 then
14637: LD_VAR 0 1
14641: PPUSH
14642: CALL_OW 255
14646: PUSH
14647: LD_INT 3
14649: EQUAL
14650: IFFALSE 14724
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14652: LD_ADDR_EXP 30
14656: PUSH
14657: LD_EXP 30
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14670: LD_ADDR_EXP 30
14674: PUSH
14675: LD_EXP 30
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL_OW 3
14687: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14688: LD_ADDR_EXP 30
14692: PUSH
14693: LD_EXP 30
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: CALL_OW 3
14705: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14706: LD_ADDR_EXP 30
14710: PUSH
14711: LD_EXP 30
14715: PPUSH
14716: LD_INT 1
14718: PPUSH
14719: CALL_OW 3
14723: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14724: LD_VAR 0 1
14728: PPUSH
14729: CALL_OW 255
14733: PUSH
14734: LD_INT 3
14736: EQUAL
14737: PUSH
14738: LD_VAR 0 1
14742: PPUSH
14743: CALL_OW 266
14747: PUSH
14748: LD_INT 0
14750: EQUAL
14751: PUSH
14752: LD_VAR 0 1
14756: PPUSH
14757: CALL_OW 266
14761: PUSH
14762: LD_INT 2
14764: EQUAL
14765: OR
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 266
14776: PUSH
14777: LD_INT 4
14779: EQUAL
14780: OR
14781: PUSH
14782: EMPTY
14783: LIST
14784: AND
14785: IFFALSE 14796
// ComUpgrade ( building ) ;
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 255
14805: PUSH
14806: LD_INT 3
14808: EQUAL
14809: PUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: CALL_OW 266
14819: PUSH
14820: LD_INT 32
14822: EQUAL
14823: AND
14824: IFFALSE 14865
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14826: LD_VAR 0 1
14830: PPUSH
14831: LD_INT 42
14833: PUSH
14834: LD_INT 43
14836: PUSH
14837: LD_INT 44
14839: PUSH
14840: LD_INT 46
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 1
14851: PPUSH
14852: LD_INT 4
14854: PPUSH
14855: CALL_OW 12
14859: ARRAY
14860: PPUSH
14861: CALL_OW 208
// end ; end ;
14865: PPOPN 1
14867: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14868: LD_VAR 0 1
14872: PPUSH
14873: CALL_OW 255
14877: PUSH
14878: LD_INT 1
14880: EQUAL
14881: PUSH
14882: LD_VAR 0 1
14886: PPUSH
14887: CALL_OW 247
14891: PUSH
14892: LD_INT 1
14894: EQUAL
14895: AND
14896: PUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 257
14906: PUSH
14907: LD_INT 1
14909: EQUAL
14910: PUSH
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 257
14920: PUSH
14921: LD_INT 2
14923: EQUAL
14924: OR
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 257
14935: PUSH
14936: LD_INT 3
14938: EQUAL
14939: OR
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 257
14950: PUSH
14951: LD_INT 4
14953: EQUAL
14954: OR
14955: PUSH
14956: EMPTY
14957: LIST
14958: AND
14959: IFFALSE 14975
// unitLost = unitLost + 1 ;
14961: LD_ADDR_EXP 29
14965: PUSH
14966: LD_EXP 29
14970: PUSH
14971: LD_INT 1
14973: PLUS
14974: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14975: LD_VAR 0 1
14979: PPUSH
14980: CALL_OW 255
14984: PUSH
14985: LD_INT 3
14987: EQUAL
14988: PUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL_OW 247
14998: PUSH
14999: LD_INT 3
15001: EQUAL
15002: AND
15003: IFFALSE 15710
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 266
15014: PUSH
15015: LD_INT 31
15017: EQUAL
15018: PUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 266
15028: PUSH
15029: LD_INT 32
15031: EQUAL
15032: OR
15033: PUSH
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 266
15043: PUSH
15044: LD_INT 36
15046: EQUAL
15047: OR
15048: PUSH
15049: LD_VAR 0 1
15053: PPUSH
15054: CALL_OW 266
15058: PUSH
15059: LD_INT 0
15061: EQUAL
15062: OR
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL_OW 266
15073: PUSH
15074: LD_INT 24
15076: EQUAL
15077: OR
15078: PUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 266
15088: PUSH
15089: LD_INT 17
15091: EQUAL
15092: OR
15093: PUSH
15094: LD_VAR 0 1
15098: PPUSH
15099: CALL_OW 266
15103: PUSH
15104: LD_INT 25
15106: EQUAL
15107: OR
15108: PUSH
15109: LD_VAR 0 1
15113: PPUSH
15114: CALL_OW 266
15118: PUSH
15119: LD_INT 19
15121: EQUAL
15122: OR
15123: PUSH
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 266
15133: PUSH
15134: LD_INT 20
15136: EQUAL
15137: OR
15138: PUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 266
15148: PUSH
15149: LD_INT 18
15151: EQUAL
15152: OR
15153: PUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 266
15163: PUSH
15164: LD_INT 21
15166: EQUAL
15167: OR
15168: PUSH
15169: LD_VAR 0 1
15173: PPUSH
15174: CALL_OW 266
15178: PUSH
15179: LD_INT 23
15181: EQUAL
15182: OR
15183: PUSH
15184: LD_VAR 0 1
15188: PPUSH
15189: CALL_OW 266
15193: PUSH
15194: LD_INT 16
15196: EQUAL
15197: OR
15198: PUSH
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 266
15208: PUSH
15209: LD_INT 6
15211: EQUAL
15212: OR
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: CALL_OW 266
15223: PUSH
15224: LD_INT 29
15226: EQUAL
15227: OR
15228: PUSH
15229: LD_VAR 0 1
15233: PPUSH
15234: CALL_OW 266
15238: PUSH
15239: LD_INT 26
15241: EQUAL
15242: OR
15243: PUSH
15244: LD_VAR 0 1
15248: PPUSH
15249: CALL_OW 266
15253: PUSH
15254: LD_INT 30
15256: EQUAL
15257: OR
15258: PUSH
15259: LD_VAR 0 1
15263: PPUSH
15264: CALL_OW 266
15268: PUSH
15269: LD_INT 28
15271: EQUAL
15272: OR
15273: PUSH
15274: LD_VAR 0 1
15278: PPUSH
15279: CALL_OW 266
15283: PUSH
15284: LD_INT 27
15286: EQUAL
15287: OR
15288: PUSH
15289: LD_VAR 0 1
15293: PPUSH
15294: CALL_OW 266
15298: PUSH
15299: LD_INT 33
15301: EQUAL
15302: OR
15303: PUSH
15304: LD_VAR 0 1
15308: PPUSH
15309: CALL_OW 266
15313: PUSH
15314: LD_INT 2
15316: EQUAL
15317: OR
15318: PUSH
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 266
15328: PUSH
15329: LD_INT 4
15331: EQUAL
15332: OR
15333: IFFALSE 15419
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15335: LD_ADDR_EXP 30
15339: PUSH
15340: LD_EXP 30
15344: PUSH
15345: LD_VAR 0 1
15349: PPUSH
15350: CALL_OW 266
15354: ADD
15355: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15356: LD_ADDR_EXP 30
15360: PUSH
15361: LD_EXP 30
15365: PUSH
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 250
15375: ADD
15376: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15377: LD_ADDR_EXP 30
15381: PUSH
15382: LD_EXP 30
15386: PUSH
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 251
15396: ADD
15397: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15398: LD_ADDR_EXP 30
15402: PUSH
15403: LD_EXP 30
15407: PUSH
15408: LD_VAR 0 1
15412: PPUSH
15413: CALL_OW 254
15417: ADD
15418: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
15419: LD_VAR 0 1
15423: PPUSH
15424: CALL_OW 266
15428: PUSH
15429: LD_INT 1
15431: EQUAL
15432: IFFALSE 15511
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
15434: LD_ADDR_EXP 30
15438: PUSH
15439: LD_EXP 30
15443: PUSH
15444: LD_INT 0
15446: ADD
15447: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15448: LD_ADDR_EXP 30
15452: PUSH
15453: LD_EXP 30
15457: PUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL_OW 250
15467: ADD
15468: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15469: LD_ADDR_EXP 30
15473: PUSH
15474: LD_EXP 30
15478: PUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: CALL_OW 251
15488: ADD
15489: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15490: LD_ADDR_EXP 30
15494: PUSH
15495: LD_EXP 30
15499: PUSH
15500: LD_VAR 0 1
15504: PPUSH
15505: CALL_OW 254
15509: ADD
15510: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 266
15520: PUSH
15521: LD_INT 3
15523: EQUAL
15524: IFFALSE 15603
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
15526: LD_ADDR_EXP 30
15530: PUSH
15531: LD_EXP 30
15535: PUSH
15536: LD_INT 2
15538: ADD
15539: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15540: LD_ADDR_EXP 30
15544: PUSH
15545: LD_EXP 30
15549: PUSH
15550: LD_VAR 0 1
15554: PPUSH
15555: CALL_OW 250
15559: ADD
15560: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15561: LD_ADDR_EXP 30
15565: PUSH
15566: LD_EXP 30
15570: PUSH
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL_OW 251
15580: ADD
15581: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15582: LD_ADDR_EXP 30
15586: PUSH
15587: LD_EXP 30
15591: PUSH
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 254
15601: ADD
15602: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 266
15612: PUSH
15613: LD_INT 5
15615: EQUAL
15616: IFFALSE 15695
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
15618: LD_ADDR_EXP 30
15622: PUSH
15623: LD_EXP 30
15627: PUSH
15628: LD_INT 4
15630: ADD
15631: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15632: LD_ADDR_EXP 30
15636: PUSH
15637: LD_EXP 30
15641: PUSH
15642: LD_VAR 0 1
15646: PPUSH
15647: CALL_OW 250
15651: ADD
15652: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15653: LD_ADDR_EXP 30
15657: PUSH
15658: LD_EXP 30
15662: PUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 251
15672: ADD
15673: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15674: LD_ADDR_EXP 30
15678: PUSH
15679: LD_EXP 30
15683: PUSH
15684: LD_VAR 0 1
15688: PPUSH
15689: CALL_OW 254
15693: ADD
15694: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 then
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 257
15704: PUSH
15705: LD_INT 3
15707: EQUAL
15708: IFFALSE 15710
// begin end ; end ; end ;
15710: PPOPN 1
15712: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15713: LD_INT 0
15715: PPUSH
15716: PPUSH
15717: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15718: LD_VAR 0 1
15722: PPUSH
15723: CALL_OW 264
15727: PUSH
15728: LD_INT 51
15730: EQUAL
15731: PUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 255
15741: PUSH
15742: LD_INT 3
15744: EQUAL
15745: AND
15746: IFFALSE 15808
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 2
15755: PPUSH
15756: CALL_OW 274
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 275
15768: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15769: LD_INT 2
15771: PPUSH
15772: CALL_OW 274
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: LD_VAR 0 5
15784: PUSH
15785: LD_INT 100
15787: MINUS
15788: PPUSH
15789: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15793: LD_VAR 0 1
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: LD_INT 100
15803: PPUSH
15804: CALL_OW 291
// end ; if building = rufabsupp then
15808: LD_VAR 0 2
15812: PUSH
15813: LD_INT 17
15815: EQUAL
15816: IFFALSE 15830
// SetSide ( vehicle , 6 ) ;
15818: LD_VAR 0 1
15822: PPUSH
15823: LD_INT 6
15825: PPUSH
15826: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15830: LD_VAR 0 2
15834: PPUSH
15835: CALL_OW 255
15839: PUSH
15840: LD_INT 3
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 2
15848: PPUSH
15849: CALL_OW 302
15853: AND
15854: IFFALSE 15924
// begin uc_side = 3 ;
15856: LD_ADDR_OWVAR 20
15860: PUSH
15861: LD_INT 3
15863: ST_TO_ADDR
// uc_nation = 3 ;
15864: LD_ADDR_OWVAR 21
15868: PUSH
15869: LD_INT 3
15871: ST_TO_ADDR
// hc_gallery :=  ;
15872: LD_ADDR_OWVAR 33
15876: PUSH
15877: LD_STRING 
15879: ST_TO_ADDR
// hc_name :=  ;
15880: LD_ADDR_OWVAR 26
15884: PUSH
15885: LD_STRING 
15887: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15888: LD_INT 0
15890: PPUSH
15891: LD_EXP 33
15895: PPUSH
15896: LD_EXP 34
15900: PPUSH
15901: CALL_OW 12
15905: PPUSH
15906: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15910: CALL_OW 44
15914: PPUSH
15915: LD_VAR 0 2
15919: PPUSH
15920: CALL_OW 52
// end ; if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
15924: LD_VAR 0 2
15928: PUSH
15929: LD_INT 21
15931: EQUAL
15932: PUSH
15933: LD_VAR 0 2
15937: PPUSH
15938: CALL_OW 255
15942: PUSH
15943: LD_INT 3
15945: EQUAL
15946: AND
15947: PUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 264
15957: PUSH
15958: LD_INT 42
15960: EQUAL
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL_OW 264
15971: PUSH
15972: LD_INT 43
15974: EQUAL
15975: OR
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 264
15986: PUSH
15987: LD_INT 44
15989: EQUAL
15990: OR
15991: PUSH
15992: EMPTY
15993: LIST
15994: AND
15995: IFFALSE 16013
// russianTanks = russianTanks ^ vehicle ;
15997: LD_ADDR_EXP 35
16001: PUSH
16002: LD_EXP 35
16006: PUSH
16007: LD_VAR 0 1
16011: ADD
16012: ST_TO_ADDR
// end ;
16013: PPOPN 5
16015: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16016: LD_VAR 0 1
16020: PPUSH
16021: CALL_OW 255
16025: PUSH
16026: LD_INT 3
16028: EQUAL
16029: IFFALSE 16045
// tamedApemans = tamedApemans + 1 ;
16031: LD_ADDR_EXP 31
16035: PUSH
16036: LD_EXP 31
16040: PUSH
16041: LD_INT 1
16043: PLUS
16044: ST_TO_ADDR
// end ;
16045: PPOPN 2
16047: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16048: LD_INT 0
16050: PPUSH
16051: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16052: LD_VAR 0 1
16056: PPUSH
16057: CALL_OW 255
16061: PUSH
16062: LD_INT 3
16064: EQUAL
16065: PUSH
16066: LD_VAR 0 1
16070: PPUSH
16071: CALL_OW 247
16075: PUSH
16076: LD_INT 2
16078: EQUAL
16079: AND
16080: PUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 264
16090: PUSH
16091: LD_INT 42
16093: EQUAL
16094: PUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 264
16104: PUSH
16105: LD_INT 43
16107: EQUAL
16108: OR
16109: PUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 264
16119: PUSH
16120: LD_INT 44
16122: EQUAL
16123: OR
16124: PUSH
16125: EMPTY
16126: LIST
16127: AND
16128: IFFALSE 16275
// begin tmpMeh = UnitsInside ( unit ) ;
16130: LD_ADDR_VAR 0 3
16134: PUSH
16135: LD_VAR 0 1
16139: PPUSH
16140: CALL_OW 313
16144: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16145: LD_VAR 0 3
16149: PPUSH
16150: CALL_OW 121
// wait ( 0 0$1 ) ;
16154: LD_INT 35
16156: PPUSH
16157: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16161: LD_VAR 0 3
16165: PPUSH
16166: LD_INT 21
16168: PPUSH
16169: CALL_OW 120
// for i in russianDamageTanks do
16173: LD_ADDR_VAR 0 2
16177: PUSH
16178: LD_EXP 36
16182: PUSH
16183: FOR_IN
16184: IFFALSE 16273
// begin if i = unit then
16186: LD_VAR 0 2
16190: PUSH
16191: LD_VAR 0 1
16195: EQUAL
16196: IFFALSE 16271
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16198: LD_INT 21
16200: PPUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 265
16210: PPUSH
16211: LD_VAR 0 1
16215: PPUSH
16216: CALL_OW 262
16220: PPUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 263
16230: PPUSH
16231: LD_VAR 0 1
16235: PPUSH
16236: CALL_OW 264
16240: PPUSH
16241: CALL_OW 185
// russianDamageTanks = Delete ( russianDamageTanks , i [ i ] ) ;
16245: LD_ADDR_EXP 36
16249: PUSH
16250: LD_EXP 36
16254: PPUSH
16255: LD_VAR 0 2
16259: PUSH
16260: LD_VAR 0 2
16264: ARRAY
16265: PPUSH
16266: CALL_OW 3
16270: ST_TO_ADDR
// end ; end ;
16271: GO 16183
16273: POP
16274: POP
// end ; end ; end_of_file
16275: PPOPN 3
16277: END
// every 0 0$30 trigger cratesStatus = 1 do
16278: LD_EXP 37
16282: PUSH
16283: LD_INT 1
16285: EQUAL
16286: IFFALSE 16350
16288: GO 16290
16290: DISABLE
// begin enable ;
16291: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16292: LD_INT 350
16294: PUSH
16295: LD_INT 1050
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: PPUSH
16305: LD_INT 2
16307: PPUSH
16308: CALL_OW 12
16312: ARRAY
16313: PPUSH
16314: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
16318: LD_INT 4
16320: PUSH
16321: LD_INT 5
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_INT 2
16333: PPUSH
16334: CALL_OW 12
16338: ARRAY
16339: PPUSH
16340: LD_INT 7
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 55
// end ;
16350: END
// every 1 1$0 trigger cratesStatus = 2 do
16351: LD_EXP 37
16355: PUSH
16356: LD_INT 2
16358: EQUAL
16359: IFFALSE 16423
16361: GO 16363
16363: DISABLE
// begin enable ;
16364: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
16365: LD_INT 3150
16367: PUSH
16368: LD_INT 4550
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 1
16377: PPUSH
16378: LD_INT 2
16380: PPUSH
16381: CALL_OW 12
16385: ARRAY
16386: PPUSH
16387: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16391: LD_INT 2
16393: PUSH
16394: LD_INT 5
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 1
16403: PPUSH
16404: LD_INT 2
16406: PPUSH
16407: CALL_OW 12
16411: ARRAY
16412: PPUSH
16413: LD_INT 8
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 55
// end ;
16423: END
// every 0 0$30 + 0 0$10 do
16424: GO 16426
16426: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16427: LD_INT 4
16429: PUSH
16430: LD_INT 5
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_INT 2
16442: PPUSH
16443: CALL_OW 12
16447: ARRAY
16448: PPUSH
16449: LD_INT 8
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 55
// Wait ( 0 0$15 ) ;
16459: LD_INT 525
16461: PPUSH
16462: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16466: LD_INT 4
16468: PUSH
16469: LD_INT 5
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 1
16478: PPUSH
16479: LD_INT 2
16481: PPUSH
16482: CALL_OW 12
16486: ARRAY
16487: PPUSH
16488: LD_INT 8
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 55
// Wait ( 0 0$20 ) ;
16498: LD_INT 700
16500: PPUSH
16501: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
16505: LD_INT 4
16507: PUSH
16508: LD_INT 5
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: PPUSH
16518: LD_INT 2
16520: PPUSH
16521: CALL_OW 12
16525: ARRAY
16526: PPUSH
16527: LD_INT 8
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: CALL_OW 55
// end ; end_of_file
16537: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
16538: LD_EXP 23
16542: PUSH
16543: LD_INT 1
16545: EQUAL
16546: IFFALSE 16847
16548: GO 16550
16550: DISABLE
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
16555: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 3
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 2
16583: PUSH
16584: LD_INT 30
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: LIST
16613: PPUSH
16614: CALL_OW 69
16618: ST_TO_ADDR
// for i in tmp do
16619: LD_ADDR_VAR 0 1
16623: PUSH
16624: LD_VAR 0 2
16628: PUSH
16629: FOR_IN
16630: IFFALSE 16663
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
16632: LD_ADDR_VAR 0 3
16636: PUSH
16637: LD_VAR 0 3
16641: PUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 274
16651: PPUSH
16652: LD_INT 1
16654: PPUSH
16655: CALL_OW 275
16659: PLUS
16660: ST_TO_ADDR
16661: GO 16629
16663: POP
16664: POP
// strings = [ ] ;
16665: LD_ADDR_EXP 26
16669: PUSH
16670: EMPTY
16671: ST_TO_ADDR
// if tmp = 0 then
16672: LD_VAR 0 2
16676: PUSH
16677: LD_INT 0
16679: EQUAL
16680: IFFALSE 16705
// strings = strings ^ [ #Am06-1 , needCrates ] ;
16682: LD_ADDR_EXP 26
16686: PUSH
16687: LD_EXP 26
16691: PUSH
16692: LD_STRING #Am06-1
16694: PUSH
16695: LD_EXP 24
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: ADD
16704: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
16705: LD_VAR 0 2
16709: PUSH
16710: LD_INT 0
16712: GREATER
16713: PUSH
16714: LD_EXP 24
16718: PUSH
16719: LD_VAR 0 3
16723: GREATER
16724: AND
16725: IFFALSE 16756
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
16727: LD_ADDR_EXP 26
16731: PUSH
16732: LD_EXP 26
16736: PUSH
16737: LD_STRING #Am06-1
16739: PUSH
16740: LD_EXP 24
16744: PUSH
16745: LD_VAR 0 3
16749: MINUS
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: ADD
16755: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
16756: LD_VAR 0 2
16760: PUSH
16761: LD_INT 0
16763: GREATER
16764: PUSH
16765: LD_EXP 24
16769: PUSH
16770: LD_VAR 0 3
16774: LESSEQUAL
16775: AND
16776: IFFALSE 16799
// strings = strings ^ [ #Am06-1 , 0 ] ;
16778: LD_ADDR_EXP 26
16782: PUSH
16783: LD_EXP 26
16787: PUSH
16788: LD_STRING #Am06-1
16790: PUSH
16791: LD_INT 0
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: ADD
16798: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
16799: LD_ADDR_EXP 25
16803: PUSH
16804: LD_EXP 25
16808: PUSH
16809: LD_INT 35
16811: MINUS
16812: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
16813: LD_ADDR_EXP 26
16817: PUSH
16818: LD_EXP 26
16822: PUSH
16823: LD_STRING #Am06-2
16825: PUSH
16826: LD_EXP 25
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: ADD
16835: ST_TO_ADDR
// display_strings = strings ;
16836: LD_ADDR_OWVAR 47
16840: PUSH
16841: LD_EXP 26
16845: ST_TO_ADDR
// enable ;
16846: ENABLE
// end ; end_of_file
16847: PPOPN 3
16849: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
16850: LD_INT 0
16852: PPUSH
16853: PPUSH
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
16858: PPUSH
// j = 0 ;
16859: LD_ADDR_VAR 0 3
16863: PUSH
16864: LD_INT 0
16866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16867: LD_INT 35
16869: PPUSH
16870: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
16874: LD_ADDR_VAR 0 2
16878: PUSH
16879: LD_INT 22
16881: PUSH
16882: LD_INT 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 2
16901: PUSH
16902: LD_INT 25
16904: PUSH
16905: LD_INT 1
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 25
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 25
16924: PUSH
16925: LD_INT 3
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 4
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: PUSH
16959: FOR_IN
16960: IFFALSE 17066
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
16962: LD_INT 22
16964: PUSH
16965: LD_INT 3
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 21
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 21
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: LD_INT 21
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 59
17007: PUSH
17008: EMPTY
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 91
17020: PUSH
17021: LD_VAR 0 2
17025: PUSH
17026: LD_INT 25
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: NOT
17044: IFFALSE 17064
// begin tmp = i ;
17046: LD_ADDR_VAR 0 4
17050: PUSH
17051: LD_VAR 0 2
17055: ST_TO_ADDR
// j = 1 ;
17056: LD_ADDR_VAR 0 3
17060: PUSH
17061: LD_INT 1
17063: ST_TO_ADDR
// end ; end ;
17064: GO 16959
17066: POP
17067: POP
// until j = 1 ;
17068: LD_VAR 0 3
17072: PUSH
17073: LD_INT 1
17075: EQUAL
17076: IFFALSE 16867
// blockSpawn = 1 ;
17078: LD_ADDR_EXP 28
17082: PUSH
17083: LD_INT 1
17085: ST_TO_ADDR
// uc_side = 2 ;
17086: LD_ADDR_OWVAR 20
17090: PUSH
17091: LD_INT 2
17093: ST_TO_ADDR
// uc_nation = 2 ;
17094: LD_ADDR_OWVAR 21
17098: PUSH
17099: LD_INT 2
17101: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17102: LD_ADDR_EXP 18
17106: PUSH
17107: LD_STRING Kurt
17109: PPUSH
17110: LD_INT 0
17112: PPUSH
17113: CALL 4961 0 2
17117: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17118: LD_EXP 18
17122: PPUSH
17123: LD_VAR 0 4
17127: PPUSH
17128: CALL_OW 250
17132: PPUSH
17133: LD_VAR 0 4
17137: PPUSH
17138: CALL_OW 251
17142: PPUSH
17143: LD_INT 5
17145: PPUSH
17146: LD_INT 1
17148: PPUSH
17149: CALL_OW 50
// InGameOn ;
17153: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17157: LD_EXP 18
17161: PPUSH
17162: CALL_OW 87
// wait ( 0 0$2 ) ;
17166: LD_INT 70
17168: PPUSH
17169: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17173: LD_VAR 0 4
17177: PPUSH
17178: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17182: LD_VAR 0 4
17186: PPUSH
17187: CALL_OW 122
// wait ( 0 0$1 ) ;
17191: LD_INT 35
17193: PPUSH
17194: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17198: LD_EXP 18
17202: PPUSH
17203: LD_VAR 0 4
17207: PPUSH
17208: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17212: LD_VAR 0 4
17216: PPUSH
17217: LD_EXP 18
17221: PPUSH
17222: CALL_OW 119
// DialogueOn ;
17226: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17230: LD_EXP 18
17234: PPUSH
17235: LD_STRING D2-Kurt-1
17237: PPUSH
17238: CALL_OW 88
// if tmp = JMM then
17242: LD_VAR 0 4
17246: PUSH
17247: LD_EXP 1
17251: EQUAL
17252: IFFALSE 17344
// begin Say ( JMM , D2-JMM-1 ) ;
17254: LD_EXP 1
17258: PPUSH
17259: LD_STRING D2-JMM-1
17261: PPUSH
17262: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17266: LD_EXP 18
17270: PPUSH
17271: LD_STRING D2-Kurt-2
17273: PPUSH
17274: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17278: LD_EXP 1
17282: PPUSH
17283: LD_STRING D2-JMM-2
17285: PPUSH
17286: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17290: LD_EXP 18
17294: PPUSH
17295: LD_STRING D2-Kurt-3
17297: PPUSH
17298: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17302: LD_EXP 1
17306: PPUSH
17307: LD_STRING D2-JMM-3
17309: PPUSH
17310: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17314: LD_EXP 18
17318: PPUSH
17319: LD_STRING D2-Kurt-4
17321: PPUSH
17322: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
17326: LD_EXP 1
17330: PPUSH
17331: LD_STRING D2-JMM-4
17333: PPUSH
17334: CALL_OW 88
// DialogueOff ;
17338: CALL_OW 7
// end else
17342: GO 17654
// begin if GetSex ( tmp ) = 1 then
17344: LD_VAR 0 4
17348: PPUSH
17349: CALL_OW 258
17353: PUSH
17354: LD_INT 1
17356: EQUAL
17357: IFFALSE 17371
// Say ( tmp , D2-Sol1-1 ) ;
17359: LD_VAR 0 4
17363: PPUSH
17364: LD_STRING D2-Sol1-1
17366: PPUSH
17367: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17371: LD_VAR 0 4
17375: PPUSH
17376: CALL_OW 258
17380: PUSH
17381: LD_INT 2
17383: EQUAL
17384: IFFALSE 17398
// Say ( tmp , D2-FSol1-1 ) ;
17386: LD_VAR 0 4
17390: PPUSH
17391: LD_STRING D2-FSol1-1
17393: PPUSH
17394: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17398: LD_EXP 18
17402: PPUSH
17403: LD_STRING D2-Kurt-2
17405: PPUSH
17406: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17410: LD_VAR 0 4
17414: PPUSH
17415: CALL_OW 258
17419: PUSH
17420: LD_INT 1
17422: EQUAL
17423: IFFALSE 17437
// Say ( tmp , D2-Sol1-2 ) ;
17425: LD_VAR 0 4
17429: PPUSH
17430: LD_STRING D2-Sol1-2
17432: PPUSH
17433: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17437: LD_VAR 0 4
17441: PPUSH
17442: CALL_OW 258
17446: PUSH
17447: LD_INT 2
17449: EQUAL
17450: IFFALSE 17464
// Say ( tmp , D2-FSol1-2 ) ;
17452: LD_VAR 0 4
17456: PPUSH
17457: LD_STRING D2-FSol1-2
17459: PPUSH
17460: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17464: LD_EXP 18
17468: PPUSH
17469: LD_STRING D2-Kurt-3
17471: PPUSH
17472: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17476: LD_VAR 0 4
17480: PPUSH
17481: CALL_OW 258
17485: PUSH
17486: LD_INT 1
17488: EQUAL
17489: IFFALSE 17503
// Say ( tmp , D2-Sol1-3 ) ;
17491: LD_VAR 0 4
17495: PPUSH
17496: LD_STRING D2-Sol1-3
17498: PPUSH
17499: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17503: LD_VAR 0 4
17507: PPUSH
17508: CALL_OW 258
17512: PUSH
17513: LD_INT 2
17515: EQUAL
17516: IFFALSE 17530
// Say ( tmp , D2-FSol1-3 ) ;
17518: LD_VAR 0 4
17522: PPUSH
17523: LD_STRING D2-FSol1-3
17525: PPUSH
17526: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
17530: LD_EXP 18
17534: PPUSH
17535: LD_STRING D2-Kurt-4
17537: PPUSH
17538: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17542: LD_VAR 0 4
17546: PPUSH
17547: CALL_OW 258
17551: PUSH
17552: LD_INT 1
17554: EQUAL
17555: IFFALSE 17569
// Say ( tmp , D2-Sol1-4 ) ;
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_STRING D2-Sol1-4
17564: PPUSH
17565: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17569: LD_VAR 0 4
17573: PPUSH
17574: CALL_OW 258
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: IFFALSE 17596
// Say ( tmp , D2-FSol1-4 ) ;
17584: LD_VAR 0 4
17588: PPUSH
17589: LD_STRING D2-FSol1-4
17591: PPUSH
17592: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17596: LD_VAR 0 4
17600: PPUSH
17601: CALL_OW 258
17605: PUSH
17606: LD_INT 1
17608: EQUAL
17609: IFFALSE 17623
// Say ( tmp , D2-Sol1-5 ) ;
17611: LD_VAR 0 4
17615: PPUSH
17616: LD_STRING D2-Sol1-5
17618: PPUSH
17619: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17623: LD_VAR 0 4
17627: PPUSH
17628: CALL_OW 258
17632: PUSH
17633: LD_INT 2
17635: EQUAL
17636: IFFALSE 17650
// Say ( tmp , D2-FSol1-5 ) ;
17638: LD_VAR 0 4
17642: PPUSH
17643: LD_STRING D2-FSol1-5
17645: PPUSH
17646: CALL_OW 88
// DialogueOff ;
17650: CALL_OW 7
// end ; dec = ShowQuery1 ;
17654: LD_ADDR_VAR 0 6
17658: PUSH
17659: CALL 5563 0 0
17663: ST_TO_ADDR
// if dec = 1 then
17664: LD_VAR 0 6
17668: PUSH
17669: LD_INT 1
17671: EQUAL
17672: IFFALSE 17714
// begin DialogueOn ;
17674: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
17678: LD_EXP 18
17682: PPUSH
17683: LD_STRING D2a-Kurt-1
17685: PPUSH
17686: CALL_OW 88
// DialogueOff ;
17690: CALL_OW 7
// InGameOff ;
17694: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17698: LD_INT 1
17700: PPUSH
17701: LD_INT 2
17703: PPUSH
17704: LD_INT 2
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 80
// end ; if dec = 2 then
17714: LD_VAR 0 6
17718: PUSH
17719: LD_INT 2
17721: EQUAL
17722: IFFALSE 18222
// begin DialogueOn ;
17724: CALL_OW 6
// if tmp = JMM then
17728: LD_VAR 0 4
17732: PUSH
17733: LD_EXP 1
17737: EQUAL
17738: IFFALSE 17794
// begin Say ( JMM , D2b-JMM-1 ) ;
17740: LD_EXP 1
17744: PPUSH
17745: LD_STRING D2b-JMM-1
17747: PPUSH
17748: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17752: LD_EXP 18
17756: PPUSH
17757: LD_STRING D2b-Kurt-1
17759: PPUSH
17760: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
17764: LD_EXP 1
17768: PPUSH
17769: LD_STRING D2b-JMM-2
17771: PPUSH
17772: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17776: LD_EXP 18
17780: PPUSH
17781: LD_STRING D2b-Kurt-2
17783: PPUSH
17784: CALL_OW 88
// DialogueOff ;
17788: CALL_OW 7
// end else
17792: GO 17984
// begin if GetSex ( tmp ) = 1 then
17794: LD_VAR 0 4
17798: PPUSH
17799: CALL_OW 258
17803: PUSH
17804: LD_INT 1
17806: EQUAL
17807: IFFALSE 17821
// Say ( tmp , D2b-Sol1-1 ) ;
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_STRING D2b-Sol1-1
17816: PPUSH
17817: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17821: LD_VAR 0 4
17825: PPUSH
17826: CALL_OW 258
17830: PUSH
17831: LD_INT 2
17833: EQUAL
17834: IFFALSE 17848
// Say ( tmp , D2b-FSol1-1 ) ;
17836: LD_VAR 0 4
17840: PPUSH
17841: LD_STRING D2b-FSol1-1
17843: PPUSH
17844: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17848: LD_EXP 18
17852: PPUSH
17853: LD_STRING D2b-Kurt-1
17855: PPUSH
17856: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17860: LD_VAR 0 4
17864: PPUSH
17865: CALL_OW 258
17869: PUSH
17870: LD_INT 1
17872: EQUAL
17873: IFFALSE 17887
// Say ( tmp , D2b-Sol1-2 ) ;
17875: LD_VAR 0 4
17879: PPUSH
17880: LD_STRING D2b-Sol1-2
17882: PPUSH
17883: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17887: LD_VAR 0 4
17891: PPUSH
17892: CALL_OW 258
17896: PUSH
17897: LD_INT 2
17899: EQUAL
17900: IFFALSE 17914
// Say ( tmp , D2b-FSol1-2 ) ;
17902: LD_VAR 0 4
17906: PPUSH
17907: LD_STRING D2b-FSol1-2
17909: PPUSH
17910: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17914: LD_EXP 18
17918: PPUSH
17919: LD_STRING D2b-Kurt-2
17921: PPUSH
17922: CALL_OW 88
// if GetSex ( tmp ) = 1 then
17926: LD_VAR 0 4
17930: PPUSH
17931: CALL_OW 258
17935: PUSH
17936: LD_INT 1
17938: EQUAL
17939: IFFALSE 17953
// Say ( tmp , D2c-Sol1-2 ) ;
17941: LD_VAR 0 4
17945: PPUSH
17946: LD_STRING D2c-Sol1-2
17948: PPUSH
17949: CALL_OW 88
// if GetSex ( tmp ) = 2 then
17953: LD_VAR 0 4
17957: PPUSH
17958: CALL_OW 258
17962: PUSH
17963: LD_INT 2
17965: EQUAL
17966: IFFALSE 17980
// Say ( tmp , D2c-FSol1-2 ) ;
17968: LD_VAR 0 4
17972: PPUSH
17973: LD_STRING D2c-FSol1-2
17975: PPUSH
17976: CALL_OW 88
// DialogueOff ;
17980: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
17984: LD_ADDR_VAR 0 7
17988: PUSH
17989: CALL 5637 0 0
17993: ST_TO_ADDR
// if dec2 = 1 then
17994: LD_VAR 0 7
17998: PUSH
17999: LD_INT 1
18001: EQUAL
18002: IFFALSE 18044
// begin DialogueOn ;
18004: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18008: LD_EXP 18
18012: PPUSH
18013: LD_STRING D2a-Kurt-1
18015: PPUSH
18016: CALL_OW 88
// DialogueOff ;
18020: CALL_OW 7
// InGameOff ;
18024: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18028: LD_INT 1
18030: PPUSH
18031: LD_INT 2
18033: PPUSH
18034: LD_INT 2
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: CALL_OW 80
// end ; if dec2 = 2 then
18044: LD_VAR 0 7
18048: PUSH
18049: LD_INT 2
18051: EQUAL
18052: IFFALSE 18222
// begin if tmp = JMM then
18054: LD_VAR 0 4
18058: PUSH
18059: LD_EXP 1
18063: EQUAL
18064: IFFALSE 18124
// begin DialogueOn ;
18066: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18070: LD_EXP 1
18074: PPUSH
18075: LD_STRING D2c-JMM-1
18077: PPUSH
18078: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18082: LD_EXP 18
18086: PPUSH
18087: LD_STRING D2c-Kurt-1
18089: PPUSH
18090: CALL_OW 88
// DialogueOff ;
18094: CALL_OW 7
// InGameOff ;
18098: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18102: LD_EXP 18
18106: PPUSH
18107: LD_INT 9
18109: PPUSH
18110: CALL_OW 113
// readyToEscape = 1 ;
18114: LD_ADDR_EXP 20
18118: PUSH
18119: LD_INT 1
18121: ST_TO_ADDR
// end else
18122: GO 18222
// begin DialogueOn ;
18124: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18128: LD_VAR 0 4
18132: PPUSH
18133: CALL_OW 258
18137: PUSH
18138: LD_INT 1
18140: EQUAL
18141: IFFALSE 18155
// Say ( tmp , D2c-Sol1-1 ) ;
18143: LD_VAR 0 4
18147: PPUSH
18148: LD_STRING D2c-Sol1-1
18150: PPUSH
18151: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18155: LD_VAR 0 4
18159: PPUSH
18160: CALL_OW 258
18164: PUSH
18165: LD_INT 2
18167: EQUAL
18168: IFFALSE 18182
// Say ( tmp , D2c-FSol1-1 ) ;
18170: LD_VAR 0 4
18174: PPUSH
18175: LD_STRING D2c-FSol1-1
18177: PPUSH
18178: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18182: LD_EXP 18
18186: PPUSH
18187: LD_STRING D2c-Kurt-1
18189: PPUSH
18190: CALL_OW 88
// DialogueOff ;
18194: CALL_OW 7
// InGameOff ;
18198: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18202: LD_EXP 18
18206: PPUSH
18207: LD_INT 9
18209: PPUSH
18210: CALL_OW 113
// readyToEscape = 1 ;
18214: LD_ADDR_EXP 20
18218: PUSH
18219: LD_INT 1
18221: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18222: LD_VAR 0 6
18226: PUSH
18227: LD_INT 3
18229: EQUAL
18230: IFFALSE 18404
// begin DialogueOn ;
18232: CALL_OW 6
// if tmp = JMM then
18236: LD_VAR 0 4
18240: PUSH
18241: LD_EXP 1
18245: EQUAL
18246: IFFALSE 18306
// begin DialogueOn ;
18248: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18252: LD_EXP 1
18256: PPUSH
18257: LD_STRING D2c-JMM-1
18259: PPUSH
18260: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18264: LD_EXP 18
18268: PPUSH
18269: LD_STRING D2c-Kurt-1
18271: PPUSH
18272: CALL_OW 88
// DialogueOff ;
18276: CALL_OW 7
// InGameOff ;
18280: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18284: LD_EXP 18
18288: PPUSH
18289: LD_INT 9
18291: PPUSH
18292: CALL_OW 113
// readyToEscape = 1 ;
18296: LD_ADDR_EXP 20
18300: PUSH
18301: LD_INT 1
18303: ST_TO_ADDR
// end else
18304: GO 18404
// begin DialogueOn ;
18306: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18310: LD_VAR 0 4
18314: PPUSH
18315: CALL_OW 258
18319: PUSH
18320: LD_INT 1
18322: EQUAL
18323: IFFALSE 18337
// Say ( tmp , D2c-Sol1-1 ) ;
18325: LD_VAR 0 4
18329: PPUSH
18330: LD_STRING D2c-Sol1-1
18332: PPUSH
18333: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18337: LD_VAR 0 4
18341: PPUSH
18342: CALL_OW 258
18346: PUSH
18347: LD_INT 2
18349: EQUAL
18350: IFFALSE 18364
// Say ( tmp , D2c-FSol1-1 ) ;
18352: LD_VAR 0 4
18356: PPUSH
18357: LD_STRING D2c-FSol1-1
18359: PPUSH
18360: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18364: LD_EXP 18
18368: PPUSH
18369: LD_STRING D2c-Kurt-1
18371: PPUSH
18372: CALL_OW 88
// DialogueOff ;
18376: CALL_OW 7
// InGameOff ;
18380: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18384: LD_EXP 18
18388: PPUSH
18389: LD_INT 9
18391: PPUSH
18392: CALL_OW 113
// readyToEscape = 1 ;
18396: LD_ADDR_EXP 20
18400: PUSH
18401: LD_INT 1
18403: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
18404: LD_ADDR_EXP 28
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// end ; end_of_file
18412: LD_VAR 0 1
18416: RET
// every 0 0$1 do
18417: GO 18419
18419: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
18420: LD_INT 3
18422: PPUSH
18423: LD_INT 32
18425: PPUSH
18426: LD_INT 3
18428: PPUSH
18429: CALL 5692 0 3
18433: END
// every 0 0$1 do
18434: GO 18436
18436: DISABLE
// begin enable ;
18437: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
18438: LD_INT 3
18440: PPUSH
18441: LD_INT 2
18443: PPUSH
18444: CALL 5777 0 2
// if disableHealAI = 0 then
18448: LD_EXP 32
18452: PUSH
18453: LD_INT 0
18455: EQUAL
18456: IFFALSE 18474
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
18458: LD_INT 3
18460: PPUSH
18461: LD_INT 10
18463: PPUSH
18464: LD_INT 11
18466: PPUSH
18467: LD_INT 32
18469: PPUSH
18470: CALL 6036 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
18474: LD_INT 3
18476: PPUSH
18477: LD_INT 51
18479: PPUSH
18480: LD_INT 7
18482: PPUSH
18483: CALL 7807 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
18487: LD_INT 3
18489: PPUSH
18490: LD_INT 14
18492: PPUSH
18493: LD_INT 121
18495: PPUSH
18496: LD_INT 100
18498: PPUSH
18499: CALL 6968 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
18503: LD_INT 3
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL 6456 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18513: LD_INT 3
18515: PPUSH
18516: LD_EXP 30
18520: PPUSH
18521: CALL 7950 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
18525: LD_INT 3
18527: PPUSH
18528: LD_INT 8
18530: PUSH
18531: LD_INT 67
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 1
18540: PPUSH
18541: LD_INT 2
18543: PPUSH
18544: CALL_OW 12
18548: ARRAY
18549: PPUSH
18550: LD_INT 11
18552: PPUSH
18553: CALL 8156 0 3
// AttackNearBuildings ( 3 , 1 ) ;
18557: LD_INT 3
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL 8513 0 2
// end ;
18567: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18568: LD_INT 22
18570: PUSH
18571: LD_INT 3
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 21
18580: PUSH
18581: LD_INT 2
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 55
18590: PUSH
18591: EMPTY
18592: LIST
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 34
18599: PUSH
18600: LD_INT 51
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: PPUSH
18617: CALL_OW 69
18621: PUSH
18622: LD_INT 0
18624: EQUAL
18625: PUSH
18626: LD_INT 21
18628: PPUSH
18629: CALL_OW 255
18633: PUSH
18634: LD_INT 3
18636: EQUAL
18637: AND
18638: PUSH
18639: LD_INT 21
18641: PPUSH
18642: CALL_OW 302
18646: AND
18647: PUSH
18648: LD_INT 2
18650: PPUSH
18651: CALL_OW 255
18655: PUSH
18656: LD_INT 3
18658: EQUAL
18659: AND
18660: PUSH
18661: LD_INT 2
18663: PPUSH
18664: CALL_OW 302
18668: AND
18669: IFFALSE 18853
18671: GO 18673
18673: DISABLE
// begin enable ;
18674: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
18675: LD_INT 2
18677: PPUSH
18678: CALL_OW 274
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: LD_INT 1000
18688: PPUSH
18689: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
18693: LD_INT 3
18695: PPUSH
18696: LD_INT 21
18698: PPUSH
18699: LD_INT 5
18701: PUSH
18702: LD_INT 6
18704: PUSH
18705: LD_INT 6
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: PUSH
18713: LD_OWVAR 67
18717: ARRAY
18718: PPUSH
18719: LD_INT 43
18721: PUSH
18722: LD_INT 43
18724: PUSH
18725: LD_INT 44
18727: PUSH
18728: LD_INT 44
18730: PUSH
18731: LD_INT 46
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 43
18743: PUSH
18744: LD_INT 43
18746: PUSH
18747: LD_INT 44
18749: PUSH
18750: LD_INT 44
18752: PUSH
18753: LD_INT 44
18755: PUSH
18756: LD_INT 46
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 44
18769: PUSH
18770: LD_INT 44
18772: PUSH
18773: LD_INT 44
18775: PUSH
18776: LD_INT 44
18778: PUSH
18779: LD_INT 46
18781: PUSH
18782: LD_INT 46
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: PUSH
18798: LD_OWVAR 67
18802: ARRAY
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: LD_INT 22
18812: PUSH
18813: LD_INT 22
18815: PUSH
18816: LD_INT 24
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: PPUSH
18826: LD_INT 2
18828: PPUSH
18829: CALL_OW 12
18833: ARRAY
18834: PUSH
18835: LD_INT 24
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: LD_OWVAR 67
18847: ARRAY
18848: PPUSH
18849: CALL 6302 0 7
// end ;
18853: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
18854: LD_INT 17
18856: PPUSH
18857: CALL_OW 255
18861: PUSH
18862: LD_INT 3
18864: EQUAL
18865: PUSH
18866: LD_INT 17
18868: PPUSH
18869: CALL_OW 302
18873: AND
18874: PUSH
18875: LD_INT 2
18877: PPUSH
18878: CALL_OW 255
18882: PUSH
18883: LD_INT 3
18885: EQUAL
18886: AND
18887: PUSH
18888: LD_INT 2
18890: PPUSH
18891: CALL_OW 302
18895: AND
18896: IFFALSE 18963
18898: GO 18900
18900: DISABLE
// begin enable ;
18901: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18902: LD_INT 17
18904: PPUSH
18905: LD_INT 22
18907: PPUSH
18908: LD_INT 1
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: LD_INT 42
18916: PUSH
18917: LD_INT 43
18919: PUSH
18920: LD_INT 44
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_INT 3
18933: PPUSH
18934: CALL_OW 12
18938: ARRAY
18939: PPUSH
18940: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
18944: LD_INT 17
18946: PPUSH
18947: LD_INT 22
18949: PPUSH
18950: LD_INT 1
18952: PPUSH
18953: LD_INT 1
18955: PPUSH
18956: LD_INT 51
18958: PPUSH
18959: CALL_OW 185
// end ;
18963: END
// every 2 2$0 do var i , j ;
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18971: LD_INT 14700
18973: PUSH
18974: LD_INT 33600
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: LD_INT 1
18983: PPUSH
18984: LD_INT 2
18986: PPUSH
18987: CALL_OW 12
18991: ARRAY
18992: PPUSH
18993: CALL_OW 67
// disableHealAI = 1 ;
18997: LD_ADDR_EXP 32
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_INT 22
19012: PUSH
19013: LD_INT 3
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 4
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 69
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19053
// ComExitBuilding ( i ) ;
19042: LD_VAR 0 1
19046: PPUSH
19047: CALL_OW 122
19051: GO 19039
19053: POP
19054: POP
// wait ( 0 0$1 ) ;
19055: LD_INT 35
19057: PPUSH
19058: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
19062: LD_INT 35
19064: PPUSH
19065: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19069: LD_ADDR_VAR 0 1
19073: PUSH
19074: LD_INT 22
19076: PUSH
19077: LD_INT 3
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 25
19086: PUSH
19087: LD_INT 4
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PPUSH
19098: CALL_OW 69
19102: PUSH
19103: FOR_IN
19104: IFFALSE 19181
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19106: LD_ADDR_VAR 0 2
19110: PUSH
19111: LD_INT 19
19113: PPUSH
19114: LD_INT 22
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 25
19126: PUSH
19127: LD_INT 12
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 70
19142: PUSH
19143: FOR_IN
19144: IFFALSE 19177
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_VAR 0 2
19155: PPUSH
19156: CALL_OW 250
19160: PPUSH
19161: LD_VAR 0 2
19165: PPUSH
19166: CALL_OW 251
19170: PPUSH
19171: CALL_OW 191
// end ;
19175: GO 19143
19177: POP
19178: POP
// end ;
19179: GO 19103
19181: POP
19182: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
19183: LD_INT 22
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 25
19195: PUSH
19196: LD_INT 4
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: PUSH
19212: LD_INT 0
19214: EQUAL
19215: PUSH
19216: LD_EXP 31
19220: PUSH
19221: LD_INT 6
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 8
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: PUSH
19235: LD_OWVAR 67
19239: ARRAY
19240: GREATEREQUAL
19241: OR
19242: PUSH
19243: LD_INT 19
19245: PPUSH
19246: LD_INT 22
19248: PUSH
19249: LD_INT 0
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 25
19258: PUSH
19259: LD_INT 12
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PPUSH
19270: CALL_OW 70
19274: PUSH
19275: LD_INT 0
19277: EQUAL
19278: OR
19279: IFFALSE 19062
// disableHealAI = 0 ;
19281: LD_ADDR_EXP 32
19285: PUSH
19286: LD_INT 0
19288: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
19289: LD_ADDR_VAR 0 1
19293: PUSH
19294: LD_INT 22
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 25
19306: PUSH
19307: LD_INT 12
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PPUSH
19318: CALL_OW 69
19322: PUSH
19323: FOR_IN
19324: IFFALSE 19340
// SetClass ( i , 16 ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_INT 16
19333: PPUSH
19334: CALL_OW 336
19338: GO 19323
19340: POP
19341: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19342: LD_ADDR_VAR 0 1
19346: PUSH
19347: LD_INT 22
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 25
19359: PUSH
19360: LD_INT 4
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19396
// ComMoveXY ( i , 113 , 94 ) ;
19379: LD_VAR 0 1
19383: PPUSH
19384: LD_INT 113
19386: PPUSH
19387: LD_INT 94
19389: PPUSH
19390: CALL_OW 111
19394: GO 19376
19396: POP
19397: POP
// end ;
19398: PPOPN 2
19400: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
19401: LD_INT 21
19403: PPUSH
19404: CALL_OW 255
19408: PUSH
19409: LD_INT 3
19411: EQUAL
19412: PUSH
19413: LD_INT 21
19415: PPUSH
19416: CALL_OW 302
19420: AND
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_INT 3
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 34
19434: PUSH
19435: LD_INT 51
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: PUSH
19451: LD_INT 0
19453: EQUAL
19454: AND
19455: IFFALSE 19487
19457: GO 19459
19459: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
19460: LD_INT 21
19462: PPUSH
19463: LD_INT 23
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: LD_INT 1
19471: PPUSH
19472: LD_INT 51
19474: PPUSH
19475: CALL_OW 185
// wait ( 5 5$0 ) ;
19479: LD_INT 10500
19481: PPUSH
19482: CALL_OW 67
// enable ;
19486: ENABLE
// end ; end_of_file
19487: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
19488: LD_EXP 25
19492: PUSH
19493: LD_INT 0
19495: LESSEQUAL
19496: IFFALSE 19645
19498: GO 19500
19500: DISABLE
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
19505: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: LD_INT 22
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 21
19523: PUSH
19524: LD_INT 3
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 30
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 30
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: PPUSH
19564: CALL_OW 69
19568: ST_TO_ADDR
// for i in tmp do
19569: LD_ADDR_VAR 0 1
19573: PUSH
19574: LD_VAR 0 2
19578: PUSH
19579: FOR_IN
19580: IFFALSE 19613
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
19582: LD_ADDR_VAR 0 3
19586: PUSH
19587: LD_VAR 0 3
19591: PUSH
19592: LD_VAR 0 1
19596: PPUSH
19597: CALL_OW 274
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 275
19609: PLUS
19610: ST_TO_ADDR
19611: GO 19579
19613: POP
19614: POP
// if yourCrates >= needCrates then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_EXP 24
19624: GREATEREQUAL
19625: IFFALSE 19638
// begin FinishMission ( yourCrates ) ;
19627: LD_VAR 0 3
19631: PPUSH
19632: CALL 19648 0 1
// end else
19636: GO 19645
// begin YouLost ( matmin ) ;
19638: LD_STRING matmin
19640: PPUSH
19641: CALL_OW 104
// end ; end ;
19645: PPOPN 3
19647: END
// export function FinishMission ( crates ) ; begin
19648: LD_INT 0
19650: PPUSH
// if crates + 100 > crates then
19651: LD_VAR 0 1
19655: PUSH
19656: LD_INT 100
19658: PLUS
19659: PUSH
19660: LD_VAR 0 1
19664: GREATER
19665: IFFALSE 19689
// begin AddMedal ( cans , 1 ) ;
19667: LD_STRING cans
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
19677: LD_INT 1
19679: PPUSH
19680: LD_STRING 06_crates_1
19682: PPUSH
19683: CALL_OW 39
// end else
19687: GO 19710
// begin AddMedal ( cans , - 1 ) ;
19689: LD_STRING cans
19691: PPUSH
19692: LD_INT 1
19694: NEG
19695: PPUSH
19696: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
19700: LD_INT 0
19702: PPUSH
19703: LD_STRING 06_crates_1
19705: PPUSH
19706: CALL_OW 39
// end ; if unitLost < 2 then
19710: LD_EXP 29
19714: PUSH
19715: LD_INT 2
19717: LESS
19718: IFFALSE 19732
// begin AddMedal ( people , 1 ) ;
19720: LD_STRING people
19722: PPUSH
19723: LD_INT 1
19725: PPUSH
19726: CALL_OW 101
// end else
19730: GO 19743
// begin AddMedal ( people , - 1 ) ;
19732: LD_STRING people
19734: PPUSH
19735: LD_INT 1
19737: NEG
19738: PPUSH
19739: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
19743: LD_EXP 27
19747: PPUSH
19748: LD_STRING 06_remoteVehs_1
19750: PPUSH
19751: CALL_OW 39
// if remoteVehiclesBuild = 1 then
19755: LD_EXP 27
19759: PUSH
19760: LD_INT 1
19762: EQUAL
19763: IFFALSE 19777
// begin AddMedal ( remote , 1 ) ;
19765: LD_STRING remote
19767: PPUSH
19768: LD_INT 1
19770: PPUSH
19771: CALL_OW 101
// end else
19775: GO 19817
// begin if GetTech ( 18 , 1 ) = state_enabled then
19777: LD_INT 18
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: CALL_OW 321
19787: PUSH
19788: LD_INT 1
19790: EQUAL
19791: IFFALSE 19806
// begin AddMedal ( remote , - 1 ) ;
19793: LD_STRING remote
19795: PPUSH
19796: LD_INT 1
19798: NEG
19799: PPUSH
19800: CALL_OW 101
// end else
19804: GO 19817
// begin AddMedal ( remote , - 2 ) ;
19806: LD_STRING remote
19808: PPUSH
19809: LD_INT 2
19811: NEG
19812: PPUSH
19813: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
19817: LD_EXP 19
19821: PPUSH
19822: LD_STRING 06_KurtStatus_1
19824: PPUSH
19825: CALL_OW 39
// GiveMedals ( Main ) ;
19829: LD_STRING Main
19831: PPUSH
19832: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19836: LD_INT 50
19838: PUSH
19839: EMPTY
19840: LIST
19841: PUSH
19842: LD_INT 22
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 21
19854: PUSH
19855: LD_INT 1
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: LD_INT 25
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 25
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 25
19887: PUSH
19888: LD_INT 3
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 25
19897: PUSH
19898: LD_INT 4
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 69
19922: PPUSH
19923: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19927: LD_EXP 1
19931: PPUSH
19932: LD_EXP 40
19936: PUSH
19937: LD_STRING JMM
19939: STR
19940: PPUSH
19941: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19945: LD_EXP 2
19949: PPUSH
19950: LD_EXP 40
19954: PUSH
19955: LD_STRING Lisa
19957: STR
19958: PPUSH
19959: CALL 5180 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19963: LD_EXP 3
19967: PPUSH
19968: LD_EXP 40
19972: PUSH
19973: LD_STRING Bobby
19975: STR
19976: PPUSH
19977: CALL 5180 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19981: LD_EXP 4
19985: PPUSH
19986: LD_EXP 40
19990: PUSH
19991: LD_STRING Cyrus
19993: STR
19994: PPUSH
19995: CALL 5180 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19999: LD_EXP 5
20003: PPUSH
20004: LD_EXP 40
20008: PUSH
20009: LD_STRING Frank
20011: STR
20012: PPUSH
20013: CALL 5180 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20017: LD_EXP 6
20021: PPUSH
20022: LD_EXP 40
20026: PUSH
20027: LD_STRING Brown
20029: STR
20030: PPUSH
20031: CALL 5180 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20035: LD_EXP 7
20039: PPUSH
20040: LD_EXP 40
20044: PUSH
20045: LD_STRING Donaldson
20047: STR
20048: PPUSH
20049: CALL 5180 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20053: LD_EXP 8
20057: PPUSH
20058: LD_EXP 40
20062: PUSH
20063: LD_STRING Gladstone
20065: STR
20066: PPUSH
20067: CALL 5180 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20071: LD_EXP 9
20075: PPUSH
20076: LD_EXP 40
20080: PUSH
20081: LD_STRING Denis
20083: STR
20084: PPUSH
20085: CALL 5180 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20089: LD_EXP 14
20093: PPUSH
20094: LD_EXP 40
20098: PUSH
20099: LD_STRING Joan
20101: STR
20102: PPUSH
20103: CALL 5180 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
20107: LD_EXP 15
20111: PPUSH
20112: LD_STRING 06_JoanStatus_1
20114: PPUSH
20115: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
20119: LD_INT 50
20121: PUSH
20122: EMPTY
20123: LIST
20124: PUSH
20125: LD_INT 22
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 21
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 2
20147: PUSH
20148: LD_INT 25
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 25
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 25
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 25
20180: PUSH
20181: LD_INT 4
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: PPUSH
20201: CALL_OW 69
20205: PUSH
20206: LD_EXP 1
20210: PUSH
20211: LD_EXP 2
20215: PUSH
20216: LD_EXP 3
20220: PUSH
20221: LD_EXP 4
20225: PUSH
20226: LD_EXP 5
20230: PUSH
20231: LD_EXP 6
20235: PUSH
20236: LD_EXP 7
20240: PUSH
20241: LD_EXP 8
20245: PUSH
20246: LD_EXP 9
20250: PUSH
20251: LD_EXP 14
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: DIFF
20268: PPUSH
20269: LD_STRING 06_other_survivors
20271: PPUSH
20272: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
20276: LD_INT 50
20278: PUSH
20279: EMPTY
20280: LIST
20281: PUSH
20282: LD_INT 22
20284: PUSH
20285: LD_INT 1
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 21
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 12
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 25
20317: PUSH
20318: LD_INT 16
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: PPUSH
20336: CALL_OW 69
20340: PPUSH
20341: LD_STRING 06_other_apemans
20343: PPUSH
20344: CALL_OW 38
// YouWin ;
20348: CALL_OW 103
// end ; end_of_file
20352: LD_VAR 0 2
20356: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
20357: LD_EXP 38
20361: PUSH
20362: LD_INT 5
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: LD_INT 3
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: LIST
20375: PUSH
20376: LD_OWVAR 67
20380: ARRAY
20381: EQUAL
20382: IFFALSE 20497
20384: GO 20386
20386: DISABLE
// begin enable ;
20387: ENABLE
// sendedConvoys = 0 ;
20388: LD_ADDR_EXP 38
20392: PUSH
20393: LD_INT 0
20395: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
20396: LD_INT 6
20398: PPUSH
20399: LD_INT 3
20401: PPUSH
20402: LD_INT 5
20404: PPUSH
20405: LD_INT 10
20407: PPUSH
20408: CALL_OW 12
20412: PUSH
20413: LD_INT 5
20415: PPUSH
20416: LD_INT 11
20418: PPUSH
20419: CALL_OW 12
20423: PUSH
20424: LD_INT 8
20426: PPUSH
20427: LD_INT 12
20429: PPUSH
20430: CALL_OW 12
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: LIST
20439: PUSH
20440: LD_OWVAR 67
20444: ARRAY
20445: PPUSH
20446: LD_INT 0
20448: PPUSH
20449: LD_INT 0
20451: PPUSH
20452: LD_INT 0
20454: PPUSH
20455: LD_INT 3
20457: PPUSH
20458: LD_EXP 33
20462: PPUSH
20463: LD_EXP 34
20467: PPUSH
20468: CALL_OW 12
20472: PPUSH
20473: LD_INT 18
20475: PPUSH
20476: LD_INT 17
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_INT 1
20484: PPUSH
20485: LD_INT 2
20487: PPUSH
20488: CALL_OW 12
20492: PPUSH
20493: CALL 8743 0 12
// end ; end_of_file
20497: END
// export function PrepareNature ; var i , un ; begin
20498: LD_INT 0
20500: PPUSH
20501: PPUSH
20502: PPUSH
// for i = 1 to Difficulty + 2 do
20503: LD_ADDR_VAR 0 2
20507: PUSH
20508: DOUBLE
20509: LD_INT 1
20511: DEC
20512: ST_TO_ADDR
20513: LD_OWVAR 67
20517: PUSH
20518: LD_INT 2
20520: PLUS
20521: PUSH
20522: FOR_TO
20523: IFFALSE 20632
// begin hc_sex = sex_male ;
20525: LD_ADDR_OWVAR 27
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// uc_side = 0 ;
20533: LD_ADDR_OWVAR 20
20537: PUSH
20538: LD_INT 0
20540: ST_TO_ADDR
// uc_nation = nation_nature ;
20541: LD_ADDR_OWVAR 21
20545: PUSH
20546: LD_INT 0
20548: ST_TO_ADDR
// hc_class = class_tiger ;
20549: LD_ADDR_OWVAR 28
20553: PUSH
20554: LD_INT 14
20556: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20557: LD_ADDR_OWVAR 31
20561: PUSH
20562: LD_EXP 34
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 0
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20582: LD_ADDR_OWVAR 35
20586: PUSH
20587: LD_INT 5
20589: NEG
20590: PPUSH
20591: LD_INT 5
20593: PPUSH
20594: CALL_OW 12
20598: PUSH
20599: LD_OWVAR 67
20603: MUL
20604: ST_TO_ADDR
// un = CreateHuman ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: CALL_OW 44
20614: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20615: LD_VAR 0 3
20619: PPUSH
20620: LD_INT 20
20622: PPUSH
20623: LD_INT 0
20625: PPUSH
20626: CALL_OW 49
// end ;
20630: GO 20522
20632: POP
20633: POP
// for i = 1 to rand ( 3 , 4 ) do
20634: LD_ADDR_VAR 0 2
20638: PUSH
20639: DOUBLE
20640: LD_INT 1
20642: DEC
20643: ST_TO_ADDR
20644: LD_INT 3
20646: PPUSH
20647: LD_INT 4
20649: PPUSH
20650: CALL_OW 12
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20750
// begin hc_sex = sex_male ;
20658: LD_ADDR_OWVAR 27
20662: PUSH
20663: LD_INT 1
20665: ST_TO_ADDR
// uc_side = 0 ;
20666: LD_ADDR_OWVAR 20
20670: PUSH
20671: LD_INT 0
20673: ST_TO_ADDR
// uc_nation = nation_nature ;
20674: LD_ADDR_OWVAR 21
20678: PUSH
20679: LD_INT 0
20681: ST_TO_ADDR
// hc_class = 18 ;
20682: LD_ADDR_OWVAR 28
20686: PUSH
20687: LD_INT 18
20689: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20690: LD_ADDR_OWVAR 31
20694: PUSH
20695: LD_EXP 34
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: ST_TO_ADDR
// hc_agressivity = 0 ;
20715: LD_ADDR_OWVAR 35
20719: PUSH
20720: LD_INT 0
20722: ST_TO_ADDR
// un = CreateHuman ;
20723: LD_ADDR_VAR 0 3
20727: PUSH
20728: CALL_OW 44
20732: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20733: LD_VAR 0 3
20737: PPUSH
20738: LD_INT 20
20740: PPUSH
20741: LD_INT 0
20743: PPUSH
20744: CALL_OW 49
// end ;
20748: GO 20655
20750: POP
20751: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: DOUBLE
20758: LD_INT 1
20760: DEC
20761: ST_TO_ADDR
20762: LD_INT 1
20764: PPUSH
20765: LD_INT 3
20767: PPUSH
20768: CALL_OW 12
20772: PUSH
20773: LD_OWVAR 67
20777: PLUS
20778: PUSH
20779: FOR_TO
20780: IFFALSE 20961
// begin hc_sex = sex_male ;
20782: LD_ADDR_OWVAR 27
20786: PUSH
20787: LD_INT 1
20789: ST_TO_ADDR
// uc_side = 0 ;
20790: LD_ADDR_OWVAR 20
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// uc_nation = nation_nature ;
20798: LD_ADDR_OWVAR 21
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// hc_class = class_apeman ;
20806: LD_ADDR_OWVAR 28
20810: PUSH
20811: LD_INT 12
20813: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
20814: LD_ADDR_OWVAR 31
20818: PUSH
20819: LD_EXP 33
20823: PPUSH
20824: LD_EXP 34
20828: PPUSH
20829: CALL_OW 12
20833: PUSH
20834: LD_EXP 33
20838: PPUSH
20839: LD_EXP 34
20843: PPUSH
20844: CALL_OW 12
20848: PUSH
20849: LD_EXP 33
20853: PPUSH
20854: LD_EXP 34
20858: PPUSH
20859: CALL_OW 12
20863: PUSH
20864: LD_EXP 33
20868: PPUSH
20869: LD_EXP 34
20873: PPUSH
20874: CALL_OW 12
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
20885: LD_ADDR_OWVAR 35
20889: PUSH
20890: LD_INT 20
20892: PPUSH
20893: LD_INT 30
20895: PPUSH
20896: CALL_OW 12
20900: PUSH
20901: LD_INT 30
20903: PPUSH
20904: LD_INT 40
20906: PPUSH
20907: CALL_OW 12
20911: PUSH
20912: LD_INT 40
20914: PPUSH
20915: LD_INT 50
20917: PPUSH
20918: CALL_OW 12
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_OWVAR 67
20932: ARRAY
20933: ST_TO_ADDR
// un = CreateHuman ;
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: CALL_OW 44
20943: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
20944: LD_VAR 0 3
20948: PPUSH
20949: LD_INT 21
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 49
// end ;
20959: GO 20779
20961: POP
20962: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
20963: LD_ADDR_VAR 0 2
20967: PUSH
20968: DOUBLE
20969: LD_INT 1
20971: DEC
20972: ST_TO_ADDR
20973: LD_INT 5
20975: PPUSH
20976: LD_INT 6
20978: PPUSH
20979: CALL_OW 12
20983: PUSH
20984: LD_OWVAR 67
20988: PLUS
20989: PUSH
20990: FOR_TO
20991: IFFALSE 21137
// begin hc_sex = sex_male ;
20993: LD_ADDR_OWVAR 27
20997: PUSH
20998: LD_INT 1
21000: ST_TO_ADDR
// uc_side = 0 ;
21001: LD_ADDR_OWVAR 20
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// uc_nation = nation_nature ;
21009: LD_ADDR_OWVAR 21
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// hc_class = class_apeman ;
21017: LD_ADDR_OWVAR 28
21021: PUSH
21022: LD_INT 12
21024: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21025: LD_ADDR_OWVAR 31
21029: PUSH
21030: LD_EXP 33
21034: PPUSH
21035: LD_EXP 34
21039: PPUSH
21040: CALL_OW 12
21044: PUSH
21045: LD_EXP 33
21049: PPUSH
21050: LD_EXP 34
21054: PPUSH
21055: CALL_OW 12
21059: PUSH
21060: LD_OWVAR 67
21064: PLUS
21065: PUSH
21066: LD_EXP 33
21070: PPUSH
21071: LD_EXP 34
21075: PPUSH
21076: CALL_OW 12
21080: PUSH
21081: LD_EXP 33
21085: PPUSH
21086: LD_EXP 34
21090: PPUSH
21091: CALL_OW 12
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: ST_TO_ADDR
// hc_agressivity = 0 ;
21102: LD_ADDR_OWVAR 35
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// un = CreateHuman ;
21110: LD_ADDR_VAR 0 3
21114: PUSH
21115: CALL_OW 44
21119: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_INT 22
21127: PPUSH
21128: LD_INT 0
21130: PPUSH
21131: CALL_OW 49
// end ;
21135: GO 20990
21137: POP
21138: POP
// end ; end_of_file
21139: LD_VAR 0 1
21143: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21144: LD_EXP 1
21148: PPUSH
21149: CALL_OW 301
21153: IFFALSE 21165
21155: GO 21157
21157: DISABLE
// YouLost ( JMM ) ;
21158: LD_STRING JMM
21160: PPUSH
21161: CALL_OW 104
21165: END
