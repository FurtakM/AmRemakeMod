// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 22349 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 48
5938: PUSH
5939: LD_INT 49
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 51
5953: PUSH
5954: LD_INT 52
5956: PUSH
5957: LD_INT 69
5959: PUSH
5960: LD_INT 39
5962: PUSH
5963: LD_INT 34
5965: PUSH
5966: LD_INT 40
5968: PUSH
5969: LD_INT 53
5971: PUSH
5972: LD_INT 71
5974: PUSH
5975: LD_INT 57
5977: PUSH
5978: LD_INT 58
5980: PUSH
5981: LD_INT 44
5983: PUSH
5984: LD_INT 32
5986: PUSH
5987: LD_INT 27
5989: PUSH
5990: LD_INT 23
5992: PUSH
5993: LD_INT 33
5995: PUSH
5996: LD_INT 59
5998: PUSH
5999: LD_INT 54
6001: PUSH
6002: LD_INT 55
6004: PUSH
6005: LD_INT 56
6007: PUSH
6008: LD_INT 63
6010: PUSH
6011: LD_INT 64
6013: PUSH
6014: LD_INT 65
6016: PUSH
6017: LD_INT 30
6019: PUSH
6020: LD_INT 31
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6066: LD_ADDR_VAR 0 5
6070: PUSH
6071: DOUBLE
6072: LD_INT 1
6074: DEC
6075: ST_TO_ADDR
6076: LD_VAR 0 8
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6158
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6084: LD_VAR 0 8
6088: PUSH
6089: LD_VAR 0 5
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 321
6104: PUSH
6105: LD_INT 1
6107: EQUAL
6108: PUSH
6109: LD_VAR 0 8
6113: PUSH
6114: LD_VAR 0 5
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 3
6124: PPUSH
6125: CALL_OW 482
6129: PUSH
6130: LD_INT 1
6132: EQUAL
6133: AND
6134: IFFALSE 6156
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6136: LD_VAR 0 2
6140: PPUSH
6141: LD_VAR 0 8
6145: PUSH
6146: LD_VAR 0 5
6150: ARRAY
6151: PPUSH
6152: CALL_OW 184
6156: GO 6081
6158: POP
6159: POP
// end ;
6160: LD_VAR 0 4
6164: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6170: LD_INT 22
6172: PUSH
6173: LD_VAR 0 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: LD_VAR 0 3
6205: LESSEQUAL
6206: IFFALSE 6314
// begin for i = 1 to vehCount do
6208: LD_ADDR_VAR 0 9
6212: PUSH
6213: DOUBLE
6214: LD_INT 1
6216: DEC
6217: ST_TO_ADDR
6218: LD_VAR 0 3
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6312
// begin weapon = weaponTab [ i ] ;
6226: LD_ADDR_VAR 0 10
6230: PUSH
6231: LD_VAR 0 4
6235: PUSH
6236: LD_VAR 0 9
6240: ARRAY
6241: ST_TO_ADDR
// if weapon = 46 then
6242: LD_VAR 0 10
6246: PUSH
6247: LD_INT 46
6249: EQUAL
6250: IFFALSE 6281
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_INT 24
6259: PPUSH
6260: LD_VAR 0 5
6264: PPUSH
6265: LD_VAR 0 6
6269: PPUSH
6270: LD_VAR 0 10
6274: PPUSH
6275: CALL_OW 185
// end else
6279: GO 6310
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6281: LD_VAR 0 2
6285: PPUSH
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_VAR 0 6
6300: PPUSH
6301: LD_VAR 0 10
6305: PPUSH
6306: CALL_OW 185
// end ; end ;
6310: GO 6223
6312: POP
6313: POP
// end ; end ;
6314: LD_VAR 0 8
6318: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
6323: PPUSH
6324: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6325: LD_ADDR_VAR 0 8
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_VAR 0 1
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 24
6357: PUSH
6358: LD_INT 650
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: ST_TO_ADDR
// if damageVehicles > 0 then
6379: LD_VAR 0 8
6383: PUSH
6384: LD_INT 0
6386: GREATER
6387: IFFALSE 6408
// ComMoveXY ( damageVehicles , repX , repY ) ;
6389: LD_VAR 0 8
6393: PPUSH
6394: LD_VAR 0 3
6398: PPUSH
6399: LD_VAR 0 4
6403: PPUSH
6404: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6408: LD_VAR 0 8
6412: PPUSH
6413: LD_INT 95
6415: PUSH
6416: LD_VAR 0 2
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 58
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 72
6446: PUSH
6447: LD_INT 0
6449: GREATER
6450: IFFALSE 6517
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: LD_INT 95
6464: PUSH
6465: LD_VAR 0 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: LD_INT 58
6479: PUSH
6480: EMPTY
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PUSH
6496: FOR_IN
6497: IFFALSE 6515
// ComExitVehicle ( UnitsInside ( i ) ) ;
6499: LD_VAR 0 6
6503: PPUSH
6504: CALL_OW 313
6508: PPUSH
6509: CALL_OW 121
6513: GO 6496
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 5
6521: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6531: LD_ADDR_VAR 0 8
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: LD_INT 660
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 3
6570: PUSH
6571: LD_INT 58
6573: PUSH
6574: EMPTY
6575: LIST
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 34
6582: PUSH
6583: LD_INT 43
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 34
6592: PUSH
6593: LD_INT 44
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 34
6602: PUSH
6603: LD_INT 46
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 69
6631: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6632: LD_INT 22
6634: PUSH
6635: LD_VAR 0 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 21
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 1000
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 58
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 34
6678: PUSH
6679: LD_INT 43
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 34
6688: PUSH
6689: LD_INT 44
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 34
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: LD_INT 6
6733: PUSH
6734: LD_INT 6
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_OWVAR 67
6746: ARRAY
6747: EQUAL
6748: IFFALSE 7004
// if seeEnemy = 0 then
6750: LD_VAR 0 11
6754: PUSH
6755: LD_INT 0
6757: EQUAL
6758: IFFALSE 7004
// repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6767: LD_ADDR_VAR 0 8
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 24
6796: PUSH
6797: LD_INT 660
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: LD_INT 58
6809: PUSH
6810: EMPTY
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 34
6818: PUSH
6819: LD_INT 43
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 34
6828: PUSH
6829: LD_INT 44
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 34
6838: PUSH
6839: LD_INT 46
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PPUSH
6863: CALL_OW 69
6867: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6868: LD_INT 22
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 95
6882: PUSH
6883: LD_VAR 0 2
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PPUSH
6896: CALL_OW 69
6900: NOT
6901: PUSH
6902: LD_VAR 0 11
6906: PUSH
6907: LD_INT 0
6909: EQUAL
6910: AND
6911: IFFALSE 6966
// for i := 1 to wayX do
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 3
6927: PUSH
6928: FOR_TO
6929: IFFALSE 6964
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6931: LD_VAR 0 8
6935: PPUSH
6936: LD_VAR 0 3
6940: PUSH
6941: LD_VAR 0 6
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 4
6951: PUSH
6952: LD_VAR 0 6
6956: ARRAY
6957: PPUSH
6958: CALL_OW 114
6962: GO 6928
6964: POP
6965: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
6966: LD_INT 22
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 95
6980: PUSH
6981: LD_VAR 0 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PUSH
6999: LD_INT 0
7001: GREATER
7002: IFFALSE 6760
// seeEnemy = 1 ;
7004: LD_ADDR_VAR 0 11
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// for j in vehiclesOK do
7019: LD_ADDR_VAR 0 7
7023: PUSH
7024: LD_VAR 0 8
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7231
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7032: LD_ADDR_VAR 0 9
7036: PUSH
7037: LD_INT 81
7039: PUSH
7040: LD_VAR 0 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 101
7051: PUSH
7052: LD_INT 1
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: PPUSH
7068: LD_VAR 0 7
7072: PPUSH
7073: CALL_OW 74
7077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7078: LD_ADDR_VAR 0 10
7082: PUSH
7083: LD_INT 81
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 101
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: LD_INT 59
7110: PUSH
7111: EMPTY
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 21
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PPUSH
7153: LD_VAR 0 7
7157: PPUSH
7158: CALL_OW 74
7162: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7163: LD_VAR 0 7
7167: PPUSH
7168: LD_VAR 0 9
7172: PPUSH
7173: CALL_OW 296
7177: PUSH
7178: LD_INT 8
7180: PLUS
7181: PUSH
7182: LD_VAR 0 7
7186: PPUSH
7187: LD_VAR 0 10
7191: PPUSH
7192: CALL_OW 296
7196: LESS
7197: IFFALSE 7215
// ComAttackUnit ( j , target1 ) else
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 9
7208: PPUSH
7209: CALL_OW 115
7213: GO 7229
// ComAttackUnit ( j , target2 ) ;
7215: LD_VAR 0 7
7219: PPUSH
7220: LD_VAR 0 10
7224: PPUSH
7225: CALL_OW 115
// end ;
7229: GO 7029
7231: POP
7232: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 1000
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: LD_INT 0
7331: EQUAL
7332: IFFALSE 7012
// seeEnemy = 0 ;
7334: LD_ADDR_VAR 0 11
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 5
7346: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7355: LD_ADDR_VAR 0 8
7359: PUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: CALL_OW 313
7369: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7370: LD_ADDR_VAR 0 9
7374: PUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: LD_INT 22
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 24
7404: PUSH
7405: LD_INT 750
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 3
7414: PUSH
7415: LD_INT 54
7417: PUSH
7418: EMPTY
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 70
7435: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: LD_INT 22
7448: PUSH
7449: LD_VAR 0 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 24
7473: PUSH
7474: LD_INT 1000
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: PPUSH
7493: CALL_OW 70
7497: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7498: LD_VAR 0 6
7502: NOT
7503: PUSH
7504: LD_INT 22
7506: PUSH
7507: LD_VAR 0 1
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: LD_INT 250
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: NOT
7546: AND
7547: IFFALSE 7551
// exit ;
7549: GO 7733
// if buildings_list > 0 and engineerOkInside then
7551: LD_VAR 0 6
7555: PUSH
7556: LD_INT 0
7558: GREATER
7559: PUSH
7560: LD_VAR 0 8
7564: AND
7565: IFFALSE 7576
// ComExitBuilding ( engineerOkInside ) ;
7567: LD_VAR 0 8
7571: PPUSH
7572: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 0
7583: GREATER
7584: PUSH
7585: LD_VAR 0 9
7589: PUSH
7590: LD_INT 0
7592: GREATER
7593: AND
7594: IFFALSE 7614
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7596: LD_VAR 0 9
7600: PPUSH
7601: LD_VAR 0 6
7605: PUSH
7606: LD_INT 1
7608: ARRAY
7609: PPUSH
7610: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7614: LD_VAR 0 6
7618: PUSH
7619: LD_INT 0
7621: EQUAL
7622: PUSH
7623: LD_VAR 0 4
7627: PUSH
7628: LD_INT 0
7630: EQUAL
7631: AND
7632: PUSH
7633: LD_VAR 0 9
7637: PUSH
7638: LD_INT 0
7640: GREATER
7641: AND
7642: IFFALSE 7658
// ComEnterUnit ( engineerOkOutside , building ) ;
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 2
7653: PPUSH
7654: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7658: LD_VAR 0 9
7662: PUSH
7663: LD_INT 0
7665: GREATER
7666: PUSH
7667: LD_VAR 0 6
7671: PUSH
7672: LD_INT 0
7674: EQUAL
7675: AND
7676: PUSH
7677: LD_VAR 0 4
7681: PUSH
7682: LD_INT 0
7684: GREATER
7685: AND
7686: IFFALSE 7733
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7688: LD_VAR 0 9
7692: PPUSH
7693: LD_VAR 0 4
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PPUSH
7702: LD_VAR 0 4
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: LD_VAR 0 4
7715: PUSH
7716: LD_INT 3
7718: ARRAY
7719: PPUSH
7720: LD_VAR 0 4
7724: PUSH
7725: LD_INT 4
7727: ARRAY
7728: PPUSH
7729: CALL_OW 145
// end ;
7733: LD_VAR 0 5
7737: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7738: LD_INT 0
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 22
7756: PUSH
7757: LD_VAR 0 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 25
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 24
7788: PUSH
7789: LD_INT 251
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 3
7816: PPUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 23
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 25
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 50
7851: PUSH
7852: EMPTY
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 70
7865: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7866: LD_ADDR_VAR 0 10
7870: PUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_VAR 0 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 3
7900: PUSH
7901: LD_INT 25
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 24
7920: PUSH
7921: LD_INT 750
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PPUSH
7938: CALL_OW 70
7942: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7943: LD_ADDR_VAR 0 11
7947: PUSH
7948: LD_VAR 0 2
7952: PPUSH
7953: LD_INT 22
7955: PUSH
7956: LD_VAR 0 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: LD_INT 25
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: LD_INT 1000
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 70
8019: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8020: LD_VAR 0 10
8024: NOT
8025: PUSH
8026: LD_VAR 0 11
8030: NOT
8031: AND
8032: PUSH
8033: LD_VAR 0 6
8037: NOT
8038: AND
8039: IFFALSE 8043
// exit ;
8041: GO 8277
// if damageUnits > 0 and sci_list > 0 then
8043: LD_VAR 0 10
8047: PUSH
8048: LD_INT 0
8050: GREATER
8051: PUSH
8052: LD_VAR 0 6
8056: PUSH
8057: LD_INT 0
8059: GREATER
8060: AND
8061: IFFALSE 8077
// ComMoveToArea ( damageUnits , healArea ) ;
8063: LD_VAR 0 10
8067: PPUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8077: LD_VAR 0 11
8081: PUSH
8082: LD_INT 0
8084: GREATER
8085: PUSH
8086: LD_VAR 0 6
8090: PUSH
8091: LD_INT 0
8093: GREATER
8094: AND
8095: IFFALSE 8106
// ComExitBuilding ( sci_list ) ;
8097: LD_VAR 0 6
8101: PPUSH
8102: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8106: LD_VAR 0 11
8110: PUSH
8111: LD_INT 0
8113: GREATER
8114: PUSH
8115: LD_VAR 0 7
8119: PUSH
8120: LD_INT 0
8122: GREATER
8123: AND
8124: IFFALSE 8144
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8126: LD_VAR 0 7
8130: PPUSH
8131: LD_VAR 0 11
8135: PUSH
8136: LD_INT 1
8138: ARRAY
8139: PPUSH
8140: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8144: LD_VAR 0 10
8148: PUSH
8149: LD_INT 0
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 11
8157: PUSH
8158: LD_INT 0
8160: EQUAL
8161: AND
8162: PUSH
8163: LD_VAR 0 7
8167: PUSH
8168: LD_INT 0
8170: GREATER
8171: AND
8172: IFFALSE 8277
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8174: LD_ADDR_VAR 0 12
8178: PUSH
8179: LD_INT 22
8181: PUSH
8182: LD_VAR 0 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8221: LD_ADDR_VAR 0 13
8225: PUSH
8226: LD_INT 1
8228: PPUSH
8229: LD_VAR 0 12
8233: PPUSH
8234: CALL_OW 12
8238: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8239: LD_VAR 0 7
8243: PPUSH
8244: LD_INT 3
8246: PUSH
8247: LD_INT 60
8249: PUSH
8250: EMPTY
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 72
8261: PPUSH
8262: LD_VAR 0 12
8266: PUSH
8267: LD_VAR 0 13
8271: ARRAY
8272: PPUSH
8273: CALL_OW 120
// end ; end ;
8277: LD_VAR 0 5
8281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// tmpTab = [ ] ;
8288: LD_ADDR_VAR 0 6
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8295: LD_INT 22
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 30
8309: PUSH
8310: LD_INT 32
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: IFFALSE 8412
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8331: LD_ADDR_VAR 0 4
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 30
8350: PUSH
8351: LD_INT 32
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8410
// begin for j in UnitsInside ( i ) do
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_VAR 0 4
8379: PPUSH
8380: CALL_OW 313
8384: PUSH
8385: FOR_IN
8386: IFFALSE 8406
// tmpTab = tmpTab ^ j ;
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: LD_VAR 0 6
8397: PUSH
8398: LD_VAR 0 5
8402: ADD
8403: ST_TO_ADDR
8404: GO 8385
8406: POP
8407: POP
// end ;
8408: GO 8367
8410: POP
8411: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8412: LD_VAR 0 6
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: CALL_OW 250
8426: PPUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: CALL_OW 251
8436: PPUSH
8437: CALL_OW 114
// end ;
8441: LD_VAR 0 3
8445: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
// enable ;
8452: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8453: LD_ADDR_VAR 0 7
8457: PUSH
8458: LD_VAR 0 3
8462: PPUSH
8463: CALL_OW 435
8467: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8468: LD_ADDR_VAR 0 6
8472: PUSH
8473: LD_INT 22
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 34
8487: PUSH
8488: LD_VAR 0 2
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 0
8513: GREATER
8514: PUSH
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 435
8524: AND
8525: PUSH
8526: LD_VAR 0 7
8530: PUSH
8531: LD_INT 0
8533: GREATER
8534: AND
8535: IFFALSE 8584
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 7
8550: PUSH
8551: LD_INT 1
8553: ARRAY
8554: PPUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_INT 2
8562: ARRAY
8563: PPUSH
8564: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_INT 100
8579: PPUSH
8580: CALL_OW 240
// end ; end ;
8584: LD_VAR 0 4
8588: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
8598: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8599: LD_ADDR_VAR 0 6
8603: PUSH
8604: LD_VAR 0 2
8608: PPUSH
8609: LD_INT 22
8611: PUSH
8612: LD_VAR 0 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 56
8623: PUSH
8624: EMPTY
8625: LIST
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 700
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: LD_INT 60
8642: PUSH
8643: EMPTY
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 70
8711: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8712: LD_ADDR_VAR 0 7
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 58
8746: PUSH
8747: EMPTY
8748: LIST
8749: PUSH
8750: LD_INT 24
8752: PUSH
8753: LD_INT 251
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PPUSH
8766: CALL_OW 70
8770: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_INT 22
8783: PUSH
8784: LD_VAR 0 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 4
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 30
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 251
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: ST_TO_ADDR
// if barrackList > 0 then
8841: LD_VAR 0 9
8845: PUSH
8846: LD_INT 0
8848: GREATER
8849: IFFALSE 8997
// begin if turretList = 0 then
8851: LD_VAR 0 7
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: IFFALSE 8901
// begin if soldiers_list > 0 then
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 0
8868: GREATER
8869: IFFALSE 8899
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_VAR 0 9
8888: PPUSH
8889: CALL_OW 12
8893: ARRAY
8894: PPUSH
8895: CALL_OW 120
// end else
8899: GO 8997
// begin for i in barrackList do
8901: LD_ADDR_VAR 0 4
8905: PUSH
8906: LD_VAR 0 9
8910: PUSH
8911: FOR_IN
8912: IFFALSE 8995
// begin insideUnits = UnitsInside ( i ) ;
8914: LD_ADDR_VAR 0 10
8918: PUSH
8919: LD_VAR 0 4
8923: PPUSH
8924: CALL_OW 313
8928: ST_TO_ADDR
// if insideUnits > 0 then
8929: LD_VAR 0 10
8933: PUSH
8934: LD_INT 0
8936: GREATER
8937: IFFALSE 8961
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8939: LD_VAR 0 10
8943: PUSH
8944: LD_INT 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 7
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 120
// if soldiers_list > 0 then
8961: LD_VAR 0 6
8965: PUSH
8966: LD_INT 0
8968: GREATER
8969: IFFALSE 8993
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8971: LD_VAR 0 6
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PPUSH
8980: LD_VAR 0 7
8984: PUSH
8985: LD_INT 1
8987: ARRAY
8988: PPUSH
8989: CALL_OW 120
// end ;
8993: GO 8911
8995: POP
8996: POP
// end ; end ; end ;
8997: LD_VAR 0 3
9001: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9002: LD_INT 0
9004: PPUSH
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9009: LD_ADDR_VAR 0 6
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 33
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 2
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 3
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 58
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9139: LD_VAR 0 6
9143: PUSH
9144: LD_INT 0
9146: GREATER
9147: PUSH
9148: LD_VAR 0 7
9152: PUSH
9153: LD_INT 0
9155: GREATER
9156: AND
9157: IFFALSE 9227
// begin for i in turretsList do
9159: LD_ADDR_VAR 0 4
9163: PUSH
9164: LD_VAR 0 6
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9225
// begin for j in enemyBuildings do
9172: LD_ADDR_VAR 0 5
9176: PUSH
9177: LD_VAR 0 7
9181: PUSH
9182: FOR_IN
9183: IFFALSE 9221
// begin if GetDistUnits ( i , j ) < 20 then
9185: LD_VAR 0 4
9189: PPUSH
9190: LD_VAR 0 5
9194: PPUSH
9195: CALL_OW 296
9199: PUSH
9200: LD_INT 20
9202: LESS
9203: IFFALSE 9219
// begin ComAttackUnit ( i , j ) ;
9205: LD_VAR 0 4
9209: PPUSH
9210: LD_VAR 0 5
9214: PPUSH
9215: CALL_OW 115
// end ; end ;
9219: GO 9182
9221: POP
9222: POP
// end ;
9223: GO 9169
9225: POP
9226: POP
// end ; end ;
9227: LD_VAR 0 3
9231: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9232: LD_INT 0
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: LD_VAR 0 1
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 34
9269: PUSH
9270: LD_INT 52
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: PPUSH
9282: CALL_OW 69
9286: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9287: LD_ADDR_VAR 0 9
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_VAR 0 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 21
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 3
9316: PUSH
9317: LD_INT 24
9319: PUSH
9320: LD_INT 1000
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9344: LD_VAR 0 9
9348: PUSH
9349: LD_INT 0
9351: GREATER
9352: PUSH
9353: LD_VAR 0 8
9357: PPUSH
9358: LD_INT 24
9360: PUSH
9361: LD_INT 750
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 72
9372: PUSH
9373: LD_INT 0
9375: GREATER
9376: AND
9377: IFFALSE 9412
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9379: LD_VAR 0 8
9383: PPUSH
9384: LD_INT 24
9386: PUSH
9387: LD_INT 750
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: PPUSH
9399: LD_VAR 0 9
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9412: LD_VAR 0 8
9416: PPUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 750
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 72
9438: PUSH
9439: LD_INT 0
9441: GREATER
9442: IFFALSE 9480
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9444: LD_VAR 0 8
9448: PPUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 24
9454: PUSH
9455: LD_INT 750
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 72
9470: PPUSH
9471: LD_VAR 0 2
9475: PPUSH
9476: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9480: LD_VAR 0 8
9484: PUSH
9485: LD_INT 0
9487: GREATER
9488: PUSH
9489: LD_VAR 0 9
9493: PUSH
9494: LD_INT 0
9496: EQUAL
9497: AND
9498: PUSH
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 0
9506: GREATER
9507: AND
9508: IFFALSE 9555
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 1
9522: ARRAY
9523: PPUSH
9524: LD_VAR 0 3
9528: PUSH
9529: LD_INT 2
9531: ARRAY
9532: PPUSH
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 3
9540: ARRAY
9541: PPUSH
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 4
9549: ARRAY
9550: PPUSH
9551: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9555: LD_VAR 0 2
9559: PPUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 52
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: LD_INT 24
9597: PUSH
9598: LD_INT 750
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: PUSH
9620: LD_INT 0
9622: GREATER
9623: IFFALSE 9825
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
9625: LD_ADDR_VAR 0 5
9629: PUSH
9630: LD_VAR 0 2
9634: PPUSH
9635: LD_INT 22
9637: PUSH
9638: LD_VAR 0 1
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 52
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 24
9672: PUSH
9673: LD_INT 750
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 70
9694: PUSH
9695: FOR_IN
9696: IFFALSE 9823
// begin mechTmp = UnitsInside ( i ) ;
9698: LD_ADDR_VAR 0 6
9702: PUSH
9703: LD_VAR 0 5
9707: PPUSH
9708: CALL_OW 313
9712: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
9713: LD_VAR 0 6
9717: PPUSH
9718: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
9722: LD_VAR 0 6
9726: PPUSH
9727: LD_VAR 0 7
9731: PPUSH
9732: CALL_OW 189
// wait ( 0 0$2 ) ;
9736: LD_INT 70
9738: PPUSH
9739: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 2
9752: PPUSH
9753: LD_INT 22
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 21
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 34
9777: PUSH
9778: LD_INT 52
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 1000
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 58
9797: PUSH
9798: EMPTY
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: CALL_OW 180
// end ;
9821: GO 9695
9823: POP
9824: POP
// end ; end ;
9825: LD_VAR 0 4
9829: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9830: LD_INT 0
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
// for i = 1 to medicCount do
9843: LD_ADDR_VAR 0 14
9847: PUSH
9848: DOUBLE
9849: LD_INT 1
9851: DEC
9852: ST_TO_ADDR
9853: LD_VAR 0 7
9857: PUSH
9858: FOR_TO
9859: IFFALSE 9941
// begin uc_side = side ;
9861: LD_ADDR_OWVAR 20
9865: PUSH
9866: LD_VAR 0 1
9870: ST_TO_ADDR
// uc_nation = nation ;
9871: LD_ADDR_OWVAR 21
9875: PUSH
9876: LD_VAR 0 2
9880: ST_TO_ADDR
// hc_name =  ;
9881: LD_ADDR_OWVAR 26
9885: PUSH
9886: LD_STRING 
9888: ST_TO_ADDR
// hc_gallery =  ;
9889: LD_ADDR_OWVAR 33
9893: PUSH
9894: LD_STRING 
9896: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9897: LD_INT 0
9899: PPUSH
9900: LD_INT 4
9902: PPUSH
9903: LD_VAR 0 8
9907: PPUSH
9908: CALL_OW 380
// un = CreateHuman ;
9912: LD_ADDR_VAR 0 16
9916: PUSH
9917: CALL_OW 44
9921: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9922: LD_VAR 0 16
9926: PPUSH
9927: LD_VAR 0 9
9931: PPUSH
9932: LD_INT 0
9934: PPUSH
9935: CALL_OW 49
// end ;
9939: GO 9858
9941: POP
9942: POP
// for i = 1 to soldierCount do
9943: LD_ADDR_VAR 0 14
9947: PUSH
9948: DOUBLE
9949: LD_INT 1
9951: DEC
9952: ST_TO_ADDR
9953: LD_VAR 0 3
9957: PUSH
9958: FOR_TO
9959: IFFALSE 10041
// begin uc_side = side ;
9961: LD_ADDR_OWVAR 20
9965: PUSH
9966: LD_VAR 0 1
9970: ST_TO_ADDR
// uc_nation = nation ;
9971: LD_ADDR_OWVAR 21
9975: PUSH
9976: LD_VAR 0 2
9980: ST_TO_ADDR
// hc_name =  ;
9981: LD_ADDR_OWVAR 26
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// hc_gallery =  ;
9989: LD_ADDR_OWVAR 33
9993: PUSH
9994: LD_STRING 
9996: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9997: LD_INT 0
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_VAR 0 8
10007: PPUSH
10008: CALL_OW 380
// un = CreateHuman ;
10012: LD_ADDR_VAR 0 16
10016: PUSH
10017: CALL_OW 44
10021: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10022: LD_VAR 0 16
10026: PPUSH
10027: LD_VAR 0 9
10031: PPUSH
10032: LD_INT 0
10034: PPUSH
10035: CALL_OW 49
// end ;
10039: GO 9958
10041: POP
10042: POP
// for i = 1 to sniperCount do
10043: LD_ADDR_VAR 0 14
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_VAR 0 4
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10141
// begin uc_side = side ;
10061: LD_ADDR_OWVAR 20
10065: PUSH
10066: LD_VAR 0 1
10070: ST_TO_ADDR
// uc_nation = nation ;
10071: LD_ADDR_OWVAR 21
10075: PUSH
10076: LD_VAR 0 2
10080: ST_TO_ADDR
// hc_name =  ;
10081: LD_ADDR_OWVAR 26
10085: PUSH
10086: LD_STRING 
10088: ST_TO_ADDR
// hc_gallery =  ;
10089: LD_ADDR_OWVAR 33
10093: PUSH
10094: LD_STRING 
10096: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10097: LD_INT 0
10099: PPUSH
10100: LD_INT 5
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 380
// un = CreateHuman ;
10112: LD_ADDR_VAR 0 16
10116: PUSH
10117: CALL_OW 44
10121: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10122: LD_VAR 0 16
10126: PPUSH
10127: LD_VAR 0 9
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL_OW 49
// end ;
10139: GO 10058
10141: POP
10142: POP
// for i = 1 to bazookCount do
10143: LD_ADDR_VAR 0 14
10147: PUSH
10148: DOUBLE
10149: LD_INT 1
10151: DEC
10152: ST_TO_ADDR
10153: LD_VAR 0 5
10157: PUSH
10158: FOR_TO
10159: IFFALSE 10241
// begin uc_side = side ;
10161: LD_ADDR_OWVAR 20
10165: PUSH
10166: LD_VAR 0 1
10170: ST_TO_ADDR
// uc_nation = nation ;
10171: LD_ADDR_OWVAR 21
10175: PUSH
10176: LD_VAR 0 2
10180: ST_TO_ADDR
// hc_name =  ;
10181: LD_ADDR_OWVAR 26
10185: PUSH
10186: LD_STRING 
10188: ST_TO_ADDR
// hc_gallery =  ;
10189: LD_ADDR_OWVAR 33
10193: PUSH
10194: LD_STRING 
10196: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10197: LD_INT 0
10199: PPUSH
10200: LD_INT 9
10202: PPUSH
10203: LD_VAR 0 8
10207: PPUSH
10208: CALL_OW 380
// un = CreateHuman ;
10212: LD_ADDR_VAR 0 16
10216: PUSH
10217: CALL_OW 44
10221: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10222: LD_VAR 0 16
10226: PPUSH
10227: LD_VAR 0 9
10231: PPUSH
10232: LD_INT 0
10234: PPUSH
10235: CALL_OW 49
// end ;
10239: GO 10158
10241: POP
10242: POP
// for i = 1 to mortalCount do
10243: LD_ADDR_VAR 0 14
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 6
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10341
// begin uc_side = side ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_VAR 0 1
10270: ST_TO_ADDR
// uc_nation = nation ;
10271: LD_ADDR_OWVAR 21
10275: PUSH
10276: LD_VAR 0 2
10280: ST_TO_ADDR
// hc_name =  ;
10281: LD_ADDR_OWVAR 26
10285: PUSH
10286: LD_STRING 
10288: ST_TO_ADDR
// hc_gallery =  ;
10289: LD_ADDR_OWVAR 33
10293: PUSH
10294: LD_STRING 
10296: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10297: LD_INT 0
10299: PPUSH
10300: LD_INT 8
10302: PPUSH
10303: LD_VAR 0 8
10307: PPUSH
10308: CALL_OW 380
// un = CreateHuman ;
10312: LD_ADDR_VAR 0 16
10316: PUSH
10317: CALL_OW 44
10321: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10322: LD_VAR 0 16
10326: PPUSH
10327: LD_VAR 0 9
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10258
10341: POP
10342: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10343: LD_ADDR_VAR 0 19
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_VAR 0 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 8
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 69
10418: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10419: LD_ADDR_VAR 0 18
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_VAR 0 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 4
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: ST_TO_ADDR
// for i in medic_list do
10455: LD_ADDR_VAR 0 14
10459: PUSH
10460: LD_VAR 0 18
10464: PUSH
10465: FOR_IN
10466: IFFALSE 10484
// ComMoveToArea ( i , healArea ) ;
10468: LD_VAR 0 14
10472: PPUSH
10473: LD_VAR 0 10
10477: PPUSH
10478: CALL_OW 113
10482: GO 10465
10484: POP
10485: POP
// if strategy = 1 then
10486: LD_VAR 0 12
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 11199
// begin repeat wait ( 0 0$3 ) ;
10496: LD_INT 105
10498: PPUSH
10499: CALL_OW 67
// for i in soldiersOK_list do
10503: LD_ADDR_VAR 0 14
10507: PUSH
10508: LD_VAR 0 19
10512: PUSH
10513: FOR_IN
10514: IFFALSE 10548
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10516: LD_VAR 0 14
10520: PPUSH
10521: LD_INT 80
10523: PPUSH
10524: LD_INT 109
10526: PPUSH
10527: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10531: LD_VAR 0 14
10535: PPUSH
10536: LD_INT 39
10538: PPUSH
10539: LD_INT 49
10541: PPUSH
10542: CALL_OW 174
// end ;
10546: GO 10513
10548: POP
10549: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10550: LD_INT 15
10552: PPUSH
10553: LD_INT 22
10555: PUSH
10556: LD_VAR 0 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: CALL_OW 70
10569: PUSH
10570: LD_INT 0
10572: GREATER
10573: IFFALSE 10496
// repeat wait ( 0 0$1 ) ;
10575: LD_INT 35
10577: PPUSH
10578: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10582: LD_ADDR_VAR 0 17
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 1
10601: PUSH
10602: LD_INT 3
10604: PUSH
10605: LD_INT 24
10607: PUSH
10608: LD_INT 550
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 24
10621: PUSH
10622: LD_INT 250
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10643: LD_ADDR_VAR 0 19
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 25
10675: PUSH
10676: LD_INT 5
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 25
10685: PUSH
10686: LD_INT 8
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 25
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 1000
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: ST_TO_ADDR
// if medicCount > 0 then
10730: LD_VAR 0 7
10734: PUSH
10735: LD_INT 0
10737: GREATER
10738: IFFALSE 10812
// begin if damageUnit_list > 0 then
10740: LD_VAR 0 17
10744: PUSH
10745: LD_INT 0
10747: GREATER
10748: IFFALSE 10812
// begin for i in damageUnit_list do
10750: LD_ADDR_VAR 0 14
10754: PUSH
10755: LD_VAR 0 17
10759: PUSH
10760: FOR_IN
10761: IFFALSE 10810
// begin ComMoveToArea ( i , healArea ) ;
10763: LD_VAR 0 14
10767: PPUSH
10768: LD_VAR 0 10
10772: PPUSH
10773: CALL_OW 113
// for j in medic_list do
10777: LD_ADDR_VAR 0 15
10781: PUSH
10782: LD_VAR 0 18
10786: PUSH
10787: FOR_IN
10788: IFFALSE 10806
// AddComHeal ( j , i ) ;
10790: LD_VAR 0 15
10794: PPUSH
10795: LD_VAR 0 14
10799: PPUSH
10800: CALL_OW 188
10804: GO 10787
10806: POP
10807: POP
// end ;
10808: GO 10760
10810: POP
10811: POP
// end ; end ; for i in soldiersOK_list do
10812: LD_ADDR_VAR 0 14
10816: PUSH
10817: LD_VAR 0 19
10821: PUSH
10822: FOR_IN
10823: IFFALSE 10999
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10825: LD_ADDR_VAR 0 22
10829: PUSH
10830: LD_INT 22
10832: PUSH
10833: LD_VAR 0 11
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: PPUSH
10847: LD_VAR 0 14
10851: PPUSH
10852: CALL_OW 74
10856: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10857: LD_ADDR_VAR 0 23
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_VAR 0 11
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 59
10879: PUSH
10880: EMPTY
10881: LIST
10882: PUSH
10883: LD_INT 21
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: PPUSH
10916: CALL_OW 69
10920: PPUSH
10921: LD_VAR 0 14
10925: PPUSH
10926: CALL_OW 74
10930: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10931: LD_VAR 0 14
10935: PPUSH
10936: LD_VAR 0 22
10940: PPUSH
10941: CALL_OW 296
10945: PUSH
10946: LD_INT 8
10948: PLUS
10949: PUSH
10950: LD_VAR 0 14
10954: PPUSH
10955: LD_VAR 0 23
10959: PPUSH
10960: CALL_OW 296
10964: LESS
10965: IFFALSE 10983
// begin ComAttackUnit ( i , target1 ) ;
10967: LD_VAR 0 14
10971: PPUSH
10972: LD_VAR 0 22
10976: PPUSH
10977: CALL_OW 115
// end else
10981: GO 10997
// begin ComAttackUnit ( i , target2 ) ;
10983: LD_VAR 0 14
10987: PPUSH
10988: LD_VAR 0 23
10992: PPUSH
10993: CALL_OW 115
// end ; end ;
10997: GO 10822
10999: POP
11000: POP
// for i in soldiersOK_list do
11001: LD_ADDR_VAR 0 14
11005: PUSH
11006: LD_VAR 0 19
11010: PUSH
11011: FOR_IN
11012: IFFALSE 11188
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11014: LD_ADDR_VAR 0 22
11018: PUSH
11019: LD_INT 22
11021: PUSH
11022: LD_VAR 0 11
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PPUSH
11036: LD_VAR 0 14
11040: PPUSH
11041: CALL_OW 74
11045: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11046: LD_ADDR_VAR 0 23
11050: PUSH
11051: LD_INT 22
11053: PUSH
11054: LD_VAR 0 11
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 59
11068: PUSH
11069: EMPTY
11070: LIST
11071: PUSH
11072: LD_INT 21
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 21
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: PPUSH
11110: LD_VAR 0 14
11114: PPUSH
11115: CALL_OW 74
11119: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11120: LD_VAR 0 14
11124: PPUSH
11125: LD_VAR 0 22
11129: PPUSH
11130: CALL_OW 296
11134: PUSH
11135: LD_INT 8
11137: PLUS
11138: PUSH
11139: LD_VAR 0 14
11143: PPUSH
11144: LD_VAR 0 23
11148: PPUSH
11149: CALL_OW 296
11153: LESS
11154: IFFALSE 11172
// begin ComAttackUnit ( i , target1 ) ;
11156: LD_VAR 0 14
11160: PPUSH
11161: LD_VAR 0 22
11165: PPUSH
11166: CALL_OW 115
// end else
11170: GO 11186
// begin ComAttackUnit ( i , target2 ) ;
11172: LD_VAR 0 14
11176: PPUSH
11177: LD_VAR 0 23
11181: PPUSH
11182: CALL_OW 115
// end ; end ;
11186: GO 11011
11188: POP
11189: POP
// until soldiersOK_list = [ ] ;
11190: LD_VAR 0 19
11194: PUSH
11195: EMPTY
11196: EQUAL
11197: IFFALSE 10575
// end ; if strategy = 2 then
11199: LD_VAR 0 12
11203: PUSH
11204: LD_INT 2
11206: EQUAL
11207: IFFALSE 11912
// begin repeat wait ( 0 0$1 ) ;
11209: LD_INT 35
11211: PPUSH
11212: CALL_OW 67
// for i in soldiersOK_list do
11216: LD_ADDR_VAR 0 14
11220: PUSH
11221: LD_VAR 0 19
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11261
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11229: LD_VAR 0 14
11233: PPUSH
11234: LD_INT 117
11236: PPUSH
11237: LD_INT 97
11239: PPUSH
11240: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11244: LD_VAR 0 14
11248: PPUSH
11249: LD_INT 94
11251: PPUSH
11252: LD_INT 50
11254: PPUSH
11255: CALL_OW 174
// end ;
11259: GO 11226
11261: POP
11262: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11263: LD_INT 16
11265: PPUSH
11266: LD_INT 22
11268: PUSH
11269: LD_VAR 0 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: PUSH
11283: LD_INT 0
11285: GREATER
11286: IFFALSE 11209
// repeat wait ( 0 0$3 ) ;
11288: LD_INT 105
11290: PPUSH
11291: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11295: LD_ADDR_VAR 0 17
11299: PUSH
11300: LD_INT 22
11302: PUSH
11303: LD_VAR 0 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 1
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: LD_INT 550
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 24
11334: PUSH
11335: LD_INT 250
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11356: LD_ADDR_VAR 0 19
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 25
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 5
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 8
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 25
11408: PUSH
11409: LD_INT 9
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 24
11425: PUSH
11426: LD_INT 1000
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if medicCount > 0 then
11443: LD_VAR 0 7
11447: PUSH
11448: LD_INT 0
11450: GREATER
11451: IFFALSE 11525
// begin if damageUnit_list > 0 then
11453: LD_VAR 0 17
11457: PUSH
11458: LD_INT 0
11460: GREATER
11461: IFFALSE 11525
// begin for i in damageUnit_list do
11463: LD_ADDR_VAR 0 14
11467: PUSH
11468: LD_VAR 0 17
11472: PUSH
11473: FOR_IN
11474: IFFALSE 11523
// begin ComMoveToArea ( i , healArea ) ;
11476: LD_VAR 0 14
11480: PPUSH
11481: LD_VAR 0 10
11485: PPUSH
11486: CALL_OW 113
// for j in medic_list do
11490: LD_ADDR_VAR 0 15
11494: PUSH
11495: LD_VAR 0 18
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11519
// AddComHeal ( j , i ) ;
11503: LD_VAR 0 15
11507: PPUSH
11508: LD_VAR 0 14
11512: PPUSH
11513: CALL_OW 188
11517: GO 11500
11519: POP
11520: POP
// end ;
11521: GO 11473
11523: POP
11524: POP
// end ; end ; for i in soldiersOK_list do
11525: LD_ADDR_VAR 0 14
11529: PUSH
11530: LD_VAR 0 19
11534: PUSH
11535: FOR_IN
11536: IFFALSE 11712
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11538: LD_ADDR_VAR 0 22
11542: PUSH
11543: LD_INT 22
11545: PUSH
11546: LD_VAR 0 11
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PPUSH
11560: LD_VAR 0 14
11564: PPUSH
11565: CALL_OW 74
11569: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11570: LD_ADDR_VAR 0 23
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_VAR 0 11
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 59
11592: PUSH
11593: EMPTY
11594: LIST
11595: PUSH
11596: LD_INT 21
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 21
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: PPUSH
11629: CALL_OW 69
11633: PPUSH
11634: LD_VAR 0 14
11638: PPUSH
11639: CALL_OW 74
11643: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11644: LD_VAR 0 14
11648: PPUSH
11649: LD_VAR 0 22
11653: PPUSH
11654: CALL_OW 296
11658: PUSH
11659: LD_INT 8
11661: PLUS
11662: PUSH
11663: LD_VAR 0 14
11667: PPUSH
11668: LD_VAR 0 23
11672: PPUSH
11673: CALL_OW 296
11677: LESS
11678: IFFALSE 11696
// begin ComAttackUnit ( i , target1 ) ;
11680: LD_VAR 0 14
11684: PPUSH
11685: LD_VAR 0 22
11689: PPUSH
11690: CALL_OW 115
// end else
11694: GO 11710
// begin ComAttackUnit ( i , target2 ) ;
11696: LD_VAR 0 14
11700: PPUSH
11701: LD_VAR 0 23
11705: PPUSH
11706: CALL_OW 115
// end ; end ;
11710: GO 11535
11712: POP
11713: POP
// for i in soldiersOK_list do
11714: LD_ADDR_VAR 0 14
11718: PUSH
11719: LD_VAR 0 19
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11901
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11727: LD_ADDR_VAR 0 22
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_VAR 0 11
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PPUSH
11749: LD_VAR 0 14
11753: PPUSH
11754: CALL_OW 74
11758: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11759: LD_ADDR_VAR 0 23
11763: PUSH
11764: LD_INT 22
11766: PUSH
11767: LD_VAR 0 11
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 59
11781: PUSH
11782: EMPTY
11783: LIST
11784: PUSH
11785: LD_INT 21
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 21
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: PPUSH
11818: CALL_OW 69
11822: PPUSH
11823: LD_VAR 0 14
11827: PPUSH
11828: CALL_OW 74
11832: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11833: LD_VAR 0 14
11837: PPUSH
11838: LD_VAR 0 22
11842: PPUSH
11843: CALL_OW 296
11847: PUSH
11848: LD_INT 8
11850: PLUS
11851: PUSH
11852: LD_VAR 0 14
11856: PPUSH
11857: LD_VAR 0 23
11861: PPUSH
11862: CALL_OW 296
11866: LESS
11867: IFFALSE 11885
// begin ComAttackUnit ( i , target1 ) ;
11869: LD_VAR 0 14
11873: PPUSH
11874: LD_VAR 0 22
11878: PPUSH
11879: CALL_OW 115
// end else
11883: GO 11899
// begin ComAttackUnit ( i , target2 ) ;
11885: LD_VAR 0 14
11889: PPUSH
11890: LD_VAR 0 23
11894: PPUSH
11895: CALL_OW 115
// end ; end ;
11899: GO 11724
11901: POP
11902: POP
// until soldiersOK_list = [ ] ;
11903: LD_VAR 0 19
11907: PUSH
11908: EMPTY
11909: EQUAL
11910: IFFALSE 11288
// end ; end ; end_of_file
11912: LD_VAR 0 13
11916: RET
// every 0 0$01 do
11917: GO 11919
11919: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 25
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 69
11948: PUSH
11949: LD_INT 0
11951: EQUAL
11952: IFFALSE 11966
// SetClass ( JMM , 2 ) ;
11954: LD_EXP 1
11958: PPUSH
11959: LD_INT 2
11961: PPUSH
11962: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11966: LD_STRING M1
11968: PPUSH
11969: CALL_OW 337
// case difficulty of 1 :
11973: LD_OWVAR 67
11977: PUSH
11978: LD_INT 1
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 11996
11986: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11987: LD_STRING M1-1
11989: PPUSH
11990: CALL_OW 337
11994: GO 12033
11996: LD_INT 2
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12014
12004: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12005: LD_STRING M1-2
12007: PPUSH
12008: CALL_OW 337
12012: GO 12033
12014: LD_INT 3
12016: DOUBLE
12017: EQUAL
12018: IFTRUE 12022
12020: GO 12032
12022: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12023: LD_STRING M1-3
12025: PPUSH
12026: CALL_OW 337
12030: GO 12033
12032: POP
// ChangeMissionObjectives ( M1cont ) ;
12033: LD_STRING M1cont
12035: PPUSH
12036: CALL_OW 337
// SaveForQuickRestart ;
12040: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
12044: LD_INT 350
12046: PPUSH
12047: LD_INT 875
12049: PPUSH
12050: CALL_OW 12
12054: PPUSH
12055: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
12059: LD_INT 5
12061: PPUSH
12062: LD_INT 4
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 55
// end ;
12072: END
// every 0 0$15 trigger firstCrateSpawn do
12073: LD_EXP 41
12077: IFFALSE 12416
12079: GO 12081
12081: DISABLE
// begin if IsOk ( Lisa ) then
12082: LD_EXP 2
12086: PPUSH
12087: CALL_OW 302
12091: IFFALSE 12107
// Say ( Lisa , DR0-Lisa-1 ) else
12093: LD_EXP 2
12097: PPUSH
12098: LD_STRING DR0-Lisa-1
12100: PPUSH
12101: CALL_OW 88
12105: GO 12241
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12107: LD_INT 22
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 21
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 25
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: PUSH
12198: LD_EXP 1
12202: PUSH
12203: LD_EXP 8
12207: PUSH
12208: LD_EXP 5
12212: PUSH
12213: LD_EXP 6
12217: PUSH
12218: LD_EXP 7
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: PPUSH
12231: LD_STRING DR0-Sol1-1
12233: PPUSH
12234: LD_STRING DR0-Sol1-1
12236: PPUSH
12237: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12241: LD_INT 22
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 26
12263: PUSH
12264: LD_INT 1
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 1
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 25
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 25
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: PUSH
12332: LD_EXP 1
12336: PUSH
12337: LD_EXP 8
12341: PUSH
12342: LD_EXP 5
12346: PUSH
12347: LD_EXP 2
12351: PUSH
12352: LD_EXP 6
12356: PUSH
12357: LD_EXP 7
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: DIFF
12370: PPUSH
12371: LD_STRING DR0-Sol2-1
12373: PPUSH
12374: LD_STRING DR0-Sol2-1
12376: PPUSH
12377: CALL 5256 0 3
// if IsOk ( Cyrus ) then
12381: LD_EXP 4
12385: PPUSH
12386: CALL_OW 302
12390: IFFALSE 12404
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12392: LD_EXP 4
12396: PPUSH
12397: LD_STRING DR0-Cyrus-1
12399: PPUSH
12400: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12404: LD_EXP 1
12408: PPUSH
12409: LD_STRING DR0-JMM-1
12411: PPUSH
12412: CALL_OW 88
// end ;
12416: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
12417: LD_EXP 5
12421: PPUSH
12422: CALL_OW 302
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 25
12439: PUSH
12440: LD_INT 16
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: LD_INT 0
12458: GREATER
12459: AND
12460: PUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 463
12468: NOT
12469: AND
12470: IFFALSE 12748
12472: GO 12474
12474: DISABLE
// begin DialogueOn ;
12475: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12479: LD_EXP 5
12483: PPUSH
12484: LD_STRING D10-Frank-1
12486: PPUSH
12487: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12491: LD_INT 22
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 2
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 25
12526: PUSH
12527: LD_INT 2
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 3
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 25
12546: PUSH
12547: LD_INT 4
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PUSH
12571: LD_EXP 1
12575: PUSH
12576: LD_EXP 5
12580: PUSH
12581: LD_EXP 2
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: DIFF
12591: PPUSH
12592: LD_STRING D10-Sol1-1
12594: PPUSH
12595: LD_STRING D10-FSol1-1
12597: PPUSH
12598: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12602: LD_EXP 5
12606: PPUSH
12607: LD_STRING D10-Frank-2
12609: PPUSH
12610: CALL_OW 88
// if IsOK ( Lisa ) then
12614: LD_EXP 2
12618: PPUSH
12619: CALL_OW 302
12623: IFFALSE 12639
// begin Say ( Lisa , D10-Lisa-2 ) ;
12625: LD_EXP 2
12629: PPUSH
12630: LD_STRING D10-Lisa-2
12632: PPUSH
12633: CALL_OW 88
// end else
12637: GO 12744
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12639: LD_INT 22
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 21
12651: PUSH
12652: LD_INT 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 2
12661: PUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 25
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 3
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 25
12694: PUSH
12695: LD_INT 4
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: PUSH
12719: LD_EXP 1
12723: PUSH
12724: LD_EXP 5
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: DIFF
12733: PPUSH
12734: LD_STRING D10-Sol1-2
12736: PPUSH
12737: LD_STRING D10-FSol1-2
12739: PPUSH
12740: CALL 5256 0 3
// end ; DialogueOff ;
12744: CALL_OW 7
// end ;
12748: END
// every 10 10$30 trigger not InBattle ( 1 ) do
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 463
12756: NOT
12757: IFFALSE 13020
12759: GO 12761
12761: DISABLE
// begin HarrisonSupport ;
12762: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12766: LD_EXP 17
12770: PPUSH
12771: CALL_OW 310
12775: PPUSH
12776: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12780: LD_EXP 17
12784: PPUSH
12785: LD_STRING DEng-Eng1-1
12787: PPUSH
12788: CALL_OW 88
// wait ( 1 1$0 ) ;
12792: LD_INT 2100
12794: PPUSH
12795: CALL_OW 67
// DialogueOn ;
12799: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12803: LD_EXP 14
12807: PPUSH
12808: LD_STRING DRem-Har-1
12810: PPUSH
12811: CALL_OW 94
// if contactWithRussian = 1 then
12815: LD_EXP 22
12819: PUSH
12820: LD_INT 1
12822: EQUAL
12823: IFFALSE 12839
// begin Say ( JMM , DRem-JMM-1 ) ;
12825: LD_EXP 1
12829: PPUSH
12830: LD_STRING DRem-JMM-1
12832: PPUSH
12833: CALL_OW 88
// end else
12837: GO 12851
// begin Say ( JMM , DRem-JMM-1a ) ;
12839: LD_EXP 1
12843: PPUSH
12844: LD_STRING DRem-JMM-1a
12846: PPUSH
12847: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12851: LD_EXP 14
12855: PPUSH
12856: LD_STRING DRem-Har-2
12858: PPUSH
12859: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12863: LD_STRING DenisInDelta
12865: PPUSH
12866: LD_INT 0
12868: PPUSH
12869: CALL_OW 30
12873: PUSH
12874: LD_INT 1
12876: EQUAL
12877: IFFALSE 12893
// begin Say ( JMM , DRem-JMM-2 ) ;
12879: LD_EXP 1
12883: PPUSH
12884: LD_STRING DRem-JMM-2
12886: PPUSH
12887: CALL_OW 88
// end else
12891: GO 12905
// begin Say ( JMM , DRem-JMM-2a ) ;
12893: LD_EXP 1
12897: PPUSH
12898: LD_STRING DRem-JMM-2a
12900: PPUSH
12901: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12905: LD_EXP 14
12909: PPUSH
12910: LD_STRING DRem-Har-3
12912: PPUSH
12913: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12917: LD_EXP 1
12921: PPUSH
12922: LD_STRING DRem-JMM-3
12924: PPUSH
12925: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12929: LD_EXP 14
12933: PPUSH
12934: LD_STRING DRem-Har-4
12936: PPUSH
12937: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12941: LD_STRING DenisInDelta
12943: PPUSH
12944: LD_INT 0
12946: PPUSH
12947: CALL_OW 30
12951: PUSH
12952: LD_INT 1
12954: EQUAL
12955: IFFALSE 12983
// begin Say ( JMM , DRem-JMM-4 ) ;
12957: LD_EXP 1
12961: PPUSH
12962: LD_STRING DRem-JMM-4
12964: PPUSH
12965: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12969: LD_EXP 14
12973: PPUSH
12974: LD_STRING DRem-Har-5
12976: PPUSH
12977: CALL_OW 94
// end else
12981: GO 13016
// begin SetRestrict ( 36 , 1 , true ) ;
12983: LD_INT 36
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12996: LD_INT 15
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13009: LD_STRING MR
13011: PPUSH
13012: CALL_OW 337
// end ; DialogueOff ;
13016: CALL_OW 7
// end ;
13020: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do
13021: LD_STRING DenisInDelta
13023: PPUSH
13024: LD_INT 0
13026: PPUSH
13027: CALL_OW 30
13031: PUSH
13032: LD_INT 1
13034: EQUAL
13035: PUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 463
13043: NOT
13044: AND
13045: IFFALSE 13176
13047: GO 13049
13049: DISABLE
// begin PrepareDenis ;
13050: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
13054: LD_EXP 9
13058: PPUSH
13059: CALL_OW 87
// DialogueOn ;
13063: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DDen-Den-1
13074: PPUSH
13075: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13079: LD_EXP 1
13083: PPUSH
13084: LD_STRING DDen-JMM-1
13086: PPUSH
13087: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13091: LD_EXP 9
13095: PPUSH
13096: LD_STRING DDen-Den-2
13098: PPUSH
13099: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13103: LD_EXP 1
13107: PPUSH
13108: LD_STRING DDen-JMM-2
13110: PPUSH
13111: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13115: LD_EXP 9
13119: PPUSH
13120: LD_STRING DDen-Den-3
13122: PPUSH
13123: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13127: LD_EXP 1
13131: PPUSH
13132: LD_STRING DDen-JMM-3
13134: PPUSH
13135: CALL_OW 88
// DialogueOff ;
13139: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13143: LD_INT 36
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13156: LD_INT 15
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13169: LD_STRING MR
13171: PPUSH
13172: CALL_OW 337
// end ;
13176: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
13177: CALL 13232 0 0
13181: PUSH
13182: LD_EXP 9
13186: PPUSH
13187: CALL_OW 302
13191: AND
13192: PUSH
13193: LD_INT 1
13195: PPUSH
13196: CALL_OW 463
13200: NOT
13201: AND
13202: IFFALSE 13231
13204: GO 13206
13206: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DR1-Den-1
13214: PPUSH
13215: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13219: LD_EXP 1
13223: PPUSH
13224: LD_STRING DR1-JMM-1
13226: PPUSH
13227: CALL_OW 88
// end ;
13231: END
// function CheckOptoLab ; var i ; begin
13232: LD_INT 0
13234: PPUSH
13235: PPUSH
// result = false ;
13236: LD_ADDR_VAR 0 1
13240: PUSH
13241: LD_INT 0
13243: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 30
13264: PUSH
13265: LD_INT 7
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 30
13274: PUSH
13275: LD_INT 8
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PPUSH
13291: CALL_OW 69
13295: PUSH
13296: FOR_IN
13297: IFFALSE 13349
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 268
13311: PUSH
13312: LD_INT 15
13314: EQUAL
13315: PUSH
13316: LD_VAR 0 2
13320: PPUSH
13321: LD_INT 2
13323: PPUSH
13324: CALL_OW 268
13328: PUSH
13329: LD_INT 15
13331: EQUAL
13332: OR
13333: IFFALSE 13345
// begin result = true ;
13335: LD_ADDR_VAR 0 1
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// break ;
13343: GO 13349
// end ; break ;
13345: GO 13349
// end ;
13347: GO 13296
13349: POP
13350: POP
// end ;
13351: LD_VAR 0 1
13355: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
13356: LD_INT 15
13358: PPUSH
13359: LD_INT 1
13361: PPUSH
13362: CALL_OW 321
13366: PUSH
13367: LD_INT 2
13369: EQUAL
13370: PUSH
13371: LD_EXP 9
13375: PPUSH
13376: CALL_OW 302
13380: AND
13381: PUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 463
13389: NOT
13390: AND
13391: IFFALSE 13623
13393: GO 13395
13395: DISABLE
// begin DialogueOn ;
13396: CALL_OW 6
// if IsOK ( Denis ) then
13400: LD_EXP 9
13404: PPUSH
13405: CALL_OW 302
13409: IFFALSE 13425
// begin Say ( Denis , DR2-Den-1 ) ;
13411: LD_EXP 9
13415: PPUSH
13416: LD_STRING DR2-Den-1
13418: PPUSH
13419: CALL_OW 88
// end else
13423: GO 13484
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13425: LD_INT 22
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 21
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 25
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: PUSH
13465: LD_EXP 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: DIFF
13473: PPUSH
13474: LD_STRING DR2-Sci1-1
13476: PPUSH
13477: LD_STRING DR2-FSci1-1
13479: PPUSH
13480: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13484: LD_EXP 1
13488: PPUSH
13489: LD_STRING DR2-JMM-1
13491: PPUSH
13492: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13496: LD_INT 22
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 21
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 2
13518: PUSH
13519: LD_INT 25
13521: PUSH
13522: LD_INT 1
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 25
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 25
13541: PUSH
13542: LD_INT 3
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 25
13551: PUSH
13552: LD_INT 4
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: PUSH
13576: LD_EXP 1
13580: PUSH
13581: LD_EXP 9
13585: PUSH
13586: LD_EXP 8
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: DIFF
13596: PPUSH
13597: LD_STRING DR2-Sol1-1
13599: PPUSH
13600: LD_STRING DR2-Sol1-11
13602: PPUSH
13603: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13607: LD_EXP 1
13611: PPUSH
13612: LD_STRING DR2-JMM-2
13614: PPUSH
13615: CALL_OW 88
// DialogueOff ;
13619: CALL_OW 7
// end ;
13623: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
13624: LD_INT 22
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 30
13636: PUSH
13637: LD_INT 36
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PUSH
13653: LD_INT 0
13655: EQUAL
13656: PUSH
13657: LD_INT 22
13659: PUSH
13660: LD_INT 1
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 33
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 69
13696: PUSH
13697: LD_INT 0
13699: GREATER
13700: AND
13701: PUSH
13702: LD_EXP 23
13706: PUSH
13707: LD_INT 0
13709: EQUAL
13710: AND
13711: PUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 463
13719: NOT
13720: AND
13721: IFFALSE 13847
13723: GO 13725
13725: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13726: LD_INT 22
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 21
13738: PUSH
13739: LD_INT 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 25
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: PPUSH
13761: CALL_OW 69
13765: PUSH
13766: LD_EXP 1
13770: PUSH
13771: LD_EXP 6
13775: PUSH
13776: LD_EXP 7
13780: PUSH
13781: LD_EXP 9
13785: PUSH
13786: LD_EXP 15
13790: PUSH
13791: LD_EXP 3
13795: PUSH
13796: LD_EXP 4
13800: PUSH
13801: LD_EXP 2
13805: PUSH
13806: LD_EXP 5
13810: PUSH
13811: LD_EXP 8
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: DIFF
13828: PPUSH
13829: LD_STRING D3a-Mech1-1
13831: PPUSH
13832: LD_STRING D3a-Mech1-1
13834: PPUSH
13835: CALL 5256 0 3
// firstTower = 2 ;
13839: LD_ADDR_EXP 23
13843: PUSH
13844: LD_INT 2
13846: ST_TO_ADDR
// end ;
13847: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13848: LD_INT 22
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 21
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PPUSH
13872: CALL_OW 69
13876: PUSH
13877: LD_INT 0
13879: EQUAL
13880: IFFALSE 13995
13882: GO 13884
13884: DISABLE
13885: LD_INT 0
13887: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13888: LD_ADDR_VAR 0 1
13892: PUSH
13893: LD_INT 22
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 21
13905: PUSH
13906: LD_INT 1
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 25
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 25
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 25
13948: PUSH
13949: LD_INT 4
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 69
13972: PUSH
13973: FOR_IN
13974: IFFALSE 13993
// AddExperience ( i , 1 , 10000 ) ;
13976: LD_VAR 0 1
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: LD_INT 10000
13986: PPUSH
13987: CALL_OW 492
13991: GO 13973
13993: POP
13994: POP
// end ;
13995: PPOPN 1
13997: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13998: LD_INT 22
14000: PUSH
14001: LD_INT 1
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 36
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PUSH
14027: LD_INT 0
14029: GREATER
14030: PUSH
14031: LD_INT 22
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 33
14053: PUSH
14054: LD_INT 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 69
14070: PUSH
14071: LD_INT 0
14073: GREATER
14074: AND
14075: PUSH
14076: CALL 14668 0 0
14080: AND
14081: PUSH
14082: LD_INT 1
14084: PPUSH
14085: CALL_OW 463
14089: NOT
14090: AND
14091: IFFALSE 14665
14093: GO 14095
14095: DISABLE
14096: LD_INT 0
14098: PPUSH
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14103: LD_ADDR_VAR 0 3
14107: PUSH
14108: LD_INT 22
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 30
14120: PUSH
14121: LD_INT 36
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PPUSH
14132: CALL_OW 69
14136: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14137: LD_ADDR_VAR 0 4
14141: PUSH
14142: LD_INT 22
14144: PUSH
14145: LD_INT 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 21
14154: PUSH
14155: LD_INT 2
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 33
14164: PUSH
14165: LD_INT 2
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 69
14181: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14182: LD_ADDR_VAR 0 5
14186: PUSH
14187: EMPTY
14188: ST_TO_ADDR
// for i in tmpControlTowers do
14189: LD_ADDR_VAR 0 1
14193: PUSH
14194: LD_VAR 0 3
14198: PUSH
14199: FOR_IN
14200: IFFALSE 14663
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14202: LD_EXP 1
14206: PPUSH
14207: CALL_OW 310
14211: PUSH
14212: LD_VAR 0 1
14216: EQUAL
14217: PUSH
14218: LD_EXP 1
14222: PPUSH
14223: CALL_OW 257
14227: PUSH
14228: LD_INT 3
14230: EQUAL
14231: AND
14232: IFFALSE 14362
// begin InGameOn ;
14234: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14238: LD_VAR 0 4
14242: PUSH
14243: LD_INT 1
14245: ARRAY
14246: PPUSH
14247: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14251: LD_EXP 1
14255: PPUSH
14256: LD_STRING D4a-JMM-1
14258: PPUSH
14259: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14263: LD_VAR 0 4
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PPUSH
14272: LD_EXP 1
14276: PPUSH
14277: CALL_OW 53
// wait ( 0 0$1 ) ;
14281: LD_INT 35
14283: PPUSH
14284: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14288: LD_VAR 0 4
14292: PUSH
14293: LD_INT 1
14295: ARRAY
14296: PPUSH
14297: LD_VAR 0 4
14301: PUSH
14302: LD_INT 1
14304: ARRAY
14305: PPUSH
14306: CALL_OW 250
14310: PUSH
14311: LD_INT 3
14313: PLUS
14314: PPUSH
14315: LD_VAR 0 4
14319: PUSH
14320: LD_INT 1
14322: ARRAY
14323: PPUSH
14324: CALL_OW 251
14328: PUSH
14329: LD_INT 2
14331: MINUS
14332: PPUSH
14333: CALL_OW 111
// wait ( 0 0$2 ) ;
14337: LD_INT 70
14339: PPUSH
14340: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14344: LD_EXP 1
14348: PPUSH
14349: LD_STRING D4b-JMM-1
14351: PPUSH
14352: CALL_OW 88
// InGameOff ;
14356: CALL_OW 9
// end else
14360: GO 14661
// begin InGameOn ;
14362: CALL_OW 8
// for j in UnitsInside ( i ) do
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 313
14380: PUSH
14381: FOR_IN
14382: IFFALSE 14417
// if GetClass ( j ) = 3 then
14384: LD_VAR 0 2
14388: PPUSH
14389: CALL_OW 257
14393: PUSH
14394: LD_INT 3
14396: EQUAL
14397: IFFALSE 14415
// tmpMechanicInside = tmpMechanicInside ^ j ;
14399: LD_ADDR_VAR 0 5
14403: PUSH
14404: LD_VAR 0 5
14408: PUSH
14409: LD_VAR 0 2
14413: ADD
14414: ST_TO_ADDR
14415: GO 14381
14417: POP
14418: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14419: LD_VAR 0 5
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: CALL_OW 258
14432: PUSH
14433: LD_INT 1
14435: EQUAL
14436: IFFALSE 14454
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14438: LD_VAR 0 5
14442: PUSH
14443: LD_INT 1
14445: ARRAY
14446: PPUSH
14447: LD_STRING D4a-Mech1-1
14449: PPUSH
14450: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14454: LD_VAR 0 5
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: CALL_OW 258
14467: PUSH
14468: LD_INT 2
14470: EQUAL
14471: IFFALSE 14489
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14473: LD_VAR 0 5
14477: PUSH
14478: LD_INT 1
14480: ARRAY
14481: PPUSH
14482: LD_STRING D4a-FMech1-1
14484: PPUSH
14485: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14489: LD_VAR 0 4
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14502: LD_VAR 0 4
14506: PUSH
14507: LD_INT 1
14509: ARRAY
14510: PPUSH
14511: LD_VAR 0 5
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PPUSH
14520: CALL_OW 53
// wait ( 0 0$1 ) ;
14524: LD_INT 35
14526: PPUSH
14527: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14531: LD_VAR 0 4
14535: PUSH
14536: LD_INT 1
14538: ARRAY
14539: PPUSH
14540: LD_VAR 0 4
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: PPUSH
14549: CALL_OW 250
14553: PUSH
14554: LD_INT 3
14556: PLUS
14557: PPUSH
14558: LD_VAR 0 4
14562: PUSH
14563: LD_INT 1
14565: ARRAY
14566: PPUSH
14567: CALL_OW 251
14571: PUSH
14572: LD_INT 2
14574: MINUS
14575: PPUSH
14576: CALL_OW 111
// wait ( 0 0$2 ) ;
14580: LD_INT 70
14582: PPUSH
14583: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14587: LD_VAR 0 5
14591: PUSH
14592: LD_INT 1
14594: ARRAY
14595: PPUSH
14596: CALL_OW 258
14600: PUSH
14601: LD_INT 1
14603: EQUAL
14604: IFFALSE 14622
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14606: LD_VAR 0 5
14610: PUSH
14611: LD_INT 1
14613: ARRAY
14614: PPUSH
14615: LD_STRING D4b-Mech1-1
14617: PPUSH
14618: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14622: LD_VAR 0 5
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: PPUSH
14631: CALL_OW 258
14635: PUSH
14636: LD_INT 2
14638: EQUAL
14639: IFFALSE 14657
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14641: LD_VAR 0 5
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: LD_STRING D4b-FMech1-1
14652: PPUSH
14653: CALL_OW 88
// InGameOff ;
14657: CALL_OW 9
// end ; end ;
14661: GO 14199
14663: POP
14664: POP
// end ;
14665: PPOPN 5
14667: END
// function CheckMehInside ; var i , j ; begin
14668: LD_INT 0
14670: PPUSH
14671: PPUSH
14672: PPUSH
// result = false ;
14673: LD_ADDR_VAR 0 1
14677: PUSH
14678: LD_INT 0
14680: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14681: LD_ADDR_VAR 0 2
14685: PUSH
14686: LD_INT 22
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 30
14698: PUSH
14699: LD_INT 36
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 69
14714: PUSH
14715: FOR_IN
14716: IFFALSE 14767
// begin for j in UnitsInside ( i ) do
14718: LD_ADDR_VAR 0 3
14722: PUSH
14723: LD_VAR 0 2
14727: PPUSH
14728: CALL_OW 313
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14763
// begin if GetClass ( j ) = 3 then
14736: LD_VAR 0 3
14740: PPUSH
14741: CALL_OW 257
14745: PUSH
14746: LD_INT 3
14748: EQUAL
14749: IFFALSE 14761
// begin result = true ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// break ;
14759: GO 14763
// end ; end ;
14761: GO 14733
14763: POP
14764: POP
// end ;
14765: GO 14715
14767: POP
14768: POP
// end ;
14769: LD_VAR 0 1
14773: RET
// every 25 25$0 do
14774: GO 14776
14776: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14777: LD_INT 35
14779: PPUSH
14780: CALL_OW 67
// until not InBattle ( 1 ) ;
14784: LD_INT 1
14786: PPUSH
14787: CALL_OW 463
14791: NOT
14792: IFFALSE 14777
// PrepareKurt ;
14794: CALL 18263 0 0
// end ;
14798: END
// every 35 35$0 do
14799: GO 14801
14801: DISABLE
// begin repeat wait ( 0 0$1 ) ;
14802: LD_INT 35
14804: PPUSH
14805: CALL_OW 67
// until not InBattle ( 1 ) ;
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 463
14816: NOT
14817: IFFALSE 14802
// PrepareJoan ;
14819: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14823: LD_INT 2100
14825: PPUSH
14826: CALL_OW 67
// if IsOK ( Lisa ) then
14830: LD_EXP 2
14834: PPUSH
14835: CALL_OW 302
14839: IFFALSE 14969
// begin DialogueOn ;
14841: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14845: LD_EXP 2
14849: PPUSH
14850: LD_STRING D7-Lisa-1
14852: PPUSH
14853: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14857: LD_EXP 1
14861: PPUSH
14862: LD_STRING D7-JMM-1
14864: PPUSH
14865: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14869: LD_EXP 2
14873: PPUSH
14874: LD_STRING D7-Lisa-2
14876: PPUSH
14877: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14881: LD_EXP 1
14885: PPUSH
14886: LD_STRING D7-JMM-2
14888: PPUSH
14889: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14893: LD_EXP 2
14897: PPUSH
14898: LD_STRING D7-Lisa-3
14900: PPUSH
14901: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14905: LD_EXP 1
14909: PPUSH
14910: LD_STRING D7-JMM-3
14912: PPUSH
14913: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14917: LD_EXP 2
14921: PPUSH
14922: LD_STRING D7-Lisa-4
14924: PPUSH
14925: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14929: LD_EXP 1
14933: PPUSH
14934: LD_STRING D7-JMM-4
14936: PPUSH
14937: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14941: LD_EXP 1
14945: PPUSH
14946: LD_STRING D7-JMM-4a
14948: PPUSH
14949: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14953: LD_EXP 2
14957: PPUSH
14958: LD_STRING D7-Lisa-5
14960: PPUSH
14961: CALL_OW 88
// DialogueOff ;
14965: CALL_OW 7
// end ; end ;
14969: END
// every 0 0$1 do var i , others ;
14970: GO 14972
14972: DISABLE
14973: LD_INT 0
14975: PPUSH
14976: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14977: LD_ADDR_VAR 0 2
14981: PUSH
14982: LD_INT 22
14984: PUSH
14985: LD_INT 1
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 2
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 25
15017: PUSH
15018: LD_INT 2
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 25
15027: PUSH
15028: LD_INT 3
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 25
15037: PUSH
15038: LD_INT 4
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: PPUSH
15057: CALL_OW 69
15061: PUSH
15062: LD_EXP 13
15066: PUSH
15067: EMPTY
15068: LIST
15069: DIFF
15070: ST_TO_ADDR
// for i in others do
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: LD_VAR 0 2
15080: PUSH
15081: FOR_IN
15082: IFFALSE 15119
// begin if GetDistUnits ( tempCharles , i ) < 6 then
15084: LD_EXP 13
15088: PPUSH
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 296
15098: PUSH
15099: LD_INT 6
15101: LESS
15102: IFFALSE 15117
// begin disable ;
15104: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
15105: LD_EXP 13
15109: PPUSH
15110: LD_STRING D5-Sol1-1
15112: PPUSH
15113: CALL_OW 88
// end ; end ;
15117: GO 15081
15119: POP
15120: POP
// end ;
15121: PPOPN 2
15123: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15124: LD_INT 22
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 33
15136: PUSH
15137: LD_INT 2
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PPUSH
15148: CALL_OW 69
15152: PUSH
15153: LD_INT 2
15155: GREATEREQUAL
15156: IFFALSE 15176
15158: GO 15160
15160: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15161: LD_STRING MRa
15163: PPUSH
15164: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15168: LD_ADDR_EXP 28
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// end ;
15176: END
// every 4 4$0 do
15177: GO 15179
15179: DISABLE
// PrepareRandoms ( 1 ) ;
15180: LD_INT 1
15182: PPUSH
15183: CALL 3692 0 1
15187: END
// every 10 10$0 do
15188: GO 15190
15190: DISABLE
// PrepareRandoms ( 2 ) ;
15191: LD_INT 2
15193: PPUSH
15194: CALL 3692 0 1
15198: END
// every 28 28$0 do
15199: GO 15201
15201: DISABLE
// PrepareRandoms ( 4 ) ;
15202: LD_INT 4
15204: PPUSH
15205: CALL 3692 0 1
15209: END
// every 32 32$0 do
15210: GO 15212
15212: DISABLE
// PrepareRandoms ( 5 ) ;
15213: LD_INT 5
15215: PPUSH
15216: CALL 3692 0 1
15220: END
// every 35 35$30 do
15221: GO 15223
15223: DISABLE
// PrepareRandoms ( 6 ) ;
15224: LD_INT 6
15226: PPUSH
15227: CALL 3692 0 1
15231: END
// every 37 37$20 do
15232: GO 15234
15234: DISABLE
// PrepareRandoms ( 7 ) ;
15235: LD_INT 7
15237: PPUSH
15238: CALL 3692 0 1
15242: END
// every 5 5$20 do
15243: GO 15245
15245: DISABLE
// begin DialogueOn ;
15246: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15250: LD_EXP 10
15254: PPUSH
15255: LD_STRING D12a-Sci-1
15257: PPUSH
15258: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15262: LD_EXP 1
15266: PPUSH
15267: LD_STRING D12a-JMM-1
15269: PPUSH
15270: CALL_OW 88
// DialogueOff ;
15274: CALL_OW 7
// cratesStatus = 1 ;
15278: LD_ADDR_EXP 38
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// end ;
15286: END
// every 13 13$0 do
15287: GO 15289
15289: DISABLE
// begin DialogueOn ;
15290: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15294: LD_EXP 10
15298: PPUSH
15299: LD_STRING D12b-Sci-1
15301: PPUSH
15302: CALL_OW 94
// DialogueOff ;
15306: CALL_OW 7
// cratesStatus = 2 ;
15310: LD_ADDR_EXP 38
15314: PUSH
15315: LD_INT 2
15317: ST_TO_ADDR
// end ;
15318: END
// every 32 32$0 do
15319: GO 15321
15321: DISABLE
// begin DialogueOn ;
15322: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15326: LD_EXP 10
15330: PPUSH
15331: LD_STRING D12c-Sci-1
15333: PPUSH
15334: CALL_OW 94
// DialogueOff ;
15338: CALL_OW 7
// wait ( 3 3$0 ) ;
15342: LD_INT 6300
15344: PPUSH
15345: CALL_OW 67
// DialogueOn ;
15349: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15353: LD_EXP 10
15357: PPUSH
15358: LD_STRING D12d-Sci-1
15360: PPUSH
15361: CALL_OW 94
// DialogueOff ;
15365: CALL_OW 7
// cratesStatus = 1 ;
15369: LD_ADDR_EXP 38
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// end ;
15377: END
// every 42 42$0 do
15378: GO 15380
15380: DISABLE
// begin DialogueOn ;
15381: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15385: LD_EXP 10
15389: PPUSH
15390: LD_STRING D12e-Sci-1
15392: PPUSH
15393: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15397: LD_EXP 1
15401: PPUSH
15402: LD_STRING D12e-JMM-1
15404: PPUSH
15405: CALL_OW 88
// DialogueOff ;
15409: CALL_OW 7
// cratesStatus = 2 ;
15413: LD_ADDR_EXP 38
15417: PUSH
15418: LD_INT 2
15420: ST_TO_ADDR
// end ;
15421: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15422: LD_INT 22
15424: PUSH
15425: LD_INT 6
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 21
15434: PUSH
15435: LD_INT 2
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 34
15444: PUSH
15445: LD_INT 51
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: LIST
15456: PPUSH
15457: CALL_OW 69
15461: PUSH
15462: LD_INT 0
15464: GREATER
15465: IFFALSE 15548
15467: GO 15469
15469: DISABLE
15470: LD_INT 0
15472: PPUSH
// begin enable ;
15473: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15474: LD_ADDR_VAR 0 1
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_INT 6
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 2
15491: PUSH
15492: LD_INT 21
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 2
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: CALL_OW 69
15525: PUSH
15526: FOR_IN
15527: IFFALSE 15546
// ComAgressiveMove ( i , 138 , 168 ) ;
15529: LD_VAR 0 1
15533: PPUSH
15534: LD_INT 138
15536: PPUSH
15537: LD_INT 168
15539: PPUSH
15540: CALL_OW 114
15544: GO 15526
15546: POP
15547: POP
// end ;
15548: PPOPN 1
15550: END
// every 0 0$1 do var i ;
15551: GO 15553
15553: DISABLE
15554: LD_INT 0
15556: PPUSH
// begin enable ;
15557: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15558: LD_ADDR_VAR 0 1
15562: PUSH
15563: LD_INT 5
15565: PPUSH
15566: LD_INT 2
15568: PUSH
15569: LD_INT 22
15571: PUSH
15572: LD_INT 3
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 22
15581: PUSH
15582: LD_INT 6
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: PPUSH
15597: CALL_OW 70
15601: PUSH
15602: FOR_IN
15603: IFFALSE 15667
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
15605: LD_INT 5
15607: PPUSH
15608: LD_INT 22
15610: PUSH
15611: LD_INT 6
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 34
15620: PUSH
15621: LD_INT 51
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 70
15636: PUSH
15637: LD_INT 0
15639: GREATER
15640: IFFALSE 15656
// sendedConvoys = sendedConvoys + 1 ;
15642: LD_ADDR_EXP 39
15646: PUSH
15647: LD_EXP 39
15651: PUSH
15652: LD_INT 1
15654: PLUS
15655: ST_TO_ADDR
// RemoveUnit ( i ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 64
// end ;
15665: GO 15602
15667: POP
15668: POP
// end ; end_of_file
15669: PPOPN 1
15671: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15672: LD_VAR 0 1
15676: PUSH
15677: LD_INT 1
15679: EQUAL
15680: PUSH
15681: LD_VAR 0 2
15685: PUSH
15686: LD_INT 3
15688: EQUAL
15689: AND
15690: IFFALSE 15700
// contactWithRussian = 1 ;
15692: LD_ADDR_EXP 22
15696: PUSH
15697: LD_INT 1
15699: ST_TO_ADDR
// end ;
15700: PPOPN 2
15702: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 266
15712: PUSH
15713: LD_INT 36
15715: EQUAL
15716: PUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 255
15726: PUSH
15727: LD_INT 1
15729: EQUAL
15730: AND
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_INT 1
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 21
15744: PUSH
15745: LD_INT 2
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: LD_INT 33
15754: PUSH
15755: LD_INT 2
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PPUSH
15767: CALL_OW 69
15771: PUSH
15772: LD_INT 0
15774: EQUAL
15775: AND
15776: PUSH
15777: LD_EXP 23
15781: PUSH
15782: LD_INT 0
15784: EQUAL
15785: AND
15786: IFFALSE 15866
// begin firstTower = 1 ;
15788: LD_ADDR_EXP 23
15792: PUSH
15793: LD_INT 1
15795: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15796: LD_INT 22
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 21
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 3
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 26
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PUSH
15847: LD_EXP 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: DIFF
15855: PPUSH
15856: LD_STRING D3b-Mech1-1
15858: PPUSH
15859: LD_STRING D3b-Mech1-1
15861: PPUSH
15862: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 266
15875: PUSH
15876: LD_INT 0
15878: EQUAL
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 255
15889: PUSH
15890: LD_INT 1
15892: EQUAL
15893: AND
15894: IFFALSE 15908
// SetBName ( building , theta ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_STRING theta
15903: PPUSH
15904: CALL_OW 500
// if GetSide ( building ) = 3 then
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 255
15917: PUSH
15918: LD_INT 3
15920: EQUAL
15921: IFFALSE 15995
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15923: LD_ADDR_EXP 31
15927: PUSH
15928: LD_EXP 31
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 3
15940: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15941: LD_ADDR_EXP 31
15945: PUSH
15946: LD_EXP 31
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: CALL_OW 3
15958: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15959: LD_ADDR_EXP 31
15963: PUSH
15964: LD_EXP 31
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 3
15976: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15977: LD_ADDR_EXP 31
15981: PUSH
15982: LD_EXP 31
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 3
15994: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 255
16004: PUSH
16005: LD_INT 3
16007: EQUAL
16008: PUSH
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 266
16018: PUSH
16019: LD_INT 0
16021: EQUAL
16022: PUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 266
16032: PUSH
16033: LD_INT 2
16035: EQUAL
16036: OR
16037: PUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: CALL_OW 266
16047: PUSH
16048: LD_INT 4
16050: EQUAL
16051: OR
16052: PUSH
16053: EMPTY
16054: LIST
16055: AND
16056: IFFALSE 16067
// ComUpgrade ( building ) ;
16058: LD_VAR 0 1
16062: PPUSH
16063: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 255
16076: PUSH
16077: LD_INT 3
16079: EQUAL
16080: PUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 266
16090: PUSH
16091: LD_INT 32
16093: EQUAL
16094: AND
16095: IFFALSE 16136
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_INT 42
16104: PUSH
16105: LD_INT 43
16107: PUSH
16108: LD_INT 44
16110: PUSH
16111: LD_INT 46
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 1
16122: PPUSH
16123: LD_INT 4
16125: PPUSH
16126: CALL_OW 12
16130: ARRAY
16131: PPUSH
16132: CALL_OW 208
// end ; end ;
16136: PPOPN 1
16138: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
16139: LD_VAR 0 1
16143: PUSH
16144: LD_EXP 15
16148: EQUAL
16149: IFFALSE 16159
// JoanStatus = 0 ;
16151: LD_ADDR_EXP 16
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 255
16168: PUSH
16169: LD_INT 1
16171: EQUAL
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 247
16182: PUSH
16183: LD_INT 1
16185: EQUAL
16186: AND
16187: IFFALSE 16263
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 257
16198: PUSH
16199: LD_INT 1
16201: EQUAL
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 257
16212: PUSH
16213: LD_INT 2
16215: EQUAL
16216: OR
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 257
16227: PUSH
16228: LD_INT 3
16230: EQUAL
16231: OR
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 257
16242: PUSH
16243: LD_INT 4
16245: EQUAL
16246: OR
16247: IFFALSE 16263
// unitLost = unitLost + 1 ;
16249: LD_ADDR_EXP 30
16253: PUSH
16254: LD_EXP 30
16258: PUSH
16259: LD_INT 1
16261: PLUS
16262: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 255
16272: PUSH
16273: LD_INT 3
16275: EQUAL
16276: PUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 247
16286: PUSH
16287: LD_INT 3
16289: EQUAL
16290: AND
16291: IFFALSE 16983
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 266
16302: PUSH
16303: LD_INT 31
16305: EQUAL
16306: PUSH
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 266
16316: PUSH
16317: LD_INT 32
16319: EQUAL
16320: OR
16321: PUSH
16322: LD_VAR 0 1
16326: PPUSH
16327: CALL_OW 266
16331: PUSH
16332: LD_INT 36
16334: EQUAL
16335: OR
16336: PUSH
16337: LD_VAR 0 1
16341: PPUSH
16342: CALL_OW 266
16346: PUSH
16347: LD_INT 0
16349: EQUAL
16350: OR
16351: PUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 266
16361: PUSH
16362: LD_INT 24
16364: EQUAL
16365: OR
16366: PUSH
16367: LD_VAR 0 1
16371: PPUSH
16372: CALL_OW 266
16376: PUSH
16377: LD_INT 17
16379: EQUAL
16380: OR
16381: PUSH
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 266
16391: PUSH
16392: LD_INT 25
16394: EQUAL
16395: OR
16396: PUSH
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL_OW 266
16406: PUSH
16407: LD_INT 19
16409: EQUAL
16410: OR
16411: PUSH
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL_OW 266
16421: PUSH
16422: LD_INT 20
16424: EQUAL
16425: OR
16426: PUSH
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 266
16436: PUSH
16437: LD_INT 18
16439: EQUAL
16440: OR
16441: PUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 266
16451: PUSH
16452: LD_INT 21
16454: EQUAL
16455: OR
16456: PUSH
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 266
16466: PUSH
16467: LD_INT 23
16469: EQUAL
16470: OR
16471: PUSH
16472: LD_VAR 0 1
16476: PPUSH
16477: CALL_OW 266
16481: PUSH
16482: LD_INT 16
16484: EQUAL
16485: OR
16486: PUSH
16487: LD_VAR 0 1
16491: PPUSH
16492: CALL_OW 266
16496: PUSH
16497: LD_INT 6
16499: EQUAL
16500: OR
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: CALL_OW 266
16511: PUSH
16512: LD_INT 29
16514: EQUAL
16515: OR
16516: PUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 266
16526: PUSH
16527: LD_INT 26
16529: EQUAL
16530: OR
16531: PUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 266
16541: PUSH
16542: LD_INT 30
16544: EQUAL
16545: OR
16546: PUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 266
16556: PUSH
16557: LD_INT 28
16559: EQUAL
16560: OR
16561: PUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL_OW 266
16571: PUSH
16572: LD_INT 27
16574: EQUAL
16575: OR
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 266
16586: PUSH
16587: LD_INT 33
16589: EQUAL
16590: OR
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 266
16601: PUSH
16602: LD_INT 2
16604: EQUAL
16605: OR
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 266
16616: PUSH
16617: LD_INT 4
16619: EQUAL
16620: OR
16621: IFFALSE 16707
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
16623: LD_ADDR_EXP 31
16627: PUSH
16628: LD_EXP 31
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 266
16642: ADD
16643: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16644: LD_ADDR_EXP 31
16648: PUSH
16649: LD_EXP 31
16653: PUSH
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 250
16663: ADD
16664: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16665: LD_ADDR_EXP 31
16669: PUSH
16670: LD_EXP 31
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 251
16684: ADD
16685: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16686: LD_ADDR_EXP 31
16690: PUSH
16691: LD_EXP 31
16695: PUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 254
16705: ADD
16706: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16707: LD_VAR 0 1
16711: PPUSH
16712: CALL_OW 266
16716: PUSH
16717: LD_INT 1
16719: EQUAL
16720: IFFALSE 16799
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16722: LD_ADDR_EXP 31
16726: PUSH
16727: LD_EXP 31
16731: PUSH
16732: LD_INT 0
16734: ADD
16735: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16736: LD_ADDR_EXP 31
16740: PUSH
16741: LD_EXP 31
16745: PUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 250
16755: ADD
16756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16757: LD_ADDR_EXP 31
16761: PUSH
16762: LD_EXP 31
16766: PUSH
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 251
16776: ADD
16777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16778: LD_ADDR_EXP 31
16782: PUSH
16783: LD_EXP 31
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 254
16797: ADD
16798: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 266
16808: PUSH
16809: LD_INT 3
16811: EQUAL
16812: IFFALSE 16891
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16814: LD_ADDR_EXP 31
16818: PUSH
16819: LD_EXP 31
16823: PUSH
16824: LD_INT 2
16826: ADD
16827: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16828: LD_ADDR_EXP 31
16832: PUSH
16833: LD_EXP 31
16837: PUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL_OW 250
16847: ADD
16848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16849: LD_ADDR_EXP 31
16853: PUSH
16854: LD_EXP 31
16858: PUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 251
16868: ADD
16869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16870: LD_ADDR_EXP 31
16874: PUSH
16875: LD_EXP 31
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 254
16889: ADD
16890: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 266
16900: PUSH
16901: LD_INT 5
16903: EQUAL
16904: IFFALSE 16983
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16906: LD_ADDR_EXP 31
16910: PUSH
16911: LD_EXP 31
16915: PUSH
16916: LD_INT 4
16918: ADD
16919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16920: LD_ADDR_EXP 31
16924: PUSH
16925: LD_EXP 31
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 250
16939: ADD
16940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16941: LD_ADDR_EXP 31
16945: PUSH
16946: LD_EXP 31
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 251
16960: ADD
16961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16962: LD_ADDR_EXP 31
16966: PUSH
16967: LD_EXP 31
16971: PUSH
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL_OW 254
16981: ADD
16982: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 257
16992: PUSH
16993: LD_INT 3
16995: EQUAL
16996: PUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 255
17006: PUSH
17007: LD_INT 3
17009: EQUAL
17010: AND
17011: PUSH
17012: LD_INT 21
17014: PPUSH
17015: CALL_OW 302
17019: AND
17020: PUSH
17021: LD_INT 21
17023: PPUSH
17024: CALL_OW 255
17028: PUSH
17029: LD_INT 3
17031: EQUAL
17032: AND
17033: IFFALSE 17101
// begin uc_side = 3 ;
17035: LD_ADDR_OWVAR 20
17039: PUSH
17040: LD_INT 3
17042: ST_TO_ADDR
// uc_nation = 3 ;
17043: LD_ADDR_OWVAR 21
17047: PUSH
17048: LD_INT 3
17050: ST_TO_ADDR
// hc_gallery :=  ;
17051: LD_ADDR_OWVAR 33
17055: PUSH
17056: LD_STRING 
17058: ST_TO_ADDR
// hc_name :=  ;
17059: LD_ADDR_OWVAR 26
17063: PUSH
17064: LD_STRING 
17066: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17067: LD_INT 0
17069: PPUSH
17070: LD_EXP 34
17074: PPUSH
17075: LD_EXP 35
17079: PPUSH
17080: CALL_OW 12
17084: PPUSH
17085: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17089: CALL_OW 44
17093: PPUSH
17094: LD_INT 21
17096: PPUSH
17097: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17101: LD_VAR 0 1
17105: PPUSH
17106: CALL_OW 255
17110: PUSH
17111: LD_INT 3
17113: EQUAL
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 264
17124: PUSH
17125: LD_INT 52
17127: EQUAL
17128: AND
17129: PUSH
17130: LD_INT 21
17132: PPUSH
17133: CALL_OW 302
17137: AND
17138: PUSH
17139: LD_INT 21
17141: PPUSH
17142: CALL_OW 255
17146: PUSH
17147: LD_INT 3
17149: EQUAL
17150: AND
17151: IFFALSE 17172
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17153: LD_INT 21
17155: PPUSH
17156: LD_INT 22
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: LD_INT 52
17167: PPUSH
17168: CALL_OW 125
// end ;
17172: PPOPN 1
17174: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17175: LD_INT 0
17177: PPUSH
17178: PPUSH
17179: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL_OW 264
17189: PUSH
17190: LD_INT 51
17192: EQUAL
17193: PUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 255
17203: PUSH
17204: LD_INT 3
17206: EQUAL
17207: AND
17208: IFFALSE 17270
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17210: LD_ADDR_VAR 0 5
17214: PUSH
17215: LD_INT 2
17217: PPUSH
17218: CALL_OW 274
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: CALL_OW 275
17230: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17231: LD_INT 2
17233: PPUSH
17234: CALL_OW 274
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: LD_VAR 0 5
17246: PUSH
17247: LD_INT 100
17249: MINUS
17250: PPUSH
17251: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17255: LD_VAR 0 1
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: LD_INT 100
17265: PPUSH
17266: CALL_OW 291
// end ; if building = rufabsupp then
17270: LD_VAR 0 2
17274: PUSH
17275: LD_INT 17
17277: EQUAL
17278: IFFALSE 17292
// SetSide ( vehicle , 6 ) ;
17280: LD_VAR 0 1
17284: PPUSH
17285: LD_INT 6
17287: PPUSH
17288: CALL_OW 235
// end ;
17292: PPOPN 5
17294: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 255
17304: PUSH
17305: LD_INT 3
17307: EQUAL
17308: IFFALSE 17339
// begin tamedApemans = tamedApemans + 1 ;
17310: LD_ADDR_EXP 32
17314: PUSH
17315: LD_EXP 32
17319: PUSH
17320: LD_INT 1
17322: PLUS
17323: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17324: LD_VAR 0 1
17328: PPUSH
17329: LD_INT 106
17331: PPUSH
17332: LD_INT 85
17334: PPUSH
17335: CALL_OW 111
// end ; end ;
17339: PPOPN 2
17341: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17342: LD_INT 0
17344: PPUSH
17345: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17346: LD_VAR 0 1
17350: PPUSH
17351: CALL_OW 255
17355: PUSH
17356: LD_INT 3
17358: EQUAL
17359: PUSH
17360: LD_VAR 0 1
17364: PPUSH
17365: CALL_OW 247
17369: PUSH
17370: LD_INT 2
17372: EQUAL
17373: AND
17374: IFFALSE 17483
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 264
17385: PUSH
17386: LD_INT 42
17388: EQUAL
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: CALL_OW 264
17399: PUSH
17400: LD_INT 43
17402: EQUAL
17403: OR
17404: PUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: CALL_OW 264
17414: PUSH
17415: LD_INT 44
17417: EQUAL
17418: OR
17419: PUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 264
17429: PUSH
17430: LD_INT 46
17432: EQUAL
17433: OR
17434: IFFALSE 17483
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17436: LD_INT 21
17438: PPUSH
17439: LD_VAR 0 1
17443: PPUSH
17444: CALL_OW 265
17448: PPUSH
17449: LD_VAR 0 1
17453: PPUSH
17454: CALL_OW 262
17458: PPUSH
17459: LD_VAR 0 1
17463: PPUSH
17464: CALL_OW 263
17468: PPUSH
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 264
17478: PPUSH
17479: CALL_OW 185
// end ;
17483: PPOPN 3
17485: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 255
17495: PUSH
17496: LD_INT 3
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 2
17504: PPUSH
17505: CALL_OW 255
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: AND
17514: PUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 302
17524: AND
17525: IFFALSE 17567
// begin ComRepairVehicle ( human , vehicle ) ;
17527: LD_VAR 0 2
17531: PPUSH
17532: LD_VAR 0 1
17536: PPUSH
17537: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17541: LD_VAR 0 2
17545: PPUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: LD_INT 100
17562: PPUSH
17563: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL_OW 255
17576: PUSH
17577: LD_INT 3
17579: EQUAL
17580: PUSH
17581: LD_VAR 0 2
17585: PPUSH
17586: CALL_OW 255
17590: PUSH
17591: LD_INT 3
17593: EQUAL
17594: AND
17595: PUSH
17596: LD_INT 21
17598: PPUSH
17599: CALL_OW 302
17603: AND
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 302
17614: NOT
17615: AND
17616: IFFALSE 17630
// ComEnterUnit ( human , rufab ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 21
17625: PPUSH
17626: CALL_OW 120
// end ;
17630: PPOPN 2
17632: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
17633: LD_VAR 0 1
17637: PUSH
17638: LD_INT 21
17640: EQUAL
17641: PUSH
17642: LD_VAR 0 2
17646: PPUSH
17647: CALL_OW 255
17651: PUSH
17652: LD_INT 3
17654: EQUAL
17655: AND
17656: IFFALSE 17670
// SetLives ( human , 1000 ) ;
17658: LD_VAR 0 2
17662: PPUSH
17663: LD_INT 1000
17665: PPUSH
17666: CALL_OW 234
// end ;
17670: PPOPN 2
17672: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
17673: LD_EXP 41
17677: NOT
17678: IFFALSE 17688
// firstCrateSpawn := true ;
17680: LD_ADDR_EXP 41
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// end ; end_of_file
17688: PPOPN 5
17690: END
// every 0 0$30 trigger cratesStatus = 1 do
17691: LD_EXP 38
17695: PUSH
17696: LD_INT 1
17698: EQUAL
17699: IFFALSE 17763
17701: GO 17703
17703: DISABLE
// begin enable ;
17704: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
17705: LD_INT 350
17707: PUSH
17708: LD_INT 1050
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 2
17720: PPUSH
17721: CALL_OW 12
17725: ARRAY
17726: PPUSH
17727: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17731: LD_INT 4
17733: PUSH
17734: LD_INT 5
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 1
17743: PPUSH
17744: LD_INT 2
17746: PPUSH
17747: CALL_OW 12
17751: ARRAY
17752: PPUSH
17753: LD_INT 7
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 55
// end ;
17763: END
// every 1 1$0 trigger cratesStatus = 2 do
17764: LD_EXP 38
17768: PUSH
17769: LD_INT 2
17771: EQUAL
17772: IFFALSE 17836
17774: GO 17776
17776: DISABLE
// begin enable ;
17777: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17778: LD_INT 3150
17780: PUSH
17781: LD_INT 4550
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_INT 2
17793: PPUSH
17794: CALL_OW 12
17798: ARRAY
17799: PPUSH
17800: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17804: LD_INT 2
17806: PUSH
17807: LD_INT 5
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_INT 2
17819: PPUSH
17820: CALL_OW 12
17824: ARRAY
17825: PPUSH
17826: LD_INT 8
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 55
// end ;
17836: END
// every 0 0$30 + 0 0$10 do
17837: GO 17839
17839: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17840: LD_INT 4
17842: PUSH
17843: LD_INT 5
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: PPUSH
17853: LD_INT 2
17855: PPUSH
17856: CALL_OW 12
17860: ARRAY
17861: PPUSH
17862: LD_INT 8
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: CALL_OW 55
// Wait ( 0 0$15 ) ;
17872: LD_INT 525
17874: PPUSH
17875: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17879: LD_INT 4
17881: PUSH
17882: LD_INT 5
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 1
17891: PPUSH
17892: LD_INT 2
17894: PPUSH
17895: CALL_OW 12
17899: ARRAY
17900: PPUSH
17901: LD_INT 8
17903: PPUSH
17904: LD_INT 1
17906: PPUSH
17907: CALL_OW 55
// Wait ( 0 0$20 ) ;
17911: LD_INT 700
17913: PPUSH
17914: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17918: LD_INT 4
17920: PUSH
17921: LD_INT 5
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 1
17930: PPUSH
17931: LD_INT 2
17933: PPUSH
17934: CALL_OW 12
17938: ARRAY
17939: PPUSH
17940: LD_INT 8
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: CALL_OW 55
// end ; end_of_file
17950: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17951: LD_EXP 24
17955: PUSH
17956: LD_INT 1
17958: EQUAL
17959: IFFALSE 18260
17961: GO 17963
17963: DISABLE
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
17968: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_INT 22
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 3
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 2
17996: PUSH
17997: LD_INT 30
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 30
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 69
18031: ST_TO_ADDR
// for i in tmp do
18032: LD_ADDR_VAR 0 1
18036: PUSH
18037: LD_VAR 0 2
18041: PUSH
18042: FOR_IN
18043: IFFALSE 18076
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_VAR 0 3
18054: PUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 274
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: CALL_OW 275
18072: PLUS
18073: ST_TO_ADDR
18074: GO 18042
18076: POP
18077: POP
// strings = [ ] ;
18078: LD_ADDR_EXP 27
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// if tmp = 0 then
18085: LD_VAR 0 2
18089: PUSH
18090: LD_INT 0
18092: EQUAL
18093: IFFALSE 18118
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18095: LD_ADDR_EXP 27
18099: PUSH
18100: LD_EXP 27
18104: PUSH
18105: LD_STRING #Am06-1
18107: PUSH
18108: LD_EXP 25
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: ADD
18117: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18118: LD_VAR 0 2
18122: PUSH
18123: LD_INT 0
18125: GREATER
18126: PUSH
18127: LD_EXP 25
18131: PUSH
18132: LD_VAR 0 3
18136: GREATER
18137: AND
18138: IFFALSE 18169
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18140: LD_ADDR_EXP 27
18144: PUSH
18145: LD_EXP 27
18149: PUSH
18150: LD_STRING #Am06-1
18152: PUSH
18153: LD_EXP 25
18157: PUSH
18158: LD_VAR 0 3
18162: MINUS
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: ADD
18168: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18169: LD_VAR 0 2
18173: PUSH
18174: LD_INT 0
18176: GREATER
18177: PUSH
18178: LD_EXP 25
18182: PUSH
18183: LD_VAR 0 3
18187: LESSEQUAL
18188: AND
18189: IFFALSE 18212
// strings = strings ^ [ #Am06-1 , 0 ] ;
18191: LD_ADDR_EXP 27
18195: PUSH
18196: LD_EXP 27
18200: PUSH
18201: LD_STRING #Am06-1
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: ADD
18211: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18212: LD_ADDR_EXP 26
18216: PUSH
18217: LD_EXP 26
18221: PUSH
18222: LD_INT 35
18224: MINUS
18225: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18226: LD_ADDR_EXP 27
18230: PUSH
18231: LD_EXP 27
18235: PUSH
18236: LD_STRING #Am06-2
18238: PUSH
18239: LD_EXP 26
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: ADD
18248: ST_TO_ADDR
// display_strings = strings ;
18249: LD_ADDR_OWVAR 47
18253: PUSH
18254: LD_EXP 27
18258: ST_TO_ADDR
// enable ;
18259: ENABLE
// end ; end_of_file
18260: PPOPN 3
18262: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
18263: LD_INT 0
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
18271: PPUSH
// j = 0 ;
18272: LD_ADDR_VAR 0 3
18276: PUSH
18277: LD_INT 0
18279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18280: LD_INT 35
18282: PPUSH
18283: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_INT 22
18294: PUSH
18295: LD_INT 1
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 21
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 25
18317: PUSH
18318: LD_INT 1
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 25
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 25
18337: PUSH
18338: LD_INT 3
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 25
18347: PUSH
18348: LD_INT 4
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: PPUSH
18367: CALL_OW 69
18371: PUSH
18372: FOR_IN
18373: IFFALSE 18479
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18375: LD_INT 22
18377: PUSH
18378: LD_INT 3
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 2
18387: PUSH
18388: LD_INT 21
18390: PUSH
18391: LD_INT 1
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 21
18400: PUSH
18401: LD_INT 2
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 21
18410: PUSH
18411: LD_INT 3
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 59
18420: PUSH
18421: EMPTY
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 91
18433: PUSH
18434: LD_VAR 0 2
18438: PUSH
18439: LD_INT 25
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: LIST
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: LIST
18451: PPUSH
18452: CALL_OW 69
18456: NOT
18457: IFFALSE 18477
// begin tmp = i ;
18459: LD_ADDR_VAR 0 4
18463: PUSH
18464: LD_VAR 0 2
18468: ST_TO_ADDR
// j = 1 ;
18469: LD_ADDR_VAR 0 3
18473: PUSH
18474: LD_INT 1
18476: ST_TO_ADDR
// end ; end ;
18477: GO 18372
18479: POP
18480: POP
// until j = 1 ;
18481: LD_VAR 0 3
18485: PUSH
18486: LD_INT 1
18488: EQUAL
18489: IFFALSE 18280
// blockSpawn = 1 ;
18491: LD_ADDR_EXP 29
18495: PUSH
18496: LD_INT 1
18498: ST_TO_ADDR
// uc_side = 2 ;
18499: LD_ADDR_OWVAR 20
18503: PUSH
18504: LD_INT 2
18506: ST_TO_ADDR
// uc_nation = 2 ;
18507: LD_ADDR_OWVAR 21
18511: PUSH
18512: LD_INT 2
18514: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18515: LD_ADDR_EXP 19
18519: PUSH
18520: LD_STRING Kurt
18522: PPUSH
18523: LD_INT 0
18525: PPUSH
18526: CALL 5193 0 2
18530: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18531: LD_EXP 19
18535: PPUSH
18536: LD_VAR 0 4
18540: PPUSH
18541: CALL_OW 250
18545: PPUSH
18546: LD_VAR 0 4
18550: PPUSH
18551: CALL_OW 251
18555: PPUSH
18556: LD_INT 5
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 50
// InGameOn ;
18566: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18570: LD_EXP 19
18574: PPUSH
18575: CALL_OW 87
// wait ( 0 0$2 ) ;
18579: LD_INT 70
18581: PPUSH
18582: CALL_OW 67
// ComExitVehicle ( tmp ) ;
18586: LD_VAR 0 4
18590: PPUSH
18591: CALL_OW 121
// ComExitBuilding ( tmp ) ;
18595: LD_VAR 0 4
18599: PPUSH
18600: CALL_OW 122
// wait ( 0 0$1 ) ;
18604: LD_INT 35
18606: PPUSH
18607: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
18611: LD_EXP 19
18615: PPUSH
18616: LD_VAR 0 4
18620: PPUSH
18621: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
18625: LD_VAR 0 4
18629: PPUSH
18630: LD_EXP 19
18634: PPUSH
18635: CALL_OW 119
// DialogueOn ;
18639: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
18643: LD_EXP 19
18647: PPUSH
18648: LD_STRING D2-Kurt-1
18650: PPUSH
18651: CALL_OW 88
// if tmp = JMM then
18655: LD_VAR 0 4
18659: PUSH
18660: LD_EXP 1
18664: EQUAL
18665: IFFALSE 18757
// begin Say ( JMM , D2-JMM-1 ) ;
18667: LD_EXP 1
18671: PPUSH
18672: LD_STRING D2-JMM-1
18674: PPUSH
18675: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18679: LD_EXP 19
18683: PPUSH
18684: LD_STRING D2-Kurt-2
18686: PPUSH
18687: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
18691: LD_EXP 1
18695: PPUSH
18696: LD_STRING D2-JMM-2
18698: PPUSH
18699: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18703: LD_EXP 19
18707: PPUSH
18708: LD_STRING D2-Kurt-3
18710: PPUSH
18711: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
18715: LD_EXP 1
18719: PPUSH
18720: LD_STRING D2-JMM-3
18722: PPUSH
18723: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18727: LD_EXP 19
18731: PPUSH
18732: LD_STRING D2-Kurt-4
18734: PPUSH
18735: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18739: LD_EXP 1
18743: PPUSH
18744: LD_STRING D2-JMM-4
18746: PPUSH
18747: CALL_OW 88
// DialogueOff ;
18751: CALL_OW 7
// end else
18755: GO 19067
// begin if GetSex ( tmp ) = 1 then
18757: LD_VAR 0 4
18761: PPUSH
18762: CALL_OW 258
18766: PUSH
18767: LD_INT 1
18769: EQUAL
18770: IFFALSE 18784
// Say ( tmp , D2-Sol1-1 ) ;
18772: LD_VAR 0 4
18776: PPUSH
18777: LD_STRING D2-Sol1-1
18779: PPUSH
18780: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18784: LD_VAR 0 4
18788: PPUSH
18789: CALL_OW 258
18793: PUSH
18794: LD_INT 2
18796: EQUAL
18797: IFFALSE 18811
// Say ( tmp , D2-FSol1-1 ) ;
18799: LD_VAR 0 4
18803: PPUSH
18804: LD_STRING D2-FSol1-1
18806: PPUSH
18807: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18811: LD_EXP 19
18815: PPUSH
18816: LD_STRING D2-Kurt-2
18818: PPUSH
18819: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18823: LD_VAR 0 4
18827: PPUSH
18828: CALL_OW 258
18832: PUSH
18833: LD_INT 1
18835: EQUAL
18836: IFFALSE 18850
// Say ( tmp , D2-Sol1-2 ) ;
18838: LD_VAR 0 4
18842: PPUSH
18843: LD_STRING D2-Sol1-2
18845: PPUSH
18846: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18850: LD_VAR 0 4
18854: PPUSH
18855: CALL_OW 258
18859: PUSH
18860: LD_INT 2
18862: EQUAL
18863: IFFALSE 18877
// Say ( tmp , D2-FSol1-2 ) ;
18865: LD_VAR 0 4
18869: PPUSH
18870: LD_STRING D2-FSol1-2
18872: PPUSH
18873: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18877: LD_EXP 19
18881: PPUSH
18882: LD_STRING D2-Kurt-3
18884: PPUSH
18885: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18889: LD_VAR 0 4
18893: PPUSH
18894: CALL_OW 258
18898: PUSH
18899: LD_INT 1
18901: EQUAL
18902: IFFALSE 18916
// Say ( tmp , D2-Sol1-3 ) ;
18904: LD_VAR 0 4
18908: PPUSH
18909: LD_STRING D2-Sol1-3
18911: PPUSH
18912: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18916: LD_VAR 0 4
18920: PPUSH
18921: CALL_OW 258
18925: PUSH
18926: LD_INT 2
18928: EQUAL
18929: IFFALSE 18943
// Say ( tmp , D2-FSol1-3 ) ;
18931: LD_VAR 0 4
18935: PPUSH
18936: LD_STRING D2-FSol1-3
18938: PPUSH
18939: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18943: LD_EXP 19
18947: PPUSH
18948: LD_STRING D2-Kurt-4
18950: PPUSH
18951: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18955: LD_VAR 0 4
18959: PPUSH
18960: CALL_OW 258
18964: PUSH
18965: LD_INT 1
18967: EQUAL
18968: IFFALSE 18982
// Say ( tmp , D2-Sol1-4 ) ;
18970: LD_VAR 0 4
18974: PPUSH
18975: LD_STRING D2-Sol1-4
18977: PPUSH
18978: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18982: LD_VAR 0 4
18986: PPUSH
18987: CALL_OW 258
18991: PUSH
18992: LD_INT 2
18994: EQUAL
18995: IFFALSE 19009
// Say ( tmp , D2-FSol1-4 ) ;
18997: LD_VAR 0 4
19001: PPUSH
19002: LD_STRING D2-FSol1-4
19004: PPUSH
19005: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19009: LD_VAR 0 4
19013: PPUSH
19014: CALL_OW 258
19018: PUSH
19019: LD_INT 1
19021: EQUAL
19022: IFFALSE 19036
// Say ( tmp , D2-Sol1-5 ) ;
19024: LD_VAR 0 4
19028: PPUSH
19029: LD_STRING D2-Sol1-5
19031: PPUSH
19032: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19036: LD_VAR 0 4
19040: PPUSH
19041: CALL_OW 258
19045: PUSH
19046: LD_INT 2
19048: EQUAL
19049: IFFALSE 19063
// Say ( tmp , D2-FSol1-5 ) ;
19051: LD_VAR 0 4
19055: PPUSH
19056: LD_STRING D2-FSol1-5
19058: PPUSH
19059: CALL_OW 88
// DialogueOff ;
19063: CALL_OW 7
// end ; dec = ShowQuery1 ;
19067: LD_ADDR_VAR 0 6
19071: PUSH
19072: CALL 5795 0 0
19076: ST_TO_ADDR
// if dec = 1 then
19077: LD_VAR 0 6
19081: PUSH
19082: LD_INT 1
19084: EQUAL
19085: IFFALSE 19127
// begin DialogueOn ;
19087: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19091: LD_EXP 19
19095: PPUSH
19096: LD_STRING D2a-Kurt-1
19098: PPUSH
19099: CALL_OW 88
// DialogueOff ;
19103: CALL_OW 7
// InGameOff ;
19107: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19111: LD_INT 1
19113: PPUSH
19114: LD_INT 2
19116: PPUSH
19117: LD_INT 2
19119: PPUSH
19120: LD_INT 1
19122: PPUSH
19123: CALL_OW 80
// end ; if dec = 2 then
19127: LD_VAR 0 6
19131: PUSH
19132: LD_INT 2
19134: EQUAL
19135: IFFALSE 19635
// begin DialogueOn ;
19137: CALL_OW 6
// if tmp = JMM then
19141: LD_VAR 0 4
19145: PUSH
19146: LD_EXP 1
19150: EQUAL
19151: IFFALSE 19207
// begin Say ( JMM , D2b-JMM-1 ) ;
19153: LD_EXP 1
19157: PPUSH
19158: LD_STRING D2b-JMM-1
19160: PPUSH
19161: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19165: LD_EXP 19
19169: PPUSH
19170: LD_STRING D2b-Kurt-1
19172: PPUSH
19173: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
19177: LD_EXP 1
19181: PPUSH
19182: LD_STRING D2b-JMM-2
19184: PPUSH
19185: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19189: LD_EXP 19
19193: PPUSH
19194: LD_STRING D2b-Kurt-2
19196: PPUSH
19197: CALL_OW 88
// DialogueOff ;
19201: CALL_OW 7
// end else
19205: GO 19397
// begin if GetSex ( tmp ) = 1 then
19207: LD_VAR 0 4
19211: PPUSH
19212: CALL_OW 258
19216: PUSH
19217: LD_INT 1
19219: EQUAL
19220: IFFALSE 19234
// Say ( tmp , D2b-Sol1-1 ) ;
19222: LD_VAR 0 4
19226: PPUSH
19227: LD_STRING D2b-Sol1-1
19229: PPUSH
19230: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19234: LD_VAR 0 4
19238: PPUSH
19239: CALL_OW 258
19243: PUSH
19244: LD_INT 2
19246: EQUAL
19247: IFFALSE 19261
// Say ( tmp , D2b-FSol1-1 ) ;
19249: LD_VAR 0 4
19253: PPUSH
19254: LD_STRING D2b-FSol1-1
19256: PPUSH
19257: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19261: LD_EXP 19
19265: PPUSH
19266: LD_STRING D2b-Kurt-1
19268: PPUSH
19269: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19273: LD_VAR 0 4
19277: PPUSH
19278: CALL_OW 258
19282: PUSH
19283: LD_INT 1
19285: EQUAL
19286: IFFALSE 19300
// Say ( tmp , D2b-Sol1-2 ) ;
19288: LD_VAR 0 4
19292: PPUSH
19293: LD_STRING D2b-Sol1-2
19295: PPUSH
19296: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19300: LD_VAR 0 4
19304: PPUSH
19305: CALL_OW 258
19309: PUSH
19310: LD_INT 2
19312: EQUAL
19313: IFFALSE 19327
// Say ( tmp , D2b-FSol1-2 ) ;
19315: LD_VAR 0 4
19319: PPUSH
19320: LD_STRING D2b-FSol1-2
19322: PPUSH
19323: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19327: LD_EXP 19
19331: PPUSH
19332: LD_STRING D2b-Kurt-2
19334: PPUSH
19335: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19339: LD_VAR 0 4
19343: PPUSH
19344: CALL_OW 258
19348: PUSH
19349: LD_INT 1
19351: EQUAL
19352: IFFALSE 19366
// Say ( tmp , D2c-Sol1-2 ) ;
19354: LD_VAR 0 4
19358: PPUSH
19359: LD_STRING D2c-Sol1-2
19361: PPUSH
19362: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19366: LD_VAR 0 4
19370: PPUSH
19371: CALL_OW 258
19375: PUSH
19376: LD_INT 2
19378: EQUAL
19379: IFFALSE 19393
// Say ( tmp , D2c-FSol1-2 ) ;
19381: LD_VAR 0 4
19385: PPUSH
19386: LD_STRING D2c-FSol1-2
19388: PPUSH
19389: CALL_OW 88
// DialogueOff ;
19393: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19397: LD_ADDR_VAR 0 7
19401: PUSH
19402: CALL 5869 0 0
19406: ST_TO_ADDR
// if dec2 = 1 then
19407: LD_VAR 0 7
19411: PUSH
19412: LD_INT 1
19414: EQUAL
19415: IFFALSE 19457
// begin DialogueOn ;
19417: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19421: LD_EXP 19
19425: PPUSH
19426: LD_STRING D2a-Kurt-1
19428: PPUSH
19429: CALL_OW 88
// DialogueOff ;
19433: CALL_OW 7
// InGameOff ;
19437: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19441: LD_INT 1
19443: PPUSH
19444: LD_INT 2
19446: PPUSH
19447: LD_INT 2
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 80
// end ; if dec2 = 2 then
19457: LD_VAR 0 7
19461: PUSH
19462: LD_INT 2
19464: EQUAL
19465: IFFALSE 19635
// begin if tmp = JMM then
19467: LD_VAR 0 4
19471: PUSH
19472: LD_EXP 1
19476: EQUAL
19477: IFFALSE 19537
// begin DialogueOn ;
19479: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19483: LD_EXP 1
19487: PPUSH
19488: LD_STRING D2c-JMM-1
19490: PPUSH
19491: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19495: LD_EXP 19
19499: PPUSH
19500: LD_STRING D2c-Kurt-1
19502: PPUSH
19503: CALL_OW 88
// DialogueOff ;
19507: CALL_OW 7
// InGameOff ;
19511: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19515: LD_EXP 19
19519: PPUSH
19520: LD_INT 9
19522: PPUSH
19523: CALL_OW 113
// readyToEscape = 1 ;
19527: LD_ADDR_EXP 21
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// end else
19535: GO 19635
// begin DialogueOn ;
19537: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19541: LD_VAR 0 4
19545: PPUSH
19546: CALL_OW 258
19550: PUSH
19551: LD_INT 1
19553: EQUAL
19554: IFFALSE 19568
// Say ( tmp , D2c-Sol1-1 ) ;
19556: LD_VAR 0 4
19560: PPUSH
19561: LD_STRING D2c-Sol1-1
19563: PPUSH
19564: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19568: LD_VAR 0 4
19572: PPUSH
19573: CALL_OW 258
19577: PUSH
19578: LD_INT 2
19580: EQUAL
19581: IFFALSE 19595
// Say ( tmp , D2c-FSol1-1 ) ;
19583: LD_VAR 0 4
19587: PPUSH
19588: LD_STRING D2c-FSol1-1
19590: PPUSH
19591: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19595: LD_EXP 19
19599: PPUSH
19600: LD_STRING D2c-Kurt-1
19602: PPUSH
19603: CALL_OW 88
// DialogueOff ;
19607: CALL_OW 7
// InGameOff ;
19611: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19615: LD_EXP 19
19619: PPUSH
19620: LD_INT 9
19622: PPUSH
19623: CALL_OW 113
// readyToEscape = 1 ;
19627: LD_ADDR_EXP 21
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
19635: LD_VAR 0 6
19639: PUSH
19640: LD_INT 3
19642: EQUAL
19643: IFFALSE 19817
// begin DialogueOn ;
19645: CALL_OW 6
// if tmp = JMM then
19649: LD_VAR 0 4
19653: PUSH
19654: LD_EXP 1
19658: EQUAL
19659: IFFALSE 19719
// begin DialogueOn ;
19661: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19665: LD_EXP 1
19669: PPUSH
19670: LD_STRING D2c-JMM-1
19672: PPUSH
19673: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19677: LD_EXP 19
19681: PPUSH
19682: LD_STRING D2c-Kurt-1
19684: PPUSH
19685: CALL_OW 88
// DialogueOff ;
19689: CALL_OW 7
// InGameOff ;
19693: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19697: LD_EXP 19
19701: PPUSH
19702: LD_INT 9
19704: PPUSH
19705: CALL_OW 113
// readyToEscape = 1 ;
19709: LD_ADDR_EXP 21
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// end else
19717: GO 19817
// begin DialogueOn ;
19719: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19723: LD_VAR 0 4
19727: PPUSH
19728: CALL_OW 258
19732: PUSH
19733: LD_INT 1
19735: EQUAL
19736: IFFALSE 19750
// Say ( tmp , D2c-Sol1-1 ) ;
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_STRING D2c-Sol1-1
19745: PPUSH
19746: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 258
19759: PUSH
19760: LD_INT 2
19762: EQUAL
19763: IFFALSE 19777
// Say ( tmp , D2c-FSol1-1 ) ;
19765: LD_VAR 0 4
19769: PPUSH
19770: LD_STRING D2c-FSol1-1
19772: PPUSH
19773: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19777: LD_EXP 19
19781: PPUSH
19782: LD_STRING D2c-Kurt-1
19784: PPUSH
19785: CALL_OW 88
// DialogueOff ;
19789: CALL_OW 7
// InGameOff ;
19793: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19797: LD_EXP 19
19801: PPUSH
19802: LD_INT 9
19804: PPUSH
19805: CALL_OW 113
// readyToEscape = 1 ;
19809: LD_ADDR_EXP 21
19813: PUSH
19814: LD_INT 1
19816: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19817: LD_ADDR_EXP 29
19821: PUSH
19822: LD_INT 0
19824: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19825: LD_INT 35
19827: PPUSH
19828: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19832: LD_EXP 19
19836: PPUSH
19837: LD_INT 9
19839: PPUSH
19840: CALL_OW 308
19844: PUSH
19845: LD_EXP 21
19849: AND
19850: PUSH
19851: LD_EXP 19
19855: PPUSH
19856: CALL_OW 301
19860: OR
19861: IFFALSE 19825
// if IsDead ( Kurt ) then
19863: LD_EXP 19
19867: PPUSH
19868: CALL_OW 301
19872: IFFALSE 19876
// exit ;
19874: GO 19945
// RemoveUnit ( Kurt ) ;
19876: LD_EXP 19
19880: PPUSH
19881: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19885: LD_EXP 19
19889: PPUSH
19890: LD_STRING Kurt
19892: PPUSH
19893: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19897: LD_INT 1
19899: PPUSH
19900: LD_INT 2
19902: PPUSH
19903: CALL_OW 81
19907: PUSH
19908: LD_INT 0
19910: EQUAL
19911: IFFALSE 19921
// KurtStatus = 1 ;
19913: LD_ADDR_EXP 20
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19921: LD_INT 1
19923: PPUSH
19924: LD_INT 2
19926: PPUSH
19927: CALL_OW 81
19931: PUSH
19932: LD_INT 2
19934: EQUAL
19935: IFFALSE 19945
// KurtStatus = 2 ;
19937: LD_ADDR_EXP 20
19941: PUSH
19942: LD_INT 2
19944: ST_TO_ADDR
// end ; end_of_file
19945: LD_VAR 0 1
19949: RET
// every 0 0$1 do
19950: GO 19952
19952: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19953: LD_INT 3
19955: PPUSH
19956: LD_INT 32
19958: PPUSH
19959: LD_INT 3
19961: PPUSH
19962: CALL 5924 0 3
19966: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
19967: GO 19969
19969: DISABLE
19970: LD_INT 0
19972: PPUSH
// begin enemyWayX = [ ] ;
19973: LD_ADDR_EXP 45
19977: PUSH
19978: EMPTY
19979: ST_TO_ADDR
// enemyWayY = [ ] ;
19980: LD_ADDR_EXP 46
19984: PUSH
19985: EMPTY
19986: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_INT 1
19994: PPUSH
19995: LD_INT 2
19997: PPUSH
19998: CALL_OW 12
20002: ST_TO_ADDR
// if rnd = 1 then
20003: LD_VAR 0 1
20007: PUSH
20008: LD_INT 1
20010: EQUAL
20011: IFFALSE 20051
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20013: LD_ADDR_EXP 45
20017: PUSH
20018: LD_INT 93
20020: PUSH
20021: LD_INT 84
20023: PUSH
20024: LD_INT 104
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20032: LD_ADDR_EXP 46
20036: PUSH
20037: LD_INT 51
20039: PUSH
20040: LD_INT 35
20042: PUSH
20043: LD_INT 28
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: LIST
20050: ST_TO_ADDR
// end ; if rnd = 2 then
20051: LD_VAR 0 1
20055: PUSH
20056: LD_INT 2
20058: EQUAL
20059: IFFALSE 20115
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20061: LD_ADDR_EXP 45
20065: PUSH
20066: LD_INT 93
20068: PUSH
20069: LD_INT 52
20071: PUSH
20072: LD_INT 34
20074: PUSH
20075: LD_INT 28
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20088: LD_ADDR_EXP 46
20092: PUSH
20093: LD_INT 51
20095: PUSH
20096: LD_INT 45
20098: PUSH
20099: LD_INT 35
20101: PUSH
20102: LD_INT 26
20104: PUSH
20105: LD_INT 20
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: ST_TO_ADDR
// end ; enable ;
20115: ENABLE
// end ;
20116: PPOPN 1
20118: END
// every 0 0$1 do
20119: GO 20121
20121: DISABLE
// begin enable ;
20122: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20123: LD_INT 3
20125: PPUSH
20126: LD_INT 2
20128: PPUSH
20129: LD_INT 11
20131: PPUSH
20132: LD_EXP 31
20136: PPUSH
20137: CALL 7347 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20141: LD_INT 3
20143: PPUSH
20144: LD_INT 14
20146: PPUSH
20147: LD_EXP 31
20151: PPUSH
20152: CALL 9232 0 3
// if disableHealAI = 0 then
20156: LD_EXP 33
20160: PUSH
20161: LD_INT 0
20163: EQUAL
20164: IFFALSE 20185
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20166: LD_INT 3
20168: PPUSH
20169: LD_INT 10
20171: PPUSH
20172: LD_INT 11
20174: PPUSH
20175: LD_INT 32
20177: PUSH
20178: EMPTY
20179: LIST
20180: PPUSH
20181: CALL 7738 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20185: LD_INT 3
20187: PPUSH
20188: LD_INT 51
20190: PPUSH
20191: LD_INT 7
20193: PPUSH
20194: CALL 8446 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20198: LD_INT 3
20200: PPUSH
20201: LD_INT 14
20203: PPUSH
20204: LD_INT 121
20206: PPUSH
20207: LD_INT 100
20209: PPUSH
20210: CALL 6319 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20214: LD_INT 3
20216: PPUSH
20217: LD_INT 24
20219: PPUSH
20220: LD_EXP 45
20224: PPUSH
20225: LD_EXP 46
20229: PPUSH
20230: CALL 6522 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20234: LD_INT 3
20236: PPUSH
20237: LD_INT 11
20239: PPUSH
20240: CALL 8589 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20244: LD_INT 3
20246: PPUSH
20247: LD_INT 1
20249: PPUSH
20250: CALL 9002 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20254: LD_INT 2
20256: PPUSH
20257: CALL_OW 303
20261: PUSH
20262: LD_INT 2
20264: PPUSH
20265: CALL_OW 255
20269: PUSH
20270: LD_INT 1
20272: EQUAL
20273: OR
20274: IFFALSE 20286
// DefendDepot ( 3 , rudepo ) ;
20276: LD_INT 3
20278: PPUSH
20279: LD_INT 2
20281: PPUSH
20282: CALL 8282 0 2
// end ;
20286: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20287: LD_INT 22
20289: PUSH
20290: LD_INT 3
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 21
20299: PUSH
20300: LD_INT 2
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 55
20309: PUSH
20310: EMPTY
20311: LIST
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: LD_INT 34
20318: PUSH
20319: LD_INT 51
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: PPUSH
20336: CALL_OW 69
20340: PUSH
20341: LD_INT 0
20343: EQUAL
20344: PUSH
20345: LD_INT 21
20347: PPUSH
20348: CALL_OW 255
20352: PUSH
20353: LD_INT 3
20355: EQUAL
20356: AND
20357: PUSH
20358: LD_INT 21
20360: PPUSH
20361: CALL_OW 302
20365: AND
20366: PUSH
20367: LD_INT 2
20369: PPUSH
20370: CALL_OW 255
20374: PUSH
20375: LD_INT 3
20377: EQUAL
20378: AND
20379: PUSH
20380: LD_INT 2
20382: PPUSH
20383: CALL_OW 302
20387: AND
20388: IFFALSE 20572
20390: GO 20392
20392: DISABLE
// begin enable ;
20393: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20394: LD_INT 2
20396: PPUSH
20397: CALL_OW 274
20401: PPUSH
20402: LD_INT 1
20404: PPUSH
20405: LD_INT 1000
20407: PPUSH
20408: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20412: LD_INT 3
20414: PPUSH
20415: LD_INT 21
20417: PPUSH
20418: LD_INT 5
20420: PUSH
20421: LD_INT 6
20423: PUSH
20424: LD_INT 6
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: LD_OWVAR 67
20436: ARRAY
20437: PPUSH
20438: LD_INT 43
20440: PUSH
20441: LD_INT 43
20443: PUSH
20444: LD_INT 44
20446: PUSH
20447: LD_INT 44
20449: PUSH
20450: LD_INT 46
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 43
20462: PUSH
20463: LD_INT 43
20465: PUSH
20466: LD_INT 43
20468: PUSH
20469: LD_INT 44
20471: PUSH
20472: LD_INT 44
20474: PUSH
20475: LD_INT 46
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 43
20488: PUSH
20489: LD_INT 43
20491: PUSH
20492: LD_INT 43
20494: PUSH
20495: LD_INT 44
20497: PUSH
20498: LD_INT 44
20500: PUSH
20501: LD_INT 46
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: LIST
20516: PUSH
20517: LD_OWVAR 67
20521: ARRAY
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: LD_INT 22
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_INT 24
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PPUSH
20545: LD_INT 2
20547: PPUSH
20548: CALL_OW 12
20552: ARRAY
20553: PUSH
20554: LD_INT 24
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: PUSH
20562: LD_OWVAR 67
20566: ARRAY
20567: PPUSH
20568: CALL 6165 0 7
// end ;
20572: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20573: LD_INT 17
20575: PPUSH
20576: CALL_OW 255
20580: PUSH
20581: LD_INT 3
20583: EQUAL
20584: PUSH
20585: LD_INT 17
20587: PPUSH
20588: CALL_OW 302
20592: AND
20593: PUSH
20594: LD_INT 2
20596: PPUSH
20597: CALL_OW 255
20601: PUSH
20602: LD_INT 3
20604: EQUAL
20605: AND
20606: PUSH
20607: LD_INT 2
20609: PPUSH
20610: CALL_OW 302
20614: AND
20615: IFFALSE 20682
20617: GO 20619
20619: DISABLE
// begin enable ;
20620: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
20621: LD_INT 17
20623: PPUSH
20624: LD_INT 22
20626: PPUSH
20627: LD_INT 1
20629: PPUSH
20630: LD_INT 1
20632: PPUSH
20633: LD_INT 42
20635: PUSH
20636: LD_INT 43
20638: PUSH
20639: LD_INT 44
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: PPUSH
20650: LD_INT 3
20652: PPUSH
20653: CALL_OW 12
20657: ARRAY
20658: PPUSH
20659: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
20663: LD_INT 17
20665: PPUSH
20666: LD_INT 22
20668: PPUSH
20669: LD_INT 1
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: LD_INT 51
20677: PPUSH
20678: CALL_OW 185
// end ;
20682: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
20683: LD_INT 17
20685: PPUSH
20686: CALL_OW 302
20690: PUSH
20691: LD_INT 17
20693: PPUSH
20694: CALL_OW 255
20698: PUSH
20699: LD_INT 3
20701: EQUAL
20702: AND
20703: PUSH
20704: LD_INT 2
20706: PPUSH
20707: CALL_OW 302
20711: AND
20712: PUSH
20713: LD_INT 2
20715: PPUSH
20716: CALL_OW 255
20720: PUSH
20721: LD_INT 3
20723: EQUAL
20724: AND
20725: PUSH
20726: LD_INT 17
20728: PPUSH
20729: CALL_OW 313
20733: NOT
20734: AND
20735: IFFALSE 20829
20737: GO 20739
20739: DISABLE
20740: LD_INT 0
20742: PPUSH
// begin for i = 1 to 6 do
20743: LD_ADDR_VAR 0 1
20747: PUSH
20748: DOUBLE
20749: LD_INT 1
20751: DEC
20752: ST_TO_ADDR
20753: LD_INT 6
20755: PUSH
20756: FOR_TO
20757: IFFALSE 20827
// begin uc_side = 3 ;
20759: LD_ADDR_OWVAR 20
20763: PUSH
20764: LD_INT 3
20766: ST_TO_ADDR
// uc_nation = 3 ;
20767: LD_ADDR_OWVAR 21
20771: PUSH
20772: LD_INT 3
20774: ST_TO_ADDR
// hc_gallery :=  ;
20775: LD_ADDR_OWVAR 33
20779: PUSH
20780: LD_STRING 
20782: ST_TO_ADDR
// hc_name :=  ;
20783: LD_ADDR_OWVAR 26
20787: PUSH
20788: LD_STRING 
20790: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20791: LD_INT 0
20793: PPUSH
20794: LD_EXP 34
20798: PPUSH
20799: LD_EXP 35
20803: PPUSH
20804: CALL_OW 12
20808: PPUSH
20809: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
20813: CALL_OW 44
20817: PPUSH
20818: LD_INT 17
20820: PPUSH
20821: CALL_OW 52
// end ;
20825: GO 20756
20827: POP
20828: POP
// end ;
20829: PPOPN 1
20831: END
// every 2 2$0 do var i , j ;
20832: GO 20834
20834: DISABLE
20835: LD_INT 0
20837: PPUSH
20838: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
20839: LD_INT 14700
20841: PUSH
20842: LD_INT 33600
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: PPUSH
20852: LD_INT 2
20854: PPUSH
20855: CALL_OW 12
20859: ARRAY
20860: PPUSH
20861: CALL_OW 67
// disableHealAI = 1 ;
20865: LD_ADDR_EXP 33
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20873: LD_ADDR_VAR 0 1
20877: PUSH
20878: LD_INT 22
20880: PUSH
20881: LD_INT 3
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 4
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 69
20906: PUSH
20907: FOR_IN
20908: IFFALSE 20921
// ComExitBuilding ( i ) ;
20910: LD_VAR 0 1
20914: PPUSH
20915: CALL_OW 122
20919: GO 20907
20921: POP
20922: POP
// wait ( 0 0$1 ) ;
20923: LD_INT 35
20925: PPUSH
20926: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20930: LD_INT 35
20932: PPUSH
20933: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20937: LD_ADDR_VAR 0 1
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 3
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 25
20954: PUSH
20955: LD_INT 4
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: PUSH
20971: FOR_IN
20972: IFFALSE 21049
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20974: LD_ADDR_VAR 0 2
20978: PUSH
20979: LD_INT 19
20981: PPUSH
20982: LD_INT 22
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 25
20994: PUSH
20995: LD_INT 12
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 70
21010: PUSH
21011: FOR_IN
21012: IFFALSE 21045
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21014: LD_VAR 0 1
21018: PPUSH
21019: LD_VAR 0 2
21023: PPUSH
21024: CALL_OW 250
21028: PPUSH
21029: LD_VAR 0 2
21033: PPUSH
21034: CALL_OW 251
21038: PPUSH
21039: CALL_OW 191
// end ;
21043: GO 21011
21045: POP
21046: POP
// end ;
21047: GO 20971
21049: POP
21050: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21051: LD_INT 22
21053: PUSH
21054: LD_INT 3
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 25
21063: PUSH
21064: LD_INT 4
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: PUSH
21084: LD_EXP 32
21088: PUSH
21089: LD_INT 6
21091: PUSH
21092: LD_INT 7
21094: PUSH
21095: LD_INT 8
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: LD_OWVAR 67
21107: ARRAY
21108: GREATEREQUAL
21109: OR
21110: PUSH
21111: LD_INT 19
21113: PPUSH
21114: LD_INT 22
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 25
21126: PUSH
21127: LD_INT 12
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 70
21142: PUSH
21143: LD_INT 0
21145: EQUAL
21146: OR
21147: IFFALSE 20930
// disableHealAI = 0 ;
21149: LD_ADDR_EXP 33
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: LD_INT 22
21164: PUSH
21165: LD_INT 3
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 25
21174: PUSH
21175: LD_INT 12
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 69
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21208
// SetClass ( i , 16 ) ;
21194: LD_VAR 0 1
21198: PPUSH
21199: LD_INT 16
21201: PPUSH
21202: CALL_OW 336
21206: GO 21191
21208: POP
21209: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21210: LD_ADDR_VAR 0 1
21214: PUSH
21215: LD_INT 22
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 25
21227: PUSH
21228: LD_INT 4
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PPUSH
21239: CALL_OW 69
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21264
// ComMoveXY ( i , 113 , 94 ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 113
21254: PPUSH
21255: LD_INT 94
21257: PPUSH
21258: CALL_OW 111
21262: GO 21244
21264: POP
21265: POP
// end ;
21266: PPOPN 2
21268: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21269: LD_INT 21
21271: PPUSH
21272: CALL_OW 255
21276: PUSH
21277: LD_INT 3
21279: EQUAL
21280: PUSH
21281: LD_INT 21
21283: PPUSH
21284: CALL_OW 302
21288: AND
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_INT 3
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 34
21302: PUSH
21303: LD_INT 51
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 69
21318: PUSH
21319: LD_INT 0
21321: EQUAL
21322: AND
21323: IFFALSE 21355
21325: GO 21327
21327: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
21328: LD_INT 21
21330: PPUSH
21331: LD_INT 23
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: LD_INT 1
21339: PPUSH
21340: LD_INT 51
21342: PPUSH
21343: CALL_OW 185
// wait ( 5 5$0 ) ;
21347: LD_INT 10500
21349: PPUSH
21350: CALL_OW 67
// enable ;
21354: ENABLE
// end ; end_of_file
21355: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21356: LD_EXP 26
21360: PUSH
21361: LD_INT 0
21363: LESSEQUAL
21364: IFFALSE 21513
21366: GO 21368
21368: DISABLE
21369: LD_INT 0
21371: PPUSH
21372: PPUSH
21373: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_INT 22
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: LD_INT 30
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: ST_TO_ADDR
// for i in tmp do
21437: LD_ADDR_VAR 0 1
21441: PUSH
21442: LD_VAR 0 2
21446: PUSH
21447: FOR_IN
21448: IFFALSE 21481
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: LD_VAR 0 3
21459: PUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 274
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: CALL_OW 275
21477: PLUS
21478: ST_TO_ADDR
21479: GO 21447
21481: POP
21482: POP
// if yourCrates >= needCrates then
21483: LD_VAR 0 3
21487: PUSH
21488: LD_EXP 25
21492: GREATEREQUAL
21493: IFFALSE 21506
// begin FinishMission ( yourCrates ) ;
21495: LD_VAR 0 3
21499: PPUSH
21500: CALL 21516 0 1
// end else
21504: GO 21513
// begin YouLost ( matmin ) ;
21506: LD_STRING matmin
21508: PPUSH
21509: CALL_OW 104
// end ; end ;
21513: PPOPN 3
21515: END
// export function FinishMission ( crates ) ; begin
21516: LD_INT 0
21518: PPUSH
// if crates + 100 > crates then
21519: LD_VAR 0 1
21523: PUSH
21524: LD_INT 100
21526: PLUS
21527: PUSH
21528: LD_VAR 0 1
21532: GREATER
21533: IFFALSE 21557
// begin AddMedal ( cans , 1 ) ;
21535: LD_STRING cans
21537: PPUSH
21538: LD_INT 1
21540: PPUSH
21541: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21545: LD_INT 1
21547: PPUSH
21548: LD_STRING 06_crates_1
21550: PPUSH
21551: CALL_OW 39
// end else
21555: GO 21578
// begin AddMedal ( cans , - 1 ) ;
21557: LD_STRING cans
21559: PPUSH
21560: LD_INT 1
21562: NEG
21563: PPUSH
21564: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21568: LD_INT 0
21570: PPUSH
21571: LD_STRING 06_crates_1
21573: PPUSH
21574: CALL_OW 39
// end ; if unitLost < 3 then
21578: LD_EXP 30
21582: PUSH
21583: LD_INT 3
21585: LESS
21586: IFFALSE 21600
// begin AddMedal ( people , 1 ) ;
21588: LD_STRING people
21590: PPUSH
21591: LD_INT 1
21593: PPUSH
21594: CALL_OW 101
// end else
21598: GO 21611
// begin AddMedal ( people , - 1 ) ;
21600: LD_STRING people
21602: PPUSH
21603: LD_INT 1
21605: NEG
21606: PPUSH
21607: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
21611: LD_EXP 28
21615: PPUSH
21616: LD_STRING 06_remoteVehs_1
21618: PPUSH
21619: CALL_OW 39
// if remoteVehiclesBuild = 1 then
21623: LD_EXP 28
21627: PUSH
21628: LD_INT 1
21630: EQUAL
21631: IFFALSE 21645
// begin AddMedal ( remote , 1 ) ;
21633: LD_STRING remote
21635: PPUSH
21636: LD_INT 1
21638: PPUSH
21639: CALL_OW 101
// end else
21643: GO 21685
// begin if GetTech ( 18 , 1 ) = state_enabled then
21645: LD_INT 18
21647: PPUSH
21648: LD_INT 1
21650: PPUSH
21651: CALL_OW 321
21655: PUSH
21656: LD_INT 1
21658: EQUAL
21659: IFFALSE 21674
// begin AddMedal ( remote , - 1 ) ;
21661: LD_STRING remote
21663: PPUSH
21664: LD_INT 1
21666: NEG
21667: PPUSH
21668: CALL_OW 101
// end else
21672: GO 21685
// begin AddMedal ( remote , - 2 ) ;
21674: LD_STRING remote
21676: PPUSH
21677: LD_INT 2
21679: NEG
21680: PPUSH
21681: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
21685: LD_EXP 20
21689: PPUSH
21690: LD_STRING 06_KurtStatus_1
21692: PPUSH
21693: CALL_OW 39
// GiveMedals ( Main ) ;
21697: LD_STRING Main
21699: PPUSH
21700: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21704: LD_INT 22
21706: PUSH
21707: LD_INT 1
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 21
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 50
21726: PUSH
21727: EMPTY
21728: LIST
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 25
21735: PUSH
21736: LD_INT 1
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 25
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 25
21755: PUSH
21756: LD_INT 3
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 25
21765: PUSH
21766: LD_INT 4
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL_OW 69
21790: PPUSH
21791: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21795: LD_EXP 1
21799: PPUSH
21800: LD_EXP 43
21804: PUSH
21805: LD_STRING JMM
21807: STR
21808: PPUSH
21809: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21813: LD_EXP 2
21817: PPUSH
21818: LD_EXP 43
21822: PUSH
21823: LD_STRING Lisa
21825: STR
21826: PPUSH
21827: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21831: LD_EXP 3
21835: PPUSH
21836: LD_EXP 43
21840: PUSH
21841: LD_STRING Bobby
21843: STR
21844: PPUSH
21845: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21849: LD_EXP 4
21853: PPUSH
21854: LD_EXP 43
21858: PUSH
21859: LD_STRING Cyrus
21861: STR
21862: PPUSH
21863: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21867: LD_EXP 5
21871: PPUSH
21872: LD_EXP 43
21876: PUSH
21877: LD_STRING Frank
21879: STR
21880: PPUSH
21881: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21885: LD_EXP 6
21889: PPUSH
21890: LD_EXP 43
21894: PUSH
21895: LD_STRING Brown
21897: STR
21898: PPUSH
21899: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21903: LD_EXP 7
21907: PPUSH
21908: LD_EXP 43
21912: PUSH
21913: LD_STRING Donaldson
21915: STR
21916: PPUSH
21917: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21921: LD_EXP 8
21925: PPUSH
21926: LD_EXP 43
21930: PUSH
21931: LD_STRING Gladstone
21933: STR
21934: PPUSH
21935: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21939: LD_EXP 9
21943: PPUSH
21944: LD_EXP 43
21948: PUSH
21949: LD_STRING Denis
21951: STR
21952: PPUSH
21953: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21957: LD_EXP 15
21961: PPUSH
21962: LD_EXP 43
21966: PUSH
21967: LD_STRING Joan
21969: STR
21970: PPUSH
21971: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21975: LD_EXP 16
21979: PPUSH
21980: LD_STRING 06_JoanStatus_1
21982: PPUSH
21983: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21987: LD_INT 50
21989: PUSH
21990: EMPTY
21991: LIST
21992: PUSH
21993: LD_INT 22
21995: PUSH
21996: LD_INT 1
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: PUSH
22003: LD_INT 21
22005: PUSH
22006: LD_INT 1
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: LD_INT 25
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 25
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 25
22038: PUSH
22039: LD_INT 3
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 4
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: PPUSH
22069: CALL_OW 69
22073: PUSH
22074: LD_EXP 1
22078: PUSH
22079: LD_EXP 2
22083: PUSH
22084: LD_EXP 3
22088: PUSH
22089: LD_EXP 4
22093: PUSH
22094: LD_EXP 5
22098: PUSH
22099: LD_EXP 6
22103: PUSH
22104: LD_EXP 7
22108: PUSH
22109: LD_EXP 8
22113: PUSH
22114: LD_EXP 9
22118: PUSH
22119: LD_EXP 15
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: DIFF
22136: PPUSH
22137: LD_STRING 06_other_survivors
22139: PPUSH
22140: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22144: LD_INT 50
22146: PUSH
22147: EMPTY
22148: LIST
22149: PUSH
22150: LD_INT 22
22152: PUSH
22153: LD_INT 1
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 21
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 25
22175: PUSH
22176: LD_INT 12
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 25
22185: PUSH
22186: LD_INT 16
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PPUSH
22204: CALL_OW 69
22208: PPUSH
22209: LD_STRING 06_other_apemans
22211: PPUSH
22212: CALL_OW 38
// YouWin ;
22216: CALL_OW 103
// end ; end_of_file
22220: LD_VAR 0 2
22224: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22225: LD_EXP 39
22229: PUSH
22230: LD_INT 3
22232: EQUAL
22233: IFFALSE 22348
22235: GO 22237
22237: DISABLE
// begin enable ;
22238: ENABLE
// sendedConvoys = 0 ;
22239: LD_ADDR_EXP 39
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22247: LD_INT 6
22249: PPUSH
22250: LD_INT 3
22252: PPUSH
22253: LD_INT 5
22255: PPUSH
22256: LD_INT 10
22258: PPUSH
22259: CALL_OW 12
22263: PUSH
22264: LD_INT 5
22266: PPUSH
22267: LD_INT 11
22269: PPUSH
22270: CALL_OW 12
22274: PUSH
22275: LD_INT 8
22277: PPUSH
22278: LD_INT 12
22280: PPUSH
22281: CALL_OW 12
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: PUSH
22291: LD_OWVAR 67
22295: ARRAY
22296: PPUSH
22297: LD_INT 0
22299: PPUSH
22300: LD_INT 0
22302: PPUSH
22303: LD_INT 0
22305: PPUSH
22306: LD_INT 0
22308: PPUSH
22309: LD_EXP 34
22313: PPUSH
22314: LD_EXP 35
22318: PPUSH
22319: CALL_OW 12
22323: PPUSH
22324: LD_INT 18
22326: PPUSH
22327: LD_INT 17
22329: PPUSH
22330: LD_INT 1
22332: PPUSH
22333: LD_INT 1
22335: PPUSH
22336: LD_INT 2
22338: PPUSH
22339: CALL_OW 12
22343: PPUSH
22344: CALL 9830 0 12
// end ; end_of_file
22348: END
// export function PrepareNature ; var i , un ; begin
22349: LD_INT 0
22351: PPUSH
22352: PPUSH
22353: PPUSH
// for i = 1 to Difficulty + 2 do
22354: LD_ADDR_VAR 0 2
22358: PUSH
22359: DOUBLE
22360: LD_INT 1
22362: DEC
22363: ST_TO_ADDR
22364: LD_OWVAR 67
22368: PUSH
22369: LD_INT 2
22371: PLUS
22372: PUSH
22373: FOR_TO
22374: IFFALSE 22483
// begin hc_sex = sex_male ;
22376: LD_ADDR_OWVAR 27
22380: PUSH
22381: LD_INT 1
22383: ST_TO_ADDR
// uc_side = 0 ;
22384: LD_ADDR_OWVAR 20
22388: PUSH
22389: LD_INT 0
22391: ST_TO_ADDR
// uc_nation = nation_nature ;
22392: LD_ADDR_OWVAR 21
22396: PUSH
22397: LD_INT 0
22399: ST_TO_ADDR
// hc_class = class_tiger ;
22400: LD_ADDR_OWVAR 28
22404: PUSH
22405: LD_INT 14
22407: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22408: LD_ADDR_OWVAR 31
22412: PUSH
22413: LD_EXP 35
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22433: LD_ADDR_OWVAR 35
22437: PUSH
22438: LD_INT 5
22440: NEG
22441: PPUSH
22442: LD_INT 5
22444: PPUSH
22445: CALL_OW 12
22449: PUSH
22450: LD_OWVAR 67
22454: MUL
22455: ST_TO_ADDR
// un = CreateHuman ;
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: CALL_OW 44
22465: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22466: LD_VAR 0 3
22470: PPUSH
22471: LD_INT 20
22473: PPUSH
22474: LD_INT 0
22476: PPUSH
22477: CALL_OW 49
// end ;
22481: GO 22373
22483: POP
22484: POP
// for i = 1 to rand ( 3 , 4 ) do
22485: LD_ADDR_VAR 0 2
22489: PUSH
22490: DOUBLE
22491: LD_INT 1
22493: DEC
22494: ST_TO_ADDR
22495: LD_INT 3
22497: PPUSH
22498: LD_INT 4
22500: PPUSH
22501: CALL_OW 12
22505: PUSH
22506: FOR_TO
22507: IFFALSE 22601
// begin hc_sex = sex_male ;
22509: LD_ADDR_OWVAR 27
22513: PUSH
22514: LD_INT 1
22516: ST_TO_ADDR
// uc_side = 0 ;
22517: LD_ADDR_OWVAR 20
22521: PUSH
22522: LD_INT 0
22524: ST_TO_ADDR
// uc_nation = nation_nature ;
22525: LD_ADDR_OWVAR 21
22529: PUSH
22530: LD_INT 0
22532: ST_TO_ADDR
// hc_class = 18 ;
22533: LD_ADDR_OWVAR 28
22537: PUSH
22538: LD_INT 18
22540: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22541: LD_ADDR_OWVAR 31
22545: PUSH
22546: LD_EXP 35
22550: PUSH
22551: LD_INT 0
22553: PUSH
22554: LD_INT 0
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: ST_TO_ADDR
// hc_agressivity = 0 ;
22566: LD_ADDR_OWVAR 35
22570: PUSH
22571: LD_INT 0
22573: ST_TO_ADDR
// un = CreateHuman ;
22574: LD_ADDR_VAR 0 3
22578: PUSH
22579: CALL_OW 44
22583: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22584: LD_VAR 0 3
22588: PPUSH
22589: LD_INT 20
22591: PPUSH
22592: LD_INT 0
22594: PPUSH
22595: CALL_OW 49
// end ;
22599: GO 22506
22601: POP
22602: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
22603: LD_ADDR_VAR 0 2
22607: PUSH
22608: DOUBLE
22609: LD_INT 1
22611: DEC
22612: ST_TO_ADDR
22613: LD_INT 1
22615: PPUSH
22616: LD_INT 3
22618: PPUSH
22619: CALL_OW 12
22623: PUSH
22624: LD_OWVAR 67
22628: PLUS
22629: PUSH
22630: FOR_TO
22631: IFFALSE 22812
// begin hc_sex = sex_male ;
22633: LD_ADDR_OWVAR 27
22637: PUSH
22638: LD_INT 1
22640: ST_TO_ADDR
// uc_side = 0 ;
22641: LD_ADDR_OWVAR 20
22645: PUSH
22646: LD_INT 0
22648: ST_TO_ADDR
// uc_nation = nation_nature ;
22649: LD_ADDR_OWVAR 21
22653: PUSH
22654: LD_INT 0
22656: ST_TO_ADDR
// hc_class = class_apeman ;
22657: LD_ADDR_OWVAR 28
22661: PUSH
22662: LD_INT 12
22664: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22665: LD_ADDR_OWVAR 31
22669: PUSH
22670: LD_EXP 34
22674: PPUSH
22675: LD_EXP 35
22679: PPUSH
22680: CALL_OW 12
22684: PUSH
22685: LD_EXP 34
22689: PPUSH
22690: LD_EXP 35
22694: PPUSH
22695: CALL_OW 12
22699: PUSH
22700: LD_EXP 34
22704: PPUSH
22705: LD_EXP 35
22709: PPUSH
22710: CALL_OW 12
22714: PUSH
22715: LD_EXP 34
22719: PPUSH
22720: LD_EXP 35
22724: PPUSH
22725: CALL_OW 12
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
22736: LD_ADDR_OWVAR 35
22740: PUSH
22741: LD_INT 20
22743: PPUSH
22744: LD_INT 30
22746: PPUSH
22747: CALL_OW 12
22751: PUSH
22752: LD_INT 30
22754: PPUSH
22755: LD_INT 40
22757: PPUSH
22758: CALL_OW 12
22762: PUSH
22763: LD_INT 40
22765: PPUSH
22766: LD_INT 50
22768: PPUSH
22769: CALL_OW 12
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: PUSH
22779: LD_OWVAR 67
22783: ARRAY
22784: ST_TO_ADDR
// un = CreateHuman ;
22785: LD_ADDR_VAR 0 3
22789: PUSH
22790: CALL_OW 44
22794: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22795: LD_VAR 0 3
22799: PPUSH
22800: LD_INT 21
22802: PPUSH
22803: LD_INT 0
22805: PPUSH
22806: CALL_OW 49
// end ;
22810: GO 22630
22812: POP
22813: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
22814: LD_ADDR_VAR 0 2
22818: PUSH
22819: DOUBLE
22820: LD_INT 1
22822: DEC
22823: ST_TO_ADDR
22824: LD_INT 5
22826: PPUSH
22827: LD_INT 6
22829: PPUSH
22830: CALL_OW 12
22834: PUSH
22835: LD_OWVAR 67
22839: PLUS
22840: PUSH
22841: FOR_TO
22842: IFFALSE 22988
// begin hc_sex = sex_male ;
22844: LD_ADDR_OWVAR 27
22848: PUSH
22849: LD_INT 1
22851: ST_TO_ADDR
// uc_side = 0 ;
22852: LD_ADDR_OWVAR 20
22856: PUSH
22857: LD_INT 0
22859: ST_TO_ADDR
// uc_nation = nation_nature ;
22860: LD_ADDR_OWVAR 21
22864: PUSH
22865: LD_INT 0
22867: ST_TO_ADDR
// hc_class = class_apeman ;
22868: LD_ADDR_OWVAR 28
22872: PUSH
22873: LD_INT 12
22875: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22876: LD_ADDR_OWVAR 31
22880: PUSH
22881: LD_EXP 34
22885: PPUSH
22886: LD_EXP 35
22890: PPUSH
22891: CALL_OW 12
22895: PUSH
22896: LD_EXP 34
22900: PPUSH
22901: LD_EXP 35
22905: PPUSH
22906: CALL_OW 12
22910: PUSH
22911: LD_OWVAR 67
22915: PLUS
22916: PUSH
22917: LD_EXP 34
22921: PPUSH
22922: LD_EXP 35
22926: PPUSH
22927: CALL_OW 12
22931: PUSH
22932: LD_EXP 34
22936: PPUSH
22937: LD_EXP 35
22941: PPUSH
22942: CALL_OW 12
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: ST_TO_ADDR
// hc_agressivity = 0 ;
22953: LD_ADDR_OWVAR 35
22957: PUSH
22958: LD_INT 0
22960: ST_TO_ADDR
// un = CreateHuman ;
22961: LD_ADDR_VAR 0 3
22965: PUSH
22966: CALL_OW 44
22970: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22971: LD_VAR 0 3
22975: PPUSH
22976: LD_INT 22
22978: PPUSH
22979: LD_INT 0
22981: PPUSH
22982: CALL_OW 49
// end ;
22986: GO 22841
22988: POP
22989: POP
// end ; end_of_file
22990: LD_VAR 0 1
22994: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22995: LD_EXP 1
22999: PPUSH
23000: CALL_OW 301
23004: IFFALSE 23016
23006: GO 23008
23008: DISABLE
// YouLost ( JMM ) ;
23009: LD_STRING JMM
23011: PPUSH
23012: CALL_OW 104
23016: END
