// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 21455 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// for i = 1 to 72 do
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 72
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6002
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5946: LD_VAR 0 5
5950: PPUSH
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 321
5960: PUSH
5961: LD_INT 1
5963: EQUAL
5964: PUSH
5965: LD_VAR 0 5
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: CALL_OW 482
5979: PUSH
5980: LD_INT 1
5982: EQUAL
5983: AND
5984: IFFALSE 6000
// AddComResearch ( lab , i ) ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_VAR 0 5
5995: PPUSH
5996: CALL_OW 184
6000: GO 5943
6002: POP
6003: POP
// end ;
6004: LD_VAR 0 4
6008: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6017: LD_ADDR_VAR 0 8
6021: PUSH
6022: LD_VAR 0 2
6026: PPUSH
6027: CALL_OW 313
6031: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
6032: LD_ADDR_VAR 0 9
6036: PUSH
6037: LD_VAR 0 3
6041: PPUSH
6042: LD_INT 22
6044: PUSH
6045: LD_VAR 0 1
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 25
6056: PUSH
6057: LD_INT 2
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 24
6066: PUSH
6067: LD_INT 750
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 54
6079: PUSH
6080: EMPTY
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PPUSH
6093: CALL_OW 70
6097: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
6098: LD_ADDR_VAR 0 6
6102: PUSH
6103: LD_VAR 0 3
6107: PPUSH
6108: LD_INT 22
6110: PUSH
6111: LD_VAR 0 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 21
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 24
6135: PUSH
6136: LD_INT 1000
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: PPUSH
6155: CALL_OW 70
6159: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
6160: LD_VAR 0 6
6164: NOT
6165: PUSH
6166: LD_INT 22
6168: PUSH
6169: LD_VAR 0 1
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 25
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: LD_INT 250
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: NOT
6208: AND
6209: IFFALSE 6213
// exit ;
6211: GO 6395
// if buildings_list > 0 and engineerOkInside then
6213: LD_VAR 0 6
6217: PUSH
6218: LD_INT 0
6220: GREATER
6221: PUSH
6222: LD_VAR 0 8
6226: AND
6227: IFFALSE 6238
// ComExitBuilding ( engineerOkInside ) ;
6229: LD_VAR 0 8
6233: PPUSH
6234: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
6238: LD_VAR 0 6
6242: PUSH
6243: LD_INT 0
6245: GREATER
6246: PUSH
6247: LD_VAR 0 9
6251: PUSH
6252: LD_INT 0
6254: GREATER
6255: AND
6256: IFFALSE 6276
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
6258: LD_VAR 0 9
6262: PPUSH
6263: LD_VAR 0 6
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PPUSH
6272: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
6276: LD_VAR 0 6
6280: PUSH
6281: LD_INT 0
6283: EQUAL
6284: PUSH
6285: LD_VAR 0 4
6289: PUSH
6290: LD_INT 0
6292: EQUAL
6293: AND
6294: PUSH
6295: LD_VAR 0 9
6299: PUSH
6300: LD_INT 0
6302: GREATER
6303: AND
6304: IFFALSE 6320
// ComEnterUnit ( engineerOkOutside , building ) ;
6306: LD_VAR 0 9
6310: PPUSH
6311: LD_VAR 0 2
6315: PPUSH
6316: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
6320: LD_VAR 0 9
6324: PUSH
6325: LD_INT 0
6327: GREATER
6328: PUSH
6329: LD_VAR 0 6
6333: PUSH
6334: LD_INT 0
6336: EQUAL
6337: AND
6338: PUSH
6339: LD_VAR 0 4
6343: PUSH
6344: LD_INT 0
6346: GREATER
6347: AND
6348: IFFALSE 6395
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
6350: LD_VAR 0 9
6354: PPUSH
6355: LD_VAR 0 4
6359: PUSH
6360: LD_INT 1
6362: ARRAY
6363: PPUSH
6364: LD_VAR 0 4
6368: PUSH
6369: LD_INT 2
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PUSH
6378: LD_INT 3
6380: ARRAY
6381: PPUSH
6382: LD_VAR 0 4
6386: PUSH
6387: LD_INT 4
6389: ARRAY
6390: PPUSH
6391: CALL_OW 145
// end ;
6395: LD_VAR 0 5
6399: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
6400: LD_INT 0
6402: PPUSH
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
6409: PPUSH
6410: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
6411: LD_ADDR_VAR 0 6
6415: PUSH
6416: LD_INT 22
6418: PUSH
6419: LD_VAR 0 1
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 25
6430: PUSH
6431: LD_INT 4
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 23
6440: PUSH
6441: LD_INT 2
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 24
6450: PUSH
6451: LD_INT 251
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PPUSH
6464: CALL_OW 69
6468: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6469: LD_ADDR_VAR 0 7
6473: PUSH
6474: LD_VAR 0 3
6478: PPUSH
6479: LD_INT 22
6481: PUSH
6482: LD_VAR 0 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 23
6493: PUSH
6494: LD_INT 2
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 25
6503: PUSH
6504: LD_INT 4
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 50
6513: PUSH
6514: EMPTY
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 70
6527: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6528: LD_ADDR_VAR 0 10
6532: PUSH
6533: LD_VAR 0 3
6537: PPUSH
6538: LD_INT 22
6540: PUSH
6541: LD_VAR 0 1
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 21
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 3
6562: PUSH
6563: LD_INT 25
6565: PUSH
6566: LD_INT 3
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 24
6582: PUSH
6583: LD_INT 750
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PPUSH
6600: CALL_OW 70
6604: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6605: LD_ADDR_VAR 0 11
6609: PUSH
6610: LD_VAR 0 2
6614: PPUSH
6615: LD_INT 22
6617: PUSH
6618: LD_VAR 0 1
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: LD_INT 21
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 3
6639: PUSH
6640: LD_INT 25
6642: PUSH
6643: LD_INT 3
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 24
6659: PUSH
6660: LD_INT 1000
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 70
6681: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6682: LD_VAR 0 10
6686: NOT
6687: PUSH
6688: LD_VAR 0 11
6692: NOT
6693: AND
6694: PUSH
6695: LD_VAR 0 6
6699: NOT
6700: AND
6701: IFFALSE 6705
// exit ;
6703: GO 6939
// if damageUnits > 0 and sci_list > 0 then
6705: LD_VAR 0 10
6709: PUSH
6710: LD_INT 0
6712: GREATER
6713: PUSH
6714: LD_VAR 0 6
6718: PUSH
6719: LD_INT 0
6721: GREATER
6722: AND
6723: IFFALSE 6739
// ComMoveToArea ( damageUnits , healArea ) ;
6725: LD_VAR 0 10
6729: PPUSH
6730: LD_VAR 0 2
6734: PPUSH
6735: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6739: LD_VAR 0 11
6743: PUSH
6744: LD_INT 0
6746: GREATER
6747: PUSH
6748: LD_VAR 0 6
6752: PUSH
6753: LD_INT 0
6755: GREATER
6756: AND
6757: IFFALSE 6768
// ComExitBuilding ( sci_list ) ;
6759: LD_VAR 0 6
6763: PPUSH
6764: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6768: LD_VAR 0 11
6772: PUSH
6773: LD_INT 0
6775: GREATER
6776: PUSH
6777: LD_VAR 0 7
6781: PUSH
6782: LD_INT 0
6784: GREATER
6785: AND
6786: IFFALSE 6806
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6788: LD_VAR 0 7
6792: PPUSH
6793: LD_VAR 0 11
6797: PUSH
6798: LD_INT 1
6800: ARRAY
6801: PPUSH
6802: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6806: LD_VAR 0 10
6810: PUSH
6811: LD_INT 0
6813: EQUAL
6814: PUSH
6815: LD_VAR 0 11
6819: PUSH
6820: LD_INT 0
6822: EQUAL
6823: AND
6824: PUSH
6825: LD_VAR 0 7
6829: PUSH
6830: LD_INT 0
6832: GREATER
6833: AND
6834: IFFALSE 6939
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6836: LD_ADDR_VAR 0 12
6840: PUSH
6841: LD_INT 22
6843: PUSH
6844: LD_VAR 0 1
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 21
6855: PUSH
6856: LD_INT 3
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 30
6865: PUSH
6866: LD_INT 8
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6883: LD_ADDR_VAR 0 13
6887: PUSH
6888: LD_INT 1
6890: PPUSH
6891: LD_VAR 0 12
6895: PPUSH
6896: CALL_OW 12
6900: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6901: LD_VAR 0 7
6905: PPUSH
6906: LD_INT 3
6908: PUSH
6909: LD_INT 60
6911: PUSH
6912: EMPTY
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: PPUSH
6924: LD_VAR 0 12
6928: PUSH
6929: LD_VAR 0 13
6933: ARRAY
6934: PPUSH
6935: CALL_OW 120
// end ; end ;
6939: LD_VAR 0 5
6943: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
6944: LD_INT 0
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
// tmpTab = [ ] ;
6950: LD_ADDR_VAR 0 6
6954: PUSH
6955: EMPTY
6956: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
6957: LD_INT 22
6959: PUSH
6960: LD_VAR 0 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 30
6971: PUSH
6972: LD_INT 32
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: PUSH
6988: LD_INT 0
6990: GREATER
6991: IFFALSE 7074
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6993: LD_ADDR_VAR 0 4
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_VAR 0 1
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 30
7012: PUSH
7013: LD_INT 32
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7072
// begin for j in UnitsInside ( i ) do
7032: LD_ADDR_VAR 0 5
7036: PUSH
7037: LD_VAR 0 4
7041: PPUSH
7042: CALL_OW 313
7046: PUSH
7047: FOR_IN
7048: IFFALSE 7068
// tmpTab = tmpTab ^ j ;
7050: LD_ADDR_VAR 0 6
7054: PUSH
7055: LD_VAR 0 6
7059: PUSH
7060: LD_VAR 0 5
7064: ADD
7065: ST_TO_ADDR
7066: GO 7047
7068: POP
7069: POP
// end ;
7070: GO 7029
7072: POP
7073: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
7074: LD_VAR 0 6
7078: PPUSH
7079: LD_VAR 0 2
7083: PPUSH
7084: CALL_OW 250
7088: PPUSH
7089: LD_VAR 0 2
7093: PPUSH
7094: CALL_OW 251
7098: PPUSH
7099: CALL_OW 114
// end ;
7103: LD_VAR 0 3
7107: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
7112: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
7113: LD_INT 22
7115: PUSH
7116: LD_VAR 0 1
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 21
7127: PUSH
7128: LD_INT 2
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PPUSH
7139: CALL_OW 69
7143: PUSH
7144: LD_VAR 0 3
7148: LESSEQUAL
7149: IFFALSE 7257
// begin for i = 1 to vehCount do
7151: LD_ADDR_VAR 0 9
7155: PUSH
7156: DOUBLE
7157: LD_INT 1
7159: DEC
7160: ST_TO_ADDR
7161: LD_VAR 0 3
7165: PUSH
7166: FOR_TO
7167: IFFALSE 7255
// begin weapon = weaponTab [ i ] ;
7169: LD_ADDR_VAR 0 10
7173: PUSH
7174: LD_VAR 0 4
7178: PUSH
7179: LD_VAR 0 9
7183: ARRAY
7184: ST_TO_ADDR
// if weapon = 46 then
7185: LD_VAR 0 10
7189: PUSH
7190: LD_INT 46
7192: EQUAL
7193: IFFALSE 7224
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
7195: LD_VAR 0 2
7199: PPUSH
7200: LD_INT 24
7202: PPUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: LD_VAR 0 6
7212: PPUSH
7213: LD_VAR 0 10
7217: PPUSH
7218: CALL_OW 185
// end else
7222: GO 7253
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
7224: LD_VAR 0 2
7228: PPUSH
7229: LD_VAR 0 7
7233: PPUSH
7234: LD_VAR 0 5
7238: PPUSH
7239: LD_VAR 0 6
7243: PPUSH
7244: LD_VAR 0 10
7248: PPUSH
7249: CALL_OW 185
// end ; end ;
7253: GO 7166
7255: POP
7256: POP
// end ; end ;
7257: LD_VAR 0 8
7261: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
7262: LD_INT 0
7264: PPUSH
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
// for i := 1 to russianTanks do
7269: LD_ADDR_VAR 0 4
7273: PUSH
7274: DOUBLE
7275: LD_INT 1
7277: DEC
7278: ST_TO_ADDR
7279: LD_EXP 36
7283: PUSH
7284: FOR_TO
7285: IFFALSE 7763
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
7287: LD_VAR 0 4
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: LD_INT 6
7297: PUSH
7298: LD_INT 6
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: LD_OWVAR 67
7310: ARRAY
7311: EQUAL
7312: IFFALSE 7761
// begin repeat wait ( 0 0$1 ) ;
7314: LD_INT 35
7316: PPUSH
7317: CALL_OW 67
// for i in russianTanks do
7321: LD_ADDR_VAR 0 4
7325: PUSH
7326: LD_EXP 36
7330: PUSH
7331: FOR_IN
7332: IFFALSE 7749
// begin if GetLives ( i ) < 659 then
7334: LD_VAR 0 4
7338: PPUSH
7339: CALL_OW 256
7343: PUSH
7344: LD_INT 659
7346: LESS
7347: IFFALSE 7431
// begin tmp = i ;
7349: LD_ADDR_VAR 0 5
7353: PUSH
7354: LD_VAR 0 4
7358: ST_TO_ADDR
// for i := 1 to russianTanks do
7359: LD_ADDR_VAR 0 4
7363: PUSH
7364: DOUBLE
7365: LD_INT 1
7367: DEC
7368: ST_TO_ADDR
7369: LD_EXP 36
7373: PUSH
7374: FOR_TO
7375: IFFALSE 7429
// begin if tmp = russianTanks [ i ] then
7377: LD_VAR 0 5
7381: PUSH
7382: LD_EXP 36
7386: PUSH
7387: LD_VAR 0 4
7391: ARRAY
7392: EQUAL
7393: IFFALSE 7427
// begin russianTanks = russianTanks diff tmp ;
7395: LD_ADDR_EXP 36
7399: PUSH
7400: LD_EXP 36
7404: PUSH
7405: LD_VAR 0 5
7409: DIFF
7410: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
7411: LD_ADDR_EXP 37
7415: PUSH
7416: LD_EXP 37
7420: PUSH
7421: LD_VAR 0 5
7425: ADD
7426: ST_TO_ADDR
// end ; end ;
7427: GO 7374
7429: POP
7430: POP
// end ; wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if FilterUnitsInArea ( SouthTerritory , [ f_side , 1 ] ) > 2 then
7438: LD_INT 23
7440: PPUSH
7441: LD_INT 22
7443: PUSH
7444: LD_INT 1
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 70
7455: PUSH
7456: LD_INT 2
7458: GREATER
7459: IFFALSE 7569
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7461: LD_ADDR_VAR 0 6
7465: PUSH
7466: LD_INT 22
7468: PUSH
7469: LD_VAR 0 2
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: PPUSH
7483: LD_VAR 0 4
7487: PPUSH
7488: CALL_OW 74
7492: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7493: LD_ADDR_VAR 0 7
7497: PUSH
7498: LD_INT 22
7500: PUSH
7501: LD_VAR 0 2
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 59
7515: PUSH
7516: EMPTY
7517: LIST
7518: PUSH
7519: LD_INT 21
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: PPUSH
7557: LD_VAR 0 4
7561: PPUSH
7562: CALL_OW 74
7566: ST_TO_ADDR
// end else
7567: GO 7681
// begin target1 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ f_side , targetSide ] ) , i ) ;
7569: LD_ADDR_VAR 0 6
7573: PUSH
7574: LD_INT 23
7576: PPUSH
7577: LD_INT 22
7579: PUSH
7580: LD_VAR 0 2
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PPUSH
7589: CALL_OW 71
7593: PPUSH
7594: LD_VAR 0 4
7598: PPUSH
7599: CALL_OW 74
7603: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterUnitsExceptArea ( SouthTerritory , [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7604: LD_ADDR_VAR 0 7
7608: PUSH
7609: LD_INT 23
7611: PPUSH
7612: LD_INT 22
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 59
7629: PUSH
7630: EMPTY
7631: LIST
7632: PUSH
7633: LD_INT 21
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 21
7645: PUSH
7646: LD_INT 2
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: EMPTY
7664: LIST
7665: PPUSH
7666: CALL_OW 71
7670: PPUSH
7671: LD_VAR 0 4
7675: PPUSH
7676: CALL_OW 74
7680: ST_TO_ADDR
// end ; if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7681: LD_VAR 0 4
7685: PPUSH
7686: LD_VAR 0 6
7690: PPUSH
7691: CALL_OW 296
7695: PUSH
7696: LD_INT 8
7698: PLUS
7699: PUSH
7700: LD_VAR 0 4
7704: PPUSH
7705: LD_VAR 0 7
7709: PPUSH
7710: CALL_OW 296
7714: LESS
7715: IFFALSE 7733
// begin ComAttackUnit ( i , target1 ) ;
7717: LD_VAR 0 4
7721: PPUSH
7722: LD_VAR 0 6
7726: PPUSH
7727: CALL_OW 115
// end else
7731: GO 7747
// begin ComAttackUnit ( i , target2 ) ;
7733: LD_VAR 0 4
7737: PPUSH
7738: LD_VAR 0 7
7742: PPUSH
7743: CALL_OW 115
// end ; end ;
7747: GO 7331
7749: POP
7750: POP
// until russianTanks = 0 ;
7751: LD_EXP 36
7755: PUSH
7756: LD_INT 0
7758: EQUAL
7759: IFFALSE 7314
// end ; end ;
7761: GO 7284
7763: POP
7764: POP
// end ;
7765: LD_VAR 0 3
7769: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
7770: LD_INT 0
7772: PPUSH
7773: PPUSH
7774: PPUSH
7775: PPUSH
7776: PPUSH
7777: PPUSH
7778: PPUSH
7779: PPUSH
7780: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7781: LD_ADDR_VAR 0 8
7785: PUSH
7786: LD_INT 22
7788: PUSH
7789: LD_VAR 0 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 21
7800: PUSH
7801: LD_INT 2
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: LD_INT 24
7810: PUSH
7811: LD_INT 660
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 3
7820: PUSH
7821: LD_INT 58
7823: PUSH
7824: EMPTY
7825: LIST
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: LD_INT 34
7832: PUSH
7833: LD_INT 43
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 34
7842: PUSH
7843: LD_INT 44
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 34
7852: PUSH
7853: LD_INT 46
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
7882: LD_ADDR_VAR 0 9
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 21
7901: PUSH
7902: LD_INT 2
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 3
7911: PUSH
7912: LD_INT 24
7914: PUSH
7915: LD_INT 660
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: PPUSH
7931: CALL_OW 69
7935: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7936: LD_ADDR_VAR 0 10
7940: PUSH
7941: LD_VAR 0 2
7945: PPUSH
7946: LD_INT 22
7948: PUSH
7949: LD_VAR 0 1
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: LD_INT 21
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: LD_INT 24
7973: PUSH
7974: LD_INT 1000
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: PPUSH
7990: CALL_OW 70
7994: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
7995: LD_ADDR_VAR 0 11
7999: PUSH
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_INT 22
8007: PUSH
8008: LD_VAR 0 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 21
8019: PUSH
8020: LD_INT 2
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 24
8029: PUSH
8030: LD_INT 1000
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 58
8039: PUSH
8040: EMPTY
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: PPUSH
8049: CALL_OW 70
8053: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8054: LD_ADDR_VAR 0 12
8058: PUSH
8059: EMPTY
8060: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8061: LD_ADDR_VAR 0 13
8065: PUSH
8066: LD_VAR 0 2
8070: PPUSH
8071: LD_INT 22
8073: PUSH
8074: LD_VAR 0 1
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_INT 25
8085: PUSH
8086: LD_INT 3
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PPUSH
8097: CALL_OW 70
8101: ST_TO_ADDR
// if damageVehicle_list > 0 then
8102: LD_VAR 0 9
8106: PUSH
8107: LD_INT 0
8109: GREATER
8110: IFFALSE 8131
// ComMoveXY ( damageVehicle_list , repX , repY ) ;
8112: LD_VAR 0 9
8116: PPUSH
8117: LD_VAR 0 3
8121: PPUSH
8122: LD_VAR 0 4
8126: PPUSH
8127: CALL_OW 111
// if vehicleNeedRepair_list > 0 then
8131: LD_VAR 0 10
8135: PUSH
8136: LD_INT 0
8138: GREATER
8139: IFFALSE 8241
// begin for i in vehicleNeedRepair_list do
8141: LD_ADDR_VAR 0 6
8145: PUSH
8146: LD_VAR 0 10
8150: PUSH
8151: FOR_IN
8152: IFFALSE 8239
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8154: LD_ADDR_VAR 0 12
8158: PUSH
8159: LD_VAR 0 12
8163: PUSH
8164: LD_VAR 0 6
8168: PPUSH
8169: CALL_OW 313
8173: ADD
8174: ST_TO_ADDR
// ComExitVehicle ( mechanicInside_list ) ;
8175: LD_VAR 0 12
8179: PPUSH
8180: CALL_OW 121
// wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// if mechanicInside_list > 0 then
8191: LD_VAR 0 12
8195: PUSH
8196: LD_INT 0
8198: GREATER
8199: IFFALSE 8219
// AddComRepairVehicle ( mechanicInside_list [ 1 ] , i ) ;
8201: LD_VAR 0 12
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PPUSH
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 189
// AddComEnterUnit ( mechanicInside_list [ 1 ] , i ) ;
8219: LD_VAR 0 12
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 6
8232: PPUSH
8233: CALL_OW 180
// end ;
8237: GO 8151
8239: POP
8240: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8241: LD_VAR 0 11
8245: PUSH
8246: LD_INT 0
8248: GREATER
8249: IFFALSE 8273
// AddComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8251: LD_VAR 0 13
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: LD_VAR 0 11
8264: PUSH
8265: LD_INT 1
8267: ARRAY
8268: PPUSH
8269: CALL_OW 180
// if vehicleOK_list > 0 and russianDamageTanks > 0 then
8273: LD_VAR 0 8
8277: PUSH
8278: LD_INT 0
8280: GREATER
8281: PUSH
8282: LD_EXP 37
8286: PUSH
8287: LD_INT 0
8289: GREATER
8290: AND
8291: IFFALSE 8443
// begin for i := 1 to vehicleOK_list do
8293: LD_ADDR_VAR 0 6
8297: PUSH
8298: DOUBLE
8299: LD_INT 1
8301: DEC
8302: ST_TO_ADDR
8303: LD_VAR 0 8
8307: PUSH
8308: FOR_TO
8309: IFFALSE 8441
// begin if i = [ 5 , 6 , 6 ] then
8311: LD_VAR 0 6
8315: PUSH
8316: LD_INT 5
8318: PUSH
8319: LD_INT 6
8321: PUSH
8322: LD_INT 6
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: EQUAL
8330: IFFALSE 8439
// begin for i in vehicleOK_list do
8332: LD_ADDR_VAR 0 6
8336: PUSH
8337: LD_VAR 0 8
8341: PUSH
8342: FOR_IN
8343: IFFALSE 8363
// russianTanks = russianTanks ^ i ;
8345: LD_ADDR_EXP 36
8349: PUSH
8350: LD_EXP 36
8354: PUSH
8355: LD_VAR 0 6
8359: ADD
8360: ST_TO_ADDR
8361: GO 8342
8363: POP
8364: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
8365: LD_ADDR_EXP 37
8369: PUSH
8370: LD_EXP 37
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL_OW 3
8382: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
8383: LD_ADDR_EXP 37
8387: PUSH
8388: LD_EXP 37
8392: PPUSH
8393: LD_INT 1
8395: PPUSH
8396: CALL_OW 3
8400: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
8401: LD_ADDR_EXP 37
8405: PUSH
8406: LD_EXP 37
8410: PPUSH
8411: LD_INT 1
8413: PPUSH
8414: CALL_OW 3
8418: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
8419: LD_ADDR_EXP 37
8423: PUSH
8424: LD_EXP 37
8428: PPUSH
8429: LD_INT 1
8431: PPUSH
8432: CALL_OW 3
8436: ST_TO_ADDR
// break ;
8437: GO 8441
// end ; end ;
8439: GO 8308
8441: POP
8442: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8443: LD_ADDR_VAR 0 6
8447: PUSH
8448: LD_VAR 0 2
8452: PPUSH
8453: LD_INT 22
8455: PUSH
8456: LD_VAR 0 1
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 25
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PPUSH
8479: CALL_OW 70
8483: NOT
8484: PUSH
8485: FOR_IN
8486: IFFALSE 8509
// ComMoveXY ( i , repX , repY ) ;
8488: LD_VAR 0 6
8492: PPUSH
8493: LD_VAR 0 3
8497: PPUSH
8498: LD_VAR 0 4
8502: PPUSH
8503: CALL_OW 111
8507: GO 8485
8509: POP
8510: POP
// end ;
8511: LD_VAR 0 5
8515: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8516: LD_INT 0
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
// enable ;
8522: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8523: LD_ADDR_VAR 0 7
8527: PUSH
8528: LD_VAR 0 3
8532: PPUSH
8533: CALL_OW 435
8537: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8538: LD_ADDR_VAR 0 6
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 34
8557: PUSH
8558: LD_VAR 0 2
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 69
8575: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8576: LD_VAR 0 6
8580: PUSH
8581: LD_INT 0
8583: GREATER
8584: PUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: CALL_OW 435
8594: AND
8595: PUSH
8596: LD_VAR 0 7
8600: PUSH
8601: LD_INT 0
8603: GREATER
8604: AND
8605: IFFALSE 8654
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8607: LD_VAR 0 6
8611: PUSH
8612: LD_INT 1
8614: ARRAY
8615: PPUSH
8616: LD_VAR 0 7
8620: PUSH
8621: LD_INT 1
8623: ARRAY
8624: PPUSH
8625: LD_VAR 0 7
8629: PUSH
8630: LD_INT 2
8632: ARRAY
8633: PPUSH
8634: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8638: LD_VAR 0 6
8642: PUSH
8643: LD_INT 1
8645: ARRAY
8646: PPUSH
8647: LD_INT 100
8649: PPUSH
8650: CALL_OW 240
// end ; end ;
8654: LD_VAR 0 4
8658: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8659: LD_INT 0
8661: PPUSH
8662: PPUSH
8663: PPUSH
8664: PPUSH
8665: PPUSH
8666: PPUSH
8667: PPUSH
8668: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8669: LD_ADDR_VAR 0 6
8673: PUSH
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 22
8681: PUSH
8682: LD_VAR 0 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 56
8693: PUSH
8694: EMPTY
8695: LIST
8696: PUSH
8697: LD_INT 24
8699: PUSH
8700: LD_INT 700
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 3
8709: PUSH
8710: LD_INT 60
8712: PUSH
8713: EMPTY
8714: LIST
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: LD_INT 25
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PUSH
8733: LD_INT 25
8735: PUSH
8736: LD_INT 5
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 25
8745: PUSH
8746: LD_INT 8
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 25
8755: PUSH
8756: LD_INT 9
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 70
8781: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8782: LD_ADDR_VAR 0 7
8786: PUSH
8787: LD_VAR 0 2
8791: PPUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 30
8806: PUSH
8807: LD_INT 32
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 58
8816: PUSH
8817: EMPTY
8818: LIST
8819: PUSH
8820: LD_INT 24
8822: PUSH
8823: LD_INT 251
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8841: LD_ADDR_VAR 0 9
8845: PUSH
8846: LD_VAR 0 2
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_VAR 0 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 2
8865: PUSH
8866: LD_INT 30
8868: PUSH
8869: LD_INT 4
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 30
8878: PUSH
8879: LD_INT 5
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 24
8893: PUSH
8894: LD_INT 251
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: PPUSH
8906: CALL_OW 70
8910: ST_TO_ADDR
// if barrackList > 0 then
8911: LD_VAR 0 9
8915: PUSH
8916: LD_INT 0
8918: GREATER
8919: IFFALSE 9067
// begin if turretList = 0 then
8921: LD_VAR 0 7
8925: PUSH
8926: LD_INT 0
8928: EQUAL
8929: IFFALSE 8971
// begin if soldiers_list > 0 then
8931: LD_VAR 0 6
8935: PUSH
8936: LD_INT 0
8938: GREATER
8939: IFFALSE 8969
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8941: LD_VAR 0 6
8945: PPUSH
8946: LD_VAR 0 9
8950: PUSH
8951: LD_INT 1
8953: PPUSH
8954: LD_VAR 0 9
8958: PPUSH
8959: CALL_OW 12
8963: ARRAY
8964: PPUSH
8965: CALL_OW 120
// end else
8969: GO 9067
// begin for i in barrackList do
8971: LD_ADDR_VAR 0 4
8975: PUSH
8976: LD_VAR 0 9
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9065
// begin insideUnits = UnitsInside ( i ) ;
8984: LD_ADDR_VAR 0 10
8988: PUSH
8989: LD_VAR 0 4
8993: PPUSH
8994: CALL_OW 313
8998: ST_TO_ADDR
// if insideUnits > 0 then
8999: LD_VAR 0 10
9003: PUSH
9004: LD_INT 0
9006: GREATER
9007: IFFALSE 9031
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9009: LD_VAR 0 10
9013: PUSH
9014: LD_INT 1
9016: ARRAY
9017: PPUSH
9018: LD_VAR 0 7
9022: PUSH
9023: LD_INT 1
9025: ARRAY
9026: PPUSH
9027: CALL_OW 120
// if soldiers_list > 0 then
9031: LD_VAR 0 6
9035: PUSH
9036: LD_INT 0
9038: GREATER
9039: IFFALSE 9063
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9041: LD_VAR 0 6
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: LD_VAR 0 7
9054: PUSH
9055: LD_INT 1
9057: ARRAY
9058: PPUSH
9059: CALL_OW 120
// end ;
9063: GO 8981
9065: POP
9066: POP
// end ; end ; end ;
9067: LD_VAR 0 3
9071: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_VAR 0 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 2
9098: PUSH
9099: LD_INT 30
9101: PUSH
9102: LD_INT 31
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 30
9111: PUSH
9112: LD_INT 32
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 30
9121: PUSH
9122: LD_INT 33
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 30
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 30
9141: PUSH
9142: LD_INT 5
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PPUSH
9161: CALL_OW 69
9165: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9166: LD_ADDR_VAR 0 7
9170: PUSH
9171: LD_INT 22
9173: PUSH
9174: LD_VAR 0 2
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 21
9185: PUSH
9186: LD_INT 3
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 58
9195: PUSH
9196: EMPTY
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PPUSH
9204: CALL_OW 69
9208: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9209: LD_VAR 0 6
9213: PUSH
9214: LD_INT 0
9216: GREATER
9217: PUSH
9218: LD_VAR 0 7
9222: PUSH
9223: LD_INT 0
9225: GREATER
9226: AND
9227: IFFALSE 9297
// begin for i in turretsList do
9229: LD_ADDR_VAR 0 4
9233: PUSH
9234: LD_VAR 0 6
9238: PUSH
9239: FOR_IN
9240: IFFALSE 9295
// begin for j in enemyBuildings do
9242: LD_ADDR_VAR 0 5
9246: PUSH
9247: LD_VAR 0 7
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9291
// begin if GetDistUnits ( i , j ) < 20 then
9255: LD_VAR 0 4
9259: PPUSH
9260: LD_VAR 0 5
9264: PPUSH
9265: CALL_OW 296
9269: PUSH
9270: LD_INT 20
9272: LESS
9273: IFFALSE 9289
// begin ComAttackUnit ( i , j ) ;
9275: LD_VAR 0 4
9279: PPUSH
9280: LD_VAR 0 5
9284: PPUSH
9285: CALL_OW 115
// end ; end ;
9289: GO 9252
9291: POP
9292: POP
// end ;
9293: GO 9239
9295: POP
9296: POP
// end ; end ;
9297: LD_VAR 0 3
9301: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
9308: PPUSH
9309: PPUSH
9310: PPUSH
9311: PPUSH
9312: PPUSH
9313: PPUSH
9314: PPUSH
// for i = 1 to medicCount do
9315: LD_ADDR_VAR 0 14
9319: PUSH
9320: DOUBLE
9321: LD_INT 1
9323: DEC
9324: ST_TO_ADDR
9325: LD_VAR 0 7
9329: PUSH
9330: FOR_TO
9331: IFFALSE 9413
// begin uc_side = side ;
9333: LD_ADDR_OWVAR 20
9337: PUSH
9338: LD_VAR 0 1
9342: ST_TO_ADDR
// uc_nation = nation ;
9343: LD_ADDR_OWVAR 21
9347: PUSH
9348: LD_VAR 0 2
9352: ST_TO_ADDR
// hc_name =  ;
9353: LD_ADDR_OWVAR 26
9357: PUSH
9358: LD_STRING 
9360: ST_TO_ADDR
// hc_gallery =  ;
9361: LD_ADDR_OWVAR 33
9365: PUSH
9366: LD_STRING 
9368: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9369: LD_INT 0
9371: PPUSH
9372: LD_INT 4
9374: PPUSH
9375: LD_VAR 0 8
9379: PPUSH
9380: CALL_OW 380
// un = CreateHuman ;
9384: LD_ADDR_VAR 0 16
9388: PUSH
9389: CALL_OW 44
9393: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9394: LD_VAR 0 16
9398: PPUSH
9399: LD_VAR 0 9
9403: PPUSH
9404: LD_INT 0
9406: PPUSH
9407: CALL_OW 49
// end ;
9411: GO 9330
9413: POP
9414: POP
// for i = 1 to soldierCount do
9415: LD_ADDR_VAR 0 14
9419: PUSH
9420: DOUBLE
9421: LD_INT 1
9423: DEC
9424: ST_TO_ADDR
9425: LD_VAR 0 3
9429: PUSH
9430: FOR_TO
9431: IFFALSE 9513
// begin uc_side = side ;
9433: LD_ADDR_OWVAR 20
9437: PUSH
9438: LD_VAR 0 1
9442: ST_TO_ADDR
// uc_nation = nation ;
9443: LD_ADDR_OWVAR 21
9447: PUSH
9448: LD_VAR 0 2
9452: ST_TO_ADDR
// hc_name =  ;
9453: LD_ADDR_OWVAR 26
9457: PUSH
9458: LD_STRING 
9460: ST_TO_ADDR
// hc_gallery =  ;
9461: LD_ADDR_OWVAR 33
9465: PUSH
9466: LD_STRING 
9468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9469: LD_INT 0
9471: PPUSH
9472: LD_INT 1
9474: PPUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: CALL_OW 380
// un = CreateHuman ;
9484: LD_ADDR_VAR 0 16
9488: PUSH
9489: CALL_OW 44
9493: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9494: LD_VAR 0 16
9498: PPUSH
9499: LD_VAR 0 9
9503: PPUSH
9504: LD_INT 0
9506: PPUSH
9507: CALL_OW 49
// end ;
9511: GO 9430
9513: POP
9514: POP
// for i = 1 to sniperCount do
9515: LD_ADDR_VAR 0 14
9519: PUSH
9520: DOUBLE
9521: LD_INT 1
9523: DEC
9524: ST_TO_ADDR
9525: LD_VAR 0 4
9529: PUSH
9530: FOR_TO
9531: IFFALSE 9613
// begin uc_side = side ;
9533: LD_ADDR_OWVAR 20
9537: PUSH
9538: LD_VAR 0 1
9542: ST_TO_ADDR
// uc_nation = nation ;
9543: LD_ADDR_OWVAR 21
9547: PUSH
9548: LD_VAR 0 2
9552: ST_TO_ADDR
// hc_name =  ;
9553: LD_ADDR_OWVAR 26
9557: PUSH
9558: LD_STRING 
9560: ST_TO_ADDR
// hc_gallery =  ;
9561: LD_ADDR_OWVAR 33
9565: PUSH
9566: LD_STRING 
9568: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9569: LD_INT 0
9571: PPUSH
9572: LD_INT 5
9574: PPUSH
9575: LD_VAR 0 8
9579: PPUSH
9580: CALL_OW 380
// un = CreateHuman ;
9584: LD_ADDR_VAR 0 16
9588: PUSH
9589: CALL_OW 44
9593: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9594: LD_VAR 0 16
9598: PPUSH
9599: LD_VAR 0 9
9603: PPUSH
9604: LD_INT 0
9606: PPUSH
9607: CALL_OW 49
// end ;
9611: GO 9530
9613: POP
9614: POP
// for i = 1 to bazookCount do
9615: LD_ADDR_VAR 0 14
9619: PUSH
9620: DOUBLE
9621: LD_INT 1
9623: DEC
9624: ST_TO_ADDR
9625: LD_VAR 0 5
9629: PUSH
9630: FOR_TO
9631: IFFALSE 9713
// begin uc_side = side ;
9633: LD_ADDR_OWVAR 20
9637: PUSH
9638: LD_VAR 0 1
9642: ST_TO_ADDR
// uc_nation = nation ;
9643: LD_ADDR_OWVAR 21
9647: PUSH
9648: LD_VAR 0 2
9652: ST_TO_ADDR
// hc_name =  ;
9653: LD_ADDR_OWVAR 26
9657: PUSH
9658: LD_STRING 
9660: ST_TO_ADDR
// hc_gallery =  ;
9661: LD_ADDR_OWVAR 33
9665: PUSH
9666: LD_STRING 
9668: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9669: LD_INT 0
9671: PPUSH
9672: LD_INT 9
9674: PPUSH
9675: LD_VAR 0 8
9679: PPUSH
9680: CALL_OW 380
// un = CreateHuman ;
9684: LD_ADDR_VAR 0 16
9688: PUSH
9689: CALL_OW 44
9693: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9694: LD_VAR 0 16
9698: PPUSH
9699: LD_VAR 0 9
9703: PPUSH
9704: LD_INT 0
9706: PPUSH
9707: CALL_OW 49
// end ;
9711: GO 9630
9713: POP
9714: POP
// for i = 1 to mortalCount do
9715: LD_ADDR_VAR 0 14
9719: PUSH
9720: DOUBLE
9721: LD_INT 1
9723: DEC
9724: ST_TO_ADDR
9725: LD_VAR 0 6
9729: PUSH
9730: FOR_TO
9731: IFFALSE 9813
// begin uc_side = side ;
9733: LD_ADDR_OWVAR 20
9737: PUSH
9738: LD_VAR 0 1
9742: ST_TO_ADDR
// uc_nation = nation ;
9743: LD_ADDR_OWVAR 21
9747: PUSH
9748: LD_VAR 0 2
9752: ST_TO_ADDR
// hc_name =  ;
9753: LD_ADDR_OWVAR 26
9757: PUSH
9758: LD_STRING 
9760: ST_TO_ADDR
// hc_gallery =  ;
9761: LD_ADDR_OWVAR 33
9765: PUSH
9766: LD_STRING 
9768: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
9769: LD_INT 0
9771: PPUSH
9772: LD_INT 8
9774: PPUSH
9775: LD_VAR 0 8
9779: PPUSH
9780: CALL_OW 380
// un = CreateHuman ;
9784: LD_ADDR_VAR 0 16
9788: PUSH
9789: CALL_OW 44
9793: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9794: LD_VAR 0 16
9798: PPUSH
9799: LD_VAR 0 9
9803: PPUSH
9804: LD_INT 0
9806: PPUSH
9807: CALL_OW 49
// end ;
9811: GO 9730
9813: POP
9814: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9815: LD_ADDR_VAR 0 19
9819: PUSH
9820: LD_INT 22
9822: PUSH
9823: LD_VAR 0 1
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: LD_INT 25
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: EMPTY
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 25
9847: PUSH
9848: LD_INT 5
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 25
9857: PUSH
9858: LD_INT 8
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 25
9867: PUSH
9868: LD_INT 9
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PPUSH
9886: CALL_OW 69
9890: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
9891: LD_ADDR_VAR 0 18
9895: PUSH
9896: LD_INT 22
9898: PUSH
9899: LD_VAR 0 1
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 25
9910: PUSH
9911: LD_INT 4
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PPUSH
9922: CALL_OW 69
9926: ST_TO_ADDR
// for i in medic_list do
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_VAR 0 18
9936: PUSH
9937: FOR_IN
9938: IFFALSE 9956
// ComMoveToArea ( i , healArea ) ;
9940: LD_VAR 0 14
9944: PPUSH
9945: LD_VAR 0 10
9949: PPUSH
9950: CALL_OW 113
9954: GO 9937
9956: POP
9957: POP
// if strategy = 1 then
9958: LD_VAR 0 12
9962: PUSH
9963: LD_INT 1
9965: EQUAL
9966: IFFALSE 10671
// begin repeat wait ( 0 0$3 ) ;
9968: LD_INT 105
9970: PPUSH
9971: CALL_OW 67
// for i in soldiersOK_list do
9975: LD_ADDR_VAR 0 14
9979: PUSH
9980: LD_VAR 0 19
9984: PUSH
9985: FOR_IN
9986: IFFALSE 10020
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
9988: LD_VAR 0 14
9992: PPUSH
9993: LD_INT 80
9995: PPUSH
9996: LD_INT 109
9998: PPUSH
9999: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10003: LD_VAR 0 14
10007: PPUSH
10008: LD_INT 39
10010: PPUSH
10011: LD_INT 49
10013: PPUSH
10014: CALL_OW 174
// end ;
10018: GO 9985
10020: POP
10021: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10022: LD_INT 15
10024: PPUSH
10025: LD_INT 22
10027: PUSH
10028: LD_VAR 0 1
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 70
10041: PUSH
10042: LD_INT 0
10044: GREATER
10045: IFFALSE 9968
// repeat wait ( 0 0$1 ) ;
10047: LD_INT 35
10049: PPUSH
10050: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10054: LD_ADDR_VAR 0 17
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_VAR 0 1
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: LD_INT 3
10076: PUSH
10077: LD_INT 24
10079: PUSH
10080: LD_INT 550
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 24
10093: PUSH
10094: LD_INT 250
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PPUSH
10110: CALL_OW 69
10114: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10115: LD_ADDR_VAR 0 19
10119: PUSH
10120: LD_INT 22
10122: PUSH
10123: LD_VAR 0 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 2
10134: PUSH
10135: LD_INT 25
10137: PUSH
10138: LD_INT 1
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 25
10147: PUSH
10148: LD_INT 5
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 25
10157: PUSH
10158: LD_INT 8
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 25
10167: PUSH
10168: LD_INT 9
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 24
10184: PUSH
10185: LD_INT 1000
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: PPUSH
10197: CALL_OW 69
10201: ST_TO_ADDR
// if medicCount > 0 then
10202: LD_VAR 0 7
10206: PUSH
10207: LD_INT 0
10209: GREATER
10210: IFFALSE 10284
// begin if damageUnit_list > 0 then
10212: LD_VAR 0 17
10216: PUSH
10217: LD_INT 0
10219: GREATER
10220: IFFALSE 10284
// begin for i in damageUnit_list do
10222: LD_ADDR_VAR 0 14
10226: PUSH
10227: LD_VAR 0 17
10231: PUSH
10232: FOR_IN
10233: IFFALSE 10282
// begin ComMoveToArea ( i , healArea ) ;
10235: LD_VAR 0 14
10239: PPUSH
10240: LD_VAR 0 10
10244: PPUSH
10245: CALL_OW 113
// for j in medic_list do
10249: LD_ADDR_VAR 0 15
10253: PUSH
10254: LD_VAR 0 18
10258: PUSH
10259: FOR_IN
10260: IFFALSE 10278
// AddComHeal ( j , i ) ;
10262: LD_VAR 0 15
10266: PPUSH
10267: LD_VAR 0 14
10271: PPUSH
10272: CALL_OW 188
10276: GO 10259
10278: POP
10279: POP
// end ;
10280: GO 10232
10282: POP
10283: POP
// end ; end ; for i in soldiersOK_list do
10284: LD_ADDR_VAR 0 14
10288: PUSH
10289: LD_VAR 0 19
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10471
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10297: LD_ADDR_VAR 0 22
10301: PUSH
10302: LD_INT 22
10304: PUSH
10305: LD_VAR 0 11
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PPUSH
10314: CALL_OW 69
10318: PPUSH
10319: LD_VAR 0 14
10323: PPUSH
10324: CALL_OW 74
10328: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10329: LD_ADDR_VAR 0 23
10333: PUSH
10334: LD_INT 22
10336: PUSH
10337: LD_VAR 0 11
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 59
10351: PUSH
10352: EMPTY
10353: LIST
10354: PUSH
10355: LD_INT 21
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: PPUSH
10388: CALL_OW 69
10392: PPUSH
10393: LD_VAR 0 14
10397: PPUSH
10398: CALL_OW 74
10402: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10403: LD_VAR 0 14
10407: PPUSH
10408: LD_VAR 0 22
10412: PPUSH
10413: CALL_OW 296
10417: PUSH
10418: LD_INT 8
10420: PLUS
10421: PUSH
10422: LD_VAR 0 14
10426: PPUSH
10427: LD_VAR 0 23
10431: PPUSH
10432: CALL_OW 296
10436: LESS
10437: IFFALSE 10455
// begin ComAttackUnit ( i , target1 ) ;
10439: LD_VAR 0 14
10443: PPUSH
10444: LD_VAR 0 22
10448: PPUSH
10449: CALL_OW 115
// end else
10453: GO 10469
// begin ComAttackUnit ( i , target2 ) ;
10455: LD_VAR 0 14
10459: PPUSH
10460: LD_VAR 0 23
10464: PPUSH
10465: CALL_OW 115
// end ; end ;
10469: GO 10294
10471: POP
10472: POP
// for i in soldiersOK_list do
10473: LD_ADDR_VAR 0 14
10477: PUSH
10478: LD_VAR 0 19
10482: PUSH
10483: FOR_IN
10484: IFFALSE 10660
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10486: LD_ADDR_VAR 0 22
10490: PUSH
10491: LD_INT 22
10493: PUSH
10494: LD_VAR 0 11
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PPUSH
10503: CALL_OW 69
10507: PPUSH
10508: LD_VAR 0 14
10512: PPUSH
10513: CALL_OW 74
10517: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10518: LD_ADDR_VAR 0 23
10522: PUSH
10523: LD_INT 22
10525: PUSH
10526: LD_VAR 0 11
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: LD_INT 59
10540: PUSH
10541: EMPTY
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 21
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: EMPTY
10575: LIST
10576: PPUSH
10577: CALL_OW 69
10581: PPUSH
10582: LD_VAR 0 14
10586: PPUSH
10587: CALL_OW 74
10591: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10592: LD_VAR 0 14
10596: PPUSH
10597: LD_VAR 0 22
10601: PPUSH
10602: CALL_OW 296
10606: PUSH
10607: LD_INT 8
10609: PLUS
10610: PUSH
10611: LD_VAR 0 14
10615: PPUSH
10616: LD_VAR 0 23
10620: PPUSH
10621: CALL_OW 296
10625: LESS
10626: IFFALSE 10644
// begin ComAttackUnit ( i , target1 ) ;
10628: LD_VAR 0 14
10632: PPUSH
10633: LD_VAR 0 22
10637: PPUSH
10638: CALL_OW 115
// end else
10642: GO 10658
// begin ComAttackUnit ( i , target2 ) ;
10644: LD_VAR 0 14
10648: PPUSH
10649: LD_VAR 0 23
10653: PPUSH
10654: CALL_OW 115
// end ; end ;
10658: GO 10483
10660: POP
10661: POP
// until soldiersOK_list = [ ] ;
10662: LD_VAR 0 19
10666: PUSH
10667: EMPTY
10668: EQUAL
10669: IFFALSE 10047
// end ; if strategy = 2 then
10671: LD_VAR 0 12
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: IFFALSE 11384
// begin repeat wait ( 0 0$1 ) ;
10681: LD_INT 35
10683: PPUSH
10684: CALL_OW 67
// for i in soldiersOK_list do
10688: LD_ADDR_VAR 0 14
10692: PUSH
10693: LD_VAR 0 19
10697: PUSH
10698: FOR_IN
10699: IFFALSE 10733
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10701: LD_VAR 0 14
10705: PPUSH
10706: LD_INT 117
10708: PPUSH
10709: LD_INT 97
10711: PPUSH
10712: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10716: LD_VAR 0 14
10720: PPUSH
10721: LD_INT 94
10723: PPUSH
10724: LD_INT 50
10726: PPUSH
10727: CALL_OW 174
// end ;
10731: GO 10698
10733: POP
10734: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
10735: LD_INT 16
10737: PPUSH
10738: LD_INT 22
10740: PUSH
10741: LD_VAR 0 1
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PPUSH
10750: CALL_OW 70
10754: PUSH
10755: LD_INT 0
10757: GREATER
10758: IFFALSE 10681
// repeat wait ( 0 0$3 ) ;
10760: LD_INT 105
10762: PPUSH
10763: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10767: LD_ADDR_VAR 0 17
10771: PUSH
10772: LD_INT 22
10774: PUSH
10775: LD_VAR 0 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: LD_INT 3
10789: PUSH
10790: LD_INT 24
10792: PUSH
10793: LD_INT 550
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 24
10806: PUSH
10807: LD_INT 250
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 69
10827: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10828: LD_ADDR_VAR 0 19
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_VAR 0 1
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 2
10847: PUSH
10848: LD_INT 25
10850: PUSH
10851: LD_INT 1
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 5
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 8
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 9
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 24
10897: PUSH
10898: LD_INT 1000
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: LIST
10909: PPUSH
10910: CALL_OW 69
10914: ST_TO_ADDR
// if medicCount > 0 then
10915: LD_VAR 0 7
10919: PUSH
10920: LD_INT 0
10922: GREATER
10923: IFFALSE 10997
// begin if damageUnit_list > 0 then
10925: LD_VAR 0 17
10929: PUSH
10930: LD_INT 0
10932: GREATER
10933: IFFALSE 10997
// begin for i in damageUnit_list do
10935: LD_ADDR_VAR 0 14
10939: PUSH
10940: LD_VAR 0 17
10944: PUSH
10945: FOR_IN
10946: IFFALSE 10995
// begin ComMoveToArea ( i , healArea ) ;
10948: LD_VAR 0 14
10952: PPUSH
10953: LD_VAR 0 10
10957: PPUSH
10958: CALL_OW 113
// for j in medic_list do
10962: LD_ADDR_VAR 0 15
10966: PUSH
10967: LD_VAR 0 18
10971: PUSH
10972: FOR_IN
10973: IFFALSE 10991
// AddComHeal ( j , i ) ;
10975: LD_VAR 0 15
10979: PPUSH
10980: LD_VAR 0 14
10984: PPUSH
10985: CALL_OW 188
10989: GO 10972
10991: POP
10992: POP
// end ;
10993: GO 10945
10995: POP
10996: POP
// end ; end ; for i in soldiersOK_list do
10997: LD_ADDR_VAR 0 14
11001: PUSH
11002: LD_VAR 0 19
11006: PUSH
11007: FOR_IN
11008: IFFALSE 11184
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11010: LD_ADDR_VAR 0 22
11014: PUSH
11015: LD_INT 22
11017: PUSH
11018: LD_VAR 0 11
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: PPUSH
11032: LD_VAR 0 14
11036: PPUSH
11037: CALL_OW 74
11041: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11042: LD_ADDR_VAR 0 23
11046: PUSH
11047: LD_INT 22
11049: PUSH
11050: LD_VAR 0 11
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 2
11061: PUSH
11062: LD_INT 59
11064: PUSH
11065: EMPTY
11066: LIST
11067: PUSH
11068: LD_INT 21
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: PPUSH
11101: CALL_OW 69
11105: PPUSH
11106: LD_VAR 0 14
11110: PPUSH
11111: CALL_OW 74
11115: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11116: LD_VAR 0 14
11120: PPUSH
11121: LD_VAR 0 22
11125: PPUSH
11126: CALL_OW 296
11130: PUSH
11131: LD_INT 8
11133: PLUS
11134: PUSH
11135: LD_VAR 0 14
11139: PPUSH
11140: LD_VAR 0 23
11144: PPUSH
11145: CALL_OW 296
11149: LESS
11150: IFFALSE 11168
// begin ComAttackUnit ( i , target1 ) ;
11152: LD_VAR 0 14
11156: PPUSH
11157: LD_VAR 0 22
11161: PPUSH
11162: CALL_OW 115
// end else
11166: GO 11182
// begin ComAttackUnit ( i , target2 ) ;
11168: LD_VAR 0 14
11172: PPUSH
11173: LD_VAR 0 23
11177: PPUSH
11178: CALL_OW 115
// end ; end ;
11182: GO 11007
11184: POP
11185: POP
// for i in soldiersOK_list do
11186: LD_ADDR_VAR 0 14
11190: PUSH
11191: LD_VAR 0 19
11195: PUSH
11196: FOR_IN
11197: IFFALSE 11373
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11199: LD_ADDR_VAR 0 22
11203: PUSH
11204: LD_INT 22
11206: PUSH
11207: LD_VAR 0 11
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PPUSH
11216: CALL_OW 69
11220: PPUSH
11221: LD_VAR 0 14
11225: PPUSH
11226: CALL_OW 74
11230: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11231: LD_ADDR_VAR 0 23
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_VAR 0 11
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 59
11253: PUSH
11254: EMPTY
11255: LIST
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PPUSH
11295: LD_VAR 0 14
11299: PPUSH
11300: CALL_OW 74
11304: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11305: LD_VAR 0 14
11309: PPUSH
11310: LD_VAR 0 22
11314: PPUSH
11315: CALL_OW 296
11319: PUSH
11320: LD_INT 8
11322: PLUS
11323: PUSH
11324: LD_VAR 0 14
11328: PPUSH
11329: LD_VAR 0 23
11333: PPUSH
11334: CALL_OW 296
11338: LESS
11339: IFFALSE 11357
// begin ComAttackUnit ( i , target1 ) ;
11341: LD_VAR 0 14
11345: PPUSH
11346: LD_VAR 0 22
11350: PPUSH
11351: CALL_OW 115
// end else
11355: GO 11371
// begin ComAttackUnit ( i , target2 ) ;
11357: LD_VAR 0 14
11361: PPUSH
11362: LD_VAR 0 23
11366: PPUSH
11367: CALL_OW 115
// end ; end ;
11371: GO 11196
11373: POP
11374: POP
// until soldiersOK_list = [ ] ;
11375: LD_VAR 0 19
11379: PUSH
11380: EMPTY
11381: EQUAL
11382: IFFALSE 10760
// end ; end ; end_of_file
11384: LD_VAR 0 13
11388: RET
// every 0 0$01 do
11389: GO 11391
11391: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 25
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 69
11420: PUSH
11421: LD_INT 0
11423: EQUAL
11424: IFFALSE 11438
// SetClass ( JMM , 2 ) ;
11426: LD_EXP 1
11430: PPUSH
11431: LD_INT 2
11433: PPUSH
11434: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11438: LD_STRING M1
11440: PPUSH
11441: CALL_OW 337
// case difficulty of 1 :
11445: LD_OWVAR 67
11449: PUSH
11450: LD_INT 1
11452: DOUBLE
11453: EQUAL
11454: IFTRUE 11458
11456: GO 11468
11458: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11459: LD_STRING M1-1
11461: PPUSH
11462: CALL_OW 337
11466: GO 11505
11468: LD_INT 2
11470: DOUBLE
11471: EQUAL
11472: IFTRUE 11476
11474: GO 11486
11476: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11477: LD_STRING M1-2
11479: PPUSH
11480: CALL_OW 337
11484: GO 11505
11486: LD_INT 3
11488: DOUBLE
11489: EQUAL
11490: IFTRUE 11494
11492: GO 11504
11494: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11495: LD_STRING M1-3
11497: PPUSH
11498: CALL_OW 337
11502: GO 11505
11504: POP
// ChangeMissionObjectives ( M1cont ) ;
11505: LD_STRING M1cont
11507: PPUSH
11508: CALL_OW 337
// SaveForQuickRestart ;
11512: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11516: LD_INT 350
11518: PPUSH
11519: LD_INT 875
11521: PPUSH
11522: CALL_OW 12
11526: PPUSH
11527: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11531: LD_INT 5
11533: PPUSH
11534: LD_INT 4
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 55
// end ;
11544: END
// every 0 0$1 trigger firstCrateSpawn do
11545: LD_EXP 41
11549: IFFALSE 11888
11551: GO 11553
11553: DISABLE
// begin if IsOk ( Lisa ) then
11554: LD_EXP 2
11558: PPUSH
11559: CALL_OW 302
11563: IFFALSE 11579
// Say ( Lisa , DR0-Lisa-1 ) else
11565: LD_EXP 2
11569: PPUSH
11570: LD_STRING DR0-Lisa-1
11572: PPUSH
11573: CALL_OW 88
11577: GO 11713
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11579: LD_INT 22
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 21
11591: PUSH
11592: LD_INT 1
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 26
11601: PUSH
11602: LD_INT 1
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: LD_INT 25
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 25
11624: PUSH
11625: LD_INT 2
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 25
11634: PUSH
11635: LD_INT 3
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 25
11644: PUSH
11645: LD_INT 4
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 69
11669: PUSH
11670: LD_EXP 1
11674: PUSH
11675: LD_EXP 8
11679: PUSH
11680: LD_EXP 5
11684: PUSH
11685: LD_EXP 6
11689: PUSH
11690: LD_EXP 7
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: DIFF
11702: PPUSH
11703: LD_STRING DR0-Sol1-1
11705: PPUSH
11706: LD_STRING DR0-Sol1-1
11708: PPUSH
11709: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11713: LD_INT 22
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 21
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 26
11735: PUSH
11736: LD_INT 1
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: LD_INT 25
11748: PUSH
11749: LD_INT 1
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 25
11758: PUSH
11759: LD_INT 2
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 25
11768: PUSH
11769: LD_INT 3
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 25
11778: PUSH
11779: LD_INT 4
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: PPUSH
11799: CALL_OW 69
11803: PUSH
11804: LD_EXP 1
11808: PUSH
11809: LD_EXP 8
11813: PUSH
11814: LD_EXP 5
11818: PUSH
11819: LD_EXP 2
11823: PUSH
11824: LD_EXP 6
11828: PUSH
11829: LD_EXP 7
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: DIFF
11842: PPUSH
11843: LD_STRING DR0-Sol2-1
11845: PPUSH
11846: LD_STRING DR0-Sol2-1
11848: PPUSH
11849: CALL 5256 0 3
// if IsOk ( Cyrus ) then
11853: LD_EXP 4
11857: PPUSH
11858: CALL_OW 302
11862: IFFALSE 11876
// Say ( Cyrus , DR0-Cyrus-1 ) ;
11864: LD_EXP 4
11868: PPUSH
11869: LD_STRING DR0-Cyrus-1
11871: PPUSH
11872: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
11876: LD_EXP 1
11880: PPUSH
11881: LD_STRING DR0-JMM-1
11883: PPUSH
11884: CALL_OW 88
// end ;
11888: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
11889: LD_EXP 5
11893: PPUSH
11894: CALL_OW 302
11898: PUSH
11899: LD_INT 22
11901: PUSH
11902: LD_INT 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 25
11911: PUSH
11912: LD_INT 16
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: PUSH
11928: LD_INT 0
11930: GREATER
11931: AND
11932: IFFALSE 12210
11934: GO 11936
11936: DISABLE
// begin DialogueOn ;
11937: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
11941: LD_EXP 5
11945: PPUSH
11946: LD_STRING D10-Frank-1
11948: PPUSH
11949: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
11953: LD_INT 22
11955: PUSH
11956: LD_INT 1
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 21
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 25
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 25
11988: PUSH
11989: LD_INT 2
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 25
11998: PUSH
11999: LD_INT 3
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 25
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PPUSH
12028: CALL_OW 69
12032: PUSH
12033: LD_EXP 1
12037: PUSH
12038: LD_EXP 5
12042: PUSH
12043: LD_EXP 2
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: DIFF
12053: PPUSH
12054: LD_STRING D10-Sol1-1
12056: PPUSH
12057: LD_STRING D10-FSol1-1
12059: PPUSH
12060: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12064: LD_EXP 5
12068: PPUSH
12069: LD_STRING D10-Frank-2
12071: PPUSH
12072: CALL_OW 88
// if IsOK ( Lisa ) then
12076: LD_EXP 2
12080: PPUSH
12081: CALL_OW 302
12085: IFFALSE 12101
// begin Say ( Lisa , D10-Lisa-2 ) ;
12087: LD_EXP 2
12091: PPUSH
12092: LD_STRING D10-Lisa-2
12094: PPUSH
12095: CALL_OW 88
// end else
12099: GO 12206
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12101: LD_INT 22
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 21
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: PUSH
12124: LD_INT 25
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 25
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 25
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 25
12156: PUSH
12157: LD_INT 4
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PPUSH
12176: CALL_OW 69
12180: PUSH
12181: LD_EXP 1
12185: PUSH
12186: LD_EXP 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: DIFF
12195: PPUSH
12196: LD_STRING D10-Sol1-2
12198: PPUSH
12199: LD_STRING D10-FSol1-2
12201: PPUSH
12202: CALL 5256 0 3
// end ; DialogueOff ;
12206: CALL_OW 7
// end ;
12210: END
// every 10 10$30 do
12211: GO 12213
12213: DISABLE
// begin HarrisonSupport ;
12214: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12218: LD_EXP 17
12222: PPUSH
12223: CALL_OW 310
12227: PPUSH
12228: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12232: LD_EXP 17
12236: PPUSH
12237: LD_STRING DEng-Eng1-1
12239: PPUSH
12240: CALL_OW 88
// wait ( 1 1$0 ) ;
12244: LD_INT 2100
12246: PPUSH
12247: CALL_OW 67
// DialogueOn ;
12251: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12255: LD_EXP 14
12259: PPUSH
12260: LD_STRING DRem-Har-1
12262: PPUSH
12263: CALL_OW 94
// if contactWithRussian = 1 then
12267: LD_EXP 22
12271: PUSH
12272: LD_INT 1
12274: EQUAL
12275: IFFALSE 12291
// begin Say ( JMM , DRem-JMM-1 ) ;
12277: LD_EXP 1
12281: PPUSH
12282: LD_STRING DRem-JMM-1
12284: PPUSH
12285: CALL_OW 88
// end else
12289: GO 12303
// begin Say ( JMM , DRem-JMM-1a ) ;
12291: LD_EXP 1
12295: PPUSH
12296: LD_STRING DRem-JMM-1a
12298: PPUSH
12299: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12303: LD_EXP 14
12307: PPUSH
12308: LD_STRING DRem-Har-2
12310: PPUSH
12311: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12315: LD_STRING DenisInDelta
12317: PPUSH
12318: LD_INT 0
12320: PPUSH
12321: CALL_OW 30
12325: PUSH
12326: LD_INT 1
12328: EQUAL
12329: IFFALSE 12345
// begin Say ( JMM , DRem-JMM-2 ) ;
12331: LD_EXP 1
12335: PPUSH
12336: LD_STRING DRem-JMM-2
12338: PPUSH
12339: CALL_OW 88
// end else
12343: GO 12357
// begin Say ( JMM , DRem-JMM-2a ) ;
12345: LD_EXP 1
12349: PPUSH
12350: LD_STRING DRem-JMM-2a
12352: PPUSH
12353: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12357: LD_EXP 14
12361: PPUSH
12362: LD_STRING DRem-Har-3
12364: PPUSH
12365: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12369: LD_EXP 1
12373: PPUSH
12374: LD_STRING DRem-JMM-3
12376: PPUSH
12377: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12381: LD_EXP 14
12385: PPUSH
12386: LD_STRING DRem-Har-4
12388: PPUSH
12389: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12393: LD_STRING DenisInDelta
12395: PPUSH
12396: LD_INT 0
12398: PPUSH
12399: CALL_OW 30
12403: PUSH
12404: LD_INT 1
12406: EQUAL
12407: IFFALSE 12435
// begin Say ( JMM , DRem-JMM-4 ) ;
12409: LD_EXP 1
12413: PPUSH
12414: LD_STRING DRem-JMM-4
12416: PPUSH
12417: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12421: LD_EXP 14
12425: PPUSH
12426: LD_STRING DRem-Har-5
12428: PPUSH
12429: CALL_OW 94
// end else
12433: GO 12468
// begin SetRestrict ( 36 , 1 , true ) ;
12435: LD_INT 36
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12448: LD_INT 15
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12461: LD_STRING MR
12463: PPUSH
12464: CALL_OW 337
// end ; DialogueOff ;
12468: CALL_OW 7
// end ;
12472: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12473: LD_STRING DenisInDelta
12475: PPUSH
12476: LD_INT 0
12478: PPUSH
12479: CALL_OW 30
12483: PUSH
12484: LD_INT 1
12486: EQUAL
12487: IFFALSE 12618
12489: GO 12491
12491: DISABLE
// begin PrepareDenis ;
12492: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
12496: LD_EXP 9
12500: PPUSH
12501: CALL_OW 87
// DialogueOn ;
12505: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12509: LD_EXP 9
12513: PPUSH
12514: LD_STRING DDen-Den-1
12516: PPUSH
12517: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12521: LD_EXP 1
12525: PPUSH
12526: LD_STRING DDen-JMM-1
12528: PPUSH
12529: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12533: LD_EXP 9
12537: PPUSH
12538: LD_STRING DDen-Den-2
12540: PPUSH
12541: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12545: LD_EXP 1
12549: PPUSH
12550: LD_STRING DDen-JMM-2
12552: PPUSH
12553: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12557: LD_EXP 9
12561: PPUSH
12562: LD_STRING DDen-Den-3
12564: PPUSH
12565: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12569: LD_EXP 1
12573: PPUSH
12574: LD_STRING DDen-JMM-3
12576: PPUSH
12577: CALL_OW 88
// DialogueOff ;
12581: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12585: LD_INT 36
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12598: LD_INT 15
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12611: LD_STRING MR
12613: PPUSH
12614: CALL_OW 337
// end ;
12618: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12619: CALL 12664 0 0
12623: PUSH
12624: LD_EXP 9
12628: PPUSH
12629: CALL_OW 302
12633: AND
12634: IFFALSE 12663
12636: GO 12638
12638: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12639: LD_EXP 9
12643: PPUSH
12644: LD_STRING DR1-Den-1
12646: PPUSH
12647: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12651: LD_EXP 1
12655: PPUSH
12656: LD_STRING DR1-JMM-1
12658: PPUSH
12659: CALL_OW 88
// end ;
12663: END
// function CheckOptoLab ; var i ; begin
12664: LD_INT 0
12666: PPUSH
12667: PPUSH
// result = false ;
12668: LD_ADDR_VAR 0 1
12672: PUSH
12673: LD_INT 0
12675: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12676: LD_ADDR_VAR 0 2
12680: PUSH
12681: LD_INT 22
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_INT 30
12696: PUSH
12697: LD_INT 7
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 30
12706: PUSH
12707: LD_INT 8
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12781
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
12731: LD_VAR 0 2
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL_OW 268
12743: PUSH
12744: LD_INT 15
12746: EQUAL
12747: PUSH
12748: LD_VAR 0 2
12752: PPUSH
12753: LD_INT 2
12755: PPUSH
12756: CALL_OW 268
12760: PUSH
12761: LD_INT 15
12763: EQUAL
12764: OR
12765: IFFALSE 12777
// begin result = true ;
12767: LD_ADDR_VAR 0 1
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// break ;
12775: GO 12781
// end ; break ;
12777: GO 12781
// end ;
12779: GO 12728
12781: POP
12782: POP
// end ;
12783: LD_VAR 0 1
12787: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
12788: LD_INT 15
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 321
12798: PUSH
12799: LD_INT 2
12801: EQUAL
12802: PUSH
12803: LD_EXP 9
12807: PPUSH
12808: CALL_OW 302
12812: AND
12813: IFFALSE 13045
12815: GO 12817
12817: DISABLE
// begin DialogueOn ;
12818: CALL_OW 6
// if IsOK ( Denis ) then
12822: LD_EXP 9
12826: PPUSH
12827: CALL_OW 302
12831: IFFALSE 12847
// begin Say ( Denis , DR2-Den-1 ) ;
12833: LD_EXP 9
12837: PPUSH
12838: LD_STRING DR2-Den-1
12840: PPUSH
12841: CALL_OW 88
// end else
12845: GO 12906
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
12847: LD_INT 22
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 21
12859: PUSH
12860: LD_INT 1
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 25
12869: PUSH
12870: LD_INT 4
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: PPUSH
12882: CALL_OW 69
12886: PUSH
12887: LD_EXP 1
12891: PUSH
12892: EMPTY
12893: LIST
12894: DIFF
12895: PPUSH
12896: LD_STRING DR2-Sci1-1
12898: PPUSH
12899: LD_STRING DR2-FSci1-1
12901: PPUSH
12902: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
12906: LD_EXP 1
12910: PPUSH
12911: LD_STRING DR2-JMM-1
12913: PPUSH
12914: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
12918: LD_INT 22
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 25
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 25
12963: PUSH
12964: LD_INT 3
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 25
12973: PUSH
12974: LD_INT 4
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: LIST
12992: PPUSH
12993: CALL_OW 69
12997: PUSH
12998: LD_EXP 1
13002: PUSH
13003: LD_EXP 9
13007: PUSH
13008: LD_EXP 8
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: DIFF
13018: PPUSH
13019: LD_STRING DR2-Sol1-1
13021: PPUSH
13022: LD_STRING DR2-Sol1-11
13024: PPUSH
13025: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13029: LD_EXP 1
13033: PPUSH
13034: LD_STRING DR2-JMM-2
13036: PPUSH
13037: CALL_OW 88
// DialogueOff ;
13041: CALL_OW 7
// end ;
13045: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
13046: LD_INT 22
13048: PUSH
13049: LD_INT 1
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 30
13058: PUSH
13059: LD_INT 36
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PPUSH
13070: CALL_OW 69
13074: PUSH
13075: LD_INT 0
13077: EQUAL
13078: PUSH
13079: LD_INT 22
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 33
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: PPUSH
13114: CALL_OW 69
13118: PUSH
13119: LD_INT 0
13121: GREATER
13122: AND
13123: PUSH
13124: LD_EXP 23
13128: PUSH
13129: LD_INT 0
13131: EQUAL
13132: AND
13133: IFFALSE 13259
13135: GO 13137
13137: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13138: LD_INT 22
13140: PUSH
13141: LD_INT 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 21
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 3
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: PUSH
13178: LD_EXP 1
13182: PUSH
13183: LD_EXP 6
13187: PUSH
13188: LD_EXP 7
13192: PUSH
13193: LD_EXP 9
13197: PUSH
13198: LD_EXP 15
13202: PUSH
13203: LD_EXP 3
13207: PUSH
13208: LD_EXP 4
13212: PUSH
13213: LD_EXP 2
13217: PUSH
13218: LD_EXP 5
13222: PUSH
13223: LD_EXP 8
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: DIFF
13240: PPUSH
13241: LD_STRING D3a-Mech1-1
13243: PPUSH
13244: LD_STRING D3a-Mech1-1
13246: PPUSH
13247: CALL 5256 0 3
// firstTower = 2 ;
13251: LD_ADDR_EXP 23
13255: PUSH
13256: LD_INT 2
13258: ST_TO_ADDR
// end ;
13259: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13260: LD_INT 22
13262: PUSH
13263: LD_INT 3
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PPUSH
13284: CALL_OW 69
13288: PUSH
13289: LD_INT 0
13291: EQUAL
13292: IFFALSE 13407
13294: GO 13296
13296: DISABLE
13297: LD_INT 0
13299: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13300: LD_ADDR_VAR 0 1
13304: PUSH
13305: LD_INT 22
13307: PUSH
13308: LD_INT 1
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 21
13317: PUSH
13318: LD_INT 1
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 2
13327: PUSH
13328: LD_INT 25
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 25
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 25
13350: PUSH
13351: LD_INT 3
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 25
13360: PUSH
13361: LD_INT 4
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: PPUSH
13380: CALL_OW 69
13384: PUSH
13385: FOR_IN
13386: IFFALSE 13405
// AddExperience ( i , 1 , 10000 ) ;
13388: LD_VAR 0 1
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: LD_INT 10000
13398: PPUSH
13399: CALL_OW 492
13403: GO 13385
13405: POP
13406: POP
// end ;
13407: PPOPN 1
13409: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13410: LD_INT 22
13412: PUSH
13413: LD_INT 1
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 30
13422: PUSH
13423: LD_INT 36
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: PUSH
13439: LD_INT 0
13441: GREATER
13442: PUSH
13443: LD_INT 22
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 33
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: PPUSH
13478: CALL_OW 69
13482: PUSH
13483: LD_INT 0
13485: GREATER
13486: AND
13487: PUSH
13488: CALL 14070 0 0
13492: AND
13493: IFFALSE 14067
13495: GO 13497
13497: DISABLE
13498: LD_INT 0
13500: PPUSH
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13505: LD_ADDR_VAR 0 3
13509: PUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 1
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 30
13522: PUSH
13523: LD_INT 36
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13539: LD_ADDR_VAR 0 4
13543: PUSH
13544: LD_INT 22
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 33
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13584: LD_ADDR_VAR 0 5
13588: PUSH
13589: EMPTY
13590: ST_TO_ADDR
// for i in tmpControlTowers do
13591: LD_ADDR_VAR 0 1
13595: PUSH
13596: LD_VAR 0 3
13600: PUSH
13601: FOR_IN
13602: IFFALSE 14065
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13604: LD_EXP 1
13608: PPUSH
13609: CALL_OW 310
13613: PUSH
13614: LD_VAR 0 1
13618: EQUAL
13619: PUSH
13620: LD_EXP 1
13624: PPUSH
13625: CALL_OW 257
13629: PUSH
13630: LD_INT 3
13632: EQUAL
13633: AND
13634: IFFALSE 13764
// begin InGameOn ;
13636: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13640: LD_VAR 0 4
13644: PUSH
13645: LD_INT 1
13647: ARRAY
13648: PPUSH
13649: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13653: LD_EXP 1
13657: PPUSH
13658: LD_STRING D4a-JMM-1
13660: PPUSH
13661: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13665: LD_VAR 0 4
13669: PUSH
13670: LD_INT 1
13672: ARRAY
13673: PPUSH
13674: LD_EXP 1
13678: PPUSH
13679: CALL_OW 53
// wait ( 0 0$1 ) ;
13683: LD_INT 35
13685: PPUSH
13686: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13690: LD_VAR 0 4
13694: PUSH
13695: LD_INT 1
13697: ARRAY
13698: PPUSH
13699: LD_VAR 0 4
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: CALL_OW 250
13712: PUSH
13713: LD_INT 3
13715: PLUS
13716: PPUSH
13717: LD_VAR 0 4
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: CALL_OW 251
13730: PUSH
13731: LD_INT 2
13733: MINUS
13734: PPUSH
13735: CALL_OW 111
// wait ( 0 0$2 ) ;
13739: LD_INT 70
13741: PPUSH
13742: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
13746: LD_EXP 1
13750: PPUSH
13751: LD_STRING D4b-JMM-1
13753: PPUSH
13754: CALL_OW 88
// InGameOff ;
13758: CALL_OW 9
// end else
13762: GO 14063
// begin InGameOn ;
13764: CALL_OW 8
// for j in UnitsInside ( i ) do
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: LD_VAR 0 1
13777: PPUSH
13778: CALL_OW 313
13782: PUSH
13783: FOR_IN
13784: IFFALSE 13819
// if GetClass ( j ) = 3 then
13786: LD_VAR 0 2
13790: PPUSH
13791: CALL_OW 257
13795: PUSH
13796: LD_INT 3
13798: EQUAL
13799: IFFALSE 13817
// tmpMechanicInside = tmpMechanicInside ^ j ;
13801: LD_ADDR_VAR 0 5
13805: PUSH
13806: LD_VAR 0 5
13810: PUSH
13811: LD_VAR 0 2
13815: ADD
13816: ST_TO_ADDR
13817: GO 13783
13819: POP
13820: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13821: LD_VAR 0 5
13825: PUSH
13826: LD_INT 1
13828: ARRAY
13829: PPUSH
13830: CALL_OW 258
13834: PUSH
13835: LD_INT 1
13837: EQUAL
13838: IFFALSE 13856
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
13840: LD_VAR 0 5
13844: PUSH
13845: LD_INT 1
13847: ARRAY
13848: PPUSH
13849: LD_STRING D4a-Mech1-1
13851: PPUSH
13852: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
13856: LD_VAR 0 5
13860: PUSH
13861: LD_INT 1
13863: ARRAY
13864: PPUSH
13865: CALL_OW 258
13869: PUSH
13870: LD_INT 2
13872: EQUAL
13873: IFFALSE 13891
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
13875: LD_VAR 0 5
13879: PUSH
13880: LD_INT 1
13882: ARRAY
13883: PPUSH
13884: LD_STRING D4a-FMech1-1
13886: PPUSH
13887: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13891: LD_VAR 0 4
13895: PUSH
13896: LD_INT 1
13898: ARRAY
13899: PPUSH
13900: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
13904: LD_VAR 0 4
13908: PUSH
13909: LD_INT 1
13911: ARRAY
13912: PPUSH
13913: LD_VAR 0 5
13917: PUSH
13918: LD_INT 1
13920: ARRAY
13921: PPUSH
13922: CALL_OW 53
// wait ( 0 0$1 ) ;
13926: LD_INT 35
13928: PPUSH
13929: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13933: LD_VAR 0 4
13937: PUSH
13938: LD_INT 1
13940: ARRAY
13941: PPUSH
13942: LD_VAR 0 4
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PPUSH
13951: CALL_OW 250
13955: PUSH
13956: LD_INT 3
13958: PLUS
13959: PPUSH
13960: LD_VAR 0 4
13964: PUSH
13965: LD_INT 1
13967: ARRAY
13968: PPUSH
13969: CALL_OW 251
13973: PUSH
13974: LD_INT 2
13976: MINUS
13977: PPUSH
13978: CALL_OW 111
// wait ( 0 0$2 ) ;
13982: LD_INT 70
13984: PPUSH
13985: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
13989: LD_VAR 0 5
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 258
14002: PUSH
14003: LD_INT 1
14005: EQUAL
14006: IFFALSE 14024
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14008: LD_VAR 0 5
14012: PUSH
14013: LD_INT 1
14015: ARRAY
14016: PPUSH
14017: LD_STRING D4b-Mech1-1
14019: PPUSH
14020: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14024: LD_VAR 0 5
14028: PUSH
14029: LD_INT 1
14031: ARRAY
14032: PPUSH
14033: CALL_OW 258
14037: PUSH
14038: LD_INT 2
14040: EQUAL
14041: IFFALSE 14059
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14043: LD_VAR 0 5
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: PPUSH
14052: LD_STRING D4b-FMech1-1
14054: PPUSH
14055: CALL_OW 88
// InGameOff ;
14059: CALL_OW 9
// end ; end ;
14063: GO 13601
14065: POP
14066: POP
// end ;
14067: PPOPN 5
14069: END
// function CheckMehInside ; var i , j ; begin
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
14074: PPUSH
// result = false ;
14075: LD_ADDR_VAR 0 1
14079: PUSH
14080: LD_INT 0
14082: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14083: LD_ADDR_VAR 0 2
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: LD_INT 36
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 69
14116: PUSH
14117: FOR_IN
14118: IFFALSE 14169
// begin for j in UnitsInside ( i ) do
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 313
14134: PUSH
14135: FOR_IN
14136: IFFALSE 14165
// begin if GetClass ( j ) = 3 then
14138: LD_VAR 0 3
14142: PPUSH
14143: CALL_OW 257
14147: PUSH
14148: LD_INT 3
14150: EQUAL
14151: IFFALSE 14163
// begin result = true ;
14153: LD_ADDR_VAR 0 1
14157: PUSH
14158: LD_INT 1
14160: ST_TO_ADDR
// break ;
14161: GO 14165
// end ; end ;
14163: GO 14135
14165: POP
14166: POP
// end ;
14167: GO 14117
14169: POP
14170: POP
// end ;
14171: LD_VAR 0 1
14175: RET
// every 25 25$0 do
14176: GO 14178
14178: DISABLE
// begin PrepareKurt ;
14179: CALL 17546 0 0
// end ;
14183: END
// every 35 35$0 do
14184: GO 14186
14186: DISABLE
// begin PrepareJoan ;
14187: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14191: LD_INT 2100
14193: PPUSH
14194: CALL_OW 67
// if IsOK ( Lisa ) then
14198: LD_EXP 2
14202: PPUSH
14203: CALL_OW 302
14207: IFFALSE 14337
// begin DialogueOn ;
14209: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14213: LD_EXP 2
14217: PPUSH
14218: LD_STRING D7-Lisa-1
14220: PPUSH
14221: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14225: LD_EXP 1
14229: PPUSH
14230: LD_STRING D7-JMM-1
14232: PPUSH
14233: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14237: LD_EXP 2
14241: PPUSH
14242: LD_STRING D7-Lisa-2
14244: PPUSH
14245: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14249: LD_EXP 1
14253: PPUSH
14254: LD_STRING D7-JMM-2
14256: PPUSH
14257: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14261: LD_EXP 2
14265: PPUSH
14266: LD_STRING D7-Lisa-3
14268: PPUSH
14269: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14273: LD_EXP 1
14277: PPUSH
14278: LD_STRING D7-JMM-3
14280: PPUSH
14281: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14285: LD_EXP 2
14289: PPUSH
14290: LD_STRING D7-Lisa-4
14292: PPUSH
14293: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14297: LD_EXP 1
14301: PPUSH
14302: LD_STRING D7-JMM-4
14304: PPUSH
14305: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14309: LD_EXP 1
14313: PPUSH
14314: LD_STRING D7-JMM-4a
14316: PPUSH
14317: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14321: LD_EXP 2
14325: PPUSH
14326: LD_STRING D7-Lisa-5
14328: PPUSH
14329: CALL_OW 88
// DialogueOff ;
14333: CALL_OW 7
// end ; end ;
14337: END
// every 0 0$1 do var i , others ;
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 21
14362: PUSH
14363: LD_INT 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: LD_INT 25
14375: PUSH
14376: LD_INT 1
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 25
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 25
14395: PUSH
14396: LD_INT 3
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 25
14405: PUSH
14406: LD_INT 4
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: PUSH
14430: LD_EXP 13
14434: PUSH
14435: EMPTY
14436: LIST
14437: DIFF
14438: ST_TO_ADDR
// for i in others do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 2
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14487
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14452: LD_EXP 13
14456: PPUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 296
14466: PUSH
14467: LD_INT 6
14469: LESS
14470: IFFALSE 14485
// begin disable ;
14472: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14473: LD_EXP 13
14477: PPUSH
14478: LD_STRING D5-Sol1-1
14480: PPUSH
14481: CALL_OW 88
// end ; end ;
14485: GO 14449
14487: POP
14488: POP
// end ;
14489: PPOPN 2
14491: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14492: LD_INT 22
14494: PUSH
14495: LD_INT 1
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 33
14504: PUSH
14505: LD_INT 2
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PPUSH
14516: CALL_OW 69
14520: PUSH
14521: LD_INT 2
14523: GREATEREQUAL
14524: IFFALSE 14544
14526: GO 14528
14528: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14529: LD_STRING MRa
14531: PPUSH
14532: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14536: LD_ADDR_EXP 28
14540: PUSH
14541: LD_INT 1
14543: ST_TO_ADDR
// end ;
14544: END
// every 4 4$0 do
14545: GO 14547
14547: DISABLE
// PrepareRandoms ( 1 ) ;
14548: LD_INT 1
14550: PPUSH
14551: CALL 3692 0 1
14555: END
// every 10 10$0 do
14556: GO 14558
14558: DISABLE
// PrepareRandoms ( 2 ) ;
14559: LD_INT 2
14561: PPUSH
14562: CALL 3692 0 1
14566: END
// every 28 28$0 do
14567: GO 14569
14569: DISABLE
// PrepareRandoms ( 4 ) ;
14570: LD_INT 4
14572: PPUSH
14573: CALL 3692 0 1
14577: END
// every 32 32$0 do
14578: GO 14580
14580: DISABLE
// PrepareRandoms ( 5 ) ;
14581: LD_INT 5
14583: PPUSH
14584: CALL 3692 0 1
14588: END
// every 35 35$30 do
14589: GO 14591
14591: DISABLE
// PrepareRandoms ( 6 ) ;
14592: LD_INT 6
14594: PPUSH
14595: CALL 3692 0 1
14599: END
// every 37 37$20 do
14600: GO 14602
14602: DISABLE
// PrepareRandoms ( 7 ) ;
14603: LD_INT 7
14605: PPUSH
14606: CALL 3692 0 1
14610: END
// every 5 5$20 do
14611: GO 14613
14613: DISABLE
// begin DialogueOn ;
14614: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14618: LD_EXP 10
14622: PPUSH
14623: LD_STRING D12a-Sci-1
14625: PPUSH
14626: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14630: LD_EXP 1
14634: PPUSH
14635: LD_STRING D12a-JMM-1
14637: PPUSH
14638: CALL_OW 88
// DialogueOff ;
14642: CALL_OW 7
// cratesStatus = 1 ;
14646: LD_ADDR_EXP 38
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// end ;
14654: END
// every 13 13$0 do
14655: GO 14657
14657: DISABLE
// begin DialogueOn ;
14658: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14662: LD_EXP 10
14666: PPUSH
14667: LD_STRING D12b-Sci-1
14669: PPUSH
14670: CALL_OW 94
// DialogueOff ;
14674: CALL_OW 7
// cratesStatus = 2 ;
14678: LD_ADDR_EXP 38
14682: PUSH
14683: LD_INT 2
14685: ST_TO_ADDR
// end ;
14686: END
// every 32 32$0 do
14687: GO 14689
14689: DISABLE
// begin DialogueOn ;
14690: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14694: LD_EXP 10
14698: PPUSH
14699: LD_STRING D12c-Sci-1
14701: PPUSH
14702: CALL_OW 94
// DialogueOff ;
14706: CALL_OW 7
// wait ( 3 3$0 ) ;
14710: LD_INT 6300
14712: PPUSH
14713: CALL_OW 67
// DialogueOn ;
14717: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14721: LD_EXP 10
14725: PPUSH
14726: LD_STRING D12d-Sci-1
14728: PPUSH
14729: CALL_OW 94
// DialogueOff ;
14733: CALL_OW 7
// cratesStatus = 1 ;
14737: LD_ADDR_EXP 38
14741: PUSH
14742: LD_INT 1
14744: ST_TO_ADDR
// end ;
14745: END
// every 42 42$0 do
14746: GO 14748
14748: DISABLE
// begin DialogueOn ;
14749: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
14753: LD_EXP 10
14757: PPUSH
14758: LD_STRING D12e-Sci-1
14760: PPUSH
14761: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
14765: LD_EXP 1
14769: PPUSH
14770: LD_STRING D12e-JMM-1
14772: PPUSH
14773: CALL_OW 88
// DialogueOff ;
14777: CALL_OW 7
// cratesStatus = 2 ;
14781: LD_ADDR_EXP 38
14785: PUSH
14786: LD_INT 2
14788: ST_TO_ADDR
// end ;
14789: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
14790: LD_INT 22
14792: PUSH
14793: LD_INT 6
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 34
14812: PUSH
14813: LD_INT 51
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 69
14829: PUSH
14830: LD_INT 0
14832: GREATER
14833: IFFALSE 14916
14835: GO 14837
14837: DISABLE
14838: LD_INT 0
14840: PPUSH
// begin enable ;
14841: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: LD_INT 22
14849: PUSH
14850: LD_INT 6
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 21
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 2
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 69
14893: PUSH
14894: FOR_IN
14895: IFFALSE 14914
// ComAgressiveMove ( i , 138 , 168 ) ;
14897: LD_VAR 0 1
14901: PPUSH
14902: LD_INT 138
14904: PPUSH
14905: LD_INT 168
14907: PPUSH
14908: CALL_OW 114
14912: GO 14894
14914: POP
14915: POP
// end ;
14916: PPOPN 1
14918: END
// every 0 0$1 do var i ;
14919: GO 14921
14921: DISABLE
14922: LD_INT 0
14924: PPUSH
// begin enable ;
14925: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
14926: LD_ADDR_VAR 0 1
14930: PUSH
14931: LD_INT 5
14933: PPUSH
14934: LD_INT 2
14936: PUSH
14937: LD_INT 22
14939: PUSH
14940: LD_INT 3
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 6
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: PPUSH
14965: CALL_OW 70
14969: PUSH
14970: FOR_IN
14971: IFFALSE 15035
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
14973: LD_INT 5
14975: PPUSH
14976: LD_INT 22
14978: PUSH
14979: LD_INT 6
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 34
14988: PUSH
14989: LD_INT 51
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 70
15004: PUSH
15005: LD_INT 0
15007: GREATER
15008: IFFALSE 15024
// sendedConvoys = sendedConvoys + 1 ;
15010: LD_ADDR_EXP 39
15014: PUSH
15015: LD_EXP 39
15019: PUSH
15020: LD_INT 1
15022: PLUS
15023: ST_TO_ADDR
// RemoveUnit ( i ) ;
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 64
// end ;
15033: GO 14970
15035: POP
15036: POP
// end ; end_of_file
15037: PPOPN 1
15039: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 1
15047: EQUAL
15048: PUSH
15049: LD_VAR 0 2
15053: PUSH
15054: LD_INT 3
15056: EQUAL
15057: AND
15058: IFFALSE 15068
// contactWithRussian = 1 ;
15060: LD_ADDR_EXP 22
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// end ;
15068: PPOPN 2
15070: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 266
15080: PUSH
15081: LD_INT 36
15083: EQUAL
15084: PUSH
15085: LD_VAR 0 1
15089: PPUSH
15090: CALL_OW 255
15094: PUSH
15095: LD_INT 1
15097: EQUAL
15098: AND
15099: PUSH
15100: LD_INT 22
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 21
15112: PUSH
15113: LD_INT 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 33
15122: PUSH
15123: LD_INT 2
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: PUSH
15140: LD_INT 0
15142: EQUAL
15143: AND
15144: PUSH
15145: LD_EXP 23
15149: PUSH
15150: LD_INT 0
15152: EQUAL
15153: AND
15154: IFFALSE 15234
// begin firstTower = 1 ;
15156: LD_ADDR_EXP 23
15160: PUSH
15161: LD_INT 1
15163: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15164: LD_INT 22
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 21
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 25
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 26
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: PPUSH
15210: CALL_OW 69
15214: PUSH
15215: LD_EXP 1
15219: PUSH
15220: EMPTY
15221: LIST
15222: DIFF
15223: PPUSH
15224: LD_STRING D3b-Mech1-1
15226: PPUSH
15227: LD_STRING D3b-Mech1-1
15229: PPUSH
15230: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15234: LD_VAR 0 1
15238: PPUSH
15239: CALL_OW 266
15243: PUSH
15244: LD_INT 0
15246: EQUAL
15247: PUSH
15248: LD_VAR 0 1
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 1
15260: EQUAL
15261: AND
15262: IFFALSE 15276
// SetBName ( building , theta ) ;
15264: LD_VAR 0 1
15268: PPUSH
15269: LD_STRING theta
15271: PPUSH
15272: CALL_OW 500
// if GetSide ( building ) = 3 then
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 255
15285: PUSH
15286: LD_INT 3
15288: EQUAL
15289: IFFALSE 15363
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15291: LD_ADDR_EXP 31
15295: PUSH
15296: LD_EXP 31
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: CALL_OW 3
15308: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15309: LD_ADDR_EXP 31
15313: PUSH
15314: LD_EXP 31
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 3
15326: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15327: LD_ADDR_EXP 31
15331: PUSH
15332: LD_EXP 31
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 3
15344: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15345: LD_ADDR_EXP 31
15349: PUSH
15350: LD_EXP 31
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 3
15362: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15363: LD_VAR 0 1
15367: PPUSH
15368: CALL_OW 255
15372: PUSH
15373: LD_INT 3
15375: EQUAL
15376: PUSH
15377: LD_VAR 0 1
15381: PPUSH
15382: CALL_OW 266
15386: PUSH
15387: LD_INT 0
15389: EQUAL
15390: PUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL_OW 266
15400: PUSH
15401: LD_INT 2
15403: EQUAL
15404: OR
15405: PUSH
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 266
15415: PUSH
15416: LD_INT 4
15418: EQUAL
15419: OR
15420: PUSH
15421: EMPTY
15422: LIST
15423: AND
15424: IFFALSE 15435
// ComUpgrade ( building ) ;
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 255
15444: PUSH
15445: LD_INT 3
15447: EQUAL
15448: PUSH
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL_OW 266
15458: PUSH
15459: LD_INT 32
15461: EQUAL
15462: AND
15463: IFFALSE 15504
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15465: LD_VAR 0 1
15469: PPUSH
15470: LD_INT 42
15472: PUSH
15473: LD_INT 43
15475: PUSH
15476: LD_INT 44
15478: PUSH
15479: LD_INT 46
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 1
15490: PPUSH
15491: LD_INT 4
15493: PPUSH
15494: CALL_OW 12
15498: ARRAY
15499: PPUSH
15500: CALL_OW 208
// end ; end ;
15504: PPOPN 1
15506: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15507: LD_VAR 0 1
15511: PPUSH
15512: CALL_OW 255
15516: PUSH
15517: LD_INT 1
15519: EQUAL
15520: PUSH
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 247
15530: PUSH
15531: LD_INT 1
15533: EQUAL
15534: AND
15535: IFFALSE 15611
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15537: LD_VAR 0 1
15541: PPUSH
15542: CALL_OW 257
15546: PUSH
15547: LD_INT 1
15549: EQUAL
15550: PUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 257
15560: PUSH
15561: LD_INT 2
15563: EQUAL
15564: OR
15565: PUSH
15566: LD_VAR 0 1
15570: PPUSH
15571: CALL_OW 257
15575: PUSH
15576: LD_INT 3
15578: EQUAL
15579: OR
15580: PUSH
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 257
15590: PUSH
15591: LD_INT 4
15593: EQUAL
15594: OR
15595: IFFALSE 15611
// unitLost = unitLost + 1 ;
15597: LD_ADDR_EXP 30
15601: PUSH
15602: LD_EXP 30
15606: PUSH
15607: LD_INT 1
15609: PLUS
15610: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 255
15620: PUSH
15621: LD_INT 3
15623: EQUAL
15624: PUSH
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 247
15634: PUSH
15635: LD_INT 3
15637: EQUAL
15638: AND
15639: IFFALSE 16331
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15641: LD_VAR 0 1
15645: PPUSH
15646: CALL_OW 266
15650: PUSH
15651: LD_INT 31
15653: EQUAL
15654: PUSH
15655: LD_VAR 0 1
15659: PPUSH
15660: CALL_OW 266
15664: PUSH
15665: LD_INT 32
15667: EQUAL
15668: OR
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 266
15679: PUSH
15680: LD_INT 36
15682: EQUAL
15683: OR
15684: PUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 266
15694: PUSH
15695: LD_INT 0
15697: EQUAL
15698: OR
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 266
15709: PUSH
15710: LD_INT 24
15712: EQUAL
15713: OR
15714: PUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 266
15724: PUSH
15725: LD_INT 17
15727: EQUAL
15728: OR
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 266
15739: PUSH
15740: LD_INT 25
15742: EQUAL
15743: OR
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 266
15754: PUSH
15755: LD_INT 19
15757: EQUAL
15758: OR
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 266
15769: PUSH
15770: LD_INT 20
15772: EQUAL
15773: OR
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 266
15784: PUSH
15785: LD_INT 18
15787: EQUAL
15788: OR
15789: PUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL_OW 266
15799: PUSH
15800: LD_INT 21
15802: EQUAL
15803: OR
15804: PUSH
15805: LD_VAR 0 1
15809: PPUSH
15810: CALL_OW 266
15814: PUSH
15815: LD_INT 23
15817: EQUAL
15818: OR
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 266
15829: PUSH
15830: LD_INT 16
15832: EQUAL
15833: OR
15834: PUSH
15835: LD_VAR 0 1
15839: PPUSH
15840: CALL_OW 266
15844: PUSH
15845: LD_INT 6
15847: EQUAL
15848: OR
15849: PUSH
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 266
15859: PUSH
15860: LD_INT 29
15862: EQUAL
15863: OR
15864: PUSH
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 266
15874: PUSH
15875: LD_INT 26
15877: EQUAL
15878: OR
15879: PUSH
15880: LD_VAR 0 1
15884: PPUSH
15885: CALL_OW 266
15889: PUSH
15890: LD_INT 30
15892: EQUAL
15893: OR
15894: PUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 266
15904: PUSH
15905: LD_INT 28
15907: EQUAL
15908: OR
15909: PUSH
15910: LD_VAR 0 1
15914: PPUSH
15915: CALL_OW 266
15919: PUSH
15920: LD_INT 27
15922: EQUAL
15923: OR
15924: PUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 266
15934: PUSH
15935: LD_INT 33
15937: EQUAL
15938: OR
15939: PUSH
15940: LD_VAR 0 1
15944: PPUSH
15945: CALL_OW 266
15949: PUSH
15950: LD_INT 2
15952: EQUAL
15953: OR
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 266
15964: PUSH
15965: LD_INT 4
15967: EQUAL
15968: OR
15969: IFFALSE 16055
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
15971: LD_ADDR_EXP 31
15975: PUSH
15976: LD_EXP 31
15980: PUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 266
15990: ADD
15991: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
15992: LD_ADDR_EXP 31
15996: PUSH
15997: LD_EXP 31
16001: PUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 250
16011: ADD
16012: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16013: LD_ADDR_EXP 31
16017: PUSH
16018: LD_EXP 31
16022: PUSH
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 251
16032: ADD
16033: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16034: LD_ADDR_EXP 31
16038: PUSH
16039: LD_EXP 31
16043: PUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 254
16053: ADD
16054: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16055: LD_VAR 0 1
16059: PPUSH
16060: CALL_OW 266
16064: PUSH
16065: LD_INT 1
16067: EQUAL
16068: IFFALSE 16147
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16070: LD_ADDR_EXP 31
16074: PUSH
16075: LD_EXP 31
16079: PUSH
16080: LD_INT 0
16082: ADD
16083: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16084: LD_ADDR_EXP 31
16088: PUSH
16089: LD_EXP 31
16093: PUSH
16094: LD_VAR 0 1
16098: PPUSH
16099: CALL_OW 250
16103: ADD
16104: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16105: LD_ADDR_EXP 31
16109: PUSH
16110: LD_EXP 31
16114: PUSH
16115: LD_VAR 0 1
16119: PPUSH
16120: CALL_OW 251
16124: ADD
16125: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16126: LD_ADDR_EXP 31
16130: PUSH
16131: LD_EXP 31
16135: PUSH
16136: LD_VAR 0 1
16140: PPUSH
16141: CALL_OW 254
16145: ADD
16146: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL_OW 266
16156: PUSH
16157: LD_INT 3
16159: EQUAL
16160: IFFALSE 16239
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16162: LD_ADDR_EXP 31
16166: PUSH
16167: LD_EXP 31
16171: PUSH
16172: LD_INT 2
16174: ADD
16175: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16176: LD_ADDR_EXP 31
16180: PUSH
16181: LD_EXP 31
16185: PUSH
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 250
16195: ADD
16196: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16197: LD_ADDR_EXP 31
16201: PUSH
16202: LD_EXP 31
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 251
16216: ADD
16217: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16218: LD_ADDR_EXP 31
16222: PUSH
16223: LD_EXP 31
16227: PUSH
16228: LD_VAR 0 1
16232: PPUSH
16233: CALL_OW 254
16237: ADD
16238: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16239: LD_VAR 0 1
16243: PPUSH
16244: CALL_OW 266
16248: PUSH
16249: LD_INT 5
16251: EQUAL
16252: IFFALSE 16331
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16254: LD_ADDR_EXP 31
16258: PUSH
16259: LD_EXP 31
16263: PUSH
16264: LD_INT 4
16266: ADD
16267: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16268: LD_ADDR_EXP 31
16272: PUSH
16273: LD_EXP 31
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 250
16287: ADD
16288: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16289: LD_ADDR_EXP 31
16293: PUSH
16294: LD_EXP 31
16298: PUSH
16299: LD_VAR 0 1
16303: PPUSH
16304: CALL_OW 251
16308: ADD
16309: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16310: LD_ADDR_EXP 31
16314: PUSH
16315: LD_EXP 31
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 254
16329: ADD
16330: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL_OW 257
16340: PUSH
16341: LD_INT 3
16343: EQUAL
16344: PUSH
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 255
16354: PUSH
16355: LD_INT 3
16357: EQUAL
16358: AND
16359: PUSH
16360: LD_INT 21
16362: PPUSH
16363: CALL_OW 302
16367: AND
16368: PUSH
16369: LD_INT 21
16371: PPUSH
16372: CALL_OW 255
16376: PUSH
16377: LD_INT 3
16379: EQUAL
16380: AND
16381: IFFALSE 16449
// begin uc_side = 3 ;
16383: LD_ADDR_OWVAR 20
16387: PUSH
16388: LD_INT 3
16390: ST_TO_ADDR
// uc_nation = 3 ;
16391: LD_ADDR_OWVAR 21
16395: PUSH
16396: LD_INT 3
16398: ST_TO_ADDR
// hc_gallery :=  ;
16399: LD_ADDR_OWVAR 33
16403: PUSH
16404: LD_STRING 
16406: ST_TO_ADDR
// hc_name :=  ;
16407: LD_ADDR_OWVAR 26
16411: PUSH
16412: LD_STRING 
16414: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16415: LD_INT 0
16417: PPUSH
16418: LD_EXP 34
16422: PPUSH
16423: LD_EXP 35
16427: PPUSH
16428: CALL_OW 12
16432: PPUSH
16433: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16437: CALL_OW 44
16441: PPUSH
16442: LD_INT 21
16444: PPUSH
16445: CALL_OW 52
// end ; end ;
16449: PPOPN 1
16451: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
16456: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 264
16466: PUSH
16467: LD_INT 51
16469: EQUAL
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 255
16480: PUSH
16481: LD_INT 3
16483: EQUAL
16484: AND
16485: IFFALSE 16547
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16487: LD_ADDR_VAR 0 5
16491: PUSH
16492: LD_INT 2
16494: PPUSH
16495: CALL_OW 274
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: CALL_OW 275
16507: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16508: LD_INT 2
16510: PPUSH
16511: CALL_OW 274
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: LD_VAR 0 5
16523: PUSH
16524: LD_INT 100
16526: MINUS
16527: PPUSH
16528: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: LD_INT 100
16542: PPUSH
16543: CALL_OW 291
// end ; if building = rufabsupp then
16547: LD_VAR 0 2
16551: PUSH
16552: LD_INT 17
16554: EQUAL
16555: IFFALSE 16569
// SetSide ( vehicle , 6 ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_INT 6
16564: PPUSH
16565: CALL_OW 235
// if building = rufab and GetSide ( building ) = 3 and [ GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 ] then
16569: LD_VAR 0 2
16573: PUSH
16574: LD_INT 21
16576: EQUAL
16577: PUSH
16578: LD_VAR 0 2
16582: PPUSH
16583: CALL_OW 255
16587: PUSH
16588: LD_INT 3
16590: EQUAL
16591: AND
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 264
16602: PUSH
16603: LD_INT 42
16605: EQUAL
16606: PUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 264
16616: PUSH
16617: LD_INT 43
16619: EQUAL
16620: OR
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 264
16631: PUSH
16632: LD_INT 44
16634: EQUAL
16635: OR
16636: PUSH
16637: EMPTY
16638: LIST
16639: AND
16640: IFFALSE 16658
// russianTanks = russianTanks ^ vehicle ;
16642: LD_ADDR_EXP 36
16646: PUSH
16647: LD_EXP 36
16651: PUSH
16652: LD_VAR 0 1
16656: ADD
16657: ST_TO_ADDR
// end ;
16658: PPOPN 5
16660: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 255
16670: PUSH
16671: LD_INT 3
16673: EQUAL
16674: IFFALSE 16690
// tamedApemans = tamedApemans + 1 ;
16676: LD_ADDR_EXP 32
16680: PUSH
16681: LD_EXP 32
16685: PUSH
16686: LD_INT 1
16688: PLUS
16689: ST_TO_ADDR
// end ;
16690: PPOPN 2
16692: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16693: LD_INT 0
16695: PPUSH
16696: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
16697: LD_VAR 0 1
16701: PPUSH
16702: CALL_OW 255
16706: PUSH
16707: LD_INT 3
16709: EQUAL
16710: PUSH
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 247
16720: PUSH
16721: LD_INT 2
16723: EQUAL
16724: AND
16725: PUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 264
16735: PUSH
16736: LD_INT 42
16738: EQUAL
16739: PUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 264
16749: PUSH
16750: LD_INT 43
16752: EQUAL
16753: OR
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 264
16764: PUSH
16765: LD_INT 44
16767: EQUAL
16768: OR
16769: PUSH
16770: EMPTY
16771: LIST
16772: AND
16773: IFFALSE 16913
// begin AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
16775: LD_INT 21
16777: PPUSH
16778: LD_VAR 0 1
16782: PPUSH
16783: CALL_OW 265
16787: PPUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 262
16797: PPUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 263
16807: PPUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 264
16817: PPUSH
16818: CALL_OW 185
// for i in russianDamageTanks do
16822: LD_ADDR_VAR 0 2
16826: PUSH
16827: LD_EXP 37
16831: PUSH
16832: FOR_IN
16833: IFFALSE 16868
// if i = unit then
16835: LD_VAR 0 2
16839: PUSH
16840: LD_VAR 0 1
16844: EQUAL
16845: IFFALSE 16866
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
16847: LD_ADDR_EXP 37
16851: PUSH
16852: LD_EXP 37
16856: PUSH
16857: LD_VAR 0 1
16861: PUSH
16862: EMPTY
16863: LIST
16864: DIFF
16865: ST_TO_ADDR
16866: GO 16832
16868: POP
16869: POP
// tmpMeh = UnitsInside ( unit ) ;
16870: LD_ADDR_VAR 0 3
16874: PUSH
16875: LD_VAR 0 1
16879: PPUSH
16880: CALL_OW 313
16884: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16885: LD_VAR 0 3
16889: PPUSH
16890: CALL_OW 121
// wait ( 0 0$01 ) ;
16894: LD_INT 35
16896: PPUSH
16897: CALL_OW 67
// ComEnterUnit ( tmpMeh , rufab ) ;
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 21
16908: PPUSH
16909: CALL_OW 120
// end ; end ;
16913: PPOPN 3
16915: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
16916: LD_VAR 0 1
16920: PUSH
16921: LD_INT 21
16923: EQUAL
16924: PUSH
16925: LD_VAR 0 2
16929: PPUSH
16930: CALL_OW 255
16934: PUSH
16935: LD_INT 3
16937: EQUAL
16938: AND
16939: IFFALSE 16953
// SetLives ( human , 1000 ) ;
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_INT 1000
16948: PPUSH
16949: CALL_OW 234
// end ;
16953: PPOPN 2
16955: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
16956: LD_EXP 41
16960: NOT
16961: IFFALSE 16971
// firstCrateSpawn := true ;
16963: LD_ADDR_EXP 41
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// end ; end_of_file
16971: PPOPN 5
16973: END
// every 0 0$30 trigger cratesStatus = 1 do
16974: LD_EXP 38
16978: PUSH
16979: LD_INT 1
16981: EQUAL
16982: IFFALSE 17046
16984: GO 16986
16986: DISABLE
// begin enable ;
16987: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
16988: LD_INT 350
16990: PUSH
16991: LD_INT 1050
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 1
17000: PPUSH
17001: LD_INT 2
17003: PPUSH
17004: CALL_OW 12
17008: ARRAY
17009: PPUSH
17010: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17014: LD_INT 4
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 1
17026: PPUSH
17027: LD_INT 2
17029: PPUSH
17030: CALL_OW 12
17034: ARRAY
17035: PPUSH
17036: LD_INT 7
17038: PPUSH
17039: LD_INT 1
17041: PPUSH
17042: CALL_OW 55
// end ;
17046: END
// every 1 1$0 trigger cratesStatus = 2 do
17047: LD_EXP 38
17051: PUSH
17052: LD_INT 2
17054: EQUAL
17055: IFFALSE 17119
17057: GO 17059
17059: DISABLE
// begin enable ;
17060: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17061: LD_INT 3150
17063: PUSH
17064: LD_INT 4550
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 1
17073: PPUSH
17074: LD_INT 2
17076: PPUSH
17077: CALL_OW 12
17081: ARRAY
17082: PPUSH
17083: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17087: LD_INT 2
17089: PUSH
17090: LD_INT 5
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 1
17099: PPUSH
17100: LD_INT 2
17102: PPUSH
17103: CALL_OW 12
17107: ARRAY
17108: PPUSH
17109: LD_INT 8
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 55
// end ;
17119: END
// every 0 0$30 + 0 0$10 do
17120: GO 17122
17122: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17123: LD_INT 4
17125: PUSH
17126: LD_INT 5
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 1
17135: PPUSH
17136: LD_INT 2
17138: PPUSH
17139: CALL_OW 12
17143: ARRAY
17144: PPUSH
17145: LD_INT 8
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: CALL_OW 55
// Wait ( 0 0$15 ) ;
17155: LD_INT 525
17157: PPUSH
17158: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17162: LD_INT 4
17164: PUSH
17165: LD_INT 5
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 1
17174: PPUSH
17175: LD_INT 2
17177: PPUSH
17178: CALL_OW 12
17182: ARRAY
17183: PPUSH
17184: LD_INT 8
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 55
// Wait ( 0 0$20 ) ;
17194: LD_INT 700
17196: PPUSH
17197: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17201: LD_INT 4
17203: PUSH
17204: LD_INT 5
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_INT 2
17216: PPUSH
17217: CALL_OW 12
17221: ARRAY
17222: PPUSH
17223: LD_INT 8
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 55
// end ; end_of_file
17233: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17234: LD_EXP 24
17238: PUSH
17239: LD_INT 1
17241: EQUAL
17242: IFFALSE 17543
17244: GO 17246
17246: DISABLE
17247: LD_INT 0
17249: PPUSH
17250: PPUSH
17251: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_INT 22
17259: PUSH
17260: LD_INT 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 21
17269: PUSH
17270: LD_INT 3
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 30
17282: PUSH
17283: LD_INT 0
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 30
17292: PUSH
17293: LD_INT 1
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: PPUSH
17310: CALL_OW 69
17314: ST_TO_ADDR
// for i in tmp do
17315: LD_ADDR_VAR 0 1
17319: PUSH
17320: LD_VAR 0 2
17324: PUSH
17325: FOR_IN
17326: IFFALSE 17359
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17328: LD_ADDR_VAR 0 3
17332: PUSH
17333: LD_VAR 0 3
17337: PUSH
17338: LD_VAR 0 1
17342: PPUSH
17343: CALL_OW 274
17347: PPUSH
17348: LD_INT 1
17350: PPUSH
17351: CALL_OW 275
17355: PLUS
17356: ST_TO_ADDR
17357: GO 17325
17359: POP
17360: POP
// strings = [ ] ;
17361: LD_ADDR_EXP 27
17365: PUSH
17366: EMPTY
17367: ST_TO_ADDR
// if tmp = 0 then
17368: LD_VAR 0 2
17372: PUSH
17373: LD_INT 0
17375: EQUAL
17376: IFFALSE 17401
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17378: LD_ADDR_EXP 27
17382: PUSH
17383: LD_EXP 27
17387: PUSH
17388: LD_STRING #Am06-1
17390: PUSH
17391: LD_EXP 25
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: ADD
17400: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17401: LD_VAR 0 2
17405: PUSH
17406: LD_INT 0
17408: GREATER
17409: PUSH
17410: LD_EXP 25
17414: PUSH
17415: LD_VAR 0 3
17419: GREATER
17420: AND
17421: IFFALSE 17452
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17423: LD_ADDR_EXP 27
17427: PUSH
17428: LD_EXP 27
17432: PUSH
17433: LD_STRING #Am06-1
17435: PUSH
17436: LD_EXP 25
17440: PUSH
17441: LD_VAR 0 3
17445: MINUS
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: ADD
17451: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17452: LD_VAR 0 2
17456: PUSH
17457: LD_INT 0
17459: GREATER
17460: PUSH
17461: LD_EXP 25
17465: PUSH
17466: LD_VAR 0 3
17470: LESSEQUAL
17471: AND
17472: IFFALSE 17495
// strings = strings ^ [ #Am06-1 , 0 ] ;
17474: LD_ADDR_EXP 27
17478: PUSH
17479: LD_EXP 27
17483: PUSH
17484: LD_STRING #Am06-1
17486: PUSH
17487: LD_INT 0
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: ADD
17494: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17495: LD_ADDR_EXP 26
17499: PUSH
17500: LD_EXP 26
17504: PUSH
17505: LD_INT 35
17507: MINUS
17508: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17509: LD_ADDR_EXP 27
17513: PUSH
17514: LD_EXP 27
17518: PUSH
17519: LD_STRING #Am06-2
17521: PUSH
17522: LD_EXP 26
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: ADD
17531: ST_TO_ADDR
// display_strings = strings ;
17532: LD_ADDR_OWVAR 47
17536: PUSH
17537: LD_EXP 27
17541: ST_TO_ADDR
// enable ;
17542: ENABLE
// end ; end_of_file
17543: PPOPN 3
17545: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17546: LD_INT 0
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
// j = 0 ;
17555: LD_ADDR_VAR 0 3
17559: PUSH
17560: LD_INT 0
17562: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17563: LD_INT 35
17565: PPUSH
17566: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17570: LD_ADDR_VAR 0 2
17574: PUSH
17575: LD_INT 22
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 2
17597: PUSH
17598: LD_INT 25
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 25
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 25
17620: PUSH
17621: LD_INT 3
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 25
17630: PUSH
17631: LD_INT 4
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PUSH
17655: FOR_IN
17656: IFFALSE 17762
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
17658: LD_INT 22
17660: PUSH
17661: LD_INT 3
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 2
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 21
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 21
17693: PUSH
17694: LD_INT 3
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 59
17703: PUSH
17704: EMPTY
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 91
17716: PUSH
17717: LD_VAR 0 2
17721: PUSH
17722: LD_INT 25
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: LIST
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: PPUSH
17735: CALL_OW 69
17739: NOT
17740: IFFALSE 17760
// begin tmp = i ;
17742: LD_ADDR_VAR 0 4
17746: PUSH
17747: LD_VAR 0 2
17751: ST_TO_ADDR
// j = 1 ;
17752: LD_ADDR_VAR 0 3
17756: PUSH
17757: LD_INT 1
17759: ST_TO_ADDR
// end ; end ;
17760: GO 17655
17762: POP
17763: POP
// until j = 1 ;
17764: LD_VAR 0 3
17768: PUSH
17769: LD_INT 1
17771: EQUAL
17772: IFFALSE 17563
// blockSpawn = 1 ;
17774: LD_ADDR_EXP 29
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// uc_side = 2 ;
17782: LD_ADDR_OWVAR 20
17786: PUSH
17787: LD_INT 2
17789: ST_TO_ADDR
// uc_nation = 2 ;
17790: LD_ADDR_OWVAR 21
17794: PUSH
17795: LD_INT 2
17797: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
17798: LD_ADDR_EXP 19
17802: PUSH
17803: LD_STRING Kurt
17805: PPUSH
17806: LD_INT 0
17808: PPUSH
17809: CALL 5193 0 2
17813: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
17814: LD_EXP 19
17818: PPUSH
17819: LD_VAR 0 4
17823: PPUSH
17824: CALL_OW 250
17828: PPUSH
17829: LD_VAR 0 4
17833: PPUSH
17834: CALL_OW 251
17838: PPUSH
17839: LD_INT 5
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: CALL_OW 50
// InGameOn ;
17849: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
17853: LD_EXP 19
17857: PPUSH
17858: CALL_OW 87
// wait ( 0 0$2 ) ;
17862: LD_INT 70
17864: PPUSH
17865: CALL_OW 67
// ComExitVehicle ( tmp ) ;
17869: LD_VAR 0 4
17873: PPUSH
17874: CALL_OW 121
// ComExitBuilding ( tmp ) ;
17878: LD_VAR 0 4
17882: PPUSH
17883: CALL_OW 122
// wait ( 0 0$1 ) ;
17887: LD_INT 35
17889: PPUSH
17890: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
17894: LD_EXP 19
17898: PPUSH
17899: LD_VAR 0 4
17903: PPUSH
17904: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
17908: LD_VAR 0 4
17912: PPUSH
17913: LD_EXP 19
17917: PPUSH
17918: CALL_OW 119
// DialogueOn ;
17922: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
17926: LD_EXP 19
17930: PPUSH
17931: LD_STRING D2-Kurt-1
17933: PPUSH
17934: CALL_OW 88
// if tmp = JMM then
17938: LD_VAR 0 4
17942: PUSH
17943: LD_EXP 1
17947: EQUAL
17948: IFFALSE 18040
// begin Say ( JMM , D2-JMM-1 ) ;
17950: LD_EXP 1
17954: PPUSH
17955: LD_STRING D2-JMM-1
17957: PPUSH
17958: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
17962: LD_EXP 19
17966: PPUSH
17967: LD_STRING D2-Kurt-2
17969: PPUSH
17970: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
17974: LD_EXP 1
17978: PPUSH
17979: LD_STRING D2-JMM-2
17981: PPUSH
17982: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
17986: LD_EXP 19
17990: PPUSH
17991: LD_STRING D2-Kurt-3
17993: PPUSH
17994: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
17998: LD_EXP 1
18002: PPUSH
18003: LD_STRING D2-JMM-3
18005: PPUSH
18006: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18010: LD_EXP 19
18014: PPUSH
18015: LD_STRING D2-Kurt-4
18017: PPUSH
18018: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18022: LD_EXP 1
18026: PPUSH
18027: LD_STRING D2-JMM-4
18029: PPUSH
18030: CALL_OW 88
// DialogueOff ;
18034: CALL_OW 7
// end else
18038: GO 18350
// begin if GetSex ( tmp ) = 1 then
18040: LD_VAR 0 4
18044: PPUSH
18045: CALL_OW 258
18049: PUSH
18050: LD_INT 1
18052: EQUAL
18053: IFFALSE 18067
// Say ( tmp , D2-Sol1-1 ) ;
18055: LD_VAR 0 4
18059: PPUSH
18060: LD_STRING D2-Sol1-1
18062: PPUSH
18063: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18067: LD_VAR 0 4
18071: PPUSH
18072: CALL_OW 258
18076: PUSH
18077: LD_INT 2
18079: EQUAL
18080: IFFALSE 18094
// Say ( tmp , D2-FSol1-1 ) ;
18082: LD_VAR 0 4
18086: PPUSH
18087: LD_STRING D2-FSol1-1
18089: PPUSH
18090: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18094: LD_EXP 19
18098: PPUSH
18099: LD_STRING D2-Kurt-2
18101: PPUSH
18102: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18106: LD_VAR 0 4
18110: PPUSH
18111: CALL_OW 258
18115: PUSH
18116: LD_INT 1
18118: EQUAL
18119: IFFALSE 18133
// Say ( tmp , D2-Sol1-2 ) ;
18121: LD_VAR 0 4
18125: PPUSH
18126: LD_STRING D2-Sol1-2
18128: PPUSH
18129: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18133: LD_VAR 0 4
18137: PPUSH
18138: CALL_OW 258
18142: PUSH
18143: LD_INT 2
18145: EQUAL
18146: IFFALSE 18160
// Say ( tmp , D2-FSol1-2 ) ;
18148: LD_VAR 0 4
18152: PPUSH
18153: LD_STRING D2-FSol1-2
18155: PPUSH
18156: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18160: LD_EXP 19
18164: PPUSH
18165: LD_STRING D2-Kurt-3
18167: PPUSH
18168: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18172: LD_VAR 0 4
18176: PPUSH
18177: CALL_OW 258
18181: PUSH
18182: LD_INT 1
18184: EQUAL
18185: IFFALSE 18199
// Say ( tmp , D2-Sol1-3 ) ;
18187: LD_VAR 0 4
18191: PPUSH
18192: LD_STRING D2-Sol1-3
18194: PPUSH
18195: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18199: LD_VAR 0 4
18203: PPUSH
18204: CALL_OW 258
18208: PUSH
18209: LD_INT 2
18211: EQUAL
18212: IFFALSE 18226
// Say ( tmp , D2-FSol1-3 ) ;
18214: LD_VAR 0 4
18218: PPUSH
18219: LD_STRING D2-FSol1-3
18221: PPUSH
18222: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18226: LD_EXP 19
18230: PPUSH
18231: LD_STRING D2-Kurt-4
18233: PPUSH
18234: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18238: LD_VAR 0 4
18242: PPUSH
18243: CALL_OW 258
18247: PUSH
18248: LD_INT 1
18250: EQUAL
18251: IFFALSE 18265
// Say ( tmp , D2-Sol1-4 ) ;
18253: LD_VAR 0 4
18257: PPUSH
18258: LD_STRING D2-Sol1-4
18260: PPUSH
18261: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18265: LD_VAR 0 4
18269: PPUSH
18270: CALL_OW 258
18274: PUSH
18275: LD_INT 2
18277: EQUAL
18278: IFFALSE 18292
// Say ( tmp , D2-FSol1-4 ) ;
18280: LD_VAR 0 4
18284: PPUSH
18285: LD_STRING D2-FSol1-4
18287: PPUSH
18288: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18292: LD_VAR 0 4
18296: PPUSH
18297: CALL_OW 258
18301: PUSH
18302: LD_INT 1
18304: EQUAL
18305: IFFALSE 18319
// Say ( tmp , D2-Sol1-5 ) ;
18307: LD_VAR 0 4
18311: PPUSH
18312: LD_STRING D2-Sol1-5
18314: PPUSH
18315: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18319: LD_VAR 0 4
18323: PPUSH
18324: CALL_OW 258
18328: PUSH
18329: LD_INT 2
18331: EQUAL
18332: IFFALSE 18346
// Say ( tmp , D2-FSol1-5 ) ;
18334: LD_VAR 0 4
18338: PPUSH
18339: LD_STRING D2-FSol1-5
18341: PPUSH
18342: CALL_OW 88
// DialogueOff ;
18346: CALL_OW 7
// end ; dec = ShowQuery1 ;
18350: LD_ADDR_VAR 0 6
18354: PUSH
18355: CALL 5795 0 0
18359: ST_TO_ADDR
// if dec = 1 then
18360: LD_VAR 0 6
18364: PUSH
18365: LD_INT 1
18367: EQUAL
18368: IFFALSE 18410
// begin DialogueOn ;
18370: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18374: LD_EXP 19
18378: PPUSH
18379: LD_STRING D2a-Kurt-1
18381: PPUSH
18382: CALL_OW 88
// DialogueOff ;
18386: CALL_OW 7
// InGameOff ;
18390: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18394: LD_INT 1
18396: PPUSH
18397: LD_INT 2
18399: PPUSH
18400: LD_INT 2
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 80
// end ; if dec = 2 then
18410: LD_VAR 0 6
18414: PUSH
18415: LD_INT 2
18417: EQUAL
18418: IFFALSE 18918
// begin DialogueOn ;
18420: CALL_OW 6
// if tmp = JMM then
18424: LD_VAR 0 4
18428: PUSH
18429: LD_EXP 1
18433: EQUAL
18434: IFFALSE 18490
// begin Say ( JMM , D2b-JMM-1 ) ;
18436: LD_EXP 1
18440: PPUSH
18441: LD_STRING D2b-JMM-1
18443: PPUSH
18444: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18448: LD_EXP 19
18452: PPUSH
18453: LD_STRING D2b-Kurt-1
18455: PPUSH
18456: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18460: LD_EXP 1
18464: PPUSH
18465: LD_STRING D2b-JMM-2
18467: PPUSH
18468: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18472: LD_EXP 19
18476: PPUSH
18477: LD_STRING D2b-Kurt-2
18479: PPUSH
18480: CALL_OW 88
// DialogueOff ;
18484: CALL_OW 7
// end else
18488: GO 18680
// begin if GetSex ( tmp ) = 1 then
18490: LD_VAR 0 4
18494: PPUSH
18495: CALL_OW 258
18499: PUSH
18500: LD_INT 1
18502: EQUAL
18503: IFFALSE 18517
// Say ( tmp , D2b-Sol1-1 ) ;
18505: LD_VAR 0 4
18509: PPUSH
18510: LD_STRING D2b-Sol1-1
18512: PPUSH
18513: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18517: LD_VAR 0 4
18521: PPUSH
18522: CALL_OW 258
18526: PUSH
18527: LD_INT 2
18529: EQUAL
18530: IFFALSE 18544
// Say ( tmp , D2b-FSol1-1 ) ;
18532: LD_VAR 0 4
18536: PPUSH
18537: LD_STRING D2b-FSol1-1
18539: PPUSH
18540: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18544: LD_EXP 19
18548: PPUSH
18549: LD_STRING D2b-Kurt-1
18551: PPUSH
18552: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18556: LD_VAR 0 4
18560: PPUSH
18561: CALL_OW 258
18565: PUSH
18566: LD_INT 1
18568: EQUAL
18569: IFFALSE 18583
// Say ( tmp , D2b-Sol1-2 ) ;
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_STRING D2b-Sol1-2
18578: PPUSH
18579: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18583: LD_VAR 0 4
18587: PPUSH
18588: CALL_OW 258
18592: PUSH
18593: LD_INT 2
18595: EQUAL
18596: IFFALSE 18610
// Say ( tmp , D2b-FSol1-2 ) ;
18598: LD_VAR 0 4
18602: PPUSH
18603: LD_STRING D2b-FSol1-2
18605: PPUSH
18606: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18610: LD_EXP 19
18614: PPUSH
18615: LD_STRING D2b-Kurt-2
18617: PPUSH
18618: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18622: LD_VAR 0 4
18626: PPUSH
18627: CALL_OW 258
18631: PUSH
18632: LD_INT 1
18634: EQUAL
18635: IFFALSE 18649
// Say ( tmp , D2c-Sol1-2 ) ;
18637: LD_VAR 0 4
18641: PPUSH
18642: LD_STRING D2c-Sol1-2
18644: PPUSH
18645: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18649: LD_VAR 0 4
18653: PPUSH
18654: CALL_OW 258
18658: PUSH
18659: LD_INT 2
18661: EQUAL
18662: IFFALSE 18676
// Say ( tmp , D2c-FSol1-2 ) ;
18664: LD_VAR 0 4
18668: PPUSH
18669: LD_STRING D2c-FSol1-2
18671: PPUSH
18672: CALL_OW 88
// DialogueOff ;
18676: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
18680: LD_ADDR_VAR 0 7
18684: PUSH
18685: CALL 5869 0 0
18689: ST_TO_ADDR
// if dec2 = 1 then
18690: LD_VAR 0 7
18694: PUSH
18695: LD_INT 1
18697: EQUAL
18698: IFFALSE 18740
// begin DialogueOn ;
18700: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18704: LD_EXP 19
18708: PPUSH
18709: LD_STRING D2a-Kurt-1
18711: PPUSH
18712: CALL_OW 88
// DialogueOff ;
18716: CALL_OW 7
// InGameOff ;
18720: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18724: LD_INT 1
18726: PPUSH
18727: LD_INT 2
18729: PPUSH
18730: LD_INT 2
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL_OW 80
// end ; if dec2 = 2 then
18740: LD_VAR 0 7
18744: PUSH
18745: LD_INT 2
18747: EQUAL
18748: IFFALSE 18918
// begin if tmp = JMM then
18750: LD_VAR 0 4
18754: PUSH
18755: LD_EXP 1
18759: EQUAL
18760: IFFALSE 18820
// begin DialogueOn ;
18762: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18766: LD_EXP 1
18770: PPUSH
18771: LD_STRING D2c-JMM-1
18773: PPUSH
18774: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18778: LD_EXP 19
18782: PPUSH
18783: LD_STRING D2c-Kurt-1
18785: PPUSH
18786: CALL_OW 88
// DialogueOff ;
18790: CALL_OW 7
// InGameOff ;
18794: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18798: LD_EXP 19
18802: PPUSH
18803: LD_INT 9
18805: PPUSH
18806: CALL_OW 113
// readyToEscape = 1 ;
18810: LD_ADDR_EXP 21
18814: PUSH
18815: LD_INT 1
18817: ST_TO_ADDR
// end else
18818: GO 18918
// begin DialogueOn ;
18820: CALL_OW 6
// if GetSex ( tmp ) = 1 then
18824: LD_VAR 0 4
18828: PPUSH
18829: CALL_OW 258
18833: PUSH
18834: LD_INT 1
18836: EQUAL
18837: IFFALSE 18851
// Say ( tmp , D2c-Sol1-1 ) ;
18839: LD_VAR 0 4
18843: PPUSH
18844: LD_STRING D2c-Sol1-1
18846: PPUSH
18847: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18851: LD_VAR 0 4
18855: PPUSH
18856: CALL_OW 258
18860: PUSH
18861: LD_INT 2
18863: EQUAL
18864: IFFALSE 18878
// Say ( tmp , D2c-FSol1-1 ) ;
18866: LD_VAR 0 4
18870: PPUSH
18871: LD_STRING D2c-FSol1-1
18873: PPUSH
18874: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18878: LD_EXP 19
18882: PPUSH
18883: LD_STRING D2c-Kurt-1
18885: PPUSH
18886: CALL_OW 88
// DialogueOff ;
18890: CALL_OW 7
// InGameOff ;
18894: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18898: LD_EXP 19
18902: PPUSH
18903: LD_INT 9
18905: PPUSH
18906: CALL_OW 113
// readyToEscape = 1 ;
18910: LD_ADDR_EXP 21
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
18918: LD_VAR 0 6
18922: PUSH
18923: LD_INT 3
18925: EQUAL
18926: IFFALSE 19100
// begin DialogueOn ;
18928: CALL_OW 6
// if tmp = JMM then
18932: LD_VAR 0 4
18936: PUSH
18937: LD_EXP 1
18941: EQUAL
18942: IFFALSE 19002
// begin DialogueOn ;
18944: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
18948: LD_EXP 1
18952: PPUSH
18953: LD_STRING D2c-JMM-1
18955: PPUSH
18956: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
18960: LD_EXP 19
18964: PPUSH
18965: LD_STRING D2c-Kurt-1
18967: PPUSH
18968: CALL_OW 88
// DialogueOff ;
18972: CALL_OW 7
// InGameOff ;
18976: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
18980: LD_EXP 19
18984: PPUSH
18985: LD_INT 9
18987: PPUSH
18988: CALL_OW 113
// readyToEscape = 1 ;
18992: LD_ADDR_EXP 21
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// end else
19000: GO 19100
// begin DialogueOn ;
19002: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19006: LD_VAR 0 4
19010: PPUSH
19011: CALL_OW 258
19015: PUSH
19016: LD_INT 1
19018: EQUAL
19019: IFFALSE 19033
// Say ( tmp , D2c-Sol1-1 ) ;
19021: LD_VAR 0 4
19025: PPUSH
19026: LD_STRING D2c-Sol1-1
19028: PPUSH
19029: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19033: LD_VAR 0 4
19037: PPUSH
19038: CALL_OW 258
19042: PUSH
19043: LD_INT 2
19045: EQUAL
19046: IFFALSE 19060
// Say ( tmp , D2c-FSol1-1 ) ;
19048: LD_VAR 0 4
19052: PPUSH
19053: LD_STRING D2c-FSol1-1
19055: PPUSH
19056: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19060: LD_EXP 19
19064: PPUSH
19065: LD_STRING D2c-Kurt-1
19067: PPUSH
19068: CALL_OW 88
// DialogueOff ;
19072: CALL_OW 7
// InGameOff ;
19076: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19080: LD_EXP 19
19084: PPUSH
19085: LD_INT 9
19087: PPUSH
19088: CALL_OW 113
// readyToEscape = 1 ;
19092: LD_ADDR_EXP 21
19096: PUSH
19097: LD_INT 1
19099: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19100: LD_ADDR_EXP 29
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19108: LD_INT 35
19110: PPUSH
19111: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19115: LD_EXP 19
19119: PPUSH
19120: LD_INT 9
19122: PPUSH
19123: CALL_OW 308
19127: PUSH
19128: LD_EXP 21
19132: AND
19133: PUSH
19134: LD_EXP 19
19138: PPUSH
19139: CALL_OW 301
19143: OR
19144: IFFALSE 19108
// if IsDead ( Kurt ) then
19146: LD_EXP 19
19150: PPUSH
19151: CALL_OW 301
19155: IFFALSE 19159
// exit ;
19157: GO 19228
// RemoveUnit ( Kurt ) ;
19159: LD_EXP 19
19163: PPUSH
19164: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19168: LD_EXP 19
19172: PPUSH
19173: LD_STRING Kurt
19175: PPUSH
19176: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19180: LD_INT 1
19182: PPUSH
19183: LD_INT 2
19185: PPUSH
19186: CALL_OW 81
19190: PUSH
19191: LD_INT 0
19193: EQUAL
19194: IFFALSE 19204
// KurtStatus = 1 ;
19196: LD_ADDR_EXP 20
19200: PUSH
19201: LD_INT 1
19203: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19204: LD_INT 1
19206: PPUSH
19207: LD_INT 2
19209: PPUSH
19210: CALL_OW 81
19214: PUSH
19215: LD_INT 2
19217: EQUAL
19218: IFFALSE 19228
// KurtStatus = 2 ;
19220: LD_ADDR_EXP 20
19224: PUSH
19225: LD_INT 2
19227: ST_TO_ADDR
// end ; end_of_file
19228: LD_VAR 0 1
19232: RET
// every 0 0$1 do
19233: GO 19235
19235: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19236: LD_INT 3
19238: PPUSH
19239: LD_INT 32
19241: PPUSH
19242: LD_INT 3
19244: PPUSH
19245: CALL 5924 0 3
19249: END
// every 0 0$1 do
19250: GO 19252
19252: DISABLE
// begin enable ;
19253: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
19254: LD_INT 3
19256: PPUSH
19257: LD_INT 2
19259: PPUSH
19260: LD_INT 11
19262: PPUSH
19263: LD_EXP 31
19267: PPUSH
19268: CALL 6009 0 4
// if disableHealAI = 0 then
19272: LD_EXP 33
19276: PUSH
19277: LD_INT 0
19279: EQUAL
19280: IFFALSE 19301
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
19282: LD_INT 3
19284: PPUSH
19285: LD_INT 10
19287: PPUSH
19288: LD_INT 11
19290: PPUSH
19291: LD_INT 32
19293: PUSH
19294: EMPTY
19295: LIST
19296: PPUSH
19297: CALL 6400 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19301: LD_INT 3
19303: PPUSH
19304: LD_INT 51
19306: PPUSH
19307: LD_INT 7
19309: PPUSH
19310: CALL 8516 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 ) ;
19314: LD_INT 3
19316: PPUSH
19317: LD_INT 14
19319: PPUSH
19320: LD_INT 121
19322: PPUSH
19323: LD_INT 100
19325: PPUSH
19326: CALL 7770 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
19330: LD_INT 3
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL 7262 0 2
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
19340: LD_INT 3
19342: PPUSH
19343: LD_INT 11
19345: PPUSH
19346: CALL 8659 0 2
// AttackNearBuildings ( 3 , 1 ) ;
19350: LD_INT 3
19352: PPUSH
19353: LD_INT 1
19355: PPUSH
19356: CALL 9072 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
19360: LD_INT 2
19362: PPUSH
19363: CALL_OW 303
19367: PUSH
19368: LD_INT 2
19370: PPUSH
19371: CALL_OW 255
19375: PUSH
19376: LD_INT 1
19378: EQUAL
19379: OR
19380: IFFALSE 19392
// DefendDepot ( 1 , rudepo ) ;
19382: LD_INT 1
19384: PPUSH
19385: LD_INT 2
19387: PPUSH
19388: CALL 6944 0 2
// end ;
19392: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19393: LD_INT 22
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 21
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 55
19415: PUSH
19416: EMPTY
19417: LIST
19418: PUSH
19419: LD_INT 3
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 51
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: PUSH
19447: LD_INT 0
19449: EQUAL
19450: PUSH
19451: LD_INT 21
19453: PPUSH
19454: CALL_OW 255
19458: PUSH
19459: LD_INT 3
19461: EQUAL
19462: AND
19463: PUSH
19464: LD_INT 21
19466: PPUSH
19467: CALL_OW 302
19471: AND
19472: PUSH
19473: LD_INT 2
19475: PPUSH
19476: CALL_OW 255
19480: PUSH
19481: LD_INT 3
19483: EQUAL
19484: AND
19485: PUSH
19486: LD_INT 2
19488: PPUSH
19489: CALL_OW 302
19493: AND
19494: IFFALSE 19678
19496: GO 19498
19498: DISABLE
// begin enable ;
19499: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
19500: LD_INT 2
19502: PPUSH
19503: CALL_OW 274
19507: PPUSH
19508: LD_INT 1
19510: PPUSH
19511: LD_INT 1000
19513: PPUSH
19514: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 44 , 44 , 44 , 46 ] , [ 44 , 44 , 44 , 44 , 46 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
19518: LD_INT 3
19520: PPUSH
19521: LD_INT 21
19523: PPUSH
19524: LD_INT 5
19526: PUSH
19527: LD_INT 6
19529: PUSH
19530: LD_INT 6
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: LIST
19537: PUSH
19538: LD_OWVAR 67
19542: ARRAY
19543: PPUSH
19544: LD_INT 43
19546: PUSH
19547: LD_INT 43
19549: PUSH
19550: LD_INT 44
19552: PUSH
19553: LD_INT 44
19555: PUSH
19556: LD_INT 46
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 43
19568: PUSH
19569: LD_INT 43
19571: PUSH
19572: LD_INT 44
19574: PUSH
19575: LD_INT 44
19577: PUSH
19578: LD_INT 44
19580: PUSH
19581: LD_INT 46
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 44
19594: PUSH
19595: LD_INT 44
19597: PUSH
19598: LD_INT 44
19600: PUSH
19601: LD_INT 44
19603: PUSH
19604: LD_INT 46
19606: PUSH
19607: LD_INT 46
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: PUSH
19623: LD_OWVAR 67
19627: ARRAY
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: LD_INT 22
19637: PUSH
19638: LD_INT 22
19640: PUSH
19641: LD_INT 24
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: LD_INT 1
19650: PPUSH
19651: LD_INT 2
19653: PPUSH
19654: CALL_OW 12
19658: ARRAY
19659: PUSH
19660: LD_INT 24
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: PUSH
19668: LD_OWVAR 67
19672: ARRAY
19673: PPUSH
19674: CALL 7108 0 7
// end ;
19678: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19679: LD_INT 17
19681: PPUSH
19682: CALL_OW 255
19686: PUSH
19687: LD_INT 3
19689: EQUAL
19690: PUSH
19691: LD_INT 17
19693: PPUSH
19694: CALL_OW 302
19698: AND
19699: PUSH
19700: LD_INT 2
19702: PPUSH
19703: CALL_OW 255
19707: PUSH
19708: LD_INT 3
19710: EQUAL
19711: AND
19712: PUSH
19713: LD_INT 2
19715: PPUSH
19716: CALL_OW 302
19720: AND
19721: IFFALSE 19788
19723: GO 19725
19725: DISABLE
// begin enable ;
19726: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
19727: LD_INT 17
19729: PPUSH
19730: LD_INT 22
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: LD_INT 1
19738: PPUSH
19739: LD_INT 42
19741: PUSH
19742: LD_INT 43
19744: PUSH
19745: LD_INT 44
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PPUSH
19756: LD_INT 3
19758: PPUSH
19759: CALL_OW 12
19763: ARRAY
19764: PPUSH
19765: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
19769: LD_INT 17
19771: PPUSH
19772: LD_INT 22
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: LD_INT 51
19783: PPUSH
19784: CALL_OW 185
// end ;
19788: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
19789: LD_INT 17
19791: PPUSH
19792: CALL_OW 302
19796: PUSH
19797: LD_INT 17
19799: PPUSH
19800: CALL_OW 255
19804: PUSH
19805: LD_INT 3
19807: EQUAL
19808: AND
19809: PUSH
19810: LD_INT 2
19812: PPUSH
19813: CALL_OW 302
19817: AND
19818: PUSH
19819: LD_INT 2
19821: PPUSH
19822: CALL_OW 255
19826: PUSH
19827: LD_INT 3
19829: EQUAL
19830: AND
19831: PUSH
19832: LD_INT 17
19834: PPUSH
19835: CALL_OW 313
19839: NOT
19840: AND
19841: IFFALSE 19935
19843: GO 19845
19845: DISABLE
19846: LD_INT 0
19848: PPUSH
// begin for i = 1 to 6 do
19849: LD_ADDR_VAR 0 1
19853: PUSH
19854: DOUBLE
19855: LD_INT 1
19857: DEC
19858: ST_TO_ADDR
19859: LD_INT 6
19861: PUSH
19862: FOR_TO
19863: IFFALSE 19933
// begin uc_side = 3 ;
19865: LD_ADDR_OWVAR 20
19869: PUSH
19870: LD_INT 3
19872: ST_TO_ADDR
// uc_nation = 3 ;
19873: LD_ADDR_OWVAR 21
19877: PUSH
19878: LD_INT 3
19880: ST_TO_ADDR
// hc_gallery :=  ;
19881: LD_ADDR_OWVAR 33
19885: PUSH
19886: LD_STRING 
19888: ST_TO_ADDR
// hc_name :=  ;
19889: LD_ADDR_OWVAR 26
19893: PUSH
19894: LD_STRING 
19896: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
19897: LD_INT 0
19899: PPUSH
19900: LD_EXP 34
19904: PPUSH
19905: LD_EXP 35
19909: PPUSH
19910: CALL_OW 12
19914: PPUSH
19915: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
19919: CALL_OW 44
19923: PPUSH
19924: LD_INT 17
19926: PPUSH
19927: CALL_OW 52
// end ;
19931: GO 19862
19933: POP
19934: POP
// end ;
19935: PPOPN 1
19937: END
// every 2 2$0 do var i , j ;
19938: GO 19940
19940: DISABLE
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
19945: LD_INT 14700
19947: PUSH
19948: LD_INT 33600
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 1
19957: PPUSH
19958: LD_INT 2
19960: PPUSH
19961: CALL_OW 12
19965: ARRAY
19966: PPUSH
19967: CALL_OW 67
// disableHealAI = 1 ;
19971: LD_ADDR_EXP 33
19975: PUSH
19976: LD_INT 1
19978: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
19979: LD_ADDR_VAR 0 1
19983: PUSH
19984: LD_INT 22
19986: PUSH
19987: LD_INT 3
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 25
19996: PUSH
19997: LD_INT 4
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PPUSH
20008: CALL_OW 69
20012: PUSH
20013: FOR_IN
20014: IFFALSE 20027
// ComExitBuilding ( i ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 122
20025: GO 20013
20027: POP
20028: POP
// wait ( 0 0$1 ) ;
20029: LD_INT 35
20031: PPUSH
20032: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20036: LD_INT 35
20038: PPUSH
20039: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20043: LD_ADDR_VAR 0 1
20047: PUSH
20048: LD_INT 22
20050: PUSH
20051: LD_INT 3
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: LD_INT 25
20060: PUSH
20061: LD_INT 4
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PPUSH
20072: CALL_OW 69
20076: PUSH
20077: FOR_IN
20078: IFFALSE 20155
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: LD_INT 19
20087: PPUSH
20088: LD_INT 22
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 25
20100: PUSH
20101: LD_INT 12
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PPUSH
20112: CALL_OW 70
20116: PUSH
20117: FOR_IN
20118: IFFALSE 20151
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20120: LD_VAR 0 1
20124: PPUSH
20125: LD_VAR 0 2
20129: PPUSH
20130: CALL_OW 250
20134: PPUSH
20135: LD_VAR 0 2
20139: PPUSH
20140: CALL_OW 251
20144: PPUSH
20145: CALL_OW 191
// end ;
20149: GO 20117
20151: POP
20152: POP
// end ;
20153: GO 20077
20155: POP
20156: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20157: LD_INT 22
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 25
20169: PUSH
20170: LD_INT 4
20172: PUSH
20173: EMPTY
20174: LIST
20175: LIST
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PPUSH
20181: CALL_OW 69
20185: PUSH
20186: LD_INT 0
20188: EQUAL
20189: PUSH
20190: LD_EXP 32
20194: PUSH
20195: LD_INT 6
20197: PUSH
20198: LD_INT 7
20200: PUSH
20201: LD_INT 8
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: PUSH
20209: LD_OWVAR 67
20213: ARRAY
20214: GREATEREQUAL
20215: OR
20216: PUSH
20217: LD_INT 19
20219: PPUSH
20220: LD_INT 22
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 25
20232: PUSH
20233: LD_INT 12
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: CALL_OW 70
20248: PUSH
20249: LD_INT 0
20251: EQUAL
20252: OR
20253: IFFALSE 20036
// disableHealAI = 0 ;
20255: LD_ADDR_EXP 33
20259: PUSH
20260: LD_INT 0
20262: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: LD_INT 22
20270: PUSH
20271: LD_INT 3
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 25
20280: PUSH
20281: LD_INT 12
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PPUSH
20292: CALL_OW 69
20296: PUSH
20297: FOR_IN
20298: IFFALSE 20314
// SetClass ( i , 16 ) ;
20300: LD_VAR 0 1
20304: PPUSH
20305: LD_INT 16
20307: PPUSH
20308: CALL_OW 336
20312: GO 20297
20314: POP
20315: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20316: LD_ADDR_VAR 0 1
20320: PUSH
20321: LD_INT 22
20323: PUSH
20324: LD_INT 3
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 25
20333: PUSH
20334: LD_INT 4
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 69
20349: PUSH
20350: FOR_IN
20351: IFFALSE 20370
// ComMoveXY ( i , 113 , 94 ) ;
20353: LD_VAR 0 1
20357: PPUSH
20358: LD_INT 113
20360: PPUSH
20361: LD_INT 94
20363: PPUSH
20364: CALL_OW 111
20368: GO 20350
20370: POP
20371: POP
// end ;
20372: PPOPN 2
20374: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20375: LD_INT 21
20377: PPUSH
20378: CALL_OW 255
20382: PUSH
20383: LD_INT 3
20385: EQUAL
20386: PUSH
20387: LD_INT 21
20389: PPUSH
20390: CALL_OW 302
20394: AND
20395: PUSH
20396: LD_INT 22
20398: PUSH
20399: LD_INT 3
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 34
20408: PUSH
20409: LD_INT 51
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PPUSH
20420: CALL_OW 69
20424: PUSH
20425: LD_INT 0
20427: EQUAL
20428: AND
20429: IFFALSE 20461
20431: GO 20433
20433: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20434: LD_INT 21
20436: PPUSH
20437: LD_INT 23
20439: PPUSH
20440: LD_INT 1
20442: PPUSH
20443: LD_INT 1
20445: PPUSH
20446: LD_INT 51
20448: PPUSH
20449: CALL_OW 185
// wait ( 5 5$0 ) ;
20453: LD_INT 10500
20455: PPUSH
20456: CALL_OW 67
// enable ;
20460: ENABLE
// end ; end_of_file
20461: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
20462: LD_EXP 26
20466: PUSH
20467: LD_INT 0
20469: LESSEQUAL
20470: IFFALSE 20619
20472: GO 20474
20474: DISABLE
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
20479: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20480: LD_ADDR_VAR 0 2
20484: PUSH
20485: LD_INT 22
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 21
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: PUSH
20508: LD_INT 30
20510: PUSH
20511: LD_INT 0
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 30
20520: PUSH
20521: LD_INT 1
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: LIST
20537: PPUSH
20538: CALL_OW 69
20542: ST_TO_ADDR
// for i in tmp do
20543: LD_ADDR_VAR 0 1
20547: PUSH
20548: LD_VAR 0 2
20552: PUSH
20553: FOR_IN
20554: IFFALSE 20587
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
20556: LD_ADDR_VAR 0 3
20560: PUSH
20561: LD_VAR 0 3
20565: PUSH
20566: LD_VAR 0 1
20570: PPUSH
20571: CALL_OW 274
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: CALL_OW 275
20583: PLUS
20584: ST_TO_ADDR
20585: GO 20553
20587: POP
20588: POP
// if yourCrates >= needCrates then
20589: LD_VAR 0 3
20593: PUSH
20594: LD_EXP 25
20598: GREATEREQUAL
20599: IFFALSE 20612
// begin FinishMission ( yourCrates ) ;
20601: LD_VAR 0 3
20605: PPUSH
20606: CALL 20622 0 1
// end else
20610: GO 20619
// begin YouLost ( matmin ) ;
20612: LD_STRING matmin
20614: PPUSH
20615: CALL_OW 104
// end ; end ;
20619: PPOPN 3
20621: END
// export function FinishMission ( crates ) ; begin
20622: LD_INT 0
20624: PPUSH
// if crates + 100 > crates then
20625: LD_VAR 0 1
20629: PUSH
20630: LD_INT 100
20632: PLUS
20633: PUSH
20634: LD_VAR 0 1
20638: GREATER
20639: IFFALSE 20663
// begin AddMedal ( cans , 1 ) ;
20641: LD_STRING cans
20643: PPUSH
20644: LD_INT 1
20646: PPUSH
20647: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
20651: LD_INT 1
20653: PPUSH
20654: LD_STRING 06_crates_1
20656: PPUSH
20657: CALL_OW 39
// end else
20661: GO 20684
// begin AddMedal ( cans , - 1 ) ;
20663: LD_STRING cans
20665: PPUSH
20666: LD_INT 1
20668: NEG
20669: PPUSH
20670: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
20674: LD_INT 0
20676: PPUSH
20677: LD_STRING 06_crates_1
20679: PPUSH
20680: CALL_OW 39
// end ; if unitLost < 2 then
20684: LD_EXP 30
20688: PUSH
20689: LD_INT 2
20691: LESS
20692: IFFALSE 20706
// begin AddMedal ( people , 1 ) ;
20694: LD_STRING people
20696: PPUSH
20697: LD_INT 1
20699: PPUSH
20700: CALL_OW 101
// end else
20704: GO 20717
// begin AddMedal ( people , - 1 ) ;
20706: LD_STRING people
20708: PPUSH
20709: LD_INT 1
20711: NEG
20712: PPUSH
20713: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
20717: LD_EXP 28
20721: PPUSH
20722: LD_STRING 06_remoteVehs_1
20724: PPUSH
20725: CALL_OW 39
// if remoteVehiclesBuild = 1 then
20729: LD_EXP 28
20733: PUSH
20734: LD_INT 1
20736: EQUAL
20737: IFFALSE 20751
// begin AddMedal ( remote , 1 ) ;
20739: LD_STRING remote
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: CALL_OW 101
// end else
20749: GO 20791
// begin if GetTech ( 18 , 1 ) = state_enabled then
20751: LD_INT 18
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: CALL_OW 321
20761: PUSH
20762: LD_INT 1
20764: EQUAL
20765: IFFALSE 20780
// begin AddMedal ( remote , - 1 ) ;
20767: LD_STRING remote
20769: PPUSH
20770: LD_INT 1
20772: NEG
20773: PPUSH
20774: CALL_OW 101
// end else
20778: GO 20791
// begin AddMedal ( remote , - 2 ) ;
20780: LD_STRING remote
20782: PPUSH
20783: LD_INT 2
20785: NEG
20786: PPUSH
20787: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
20791: LD_EXP 20
20795: PPUSH
20796: LD_STRING 06_KurtStatus_1
20798: PPUSH
20799: CALL_OW 39
// GiveMedals ( Main ) ;
20803: LD_STRING Main
20805: PPUSH
20806: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
20810: LD_INT 50
20812: PUSH
20813: EMPTY
20814: LIST
20815: PUSH
20816: LD_INT 22
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 21
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 2
20838: PUSH
20839: LD_INT 25
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 25
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 25
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 25
20871: PUSH
20872: LD_INT 4
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: PPUSH
20897: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20901: LD_EXP 1
20905: PPUSH
20906: LD_EXP 43
20910: PUSH
20911: LD_STRING JMM
20913: STR
20914: PPUSH
20915: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20919: LD_EXP 2
20923: PPUSH
20924: LD_EXP 43
20928: PUSH
20929: LD_STRING Lisa
20931: STR
20932: PPUSH
20933: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20937: LD_EXP 3
20941: PPUSH
20942: LD_EXP 43
20946: PUSH
20947: LD_STRING Bobby
20949: STR
20950: PPUSH
20951: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20955: LD_EXP 4
20959: PPUSH
20960: LD_EXP 43
20964: PUSH
20965: LD_STRING Cyrus
20967: STR
20968: PPUSH
20969: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
20973: LD_EXP 5
20977: PPUSH
20978: LD_EXP 43
20982: PUSH
20983: LD_STRING Frank
20985: STR
20986: PPUSH
20987: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
20991: LD_EXP 6
20995: PPUSH
20996: LD_EXP 43
21000: PUSH
21001: LD_STRING Brown
21003: STR
21004: PPUSH
21005: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21009: LD_EXP 7
21013: PPUSH
21014: LD_EXP 43
21018: PUSH
21019: LD_STRING Donaldson
21021: STR
21022: PPUSH
21023: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21027: LD_EXP 8
21031: PPUSH
21032: LD_EXP 43
21036: PUSH
21037: LD_STRING Gladstone
21039: STR
21040: PPUSH
21041: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21045: LD_EXP 9
21049: PPUSH
21050: LD_EXP 43
21054: PUSH
21055: LD_STRING Denis
21057: STR
21058: PPUSH
21059: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21063: LD_EXP 15
21067: PPUSH
21068: LD_EXP 43
21072: PUSH
21073: LD_STRING Joan
21075: STR
21076: PPUSH
21077: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21081: LD_EXP 16
21085: PPUSH
21086: LD_STRING 06_JoanStatus_1
21088: PPUSH
21089: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21093: LD_INT 50
21095: PUSH
21096: EMPTY
21097: LIST
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 25
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 25
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 25
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PUSH
21152: LD_INT 25
21154: PUSH
21155: LD_INT 4
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: PPUSH
21175: CALL_OW 69
21179: PUSH
21180: LD_EXP 1
21184: PUSH
21185: LD_EXP 2
21189: PUSH
21190: LD_EXP 3
21194: PUSH
21195: LD_EXP 4
21199: PUSH
21200: LD_EXP 5
21204: PUSH
21205: LD_EXP 6
21209: PUSH
21210: LD_EXP 7
21214: PUSH
21215: LD_EXP 8
21219: PUSH
21220: LD_EXP 9
21224: PUSH
21225: LD_EXP 15
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: DIFF
21242: PPUSH
21243: LD_STRING 06_other_survivors
21245: PPUSH
21246: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21250: LD_INT 50
21252: PUSH
21253: EMPTY
21254: LIST
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_INT 1
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 21
21268: PUSH
21269: LD_INT 1
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 2
21278: PUSH
21279: LD_INT 25
21281: PUSH
21282: LD_INT 12
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 25
21291: PUSH
21292: LD_INT 16
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: PPUSH
21315: LD_STRING 06_other_apemans
21317: PPUSH
21318: CALL_OW 38
// YouWin ;
21322: CALL_OW 103
// end ; end_of_file
21326: LD_VAR 0 2
21330: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21331: LD_EXP 39
21335: PUSH
21336: LD_INT 3
21338: EQUAL
21339: IFFALSE 21454
21341: GO 21343
21343: DISABLE
// begin enable ;
21344: ENABLE
// sendedConvoys = 0 ;
21345: LD_ADDR_EXP 39
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21353: LD_INT 6
21355: PPUSH
21356: LD_INT 3
21358: PPUSH
21359: LD_INT 5
21361: PPUSH
21362: LD_INT 10
21364: PPUSH
21365: CALL_OW 12
21369: PUSH
21370: LD_INT 5
21372: PPUSH
21373: LD_INT 11
21375: PPUSH
21376: CALL_OW 12
21380: PUSH
21381: LD_INT 8
21383: PPUSH
21384: LD_INT 12
21386: PPUSH
21387: CALL_OW 12
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: PUSH
21397: LD_OWVAR 67
21401: ARRAY
21402: PPUSH
21403: LD_INT 0
21405: PPUSH
21406: LD_INT 0
21408: PPUSH
21409: LD_INT 0
21411: PPUSH
21412: LD_INT 3
21414: PPUSH
21415: LD_EXP 34
21419: PPUSH
21420: LD_EXP 35
21424: PPUSH
21425: CALL_OW 12
21429: PPUSH
21430: LD_INT 18
21432: PPUSH
21433: LD_INT 17
21435: PPUSH
21436: LD_INT 1
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: LD_INT 2
21444: PPUSH
21445: CALL_OW 12
21449: PPUSH
21450: CALL 9302 0 12
// end ; end_of_file
21454: END
// export function PrepareNature ; var i , un ; begin
21455: LD_INT 0
21457: PPUSH
21458: PPUSH
21459: PPUSH
// for i = 1 to Difficulty + 2 do
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: DOUBLE
21466: LD_INT 1
21468: DEC
21469: ST_TO_ADDR
21470: LD_OWVAR 67
21474: PUSH
21475: LD_INT 2
21477: PLUS
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21589
// begin hc_sex = sex_male ;
21482: LD_ADDR_OWVAR 27
21486: PUSH
21487: LD_INT 1
21489: ST_TO_ADDR
// uc_side = 0 ;
21490: LD_ADDR_OWVAR 20
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// uc_nation = nation_nature ;
21498: LD_ADDR_OWVAR 21
21502: PUSH
21503: LD_INT 0
21505: ST_TO_ADDR
// hc_class = class_tiger ;
21506: LD_ADDR_OWVAR 28
21510: PUSH
21511: LD_INT 14
21513: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21514: LD_ADDR_OWVAR 31
21518: PUSH
21519: LD_EXP 35
21523: PUSH
21524: LD_INT 0
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21539: LD_ADDR_OWVAR 35
21543: PUSH
21544: LD_INT 5
21546: NEG
21547: PPUSH
21548: LD_INT 5
21550: PPUSH
21551: CALL_OW 12
21555: PUSH
21556: LD_OWVAR 67
21560: MUL
21561: ST_TO_ADDR
// un = CreateHuman ;
21562: LD_ADDR_VAR 0 3
21566: PUSH
21567: CALL_OW 44
21571: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 20
21579: PPUSH
21580: LD_INT 0
21582: PPUSH
21583: CALL_OW 49
// end ;
21587: GO 21479
21589: POP
21590: POP
// for i = 1 to rand ( 3 , 4 ) do
21591: LD_ADDR_VAR 0 2
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_INT 3
21603: PPUSH
21604: LD_INT 4
21606: PPUSH
21607: CALL_OW 12
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21707
// begin hc_sex = sex_male ;
21615: LD_ADDR_OWVAR 27
21619: PUSH
21620: LD_INT 1
21622: ST_TO_ADDR
// uc_side = 0 ;
21623: LD_ADDR_OWVAR 20
21627: PUSH
21628: LD_INT 0
21630: ST_TO_ADDR
// uc_nation = nation_nature ;
21631: LD_ADDR_OWVAR 21
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
// hc_class = 18 ;
21639: LD_ADDR_OWVAR 28
21643: PUSH
21644: LD_INT 18
21646: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21647: LD_ADDR_OWVAR 31
21651: PUSH
21652: LD_EXP 35
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// hc_agressivity = 0 ;
21672: LD_ADDR_OWVAR 35
21676: PUSH
21677: LD_INT 0
21679: ST_TO_ADDR
// un = CreateHuman ;
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: CALL_OW 44
21689: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
21690: LD_VAR 0 3
21694: PPUSH
21695: LD_INT 20
21697: PPUSH
21698: LD_INT 0
21700: PPUSH
21701: CALL_OW 49
// end ;
21705: GO 21612
21707: POP
21708: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
21709: LD_ADDR_VAR 0 2
21713: PUSH
21714: DOUBLE
21715: LD_INT 1
21717: DEC
21718: ST_TO_ADDR
21719: LD_INT 1
21721: PPUSH
21722: LD_INT 3
21724: PPUSH
21725: CALL_OW 12
21729: PUSH
21730: LD_OWVAR 67
21734: PLUS
21735: PUSH
21736: FOR_TO
21737: IFFALSE 21918
// begin hc_sex = sex_male ;
21739: LD_ADDR_OWVAR 27
21743: PUSH
21744: LD_INT 1
21746: ST_TO_ADDR
// uc_side = 0 ;
21747: LD_ADDR_OWVAR 20
21751: PUSH
21752: LD_INT 0
21754: ST_TO_ADDR
// uc_nation = nation_nature ;
21755: LD_ADDR_OWVAR 21
21759: PUSH
21760: LD_INT 0
21762: ST_TO_ADDR
// hc_class = class_apeman ;
21763: LD_ADDR_OWVAR 28
21767: PUSH
21768: LD_INT 12
21770: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21771: LD_ADDR_OWVAR 31
21775: PUSH
21776: LD_EXP 34
21780: PPUSH
21781: LD_EXP 35
21785: PPUSH
21786: CALL_OW 12
21790: PUSH
21791: LD_EXP 34
21795: PPUSH
21796: LD_EXP 35
21800: PPUSH
21801: CALL_OW 12
21805: PUSH
21806: LD_EXP 34
21810: PPUSH
21811: LD_EXP 35
21815: PPUSH
21816: CALL_OW 12
21820: PUSH
21821: LD_EXP 34
21825: PPUSH
21826: LD_EXP 35
21830: PPUSH
21831: CALL_OW 12
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
21842: LD_ADDR_OWVAR 35
21846: PUSH
21847: LD_INT 20
21849: PPUSH
21850: LD_INT 30
21852: PPUSH
21853: CALL_OW 12
21857: PUSH
21858: LD_INT 30
21860: PPUSH
21861: LD_INT 40
21863: PPUSH
21864: CALL_OW 12
21868: PUSH
21869: LD_INT 40
21871: PPUSH
21872: LD_INT 50
21874: PPUSH
21875: CALL_OW 12
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: PUSH
21885: LD_OWVAR 67
21889: ARRAY
21890: ST_TO_ADDR
// un = CreateHuman ;
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: CALL_OW 44
21900: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
21901: LD_VAR 0 3
21905: PPUSH
21906: LD_INT 21
21908: PPUSH
21909: LD_INT 0
21911: PPUSH
21912: CALL_OW 49
// end ;
21916: GO 21736
21918: POP
21919: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: DOUBLE
21926: LD_INT 1
21928: DEC
21929: ST_TO_ADDR
21930: LD_INT 5
21932: PPUSH
21933: LD_INT 6
21935: PPUSH
21936: CALL_OW 12
21940: PUSH
21941: LD_OWVAR 67
21945: PLUS
21946: PUSH
21947: FOR_TO
21948: IFFALSE 22094
// begin hc_sex = sex_male ;
21950: LD_ADDR_OWVAR 27
21954: PUSH
21955: LD_INT 1
21957: ST_TO_ADDR
// uc_side = 0 ;
21958: LD_ADDR_OWVAR 20
21962: PUSH
21963: LD_INT 0
21965: ST_TO_ADDR
// uc_nation = nation_nature ;
21966: LD_ADDR_OWVAR 21
21970: PUSH
21971: LD_INT 0
21973: ST_TO_ADDR
// hc_class = class_apeman ;
21974: LD_ADDR_OWVAR 28
21978: PUSH
21979: LD_INT 12
21981: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
21982: LD_ADDR_OWVAR 31
21986: PUSH
21987: LD_EXP 34
21991: PPUSH
21992: LD_EXP 35
21996: PPUSH
21997: CALL_OW 12
22001: PUSH
22002: LD_EXP 34
22006: PPUSH
22007: LD_EXP 35
22011: PPUSH
22012: CALL_OW 12
22016: PUSH
22017: LD_OWVAR 67
22021: PLUS
22022: PUSH
22023: LD_EXP 34
22027: PPUSH
22028: LD_EXP 35
22032: PPUSH
22033: CALL_OW 12
22037: PUSH
22038: LD_EXP 34
22042: PPUSH
22043: LD_EXP 35
22047: PPUSH
22048: CALL_OW 12
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: ST_TO_ADDR
// hc_agressivity = 0 ;
22059: LD_ADDR_OWVAR 35
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// un = CreateHuman ;
22067: LD_ADDR_VAR 0 3
22071: PUSH
22072: CALL_OW 44
22076: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22077: LD_VAR 0 3
22081: PPUSH
22082: LD_INT 22
22084: PPUSH
22085: LD_INT 0
22087: PPUSH
22088: CALL_OW 49
// end ;
22092: GO 21947
22094: POP
22095: POP
// end ; end_of_file
22096: LD_VAR 0 1
22100: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22101: LD_EXP 1
22105: PPUSH
22106: CALL_OW 301
22110: IFFALSE 22122
22112: GO 22114
22114: DISABLE
// YouLost ( JMM ) ;
22115: LD_STRING JMM
22117: PPUSH
22118: CALL_OW 104
22122: END
