// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; export ignoreTarget , arrivals ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$00 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// ignoreTarget := [ ] ;
 178: LD_ADDR_EXP 45
 182: PUSH
 183: EMPTY
 184: ST_TO_ADDR
// arrivals := [ ] ;
 185: LD_ADDR_EXP 46
 189: PUSH
 190: EMPTY
 191: ST_TO_ADDR
// unitLost = 0 ;
 192: LD_ADDR_EXP 30
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 200: LD_ADDR_EXP 31
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// russianTanks = [ ] ;
 207: LD_ADDR_EXP 36
 211: PUSH
 212: EMPTY
 213: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 214: LD_ADDR_EXP 37
 218: PUSH
 219: EMPTY
 220: ST_TO_ADDR
// disableHealAI = 0 ;
 221: LD_ADDR_EXP 33
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// strings = [ ] ;
 229: LD_ADDR_EXP 27
 233: PUSH
 234: EMPTY
 235: ST_TO_ADDR
// ChangeSideFog ( 4 , 1 ) ;
 236: LD_INT 4
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 343
// PrepareDifficulty ;
 246: CALL 6367 0 0
// PrepareNature ;
 250: CALL 23250 0 0
// PrepareRussian ;
 254: CALL 5474 0 0
// PrepareVehicles ;
 258: CALL 1505 0 0
// PrepareHeroes ;
 262: CALL 513 0 0
// PrepareOthers ;
 266: CALL 1926 0 0
// PreparePlayerApemans ;
 270: CALL 2068 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 42
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 510
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 30
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PPUSH
 381: CALL_OW 69
 385: PUSH
 386: FOR_IN
 387: IFFALSE 411
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 389: LD_VAR 0 1
 393: PPUSH
 394: CALL_OW 274
 398: PPUSH
 399: LD_INT 1
 401: PPUSH
 402: LD_INT 9999
 404: PPUSH
 405: CALL_OW 277
 409: GO 386
 411: POP
 412: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 413: LD_ADDR_VAR 0 1
 417: PUSH
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 2
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// if IsSelected ( rudepo ) then
 474: LD_INT 2
 476: PPUSH
 477: CALL_OW 306
 481: IFFALSE 491
// your_side = 3 ;
 483: LD_ADDR_OWVAR 2
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// if IsSelected ( JMM ) then
 491: LD_EXP 1
 495: PPUSH
 496: CALL_OW 306
 500: IFFALSE 510
// your_side = 1 ;
 502: LD_ADDR_OWVAR 2
 506: PUSH
 507: LD_INT 1
 509: ST_TO_ADDR
// end ; end_of_file
 510: PPOPN 1
 512: END
// export function PrepareHeroes ; var veh ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 5851 0 2
 548: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 549: LD_ADDR_EXP 14
 553: PUSH
 554: LD_STRING Harisson
 556: PPUSH
 557: LD_INT 0
 559: PPUSH
 560: CALL 5851 0 2
 564: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_STRING DeltaDoctor
 572: PPUSH
 573: CALL_OW 34
 577: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 578: LD_ADDR_VAR 0 2
 582: PUSH
 583: LD_INT 22
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 58
 605: PUSH
 606: EMPTY
 607: LIST
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: PPUSH
 614: CALL_OW 69
 618: ST_TO_ADDR
// if veh > 0 then
 619: LD_VAR 0 2
 623: PUSH
 624: LD_INT 0
 626: GREATER
 627: IFFALSE 649
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 629: LD_EXP 1
 633: PPUSH
 634: LD_VAR 0 2
 638: PUSH
 639: LD_INT 1
 641: ARRAY
 642: PPUSH
 643: CALL_OW 52
// end else
 647: GO 664
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 664: LD_STRING LisaIn06
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 30
 674: PUSH
 675: LD_INT 1
 677: EQUAL
 678: IFFALSE 782
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 680: LD_ADDR_VAR 0 2
 684: PUSH
 685: LD_INT 22
 687: PUSH
 688: LD_INT 1
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PUSH
 695: LD_INT 21
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 58
 707: PUSH
 708: EMPTY
 709: LIST
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: PPUSH
 716: CALL_OW 69
 720: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 721: LD_ADDR_EXP 2
 725: PUSH
 726: LD_STRING Lisa
 728: PPUSH
 729: LD_INT 1
 731: PPUSH
 732: CALL 5851 0 2
 736: ST_TO_ADDR
// if veh > 0 then
 737: LD_VAR 0 2
 741: PUSH
 742: LD_INT 0
 744: GREATER
 745: IFFALSE 767
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 747: LD_EXP 2
 751: PPUSH
 752: LD_VAR 0 2
 756: PUSH
 757: LD_INT 1
 759: ARRAY
 760: PPUSH
 761: CALL_OW 52
// end else
 765: GO 782
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 767: LD_EXP 2
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 782: LD_STRING BobbyIn06
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 30
 792: PUSH
 793: LD_INT 1
 795: EQUAL
 796: IFFALSE 900
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 798: LD_ADDR_VAR 0 2
 802: PUSH
 803: LD_INT 22
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 21
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PUSH
 823: LD_INT 58
 825: PUSH
 826: EMPTY
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: PPUSH
 834: CALL_OW 69
 838: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING Bobby
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 5851 0 2
 854: ST_TO_ADDR
// if veh > 0 then
 855: LD_VAR 0 2
 859: PUSH
 860: LD_INT 0
 862: GREATER
 863: IFFALSE 885
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 865: LD_EXP 3
 869: PPUSH
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: ARRAY
 878: PPUSH
 879: CALL_OW 52
// end else
 883: GO 900
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 885: LD_EXP 3
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 900: LD_STRING CyrusIn06
 902: PPUSH
 903: LD_INT 0
 905: PPUSH
 906: CALL_OW 30
 910: PUSH
 911: LD_INT 1
 913: EQUAL
 914: IFFALSE 1018
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 916: LD_ADDR_VAR 0 2
 920: PUSH
 921: LD_INT 22
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 21
 933: PUSH
 934: LD_INT 2
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 58
 943: PUSH
 944: EMPTY
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 69
 956: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 957: LD_ADDR_EXP 4
 961: PUSH
 962: LD_STRING Cyrus
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: CALL 5851 0 2
 972: ST_TO_ADDR
// if veh > 0 then
 973: LD_VAR 0 2
 977: PUSH
 978: LD_INT 0
 980: GREATER
 981: IFFALSE 1003
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 983: LD_EXP 4
 987: PPUSH
 988: LD_VAR 0 2
 992: PUSH
 993: LD_INT 1
 995: ARRAY
 996: PPUSH
 997: CALL_OW 52
// end else
1001: GO 1018
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
1003: LD_EXP 4
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
1018: LD_STRING FrankIn06
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 30
1028: PUSH
1029: LD_INT 1
1031: EQUAL
1032: IFFALSE 1136
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1075: LD_ADDR_EXP 5
1079: PUSH
1080: LD_STRING Frank
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: CALL 5851 0 2
1090: ST_TO_ADDR
// if veh > 0 then
1091: LD_VAR 0 2
1095: PUSH
1096: LD_INT 0
1098: GREATER
1099: IFFALSE 1121
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1101: LD_EXP 5
1105: PPUSH
1106: LD_VAR 0 2
1110: PUSH
1111: LD_INT 1
1113: ARRAY
1114: PPUSH
1115: CALL_OW 52
// end else
1119: GO 1136
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1121: LD_EXP 5
1125: PPUSH
1126: LD_INT 2
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1136: LD_STRING BrownIn06
1138: PPUSH
1139: LD_INT 0
1141: PPUSH
1142: CALL_OW 30
1146: PUSH
1147: LD_INT 1
1149: EQUAL
1150: IFFALSE 1254
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1152: LD_ADDR_VAR 0 2
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1193: LD_ADDR_EXP 6
1197: PUSH
1198: LD_STRING Brown
1200: PPUSH
1201: LD_INT 1
1203: PPUSH
1204: CALL 5851 0 2
1208: ST_TO_ADDR
// if veh > 0 then
1209: LD_VAR 0 2
1213: PUSH
1214: LD_INT 0
1216: GREATER
1217: IFFALSE 1239
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1219: LD_EXP 6
1223: PPUSH
1224: LD_VAR 0 2
1228: PUSH
1229: LD_INT 1
1231: ARRAY
1232: PPUSH
1233: CALL_OW 52
// end else
1237: GO 1254
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1239: LD_EXP 6
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1254: LD_STRING DonaldsonIn06
1256: PPUSH
1257: LD_INT 0
1259: PPUSH
1260: CALL_OW 30
1264: PUSH
1265: LD_INT 1
1267: EQUAL
1268: IFFALSE 1372
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1270: LD_ADDR_VAR 0 2
1274: PUSH
1275: LD_INT 22
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 21
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 58
1297: PUSH
1298: EMPTY
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1311: LD_ADDR_EXP 7
1315: PUSH
1316: LD_STRING Donaldson
1318: PPUSH
1319: LD_INT 1
1321: PPUSH
1322: CALL 5851 0 2
1326: ST_TO_ADDR
// if veh > 0 then
1327: LD_VAR 0 2
1331: PUSH
1332: LD_INT 0
1334: GREATER
1335: IFFALSE 1357
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1337: LD_EXP 7
1341: PPUSH
1342: LD_VAR 0 2
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 52
// end else
1355: GO 1372
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1357: LD_EXP 7
1361: PPUSH
1362: LD_INT 2
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1372: LD_STRING GladstoneIn06
1374: PPUSH
1375: LD_INT 0
1377: PPUSH
1378: CALL_OW 30
1382: PUSH
1383: LD_INT 1
1385: EQUAL
1386: IFFALSE 1490
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 2
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_INT 1
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 21
1405: PUSH
1406: LD_INT 2
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 58
1415: PUSH
1416: EMPTY
1417: LIST
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: LIST
1423: PPUSH
1424: CALL_OW 69
1428: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1429: LD_ADDR_EXP 8
1433: PUSH
1434: LD_STRING Gladstone
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: CALL 5851 0 2
1444: ST_TO_ADDR
// if veh > 0 then
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 0
1452: GREATER
1453: IFFALSE 1475
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1455: LD_EXP 8
1459: PPUSH
1460: LD_VAR 0 2
1464: PUSH
1465: LD_INT 1
1467: ARRAY
1468: PPUSH
1469: CALL_OW 52
// end else
1473: GO 1490
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1475: LD_EXP 8
1479: PPUSH
1480: LD_INT 2
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// end ; end ; CenterNowOnXY ( 66 , 4 ) ;
1490: LD_INT 66
1492: PPUSH
1493: LD_INT 4
1495: PPUSH
1496: CALL_OW 86
// end ;
1500: LD_VAR 0 1
1504: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1505: LD_INT 0
1507: PPUSH
1508: PPUSH
1509: PPUSH
1510: PPUSH
1511: PPUSH
1512: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1513: LD_ADDR_VAR 0 5
1517: PUSH
1518: LD_STRING 06_VehiclesIn06_1
1520: PPUSH
1521: EMPTY
1522: PPUSH
1523: CALL_OW 30
1527: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1528: LD_ADDR_EXP 40
1532: PUSH
1533: LD_STRING 06_ResourcesInCargo06_1
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// cargoList = [ ] ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: EMPTY
1549: ST_TO_ADDR
// uc_side = 1 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 1
1557: ST_TO_ADDR
// if vehicles > 0 then
1558: LD_VAR 0 5
1562: PUSH
1563: LD_INT 0
1565: GREATER
1566: IFFALSE 1921
// begin for i := 1 to vehicles do
1568: LD_ADDR_VAR 0 2
1572: PUSH
1573: DOUBLE
1574: LD_INT 1
1576: DEC
1577: ST_TO_ADDR
1578: LD_VAR 0 5
1582: PUSH
1583: FOR_TO
1584: IFFALSE 1733
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1586: LD_ADDR_OWVAR 21
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: LD_VAR 0 2
1600: ARRAY
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1606: LD_ADDR_OWVAR 37
1610: PUSH
1611: LD_VAR 0 5
1615: PUSH
1616: LD_VAR 0 2
1620: ARRAY
1621: PUSH
1622: LD_INT 2
1624: ARRAY
1625: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1626: LD_ADDR_OWVAR 39
1630: PUSH
1631: LD_VAR 0 5
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 3
1644: ARRAY
1645: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1646: LD_ADDR_OWVAR 38
1650: PUSH
1651: LD_VAR 0 5
1655: PUSH
1656: LD_VAR 0 2
1660: ARRAY
1661: PUSH
1662: LD_INT 4
1664: ARRAY
1665: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1666: LD_ADDR_OWVAR 40
1670: PUSH
1671: LD_VAR 0 5
1675: PUSH
1676: LD_VAR 0 2
1680: ARRAY
1681: PUSH
1682: LD_INT 5
1684: ARRAY
1685: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1686: LD_ADDR_OWVAR 41
1690: PUSH
1691: LD_INT 40
1693: ST_TO_ADDR
// veh = CreateVehicle ;
1694: LD_ADDR_VAR 0 4
1698: PUSH
1699: CALL_OW 45
1703: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1704: LD_VAR 0 4
1708: PPUSH
1709: LD_INT 3
1711: PPUSH
1712: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1716: LD_VAR 0 4
1720: PPUSH
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1583
1733: POP
1734: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1735: LD_ADDR_VAR 0 6
1739: PUSH
1740: LD_INT 22
1742: PUSH
1743: LD_INT 1
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 21
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 34
1762: PUSH
1763: LD_INT 12
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PPUSH
1775: CALL_OW 69
1779: ST_TO_ADDR
// if cargoList > 0 then
1780: LD_VAR 0 6
1784: PUSH
1785: LD_INT 0
1787: GREATER
1788: IFFALSE 1921
// for i = 1 to cargoList do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: DOUBLE
1796: LD_INT 1
1798: DEC
1799: ST_TO_ADDR
1800: LD_VAR 0 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1919
// begin if resources > 0 then
1808: LD_EXP 40
1812: PUSH
1813: LD_INT 0
1815: GREATER
1816: IFFALSE 1917
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1818: LD_VAR 0 6
1822: PUSH
1823: LD_VAR 0 2
1827: ARRAY
1828: PPUSH
1829: LD_INT 1
1831: PPUSH
1832: LD_EXP 40
1836: PUSH
1837: LD_VAR 0 2
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1851: LD_VAR 0 6
1855: PUSH
1856: LD_VAR 0 2
1860: ARRAY
1861: PPUSH
1862: LD_INT 2
1864: PPUSH
1865: LD_EXP 40
1869: PUSH
1870: LD_VAR 0 2
1874: ARRAY
1875: PUSH
1876: LD_INT 2
1878: ARRAY
1879: PPUSH
1880: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1884: LD_VAR 0 6
1888: PUSH
1889: LD_VAR 0 2
1893: ARRAY
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_EXP 40
1902: PUSH
1903: LD_VAR 0 2
1907: ARRAY
1908: PUSH
1909: LD_INT 3
1911: ARRAY
1912: PPUSH
1913: CALL_OW 291
// end ; end ;
1917: GO 1805
1919: POP
1920: POP
// end ; end ;
1921: LD_VAR 0 1
1925: RET
// export function PrepareOthers ; var i , veh ; begin
1926: LD_INT 0
1928: PPUSH
1929: PPUSH
1930: PPUSH
// uc_side = 1 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 1
1938: ST_TO_ADDR
// uc_nation = 1 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 1
1946: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1947: LD_ADDR_EXP 11
1951: PUSH
1952: LD_STRING OthersIn06
1954: PPUSH
1955: CALL_OW 31
1959: ST_TO_ADDR
// for i in others do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: LD_EXP 11
1969: PUSH
1970: FOR_IN
1971: IFFALSE 2061
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 22
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 21
1990: PUSH
1991: LD_INT 2
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 58
2000: PUSH
2001: EMPTY
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PPUSH
2009: CALL_OW 69
2013: ST_TO_ADDR
// if veh > 0 then
2014: LD_VAR 0 3
2018: PUSH
2019: LD_INT 0
2021: GREATER
2022: IFFALSE 2044
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
2024: LD_VAR 0 2
2028: PPUSH
2029: LD_VAR 0 3
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 52
// end else
2042: GO 2059
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_INT 2
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 49
// end ; end ;
2059: GO 1970
2061: POP
2062: POP
// end ;
2063: LD_VAR 0 1
2067: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2068: LD_INT 0
2070: PPUSH
2071: PPUSH
2072: PPUSH
// uc_side = 1 ;
2073: LD_ADDR_OWVAR 20
2077: PUSH
2078: LD_INT 1
2080: ST_TO_ADDR
// uc_nation = 0 ;
2081: LD_ADDR_OWVAR 21
2085: PUSH
2086: LD_INT 0
2088: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2089: LD_ADDR_EXP 12
2093: PUSH
2094: LD_STRING ApeIn06
2096: PPUSH
2097: CALL_OW 31
2101: ST_TO_ADDR
// for i in ape do
2102: LD_ADDR_VAR 0 2
2106: PUSH
2107: LD_EXP 12
2111: PUSH
2112: FOR_IN
2113: IFFALSE 2132
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2115: LD_VAR 0 2
2119: PPUSH
2120: LD_INT 2
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: CALL_OW 49
2130: GO 2112
2132: POP
2133: POP
// end ;
2134: LD_VAR 0 1
2138: RET
// export function PrepareDenis ; var _xy , xy , i ; begin
2139: LD_INT 0
2141: PPUSH
2142: PPUSH
2143: PPUSH
2144: PPUSH
// uc_side = 4 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 4
2152: ST_TO_ADDR
// uc_nation = 1 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 1
2160: ST_TO_ADDR
// xy := [ [ 63 , 1 ] , [ 70 , 1 ] , [ 83 , 1 ] , [ 16 , 1 ] , [ 27 , 1 ] , [ 38 , 1 ] , [ 5 , 1 ] , [ 54 , 1 ] ] ;
2161: LD_ADDR_VAR 0 3
2165: PUSH
2166: LD_INT 63
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 70
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 83
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 16
2198: PUSH
2199: LD_INT 1
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 27
2208: PUSH
2209: LD_INT 1
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 38
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: LD_INT 5
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 54
2238: PUSH
2239: LD_INT 1
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: ST_TO_ADDR
// for i in xy do
2256: LD_ADDR_VAR 0 4
2260: PUSH
2261: LD_VAR 0 3
2265: PUSH
2266: FOR_IN
2267: IFFALSE 2329
// if HexInfo ( xy [ i ] [ 1 ] , xy [ i ] [ 2 ] ) = 0 then
2269: LD_VAR 0 3
2273: PUSH
2274: LD_VAR 0 4
2278: ARRAY
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_VAR 0 3
2288: PUSH
2289: LD_VAR 0 4
2293: ARRAY
2294: PUSH
2295: LD_INT 2
2297: ARRAY
2298: PPUSH
2299: CALL_OW 428
2303: PUSH
2304: LD_INT 0
2306: EQUAL
2307: IFFALSE 2327
// begin _xy := xy [ i ] ;
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: PUSH
2319: LD_VAR 0 4
2323: ARRAY
2324: ST_TO_ADDR
// break ;
2325: GO 2329
// end ;
2327: GO 2266
2329: POP
2330: POP
// Denis = PrepareUnit ( Denis , true ) ;
2331: LD_ADDR_EXP 9
2335: PUSH
2336: LD_STRING Denis
2338: PPUSH
2339: LD_INT 1
2341: PPUSH
2342: CALL 5851 0 2
2346: ST_TO_ADDR
// PlaceUnitXY ( Denis , _xy [ 1 ] , _xy [ 2 ] , false ) ;
2347: LD_EXP 9
2351: PPUSH
2352: LD_VAR 0 2
2356: PUSH
2357: LD_INT 1
2359: ARRAY
2360: PPUSH
2361: LD_VAR 0 2
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PPUSH
2370: LD_INT 0
2372: PPUSH
2373: CALL_OW 48
// SetClass ( Denis , 4 ) ;
2377: LD_EXP 9
2381: PPUSH
2382: LD_INT 4
2384: PPUSH
2385: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_INT 750
2396: PPUSH
2397: CALL_OW 234
// end ;
2401: LD_VAR 0 1
2405: RET
// export function HarrisonSupport ; var un , veh , area , dir ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
2411: PPUSH
2412: PPUSH
// area := HarrisonSupportArea ;
2413: LD_ADDR_VAR 0 4
2417: PUSH
2418: LD_INT 3
2420: ST_TO_ADDR
// dir := 2 ;
2421: LD_ADDR_VAR 0 5
2425: PUSH
2426: LD_INT 2
2428: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_type , unit_building ] ) then
2429: LD_VAR 0 4
2433: PPUSH
2434: LD_INT 21
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 70
2448: IFFALSE 2466
// begin area := HarrisonSupportArea2 ;
2450: LD_ADDR_VAR 0 4
2454: PUSH
2455: LD_INT 31
2457: ST_TO_ADDR
// dir := 1 ;
2458: LD_ADDR_VAR 0 5
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// end ; uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// uc_nation = 1 ;
2474: LD_ADDR_OWVAR 21
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// vc_engine = 1 ;
2482: LD_ADDR_OWVAR 39
2486: PUSH
2487: LD_INT 1
2489: ST_TO_ADDR
// vc_control = 1 ;
2490: LD_ADDR_OWVAR 38
2494: PUSH
2495: LD_INT 1
2497: ST_TO_ADDR
// vc_weapon = [ us_gatling_gun , us_gatling_gun , us_machine_gun ] [ Difficulty ] ;
2498: LD_ADDR_OWVAR 40
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: LD_INT 4
2508: PUSH
2509: LD_INT 2
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_OWVAR 67
2521: ARRAY
2522: ST_TO_ADDR
// vc_chassis = 2 ;
2523: LD_ADDR_OWVAR 37
2527: PUSH
2528: LD_INT 2
2530: ST_TO_ADDR
// veh = CreateVehicle ;
2531: LD_ADDR_VAR 0 3
2535: PUSH
2536: CALL_OW 45
2540: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2541: LD_VAR 0 3
2545: PPUSH
2546: LD_VAR 0 5
2550: PPUSH
2551: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_VAR 0 4
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 50
2579: PPUSH
2580: CALL_OW 240
// hc_class := 2 ;
2584: LD_ADDR_OWVAR 28
2588: PUSH
2589: LD_INT 2
2591: ST_TO_ADDR
// hc_sex := sex_male ;
2592: LD_ADDR_OWVAR 27
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2600: LD_ADDR_OWVAR 33
2604: PUSH
2605: LD_STRING SecondCharsGal
2607: ST_TO_ADDR
// hc_face_number := 52 ;
2608: LD_ADDR_OWVAR 34
2612: PUSH
2613: LD_INT 52
2615: ST_TO_ADDR
// hc_name := Craig Brown ;
2616: LD_ADDR_OWVAR 26
2620: PUSH
2621: LD_STRING Craig Brown
2623: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2624: LD_ADDR_OWVAR 29
2628: PUSH
2629: LD_INT 10
2631: PUSH
2632: LD_INT 10
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2639: LD_ADDR_OWVAR 30
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: LD_INT 0
2652: PUSH
2653: LD_INT 0
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2662: LD_ADDR_OWVAR 31
2666: PUSH
2667: LD_INT 2
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: LD_INT 0
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2685: LD_ADDR_EXP 17
2689: PUSH
2690: CALL_OW 44
2694: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2695: LD_EXP 17
2699: PPUSH
2700: LD_VAR 0 3
2704: PPUSH
2705: CALL_OW 52
// vc_engine = 1 ;
2709: LD_ADDR_OWVAR 39
2713: PUSH
2714: LD_INT 1
2716: ST_TO_ADDR
// vc_control = 1 ;
2717: LD_ADDR_OWVAR 38
2721: PUSH
2722: LD_INT 1
2724: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2725: LD_ADDR_OWVAR 40
2729: PUSH
2730: LD_INT 3
2732: ST_TO_ADDR
// vc_chassis = 2 ;
2733: LD_ADDR_OWVAR 37
2737: PUSH
2738: LD_INT 2
2740: ST_TO_ADDR
// veh = CreateVehicle ;
2741: LD_ADDR_VAR 0 3
2745: PUSH
2746: CALL_OW 45
2750: ST_TO_ADDR
// SetDir ( veh , dir ) ;
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_VAR 0 5
2760: PPUSH
2761: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
2765: LD_VAR 0 3
2769: PPUSH
2770: LD_VAR 0 4
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2782: LD_VAR 0 3
2786: PPUSH
2787: LD_INT 50
2789: PPUSH
2790: CALL_OW 240
// hc_class := 1 ;
2794: LD_ADDR_OWVAR 28
2798: PUSH
2799: LD_INT 1
2801: ST_TO_ADDR
// hc_sex := sex_female ;
2802: LD_ADDR_OWVAR 27
2806: PUSH
2807: LD_INT 2
2809: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2810: LD_ADDR_OWVAR 33
2814: PUSH
2815: LD_STRING SecondCharsGal
2817: ST_TO_ADDR
// hc_face_number := 45 ;
2818: LD_ADDR_OWVAR 34
2822: PUSH
2823: LD_INT 45
2825: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2826: LD_ADDR_OWVAR 29
2830: PUSH
2831: LD_INT 11
2833: PUSH
2834: LD_INT 10
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2841: LD_ADDR_OWVAR 26
2845: PUSH
2846: LD_STRING Ingrid Jonsson
2848: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2849: LD_ADDR_OWVAR 30
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 0
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2872: LD_ADDR_OWVAR 31
2876: PUSH
2877: LD_INT 3
2879: PUSH
2880: LD_INT 1
2882: PUSH
2883: LD_INT 1
2885: PUSH
2886: LD_INT 0
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2895: LD_ADDR_EXP 18
2899: PUSH
2900: CALL_OW 44
2904: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2905: LD_EXP 18
2909: PPUSH
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 52
// end ;
2919: LD_VAR 0 1
2923: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2924: LD_INT 0
2926: PPUSH
2927: PPUSH
2928: PPUSH
2929: PPUSH
2930: PPUSH
// j = 0 ;
2931: LD_ADDR_VAR 0 3
2935: PUSH
2936: LD_INT 0
2938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2939: LD_INT 35
2941: PPUSH
2942: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 21
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 26
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 2
2983: PUSH
2984: LD_INT 25
2986: PUSH
2987: LD_INT 1
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: PUSH
2994: LD_INT 25
2996: PUSH
2997: LD_INT 2
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 25
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 25
3016: PUSH
3017: LD_INT 4
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: PUSH
3042: FOR_IN
3043: IFFALSE 3169
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
3045: LD_INT 22
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: LD_INT 2
3057: PUSH
3058: LD_INT 21
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 21
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 21
3080: PUSH
3081: LD_INT 3
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 59
3090: PUSH
3091: EMPTY
3092: LIST
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: LD_INT 91
3103: PUSH
3104: LD_VAR 0 2
3108: PUSH
3109: LD_INT 25
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: NOT
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_EXP 1
3137: PPUSH
3138: CALL_OW 296
3142: PUSH
3143: LD_INT 15
3145: LESS
3146: AND
3147: IFFALSE 3167
// begin tmp = i ;
3149: LD_ADDR_VAR 0 4
3153: PUSH
3154: LD_VAR 0 2
3158: ST_TO_ADDR
// j = 1 ;
3159: LD_ADDR_VAR 0 3
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// end ; end ;
3167: GO 3042
3169: POP
3170: POP
// until j = 1 ;
3171: LD_VAR 0 3
3175: PUSH
3176: LD_INT 1
3178: EQUAL
3179: IFFALSE 2939
// blockSpawn = 1 ;
3181: LD_ADDR_EXP 29
3185: PUSH
3186: LD_INT 1
3188: ST_TO_ADDR
// uc_side = 4 ;
3189: LD_ADDR_OWVAR 20
3193: PUSH
3194: LD_INT 4
3196: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
3197: LD_ADDR_EXP 15
3201: PUSH
3202: LD_STRING Joan
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL 5851 0 2
3212: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
3213: LD_EXP 15
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: CALL_OW 250
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL_OW 251
3237: PPUSH
3238: LD_INT 5
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 50
// SetLives ( Joan , 250 ) ;
3248: LD_EXP 15
3252: PPUSH
3253: LD_INT 250
3255: PPUSH
3256: CALL_OW 234
// InGameOn ;
3260: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
3264: LD_EXP 15
3268: PPUSH
3269: CALL_OW 87
// wait ( 0 0$2 ) ;
3273: LD_INT 70
3275: PPUSH
3276: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 122
// wait ( 0 0$1 ) ;
3298: LD_INT 35
3300: PPUSH
3301: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3305: LD_VAR 0 4
3309: PPUSH
3310: LD_EXP 15
3314: PPUSH
3315: CALL_OW 112
// wait ( 0 0$2 ) ;
3319: LD_INT 70
3321: PPUSH
3322: CALL_OW 67
// DialogueOn ;
3326: CALL_OW 6
// if tmp = JMM then
3330: LD_VAR 0 4
3334: PUSH
3335: LD_EXP 1
3339: EQUAL
3340: IFFALSE 3489
// begin ComTurnUnit ( JMM , Joan ) ;
3342: LD_EXP 1
3346: PPUSH
3347: LD_EXP 15
3351: PPUSH
3352: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3356: LD_EXP 1
3360: PPUSH
3361: LD_STRING D5b-JMM-1
3363: PPUSH
3364: CALL_OW 88
// DialogueOff ;
3368: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3372: LD_EXP 15
3376: PPUSH
3377: LD_INT 500
3379: PPUSH
3380: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3384: LD_EXP 15
3388: PPUSH
3389: LD_EXP 1
3393: PPUSH
3394: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3398: LD_EXP 1
3402: PPUSH
3403: LD_EXP 15
3407: PPUSH
3408: CALL_OW 119
// wait ( 0 0$1 ) ;
3412: LD_INT 35
3414: PPUSH
3415: CALL_OW 67
// DialogueOn ;
3419: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3423: LD_EXP 15
3427: PPUSH
3428: LD_STRING D5b-Joan-1
3430: PPUSH
3431: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3435: LD_EXP 1
3439: PPUSH
3440: LD_STRING D5b-JMM-2
3442: PPUSH
3443: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3447: LD_EXP 15
3451: PPUSH
3452: LD_STRING D5b-Joan-2
3454: PPUSH
3455: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3459: LD_EXP 1
3463: PPUSH
3464: LD_STRING D5b-JMM-3
3466: PPUSH
3467: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3471: LD_EXP 15
3475: PPUSH
3476: LD_STRING D5b-Joan-3
3478: PPUSH
3479: CALL_OW 88
// DialogueOff ;
3483: CALL_OW 7
// end else
3487: GO 3824
// begin ComTurnUnit ( tmp , Joan ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_EXP 15
3498: PPUSH
3499: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3503: LD_VAR 0 4
3507: PPUSH
3508: LD_STRING D5a-Sol1-1
3510: PPUSH
3511: CALL_OW 88
// DialogueOff ;
3515: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3519: LD_EXP 15
3523: PPUSH
3524: LD_INT 500
3526: PPUSH
3527: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3531: LD_EXP 15
3535: PPUSH
3536: LD_VAR 0 4
3540: PPUSH
3541: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_EXP 15
3554: PPUSH
3555: CALL_OW 119
// wait ( 0 0$1 ) ;
3559: LD_INT 35
3561: PPUSH
3562: CALL_OW 67
// DialogueOn ;
3566: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3570: LD_EXP 15
3574: PPUSH
3575: LD_STRING D5a-Joan-1
3577: PPUSH
3578: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3582: LD_VAR 0 4
3586: PPUSH
3587: LD_STRING D5a-Sol1-2
3589: PPUSH
3590: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3594: LD_EXP 15
3598: PPUSH
3599: LD_STRING D5a-Joan-2
3601: PPUSH
3602: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_STRING D5a-Sol1-3
3613: PPUSH
3614: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3618: LD_EXP 15
3622: PPUSH
3623: LD_STRING D5a-Joan-3
3625: PPUSH
3626: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3630: LD_VAR 0 4
3634: PPUSH
3635: LD_STRING D5a-Sol1-4
3637: PPUSH
3638: CALL_OW 88
// DialogueOff ;
3642: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3646: LD_EXP 1
3650: PPUSH
3651: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 122
// wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3671: LD_INT 35
3673: PPUSH
3674: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3678: LD_EXP 15
3682: PUSH
3683: LD_VAR 0 4
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3701: LD_EXP 15
3705: PPUSH
3706: LD_EXP 1
3710: PPUSH
3711: CALL_OW 296
3715: PUSH
3716: LD_INT 5
3718: LESS
3719: IFFALSE 3671
// ComTurnUnit ( Joan , JMM ) ;
3721: LD_EXP 15
3725: PPUSH
3726: LD_EXP 1
3730: PPUSH
3731: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3735: LD_EXP 1
3739: PPUSH
3740: LD_EXP 15
3744: PPUSH
3745: CALL_OW 119
// wait ( 0 0$1 ) ;
3749: LD_INT 35
3751: PPUSH
3752: CALL_OW 67
// DialogueOn ;
3756: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3760: LD_EXP 15
3764: PPUSH
3765: LD_STRING D5a-Joan-4
3767: PPUSH
3768: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3772: LD_EXP 1
3776: PPUSH
3777: LD_STRING D5a-JMM-4
3779: PPUSH
3780: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3784: LD_EXP 15
3788: PPUSH
3789: LD_STRING D5a-Joan-5
3791: PPUSH
3792: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3796: LD_EXP 1
3800: PPUSH
3801: LD_STRING D5a-JMM-5
3803: PPUSH
3804: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3808: LD_EXP 15
3812: PPUSH
3813: LD_STRING D5a-Joan-6
3815: PPUSH
3816: CALL_OW 88
// DialogueOff ;
3820: CALL_OW 7
// end ; DialogueOn ;
3824: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3828: LD_EXP 1
3832: PPUSH
3833: LD_STRING D6-JMM-1
3835: PPUSH
3836: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3840: LD_EXP 15
3844: PPUSH
3845: LD_STRING D6-Joan-1
3847: PPUSH
3848: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3852: LD_EXP 1
3856: PPUSH
3857: LD_STRING D6-JMM-2
3859: PPUSH
3860: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3864: LD_EXP 15
3868: PPUSH
3869: LD_STRING D6-Joan-2
3871: PPUSH
3872: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_STRING D6-JMM-3
3883: PPUSH
3884: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3888: LD_EXP 15
3892: PPUSH
3893: LD_STRING D6-Joan-3
3895: PPUSH
3896: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3900: LD_EXP 1
3904: PPUSH
3905: LD_STRING D6-JMM-4
3907: PPUSH
3908: CALL_OW 88
// DialogueOff ;
3912: CALL_OW 7
// InGameOff ;
3916: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3920: LD_EXP 15
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3932: LD_STRING MJ
3934: PPUSH
3935: CALL_OW 337
// JoanStatus = 1 ;
3939: LD_ADDR_EXP 16
3943: PUSH
3944: LD_INT 1
3946: ST_TO_ADDR
// blockSpawn = 0 ;
3947: LD_ADDR_EXP 29
3951: PUSH
3952: LD_INT 0
3954: ST_TO_ADDR
// end ;
3955: LD_VAR 0 1
3959: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
// repeat wait ( 0 0$7 ) ;
3964: LD_INT 245
3966: PPUSH
3967: CALL_OW 67
// until blockSpawn = 0 ;
3971: LD_EXP 29
3975: PUSH
3976: LD_INT 0
3978: EQUAL
3979: IFFALSE 3964
// uc_side = 1 ;
3981: LD_ADDR_OWVAR 20
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// uc_nation = 1 ;
3989: LD_ADDR_OWVAR 21
3993: PUSH
3994: LD_INT 1
3996: ST_TO_ADDR
// InitHc ;
3997: CALL_OW 19
// if number = 1 then
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 1
4008: EQUAL
4009: IFFALSE 4185
// begin hc_class := 3 ;
4011: LD_ADDR_OWVAR 28
4015: PUSH
4016: LD_INT 3
4018: ST_TO_ADDR
// hc_sex := sex_male ;
4019: LD_ADDR_OWVAR 27
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4027: LD_ADDR_OWVAR 33
4031: PUSH
4032: LD_STRING SecondCharsGal
4034: ST_TO_ADDR
// hc_face_number := 55 ;
4035: LD_ADDR_OWVAR 34
4039: PUSH
4040: LD_INT 55
4042: ST_TO_ADDR
// hc_name := George McCarthy ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING George McCarthy
4050: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4051: LD_ADDR_OWVAR 29
4055: PUSH
4056: LD_INT 11
4058: PUSH
4059: LD_INT 10
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
4066: LD_ADDR_OWVAR 30
4070: PUSH
4071: LD_INT 0
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 2
4079: PUSH
4080: LD_INT 0
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4089: LD_ADDR_OWVAR 31
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: LD_INT 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: ST_TO_ADDR
// un = CreateHuman ;
4112: LD_ADDR_VAR 0 3
4116: PUSH
4117: CALL_OW 44
4121: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn1 , true ) ;
4122: LD_VAR 0 3
4126: PPUSH
4127: LD_INT 23
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4137: LD_VAR 0 3
4141: PPUSH
4142: CALL_OW 87
// wait ( 0 0$1 ) ;
4146: LD_INT 35
4148: PPUSH
4149: CALL_OW 67
// DialogueOn ;
4153: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4157: LD_VAR 0 3
4161: PPUSH
4162: LD_STRING D11d-Sol4-1
4164: PPUSH
4165: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4169: LD_EXP 1
4173: PPUSH
4174: LD_STRING D11d-JMM-1
4176: PPUSH
4177: CALL_OW 88
// DialogueOff ;
4181: CALL_OW 7
// end ; if number = 2 then
4185: LD_VAR 0 1
4189: PUSH
4190: LD_INT 2
4192: EQUAL
4193: IFFALSE 4369
// begin hc_class := 1 ;
4195: LD_ADDR_OWVAR 28
4199: PUSH
4200: LD_INT 1
4202: ST_TO_ADDR
// hc_sex := sex_male ;
4203: LD_ADDR_OWVAR 27
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4211: LD_ADDR_OWVAR 33
4215: PUSH
4216: LD_STRING AmGalRemake
4218: ST_TO_ADDR
// hc_face_number := 7 ;
4219: LD_ADDR_OWVAR 34
4223: PUSH
4224: LD_INT 7
4226: ST_TO_ADDR
// hc_name := Bobby Jordan ;
4227: LD_ADDR_OWVAR 26
4231: PUSH
4232: LD_STRING Bobby Jordan
4234: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
4235: LD_ADDR_OWVAR 29
4239: PUSH
4240: LD_INT 9
4242: PUSH
4243: LD_INT 11
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4250: LD_ADDR_OWVAR 30
4254: PUSH
4255: LD_INT 1
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: LD_INT 1
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
4273: LD_ADDR_OWVAR 31
4277: PUSH
4278: LD_INT 2
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: LD_INT 1
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: ST_TO_ADDR
// un = CreateHuman ;
4296: LD_ADDR_VAR 0 3
4300: PUSH
4301: CALL_OW 44
4305: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn2 , true ) ;
4306: LD_VAR 0 3
4310: PPUSH
4311: LD_INT 24
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL_OW 49
// wait ( 0 0$1 ) ;
4321: LD_INT 35
4323: PPUSH
4324: CALL_OW 67
// CenterNowOnUnits ( un ) ;
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 87
// DialogueOn ;
4337: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
4341: LD_VAR 0 3
4345: PPUSH
4346: LD_STRING D11b-Sol3-1
4348: PPUSH
4349: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
4353: LD_EXP 1
4357: PPUSH
4358: LD_STRING D11b-JMM-1
4360: PPUSH
4361: CALL_OW 88
// DialogueOff ;
4365: CALL_OW 7
// end ; if number = 3 then
4369: LD_VAR 0 1
4373: PUSH
4374: LD_INT 3
4376: EQUAL
4377: IFFALSE 4541
// begin hc_class := 1 ;
4379: LD_ADDR_OWVAR 28
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// hc_sex := sex_male ;
4387: LD_ADDR_OWVAR 27
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// hc_gallery := DJ ;
4395: LD_ADDR_OWVAR 33
4399: PUSH
4400: LD_STRING DJ
4402: ST_TO_ADDR
// hc_face_number := 1 ;
4403: LD_ADDR_OWVAR 34
4407: PUSH
4408: LD_INT 1
4410: ST_TO_ADDR
// hc_name := Darius Dajay ;
4411: LD_ADDR_OWVAR 26
4415: PUSH
4416: LD_STRING Darius Dajay
4418: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4419: LD_ADDR_OWVAR 29
4423: PUSH
4424: LD_INT 11
4426: PUSH
4427: LD_INT 11
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4434: LD_ADDR_OWVAR 30
4438: PUSH
4439: LD_INT 2
4441: PUSH
4442: LD_INT 0
4444: PUSH
4445: LD_INT 0
4447: PUSH
4448: LD_INT 0
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: ST_TO_ADDR
// hc_skills := [ 4 , 0 , 1 , 0 ] ;
4457: LD_ADDR_OWVAR 31
4461: PUSH
4462: LD_INT 4
4464: PUSH
4465: LD_INT 0
4467: PUSH
4468: LD_INT 1
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: ST_TO_ADDR
// un = CreateHuman ;
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: CALL_OW 44
4489: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn3 , true ) ;
4490: LD_VAR 0 3
4494: PPUSH
4495: LD_INT 25
4497: PPUSH
4498: LD_INT 1
4500: PPUSH
4501: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: CALL_OW 87
// wait ( 0 0$1 ) ;
4514: LD_INT 35
4516: PPUSH
4517: CALL_OW 67
// DialogueOn ;
4521: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_STRING D11f-Sol5-1
4532: PPUSH
4533: CALL_OW 88
// DialogueOff ;
4537: CALL_OW 7
// end ; if number = 4 then
4541: LD_VAR 0 1
4545: PUSH
4546: LD_INT 4
4548: EQUAL
4549: IFFALSE 4713
// begin hc_class := 3 ;
4551: LD_ADDR_OWVAR 28
4555: PUSH
4556: LD_INT 3
4558: ST_TO_ADDR
// hc_sex := sex_female ;
4559: LD_ADDR_OWVAR 27
4563: PUSH
4564: LD_INT 2
4566: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4567: LD_ADDR_OWVAR 33
4571: PUSH
4572: LD_STRING SecondCharsGal
4574: ST_TO_ADDR
// hc_face_number := 46 ;
4575: LD_ADDR_OWVAR 34
4579: PUSH
4580: LD_INT 46
4582: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4583: LD_ADDR_OWVAR 26
4587: PUSH
4588: LD_STRING Sylvia Creak
4590: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4591: LD_ADDR_OWVAR 29
4595: PUSH
4596: LD_INT 10
4598: PUSH
4599: LD_INT 9
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4606: LD_ADDR_OWVAR 30
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: LD_INT 1
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: LD_INT 1
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4629: LD_ADDR_OWVAR 31
4633: PUSH
4634: LD_INT 1
4636: PUSH
4637: LD_INT 3
4639: PUSH
4640: LD_INT 1
4642: PUSH
4643: LD_INT 1
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: ST_TO_ADDR
// un = CreateHuman ;
4652: LD_ADDR_VAR 0 3
4656: PUSH
4657: CALL_OW 44
4661: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn4 , true ) ;
4662: LD_VAR 0 3
4666: PPUSH
4667: LD_INT 26
4669: PPUSH
4670: LD_INT 1
4672: PPUSH
4673: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4677: LD_VAR 0 3
4681: PPUSH
4682: CALL_OW 87
// wait ( 0 0$1 ) ;
4686: LD_INT 35
4688: PPUSH
4689: CALL_OW 67
// DialogueOn ;
4693: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_STRING D11e-FSol4-1
4704: PPUSH
4705: CALL_OW 88
// DialogueOff ;
4709: CALL_OW 7
// end ; if number = 5 then
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 5
4720: EQUAL
4721: IFFALSE 4897
// begin hc_class := 1 ;
4723: LD_ADDR_OWVAR 28
4727: PUSH
4728: LD_INT 1
4730: ST_TO_ADDR
// hc_sex := sex_female ;
4731: LD_ADDR_OWVAR 27
4735: PUSH
4736: LD_INT 2
4738: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4739: LD_ADDR_OWVAR 33
4743: PUSH
4744: LD_STRING SecondCharsGal
4746: ST_TO_ADDR
// hc_face_number := 37 ;
4747: LD_ADDR_OWVAR 34
4751: PUSH
4752: LD_INT 37
4754: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4755: LD_ADDR_OWVAR 26
4759: PUSH
4760: LD_STRING Margherite Simpson
4762: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4763: LD_ADDR_OWVAR 29
4767: PUSH
4768: LD_INT 11
4770: PUSH
4771: LD_INT 10
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4778: LD_ADDR_OWVAR 30
4782: PUSH
4783: LD_INT 1
4785: PUSH
4786: LD_INT 1
4788: PUSH
4789: LD_INT 0
4791: PUSH
4792: LD_INT 0
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4801: LD_ADDR_OWVAR 31
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: LD_INT 1
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: ST_TO_ADDR
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn5 , true ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 27
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: CALL_OW 87
// wait ( 0 0$1 ) ;
4858: LD_INT 35
4860: PPUSH
4861: CALL_OW 67
// DialogueOn ;
4865: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4869: LD_VAR 0 3
4873: PPUSH
4874: LD_STRING D11c-FSol3-1
4876: PPUSH
4877: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4881: LD_EXP 1
4885: PPUSH
4886: LD_STRING D11c-JMM-1
4888: PPUSH
4889: CALL_OW 88
// DialogueOff ;
4893: CALL_OW 7
// end ; if number = 6 then
4897: LD_VAR 0 1
4901: PUSH
4902: LD_INT 6
4904: EQUAL
4905: IFFALSE 5079
// begin hc_class := 1 ;
4907: LD_ADDR_OWVAR 28
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// hc_sex := sex_male ;
4915: LD_ADDR_OWVAR 27
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4923: LD_ADDR_OWVAR 33
4927: PUSH
4928: LD_STRING AmGalRemake
4930: ST_TO_ADDR
// hc_face_number := 1 ;
4931: LD_ADDR_OWVAR 34
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// hc_name := Charles Brown ;
4939: LD_ADDR_OWVAR 26
4943: PUSH
4944: LD_STRING Charles Brown
4946: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4947: LD_ADDR_OWVAR 29
4951: PUSH
4952: LD_INT 12
4954: PUSH
4955: LD_INT 11
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4962: LD_ADDR_OWVAR 30
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 0
4972: PUSH
4973: LD_INT 0
4975: PUSH
4976: LD_INT 0
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4985: LD_ADDR_OWVAR 31
4989: PUSH
4990: LD_INT 3
4992: PUSH
4993: LD_INT 0
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: ST_TO_ADDR
// un = CreateHuman ;
5008: LD_ADDR_VAR 0 3
5012: PUSH
5013: CALL_OW 44
5017: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn6 , true ) ;
5018: LD_VAR 0 3
5022: PPUSH
5023: LD_INT 28
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5033: LD_VAR 0 3
5037: PPUSH
5038: CALL_OW 87
// wait ( 0 0$1 ) ;
5042: LD_INT 35
5044: PPUSH
5045: CALL_OW 67
// DialogueOn ;
5049: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
5053: LD_VAR 0 3
5057: PPUSH
5058: LD_STRING D4-Sol1-5
5060: PPUSH
5061: CALL_OW 88
// DialogueOff ;
5065: CALL_OW 7
// tempCharles = un ;
5069: LD_ADDR_EXP 13
5073: PUSH
5074: LD_VAR 0 3
5078: ST_TO_ADDR
// end ; if number = 7 then
5079: LD_VAR 0 1
5083: PUSH
5084: LD_INT 7
5086: EQUAL
5087: IFFALSE 5337
// begin hc_class := 1 ;
5089: LD_ADDR_OWVAR 28
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hc_sex := sex_female ;
5097: LD_ADDR_OWVAR 27
5101: PUSH
5102: LD_INT 2
5104: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
5105: LD_ADDR_OWVAR 33
5109: PUSH
5110: LD_STRING AmGalRemake
5112: ST_TO_ADDR
// hc_face_number := 2 ;
5113: LD_ADDR_OWVAR 34
5117: PUSH
5118: LD_INT 2
5120: ST_TO_ADDR
// hc_name := Johanna Holland ;
5121: LD_ADDR_OWVAR 26
5125: PUSH
5126: LD_STRING Johanna Holland
5128: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
5129: LD_ADDR_OWVAR 29
5133: PUSH
5134: LD_INT 10
5136: PUSH
5137: LD_INT 10
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
5144: LD_ADDR_OWVAR 30
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: LD_INT 0
5154: PUSH
5155: LD_INT 0
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
5167: LD_ADDR_OWVAR 31
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: LD_INT 0
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: ST_TO_ADDR
// un = CreateHuman ;
5190: LD_ADDR_VAR 0 3
5194: PUSH
5195: CALL_OW 44
5199: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn7 , true ) ;
5200: LD_VAR 0 3
5204: PPUSH
5205: LD_INT 29
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 49
// CenterNowOnUnits ( un ) ;
5215: LD_VAR 0 3
5219: PPUSH
5220: CALL_OW 87
// wait ( 0 0$1 ) ;
5224: LD_INT 35
5226: PPUSH
5227: CALL_OW 67
// if FilterUnitsInArea ( NewPeopleSpawn7Spot , [ f_side , 3 ] ) then
5231: LD_INT 30
5233: PPUSH
5234: LD_INT 22
5236: PUSH
5237: LD_INT 3
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 70
5248: IFFALSE 5337
// begin DialogueOn ;
5250: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 1 , - 15 ) ;
5254: LD_VAR 0 3
5258: PPUSH
5259: CALL_OW 250
5263: PPUSH
5264: LD_VAR 0 3
5268: PPUSH
5269: CALL_OW 251
5273: PPUSH
5274: LD_INT 1
5276: PPUSH
5277: LD_INT 15
5279: NEG
5280: PPUSH
5281: CALL_OW 330
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 1 ) ;
5285: LD_VAR 0 3
5289: PPUSH
5290: CALL_OW 250
5294: PPUSH
5295: LD_VAR 0 3
5299: PPUSH
5300: CALL_OW 251
5304: PPUSH
5305: LD_INT 1
5307: PPUSH
5308: CALL_OW 331
// Say ( un , D11a-FSol2-1 ) ;
5312: LD_VAR 0 3
5316: PPUSH
5317: LD_STRING D11a-FSol2-1
5319: PPUSH
5320: CALL_OW 88
// ComCrawl ( un ) ;
5324: LD_VAR 0 3
5328: PPUSH
5329: CALL_OW 137
// DialogueOff ;
5333: CALL_OW 7
// end ; end ; ignoreTarget := ignoreTarget union un ;
5337: LD_ADDR_EXP 45
5341: PUSH
5342: LD_EXP 45
5346: PUSH
5347: LD_VAR 0 3
5351: UNION
5352: ST_TO_ADDR
// arrivals := arrivals union un ;
5353: LD_ADDR_EXP 46
5357: PUSH
5358: LD_EXP 46
5362: PUSH
5363: LD_VAR 0 3
5367: UNION
5368: ST_TO_ADDR
// end ;
5369: LD_VAR 0 2
5373: RET
// every 0 0$1 do var i ;
5374: GO 5376
5376: DISABLE
5377: LD_INT 0
5379: PPUSH
// begin enable ;
5380: ENABLE
// if not ignoreTarget then
5381: LD_EXP 45
5385: NOT
5386: IFFALSE 5390
// exit ;
5388: GO 5471
// for i in ignoreTarget do
5390: LD_ADDR_VAR 0 1
5394: PUSH
5395: LD_EXP 45
5399: PUSH
5400: FOR_IN
5401: IFFALSE 5469
// if ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , i , 10 ] ] ) diff ignoreTarget ) > 1 then
5403: LD_INT 22
5405: PUSH
5406: LD_INT 1
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_INT 91
5415: PUSH
5416: LD_VAR 0 1
5420: PUSH
5421: LD_INT 10
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: PUSH
5438: LD_EXP 45
5442: DIFF
5443: PUSH
5444: LD_INT 1
5446: GREATER
5447: IFFALSE 5467
// begin ignoreTarget := ignoreTarget diff i ;
5449: LD_ADDR_EXP 45
5453: PUSH
5454: LD_EXP 45
5458: PUSH
5459: LD_VAR 0 1
5463: DIFF
5464: ST_TO_ADDR
// break ;
5465: GO 5469
// end ;
5467: GO 5400
5469: POP
5470: POP
// end ; end_of_file
5471: PPOPN 1
5473: END
// export function PrepareRussian ; var i ; begin
5474: LD_INT 0
5476: PPUSH
5477: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
5478: LD_INT 3
5480: PPUSH
5481: LD_INT 3
5483: PPUSH
5484: LD_INT 2
5486: PPUSH
5487: LD_EXP 34
5491: PPUSH
5492: LD_EXP 35
5496: PPUSH
5497: CALL_OW 12
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: LD_INT 4
5507: PPUSH
5508: CALL 6121 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
5512: LD_INT 3
5514: PPUSH
5515: LD_INT 3
5517: PPUSH
5518: LD_INT 8
5520: PPUSH
5521: LD_EXP 34
5525: PPUSH
5526: LD_EXP 35
5530: PPUSH
5531: CALL_OW 12
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 4
5541: PPUSH
5542: CALL 6121 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
5546: LD_INT 3
5548: PPUSH
5549: LD_INT 3
5551: PPUSH
5552: LD_INT 67
5554: PPUSH
5555: LD_EXP 34
5559: PPUSH
5560: LD_EXP 35
5564: PPUSH
5565: CALL_OW 12
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 2
5575: PPUSH
5576: CALL 6121 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5580: LD_INT 3
5582: PPUSH
5583: LD_INT 3
5585: PPUSH
5586: LD_INT 21
5588: PPUSH
5589: LD_EXP 34
5593: PPUSH
5594: LD_EXP 35
5598: PPUSH
5599: CALL_OW 12
5603: PPUSH
5604: LD_INT 3
5606: PPUSH
5607: LD_INT 6
5609: PPUSH
5610: CALL 6121 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
5614: LD_INT 3
5616: PPUSH
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 17
5622: PPUSH
5623: LD_EXP 34
5627: PPUSH
5628: LD_EXP 35
5632: PPUSH
5633: CALL_OW 12
5637: PPUSH
5638: LD_INT 3
5640: PPUSH
5641: LD_INT 6
5643: PPUSH
5644: CALL 6121 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
5648: LD_INT 3
5650: PPUSH
5651: LD_INT 3
5653: PPUSH
5654: LD_INT 32
5656: PPUSH
5657: LD_EXP 34
5661: PPUSH
5662: LD_EXP 35
5666: PPUSH
5667: CALL_OW 12
5671: PPUSH
5672: LD_INT 4
5674: PPUSH
5675: LD_INT 2
5677: PPUSH
5678: CALL 6121 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 21
5699: PUSH
5700: LD_INT 3
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 30
5709: PUSH
5710: LD_INT 32
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: PPUSH
5722: CALL_OW 69
5726: PUSH
5727: FOR_IN
5728: IFFALSE 5768
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5730: LD_INT 3
5732: PPUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_EXP 34
5745: PPUSH
5746: LD_EXP 35
5750: PPUSH
5751: CALL_OW 12
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_INT 1
5761: PPUSH
5762: CALL 6121 0 6
5766: GO 5727
5768: POP
5769: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5770: LD_ADDR_VAR 0 2
5774: PUSH
5775: LD_INT 22
5777: PUSH
5778: LD_INT 3
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 21
5787: PUSH
5788: LD_INT 3
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 30
5797: PUSH
5798: LD_INT 31
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5844
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5818: LD_EXP 34
5822: PPUSH
5823: LD_EXP 35
5827: PPUSH
5828: CALL_OW 12
5832: PPUSH
5833: LD_VAR 0 2
5837: PPUSH
5838: CALL 6231 0 2
5842: GO 5815
5844: POP
5845: POP
// end ; end_of_file
5846: LD_VAR 0 1
5850: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
// if exist_mode then
5855: LD_VAR 0 2
5859: IFFALSE 5884
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5861: LD_ADDR_VAR 0 4
5865: PUSH
5866: LD_EXP 44
5870: PUSH
5871: LD_VAR 0 1
5875: STR
5876: PPUSH
5877: CALL_OW 34
5881: ST_TO_ADDR
// end else
5882: GO 5899
// begin unit := NewCharacter ( ident ) ;
5884: LD_ADDR_VAR 0 4
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 25
5898: ST_TO_ADDR
// end ; result := unit ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 4
5908: ST_TO_ADDR
// end ;
5909: LD_VAR 0 3
5913: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5914: LD_INT 0
5916: PPUSH
5917: PPUSH
5918: PPUSH
// rnd = rand ( 1 , characters ) ;
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: LD_INT 1
5926: PPUSH
5927: LD_VAR 0 1
5931: PPUSH
5932: CALL_OW 12
5936: ST_TO_ADDR
// for i = 1 to characters do
5937: LD_ADDR_VAR 0 5
5941: PUSH
5942: DOUBLE
5943: LD_INT 1
5945: DEC
5946: ST_TO_ADDR
5947: LD_VAR 0 1
5951: PUSH
5952: FOR_TO
5953: IFFALSE 6063
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5955: LD_VAR 0 5
5959: PUSH
5960: LD_VAR 0 6
5964: EQUAL
5965: PUSH
5966: LD_VAR 0 1
5970: PUSH
5971: LD_VAR 0 5
5975: ARRAY
5976: PPUSH
5977: CALL_OW 258
5981: PUSH
5982: LD_INT 1
5984: EQUAL
5985: AND
5986: IFFALSE 6008
// Say ( characters [ i ] , dialogMID ) ;
5988: LD_VAR 0 1
5992: PUSH
5993: LD_VAR 0 5
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 2
6003: PPUSH
6004: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6008: LD_VAR 0 5
6012: PUSH
6013: LD_VAR 0 6
6017: EQUAL
6018: PUSH
6019: LD_VAR 0 1
6023: PUSH
6024: LD_VAR 0 5
6028: ARRAY
6029: PPUSH
6030: CALL_OW 258
6034: PUSH
6035: LD_INT 2
6037: EQUAL
6038: AND
6039: IFFALSE 6061
// Say ( characters [ i ] , dialogFID ) ;
6041: LD_VAR 0 1
6045: PUSH
6046: LD_VAR 0 5
6050: ARRAY
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: CALL_OW 88
// end ;
6061: GO 5952
6063: POP
6064: POP
// end ;
6065: LD_VAR 0 4
6069: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6070: LD_INT 0
6072: PPUSH
6073: PPUSH
// for i in charactersList do
6074: LD_ADDR_VAR 0 4
6078: PUSH
6079: LD_VAR 0 1
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6114
// begin if IsOk ( i ) then
6087: LD_VAR 0 4
6091: PPUSH
6092: CALL_OW 302
6096: IFFALSE 6112
// SaveCharacters ( i , ident ) ;
6098: LD_VAR 0 4
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL_OW 38
// end ;
6112: GO 6084
6114: POP
6115: POP
// end ;
6116: LD_VAR 0 3
6120: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
6121: LD_INT 0
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
// for i = 1 to count do
6127: LD_ADDR_VAR 0 8
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_VAR 0 6
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6224
// begin uc_side = side ;
6145: LD_ADDR_OWVAR 20
6149: PUSH
6150: LD_VAR 0 1
6154: ST_TO_ADDR
// uc_nation = nation ;
6155: LD_ADDR_OWVAR 21
6159: PUSH
6160: LD_VAR 0 2
6164: ST_TO_ADDR
// hc_gallery =  ;
6165: LD_ADDR_OWVAR 33
6169: PUSH
6170: LD_STRING 
6172: ST_TO_ADDR
// hc_name =  ;
6173: LD_ADDR_OWVAR 26
6177: PUSH
6178: LD_STRING 
6180: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
6181: LD_INT 0
6183: PPUSH
6184: LD_VAR 0 5
6188: PPUSH
6189: LD_VAR 0 4
6193: PPUSH
6194: CALL_OW 380
// un = CreateHuman ;
6198: LD_ADDR_VAR 0 10
6202: PUSH
6203: CALL_OW 44
6207: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
6208: LD_VAR 0 10
6212: PPUSH
6213: LD_VAR 0 3
6217: PPUSH
6218: CALL_OW 52
// end ;
6222: GO 6142
6224: POP
6225: POP
// end ;
6226: LD_VAR 0 7
6230: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
6231: LD_INT 0
6233: PPUSH
6234: PPUSH
6235: PPUSH
// uc_side := GetSide ( b ) ;
6236: LD_ADDR_OWVAR 20
6240: PUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL_OW 255
6250: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_VAR 0 2
6260: PPUSH
6261: CALL_OW 248
6265: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6266: LD_INT 0
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
6281: LD_ADDR_VAR 0 5
6285: PUSH
6286: LD_VAR 0 2
6290: PPUSH
6291: CALL_OW 254
6295: PUSH
6296: LD_INT 3
6298: MINUS
6299: ST_TO_ADDR
// if dir < 0 then
6300: LD_VAR 0 5
6304: PUSH
6305: LD_INT 0
6307: LESS
6308: IFFALSE 6324
// dir := 6 + dir ;
6310: LD_ADDR_VAR 0 5
6314: PUSH
6315: LD_INT 6
6317: PUSH
6318: LD_VAR 0 5
6322: PLUS
6323: ST_TO_ADDR
// un := CreateHuman ;
6324: LD_ADDR_VAR 0 4
6328: PUSH
6329: CALL_OW 44
6333: ST_TO_ADDR
// SetDir ( un , dir ) ;
6334: LD_VAR 0 4
6338: PPUSH
6339: LD_VAR 0 5
6343: PPUSH
6344: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
6348: LD_VAR 0 4
6352: PPUSH
6353: LD_VAR 0 2
6357: PPUSH
6358: CALL_OW 52
// end ;
6362: LD_VAR 0 3
6366: RET
// export function PrepareDifficulty ; begin
6367: LD_INT 0
6369: PPUSH
// if Difficulty = 1 then
6370: LD_OWVAR 67
6374: PUSH
6375: LD_INT 1
6377: EQUAL
6378: IFFALSE 6396
// begin RuSolMinLevel = 2 ;
6380: LD_ADDR_EXP 34
6384: PUSH
6385: LD_INT 2
6387: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
6388: LD_ADDR_EXP 35
6392: PUSH
6393: LD_INT 4
6395: ST_TO_ADDR
// end ; if Difficulty = 2 then
6396: LD_OWVAR 67
6400: PUSH
6401: LD_INT 2
6403: EQUAL
6404: IFFALSE 6422
// begin RuSolMinLevel = 3 ;
6406: LD_ADDR_EXP 34
6410: PUSH
6411: LD_INT 3
6413: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
6414: LD_ADDR_EXP 35
6418: PUSH
6419: LD_INT 5
6421: ST_TO_ADDR
// end ; if Difficulty = 3 then
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 3
6429: EQUAL
6430: IFFALSE 6448
// begin RuSolMinLevel = 3 ;
6432: LD_ADDR_EXP 34
6436: PUSH
6437: LD_INT 3
6439: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
6440: LD_ADDR_EXP 35
6444: PUSH
6445: LD_INT 6
6447: ST_TO_ADDR
// end ; end ;
6448: LD_VAR 0 1
6452: RET
// export function ShowQuery1 ; begin
6453: LD_INT 0
6455: PPUSH
// case query ( QKill ) of 1 :
6456: LD_STRING QKill
6458: PPUSH
6459: CALL_OW 97
6463: PUSH
6464: LD_INT 1
6466: DOUBLE
6467: EQUAL
6468: IFTRUE 6472
6470: GO 6483
6472: POP
// begin result = 1 ;
6473: LD_ADDR_VAR 0 1
6477: PUSH
6478: LD_INT 1
6480: ST_TO_ADDR
// end ; 2 :
6481: GO 6522
6483: LD_INT 2
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6502
6491: POP
// begin result = 2 ;
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 2
6499: ST_TO_ADDR
// end ; 3 :
6500: GO 6522
6502: LD_INT 3
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6521
6510: POP
// begin result = 3 ;
6511: LD_ADDR_VAR 0 1
6515: PUSH
6516: LD_INT 3
6518: ST_TO_ADDR
// end ; end ;
6519: GO 6522
6521: POP
// end ;
6522: LD_VAR 0 1
6526: RET
// export function ShowQuery2 ; begin
6527: LD_INT 0
6529: PPUSH
// case query ( QKill2 ) of 1 :
6530: LD_STRING QKill2
6532: PPUSH
6533: CALL_OW 97
6537: PUSH
6538: LD_INT 1
6540: DOUBLE
6541: EQUAL
6542: IFTRUE 6546
6544: GO 6557
6546: POP
// begin result = 1 ;
6547: LD_ADDR_VAR 0 1
6551: PUSH
6552: LD_INT 1
6554: ST_TO_ADDR
// end ; 2 :
6555: GO 6577
6557: LD_INT 2
6559: DOUBLE
6560: EQUAL
6561: IFTRUE 6565
6563: GO 6576
6565: POP
// begin result = 2 ;
6566: LD_ADDR_VAR 0 1
6570: PUSH
6571: LD_INT 2
6573: ST_TO_ADDR
// end ; end ;
6574: GO 6577
6576: POP
// end ;
6577: LD_VAR 0 1
6581: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
6582: LD_INT 0
6584: PPUSH
6585: PPUSH
6586: PPUSH
6587: PPUSH
6588: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
6589: LD_ADDR_VAR 0 8
6593: PUSH
6594: LD_INT 48
6596: PUSH
6597: LD_INT 49
6599: PUSH
6600: LD_INT 50
6602: PUSH
6603: LD_INT 20
6605: PUSH
6606: LD_INT 1
6608: PUSH
6609: LD_INT 51
6611: PUSH
6612: LD_INT 52
6614: PUSH
6615: LD_INT 69
6617: PUSH
6618: LD_INT 39
6620: PUSH
6621: LD_INT 34
6623: PUSH
6624: LD_INT 40
6626: PUSH
6627: LD_INT 53
6629: PUSH
6630: LD_INT 71
6632: PUSH
6633: LD_INT 57
6635: PUSH
6636: LD_INT 58
6638: PUSH
6639: LD_INT 44
6641: PUSH
6642: LD_INT 32
6644: PUSH
6645: LD_INT 27
6647: PUSH
6648: LD_INT 23
6650: PUSH
6651: LD_INT 33
6653: PUSH
6654: LD_INT 59
6656: PUSH
6657: LD_INT 54
6659: PUSH
6660: LD_INT 55
6662: PUSH
6663: LD_INT 56
6665: PUSH
6666: LD_INT 63
6668: PUSH
6669: LD_INT 64
6671: PUSH
6672: LD_INT 65
6674: PUSH
6675: LD_INT 30
6677: PUSH
6678: LD_INT 31
6680: PUSH
6681: LD_INT 21
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 25
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: DOUBLE
6730: LD_INT 1
6732: DEC
6733: ST_TO_ADDR
6734: LD_VAR 0 8
6738: PUSH
6739: FOR_TO
6740: IFFALSE 6816
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6742: LD_VAR 0 8
6746: PUSH
6747: LD_VAR 0 5
6751: ARRAY
6752: PPUSH
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 321
6762: PUSH
6763: LD_INT 1
6765: EQUAL
6766: PUSH
6767: LD_VAR 0 8
6771: PUSH
6772: LD_VAR 0 5
6776: ARRAY
6777: PPUSH
6778: LD_VAR 0 3
6782: PPUSH
6783: CALL_OW 482
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: AND
6792: IFFALSE 6814
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6794: LD_VAR 0 2
6798: PPUSH
6799: LD_VAR 0 8
6803: PUSH
6804: LD_VAR 0 5
6808: ARRAY
6809: PPUSH
6810: CALL_OW 184
6814: GO 6739
6816: POP
6817: POP
// end ;
6818: LD_VAR 0 4
6822: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6823: LD_INT 0
6825: PPUSH
6826: PPUSH
6827: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6828: LD_INT 22
6830: PUSH
6831: LD_VAR 0 1
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: LD_INT 21
6842: PUSH
6843: LD_INT 2
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: PUSH
6859: LD_VAR 0 3
6863: LESSEQUAL
6864: IFFALSE 6972
// begin for i = 1 to vehCount do
6866: LD_ADDR_VAR 0 9
6870: PUSH
6871: DOUBLE
6872: LD_INT 1
6874: DEC
6875: ST_TO_ADDR
6876: LD_VAR 0 3
6880: PUSH
6881: FOR_TO
6882: IFFALSE 6970
// begin weapon = weaponTab [ i ] ;
6884: LD_ADDR_VAR 0 10
6888: PUSH
6889: LD_VAR 0 4
6893: PUSH
6894: LD_VAR 0 9
6898: ARRAY
6899: ST_TO_ADDR
// if weapon = 46 then
6900: LD_VAR 0 10
6904: PUSH
6905: LD_INT 46
6907: EQUAL
6908: IFFALSE 6939
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6910: LD_VAR 0 2
6914: PPUSH
6915: LD_INT 24
6917: PPUSH
6918: LD_VAR 0 5
6922: PPUSH
6923: LD_VAR 0 6
6927: PPUSH
6928: LD_VAR 0 10
6932: PPUSH
6933: CALL_OW 185
// end else
6937: GO 6968
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6939: LD_VAR 0 2
6943: PPUSH
6944: LD_VAR 0 7
6948: PPUSH
6949: LD_VAR 0 5
6953: PPUSH
6954: LD_VAR 0 6
6958: PPUSH
6959: LD_VAR 0 10
6963: PPUSH
6964: CALL_OW 185
// end ; end ;
6968: GO 6881
6970: POP
6971: POP
// end ; end ;
6972: LD_VAR 0 8
6976: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6977: LD_INT 0
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6983: LD_ADDR_VAR 0 8
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_VAR 0 1
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 2
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_INT 24
7015: PUSH
7016: LD_INT 650
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: LIST
7031: PPUSH
7032: CALL_OW 69
7036: ST_TO_ADDR
// if damageVehicles > 0 then
7037: LD_VAR 0 8
7041: PUSH
7042: LD_INT 0
7044: GREATER
7045: IFFALSE 7066
// ComMoveXY ( damageVehicles , repX , repY ) ;
7047: LD_VAR 0 8
7051: PPUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: LD_VAR 0 4
7061: PPUSH
7062: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7066: LD_VAR 0 8
7070: PPUSH
7071: LD_INT 95
7073: PUSH
7074: LD_VAR 0 2
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 58
7088: PUSH
7089: EMPTY
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: PUSH
7105: LD_INT 0
7107: GREATER
7108: IFFALSE 7175
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7110: LD_ADDR_VAR 0 6
7114: PUSH
7115: LD_VAR 0 8
7119: PPUSH
7120: LD_INT 95
7122: PUSH
7123: LD_VAR 0 2
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 3
7134: PUSH
7135: LD_INT 58
7137: PUSH
7138: EMPTY
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PPUSH
7149: CALL_OW 72
7153: PUSH
7154: FOR_IN
7155: IFFALSE 7173
// ComExitVehicle ( UnitsInside ( i ) ) ;
7157: LD_VAR 0 6
7161: PPUSH
7162: CALL_OW 313
7166: PPUSH
7167: CALL_OW 121
7171: GO 7154
7173: POP
7174: POP
// end ;
7175: LD_VAR 0 5
7179: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
7180: LD_INT 0
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7189: LD_ADDR_VAR 0 8
7193: PUSH
7194: LD_INT 22
7196: PUSH
7197: LD_VAR 0 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 21
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: LD_INT 660
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: LD_INT 58
7231: PUSH
7232: EMPTY
7233: LIST
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 34
7240: PUSH
7241: LD_INT 43
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 34
7250: PUSH
7251: LD_INT 44
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 34
7260: PUSH
7261: LD_INT 46
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
7290: LD_INT 22
7292: PUSH
7293: LD_VAR 0 1
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 21
7304: PUSH
7305: LD_INT 2
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: LD_INT 1000
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 58
7327: PUSH
7328: EMPTY
7329: LIST
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: LD_INT 34
7336: PUSH
7337: LD_INT 43
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 34
7346: PUSH
7347: LD_INT 44
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 34
7356: PUSH
7357: LD_INT 46
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PPUSH
7381: CALL_OW 69
7385: PUSH
7386: LD_INT 5
7388: PUSH
7389: LD_INT 6
7391: PUSH
7392: LD_INT 6
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_OWVAR 67
7404: ARRAY
7405: EQUAL
7406: IFFALSE 7662
// if seeEnemy = 0 then
7408: LD_VAR 0 11
7412: PUSH
7413: LD_INT 0
7415: EQUAL
7416: IFFALSE 7662
// repeat wait ( 0 0$1 ) ;
7418: LD_INT 35
7420: PPUSH
7421: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
7425: LD_ADDR_VAR 0 8
7429: PUSH
7430: LD_INT 22
7432: PUSH
7433: LD_VAR 0 1
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 21
7444: PUSH
7445: LD_INT 2
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 24
7454: PUSH
7455: LD_INT 660
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 3
7464: PUSH
7465: LD_INT 58
7467: PUSH
7468: EMPTY
7469: LIST
7470: PUSH
7471: LD_INT 2
7473: PUSH
7474: LD_INT 34
7476: PUSH
7477: LD_INT 43
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 34
7486: PUSH
7487: LD_INT 44
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 34
7496: PUSH
7497: LD_INT 46
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 69
7525: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
7526: LD_INT 22
7528: PUSH
7529: LD_VAR 0 1
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 95
7540: PUSH
7541: LD_VAR 0 2
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PPUSH
7554: CALL_OW 69
7558: NOT
7559: PUSH
7560: LD_VAR 0 11
7564: PUSH
7565: LD_INT 0
7567: EQUAL
7568: AND
7569: IFFALSE 7624
// for i := 1 to wayX do
7571: LD_ADDR_VAR 0 6
7575: PUSH
7576: DOUBLE
7577: LD_INT 1
7579: DEC
7580: ST_TO_ADDR
7581: LD_VAR 0 3
7585: PUSH
7586: FOR_TO
7587: IFFALSE 7622
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
7589: LD_VAR 0 8
7593: PPUSH
7594: LD_VAR 0 3
7598: PUSH
7599: LD_VAR 0 6
7603: ARRAY
7604: PPUSH
7605: LD_VAR 0 4
7609: PUSH
7610: LD_VAR 0 6
7614: ARRAY
7615: PPUSH
7616: CALL_OW 114
7620: GO 7586
7622: POP
7623: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
7624: LD_INT 22
7626: PUSH
7627: LD_VAR 0 1
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: LD_INT 95
7638: PUSH
7639: LD_VAR 0 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PPUSH
7652: CALL_OW 69
7656: PUSH
7657: LD_INT 0
7659: GREATER
7660: IFFALSE 7418
// seeEnemy = 1 ;
7662: LD_ADDR_VAR 0 11
7666: PUSH
7667: LD_INT 1
7669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7670: LD_INT 35
7672: PPUSH
7673: CALL_OW 67
// for j in vehiclesOK do
7677: LD_ADDR_VAR 0 7
7681: PUSH
7682: LD_VAR 0 8
7686: PUSH
7687: FOR_IN
7688: IFFALSE 7901
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) diff ignoreTarget , j ) ;
7690: LD_ADDR_VAR 0 9
7694: PUSH
7695: LD_INT 81
7697: PUSH
7698: LD_VAR 0 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 101
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PPUSH
7721: CALL_OW 69
7725: PUSH
7726: LD_EXP 45
7730: DIFF
7731: PPUSH
7732: LD_VAR 0 7
7736: PPUSH
7737: CALL_OW 74
7741: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) diff ignoreTarget , j ) ;
7742: LD_ADDR_VAR 0 10
7746: PUSH
7747: LD_INT 81
7749: PUSH
7750: LD_VAR 0 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: LD_INT 101
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 2
7771: PUSH
7772: LD_INT 59
7774: PUSH
7775: EMPTY
7776: LIST
7777: PUSH
7778: LD_INT 21
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 21
7790: PUSH
7791: LD_INT 2
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: PUSH
7809: EMPTY
7810: LIST
7811: PPUSH
7812: CALL_OW 69
7816: PUSH
7817: LD_EXP 45
7821: DIFF
7822: PPUSH
7823: LD_VAR 0 7
7827: PPUSH
7828: CALL_OW 74
7832: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7833: LD_VAR 0 7
7837: PPUSH
7838: LD_VAR 0 9
7842: PPUSH
7843: CALL_OW 296
7847: PUSH
7848: LD_INT 8
7850: PLUS
7851: PUSH
7852: LD_VAR 0 7
7856: PPUSH
7857: LD_VAR 0 10
7861: PPUSH
7862: CALL_OW 296
7866: LESS
7867: IFFALSE 7885
// ComAttackUnit ( j , target1 ) else
7869: LD_VAR 0 7
7873: PPUSH
7874: LD_VAR 0 9
7878: PPUSH
7879: CALL_OW 115
7883: GO 7899
// ComAttackUnit ( j , target2 ) ;
7885: LD_VAR 0 7
7889: PPUSH
7890: LD_VAR 0 10
7894: PPUSH
7895: CALL_OW 115
// end ;
7899: GO 7687
7901: POP
7902: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7903: LD_INT 22
7905: PUSH
7906: LD_VAR 0 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 21
7917: PUSH
7918: LD_INT 2
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 24
7927: PUSH
7928: LD_INT 1000
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: LD_INT 58
7940: PUSH
7941: EMPTY
7942: LIST
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: LD_INT 34
7949: PUSH
7950: LD_INT 43
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 34
7959: PUSH
7960: LD_INT 44
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 34
7969: PUSH
7970: LD_INT 46
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 69
7998: PUSH
7999: LD_INT 0
8001: EQUAL
8002: IFFALSE 7670
// seeEnemy = 0 ;
8004: LD_ADDR_VAR 0 11
8008: PUSH
8009: LD_INT 0
8011: ST_TO_ADDR
// end ;
8012: LD_VAR 0 5
8016: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
8017: LD_INT 0
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
8025: LD_ADDR_VAR 0 8
8029: PUSH
8030: LD_VAR 0 2
8034: PPUSH
8035: CALL_OW 313
8039: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
8040: LD_ADDR_VAR 0 9
8044: PUSH
8045: LD_VAR 0 3
8049: PPUSH
8050: LD_INT 22
8052: PUSH
8053: LD_VAR 0 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 24
8074: PUSH
8075: LD_INT 750
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 3
8084: PUSH
8085: LD_INT 54
8087: PUSH
8088: EMPTY
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 70
8105: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
8106: LD_ADDR_VAR 0 6
8110: PUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: LD_INT 22
8118: PUSH
8119: LD_VAR 0 1
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 21
8130: PUSH
8131: LD_INT 3
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 3
8140: PUSH
8141: LD_INT 24
8143: PUSH
8144: LD_INT 1000
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: PPUSH
8163: CALL_OW 70
8167: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
8168: LD_VAR 0 6
8172: NOT
8173: PUSH
8174: LD_INT 22
8176: PUSH
8177: LD_VAR 0 1
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 2
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 24
8198: PUSH
8199: LD_INT 250
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: PPUSH
8211: CALL_OW 69
8215: NOT
8216: AND
8217: IFFALSE 8221
// exit ;
8219: GO 8403
// if buildings_list > 0 and engineerOkInside then
8221: LD_VAR 0 6
8225: PUSH
8226: LD_INT 0
8228: GREATER
8229: PUSH
8230: LD_VAR 0 8
8234: AND
8235: IFFALSE 8246
// ComExitBuilding ( engineerOkInside ) ;
8237: LD_VAR 0 8
8241: PPUSH
8242: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
8246: LD_VAR 0 6
8250: PUSH
8251: LD_INT 0
8253: GREATER
8254: PUSH
8255: LD_VAR 0 9
8259: PUSH
8260: LD_INT 0
8262: GREATER
8263: AND
8264: IFFALSE 8284
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
8266: LD_VAR 0 9
8270: PPUSH
8271: LD_VAR 0 6
8275: PUSH
8276: LD_INT 1
8278: ARRAY
8279: PPUSH
8280: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
8284: LD_VAR 0 6
8288: PUSH
8289: LD_INT 0
8291: EQUAL
8292: PUSH
8293: LD_VAR 0 4
8297: PUSH
8298: LD_INT 0
8300: EQUAL
8301: AND
8302: PUSH
8303: LD_VAR 0 9
8307: PUSH
8308: LD_INT 0
8310: GREATER
8311: AND
8312: IFFALSE 8328
// ComEnterUnit ( engineerOkOutside , building ) ;
8314: LD_VAR 0 9
8318: PPUSH
8319: LD_VAR 0 2
8323: PPUSH
8324: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
8328: LD_VAR 0 9
8332: PUSH
8333: LD_INT 0
8335: GREATER
8336: PUSH
8337: LD_VAR 0 6
8341: PUSH
8342: LD_INT 0
8344: EQUAL
8345: AND
8346: PUSH
8347: LD_VAR 0 4
8351: PUSH
8352: LD_INT 0
8354: GREATER
8355: AND
8356: IFFALSE 8403
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
8358: LD_VAR 0 9
8362: PPUSH
8363: LD_VAR 0 4
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: LD_VAR 0 4
8376: PUSH
8377: LD_INT 2
8379: ARRAY
8380: PPUSH
8381: LD_VAR 0 4
8385: PUSH
8386: LD_INT 3
8388: ARRAY
8389: PPUSH
8390: LD_VAR 0 4
8394: PUSH
8395: LD_INT 4
8397: ARRAY
8398: PPUSH
8399: CALL_OW 145
// end ;
8403: LD_VAR 0 5
8407: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
8413: PPUSH
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
8419: LD_ADDR_VAR 0 6
8423: PUSH
8424: LD_INT 22
8426: PUSH
8427: LD_VAR 0 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 4
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 24
8458: PUSH
8459: LD_INT 251
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PPUSH
8472: CALL_OW 69
8476: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
8477: LD_ADDR_VAR 0 7
8481: PUSH
8482: LD_VAR 0 3
8486: PPUSH
8487: LD_INT 22
8489: PUSH
8490: LD_VAR 0 1
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 23
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 25
8511: PUSH
8512: LD_INT 4
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 50
8521: PUSH
8522: EMPTY
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PPUSH
8531: CALL_OW 70
8535: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
8536: LD_ADDR_VAR 0 10
8540: PUSH
8541: LD_VAR 0 3
8545: PPUSH
8546: LD_INT 22
8548: PUSH
8549: LD_VAR 0 1
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 21
8560: PUSH
8561: LD_INT 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: LD_INT 25
8573: PUSH
8574: LD_INT 3
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 3
8587: PUSH
8588: LD_INT 24
8590: PUSH
8591: LD_INT 750
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 70
8612: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8613: LD_ADDR_VAR 0 11
8617: PUSH
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 22
8625: PUSH
8626: LD_VAR 0 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: LD_INT 21
8637: PUSH
8638: LD_INT 1
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 3
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 3
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 3
8664: PUSH
8665: LD_INT 24
8667: PUSH
8668: LD_INT 1000
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PPUSH
8685: CALL_OW 70
8689: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8690: LD_VAR 0 10
8694: NOT
8695: PUSH
8696: LD_VAR 0 11
8700: NOT
8701: AND
8702: PUSH
8703: LD_VAR 0 6
8707: NOT
8708: AND
8709: IFFALSE 8713
// exit ;
8711: GO 8947
// if damageUnits > 0 and sci_list > 0 then
8713: LD_VAR 0 10
8717: PUSH
8718: LD_INT 0
8720: GREATER
8721: PUSH
8722: LD_VAR 0 6
8726: PUSH
8727: LD_INT 0
8729: GREATER
8730: AND
8731: IFFALSE 8747
// ComMoveToArea ( damageUnits , healArea ) ;
8733: LD_VAR 0 10
8737: PPUSH
8738: LD_VAR 0 2
8742: PPUSH
8743: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8747: LD_VAR 0 11
8751: PUSH
8752: LD_INT 0
8754: GREATER
8755: PUSH
8756: LD_VAR 0 6
8760: PUSH
8761: LD_INT 0
8763: GREATER
8764: AND
8765: IFFALSE 8776
// ComExitBuilding ( sci_list ) ;
8767: LD_VAR 0 6
8771: PPUSH
8772: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8776: LD_VAR 0 11
8780: PUSH
8781: LD_INT 0
8783: GREATER
8784: PUSH
8785: LD_VAR 0 7
8789: PUSH
8790: LD_INT 0
8792: GREATER
8793: AND
8794: IFFALSE 8814
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8796: LD_VAR 0 7
8800: PPUSH
8801: LD_VAR 0 11
8805: PUSH
8806: LD_INT 1
8808: ARRAY
8809: PPUSH
8810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8814: LD_VAR 0 10
8818: PUSH
8819: LD_INT 0
8821: EQUAL
8822: PUSH
8823: LD_VAR 0 11
8827: PUSH
8828: LD_INT 0
8830: EQUAL
8831: AND
8832: PUSH
8833: LD_VAR 0 7
8837: PUSH
8838: LD_INT 0
8840: GREATER
8841: AND
8842: IFFALSE 8947
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8844: LD_ADDR_VAR 0 12
8848: PUSH
8849: LD_INT 22
8851: PUSH
8852: LD_VAR 0 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 21
8863: PUSH
8864: LD_INT 3
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 30
8873: PUSH
8874: LD_INT 8
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8891: LD_ADDR_VAR 0 13
8895: PUSH
8896: LD_INT 1
8898: PPUSH
8899: LD_VAR 0 12
8903: PPUSH
8904: CALL_OW 12
8908: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8909: LD_VAR 0 7
8913: PPUSH
8914: LD_INT 3
8916: PUSH
8917: LD_INT 60
8919: PUSH
8920: EMPTY
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 72
8931: PPUSH
8932: LD_VAR 0 12
8936: PUSH
8937: LD_VAR 0 13
8941: ARRAY
8942: PPUSH
8943: CALL_OW 120
// end ; end ;
8947: LD_VAR 0 5
8951: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
8957: PPUSH
// tmpTab = [ ] ;
8958: LD_ADDR_VAR 0 6
8962: PUSH
8963: EMPTY
8964: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8965: LD_INT 22
8967: PUSH
8968: LD_VAR 0 1
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 30
8979: PUSH
8980: LD_INT 32
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: PUSH
8996: LD_INT 0
8998: GREATER
8999: IFFALSE 9082
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
9001: LD_ADDR_VAR 0 4
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_VAR 0 1
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 30
9020: PUSH
9021: LD_INT 32
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: PUSH
9037: FOR_IN
9038: IFFALSE 9080
// begin for j in UnitsInside ( i ) do
9040: LD_ADDR_VAR 0 5
9044: PUSH
9045: LD_VAR 0 4
9049: PPUSH
9050: CALL_OW 313
9054: PUSH
9055: FOR_IN
9056: IFFALSE 9076
// tmpTab = tmpTab ^ j ;
9058: LD_ADDR_VAR 0 6
9062: PUSH
9063: LD_VAR 0 6
9067: PUSH
9068: LD_VAR 0 5
9072: ADD
9073: ST_TO_ADDR
9074: GO 9055
9076: POP
9077: POP
// end ;
9078: GO 9037
9080: POP
9081: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
9082: LD_VAR 0 6
9086: PPUSH
9087: LD_VAR 0 2
9091: PPUSH
9092: CALL_OW 250
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: CALL_OW 251
9106: PPUSH
9107: CALL_OW 114
// end ;
9111: LD_VAR 0 3
9115: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
9116: LD_INT 0
9118: PPUSH
9119: PPUSH
9120: PPUSH
9121: PPUSH
// enable ;
9122: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: LD_VAR 0 3
9132: PPUSH
9133: CALL_OW 435
9137: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
9138: LD_ADDR_VAR 0 6
9142: PUSH
9143: LD_INT 22
9145: PUSH
9146: LD_VAR 0 1
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 34
9157: PUSH
9158: LD_VAR 0 2
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PPUSH
9171: CALL_OW 69
9175: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
9176: LD_VAR 0 6
9180: PUSH
9181: LD_INT 0
9183: GREATER
9184: PUSH
9185: LD_VAR 0 3
9189: PPUSH
9190: CALL_OW 435
9194: AND
9195: PUSH
9196: LD_VAR 0 7
9200: PUSH
9201: LD_INT 0
9203: GREATER
9204: AND
9205: IFFALSE 9254
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
9207: LD_VAR 0 6
9211: PUSH
9212: LD_INT 1
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 7
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: PPUSH
9225: LD_VAR 0 7
9229: PUSH
9230: LD_INT 2
9232: ARRAY
9233: PPUSH
9234: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
9238: LD_VAR 0 6
9242: PUSH
9243: LD_INT 1
9245: ARRAY
9246: PPUSH
9247: LD_INT 100
9249: PPUSH
9250: CALL_OW 240
// end ; end ;
9254: LD_VAR 0 4
9258: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
9259: LD_INT 0
9261: PPUSH
9262: PPUSH
9263: PPUSH
9264: PPUSH
9265: PPUSH
9266: PPUSH
9267: PPUSH
9268: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
9269: LD_ADDR_VAR 0 6
9273: PUSH
9274: LD_VAR 0 2
9278: PPUSH
9279: LD_INT 22
9281: PUSH
9282: LD_VAR 0 1
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: PUSH
9291: LD_INT 56
9293: PUSH
9294: EMPTY
9295: LIST
9296: PUSH
9297: LD_INT 24
9299: PUSH
9300: LD_INT 700
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 25
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 25
9335: PUSH
9336: LD_INT 5
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 25
9345: PUSH
9346: LD_INT 8
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 25
9355: PUSH
9356: LD_INT 9
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 70
9381: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9382: LD_ADDR_VAR 0 7
9386: PUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 30
9406: PUSH
9407: LD_INT 32
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 58
9416: PUSH
9417: EMPTY
9418: LIST
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 251
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PPUSH
9436: CALL_OW 70
9440: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9441: LD_ADDR_VAR 0 9
9445: PUSH
9446: LD_VAR 0 2
9450: PPUSH
9451: LD_INT 22
9453: PUSH
9454: LD_VAR 0 1
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 2
9465: PUSH
9466: LD_INT 30
9468: PUSH
9469: LD_INT 4
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 30
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 24
9493: PUSH
9494: LD_INT 251
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: LIST
9505: PPUSH
9506: CALL_OW 70
9510: ST_TO_ADDR
// if barrackList > 0 then
9511: LD_VAR 0 9
9515: PUSH
9516: LD_INT 0
9518: GREATER
9519: IFFALSE 9667
// begin if turretList = 0 then
9521: LD_VAR 0 7
9525: PUSH
9526: LD_INT 0
9528: EQUAL
9529: IFFALSE 9571
// begin if soldiers_list > 0 then
9531: LD_VAR 0 6
9535: PUSH
9536: LD_INT 0
9538: GREATER
9539: IFFALSE 9569
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_VAR 0 9
9550: PUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_VAR 0 9
9558: PPUSH
9559: CALL_OW 12
9563: ARRAY
9564: PPUSH
9565: CALL_OW 120
// end else
9569: GO 9667
// begin for i in barrackList do
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: LD_VAR 0 9
9580: PUSH
9581: FOR_IN
9582: IFFALSE 9665
// begin insideUnits = UnitsInside ( i ) ;
9584: LD_ADDR_VAR 0 10
9588: PUSH
9589: LD_VAR 0 4
9593: PPUSH
9594: CALL_OW 313
9598: ST_TO_ADDR
// if insideUnits > 0 then
9599: LD_VAR 0 10
9603: PUSH
9604: LD_INT 0
9606: GREATER
9607: IFFALSE 9631
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
9609: LD_VAR 0 10
9613: PUSH
9614: LD_INT 1
9616: ARRAY
9617: PPUSH
9618: LD_VAR 0 7
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: PPUSH
9627: CALL_OW 120
// if soldiers_list > 0 then
9631: LD_VAR 0 6
9635: PUSH
9636: LD_INT 0
9638: GREATER
9639: IFFALSE 9663
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
9641: LD_VAR 0 6
9645: PUSH
9646: LD_INT 1
9648: ARRAY
9649: PPUSH
9650: LD_VAR 0 7
9654: PUSH
9655: LD_INT 1
9657: ARRAY
9658: PPUSH
9659: CALL_OW 120
// end ;
9663: GO 9581
9665: POP
9666: POP
// end ; end ; end ;
9667: LD_VAR 0 3
9671: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9672: LD_INT 0
9674: PPUSH
9675: PPUSH
9676: PPUSH
9677: PPUSH
9678: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9679: LD_ADDR_VAR 0 6
9683: PUSH
9684: LD_INT 22
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: LD_INT 30
9701: PUSH
9702: LD_INT 31
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 30
9711: PUSH
9712: LD_INT 32
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 30
9721: PUSH
9722: LD_INT 33
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 30
9731: PUSH
9732: LD_INT 4
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 30
9741: PUSH
9742: LD_INT 5
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PPUSH
9761: CALL_OW 69
9765: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9766: LD_ADDR_VAR 0 7
9770: PUSH
9771: LD_INT 22
9773: PUSH
9774: LD_VAR 0 2
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 21
9785: PUSH
9786: LD_INT 3
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 58
9795: PUSH
9796: EMPTY
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PPUSH
9804: CALL_OW 69
9808: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9809: LD_VAR 0 6
9813: PUSH
9814: LD_INT 0
9816: GREATER
9817: PUSH
9818: LD_VAR 0 7
9822: PUSH
9823: LD_INT 0
9825: GREATER
9826: AND
9827: IFFALSE 9897
// begin for i in turretsList do
9829: LD_ADDR_VAR 0 4
9833: PUSH
9834: LD_VAR 0 6
9838: PUSH
9839: FOR_IN
9840: IFFALSE 9895
// begin for j in enemyBuildings do
9842: LD_ADDR_VAR 0 5
9846: PUSH
9847: LD_VAR 0 7
9851: PUSH
9852: FOR_IN
9853: IFFALSE 9891
// begin if GetDistUnits ( i , j ) < 20 then
9855: LD_VAR 0 4
9859: PPUSH
9860: LD_VAR 0 5
9864: PPUSH
9865: CALL_OW 296
9869: PUSH
9870: LD_INT 20
9872: LESS
9873: IFFALSE 9889
// begin ComAttackUnit ( i , j ) ;
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_VAR 0 5
9884: PPUSH
9885: CALL_OW 115
// end ; end ;
9889: GO 9852
9891: POP
9892: POP
// end ;
9893: GO 9839
9895: POP
9896: POP
// end ; end ;
9897: LD_VAR 0 3
9901: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9902: LD_INT 0
9904: PPUSH
9905: PPUSH
9906: PPUSH
9907: PPUSH
9908: PPUSH
9909: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9910: LD_ADDR_VAR 0 8
9914: PUSH
9915: LD_INT 22
9917: PUSH
9918: LD_VAR 0 1
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 21
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 34
9939: PUSH
9940: LD_INT 52
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: PPUSH
9952: CALL_OW 69
9956: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9957: LD_ADDR_VAR 0 9
9961: PUSH
9962: LD_INT 22
9964: PUSH
9965: LD_VAR 0 1
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 21
9976: PUSH
9977: LD_INT 3
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 3
9986: PUSH
9987: LD_INT 24
9989: PUSH
9990: LD_INT 1000
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: EMPTY
10007: LIST
10008: PPUSH
10009: CALL_OW 69
10013: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
10014: LD_VAR 0 9
10018: PUSH
10019: LD_INT 0
10021: GREATER
10022: PUSH
10023: LD_VAR 0 8
10027: PPUSH
10028: LD_INT 24
10030: PUSH
10031: LD_INT 750
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PPUSH
10038: CALL_OW 72
10042: PUSH
10043: LD_INT 0
10045: GREATER
10046: AND
10047: IFFALSE 10082
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
10049: LD_VAR 0 8
10053: PPUSH
10054: LD_INT 24
10056: PUSH
10057: LD_INT 750
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PPUSH
10064: CALL_OW 72
10068: PPUSH
10069: LD_VAR 0 9
10073: PUSH
10074: LD_INT 1
10076: ARRAY
10077: PPUSH
10078: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
10082: LD_VAR 0 8
10086: PPUSH
10087: LD_INT 3
10089: PUSH
10090: LD_INT 24
10092: PUSH
10093: LD_INT 750
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PPUSH
10104: CALL_OW 72
10108: PUSH
10109: LD_INT 0
10111: GREATER
10112: IFFALSE 10150
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
10114: LD_VAR 0 8
10118: PPUSH
10119: LD_INT 3
10121: PUSH
10122: LD_INT 24
10124: PUSH
10125: LD_INT 750
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PPUSH
10136: CALL_OW 72
10140: PPUSH
10141: LD_VAR 0 2
10145: PPUSH
10146: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
10150: LD_VAR 0 8
10154: PUSH
10155: LD_INT 0
10157: GREATER
10158: PUSH
10159: LD_VAR 0 9
10163: PUSH
10164: LD_INT 0
10166: EQUAL
10167: AND
10168: PUSH
10169: LD_VAR 0 3
10173: PUSH
10174: LD_INT 0
10176: GREATER
10177: AND
10178: IFFALSE 10225
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
10180: LD_VAR 0 8
10184: PPUSH
10185: LD_VAR 0 3
10189: PUSH
10190: LD_INT 1
10192: ARRAY
10193: PPUSH
10194: LD_VAR 0 3
10198: PUSH
10199: LD_INT 2
10201: ARRAY
10202: PPUSH
10203: LD_VAR 0 3
10207: PUSH
10208: LD_INT 3
10210: ARRAY
10211: PPUSH
10212: LD_VAR 0 3
10216: PUSH
10217: LD_INT 4
10219: ARRAY
10220: PPUSH
10221: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
10225: LD_VAR 0 2
10229: PPUSH
10230: LD_INT 22
10232: PUSH
10233: LD_VAR 0 1
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 21
10244: PUSH
10245: LD_INT 2
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 34
10254: PUSH
10255: LD_INT 52
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 3
10264: PUSH
10265: LD_INT 24
10267: PUSH
10268: LD_INT 750
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PPUSH
10285: CALL_OW 70
10289: PUSH
10290: LD_INT 0
10292: GREATER
10293: IFFALSE 10495
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
10295: LD_ADDR_VAR 0 5
10299: PUSH
10300: LD_VAR 0 2
10304: PPUSH
10305: LD_INT 22
10307: PUSH
10308: LD_VAR 0 1
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 21
10319: PUSH
10320: LD_INT 2
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 34
10329: PUSH
10330: LD_INT 52
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 3
10339: PUSH
10340: LD_INT 24
10342: PUSH
10343: LD_INT 750
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: PPUSH
10360: CALL_OW 70
10364: PUSH
10365: FOR_IN
10366: IFFALSE 10493
// begin mechTmp = UnitsInside ( i ) ;
10368: LD_ADDR_VAR 0 6
10372: PUSH
10373: LD_VAR 0 5
10377: PPUSH
10378: CALL_OW 313
10382: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
10383: LD_VAR 0 6
10387: PPUSH
10388: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
10392: LD_VAR 0 6
10396: PPUSH
10397: LD_VAR 0 7
10401: PPUSH
10402: CALL_OW 189
// wait ( 0 0$2 ) ;
10406: LD_INT 70
10408: PPUSH
10409: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
10413: LD_VAR 0 6
10417: PPUSH
10418: LD_VAR 0 2
10422: PPUSH
10423: LD_INT 22
10425: PUSH
10426: LD_VAR 0 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 34
10447: PUSH
10448: LD_INT 52
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 24
10457: PUSH
10458: LD_INT 1000
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 58
10467: PUSH
10468: EMPTY
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 70
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: CALL_OW 180
// end ;
10491: GO 10365
10493: POP
10494: POP
// end ; end ;
10495: LD_VAR 0 4
10499: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
10500: LD_INT 0
10502: PPUSH
10503: PPUSH
10504: PPUSH
10505: PPUSH
10506: PPUSH
10507: PPUSH
10508: PPUSH
10509: PPUSH
10510: PPUSH
10511: PPUSH
10512: PPUSH
// for i = 1 to medicCount do
10513: LD_ADDR_VAR 0 14
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_VAR 0 7
10527: PUSH
10528: FOR_TO
10529: IFFALSE 10611
// begin uc_side = side ;
10531: LD_ADDR_OWVAR 20
10535: PUSH
10536: LD_VAR 0 1
10540: ST_TO_ADDR
// uc_nation = nation ;
10541: LD_ADDR_OWVAR 21
10545: PUSH
10546: LD_VAR 0 2
10550: ST_TO_ADDR
// hc_name =  ;
10551: LD_ADDR_OWVAR 26
10555: PUSH
10556: LD_STRING 
10558: ST_TO_ADDR
// hc_gallery =  ;
10559: LD_ADDR_OWVAR 33
10563: PUSH
10564: LD_STRING 
10566: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
10567: LD_INT 0
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: LD_VAR 0 8
10577: PPUSH
10578: CALL_OW 380
// un = CreateHuman ;
10582: LD_ADDR_VAR 0 16
10586: PUSH
10587: CALL_OW 44
10591: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10592: LD_VAR 0 16
10596: PPUSH
10597: LD_VAR 0 9
10601: PPUSH
10602: LD_INT 0
10604: PPUSH
10605: CALL_OW 49
// end ;
10609: GO 10528
10611: POP
10612: POP
// for i = 1 to soldierCount do
10613: LD_ADDR_VAR 0 14
10617: PUSH
10618: DOUBLE
10619: LD_INT 1
10621: DEC
10622: ST_TO_ADDR
10623: LD_VAR 0 3
10627: PUSH
10628: FOR_TO
10629: IFFALSE 10711
// begin uc_side = side ;
10631: LD_ADDR_OWVAR 20
10635: PUSH
10636: LD_VAR 0 1
10640: ST_TO_ADDR
// uc_nation = nation ;
10641: LD_ADDR_OWVAR 21
10645: PUSH
10646: LD_VAR 0 2
10650: ST_TO_ADDR
// hc_name =  ;
10651: LD_ADDR_OWVAR 26
10655: PUSH
10656: LD_STRING 
10658: ST_TO_ADDR
// hc_gallery =  ;
10659: LD_ADDR_OWVAR 33
10663: PUSH
10664: LD_STRING 
10666: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
10667: LD_INT 0
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: LD_VAR 0 8
10677: PPUSH
10678: CALL_OW 380
// un = CreateHuman ;
10682: LD_ADDR_VAR 0 16
10686: PUSH
10687: CALL_OW 44
10691: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10692: LD_VAR 0 16
10696: PPUSH
10697: LD_VAR 0 9
10701: PPUSH
10702: LD_INT 0
10704: PPUSH
10705: CALL_OW 49
// end ;
10709: GO 10628
10711: POP
10712: POP
// for i = 1 to sniperCount do
10713: LD_ADDR_VAR 0 14
10717: PUSH
10718: DOUBLE
10719: LD_INT 1
10721: DEC
10722: ST_TO_ADDR
10723: LD_VAR 0 4
10727: PUSH
10728: FOR_TO
10729: IFFALSE 10811
// begin uc_side = side ;
10731: LD_ADDR_OWVAR 20
10735: PUSH
10736: LD_VAR 0 1
10740: ST_TO_ADDR
// uc_nation = nation ;
10741: LD_ADDR_OWVAR 21
10745: PUSH
10746: LD_VAR 0 2
10750: ST_TO_ADDR
// hc_name =  ;
10751: LD_ADDR_OWVAR 26
10755: PUSH
10756: LD_STRING 
10758: ST_TO_ADDR
// hc_gallery =  ;
10759: LD_ADDR_OWVAR 33
10763: PUSH
10764: LD_STRING 
10766: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10767: LD_INT 0
10769: PPUSH
10770: LD_INT 5
10772: PPUSH
10773: LD_VAR 0 8
10777: PPUSH
10778: CALL_OW 380
// un = CreateHuman ;
10782: LD_ADDR_VAR 0 16
10786: PUSH
10787: CALL_OW 44
10791: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10792: LD_VAR 0 16
10796: PPUSH
10797: LD_VAR 0 9
10801: PPUSH
10802: LD_INT 0
10804: PPUSH
10805: CALL_OW 49
// end ;
10809: GO 10728
10811: POP
10812: POP
// for i = 1 to bazookCount do
10813: LD_ADDR_VAR 0 14
10817: PUSH
10818: DOUBLE
10819: LD_INT 1
10821: DEC
10822: ST_TO_ADDR
10823: LD_VAR 0 5
10827: PUSH
10828: FOR_TO
10829: IFFALSE 10911
// begin uc_side = side ;
10831: LD_ADDR_OWVAR 20
10835: PUSH
10836: LD_VAR 0 1
10840: ST_TO_ADDR
// uc_nation = nation ;
10841: LD_ADDR_OWVAR 21
10845: PUSH
10846: LD_VAR 0 2
10850: ST_TO_ADDR
// hc_name =  ;
10851: LD_ADDR_OWVAR 26
10855: PUSH
10856: LD_STRING 
10858: ST_TO_ADDR
// hc_gallery =  ;
10859: LD_ADDR_OWVAR 33
10863: PUSH
10864: LD_STRING 
10866: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10867: LD_INT 0
10869: PPUSH
10870: LD_INT 9
10872: PPUSH
10873: LD_VAR 0 8
10877: PPUSH
10878: CALL_OW 380
// un = CreateHuman ;
10882: LD_ADDR_VAR 0 16
10886: PUSH
10887: CALL_OW 44
10891: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10892: LD_VAR 0 16
10896: PPUSH
10897: LD_VAR 0 9
10901: PPUSH
10902: LD_INT 0
10904: PPUSH
10905: CALL_OW 49
// end ;
10909: GO 10828
10911: POP
10912: POP
// for i = 1 to mortalCount do
10913: LD_ADDR_VAR 0 14
10917: PUSH
10918: DOUBLE
10919: LD_INT 1
10921: DEC
10922: ST_TO_ADDR
10923: LD_VAR 0 6
10927: PUSH
10928: FOR_TO
10929: IFFALSE 11011
// begin uc_side = side ;
10931: LD_ADDR_OWVAR 20
10935: PUSH
10936: LD_VAR 0 1
10940: ST_TO_ADDR
// uc_nation = nation ;
10941: LD_ADDR_OWVAR 21
10945: PUSH
10946: LD_VAR 0 2
10950: ST_TO_ADDR
// hc_name =  ;
10951: LD_ADDR_OWVAR 26
10955: PUSH
10956: LD_STRING 
10958: ST_TO_ADDR
// hc_gallery =  ;
10959: LD_ADDR_OWVAR 33
10963: PUSH
10964: LD_STRING 
10966: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10967: LD_INT 0
10969: PPUSH
10970: LD_INT 8
10972: PPUSH
10973: LD_VAR 0 8
10977: PPUSH
10978: CALL_OW 380
// un = CreateHuman ;
10982: LD_ADDR_VAR 0 16
10986: PUSH
10987: CALL_OW 44
10991: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10992: LD_VAR 0 16
10996: PPUSH
10997: LD_VAR 0 9
11001: PPUSH
11002: LD_INT 0
11004: PPUSH
11005: CALL_OW 49
// end ;
11009: GO 10928
11011: POP
11012: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
11013: LD_ADDR_VAR 0 19
11017: PUSH
11018: LD_INT 22
11020: PUSH
11021: LD_VAR 0 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 25
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 25
11045: PUSH
11046: LD_INT 5
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 25
11055: PUSH
11056: LD_INT 8
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 25
11065: PUSH
11066: LD_INT 9
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 69
11088: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
11089: LD_ADDR_VAR 0 18
11093: PUSH
11094: LD_INT 22
11096: PUSH
11097: LD_VAR 0 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 4
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PPUSH
11120: CALL_OW 69
11124: ST_TO_ADDR
// for i in medic_list do
11125: LD_ADDR_VAR 0 14
11129: PUSH
11130: LD_VAR 0 18
11134: PUSH
11135: FOR_IN
11136: IFFALSE 11154
// ComMoveToArea ( i , healArea ) ;
11138: LD_VAR 0 14
11142: PPUSH
11143: LD_VAR 0 10
11147: PPUSH
11148: CALL_OW 113
11152: GO 11135
11154: POP
11155: POP
// if strategy = 1 then
11156: LD_VAR 0 12
11160: PUSH
11161: LD_INT 1
11163: EQUAL
11164: IFFALSE 11881
// begin repeat wait ( 0 0$3 ) ;
11166: LD_INT 105
11168: PPUSH
11169: CALL_OW 67
// for i in soldiersOK_list do
11173: LD_ADDR_VAR 0 14
11177: PUSH
11178: LD_VAR 0 19
11182: PUSH
11183: FOR_IN
11184: IFFALSE 11218
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
11186: LD_VAR 0 14
11190: PPUSH
11191: LD_INT 80
11193: PPUSH
11194: LD_INT 109
11196: PPUSH
11197: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
11201: LD_VAR 0 14
11205: PPUSH
11206: LD_INT 39
11208: PPUSH
11209: LD_INT 49
11211: PPUSH
11212: CALL_OW 174
// end ;
11216: GO 11183
11218: POP
11219: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
11220: LD_INT 13
11222: PPUSH
11223: LD_INT 22
11225: PUSH
11226: LD_VAR 0 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: CALL_OW 70
11239: PUSH
11240: LD_INT 0
11242: GREATER
11243: IFFALSE 11166
// repeat wait ( 0 0$1 ) ;
11245: LD_INT 35
11247: PPUSH
11248: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11252: LD_ADDR_VAR 0 17
11256: PUSH
11257: LD_INT 22
11259: PUSH
11260: LD_VAR 0 1
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 1
11271: PUSH
11272: LD_INT 3
11274: PUSH
11275: LD_INT 24
11277: PUSH
11278: LD_INT 550
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 24
11291: PUSH
11292: LD_INT 250
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PPUSH
11308: CALL_OW 69
11312: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11313: LD_ADDR_VAR 0 19
11317: PUSH
11318: LD_INT 22
11320: PUSH
11321: LD_VAR 0 1
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 2
11332: PUSH
11333: LD_INT 25
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 25
11345: PUSH
11346: LD_INT 5
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 25
11355: PUSH
11356: LD_INT 8
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 9
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 24
11382: PUSH
11383: LD_INT 1000
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: PPUSH
11395: CALL_OW 69
11399: ST_TO_ADDR
// if medicCount > 0 then
11400: LD_VAR 0 7
11404: PUSH
11405: LD_INT 0
11407: GREATER
11408: IFFALSE 11482
// begin if damageUnit_list > 0 then
11410: LD_VAR 0 17
11414: PUSH
11415: LD_INT 0
11417: GREATER
11418: IFFALSE 11482
// begin for i in damageUnit_list do
11420: LD_ADDR_VAR 0 14
11424: PUSH
11425: LD_VAR 0 17
11429: PUSH
11430: FOR_IN
11431: IFFALSE 11480
// begin ComMoveToArea ( i , healArea ) ;
11433: LD_VAR 0 14
11437: PPUSH
11438: LD_VAR 0 10
11442: PPUSH
11443: CALL_OW 113
// for j in medic_list do
11447: LD_ADDR_VAR 0 15
11451: PUSH
11452: LD_VAR 0 18
11456: PUSH
11457: FOR_IN
11458: IFFALSE 11476
// AddComHeal ( j , i ) ;
11460: LD_VAR 0 15
11464: PPUSH
11465: LD_VAR 0 14
11469: PPUSH
11470: CALL_OW 188
11474: GO 11457
11476: POP
11477: POP
// end ;
11478: GO 11430
11480: POP
11481: POP
// end ; end ; for i in soldiersOK_list do
11482: LD_ADDR_VAR 0 14
11486: PUSH
11487: LD_VAR 0 19
11491: PUSH
11492: FOR_IN
11493: IFFALSE 11675
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11495: LD_ADDR_VAR 0 22
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_VAR 0 11
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PPUSH
11512: CALL_OW 69
11516: PUSH
11517: LD_EXP 45
11521: DIFF
11522: PPUSH
11523: LD_VAR 0 14
11527: PPUSH
11528: CALL_OW 74
11532: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11533: LD_ADDR_VAR 0 23
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_VAR 0 11
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 2
11552: PUSH
11553: LD_INT 59
11555: PUSH
11556: EMPTY
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 1
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: PPUSH
11592: CALL_OW 69
11596: PPUSH
11597: LD_VAR 0 14
11601: PPUSH
11602: CALL_OW 74
11606: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11607: LD_VAR 0 14
11611: PPUSH
11612: LD_VAR 0 22
11616: PPUSH
11617: CALL_OW 296
11621: PUSH
11622: LD_INT 8
11624: PLUS
11625: PUSH
11626: LD_VAR 0 14
11630: PPUSH
11631: LD_VAR 0 23
11635: PPUSH
11636: CALL_OW 296
11640: LESS
11641: IFFALSE 11659
// begin ComAttackUnit ( i , target1 ) ;
11643: LD_VAR 0 14
11647: PPUSH
11648: LD_VAR 0 22
11652: PPUSH
11653: CALL_OW 115
// end else
11657: GO 11673
// begin ComAttackUnit ( i , target2 ) ;
11659: LD_VAR 0 14
11663: PPUSH
11664: LD_VAR 0 23
11668: PPUSH
11669: CALL_OW 115
// end ; end ;
11673: GO 11492
11675: POP
11676: POP
// for i in soldiersOK_list do
11677: LD_ADDR_VAR 0 14
11681: PUSH
11682: LD_VAR 0 19
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11870
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) diff ignoreTarget , i ) ;
11690: LD_ADDR_VAR 0 22
11694: PUSH
11695: LD_INT 22
11697: PUSH
11698: LD_VAR 0 11
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PPUSH
11707: CALL_OW 69
11711: PUSH
11712: LD_EXP 45
11716: DIFF
11717: PPUSH
11718: LD_VAR 0 14
11722: PPUSH
11723: CALL_OW 74
11727: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11728: LD_ADDR_VAR 0 23
11732: PUSH
11733: LD_INT 22
11735: PUSH
11736: LD_VAR 0 11
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: LD_INT 59
11750: PUSH
11751: EMPTY
11752: LIST
11753: PUSH
11754: LD_INT 21
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 21
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: EMPTY
11785: LIST
11786: PPUSH
11787: CALL_OW 69
11791: PPUSH
11792: LD_VAR 0 14
11796: PPUSH
11797: CALL_OW 74
11801: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11802: LD_VAR 0 14
11806: PPUSH
11807: LD_VAR 0 22
11811: PPUSH
11812: CALL_OW 296
11816: PUSH
11817: LD_INT 8
11819: PLUS
11820: PUSH
11821: LD_VAR 0 14
11825: PPUSH
11826: LD_VAR 0 23
11830: PPUSH
11831: CALL_OW 296
11835: LESS
11836: IFFALSE 11854
// begin ComAttackUnit ( i , target1 ) ;
11838: LD_VAR 0 14
11842: PPUSH
11843: LD_VAR 0 22
11847: PPUSH
11848: CALL_OW 115
// end else
11852: GO 11868
// begin ComAttackUnit ( i , target2 ) ;
11854: LD_VAR 0 14
11858: PPUSH
11859: LD_VAR 0 23
11863: PPUSH
11864: CALL_OW 115
// end ; end ;
11868: GO 11687
11870: POP
11871: POP
// until soldiersOK_list = [ ] ;
11872: LD_VAR 0 19
11876: PUSH
11877: EMPTY
11878: EQUAL
11879: IFFALSE 11245
// end ; if strategy = 2 then
11881: LD_VAR 0 12
11885: PUSH
11886: LD_INT 2
11888: EQUAL
11889: IFFALSE 12594
// begin repeat wait ( 0 0$1 ) ;
11891: LD_INT 35
11893: PPUSH
11894: CALL_OW 67
// for i in soldiersOK_list do
11898: LD_ADDR_VAR 0 14
11902: PUSH
11903: LD_VAR 0 19
11907: PUSH
11908: FOR_IN
11909: IFFALSE 11943
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11911: LD_VAR 0 14
11915: PPUSH
11916: LD_INT 117
11918: PPUSH
11919: LD_INT 97
11921: PPUSH
11922: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11926: LD_VAR 0 14
11930: PPUSH
11931: LD_INT 94
11933: PPUSH
11934: LD_INT 50
11936: PPUSH
11937: CALL_OW 174
// end ;
11941: GO 11908
11943: POP
11944: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11945: LD_INT 14
11947: PPUSH
11948: LD_INT 22
11950: PUSH
11951: LD_VAR 0 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PPUSH
11960: CALL_OW 70
11964: PUSH
11965: LD_INT 0
11967: GREATER
11968: IFFALSE 11891
// repeat wait ( 0 0$3 ) ;
11970: LD_INT 105
11972: PPUSH
11973: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11977: LD_ADDR_VAR 0 17
11981: PUSH
11982: LD_INT 22
11984: PUSH
11985: LD_VAR 0 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: LD_INT 3
11999: PUSH
12000: LD_INT 24
12002: PUSH
12003: LD_INT 550
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 24
12016: PUSH
12017: LD_INT 250
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 69
12037: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12038: LD_ADDR_VAR 0 19
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_VAR 0 1
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 1
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 25
12070: PUSH
12071: LD_INT 5
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 8
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 25
12090: PUSH
12091: LD_INT 9
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 24
12107: PUSH
12108: LD_INT 1000
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 69
12124: ST_TO_ADDR
// if medicCount > 0 then
12125: LD_VAR 0 7
12129: PUSH
12130: LD_INT 0
12132: GREATER
12133: IFFALSE 12207
// begin if damageUnit_list > 0 then
12135: LD_VAR 0 17
12139: PUSH
12140: LD_INT 0
12142: GREATER
12143: IFFALSE 12207
// begin for i in damageUnit_list do
12145: LD_ADDR_VAR 0 14
12149: PUSH
12150: LD_VAR 0 17
12154: PUSH
12155: FOR_IN
12156: IFFALSE 12205
// begin ComMoveToArea ( i , healArea ) ;
12158: LD_VAR 0 14
12162: PPUSH
12163: LD_VAR 0 10
12167: PPUSH
12168: CALL_OW 113
// for j in medic_list do
12172: LD_ADDR_VAR 0 15
12176: PUSH
12177: LD_VAR 0 18
12181: PUSH
12182: FOR_IN
12183: IFFALSE 12201
// AddComHeal ( j , i ) ;
12185: LD_VAR 0 15
12189: PPUSH
12190: LD_VAR 0 14
12194: PPUSH
12195: CALL_OW 188
12199: GO 12182
12201: POP
12202: POP
// end ;
12203: GO 12155
12205: POP
12206: POP
// end ; end ; for i in soldiersOK_list do
12207: LD_ADDR_VAR 0 14
12211: PUSH
12212: LD_VAR 0 19
12216: PUSH
12217: FOR_IN
12218: IFFALSE 12394
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12220: LD_ADDR_VAR 0 22
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_VAR 0 11
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: PPUSH
12242: LD_VAR 0 14
12246: PPUSH
12247: CALL_OW 74
12251: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12252: LD_ADDR_VAR 0 23
12256: PUSH
12257: LD_INT 22
12259: PUSH
12260: LD_VAR 0 11
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: LD_INT 59
12274: PUSH
12275: EMPTY
12276: LIST
12277: PUSH
12278: LD_INT 21
12280: PUSH
12281: LD_INT 1
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 21
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: PPUSH
12316: LD_VAR 0 14
12320: PPUSH
12321: CALL_OW 74
12325: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12326: LD_VAR 0 14
12330: PPUSH
12331: LD_VAR 0 22
12335: PPUSH
12336: CALL_OW 296
12340: PUSH
12341: LD_INT 8
12343: PLUS
12344: PUSH
12345: LD_VAR 0 14
12349: PPUSH
12350: LD_VAR 0 23
12354: PPUSH
12355: CALL_OW 296
12359: LESS
12360: IFFALSE 12378
// begin ComAttackUnit ( i , target1 ) ;
12362: LD_VAR 0 14
12366: PPUSH
12367: LD_VAR 0 22
12371: PPUSH
12372: CALL_OW 115
// end else
12376: GO 12392
// begin ComAttackUnit ( i , target2 ) ;
12378: LD_VAR 0 14
12382: PPUSH
12383: LD_VAR 0 23
12387: PPUSH
12388: CALL_OW 115
// end ; end ;
12392: GO 12217
12394: POP
12395: POP
// for i in soldiersOK_list do
12396: LD_ADDR_VAR 0 14
12400: PUSH
12401: LD_VAR 0 19
12405: PUSH
12406: FOR_IN
12407: IFFALSE 12583
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12409: LD_ADDR_VAR 0 22
12413: PUSH
12414: LD_INT 22
12416: PUSH
12417: LD_VAR 0 11
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: PPUSH
12431: LD_VAR 0 14
12435: PPUSH
12436: CALL_OW 74
12440: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12441: LD_ADDR_VAR 0 23
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_VAR 0 11
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: LD_INT 59
12463: PUSH
12464: EMPTY
12465: LIST
12466: PUSH
12467: LD_INT 21
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: EMPTY
12498: LIST
12499: PPUSH
12500: CALL_OW 69
12504: PPUSH
12505: LD_VAR 0 14
12509: PPUSH
12510: CALL_OW 74
12514: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12515: LD_VAR 0 14
12519: PPUSH
12520: LD_VAR 0 22
12524: PPUSH
12525: CALL_OW 296
12529: PUSH
12530: LD_INT 8
12532: PLUS
12533: PUSH
12534: LD_VAR 0 14
12538: PPUSH
12539: LD_VAR 0 23
12543: PPUSH
12544: CALL_OW 296
12548: LESS
12549: IFFALSE 12567
// begin ComAttackUnit ( i , target1 ) ;
12551: LD_VAR 0 14
12555: PPUSH
12556: LD_VAR 0 22
12560: PPUSH
12561: CALL_OW 115
// end else
12565: GO 12581
// begin ComAttackUnit ( i , target2 ) ;
12567: LD_VAR 0 14
12571: PPUSH
12572: LD_VAR 0 23
12576: PPUSH
12577: CALL_OW 115
// end ; end ;
12581: GO 12406
12583: POP
12584: POP
// until soldiersOK_list = [ ] ;
12585: LD_VAR 0 19
12589: PUSH
12590: EMPTY
12591: EQUAL
12592: IFFALSE 11970
// end ; end ; end_of_file
12594: LD_VAR 0 13
12598: RET
// every 0 0$01 do
12599: GO 12601
12601: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
12602: LD_INT 22
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: PUSH
12631: LD_INT 0
12633: EQUAL
12634: IFFALSE 12648
// SetClass ( JMM , 2 ) ;
12636: LD_EXP 1
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
12648: LD_STRING M1
12650: PPUSH
12651: CALL_OW 337
// case difficulty of 1 :
12655: LD_OWVAR 67
12659: PUSH
12660: LD_INT 1
12662: DOUBLE
12663: EQUAL
12664: IFTRUE 12668
12666: GO 12678
12668: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
12669: LD_STRING M1-1
12671: PPUSH
12672: CALL_OW 337
12676: GO 12715
12678: LD_INT 2
12680: DOUBLE
12681: EQUAL
12682: IFTRUE 12686
12684: GO 12696
12686: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12687: LD_STRING M1-2
12689: PPUSH
12690: CALL_OW 337
12694: GO 12715
12696: LD_INT 3
12698: DOUBLE
12699: EQUAL
12700: IFTRUE 12704
12702: GO 12714
12704: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12705: LD_STRING M1-3
12707: PPUSH
12708: CALL_OW 337
12712: GO 12715
12714: POP
// ChangeMissionObjectives ( M1cont ) ;
12715: LD_STRING M1cont
12717: PPUSH
12718: CALL_OW 337
// SaveForQuickRestart ;
12722: CALL_OW 22
// wait ( rand ( 0 0$15 , 0 0$20 ) ) ;
12726: LD_INT 525
12728: PPUSH
12729: LD_INT 700
12731: PPUSH
12732: CALL_OW 12
12736: PPUSH
12737: CALL_OW 67
// CreateCratesXYR ( 5 , 82 , 38 , 10 , true ) ;
12741: LD_INT 5
12743: PPUSH
12744: LD_INT 82
12746: PPUSH
12747: LD_INT 38
12749: PPUSH
12750: LD_INT 10
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 56
// wait ( 0 0$14 ) ;
12760: LD_INT 490
12762: PPUSH
12763: CALL_OW 67
// firstCrateSpawn := true ;
12767: LD_ADDR_EXP 41
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// end ;
12775: END
// every 0 0$02 trigger firstCrateSpawn do
12776: LD_EXP 41
12780: IFFALSE 13143
12782: GO 12784
12784: DISABLE
// begin if IsOk ( Lisa ) then
12785: LD_EXP 2
12789: PPUSH
12790: CALL_OW 302
12794: IFFALSE 12810
// Say ( Lisa , DR0-Lisa-1 ) else
12796: LD_EXP 2
12800: PPUSH
12801: LD_STRING DR0-Lisa-1
12803: PPUSH
12804: CALL_OW 88
12808: GO 12956
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12810: LD_INT 22
12812: PUSH
12813: LD_INT 1
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 21
12822: PUSH
12823: LD_INT 1
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 26
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 2
12842: PUSH
12843: LD_INT 25
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: LD_INT 25
12855: PUSH
12856: LD_INT 2
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 25
12865: PUSH
12866: LD_INT 3
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 25
12875: PUSH
12876: LD_INT 4
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: PPUSH
12896: CALL_OW 69
12900: PUSH
12901: LD_EXP 1
12905: PUSH
12906: LD_EXP 8
12910: PUSH
12911: LD_EXP 5
12915: PUSH
12916: LD_EXP 6
12920: PUSH
12921: LD_EXP 7
12925: PUSH
12926: LD_EXP 4
12930: PUSH
12931: LD_EXP 3
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: DIFF
12945: PPUSH
12946: LD_STRING DR0-Sol1-1
12948: PPUSH
12949: LD_STRING DR0-Sol1-1
12951: PPUSH
12952: CALL 5914 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson , Cyrus , Bobby ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12956: LD_INT 22
12958: PUSH
12959: LD_INT 1
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 21
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 26
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 2
12988: PUSH
12989: LD_INT 25
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 25
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 25
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 25
13021: PUSH
13022: LD_INT 4
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: PUSH
13047: LD_EXP 1
13051: PUSH
13052: LD_EXP 8
13056: PUSH
13057: LD_EXP 5
13061: PUSH
13062: LD_EXP 2
13066: PUSH
13067: LD_EXP 6
13071: PUSH
13072: LD_EXP 7
13076: PUSH
13077: LD_EXP 4
13081: PUSH
13082: LD_EXP 3
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: DIFF
13097: PPUSH
13098: LD_STRING DR0-Sol2-1
13100: PPUSH
13101: LD_STRING DR0-Sol2-1
13103: PPUSH
13104: CALL 5914 0 3
// if IsOk ( Cyrus ) then
13108: LD_EXP 4
13112: PPUSH
13113: CALL_OW 302
13117: IFFALSE 13131
// Say ( Cyrus , DR0-Cyrus-1 ) ;
13119: LD_EXP 4
13123: PPUSH
13124: LD_STRING DR0-Cyrus-1
13126: PPUSH
13127: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
13131: LD_EXP 1
13135: PPUSH
13136: LD_STRING DR0-JMM-1
13138: PPUSH
13139: CALL_OW 88
// end ;
13143: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 and not InBattle ( 1 ) do
13144: LD_EXP 5
13148: PPUSH
13149: CALL_OW 302
13153: PUSH
13154: LD_INT 22
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 16
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PPUSH
13178: CALL_OW 69
13182: PUSH
13183: LD_INT 0
13185: GREATER
13186: AND
13187: PUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 463
13195: NOT
13196: AND
13197: IFFALSE 13475
13199: GO 13201
13201: DISABLE
// begin DialogueOn ;
13202: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
13206: LD_EXP 5
13210: PPUSH
13211: LD_STRING D10-Frank-1
13213: PPUSH
13214: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
13218: LD_INT 22
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 21
13230: PUSH
13231: LD_INT 1
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 25
13263: PUSH
13264: LD_INT 3
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 4
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: PPUSH
13293: CALL_OW 69
13297: PUSH
13298: LD_EXP 1
13302: PUSH
13303: LD_EXP 5
13307: PUSH
13308: LD_EXP 2
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: DIFF
13318: PPUSH
13319: LD_STRING D10-Sol1-1
13321: PPUSH
13322: LD_STRING D10-FSol1-1
13324: PPUSH
13325: CALL 5914 0 3
// Say ( Frank , D10-Frank-2 ) ;
13329: LD_EXP 5
13333: PPUSH
13334: LD_STRING D10-Frank-2
13336: PPUSH
13337: CALL_OW 88
// if IsOK ( Lisa ) then
13341: LD_EXP 2
13345: PPUSH
13346: CALL_OW 302
13350: IFFALSE 13366
// begin Say ( Lisa , D10-Lisa-2 ) ;
13352: LD_EXP 2
13356: PPUSH
13357: LD_STRING D10-Lisa-2
13359: PPUSH
13360: CALL_OW 88
// end else
13364: GO 13471
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
13366: LD_INT 22
13368: PUSH
13369: LD_INT 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 21
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 2
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 25
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 25
13411: PUSH
13412: LD_INT 3
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 4
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: PPUSH
13441: CALL_OW 69
13445: PUSH
13446: LD_EXP 1
13450: PUSH
13451: LD_EXP 5
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: DIFF
13460: PPUSH
13461: LD_STRING D10-Sol1-2
13463: PPUSH
13464: LD_STRING D10-FSol1-2
13466: PPUSH
13467: CALL 5914 0 3
// end ; DialogueOff ;
13471: CALL_OW 7
// end ;
13475: END
// every 10 10$30 trigger not InBattle ( 1 ) do
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 463
13483: NOT
13484: IFFALSE 13747
13486: GO 13488
13488: DISABLE
// begin HarrisonSupport ;
13489: CALL 2406 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
13493: LD_EXP 17
13497: PPUSH
13498: CALL_OW 310
13502: PPUSH
13503: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
13507: LD_EXP 17
13511: PPUSH
13512: LD_STRING DEng-Eng1-1
13514: PPUSH
13515: CALL_OW 88
// wait ( 1 1$0 ) ;
13519: LD_INT 2100
13521: PPUSH
13522: CALL_OW 67
// DialogueOn ;
13526: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
13530: LD_EXP 14
13534: PPUSH
13535: LD_STRING DRem-Har-1
13537: PPUSH
13538: CALL_OW 94
// if contactWithRussian = 1 then
13542: LD_EXP 22
13546: PUSH
13547: LD_INT 1
13549: EQUAL
13550: IFFALSE 13566
// begin Say ( JMM , DRem-JMM-1 ) ;
13552: LD_EXP 1
13556: PPUSH
13557: LD_STRING DRem-JMM-1
13559: PPUSH
13560: CALL_OW 88
// end else
13564: GO 13578
// begin Say ( JMM , DRem-JMM-1a ) ;
13566: LD_EXP 1
13570: PPUSH
13571: LD_STRING DRem-JMM-1a
13573: PPUSH
13574: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
13578: LD_EXP 14
13582: PPUSH
13583: LD_STRING DRem-Har-2
13585: PPUSH
13586: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13590: LD_STRING DenisInDelta
13592: PPUSH
13593: LD_INT 0
13595: PPUSH
13596: CALL_OW 30
13600: PUSH
13601: LD_INT 1
13603: EQUAL
13604: IFFALSE 13620
// begin Say ( JMM , DRem-JMM-2 ) ;
13606: LD_EXP 1
13610: PPUSH
13611: LD_STRING DRem-JMM-2
13613: PPUSH
13614: CALL_OW 88
// end else
13618: GO 13632
// begin Say ( JMM , DRem-JMM-2a ) ;
13620: LD_EXP 1
13624: PPUSH
13625: LD_STRING DRem-JMM-2a
13627: PPUSH
13628: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
13632: LD_EXP 14
13636: PPUSH
13637: LD_STRING DRem-Har-3
13639: PPUSH
13640: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
13644: LD_EXP 1
13648: PPUSH
13649: LD_STRING DRem-JMM-3
13651: PPUSH
13652: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
13656: LD_EXP 14
13660: PPUSH
13661: LD_STRING DRem-Har-4
13663: PPUSH
13664: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
13668: LD_STRING DenisInDelta
13670: PPUSH
13671: LD_INT 0
13673: PPUSH
13674: CALL_OW 30
13678: PUSH
13679: LD_INT 1
13681: EQUAL
13682: IFFALSE 13710
// begin Say ( JMM , DRem-JMM-4 ) ;
13684: LD_EXP 1
13688: PPUSH
13689: LD_STRING DRem-JMM-4
13691: PPUSH
13692: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
13696: LD_EXP 14
13700: PPUSH
13701: LD_STRING DRem-Har-5
13703: PPUSH
13704: CALL_OW 94
// end else
13708: GO 13743
// begin SetRestrict ( 36 , 1 , true ) ;
13710: LD_INT 36
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: LD_INT 1
13718: PPUSH
13719: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13723: LD_INT 15
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13736: LD_STRING MR
13738: PPUSH
13739: CALL_OW 337
// end ; DialogueOff ;
13743: CALL_OW 7
// end ;
13747: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 and not InBattle ( 1 ) do var tmp ;
13748: LD_STRING DenisInDelta
13750: PPUSH
13751: LD_INT 0
13753: PPUSH
13754: CALL_OW 30
13758: PUSH
13759: LD_INT 1
13761: EQUAL
13762: PUSH
13763: LD_INT 1
13765: PPUSH
13766: CALL_OW 463
13770: NOT
13771: AND
13772: IFFALSE 14005
13774: GO 13776
13776: DISABLE
13777: LD_INT 0
13779: PPUSH
// begin PrepareDenis ;
13780: CALL 2139 0 0
// CenterNowOnUnits ( Denis ) ;
13784: LD_EXP 9
13788: PPUSH
13789: CALL_OW 87
// tmp := FilterAllUnits ( [ f_side , 1 ] ) ;
13793: LD_ADDR_VAR 0 1
13797: PUSH
13798: LD_INT 22
13800: PUSH
13801: LD_INT 1
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: ST_TO_ADDR
// ComMoveUnit ( Denis , NearestUnitToUnit ( tmp , Denis ) ) ;
13813: LD_EXP 9
13817: PPUSH
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_EXP 9
13827: PPUSH
13828: CALL_OW 74
13832: PPUSH
13833: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13837: LD_INT 35
13839: PPUSH
13840: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Denis , 10 ] ] ) ;
13844: LD_INT 22
13846: PUSH
13847: LD_INT 1
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 91
13856: PUSH
13857: LD_EXP 9
13861: PUSH
13862: LD_INT 10
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: IFFALSE 13837
// SetSide ( Denis , 1 ) ;
13880: LD_EXP 9
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 235
// DialogueOn ;
13892: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13896: LD_EXP 9
13900: PPUSH
13901: LD_STRING DDen-Den-1
13903: PPUSH
13904: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13908: LD_EXP 1
13912: PPUSH
13913: LD_STRING DDen-JMM-1
13915: PPUSH
13916: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13920: LD_EXP 9
13924: PPUSH
13925: LD_STRING DDen-Den-2
13927: PPUSH
13928: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13932: LD_EXP 1
13936: PPUSH
13937: LD_STRING DDen-JMM-2
13939: PPUSH
13940: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13944: LD_EXP 9
13948: PPUSH
13949: LD_STRING DDen-Den-3
13951: PPUSH
13952: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13956: LD_EXP 1
13960: PPUSH
13961: LD_STRING DDen-JMM-3
13963: PPUSH
13964: CALL_OW 88
// DialogueOff ;
13968: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13972: LD_INT 36
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13985: LD_INT 15
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13998: LD_STRING MR
14000: PPUSH
14001: CALL_OW 337
// end ;
14005: PPOPN 1
14007: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) and not InBattle ( 1 ) do
14008: CALL 14063 0 0
14012: PUSH
14013: LD_EXP 9
14017: PPUSH
14018: CALL_OW 302
14022: AND
14023: PUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 463
14031: NOT
14032: AND
14033: IFFALSE 14062
14035: GO 14037
14037: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
14038: LD_EXP 9
14042: PPUSH
14043: LD_STRING DR1-Den-1
14045: PPUSH
14046: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
14050: LD_EXP 1
14054: PPUSH
14055: LD_STRING DR1-JMM-1
14057: PPUSH
14058: CALL_OW 88
// end ;
14062: END
// function CheckOptoLab ; var i ; begin
14063: LD_INT 0
14065: PPUSH
14066: PPUSH
// result = false ;
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: LD_INT 0
14074: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 2
14092: PUSH
14093: LD_INT 30
14095: PUSH
14096: LD_INT 7
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 30
14105: PUSH
14106: LD_INT 8
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PPUSH
14122: CALL_OW 69
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14180
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
14130: LD_VAR 0 2
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: CALL_OW 268
14142: PUSH
14143: LD_INT 15
14145: EQUAL
14146: PUSH
14147: LD_VAR 0 2
14151: PPUSH
14152: LD_INT 2
14154: PPUSH
14155: CALL_OW 268
14159: PUSH
14160: LD_INT 15
14162: EQUAL
14163: OR
14164: IFFALSE 14176
// begin result = true ;
14166: LD_ADDR_VAR 0 1
14170: PUSH
14171: LD_INT 1
14173: ST_TO_ADDR
// break ;
14174: GO 14180
// end ; break ;
14176: GO 14180
// end ;
14178: GO 14127
14180: POP
14181: POP
// end ;
14182: LD_VAR 0 1
14186: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) and not InBattle ( 1 ) do
14187: LD_INT 15
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 321
14197: PUSH
14198: LD_INT 2
14200: EQUAL
14201: PUSH
14202: LD_EXP 9
14206: PPUSH
14207: CALL_OW 302
14211: AND
14212: PUSH
14213: LD_INT 1
14215: PPUSH
14216: CALL_OW 463
14220: NOT
14221: AND
14222: IFFALSE 14454
14224: GO 14226
14226: DISABLE
// begin DialogueOn ;
14227: CALL_OW 6
// if IsOK ( Denis ) then
14231: LD_EXP 9
14235: PPUSH
14236: CALL_OW 302
14240: IFFALSE 14256
// begin Say ( Denis , DR2-Den-1 ) ;
14242: LD_EXP 9
14246: PPUSH
14247: LD_STRING DR2-Den-1
14249: PPUSH
14250: CALL_OW 88
// end else
14254: GO 14315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
14256: LD_INT 22
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 25
14278: PUSH
14279: LD_INT 4
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: LD_EXP 1
14300: PUSH
14301: EMPTY
14302: LIST
14303: DIFF
14304: PPUSH
14305: LD_STRING DR2-Sci1-1
14307: PPUSH
14308: LD_STRING DR2-FSci1-1
14310: PPUSH
14311: CALL 5914 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
14315: LD_EXP 1
14319: PPUSH
14320: LD_STRING DR2-JMM-1
14322: PPUSH
14323: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
14327: LD_INT 22
14329: PUSH
14330: LD_INT 1
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: LD_INT 21
14339: PUSH
14340: LD_INT 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: LD_INT 25
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 25
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 25
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 25
14382: PUSH
14383: LD_INT 4
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: LIST
14401: PPUSH
14402: CALL_OW 69
14406: PUSH
14407: LD_EXP 1
14411: PUSH
14412: LD_EXP 9
14416: PUSH
14417: LD_EXP 8
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: LIST
14426: DIFF
14427: PPUSH
14428: LD_STRING DR2-Sol1-1
14430: PPUSH
14431: LD_STRING DR2-Sol1-11
14433: PPUSH
14434: CALL 5914 0 3
// Say ( JMM , DR2-JMM-2 ) ;
14438: LD_EXP 1
14442: PPUSH
14443: LD_STRING DR2-JMM-2
14445: PPUSH
14446: CALL_OW 88
// DialogueOff ;
14450: CALL_OW 7
// end ;
14454: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 and not InBattle ( 1 ) do
14455: LD_INT 22
14457: PUSH
14458: LD_INT 1
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 30
14467: PUSH
14468: LD_INT 36
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PPUSH
14479: CALL_OW 69
14483: PUSH
14484: LD_INT 0
14486: EQUAL
14487: PUSH
14488: LD_INT 22
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 33
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: LIST
14522: PPUSH
14523: CALL_OW 69
14527: PUSH
14528: LD_INT 0
14530: GREATER
14531: AND
14532: PUSH
14533: LD_EXP 23
14537: PUSH
14538: LD_INT 0
14540: EQUAL
14541: AND
14542: PUSH
14543: LD_INT 1
14545: PPUSH
14546: CALL_OW 463
14550: NOT
14551: AND
14552: IFFALSE 14678
14554: GO 14556
14556: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
14557: LD_INT 22
14559: PUSH
14560: LD_INT 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 25
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PPUSH
14592: CALL_OW 69
14596: PUSH
14597: LD_EXP 1
14601: PUSH
14602: LD_EXP 6
14606: PUSH
14607: LD_EXP 7
14611: PUSH
14612: LD_EXP 9
14616: PUSH
14617: LD_EXP 15
14621: PUSH
14622: LD_EXP 3
14626: PUSH
14627: LD_EXP 4
14631: PUSH
14632: LD_EXP 2
14636: PUSH
14637: LD_EXP 5
14641: PUSH
14642: LD_EXP 8
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: DIFF
14659: PPUSH
14660: LD_STRING D3a-Mech1-1
14662: PPUSH
14663: LD_STRING D3a-Mech1-1
14665: PPUSH
14666: CALL 5914 0 3
// firstTower = 2 ;
14670: LD_ADDR_EXP 23
14674: PUSH
14675: LD_INT 2
14677: ST_TO_ADDR
// end ;
14678: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
14679: LD_INT 22
14681: PUSH
14682: LD_INT 3
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 21
14691: PUSH
14692: LD_INT 3
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: PUSH
14708: LD_INT 0
14710: EQUAL
14711: IFFALSE 14826
14713: GO 14715
14715: DISABLE
14716: LD_INT 0
14718: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
14719: LD_ADDR_VAR 0 1
14723: PUSH
14724: LD_INT 22
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 21
14736: PUSH
14737: LD_INT 1
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: LD_INT 25
14749: PUSH
14750: LD_INT 1
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 25
14759: PUSH
14760: LD_INT 2
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 25
14769: PUSH
14770: LD_INT 3
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 25
14779: PUSH
14780: LD_INT 4
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: PPUSH
14799: CALL_OW 69
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14824
// AddExperience ( i , 1 , 10000 ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: LD_INT 10000
14817: PPUSH
14818: CALL_OW 492
14822: GO 14804
14824: POP
14825: POP
// end ;
14826: PPOPN 1
14828: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside and not InBattle ( 1 ) do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
14829: LD_INT 22
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 30
14841: PUSH
14842: LD_INT 36
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PPUSH
14853: CALL_OW 69
14857: PUSH
14858: LD_INT 0
14860: GREATER
14861: PUSH
14862: LD_INT 22
14864: PUSH
14865: LD_INT 1
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 21
14874: PUSH
14875: LD_INT 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 33
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PPUSH
14897: CALL_OW 69
14901: PUSH
14902: LD_INT 0
14904: GREATER
14905: AND
14906: PUSH
14907: CALL 15499 0 0
14911: AND
14912: PUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 463
14920: NOT
14921: AND
14922: IFFALSE 15496
14924: GO 14926
14926: DISABLE
14927: LD_INT 0
14929: PPUSH
14930: PPUSH
14931: PPUSH
14932: PPUSH
14933: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14934: LD_ADDR_VAR 0 3
14938: PUSH
14939: LD_INT 22
14941: PUSH
14942: LD_INT 1
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 30
14951: PUSH
14952: LD_INT 36
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PPUSH
14963: CALL_OW 69
14967: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14968: LD_ADDR_VAR 0 4
14972: PUSH
14973: LD_INT 22
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 21
14985: PUSH
14986: LD_INT 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 33
14995: PUSH
14996: LD_INT 2
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
15013: LD_ADDR_VAR 0 5
15017: PUSH
15018: EMPTY
15019: ST_TO_ADDR
// for i in tmpControlTowers do
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_VAR 0 3
15029: PUSH
15030: FOR_IN
15031: IFFALSE 15494
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
15033: LD_EXP 1
15037: PPUSH
15038: CALL_OW 310
15042: PUSH
15043: LD_VAR 0 1
15047: EQUAL
15048: PUSH
15049: LD_EXP 1
15053: PPUSH
15054: CALL_OW 257
15058: PUSH
15059: LD_INT 3
15061: EQUAL
15062: AND
15063: IFFALSE 15193
// begin InGameOn ;
15065: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15069: LD_VAR 0 4
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
15082: LD_EXP 1
15086: PPUSH
15087: LD_STRING D4a-JMM-1
15089: PPUSH
15090: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
15094: LD_VAR 0 4
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 1
15107: PPUSH
15108: CALL_OW 53
// wait ( 0 0$1 ) ;
15112: LD_INT 35
15114: PPUSH
15115: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15119: LD_VAR 0 4
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PPUSH
15128: LD_VAR 0 4
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: CALL_OW 250
15141: PUSH
15142: LD_INT 3
15144: PLUS
15145: PPUSH
15146: LD_VAR 0 4
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: PPUSH
15155: CALL_OW 251
15159: PUSH
15160: LD_INT 2
15162: MINUS
15163: PPUSH
15164: CALL_OW 111
// wait ( 0 0$2 ) ;
15168: LD_INT 70
15170: PPUSH
15171: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
15175: LD_EXP 1
15179: PPUSH
15180: LD_STRING D4b-JMM-1
15182: PPUSH
15183: CALL_OW 88
// InGameOff ;
15187: CALL_OW 9
// end else
15191: GO 15492
// begin InGameOn ;
15193: CALL_OW 8
// for j in UnitsInside ( i ) do
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 313
15211: PUSH
15212: FOR_IN
15213: IFFALSE 15248
// if GetClass ( j ) = 3 then
15215: LD_VAR 0 2
15219: PPUSH
15220: CALL_OW 257
15224: PUSH
15225: LD_INT 3
15227: EQUAL
15228: IFFALSE 15246
// tmpMechanicInside = tmpMechanicInside ^ j ;
15230: LD_ADDR_VAR 0 5
15234: PUSH
15235: LD_VAR 0 5
15239: PUSH
15240: LD_VAR 0 2
15244: ADD
15245: ST_TO_ADDR
15246: GO 15212
15248: POP
15249: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15250: LD_VAR 0 5
15254: PUSH
15255: LD_INT 1
15257: ARRAY
15258: PPUSH
15259: CALL_OW 258
15263: PUSH
15264: LD_INT 1
15266: EQUAL
15267: IFFALSE 15285
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
15269: LD_VAR 0 5
15273: PUSH
15274: LD_INT 1
15276: ARRAY
15277: PPUSH
15278: LD_STRING D4a-Mech1-1
15280: PPUSH
15281: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15285: LD_VAR 0 5
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: CALL_OW 258
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15320
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
15304: LD_VAR 0 5
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: PPUSH
15313: LD_STRING D4a-FMech1-1
15315: PPUSH
15316: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
15320: LD_VAR 0 4
15324: PUSH
15325: LD_INT 1
15327: ARRAY
15328: PPUSH
15329: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
15333: LD_VAR 0 4
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: PPUSH
15342: LD_VAR 0 5
15346: PUSH
15347: LD_INT 1
15349: ARRAY
15350: PPUSH
15351: CALL_OW 53
// wait ( 0 0$1 ) ;
15355: LD_INT 35
15357: PPUSH
15358: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
15362: LD_VAR 0 4
15366: PUSH
15367: LD_INT 1
15369: ARRAY
15370: PPUSH
15371: LD_VAR 0 4
15375: PUSH
15376: LD_INT 1
15378: ARRAY
15379: PPUSH
15380: CALL_OW 250
15384: PUSH
15385: LD_INT 3
15387: PLUS
15388: PPUSH
15389: LD_VAR 0 4
15393: PUSH
15394: LD_INT 1
15396: ARRAY
15397: PPUSH
15398: CALL_OW 251
15402: PUSH
15403: LD_INT 2
15405: MINUS
15406: PPUSH
15407: CALL_OW 111
// wait ( 0 0$2 ) ;
15411: LD_INT 70
15413: PPUSH
15414: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
15418: LD_VAR 0 5
15422: PUSH
15423: LD_INT 1
15425: ARRAY
15426: PPUSH
15427: CALL_OW 258
15431: PUSH
15432: LD_INT 1
15434: EQUAL
15435: IFFALSE 15453
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
15437: LD_VAR 0 5
15441: PUSH
15442: LD_INT 1
15444: ARRAY
15445: PPUSH
15446: LD_STRING D4b-Mech1-1
15448: PPUSH
15449: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
15453: LD_VAR 0 5
15457: PUSH
15458: LD_INT 1
15460: ARRAY
15461: PPUSH
15462: CALL_OW 258
15466: PUSH
15467: LD_INT 2
15469: EQUAL
15470: IFFALSE 15488
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
15472: LD_VAR 0 5
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PPUSH
15481: LD_STRING D4b-FMech1-1
15483: PPUSH
15484: CALL_OW 88
// InGameOff ;
15488: CALL_OW 9
// end ; end ;
15492: GO 15030
15494: POP
15495: POP
// end ;
15496: PPOPN 5
15498: END
// function CheckMehInside ; var i , j ; begin
15499: LD_INT 0
15501: PPUSH
15502: PPUSH
15503: PPUSH
// result = false ;
15504: LD_ADDR_VAR 0 1
15508: PUSH
15509: LD_INT 0
15511: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
15512: LD_ADDR_VAR 0 2
15516: PUSH
15517: LD_INT 22
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: PUSH
15527: LD_INT 30
15529: PUSH
15530: LD_INT 36
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: PUSH
15546: FOR_IN
15547: IFFALSE 15598
// begin for j in UnitsInside ( i ) do
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: LD_VAR 0 2
15558: PPUSH
15559: CALL_OW 313
15563: PUSH
15564: FOR_IN
15565: IFFALSE 15594
// begin if GetClass ( j ) = 3 then
15567: LD_VAR 0 3
15571: PPUSH
15572: CALL_OW 257
15576: PUSH
15577: LD_INT 3
15579: EQUAL
15580: IFFALSE 15592
// begin result = true ;
15582: LD_ADDR_VAR 0 1
15586: PUSH
15587: LD_INT 1
15589: ST_TO_ADDR
// break ;
15590: GO 15594
// end ; end ;
15592: GO 15564
15594: POP
15595: POP
// end ;
15596: GO 15546
15598: POP
15599: POP
// end ;
15600: LD_VAR 0 1
15604: RET
// every 25 25$0 do
15605: GO 15607
15607: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15608: LD_INT 35
15610: PPUSH
15611: CALL_OW 67
// until not InBattle ( 1 ) ;
15615: LD_INT 1
15617: PPUSH
15618: CALL_OW 463
15622: NOT
15623: IFFALSE 15608
// PrepareKurt ;
15625: CALL 19090 0 0
// end ;
15629: END
// every 35 35$0 do
15630: GO 15632
15632: DISABLE
// begin repeat wait ( 0 0$1 ) ;
15633: LD_INT 35
15635: PPUSH
15636: CALL_OW 67
// until not InBattle ( 1 ) ;
15640: LD_INT 1
15642: PPUSH
15643: CALL_OW 463
15647: NOT
15648: IFFALSE 15633
// PrepareJoan ;
15650: CALL 2924 0 0
// wait ( 1 1$0 ) ;
15654: LD_INT 2100
15656: PPUSH
15657: CALL_OW 67
// if IsOK ( Lisa ) then
15661: LD_EXP 2
15665: PPUSH
15666: CALL_OW 302
15670: IFFALSE 15800
// begin DialogueOn ;
15672: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
15676: LD_EXP 2
15680: PPUSH
15681: LD_STRING D7-Lisa-1
15683: PPUSH
15684: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
15688: LD_EXP 1
15692: PPUSH
15693: LD_STRING D7-JMM-1
15695: PPUSH
15696: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
15700: LD_EXP 2
15704: PPUSH
15705: LD_STRING D7-Lisa-2
15707: PPUSH
15708: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
15712: LD_EXP 1
15716: PPUSH
15717: LD_STRING D7-JMM-2
15719: PPUSH
15720: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
15724: LD_EXP 2
15728: PPUSH
15729: LD_STRING D7-Lisa-3
15731: PPUSH
15732: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
15736: LD_EXP 1
15740: PPUSH
15741: LD_STRING D7-JMM-3
15743: PPUSH
15744: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
15748: LD_EXP 2
15752: PPUSH
15753: LD_STRING D7-Lisa-4
15755: PPUSH
15756: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
15760: LD_EXP 1
15764: PPUSH
15765: LD_STRING D7-JMM-4
15767: PPUSH
15768: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
15772: LD_EXP 1
15776: PPUSH
15777: LD_STRING D7-JMM-4a
15779: PPUSH
15780: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
15784: LD_EXP 2
15788: PPUSH
15789: LD_STRING D7-Lisa-5
15791: PPUSH
15792: CALL_OW 88
// DialogueOff ;
15796: CALL_OW 7
// end ; end ;
15800: END
// every 0 0$1 trigger tempCharles and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , tempCharles , 10 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) > 1 do
15801: LD_EXP 13
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 91
15818: PUSH
15819: LD_EXP 13
15823: PUSH
15824: LD_INT 10
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 2
15834: PUSH
15835: LD_INT 25
15837: PUSH
15838: LD_INT 1
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 25
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 25
15857: PUSH
15858: LD_INT 3
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 25
15867: PUSH
15868: LD_INT 4
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: PUSH
15892: LD_INT 1
15894: GREATER
15895: AND
15896: IFFALSE 15913
15898: GO 15900
15900: DISABLE
// begin Say ( tempCharles , D5-Sol1-1 ) ;
15901: LD_EXP 13
15905: PPUSH
15906: LD_STRING D5-Sol1-1
15908: PPUSH
15909: CALL_OW 88
// end ;
15913: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15914: LD_INT 22
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 33
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: CALL_OW 69
15942: PUSH
15943: LD_INT 2
15945: GREATEREQUAL
15946: IFFALSE 15966
15948: GO 15950
15950: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15951: LD_STRING MRa
15953: PPUSH
15954: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15958: LD_ADDR_EXP 28
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// end ;
15966: END
// every 0 0$10 do var i , last ;
15967: GO 15969
15969: DISABLE
15970: LD_INT 0
15972: PPUSH
15973: PPUSH
// begin last := 7 ;
15974: LD_ADDR_VAR 0 2
15978: PUSH
15979: LD_INT 7
15981: ST_TO_ADDR
// for i = 1 to last do
15982: LD_ADDR_VAR 0 1
15986: PUSH
15987: DOUBLE
15988: LD_INT 1
15990: DEC
15991: ST_TO_ADDR
15992: LD_VAR 0 2
15996: PUSH
15997: FOR_TO
15998: IFFALSE 16026
// begin wait ( rand ( 3 3$00 , 7 7$00 ) ) ;
16000: LD_INT 6300
16002: PPUSH
16003: LD_INT 14700
16005: PPUSH
16006: CALL_OW 12
16010: PPUSH
16011: CALL_OW 67
// PrepareRandoms ( i ) ;
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL 3960 0 1
// end ;
16024: GO 15997
16026: POP
16027: POP
// end ;
16028: PPOPN 2
16030: END
// every 5 5$20 do
16031: GO 16033
16033: DISABLE
// begin DialogueOn ;
16034: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
16038: LD_EXP 10
16042: PPUSH
16043: LD_STRING D12a-Sci-1
16045: PPUSH
16046: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
16050: LD_EXP 1
16054: PPUSH
16055: LD_STRING D12a-JMM-1
16057: PPUSH
16058: CALL_OW 88
// DialogueOff ;
16062: CALL_OW 7
// cratesStatus = 1 ;
16066: LD_ADDR_EXP 38
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// end ;
16074: END
// every 13 13$0 do
16075: GO 16077
16077: DISABLE
// begin DialogueOn ;
16078: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
16082: LD_EXP 10
16086: PPUSH
16087: LD_STRING D12b-Sci-1
16089: PPUSH
16090: CALL_OW 94
// DialogueOff ;
16094: CALL_OW 7
// cratesStatus = 2 ;
16098: LD_ADDR_EXP 38
16102: PUSH
16103: LD_INT 2
16105: ST_TO_ADDR
// end ;
16106: END
// every 32 32$0 do
16107: GO 16109
16109: DISABLE
// begin DialogueOn ;
16110: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
16114: LD_EXP 10
16118: PPUSH
16119: LD_STRING D12c-Sci-1
16121: PPUSH
16122: CALL_OW 94
// DialogueOff ;
16126: CALL_OW 7
// wait ( 3 3$0 ) ;
16130: LD_INT 6300
16132: PPUSH
16133: CALL_OW 67
// DialogueOn ;
16137: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
16141: LD_EXP 10
16145: PPUSH
16146: LD_STRING D12d-Sci-1
16148: PPUSH
16149: CALL_OW 94
// DialogueOff ;
16153: CALL_OW 7
// cratesStatus = 1 ;
16157: LD_ADDR_EXP 38
16161: PUSH
16162: LD_INT 1
16164: ST_TO_ADDR
// end ;
16165: END
// every 42 42$0 do
16166: GO 16168
16168: DISABLE
// begin DialogueOn ;
16169: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
16173: LD_EXP 10
16177: PPUSH
16178: LD_STRING D12e-Sci-1
16180: PPUSH
16181: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
16185: LD_EXP 1
16189: PPUSH
16190: LD_STRING D12e-JMM-1
16192: PPUSH
16193: CALL_OW 88
// DialogueOff ;
16197: CALL_OW 7
// cratesStatus = 2 ;
16201: LD_ADDR_EXP 38
16205: PUSH
16206: LD_INT 2
16208: ST_TO_ADDR
// end ;
16209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
16210: LD_INT 22
16212: PUSH
16213: LD_INT 6
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 21
16222: PUSH
16223: LD_INT 2
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 34
16232: PUSH
16233: LD_INT 51
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: PPUSH
16245: CALL_OW 69
16249: PUSH
16250: LD_INT 0
16252: GREATER
16253: IFFALSE 16336
16255: GO 16257
16257: DISABLE
16258: LD_INT 0
16260: PPUSH
// begin enable ;
16261: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_INT 22
16269: PUSH
16270: LD_INT 6
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 2
16279: PUSH
16280: LD_INT 21
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 2
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PUSH
16314: FOR_IN
16315: IFFALSE 16334
// ComAgressiveMove ( i , 138 , 168 ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: LD_INT 138
16324: PPUSH
16325: LD_INT 168
16327: PPUSH
16328: CALL_OW 114
16332: GO 16314
16334: POP
16335: POP
// end ;
16336: PPOPN 1
16338: END
// every 0 0$1 do var i ;
16339: GO 16341
16341: DISABLE
16342: LD_INT 0
16344: PPUSH
// begin enable ;
16345: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
16346: LD_ADDR_VAR 0 1
16350: PUSH
16351: LD_INT 4
16353: PPUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 22
16359: PUSH
16360: LD_INT 3
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 6
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: PPUSH
16385: CALL_OW 70
16389: PUSH
16390: FOR_IN
16391: IFFALSE 16455
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
16393: LD_INT 4
16395: PPUSH
16396: LD_INT 22
16398: PUSH
16399: LD_INT 6
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 34
16408: PUSH
16409: LD_INT 51
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PPUSH
16420: CALL_OW 70
16424: PUSH
16425: LD_INT 0
16427: GREATER
16428: IFFALSE 16444
// sendedConvoys = sendedConvoys + 1 ;
16430: LD_ADDR_EXP 39
16434: PUSH
16435: LD_EXP 39
16439: PUSH
16440: LD_INT 1
16442: PLUS
16443: ST_TO_ADDR
// RemoveUnit ( i ) ;
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 64
// end ;
16453: GO 16390
16455: POP
16456: POP
// end ; end_of_file
16457: PPOPN 1
16459: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
16460: LD_VAR 0 1
16464: PUSH
16465: LD_INT 1
16467: EQUAL
16468: PUSH
16469: LD_VAR 0 2
16473: PUSH
16474: LD_INT 3
16476: EQUAL
16477: AND
16478: IFFALSE 16488
// contactWithRussian = 1 ;
16480: LD_ADDR_EXP 22
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// end ;
16488: PPOPN 2
16490: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
16491: LD_VAR 0 1
16495: PPUSH
16496: CALL_OW 266
16500: PUSH
16501: LD_INT 36
16503: EQUAL
16504: PUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 255
16514: PUSH
16515: LD_INT 1
16517: EQUAL
16518: AND
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_INT 1
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 2
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 33
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: PPUSH
16555: CALL_OW 69
16559: PUSH
16560: LD_INT 0
16562: EQUAL
16563: AND
16564: PUSH
16565: LD_EXP 23
16569: PUSH
16570: LD_INT 0
16572: EQUAL
16573: AND
16574: IFFALSE 16654
// begin firstTower = 1 ;
16576: LD_ADDR_EXP 23
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
16584: LD_INT 22
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 21
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 25
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 26
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: PPUSH
16630: CALL_OW 69
16634: PUSH
16635: LD_EXP 1
16639: PUSH
16640: EMPTY
16641: LIST
16642: DIFF
16643: PPUSH
16644: LD_STRING D3b-Mech1-1
16646: PPUSH
16647: LD_STRING D3b-Mech1-1
16649: PPUSH
16650: CALL 5914 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
16654: LD_VAR 0 1
16658: PPUSH
16659: CALL_OW 266
16663: PUSH
16664: LD_INT 0
16666: EQUAL
16667: PUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 255
16677: PUSH
16678: LD_INT 1
16680: EQUAL
16681: AND
16682: IFFALSE 16696
// SetBName ( building , theta ) ;
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_STRING theta
16691: PPUSH
16692: CALL_OW 500
// if GetSide ( building ) = 3 then
16696: LD_VAR 0 1
16700: PPUSH
16701: CALL_OW 255
16705: PUSH
16706: LD_INT 3
16708: EQUAL
16709: IFFALSE 16783
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16711: LD_ADDR_EXP 31
16715: PUSH
16716: LD_EXP 31
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 3
16728: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16729: LD_ADDR_EXP 31
16733: PUSH
16734: LD_EXP 31
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 3
16746: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16747: LD_ADDR_EXP 31
16751: PUSH
16752: LD_EXP 31
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 3
16764: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16765: LD_ADDR_EXP 31
16769: PUSH
16770: LD_EXP 31
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 3
16782: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
16783: LD_VAR 0 1
16787: PPUSH
16788: CALL_OW 255
16792: PUSH
16793: LD_INT 3
16795: EQUAL
16796: PUSH
16797: LD_VAR 0 1
16801: PPUSH
16802: CALL_OW 266
16806: PUSH
16807: LD_INT 0
16809: EQUAL
16810: PUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 266
16820: PUSH
16821: LD_INT 2
16823: EQUAL
16824: OR
16825: PUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 266
16835: PUSH
16836: LD_INT 4
16838: EQUAL
16839: OR
16840: PUSH
16841: EMPTY
16842: LIST
16843: AND
16844: IFFALSE 16855
// ComUpgrade ( building ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 255
16864: PUSH
16865: LD_INT 3
16867: EQUAL
16868: PUSH
16869: LD_VAR 0 1
16873: PPUSH
16874: CALL_OW 266
16878: PUSH
16879: LD_INT 32
16881: EQUAL
16882: AND
16883: IFFALSE 16924
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
16885: LD_VAR 0 1
16889: PPUSH
16890: LD_INT 42
16892: PUSH
16893: LD_INT 43
16895: PUSH
16896: LD_INT 44
16898: PUSH
16899: LD_INT 46
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 1
16910: PPUSH
16911: LD_INT 4
16913: PPUSH
16914: CALL_OW 12
16918: ARRAY
16919: PPUSH
16920: CALL_OW 208
// end ; end ;
16924: PPOPN 1
16926: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
16927: LD_VAR 0 1
16931: PUSH
16932: LD_EXP 1
16936: EQUAL
16937: IFFALSE 16946
// YouLost ( JMM ) ;
16939: LD_STRING JMM
16941: PPUSH
16942: CALL_OW 104
// if unit = Joan then
16946: LD_VAR 0 1
16950: PUSH
16951: LD_EXP 15
16955: EQUAL
16956: IFFALSE 16966
// JoanStatus = 0 ;
16958: LD_ADDR_EXP 16
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 255
16975: PUSH
16976: LD_INT 1
16978: EQUAL
16979: PUSH
16980: LD_VAR 0 1
16984: PPUSH
16985: CALL_OW 247
16989: PUSH
16990: LD_INT 1
16992: EQUAL
16993: AND
16994: IFFALSE 17070
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16996: LD_VAR 0 1
17000: PPUSH
17001: CALL_OW 257
17005: PUSH
17006: LD_INT 1
17008: EQUAL
17009: PUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 257
17019: PUSH
17020: LD_INT 2
17022: EQUAL
17023: OR
17024: PUSH
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL_OW 257
17034: PUSH
17035: LD_INT 3
17037: EQUAL
17038: OR
17039: PUSH
17040: LD_VAR 0 1
17044: PPUSH
17045: CALL_OW 257
17049: PUSH
17050: LD_INT 4
17052: EQUAL
17053: OR
17054: IFFALSE 17070
// unitLost = unitLost + 1 ;
17056: LD_ADDR_EXP 30
17060: PUSH
17061: LD_EXP 30
17065: PUSH
17066: LD_INT 1
17068: PLUS
17069: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
17070: LD_VAR 0 1
17074: PPUSH
17075: CALL_OW 255
17079: PUSH
17080: LD_INT 3
17082: EQUAL
17083: PUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 247
17093: PUSH
17094: LD_INT 3
17096: EQUAL
17097: AND
17098: IFFALSE 17790
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 266
17109: PUSH
17110: LD_INT 31
17112: EQUAL
17113: PUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 266
17123: PUSH
17124: LD_INT 32
17126: EQUAL
17127: OR
17128: PUSH
17129: LD_VAR 0 1
17133: PPUSH
17134: CALL_OW 266
17138: PUSH
17139: LD_INT 36
17141: EQUAL
17142: OR
17143: PUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 266
17153: PUSH
17154: LD_INT 0
17156: EQUAL
17157: OR
17158: PUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 266
17168: PUSH
17169: LD_INT 24
17171: EQUAL
17172: OR
17173: PUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: CALL_OW 266
17183: PUSH
17184: LD_INT 17
17186: EQUAL
17187: OR
17188: PUSH
17189: LD_VAR 0 1
17193: PPUSH
17194: CALL_OW 266
17198: PUSH
17199: LD_INT 25
17201: EQUAL
17202: OR
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 266
17213: PUSH
17214: LD_INT 19
17216: EQUAL
17217: OR
17218: PUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 266
17228: PUSH
17229: LD_INT 20
17231: EQUAL
17232: OR
17233: PUSH
17234: LD_VAR 0 1
17238: PPUSH
17239: CALL_OW 266
17243: PUSH
17244: LD_INT 18
17246: EQUAL
17247: OR
17248: PUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 266
17258: PUSH
17259: LD_INT 21
17261: EQUAL
17262: OR
17263: PUSH
17264: LD_VAR 0 1
17268: PPUSH
17269: CALL_OW 266
17273: PUSH
17274: LD_INT 23
17276: EQUAL
17277: OR
17278: PUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 266
17288: PUSH
17289: LD_INT 16
17291: EQUAL
17292: OR
17293: PUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 266
17303: PUSH
17304: LD_INT 6
17306: EQUAL
17307: OR
17308: PUSH
17309: LD_VAR 0 1
17313: PPUSH
17314: CALL_OW 266
17318: PUSH
17319: LD_INT 29
17321: EQUAL
17322: OR
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 266
17333: PUSH
17334: LD_INT 26
17336: EQUAL
17337: OR
17338: PUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: CALL_OW 266
17348: PUSH
17349: LD_INT 30
17351: EQUAL
17352: OR
17353: PUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 266
17363: PUSH
17364: LD_INT 28
17366: EQUAL
17367: OR
17368: PUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 266
17378: PUSH
17379: LD_INT 27
17381: EQUAL
17382: OR
17383: PUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: CALL_OW 266
17393: PUSH
17394: LD_INT 33
17396: EQUAL
17397: OR
17398: PUSH
17399: LD_VAR 0 1
17403: PPUSH
17404: CALL_OW 266
17408: PUSH
17409: LD_INT 2
17411: EQUAL
17412: OR
17413: PUSH
17414: LD_VAR 0 1
17418: PPUSH
17419: CALL_OW 266
17423: PUSH
17424: LD_INT 4
17426: EQUAL
17427: OR
17428: IFFALSE 17514
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17430: LD_ADDR_EXP 31
17434: PUSH
17435: LD_EXP 31
17439: PUSH
17440: LD_VAR 0 1
17444: PPUSH
17445: CALL_OW 266
17449: ADD
17450: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17451: LD_ADDR_EXP 31
17455: PUSH
17456: LD_EXP 31
17460: PUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 250
17470: ADD
17471: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17472: LD_ADDR_EXP 31
17476: PUSH
17477: LD_EXP 31
17481: PUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 251
17491: ADD
17492: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17493: LD_ADDR_EXP 31
17497: PUSH
17498: LD_EXP 31
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 254
17512: ADD
17513: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 266
17523: PUSH
17524: LD_INT 1
17526: EQUAL
17527: IFFALSE 17606
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17529: LD_ADDR_EXP 31
17533: PUSH
17534: LD_EXP 31
17538: PUSH
17539: LD_INT 0
17541: ADD
17542: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17543: LD_ADDR_EXP 31
17547: PUSH
17548: LD_EXP 31
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 250
17562: ADD
17563: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17564: LD_ADDR_EXP 31
17568: PUSH
17569: LD_EXP 31
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 251
17583: ADD
17584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17585: LD_ADDR_EXP 31
17589: PUSH
17590: LD_EXP 31
17594: PUSH
17595: LD_VAR 0 1
17599: PPUSH
17600: CALL_OW 254
17604: ADD
17605: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 266
17615: PUSH
17616: LD_INT 3
17618: EQUAL
17619: IFFALSE 17698
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17621: LD_ADDR_EXP 31
17625: PUSH
17626: LD_EXP 31
17630: PUSH
17631: LD_INT 2
17633: ADD
17634: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17635: LD_ADDR_EXP 31
17639: PUSH
17640: LD_EXP 31
17644: PUSH
17645: LD_VAR 0 1
17649: PPUSH
17650: CALL_OW 250
17654: ADD
17655: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17656: LD_ADDR_EXP 31
17660: PUSH
17661: LD_EXP 31
17665: PUSH
17666: LD_VAR 0 1
17670: PPUSH
17671: CALL_OW 251
17675: ADD
17676: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17677: LD_ADDR_EXP 31
17681: PUSH
17682: LD_EXP 31
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 254
17696: ADD
17697: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17698: LD_VAR 0 1
17702: PPUSH
17703: CALL_OW 266
17707: PUSH
17708: LD_INT 5
17710: EQUAL
17711: IFFALSE 17790
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17713: LD_ADDR_EXP 31
17717: PUSH
17718: LD_EXP 31
17722: PUSH
17723: LD_INT 4
17725: ADD
17726: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17727: LD_ADDR_EXP 31
17731: PUSH
17732: LD_EXP 31
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 250
17746: ADD
17747: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17748: LD_ADDR_EXP 31
17752: PUSH
17753: LD_EXP 31
17757: PUSH
17758: LD_VAR 0 1
17762: PPUSH
17763: CALL_OW 251
17767: ADD
17768: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17769: LD_ADDR_EXP 31
17773: PUSH
17774: LD_EXP 31
17778: PUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 254
17788: ADD
17789: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17790: LD_VAR 0 1
17794: PPUSH
17795: CALL_OW 257
17799: PUSH
17800: LD_INT 3
17802: EQUAL
17803: PUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 255
17813: PUSH
17814: LD_INT 3
17816: EQUAL
17817: AND
17818: PUSH
17819: LD_INT 21
17821: PPUSH
17822: CALL_OW 302
17826: AND
17827: PUSH
17828: LD_INT 21
17830: PPUSH
17831: CALL_OW 255
17835: PUSH
17836: LD_INT 3
17838: EQUAL
17839: AND
17840: IFFALSE 17908
// begin uc_side = 3 ;
17842: LD_ADDR_OWVAR 20
17846: PUSH
17847: LD_INT 3
17849: ST_TO_ADDR
// uc_nation = 3 ;
17850: LD_ADDR_OWVAR 21
17854: PUSH
17855: LD_INT 3
17857: ST_TO_ADDR
// hc_gallery :=  ;
17858: LD_ADDR_OWVAR 33
17862: PUSH
17863: LD_STRING 
17865: ST_TO_ADDR
// hc_name :=  ;
17866: LD_ADDR_OWVAR 26
17870: PUSH
17871: LD_STRING 
17873: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
17874: LD_INT 0
17876: PPUSH
17877: LD_EXP 34
17881: PPUSH
17882: LD_EXP 35
17886: PPUSH
17887: CALL_OW 12
17891: PPUSH
17892: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
17896: CALL_OW 44
17900: PPUSH
17901: LD_INT 21
17903: PPUSH
17904: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 255
17917: PUSH
17918: LD_INT 3
17920: EQUAL
17921: PUSH
17922: LD_VAR 0 1
17926: PPUSH
17927: CALL_OW 264
17931: PUSH
17932: LD_INT 52
17934: EQUAL
17935: AND
17936: PUSH
17937: LD_INT 21
17939: PPUSH
17940: CALL_OW 302
17944: AND
17945: PUSH
17946: LD_INT 21
17948: PPUSH
17949: CALL_OW 255
17953: PUSH
17954: LD_INT 3
17956: EQUAL
17957: AND
17958: IFFALSE 17979
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17960: LD_INT 21
17962: PPUSH
17963: LD_INT 22
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_INT 52
17974: PPUSH
17975: CALL_OW 125
// end ;
17979: PPOPN 1
17981: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17982: LD_INT 0
17984: PPUSH
17985: PPUSH
17986: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 264
17996: PUSH
17997: LD_INT 51
17999: EQUAL
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 255
18010: PUSH
18011: LD_INT 3
18013: EQUAL
18014: AND
18015: IFFALSE 18077
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
18017: LD_ADDR_VAR 0 5
18021: PUSH
18022: LD_INT 2
18024: PPUSH
18025: CALL_OW 274
18029: PPUSH
18030: LD_INT 1
18032: PPUSH
18033: CALL_OW 275
18037: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
18038: LD_INT 2
18040: PPUSH
18041: CALL_OW 274
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: LD_VAR 0 5
18053: PUSH
18054: LD_INT 100
18056: MINUS
18057: PPUSH
18058: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
18062: LD_VAR 0 1
18066: PPUSH
18067: LD_INT 1
18069: PPUSH
18070: LD_INT 100
18072: PPUSH
18073: CALL_OW 291
// end ; if building = rufabsupp then
18077: LD_VAR 0 2
18081: PUSH
18082: LD_INT 17
18084: EQUAL
18085: IFFALSE 18099
// SetSide ( vehicle , 6 ) ;
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 6
18094: PPUSH
18095: CALL_OW 235
// end ;
18099: PPOPN 5
18101: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
18102: LD_VAR 0 1
18106: PPUSH
18107: CALL_OW 255
18111: PUSH
18112: LD_INT 3
18114: EQUAL
18115: IFFALSE 18146
// begin tamedApemans = tamedApemans + 1 ;
18117: LD_ADDR_EXP 32
18121: PUSH
18122: LD_EXP 32
18126: PUSH
18127: LD_INT 1
18129: PLUS
18130: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
18131: LD_VAR 0 1
18135: PPUSH
18136: LD_INT 106
18138: PPUSH
18139: LD_INT 85
18141: PPUSH
18142: CALL_OW 111
// end ; end ;
18146: PPOPN 2
18148: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18149: LD_INT 0
18151: PPUSH
18152: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18153: LD_VAR 0 1
18157: PPUSH
18158: CALL_OW 255
18162: PUSH
18163: LD_INT 3
18165: EQUAL
18166: PUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: CALL_OW 247
18176: PUSH
18177: LD_INT 2
18179: EQUAL
18180: AND
18181: IFFALSE 18290
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
18183: LD_VAR 0 1
18187: PPUSH
18188: CALL_OW 264
18192: PUSH
18193: LD_INT 42
18195: EQUAL
18196: PUSH
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 264
18206: PUSH
18207: LD_INT 43
18209: EQUAL
18210: OR
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 264
18221: PUSH
18222: LD_INT 44
18224: EQUAL
18225: OR
18226: PUSH
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 264
18236: PUSH
18237: LD_INT 46
18239: EQUAL
18240: OR
18241: IFFALSE 18290
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18243: LD_INT 21
18245: PPUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 265
18255: PPUSH
18256: LD_VAR 0 1
18260: PPUSH
18261: CALL_OW 262
18265: PPUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: CALL_OW 263
18275: PPUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL_OW 264
18285: PPUSH
18286: CALL_OW 185
// end ;
18290: PPOPN 3
18292: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 255
18302: PUSH
18303: LD_INT 3
18305: EQUAL
18306: PUSH
18307: LD_VAR 0 2
18311: PPUSH
18312: CALL_OW 255
18316: PUSH
18317: LD_INT 3
18319: EQUAL
18320: AND
18321: PUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 302
18331: AND
18332: IFFALSE 18374
// begin ComRepairVehicle ( human , vehicle ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18348: LD_VAR 0 2
18352: PPUSH
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18362: LD_VAR 0 1
18366: PPUSH
18367: LD_INT 100
18369: PPUSH
18370: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 255
18383: PUSH
18384: LD_INT 3
18386: EQUAL
18387: PUSH
18388: LD_VAR 0 2
18392: PPUSH
18393: CALL_OW 255
18397: PUSH
18398: LD_INT 3
18400: EQUAL
18401: AND
18402: PUSH
18403: LD_INT 21
18405: PPUSH
18406: CALL_OW 302
18410: AND
18411: PUSH
18412: LD_VAR 0 1
18416: PPUSH
18417: CALL_OW 302
18421: NOT
18422: AND
18423: IFFALSE 18437
// ComEnterUnit ( human , rufab ) ;
18425: LD_VAR 0 2
18429: PPUSH
18430: LD_INT 21
18432: PPUSH
18433: CALL_OW 120
// end ;
18437: PPOPN 2
18439: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
18440: LD_VAR 0 1
18444: PUSH
18445: LD_INT 21
18447: EQUAL
18448: PUSH
18449: LD_VAR 0 2
18453: PPUSH
18454: CALL_OW 255
18458: PUSH
18459: LD_INT 3
18461: EQUAL
18462: AND
18463: IFFALSE 18477
// SetLives ( human , 1000 ) ;
18465: LD_VAR 0 2
18469: PPUSH
18470: LD_INT 1000
18472: PPUSH
18473: CALL_OW 234
// end ; end_of_file
18477: PPOPN 2
18479: END
// every 0 0$30 trigger cratesStatus = 1 do
18480: LD_EXP 38
18484: PUSH
18485: LD_INT 1
18487: EQUAL
18488: IFFALSE 18571
18490: GO 18492
18492: DISABLE
// begin enable ;
18493: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
18494: LD_INT 350
18496: PUSH
18497: LD_INT 1050
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: LD_INT 1
18506: PPUSH
18507: LD_INT 2
18509: PPUSH
18510: CALL_OW 12
18514: ARRAY
18515: PPUSH
18516: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18520: LD_INT 4
18522: PUSH
18523: LD_INT 5
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 1
18532: PPUSH
18533: LD_INT 2
18535: PPUSH
18536: CALL_OW 12
18540: ARRAY
18541: PPUSH
18542: LD_INT 6
18544: PUSH
18545: LD_INT 7
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: PPUSH
18555: LD_INT 2
18557: PPUSH
18558: CALL_OW 12
18562: ARRAY
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: CALL_OW 55
// end ;
18571: END
// every 1 1$0 trigger cratesStatus = 2 do
18572: LD_EXP 38
18576: PUSH
18577: LD_INT 2
18579: EQUAL
18580: IFFALSE 18663
18582: GO 18584
18584: DISABLE
// begin enable ;
18585: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
18586: LD_INT 3150
18588: PUSH
18589: LD_INT 4550
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: PPUSH
18599: LD_INT 2
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: PPUSH
18608: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , [ CratesSpawn1 , CratesSpawn2 ] [ rand ( 1 , 2 ) ] , true ) ;
18612: LD_INT 2
18614: PUSH
18615: LD_INT 5
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: PPUSH
18625: LD_INT 2
18627: PPUSH
18628: CALL_OW 12
18632: ARRAY
18633: PPUSH
18634: LD_INT 6
18636: PUSH
18637: LD_INT 7
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 1
18646: PPUSH
18647: LD_INT 2
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 55
// end ;
18663: END
// every 0 0$30 + 0 0$10 do
18664: GO 18666
18666: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18667: LD_INT 4
18669: PUSH
18670: LD_INT 5
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 1
18679: PPUSH
18680: LD_INT 2
18682: PPUSH
18683: CALL_OW 12
18687: ARRAY
18688: PPUSH
18689: LD_INT 7
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 55
// Wait ( 0 0$15 ) ;
18699: LD_INT 525
18701: PPUSH
18702: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18706: LD_INT 4
18708: PUSH
18709: LD_INT 5
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PPUSH
18719: LD_INT 2
18721: PPUSH
18722: CALL_OW 12
18726: ARRAY
18727: PPUSH
18728: LD_INT 7
18730: PPUSH
18731: LD_INT 1
18733: PPUSH
18734: CALL_OW 55
// Wait ( 0 0$20 ) ;
18738: LD_INT 700
18740: PPUSH
18741: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
18745: LD_INT 4
18747: PUSH
18748: LD_INT 5
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 2
18760: PPUSH
18761: CALL_OW 12
18765: ARRAY
18766: PPUSH
18767: LD_INT 7
18769: PPUSH
18770: LD_INT 1
18772: PPUSH
18773: CALL_OW 55
// end ; end_of_file
18777: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
18778: LD_EXP 24
18782: PUSH
18783: LD_INT 1
18785: EQUAL
18786: IFFALSE 19087
18788: GO 18790
18790: DISABLE
18791: LD_INT 0
18793: PPUSH
18794: PPUSH
18795: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18796: LD_ADDR_VAR 0 2
18800: PUSH
18801: LD_INT 22
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 21
18813: PUSH
18814: LD_INT 3
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 0
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: PPUSH
18854: CALL_OW 69
18858: ST_TO_ADDR
// for i in tmp do
18859: LD_ADDR_VAR 0 1
18863: PUSH
18864: LD_VAR 0 2
18868: PUSH
18869: FOR_IN
18870: IFFALSE 18903
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_VAR 0 3
18881: PUSH
18882: LD_VAR 0 1
18886: PPUSH
18887: CALL_OW 274
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: CALL_OW 275
18899: PLUS
18900: ST_TO_ADDR
18901: GO 18869
18903: POP
18904: POP
// strings = [ ] ;
18905: LD_ADDR_EXP 27
18909: PUSH
18910: EMPTY
18911: ST_TO_ADDR
// if tmp = 0 then
18912: LD_VAR 0 2
18916: PUSH
18917: LD_INT 0
18919: EQUAL
18920: IFFALSE 18945
// strings = strings ^ [ #Am06-1 , needCrates ] ;
18922: LD_ADDR_EXP 27
18926: PUSH
18927: LD_EXP 27
18931: PUSH
18932: LD_STRING #Am06-1
18934: PUSH
18935: LD_EXP 25
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: ADD
18944: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18945: LD_VAR 0 2
18949: PUSH
18950: LD_INT 0
18952: GREATER
18953: PUSH
18954: LD_EXP 25
18958: PUSH
18959: LD_VAR 0 3
18963: GREATER
18964: AND
18965: IFFALSE 18996
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18967: LD_ADDR_EXP 27
18971: PUSH
18972: LD_EXP 27
18976: PUSH
18977: LD_STRING #Am06-1
18979: PUSH
18980: LD_EXP 25
18984: PUSH
18985: LD_VAR 0 3
18989: MINUS
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: ADD
18995: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18996: LD_VAR 0 2
19000: PUSH
19001: LD_INT 0
19003: GREATER
19004: PUSH
19005: LD_EXP 25
19009: PUSH
19010: LD_VAR 0 3
19014: LESSEQUAL
19015: AND
19016: IFFALSE 19039
// strings = strings ^ [ #Am06-1 , 0 ] ;
19018: LD_ADDR_EXP 27
19022: PUSH
19023: LD_EXP 27
19027: PUSH
19028: LD_STRING #Am06-1
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: ADD
19038: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
19039: LD_ADDR_EXP 26
19043: PUSH
19044: LD_EXP 26
19048: PUSH
19049: LD_INT 35
19051: MINUS
19052: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
19053: LD_ADDR_EXP 27
19057: PUSH
19058: LD_EXP 27
19062: PUSH
19063: LD_STRING #Am06-2
19065: PUSH
19066: LD_EXP 26
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: ADD
19075: ST_TO_ADDR
// display_strings = strings ;
19076: LD_ADDR_OWVAR 47
19080: PUSH
19081: LD_EXP 27
19085: ST_TO_ADDR
// enable ;
19086: ENABLE
// end ; end_of_file
19087: PPOPN 3
19089: END
// export function PrepareKurt ; var i , depot , tmp , rnd , dec , dec2 ; begin
19090: LD_INT 0
19092: PPUSH
19093: PPUSH
19094: PPUSH
19095: PPUSH
19096: PPUSH
19097: PPUSH
19098: PPUSH
// repeat depot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19099: LD_ADDR_VAR 0 3
19103: PUSH
19104: LD_INT 22
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: LD_INT 30
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 30
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PPUSH
19146: CALL_OW 69
19150: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19151: LD_INT 35
19153: PPUSH
19154: CALL_OW 67
// until depot ;
19158: LD_VAR 0 3
19162: IFFALSE 19099
// repeat wait ( 0 0$1 ) ;
19164: LD_INT 35
19166: PPUSH
19167: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , depot [ 1 ] , 15 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_driving ] ] ] ) diff ( [ Lisa , Bobby , Cyrus , Frank , Donaldson , Gladstone , Denis ] ^ arrivals ) ;
19171: LD_ADDR_VAR 0 4
19175: PUSH
19176: LD_INT 22
19178: PUSH
19179: LD_INT 1
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 91
19188: PUSH
19189: LD_VAR 0 3
19193: PUSH
19194: LD_INT 1
19196: ARRAY
19197: PUSH
19198: LD_INT 15
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: LD_INT 25
19221: PUSH
19222: LD_INT 1
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 25
19231: PUSH
19232: LD_INT 2
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 25
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 25
19251: PUSH
19252: LD_INT 4
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 3
19268: PUSH
19269: LD_INT 54
19271: PUSH
19272: EMPTY
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 3
19281: PUSH
19282: LD_INT 55
19284: PUSH
19285: EMPTY
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 69
19304: PUSH
19305: LD_EXP 2
19309: PUSH
19310: LD_EXP 3
19314: PUSH
19315: LD_EXP 4
19319: PUSH
19320: LD_EXP 5
19324: PUSH
19325: LD_EXP 7
19329: PUSH
19330: LD_EXP 8
19334: PUSH
19335: LD_EXP 9
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: PUSH
19349: LD_EXP 46
19353: ADD
19354: DIFF
19355: ST_TO_ADDR
// until tmp and not InBattle ( 1 ) ;
19356: LD_VAR 0 4
19360: PUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 463
19368: NOT
19369: AND
19370: IFFALSE 19164
// tmp := tmp [ rand ( 1 , tmp ) ] ;
19372: LD_ADDR_VAR 0 4
19376: PUSH
19377: LD_VAR 0 4
19381: PUSH
19382: LD_INT 1
19384: PPUSH
19385: LD_VAR 0 4
19389: PPUSH
19390: CALL_OW 12
19394: ARRAY
19395: ST_TO_ADDR
// blockSpawn = 1 ;
19396: LD_ADDR_EXP 29
19400: PUSH
19401: LD_INT 1
19403: ST_TO_ADDR
// uc_side = 2 ;
19404: LD_ADDR_OWVAR 20
19408: PUSH
19409: LD_INT 2
19411: ST_TO_ADDR
// uc_nation = 2 ;
19412: LD_ADDR_OWVAR 21
19416: PUSH
19417: LD_INT 2
19419: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
19420: LD_ADDR_EXP 19
19424: PUSH
19425: LD_STRING Kurt
19427: PPUSH
19428: LD_INT 0
19430: PPUSH
19431: CALL 5851 0 2
19435: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
19436: LD_EXP 19
19440: PPUSH
19441: LD_VAR 0 4
19445: PPUSH
19446: CALL_OW 250
19450: PPUSH
19451: LD_VAR 0 4
19455: PPUSH
19456: CALL_OW 251
19460: PPUSH
19461: LD_INT 5
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: CALL_OW 50
// InGameOn ;
19471: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
19475: LD_EXP 19
19479: PPUSH
19480: CALL_OW 87
// wait ( 0 0$2 ) ;
19484: LD_INT 70
19486: PPUSH
19487: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
19491: LD_EXP 19
19495: PPUSH
19496: LD_VAR 0 4
19500: PPUSH
19501: CALL_OW 119
// ComMoveUnit ( tmp , Kurt ) ;
19505: LD_VAR 0 4
19509: PPUSH
19510: LD_EXP 19
19514: PPUSH
19515: CALL_OW 112
// wait ( 0 0$1 ) ;
19519: LD_INT 35
19521: PPUSH
19522: CALL_OW 67
// ComTurnUnit ( tmp , Kurt ) ;
19526: LD_VAR 0 4
19530: PPUSH
19531: LD_EXP 19
19535: PPUSH
19536: CALL_OW 119
// DialogueOn ;
19540: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
19544: LD_EXP 19
19548: PPUSH
19549: LD_STRING D2-Kurt-1
19551: PPUSH
19552: CALL_OW 88
// if tmp = JMM then
19556: LD_VAR 0 4
19560: PUSH
19561: LD_EXP 1
19565: EQUAL
19566: IFFALSE 19658
// begin Say ( JMM , D2-JMM-1 ) ;
19568: LD_EXP 1
19572: PPUSH
19573: LD_STRING D2-JMM-1
19575: PPUSH
19576: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19580: LD_EXP 19
19584: PPUSH
19585: LD_STRING D2-Kurt-2
19587: PPUSH
19588: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
19592: LD_EXP 1
19596: PPUSH
19597: LD_STRING D2-JMM-2
19599: PPUSH
19600: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19604: LD_EXP 19
19608: PPUSH
19609: LD_STRING D2-Kurt-3
19611: PPUSH
19612: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
19616: LD_EXP 1
19620: PPUSH
19621: LD_STRING D2-JMM-3
19623: PPUSH
19624: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19628: LD_EXP 19
19632: PPUSH
19633: LD_STRING D2-Kurt-4
19635: PPUSH
19636: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
19640: LD_EXP 1
19644: PPUSH
19645: LD_STRING D2-JMM-4
19647: PPUSH
19648: CALL_OW 88
// DialogueOff ;
19652: CALL_OW 7
// end else
19656: GO 19968
// begin if GetSex ( tmp ) = 1 then
19658: LD_VAR 0 4
19662: PPUSH
19663: CALL_OW 258
19667: PUSH
19668: LD_INT 1
19670: EQUAL
19671: IFFALSE 19685
// Say ( tmp , D2-Sol1-1 ) ;
19673: LD_VAR 0 4
19677: PPUSH
19678: LD_STRING D2-Sol1-1
19680: PPUSH
19681: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19685: LD_VAR 0 4
19689: PPUSH
19690: CALL_OW 258
19694: PUSH
19695: LD_INT 2
19697: EQUAL
19698: IFFALSE 19712
// Say ( tmp , D2-FSol1-1 ) ;
19700: LD_VAR 0 4
19704: PPUSH
19705: LD_STRING D2-FSol1-1
19707: PPUSH
19708: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
19712: LD_EXP 19
19716: PPUSH
19717: LD_STRING D2-Kurt-2
19719: PPUSH
19720: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19724: LD_VAR 0 4
19728: PPUSH
19729: CALL_OW 258
19733: PUSH
19734: LD_INT 1
19736: EQUAL
19737: IFFALSE 19751
// Say ( tmp , D2-Sol1-2 ) ;
19739: LD_VAR 0 4
19743: PPUSH
19744: LD_STRING D2-Sol1-2
19746: PPUSH
19747: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19751: LD_VAR 0 4
19755: PPUSH
19756: CALL_OW 258
19760: PUSH
19761: LD_INT 2
19763: EQUAL
19764: IFFALSE 19778
// Say ( tmp , D2-FSol1-2 ) ;
19766: LD_VAR 0 4
19770: PPUSH
19771: LD_STRING D2-FSol1-2
19773: PPUSH
19774: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
19778: LD_EXP 19
19782: PPUSH
19783: LD_STRING D2-Kurt-3
19785: PPUSH
19786: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 258
19799: PUSH
19800: LD_INT 1
19802: EQUAL
19803: IFFALSE 19817
// Say ( tmp , D2-Sol1-3 ) ;
19805: LD_VAR 0 4
19809: PPUSH
19810: LD_STRING D2-Sol1-3
19812: PPUSH
19813: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19817: LD_VAR 0 4
19821: PPUSH
19822: CALL_OW 258
19826: PUSH
19827: LD_INT 2
19829: EQUAL
19830: IFFALSE 19844
// Say ( tmp , D2-FSol1-3 ) ;
19832: LD_VAR 0 4
19836: PPUSH
19837: LD_STRING D2-FSol1-3
19839: PPUSH
19840: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
19844: LD_EXP 19
19848: PPUSH
19849: LD_STRING D2-Kurt-4
19851: PPUSH
19852: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19856: LD_VAR 0 4
19860: PPUSH
19861: CALL_OW 258
19865: PUSH
19866: LD_INT 1
19868: EQUAL
19869: IFFALSE 19883
// Say ( tmp , D2-Sol1-4 ) ;
19871: LD_VAR 0 4
19875: PPUSH
19876: LD_STRING D2-Sol1-4
19878: PPUSH
19879: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19883: LD_VAR 0 4
19887: PPUSH
19888: CALL_OW 258
19892: PUSH
19893: LD_INT 2
19895: EQUAL
19896: IFFALSE 19910
// Say ( tmp , D2-FSol1-4 ) ;
19898: LD_VAR 0 4
19902: PPUSH
19903: LD_STRING D2-FSol1-4
19905: PPUSH
19906: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19910: LD_VAR 0 4
19914: PPUSH
19915: CALL_OW 258
19919: PUSH
19920: LD_INT 1
19922: EQUAL
19923: IFFALSE 19937
// Say ( tmp , D2-Sol1-5 ) ;
19925: LD_VAR 0 4
19929: PPUSH
19930: LD_STRING D2-Sol1-5
19932: PPUSH
19933: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19937: LD_VAR 0 4
19941: PPUSH
19942: CALL_OW 258
19946: PUSH
19947: LD_INT 2
19949: EQUAL
19950: IFFALSE 19964
// Say ( tmp , D2-FSol1-5 ) ;
19952: LD_VAR 0 4
19956: PPUSH
19957: LD_STRING D2-FSol1-5
19959: PPUSH
19960: CALL_OW 88
// DialogueOff ;
19964: CALL_OW 7
// end ; dec = ShowQuery1 ;
19968: LD_ADDR_VAR 0 6
19972: PUSH
19973: CALL 6453 0 0
19977: ST_TO_ADDR
// if dec = 1 then
19978: LD_VAR 0 6
19982: PUSH
19983: LD_INT 1
19985: EQUAL
19986: IFFALSE 20028
// begin DialogueOn ;
19988: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19992: LD_EXP 19
19996: PPUSH
19997: LD_STRING D2a-Kurt-1
19999: PPUSH
20000: CALL_OW 88
// DialogueOff ;
20004: CALL_OW 7
// InGameOff ;
20008: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20012: LD_INT 1
20014: PPUSH
20015: LD_INT 2
20017: PPUSH
20018: LD_INT 2
20020: PPUSH
20021: LD_INT 1
20023: PPUSH
20024: CALL_OW 80
// end ; if dec = 2 then
20028: LD_VAR 0 6
20032: PUSH
20033: LD_INT 2
20035: EQUAL
20036: IFFALSE 20536
// begin DialogueOn ;
20038: CALL_OW 6
// if tmp = JMM then
20042: LD_VAR 0 4
20046: PUSH
20047: LD_EXP 1
20051: EQUAL
20052: IFFALSE 20108
// begin Say ( JMM , D2b-JMM-1 ) ;
20054: LD_EXP 1
20058: PPUSH
20059: LD_STRING D2b-JMM-1
20061: PPUSH
20062: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20066: LD_EXP 19
20070: PPUSH
20071: LD_STRING D2b-Kurt-1
20073: PPUSH
20074: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
20078: LD_EXP 1
20082: PPUSH
20083: LD_STRING D2b-JMM-2
20085: PPUSH
20086: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20090: LD_EXP 19
20094: PPUSH
20095: LD_STRING D2b-Kurt-2
20097: PPUSH
20098: CALL_OW 88
// DialogueOff ;
20102: CALL_OW 7
// end else
20106: GO 20298
// begin if GetSex ( tmp ) = 1 then
20108: LD_VAR 0 4
20112: PPUSH
20113: CALL_OW 258
20117: PUSH
20118: LD_INT 1
20120: EQUAL
20121: IFFALSE 20135
// Say ( tmp , D2b-Sol1-1 ) ;
20123: LD_VAR 0 4
20127: PPUSH
20128: LD_STRING D2b-Sol1-1
20130: PPUSH
20131: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20135: LD_VAR 0 4
20139: PPUSH
20140: CALL_OW 258
20144: PUSH
20145: LD_INT 2
20147: EQUAL
20148: IFFALSE 20162
// Say ( tmp , D2b-FSol1-1 ) ;
20150: LD_VAR 0 4
20154: PPUSH
20155: LD_STRING D2b-FSol1-1
20157: PPUSH
20158: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
20162: LD_EXP 19
20166: PPUSH
20167: LD_STRING D2b-Kurt-1
20169: PPUSH
20170: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20174: LD_VAR 0 4
20178: PPUSH
20179: CALL_OW 258
20183: PUSH
20184: LD_INT 1
20186: EQUAL
20187: IFFALSE 20201
// Say ( tmp , D2b-Sol1-2 ) ;
20189: LD_VAR 0 4
20193: PPUSH
20194: LD_STRING D2b-Sol1-2
20196: PPUSH
20197: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20201: LD_VAR 0 4
20205: PPUSH
20206: CALL_OW 258
20210: PUSH
20211: LD_INT 2
20213: EQUAL
20214: IFFALSE 20228
// Say ( tmp , D2b-FSol1-2 ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_STRING D2b-FSol1-2
20223: PPUSH
20224: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
20228: LD_EXP 19
20232: PPUSH
20233: LD_STRING D2b-Kurt-2
20235: PPUSH
20236: CALL_OW 88
// if GetSex ( tmp ) = 1 then
20240: LD_VAR 0 4
20244: PPUSH
20245: CALL_OW 258
20249: PUSH
20250: LD_INT 1
20252: EQUAL
20253: IFFALSE 20267
// Say ( tmp , D2c-Sol1-2 ) ;
20255: LD_VAR 0 4
20259: PPUSH
20260: LD_STRING D2c-Sol1-2
20262: PPUSH
20263: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20267: LD_VAR 0 4
20271: PPUSH
20272: CALL_OW 258
20276: PUSH
20277: LD_INT 2
20279: EQUAL
20280: IFFALSE 20294
// Say ( tmp , D2c-FSol1-2 ) ;
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_STRING D2c-FSol1-2
20289: PPUSH
20290: CALL_OW 88
// DialogueOff ;
20294: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
20298: LD_ADDR_VAR 0 7
20302: PUSH
20303: CALL 6527 0 0
20307: ST_TO_ADDR
// if dec2 = 1 then
20308: LD_VAR 0 7
20312: PUSH
20313: LD_INT 1
20315: EQUAL
20316: IFFALSE 20358
// begin DialogueOn ;
20318: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
20322: LD_EXP 19
20326: PPUSH
20327: LD_STRING D2a-Kurt-1
20329: PPUSH
20330: CALL_OW 88
// DialogueOff ;
20334: CALL_OW 7
// InGameOff ;
20338: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
20342: LD_INT 1
20344: PPUSH
20345: LD_INT 2
20347: PPUSH
20348: LD_INT 2
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 80
// end ; if dec2 = 2 then
20358: LD_VAR 0 7
20362: PUSH
20363: LD_INT 2
20365: EQUAL
20366: IFFALSE 20536
// begin if tmp = JMM then
20368: LD_VAR 0 4
20372: PUSH
20373: LD_EXP 1
20377: EQUAL
20378: IFFALSE 20438
// begin DialogueOn ;
20380: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20384: LD_EXP 1
20388: PPUSH
20389: LD_STRING D2c-JMM-1
20391: PPUSH
20392: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20396: LD_EXP 19
20400: PPUSH
20401: LD_STRING D2c-Kurt-1
20403: PPUSH
20404: CALL_OW 88
// DialogueOff ;
20408: CALL_OW 7
// InGameOff ;
20412: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20416: LD_EXP 19
20420: PPUSH
20421: LD_INT 8
20423: PPUSH
20424: CALL_OW 113
// readyToEscape = 1 ;
20428: LD_ADDR_EXP 21
20432: PUSH
20433: LD_INT 1
20435: ST_TO_ADDR
// end else
20436: GO 20536
// begin DialogueOn ;
20438: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20442: LD_VAR 0 4
20446: PPUSH
20447: CALL_OW 258
20451: PUSH
20452: LD_INT 1
20454: EQUAL
20455: IFFALSE 20469
// Say ( tmp , D2c-Sol1-1 ) ;
20457: LD_VAR 0 4
20461: PPUSH
20462: LD_STRING D2c-Sol1-1
20464: PPUSH
20465: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20469: LD_VAR 0 4
20473: PPUSH
20474: CALL_OW 258
20478: PUSH
20479: LD_INT 2
20481: EQUAL
20482: IFFALSE 20496
// Say ( tmp , D2c-FSol1-1 ) ;
20484: LD_VAR 0 4
20488: PPUSH
20489: LD_STRING D2c-FSol1-1
20491: PPUSH
20492: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20496: LD_EXP 19
20500: PPUSH
20501: LD_STRING D2c-Kurt-1
20503: PPUSH
20504: CALL_OW 88
// DialogueOff ;
20508: CALL_OW 7
// InGameOff ;
20512: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20516: LD_EXP 19
20520: PPUSH
20521: LD_INT 8
20523: PPUSH
20524: CALL_OW 113
// readyToEscape = 1 ;
20528: LD_ADDR_EXP 21
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
20536: LD_VAR 0 6
20540: PUSH
20541: LD_INT 3
20543: EQUAL
20544: IFFALSE 20718
// begin DialogueOn ;
20546: CALL_OW 6
// if tmp = JMM then
20550: LD_VAR 0 4
20554: PUSH
20555: LD_EXP 1
20559: EQUAL
20560: IFFALSE 20620
// begin DialogueOn ;
20562: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
20566: LD_EXP 1
20570: PPUSH
20571: LD_STRING D2c-JMM-1
20573: PPUSH
20574: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20578: LD_EXP 19
20582: PPUSH
20583: LD_STRING D2c-Kurt-1
20585: PPUSH
20586: CALL_OW 88
// DialogueOff ;
20590: CALL_OW 7
// InGameOff ;
20594: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20598: LD_EXP 19
20602: PPUSH
20603: LD_INT 8
20605: PPUSH
20606: CALL_OW 113
// readyToEscape = 1 ;
20610: LD_ADDR_EXP 21
20614: PUSH
20615: LD_INT 1
20617: ST_TO_ADDR
// end else
20618: GO 20718
// begin DialogueOn ;
20620: CALL_OW 6
// if GetSex ( tmp ) = 1 then
20624: LD_VAR 0 4
20628: PPUSH
20629: CALL_OW 258
20633: PUSH
20634: LD_INT 1
20636: EQUAL
20637: IFFALSE 20651
// Say ( tmp , D2c-Sol1-1 ) ;
20639: LD_VAR 0 4
20643: PPUSH
20644: LD_STRING D2c-Sol1-1
20646: PPUSH
20647: CALL_OW 88
// if GetSex ( tmp ) = 2 then
20651: LD_VAR 0 4
20655: PPUSH
20656: CALL_OW 258
20660: PUSH
20661: LD_INT 2
20663: EQUAL
20664: IFFALSE 20678
// Say ( tmp , D2c-FSol1-1 ) ;
20666: LD_VAR 0 4
20670: PPUSH
20671: LD_STRING D2c-FSol1-1
20673: PPUSH
20674: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
20678: LD_EXP 19
20682: PPUSH
20683: LD_STRING D2c-Kurt-1
20685: PPUSH
20686: CALL_OW 88
// DialogueOff ;
20690: CALL_OW 7
// InGameOff ;
20694: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
20698: LD_EXP 19
20702: PPUSH
20703: LD_INT 8
20705: PPUSH
20706: CALL_OW 113
// readyToEscape = 1 ;
20710: LD_ADDR_EXP 21
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
20718: LD_ADDR_EXP 29
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20726: LD_INT 35
20728: PPUSH
20729: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
20733: LD_EXP 19
20737: PPUSH
20738: LD_INT 8
20740: PPUSH
20741: CALL_OW 308
20745: PUSH
20746: LD_EXP 21
20750: AND
20751: PUSH
20752: LD_EXP 19
20756: PPUSH
20757: CALL_OW 301
20761: OR
20762: IFFALSE 20726
// if IsDead ( Kurt ) then
20764: LD_EXP 19
20768: PPUSH
20769: CALL_OW 301
20773: IFFALSE 20777
// exit ;
20775: GO 20846
// RemoveUnit ( Kurt ) ;
20777: LD_EXP 19
20781: PPUSH
20782: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
20786: LD_EXP 19
20790: PPUSH
20791: LD_STRING Kurt
20793: PPUSH
20794: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
20798: LD_INT 1
20800: PPUSH
20801: LD_INT 2
20803: PPUSH
20804: CALL_OW 81
20808: PUSH
20809: LD_INT 0
20811: EQUAL
20812: IFFALSE 20822
// KurtStatus = 1 ;
20814: LD_ADDR_EXP 20
20818: PUSH
20819: LD_INT 1
20821: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
20822: LD_INT 1
20824: PPUSH
20825: LD_INT 2
20827: PPUSH
20828: CALL_OW 81
20832: PUSH
20833: LD_INT 2
20835: EQUAL
20836: IFFALSE 20846
// KurtStatus = 2 ;
20838: LD_ADDR_EXP 20
20842: PUSH
20843: LD_INT 2
20845: ST_TO_ADDR
// end ; end_of_file
20846: LD_VAR 0 1
20850: RET
// every 0 0$1 do
20851: GO 20853
20853: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
20854: LD_INT 3
20856: PPUSH
20857: LD_INT 32
20859: PPUSH
20860: LD_INT 3
20862: PPUSH
20863: CALL 6582 0 3
20867: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
20868: GO 20870
20870: DISABLE
20871: LD_INT 0
20873: PPUSH
// begin enemyWayX = [ ] ;
20874: LD_ADDR_EXP 47
20878: PUSH
20879: EMPTY
20880: ST_TO_ADDR
// enemyWayY = [ ] ;
20881: LD_ADDR_EXP 48
20885: PUSH
20886: EMPTY
20887: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
20888: LD_ADDR_VAR 0 1
20892: PUSH
20893: LD_INT 1
20895: PPUSH
20896: LD_INT 2
20898: PPUSH
20899: CALL_OW 12
20903: ST_TO_ADDR
// if rnd = 1 then
20904: LD_VAR 0 1
20908: PUSH
20909: LD_INT 1
20911: EQUAL
20912: IFFALSE 20952
// begin enemyWayX = [ 93 , 84 , 104 ] ;
20914: LD_ADDR_EXP 47
20918: PUSH
20919: LD_INT 93
20921: PUSH
20922: LD_INT 84
20924: PUSH
20925: LD_INT 104
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
20933: LD_ADDR_EXP 48
20937: PUSH
20938: LD_INT 51
20940: PUSH
20941: LD_INT 35
20943: PUSH
20944: LD_INT 28
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
// end ; if rnd = 2 then
20952: LD_VAR 0 1
20956: PUSH
20957: LD_INT 2
20959: EQUAL
20960: IFFALSE 21016
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
20962: LD_ADDR_EXP 47
20966: PUSH
20967: LD_INT 93
20969: PUSH
20970: LD_INT 52
20972: PUSH
20973: LD_INT 34
20975: PUSH
20976: LD_INT 28
20978: PUSH
20979: LD_INT 30
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
20989: LD_ADDR_EXP 48
20993: PUSH
20994: LD_INT 51
20996: PUSH
20997: LD_INT 45
20999: PUSH
21000: LD_INT 35
21002: PUSH
21003: LD_INT 26
21005: PUSH
21006: LD_INT 20
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: ST_TO_ADDR
// end ; enable ;
21016: ENABLE
// end ;
21017: PPOPN 1
21019: END
// every 0 0$1 do
21020: GO 21022
21022: DISABLE
// begin enable ;
21023: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
21024: LD_INT 3
21026: PPUSH
21027: LD_INT 2
21029: PPUSH
21030: LD_INT 10
21032: PPUSH
21033: LD_EXP 31
21037: PPUSH
21038: CALL 8017 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
21042: LD_INT 3
21044: PPUSH
21045: LD_INT 12
21047: PPUSH
21048: LD_EXP 31
21052: PPUSH
21053: CALL 9902 0 3
// if disableHealAI = 0 then
21057: LD_EXP 33
21061: PUSH
21062: LD_INT 0
21064: EQUAL
21065: IFFALSE 21086
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
21067: LD_INT 3
21069: PPUSH
21070: LD_INT 9
21072: PPUSH
21073: LD_INT 10
21075: PPUSH
21076: LD_INT 32
21078: PUSH
21079: EMPTY
21080: LIST
21081: PPUSH
21082: CALL 8408 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
21086: LD_INT 3
21088: PPUSH
21089: LD_INT 51
21091: PPUSH
21092: LD_INT 6
21094: PPUSH
21095: CALL 9116 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
21099: LD_INT 3
21101: PPUSH
21102: LD_INT 12
21104: PPUSH
21105: LD_INT 121
21107: PPUSH
21108: LD_INT 100
21110: PPUSH
21111: CALL 6977 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
21115: LD_INT 3
21117: PPUSH
21118: LD_INT 22
21120: PPUSH
21121: LD_EXP 47
21125: PPUSH
21126: LD_EXP 48
21130: PPUSH
21131: CALL 7180 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
21135: LD_INT 3
21137: PPUSH
21138: LD_INT 10
21140: PPUSH
21141: CALL 9259 0 2
// AttackNearBuildings ( 3 , 1 ) ;
21145: LD_INT 3
21147: PPUSH
21148: LD_INT 1
21150: PPUSH
21151: CALL 9672 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
21155: LD_INT 2
21157: PPUSH
21158: CALL_OW 303
21162: PUSH
21163: LD_INT 2
21165: PPUSH
21166: CALL_OW 255
21170: PUSH
21171: LD_INT 1
21173: EQUAL
21174: OR
21175: IFFALSE 21187
// DefendDepot ( 3 , rudepo ) ;
21177: LD_INT 3
21179: PPUSH
21180: LD_INT 2
21182: PPUSH
21183: CALL 8952 0 2
// end ;
21187: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21188: LD_INT 22
21190: PUSH
21191: LD_INT 3
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 21
21200: PUSH
21201: LD_INT 2
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 55
21210: PUSH
21211: EMPTY
21212: LIST
21213: PUSH
21214: LD_INT 3
21216: PUSH
21217: LD_INT 34
21219: PUSH
21220: LD_INT 51
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PPUSH
21237: CALL_OW 69
21241: PUSH
21242: LD_INT 0
21244: EQUAL
21245: PUSH
21246: LD_INT 21
21248: PPUSH
21249: CALL_OW 255
21253: PUSH
21254: LD_INT 3
21256: EQUAL
21257: AND
21258: PUSH
21259: LD_INT 21
21261: PPUSH
21262: CALL_OW 302
21266: AND
21267: PUSH
21268: LD_INT 2
21270: PPUSH
21271: CALL_OW 255
21275: PUSH
21276: LD_INT 3
21278: EQUAL
21279: AND
21280: PUSH
21281: LD_INT 2
21283: PPUSH
21284: CALL_OW 302
21288: AND
21289: IFFALSE 21473
21291: GO 21293
21293: DISABLE
// begin enable ;
21294: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
21295: LD_INT 2
21297: PPUSH
21298: CALL_OW 274
21302: PPUSH
21303: LD_INT 1
21305: PPUSH
21306: LD_INT 1000
21308: PPUSH
21309: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
21313: LD_INT 3
21315: PPUSH
21316: LD_INT 21
21318: PPUSH
21319: LD_INT 5
21321: PUSH
21322: LD_INT 6
21324: PUSH
21325: LD_INT 6
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: LD_OWVAR 67
21337: ARRAY
21338: PPUSH
21339: LD_INT 43
21341: PUSH
21342: LD_INT 43
21344: PUSH
21345: LD_INT 44
21347: PUSH
21348: LD_INT 44
21350: PUSH
21351: LD_INT 46
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 43
21363: PUSH
21364: LD_INT 43
21366: PUSH
21367: LD_INT 43
21369: PUSH
21370: LD_INT 44
21372: PUSH
21373: LD_INT 44
21375: PUSH
21376: LD_INT 46
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 43
21389: PUSH
21390: LD_INT 43
21392: PUSH
21393: LD_INT 43
21395: PUSH
21396: LD_INT 44
21398: PUSH
21399: LD_INT 44
21401: PUSH
21402: LD_INT 46
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PUSH
21418: LD_OWVAR 67
21422: ARRAY
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: LD_INT 22
21432: PUSH
21433: LD_INT 22
21435: PUSH
21436: LD_INT 24
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PPUSH
21446: LD_INT 2
21448: PPUSH
21449: CALL_OW 12
21453: ARRAY
21454: PUSH
21455: LD_INT 24
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: PUSH
21463: LD_OWVAR 67
21467: ARRAY
21468: PPUSH
21469: CALL 6823 0 7
// end ;
21473: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
21474: LD_INT 17
21476: PPUSH
21477: CALL_OW 255
21481: PUSH
21482: LD_INT 3
21484: EQUAL
21485: PUSH
21486: LD_INT 17
21488: PPUSH
21489: CALL_OW 302
21493: AND
21494: PUSH
21495: LD_INT 2
21497: PPUSH
21498: CALL_OW 255
21502: PUSH
21503: LD_INT 3
21505: EQUAL
21506: AND
21507: PUSH
21508: LD_INT 2
21510: PPUSH
21511: CALL_OW 302
21515: AND
21516: IFFALSE 21583
21518: GO 21520
21520: DISABLE
// begin enable ;
21521: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
21522: LD_INT 17
21524: PPUSH
21525: LD_INT 22
21527: PPUSH
21528: LD_INT 1
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: LD_INT 42
21536: PUSH
21537: LD_INT 43
21539: PUSH
21540: LD_INT 44
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PPUSH
21551: LD_INT 3
21553: PPUSH
21554: CALL_OW 12
21558: ARRAY
21559: PPUSH
21560: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
21564: LD_INT 17
21566: PPUSH
21567: LD_INT 22
21569: PPUSH
21570: LD_INT 1
21572: PPUSH
21573: LD_INT 1
21575: PPUSH
21576: LD_INT 51
21578: PPUSH
21579: CALL_OW 185
// end ;
21583: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
21584: LD_INT 17
21586: PPUSH
21587: CALL_OW 302
21591: PUSH
21592: LD_INT 17
21594: PPUSH
21595: CALL_OW 255
21599: PUSH
21600: LD_INT 3
21602: EQUAL
21603: AND
21604: PUSH
21605: LD_INT 2
21607: PPUSH
21608: CALL_OW 302
21612: AND
21613: PUSH
21614: LD_INT 2
21616: PPUSH
21617: CALL_OW 255
21621: PUSH
21622: LD_INT 3
21624: EQUAL
21625: AND
21626: PUSH
21627: LD_INT 17
21629: PPUSH
21630: CALL_OW 313
21634: NOT
21635: AND
21636: IFFALSE 21730
21638: GO 21640
21640: DISABLE
21641: LD_INT 0
21643: PPUSH
// begin for i = 1 to 6 do
21644: LD_ADDR_VAR 0 1
21648: PUSH
21649: DOUBLE
21650: LD_INT 1
21652: DEC
21653: ST_TO_ADDR
21654: LD_INT 6
21656: PUSH
21657: FOR_TO
21658: IFFALSE 21728
// begin uc_side = 3 ;
21660: LD_ADDR_OWVAR 20
21664: PUSH
21665: LD_INT 3
21667: ST_TO_ADDR
// uc_nation = 3 ;
21668: LD_ADDR_OWVAR 21
21672: PUSH
21673: LD_INT 3
21675: ST_TO_ADDR
// hc_gallery :=  ;
21676: LD_ADDR_OWVAR 33
21680: PUSH
21681: LD_STRING 
21683: ST_TO_ADDR
// hc_name :=  ;
21684: LD_ADDR_OWVAR 26
21688: PUSH
21689: LD_STRING 
21691: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
21692: LD_INT 0
21694: PPUSH
21695: LD_EXP 34
21699: PPUSH
21700: LD_EXP 35
21704: PPUSH
21705: CALL_OW 12
21709: PPUSH
21710: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
21714: CALL_OW 44
21718: PPUSH
21719: LD_INT 17
21721: PPUSH
21722: CALL_OW 52
// end ;
21726: GO 21657
21728: POP
21729: POP
// end ;
21730: PPOPN 1
21732: END
// every 2 2$0 do var i , j ;
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
21740: LD_INT 14700
21742: PUSH
21743: LD_INT 33600
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 1
21752: PPUSH
21753: LD_INT 2
21755: PPUSH
21756: CALL_OW 12
21760: ARRAY
21761: PPUSH
21762: CALL_OW 67
// disableHealAI = 1 ;
21766: LD_ADDR_EXP 33
21770: PUSH
21771: LD_INT 1
21773: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: LD_INT 22
21781: PUSH
21782: LD_INT 3
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 25
21791: PUSH
21792: LD_INT 4
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PPUSH
21803: CALL_OW 69
21807: PUSH
21808: FOR_IN
21809: IFFALSE 21822
// ComExitBuilding ( i ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 122
21820: GO 21808
21822: POP
21823: POP
// wait ( 0 0$1 ) ;
21824: LD_INT 35
21826: PPUSH
21827: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21831: LD_INT 35
21833: PPUSH
21834: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21838: LD_ADDR_VAR 0 1
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_INT 3
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 25
21855: PUSH
21856: LD_INT 4
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PPUSH
21867: CALL_OW 69
21871: PUSH
21872: FOR_IN
21873: IFFALSE 21950
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
21875: LD_ADDR_VAR 0 2
21879: PUSH
21880: LD_INT 17
21882: PPUSH
21883: LD_INT 22
21885: PUSH
21886: LD_INT 0
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 25
21895: PUSH
21896: LD_INT 12
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 70
21911: PUSH
21912: FOR_IN
21913: IFFALSE 21946
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
21915: LD_VAR 0 1
21919: PPUSH
21920: LD_VAR 0 2
21924: PPUSH
21925: CALL_OW 250
21929: PPUSH
21930: LD_VAR 0 2
21934: PPUSH
21935: CALL_OW 251
21939: PPUSH
21940: CALL_OW 191
// end ;
21944: GO 21912
21946: POP
21947: POP
// end ;
21948: GO 21872
21950: POP
21951: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
21952: LD_INT 22
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 25
21964: PUSH
21965: LD_INT 4
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PPUSH
21976: CALL_OW 69
21980: PUSH
21981: LD_INT 0
21983: EQUAL
21984: PUSH
21985: LD_EXP 32
21989: PUSH
21990: LD_INT 6
21992: PUSH
21993: LD_INT 7
21995: PUSH
21996: LD_INT 8
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: PUSH
22004: LD_OWVAR 67
22008: ARRAY
22009: GREATEREQUAL
22010: OR
22011: PUSH
22012: LD_INT 17
22014: PPUSH
22015: LD_INT 22
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 25
22027: PUSH
22028: LD_INT 12
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PPUSH
22039: CALL_OW 70
22043: PUSH
22044: LD_INT 0
22046: EQUAL
22047: OR
22048: IFFALSE 21831
// disableHealAI = 0 ;
22050: LD_ADDR_EXP 33
22054: PUSH
22055: LD_INT 0
22057: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
22058: LD_ADDR_VAR 0 1
22062: PUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 25
22075: PUSH
22076: LD_INT 12
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PPUSH
22087: CALL_OW 69
22091: PUSH
22092: FOR_IN
22093: IFFALSE 22109
// SetClass ( i , 16 ) ;
22095: LD_VAR 0 1
22099: PPUSH
22100: LD_INT 16
22102: PPUSH
22103: CALL_OW 336
22107: GO 22092
22109: POP
22110: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
22111: LD_ADDR_VAR 0 1
22115: PUSH
22116: LD_INT 22
22118: PUSH
22119: LD_INT 3
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 25
22128: PUSH
22129: LD_INT 4
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: PUSH
22145: FOR_IN
22146: IFFALSE 22165
// ComMoveXY ( i , 113 , 94 ) ;
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_INT 113
22155: PPUSH
22156: LD_INT 94
22158: PPUSH
22159: CALL_OW 111
22163: GO 22145
22165: POP
22166: POP
// end ;
22167: PPOPN 2
22169: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
22170: LD_INT 21
22172: PPUSH
22173: CALL_OW 255
22177: PUSH
22178: LD_INT 3
22180: EQUAL
22181: PUSH
22182: LD_INT 21
22184: PPUSH
22185: CALL_OW 302
22189: AND
22190: PUSH
22191: LD_INT 22
22193: PUSH
22194: LD_INT 3
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 34
22203: PUSH
22204: LD_INT 51
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PPUSH
22215: CALL_OW 69
22219: PUSH
22220: LD_INT 0
22222: EQUAL
22223: AND
22224: IFFALSE 22256
22226: GO 22228
22228: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
22229: LD_INT 21
22231: PPUSH
22232: LD_INT 23
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: LD_INT 51
22243: PPUSH
22244: CALL_OW 185
// wait ( 5 5$0 ) ;
22248: LD_INT 10500
22250: PPUSH
22251: CALL_OW 67
// enable ;
22255: ENABLE
// end ; end_of_file
22256: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
22257: LD_EXP 26
22261: PUSH
22262: LD_INT 0
22264: LESSEQUAL
22265: IFFALSE 22414
22267: GO 22269
22269: DISABLE
22270: LD_INT 0
22272: PPUSH
22273: PPUSH
22274: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22275: LD_ADDR_VAR 0 2
22279: PUSH
22280: LD_INT 22
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 21
22292: PUSH
22293: LD_INT 3
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 2
22302: PUSH
22303: LD_INT 30
22305: PUSH
22306: LD_INT 0
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: PPUSH
22333: CALL_OW 69
22337: ST_TO_ADDR
// for i in tmp do
22338: LD_ADDR_VAR 0 1
22342: PUSH
22343: LD_VAR 0 2
22347: PUSH
22348: FOR_IN
22349: IFFALSE 22382
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
22351: LD_ADDR_VAR 0 3
22355: PUSH
22356: LD_VAR 0 3
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 274
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 275
22378: PLUS
22379: ST_TO_ADDR
22380: GO 22348
22382: POP
22383: POP
// if yourCrates >= needCrates then
22384: LD_VAR 0 3
22388: PUSH
22389: LD_EXP 25
22393: GREATEREQUAL
22394: IFFALSE 22407
// begin FinishMission ( yourCrates ) ;
22396: LD_VAR 0 3
22400: PPUSH
22401: CALL 22417 0 1
// end else
22405: GO 22414
// begin YouLost ( matmin ) ;
22407: LD_STRING matmin
22409: PPUSH
22410: CALL_OW 104
// end ; end ;
22414: PPOPN 3
22416: END
// export function FinishMission ( crates ) ; begin
22417: LD_INT 0
22419: PPUSH
// if crates + 100 > crates then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 100
22427: PLUS
22428: PUSH
22429: LD_VAR 0 1
22433: GREATER
22434: IFFALSE 22458
// begin AddMedal ( cans , 1 ) ;
22436: LD_STRING cans
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
22446: LD_INT 1
22448: PPUSH
22449: LD_STRING 06_crates_1
22451: PPUSH
22452: CALL_OW 39
// end else
22456: GO 22479
// begin AddMedal ( cans , - 1 ) ;
22458: LD_STRING cans
22460: PPUSH
22461: LD_INT 1
22463: NEG
22464: PPUSH
22465: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
22469: LD_INT 0
22471: PPUSH
22472: LD_STRING 06_crates_1
22474: PPUSH
22475: CALL_OW 39
// end ; if unitLost < 3 then
22479: LD_EXP 30
22483: PUSH
22484: LD_INT 3
22486: LESS
22487: IFFALSE 22501
// begin AddMedal ( people , 1 ) ;
22489: LD_STRING people
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: CALL_OW 101
// end else
22499: GO 22512
// begin AddMedal ( people , - 1 ) ;
22501: LD_STRING people
22503: PPUSH
22504: LD_INT 1
22506: NEG
22507: PPUSH
22508: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
22512: LD_EXP 28
22516: PPUSH
22517: LD_STRING 06_remoteVehs_1
22519: PPUSH
22520: CALL_OW 39
// if remoteVehiclesBuild = 1 then
22524: LD_EXP 28
22528: PUSH
22529: LD_INT 1
22531: EQUAL
22532: IFFALSE 22546
// begin AddMedal ( remote , 1 ) ;
22534: LD_STRING remote
22536: PPUSH
22537: LD_INT 1
22539: PPUSH
22540: CALL_OW 101
// end else
22544: GO 22586
// begin if GetTech ( 18 , 1 ) = state_enabled then
22546: LD_INT 18
22548: PPUSH
22549: LD_INT 1
22551: PPUSH
22552: CALL_OW 321
22556: PUSH
22557: LD_INT 1
22559: EQUAL
22560: IFFALSE 22575
// begin AddMedal ( remote , - 1 ) ;
22562: LD_STRING remote
22564: PPUSH
22565: LD_INT 1
22567: NEG
22568: PPUSH
22569: CALL_OW 101
// end else
22573: GO 22586
// begin AddMedal ( remote , - 2 ) ;
22575: LD_STRING remote
22577: PPUSH
22578: LD_INT 2
22580: NEG
22581: PPUSH
22582: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
22586: LD_EXP 20
22590: PPUSH
22591: LD_STRING 06_KurtStatus_1
22593: PPUSH
22594: CALL_OW 39
// GiveMedals ( Main ) ;
22598: LD_STRING Main
22600: PPUSH
22601: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
22605: LD_INT 22
22607: PUSH
22608: LD_INT 1
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 21
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 50
22627: PUSH
22628: EMPTY
22629: LIST
22630: PUSH
22631: LD_INT 2
22633: PUSH
22634: LD_INT 25
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 25
22646: PUSH
22647: LD_INT 2
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 25
22656: PUSH
22657: LD_INT 3
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 25
22666: PUSH
22667: LD_INT 4
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 69
22691: PPUSH
22692: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22696: LD_EXP 1
22700: PPUSH
22701: LD_EXP 43
22705: PUSH
22706: LD_STRING JMM
22708: STR
22709: PPUSH
22710: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22714: LD_EXP 2
22718: PPUSH
22719: LD_EXP 43
22723: PUSH
22724: LD_STRING Lisa
22726: STR
22727: PPUSH
22728: CALL 6070 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22732: LD_EXP 3
22736: PPUSH
22737: LD_EXP 43
22741: PUSH
22742: LD_STRING Bobby
22744: STR
22745: PPUSH
22746: CALL 6070 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22750: LD_EXP 4
22754: PPUSH
22755: LD_EXP 43
22759: PUSH
22760: LD_STRING Cyrus
22762: STR
22763: PPUSH
22764: CALL 6070 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22768: LD_EXP 5
22772: PPUSH
22773: LD_EXP 43
22777: PUSH
22778: LD_STRING Frank
22780: STR
22781: PPUSH
22782: CALL 6070 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22786: LD_EXP 6
22790: PPUSH
22791: LD_EXP 43
22795: PUSH
22796: LD_STRING Brown
22798: STR
22799: PPUSH
22800: CALL 6070 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22804: LD_EXP 7
22808: PPUSH
22809: LD_EXP 43
22813: PUSH
22814: LD_STRING Donaldson
22816: STR
22817: PPUSH
22818: CALL 6070 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22822: LD_EXP 8
22826: PPUSH
22827: LD_EXP 43
22831: PUSH
22832: LD_STRING Gladstone
22834: STR
22835: PPUSH
22836: CALL 6070 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22840: LD_EXP 9
22844: PPUSH
22845: LD_EXP 43
22849: PUSH
22850: LD_STRING Denis
22852: STR
22853: PPUSH
22854: CALL 6070 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22858: LD_EXP 15
22862: PPUSH
22863: LD_EXP 43
22867: PUSH
22868: LD_STRING Joan
22870: STR
22871: PPUSH
22872: CALL 6070 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
22876: LD_EXP 16
22880: PPUSH
22881: LD_STRING 06_JoanStatus_1
22883: PPUSH
22884: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
22888: LD_INT 50
22890: PUSH
22891: EMPTY
22892: LIST
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 25
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 25
22929: PUSH
22930: LD_INT 2
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 25
22939: PUSH
22940: LD_INT 3
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 25
22949: PUSH
22950: LD_INT 4
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL_OW 69
22974: PUSH
22975: LD_EXP 1
22979: PUSH
22980: LD_EXP 2
22984: PUSH
22985: LD_EXP 3
22989: PUSH
22990: LD_EXP 4
22994: PUSH
22995: LD_EXP 5
22999: PUSH
23000: LD_EXP 6
23004: PUSH
23005: LD_EXP 7
23009: PUSH
23010: LD_EXP 8
23014: PUSH
23015: LD_EXP 9
23019: PUSH
23020: LD_EXP 15
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: DIFF
23037: PPUSH
23038: LD_STRING 06_other_survivors
23040: PPUSH
23041: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
23045: LD_INT 50
23047: PUSH
23048: EMPTY
23049: LIST
23050: PUSH
23051: LD_INT 22
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: LD_INT 25
23076: PUSH
23077: LD_INT 12
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 25
23086: PUSH
23087: LD_INT 16
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: PPUSH
23105: CALL_OW 69
23109: PPUSH
23110: LD_STRING 06_other_apemans
23112: PPUSH
23113: CALL_OW 38
// YouWin ;
23117: CALL_OW 103
// end ; end_of_file
23121: LD_VAR 0 2
23125: RET
// every 1 1$0 trigger sendedConvoys = 3 do
23126: LD_EXP 39
23130: PUSH
23131: LD_INT 3
23133: EQUAL
23134: IFFALSE 23249
23136: GO 23138
23138: DISABLE
// begin enable ;
23139: ENABLE
// sendedConvoys = 0 ;
23140: LD_ADDR_EXP 39
23144: PUSH
23145: LD_INT 0
23147: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
23148: LD_INT 6
23150: PPUSH
23151: LD_INT 3
23153: PPUSH
23154: LD_INT 5
23156: PPUSH
23157: LD_INT 10
23159: PPUSH
23160: CALL_OW 12
23164: PUSH
23165: LD_INT 5
23167: PPUSH
23168: LD_INT 11
23170: PPUSH
23171: CALL_OW 12
23175: PUSH
23176: LD_INT 8
23178: PPUSH
23179: LD_INT 12
23181: PPUSH
23182: CALL_OW 12
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: PUSH
23192: LD_OWVAR 67
23196: ARRAY
23197: PPUSH
23198: LD_INT 0
23200: PPUSH
23201: LD_INT 0
23203: PPUSH
23204: LD_INT 0
23206: PPUSH
23207: LD_INT 0
23209: PPUSH
23210: LD_EXP 34
23214: PPUSH
23215: LD_EXP 35
23219: PPUSH
23220: CALL_OW 12
23224: PPUSH
23225: LD_INT 16
23227: PPUSH
23228: LD_INT 15
23230: PPUSH
23231: LD_INT 1
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: LD_INT 2
23239: PPUSH
23240: CALL_OW 12
23244: PPUSH
23245: CALL 10500 0 12
// end ; end_of_file
23249: END
// export function PrepareNature ; var i , un ; begin
23250: LD_INT 0
23252: PPUSH
23253: PPUSH
23254: PPUSH
// for i = 1 to Difficulty + 2 do
23255: LD_ADDR_VAR 0 2
23259: PUSH
23260: DOUBLE
23261: LD_INT 1
23263: DEC
23264: ST_TO_ADDR
23265: LD_OWVAR 67
23269: PUSH
23270: LD_INT 2
23272: PLUS
23273: PUSH
23274: FOR_TO
23275: IFFALSE 23384
// begin hc_sex = sex_male ;
23277: LD_ADDR_OWVAR 27
23281: PUSH
23282: LD_INT 1
23284: ST_TO_ADDR
// uc_side = 0 ;
23285: LD_ADDR_OWVAR 20
23289: PUSH
23290: LD_INT 0
23292: ST_TO_ADDR
// uc_nation = nation_nature ;
23293: LD_ADDR_OWVAR 21
23297: PUSH
23298: LD_INT 0
23300: ST_TO_ADDR
// hc_class = class_tiger ;
23301: LD_ADDR_OWVAR 28
23305: PUSH
23306: LD_INT 14
23308: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23309: LD_ADDR_OWVAR 31
23313: PUSH
23314: LD_EXP 35
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23334: LD_ADDR_OWVAR 35
23338: PUSH
23339: LD_INT 5
23341: NEG
23342: PPUSH
23343: LD_INT 5
23345: PPUSH
23346: CALL_OW 12
23350: PUSH
23351: LD_OWVAR 67
23355: MUL
23356: ST_TO_ADDR
// un = CreateHuman ;
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: CALL_OW 44
23366: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23367: LD_VAR 0 3
23371: PPUSH
23372: LD_INT 18
23374: PPUSH
23375: LD_INT 0
23377: PPUSH
23378: CALL_OW 49
// end ;
23382: GO 23274
23384: POP
23385: POP
// for i = 1 to rand ( 3 , 4 ) do
23386: LD_ADDR_VAR 0 2
23390: PUSH
23391: DOUBLE
23392: LD_INT 1
23394: DEC
23395: ST_TO_ADDR
23396: LD_INT 3
23398: PPUSH
23399: LD_INT 4
23401: PPUSH
23402: CALL_OW 12
23406: PUSH
23407: FOR_TO
23408: IFFALSE 23502
// begin hc_sex = sex_male ;
23410: LD_ADDR_OWVAR 27
23414: PUSH
23415: LD_INT 1
23417: ST_TO_ADDR
// uc_side = 0 ;
23418: LD_ADDR_OWVAR 20
23422: PUSH
23423: LD_INT 0
23425: ST_TO_ADDR
// uc_nation = nation_nature ;
23426: LD_ADDR_OWVAR 21
23430: PUSH
23431: LD_INT 0
23433: ST_TO_ADDR
// hc_class = 18 ;
23434: LD_ADDR_OWVAR 28
23438: PUSH
23439: LD_INT 18
23441: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23442: LD_ADDR_OWVAR 31
23446: PUSH
23447: LD_EXP 35
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: ST_TO_ADDR
// hc_agressivity = 0 ;
23467: LD_ADDR_OWVAR 35
23471: PUSH
23472: LD_INT 0
23474: ST_TO_ADDR
// un = CreateHuman ;
23475: LD_ADDR_VAR 0 3
23479: PUSH
23480: CALL_OW 44
23484: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
23485: LD_VAR 0 3
23489: PPUSH
23490: LD_INT 18
23492: PPUSH
23493: LD_INT 0
23495: PPUSH
23496: CALL_OW 49
// end ;
23500: GO 23407
23502: POP
23503: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
23504: LD_ADDR_VAR 0 2
23508: PUSH
23509: DOUBLE
23510: LD_INT 1
23512: DEC
23513: ST_TO_ADDR
23514: LD_INT 1
23516: PPUSH
23517: LD_INT 3
23519: PPUSH
23520: CALL_OW 12
23524: PUSH
23525: LD_OWVAR 67
23529: PLUS
23530: PUSH
23531: FOR_TO
23532: IFFALSE 23681
// begin hc_sex = sex_male ;
23534: LD_ADDR_OWVAR 27
23538: PUSH
23539: LD_INT 1
23541: ST_TO_ADDR
// uc_side = 0 ;
23542: LD_ADDR_OWVAR 20
23546: PUSH
23547: LD_INT 0
23549: ST_TO_ADDR
// uc_nation = nation_nature ;
23550: LD_ADDR_OWVAR 21
23554: PUSH
23555: LD_INT 0
23557: ST_TO_ADDR
// hc_class = class_apeman ;
23558: LD_ADDR_OWVAR 28
23562: PUSH
23563: LD_INT 12
23565: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23566: LD_ADDR_OWVAR 31
23570: PUSH
23571: LD_INT 2
23573: PPUSH
23574: LD_INT 5
23576: PPUSH
23577: CALL_OW 12
23581: PUSH
23582: LD_INT 0
23584: PPUSH
23585: LD_INT 2
23587: PPUSH
23588: CALL_OW 12
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
23605: LD_ADDR_OWVAR 35
23609: PUSH
23610: LD_INT 20
23612: PPUSH
23613: LD_INT 30
23615: PPUSH
23616: CALL_OW 12
23620: PUSH
23621: LD_INT 30
23623: PPUSH
23624: LD_INT 40
23626: PPUSH
23627: CALL_OW 12
23631: PUSH
23632: LD_INT 40
23634: PPUSH
23635: LD_INT 50
23637: PPUSH
23638: CALL_OW 12
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PUSH
23648: LD_OWVAR 67
23652: ARRAY
23653: ST_TO_ADDR
// un = CreateHuman ;
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: CALL_OW 44
23663: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
23664: LD_VAR 0 3
23668: PPUSH
23669: LD_INT 19
23671: PPUSH
23672: LD_INT 0
23674: PPUSH
23675: CALL_OW 49
// end ;
23679: GO 23531
23681: POP
23682: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
23683: LD_ADDR_VAR 0 2
23687: PUSH
23688: DOUBLE
23689: LD_INT 1
23691: DEC
23692: ST_TO_ADDR
23693: LD_INT 5
23695: PPUSH
23696: LD_INT 6
23698: PPUSH
23699: CALL_OW 12
23703: PUSH
23704: LD_OWVAR 67
23708: PLUS
23709: PUSH
23710: FOR_TO
23711: IFFALSE 23819
// begin hc_sex = sex_male ;
23713: LD_ADDR_OWVAR 27
23717: PUSH
23718: LD_INT 1
23720: ST_TO_ADDR
// uc_side = 0 ;
23721: LD_ADDR_OWVAR 20
23725: PUSH
23726: LD_INT 0
23728: ST_TO_ADDR
// uc_nation = nation_nature ;
23729: LD_ADDR_OWVAR 21
23733: PUSH
23734: LD_INT 0
23736: ST_TO_ADDR
// hc_class = class_apeman ;
23737: LD_ADDR_OWVAR 28
23741: PUSH
23742: LD_INT 12
23744: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 5 ) , rand ( 0 , 2 ) , 0 , 0 ] ;
23745: LD_ADDR_OWVAR 31
23749: PUSH
23750: LD_INT 2
23752: PPUSH
23753: LD_INT 5
23755: PPUSH
23756: CALL_OW 12
23760: PUSH
23761: LD_INT 0
23763: PPUSH
23764: LD_INT 2
23766: PPUSH
23767: CALL_OW 12
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: ST_TO_ADDR
// hc_agressivity = 0 ;
23784: LD_ADDR_OWVAR 35
23788: PUSH
23789: LD_INT 0
23791: ST_TO_ADDR
// un = CreateHuman ;
23792: LD_ADDR_VAR 0 3
23796: PUSH
23797: CALL_OW 44
23801: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
23802: LD_VAR 0 3
23806: PPUSH
23807: LD_INT 20
23809: PPUSH
23810: LD_INT 0
23812: PPUSH
23813: CALL_OW 49
// end ;
23817: GO 23710
23819: POP
23820: POP
// end ; end_of_file
23821: LD_VAR 0 1
23825: RET
