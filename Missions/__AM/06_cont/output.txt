// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export cratesStatus ; export sendedConvoys ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 37
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 38
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 39
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 21
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// blockSpawn = 0 ;
  58: LD_ADDR_EXP 28
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// KurtStatus = 0 ;
  66: LD_ADDR_EXP 19
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// readyToEscape = 0 ;
  74: LD_ADDR_EXP 20
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// JoanStatus = 0 ;
  82: LD_ADDR_EXP 15
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// cratesStatus = 2 ;
  90: LD_ADDR_EXP 35
  94: PUSH
  95: LD_INT 2
  97: ST_TO_ADDR
// timerStatus = 1 ;
  98: LD_ADDR_EXP 23
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 106: LD_ADDR_EXP 24
 110: PUSH
 111: LD_INT 350
 113: PUSH
 114: LD_INT 500
 116: PUSH
 117: LD_INT 700
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: PUSH
 125: LD_OWVAR 67
 129: ARRAY
 130: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 131: LD_ADDR_EXP 25
 135: PUSH
 136: LD_INT 105000
 138: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 139: LD_ADDR_EXP 27
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// sendedConvoys = 0 ;
 147: LD_ADDR_EXP 36
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// tamedApemans = 0 ;
 155: LD_ADDR_EXP 31
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// unitLost = 0 ;
 163: LD_ADDR_EXP 29
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 171: LD_ADDR_EXP 30
 175: PUSH
 176: EMPTY
 177: ST_TO_ADDR
// disableHealAI = 0 ;
 178: LD_ADDR_EXP 32
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// strings = [ ] ;
 186: LD_ADDR_EXP 26
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// PrepareNature ;
 193: CALL 19655 0 0
// PrepareDifficulty ;
 197: CALL 5110 0 0
// PrepareRussian ;
 201: CALL 4217 0 0
// PrepareVehicles ;
 205: CALL 1292 0 0
// PrepareHeroes ;
 209: CALL 310 0 0
// PrepareOthers ;
 213: CALL 1553 0 0
// PreparePlayerApemans ;
 217: CALL 1695 0 0
// end ;
 221: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 222: LD_EXP 37
 226: PUSH
 227: LD_INT 1
 229: EQUAL
 230: IFFALSE 307
 232: GO 234
 234: DISABLE
 235: LD_INT 0
 237: PPUSH
// begin enable ;
 238: ENABLE
// fogoff ( true ) ;
 239: LD_INT 1
 241: PPUSH
 242: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 246: LD_ADDR_VAR 0 1
 250: PUSH
 251: LD_INT 22
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: LD_INT 30
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: LIST
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PPUSH
 275: CALL_OW 69
 279: PUSH
 280: FOR_IN
 281: IFFALSE 305
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 283: LD_VAR 0 1
 287: PPUSH
 288: CALL_OW 274
 292: PPUSH
 293: LD_INT 2
 295: PPUSH
 296: LD_INT 9999
 298: PPUSH
 299: CALL_OW 277
 303: GO 280
 305: POP
 306: POP
// end ; end_of_file
 307: PPOPN 1
 309: END
// export function PrepareHeroes ; var veh ; begin
 310: LD_INT 0
 312: PPUSH
 313: PPUSH
// uc_side = 1 ;
 314: LD_ADDR_OWVAR 20
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// uc_nation = 1 ;
 322: LD_ADDR_OWVAR 21
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 330: LD_ADDR_EXP 1
 334: PUSH
 335: LD_STRING JMM
 337: PPUSH
 338: LD_INT 1
 340: PPUSH
 341: CALL 4594 0 2
 345: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_STRING Harisson
 353: PPUSH
 354: LD_INT 0
 356: PPUSH
 357: CALL 4594 0 2
 361: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 362: LD_ADDR_EXP 10
 366: PUSH
 367: LD_STRING DeltaDoctor
 369: PPUSH
 370: CALL_OW 34
 374: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 375: LD_ADDR_VAR 0 2
 379: PUSH
 380: LD_INT 22
 382: PUSH
 383: LD_INT 1
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 21
 392: PUSH
 393: LD_INT 2
 395: PUSH
 396: EMPTY
 397: LIST
 398: LIST
 399: PUSH
 400: LD_INT 58
 402: PUSH
 403: EMPTY
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PPUSH
 411: CALL_OW 69
 415: ST_TO_ADDR
// if veh > 0 then
 416: LD_VAR 0 2
 420: PUSH
 421: LD_INT 0
 423: GREATER
 424: IFFALSE 446
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 426: LD_EXP 1
 430: PPUSH
 431: LD_VAR 0 2
 435: PUSH
 436: LD_INT 1
 438: ARRAY
 439: PPUSH
 440: CALL_OW 52
// end else
 444: GO 461
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 446: LD_EXP 1
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 461: LD_STRING LisaIn06
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 30
 471: PUSH
 472: LD_INT 1
 474: EQUAL
 475: IFFALSE 579
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 477: LD_ADDR_VAR 0 2
 481: PUSH
 482: LD_INT 22
 484: PUSH
 485: LD_INT 1
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 21
 494: PUSH
 495: LD_INT 2
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 58
 504: PUSH
 505: EMPTY
 506: LIST
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 518: LD_ADDR_EXP 2
 522: PUSH
 523: LD_STRING Lisa
 525: PPUSH
 526: LD_INT 1
 528: PPUSH
 529: CALL 4594 0 2
 533: ST_TO_ADDR
// if veh > 0 then
 534: LD_VAR 0 2
 538: PUSH
 539: LD_INT 0
 541: GREATER
 542: IFFALSE 564
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 544: LD_EXP 2
 548: PPUSH
 549: LD_VAR 0 2
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: CALL_OW 52
// end else
 562: GO 579
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 564: LD_EXP 2
 568: PPUSH
 569: LD_INT 2
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 579: LD_STRING BobbyIn06
 581: PPUSH
 582: LD_INT 0
 584: PPUSH
 585: CALL_OW 30
 589: PUSH
 590: LD_INT 1
 592: EQUAL
 593: IFFALSE 697
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 595: LD_ADDR_VAR 0 2
 599: PUSH
 600: LD_INT 22
 602: PUSH
 603: LD_INT 1
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 21
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 58
 622: PUSH
 623: EMPTY
 624: LIST
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PPUSH
 631: CALL_OW 69
 635: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 636: LD_ADDR_EXP 3
 640: PUSH
 641: LD_STRING Bobby
 643: PPUSH
 644: LD_INT 1
 646: PPUSH
 647: CALL 4594 0 2
 651: ST_TO_ADDR
// if veh > 0 then
 652: LD_VAR 0 2
 656: PUSH
 657: LD_INT 0
 659: GREATER
 660: IFFALSE 682
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 662: LD_EXP 3
 666: PPUSH
 667: LD_VAR 0 2
 671: PUSH
 672: LD_INT 1
 674: ARRAY
 675: PPUSH
 676: CALL_OW 52
// end else
 680: GO 697
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 682: LD_EXP 3
 686: PPUSH
 687: LD_INT 2
 689: PPUSH
 690: LD_INT 0
 692: PPUSH
 693: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 697: LD_STRING CyrusIn06
 699: PPUSH
 700: LD_INT 0
 702: PPUSH
 703: CALL_OW 30
 707: PUSH
 708: LD_INT 1
 710: EQUAL
 711: IFFALSE 815
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 713: LD_ADDR_VAR 0 2
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 21
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 58
 740: PUSH
 741: EMPTY
 742: LIST
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: LIST
 748: PPUSH
 749: CALL_OW 69
 753: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_STRING Cyrus
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: CALL 4594 0 2
 769: ST_TO_ADDR
// if veh > 0 then
 770: LD_VAR 0 2
 774: PUSH
 775: LD_INT 0
 777: GREATER
 778: IFFALSE 800
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 780: LD_EXP 4
 784: PPUSH
 785: LD_VAR 0 2
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PPUSH
 794: CALL_OW 52
// end else
 798: GO 815
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 815: LD_STRING FrankIn06
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 30
 825: PUSH
 826: LD_INT 1
 828: EQUAL
 829: IFFALSE 933
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 21
 848: PUSH
 849: LD_INT 2
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 58
 858: PUSH
 859: EMPTY
 860: LIST
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: LIST
 866: PPUSH
 867: CALL_OW 69
 871: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 872: LD_ADDR_EXP 5
 876: PUSH
 877: LD_STRING Frank
 879: PPUSH
 880: LD_INT 1
 882: PPUSH
 883: CALL 4594 0 2
 887: ST_TO_ADDR
// if veh > 0 then
 888: LD_VAR 0 2
 892: PUSH
 893: LD_INT 0
 895: GREATER
 896: IFFALSE 918
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
 898: LD_EXP 5
 902: PPUSH
 903: LD_VAR 0 2
 907: PUSH
 908: LD_INT 1
 910: ARRAY
 911: PPUSH
 912: CALL_OW 52
// end else
 916: GO 933
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
 918: LD_EXP 5
 922: PPUSH
 923: LD_INT 2
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
 933: LD_STRING BrownIn06
 935: PPUSH
 936: LD_INT 0
 938: PPUSH
 939: CALL_OW 30
 943: PUSH
 944: LD_INT 1
 946: EQUAL
 947: IFFALSE 1051
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 949: LD_ADDR_VAR 0 2
 953: PUSH
 954: LD_INT 22
 956: PUSH
 957: LD_INT 1
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 21
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 58
 976: PUSH
 977: EMPTY
 978: LIST
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
 990: LD_ADDR_EXP 6
 994: PUSH
 995: LD_STRING Brown
 997: PPUSH
 998: LD_INT 1
1000: PPUSH
1001: CALL 4594 0 2
1005: ST_TO_ADDR
// if veh > 0 then
1006: LD_VAR 0 2
1010: PUSH
1011: LD_INT 0
1013: GREATER
1014: IFFALSE 1036
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1016: LD_EXP 6
1020: PPUSH
1021: LD_VAR 0 2
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 52
// end else
1034: GO 1051
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1036: LD_EXP 6
1040: PPUSH
1041: LD_INT 2
1043: PPUSH
1044: LD_INT 0
1046: PPUSH
1047: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1051: LD_STRING DonaldsonIn06
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: CALL_OW 30
1061: PUSH
1062: LD_INT 1
1064: EQUAL
1065: IFFALSE 1169
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 22
1074: PUSH
1075: LD_INT 1
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 21
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 58
1094: PUSH
1095: EMPTY
1096: LIST
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: PPUSH
1103: CALL_OW 69
1107: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1108: LD_ADDR_EXP 7
1112: PUSH
1113: LD_STRING Donaldson
1115: PPUSH
1116: LD_INT 1
1118: PPUSH
1119: CALL 4594 0 2
1123: ST_TO_ADDR
// if veh > 0 then
1124: LD_VAR 0 2
1128: PUSH
1129: LD_INT 0
1131: GREATER
1132: IFFALSE 1154
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1134: LD_EXP 7
1138: PPUSH
1139: LD_VAR 0 2
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 52
// end else
1152: GO 1169
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1154: LD_EXP 7
1158: PPUSH
1159: LD_INT 2
1161: PPUSH
1162: LD_INT 0
1164: PPUSH
1165: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1169: LD_STRING GladstoneIn06
1171: PPUSH
1172: LD_INT 0
1174: PPUSH
1175: CALL_OW 30
1179: PUSH
1180: LD_INT 1
1182: EQUAL
1183: IFFALSE 1287
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1185: LD_ADDR_VAR 0 2
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 21
1202: PUSH
1203: LD_INT 2
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: LD_INT 58
1212: PUSH
1213: EMPTY
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PPUSH
1221: CALL_OW 69
1225: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1226: LD_ADDR_EXP 8
1230: PUSH
1231: LD_STRING Gladstone
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL 4594 0 2
1241: ST_TO_ADDR
// if veh > 0 then
1242: LD_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: GREATER
1250: IFFALSE 1272
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1252: LD_EXP 8
1256: PPUSH
1257: LD_VAR 0 2
1261: PUSH
1262: LD_INT 1
1264: ARRAY
1265: PPUSH
1266: CALL_OW 52
// end else
1270: GO 1287
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1272: LD_EXP 8
1276: PPUSH
1277: LD_INT 2
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 49
// end ; end ; end ;
1287: LD_VAR 0 1
1291: RET
// export function PrepareVehicles ; var i , j , veh , vehicles ; begin
1292: LD_INT 0
1294: PPUSH
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1299: LD_ADDR_VAR 0 5
1303: PUSH
1304: LD_STRING 06_VehiclesIn06_1
1306: PPUSH
1307: EMPTY
1308: PPUSH
1309: CALL_OW 30
1313: ST_TO_ADDR
// uc_side = 1 ;
1314: LD_ADDR_OWVAR 20
1318: PUSH
1319: LD_INT 1
1321: ST_TO_ADDR
// if vehicles > 0 then
1322: LD_VAR 0 5
1326: PUSH
1327: LD_INT 0
1329: GREATER
1330: IFFALSE 1548
// begin for i := 1 to vehicles do
1332: LD_ADDR_VAR 0 2
1336: PUSH
1337: DOUBLE
1338: LD_INT 1
1340: DEC
1341: ST_TO_ADDR
1342: LD_VAR 0 5
1346: PUSH
1347: FOR_TO
1348: IFFALSE 1546
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1350: LD_ADDR_OWVAR 21
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_VAR 0 2
1364: ARRAY
1365: PUSH
1366: LD_INT 1
1368: ARRAY
1369: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1370: LD_ADDR_OWVAR 37
1374: PUSH
1375: LD_VAR 0 5
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: PUSH
1386: LD_INT 2
1388: ARRAY
1389: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1390: LD_ADDR_OWVAR 39
1394: PUSH
1395: LD_VAR 0 5
1399: PUSH
1400: LD_VAR 0 2
1404: ARRAY
1405: PUSH
1406: LD_INT 3
1408: ARRAY
1409: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1410: LD_ADDR_OWVAR 38
1414: PUSH
1415: LD_VAR 0 5
1419: PUSH
1420: LD_VAR 0 2
1424: ARRAY
1425: PUSH
1426: LD_INT 4
1428: ARRAY
1429: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1430: LD_ADDR_OWVAR 40
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: LD_VAR 0 2
1444: ARRAY
1445: PUSH
1446: LD_INT 5
1448: ARRAY
1449: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1450: LD_ADDR_OWVAR 41
1454: PUSH
1455: LD_INT 40
1457: ST_TO_ADDR
// veh = CreateVehicle ;
1458: LD_ADDR_VAR 0 4
1462: PUSH
1463: CALL_OW 45
1467: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1468: LD_VAR 0 4
1472: PPUSH
1473: LD_INT 3
1475: PPUSH
1476: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1480: LD_VAR 0 4
1484: PPUSH
1485: LD_INT 2
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL_OW 49
// if vc_weapon = us_cargo_bay then
1495: LD_OWVAR 40
1499: PUSH
1500: LD_INT 12
1502: EQUAL
1503: IFFALSE 1544
// AddCargo ( veh , vehicles [ i ] [ 6 ] , vehicles [ i ] [ 7 ] ) ;
1505: LD_VAR 0 4
1509: PPUSH
1510: LD_VAR 0 5
1514: PUSH
1515: LD_VAR 0 2
1519: ARRAY
1520: PUSH
1521: LD_INT 6
1523: ARRAY
1524: PPUSH
1525: LD_VAR 0 5
1529: PUSH
1530: LD_VAR 0 2
1534: ARRAY
1535: PUSH
1536: LD_INT 7
1538: ARRAY
1539: PPUSH
1540: CALL_OW 291
// end ;
1544: GO 1347
1546: POP
1547: POP
// end ; end ;
1548: LD_VAR 0 1
1552: RET
// export function PrepareOthers ; var i , veh ; begin
1553: LD_INT 0
1555: PPUSH
1556: PPUSH
1557: PPUSH
// uc_side = 1 ;
1558: LD_ADDR_OWVAR 20
1562: PUSH
1563: LD_INT 1
1565: ST_TO_ADDR
// uc_nation = 1 ;
1566: LD_ADDR_OWVAR 21
1570: PUSH
1571: LD_INT 1
1573: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1574: LD_ADDR_EXP 11
1578: PUSH
1579: LD_STRING OthersIn06
1581: PPUSH
1582: CALL_OW 31
1586: ST_TO_ADDR
// for i in others do
1587: LD_ADDR_VAR 0 2
1591: PUSH
1592: LD_EXP 11
1596: PUSH
1597: FOR_IN
1598: IFFALSE 1688
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1600: LD_ADDR_VAR 0 3
1604: PUSH
1605: LD_INT 22
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 21
1617: PUSH
1618: LD_INT 2
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 58
1627: PUSH
1628: EMPTY
1629: LIST
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: PPUSH
1636: CALL_OW 69
1640: ST_TO_ADDR
// if veh > 0 then
1641: LD_VAR 0 3
1645: PUSH
1646: LD_INT 0
1648: GREATER
1649: IFFALSE 1671
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1651: LD_VAR 0 2
1655: PPUSH
1656: LD_VAR 0 3
1660: PUSH
1661: LD_INT 1
1663: ARRAY
1664: PPUSH
1665: CALL_OW 52
// end else
1669: GO 1686
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
1671: LD_VAR 0 2
1675: PPUSH
1676: LD_INT 2
1678: PPUSH
1679: LD_INT 0
1681: PPUSH
1682: CALL_OW 49
// end ; end ;
1686: GO 1597
1688: POP
1689: POP
// end ;
1690: LD_VAR 0 1
1694: RET
// export function PreparePlayerApemans ; var i , veh ; begin
1695: LD_INT 0
1697: PPUSH
1698: PPUSH
1699: PPUSH
// uc_side = 1 ;
1700: LD_ADDR_OWVAR 20
1704: PUSH
1705: LD_INT 1
1707: ST_TO_ADDR
// uc_nation = 0 ;
1708: LD_ADDR_OWVAR 21
1712: PUSH
1713: LD_INT 0
1715: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
1716: LD_ADDR_EXP 12
1720: PUSH
1721: LD_STRING ApeIn06
1723: PPUSH
1724: CALL_OW 31
1728: ST_TO_ADDR
// for i in ape do
1729: LD_ADDR_VAR 0 2
1733: PUSH
1734: LD_EXP 12
1738: PUSH
1739: FOR_IN
1740: IFFALSE 1759
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
1742: LD_VAR 0 2
1746: PPUSH
1747: LD_INT 2
1749: PPUSH
1750: LD_INT 0
1752: PPUSH
1753: CALL_OW 49
1757: GO 1739
1759: POP
1760: POP
// end ;
1761: LD_VAR 0 1
1765: RET
// export function PrepareDenis ; begin
1766: LD_INT 0
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
1785: LD_ADDR_EXP 9
1789: PUSH
1790: LD_STRING Denis
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL 4594 0 2
1800: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
1801: LD_EXP 9
1805: PPUSH
1806: LD_INT 13
1808: PPUSH
1809: LD_INT 0
1811: PPUSH
1812: CALL_OW 49
// SetClass ( Denis , 4 ) ;
1816: LD_EXP 9
1820: PPUSH
1821: LD_INT 4
1823: PPUSH
1824: CALL_OW 336
// SetLives ( Denis , 750 ) ;
1828: LD_EXP 9
1832: PPUSH
1833: LD_INT 750
1835: PPUSH
1836: CALL_OW 234
// end ;
1840: LD_VAR 0 1
1844: RET
// export function HarrisonSupport ; var un , veh ; begin
1845: LD_INT 0
1847: PPUSH
1848: PPUSH
1849: PPUSH
// uc_side = 1 ;
1850: LD_ADDR_OWVAR 20
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// uc_nation = 1 ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_INT 1
1865: ST_TO_ADDR
// vc_engine = 1 ;
1866: LD_ADDR_OWVAR 39
1870: PUSH
1871: LD_INT 1
1873: ST_TO_ADDR
// vc_control = 1 ;
1874: LD_ADDR_OWVAR 38
1878: PUSH
1879: LD_INT 1
1881: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
1882: LD_ADDR_OWVAR 40
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 4
1892: PUSH
1893: LD_INT 2
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_OWVAR 67
1905: ARRAY
1906: ST_TO_ADDR
// vc_chassis = 2 ;
1907: LD_ADDR_OWVAR 37
1911: PUSH
1912: LD_INT 2
1914: ST_TO_ADDR
// veh = CreateVehicle ;
1915: LD_ADDR_VAR 0 3
1919: PUSH
1920: CALL_OW 45
1924: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1925: LD_VAR 0 3
1929: PPUSH
1930: LD_INT 2
1932: PPUSH
1933: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
1937: LD_VAR 0 3
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: CALL_OW 49
// hc_class := 2 ;
1952: LD_ADDR_OWVAR 28
1956: PUSH
1957: LD_INT 2
1959: ST_TO_ADDR
// hc_sex := sex_male ;
1960: LD_ADDR_OWVAR 27
1964: PUSH
1965: LD_INT 1
1967: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1968: LD_ADDR_OWVAR 33
1972: PUSH
1973: LD_STRING SecondCharsGal
1975: ST_TO_ADDR
// hc_face_number := 52 ;
1976: LD_ADDR_OWVAR 34
1980: PUSH
1981: LD_INT 52
1983: ST_TO_ADDR
// hc_name := Craig Brown ;
1984: LD_ADDR_OWVAR 26
1988: PUSH
1989: LD_STRING Craig Brown
1991: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
1992: LD_ADDR_OWVAR 31
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2015: LD_ADDR_EXP 16
2019: PUSH
2020: CALL_OW 44
2024: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2025: LD_EXP 16
2029: PPUSH
2030: LD_VAR 0 3
2034: PPUSH
2035: CALL_OW 52
// vc_engine = 1 ;
2039: LD_ADDR_OWVAR 39
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// vc_control = 1 ;
2047: LD_ADDR_OWVAR 38
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2055: LD_ADDR_OWVAR 40
2059: PUSH
2060: LD_INT 4
2062: PUSH
2063: LD_INT 2
2065: PUSH
2066: LD_INT 2
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: PUSH
2074: LD_OWVAR 67
2078: ARRAY
2079: ST_TO_ADDR
// vc_chassis = 2 ;
2080: LD_ADDR_OWVAR 37
2084: PUSH
2085: LD_INT 2
2087: ST_TO_ADDR
// veh = CreateVehicle ;
2088: LD_ADDR_VAR 0 3
2092: PUSH
2093: CALL_OW 45
2097: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2098: LD_VAR 0 3
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2125: LD_VAR 0 3
2129: PPUSH
2130: LD_INT 50
2132: PPUSH
2133: CALL_OW 240
// hc_class := 1 ;
2137: LD_ADDR_OWVAR 28
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// hc_sex := sex_female ;
2145: LD_ADDR_OWVAR 27
2149: PUSH
2150: LD_INT 2
2152: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2153: LD_ADDR_OWVAR 33
2157: PUSH
2158: LD_STRING SecondCharsGal
2160: ST_TO_ADDR
// hc_face_number := 45 ;
2161: LD_ADDR_OWVAR 34
2165: PUSH
2166: LD_INT 45
2168: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2169: LD_ADDR_OWVAR 26
2173: PUSH
2174: LD_STRING Ingrid Jonsson
2176: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 0 ] ;
2177: LD_ADDR_OWVAR 31
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: LD_INT 3
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 0
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2200: LD_ADDR_EXP 17
2204: PUSH
2205: CALL_OW 44
2209: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2210: LD_EXP 17
2214: PPUSH
2215: LD_VAR 0 3
2219: PPUSH
2220: CALL_OW 52
// SetFuel ( veh , 45 ) ;
2224: LD_VAR 0 3
2228: PPUSH
2229: LD_INT 45
2231: PPUSH
2232: CALL_OW 240
// end ;
2236: LD_VAR 0 1
2240: RET
// export function PrepareJoan ; var tmp , rnd ; begin
2241: LD_INT 0
2243: PPUSH
2244: PPUSH
2245: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
2246: LD_ADDR_VAR 0 2
2250: PUSH
2251: LD_INT 22
2253: PUSH
2254: LD_INT 1
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 21
2263: PUSH
2264: LD_INT 1
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 26
2273: PUSH
2274: LD_INT 1
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 2
2283: PUSH
2284: LD_INT 25
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 25
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 25
2306: PUSH
2307: LD_INT 3
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: LD_INT 25
2316: PUSH
2317: LD_INT 4
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: PPUSH
2337: CALL_OW 69
2341: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
2342: LD_ADDR_VAR 0 3
2346: PUSH
2347: LD_INT 1
2349: PPUSH
2350: LD_VAR 0 2
2354: PPUSH
2355: CALL_OW 12
2359: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
2360: LD_INT 105
2362: PPUSH
2363: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , tmp [ rnd ] , 30 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , JMM , 30 ] ] ) ;
2367: LD_INT 22
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: PUSH
2377: LD_INT 2
2379: PUSH
2380: LD_INT 21
2382: PUSH
2383: LD_INT 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 21
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 21
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 59
2412: PUSH
2413: EMPTY
2414: LIST
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 91
2425: PUSH
2426: LD_VAR 0 2
2430: PUSH
2431: LD_VAR 0 3
2435: ARRAY
2436: PUSH
2437: LD_INT 30
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: LIST
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL_OW 69
2454: NOT
2455: PUSH
2456: LD_INT 22
2458: PUSH
2459: LD_INT 3
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 2
2468: PUSH
2469: LD_INT 21
2471: PUSH
2472: LD_INT 1
2474: PUSH
2475: EMPTY
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 21
2481: PUSH
2482: LD_INT 2
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PUSH
2489: LD_INT 21
2491: PUSH
2492: LD_INT 3
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: PUSH
2499: LD_INT 59
2501: PUSH
2502: EMPTY
2503: LIST
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: LD_INT 91
2514: PUSH
2515: LD_EXP 1
2519: PUSH
2520: LD_INT 30
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 69
2537: NOT
2538: AND
2539: IFFALSE 2360
// blockSpawn = 1 ;
2541: LD_ADDR_EXP 28
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// uc_side = 4 ;
2549: LD_ADDR_OWVAR 20
2553: PUSH
2554: LD_INT 4
2556: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2557: LD_ADDR_EXP 14
2561: PUSH
2562: LD_STRING Joan
2564: PPUSH
2565: LD_INT 0
2567: PPUSH
2568: CALL 4594 0 2
2572: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
2573: LD_EXP 14
2577: PPUSH
2578: LD_VAR 0 2
2582: PUSH
2583: LD_VAR 0 3
2587: ARRAY
2588: PPUSH
2589: CALL_OW 250
2593: PPUSH
2594: LD_VAR 0 2
2598: PUSH
2599: LD_VAR 0 3
2603: ARRAY
2604: PPUSH
2605: CALL_OW 251
2609: PPUSH
2610: LD_INT 5
2612: PPUSH
2613: LD_INT 1
2615: PPUSH
2616: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2620: LD_EXP 14
2624: PPUSH
2625: LD_INT 250
2627: PPUSH
2628: CALL_OW 234
// InGameOn ;
2632: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2636: LD_EXP 14
2640: PPUSH
2641: CALL_OW 87
// wait ( 0 0$2 ) ;
2645: LD_INT 70
2647: PPUSH
2648: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
2652: LD_VAR 0 2
2656: PUSH
2657: LD_VAR 0 3
2661: ARRAY
2662: PPUSH
2663: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
2667: LD_VAR 0 2
2671: PUSH
2672: LD_VAR 0 3
2676: ARRAY
2677: PPUSH
2678: CALL_OW 122
// wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// ComMoveUnit ( tmp [ rnd ] , Joan ) ;
2689: LD_VAR 0 2
2693: PUSH
2694: LD_VAR 0 3
2698: ARRAY
2699: PPUSH
2700: LD_EXP 14
2704: PPUSH
2705: CALL_OW 112
// wait ( 0 0$2 ) ;
2709: LD_INT 70
2711: PPUSH
2712: CALL_OW 67
// DialogueOn ;
2716: CALL_OW 6
// if tmp [ rnd ] = JMM then
2720: LD_VAR 0 2
2724: PUSH
2725: LD_VAR 0 3
2729: ARRAY
2730: PUSH
2731: LD_EXP 1
2735: EQUAL
2736: IFFALSE 2863
// begin Say ( JMM , D5b-JMM-1 ) ;
2738: LD_EXP 1
2742: PPUSH
2743: LD_STRING D5b-JMM-1
2745: PPUSH
2746: CALL_OW 88
// DialogueOff ;
2750: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2754: LD_EXP 14
2758: PPUSH
2759: LD_INT 500
2761: PPUSH
2762: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
2766: LD_EXP 14
2770: PPUSH
2771: LD_EXP 1
2775: PPUSH
2776: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
2780: LD_EXP 1
2784: PPUSH
2785: LD_EXP 14
2789: PPUSH
2790: CALL_OW 119
// wait ( 0 0$1 ) ;
2794: LD_INT 35
2796: PPUSH
2797: CALL_OW 67
// Say ( Joan , D5b-Joan-1 ) ;
2801: LD_EXP 14
2805: PPUSH
2806: LD_STRING D5b-Joan-1
2808: PPUSH
2809: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
2813: LD_EXP 1
2817: PPUSH
2818: LD_STRING D5b-JMM-2
2820: PPUSH
2821: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
2825: LD_EXP 14
2829: PPUSH
2830: LD_STRING D5b-Joan-2
2832: PPUSH
2833: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
2837: LD_EXP 1
2841: PPUSH
2842: LD_STRING D5b-JMM-3
2844: PPUSH
2845: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
2849: LD_EXP 14
2853: PPUSH
2854: LD_STRING D5b-Joan-3
2856: PPUSH
2857: CALL_OW 88
// end else
2861: GO 3203
// begin Say ( tmp [ rnd ] , D5a-Sol1-1 ) ;
2863: LD_VAR 0 2
2867: PUSH
2868: LD_VAR 0 3
2872: ARRAY
2873: PPUSH
2874: LD_STRING D5a-Sol1-1
2876: PPUSH
2877: CALL_OW 88
// DialogueOff ;
2881: CALL_OW 7
// SetLives ( Joan , 500 ) ;
2885: LD_EXP 14
2889: PPUSH
2890: LD_INT 500
2892: PPUSH
2893: CALL_OW 234
// ComTurnUnit ( Joan , tmp [ rnd ] ) ;
2897: LD_EXP 14
2901: PPUSH
2902: LD_VAR 0 2
2906: PUSH
2907: LD_VAR 0 3
2911: ARRAY
2912: PPUSH
2913: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Joan ) ;
2917: LD_VAR 0 2
2921: PUSH
2922: LD_VAR 0 3
2926: ARRAY
2927: PPUSH
2928: LD_EXP 14
2932: PPUSH
2933: CALL_OW 119
// wait ( 0 0$1 ) ;
2937: LD_INT 35
2939: PPUSH
2940: CALL_OW 67
// Say ( Joan , D5a-Joan-1 ) ;
2944: LD_EXP 14
2948: PPUSH
2949: LD_STRING D5a-Joan-1
2951: PPUSH
2952: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-2 ) ;
2956: LD_VAR 0 2
2960: PUSH
2961: LD_VAR 0 3
2965: ARRAY
2966: PPUSH
2967: LD_STRING D5a-Sol1-2
2969: PPUSH
2970: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
2974: LD_EXP 14
2978: PPUSH
2979: LD_STRING D5a-Joan-2
2981: PPUSH
2982: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-3 ) ;
2986: LD_VAR 0 2
2990: PUSH
2991: LD_VAR 0 3
2995: ARRAY
2996: PPUSH
2997: LD_STRING D5a-Sol1-3
2999: PPUSH
3000: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3004: LD_EXP 14
3008: PPUSH
3009: LD_STRING D5a-Joan-3
3011: PPUSH
3012: CALL_OW 88
// Say ( tmp [ rnd ] , D5a-Sol1-4 ) ;
3016: LD_VAR 0 2
3020: PUSH
3021: LD_VAR 0 3
3025: ARRAY
3026: PPUSH
3027: LD_STRING D5a-Sol1-4
3029: PPUSH
3030: CALL_OW 88
// ComExitVehicle ( JMM ) ;
3034: LD_EXP 1
3038: PPUSH
3039: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3043: LD_EXP 1
3047: PPUSH
3048: CALL_OW 122
// wait ( 0 0$1 ) ;
3052: LD_INT 35
3054: PPUSH
3055: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3059: LD_INT 35
3061: PPUSH
3062: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp [ rnd ] ] , JMM ) ;
3066: LD_EXP 14
3070: PUSH
3071: LD_VAR 0 2
3075: PUSH
3076: LD_VAR 0 3
3080: ARRAY
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PPUSH
3086: LD_EXP 1
3090: PPUSH
3091: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3095: LD_EXP 14
3099: PPUSH
3100: LD_EXP 1
3104: PPUSH
3105: CALL_OW 296
3109: PUSH
3110: LD_INT 5
3112: LESS
3113: IFFALSE 3059
// ComTurnUnit ( Joan , JMM ) ;
3115: LD_EXP 14
3119: PPUSH
3120: LD_EXP 1
3124: PPUSH
3125: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3129: LD_EXP 1
3133: PPUSH
3134: LD_EXP 14
3138: PPUSH
3139: CALL_OW 119
// Say ( Joan , D5a-Joan-4 ) ;
3143: LD_EXP 14
3147: PPUSH
3148: LD_STRING D5a-Joan-4
3150: PPUSH
3151: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3155: LD_EXP 1
3159: PPUSH
3160: LD_STRING D5a-JMM-4
3162: PPUSH
3163: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3167: LD_EXP 14
3171: PPUSH
3172: LD_STRING D5a-Joan-5
3174: PPUSH
3175: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3179: LD_EXP 1
3183: PPUSH
3184: LD_STRING D5a-JMM-5
3186: PPUSH
3187: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3191: LD_EXP 14
3195: PPUSH
3196: LD_STRING D5a-Joan-6
3198: PPUSH
3199: CALL_OW 88
// end ; Say ( JMM , D6-JMM-1 ) ;
3203: LD_EXP 1
3207: PPUSH
3208: LD_STRING D6-JMM-1
3210: PPUSH
3211: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3215: LD_EXP 14
3219: PPUSH
3220: LD_STRING D6-Joan-1
3222: PPUSH
3223: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3227: LD_EXP 1
3231: PPUSH
3232: LD_STRING D6-JMM-2
3234: PPUSH
3235: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3239: LD_EXP 14
3243: PPUSH
3244: LD_STRING D6-Joan-2
3246: PPUSH
3247: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3251: LD_EXP 1
3255: PPUSH
3256: LD_STRING D6-JMM-3
3258: PPUSH
3259: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3263: LD_EXP 14
3267: PPUSH
3268: LD_STRING D6-Joan-3
3270: PPUSH
3271: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3275: LD_EXP 1
3279: PPUSH
3280: LD_STRING D6-JMM-4
3282: PPUSH
3283: CALL_OW 88
// DialogueOff ;
3287: CALL_OW 7
// InGameOff ;
3291: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3295: LD_EXP 14
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3307: LD_STRING MJ
3309: PPUSH
3310: CALL_OW 337
// JoanStatus = 1 ;
3314: LD_ADDR_EXP 15
3318: PUSH
3319: LD_INT 1
3321: ST_TO_ADDR
// blockSpawn = 0 ;
3322: LD_ADDR_EXP 28
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// end ;
3330: LD_VAR 0 1
3334: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3335: LD_INT 0
3337: PPUSH
3338: PPUSH
// repeat wait ( 0 0$3 ) ;
3339: LD_INT 105
3341: PPUSH
3342: CALL_OW 67
// until blockSpawn = 0 ;
3346: LD_EXP 28
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3339
// uc_side = 1 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 1
3363: ST_TO_ADDR
// uc_nation = 1 ;
3364: LD_ADDR_OWVAR 21
3368: PUSH
3369: LD_INT 1
3371: ST_TO_ADDR
// if number = 1 then
3372: LD_VAR 0 1
3376: PUSH
3377: LD_INT 1
3379: EQUAL
3380: IFFALSE 3518
// begin hc_class := 1 ;
3382: LD_ADDR_OWVAR 28
3386: PUSH
3387: LD_INT 1
3389: ST_TO_ADDR
// hc_sex := sex_male ;
3390: LD_ADDR_OWVAR 27
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3398: LD_ADDR_OWVAR 33
3402: PUSH
3403: LD_STRING AmGalRemake
3405: ST_TO_ADDR
// hc_face_number := 7 ;
3406: LD_ADDR_OWVAR 34
3410: PUSH
3411: LD_INT 7
3413: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3414: LD_ADDR_OWVAR 26
3418: PUSH
3419: LD_STRING Bobby Jordan
3421: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3422: LD_ADDR_OWVAR 31
3426: PUSH
3427: LD_INT 2
3429: PUSH
3430: LD_INT 1
3432: PUSH
3433: LD_INT 1
3435: PUSH
3436: LD_INT 1
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: ST_TO_ADDR
// un = CreateHuman ;
3445: LD_ADDR_VAR 0 3
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: LD_INT 12
3462: PPUSH
3463: LD_INT 1
3465: PPUSH
3466: CALL_OW 49
// wait ( 0 0$1 ) ;
3470: LD_INT 35
3472: PPUSH
3473: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3477: LD_VAR 0 3
3481: PPUSH
3482: CALL_OW 87
// DialogueOn ;
3486: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3490: LD_VAR 0 3
3494: PPUSH
3495: LD_STRING D11b-Sol3-1
3497: PPUSH
3498: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3502: LD_EXP 1
3506: PPUSH
3507: LD_STRING D11b-JMM-1
3509: PPUSH
3510: CALL_OW 88
// DialogueOff ;
3514: CALL_OW 7
// end ; if number = 2 then
3518: LD_VAR 0 1
3522: PUSH
3523: LD_INT 2
3525: EQUAL
3526: IFFALSE 3664
// begin hc_class := 3 ;
3528: LD_ADDR_OWVAR 28
3532: PUSH
3533: LD_INT 3
3535: ST_TO_ADDR
// hc_sex := sex_male ;
3536: LD_ADDR_OWVAR 27
3540: PUSH
3541: LD_INT 1
3543: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3544: LD_ADDR_OWVAR 33
3548: PUSH
3549: LD_STRING SecondCharsGal
3551: ST_TO_ADDR
// hc_face_number := 55 ;
3552: LD_ADDR_OWVAR 34
3556: PUSH
3557: LD_INT 55
3559: ST_TO_ADDR
// hc_name := George McCarthy ;
3560: LD_ADDR_OWVAR 26
3564: PUSH
3565: LD_STRING George McCarthy
3567: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
3568: LD_ADDR_OWVAR 31
3572: PUSH
3573: LD_INT 1
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 3
3581: PUSH
3582: LD_INT 1
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: ST_TO_ADDR
// un = CreateHuman ;
3591: LD_ADDR_VAR 0 3
3595: PUSH
3596: CALL_OW 44
3600: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_INT 12
3608: PPUSH
3609: LD_INT 1
3611: PPUSH
3612: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3616: LD_VAR 0 3
3620: PPUSH
3621: CALL_OW 87
// wait ( 0 0$1 ) ;
3625: LD_INT 35
3627: PPUSH
3628: CALL_OW 67
// DialogueOn ;
3632: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_STRING D11d-Sol4-1
3643: PPUSH
3644: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
3648: LD_EXP 1
3652: PPUSH
3653: LD_STRING D11d-JMM-1
3655: PPUSH
3656: CALL_OW 88
// DialogueOff ;
3660: CALL_OW 7
// end ; if number = 4 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 4
3671: EQUAL
3672: IFFALSE 3798
// begin hc_class := 3 ;
3674: LD_ADDR_OWVAR 28
3678: PUSH
3679: LD_INT 3
3681: ST_TO_ADDR
// hc_sex := sex_female ;
3682: LD_ADDR_OWVAR 27
3686: PUSH
3687: LD_INT 2
3689: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3690: LD_ADDR_OWVAR 33
3694: PUSH
3695: LD_STRING SecondCharsGal
3697: ST_TO_ADDR
// hc_face_number := 46 ;
3698: LD_ADDR_OWVAR 34
3702: PUSH
3703: LD_INT 46
3705: ST_TO_ADDR
// hc_name := Sylvia Creak ;
3706: LD_ADDR_OWVAR 26
3710: PUSH
3711: LD_STRING Sylvia Creak
3713: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
3714: LD_ADDR_OWVAR 31
3718: PUSH
3719: LD_INT 1
3721: PUSH
3722: LD_INT 3
3724: PUSH
3725: LD_INT 1
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: ST_TO_ADDR
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 12
3754: PPUSH
3755: LD_INT 1
3757: PPUSH
3758: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3762: LD_VAR 0 3
3766: PPUSH
3767: CALL_OW 87
// wait ( 0 0$1 ) ;
3771: LD_INT 35
3773: PPUSH
3774: CALL_OW 67
// DialogueOn ;
3778: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
3782: LD_VAR 0 3
3786: PPUSH
3787: LD_STRING D11e-FSol4-1
3789: PPUSH
3790: CALL_OW 88
// DialogueOff ;
3794: CALL_OW 7
// end ; if number = 5 then
3798: LD_VAR 0 1
3802: PUSH
3803: LD_INT 5
3805: EQUAL
3806: IFFALSE 3944
// begin hc_class := 1 ;
3808: LD_ADDR_OWVAR 28
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// hc_sex := sex_female ;
3816: LD_ADDR_OWVAR 27
3820: PUSH
3821: LD_INT 2
3823: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3824: LD_ADDR_OWVAR 33
3828: PUSH
3829: LD_STRING SecondCharsGal
3831: ST_TO_ADDR
// hc_face_number := 37 ;
3832: LD_ADDR_OWVAR 34
3836: PUSH
3837: LD_INT 37
3839: ST_TO_ADDR
// hc_name := Margherite Simpson ;
3840: LD_ADDR_OWVAR 26
3844: PUSH
3845: LD_STRING Margherite Simpson
3847: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
3848: LD_ADDR_OWVAR 31
3852: PUSH
3853: LD_INT 1
3855: PUSH
3856: LD_INT 1
3858: PUSH
3859: LD_INT 1
3861: PUSH
3862: LD_INT 1
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: ST_TO_ADDR
// un = CreateHuman ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: CALL_OW 44
3880: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3881: LD_VAR 0 3
3885: PPUSH
3886: LD_INT 12
3888: PPUSH
3889: LD_INT 1
3891: PPUSH
3892: CALL_OW 49
// CenterNowOnUnits ( un ) ;
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 87
// wait ( 0 0$1 ) ;
3905: LD_INT 35
3907: PPUSH
3908: CALL_OW 67
// DialogueOn ;
3912: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_STRING D11c-FSol3-1
3923: PPUSH
3924: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
3928: LD_EXP 1
3932: PPUSH
3933: LD_STRING D11c-JMM-1
3935: PPUSH
3936: CALL_OW 88
// DialogueOff ;
3940: CALL_OW 7
// end ; if number = 6 then
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 6
3951: EQUAL
3952: IFFALSE 4078
// begin hc_class := 1 ;
3954: LD_ADDR_OWVAR 28
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// hc_sex := sex_male ;
3962: LD_ADDR_OWVAR 27
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3970: LD_ADDR_OWVAR 33
3974: PUSH
3975: LD_STRING AmGalRemake
3977: ST_TO_ADDR
// hc_face_number := 1 ;
3978: LD_ADDR_OWVAR 34
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// hc_name := Charles Brown ;
3986: LD_ADDR_OWVAR 26
3990: PUSH
3991: LD_STRING Charles Brown
3993: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 0 , 1 ] ;
3994: LD_ADDR_OWVAR 31
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: LD_INT 0
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: ST_TO_ADDR
// un = CreateHuman ;
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: CALL_OW 44
4026: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4027: LD_VAR 0 3
4031: PPUSH
4032: LD_INT 12
4034: PPUSH
4035: LD_INT 1
4037: PPUSH
4038: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4042: LD_VAR 0 3
4046: PPUSH
4047: CALL_OW 87
// wait ( 0 0$1 ) ;
4051: LD_INT 35
4053: PPUSH
4054: CALL_OW 67
// DialogueOn ;
4058: CALL_OW 6
// Say ( un , D11f-Sol5-1 ) ;
4062: LD_VAR 0 3
4066: PPUSH
4067: LD_STRING D11f-Sol5-1
4069: PPUSH
4070: CALL_OW 88
// DialogueOff ;
4074: CALL_OW 7
// end ; if number = 7 then
4078: LD_VAR 0 1
4082: PUSH
4083: LD_INT 7
4085: EQUAL
4086: IFFALSE 4212
// begin hc_class := 1 ;
4088: LD_ADDR_OWVAR 28
4092: PUSH
4093: LD_INT 1
4095: ST_TO_ADDR
// hc_sex := sex_female ;
4096: LD_ADDR_OWVAR 27
4100: PUSH
4101: LD_INT 2
4103: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4104: LD_ADDR_OWVAR 33
4108: PUSH
4109: LD_STRING AmGalRemake
4111: ST_TO_ADDR
// hc_face_number := 2 ;
4112: LD_ADDR_OWVAR 34
4116: PUSH
4117: LD_INT 2
4119: ST_TO_ADDR
// hc_name := Johanna Holland ;
4120: LD_ADDR_OWVAR 26
4124: PUSH
4125: LD_STRING Johanna Holland
4127: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 0 ] ;
4128: LD_ADDR_OWVAR 31
4132: PUSH
4133: LD_INT 1
4135: PUSH
4136: LD_INT 0
4138: PUSH
4139: LD_INT 0
4141: PUSH
4142: LD_INT 0
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: ST_TO_ADDR
// un = CreateHuman ;
4151: LD_ADDR_VAR 0 3
4155: PUSH
4156: CALL_OW 44
4160: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4161: LD_VAR 0 3
4165: PPUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 1
4171: PPUSH
4172: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4176: LD_VAR 0 3
4180: PPUSH
4181: CALL_OW 87
// wait ( 0 0$1 ) ;
4185: LD_INT 35
4187: PPUSH
4188: CALL_OW 67
// DialogueOn ;
4192: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4196: LD_VAR 0 3
4200: PPUSH
4201: LD_STRING D11a-FSol2-1
4203: PPUSH
4204: CALL_OW 88
// DialogueOff ;
4208: CALL_OW 7
// end ; end ; end_of_file
4212: LD_VAR 0 2
4216: RET
// export function PrepareRussian ; var i ; begin
4217: LD_INT 0
4219: PPUSH
4220: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4221: LD_INT 3
4223: PPUSH
4224: LD_INT 3
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: LD_EXP 33
4234: PPUSH
4235: LD_EXP 34
4239: PPUSH
4240: CALL_OW 12
4244: PPUSH
4245: LD_INT 2
4247: PPUSH
4248: LD_INT 4
4250: PPUSH
4251: CALL 4864 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4255: LD_INT 3
4257: PPUSH
4258: LD_INT 3
4260: PPUSH
4261: LD_INT 8
4263: PPUSH
4264: LD_EXP 33
4268: PPUSH
4269: LD_EXP 34
4273: PPUSH
4274: CALL_OW 12
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_INT 4
4284: PPUSH
4285: CALL 4864 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4289: LD_INT 3
4291: PPUSH
4292: LD_INT 3
4294: PPUSH
4295: LD_INT 67
4297: PPUSH
4298: LD_EXP 33
4302: PPUSH
4303: LD_EXP 34
4307: PPUSH
4308: CALL_OW 12
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: LD_INT 2
4318: PPUSH
4319: CALL 4864 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4323: LD_INT 3
4325: PPUSH
4326: LD_INT 3
4328: PPUSH
4329: LD_INT 21
4331: PPUSH
4332: LD_EXP 33
4336: PPUSH
4337: LD_EXP 34
4341: PPUSH
4342: CALL_OW 12
4346: PPUSH
4347: LD_INT 3
4349: PPUSH
4350: LD_INT 6
4352: PPUSH
4353: CALL 4864 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4357: LD_INT 3
4359: PPUSH
4360: LD_INT 3
4362: PPUSH
4363: LD_INT 17
4365: PPUSH
4366: LD_EXP 33
4370: PPUSH
4371: LD_EXP 34
4375: PPUSH
4376: CALL_OW 12
4380: PPUSH
4381: LD_INT 3
4383: PPUSH
4384: LD_INT 6
4386: PPUSH
4387: CALL 4864 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4391: LD_INT 3
4393: PPUSH
4394: LD_INT 3
4396: PPUSH
4397: LD_INT 32
4399: PPUSH
4400: LD_EXP 33
4404: PPUSH
4405: LD_EXP 34
4409: PPUSH
4410: CALL_OW 12
4414: PPUSH
4415: LD_INT 4
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL 4864 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
4425: LD_ADDR_VAR 0 2
4429: PUSH
4430: LD_INT 22
4432: PUSH
4433: LD_INT 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 21
4442: PUSH
4443: LD_INT 3
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: LD_INT 30
4452: PUSH
4453: LD_INT 32
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: PPUSH
4465: CALL_OW 69
4469: PUSH
4470: FOR_IN
4471: IFFALSE 4511
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
4473: LD_INT 3
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_VAR 0 2
4483: PPUSH
4484: LD_EXP 33
4488: PPUSH
4489: LD_EXP 34
4493: PPUSH
4494: CALL_OW 12
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 1
4504: PPUSH
4505: CALL 4864 0 6
4509: GO 4470
4511: POP
4512: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
4513: LD_ADDR_VAR 0 2
4517: PUSH
4518: LD_INT 22
4520: PUSH
4521: LD_INT 3
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 3
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: LD_INT 30
4540: PUSH
4541: LD_INT 31
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: PPUSH
4553: CALL_OW 69
4557: PUSH
4558: FOR_IN
4559: IFFALSE 4587
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
4561: LD_EXP 33
4565: PPUSH
4566: LD_EXP 34
4570: PPUSH
4571: CALL_OW 12
4575: PPUSH
4576: LD_VAR 0 2
4580: PPUSH
4581: CALL 4974 0 2
4585: GO 4558
4587: POP
4588: POP
// end ; end_of_file
4589: LD_VAR 0 1
4593: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
// if exist_mode then
4598: LD_VAR 0 2
4602: IFFALSE 4627
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
4604: LD_ADDR_VAR 0 4
4608: PUSH
4609: LD_EXP 39
4613: PUSH
4614: LD_VAR 0 1
4618: STR
4619: PPUSH
4620: CALL_OW 34
4624: ST_TO_ADDR
// end else
4625: GO 4642
// begin unit := NewCharacter ( ident ) ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: CALL_OW 25
4641: ST_TO_ADDR
// end ; result := unit ;
4642: LD_ADDR_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ST_TO_ADDR
// end ;
4652: LD_VAR 0 3
4656: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// rnd = rand ( 1 , characters ) ;
4662: LD_ADDR_VAR 0 6
4666: PUSH
4667: LD_INT 1
4669: PPUSH
4670: LD_VAR 0 1
4674: PPUSH
4675: CALL_OW 12
4679: ST_TO_ADDR
// for i = 1 to characters do
4680: LD_ADDR_VAR 0 5
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_VAR 0 1
4694: PUSH
4695: FOR_TO
4696: IFFALSE 4806
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4698: LD_VAR 0 5
4702: PUSH
4703: LD_VAR 0 6
4707: EQUAL
4708: PUSH
4709: LD_VAR 0 1
4713: PUSH
4714: LD_VAR 0 5
4718: ARRAY
4719: PPUSH
4720: CALL_OW 258
4724: PUSH
4725: LD_INT 1
4727: EQUAL
4728: AND
4729: IFFALSE 4751
// Say ( characters [ i ] , dialogMID ) ;
4731: LD_VAR 0 1
4735: PUSH
4736: LD_VAR 0 5
4740: ARRAY
4741: PPUSH
4742: LD_VAR 0 2
4746: PPUSH
4747: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4751: LD_VAR 0 5
4755: PUSH
4756: LD_VAR 0 6
4760: EQUAL
4761: PUSH
4762: LD_VAR 0 1
4766: PUSH
4767: LD_VAR 0 5
4771: ARRAY
4772: PPUSH
4773: CALL_OW 258
4777: PUSH
4778: LD_INT 2
4780: EQUAL
4781: AND
4782: IFFALSE 4804
// Say ( characters [ i ] , dialogFID ) ;
4784: LD_VAR 0 1
4788: PUSH
4789: LD_VAR 0 5
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 3
4799: PPUSH
4800: CALL_OW 88
// end ;
4804: GO 4695
4806: POP
4807: POP
// end ;
4808: LD_VAR 0 4
4812: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
4813: LD_INT 0
4815: PPUSH
4816: PPUSH
// for i in charactersList do
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_VAR 0 1
4826: PUSH
4827: FOR_IN
4828: IFFALSE 4857
// begin if IsOk ( i ) then
4830: LD_VAR 0 4
4834: PPUSH
4835: CALL_OW 302
4839: IFFALSE 4855
// SaveCharacters ( i , ident ) ;
4841: LD_VAR 0 4
4845: PPUSH
4846: LD_VAR 0 2
4850: PPUSH
4851: CALL_OW 38
// end ;
4855: GO 4827
4857: POP
4858: POP
// end ;
4859: LD_VAR 0 3
4863: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
4864: LD_INT 0
4866: PPUSH
4867: PPUSH
4868: PPUSH
4869: PPUSH
// for i = 1 to count do
4870: LD_ADDR_VAR 0 8
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_VAR 0 6
4884: PUSH
4885: FOR_TO
4886: IFFALSE 4967
// begin uc_side = side ;
4888: LD_ADDR_OWVAR 20
4892: PUSH
4893: LD_VAR 0 1
4897: ST_TO_ADDR
// uc_nation = nation ;
4898: LD_ADDR_OWVAR 21
4902: PUSH
4903: LD_VAR 0 2
4907: ST_TO_ADDR
// hc_gallery =  ;
4908: LD_ADDR_OWVAR 33
4912: PUSH
4913: LD_STRING 
4915: ST_TO_ADDR
// hc_name =  ;
4916: LD_ADDR_OWVAR 26
4920: PUSH
4921: LD_STRING 
4923: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_VAR 0 5
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 380
// un = CreateHuman ;
4941: LD_ADDR_VAR 0 10
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
4951: LD_VAR 0 10
4955: PPUSH
4956: LD_VAR 0 3
4960: PPUSH
4961: CALL_OW 52
// end ;
4965: GO 4885
4967: POP
4968: POP
// end ;
4969: LD_VAR 0 7
4973: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4974: LD_INT 0
4976: PPUSH
4977: PPUSH
4978: PPUSH
// uc_side := GetSide ( b ) ;
4979: LD_ADDR_OWVAR 20
4983: PUSH
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 255
4993: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4994: LD_ADDR_OWVAR 21
4998: PUSH
4999: LD_VAR 0 2
5003: PPUSH
5004: CALL_OW 248
5008: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_VAR 0 1
5019: PPUSH
5020: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: LD_VAR 0 2
5033: PPUSH
5034: CALL_OW 254
5038: PUSH
5039: LD_INT 3
5041: MINUS
5042: ST_TO_ADDR
// if dir < 0 then
5043: LD_VAR 0 5
5047: PUSH
5048: LD_INT 0
5050: LESS
5051: IFFALSE 5067
// dir := 6 + dir ;
5053: LD_ADDR_VAR 0 5
5057: PUSH
5058: LD_INT 6
5060: PUSH
5061: LD_VAR 0 5
5065: PLUS
5066: ST_TO_ADDR
// un := CreateHuman ;
5067: LD_ADDR_VAR 0 4
5071: PUSH
5072: CALL_OW 44
5076: ST_TO_ADDR
// SetDir ( un , dir ) ;
5077: LD_VAR 0 4
5081: PPUSH
5082: LD_VAR 0 5
5086: PPUSH
5087: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5091: LD_VAR 0 4
5095: PPUSH
5096: LD_VAR 0 2
5100: PPUSH
5101: CALL_OW 52
// end ;
5105: LD_VAR 0 3
5109: RET
// export function PrepareDifficulty ; begin
5110: LD_INT 0
5112: PPUSH
// if Difficulty = 1 then
5113: LD_OWVAR 67
5117: PUSH
5118: LD_INT 1
5120: EQUAL
5121: IFFALSE 5139
// begin RuSolMinLevel = 2 ;
5123: LD_ADDR_EXP 33
5127: PUSH
5128: LD_INT 2
5130: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5131: LD_ADDR_EXP 34
5135: PUSH
5136: LD_INT 5
5138: ST_TO_ADDR
// end ; if Difficulty = 2 then
5139: LD_OWVAR 67
5143: PUSH
5144: LD_INT 2
5146: EQUAL
5147: IFFALSE 5165
// begin RuSolMinLevel = 3 ;
5149: LD_ADDR_EXP 33
5153: PUSH
5154: LD_INT 3
5156: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5157: LD_ADDR_EXP 34
5161: PUSH
5162: LD_INT 5
5164: ST_TO_ADDR
// end ; if Difficulty = 3 then
5165: LD_OWVAR 67
5169: PUSH
5170: LD_INT 3
5172: EQUAL
5173: IFFALSE 5191
// begin RuSolMinLevel = 4 ;
5175: LD_ADDR_EXP 33
5179: PUSH
5180: LD_INT 4
5182: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5183: LD_ADDR_EXP 34
5187: PUSH
5188: LD_INT 5
5190: ST_TO_ADDR
// end ; end ;
5191: LD_VAR 0 1
5195: RET
// export function ShowQuery1 ; begin
5196: LD_INT 0
5198: PPUSH
// case query ( QKill ) of 1 :
5199: LD_STRING QKill
5201: PPUSH
5202: CALL_OW 97
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5226
5215: POP
// begin result = 1 ;
5216: LD_ADDR_VAR 0 1
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ; 2 :
5224: GO 5265
5226: LD_INT 2
5228: DOUBLE
5229: EQUAL
5230: IFTRUE 5234
5232: GO 5245
5234: POP
// begin result = 2 ;
5235: LD_ADDR_VAR 0 1
5239: PUSH
5240: LD_INT 2
5242: ST_TO_ADDR
// end ; 3 :
5243: GO 5265
5245: LD_INT 3
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5264
5253: POP
// begin result = 3 ;
5254: LD_ADDR_VAR 0 1
5258: PUSH
5259: LD_INT 3
5261: ST_TO_ADDR
// end ; end ;
5262: GO 5265
5264: POP
// end ;
5265: LD_VAR 0 1
5269: RET
// export function ShowQuery2 ; begin
5270: LD_INT 0
5272: PPUSH
// case query ( QKill2 ) of 1 :
5273: LD_STRING QKill2
5275: PPUSH
5276: CALL_OW 97
5280: PUSH
5281: LD_INT 1
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5289
5287: GO 5300
5289: POP
// begin result = 1 ;
5290: LD_ADDR_VAR 0 1
5294: PUSH
5295: LD_INT 1
5297: ST_TO_ADDR
// end ; 2 :
5298: GO 5320
5300: LD_INT 2
5302: DOUBLE
5303: EQUAL
5304: IFTRUE 5308
5306: GO 5319
5308: POP
// begin result = 2 ;
5309: LD_ADDR_VAR 0 1
5313: PUSH
5314: LD_INT 2
5316: ST_TO_ADDR
// end ; end ;
5317: GO 5320
5319: POP
// end ;
5320: LD_VAR 0 1
5324: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
// for i = 1 to 72 do
5331: LD_ADDR_VAR 0 5
5335: PUSH
5336: DOUBLE
5337: LD_INT 1
5339: DEC
5340: ST_TO_ADDR
5341: LD_INT 72
5343: PUSH
5344: FOR_TO
5345: IFFALSE 5403
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5347: LD_VAR 0 5
5351: PPUSH
5352: LD_VAR 0 1
5356: PPUSH
5357: CALL_OW 321
5361: PUSH
5362: LD_INT 1
5364: EQUAL
5365: PUSH
5366: LD_VAR 0 5
5370: PPUSH
5371: LD_VAR 0 3
5375: PPUSH
5376: CALL_OW 482
5380: PUSH
5381: LD_INT 1
5383: EQUAL
5384: AND
5385: IFFALSE 5401
// AddComResearch ( lab , i ) ;
5387: LD_VAR 0 2
5391: PPUSH
5392: LD_VAR 0 5
5396: PPUSH
5397: CALL_OW 184
5401: GO 5344
5403: POP
5404: POP
// end ;
5405: LD_VAR 0 4
5409: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
5417: LD_ADDR_VAR 0 6
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_VAR 0 1
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PUSH
5434: LD_INT 2
5436: PUSH
5437: LD_INT 25
5439: PUSH
5440: LD_INT 2
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PUSH
5447: LD_INT 25
5449: PUSH
5450: LD_INT 16
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 24
5464: PUSH
5465: LD_INT 1000
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 69
5481: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5482: LD_ADDR_VAR 0 4
5486: PUSH
5487: LD_INT 22
5489: PUSH
5490: LD_VAR 0 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 21
5501: PUSH
5502: LD_INT 3
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 3
5511: PUSH
5512: LD_INT 24
5514: PUSH
5515: LD_INT 1000
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: LIST
5530: PUSH
5531: EMPTY
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5539: LD_VAR 0 4
5543: PUSH
5544: LD_INT 0
5546: GREATER
5547: PUSH
5548: LD_VAR 0 6
5552: PUSH
5553: LD_INT 0
5555: GREATER
5556: AND
5557: IFFALSE 5623
// begin for i in engineerOk_list do
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 6
5568: PUSH
5569: FOR_IN
5570: IFFALSE 5621
// begin for j in buildings_list do
5572: LD_ADDR_VAR 0 7
5576: PUSH
5577: LD_VAR 0 4
5581: PUSH
5582: FOR_IN
5583: IFFALSE 5617
// begin AddComExitBuilding ( i ) ;
5585: LD_VAR 0 5
5589: PPUSH
5590: CALL_OW 182
// wait ( 0 0$1 ) ;
5594: LD_INT 35
5596: PPUSH
5597: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5601: LD_VAR 0 5
5605: PPUSH
5606: LD_VAR 0 7
5610: PPUSH
5611: CALL_OW 190
// end ;
5615: GO 5582
5617: POP
5618: POP
// end ;
5619: GO 5569
5621: POP
5622: POP
// end ; if buildings_list = 0 then
5623: LD_VAR 0 4
5627: PUSH
5628: LD_INT 0
5630: EQUAL
5631: IFFALSE 5664
// begin for i in engineerOK_list do
5633: LD_ADDR_VAR 0 5
5637: PUSH
5638: LD_VAR 0 6
5642: PUSH
5643: FOR_IN
5644: IFFALSE 5662
// begin ComEnterUnit ( i , building ) ;
5646: LD_VAR 0 5
5650: PPUSH
5651: LD_VAR 0 2
5655: PPUSH
5656: CALL_OW 120
// end ;
5660: GO 5643
5662: POP
5663: POP
// end ; end ;
5664: LD_VAR 0 3
5668: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5669: LD_INT 0
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
5675: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5676: LD_ADDR_VAR 0 6
5680: PUSH
5681: LD_INT 22
5683: PUSH
5684: LD_VAR 0 1
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PUSH
5693: LD_INT 25
5695: PUSH
5696: LD_INT 4
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PPUSH
5707: CALL_OW 69
5711: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5712: LD_ADDR_VAR 0 9
5716: PUSH
5717: LD_VAR 0 3
5721: PPUSH
5722: LD_INT 22
5724: PUSH
5725: LD_VAR 0 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 21
5736: PUSH
5737: LD_INT 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 24
5749: PUSH
5750: LD_INT 750
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 70
5770: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5771: LD_VAR 0 9
5775: PUSH
5776: LD_INT 0
5778: GREATER
5779: PUSH
5780: LD_VAR 0 6
5784: PUSH
5785: LD_INT 0
5787: GREATER
5788: AND
5789: IFFALSE 5916
// begin for i = 1 to damageUnits do
5791: LD_ADDR_VAR 0 7
5795: PUSH
5796: DOUBLE
5797: LD_INT 1
5799: DEC
5800: ST_TO_ADDR
5801: LD_VAR 0 9
5805: PUSH
5806: FOR_TO
5807: IFFALSE 5831
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5809: LD_VAR 0 9
5813: PUSH
5814: LD_VAR 0 7
5818: ARRAY
5819: PPUSH
5820: LD_VAR 0 2
5824: PPUSH
5825: CALL_OW 113
5829: GO 5806
5831: POP
5832: POP
// for i in sci_list do
5833: LD_ADDR_VAR 0 7
5837: PUSH
5838: LD_VAR 0 6
5842: PUSH
5843: FOR_IN
5844: IFFALSE 5912
// begin ComExitBuilding ( i ) ;
5846: LD_VAR 0 7
5850: PPUSH
5851: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5855: LD_ADDR_VAR 0 8
5859: PUSH
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 22
5867: PUSH
5868: LD_VAR 0 1
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PPUSH
5877: CALL_OW 70
5881: PUSH
5882: FOR_IN
5883: IFFALSE 5908
// begin AddComHeal ( i , j ) ;
5885: LD_VAR 0 7
5889: PPUSH
5890: LD_VAR 0 8
5894: PPUSH
5895: CALL_OW 188
// wait ( 1 1$0 ) ;
5899: LD_INT 2100
5901: PPUSH
5902: CALL_OW 67
// end ;
5906: GO 5882
5908: POP
5909: POP
// end ;
5910: GO 5843
5912: POP
5913: POP
// end else
5914: GO 5930
// begin AddComEnterUnit ( sci_list , build ) ;
5916: LD_VAR 0 6
5920: PPUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: CALL_OW 180
// end ; end ;
5930: LD_VAR 0 5
5934: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , temp , target1 , target2 ; begin
5935: LD_INT 0
5937: PPUSH
5938: PPUSH
5939: PPUSH
5940: PPUSH
5941: PPUSH
5942: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5943: LD_INT 22
5945: PUSH
5946: LD_VAR 0 1
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 21
5957: PUSH
5958: LD_INT 2
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PPUSH
5969: CALL_OW 69
5973: PUSH
5974: LD_VAR 0 3
5978: LESSEQUAL
5979: IFFALSE 6046
// for i = 1 to vehCount do
5981: LD_ADDR_VAR 0 10
5985: PUSH
5986: DOUBLE
5987: LD_INT 1
5989: DEC
5990: ST_TO_ADDR
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_TO
5997: IFFALSE 6044
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_VAR 0 8
6008: PPUSH
6009: LD_VAR 0 6
6013: PPUSH
6014: LD_VAR 0 7
6018: PPUSH
6019: LD_VAR 0 5
6023: PUSH
6024: LD_INT 1
6026: PPUSH
6027: LD_VAR 0 5
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: PPUSH
6038: CALL_OW 185
6042: GO 5996
6044: POP
6045: POP
// repeat wait ( 0 0$1 ) ;
6046: LD_INT 35
6048: PPUSH
6049: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
6053: LD_INT 22
6055: PUSH
6056: LD_VAR 0 1
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 21
6067: PUSH
6068: LD_INT 2
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: LD_INT 24
6077: PUSH
6078: LD_INT 250
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: PPUSH
6090: CALL_OW 69
6094: PUSH
6095: LD_VAR 0 3
6099: GREATEREQUAL
6100: IFFALSE 6046
// repeat begin wait ( 0 0$1 ) ;
6102: LD_INT 35
6104: PPUSH
6105: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
6109: LD_ADDR_VAR 0 10
6113: PUSH
6114: LD_INT 22
6116: PUSH
6117: LD_VAR 0 1
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 21
6128: PUSH
6129: LD_INT 2
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 24
6138: PUSH
6139: LD_INT 651
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: PPUSH
6151: CALL_OW 69
6155: PUSH
6156: FOR_IN
6157: IFFALSE 6333
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6159: LD_ADDR_VAR 0 13
6163: PUSH
6164: LD_INT 22
6166: PUSH
6167: LD_VAR 0 4
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PPUSH
6176: CALL_OW 69
6180: PPUSH
6181: LD_VAR 0 10
6185: PPUSH
6186: CALL_OW 74
6190: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6191: LD_ADDR_VAR 0 14
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_VAR 0 4
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 2
6210: PUSH
6211: LD_INT 59
6213: PUSH
6214: EMPTY
6215: LIST
6216: PUSH
6217: LD_INT 21
6219: PUSH
6220: LD_INT 1
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: PUSH
6227: LD_INT 21
6229: PUSH
6230: LD_INT 2
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: PPUSH
6250: CALL_OW 69
6254: PPUSH
6255: LD_VAR 0 10
6259: PPUSH
6260: CALL_OW 74
6264: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6265: LD_VAR 0 10
6269: PPUSH
6270: LD_VAR 0 13
6274: PPUSH
6275: CALL_OW 296
6279: PUSH
6280: LD_INT 8
6282: PLUS
6283: PUSH
6284: LD_VAR 0 10
6288: PPUSH
6289: LD_VAR 0 14
6293: PPUSH
6294: CALL_OW 296
6298: LESS
6299: IFFALSE 6317
// begin ComAttackUnit ( i , target1 ) ;
6301: LD_VAR 0 10
6305: PPUSH
6306: LD_VAR 0 13
6310: PPUSH
6311: CALL_OW 115
// end else
6315: GO 6331
// begin ComAttackUnit ( i , target2 ) ;
6317: LD_VAR 0 10
6321: PPUSH
6322: LD_VAR 0 14
6326: PPUSH
6327: CALL_OW 115
// end ; end ;
6331: GO 6156
6333: POP
6334: POP
// end until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 ;
6335: LD_INT 22
6337: PUSH
6338: LD_INT 3
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 21
6347: PUSH
6348: LD_INT 2
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 34
6360: PUSH
6361: LD_INT 51
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 69
6381: PUSH
6382: LD_INT 0
6384: EQUAL
6385: IFFALSE 6102
// end ;
6387: LD_VAR 0 9
6391: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
// enable ;
6398: ENABLE
// crate_list := GetListOfCratesInArea ( cratesArea ) ;
6399: LD_ADDR_VAR 0 7
6403: PUSH
6404: LD_VAR 0 3
6408: PPUSH
6409: CALL_OW 435
6413: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
6414: LD_ADDR_VAR 0 6
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 34
6433: PUSH
6434: LD_VAR 0 2
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 69
6451: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
6452: LD_VAR 0 6
6456: PUSH
6457: LD_INT 0
6459: GREATER
6460: PUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: CALL_OW 435
6470: AND
6471: PUSH
6472: LD_VAR 0 7
6476: PUSH
6477: LD_INT 0
6479: GREATER
6480: AND
6481: IFFALSE 6530
// begin ComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
6483: LD_VAR 0 6
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: PPUSH
6492: LD_VAR 0 7
6496: PUSH
6497: LD_INT 1
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 7
6505: PUSH
6506: LD_INT 2
6508: ARRAY
6509: PPUSH
6510: CALL_OW 117
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
6514: LD_VAR 0 6
6518: PUSH
6519: LD_INT 1
6521: ARRAY
6522: PPUSH
6523: LD_INT 100
6525: PPUSH
6526: CALL_OW 240
// end ; clear_crates := false ;
6530: LD_ADDR_VAR 0 5
6534: PUSH
6535: LD_INT 0
6537: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6538: LD_INT 35
6540: PPUSH
6541: CALL_OW 67
// until ( not IsBusy ( cargo_list [ 1 ] ) ) or clear_crates ;
6545: LD_VAR 0 6
6549: PUSH
6550: LD_INT 1
6552: ARRAY
6553: PPUSH
6554: CALL_OW 315
6558: NOT
6559: PUSH
6560: LD_VAR 0 5
6564: OR
6565: IFFALSE 6538
// end ;
6567: LD_VAR 0 4
6571: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6572: LD_INT 0
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
6584: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6585: LD_ADDR_VAR 0 9
6589: PUSH
6590: LD_INT 22
6592: PUSH
6593: LD_VAR 0 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 21
6604: PUSH
6605: LD_INT 2
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 24
6614: PUSH
6615: LD_INT 660
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 3
6624: PUSH
6625: LD_INT 58
6627: PUSH
6628: EMPTY
6629: LIST
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 3
6637: PUSH
6638: LD_INT 34
6640: PUSH
6641: LD_INT 53
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 69
6663: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6664: LD_ADDR_VAR 0 10
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_VAR 0 1
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 21
6683: PUSH
6684: LD_INT 2
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_INT 3
6693: PUSH
6694: LD_INT 24
6696: PUSH
6697: LD_INT 660
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6718: LD_ADDR_VAR 0 11
6722: PUSH
6723: LD_VAR 0 2
6727: PPUSH
6728: LD_INT 22
6730: PUSH
6731: LD_VAR 0 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 21
6742: PUSH
6743: LD_INT 2
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 24
6755: PUSH
6756: LD_INT 1000
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 70
6776: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6777: LD_ADDR_VAR 0 12
6781: PUSH
6782: LD_VAR 0 2
6786: PPUSH
6787: LD_INT 22
6789: PUSH
6790: LD_VAR 0 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 21
6801: PUSH
6802: LD_INT 2
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 24
6811: PUSH
6812: LD_INT 1000
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 58
6821: PUSH
6822: EMPTY
6823: LIST
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: LD_INT 34
6830: PUSH
6831: LD_INT 53
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 70
6853: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6854: LD_ADDR_VAR 0 13
6858: PUSH
6859: EMPTY
6860: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6861: LD_ADDR_VAR 0 14
6865: PUSH
6866: LD_VAR 0 2
6870: PPUSH
6871: LD_INT 22
6873: PUSH
6874: LD_VAR 0 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 25
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 70
6901: ST_TO_ADDR
// if damageVehicle_list > 0 then
6902: LD_VAR 0 10
6906: PUSH
6907: LD_INT 0
6909: GREATER
6910: IFFALSE 6948
// begin for i in damageVehicle_list do
6912: LD_ADDR_VAR 0 7
6916: PUSH
6917: LD_VAR 0 10
6921: PUSH
6922: FOR_IN
6923: IFFALSE 6946
// begin ComMoveXY ( i , repX , repY ) ;
6925: LD_VAR 0 7
6929: PPUSH
6930: LD_VAR 0 3
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: CALL_OW 111
// end ;
6944: GO 6922
6946: POP
6947: POP
// end ; if vehicleNeedRepair_list > 0 then
6948: LD_VAR 0 11
6952: PUSH
6953: LD_INT 0
6955: GREATER
6956: IFFALSE 7043
// begin for i in vehicleNeedRepair_list do
6958: LD_ADDR_VAR 0 7
6962: PUSH
6963: LD_VAR 0 11
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7041
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6971: LD_ADDR_VAR 0 13
6975: PUSH
6976: LD_VAR 0 13
6980: PUSH
6981: LD_VAR 0 7
6985: PPUSH
6986: CALL_OW 313
6990: ADD
6991: ST_TO_ADDR
// for j in mechanicInside_list do
6992: LD_ADDR_VAR 0 8
6996: PUSH
6997: LD_VAR 0 13
7001: PUSH
7002: FOR_IN
7003: IFFALSE 7037
// begin ComExitVehicle ( i ) ;
7005: LD_VAR 0 7
7009: PPUSH
7010: CALL_OW 121
// wait ( 0 0$1 ) ;
7014: LD_INT 35
7016: PPUSH
7017: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
7021: LD_VAR 0 7
7025: PPUSH
7026: LD_VAR 0 8
7030: PPUSH
7031: CALL_OW 129
// end ;
7035: GO 7002
7037: POP
7038: POP
// end ;
7039: GO 6968
7041: POP
7042: POP
// end ; if vehicleDontNeedRepair_list > 0 then
7043: LD_VAR 0 12
7047: PUSH
7048: LD_INT 0
7050: GREATER
7051: IFFALSE 7091
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
7053: LD_VAR 0 14
7057: PUSH
7058: LD_INT 1
7060: ARRAY
7061: PPUSH
7062: LD_VAR 0 12
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7075: LD_VAR 0 12
7079: PUSH
7080: LD_INT 1
7082: ARRAY
7083: PPUSH
7084: LD_INT 100
7086: PPUSH
7087: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7091: LD_VAR 0 9
7095: PUSH
7096: LD_INT 0
7098: GREATER
7099: IFFALSE 7290
// begin for i in vehicleOK_list do
7101: LD_ADDR_VAR 0 7
7105: PUSH
7106: LD_VAR 0 9
7110: PUSH
7111: FOR_IN
7112: IFFALSE 7288
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7114: LD_ADDR_VAR 0 15
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_VAR 0 5
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PPUSH
7131: CALL_OW 69
7135: PPUSH
7136: LD_VAR 0 7
7140: PPUSH
7141: CALL_OW 74
7145: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7146: LD_ADDR_VAR 0 16
7150: PUSH
7151: LD_INT 22
7153: PUSH
7154: LD_VAR 0 5
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 2
7165: PUSH
7166: LD_INT 59
7168: PUSH
7169: EMPTY
7170: LIST
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 21
7184: PUSH
7185: LD_INT 2
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: LD_VAR 0 7
7214: PPUSH
7215: CALL_OW 74
7219: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7220: LD_VAR 0 7
7224: PPUSH
7225: LD_VAR 0 15
7229: PPUSH
7230: CALL_OW 296
7234: PUSH
7235: LD_INT 8
7237: PLUS
7238: PUSH
7239: LD_VAR 0 7
7243: PPUSH
7244: LD_VAR 0 16
7248: PPUSH
7249: CALL_OW 296
7253: LESS
7254: IFFALSE 7272
// begin ComAttackUnit ( i , target1 ) ;
7256: LD_VAR 0 7
7260: PPUSH
7261: LD_VAR 0 15
7265: PPUSH
7266: CALL_OW 115
// end else
7270: GO 7286
// begin ComAttackUnit ( i , target2 ) ;
7272: LD_VAR 0 7
7276: PPUSH
7277: LD_VAR 0 16
7281: PPUSH
7282: CALL_OW 115
// end ; end ;
7286: GO 7111
7288: POP
7289: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7290: LD_ADDR_VAR 0 7
7294: PUSH
7295: LD_VAR 0 2
7299: PPUSH
7300: LD_INT 22
7302: PUSH
7303: LD_VAR 0 1
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 25
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 70
7330: NOT
7331: PUSH
7332: FOR_IN
7333: IFFALSE 7356
// ComMoveXY ( i , repX , repY ) ;
7335: LD_VAR 0 7
7339: PPUSH
7340: LD_VAR 0 3
7344: PPUSH
7345: LD_VAR 0 4
7349: PPUSH
7350: CALL_OW 111
7354: GO 7332
7356: POP
7357: POP
// end ;
7358: LD_VAR 0 6
7362: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7363: LD_INT 0
7365: PPUSH
7366: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7367: LD_INT 22
7369: PUSH
7370: LD_VAR 0 1
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 25
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 69
7397: PUSH
7398: LD_INT 0
7400: GREATER
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_VAR 0 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 24
7429: PUSH
7430: LD_INT 1000
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: PPUSH
7446: CALL_OW 69
7450: PUSH
7451: LD_INT 0
7453: EQUAL
7454: AND
7455: PUSH
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 0
7463: GREATER
7464: AND
7465: IFFALSE 7564
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7467: LD_ADDR_VAR 0 4
7471: PUSH
7472: LD_INT 22
7474: PUSH
7475: LD_VAR 0 1
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: LD_INT 25
7486: PUSH
7487: LD_INT 2
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PPUSH
7498: CALL_OW 69
7502: PUSH
7503: FOR_IN
7504: IFFALSE 7562
// begin AddComExitBuilding ( i ) ;
7506: LD_VAR 0 4
7510: PPUSH
7511: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7515: LD_VAR 0 4
7519: PPUSH
7520: LD_VAR 0 2
7524: PUSH
7525: LD_INT 1
7527: ARRAY
7528: PPUSH
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 2
7536: ARRAY
7537: PPUSH
7538: LD_VAR 0 2
7542: PUSH
7543: LD_INT 3
7545: ARRAY
7546: PPUSH
7547: LD_VAR 0 2
7551: PUSH
7552: LD_INT 4
7554: ARRAY
7555: PPUSH
7556: CALL_OW 205
// end ;
7560: GO 7503
7562: POP
7563: POP
// end ; end ;
7564: LD_VAR 0 3
7568: RET
// export function EscapeToBarrack ( side , build , area ) ; var i , j , soldiers_list , turretList , temp , specialClass_list ; begin
7569: LD_INT 0
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
7578: LD_ADDR_VAR 0 7
7582: PUSH
7583: LD_INT 22
7585: PUSH
7586: LD_VAR 0 1
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 25
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 56
7607: PUSH
7608: EMPTY
7609: LIST
7610: PUSH
7611: LD_INT 24
7613: PUSH
7614: LD_INT 700
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7632: LD_ADDR_VAR 0 8
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_VAR 0 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 30
7651: PUSH
7652: LD_INT 32
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 58
7661: PUSH
7662: EMPTY
7663: LIST
7664: PUSH
7665: LD_INT 24
7667: PUSH
7668: LD_INT 251
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 69
7685: ST_TO_ADDR
// specialClass_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7686: LD_ADDR_VAR 0 10
7690: PUSH
7691: LD_INT 22
7693: PUSH
7694: LD_VAR 0 1
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 2
7705: PUSH
7706: LD_INT 25
7708: PUSH
7709: LD_INT 5
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 25
7718: PUSH
7719: LD_INT 8
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 25
7728: PUSH
7729: LD_INT 9
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: ST_TO_ADDR
// temp = UnitsInside ( build ) diff specialClass_list ;
7751: LD_ADDR_VAR 0 9
7755: PUSH
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 313
7765: PUSH
7766: LD_VAR 0 10
7770: DIFF
7771: ST_TO_ADDR
// if turretList = 0 and temp = 0 then
7772: LD_VAR 0 8
7776: PUSH
7777: LD_INT 0
7779: EQUAL
7780: PUSH
7781: LD_VAR 0 9
7785: PUSH
7786: LD_INT 0
7788: EQUAL
7789: AND
7790: IFFALSE 7836
// begin for i in soldiers_list do
7792: LD_ADDR_VAR 0 5
7796: PUSH
7797: LD_VAR 0 7
7801: PUSH
7802: FOR_IN
7803: IFFALSE 7832
// begin if IsOK ( build ) then
7805: LD_VAR 0 2
7809: PPUSH
7810: CALL_OW 302
7814: IFFALSE 7830
// ComEnterUnit ( i , build ) ;
7816: LD_VAR 0 5
7820: PPUSH
7821: LD_VAR 0 2
7825: PPUSH
7826: CALL_OW 120
// end ;
7830: GO 7802
7832: POP
7833: POP
// end else
7834: GO 7921
// begin for i = 1 to turretList do
7836: LD_ADDR_VAR 0 5
7840: PUSH
7841: DOUBLE
7842: LD_INT 1
7844: DEC
7845: ST_TO_ADDR
7846: LD_VAR 0 8
7850: PUSH
7851: FOR_TO
7852: IFFALSE 7919
// begin for j = 1 to temp do
7854: LD_ADDR_VAR 0 6
7858: PUSH
7859: DOUBLE
7860: LD_INT 1
7862: DEC
7863: ST_TO_ADDR
7864: LD_VAR 0 9
7868: PUSH
7869: FOR_TO
7870: IFFALSE 7915
// begin ComExitBuilding ( temp [ j ] ) ;
7872: LD_VAR 0 9
7876: PUSH
7877: LD_VAR 0 6
7881: ARRAY
7882: PPUSH
7883: CALL_OW 122
// AddComEnterUnit ( temp [ j ] , turretList [ i ] ) ;
7887: LD_VAR 0 9
7891: PUSH
7892: LD_VAR 0 6
7896: ARRAY
7897: PPUSH
7898: LD_VAR 0 8
7902: PUSH
7903: LD_VAR 0 5
7907: ARRAY
7908: PPUSH
7909: CALL_OW 180
// end ;
7913: GO 7869
7915: POP
7916: POP
// end ;
7917: GO 7851
7919: POP
7920: POP
// end ; end ;
7921: LD_VAR 0 4
7925: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
7926: LD_INT 0
7928: PPUSH
7929: PPUSH
7930: PPUSH
7931: PPUSH
7932: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
7933: LD_ADDR_VAR 0 6
7937: PUSH
7938: LD_INT 22
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 30
7955: PUSH
7956: LD_INT 31
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 30
7965: PUSH
7966: LD_INT 32
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 30
7975: PUSH
7976: LD_INT 33
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 30
7985: PUSH
7986: LD_INT 4
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: LD_INT 30
7995: PUSH
7996: LD_INT 5
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 69
8019: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8020: LD_ADDR_VAR 0 7
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_VAR 0 2
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 21
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 58
8049: PUSH
8050: EMPTY
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: PPUSH
8058: CALL_OW 69
8062: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8063: LD_VAR 0 6
8067: PUSH
8068: LD_INT 0
8070: GREATER
8071: PUSH
8072: LD_VAR 0 7
8076: PUSH
8077: LD_INT 0
8079: GREATER
8080: AND
8081: IFFALSE 8151
// begin for i in turretsList do
8083: LD_ADDR_VAR 0 4
8087: PUSH
8088: LD_VAR 0 6
8092: PUSH
8093: FOR_IN
8094: IFFALSE 8149
// begin for j in enemyBuildings do
8096: LD_ADDR_VAR 0 5
8100: PUSH
8101: LD_VAR 0 7
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8145
// begin if GetDistUnits ( i , j ) < 20 then
8109: LD_VAR 0 4
8113: PPUSH
8114: LD_VAR 0 5
8118: PPUSH
8119: CALL_OW 296
8123: PUSH
8124: LD_INT 20
8126: LESS
8127: IFFALSE 8143
// begin ComAttackUnit ( i , j ) ;
8129: LD_VAR 0 4
8133: PPUSH
8134: LD_VAR 0 5
8138: PPUSH
8139: CALL_OW 115
// end ; end ;
8143: GO 8106
8145: POP
8146: POP
// end ;
8147: GO 8093
8149: POP
8150: POP
// end ; end ;
8151: LD_VAR 0 3
8155: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
8156: LD_INT 0
8158: PPUSH
8159: PPUSH
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
// for i = 1 to medicCount do
8169: LD_ADDR_VAR 0 14
8173: PUSH
8174: DOUBLE
8175: LD_INT 1
8177: DEC
8178: ST_TO_ADDR
8179: LD_VAR 0 7
8183: PUSH
8184: FOR_TO
8185: IFFALSE 8267
// begin uc_side = side ;
8187: LD_ADDR_OWVAR 20
8191: PUSH
8192: LD_VAR 0 1
8196: ST_TO_ADDR
// uc_nation = nation ;
8197: LD_ADDR_OWVAR 21
8201: PUSH
8202: LD_VAR 0 2
8206: ST_TO_ADDR
// hc_name =  ;
8207: LD_ADDR_OWVAR 26
8211: PUSH
8212: LD_STRING 
8214: ST_TO_ADDR
// hc_gallery =  ;
8215: LD_ADDR_OWVAR 33
8219: PUSH
8220: LD_STRING 
8222: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
8223: LD_INT 0
8225: PPUSH
8226: LD_INT 4
8228: PPUSH
8229: LD_VAR 0 8
8233: PPUSH
8234: CALL_OW 380
// un = CreateHuman ;
8238: LD_ADDR_VAR 0 16
8242: PUSH
8243: CALL_OW 44
8247: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8248: LD_VAR 0 16
8252: PPUSH
8253: LD_VAR 0 9
8257: PPUSH
8258: LD_INT 0
8260: PPUSH
8261: CALL_OW 49
// end ;
8265: GO 8184
8267: POP
8268: POP
// for i = 1 to soldierCount do
8269: LD_ADDR_VAR 0 14
8273: PUSH
8274: DOUBLE
8275: LD_INT 1
8277: DEC
8278: ST_TO_ADDR
8279: LD_VAR 0 3
8283: PUSH
8284: FOR_TO
8285: IFFALSE 8367
// begin uc_side = side ;
8287: LD_ADDR_OWVAR 20
8291: PUSH
8292: LD_VAR 0 1
8296: ST_TO_ADDR
// uc_nation = nation ;
8297: LD_ADDR_OWVAR 21
8301: PUSH
8302: LD_VAR 0 2
8306: ST_TO_ADDR
// hc_name =  ;
8307: LD_ADDR_OWVAR 26
8311: PUSH
8312: LD_STRING 
8314: ST_TO_ADDR
// hc_gallery =  ;
8315: LD_ADDR_OWVAR 33
8319: PUSH
8320: LD_STRING 
8322: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
8323: LD_INT 0
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: LD_VAR 0 8
8333: PPUSH
8334: CALL_OW 380
// un = CreateHuman ;
8338: LD_ADDR_VAR 0 16
8342: PUSH
8343: CALL_OW 44
8347: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8348: LD_VAR 0 16
8352: PPUSH
8353: LD_VAR 0 9
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: CALL_OW 49
// end ;
8365: GO 8284
8367: POP
8368: POP
// for i = 1 to sniperCount do
8369: LD_ADDR_VAR 0 14
8373: PUSH
8374: DOUBLE
8375: LD_INT 1
8377: DEC
8378: ST_TO_ADDR
8379: LD_VAR 0 4
8383: PUSH
8384: FOR_TO
8385: IFFALSE 8467
// begin uc_side = side ;
8387: LD_ADDR_OWVAR 20
8391: PUSH
8392: LD_VAR 0 1
8396: ST_TO_ADDR
// uc_nation = nation ;
8397: LD_ADDR_OWVAR 21
8401: PUSH
8402: LD_VAR 0 2
8406: ST_TO_ADDR
// hc_name =  ;
8407: LD_ADDR_OWVAR 26
8411: PUSH
8412: LD_STRING 
8414: ST_TO_ADDR
// hc_gallery =  ;
8415: LD_ADDR_OWVAR 33
8419: PUSH
8420: LD_STRING 
8422: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
8423: LD_INT 0
8425: PPUSH
8426: LD_INT 5
8428: PPUSH
8429: LD_VAR 0 8
8433: PPUSH
8434: CALL_OW 380
// un = CreateHuman ;
8438: LD_ADDR_VAR 0 16
8442: PUSH
8443: CALL_OW 44
8447: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8448: LD_VAR 0 16
8452: PPUSH
8453: LD_VAR 0 9
8457: PPUSH
8458: LD_INT 0
8460: PPUSH
8461: CALL_OW 49
// end ;
8465: GO 8384
8467: POP
8468: POP
// for i = 1 to bazookCount do
8469: LD_ADDR_VAR 0 14
8473: PUSH
8474: DOUBLE
8475: LD_INT 1
8477: DEC
8478: ST_TO_ADDR
8479: LD_VAR 0 5
8483: PUSH
8484: FOR_TO
8485: IFFALSE 8567
// begin uc_side = side ;
8487: LD_ADDR_OWVAR 20
8491: PUSH
8492: LD_VAR 0 1
8496: ST_TO_ADDR
// uc_nation = nation ;
8497: LD_ADDR_OWVAR 21
8501: PUSH
8502: LD_VAR 0 2
8506: ST_TO_ADDR
// hc_name =  ;
8507: LD_ADDR_OWVAR 26
8511: PUSH
8512: LD_STRING 
8514: ST_TO_ADDR
// hc_gallery =  ;
8515: LD_ADDR_OWVAR 33
8519: PUSH
8520: LD_STRING 
8522: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
8523: LD_INT 0
8525: PPUSH
8526: LD_INT 9
8528: PPUSH
8529: LD_VAR 0 8
8533: PPUSH
8534: CALL_OW 380
// un = CreateHuman ;
8538: LD_ADDR_VAR 0 16
8542: PUSH
8543: CALL_OW 44
8547: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8548: LD_VAR 0 16
8552: PPUSH
8553: LD_VAR 0 9
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 49
// end ;
8565: GO 8484
8567: POP
8568: POP
// for i = 1 to mortalCount do
8569: LD_ADDR_VAR 0 14
8573: PUSH
8574: DOUBLE
8575: LD_INT 1
8577: DEC
8578: ST_TO_ADDR
8579: LD_VAR 0 6
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8667
// begin uc_side = side ;
8587: LD_ADDR_OWVAR 20
8591: PUSH
8592: LD_VAR 0 1
8596: ST_TO_ADDR
// uc_nation = nation ;
8597: LD_ADDR_OWVAR 21
8601: PUSH
8602: LD_VAR 0 2
8606: ST_TO_ADDR
// hc_name =  ;
8607: LD_ADDR_OWVAR 26
8611: PUSH
8612: LD_STRING 
8614: ST_TO_ADDR
// hc_gallery =  ;
8615: LD_ADDR_OWVAR 33
8619: PUSH
8620: LD_STRING 
8622: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
8623: LD_INT 0
8625: PPUSH
8626: LD_INT 8
8628: PPUSH
8629: LD_VAR 0 8
8633: PPUSH
8634: CALL_OW 380
// un = CreateHuman ;
8638: LD_ADDR_VAR 0 16
8642: PUSH
8643: CALL_OW 44
8647: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
8648: LD_VAR 0 16
8652: PPUSH
8653: LD_VAR 0 9
8657: PPUSH
8658: LD_INT 0
8660: PPUSH
8661: CALL_OW 49
// end ;
8665: GO 8584
8667: POP
8668: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8669: LD_ADDR_VAR 0 19
8673: PUSH
8674: LD_INT 22
8676: PUSH
8677: LD_VAR 0 1
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 25
8691: PUSH
8692: LD_INT 1
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 25
8701: PUSH
8702: LD_INT 5
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 25
8711: PUSH
8712: LD_INT 8
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: LD_INT 25
8721: PUSH
8722: LD_INT 9
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8745: LD_ADDR_VAR 0 18
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_VAR 0 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 25
8764: PUSH
8765: LD_INT 4
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PPUSH
8776: CALL_OW 69
8780: ST_TO_ADDR
// for i in medic_list do
8781: LD_ADDR_VAR 0 14
8785: PUSH
8786: LD_VAR 0 18
8790: PUSH
8791: FOR_IN
8792: IFFALSE 8810
// ComMoveToArea ( i , healArea ) ;
8794: LD_VAR 0 14
8798: PPUSH
8799: LD_VAR 0 10
8803: PPUSH
8804: CALL_OW 113
8808: GO 8791
8810: POP
8811: POP
// if strategy = 1 then
8812: LD_VAR 0 12
8816: PUSH
8817: LD_INT 1
8819: EQUAL
8820: IFFALSE 9525
// begin repeat wait ( 0 0$3 ) ;
8822: LD_INT 105
8824: PPUSH
8825: CALL_OW 67
// for i in soldiersOK_list do
8829: LD_ADDR_VAR 0 14
8833: PUSH
8834: LD_VAR 0 19
8838: PUSH
8839: FOR_IN
8840: IFFALSE 8874
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
8842: LD_VAR 0 14
8846: PPUSH
8847: LD_INT 80
8849: PPUSH
8850: LD_INT 109
8852: PPUSH
8853: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
8857: LD_VAR 0 14
8861: PPUSH
8862: LD_INT 39
8864: PPUSH
8865: LD_INT 49
8867: PPUSH
8868: CALL_OW 174
// end ;
8872: GO 8839
8874: POP
8875: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
8876: LD_INT 15
8878: PPUSH
8879: LD_INT 22
8881: PUSH
8882: LD_VAR 0 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PPUSH
8891: CALL_OW 70
8895: PUSH
8896: LD_INT 0
8898: GREATER
8899: IFFALSE 8822
// repeat wait ( 0 0$1 ) ;
8901: LD_INT 35
8903: PPUSH
8904: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8908: LD_ADDR_VAR 0 17
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_VAR 0 1
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 1
8927: PUSH
8928: LD_INT 3
8930: PUSH
8931: LD_INT 24
8933: PUSH
8934: LD_INT 550
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 24
8947: PUSH
8948: LD_INT 250
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 69
8968: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8969: LD_ADDR_VAR 0 19
8973: PUSH
8974: LD_INT 22
8976: PUSH
8977: LD_VAR 0 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 5
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: LD_INT 25
9011: PUSH
9012: LD_INT 8
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 25
9021: PUSH
9022: LD_INT 9
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: PUSH
9036: LD_INT 24
9038: PUSH
9039: LD_INT 1000
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: PPUSH
9051: CALL_OW 69
9055: ST_TO_ADDR
// if medicCount > 0 then
9056: LD_VAR 0 7
9060: PUSH
9061: LD_INT 0
9063: GREATER
9064: IFFALSE 9138
// begin if damageUnit_list > 0 then
9066: LD_VAR 0 17
9070: PUSH
9071: LD_INT 0
9073: GREATER
9074: IFFALSE 9138
// begin for i in damageUnit_list do
9076: LD_ADDR_VAR 0 14
9080: PUSH
9081: LD_VAR 0 17
9085: PUSH
9086: FOR_IN
9087: IFFALSE 9136
// begin ComMoveToArea ( i , healArea ) ;
9089: LD_VAR 0 14
9093: PPUSH
9094: LD_VAR 0 10
9098: PPUSH
9099: CALL_OW 113
// for j in medic_list do
9103: LD_ADDR_VAR 0 15
9107: PUSH
9108: LD_VAR 0 18
9112: PUSH
9113: FOR_IN
9114: IFFALSE 9132
// AddComHeal ( j , i ) ;
9116: LD_VAR 0 15
9120: PPUSH
9121: LD_VAR 0 14
9125: PPUSH
9126: CALL_OW 188
9130: GO 9113
9132: POP
9133: POP
// end ;
9134: GO 9086
9136: POP
9137: POP
// end ; end ; for i in soldiersOK_list do
9138: LD_ADDR_VAR 0 14
9142: PUSH
9143: LD_VAR 0 19
9147: PUSH
9148: FOR_IN
9149: IFFALSE 9325
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9151: LD_ADDR_VAR 0 22
9155: PUSH
9156: LD_INT 22
9158: PUSH
9159: LD_VAR 0 11
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: PPUSH
9173: LD_VAR 0 14
9177: PPUSH
9178: CALL_OW 74
9182: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9183: LD_ADDR_VAR 0 23
9187: PUSH
9188: LD_INT 22
9190: PUSH
9191: LD_VAR 0 11
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 2
9202: PUSH
9203: LD_INT 59
9205: PUSH
9206: EMPTY
9207: LIST
9208: PUSH
9209: LD_INT 21
9211: PUSH
9212: LD_INT 1
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: PUSH
9219: LD_INT 21
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: EMPTY
9240: LIST
9241: PPUSH
9242: CALL_OW 69
9246: PPUSH
9247: LD_VAR 0 14
9251: PPUSH
9252: CALL_OW 74
9256: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9257: LD_VAR 0 14
9261: PPUSH
9262: LD_VAR 0 22
9266: PPUSH
9267: CALL_OW 296
9271: PUSH
9272: LD_INT 8
9274: PLUS
9275: PUSH
9276: LD_VAR 0 14
9280: PPUSH
9281: LD_VAR 0 23
9285: PPUSH
9286: CALL_OW 296
9290: LESS
9291: IFFALSE 9309
// begin ComAttackUnit ( i , target1 ) ;
9293: LD_VAR 0 14
9297: PPUSH
9298: LD_VAR 0 22
9302: PPUSH
9303: CALL_OW 115
// end else
9307: GO 9323
// begin ComAttackUnit ( i , target2 ) ;
9309: LD_VAR 0 14
9313: PPUSH
9314: LD_VAR 0 23
9318: PPUSH
9319: CALL_OW 115
// end ; end ;
9323: GO 9148
9325: POP
9326: POP
// for i in soldiersOK_list do
9327: LD_ADDR_VAR 0 14
9331: PUSH
9332: LD_VAR 0 19
9336: PUSH
9337: FOR_IN
9338: IFFALSE 9514
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9340: LD_ADDR_VAR 0 22
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_VAR 0 11
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 69
9361: PPUSH
9362: LD_VAR 0 14
9366: PPUSH
9367: CALL_OW 74
9371: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9372: LD_ADDR_VAR 0 23
9376: PUSH
9377: LD_INT 22
9379: PUSH
9380: LD_VAR 0 11
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 59
9394: PUSH
9395: EMPTY
9396: LIST
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 21
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: PPUSH
9431: CALL_OW 69
9435: PPUSH
9436: LD_VAR 0 14
9440: PPUSH
9441: CALL_OW 74
9445: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9446: LD_VAR 0 14
9450: PPUSH
9451: LD_VAR 0 22
9455: PPUSH
9456: CALL_OW 296
9460: PUSH
9461: LD_INT 8
9463: PLUS
9464: PUSH
9465: LD_VAR 0 14
9469: PPUSH
9470: LD_VAR 0 23
9474: PPUSH
9475: CALL_OW 296
9479: LESS
9480: IFFALSE 9498
// begin ComAttackUnit ( i , target1 ) ;
9482: LD_VAR 0 14
9486: PPUSH
9487: LD_VAR 0 22
9491: PPUSH
9492: CALL_OW 115
// end else
9496: GO 9512
// begin ComAttackUnit ( i , target2 ) ;
9498: LD_VAR 0 14
9502: PPUSH
9503: LD_VAR 0 23
9507: PPUSH
9508: CALL_OW 115
// end ; end ;
9512: GO 9337
9514: POP
9515: POP
// until soldiersOK_list = [ ] ;
9516: LD_VAR 0 19
9520: PUSH
9521: EMPTY
9522: EQUAL
9523: IFFALSE 8901
// end ; if strategy = 2 then
9525: LD_VAR 0 12
9529: PUSH
9530: LD_INT 2
9532: EQUAL
9533: IFFALSE 10238
// begin repeat wait ( 0 0$1 ) ;
9535: LD_INT 35
9537: PPUSH
9538: CALL_OW 67
// for i in soldiersOK_list do
9542: LD_ADDR_VAR 0 14
9546: PUSH
9547: LD_VAR 0 19
9551: PUSH
9552: FOR_IN
9553: IFFALSE 9587
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
9555: LD_VAR 0 14
9559: PPUSH
9560: LD_INT 117
9562: PPUSH
9563: LD_INT 97
9565: PPUSH
9566: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
9570: LD_VAR 0 14
9574: PPUSH
9575: LD_INT 94
9577: PPUSH
9578: LD_INT 50
9580: PPUSH
9581: CALL_OW 174
// end ;
9585: GO 9552
9587: POP
9588: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
9589: LD_INT 16
9591: PPUSH
9592: LD_INT 22
9594: PUSH
9595: LD_VAR 0 1
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: PUSH
9609: LD_INT 0
9611: GREATER
9612: IFFALSE 9535
// repeat wait ( 0 0$3 ) ;
9614: LD_INT 105
9616: PPUSH
9617: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
9621: LD_ADDR_VAR 0 17
9625: PUSH
9626: LD_INT 22
9628: PUSH
9629: LD_VAR 0 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 1
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: LD_INT 24
9646: PUSH
9647: LD_INT 550
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 24
9660: PUSH
9661: LD_INT 250
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
9682: LD_ADDR_VAR 0 19
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 1
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 25
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 25
9714: PUSH
9715: LD_INT 5
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 25
9724: PUSH
9725: LD_INT 8
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PUSH
9732: LD_INT 25
9734: PUSH
9735: LD_INT 9
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 24
9751: PUSH
9752: LD_INT 1000
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: PPUSH
9764: CALL_OW 69
9768: ST_TO_ADDR
// if medicCount > 0 then
9769: LD_VAR 0 7
9773: PUSH
9774: LD_INT 0
9776: GREATER
9777: IFFALSE 9851
// begin if damageUnit_list > 0 then
9779: LD_VAR 0 17
9783: PUSH
9784: LD_INT 0
9786: GREATER
9787: IFFALSE 9851
// begin for i in damageUnit_list do
9789: LD_ADDR_VAR 0 14
9793: PUSH
9794: LD_VAR 0 17
9798: PUSH
9799: FOR_IN
9800: IFFALSE 9849
// begin ComMoveToArea ( i , healArea ) ;
9802: LD_VAR 0 14
9806: PPUSH
9807: LD_VAR 0 10
9811: PPUSH
9812: CALL_OW 113
// for j in medic_list do
9816: LD_ADDR_VAR 0 15
9820: PUSH
9821: LD_VAR 0 18
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9845
// AddComHeal ( j , i ) ;
9829: LD_VAR 0 15
9833: PPUSH
9834: LD_VAR 0 14
9838: PPUSH
9839: CALL_OW 188
9843: GO 9826
9845: POP
9846: POP
// end ;
9847: GO 9799
9849: POP
9850: POP
// end ; end ; for i in soldiersOK_list do
9851: LD_ADDR_VAR 0 14
9855: PUSH
9856: LD_VAR 0 19
9860: PUSH
9861: FOR_IN
9862: IFFALSE 10038
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9864: LD_ADDR_VAR 0 22
9868: PUSH
9869: LD_INT 22
9871: PUSH
9872: LD_VAR 0 11
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: PPUSH
9886: LD_VAR 0 14
9890: PPUSH
9891: CALL_OW 74
9895: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9896: LD_ADDR_VAR 0 23
9900: PUSH
9901: LD_INT 22
9903: PUSH
9904: LD_VAR 0 11
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 59
9918: PUSH
9919: EMPTY
9920: LIST
9921: PUSH
9922: LD_INT 21
9924: PUSH
9925: LD_INT 1
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 21
9934: PUSH
9935: LD_INT 2
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: EMPTY
9953: LIST
9954: PPUSH
9955: CALL_OW 69
9959: PPUSH
9960: LD_VAR 0 14
9964: PPUSH
9965: CALL_OW 74
9969: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9970: LD_VAR 0 14
9974: PPUSH
9975: LD_VAR 0 22
9979: PPUSH
9980: CALL_OW 296
9984: PUSH
9985: LD_INT 8
9987: PLUS
9988: PUSH
9989: LD_VAR 0 14
9993: PPUSH
9994: LD_VAR 0 23
9998: PPUSH
9999: CALL_OW 296
10003: LESS
10004: IFFALSE 10022
// begin ComAttackUnit ( i , target1 ) ;
10006: LD_VAR 0 14
10010: PPUSH
10011: LD_VAR 0 22
10015: PPUSH
10016: CALL_OW 115
// end else
10020: GO 10036
// begin ComAttackUnit ( i , target2 ) ;
10022: LD_VAR 0 14
10026: PPUSH
10027: LD_VAR 0 23
10031: PPUSH
10032: CALL_OW 115
// end ; end ;
10036: GO 9861
10038: POP
10039: POP
// for i in soldiersOK_list do
10040: LD_ADDR_VAR 0 14
10044: PUSH
10045: LD_VAR 0 19
10049: PUSH
10050: FOR_IN
10051: IFFALSE 10227
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10053: LD_ADDR_VAR 0 22
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_VAR 0 11
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PPUSH
10070: CALL_OW 69
10074: PPUSH
10075: LD_VAR 0 14
10079: PPUSH
10080: CALL_OW 74
10084: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10085: LD_ADDR_VAR 0 23
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_VAR 0 11
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 2
10104: PUSH
10105: LD_INT 59
10107: PUSH
10108: EMPTY
10109: LIST
10110: PUSH
10111: LD_INT 21
10113: PUSH
10114: LD_INT 1
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: LD_INT 21
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: PPUSH
10149: LD_VAR 0 14
10153: PPUSH
10154: CALL_OW 74
10158: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10159: LD_VAR 0 14
10163: PPUSH
10164: LD_VAR 0 22
10168: PPUSH
10169: CALL_OW 296
10173: PUSH
10174: LD_INT 8
10176: PLUS
10177: PUSH
10178: LD_VAR 0 14
10182: PPUSH
10183: LD_VAR 0 23
10187: PPUSH
10188: CALL_OW 296
10192: LESS
10193: IFFALSE 10211
// begin ComAttackUnit ( i , target1 ) ;
10195: LD_VAR 0 14
10199: PPUSH
10200: LD_VAR 0 22
10204: PPUSH
10205: CALL_OW 115
// end else
10209: GO 10225
// begin ComAttackUnit ( i , target2 ) ;
10211: LD_VAR 0 14
10215: PPUSH
10216: LD_VAR 0 23
10220: PPUSH
10221: CALL_OW 115
// end ; end ;
10225: GO 10050
10227: POP
10228: POP
// until soldiersOK_list = [ ] ;
10229: LD_VAR 0 19
10233: PUSH
10234: EMPTY
10235: EQUAL
10236: IFFALSE 9614
// end ; end ; end_of_file
10238: LD_VAR 0 13
10242: RET
// every 0 0$01 do
10243: GO 10245
10245: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
10246: LD_INT 22
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 25
10258: PUSH
10259: LD_INT 2
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: PUSH
10275: LD_INT 0
10277: EQUAL
10278: IFFALSE 10292
// SetClass ( JMM , 2 ) ;
10280: LD_EXP 1
10284: PPUSH
10285: LD_INT 2
10287: PPUSH
10288: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
10292: LD_STRING M1
10294: PPUSH
10295: CALL_OW 337
// case difficulty of 1 :
10299: LD_OWVAR 67
10303: PUSH
10304: LD_INT 1
10306: DOUBLE
10307: EQUAL
10308: IFTRUE 10312
10310: GO 10322
10312: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
10313: LD_STRING M1-1
10315: PPUSH
10316: CALL_OW 337
10320: GO 10359
10322: LD_INT 2
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10340
10330: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
10331: LD_STRING M1-2
10333: PPUSH
10334: CALL_OW 337
10338: GO 10359
10340: LD_INT 3
10342: DOUBLE
10343: EQUAL
10344: IFTRUE 10348
10346: GO 10358
10348: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
10349: LD_STRING M1-3
10351: PPUSH
10352: CALL_OW 337
10356: GO 10359
10358: POP
// ChangeMissionObjectives ( M1cont ) ;
10359: LD_STRING M1cont
10361: PPUSH
10362: CALL_OW 337
// SaveForQuickRestart ;
10366: CALL_OW 22
// end ;
10370: END
// every 0 0$1 do
10371: GO 10373
10373: DISABLE
// begin Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
10374: LD_INT 350
10376: PPUSH
10377: LD_INT 875
10379: PPUSH
10380: CALL_OW 12
10384: PPUSH
10385: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
10389: LD_INT 5
10391: PPUSH
10392: LD_INT 4
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 55
// wait ( 0 0$15 ) ;
10402: LD_INT 525
10404: PPUSH
10405: CALL_OW 67
// if IsOk ( Lisa ) then
10409: LD_EXP 2
10413: PPUSH
10414: CALL_OW 302
10418: IFFALSE 10434
// begin Say ( Lisa , DR0-Lisa-1 ) ;
10420: LD_EXP 2
10424: PPUSH
10425: LD_STRING DR0-Lisa-1
10427: PPUSH
10428: CALL_OW 88
// end else
10432: GO 10584
// begin if IsOK ( Cyrus ) then
10434: LD_EXP 4
10438: PPUSH
10439: CALL_OW 302
10443: IFFALSE 10459
// begin Say ( Cyrus , DR0-Cyrus-1 ) ;
10445: LD_EXP 4
10449: PPUSH
10450: LD_STRING DR0-Cyrus-1
10452: PPUSH
10453: CALL_OW 88
// end else
10457: GO 10584
// begin DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
10459: LD_INT 22
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 21
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 2
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 1
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 25
10494: PUSH
10495: LD_INT 2
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 25
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 25
10514: PUSH
10515: LD_INT 4
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 26
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: PUSH
10545: EMPTY
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: PUSH
10553: LD_EXP 1
10557: PUSH
10558: LD_EXP 8
10562: PUSH
10563: LD_EXP 5
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: DIFF
10573: PPUSH
10574: LD_STRING DR0-Sol1-1
10576: PPUSH
10577: LD_STRING DR0-Sol1-1
10579: PPUSH
10580: CALL 4657 0 3
// end ; end ; DialogRandom ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] , [ f_sex , 1 ] ] ] ) diff [ JMM , Gladstone , Frank ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
10584: LD_INT 22
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 25
10609: PUSH
10610: LD_INT 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 25
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 25
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 25
10639: PUSH
10640: LD_INT 4
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: PPUSH
10673: CALL_OW 69
10677: PUSH
10678: LD_EXP 1
10682: PUSH
10683: LD_EXP 8
10687: PUSH
10688: LD_EXP 5
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: DIFF
10698: PPUSH
10699: LD_STRING DR0-Sol2-1
10701: PPUSH
10702: LD_STRING DR0-Sol2-1
10704: PPUSH
10705: CALL 4657 0 3
// Say ( JMM , DR0-JMM-1 ) ;
10709: LD_EXP 1
10713: PPUSH
10714: LD_STRING DR0-JMM-1
10716: PPUSH
10717: CALL_OW 88
// end ;
10721: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
10722: LD_EXP 5
10726: PPUSH
10727: CALL_OW 302
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 25
10744: PUSH
10745: LD_INT 16
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: PUSH
10761: LD_INT 0
10763: GREATER
10764: AND
10765: IFFALSE 11043
10767: GO 10769
10769: DISABLE
// begin DialogueOn ;
10770: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
10774: LD_EXP 5
10778: PPUSH
10779: LD_STRING D10-Frank-1
10781: PPUSH
10782: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
10786: LD_INT 22
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 21
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 2
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 25
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 25
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: PUSH
10839: LD_INT 25
10841: PUSH
10842: LD_INT 4
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: PPUSH
10861: CALL_OW 69
10865: PUSH
10866: LD_EXP 1
10870: PUSH
10871: LD_EXP 5
10875: PUSH
10876: LD_EXP 2
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: LIST
10885: DIFF
10886: PPUSH
10887: LD_STRING D10-Sol1-1
10889: PPUSH
10890: LD_STRING D10-FSol1-1
10892: PPUSH
10893: CALL 4657 0 3
// Say ( Frank , D10-Frank-2 ) ;
10897: LD_EXP 5
10901: PPUSH
10902: LD_STRING D10-Frank-2
10904: PPUSH
10905: CALL_OW 88
// if IsOK ( Lisa ) then
10909: LD_EXP 2
10913: PPUSH
10914: CALL_OW 302
10918: IFFALSE 10934
// begin Say ( Lisa , D10-Lisa-2 ) ;
10920: LD_EXP 2
10924: PPUSH
10925: LD_STRING D10-Lisa-2
10927: PPUSH
10928: CALL_OW 88
// end else
10932: GO 11039
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
10934: LD_INT 22
10936: PUSH
10937: LD_INT 1
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 21
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: LD_INT 25
10959: PUSH
10960: LD_INT 1
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 25
10969: PUSH
10970: LD_INT 2
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 25
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 4
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PPUSH
11009: CALL_OW 69
11013: PUSH
11014: LD_EXP 1
11018: PUSH
11019: LD_EXP 5
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: DIFF
11028: PPUSH
11029: LD_STRING D10-Sol1-2
11031: PPUSH
11032: LD_STRING D10-FSol1-2
11034: PPUSH
11035: CALL 4657 0 3
// end ; DialogueOff ;
11039: CALL_OW 7
// end ;
11043: END
// every 10 10$30 do
11044: GO 11046
11046: DISABLE
// begin HarrisonSupport ;
11047: CALL 1845 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
11051: LD_EXP 16
11055: PPUSH
11056: CALL_OW 310
11060: PPUSH
11061: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
11065: LD_EXP 16
11069: PPUSH
11070: LD_STRING DEng-Eng1-1
11072: PPUSH
11073: CALL_OW 88
// wait ( 1 1$0 ) ;
11077: LD_INT 2100
11079: PPUSH
11080: CALL_OW 67
// DialogueOn ;
11084: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
11088: LD_EXP 13
11092: PPUSH
11093: LD_STRING DRem-Har-1
11095: PPUSH
11096: CALL_OW 94
// if contactWithRussian = 1 then
11100: LD_EXP 21
11104: PUSH
11105: LD_INT 1
11107: EQUAL
11108: IFFALSE 11124
// begin Say ( JMM , DRem-JMM-1 ) ;
11110: LD_EXP 1
11114: PPUSH
11115: LD_STRING DRem-JMM-1
11117: PPUSH
11118: CALL_OW 88
// end else
11122: GO 11136
// begin Say ( JMM , DRem-JMM-1a ) ;
11124: LD_EXP 1
11128: PPUSH
11129: LD_STRING DRem-JMM-1a
11131: PPUSH
11132: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
11136: LD_EXP 13
11140: PPUSH
11141: LD_STRING DRem-Har-2
11143: PPUSH
11144: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11148: LD_STRING DenisInDelta
11150: PPUSH
11151: LD_INT 0
11153: PPUSH
11154: CALL_OW 30
11158: PUSH
11159: LD_INT 1
11161: EQUAL
11162: IFFALSE 11178
// begin Say ( JMM , DRem-JMM-2 ) ;
11164: LD_EXP 1
11168: PPUSH
11169: LD_STRING DRem-JMM-2
11171: PPUSH
11172: CALL_OW 88
// end else
11176: GO 11190
// begin Say ( JMM , DRem-JMM-2a ) ;
11178: LD_EXP 1
11182: PPUSH
11183: LD_STRING DRem-JMM-2a
11185: PPUSH
11186: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
11190: LD_EXP 13
11194: PPUSH
11195: LD_STRING DRem-Har-3
11197: PPUSH
11198: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
11202: LD_EXP 1
11206: PPUSH
11207: LD_STRING DRem-JMM-3
11209: PPUSH
11210: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
11214: LD_EXP 13
11218: PPUSH
11219: LD_STRING DRem-Har-4
11221: PPUSH
11222: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
11226: LD_STRING DenisInDelta
11228: PPUSH
11229: LD_INT 0
11231: PPUSH
11232: CALL_OW 30
11236: PUSH
11237: LD_INT 1
11239: EQUAL
11240: IFFALSE 11268
// begin Say ( JMM , DRem-JMM-4 ) ;
11242: LD_EXP 1
11246: PPUSH
11247: LD_STRING DRem-JMM-4
11249: PPUSH
11250: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
11254: LD_EXP 13
11258: PPUSH
11259: LD_STRING DRem-Har-5
11261: PPUSH
11262: CALL_OW 94
// end else
11266: GO 11301
// begin SetRestrict ( 36 , 1 , true ) ;
11268: LD_INT 36
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11281: LD_INT 15
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11294: LD_STRING MR
11296: PPUSH
11297: CALL_OW 337
// end ; DialogueOff ;
11301: CALL_OW 7
// end ;
11305: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
11306: LD_STRING DenisInDelta
11308: PPUSH
11309: LD_INT 0
11311: PPUSH
11312: CALL_OW 30
11316: PUSH
11317: LD_INT 1
11319: EQUAL
11320: IFFALSE 11451
11322: GO 11324
11324: DISABLE
// begin PrepareDenis ;
11325: CALL 1766 0 0
// CenterNowOnUnits ( Denis ) ;
11329: LD_EXP 9
11333: PPUSH
11334: CALL_OW 87
// DialogueOn ;
11338: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
11342: LD_EXP 9
11346: PPUSH
11347: LD_STRING DDen-Den-1
11349: PPUSH
11350: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
11354: LD_EXP 1
11358: PPUSH
11359: LD_STRING DDen-JMM-1
11361: PPUSH
11362: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
11366: LD_EXP 9
11370: PPUSH
11371: LD_STRING DDen-Den-2
11373: PPUSH
11374: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
11378: LD_EXP 1
11382: PPUSH
11383: LD_STRING DDen-JMM-2
11385: PPUSH
11386: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
11390: LD_EXP 9
11394: PPUSH
11395: LD_STRING DDen-Den-3
11397: PPUSH
11398: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
11402: LD_EXP 1
11406: PPUSH
11407: LD_STRING DDen-JMM-3
11409: PPUSH
11410: CALL_OW 88
// DialogueOff ;
11414: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
11418: LD_INT 36
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
11431: LD_INT 15
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
11444: LD_STRING MR
11446: PPUSH
11447: CALL_OW 337
// end ;
11451: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
11452: CALL 11497 0 0
11456: PUSH
11457: LD_EXP 9
11461: PPUSH
11462: CALL_OW 302
11466: AND
11467: IFFALSE 11496
11469: GO 11471
11471: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
11472: LD_EXP 9
11476: PPUSH
11477: LD_STRING DR1-Den-1
11479: PPUSH
11480: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
11484: LD_EXP 1
11488: PPUSH
11489: LD_STRING DR1-JMM-1
11491: PPUSH
11492: CALL_OW 88
// end ;
11496: END
// function CheckOptoLab ; var i ; begin
11497: LD_INT 0
11499: PPUSH
11500: PPUSH
// result = false ;
11501: LD_ADDR_VAR 0 1
11505: PUSH
11506: LD_INT 0
11508: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: LD_INT 22
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 30
11529: PUSH
11530: LD_INT 7
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 30
11539: PUSH
11540: LD_INT 8
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PPUSH
11556: CALL_OW 69
11560: PUSH
11561: FOR_IN
11562: IFFALSE 11614
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
11564: LD_VAR 0 2
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 268
11576: PUSH
11577: LD_INT 15
11579: EQUAL
11580: PUSH
11581: LD_VAR 0 2
11585: PPUSH
11586: LD_INT 2
11588: PPUSH
11589: CALL_OW 268
11593: PUSH
11594: LD_INT 15
11596: EQUAL
11597: OR
11598: IFFALSE 11610
// begin result = true ;
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// break ;
11608: GO 11614
// end ; break ;
11610: GO 11614
// end ;
11612: GO 11561
11614: POP
11615: POP
// end ;
11616: LD_VAR 0 1
11620: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
11621: LD_INT 15
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 321
11631: PUSH
11632: LD_INT 2
11634: EQUAL
11635: PUSH
11636: LD_EXP 9
11640: PPUSH
11641: CALL_OW 302
11645: AND
11646: IFFALSE 11878
11648: GO 11650
11650: DISABLE
// begin DialogueOn ;
11651: CALL_OW 6
// if IsOK ( Denis ) then
11655: LD_EXP 9
11659: PPUSH
11660: CALL_OW 302
11664: IFFALSE 11680
// begin Say ( Denis , DR2-Den-1 ) ;
11666: LD_EXP 9
11670: PPUSH
11671: LD_STRING DR2-Den-1
11673: PPUSH
11674: CALL_OW 88
// end else
11678: GO 11739
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
11680: LD_INT 22
11682: PUSH
11683: LD_INT 1
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 21
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 25
11702: PUSH
11703: LD_INT 4
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: LIST
11714: PPUSH
11715: CALL_OW 69
11719: PUSH
11720: LD_EXP 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: DIFF
11728: PPUSH
11729: LD_STRING DR2-Sci1-1
11731: PPUSH
11732: LD_STRING DR2-FSci1-1
11734: PPUSH
11735: CALL 4657 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
11739: LD_EXP 1
11743: PPUSH
11744: LD_STRING DR2-JMM-1
11746: PPUSH
11747: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
11751: LD_INT 22
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 21
11763: PUSH
11764: LD_INT 1
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 2
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 25
11796: PUSH
11797: LD_INT 3
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 25
11806: PUSH
11807: LD_INT 4
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: PPUSH
11826: CALL_OW 69
11830: PUSH
11831: LD_EXP 1
11835: PUSH
11836: LD_EXP 9
11840: PUSH
11841: LD_EXP 8
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: DIFF
11851: PPUSH
11852: LD_STRING DR2-Sol1-1
11854: PPUSH
11855: LD_STRING DR2-Sol1-11
11857: PPUSH
11858: CALL 4657 0 3
// Say ( JMM , DR2-JMM-2 ) ;
11862: LD_EXP 1
11866: PPUSH
11867: LD_STRING DR2-JMM-2
11869: PPUSH
11870: CALL_OW 88
// DialogueOff ;
11874: CALL_OW 7
// end ;
11878: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
11879: LD_INT 22
11881: PUSH
11882: LD_INT 1
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 30
11891: PUSH
11892: LD_INT 36
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 69
11907: PUSH
11908: LD_INT 0
11910: EQUAL
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 1
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 2
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 33
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: PPUSH
11947: CALL_OW 69
11951: PUSH
11952: LD_INT 0
11954: GREATER
11955: AND
11956: PUSH
11957: LD_EXP 22
11961: PUSH
11962: LD_INT 0
11964: EQUAL
11965: AND
11966: IFFALSE 12038
11968: GO 11970
11970: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
11971: LD_INT 22
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 21
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 3
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: PPUSH
12006: CALL_OW 69
12010: PUSH
12011: LD_EXP 1
12015: PUSH
12016: EMPTY
12017: LIST
12018: DIFF
12019: PPUSH
12020: LD_STRING D3a-Mech1-1
12022: PPUSH
12023: LD_STRING D3a-Mech1-1
12025: PPUSH
12026: CALL 4657 0 3
// firstTower = 2 ;
12030: LD_ADDR_EXP 22
12034: PUSH
12035: LD_INT 2
12037: ST_TO_ADDR
// end ;
12038: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
12039: LD_INT 22
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 21
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PPUSH
12063: CALL_OW 69
12067: PUSH
12068: LD_INT 0
12070: EQUAL
12071: IFFALSE 12186
12073: GO 12075
12075: DISABLE
12076: LD_INT 0
12078: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 21
12096: PUSH
12097: LD_INT 1
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: LD_INT 25
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 2
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 25
12139: PUSH
12140: LD_INT 4
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: PPUSH
12159: CALL_OW 69
12163: PUSH
12164: FOR_IN
12165: IFFALSE 12184
// AddExperience ( i , 1 , 10000 ) ;
12167: LD_VAR 0 1
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: LD_INT 10000
12177: PPUSH
12178: CALL_OW 492
12182: GO 12164
12184: POP
12185: POP
// end ;
12186: PPOPN 1
12188: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
12189: LD_INT 22
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 36
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 69
12217: PUSH
12218: LD_INT 0
12220: GREATER
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 21
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 33
12244: PUSH
12245: LD_INT 2
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: PPUSH
12257: CALL_OW 69
12261: PUSH
12262: LD_INT 0
12264: GREATER
12265: AND
12266: PUSH
12267: CALL 12849 0 0
12271: AND
12272: IFFALSE 12846
12274: GO 12276
12276: DISABLE
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
12283: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
12284: LD_ADDR_VAR 0 3
12288: PUSH
12289: LD_INT 22
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 30
12301: PUSH
12302: LD_INT 36
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 69
12317: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
12318: LD_ADDR_VAR 0 4
12322: PUSH
12323: LD_INT 22
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 33
12345: PUSH
12346: LD_INT 2
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: EMPTY
12369: ST_TO_ADDR
// for i in tmpControlTowers do
12370: LD_ADDR_VAR 0 1
12374: PUSH
12375: LD_VAR 0 3
12379: PUSH
12380: FOR_IN
12381: IFFALSE 12844
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
12383: LD_EXP 1
12387: PPUSH
12388: CALL_OW 310
12392: PUSH
12393: LD_VAR 0 1
12397: EQUAL
12398: PUSH
12399: LD_EXP 1
12403: PPUSH
12404: CALL_OW 257
12408: PUSH
12409: LD_INT 3
12411: EQUAL
12412: AND
12413: IFFALSE 12543
// begin InGameOn ;
12415: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12419: LD_VAR 0 4
12423: PUSH
12424: LD_INT 1
12426: ARRAY
12427: PPUSH
12428: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
12432: LD_EXP 1
12436: PPUSH
12437: LD_STRING D4a-JMM-1
12439: PPUSH
12440: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
12444: LD_VAR 0 4
12448: PUSH
12449: LD_INT 1
12451: ARRAY
12452: PPUSH
12453: LD_EXP 1
12457: PPUSH
12458: CALL_OW 53
// wait ( 0 0$1 ) ;
12462: LD_INT 35
12464: PPUSH
12465: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12469: LD_VAR 0 4
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_VAR 0 4
12482: PUSH
12483: LD_INT 1
12485: ARRAY
12486: PPUSH
12487: CALL_OW 250
12491: PUSH
12492: LD_INT 3
12494: PLUS
12495: PPUSH
12496: LD_VAR 0 4
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PPUSH
12505: CALL_OW 251
12509: PUSH
12510: LD_INT 2
12512: MINUS
12513: PPUSH
12514: CALL_OW 111
// wait ( 0 0$2 ) ;
12518: LD_INT 70
12520: PPUSH
12521: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
12525: LD_EXP 1
12529: PPUSH
12530: LD_STRING D4b-JMM-1
12532: PPUSH
12533: CALL_OW 88
// InGameOff ;
12537: CALL_OW 9
// end else
12541: GO 12842
// begin InGameOn ;
12543: CALL_OW 8
// for j in UnitsInside ( i ) do
12547: LD_ADDR_VAR 0 2
12551: PUSH
12552: LD_VAR 0 1
12556: PPUSH
12557: CALL_OW 313
12561: PUSH
12562: FOR_IN
12563: IFFALSE 12598
// if GetClass ( j ) = 3 then
12565: LD_VAR 0 2
12569: PPUSH
12570: CALL_OW 257
12574: PUSH
12575: LD_INT 3
12577: EQUAL
12578: IFFALSE 12596
// tmpMechanicInside = tmpMechanicInside ^ j ;
12580: LD_ADDR_VAR 0 5
12584: PUSH
12585: LD_VAR 0 5
12589: PUSH
12590: LD_VAR 0 2
12594: ADD
12595: ST_TO_ADDR
12596: GO 12562
12598: POP
12599: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12600: LD_VAR 0 5
12604: PUSH
12605: LD_INT 1
12607: ARRAY
12608: PPUSH
12609: CALL_OW 258
12613: PUSH
12614: LD_INT 1
12616: EQUAL
12617: IFFALSE 12635
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
12619: LD_VAR 0 5
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PPUSH
12628: LD_STRING D4a-Mech1-1
12630: PPUSH
12631: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12635: LD_VAR 0 5
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: CALL_OW 258
12648: PUSH
12649: LD_INT 2
12651: EQUAL
12652: IFFALSE 12670
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
12654: LD_VAR 0 5
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: LD_STRING D4a-FMech1-1
12665: PPUSH
12666: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
12670: LD_VAR 0 4
12674: PUSH
12675: LD_INT 1
12677: ARRAY
12678: PPUSH
12679: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
12683: LD_VAR 0 4
12687: PUSH
12688: LD_INT 1
12690: ARRAY
12691: PPUSH
12692: LD_VAR 0 5
12696: PUSH
12697: LD_INT 1
12699: ARRAY
12700: PPUSH
12701: CALL_OW 53
// wait ( 0 0$1 ) ;
12705: LD_INT 35
12707: PPUSH
12708: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
12712: LD_VAR 0 4
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 4
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: CALL_OW 250
12734: PUSH
12735: LD_INT 3
12737: PLUS
12738: PPUSH
12739: LD_VAR 0 4
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PPUSH
12748: CALL_OW 251
12752: PUSH
12753: LD_INT 2
12755: MINUS
12756: PPUSH
12757: CALL_OW 111
// wait ( 0 0$2 ) ;
12761: LD_INT 70
12763: PPUSH
12764: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
12768: LD_VAR 0 5
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: PPUSH
12777: CALL_OW 258
12781: PUSH
12782: LD_INT 1
12784: EQUAL
12785: IFFALSE 12803
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
12787: LD_VAR 0 5
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_STRING D4b-Mech1-1
12798: PPUSH
12799: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
12803: LD_VAR 0 5
12807: PUSH
12808: LD_INT 1
12810: ARRAY
12811: PPUSH
12812: CALL_OW 258
12816: PUSH
12817: LD_INT 2
12819: EQUAL
12820: IFFALSE 12838
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
12822: LD_VAR 0 5
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: LD_STRING D4b-FMech1-1
12833: PPUSH
12834: CALL_OW 88
// InGameOff ;
12838: CALL_OW 9
// end ; end ;
12842: GO 12380
12844: POP
12845: POP
// end ;
12846: PPOPN 5
12848: END
// function CheckMehInside ; var i , j ; begin
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
12853: PPUSH
// result = false ;
12854: LD_ADDR_VAR 0 1
12858: PUSH
12859: LD_INT 0
12861: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
12862: LD_ADDR_VAR 0 2
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 1
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 30
12879: PUSH
12880: LD_INT 36
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: PUSH
12896: FOR_IN
12897: IFFALSE 12948
// begin for j in UnitsInside ( i ) do
12899: LD_ADDR_VAR 0 3
12903: PUSH
12904: LD_VAR 0 2
12908: PPUSH
12909: CALL_OW 313
12913: PUSH
12914: FOR_IN
12915: IFFALSE 12944
// begin if GetClass ( j ) = 3 then
12917: LD_VAR 0 3
12921: PPUSH
12922: CALL_OW 257
12926: PUSH
12927: LD_INT 3
12929: EQUAL
12930: IFFALSE 12942
// begin result = true ;
12932: LD_ADDR_VAR 0 1
12936: PUSH
12937: LD_INT 1
12939: ST_TO_ADDR
// break ;
12940: GO 12944
// end ; end ;
12942: GO 12914
12944: POP
12945: POP
// end ;
12946: GO 12896
12948: POP
12949: POP
// end ;
12950: LD_VAR 0 1
12954: RET
// every 25 25$0 do
12955: GO 12957
12957: DISABLE
// begin PrepareKurt ;
12958: CALL 15875 0 0
// end ;
12962: END
// every 0 0$1 trigger IsInArea ( Kurt , KurtEscape ) and readyToEscape = 1 do
12963: LD_EXP 18
12967: PPUSH
12968: LD_INT 9
12970: PPUSH
12971: CALL_OW 308
12975: PUSH
12976: LD_EXP 20
12980: PUSH
12981: LD_INT 1
12983: EQUAL
12984: AND
12985: IFFALSE 13059
12987: GO 12989
12989: DISABLE
// begin RemoveUnit ( Kurt ) ;
12990: LD_EXP 18
12994: PPUSH
12995: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
12999: LD_EXP 18
13003: PPUSH
13004: LD_STRING Kurt
13006: PPUSH
13007: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
13011: LD_INT 1
13013: PPUSH
13014: LD_INT 2
13016: PPUSH
13017: CALL_OW 81
13021: PUSH
13022: LD_INT 0
13024: EQUAL
13025: IFFALSE 13035
// KurtStatus = 1 ;
13027: LD_ADDR_EXP 19
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
13035: LD_INT 1
13037: PPUSH
13038: LD_INT 2
13040: PPUSH
13041: CALL_OW 81
13045: PUSH
13046: LD_INT 2
13048: EQUAL
13049: IFFALSE 13059
// KurtStatus = 2 ;
13051: LD_ADDR_EXP 19
13055: PUSH
13056: LD_INT 2
13058: ST_TO_ADDR
// end ;
13059: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_enemy and IsOK ( Kurt ) do
13060: LD_INT 1
13062: PPUSH
13063: LD_INT 2
13065: PPUSH
13066: CALL_OW 81
13070: PUSH
13071: LD_INT 2
13073: EQUAL
13074: PUSH
13075: LD_EXP 18
13079: PPUSH
13080: CALL_OW 302
13084: AND
13085: IFFALSE 13110
13087: GO 13089
13089: DISABLE
// begin DialogueOn ;
13090: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
13094: LD_EXP 18
13098: PPUSH
13099: LD_STRING D2a-Kurt-1
13101: PPUSH
13102: CALL_OW 88
// DialogueOff ;
13106: CALL_OW 7
// end ;
13110: END
// every 35 35$0 do
13111: GO 13113
13113: DISABLE
// begin PrepareJoan ;
13114: CALL 2241 0 0
// wait ( 1 1$0 ) ;
13118: LD_INT 2100
13120: PPUSH
13121: CALL_OW 67
// if IsOK ( Lisa ) then
13125: LD_EXP 2
13129: PPUSH
13130: CALL_OW 302
13134: IFFALSE 13264
// begin DialogueOn ;
13136: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
13140: LD_EXP 2
13144: PPUSH
13145: LD_STRING D7-Lisa-1
13147: PPUSH
13148: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13152: LD_EXP 1
13156: PPUSH
13157: LD_STRING D7-JMM-1
13159: PPUSH
13160: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
13164: LD_EXP 2
13168: PPUSH
13169: LD_STRING D7-Lisa-2
13171: PPUSH
13172: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
13176: LD_EXP 1
13180: PPUSH
13181: LD_STRING D7-JMM-2
13183: PPUSH
13184: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
13188: LD_EXP 2
13192: PPUSH
13193: LD_STRING D7-Lisa-3
13195: PPUSH
13196: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
13200: LD_EXP 1
13204: PPUSH
13205: LD_STRING D7-JMM-3
13207: PPUSH
13208: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
13212: LD_EXP 2
13216: PPUSH
13217: LD_STRING D7-Lisa-4
13219: PPUSH
13220: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
13224: LD_EXP 1
13228: PPUSH
13229: LD_STRING D7-JMM-4
13231: PPUSH
13232: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
13236: LD_EXP 1
13240: PPUSH
13241: LD_STRING D7-JMM-4a
13243: PPUSH
13244: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
13248: LD_EXP 2
13252: PPUSH
13253: LD_STRING D7-Lisa-5
13255: PPUSH
13256: CALL_OW 88
// DialogueOff ;
13260: CALL_OW 7
// end ; end ;
13264: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
13265: LD_INT 22
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 33
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: PUSH
13294: LD_INT 2
13296: GREATEREQUAL
13297: IFFALSE 13317
13299: GO 13301
13301: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
13302: LD_STRING MRa
13304: PPUSH
13305: CALL_OW 337
// remoteVehiclesBuild = 1 ;
13309: LD_ADDR_EXP 27
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// end ;
13317: END
// every 4 4$0 do
13318: GO 13320
13320: DISABLE
// PrepareRandoms ( 1 ) ;
13321: LD_INT 1
13323: PPUSH
13324: CALL 3335 0 1
13328: END
// every 10 10$0 do
13329: GO 13331
13331: DISABLE
// PrepareRandoms ( 2 ) ;
13332: LD_INT 2
13334: PPUSH
13335: CALL 3335 0 1
13339: END
// every 28 28$0 do
13340: GO 13342
13342: DISABLE
// PrepareRandoms ( 4 ) ;
13343: LD_INT 4
13345: PPUSH
13346: CALL 3335 0 1
13350: END
// every 32 32$0 do
13351: GO 13353
13353: DISABLE
// PrepareRandoms ( 5 ) ;
13354: LD_INT 5
13356: PPUSH
13357: CALL 3335 0 1
13361: END
// every 35 35$30 do
13362: GO 13364
13364: DISABLE
// PrepareRandoms ( 6 ) ;
13365: LD_INT 6
13367: PPUSH
13368: CALL 3335 0 1
13372: END
// every 37 37$20 do
13373: GO 13375
13375: DISABLE
// PrepareRandoms ( 7 ) ;
13376: LD_INT 7
13378: PPUSH
13379: CALL 3335 0 1
13383: END
// every 5 5$20 do
13384: GO 13386
13386: DISABLE
// begin DialogueOn ;
13387: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
13391: LD_EXP 10
13395: PPUSH
13396: LD_STRING D12a-Sci-1
13398: PPUSH
13399: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
13403: LD_EXP 1
13407: PPUSH
13408: LD_STRING D12a-JMM-1
13410: PPUSH
13411: CALL_OW 88
// DialogueOff ;
13415: CALL_OW 7
// cratesStatus = 1 ;
13419: LD_ADDR_EXP 35
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// end ;
13427: END
// every 13 13$0 do
13428: GO 13430
13430: DISABLE
// begin DialogueOn ;
13431: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
13435: LD_EXP 10
13439: PPUSH
13440: LD_STRING D12b-Sci-1
13442: PPUSH
13443: CALL_OW 94
// DialogueOff ;
13447: CALL_OW 7
// cratesStatus = 2 ;
13451: LD_ADDR_EXP 35
13455: PUSH
13456: LD_INT 2
13458: ST_TO_ADDR
// end ;
13459: END
// every 32 32$0 do
13460: GO 13462
13462: DISABLE
// begin DialogueOn ;
13463: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12c-Sci-1 ) ;
13467: LD_EXP 10
13471: PPUSH
13472: LD_STRING  D12c-Sci-1
13474: PPUSH
13475: CALL_OW 94
// DialogueOff ;
13479: CALL_OW 7
// wait ( 3 3$0 ) ;
13483: LD_INT 6300
13485: PPUSH
13486: CALL_OW 67
// DialogueOn ;
13490: CALL_OW 6
// SayRadio ( DeltaDoctor ,  D12d-Sci-1 ) ;
13494: LD_EXP 10
13498: PPUSH
13499: LD_STRING  D12d-Sci-1
13501: PPUSH
13502: CALL_OW 94
// DialogueOff ;
13506: CALL_OW 7
// cratesStatus = 1 ;
13510: LD_ADDR_EXP 35
13514: PUSH
13515: LD_INT 1
13517: ST_TO_ADDR
// end ;
13518: END
// every 42 42$0 do
13519: GO 13521
13521: DISABLE
// begin DialogueOn ;
13522: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
13526: LD_EXP 10
13530: PPUSH
13531: LD_STRING D12e-Sci-1
13533: PPUSH
13534: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
13538: LD_EXP 1
13542: PPUSH
13543: LD_STRING D12e-JMM-1
13545: PPUSH
13546: CALL_OW 88
// DialogueOff ;
13550: CALL_OW 7
// cratesStatus = 2 ;
13554: LD_ADDR_EXP 35
13558: PUSH
13559: LD_INT 2
13561: ST_TO_ADDR
// end ;
13562: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
13563: LD_INT 22
13565: PUSH
13566: LD_INT 6
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 2
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 34
13585: PUSH
13586: LD_INT 51
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 69
13602: PUSH
13603: LD_INT 0
13605: GREATER
13606: IFFALSE 13689
13608: GO 13610
13610: DISABLE
13611: LD_INT 0
13613: PPUSH
// begin enable ;
13614: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_INT 22
13622: PUSH
13623: LD_INT 6
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 21
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: PUSH
13667: FOR_IN
13668: IFFALSE 13687
// ComAgressiveMove ( i , 138 , 168 ) ;
13670: LD_VAR 0 1
13674: PPUSH
13675: LD_INT 138
13677: PPUSH
13678: LD_INT 168
13680: PPUSH
13681: CALL_OW 114
13685: GO 13667
13687: POP
13688: POP
// end ;
13689: PPOPN 1
13691: END
// every 0 0$1 do var i ;
13692: GO 13694
13694: DISABLE
13695: LD_INT 0
13697: PPUSH
// begin enable ;
13698: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_INT 5
13706: PPUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 22
13712: PUSH
13713: LD_INT 3
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_INT 6
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: EMPTY
13736: LIST
13737: PPUSH
13738: CALL_OW 70
13742: PUSH
13743: FOR_IN
13744: IFFALSE 13808
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
13746: LD_INT 5
13748: PPUSH
13749: LD_INT 22
13751: PUSH
13752: LD_INT 6
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 34
13761: PUSH
13762: LD_INT 51
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 70
13777: PUSH
13778: LD_INT 0
13780: GREATER
13781: IFFALSE 13797
// sendedConvoys = sendedConvoys + 1 ;
13783: LD_ADDR_EXP 36
13787: PUSH
13788: LD_EXP 36
13792: PUSH
13793: LD_INT 1
13795: PLUS
13796: ST_TO_ADDR
// RemoveUnit ( i ) ;
13797: LD_VAR 0 1
13801: PPUSH
13802: CALL_OW 64
// end ;
13806: GO 13743
13808: POP
13809: POP
// end ; end_of_file
13810: PPOPN 1
13812: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
13813: LD_VAR 0 1
13817: PUSH
13818: LD_INT 1
13820: EQUAL
13821: PUSH
13822: LD_VAR 0 2
13826: PUSH
13827: LD_INT 3
13829: EQUAL
13830: AND
13831: IFFALSE 13841
// contactWithRussian = 1 ;
13833: LD_ADDR_EXP 21
13837: PUSH
13838: LD_INT 1
13840: ST_TO_ADDR
// end ;
13841: PPOPN 2
13843: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL_OW 266
13853: PUSH
13854: LD_INT 36
13856: EQUAL
13857: PUSH
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 255
13867: PUSH
13868: LD_INT 1
13870: EQUAL
13871: AND
13872: PUSH
13873: LD_INT 22
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 21
13885: PUSH
13886: LD_INT 2
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 33
13895: PUSH
13896: LD_INT 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: PPUSH
13908: CALL_OW 69
13912: PUSH
13913: LD_INT 0
13915: EQUAL
13916: AND
13917: PUSH
13918: LD_EXP 22
13922: PUSH
13923: LD_INT 0
13925: EQUAL
13926: AND
13927: IFFALSE 13996
// begin firstTower = 1 ;
13929: LD_ADDR_EXP 22
13933: PUSH
13934: LD_INT 1
13936: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
13937: LD_INT 22
13939: PUSH
13940: LD_INT 1
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 21
13949: PUSH
13950: LD_INT 1
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 25
13959: PUSH
13960: LD_INT 3
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: PUSH
13977: LD_EXP 1
13981: PUSH
13982: EMPTY
13983: LIST
13984: DIFF
13985: PPUSH
13986: LD_STRING D3b-Mech1-1
13988: PPUSH
13989: LD_STRING D3b-Mech1-1
13991: PPUSH
13992: CALL 4657 0 3
// end ; if GetSide ( building ) = 3 then
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 255
14005: PUSH
14006: LD_INT 3
14008: EQUAL
14009: IFFALSE 14083
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14011: LD_ADDR_EXP 30
14015: PUSH
14016: LD_EXP 30
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 3
14028: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14029: LD_ADDR_EXP 30
14033: PUSH
14034: LD_EXP 30
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 3
14046: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14047: LD_ADDR_EXP 30
14051: PUSH
14052: LD_EXP 30
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 3
14064: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
14065: LD_ADDR_EXP 30
14069: PUSH
14070: LD_EXP 30
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 3
14082: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
14083: LD_VAR 0 1
14087: PPUSH
14088: CALL_OW 255
14092: PUSH
14093: LD_INT 3
14095: EQUAL
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 266
14106: PUSH
14107: LD_INT 0
14109: EQUAL
14110: PUSH
14111: LD_VAR 0 1
14115: PPUSH
14116: CALL_OW 266
14120: PUSH
14121: LD_INT 2
14123: EQUAL
14124: OR
14125: PUSH
14126: LD_VAR 0 1
14130: PPUSH
14131: CALL_OW 266
14135: PUSH
14136: LD_INT 4
14138: EQUAL
14139: OR
14140: PUSH
14141: EMPTY
14142: LIST
14143: AND
14144: IFFALSE 14155
// ComUpgrade ( building ) ;
14146: LD_VAR 0 1
14150: PPUSH
14151: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
14155: LD_VAR 0 1
14159: PPUSH
14160: CALL_OW 255
14164: PUSH
14165: LD_INT 3
14167: EQUAL
14168: PUSH
14169: LD_VAR 0 1
14173: PPUSH
14174: CALL_OW 266
14178: PUSH
14179: LD_INT 32
14181: EQUAL
14182: AND
14183: IFFALSE 14224
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
14185: LD_VAR 0 1
14189: PPUSH
14190: LD_INT 42
14192: PUSH
14193: LD_INT 43
14195: PUSH
14196: LD_INT 44
14198: PUSH
14199: LD_INT 46
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 1
14210: PPUSH
14211: LD_INT 4
14213: PPUSH
14214: CALL_OW 12
14218: ARRAY
14219: PPUSH
14220: CALL_OW 208
// end ; end ;
14224: PPOPN 1
14226: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human and [ GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 ] then
14227: LD_VAR 0 1
14231: PPUSH
14232: CALL_OW 255
14236: PUSH
14237: LD_INT 1
14239: EQUAL
14240: PUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: CALL_OW 247
14250: PUSH
14251: LD_INT 1
14253: EQUAL
14254: AND
14255: PUSH
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 257
14265: PUSH
14266: LD_INT 1
14268: EQUAL
14269: PUSH
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 257
14279: PUSH
14280: LD_INT 2
14282: EQUAL
14283: OR
14284: PUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 3
14297: EQUAL
14298: OR
14299: PUSH
14300: LD_VAR 0 1
14304: PPUSH
14305: CALL_OW 257
14309: PUSH
14310: LD_INT 4
14312: EQUAL
14313: OR
14314: PUSH
14315: EMPTY
14316: LIST
14317: AND
14318: IFFALSE 14334
// unitLost = unitLost + 1 ;
14320: LD_ADDR_EXP 29
14324: PUSH
14325: LD_EXP 29
14329: PUSH
14330: LD_INT 1
14332: PLUS
14333: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 255
14343: PUSH
14344: LD_INT 3
14346: EQUAL
14347: PUSH
14348: LD_VAR 0 1
14352: PPUSH
14353: CALL_OW 247
14357: PUSH
14358: LD_INT 3
14360: EQUAL
14361: AND
14362: IFFALSE 15054
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 266
14373: PUSH
14374: LD_INT 31
14376: EQUAL
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: CALL_OW 266
14387: PUSH
14388: LD_INT 32
14390: EQUAL
14391: OR
14392: PUSH
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL_OW 266
14402: PUSH
14403: LD_INT 36
14405: EQUAL
14406: OR
14407: PUSH
14408: LD_VAR 0 1
14412: PPUSH
14413: CALL_OW 266
14417: PUSH
14418: LD_INT 0
14420: EQUAL
14421: OR
14422: PUSH
14423: LD_VAR 0 1
14427: PPUSH
14428: CALL_OW 266
14432: PUSH
14433: LD_INT 24
14435: EQUAL
14436: OR
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 266
14447: PUSH
14448: LD_INT 17
14450: EQUAL
14451: OR
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 266
14462: PUSH
14463: LD_INT 25
14465: EQUAL
14466: OR
14467: PUSH
14468: LD_VAR 0 1
14472: PPUSH
14473: CALL_OW 266
14477: PUSH
14478: LD_INT 19
14480: EQUAL
14481: OR
14482: PUSH
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL_OW 266
14492: PUSH
14493: LD_INT 20
14495: EQUAL
14496: OR
14497: PUSH
14498: LD_VAR 0 1
14502: PPUSH
14503: CALL_OW 266
14507: PUSH
14508: LD_INT 18
14510: EQUAL
14511: OR
14512: PUSH
14513: LD_VAR 0 1
14517: PPUSH
14518: CALL_OW 266
14522: PUSH
14523: LD_INT 21
14525: EQUAL
14526: OR
14527: PUSH
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 266
14537: PUSH
14538: LD_INT 23
14540: EQUAL
14541: OR
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 266
14552: PUSH
14553: LD_INT 16
14555: EQUAL
14556: OR
14557: PUSH
14558: LD_VAR 0 1
14562: PPUSH
14563: CALL_OW 266
14567: PUSH
14568: LD_INT 6
14570: EQUAL
14571: OR
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 266
14582: PUSH
14583: LD_INT 29
14585: EQUAL
14586: OR
14587: PUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 266
14597: PUSH
14598: LD_INT 26
14600: EQUAL
14601: OR
14602: PUSH
14603: LD_VAR 0 1
14607: PPUSH
14608: CALL_OW 266
14612: PUSH
14613: LD_INT 30
14615: EQUAL
14616: OR
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 266
14627: PUSH
14628: LD_INT 28
14630: EQUAL
14631: OR
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 266
14642: PUSH
14643: LD_INT 27
14645: EQUAL
14646: OR
14647: PUSH
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 266
14657: PUSH
14658: LD_INT 33
14660: EQUAL
14661: OR
14662: PUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: CALL_OW 266
14672: PUSH
14673: LD_INT 2
14675: EQUAL
14676: OR
14677: PUSH
14678: LD_VAR 0 1
14682: PPUSH
14683: CALL_OW 266
14687: PUSH
14688: LD_INT 4
14690: EQUAL
14691: OR
14692: IFFALSE 14778
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
14694: LD_ADDR_EXP 30
14698: PUSH
14699: LD_EXP 30
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 266
14713: ADD
14714: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14715: LD_ADDR_EXP 30
14719: PUSH
14720: LD_EXP 30
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 250
14734: ADD
14735: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14736: LD_ADDR_EXP 30
14740: PUSH
14741: LD_EXP 30
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 251
14755: ADD
14756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14757: LD_ADDR_EXP 30
14761: PUSH
14762: LD_EXP 30
14766: PUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 254
14776: ADD
14777: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 266
14787: PUSH
14788: LD_INT 1
14790: EQUAL
14791: IFFALSE 14870
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
14793: LD_ADDR_EXP 30
14797: PUSH
14798: LD_EXP 30
14802: PUSH
14803: LD_INT 0
14805: ADD
14806: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14807: LD_ADDR_EXP 30
14811: PUSH
14812: LD_EXP 30
14816: PUSH
14817: LD_VAR 0 1
14821: PPUSH
14822: CALL_OW 250
14826: ADD
14827: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14828: LD_ADDR_EXP 30
14832: PUSH
14833: LD_EXP 30
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: CALL_OW 251
14847: ADD
14848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14849: LD_ADDR_EXP 30
14853: PUSH
14854: LD_EXP 30
14858: PUSH
14859: LD_VAR 0 1
14863: PPUSH
14864: CALL_OW 254
14868: ADD
14869: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
14870: LD_VAR 0 1
14874: PPUSH
14875: CALL_OW 266
14879: PUSH
14880: LD_INT 3
14882: EQUAL
14883: IFFALSE 14962
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
14885: LD_ADDR_EXP 30
14889: PUSH
14890: LD_EXP 30
14894: PUSH
14895: LD_INT 2
14897: ADD
14898: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14899: LD_ADDR_EXP 30
14903: PUSH
14904: LD_EXP 30
14908: PUSH
14909: LD_VAR 0 1
14913: PPUSH
14914: CALL_OW 250
14918: ADD
14919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
14920: LD_ADDR_EXP 30
14924: PUSH
14925: LD_EXP 30
14929: PUSH
14930: LD_VAR 0 1
14934: PPUSH
14935: CALL_OW 251
14939: ADD
14940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
14941: LD_ADDR_EXP 30
14945: PUSH
14946: LD_EXP 30
14950: PUSH
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 254
14960: ADD
14961: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
14962: LD_VAR 0 1
14966: PPUSH
14967: CALL_OW 266
14971: PUSH
14972: LD_INT 5
14974: EQUAL
14975: IFFALSE 15054
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
14977: LD_ADDR_EXP 30
14981: PUSH
14982: LD_EXP 30
14986: PUSH
14987: LD_INT 4
14989: ADD
14990: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
14991: LD_ADDR_EXP 30
14995: PUSH
14996: LD_EXP 30
15000: PUSH
15001: LD_VAR 0 1
15005: PPUSH
15006: CALL_OW 250
15010: ADD
15011: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
15012: LD_ADDR_EXP 30
15016: PUSH
15017: LD_EXP 30
15021: PUSH
15022: LD_VAR 0 1
15026: PPUSH
15027: CALL_OW 251
15031: ADD
15032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
15033: LD_ADDR_EXP 30
15037: PUSH
15038: LD_EXP 30
15042: PUSH
15043: LD_VAR 0 1
15047: PPUSH
15048: CALL_OW 254
15052: ADD
15053: ST_TO_ADDR
// end ; end ; end ;
15054: PPOPN 1
15056: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
15062: LD_VAR 0 1
15066: PPUSH
15067: CALL_OW 264
15071: PUSH
15072: LD_INT 51
15074: EQUAL
15075: PUSH
15076: LD_VAR 0 1
15080: PPUSH
15081: CALL_OW 255
15085: PUSH
15086: LD_INT 3
15088: EQUAL
15089: AND
15090: IFFALSE 15152
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
15092: LD_ADDR_VAR 0 5
15096: PUSH
15097: LD_INT 2
15099: PPUSH
15100: CALL_OW 274
15104: PPUSH
15105: LD_INT 1
15107: PPUSH
15108: CALL_OW 275
15112: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
15113: LD_INT 2
15115: PPUSH
15116: CALL_OW 274
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: LD_VAR 0 5
15128: PUSH
15129: LD_INT 100
15131: MINUS
15132: PPUSH
15133: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
15137: LD_VAR 0 1
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: LD_INT 100
15147: PPUSH
15148: CALL_OW 291
// end ; if building = rufabsupp then
15152: LD_VAR 0 2
15156: PUSH
15157: LD_INT 17
15159: EQUAL
15160: IFFALSE 15174
// SetSide ( vehicle , 6 ) ;
15162: LD_VAR 0 1
15166: PPUSH
15167: LD_INT 6
15169: PPUSH
15170: CALL_OW 235
// if GetSide ( building ) = 3 and IsOk ( building ) then
15174: LD_VAR 0 2
15178: PPUSH
15179: CALL_OW 255
15183: PUSH
15184: LD_INT 3
15186: EQUAL
15187: PUSH
15188: LD_VAR 0 2
15192: PPUSH
15193: CALL_OW 302
15197: AND
15198: IFFALSE 15268
// begin uc_side = 3 ;
15200: LD_ADDR_OWVAR 20
15204: PUSH
15205: LD_INT 3
15207: ST_TO_ADDR
// uc_nation = 3 ;
15208: LD_ADDR_OWVAR 21
15212: PUSH
15213: LD_INT 3
15215: ST_TO_ADDR
// hc_gallery :=  ;
15216: LD_ADDR_OWVAR 33
15220: PUSH
15221: LD_STRING 
15223: ST_TO_ADDR
// hc_name :=  ;
15224: LD_ADDR_OWVAR 26
15228: PUSH
15229: LD_STRING 
15231: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
15232: LD_INT 0
15234: PPUSH
15235: LD_EXP 33
15239: PPUSH
15240: LD_EXP 34
15244: PPUSH
15245: CALL_OW 12
15249: PPUSH
15250: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
15254: CALL_OW 44
15258: PPUSH
15259: LD_VAR 0 2
15263: PPUSH
15264: CALL_OW 52
// end ; end ;
15268: PPOPN 5
15270: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
15271: LD_VAR 0 1
15275: PPUSH
15276: CALL_OW 255
15280: PUSH
15281: LD_INT 3
15283: EQUAL
15284: IFFALSE 15300
// tamedApemans = tamedApemans + 1 ;
15286: LD_ADDR_EXP 31
15290: PUSH
15291: LD_EXP 31
15295: PUSH
15296: LD_INT 1
15298: PLUS
15299: ST_TO_ADDR
// end ; end_of_file
15300: PPOPN 2
15302: END
// every 0 0$30 trigger cratesStatus = 1 do
15303: LD_EXP 35
15307: PUSH
15308: LD_INT 1
15310: EQUAL
15311: IFFALSE 15375
15313: GO 15315
15315: DISABLE
// begin enable ;
15316: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
15317: LD_INT 350
15319: PUSH
15320: LD_INT 1050
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 1
15329: PPUSH
15330: LD_INT 2
15332: PPUSH
15333: CALL_OW 12
15337: ARRAY
15338: PPUSH
15339: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
15343: LD_INT 4
15345: PUSH
15346: LD_INT 5
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 1
15355: PPUSH
15356: LD_INT 2
15358: PPUSH
15359: CALL_OW 12
15363: ARRAY
15364: PPUSH
15365: LD_INT 7
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: CALL_OW 55
// end ;
15375: END
// every 1 1$0 trigger cratesStatus = 2 do
15376: LD_EXP 35
15380: PUSH
15381: LD_INT 2
15383: EQUAL
15384: IFFALSE 15448
15386: GO 15388
15388: DISABLE
// begin enable ;
15389: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
15390: LD_INT 3150
15392: PUSH
15393: LD_INT 4550
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 1
15402: PPUSH
15403: LD_INT 2
15405: PPUSH
15406: CALL_OW 12
15410: ARRAY
15411: PPUSH
15412: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15416: LD_INT 2
15418: PUSH
15419: LD_INT 5
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 1
15428: PPUSH
15429: LD_INT 2
15431: PPUSH
15432: CALL_OW 12
15436: ARRAY
15437: PPUSH
15438: LD_INT 8
15440: PPUSH
15441: LD_INT 1
15443: PPUSH
15444: CALL_OW 55
// end ;
15448: END
// every 0 0$30 + 0 0$10 do
15449: GO 15451
15451: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15452: LD_INT 4
15454: PUSH
15455: LD_INT 5
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 1
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 12
15472: ARRAY
15473: PPUSH
15474: LD_INT 8
15476: PPUSH
15477: LD_INT 1
15479: PPUSH
15480: CALL_OW 55
// Wait ( 0 0$15 ) ;
15484: LD_INT 525
15486: PPUSH
15487: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15491: LD_INT 4
15493: PUSH
15494: LD_INT 5
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 1
15503: PPUSH
15504: LD_INT 2
15506: PPUSH
15507: CALL_OW 12
15511: ARRAY
15512: PPUSH
15513: LD_INT 8
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: CALL_OW 55
// Wait ( 0 0$20 ) ;
15523: LD_INT 700
15525: PPUSH
15526: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
15530: LD_INT 4
15532: PUSH
15533: LD_INT 5
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: LD_INT 1
15542: PPUSH
15543: LD_INT 2
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: PPUSH
15552: LD_INT 8
15554: PPUSH
15555: LD_INT 1
15557: PPUSH
15558: CALL_OW 55
// end ; end_of_file
15562: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
15563: LD_EXP 23
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: IFFALSE 15872
15573: GO 15575
15575: DISABLE
15576: LD_INT 0
15578: PPUSH
15579: PPUSH
15580: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15581: LD_ADDR_VAR 0 2
15585: PUSH
15586: LD_INT 22
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 21
15598: PUSH
15599: LD_INT 3
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 2
15608: PUSH
15609: LD_INT 30
15611: PUSH
15612: LD_INT 0
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: PPUSH
15639: CALL_OW 69
15643: ST_TO_ADDR
// for i in tmp do
15644: LD_ADDR_VAR 0 1
15648: PUSH
15649: LD_VAR 0 2
15653: PUSH
15654: FOR_IN
15655: IFFALSE 15688
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_VAR 0 3
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 274
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 275
15684: PLUS
15685: ST_TO_ADDR
15686: GO 15654
15688: POP
15689: POP
// strings = [ ] ;
15690: LD_ADDR_EXP 26
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// if tmp = 0 then
15697: LD_VAR 0 2
15701: PUSH
15702: LD_INT 0
15704: EQUAL
15705: IFFALSE 15730
// strings = strings ^ [ #Am06-1 , needCrates ] ;
15707: LD_ADDR_EXP 26
15711: PUSH
15712: LD_EXP 26
15716: PUSH
15717: LD_STRING #Am06-1
15719: PUSH
15720: LD_EXP 24
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: ADD
15729: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
15730: LD_VAR 0 2
15734: PUSH
15735: LD_INT 0
15737: GREATER
15738: PUSH
15739: LD_EXP 24
15743: PUSH
15744: LD_VAR 0 3
15748: GREATER
15749: AND
15750: IFFALSE 15781
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
15752: LD_ADDR_EXP 26
15756: PUSH
15757: LD_EXP 26
15761: PUSH
15762: LD_STRING #Am06-1
15764: PUSH
15765: LD_EXP 24
15769: PUSH
15770: LD_VAR 0 3
15774: MINUS
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: ADD
15780: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
15781: LD_VAR 0 2
15785: PUSH
15786: LD_INT 0
15788: GREATER
15789: PUSH
15790: LD_EXP 24
15794: PUSH
15795: LD_VAR 0 3
15799: LESSEQUAL
15800: AND
15801: IFFALSE 15824
// strings = strings ^ [ #Am06-1 , 0 ] ;
15803: LD_ADDR_EXP 26
15807: PUSH
15808: LD_EXP 26
15812: PUSH
15813: LD_STRING #Am06-1
15815: PUSH
15816: LD_INT 0
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: ADD
15823: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
15824: LD_ADDR_EXP 25
15828: PUSH
15829: LD_EXP 25
15833: PUSH
15834: LD_INT 35
15836: MINUS
15837: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
15838: LD_ADDR_EXP 26
15842: PUSH
15843: LD_EXP 26
15847: PUSH
15848: LD_STRING #Am06-2
15850: PUSH
15851: LD_EXP 25
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: ADD
15860: ST_TO_ADDR
// display_strings = strings ;
15861: LD_ADDR_OWVAR 47
15865: PUSH
15866: LD_EXP 26
15870: ST_TO_ADDR
// enable ;
15871: ENABLE
// end ; end_of_file
15872: PPOPN 3
15874: END
// export function PrepareKurt ; var tmp , rnd , dec , dec2 ; begin
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
15882: LD_ADDR_VAR 0 2
15886: PUSH
15887: LD_INT 22
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 21
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: LD_INT 25
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 25
15922: PUSH
15923: LD_INT 2
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 25
15932: PUSH
15933: LD_INT 3
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 25
15942: PUSH
15943: LD_INT 4
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: PPUSH
15962: CALL_OW 69
15966: ST_TO_ADDR
// rnd = Rand ( 1 , tmp ) ;
15967: LD_ADDR_VAR 0 3
15971: PUSH
15972: LD_INT 1
15974: PPUSH
15975: LD_VAR 0 2
15979: PPUSH
15980: CALL_OW 12
15984: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
15985: LD_INT 105
15987: PPUSH
15988: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , tmp [ rnd ] , 25 ] ] ) ;
15992: LD_INT 22
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 21
16007: PUSH
16008: LD_INT 1
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 21
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 59
16037: PUSH
16038: EMPTY
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 91
16050: PUSH
16051: LD_VAR 0 2
16055: PUSH
16056: LD_VAR 0 3
16060: ARRAY
16061: PUSH
16062: LD_INT 25
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: NOT
16080: IFFALSE 15985
// blockSpawn = 1 ;
16082: LD_ADDR_EXP 28
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// uc_side = 2 ;
16090: LD_ADDR_OWVAR 20
16094: PUSH
16095: LD_INT 2
16097: ST_TO_ADDR
// uc_nation = 2 ;
16098: LD_ADDR_OWVAR 21
16102: PUSH
16103: LD_INT 2
16105: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
16106: LD_ADDR_EXP 18
16110: PUSH
16111: LD_STRING Kurt
16113: PPUSH
16114: LD_INT 0
16116: PPUSH
16117: CALL 4594 0 2
16121: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp [ rnd ] ) , GetY ( tmp [ rnd ] ) , 5 , true ) ;
16122: LD_EXP 18
16126: PPUSH
16127: LD_VAR 0 2
16131: PUSH
16132: LD_VAR 0 3
16136: ARRAY
16137: PPUSH
16138: CALL_OW 250
16142: PPUSH
16143: LD_VAR 0 2
16147: PUSH
16148: LD_VAR 0 3
16152: ARRAY
16153: PPUSH
16154: CALL_OW 251
16158: PPUSH
16159: LD_INT 5
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 50
// InGameOn ;
16169: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
16173: LD_EXP 18
16177: PPUSH
16178: CALL_OW 87
// wait ( 0 0$2 ) ;
16182: LD_INT 70
16184: PPUSH
16185: CALL_OW 67
// ComExitVehicle ( tmp [ rnd ] ) ;
16189: LD_VAR 0 2
16193: PUSH
16194: LD_VAR 0 3
16198: ARRAY
16199: PPUSH
16200: CALL_OW 121
// ComExitBuilding ( tmp [ rnd ] ) ;
16204: LD_VAR 0 2
16208: PUSH
16209: LD_VAR 0 3
16213: ARRAY
16214: PPUSH
16215: CALL_OW 122
// wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// ComTurnUnit ( Kurt , tmp [ rnd ] ) ;
16226: LD_EXP 18
16230: PPUSH
16231: LD_VAR 0 2
16235: PUSH
16236: LD_VAR 0 3
16240: ARRAY
16241: PPUSH
16242: CALL_OW 119
// ComTurnUnit ( tmp [ rnd ] , Kurt ) ;
16246: LD_VAR 0 2
16250: PUSH
16251: LD_VAR 0 3
16255: ARRAY
16256: PPUSH
16257: LD_EXP 18
16261: PPUSH
16262: CALL_OW 119
// DialogueOn ;
16266: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
16270: LD_EXP 18
16274: PPUSH
16275: LD_STRING D2-Kurt-1
16277: PPUSH
16278: CALL_OW 88
// if tmp [ rnd ] = JMM then
16282: LD_VAR 0 2
16286: PUSH
16287: LD_VAR 0 3
16291: ARRAY
16292: PUSH
16293: LD_EXP 1
16297: EQUAL
16298: IFFALSE 16390
// begin Say ( JMM , D2-JMM-1 ) ;
16300: LD_EXP 1
16304: PPUSH
16305: LD_STRING D2-JMM-1
16307: PPUSH
16308: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16312: LD_EXP 18
16316: PPUSH
16317: LD_STRING D2-Kurt-2
16319: PPUSH
16320: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
16324: LD_EXP 1
16328: PPUSH
16329: LD_STRING D2-JMM-2
16331: PPUSH
16332: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16336: LD_EXP 18
16340: PPUSH
16341: LD_STRING D2-Kurt-3
16343: PPUSH
16344: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
16348: LD_EXP 1
16352: PPUSH
16353: LD_STRING D2-JMM-3
16355: PPUSH
16356: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16360: LD_EXP 18
16364: PPUSH
16365: LD_STRING D2-Kurt-4
16367: PPUSH
16368: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
16372: LD_EXP 1
16376: PPUSH
16377: LD_STRING D2-JMM-4
16379: PPUSH
16380: CALL_OW 88
// DialogueOff ;
16384: CALL_OW 7
// end else
16388: GO 16820
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16390: LD_VAR 0 2
16394: PUSH
16395: LD_VAR 0 3
16399: ARRAY
16400: PPUSH
16401: CALL_OW 258
16405: PUSH
16406: LD_INT 1
16408: EQUAL
16409: IFFALSE 16429
// Say ( tmp [ rnd ] , D2-Sol1-1 ) ;
16411: LD_VAR 0 2
16415: PUSH
16416: LD_VAR 0 3
16420: ARRAY
16421: PPUSH
16422: LD_STRING D2-Sol1-1
16424: PPUSH
16425: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16429: LD_VAR 0 2
16433: PUSH
16434: LD_VAR 0 3
16438: ARRAY
16439: PPUSH
16440: CALL_OW 258
16444: PUSH
16445: LD_INT 2
16447: EQUAL
16448: IFFALSE 16468
// Say ( tmp [ rnd ] , D2-FSol1-1 ) ;
16450: LD_VAR 0 2
16454: PUSH
16455: LD_VAR 0 3
16459: ARRAY
16460: PPUSH
16461: LD_STRING D2-FSol1-1
16463: PPUSH
16464: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
16468: LD_EXP 18
16472: PPUSH
16473: LD_STRING D2-Kurt-2
16475: PPUSH
16476: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16480: LD_VAR 0 2
16484: PUSH
16485: LD_VAR 0 3
16489: ARRAY
16490: PPUSH
16491: CALL_OW 258
16495: PUSH
16496: LD_INT 1
16498: EQUAL
16499: IFFALSE 16519
// Say ( tmp [ rnd ] , D2-Sol1-2 ) ;
16501: LD_VAR 0 2
16505: PUSH
16506: LD_VAR 0 3
16510: ARRAY
16511: PPUSH
16512: LD_STRING D2-Sol1-2
16514: PPUSH
16515: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16519: LD_VAR 0 2
16523: PUSH
16524: LD_VAR 0 3
16528: ARRAY
16529: PPUSH
16530: CALL_OW 258
16534: PUSH
16535: LD_INT 2
16537: EQUAL
16538: IFFALSE 16558
// Say ( tmp [ rnd ] , D2-FSol1-2 ) ;
16540: LD_VAR 0 2
16544: PUSH
16545: LD_VAR 0 3
16549: ARRAY
16550: PPUSH
16551: LD_STRING D2-FSol1-2
16553: PPUSH
16554: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
16558: LD_EXP 18
16562: PPUSH
16563: LD_STRING D2-Kurt-3
16565: PPUSH
16566: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16570: LD_VAR 0 2
16574: PUSH
16575: LD_VAR 0 3
16579: ARRAY
16580: PPUSH
16581: CALL_OW 258
16585: PUSH
16586: LD_INT 1
16588: EQUAL
16589: IFFALSE 16609
// Say ( tmp [ rnd ] , D2-Sol1-3 ) ;
16591: LD_VAR 0 2
16595: PUSH
16596: LD_VAR 0 3
16600: ARRAY
16601: PPUSH
16602: LD_STRING D2-Sol1-3
16604: PPUSH
16605: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16609: LD_VAR 0 2
16613: PUSH
16614: LD_VAR 0 3
16618: ARRAY
16619: PPUSH
16620: CALL_OW 258
16624: PUSH
16625: LD_INT 2
16627: EQUAL
16628: IFFALSE 16648
// Say ( tmp [ rnd ] , D2-FSol1-3 ) ;
16630: LD_VAR 0 2
16634: PUSH
16635: LD_VAR 0 3
16639: ARRAY
16640: PPUSH
16641: LD_STRING D2-FSol1-3
16643: PPUSH
16644: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
16648: LD_EXP 18
16652: PPUSH
16653: LD_STRING D2-Kurt-4
16655: PPUSH
16656: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16660: LD_VAR 0 2
16664: PUSH
16665: LD_VAR 0 3
16669: ARRAY
16670: PPUSH
16671: CALL_OW 258
16675: PUSH
16676: LD_INT 1
16678: EQUAL
16679: IFFALSE 16699
// Say ( tmp [ rnd ] , D2-Sol1-4 ) ;
16681: LD_VAR 0 2
16685: PUSH
16686: LD_VAR 0 3
16690: ARRAY
16691: PPUSH
16692: LD_STRING D2-Sol1-4
16694: PPUSH
16695: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16699: LD_VAR 0 2
16703: PUSH
16704: LD_VAR 0 3
16708: ARRAY
16709: PPUSH
16710: CALL_OW 258
16714: PUSH
16715: LD_INT 2
16717: EQUAL
16718: IFFALSE 16738
// Say ( tmp [ rnd ] , D2-FSol1-4 ) ;
16720: LD_VAR 0 2
16724: PUSH
16725: LD_VAR 0 3
16729: ARRAY
16730: PPUSH
16731: LD_STRING D2-FSol1-4
16733: PPUSH
16734: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
16738: LD_VAR 0 2
16742: PUSH
16743: LD_VAR 0 3
16747: ARRAY
16748: PPUSH
16749: CALL_OW 258
16753: PUSH
16754: LD_INT 1
16756: EQUAL
16757: IFFALSE 16777
// Say ( tmp [ rnd ] , D2-Sol1-5 ) ;
16759: LD_VAR 0 2
16763: PUSH
16764: LD_VAR 0 3
16768: ARRAY
16769: PPUSH
16770: LD_STRING D2-Sol1-5
16772: PPUSH
16773: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
16777: LD_VAR 0 2
16781: PUSH
16782: LD_VAR 0 3
16786: ARRAY
16787: PPUSH
16788: CALL_OW 258
16792: PUSH
16793: LD_INT 2
16795: EQUAL
16796: IFFALSE 16816
// Say ( tmp [ rnd ] , D2-FSol1-5 ) ;
16798: LD_VAR 0 2
16802: PUSH
16803: LD_VAR 0 3
16807: ARRAY
16808: PPUSH
16809: LD_STRING D2-FSol1-5
16811: PPUSH
16812: CALL_OW 88
// DialogueOff ;
16816: CALL_OW 7
// end ; dec = ShowQuery1 ;
16820: LD_ADDR_VAR 0 4
16824: PUSH
16825: CALL 5196 0 0
16829: ST_TO_ADDR
// if dec = 1 then
16830: LD_VAR 0 4
16834: PUSH
16835: LD_INT 1
16837: EQUAL
16838: IFFALSE 16880
// begin DialogueOn ;
16840: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
16844: LD_EXP 18
16848: PPUSH
16849: LD_STRING D2a-Kurt-1
16851: PPUSH
16852: CALL_OW 88
// DialogueOff ;
16856: CALL_OW 7
// InGameOff ;
16860: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
16864: LD_INT 1
16866: PPUSH
16867: LD_INT 2
16869: PPUSH
16870: LD_INT 2
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 80
// end ; if dec = 2 then
16880: LD_VAR 0 4
16884: PUSH
16885: LD_INT 2
16887: EQUAL
16888: IFFALSE 17484
// begin DialogueOn ;
16890: CALL_OW 6
// if tmp [ rnd ] = JMM then
16894: LD_VAR 0 2
16898: PUSH
16899: LD_VAR 0 3
16903: ARRAY
16904: PUSH
16905: LD_EXP 1
16909: EQUAL
16910: IFFALSE 16966
// begin Say ( JMM , D2b-JMM-1 ) ;
16912: LD_EXP 1
16916: PPUSH
16917: LD_STRING D2b-JMM-1
16919: PPUSH
16920: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
16924: LD_EXP 18
16928: PPUSH
16929: LD_STRING D2b-Kurt-1
16931: PPUSH
16932: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
16936: LD_EXP 1
16940: PPUSH
16941: LD_STRING D2b-JMM-2
16943: PPUSH
16944: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
16948: LD_EXP 18
16952: PPUSH
16953: LD_STRING D2b-Kurt-2
16955: PPUSH
16956: CALL_OW 88
// DialogueOff ;
16960: CALL_OW 7
// end else
16964: GO 17228
// begin if GetSex ( tmp [ rnd ] ) = 1 then
16966: LD_VAR 0 2
16970: PUSH
16971: LD_VAR 0 3
16975: ARRAY
16976: PPUSH
16977: CALL_OW 258
16981: PUSH
16982: LD_INT 1
16984: EQUAL
16985: IFFALSE 17005
// Say ( tmp [ rnd ] , D2b-Sol1-1 ) ;
16987: LD_VAR 0 2
16991: PUSH
16992: LD_VAR 0 3
16996: ARRAY
16997: PPUSH
16998: LD_STRING D2b-Sol1-1
17000: PPUSH
17001: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17005: LD_VAR 0 2
17009: PUSH
17010: LD_VAR 0 3
17014: ARRAY
17015: PPUSH
17016: CALL_OW 258
17020: PUSH
17021: LD_INT 2
17023: EQUAL
17024: IFFALSE 17044
// Say ( tmp [ rnd ] , D2b-FSol1-1 ) ;
17026: LD_VAR 0 2
17030: PUSH
17031: LD_VAR 0 3
17035: ARRAY
17036: PPUSH
17037: LD_STRING D2b-FSol1-1
17039: PPUSH
17040: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
17044: LD_EXP 18
17048: PPUSH
17049: LD_STRING D2b-Kurt-1
17051: PPUSH
17052: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
17056: LD_VAR 0 2
17060: PUSH
17061: LD_VAR 0 3
17065: ARRAY
17066: PPUSH
17067: CALL_OW 258
17071: PUSH
17072: LD_INT 1
17074: EQUAL
17075: IFFALSE 17095
// Say ( tmp [ rnd ] , D2b-Sol1-2 ) ;
17077: LD_VAR 0 2
17081: PUSH
17082: LD_VAR 0 3
17086: ARRAY
17087: PPUSH
17088: LD_STRING D2b-Sol1-2
17090: PPUSH
17091: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17095: LD_VAR 0 2
17099: PUSH
17100: LD_VAR 0 3
17104: ARRAY
17105: PPUSH
17106: CALL_OW 258
17110: PUSH
17111: LD_INT 2
17113: EQUAL
17114: IFFALSE 17134
// Say ( tmp [ rnd ] , D2b-FSol1-2 ) ;
17116: LD_VAR 0 2
17120: PUSH
17121: LD_VAR 0 3
17125: ARRAY
17126: PPUSH
17127: LD_STRING D2b-FSol1-2
17129: PPUSH
17130: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
17134: LD_EXP 18
17138: PPUSH
17139: LD_STRING D2b-Kurt-2
17141: PPUSH
17142: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 1 then
17146: LD_VAR 0 2
17150: PUSH
17151: LD_VAR 0 3
17155: ARRAY
17156: PPUSH
17157: CALL_OW 258
17161: PUSH
17162: LD_INT 1
17164: EQUAL
17165: IFFALSE 17185
// Say ( tmp [ rnd ] , D2c-Sol1-2 ) ;
17167: LD_VAR 0 2
17171: PUSH
17172: LD_VAR 0 3
17176: ARRAY
17177: PPUSH
17178: LD_STRING D2c-Sol1-2
17180: PPUSH
17181: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17185: LD_VAR 0 2
17189: PUSH
17190: LD_VAR 0 3
17194: ARRAY
17195: PPUSH
17196: CALL_OW 258
17200: PUSH
17201: LD_INT 2
17203: EQUAL
17204: IFFALSE 17224
// Say ( tmp [ rnd ] , D2c-FSol1-2 ) ;
17206: LD_VAR 0 2
17210: PUSH
17211: LD_VAR 0 3
17215: ARRAY
17216: PPUSH
17217: LD_STRING D2c-FSol1-2
17219: PPUSH
17220: CALL_OW 88
// DialogueOff ;
17224: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
17228: LD_ADDR_VAR 0 5
17232: PUSH
17233: CALL 5270 0 0
17237: ST_TO_ADDR
// if dec2 = 1 then
17238: LD_VAR 0 5
17242: PUSH
17243: LD_INT 1
17245: EQUAL
17246: IFFALSE 17284
// begin Say ( Kurt , D2a-Kurt-1 ) ;
17248: LD_EXP 18
17252: PPUSH
17253: LD_STRING D2a-Kurt-1
17255: PPUSH
17256: CALL_OW 88
// DialogueOff ;
17260: CALL_OW 7
// InGameOff ;
17264: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
17268: LD_INT 1
17270: PPUSH
17271: LD_INT 2
17273: PPUSH
17274: LD_INT 2
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 80
// end ; if dec2 = 2 then
17284: LD_VAR 0 5
17288: PUSH
17289: LD_INT 2
17291: EQUAL
17292: IFFALSE 17484
// begin if tmp [ rnd ] = JMM then
17294: LD_VAR 0 2
17298: PUSH
17299: LD_VAR 0 3
17303: ARRAY
17304: PUSH
17305: LD_EXP 1
17309: EQUAL
17310: IFFALSE 17366
// begin Say ( JMM , D2c-JMM-1 ) ;
17312: LD_EXP 1
17316: PPUSH
17317: LD_STRING D2c-JMM-1
17319: PPUSH
17320: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17324: LD_EXP 18
17328: PPUSH
17329: LD_STRING D2c-Kurt-1
17331: PPUSH
17332: CALL_OW 88
// DialogueOff ;
17336: CALL_OW 7
// InGameOff ;
17340: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17344: LD_EXP 18
17348: PPUSH
17349: LD_INT 9
17351: PPUSH
17352: CALL_OW 113
// readyToEscape = 1 ;
17356: LD_ADDR_EXP 20
17360: PUSH
17361: LD_INT 1
17363: ST_TO_ADDR
// end else
17364: GO 17484
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17366: LD_VAR 0 2
17370: PUSH
17371: LD_VAR 0 3
17375: ARRAY
17376: PPUSH
17377: CALL_OW 258
17381: PUSH
17382: LD_INT 1
17384: EQUAL
17385: IFFALSE 17405
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17387: LD_VAR 0 2
17391: PUSH
17392: LD_VAR 0 3
17396: ARRAY
17397: PPUSH
17398: LD_STRING D2c-Sol1-1
17400: PPUSH
17401: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17405: LD_VAR 0 2
17409: PUSH
17410: LD_VAR 0 3
17414: ARRAY
17415: PPUSH
17416: CALL_OW 258
17420: PUSH
17421: LD_INT 2
17423: EQUAL
17424: IFFALSE 17444
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17426: LD_VAR 0 2
17430: PUSH
17431: LD_VAR 0 3
17435: ARRAY
17436: PPUSH
17437: LD_STRING D2c-FSol1-1
17439: PPUSH
17440: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17444: LD_EXP 18
17448: PPUSH
17449: LD_STRING D2c-Kurt-1
17451: PPUSH
17452: CALL_OW 88
// DialogueOff ;
17456: CALL_OW 7
// InGameOff ;
17460: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17464: LD_EXP 18
17468: PPUSH
17469: LD_INT 9
17471: PPUSH
17472: CALL_OW 113
// readyToEscape = 1 ;
17476: LD_ADDR_EXP 20
17480: PUSH
17481: LD_INT 1
17483: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
17484: LD_VAR 0 4
17488: PUSH
17489: LD_INT 3
17491: EQUAL
17492: IFFALSE 17688
// begin DialogueOn ;
17494: CALL_OW 6
// if tmp [ rnd ] = JMM then
17498: LD_VAR 0 2
17502: PUSH
17503: LD_VAR 0 3
17507: ARRAY
17508: PUSH
17509: LD_EXP 1
17513: EQUAL
17514: IFFALSE 17570
// begin Say ( JMM , D2c-JMM-1 ) ;
17516: LD_EXP 1
17520: PPUSH
17521: LD_STRING D2c-JMM-1
17523: PPUSH
17524: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17528: LD_EXP 18
17532: PPUSH
17533: LD_STRING D2c-Kurt-1
17535: PPUSH
17536: CALL_OW 88
// DialogueOff ;
17540: CALL_OW 7
// InGameOff ;
17544: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17548: LD_EXP 18
17552: PPUSH
17553: LD_INT 9
17555: PPUSH
17556: CALL_OW 113
// readyToEscape = 1 ;
17560: LD_ADDR_EXP 20
17564: PUSH
17565: LD_INT 1
17567: ST_TO_ADDR
// end else
17568: GO 17688
// begin if GetSex ( tmp [ rnd ] ) = 1 then
17570: LD_VAR 0 2
17574: PUSH
17575: LD_VAR 0 3
17579: ARRAY
17580: PPUSH
17581: CALL_OW 258
17585: PUSH
17586: LD_INT 1
17588: EQUAL
17589: IFFALSE 17609
// Say ( tmp [ rnd ] , D2c-Sol1-1 ) ;
17591: LD_VAR 0 2
17595: PUSH
17596: LD_VAR 0 3
17600: ARRAY
17601: PPUSH
17602: LD_STRING D2c-Sol1-1
17604: PPUSH
17605: CALL_OW 88
// if GetSex ( tmp [ rnd ] ) = 2 then
17609: LD_VAR 0 2
17613: PUSH
17614: LD_VAR 0 3
17618: ARRAY
17619: PPUSH
17620: CALL_OW 258
17624: PUSH
17625: LD_INT 2
17627: EQUAL
17628: IFFALSE 17648
// Say ( tmp [ rnd ] , D2c-FSol1-1 ) ;
17630: LD_VAR 0 2
17634: PUSH
17635: LD_VAR 0 3
17639: ARRAY
17640: PPUSH
17641: LD_STRING D2c-FSol1-1
17643: PPUSH
17644: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
17648: LD_EXP 18
17652: PPUSH
17653: LD_STRING D2c-Kurt-1
17655: PPUSH
17656: CALL_OW 88
// DialogueOff ;
17660: CALL_OW 7
// InGameOff ;
17664: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
17668: LD_EXP 18
17672: PPUSH
17673: LD_INT 9
17675: PPUSH
17676: CALL_OW 113
// readyToEscape = 1 ;
17680: LD_ADDR_EXP 20
17684: PUSH
17685: LD_INT 1
17687: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
17688: LD_ADDR_EXP 28
17692: PUSH
17693: LD_INT 0
17695: ST_TO_ADDR
// end ; end_of_file
17696: LD_VAR 0 1
17700: RET
// every 0 0$1 do
17701: GO 17703
17703: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
17704: LD_INT 3
17706: PPUSH
17707: LD_INT 32
17709: PPUSH
17710: LD_INT 3
17712: PPUSH
17713: CALL 5325 0 3
17717: END
// every 0 0$1 do
17718: GO 17720
17720: DISABLE
// begin enable ;
17721: ENABLE
// RepairBuilding ( 3 , rudepo ) ;
17722: LD_INT 3
17724: PPUSH
17725: LD_INT 2
17727: PPUSH
17728: CALL 5410 0 2
// if disableHealAI = 0 then
17732: LD_EXP 32
17736: PUSH
17737: LD_INT 0
17739: EQUAL
17740: IFFALSE 17758
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rulab ) ;
17742: LD_INT 3
17744: PPUSH
17745: LD_INT 10
17747: PPUSH
17748: LD_INT 11
17750: PPUSH
17751: LD_INT 32
17753: PPUSH
17754: CALL 5669 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
17758: LD_INT 3
17760: PPUSH
17761: LD_INT 51
17763: PPUSH
17764: LD_INT 7
17766: PPUSH
17767: CALL 6392 0 3
// RepairVehicle ( 3 , RussianRepairArea , 121 , 100 , 1 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_INT 14
17776: PPUSH
17777: LD_INT 121
17779: PPUSH
17780: LD_INT 100
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL 6572 0 5
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17790: LD_INT 3
17792: PPUSH
17793: LD_EXP 30
17797: PPUSH
17798: CALL 7363 0 2
// EscapeToBarrack ( 3 , [ ruarm1 , ruarm2 ] [ Rand ( 1 , 2 ) ] , RussianBase ) ;
17802: LD_INT 3
17804: PPUSH
17805: LD_INT 8
17807: PUSH
17808: LD_INT 67
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_INT 2
17820: PPUSH
17821: CALL_OW 12
17825: ARRAY
17826: PPUSH
17827: LD_INT 11
17829: PPUSH
17830: CALL 7569 0 3
// AttackNearBuildings ( 3 , 1 ) ;
17834: LD_INT 3
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL 7926 0 2
// end ;
17844: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 do
17845: LD_INT 22
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 55
17867: PUSH
17868: EMPTY
17869: LIST
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: LD_INT 34
17876: PUSH
17877: LD_INT 51
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: PUSH
17899: LD_INT 0
17901: EQUAL
17902: IFFALSE 18054
17904: GO 17906
17906: DISABLE
// begin enable ;
17907: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
17908: LD_INT 2
17910: PPUSH
17911: CALL_OW 274
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: LD_INT 1000
17921: PPUSH
17922: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 4 , 5 , 5 ] [ Difficulty ] , 1 , [ [ 43 , 43 , 43 , 44 ] , [ 44 , 44 , 44 , 43 ] , [ 44 , 44 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , 22 , 24 ] [ Difficulty ] ) ;
17926: LD_INT 3
17928: PPUSH
17929: LD_INT 21
17931: PPUSH
17932: LD_INT 4
17934: PUSH
17935: LD_INT 5
17937: PUSH
17938: LD_INT 5
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: LIST
17945: PUSH
17946: LD_OWVAR 67
17950: ARRAY
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: LD_INT 43
17957: PUSH
17958: LD_INT 43
17960: PUSH
17961: LD_INT 43
17963: PUSH
17964: LD_INT 44
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 44
17975: PUSH
17976: LD_INT 44
17978: PUSH
17979: LD_INT 44
17981: PUSH
17982: LD_INT 43
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 44
17993: PUSH
17994: LD_INT 44
17996: PUSH
17997: LD_INT 44
17999: PUSH
18000: LD_INT 44
18002: PUSH
18003: LD_INT 46
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: LD_OWVAR 67
18022: ARRAY
18023: PPUSH
18024: LD_INT 1
18026: PPUSH
18027: LD_INT 1
18029: PPUSH
18030: LD_INT 22
18032: PUSH
18033: LD_INT 22
18035: PUSH
18036: LD_INT 24
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PUSH
18044: LD_OWVAR 67
18048: ARRAY
18049: PPUSH
18050: CALL 5935 0 8
// end ;
18054: END
// every 5 5$0 do
18055: GO 18057
18057: DISABLE
// begin enable ;
18058: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
18059: LD_INT 17
18061: PPUSH
18062: LD_INT 22
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_INT 42
18073: PUSH
18074: LD_INT 43
18076: PUSH
18077: LD_INT 44
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 1
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: CALL_OW 12
18095: ARRAY
18096: PPUSH
18097: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
18101: LD_INT 17
18103: PPUSH
18104: LD_INT 22
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: LD_INT 1
18112: PPUSH
18113: LD_INT 51
18115: PPUSH
18116: CALL_OW 185
// end ;
18120: END
// every 2 2$0 do var i , j ;
18121: GO 18123
18123: DISABLE
18124: LD_INT 0
18126: PPUSH
18127: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
18128: LD_INT 14700
18130: PUSH
18131: LD_INT 33600
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 1
18140: PPUSH
18141: LD_INT 2
18143: PPUSH
18144: CALL_OW 12
18148: ARRAY
18149: PPUSH
18150: CALL_OW 67
// disableHealAI = 1 ;
18154: LD_ADDR_EXP 32
18158: PUSH
18159: LD_INT 1
18161: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18162: LD_ADDR_VAR 0 1
18166: PUSH
18167: LD_INT 22
18169: PUSH
18170: LD_INT 3
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 25
18179: PUSH
18180: LD_INT 4
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: PUSH
18196: FOR_IN
18197: IFFALSE 18210
// ComExitBuilding ( i ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: CALL_OW 122
18208: GO 18196
18210: POP
18211: POP
// wait ( 0 0$1 ) ;
18212: LD_INT 35
18214: PPUSH
18215: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18219: LD_INT 35
18221: PPUSH
18222: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18226: LD_ADDR_VAR 0 1
18230: PUSH
18231: LD_INT 22
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 25
18243: PUSH
18244: LD_INT 4
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PPUSH
18255: CALL_OW 69
18259: PUSH
18260: FOR_IN
18261: IFFALSE 18338
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18263: LD_ADDR_VAR 0 2
18267: PUSH
18268: LD_INT 19
18270: PPUSH
18271: LD_INT 22
18273: PUSH
18274: LD_INT 0
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 25
18283: PUSH
18284: LD_INT 12
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 70
18299: PUSH
18300: FOR_IN
18301: IFFALSE 18334
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18303: LD_VAR 0 1
18307: PPUSH
18308: LD_VAR 0 2
18312: PPUSH
18313: CALL_OW 250
18317: PPUSH
18318: LD_VAR 0 2
18322: PPUSH
18323: CALL_OW 251
18327: PPUSH
18328: CALL_OW 191
// end ;
18332: GO 18300
18334: POP
18335: POP
// end ;
18336: GO 18260
18338: POP
18339: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18340: LD_INT 22
18342: PUSH
18343: LD_INT 3
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 25
18352: PUSH
18353: LD_INT 4
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PPUSH
18364: CALL_OW 69
18368: PUSH
18369: LD_INT 0
18371: EQUAL
18372: PUSH
18373: LD_EXP 31
18377: PUSH
18378: LD_INT 6
18380: PUSH
18381: LD_INT 7
18383: PUSH
18384: LD_INT 8
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: LD_OWVAR 67
18396: ARRAY
18397: GREATEREQUAL
18398: OR
18399: PUSH
18400: LD_INT 19
18402: PPUSH
18403: LD_INT 22
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 12
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PPUSH
18427: CALL_OW 70
18431: PUSH
18432: LD_INT 0
18434: EQUAL
18435: OR
18436: IFFALSE 18219
// disableHealAI = 0 ;
18438: LD_ADDR_EXP 32
18442: PUSH
18443: LD_INT 0
18445: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
18446: LD_ADDR_VAR 0 1
18450: PUSH
18451: LD_INT 22
18453: PUSH
18454: LD_INT 3
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 25
18463: PUSH
18464: LD_INT 12
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18497
// SetClass ( i , 16 ) ;
18483: LD_VAR 0 1
18487: PPUSH
18488: LD_INT 16
18490: PPUSH
18491: CALL_OW 336
18495: GO 18480
18497: POP
18498: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
18499: LD_ADDR_VAR 0 1
18503: PUSH
18504: LD_INT 22
18506: PUSH
18507: LD_INT 3
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 25
18516: PUSH
18517: LD_INT 4
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 69
18532: PUSH
18533: FOR_IN
18534: IFFALSE 18553
// ComMoveXY ( i , 113 , 94 ) ;
18536: LD_VAR 0 1
18540: PPUSH
18541: LD_INT 113
18543: PPUSH
18544: LD_INT 94
18546: PPUSH
18547: CALL_OW 111
18551: GO 18533
18553: POP
18554: POP
// end ;
18555: PPOPN 2
18557: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
18558: LD_INT 21
18560: PPUSH
18561: CALL_OW 255
18565: PUSH
18566: LD_INT 3
18568: EQUAL
18569: PUSH
18570: LD_INT 21
18572: PPUSH
18573: CALL_OW 302
18577: AND
18578: PUSH
18579: LD_INT 22
18581: PUSH
18582: LD_INT 3
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 34
18591: PUSH
18592: LD_INT 51
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PPUSH
18603: CALL_OW 69
18607: PUSH
18608: LD_INT 0
18610: EQUAL
18611: AND
18612: IFFALSE 18644
18614: GO 18616
18616: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
18617: LD_INT 21
18619: PPUSH
18620: LD_INT 23
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: LD_INT 51
18631: PPUSH
18632: CALL_OW 185
// wait ( 5 5$0 ) ;
18636: LD_INT 10500
18638: PPUSH
18639: CALL_OW 67
// enable ;
18643: ENABLE
// end ; end_of_file
18644: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
18645: LD_EXP 25
18649: PUSH
18650: LD_INT 0
18652: LESSEQUAL
18653: IFFALSE 18802
18655: GO 18657
18657: DISABLE
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 1
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 21
18680: PUSH
18681: LD_INT 3
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: LD_INT 30
18693: PUSH
18694: LD_INT 0
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 30
18703: PUSH
18704: LD_INT 1
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 69
18725: ST_TO_ADDR
// for i in tmp do
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_VAR 0 2
18735: PUSH
18736: FOR_IN
18737: IFFALSE 18770
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
18739: LD_ADDR_VAR 0 3
18743: PUSH
18744: LD_VAR 0 3
18748: PUSH
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 274
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 275
18766: PLUS
18767: ST_TO_ADDR
18768: GO 18736
18770: POP
18771: POP
// if yourCrates >= needCrates then
18772: LD_VAR 0 3
18776: PUSH
18777: LD_EXP 24
18781: GREATEREQUAL
18782: IFFALSE 18795
// begin FinishMission ( yourCrates ) ;
18784: LD_VAR 0 3
18788: PPUSH
18789: CALL 18805 0 1
// end else
18793: GO 18802
// begin YouLost ( matmin ) ;
18795: LD_STRING matmin
18797: PPUSH
18798: CALL_OW 104
// end ; end ;
18802: PPOPN 3
18804: END
// export function FinishMission ( crates ) ; begin
18805: LD_INT 0
18807: PPUSH
// if crates + 100 > crates then
18808: LD_VAR 0 1
18812: PUSH
18813: LD_INT 100
18815: PLUS
18816: PUSH
18817: LD_VAR 0 1
18821: GREATER
18822: IFFALSE 18846
// begin AddMedal ( cans , 1 ) ;
18824: LD_STRING cans
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
18834: LD_INT 1
18836: PPUSH
18837: LD_STRING 06_crates_1
18839: PPUSH
18840: CALL_OW 39
// end else
18844: GO 18867
// begin AddMedal ( cans , - 1 ) ;
18846: LD_STRING cans
18848: PPUSH
18849: LD_INT 1
18851: NEG
18852: PPUSH
18853: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
18857: LD_INT 0
18859: PPUSH
18860: LD_STRING 06_crates_1
18862: PPUSH
18863: CALL_OW 39
// end ; if unitLost < 2 then
18867: LD_EXP 29
18871: PUSH
18872: LD_INT 2
18874: LESS
18875: IFFALSE 18889
// begin AddMedal ( people , 1 ) ;
18877: LD_STRING people
18879: PPUSH
18880: LD_INT 1
18882: PPUSH
18883: CALL_OW 101
// end else
18887: GO 18900
// begin AddMedal ( people , - 1 ) ;
18889: LD_STRING people
18891: PPUSH
18892: LD_INT 1
18894: NEG
18895: PPUSH
18896: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
18900: LD_EXP 27
18904: PPUSH
18905: LD_STRING 06_remoteVehs_1
18907: PPUSH
18908: CALL_OW 39
// if remoteVehiclesBuild = 1 then
18912: LD_EXP 27
18916: PUSH
18917: LD_INT 1
18919: EQUAL
18920: IFFALSE 18934
// begin AddMedal ( remote , 1 ) ;
18922: LD_STRING remote
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 101
// end else
18932: GO 18974
// begin if GetTech ( 18 , 1 ) = state_enabled then
18934: LD_INT 18
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 321
18944: PUSH
18945: LD_INT 1
18947: EQUAL
18948: IFFALSE 18963
// begin AddMedal ( remote , - 1 ) ;
18950: LD_STRING remote
18952: PPUSH
18953: LD_INT 1
18955: NEG
18956: PPUSH
18957: CALL_OW 101
// end else
18961: GO 18974
// begin AddMedal ( remote , - 2 ) ;
18963: LD_STRING remote
18965: PPUSH
18966: LD_INT 2
18968: NEG
18969: PPUSH
18970: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
18974: LD_EXP 19
18978: PPUSH
18979: LD_STRING 06_KurtStatus_1
18981: PPUSH
18982: CALL_OW 39
// GiveMedals ( Main ) ;
18986: LD_STRING Main
18988: PPUSH
18989: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
18993: LD_INT 50
18995: PUSH
18996: EMPTY
18997: LIST
18998: PUSH
18999: LD_INT 22
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 21
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 2
19021: PUSH
19022: LD_INT 25
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 25
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 25
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 25
19054: PUSH
19055: LD_INT 4
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19084: LD_EXP 1
19088: PPUSH
19089: LD_EXP 38
19093: PUSH
19094: LD_STRING JMM
19096: STR
19097: PPUSH
19098: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19102: LD_EXP 2
19106: PPUSH
19107: LD_EXP 38
19111: PUSH
19112: LD_STRING Lisa
19114: STR
19115: PPUSH
19116: CALL 4813 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19120: LD_EXP 3
19124: PPUSH
19125: LD_EXP 38
19129: PUSH
19130: LD_STRING Bobby
19132: STR
19133: PPUSH
19134: CALL 4813 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19138: LD_EXP 4
19142: PPUSH
19143: LD_EXP 38
19147: PUSH
19148: LD_STRING Cyrus
19150: STR
19151: PPUSH
19152: CALL 4813 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19156: LD_EXP 5
19160: PPUSH
19161: LD_EXP 38
19165: PUSH
19166: LD_STRING Frank
19168: STR
19169: PPUSH
19170: CALL 4813 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19174: LD_EXP 6
19178: PPUSH
19179: LD_EXP 38
19183: PUSH
19184: LD_STRING Brown
19186: STR
19187: PPUSH
19188: CALL 4813 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19192: LD_EXP 7
19196: PPUSH
19197: LD_EXP 38
19201: PUSH
19202: LD_STRING Donaldson
19204: STR
19205: PPUSH
19206: CALL 4813 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19210: LD_EXP 8
19214: PPUSH
19215: LD_EXP 38
19219: PUSH
19220: LD_STRING Gladstone
19222: STR
19223: PPUSH
19224: CALL 4813 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19228: LD_EXP 9
19232: PPUSH
19233: LD_EXP 38
19237: PUSH
19238: LD_STRING Denis
19240: STR
19241: PPUSH
19242: CALL 4813 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
19246: LD_EXP 14
19250: PPUSH
19251: LD_EXP 38
19255: PUSH
19256: LD_STRING Joan
19258: STR
19259: PPUSH
19260: CALL 4813 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
19264: LD_EXP 15
19268: PPUSH
19269: LD_STRING 06_JoanStatus_1
19271: PPUSH
19272: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
19276: LD_INT 50
19278: PUSH
19279: EMPTY
19280: LIST
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 21
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 25
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 25
19327: PUSH
19328: LD_INT 3
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 25
19337: PUSH
19338: LD_INT 4
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: PPUSH
19358: CALL_OW 69
19362: PUSH
19363: LD_EXP 1
19367: PUSH
19368: LD_EXP 2
19372: PUSH
19373: LD_EXP 3
19377: PUSH
19378: LD_EXP 4
19382: PUSH
19383: LD_EXP 5
19387: PUSH
19388: LD_EXP 6
19392: PUSH
19393: LD_EXP 7
19397: PUSH
19398: LD_EXP 8
19402: PUSH
19403: LD_EXP 9
19407: PUSH
19408: LD_EXP 14
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: DIFF
19425: PPUSH
19426: LD_STRING 06_other_survivors
19428: PPUSH
19429: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
19433: LD_INT 50
19435: PUSH
19436: EMPTY
19437: LIST
19438: PUSH
19439: LD_INT 22
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: LD_INT 21
19451: PUSH
19452: LD_INT 1
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: LD_INT 25
19464: PUSH
19465: LD_INT 12
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 25
19474: PUSH
19475: LD_INT 16
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: PPUSH
19493: CALL_OW 69
19497: PPUSH
19498: LD_STRING 06_other_apemans
19500: PPUSH
19501: CALL_OW 38
// YouWin ;
19505: CALL_OW 103
// end ; end_of_file
19509: LD_VAR 0 2
19513: RET
// every 1 1$0 trigger sendedConvoys = [ 5 , 4 , 3 ] [ Difficulty ] do
19514: LD_EXP 36
19518: PUSH
19519: LD_INT 5
19521: PUSH
19522: LD_INT 4
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: PUSH
19533: LD_OWVAR 67
19537: ARRAY
19538: EQUAL
19539: IFFALSE 19654
19541: GO 19543
19543: DISABLE
// begin enable ;
19544: ENABLE
// sendedConvoys = 0 ;
19545: LD_ADDR_EXP 36
19549: PUSH
19550: LD_INT 0
19552: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 3 , 4 ) , rand ( 4 , 5 ) , rand ( 6 , 7 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
19553: LD_INT 6
19555: PPUSH
19556: LD_INT 3
19558: PPUSH
19559: LD_INT 3
19561: PPUSH
19562: LD_INT 4
19564: PPUSH
19565: CALL_OW 12
19569: PUSH
19570: LD_INT 4
19572: PPUSH
19573: LD_INT 5
19575: PPUSH
19576: CALL_OW 12
19580: PUSH
19581: LD_INT 6
19583: PPUSH
19584: LD_INT 7
19586: PPUSH
19587: CALL_OW 12
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PUSH
19597: LD_OWVAR 67
19601: ARRAY
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: LD_INT 0
19608: PPUSH
19609: LD_INT 0
19611: PPUSH
19612: LD_INT 3
19614: PPUSH
19615: LD_EXP 33
19619: PPUSH
19620: LD_EXP 34
19624: PPUSH
19625: CALL_OW 12
19629: PPUSH
19630: LD_INT 18
19632: PPUSH
19633: LD_INT 17
19635: PPUSH
19636: LD_INT 1
19638: PPUSH
19639: LD_INT 1
19641: PPUSH
19642: LD_INT 2
19644: PPUSH
19645: CALL_OW 12
19649: PPUSH
19650: CALL 8156 0 12
// end ; end_of_file
19654: END
// export function PrepareNature ; var i , un ; begin
19655: LD_INT 0
19657: PPUSH
19658: PPUSH
19659: PPUSH
// for i = 1 to Difficulty + 2 do
19660: LD_ADDR_VAR 0 2
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_OWVAR 67
19674: PUSH
19675: LD_INT 2
19677: PLUS
19678: PUSH
19679: FOR_TO
19680: IFFALSE 19789
// begin hc_sex = sex_male ;
19682: LD_ADDR_OWVAR 27
19686: PUSH
19687: LD_INT 1
19689: ST_TO_ADDR
// uc_side = 0 ;
19690: LD_ADDR_OWVAR 20
19694: PUSH
19695: LD_INT 0
19697: ST_TO_ADDR
// uc_nation = nation_nature ;
19698: LD_ADDR_OWVAR 21
19702: PUSH
19703: LD_INT 0
19705: ST_TO_ADDR
// hc_class = class_tiger ;
19706: LD_ADDR_OWVAR 28
19710: PUSH
19711: LD_INT 14
19713: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19714: LD_ADDR_OWVAR 31
19718: PUSH
19719: LD_EXP 34
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: LD_INT 0
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19739: LD_ADDR_OWVAR 35
19743: PUSH
19744: LD_INT 5
19746: NEG
19747: PPUSH
19748: LD_INT 5
19750: PPUSH
19751: CALL_OW 12
19755: PUSH
19756: LD_OWVAR 67
19760: MUL
19761: ST_TO_ADDR
// un = CreateHuman ;
19762: LD_ADDR_VAR 0 3
19766: PUSH
19767: CALL_OW 44
19771: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19772: LD_VAR 0 3
19776: PPUSH
19777: LD_INT 20
19779: PPUSH
19780: LD_INT 0
19782: PPUSH
19783: CALL_OW 49
// end ;
19787: GO 19679
19789: POP
19790: POP
// for i = 1 to rand ( 3 , 4 ) do
19791: LD_ADDR_VAR 0 2
19795: PUSH
19796: DOUBLE
19797: LD_INT 1
19799: DEC
19800: ST_TO_ADDR
19801: LD_INT 3
19803: PPUSH
19804: LD_INT 4
19806: PPUSH
19807: CALL_OW 12
19811: PUSH
19812: FOR_TO
19813: IFFALSE 19907
// begin hc_sex = sex_male ;
19815: LD_ADDR_OWVAR 27
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// uc_side = 0 ;
19823: LD_ADDR_OWVAR 20
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// uc_nation = nation_nature ;
19831: LD_ADDR_OWVAR 21
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// hc_class = 18 ;
19839: LD_ADDR_OWVAR 28
19843: PUSH
19844: LD_INT 18
19846: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19847: LD_ADDR_OWVAR 31
19851: PUSH
19852: LD_EXP 34
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: ST_TO_ADDR
// hc_agressivity = 0 ;
19872: LD_ADDR_OWVAR 35
19876: PUSH
19877: LD_INT 0
19879: ST_TO_ADDR
// un = CreateHuman ;
19880: LD_ADDR_VAR 0 3
19884: PUSH
19885: CALL_OW 44
19889: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 20
19897: PPUSH
19898: LD_INT 0
19900: PPUSH
19901: CALL_OW 49
// end ;
19905: GO 19812
19907: POP
19908: POP
// end ; end_of_file
19909: LD_VAR 0 1
19913: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19914: LD_EXP 1
19918: PPUSH
19919: CALL_OW 301
19923: IFFALSE 19935
19925: GO 19927
19927: DISABLE
// YouLost ( JMM ) ;
19928: LD_STRING JMM
19930: PPUSH
19931: CALL_OW 104
19935: END
