// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 21993 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// for i = 1 to 72 do
5930: LD_ADDR_VAR 0 5
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_INT 72
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6002
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5946: LD_VAR 0 5
5950: PPUSH
5951: LD_VAR 0 1
5955: PPUSH
5956: CALL_OW 321
5960: PUSH
5961: LD_INT 1
5963: EQUAL
5964: PUSH
5965: LD_VAR 0 5
5969: PPUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: CALL_OW 482
5979: PUSH
5980: LD_INT 1
5982: EQUAL
5983: AND
5984: IFFALSE 6000
// AddComResearch ( lab , i ) ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_VAR 0 5
5995: PPUSH
5996: CALL_OW 184
6000: GO 5943
6002: POP
6003: POP
// end ;
6004: LD_VAR 0 4
6008: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6009: LD_INT 0
6011: PPUSH
6012: PPUSH
6013: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: LD_VAR 0 3
6049: LESSEQUAL
6050: IFFALSE 6158
// begin for i = 1 to vehCount do
6052: LD_ADDR_VAR 0 9
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_VAR 0 3
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6156
// begin weapon = weaponTab [ i ] ;
6070: LD_ADDR_VAR 0 10
6074: PUSH
6075: LD_VAR 0 4
6079: PUSH
6080: LD_VAR 0 9
6084: ARRAY
6085: ST_TO_ADDR
// if weapon = 46 then
6086: LD_VAR 0 10
6090: PUSH
6091: LD_INT 46
6093: EQUAL
6094: IFFALSE 6125
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6096: LD_VAR 0 2
6100: PPUSH
6101: LD_INT 24
6103: PPUSH
6104: LD_VAR 0 5
6108: PPUSH
6109: LD_VAR 0 6
6113: PPUSH
6114: LD_VAR 0 10
6118: PPUSH
6119: CALL_OW 185
// end else
6123: GO 6154
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6125: LD_VAR 0 2
6129: PPUSH
6130: LD_VAR 0 7
6134: PPUSH
6135: LD_VAR 0 5
6139: PPUSH
6140: LD_VAR 0 6
6144: PPUSH
6145: LD_VAR 0 10
6149: PPUSH
6150: CALL_OW 185
// end ; end ;
6154: GO 6067
6156: POP
6157: POP
// end ; end ;
6158: LD_VAR 0 8
6162: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6163: LD_INT 0
6165: PPUSH
6166: PPUSH
6167: PPUSH
6168: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6169: LD_ADDR_VAR 0 8
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_VAR 0 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 21
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: LD_INT 24
6201: PUSH
6202: LD_INT 650
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: ST_TO_ADDR
// if damageVehicles > 0 then
6223: LD_VAR 0 8
6227: PUSH
6228: LD_INT 0
6230: GREATER
6231: IFFALSE 6252
// ComMoveXY ( damageVehicles , repX , repY ) ;
6233: LD_VAR 0 8
6237: PPUSH
6238: LD_VAR 0 3
6242: PPUSH
6243: LD_VAR 0 4
6247: PPUSH
6248: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6252: LD_VAR 0 8
6256: PPUSH
6257: LD_INT 95
6259: PUSH
6260: LD_VAR 0 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 58
6274: PUSH
6275: EMPTY
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 72
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: IFFALSE 6361
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6296: LD_ADDR_VAR 0 6
6300: PUSH
6301: LD_VAR 0 8
6305: PPUSH
6306: LD_INT 95
6308: PUSH
6309: LD_VAR 0 2
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: LD_INT 58
6323: PUSH
6324: EMPTY
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 72
6339: PUSH
6340: FOR_IN
6341: IFFALSE 6359
// ComExitVehicle ( UnitsInside ( i ) ) ;
6343: LD_VAR 0 6
6347: PPUSH
6348: CALL_OW 313
6352: PPUSH
6353: CALL_OW 121
6357: GO 6340
6359: POP
6360: POP
// end ;
6361: LD_VAR 0 5
6365: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
6373: PPUSH
6374: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6375: LD_ADDR_VAR 0 8
6379: PUSH
6380: LD_INT 22
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 24
6404: PUSH
6405: LD_INT 660
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 58
6417: PUSH
6418: EMPTY
6419: LIST
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 34
6426: PUSH
6427: LD_INT 43
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 34
6436: PUSH
6437: LD_INT 44
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 34
6446: PUSH
6447: LD_INT 46
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: PPUSH
6471: CALL_OW 69
6475: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6476: LD_INT 22
6478: PUSH
6479: LD_VAR 0 1
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: LD_INT 21
6490: PUSH
6491: LD_INT 2
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 24
6500: PUSH
6501: LD_INT 1000
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: LD_INT 58
6513: PUSH
6514: EMPTY
6515: LIST
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 34
6522: PUSH
6523: LD_INT 43
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 34
6532: PUSH
6533: LD_INT 44
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 34
6542: PUSH
6543: LD_INT 46
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 69
6571: PUSH
6572: LD_INT 5
6574: PUSH
6575: LD_INT 6
6577: PUSH
6578: LD_INT 6
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_OWVAR 67
6590: ARRAY
6591: EQUAL
6592: IFFALSE 7157
// repeat wait ( 0 0$1 ) ;
6594: LD_INT 35
6596: PPUSH
6597: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6601: LD_ADDR_VAR 0 8
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_VAR 0 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 21
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 24
6630: PUSH
6631: LD_INT 660
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: LD_INT 58
6643: PUSH
6644: EMPTY
6645: LIST
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: LD_INT 34
6652: PUSH
6653: LD_INT 43
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 34
6662: PUSH
6663: LD_INT 44
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 34
6672: PUSH
6673: LD_INT 46
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6702: LD_INT 22
6704: PUSH
6705: LD_VAR 0 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 95
6716: PUSH
6717: LD_VAR 0 2
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL_OW 69
6734: NOT
6735: PUSH
6736: LD_VAR 0 11
6740: PUSH
6741: LD_INT 0
6743: EQUAL
6744: AND
6745: IFFALSE 6800
// for i := 1 to wayX do
6747: LD_ADDR_VAR 0 6
6751: PUSH
6752: DOUBLE
6753: LD_INT 1
6755: DEC
6756: ST_TO_ADDR
6757: LD_VAR 0 3
6761: PUSH
6762: FOR_TO
6763: IFFALSE 6798
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6765: LD_VAR 0 8
6769: PPUSH
6770: LD_VAR 0 3
6774: PUSH
6775: LD_VAR 0 6
6779: ARRAY
6780: PPUSH
6781: LD_VAR 0 4
6785: PUSH
6786: LD_VAR 0 6
6790: ARRAY
6791: PPUSH
6792: CALL_OW 114
6796: GO 6762
6798: POP
6799: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6800: LD_INT 22
6802: PUSH
6803: LD_VAR 0 1
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 95
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: IFFALSE 7056
// begin seeEnemy = 1 ;
6834: LD_ADDR_VAR 0 11
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
// for j in vehiclesOK do
6842: LD_ADDR_VAR 0 7
6846: PUSH
6847: LD_VAR 0 8
6851: PUSH
6852: FOR_IN
6853: IFFALSE 7054
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6855: LD_ADDR_VAR 0 9
6859: PUSH
6860: LD_INT 81
6862: PUSH
6863: LD_VAR 0 1
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 101
6874: PUSH
6875: LD_INT 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PPUSH
6891: LD_VAR 0 7
6895: PPUSH
6896: CALL_OW 74
6900: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6901: LD_ADDR_VAR 0 10
6905: PUSH
6906: LD_INT 81
6908: PUSH
6909: LD_VAR 0 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 101
6920: PUSH
6921: LD_INT 1
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 2
6930: PUSH
6931: LD_INT 59
6933: PUSH
6934: EMPTY
6935: LIST
6936: PUSH
6937: LD_INT 21
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: PPUSH
6976: LD_VAR 0 7
6980: PPUSH
6981: CALL_OW 74
6985: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
6986: LD_VAR 0 7
6990: PPUSH
6991: LD_VAR 0 9
6995: PPUSH
6996: CALL_OW 296
7000: PUSH
7001: LD_INT 8
7003: PLUS
7004: PUSH
7005: LD_VAR 0 7
7009: PPUSH
7010: LD_VAR 0 10
7014: PPUSH
7015: CALL_OW 296
7019: LESS
7020: IFFALSE 7038
// ComAttackUnit ( j , target1 ) else
7022: LD_VAR 0 7
7026: PPUSH
7027: LD_VAR 0 9
7031: PPUSH
7032: CALL_OW 115
7036: GO 7052
// ComAttackUnit ( j , target2 ) ;
7038: LD_VAR 0 7
7042: PPUSH
7043: LD_VAR 0 10
7047: PPUSH
7048: CALL_OW 115
// end ;
7052: GO 6852
7054: POP
7055: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7056: LD_INT 22
7058: PUSH
7059: LD_VAR 0 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 21
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 24
7080: PUSH
7081: LD_INT 1000
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: LD_INT 58
7093: PUSH
7094: EMPTY
7095: LIST
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 34
7102: PUSH
7103: LD_INT 43
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 34
7112: PUSH
7113: LD_INT 44
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 34
7122: PUSH
7123: LD_INT 46
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: PUSH
7152: LD_INT 0
7154: EQUAL
7155: IFFALSE 6594
// seeEnemy = 0 ;
7157: LD_ADDR_VAR 0 11
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// end ;
7165: LD_VAR 0 5
7169: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7170: LD_INT 0
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7178: LD_ADDR_VAR 0 8
7182: PUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: CALL_OW 313
7192: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7193: LD_ADDR_VAR 0 9
7197: PUSH
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_INT 22
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 25
7217: PUSH
7218: LD_INT 2
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 24
7227: PUSH
7228: LD_INT 750
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: LD_INT 54
7240: PUSH
7241: EMPTY
7242: LIST
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 70
7258: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7259: LD_ADDR_VAR 0 6
7263: PUSH
7264: LD_VAR 0 3
7268: PPUSH
7269: LD_INT 22
7271: PUSH
7272: LD_VAR 0 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: LD_INT 1000
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: PPUSH
7316: CALL_OW 70
7320: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7321: LD_VAR 0 6
7325: NOT
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_VAR 0 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 25
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 24
7351: PUSH
7352: LD_INT 250
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 69
7368: NOT
7369: AND
7370: IFFALSE 7374
// exit ;
7372: GO 7556
// if buildings_list > 0 and engineerOkInside then
7374: LD_VAR 0 6
7378: PUSH
7379: LD_INT 0
7381: GREATER
7382: PUSH
7383: LD_VAR 0 8
7387: AND
7388: IFFALSE 7399
// ComExitBuilding ( engineerOkInside ) ;
7390: LD_VAR 0 8
7394: PPUSH
7395: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7399: LD_VAR 0 6
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 9
7412: PUSH
7413: LD_INT 0
7415: GREATER
7416: AND
7417: IFFALSE 7437
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7419: LD_VAR 0 9
7423: PPUSH
7424: LD_VAR 0 6
7428: PUSH
7429: LD_INT 1
7431: ARRAY
7432: PPUSH
7433: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7437: LD_VAR 0 6
7441: PUSH
7442: LD_INT 0
7444: EQUAL
7445: PUSH
7446: LD_VAR 0 4
7450: PUSH
7451: LD_INT 0
7453: EQUAL
7454: AND
7455: PUSH
7456: LD_VAR 0 9
7460: PUSH
7461: LD_INT 0
7463: GREATER
7464: AND
7465: IFFALSE 7481
// ComEnterUnit ( engineerOkOutside , building ) ;
7467: LD_VAR 0 9
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7481: LD_VAR 0 9
7485: PUSH
7486: LD_INT 0
7488: GREATER
7489: PUSH
7490: LD_VAR 0 6
7494: PUSH
7495: LD_INT 0
7497: EQUAL
7498: AND
7499: PUSH
7500: LD_VAR 0 4
7504: PUSH
7505: LD_INT 0
7507: GREATER
7508: AND
7509: IFFALSE 7556
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7511: LD_VAR 0 9
7515: PPUSH
7516: LD_VAR 0 4
7520: PUSH
7521: LD_INT 1
7523: ARRAY
7524: PPUSH
7525: LD_VAR 0 4
7529: PUSH
7530: LD_INT 2
7532: ARRAY
7533: PPUSH
7534: LD_VAR 0 4
7538: PUSH
7539: LD_INT 3
7541: ARRAY
7542: PPUSH
7543: LD_VAR 0 4
7547: PUSH
7548: LD_INT 4
7550: ARRAY
7551: PPUSH
7552: CALL_OW 145
// end ;
7556: LD_VAR 0 5
7560: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7561: LD_INT 0
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7572: LD_ADDR_VAR 0 6
7576: PUSH
7577: LD_INT 22
7579: PUSH
7580: LD_VAR 0 1
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 23
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 24
7611: PUSH
7612: LD_INT 251
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 69
7629: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7630: LD_ADDR_VAR 0 7
7634: PUSH
7635: LD_VAR 0 3
7639: PPUSH
7640: LD_INT 22
7642: PUSH
7643: LD_VAR 0 1
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 23
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 25
7664: PUSH
7665: LD_INT 4
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 50
7674: PUSH
7675: EMPTY
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: PPUSH
7684: CALL_OW 70
7688: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7689: LD_ADDR_VAR 0 10
7693: PUSH
7694: LD_VAR 0 3
7698: PPUSH
7699: LD_INT 22
7701: PUSH
7702: LD_VAR 0 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 21
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: LD_INT 24
7743: PUSH
7744: LD_INT 750
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PPUSH
7761: CALL_OW 70
7765: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7766: LD_ADDR_VAR 0 11
7770: PUSH
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_INT 22
7778: PUSH
7779: LD_VAR 0 1
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: LD_INT 21
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: LD_INT 25
7803: PUSH
7804: LD_INT 3
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 3
7817: PUSH
7818: LD_INT 24
7820: PUSH
7821: LD_INT 1000
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PPUSH
7838: CALL_OW 70
7842: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
7843: LD_VAR 0 10
7847: NOT
7848: PUSH
7849: LD_VAR 0 11
7853: NOT
7854: AND
7855: PUSH
7856: LD_VAR 0 6
7860: NOT
7861: AND
7862: IFFALSE 7866
// exit ;
7864: GO 8100
// if damageUnits > 0 and sci_list > 0 then
7866: LD_VAR 0 10
7870: PUSH
7871: LD_INT 0
7873: GREATER
7874: PUSH
7875: LD_VAR 0 6
7879: PUSH
7880: LD_INT 0
7882: GREATER
7883: AND
7884: IFFALSE 7900
// ComMoveToArea ( damageUnits , healArea ) ;
7886: LD_VAR 0 10
7890: PPUSH
7891: LD_VAR 0 2
7895: PPUSH
7896: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
7900: LD_VAR 0 11
7904: PUSH
7905: LD_INT 0
7907: GREATER
7908: PUSH
7909: LD_VAR 0 6
7913: PUSH
7914: LD_INT 0
7916: GREATER
7917: AND
7918: IFFALSE 7929
// ComExitBuilding ( sci_list ) ;
7920: LD_VAR 0 6
7924: PPUSH
7925: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
7929: LD_VAR 0 11
7933: PUSH
7934: LD_INT 0
7936: GREATER
7937: PUSH
7938: LD_VAR 0 7
7942: PUSH
7943: LD_INT 0
7945: GREATER
7946: AND
7947: IFFALSE 7967
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
7949: LD_VAR 0 7
7953: PPUSH
7954: LD_VAR 0 11
7958: PUSH
7959: LD_INT 1
7961: ARRAY
7962: PPUSH
7963: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
7967: LD_VAR 0 10
7971: PUSH
7972: LD_INT 0
7974: EQUAL
7975: PUSH
7976: LD_VAR 0 11
7980: PUSH
7981: LD_INT 0
7983: EQUAL
7984: AND
7985: PUSH
7986: LD_VAR 0 7
7990: PUSH
7991: LD_INT 0
7993: GREATER
7994: AND
7995: IFFALSE 8100
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
7997: LD_ADDR_VAR 0 12
8001: PUSH
8002: LD_INT 22
8004: PUSH
8005: LD_VAR 0 1
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 30
8026: PUSH
8027: LD_INT 8
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8044: LD_ADDR_VAR 0 13
8048: PUSH
8049: LD_INT 1
8051: PPUSH
8052: LD_VAR 0 12
8056: PPUSH
8057: CALL_OW 12
8061: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8062: LD_VAR 0 7
8066: PPUSH
8067: LD_INT 3
8069: PUSH
8070: LD_INT 60
8072: PUSH
8073: EMPTY
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 72
8084: PPUSH
8085: LD_VAR 0 12
8089: PUSH
8090: LD_VAR 0 13
8094: ARRAY
8095: PPUSH
8096: CALL_OW 120
// end ; end ;
8100: LD_VAR 0 5
8104: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8105: LD_INT 0
8107: PPUSH
8108: PPUSH
8109: PPUSH
8110: PPUSH
// tmpTab = [ ] ;
8111: LD_ADDR_VAR 0 6
8115: PUSH
8116: EMPTY
8117: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8118: LD_INT 22
8120: PUSH
8121: LD_VAR 0 1
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: LD_INT 30
8132: PUSH
8133: LD_INT 32
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PPUSH
8144: CALL_OW 69
8148: PUSH
8149: LD_INT 0
8151: GREATER
8152: IFFALSE 8235
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8154: LD_ADDR_VAR 0 4
8158: PUSH
8159: LD_INT 22
8161: PUSH
8162: LD_VAR 0 1
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 30
8173: PUSH
8174: LD_INT 32
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PPUSH
8185: CALL_OW 69
8189: PUSH
8190: FOR_IN
8191: IFFALSE 8233
// begin for j in UnitsInside ( i ) do
8193: LD_ADDR_VAR 0 5
8197: PUSH
8198: LD_VAR 0 4
8202: PPUSH
8203: CALL_OW 313
8207: PUSH
8208: FOR_IN
8209: IFFALSE 8229
// tmpTab = tmpTab ^ j ;
8211: LD_ADDR_VAR 0 6
8215: PUSH
8216: LD_VAR 0 6
8220: PUSH
8221: LD_VAR 0 5
8225: ADD
8226: ST_TO_ADDR
8227: GO 8208
8229: POP
8230: POP
// end ;
8231: GO 8190
8233: POP
8234: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 2
8244: PPUSH
8245: CALL_OW 250
8249: PPUSH
8250: LD_VAR 0 2
8254: PPUSH
8255: CALL_OW 251
8259: PPUSH
8260: CALL_OW 114
// end ;
8264: LD_VAR 0 3
8268: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8269: LD_INT 0
8271: PPUSH
8272: PPUSH
8273: PPUSH
8274: PPUSH
// enable ;
8275: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8276: LD_ADDR_VAR 0 7
8280: PUSH
8281: LD_VAR 0 3
8285: PPUSH
8286: CALL_OW 435
8290: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8291: LD_ADDR_VAR 0 6
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: LD_VAR 0 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 34
8310: PUSH
8311: LD_VAR 0 2
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 69
8328: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8329: LD_VAR 0 6
8333: PUSH
8334: LD_INT 0
8336: GREATER
8337: PUSH
8338: LD_VAR 0 3
8342: PPUSH
8343: CALL_OW 435
8347: AND
8348: PUSH
8349: LD_VAR 0 7
8353: PUSH
8354: LD_INT 0
8356: GREATER
8357: AND
8358: IFFALSE 8407
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8360: LD_VAR 0 6
8364: PUSH
8365: LD_INT 1
8367: ARRAY
8368: PPUSH
8369: LD_VAR 0 7
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: LD_VAR 0 7
8382: PUSH
8383: LD_INT 2
8385: ARRAY
8386: PPUSH
8387: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8391: LD_VAR 0 6
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_INT 100
8402: PPUSH
8403: CALL_OW 240
// end ; end ;
8407: LD_VAR 0 4
8411: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8412: LD_INT 0
8414: PPUSH
8415: PPUSH
8416: PPUSH
8417: PPUSH
8418: PPUSH
8419: PPUSH
8420: PPUSH
8421: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8422: LD_ADDR_VAR 0 6
8426: PUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 56
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: LD_INT 24
8452: PUSH
8453: LD_INT 700
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: LD_INT 60
8465: PUSH
8466: EMPTY
8467: LIST
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: LD_INT 25
8478: PUSH
8479: LD_INT 1
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 25
8488: PUSH
8489: LD_INT 5
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 25
8498: PUSH
8499: LD_INT 8
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 25
8508: PUSH
8509: LD_INT 9
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 70
8534: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8535: LD_ADDR_VAR 0 7
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_INT 22
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 30
8559: PUSH
8560: LD_INT 32
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 58
8569: PUSH
8570: EMPTY
8571: LIST
8572: PUSH
8573: LD_INT 24
8575: PUSH
8576: LD_INT 251
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: PPUSH
8589: CALL_OW 70
8593: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8594: LD_ADDR_VAR 0 9
8598: PUSH
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_VAR 0 1
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 2
8618: PUSH
8619: LD_INT 30
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 30
8631: PUSH
8632: LD_INT 5
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 24
8646: PUSH
8647: LD_INT 251
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 70
8663: ST_TO_ADDR
// if barrackList > 0 then
8664: LD_VAR 0 9
8668: PUSH
8669: LD_INT 0
8671: GREATER
8672: IFFALSE 8820
// begin if turretList = 0 then
8674: LD_VAR 0 7
8678: PUSH
8679: LD_INT 0
8681: EQUAL
8682: IFFALSE 8724
// begin if soldiers_list > 0 then
8684: LD_VAR 0 6
8688: PUSH
8689: LD_INT 0
8691: GREATER
8692: IFFALSE 8722
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8694: LD_VAR 0 6
8698: PPUSH
8699: LD_VAR 0 9
8703: PUSH
8704: LD_INT 1
8706: PPUSH
8707: LD_VAR 0 9
8711: PPUSH
8712: CALL_OW 12
8716: ARRAY
8717: PPUSH
8718: CALL_OW 120
// end else
8722: GO 8820
// begin for i in barrackList do
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_VAR 0 9
8733: PUSH
8734: FOR_IN
8735: IFFALSE 8818
// begin insideUnits = UnitsInside ( i ) ;
8737: LD_ADDR_VAR 0 10
8741: PUSH
8742: LD_VAR 0 4
8746: PPUSH
8747: CALL_OW 313
8751: ST_TO_ADDR
// if insideUnits > 0 then
8752: LD_VAR 0 10
8756: PUSH
8757: LD_INT 0
8759: GREATER
8760: IFFALSE 8784
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8762: LD_VAR 0 10
8766: PUSH
8767: LD_INT 1
8769: ARRAY
8770: PPUSH
8771: LD_VAR 0 7
8775: PUSH
8776: LD_INT 1
8778: ARRAY
8779: PPUSH
8780: CALL_OW 120
// if soldiers_list > 0 then
8784: LD_VAR 0 6
8788: PUSH
8789: LD_INT 0
8791: GREATER
8792: IFFALSE 8816
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8794: LD_VAR 0 6
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: PPUSH
8803: LD_VAR 0 7
8807: PUSH
8808: LD_INT 1
8810: ARRAY
8811: PPUSH
8812: CALL_OW 120
// end ;
8816: GO 8734
8818: POP
8819: POP
// end ; end ; end ;
8820: LD_VAR 0 3
8824: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
8825: LD_INT 0
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
8832: LD_ADDR_VAR 0 6
8836: PUSH
8837: LD_INT 22
8839: PUSH
8840: LD_VAR 0 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 2
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 31
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 30
8864: PUSH
8865: LD_INT 32
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 30
8874: PUSH
8875: LD_INT 33
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 30
8884: PUSH
8885: LD_INT 4
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 30
8894: PUSH
8895: LD_INT 5
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
8919: LD_ADDR_VAR 0 7
8923: PUSH
8924: LD_INT 22
8926: PUSH
8927: LD_VAR 0 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 21
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 58
8948: PUSH
8949: EMPTY
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: LIST
8956: PPUSH
8957: CALL_OW 69
8961: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
8962: LD_VAR 0 6
8966: PUSH
8967: LD_INT 0
8969: GREATER
8970: PUSH
8971: LD_VAR 0 7
8975: PUSH
8976: LD_INT 0
8978: GREATER
8979: AND
8980: IFFALSE 9050
// begin for i in turretsList do
8982: LD_ADDR_VAR 0 4
8986: PUSH
8987: LD_VAR 0 6
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9048
// begin for j in enemyBuildings do
8995: LD_ADDR_VAR 0 5
8999: PUSH
9000: LD_VAR 0 7
9004: PUSH
9005: FOR_IN
9006: IFFALSE 9044
// begin if GetDistUnits ( i , j ) < 20 then
9008: LD_VAR 0 4
9012: PPUSH
9013: LD_VAR 0 5
9017: PPUSH
9018: CALL_OW 296
9022: PUSH
9023: LD_INT 20
9025: LESS
9026: IFFALSE 9042
// begin ComAttackUnit ( i , j ) ;
9028: LD_VAR 0 4
9032: PPUSH
9033: LD_VAR 0 5
9037: PPUSH
9038: CALL_OW 115
// end ; end ;
9042: GO 9005
9044: POP
9045: POP
// end ;
9046: GO 8992
9048: POP
9049: POP
// end ; end ;
9050: LD_VAR 0 3
9054: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9063: LD_ADDR_VAR 0 8
9067: PUSH
9068: LD_INT 22
9070: PUSH
9071: LD_VAR 0 1
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 2
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 34
9092: PUSH
9093: LD_INT 52
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: LIST
9104: PPUSH
9105: CALL_OW 69
9109: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9110: LD_ADDR_VAR 0 9
9114: PUSH
9115: LD_INT 22
9117: PUSH
9118: LD_VAR 0 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 21
9129: PUSH
9130: LD_INT 3
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 3
9139: PUSH
9140: LD_INT 24
9142: PUSH
9143: LD_INT 1000
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: EMPTY
9160: LIST
9161: PPUSH
9162: CALL_OW 69
9166: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9167: LD_VAR 0 9
9171: PUSH
9172: LD_INT 0
9174: GREATER
9175: PUSH
9176: LD_VAR 0 8
9180: PPUSH
9181: LD_INT 24
9183: PUSH
9184: LD_INT 750
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PPUSH
9191: CALL_OW 72
9195: PUSH
9196: LD_INT 0
9198: GREATER
9199: AND
9200: IFFALSE 9235
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9202: LD_VAR 0 8
9206: PPUSH
9207: LD_INT 24
9209: PUSH
9210: LD_INT 750
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 72
9221: PPUSH
9222: LD_VAR 0 9
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9235: LD_VAR 0 8
9239: PPUSH
9240: LD_INT 3
9242: PUSH
9243: LD_INT 24
9245: PUSH
9246: LD_INT 750
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PPUSH
9257: CALL_OW 72
9261: PUSH
9262: LD_INT 0
9264: GREATER
9265: IFFALSE 9303
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9267: LD_VAR 0 8
9271: PPUSH
9272: LD_INT 3
9274: PUSH
9275: LD_INT 24
9277: PUSH
9278: LD_INT 750
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 72
9293: PPUSH
9294: LD_VAR 0 2
9298: PPUSH
9299: CALL_OW 113
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9303: LD_VAR 0 2
9307: PPUSH
9308: LD_INT 22
9310: PUSH
9311: LD_VAR 0 1
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 21
9322: PUSH
9323: LD_INT 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 34
9332: PUSH
9333: LD_INT 52
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: LD_INT 24
9345: PUSH
9346: LD_INT 750
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 70
9367: PUSH
9368: LD_INT 0
9370: GREATER
9371: IFFALSE 9573
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
9373: LD_ADDR_VAR 0 5
9377: PUSH
9378: LD_VAR 0 2
9382: PPUSH
9383: LD_INT 22
9385: PUSH
9386: LD_VAR 0 1
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: PUSH
9395: LD_INT 21
9397: PUSH
9398: LD_INT 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 34
9407: PUSH
9408: LD_INT 52
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 3
9417: PUSH
9418: LD_INT 24
9420: PUSH
9421: LD_INT 750
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 70
9442: PUSH
9443: FOR_IN
9444: IFFALSE 9571
// begin mechTmp = UnitsInside ( i ) ;
9446: LD_ADDR_VAR 0 6
9450: PUSH
9451: LD_VAR 0 5
9455: PPUSH
9456: CALL_OW 313
9460: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
9470: LD_VAR 0 6
9474: PPUSH
9475: LD_VAR 0 7
9479: PPUSH
9480: CALL_OW 189
// wait ( 0 0$2 ) ;
9484: LD_INT 70
9486: PPUSH
9487: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_VAR 0 2
9500: PPUSH
9501: LD_INT 22
9503: PUSH
9504: LD_VAR 0 1
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: LD_INT 21
9515: PUSH
9516: LD_INT 2
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 34
9525: PUSH
9526: LD_INT 52
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 24
9535: PUSH
9536: LD_INT 1000
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 58
9545: PUSH
9546: EMPTY
9547: LIST
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 70
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PPUSH
9565: CALL_OW 180
// end ;
9569: GO 9443
9571: POP
9572: POP
// end ; end ;
9573: LD_VAR 0 4
9577: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9578: LD_INT 0
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
// for i = 1 to medicCount do
9591: LD_ADDR_VAR 0 14
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_VAR 0 7
9605: PUSH
9606: FOR_TO
9607: IFFALSE 9689
// begin uc_side = side ;
9609: LD_ADDR_OWVAR 20
9613: PUSH
9614: LD_VAR 0 1
9618: ST_TO_ADDR
// uc_nation = nation ;
9619: LD_ADDR_OWVAR 21
9623: PUSH
9624: LD_VAR 0 2
9628: ST_TO_ADDR
// hc_name =  ;
9629: LD_ADDR_OWVAR 26
9633: PUSH
9634: LD_STRING 
9636: ST_TO_ADDR
// hc_gallery =  ;
9637: LD_ADDR_OWVAR 33
9641: PUSH
9642: LD_STRING 
9644: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9645: LD_INT 0
9647: PPUSH
9648: LD_INT 4
9650: PPUSH
9651: LD_VAR 0 8
9655: PPUSH
9656: CALL_OW 380
// un = CreateHuman ;
9660: LD_ADDR_VAR 0 16
9664: PUSH
9665: CALL_OW 44
9669: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9670: LD_VAR 0 16
9674: PPUSH
9675: LD_VAR 0 9
9679: PPUSH
9680: LD_INT 0
9682: PPUSH
9683: CALL_OW 49
// end ;
9687: GO 9606
9689: POP
9690: POP
// for i = 1 to soldierCount do
9691: LD_ADDR_VAR 0 14
9695: PUSH
9696: DOUBLE
9697: LD_INT 1
9699: DEC
9700: ST_TO_ADDR
9701: LD_VAR 0 3
9705: PUSH
9706: FOR_TO
9707: IFFALSE 9789
// begin uc_side = side ;
9709: LD_ADDR_OWVAR 20
9713: PUSH
9714: LD_VAR 0 1
9718: ST_TO_ADDR
// uc_nation = nation ;
9719: LD_ADDR_OWVAR 21
9723: PUSH
9724: LD_VAR 0 2
9728: ST_TO_ADDR
// hc_name =  ;
9729: LD_ADDR_OWVAR 26
9733: PUSH
9734: LD_STRING 
9736: ST_TO_ADDR
// hc_gallery =  ;
9737: LD_ADDR_OWVAR 33
9741: PUSH
9742: LD_STRING 
9744: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9745: LD_INT 0
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: CALL_OW 380
// un = CreateHuman ;
9760: LD_ADDR_VAR 0 16
9764: PUSH
9765: CALL_OW 44
9769: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9770: LD_VAR 0 16
9774: PPUSH
9775: LD_VAR 0 9
9779: PPUSH
9780: LD_INT 0
9782: PPUSH
9783: CALL_OW 49
// end ;
9787: GO 9706
9789: POP
9790: POP
// for i = 1 to sniperCount do
9791: LD_ADDR_VAR 0 14
9795: PUSH
9796: DOUBLE
9797: LD_INT 1
9799: DEC
9800: ST_TO_ADDR
9801: LD_VAR 0 4
9805: PUSH
9806: FOR_TO
9807: IFFALSE 9889
// begin uc_side = side ;
9809: LD_ADDR_OWVAR 20
9813: PUSH
9814: LD_VAR 0 1
9818: ST_TO_ADDR
// uc_nation = nation ;
9819: LD_ADDR_OWVAR 21
9823: PUSH
9824: LD_VAR 0 2
9828: ST_TO_ADDR
// hc_name =  ;
9829: LD_ADDR_OWVAR 26
9833: PUSH
9834: LD_STRING 
9836: ST_TO_ADDR
// hc_gallery =  ;
9837: LD_ADDR_OWVAR 33
9841: PUSH
9842: LD_STRING 
9844: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
9845: LD_INT 0
9847: PPUSH
9848: LD_INT 5
9850: PPUSH
9851: LD_VAR 0 8
9855: PPUSH
9856: CALL_OW 380
// un = CreateHuman ;
9860: LD_ADDR_VAR 0 16
9864: PUSH
9865: CALL_OW 44
9869: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9870: LD_VAR 0 16
9874: PPUSH
9875: LD_VAR 0 9
9879: PPUSH
9880: LD_INT 0
9882: PPUSH
9883: CALL_OW 49
// end ;
9887: GO 9806
9889: POP
9890: POP
// for i = 1 to bazookCount do
9891: LD_ADDR_VAR 0 14
9895: PUSH
9896: DOUBLE
9897: LD_INT 1
9899: DEC
9900: ST_TO_ADDR
9901: LD_VAR 0 5
9905: PUSH
9906: FOR_TO
9907: IFFALSE 9989
// begin uc_side = side ;
9909: LD_ADDR_OWVAR 20
9913: PUSH
9914: LD_VAR 0 1
9918: ST_TO_ADDR
// uc_nation = nation ;
9919: LD_ADDR_OWVAR 21
9923: PUSH
9924: LD_VAR 0 2
9928: ST_TO_ADDR
// hc_name =  ;
9929: LD_ADDR_OWVAR 26
9933: PUSH
9934: LD_STRING 
9936: ST_TO_ADDR
// hc_gallery =  ;
9937: LD_ADDR_OWVAR 33
9941: PUSH
9942: LD_STRING 
9944: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
9945: LD_INT 0
9947: PPUSH
9948: LD_INT 9
9950: PPUSH
9951: LD_VAR 0 8
9955: PPUSH
9956: CALL_OW 380
// un = CreateHuman ;
9960: LD_ADDR_VAR 0 16
9964: PUSH
9965: CALL_OW 44
9969: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9970: LD_VAR 0 16
9974: PPUSH
9975: LD_VAR 0 9
9979: PPUSH
9980: LD_INT 0
9982: PPUSH
9983: CALL_OW 49
// end ;
9987: GO 9906
9989: POP
9990: POP
// for i = 1 to mortalCount do
9991: LD_ADDR_VAR 0 14
9995: PUSH
9996: DOUBLE
9997: LD_INT 1
9999: DEC
10000: ST_TO_ADDR
10001: LD_VAR 0 6
10005: PUSH
10006: FOR_TO
10007: IFFALSE 10089
// begin uc_side = side ;
10009: LD_ADDR_OWVAR 20
10013: PUSH
10014: LD_VAR 0 1
10018: ST_TO_ADDR
// uc_nation = nation ;
10019: LD_ADDR_OWVAR 21
10023: PUSH
10024: LD_VAR 0 2
10028: ST_TO_ADDR
// hc_name =  ;
10029: LD_ADDR_OWVAR 26
10033: PUSH
10034: LD_STRING 
10036: ST_TO_ADDR
// hc_gallery =  ;
10037: LD_ADDR_OWVAR 33
10041: PUSH
10042: LD_STRING 
10044: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10045: LD_INT 0
10047: PPUSH
10048: LD_INT 8
10050: PPUSH
10051: LD_VAR 0 8
10055: PPUSH
10056: CALL_OW 380
// un = CreateHuman ;
10060: LD_ADDR_VAR 0 16
10064: PUSH
10065: CALL_OW 44
10069: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10070: LD_VAR 0 16
10074: PPUSH
10075: LD_VAR 0 9
10079: PPUSH
10080: LD_INT 0
10082: PPUSH
10083: CALL_OW 49
// end ;
10087: GO 10006
10089: POP
10090: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10091: LD_ADDR_VAR 0 19
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_VAR 0 1
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: LD_INT 2
10110: PUSH
10111: LD_INT 25
10113: PUSH
10114: LD_INT 1
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: LD_INT 25
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 8
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 25
10143: PUSH
10144: LD_INT 9
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 69
10166: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10167: LD_ADDR_VAR 0 18
10171: PUSH
10172: LD_INT 22
10174: PUSH
10175: LD_VAR 0 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: PUSH
10184: LD_INT 25
10186: PUSH
10187: LD_INT 4
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: ST_TO_ADDR
// for i in medic_list do
10203: LD_ADDR_VAR 0 14
10207: PUSH
10208: LD_VAR 0 18
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10232
// ComMoveToArea ( i , healArea ) ;
10216: LD_VAR 0 14
10220: PPUSH
10221: LD_VAR 0 10
10225: PPUSH
10226: CALL_OW 113
10230: GO 10213
10232: POP
10233: POP
// if strategy = 1 then
10234: LD_VAR 0 12
10238: PUSH
10239: LD_INT 1
10241: EQUAL
10242: IFFALSE 10947
// begin repeat wait ( 0 0$3 ) ;
10244: LD_INT 105
10246: PPUSH
10247: CALL_OW 67
// for i in soldiersOK_list do
10251: LD_ADDR_VAR 0 14
10255: PUSH
10256: LD_VAR 0 19
10260: PUSH
10261: FOR_IN
10262: IFFALSE 10296
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10264: LD_VAR 0 14
10268: PPUSH
10269: LD_INT 80
10271: PPUSH
10272: LD_INT 109
10274: PPUSH
10275: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10279: LD_VAR 0 14
10283: PPUSH
10284: LD_INT 39
10286: PPUSH
10287: LD_INT 49
10289: PPUSH
10290: CALL_OW 174
// end ;
10294: GO 10261
10296: POP
10297: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10298: LD_INT 15
10300: PPUSH
10301: LD_INT 22
10303: PUSH
10304: LD_VAR 0 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 70
10317: PUSH
10318: LD_INT 0
10320: GREATER
10321: IFFALSE 10244
// repeat wait ( 0 0$1 ) ;
10323: LD_INT 35
10325: PPUSH
10326: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10330: LD_ADDR_VAR 0 17
10334: PUSH
10335: LD_INT 22
10337: PUSH
10338: LD_VAR 0 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: LD_INT 3
10352: PUSH
10353: LD_INT 24
10355: PUSH
10356: LD_INT 550
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 24
10369: PUSH
10370: LD_INT 250
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10391: LD_ADDR_VAR 0 19
10395: PUSH
10396: LD_INT 22
10398: PUSH
10399: LD_VAR 0 1
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: PUSH
10408: LD_INT 2
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 5
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 9
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 24
10460: PUSH
10461: LD_INT 1000
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 69
10477: ST_TO_ADDR
// if medicCount > 0 then
10478: LD_VAR 0 7
10482: PUSH
10483: LD_INT 0
10485: GREATER
10486: IFFALSE 10560
// begin if damageUnit_list > 0 then
10488: LD_VAR 0 17
10492: PUSH
10493: LD_INT 0
10495: GREATER
10496: IFFALSE 10560
// begin for i in damageUnit_list do
10498: LD_ADDR_VAR 0 14
10502: PUSH
10503: LD_VAR 0 17
10507: PUSH
10508: FOR_IN
10509: IFFALSE 10558
// begin ComMoveToArea ( i , healArea ) ;
10511: LD_VAR 0 14
10515: PPUSH
10516: LD_VAR 0 10
10520: PPUSH
10521: CALL_OW 113
// for j in medic_list do
10525: LD_ADDR_VAR 0 15
10529: PUSH
10530: LD_VAR 0 18
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10554
// AddComHeal ( j , i ) ;
10538: LD_VAR 0 15
10542: PPUSH
10543: LD_VAR 0 14
10547: PPUSH
10548: CALL_OW 188
10552: GO 10535
10554: POP
10555: POP
// end ;
10556: GO 10508
10558: POP
10559: POP
// end ; end ; for i in soldiersOK_list do
10560: LD_ADDR_VAR 0 14
10564: PUSH
10565: LD_VAR 0 19
10569: PUSH
10570: FOR_IN
10571: IFFALSE 10747
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10573: LD_ADDR_VAR 0 22
10577: PUSH
10578: LD_INT 22
10580: PUSH
10581: LD_VAR 0 11
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PPUSH
10595: LD_VAR 0 14
10599: PPUSH
10600: CALL_OW 74
10604: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10605: LD_ADDR_VAR 0 23
10609: PUSH
10610: LD_INT 22
10612: PUSH
10613: LD_VAR 0 11
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 2
10624: PUSH
10625: LD_INT 59
10627: PUSH
10628: EMPTY
10629: LIST
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: PPUSH
10669: LD_VAR 0 14
10673: PPUSH
10674: CALL_OW 74
10678: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10679: LD_VAR 0 14
10683: PPUSH
10684: LD_VAR 0 22
10688: PPUSH
10689: CALL_OW 296
10693: PUSH
10694: LD_INT 8
10696: PLUS
10697: PUSH
10698: LD_VAR 0 14
10702: PPUSH
10703: LD_VAR 0 23
10707: PPUSH
10708: CALL_OW 296
10712: LESS
10713: IFFALSE 10731
// begin ComAttackUnit ( i , target1 ) ;
10715: LD_VAR 0 14
10719: PPUSH
10720: LD_VAR 0 22
10724: PPUSH
10725: CALL_OW 115
// end else
10729: GO 10745
// begin ComAttackUnit ( i , target2 ) ;
10731: LD_VAR 0 14
10735: PPUSH
10736: LD_VAR 0 23
10740: PPUSH
10741: CALL_OW 115
// end ; end ;
10745: GO 10570
10747: POP
10748: POP
// for i in soldiersOK_list do
10749: LD_ADDR_VAR 0 14
10753: PUSH
10754: LD_VAR 0 19
10758: PUSH
10759: FOR_IN
10760: IFFALSE 10936
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10762: LD_ADDR_VAR 0 22
10766: PUSH
10767: LD_INT 22
10769: PUSH
10770: LD_VAR 0 11
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PPUSH
10779: CALL_OW 69
10783: PPUSH
10784: LD_VAR 0 14
10788: PPUSH
10789: CALL_OW 74
10793: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10794: LD_ADDR_VAR 0 23
10798: PUSH
10799: LD_INT 22
10801: PUSH
10802: LD_VAR 0 11
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 2
10813: PUSH
10814: LD_INT 59
10816: PUSH
10817: EMPTY
10818: LIST
10819: PUSH
10820: LD_INT 21
10822: PUSH
10823: LD_INT 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 21
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: PPUSH
10858: LD_VAR 0 14
10862: PPUSH
10863: CALL_OW 74
10867: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10868: LD_VAR 0 14
10872: PPUSH
10873: LD_VAR 0 22
10877: PPUSH
10878: CALL_OW 296
10882: PUSH
10883: LD_INT 8
10885: PLUS
10886: PUSH
10887: LD_VAR 0 14
10891: PPUSH
10892: LD_VAR 0 23
10896: PPUSH
10897: CALL_OW 296
10901: LESS
10902: IFFALSE 10920
// begin ComAttackUnit ( i , target1 ) ;
10904: LD_VAR 0 14
10908: PPUSH
10909: LD_VAR 0 22
10913: PPUSH
10914: CALL_OW 115
// end else
10918: GO 10934
// begin ComAttackUnit ( i , target2 ) ;
10920: LD_VAR 0 14
10924: PPUSH
10925: LD_VAR 0 23
10929: PPUSH
10930: CALL_OW 115
// end ; end ;
10934: GO 10759
10936: POP
10937: POP
// until soldiersOK_list = [ ] ;
10938: LD_VAR 0 19
10942: PUSH
10943: EMPTY
10944: EQUAL
10945: IFFALSE 10323
// end ; if strategy = 2 then
10947: LD_VAR 0 12
10951: PUSH
10952: LD_INT 2
10954: EQUAL
10955: IFFALSE 11660
// begin repeat wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// for i in soldiersOK_list do
10964: LD_ADDR_VAR 0 14
10968: PUSH
10969: LD_VAR 0 19
10973: PUSH
10974: FOR_IN
10975: IFFALSE 11009
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
10977: LD_VAR 0 14
10981: PPUSH
10982: LD_INT 117
10984: PPUSH
10985: LD_INT 97
10987: PPUSH
10988: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
10992: LD_VAR 0 14
10996: PPUSH
10997: LD_INT 94
10999: PPUSH
11000: LD_INT 50
11002: PPUSH
11003: CALL_OW 174
// end ;
11007: GO 10974
11009: POP
11010: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11011: LD_INT 16
11013: PPUSH
11014: LD_INT 22
11016: PUSH
11017: LD_VAR 0 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 70
11030: PUSH
11031: LD_INT 0
11033: GREATER
11034: IFFALSE 10957
// repeat wait ( 0 0$3 ) ;
11036: LD_INT 105
11038: PPUSH
11039: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11043: LD_ADDR_VAR 0 17
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_VAR 0 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: LD_INT 3
11065: PUSH
11066: LD_INT 24
11068: PUSH
11069: LD_INT 550
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 24
11082: PUSH
11083: LD_INT 250
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11104: LD_ADDR_VAR 0 19
11108: PUSH
11109: LD_INT 22
11111: PUSH
11112: LD_VAR 0 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 2
11123: PUSH
11124: LD_INT 25
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 25
11136: PUSH
11137: LD_INT 5
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 8
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 25
11156: PUSH
11157: LD_INT 9
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 24
11173: PUSH
11174: LD_INT 1000
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: ST_TO_ADDR
// if medicCount > 0 then
11191: LD_VAR 0 7
11195: PUSH
11196: LD_INT 0
11198: GREATER
11199: IFFALSE 11273
// begin if damageUnit_list > 0 then
11201: LD_VAR 0 17
11205: PUSH
11206: LD_INT 0
11208: GREATER
11209: IFFALSE 11273
// begin for i in damageUnit_list do
11211: LD_ADDR_VAR 0 14
11215: PUSH
11216: LD_VAR 0 17
11220: PUSH
11221: FOR_IN
11222: IFFALSE 11271
// begin ComMoveToArea ( i , healArea ) ;
11224: LD_VAR 0 14
11228: PPUSH
11229: LD_VAR 0 10
11233: PPUSH
11234: CALL_OW 113
// for j in medic_list do
11238: LD_ADDR_VAR 0 15
11242: PUSH
11243: LD_VAR 0 18
11247: PUSH
11248: FOR_IN
11249: IFFALSE 11267
// AddComHeal ( j , i ) ;
11251: LD_VAR 0 15
11255: PPUSH
11256: LD_VAR 0 14
11260: PPUSH
11261: CALL_OW 188
11265: GO 11248
11267: POP
11268: POP
// end ;
11269: GO 11221
11271: POP
11272: POP
// end ; end ; for i in soldiersOK_list do
11273: LD_ADDR_VAR 0 14
11277: PUSH
11278: LD_VAR 0 19
11282: PUSH
11283: FOR_IN
11284: IFFALSE 11460
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11286: LD_ADDR_VAR 0 22
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_VAR 0 11
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 69
11307: PPUSH
11308: LD_VAR 0 14
11312: PPUSH
11313: CALL_OW 74
11317: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11318: LD_ADDR_VAR 0 23
11322: PUSH
11323: LD_INT 22
11325: PUSH
11326: LD_VAR 0 11
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 2
11337: PUSH
11338: LD_INT 59
11340: PUSH
11341: EMPTY
11342: LIST
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: EMPTY
11375: LIST
11376: PPUSH
11377: CALL_OW 69
11381: PPUSH
11382: LD_VAR 0 14
11386: PPUSH
11387: CALL_OW 74
11391: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11392: LD_VAR 0 14
11396: PPUSH
11397: LD_VAR 0 22
11401: PPUSH
11402: CALL_OW 296
11406: PUSH
11407: LD_INT 8
11409: PLUS
11410: PUSH
11411: LD_VAR 0 14
11415: PPUSH
11416: LD_VAR 0 23
11420: PPUSH
11421: CALL_OW 296
11425: LESS
11426: IFFALSE 11444
// begin ComAttackUnit ( i , target1 ) ;
11428: LD_VAR 0 14
11432: PPUSH
11433: LD_VAR 0 22
11437: PPUSH
11438: CALL_OW 115
// end else
11442: GO 11458
// begin ComAttackUnit ( i , target2 ) ;
11444: LD_VAR 0 14
11448: PPUSH
11449: LD_VAR 0 23
11453: PPUSH
11454: CALL_OW 115
// end ; end ;
11458: GO 11283
11460: POP
11461: POP
// for i in soldiersOK_list do
11462: LD_ADDR_VAR 0 14
11466: PUSH
11467: LD_VAR 0 19
11471: PUSH
11472: FOR_IN
11473: IFFALSE 11649
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11475: LD_ADDR_VAR 0 22
11479: PUSH
11480: LD_INT 22
11482: PUSH
11483: LD_VAR 0 11
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PPUSH
11492: CALL_OW 69
11496: PPUSH
11497: LD_VAR 0 14
11501: PPUSH
11502: CALL_OW 74
11506: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11507: LD_ADDR_VAR 0 23
11511: PUSH
11512: LD_INT 22
11514: PUSH
11515: LD_VAR 0 11
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 59
11529: PUSH
11530: EMPTY
11531: LIST
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 21
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: EMPTY
11564: LIST
11565: PPUSH
11566: CALL_OW 69
11570: PPUSH
11571: LD_VAR 0 14
11575: PPUSH
11576: CALL_OW 74
11580: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11581: LD_VAR 0 14
11585: PPUSH
11586: LD_VAR 0 22
11590: PPUSH
11591: CALL_OW 296
11595: PUSH
11596: LD_INT 8
11598: PLUS
11599: PUSH
11600: LD_VAR 0 14
11604: PPUSH
11605: LD_VAR 0 23
11609: PPUSH
11610: CALL_OW 296
11614: LESS
11615: IFFALSE 11633
// begin ComAttackUnit ( i , target1 ) ;
11617: LD_VAR 0 14
11621: PPUSH
11622: LD_VAR 0 22
11626: PPUSH
11627: CALL_OW 115
// end else
11631: GO 11647
// begin ComAttackUnit ( i , target2 ) ;
11633: LD_VAR 0 14
11637: PPUSH
11638: LD_VAR 0 23
11642: PPUSH
11643: CALL_OW 115
// end ; end ;
11647: GO 11472
11649: POP
11650: POP
// until soldiersOK_list = [ ] ;
11651: LD_VAR 0 19
11655: PUSH
11656: EMPTY
11657: EQUAL
11658: IFFALSE 11036
// end ; end ; end_of_file
11660: LD_VAR 0 13
11664: RET
// every 0 0$01 do
11665: GO 11667
11667: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11668: LD_INT 22
11670: PUSH
11671: LD_INT 1
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 25
11680: PUSH
11681: LD_INT 2
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: CALL_OW 69
11696: PUSH
11697: LD_INT 0
11699: EQUAL
11700: IFFALSE 11714
// SetClass ( JMM , 2 ) ;
11702: LD_EXP 1
11706: PPUSH
11707: LD_INT 2
11709: PPUSH
11710: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11714: LD_STRING M1
11716: PPUSH
11717: CALL_OW 337
// case difficulty of 1 :
11721: LD_OWVAR 67
11725: PUSH
11726: LD_INT 1
11728: DOUBLE
11729: EQUAL
11730: IFTRUE 11734
11732: GO 11744
11734: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11735: LD_STRING M1-1
11737: PPUSH
11738: CALL_OW 337
11742: GO 11781
11744: LD_INT 2
11746: DOUBLE
11747: EQUAL
11748: IFTRUE 11752
11750: GO 11762
11752: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
11753: LD_STRING M1-2
11755: PPUSH
11756: CALL_OW 337
11760: GO 11781
11762: LD_INT 3
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11780
11770: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
11771: LD_STRING M1-3
11773: PPUSH
11774: CALL_OW 337
11778: GO 11781
11780: POP
// ChangeMissionObjectives ( M1cont ) ;
11781: LD_STRING M1cont
11783: PPUSH
11784: CALL_OW 337
// SaveForQuickRestart ;
11788: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
11792: LD_INT 350
11794: PPUSH
11795: LD_INT 875
11797: PPUSH
11798: CALL_OW 12
11802: PPUSH
11803: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
11807: LD_INT 5
11809: PPUSH
11810: LD_INT 4
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 55
// end ;
11820: END
// every 0 0$15 trigger firstCrateSpawn do
11821: LD_EXP 41
11825: IFFALSE 12164
11827: GO 11829
11829: DISABLE
// begin if IsOk ( Lisa ) then
11830: LD_EXP 2
11834: PPUSH
11835: CALL_OW 302
11839: IFFALSE 11855
// Say ( Lisa , DR0-Lisa-1 ) else
11841: LD_EXP 2
11845: PPUSH
11846: LD_STRING DR0-Lisa-1
11848: PPUSH
11849: CALL_OW 88
11853: GO 11989
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
11855: LD_INT 22
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 21
11867: PUSH
11868: LD_INT 1
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 26
11877: PUSH
11878: LD_INT 1
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 25
11890: PUSH
11891: LD_INT 1
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 25
11900: PUSH
11901: LD_INT 2
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 25
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 25
11920: PUSH
11921: LD_INT 4
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PPUSH
11941: CALL_OW 69
11945: PUSH
11946: LD_EXP 1
11950: PUSH
11951: LD_EXP 8
11955: PUSH
11956: LD_EXP 5
11960: PUSH
11961: LD_EXP 6
11965: PUSH
11966: LD_EXP 7
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: DIFF
11978: PPUSH
11979: LD_STRING DR0-Sol1-1
11981: PPUSH
11982: LD_STRING DR0-Sol1-1
11984: PPUSH
11985: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
11989: LD_INT 22
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 21
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 26
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: LD_INT 25
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 25
12034: PUSH
12035: LD_INT 2
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 25
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 4
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: PUSH
12080: LD_EXP 1
12084: PUSH
12085: LD_EXP 8
12089: PUSH
12090: LD_EXP 5
12094: PUSH
12095: LD_EXP 2
12099: PUSH
12100: LD_EXP 6
12104: PUSH
12105: LD_EXP 7
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: DIFF
12118: PPUSH
12119: LD_STRING DR0-Sol2-1
12121: PPUSH
12122: LD_STRING DR0-Sol2-1
12124: PPUSH
12125: CALL 5256 0 3
// if IsOk ( Cyrus ) then
12129: LD_EXP 4
12133: PPUSH
12134: CALL_OW 302
12138: IFFALSE 12152
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12140: LD_EXP 4
12144: PPUSH
12145: LD_STRING DR0-Cyrus-1
12147: PPUSH
12148: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12152: LD_EXP 1
12156: PPUSH
12157: LD_STRING DR0-JMM-1
12159: PPUSH
12160: CALL_OW 88
// end ;
12164: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
12165: LD_EXP 5
12169: PPUSH
12170: CALL_OW 302
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_INT 1
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 25
12187: PUSH
12188: LD_INT 16
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PPUSH
12199: CALL_OW 69
12203: PUSH
12204: LD_INT 0
12206: GREATER
12207: AND
12208: IFFALSE 12486
12210: GO 12212
12212: DISABLE
// begin DialogueOn ;
12213: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12217: LD_EXP 5
12221: PPUSH
12222: LD_STRING D10-Frank-1
12224: PPUSH
12225: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12229: LD_INT 22
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 21
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 25
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 2
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 3
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: PPUSH
12304: CALL_OW 69
12308: PUSH
12309: LD_EXP 1
12313: PUSH
12314: LD_EXP 5
12318: PUSH
12319: LD_EXP 2
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: DIFF
12329: PPUSH
12330: LD_STRING D10-Sol1-1
12332: PPUSH
12333: LD_STRING D10-FSol1-1
12335: PPUSH
12336: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12340: LD_EXP 5
12344: PPUSH
12345: LD_STRING D10-Frank-2
12347: PPUSH
12348: CALL_OW 88
// if IsOK ( Lisa ) then
12352: LD_EXP 2
12356: PPUSH
12357: CALL_OW 302
12361: IFFALSE 12377
// begin Say ( Lisa , D10-Lisa-2 ) ;
12363: LD_EXP 2
12367: PPUSH
12368: LD_STRING D10-Lisa-2
12370: PPUSH
12371: CALL_OW 88
// end else
12375: GO 12482
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12377: LD_INT 22
12379: PUSH
12380: LD_INT 1
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 21
12389: PUSH
12390: LD_INT 1
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: LD_INT 25
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 25
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 25
12422: PUSH
12423: LD_INT 3
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 25
12432: PUSH
12433: LD_INT 4
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 69
12456: PUSH
12457: LD_EXP 1
12461: PUSH
12462: LD_EXP 5
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: DIFF
12471: PPUSH
12472: LD_STRING D10-Sol1-2
12474: PPUSH
12475: LD_STRING D10-FSol1-2
12477: PPUSH
12478: CALL 5256 0 3
// end ; DialogueOff ;
12482: CALL_OW 7
// end ;
12486: END
// every 10 10$30 do
12487: GO 12489
12489: DISABLE
// begin HarrisonSupport ;
12490: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12494: LD_EXP 17
12498: PPUSH
12499: CALL_OW 310
12503: PPUSH
12504: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12508: LD_EXP 17
12512: PPUSH
12513: LD_STRING DEng-Eng1-1
12515: PPUSH
12516: CALL_OW 88
// wait ( 1 1$0 ) ;
12520: LD_INT 2100
12522: PPUSH
12523: CALL_OW 67
// DialogueOn ;
12527: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12531: LD_EXP 14
12535: PPUSH
12536: LD_STRING DRem-Har-1
12538: PPUSH
12539: CALL_OW 94
// if contactWithRussian = 1 then
12543: LD_EXP 22
12547: PUSH
12548: LD_INT 1
12550: EQUAL
12551: IFFALSE 12567
// begin Say ( JMM , DRem-JMM-1 ) ;
12553: LD_EXP 1
12557: PPUSH
12558: LD_STRING DRem-JMM-1
12560: PPUSH
12561: CALL_OW 88
// end else
12565: GO 12579
// begin Say ( JMM , DRem-JMM-1a ) ;
12567: LD_EXP 1
12571: PPUSH
12572: LD_STRING DRem-JMM-1a
12574: PPUSH
12575: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12579: LD_EXP 14
12583: PPUSH
12584: LD_STRING DRem-Har-2
12586: PPUSH
12587: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12591: LD_STRING DenisInDelta
12593: PPUSH
12594: LD_INT 0
12596: PPUSH
12597: CALL_OW 30
12601: PUSH
12602: LD_INT 1
12604: EQUAL
12605: IFFALSE 12621
// begin Say ( JMM , DRem-JMM-2 ) ;
12607: LD_EXP 1
12611: PPUSH
12612: LD_STRING DRem-JMM-2
12614: PPUSH
12615: CALL_OW 88
// end else
12619: GO 12633
// begin Say ( JMM , DRem-JMM-2a ) ;
12621: LD_EXP 1
12625: PPUSH
12626: LD_STRING DRem-JMM-2a
12628: PPUSH
12629: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12633: LD_EXP 14
12637: PPUSH
12638: LD_STRING DRem-Har-3
12640: PPUSH
12641: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12645: LD_EXP 1
12649: PPUSH
12650: LD_STRING DRem-JMM-3
12652: PPUSH
12653: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12657: LD_EXP 14
12661: PPUSH
12662: LD_STRING DRem-Har-4
12664: PPUSH
12665: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12669: LD_STRING DenisInDelta
12671: PPUSH
12672: LD_INT 0
12674: PPUSH
12675: CALL_OW 30
12679: PUSH
12680: LD_INT 1
12682: EQUAL
12683: IFFALSE 12711
// begin Say ( JMM , DRem-JMM-4 ) ;
12685: LD_EXP 1
12689: PPUSH
12690: LD_STRING DRem-JMM-4
12692: PPUSH
12693: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12697: LD_EXP 14
12701: PPUSH
12702: LD_STRING DRem-Har-5
12704: PPUSH
12705: CALL_OW 94
// end else
12709: GO 12744
// begin SetRestrict ( 36 , 1 , true ) ;
12711: LD_INT 36
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12724: LD_INT 15
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: LD_INT 1
12732: PPUSH
12733: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12737: LD_STRING MR
12739: PPUSH
12740: CALL_OW 337
// end ; DialogueOff ;
12744: CALL_OW 7
// end ;
12748: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
12749: LD_STRING DenisInDelta
12751: PPUSH
12752: LD_INT 0
12754: PPUSH
12755: CALL_OW 30
12759: PUSH
12760: LD_INT 1
12762: EQUAL
12763: IFFALSE 12894
12765: GO 12767
12767: DISABLE
// begin PrepareDenis ;
12768: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
12772: LD_EXP 9
12776: PPUSH
12777: CALL_OW 87
// DialogueOn ;
12781: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
12785: LD_EXP 9
12789: PPUSH
12790: LD_STRING DDen-Den-1
12792: PPUSH
12793: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
12797: LD_EXP 1
12801: PPUSH
12802: LD_STRING DDen-JMM-1
12804: PPUSH
12805: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
12809: LD_EXP 9
12813: PPUSH
12814: LD_STRING DDen-Den-2
12816: PPUSH
12817: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
12821: LD_EXP 1
12825: PPUSH
12826: LD_STRING DDen-JMM-2
12828: PPUSH
12829: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
12833: LD_EXP 9
12837: PPUSH
12838: LD_STRING DDen-Den-3
12840: PPUSH
12841: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
12845: LD_EXP 1
12849: PPUSH
12850: LD_STRING DDen-JMM-3
12852: PPUSH
12853: CALL_OW 88
// DialogueOff ;
12857: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
12861: LD_INT 36
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12874: LD_INT 15
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12887: LD_STRING MR
12889: PPUSH
12890: CALL_OW 337
// end ;
12894: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
12895: CALL 12940 0 0
12899: PUSH
12900: LD_EXP 9
12904: PPUSH
12905: CALL_OW 302
12909: AND
12910: IFFALSE 12939
12912: GO 12914
12914: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
12915: LD_EXP 9
12919: PPUSH
12920: LD_STRING DR1-Den-1
12922: PPUSH
12923: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
12927: LD_EXP 1
12931: PPUSH
12932: LD_STRING DR1-JMM-1
12934: PPUSH
12935: CALL_OW 88
// end ;
12939: END
// function CheckOptoLab ; var i ; begin
12940: LD_INT 0
12942: PPUSH
12943: PPUSH
// result = false ;
12944: LD_ADDR_VAR 0 1
12948: PUSH
12949: LD_INT 0
12951: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
12952: LD_ADDR_VAR 0 2
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 30
12972: PUSH
12973: LD_INT 7
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 30
12982: PUSH
12983: LD_INT 8
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PPUSH
12999: CALL_OW 69
13003: PUSH
13004: FOR_IN
13005: IFFALSE 13057
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13007: LD_VAR 0 2
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 268
13019: PUSH
13020: LD_INT 15
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 2
13028: PPUSH
13029: LD_INT 2
13031: PPUSH
13032: CALL_OW 268
13036: PUSH
13037: LD_INT 15
13039: EQUAL
13040: OR
13041: IFFALSE 13053
// begin result = true ;
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// break ;
13051: GO 13057
// end ; break ;
13053: GO 13057
// end ;
13055: GO 13004
13057: POP
13058: POP
// end ;
13059: LD_VAR 0 1
13063: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
13064: LD_INT 15
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 321
13074: PUSH
13075: LD_INT 2
13077: EQUAL
13078: PUSH
13079: LD_EXP 9
13083: PPUSH
13084: CALL_OW 302
13088: AND
13089: IFFALSE 13321
13091: GO 13093
13093: DISABLE
// begin DialogueOn ;
13094: CALL_OW 6
// if IsOK ( Denis ) then
13098: LD_EXP 9
13102: PPUSH
13103: CALL_OW 302
13107: IFFALSE 13123
// begin Say ( Denis , DR2-Den-1 ) ;
13109: LD_EXP 9
13113: PPUSH
13114: LD_STRING DR2-Den-1
13116: PPUSH
13117: CALL_OW 88
// end else
13121: GO 13182
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13123: LD_INT 22
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 21
13135: PUSH
13136: LD_INT 1
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 25
13145: PUSH
13146: LD_INT 4
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: PPUSH
13158: CALL_OW 69
13162: PUSH
13163: LD_EXP 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: DIFF
13171: PPUSH
13172: LD_STRING DR2-Sci1-1
13174: PPUSH
13175: LD_STRING DR2-FSci1-1
13177: PPUSH
13178: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13182: LD_EXP 1
13186: PPUSH
13187: LD_STRING DR2-JMM-1
13189: PPUSH
13190: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13194: LD_INT 22
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 1
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 2
13216: PUSH
13217: LD_INT 25
13219: PUSH
13220: LD_INT 1
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PUSH
13227: LD_INT 25
13229: PUSH
13230: LD_INT 2
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 25
13239: PUSH
13240: LD_INT 3
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 25
13249: PUSH
13250: LD_INT 4
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 69
13273: PUSH
13274: LD_EXP 1
13278: PUSH
13279: LD_EXP 9
13283: PUSH
13284: LD_EXP 8
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: DIFF
13294: PPUSH
13295: LD_STRING DR2-Sol1-1
13297: PPUSH
13298: LD_STRING DR2-Sol1-11
13300: PPUSH
13301: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13305: LD_EXP 1
13309: PPUSH
13310: LD_STRING DR2-JMM-2
13312: PPUSH
13313: CALL_OW 88
// DialogueOff ;
13317: CALL_OW 7
// end ;
13321: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
13322: LD_INT 22
13324: PUSH
13325: LD_INT 1
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 36
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: LD_INT 0
13353: EQUAL
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 21
13367: PUSH
13368: LD_INT 2
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 33
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: PPUSH
13390: CALL_OW 69
13394: PUSH
13395: LD_INT 0
13397: GREATER
13398: AND
13399: PUSH
13400: LD_EXP 23
13404: PUSH
13405: LD_INT 0
13407: EQUAL
13408: AND
13409: IFFALSE 13535
13411: GO 13413
13413: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13414: LD_INT 22
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 21
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: PUSH
13454: LD_EXP 1
13458: PUSH
13459: LD_EXP 6
13463: PUSH
13464: LD_EXP 7
13468: PUSH
13469: LD_EXP 9
13473: PUSH
13474: LD_EXP 15
13478: PUSH
13479: LD_EXP 3
13483: PUSH
13484: LD_EXP 4
13488: PUSH
13489: LD_EXP 2
13493: PUSH
13494: LD_EXP 5
13498: PUSH
13499: LD_EXP 8
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: DIFF
13516: PPUSH
13517: LD_STRING D3a-Mech1-1
13519: PPUSH
13520: LD_STRING D3a-Mech1-1
13522: PPUSH
13523: CALL 5256 0 3
// firstTower = 2 ;
13527: LD_ADDR_EXP 23
13531: PUSH
13532: LD_INT 2
13534: ST_TO_ADDR
// end ;
13535: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13536: LD_INT 22
13538: PUSH
13539: LD_INT 3
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 21
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: PUSH
13565: LD_INT 0
13567: EQUAL
13568: IFFALSE 13683
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 25
13606: PUSH
13607: LD_INT 1
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 25
13616: PUSH
13617: LD_INT 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 25
13626: PUSH
13627: LD_INT 3
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 4
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: PPUSH
13656: CALL_OW 69
13660: PUSH
13661: FOR_IN
13662: IFFALSE 13681
// AddExperience ( i , 1 , 10000 ) ;
13664: LD_VAR 0 1
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: LD_INT 10000
13674: PPUSH
13675: CALL_OW 492
13679: GO 13661
13681: POP
13682: POP
// end ;
13683: PPOPN 1
13685: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13686: LD_INT 22
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: LD_INT 30
13698: PUSH
13699: LD_INT 36
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PPUSH
13710: CALL_OW 69
13714: PUSH
13715: LD_INT 0
13717: GREATER
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_INT 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 21
13731: PUSH
13732: LD_INT 2
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: LD_INT 2
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 69
13758: PUSH
13759: LD_INT 0
13761: GREATER
13762: AND
13763: PUSH
13764: CALL 14346 0 0
13768: AND
13769: IFFALSE 14343
13771: GO 13773
13773: DISABLE
13774: LD_INT 0
13776: PPUSH
13777: PPUSH
13778: PPUSH
13779: PPUSH
13780: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
13781: LD_ADDR_VAR 0 3
13785: PUSH
13786: LD_INT 22
13788: PUSH
13789: LD_INT 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 36
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
13815: LD_ADDR_VAR 0 4
13819: PUSH
13820: LD_INT 22
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 21
13832: PUSH
13833: LD_INT 2
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 33
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: PPUSH
13855: CALL_OW 69
13859: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
13860: LD_ADDR_VAR 0 5
13864: PUSH
13865: EMPTY
13866: ST_TO_ADDR
// for i in tmpControlTowers do
13867: LD_ADDR_VAR 0 1
13871: PUSH
13872: LD_VAR 0 3
13876: PUSH
13877: FOR_IN
13878: IFFALSE 14341
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
13880: LD_EXP 1
13884: PPUSH
13885: CALL_OW 310
13889: PUSH
13890: LD_VAR 0 1
13894: EQUAL
13895: PUSH
13896: LD_EXP 1
13900: PPUSH
13901: CALL_OW 257
13905: PUSH
13906: LD_INT 3
13908: EQUAL
13909: AND
13910: IFFALSE 14040
// begin InGameOn ;
13912: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
13916: LD_VAR 0 4
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
13929: LD_EXP 1
13933: PPUSH
13934: LD_STRING D4a-JMM-1
13936: PPUSH
13937: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
13941: LD_VAR 0 4
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: LD_EXP 1
13954: PPUSH
13955: CALL_OW 53
// wait ( 0 0$1 ) ;
13959: LD_INT 35
13961: PPUSH
13962: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
13966: LD_VAR 0 4
13970: PUSH
13971: LD_INT 1
13973: ARRAY
13974: PPUSH
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: CALL_OW 250
13988: PUSH
13989: LD_INT 3
13991: PLUS
13992: PPUSH
13993: LD_VAR 0 4
13997: PUSH
13998: LD_INT 1
14000: ARRAY
14001: PPUSH
14002: CALL_OW 251
14006: PUSH
14007: LD_INT 2
14009: MINUS
14010: PPUSH
14011: CALL_OW 111
// wait ( 0 0$2 ) ;
14015: LD_INT 70
14017: PPUSH
14018: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14022: LD_EXP 1
14026: PPUSH
14027: LD_STRING D4b-JMM-1
14029: PPUSH
14030: CALL_OW 88
// InGameOff ;
14034: CALL_OW 9
// end else
14038: GO 14339
// begin InGameOn ;
14040: CALL_OW 8
// for j in UnitsInside ( i ) do
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_VAR 0 1
14053: PPUSH
14054: CALL_OW 313
14058: PUSH
14059: FOR_IN
14060: IFFALSE 14095
// if GetClass ( j ) = 3 then
14062: LD_VAR 0 2
14066: PPUSH
14067: CALL_OW 257
14071: PUSH
14072: LD_INT 3
14074: EQUAL
14075: IFFALSE 14093
// tmpMechanicInside = tmpMechanicInside ^ j ;
14077: LD_ADDR_VAR 0 5
14081: PUSH
14082: LD_VAR 0 5
14086: PUSH
14087: LD_VAR 0 2
14091: ADD
14092: ST_TO_ADDR
14093: GO 14059
14095: POP
14096: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14097: LD_VAR 0 5
14101: PUSH
14102: LD_INT 1
14104: ARRAY
14105: PPUSH
14106: CALL_OW 258
14110: PUSH
14111: LD_INT 1
14113: EQUAL
14114: IFFALSE 14132
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14116: LD_VAR 0 5
14120: PUSH
14121: LD_INT 1
14123: ARRAY
14124: PPUSH
14125: LD_STRING D4a-Mech1-1
14127: PPUSH
14128: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14132: LD_VAR 0 5
14136: PUSH
14137: LD_INT 1
14139: ARRAY
14140: PPUSH
14141: CALL_OW 258
14145: PUSH
14146: LD_INT 2
14148: EQUAL
14149: IFFALSE 14167
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14151: LD_VAR 0 5
14155: PUSH
14156: LD_INT 1
14158: ARRAY
14159: PPUSH
14160: LD_STRING D4a-FMech1-1
14162: PPUSH
14163: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14167: LD_VAR 0 4
14171: PUSH
14172: LD_INT 1
14174: ARRAY
14175: PPUSH
14176: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14180: LD_VAR 0 4
14184: PUSH
14185: LD_INT 1
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 5
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: PPUSH
14198: CALL_OW 53
// wait ( 0 0$1 ) ;
14202: LD_INT 35
14204: PPUSH
14205: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14209: LD_VAR 0 4
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PPUSH
14218: LD_VAR 0 4
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PPUSH
14227: CALL_OW 250
14231: PUSH
14232: LD_INT 3
14234: PLUS
14235: PPUSH
14236: LD_VAR 0 4
14240: PUSH
14241: LD_INT 1
14243: ARRAY
14244: PPUSH
14245: CALL_OW 251
14249: PUSH
14250: LD_INT 2
14252: MINUS
14253: PPUSH
14254: CALL_OW 111
// wait ( 0 0$2 ) ;
14258: LD_INT 70
14260: PPUSH
14261: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14265: LD_VAR 0 5
14269: PUSH
14270: LD_INT 1
14272: ARRAY
14273: PPUSH
14274: CALL_OW 258
14278: PUSH
14279: LD_INT 1
14281: EQUAL
14282: IFFALSE 14300
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14284: LD_VAR 0 5
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PPUSH
14293: LD_STRING D4b-Mech1-1
14295: PPUSH
14296: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14300: LD_VAR 0 5
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: CALL_OW 258
14313: PUSH
14314: LD_INT 2
14316: EQUAL
14317: IFFALSE 14335
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14319: LD_VAR 0 5
14323: PUSH
14324: LD_INT 1
14326: ARRAY
14327: PPUSH
14328: LD_STRING D4b-FMech1-1
14330: PPUSH
14331: CALL_OW 88
// InGameOff ;
14335: CALL_OW 9
// end ; end ;
14339: GO 13877
14341: POP
14342: POP
// end ;
14343: PPOPN 5
14345: END
// function CheckMehInside ; var i , j ; begin
14346: LD_INT 0
14348: PPUSH
14349: PPUSH
14350: PPUSH
// result = false ;
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: LD_INT 0
14358: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: LD_INT 22
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 30
14376: PUSH
14377: LD_INT 36
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PPUSH
14388: CALL_OW 69
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14445
// begin for j in UnitsInside ( i ) do
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_VAR 0 2
14405: PPUSH
14406: CALL_OW 313
14410: PUSH
14411: FOR_IN
14412: IFFALSE 14441
// begin if GetClass ( j ) = 3 then
14414: LD_VAR 0 3
14418: PPUSH
14419: CALL_OW 257
14423: PUSH
14424: LD_INT 3
14426: EQUAL
14427: IFFALSE 14439
// begin result = true ;
14429: LD_ADDR_VAR 0 1
14433: PUSH
14434: LD_INT 1
14436: ST_TO_ADDR
// break ;
14437: GO 14441
// end ; end ;
14439: GO 14411
14441: POP
14442: POP
// end ;
14443: GO 14393
14445: POP
14446: POP
// end ;
14447: LD_VAR 0 1
14451: RET
// every 25 25$0 do
14452: GO 14454
14454: DISABLE
// begin PrepareKurt ;
14455: CALL 17907 0 0
// end ;
14459: END
// every 35 35$0 do
14460: GO 14462
14462: DISABLE
// begin PrepareJoan ;
14463: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14467: LD_INT 2100
14469: PPUSH
14470: CALL_OW 67
// if IsOK ( Lisa ) then
14474: LD_EXP 2
14478: PPUSH
14479: CALL_OW 302
14483: IFFALSE 14613
// begin DialogueOn ;
14485: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14489: LD_EXP 2
14493: PPUSH
14494: LD_STRING D7-Lisa-1
14496: PPUSH
14497: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14501: LD_EXP 1
14505: PPUSH
14506: LD_STRING D7-JMM-1
14508: PPUSH
14509: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14513: LD_EXP 2
14517: PPUSH
14518: LD_STRING D7-Lisa-2
14520: PPUSH
14521: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14525: LD_EXP 1
14529: PPUSH
14530: LD_STRING D7-JMM-2
14532: PPUSH
14533: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14537: LD_EXP 2
14541: PPUSH
14542: LD_STRING D7-Lisa-3
14544: PPUSH
14545: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14549: LD_EXP 1
14553: PPUSH
14554: LD_STRING D7-JMM-3
14556: PPUSH
14557: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14561: LD_EXP 2
14565: PPUSH
14566: LD_STRING D7-Lisa-4
14568: PPUSH
14569: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14573: LD_EXP 1
14577: PPUSH
14578: LD_STRING D7-JMM-4
14580: PPUSH
14581: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14585: LD_EXP 1
14589: PPUSH
14590: LD_STRING D7-JMM-4a
14592: PPUSH
14593: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14597: LD_EXP 2
14601: PPUSH
14602: LD_STRING D7-Lisa-5
14604: PPUSH
14605: CALL_OW 88
// DialogueOff ;
14609: CALL_OW 7
// end ; end ;
14613: END
// every 0 0$1 do var i , others ;
14614: GO 14616
14616: DISABLE
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14621: LD_ADDR_VAR 0 2
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 1
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 21
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: LD_INT 25
14651: PUSH
14652: LD_INT 1
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 25
14661: PUSH
14662: LD_INT 2
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 3
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 25
14681: PUSH
14682: LD_INT 4
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: PPUSH
14701: CALL_OW 69
14705: PUSH
14706: LD_EXP 13
14710: PUSH
14711: EMPTY
14712: LIST
14713: DIFF
14714: ST_TO_ADDR
// for i in others do
14715: LD_ADDR_VAR 0 1
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: FOR_IN
14726: IFFALSE 14763
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14728: LD_EXP 13
14732: PPUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 296
14742: PUSH
14743: LD_INT 6
14745: LESS
14746: IFFALSE 14761
// begin disable ;
14748: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
14749: LD_EXP 13
14753: PPUSH
14754: LD_STRING D5-Sol1-1
14756: PPUSH
14757: CALL_OW 88
// end ; end ;
14761: GO 14725
14763: POP
14764: POP
// end ;
14765: PPOPN 2
14767: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
14768: LD_INT 22
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 33
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: PUSH
14797: LD_INT 2
14799: GREATEREQUAL
14800: IFFALSE 14820
14802: GO 14804
14804: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
14805: LD_STRING MRa
14807: PPUSH
14808: CALL_OW 337
// remoteVehiclesBuild = 1 ;
14812: LD_ADDR_EXP 28
14816: PUSH
14817: LD_INT 1
14819: ST_TO_ADDR
// end ;
14820: END
// every 4 4$0 do
14821: GO 14823
14823: DISABLE
// PrepareRandoms ( 1 ) ;
14824: LD_INT 1
14826: PPUSH
14827: CALL 3692 0 1
14831: END
// every 10 10$0 do
14832: GO 14834
14834: DISABLE
// PrepareRandoms ( 2 ) ;
14835: LD_INT 2
14837: PPUSH
14838: CALL 3692 0 1
14842: END
// every 28 28$0 do
14843: GO 14845
14845: DISABLE
// PrepareRandoms ( 4 ) ;
14846: LD_INT 4
14848: PPUSH
14849: CALL 3692 0 1
14853: END
// every 32 32$0 do
14854: GO 14856
14856: DISABLE
// PrepareRandoms ( 5 ) ;
14857: LD_INT 5
14859: PPUSH
14860: CALL 3692 0 1
14864: END
// every 35 35$30 do
14865: GO 14867
14867: DISABLE
// PrepareRandoms ( 6 ) ;
14868: LD_INT 6
14870: PPUSH
14871: CALL 3692 0 1
14875: END
// every 37 37$20 do
14876: GO 14878
14878: DISABLE
// PrepareRandoms ( 7 ) ;
14879: LD_INT 7
14881: PPUSH
14882: CALL 3692 0 1
14886: END
// every 5 5$20 do
14887: GO 14889
14889: DISABLE
// begin DialogueOn ;
14890: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
14894: LD_EXP 10
14898: PPUSH
14899: LD_STRING D12a-Sci-1
14901: PPUSH
14902: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
14906: LD_EXP 1
14910: PPUSH
14911: LD_STRING D12a-JMM-1
14913: PPUSH
14914: CALL_OW 88
// DialogueOff ;
14918: CALL_OW 7
// cratesStatus = 1 ;
14922: LD_ADDR_EXP 38
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// end ;
14930: END
// every 13 13$0 do
14931: GO 14933
14933: DISABLE
// begin DialogueOn ;
14934: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
14938: LD_EXP 10
14942: PPUSH
14943: LD_STRING D12b-Sci-1
14945: PPUSH
14946: CALL_OW 94
// DialogueOff ;
14950: CALL_OW 7
// cratesStatus = 2 ;
14954: LD_ADDR_EXP 38
14958: PUSH
14959: LD_INT 2
14961: ST_TO_ADDR
// end ;
14962: END
// every 32 32$0 do
14963: GO 14965
14965: DISABLE
// begin DialogueOn ;
14966: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
14970: LD_EXP 10
14974: PPUSH
14975: LD_STRING D12c-Sci-1
14977: PPUSH
14978: CALL_OW 94
// DialogueOff ;
14982: CALL_OW 7
// wait ( 3 3$0 ) ;
14986: LD_INT 6300
14988: PPUSH
14989: CALL_OW 67
// DialogueOn ;
14993: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
14997: LD_EXP 10
15001: PPUSH
15002: LD_STRING D12d-Sci-1
15004: PPUSH
15005: CALL_OW 94
// DialogueOff ;
15009: CALL_OW 7
// cratesStatus = 1 ;
15013: LD_ADDR_EXP 38
15017: PUSH
15018: LD_INT 1
15020: ST_TO_ADDR
// end ;
15021: END
// every 42 42$0 do
15022: GO 15024
15024: DISABLE
// begin DialogueOn ;
15025: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15029: LD_EXP 10
15033: PPUSH
15034: LD_STRING D12e-Sci-1
15036: PPUSH
15037: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15041: LD_EXP 1
15045: PPUSH
15046: LD_STRING D12e-JMM-1
15048: PPUSH
15049: CALL_OW 88
// DialogueOff ;
15053: CALL_OW 7
// cratesStatus = 2 ;
15057: LD_ADDR_EXP 38
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// end ;
15065: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15066: LD_INT 22
15068: PUSH
15069: LD_INT 6
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 21
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 34
15088: PUSH
15089: LD_INT 51
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PUSH
15106: LD_INT 0
15108: GREATER
15109: IFFALSE 15192
15111: GO 15113
15113: DISABLE
15114: LD_INT 0
15116: PPUSH
// begin enable ;
15117: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15118: LD_ADDR_VAR 0 1
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 6
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: LD_INT 21
15138: PUSH
15139: LD_INT 1
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 21
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: PUSH
15170: FOR_IN
15171: IFFALSE 15190
// ComAgressiveMove ( i , 138 , 168 ) ;
15173: LD_VAR 0 1
15177: PPUSH
15178: LD_INT 138
15180: PPUSH
15181: LD_INT 168
15183: PPUSH
15184: CALL_OW 114
15188: GO 15170
15190: POP
15191: POP
// end ;
15192: PPOPN 1
15194: END
// every 0 0$1 do var i ;
15195: GO 15197
15197: DISABLE
15198: LD_INT 0
15200: PPUSH
// begin enable ;
15201: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15202: LD_ADDR_VAR 0 1
15206: PUSH
15207: LD_INT 5
15209: PPUSH
15210: LD_INT 2
15212: PUSH
15213: LD_INT 22
15215: PUSH
15216: LD_INT 3
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_INT 6
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: PUSH
15238: EMPTY
15239: LIST
15240: PPUSH
15241: CALL_OW 70
15245: PUSH
15246: FOR_IN
15247: IFFALSE 15311
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
15249: LD_INT 5
15251: PPUSH
15252: LD_INT 22
15254: PUSH
15255: LD_INT 6
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 34
15264: PUSH
15265: LD_INT 51
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 70
15280: PUSH
15281: LD_INT 0
15283: GREATER
15284: IFFALSE 15300
// sendedConvoys = sendedConvoys + 1 ;
15286: LD_ADDR_EXP 39
15290: PUSH
15291: LD_EXP 39
15295: PUSH
15296: LD_INT 1
15298: PLUS
15299: ST_TO_ADDR
// RemoveUnit ( i ) ;
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL_OW 64
// end ;
15309: GO 15246
15311: POP
15312: POP
// end ; end_of_file
15313: PPOPN 1
15315: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15316: LD_VAR 0 1
15320: PUSH
15321: LD_INT 1
15323: EQUAL
15324: PUSH
15325: LD_VAR 0 2
15329: PUSH
15330: LD_INT 3
15332: EQUAL
15333: AND
15334: IFFALSE 15344
// contactWithRussian = 1 ;
15336: LD_ADDR_EXP 22
15340: PUSH
15341: LD_INT 1
15343: ST_TO_ADDR
// end ;
15344: PPOPN 2
15346: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 266
15356: PUSH
15357: LD_INT 36
15359: EQUAL
15360: PUSH
15361: LD_VAR 0 1
15365: PPUSH
15366: CALL_OW 255
15370: PUSH
15371: LD_INT 1
15373: EQUAL
15374: AND
15375: PUSH
15376: LD_INT 22
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 21
15388: PUSH
15389: LD_INT 2
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 33
15398: PUSH
15399: LD_INT 2
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL_OW 69
15415: PUSH
15416: LD_INT 0
15418: EQUAL
15419: AND
15420: PUSH
15421: LD_EXP 23
15425: PUSH
15426: LD_INT 0
15428: EQUAL
15429: AND
15430: IFFALSE 15510
// begin firstTower = 1 ;
15432: LD_ADDR_EXP 23
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15440: LD_INT 22
15442: PUSH
15443: LD_INT 1
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 1
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 25
15462: PUSH
15463: LD_INT 3
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 26
15472: PUSH
15473: LD_INT 1
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: PPUSH
15486: CALL_OW 69
15490: PUSH
15491: LD_EXP 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: DIFF
15499: PPUSH
15500: LD_STRING D3b-Mech1-1
15502: PPUSH
15503: LD_STRING D3b-Mech1-1
15505: PPUSH
15506: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 266
15519: PUSH
15520: LD_INT 0
15522: EQUAL
15523: PUSH
15524: LD_VAR 0 1
15528: PPUSH
15529: CALL_OW 255
15533: PUSH
15534: LD_INT 1
15536: EQUAL
15537: AND
15538: IFFALSE 15552
// SetBName ( building , theta ) ;
15540: LD_VAR 0 1
15544: PPUSH
15545: LD_STRING theta
15547: PPUSH
15548: CALL_OW 500
// if GetSide ( building ) = 3 then
15552: LD_VAR 0 1
15556: PPUSH
15557: CALL_OW 255
15561: PUSH
15562: LD_INT 3
15564: EQUAL
15565: IFFALSE 15639
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15567: LD_ADDR_EXP 31
15571: PUSH
15572: LD_EXP 31
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL_OW 3
15584: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15585: LD_ADDR_EXP 31
15589: PUSH
15590: LD_EXP 31
15594: PPUSH
15595: LD_INT 1
15597: PPUSH
15598: CALL_OW 3
15602: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15603: LD_ADDR_EXP 31
15607: PUSH
15608: LD_EXP 31
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 3
15620: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15621: LD_ADDR_EXP 31
15625: PUSH
15626: LD_EXP 31
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 3
15638: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15639: LD_VAR 0 1
15643: PPUSH
15644: CALL_OW 255
15648: PUSH
15649: LD_INT 3
15651: EQUAL
15652: PUSH
15653: LD_VAR 0 1
15657: PPUSH
15658: CALL_OW 266
15662: PUSH
15663: LD_INT 0
15665: EQUAL
15666: PUSH
15667: LD_VAR 0 1
15671: PPUSH
15672: CALL_OW 266
15676: PUSH
15677: LD_INT 2
15679: EQUAL
15680: OR
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 266
15691: PUSH
15692: LD_INT 4
15694: EQUAL
15695: OR
15696: PUSH
15697: EMPTY
15698: LIST
15699: AND
15700: IFFALSE 15711
// ComUpgrade ( building ) ;
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15711: LD_VAR 0 1
15715: PPUSH
15716: CALL_OW 255
15720: PUSH
15721: LD_INT 3
15723: EQUAL
15724: PUSH
15725: LD_VAR 0 1
15729: PPUSH
15730: CALL_OW 266
15734: PUSH
15735: LD_INT 32
15737: EQUAL
15738: AND
15739: IFFALSE 15780
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15741: LD_VAR 0 1
15745: PPUSH
15746: LD_INT 42
15748: PUSH
15749: LD_INT 43
15751: PUSH
15752: LD_INT 44
15754: PUSH
15755: LD_INT 46
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 1
15766: PPUSH
15767: LD_INT 4
15769: PPUSH
15770: CALL_OW 12
15774: ARRAY
15775: PPUSH
15776: CALL_OW 208
// end ; end ;
15780: PPOPN 1
15782: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
15783: LD_VAR 0 1
15787: PUSH
15788: LD_EXP 15
15792: EQUAL
15793: IFFALSE 15803
// JoanStatus = 0 ;
15795: LD_ADDR_EXP 16
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
15803: LD_VAR 0 1
15807: PPUSH
15808: CALL_OW 255
15812: PUSH
15813: LD_INT 1
15815: EQUAL
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: CALL_OW 247
15826: PUSH
15827: LD_INT 1
15829: EQUAL
15830: AND
15831: IFFALSE 15907
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 257
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 257
15856: PUSH
15857: LD_INT 2
15859: EQUAL
15860: OR
15861: PUSH
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 257
15871: PUSH
15872: LD_INT 3
15874: EQUAL
15875: OR
15876: PUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 257
15886: PUSH
15887: LD_INT 4
15889: EQUAL
15890: OR
15891: IFFALSE 15907
// unitLost = unitLost + 1 ;
15893: LD_ADDR_EXP 30
15897: PUSH
15898: LD_EXP 30
15902: PUSH
15903: LD_INT 1
15905: PLUS
15906: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
15907: LD_VAR 0 1
15911: PPUSH
15912: CALL_OW 255
15916: PUSH
15917: LD_INT 3
15919: EQUAL
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 247
15930: PUSH
15931: LD_INT 3
15933: EQUAL
15934: AND
15935: IFFALSE 16627
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 266
15946: PUSH
15947: LD_INT 31
15949: EQUAL
15950: PUSH
15951: LD_VAR 0 1
15955: PPUSH
15956: CALL_OW 266
15960: PUSH
15961: LD_INT 32
15963: EQUAL
15964: OR
15965: PUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 266
15975: PUSH
15976: LD_INT 36
15978: EQUAL
15979: OR
15980: PUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 266
15990: PUSH
15991: LD_INT 0
15993: EQUAL
15994: OR
15995: PUSH
15996: LD_VAR 0 1
16000: PPUSH
16001: CALL_OW 266
16005: PUSH
16006: LD_INT 24
16008: EQUAL
16009: OR
16010: PUSH
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 266
16020: PUSH
16021: LD_INT 17
16023: EQUAL
16024: OR
16025: PUSH
16026: LD_VAR 0 1
16030: PPUSH
16031: CALL_OW 266
16035: PUSH
16036: LD_INT 25
16038: EQUAL
16039: OR
16040: PUSH
16041: LD_VAR 0 1
16045: PPUSH
16046: CALL_OW 266
16050: PUSH
16051: LD_INT 19
16053: EQUAL
16054: OR
16055: PUSH
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 266
16065: PUSH
16066: LD_INT 20
16068: EQUAL
16069: OR
16070: PUSH
16071: LD_VAR 0 1
16075: PPUSH
16076: CALL_OW 266
16080: PUSH
16081: LD_INT 18
16083: EQUAL
16084: OR
16085: PUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 266
16095: PUSH
16096: LD_INT 21
16098: EQUAL
16099: OR
16100: PUSH
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 266
16110: PUSH
16111: LD_INT 23
16113: EQUAL
16114: OR
16115: PUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL_OW 266
16125: PUSH
16126: LD_INT 16
16128: EQUAL
16129: OR
16130: PUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 266
16140: PUSH
16141: LD_INT 6
16143: EQUAL
16144: OR
16145: PUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 266
16155: PUSH
16156: LD_INT 29
16158: EQUAL
16159: OR
16160: PUSH
16161: LD_VAR 0 1
16165: PPUSH
16166: CALL_OW 266
16170: PUSH
16171: LD_INT 26
16173: EQUAL
16174: OR
16175: PUSH
16176: LD_VAR 0 1
16180: PPUSH
16181: CALL_OW 266
16185: PUSH
16186: LD_INT 30
16188: EQUAL
16189: OR
16190: PUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: CALL_OW 266
16200: PUSH
16201: LD_INT 28
16203: EQUAL
16204: OR
16205: PUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 266
16215: PUSH
16216: LD_INT 27
16218: EQUAL
16219: OR
16220: PUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 266
16230: PUSH
16231: LD_INT 33
16233: EQUAL
16234: OR
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 266
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: OR
16250: PUSH
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 266
16260: PUSH
16261: LD_INT 4
16263: EQUAL
16264: OR
16265: IFFALSE 16351
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
16267: LD_ADDR_EXP 31
16271: PUSH
16272: LD_EXP 31
16276: PUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 266
16286: ADD
16287: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16288: LD_ADDR_EXP 31
16292: PUSH
16293: LD_EXP 31
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 250
16307: ADD
16308: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16309: LD_ADDR_EXP 31
16313: PUSH
16314: LD_EXP 31
16318: PUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 251
16328: ADD
16329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16330: LD_ADDR_EXP 31
16334: PUSH
16335: LD_EXP 31
16339: PUSH
16340: LD_VAR 0 1
16344: PPUSH
16345: CALL_OW 254
16349: ADD
16350: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 266
16360: PUSH
16361: LD_INT 1
16363: EQUAL
16364: IFFALSE 16443
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16366: LD_ADDR_EXP 31
16370: PUSH
16371: LD_EXP 31
16375: PUSH
16376: LD_INT 0
16378: ADD
16379: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16380: LD_ADDR_EXP 31
16384: PUSH
16385: LD_EXP 31
16389: PUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 250
16399: ADD
16400: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16401: LD_ADDR_EXP 31
16405: PUSH
16406: LD_EXP 31
16410: PUSH
16411: LD_VAR 0 1
16415: PPUSH
16416: CALL_OW 251
16420: ADD
16421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16422: LD_ADDR_EXP 31
16426: PUSH
16427: LD_EXP 31
16431: PUSH
16432: LD_VAR 0 1
16436: PPUSH
16437: CALL_OW 254
16441: ADD
16442: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 266
16452: PUSH
16453: LD_INT 3
16455: EQUAL
16456: IFFALSE 16535
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16458: LD_ADDR_EXP 31
16462: PUSH
16463: LD_EXP 31
16467: PUSH
16468: LD_INT 2
16470: ADD
16471: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16472: LD_ADDR_EXP 31
16476: PUSH
16477: LD_EXP 31
16481: PUSH
16482: LD_VAR 0 1
16486: PPUSH
16487: CALL_OW 250
16491: ADD
16492: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16493: LD_ADDR_EXP 31
16497: PUSH
16498: LD_EXP 31
16502: PUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 251
16512: ADD
16513: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16514: LD_ADDR_EXP 31
16518: PUSH
16519: LD_EXP 31
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 254
16533: ADD
16534: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 266
16544: PUSH
16545: LD_INT 5
16547: EQUAL
16548: IFFALSE 16627
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16550: LD_ADDR_EXP 31
16554: PUSH
16555: LD_EXP 31
16559: PUSH
16560: LD_INT 4
16562: ADD
16563: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16564: LD_ADDR_EXP 31
16568: PUSH
16569: LD_EXP 31
16573: PUSH
16574: LD_VAR 0 1
16578: PPUSH
16579: CALL_OW 250
16583: ADD
16584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16585: LD_ADDR_EXP 31
16589: PUSH
16590: LD_EXP 31
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 251
16604: ADD
16605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16606: LD_ADDR_EXP 31
16610: PUSH
16611: LD_EXP 31
16615: PUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 254
16625: ADD
16626: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 257
16636: PUSH
16637: LD_INT 3
16639: EQUAL
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 255
16650: PUSH
16651: LD_INT 3
16653: EQUAL
16654: AND
16655: PUSH
16656: LD_INT 21
16658: PPUSH
16659: CALL_OW 302
16663: AND
16664: PUSH
16665: LD_INT 21
16667: PPUSH
16668: CALL_OW 255
16672: PUSH
16673: LD_INT 3
16675: EQUAL
16676: AND
16677: IFFALSE 16745
// begin uc_side = 3 ;
16679: LD_ADDR_OWVAR 20
16683: PUSH
16684: LD_INT 3
16686: ST_TO_ADDR
// uc_nation = 3 ;
16687: LD_ADDR_OWVAR 21
16691: PUSH
16692: LD_INT 3
16694: ST_TO_ADDR
// hc_gallery :=  ;
16695: LD_ADDR_OWVAR 33
16699: PUSH
16700: LD_STRING 
16702: ST_TO_ADDR
// hc_name :=  ;
16703: LD_ADDR_OWVAR 26
16707: PUSH
16708: LD_STRING 
16710: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16711: LD_INT 0
16713: PPUSH
16714: LD_EXP 34
16718: PPUSH
16719: LD_EXP 35
16723: PPUSH
16724: CALL_OW 12
16728: PPUSH
16729: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16733: CALL_OW 44
16737: PPUSH
16738: LD_INT 21
16740: PPUSH
16741: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 3
16757: EQUAL
16758: PUSH
16759: LD_VAR 0 1
16763: PPUSH
16764: CALL_OW 264
16768: PUSH
16769: LD_INT 52
16771: EQUAL
16772: AND
16773: PUSH
16774: LD_INT 21
16776: PPUSH
16777: CALL_OW 302
16781: AND
16782: PUSH
16783: LD_INT 21
16785: PPUSH
16786: CALL_OW 255
16790: PUSH
16791: LD_INT 3
16793: EQUAL
16794: AND
16795: IFFALSE 16816
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
16797: LD_INT 21
16799: PPUSH
16800: LD_INT 22
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: LD_INT 52
16811: PPUSH
16812: CALL_OW 125
// end ;
16816: PPOPN 1
16818: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
16819: LD_INT 0
16821: PPUSH
16822: PPUSH
16823: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
16824: LD_VAR 0 1
16828: PPUSH
16829: CALL_OW 264
16833: PUSH
16834: LD_INT 51
16836: EQUAL
16837: PUSH
16838: LD_VAR 0 1
16842: PPUSH
16843: CALL_OW 255
16847: PUSH
16848: LD_INT 3
16850: EQUAL
16851: AND
16852: IFFALSE 16914
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
16854: LD_ADDR_VAR 0 5
16858: PUSH
16859: LD_INT 2
16861: PPUSH
16862: CALL_OW 274
16866: PPUSH
16867: LD_INT 1
16869: PPUSH
16870: CALL_OW 275
16874: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
16875: LD_INT 2
16877: PPUSH
16878: CALL_OW 274
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: LD_VAR 0 5
16890: PUSH
16891: LD_INT 100
16893: MINUS
16894: PPUSH
16895: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_INT 100
16909: PPUSH
16910: CALL_OW 291
// end ; if building = rufabsupp then
16914: LD_VAR 0 2
16918: PUSH
16919: LD_INT 17
16921: EQUAL
16922: IFFALSE 16936
// SetSide ( vehicle , 6 ) ;
16924: LD_VAR 0 1
16928: PPUSH
16929: LD_INT 6
16931: PPUSH
16932: CALL_OW 235
// end ;
16936: PPOPN 5
16938: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 255
16948: PUSH
16949: LD_INT 3
16951: EQUAL
16952: IFFALSE 16983
// begin tamedApemans = tamedApemans + 1 ;
16954: LD_ADDR_EXP 32
16958: PUSH
16959: LD_EXP 32
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: LD_INT 106
16975: PPUSH
16976: LD_INT 85
16978: PPUSH
16979: CALL_OW 111
// end ; end ;
16983: PPOPN 2
16985: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 255
16999: PUSH
17000: LD_INT 3
17002: EQUAL
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 247
17013: PUSH
17014: LD_INT 2
17016: EQUAL
17017: AND
17018: IFFALSE 17127
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 264
17029: PUSH
17030: LD_INT 42
17032: EQUAL
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 264
17043: PUSH
17044: LD_INT 43
17046: EQUAL
17047: OR
17048: PUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 264
17058: PUSH
17059: LD_INT 44
17061: EQUAL
17062: OR
17063: PUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL_OW 264
17073: PUSH
17074: LD_INT 46
17076: EQUAL
17077: OR
17078: IFFALSE 17127
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17080: LD_INT 21
17082: PPUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 265
17092: PPUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: CALL_OW 262
17102: PPUSH
17103: LD_VAR 0 1
17107: PPUSH
17108: CALL_OW 263
17112: PPUSH
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 264
17122: PPUSH
17123: CALL_OW 185
// end ;
17127: PPOPN 3
17129: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL_OW 255
17139: PUSH
17140: LD_INT 3
17142: EQUAL
17143: PUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: CALL_OW 255
17153: PUSH
17154: LD_INT 3
17156: EQUAL
17157: AND
17158: PUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 302
17168: AND
17169: IFFALSE 17211
// begin ComRepairVehicle ( human , vehicle ) ;
17171: LD_VAR 0 2
17175: PPUSH
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17185: LD_VAR 0 2
17189: PPUSH
17190: LD_VAR 0 1
17194: PPUSH
17195: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17199: LD_VAR 0 1
17203: PPUSH
17204: LD_INT 100
17206: PPUSH
17207: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 255
17220: PUSH
17221: LD_INT 3
17223: EQUAL
17224: PUSH
17225: LD_VAR 0 2
17229: PPUSH
17230: CALL_OW 255
17234: PUSH
17235: LD_INT 3
17237: EQUAL
17238: AND
17239: PUSH
17240: LD_INT 21
17242: PPUSH
17243: CALL_OW 302
17247: AND
17248: PUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: CALL_OW 302
17258: NOT
17259: AND
17260: IFFALSE 17274
// ComEnterUnit ( human , rufab ) ;
17262: LD_VAR 0 2
17266: PPUSH
17267: LD_INT 21
17269: PPUSH
17270: CALL_OW 120
// end ;
17274: PPOPN 2
17276: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
17277: LD_VAR 0 1
17281: PUSH
17282: LD_INT 21
17284: EQUAL
17285: PUSH
17286: LD_VAR 0 2
17290: PPUSH
17291: CALL_OW 255
17295: PUSH
17296: LD_INT 3
17298: EQUAL
17299: AND
17300: IFFALSE 17314
// SetLives ( human , 1000 ) ;
17302: LD_VAR 0 2
17306: PPUSH
17307: LD_INT 1000
17309: PPUSH
17310: CALL_OW 234
// end ;
17314: PPOPN 2
17316: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
17317: LD_EXP 41
17321: NOT
17322: IFFALSE 17332
// firstCrateSpawn := true ;
17324: LD_ADDR_EXP 41
17328: PUSH
17329: LD_INT 1
17331: ST_TO_ADDR
// end ; end_of_file
17332: PPOPN 5
17334: END
// every 0 0$30 trigger cratesStatus = 1 do
17335: LD_EXP 38
17339: PUSH
17340: LD_INT 1
17342: EQUAL
17343: IFFALSE 17407
17345: GO 17347
17347: DISABLE
// begin enable ;
17348: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
17349: LD_INT 350
17351: PUSH
17352: LD_INT 1050
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 1
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: CALL_OW 12
17369: ARRAY
17370: PPUSH
17371: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17375: LD_INT 4
17377: PUSH
17378: LD_INT 5
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 1
17387: PPUSH
17388: LD_INT 2
17390: PPUSH
17391: CALL_OW 12
17395: ARRAY
17396: PPUSH
17397: LD_INT 7
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 55
// end ;
17407: END
// every 1 1$0 trigger cratesStatus = 2 do
17408: LD_EXP 38
17412: PUSH
17413: LD_INT 2
17415: EQUAL
17416: IFFALSE 17480
17418: GO 17420
17420: DISABLE
// begin enable ;
17421: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17422: LD_INT 3150
17424: PUSH
17425: LD_INT 4550
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: PPUSH
17435: LD_INT 2
17437: PPUSH
17438: CALL_OW 12
17442: ARRAY
17443: PPUSH
17444: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17448: LD_INT 2
17450: PUSH
17451: LD_INT 5
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_INT 2
17463: PPUSH
17464: CALL_OW 12
17468: ARRAY
17469: PPUSH
17470: LD_INT 8
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 55
// end ;
17480: END
// every 0 0$30 + 0 0$10 do
17481: GO 17483
17483: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17484: LD_INT 4
17486: PUSH
17487: LD_INT 5
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 1
17496: PPUSH
17497: LD_INT 2
17499: PPUSH
17500: CALL_OW 12
17504: ARRAY
17505: PPUSH
17506: LD_INT 8
17508: PPUSH
17509: LD_INT 1
17511: PPUSH
17512: CALL_OW 55
// Wait ( 0 0$15 ) ;
17516: LD_INT 525
17518: PPUSH
17519: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17523: LD_INT 4
17525: PUSH
17526: LD_INT 5
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_INT 2
17538: PPUSH
17539: CALL_OW 12
17543: ARRAY
17544: PPUSH
17545: LD_INT 8
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 55
// Wait ( 0 0$20 ) ;
17555: LD_INT 700
17557: PPUSH
17558: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17562: LD_INT 4
17564: PUSH
17565: LD_INT 5
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PPUSH
17575: LD_INT 2
17577: PPUSH
17578: CALL_OW 12
17582: ARRAY
17583: PPUSH
17584: LD_INT 8
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: CALL_OW 55
// end ; end_of_file
17594: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17595: LD_EXP 24
17599: PUSH
17600: LD_INT 1
17602: EQUAL
17603: IFFALSE 17904
17605: GO 17607
17607: DISABLE
17608: LD_INT 0
17610: PPUSH
17611: PPUSH
17612: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17613: LD_ADDR_VAR 0 2
17617: PUSH
17618: LD_INT 22
17620: PUSH
17621: LD_INT 1
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 21
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: LD_INT 30
17643: PUSH
17644: LD_INT 0
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 30
17653: PUSH
17654: LD_INT 1
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: ST_TO_ADDR
// for i in tmp do
17676: LD_ADDR_VAR 0 1
17680: PUSH
17681: LD_VAR 0 2
17685: PUSH
17686: FOR_IN
17687: IFFALSE 17720
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17689: LD_ADDR_VAR 0 3
17693: PUSH
17694: LD_VAR 0 3
17698: PUSH
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 274
17708: PPUSH
17709: LD_INT 1
17711: PPUSH
17712: CALL_OW 275
17716: PLUS
17717: ST_TO_ADDR
17718: GO 17686
17720: POP
17721: POP
// strings = [ ] ;
17722: LD_ADDR_EXP 27
17726: PUSH
17727: EMPTY
17728: ST_TO_ADDR
// if tmp = 0 then
17729: LD_VAR 0 2
17733: PUSH
17734: LD_INT 0
17736: EQUAL
17737: IFFALSE 17762
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17739: LD_ADDR_EXP 27
17743: PUSH
17744: LD_EXP 27
17748: PUSH
17749: LD_STRING #Am06-1
17751: PUSH
17752: LD_EXP 25
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: ADD
17761: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
17762: LD_VAR 0 2
17766: PUSH
17767: LD_INT 0
17769: GREATER
17770: PUSH
17771: LD_EXP 25
17775: PUSH
17776: LD_VAR 0 3
17780: GREATER
17781: AND
17782: IFFALSE 17813
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
17784: LD_ADDR_EXP 27
17788: PUSH
17789: LD_EXP 27
17793: PUSH
17794: LD_STRING #Am06-1
17796: PUSH
17797: LD_EXP 25
17801: PUSH
17802: LD_VAR 0 3
17806: MINUS
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: ADD
17812: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
17813: LD_VAR 0 2
17817: PUSH
17818: LD_INT 0
17820: GREATER
17821: PUSH
17822: LD_EXP 25
17826: PUSH
17827: LD_VAR 0 3
17831: LESSEQUAL
17832: AND
17833: IFFALSE 17856
// strings = strings ^ [ #Am06-1 , 0 ] ;
17835: LD_ADDR_EXP 27
17839: PUSH
17840: LD_EXP 27
17844: PUSH
17845: LD_STRING #Am06-1
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: ADD
17855: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
17856: LD_ADDR_EXP 26
17860: PUSH
17861: LD_EXP 26
17865: PUSH
17866: LD_INT 35
17868: MINUS
17869: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
17870: LD_ADDR_EXP 27
17874: PUSH
17875: LD_EXP 27
17879: PUSH
17880: LD_STRING #Am06-2
17882: PUSH
17883: LD_EXP 26
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: ADD
17892: ST_TO_ADDR
// display_strings = strings ;
17893: LD_ADDR_OWVAR 47
17897: PUSH
17898: LD_EXP 27
17902: ST_TO_ADDR
// enable ;
17903: ENABLE
// end ; end_of_file
17904: PPOPN 3
17906: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
17907: LD_INT 0
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
17914: PPUSH
17915: PPUSH
// j = 0 ;
17916: LD_ADDR_VAR 0 3
17920: PUSH
17921: LD_INT 0
17923: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17924: LD_INT 35
17926: PPUSH
17927: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_INT 1
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 21
17948: PUSH
17949: LD_INT 1
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 25
17961: PUSH
17962: LD_INT 1
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 25
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 25
17981: PUSH
17982: LD_INT 3
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 25
17991: PUSH
17992: LD_INT 4
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: PPUSH
18011: CALL_OW 69
18015: PUSH
18016: FOR_IN
18017: IFFALSE 18123
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18019: LD_INT 22
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 21
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 21
18044: PUSH
18045: LD_INT 2
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 21
18054: PUSH
18055: LD_INT 3
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 59
18064: PUSH
18065: EMPTY
18066: LIST
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 91
18077: PUSH
18078: LD_VAR 0 2
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: PPUSH
18096: CALL_OW 69
18100: NOT
18101: IFFALSE 18121
// begin tmp = i ;
18103: LD_ADDR_VAR 0 4
18107: PUSH
18108: LD_VAR 0 2
18112: ST_TO_ADDR
// j = 1 ;
18113: LD_ADDR_VAR 0 3
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// end ; end ;
18121: GO 18016
18123: POP
18124: POP
// until j = 1 ;
18125: LD_VAR 0 3
18129: PUSH
18130: LD_INT 1
18132: EQUAL
18133: IFFALSE 17924
// blockSpawn = 1 ;
18135: LD_ADDR_EXP 29
18139: PUSH
18140: LD_INT 1
18142: ST_TO_ADDR
// uc_side = 2 ;
18143: LD_ADDR_OWVAR 20
18147: PUSH
18148: LD_INT 2
18150: ST_TO_ADDR
// uc_nation = 2 ;
18151: LD_ADDR_OWVAR 21
18155: PUSH
18156: LD_INT 2
18158: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18159: LD_ADDR_EXP 19
18163: PUSH
18164: LD_STRING Kurt
18166: PPUSH
18167: LD_INT 0
18169: PPUSH
18170: CALL 5193 0 2
18174: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18175: LD_EXP 19
18179: PPUSH
18180: LD_VAR 0 4
18184: PPUSH
18185: CALL_OW 250
18189: PPUSH
18190: LD_VAR 0 4
18194: PPUSH
18195: CALL_OW 251
18199: PPUSH
18200: LD_INT 5
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 50
// InGameOn ;
18210: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18214: LD_EXP 19
18218: PPUSH
18219: CALL_OW 87
// wait ( 0 0$2 ) ;
18223: LD_INT 70
18225: PPUSH
18226: CALL_OW 67
// ComExitVehicle ( tmp ) ;
18230: LD_VAR 0 4
18234: PPUSH
18235: CALL_OW 121
// ComExitBuilding ( tmp ) ;
18239: LD_VAR 0 4
18243: PPUSH
18244: CALL_OW 122
// wait ( 0 0$1 ) ;
18248: LD_INT 35
18250: PPUSH
18251: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
18255: LD_EXP 19
18259: PPUSH
18260: LD_VAR 0 4
18264: PPUSH
18265: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
18269: LD_VAR 0 4
18273: PPUSH
18274: LD_EXP 19
18278: PPUSH
18279: CALL_OW 119
// DialogueOn ;
18283: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
18287: LD_EXP 19
18291: PPUSH
18292: LD_STRING D2-Kurt-1
18294: PPUSH
18295: CALL_OW 88
// if tmp = JMM then
18299: LD_VAR 0 4
18303: PUSH
18304: LD_EXP 1
18308: EQUAL
18309: IFFALSE 18401
// begin Say ( JMM , D2-JMM-1 ) ;
18311: LD_EXP 1
18315: PPUSH
18316: LD_STRING D2-JMM-1
18318: PPUSH
18319: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18323: LD_EXP 19
18327: PPUSH
18328: LD_STRING D2-Kurt-2
18330: PPUSH
18331: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
18335: LD_EXP 1
18339: PPUSH
18340: LD_STRING D2-JMM-2
18342: PPUSH
18343: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18347: LD_EXP 19
18351: PPUSH
18352: LD_STRING D2-Kurt-3
18354: PPUSH
18355: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
18359: LD_EXP 1
18363: PPUSH
18364: LD_STRING D2-JMM-3
18366: PPUSH
18367: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18371: LD_EXP 19
18375: PPUSH
18376: LD_STRING D2-Kurt-4
18378: PPUSH
18379: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18383: LD_EXP 1
18387: PPUSH
18388: LD_STRING D2-JMM-4
18390: PPUSH
18391: CALL_OW 88
// DialogueOff ;
18395: CALL_OW 7
// end else
18399: GO 18711
// begin if GetSex ( tmp ) = 1 then
18401: LD_VAR 0 4
18405: PPUSH
18406: CALL_OW 258
18410: PUSH
18411: LD_INT 1
18413: EQUAL
18414: IFFALSE 18428
// Say ( tmp , D2-Sol1-1 ) ;
18416: LD_VAR 0 4
18420: PPUSH
18421: LD_STRING D2-Sol1-1
18423: PPUSH
18424: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18428: LD_VAR 0 4
18432: PPUSH
18433: CALL_OW 258
18437: PUSH
18438: LD_INT 2
18440: EQUAL
18441: IFFALSE 18455
// Say ( tmp , D2-FSol1-1 ) ;
18443: LD_VAR 0 4
18447: PPUSH
18448: LD_STRING D2-FSol1-1
18450: PPUSH
18451: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18455: LD_EXP 19
18459: PPUSH
18460: LD_STRING D2-Kurt-2
18462: PPUSH
18463: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18467: LD_VAR 0 4
18471: PPUSH
18472: CALL_OW 258
18476: PUSH
18477: LD_INT 1
18479: EQUAL
18480: IFFALSE 18494
// Say ( tmp , D2-Sol1-2 ) ;
18482: LD_VAR 0 4
18486: PPUSH
18487: LD_STRING D2-Sol1-2
18489: PPUSH
18490: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18494: LD_VAR 0 4
18498: PPUSH
18499: CALL_OW 258
18503: PUSH
18504: LD_INT 2
18506: EQUAL
18507: IFFALSE 18521
// Say ( tmp , D2-FSol1-2 ) ;
18509: LD_VAR 0 4
18513: PPUSH
18514: LD_STRING D2-FSol1-2
18516: PPUSH
18517: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18521: LD_EXP 19
18525: PPUSH
18526: LD_STRING D2-Kurt-3
18528: PPUSH
18529: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18533: LD_VAR 0 4
18537: PPUSH
18538: CALL_OW 258
18542: PUSH
18543: LD_INT 1
18545: EQUAL
18546: IFFALSE 18560
// Say ( tmp , D2-Sol1-3 ) ;
18548: LD_VAR 0 4
18552: PPUSH
18553: LD_STRING D2-Sol1-3
18555: PPUSH
18556: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18560: LD_VAR 0 4
18564: PPUSH
18565: CALL_OW 258
18569: PUSH
18570: LD_INT 2
18572: EQUAL
18573: IFFALSE 18587
// Say ( tmp , D2-FSol1-3 ) ;
18575: LD_VAR 0 4
18579: PPUSH
18580: LD_STRING D2-FSol1-3
18582: PPUSH
18583: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18587: LD_EXP 19
18591: PPUSH
18592: LD_STRING D2-Kurt-4
18594: PPUSH
18595: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18599: LD_VAR 0 4
18603: PPUSH
18604: CALL_OW 258
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: IFFALSE 18626
// Say ( tmp , D2-Sol1-4 ) ;
18614: LD_VAR 0 4
18618: PPUSH
18619: LD_STRING D2-Sol1-4
18621: PPUSH
18622: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18626: LD_VAR 0 4
18630: PPUSH
18631: CALL_OW 258
18635: PUSH
18636: LD_INT 2
18638: EQUAL
18639: IFFALSE 18653
// Say ( tmp , D2-FSol1-4 ) ;
18641: LD_VAR 0 4
18645: PPUSH
18646: LD_STRING D2-FSol1-4
18648: PPUSH
18649: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18653: LD_VAR 0 4
18657: PPUSH
18658: CALL_OW 258
18662: PUSH
18663: LD_INT 1
18665: EQUAL
18666: IFFALSE 18680
// Say ( tmp , D2-Sol1-5 ) ;
18668: LD_VAR 0 4
18672: PPUSH
18673: LD_STRING D2-Sol1-5
18675: PPUSH
18676: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18680: LD_VAR 0 4
18684: PPUSH
18685: CALL_OW 258
18689: PUSH
18690: LD_INT 2
18692: EQUAL
18693: IFFALSE 18707
// Say ( tmp , D2-FSol1-5 ) ;
18695: LD_VAR 0 4
18699: PPUSH
18700: LD_STRING D2-FSol1-5
18702: PPUSH
18703: CALL_OW 88
// DialogueOff ;
18707: CALL_OW 7
// end ; dec = ShowQuery1 ;
18711: LD_ADDR_VAR 0 6
18715: PUSH
18716: CALL 5795 0 0
18720: ST_TO_ADDR
// if dec = 1 then
18721: LD_VAR 0 6
18725: PUSH
18726: LD_INT 1
18728: EQUAL
18729: IFFALSE 18771
// begin DialogueOn ;
18731: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18735: LD_EXP 19
18739: PPUSH
18740: LD_STRING D2a-Kurt-1
18742: PPUSH
18743: CALL_OW 88
// DialogueOff ;
18747: CALL_OW 7
// InGameOff ;
18751: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
18755: LD_INT 1
18757: PPUSH
18758: LD_INT 2
18760: PPUSH
18761: LD_INT 2
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 80
// end ; if dec = 2 then
18771: LD_VAR 0 6
18775: PUSH
18776: LD_INT 2
18778: EQUAL
18779: IFFALSE 19279
// begin DialogueOn ;
18781: CALL_OW 6
// if tmp = JMM then
18785: LD_VAR 0 4
18789: PUSH
18790: LD_EXP 1
18794: EQUAL
18795: IFFALSE 18851
// begin Say ( JMM , D2b-JMM-1 ) ;
18797: LD_EXP 1
18801: PPUSH
18802: LD_STRING D2b-JMM-1
18804: PPUSH
18805: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18809: LD_EXP 19
18813: PPUSH
18814: LD_STRING D2b-Kurt-1
18816: PPUSH
18817: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
18821: LD_EXP 1
18825: PPUSH
18826: LD_STRING D2b-JMM-2
18828: PPUSH
18829: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18833: LD_EXP 19
18837: PPUSH
18838: LD_STRING D2b-Kurt-2
18840: PPUSH
18841: CALL_OW 88
// DialogueOff ;
18845: CALL_OW 7
// end else
18849: GO 19041
// begin if GetSex ( tmp ) = 1 then
18851: LD_VAR 0 4
18855: PPUSH
18856: CALL_OW 258
18860: PUSH
18861: LD_INT 1
18863: EQUAL
18864: IFFALSE 18878
// Say ( tmp , D2b-Sol1-1 ) ;
18866: LD_VAR 0 4
18870: PPUSH
18871: LD_STRING D2b-Sol1-1
18873: PPUSH
18874: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18878: LD_VAR 0 4
18882: PPUSH
18883: CALL_OW 258
18887: PUSH
18888: LD_INT 2
18890: EQUAL
18891: IFFALSE 18905
// Say ( tmp , D2b-FSol1-1 ) ;
18893: LD_VAR 0 4
18897: PPUSH
18898: LD_STRING D2b-FSol1-1
18900: PPUSH
18901: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
18905: LD_EXP 19
18909: PPUSH
18910: LD_STRING D2b-Kurt-1
18912: PPUSH
18913: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18917: LD_VAR 0 4
18921: PPUSH
18922: CALL_OW 258
18926: PUSH
18927: LD_INT 1
18929: EQUAL
18930: IFFALSE 18944
// Say ( tmp , D2b-Sol1-2 ) ;
18932: LD_VAR 0 4
18936: PPUSH
18937: LD_STRING D2b-Sol1-2
18939: PPUSH
18940: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18944: LD_VAR 0 4
18948: PPUSH
18949: CALL_OW 258
18953: PUSH
18954: LD_INT 2
18956: EQUAL
18957: IFFALSE 18971
// Say ( tmp , D2b-FSol1-2 ) ;
18959: LD_VAR 0 4
18963: PPUSH
18964: LD_STRING D2b-FSol1-2
18966: PPUSH
18967: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
18971: LD_EXP 19
18975: PPUSH
18976: LD_STRING D2b-Kurt-2
18978: PPUSH
18979: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18983: LD_VAR 0 4
18987: PPUSH
18988: CALL_OW 258
18992: PUSH
18993: LD_INT 1
18995: EQUAL
18996: IFFALSE 19010
// Say ( tmp , D2c-Sol1-2 ) ;
18998: LD_VAR 0 4
19002: PPUSH
19003: LD_STRING D2c-Sol1-2
19005: PPUSH
19006: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19010: LD_VAR 0 4
19014: PPUSH
19015: CALL_OW 258
19019: PUSH
19020: LD_INT 2
19022: EQUAL
19023: IFFALSE 19037
// Say ( tmp , D2c-FSol1-2 ) ;
19025: LD_VAR 0 4
19029: PPUSH
19030: LD_STRING D2c-FSol1-2
19032: PPUSH
19033: CALL_OW 88
// DialogueOff ;
19037: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19041: LD_ADDR_VAR 0 7
19045: PUSH
19046: CALL 5869 0 0
19050: ST_TO_ADDR
// if dec2 = 1 then
19051: LD_VAR 0 7
19055: PUSH
19056: LD_INT 1
19058: EQUAL
19059: IFFALSE 19101
// begin DialogueOn ;
19061: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19065: LD_EXP 19
19069: PPUSH
19070: LD_STRING D2a-Kurt-1
19072: PPUSH
19073: CALL_OW 88
// DialogueOff ;
19077: CALL_OW 7
// InGameOff ;
19081: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19085: LD_INT 1
19087: PPUSH
19088: LD_INT 2
19090: PPUSH
19091: LD_INT 2
19093: PPUSH
19094: LD_INT 1
19096: PPUSH
19097: CALL_OW 80
// end ; if dec2 = 2 then
19101: LD_VAR 0 7
19105: PUSH
19106: LD_INT 2
19108: EQUAL
19109: IFFALSE 19279
// begin if tmp = JMM then
19111: LD_VAR 0 4
19115: PUSH
19116: LD_EXP 1
19120: EQUAL
19121: IFFALSE 19181
// begin DialogueOn ;
19123: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19127: LD_EXP 1
19131: PPUSH
19132: LD_STRING D2c-JMM-1
19134: PPUSH
19135: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19139: LD_EXP 19
19143: PPUSH
19144: LD_STRING D2c-Kurt-1
19146: PPUSH
19147: CALL_OW 88
// DialogueOff ;
19151: CALL_OW 7
// InGameOff ;
19155: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19159: LD_EXP 19
19163: PPUSH
19164: LD_INT 9
19166: PPUSH
19167: CALL_OW 113
// readyToEscape = 1 ;
19171: LD_ADDR_EXP 21
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// end else
19179: GO 19279
// begin DialogueOn ;
19181: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19185: LD_VAR 0 4
19189: PPUSH
19190: CALL_OW 258
19194: PUSH
19195: LD_INT 1
19197: EQUAL
19198: IFFALSE 19212
// Say ( tmp , D2c-Sol1-1 ) ;
19200: LD_VAR 0 4
19204: PPUSH
19205: LD_STRING D2c-Sol1-1
19207: PPUSH
19208: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19212: LD_VAR 0 4
19216: PPUSH
19217: CALL_OW 258
19221: PUSH
19222: LD_INT 2
19224: EQUAL
19225: IFFALSE 19239
// Say ( tmp , D2c-FSol1-1 ) ;
19227: LD_VAR 0 4
19231: PPUSH
19232: LD_STRING D2c-FSol1-1
19234: PPUSH
19235: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19239: LD_EXP 19
19243: PPUSH
19244: LD_STRING D2c-Kurt-1
19246: PPUSH
19247: CALL_OW 88
// DialogueOff ;
19251: CALL_OW 7
// InGameOff ;
19255: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19259: LD_EXP 19
19263: PPUSH
19264: LD_INT 9
19266: PPUSH
19267: CALL_OW 113
// readyToEscape = 1 ;
19271: LD_ADDR_EXP 21
19275: PUSH
19276: LD_INT 1
19278: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
19279: LD_VAR 0 6
19283: PUSH
19284: LD_INT 3
19286: EQUAL
19287: IFFALSE 19461
// begin DialogueOn ;
19289: CALL_OW 6
// if tmp = JMM then
19293: LD_VAR 0 4
19297: PUSH
19298: LD_EXP 1
19302: EQUAL
19303: IFFALSE 19363
// begin DialogueOn ;
19305: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19309: LD_EXP 1
19313: PPUSH
19314: LD_STRING D2c-JMM-1
19316: PPUSH
19317: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19321: LD_EXP 19
19325: PPUSH
19326: LD_STRING D2c-Kurt-1
19328: PPUSH
19329: CALL_OW 88
// DialogueOff ;
19333: CALL_OW 7
// InGameOff ;
19337: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19341: LD_EXP 19
19345: PPUSH
19346: LD_INT 9
19348: PPUSH
19349: CALL_OW 113
// readyToEscape = 1 ;
19353: LD_ADDR_EXP 21
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// end else
19361: GO 19461
// begin DialogueOn ;
19363: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19367: LD_VAR 0 4
19371: PPUSH
19372: CALL_OW 258
19376: PUSH
19377: LD_INT 1
19379: EQUAL
19380: IFFALSE 19394
// Say ( tmp , D2c-Sol1-1 ) ;
19382: LD_VAR 0 4
19386: PPUSH
19387: LD_STRING D2c-Sol1-1
19389: PPUSH
19390: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19394: LD_VAR 0 4
19398: PPUSH
19399: CALL_OW 258
19403: PUSH
19404: LD_INT 2
19406: EQUAL
19407: IFFALSE 19421
// Say ( tmp , D2c-FSol1-1 ) ;
19409: LD_VAR 0 4
19413: PPUSH
19414: LD_STRING D2c-FSol1-1
19416: PPUSH
19417: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19421: LD_EXP 19
19425: PPUSH
19426: LD_STRING D2c-Kurt-1
19428: PPUSH
19429: CALL_OW 88
// DialogueOff ;
19433: CALL_OW 7
// InGameOff ;
19437: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19441: LD_EXP 19
19445: PPUSH
19446: LD_INT 9
19448: PPUSH
19449: CALL_OW 113
// readyToEscape = 1 ;
19453: LD_ADDR_EXP 21
19457: PUSH
19458: LD_INT 1
19460: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19461: LD_ADDR_EXP 29
19465: PUSH
19466: LD_INT 0
19468: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19469: LD_INT 35
19471: PPUSH
19472: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19476: LD_EXP 19
19480: PPUSH
19481: LD_INT 9
19483: PPUSH
19484: CALL_OW 308
19488: PUSH
19489: LD_EXP 21
19493: AND
19494: PUSH
19495: LD_EXP 19
19499: PPUSH
19500: CALL_OW 301
19504: OR
19505: IFFALSE 19469
// if IsDead ( Kurt ) then
19507: LD_EXP 19
19511: PPUSH
19512: CALL_OW 301
19516: IFFALSE 19520
// exit ;
19518: GO 19589
// RemoveUnit ( Kurt ) ;
19520: LD_EXP 19
19524: PPUSH
19525: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19529: LD_EXP 19
19533: PPUSH
19534: LD_STRING Kurt
19536: PPUSH
19537: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19541: LD_INT 1
19543: PPUSH
19544: LD_INT 2
19546: PPUSH
19547: CALL_OW 81
19551: PUSH
19552: LD_INT 0
19554: EQUAL
19555: IFFALSE 19565
// KurtStatus = 1 ;
19557: LD_ADDR_EXP 20
19561: PUSH
19562: LD_INT 1
19564: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19565: LD_INT 1
19567: PPUSH
19568: LD_INT 2
19570: PPUSH
19571: CALL_OW 81
19575: PUSH
19576: LD_INT 2
19578: EQUAL
19579: IFFALSE 19589
// KurtStatus = 2 ;
19581: LD_ADDR_EXP 20
19585: PUSH
19586: LD_INT 2
19588: ST_TO_ADDR
// end ; end_of_file
19589: LD_VAR 0 1
19593: RET
// every 0 0$1 do
19594: GO 19596
19596: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19597: LD_INT 3
19599: PPUSH
19600: LD_INT 32
19602: PPUSH
19603: LD_INT 3
19605: PPUSH
19606: CALL 5924 0 3
19610: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin enemyWayX = [ ] ;
19617: LD_ADDR_EXP 45
19621: PUSH
19622: EMPTY
19623: ST_TO_ADDR
// enemyWayY = [ ] ;
19624: LD_ADDR_EXP 46
19628: PUSH
19629: EMPTY
19630: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19631: LD_ADDR_VAR 0 1
19635: PUSH
19636: LD_INT 1
19638: PPUSH
19639: LD_INT 2
19641: PPUSH
19642: CALL_OW 12
19646: ST_TO_ADDR
// if rnd = 1 then
19647: LD_VAR 0 1
19651: PUSH
19652: LD_INT 1
19654: EQUAL
19655: IFFALSE 19695
// begin enemyWayX = [ 93 , 84 , 104 ] ;
19657: LD_ADDR_EXP 45
19661: PUSH
19662: LD_INT 93
19664: PUSH
19665: LD_INT 84
19667: PUSH
19668: LD_INT 104
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
19676: LD_ADDR_EXP 46
19680: PUSH
19681: LD_INT 51
19683: PUSH
19684: LD_INT 35
19686: PUSH
19687: LD_INT 28
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: LIST
19694: ST_TO_ADDR
// end ; if rnd = 2 then
19695: LD_VAR 0 1
19699: PUSH
19700: LD_INT 2
19702: EQUAL
19703: IFFALSE 19759
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
19705: LD_ADDR_EXP 45
19709: PUSH
19710: LD_INT 93
19712: PUSH
19713: LD_INT 52
19715: PUSH
19716: LD_INT 34
19718: PUSH
19719: LD_INT 28
19721: PUSH
19722: LD_INT 30
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
19732: LD_ADDR_EXP 46
19736: PUSH
19737: LD_INT 51
19739: PUSH
19740: LD_INT 45
19742: PUSH
19743: LD_INT 35
19745: PUSH
19746: LD_INT 26
19748: PUSH
19749: LD_INT 20
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: ST_TO_ADDR
// end ; enable ;
19759: ENABLE
// end ;
19760: PPOPN 1
19762: END
// every 0 0$1 do
19763: GO 19765
19765: DISABLE
// begin enable ;
19766: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
19767: LD_INT 3
19769: PPUSH
19770: LD_INT 2
19772: PPUSH
19773: LD_INT 11
19775: PPUSH
19776: LD_EXP 31
19780: PPUSH
19781: CALL 7170 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
19785: LD_INT 3
19787: PPUSH
19788: LD_INT 14
19790: PPUSH
19791: LD_EXP 31
19795: PPUSH
19796: CALL 9055 0 3
// if disableHealAI = 0 then
19800: LD_EXP 33
19804: PUSH
19805: LD_INT 0
19807: EQUAL
19808: IFFALSE 19829
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
19810: LD_INT 3
19812: PPUSH
19813: LD_INT 10
19815: PPUSH
19816: LD_INT 11
19818: PPUSH
19819: LD_INT 32
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL 7561 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
19829: LD_INT 3
19831: PPUSH
19832: LD_INT 51
19834: PPUSH
19835: LD_INT 7
19837: PPUSH
19838: CALL 8269 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
19842: LD_INT 3
19844: PPUSH
19845: LD_INT 14
19847: PPUSH
19848: LD_INT 121
19850: PPUSH
19851: LD_INT 100
19853: PPUSH
19854: CALL 6163 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
19858: LD_INT 3
19860: PPUSH
19861: LD_INT 24
19863: PPUSH
19864: LD_EXP 45
19868: PPUSH
19869: LD_EXP 46
19873: PPUSH
19874: CALL 6366 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
19878: LD_INT 3
19880: PPUSH
19881: LD_INT 11
19883: PPUSH
19884: CALL 8412 0 2
// AttackNearBuildings ( 3 , 1 ) ;
19888: LD_INT 3
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: CALL 8825 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
19898: LD_INT 2
19900: PPUSH
19901: CALL_OW 303
19905: PUSH
19906: LD_INT 2
19908: PPUSH
19909: CALL_OW 255
19913: PUSH
19914: LD_INT 1
19916: EQUAL
19917: OR
19918: IFFALSE 19930
// DefendDepot ( 3 , rudepo ) ;
19920: LD_INT 3
19922: PPUSH
19923: LD_INT 2
19925: PPUSH
19926: CALL 8105 0 2
// end ;
19930: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
19931: LD_INT 22
19933: PUSH
19934: LD_INT 3
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 55
19953: PUSH
19954: EMPTY
19955: LIST
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: LD_INT 34
19962: PUSH
19963: LD_INT 51
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL_OW 69
19984: PUSH
19985: LD_INT 0
19987: EQUAL
19988: PUSH
19989: LD_INT 21
19991: PPUSH
19992: CALL_OW 255
19996: PUSH
19997: LD_INT 3
19999: EQUAL
20000: AND
20001: PUSH
20002: LD_INT 21
20004: PPUSH
20005: CALL_OW 302
20009: AND
20010: PUSH
20011: LD_INT 2
20013: PPUSH
20014: CALL_OW 255
20018: PUSH
20019: LD_INT 3
20021: EQUAL
20022: AND
20023: PUSH
20024: LD_INT 2
20026: PPUSH
20027: CALL_OW 302
20031: AND
20032: IFFALSE 20216
20034: GO 20036
20036: DISABLE
// begin enable ;
20037: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20038: LD_INT 2
20040: PPUSH
20041: CALL_OW 274
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: LD_INT 1000
20051: PPUSH
20052: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20056: LD_INT 3
20058: PPUSH
20059: LD_INT 21
20061: PPUSH
20062: LD_INT 5
20064: PUSH
20065: LD_INT 6
20067: PUSH
20068: LD_INT 6
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: PUSH
20076: LD_OWVAR 67
20080: ARRAY
20081: PPUSH
20082: LD_INT 43
20084: PUSH
20085: LD_INT 43
20087: PUSH
20088: LD_INT 44
20090: PUSH
20091: LD_INT 44
20093: PUSH
20094: LD_INT 46
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 43
20106: PUSH
20107: LD_INT 43
20109: PUSH
20110: LD_INT 43
20112: PUSH
20113: LD_INT 44
20115: PUSH
20116: LD_INT 44
20118: PUSH
20119: LD_INT 46
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 43
20132: PUSH
20133: LD_INT 43
20135: PUSH
20136: LD_INT 43
20138: PUSH
20139: LD_INT 44
20141: PUSH
20142: LD_INT 44
20144: PUSH
20145: LD_INT 46
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: PUSH
20161: LD_OWVAR 67
20165: ARRAY
20166: PPUSH
20167: LD_INT 1
20169: PPUSH
20170: LD_INT 1
20172: PPUSH
20173: LD_INT 22
20175: PUSH
20176: LD_INT 22
20178: PUSH
20179: LD_INT 24
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 1
20188: PPUSH
20189: LD_INT 2
20191: PPUSH
20192: CALL_OW 12
20196: ARRAY
20197: PUSH
20198: LD_INT 24
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: PUSH
20206: LD_OWVAR 67
20210: ARRAY
20211: PPUSH
20212: CALL 6009 0 7
// end ;
20216: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20217: LD_INT 17
20219: PPUSH
20220: CALL_OW 255
20224: PUSH
20225: LD_INT 3
20227: EQUAL
20228: PUSH
20229: LD_INT 17
20231: PPUSH
20232: CALL_OW 302
20236: AND
20237: PUSH
20238: LD_INT 2
20240: PPUSH
20241: CALL_OW 255
20245: PUSH
20246: LD_INT 3
20248: EQUAL
20249: AND
20250: PUSH
20251: LD_INT 2
20253: PPUSH
20254: CALL_OW 302
20258: AND
20259: IFFALSE 20326
20261: GO 20263
20263: DISABLE
// begin enable ;
20264: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
20265: LD_INT 17
20267: PPUSH
20268: LD_INT 22
20270: PPUSH
20271: LD_INT 1
20273: PPUSH
20274: LD_INT 1
20276: PPUSH
20277: LD_INT 42
20279: PUSH
20280: LD_INT 43
20282: PUSH
20283: LD_INT 44
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 1
20293: PPUSH
20294: LD_INT 3
20296: PPUSH
20297: CALL_OW 12
20301: ARRAY
20302: PPUSH
20303: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
20307: LD_INT 17
20309: PPUSH
20310: LD_INT 22
20312: PPUSH
20313: LD_INT 1
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: LD_INT 51
20321: PPUSH
20322: CALL_OW 185
// end ;
20326: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
20327: LD_INT 17
20329: PPUSH
20330: CALL_OW 302
20334: PUSH
20335: LD_INT 17
20337: PPUSH
20338: CALL_OW 255
20342: PUSH
20343: LD_INT 3
20345: EQUAL
20346: AND
20347: PUSH
20348: LD_INT 2
20350: PPUSH
20351: CALL_OW 302
20355: AND
20356: PUSH
20357: LD_INT 2
20359: PPUSH
20360: CALL_OW 255
20364: PUSH
20365: LD_INT 3
20367: EQUAL
20368: AND
20369: PUSH
20370: LD_INT 17
20372: PPUSH
20373: CALL_OW 313
20377: NOT
20378: AND
20379: IFFALSE 20473
20381: GO 20383
20383: DISABLE
20384: LD_INT 0
20386: PPUSH
// begin for i = 1 to 6 do
20387: LD_ADDR_VAR 0 1
20391: PUSH
20392: DOUBLE
20393: LD_INT 1
20395: DEC
20396: ST_TO_ADDR
20397: LD_INT 6
20399: PUSH
20400: FOR_TO
20401: IFFALSE 20471
// begin uc_side = 3 ;
20403: LD_ADDR_OWVAR 20
20407: PUSH
20408: LD_INT 3
20410: ST_TO_ADDR
// uc_nation = 3 ;
20411: LD_ADDR_OWVAR 21
20415: PUSH
20416: LD_INT 3
20418: ST_TO_ADDR
// hc_gallery :=  ;
20419: LD_ADDR_OWVAR 33
20423: PUSH
20424: LD_STRING 
20426: ST_TO_ADDR
// hc_name :=  ;
20427: LD_ADDR_OWVAR 26
20431: PUSH
20432: LD_STRING 
20434: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20435: LD_INT 0
20437: PPUSH
20438: LD_EXP 34
20442: PPUSH
20443: LD_EXP 35
20447: PPUSH
20448: CALL_OW 12
20452: PPUSH
20453: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
20457: CALL_OW 44
20461: PPUSH
20462: LD_INT 17
20464: PPUSH
20465: CALL_OW 52
// end ;
20469: GO 20400
20471: POP
20472: POP
// end ;
20473: PPOPN 1
20475: END
// every 2 2$0 do var i , j ;
20476: GO 20478
20478: DISABLE
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
20483: LD_INT 14700
20485: PUSH
20486: LD_INT 33600
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: PPUSH
20496: LD_INT 2
20498: PPUSH
20499: CALL_OW 12
20503: ARRAY
20504: PPUSH
20505: CALL_OW 67
// disableHealAI = 1 ;
20509: LD_ADDR_EXP 33
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20517: LD_ADDR_VAR 0 1
20521: PUSH
20522: LD_INT 22
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 25
20534: PUSH
20535: LD_INT 4
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 69
20550: PUSH
20551: FOR_IN
20552: IFFALSE 20565
// ComExitBuilding ( i ) ;
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 122
20563: GO 20551
20565: POP
20566: POP
// wait ( 0 0$1 ) ;
20567: LD_INT 35
20569: PPUSH
20570: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20574: LD_INT 35
20576: PPUSH
20577: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20581: LD_ADDR_VAR 0 1
20585: PUSH
20586: LD_INT 22
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 25
20598: PUSH
20599: LD_INT 4
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PPUSH
20610: CALL_OW 69
20614: PUSH
20615: FOR_IN
20616: IFFALSE 20693
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_INT 19
20625: PPUSH
20626: LD_INT 22
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PUSH
20636: LD_INT 25
20638: PUSH
20639: LD_INT 12
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 70
20654: PUSH
20655: FOR_IN
20656: IFFALSE 20689
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_VAR 0 2
20667: PPUSH
20668: CALL_OW 250
20672: PPUSH
20673: LD_VAR 0 2
20677: PPUSH
20678: CALL_OW 251
20682: PPUSH
20683: CALL_OW 191
// end ;
20687: GO 20655
20689: POP
20690: POP
// end ;
20691: GO 20615
20693: POP
20694: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20695: LD_INT 22
20697: PUSH
20698: LD_INT 3
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 25
20707: PUSH
20708: LD_INT 4
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PPUSH
20719: CALL_OW 69
20723: PUSH
20724: LD_INT 0
20726: EQUAL
20727: PUSH
20728: LD_EXP 32
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: LD_INT 7
20738: PUSH
20739: LD_INT 8
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: PUSH
20747: LD_OWVAR 67
20751: ARRAY
20752: GREATEREQUAL
20753: OR
20754: PUSH
20755: LD_INT 19
20757: PPUSH
20758: LD_INT 22
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 12
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 70
20786: PUSH
20787: LD_INT 0
20789: EQUAL
20790: OR
20791: IFFALSE 20574
// disableHealAI = 0 ;
20793: LD_ADDR_EXP 33
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
20801: LD_ADDR_VAR 0 1
20805: PUSH
20806: LD_INT 22
20808: PUSH
20809: LD_INT 3
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 25
20818: PUSH
20819: LD_INT 12
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PPUSH
20830: CALL_OW 69
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20852
// SetClass ( i , 16 ) ;
20838: LD_VAR 0 1
20842: PPUSH
20843: LD_INT 16
20845: PPUSH
20846: CALL_OW 336
20850: GO 20835
20852: POP
20853: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20854: LD_ADDR_VAR 0 1
20858: PUSH
20859: LD_INT 22
20861: PUSH
20862: LD_INT 3
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 25
20871: PUSH
20872: LD_INT 4
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PPUSH
20883: CALL_OW 69
20887: PUSH
20888: FOR_IN
20889: IFFALSE 20908
// ComMoveXY ( i , 113 , 94 ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_INT 113
20898: PPUSH
20899: LD_INT 94
20901: PPUSH
20902: CALL_OW 111
20906: GO 20888
20908: POP
20909: POP
// end ;
20910: PPOPN 2
20912: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
20913: LD_INT 21
20915: PPUSH
20916: CALL_OW 255
20920: PUSH
20921: LD_INT 3
20923: EQUAL
20924: PUSH
20925: LD_INT 21
20927: PPUSH
20928: CALL_OW 302
20932: AND
20933: PUSH
20934: LD_INT 22
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 34
20946: PUSH
20947: LD_INT 51
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 69
20962: PUSH
20963: LD_INT 0
20965: EQUAL
20966: AND
20967: IFFALSE 20999
20969: GO 20971
20971: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
20972: LD_INT 21
20974: PPUSH
20975: LD_INT 23
20977: PPUSH
20978: LD_INT 1
20980: PPUSH
20981: LD_INT 1
20983: PPUSH
20984: LD_INT 51
20986: PPUSH
20987: CALL_OW 185
// wait ( 5 5$0 ) ;
20991: LD_INT 10500
20993: PPUSH
20994: CALL_OW 67
// enable ;
20998: ENABLE
// end ; end_of_file
20999: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21000: LD_EXP 26
21004: PUSH
21005: LD_INT 0
21007: LESSEQUAL
21008: IFFALSE 21157
21010: GO 21012
21012: DISABLE
21013: LD_INT 0
21015: PPUSH
21016: PPUSH
21017: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21018: LD_ADDR_VAR 0 2
21022: PUSH
21023: LD_INT 22
21025: PUSH
21026: LD_INT 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 3
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_INT 30
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 30
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: PPUSH
21076: CALL_OW 69
21080: ST_TO_ADDR
// for i in tmp do
21081: LD_ADDR_VAR 0 1
21085: PUSH
21086: LD_VAR 0 2
21090: PUSH
21091: FOR_IN
21092: IFFALSE 21125
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21094: LD_ADDR_VAR 0 3
21098: PUSH
21099: LD_VAR 0 3
21103: PUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 274
21113: PPUSH
21114: LD_INT 1
21116: PPUSH
21117: CALL_OW 275
21121: PLUS
21122: ST_TO_ADDR
21123: GO 21091
21125: POP
21126: POP
// if yourCrates >= needCrates then
21127: LD_VAR 0 3
21131: PUSH
21132: LD_EXP 25
21136: GREATEREQUAL
21137: IFFALSE 21150
// begin FinishMission ( yourCrates ) ;
21139: LD_VAR 0 3
21143: PPUSH
21144: CALL 21160 0 1
// end else
21148: GO 21157
// begin YouLost ( matmin ) ;
21150: LD_STRING matmin
21152: PPUSH
21153: CALL_OW 104
// end ; end ;
21157: PPOPN 3
21159: END
// export function FinishMission ( crates ) ; begin
21160: LD_INT 0
21162: PPUSH
// if crates + 100 > crates then
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 100
21170: PLUS
21171: PUSH
21172: LD_VAR 0 1
21176: GREATER
21177: IFFALSE 21201
// begin AddMedal ( cans , 1 ) ;
21179: LD_STRING cans
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21189: LD_INT 1
21191: PPUSH
21192: LD_STRING 06_crates_1
21194: PPUSH
21195: CALL_OW 39
// end else
21199: GO 21222
// begin AddMedal ( cans , - 1 ) ;
21201: LD_STRING cans
21203: PPUSH
21204: LD_INT 1
21206: NEG
21207: PPUSH
21208: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21212: LD_INT 0
21214: PPUSH
21215: LD_STRING 06_crates_1
21217: PPUSH
21218: CALL_OW 39
// end ; if unitLost < 2 then
21222: LD_EXP 30
21226: PUSH
21227: LD_INT 2
21229: LESS
21230: IFFALSE 21244
// begin AddMedal ( people , 1 ) ;
21232: LD_STRING people
21234: PPUSH
21235: LD_INT 1
21237: PPUSH
21238: CALL_OW 101
// end else
21242: GO 21255
// begin AddMedal ( people , - 1 ) ;
21244: LD_STRING people
21246: PPUSH
21247: LD_INT 1
21249: NEG
21250: PPUSH
21251: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
21255: LD_EXP 28
21259: PPUSH
21260: LD_STRING 06_remoteVehs_1
21262: PPUSH
21263: CALL_OW 39
// if remoteVehiclesBuild = 1 then
21267: LD_EXP 28
21271: PUSH
21272: LD_INT 1
21274: EQUAL
21275: IFFALSE 21289
// begin AddMedal ( remote , 1 ) ;
21277: LD_STRING remote
21279: PPUSH
21280: LD_INT 1
21282: PPUSH
21283: CALL_OW 101
// end else
21287: GO 21329
// begin if GetTech ( 18 , 1 ) = state_enabled then
21289: LD_INT 18
21291: PPUSH
21292: LD_INT 1
21294: PPUSH
21295: CALL_OW 321
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21318
// begin AddMedal ( remote , - 1 ) ;
21305: LD_STRING remote
21307: PPUSH
21308: LD_INT 1
21310: NEG
21311: PPUSH
21312: CALL_OW 101
// end else
21316: GO 21329
// begin AddMedal ( remote , - 2 ) ;
21318: LD_STRING remote
21320: PPUSH
21321: LD_INT 2
21323: NEG
21324: PPUSH
21325: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
21329: LD_EXP 20
21333: PPUSH
21334: LD_STRING 06_KurtStatus_1
21336: PPUSH
21337: CALL_OW 39
// GiveMedals ( Main ) ;
21341: LD_STRING Main
21343: PPUSH
21344: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21348: LD_INT 22
21350: PUSH
21351: LD_INT 1
21353: PUSH
21354: EMPTY
21355: LIST
21356: LIST
21357: PUSH
21358: LD_INT 21
21360: PUSH
21361: LD_INT 1
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 50
21370: PUSH
21371: EMPTY
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 25
21399: PUSH
21400: LD_INT 3
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 25
21409: PUSH
21410: LD_INT 4
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 69
21434: PPUSH
21435: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21439: LD_EXP 1
21443: PPUSH
21444: LD_EXP 43
21448: PUSH
21449: LD_STRING JMM
21451: STR
21452: PPUSH
21453: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21457: LD_EXP 2
21461: PPUSH
21462: LD_EXP 43
21466: PUSH
21467: LD_STRING Lisa
21469: STR
21470: PPUSH
21471: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21475: LD_EXP 3
21479: PPUSH
21480: LD_EXP 43
21484: PUSH
21485: LD_STRING Bobby
21487: STR
21488: PPUSH
21489: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21493: LD_EXP 4
21497: PPUSH
21498: LD_EXP 43
21502: PUSH
21503: LD_STRING Cyrus
21505: STR
21506: PPUSH
21507: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21511: LD_EXP 5
21515: PPUSH
21516: LD_EXP 43
21520: PUSH
21521: LD_STRING Frank
21523: STR
21524: PPUSH
21525: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21529: LD_EXP 6
21533: PPUSH
21534: LD_EXP 43
21538: PUSH
21539: LD_STRING Brown
21541: STR
21542: PPUSH
21543: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21547: LD_EXP 7
21551: PPUSH
21552: LD_EXP 43
21556: PUSH
21557: LD_STRING Donaldson
21559: STR
21560: PPUSH
21561: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21565: LD_EXP 8
21569: PPUSH
21570: LD_EXP 43
21574: PUSH
21575: LD_STRING Gladstone
21577: STR
21578: PPUSH
21579: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21583: LD_EXP 9
21587: PPUSH
21588: LD_EXP 43
21592: PUSH
21593: LD_STRING Denis
21595: STR
21596: PPUSH
21597: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21601: LD_EXP 15
21605: PPUSH
21606: LD_EXP 43
21610: PUSH
21611: LD_STRING Joan
21613: STR
21614: PPUSH
21615: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21619: LD_EXP 16
21623: PPUSH
21624: LD_STRING 06_JoanStatus_1
21626: PPUSH
21627: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21631: LD_INT 50
21633: PUSH
21634: EMPTY
21635: LIST
21636: PUSH
21637: LD_INT 22
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 21
21649: PUSH
21650: LD_INT 1
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 25
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 25
21672: PUSH
21673: LD_INT 2
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 25
21682: PUSH
21683: LD_INT 3
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 25
21692: PUSH
21693: LD_INT 4
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: PPUSH
21713: CALL_OW 69
21717: PUSH
21718: LD_EXP 1
21722: PUSH
21723: LD_EXP 2
21727: PUSH
21728: LD_EXP 3
21732: PUSH
21733: LD_EXP 4
21737: PUSH
21738: LD_EXP 5
21742: PUSH
21743: LD_EXP 6
21747: PUSH
21748: LD_EXP 7
21752: PUSH
21753: LD_EXP 8
21757: PUSH
21758: LD_EXP 9
21762: PUSH
21763: LD_EXP 15
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: DIFF
21780: PPUSH
21781: LD_STRING 06_other_survivors
21783: PPUSH
21784: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
21788: LD_INT 50
21790: PUSH
21791: EMPTY
21792: LIST
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 21
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 25
21819: PUSH
21820: LD_INT 12
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 25
21829: PUSH
21830: LD_INT 16
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: PPUSH
21848: CALL_OW 69
21852: PPUSH
21853: LD_STRING 06_other_apemans
21855: PPUSH
21856: CALL_OW 38
// YouWin ;
21860: CALL_OW 103
// end ; end_of_file
21864: LD_VAR 0 2
21868: RET
// every 1 1$0 trigger sendedConvoys = 3 do
21869: LD_EXP 39
21873: PUSH
21874: LD_INT 3
21876: EQUAL
21877: IFFALSE 21992
21879: GO 21881
21881: DISABLE
// begin enable ;
21882: ENABLE
// sendedConvoys = 0 ;
21883: LD_ADDR_EXP 39
21887: PUSH
21888: LD_INT 0
21890: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
21891: LD_INT 6
21893: PPUSH
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 5
21899: PPUSH
21900: LD_INT 10
21902: PPUSH
21903: CALL_OW 12
21907: PUSH
21908: LD_INT 5
21910: PPUSH
21911: LD_INT 11
21913: PPUSH
21914: CALL_OW 12
21918: PUSH
21919: LD_INT 8
21921: PPUSH
21922: LD_INT 12
21924: PPUSH
21925: CALL_OW 12
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_OWVAR 67
21939: ARRAY
21940: PPUSH
21941: LD_INT 0
21943: PPUSH
21944: LD_INT 0
21946: PPUSH
21947: LD_INT 0
21949: PPUSH
21950: LD_INT 3
21952: PPUSH
21953: LD_EXP 34
21957: PPUSH
21958: LD_EXP 35
21962: PPUSH
21963: CALL_OW 12
21967: PPUSH
21968: LD_INT 18
21970: PPUSH
21971: LD_INT 17
21973: PPUSH
21974: LD_INT 1
21976: PPUSH
21977: LD_INT 1
21979: PPUSH
21980: LD_INT 2
21982: PPUSH
21983: CALL_OW 12
21987: PPUSH
21988: CALL 9578 0 12
// end ; end_of_file
21992: END
// export function PrepareNature ; var i , un ; begin
21993: LD_INT 0
21995: PPUSH
21996: PPUSH
21997: PPUSH
// for i = 1 to Difficulty + 2 do
21998: LD_ADDR_VAR 0 2
22002: PUSH
22003: DOUBLE
22004: LD_INT 1
22006: DEC
22007: ST_TO_ADDR
22008: LD_OWVAR 67
22012: PUSH
22013: LD_INT 2
22015: PLUS
22016: PUSH
22017: FOR_TO
22018: IFFALSE 22127
// begin hc_sex = sex_male ;
22020: LD_ADDR_OWVAR 27
22024: PUSH
22025: LD_INT 1
22027: ST_TO_ADDR
// uc_side = 0 ;
22028: LD_ADDR_OWVAR 20
22032: PUSH
22033: LD_INT 0
22035: ST_TO_ADDR
// uc_nation = nation_nature ;
22036: LD_ADDR_OWVAR 21
22040: PUSH
22041: LD_INT 0
22043: ST_TO_ADDR
// hc_class = class_tiger ;
22044: LD_ADDR_OWVAR 28
22048: PUSH
22049: LD_INT 14
22051: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22052: LD_ADDR_OWVAR 31
22056: PUSH
22057: LD_EXP 35
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 0
22067: PUSH
22068: LD_INT 0
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22077: LD_ADDR_OWVAR 35
22081: PUSH
22082: LD_INT 5
22084: NEG
22085: PPUSH
22086: LD_INT 5
22088: PPUSH
22089: CALL_OW 12
22093: PUSH
22094: LD_OWVAR 67
22098: MUL
22099: ST_TO_ADDR
// un = CreateHuman ;
22100: LD_ADDR_VAR 0 3
22104: PUSH
22105: CALL_OW 44
22109: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22110: LD_VAR 0 3
22114: PPUSH
22115: LD_INT 20
22117: PPUSH
22118: LD_INT 0
22120: PPUSH
22121: CALL_OW 49
// end ;
22125: GO 22017
22127: POP
22128: POP
// for i = 1 to rand ( 3 , 4 ) do
22129: LD_ADDR_VAR 0 2
22133: PUSH
22134: DOUBLE
22135: LD_INT 1
22137: DEC
22138: ST_TO_ADDR
22139: LD_INT 3
22141: PPUSH
22142: LD_INT 4
22144: PPUSH
22145: CALL_OW 12
22149: PUSH
22150: FOR_TO
22151: IFFALSE 22245
// begin hc_sex = sex_male ;
22153: LD_ADDR_OWVAR 27
22157: PUSH
22158: LD_INT 1
22160: ST_TO_ADDR
// uc_side = 0 ;
22161: LD_ADDR_OWVAR 20
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// uc_nation = nation_nature ;
22169: LD_ADDR_OWVAR 21
22173: PUSH
22174: LD_INT 0
22176: ST_TO_ADDR
// hc_class = 18 ;
22177: LD_ADDR_OWVAR 28
22181: PUSH
22182: LD_INT 18
22184: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22185: LD_ADDR_OWVAR 31
22189: PUSH
22190: LD_EXP 35
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: ST_TO_ADDR
// hc_agressivity = 0 ;
22210: LD_ADDR_OWVAR 35
22214: PUSH
22215: LD_INT 0
22217: ST_TO_ADDR
// un = CreateHuman ;
22218: LD_ADDR_VAR 0 3
22222: PUSH
22223: CALL_OW 44
22227: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 20
22235: PPUSH
22236: LD_INT 0
22238: PPUSH
22239: CALL_OW 49
// end ;
22243: GO 22150
22245: POP
22246: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
22247: LD_ADDR_VAR 0 2
22251: PUSH
22252: DOUBLE
22253: LD_INT 1
22255: DEC
22256: ST_TO_ADDR
22257: LD_INT 1
22259: PPUSH
22260: LD_INT 3
22262: PPUSH
22263: CALL_OW 12
22267: PUSH
22268: LD_OWVAR 67
22272: PLUS
22273: PUSH
22274: FOR_TO
22275: IFFALSE 22456
// begin hc_sex = sex_male ;
22277: LD_ADDR_OWVAR 27
22281: PUSH
22282: LD_INT 1
22284: ST_TO_ADDR
// uc_side = 0 ;
22285: LD_ADDR_OWVAR 20
22289: PUSH
22290: LD_INT 0
22292: ST_TO_ADDR
// uc_nation = nation_nature ;
22293: LD_ADDR_OWVAR 21
22297: PUSH
22298: LD_INT 0
22300: ST_TO_ADDR
// hc_class = class_apeman ;
22301: LD_ADDR_OWVAR 28
22305: PUSH
22306: LD_INT 12
22308: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22309: LD_ADDR_OWVAR 31
22313: PUSH
22314: LD_EXP 34
22318: PPUSH
22319: LD_EXP 35
22323: PPUSH
22324: CALL_OW 12
22328: PUSH
22329: LD_EXP 34
22333: PPUSH
22334: LD_EXP 35
22338: PPUSH
22339: CALL_OW 12
22343: PUSH
22344: LD_EXP 34
22348: PPUSH
22349: LD_EXP 35
22353: PPUSH
22354: CALL_OW 12
22358: PUSH
22359: LD_EXP 34
22363: PPUSH
22364: LD_EXP 35
22368: PPUSH
22369: CALL_OW 12
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
22380: LD_ADDR_OWVAR 35
22384: PUSH
22385: LD_INT 20
22387: PPUSH
22388: LD_INT 30
22390: PPUSH
22391: CALL_OW 12
22395: PUSH
22396: LD_INT 30
22398: PPUSH
22399: LD_INT 40
22401: PPUSH
22402: CALL_OW 12
22406: PUSH
22407: LD_INT 40
22409: PPUSH
22410: LD_INT 50
22412: PPUSH
22413: CALL_OW 12
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: LD_OWVAR 67
22427: ARRAY
22428: ST_TO_ADDR
// un = CreateHuman ;
22429: LD_ADDR_VAR 0 3
22433: PUSH
22434: CALL_OW 44
22438: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22439: LD_VAR 0 3
22443: PPUSH
22444: LD_INT 21
22446: PPUSH
22447: LD_INT 0
22449: PPUSH
22450: CALL_OW 49
// end ;
22454: GO 22274
22456: POP
22457: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
22458: LD_ADDR_VAR 0 2
22462: PUSH
22463: DOUBLE
22464: LD_INT 1
22466: DEC
22467: ST_TO_ADDR
22468: LD_INT 5
22470: PPUSH
22471: LD_INT 6
22473: PPUSH
22474: CALL_OW 12
22478: PUSH
22479: LD_OWVAR 67
22483: PLUS
22484: PUSH
22485: FOR_TO
22486: IFFALSE 22632
// begin hc_sex = sex_male ;
22488: LD_ADDR_OWVAR 27
22492: PUSH
22493: LD_INT 1
22495: ST_TO_ADDR
// uc_side = 0 ;
22496: LD_ADDR_OWVAR 20
22500: PUSH
22501: LD_INT 0
22503: ST_TO_ADDR
// uc_nation = nation_nature ;
22504: LD_ADDR_OWVAR 21
22508: PUSH
22509: LD_INT 0
22511: ST_TO_ADDR
// hc_class = class_apeman ;
22512: LD_ADDR_OWVAR 28
22516: PUSH
22517: LD_INT 12
22519: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22520: LD_ADDR_OWVAR 31
22524: PUSH
22525: LD_EXP 34
22529: PPUSH
22530: LD_EXP 35
22534: PPUSH
22535: CALL_OW 12
22539: PUSH
22540: LD_EXP 34
22544: PPUSH
22545: LD_EXP 35
22549: PPUSH
22550: CALL_OW 12
22554: PUSH
22555: LD_OWVAR 67
22559: PLUS
22560: PUSH
22561: LD_EXP 34
22565: PPUSH
22566: LD_EXP 35
22570: PPUSH
22571: CALL_OW 12
22575: PUSH
22576: LD_EXP 34
22580: PPUSH
22581: LD_EXP 35
22585: PPUSH
22586: CALL_OW 12
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: ST_TO_ADDR
// hc_agressivity = 0 ;
22597: LD_ADDR_OWVAR 35
22601: PUSH
22602: LD_INT 0
22604: ST_TO_ADDR
// un = CreateHuman ;
22605: LD_ADDR_VAR 0 3
22609: PUSH
22610: CALL_OW 44
22614: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22615: LD_VAR 0 3
22619: PPUSH
22620: LD_INT 22
22622: PPUSH
22623: LD_INT 0
22625: PPUSH
22626: CALL_OW 49
// end ;
22630: GO 22485
22632: POP
22633: POP
// end ; end_of_file
22634: LD_VAR 0 1
22638: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22639: LD_EXP 1
22643: PPUSH
22644: CALL_OW 301
22648: IFFALSE 22660
22650: GO 22652
22652: DISABLE
// YouLost ( JMM ) ;
22653: LD_STRING JMM
22655: PPUSH
22656: CALL_OW 104
22660: END
