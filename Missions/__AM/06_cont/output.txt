// export JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , DeltaDoctor ; export others , ape , tempCharles ; export Harisson , Joan , JoanStatus ; export HarrSupp1 , HarrSupp2 ; export Kurt , KurtStatus , readyToEscape ; export contactWithRussian ; export firstTower ; export timerStatus ; export needCrates , timeToEnd , strings ; export remoteVehiclesBuild ; export blockSpawn ; export unitLost ; export ruDestroyedBuildings ; export tamedApemans ; export disableHealAI ; export RuSolMinLevel , RuSolMaxLevel ; export russianTanks , russianDamageTanks ; export cratesStatus ; export sendedConvoys ; export resources , firstCrateSpawn ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rudepo , sverdlov ) ;
   8: LD_INT 2
  10: PPUSH
  11: LD_STRING sverdlov
  13: PPUSH
  14: CALL_OW 500
// debugMode = 0 ;
  18: LD_ADDR_EXP 42
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// mission_prefix := 06c_ ;
  26: LD_ADDR_EXP 43
  30: PUSH
  31: LD_STRING 06c_
  33: ST_TO_ADDR
// mission_prefix_prev := 06_ ;
  34: LD_ADDR_EXP 44
  38: PUSH
  39: LD_STRING 06_
  41: ST_TO_ADDR
// contactWithRussian = 0 ;
  42: LD_ADDR_EXP 22
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// firstTower = 0 ;
  50: LD_ADDR_EXP 23
  54: PUSH
  55: LD_INT 0
  57: ST_TO_ADDR
// resources = [ ] ;
  58: LD_ADDR_EXP 40
  62: PUSH
  63: EMPTY
  64: ST_TO_ADDR
// firstCrateSpawn := false ;
  65: LD_ADDR_EXP 41
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// blockSpawn = 0 ;
  73: LD_ADDR_EXP 29
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// KurtStatus = 0 ;
  81: LD_ADDR_EXP 20
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// readyToEscape = 0 ;
  89: LD_ADDR_EXP 21
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// JoanStatus = 0 ;
  97: LD_ADDR_EXP 16
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// cratesStatus = 2 ;
 105: LD_ADDR_EXP 38
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// timerStatus = 1 ;
 113: LD_ADDR_EXP 24
 117: PUSH
 118: LD_INT 1
 120: ST_TO_ADDR
// needCrates = [ 350 , 500 , 700 ] [ Difficulty ] ;
 121: LD_ADDR_EXP 25
 125: PUSH
 126: LD_INT 350
 128: PUSH
 129: LD_INT 500
 131: PUSH
 132: LD_INT 700
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_OWVAR 67
 144: ARRAY
 145: ST_TO_ADDR
// timeToEnd = 50 50$0 ;
 146: LD_ADDR_EXP 26
 150: PUSH
 151: LD_INT 105000
 153: ST_TO_ADDR
// remoteVehiclesBuild = 0 ;
 154: LD_ADDR_EXP 28
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// sendedConvoys = 0 ;
 162: LD_ADDR_EXP 39
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// tamedApemans = 0 ;
 170: LD_ADDR_EXP 32
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// unitLost = 0 ;
 178: LD_ADDR_EXP 30
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
 186: LD_ADDR_EXP 31
 190: PUSH
 191: EMPTY
 192: ST_TO_ADDR
// russianTanks = [ ] ;
 193: LD_ADDR_EXP 36
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// russianDamageTanks = [ ] ;
 200: LD_ADDR_EXP 37
 204: PUSH
 205: EMPTY
 206: ST_TO_ADDR
// disableHealAI = 0 ;
 207: LD_ADDR_EXP 33
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// strings = [ ] ;
 215: LD_ADDR_EXP 27
 219: PUSH
 220: EMPTY
 221: ST_TO_ADDR
// PrepareDifficulty ;
 222: CALL 5709 0 0
// PrepareNature ;
 226: CALL 22245 0 0
// PrepareRussian ;
 230: CALL 4816 0 0
// PrepareVehicles ;
 234: CALL 1471 0 0
// PrepareHeroes ;
 238: CALL 489 0 0
// PrepareOthers ;
 242: CALL 1892 0 0
// PreparePlayerApemans ;
 246: CALL 2034 0 0
// end ;
 250: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 251: LD_EXP 42
 255: PUSH
 256: LD_INT 1
 258: EQUAL
 259: IFFALSE 486
 261: GO 263
 263: DISABLE
 264: LD_INT 0
 266: PPUSH
// begin enable ;
 267: ENABLE
// fogoff ( true ) ;
 268: LD_INT 1
 270: PPUSH
 271: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 21
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PPUSH
 304: CALL_OW 69
 308: PUSH
 309: FOR_IN
 310: IFFALSE 326
// SetLives ( i , 1000 ) ;
 312: LD_VAR 0 1
 316: PPUSH
 317: LD_INT 1000
 319: PPUSH
 320: CALL_OW 234
 324: GO 309
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 30
 345: PUSH
 346: LD_INT 0
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: PUSH
 362: FOR_IN
 363: IFFALSE 387
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 365: LD_VAR 0 1
 369: PPUSH
 370: CALL_OW 274
 374: PPUSH
 375: LD_INT 1
 377: PPUSH
 378: LD_INT 9999
 380: PPUSH
 381: CALL_OW 277
 385: GO 362
 387: POP
 388: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_depot ] ] ) do
 389: LD_ADDR_VAR 0 1
 393: PUSH
 394: LD_INT 22
 396: PUSH
 397: LD_INT 1
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PUSH
 404: LD_INT 30
 406: PUSH
 407: LD_INT 0
 409: PUSH
 410: EMPTY
 411: LIST
 412: LIST
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PPUSH
 418: CALL_OW 69
 422: PUSH
 423: FOR_IN
 424: IFFALSE 448
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 426: LD_VAR 0 1
 430: PPUSH
 431: CALL_OW 274
 435: PPUSH
 436: LD_INT 2
 438: PPUSH
 439: LD_INT 9999
 441: PPUSH
 442: CALL_OW 277
 446: GO 423
 448: POP
 449: POP
// if IsSelected ( rudepo ) then
 450: LD_INT 2
 452: PPUSH
 453: CALL_OW 306
 457: IFFALSE 467
// your_side = 3 ;
 459: LD_ADDR_OWVAR 2
 463: PUSH
 464: LD_INT 3
 466: ST_TO_ADDR
// if IsSelected ( JMM ) then
 467: LD_EXP 1
 471: PPUSH
 472: CALL_OW 306
 476: IFFALSE 486
// your_side = 1 ;
 478: LD_ADDR_OWVAR 2
 482: PUSH
 483: LD_INT 1
 485: ST_TO_ADDR
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var veh ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
// uc_side = 1 ;
 493: LD_ADDR_OWVAR 20
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// uc_nation = 1 ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 1
 508: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 509: LD_ADDR_EXP 1
 513: PUSH
 514: LD_STRING JMM
 516: PPUSH
 517: LD_INT 1
 519: PPUSH
 520: CALL 5193 0 2
 524: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 525: LD_ADDR_EXP 14
 529: PUSH
 530: LD_STRING Harisson
 532: PPUSH
 533: LD_INT 0
 535: PPUSH
 536: CALL 5193 0 2
 540: ST_TO_ADDR
// DeltaDoctor = CreateCharacter ( DeltaDoctor ) ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_STRING DeltaDoctor
 548: PPUSH
 549: CALL_OW 34
 553: ST_TO_ADDR
// veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 554: LD_ADDR_VAR 0 2
 558: PUSH
 559: LD_INT 22
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 58
 581: PUSH
 582: EMPTY
 583: LIST
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PPUSH
 590: CALL_OW 69
 594: ST_TO_ADDR
// if veh > 0 then
 595: LD_VAR 0 2
 599: PUSH
 600: LD_INT 0
 602: GREATER
 603: IFFALSE 625
// begin PlaceHumanInUnit ( JMM , veh [ 1 ] ) ;
 605: LD_EXP 1
 609: PPUSH
 610: LD_VAR 0 2
 614: PUSH
 615: LD_INT 1
 617: ARRAY
 618: PPUSH
 619: CALL_OW 52
// end else
 623: GO 640
// begin PlaceUnitArea ( JMM , PlayerSpawn , false ) ;
 625: LD_EXP 1
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ; if LoadVariable ( LisaIn06 , 0 ) = 1 then
 640: LD_STRING LisaIn06
 642: PPUSH
 643: LD_INT 0
 645: PPUSH
 646: CALL_OW 30
 650: PUSH
 651: LD_INT 1
 653: EQUAL
 654: IFFALSE 758
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 656: LD_ADDR_VAR 0 2
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 58
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 697: LD_ADDR_EXP 2
 701: PUSH
 702: LD_STRING Lisa
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: CALL 5193 0 2
 712: ST_TO_ADDR
// if veh > 0 then
 713: LD_VAR 0 2
 717: PUSH
 718: LD_INT 0
 720: GREATER
 721: IFFALSE 743
// begin PlaceHumanInUnit ( Lisa , veh [ 1 ] ) ;
 723: LD_EXP 2
 727: PPUSH
 728: LD_VAR 0 2
 732: PUSH
 733: LD_INT 1
 735: ARRAY
 736: PPUSH
 737: CALL_OW 52
// end else
 741: GO 758
// begin PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 743: LD_EXP 2
 747: PPUSH
 748: LD_INT 2
 750: PPUSH
 751: LD_INT 0
 753: PPUSH
 754: CALL_OW 49
// end ; end ; if LoadVariable ( BobbyIn06 , 0 ) = 1 then
 758: LD_STRING BobbyIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: PUSH
 769: LD_INT 1
 771: EQUAL
 772: IFFALSE 876
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 1
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 21
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 58
 801: PUSH
 802: EMPTY
 803: LIST
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true ) ;
 815: LD_ADDR_EXP 3
 819: PUSH
 820: LD_STRING Bobby
 822: PPUSH
 823: LD_INT 1
 825: PPUSH
 826: CALL 5193 0 2
 830: ST_TO_ADDR
// if veh > 0 then
 831: LD_VAR 0 2
 835: PUSH
 836: LD_INT 0
 838: GREATER
 839: IFFALSE 861
// begin PlaceHumanInUnit ( Bobby , veh [ 1 ] ) ;
 841: LD_EXP 3
 845: PPUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_INT 1
 853: ARRAY
 854: PPUSH
 855: CALL_OW 52
// end else
 859: GO 876
// begin PlaceUnitArea ( Bobby , PlayerSpawn , false ) ;
 861: LD_EXP 3
 865: PPUSH
 866: LD_INT 2
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: CALL_OW 49
// end ; end ; if LoadVariable ( CyrusIn06 , 0 ) = 1 then
 876: LD_STRING CyrusIn06
 878: PPUSH
 879: LD_INT 0
 881: PPUSH
 882: CALL_OW 30
 886: PUSH
 887: LD_INT 1
 889: EQUAL
 890: IFFALSE 994
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 21
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: LD_INT 58
 919: PUSH
 920: EMPTY
 921: LIST
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PPUSH
 928: CALL_OW 69
 932: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 933: LD_ADDR_EXP 4
 937: PUSH
 938: LD_STRING Cyrus
 940: PPUSH
 941: LD_INT 1
 943: PPUSH
 944: CALL 5193 0 2
 948: ST_TO_ADDR
// if veh > 0 then
 949: LD_VAR 0 2
 953: PUSH
 954: LD_INT 0
 956: GREATER
 957: IFFALSE 979
// begin PlaceHumanInUnit ( Cyrus , veh [ 1 ] ) ;
 959: LD_EXP 4
 963: PPUSH
 964: LD_VAR 0 2
 968: PUSH
 969: LD_INT 1
 971: ARRAY
 972: PPUSH
 973: CALL_OW 52
// end else
 977: GO 994
// begin PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 979: LD_EXP 4
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ; end ; if LoadVariable ( FrankIn06 , 0 ) = 1 then
 994: LD_STRING FrankIn06
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 30
1004: PUSH
1005: LD_INT 1
1007: EQUAL
1008: IFFALSE 1112
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 21
1027: PUSH
1028: LD_INT 2
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 58
1037: PUSH
1038: EMPTY
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
1051: LD_ADDR_EXP 5
1055: PUSH
1056: LD_STRING Frank
1058: PPUSH
1059: LD_INT 1
1061: PPUSH
1062: CALL 5193 0 2
1066: ST_TO_ADDR
// if veh > 0 then
1067: LD_VAR 0 2
1071: PUSH
1072: LD_INT 0
1074: GREATER
1075: IFFALSE 1097
// begin PlaceHumanInUnit ( Frank , veh [ 1 ] ) ;
1077: LD_EXP 5
1081: PPUSH
1082: LD_VAR 0 2
1086: PUSH
1087: LD_INT 1
1089: ARRAY
1090: PPUSH
1091: CALL_OW 52
// end else
1095: GO 1112
// begin PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1097: LD_EXP 5
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 0
1107: PPUSH
1108: CALL_OW 49
// end ; end ; if LoadVariable ( BrownIn06 , 0 ) = 1 then
1112: LD_STRING BrownIn06
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 30
1122: PUSH
1123: LD_INT 1
1125: EQUAL
1126: IFFALSE 1230
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 21
1145: PUSH
1146: LD_INT 2
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 58
1155: PUSH
1156: EMPTY
1157: LIST
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: LIST
1163: PPUSH
1164: CALL_OW 69
1168: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true ) ;
1169: LD_ADDR_EXP 6
1173: PUSH
1174: LD_STRING Brown
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL 5193 0 2
1184: ST_TO_ADDR
// if veh > 0 then
1185: LD_VAR 0 2
1189: PUSH
1190: LD_INT 0
1192: GREATER
1193: IFFALSE 1215
// begin PlaceHumanInUnit ( Brown , veh [ 1 ] ) ;
1195: LD_EXP 6
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// end else
1213: GO 1230
// begin PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1215: LD_EXP 6
1219: PPUSH
1220: LD_INT 2
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 49
// end ; end ; if LoadVariable ( DonaldsonIn06 , 0 ) = 1 then
1230: LD_STRING DonaldsonIn06
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 30
1240: PUSH
1241: LD_INT 1
1243: EQUAL
1244: IFFALSE 1348
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1246: LD_ADDR_VAR 0 2
1250: PUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 21
1263: PUSH
1264: LD_INT 2
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true ) ;
1287: LD_ADDR_EXP 7
1291: PUSH
1292: LD_STRING Donaldson
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL 5193 0 2
1302: ST_TO_ADDR
// if veh > 0 then
1303: LD_VAR 0 2
1307: PUSH
1308: LD_INT 0
1310: GREATER
1311: IFFALSE 1333
// begin PlaceHumanInUnit ( Donaldson , veh [ 1 ] ) ;
1313: LD_EXP 7
1317: PPUSH
1318: LD_VAR 0 2
1322: PUSH
1323: LD_INT 1
1325: ARRAY
1326: PPUSH
1327: CALL_OW 52
// end else
1331: GO 1348
// begin PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
1333: LD_EXP 7
1337: PPUSH
1338: LD_INT 2
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// end ; end ; if LoadVariable ( GladstoneIn06 , 0 ) = 1 then
1348: LD_STRING GladstoneIn06
1350: PPUSH
1351: LD_INT 0
1353: PPUSH
1354: CALL_OW 30
1358: PUSH
1359: LD_INT 1
1361: EQUAL
1362: IFFALSE 1466
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1364: LD_ADDR_VAR 0 2
1368: PUSH
1369: LD_INT 22
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 21
1381: PUSH
1382: LD_INT 2
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 58
1391: PUSH
1392: EMPTY
1393: LIST
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: PPUSH
1400: CALL_OW 69
1404: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1405: LD_ADDR_EXP 8
1409: PUSH
1410: LD_STRING Gladstone
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL 5193 0 2
1420: ST_TO_ADDR
// if veh > 0 then
1421: LD_VAR 0 2
1425: PUSH
1426: LD_INT 0
1428: GREATER
1429: IFFALSE 1451
// begin PlaceHumanInUnit ( Gladstone , veh [ 1 ] ) ;
1431: LD_EXP 8
1435: PPUSH
1436: LD_VAR 0 2
1440: PUSH
1441: LD_INT 1
1443: ARRAY
1444: PPUSH
1445: CALL_OW 52
// end else
1449: GO 1466
// begin PlaceUnitArea ( Gladstone , PlayerSpawn , false ) ;
1451: LD_EXP 8
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 49
// end ; end ; end ;
1466: LD_VAR 0 1
1470: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1471: LD_INT 0
1473: PPUSH
1474: PPUSH
1475: PPUSH
1476: PPUSH
1477: PPUSH
1478: PPUSH
// vehicles = LoadVariable ( 06_VehiclesIn06_1 , [ ] ) ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_STRING 06_VehiclesIn06_1
1486: PPUSH
1487: EMPTY
1488: PPUSH
1489: CALL_OW 30
1493: ST_TO_ADDR
// resources = LoadVariable ( 06_ResourcesInCargo06_1 , [ ] ) ;
1494: LD_ADDR_EXP 40
1498: PUSH
1499: LD_STRING 06_ResourcesInCargo06_1
1501: PPUSH
1502: EMPTY
1503: PPUSH
1504: CALL_OW 30
1508: ST_TO_ADDR
// cargoList = [ ] ;
1509: LD_ADDR_VAR 0 6
1513: PUSH
1514: EMPTY
1515: ST_TO_ADDR
// uc_side = 1 ;
1516: LD_ADDR_OWVAR 20
1520: PUSH
1521: LD_INT 1
1523: ST_TO_ADDR
// if vehicles > 0 then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 0
1531: GREATER
1532: IFFALSE 1887
// begin for i := 1 to vehicles do
1534: LD_ADDR_VAR 0 2
1538: PUSH
1539: DOUBLE
1540: LD_INT 1
1542: DEC
1543: ST_TO_ADDR
1544: LD_VAR 0 5
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1699
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: LD_VAR 0 2
1566: ARRAY
1567: PUSH
1568: LD_INT 1
1570: ARRAY
1571: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1572: LD_ADDR_OWVAR 37
1576: PUSH
1577: LD_VAR 0 5
1581: PUSH
1582: LD_VAR 0 2
1586: ARRAY
1587: PUSH
1588: LD_INT 2
1590: ARRAY
1591: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1592: LD_ADDR_OWVAR 39
1596: PUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1612: LD_ADDR_OWVAR 38
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_VAR 0 2
1626: ARRAY
1627: PUSH
1628: LD_INT 4
1630: ARRAY
1631: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1632: LD_ADDR_OWVAR 40
1636: PUSH
1637: LD_VAR 0 5
1641: PUSH
1642: LD_VAR 0 2
1646: ARRAY
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1652: LD_ADDR_OWVAR 41
1656: PUSH
1657: LD_INT 40
1659: ST_TO_ADDR
// veh = CreateVehicle ;
1660: LD_ADDR_VAR 0 4
1664: PUSH
1665: CALL_OW 45
1669: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1670: LD_VAR 0 4
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1682: LD_VAR 0 4
1686: PPUSH
1687: LD_INT 2
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// end ;
1697: GO 1549
1699: POP
1700: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1701: LD_ADDR_VAR 0 6
1705: PUSH
1706: LD_INT 22
1708: PUSH
1709: LD_INT 1
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 21
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: LD_INT 34
1728: PUSH
1729: LD_INT 12
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PPUSH
1741: CALL_OW 69
1745: ST_TO_ADDR
// if cargoList > 0 then
1746: LD_VAR 0 6
1750: PUSH
1751: LD_INT 0
1753: GREATER
1754: IFFALSE 1887
// for i = 1 to cargoList do
1756: LD_ADDR_VAR 0 2
1760: PUSH
1761: DOUBLE
1762: LD_INT 1
1764: DEC
1765: ST_TO_ADDR
1766: LD_VAR 0 6
1770: PUSH
1771: FOR_TO
1772: IFFALSE 1885
// begin if resources > 0 then
1774: LD_EXP 40
1778: PUSH
1779: LD_INT 0
1781: GREATER
1782: IFFALSE 1883
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1784: LD_VAR 0 6
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_EXP 40
1802: PUSH
1803: LD_VAR 0 2
1807: ARRAY
1808: PUSH
1809: LD_INT 1
1811: ARRAY
1812: PPUSH
1813: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1817: LD_VAR 0 6
1821: PUSH
1822: LD_VAR 0 2
1826: ARRAY
1827: PPUSH
1828: LD_INT 2
1830: PPUSH
1831: LD_EXP 40
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1850: LD_VAR 0 6
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PPUSH
1861: LD_INT 3
1863: PPUSH
1864: LD_EXP 40
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PUSH
1875: LD_INT 3
1877: ARRAY
1878: PPUSH
1879: CALL_OW 291
// end ; end ;
1883: GO 1771
1885: POP
1886: POP
// end ; end ;
1887: LD_VAR 0 1
1891: RET
// export function PrepareOthers ; var i , veh ; begin
1892: LD_INT 0
1894: PPUSH
1895: PPUSH
1896: PPUSH
// uc_side = 1 ;
1897: LD_ADDR_OWVAR 20
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// uc_nation = 1 ;
1905: LD_ADDR_OWVAR 21
1909: PUSH
1910: LD_INT 1
1912: ST_TO_ADDR
// others = CreateCharacterSet ( OthersIn06 ) ;
1913: LD_ADDR_EXP 11
1917: PUSH
1918: LD_STRING OthersIn06
1920: PPUSH
1921: CALL_OW 31
1925: ST_TO_ADDR
// for i in others do
1926: LD_ADDR_VAR 0 2
1930: PUSH
1931: LD_EXP 11
1935: PUSH
1936: FOR_IN
1937: IFFALSE 2027
// begin veh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1939: LD_ADDR_VAR 0 3
1943: PUSH
1944: LD_INT 22
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 21
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 58
1966: PUSH
1967: EMPTY
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PPUSH
1975: CALL_OW 69
1979: ST_TO_ADDR
// if veh > 0 then
1980: LD_VAR 0 3
1984: PUSH
1985: LD_INT 0
1987: GREATER
1988: IFFALSE 2010
// begin PlaceHumanInUnit ( i , veh [ 1 ] ) ;
1990: LD_VAR 0 2
1994: PPUSH
1995: LD_VAR 0 3
1999: PUSH
2000: LD_INT 1
2002: ARRAY
2003: PPUSH
2004: CALL_OW 52
// end else
2008: GO 2025
// begin PlaceUnitArea ( i , PlayerSpawn , false ) ;
2010: LD_VAR 0 2
2014: PPUSH
2015: LD_INT 2
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ; end ;
2025: GO 1936
2027: POP
2028: POP
// end ;
2029: LD_VAR 0 1
2033: RET
// export function PreparePlayerApemans ; var i , veh ; begin
2034: LD_INT 0
2036: PPUSH
2037: PPUSH
2038: PPUSH
// uc_side = 1 ;
2039: LD_ADDR_OWVAR 20
2043: PUSH
2044: LD_INT 1
2046: ST_TO_ADDR
// uc_nation = 0 ;
2047: LD_ADDR_OWVAR 21
2051: PUSH
2052: LD_INT 0
2054: ST_TO_ADDR
// ape = CreateCharacterSet ( ApeIn06 ) ;
2055: LD_ADDR_EXP 12
2059: PUSH
2060: LD_STRING ApeIn06
2062: PPUSH
2063: CALL_OW 31
2067: ST_TO_ADDR
// for i in ape do
2068: LD_ADDR_VAR 0 2
2072: PUSH
2073: LD_EXP 12
2077: PUSH
2078: FOR_IN
2079: IFFALSE 2098
// PlaceUnitArea ( i , PlayerSpawn , false ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 2
2088: PPUSH
2089: LD_INT 0
2091: PPUSH
2092: CALL_OW 49
2096: GO 2078
2098: POP
2099: POP
// end ;
2100: LD_VAR 0 1
2104: RET
// export function PrepareDenis ; begin
2105: LD_INT 0
2107: PPUSH
// uc_side = 1 ;
2108: LD_ADDR_OWVAR 20
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// uc_nation = 1 ;
2116: LD_ADDR_OWVAR 21
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true ) ;
2124: LD_ADDR_EXP 9
2128: PUSH
2129: LD_STRING Denis
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 5193 0 2
2139: ST_TO_ADDR
// PlaceUnitArea ( Denis , DenisSpawn , false ) ;
2140: LD_EXP 9
2144: PPUSH
2145: LD_INT 13
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// SetClass ( Denis , 4 ) ;
2155: LD_EXP 9
2159: PPUSH
2160: LD_INT 4
2162: PPUSH
2163: CALL_OW 336
// SetLives ( Denis , 750 ) ;
2167: LD_EXP 9
2171: PPUSH
2172: LD_INT 750
2174: PPUSH
2175: CALL_OW 234
// end ;
2179: LD_VAR 0 1
2183: RET
// export function HarrisonSupport ; var un , veh ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
// uc_side = 1 ;
2189: LD_ADDR_OWVAR 20
2193: PUSH
2194: LD_INT 1
2196: ST_TO_ADDR
// uc_nation = 1 ;
2197: LD_ADDR_OWVAR 21
2201: PUSH
2202: LD_INT 1
2204: ST_TO_ADDR
// vc_engine = 1 ;
2205: LD_ADDR_OWVAR 39
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// vc_control = 1 ;
2213: LD_ADDR_OWVAR 38
2217: PUSH
2218: LD_INT 1
2220: ST_TO_ADDR
// vc_weapon = [ 4 , 4 , 2 ] [ Difficulty ] ;
2221: LD_ADDR_OWVAR 40
2225: PUSH
2226: LD_INT 4
2228: PUSH
2229: LD_INT 4
2231: PUSH
2232: LD_INT 2
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_OWVAR 67
2244: ARRAY
2245: ST_TO_ADDR
// vc_chassis = 2 ;
2246: LD_ADDR_OWVAR 37
2250: PUSH
2251: LD_INT 2
2253: ST_TO_ADDR
// veh = CreateVehicle ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: CALL_OW 45
2263: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2276: LD_VAR 0 3
2280: PPUSH
2281: LD_INT 3
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2291: LD_VAR 0 3
2295: PPUSH
2296: LD_INT 50
2298: PPUSH
2299: CALL_OW 240
// hc_class := 2 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 2
2310: ST_TO_ADDR
// hc_sex := sex_male ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 52 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 52
2334: ST_TO_ADDR
// hc_name := Craig Brown ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Craig Brown
2342: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 10
2350: PUSH
2351: LD_INT 10
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 0 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 0
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// HarrSupp1 = CreateHuman ;
2404: LD_ADDR_EXP 17
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp1 , veh ) ;
2414: LD_EXP 17
2418: PPUSH
2419: LD_VAR 0 3
2423: PPUSH
2424: CALL_OW 52
// vc_engine = 1 ;
2428: LD_ADDR_OWVAR 39
2432: PUSH
2433: LD_INT 1
2435: ST_TO_ADDR
// vc_control = 1 ;
2436: LD_ADDR_OWVAR 38
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_weapon = [ 4 , 2 , 2 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 40
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: LD_INT 2
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// vc_chassis = 2 ;
2469: LD_ADDR_OWVAR 37
2473: PUSH
2474: LD_INT 2
2476: ST_TO_ADDR
// veh = CreateVehicle ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: CALL_OW 45
2486: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 233
// PlaceUnitArea ( veh , HarrisonSupportArea , false ) ;
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// SetFuel ( veh , 50 ) ;
2514: LD_VAR 0 3
2518: PPUSH
2519: LD_INT 50
2521: PPUSH
2522: CALL_OW 240
// hc_class := 1 ;
2526: LD_ADDR_OWVAR 28
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// hc_sex := sex_female ;
2534: LD_ADDR_OWVAR 27
2538: PUSH
2539: LD_INT 2
2541: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING SecondCharsGal
2549: ST_TO_ADDR
// hc_face_number := 45 ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_INT 45
2557: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
2558: LD_ADDR_OWVAR 29
2562: PUSH
2563: LD_INT 11
2565: PUSH
2566: LD_INT 10
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: ST_TO_ADDR
// hc_name := Ingrid Jonsson ;
2573: LD_ADDR_OWVAR 26
2577: PUSH
2578: LD_STRING Ingrid Jonsson
2580: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
2581: LD_ADDR_OWVAR 30
2585: PUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 1
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 0 ] ;
2604: LD_ADDR_OWVAR 31
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: LD_INT 1
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: ST_TO_ADDR
// HarrSupp2 = CreateHuman ;
2627: LD_ADDR_EXP 18
2631: PUSH
2632: CALL_OW 44
2636: ST_TO_ADDR
// PlaceHumanInUnit ( HarrSupp2 , veh ) ;
2637: LD_EXP 18
2641: PPUSH
2642: LD_VAR 0 3
2646: PPUSH
2647: CALL_OW 52
// end ;
2651: LD_VAR 0 1
2655: RET
// export function PrepareJoan ; var i , j , tmp , rnd ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// j = 0 ;
2663: LD_ADDR_VAR 0 3
2667: PUSH
2668: LD_INT 0
2670: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2671: LD_INT 35
2673: PPUSH
2674: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_INT 22
2685: PUSH
2686: LD_INT 1
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 21
2695: PUSH
2696: LD_INT 1
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 2
2715: PUSH
2716: LD_INT 25
2718: PUSH
2719: LD_INT 1
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 25
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 25
2738: PUSH
2739: LD_INT 3
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 25
2748: PUSH
2749: LD_INT 4
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: PUSH
2774: FOR_IN
2775: IFFALSE 2901
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) and GetDistUnits ( i , JMM ) < 15 then
2777: LD_INT 22
2779: PUSH
2780: LD_INT 3
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 2
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 1
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PUSH
2800: LD_INT 21
2802: PUSH
2803: LD_INT 2
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PUSH
2810: LD_INT 21
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 59
2822: PUSH
2823: EMPTY
2824: LIST
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 91
2835: PUSH
2836: LD_VAR 0 2
2840: PUSH
2841: LD_INT 25
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PPUSH
2854: CALL_OW 69
2858: NOT
2859: PUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_EXP 1
2869: PPUSH
2870: CALL_OW 296
2874: PUSH
2875: LD_INT 15
2877: LESS
2878: AND
2879: IFFALSE 2899
// begin tmp = i ;
2881: LD_ADDR_VAR 0 4
2885: PUSH
2886: LD_VAR 0 2
2890: ST_TO_ADDR
// j = 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// end ; end ;
2899: GO 2774
2901: POP
2902: POP
// until j = 1 ;
2903: LD_VAR 0 3
2907: PUSH
2908: LD_INT 1
2910: EQUAL
2911: IFFALSE 2671
// blockSpawn = 1 ;
2913: LD_ADDR_EXP 29
2917: PUSH
2918: LD_INT 1
2920: ST_TO_ADDR
// uc_side = 4 ;
2921: LD_ADDR_OWVAR 20
2925: PUSH
2926: LD_INT 4
2928: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
2929: LD_ADDR_EXP 15
2933: PUSH
2934: LD_STRING Joan
2936: PPUSH
2937: LD_INT 0
2939: PPUSH
2940: CALL 5193 0 2
2944: ST_TO_ADDR
// PlaceUnitXYR ( Joan , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
2945: LD_EXP 15
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 250
2959: PPUSH
2960: LD_VAR 0 4
2964: PPUSH
2965: CALL_OW 251
2969: PPUSH
2970: LD_INT 5
2972: PPUSH
2973: LD_INT 1
2975: PPUSH
2976: CALL_OW 50
// SetLives ( Joan , 250 ) ;
2980: LD_EXP 15
2984: PPUSH
2985: LD_INT 250
2987: PPUSH
2988: CALL_OW 234
// InGameOn ;
2992: CALL_OW 8
// CenterNowOnUnits ( Joan ) ;
2996: LD_EXP 15
3000: PPUSH
3001: CALL_OW 87
// wait ( 0 0$2 ) ;
3005: LD_INT 70
3007: PPUSH
3008: CALL_OW 67
// ComExitVehicle ( tmp ) ;
3012: LD_VAR 0 4
3016: PPUSH
3017: CALL_OW 121
// ComExitBuilding ( tmp ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: CALL_OW 122
// wait ( 0 0$1 ) ;
3030: LD_INT 35
3032: PPUSH
3033: CALL_OW 67
// ComMoveUnit ( tmp , Joan ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_EXP 15
3046: PPUSH
3047: CALL_OW 112
// wait ( 0 0$2 ) ;
3051: LD_INT 70
3053: PPUSH
3054: CALL_OW 67
// DialogueOn ;
3058: CALL_OW 6
// if tmp = JMM then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_EXP 1
3071: EQUAL
3072: IFFALSE 3221
// begin ComTurnUnit ( JMM , Joan ) ;
3074: LD_EXP 1
3078: PPUSH
3079: LD_EXP 15
3083: PPUSH
3084: CALL_OW 119
// Say ( JMM , D5b-JMM-1 ) ;
3088: LD_EXP 1
3092: PPUSH
3093: LD_STRING D5b-JMM-1
3095: PPUSH
3096: CALL_OW 88
// DialogueOff ;
3100: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3104: LD_EXP 15
3108: PPUSH
3109: LD_INT 500
3111: PPUSH
3112: CALL_OW 234
// ComTurnUnit ( Joan , JMM ) ;
3116: LD_EXP 15
3120: PPUSH
3121: LD_EXP 1
3125: PPUSH
3126: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3130: LD_EXP 1
3134: PPUSH
3135: LD_EXP 15
3139: PPUSH
3140: CALL_OW 119
// wait ( 0 0$1 ) ;
3144: LD_INT 35
3146: PPUSH
3147: CALL_OW 67
// DialogueOn ;
3151: CALL_OW 6
// Say ( Joan , D5b-Joan-1 ) ;
3155: LD_EXP 15
3159: PPUSH
3160: LD_STRING D5b-Joan-1
3162: PPUSH
3163: CALL_OW 88
// Say ( JMM , D5b-JMM-2 ) ;
3167: LD_EXP 1
3171: PPUSH
3172: LD_STRING D5b-JMM-2
3174: PPUSH
3175: CALL_OW 88
// Say ( Joan , D5b-Joan-2 ) ;
3179: LD_EXP 15
3183: PPUSH
3184: LD_STRING D5b-Joan-2
3186: PPUSH
3187: CALL_OW 88
// Say ( JMM , D5b-JMM-3 ) ;
3191: LD_EXP 1
3195: PPUSH
3196: LD_STRING D5b-JMM-3
3198: PPUSH
3199: CALL_OW 88
// Say ( Joan , D5b-Joan-3 ) ;
3203: LD_EXP 15
3207: PPUSH
3208: LD_STRING D5b-Joan-3
3210: PPUSH
3211: CALL_OW 88
// DialogueOff ;
3215: CALL_OW 7
// end else
3219: GO 3556
// begin ComTurnUnit ( tmp , Joan ) ;
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_EXP 15
3230: PPUSH
3231: CALL_OW 119
// Say ( tmp , D5a-Sol1-1 ) ;
3235: LD_VAR 0 4
3239: PPUSH
3240: LD_STRING D5a-Sol1-1
3242: PPUSH
3243: CALL_OW 88
// DialogueOff ;
3247: CALL_OW 7
// SetLives ( Joan , 500 ) ;
3251: LD_EXP 15
3255: PPUSH
3256: LD_INT 500
3258: PPUSH
3259: CALL_OW 234
// ComTurnUnit ( Joan , tmp ) ;
3263: LD_EXP 15
3267: PPUSH
3268: LD_VAR 0 4
3272: PPUSH
3273: CALL_OW 119
// ComTurnUnit ( tmp , Joan ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: LD_EXP 15
3286: PPUSH
3287: CALL_OW 119
// wait ( 0 0$1 ) ;
3291: LD_INT 35
3293: PPUSH
3294: CALL_OW 67
// DialogueOn ;
3298: CALL_OW 6
// Say ( Joan , D5a-Joan-1 ) ;
3302: LD_EXP 15
3306: PPUSH
3307: LD_STRING D5a-Joan-1
3309: PPUSH
3310: CALL_OW 88
// Say ( tmp , D5a-Sol1-2 ) ;
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_STRING D5a-Sol1-2
3321: PPUSH
3322: CALL_OW 88
// Say ( Joan , D5a-Joan-2 ) ;
3326: LD_EXP 15
3330: PPUSH
3331: LD_STRING D5a-Joan-2
3333: PPUSH
3334: CALL_OW 88
// Say ( tmp , D5a-Sol1-3 ) ;
3338: LD_VAR 0 4
3342: PPUSH
3343: LD_STRING D5a-Sol1-3
3345: PPUSH
3346: CALL_OW 88
// Say ( Joan , D5a-Joan-3 ) ;
3350: LD_EXP 15
3354: PPUSH
3355: LD_STRING D5a-Joan-3
3357: PPUSH
3358: CALL_OW 88
// Say ( tmp , D5a-Sol1-4 ) ;
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_STRING D5a-Sol1-4
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// ComExitVehicle ( JMM ) ;
3378: LD_EXP 1
3382: PPUSH
3383: CALL_OW 121
// ComExitBuilding ( JMM ) ;
3387: LD_EXP 1
3391: PPUSH
3392: CALL_OW 122
// wait ( 0 0$1 ) ;
3396: LD_INT 35
3398: PPUSH
3399: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3403: LD_INT 35
3405: PPUSH
3406: CALL_OW 67
// ComMoveUnit ( [ Joan , tmp ] , JMM ) ;
3410: LD_EXP 15
3414: PUSH
3415: LD_VAR 0 4
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PPUSH
3424: LD_EXP 1
3428: PPUSH
3429: CALL_OW 112
// until GetDistUnits ( Joan , JMM ) < 5 ;
3433: LD_EXP 15
3437: PPUSH
3438: LD_EXP 1
3442: PPUSH
3443: CALL_OW 296
3447: PUSH
3448: LD_INT 5
3450: LESS
3451: IFFALSE 3403
// ComTurnUnit ( Joan , JMM ) ;
3453: LD_EXP 15
3457: PPUSH
3458: LD_EXP 1
3462: PPUSH
3463: CALL_OW 119
// ComTurnUnit ( JMM , Joan ) ;
3467: LD_EXP 1
3471: PPUSH
3472: LD_EXP 15
3476: PPUSH
3477: CALL_OW 119
// wait ( 0 0$1 ) ;
3481: LD_INT 35
3483: PPUSH
3484: CALL_OW 67
// DialogueOn ;
3488: CALL_OW 6
// Say ( Joan , D5a-Joan-4 ) ;
3492: LD_EXP 15
3496: PPUSH
3497: LD_STRING D5a-Joan-4
3499: PPUSH
3500: CALL_OW 88
// Say ( JMM , D5a-JMM-4 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING D5a-JMM-4
3511: PPUSH
3512: CALL_OW 88
// Say ( Joan , D5a-Joan-5 ) ;
3516: LD_EXP 15
3520: PPUSH
3521: LD_STRING D5a-Joan-5
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM , D5a-JMM-5 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING D5a-JMM-5
3535: PPUSH
3536: CALL_OW 88
// Say ( Joan , D5a-Joan-6 ) ;
3540: LD_EXP 15
3544: PPUSH
3545: LD_STRING D5a-Joan-6
3547: PPUSH
3548: CALL_OW 88
// DialogueOff ;
3552: CALL_OW 7
// end ; DialogueOn ;
3556: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D6-JMM-1
3567: PPUSH
3568: CALL_OW 88
// Say ( Joan , D6-Joan-1 ) ;
3572: LD_EXP 15
3576: PPUSH
3577: LD_STRING D6-Joan-1
3579: PPUSH
3580: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
3584: LD_EXP 1
3588: PPUSH
3589: LD_STRING D6-JMM-2
3591: PPUSH
3592: CALL_OW 88
// Say ( Joan , D6-Joan-2 ) ;
3596: LD_EXP 15
3600: PPUSH
3601: LD_STRING D6-Joan-2
3603: PPUSH
3604: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
3608: LD_EXP 1
3612: PPUSH
3613: LD_STRING D6-JMM-3
3615: PPUSH
3616: CALL_OW 88
// Say ( Joan , D6-Joan-3 ) ;
3620: LD_EXP 15
3624: PPUSH
3625: LD_STRING D6-Joan-3
3627: PPUSH
3628: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_STRING D6-JMM-4
3639: PPUSH
3640: CALL_OW 88
// DialogueOff ;
3644: CALL_OW 7
// InGameOff ;
3648: CALL_OW 9
// SetSide ( Joan , 1 ) ;
3652: LD_EXP 15
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: CALL_OW 235
// ChangeMissionObjectives ( MJ ) ;
3664: LD_STRING MJ
3666: PPUSH
3667: CALL_OW 337
// JoanStatus = 1 ;
3671: LD_ADDR_EXP 16
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// blockSpawn = 0 ;
3679: LD_ADDR_EXP 29
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareRandoms ( number ) ; var un ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
// repeat wait ( 0 0$7 ) ;
3696: LD_INT 245
3698: PPUSH
3699: CALL_OW 67
// until blockSpawn = 0 ;
3703: LD_EXP 29
3707: PUSH
3708: LD_INT 0
3710: EQUAL
3711: IFFALSE 3696
// uc_side = 1 ;
3713: LD_ADDR_OWVAR 20
3717: PUSH
3718: LD_INT 1
3720: ST_TO_ADDR
// uc_nation = 1 ;
3721: LD_ADDR_OWVAR 21
3725: PUSH
3726: LD_INT 1
3728: ST_TO_ADDR
// InitHc ;
3729: CALL_OW 19
// if number = 1 then
3733: LD_VAR 0 1
3737: PUSH
3738: LD_INT 1
3740: EQUAL
3741: IFFALSE 3917
// begin hc_class := 1 ;
3743: LD_ADDR_OWVAR 28
3747: PUSH
3748: LD_INT 1
3750: ST_TO_ADDR
// hc_sex := sex_male ;
3751: LD_ADDR_OWVAR 27
3755: PUSH
3756: LD_INT 1
3758: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
3759: LD_ADDR_OWVAR 33
3763: PUSH
3764: LD_STRING AmGalRemake
3766: ST_TO_ADDR
// hc_face_number := 7 ;
3767: LD_ADDR_OWVAR 34
3771: PUSH
3772: LD_INT 7
3774: ST_TO_ADDR
// hc_name := Bobby Jordan ;
3775: LD_ADDR_OWVAR 26
3779: PUSH
3780: LD_STRING Bobby Jordan
3782: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
3783: LD_ADDR_OWVAR 29
3787: PUSH
3788: LD_INT 9
3790: PUSH
3791: LD_INT 11
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
3798: LD_ADDR_OWVAR 30
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 0
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 1 ] ;
3821: LD_ADDR_OWVAR 31
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: LD_INT 1
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: ST_TO_ADDR
// un = CreateHuman ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 44
3853: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 12
3861: PPUSH
3862: LD_INT 1
3864: PPUSH
3865: CALL_OW 49
// wait ( 0 0$1 ) ;
3869: LD_INT 35
3871: PPUSH
3872: CALL_OW 67
// CenterNowOnUnits ( un ) ;
3876: LD_VAR 0 3
3880: PPUSH
3881: CALL_OW 87
// DialogueOn ;
3885: CALL_OW 6
// Say ( un , D11b-Sol3-1 ) ;
3889: LD_VAR 0 3
3893: PPUSH
3894: LD_STRING D11b-Sol3-1
3896: PPUSH
3897: CALL_OW 88
// Say ( JMM , D11b-JMM-1 ) ;
3901: LD_EXP 1
3905: PPUSH
3906: LD_STRING D11b-JMM-1
3908: PPUSH
3909: CALL_OW 88
// DialogueOff ;
3913: CALL_OW 7
// end ; if number = 2 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 2
3924: EQUAL
3925: IFFALSE 4101
// begin hc_class := 3 ;
3927: LD_ADDR_OWVAR 28
3931: PUSH
3932: LD_INT 3
3934: ST_TO_ADDR
// hc_sex := sex_male ;
3935: LD_ADDR_OWVAR 27
3939: PUSH
3940: LD_INT 1
3942: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3943: LD_ADDR_OWVAR 33
3947: PUSH
3948: LD_STRING SecondCharsGal
3950: ST_TO_ADDR
// hc_face_number := 55 ;
3951: LD_ADDR_OWVAR 34
3955: PUSH
3956: LD_INT 55
3958: ST_TO_ADDR
// hc_name := George McCarthy ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING George McCarthy
3966: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
3967: LD_ADDR_OWVAR 29
3971: PUSH
3972: LD_INT 11
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
3982: LD_ADDR_OWVAR 30
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: LD_INT 0
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 1 ] ;
4005: LD_ADDR_OWVAR 31
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 3
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: ST_TO_ADDR
// un = CreateHuman ;
4028: LD_ADDR_VAR 0 3
4032: PUSH
4033: CALL_OW 44
4037: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4038: LD_VAR 0 3
4042: PPUSH
4043: LD_INT 12
4045: PPUSH
4046: LD_INT 1
4048: PPUSH
4049: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4053: LD_VAR 0 3
4057: PPUSH
4058: CALL_OW 87
// wait ( 0 0$1 ) ;
4062: LD_INT 35
4064: PPUSH
4065: CALL_OW 67
// DialogueOn ;
4069: CALL_OW 6
// Say ( un , D11d-Sol4-1 ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_STRING D11d-Sol4-1
4080: PPUSH
4081: CALL_OW 88
// Say ( JMM , D11d-JMM-1 ) ;
4085: LD_EXP 1
4089: PPUSH
4090: LD_STRING D11d-JMM-1
4092: PPUSH
4093: CALL_OW 88
// DialogueOff ;
4097: CALL_OW 7
// end ; if number = 4 then
4101: LD_VAR 0 1
4105: PUSH
4106: LD_INT 4
4108: EQUAL
4109: IFFALSE 4273
// begin hc_class := 3 ;
4111: LD_ADDR_OWVAR 28
4115: PUSH
4116: LD_INT 3
4118: ST_TO_ADDR
// hc_sex := sex_female ;
4119: LD_ADDR_OWVAR 27
4123: PUSH
4124: LD_INT 2
4126: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4127: LD_ADDR_OWVAR 33
4131: PUSH
4132: LD_STRING SecondCharsGal
4134: ST_TO_ADDR
// hc_face_number := 46 ;
4135: LD_ADDR_OWVAR 34
4139: PUSH
4140: LD_INT 46
4142: ST_TO_ADDR
// hc_name := Sylvia Creak ;
4143: LD_ADDR_OWVAR 26
4147: PUSH
4148: LD_STRING Sylvia Creak
4150: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
4151: LD_ADDR_OWVAR 29
4155: PUSH
4156: LD_INT 10
4158: PUSH
4159: LD_INT 9
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 1 ] ;
4166: LD_ADDR_OWVAR 30
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: ST_TO_ADDR
// hc_skills := [ 1 , 3 , 1 , 1 ] ;
4189: LD_ADDR_OWVAR 31
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: ST_TO_ADDR
// un = CreateHuman ;
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: CALL_OW 44
4221: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4222: LD_VAR 0 3
4226: PPUSH
4227: LD_INT 12
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: CALL_OW 87
// wait ( 0 0$1 ) ;
4246: LD_INT 35
4248: PPUSH
4249: CALL_OW 67
// DialogueOn ;
4253: CALL_OW 6
// Say ( un , D11e-FSol4-1 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_STRING D11e-FSol4-1
4264: PPUSH
4265: CALL_OW 88
// DialogueOff ;
4269: CALL_OW 7
// end ; if number = 5 then
4273: LD_VAR 0 1
4277: PUSH
4278: LD_INT 5
4280: EQUAL
4281: IFFALSE 4457
// begin hc_class := 1 ;
4283: LD_ADDR_OWVAR 28
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// hc_sex := sex_female ;
4291: LD_ADDR_OWVAR 27
4295: PUSH
4296: LD_INT 2
4298: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
4299: LD_ADDR_OWVAR 33
4303: PUSH
4304: LD_STRING SecondCharsGal
4306: ST_TO_ADDR
// hc_face_number := 37 ;
4307: LD_ADDR_OWVAR 34
4311: PUSH
4312: LD_INT 37
4314: ST_TO_ADDR
// hc_name := Margherite Simpson ;
4315: LD_ADDR_OWVAR 26
4319: PUSH
4320: LD_STRING Margherite Simpson
4322: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
4323: LD_ADDR_OWVAR 29
4327: PUSH
4328: LD_INT 11
4330: PUSH
4331: LD_INT 10
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
4338: LD_ADDR_OWVAR 30
4342: PUSH
4343: LD_INT 1
4345: PUSH
4346: LD_INT 1
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: ST_TO_ADDR
// hc_skills := [ 1 , 1 , 1 , 1 ] ;
4361: LD_ADDR_OWVAR 31
4365: PUSH
4366: LD_INT 1
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: LD_INT 1
4374: PUSH
4375: LD_INT 1
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// un = CreateHuman ;
4384: LD_ADDR_VAR 0 3
4388: PUSH
4389: CALL_OW 44
4393: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4394: LD_VAR 0 3
4398: PPUSH
4399: LD_INT 12
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4409: LD_VAR 0 3
4413: PPUSH
4414: CALL_OW 87
// wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// DialogueOn ;
4425: CALL_OW 6
// Say ( un , D11c-FSol3-1 ) ;
4429: LD_VAR 0 3
4433: PPUSH
4434: LD_STRING D11c-FSol3-1
4436: PPUSH
4437: CALL_OW 88
// Say ( JMM , D11c-JMM-1 ) ;
4441: LD_EXP 1
4445: PPUSH
4446: LD_STRING D11c-JMM-1
4448: PPUSH
4449: CALL_OW 88
// DialogueOff ;
4453: CALL_OW 7
// end ; if number = 6 then
4457: LD_VAR 0 1
4461: PUSH
4462: LD_INT 6
4464: EQUAL
4465: IFFALSE 4639
// begin hc_class := 1 ;
4467: LD_ADDR_OWVAR 28
4471: PUSH
4472: LD_INT 1
4474: ST_TO_ADDR
// hc_sex := sex_male ;
4475: LD_ADDR_OWVAR 27
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4483: LD_ADDR_OWVAR 33
4487: PUSH
4488: LD_STRING AmGalRemake
4490: ST_TO_ADDR
// hc_face_number := 1 ;
4491: LD_ADDR_OWVAR 34
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// hc_name := Charles Brown ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING Charles Brown
4506: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
4507: LD_ADDR_OWVAR 29
4511: PUSH
4512: LD_INT 12
4514: PUSH
4515: LD_INT 11
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: ST_TO_ADDR
// hc_basic_skills := [ 2 , 0 , 0 , 0 ] ;
4522: LD_ADDR_OWVAR 30
4526: PUSH
4527: LD_INT 2
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: LD_INT 0
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 1 , 1 ] ;
4545: LD_ADDR_OWVAR 31
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: LD_INT 1
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: ST_TO_ADDR
// un = CreateHuman ;
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: CALL_OW 44
4577: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_INT 12
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: CALL_OW 87
// wait ( 0 0$1 ) ;
4602: LD_INT 35
4604: PPUSH
4605: CALL_OW 67
// DialogueOn ;
4609: CALL_OW 6
// Say ( un , D4-Sol1-5 ) ;
4613: LD_VAR 0 3
4617: PPUSH
4618: LD_STRING D4-Sol1-5
4620: PPUSH
4621: CALL_OW 88
// DialogueOff ;
4625: CALL_OW 7
// tempCharles = un ;
4629: LD_ADDR_EXP 13
4633: PUSH
4634: LD_VAR 0 3
4638: ST_TO_ADDR
// end ; if number = 7 then
4639: LD_VAR 0 1
4643: PUSH
4644: LD_INT 7
4646: EQUAL
4647: IFFALSE 4811
// begin hc_class := 1 ;
4649: LD_ADDR_OWVAR 28
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// hc_sex := sex_female ;
4657: LD_ADDR_OWVAR 27
4661: PUSH
4662: LD_INT 2
4664: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
4665: LD_ADDR_OWVAR 33
4669: PUSH
4670: LD_STRING AmGalRemake
4672: ST_TO_ADDR
// hc_face_number := 2 ;
4673: LD_ADDR_OWVAR 34
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// hc_name := Johanna Holland ;
4681: LD_ADDR_OWVAR 26
4685: PUSH
4686: LD_STRING Johanna Holland
4688: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
4689: LD_ADDR_OWVAR 29
4693: PUSH
4694: LD_INT 10
4696: PUSH
4697: LD_INT 10
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
4704: LD_ADDR_OWVAR 30
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: LD_INT 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
4727: LD_ADDR_OWVAR 31
4731: PUSH
4732: LD_INT 1
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: ST_TO_ADDR
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceUnitArea ( un , NewPeopleSpawn , true ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 12
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 49
// CenterNowOnUnits ( un ) ;
4775: LD_VAR 0 3
4779: PPUSH
4780: CALL_OW 87
// wait ( 0 0$1 ) ;
4784: LD_INT 35
4786: PPUSH
4787: CALL_OW 67
// DialogueOn ;
4791: CALL_OW 6
// Say ( un , D11a-FSol2-1 ) ;
4795: LD_VAR 0 3
4799: PPUSH
4800: LD_STRING D11a-FSol2-1
4802: PPUSH
4803: CALL_OW 88
// DialogueOff ;
4807: CALL_OW 7
// end ; end ; end_of_file
4811: LD_VAR 0 2
4815: RET
// export function PrepareRussian ; var i ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
// RespawnInside ( 3 , 3 , rudepo , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 4 ) ;
4820: LD_INT 3
4822: PPUSH
4823: LD_INT 3
4825: PPUSH
4826: LD_INT 2
4828: PPUSH
4829: LD_EXP 34
4833: PPUSH
4834: LD_EXP 35
4838: PPUSH
4839: CALL_OW 12
4843: PPUSH
4844: LD_INT 2
4846: PPUSH
4847: LD_INT 4
4849: PPUSH
4850: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 4 ) ;
4854: LD_INT 3
4856: PPUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 8
4862: PPUSH
4863: LD_EXP 34
4867: PPUSH
4868: LD_EXP 35
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: LD_INT 4
4883: PPUSH
4884: CALL 5463 0 6
// RespawnInside ( 3 , 3 , ruarm2 , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 2 ) ;
4888: LD_INT 3
4890: PPUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 67
4896: PPUSH
4897: LD_EXP 34
4901: PPUSH
4902: LD_EXP 35
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: LD_INT 1
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4922: LD_INT 3
4924: PPUSH
4925: LD_INT 3
4927: PPUSH
4928: LD_INT 21
4930: PPUSH
4931: LD_EXP 34
4935: PPUSH
4936: LD_EXP 35
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 6
4951: PPUSH
4952: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rufabsupp , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 6 ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 3
4961: PPUSH
4962: LD_INT 17
4964: PPUSH
4965: LD_EXP 34
4969: PPUSH
4970: LD_EXP 35
4974: PPUSH
4975: CALL_OW 12
4979: PPUSH
4980: LD_INT 3
4982: PPUSH
4983: LD_INT 6
4985: PPUSH
4986: CALL 5463 0 6
// RespawnInside ( 3 , 3 , rulab , rand ( RuSolMinLevel , RuSolMaxLevel ) , 4 , 2 ) ;
4990: LD_INT 3
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 32
4998: PPUSH
4999: LD_EXP 34
5003: PPUSH
5004: LD_EXP 35
5008: PPUSH
5009: CALL_OW 12
5013: PPUSH
5014: LD_INT 4
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL 5463 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 22
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 21
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 30
5051: PUSH
5052: LD_INT 32
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: PPUSH
5064: CALL_OW 69
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5110
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinLevel , RuSolMaxLevel ) , 1 , 1 ) ;
5072: LD_INT 3
5074: PPUSH
5075: LD_INT 3
5077: PPUSH
5078: LD_VAR 0 2
5082: PPUSH
5083: LD_EXP 34
5087: PPUSH
5088: LD_EXP 35
5092: PPUSH
5093: CALL_OW 12
5097: PPUSH
5098: LD_INT 1
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL 5463 0 6
5108: GO 5069
5110: POP
5111: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , 31 ] ] ) do
5112: LD_ADDR_VAR 0 2
5116: PUSH
5117: LD_INT 22
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 30
5139: PUSH
5140: LD_INT 31
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: PUSH
5157: FOR_IN
5158: IFFALSE 5186
// PrepareSolBun ( rand ( RuSolMinLevel , RuSolMaxLevel ) , i ) ;
5160: LD_EXP 34
5164: PPUSH
5165: LD_EXP 35
5169: PPUSH
5170: CALL_OW 12
5174: PPUSH
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL 5573 0 2
5184: GO 5157
5186: POP
5187: POP
// end ; end_of_file
5188: LD_VAR 0 1
5192: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5193: LD_INT 0
5195: PPUSH
5196: PPUSH
// if exist_mode then
5197: LD_VAR 0 2
5201: IFFALSE 5226
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
5203: LD_ADDR_VAR 0 4
5207: PUSH
5208: LD_EXP 44
5212: PUSH
5213: LD_VAR 0 1
5217: STR
5218: PPUSH
5219: CALL_OW 34
5223: ST_TO_ADDR
// end else
5224: GO 5241
// begin unit := NewCharacter ( ident ) ;
5226: LD_ADDR_VAR 0 4
5230: PUSH
5231: LD_VAR 0 1
5235: PPUSH
5236: CALL_OW 25
5240: ST_TO_ADDR
// end ; result := unit ;
5241: LD_ADDR_VAR 0 3
5245: PUSH
5246: LD_VAR 0 4
5250: ST_TO_ADDR
// end ;
5251: LD_VAR 0 3
5255: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5256: LD_INT 0
5258: PPUSH
5259: PPUSH
5260: PPUSH
// rnd = rand ( 1 , characters ) ;
5261: LD_ADDR_VAR 0 6
5265: PUSH
5266: LD_INT 1
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL_OW 12
5278: ST_TO_ADDR
// for i = 1 to characters do
5279: LD_ADDR_VAR 0 5
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_VAR 0 1
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5405
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5297: LD_VAR 0 5
5301: PUSH
5302: LD_VAR 0 6
5306: EQUAL
5307: PUSH
5308: LD_VAR 0 1
5312: PUSH
5313: LD_VAR 0 5
5317: ARRAY
5318: PPUSH
5319: CALL_OW 258
5323: PUSH
5324: LD_INT 1
5326: EQUAL
5327: AND
5328: IFFALSE 5350
// Say ( characters [ i ] , dialogMID ) ;
5330: LD_VAR 0 1
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PPUSH
5346: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5350: LD_VAR 0 5
5354: PUSH
5355: LD_VAR 0 6
5359: EQUAL
5360: PUSH
5361: LD_VAR 0 1
5365: PUSH
5366: LD_VAR 0 5
5370: ARRAY
5371: PPUSH
5372: CALL_OW 258
5376: PUSH
5377: LD_INT 2
5379: EQUAL
5380: AND
5381: IFFALSE 5403
// Say ( characters [ i ] , dialogFID ) ;
5383: LD_VAR 0 1
5387: PUSH
5388: LD_VAR 0 5
5392: ARRAY
5393: PPUSH
5394: LD_VAR 0 3
5398: PPUSH
5399: CALL_OW 88
// end ;
5403: GO 5294
5405: POP
5406: POP
// end ;
5407: LD_VAR 0 4
5411: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
// for i in charactersList do
5416: LD_ADDR_VAR 0 4
5420: PUSH
5421: LD_VAR 0 1
5425: PUSH
5426: FOR_IN
5427: IFFALSE 5456
// begin if IsOk ( i ) then
5429: LD_VAR 0 4
5433: PPUSH
5434: CALL_OW 302
5438: IFFALSE 5454
// SaveCharacters ( i , ident ) ;
5440: LD_VAR 0 4
5444: PPUSH
5445: LD_VAR 0 2
5449: PPUSH
5450: CALL_OW 38
// end ;
5454: GO 5426
5456: POP
5457: POP
// end ;
5458: LD_VAR 0 3
5462: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
5463: LD_INT 0
5465: PPUSH
5466: PPUSH
5467: PPUSH
5468: PPUSH
// for i = 1 to count do
5469: LD_ADDR_VAR 0 8
5473: PUSH
5474: DOUBLE
5475: LD_INT 1
5477: DEC
5478: ST_TO_ADDR
5479: LD_VAR 0 6
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5566
// begin uc_side = side ;
5487: LD_ADDR_OWVAR 20
5491: PUSH
5492: LD_VAR 0 1
5496: ST_TO_ADDR
// uc_nation = nation ;
5497: LD_ADDR_OWVAR 21
5501: PUSH
5502: LD_VAR 0 2
5506: ST_TO_ADDR
// hc_gallery =  ;
5507: LD_ADDR_OWVAR 33
5511: PUSH
5512: LD_STRING 
5514: ST_TO_ADDR
// hc_name =  ;
5515: LD_ADDR_OWVAR 26
5519: PUSH
5520: LD_STRING 
5522: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_VAR 0 5
5530: PPUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 380
// un = CreateHuman ;
5540: LD_ADDR_VAR 0 10
5544: PUSH
5545: CALL_OW 44
5549: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
5550: LD_VAR 0 10
5554: PPUSH
5555: LD_VAR 0 3
5559: PPUSH
5560: CALL_OW 52
// end ;
5564: GO 5484
5566: POP
5567: POP
// end ;
5568: LD_VAR 0 7
5572: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5573: LD_INT 0
5575: PPUSH
5576: PPUSH
5577: PPUSH
// uc_side := GetSide ( b ) ;
5578: LD_ADDR_OWVAR 20
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 255
5592: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5593: LD_ADDR_OWVAR 21
5597: PUSH
5598: LD_VAR 0 2
5602: PPUSH
5603: CALL_OW 248
5607: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5608: LD_INT 0
5610: PPUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 380
// dir := GetDir ( b ) - 3 ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: LD_VAR 0 2
5632: PPUSH
5633: CALL_OW 254
5637: PUSH
5638: LD_INT 3
5640: MINUS
5641: ST_TO_ADDR
// if dir < 0 then
5642: LD_VAR 0 5
5646: PUSH
5647: LD_INT 0
5649: LESS
5650: IFFALSE 5666
// dir := 6 + dir ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_INT 6
5659: PUSH
5660: LD_VAR 0 5
5664: PLUS
5665: ST_TO_ADDR
// un := CreateHuman ;
5666: LD_ADDR_VAR 0 4
5670: PUSH
5671: CALL_OW 44
5675: ST_TO_ADDR
// SetDir ( un , dir ) ;
5676: LD_VAR 0 4
5680: PPUSH
5681: LD_VAR 0 5
5685: PPUSH
5686: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_VAR 0 2
5699: PPUSH
5700: CALL_OW 52
// end ;
5704: LD_VAR 0 3
5708: RET
// export function PrepareDifficulty ; begin
5709: LD_INT 0
5711: PPUSH
// if Difficulty = 1 then
5712: LD_OWVAR 67
5716: PUSH
5717: LD_INT 1
5719: EQUAL
5720: IFFALSE 5738
// begin RuSolMinLevel = 2 ;
5722: LD_ADDR_EXP 34
5726: PUSH
5727: LD_INT 2
5729: ST_TO_ADDR
// RuSolMaxLevel = 4 ;
5730: LD_ADDR_EXP 35
5734: PUSH
5735: LD_INT 4
5737: ST_TO_ADDR
// end ; if Difficulty = 2 then
5738: LD_OWVAR 67
5742: PUSH
5743: LD_INT 2
5745: EQUAL
5746: IFFALSE 5764
// begin RuSolMinLevel = 3 ;
5748: LD_ADDR_EXP 34
5752: PUSH
5753: LD_INT 3
5755: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
5756: LD_ADDR_EXP 35
5760: PUSH
5761: LD_INT 5
5763: ST_TO_ADDR
// end ; if Difficulty = 3 then
5764: LD_OWVAR 67
5768: PUSH
5769: LD_INT 3
5771: EQUAL
5772: IFFALSE 5790
// begin RuSolMinLevel = 3 ;
5774: LD_ADDR_EXP 34
5778: PUSH
5779: LD_INT 3
5781: ST_TO_ADDR
// RuSolMaxLevel = 6 ;
5782: LD_ADDR_EXP 35
5786: PUSH
5787: LD_INT 6
5789: ST_TO_ADDR
// end ; end ;
5790: LD_VAR 0 1
5794: RET
// export function ShowQuery1 ; begin
5795: LD_INT 0
5797: PPUSH
// case query ( QKill ) of 1 :
5798: LD_STRING QKill
5800: PPUSH
5801: CALL_OW 97
5805: PUSH
5806: LD_INT 1
5808: DOUBLE
5809: EQUAL
5810: IFTRUE 5814
5812: GO 5825
5814: POP
// begin result = 1 ;
5815: LD_ADDR_VAR 0 1
5819: PUSH
5820: LD_INT 1
5822: ST_TO_ADDR
// end ; 2 :
5823: GO 5864
5825: LD_INT 2
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5844
5833: POP
// begin result = 2 ;
5834: LD_ADDR_VAR 0 1
5838: PUSH
5839: LD_INT 2
5841: ST_TO_ADDR
// end ; 3 :
5842: GO 5864
5844: LD_INT 3
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5863
5852: POP
// begin result = 3 ;
5853: LD_ADDR_VAR 0 1
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// end ; end ;
5861: GO 5864
5863: POP
// end ;
5864: LD_VAR 0 1
5868: RET
// export function ShowQuery2 ; begin
5869: LD_INT 0
5871: PPUSH
// case query ( QKill2 ) of 1 :
5872: LD_STRING QKill2
5874: PPUSH
5875: CALL_OW 97
5879: PUSH
5880: LD_INT 1
5882: DOUBLE
5883: EQUAL
5884: IFTRUE 5888
5886: GO 5899
5888: POP
// begin result = 1 ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// end ; 2 :
5897: GO 5919
5899: LD_INT 2
5901: DOUBLE
5902: EQUAL
5903: IFTRUE 5907
5905: GO 5918
5907: POP
// begin result = 2 ;
5908: LD_ADDR_VAR 0 1
5912: PUSH
5913: LD_INT 2
5915: ST_TO_ADDR
// end ; end ;
5916: GO 5919
5918: POP
// end ;
5919: LD_VAR 0 1
5923: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
5924: LD_INT 0
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
5930: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 48
5938: PUSH
5939: LD_INT 49
5941: PUSH
5942: LD_INT 50
5944: PUSH
5945: LD_INT 20
5947: PUSH
5948: LD_INT 1
5950: PUSH
5951: LD_INT 51
5953: PUSH
5954: LD_INT 52
5956: PUSH
5957: LD_INT 69
5959: PUSH
5960: LD_INT 39
5962: PUSH
5963: LD_INT 34
5965: PUSH
5966: LD_INT 40
5968: PUSH
5969: LD_INT 53
5971: PUSH
5972: LD_INT 71
5974: PUSH
5975: LD_INT 57
5977: PUSH
5978: LD_INT 58
5980: PUSH
5981: LD_INT 44
5983: PUSH
5984: LD_INT 32
5986: PUSH
5987: LD_INT 27
5989: PUSH
5990: LD_INT 23
5992: PUSH
5993: LD_INT 33
5995: PUSH
5996: LD_INT 59
5998: PUSH
5999: LD_INT 54
6001: PUSH
6002: LD_INT 55
6004: PUSH
6005: LD_INT 56
6007: PUSH
6008: LD_INT 63
6010: PUSH
6011: LD_INT 64
6013: PUSH
6014: LD_INT 65
6016: PUSH
6017: LD_INT 30
6019: PUSH
6020: LD_INT 31
6022: PUSH
6023: LD_INT 21
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: ST_TO_ADDR
// for i = 1 to ru_tech_list do
6066: LD_ADDR_VAR 0 5
6070: PUSH
6071: DOUBLE
6072: LD_INT 1
6074: DEC
6075: ST_TO_ADDR
6076: LD_VAR 0 8
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6158
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
6084: LD_VAR 0 8
6088: PUSH
6089: LD_VAR 0 5
6093: ARRAY
6094: PPUSH
6095: LD_VAR 0 1
6099: PPUSH
6100: CALL_OW 321
6104: PUSH
6105: LD_INT 1
6107: EQUAL
6108: PUSH
6109: LD_VAR 0 8
6113: PUSH
6114: LD_VAR 0 5
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 3
6124: PPUSH
6125: CALL_OW 482
6129: PUSH
6130: LD_INT 1
6132: EQUAL
6133: AND
6134: IFFALSE 6156
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
6136: LD_VAR 0 2
6140: PPUSH
6141: LD_VAR 0 8
6145: PUSH
6146: LD_VAR 0 5
6150: ARRAY
6151: PPUSH
6152: CALL_OW 184
6156: GO 6081
6158: POP
6159: POP
// end ;
6160: LD_VAR 0 4
6164: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6170: LD_INT 22
6172: PUSH
6173: LD_VAR 0 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: LD_VAR 0 3
6205: LESSEQUAL
6206: IFFALSE 6314
// begin for i = 1 to vehCount do
6208: LD_ADDR_VAR 0 9
6212: PUSH
6213: DOUBLE
6214: LD_INT 1
6216: DEC
6217: ST_TO_ADDR
6218: LD_VAR 0 3
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6312
// begin weapon = weaponTab [ i ] ;
6226: LD_ADDR_VAR 0 10
6230: PUSH
6231: LD_VAR 0 4
6235: PUSH
6236: LD_VAR 0 9
6240: ARRAY
6241: ST_TO_ADDR
// if weapon = 46 then
6242: LD_VAR 0 10
6246: PUSH
6247: LD_INT 46
6249: EQUAL
6250: IFFALSE 6281
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6252: LD_VAR 0 2
6256: PPUSH
6257: LD_INT 24
6259: PPUSH
6260: LD_VAR 0 5
6264: PPUSH
6265: LD_VAR 0 6
6269: PPUSH
6270: LD_VAR 0 10
6274: PPUSH
6275: CALL_OW 185
// end else
6279: GO 6310
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6281: LD_VAR 0 2
6285: PPUSH
6286: LD_VAR 0 7
6290: PPUSH
6291: LD_VAR 0 5
6295: PPUSH
6296: LD_VAR 0 6
6300: PPUSH
6301: LD_VAR 0 10
6305: PPUSH
6306: CALL_OW 185
// end ; end ;
6310: GO 6223
6312: POP
6313: POP
// end ; end ;
6314: LD_VAR 0 8
6318: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
6319: LD_INT 0
6321: PPUSH
6322: PPUSH
6323: PPUSH
6324: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
6325: LD_ADDR_VAR 0 8
6329: PUSH
6330: LD_INT 22
6332: PUSH
6333: LD_VAR 0 1
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 24
6357: PUSH
6358: LD_INT 650
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: ST_TO_ADDR
// if damageVehicles > 0 then
6379: LD_VAR 0 8
6383: PUSH
6384: LD_INT 0
6386: GREATER
6387: IFFALSE 6408
// ComMoveXY ( damageVehicles , repX , repY ) ;
6389: LD_VAR 0 8
6393: PPUSH
6394: LD_VAR 0 3
6398: PPUSH
6399: LD_VAR 0 4
6403: PPUSH
6404: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
6408: LD_VAR 0 8
6412: PPUSH
6413: LD_INT 95
6415: PUSH
6416: LD_VAR 0 2
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 58
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 72
6446: PUSH
6447: LD_INT 0
6449: GREATER
6450: IFFALSE 6517
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_VAR 0 8
6461: PPUSH
6462: LD_INT 95
6464: PUSH
6465: LD_VAR 0 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 3
6476: PUSH
6477: LD_INT 58
6479: PUSH
6480: EMPTY
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PUSH
6496: FOR_IN
6497: IFFALSE 6515
// ComExitVehicle ( UnitsInside ( i ) ) ;
6499: LD_VAR 0 6
6503: PPUSH
6504: CALL_OW 313
6508: PPUSH
6509: CALL_OW 121
6513: GO 6496
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 5
6521: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6531: LD_ADDR_VAR 0 8
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: LD_INT 660
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 3
6570: PUSH
6571: LD_INT 58
6573: PUSH
6574: EMPTY
6575: LIST
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: LD_INT 34
6582: PUSH
6583: LD_INT 43
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 34
6592: PUSH
6593: LD_INT 44
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 34
6602: PUSH
6603: LD_INT 46
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 69
6631: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = [ 5 , 6 , 6 ] [ Difficulty ] then
6632: LD_INT 22
6634: PUSH
6635: LD_VAR 0 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 21
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 1000
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 58
6669: PUSH
6670: EMPTY
6671: LIST
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 34
6678: PUSH
6679: LD_INT 43
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: LD_INT 34
6688: PUSH
6689: LD_INT 44
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 34
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PPUSH
6723: CALL_OW 69
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: LD_INT 6
6733: PUSH
6734: LD_INT 6
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: PUSH
6742: LD_OWVAR 67
6746: ARRAY
6747: EQUAL
6748: IFFALSE 7004
// if seeEnemy = 0 then
6750: LD_VAR 0 11
6754: PUSH
6755: LD_INT 0
6757: EQUAL
6758: IFFALSE 7004
// repeat wait ( 0 0$1 ) ;
6760: LD_INT 35
6762: PPUSH
6763: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
6767: LD_ADDR_VAR 0 8
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 21
6786: PUSH
6787: LD_INT 2
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 24
6796: PUSH
6797: LD_INT 660
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 3
6806: PUSH
6807: LD_INT 58
6809: PUSH
6810: EMPTY
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 34
6818: PUSH
6819: LD_INT 43
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 34
6828: PUSH
6829: LD_INT 44
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 34
6838: PUSH
6839: LD_INT 46
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PPUSH
6863: CALL_OW 69
6867: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6868: LD_INT 22
6870: PUSH
6871: LD_VAR 0 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 95
6882: PUSH
6883: LD_VAR 0 2
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PPUSH
6896: CALL_OW 69
6900: NOT
6901: PUSH
6902: LD_VAR 0 11
6906: PUSH
6907: LD_INT 0
6909: EQUAL
6910: AND
6911: IFFALSE 6966
// for i := 1 to wayX do
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: DOUBLE
6919: LD_INT 1
6921: DEC
6922: ST_TO_ADDR
6923: LD_VAR 0 3
6927: PUSH
6928: FOR_TO
6929: IFFALSE 6964
// ComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6931: LD_VAR 0 8
6935: PPUSH
6936: LD_VAR 0 3
6940: PUSH
6941: LD_VAR 0 6
6945: ARRAY
6946: PPUSH
6947: LD_VAR 0 4
6951: PUSH
6952: LD_VAR 0 6
6956: ARRAY
6957: PPUSH
6958: CALL_OW 114
6962: GO 6928
6964: POP
6965: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) > 0 ;
6966: LD_INT 22
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 95
6980: PUSH
6981: LD_VAR 0 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PUSH
6999: LD_INT 0
7001: GREATER
7002: IFFALSE 6760
// seeEnemy = 1 ;
7004: LD_ADDR_VAR 0 11
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7012: LD_INT 35
7014: PPUSH
7015: CALL_OW 67
// for j in vehiclesOK do
7019: LD_ADDR_VAR 0 7
7023: PUSH
7024: LD_VAR 0 8
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7231
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
7032: LD_ADDR_VAR 0 9
7036: PUSH
7037: LD_INT 81
7039: PUSH
7040: LD_VAR 0 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 101
7051: PUSH
7052: LD_INT 1
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: PPUSH
7068: LD_VAR 0 7
7072: PPUSH
7073: CALL_OW 74
7077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7078: LD_ADDR_VAR 0 10
7082: PUSH
7083: LD_INT 81
7085: PUSH
7086: LD_VAR 0 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 101
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: LD_INT 59
7110: PUSH
7111: EMPTY
7112: LIST
7113: PUSH
7114: LD_INT 21
7116: PUSH
7117: LD_INT 1
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: LD_INT 21
7126: PUSH
7127: LD_INT 2
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: PUSH
7145: EMPTY
7146: LIST
7147: PPUSH
7148: CALL_OW 69
7152: PPUSH
7153: LD_VAR 0 7
7157: PPUSH
7158: CALL_OW 74
7162: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7163: LD_VAR 0 7
7167: PPUSH
7168: LD_VAR 0 9
7172: PPUSH
7173: CALL_OW 296
7177: PUSH
7178: LD_INT 8
7180: PLUS
7181: PUSH
7182: LD_VAR 0 7
7186: PPUSH
7187: LD_VAR 0 10
7191: PPUSH
7192: CALL_OW 296
7196: LESS
7197: IFFALSE 7215
// ComAttackUnit ( j , target1 ) else
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 9
7208: PPUSH
7209: CALL_OW 115
7213: GO 7229
// ComAttackUnit ( j , target2 ) ;
7215: LD_VAR 0 7
7219: PPUSH
7220: LD_VAR 0 10
7224: PPUSH
7225: CALL_OW 115
// end ;
7229: GO 7029
7231: POP
7232: POP
// until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) = 0 ;
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 24
7257: PUSH
7258: LD_INT 1000
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: LD_INT 34
7279: PUSH
7280: LD_INT 43
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 34
7289: PUSH
7290: LD_INT 44
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 34
7299: PUSH
7300: LD_INT 46
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: LD_INT 0
7331: EQUAL
7332: IFFALSE 7012
// seeEnemy = 0 ;
7334: LD_ADDR_VAR 0 11
7338: PUSH
7339: LD_INT 0
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 5
7346: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
7351: PPUSH
7352: PPUSH
7353: PPUSH
7354: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7355: LD_ADDR_VAR 0 8
7359: PUSH
7360: LD_VAR 0 2
7364: PPUSH
7365: CALL_OW 313
7369: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
7370: LD_ADDR_VAR 0 9
7374: PUSH
7375: LD_VAR 0 3
7379: PPUSH
7380: LD_INT 22
7382: PUSH
7383: LD_VAR 0 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 24
7404: PUSH
7405: LD_INT 750
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 3
7414: PUSH
7415: LD_INT 54
7417: PUSH
7418: EMPTY
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: PPUSH
7431: CALL_OW 70
7435: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7436: LD_ADDR_VAR 0 6
7440: PUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: LD_INT 22
7448: PUSH
7449: LD_VAR 0 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 21
7460: PUSH
7461: LD_INT 3
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: LD_INT 24
7473: PUSH
7474: LD_INT 1000
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PUSH
7490: EMPTY
7491: LIST
7492: PPUSH
7493: CALL_OW 70
7497: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
7498: LD_VAR 0 6
7502: NOT
7503: PUSH
7504: LD_INT 22
7506: PUSH
7507: LD_VAR 0 1
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 25
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: LD_INT 250
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: PPUSH
7541: CALL_OW 69
7545: NOT
7546: AND
7547: IFFALSE 7551
// exit ;
7549: GO 7733
// if buildings_list > 0 and engineerOkInside then
7551: LD_VAR 0 6
7555: PUSH
7556: LD_INT 0
7558: GREATER
7559: PUSH
7560: LD_VAR 0 8
7564: AND
7565: IFFALSE 7576
// ComExitBuilding ( engineerOkInside ) ;
7567: LD_VAR 0 8
7571: PPUSH
7572: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
7576: LD_VAR 0 6
7580: PUSH
7581: LD_INT 0
7583: GREATER
7584: PUSH
7585: LD_VAR 0 9
7589: PUSH
7590: LD_INT 0
7592: GREATER
7593: AND
7594: IFFALSE 7614
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
7596: LD_VAR 0 9
7600: PPUSH
7601: LD_VAR 0 6
7605: PUSH
7606: LD_INT 1
7608: ARRAY
7609: PPUSH
7610: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
7614: LD_VAR 0 6
7618: PUSH
7619: LD_INT 0
7621: EQUAL
7622: PUSH
7623: LD_VAR 0 4
7627: PUSH
7628: LD_INT 0
7630: EQUAL
7631: AND
7632: PUSH
7633: LD_VAR 0 9
7637: PUSH
7638: LD_INT 0
7640: GREATER
7641: AND
7642: IFFALSE 7658
// ComEnterUnit ( engineerOkOutside , building ) ;
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 2
7653: PPUSH
7654: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
7658: LD_VAR 0 9
7662: PUSH
7663: LD_INT 0
7665: GREATER
7666: PUSH
7667: LD_VAR 0 6
7671: PUSH
7672: LD_INT 0
7674: EQUAL
7675: AND
7676: PUSH
7677: LD_VAR 0 4
7681: PUSH
7682: LD_INT 0
7684: GREATER
7685: AND
7686: IFFALSE 7733
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7688: LD_VAR 0 9
7692: PPUSH
7693: LD_VAR 0 4
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: PPUSH
7702: LD_VAR 0 4
7706: PUSH
7707: LD_INT 2
7709: ARRAY
7710: PPUSH
7711: LD_VAR 0 4
7715: PUSH
7716: LD_INT 3
7718: ARRAY
7719: PPUSH
7720: LD_VAR 0 4
7724: PUSH
7725: LD_INT 4
7727: ARRAY
7728: PPUSH
7729: CALL_OW 145
// end ;
7733: LD_VAR 0 5
7737: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
7738: LD_INT 0
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 22
7756: PUSH
7757: LD_VAR 0 1
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 25
7768: PUSH
7769: LD_INT 4
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 24
7788: PUSH
7789: LD_INT 251
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 3
7816: PPUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 23
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 25
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 50
7851: PUSH
7852: EMPTY
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 70
7865: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7866: LD_ADDR_VAR 0 10
7870: PUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_VAR 0 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 21
7890: PUSH
7891: LD_INT 1
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 3
7900: PUSH
7901: LD_INT 25
7903: PUSH
7904: LD_INT 3
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 24
7920: PUSH
7921: LD_INT 750
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PPUSH
7938: CALL_OW 70
7942: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7943: LD_ADDR_VAR 0 11
7947: PUSH
7948: LD_VAR 0 2
7952: PPUSH
7953: LD_INT 22
7955: PUSH
7956: LD_VAR 0 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 21
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: LD_INT 25
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: LD_INT 24
7997: PUSH
7998: LD_INT 1000
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 70
8019: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
8020: LD_VAR 0 10
8024: NOT
8025: PUSH
8026: LD_VAR 0 11
8030: NOT
8031: AND
8032: PUSH
8033: LD_VAR 0 6
8037: NOT
8038: AND
8039: IFFALSE 8043
// exit ;
8041: GO 8277
// if damageUnits > 0 and sci_list > 0 then
8043: LD_VAR 0 10
8047: PUSH
8048: LD_INT 0
8050: GREATER
8051: PUSH
8052: LD_VAR 0 6
8056: PUSH
8057: LD_INT 0
8059: GREATER
8060: AND
8061: IFFALSE 8077
// ComMoveToArea ( damageUnits , healArea ) ;
8063: LD_VAR 0 10
8067: PPUSH
8068: LD_VAR 0 2
8072: PPUSH
8073: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
8077: LD_VAR 0 11
8081: PUSH
8082: LD_INT 0
8084: GREATER
8085: PUSH
8086: LD_VAR 0 6
8090: PUSH
8091: LD_INT 0
8093: GREATER
8094: AND
8095: IFFALSE 8106
// ComExitBuilding ( sci_list ) ;
8097: LD_VAR 0 6
8101: PPUSH
8102: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
8106: LD_VAR 0 11
8110: PUSH
8111: LD_INT 0
8113: GREATER
8114: PUSH
8115: LD_VAR 0 7
8119: PUSH
8120: LD_INT 0
8122: GREATER
8123: AND
8124: IFFALSE 8144
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
8126: LD_VAR 0 7
8130: PPUSH
8131: LD_VAR 0 11
8135: PUSH
8136: LD_INT 1
8138: ARRAY
8139: PPUSH
8140: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
8144: LD_VAR 0 10
8148: PUSH
8149: LD_INT 0
8151: EQUAL
8152: PUSH
8153: LD_VAR 0 11
8157: PUSH
8158: LD_INT 0
8160: EQUAL
8161: AND
8162: PUSH
8163: LD_VAR 0 7
8167: PUSH
8168: LD_INT 0
8170: GREATER
8171: AND
8172: IFFALSE 8277
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
8174: LD_ADDR_VAR 0 12
8178: PUSH
8179: LD_INT 22
8181: PUSH
8182: LD_VAR 0 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 21
8193: PUSH
8194: LD_INT 3
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 8
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
8221: LD_ADDR_VAR 0 13
8225: PUSH
8226: LD_INT 1
8228: PPUSH
8229: LD_VAR 0 12
8233: PPUSH
8234: CALL_OW 12
8238: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
8239: LD_VAR 0 7
8243: PPUSH
8244: LD_INT 3
8246: PUSH
8247: LD_INT 60
8249: PUSH
8250: EMPTY
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 72
8261: PPUSH
8262: LD_VAR 0 12
8266: PUSH
8267: LD_VAR 0 13
8271: ARRAY
8272: PPUSH
8273: CALL_OW 120
// end ; end ;
8277: LD_VAR 0 5
8281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
// tmpTab = [ ] ;
8288: LD_ADDR_VAR 0 6
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
8295: LD_INT 22
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: LD_INT 30
8309: PUSH
8310: LD_INT 32
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_INT 0
8328: GREATER
8329: IFFALSE 8412
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
8331: LD_ADDR_VAR 0 4
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_VAR 0 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: LD_INT 30
8350: PUSH
8351: LD_INT 32
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PUSH
8367: FOR_IN
8368: IFFALSE 8410
// begin for j in UnitsInside ( i ) do
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_VAR 0 4
8379: PPUSH
8380: CALL_OW 313
8384: PUSH
8385: FOR_IN
8386: IFFALSE 8406
// tmpTab = tmpTab ^ j ;
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: LD_VAR 0 6
8397: PUSH
8398: LD_VAR 0 5
8402: ADD
8403: ST_TO_ADDR
8404: GO 8385
8406: POP
8407: POP
// end ;
8408: GO 8367
8410: POP
8411: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
8412: LD_VAR 0 6
8416: PPUSH
8417: LD_VAR 0 2
8421: PPUSH
8422: CALL_OW 250
8426: PPUSH
8427: LD_VAR 0 2
8431: PPUSH
8432: CALL_OW 251
8436: PPUSH
8437: CALL_OW 114
// end ;
8441: LD_VAR 0 3
8445: RET
// export function CollectCrates ( side , cargo , cratesArea ) ; var clear_crates , cargo_list , crate_list ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
// enable ;
8452: ENABLE
// crate_list = GetListOfCratesInArea ( cratesArea ) ;
8453: LD_ADDR_VAR 0 7
8457: PUSH
8458: LD_VAR 0 3
8462: PPUSH
8463: CALL_OW 435
8467: ST_TO_ADDR
// cargo_list = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , cargo ] ] ) ;
8468: LD_ADDR_VAR 0 6
8472: PUSH
8473: LD_INT 22
8475: PUSH
8476: LD_VAR 0 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 34
8487: PUSH
8488: LD_VAR 0 2
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 69
8505: ST_TO_ADDR
// if cargo_list > 0 and GetListOfCratesInArea ( cratesArea ) and crate_list > 0 then
8506: LD_VAR 0 6
8510: PUSH
8511: LD_INT 0
8513: GREATER
8514: PUSH
8515: LD_VAR 0 3
8519: PPUSH
8520: CALL_OW 435
8524: AND
8525: PUSH
8526: LD_VAR 0 7
8530: PUSH
8531: LD_INT 0
8533: GREATER
8534: AND
8535: IFFALSE 8584
// begin AddComCollect ( cargo_list [ 1 ] , crate_list [ 1 ] , crate_list [ 2 ] ) ;
8537: LD_VAR 0 6
8541: PUSH
8542: LD_INT 1
8544: ARRAY
8545: PPUSH
8546: LD_VAR 0 7
8550: PUSH
8551: LD_INT 1
8553: ARRAY
8554: PPUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_INT 2
8562: ARRAY
8563: PPUSH
8564: CALL_OW 177
// SetFuel ( cargo_list [ 1 ] , 100 ) ;
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 1
8575: ARRAY
8576: PPUSH
8577: LD_INT 100
8579: PPUSH
8580: CALL_OW 240
// end ; end ;
8584: LD_VAR 0 4
8588: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
8593: PPUSH
8594: PPUSH
8595: PPUSH
8596: PPUSH
8597: PPUSH
8598: PPUSH
// soldiers_list = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
8599: LD_ADDR_VAR 0 6
8603: PUSH
8604: LD_VAR 0 2
8608: PPUSH
8609: LD_INT 22
8611: PUSH
8612: LD_VAR 0 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 56
8623: PUSH
8624: EMPTY
8625: LIST
8626: PUSH
8627: LD_INT 24
8629: PUSH
8630: LD_INT 700
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: LD_INT 60
8642: PUSH
8643: EMPTY
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 70
8711: ST_TO_ADDR
// turretList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
8712: LD_ADDR_VAR 0 7
8716: PUSH
8717: LD_VAR 0 2
8721: PPUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 32
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 58
8746: PUSH
8747: EMPTY
8748: LIST
8749: PUSH
8750: LD_INT 24
8752: PUSH
8753: LD_INT 251
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PPUSH
8766: CALL_OW 70
8770: ST_TO_ADDR
// barrackList = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_INT 22
8783: PUSH
8784: LD_VAR 0 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 2
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 4
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 30
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 251
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 70
8840: ST_TO_ADDR
// if barrackList > 0 then
8841: LD_VAR 0 9
8845: PUSH
8846: LD_INT 0
8848: GREATER
8849: IFFALSE 8997
// begin if turretList = 0 then
8851: LD_VAR 0 7
8855: PUSH
8856: LD_INT 0
8858: EQUAL
8859: IFFALSE 8901
// begin if soldiers_list > 0 then
8861: LD_VAR 0 6
8865: PUSH
8866: LD_INT 0
8868: GREATER
8869: IFFALSE 8899
// ComEnterUnit ( soldiers_list , barrackList [ Rand ( 1 , barrackList ) ] ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_VAR 0 9
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_VAR 0 9
8888: PPUSH
8889: CALL_OW 12
8893: ARRAY
8894: PPUSH
8895: CALL_OW 120
// end else
8899: GO 8997
// begin for i in barrackList do
8901: LD_ADDR_VAR 0 4
8905: PUSH
8906: LD_VAR 0 9
8910: PUSH
8911: FOR_IN
8912: IFFALSE 8995
// begin insideUnits = UnitsInside ( i ) ;
8914: LD_ADDR_VAR 0 10
8918: PUSH
8919: LD_VAR 0 4
8923: PPUSH
8924: CALL_OW 313
8928: ST_TO_ADDR
// if insideUnits > 0 then
8929: LD_VAR 0 10
8933: PUSH
8934: LD_INT 0
8936: GREATER
8937: IFFALSE 8961
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
8939: LD_VAR 0 10
8943: PUSH
8944: LD_INT 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 7
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 120
// if soldiers_list > 0 then
8961: LD_VAR 0 6
8965: PUSH
8966: LD_INT 0
8968: GREATER
8969: IFFALSE 8993
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
8971: LD_VAR 0 6
8975: PUSH
8976: LD_INT 1
8978: ARRAY
8979: PPUSH
8980: LD_VAR 0 7
8984: PUSH
8985: LD_INT 1
8987: ARRAY
8988: PPUSH
8989: CALL_OW 120
// end ;
8993: GO 8911
8995: POP
8996: POP
// end ; end ; end ;
8997: LD_VAR 0 3
9001: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
9002: LD_INT 0
9004: PPUSH
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
9009: LD_ADDR_VAR 0 6
9013: PUSH
9014: LD_INT 22
9016: PUSH
9017: LD_VAR 0 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 30
9031: PUSH
9032: LD_INT 31
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 30
9041: PUSH
9042: LD_INT 32
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 30
9051: PUSH
9052: LD_INT 33
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 30
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 30
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
9096: LD_ADDR_VAR 0 7
9100: PUSH
9101: LD_INT 22
9103: PUSH
9104: LD_VAR 0 2
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 21
9115: PUSH
9116: LD_INT 3
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 58
9125: PUSH
9126: EMPTY
9127: LIST
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
9139: LD_VAR 0 6
9143: PUSH
9144: LD_INT 0
9146: GREATER
9147: PUSH
9148: LD_VAR 0 7
9152: PUSH
9153: LD_INT 0
9155: GREATER
9156: AND
9157: IFFALSE 9227
// begin for i in turretsList do
9159: LD_ADDR_VAR 0 4
9163: PUSH
9164: LD_VAR 0 6
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9225
// begin for j in enemyBuildings do
9172: LD_ADDR_VAR 0 5
9176: PUSH
9177: LD_VAR 0 7
9181: PUSH
9182: FOR_IN
9183: IFFALSE 9221
// begin if GetDistUnits ( i , j ) < 20 then
9185: LD_VAR 0 4
9189: PPUSH
9190: LD_VAR 0 5
9194: PPUSH
9195: CALL_OW 296
9199: PUSH
9200: LD_INT 20
9202: LESS
9203: IFFALSE 9219
// begin ComAttackUnit ( i , j ) ;
9205: LD_VAR 0 4
9209: PPUSH
9210: LD_VAR 0 5
9214: PPUSH
9215: CALL_OW 115
// end ; end ;
9219: GO 9182
9221: POP
9222: POP
// end ;
9223: GO 9169
9225: POP
9226: POP
// end ; end ;
9227: LD_VAR 0 3
9231: RET
// export function CraneRepairBuild ( side , repairArea , destroyedBuildings ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
9232: LD_INT 0
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
// crane_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_INT 22
9247: PUSH
9248: LD_VAR 0 1
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 34
9269: PUSH
9270: LD_INT 52
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: PPUSH
9282: CALL_OW 69
9286: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9287: LD_ADDR_VAR 0 9
9291: PUSH
9292: LD_INT 22
9294: PUSH
9295: LD_VAR 0 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 21
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 3
9316: PUSH
9317: LD_INT 24
9319: PUSH
9320: LD_INT 1000
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
9344: LD_VAR 0 9
9348: PUSH
9349: LD_INT 0
9351: GREATER
9352: PUSH
9353: LD_VAR 0 8
9357: PPUSH
9358: LD_INT 24
9360: PUSH
9361: LD_INT 750
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 72
9372: PUSH
9373: LD_INT 0
9375: GREATER
9376: AND
9377: IFFALSE 9412
// ComRepairBuilding ( UnitFilter ( crane_list , [ f_lives , 750 ] ) , buildings_list [ 1 ] ) ;
9379: LD_VAR 0 8
9383: PPUSH
9384: LD_INT 24
9386: PUSH
9387: LD_INT 750
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: PPUSH
9399: LD_VAR 0 9
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: CALL_OW 130
// if UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) > 0 then
9412: LD_VAR 0 8
9416: PPUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 24
9422: PUSH
9423: LD_INT 750
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 72
9438: PUSH
9439: LD_INT 0
9441: GREATER
9442: IFFALSE 9480
// ComMoveToArea ( UnitFilter ( crane_list , [ f_not , [ f_lives , 750 ] ] ) , repairArea ) ;
9444: LD_VAR 0 8
9448: PPUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 24
9454: PUSH
9455: LD_INT 750
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 72
9470: PPUSH
9471: LD_VAR 0 2
9475: PPUSH
9476: CALL_OW 113
// if crane_list > 0 and buildings_list = 0 and destroyedBuildings > 0 then
9480: LD_VAR 0 8
9484: PUSH
9485: LD_INT 0
9487: GREATER
9488: PUSH
9489: LD_VAR 0 9
9493: PUSH
9494: LD_INT 0
9496: EQUAL
9497: AND
9498: PUSH
9499: LD_VAR 0 3
9503: PUSH
9504: LD_INT 0
9506: GREATER
9507: AND
9508: IFFALSE 9555
// AddComCraneBuild ( crane_list , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9510: LD_VAR 0 8
9514: PPUSH
9515: LD_VAR 0 3
9519: PUSH
9520: LD_INT 1
9522: ARRAY
9523: PPUSH
9524: LD_VAR 0 3
9528: PUSH
9529: LD_INT 2
9531: ARRAY
9532: PPUSH
9533: LD_VAR 0 3
9537: PUSH
9538: LD_INT 3
9540: ARRAY
9541: PPUSH
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 4
9549: ARRAY
9550: PPUSH
9551: CALL_OW 567
// if FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) > 0 then
9555: LD_VAR 0 2
9559: PPUSH
9560: LD_INT 22
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 21
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 34
9584: PUSH
9585: LD_INT 52
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 3
9594: PUSH
9595: LD_INT 24
9597: PUSH
9598: LD_INT 750
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: PUSH
9620: LD_INT 0
9622: GREATER
9623: IFFALSE 9825
// begin for i in FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_not , [ f_lives , 750 ] ] ] ) do
9625: LD_ADDR_VAR 0 5
9629: PUSH
9630: LD_VAR 0 2
9634: PPUSH
9635: LD_INT 22
9637: PUSH
9638: LD_VAR 0 1
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 52
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 24
9672: PUSH
9673: LD_INT 750
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 70
9694: PUSH
9695: FOR_IN
9696: IFFALSE 9823
// begin mechTmp = UnitsInside ( i ) ;
9698: LD_ADDR_VAR 0 6
9702: PUSH
9703: LD_VAR 0 5
9707: PPUSH
9708: CALL_OW 313
9712: ST_TO_ADDR
// ComExitVehicle ( mechTmp ) ;
9713: LD_VAR 0 6
9717: PPUSH
9718: CALL_OW 121
// AddComRepairVehicle ( mechTmp , vehicleTmp ) ;
9722: LD_VAR 0 6
9726: PPUSH
9727: LD_VAR 0 7
9731: PPUSH
9732: CALL_OW 189
// wait ( 0 0$2 ) ;
9736: LD_INT 70
9738: PPUSH
9739: CALL_OW 67
// AddComEnterUnit ( mechTmp , FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] , [ f_lives , 1000 ] , [ f_empty ] ] ) [ 1 ] ) ;
9743: LD_VAR 0 6
9747: PPUSH
9748: LD_VAR 0 2
9752: PPUSH
9753: LD_INT 22
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 21
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 34
9777: PUSH
9778: LD_INT 52
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 24
9787: PUSH
9788: LD_INT 1000
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 58
9797: PUSH
9798: EMPTY
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: CALL_OW 180
// end ;
9821: GO 9695
9823: POP
9824: POP
// end ; end ;
9825: LD_VAR 0 4
9829: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
9830: LD_INT 0
9832: PPUSH
9833: PPUSH
9834: PPUSH
9835: PPUSH
9836: PPUSH
9837: PPUSH
9838: PPUSH
9839: PPUSH
9840: PPUSH
9841: PPUSH
9842: PPUSH
// for i = 1 to medicCount do
9843: LD_ADDR_VAR 0 14
9847: PUSH
9848: DOUBLE
9849: LD_INT 1
9851: DEC
9852: ST_TO_ADDR
9853: LD_VAR 0 7
9857: PUSH
9858: FOR_TO
9859: IFFALSE 9941
// begin uc_side = side ;
9861: LD_ADDR_OWVAR 20
9865: PUSH
9866: LD_VAR 0 1
9870: ST_TO_ADDR
// uc_nation = nation ;
9871: LD_ADDR_OWVAR 21
9875: PUSH
9876: LD_VAR 0 2
9880: ST_TO_ADDR
// hc_name =  ;
9881: LD_ADDR_OWVAR 26
9885: PUSH
9886: LD_STRING 
9888: ST_TO_ADDR
// hc_gallery =  ;
9889: LD_ADDR_OWVAR 33
9893: PUSH
9894: LD_STRING 
9896: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
9897: LD_INT 0
9899: PPUSH
9900: LD_INT 4
9902: PPUSH
9903: LD_VAR 0 8
9907: PPUSH
9908: CALL_OW 380
// un = CreateHuman ;
9912: LD_ADDR_VAR 0 16
9916: PUSH
9917: CALL_OW 44
9921: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
9922: LD_VAR 0 16
9926: PPUSH
9927: LD_VAR 0 9
9931: PPUSH
9932: LD_INT 0
9934: PPUSH
9935: CALL_OW 49
// end ;
9939: GO 9858
9941: POP
9942: POP
// for i = 1 to soldierCount do
9943: LD_ADDR_VAR 0 14
9947: PUSH
9948: DOUBLE
9949: LD_INT 1
9951: DEC
9952: ST_TO_ADDR
9953: LD_VAR 0 3
9957: PUSH
9958: FOR_TO
9959: IFFALSE 10041
// begin uc_side = side ;
9961: LD_ADDR_OWVAR 20
9965: PUSH
9966: LD_VAR 0 1
9970: ST_TO_ADDR
// uc_nation = nation ;
9971: LD_ADDR_OWVAR 21
9975: PUSH
9976: LD_VAR 0 2
9980: ST_TO_ADDR
// hc_name =  ;
9981: LD_ADDR_OWVAR 26
9985: PUSH
9986: LD_STRING 
9988: ST_TO_ADDR
// hc_gallery =  ;
9989: LD_ADDR_OWVAR 33
9993: PUSH
9994: LD_STRING 
9996: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
9997: LD_INT 0
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_VAR 0 8
10007: PPUSH
10008: CALL_OW 380
// un = CreateHuman ;
10012: LD_ADDR_VAR 0 16
10016: PUSH
10017: CALL_OW 44
10021: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10022: LD_VAR 0 16
10026: PPUSH
10027: LD_VAR 0 9
10031: PPUSH
10032: LD_INT 0
10034: PPUSH
10035: CALL_OW 49
// end ;
10039: GO 9958
10041: POP
10042: POP
// for i = 1 to sniperCount do
10043: LD_ADDR_VAR 0 14
10047: PUSH
10048: DOUBLE
10049: LD_INT 1
10051: DEC
10052: ST_TO_ADDR
10053: LD_VAR 0 4
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10141
// begin uc_side = side ;
10061: LD_ADDR_OWVAR 20
10065: PUSH
10066: LD_VAR 0 1
10070: ST_TO_ADDR
// uc_nation = nation ;
10071: LD_ADDR_OWVAR 21
10075: PUSH
10076: LD_VAR 0 2
10080: ST_TO_ADDR
// hc_name =  ;
10081: LD_ADDR_OWVAR 26
10085: PUSH
10086: LD_STRING 
10088: ST_TO_ADDR
// hc_gallery =  ;
10089: LD_ADDR_OWVAR 33
10093: PUSH
10094: LD_STRING 
10096: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
10097: LD_INT 0
10099: PPUSH
10100: LD_INT 5
10102: PPUSH
10103: LD_VAR 0 8
10107: PPUSH
10108: CALL_OW 380
// un = CreateHuman ;
10112: LD_ADDR_VAR 0 16
10116: PUSH
10117: CALL_OW 44
10121: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10122: LD_VAR 0 16
10126: PPUSH
10127: LD_VAR 0 9
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL_OW 49
// end ;
10139: GO 10058
10141: POP
10142: POP
// for i = 1 to bazookCount do
10143: LD_ADDR_VAR 0 14
10147: PUSH
10148: DOUBLE
10149: LD_INT 1
10151: DEC
10152: ST_TO_ADDR
10153: LD_VAR 0 5
10157: PUSH
10158: FOR_TO
10159: IFFALSE 10241
// begin uc_side = side ;
10161: LD_ADDR_OWVAR 20
10165: PUSH
10166: LD_VAR 0 1
10170: ST_TO_ADDR
// uc_nation = nation ;
10171: LD_ADDR_OWVAR 21
10175: PUSH
10176: LD_VAR 0 2
10180: ST_TO_ADDR
// hc_name =  ;
10181: LD_ADDR_OWVAR 26
10185: PUSH
10186: LD_STRING 
10188: ST_TO_ADDR
// hc_gallery =  ;
10189: LD_ADDR_OWVAR 33
10193: PUSH
10194: LD_STRING 
10196: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
10197: LD_INT 0
10199: PPUSH
10200: LD_INT 9
10202: PPUSH
10203: LD_VAR 0 8
10207: PPUSH
10208: CALL_OW 380
// un = CreateHuman ;
10212: LD_ADDR_VAR 0 16
10216: PUSH
10217: CALL_OW 44
10221: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10222: LD_VAR 0 16
10226: PPUSH
10227: LD_VAR 0 9
10231: PPUSH
10232: LD_INT 0
10234: PPUSH
10235: CALL_OW 49
// end ;
10239: GO 10158
10241: POP
10242: POP
// for i = 1 to mortalCount do
10243: LD_ADDR_VAR 0 14
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_VAR 0 6
10257: PUSH
10258: FOR_TO
10259: IFFALSE 10341
// begin uc_side = side ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_VAR 0 1
10270: ST_TO_ADDR
// uc_nation = nation ;
10271: LD_ADDR_OWVAR 21
10275: PUSH
10276: LD_VAR 0 2
10280: ST_TO_ADDR
// hc_name =  ;
10281: LD_ADDR_OWVAR 26
10285: PUSH
10286: LD_STRING 
10288: ST_TO_ADDR
// hc_gallery =  ;
10289: LD_ADDR_OWVAR 33
10293: PUSH
10294: LD_STRING 
10296: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
10297: LD_INT 0
10299: PPUSH
10300: LD_INT 8
10302: PPUSH
10303: LD_VAR 0 8
10307: PPUSH
10308: CALL_OW 380
// un = CreateHuman ;
10312: LD_ADDR_VAR 0 16
10316: PUSH
10317: CALL_OW 44
10321: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
10322: LD_VAR 0 16
10326: PPUSH
10327: LD_VAR 0 9
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10258
10341: POP
10342: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10343: LD_ADDR_VAR 0 19
10347: PUSH
10348: LD_INT 22
10350: PUSH
10351: LD_VAR 0 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 25
10365: PUSH
10366: LD_INT 1
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 5
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 25
10385: PUSH
10386: LD_INT 8
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PPUSH
10414: CALL_OW 69
10418: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
10419: LD_ADDR_VAR 0 18
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_VAR 0 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 25
10438: PUSH
10439: LD_INT 4
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PPUSH
10450: CALL_OW 69
10454: ST_TO_ADDR
// for i in medic_list do
10455: LD_ADDR_VAR 0 14
10459: PUSH
10460: LD_VAR 0 18
10464: PUSH
10465: FOR_IN
10466: IFFALSE 10484
// ComMoveToArea ( i , healArea ) ;
10468: LD_VAR 0 14
10472: PPUSH
10473: LD_VAR 0 10
10477: PPUSH
10478: CALL_OW 113
10482: GO 10465
10484: POP
10485: POP
// if strategy = 1 then
10486: LD_VAR 0 12
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 11199
// begin repeat wait ( 0 0$3 ) ;
10496: LD_INT 105
10498: PPUSH
10499: CALL_OW 67
// for i in soldiersOK_list do
10503: LD_ADDR_VAR 0 14
10507: PUSH
10508: LD_VAR 0 19
10512: PUSH
10513: FOR_IN
10514: IFFALSE 10548
// begin AddComAgressiveMove ( i , 80 , 109 ) ;
10516: LD_VAR 0 14
10520: PPUSH
10521: LD_INT 80
10523: PPUSH
10524: LD_INT 109
10526: PPUSH
10527: CALL_OW 174
// AddComAgressiveMove ( i , 39 , 49 ) ;
10531: LD_VAR 0 14
10535: PPUSH
10536: LD_INT 39
10538: PPUSH
10539: LD_INT 49
10541: PPUSH
10542: CALL_OW 174
// end ;
10546: GO 10513
10548: POP
10549: POP
// until FilterUnitsInArea ( AttackArea1 , [ f_side , side ] ) > 0 ;
10550: LD_INT 15
10552: PPUSH
10553: LD_INT 22
10555: PUSH
10556: LD_VAR 0 1
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: PPUSH
10565: CALL_OW 70
10569: PUSH
10570: LD_INT 0
10572: GREATER
10573: IFFALSE 10496
// repeat wait ( 0 0$1 ) ;
10575: LD_INT 35
10577: PPUSH
10578: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
10582: LD_ADDR_VAR 0 17
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_VAR 0 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 1
10601: PUSH
10602: LD_INT 3
10604: PUSH
10605: LD_INT 24
10607: PUSH
10608: LD_INT 550
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 24
10621: PUSH
10622: LD_INT 250
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
10643: LD_ADDR_VAR 0 19
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 2
10662: PUSH
10663: LD_INT 25
10665: PUSH
10666: LD_INT 1
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 25
10675: PUSH
10676: LD_INT 5
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 25
10685: PUSH
10686: LD_INT 8
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 25
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 24
10712: PUSH
10713: LD_INT 1000
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: ST_TO_ADDR
// if medicCount > 0 then
10730: LD_VAR 0 7
10734: PUSH
10735: LD_INT 0
10737: GREATER
10738: IFFALSE 10812
// begin if damageUnit_list > 0 then
10740: LD_VAR 0 17
10744: PUSH
10745: LD_INT 0
10747: GREATER
10748: IFFALSE 10812
// begin for i in damageUnit_list do
10750: LD_ADDR_VAR 0 14
10754: PUSH
10755: LD_VAR 0 17
10759: PUSH
10760: FOR_IN
10761: IFFALSE 10810
// begin ComMoveToArea ( i , healArea ) ;
10763: LD_VAR 0 14
10767: PPUSH
10768: LD_VAR 0 10
10772: PPUSH
10773: CALL_OW 113
// for j in medic_list do
10777: LD_ADDR_VAR 0 15
10781: PUSH
10782: LD_VAR 0 18
10786: PUSH
10787: FOR_IN
10788: IFFALSE 10806
// AddComHeal ( j , i ) ;
10790: LD_VAR 0 15
10794: PPUSH
10795: LD_VAR 0 14
10799: PPUSH
10800: CALL_OW 188
10804: GO 10787
10806: POP
10807: POP
// end ;
10808: GO 10760
10810: POP
10811: POP
// end ; end ; for i in soldiersOK_list do
10812: LD_ADDR_VAR 0 14
10816: PUSH
10817: LD_VAR 0 19
10821: PUSH
10822: FOR_IN
10823: IFFALSE 10999
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10825: LD_ADDR_VAR 0 22
10829: PUSH
10830: LD_INT 22
10832: PUSH
10833: LD_VAR 0 11
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: PPUSH
10847: LD_VAR 0 14
10851: PPUSH
10852: CALL_OW 74
10856: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10857: LD_ADDR_VAR 0 23
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_VAR 0 11
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 59
10879: PUSH
10880: EMPTY
10881: LIST
10882: PUSH
10883: LD_INT 21
10885: PUSH
10886: LD_INT 1
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 21
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: EMPTY
10914: LIST
10915: PPUSH
10916: CALL_OW 69
10920: PPUSH
10921: LD_VAR 0 14
10925: PPUSH
10926: CALL_OW 74
10930: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10931: LD_VAR 0 14
10935: PPUSH
10936: LD_VAR 0 22
10940: PPUSH
10941: CALL_OW 296
10945: PUSH
10946: LD_INT 8
10948: PLUS
10949: PUSH
10950: LD_VAR 0 14
10954: PPUSH
10955: LD_VAR 0 23
10959: PPUSH
10960: CALL_OW 296
10964: LESS
10965: IFFALSE 10983
// begin ComAttackUnit ( i , target1 ) ;
10967: LD_VAR 0 14
10971: PPUSH
10972: LD_VAR 0 22
10976: PPUSH
10977: CALL_OW 115
// end else
10981: GO 10997
// begin ComAttackUnit ( i , target2 ) ;
10983: LD_VAR 0 14
10987: PPUSH
10988: LD_VAR 0 23
10992: PPUSH
10993: CALL_OW 115
// end ; end ;
10997: GO 10822
10999: POP
11000: POP
// for i in soldiersOK_list do
11001: LD_ADDR_VAR 0 14
11005: PUSH
11006: LD_VAR 0 19
11010: PUSH
11011: FOR_IN
11012: IFFALSE 11188
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11014: LD_ADDR_VAR 0 22
11018: PUSH
11019: LD_INT 22
11021: PUSH
11022: LD_VAR 0 11
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PPUSH
11031: CALL_OW 69
11035: PPUSH
11036: LD_VAR 0 14
11040: PPUSH
11041: CALL_OW 74
11045: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11046: LD_ADDR_VAR 0 23
11050: PUSH
11051: LD_INT 22
11053: PUSH
11054: LD_VAR 0 11
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 59
11068: PUSH
11069: EMPTY
11070: LIST
11071: PUSH
11072: LD_INT 21
11074: PUSH
11075: LD_INT 1
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 21
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: EMPTY
11103: LIST
11104: PPUSH
11105: CALL_OW 69
11109: PPUSH
11110: LD_VAR 0 14
11114: PPUSH
11115: CALL_OW 74
11119: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11120: LD_VAR 0 14
11124: PPUSH
11125: LD_VAR 0 22
11129: PPUSH
11130: CALL_OW 296
11134: PUSH
11135: LD_INT 8
11137: PLUS
11138: PUSH
11139: LD_VAR 0 14
11143: PPUSH
11144: LD_VAR 0 23
11148: PPUSH
11149: CALL_OW 296
11153: LESS
11154: IFFALSE 11172
// begin ComAttackUnit ( i , target1 ) ;
11156: LD_VAR 0 14
11160: PPUSH
11161: LD_VAR 0 22
11165: PPUSH
11166: CALL_OW 115
// end else
11170: GO 11186
// begin ComAttackUnit ( i , target2 ) ;
11172: LD_VAR 0 14
11176: PPUSH
11177: LD_VAR 0 23
11181: PPUSH
11182: CALL_OW 115
// end ; end ;
11186: GO 11011
11188: POP
11189: POP
// until soldiersOK_list = [ ] ;
11190: LD_VAR 0 19
11194: PUSH
11195: EMPTY
11196: EQUAL
11197: IFFALSE 10575
// end ; if strategy = 2 then
11199: LD_VAR 0 12
11203: PUSH
11204: LD_INT 2
11206: EQUAL
11207: IFFALSE 11912
// begin repeat wait ( 0 0$1 ) ;
11209: LD_INT 35
11211: PPUSH
11212: CALL_OW 67
// for i in soldiersOK_list do
11216: LD_ADDR_VAR 0 14
11220: PUSH
11221: LD_VAR 0 19
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11261
// begin AddComAgressiveMove ( i , 117 , 97 ) ;
11229: LD_VAR 0 14
11233: PPUSH
11234: LD_INT 117
11236: PPUSH
11237: LD_INT 97
11239: PPUSH
11240: CALL_OW 174
// AddComAgressiveMove ( i , 94 , 50 ) ;
11244: LD_VAR 0 14
11248: PPUSH
11249: LD_INT 94
11251: PPUSH
11252: LD_INT 50
11254: PPUSH
11255: CALL_OW 174
// end ;
11259: GO 11226
11261: POP
11262: POP
// until FilterUnitsInArea ( AttackArea2 , [ f_side , side ] ) > 0 ;
11263: LD_INT 16
11265: PPUSH
11266: LD_INT 22
11268: PUSH
11269: LD_VAR 0 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 70
11282: PUSH
11283: LD_INT 0
11285: GREATER
11286: IFFALSE 11209
// repeat wait ( 0 0$3 ) ;
11288: LD_INT 105
11290: PPUSH
11291: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
11295: LD_ADDR_VAR 0 17
11299: PUSH
11300: LD_INT 22
11302: PUSH
11303: LD_VAR 0 1
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 1
11314: PUSH
11315: LD_INT 3
11317: PUSH
11318: LD_INT 24
11320: PUSH
11321: LD_INT 550
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 24
11334: PUSH
11335: LD_INT 250
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PPUSH
11351: CALL_OW 69
11355: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
11356: LD_ADDR_VAR 0 19
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_VAR 0 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 25
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 5
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 25
11398: PUSH
11399: LD_INT 8
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: LD_INT 25
11408: PUSH
11409: LD_INT 9
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 24
11425: PUSH
11426: LD_INT 1000
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: PPUSH
11438: CALL_OW 69
11442: ST_TO_ADDR
// if medicCount > 0 then
11443: LD_VAR 0 7
11447: PUSH
11448: LD_INT 0
11450: GREATER
11451: IFFALSE 11525
// begin if damageUnit_list > 0 then
11453: LD_VAR 0 17
11457: PUSH
11458: LD_INT 0
11460: GREATER
11461: IFFALSE 11525
// begin for i in damageUnit_list do
11463: LD_ADDR_VAR 0 14
11467: PUSH
11468: LD_VAR 0 17
11472: PUSH
11473: FOR_IN
11474: IFFALSE 11523
// begin ComMoveToArea ( i , healArea ) ;
11476: LD_VAR 0 14
11480: PPUSH
11481: LD_VAR 0 10
11485: PPUSH
11486: CALL_OW 113
// for j in medic_list do
11490: LD_ADDR_VAR 0 15
11494: PUSH
11495: LD_VAR 0 18
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11519
// AddComHeal ( j , i ) ;
11503: LD_VAR 0 15
11507: PPUSH
11508: LD_VAR 0 14
11512: PPUSH
11513: CALL_OW 188
11517: GO 11500
11519: POP
11520: POP
// end ;
11521: GO 11473
11523: POP
11524: POP
// end ; end ; for i in soldiersOK_list do
11525: LD_ADDR_VAR 0 14
11529: PUSH
11530: LD_VAR 0 19
11534: PUSH
11535: FOR_IN
11536: IFFALSE 11712
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11538: LD_ADDR_VAR 0 22
11542: PUSH
11543: LD_INT 22
11545: PUSH
11546: LD_VAR 0 11
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PPUSH
11560: LD_VAR 0 14
11564: PPUSH
11565: CALL_OW 74
11569: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11570: LD_ADDR_VAR 0 23
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_VAR 0 11
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 59
11592: PUSH
11593: EMPTY
11594: LIST
11595: PUSH
11596: LD_INT 21
11598: PUSH
11599: LD_INT 1
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 21
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: PPUSH
11629: CALL_OW 69
11633: PPUSH
11634: LD_VAR 0 14
11638: PPUSH
11639: CALL_OW 74
11643: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11644: LD_VAR 0 14
11648: PPUSH
11649: LD_VAR 0 22
11653: PPUSH
11654: CALL_OW 296
11658: PUSH
11659: LD_INT 8
11661: PLUS
11662: PUSH
11663: LD_VAR 0 14
11667: PPUSH
11668: LD_VAR 0 23
11672: PPUSH
11673: CALL_OW 296
11677: LESS
11678: IFFALSE 11696
// begin ComAttackUnit ( i , target1 ) ;
11680: LD_VAR 0 14
11684: PPUSH
11685: LD_VAR 0 22
11689: PPUSH
11690: CALL_OW 115
// end else
11694: GO 11710
// begin ComAttackUnit ( i , target2 ) ;
11696: LD_VAR 0 14
11700: PPUSH
11701: LD_VAR 0 23
11705: PPUSH
11706: CALL_OW 115
// end ; end ;
11710: GO 11535
11712: POP
11713: POP
// for i in soldiersOK_list do
11714: LD_ADDR_VAR 0 14
11718: PUSH
11719: LD_VAR 0 19
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11901
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11727: LD_ADDR_VAR 0 22
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_VAR 0 11
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PPUSH
11749: LD_VAR 0 14
11753: PPUSH
11754: CALL_OW 74
11758: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11759: LD_ADDR_VAR 0 23
11763: PUSH
11764: LD_INT 22
11766: PUSH
11767: LD_VAR 0 11
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 2
11778: PUSH
11779: LD_INT 59
11781: PUSH
11782: EMPTY
11783: LIST
11784: PUSH
11785: LD_INT 21
11787: PUSH
11788: LD_INT 1
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 21
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: PPUSH
11818: CALL_OW 69
11822: PPUSH
11823: LD_VAR 0 14
11827: PPUSH
11828: CALL_OW 74
11832: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11833: LD_VAR 0 14
11837: PPUSH
11838: LD_VAR 0 22
11842: PPUSH
11843: CALL_OW 296
11847: PUSH
11848: LD_INT 8
11850: PLUS
11851: PUSH
11852: LD_VAR 0 14
11856: PPUSH
11857: LD_VAR 0 23
11861: PPUSH
11862: CALL_OW 296
11866: LESS
11867: IFFALSE 11885
// begin ComAttackUnit ( i , target1 ) ;
11869: LD_VAR 0 14
11873: PPUSH
11874: LD_VAR 0 22
11878: PPUSH
11879: CALL_OW 115
// end else
11883: GO 11899
// begin ComAttackUnit ( i , target2 ) ;
11885: LD_VAR 0 14
11889: PPUSH
11890: LD_VAR 0 23
11894: PPUSH
11895: CALL_OW 115
// end ; end ;
11899: GO 11724
11901: POP
11902: POP
// until soldiersOK_list = [ ] ;
11903: LD_VAR 0 19
11907: PUSH
11908: EMPTY
11909: EQUAL
11910: IFFALSE 11288
// end ; end ; end_of_file
11912: LD_VAR 0 13
11916: RET
// every 0 0$01 do
11917: GO 11919
11919: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 then
11920: LD_INT 22
11922: PUSH
11923: LD_INT 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 25
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 69
11948: PUSH
11949: LD_INT 0
11951: EQUAL
11952: IFFALSE 11966
// SetClass ( JMM , 2 ) ;
11954: LD_EXP 1
11958: PPUSH
11959: LD_INT 2
11961: PPUSH
11962: CALL_OW 336
// ChangeMissionObjectives ( M1 ) ;
11966: LD_STRING M1
11968: PPUSH
11969: CALL_OW 337
// case difficulty of 1 :
11973: LD_OWVAR 67
11977: PUSH
11978: LD_INT 1
11980: DOUBLE
11981: EQUAL
11982: IFTRUE 11986
11984: GO 11996
11986: POP
// ChangeMissionObjectives ( M1-1 ) ; 2 :
11987: LD_STRING M1-1
11989: PPUSH
11990: CALL_OW 337
11994: GO 12033
11996: LD_INT 2
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12014
12004: POP
// ChangeMissionObjectives ( M1-2 ) ; 3 :
12005: LD_STRING M1-2
12007: PPUSH
12008: CALL_OW 337
12012: GO 12033
12014: LD_INT 3
12016: DOUBLE
12017: EQUAL
12018: IFTRUE 12022
12020: GO 12032
12022: POP
// ChangeMissionObjectives ( M1-3 ) ; end ;
12023: LD_STRING M1-3
12025: PPUSH
12026: CALL_OW 337
12030: GO 12033
12032: POP
// ChangeMissionObjectives ( M1cont ) ;
12033: LD_STRING M1cont
12035: PPUSH
12036: CALL_OW 337
// SaveForQuickRestart ;
12040: CALL_OW 22
// Wait ( Rand ( 0 0$10 , 0 0$25 ) ) ;
12044: LD_INT 350
12046: PPUSH
12047: LD_INT 875
12049: PPUSH
12050: CALL_OW 12
12054: PPUSH
12055: CALL_OW 67
// CreateCratesArea ( 5 , FirstCrate , true ) ;
12059: LD_INT 5
12061: PPUSH
12062: LD_INT 4
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 55
// end ;
12072: END
// every 0 0$15 trigger firstCrateSpawn do
12073: LD_EXP 41
12077: IFFALSE 12416
12079: GO 12081
12081: DISABLE
// begin if IsOk ( Lisa ) then
12082: LD_EXP 2
12086: PPUSH
12087: CALL_OW 302
12091: IFFALSE 12107
// Say ( Lisa , DR0-Lisa-1 ) else
12093: LD_EXP 2
12097: PPUSH
12098: LD_STRING DR0-Lisa-1
12100: PPUSH
12101: CALL_OW 88
12105: GO 12241
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Brown , Donaldson ] , DR0-Sol1-1 , DR0-Sol1-1 ) ;
12107: LD_INT 22
12109: PUSH
12110: LD_INT 1
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 21
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 26
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 25
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 25
12172: PUSH
12173: LD_INT 4
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: PPUSH
12193: CALL_OW 69
12197: PUSH
12198: LD_EXP 1
12202: PUSH
12203: LD_EXP 8
12207: PUSH
12208: LD_EXP 5
12212: PUSH
12213: LD_EXP 6
12217: PUSH
12218: LD_EXP 7
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: PPUSH
12231: LD_STRING DR0-Sol1-1
12233: PPUSH
12234: LD_STRING DR0-Sol1-1
12236: PPUSH
12237: CALL 5256 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Gladstone , Frank , Lisa , Brown , Donaldson ] , DR0-Sol2-1 , DR0-Sol2-1 ) ;
12241: LD_INT 22
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 26
12263: PUSH
12264: LD_INT 1
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: PUSH
12271: LD_INT 2
12273: PUSH
12274: LD_INT 25
12276: PUSH
12277: LD_INT 1
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PUSH
12284: LD_INT 25
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 25
12296: PUSH
12297: LD_INT 3
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 4
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: PPUSH
12327: CALL_OW 69
12331: PUSH
12332: LD_EXP 1
12336: PUSH
12337: LD_EXP 8
12341: PUSH
12342: LD_EXP 5
12346: PUSH
12347: LD_EXP 2
12351: PUSH
12352: LD_EXP 6
12356: PUSH
12357: LD_EXP 7
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: DIFF
12370: PPUSH
12371: LD_STRING DR0-Sol2-1
12373: PPUSH
12374: LD_STRING DR0-Sol2-1
12376: PPUSH
12377: CALL 5256 0 3
// if IsOk ( Cyrus ) then
12381: LD_EXP 4
12385: PPUSH
12386: CALL_OW 302
12390: IFFALSE 12404
// Say ( Cyrus , DR0-Cyrus-1 ) ;
12392: LD_EXP 4
12396: PPUSH
12397: LD_STRING DR0-Cyrus-1
12399: PPUSH
12400: CALL_OW 88
// Say ( JMM , DR0-JMM-1 ) ;
12404: LD_EXP 1
12408: PPUSH
12409: LD_STRING DR0-JMM-1
12411: PPUSH
12412: CALL_OW 88
// end ;
12416: END
// every 5 5$0 trigger IsOk ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 16 ] ] ) > 0 do
12417: LD_EXP 5
12421: PPUSH
12422: CALL_OW 302
12426: PUSH
12427: LD_INT 22
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 25
12439: PUSH
12440: LD_INT 16
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: LD_INT 0
12458: GREATER
12459: AND
12460: IFFALSE 12738
12462: GO 12464
12464: DISABLE
// begin DialogueOn ;
12465: CALL_OW 6
// Say ( Frank , D10-Frank-1 ) ;
12469: LD_EXP 5
12473: PPUSH
12474: LD_STRING D10-Frank-1
12476: PPUSH
12477: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa ] , D10-Sol1-1 , D10-FSol1-1 ) ;
12481: LD_INT 22
12483: PUSH
12484: LD_INT 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 25
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 25
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 25
12536: PUSH
12537: LD_INT 4
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: PPUSH
12556: CALL_OW 69
12560: PUSH
12561: LD_EXP 1
12565: PUSH
12566: LD_EXP 5
12570: PUSH
12571: LD_EXP 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: DIFF
12581: PPUSH
12582: LD_STRING D10-Sol1-1
12584: PPUSH
12585: LD_STRING D10-FSol1-1
12587: PPUSH
12588: CALL 5256 0 3
// Say ( Frank , D10-Frank-2 ) ;
12592: LD_EXP 5
12596: PPUSH
12597: LD_STRING D10-Frank-2
12599: PPUSH
12600: CALL_OW 88
// if IsOK ( Lisa ) then
12604: LD_EXP 2
12608: PPUSH
12609: CALL_OW 302
12613: IFFALSE 12629
// begin Say ( Lisa , D10-Lisa-2 ) ;
12615: LD_EXP 2
12619: PPUSH
12620: LD_STRING D10-Lisa-2
12622: PPUSH
12623: CALL_OW 88
// end else
12627: GO 12734
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank ] , D10-Sol1-2 , D10-FSol1-2 ) ;
12629: LD_INT 22
12631: PUSH
12632: LD_INT 1
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 2
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 25
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 25
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 25
12684: PUSH
12685: LD_INT 4
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: PPUSH
12704: CALL_OW 69
12708: PUSH
12709: LD_EXP 1
12713: PUSH
12714: LD_EXP 5
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: DIFF
12723: PPUSH
12724: LD_STRING D10-Sol1-2
12726: PPUSH
12727: LD_STRING D10-FSol1-2
12729: PPUSH
12730: CALL 5256 0 3
// end ; DialogueOff ;
12734: CALL_OW 7
// end ;
12738: END
// every 10 10$30 do
12739: GO 12741
12741: DISABLE
// begin HarrisonSupport ;
12742: CALL 2184 0 0
// CenterNowOnUnits ( IsInUnit ( HarrSupp1 ) ) ;
12746: LD_EXP 17
12750: PPUSH
12751: CALL_OW 310
12755: PPUSH
12756: CALL_OW 87
// Say ( HarrSupp1 , DEng-Eng1-1 ) ;
12760: LD_EXP 17
12764: PPUSH
12765: LD_STRING DEng-Eng1-1
12767: PPUSH
12768: CALL_OW 88
// wait ( 1 1$0 ) ;
12772: LD_INT 2100
12774: PPUSH
12775: CALL_OW 67
// DialogueOn ;
12779: CALL_OW 6
// SayRadio ( Harisson , DRem-Har-1 ) ;
12783: LD_EXP 14
12787: PPUSH
12788: LD_STRING DRem-Har-1
12790: PPUSH
12791: CALL_OW 94
// if contactWithRussian = 1 then
12795: LD_EXP 22
12799: PUSH
12800: LD_INT 1
12802: EQUAL
12803: IFFALSE 12819
// begin Say ( JMM , DRem-JMM-1 ) ;
12805: LD_EXP 1
12809: PPUSH
12810: LD_STRING DRem-JMM-1
12812: PPUSH
12813: CALL_OW 88
// end else
12817: GO 12831
// begin Say ( JMM , DRem-JMM-1a ) ;
12819: LD_EXP 1
12823: PPUSH
12824: LD_STRING DRem-JMM-1a
12826: PPUSH
12827: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-2 ) ;
12831: LD_EXP 14
12835: PPUSH
12836: LD_STRING DRem-Har-2
12838: PPUSH
12839: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12843: LD_STRING DenisInDelta
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 30
12853: PUSH
12854: LD_INT 1
12856: EQUAL
12857: IFFALSE 12873
// begin Say ( JMM , DRem-JMM-2 ) ;
12859: LD_EXP 1
12863: PPUSH
12864: LD_STRING DRem-JMM-2
12866: PPUSH
12867: CALL_OW 88
// end else
12871: GO 12885
// begin Say ( JMM , DRem-JMM-2a ) ;
12873: LD_EXP 1
12877: PPUSH
12878: LD_STRING DRem-JMM-2a
12880: PPUSH
12881: CALL_OW 88
// end ; SayRadio ( Harisson , DRem-Har-3 ) ;
12885: LD_EXP 14
12889: PPUSH
12890: LD_STRING DRem-Har-3
12892: PPUSH
12893: CALL_OW 94
// Say ( JMM , DRem-JMM-3 ) ;
12897: LD_EXP 1
12901: PPUSH
12902: LD_STRING DRem-JMM-3
12904: PPUSH
12905: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-4 ) ;
12909: LD_EXP 14
12913: PPUSH
12914: LD_STRING DRem-Har-4
12916: PPUSH
12917: CALL_OW 94
// if LoadVariable ( DenisInDelta , 0 ) = 1 then
12921: LD_STRING DenisInDelta
12923: PPUSH
12924: LD_INT 0
12926: PPUSH
12927: CALL_OW 30
12931: PUSH
12932: LD_INT 1
12934: EQUAL
12935: IFFALSE 12963
// begin Say ( JMM , DRem-JMM-4 ) ;
12937: LD_EXP 1
12941: PPUSH
12942: LD_STRING DRem-JMM-4
12944: PPUSH
12945: CALL_OW 88
// SayRadio ( Harisson , DRem-Har-5 ) ;
12949: LD_EXP 14
12953: PPUSH
12954: LD_STRING DRem-Har-5
12956: PPUSH
12957: CALL_OW 94
// end else
12961: GO 12996
// begin SetRestrict ( 36 , 1 , true ) ;
12963: LD_INT 36
12965: PPUSH
12966: LD_INT 1
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
12976: LD_INT 15
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
12989: LD_STRING MR
12991: PPUSH
12992: CALL_OW 337
// end ; DialogueOff ;
12996: CALL_OW 7
// end ;
13000: END
// every 15 15$0 trigger LoadVariable ( DenisInDelta , 0 ) = 1 do
13001: LD_STRING DenisInDelta
13003: PPUSH
13004: LD_INT 0
13006: PPUSH
13007: CALL_OW 30
13011: PUSH
13012: LD_INT 1
13014: EQUAL
13015: IFFALSE 13146
13017: GO 13019
13019: DISABLE
// begin PrepareDenis ;
13020: CALL 2105 0 0
// CenterNowOnUnits ( Denis ) ;
13024: LD_EXP 9
13028: PPUSH
13029: CALL_OW 87
// DialogueOn ;
13033: CALL_OW 6
// Say ( Denis , DDen-Den-1 ) ;
13037: LD_EXP 9
13041: PPUSH
13042: LD_STRING DDen-Den-1
13044: PPUSH
13045: CALL_OW 88
// Say ( JMM , DDen-JMM-1 ) ;
13049: LD_EXP 1
13053: PPUSH
13054: LD_STRING DDen-JMM-1
13056: PPUSH
13057: CALL_OW 88
// Say ( Denis , DDen-Den-2 ) ;
13061: LD_EXP 9
13065: PPUSH
13066: LD_STRING DDen-Den-2
13068: PPUSH
13069: CALL_OW 88
// Say ( JMM , DDen-JMM-2 ) ;
13073: LD_EXP 1
13077: PPUSH
13078: LD_STRING DDen-JMM-2
13080: PPUSH
13081: CALL_OW 88
// Say ( Denis , DDen-Den-3 ) ;
13085: LD_EXP 9
13089: PPUSH
13090: LD_STRING DDen-Den-3
13092: PPUSH
13093: CALL_OW 88
// Say ( JMM , DDen-JMM-3 ) ;
13097: LD_EXP 1
13101: PPUSH
13102: LD_STRING DDen-JMM-3
13104: PPUSH
13105: CALL_OW 88
// DialogueOff ;
13109: CALL_OW 7
// SetRestrict ( 36 , 1 , true ) ;
13113: LD_INT 36
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 324
// SetTech ( 15 , 1 , state_enabled ) ;
13126: LD_INT 15
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 322
// ChangeMissionObjectives ( MR ) ;
13139: LD_STRING MR
13141: PPUSH
13142: CALL_OW 337
// end ;
13146: END
// every 0 0$6 trigger CheckOptoLab and IsOk ( Denis ) do
13147: CALL 13192 0 0
13151: PUSH
13152: LD_EXP 9
13156: PPUSH
13157: CALL_OW 302
13161: AND
13162: IFFALSE 13191
13164: GO 13166
13166: DISABLE
// begin Say ( Denis , DR1-Den-1 ) ;
13167: LD_EXP 9
13171: PPUSH
13172: LD_STRING DR1-Den-1
13174: PPUSH
13175: CALL_OW 88
// Say ( JMM , DR1-JMM-1 ) ;
13179: LD_EXP 1
13183: PPUSH
13184: LD_STRING DR1-JMM-1
13186: PPUSH
13187: CALL_OW 88
// end ;
13191: END
// function CheckOptoLab ; var i ; begin
13192: LD_INT 0
13194: PPUSH
13195: PPUSH
// result = false ;
13196: LD_ADDR_VAR 0 1
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 1
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 30
13224: PUSH
13225: LD_INT 7
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 30
13234: PUSH
13235: LD_INT 8
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PPUSH
13251: CALL_OW 69
13255: PUSH
13256: FOR_IN
13257: IFFALSE 13309
// begin if ( GetLabKind ( i , 1 ) = b_lab_opto ) or ( GetLabKind ( i , 2 ) = b_lab_opto ) then
13259: LD_VAR 0 2
13263: PPUSH
13264: LD_INT 1
13266: PPUSH
13267: CALL_OW 268
13271: PUSH
13272: LD_INT 15
13274: EQUAL
13275: PUSH
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_INT 2
13283: PPUSH
13284: CALL_OW 268
13288: PUSH
13289: LD_INT 15
13291: EQUAL
13292: OR
13293: IFFALSE 13305
// begin result = true ;
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_INT 1
13302: ST_TO_ADDR
// break ;
13303: GO 13309
// end ; break ;
13305: GO 13309
// end ;
13307: GO 13256
13309: POP
13310: POP
// end ;
13311: LD_VAR 0 1
13315: RET
// every 0 0$1 trigger GetTech ( 15 , 1 ) = state_researched and IsOK ( Denis ) do
13316: LD_INT 15
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 321
13326: PUSH
13327: LD_INT 2
13329: EQUAL
13330: PUSH
13331: LD_EXP 9
13335: PPUSH
13336: CALL_OW 302
13340: AND
13341: IFFALSE 13573
13343: GO 13345
13345: DISABLE
// begin DialogueOn ;
13346: CALL_OW 6
// if IsOK ( Denis ) then
13350: LD_EXP 9
13354: PPUSH
13355: CALL_OW 302
13359: IFFALSE 13375
// begin Say ( Denis , DR2-Den-1 ) ;
13361: LD_EXP 9
13365: PPUSH
13366: LD_STRING DR2-Den-1
13368: PPUSH
13369: CALL_OW 88
// end else
13373: GO 13434
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) diff [ JMM ] , DR2-Sci1-1 , DR2-FSci1-1 ) ;
13375: LD_INT 22
13377: PUSH
13378: LD_INT 1
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 21
13387: PUSH
13388: LD_INT 1
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: PUSH
13415: LD_EXP 1
13419: PUSH
13420: EMPTY
13421: LIST
13422: DIFF
13423: PPUSH
13424: LD_STRING DR2-Sci1-1
13426: PPUSH
13427: LD_STRING DR2-FSci1-1
13429: PPUSH
13430: CALL 5256 0 3
// end ; Say ( JMM , DR2-JMM-1 ) ;
13434: LD_EXP 1
13438: PPUSH
13439: LD_STRING DR2-JMM-1
13441: PPUSH
13442: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Denis , Gladstone ] , DR2-Sol1-1 , DR2-Sol1-11 ) ;
13446: LD_INT 22
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: LD_INT 25
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 25
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 25
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: PUSH
13526: LD_EXP 1
13530: PUSH
13531: LD_EXP 9
13535: PUSH
13536: LD_EXP 8
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: DIFF
13546: PPUSH
13547: LD_STRING DR2-Sol1-1
13549: PPUSH
13550: LD_STRING DR2-Sol1-11
13552: PPUSH
13553: CALL 5256 0 3
// Say ( JMM , DR2-JMM-2 ) ;
13557: LD_EXP 1
13561: PPUSH
13562: LD_STRING DR2-JMM-2
13564: PPUSH
13565: CALL_OW 88
// DialogueOff ;
13569: CALL_OW 7
// end ;
13573: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and firstTower = 0 do
13574: LD_INT 22
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 30
13586: PUSH
13587: LD_INT 36
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 69
13602: PUSH
13603: LD_INT 0
13605: EQUAL
13606: PUSH
13607: LD_INT 22
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 33
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: PPUSH
13642: CALL_OW 69
13646: PUSH
13647: LD_INT 0
13649: GREATER
13650: AND
13651: PUSH
13652: LD_EXP 23
13656: PUSH
13657: LD_INT 0
13659: EQUAL
13660: AND
13661: IFFALSE 13787
13663: GO 13665
13665: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] ] ) diff [ JMM , Brown , Donaldson , Denis , Joan , Bobby , Cyrus , Lisa , Frank , Gladstone ] , D3a-Mech1-1 , D3a-Mech1-1 ) ;
13666: LD_INT 22
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 25
13688: PUSH
13689: LD_INT 3
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: PPUSH
13701: CALL_OW 69
13705: PUSH
13706: LD_EXP 1
13710: PUSH
13711: LD_EXP 6
13715: PUSH
13716: LD_EXP 7
13720: PUSH
13721: LD_EXP 9
13725: PUSH
13726: LD_EXP 15
13730: PUSH
13731: LD_EXP 3
13735: PUSH
13736: LD_EXP 4
13740: PUSH
13741: LD_EXP 2
13745: PUSH
13746: LD_EXP 5
13750: PUSH
13751: LD_EXP 8
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: DIFF
13768: PPUSH
13769: LD_STRING D3a-Mech1-1
13771: PPUSH
13772: LD_STRING D3a-Mech1-1
13774: PPUSH
13775: CALL 5256 0 3
// firstTower = 2 ;
13779: LD_ADDR_EXP 23
13783: PUSH
13784: LD_INT 2
13786: ST_TO_ADDR
// end ;
13787: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do var i ;
13788: LD_INT 22
13790: PUSH
13791: LD_INT 3
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 21
13800: PUSH
13801: LD_INT 3
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 69
13816: PUSH
13817: LD_INT 0
13819: EQUAL
13820: IFFALSE 13935
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
13828: LD_ADDR_VAR 0 1
13832: PUSH
13833: LD_INT 22
13835: PUSH
13836: LD_INT 1
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 21
13845: PUSH
13846: LD_INT 1
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: LD_INT 25
13858: PUSH
13859: LD_INT 1
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 25
13868: PUSH
13869: LD_INT 2
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 25
13878: PUSH
13879: LD_INT 3
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 25
13888: PUSH
13889: LD_INT 4
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: PPUSH
13908: CALL_OW 69
13912: PUSH
13913: FOR_IN
13914: IFFALSE 13933
// AddExperience ( i , 1 , 10000 ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_INT 10000
13926: PPUSH
13927: CALL_OW 492
13931: GO 13913
13933: POP
13934: POP
// end ;
13935: PPOPN 1
13937: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) > 0 and CheckMehInside do var i , j , tmpControlTowers , tmpRemoteVehs , tmpMechanicInside ;
13938: LD_INT 22
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 30
13950: PUSH
13951: LD_INT 36
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: PUSH
13967: LD_INT 0
13969: GREATER
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 21
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 33
13993: PUSH
13994: LD_INT 2
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: PUSH
14011: LD_INT 0
14013: GREATER
14014: AND
14015: PUSH
14016: CALL 14598 0 0
14020: AND
14021: IFFALSE 14595
14023: GO 14025
14025: DISABLE
14026: LD_INT 0
14028: PPUSH
14029: PPUSH
14030: PPUSH
14031: PPUSH
14032: PPUSH
// begin tmpControlTowers = FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) ;
14033: LD_ADDR_VAR 0 3
14037: PUSH
14038: LD_INT 22
14040: PUSH
14041: LD_INT 1
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 30
14050: PUSH
14051: LD_INT 36
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 69
14066: ST_TO_ADDR
// tmpRemoteVehs = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) ;
14067: LD_ADDR_VAR 0 4
14071: PUSH
14072: LD_INT 22
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 21
14084: PUSH
14085: LD_INT 2
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 33
14094: PUSH
14095: LD_INT 2
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 69
14111: ST_TO_ADDR
// tmpMechanicInside = [ ] ;
14112: LD_ADDR_VAR 0 5
14116: PUSH
14117: EMPTY
14118: ST_TO_ADDR
// for i in tmpControlTowers do
14119: LD_ADDR_VAR 0 1
14123: PUSH
14124: LD_VAR 0 3
14128: PUSH
14129: FOR_IN
14130: IFFALSE 14593
// begin if IsInUnit ( JMM ) = i and GetClass ( JMM ) = 3 then
14132: LD_EXP 1
14136: PPUSH
14137: CALL_OW 310
14141: PUSH
14142: LD_VAR 0 1
14146: EQUAL
14147: PUSH
14148: LD_EXP 1
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 3
14160: EQUAL
14161: AND
14162: IFFALSE 14292
// begin InGameOn ;
14164: CALL_OW 8
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14168: LD_VAR 0 4
14172: PUSH
14173: LD_INT 1
14175: ARRAY
14176: PPUSH
14177: CALL_OW 87
// Say ( JMM , D4a-JMM-1 ) ;
14181: LD_EXP 1
14185: PPUSH
14186: LD_STRING D4a-JMM-1
14188: PPUSH
14189: CALL_OW 88
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , JMM ) ;
14193: LD_VAR 0 4
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: PPUSH
14202: LD_EXP 1
14206: PPUSH
14207: CALL_OW 53
// wait ( 0 0$1 ) ;
14211: LD_INT 35
14213: PPUSH
14214: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14218: LD_VAR 0 4
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PPUSH
14227: LD_VAR 0 4
14231: PUSH
14232: LD_INT 1
14234: ARRAY
14235: PPUSH
14236: CALL_OW 250
14240: PUSH
14241: LD_INT 3
14243: PLUS
14244: PPUSH
14245: LD_VAR 0 4
14249: PUSH
14250: LD_INT 1
14252: ARRAY
14253: PPUSH
14254: CALL_OW 251
14258: PUSH
14259: LD_INT 2
14261: MINUS
14262: PPUSH
14263: CALL_OW 111
// wait ( 0 0$2 ) ;
14267: LD_INT 70
14269: PPUSH
14270: CALL_OW 67
// Say ( JMM , D4b-JMM-1 ) ;
14274: LD_EXP 1
14278: PPUSH
14279: LD_STRING D4b-JMM-1
14281: PPUSH
14282: CALL_OW 88
// InGameOff ;
14286: CALL_OW 9
// end else
14290: GO 14591
// begin InGameOn ;
14292: CALL_OW 8
// for j in UnitsInside ( i ) do
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_VAR 0 1
14305: PPUSH
14306: CALL_OW 313
14310: PUSH
14311: FOR_IN
14312: IFFALSE 14347
// if GetClass ( j ) = 3 then
14314: LD_VAR 0 2
14318: PPUSH
14319: CALL_OW 257
14323: PUSH
14324: LD_INT 3
14326: EQUAL
14327: IFFALSE 14345
// tmpMechanicInside = tmpMechanicInside ^ j ;
14329: LD_ADDR_VAR 0 5
14333: PUSH
14334: LD_VAR 0 5
14338: PUSH
14339: LD_VAR 0 2
14343: ADD
14344: ST_TO_ADDR
14345: GO 14311
14347: POP
14348: POP
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14349: LD_VAR 0 5
14353: PUSH
14354: LD_INT 1
14356: ARRAY
14357: PPUSH
14358: CALL_OW 258
14362: PUSH
14363: LD_INT 1
14365: EQUAL
14366: IFFALSE 14384
// Say ( tmpMechanicInside [ 1 ] , D4a-Mech1-1 ) ;
14368: LD_VAR 0 5
14372: PUSH
14373: LD_INT 1
14375: ARRAY
14376: PPUSH
14377: LD_STRING D4a-Mech1-1
14379: PPUSH
14380: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14384: LD_VAR 0 5
14388: PUSH
14389: LD_INT 1
14391: ARRAY
14392: PPUSH
14393: CALL_OW 258
14397: PUSH
14398: LD_INT 2
14400: EQUAL
14401: IFFALSE 14419
// Say ( tmpMechanicInside [ 1 ] , D4a-FMech1-1 ) ;
14403: LD_VAR 0 5
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: LD_STRING D4a-FMech1-1
14414: PPUSH
14415: CALL_OW 88
// CenterNowOnUnits ( tmpRemoteVehs [ 1 ] ) ;
14419: LD_VAR 0 4
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PPUSH
14428: CALL_OW 87
// LinkVehicleToHuman ( tmpRemoteVehs [ 1 ] , tmpMechanicInside [ 1 ] ) ;
14432: LD_VAR 0 4
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: PPUSH
14441: LD_VAR 0 5
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: CALL_OW 53
// wait ( 0 0$1 ) ;
14454: LD_INT 35
14456: PPUSH
14457: CALL_OW 67
// ComMoveXY ( tmpRemoteVehs [ 1 ] , GetX ( tmpRemoteVehs [ 1 ] ) + 3 , GetY ( tmpRemoteVehs [ 1 ] ) - 2 ) ;
14461: LD_VAR 0 4
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 4
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PPUSH
14479: CALL_OW 250
14483: PUSH
14484: LD_INT 3
14486: PLUS
14487: PPUSH
14488: LD_VAR 0 4
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 2
14504: MINUS
14505: PPUSH
14506: CALL_OW 111
// wait ( 0 0$2 ) ;
14510: LD_INT 70
14512: PPUSH
14513: CALL_OW 67
// if GetSex ( tmpMechanicInside [ 1 ] ) = 1 then
14517: LD_VAR 0 5
14521: PUSH
14522: LD_INT 1
14524: ARRAY
14525: PPUSH
14526: CALL_OW 258
14530: PUSH
14531: LD_INT 1
14533: EQUAL
14534: IFFALSE 14552
// Say ( tmpMechanicInside [ 1 ] , D4b-Mech1-1 ) ;
14536: LD_VAR 0 5
14540: PUSH
14541: LD_INT 1
14543: ARRAY
14544: PPUSH
14545: LD_STRING D4b-Mech1-1
14547: PPUSH
14548: CALL_OW 88
// if GetSex ( tmpMechanicInside [ 1 ] ) = 2 then
14552: LD_VAR 0 5
14556: PUSH
14557: LD_INT 1
14559: ARRAY
14560: PPUSH
14561: CALL_OW 258
14565: PUSH
14566: LD_INT 2
14568: EQUAL
14569: IFFALSE 14587
// Say ( tmpMechanicInside [ 1 ] , D4b-FMech1-1 ) ;
14571: LD_VAR 0 5
14575: PUSH
14576: LD_INT 1
14578: ARRAY
14579: PPUSH
14580: LD_STRING D4b-FMech1-1
14582: PPUSH
14583: CALL_OW 88
// InGameOff ;
14587: CALL_OW 9
// end ; end ;
14591: GO 14129
14593: POP
14594: POP
// end ;
14595: PPOPN 5
14597: END
// function CheckMehInside ; var i , j ; begin
14598: LD_INT 0
14600: PPUSH
14601: PPUSH
14602: PPUSH
// result = false ;
14603: LD_ADDR_VAR 0 1
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , 36 ] ] ) do
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 30
14628: PUSH
14629: LD_INT 36
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: PUSH
14645: FOR_IN
14646: IFFALSE 14697
// begin for j in UnitsInside ( i ) do
14648: LD_ADDR_VAR 0 3
14652: PUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: CALL_OW 313
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14693
// begin if GetClass ( j ) = 3 then
14666: LD_VAR 0 3
14670: PPUSH
14671: CALL_OW 257
14675: PUSH
14676: LD_INT 3
14678: EQUAL
14679: IFFALSE 14691
// begin result = true ;
14681: LD_ADDR_VAR 0 1
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// break ;
14689: GO 14693
// end ; end ;
14691: GO 14663
14693: POP
14694: POP
// end ;
14695: GO 14645
14697: POP
14698: POP
// end ;
14699: LD_VAR 0 1
14703: RET
// every 25 25$0 do
14704: GO 14706
14706: DISABLE
// begin PrepareKurt ;
14707: CALL 18159 0 0
// end ;
14711: END
// every 35 35$0 do
14712: GO 14714
14714: DISABLE
// begin PrepareJoan ;
14715: CALL 2656 0 0
// wait ( 1 1$0 ) ;
14719: LD_INT 2100
14721: PPUSH
14722: CALL_OW 67
// if IsOK ( Lisa ) then
14726: LD_EXP 2
14730: PPUSH
14731: CALL_OW 302
14735: IFFALSE 14865
// begin DialogueOn ;
14737: CALL_OW 6
// Say ( Lisa , D7-Lisa-1 ) ;
14741: LD_EXP 2
14745: PPUSH
14746: LD_STRING D7-Lisa-1
14748: PPUSH
14749: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14753: LD_EXP 1
14757: PPUSH
14758: LD_STRING D7-JMM-1
14760: PPUSH
14761: CALL_OW 88
// Say ( Lisa , D7-Lisa-2 ) ;
14765: LD_EXP 2
14769: PPUSH
14770: LD_STRING D7-Lisa-2
14772: PPUSH
14773: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
14777: LD_EXP 1
14781: PPUSH
14782: LD_STRING D7-JMM-2
14784: PPUSH
14785: CALL_OW 88
// Say ( Lisa , D7-Lisa-3 ) ;
14789: LD_EXP 2
14793: PPUSH
14794: LD_STRING D7-Lisa-3
14796: PPUSH
14797: CALL_OW 88
// Say ( JMM , D7-JMM-3 ) ;
14801: LD_EXP 1
14805: PPUSH
14806: LD_STRING D7-JMM-3
14808: PPUSH
14809: CALL_OW 88
// Say ( Lisa , D7-Lisa-4 ) ;
14813: LD_EXP 2
14817: PPUSH
14818: LD_STRING D7-Lisa-4
14820: PPUSH
14821: CALL_OW 88
// Say ( JMM , D7-JMM-4 ) ;
14825: LD_EXP 1
14829: PPUSH
14830: LD_STRING D7-JMM-4
14832: PPUSH
14833: CALL_OW 88
// Say ( JMM , D7-JMM-4a ) ;
14837: LD_EXP 1
14841: PPUSH
14842: LD_STRING D7-JMM-4a
14844: PPUSH
14845: CALL_OW 88
// Say ( Lisa , D7-Lisa-5 ) ;
14849: LD_EXP 2
14853: PPUSH
14854: LD_STRING D7-Lisa-5
14856: PPUSH
14857: CALL_OW 88
// DialogueOff ;
14861: CALL_OW 7
// end ; end ;
14865: END
// every 0 0$1 do var i , others ;
14866: GO 14868
14868: DISABLE
14869: LD_INT 0
14871: PPUSH
14872: PPUSH
// begin others = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ tempCharles ] ;
14873: LD_ADDR_VAR 0 2
14877: PUSH
14878: LD_INT 22
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 25
14903: PUSH
14904: LD_INT 1
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 25
14913: PUSH
14914: LD_INT 2
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 25
14923: PUSH
14924: LD_INT 3
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 4
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: LD_EXP 13
14962: PUSH
14963: EMPTY
14964: LIST
14965: DIFF
14966: ST_TO_ADDR
// for i in others do
14967: LD_ADDR_VAR 0 1
14971: PUSH
14972: LD_VAR 0 2
14976: PUSH
14977: FOR_IN
14978: IFFALSE 15015
// begin if GetDistUnits ( tempCharles , i ) < 6 then
14980: LD_EXP 13
14984: PPUSH
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 296
14994: PUSH
14995: LD_INT 6
14997: LESS
14998: IFFALSE 15013
// begin disable ;
15000: DISABLE
// Say ( tempCharles , D5-Sol1-1 ) ;
15001: LD_EXP 13
15005: PPUSH
15006: LD_STRING D5-Sol1-1
15008: PPUSH
15009: CALL_OW 88
// end ; end ;
15013: GO 14977
15015: POP
15016: POP
// end ;
15017: PPOPN 2
15019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= 2 do
15020: LD_INT 22
15022: PUSH
15023: LD_INT 1
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 33
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: PUSH
15049: LD_INT 2
15051: GREATEREQUAL
15052: IFFALSE 15072
15054: GO 15056
15056: DISABLE
// begin ChangeMissionObjectives ( MRa ) ;
15057: LD_STRING MRa
15059: PPUSH
15060: CALL_OW 337
// remoteVehiclesBuild = 1 ;
15064: LD_ADDR_EXP 28
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// end ;
15072: END
// every 4 4$0 do
15073: GO 15075
15075: DISABLE
// PrepareRandoms ( 1 ) ;
15076: LD_INT 1
15078: PPUSH
15079: CALL 3692 0 1
15083: END
// every 10 10$0 do
15084: GO 15086
15086: DISABLE
// PrepareRandoms ( 2 ) ;
15087: LD_INT 2
15089: PPUSH
15090: CALL 3692 0 1
15094: END
// every 28 28$0 do
15095: GO 15097
15097: DISABLE
// PrepareRandoms ( 4 ) ;
15098: LD_INT 4
15100: PPUSH
15101: CALL 3692 0 1
15105: END
// every 32 32$0 do
15106: GO 15108
15108: DISABLE
// PrepareRandoms ( 5 ) ;
15109: LD_INT 5
15111: PPUSH
15112: CALL 3692 0 1
15116: END
// every 35 35$30 do
15117: GO 15119
15119: DISABLE
// PrepareRandoms ( 6 ) ;
15120: LD_INT 6
15122: PPUSH
15123: CALL 3692 0 1
15127: END
// every 37 37$20 do
15128: GO 15130
15130: DISABLE
// PrepareRandoms ( 7 ) ;
15131: LD_INT 7
15133: PPUSH
15134: CALL 3692 0 1
15138: END
// every 5 5$20 do
15139: GO 15141
15141: DISABLE
// begin DialogueOn ;
15142: CALL_OW 6
// SayRadio ( DeltaDoctor , D12a-Sci-1 ) ;
15146: LD_EXP 10
15150: PPUSH
15151: LD_STRING D12a-Sci-1
15153: PPUSH
15154: CALL_OW 94
// Say ( JMM , D12a-JMM-1 ) ;
15158: LD_EXP 1
15162: PPUSH
15163: LD_STRING D12a-JMM-1
15165: PPUSH
15166: CALL_OW 88
// DialogueOff ;
15170: CALL_OW 7
// cratesStatus = 1 ;
15174: LD_ADDR_EXP 38
15178: PUSH
15179: LD_INT 1
15181: ST_TO_ADDR
// end ;
15182: END
// every 13 13$0 do
15183: GO 15185
15185: DISABLE
// begin DialogueOn ;
15186: CALL_OW 6
// SayRadio ( DeltaDoctor , D12b-Sci-1 ) ;
15190: LD_EXP 10
15194: PPUSH
15195: LD_STRING D12b-Sci-1
15197: PPUSH
15198: CALL_OW 94
// DialogueOff ;
15202: CALL_OW 7
// cratesStatus = 2 ;
15206: LD_ADDR_EXP 38
15210: PUSH
15211: LD_INT 2
15213: ST_TO_ADDR
// end ;
15214: END
// every 32 32$0 do
15215: GO 15217
15217: DISABLE
// begin DialogueOn ;
15218: CALL_OW 6
// SayRadio ( DeltaDoctor , D12c-Sci-1 ) ;
15222: LD_EXP 10
15226: PPUSH
15227: LD_STRING D12c-Sci-1
15229: PPUSH
15230: CALL_OW 94
// DialogueOff ;
15234: CALL_OW 7
// wait ( 3 3$0 ) ;
15238: LD_INT 6300
15240: PPUSH
15241: CALL_OW 67
// DialogueOn ;
15245: CALL_OW 6
// SayRadio ( DeltaDoctor , D12d-Sci-1 ) ;
15249: LD_EXP 10
15253: PPUSH
15254: LD_STRING D12d-Sci-1
15256: PPUSH
15257: CALL_OW 94
// DialogueOff ;
15261: CALL_OW 7
// cratesStatus = 1 ;
15265: LD_ADDR_EXP 38
15269: PUSH
15270: LD_INT 1
15272: ST_TO_ADDR
// end ;
15273: END
// every 42 42$0 do
15274: GO 15276
15276: DISABLE
// begin DialogueOn ;
15277: CALL_OW 6
// SayRadio ( DeltaDoctor , D12e-Sci-1 ) ;
15281: LD_EXP 10
15285: PPUSH
15286: LD_STRING D12e-Sci-1
15288: PPUSH
15289: CALL_OW 94
// Say ( JMM , D12e-JMM-1 ) ;
15293: LD_EXP 1
15297: PPUSH
15298: LD_STRING D12e-JMM-1
15300: PPUSH
15301: CALL_OW 88
// DialogueOff ;
15305: CALL_OW 7
// cratesStatus = 2 ;
15309: LD_ADDR_EXP 38
15313: PUSH
15314: LD_INT 2
15316: ST_TO_ADDR
// end ;
15317: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) > 0 do var i ;
15318: LD_INT 22
15320: PUSH
15321: LD_INT 6
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 21
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 34
15340: PUSH
15341: LD_INT 51
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: PUSH
15358: LD_INT 0
15360: GREATER
15361: IFFALSE 15444
15363: GO 15365
15365: DISABLE
15366: LD_INT 0
15368: PPUSH
// begin enable ;
15369: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
15370: LD_ADDR_VAR 0 1
15374: PUSH
15375: LD_INT 22
15377: PUSH
15378: LD_INT 6
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 2
15387: PUSH
15388: LD_INT 21
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 21
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PPUSH
15417: CALL_OW 69
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15442
// ComAgressiveMove ( i , 138 , 168 ) ;
15425: LD_VAR 0 1
15429: PPUSH
15430: LD_INT 138
15432: PPUSH
15433: LD_INT 168
15435: PPUSH
15436: CALL_OW 114
15440: GO 15422
15442: POP
15443: POP
// end ;
15444: PPOPN 1
15446: END
// every 0 0$1 do var i ;
15447: GO 15449
15449: DISABLE
15450: LD_INT 0
15452: PPUSH
// begin enable ;
15453: ENABLE
// for i in FilterUnitsInArea ( ConvoyEscape , [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ] ) do
15454: LD_ADDR_VAR 0 1
15458: PUSH
15459: LD_INT 5
15461: PPUSH
15462: LD_INT 2
15464: PUSH
15465: LD_INT 22
15467: PUSH
15468: LD_INT 3
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 6
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: PPUSH
15493: CALL_OW 70
15497: PUSH
15498: FOR_IN
15499: IFFALSE 15563
// begin if FilterUnitsInArea ( ConvoyEscape , [ [ f_side , 6 ] , [ f_weapon , 51 ] ] ) > 0 then
15501: LD_INT 5
15503: PPUSH
15504: LD_INT 22
15506: PUSH
15507: LD_INT 6
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 34
15516: PUSH
15517: LD_INT 51
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PPUSH
15528: CALL_OW 70
15532: PUSH
15533: LD_INT 0
15535: GREATER
15536: IFFALSE 15552
// sendedConvoys = sendedConvoys + 1 ;
15538: LD_ADDR_EXP 39
15542: PUSH
15543: LD_EXP 39
15547: PUSH
15548: LD_INT 1
15550: PLUS
15551: ST_TO_ADDR
// RemoveUnit ( i ) ;
15552: LD_VAR 0 1
15556: PPUSH
15557: CALL_OW 64
// end ;
15561: GO 15498
15563: POP
15564: POP
// end ; end_of_file
15565: PPOPN 1
15567: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 3 then
15568: LD_VAR 0 1
15572: PUSH
15573: LD_INT 1
15575: EQUAL
15576: PUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 3
15584: EQUAL
15585: AND
15586: IFFALSE 15596
// contactWithRussian = 1 ;
15588: LD_ADDR_EXP 22
15592: PUSH
15593: LD_INT 1
15595: ST_TO_ADDR
// end ;
15596: PPOPN 2
15598: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = 36 and GetSide ( building ) = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] ] ) = 0 and firstTower = 0 then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 266
15608: PUSH
15609: LD_INT 36
15611: EQUAL
15612: PUSH
15613: LD_VAR 0 1
15617: PPUSH
15618: CALL_OW 255
15622: PUSH
15623: LD_INT 1
15625: EQUAL
15626: AND
15627: PUSH
15628: LD_INT 22
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 33
15650: PUSH
15651: LD_INT 2
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 69
15667: PUSH
15668: LD_INT 0
15670: EQUAL
15671: AND
15672: PUSH
15673: LD_EXP 23
15677: PUSH
15678: LD_INT 0
15680: EQUAL
15681: AND
15682: IFFALSE 15762
// begin firstTower = 1 ;
15684: LD_ADDR_EXP 23
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D3b-Mech1-1 , D3b-Mech1-1 ) ;
15692: LD_INT 22
15694: PUSH
15695: LD_INT 1
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 21
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 25
15714: PUSH
15715: LD_INT 3
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 26
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 69
15742: PUSH
15743: LD_EXP 1
15747: PUSH
15748: EMPTY
15749: LIST
15750: DIFF
15751: PPUSH
15752: LD_STRING D3b-Mech1-1
15754: PPUSH
15755: LD_STRING D3b-Mech1-1
15757: PPUSH
15758: CALL 5256 0 3
// end ; if GetBType ( building ) = 0 and GetSide ( building ) = 1 then
15762: LD_VAR 0 1
15766: PPUSH
15767: CALL_OW 266
15771: PUSH
15772: LD_INT 0
15774: EQUAL
15775: PUSH
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL_OW 255
15785: PUSH
15786: LD_INT 1
15788: EQUAL
15789: AND
15790: IFFALSE 15804
// SetBName ( building , theta ) ;
15792: LD_VAR 0 1
15796: PPUSH
15797: LD_STRING theta
15799: PPUSH
15800: CALL_OW 500
// if GetSide ( building ) = 3 then
15804: LD_VAR 0 1
15808: PPUSH
15809: CALL_OW 255
15813: PUSH
15814: LD_INT 3
15816: EQUAL
15817: IFFALSE 15891
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15819: LD_ADDR_EXP 31
15823: PUSH
15824: LD_EXP 31
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 3
15836: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15837: LD_ADDR_EXP 31
15841: PUSH
15842: LD_EXP 31
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 3
15854: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15855: LD_ADDR_EXP 31
15859: PUSH
15860: LD_EXP 31
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: CALL_OW 3
15872: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15873: LD_ADDR_EXP 31
15877: PUSH
15878: LD_EXP 31
15882: PPUSH
15883: LD_INT 1
15885: PPUSH
15886: CALL_OW 3
15890: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 and [ GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 ] then
15891: LD_VAR 0 1
15895: PPUSH
15896: CALL_OW 255
15900: PUSH
15901: LD_INT 3
15903: EQUAL
15904: PUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 266
15914: PUSH
15915: LD_INT 0
15917: EQUAL
15918: PUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 266
15928: PUSH
15929: LD_INT 2
15931: EQUAL
15932: OR
15933: PUSH
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 266
15943: PUSH
15944: LD_INT 4
15946: EQUAL
15947: OR
15948: PUSH
15949: EMPTY
15950: LIST
15951: AND
15952: IFFALSE 15963
// ComUpgrade ( building ) ;
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL_OW 146
// if GetSide ( building ) = 3 and GetBType ( building ) = b_bunker then
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 255
15972: PUSH
15973: LD_INT 3
15975: EQUAL
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 266
15986: PUSH
15987: LD_INT 32
15989: EQUAL
15990: AND
15991: IFFALSE 16032
// begin AddComPlaceWeapon ( building , [ 42 , 43 , 44 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
15993: LD_VAR 0 1
15997: PPUSH
15998: LD_INT 42
16000: PUSH
16001: LD_INT 43
16003: PUSH
16004: LD_INT 44
16006: PUSH
16007: LD_INT 46
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 1
16018: PPUSH
16019: LD_INT 4
16021: PPUSH
16022: CALL_OW 12
16026: ARRAY
16027: PPUSH
16028: CALL_OW 208
// end ; end ;
16032: PPOPN 1
16034: END
// on UnitDestroyed ( unit ) do begin if unit = Joan then
16035: LD_VAR 0 1
16039: PUSH
16040: LD_EXP 15
16044: EQUAL
16045: IFFALSE 16055
// JoanStatus = 0 ;
16047: LD_ADDR_EXP 16
16051: PUSH
16052: LD_INT 0
16054: ST_TO_ADDR
// if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16055: LD_VAR 0 1
16059: PPUSH
16060: CALL_OW 255
16064: PUSH
16065: LD_INT 1
16067: EQUAL
16068: PUSH
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 247
16078: PUSH
16079: LD_INT 1
16081: EQUAL
16082: AND
16083: IFFALSE 16159
// begin if GetClass ( unit ) = 1 or GetClass ( unit ) = 2 or GetClass ( unit ) = 3 or GetClass ( unit ) = 4 then
16085: LD_VAR 0 1
16089: PPUSH
16090: CALL_OW 257
16094: PUSH
16095: LD_INT 1
16097: EQUAL
16098: PUSH
16099: LD_VAR 0 1
16103: PPUSH
16104: CALL_OW 257
16108: PUSH
16109: LD_INT 2
16111: EQUAL
16112: OR
16113: PUSH
16114: LD_VAR 0 1
16118: PPUSH
16119: CALL_OW 257
16123: PUSH
16124: LD_INT 3
16126: EQUAL
16127: OR
16128: PUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL_OW 257
16138: PUSH
16139: LD_INT 4
16141: EQUAL
16142: OR
16143: IFFALSE 16159
// unitLost = unitLost + 1 ;
16145: LD_ADDR_EXP 30
16149: PUSH
16150: LD_EXP 30
16154: PUSH
16155: LD_INT 1
16157: PLUS
16158: ST_TO_ADDR
// end ; if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 255
16168: PUSH
16169: LD_INT 3
16171: EQUAL
16172: PUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 247
16182: PUSH
16183: LD_INT 3
16185: EQUAL
16186: AND
16187: IFFALSE 16879
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL_OW 266
16198: PUSH
16199: LD_INT 31
16201: EQUAL
16202: PUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 266
16212: PUSH
16213: LD_INT 32
16215: EQUAL
16216: OR
16217: PUSH
16218: LD_VAR 0 1
16222: PPUSH
16223: CALL_OW 266
16227: PUSH
16228: LD_INT 36
16230: EQUAL
16231: OR
16232: PUSH
16233: LD_VAR 0 1
16237: PPUSH
16238: CALL_OW 266
16242: PUSH
16243: LD_INT 0
16245: EQUAL
16246: OR
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 266
16257: PUSH
16258: LD_INT 24
16260: EQUAL
16261: OR
16262: PUSH
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 266
16272: PUSH
16273: LD_INT 17
16275: EQUAL
16276: OR
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: CALL_OW 266
16287: PUSH
16288: LD_INT 25
16290: EQUAL
16291: OR
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 266
16302: PUSH
16303: LD_INT 19
16305: EQUAL
16306: OR
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 266
16317: PUSH
16318: LD_INT 20
16320: EQUAL
16321: OR
16322: PUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 266
16332: PUSH
16333: LD_INT 18
16335: EQUAL
16336: OR
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 266
16347: PUSH
16348: LD_INT 21
16350: EQUAL
16351: OR
16352: PUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 266
16362: PUSH
16363: LD_INT 23
16365: EQUAL
16366: OR
16367: PUSH
16368: LD_VAR 0 1
16372: PPUSH
16373: CALL_OW 266
16377: PUSH
16378: LD_INT 16
16380: EQUAL
16381: OR
16382: PUSH
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 266
16392: PUSH
16393: LD_INT 6
16395: EQUAL
16396: OR
16397: PUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL_OW 266
16407: PUSH
16408: LD_INT 29
16410: EQUAL
16411: OR
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 266
16422: PUSH
16423: LD_INT 26
16425: EQUAL
16426: OR
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 266
16437: PUSH
16438: LD_INT 30
16440: EQUAL
16441: OR
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 266
16452: PUSH
16453: LD_INT 28
16455: EQUAL
16456: OR
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 266
16467: PUSH
16468: LD_INT 27
16470: EQUAL
16471: OR
16472: PUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 266
16482: PUSH
16483: LD_INT 33
16485: EQUAL
16486: OR
16487: PUSH
16488: LD_VAR 0 1
16492: PPUSH
16493: CALL_OW 266
16497: PUSH
16498: LD_INT 2
16500: EQUAL
16501: OR
16502: PUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: CALL_OW 266
16512: PUSH
16513: LD_INT 4
16515: EQUAL
16516: OR
16517: IFFALSE 16603
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
16519: LD_ADDR_EXP 31
16523: PUSH
16524: LD_EXP 31
16528: PUSH
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 266
16538: ADD
16539: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16540: LD_ADDR_EXP 31
16544: PUSH
16545: LD_EXP 31
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 250
16559: ADD
16560: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16561: LD_ADDR_EXP 31
16565: PUSH
16566: LD_EXP 31
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 251
16580: ADD
16581: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16582: LD_ADDR_EXP 31
16586: PUSH
16587: LD_EXP 31
16591: PUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 254
16601: ADD
16602: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
16603: LD_VAR 0 1
16607: PPUSH
16608: CALL_OW 266
16612: PUSH
16613: LD_INT 1
16615: EQUAL
16616: IFFALSE 16695
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
16618: LD_ADDR_EXP 31
16622: PUSH
16623: LD_EXP 31
16627: PUSH
16628: LD_INT 0
16630: ADD
16631: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16632: LD_ADDR_EXP 31
16636: PUSH
16637: LD_EXP 31
16641: PUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 250
16651: ADD
16652: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16653: LD_ADDR_EXP 31
16657: PUSH
16658: LD_EXP 31
16662: PUSH
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 251
16672: ADD
16673: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16674: LD_ADDR_EXP 31
16678: PUSH
16679: LD_EXP 31
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 254
16693: ADD
16694: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
16695: LD_VAR 0 1
16699: PPUSH
16700: CALL_OW 266
16704: PUSH
16705: LD_INT 3
16707: EQUAL
16708: IFFALSE 16787
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
16710: LD_ADDR_EXP 31
16714: PUSH
16715: LD_EXP 31
16719: PUSH
16720: LD_INT 2
16722: ADD
16723: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16724: LD_ADDR_EXP 31
16728: PUSH
16729: LD_EXP 31
16733: PUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 250
16743: ADD
16744: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16745: LD_ADDR_EXP 31
16749: PUSH
16750: LD_EXP 31
16754: PUSH
16755: LD_VAR 0 1
16759: PPUSH
16760: CALL_OW 251
16764: ADD
16765: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16766: LD_ADDR_EXP 31
16770: PUSH
16771: LD_EXP 31
16775: PUSH
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 254
16785: ADD
16786: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 266
16796: PUSH
16797: LD_INT 5
16799: EQUAL
16800: IFFALSE 16879
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
16802: LD_ADDR_EXP 31
16806: PUSH
16807: LD_EXP 31
16811: PUSH
16812: LD_INT 4
16814: ADD
16815: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
16816: LD_ADDR_EXP 31
16820: PUSH
16821: LD_EXP 31
16825: PUSH
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 250
16835: ADD
16836: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
16837: LD_ADDR_EXP 31
16841: PUSH
16842: LD_EXP 31
16846: PUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: CALL_OW 251
16856: ADD
16857: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
16858: LD_ADDR_EXP 31
16862: PUSH
16863: LD_EXP 31
16867: PUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 254
16877: ADD
16878: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 257
16888: PUSH
16889: LD_INT 3
16891: EQUAL
16892: PUSH
16893: LD_VAR 0 1
16897: PPUSH
16898: CALL_OW 255
16902: PUSH
16903: LD_INT 3
16905: EQUAL
16906: AND
16907: PUSH
16908: LD_INT 21
16910: PPUSH
16911: CALL_OW 302
16915: AND
16916: PUSH
16917: LD_INT 21
16919: PPUSH
16920: CALL_OW 255
16924: PUSH
16925: LD_INT 3
16927: EQUAL
16928: AND
16929: IFFALSE 16997
// begin uc_side = 3 ;
16931: LD_ADDR_OWVAR 20
16935: PUSH
16936: LD_INT 3
16938: ST_TO_ADDR
// uc_nation = 3 ;
16939: LD_ADDR_OWVAR 21
16943: PUSH
16944: LD_INT 3
16946: ST_TO_ADDR
// hc_gallery :=  ;
16947: LD_ADDR_OWVAR 33
16951: PUSH
16952: LD_STRING 
16954: ST_TO_ADDR
// hc_name :=  ;
16955: LD_ADDR_OWVAR 26
16959: PUSH
16960: LD_STRING 
16962: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
16963: LD_INT 0
16965: PPUSH
16966: LD_EXP 34
16970: PPUSH
16971: LD_EXP 35
16975: PPUSH
16976: CALL_OW 12
16980: PPUSH
16981: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufab ) ;
16985: CALL_OW 44
16989: PPUSH
16990: LD_INT 21
16992: PPUSH
16993: CALL_OW 52
// end ; if GetSide ( unit ) = 3 and GetWeapon ( unit ) = ru_crane and IsOK ( rufab ) and GetSide ( rufab ) = 3 then
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 255
17006: PUSH
17007: LD_INT 3
17009: EQUAL
17010: PUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 264
17020: PUSH
17021: LD_INT 52
17023: EQUAL
17024: AND
17025: PUSH
17026: LD_INT 21
17028: PPUSH
17029: CALL_OW 302
17033: AND
17034: PUSH
17035: LD_INT 21
17037: PPUSH
17038: CALL_OW 255
17042: PUSH
17043: LD_INT 3
17045: EQUAL
17046: AND
17047: IFFALSE 17068
// ComConstruct ( rufab , 22 , 1 , 1 , ru_crane ) ;
17049: LD_INT 21
17051: PPUSH
17052: LD_INT 22
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: LD_INT 52
17063: PPUSH
17064: CALL_OW 125
// end ;
17068: PPOPN 1
17070: END
// on VehicleConstructed ( vehicle , building ) do var i , un , crates ;
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
// begin if GetWeapon ( vehicle ) = 51 and GetSide ( vehicle ) = 3 then
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 264
17085: PUSH
17086: LD_INT 51
17088: EQUAL
17089: PUSH
17090: LD_VAR 0 1
17094: PPUSH
17095: CALL_OW 255
17099: PUSH
17100: LD_INT 3
17102: EQUAL
17103: AND
17104: IFFALSE 17166
// begin crates = GetResourceType ( GetBase ( rudepo ) , 1 ) ;
17106: LD_ADDR_VAR 0 5
17110: PUSH
17111: LD_INT 2
17113: PPUSH
17114: CALL_OW 274
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 275
17126: ST_TO_ADDR
// SetResourceType ( GetBase ( rudepo ) , 1 , crates - 100 ) ;
17127: LD_INT 2
17129: PPUSH
17130: CALL_OW 274
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: LD_VAR 0 5
17142: PUSH
17143: LD_INT 100
17145: MINUS
17146: PPUSH
17147: CALL_OW 277
// AddCargo ( vehicle , 1 , 100 ) ;
17151: LD_VAR 0 1
17155: PPUSH
17156: LD_INT 1
17158: PPUSH
17159: LD_INT 100
17161: PPUSH
17162: CALL_OW 291
// end ; if building = rufabsupp then
17166: LD_VAR 0 2
17170: PUSH
17171: LD_INT 17
17173: EQUAL
17174: IFFALSE 17188
// SetSide ( vehicle , 6 ) ;
17176: LD_VAR 0 1
17180: PPUSH
17181: LD_INT 6
17183: PPUSH
17184: CALL_OW 235
// end ;
17188: PPOPN 5
17190: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( apeman ) = 3 then
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 255
17200: PUSH
17201: LD_INT 3
17203: EQUAL
17204: IFFALSE 17235
// begin tamedApemans = tamedApemans + 1 ;
17206: LD_ADDR_EXP 32
17210: PUSH
17211: LD_EXP 32
17215: PUSH
17216: LD_INT 1
17218: PLUS
17219: ST_TO_ADDR
// ComMoveXY ( apeman , 106 , 85 ) ;
17220: LD_VAR 0 1
17224: PPUSH
17225: LD_INT 106
17227: PPUSH
17228: LD_INT 85
17230: PPUSH
17231: CALL_OW 111
// end ; end ;
17235: PPOPN 2
17237: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17238: LD_INT 0
17240: PPUSH
17241: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17242: LD_VAR 0 1
17246: PPUSH
17247: CALL_OW 255
17251: PUSH
17252: LD_INT 3
17254: EQUAL
17255: PUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 247
17265: PUSH
17266: LD_INT 2
17268: EQUAL
17269: AND
17270: IFFALSE 17379
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 or GetWeapon ( unit ) = 46 then
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 264
17281: PUSH
17282: LD_INT 42
17284: EQUAL
17285: PUSH
17286: LD_VAR 0 1
17290: PPUSH
17291: CALL_OW 264
17295: PUSH
17296: LD_INT 43
17298: EQUAL
17299: OR
17300: PUSH
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 264
17310: PUSH
17311: LD_INT 44
17313: EQUAL
17314: OR
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 264
17325: PUSH
17326: LD_INT 46
17328: EQUAL
17329: OR
17330: IFFALSE 17379
// AddComConstruct ( rufab , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17332: LD_INT 21
17334: PPUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 265
17344: PPUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 262
17354: PPUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 263
17364: PPUSH
17365: LD_VAR 0 1
17369: PPUSH
17370: CALL_OW 264
17374: PPUSH
17375: CALL_OW 185
// end ;
17379: PPOPN 3
17381: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17382: LD_VAR 0 1
17386: PPUSH
17387: CALL_OW 255
17391: PUSH
17392: LD_INT 3
17394: EQUAL
17395: PUSH
17396: LD_VAR 0 2
17400: PPUSH
17401: CALL_OW 255
17405: PUSH
17406: LD_INT 3
17408: EQUAL
17409: AND
17410: PUSH
17411: LD_VAR 0 1
17415: PPUSH
17416: CALL_OW 302
17420: AND
17421: IFFALSE 17463
// begin ComRepairVehicle ( human , vehicle ) ;
17423: LD_VAR 0 2
17427: PPUSH
17428: LD_VAR 0 1
17432: PPUSH
17433: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17437: LD_VAR 0 2
17441: PPUSH
17442: LD_VAR 0 1
17446: PPUSH
17447: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_INT 100
17458: PPUSH
17459: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rufab ) and not IsOk ( vehicle ) then
17463: LD_VAR 0 1
17467: PPUSH
17468: CALL_OW 255
17472: PUSH
17473: LD_INT 3
17475: EQUAL
17476: PUSH
17477: LD_VAR 0 2
17481: PPUSH
17482: CALL_OW 255
17486: PUSH
17487: LD_INT 3
17489: EQUAL
17490: AND
17491: PUSH
17492: LD_INT 21
17494: PPUSH
17495: CALL_OW 302
17499: AND
17500: PUSH
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 302
17510: NOT
17511: AND
17512: IFFALSE 17526
// ComEnterUnit ( human , rufab ) ;
17514: LD_VAR 0 2
17518: PPUSH
17519: LD_INT 21
17521: PPUSH
17522: CALL_OW 120
// end ;
17526: PPOPN 2
17528: END
// on EnterBuilding ( building , human ) do begin if building = rufab and GetSide ( human ) = 3 then
17529: LD_VAR 0 1
17533: PUSH
17534: LD_INT 21
17536: EQUAL
17537: PUSH
17538: LD_VAR 0 2
17542: PPUSH
17543: CALL_OW 255
17547: PUSH
17548: LD_INT 3
17550: EQUAL
17551: AND
17552: IFFALSE 17566
// SetLives ( human , 1000 ) ;
17554: LD_VAR 0 2
17558: PPUSH
17559: LD_INT 1000
17561: PPUSH
17562: CALL_OW 234
// end ;
17566: PPOPN 2
17568: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not firstCrateSpawn then
17569: LD_EXP 41
17573: NOT
17574: IFFALSE 17584
// firstCrateSpawn := true ;
17576: LD_ADDR_EXP 41
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// end ; end_of_file
17584: PPOPN 5
17586: END
// every 0 0$30 trigger cratesStatus = 1 do
17587: LD_EXP 38
17591: PUSH
17592: LD_INT 1
17594: EQUAL
17595: IFFALSE 17659
17597: GO 17599
17599: DISABLE
// begin enable ;
17600: ENABLE
// wait ( [ 0 0$10 , 0 0$30 ] [ Rand ( 1 , 2 ) ] ) ;
17601: LD_INT 350
17603: PUSH
17604: LD_INT 1050
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 1
17613: PPUSH
17614: LD_INT 2
17616: PPUSH
17617: CALL_OW 12
17621: ARRAY
17622: PPUSH
17623: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn1 , true ) ;
17627: LD_INT 4
17629: PUSH
17630: LD_INT 5
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 1
17639: PPUSH
17640: LD_INT 2
17642: PPUSH
17643: CALL_OW 12
17647: ARRAY
17648: PPUSH
17649: LD_INT 7
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 55
// end ;
17659: END
// every 1 1$0 trigger cratesStatus = 2 do
17660: LD_EXP 38
17664: PUSH
17665: LD_INT 2
17667: EQUAL
17668: IFFALSE 17732
17670: GO 17672
17672: DISABLE
// begin enable ;
17673: ENABLE
// wait ( [ 1 1$30 , 2 2$10 ] [ Rand ( 1 , 2 ) ] ) ;
17674: LD_INT 3150
17676: PUSH
17677: LD_INT 4550
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PPUSH
17687: LD_INT 2
17689: PPUSH
17690: CALL_OW 12
17694: ARRAY
17695: PPUSH
17696: CALL_OW 67
// CreateCratesArea ( [ 2 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17700: LD_INT 2
17702: PUSH
17703: LD_INT 5
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: LD_INT 1
17712: PPUSH
17713: LD_INT 2
17715: PPUSH
17716: CALL_OW 12
17720: ARRAY
17721: PPUSH
17722: LD_INT 8
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 55
// end ;
17732: END
// every 0 0$30 + 0 0$10 do
17733: GO 17735
17735: DISABLE
// begin CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17736: LD_INT 4
17738: PUSH
17739: LD_INT 5
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 1
17748: PPUSH
17749: LD_INT 2
17751: PPUSH
17752: CALL_OW 12
17756: ARRAY
17757: PPUSH
17758: LD_INT 8
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 55
// Wait ( 0 0$15 ) ;
17768: LD_INT 525
17770: PPUSH
17771: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17775: LD_INT 4
17777: PUSH
17778: LD_INT 5
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 1
17787: PPUSH
17788: LD_INT 2
17790: PPUSH
17791: CALL_OW 12
17795: ARRAY
17796: PPUSH
17797: LD_INT 8
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: CALL_OW 55
// Wait ( 0 0$20 ) ;
17807: LD_INT 700
17809: PPUSH
17810: CALL_OW 67
// CreateCratesArea ( [ 4 , 5 ] [ Rand ( 1 , 2 ) ] , CratesSpawn2 , true ) ;
17814: LD_INT 4
17816: PUSH
17817: LD_INT 5
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PPUSH
17827: LD_INT 2
17829: PPUSH
17830: CALL_OW 12
17834: ARRAY
17835: PPUSH
17836: LD_INT 8
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: CALL_OW 55
// end ; end_of_file
17846: END
// every 0 0$1 trigger timerStatus = 1 do var i , tmp , yourCrates ;
17847: LD_EXP 24
17851: PUSH
17852: LD_INT 1
17854: EQUAL
17855: IFFALSE 18156
17857: GO 17859
17859: DISABLE
17860: LD_INT 0
17862: PPUSH
17863: PPUSH
17864: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17865: LD_ADDR_VAR 0 2
17869: PUSH
17870: LD_INT 22
17872: PUSH
17873: LD_INT 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 21
17882: PUSH
17883: LD_INT 3
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 30
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 69
17927: ST_TO_ADDR
// for i in tmp do
17928: LD_ADDR_VAR 0 1
17932: PUSH
17933: LD_VAR 0 2
17937: PUSH
17938: FOR_IN
17939: IFFALSE 17972
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
17941: LD_ADDR_VAR 0 3
17945: PUSH
17946: LD_VAR 0 3
17950: PUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: CALL_OW 274
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 275
17968: PLUS
17969: ST_TO_ADDR
17970: GO 17938
17972: POP
17973: POP
// strings = [ ] ;
17974: LD_ADDR_EXP 27
17978: PUSH
17979: EMPTY
17980: ST_TO_ADDR
// if tmp = 0 then
17981: LD_VAR 0 2
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: IFFALSE 18014
// strings = strings ^ [ #Am06-1 , needCrates ] ;
17991: LD_ADDR_EXP 27
17995: PUSH
17996: LD_EXP 27
18000: PUSH
18001: LD_STRING #Am06-1
18003: PUSH
18004: LD_EXP 25
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: ADD
18013: ST_TO_ADDR
// if tmp > 0 and needCrates > yourCrates then
18014: LD_VAR 0 2
18018: PUSH
18019: LD_INT 0
18021: GREATER
18022: PUSH
18023: LD_EXP 25
18027: PUSH
18028: LD_VAR 0 3
18032: GREATER
18033: AND
18034: IFFALSE 18065
// strings = strings ^ [ #Am06-1 , needCrates - yourCrates ] ;
18036: LD_ADDR_EXP 27
18040: PUSH
18041: LD_EXP 27
18045: PUSH
18046: LD_STRING #Am06-1
18048: PUSH
18049: LD_EXP 25
18053: PUSH
18054: LD_VAR 0 3
18058: MINUS
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: ADD
18064: ST_TO_ADDR
// if tmp > 0 and needCrates <= yourCrates then
18065: LD_VAR 0 2
18069: PUSH
18070: LD_INT 0
18072: GREATER
18073: PUSH
18074: LD_EXP 25
18078: PUSH
18079: LD_VAR 0 3
18083: LESSEQUAL
18084: AND
18085: IFFALSE 18108
// strings = strings ^ [ #Am06-1 , 0 ] ;
18087: LD_ADDR_EXP 27
18091: PUSH
18092: LD_EXP 27
18096: PUSH
18097: LD_STRING #Am06-1
18099: PUSH
18100: LD_INT 0
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: ADD
18107: ST_TO_ADDR
// timeToEnd = timeToEnd - 0 0$01 ;
18108: LD_ADDR_EXP 26
18112: PUSH
18113: LD_EXP 26
18117: PUSH
18118: LD_INT 35
18120: MINUS
18121: ST_TO_ADDR
// strings = strings ^ [ #Am06-2 , timeToEnd ] ;
18122: LD_ADDR_EXP 27
18126: PUSH
18127: LD_EXP 27
18131: PUSH
18132: LD_STRING #Am06-2
18134: PUSH
18135: LD_EXP 26
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: ADD
18144: ST_TO_ADDR
// display_strings = strings ;
18145: LD_ADDR_OWVAR 47
18149: PUSH
18150: LD_EXP 27
18154: ST_TO_ADDR
// enable ;
18155: ENABLE
// end ; end_of_file
18156: PPOPN 3
18158: END
// export function PrepareKurt ; var i , j , tmp , rnd , dec , dec2 ; begin
18159: LD_INT 0
18161: PPUSH
18162: PPUSH
18163: PPUSH
18164: PPUSH
18165: PPUSH
18166: PPUSH
18167: PPUSH
// j = 0 ;
18168: LD_ADDR_VAR 0 3
18172: PUSH
18173: LD_INT 0
18175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18176: LD_INT 35
18178: PPUSH
18179: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) do
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 2
18210: PUSH
18211: LD_INT 25
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 25
18223: PUSH
18224: LD_INT 2
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 25
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 25
18243: PUSH
18244: LD_INT 4
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: PPUSH
18263: CALL_OW 69
18267: PUSH
18268: FOR_IN
18269: IFFALSE 18375
// begin if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] , [ f_occupied ] ] , [ f_dist , i , 25 ] ] ) then
18271: LD_INT 22
18273: PUSH
18274: LD_INT 3
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 21
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 21
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 21
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 59
18316: PUSH
18317: EMPTY
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 91
18329: PUSH
18330: LD_VAR 0 2
18334: PUSH
18335: LD_INT 25
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: LIST
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: PPUSH
18348: CALL_OW 69
18352: NOT
18353: IFFALSE 18373
// begin tmp = i ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_VAR 0 2
18364: ST_TO_ADDR
// j = 1 ;
18365: LD_ADDR_VAR 0 3
18369: PUSH
18370: LD_INT 1
18372: ST_TO_ADDR
// end ; end ;
18373: GO 18268
18375: POP
18376: POP
// until j = 1 ;
18377: LD_VAR 0 3
18381: PUSH
18382: LD_INT 1
18384: EQUAL
18385: IFFALSE 18176
// blockSpawn = 1 ;
18387: LD_ADDR_EXP 29
18391: PUSH
18392: LD_INT 1
18394: ST_TO_ADDR
// uc_side = 2 ;
18395: LD_ADDR_OWVAR 20
18399: PUSH
18400: LD_INT 2
18402: ST_TO_ADDR
// uc_nation = 2 ;
18403: LD_ADDR_OWVAR 21
18407: PUSH
18408: LD_INT 2
18410: ST_TO_ADDR
// Kurt = PrepareUnit ( Kurt , false ) ;
18411: LD_ADDR_EXP 19
18415: PUSH
18416: LD_STRING Kurt
18418: PPUSH
18419: LD_INT 0
18421: PPUSH
18422: CALL 5193 0 2
18426: ST_TO_ADDR
// PlaceUnitXYR ( Kurt , GetX ( tmp ) , GetY ( tmp ) , 5 , true ) ;
18427: LD_EXP 19
18431: PPUSH
18432: LD_VAR 0 4
18436: PPUSH
18437: CALL_OW 250
18441: PPUSH
18442: LD_VAR 0 4
18446: PPUSH
18447: CALL_OW 251
18451: PPUSH
18452: LD_INT 5
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 50
// InGameOn ;
18462: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
18466: LD_EXP 19
18470: PPUSH
18471: CALL_OW 87
// wait ( 0 0$2 ) ;
18475: LD_INT 70
18477: PPUSH
18478: CALL_OW 67
// ComExitVehicle ( tmp ) ;
18482: LD_VAR 0 4
18486: PPUSH
18487: CALL_OW 121
// ComExitBuilding ( tmp ) ;
18491: LD_VAR 0 4
18495: PPUSH
18496: CALL_OW 122
// wait ( 0 0$1 ) ;
18500: LD_INT 35
18502: PPUSH
18503: CALL_OW 67
// ComTurnUnit ( Kurt , tmp ) ;
18507: LD_EXP 19
18511: PPUSH
18512: LD_VAR 0 4
18516: PPUSH
18517: CALL_OW 119
// ComTurnUnit ( tmp , Kurt ) ;
18521: LD_VAR 0 4
18525: PPUSH
18526: LD_EXP 19
18530: PPUSH
18531: CALL_OW 119
// DialogueOn ;
18535: CALL_OW 6
// Say ( Kurt , D2-Kurt-1 ) ;
18539: LD_EXP 19
18543: PPUSH
18544: LD_STRING D2-Kurt-1
18546: PPUSH
18547: CALL_OW 88
// if tmp = JMM then
18551: LD_VAR 0 4
18555: PUSH
18556: LD_EXP 1
18560: EQUAL
18561: IFFALSE 18653
// begin Say ( JMM , D2-JMM-1 ) ;
18563: LD_EXP 1
18567: PPUSH
18568: LD_STRING D2-JMM-1
18570: PPUSH
18571: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18575: LD_EXP 19
18579: PPUSH
18580: LD_STRING D2-Kurt-2
18582: PPUSH
18583: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
18587: LD_EXP 1
18591: PPUSH
18592: LD_STRING D2-JMM-2
18594: PPUSH
18595: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18599: LD_EXP 19
18603: PPUSH
18604: LD_STRING D2-Kurt-3
18606: PPUSH
18607: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
18611: LD_EXP 1
18615: PPUSH
18616: LD_STRING D2-JMM-3
18618: PPUSH
18619: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18623: LD_EXP 19
18627: PPUSH
18628: LD_STRING D2-Kurt-4
18630: PPUSH
18631: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
18635: LD_EXP 1
18639: PPUSH
18640: LD_STRING D2-JMM-4
18642: PPUSH
18643: CALL_OW 88
// DialogueOff ;
18647: CALL_OW 7
// end else
18651: GO 18963
// begin if GetSex ( tmp ) = 1 then
18653: LD_VAR 0 4
18657: PPUSH
18658: CALL_OW 258
18662: PUSH
18663: LD_INT 1
18665: EQUAL
18666: IFFALSE 18680
// Say ( tmp , D2-Sol1-1 ) ;
18668: LD_VAR 0 4
18672: PPUSH
18673: LD_STRING D2-Sol1-1
18675: PPUSH
18676: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18680: LD_VAR 0 4
18684: PPUSH
18685: CALL_OW 258
18689: PUSH
18690: LD_INT 2
18692: EQUAL
18693: IFFALSE 18707
// Say ( tmp , D2-FSol1-1 ) ;
18695: LD_VAR 0 4
18699: PPUSH
18700: LD_STRING D2-FSol1-1
18702: PPUSH
18703: CALL_OW 88
// Say ( Kurt , D2-Kurt-2 ) ;
18707: LD_EXP 19
18711: PPUSH
18712: LD_STRING D2-Kurt-2
18714: PPUSH
18715: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18719: LD_VAR 0 4
18723: PPUSH
18724: CALL_OW 258
18728: PUSH
18729: LD_INT 1
18731: EQUAL
18732: IFFALSE 18746
// Say ( tmp , D2-Sol1-2 ) ;
18734: LD_VAR 0 4
18738: PPUSH
18739: LD_STRING D2-Sol1-2
18741: PPUSH
18742: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18746: LD_VAR 0 4
18750: PPUSH
18751: CALL_OW 258
18755: PUSH
18756: LD_INT 2
18758: EQUAL
18759: IFFALSE 18773
// Say ( tmp , D2-FSol1-2 ) ;
18761: LD_VAR 0 4
18765: PPUSH
18766: LD_STRING D2-FSol1-2
18768: PPUSH
18769: CALL_OW 88
// Say ( Kurt , D2-Kurt-3 ) ;
18773: LD_EXP 19
18777: PPUSH
18778: LD_STRING D2-Kurt-3
18780: PPUSH
18781: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18785: LD_VAR 0 4
18789: PPUSH
18790: CALL_OW 258
18794: PUSH
18795: LD_INT 1
18797: EQUAL
18798: IFFALSE 18812
// Say ( tmp , D2-Sol1-3 ) ;
18800: LD_VAR 0 4
18804: PPUSH
18805: LD_STRING D2-Sol1-3
18807: PPUSH
18808: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18812: LD_VAR 0 4
18816: PPUSH
18817: CALL_OW 258
18821: PUSH
18822: LD_INT 2
18824: EQUAL
18825: IFFALSE 18839
// Say ( tmp , D2-FSol1-3 ) ;
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_STRING D2-FSol1-3
18834: PPUSH
18835: CALL_OW 88
// Say ( Kurt , D2-Kurt-4 ) ;
18839: LD_EXP 19
18843: PPUSH
18844: LD_STRING D2-Kurt-4
18846: PPUSH
18847: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18851: LD_VAR 0 4
18855: PPUSH
18856: CALL_OW 258
18860: PUSH
18861: LD_INT 1
18863: EQUAL
18864: IFFALSE 18878
// Say ( tmp , D2-Sol1-4 ) ;
18866: LD_VAR 0 4
18870: PPUSH
18871: LD_STRING D2-Sol1-4
18873: PPUSH
18874: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18878: LD_VAR 0 4
18882: PPUSH
18883: CALL_OW 258
18887: PUSH
18888: LD_INT 2
18890: EQUAL
18891: IFFALSE 18905
// Say ( tmp , D2-FSol1-4 ) ;
18893: LD_VAR 0 4
18897: PPUSH
18898: LD_STRING D2-FSol1-4
18900: PPUSH
18901: CALL_OW 88
// if GetSex ( tmp ) = 1 then
18905: LD_VAR 0 4
18909: PPUSH
18910: CALL_OW 258
18914: PUSH
18915: LD_INT 1
18917: EQUAL
18918: IFFALSE 18932
// Say ( tmp , D2-Sol1-5 ) ;
18920: LD_VAR 0 4
18924: PPUSH
18925: LD_STRING D2-Sol1-5
18927: PPUSH
18928: CALL_OW 88
// if GetSex ( tmp ) = 2 then
18932: LD_VAR 0 4
18936: PPUSH
18937: CALL_OW 258
18941: PUSH
18942: LD_INT 2
18944: EQUAL
18945: IFFALSE 18959
// Say ( tmp , D2-FSol1-5 ) ;
18947: LD_VAR 0 4
18951: PPUSH
18952: LD_STRING D2-FSol1-5
18954: PPUSH
18955: CALL_OW 88
// DialogueOff ;
18959: CALL_OW 7
// end ; dec = ShowQuery1 ;
18963: LD_ADDR_VAR 0 6
18967: PUSH
18968: CALL 5795 0 0
18972: ST_TO_ADDR
// if dec = 1 then
18973: LD_VAR 0 6
18977: PUSH
18978: LD_INT 1
18980: EQUAL
18981: IFFALSE 19023
// begin DialogueOn ;
18983: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
18987: LD_EXP 19
18991: PPUSH
18992: LD_STRING D2a-Kurt-1
18994: PPUSH
18995: CALL_OW 88
// DialogueOff ;
18999: CALL_OW 7
// InGameOff ;
19003: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19007: LD_INT 1
19009: PPUSH
19010: LD_INT 2
19012: PPUSH
19013: LD_INT 2
19015: PPUSH
19016: LD_INT 1
19018: PPUSH
19019: CALL_OW 80
// end ; if dec = 2 then
19023: LD_VAR 0 6
19027: PUSH
19028: LD_INT 2
19030: EQUAL
19031: IFFALSE 19531
// begin DialogueOn ;
19033: CALL_OW 6
// if tmp = JMM then
19037: LD_VAR 0 4
19041: PUSH
19042: LD_EXP 1
19046: EQUAL
19047: IFFALSE 19103
// begin Say ( JMM , D2b-JMM-1 ) ;
19049: LD_EXP 1
19053: PPUSH
19054: LD_STRING D2b-JMM-1
19056: PPUSH
19057: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19061: LD_EXP 19
19065: PPUSH
19066: LD_STRING D2b-Kurt-1
19068: PPUSH
19069: CALL_OW 88
// Say ( JMM , D2b-JMM-2 ) ;
19073: LD_EXP 1
19077: PPUSH
19078: LD_STRING D2b-JMM-2
19080: PPUSH
19081: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19085: LD_EXP 19
19089: PPUSH
19090: LD_STRING D2b-Kurt-2
19092: PPUSH
19093: CALL_OW 88
// DialogueOff ;
19097: CALL_OW 7
// end else
19101: GO 19293
// begin if GetSex ( tmp ) = 1 then
19103: LD_VAR 0 4
19107: PPUSH
19108: CALL_OW 258
19112: PUSH
19113: LD_INT 1
19115: EQUAL
19116: IFFALSE 19130
// Say ( tmp , D2b-Sol1-1 ) ;
19118: LD_VAR 0 4
19122: PPUSH
19123: LD_STRING D2b-Sol1-1
19125: PPUSH
19126: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19130: LD_VAR 0 4
19134: PPUSH
19135: CALL_OW 258
19139: PUSH
19140: LD_INT 2
19142: EQUAL
19143: IFFALSE 19157
// Say ( tmp , D2b-FSol1-1 ) ;
19145: LD_VAR 0 4
19149: PPUSH
19150: LD_STRING D2b-FSol1-1
19152: PPUSH
19153: CALL_OW 88
// Say ( Kurt , D2b-Kurt-1 ) ;
19157: LD_EXP 19
19161: PPUSH
19162: LD_STRING D2b-Kurt-1
19164: PPUSH
19165: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19169: LD_VAR 0 4
19173: PPUSH
19174: CALL_OW 258
19178: PUSH
19179: LD_INT 1
19181: EQUAL
19182: IFFALSE 19196
// Say ( tmp , D2b-Sol1-2 ) ;
19184: LD_VAR 0 4
19188: PPUSH
19189: LD_STRING D2b-Sol1-2
19191: PPUSH
19192: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19196: LD_VAR 0 4
19200: PPUSH
19201: CALL_OW 258
19205: PUSH
19206: LD_INT 2
19208: EQUAL
19209: IFFALSE 19223
// Say ( tmp , D2b-FSol1-2 ) ;
19211: LD_VAR 0 4
19215: PPUSH
19216: LD_STRING D2b-FSol1-2
19218: PPUSH
19219: CALL_OW 88
// Say ( Kurt , D2b-Kurt-2 ) ;
19223: LD_EXP 19
19227: PPUSH
19228: LD_STRING D2b-Kurt-2
19230: PPUSH
19231: CALL_OW 88
// if GetSex ( tmp ) = 1 then
19235: LD_VAR 0 4
19239: PPUSH
19240: CALL_OW 258
19244: PUSH
19245: LD_INT 1
19247: EQUAL
19248: IFFALSE 19262
// Say ( tmp , D2c-Sol1-2 ) ;
19250: LD_VAR 0 4
19254: PPUSH
19255: LD_STRING D2c-Sol1-2
19257: PPUSH
19258: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19262: LD_VAR 0 4
19266: PPUSH
19267: CALL_OW 258
19271: PUSH
19272: LD_INT 2
19274: EQUAL
19275: IFFALSE 19289
// Say ( tmp , D2c-FSol1-2 ) ;
19277: LD_VAR 0 4
19281: PPUSH
19282: LD_STRING D2c-FSol1-2
19284: PPUSH
19285: CALL_OW 88
// DialogueOff ;
19289: CALL_OW 7
// end ; dec2 = ShowQuery2 ;
19293: LD_ADDR_VAR 0 7
19297: PUSH
19298: CALL 5869 0 0
19302: ST_TO_ADDR
// if dec2 = 1 then
19303: LD_VAR 0 7
19307: PUSH
19308: LD_INT 1
19310: EQUAL
19311: IFFALSE 19353
// begin DialogueOn ;
19313: CALL_OW 6
// Say ( Kurt , D2a-Kurt-1 ) ;
19317: LD_EXP 19
19321: PPUSH
19322: LD_STRING D2a-Kurt-1
19324: PPUSH
19325: CALL_OW 88
// DialogueOff ;
19329: CALL_OW 7
// InGameOff ;
19333: CALL_OW 9
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
19337: LD_INT 1
19339: PPUSH
19340: LD_INT 2
19342: PPUSH
19343: LD_INT 2
19345: PPUSH
19346: LD_INT 1
19348: PPUSH
19349: CALL_OW 80
// end ; if dec2 = 2 then
19353: LD_VAR 0 7
19357: PUSH
19358: LD_INT 2
19360: EQUAL
19361: IFFALSE 19531
// begin if tmp = JMM then
19363: LD_VAR 0 4
19367: PUSH
19368: LD_EXP 1
19372: EQUAL
19373: IFFALSE 19433
// begin DialogueOn ;
19375: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19379: LD_EXP 1
19383: PPUSH
19384: LD_STRING D2c-JMM-1
19386: PPUSH
19387: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19391: LD_EXP 19
19395: PPUSH
19396: LD_STRING D2c-Kurt-1
19398: PPUSH
19399: CALL_OW 88
// DialogueOff ;
19403: CALL_OW 7
// InGameOff ;
19407: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19411: LD_EXP 19
19415: PPUSH
19416: LD_INT 9
19418: PPUSH
19419: CALL_OW 113
// readyToEscape = 1 ;
19423: LD_ADDR_EXP 21
19427: PUSH
19428: LD_INT 1
19430: ST_TO_ADDR
// end else
19431: GO 19531
// begin DialogueOn ;
19433: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19437: LD_VAR 0 4
19441: PPUSH
19442: CALL_OW 258
19446: PUSH
19447: LD_INT 1
19449: EQUAL
19450: IFFALSE 19464
// Say ( tmp , D2c-Sol1-1 ) ;
19452: LD_VAR 0 4
19456: PPUSH
19457: LD_STRING D2c-Sol1-1
19459: PPUSH
19460: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19464: LD_VAR 0 4
19468: PPUSH
19469: CALL_OW 258
19473: PUSH
19474: LD_INT 2
19476: EQUAL
19477: IFFALSE 19491
// Say ( tmp , D2c-FSol1-1 ) ;
19479: LD_VAR 0 4
19483: PPUSH
19484: LD_STRING D2c-FSol1-1
19486: PPUSH
19487: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19491: LD_EXP 19
19495: PPUSH
19496: LD_STRING D2c-Kurt-1
19498: PPUSH
19499: CALL_OW 88
// DialogueOff ;
19503: CALL_OW 7
// InGameOff ;
19507: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19511: LD_EXP 19
19515: PPUSH
19516: LD_INT 9
19518: PPUSH
19519: CALL_OW 113
// readyToEscape = 1 ;
19523: LD_ADDR_EXP 21
19527: PUSH
19528: LD_INT 1
19530: ST_TO_ADDR
// end ; end ; end ; if dec = 3 then
19531: LD_VAR 0 6
19535: PUSH
19536: LD_INT 3
19538: EQUAL
19539: IFFALSE 19713
// begin DialogueOn ;
19541: CALL_OW 6
// if tmp = JMM then
19545: LD_VAR 0 4
19549: PUSH
19550: LD_EXP 1
19554: EQUAL
19555: IFFALSE 19615
// begin DialogueOn ;
19557: CALL_OW 6
// Say ( JMM , D2c-JMM-1 ) ;
19561: LD_EXP 1
19565: PPUSH
19566: LD_STRING D2c-JMM-1
19568: PPUSH
19569: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19573: LD_EXP 19
19577: PPUSH
19578: LD_STRING D2c-Kurt-1
19580: PPUSH
19581: CALL_OW 88
// DialogueOff ;
19585: CALL_OW 7
// InGameOff ;
19589: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19593: LD_EXP 19
19597: PPUSH
19598: LD_INT 9
19600: PPUSH
19601: CALL_OW 113
// readyToEscape = 1 ;
19605: LD_ADDR_EXP 21
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// end else
19613: GO 19713
// begin DialogueOn ;
19615: CALL_OW 6
// if GetSex ( tmp ) = 1 then
19619: LD_VAR 0 4
19623: PPUSH
19624: CALL_OW 258
19628: PUSH
19629: LD_INT 1
19631: EQUAL
19632: IFFALSE 19646
// Say ( tmp , D2c-Sol1-1 ) ;
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_STRING D2c-Sol1-1
19641: PPUSH
19642: CALL_OW 88
// if GetSex ( tmp ) = 2 then
19646: LD_VAR 0 4
19650: PPUSH
19651: CALL_OW 258
19655: PUSH
19656: LD_INT 2
19658: EQUAL
19659: IFFALSE 19673
// Say ( tmp , D2c-FSol1-1 ) ;
19661: LD_VAR 0 4
19665: PPUSH
19666: LD_STRING D2c-FSol1-1
19668: PPUSH
19669: CALL_OW 88
// Say ( Kurt , D2c-Kurt-1 ) ;
19673: LD_EXP 19
19677: PPUSH
19678: LD_STRING D2c-Kurt-1
19680: PPUSH
19681: CALL_OW 88
// DialogueOff ;
19685: CALL_OW 7
// InGameOff ;
19689: CALL_OW 9
// ComMoveToArea ( Kurt , KurtEscape ) ;
19693: LD_EXP 19
19697: PPUSH
19698: LD_INT 9
19700: PPUSH
19701: CALL_OW 113
// readyToEscape = 1 ;
19705: LD_ADDR_EXP 21
19709: PUSH
19710: LD_INT 1
19712: ST_TO_ADDR
// end ; end ; blockSpawn = 0 ;
19713: LD_ADDR_EXP 29
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19721: LD_INT 35
19723: PPUSH
19724: CALL_OW 67
// until ( IsInArea ( Kurt , KurtEscape ) and readyToEscape ) or IsDead ( Kurt ) ;
19728: LD_EXP 19
19732: PPUSH
19733: LD_INT 9
19735: PPUSH
19736: CALL_OW 308
19740: PUSH
19741: LD_EXP 21
19745: AND
19746: PUSH
19747: LD_EXP 19
19751: PPUSH
19752: CALL_OW 301
19756: OR
19757: IFFALSE 19721
// if IsDead ( Kurt ) then
19759: LD_EXP 19
19763: PPUSH
19764: CALL_OW 301
19768: IFFALSE 19772
// exit ;
19770: GO 19841
// RemoveUnit ( Kurt ) ;
19772: LD_EXP 19
19776: PPUSH
19777: CALL_OW 64
// SaveCharacters ( Kurt , Kurt ) ;
19781: LD_EXP 19
19785: PPUSH
19786: LD_STRING Kurt
19788: PPUSH
19789: CALL_OW 38
// if GetAttitude ( 1 , 2 ) = att_neutral then
19793: LD_INT 1
19795: PPUSH
19796: LD_INT 2
19798: PPUSH
19799: CALL_OW 81
19803: PUSH
19804: LD_INT 0
19806: EQUAL
19807: IFFALSE 19817
// KurtStatus = 1 ;
19809: LD_ADDR_EXP 20
19813: PUSH
19814: LD_INT 1
19816: ST_TO_ADDR
// if GetAttitude ( 1 , 2 ) = att_enemy then
19817: LD_INT 1
19819: PPUSH
19820: LD_INT 2
19822: PPUSH
19823: CALL_OW 81
19827: PUSH
19828: LD_INT 2
19830: EQUAL
19831: IFFALSE 19841
// KurtStatus = 2 ;
19833: LD_ADDR_EXP 20
19837: PUSH
19838: LD_INT 2
19840: ST_TO_ADDR
// end ; end_of_file
19841: LD_VAR 0 1
19845: RET
// every 0 0$1 do
19846: GO 19848
19848: DISABLE
// ResAllTechs ( 3 , rulab , 3 ) ;
19849: LD_INT 3
19851: PPUSH
19852: LD_INT 32
19854: PPUSH
19855: LD_INT 3
19857: PPUSH
19858: CALL 5924 0 3
19862: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
19863: GO 19865
19865: DISABLE
19866: LD_INT 0
19868: PPUSH
// begin enemyWayX = [ ] ;
19869: LD_ADDR_EXP 45
19873: PUSH
19874: EMPTY
19875: ST_TO_ADDR
// enemyWayY = [ ] ;
19876: LD_ADDR_EXP 46
19880: PUSH
19881: EMPTY
19882: ST_TO_ADDR
// rnd = rand ( 1 , 2 ) ;
19883: LD_ADDR_VAR 0 1
19887: PUSH
19888: LD_INT 1
19890: PPUSH
19891: LD_INT 2
19893: PPUSH
19894: CALL_OW 12
19898: ST_TO_ADDR
// if rnd = 1 then
19899: LD_VAR 0 1
19903: PUSH
19904: LD_INT 1
19906: EQUAL
19907: IFFALSE 19947
// begin enemyWayX = [ 93 , 84 , 104 ] ;
19909: LD_ADDR_EXP 45
19913: PUSH
19914: LD_INT 93
19916: PUSH
19917: LD_INT 84
19919: PUSH
19920: LD_INT 104
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: ST_TO_ADDR
// enemyWayY = [ 51 , 35 , 28 ] ;
19928: LD_ADDR_EXP 46
19932: PUSH
19933: LD_INT 51
19935: PUSH
19936: LD_INT 35
19938: PUSH
19939: LD_INT 28
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: ST_TO_ADDR
// end ; if rnd = 2 then
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 2
19954: EQUAL
19955: IFFALSE 20011
// begin enemyWayX = [ 93 , 52 , 34 , 28 , 30 ] ;
19957: LD_ADDR_EXP 45
19961: PUSH
19962: LD_INT 93
19964: PUSH
19965: LD_INT 52
19967: PUSH
19968: LD_INT 34
19970: PUSH
19971: LD_INT 28
19973: PUSH
19974: LD_INT 30
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: ST_TO_ADDR
// enemyWayY = [ 51 , 45 , 35 , 26 , 20 ] ;
19984: LD_ADDR_EXP 46
19988: PUSH
19989: LD_INT 51
19991: PUSH
19992: LD_INT 45
19994: PUSH
19995: LD_INT 35
19997: PUSH
19998: LD_INT 26
20000: PUSH
20001: LD_INT 20
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: ST_TO_ADDR
// end ; enable ;
20011: ENABLE
// end ;
20012: PPOPN 1
20014: END
// every 0 0$1 do
20015: GO 20017
20017: DISABLE
// begin enable ;
20018: ENABLE
// RepairAndRebuildBase ( 3 , rudepo , RussianBase , ruDestroyedBuildings ) ;
20019: LD_INT 3
20021: PPUSH
20022: LD_INT 2
20024: PPUSH
20025: LD_INT 11
20027: PPUSH
20028: LD_EXP 31
20032: PPUSH
20033: CALL 7347 0 4
// CraneRepairBuild ( 3 , RussianRepairArea , ruDestroyedBuildings ) ;
20037: LD_INT 3
20039: PPUSH
20040: LD_INT 14
20042: PPUSH
20043: LD_EXP 31
20047: PPUSH
20048: CALL 9232 0 3
// if disableHealAI = 0 then
20052: LD_EXP 33
20056: PUSH
20057: LD_INT 0
20059: EQUAL
20060: IFFALSE 20081
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , [ rulab ] ) ;
20062: LD_INT 3
20064: PPUSH
20065: LD_INT 10
20067: PPUSH
20068: LD_INT 11
20070: PPUSH
20071: LD_INT 32
20073: PUSH
20074: EMPTY
20075: LIST
20076: PPUSH
20077: CALL 7738 0 4
// CollectCrates ( 3 , 51 , CratesSpawn1 ) ;
20081: LD_INT 3
20083: PPUSH
20084: LD_INT 51
20086: PPUSH
20087: LD_INT 7
20089: PPUSH
20090: CALL 8446 0 3
// RepairVehicles ( 3 , RussianRepairArea , 121 , 100 ) ;
20094: LD_INT 3
20096: PPUSH
20097: LD_INT 14
20099: PPUSH
20100: LD_INT 121
20102: PPUSH
20103: LD_INT 100
20105: PPUSH
20106: CALL 6319 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
20110: LD_INT 3
20112: PPUSH
20113: LD_INT 24
20115: PPUSH
20116: LD_EXP 45
20120: PPUSH
20121: LD_EXP 46
20125: PPUSH
20126: CALL 6522 0 4
// EnterBunkerOrBarrack ( 3 , RussianBase ) ;
20130: LD_INT 3
20132: PPUSH
20133: LD_INT 11
20135: PPUSH
20136: CALL 8589 0 2
// AttackNearBuildings ( 3 , 1 ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: CALL 9002 0 2
// if IsDying ( rudepo ) or GetSide ( rudepo ) = 1 then
20150: LD_INT 2
20152: PPUSH
20153: CALL_OW 303
20157: PUSH
20158: LD_INT 2
20160: PPUSH
20161: CALL_OW 255
20165: PUSH
20166: LD_INT 1
20168: EQUAL
20169: OR
20170: IFFALSE 20182
// DefendDepot ( 3 , rudepo ) ;
20172: LD_INT 3
20174: PPUSH
20175: LD_INT 2
20177: PPUSH
20178: CALL 8282 0 2
// end ;
20182: END
// every 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rufab ) = 3 and IsOk ( rufab ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20183: LD_INT 22
20185: PUSH
20186: LD_INT 3
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 21
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 55
20205: PUSH
20206: EMPTY
20207: LIST
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: LD_INT 34
20214: PUSH
20215: LD_INT 51
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: PPUSH
20232: CALL_OW 69
20236: PUSH
20237: LD_INT 0
20239: EQUAL
20240: PUSH
20241: LD_INT 21
20243: PPUSH
20244: CALL_OW 255
20248: PUSH
20249: LD_INT 3
20251: EQUAL
20252: AND
20253: PUSH
20254: LD_INT 21
20256: PPUSH
20257: CALL_OW 302
20261: AND
20262: PUSH
20263: LD_INT 2
20265: PPUSH
20266: CALL_OW 255
20270: PUSH
20271: LD_INT 3
20273: EQUAL
20274: AND
20275: PUSH
20276: LD_INT 2
20278: PPUSH
20279: CALL_OW 302
20283: AND
20284: IFFALSE 20468
20286: GO 20288
20288: DISABLE
// begin enable ;
20289: ENABLE
// SetResourceType ( GetBase ( rudepo ) , 1 , 1000 ) ;
20290: LD_INT 2
20292: PPUSH
20293: CALL_OW 274
20297: PPUSH
20298: LD_INT 1
20300: PPUSH
20301: LD_INT 1000
20303: PPUSH
20304: CALL_OW 277
// BuildingVehicleAndAttackEnemy ( 3 , rufab , [ 5 , 6 , 6 ] [ Difficulty ] , [ [ 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] , [ 43 , 43 , 43 , 44 , 44 , 46 ] ] [ Difficulty ] , 1 , 1 , [ 22 , [ 22 , 24 ] [ Rand ( 1 , 2 ) ] , 24 ] [ Difficulty ] ) ;
20308: LD_INT 3
20310: PPUSH
20311: LD_INT 21
20313: PPUSH
20314: LD_INT 5
20316: PUSH
20317: LD_INT 6
20319: PUSH
20320: LD_INT 6
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: PUSH
20328: LD_OWVAR 67
20332: ARRAY
20333: PPUSH
20334: LD_INT 43
20336: PUSH
20337: LD_INT 43
20339: PUSH
20340: LD_INT 44
20342: PUSH
20343: LD_INT 44
20345: PUSH
20346: LD_INT 46
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 43
20358: PUSH
20359: LD_INT 43
20361: PUSH
20362: LD_INT 43
20364: PUSH
20365: LD_INT 44
20367: PUSH
20368: LD_INT 44
20370: PUSH
20371: LD_INT 46
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 43
20384: PUSH
20385: LD_INT 43
20387: PUSH
20388: LD_INT 43
20390: PUSH
20391: LD_INT 44
20393: PUSH
20394: LD_INT 44
20396: PUSH
20397: LD_INT 46
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: PUSH
20413: LD_OWVAR 67
20417: ARRAY
20418: PPUSH
20419: LD_INT 1
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: LD_INT 22
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 24
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 1
20440: PPUSH
20441: LD_INT 2
20443: PPUSH
20444: CALL_OW 12
20448: ARRAY
20449: PUSH
20450: LD_INT 24
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: LD_OWVAR 67
20462: ARRAY
20463: PPUSH
20464: CALL 6165 0 7
// end ;
20468: END
// every 5 5$0 trigger GetSide ( rufabsupp ) = 3 and IsOk ( rufabsupp ) and GetSide ( rudepo ) = 3 and IsOk ( rudepo ) do
20469: LD_INT 17
20471: PPUSH
20472: CALL_OW 255
20476: PUSH
20477: LD_INT 3
20479: EQUAL
20480: PUSH
20481: LD_INT 17
20483: PPUSH
20484: CALL_OW 302
20488: AND
20489: PUSH
20490: LD_INT 2
20492: PPUSH
20493: CALL_OW 255
20497: PUSH
20498: LD_INT 3
20500: EQUAL
20501: AND
20502: PUSH
20503: LD_INT 2
20505: PPUSH
20506: CALL_OW 302
20510: AND
20511: IFFALSE 20578
20513: GO 20515
20515: DISABLE
// begin enable ;
20516: ENABLE
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , [ 42 , 43 , 44 ] [ Rand ( 1 , 3 ) ] ) ;
20517: LD_INT 17
20519: PPUSH
20520: LD_INT 22
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: LD_INT 42
20531: PUSH
20532: LD_INT 43
20534: PUSH
20535: LD_INT 44
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PPUSH
20546: LD_INT 3
20548: PPUSH
20549: CALL_OW 12
20553: ARRAY
20554: PPUSH
20555: CALL_OW 185
// AddComConstruct ( rufabsupp , 22 , 1 , 1 , ru_cargo_bay ) ;
20559: LD_INT 17
20561: PPUSH
20562: LD_INT 22
20564: PPUSH
20565: LD_INT 1
20567: PPUSH
20568: LD_INT 1
20570: PPUSH
20571: LD_INT 51
20573: PPUSH
20574: CALL_OW 185
// end ;
20578: END
// every 1 1$0 trigger IsOK ( rufabsupp ) and GetSide ( rufabsupp ) = 3 and IsOk ( rudepo ) and GetSide ( rudepo ) = 3 and not UnitsInside ( rufabsupp ) do var i ;
20579: LD_INT 17
20581: PPUSH
20582: CALL_OW 302
20586: PUSH
20587: LD_INT 17
20589: PPUSH
20590: CALL_OW 255
20594: PUSH
20595: LD_INT 3
20597: EQUAL
20598: AND
20599: PUSH
20600: LD_INT 2
20602: PPUSH
20603: CALL_OW 302
20607: AND
20608: PUSH
20609: LD_INT 2
20611: PPUSH
20612: CALL_OW 255
20616: PUSH
20617: LD_INT 3
20619: EQUAL
20620: AND
20621: PUSH
20622: LD_INT 17
20624: PPUSH
20625: CALL_OW 313
20629: NOT
20630: AND
20631: IFFALSE 20725
20633: GO 20635
20635: DISABLE
20636: LD_INT 0
20638: PPUSH
// begin for i = 1 to 6 do
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: DOUBLE
20645: LD_INT 1
20647: DEC
20648: ST_TO_ADDR
20649: LD_INT 6
20651: PUSH
20652: FOR_TO
20653: IFFALSE 20723
// begin uc_side = 3 ;
20655: LD_ADDR_OWVAR 20
20659: PUSH
20660: LD_INT 3
20662: ST_TO_ADDR
// uc_nation = 3 ;
20663: LD_ADDR_OWVAR 21
20667: PUSH
20668: LD_INT 3
20670: ST_TO_ADDR
// hc_gallery :=  ;
20671: LD_ADDR_OWVAR 33
20675: PUSH
20676: LD_STRING 
20678: ST_TO_ADDR
// hc_name :=  ;
20679: LD_ADDR_OWVAR 26
20683: PUSH
20684: LD_STRING 
20686: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
20687: LD_INT 0
20689: PPUSH
20690: LD_EXP 34
20694: PPUSH
20695: LD_EXP 35
20699: PPUSH
20700: CALL_OW 12
20704: PPUSH
20705: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rufabsupp ) ;
20709: CALL_OW 44
20713: PPUSH
20714: LD_INT 17
20716: PPUSH
20717: CALL_OW 52
// end ;
20721: GO 20652
20723: POP
20724: POP
// end ;
20725: PPOPN 1
20727: END
// every 2 2$0 do var i , j ;
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
20734: PPUSH
// begin wait ( [ 7 7$0 , 16 16$0 ] [ Rand ( 1 , 2 ) ] ) ;
20735: LD_INT 14700
20737: PUSH
20738: LD_INT 33600
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: PPUSH
20748: LD_INT 2
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: PPUSH
20757: CALL_OW 67
// disableHealAI = 1 ;
20761: LD_ADDR_EXP 33
20765: PUSH
20766: LD_INT 1
20768: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20769: LD_ADDR_VAR 0 1
20773: PUSH
20774: LD_INT 22
20776: PUSH
20777: LD_INT 3
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 25
20786: PUSH
20787: LD_INT 4
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PPUSH
20798: CALL_OW 69
20802: PUSH
20803: FOR_IN
20804: IFFALSE 20817
// ComExitBuilding ( i ) ;
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 122
20815: GO 20803
20817: POP
20818: POP
// wait ( 0 0$1 ) ;
20819: LD_INT 35
20821: PPUSH
20822: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20826: LD_INT 35
20828: PPUSH
20829: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
20833: LD_ADDR_VAR 0 1
20837: PUSH
20838: LD_INT 22
20840: PUSH
20841: LD_INT 3
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 25
20850: PUSH
20851: LD_INT 4
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PPUSH
20862: CALL_OW 69
20866: PUSH
20867: FOR_IN
20868: IFFALSE 20945
// begin for j in FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_INT 19
20877: PPUSH
20878: LD_INT 22
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 25
20890: PUSH
20891: LD_INT 12
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PPUSH
20902: CALL_OW 70
20906: PUSH
20907: FOR_IN
20908: IFFALSE 20941
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
20910: LD_VAR 0 1
20914: PPUSH
20915: LD_VAR 0 2
20919: PPUSH
20920: CALL_OW 250
20924: PPUSH
20925: LD_VAR 0 2
20929: PPUSH
20930: CALL_OW 251
20934: PPUSH
20935: CALL_OW 191
// end ;
20939: GO 20907
20941: POP
20942: POP
// end ;
20943: GO 20867
20945: POP
20946: POP
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) = 0 or tamedApemans >= [ 6 , 7 , 8 ] [ Difficulty ] or FilterUnitsInArea ( ApemansArea , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
20947: LD_INT 22
20949: PUSH
20950: LD_INT 3
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 25
20959: PUSH
20960: LD_INT 4
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PPUSH
20971: CALL_OW 69
20975: PUSH
20976: LD_INT 0
20978: EQUAL
20979: PUSH
20980: LD_EXP 32
20984: PUSH
20985: LD_INT 6
20987: PUSH
20988: LD_INT 7
20990: PUSH
20991: LD_INT 8
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: PUSH
20999: LD_OWVAR 67
21003: ARRAY
21004: GREATEREQUAL
21005: OR
21006: PUSH
21007: LD_INT 19
21009: PPUSH
21010: LD_INT 22
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 25
21022: PUSH
21023: LD_INT 12
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 70
21038: PUSH
21039: LD_INT 0
21041: EQUAL
21042: OR
21043: IFFALSE 20826
// disableHealAI = 0 ;
21045: LD_ADDR_EXP 33
21049: PUSH
21050: LD_INT 0
21052: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 12 ] ] ) do
21053: LD_ADDR_VAR 0 1
21057: PUSH
21058: LD_INT 22
21060: PUSH
21061: LD_INT 3
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 25
21070: PUSH
21071: LD_INT 12
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PPUSH
21082: CALL_OW 69
21086: PUSH
21087: FOR_IN
21088: IFFALSE 21104
// SetClass ( i , 16 ) ;
21090: LD_VAR 0 1
21094: PPUSH
21095: LD_INT 16
21097: PPUSH
21098: CALL_OW 336
21102: GO 21087
21104: POP
21105: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do
21106: LD_ADDR_VAR 0 1
21110: PUSH
21111: LD_INT 22
21113: PUSH
21114: LD_INT 3
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 25
21123: PUSH
21124: LD_INT 4
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PPUSH
21135: CALL_OW 69
21139: PUSH
21140: FOR_IN
21141: IFFALSE 21160
// ComMoveXY ( i , 113 , 94 ) ;
21143: LD_VAR 0 1
21147: PPUSH
21148: LD_INT 113
21150: PPUSH
21151: LD_INT 94
21153: PPUSH
21154: CALL_OW 111
21158: GO 21140
21160: POP
21161: POP
// end ;
21162: PPOPN 2
21164: END
// every 0 0$1 trigger GetSide ( rufab ) = 3 and IsOK ( rufab ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) = 0 do
21165: LD_INT 21
21167: PPUSH
21168: CALL_OW 255
21172: PUSH
21173: LD_INT 3
21175: EQUAL
21176: PUSH
21177: LD_INT 21
21179: PPUSH
21180: CALL_OW 302
21184: AND
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_INT 3
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 34
21198: PUSH
21199: LD_INT 51
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 69
21214: PUSH
21215: LD_INT 0
21217: EQUAL
21218: AND
21219: IFFALSE 21251
21221: GO 21223
21223: DISABLE
// begin AddComConstruct ( rufab , 23 , 1 , 1 , ru_cargo_bay ) ;
21224: LD_INT 21
21226: PPUSH
21227: LD_INT 23
21229: PPUSH
21230: LD_INT 1
21232: PPUSH
21233: LD_INT 1
21235: PPUSH
21236: LD_INT 51
21238: PPUSH
21239: CALL_OW 185
// wait ( 5 5$0 ) ;
21243: LD_INT 10500
21245: PPUSH
21246: CALL_OW 67
// enable ;
21250: ENABLE
// end ; end_of_file
21251: END
// every 0 0$01 trigger timeToEnd <= 0 0$00 do var i , tmp , yourCrates ;
21252: LD_EXP 26
21256: PUSH
21257: LD_INT 0
21259: LESSEQUAL
21260: IFFALSE 21409
21262: GO 21264
21264: DISABLE
21265: LD_INT 0
21267: PPUSH
21268: PPUSH
21269: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_INT 22
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 30
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 30
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: LIST
21327: PPUSH
21328: CALL_OW 69
21332: ST_TO_ADDR
// for i in tmp do
21333: LD_ADDR_VAR 0 1
21337: PUSH
21338: LD_VAR 0 2
21342: PUSH
21343: FOR_IN
21344: IFFALSE 21377
// yourCrates = yourCrates + GetResourceType ( GetBase ( i ) , 1 ) ;
21346: LD_ADDR_VAR 0 3
21350: PUSH
21351: LD_VAR 0 3
21355: PUSH
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL_OW 274
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: CALL_OW 275
21373: PLUS
21374: ST_TO_ADDR
21375: GO 21343
21377: POP
21378: POP
// if yourCrates >= needCrates then
21379: LD_VAR 0 3
21383: PUSH
21384: LD_EXP 25
21388: GREATEREQUAL
21389: IFFALSE 21402
// begin FinishMission ( yourCrates ) ;
21391: LD_VAR 0 3
21395: PPUSH
21396: CALL 21412 0 1
// end else
21400: GO 21409
// begin YouLost ( matmin ) ;
21402: LD_STRING matmin
21404: PPUSH
21405: CALL_OW 104
// end ; end ;
21409: PPOPN 3
21411: END
// export function FinishMission ( crates ) ; begin
21412: LD_INT 0
21414: PPUSH
// if crates + 100 > crates then
21415: LD_VAR 0 1
21419: PUSH
21420: LD_INT 100
21422: PLUS
21423: PUSH
21424: LD_VAR 0 1
21428: GREATER
21429: IFFALSE 21453
// begin AddMedal ( cans , 1 ) ;
21431: LD_STRING cans
21433: PPUSH
21434: LD_INT 1
21436: PPUSH
21437: CALL_OW 101
// SaveVariable ( 1 , 06_crates_1 ) ;
21441: LD_INT 1
21443: PPUSH
21444: LD_STRING 06_crates_1
21446: PPUSH
21447: CALL_OW 39
// end else
21451: GO 21474
// begin AddMedal ( cans , - 1 ) ;
21453: LD_STRING cans
21455: PPUSH
21456: LD_INT 1
21458: NEG
21459: PPUSH
21460: CALL_OW 101
// SaveVariable ( 0 , 06_crates_1 ) ;
21464: LD_INT 0
21466: PPUSH
21467: LD_STRING 06_crates_1
21469: PPUSH
21470: CALL_OW 39
// end ; if unitLost < 2 then
21474: LD_EXP 30
21478: PUSH
21479: LD_INT 2
21481: LESS
21482: IFFALSE 21496
// begin AddMedal ( people , 1 ) ;
21484: LD_STRING people
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 101
// end else
21494: GO 21507
// begin AddMedal ( people , - 1 ) ;
21496: LD_STRING people
21498: PPUSH
21499: LD_INT 1
21501: NEG
21502: PPUSH
21503: CALL_OW 101
// end ; SaveVariable ( remoteVehiclesBuild , 06_remoteVehs_1 ) ;
21507: LD_EXP 28
21511: PPUSH
21512: LD_STRING 06_remoteVehs_1
21514: PPUSH
21515: CALL_OW 39
// if remoteVehiclesBuild = 1 then
21519: LD_EXP 28
21523: PUSH
21524: LD_INT 1
21526: EQUAL
21527: IFFALSE 21541
// begin AddMedal ( remote , 1 ) ;
21529: LD_STRING remote
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 101
// end else
21539: GO 21581
// begin if GetTech ( 18 , 1 ) = state_enabled then
21541: LD_INT 18
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 321
21551: PUSH
21552: LD_INT 1
21554: EQUAL
21555: IFFALSE 21570
// begin AddMedal ( remote , - 1 ) ;
21557: LD_STRING remote
21559: PPUSH
21560: LD_INT 1
21562: NEG
21563: PPUSH
21564: CALL_OW 101
// end else
21568: GO 21581
// begin AddMedal ( remote , - 2 ) ;
21570: LD_STRING remote
21572: PPUSH
21573: LD_INT 2
21575: NEG
21576: PPUSH
21577: CALL_OW 101
// end ; end ; SaveVariable ( KurtStatus , 06_KurtStatus_1 ) ;
21581: LD_EXP 20
21585: PPUSH
21586: LD_STRING 06_KurtStatus_1
21588: PPUSH
21589: CALL_OW 39
// GiveMedals ( Main ) ;
21593: LD_STRING Main
21595: PPUSH
21596: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
21600: LD_INT 22
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 21
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 50
21622: PUSH
21623: EMPTY
21624: LIST
21625: PUSH
21626: LD_INT 2
21628: PUSH
21629: LD_INT 25
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 25
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 25
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 25
21661: PUSH
21662: LD_INT 4
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: PPUSH
21682: CALL_OW 69
21686: PPUSH
21687: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21691: LD_EXP 1
21695: PPUSH
21696: LD_EXP 43
21700: PUSH
21701: LD_STRING JMM
21703: STR
21704: PPUSH
21705: CALL_OW 38
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21709: LD_EXP 2
21713: PPUSH
21714: LD_EXP 43
21718: PUSH
21719: LD_STRING Lisa
21721: STR
21722: PPUSH
21723: CALL 5412 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21727: LD_EXP 3
21731: PPUSH
21732: LD_EXP 43
21736: PUSH
21737: LD_STRING Bobby
21739: STR
21740: PPUSH
21741: CALL 5412 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21745: LD_EXP 4
21749: PPUSH
21750: LD_EXP 43
21754: PUSH
21755: LD_STRING Cyrus
21757: STR
21758: PPUSH
21759: CALL 5412 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21763: LD_EXP 5
21767: PPUSH
21768: LD_EXP 43
21772: PUSH
21773: LD_STRING Frank
21775: STR
21776: PPUSH
21777: CALL 5412 0 2
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21781: LD_EXP 6
21785: PPUSH
21786: LD_EXP 43
21790: PUSH
21791: LD_STRING Brown
21793: STR
21794: PPUSH
21795: CALL 5412 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21799: LD_EXP 7
21803: PPUSH
21804: LD_EXP 43
21808: PUSH
21809: LD_STRING Donaldson
21811: STR
21812: PPUSH
21813: CALL 5412 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21817: LD_EXP 8
21821: PPUSH
21822: LD_EXP 43
21826: PUSH
21827: LD_STRING Gladstone
21829: STR
21830: PPUSH
21831: CALL 5412 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21835: LD_EXP 9
21839: PPUSH
21840: LD_EXP 43
21844: PUSH
21845: LD_STRING Denis
21847: STR
21848: PPUSH
21849: CALL 5412 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21853: LD_EXP 15
21857: PPUSH
21858: LD_EXP 43
21862: PUSH
21863: LD_STRING Joan
21865: STR
21866: PPUSH
21867: CALL 5412 0 2
// SaveVariable ( JoanStatus , 06_JoanStatus_1 ) ;
21871: LD_EXP 16
21875: PPUSH
21876: LD_STRING 06_JoanStatus_1
21878: PPUSH
21879: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Bobby , Cyrus , Frank , Brown , Donaldson , Gladstone , Denis , Joan ] , 06_other_survivors ) ;
21883: LD_INT 50
21885: PUSH
21886: EMPTY
21887: LIST
21888: PUSH
21889: LD_INT 22
21891: PUSH
21892: LD_INT 1
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 21
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: PUSH
21912: LD_INT 25
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 25
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 25
21934: PUSH
21935: LD_INT 3
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 25
21944: PUSH
21945: LD_INT 4
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: PPUSH
21965: CALL_OW 69
21969: PUSH
21970: LD_EXP 1
21974: PUSH
21975: LD_EXP 2
21979: PUSH
21980: LD_EXP 3
21984: PUSH
21985: LD_EXP 4
21989: PUSH
21990: LD_EXP 5
21994: PUSH
21995: LD_EXP 6
21999: PUSH
22000: LD_EXP 7
22004: PUSH
22005: LD_EXP 8
22009: PUSH
22010: LD_EXP 9
22014: PUSH
22015: LD_EXP 15
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: DIFF
22032: PPUSH
22033: LD_STRING 06_other_survivors
22035: PPUSH
22036: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) , 06_other_apemans ) ;
22040: LD_INT 50
22042: PUSH
22043: EMPTY
22044: LIST
22045: PUSH
22046: LD_INT 22
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 21
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 2
22068: PUSH
22069: LD_INT 25
22071: PUSH
22072: LD_INT 12
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 25
22081: PUSH
22082: LD_INT 16
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: PPUSH
22100: CALL_OW 69
22104: PPUSH
22105: LD_STRING 06_other_apemans
22107: PPUSH
22108: CALL_OW 38
// YouWin ;
22112: CALL_OW 103
// end ; end_of_file
22116: LD_VAR 0 2
22120: RET
// every 1 1$0 trigger sendedConvoys = 3 do
22121: LD_EXP 39
22125: PUSH
22126: LD_INT 3
22128: EQUAL
22129: IFFALSE 22244
22131: GO 22133
22133: DISABLE
// begin enable ;
22134: ENABLE
// sendedConvoys = 0 ;
22135: LD_ADDR_EXP 39
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// RespawnAttackInfantry ( 6 , 3 , [ rand ( 5 , 10 ) , rand ( 5 , 11 ) , rand ( 8 , 12 ) ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , AttackAreaHeal , 1 , rand ( 1 , 2 ) ) ;
22143: LD_INT 6
22145: PPUSH
22146: LD_INT 3
22148: PPUSH
22149: LD_INT 5
22151: PPUSH
22152: LD_INT 10
22154: PPUSH
22155: CALL_OW 12
22159: PUSH
22160: LD_INT 5
22162: PPUSH
22163: LD_INT 11
22165: PPUSH
22166: CALL_OW 12
22170: PUSH
22171: LD_INT 8
22173: PPUSH
22174: LD_INT 12
22176: PPUSH
22177: CALL_OW 12
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: LD_OWVAR 67
22191: ARRAY
22192: PPUSH
22193: LD_INT 0
22195: PPUSH
22196: LD_INT 0
22198: PPUSH
22199: LD_INT 0
22201: PPUSH
22202: LD_INT 0
22204: PPUSH
22205: LD_EXP 34
22209: PPUSH
22210: LD_EXP 35
22214: PPUSH
22215: CALL_OW 12
22219: PPUSH
22220: LD_INT 18
22222: PPUSH
22223: LD_INT 17
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: LD_INT 1
22231: PPUSH
22232: LD_INT 2
22234: PPUSH
22235: CALL_OW 12
22239: PPUSH
22240: CALL 9830 0 12
// end ; end_of_file
22244: END
// export function PrepareNature ; var i , un ; begin
22245: LD_INT 0
22247: PPUSH
22248: PPUSH
22249: PPUSH
// for i = 1 to Difficulty + 2 do
22250: LD_ADDR_VAR 0 2
22254: PUSH
22255: DOUBLE
22256: LD_INT 1
22258: DEC
22259: ST_TO_ADDR
22260: LD_OWVAR 67
22264: PUSH
22265: LD_INT 2
22267: PLUS
22268: PUSH
22269: FOR_TO
22270: IFFALSE 22379
// begin hc_sex = sex_male ;
22272: LD_ADDR_OWVAR 27
22276: PUSH
22277: LD_INT 1
22279: ST_TO_ADDR
// uc_side = 0 ;
22280: LD_ADDR_OWVAR 20
22284: PUSH
22285: LD_INT 0
22287: ST_TO_ADDR
// uc_nation = nation_nature ;
22288: LD_ADDR_OWVAR 21
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// hc_class = class_tiger ;
22296: LD_ADDR_OWVAR 28
22300: PUSH
22301: LD_INT 14
22303: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22304: LD_ADDR_OWVAR 31
22308: PUSH
22309: LD_EXP 35
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22329: LD_ADDR_OWVAR 35
22333: PUSH
22334: LD_INT 5
22336: NEG
22337: PPUSH
22338: LD_INT 5
22340: PPUSH
22341: CALL_OW 12
22345: PUSH
22346: LD_OWVAR 67
22350: MUL
22351: ST_TO_ADDR
// un = CreateHuman ;
22352: LD_ADDR_VAR 0 3
22356: PUSH
22357: CALL_OW 44
22361: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_INT 20
22369: PPUSH
22370: LD_INT 0
22372: PPUSH
22373: CALL_OW 49
// end ;
22377: GO 22269
22379: POP
22380: POP
// for i = 1 to rand ( 3 , 4 ) do
22381: LD_ADDR_VAR 0 2
22385: PUSH
22386: DOUBLE
22387: LD_INT 1
22389: DEC
22390: ST_TO_ADDR
22391: LD_INT 3
22393: PPUSH
22394: LD_INT 4
22396: PPUSH
22397: CALL_OW 12
22401: PUSH
22402: FOR_TO
22403: IFFALSE 22497
// begin hc_sex = sex_male ;
22405: LD_ADDR_OWVAR 27
22409: PUSH
22410: LD_INT 1
22412: ST_TO_ADDR
// uc_side = 0 ;
22413: LD_ADDR_OWVAR 20
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
// uc_nation = nation_nature ;
22421: LD_ADDR_OWVAR 21
22425: PUSH
22426: LD_INT 0
22428: ST_TO_ADDR
// hc_class = 18 ;
22429: LD_ADDR_OWVAR 28
22433: PUSH
22434: LD_INT 18
22436: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22437: LD_ADDR_OWVAR 31
22441: PUSH
22442: LD_EXP 35
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 0
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: ST_TO_ADDR
// hc_agressivity = 0 ;
22462: LD_ADDR_OWVAR 35
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// un = CreateHuman ;
22470: LD_ADDR_VAR 0 3
22474: PUSH
22475: CALL_OW 44
22479: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_INT 20
22487: PPUSH
22488: LD_INT 0
22490: PPUSH
22491: CALL_OW 49
// end ;
22495: GO 22402
22497: POP
22498: POP
// for i = 1 to rand ( 1 , 3 ) + Difficulty do
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: DOUBLE
22505: LD_INT 1
22507: DEC
22508: ST_TO_ADDR
22509: LD_INT 1
22511: PPUSH
22512: LD_INT 3
22514: PPUSH
22515: CALL_OW 12
22519: PUSH
22520: LD_OWVAR 67
22524: PLUS
22525: PUSH
22526: FOR_TO
22527: IFFALSE 22708
// begin hc_sex = sex_male ;
22529: LD_ADDR_OWVAR 27
22533: PUSH
22534: LD_INT 1
22536: ST_TO_ADDR
// uc_side = 0 ;
22537: LD_ADDR_OWVAR 20
22541: PUSH
22542: LD_INT 0
22544: ST_TO_ADDR
// uc_nation = nation_nature ;
22545: LD_ADDR_OWVAR 21
22549: PUSH
22550: LD_INT 0
22552: ST_TO_ADDR
// hc_class = class_apeman ;
22553: LD_ADDR_OWVAR 28
22557: PUSH
22558: LD_INT 12
22560: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22561: LD_ADDR_OWVAR 31
22565: PUSH
22566: LD_EXP 34
22570: PPUSH
22571: LD_EXP 35
22575: PPUSH
22576: CALL_OW 12
22580: PUSH
22581: LD_EXP 34
22585: PPUSH
22586: LD_EXP 35
22590: PPUSH
22591: CALL_OW 12
22595: PUSH
22596: LD_EXP 34
22600: PPUSH
22601: LD_EXP 35
22605: PPUSH
22606: CALL_OW 12
22610: PUSH
22611: LD_EXP 34
22615: PPUSH
22616: LD_EXP 35
22620: PPUSH
22621: CALL_OW 12
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: ST_TO_ADDR
// hc_agressivity = [ rand ( 20 , 30 ) , rand ( 30 , 40 ) , rand ( 40 , 50 ) ] [ Difficulty ] ;
22632: LD_ADDR_OWVAR 35
22636: PUSH
22637: LD_INT 20
22639: PPUSH
22640: LD_INT 30
22642: PPUSH
22643: CALL_OW 12
22647: PUSH
22648: LD_INT 30
22650: PPUSH
22651: LD_INT 40
22653: PPUSH
22654: CALL_OW 12
22658: PUSH
22659: LD_INT 40
22661: PPUSH
22662: LD_INT 50
22664: PPUSH
22665: CALL_OW 12
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: LD_OWVAR 67
22679: ARRAY
22680: ST_TO_ADDR
// un = CreateHuman ;
22681: LD_ADDR_VAR 0 3
22685: PUSH
22686: CALL_OW 44
22690: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn1 , false ) ;
22691: LD_VAR 0 3
22695: PPUSH
22696: LD_INT 21
22698: PPUSH
22699: LD_INT 0
22701: PPUSH
22702: CALL_OW 49
// end ;
22706: GO 22526
22708: POP
22709: POP
// for i = 1 to rand ( 5 , 6 ) + Difficulty do
22710: LD_ADDR_VAR 0 2
22714: PUSH
22715: DOUBLE
22716: LD_INT 1
22718: DEC
22719: ST_TO_ADDR
22720: LD_INT 5
22722: PPUSH
22723: LD_INT 6
22725: PPUSH
22726: CALL_OW 12
22730: PUSH
22731: LD_OWVAR 67
22735: PLUS
22736: PUSH
22737: FOR_TO
22738: IFFALSE 22884
// begin hc_sex = sex_male ;
22740: LD_ADDR_OWVAR 27
22744: PUSH
22745: LD_INT 1
22747: ST_TO_ADDR
// uc_side = 0 ;
22748: LD_ADDR_OWVAR 20
22752: PUSH
22753: LD_INT 0
22755: ST_TO_ADDR
// uc_nation = nation_nature ;
22756: LD_ADDR_OWVAR 21
22760: PUSH
22761: LD_INT 0
22763: ST_TO_ADDR
// hc_class = class_apeman ;
22764: LD_ADDR_OWVAR 28
22768: PUSH
22769: LD_INT 12
22771: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) + Difficulty , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
22772: LD_ADDR_OWVAR 31
22776: PUSH
22777: LD_EXP 34
22781: PPUSH
22782: LD_EXP 35
22786: PPUSH
22787: CALL_OW 12
22791: PUSH
22792: LD_EXP 34
22796: PPUSH
22797: LD_EXP 35
22801: PPUSH
22802: CALL_OW 12
22806: PUSH
22807: LD_OWVAR 67
22811: PLUS
22812: PUSH
22813: LD_EXP 34
22817: PPUSH
22818: LD_EXP 35
22822: PPUSH
22823: CALL_OW 12
22827: PUSH
22828: LD_EXP 34
22832: PPUSH
22833: LD_EXP 35
22837: PPUSH
22838: CALL_OW 12
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: ST_TO_ADDR
// hc_agressivity = 0 ;
22849: LD_ADDR_OWVAR 35
22853: PUSH
22854: LD_INT 0
22856: ST_TO_ADDR
// un = CreateHuman ;
22857: LD_ADDR_VAR 0 3
22861: PUSH
22862: CALL_OW 44
22866: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawn2 , false ) ;
22867: LD_VAR 0 3
22871: PPUSH
22872: LD_INT 22
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 49
// end ;
22882: GO 22737
22884: POP
22885: POP
// end ; end_of_file
22886: LD_VAR 0 1
22890: RET
// every 0 0$1 trigger IsDead ( JMM ) do
22891: LD_EXP 1
22895: PPUSH
22896: CALL_OW 301
22900: IFFALSE 22912
22902: GO 22904
22904: DISABLE
// YouLost ( JMM ) ;
22905: LD_STRING JMM
22907: PPUSH
22908: CALL_OW 104
22912: END
