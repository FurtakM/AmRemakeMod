// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// InitVariables ;
  11: CALL 28 0 0
// LoadBuildings ;
  15: CALL 44 0 0
// PrepareAlliance ;
  19: CALL 531 0 0
// Action ;
  23: CALL 1381 0 0
// end ;
  27: END
// export debug ; export function InitVariables ; begin
  28: LD_INT 0
  30: PPUSH
// debug := true ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 1
  38: ST_TO_ADDR
// end ; end_of_file
  39: LD_VAR 0 1
  43: RET
// export function LoadBuildings ; var i , tmp , b ; begin
  44: LD_INT 0
  46: PPUSH
  47: PPUSH
  48: PPUSH
  49: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
  50: LD_ADDR_VAR 0 3
  54: PUSH
  55: LD_STRING 13a_buildings
  57: PPUSH
  58: LD_INT 7
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 70
  69: PUSH
  70: LD_INT 46
  72: PUSH
  73: LD_INT 3
  75: PUSH
  76: LD_INT 10
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 0
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: PPUSH
 103: CALL_OW 30
 107: ST_TO_ADDR
// bc_kind1 := - 1 ;
 108: LD_ADDR_OWVAR 44
 112: PUSH
 113: LD_INT 1
 115: NEG
 116: ST_TO_ADDR
// bc_kind2 := - 1 ;
 117: LD_ADDR_OWVAR 45
 121: PUSH
 122: LD_INT 1
 124: NEG
 125: ST_TO_ADDR
// for i in tmp do
 126: LD_ADDR_VAR 0 2
 130: PUSH
 131: LD_VAR 0 3
 135: PUSH
 136: FOR_IN
 137: IFFALSE 360
// begin uc_side := 7 ;
 139: LD_ADDR_OWVAR 20
 143: PUSH
 144: LD_INT 7
 146: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 147: LD_ADDR_OWVAR 21
 151: PUSH
 152: LD_VAR 0 2
 156: PUSH
 157: LD_INT 2
 159: ARRAY
 160: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 161: LD_ADDR_OWVAR 42
 165: PUSH
 166: LD_VAR 0 2
 170: PUSH
 171: LD_INT 3
 173: ARRAY
 174: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 175: LD_VAR 0 2
 179: PUSH
 180: LD_INT 3
 182: ARRAY
 183: PUSH
 184: LD_INT 29
 186: PUSH
 187: LD_INT 30
 189: PUSH
 190: EMPTY
 191: LIST
 192: LIST
 193: IN
 194: IFFALSE 227
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 196: LD_VAR 0 2
 200: PUSH
 201: LD_INT 4
 203: ARRAY
 204: PPUSH
 205: LD_VAR 0 2
 209: PUSH
 210: LD_INT 5
 212: ARRAY
 213: PPUSH
 214: LD_VAR 0 2
 218: PUSH
 219: LD_INT 1
 221: ARRAY
 222: PPUSH
 223: CALL_OW 441
// if i [ 8 ] then
 227: LD_VAR 0 2
 231: PUSH
 232: LD_INT 8
 234: ARRAY
 235: IFFALSE 251
// bc_kind1 := i [ 8 ] ;
 237: LD_ADDR_OWVAR 44
 241: PUSH
 242: LD_VAR 0 2
 246: PUSH
 247: LD_INT 8
 249: ARRAY
 250: ST_TO_ADDR
// if i [ 9 ] then
 251: LD_VAR 0 2
 255: PUSH
 256: LD_INT 9
 258: ARRAY
 259: IFFALSE 275
// bc_kind2 := i [ 9 ] ;
 261: LD_ADDR_OWVAR 45
 265: PUSH
 266: LD_VAR 0 2
 270: PUSH
 271: LD_INT 9
 273: ARRAY
 274: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 275: LD_ADDR_VAR 0 4
 279: PUSH
 280: LD_VAR 0 2
 284: PUSH
 285: LD_INT 4
 287: ARRAY
 288: PPUSH
 289: LD_VAR 0 2
 293: PUSH
 294: LD_INT 5
 296: ARRAY
 297: PPUSH
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 6
 305: ARRAY
 306: PPUSH
 307: CALL_OW 47
 311: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 312: LD_VAR 0 4
 316: PPUSH
 317: LD_VAR 0 2
 321: PUSH
 322: LD_INT 7
 324: ARRAY
 325: PPUSH
 326: CALL_OW 241
// if i [ 10 ] then
 330: LD_VAR 0 2
 334: PUSH
 335: LD_INT 10
 337: ARRAY
 338: IFFALSE 358
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 340: LD_VAR 0 4
 344: PPUSH
 345: LD_VAR 0 2
 349: PUSH
 350: LD_INT 10
 352: ARRAY
 353: PPUSH
 354: CALL_OW 431
// end ;
 358: GO 136
 360: POP
 361: POP
// if HexInfo ( 144 , 65 ) = 0 then
 362: LD_INT 144
 364: PPUSH
 365: LD_INT 65
 367: PPUSH
 368: CALL_OW 428
 372: PUSH
 373: LD_INT 0
 375: EQUAL
 376: IFFALSE 405
// begin bc_type := b_warehouse ;
 378: LD_ADDR_OWVAR 42
 382: PUSH
 383: LD_INT 1
 385: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 3 ) ;
 386: LD_ADDR_VAR 0 4
 390: PUSH
 391: LD_INT 144
 393: PPUSH
 394: LD_INT 65
 396: PPUSH
 397: LD_INT 3
 399: PPUSH
 400: CALL_OW 47
 404: ST_TO_ADDR
// end ; end ;
 405: LD_VAR 0 1
 409: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 410: LD_INT 0
 412: PPUSH
 413: PPUSH
// if exist_mode then
 414: LD_VAR 0 2
 418: IFFALSE 443
// unit := CreateCharacter ( prefix & ident ) else
 420: LD_ADDR_VAR 0 5
 424: PUSH
 425: LD_VAR 0 3
 429: PUSH
 430: LD_VAR 0 1
 434: STR
 435: PPUSH
 436: CALL_OW 34
 440: ST_TO_ADDR
 441: GO 458
// unit := NewCharacter ( ident ) ;
 443: LD_ADDR_VAR 0 5
 447: PUSH
 448: LD_VAR 0 1
 452: PPUSH
 453: CALL_OW 25
 457: ST_TO_ADDR
// result := unit ;
 458: LD_ADDR_VAR 0 4
 462: PUSH
 463: LD_VAR 0 5
 467: ST_TO_ADDR
// end ;
 468: LD_VAR 0 4
 472: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
 473: LD_INT 0
 475: PPUSH
// vc_chassis := chassis ;
 476: LD_ADDR_OWVAR 37
 480: PUSH
 481: LD_VAR 0 1
 485: ST_TO_ADDR
// vc_engine := engine ;
 486: LD_ADDR_OWVAR 39
 490: PUSH
 491: LD_VAR 0 2
 495: ST_TO_ADDR
// vc_control := control ;
 496: LD_ADDR_OWVAR 38
 500: PUSH
 501: LD_VAR 0 3
 505: ST_TO_ADDR
// vc_weapon := weapon ;
 506: LD_ADDR_OWVAR 40
 510: PUSH
 511: LD_VAR 0 4
 515: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 516: LD_ADDR_OWVAR 41
 520: PUSH
 521: LD_VAR 0 5
 525: ST_TO_ADDR
// end ; end_of_file
 526: LD_VAR 0 6
 530: RET
// export JMM , Burlak , freedom ; export function PrepareAlliance ; var tmp , i , veh ; begin
 531: LD_INT 0
 533: PPUSH
 534: PPUSH
 535: PPUSH
 536: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 537: LD_ADDR_EXP 2
 541: PUSH
 542: LD_STRING JMM
 544: PPUSH
 545: LD_EXP 1
 549: NOT
 550: PPUSH
 551: LD_STRING 13a_
 553: PPUSH
 554: CALL 410 0 3
 558: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 559: LD_ADDR_EXP 3
 563: PUSH
 564: LD_STRING Burlak
 566: PPUSH
 567: LD_EXP 1
 571: NOT
 572: PPUSH
 573: LD_STRING 13a_
 575: PPUSH
 576: CALL 410 0 3
 580: ST_TO_ADDR
// freedom := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 581: LD_ADDR_EXP 4
 585: PUSH
 586: LD_INT 22
 588: PUSH
 589: LD_INT 7
 591: PUSH
 592: EMPTY
 593: LIST
 594: LIST
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: LD_INT 23
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 23
 611: PUSH
 612: LD_INT 3
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: PPUSH
 639: CALL_OW 69
 643: ST_TO_ADDR
// if freedom then
 644: LD_EXP 4
 648: IFFALSE 775
// begin freedom := freedom [ 1 ] ;
 650: LD_ADDR_EXP 4
 654: PUSH
 655: LD_EXP 4
 659: PUSH
 660: LD_INT 1
 662: ARRAY
 663: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 664: LD_EXP 4
 668: PPUSH
 669: LD_STRING freedom
 671: PPUSH
 672: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 676: LD_EXP 4
 680: PPUSH
 681: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 685: LD_EXP 2
 689: PPUSH
 690: LD_EXP 4
 694: PPUSH
 695: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 699: LD_EXP 3
 703: PPUSH
 704: LD_EXP 4
 708: PPUSH
 709: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 713: LD_EXP 4
 717: PPUSH
 718: CALL_OW 274
 722: PPUSH
 723: LD_INT 1
 725: PPUSH
 726: LD_INT 1000
 728: PPUSH
 729: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 733: LD_EXP 4
 737: PPUSH
 738: CALL_OW 274
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: LD_INT 400
 748: PPUSH
 749: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 753: LD_EXP 4
 757: PPUSH
 758: CALL_OW 274
 762: PPUSH
 763: LD_INT 3
 765: PPUSH
 766: LD_INT 30
 768: PPUSH
 769: CALL_OW 277
// end else
 773: GO 862
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 775: LD_EXP 2
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 790: LD_EXP 3
 794: PPUSH
 795: LD_EXP 2
 799: PPUSH
 800: CALL_OW 250
 804: PPUSH
 805: LD_EXP 2
 809: PPUSH
 810: CALL_OW 251
 814: PPUSH
 815: LD_INT 8
 817: PPUSH
 818: LD_INT 0
 820: PPUSH
 821: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 825: LD_EXP 2
 829: PPUSH
 830: LD_EXP 3
 834: PPUSH
 835: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
 839: LD_EXP 3
 843: PPUSH
 844: LD_EXP 2
 848: PPUSH
 849: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
 853: LD_EXP 2
 857: PPUSH
 858: CALL_OW 87
// end ; tmp := [ [ us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
 862: LD_ADDR_VAR 0 2
 866: PUSH
 867: LD_INT 3
 869: PUSH
 870: LD_INT 4
 872: PUSH
 873: LD_INT 5
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 5
 883: PUSH
 884: LD_INT 9
 886: PUSH
 887: LD_INT 7
 889: PUSH
 890: LD_INT 4
 892: PUSH
 893: LD_INT 12
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: LIST
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: ST_TO_ADDR
// uc_side := 7 ;
 907: LD_ADDR_OWVAR 20
 911: PUSH
 912: LD_INT 7
 914: ST_TO_ADDR
// uc_nation := 1 ;
 915: LD_ADDR_OWVAR 21
 919: PUSH
 920: LD_INT 1
 922: ST_TO_ADDR
// for i = 1 to 4 do
 923: LD_ADDR_VAR 0 3
 927: PUSH
 928: DOUBLE
 929: LD_INT 1
 931: DEC
 932: ST_TO_ADDR
 933: LD_INT 4
 935: PUSH
 936: FOR_TO
 937: IFFALSE 1072
// begin PrepareVehicle ( tmp [ 1 ] [ rand ( 1 , tmp [ 1 ] ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ rand ( 1 , tmp [ 2 ] ) ] , 100 ) ;
 939: LD_VAR 0 2
 943: PUSH
 944: LD_INT 1
 946: ARRAY
 947: PUSH
 948: LD_INT 1
 950: PPUSH
 951: LD_VAR 0 2
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: CALL_OW 12
 964: ARRAY
 965: PPUSH
 966: LD_INT 1
 968: PUSH
 969: LD_INT 3
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 2
 981: PPUSH
 982: CALL_OW 12
 986: ARRAY
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: LD_VAR 0 2
 995: PUSH
 996: LD_INT 2
 998: ARRAY
 999: PUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 2
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 12
1016: ARRAY
1017: PPUSH
1018: LD_INT 100
1020: PPUSH
1021: CALL 473 0 5
// veh := CreateVehicle ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: CALL_OW 45
1034: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_INT 5
1045: PPUSH
1046: CALL_OW 12
1050: PPUSH
1051: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1055: LD_VAR 0 4
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: LD_INT 0
1065: PPUSH
1066: CALL_OW 49
// end ;
1070: GO 936
1072: POP
1073: POP
// uc_nation := 3 ;
1074: LD_ADDR_OWVAR 21
1078: PUSH
1079: LD_INT 3
1081: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_cargo_bay ] ] ;
1082: LD_ADDR_VAR 0 2
1086: PUSH
1087: LD_INT 22
1089: PUSH
1090: LD_INT 23
1092: PUSH
1093: LD_INT 24
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 43
1103: PUSH
1104: LD_INT 44
1106: PUSH
1107: LD_INT 45
1109: PUSH
1110: LD_INT 51
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: ST_TO_ADDR
// for i = 1 to 4 do
1123: LD_ADDR_VAR 0 3
1127: PUSH
1128: DOUBLE
1129: LD_INT 1
1131: DEC
1132: ST_TO_ADDR
1133: LD_INT 4
1135: PUSH
1136: FOR_TO
1137: IFFALSE 1272
// begin PrepareVehicle ( tmp [ 1 ] [ rand ( 1 , tmp [ 1 ] ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ rand ( 1 , tmp [ 2 ] ) ] , 100 ) ;
1139: LD_VAR 0 2
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 1
1158: ARRAY
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: LD_INT 1
1168: PUSH
1169: LD_INT 3
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 1
1178: PPUSH
1179: LD_INT 2
1181: PPUSH
1182: CALL_OW 12
1186: ARRAY
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PUSH
1200: LD_INT 1
1202: PPUSH
1203: LD_VAR 0 2
1207: PUSH
1208: LD_INT 2
1210: ARRAY
1211: PPUSH
1212: CALL_OW 12
1216: ARRAY
1217: PPUSH
1218: LD_INT 100
1220: PPUSH
1221: CALL 473 0 5
// veh := CreateVehicle ;
1225: LD_ADDR_VAR 0 4
1229: PUSH
1230: CALL_OW 45
1234: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1235: LD_VAR 0 4
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: LD_INT 5
1245: PPUSH
1246: CALL_OW 12
1250: PPUSH
1251: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1255: LD_VAR 0 4
1259: PPUSH
1260: LD_INT 1
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 49
// end ;
1270: GO 1136
1272: POP
1273: POP
// if not FilterAllUnits ( [ [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) then
1274: LD_INT 2
1276: PUSH
1277: LD_INT 34
1279: PUSH
1280: LD_INT 12
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 34
1289: PUSH
1290: LD_INT 51
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: EMPTY
1303: LIST
1304: PPUSH
1305: CALL_OW 69
1309: NOT
1310: IFFALSE 1376
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1312: LD_INT 22
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: LD_INT 1
1320: PPUSH
1321: LD_INT 51
1323: PPUSH
1324: LD_INT 0
1326: PPUSH
1327: CALL 473 0 5
// veh := CreateVehicle ;
1331: LD_ADDR_VAR 0 4
1335: PUSH
1336: CALL_OW 45
1340: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1341: LD_VAR 0 4
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_INT 5
1351: PPUSH
1352: CALL_OW 12
1356: PPUSH
1357: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_INT 1
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// end ; end ; end_of_file
1376: LD_VAR 0 1
1380: RET
// export function Action ; begin
1381: LD_INT 0
1383: PPUSH
// end ;
1384: LD_VAR 0 1
1388: RET
