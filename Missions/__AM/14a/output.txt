// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// InitVariables ;
   8: CALL 587 0 0
// InitMacro ;
  12: CALL 52052 0 0
// PrepareNature ( 3 , 3 , 3 , 4 , 3 , 0 , 0 , nature_area , 0 ) ;
  16: LD_INT 3
  18: PPUSH
  19: LD_INT 3
  21: PPUSH
  22: LD_INT 3
  24: PPUSH
  25: LD_INT 4
  27: PPUSH
  28: LD_INT 3
  30: PPUSH
  31: LD_INT 0
  33: PPUSH
  34: LD_INT 0
  36: PPUSH
  37: LD_INT 5
  39: PPUSH
  40: LD_INT 0
  42: PPUSH
  43: CALL 47003 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_russian , 0 ) ;
  47: LD_INT 0
  49: PPUSH
  50: LD_INT 0
  52: PPUSH
  53: LD_INT 5
  55: PPUSH
  56: LD_INT 0
  58: PPUSH
  59: LD_INT 0
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: LD_INT 0
  67: PPUSH
  68: LD_INT 8
  70: PPUSH
  71: LD_INT 0
  73: PPUSH
  74: CALL 47003 0 9
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 1 , 0 , area_apeman_arabian , 0 ) ;
  78: LD_INT 0
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 6
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: LD_INT 1
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: LD_INT 6
 101: PPUSH
 102: LD_INT 0
 104: PPUSH
 105: CALL 47003 0 9
// PrepareNature ( 0 , 0 , 5 , 0 , 0 , 0 , 0 , area_apeman_alliance , 0 ) ;
 109: LD_INT 0
 111: PPUSH
 112: LD_INT 0
 114: PPUSH
 115: LD_INT 5
 117: PPUSH
 118: LD_INT 0
 120: PPUSH
 121: LD_INT 0
 123: PPUSH
 124: LD_INT 0
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: LD_INT 12
 132: PPUSH
 133: LD_INT 0
 135: PPUSH
 136: CALL 47003 0 9
// PrepareArabian ;
 140: CALL 3421 0 0
// PrepareRussian ;
 144: CALL 2548 0 0
// PrepareAlliance ;
 148: CALL 697 0 0
// MC_Start ( ) ;
 152: CALL 53110 0 0
// if debug then
 156: LD_EXP 1
 160: IFFALSE 169
// FogOff ( 1 ) ;
 162: LD_INT 1
 164: PPUSH
 165: CALL_OW 344
// Action ;
 169: CALL 6586 0 0
// end ;
 173: END
// export function CustomInitMacro ; var i ; begin
 174: LD_INT 0
 176: PPUSH
 177: PPUSH
// mc_parking := [ parking_arabian , parking_russian ] ;
 178: LD_ADDR_EXP 81
 182: PUSH
 183: LD_INT 1
 185: PUSH
 186: LD_INT 2
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: ST_TO_ADDR
// mc_scan_area := [ area_base_arabian , area_base_russian ] ;
 193: LD_ADDR_EXP 82
 197: PUSH
 198: LD_INT 3
 200: PUSH
 201: LD_INT 4
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 12 , 15 , 18 ] [ Difficulty ] , minefield ) ;
 208: LD_INT 1
 210: PPUSH
 211: LD_INT 12
 213: PUSH
 214: LD_INT 15
 216: PUSH
 217: LD_INT 18
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: PUSH
 225: LD_OWVAR 67
 229: ARRAY
 230: PPUSH
 231: LD_INT 7
 233: PPUSH
 234: CALL 67662 0 3
// MC_SetDefenderList ( 1 , arabian_guard ) ;
 238: LD_INT 1
 240: PPUSH
 241: LD_EXP 53
 245: PPUSH
 246: CALL 68110 0 2
// MC_SetTame ( 1 , area_apeman_arabian ) ;
 250: LD_INT 1
 252: PPUSH
 253: LD_INT 6
 255: PPUSH
 256: CALL 68563 0 2
// MC_SetCratesArea ( 1 , [ area_collect_arabian ] ) ;
 260: LD_INT 1
 262: PPUSH
 263: LD_INT 9
 265: PUSH
 266: EMPTY
 267: LIST
 268: PPUSH
 269: CALL 68832 0 2
// MC_InsertProduceList ( 1 , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ) ;
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 13
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 32
 287: PUSH
 288: EMPTY
 289: LIST
 290: LIST
 291: LIST
 292: LIST
 293: PPUSH
 294: CALL 68047 0 2
// MC_SetLabKind ( 2 , [ b_lab_computer , b_lab_spacetime , b_lab_weapon , b_lab_siberium ] ) ;
 298: LD_INT 2
 300: PPUSH
 301: LD_INT 12
 303: PUSH
 304: LD_INT 14
 306: PUSH
 307: LD_INT 10
 309: PUSH
 310: LD_INT 11
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL 68739 0 2
// MC_SetDefenderList ( 2 , russian_guard ) ;
 323: LD_INT 2
 325: PPUSH
 326: LD_EXP 50
 330: PPUSH
 331: CALL 68110 0 2
// MC_SetTame ( 2 , area_apeman_russian ) ;
 335: LD_INT 2
 337: PPUSH
 338: LD_INT 8
 340: PPUSH
 341: CALL 68563 0 2
// MC_SetCratesArea ( 2 , [ area_collect_russian ] ) ;
 345: LD_INT 2
 347: PPUSH
 348: LD_INT 10
 350: PUSH
 351: EMPTY
 352: LIST
 353: PPUSH
 354: CALL 68832 0 2
// MC_SetBuildingList ( 2 , [ [ b_lab , 71 , 116 , 4 ] , [ b_armoury , 85 , 116 , 4 ] , [ b_bunker , 83 , 111 , 4 ] , [ b_bunker , 87 , 121 , 4 ] , [ b_turret , 88 , 128 , 4 ] , [ b_bunker , 59 , 89 , 3 ] , [ b_turret , 69 , 98 , 3 ] , [ b_turret , 77 , 103 , 3 ] , [ b_turret , 83 , 105 , 3 ] , [ b_turret , 71 , 125 , 5 ] ] ) ;
 358: LD_INT 2
 360: PPUSH
 361: LD_INT 6
 363: PUSH
 364: LD_INT 71
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 4
 381: PUSH
 382: LD_INT 85
 384: PUSH
 385: LD_INT 116
 387: PUSH
 388: LD_INT 4
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: LD_INT 32
 399: PUSH
 400: LD_INT 83
 402: PUSH
 403: LD_INT 111
 405: PUSH
 406: LD_INT 4
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 32
 417: PUSH
 418: LD_INT 87
 420: PUSH
 421: LD_INT 121
 423: PUSH
 424: LD_INT 4
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: LIST
 431: LIST
 432: PUSH
 433: LD_INT 33
 435: PUSH
 436: LD_INT 88
 438: PUSH
 439: LD_INT 128
 441: PUSH
 442: LD_INT 4
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 32
 453: PUSH
 454: LD_INT 59
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 33
 471: PUSH
 472: LD_INT 69
 474: PUSH
 475: LD_INT 98
 477: PUSH
 478: LD_INT 3
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 33
 489: PUSH
 490: LD_INT 77
 492: PUSH
 493: LD_INT 103
 495: PUSH
 496: LD_INT 3
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_INT 33
 507: PUSH
 508: LD_INT 83
 510: PUSH
 511: LD_INT 105
 513: PUSH
 514: LD_INT 3
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 33
 525: PUSH
 526: LD_INT 71
 528: PUSH
 529: LD_INT 125
 531: PUSH
 532: LD_INT 5
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: LIST
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL 67872 0 2
// MC_InsertProduceList ( 2 , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ) ;
 557: LD_INT 2
 559: PPUSH
 560: LD_INT 21
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 51
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL 68047 0 2
// end ;
 582: LD_VAR 0 1
 586: RET
// export debug , game , freedom , gossudarov_arrive , ru_lab_builded , player_spotted , first_attack , ar_base_spotted , ar_active_attack , ar_attackers , first_powell_attack , abdul_escaped , loss_counter ; function InitVariables ; begin
 587: LD_INT 0
 589: PPUSH
// debug := false ;
 590: LD_ADDR_EXP 1
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// game := true ;
 598: LD_ADDR_EXP 2
 602: PUSH
 603: LD_INT 1
 605: ST_TO_ADDR
// gossudarov_arrive := false ;
 606: LD_ADDR_EXP 4
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// ru_lab_builded := false ;
 614: LD_ADDR_EXP 5
 618: PUSH
 619: LD_INT 0
 621: ST_TO_ADDR
// player_spotted := false ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_INT 0
 629: ST_TO_ADDR
// first_attack := false ;
 630: LD_ADDR_EXP 7
 634: PUSH
 635: LD_INT 0
 637: ST_TO_ADDR
// ru_attackers := [ ] ;
 638: LD_ADDR_EXP 51
 642: PUSH
 643: EMPTY
 644: ST_TO_ADDR
// ar_base_spotted := false ;
 645: LD_ADDR_EXP 8
 649: PUSH
 650: LD_INT 0
 652: ST_TO_ADDR
// ar_active_attack := false ;
 653: LD_ADDR_EXP 9
 657: PUSH
 658: LD_INT 0
 660: ST_TO_ADDR
// ar_attackers := [ ] ;
 661: LD_ADDR_EXP 10
 665: PUSH
 666: EMPTY
 667: ST_TO_ADDR
// first_powell_attack := false ;
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_INT 0
 675: ST_TO_ADDR
// abdul_escaped := true ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// loss_counter := 0 ;
 684: LD_ADDR_EXP 13
 688: PUSH
 689: LD_INT 0
 691: ST_TO_ADDR
// end ; end_of_file
 692: LD_VAR 0 1
 696: RET
// export JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export Gossudarov , Kirilenkova , Titov , Fadeev , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov ; export Burlak , Belkov , Gnyevko ; export Masha ; export function PrepareAlliance ; var veh , i , tmp ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 7 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 7
 710: ST_TO_ADDR
// uc_nation := 1 ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 12a_ ) ;
 719: LD_ADDR_EXP 14
 723: PUSH
 724: LD_STRING JMM
 726: PPUSH
 727: LD_EXP 1
 731: NOT
 732: PPUSH
 733: LD_STRING 12a_
 735: PPUSH
 736: CALL 13465 0 3
 740: ST_TO_ADDR
// PlaceUnitXY ( JMM , 71 , 23 , false ) ;
 741: LD_EXP 14
 745: PPUSH
 746: LD_INT 71
 748: PPUSH
 749: LD_INT 23
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 48
// SetClass ( JMM , 2 ) ;
 759: LD_EXP 14
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: CALL_OW 336
// Roth := PrepareUnit ( Roth , ( not debug ) , 12a_ ) ;
 771: LD_ADDR_EXP 15
 775: PUSH
 776: LD_STRING Roth
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_STRING 12a_
 787: PPUSH
 788: CALL 13465 0 3
 792: ST_TO_ADDR
// if Roth then
 793: LD_EXP 15
 797: IFFALSE 817
// PlaceUnitXY ( Roth , 71 , 21 , false ) ;
 799: LD_EXP 15
 803: PPUSH
 804: LD_INT 71
 806: PPUSH
 807: LD_INT 21
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL_OW 48
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 12a_ ) ;
 817: LD_ADDR_EXP 16
 821: PUSH
 822: LD_STRING Lisa
 824: PPUSH
 825: LD_EXP 1
 829: NOT
 830: PPUSH
 831: LD_STRING 12a_
 833: PPUSH
 834: CALL 13465 0 3
 838: ST_TO_ADDR
// if Lisa then
 839: LD_EXP 16
 843: IFFALSE 860
// PlaceUnitArea ( Lisa , alliance_start , false ) ;
 845: LD_EXP 16
 849: PPUSH
 850: LD_INT 13
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 12a_ ) ;
 860: LD_ADDR_EXP 17
 864: PUSH
 865: LD_STRING Donaldson
 867: PPUSH
 868: LD_EXP 1
 872: NOT
 873: PPUSH
 874: LD_STRING 12a_
 876: PPUSH
 877: CALL 13465 0 3
 881: ST_TO_ADDR
// if Donaldson then
 882: LD_EXP 17
 886: IFFALSE 903
// PlaceUnitArea ( Donaldson , alliance_start , false ) ;
 888: LD_EXP 17
 892: PPUSH
 893: LD_INT 13
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 12a_ ) ;
 903: LD_ADDR_EXP 18
 907: PUSH
 908: LD_STRING Bobby
 910: PPUSH
 911: LD_EXP 1
 915: NOT
 916: PPUSH
 917: LD_STRING 12a_
 919: PPUSH
 920: CALL 13465 0 3
 924: ST_TO_ADDR
// if Bobby then
 925: LD_EXP 18
 929: IFFALSE 946
// PlaceUnitArea ( Bobby , alliance_start , false ) ;
 931: LD_EXP 18
 935: PPUSH
 936: LD_INT 13
 938: PPUSH
 939: LD_INT 0
 941: PPUSH
 942: CALL_OW 49
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 12a_ ) ;
 946: LD_ADDR_EXP 19
 950: PUSH
 951: LD_STRING Cyrus
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_STRING 12a_
 962: PPUSH
 963: CALL 13465 0 3
 967: ST_TO_ADDR
// if Cyrus then
 968: LD_EXP 19
 972: IFFALSE 989
// PlaceUnitArea ( Cyrus , alliance_start , false ) ;
 974: LD_EXP 19
 978: PPUSH
 979: LD_INT 13
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 49
// Denis := PrepareUnit ( Denis , ( not debug ) , 12a_ ) ;
 989: LD_ADDR_EXP 20
 993: PUSH
 994: LD_STRING Denis
 996: PPUSH
 997: LD_EXP 1
1001: NOT
1002: PPUSH
1003: LD_STRING 12a_
1005: PPUSH
1006: CALL 13465 0 3
1010: ST_TO_ADDR
// if Denis then
1011: LD_EXP 20
1015: IFFALSE 1032
// PlaceUnitArea ( Denis , alliance_start , false ) ;
1017: LD_EXP 20
1021: PPUSH
1022: LD_INT 13
1024: PPUSH
1025: LD_INT 0
1027: PPUSH
1028: CALL_OW 49
// Brown := PrepareUnit ( Brown , ( not debug ) , 12a_ ) ;
1032: LD_ADDR_EXP 21
1036: PUSH
1037: LD_STRING Brown
1039: PPUSH
1040: LD_EXP 1
1044: NOT
1045: PPUSH
1046: LD_STRING 12a_
1048: PPUSH
1049: CALL 13465 0 3
1053: ST_TO_ADDR
// if Brown then
1054: LD_EXP 21
1058: IFFALSE 1075
// PlaceUnitArea ( Brown , alliance_start , false ) ;
1060: LD_EXP 21
1064: PPUSH
1065: LD_INT 13
1067: PPUSH
1068: LD_INT 0
1070: PPUSH
1071: CALL_OW 49
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 12a_ ) ;
1075: LD_ADDR_EXP 22
1079: PUSH
1080: LD_STRING Gladstone
1082: PPUSH
1083: LD_EXP 1
1087: NOT
1088: PPUSH
1089: LD_STRING 12a_
1091: PPUSH
1092: CALL 13465 0 3
1096: ST_TO_ADDR
// if Gladstone then
1097: LD_EXP 22
1101: IFFALSE 1118
// PlaceUnitArea ( Gladstone , alliance_start , false ) ;
1103: LD_EXP 22
1107: PPUSH
1108: LD_INT 13
1110: PPUSH
1111: LD_INT 0
1113: PPUSH
1114: CALL_OW 49
// Houten := PrepareUnit ( Houten , ( not debug ) , 12a_ ) ;
1118: LD_ADDR_EXP 23
1122: PUSH
1123: LD_STRING Houten
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_STRING 12a_
1134: PPUSH
1135: CALL 13465 0 3
1139: ST_TO_ADDR
// if Houten then
1140: LD_EXP 23
1144: IFFALSE 1161
// PlaceUnitArea ( Houten , alliance_start , false ) ;
1146: LD_EXP 23
1150: PPUSH
1151: LD_INT 13
1153: PPUSH
1154: LD_INT 0
1156: PPUSH
1157: CALL_OW 49
// Cornel := PrepareUnit ( Cornel , ( not debug ) , 12a_ ) ;
1161: LD_ADDR_EXP 24
1165: PUSH
1166: LD_STRING Cornel
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 12a_
1177: PPUSH
1178: CALL 13465 0 3
1182: ST_TO_ADDR
// if Cornel then
1183: LD_EXP 24
1187: IFFALSE 1204
// PlaceUnitArea ( Cornel , alliance_start , false ) ;
1189: LD_EXP 24
1193: PPUSH
1194: LD_INT 13
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 49
// Gary := PrepareUnit ( Gary , ( not debug ) , 12a_ ) ;
1204: LD_ADDR_EXP 25
1208: PUSH
1209: LD_STRING Gary
1211: PPUSH
1212: LD_EXP 1
1216: NOT
1217: PPUSH
1218: LD_STRING 12a_
1220: PPUSH
1221: CALL 13465 0 3
1225: ST_TO_ADDR
// if Gary then
1226: LD_EXP 25
1230: IFFALSE 1247
// PlaceUnitArea ( Gary , alliance_start , false ) ;
1232: LD_EXP 25
1236: PPUSH
1237: LD_INT 13
1239: PPUSH
1240: LD_INT 0
1242: PPUSH
1243: CALL_OW 49
// Frank := PrepareUnit ( Frank , ( not debug ) , 12a_ ) ;
1247: LD_ADDR_EXP 26
1251: PUSH
1252: LD_STRING Frank
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 12a_
1263: PPUSH
1264: CALL 13465 0 3
1268: ST_TO_ADDR
// if Frank then
1269: LD_EXP 26
1273: IFFALSE 1290
// PlaceUnitArea ( Frank , alliance_start , false ) ;
1275: LD_EXP 26
1279: PPUSH
1280: LD_INT 13
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 12a_ ) ;
1290: LD_ADDR_EXP 27
1294: PUSH
1295: LD_STRING Kikuchi
1297: PPUSH
1298: LD_EXP 1
1302: NOT
1303: PPUSH
1304: LD_STRING 12a_
1306: PPUSH
1307: CALL 13465 0 3
1311: ST_TO_ADDR
// if Kikuchi then
1312: LD_EXP 27
1316: IFFALSE 1333
// PlaceUnitArea ( Kikuchi , alliance_start , false ) ;
1318: LD_EXP 27
1322: PPUSH
1323: LD_INT 13
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// Simms := PrepareUnit ( Simms , ( not debug ) , 12a_ ) ;
1333: LD_ADDR_EXP 28
1337: PUSH
1338: LD_STRING Simms
1340: PPUSH
1341: LD_EXP 1
1345: NOT
1346: PPUSH
1347: LD_STRING 12a_
1349: PPUSH
1350: CALL 13465 0 3
1354: ST_TO_ADDR
// if Simms then
1355: LD_EXP 28
1359: IFFALSE 1376
// PlaceUnitArea ( Simms , alliance_start , false ) ;
1361: LD_EXP 28
1365: PPUSH
1366: LD_INT 13
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 49
// Joan := PrepareUnit ( Joan , ( not debug ) , 12a_ ) ;
1376: LD_ADDR_EXP 29
1380: PUSH
1381: LD_STRING Joan
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_STRING 12a_
1392: PPUSH
1393: CALL 13465 0 3
1397: ST_TO_ADDR
// if Joan then
1398: LD_EXP 29
1402: IFFALSE 1419
// PlaceUnitArea ( Joan , alliance_start , false ) ;
1404: LD_EXP 29
1408: PPUSH
1409: LD_INT 13
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 12a_ ) ;
1419: LD_ADDR_EXP 30
1423: PUSH
1424: LD_STRING DeltaDoctor
1426: PPUSH
1427: LD_EXP 1
1431: NOT
1432: PPUSH
1433: LD_STRING 12a_
1435: PPUSH
1436: CALL 13465 0 3
1440: ST_TO_ADDR
// if DeltaDoctor then
1441: LD_EXP 30
1445: IFFALSE 1462
// PlaceUnitArea ( DeltaDoctor , alliance_start , false ) ;
1447: LD_EXP 30
1451: PPUSH
1452: LD_INT 13
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// tmp := CreateCharacterSet ( 12a_others ) ;
1462: LD_ADDR_VAR 0 4
1466: PUSH
1467: LD_STRING 12a_others
1469: PPUSH
1470: CALL_OW 31
1474: ST_TO_ADDR
// if tmp then
1475: LD_VAR 0 4
1479: IFFALSE 1513
// for i in tmp do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: LD_VAR 0 4
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1511
// PlaceUnitArea ( i , alliance_start , false ) ;
1494: LD_VAR 0 3
1498: PPUSH
1499: LD_INT 13
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
1509: GO 1491
1511: POP
1512: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1513: LD_INT 3
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: LD_INT 12
1524: PPUSH
1525: LD_INT 100
1527: PPUSH
1528: CALL 19545 0 5
// veh := CreateVehicle ;
1532: LD_ADDR_VAR 0 2
1536: PUSH
1537: CALL_OW 45
1541: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1542: LD_VAR 0 2
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: CALL_OW 233
// PlaceUnitXY ( veh , 63 , 9 , false ) ;
1554: LD_VAR 0 2
1558: PPUSH
1559: LD_INT 63
1561: PPUSH
1562: LD_INT 9
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 48
// SetCargo ( veh , mat_artifact , 30 ) ;
1572: LD_VAR 0 2
1576: PPUSH
1577: LD_INT 4
1579: PPUSH
1580: LD_INT 30
1582: PPUSH
1583: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
1587: LD_STRING 11_artifact_captured
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 30
1597: IFFALSE 1673
// begin PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
1599: LD_INT 3
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: LD_INT 3
1607: PPUSH
1608: LD_INT 12
1610: PPUSH
1611: LD_INT 100
1613: PPUSH
1614: CALL 19545 0 5
// veh := CreateVehicle ;
1618: LD_ADDR_VAR 0 2
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1628: LD_VAR 0 2
1632: PPUSH
1633: LD_INT 2
1635: PPUSH
1636: CALL_OW 233
// PlaceUnitXY ( veh , 60 , 4 , false ) ;
1640: LD_VAR 0 2
1644: PPUSH
1645: LD_INT 60
1647: PPUSH
1648: LD_INT 4
1650: PPUSH
1651: LD_INT 0
1653: PPUSH
1654: CALL_OW 48
// SetCargo ( veh , mat_artifact , 50 ) ;
1658: LD_VAR 0 2
1662: PPUSH
1663: LD_INT 4
1665: PPUSH
1666: LD_INT 50
1668: PPUSH
1669: CALL_OW 290
// end ; end ;
1673: LD_VAR 0 1
1677: RET
// export function PrepareGossudarov ; var tmp , i ; begin
1678: LD_INT 0
1680: PPUSH
1681: PPUSH
1682: PPUSH
// uc_side := 6 ;
1683: LD_ADDR_OWVAR 20
1687: PUSH
1688: LD_INT 6
1690: ST_TO_ADDR
// uc_nation := 3 ;
1691: LD_ADDR_OWVAR 21
1695: PUSH
1696: LD_INT 3
1698: ST_TO_ADDR
// InitHc ;
1699: CALL_OW 19
// Gossudarov := NewCharacter ( Gossudarov ) ;
1703: LD_ADDR_EXP 31
1707: PUSH
1708: LD_STRING Gossudarov
1710: PPUSH
1711: CALL_OW 25
1715: ST_TO_ADDR
// Kirilenkova := NewCharacter ( Kirilenkova ) ;
1716: LD_ADDR_EXP 32
1720: PUSH
1721: LD_STRING Kirilenkova
1723: PPUSH
1724: CALL_OW 25
1728: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
1729: LD_ADDR_EXP 33
1733: PUSH
1734: LD_STRING Titov
1736: PPUSH
1737: CALL_OW 25
1741: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
1742: LD_ADDR_EXP 38
1746: PUSH
1747: LD_STRING Oblukov
1749: PPUSH
1750: CALL_OW 25
1754: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
1755: LD_ADDR_EXP 35
1759: PUSH
1760: LD_STRING Dolgov
1762: PPUSH
1763: CALL_OW 25
1767: ST_TO_ADDR
// Petrosyan := NewCharacter ( Petrosyan ) ;
1768: LD_ADDR_EXP 36
1772: PUSH
1773: LD_STRING Petrosyan
1775: PPUSH
1776: CALL_OW 25
1780: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
1781: LD_ADDR_EXP 37
1785: PUSH
1786: LD_STRING Scholtze
1788: PPUSH
1789: CALL_OW 25
1793: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
1794: LD_ADDR_EXP 39
1798: PUSH
1799: LD_STRING Kapitsova
1801: PPUSH
1802: CALL_OW 25
1806: ST_TO_ADDR
// tmp := [ Gossudarov , Kirilenkova , Titov , Oblukov , Dolgov , Petrosyan , Scholtze , Kapitsova ] ;
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: LD_EXP 31
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: LD_EXP 33
1826: PUSH
1827: LD_EXP 38
1831: PUSH
1832: LD_EXP 35
1836: PUSH
1837: LD_EXP 36
1841: PUSH
1842: LD_EXP 37
1846: PUSH
1847: LD_EXP 39
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: ST_TO_ADDR
// for i in tmp do
1862: LD_ADDR_VAR 0 3
1866: PUSH
1867: LD_VAR 0 2
1871: PUSH
1872: FOR_IN
1873: IFFALSE 1892
// PlaceUnitArea ( i , gossudarov_spawn , false ) ;
1875: LD_VAR 0 3
1879: PPUSH
1880: LD_INT 14
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: CALL_OW 49
1890: GO 1872
1892: POP
1893: POP
// ComMoveXY ( tmp , GetX ( freedom ) , GetY ( freedom ) ) ;
1894: LD_VAR 0 2
1898: PPUSH
1899: LD_EXP 3
1903: PPUSH
1904: CALL_OW 250
1908: PPUSH
1909: LD_EXP 3
1913: PPUSH
1914: CALL_OW 251
1918: PPUSH
1919: CALL_OW 111
// end ;
1923: LD_VAR 0 1
1927: RET
// export function PrepareBelkov ; begin
1928: LD_INT 0
1930: PPUSH
// uc_side := 4 ;
1931: LD_ADDR_OWVAR 20
1935: PUSH
1936: LD_INT 4
1938: ST_TO_ADDR
// uc_nation := 3 ;
1939: LD_ADDR_OWVAR 21
1943: PUSH
1944: LD_INT 3
1946: ST_TO_ADDR
// InitHc ;
1947: CALL_OW 19
// Belkov := NewCharacter ( Belkov ) ;
1951: LD_ADDR_EXP 46
1955: PUSH
1956: LD_STRING Belkov
1958: PPUSH
1959: CALL_OW 25
1963: ST_TO_ADDR
// PlaceUnitArea ( Belkov , gossudarov_spawn , false ) ;
1964: LD_EXP 46
1968: PPUSH
1969: LD_INT 14
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: CALL_OW 49
// end ;
1979: LD_VAR 0 1
1983: RET
// export function PrepareGnyevko ; begin
1984: LD_INT 0
1986: PPUSH
// uc_side := 4 ;
1987: LD_ADDR_OWVAR 20
1991: PUSH
1992: LD_INT 4
1994: ST_TO_ADDR
// uc_nation := 3 ;
1995: LD_ADDR_OWVAR 21
1999: PUSH
2000: LD_INT 3
2002: ST_TO_ADDR
// InitHc ;
2003: CALL_OW 19
// Gnyevko := NewCharacter ( Gnyevko ) ;
2007: LD_ADDR_EXP 47
2011: PUSH
2012: LD_STRING Gnyevko
2014: PPUSH
2015: CALL_OW 25
2019: ST_TO_ADDR
// PlaceUnitArea ( Gnyevko , gossudarov_spawn , false ) ;
2020: LD_EXP 47
2024: PPUSH
2025: LD_INT 14
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: CALL_OW 49
// end ;
2035: LD_VAR 0 1
2039: RET
// export function PrepareBurlak ; var i , tmp ; begin
2040: LD_INT 0
2042: PPUSH
2043: PPUSH
2044: PPUSH
// uc_side := 4 ;
2045: LD_ADDR_OWVAR 20
2049: PUSH
2050: LD_INT 4
2052: ST_TO_ADDR
// uc_nation := 3 ;
2053: LD_ADDR_OWVAR 21
2057: PUSH
2058: LD_INT 3
2060: ST_TO_ADDR
// InitHc ;
2061: CALL_OW 19
// Burlak := NewCharacter ( Burlak ) ;
2065: LD_ADDR_EXP 45
2069: PUSH
2070: LD_STRING Burlak
2072: PPUSH
2073: CALL_OW 25
2077: ST_TO_ADDR
// PrepareVehicle ( [ ru_heavy_tracked , ru_heavy_wheeled , ru_medium_tracked ] [ Difficulty ] , engine_combustion , control_manual , [ ru_rocket_launcher , ru_gun , ru_gatling_gun ] [ Difficulty ] , 0 ) ;
2078: LD_INT 24
2080: PUSH
2081: LD_INT 23
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_OWVAR 67
2096: ARRAY
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 44
2109: PUSH
2110: LD_INT 43
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: PUSH
2118: LD_OWVAR 67
2122: ARRAY
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL 19545 0 5
// Masha := CreateVehicle ;
2131: LD_ADDR_EXP 48
2135: PUSH
2136: CALL_OW 45
2140: ST_TO_ADDR
// SetLives ( [ Masha , Burlak ] , 499 ) ;
2141: LD_EXP 48
2145: PUSH
2146: LD_EXP 45
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PPUSH
2155: LD_INT 499
2157: PPUSH
2158: CALL_OW 234
// SetDir ( Masha , 3 ) ;
2162: LD_EXP 48
2166: PPUSH
2167: LD_INT 3
2169: PPUSH
2170: CALL_OW 233
// SetMark ( Masha , 1 ) ;
2174: LD_EXP 48
2178: PPUSH
2179: LD_INT 1
2181: PPUSH
2182: CALL_OW 242
// PlaceUnitArea ( Masha , burlak_spawn , false ) ;
2186: LD_EXP 48
2190: PPUSH
2191: LD_INT 18
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: CALL_OW 49
// PlaceUnitXY ( Burlak , 125 , 1 , false ) ;
2201: LD_EXP 45
2205: PPUSH
2206: LD_INT 125
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 48
// ComMoveUnit ( Burlak , Masha ) ;
2219: LD_EXP 45
2223: PPUSH
2224: LD_EXP 48
2228: PPUSH
2229: CALL_OW 112
// wait ( 0 0$0.3 ) ;
2233: LD_INT 10
2235: PPUSH
2236: CALL_OW 67
// AddComMoveXY ( Masha , 110 , 10 ) ;
2240: LD_EXP 48
2244: PPUSH
2245: LD_INT 110
2247: PPUSH
2248: LD_INT 10
2250: PPUSH
2251: CALL_OW 171
// Petrovova := NewCharacter ( Petrovova ) ;
2255: LD_ADDR_EXP 41
2259: PUSH
2260: LD_STRING Petrovova
2262: PPUSH
2263: CALL_OW 25
2267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
2268: LD_ADDR_EXP 43
2272: PUSH
2273: LD_STRING Kuzmov
2275: PPUSH
2276: CALL_OW 25
2280: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
2281: LD_ADDR_EXP 42
2285: PUSH
2286: LD_STRING Kovalyuk
2288: PPUSH
2289: CALL_OW 25
2293: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
2294: LD_ADDR_EXP 40
2298: PUSH
2299: LD_STRING Lipshchin
2301: PPUSH
2302: CALL_OW 25
2306: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
2307: LD_ADDR_EXP 44
2311: PUSH
2312: LD_STRING Karamazov
2314: PPUSH
2315: CALL_OW 25
2319: ST_TO_ADDR
// tmp := [ Petrovova , Kuzmov , Kovalyuk , Lipshchin , Karamazov ] ;
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 43
2334: PUSH
2335: LD_EXP 42
2339: PUSH
2340: LD_EXP 40
2344: PUSH
2345: LD_EXP 44
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// for i in tmp do
2357: LD_ADDR_VAR 0 2
2361: PUSH
2362: LD_VAR 0 3
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2407
// begin SetLives ( i , rand ( 399 , 799 ) ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 399
2377: PPUSH
2378: LD_INT 799
2380: PPUSH
2381: CALL_OW 12
2385: PPUSH
2386: CALL_OW 234
// PlaceUnitArea ( i , burlak_friends_spawn , false ) ;
2390: LD_VAR 0 2
2394: PPUSH
2395: LD_INT 19
2397: PPUSH
2398: LD_INT 0
2400: PPUSH
2401: CALL_OW 49
// end ;
2405: GO 2367
2407: POP
2408: POP
// ComMoveXY ( tmp , 116 , 8 ) ;
2409: LD_VAR 0 3
2413: PPUSH
2414: LD_INT 116
2416: PPUSH
2417: LD_INT 8
2419: PPUSH
2420: CALL_OW 111
// AddComHold ( tmp ) ;
2424: LD_VAR 0 3
2428: PPUSH
2429: CALL_OW 200
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 1
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: PPUSH
2453: CALL_OW 72
2457: PUSH
2458: FOR_IN
2459: IFFALSE 2499
// begin AddComMoveToArea ( i , burlak_crawl_area ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_INT 20
2468: PPUSH
2469: CALL_OW 173
// AddComTurnXY ( i , 147 , 45 ) ;
2473: LD_VAR 0 2
2477: PPUSH
2478: LD_INT 147
2480: PPUSH
2481: LD_INT 45
2483: PPUSH
2484: CALL_OW 178
// AddComCrawl ( i ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: CALL_OW 197
// end ;
2497: GO 2458
2499: POP
2500: POP
// repeat wait ( 0 0$1 ) ;
2501: LD_INT 35
2503: PPUSH
2504: CALL_OW 67
// until IsAt ( Masha , 110 , 10 ) ;
2508: LD_EXP 48
2512: PPUSH
2513: LD_INT 110
2515: PPUSH
2516: LD_INT 10
2518: PPUSH
2519: CALL_OW 307
2523: IFFALSE 2501
// ComStop ( Burlak ) ;
2525: LD_EXP 45
2529: PPUSH
2530: CALL_OW 141
// AddComHold ( Burlak ) ;
2534: LD_EXP 45
2538: PPUSH
2539: CALL_OW 200
// end ; end_of_file
2543: LD_VAR 0 1
2547: RET
// export russian_force , russian_guard , ru_attackers ; export function PrepareRussian ; var i , veh , tmp ; begin
2548: LD_INT 0
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
// uc_side := 3 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// uc_nation := 3 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 3
2569: ST_TO_ADDR
// russian_force := PrepareBase ( ru_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 10000 , 3000 , 300 ] , [ 9 , 5 , 6 , 6 ] ) ;
2570: LD_ADDR_EXP 49
2574: PUSH
2575: LD_INT 47
2577: PPUSH
2578: LD_STRING 
2580: PPUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 8
2586: PUSH
2587: LD_INT 9
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_OWVAR 67
2599: ARRAY
2600: PPUSH
2601: LD_INT 10000
2603: PUSH
2604: LD_INT 3000
2606: PUSH
2607: LD_INT 300
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: PPUSH
2615: LD_INT 9
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 6
2623: PUSH
2624: LD_INT 6
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL 22944 0 5
2637: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , russian_force ) ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_EXP 57
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_EXP 49
2655: PPUSH
2656: CALL_OW 1
2660: ST_TO_ADDR
// tmp := [ ] ;
2661: LD_ADDR_VAR 0 4
2665: PUSH
2666: EMPTY
2667: ST_TO_ADDR
// for i = 1 to 4 do
2668: LD_ADDR_VAR 0 2
2672: PUSH
2673: DOUBLE
2674: LD_INT 1
2676: DEC
2677: ST_TO_ADDR
2678: LD_INT 4
2680: PUSH
2681: FOR_TO
2682: IFFALSE 2775
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gatling_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gun ] [ i mod 4 + 1 ] , 100 ) ;
2684: LD_INT 22
2686: PPUSH
2687: LD_INT 3
2689: PPUSH
2690: LD_INT 3
2692: PPUSH
2693: LD_INT 43
2695: PUSH
2696: LD_INT 45
2698: PUSH
2699: LD_INT 45
2701: PUSH
2702: LD_INT 44
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: LD_VAR 0 2
2715: PUSH
2716: LD_INT 4
2718: MOD
2719: PUSH
2720: LD_INT 1
2722: PLUS
2723: ARRAY
2724: PPUSH
2725: LD_INT 100
2727: PPUSH
2728: CALL 19545 0 5
// veh := CreateVehicle ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: CALL_OW 45
2741: ST_TO_ADDR
// tmp := tmp ^ veh ;
2742: LD_ADDR_VAR 0 4
2746: PUSH
2747: LD_VAR 0 4
2751: PUSH
2752: LD_VAR 0 3
2756: ADD
2757: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_russian , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 2
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// end ;
2773: GO 2681
2775: POP
2776: POP
// russian_guard := tmp ;
2777: LD_ADDR_EXP 50
2781: PUSH
2782: LD_VAR 0 4
2786: ST_TO_ADDR
// end ;
2787: LD_VAR 0 1
2791: RET
// every 9 9$00 + 2 2$00 trigger IsOk ( ru_depot ) and player_spotted do var i , base , tmp , flags , _target , attackers ;
2792: LD_INT 47
2794: PPUSH
2795: CALL_OW 302
2799: PUSH
2800: LD_EXP 6
2804: AND
2805: IFFALSE 3418
2807: GO 2809
2809: DISABLE
2810: LD_INT 0
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
// begin enable ;
2818: ENABLE
// base := 2 ;
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: LD_INT 2
2826: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
2827: LD_ADDR_VAR 0 4
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: LD_INT 0
2837: PUSH
2838: LD_INT 0
2840: PUSH
2841: LD_INT 0
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: LD_INT 0
2849: PUSH
2850: LD_INT 0
2852: PUSH
2853: LD_INT 0
2855: PUSH
2856: LD_INT 1
2858: PUSH
2859: LD_INT 0
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] ] ;
2874: LD_ADDR_VAR 0 3
2878: PUSH
2879: LD_INT 22
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 3
2887: PUSH
2888: LD_INT 45
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 21
2899: PUSH
2900: LD_INT 1
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: LD_INT 45
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: LD_INT 3
2923: PUSH
2924: LD_INT 45
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_INT 23
2935: PUSH
2936: LD_INT 1
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 46
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: DOUBLE
2963: LD_INT 1
2965: DEC
2966: ST_TO_ADDR
2967: LD_OWVAR 67
2971: PUSH
2972: LD_OWVAR 1
2976: PUSH
2977: LD_INT 21000
2979: DIV
2980: PLUS
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3071
// tmp := Insert ( tmp , tmp + 1 , [ [ ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_computer , [ ru_heavy_gun , ru_rocket , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: LD_VAR 0 3
2994: PPUSH
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 1
3002: PLUS
3003: PPUSH
3004: LD_INT 23
3006: PUSH
3007: LD_INT 24
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 2
3019: PPUSH
3020: CALL_OW 12
3024: ARRAY
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 3
3031: PUSH
3032: LD_INT 46
3034: PUSH
3035: LD_INT 47
3037: PUSH
3038: LD_INT 45
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 3
3051: PPUSH
3052: CALL_OW 12
3056: ARRAY
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 2
3068: ST_TO_ADDR
3069: GO 2982
3071: POP
3072: POP
// MC_SetProduceList ( base , tmp ) ;
3073: LD_VAR 0 2
3077: PPUSH
3078: LD_VAR 0 3
3082: PPUSH
3083: CALL 67999 0 2
// repeat wait ( 0 0$1 ) ;
3087: LD_INT 35
3089: PPUSH
3090: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
3094: LD_VAR 0 2
3098: PPUSH
3099: CALL 68456 0 1
3103: PUSH
3104: LD_INT 0
3106: EQUAL
3107: IFFALSE 3087
// wait ( 0 0$20 ) ;
3109: LD_INT 700
3111: PPUSH
3112: CALL_OW 67
// _target := [ [ 71 , 19 ] , [ 91 , 67 ] , [ 52 , 44 ] , [ 68 , 48 ] ] ;
3116: LD_ADDR_VAR 0 5
3120: PUSH
3121: LD_INT 71
3123: PUSH
3124: LD_INT 19
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 91
3133: PUSH
3134: LD_INT 67
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 52
3143: PUSH
3144: LD_INT 44
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 68
3153: PUSH
3154: LD_INT 48
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] ] ) ) ;
3167: LD_ADDR_VAR 0 6
3171: PUSH
3172: LD_EXP 76
3176: PUSH
3177: LD_VAR 0 2
3181: ARRAY
3182: PUSH
3183: LD_EXP 79
3187: PUSH
3188: LD_VAR 0 2
3192: ARRAY
3193: PUSH
3194: LD_EXP 76
3198: PUSH
3199: LD_VAR 0 2
3203: ARRAY
3204: PPUSH
3205: LD_INT 2
3207: PUSH
3208: LD_INT 34
3210: PUSH
3211: LD_INT 51
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 52
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 72
3237: UNION
3238: DIFF
3239: ST_TO_ADDR
// if not attackers then
3240: LD_VAR 0 6
3244: NOT
3245: IFFALSE 3249
// exit ;
3247: GO 3418
// ru_attackers := attackers ;
3249: LD_ADDR_EXP 51
3253: PUSH
3254: LD_VAR 0 6
3258: ST_TO_ADDR
// for i = 1 to attackers do
3259: LD_ADDR_VAR 0 1
3263: PUSH
3264: DOUBLE
3265: LD_INT 1
3267: DEC
3268: ST_TO_ADDR
3269: LD_VAR 0 6
3273: PUSH
3274: FOR_TO
3275: IFFALSE 3352
// begin case i mod 3 of 0 :
3277: LD_VAR 0 1
3281: PUSH
3282: LD_INT 3
3284: MOD
3285: PUSH
3286: LD_INT 0
3288: DOUBLE
3289: EQUAL
3290: IFTRUE 3294
3292: GO 3297
3294: POP
// ; 1 :
3295: GO 3350
3297: LD_INT 1
3299: DOUBLE
3300: EQUAL
3301: IFTRUE 3305
3303: GO 3323
3305: POP
// ComAgressiveMove ( i , 32 , 49 ) ; 2 :
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_INT 32
3313: PPUSH
3314: LD_INT 49
3316: PPUSH
3317: CALL_OW 114
3321: GO 3350
3323: LD_INT 2
3325: DOUBLE
3326: EQUAL
3327: IFTRUE 3331
3329: GO 3349
3331: POP
// ComAgressiveMove ( i , 117 , 107 ) ; end ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 117
3339: PPUSH
3340: LD_INT 107
3342: PPUSH
3343: CALL_OW 114
3347: GO 3350
3349: POP
// end ;
3350: GO 3274
3352: POP
3353: POP
// repeat wait ( 0 0$1 ) ;
3354: LD_INT 35
3356: PPUSH
3357: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
3361: LD_VAR 0 6
3365: PPUSH
3366: LD_INT 60
3368: PUSH
3369: EMPTY
3370: LIST
3371: PPUSH
3372: CALL_OW 72
3376: NOT
3377: IFFALSE 3354
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
3379: LD_VAR 0 2
3383: PPUSH
3384: LD_VAR 0 6
3388: PPUSH
3389: LD_VAR 0 5
3393: PPUSH
3394: LD_VAR 0 4
3398: PPUSH
3399: CALL 68293 0 4
// if not first_attack then
3403: LD_EXP 7
3407: NOT
3408: IFFALSE 3418
// first_attack := true ;
3410: LD_ADDR_EXP 7
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// end ; end_of_file
3418: PPOPN 6
3420: END
// export arabian_force , arabian_guard , Abdul , mastodont ; export function PrepareArabian ; var i , veh , tmp , xy , un , un2 ; begin
3421: LD_INT 0
3423: PPUSH
3424: PPUSH
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// uc_side := 2 ;
3430: LD_ADDR_OWVAR 20
3434: PUSH
3435: LD_INT 2
3437: ST_TO_ADDR
// uc_nation := 2 ;
3438: LD_ADDR_OWVAR 21
3442: PUSH
3443: LD_INT 2
3445: ST_TO_ADDR
// Abdul := NewCharacter ( Abdul ) ;
3446: LD_ADDR_EXP 54
3450: PUSH
3451: LD_STRING Abdul
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// SetClass ( Abdul , class_desert_warior ) ;
3459: LD_EXP 54
3463: PPUSH
3464: LD_INT 11
3466: PPUSH
3467: CALL_OW 336
// PlaceHumanInUnit ( Abdul , ar_depot ) ;
3471: LD_EXP 54
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 52
// vc_chassis := 31 ;
3483: LD_ADDR_OWVAR 37
3487: PUSH
3488: LD_INT 31
3490: ST_TO_ADDR
// vc_control := control_rider ;
3491: LD_ADDR_OWVAR 38
3495: PUSH
3496: LD_INT 4
3498: ST_TO_ADDR
// mastodont := CreateVehicle ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: CALL_OW 45
3508: ST_TO_ADDR
// PlaceUnitXY ( mastodont , 153 , 71 , false ) ;
3509: LD_EXP 55
3513: PPUSH
3514: LD_INT 153
3516: PPUSH
3517: LD_INT 71
3519: PPUSH
3520: LD_INT 0
3522: PPUSH
3523: CALL_OW 48
// InitVc ;
3527: CALL_OW 20
// arabian_force := PrepareBase ( ar_depot ,  , [ 7 , 8 , 9 ] [ Difficulty ] , [ 5000 , 1000 , 300 ] , [ 22 , 5 , 6 , 9 ] ) ;
3531: LD_ADDR_EXP 52
3535: PUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_STRING 
3541: PPUSH
3542: LD_INT 7
3544: PUSH
3545: LD_INT 8
3547: PUSH
3548: LD_INT 9
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_OWVAR 67
3560: ARRAY
3561: PPUSH
3562: LD_INT 5000
3564: PUSH
3565: LD_INT 1000
3567: PUSH
3568: LD_INT 300
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: PPUSH
3576: LD_INT 22
3578: PUSH
3579: LD_INT 5
3581: PUSH
3582: LD_INT 6
3584: PUSH
3585: LD_INT 9
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PPUSH
3594: CALL 22944 0 5
3598: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , arabian_force ) ;
3599: LD_ADDR_EXP 57
3603: PUSH
3604: LD_EXP 57
3608: PPUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_EXP 52
3616: PPUSH
3617: CALL_OW 1
3621: ST_TO_ADDR
// tmp := [ ] ;
3622: LD_ADDR_VAR 0 4
3626: PUSH
3627: EMPTY
3628: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
3629: LD_ADDR_OWVAR 37
3633: PUSH
3634: LD_INT 14
3636: ST_TO_ADDR
// vc_engine := engine_siberite ;
3637: LD_ADDR_OWVAR 39
3641: PUSH
3642: LD_INT 3
3644: ST_TO_ADDR
// vc_control := control_manual ;
3645: LD_ADDR_OWVAR 38
3649: PUSH
3650: LD_INT 1
3652: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
3653: LD_ADDR_OWVAR 40
3657: PUSH
3658: LD_INT 31
3660: ST_TO_ADDR
// for i = 1 to 3 do
3661: LD_ADDR_VAR 0 2
3665: PUSH
3666: DOUBLE
3667: LD_INT 1
3669: DEC
3670: ST_TO_ADDR
3671: LD_INT 3
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3919
// begin xy := [ [ 153 , 71 ] , [ 155 , 81 ] ] [ i mod 2 + 1 ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_INT 153
3684: PUSH
3685: LD_INT 71
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: LD_INT 155
3694: PUSH
3695: LD_INT 81
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_VAR 0 2
3710: PUSH
3711: LD_INT 2
3713: MOD
3714: PUSH
3715: LD_INT 1
3717: PLUS
3718: ARRAY
3719: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
3720: LD_INT 0
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 7
3728: PUSH
3729: LD_INT 8
3731: PUSH
3732: LD_INT 9
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: PUSH
3740: LD_OWVAR 67
3744: ARRAY
3745: PPUSH
3746: CALL_OW 380
// un := CreateVehicle ;
3750: LD_ADDR_VAR 0 6
3754: PUSH
3755: CALL_OW 45
3759: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3760: LD_VAR 0 6
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: LD_INT 5
3770: PPUSH
3771: CALL_OW 12
3775: PPUSH
3776: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
3780: LD_VAR 0 6
3784: PPUSH
3785: LD_VAR 0 5
3789: PUSH
3790: LD_INT 1
3792: ARRAY
3793: PPUSH
3794: LD_VAR 0 5
3798: PUSH
3799: LD_INT 2
3801: ARRAY
3802: PPUSH
3803: LD_INT 6
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: CALL_OW 50
// un2 := CreateHuman ;
3813: LD_ADDR_VAR 0 7
3817: PUSH
3818: CALL_OW 44
3822: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
3823: LD_VAR 0 7
3827: PPUSH
3828: LD_VAR 0 6
3832: PPUSH
3833: CALL_OW 52
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un ) ;
3837: LD_ADDR_EXP 57
3841: PUSH
3842: LD_EXP 57
3846: PPUSH
3847: LD_INT 1
3849: PUSH
3850: LD_EXP 57
3854: PUSH
3855: LD_INT 1
3857: ARRAY
3858: PUSH
3859: LD_INT 1
3861: PLUS
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: LD_VAR 0 6
3871: PPUSH
3872: CALL 20102 0 3
3876: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ 1 , mc_bases [ 1 ] + 1 ] , un2 ) ;
3877: LD_ADDR_EXP 57
3881: PUSH
3882: LD_EXP 57
3886: PPUSH
3887: LD_INT 1
3889: PUSH
3890: LD_EXP 57
3894: PUSH
3895: LD_INT 1
3897: ARRAY
3898: PUSH
3899: LD_INT 1
3901: PLUS
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: PPUSH
3907: LD_VAR 0 7
3911: PPUSH
3912: CALL 20102 0 3
3916: ST_TO_ADDR
// end ;
3917: GO 3674
3919: POP
3920: POP
// for i = 1 to 5 do
3921: LD_ADDR_VAR 0 2
3925: PUSH
3926: DOUBLE
3927: LD_INT 1
3929: DEC
3930: ST_TO_ADDR
3931: LD_INT 5
3933: PUSH
3934: FOR_TO
3935: IFFALSE 4028
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , [ ar_gatling_gun , ar_rocket_launcher , ar_rocket_launcher , ar_flame_thrower ] [ i mod 4 + 1 ] , 100 ) ;
3937: LD_INT 14
3939: PPUSH
3940: LD_INT 3
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_INT 25
3948: PUSH
3949: LD_INT 28
3951: PUSH
3952: LD_INT 28
3954: PUSH
3955: LD_INT 26
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: PUSH
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 4
3971: MOD
3972: PUSH
3973: LD_INT 1
3975: PLUS
3976: ARRAY
3977: PPUSH
3978: LD_INT 100
3980: PPUSH
3981: CALL 19545 0 5
// veh := CreateVehicle ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: CALL_OW 45
3994: ST_TO_ADDR
// tmp := tmp ^ veh ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: LD_VAR 0 4
4004: PUSH
4005: LD_VAR 0 3
4009: ADD
4010: ST_TO_ADDR
// PlaceUnitArea ( veh , parking_arabian , false ) ;
4011: LD_VAR 0 3
4015: PPUSH
4016: LD_INT 1
4018: PPUSH
4019: LD_INT 0
4021: PPUSH
4022: CALL_OW 49
// end ;
4026: GO 3934
4028: POP
4029: POP
// arabian_guard := tmp ;
4030: LD_ADDR_EXP 53
4034: PUSH
4035: LD_VAR 0 4
4039: ST_TO_ADDR
// end ;
4040: LD_VAR 0 1
4044: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , ar_depot , 12 ] ] ) or GetLives ( Mastodont ) < 990 or GetLives ( Abdul ) < 990 do
4045: LD_INT 22
4047: PUSH
4048: LD_INT 7
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 91
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: LD_INT 12
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 69
4077: PUSH
4078: LD_EXP 55
4082: PPUSH
4083: CALL_OW 256
4087: PUSH
4088: LD_INT 990
4090: LESS
4091: OR
4092: PUSH
4093: LD_EXP 54
4097: PPUSH
4098: CALL_OW 256
4102: PUSH
4103: LD_INT 990
4105: LESS
4106: OR
4107: IFFALSE 4250
4109: GO 4111
4111: DISABLE
// begin if IsInUnit ( Abdul ) then
4112: LD_EXP 54
4116: PPUSH
4117: CALL_OW 310
4121: IFFALSE 4132
// ComExitBuilding ( Abdul ) ;
4123: LD_EXP 54
4127: PPUSH
4128: CALL_OW 122
// if Mastodont then
4132: LD_EXP 55
4136: IFFALSE 4153
// ComMoveXY ( Mastodont , 205 , 132 ) ;
4138: LD_EXP 55
4142: PPUSH
4143: LD_INT 205
4145: PPUSH
4146: LD_INT 132
4148: PPUSH
4149: CALL_OW 111
// AddComMoveXY ( Abdul , 205 , 132 ) ;
4153: LD_EXP 54
4157: PPUSH
4158: LD_INT 205
4160: PPUSH
4161: LD_INT 132
4163: PPUSH
4164: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until IsInArea ( Abdul , escape_area ) ;
4175: LD_EXP 54
4179: PPUSH
4180: LD_INT 21
4182: PPUSH
4183: CALL_OW 308
4187: IFFALSE 4168
// RemoveUnit ( Abdul ) ;
4189: LD_EXP 54
4193: PPUSH
4194: CALL_OW 64
// repeat wait ( 0 0$1 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until IsInArea ( Mastodont , escape_area ) or IsDead ( Mastodont ) ;
4205: LD_EXP 55
4209: PPUSH
4210: LD_INT 21
4212: PPUSH
4213: CALL_OW 308
4217: PUSH
4218: LD_EXP 55
4222: PPUSH
4223: CALL_OW 301
4227: OR
4228: IFFALSE 4198
// if IsOk ( Mastodont ) then
4230: LD_EXP 55
4234: PPUSH
4235: CALL_OW 302
4239: IFFALSE 4250
// RemoveUnit ( Mastodont ) ;
4241: LD_EXP 55
4245: PPUSH
4246: CALL_OW 64
// end ;
4250: END
// every 0 0$5 trigger IsDead ( Abdul ) or FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) < [ 16 , 19 , 22 ] [ Difficulty ] do var tmp_vehs , tmp , tmp_ape , tmp_empty , i , veh ;
4251: LD_EXP 54
4255: PPUSH
4256: CALL_OW 301
4260: PUSH
4261: LD_INT 22
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 2
4273: PUSH
4274: LD_INT 25
4276: PUSH
4277: LD_INT 1
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 25
4286: PUSH
4287: LD_INT 2
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 25
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: LD_INT 25
4306: PUSH
4307: LD_INT 4
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 8
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: PPUSH
4336: CALL_OW 69
4340: PUSH
4341: LD_INT 16
4343: PUSH
4344: LD_INT 19
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: PUSH
4355: LD_OWVAR 67
4359: ARRAY
4360: LESS
4361: OR
4362: IFFALSE 5006
4364: GO 4366
4366: DISABLE
4367: LD_INT 0
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
4373: PPUSH
4374: PPUSH
// begin MC_Kill ( 1 ) ;
4375: LD_INT 1
4377: PPUSH
4378: CALL 52265 0 1
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 8 ] ] ] ) ;
4382: LD_ADDR_VAR 0 2
4386: PUSH
4387: LD_INT 22
4389: PUSH
4390: LD_INT 2
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 2
4399: PUSH
4400: LD_INT 25
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 25
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 25
4422: PUSH
4423: LD_INT 3
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 25
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 25
4442: PUSH
4443: LD_INT 8
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// tmp_ape := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff tmp ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: PUSH
4501: LD_VAR 0 2
4505: DIFF
4506: ST_TO_ADDR
// tmp_vehs := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_lives , 300 ] ] ) ;
4507: LD_ADDR_VAR 0 1
4511: PUSH
4512: LD_INT 22
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 2
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 24
4534: PUSH
4535: LD_INT 300
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PPUSH
4547: CALL_OW 69
4551: ST_TO_ADDR
// tmp_empty := UnitFilter ( tmp_vehs , [ [ f_control , control_manual ] , [ f_empty ] ] ) ;
4552: LD_ADDR_VAR 0 4
4556: PUSH
4557: LD_VAR 0 1
4561: PPUSH
4562: LD_INT 33
4564: PUSH
4565: LD_INT 1
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 58
4574: PUSH
4575: EMPTY
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: PPUSH
4582: CALL_OW 72
4586: ST_TO_ADDR
// for i in tmp do
4587: LD_ADDR_VAR 0 5
4591: PUSH
4592: LD_VAR 0 2
4596: PUSH
4597: FOR_IN
4598: IFFALSE 4782
// begin if i in FilterAllUnits ( [ f_driving ] ) then
4600: LD_VAR 0 5
4604: PUSH
4605: LD_INT 55
4607: PUSH
4608: EMPTY
4609: LIST
4610: PPUSH
4611: CALL_OW 69
4615: IN
4616: IFFALSE 4635
// begin AddComMoveXY ( i , 209 , 132 ) ;
4618: LD_VAR 0 5
4622: PPUSH
4623: LD_INT 209
4625: PPUSH
4626: LD_INT 132
4628: PPUSH
4629: CALL_OW 171
// continue ;
4633: GO 4597
// end ; if IsInUnit ( i ) then
4635: LD_VAR 0 5
4639: PPUSH
4640: CALL_OW 310
4644: IFFALSE 4662
// begin ComExitBuilding ( i ) ;
4646: LD_VAR 0 5
4650: PPUSH
4651: CALL_OW 122
// wait ( 3 ) ;
4655: LD_INT 3
4657: PPUSH
4658: CALL_OW 67
// end ; if tmp_empty then
4662: LD_VAR 0 4
4666: IFFALSE 4765
// if GetDistUnits ( i , NearestUnitToUnit ( tmp_empty , i ) ) < 25 then
4668: LD_VAR 0 5
4672: PPUSH
4673: LD_VAR 0 4
4677: PPUSH
4678: LD_VAR 0 5
4682: PPUSH
4683: CALL_OW 74
4687: PPUSH
4688: CALL_OW 296
4692: PUSH
4693: LD_INT 25
4695: LESS
4696: IFFALSE 4765
// begin veh := NearestUnitToUnit ( tmp_empty , i ) ;
4698: LD_ADDR_VAR 0 6
4702: PUSH
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_VAR 0 5
4712: PPUSH
4713: CALL_OW 74
4717: ST_TO_ADDR
// AddComEnterUnit ( i , veh ) ;
4718: LD_VAR 0 5
4722: PPUSH
4723: LD_VAR 0 6
4727: PPUSH
4728: CALL_OW 180
// AddComMoveXY ( i , 209 , 132 ) ;
4732: LD_VAR 0 5
4736: PPUSH
4737: LD_INT 209
4739: PPUSH
4740: LD_INT 132
4742: PPUSH
4743: CALL_OW 171
// tmp_empty := tmp_empty diff veh ;
4747: LD_ADDR_VAR 0 4
4751: PUSH
4752: LD_VAR 0 4
4756: PUSH
4757: LD_VAR 0 6
4761: DIFF
4762: ST_TO_ADDR
// continue ;
4763: GO 4597
// end ; AddComMoveXY ( i , 201 , 132 ) ;
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 201
4772: PPUSH
4773: LD_INT 132
4775: PPUSH
4776: CALL_OW 171
// end ;
4780: GO 4597
4782: POP
4783: POP
// for i in tmp_ape do
4784: LD_ADDR_VAR 0 5
4788: PUSH
4789: LD_VAR 0 3
4793: PUSH
4794: FOR_IN
4795: IFFALSE 4834
// begin if IsInUnit ( i ) then
4797: LD_VAR 0 5
4801: PPUSH
4802: CALL_OW 310
4806: IFFALSE 4817
// ComExitBuilding ( i ) ;
4808: LD_VAR 0 5
4812: PPUSH
4813: CALL_OW 122
// AddComMoveXY ( i , 201 , 132 ) ;
4817: LD_VAR 0 5
4821: PPUSH
4822: LD_INT 201
4824: PPUSH
4825: LD_INT 132
4827: PPUSH
4828: CALL_OW 171
// end ;
4832: GO 4794
4834: POP
4835: POP
// repeat wait ( 0 0$1 ) ;
4836: LD_INT 35
4838: PPUSH
4839: CALL_OW 67
// for i in tmp union tmp_ape union tmp_vehs do
4843: LD_ADDR_VAR 0 5
4847: PUSH
4848: LD_VAR 0 2
4852: PUSH
4853: LD_VAR 0 3
4857: UNION
4858: PUSH
4859: LD_VAR 0 1
4863: UNION
4864: PUSH
4865: FOR_IN
4866: IFFALSE 4897
// if not HasTask ( i ) then
4868: LD_VAR 0 5
4872: PPUSH
4873: CALL_OW 314
4877: NOT
4878: IFFALSE 4895
// ComMoveXY ( i , 201 , 132 ) ;
4880: LD_VAR 0 5
4884: PPUSH
4885: LD_INT 201
4887: PPUSH
4888: LD_INT 132
4890: PPUSH
4891: CALL_OW 111
4895: GO 4865
4897: POP
4898: POP
// if FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) then
4899: LD_INT 21
4901: PPUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 2
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 70
4916: IFFALSE 4957
// for i in FilterUnitsInArea ( escape_area , [ f_side , 2 ] ) do
4918: LD_ADDR_VAR 0 5
4922: PUSH
4923: LD_INT 21
4925: PPUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 2
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 70
4940: PUSH
4941: FOR_IN
4942: IFFALSE 4955
// RemoveUnit ( i ) ;
4944: LD_VAR 0 5
4948: PPUSH
4949: CALL_OW 64
4953: GO 4941
4955: POP
4956: POP
// until not FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
4957: LD_INT 22
4959: PUSH
4960: LD_INT 2
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 2
4969: PUSH
4970: LD_INT 21
4972: PUSH
4973: LD_INT 1
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: LD_INT 21
4982: PUSH
4983: LD_INT 2
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PPUSH
4999: CALL_OW 69
5003: NOT
5004: IFFALSE 4836
// end ;
5006: PPOPN 6
5008: END
// every 12 12$00 trigger ar_active_attack and GetBType ( HexInfo ( 92 , 40 ) ) = b_siberite_mine do var sci ;
5009: LD_EXP 9
5013: PUSH
5014: LD_INT 92
5016: PPUSH
5017: LD_INT 40
5019: PPUSH
5020: CALL_OW 428
5024: PPUSH
5025: CALL_OW 266
5029: PUSH
5030: LD_INT 30
5032: EQUAL
5033: AND
5034: IFFALSE 5230
5036: GO 5038
5038: DISABLE
5039: LD_INT 0
5041: PPUSH
// begin sci := UnitFilter ( mc_bases [ 1 ] , [ f_class , 4 ] ) ;
5042: LD_ADDR_VAR 0 1
5046: PUSH
5047: LD_EXP 57
5051: PUSH
5052: LD_INT 1
5054: ARRAY
5055: PPUSH
5056: LD_INT 25
5058: PUSH
5059: LD_INT 4
5061: PUSH
5062: EMPTY
5063: LIST
5064: LIST
5065: PPUSH
5066: CALL_OW 72
5070: ST_TO_ADDR
// if not sci then
5071: LD_VAR 0 1
5075: NOT
5076: IFFALSE 5080
// exit ;
5078: GO 5230
// mc_bases := Replace ( mc_bases , 1 , mc_bases [ 1 ] diff sci [ 1 ] ) ;
5080: LD_ADDR_EXP 57
5084: PUSH
5085: LD_EXP 57
5089: PPUSH
5090: LD_INT 1
5092: PPUSH
5093: LD_EXP 57
5097: PUSH
5098: LD_INT 1
5100: ARRAY
5101: PUSH
5102: LD_VAR 0 1
5106: PUSH
5107: LD_INT 1
5109: ARRAY
5110: DIFF
5111: PPUSH
5112: CALL_OW 1
5116: ST_TO_ADDR
// if IsInUnit ( sci [ 1 ] ) then
5117: LD_VAR 0 1
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: CALL_OW 310
5130: IFFALSE 5145
// ComExitBuilding ( sci [ 1 ] ) ;
5132: LD_VAR 0 1
5136: PUSH
5137: LD_INT 1
5139: ARRAY
5140: PPUSH
5141: CALL_OW 122
// if DangerAtRangeXY ( 2 , 105 , 14 , 20 ) [ 4 ] < 10 then
5145: LD_INT 2
5147: PPUSH
5148: LD_INT 105
5150: PPUSH
5151: LD_INT 14
5153: PPUSH
5154: LD_INT 20
5156: PPUSH
5157: CALL 20596 0 4
5161: PUSH
5162: LD_INT 4
5164: ARRAY
5165: PUSH
5166: LD_INT 10
5168: LESS
5169: IFFALSE 5192
// AddComMoveXY ( sci [ 1 ] , 105 , 14 ) else
5171: LD_VAR 0 1
5175: PUSH
5176: LD_INT 1
5178: ARRAY
5179: PPUSH
5180: LD_INT 105
5182: PPUSH
5183: LD_INT 14
5185: PPUSH
5186: CALL_OW 171
5190: GO 5211
// AddComMoveXY ( sci [ 1 ] , 118 , 77 ) ;
5192: LD_VAR 0 1
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: LD_INT 118
5203: PPUSH
5204: LD_INT 77
5206: PPUSH
5207: CALL_OW 171
// AddComContaminate ( sci [ 1 ] , 92 , 40 ) ;
5211: LD_VAR 0 1
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: PPUSH
5220: LD_INT 92
5222: PPUSH
5223: LD_INT 40
5225: PPUSH
5226: CALL_OW 218
// end ;
5230: PPOPN 1
5232: END
// every 14 14$00 trigger IsOk ( ar_depot ) and ar_active_attack do var i , base , tmp , flags , _target , attackers ;
5233: LD_INT 1
5235: PPUSH
5236: CALL_OW 302
5240: PUSH
5241: LD_EXP 9
5245: AND
5246: IFFALSE 5716
5248: GO 5250
5250: DISABLE
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
5255: PPUSH
5256: PPUSH
5257: PPUSH
5258: PPUSH
// begin enable ;
5259: ENABLE
// base := 1 ;
5260: LD_ADDR_VAR 0 2
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5268: LD_ADDR_VAR 0 4
5272: PUSH
5273: LD_INT 0
5275: PUSH
5276: LD_INT 0
5278: PUSH
5279: LD_INT 0
5281: PUSH
5282: LD_INT 0
5284: PUSH
5285: LD_INT 0
5287: PUSH
5288: LD_INT 0
5290: PUSH
5291: LD_INT 0
5293: PUSH
5294: LD_INT 0
5296: PUSH
5297: LD_INT 1
5299: PUSH
5300: LD_INT 0
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: ST_TO_ADDR
// tmp := [ [ ar_half_tracked , engine_combustion , control_remote , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , ] ;
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_INT 14
5322: PUSH
5323: LD_INT 1
5325: PUSH
5326: LD_INT 2
5328: PUSH
5329: LD_INT 26
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 14
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: LD_INT 28
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 13
5358: PUSH
5359: LD_INT 1
5361: PUSH
5362: LD_INT 2
5364: PUSH
5365: LD_INT 29
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: ST_TO_ADDR
// for i = 1 to Difficulty + tick div 10 10$00 do
5379: LD_ADDR_VAR 0 1
5383: PUSH
5384: DOUBLE
5385: LD_INT 1
5387: DEC
5388: ST_TO_ADDR
5389: LD_OWVAR 67
5393: PUSH
5394: LD_OWVAR 1
5398: PUSH
5399: LD_INT 21000
5401: DIV
5402: PLUS
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5497
// tmp := Insert ( tmp , tmp + 1 , [ [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_remote , [ ar_rocket_launcher , ar_selfpropelled_bomb , ar_gatling_gun , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ) ;
5407: LD_ADDR_VAR 0 3
5411: PUSH
5412: LD_VAR 0 3
5416: PPUSH
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 1
5424: PLUS
5425: PPUSH
5426: LD_INT 13
5428: PUSH
5429: LD_INT 14
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_INT 2
5441: PPUSH
5442: CALL_OW 12
5446: ARRAY
5447: PUSH
5448: LD_INT 1
5450: PUSH
5451: LD_INT 2
5453: PUSH
5454: LD_INT 28
5456: PUSH
5457: LD_INT 29
5459: PUSH
5460: LD_INT 25
5462: PUSH
5463: LD_INT 26
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 1
5474: PPUSH
5475: LD_INT 4
5477: PPUSH
5478: CALL_OW 12
5482: ARRAY
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 2
5494: ST_TO_ADDR
5495: GO 5404
5497: POP
5498: POP
// MC_SetProduceList ( base , tmp ) ;
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: CALL 67999 0 2
// repeat wait ( 0 0$1 ) ;
5513: LD_INT 35
5515: PPUSH
5516: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5520: LD_VAR 0 2
5524: PPUSH
5525: CALL 68456 0 1
5529: PUSH
5530: LD_INT 0
5532: EQUAL
5533: IFFALSE 5513
// wait ( 0 0$20 ) ;
5535: LD_INT 700
5537: PPUSH
5538: CALL_OW 67
// _target := [ [ 124 , 85 ] , [ 90 , 61 ] , [ 69 , 48 ] , [ 68 , 48 ] ] ;
5542: LD_ADDR_VAR 0 5
5546: PUSH
5547: LD_INT 124
5549: PUSH
5550: LD_INT 85
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 90
5559: PUSH
5560: LD_INT 61
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 69
5569: PUSH
5570: LD_INT 48
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: LD_INT 68
5579: PUSH
5580: LD_INT 48
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_EXP 76
5602: PUSH
5603: LD_VAR 0 2
5607: ARRAY
5608: PUSH
5609: LD_EXP 79
5613: PUSH
5614: LD_VAR 0 2
5618: ARRAY
5619: PUSH
5620: LD_EXP 76
5624: PUSH
5625: LD_VAR 0 2
5629: ARRAY
5630: PPUSH
5631: LD_INT 34
5633: PUSH
5634: LD_INT 32
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL_OW 72
5645: UNION
5646: DIFF
5647: ST_TO_ADDR
// if not attackers then
5648: LD_VAR 0 6
5652: NOT
5653: IFFALSE 5657
// exit ;
5655: GO 5716
// ar_attackers := attackers ;
5657: LD_ADDR_EXP 10
5661: PUSH
5662: LD_VAR 0 6
5666: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5667: LD_INT 35
5669: PPUSH
5670: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
5674: LD_VAR 0 6
5678: PPUSH
5679: LD_INT 60
5681: PUSH
5682: EMPTY
5683: LIST
5684: PPUSH
5685: CALL_OW 72
5689: NOT
5690: IFFALSE 5667
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
5692: LD_VAR 0 2
5696: PPUSH
5697: LD_VAR 0 6
5701: PPUSH
5702: LD_VAR 0 5
5706: PPUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: CALL 68293 0 4
// end ;
5716: PPOPN 6
5718: END
// every 11 11$00 trigger IsOk ( ar_depot ) and ar_active_attack and IsInArea ( masha , masha_area ) and MC_GetProduceList ( 1 ) = 0 and not ar_attackers do var i , base , tmp , flags , _target , attackers , un ;
5719: LD_INT 1
5721: PPUSH
5722: CALL_OW 302
5726: PUSH
5727: LD_EXP 9
5731: AND
5732: PUSH
5733: LD_EXP 48
5737: PPUSH
5738: LD_INT 22
5740: PPUSH
5741: CALL_OW 308
5745: AND
5746: PUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL 68456 0 1
5754: PUSH
5755: LD_INT 0
5757: EQUAL
5758: AND
5759: PUSH
5760: LD_EXP 10
5764: NOT
5765: AND
5766: IFFALSE 6241
5768: GO 5770
5770: DISABLE
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
// begin base := 1 ;
5780: LD_ADDR_VAR 0 2
5784: PUSH
5785: LD_INT 1
5787: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 0
5813: PUSH
5814: LD_INT 0
5816: PUSH
5817: LD_INT 1
5819: PUSH
5820: LD_INT 0
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: ST_TO_ADDR
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_solar , control_remote , ar_double_machine_gun ] ] ;
5835: LD_ADDR_VAR 0 3
5839: PUSH
5840: LD_INT 13
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: LD_INT 2
5848: PUSH
5849: LD_INT 28
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_INT 13
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: LD_INT 2
5866: PUSH
5867: LD_INT 27
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 13
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: LD_INT 2
5884: PUSH
5885: LD_INT 25
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 11
5896: PUSH
5897: LD_INT 2
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 24
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 11
5914: PUSH
5915: LD_INT 2
5917: PUSH
5918: LD_INT 2
5920: PUSH
5921: LD_INT 24
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: ST_TO_ADDR
// MC_SetProduceList ( base , tmp ) ;
5937: LD_VAR 0 2
5941: PPUSH
5942: LD_VAR 0 3
5946: PPUSH
5947: CALL 67999 0 2
// repeat wait ( 0 0$1 ) ;
5951: LD_INT 35
5953: PPUSH
5954: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL 68456 0 1
5967: PUSH
5968: LD_INT 0
5970: EQUAL
5971: IFFALSE 5951
// wait ( 0 0$20 ) ;
5973: LD_INT 700
5975: PPUSH
5976: CALL_OW 67
// _target := [ [ 119 , 9 ] ] ;
5980: LD_ADDR_VAR 0 5
5984: PUSH
5985: LD_INT 119
5987: PUSH
5988: LD_INT 9
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , ar_cargo_bay ] ) ) ;
5998: LD_ADDR_VAR 0 6
6002: PUSH
6003: LD_EXP 76
6007: PUSH
6008: LD_VAR 0 2
6012: ARRAY
6013: PUSH
6014: LD_EXP 79
6018: PUSH
6019: LD_VAR 0 2
6023: ARRAY
6024: PUSH
6025: LD_EXP 76
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PPUSH
6036: LD_INT 34
6038: PUSH
6039: LD_INT 32
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PPUSH
6046: CALL_OW 72
6050: UNION
6051: DIFF
6052: ST_TO_ADDR
// if not attackers then
6053: LD_VAR 0 6
6057: NOT
6058: IFFALSE 6062
// exit ;
6060: GO 6241
// uc_side := 2 ;
6062: LD_ADDR_OWVAR 20
6066: PUSH
6067: LD_INT 2
6069: ST_TO_ADDR
// uc_nation := 2 ;
6070: LD_ADDR_OWVAR 21
6074: PUSH
6075: LD_INT 2
6077: ST_TO_ADDR
// InitHc ;
6078: CALL_OW 19
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
6082: LD_ADDR_VAR 0 1
6086: PUSH
6087: DOUBLE
6088: LD_INT 1
6090: DEC
6091: ST_TO_ADDR
6092: LD_INT 4
6094: PUSH
6095: LD_INT 5
6097: PUSH
6098: LD_INT 6
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: LD_OWVAR 67
6110: ARRAY
6111: PUSH
6112: FOR_TO
6113: IFFALSE 6190
// begin PrepareHuman ( false , [ class_apeman_soldier , class_apeman_kamikaze ] [ rand ( 1 , 2 ) ] , 8 ) ;
6115: LD_INT 0
6117: PPUSH
6118: LD_INT 15
6120: PUSH
6121: LD_INT 17
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 1
6130: PPUSH
6131: LD_INT 2
6133: PPUSH
6134: CALL_OW 12
6138: ARRAY
6139: PPUSH
6140: LD_INT 8
6142: PPUSH
6143: CALL_OW 380
// un := CreateHuman ;
6147: LD_ADDR_VAR 0 7
6151: PUSH
6152: CALL_OW 44
6156: ST_TO_ADDR
// PlaceUnitArea ( un , east_spawn , false ) ;
6157: LD_VAR 0 7
6161: PPUSH
6162: LD_INT 23
6164: PPUSH
6165: LD_INT 0
6167: PPUSH
6168: CALL_OW 49
// attackers := attackers union un ;
6172: LD_ADDR_VAR 0 6
6176: PUSH
6177: LD_VAR 0 6
6181: PUSH
6182: LD_VAR 0 7
6186: UNION
6187: ST_TO_ADDR
// end ;
6188: GO 6112
6190: POP
6191: POP
// repeat wait ( 0 0$1 ) ;
6192: LD_INT 35
6194: PPUSH
6195: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6199: LD_VAR 0 6
6203: PPUSH
6204: LD_INT 60
6206: PUSH
6207: EMPTY
6208: LIST
6209: PPUSH
6210: CALL_OW 72
6214: NOT
6215: IFFALSE 6192
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6217: LD_VAR 0 2
6221: PPUSH
6222: LD_VAR 0 6
6226: PPUSH
6227: LD_VAR 0 5
6231: PPUSH
6232: LD_VAR 0 4
6236: PPUSH
6237: CALL 68293 0 4
// end ; end_of_file
6241: PPOPN 7
6243: END
// export function PrepareAmericanAttack ; var i , tmp , veh , flags , _target ; begin
6244: LD_INT 0
6246: PPUSH
6247: PPUSH
6248: PPUSH
6249: PPUSH
6250: PPUSH
6251: PPUSH
// uc_side := 1 ;
6252: LD_ADDR_OWVAR 20
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// uc_nation := 1 ;
6260: LD_ADDR_OWVAR 21
6264: PUSH
6265: LD_INT 1
6267: ST_TO_ADDR
// InitHc ;
6268: CALL_OW 19
// InitVc ;
6272: CALL_OW 20
// tmp := [ ] ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: EMPTY
6282: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6283: LD_ADDR_VAR 0 5
6287: PUSH
6288: LD_INT 0
6290: PUSH
6291: LD_INT 0
6293: PUSH
6294: LD_INT 0
6296: PUSH
6297: LD_INT 0
6299: PUSH
6300: LD_INT 0
6302: PUSH
6303: LD_INT 0
6305: PUSH
6306: LD_INT 0
6308: PUSH
6309: LD_INT 0
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: LD_INT 0
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: ST_TO_ADDR
// _target := [ [ 71 , 34 ] , [ 63 , 49 ] ] ;
6330: LD_ADDR_VAR 0 6
6334: PUSH
6335: LD_INT 71
6337: PUSH
6338: LD_INT 34
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 63
6347: PUSH
6348: LD_INT 49
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
6359: LD_ADDR_VAR 0 2
6363: PUSH
6364: DOUBLE
6365: LD_INT 1
6367: DEC
6368: ST_TO_ADDR
6369: LD_INT 5
6371: PUSH
6372: LD_INT 6
6374: PUSH
6375: LD_INT 6
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: PUSH
6383: LD_OWVAR 67
6387: ARRAY
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6527
// begin PrepareVehicle ( [ us_medium_wheeled , us_heavy_tracked , us_morphling ] [ rand ( 1 , 3 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_computer , [ us_laser , us_rocket_launcher ] [ rand ( 1 , 2 ) ] , 78 ) ;
6392: LD_INT 2
6394: PUSH
6395: LD_INT 4
6397: PUSH
6398: LD_INT 5
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 1
6408: PPUSH
6409: LD_INT 3
6411: PPUSH
6412: CALL_OW 12
6416: ARRAY
6417: PPUSH
6418: LD_INT 1
6420: PUSH
6421: LD_INT 3
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 1
6430: PPUSH
6431: LD_INT 2
6433: PPUSH
6434: CALL_OW 12
6438: ARRAY
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: LD_INT 9
6445: PUSH
6446: LD_INT 7
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 1
6455: PPUSH
6456: LD_INT 2
6458: PPUSH
6459: CALL_OW 12
6463: ARRAY
6464: PPUSH
6465: LD_INT 78
6467: PPUSH
6468: CALL 19545 0 5
// veh := CreateVehicle ;
6472: LD_ADDR_VAR 0 4
6476: PUSH
6477: CALL_OW 45
6481: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
6482: LD_VAR 0 4
6486: PPUSH
6487: LD_INT 2
6489: PPUSH
6490: CALL_OW 233
// PlaceUnitArea ( veh , north_spawn , false ) ;
6494: LD_VAR 0 4
6498: PPUSH
6499: LD_INT 17
6501: PPUSH
6502: LD_INT 0
6504: PPUSH
6505: CALL_OW 49
// tmp := tmp ^ veh ;
6509: LD_ADDR_VAR 0 3
6513: PUSH
6514: LD_VAR 0 3
6518: PUSH
6519: LD_VAR 0 4
6523: ADD
6524: ST_TO_ADDR
// end ;
6525: GO 6389
6527: POP
6528: POP
// if not tmp then
6529: LD_VAR 0 3
6533: NOT
6534: IFFALSE 6538
// exit ;
6536: GO 6581
// if not first_powell_attack then
6538: LD_EXP 11
6542: NOT
6543: IFFALSE 6553
// first_powell_attack := true ;
6545: LD_ADDR_EXP 11
6549: PUSH
6550: LD_INT 1
6552: ST_TO_ADDR
// Attack ( [ 0 , tmp , _target , flags ] ) ;
6553: LD_INT 0
6555: PUSH
6556: LD_VAR 0 3
6560: PUSH
6561: LD_VAR 0 6
6565: PUSH
6566: LD_VAR 0 5
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PPUSH
6577: CALL 47616 0 1
// end ; end_of_file
6581: LD_VAR 0 1
6585: RET
// export function Action ; var tmp , i , un ; begin
6586: LD_INT 0
6588: PPUSH
6589: PPUSH
6590: PPUSH
6591: PPUSH
// CenterNowOnXY ( 68 , 39 ) ;
6592: LD_INT 68
6594: PPUSH
6595: LD_INT 39
6597: PPUSH
6598: CALL_OW 86
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
6602: LD_ADDR_VAR 0 2
6606: PUSH
6607: LD_INT 22
6609: PUSH
6610: LD_INT 7
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PPUSH
6617: CALL_OW 69
6621: ST_TO_ADDR
// InGameOn ;
6622: CALL_OW 8
// ComMoveXY ( tmp , 71 , 49 ) ;
6626: LD_VAR 0 2
6630: PPUSH
6631: LD_INT 71
6633: PPUSH
6634: LD_INT 49
6636: PPUSH
6637: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6641: LD_INT 35
6643: PPUSH
6644: CALL_OW 67
// until SeeXY ( 7 , 71 , 51 ) ;
6648: LD_INT 7
6650: PPUSH
6651: LD_INT 71
6653: PPUSH
6654: LD_INT 51
6656: PPUSH
6657: CALL_OW 293
6661: IFFALSE 6641
// DialogueOn ;
6663: CALL_OW 6
// Say ( JMM , D1-JMM-1 ) ;
6667: LD_EXP 14
6671: PPUSH
6672: LD_STRING D1-JMM-1
6674: PPUSH
6675: CALL_OW 88
// if Joan then
6679: LD_EXP 29
6683: IFFALSE 6697
// Say ( Joan , D1-Joan-1 ) ;
6685: LD_EXP 29
6689: PPUSH
6690: LD_STRING D1-Joan-1
6692: PPUSH
6693: CALL_OW 88
// if Lisa then
6697: LD_EXP 16
6701: IFFALSE 6715
// Say ( Lisa , D1-Lisa-1 ) ;
6703: LD_EXP 16
6707: PPUSH
6708: LD_STRING D1-Lisa-1
6710: PPUSH
6711: CALL_OW 88
// if Joan or Lisa then
6715: LD_EXP 29
6719: PUSH
6720: LD_EXP 16
6724: OR
6725: IFFALSE 6739
// Say ( JMM , D1-JMM-2 ) ;
6727: LD_EXP 14
6731: PPUSH
6732: LD_STRING D1-JMM-2
6734: PPUSH
6735: CALL_OW 88
// DialogueOff ;
6739: CALL_OW 7
// InGameOff ;
6743: CALL_OW 9
// PlaceSeeing ( 71 , 50 , 7 , - 30 ) ;
6747: LD_INT 71
6749: PPUSH
6750: LD_INT 50
6752: PPUSH
6753: LD_INT 7
6755: PPUSH
6756: LD_INT 30
6758: NEG
6759: PPUSH
6760: CALL_OW 330
// RemoveSeeing ( 71 , 50 , 7 ) ;
6764: LD_INT 71
6766: PPUSH
6767: LD_INT 50
6769: PPUSH
6770: LD_INT 7
6772: PPUSH
6773: CALL_OW 331
// ChangeMissionObjectives ( M1 ) ;
6777: LD_STRING M1
6779: PPUSH
6780: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
6784: LD_INT 35
6786: PPUSH
6787: CALL_OW 67
// until freedom ;
6791: LD_EXP 3
6795: IFFALSE 6784
// wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
6797: LD_INT 350
6799: PPUSH
6800: LD_INT 700
6802: PPUSH
6803: CALL_OW 12
6807: PPUSH
6808: CALL_OW 67
// PrepareGossudarov ;
6812: CALL 1678 0 0
// repeat wait ( 0 0$1 ) ;
6816: LD_INT 35
6818: PPUSH
6819: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6823: LD_INT 22
6825: PUSH
6826: LD_INT 6
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 3
6835: PUSH
6836: LD_INT 24
6838: PUSH
6839: LD_INT 1000
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: IFFALSE 6816
// tmp := FilterAllUnits ( [ f_side , 6 ] ) ;
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_INT 22
6867: PUSH
6868: LD_INT 6
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PPUSH
6875: CALL_OW 69
6879: ST_TO_ADDR
// for i in tmp do
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_VAR 0 2
6889: PUSH
6890: FOR_IN
6891: IFFALSE 6907
// SetSide ( i , 7 ) ;
6893: LD_VAR 0 3
6897: PPUSH
6898: LD_INT 7
6900: PPUSH
6901: CALL_OW 235
6905: GO 6890
6907: POP
6908: POP
// DialogueOn ;
6909: CALL_OW 6
// ComTurnUnit ( [ JMM , Roth ] , Gossudarov ) ;
6913: LD_EXP 14
6917: PUSH
6918: LD_EXP 15
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PPUSH
6927: LD_EXP 31
6931: PPUSH
6932: CALL_OW 119
// CenterNowOnUnits ( Gossudarov ) ;
6936: LD_EXP 31
6940: PPUSH
6941: CALL_OW 87
// if not Roth then
6945: LD_EXP 15
6949: NOT
6950: IFFALSE 7014
// begin Say ( JMM , D2-JMM-1 ) ;
6952: LD_EXP 14
6956: PPUSH
6957: LD_STRING D2-JMM-1
6959: PPUSH
6960: CALL_OW 88
// Say ( JMM , D2-JMM-1b ) ;
6964: LD_EXP 14
6968: PPUSH
6969: LD_STRING D2-JMM-1b
6971: PPUSH
6972: CALL_OW 88
// Say ( Gossudarov , D2-Gos-1 ) ;
6976: LD_EXP 31
6980: PPUSH
6981: LD_STRING D2-Gos-1
6983: PPUSH
6984: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
6988: LD_EXP 14
6992: PPUSH
6993: LD_STRING D2-JMM-2
6995: PPUSH
6996: CALL_OW 88
// Say ( Gossudarov , D2-Gos-2 ) ;
7000: LD_EXP 31
7004: PPUSH
7005: LD_STRING D2-Gos-2
7007: PPUSH
7008: CALL_OW 88
// end else
7012: GO 7110
// begin Say ( Roth , D2-Roth-2 ) ;
7014: LD_EXP 15
7018: PPUSH
7019: LD_STRING D2-Roth-2
7021: PPUSH
7022: CALL_OW 88
// Say ( JMM , D2-JMM-1a ) ;
7026: LD_EXP 14
7030: PPUSH
7031: LD_STRING D2-JMM-1a
7033: PPUSH
7034: CALL_OW 88
// Say ( Roth , D2-Roth-2a ) ;
7038: LD_EXP 15
7042: PPUSH
7043: LD_STRING D2-Roth-2a
7045: PPUSH
7046: CALL_OW 88
// Say ( Roth , D2-Roth-2b ) ;
7050: LD_EXP 15
7054: PPUSH
7055: LD_STRING D2-Roth-2b
7057: PPUSH
7058: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
7062: LD_EXP 14
7066: PPUSH
7067: LD_STRING D2-JMM-3
7069: PPUSH
7070: CALL_OW 88
// Say ( Gossudarov , D2-Gos-3 ) ;
7074: LD_EXP 31
7078: PPUSH
7079: LD_STRING D2-Gos-3
7081: PPUSH
7082: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
7086: LD_EXP 14
7090: PPUSH
7091: LD_STRING D2-JMM-4
7093: PPUSH
7094: CALL_OW 88
// Say ( Gossudarov , D2-Gos-4 ) ;
7098: LD_EXP 31
7102: PPUSH
7103: LD_STRING D2-Gos-4
7105: PPUSH
7106: CALL_OW 88
// end ; Say ( JMM , D2-JMM-5 ) ;
7110: LD_EXP 14
7114: PPUSH
7115: LD_STRING D2-JMM-5
7117: PPUSH
7118: CALL_OW 88
// Say ( Gossudarov , D2-Gos-5 ) ;
7122: LD_EXP 31
7126: PPUSH
7127: LD_STRING D2-Gos-5
7129: PPUSH
7130: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
7134: LD_EXP 14
7138: PPUSH
7139: LD_STRING D2-JMM-6
7141: PPUSH
7142: CALL_OW 88
// DialogueOff ;
7146: CALL_OW 7
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// if Kirilenkova then
7157: LD_EXP 32
7161: IFFALSE 7175
// Say ( Kirilenkova , D3-Kir-1 ) ;
7163: LD_EXP 32
7167: PPUSH
7168: LD_STRING D3-Kir-1
7170: PPUSH
7171: CALL_OW 88
// gossudarov_arrive := true ;
7175: LD_ADDR_EXP 4
7179: PUSH
7180: LD_INT 1
7182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7183: LD_INT 35
7185: PPUSH
7186: CALL_OW 67
// until ru_lab_builded ;
7190: LD_EXP 5
7194: IFFALSE 7183
// if Kirilenkova then
7196: LD_EXP 32
7200: IFFALSE 7216
// Say ( Kirilenkova , D3a-Kir-1 ) else
7202: LD_EXP 32
7206: PPUSH
7207: LD_STRING D3a-Kir-1
7209: PPUSH
7210: CALL_OW 88
7214: GO 7238
// begin un := SciRu ;
7216: LD_ADDR_VAR 0 4
7220: PUSH
7221: CALL 12004 0 0
7225: ST_TO_ADDR
// Say ( un , D3a-Sci1-1 ) ;
7226: LD_VAR 0 4
7230: PPUSH
7231: LD_STRING D3a-Sci1-1
7233: PPUSH
7234: CALL_OW 88
// end ; if Kirilenkova or un then
7238: LD_EXP 32
7242: PUSH
7243: LD_VAR 0 4
7247: OR
7248: IFFALSE 7262
// Say ( JMM , D3a-JMM-1 ) ;
7250: LD_EXP 14
7254: PPUSH
7255: LD_STRING D3a-JMM-1
7257: PPUSH
7258: CALL_OW 88
// end ;
7262: LD_VAR 0 1
7266: RET
// every 0 0$1 trigger gossudarov_arrive and FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) < 6 do
7267: LD_EXP 4
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 7
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 25
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 25
7317: PUSH
7318: LD_INT 4
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 25
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: LD_INT 25
7337: PUSH
7338: LD_INT 8
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 25
7347: PUSH
7348: LD_INT 9
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PPUSH
7369: CALL_OW 69
7373: PUSH
7374: LD_INT 6
7376: LESS
7377: AND
7378: IFFALSE 7390
7380: GO 7382
7382: DISABLE
// YouLost ( TooMany ) ;
7383: LD_STRING TooMany
7385: PPUSH
7386: CALL_OW 104
7390: END
// every 0 0$40 trigger GetSide ( Gossudarov ) = 7 do var i , tmp , un ;
7391: LD_EXP 31
7395: PPUSH
7396: CALL_OW 255
7400: PUSH
7401: LD_INT 7
7403: EQUAL
7404: IFFALSE 7604
7406: GO 7408
7408: DISABLE
7409: LD_INT 0
7411: PPUSH
7412: PPUSH
7413: PPUSH
// begin uc_side := 3 ;
7414: LD_ADDR_OWVAR 20
7418: PUSH
7419: LD_INT 3
7421: ST_TO_ADDR
// uc_nation := 3 ;
7422: LD_ADDR_OWVAR 21
7426: PUSH
7427: LD_INT 3
7429: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_heavy_machine_gun , 100 ) ;
7430: LD_INT 21
7432: PPUSH
7433: LD_INT 3
7435: PPUSH
7436: LD_INT 3
7438: PPUSH
7439: LD_INT 42
7441: PPUSH
7442: LD_INT 100
7444: PPUSH
7445: CALL 19545 0 5
// un := CreateVehicle ;
7449: LD_ADDR_VAR 0 3
7453: PUSH
7454: CALL_OW 45
7458: ST_TO_ADDR
// PlaceUnitArea ( un , south_west_spawn , false ) ;
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_INT 15
7466: PPUSH
7467: LD_INT 0
7469: PPUSH
7470: CALL_OW 49
// ComMoveXY ( un , 67 , 45 ) ;
7474: LD_VAR 0 3
7478: PPUSH
7479: LD_INT 67
7481: PPUSH
7482: LD_INT 45
7484: PPUSH
7485: CALL_OW 111
// AddComWait ( un , 0 0$2 ) ;
7489: LD_VAR 0 3
7493: PPUSH
7494: LD_INT 70
7496: PPUSH
7497: CALL_OW 202
// AddComMoveXY ( un , 69 , 18 ) ;
7501: LD_VAR 0 3
7505: PPUSH
7506: LD_INT 69
7508: PPUSH
7509: LD_INT 18
7511: PPUSH
7512: CALL_OW 171
// AddComMoveXY ( un , 60 , 2 ) ;
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 60
7523: PPUSH
7524: LD_INT 2
7526: PPUSH
7527: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7531: LD_INT 35
7533: PPUSH
7534: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , north_spawn ) ;
7538: LD_VAR 0 3
7542: PPUSH
7543: CALL_OW 302
7547: NOT
7548: PUSH
7549: LD_VAR 0 3
7553: PPUSH
7554: LD_INT 17
7556: PPUSH
7557: CALL_OW 308
7561: OR
7562: IFFALSE 7531
// if IsInArea ( un , north_spawn ) or IsAt ( un , 60 , 2 ) then
7564: LD_VAR 0 3
7568: PPUSH
7569: LD_INT 17
7571: PPUSH
7572: CALL_OW 308
7576: PUSH
7577: LD_VAR 0 3
7581: PPUSH
7582: LD_INT 60
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 307
7592: OR
7593: IFFALSE 7604
// RemoveUnit ( un ) ;
7595: LD_VAR 0 3
7599: PPUSH
7600: CALL_OW 64
// end ;
7604: PPOPN 3
7606: END
// every 0 0$2 do var i , un , tmp ;
7607: GO 7609
7609: DISABLE
7610: LD_INT 0
7612: PPUSH
7613: PPUSH
7614: PPUSH
// begin repeat wait ( 0 0$2 ) ;
7615: LD_INT 70
7617: PPUSH
7618: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 3 ] ] ) ;
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 7
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 101
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PPUSH
7651: CALL_OW 69
7655: ST_TO_ADDR
// until tmp ;
7656: LD_VAR 0 3
7660: IFFALSE 7615
// un := NearestUnitToUnit ( tmp , JMM ) ;
7662: LD_ADDR_VAR 0 2
7666: PUSH
7667: LD_VAR 0 3
7671: PPUSH
7672: LD_EXP 14
7676: PPUSH
7677: CALL_OW 74
7681: ST_TO_ADDR
// player_spotted := true ;
7682: LD_ADDR_EXP 6
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// tmp := SciRu ;
7690: LD_ADDR_VAR 0 3
7694: PUSH
7695: CALL 12004 0 0
7699: ST_TO_ADDR
// DialogueOn ;
7700: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 7 , - 8 ) ;
7704: LD_VAR 0 2
7708: PPUSH
7709: CALL_OW 250
7713: PPUSH
7714: LD_VAR 0 2
7718: PPUSH
7719: CALL_OW 251
7723: PPUSH
7724: LD_INT 7
7726: PPUSH
7727: LD_INT 8
7729: NEG
7730: PPUSH
7731: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7735: LD_VAR 0 2
7739: PPUSH
7740: CALL_OW 87
// if tmp then
7744: LD_VAR 0 3
7748: IFFALSE 7762
// Say ( tmp , D4-RSci1-1 ) ;
7750: LD_VAR 0 3
7754: PPUSH
7755: LD_STRING D4-RSci1-1
7757: PPUSH
7758: CALL_OW 88
// if Gossudarov then
7762: LD_EXP 31
7766: IFFALSE 7792
// begin Say ( Gossudarov , D4-Gos-1 ) ;
7768: LD_EXP 31
7772: PPUSH
7773: LD_STRING D4-Gos-1
7775: PPUSH
7776: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
7780: LD_EXP 14
7784: PPUSH
7785: LD_STRING D4-JMM-1
7787: PPUSH
7788: CALL_OW 88
// end ; RemoveSeeing ( GetX ( un ) , GetY ( un ) , 7 ) ;
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 250
7801: PPUSH
7802: LD_VAR 0 2
7806: PPUSH
7807: CALL_OW 251
7811: PPUSH
7812: LD_INT 7
7814: PPUSH
7815: CALL_OW 331
// DialogueOff ;
7819: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
7823: LD_STRING M5
7825: PPUSH
7826: CALL_OW 337
// end ;
7830: PPOPN 3
7832: END
// every 0 0$30 + 2 2$30 trigger player_spotted do
7833: LD_EXP 6
7837: IFFALSE 8296
7839: GO 7841
7841: DISABLE
// begin PrepareBelkov ;
7842: CALL 1928 0 0
// ComMoveXY ( Belkov , 118 , 106 ) ;
7846: LD_EXP 46
7850: PPUSH
7851: LD_INT 118
7853: PPUSH
7854: LD_INT 106
7856: PPUSH
7857: CALL_OW 111
// AddComHold ( Belkov ) ;
7861: LD_EXP 46
7865: PPUSH
7866: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
7870: LD_INT 35
7872: PPUSH
7873: CALL_OW 67
// until IsAt ( Belkov , 118 , 106 ) ;
7877: LD_EXP 46
7881: PPUSH
7882: LD_INT 118
7884: PPUSH
7885: LD_INT 106
7887: PPUSH
7888: CALL_OW 307
7892: IFFALSE 7870
// ChangeSideFog ( 4 , 7 ) ;
7894: LD_INT 4
7896: PPUSH
7897: LD_INT 7
7899: PPUSH
7900: CALL_OW 343
// if IsOk ( Belkov ) then
7904: LD_EXP 46
7908: PPUSH
7909: CALL_OW 302
7913: IFFALSE 7997
// begin InGameOn ;
7915: CALL_OW 8
// DialogueOn ;
7919: CALL_OW 6
// SayRadio ( Belkov , D5-Bel-1 ) ;
7923: LD_EXP 46
7927: PPUSH
7928: LD_STRING D5-Bel-1
7930: PPUSH
7931: CALL_OW 94
// if Gossudarov then
7935: LD_EXP 31
7939: IFFALSE 7989
// begin Say ( Gossudarov , D5-Gos-1 ) ;
7941: LD_EXP 31
7945: PPUSH
7946: LD_STRING D5-Gos-1
7948: PPUSH
7949: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
7953: LD_EXP 14
7957: PPUSH
7958: LD_STRING D5-JMM-1
7960: PPUSH
7961: CALL_OW 88
// Say ( Gossudarov , D5-Gos-2 ) ;
7965: LD_EXP 31
7969: PPUSH
7970: LD_STRING D5-Gos-2
7972: PPUSH
7973: CALL_OW 88
// Say ( JMM , D5-JMM-2 ) ;
7977: LD_EXP 14
7981: PPUSH
7982: LD_STRING D5-JMM-2
7984: PPUSH
7985: CALL_OW 88
// end ; DialogueOff ;
7989: CALL_OW 7
// InGameOff ;
7993: CALL_OW 9
// end ; case Query ( QSaveBelkov ) of 1 :
7997: LD_STRING QSaveBelkov
7999: PPUSH
8000: CALL_OW 97
8004: PUSH
8005: LD_INT 1
8007: DOUBLE
8008: EQUAL
8009: IFTRUE 8013
8011: GO 8063
8013: POP
// begin DialogueOn ;
8014: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
8018: LD_EXP 14
8022: PPUSH
8023: LD_STRING D5a-JMM-1
8025: PPUSH
8026: CALL_OW 88
// SayRadio ( Belkov , D5a-Bel-1 ) ;
8030: LD_EXP 46
8034: PPUSH
8035: LD_STRING D5a-Bel-1
8037: PPUSH
8038: CALL_OW 94
// DialogueOff ;
8042: CALL_OW 7
// ComMoveXY ( Belkov , 83 , 49 ) ;
8046: LD_EXP 46
8050: PPUSH
8051: LD_INT 83
8053: PPUSH
8054: LD_INT 49
8056: PPUSH
8057: CALL_OW 111
// end ; 2 :
8061: GO 8123
8063: LD_INT 2
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8122
8071: POP
// begin Say ( JMM , D5a-JMM-2 ) ;
8072: LD_EXP 14
8076: PPUSH
8077: LD_STRING D5a-JMM-2
8079: PPUSH
8080: CALL_OW 88
// ComWait ( Belkov , 0 0$10 ) ;
8084: LD_EXP 46
8088: PPUSH
8089: LD_INT 350
8091: PPUSH
8092: CALL_OW 142
// AddComMoveXY ( Belkov , 107 , 109 ) ;
8096: LD_EXP 46
8100: PPUSH
8101: LD_INT 107
8103: PPUSH
8104: LD_INT 109
8106: PPUSH
8107: CALL_OW 171
// AddComHold ( Belkov ) ;
8111: LD_EXP 46
8115: PPUSH
8116: CALL_OW 200
// end ; end ;
8120: GO 8123
8122: POP
// repeat wait ( 0 0$1 ) ;
8123: LD_INT 35
8125: PPUSH
8126: CALL_OW 67
// until ( IsDead ( Belkov ) and GetSide ( Belkov ) = 4 ) or GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Belkov ) , Belkov ) < 10 ;
8130: LD_EXP 46
8134: PPUSH
8135: CALL_OW 301
8139: PUSH
8140: LD_EXP 46
8144: PPUSH
8145: CALL_OW 255
8149: PUSH
8150: LD_INT 4
8152: EQUAL
8153: AND
8154: PUSH
8155: LD_INT 22
8157: PUSH
8158: LD_INT 7
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PPUSH
8165: CALL_OW 69
8169: PPUSH
8170: LD_EXP 46
8174: PPUSH
8175: CALL_OW 74
8179: PPUSH
8180: LD_EXP 46
8184: PPUSH
8185: CALL_OW 296
8189: PUSH
8190: LD_INT 10
8192: LESS
8193: OR
8194: IFFALSE 8123
// if IsDead ( Belkov ) then
8196: LD_EXP 46
8200: PPUSH
8201: CALL_OW 301
8205: IFFALSE 8230
// begin CenterNowOnUnits ( Belkov ) ;
8207: LD_EXP 46
8211: PPUSH
8212: CALL_OW 87
// Say ( JMM , D5a-JMM-2a ) ;
8216: LD_EXP 14
8220: PPUSH
8221: LD_STRING D5a-JMM-2a
8223: PPUSH
8224: CALL_OW 88
// exit ;
8228: GO 8296
// end ; if See ( 7 , Belkov ) then
8230: LD_INT 7
8232: PPUSH
8233: LD_EXP 46
8237: PPUSH
8238: CALL_OW 292
8242: IFFALSE 8256
// SetSide ( Belkov , 7 ) ;
8244: LD_EXP 46
8248: PPUSH
8249: LD_INT 7
8251: PPUSH
8252: CALL_OW 235
// repeat wait ( 0 0$1 ) ;
8256: LD_INT 35
8258: PPUSH
8259: CALL_OW 67
// until GetDistUnitXY ( Belkov , 66 , 45 ) < 30 ;
8263: LD_EXP 46
8267: PPUSH
8268: LD_INT 66
8270: PPUSH
8271: LD_INT 45
8273: PPUSH
8274: CALL_OW 297
8278: PUSH
8279: LD_INT 30
8281: LESS
8282: IFFALSE 8256
// Say ( Belkov , D6-Bel-1 ) ;
8284: LD_EXP 46
8288: PPUSH
8289: LD_STRING D6-Bel-1
8291: PPUSH
8292: CALL_OW 88
// end ;
8296: END
// every 0 0$1 trigger IsOk ( Belkov ) and UnitShoot ( Belkov ) in FilterAllUnits ( [ f_or , [ f_weapon , ru_rocket ] , [ f_weapon , ru_rocket_launcher ] ] ) do
8297: LD_EXP 46
8301: PPUSH
8302: CALL_OW 302
8306: PUSH
8307: LD_EXP 46
8311: PPUSH
8312: CALL_OW 504
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 34
8322: PUSH
8323: LD_INT 47
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 34
8332: PUSH
8333: LD_INT 45
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 69
8349: IN
8350: AND
8351: IFFALSE 8368
8353: GO 8355
8355: DISABLE
// Say ( Belkov , D7-Bel-1 ) ;
8356: LD_EXP 46
8360: PPUSH
8361: LD_STRING D7-Bel-1
8363: PPUSH
8364: CALL_OW 88
8368: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_see , 2 ] ] ) and not ar_base_spotted and not IsPlaced ( Burlak ) do var tmp ;
8369: LD_INT 22
8371: PUSH
8372: LD_INT 7
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 101
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PPUSH
8393: CALL_OW 69
8397: PUSH
8398: LD_EXP 8
8402: NOT
8403: AND
8404: PUSH
8405: LD_EXP 45
8409: PPUSH
8410: CALL_OW 305
8414: NOT
8415: AND
8416: IFFALSE 8886
8418: GO 8420
8420: DISABLE
8421: LD_INT 0
8423: PPUSH
// begin ar_base_spotted := true ;
8424: LD_ADDR_EXP 8
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) ;
8432: LD_ADDR_VAR 0 1
8436: PUSH
8437: LD_INT 22
8439: PUSH
8440: LD_INT 2
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_INT 21
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PPUSH
8461: CALL_OW 69
8465: ST_TO_ADDR
// tmp := NearestUnitToUnit ( tmp , JMM ) ;
8466: LD_ADDR_VAR 0 1
8470: PUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_EXP 14
8480: PPUSH
8481: CALL_OW 74
8485: ST_TO_ADDR
// RevealFogArea ( 7 , area_base_arabian ) ;
8486: LD_INT 7
8488: PPUSH
8489: LD_INT 3
8491: PPUSH
8492: CALL_OW 332
// DialogueOn ;
8496: CALL_OW 6
// CenterNowOnXY ( GetX ( tmp ) , GetY ( tmp ) ) ;
8500: LD_VAR 0 1
8504: PPUSH
8505: CALL_OW 250
8509: PPUSH
8510: LD_VAR 0 1
8514: PPUSH
8515: CALL_OW 251
8519: PPUSH
8520: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Bobby , Cyrus , Frank , Roth , Cornel , Denis , Gladstone ] ;
8524: LD_ADDR_VAR 0 1
8528: PUSH
8529: LD_INT 22
8531: PUSH
8532: LD_INT 7
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 23
8541: PUSH
8542: LD_INT 1
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 26
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: PPUSH
8564: CALL_OW 69
8568: PUSH
8569: LD_EXP 14
8573: PUSH
8574: LD_EXP 18
8578: PUSH
8579: LD_EXP 19
8583: PUSH
8584: LD_EXP 26
8588: PUSH
8589: LD_EXP 15
8593: PUSH
8594: LD_EXP 24
8598: PUSH
8599: LD_EXP 20
8603: PUSH
8604: LD_EXP 22
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: DIFF
8619: ST_TO_ADDR
// if not tmp then
8620: LD_VAR 0 1
8624: NOT
8625: IFFALSE 8699
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 1 ] , [ f_sex , sex_female ] ] ) diff [ Joan , Lisa , Kikuchi , Simms ] ;
8627: LD_ADDR_VAR 0 1
8631: PUSH
8632: LD_INT 22
8634: PUSH
8635: LD_INT 7
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: LD_INT 1
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 26
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: PPUSH
8667: CALL_OW 69
8671: PUSH
8672: LD_EXP 29
8676: PUSH
8677: LD_EXP 16
8681: PUSH
8682: LD_EXP 27
8686: PUSH
8687: LD_EXP 28
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: DIFF
8698: ST_TO_ADDR
// if tmp then
8699: LD_VAR 0 1
8703: IFFALSE 8774
// case GetSex ( tmp [ 1 ] ) of sex_male :
8705: LD_VAR 0 1
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: CALL_OW 258
8718: PUSH
8719: LD_INT 1
8721: DOUBLE
8722: EQUAL
8723: IFTRUE 8727
8725: GO 8746
8727: POP
// Say ( tmp [ 1 ] , D9-Sol1-1 ) ; sex_female :
8728: LD_VAR 0 1
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_STRING D9-Sol1-1
8739: PPUSH
8740: CALL_OW 88
8744: GO 8774
8746: LD_INT 2
8748: DOUBLE
8749: EQUAL
8750: IFTRUE 8754
8752: GO 8773
8754: POP
// Say ( tmp [ 1 ] , D9-FSol1-1 ) ; end ;
8755: LD_VAR 0 1
8759: PUSH
8760: LD_INT 1
8762: ARRAY
8763: PPUSH
8764: LD_STRING D9-FSol1-1
8766: PPUSH
8767: CALL_OW 88
8771: GO 8774
8773: POP
// if Frank then
8774: LD_EXP 26
8778: IFFALSE 8882
// begin PlaceSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 , 8 ) ;
8780: LD_EXP 55
8784: PPUSH
8785: CALL_OW 250
8789: PPUSH
8790: LD_EXP 55
8794: PPUSH
8795: CALL_OW 251
8799: PPUSH
8800: LD_INT 7
8802: PPUSH
8803: LD_INT 8
8805: PPUSH
8806: CALL_OW 330
// CenterNowOnUnits ( mastodont ) ;
8810: LD_EXP 55
8814: PPUSH
8815: CALL_OW 87
// Say ( Frank , D9-Frank-1 ) ;
8819: LD_EXP 26
8823: PPUSH
8824: LD_STRING D9-Frank-1
8826: PPUSH
8827: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
8831: LD_EXP 14
8835: PPUSH
8836: LD_STRING D9-JMM-1
8838: PPUSH
8839: CALL_OW 88
// Say ( Frank , D9-Frank-2 ) ;
8843: LD_EXP 26
8847: PPUSH
8848: LD_STRING D9-Frank-2
8850: PPUSH
8851: CALL_OW 88
// RemoveSeeing ( GetX ( mastodont ) , GetY ( mastodont ) , 7 ) ;
8855: LD_EXP 55
8859: PPUSH
8860: CALL_OW 250
8864: PPUSH
8865: LD_EXP 55
8869: PPUSH
8870: CALL_OW 251
8874: PPUSH
8875: LD_INT 7
8877: PPUSH
8878: CALL_OW 331
// end ; DialogueOff ;
8882: CALL_OW 7
// end ;
8886: PPOPN 1
8888: END
// every 0 0$20 trigger first_attack do var i , selected_option ;
8889: LD_EXP 7
8893: IFFALSE 9920
8895: GO 8897
8897: DISABLE
8898: LD_INT 0
8900: PPUSH
8901: PPUSH
// begin selected_option := 1 ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: LD_INT 1
8909: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8910: LD_INT 10500
8912: PPUSH
8913: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8917: LD_INT 35
8919: PPUSH
8920: CALL_OW 67
// until not ru_attackers ;
8924: LD_EXP 51
8928: NOT
8929: IFFALSE 8917
// PrepareBurlak ;
8931: CALL 2040 0 0
// repeat wait ( 0 0$2 ) ;
8935: LD_INT 70
8937: PPUSH
8938: CALL_OW 67
// until not HasTask ( Burlak ) ;
8942: LD_EXP 45
8946: PPUSH
8947: CALL_OW 314
8951: NOT
8952: IFFALSE 8935
// InGameOn ;
8954: CALL_OW 8
// DialogueOn ;
8958: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
8962: LD_EXP 48
8966: PPUSH
8967: CALL_OW 87
// SayRadio ( Burlak , D10-Bur-1 ) ;
8971: LD_EXP 45
8975: PPUSH
8976: LD_STRING D10-Bur-1
8978: PPUSH
8979: CALL_OW 94
// if Belkov and GetSide ( Belkov ) = 7 then
8983: LD_EXP 46
8987: PUSH
8988: LD_EXP 46
8992: PPUSH
8993: CALL_OW 255
8997: PUSH
8998: LD_INT 7
9000: EQUAL
9001: AND
9002: IFFALSE 9016
// Say ( Belkov , D10-Bel-1 ) ;
9004: LD_EXP 46
9008: PPUSH
9009: LD_STRING D10-Bel-1
9011: PPUSH
9012: CALL_OW 88
// if Gossudarov then
9016: LD_EXP 31
9020: IFFALSE 9034
// Say ( Gossudarov , D10-Gos-1 ) ;
9022: LD_EXP 31
9026: PPUSH
9027: LD_STRING D10-Gos-1
9029: PPUSH
9030: CALL_OW 88
// if Kirilenkova then
9034: LD_EXP 32
9038: IFFALSE 9052
// Say ( Kirilenkova , D10-Kir-1 ) ;
9040: LD_EXP 32
9044: PPUSH
9045: LD_STRING D10-Kir-1
9047: PPUSH
9048: CALL_OW 88
// Say ( SolRu , D10-RSol1-1 ) ;
9052: CALL 12133 0 0
9056: PPUSH
9057: LD_STRING D10-RSol1-1
9059: PPUSH
9060: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-2 ) ;
9064: LD_EXP 45
9068: PPUSH
9069: LD_STRING D10-Bur-2
9071: PPUSH
9072: CALL_OW 94
// Say ( JMM , D10-JMM-2 ) ;
9076: LD_EXP 14
9080: PPUSH
9081: LD_STRING D10-JMM-2
9083: PPUSH
9084: CALL_OW 88
// if Kirilenkova then
9088: LD_EXP 32
9092: IFFALSE 9108
// Say ( Kirilenkova , D10-Kir-2 ) else
9094: LD_EXP 32
9098: PPUSH
9099: LD_STRING D10-Kir-2
9101: PPUSH
9102: CALL_OW 88
9106: GO 9120
// Say ( SolRu , D10-RSol1-2 ) ;
9108: CALL 12133 0 0
9112: PPUSH
9113: LD_STRING D10-RSol1-2
9115: PPUSH
9116: CALL_OW 88
// Say ( JMM , D10-JMM-3 ) ;
9120: LD_EXP 14
9124: PPUSH
9125: LD_STRING D10-JMM-3
9127: PPUSH
9128: CALL_OW 88
// SayRadio ( Burlak , D10-Bur-3 ) ;
9132: LD_EXP 45
9136: PPUSH
9137: LD_STRING D10-Bur-3
9139: PPUSH
9140: CALL_OW 94
// Say ( JMM , D10-JMM-4 ) ;
9144: LD_EXP 14
9148: PPUSH
9149: LD_STRING D10-JMM-4
9151: PPUSH
9152: CALL_OW 88
// DialogueOff ;
9156: CALL_OW 7
// InGameOff ;
9160: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
9164: LD_STRING M2
9166: PPUSH
9167: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9171: LD_INT 35
9173: PPUSH
9174: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , Burlak , 8 ] ] ) ;
9178: LD_INT 22
9180: PUSH
9181: LD_INT 7
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 91
9190: PUSH
9191: LD_EXP 45
9195: PUSH
9196: LD_INT 8
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PPUSH
9208: CALL_OW 69
9212: IFFALSE 9171
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9214: LD_ADDR_VAR 0 1
9218: PUSH
9219: LD_INT 22
9221: PUSH
9222: LD_INT 4
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PPUSH
9229: CALL_OW 69
9233: PUSH
9234: FOR_IN
9235: IFFALSE 9251
// SetSide ( i , 7 ) ;
9237: LD_VAR 0 1
9241: PPUSH
9242: LD_INT 7
9244: PPUSH
9245: CALL_OW 235
9249: GO 9234
9251: POP
9252: POP
// ChangeMissionObjectives ( M3 ) ;
9253: LD_STRING M3
9255: PPUSH
9256: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
9260: LD_INT 35
9262: PPUSH
9263: CALL_OW 67
// until GetDistUnits ( JMM , Burlak ) < 8 ;
9267: LD_EXP 14
9271: PPUSH
9272: LD_EXP 45
9276: PPUSH
9277: CALL_OW 296
9281: PUSH
9282: LD_INT 8
9284: LESS
9285: IFFALSE 9260
// ComTurnUnit ( JMM , Burlak ) ;
9287: LD_EXP 14
9291: PPUSH
9292: LD_EXP 45
9296: PPUSH
9297: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
9301: LD_EXP 45
9305: PPUSH
9306: LD_EXP 14
9310: PPUSH
9311: CALL_OW 119
// wait ( 0 0$0.3 ) ;
9315: LD_INT 10
9317: PPUSH
9318: CALL_OW 67
// DialogueOn ;
9322: CALL_OW 6
// Say ( JMM , D11-JMM-1 ) ;
9326: LD_EXP 14
9330: PPUSH
9331: LD_STRING D11-JMM-1
9333: PPUSH
9334: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
9338: LD_EXP 45
9342: PPUSH
9343: LD_STRING D11-Bur-1
9345: PPUSH
9346: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
9350: LD_EXP 14
9354: PPUSH
9355: LD_STRING D11-JMM-2
9357: PPUSH
9358: CALL_OW 88
// Say ( Burlak , D11-Bur-2 ) ;
9362: LD_EXP 45
9366: PPUSH
9367: LD_STRING D11-Bur-2
9369: PPUSH
9370: CALL_OW 88
// Say ( JMM , D11-JMM-3 ) ;
9374: LD_EXP 14
9378: PPUSH
9379: LD_STRING D11-JMM-3
9381: PPUSH
9382: CALL_OW 88
// Say ( Burlak , D11-Bur-3 ) ;
9386: LD_EXP 45
9390: PPUSH
9391: LD_STRING D11-Bur-3
9393: PPUSH
9394: CALL_OW 88
// Say ( JMM , D11-JMM-4 ) ;
9398: LD_EXP 14
9402: PPUSH
9403: LD_STRING D11-JMM-4
9405: PPUSH
9406: CALL_OW 88
// if ar_base_spotted then
9410: LD_EXP 8
9414: IFFALSE 9430
// Say ( Burlak , D12-Bur-1 ) else
9416: LD_EXP 45
9420: PPUSH
9421: LD_STRING D12-Bur-1
9423: PPUSH
9424: CALL_OW 88
9428: GO 9469
// begin RevealFogArea ( 7 , area_base_arabian ) ;
9430: LD_INT 7
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: CALL_OW 332
// CenterNowOnXY ( 127 , 45 ) ;
9440: LD_INT 127
9442: PPUSH
9443: LD_INT 45
9445: PPUSH
9446: CALL_OW 86
// Say ( Burlak , D12-Bur-1a ) ;
9450: LD_EXP 45
9454: PPUSH
9455: LD_STRING D12-Bur-1a
9457: PPUSH
9458: CALL_OW 88
// dwait ( 0 0$2 ) ;
9462: LD_INT 70
9464: PPUSH
9465: CALL_OW 68
// end ; Say ( Burlak , D12-Bur-1b ) ;
9469: LD_EXP 45
9473: PPUSH
9474: LD_STRING D12-Bur-1b
9476: PPUSH
9477: CALL_OW 88
// Say ( JMM , D12-JMM-1 ) ;
9481: LD_EXP 14
9485: PPUSH
9486: LD_STRING D12-JMM-1
9488: PPUSH
9489: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9493: LD_EXP 45
9497: PPUSH
9498: LD_STRING D12-Bur-2
9500: PPUSH
9501: CALL_OW 88
// if Roth then
9505: LD_EXP 15
9509: IFFALSE 9525
// Say ( Roth , D12-Roth-2 ) else
9511: LD_EXP 15
9515: PPUSH
9516: LD_STRING D12-Roth-2
9518: PPUSH
9519: CALL_OW 88
9523: GO 9537
// Say ( SciRu , D12-RSci1-2 ) ;
9525: CALL 12004 0 0
9529: PPUSH
9530: LD_STRING D12-RSci1-2
9532: PPUSH
9533: CALL_OW 88
// Say ( JMM , D12-JMM-2 ) ;
9537: LD_EXP 14
9541: PPUSH
9542: LD_STRING D12-JMM-2
9544: PPUSH
9545: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9549: LD_EXP 45
9553: PPUSH
9554: LD_STRING D12-Bur-3
9556: PPUSH
9557: CALL_OW 88
// Say ( JMM , D12-JMM-3 ) ;
9561: LD_EXP 14
9565: PPUSH
9566: LD_STRING D12-JMM-3
9568: PPUSH
9569: CALL_OW 88
// Say ( Burlak , D12-Bur-4 ) ;
9573: LD_EXP 45
9577: PPUSH
9578: LD_STRING D12-Bur-4
9580: PPUSH
9581: CALL_OW 88
// case Query ( QBase ) of 1 :
9585: LD_STRING QBase
9587: PPUSH
9588: CALL_OW 97
9592: PUSH
9593: LD_INT 1
9595: DOUBLE
9596: EQUAL
9597: IFTRUE 9601
9599: GO 9719
9601: POP
// begin Say ( JMM , D13a-JMM-1 ) ;
9602: LD_EXP 14
9606: PPUSH
9607: LD_STRING D13a-JMM-1
9609: PPUSH
9610: CALL_OW 88
// Say ( Burlak , D13a-Bur-1 ) ;
9614: LD_EXP 45
9618: PPUSH
9619: LD_STRING D13a-Bur-1
9621: PPUSH
9622: CALL_OW 88
// if Roth then
9626: LD_EXP 15
9630: IFFALSE 9646
// Say ( Roth , D13a-Roth-1 ) else
9632: LD_EXP 15
9636: PPUSH
9637: LD_STRING D13a-Roth-1
9639: PPUSH
9640: CALL_OW 88
9644: GO 9658
// Say ( SciRu , D13a-RSci1-1 ) ;
9646: CALL 12004 0 0
9650: PPUSH
9651: LD_STRING D13a-RSci1-1
9653: PPUSH
9654: CALL_OW 88
// Say ( JMM , D13a-JMM-2 ) ;
9658: LD_EXP 14
9662: PPUSH
9663: LD_STRING D13a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// case Query ( QBaseAgain ) of 1 :
9670: LD_STRING QBaseAgain
9672: PPUSH
9673: CALL_OW 97
9677: PUSH
9678: LD_INT 1
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9697
9686: POP
// selected_option := 2 ; 2 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 2
9694: ST_TO_ADDR
9695: GO 9717
9697: LD_INT 2
9699: DOUBLE
9700: EQUAL
9701: IFTRUE 9705
9703: GO 9716
9705: POP
// selected_option := 3 ; end ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 3
9713: ST_TO_ADDR
9714: GO 9717
9716: POP
// end ; 2 :
9717: GO 9758
9719: LD_INT 2
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 9738
9727: POP
// selected_option := 2 ; 3 :
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: LD_INT 2
9735: ST_TO_ADDR
9736: GO 9758
9738: LD_INT 3
9740: DOUBLE
9741: EQUAL
9742: IFTRUE 9746
9744: GO 9757
9746: POP
// selected_option := 3 ; end ;
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: LD_INT 3
9754: ST_TO_ADDR
9755: GO 9758
9757: POP
// if selected_option = 2 then
9758: LD_VAR 0 2
9762: PUSH
9763: LD_INT 2
9765: EQUAL
9766: IFFALSE 9860
// begin Say ( JMM , D13b-JMM-1 ) ;
9768: LD_EXP 14
9772: PPUSH
9773: LD_STRING D13b-JMM-1
9775: PPUSH
9776: CALL_OW 88
// Say ( Burlak , D13b-Bur-1 ) ;
9780: LD_EXP 45
9784: PPUSH
9785: LD_STRING D13b-Bur-1
9787: PPUSH
9788: CALL_OW 88
// Say ( JMM , D13b-JMM-2 ) ;
9792: LD_EXP 14
9796: PPUSH
9797: LD_STRING D13b-JMM-2
9799: PPUSH
9800: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-2 ) ;
9804: LD_EXP 54
9808: PPUSH
9809: LD_STRING D13b-Abd-2
9811: PPUSH
9812: CALL_OW 94
// Say ( JMM , D13b-JMM-3 ) ;
9816: LD_EXP 14
9820: PPUSH
9821: LD_STRING D13b-JMM-3
9823: PPUSH
9824: CALL_OW 88
// SayRadio ( Abdul , D13b-Abd-3 ) ;
9828: LD_EXP 54
9832: PPUSH
9833: LD_STRING D13b-Abd-3
9835: PPUSH
9836: CALL_OW 94
// Say ( JMM , D13b-JMM-4 ) ;
9840: LD_EXP 14
9844: PPUSH
9845: LD_STRING D13b-JMM-4
9847: PPUSH
9848: CALL_OW 88
// ar_active_attack := true ;
9852: LD_ADDR_EXP 9
9856: PUSH
9857: LD_INT 1
9859: ST_TO_ADDR
// end ; if selected_option = 3 then
9860: LD_VAR 0 2
9864: PUSH
9865: LD_INT 3
9867: EQUAL
9868: IFFALSE 9894
// begin Say ( JMM , D13c-JMM-1 ) ;
9870: LD_EXP 14
9874: PPUSH
9875: LD_STRING D13c-JMM-1
9877: PPUSH
9878: CALL_OW 88
// Say ( Burlak , D13c-Bur-1 ) ;
9882: LD_EXP 45
9886: PPUSH
9887: LD_STRING D13c-Bur-1
9889: PPUSH
9890: CALL_OW 88
// end ; DialogueOff ;
9894: CALL_OW 7
// if not ar_active_attack then
9898: LD_EXP 9
9902: NOT
9903: IFFALSE 9920
// begin wait ( 6 6$00 ) ;
9905: LD_INT 12600
9907: PPUSH
9908: CALL_OW 67
// ar_active_attack := true ;
9912: LD_ADDR_EXP 9
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// end ; end ;
9920: PPOPN 2
9922: END
// every 0 0$1 trigger IsPlaced ( Burlak ) and GetSide ( Burlak ) = 7 do
9923: LD_EXP 45
9927: PPUSH
9928: CALL_OW 305
9932: PUSH
9933: LD_EXP 45
9937: PPUSH
9938: CALL_OW 255
9942: PUSH
9943: LD_INT 7
9945: EQUAL
9946: AND
9947: IFFALSE 10108
9949: GO 9951
9951: DISABLE
// begin wait ( 4 4$40 ) ;
9952: LD_INT 9800
9954: PPUSH
9955: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9959: LD_INT 35
9961: PPUSH
9962: CALL_OW 67
// until not ru_attackers ;
9966: LD_EXP 51
9970: NOT
9971: IFFALSE 9959
// PrepareGnyevko ;
9973: CALL 1984 0 0
// ComMoveXY ( Gnyevko , 124 , 118 ) ;
9977: LD_EXP 47
9981: PPUSH
9982: LD_INT 124
9984: PPUSH
9985: LD_INT 118
9987: PPUSH
9988: CALL_OW 111
// AddComHold ( Gnyevko ) ;
9992: LD_EXP 47
9996: PPUSH
9997: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10001: LD_INT 35
10003: PPUSH
10004: CALL_OW 67
// until IsAt ( Gnyevko , 124 , 118 ) ;
10008: LD_EXP 47
10012: PPUSH
10013: LD_INT 124
10015: PPUSH
10016: LD_INT 118
10018: PPUSH
10019: CALL_OW 307
10023: IFFALSE 10001
// SayRadio ( Gnyevko , DBelkov-Gny-1 ) ;
10025: LD_EXP 47
10029: PPUSH
10030: LD_STRING DBelkov-Gny-1
10032: PPUSH
10033: CALL_OW 94
// Say ( Burlak , DBelkov-Bur-1a ) ;
10037: LD_EXP 45
10041: PPUSH
10042: LD_STRING DBelkov-Bur-1a
10044: PPUSH
10045: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10049: LD_INT 35
10051: PPUSH
10052: CALL_OW 67
// until GetDistUnits ( Gnyevko , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , Gnyevko ) ) < 8 ;
10056: LD_EXP 47
10060: PPUSH
10061: LD_INT 22
10063: PUSH
10064: LD_INT 7
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 69
10075: PPUSH
10076: LD_EXP 47
10080: PPUSH
10081: CALL_OW 74
10085: PPUSH
10086: CALL_OW 296
10090: PUSH
10091: LD_INT 8
10093: LESS
10094: IFFALSE 10049
// SetSide ( Gnyevko , 7 ) ;
10096: LD_EXP 47
10100: PPUSH
10101: LD_INT 7
10103: PPUSH
10104: CALL_OW 235
// end ;
10108: END
// every 10 10$00 + 1 1$30 trigger GetSide ( Burlak ) = 7 do
10109: LD_EXP 45
10113: PPUSH
10114: CALL_OW 255
10118: PUSH
10119: LD_INT 7
10121: EQUAL
10122: IFFALSE 10132
10124: GO 10126
10126: DISABLE
// begin enable ;
10127: ENABLE
// PrepareAmericanAttack ;
10128: CALL 6244 0 0
// end ;
10132: END
// every 0 0$2 trigger FilterAllUnits ( [ f_side , 1 ] ) do var i , tmp ;
10133: LD_INT 22
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 69
10147: IFFALSE 10331
10149: GO 10151
10151: DISABLE
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
// begin while true do
10156: LD_INT 1
10158: IFFALSE 10215
// begin wait ( 0 0$1 ) ;
10160: LD_INT 35
10162: PPUSH
10163: CALL_OW 67
// tmp := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , JMM ) ;
10167: LD_ADDR_VAR 0 2
10171: PUSH
10172: LD_INT 22
10174: PUSH
10175: LD_INT 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: PPUSH
10187: LD_EXP 14
10191: PPUSH
10192: CALL_OW 74
10196: ST_TO_ADDR
// if See ( 7 , tmp ) then
10197: LD_INT 7
10199: PPUSH
10200: LD_VAR 0 2
10204: PPUSH
10205: CALL_OW 292
10209: IFFALSE 10213
// break ;
10211: GO 10215
// end ;
10213: GO 10156
// DialogueOn ;
10215: CALL_OW 6
// CenterNowOnUnits ( tmp ) ;
10219: LD_VAR 0 2
10223: PPUSH
10224: CALL_OW 87
// PlaceSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 , 8 ) ;
10228: LD_VAR 0 2
10232: PPUSH
10233: CALL_OW 250
10237: PPUSH
10238: LD_VAR 0 2
10242: PPUSH
10243: CALL_OW 251
10247: PPUSH
10248: LD_INT 7
10250: PPUSH
10251: LD_INT 8
10253: PPUSH
10254: CALL_OW 330
// if Denis then
10258: LD_EXP 20
10262: IFFALSE 10276
// Say ( Denis , DAmerAttack-Pet-1 ) ;
10264: LD_EXP 20
10268: PPUSH
10269: LD_STRING DAmerAttack-Pet-1
10271: PPUSH
10272: CALL_OW 88
// Say ( JMM , DAmerAttack-JMM-1 ) ;
10276: LD_EXP 14
10280: PPUSH
10281: LD_STRING DAmerAttack-JMM-1
10283: PPUSH
10284: CALL_OW 88
// Say ( Burlak , DStop-Bur-1 ) ;
10288: LD_EXP 45
10292: PPUSH
10293: LD_STRING DStop-Bur-1
10295: PPUSH
10296: CALL_OW 88
// RemoveSeeing ( GetX ( tmp ) , GetY ( tmp ) , 7 ) ;
10300: LD_VAR 0 2
10304: PPUSH
10305: CALL_OW 250
10309: PPUSH
10310: LD_VAR 0 2
10314: PPUSH
10315: CALL_OW 251
10319: PPUSH
10320: LD_INT 7
10322: PPUSH
10323: CALL_OW 331
// DialogueOff ;
10327: CALL_OW 7
// end ;
10331: PPOPN 2
10333: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and IsDead ( ru_depot ) do
10334: LD_INT 22
10336: PUSH
10337: LD_INT 3
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 21
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PPUSH
10358: CALL_OW 69
10362: PUSH
10363: LD_INT 0
10365: EQUAL
10366: PUSH
10367: LD_INT 47
10369: PPUSH
10370: CALL_OW 301
10374: AND
10375: IFFALSE 10417
10377: GO 10379
10379: DISABLE
// begin ChangeMissionObjectives ( M5a ) ;
10380: LD_STRING M5a
10382: PPUSH
10383: CALL_OW 337
// Say ( JMM , D8-JMM-1 ) ;
10387: LD_EXP 14
10391: PPUSH
10392: LD_STRING D8-JMM-1
10394: PPUSH
10395: CALL_OW 88
// if Gossudarov then
10399: LD_EXP 31
10403: IFFALSE 10417
// Say ( Gossudarov , D8-Gos-1 ) ;
10405: LD_EXP 31
10409: PPUSH
10410: LD_STRING D8-Gos-1
10412: PPUSH
10413: CALL_OW 88
// end ;
10417: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 do
10418: LD_INT 22
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 21
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PUSH
10447: LD_INT 0
10449: EQUAL
10450: IFFALSE 10500
10452: GO 10454
10454: DISABLE
// begin ChangeMissionObjectives ( M4c ) ;
10455: LD_STRING M4c
10457: PPUSH
10458: CALL_OW 337
// if Roth then
10462: LD_EXP 15
10466: IFFALSE 10482
// Say ( Roth , DStop-Roth-1 ) else
10468: LD_EXP 15
10472: PPUSH
10473: LD_STRING DStop-Roth-1
10475: PPUSH
10476: CALL_OW 88
10480: GO 10500
// if Gossudarov then
10482: LD_EXP 31
10486: IFFALSE 10500
// Say ( Gossudarov , D8-Gos-1a ) ;
10488: LD_EXP 31
10492: PPUSH
10493: LD_STRING D8-Gos-1a
10495: PPUSH
10496: CALL_OW 88
// end ;
10500: END
// every 0 0$01 trigger GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do
10501: LD_INT 7
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL 13528 0 3
10514: PUSH
10515: LD_INT 0
10517: EQUAL
10518: PUSH
10519: LD_INT 7
10521: PPUSH
10522: LD_INT 3
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL 13528 0 3
10532: PUSH
10533: LD_INT 0
10535: EQUAL
10536: AND
10537: IFFALSE 10549
10539: GO 10541
10541: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
10542: LD_STRING M1a
10544: PPUSH
10545: CALL_OW 337
// end ;
10549: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ f_side , 3 ] ) = 0 and FilterAllUnits ( [ f_side , 1 ] ) = 0 and GetTechNation ( 7 , 1 , state_enabled ) = 0 and GetTechNation ( 7 , 3 , state_enabled ) = 0 do var i , tmp , tmp2 ;
10550: LD_INT 22
10552: PUSH
10553: LD_INT 2
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 21
10562: PUSH
10563: LD_INT 1
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 69
10578: PUSH
10579: LD_INT 0
10581: EQUAL
10582: PUSH
10583: LD_INT 22
10585: PUSH
10586: LD_INT 3
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 69
10597: PUSH
10598: LD_INT 0
10600: EQUAL
10601: AND
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_INT 1
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PPUSH
10613: CALL_OW 69
10617: PUSH
10618: LD_INT 0
10620: EQUAL
10621: AND
10622: PUSH
10623: LD_INT 7
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: CALL 13528 0 3
10636: PUSH
10637: LD_INT 0
10639: EQUAL
10640: AND
10641: PUSH
10642: LD_INT 7
10644: PPUSH
10645: LD_INT 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL 13528 0 3
10655: PUSH
10656: LD_INT 0
10658: EQUAL
10659: AND
10660: IFFALSE 12001
10662: GO 10664
10664: DISABLE
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
10669: PPUSH
// begin wait ( 0 0$3 ) ;
10670: LD_INT 105
10672: PPUSH
10673: CALL_OW 67
// if not IsDead ( Masha ) then
10677: LD_EXP 48
10681: PPUSH
10682: CALL_OW 301
10686: NOT
10687: IFFALSE 10701
// AddMedal ( Masha , 1 ) else
10689: LD_STRING Masha
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 101
10699: GO 10712
// AddMedal ( Masha , - 1 ) ;
10701: LD_STRING Masha
10703: PPUSH
10704: LD_INT 1
10706: NEG
10707: PPUSH
10708: CALL_OW 101
// if abdul_escaped then
10712: LD_EXP 12
10716: IFFALSE 10731
// AddMedal ( Abdul , - 1 ) else
10718: LD_STRING Abdul
10720: PPUSH
10721: LD_INT 1
10723: NEG
10724: PPUSH
10725: CALL_OW 101
10729: GO 10741
// AddMedal ( Abdul , 1 ) ;
10731: LD_STRING Abdul
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 101
// if loss_counter = 0 then
10741: LD_EXP 13
10745: PUSH
10746: LD_INT 0
10748: EQUAL
10749: IFFALSE 10763
// AddMedal ( People , 2 ) else
10751: LD_STRING People
10753: PPUSH
10754: LD_INT 2
10756: PPUSH
10757: CALL_OW 101
10761: GO 10813
// if loss_counter <= [ 3 , 2 , 2 ] [ Difficulty ] then
10763: LD_EXP 13
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: PUSH
10782: LD_OWVAR 67
10786: ARRAY
10787: LESSEQUAL
10788: IFFALSE 10802
// AddMedal ( People , 1 ) else
10790: LD_STRING People
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 101
10800: GO 10813
// AddMedal ( People , - 1 ) ;
10802: LD_STRING People
10804: PPUSH
10805: LD_INT 1
10807: NEG
10808: PPUSH
10809: CALL_OW 101
// GiveMedals ( MAIN ) ;
10813: LD_STRING MAIN
10815: PPUSH
10816: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
10820: LD_ADDR_VAR 0 2
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: LD_INT 25
10840: PUSH
10841: LD_INT 1
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 25
10850: PUSH
10851: LD_INT 2
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 3
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 5
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 8
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 9
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PPUSH
10922: CALL_OW 69
10926: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10927: LD_VAR 0 2
10931: PPUSH
10932: CALL_OW 43
// tmp2 := [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Burlak , Belkov , Gnyevko ] ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_EXP 14
10945: PUSH
10946: LD_EXP 15
10950: PUSH
10951: LD_EXP 16
10955: PUSH
10956: LD_EXP 17
10960: PUSH
10961: LD_EXP 18
10965: PUSH
10966: LD_EXP 19
10970: PUSH
10971: LD_EXP 20
10975: PUSH
10976: LD_EXP 21
10980: PUSH
10981: LD_EXP 22
10985: PUSH
10986: LD_EXP 23
10990: PUSH
10991: LD_EXP 24
10995: PUSH
10996: LD_EXP 25
11000: PUSH
11001: LD_EXP 26
11005: PUSH
11006: LD_EXP 27
11010: PUSH
11011: LD_EXP 28
11015: PUSH
11016: LD_EXP 29
11020: PUSH
11021: LD_EXP 30
11025: PUSH
11026: LD_EXP 31
11030: PUSH
11031: LD_EXP 32
11035: PUSH
11036: LD_EXP 33
11040: PUSH
11041: LD_EXP 35
11045: PUSH
11046: LD_EXP 36
11050: PUSH
11051: LD_EXP 37
11055: PUSH
11056: LD_EXP 38
11060: PUSH
11061: LD_EXP 39
11065: PUSH
11066: LD_EXP 40
11070: PUSH
11071: LD_EXP 41
11075: PUSH
11076: LD_EXP 42
11080: PUSH
11081: LD_EXP 43
11085: PUSH
11086: LD_EXP 44
11090: PUSH
11091: LD_EXP 45
11095: PUSH
11096: LD_EXP 46
11100: PUSH
11101: LD_EXP 47
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// if tmp diff tmp2 then
11141: LD_VAR 0 2
11145: PUSH
11146: LD_VAR 0 3
11150: DIFF
11151: IFFALSE 11171
// SaveCharacters ( tmp diff tmp2 , 13a_others ) ;
11153: LD_VAR 0 2
11157: PUSH
11158: LD_VAR 0 3
11162: DIFF
11163: PPUSH
11164: LD_STRING 13a_others
11166: PPUSH
11167: CALL_OW 38
// SaveCharacters ( JMM , 13a_JMM ) ;
11171: LD_EXP 14
11175: PPUSH
11176: LD_STRING 13a_JMM
11178: PPUSH
11179: CALL_OW 38
// if Titov then
11183: LD_EXP 33
11187: IFFALSE 11201
// SaveCharacters ( Titov , 13a_Titov ) ;
11189: LD_EXP 33
11193: PPUSH
11194: LD_STRING 13a_Titov
11196: PPUSH
11197: CALL_OW 38
// if Dolgov then
11201: LD_EXP 35
11205: IFFALSE 11219
// SaveCharacters ( Dolgov , 13a_Dolgov ) ;
11207: LD_EXP 35
11211: PPUSH
11212: LD_STRING 13a_Dolgov
11214: PPUSH
11215: CALL_OW 38
// if Petrosyan then
11219: LD_EXP 36
11223: IFFALSE 11237
// SaveCharacters ( Petrosyan , 13a_Petrosyan ) ;
11225: LD_EXP 36
11229: PPUSH
11230: LD_STRING 13a_Petrosyan
11232: PPUSH
11233: CALL_OW 38
// if Scholtze then
11237: LD_EXP 37
11241: IFFALSE 11255
// SaveCharacters ( Scholtze , 13a_Scholtze ) ;
11243: LD_EXP 37
11247: PPUSH
11248: LD_STRING 13a_Scholtze
11250: PPUSH
11251: CALL_OW 38
// if Oblukov then
11255: LD_EXP 38
11259: IFFALSE 11273
// SaveCharacters ( Oblukov , 13a_Oblukov ) ;
11261: LD_EXP 38
11265: PPUSH
11266: LD_STRING 13a_Oblukov
11268: PPUSH
11269: CALL_OW 38
// if Kapitsova then
11273: LD_EXP 39
11277: IFFALSE 11291
// SaveCharacters ( Kapitsova , 13a_Kapitsova ) ;
11279: LD_EXP 39
11283: PPUSH
11284: LD_STRING 13a_Kapitsova
11286: PPUSH
11287: CALL_OW 38
// if Lipshchin then
11291: LD_EXP 40
11295: IFFALSE 11309
// SaveCharacters ( Lipshchin , 13a_Lipshchin ) ;
11297: LD_EXP 40
11301: PPUSH
11302: LD_STRING 13a_Lipshchin
11304: PPUSH
11305: CALL_OW 38
// if Petrovova then
11309: LD_EXP 41
11313: IFFALSE 11327
// SaveCharacters ( Petrovova , 13a_Petrovova ) ;
11315: LD_EXP 41
11319: PPUSH
11320: LD_STRING 13a_Petrovova
11322: PPUSH
11323: CALL_OW 38
// if Kovalyuk then
11327: LD_EXP 42
11331: IFFALSE 11345
// SaveCharacters ( Kovalyuk , 13a_Kovalyuk ) ;
11333: LD_EXP 42
11337: PPUSH
11338: LD_STRING 13a_Kovalyuk
11340: PPUSH
11341: CALL_OW 38
// if Kuzmov then
11345: LD_EXP 43
11349: IFFALSE 11363
// SaveCharacters ( Kuzmov , 13a_Kuzmov ) ;
11351: LD_EXP 43
11355: PPUSH
11356: LD_STRING 13a_Kuzmov
11358: PPUSH
11359: CALL_OW 38
// if Karamazov then
11363: LD_EXP 44
11367: IFFALSE 11381
// SaveCharacters ( Karamazov , 13a_Karamazov ) ;
11369: LD_EXP 44
11373: PPUSH
11374: LD_STRING 13a_Karamazov
11376: PPUSH
11377: CALL_OW 38
// if Burlak then
11381: LD_EXP 45
11385: IFFALSE 11399
// SaveCharacters ( Burlak , 13a_Burlak ) ;
11387: LD_EXP 45
11391: PPUSH
11392: LD_STRING 13a_Burlak
11394: PPUSH
11395: CALL_OW 38
// if Belkov then
11399: LD_EXP 46
11403: IFFALSE 11417
// SaveCharacters ( Belkov , 13a_Belkov ) ;
11405: LD_EXP 46
11409: PPUSH
11410: LD_STRING 13a_Belkov
11412: PPUSH
11413: CALL_OW 38
// if Gnyevko then
11417: LD_EXP 47
11421: IFFALSE 11435
// SaveCharacters ( Gnyevko , 13a_Gnyevko ) ;
11423: LD_EXP 47
11427: PPUSH
11428: LD_STRING 13a_Gnyevko
11430: PPUSH
11431: CALL_OW 38
// if Lisa then
11435: LD_EXP 16
11439: IFFALSE 11453
// SaveCharacters ( Lisa , 13a_Lisa ) ;
11441: LD_EXP 16
11445: PPUSH
11446: LD_STRING 13a_Lisa
11448: PPUSH
11449: CALL_OW 38
// if Donaldson then
11453: LD_EXP 17
11457: IFFALSE 11471
// SaveCharacters ( Donaldson , 13a_Donaldson ) ;
11459: LD_EXP 17
11463: PPUSH
11464: LD_STRING 13a_Donaldson
11466: PPUSH
11467: CALL_OW 38
// if Bobby then
11471: LD_EXP 18
11475: IFFALSE 11489
// SaveCharacters ( Bobby , 13a_Bobby ) ;
11477: LD_EXP 18
11481: PPUSH
11482: LD_STRING 13a_Bobby
11484: PPUSH
11485: CALL_OW 38
// if Cyrus then
11489: LD_EXP 19
11493: IFFALSE 11507
// SaveCharacters ( Cyrus , 13a_Cyrus ) ;
11495: LD_EXP 19
11499: PPUSH
11500: LD_STRING 13a_Cyrus
11502: PPUSH
11503: CALL_OW 38
// if Denis then
11507: LD_EXP 20
11511: IFFALSE 11525
// SaveCharacters ( Denis , 13a_Denis ) ;
11513: LD_EXP 20
11517: PPUSH
11518: LD_STRING 13a_Denis
11520: PPUSH
11521: CALL_OW 38
// if Brown then
11525: LD_EXP 21
11529: IFFALSE 11543
// SaveCharacters ( Brown , 13a_Brown ) ;
11531: LD_EXP 21
11535: PPUSH
11536: LD_STRING 13a_Brown
11538: PPUSH
11539: CALL_OW 38
// if Gladstone then
11543: LD_EXP 22
11547: IFFALSE 11561
// SaveCharacters ( Gladstone , 13a_Gladstone ) ;
11549: LD_EXP 22
11553: PPUSH
11554: LD_STRING 13a_Gladstone
11556: PPUSH
11557: CALL_OW 38
// if Houten then
11561: LD_EXP 23
11565: IFFALSE 11579
// SaveCharacters ( Houten , 13a_Houten ) ;
11567: LD_EXP 23
11571: PPUSH
11572: LD_STRING 13a_Houten
11574: PPUSH
11575: CALL_OW 38
// if Cornel then
11579: LD_EXP 24
11583: IFFALSE 11597
// SaveCharacters ( Cornel , 13a_Cornel ) ;
11585: LD_EXP 24
11589: PPUSH
11590: LD_STRING 13a_Cornel
11592: PPUSH
11593: CALL_OW 38
// if Gary then
11597: LD_EXP 25
11601: IFFALSE 11615
// SaveCharacters ( Gary , 13a_Gary ) ;
11603: LD_EXP 25
11607: PPUSH
11608: LD_STRING 13a_Gary
11610: PPUSH
11611: CALL_OW 38
// if Frank then
11615: LD_EXP 26
11619: IFFALSE 11633
// SaveCharacters ( Frank , 13a_Frank ) ;
11621: LD_EXP 26
11625: PPUSH
11626: LD_STRING 13a_Frank
11628: PPUSH
11629: CALL_OW 38
// if Kikuchi then
11633: LD_EXP 27
11637: IFFALSE 11651
// SaveCharacters ( Kikuchi , 13a_Kikuchi ) ;
11639: LD_EXP 27
11643: PPUSH
11644: LD_STRING 13a_Kikuchi
11646: PPUSH
11647: CALL_OW 38
// if Simms then
11651: LD_EXP 28
11655: IFFALSE 11669
// SaveCharacters ( Simms , 13a_Simms ) ;
11657: LD_EXP 28
11661: PPUSH
11662: LD_STRING 13a_Simms
11664: PPUSH
11665: CALL_OW 38
// if Joan then
11669: LD_EXP 29
11673: IFFALSE 11687
// SaveCharacters ( Joan , 13a_Joan ) ;
11675: LD_EXP 29
11679: PPUSH
11680: LD_STRING 13a_Joan
11682: PPUSH
11683: CALL_OW 38
// if DeltaDoctor then
11687: LD_EXP 30
11691: IFFALSE 11705
// SaveCharacters ( DeltaDoctor , 13a_DeltaDoctor ) ;
11693: LD_EXP 30
11697: PPUSH
11698: LD_STRING 13a_DeltaDoctor
11700: PPUSH
11701: CALL_OW 38
// if Gossudarov then
11705: LD_EXP 31
11709: IFFALSE 11723
// SaveCharacters ( Gossudarov , 13a_Gossudarov ) ;
11711: LD_EXP 31
11715: PPUSH
11716: LD_STRING 13a_Gossudarov
11718: PPUSH
11719: CALL_OW 38
// if Kirilenkova then
11723: LD_EXP 32
11727: IFFALSE 11741
// SaveCharacters ( Kirilenkova , 13a_Kirilenkova ) ;
11729: LD_EXP 32
11733: PPUSH
11734: LD_STRING 13a_Kirilenkova
11736: PPUSH
11737: CALL_OW 38
// if Masha then
11741: LD_EXP 48
11745: IFFALSE 11800
// SaveVariable ( [ GetChassis ( Masha ) , GetEngine ( Masha ) , GetControl ( Masha ) , GetWeapon ( Masha ) ] , 13a_Masha ) ;
11747: LD_EXP 48
11751: PPUSH
11752: CALL_OW 265
11756: PUSH
11757: LD_EXP 48
11761: PPUSH
11762: CALL_OW 262
11766: PUSH
11767: LD_EXP 48
11771: PPUSH
11772: CALL_OW 263
11776: PUSH
11777: LD_EXP 48
11781: PPUSH
11782: CALL_OW 264
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PPUSH
11793: LD_STRING 13a_Masha
11795: PPUSH
11796: CALL_OW 39
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
11800: LD_ADDR_VAR 0 2
11804: PUSH
11805: LD_INT 21
11807: PUSH
11808: LD_INT 3
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: ST_TO_ADDR
// tmp2 := [ ] ;
11820: LD_ADDR_VAR 0 3
11824: PUSH
11825: EMPTY
11826: ST_TO_ADDR
// if tmp then
11827: LD_VAR 0 2
11831: IFFALSE 11979
// for i in tmp do
11833: LD_ADDR_VAR 0 1
11837: PUSH
11838: LD_VAR 0 2
11842: PUSH
11843: FOR_IN
11844: IFFALSE 11977
// if IsOk ( i ) then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 302
11855: IFFALSE 11975
// tmp2 := tmp2 ^ [ GetSide ( i ) , GetNation ( i ) , GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ;
11857: LD_ADDR_VAR 0 3
11861: PUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 255
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 248
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 266
11896: PUSH
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 250
11906: PUSH
11907: LD_VAR 0 1
11911: PPUSH
11912: CALL_OW 251
11916: PUSH
11917: LD_VAR 0 1
11921: PPUSH
11922: CALL_OW 254
11926: PUSH
11927: LD_VAR 0 1
11931: PPUSH
11932: CALL_OW 267
11936: PUSH
11937: LD_VAR 0 1
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 268
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_INT 2
11957: PPUSH
11958: CALL_OW 268
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: ADD
11974: ST_TO_ADDR
11975: GO 11843
11977: POP
11978: POP
// if tmp2 then
11979: LD_VAR 0 3
11983: IFFALSE 11997
// SaveVariable ( tmp2 , 13a_buildings ) ;
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_STRING 13a_buildings
11992: PPUSH
11993: CALL_OW 39
// YouWin ;
11997: CALL_OW 103
// end ;
12001: PPOPN 3
12003: END
// export function SciRu ; var tmp , t ; begin
12004: LD_INT 0
12006: PPUSH
12007: PPUSH
12008: PPUSH
// t := [ Gossudarov , Burlak , Titov , Belkov , Gnyevko ] ;
12009: LD_ADDR_VAR 0 3
12013: PUSH
12014: LD_EXP 31
12018: PUSH
12019: LD_EXP 45
12023: PUSH
12024: LD_EXP 33
12028: PUSH
12029: LD_EXP 46
12033: PUSH
12034: LD_EXP 47
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff t ;
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: LD_INT 22
12053: PUSH
12054: LD_INT 7
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 23
12063: PUSH
12064: LD_INT 3
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 25
12073: PUSH
12074: LD_INT 4
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 26
12083: PUSH
12084: LD_INT 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: PPUSH
12097: CALL_OW 69
12101: PUSH
12102: LD_VAR 0 3
12106: DIFF
12107: ST_TO_ADDR
// if tmp then
12108: LD_VAR 0 2
12112: IFFALSE 12128
// result := tmp [ 1 ] ;
12114: LD_ADDR_VAR 0 1
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 1
12126: ARRAY
12127: ST_TO_ADDR
// end ;
12128: LD_VAR 0 1
12132: RET
// export function SolRu ; var tmp , t ; begin
12133: LD_INT 0
12135: PPUSH
12136: PPUSH
12137: PPUSH
// t := [ Belkov , Burlak , Gossudarov ] ;
12138: LD_ADDR_VAR 0 3
12142: PUSH
12143: LD_EXP 46
12147: PUSH
12148: LD_EXP 45
12152: PUSH
12153: LD_EXP 31
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: LIST
12162: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff t ;
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_INT 22
12170: PUSH
12171: LD_INT 7
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 3
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 25
12190: PUSH
12191: LD_INT 1
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 26
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 69
12218: PUSH
12219: LD_VAR 0 3
12223: DIFF
12224: ST_TO_ADDR
// if tmp then
12225: LD_VAR 0 2
12229: IFFALSE 12245
// result := tmp [ 1 ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 2
12240: PUSH
12241: LD_INT 1
12243: ARRAY
12244: ST_TO_ADDR
// end ; end_of_file
12245: LD_VAR 0 1
12249: RET
// on UnitDestroyed ( un ) do var i , side ;
12250: LD_INT 0
12252: PPUSH
12253: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) then
12254: LD_VAR 0 1
12258: PUSH
12259: LD_INT 22
12261: PUSH
12262: LD_INT 7
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: LD_INT 25
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 2
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 3
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 4
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 25
12314: PUSH
12315: LD_INT 5
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 8
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 9
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: IN
12361: IFFALSE 12377
// loss_counter := loss_counter + 1 ;
12363: LD_ADDR_EXP 13
12367: PUSH
12368: LD_EXP 13
12372: PUSH
12373: LD_INT 1
12375: PLUS
12376: ST_TO_ADDR
// if un = Abdul then
12377: LD_VAR 0 1
12381: PUSH
12382: LD_EXP 54
12386: EQUAL
12387: IFFALSE 12397
// abdul_escaped := false ;
12389: LD_ADDR_EXP 12
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// if un in ru_attackers then
12397: LD_VAR 0 1
12401: PUSH
12402: LD_EXP 51
12406: IN
12407: IFFALSE 12425
// ru_attackers := ru_attackers diff un ;
12409: LD_ADDR_EXP 51
12413: PUSH
12414: LD_EXP 51
12418: PUSH
12419: LD_VAR 0 1
12423: DIFF
12424: ST_TO_ADDR
// if un in ar_attackers then
12425: LD_VAR 0 1
12429: PUSH
12430: LD_EXP 10
12434: IN
12435: IFFALSE 12453
// ar_attackers := ar_attackers diff un ;
12437: LD_ADDR_EXP 10
12441: PUSH
12442: LD_EXP 10
12446: PUSH
12447: LD_VAR 0 1
12451: DIFF
12452: ST_TO_ADDR
// if un = JMM then
12453: LD_VAR 0 1
12457: PUSH
12458: LD_EXP 14
12462: EQUAL
12463: IFFALSE 12474
// begin YouLost ( JMM ) ;
12465: LD_STRING JMM
12467: PPUSH
12468: CALL_OW 104
// exit ;
12472: GO 12563
// end ; if un = Burlak then
12474: LD_VAR 0 1
12478: PUSH
12479: LD_EXP 45
12483: EQUAL
12484: IFFALSE 12495
// begin YouLost ( Burlak ) ;
12486: LD_STRING Burlak
12488: PPUSH
12489: CALL_OW 104
// exit ;
12493: GO 12563
// end ; if un = freedom then
12495: LD_VAR 0 1
12499: PUSH
12500: LD_EXP 3
12504: EQUAL
12505: IFFALSE 12516
// begin YouLost ( Destroyed ) ;
12507: LD_STRING Destroyed
12509: PPUSH
12510: CALL_OW 104
// exit ;
12514: GO 12563
// end ; if un = Masha then
12516: LD_VAR 0 1
12520: PUSH
12521: LD_EXP 48
12525: EQUAL
12526: IFFALSE 12535
// ChangeMissionObjectives ( M4b ) ;
12528: LD_STRING M4b
12530: PPUSH
12531: CALL_OW 337
// if un = Mastodont then
12535: LD_VAR 0 1
12539: PUSH
12540: LD_EXP 55
12544: EQUAL
12545: IFFALSE 12554
// ChangeMissionObjectives ( M4a ) ;
12547: LD_STRING M4a
12549: PPUSH
12550: CALL_OW 337
// MCE_UnitDestroyed ( un ) ;
12554: LD_VAR 0 1
12558: PPUSH
12559: CALL 71014 0 1
// end ;
12563: PPOPN 3
12565: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: LD_VAR 0 2
12575: PPUSH
12576: CALL 72881 0 2
// end ;
12580: PPOPN 2
12582: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
12583: LD_VAR 0 1
12587: PPUSH
12588: CALL 71963 0 1
// end ;
12592: PPOPN 1
12594: END
// on BuildingComplete ( building ) do begin if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_btype , b_depot ] ] ) then
12595: LD_VAR 0 1
12599: PUSH
12600: LD_INT 22
12602: PUSH
12603: LD_INT 7
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: LD_INT 30
12612: PUSH
12613: LD_INT 0
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PPUSH
12624: CALL_OW 69
12628: IN
12629: IFFALSE 12668
// begin SetBName ( building , freedom ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_STRING freedom
12638: PPUSH
12639: CALL_OW 500
// SetRestrict ( b_depot , 7 , false ) ;
12643: LD_INT 0
12645: PPUSH
12646: LD_INT 7
12648: PPUSH
12649: LD_INT 0
12651: PPUSH
12652: CALL_OW 324
// freedom := building ;
12656: LD_ADDR_EXP 3
12660: PUSH
12661: LD_VAR 0 1
12665: ST_TO_ADDR
// exit ;
12666: GO 12734
// end ; if building in FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 3 ] , [ f_btype , b_lab ] ] ) then
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 7
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 23
12685: PUSH
12686: LD_INT 3
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 30
12695: PUSH
12696: LD_INT 6
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: IN
12713: IFFALSE 12725
// begin ru_lab_builded := true ;
12715: LD_ADDR_EXP 5
12719: PUSH
12720: LD_INT 1
12722: ST_TO_ADDR
// exit ;
12723: GO 12734
// end ; MCE_BuildingComplete ( building ) ;
12725: LD_VAR 0 1
12729: PPUSH
12730: CALL 72197 0 1
// end ;
12734: PPOPN 1
12736: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
12737: LD_VAR 0 1
12741: PPUSH
12742: LD_VAR 0 2
12746: PPUSH
12747: CALL 70726 0 2
// end ;
12751: PPOPN 2
12753: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
12754: LD_VAR 0 1
12758: PPUSH
12759: LD_VAR 0 2
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_VAR 0 4
12773: PPUSH
12774: LD_VAR 0 5
12778: PPUSH
12779: CALL 70353 0 5
// end ;
12783: PPOPN 5
12785: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12786: LD_VAR 0 1
12790: PPUSH
12791: LD_VAR 0 2
12795: PPUSH
12796: CALL 70041 0 2
// end ;
12800: PPOPN 2
12802: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12803: LD_VAR 0 1
12807: PPUSH
12808: LD_VAR 0 2
12812: PPUSH
12813: LD_VAR 0 3
12817: PPUSH
12818: LD_VAR 0 4
12822: PPUSH
12823: CALL 69886 0 4
// end ;
12827: PPOPN 4
12829: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_VAR 0 2
12839: PPUSH
12840: LD_VAR 0 3
12844: PPUSH
12845: CALL 69668 0 3
// end ;
12849: PPOPN 3
12851: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12852: LD_VAR 0 1
12856: PPUSH
12857: LD_VAR 0 2
12861: PPUSH
12862: CALL 69560 0 2
// end ;
12866: PPOPN 2
12868: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12869: LD_VAR 0 1
12873: PPUSH
12874: LD_VAR 0 2
12878: PPUSH
12879: CALL 73135 0 2
// end ;
12883: PPOPN 2
12885: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12886: LD_VAR 0 1
12890: PPUSH
12891: LD_VAR 0 2
12895: PPUSH
12896: LD_VAR 0 3
12900: PPUSH
12901: LD_VAR 0 4
12905: PPUSH
12906: CALL 73344 0 4
// end ;
12910: PPOPN 4
12912: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12913: LD_VAR 0 1
12917: PPUSH
12918: LD_VAR 0 2
12922: PPUSH
12923: CALL 69376 0 2
// end ; end_of_file
12927: PPOPN 2
12929: END
// every 0 0$30 do var cr , time ;
12930: GO 12932
12932: DISABLE
12933: LD_INT 0
12935: PPUSH
12936: PPUSH
// begin time := 0 0$10 ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_INT 350
12944: ST_TO_ADDR
// while game do
12945: LD_EXP 2
12949: IFFALSE 13048
// begin wait ( time ) ;
12951: LD_VAR 0 2
12955: PPUSH
12956: CALL_OW 67
// if tick > 2 2$00 then
12960: LD_OWVAR 1
12964: PUSH
12965: LD_INT 4200
12967: GREATER
12968: IFFALSE 13001
// time := time + [ 0 0$06 , 0 0$07 , 0 0$08 ] [ Difficulty ] ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_VAR 0 2
12979: PUSH
12980: LD_INT 210
12982: PUSH
12983: LD_INT 245
12985: PUSH
12986: LD_INT 280
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: LD_OWVAR 67
12998: ARRAY
12999: PLUS
13000: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 70 , 49 , 25 , true ) ;
13001: LD_INT 1
13003: PPUSH
13004: LD_INT 5
13006: PPUSH
13007: CALL_OW 12
13011: PPUSH
13012: LD_INT 70
13014: PPUSH
13015: LD_INT 49
13017: PPUSH
13018: LD_INT 25
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: CALL_OW 56
// if time > 5 5$00 then
13028: LD_VAR 0 2
13032: PUSH
13033: LD_INT 10500
13035: GREATER
13036: IFFALSE 13046
// time := 0 0$30 ;
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: LD_INT 1050
13045: ST_TO_ADDR
// end ;
13046: GO 12945
// end ;
13048: PPOPN 2
13050: END
// every 0 0$30 do var cr , time ;
13051: GO 13053
13053: DISABLE
13054: LD_INT 0
13056: PPUSH
13057: PPUSH
// begin time := 0 0$01 ;
13058: LD_ADDR_VAR 0 2
13062: PUSH
13063: LD_INT 35
13065: ST_TO_ADDR
// while game do
13066: LD_EXP 2
13070: IFFALSE 13159
// begin wait ( time ) ;
13072: LD_VAR 0 2
13076: PPUSH
13077: CALL_OW 67
// time := time + [ 0 0$04 , 0 0$05 , 0 0$06 ] [ Difficulty ] ;
13081: LD_ADDR_VAR 0 2
13085: PUSH
13086: LD_VAR 0 2
13090: PUSH
13091: LD_INT 140
13093: PUSH
13094: LD_INT 175
13096: PUSH
13097: LD_INT 210
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PUSH
13105: LD_OWVAR 67
13109: ARRAY
13110: PLUS
13111: ST_TO_ADDR
// CreateCratesXYR ( rand ( 3 , 5 ) , 26 , 9 , 30 , true ) ;
13112: LD_INT 3
13114: PPUSH
13115: LD_INT 5
13117: PPUSH
13118: CALL_OW 12
13122: PPUSH
13123: LD_INT 26
13125: PPUSH
13126: LD_INT 9
13128: PPUSH
13129: LD_INT 30
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 56
// if time > 3 3$00 then
13139: LD_VAR 0 2
13143: PUSH
13144: LD_INT 6300
13146: GREATER
13147: IFFALSE 13157
// time := 0 0$20 ;
13149: LD_ADDR_VAR 0 2
13153: PUSH
13154: LD_INT 700
13156: ST_TO_ADDR
// end ;
13157: GO 13066
// end ;
13159: PPOPN 2
13161: END
// every 0 0$30 do var cr , time ;
13162: GO 13164
13164: DISABLE
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
// begin time := 0 0$20 ;
13169: LD_ADDR_VAR 0 2
13173: PUSH
13174: LD_INT 700
13176: ST_TO_ADDR
// while game do
13177: LD_EXP 2
13181: IFFALSE 13306
// begin wait ( time ) ;
13183: LD_VAR 0 2
13187: PPUSH
13188: CALL_OW 67
// time := time + [ 0 0$05 , 0 0$06 , 0 0$08 ] [ Difficulty ] ;
13192: LD_ADDR_VAR 0 2
13196: PUSH
13197: LD_VAR 0 2
13201: PUSH
13202: LD_INT 175
13204: PUSH
13205: LD_INT 210
13207: PUSH
13208: LD_INT 280
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_OWVAR 67
13220: ARRAY
13221: PLUS
13222: ST_TO_ADDR
// CreateCratesXYR ( rand ( 1 , 5 ) , 179 , 101 , 20 , true ) ;
13223: LD_INT 1
13225: PPUSH
13226: LD_INT 5
13228: PPUSH
13229: CALL_OW 12
13233: PPUSH
13234: LD_INT 179
13236: PPUSH
13237: LD_INT 101
13239: PPUSH
13240: LD_INT 20
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 56
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
13250: LD_INT 350
13252: PPUSH
13253: LD_INT 525
13255: PPUSH
13256: CALL_OW 12
13260: PPUSH
13261: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area_collect_arabian , true ) ;
13265: LD_INT 1
13267: PPUSH
13268: LD_INT 5
13270: PPUSH
13271: CALL_OW 12
13275: PPUSH
13276: LD_INT 9
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: CALL_OW 55
// if time > 4 4$00 then
13286: LD_VAR 0 2
13290: PUSH
13291: LD_INT 8400
13293: GREATER
13294: IFFALSE 13304
// time := 0 0$30 ;
13296: LD_ADDR_VAR 0 2
13300: PUSH
13301: LD_INT 1050
13303: ST_TO_ADDR
// end ;
13304: GO 13177
// end ;
13306: PPOPN 2
13308: END
// every 0 0$30 do var cr , time ;
13309: GO 13311
13311: DISABLE
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
// begin time := 0 0$10 ;
13316: LD_ADDR_VAR 0 2
13320: PUSH
13321: LD_INT 350
13323: ST_TO_ADDR
// while game do
13324: LD_EXP 2
13328: IFFALSE 13462
// begin wait ( time ) ;
13330: LD_VAR 0 2
13334: PPUSH
13335: CALL_OW 67
// time := time + 0 0$10 ;
13339: LD_ADDR_VAR 0 2
13343: PUSH
13344: LD_VAR 0 2
13348: PUSH
13349: LD_INT 350
13351: PLUS
13352: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , area_crates_russian , true ) ;
13353: LD_INT 1
13355: PPUSH
13356: LD_INT 5
13358: PPUSH
13359: CALL_OW 12
13363: PPUSH
13364: LD_INT 11
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 55
// cr := rand ( 1 , 3 ) ;
13374: LD_ADDR_VAR 0 1
13378: PUSH
13379: LD_INT 1
13381: PPUSH
13382: LD_INT 3
13384: PPUSH
13385: CALL_OW 12
13389: ST_TO_ADDR
// if cr = 1 then
13390: LD_VAR 0 1
13394: PUSH
13395: LD_INT 1
13397: EQUAL
13398: IFFALSE 13442
// begin wait ( rand ( 0 0$20 , 0 0$45 ) ) ;
13400: LD_INT 700
13402: PPUSH
13403: LD_INT 1575
13405: PPUSH
13406: CALL_OW 12
13410: PPUSH
13411: CALL_OW 67
// CreateCratesXYR ( rand ( 1 , 5 ) , 34 , 50 , 7 , true ) ;
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 5
13420: PPUSH
13421: CALL_OW 12
13425: PPUSH
13426: LD_INT 34
13428: PPUSH
13429: LD_INT 50
13431: PPUSH
13432: LD_INT 7
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 56
// end ; if time > 8 8$00 then
13442: LD_VAR 0 2
13446: PUSH
13447: LD_INT 16800
13449: GREATER
13450: IFFALSE 13460
// time := 0 0$40 ;
13452: LD_ADDR_VAR 0 2
13456: PUSH
13457: LD_INT 1400
13459: ST_TO_ADDR
// end ;
13460: GO 13324
// end ; end_of_file
13462: PPOPN 2
13464: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
// if exist_mode then
13469: LD_VAR 0 2
13473: IFFALSE 13498
// unit := CreateCharacter ( prefix & ident ) else
13475: LD_ADDR_VAR 0 5
13479: PUSH
13480: LD_VAR 0 3
13484: PUSH
13485: LD_VAR 0 1
13489: STR
13490: PPUSH
13491: CALL_OW 34
13495: ST_TO_ADDR
13496: GO 13513
// unit := NewCharacter ( ident ) ;
13498: LD_ADDR_VAR 0 5
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 25
13512: ST_TO_ADDR
// result := unit ;
13513: LD_ADDR_VAR 0 4
13517: PUSH
13518: LD_VAR 0 5
13522: ST_TO_ADDR
// end ;
13523: LD_VAR 0 4
13527: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13528: LD_INT 0
13530: PPUSH
13531: PPUSH
// if not side or not nation then
13532: LD_VAR 0 1
13536: NOT
13537: PUSH
13538: LD_VAR 0 2
13542: NOT
13543: OR
13544: IFFALSE 13548
// exit ;
13546: GO 14168
// case nation of nation_american :
13548: LD_VAR 0 2
13552: PUSH
13553: LD_INT 1
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13561
13559: GO 13727
13561: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
13562: LD_ADDR_VAR 0 4
13566: PUSH
13567: LD_INT 35
13569: PUSH
13570: LD_INT 45
13572: PUSH
13573: LD_INT 46
13575: PUSH
13576: LD_INT 47
13578: PUSH
13579: LD_INT 1
13581: PUSH
13582: LD_INT 2
13584: PUSH
13585: LD_INT 6
13587: PUSH
13588: LD_INT 15
13590: PUSH
13591: LD_INT 16
13593: PUSH
13594: LD_INT 7
13596: PUSH
13597: LD_INT 12
13599: PUSH
13600: LD_INT 13
13602: PUSH
13603: LD_INT 10
13605: PUSH
13606: LD_INT 14
13608: PUSH
13609: LD_INT 20
13611: PUSH
13612: LD_INT 25
13614: PUSH
13615: LD_INT 32
13617: PUSH
13618: LD_INT 27
13620: PUSH
13621: LD_INT 36
13623: PUSH
13624: LD_INT 69
13626: PUSH
13627: LD_INT 39
13629: PUSH
13630: LD_INT 34
13632: PUSH
13633: LD_INT 40
13635: PUSH
13636: LD_INT 48
13638: PUSH
13639: LD_INT 49
13641: PUSH
13642: LD_INT 50
13644: PUSH
13645: LD_INT 51
13647: PUSH
13648: LD_INT 52
13650: PUSH
13651: LD_INT 53
13653: PUSH
13654: LD_INT 54
13656: PUSH
13657: LD_INT 55
13659: PUSH
13660: LD_INT 56
13662: PUSH
13663: LD_INT 57
13665: PUSH
13666: LD_INT 58
13668: PUSH
13669: LD_INT 59
13671: PUSH
13672: LD_INT 60
13674: PUSH
13675: LD_INT 61
13677: PUSH
13678: LD_INT 62
13680: PUSH
13681: LD_INT 80
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: ST_TO_ADDR
13725: GO 14092
13727: LD_INT 2
13729: DOUBLE
13730: EQUAL
13731: IFTRUE 13735
13733: GO 13905
13735: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
13736: LD_ADDR_VAR 0 4
13740: PUSH
13741: LD_INT 35
13743: PUSH
13744: LD_INT 45
13746: PUSH
13747: LD_INT 46
13749: PUSH
13750: LD_INT 47
13752: PUSH
13753: LD_INT 70
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: LD_INT 11
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: LD_INT 4
13767: PUSH
13768: LD_INT 5
13770: PUSH
13771: LD_INT 6
13773: PUSH
13774: LD_INT 15
13776: PUSH
13777: LD_INT 18
13779: PUSH
13780: LD_INT 7
13782: PUSH
13783: LD_INT 17
13785: PUSH
13786: LD_INT 8
13788: PUSH
13789: LD_INT 20
13791: PUSH
13792: LD_INT 72
13794: PUSH
13795: LD_INT 26
13797: PUSH
13798: LD_INT 69
13800: PUSH
13801: LD_INT 39
13803: PUSH
13804: LD_INT 40
13806: PUSH
13807: LD_INT 41
13809: PUSH
13810: LD_INT 42
13812: PUSH
13813: LD_INT 43
13815: PUSH
13816: LD_INT 48
13818: PUSH
13819: LD_INT 49
13821: PUSH
13822: LD_INT 50
13824: PUSH
13825: LD_INT 51
13827: PUSH
13828: LD_INT 52
13830: PUSH
13831: LD_INT 53
13833: PUSH
13834: LD_INT 54
13836: PUSH
13837: LD_INT 55
13839: PUSH
13840: LD_INT 56
13842: PUSH
13843: LD_INT 60
13845: PUSH
13846: LD_INT 61
13848: PUSH
13849: LD_INT 62
13851: PUSH
13852: LD_INT 66
13854: PUSH
13855: LD_INT 67
13857: PUSH
13858: LD_INT 68
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: ST_TO_ADDR
13903: GO 14092
13905: LD_INT 3
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 14091
13913: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
13914: LD_ADDR_VAR 0 4
13918: PUSH
13919: LD_INT 46
13921: PUSH
13922: LD_INT 47
13924: PUSH
13925: LD_INT 1
13927: PUSH
13928: LD_INT 2
13930: PUSH
13931: LD_INT 11
13933: PUSH
13934: LD_INT 9
13936: PUSH
13937: LD_INT 20
13939: PUSH
13940: LD_INT 19
13942: PUSH
13943: LD_INT 21
13945: PUSH
13946: LD_INT 24
13948: PUSH
13949: LD_INT 22
13951: PUSH
13952: LD_INT 25
13954: PUSH
13955: LD_INT 28
13957: PUSH
13958: LD_INT 29
13960: PUSH
13961: LD_INT 31
13963: PUSH
13964: LD_INT 37
13966: PUSH
13967: LD_INT 38
13969: PUSH
13970: LD_INT 32
13972: PUSH
13973: LD_INT 27
13975: PUSH
13976: LD_INT 33
13978: PUSH
13979: LD_INT 69
13981: PUSH
13982: LD_INT 39
13984: PUSH
13985: LD_INT 34
13987: PUSH
13988: LD_INT 40
13990: PUSH
13991: LD_INT 71
13993: PUSH
13994: LD_INT 23
13996: PUSH
13997: LD_INT 44
13999: PUSH
14000: LD_INT 48
14002: PUSH
14003: LD_INT 49
14005: PUSH
14006: LD_INT 50
14008: PUSH
14009: LD_INT 51
14011: PUSH
14012: LD_INT 52
14014: PUSH
14015: LD_INT 53
14017: PUSH
14018: LD_INT 54
14020: PUSH
14021: LD_INT 55
14023: PUSH
14024: LD_INT 56
14026: PUSH
14027: LD_INT 57
14029: PUSH
14030: LD_INT 58
14032: PUSH
14033: LD_INT 59
14035: PUSH
14036: LD_INT 63
14038: PUSH
14039: LD_INT 64
14041: PUSH
14042: LD_INT 65
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: ST_TO_ADDR
14089: GO 14092
14091: POP
// if state > - 1 and state < 3 then
14092: LD_VAR 0 3
14096: PUSH
14097: LD_INT 1
14099: NEG
14100: GREATER
14101: PUSH
14102: LD_VAR 0 3
14106: PUSH
14107: LD_INT 3
14109: LESS
14110: AND
14111: IFFALSE 14168
// for i in result do
14113: LD_ADDR_VAR 0 5
14117: PUSH
14118: LD_VAR 0 4
14122: PUSH
14123: FOR_IN
14124: IFFALSE 14166
// if GetTech ( i , side ) <> state then
14126: LD_VAR 0 5
14130: PPUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: CALL_OW 321
14140: PUSH
14141: LD_VAR 0 3
14145: NONEQUAL
14146: IFFALSE 14164
// result := result diff i ;
14148: LD_ADDR_VAR 0 4
14152: PUSH
14153: LD_VAR 0 4
14157: PUSH
14158: LD_VAR 0 5
14162: DIFF
14163: ST_TO_ADDR
14164: GO 14123
14166: POP
14167: POP
// end ;
14168: LD_VAR 0 4
14172: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
// result := true ;
14178: LD_ADDR_VAR 0 3
14182: PUSH
14183: LD_INT 1
14185: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14186: LD_ADDR_VAR 0 5
14190: PUSH
14191: LD_VAR 0 2
14195: PPUSH
14196: CALL_OW 480
14200: ST_TO_ADDR
// if not tmp then
14201: LD_VAR 0 5
14205: NOT
14206: IFFALSE 14210
// exit ;
14208: GO 14259
// for i in tmp do
14210: LD_ADDR_VAR 0 4
14214: PUSH
14215: LD_VAR 0 5
14219: PUSH
14220: FOR_IN
14221: IFFALSE 14257
// if GetTech ( i , side ) <> state_researched then
14223: LD_VAR 0 4
14227: PPUSH
14228: LD_VAR 0 1
14232: PPUSH
14233: CALL_OW 321
14237: PUSH
14238: LD_INT 2
14240: NONEQUAL
14241: IFFALSE 14255
// begin result := false ;
14243: LD_ADDR_VAR 0 3
14247: PUSH
14248: LD_INT 0
14250: ST_TO_ADDR
// exit ;
14251: POP
14252: POP
14253: GO 14259
// end ;
14255: GO 14220
14257: POP
14258: POP
// end ;
14259: LD_VAR 0 3
14263: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14264: LD_INT 0
14266: PPUSH
14267: PPUSH
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14279: LD_VAR 0 1
14283: NOT
14284: PUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL_OW 257
14294: PUSH
14295: LD_INT 9
14297: NONEQUAL
14298: OR
14299: IFFALSE 14303
// exit ;
14301: GO 14876
// side := GetSide ( unit ) ;
14303: LD_ADDR_VAR 0 9
14307: PUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 255
14317: ST_TO_ADDR
// tech_space := tech_spacanom ;
14318: LD_ADDR_VAR 0 12
14322: PUSH
14323: LD_INT 29
14325: ST_TO_ADDR
// tech_time := tech_taurad ;
14326: LD_ADDR_VAR 0 13
14330: PUSH
14331: LD_INT 28
14333: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14334: LD_ADDR_VAR 0 11
14338: PUSH
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 310
14348: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14349: LD_VAR 0 11
14353: PPUSH
14354: CALL_OW 247
14358: PUSH
14359: LD_INT 2
14361: EQUAL
14362: IFFALSE 14366
// exit ;
14364: GO 14876
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14366: LD_ADDR_VAR 0 8
14370: PUSH
14371: LD_INT 81
14373: PUSH
14374: LD_VAR 0 9
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: LD_INT 21
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 8
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14876
// if in_unit then
14418: LD_VAR 0 11
14422: IFFALSE 14446
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14424: LD_ADDR_VAR 0 10
14428: PUSH
14429: LD_VAR 0 8
14433: PPUSH
14434: LD_VAR 0 11
14438: PPUSH
14439: CALL_OW 74
14443: ST_TO_ADDR
14444: GO 14466
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14446: LD_ADDR_VAR 0 10
14450: PUSH
14451: LD_VAR 0 8
14455: PPUSH
14456: LD_VAR 0 1
14460: PPUSH
14461: CALL_OW 74
14465: ST_TO_ADDR
// if not enemy then
14466: LD_VAR 0 10
14470: NOT
14471: IFFALSE 14475
// exit ;
14473: GO 14876
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14475: LD_VAR 0 11
14479: PUSH
14480: LD_VAR 0 11
14484: PPUSH
14485: LD_VAR 0 10
14489: PPUSH
14490: CALL_OW 296
14494: PUSH
14495: LD_INT 13
14497: GREATER
14498: AND
14499: PUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: LD_VAR 0 10
14509: PPUSH
14510: CALL_OW 296
14514: PUSH
14515: LD_INT 12
14517: GREATER
14518: OR
14519: IFFALSE 14523
// exit ;
14521: GO 14876
// missile := [ 1 ] ;
14523: LD_ADDR_VAR 0 14
14527: PUSH
14528: LD_INT 1
14530: PUSH
14531: EMPTY
14532: LIST
14533: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14534: LD_VAR 0 9
14538: PPUSH
14539: LD_VAR 0 12
14543: PPUSH
14544: CALL_OW 325
14548: IFFALSE 14577
// missile := Insert ( missile , missile + 1 , 2 ) ;
14550: LD_ADDR_VAR 0 14
14554: PUSH
14555: LD_VAR 0 14
14559: PPUSH
14560: LD_VAR 0 14
14564: PUSH
14565: LD_INT 1
14567: PLUS
14568: PPUSH
14569: LD_INT 2
14571: PPUSH
14572: CALL_OW 2
14576: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14577: LD_VAR 0 9
14581: PPUSH
14582: LD_VAR 0 13
14586: PPUSH
14587: CALL_OW 325
14591: PUSH
14592: LD_VAR 0 10
14596: PPUSH
14597: CALL_OW 255
14601: PPUSH
14602: LD_VAR 0 13
14606: PPUSH
14607: CALL_OW 325
14611: NOT
14612: AND
14613: IFFALSE 14642
// missile := Insert ( missile , missile + 1 , 3 ) ;
14615: LD_ADDR_VAR 0 14
14619: PUSH
14620: LD_VAR 0 14
14624: PPUSH
14625: LD_VAR 0 14
14629: PUSH
14630: LD_INT 1
14632: PLUS
14633: PPUSH
14634: LD_INT 3
14636: PPUSH
14637: CALL_OW 2
14641: ST_TO_ADDR
// if missile < 2 then
14642: LD_VAR 0 14
14646: PUSH
14647: LD_INT 2
14649: LESS
14650: IFFALSE 14654
// exit ;
14652: GO 14876
// x := GetX ( enemy ) ;
14654: LD_ADDR_VAR 0 4
14658: PUSH
14659: LD_VAR 0 10
14663: PPUSH
14664: CALL_OW 250
14668: ST_TO_ADDR
// y := GetY ( enemy ) ;
14669: LD_ADDR_VAR 0 5
14673: PUSH
14674: LD_VAR 0 10
14678: PPUSH
14679: CALL_OW 251
14683: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14684: LD_ADDR_VAR 0 6
14688: PUSH
14689: LD_VAR 0 4
14693: PUSH
14694: LD_INT 1
14696: NEG
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: CALL_OW 12
14705: PLUS
14706: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14707: LD_ADDR_VAR 0 7
14711: PUSH
14712: LD_VAR 0 5
14716: PUSH
14717: LD_INT 1
14719: NEG
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 12
14728: PLUS
14729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14730: LD_VAR 0 6
14734: PPUSH
14735: LD_VAR 0 7
14739: PPUSH
14740: CALL_OW 488
14744: NOT
14745: IFFALSE 14767
// begin _x := x ;
14747: LD_ADDR_VAR 0 6
14751: PUSH
14752: LD_VAR 0 4
14756: ST_TO_ADDR
// _y := y ;
14757: LD_ADDR_VAR 0 7
14761: PUSH
14762: LD_VAR 0 5
14766: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14767: LD_ADDR_VAR 0 3
14771: PUSH
14772: LD_INT 1
14774: PPUSH
14775: LD_VAR 0 14
14779: PPUSH
14780: CALL_OW 12
14784: ST_TO_ADDR
// case i of 1 :
14785: LD_VAR 0 3
14789: PUSH
14790: LD_INT 1
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14815
14798: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14799: LD_VAR 0 1
14803: PPUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: CALL_OW 115
14813: GO 14876
14815: LD_INT 2
14817: DOUBLE
14818: EQUAL
14819: IFTRUE 14823
14821: GO 14845
14823: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_VAR 0 6
14833: PPUSH
14834: LD_VAR 0 7
14838: PPUSH
14839: CALL_OW 153
14843: GO 14876
14845: LD_INT 3
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14875
14853: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14854: LD_VAR 0 1
14858: PPUSH
14859: LD_VAR 0 6
14863: PPUSH
14864: LD_VAR 0 7
14868: PPUSH
14869: CALL_OW 154
14873: GO 14876
14875: POP
// end ;
14876: LD_VAR 0 2
14880: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14881: LD_INT 0
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
// if not unit or not building then
14889: LD_VAR 0 1
14893: NOT
14894: PUSH
14895: LD_VAR 0 2
14899: NOT
14900: OR
14901: IFFALSE 14905
// exit ;
14903: GO 15060
// x := GetX ( building ) ;
14905: LD_ADDR_VAR 0 5
14909: PUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: ST_TO_ADDR
// y := GetY ( building ) ;
14920: LD_ADDR_VAR 0 6
14924: PUSH
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 251
14934: ST_TO_ADDR
// for i = 0 to 5 do
14935: LD_ADDR_VAR 0 4
14939: PUSH
14940: DOUBLE
14941: LD_INT 0
14943: DEC
14944: ST_TO_ADDR
14945: LD_INT 5
14947: PUSH
14948: FOR_TO
14949: IFFALSE 15058
// begin _x := ShiftX ( x , i , 3 ) ;
14951: LD_ADDR_VAR 0 7
14955: PUSH
14956: LD_VAR 0 5
14960: PPUSH
14961: LD_VAR 0 4
14965: PPUSH
14966: LD_INT 3
14968: PPUSH
14969: CALL_OW 272
14973: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14974: LD_ADDR_VAR 0 8
14978: PUSH
14979: LD_VAR 0 6
14983: PPUSH
14984: LD_VAR 0 4
14988: PPUSH
14989: LD_INT 3
14991: PPUSH
14992: CALL_OW 273
14996: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
14997: LD_VAR 0 7
15001: PPUSH
15002: LD_VAR 0 8
15006: PPUSH
15007: CALL_OW 428
15011: PUSH
15012: LD_INT 0
15014: EQUAL
15015: PUSH
15016: LD_VAR 0 7
15020: PPUSH
15021: LD_VAR 0 8
15025: PPUSH
15026: CALL_OW 488
15030: AND
15031: IFFALSE 15056
// begin ComMoveXY ( unit , _x , _y ) ;
15033: LD_VAR 0 1
15037: PPUSH
15038: LD_VAR 0 7
15042: PPUSH
15043: LD_VAR 0 8
15047: PPUSH
15048: CALL_OW 111
// exit ;
15052: POP
15053: POP
15054: GO 15060
// end ; end ;
15056: GO 14948
15058: POP
15059: POP
// end ;
15060: LD_VAR 0 3
15064: RET
// export function ScanBase ( side , base_area ) ; begin
15065: LD_INT 0
15067: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15068: LD_ADDR_VAR 0 3
15072: PUSH
15073: LD_VAR 0 2
15077: PPUSH
15078: LD_INT 81
15080: PUSH
15081: LD_VAR 0 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PPUSH
15090: CALL_OW 70
15094: ST_TO_ADDR
// end ;
15095: LD_VAR 0 3
15099: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
15100: LD_INT 0
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
15118: LD_ADDR_VAR 0 12
15122: PUSH
15123: LD_EXP 57
15127: PUSH
15128: LD_VAR 0 1
15132: ARRAY
15133: PPUSH
15134: LD_INT 25
15136: PUSH
15137: LD_INT 3
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 72
15148: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
15149: LD_ADDR_VAR 0 8
15153: PUSH
15154: LD_EXP 57
15158: PUSH
15159: LD_VAR 0 1
15163: ARRAY
15164: PPUSH
15165: LD_INT 2
15167: PUSH
15168: LD_INT 25
15170: PUSH
15171: LD_INT 1
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 25
15180: PUSH
15181: LD_INT 5
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: LD_INT 25
15190: PUSH
15191: LD_INT 8
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: PUSH
15198: LD_INT 25
15200: PUSH
15201: LD_INT 9
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PPUSH
15215: CALL_OW 72
15219: ST_TO_ADDR
// if not defenders and not solds then
15220: LD_VAR 0 2
15224: NOT
15225: PUSH
15226: LD_VAR 0 8
15230: NOT
15231: AND
15232: IFFALSE 15236
// exit ;
15234: GO 16602
// depot_under_attack := false ;
15236: LD_ADDR_VAR 0 16
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// sold_defenders := [ ] ;
15244: LD_ADDR_VAR 0 17
15248: PUSH
15249: EMPTY
15250: ST_TO_ADDR
// if mechs then
15251: LD_VAR 0 12
15255: IFFALSE 15384
// for i in defenders do
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 2
15266: PUSH
15267: FOR_IN
15268: IFFALSE 15382
// begin SetTag ( i , 20 ) ;
15270: LD_VAR 0 5
15274: PPUSH
15275: LD_INT 20
15277: PPUSH
15278: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
15282: LD_VAR 0 5
15286: PPUSH
15287: CALL_OW 263
15291: PUSH
15292: LD_INT 1
15294: EQUAL
15295: PUSH
15296: LD_VAR 0 5
15300: PPUSH
15301: CALL_OW 311
15305: NOT
15306: AND
15307: PUSH
15308: LD_VAR 0 12
15312: AND
15313: IFFALSE 15380
// begin un := mechs [ 1 ] ;
15315: LD_ADDR_VAR 0 10
15319: PUSH
15320: LD_VAR 0 12
15324: PUSH
15325: LD_INT 1
15327: ARRAY
15328: ST_TO_ADDR
// ComExitBuilding ( un ) ;
15329: LD_VAR 0 10
15333: PPUSH
15334: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
15338: LD_VAR 0 10
15342: PPUSH
15343: LD_VAR 0 5
15347: PPUSH
15348: CALL_OW 180
// SetTag ( un , 19 ) ;
15352: LD_VAR 0 10
15356: PPUSH
15357: LD_INT 19
15359: PPUSH
15360: CALL_OW 109
// mechs := mechs diff un ;
15364: LD_ADDR_VAR 0 12
15368: PUSH
15369: LD_VAR 0 12
15373: PUSH
15374: LD_VAR 0 10
15378: DIFF
15379: ST_TO_ADDR
// end ; end ;
15380: GO 15267
15382: POP
15383: POP
// if solds then
15384: LD_VAR 0 8
15388: IFFALSE 15447
// for i in solds do
15390: LD_ADDR_VAR 0 5
15394: PUSH
15395: LD_VAR 0 8
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15445
// if not GetTag ( i ) then
15403: LD_VAR 0 5
15407: PPUSH
15408: CALL_OW 110
15412: NOT
15413: IFFALSE 15443
// begin defenders := defenders union i ;
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: LD_VAR 0 2
15424: PUSH
15425: LD_VAR 0 5
15429: UNION
15430: ST_TO_ADDR
// SetTag ( i , 18 ) ;
15431: LD_VAR 0 5
15435: PPUSH
15436: LD_INT 18
15438: PPUSH
15439: CALL_OW 109
// end ;
15443: GO 15400
15445: POP
15446: POP
// repeat wait ( 0 0$1 ) ;
15447: LD_INT 35
15449: PPUSH
15450: CALL_OW 67
// enemy := mc_scan [ base ] ;
15454: LD_ADDR_VAR 0 3
15458: PUSH
15459: LD_EXP 80
15463: PUSH
15464: LD_VAR 0 1
15468: ARRAY
15469: ST_TO_ADDR
// for i in defenders do
15470: LD_ADDR_VAR 0 5
15474: PUSH
15475: LD_VAR 0 2
15479: PUSH
15480: FOR_IN
15481: IFFALSE 16166
// begin e := NearestUnitToUnit ( enemy , i ) ;
15483: LD_ADDR_VAR 0 13
15487: PUSH
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_VAR 0 5
15497: PPUSH
15498: CALL_OW 74
15502: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
15503: LD_ADDR_VAR 0 16
15507: PUSH
15508: LD_EXP 57
15512: PUSH
15513: LD_VAR 0 1
15517: ARRAY
15518: PPUSH
15519: LD_INT 2
15521: PUSH
15522: LD_INT 30
15524: PUSH
15525: LD_INT 0
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 30
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: PPUSH
15547: CALL_OW 72
15551: NOT
15552: PUSH
15553: LD_EXP 57
15557: PUSH
15558: LD_VAR 0 1
15562: ARRAY
15563: PPUSH
15564: LD_INT 2
15566: PUSH
15567: LD_INT 30
15569: PUSH
15570: LD_INT 0
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 30
15579: PUSH
15580: LD_INT 1
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: PPUSH
15592: CALL_OW 72
15596: PPUSH
15597: CALL_OW 256
15601: PUSH
15602: LD_INT 600
15604: LESS
15605: OR
15606: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
15607: LD_VAR 0 5
15611: PPUSH
15612: CALL_OW 247
15616: PUSH
15617: LD_INT 2
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15872
15625: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
15626: LD_VAR 0 5
15630: PPUSH
15631: CALL_OW 256
15635: PUSH
15636: LD_INT 650
15638: GREATER
15639: PUSH
15640: LD_VAR 0 5
15644: PPUSH
15645: LD_VAR 0 13
15649: PPUSH
15650: CALL_OW 296
15654: PUSH
15655: LD_INT 40
15657: LESS
15658: AND
15659: IFFALSE 15677
// ComAttackUnit ( i , e ) else
15661: LD_VAR 0 5
15665: PPUSH
15666: LD_VAR 0 13
15670: PPUSH
15671: CALL_OW 115
15675: GO 15755
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
15677: LD_VAR 0 5
15681: PPUSH
15682: LD_VAR 0 13
15686: PPUSH
15687: CALL_OW 296
15691: PUSH
15692: LD_INT 30
15694: GREATEREQUAL
15695: PUSH
15696: LD_VAR 0 5
15700: PPUSH
15701: CALL_OW 256
15705: PUSH
15706: LD_INT 650
15708: LESSEQUAL
15709: OR
15710: PUSH
15711: LD_VAR 0 5
15715: PPUSH
15716: LD_EXP 81
15720: PUSH
15721: LD_VAR 0 1
15725: ARRAY
15726: PPUSH
15727: CALL_OW 308
15731: NOT
15732: AND
15733: IFFALSE 15755
// ComMoveToArea ( i , mc_parking [ base ] ) ;
15735: LD_VAR 0 5
15739: PPUSH
15740: LD_EXP 81
15744: PUSH
15745: LD_VAR 0 1
15749: ARRAY
15750: PPUSH
15751: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
15755: LD_VAR 0 5
15759: PPUSH
15760: CALL_OW 256
15764: PUSH
15765: LD_INT 998
15767: LESS
15768: PUSH
15769: LD_VAR 0 5
15773: PPUSH
15774: CALL_OW 263
15778: PUSH
15779: LD_INT 1
15781: EQUAL
15782: AND
15783: PUSH
15784: LD_VAR 0 5
15788: PPUSH
15789: CALL_OW 311
15793: AND
15794: PUSH
15795: LD_VAR 0 5
15799: PPUSH
15800: LD_EXP 81
15804: PUSH
15805: LD_VAR 0 1
15809: ARRAY
15810: PPUSH
15811: CALL_OW 308
15815: AND
15816: IFFALSE 15870
// begin mech := IsDrivenBy ( i ) ;
15818: LD_ADDR_VAR 0 9
15822: PUSH
15823: LD_VAR 0 5
15827: PPUSH
15828: CALL_OW 311
15832: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
15833: LD_VAR 0 9
15837: PPUSH
15838: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
15842: LD_VAR 0 9
15846: PPUSH
15847: LD_VAR 0 5
15851: PPUSH
15852: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
15856: LD_VAR 0 9
15860: PPUSH
15861: LD_VAR 0 5
15865: PPUSH
15866: CALL_OW 180
// end ; end ; unit_human :
15870: GO 16137
15872: LD_INT 1
15874: DOUBLE
15875: EQUAL
15876: IFTRUE 15880
15878: GO 16136
15880: POP
// begin b := IsInUnit ( i ) ;
15881: LD_ADDR_VAR 0 18
15885: PUSH
15886: LD_VAR 0 5
15890: PPUSH
15891: CALL_OW 310
15895: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
15896: LD_ADDR_VAR 0 19
15900: PUSH
15901: LD_VAR 0 18
15905: NOT
15906: PUSH
15907: LD_VAR 0 18
15911: PPUSH
15912: CALL_OW 266
15916: PUSH
15917: LD_INT 32
15919: PUSH
15920: LD_INT 31
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: IN
15927: OR
15928: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
15929: LD_VAR 0 16
15933: PUSH
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 21
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PPUSH
15949: CALL_OW 72
15953: PUSH
15954: LD_INT 1
15956: LESSEQUAL
15957: OR
15958: PUSH
15959: LD_VAR 0 19
15963: AND
15964: PUSH
15965: LD_VAR 0 5
15969: PUSH
15970: LD_VAR 0 17
15974: IN
15975: NOT
15976: AND
15977: IFFALSE 16070
// begin if b then
15979: LD_VAR 0 18
15983: IFFALSE 16032
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
15985: LD_VAR 0 18
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_VAR 0 18
15999: PPUSH
16000: CALL_OW 74
16004: PPUSH
16005: CALL_OW 296
16009: PUSH
16010: LD_INT 10
16012: LESS
16013: PUSH
16014: LD_VAR 0 18
16018: PPUSH
16019: CALL_OW 461
16023: PUSH
16024: LD_INT 7
16026: NONEQUAL
16027: AND
16028: IFFALSE 16032
// continue ;
16030: GO 15480
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
16032: LD_ADDR_VAR 0 17
16036: PUSH
16037: LD_VAR 0 17
16041: PPUSH
16042: LD_VAR 0 17
16046: PUSH
16047: LD_INT 1
16049: PLUS
16050: PPUSH
16051: LD_VAR 0 5
16055: PPUSH
16056: CALL_OW 1
16060: ST_TO_ADDR
// ComExitBuilding ( i ) ;
16061: LD_VAR 0 5
16065: PPUSH
16066: CALL_OW 122
// end ; if sold_defenders then
16070: LD_VAR 0 17
16074: IFFALSE 16134
// if i in sold_defenders then
16076: LD_VAR 0 5
16080: PUSH
16081: LD_VAR 0 17
16085: IN
16086: IFFALSE 16134
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
16088: LD_VAR 0 5
16092: PPUSH
16093: CALL_OW 314
16097: NOT
16098: PUSH
16099: LD_VAR 0 5
16103: PPUSH
16104: LD_VAR 0 13
16108: PPUSH
16109: CALL_OW 296
16113: PUSH
16114: LD_INT 30
16116: LESS
16117: AND
16118: IFFALSE 16134
// ComAttackUnit ( i , e ) ;
16120: LD_VAR 0 5
16124: PPUSH
16125: LD_VAR 0 13
16129: PPUSH
16130: CALL_OW 115
// end ; end ; end ;
16134: GO 16137
16136: POP
// if IsDead ( i ) then
16137: LD_VAR 0 5
16141: PPUSH
16142: CALL_OW 301
16146: IFFALSE 16164
// defenders := defenders diff i ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PUSH
16158: LD_VAR 0 5
16162: DIFF
16163: ST_TO_ADDR
// end ;
16164: GO 15480
16166: POP
16167: POP
// until not enemy or not defenders ;
16168: LD_VAR 0 3
16172: NOT
16173: PUSH
16174: LD_VAR 0 2
16178: NOT
16179: OR
16180: IFFALSE 15447
// MC_Reset ( base , 18 ) ;
16182: LD_VAR 0 1
16186: PPUSH
16187: LD_INT 18
16189: PPUSH
16190: CALL 54970 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
16194: LD_ADDR_VAR 0 2
16198: PUSH
16199: LD_VAR 0 2
16203: PUSH
16204: LD_VAR 0 2
16208: PPUSH
16209: LD_INT 2
16211: PUSH
16212: LD_INT 25
16214: PUSH
16215: LD_INT 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 25
16224: PUSH
16225: LD_INT 5
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 25
16234: PUSH
16235: LD_INT 8
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: LD_INT 25
16244: PUSH
16245: LD_INT 9
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 72
16263: DIFF
16264: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
16265: LD_VAR 0 3
16269: NOT
16270: PUSH
16271: LD_VAR 0 2
16275: PPUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 2
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 72
16290: AND
16291: IFFALSE 16553
// begin tmp := FilterByTag ( defenders , 19 ) ;
16293: LD_ADDR_VAR 0 11
16297: PUSH
16298: LD_VAR 0 2
16302: PPUSH
16303: LD_INT 19
16305: PPUSH
16306: CALL 51064 0 2
16310: ST_TO_ADDR
// if tmp then
16311: LD_VAR 0 11
16315: IFFALSE 16385
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
16317: LD_ADDR_VAR 0 11
16321: PUSH
16322: LD_VAR 0 11
16326: PPUSH
16327: LD_INT 25
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 72
16341: ST_TO_ADDR
// if tmp then
16342: LD_VAR 0 11
16346: IFFALSE 16385
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
16348: LD_ADDR_EXP 69
16352: PUSH
16353: LD_EXP 69
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_EXP 69
16367: PUSH
16368: LD_VAR 0 1
16372: ARRAY
16373: PUSH
16374: LD_VAR 0 11
16378: UNION
16379: PPUSH
16380: CALL_OW 1
16384: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 19
16392: PPUSH
16393: CALL 54970 0 2
// repeat wait ( 0 0$1 ) ;
16397: LD_INT 35
16399: PPUSH
16400: CALL_OW 67
// for i in defenders do
16404: LD_ADDR_VAR 0 5
16408: PUSH
16409: LD_VAR 0 2
16413: PUSH
16414: FOR_IN
16415: IFFALSE 16504
// begin if not IsInArea ( i , mc_parking [ base ] ) then
16417: LD_VAR 0 5
16421: PPUSH
16422: LD_EXP 81
16426: PUSH
16427: LD_VAR 0 1
16431: ARRAY
16432: PPUSH
16433: CALL_OW 308
16437: NOT
16438: IFFALSE 16462
// ComMoveToArea ( i , mc_parking [ base ] ) else
16440: LD_VAR 0 5
16444: PPUSH
16445: LD_EXP 81
16449: PUSH
16450: LD_VAR 0 1
16454: ARRAY
16455: PPUSH
16456: CALL_OW 113
16460: GO 16502
// if GetControl ( i ) = control_manual then
16462: LD_VAR 0 5
16466: PPUSH
16467: CALL_OW 263
16471: PUSH
16472: LD_INT 1
16474: EQUAL
16475: IFFALSE 16502
// if IsDrivenBy ( i ) then
16477: LD_VAR 0 5
16481: PPUSH
16482: CALL_OW 311
16486: IFFALSE 16502
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
16488: LD_VAR 0 5
16492: PPUSH
16493: CALL_OW 311
16497: PPUSH
16498: CALL_OW 121
// end ;
16502: GO 16414
16504: POP
16505: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 95
16513: PUSH
16514: LD_EXP 81
16518: PUSH
16519: LD_VAR 0 1
16523: ARRAY
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL_OW 72
16533: PUSH
16534: LD_VAR 0 2
16538: EQUAL
16539: PUSH
16540: LD_EXP 80
16544: PUSH
16545: LD_VAR 0 1
16549: ARRAY
16550: OR
16551: IFFALSE 16397
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
16553: LD_ADDR_EXP 79
16557: PUSH
16558: LD_EXP 79
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: LD_EXP 79
16572: PUSH
16573: LD_VAR 0 1
16577: ARRAY
16578: PUSH
16579: LD_VAR 0 2
16583: UNION
16584: PPUSH
16585: CALL_OW 1
16589: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
16590: LD_VAR 0 1
16594: PPUSH
16595: LD_INT 20
16597: PPUSH
16598: CALL 54970 0 2
// end ;
16602: LD_VAR 0 4
16606: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16607: LD_INT 0
16609: PPUSH
16610: PPUSH
16611: PPUSH
16612: PPUSH
// result := false ;
16613: LD_ADDR_VAR 0 2
16617: PUSH
16618: LD_INT 0
16620: ST_TO_ADDR
// side := GetSide ( unit ) ;
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 255
16635: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16636: LD_ADDR_VAR 0 4
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 248
16650: ST_TO_ADDR
// case nat of 1 :
16651: LD_VAR 0 4
16655: PUSH
16656: LD_INT 1
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16675
16664: POP
// tech := tech_lassight ; 2 :
16665: LD_ADDR_VAR 0 5
16669: PUSH
16670: LD_INT 12
16672: ST_TO_ADDR
16673: GO 16714
16675: LD_INT 2
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16694
16683: POP
// tech := tech_mortar ; 3 :
16684: LD_ADDR_VAR 0 5
16688: PUSH
16689: LD_INT 41
16691: ST_TO_ADDR
16692: GO 16714
16694: LD_INT 3
16696: DOUBLE
16697: EQUAL
16698: IFTRUE 16702
16700: GO 16713
16702: POP
// tech := tech_bazooka ; end ;
16703: LD_ADDR_VAR 0 5
16707: PUSH
16708: LD_INT 44
16710: ST_TO_ADDR
16711: GO 16714
16713: POP
// if Researched ( side , tech ) then
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_VAR 0 5
16723: PPUSH
16724: CALL_OW 325
16728: IFFALSE 16755
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_INT 5
16737: PUSH
16738: LD_INT 8
16740: PUSH
16741: LD_INT 9
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: PUSH
16749: LD_VAR 0 4
16753: ARRAY
16754: ST_TO_ADDR
// end ;
16755: LD_VAR 0 2
16759: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
// if not mines then
16765: LD_VAR 0 2
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16918
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16774: LD_ADDR_VAR 0 5
16778: PUSH
16779: LD_INT 81
16781: PUSH
16782: LD_VAR 0 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 3
16793: PUSH
16794: LD_INT 21
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: ST_TO_ADDR
// for i in mines do
16817: LD_ADDR_VAR 0 4
16821: PUSH
16822: LD_VAR 0 2
16826: PUSH
16827: FOR_IN
16828: IFFALSE 16916
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
16830: LD_VAR 0 4
16834: PUSH
16835: LD_INT 1
16837: ARRAY
16838: PPUSH
16839: LD_VAR 0 4
16843: PUSH
16844: LD_INT 2
16846: ARRAY
16847: PPUSH
16848: CALL_OW 458
16852: NOT
16853: IFFALSE 16857
// continue ;
16855: GO 16827
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
16857: LD_VAR 0 4
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: PPUSH
16866: LD_VAR 0 4
16870: PUSH
16871: LD_INT 2
16873: ARRAY
16874: PPUSH
16875: CALL_OW 428
16879: PUSH
16880: LD_VAR 0 5
16884: IN
16885: IFFALSE 16914
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
16887: LD_VAR 0 4
16891: PUSH
16892: LD_INT 1
16894: ARRAY
16895: PPUSH
16896: LD_VAR 0 4
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 456
// end ;
16914: GO 16827
16916: POP
16917: POP
// end ;
16918: LD_VAR 0 3
16922: RET
// export function Count ( array ) ; var i ; begin
16923: LD_INT 0
16925: PPUSH
16926: PPUSH
// result := 0 ;
16927: LD_ADDR_VAR 0 2
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// for i in array do
16935: LD_ADDR_VAR 0 3
16939: PUSH
16940: LD_VAR 0 1
16944: PUSH
16945: FOR_IN
16946: IFFALSE 16970
// if i then
16948: LD_VAR 0 3
16952: IFFALSE 16968
// result := result + 1 ;
16954: LD_ADDR_VAR 0 2
16958: PUSH
16959: LD_VAR 0 2
16963: PUSH
16964: LD_INT 1
16966: PLUS
16967: ST_TO_ADDR
16968: GO 16945
16970: POP
16971: POP
// end ;
16972: LD_VAR 0 2
16976: RET
// export function IsEmpty ( building ) ; begin
16977: LD_INT 0
16979: PPUSH
// if not building then
16980: LD_VAR 0 1
16984: NOT
16985: IFFALSE 16989
// exit ;
16987: GO 17032
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
16989: LD_ADDR_VAR 0 2
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: LD_INT 22
17001: PUSH
17002: LD_VAR 0 1
17006: PPUSH
17007: CALL_OW 255
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: PUSH
17016: LD_INT 58
17018: PUSH
17019: EMPTY
17020: LIST
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PPUSH
17026: CALL_OW 69
17030: IN
17031: ST_TO_ADDR
// end ;
17032: LD_VAR 0 2
17036: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
// tmp := [ ] ;
17043: LD_ADDR_VAR 0 3
17047: PUSH
17048: EMPTY
17049: ST_TO_ADDR
// list := [ ] ;
17050: LD_ADDR_VAR 0 5
17054: PUSH
17055: EMPTY
17056: ST_TO_ADDR
// for i = 16 to 25 do
17057: LD_ADDR_VAR 0 4
17061: PUSH
17062: DOUBLE
17063: LD_INT 16
17065: DEC
17066: ST_TO_ADDR
17067: LD_INT 25
17069: PUSH
17070: FOR_TO
17071: IFFALSE 17144
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17073: LD_ADDR_VAR 0 3
17077: PUSH
17078: LD_VAR 0 3
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 255
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 91
17102: PUSH
17103: LD_VAR 0 1
17107: PUSH
17108: LD_INT 6
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 30
17118: PUSH
17119: LD_VAR 0 4
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: ADD
17141: ST_TO_ADDR
17142: GO 17070
17144: POP
17145: POP
// for i = 1 to tmp do
17146: LD_ADDR_VAR 0 4
17150: PUSH
17151: DOUBLE
17152: LD_INT 1
17154: DEC
17155: ST_TO_ADDR
17156: LD_VAR 0 3
17160: PUSH
17161: FOR_TO
17162: IFFALSE 17250
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17164: LD_ADDR_VAR 0 5
17168: PUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_VAR 0 3
17178: PUSH
17179: LD_VAR 0 4
17183: ARRAY
17184: PPUSH
17185: CALL_OW 266
17189: PUSH
17190: LD_VAR 0 3
17194: PUSH
17195: LD_VAR 0 4
17199: ARRAY
17200: PPUSH
17201: CALL_OW 250
17205: PUSH
17206: LD_VAR 0 3
17210: PUSH
17211: LD_VAR 0 4
17215: ARRAY
17216: PPUSH
17217: CALL_OW 251
17221: PUSH
17222: LD_VAR 0 3
17226: PUSH
17227: LD_VAR 0 4
17231: ARRAY
17232: PPUSH
17233: CALL_OW 254
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: PUSH
17244: EMPTY
17245: LIST
17246: ADD
17247: ST_TO_ADDR
17248: GO 17161
17250: POP
17251: POP
// result := list ;
17252: LD_ADDR_VAR 0 2
17256: PUSH
17257: LD_VAR 0 5
17261: ST_TO_ADDR
// end ;
17262: LD_VAR 0 2
17266: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17267: LD_INT 0
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
// if not factory then
17276: LD_VAR 0 1
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17810
// if control = control_apeman then
17285: LD_VAR 0 4
17289: PUSH
17290: LD_INT 5
17292: EQUAL
17293: IFFALSE 17402
// begin tmp := UnitsInside ( factory ) ;
17295: LD_ADDR_VAR 0 8
17299: PUSH
17300: LD_VAR 0 1
17304: PPUSH
17305: CALL_OW 313
17309: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17310: LD_VAR 0 8
17314: PPUSH
17315: LD_INT 25
17317: PUSH
17318: LD_INT 12
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PPUSH
17325: CALL_OW 72
17329: NOT
17330: IFFALSE 17340
// control := control_manual ;
17332: LD_ADDR_VAR 0 4
17336: PUSH
17337: LD_INT 1
17339: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17340: LD_ADDR_VAR 0 8
17344: PUSH
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL 17037 0 1
17354: ST_TO_ADDR
// if tmp then
17355: LD_VAR 0 8
17359: IFFALSE 17402
// begin for i in tmp do
17361: LD_ADDR_VAR 0 7
17365: PUSH
17366: LD_VAR 0 8
17370: PUSH
17371: FOR_IN
17372: IFFALSE 17400
// if i [ 1 ] = b_ext_radar then
17374: LD_VAR 0 7
17378: PUSH
17379: LD_INT 1
17381: ARRAY
17382: PUSH
17383: LD_INT 20
17385: EQUAL
17386: IFFALSE 17398
// begin control := control_remote ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: LD_INT 2
17395: ST_TO_ADDR
// break ;
17396: GO 17400
// end ;
17398: GO 17371
17400: POP
17401: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17402: LD_VAR 0 1
17406: PPUSH
17407: LD_VAR 0 2
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: LD_VAR 0 4
17421: PPUSH
17422: LD_VAR 0 5
17426: PPUSH
17427: CALL_OW 448
17431: IFFALSE 17466
// begin result := [ chassis , engine , control , weapon ] ;
17433: LD_ADDR_VAR 0 6
17437: PUSH
17438: LD_VAR 0 2
17442: PUSH
17443: LD_VAR 0 3
17447: PUSH
17448: LD_VAR 0 4
17452: PUSH
17453: LD_VAR 0 5
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: ST_TO_ADDR
// exit ;
17464: GO 17810
// end ; _chassis := AvailableChassisList ( factory ) ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 475
17480: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17481: LD_ADDR_VAR 0 11
17485: PUSH
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 476
17495: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17496: LD_ADDR_VAR 0 12
17500: PUSH
17501: LD_VAR 0 1
17505: PPUSH
17506: CALL_OW 477
17510: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17511: LD_ADDR_VAR 0 10
17515: PUSH
17516: LD_VAR 0 1
17520: PPUSH
17521: CALL_OW 478
17525: ST_TO_ADDR
// if not chassis in _chassis then
17526: LD_VAR 0 2
17530: PUSH
17531: LD_VAR 0 9
17535: IN
17536: NOT
17537: IFFALSE 17563
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17539: LD_ADDR_VAR 0 2
17543: PUSH
17544: LD_VAR 0 9
17548: PUSH
17549: LD_INT 1
17551: PPUSH
17552: LD_VAR 0 9
17556: PPUSH
17557: CALL_OW 12
17561: ARRAY
17562: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17563: LD_VAR 0 2
17567: PPUSH
17568: LD_VAR 0 3
17572: PPUSH
17573: CALL 17815 0 2
17577: NOT
17578: IFFALSE 17637
// repeat engine := _engine [ 1 ] ;
17580: LD_ADDR_VAR 0 3
17584: PUSH
17585: LD_VAR 0 11
17589: PUSH
17590: LD_INT 1
17592: ARRAY
17593: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17594: LD_ADDR_VAR 0 11
17598: PUSH
17599: LD_VAR 0 11
17603: PPUSH
17604: LD_INT 1
17606: PPUSH
17607: CALL_OW 3
17611: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17612: LD_VAR 0 2
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: CALL 17815 0 2
17626: PUSH
17627: LD_VAR 0 11
17631: PUSH
17632: EMPTY
17633: EQUAL
17634: OR
17635: IFFALSE 17580
// if not control in _control then
17637: LD_VAR 0 4
17641: PUSH
17642: LD_VAR 0 12
17646: IN
17647: NOT
17648: IFFALSE 17674
// control := _control [ rand ( 1 , _control ) ] ;
17650: LD_ADDR_VAR 0 4
17654: PUSH
17655: LD_VAR 0 12
17659: PUSH
17660: LD_INT 1
17662: PPUSH
17663: LD_VAR 0 12
17667: PPUSH
17668: CALL_OW 12
17672: ARRAY
17673: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17674: LD_VAR 0 2
17678: PPUSH
17679: LD_VAR 0 5
17683: PPUSH
17684: CALL 18035 0 2
17688: NOT
17689: IFFALSE 17748
// repeat weapon := _weapon [ 1 ] ;
17691: LD_ADDR_VAR 0 5
17695: PUSH
17696: LD_VAR 0 10
17700: PUSH
17701: LD_INT 1
17703: ARRAY
17704: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17705: LD_ADDR_VAR 0 10
17709: PUSH
17710: LD_VAR 0 10
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: CALL_OW 3
17722: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
17723: LD_VAR 0 2
17727: PPUSH
17728: LD_VAR 0 5
17732: PPUSH
17733: CALL 18035 0 2
17737: PUSH
17738: LD_VAR 0 10
17742: PUSH
17743: EMPTY
17744: EQUAL
17745: OR
17746: IFFALSE 17691
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17748: LD_VAR 0 1
17752: PPUSH
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: LD_VAR 0 4
17767: PPUSH
17768: LD_VAR 0 5
17772: PPUSH
17773: CALL_OW 448
17777: IFFALSE 17810
// result := [ chassis , engine , control , weapon ] ;
17779: LD_ADDR_VAR 0 6
17783: PUSH
17784: LD_VAR 0 2
17788: PUSH
17789: LD_VAR 0 3
17793: PUSH
17794: LD_VAR 0 4
17798: PUSH
17799: LD_VAR 0 5
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: ST_TO_ADDR
// end ;
17810: LD_VAR 0 6
17814: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
17815: LD_INT 0
17817: PPUSH
// if not chassis or not engine then
17818: LD_VAR 0 1
17822: NOT
17823: PUSH
17824: LD_VAR 0 2
17828: NOT
17829: OR
17830: IFFALSE 17834
// exit ;
17832: GO 18030
// case engine of engine_solar :
17834: LD_VAR 0 2
17838: PUSH
17839: LD_INT 2
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17885
17847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
17848: LD_ADDR_VAR 0 3
17852: PUSH
17853: LD_INT 11
17855: PUSH
17856: LD_INT 12
17858: PUSH
17859: LD_INT 13
17861: PUSH
17862: LD_INT 14
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: LD_INT 2
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: ST_TO_ADDR
17883: GO 18014
17885: LD_INT 1
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17955
17893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 11
17901: PUSH
17902: LD_INT 12
17904: PUSH
17905: LD_INT 13
17907: PUSH
17908: LD_INT 14
17910: PUSH
17911: LD_INT 1
17913: PUSH
17914: LD_INT 2
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: LD_INT 4
17922: PUSH
17923: LD_INT 5
17925: PUSH
17926: LD_INT 21
17928: PUSH
17929: LD_INT 23
17931: PUSH
17932: LD_INT 22
17934: PUSH
17935: LD_INT 24
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: ST_TO_ADDR
17953: GO 18014
17955: LD_INT 3
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 18013
17963: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17964: LD_ADDR_VAR 0 3
17968: PUSH
17969: LD_INT 13
17971: PUSH
17972: LD_INT 14
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 4
17983: PUSH
17984: LD_INT 5
17986: PUSH
17987: LD_INT 21
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 23
17995: PUSH
17996: LD_INT 24
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: ST_TO_ADDR
18011: GO 18014
18013: POP
// result := ( chassis in result ) ;
18014: LD_ADDR_VAR 0 3
18018: PUSH
18019: LD_VAR 0 1
18023: PUSH
18024: LD_VAR 0 3
18028: IN
18029: ST_TO_ADDR
// end ;
18030: LD_VAR 0 3
18034: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18035: LD_INT 0
18037: PPUSH
// if not chassis or not weapon then
18038: LD_VAR 0 1
18042: NOT
18043: PUSH
18044: LD_VAR 0 2
18048: NOT
18049: OR
18050: IFFALSE 18054
// exit ;
18052: GO 19080
// case weapon of us_machine_gun :
18054: LD_VAR 0 2
18058: PUSH
18059: LD_INT 2
18061: DOUBLE
18062: EQUAL
18063: IFTRUE 18067
18065: GO 18097
18067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18068: LD_ADDR_VAR 0 3
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: LD_INT 4
18084: PUSH
18085: LD_INT 5
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: ST_TO_ADDR
18095: GO 19064
18097: LD_INT 3
18099: DOUBLE
18100: EQUAL
18101: IFTRUE 18105
18103: GO 18135
18105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18106: LD_ADDR_VAR 0 3
18110: PUSH
18111: LD_INT 1
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: LD_INT 4
18122: PUSH
18123: LD_INT 5
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: ST_TO_ADDR
18133: GO 19064
18135: LD_INT 11
18137: DOUBLE
18138: EQUAL
18139: IFTRUE 18143
18141: GO 18173
18143: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18144: LD_ADDR_VAR 0 3
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: LD_INT 4
18160: PUSH
18161: LD_INT 5
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: ST_TO_ADDR
18171: GO 19064
18173: LD_INT 4
18175: DOUBLE
18176: EQUAL
18177: IFTRUE 18181
18179: GO 18207
18181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18182: LD_ADDR_VAR 0 3
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: LD_INT 4
18195: PUSH
18196: LD_INT 5
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: ST_TO_ADDR
18205: GO 19064
18207: LD_INT 5
18209: DOUBLE
18210: EQUAL
18211: IFTRUE 18215
18213: GO 18241
18215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: LD_INT 4
18229: PUSH
18230: LD_INT 5
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: ST_TO_ADDR
18239: GO 19064
18241: LD_INT 9
18243: DOUBLE
18244: EQUAL
18245: IFTRUE 18249
18247: GO 18275
18249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18250: LD_ADDR_VAR 0 3
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: LD_INT 3
18260: PUSH
18261: LD_INT 4
18263: PUSH
18264: LD_INT 5
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: ST_TO_ADDR
18273: GO 19064
18275: LD_INT 7
18277: DOUBLE
18278: EQUAL
18279: IFTRUE 18283
18281: GO 18309
18283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18284: LD_ADDR_VAR 0 3
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 4
18297: PUSH
18298: LD_INT 5
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: ST_TO_ADDR
18307: GO 19064
18309: LD_INT 12
18311: DOUBLE
18312: EQUAL
18313: IFTRUE 18317
18315: GO 18343
18317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18318: LD_ADDR_VAR 0 3
18322: PUSH
18323: LD_INT 2
18325: PUSH
18326: LD_INT 3
18328: PUSH
18329: LD_INT 4
18331: PUSH
18332: LD_INT 5
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: ST_TO_ADDR
18341: GO 19064
18343: LD_INT 13
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18377
18351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18352: LD_ADDR_VAR 0 3
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: LD_INT 3
18362: PUSH
18363: LD_INT 4
18365: PUSH
18366: LD_INT 5
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: ST_TO_ADDR
18375: GO 19064
18377: LD_INT 14
18379: DOUBLE
18380: EQUAL
18381: IFTRUE 18385
18383: GO 18403
18385: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18386: LD_ADDR_VAR 0 3
18390: PUSH
18391: LD_INT 4
18393: PUSH
18394: LD_INT 5
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: ST_TO_ADDR
18401: GO 19064
18403: LD_INT 6
18405: DOUBLE
18406: EQUAL
18407: IFTRUE 18411
18409: GO 18429
18411: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18412: LD_ADDR_VAR 0 3
18416: PUSH
18417: LD_INT 4
18419: PUSH
18420: LD_INT 5
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: ST_TO_ADDR
18427: GO 19064
18429: LD_INT 10
18431: DOUBLE
18432: EQUAL
18433: IFTRUE 18437
18435: GO 18455
18437: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18438: LD_ADDR_VAR 0 3
18442: PUSH
18443: LD_INT 4
18445: PUSH
18446: LD_INT 5
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: ST_TO_ADDR
18453: GO 19064
18455: LD_INT 22
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18489
18463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18464: LD_ADDR_VAR 0 3
18468: PUSH
18469: LD_INT 11
18471: PUSH
18472: LD_INT 12
18474: PUSH
18475: LD_INT 13
18477: PUSH
18478: LD_INT 14
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: ST_TO_ADDR
18487: GO 19064
18489: LD_INT 23
18491: DOUBLE
18492: EQUAL
18493: IFTRUE 18497
18495: GO 18523
18497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 11
18505: PUSH
18506: LD_INT 12
18508: PUSH
18509: LD_INT 13
18511: PUSH
18512: LD_INT 14
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: ST_TO_ADDR
18521: GO 19064
18523: LD_INT 24
18525: DOUBLE
18526: EQUAL
18527: IFTRUE 18531
18529: GO 18557
18531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18532: LD_ADDR_VAR 0 3
18536: PUSH
18537: LD_INT 11
18539: PUSH
18540: LD_INT 12
18542: PUSH
18543: LD_INT 13
18545: PUSH
18546: LD_INT 14
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: ST_TO_ADDR
18555: GO 19064
18557: LD_INT 30
18559: DOUBLE
18560: EQUAL
18561: IFTRUE 18565
18563: GO 18591
18565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_INT 11
18573: PUSH
18574: LD_INT 12
18576: PUSH
18577: LD_INT 13
18579: PUSH
18580: LD_INT 14
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: ST_TO_ADDR
18589: GO 19064
18591: LD_INT 25
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18617
18599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18600: LD_ADDR_VAR 0 3
18604: PUSH
18605: LD_INT 13
18607: PUSH
18608: LD_INT 14
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: ST_TO_ADDR
18615: GO 19064
18617: LD_INT 27
18619: DOUBLE
18620: EQUAL
18621: IFTRUE 18625
18623: GO 18643
18625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18626: LD_ADDR_VAR 0 3
18630: PUSH
18631: LD_INT 13
18633: PUSH
18634: LD_INT 14
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: ST_TO_ADDR
18641: GO 19064
18643: LD_INT 28
18645: DOUBLE
18646: EQUAL
18647: IFTRUE 18651
18649: GO 18669
18651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18652: LD_ADDR_VAR 0 3
18656: PUSH
18657: LD_INT 13
18659: PUSH
18660: LD_INT 14
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: ST_TO_ADDR
18667: GO 19064
18669: LD_INT 29
18671: DOUBLE
18672: EQUAL
18673: IFTRUE 18677
18675: GO 18695
18677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18678: LD_ADDR_VAR 0 3
18682: PUSH
18683: LD_INT 13
18685: PUSH
18686: LD_INT 14
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: ST_TO_ADDR
18693: GO 19064
18695: LD_INT 31
18697: DOUBLE
18698: EQUAL
18699: IFTRUE 18703
18701: GO 18721
18703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
18704: LD_ADDR_VAR 0 3
18708: PUSH
18709: LD_INT 13
18711: PUSH
18712: LD_INT 14
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: ST_TO_ADDR
18719: GO 19064
18721: LD_INT 26
18723: DOUBLE
18724: EQUAL
18725: IFTRUE 18729
18727: GO 18747
18729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
18730: LD_ADDR_VAR 0 3
18734: PUSH
18735: LD_INT 13
18737: PUSH
18738: LD_INT 14
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: ST_TO_ADDR
18745: GO 19064
18747: LD_INT 42
18749: DOUBLE
18750: EQUAL
18751: IFTRUE 18755
18753: GO 18781
18755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
18756: LD_ADDR_VAR 0 3
18760: PUSH
18761: LD_INT 21
18763: PUSH
18764: LD_INT 22
18766: PUSH
18767: LD_INT 23
18769: PUSH
18770: LD_INT 24
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: ST_TO_ADDR
18779: GO 19064
18781: LD_INT 43
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18815
18789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
18790: LD_ADDR_VAR 0 3
18794: PUSH
18795: LD_INT 21
18797: PUSH
18798: LD_INT 22
18800: PUSH
18801: LD_INT 23
18803: PUSH
18804: LD_INT 24
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: ST_TO_ADDR
18813: GO 19064
18815: LD_INT 44
18817: DOUBLE
18818: EQUAL
18819: IFTRUE 18823
18821: GO 18849
18823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: LD_INT 21
18831: PUSH
18832: LD_INT 22
18834: PUSH
18835: LD_INT 23
18837: PUSH
18838: LD_INT 24
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: ST_TO_ADDR
18847: GO 19064
18849: LD_INT 45
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18883
18857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
18858: LD_ADDR_VAR 0 3
18862: PUSH
18863: LD_INT 21
18865: PUSH
18866: LD_INT 22
18868: PUSH
18869: LD_INT 23
18871: PUSH
18872: LD_INT 24
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: ST_TO_ADDR
18881: GO 19064
18883: LD_INT 49
18885: DOUBLE
18886: EQUAL
18887: IFTRUE 18891
18889: GO 18917
18891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18892: LD_ADDR_VAR 0 3
18896: PUSH
18897: LD_INT 21
18899: PUSH
18900: LD_INT 22
18902: PUSH
18903: LD_INT 23
18905: PUSH
18906: LD_INT 24
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: ST_TO_ADDR
18915: GO 19064
18917: LD_INT 51
18919: DOUBLE
18920: EQUAL
18921: IFTRUE 18925
18923: GO 18951
18925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18926: LD_ADDR_VAR 0 3
18930: PUSH
18931: LD_INT 21
18933: PUSH
18934: LD_INT 22
18936: PUSH
18937: LD_INT 23
18939: PUSH
18940: LD_INT 24
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: ST_TO_ADDR
18949: GO 19064
18951: LD_INT 52
18953: DOUBLE
18954: EQUAL
18955: IFTRUE 18959
18957: GO 18985
18959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18960: LD_ADDR_VAR 0 3
18964: PUSH
18965: LD_INT 21
18967: PUSH
18968: LD_INT 22
18970: PUSH
18971: LD_INT 23
18973: PUSH
18974: LD_INT 24
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: ST_TO_ADDR
18983: GO 19064
18985: LD_INT 53
18987: DOUBLE
18988: EQUAL
18989: IFTRUE 18993
18991: GO 19011
18993: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18994: LD_ADDR_VAR 0 3
18998: PUSH
18999: LD_INT 23
19001: PUSH
19002: LD_INT 24
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: ST_TO_ADDR
19009: GO 19064
19011: LD_INT 46
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19037
19019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19020: LD_ADDR_VAR 0 3
19024: PUSH
19025: LD_INT 23
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: ST_TO_ADDR
19035: GO 19064
19037: LD_INT 47
19039: DOUBLE
19040: EQUAL
19041: IFTRUE 19045
19043: GO 19063
19045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19046: LD_ADDR_VAR 0 3
19050: PUSH
19051: LD_INT 23
19053: PUSH
19054: LD_INT 24
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: ST_TO_ADDR
19061: GO 19064
19063: POP
// result := ( chassis in result ) ;
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_VAR 0 1
19073: PUSH
19074: LD_VAR 0 3
19078: IN
19079: ST_TO_ADDR
// end ;
19080: LD_VAR 0 3
19084: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19085: LD_INT 0
19087: PPUSH
19088: PPUSH
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
19093: PPUSH
// result := array ;
19094: LD_ADDR_VAR 0 5
19098: PUSH
19099: LD_VAR 0 1
19103: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19104: LD_VAR 0 1
19108: NOT
19109: PUSH
19110: LD_VAR 0 2
19114: NOT
19115: OR
19116: PUSH
19117: LD_VAR 0 3
19121: NOT
19122: OR
19123: PUSH
19124: LD_VAR 0 2
19128: PUSH
19129: LD_VAR 0 1
19133: GREATER
19134: OR
19135: PUSH
19136: LD_VAR 0 3
19140: PUSH
19141: LD_VAR 0 1
19145: GREATER
19146: OR
19147: IFFALSE 19151
// exit ;
19149: GO 19447
// if direction then
19151: LD_VAR 0 4
19155: IFFALSE 19219
// begin d := 1 ;
19157: LD_ADDR_VAR 0 9
19161: PUSH
19162: LD_INT 1
19164: ST_TO_ADDR
// if i_from > i_to then
19165: LD_VAR 0 2
19169: PUSH
19170: LD_VAR 0 3
19174: GREATER
19175: IFFALSE 19201
// length := ( array - i_from ) + i_to else
19177: LD_ADDR_VAR 0 11
19181: PUSH
19182: LD_VAR 0 1
19186: PUSH
19187: LD_VAR 0 2
19191: MINUS
19192: PUSH
19193: LD_VAR 0 3
19197: PLUS
19198: ST_TO_ADDR
19199: GO 19217
// length := i_to - i_from ;
19201: LD_ADDR_VAR 0 11
19205: PUSH
19206: LD_VAR 0 3
19210: PUSH
19211: LD_VAR 0 2
19215: MINUS
19216: ST_TO_ADDR
// end else
19217: GO 19280
// begin d := - 1 ;
19219: LD_ADDR_VAR 0 9
19223: PUSH
19224: LD_INT 1
19226: NEG
19227: ST_TO_ADDR
// if i_from > i_to then
19228: LD_VAR 0 2
19232: PUSH
19233: LD_VAR 0 3
19237: GREATER
19238: IFFALSE 19258
// length := i_from - i_to else
19240: LD_ADDR_VAR 0 11
19244: PUSH
19245: LD_VAR 0 2
19249: PUSH
19250: LD_VAR 0 3
19254: MINUS
19255: ST_TO_ADDR
19256: GO 19280
// length := ( array - i_to ) + i_from ;
19258: LD_ADDR_VAR 0 11
19262: PUSH
19263: LD_VAR 0 1
19267: PUSH
19268: LD_VAR 0 3
19272: MINUS
19273: PUSH
19274: LD_VAR 0 2
19278: PLUS
19279: ST_TO_ADDR
// end ; if not length then
19280: LD_VAR 0 11
19284: NOT
19285: IFFALSE 19289
// exit ;
19287: GO 19447
// tmp := array ;
19289: LD_ADDR_VAR 0 10
19293: PUSH
19294: LD_VAR 0 1
19298: ST_TO_ADDR
// for i = 1 to length do
19299: LD_ADDR_VAR 0 6
19303: PUSH
19304: DOUBLE
19305: LD_INT 1
19307: DEC
19308: ST_TO_ADDR
19309: LD_VAR 0 11
19313: PUSH
19314: FOR_TO
19315: IFFALSE 19435
// begin for j = 1 to array do
19317: LD_ADDR_VAR 0 7
19321: PUSH
19322: DOUBLE
19323: LD_INT 1
19325: DEC
19326: ST_TO_ADDR
19327: LD_VAR 0 1
19331: PUSH
19332: FOR_TO
19333: IFFALSE 19421
// begin k := j + d ;
19335: LD_ADDR_VAR 0 8
19339: PUSH
19340: LD_VAR 0 7
19344: PUSH
19345: LD_VAR 0 9
19349: PLUS
19350: ST_TO_ADDR
// if k > array then
19351: LD_VAR 0 8
19355: PUSH
19356: LD_VAR 0 1
19360: GREATER
19361: IFFALSE 19371
// k := 1 ;
19363: LD_ADDR_VAR 0 8
19367: PUSH
19368: LD_INT 1
19370: ST_TO_ADDR
// if not k then
19371: LD_VAR 0 8
19375: NOT
19376: IFFALSE 19388
// k := array ;
19378: LD_ADDR_VAR 0 8
19382: PUSH
19383: LD_VAR 0 1
19387: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19388: LD_ADDR_VAR 0 10
19392: PUSH
19393: LD_VAR 0 10
19397: PPUSH
19398: LD_VAR 0 8
19402: PPUSH
19403: LD_VAR 0 1
19407: PUSH
19408: LD_VAR 0 7
19412: ARRAY
19413: PPUSH
19414: CALL_OW 1
19418: ST_TO_ADDR
// end ;
19419: GO 19332
19421: POP
19422: POP
// array := tmp ;
19423: LD_ADDR_VAR 0 1
19427: PUSH
19428: LD_VAR 0 10
19432: ST_TO_ADDR
// end ;
19433: GO 19314
19435: POP
19436: POP
// result := array ;
19437: LD_ADDR_VAR 0 5
19441: PUSH
19442: LD_VAR 0 1
19446: ST_TO_ADDR
// end ;
19447: LD_VAR 0 5
19451: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
// result := 0 ;
19456: LD_ADDR_VAR 0 3
19460: PUSH
19461: LD_INT 0
19463: ST_TO_ADDR
// if not array or not value in array then
19464: LD_VAR 0 1
19468: NOT
19469: PUSH
19470: LD_VAR 0 2
19474: PUSH
19475: LD_VAR 0 1
19479: IN
19480: NOT
19481: OR
19482: IFFALSE 19486
// exit ;
19484: GO 19540
// for i = 1 to array do
19486: LD_ADDR_VAR 0 4
19490: PUSH
19491: DOUBLE
19492: LD_INT 1
19494: DEC
19495: ST_TO_ADDR
19496: LD_VAR 0 1
19500: PUSH
19501: FOR_TO
19502: IFFALSE 19538
// if value = array [ i ] then
19504: LD_VAR 0 2
19508: PUSH
19509: LD_VAR 0 1
19513: PUSH
19514: LD_VAR 0 4
19518: ARRAY
19519: EQUAL
19520: IFFALSE 19536
// begin result := i ;
19522: LD_ADDR_VAR 0 3
19526: PUSH
19527: LD_VAR 0 4
19531: ST_TO_ADDR
// exit ;
19532: POP
19533: POP
19534: GO 19540
// end ;
19536: GO 19501
19538: POP
19539: POP
// end ;
19540: LD_VAR 0 3
19544: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19545: LD_INT 0
19547: PPUSH
// vc_chassis := chassis ;
19548: LD_ADDR_OWVAR 37
19552: PUSH
19553: LD_VAR 0 1
19557: ST_TO_ADDR
// vc_engine := engine ;
19558: LD_ADDR_OWVAR 39
19562: PUSH
19563: LD_VAR 0 2
19567: ST_TO_ADDR
// vc_control := control ;
19568: LD_ADDR_OWVAR 38
19572: PUSH
19573: LD_VAR 0 3
19577: ST_TO_ADDR
// vc_weapon := weapon ;
19578: LD_ADDR_OWVAR 40
19582: PUSH
19583: LD_VAR 0 4
19587: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19588: LD_ADDR_OWVAR 41
19592: PUSH
19593: LD_VAR 0 5
19597: ST_TO_ADDR
// end ;
19598: LD_VAR 0 6
19602: RET
// export function WantPlant ( unit ) ; var task ; begin
19603: LD_INT 0
19605: PPUSH
19606: PPUSH
// result := false ;
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_INT 0
19614: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_VAR 0 1
19624: PPUSH
19625: CALL_OW 437
19629: ST_TO_ADDR
// if task then
19630: LD_VAR 0 3
19634: IFFALSE 19662
// if task [ 1 ] [ 1 ] = p then
19636: LD_VAR 0 3
19640: PUSH
19641: LD_INT 1
19643: ARRAY
19644: PUSH
19645: LD_INT 1
19647: ARRAY
19648: PUSH
19649: LD_STRING p
19651: EQUAL
19652: IFFALSE 19662
// result := true ;
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// end ;
19662: LD_VAR 0 2
19666: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19667: LD_INT 0
19669: PPUSH
19670: PPUSH
19671: PPUSH
19672: PPUSH
// if pos < 1 then
19673: LD_VAR 0 2
19677: PUSH
19678: LD_INT 1
19680: LESS
19681: IFFALSE 19685
// exit ;
19683: GO 19988
// if pos = 1 then
19685: LD_VAR 0 2
19689: PUSH
19690: LD_INT 1
19692: EQUAL
19693: IFFALSE 19726
// result := Replace ( arr , pos [ 1 ] , value ) else
19695: LD_ADDR_VAR 0 4
19699: PUSH
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_VAR 0 2
19709: PUSH
19710: LD_INT 1
19712: ARRAY
19713: PPUSH
19714: LD_VAR 0 3
19718: PPUSH
19719: CALL_OW 1
19723: ST_TO_ADDR
19724: GO 19988
// begin tmp := arr ;
19726: LD_ADDR_VAR 0 6
19730: PUSH
19731: LD_VAR 0 1
19735: ST_TO_ADDR
// s_arr := [ tmp ] ;
19736: LD_ADDR_VAR 0 7
19740: PUSH
19741: LD_VAR 0 6
19745: PUSH
19746: EMPTY
19747: LIST
19748: ST_TO_ADDR
// for i = 1 to pos - 1 do
19749: LD_ADDR_VAR 0 5
19753: PUSH
19754: DOUBLE
19755: LD_INT 1
19757: DEC
19758: ST_TO_ADDR
19759: LD_VAR 0 2
19763: PUSH
19764: LD_INT 1
19766: MINUS
19767: PUSH
19768: FOR_TO
19769: IFFALSE 19814
// begin tmp := tmp [ pos [ i ] ] ;
19771: LD_ADDR_VAR 0 6
19775: PUSH
19776: LD_VAR 0 6
19780: PUSH
19781: LD_VAR 0 2
19785: PUSH
19786: LD_VAR 0 5
19790: ARRAY
19791: ARRAY
19792: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
19793: LD_ADDR_VAR 0 7
19797: PUSH
19798: LD_VAR 0 7
19802: PUSH
19803: LD_VAR 0 6
19807: PUSH
19808: EMPTY
19809: LIST
19810: ADD
19811: ST_TO_ADDR
// end ;
19812: GO 19768
19814: POP
19815: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
19816: LD_ADDR_VAR 0 6
19820: PUSH
19821: LD_VAR 0 6
19825: PPUSH
19826: LD_VAR 0 2
19830: PUSH
19831: LD_VAR 0 2
19835: ARRAY
19836: PPUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: CALL_OW 1
19846: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
19847: LD_ADDR_VAR 0 7
19851: PUSH
19852: LD_VAR 0 7
19856: PPUSH
19857: LD_VAR 0 7
19861: PPUSH
19862: LD_VAR 0 6
19866: PPUSH
19867: CALL_OW 1
19871: ST_TO_ADDR
// for i = s_arr downto 2 do
19872: LD_ADDR_VAR 0 5
19876: PUSH
19877: DOUBLE
19878: LD_VAR 0 7
19882: INC
19883: ST_TO_ADDR
19884: LD_INT 2
19886: PUSH
19887: FOR_DOWNTO
19888: IFFALSE 19972
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19890: LD_ADDR_VAR 0 6
19894: PUSH
19895: LD_VAR 0 7
19899: PUSH
19900: LD_VAR 0 5
19904: PUSH
19905: LD_INT 1
19907: MINUS
19908: ARRAY
19909: PPUSH
19910: LD_VAR 0 2
19914: PUSH
19915: LD_VAR 0 5
19919: PUSH
19920: LD_INT 1
19922: MINUS
19923: ARRAY
19924: PPUSH
19925: LD_VAR 0 7
19929: PUSH
19930: LD_VAR 0 5
19934: ARRAY
19935: PPUSH
19936: CALL_OW 1
19940: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19941: LD_ADDR_VAR 0 7
19945: PUSH
19946: LD_VAR 0 7
19950: PPUSH
19951: LD_VAR 0 5
19955: PUSH
19956: LD_INT 1
19958: MINUS
19959: PPUSH
19960: LD_VAR 0 6
19964: PPUSH
19965: CALL_OW 1
19969: ST_TO_ADDR
// end ;
19970: GO 19887
19972: POP
19973: POP
// result := s_arr [ 1 ] ;
19974: LD_ADDR_VAR 0 4
19978: PUSH
19979: LD_VAR 0 7
19983: PUSH
19984: LD_INT 1
19986: ARRAY
19987: ST_TO_ADDR
// end ; end ;
19988: LD_VAR 0 4
19992: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19993: LD_INT 0
19995: PPUSH
19996: PPUSH
// if not list then
19997: LD_VAR 0 1
20001: NOT
20002: IFFALSE 20006
// exit ;
20004: GO 20097
// i := list [ pos1 ] ;
20006: LD_ADDR_VAR 0 5
20010: PUSH
20011: LD_VAR 0 1
20015: PUSH
20016: LD_VAR 0 2
20020: ARRAY
20021: ST_TO_ADDR
// if not i then
20022: LD_VAR 0 5
20026: NOT
20027: IFFALSE 20031
// exit ;
20029: GO 20097
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20031: LD_ADDR_VAR 0 1
20035: PUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: LD_VAR 0 2
20045: PPUSH
20046: LD_VAR 0 1
20050: PUSH
20051: LD_VAR 0 3
20055: ARRAY
20056: PPUSH
20057: CALL_OW 1
20061: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20062: LD_ADDR_VAR 0 1
20066: PUSH
20067: LD_VAR 0 1
20071: PPUSH
20072: LD_VAR 0 3
20076: PPUSH
20077: LD_VAR 0 5
20081: PPUSH
20082: CALL_OW 1
20086: ST_TO_ADDR
// result := list ;
20087: LD_ADDR_VAR 0 4
20091: PUSH
20092: LD_VAR 0 1
20096: ST_TO_ADDR
// end ;
20097: LD_VAR 0 4
20101: RET
// export function Add ( list , pos , val ) ; begin
20102: LD_INT 0
20104: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
20105: LD_ADDR_VAR 0 4
20109: PUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_VAR 0 2
20119: PPUSH
20120: LD_VAR 0 3
20124: PPUSH
20125: CALL 19667 0 3
20129: ST_TO_ADDR
20130: LD_VAR 0 4
20134: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20135: LD_INT 0
20137: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20138: LD_ADDR_VAR 0 5
20142: PUSH
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 250
20152: PPUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 251
20162: PPUSH
20163: LD_VAR 0 2
20167: PPUSH
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_VAR 0 4
20177: PPUSH
20178: CALL 20188 0 5
20182: ST_TO_ADDR
// end ;
20183: LD_VAR 0 5
20187: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
// if not list then
20194: LD_VAR 0 3
20198: NOT
20199: IFFALSE 20203
// exit ;
20201: GO 20591
// result := [ ] ;
20203: LD_ADDR_VAR 0 6
20207: PUSH
20208: EMPTY
20209: ST_TO_ADDR
// for i in list do
20210: LD_ADDR_VAR 0 7
20214: PUSH
20215: LD_VAR 0 3
20219: PUSH
20220: FOR_IN
20221: IFFALSE 20423
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20223: LD_ADDR_VAR 0 9
20227: PUSH
20228: LD_VAR 0 7
20232: PPUSH
20233: LD_VAR 0 1
20237: PPUSH
20238: LD_VAR 0 2
20242: PPUSH
20243: CALL_OW 297
20247: ST_TO_ADDR
// if not result then
20248: LD_VAR 0 6
20252: NOT
20253: IFFALSE 20279
// result := [ [ i , tmp ] ] else
20255: LD_ADDR_VAR 0 6
20259: PUSH
20260: LD_VAR 0 7
20264: PUSH
20265: LD_VAR 0 9
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: ST_TO_ADDR
20277: GO 20421
// begin if result [ result ] [ 2 ] < tmp then
20279: LD_VAR 0 6
20283: PUSH
20284: LD_VAR 0 6
20288: ARRAY
20289: PUSH
20290: LD_INT 2
20292: ARRAY
20293: PUSH
20294: LD_VAR 0 9
20298: LESS
20299: IFFALSE 20341
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20301: LD_ADDR_VAR 0 6
20305: PUSH
20306: LD_VAR 0 6
20310: PPUSH
20311: LD_VAR 0 6
20315: PUSH
20316: LD_INT 1
20318: PLUS
20319: PPUSH
20320: LD_VAR 0 7
20324: PUSH
20325: LD_VAR 0 9
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL_OW 2
20338: ST_TO_ADDR
20339: GO 20421
// for j = 1 to result do
20341: LD_ADDR_VAR 0 8
20345: PUSH
20346: DOUBLE
20347: LD_INT 1
20349: DEC
20350: ST_TO_ADDR
20351: LD_VAR 0 6
20355: PUSH
20356: FOR_TO
20357: IFFALSE 20419
// begin if tmp < result [ j ] [ 2 ] then
20359: LD_VAR 0 9
20363: PUSH
20364: LD_VAR 0 6
20368: PUSH
20369: LD_VAR 0 8
20373: ARRAY
20374: PUSH
20375: LD_INT 2
20377: ARRAY
20378: LESS
20379: IFFALSE 20417
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20381: LD_ADDR_VAR 0 6
20385: PUSH
20386: LD_VAR 0 6
20390: PPUSH
20391: LD_VAR 0 8
20395: PPUSH
20396: LD_VAR 0 7
20400: PUSH
20401: LD_VAR 0 9
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PPUSH
20410: CALL_OW 2
20414: ST_TO_ADDR
// break ;
20415: GO 20419
// end ; end ;
20417: GO 20356
20419: POP
20420: POP
// end ; end ;
20421: GO 20220
20423: POP
20424: POP
// if result and not asc then
20425: LD_VAR 0 6
20429: PUSH
20430: LD_VAR 0 4
20434: NOT
20435: AND
20436: IFFALSE 20511
// begin tmp := result ;
20438: LD_ADDR_VAR 0 9
20442: PUSH
20443: LD_VAR 0 6
20447: ST_TO_ADDR
// for i = tmp downto 1 do
20448: LD_ADDR_VAR 0 7
20452: PUSH
20453: DOUBLE
20454: LD_VAR 0 9
20458: INC
20459: ST_TO_ADDR
20460: LD_INT 1
20462: PUSH
20463: FOR_DOWNTO
20464: IFFALSE 20509
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
20466: LD_ADDR_VAR 0 6
20470: PUSH
20471: LD_VAR 0 6
20475: PPUSH
20476: LD_VAR 0 9
20480: PUSH
20481: LD_VAR 0 7
20485: MINUS
20486: PUSH
20487: LD_INT 1
20489: PLUS
20490: PPUSH
20491: LD_VAR 0 9
20495: PUSH
20496: LD_VAR 0 7
20500: ARRAY
20501: PPUSH
20502: CALL_OW 1
20506: ST_TO_ADDR
20507: GO 20463
20509: POP
20510: POP
// end ; tmp := [ ] ;
20511: LD_ADDR_VAR 0 9
20515: PUSH
20516: EMPTY
20517: ST_TO_ADDR
// if mode then
20518: LD_VAR 0 5
20522: IFFALSE 20591
// begin for i = 1 to result do
20524: LD_ADDR_VAR 0 7
20528: PUSH
20529: DOUBLE
20530: LD_INT 1
20532: DEC
20533: ST_TO_ADDR
20534: LD_VAR 0 6
20538: PUSH
20539: FOR_TO
20540: IFFALSE 20579
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20542: LD_ADDR_VAR 0 9
20546: PUSH
20547: LD_VAR 0 9
20551: PPUSH
20552: LD_VAR 0 7
20556: PPUSH
20557: LD_VAR 0 6
20561: PUSH
20562: LD_VAR 0 7
20566: ARRAY
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: PPUSH
20572: CALL_OW 1
20576: ST_TO_ADDR
20577: GO 20539
20579: POP
20580: POP
// result := tmp ;
20581: LD_ADDR_VAR 0 6
20585: PUSH
20586: LD_VAR 0 9
20590: ST_TO_ADDR
// end ; end ;
20591: LD_VAR 0 6
20595: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20596: LD_INT 0
20598: PPUSH
20599: PPUSH
20600: PPUSH
20601: PPUSH
20602: PPUSH
20603: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20604: LD_ADDR_VAR 0 5
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: LD_INT 0
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: ST_TO_ADDR
// if not x or not y then
20626: LD_VAR 0 2
20630: NOT
20631: PUSH
20632: LD_VAR 0 3
20636: NOT
20637: OR
20638: IFFALSE 20642
// exit ;
20640: GO 22288
// if not range then
20642: LD_VAR 0 4
20646: NOT
20647: IFFALSE 20657
// range := 10 ;
20649: LD_ADDR_VAR 0 4
20653: PUSH
20654: LD_INT 10
20656: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20657: LD_ADDR_VAR 0 8
20661: PUSH
20662: LD_INT 81
20664: PUSH
20665: LD_VAR 0 1
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 92
20676: PUSH
20677: LD_VAR 0 2
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_VAR 0 4
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 3
20700: PUSH
20701: LD_INT 21
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: ST_TO_ADDR
// if not tmp then
20725: LD_VAR 0 8
20729: NOT
20730: IFFALSE 20734
// exit ;
20732: GO 22288
// for i in tmp do
20734: LD_ADDR_VAR 0 6
20738: PUSH
20739: LD_VAR 0 8
20743: PUSH
20744: FOR_IN
20745: IFFALSE 22263
// begin points := [ 0 , 0 , 0 ] ;
20747: LD_ADDR_VAR 0 9
20751: PUSH
20752: LD_INT 0
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: LD_INT 0
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: LIST
20765: ST_TO_ADDR
// bpoints := 1 ;
20766: LD_ADDR_VAR 0 10
20770: PUSH
20771: LD_INT 1
20773: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20774: LD_VAR 0 6
20778: PPUSH
20779: CALL_OW 247
20783: PUSH
20784: LD_INT 1
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 21370
20792: POP
// begin if GetClass ( i ) = 1 then
20793: LD_VAR 0 6
20797: PPUSH
20798: CALL_OW 257
20802: PUSH
20803: LD_INT 1
20805: EQUAL
20806: IFFALSE 20827
// points := [ 10 , 5 , 3 ] ;
20808: LD_ADDR_VAR 0 9
20812: PUSH
20813: LD_INT 10
20815: PUSH
20816: LD_INT 5
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20827: LD_VAR 0 6
20831: PPUSH
20832: CALL_OW 257
20836: PUSH
20837: LD_INT 2
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: LD_INT 4
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: LIST
20850: IN
20851: IFFALSE 20872
// points := [ 3 , 2 , 1 ] ;
20853: LD_ADDR_VAR 0 9
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20872: LD_VAR 0 6
20876: PPUSH
20877: CALL_OW 257
20881: PUSH
20882: LD_INT 5
20884: EQUAL
20885: IFFALSE 20906
// points := [ 130 , 5 , 2 ] ;
20887: LD_ADDR_VAR 0 9
20891: PUSH
20892: LD_INT 130
20894: PUSH
20895: LD_INT 5
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: LIST
20905: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20906: LD_VAR 0 6
20910: PPUSH
20911: CALL_OW 257
20915: PUSH
20916: LD_INT 8
20918: EQUAL
20919: IFFALSE 20940
// points := [ 35 , 35 , 30 ] ;
20921: LD_ADDR_VAR 0 9
20925: PUSH
20926: LD_INT 35
20928: PUSH
20929: LD_INT 35
20931: PUSH
20932: LD_INT 30
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20940: LD_VAR 0 6
20944: PPUSH
20945: CALL_OW 257
20949: PUSH
20950: LD_INT 9
20952: EQUAL
20953: IFFALSE 20974
// points := [ 20 , 55 , 40 ] ;
20955: LD_ADDR_VAR 0 9
20959: PUSH
20960: LD_INT 20
20962: PUSH
20963: LD_INT 55
20965: PUSH
20966: LD_INT 40
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: LIST
20973: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20974: LD_VAR 0 6
20978: PPUSH
20979: CALL_OW 257
20983: PUSH
20984: LD_INT 12
20986: PUSH
20987: LD_INT 16
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: IN
20994: IFFALSE 21015
// points := [ 5 , 3 , 2 ] ;
20996: LD_ADDR_VAR 0 9
21000: PUSH
21001: LD_INT 5
21003: PUSH
21004: LD_INT 3
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: LIST
21014: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21015: LD_VAR 0 6
21019: PPUSH
21020: CALL_OW 257
21024: PUSH
21025: LD_INT 17
21027: EQUAL
21028: IFFALSE 21049
// points := [ 100 , 50 , 75 ] ;
21030: LD_ADDR_VAR 0 9
21034: PUSH
21035: LD_INT 100
21037: PUSH
21038: LD_INT 50
21040: PUSH
21041: LD_INT 75
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21049: LD_VAR 0 6
21053: PPUSH
21054: CALL_OW 257
21058: PUSH
21059: LD_INT 15
21061: EQUAL
21062: IFFALSE 21083
// points := [ 10 , 5 , 3 ] ;
21064: LD_ADDR_VAR 0 9
21068: PUSH
21069: LD_INT 10
21071: PUSH
21072: LD_INT 5
21074: PUSH
21075: LD_INT 3
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: LIST
21082: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21083: LD_VAR 0 6
21087: PPUSH
21088: CALL_OW 257
21092: PUSH
21093: LD_INT 14
21095: EQUAL
21096: IFFALSE 21117
// points := [ 10 , 0 , 0 ] ;
21098: LD_ADDR_VAR 0 9
21102: PUSH
21103: LD_INT 10
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21117: LD_VAR 0 6
21121: PPUSH
21122: CALL_OW 257
21126: PUSH
21127: LD_INT 11
21129: EQUAL
21130: IFFALSE 21151
// points := [ 30 , 10 , 5 ] ;
21132: LD_ADDR_VAR 0 9
21136: PUSH
21137: LD_INT 30
21139: PUSH
21140: LD_INT 10
21142: PUSH
21143: LD_INT 5
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_INT 5
21158: PPUSH
21159: CALL_OW 321
21163: PUSH
21164: LD_INT 2
21166: EQUAL
21167: IFFALSE 21184
// bpoints := bpoints * 1.8 ;
21169: LD_ADDR_VAR 0 10
21173: PUSH
21174: LD_VAR 0 10
21178: PUSH
21179: LD_REAL  1.80000000000000E+0000
21182: MUL
21183: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21184: LD_VAR 0 6
21188: PPUSH
21189: CALL_OW 257
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: LD_INT 3
21202: PUSH
21203: LD_INT 4
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: IN
21212: PUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: LD_INT 51
21220: PPUSH
21221: CALL_OW 321
21225: PUSH
21226: LD_INT 2
21228: EQUAL
21229: AND
21230: IFFALSE 21247
// bpoints := bpoints * 1.2 ;
21232: LD_ADDR_VAR 0 10
21236: PUSH
21237: LD_VAR 0 10
21241: PUSH
21242: LD_REAL  1.20000000000000E+0000
21245: MUL
21246: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21247: LD_VAR 0 6
21251: PPUSH
21252: CALL_OW 257
21256: PUSH
21257: LD_INT 5
21259: PUSH
21260: LD_INT 7
21262: PUSH
21263: LD_INT 9
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: IN
21271: PUSH
21272: LD_VAR 0 1
21276: PPUSH
21277: LD_INT 52
21279: PPUSH
21280: CALL_OW 321
21284: PUSH
21285: LD_INT 2
21287: EQUAL
21288: AND
21289: IFFALSE 21306
// bpoints := bpoints * 1.5 ;
21291: LD_ADDR_VAR 0 10
21295: PUSH
21296: LD_VAR 0 10
21300: PUSH
21301: LD_REAL  1.50000000000000E+0000
21304: MUL
21305: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21306: LD_VAR 0 1
21310: PPUSH
21311: LD_INT 66
21313: PPUSH
21314: CALL_OW 321
21318: PUSH
21319: LD_INT 2
21321: EQUAL
21322: IFFALSE 21339
// bpoints := bpoints * 1.1 ;
21324: LD_ADDR_VAR 0 10
21328: PUSH
21329: LD_VAR 0 10
21333: PUSH
21334: LD_REAL  1.10000000000000E+0000
21337: MUL
21338: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21339: LD_ADDR_VAR 0 10
21343: PUSH
21344: LD_VAR 0 10
21348: PUSH
21349: LD_VAR 0 6
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: CALL_OW 259
21361: PUSH
21362: LD_REAL  1.15000000000000E+0000
21365: MUL
21366: MUL
21367: ST_TO_ADDR
// end ; unit_vehicle :
21368: GO 22192
21370: LD_INT 2
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 22180
21378: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
21379: LD_VAR 0 6
21383: PPUSH
21384: CALL_OW 264
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: LD_INT 42
21394: PUSH
21395: LD_INT 24
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: IN
21403: IFFALSE 21424
// points := [ 25 , 5 , 3 ] ;
21405: LD_ADDR_VAR 0 9
21409: PUSH
21410: LD_INT 25
21412: PUSH
21413: LD_INT 5
21415: PUSH
21416: LD_INT 3
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
21424: LD_VAR 0 6
21428: PPUSH
21429: CALL_OW 264
21433: PUSH
21434: LD_INT 4
21436: PUSH
21437: LD_INT 43
21439: PUSH
21440: LD_INT 25
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: IN
21448: IFFALSE 21469
// points := [ 40 , 15 , 5 ] ;
21450: LD_ADDR_VAR 0 9
21454: PUSH
21455: LD_INT 40
21457: PUSH
21458: LD_INT 15
21460: PUSH
21461: LD_INT 5
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
21469: LD_VAR 0 6
21473: PPUSH
21474: CALL_OW 264
21478: PUSH
21479: LD_INT 3
21481: PUSH
21482: LD_INT 23
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: IN
21489: IFFALSE 21510
// points := [ 7 , 25 , 8 ] ;
21491: LD_ADDR_VAR 0 9
21495: PUSH
21496: LD_INT 7
21498: PUSH
21499: LD_INT 25
21501: PUSH
21502: LD_INT 8
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
21510: LD_VAR 0 6
21514: PPUSH
21515: CALL_OW 264
21519: PUSH
21520: LD_INT 5
21522: PUSH
21523: LD_INT 27
21525: PUSH
21526: LD_INT 44
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: IN
21534: IFFALSE 21555
// points := [ 14 , 50 , 16 ] ;
21536: LD_ADDR_VAR 0 9
21540: PUSH
21541: LD_INT 14
21543: PUSH
21544: LD_INT 50
21546: PUSH
21547: LD_INT 16
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21555: LD_VAR 0 6
21559: PPUSH
21560: CALL_OW 264
21564: PUSH
21565: LD_INT 6
21567: PUSH
21568: LD_INT 46
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: IN
21575: IFFALSE 21596
// points := [ 32 , 120 , 70 ] ;
21577: LD_ADDR_VAR 0 9
21581: PUSH
21582: LD_INT 32
21584: PUSH
21585: LD_INT 120
21587: PUSH
21588: LD_INT 70
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
21596: LD_VAR 0 6
21600: PPUSH
21601: CALL_OW 264
21605: PUSH
21606: LD_INT 7
21608: PUSH
21609: LD_INT 28
21611: PUSH
21612: LD_INT 45
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: IN
21620: IFFALSE 21641
// points := [ 35 , 20 , 45 ] ;
21622: LD_ADDR_VAR 0 9
21626: PUSH
21627: LD_INT 35
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 45
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: LIST
21640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21641: LD_VAR 0 6
21645: PPUSH
21646: CALL_OW 264
21650: PUSH
21651: LD_INT 47
21653: PUSH
21654: EMPTY
21655: LIST
21656: IN
21657: IFFALSE 21678
// points := [ 67 , 45 , 75 ] ;
21659: LD_ADDR_VAR 0 9
21663: PUSH
21664: LD_INT 67
21666: PUSH
21667: LD_INT 45
21669: PUSH
21670: LD_INT 75
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21678: LD_VAR 0 6
21682: PPUSH
21683: CALL_OW 264
21687: PUSH
21688: LD_INT 26
21690: PUSH
21691: EMPTY
21692: LIST
21693: IN
21694: IFFALSE 21715
// points := [ 120 , 30 , 80 ] ;
21696: LD_ADDR_VAR 0 9
21700: PUSH
21701: LD_INT 120
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 80
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21715: LD_VAR 0 6
21719: PPUSH
21720: CALL_OW 264
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: EMPTY
21729: LIST
21730: IN
21731: IFFALSE 21752
// points := [ 40 , 1 , 1 ] ;
21733: LD_ADDR_VAR 0 9
21737: PUSH
21738: LD_INT 40
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: LD_INT 1
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21752: LD_VAR 0 6
21756: PPUSH
21757: CALL_OW 264
21761: PUSH
21762: LD_INT 29
21764: PUSH
21765: EMPTY
21766: LIST
21767: IN
21768: IFFALSE 21789
// points := [ 70 , 200 , 400 ] ;
21770: LD_ADDR_VAR 0 9
21774: PUSH
21775: LD_INT 70
21777: PUSH
21778: LD_INT 200
21780: PUSH
21781: LD_INT 400
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21789: LD_VAR 0 6
21793: PPUSH
21794: CALL_OW 264
21798: PUSH
21799: LD_INT 14
21801: PUSH
21802: LD_INT 53
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: IN
21809: IFFALSE 21830
// points := [ 40 , 10 , 20 ] ;
21811: LD_ADDR_VAR 0 9
21815: PUSH
21816: LD_INT 40
21818: PUSH
21819: LD_INT 10
21821: PUSH
21822: LD_INT 20
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 264
21839: PUSH
21840: LD_INT 9
21842: PUSH
21843: EMPTY
21844: LIST
21845: IN
21846: IFFALSE 21867
// points := [ 5 , 70 , 20 ] ;
21848: LD_ADDR_VAR 0 9
21852: PUSH
21853: LD_INT 5
21855: PUSH
21856: LD_INT 70
21858: PUSH
21859: LD_INT 20
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: LIST
21866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21867: LD_VAR 0 6
21871: PPUSH
21872: CALL_OW 264
21876: PUSH
21877: LD_INT 10
21879: PUSH
21880: EMPTY
21881: LIST
21882: IN
21883: IFFALSE 21904
// points := [ 35 , 110 , 70 ] ;
21885: LD_ADDR_VAR 0 9
21889: PUSH
21890: LD_INT 35
21892: PUSH
21893: LD_INT 110
21895: PUSH
21896: LD_INT 70
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21904: LD_VAR 0 6
21908: PPUSH
21909: CALL_OW 265
21913: PUSH
21914: LD_INT 25
21916: EQUAL
21917: IFFALSE 21938
// points := [ 80 , 65 , 100 ] ;
21919: LD_ADDR_VAR 0 9
21923: PUSH
21924: LD_INT 80
21926: PUSH
21927: LD_INT 65
21929: PUSH
21930: LD_INT 100
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21938: LD_VAR 0 6
21942: PPUSH
21943: CALL_OW 263
21947: PUSH
21948: LD_INT 1
21950: EQUAL
21951: IFFALSE 21986
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21953: LD_ADDR_VAR 0 10
21957: PUSH
21958: LD_VAR 0 10
21962: PUSH
21963: LD_VAR 0 6
21967: PPUSH
21968: CALL_OW 311
21972: PPUSH
21973: LD_INT 3
21975: PPUSH
21976: CALL_OW 259
21980: PUSH
21981: LD_INT 4
21983: MUL
21984: MUL
21985: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21986: LD_VAR 0 6
21990: PPUSH
21991: CALL_OW 263
21995: PUSH
21996: LD_INT 2
21998: EQUAL
21999: IFFALSE 22050
// begin j := IsControledBy ( i ) ;
22001: LD_ADDR_VAR 0 7
22005: PUSH
22006: LD_VAR 0 6
22010: PPUSH
22011: CALL_OW 312
22015: ST_TO_ADDR
// if j then
22016: LD_VAR 0 7
22020: IFFALSE 22050
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22022: LD_ADDR_VAR 0 10
22026: PUSH
22027: LD_VAR 0 10
22031: PUSH
22032: LD_VAR 0 7
22036: PPUSH
22037: LD_INT 3
22039: PPUSH
22040: CALL_OW 259
22044: PUSH
22045: LD_INT 3
22047: MUL
22048: MUL
22049: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22050: LD_VAR 0 6
22054: PPUSH
22055: CALL_OW 264
22059: PUSH
22060: LD_INT 5
22062: PUSH
22063: LD_INT 6
22065: PUSH
22066: LD_INT 46
22068: PUSH
22069: LD_INT 44
22071: PUSH
22072: LD_INT 47
22074: PUSH
22075: LD_INT 45
22077: PUSH
22078: LD_INT 28
22080: PUSH
22081: LD_INT 7
22083: PUSH
22084: LD_INT 27
22086: PUSH
22087: LD_INT 29
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: IN
22102: PUSH
22103: LD_VAR 0 1
22107: PPUSH
22108: LD_INT 52
22110: PPUSH
22111: CALL_OW 321
22115: PUSH
22116: LD_INT 2
22118: EQUAL
22119: AND
22120: IFFALSE 22137
// bpoints := bpoints * 1.2 ;
22122: LD_ADDR_VAR 0 10
22126: PUSH
22127: LD_VAR 0 10
22131: PUSH
22132: LD_REAL  1.20000000000000E+0000
22135: MUL
22136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22137: LD_VAR 0 6
22141: PPUSH
22142: CALL_OW 264
22146: PUSH
22147: LD_INT 6
22149: PUSH
22150: LD_INT 46
22152: PUSH
22153: LD_INT 47
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: IN
22161: IFFALSE 22178
// bpoints := bpoints * 1.2 ;
22163: LD_ADDR_VAR 0 10
22167: PUSH
22168: LD_VAR 0 10
22172: PUSH
22173: LD_REAL  1.20000000000000E+0000
22176: MUL
22177: ST_TO_ADDR
// end ; unit_building :
22178: GO 22192
22180: LD_INT 3
22182: DOUBLE
22183: EQUAL
22184: IFTRUE 22188
22186: GO 22191
22188: POP
// ; end ;
22189: GO 22192
22191: POP
// for j = 1 to 3 do
22192: LD_ADDR_VAR 0 7
22196: PUSH
22197: DOUBLE
22198: LD_INT 1
22200: DEC
22201: ST_TO_ADDR
22202: LD_INT 3
22204: PUSH
22205: FOR_TO
22206: IFFALSE 22259
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22208: LD_ADDR_VAR 0 5
22212: PUSH
22213: LD_VAR 0 5
22217: PPUSH
22218: LD_VAR 0 7
22222: PPUSH
22223: LD_VAR 0 5
22227: PUSH
22228: LD_VAR 0 7
22232: ARRAY
22233: PUSH
22234: LD_VAR 0 9
22238: PUSH
22239: LD_VAR 0 7
22243: ARRAY
22244: PUSH
22245: LD_VAR 0 10
22249: MUL
22250: PLUS
22251: PPUSH
22252: CALL_OW 1
22256: ST_TO_ADDR
22257: GO 22205
22259: POP
22260: POP
// end ;
22261: GO 20744
22263: POP
22264: POP
// result := Replace ( result , 4 , tmp ) ;
22265: LD_ADDR_VAR 0 5
22269: PUSH
22270: LD_VAR 0 5
22274: PPUSH
22275: LD_INT 4
22277: PPUSH
22278: LD_VAR 0 8
22282: PPUSH
22283: CALL_OW 1
22287: ST_TO_ADDR
// end ;
22288: LD_VAR 0 5
22292: RET
// export function DangerAtRange ( unit , range ) ; begin
22293: LD_INT 0
22295: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22296: LD_ADDR_VAR 0 3
22300: PUSH
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 255
22310: PPUSH
22311: LD_VAR 0 1
22315: PPUSH
22316: CALL_OW 250
22320: PPUSH
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL_OW 251
22330: PPUSH
22331: LD_VAR 0 2
22335: PPUSH
22336: CALL 20596 0 4
22340: ST_TO_ADDR
// end ;
22341: LD_VAR 0 3
22345: RET
// export function IsExtension ( b ) ; begin
22346: LD_INT 0
22348: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: CALL_OW 266
22363: PUSH
22364: LD_INT 23
22366: PUSH
22367: LD_INT 20
22369: PUSH
22370: LD_INT 22
22372: PUSH
22373: LD_INT 17
22375: PUSH
22376: LD_INT 24
22378: PUSH
22379: LD_INT 21
22381: PUSH
22382: LD_INT 19
22384: PUSH
22385: LD_INT 16
22387: PUSH
22388: LD_INT 25
22390: PUSH
22391: LD_INT 18
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: IN
22406: ST_TO_ADDR
// end ;
22407: LD_VAR 0 2
22411: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
22412: LD_INT 0
22414: PPUSH
22415: PPUSH
22416: PPUSH
// result := [ ] ;
22417: LD_ADDR_VAR 0 2
22421: PUSH
22422: EMPTY
22423: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_INT 21
22431: PUSH
22432: LD_INT 3
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 69
22443: ST_TO_ADDR
// if not tmp then
22444: LD_VAR 0 3
22448: NOT
22449: IFFALSE 22453
// exit ;
22451: GO 22503
// for i in tmp do
22453: LD_ADDR_VAR 0 4
22457: PUSH
22458: LD_VAR 0 3
22462: PUSH
22463: FOR_IN
22464: IFFALSE 22501
// if GetBase ( i ) = base then
22466: LD_VAR 0 4
22470: PPUSH
22471: CALL_OW 274
22475: PUSH
22476: LD_VAR 0 1
22480: EQUAL
22481: IFFALSE 22499
// result := result ^ i ;
22483: LD_ADDR_VAR 0 2
22487: PUSH
22488: LD_VAR 0 2
22492: PUSH
22493: LD_VAR 0 4
22497: ADD
22498: ST_TO_ADDR
22499: GO 22463
22501: POP
22502: POP
// end ;
22503: LD_VAR 0 2
22507: RET
// export function ComComplete ( unit , b ) ; var i ; begin
22508: LD_INT 0
22510: PPUSH
22511: PPUSH
// if BuildingStatus ( b ) = bs_build then
22512: LD_VAR 0 2
22516: PPUSH
22517: CALL_OW 461
22521: PUSH
22522: LD_INT 1
22524: EQUAL
22525: IFFALSE 22585
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_STRING h
22534: PUSH
22535: LD_VAR 0 2
22539: PPUSH
22540: CALL_OW 250
22544: PUSH
22545: LD_VAR 0 2
22549: PPUSH
22550: CALL_OW 251
22554: PUSH
22555: LD_VAR 0 2
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: LD_INT 0
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: PUSH
22578: EMPTY
22579: LIST
22580: PPUSH
22581: CALL_OW 446
// end ;
22585: LD_VAR 0 3
22589: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22590: LD_INT 0
22592: PPUSH
22593: PPUSH
22594: PPUSH
22595: PPUSH
22596: PPUSH
22597: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
22598: LD_VAR 0 1
22602: NOT
22603: PUSH
22604: LD_VAR 0 1
22608: PPUSH
22609: CALL_OW 263
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: NOT
22618: OR
22619: IFFALSE 22623
// exit ;
22621: GO 22939
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22623: LD_ADDR_VAR 0 6
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_VAR 0 1
22635: PPUSH
22636: CALL_OW 255
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: LD_INT 30
22650: PUSH
22651: LD_INT 36
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 34
22660: PUSH
22661: LD_INT 31
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PPUSH
22677: CALL_OW 69
22681: ST_TO_ADDR
// if not tmp then
22682: LD_VAR 0 6
22686: NOT
22687: IFFALSE 22691
// exit ;
22689: GO 22939
// result := [ ] ;
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: EMPTY
22697: ST_TO_ADDR
// for i in tmp do
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_VAR 0 6
22707: PUSH
22708: FOR_IN
22709: IFFALSE 22780
// begin t := UnitsInside ( i ) ;
22711: LD_ADDR_VAR 0 4
22715: PUSH
22716: LD_VAR 0 3
22720: PPUSH
22721: CALL_OW 313
22725: ST_TO_ADDR
// if t then
22726: LD_VAR 0 4
22730: IFFALSE 22778
// for j in t do
22732: LD_ADDR_VAR 0 7
22736: PUSH
22737: LD_VAR 0 4
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22776
// result := Insert ( result , result + 1 , j ) ;
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_VAR 0 2
22754: PPUSH
22755: LD_VAR 0 2
22759: PUSH
22760: LD_INT 1
22762: PLUS
22763: PPUSH
22764: LD_VAR 0 7
22768: PPUSH
22769: CALL_OW 2
22773: ST_TO_ADDR
22774: GO 22742
22776: POP
22777: POP
// end ;
22778: GO 22708
22780: POP
22781: POP
// if not result then
22782: LD_VAR 0 2
22786: NOT
22787: IFFALSE 22791
// exit ;
22789: GO 22939
// mech := result [ 1 ] ;
22791: LD_ADDR_VAR 0 5
22795: PUSH
22796: LD_VAR 0 2
22800: PUSH
22801: LD_INT 1
22803: ARRAY
22804: ST_TO_ADDR
// if result > 1 then
22805: LD_VAR 0 2
22809: PUSH
22810: LD_INT 1
22812: GREATER
22813: IFFALSE 22925
// for i = 2 to result do
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: DOUBLE
22821: LD_INT 2
22823: DEC
22824: ST_TO_ADDR
22825: LD_VAR 0 2
22829: PUSH
22830: FOR_TO
22831: IFFALSE 22923
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22833: LD_ADDR_VAR 0 4
22837: PUSH
22838: LD_VAR 0 2
22842: PUSH
22843: LD_VAR 0 3
22847: ARRAY
22848: PPUSH
22849: LD_INT 3
22851: PPUSH
22852: CALL_OW 259
22856: PUSH
22857: LD_VAR 0 2
22861: PUSH
22862: LD_VAR 0 3
22866: ARRAY
22867: PPUSH
22868: CALL_OW 432
22872: MINUS
22873: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22874: LD_VAR 0 4
22878: PUSH
22879: LD_VAR 0 5
22883: PPUSH
22884: LD_INT 3
22886: PPUSH
22887: CALL_OW 259
22891: PUSH
22892: LD_VAR 0 5
22896: PPUSH
22897: CALL_OW 432
22901: MINUS
22902: GREATEREQUAL
22903: IFFALSE 22921
// mech := result [ i ] ;
22905: LD_ADDR_VAR 0 5
22909: PUSH
22910: LD_VAR 0 2
22914: PUSH
22915: LD_VAR 0 3
22919: ARRAY
22920: ST_TO_ADDR
// end ;
22921: GO 22830
22923: POP
22924: POP
// ComLinkTo ( vehicle , mech ) ;
22925: LD_VAR 0 1
22929: PPUSH
22930: LD_VAR 0 5
22934: PPUSH
22935: CALL_OW 135
// end ;
22939: LD_VAR 0 2
22943: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
22944: LD_INT 0
22946: PPUSH
22947: PPUSH
22948: PPUSH
22949: PPUSH
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
22955: PPUSH
22956: PPUSH
22957: PPUSH
// result := [ ] ;
22958: LD_ADDR_VAR 0 6
22962: PUSH
22963: EMPTY
22964: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL_OW 266
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: IN
22985: NOT
22986: IFFALSE 22990
// exit ;
22988: GO 24390
// if name then
22990: LD_VAR 0 2
22994: IFFALSE 23010
// SetBName ( base_dep , name ) ;
22996: LD_VAR 0 1
23000: PPUSH
23001: LD_VAR 0 2
23005: PPUSH
23006: CALL_OW 500
// base := GetBase ( base_dep ) ;
23010: LD_ADDR_VAR 0 14
23014: PUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 274
23024: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23025: LD_ADDR_VAR 0 15
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 255
23039: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23040: LD_ADDR_VAR 0 16
23044: PUSH
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 248
23054: ST_TO_ADDR
// if sources then
23055: LD_VAR 0 4
23059: IFFALSE 23106
// for i = 1 to 3 do
23061: LD_ADDR_VAR 0 7
23065: PUSH
23066: DOUBLE
23067: LD_INT 1
23069: DEC
23070: ST_TO_ADDR
23071: LD_INT 3
23073: PUSH
23074: FOR_TO
23075: IFFALSE 23104
// AddResourceType ( base , i , sources [ i ] ) ;
23077: LD_VAR 0 14
23081: PPUSH
23082: LD_VAR 0 7
23086: PPUSH
23087: LD_VAR 0 4
23091: PUSH
23092: LD_VAR 0 7
23096: ARRAY
23097: PPUSH
23098: CALL_OW 276
23102: GO 23074
23104: POP
23105: POP
// buildings := GetBaseBuildings ( base ) ;
23106: LD_ADDR_VAR 0 17
23110: PUSH
23111: LD_VAR 0 14
23115: PPUSH
23116: CALL 22412 0 1
23120: ST_TO_ADDR
// InitHc ;
23121: CALL_OW 19
// InitUc ;
23125: CALL_OW 18
// uc_side := side ;
23129: LD_ADDR_OWVAR 20
23133: PUSH
23134: LD_VAR 0 15
23138: ST_TO_ADDR
// uc_nation := nation ;
23139: LD_ADDR_OWVAR 21
23143: PUSH
23144: LD_VAR 0 16
23148: ST_TO_ADDR
// if buildings then
23149: LD_VAR 0 17
23153: IFFALSE 24249
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23155: LD_VAR 0 17
23159: PPUSH
23160: LD_INT 2
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 32
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 33
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: PPUSH
23188: CALL_OW 72
23192: IFFALSE 23275
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
23194: LD_ADDR_VAR 0 7
23198: PUSH
23199: LD_VAR 0 17
23203: PPUSH
23204: LD_INT 2
23206: PUSH
23207: LD_INT 30
23209: PUSH
23210: LD_INT 32
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 30
23219: PUSH
23220: LD_INT 33
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: PPUSH
23232: CALL_OW 72
23236: PUSH
23237: FOR_IN
23238: IFFALSE 23273
// begin if not GetBWeapon ( i ) then
23240: LD_VAR 0 7
23244: PPUSH
23245: CALL_OW 269
23249: NOT
23250: IFFALSE 23271
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
23252: LD_VAR 0 7
23256: PPUSH
23257: LD_VAR 0 7
23261: PPUSH
23262: CALL 24395 0 1
23266: PPUSH
23267: CALL_OW 431
// end ;
23271: GO 23237
23273: POP
23274: POP
// end ; for i = 1 to personel do
23275: LD_ADDR_VAR 0 7
23279: PUSH
23280: DOUBLE
23281: LD_INT 1
23283: DEC
23284: ST_TO_ADDR
23285: LD_VAR 0 5
23289: PUSH
23290: FOR_TO
23291: IFFALSE 24229
// begin if i > 4 then
23293: LD_VAR 0 7
23297: PUSH
23298: LD_INT 4
23300: GREATER
23301: IFFALSE 23305
// break ;
23303: GO 24229
// case i of 1 :
23305: LD_VAR 0 7
23309: PUSH
23310: LD_INT 1
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23391
23318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
23319: LD_ADDR_VAR 0 11
23323: PUSH
23324: LD_VAR 0 17
23328: PPUSH
23329: LD_INT 22
23331: PUSH
23332: LD_VAR 0 15
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: LD_INT 30
23346: PUSH
23347: LD_INT 32
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 30
23356: PUSH
23357: LD_INT 4
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 30
23366: PUSH
23367: LD_INT 5
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PPUSH
23384: CALL_OW 72
23388: ST_TO_ADDR
23389: GO 23613
23391: LD_INT 2
23393: DOUBLE
23394: EQUAL
23395: IFTRUE 23399
23397: GO 23461
23399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23400: LD_ADDR_VAR 0 11
23404: PUSH
23405: LD_VAR 0 17
23409: PPUSH
23410: LD_INT 22
23412: PUSH
23413: LD_VAR 0 15
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 2
23424: PUSH
23425: LD_INT 30
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 30
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PPUSH
23454: CALL_OW 72
23458: ST_TO_ADDR
23459: GO 23613
23461: LD_INT 3
23463: DOUBLE
23464: EQUAL
23465: IFTRUE 23469
23467: GO 23531
23469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23470: LD_ADDR_VAR 0 11
23474: PUSH
23475: LD_VAR 0 17
23479: PPUSH
23480: LD_INT 22
23482: PUSH
23483: LD_VAR 0 15
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 30
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 30
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: LIST
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PPUSH
23524: CALL_OW 72
23528: ST_TO_ADDR
23529: GO 23613
23531: LD_INT 4
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23612
23539: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23540: LD_ADDR_VAR 0 11
23544: PUSH
23545: LD_VAR 0 17
23549: PPUSH
23550: LD_INT 22
23552: PUSH
23553: LD_VAR 0 15
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: LD_INT 30
23567: PUSH
23568: LD_INT 6
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 30
23577: PUSH
23578: LD_INT 7
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 30
23587: PUSH
23588: LD_INT 8
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 72
23609: ST_TO_ADDR
23610: GO 23613
23612: POP
// x := personel [ i ] ;
23613: LD_ADDR_VAR 0 12
23617: PUSH
23618: LD_VAR 0 5
23622: PUSH
23623: LD_VAR 0 7
23627: ARRAY
23628: ST_TO_ADDR
// if x = - 1 then
23629: LD_VAR 0 12
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: EQUAL
23638: IFFALSE 23847
// begin for j in f do
23640: LD_ADDR_VAR 0 8
23644: PUSH
23645: LD_VAR 0 11
23649: PUSH
23650: FOR_IN
23651: IFFALSE 23843
// repeat InitHc ;
23653: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23657: LD_VAR 0 8
23661: PPUSH
23662: CALL_OW 266
23666: PUSH
23667: LD_INT 5
23669: EQUAL
23670: IFFALSE 23740
// begin if UnitsInside ( j ) < 3 then
23672: LD_VAR 0 8
23676: PPUSH
23677: CALL_OW 313
23681: PUSH
23682: LD_INT 3
23684: LESS
23685: IFFALSE 23721
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23687: LD_INT 0
23689: PPUSH
23690: LD_INT 5
23692: PUSH
23693: LD_INT 8
23695: PUSH
23696: LD_INT 9
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: LIST
23703: PUSH
23704: LD_VAR 0 16
23708: ARRAY
23709: PPUSH
23710: LD_VAR 0 3
23714: PPUSH
23715: CALL_OW 380
23719: GO 23738
// PrepareHuman ( false , i , skill ) ;
23721: LD_INT 0
23723: PPUSH
23724: LD_VAR 0 7
23728: PPUSH
23729: LD_VAR 0 3
23733: PPUSH
23734: CALL_OW 380
// end else
23738: GO 23757
// PrepareHuman ( false , i , skill ) ;
23740: LD_INT 0
23742: PPUSH
23743: LD_VAR 0 7
23747: PPUSH
23748: LD_VAR 0 3
23752: PPUSH
23753: CALL_OW 380
// un := CreateHuman ;
23757: LD_ADDR_VAR 0 13
23761: PUSH
23762: CALL_OW 44
23766: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23767: LD_ADDR_VAR 0 6
23771: PUSH
23772: LD_VAR 0 6
23776: PPUSH
23777: LD_INT 1
23779: PPUSH
23780: LD_VAR 0 13
23784: PPUSH
23785: CALL_OW 2
23789: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23790: LD_VAR 0 13
23794: PPUSH
23795: LD_VAR 0 8
23799: PPUSH
23800: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23804: LD_VAR 0 8
23808: PPUSH
23809: CALL_OW 313
23813: PUSH
23814: LD_INT 6
23816: EQUAL
23817: PUSH
23818: LD_VAR 0 8
23822: PPUSH
23823: CALL_OW 266
23827: PUSH
23828: LD_INT 32
23830: PUSH
23831: LD_INT 31
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: IN
23838: OR
23839: IFFALSE 23653
23841: GO 23650
23843: POP
23844: POP
// end else
23845: GO 24227
// for j = 1 to x do
23847: LD_ADDR_VAR 0 8
23851: PUSH
23852: DOUBLE
23853: LD_INT 1
23855: DEC
23856: ST_TO_ADDR
23857: LD_VAR 0 12
23861: PUSH
23862: FOR_TO
23863: IFFALSE 24225
// begin InitHc ;
23865: CALL_OW 19
// if not f then
23869: LD_VAR 0 11
23873: NOT
23874: IFFALSE 23963
// begin PrepareHuman ( false , i , skill ) ;
23876: LD_INT 0
23878: PPUSH
23879: LD_VAR 0 7
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: CALL_OW 380
// un := CreateHuman ;
23893: LD_ADDR_VAR 0 13
23897: PUSH
23898: CALL_OW 44
23902: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23903: LD_ADDR_VAR 0 6
23907: PUSH
23908: LD_VAR 0 6
23912: PPUSH
23913: LD_INT 1
23915: PPUSH
23916: LD_VAR 0 13
23920: PPUSH
23921: CALL_OW 2
23925: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23926: LD_VAR 0 13
23930: PPUSH
23931: LD_VAR 0 1
23935: PPUSH
23936: CALL_OW 250
23940: PPUSH
23941: LD_VAR 0 1
23945: PPUSH
23946: CALL_OW 251
23950: PPUSH
23951: LD_INT 10
23953: PPUSH
23954: LD_INT 0
23956: PPUSH
23957: CALL_OW 50
// continue ;
23961: GO 23862
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23963: LD_VAR 0 11
23967: PUSH
23968: LD_INT 1
23970: ARRAY
23971: PPUSH
23972: CALL_OW 313
23976: PUSH
23977: LD_VAR 0 11
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PPUSH
23986: CALL_OW 266
23990: PUSH
23991: LD_INT 32
23993: PUSH
23994: LD_INT 31
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: IN
24001: AND
24002: PUSH
24003: LD_VAR 0 11
24007: PUSH
24008: LD_INT 1
24010: ARRAY
24011: PPUSH
24012: CALL_OW 313
24016: PUSH
24017: LD_INT 6
24019: EQUAL
24020: OR
24021: IFFALSE 24041
// f := Delete ( f , 1 ) ;
24023: LD_ADDR_VAR 0 11
24027: PUSH
24028: LD_VAR 0 11
24032: PPUSH
24033: LD_INT 1
24035: PPUSH
24036: CALL_OW 3
24040: ST_TO_ADDR
// if not f then
24041: LD_VAR 0 11
24045: NOT
24046: IFFALSE 24064
// begin x := x + 2 ;
24048: LD_ADDR_VAR 0 12
24052: PUSH
24053: LD_VAR 0 12
24057: PUSH
24058: LD_INT 2
24060: PLUS
24061: ST_TO_ADDR
// continue ;
24062: GO 23862
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
24064: LD_VAR 0 11
24068: PUSH
24069: LD_INT 1
24071: ARRAY
24072: PPUSH
24073: CALL_OW 266
24077: PUSH
24078: LD_INT 5
24080: EQUAL
24081: IFFALSE 24155
// begin if UnitsInside ( f [ 1 ] ) < 3 then
24083: LD_VAR 0 11
24087: PUSH
24088: LD_INT 1
24090: ARRAY
24091: PPUSH
24092: CALL_OW 313
24096: PUSH
24097: LD_INT 3
24099: LESS
24100: IFFALSE 24136
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24102: LD_INT 0
24104: PPUSH
24105: LD_INT 5
24107: PUSH
24108: LD_INT 8
24110: PUSH
24111: LD_INT 9
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: PUSH
24119: LD_VAR 0 16
24123: ARRAY
24124: PPUSH
24125: LD_VAR 0 3
24129: PPUSH
24130: CALL_OW 380
24134: GO 24153
// PrepareHuman ( false , i , skill ) ;
24136: LD_INT 0
24138: PPUSH
24139: LD_VAR 0 7
24143: PPUSH
24144: LD_VAR 0 3
24148: PPUSH
24149: CALL_OW 380
// end else
24153: GO 24172
// PrepareHuman ( false , i , skill ) ;
24155: LD_INT 0
24157: PPUSH
24158: LD_VAR 0 7
24162: PPUSH
24163: LD_VAR 0 3
24167: PPUSH
24168: CALL_OW 380
// un := CreateHuman ;
24172: LD_ADDR_VAR 0 13
24176: PUSH
24177: CALL_OW 44
24181: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24182: LD_ADDR_VAR 0 6
24186: PUSH
24187: LD_VAR 0 6
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: LD_VAR 0 13
24199: PPUSH
24200: CALL_OW 2
24204: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24205: LD_VAR 0 13
24209: PPUSH
24210: LD_VAR 0 11
24214: PUSH
24215: LD_INT 1
24217: ARRAY
24218: PPUSH
24219: CALL_OW 52
// end ;
24223: GO 23862
24225: POP
24226: POP
// end ;
24227: GO 23290
24229: POP
24230: POP
// result := result ^ buildings ;
24231: LD_ADDR_VAR 0 6
24235: PUSH
24236: LD_VAR 0 6
24240: PUSH
24241: LD_VAR 0 17
24245: ADD
24246: ST_TO_ADDR
// end else
24247: GO 24390
// begin for i = 1 to personel do
24249: LD_ADDR_VAR 0 7
24253: PUSH
24254: DOUBLE
24255: LD_INT 1
24257: DEC
24258: ST_TO_ADDR
24259: LD_VAR 0 5
24263: PUSH
24264: FOR_TO
24265: IFFALSE 24388
// begin if i > 4 then
24267: LD_VAR 0 7
24271: PUSH
24272: LD_INT 4
24274: GREATER
24275: IFFALSE 24279
// break ;
24277: GO 24388
// x := personel [ i ] ;
24279: LD_ADDR_VAR 0 12
24283: PUSH
24284: LD_VAR 0 5
24288: PUSH
24289: LD_VAR 0 7
24293: ARRAY
24294: ST_TO_ADDR
// if x = - 1 then
24295: LD_VAR 0 12
24299: PUSH
24300: LD_INT 1
24302: NEG
24303: EQUAL
24304: IFFALSE 24308
// continue ;
24306: GO 24264
// PrepareHuman ( false , i , skill ) ;
24308: LD_INT 0
24310: PPUSH
24311: LD_VAR 0 7
24315: PPUSH
24316: LD_VAR 0 3
24320: PPUSH
24321: CALL_OW 380
// un := CreateHuman ;
24325: LD_ADDR_VAR 0 13
24329: PUSH
24330: CALL_OW 44
24334: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24335: LD_VAR 0 13
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 250
24349: PPUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 251
24359: PPUSH
24360: LD_INT 10
24362: PPUSH
24363: LD_INT 0
24365: PPUSH
24366: CALL_OW 50
// result := result ^ un ;
24370: LD_ADDR_VAR 0 6
24374: PUSH
24375: LD_VAR 0 6
24379: PUSH
24380: LD_VAR 0 13
24384: ADD
24385: ST_TO_ADDR
// end ;
24386: GO 24264
24388: POP
24389: POP
// end ; end ;
24390: LD_VAR 0 6
24394: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24395: LD_INT 0
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
// result := false ;
24413: LD_ADDR_VAR 0 2
24417: PUSH
24418: LD_INT 0
24420: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24421: LD_VAR 0 1
24425: NOT
24426: PUSH
24427: LD_VAR 0 1
24431: PPUSH
24432: CALL_OW 266
24436: PUSH
24437: LD_INT 32
24439: PUSH
24440: LD_INT 33
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: IN
24447: NOT
24448: OR
24449: IFFALSE 24453
// exit ;
24451: GO 25584
// nat := GetNation ( tower ) ;
24453: LD_ADDR_VAR 0 11
24457: PUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 248
24467: ST_TO_ADDR
// side := GetSide ( tower ) ;
24468: LD_ADDR_VAR 0 15
24472: PUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 255
24482: ST_TO_ADDR
// x := GetX ( tower ) ;
24483: LD_ADDR_VAR 0 9
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 250
24497: ST_TO_ADDR
// y := GetY ( tower ) ;
24498: LD_ADDR_VAR 0 10
24502: PUSH
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL_OW 251
24512: ST_TO_ADDR
// if not x or not y then
24513: LD_VAR 0 9
24517: NOT
24518: PUSH
24519: LD_VAR 0 10
24523: NOT
24524: OR
24525: IFFALSE 24529
// exit ;
24527: GO 25584
// weapon := 0 ;
24529: LD_ADDR_VAR 0 17
24533: PUSH
24534: LD_INT 0
24536: ST_TO_ADDR
// fac_list := [ ] ;
24537: LD_ADDR_VAR 0 16
24541: PUSH
24542: EMPTY
24543: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
24544: LD_ADDR_VAR 0 5
24548: PUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 274
24558: PPUSH
24559: CALL 22412 0 1
24563: PPUSH
24564: LD_INT 30
24566: PUSH
24567: LD_INT 3
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 72
24578: ST_TO_ADDR
// if not factories then
24579: LD_VAR 0 5
24583: NOT
24584: IFFALSE 24588
// exit ;
24586: GO 25584
// for i in factories do
24588: LD_ADDR_VAR 0 7
24592: PUSH
24593: LD_VAR 0 5
24597: PUSH
24598: FOR_IN
24599: IFFALSE 24624
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24601: LD_ADDR_VAR 0 16
24605: PUSH
24606: LD_VAR 0 16
24610: PUSH
24611: LD_VAR 0 7
24615: PPUSH
24616: CALL_OW 478
24620: UNION
24621: ST_TO_ADDR
24622: GO 24598
24624: POP
24625: POP
// if not fac_list then
24626: LD_VAR 0 16
24630: NOT
24631: IFFALSE 24635
// exit ;
24633: GO 25584
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24635: LD_ADDR_VAR 0 4
24639: PUSH
24640: LD_INT 4
24642: PUSH
24643: LD_INT 5
24645: PUSH
24646: LD_INT 9
24648: PUSH
24649: LD_INT 10
24651: PUSH
24652: LD_INT 6
24654: PUSH
24655: LD_INT 7
24657: PUSH
24658: LD_INT 11
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 27
24672: PUSH
24673: LD_INT 28
24675: PUSH
24676: LD_INT 26
24678: PUSH
24679: LD_INT 30
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 43
24690: PUSH
24691: LD_INT 44
24693: PUSH
24694: LD_INT 46
24696: PUSH
24697: LD_INT 45
24699: PUSH
24700: LD_INT 47
24702: PUSH
24703: LD_INT 49
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: PUSH
24719: LD_VAR 0 11
24723: ARRAY
24724: ST_TO_ADDR
// for i in list do
24725: LD_ADDR_VAR 0 7
24729: PUSH
24730: LD_VAR 0 4
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24769
// if not i in fac_list then
24738: LD_VAR 0 7
24742: PUSH
24743: LD_VAR 0 16
24747: IN
24748: NOT
24749: IFFALSE 24767
// list := list diff i ;
24751: LD_ADDR_VAR 0 4
24755: PUSH
24756: LD_VAR 0 4
24760: PUSH
24761: LD_VAR 0 7
24765: DIFF
24766: ST_TO_ADDR
24767: GO 24735
24769: POP
24770: POP
// if not list then
24771: LD_VAR 0 4
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 25584
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24780: LD_VAR 0 11
24784: PUSH
24785: LD_INT 3
24787: EQUAL
24788: PUSH
24789: LD_INT 49
24791: PUSH
24792: LD_VAR 0 4
24796: IN
24797: AND
24798: PUSH
24799: LD_INT 31
24801: PPUSH
24802: LD_VAR 0 15
24806: PPUSH
24807: CALL_OW 321
24811: PUSH
24812: LD_INT 2
24814: EQUAL
24815: AND
24816: IFFALSE 24876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24818: LD_INT 22
24820: PUSH
24821: LD_VAR 0 15
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 35
24832: PUSH
24833: LD_INT 49
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 91
24842: PUSH
24843: LD_VAR 0 1
24847: PUSH
24848: LD_INT 10
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: LIST
24860: PPUSH
24861: CALL_OW 69
24865: NOT
24866: IFFALSE 24876
// weapon := ru_time_lapser ;
24868: LD_ADDR_VAR 0 17
24872: PUSH
24873: LD_INT 49
24875: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24876: LD_VAR 0 11
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: IN
24891: PUSH
24892: LD_INT 11
24894: PUSH
24895: LD_VAR 0 4
24899: IN
24900: PUSH
24901: LD_INT 30
24903: PUSH
24904: LD_VAR 0 4
24908: IN
24909: OR
24910: AND
24911: PUSH
24912: LD_INT 6
24914: PPUSH
24915: LD_VAR 0 15
24919: PPUSH
24920: CALL_OW 321
24924: PUSH
24925: LD_INT 2
24927: EQUAL
24928: AND
24929: IFFALSE 25094
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24931: LD_INT 22
24933: PUSH
24934: LD_VAR 0 15
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: LD_INT 35
24948: PUSH
24949: LD_INT 11
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 35
24958: PUSH
24959: LD_INT 30
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 91
24973: PUSH
24974: LD_VAR 0 1
24978: PUSH
24979: LD_INT 18
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: PPUSH
24992: CALL_OW 69
24996: NOT
24997: PUSH
24998: LD_INT 22
25000: PUSH
25001: LD_VAR 0 15
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: LD_INT 30
25015: PUSH
25016: LD_INT 32
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 30
25025: PUSH
25026: LD_INT 33
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 91
25040: PUSH
25041: LD_VAR 0 1
25045: PUSH
25046: LD_INT 12
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: PPUSH
25062: CALL_OW 69
25066: PUSH
25067: LD_INT 2
25069: GREATER
25070: AND
25071: IFFALSE 25094
// weapon := [ us_radar , ar_radar ] [ nat ] ;
25073: LD_ADDR_VAR 0 17
25077: PUSH
25078: LD_INT 11
25080: PUSH
25081: LD_INT 30
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_VAR 0 11
25092: ARRAY
25093: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
25094: LD_VAR 0 17
25098: NOT
25099: PUSH
25100: LD_INT 40
25102: PPUSH
25103: LD_VAR 0 15
25107: PPUSH
25108: CALL_OW 321
25112: PUSH
25113: LD_INT 2
25115: EQUAL
25116: AND
25117: PUSH
25118: LD_INT 7
25120: PUSH
25121: LD_VAR 0 4
25125: IN
25126: PUSH
25127: LD_INT 28
25129: PUSH
25130: LD_VAR 0 4
25134: IN
25135: OR
25136: PUSH
25137: LD_INT 45
25139: PUSH
25140: LD_VAR 0 4
25144: IN
25145: OR
25146: AND
25147: IFFALSE 25401
// begin hex := GetHexInfo ( x , y ) ;
25149: LD_ADDR_VAR 0 3
25153: PUSH
25154: LD_VAR 0 9
25158: PPUSH
25159: LD_VAR 0 10
25163: PPUSH
25164: CALL_OW 546
25168: ST_TO_ADDR
// if hex [ 1 ] then
25169: LD_VAR 0 3
25173: PUSH
25174: LD_INT 1
25176: ARRAY
25177: IFFALSE 25181
// exit ;
25179: GO 25584
// height := hex [ 2 ] ;
25181: LD_ADDR_VAR 0 14
25185: PUSH
25186: LD_VAR 0 3
25190: PUSH
25191: LD_INT 2
25193: ARRAY
25194: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
25195: LD_ADDR_VAR 0 13
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 3
25208: PUSH
25209: LD_INT 5
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: ST_TO_ADDR
// for i in tmp do
25218: LD_ADDR_VAR 0 7
25222: PUSH
25223: LD_VAR 0 13
25227: PUSH
25228: FOR_IN
25229: IFFALSE 25399
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25231: LD_ADDR_VAR 0 8
25235: PUSH
25236: LD_VAR 0 9
25240: PPUSH
25241: LD_VAR 0 7
25245: PPUSH
25246: LD_INT 5
25248: PPUSH
25249: CALL_OW 272
25253: PUSH
25254: LD_VAR 0 10
25258: PPUSH
25259: LD_VAR 0 7
25263: PPUSH
25264: LD_INT 5
25266: PPUSH
25267: CALL_OW 273
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25276: LD_VAR 0 8
25280: PUSH
25281: LD_INT 1
25283: ARRAY
25284: PPUSH
25285: LD_VAR 0 8
25289: PUSH
25290: LD_INT 2
25292: ARRAY
25293: PPUSH
25294: CALL_OW 488
25298: IFFALSE 25397
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25300: LD_ADDR_VAR 0 3
25304: PUSH
25305: LD_VAR 0 8
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: LD_VAR 0 8
25318: PUSH
25319: LD_INT 2
25321: ARRAY
25322: PPUSH
25323: CALL_OW 546
25327: ST_TO_ADDR
// if hex [ 1 ] then
25328: LD_VAR 0 3
25332: PUSH
25333: LD_INT 1
25335: ARRAY
25336: IFFALSE 25340
// continue ;
25338: GO 25228
// h := hex [ 2 ] ;
25340: LD_ADDR_VAR 0 12
25344: PUSH
25345: LD_VAR 0 3
25349: PUSH
25350: LD_INT 2
25352: ARRAY
25353: ST_TO_ADDR
// if h + 7 < height then
25354: LD_VAR 0 12
25358: PUSH
25359: LD_INT 7
25361: PLUS
25362: PUSH
25363: LD_VAR 0 14
25367: LESS
25368: IFFALSE 25397
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25370: LD_ADDR_VAR 0 17
25374: PUSH
25375: LD_INT 7
25377: PUSH
25378: LD_INT 28
25380: PUSH
25381: LD_INT 45
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PUSH
25389: LD_VAR 0 11
25393: ARRAY
25394: ST_TO_ADDR
// break ;
25395: GO 25399
// end ; end ; end ;
25397: GO 25228
25399: POP
25400: POP
// end ; if not weapon then
25401: LD_VAR 0 17
25405: NOT
25406: IFFALSE 25466
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25408: LD_ADDR_VAR 0 4
25412: PUSH
25413: LD_VAR 0 4
25417: PUSH
25418: LD_INT 11
25420: PUSH
25421: LD_INT 30
25423: PUSH
25424: LD_INT 49
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: DIFF
25432: ST_TO_ADDR
// if not list then
25433: LD_VAR 0 4
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25584
// weapon := list [ rand ( 1 , list ) ] ;
25442: LD_ADDR_VAR 0 17
25446: PUSH
25447: LD_VAR 0 4
25451: PUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 4
25459: PPUSH
25460: CALL_OW 12
25464: ARRAY
25465: ST_TO_ADDR
// end ; if weapon then
25466: LD_VAR 0 17
25470: IFFALSE 25584
// begin tmp := CostOfWeapon ( weapon ) ;
25472: LD_ADDR_VAR 0 13
25476: PUSH
25477: LD_VAR 0 17
25481: PPUSH
25482: CALL_OW 451
25486: ST_TO_ADDR
// j := GetBase ( tower ) ;
25487: LD_ADDR_VAR 0 8
25491: PUSH
25492: LD_VAR 0 1
25496: PPUSH
25497: CALL_OW 274
25501: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25502: LD_VAR 0 8
25506: PPUSH
25507: LD_INT 1
25509: PPUSH
25510: CALL_OW 275
25514: PUSH
25515: LD_VAR 0 13
25519: PUSH
25520: LD_INT 1
25522: ARRAY
25523: GREATEREQUAL
25524: PUSH
25525: LD_VAR 0 8
25529: PPUSH
25530: LD_INT 2
25532: PPUSH
25533: CALL_OW 275
25537: PUSH
25538: LD_VAR 0 13
25542: PUSH
25543: LD_INT 2
25545: ARRAY
25546: GREATEREQUAL
25547: AND
25548: PUSH
25549: LD_VAR 0 8
25553: PPUSH
25554: LD_INT 3
25556: PPUSH
25557: CALL_OW 275
25561: PUSH
25562: LD_VAR 0 13
25566: PUSH
25567: LD_INT 3
25569: ARRAY
25570: GREATEREQUAL
25571: AND
25572: IFFALSE 25584
// result := weapon ;
25574: LD_ADDR_VAR 0 2
25578: PUSH
25579: LD_VAR 0 17
25583: ST_TO_ADDR
// end ; end ;
25584: LD_VAR 0 2
25588: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25589: LD_INT 0
25591: PPUSH
25592: PPUSH
// result := true ;
25593: LD_ADDR_VAR 0 3
25597: PUSH
25598: LD_INT 1
25600: ST_TO_ADDR
// if array1 = array2 then
25601: LD_VAR 0 1
25605: PUSH
25606: LD_VAR 0 2
25610: EQUAL
25611: IFFALSE 25671
// begin for i = 1 to array1 do
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: DOUBLE
25619: LD_INT 1
25621: DEC
25622: ST_TO_ADDR
25623: LD_VAR 0 1
25627: PUSH
25628: FOR_TO
25629: IFFALSE 25667
// if array1 [ i ] <> array2 [ i ] then
25631: LD_VAR 0 1
25635: PUSH
25636: LD_VAR 0 4
25640: ARRAY
25641: PUSH
25642: LD_VAR 0 2
25646: PUSH
25647: LD_VAR 0 4
25651: ARRAY
25652: NONEQUAL
25653: IFFALSE 25665
// begin result := false ;
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 0
25662: ST_TO_ADDR
// break ;
25663: GO 25667
// end ;
25665: GO 25628
25667: POP
25668: POP
// end else
25669: GO 25679
// result := false ;
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 0
25678: ST_TO_ADDR
// end ;
25679: LD_VAR 0 3
25683: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25684: LD_INT 0
25686: PPUSH
25687: PPUSH
25688: PPUSH
// pom := GetBase ( fac ) ;
25689: LD_ADDR_VAR 0 5
25693: PUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 274
25703: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25704: LD_ADDR_VAR 0 4
25708: PUSH
25709: LD_VAR 0 2
25713: PUSH
25714: LD_INT 1
25716: ARRAY
25717: PPUSH
25718: LD_VAR 0 2
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PPUSH
25727: LD_VAR 0 2
25731: PUSH
25732: LD_INT 3
25734: ARRAY
25735: PPUSH
25736: LD_VAR 0 2
25740: PUSH
25741: LD_INT 4
25743: ARRAY
25744: PPUSH
25745: CALL_OW 449
25749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25750: LD_ADDR_VAR 0 3
25754: PUSH
25755: LD_VAR 0 5
25759: PPUSH
25760: LD_INT 1
25762: PPUSH
25763: CALL_OW 275
25767: PUSH
25768: LD_VAR 0 4
25772: PUSH
25773: LD_INT 1
25775: ARRAY
25776: GREATEREQUAL
25777: PUSH
25778: LD_VAR 0 5
25782: PPUSH
25783: LD_INT 2
25785: PPUSH
25786: CALL_OW 275
25790: PUSH
25791: LD_VAR 0 4
25795: PUSH
25796: LD_INT 2
25798: ARRAY
25799: GREATEREQUAL
25800: AND
25801: PUSH
25802: LD_VAR 0 5
25806: PPUSH
25807: LD_INT 3
25809: PPUSH
25810: CALL_OW 275
25814: PUSH
25815: LD_VAR 0 4
25819: PUSH
25820: LD_INT 3
25822: ARRAY
25823: GREATEREQUAL
25824: AND
25825: ST_TO_ADDR
// end ;
25826: LD_VAR 0 3
25830: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25831: LD_INT 0
25833: PPUSH
25834: PPUSH
25835: PPUSH
25836: PPUSH
// pom := GetBase ( building ) ;
25837: LD_ADDR_VAR 0 3
25841: PUSH
25842: LD_VAR 0 1
25846: PPUSH
25847: CALL_OW 274
25851: ST_TO_ADDR
// if not pom then
25852: LD_VAR 0 3
25856: NOT
25857: IFFALSE 25861
// exit ;
25859: GO 26031
// btype := GetBType ( building ) ;
25861: LD_ADDR_VAR 0 5
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 266
25875: ST_TO_ADDR
// if btype = b_armoury then
25876: LD_VAR 0 5
25880: PUSH
25881: LD_INT 4
25883: EQUAL
25884: IFFALSE 25894
// btype := b_barracks ;
25886: LD_ADDR_VAR 0 5
25890: PUSH
25891: LD_INT 5
25893: ST_TO_ADDR
// if btype = b_depot then
25894: LD_VAR 0 5
25898: PUSH
25899: LD_INT 0
25901: EQUAL
25902: IFFALSE 25912
// btype := b_warehouse ;
25904: LD_ADDR_VAR 0 5
25908: PUSH
25909: LD_INT 1
25911: ST_TO_ADDR
// if btype = b_workshop then
25912: LD_VAR 0 5
25916: PUSH
25917: LD_INT 2
25919: EQUAL
25920: IFFALSE 25930
// btype := b_factory ;
25922: LD_ADDR_VAR 0 5
25926: PUSH
25927: LD_INT 3
25929: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25930: LD_ADDR_VAR 0 4
25934: PUSH
25935: LD_VAR 0 5
25939: PPUSH
25940: LD_VAR 0 1
25944: PPUSH
25945: CALL_OW 248
25949: PPUSH
25950: CALL_OW 450
25954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25955: LD_ADDR_VAR 0 2
25959: PUSH
25960: LD_VAR 0 3
25964: PPUSH
25965: LD_INT 1
25967: PPUSH
25968: CALL_OW 275
25972: PUSH
25973: LD_VAR 0 4
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: GREATEREQUAL
25982: PUSH
25983: LD_VAR 0 3
25987: PPUSH
25988: LD_INT 2
25990: PPUSH
25991: CALL_OW 275
25995: PUSH
25996: LD_VAR 0 4
26000: PUSH
26001: LD_INT 2
26003: ARRAY
26004: GREATEREQUAL
26005: AND
26006: PUSH
26007: LD_VAR 0 3
26011: PPUSH
26012: LD_INT 3
26014: PPUSH
26015: CALL_OW 275
26019: PUSH
26020: LD_VAR 0 4
26024: PUSH
26025: LD_INT 3
26027: ARRAY
26028: GREATEREQUAL
26029: AND
26030: ST_TO_ADDR
// end ;
26031: LD_VAR 0 2
26035: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
26036: LD_INT 0
26038: PPUSH
26039: PPUSH
26040: PPUSH
// pom := GetBase ( building ) ;
26041: LD_ADDR_VAR 0 4
26045: PUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: CALL_OW 274
26055: ST_TO_ADDR
// if not pom then
26056: LD_VAR 0 4
26060: NOT
26061: IFFALSE 26065
// exit ;
26063: GO 26166
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26065: LD_ADDR_VAR 0 5
26069: PUSH
26070: LD_VAR 0 2
26074: PPUSH
26075: LD_VAR 0 1
26079: PPUSH
26080: CALL_OW 248
26084: PPUSH
26085: CALL_OW 450
26089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26090: LD_ADDR_VAR 0 3
26094: PUSH
26095: LD_VAR 0 4
26099: PPUSH
26100: LD_INT 1
26102: PPUSH
26103: CALL_OW 275
26107: PUSH
26108: LD_VAR 0 5
26112: PUSH
26113: LD_INT 1
26115: ARRAY
26116: GREATEREQUAL
26117: PUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: LD_INT 2
26125: PPUSH
26126: CALL_OW 275
26130: PUSH
26131: LD_VAR 0 5
26135: PUSH
26136: LD_INT 2
26138: ARRAY
26139: GREATEREQUAL
26140: AND
26141: PUSH
26142: LD_VAR 0 4
26146: PPUSH
26147: LD_INT 3
26149: PPUSH
26150: CALL_OW 275
26154: PUSH
26155: LD_VAR 0 5
26159: PUSH
26160: LD_INT 3
26162: ARRAY
26163: GREATEREQUAL
26164: AND
26165: ST_TO_ADDR
// end ;
26166: LD_VAR 0 3
26170: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
26171: LD_INT 0
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
26181: PPUSH
26182: PPUSH
// result := false ;
26183: LD_ADDR_VAR 0 6
26187: PUSH
26188: LD_INT 0
26190: ST_TO_ADDR
// if not base or not btype or not x or not y then
26191: LD_VAR 0 1
26195: NOT
26196: PUSH
26197: LD_VAR 0 2
26201: NOT
26202: OR
26203: PUSH
26204: LD_VAR 0 3
26208: NOT
26209: OR
26210: PUSH
26211: LD_VAR 0 4
26215: NOT
26216: OR
26217: IFFALSE 26221
// exit ;
26219: GO 26735
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
26221: LD_ADDR_VAR 0 12
26225: PUSH
26226: LD_VAR 0 2
26230: PPUSH
26231: LD_VAR 0 3
26235: PPUSH
26236: LD_VAR 0 4
26240: PPUSH
26241: LD_VAR 0 5
26245: PPUSH
26246: LD_VAR 0 1
26250: PUSH
26251: LD_INT 1
26253: ARRAY
26254: PPUSH
26255: CALL_OW 248
26259: PPUSH
26260: LD_INT 0
26262: PPUSH
26263: CALL 27564 0 6
26267: ST_TO_ADDR
// if not hexes then
26268: LD_VAR 0 12
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26735
// for i = 1 to hexes do
26277: LD_ADDR_VAR 0 7
26281: PUSH
26282: DOUBLE
26283: LD_INT 1
26285: DEC
26286: ST_TO_ADDR
26287: LD_VAR 0 12
26291: PUSH
26292: FOR_TO
26293: IFFALSE 26733
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26295: LD_ADDR_VAR 0 11
26299: PUSH
26300: LD_VAR 0 12
26304: PUSH
26305: LD_VAR 0 7
26309: ARRAY
26310: PUSH
26311: LD_INT 1
26313: ARRAY
26314: PPUSH
26315: LD_VAR 0 12
26319: PUSH
26320: LD_VAR 0 7
26324: ARRAY
26325: PUSH
26326: LD_INT 2
26328: ARRAY
26329: PPUSH
26330: CALL_OW 428
26334: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
26335: LD_VAR 0 11
26339: NOT
26340: PUSH
26341: LD_VAR 0 11
26345: PPUSH
26346: CALL_OW 247
26350: PUSH
26351: LD_INT 3
26353: EQUAL
26354: OR
26355: IFFALSE 26359
// continue ;
26357: GO 26292
// result := true ;
26359: LD_ADDR_VAR 0 6
26363: PUSH
26364: LD_INT 1
26366: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26367: LD_ADDR_VAR 0 15
26371: PUSH
26372: LD_INT 22
26374: PUSH
26375: LD_VAR 0 11
26379: PPUSH
26380: CALL_OW 255
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: LD_INT 30
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 30
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PPUSH
26421: CALL_OW 69
26425: ST_TO_ADDR
// if dep then
26426: LD_VAR 0 15
26430: IFFALSE 26566
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26432: LD_ADDR_VAR 0 14
26436: PUSH
26437: LD_VAR 0 15
26441: PUSH
26442: LD_INT 1
26444: ARRAY
26445: PPUSH
26446: CALL_OW 250
26450: PPUSH
26451: LD_VAR 0 15
26455: PUSH
26456: LD_INT 1
26458: ARRAY
26459: PPUSH
26460: CALL_OW 254
26464: PPUSH
26465: LD_INT 5
26467: PPUSH
26468: CALL_OW 272
26472: PUSH
26473: LD_VAR 0 15
26477: PUSH
26478: LD_INT 1
26480: ARRAY
26481: PPUSH
26482: CALL_OW 251
26486: PPUSH
26487: LD_VAR 0 15
26491: PUSH
26492: LD_INT 1
26494: ARRAY
26495: PPUSH
26496: CALL_OW 254
26500: PPUSH
26501: LD_INT 5
26503: PPUSH
26504: CALL_OW 273
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26513: LD_VAR 0 14
26517: PUSH
26518: LD_INT 1
26520: ARRAY
26521: PPUSH
26522: LD_VAR 0 14
26526: PUSH
26527: LD_INT 2
26529: ARRAY
26530: PPUSH
26531: CALL_OW 488
26535: IFFALSE 26566
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26537: LD_VAR 0 11
26541: PPUSH
26542: LD_VAR 0 14
26546: PUSH
26547: LD_INT 1
26549: ARRAY
26550: PPUSH
26551: LD_VAR 0 14
26555: PUSH
26556: LD_INT 2
26558: ARRAY
26559: PPUSH
26560: CALL_OW 111
// continue ;
26564: GO 26292
// end ; end ; r := GetDir ( tmp ) ;
26566: LD_ADDR_VAR 0 13
26570: PUSH
26571: LD_VAR 0 11
26575: PPUSH
26576: CALL_OW 254
26580: ST_TO_ADDR
// if r = 5 then
26581: LD_VAR 0 13
26585: PUSH
26586: LD_INT 5
26588: EQUAL
26589: IFFALSE 26599
// r := 0 ;
26591: LD_ADDR_VAR 0 13
26595: PUSH
26596: LD_INT 0
26598: ST_TO_ADDR
// for j = r to 5 do
26599: LD_ADDR_VAR 0 8
26603: PUSH
26604: DOUBLE
26605: LD_VAR 0 13
26609: DEC
26610: ST_TO_ADDR
26611: LD_INT 5
26613: PUSH
26614: FOR_TO
26615: IFFALSE 26729
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26617: LD_ADDR_VAR 0 9
26621: PUSH
26622: LD_VAR 0 11
26626: PPUSH
26627: CALL_OW 250
26631: PPUSH
26632: LD_VAR 0 8
26636: PPUSH
26637: LD_INT 2
26639: PPUSH
26640: CALL_OW 272
26644: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26645: LD_ADDR_VAR 0 10
26649: PUSH
26650: LD_VAR 0 11
26654: PPUSH
26655: CALL_OW 251
26659: PPUSH
26660: LD_VAR 0 8
26664: PPUSH
26665: LD_INT 2
26667: PPUSH
26668: CALL_OW 273
26672: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26673: LD_VAR 0 9
26677: PPUSH
26678: LD_VAR 0 10
26682: PPUSH
26683: CALL_OW 488
26687: PUSH
26688: LD_VAR 0 9
26692: PPUSH
26693: LD_VAR 0 10
26697: PPUSH
26698: CALL_OW 428
26702: NOT
26703: AND
26704: IFFALSE 26727
// begin ComMoveXY ( tmp , _x , _y ) ;
26706: LD_VAR 0 11
26710: PPUSH
26711: LD_VAR 0 9
26715: PPUSH
26716: LD_VAR 0 10
26720: PPUSH
26721: CALL_OW 111
// break ;
26725: GO 26729
// end ; end ;
26727: GO 26614
26729: POP
26730: POP
// end ;
26731: GO 26292
26733: POP
26734: POP
// end ;
26735: LD_VAR 0 6
26739: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
26740: LD_INT 0
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
// result := false ;
26751: LD_ADDR_VAR 0 6
26755: PUSH
26756: LD_INT 0
26758: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26759: LD_VAR 0 1
26763: NOT
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 266
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: IN
26785: NOT
26786: OR
26787: PUSH
26788: LD_VAR 0 2
26792: NOT
26793: OR
26794: PUSH
26795: LD_VAR 0 5
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: LD_INT 3
26811: PUSH
26812: LD_INT 4
26814: PUSH
26815: LD_INT 5
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: IN
26826: NOT
26827: OR
26828: PUSH
26829: LD_VAR 0 3
26833: PPUSH
26834: LD_VAR 0 4
26838: PPUSH
26839: CALL_OW 488
26843: NOT
26844: OR
26845: IFFALSE 26849
// exit ;
26847: GO 27559
// pom := GetBase ( bdepot ) ;
26849: LD_ADDR_VAR 0 9
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 274
26863: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
26864: LD_ADDR_VAR 0 10
26868: PUSH
26869: LD_VAR 0 2
26873: PPUSH
26874: LD_VAR 0 1
26878: PPUSH
26879: CALL_OW 248
26883: PPUSH
26884: CALL_OW 450
26888: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26889: LD_VAR 0 9
26893: PPUSH
26894: LD_INT 1
26896: PPUSH
26897: CALL_OW 275
26901: PUSH
26902: LD_VAR 0 10
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: GREATEREQUAL
26911: PUSH
26912: LD_VAR 0 9
26916: PPUSH
26917: LD_INT 2
26919: PPUSH
26920: CALL_OW 275
26924: PUSH
26925: LD_VAR 0 10
26929: PUSH
26930: LD_INT 2
26932: ARRAY
26933: GREATEREQUAL
26934: AND
26935: PUSH
26936: LD_VAR 0 9
26940: PPUSH
26941: LD_INT 3
26943: PPUSH
26944: CALL_OW 275
26948: PUSH
26949: LD_VAR 0 10
26953: PUSH
26954: LD_INT 3
26956: ARRAY
26957: GREATEREQUAL
26958: AND
26959: NOT
26960: IFFALSE 26964
// exit ;
26962: GO 27559
// if GetBType ( bdepot ) = b_depot then
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL_OW 266
26973: PUSH
26974: LD_INT 0
26976: EQUAL
26977: IFFALSE 26989
// dist := 28 else
26979: LD_ADDR_VAR 0 13
26983: PUSH
26984: LD_INT 28
26986: ST_TO_ADDR
26987: GO 26997
// dist := 36 ;
26989: LD_ADDR_VAR 0 13
26993: PUSH
26994: LD_INT 36
26996: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
26997: LD_VAR 0 1
27001: PPUSH
27002: LD_VAR 0 3
27006: PPUSH
27007: LD_VAR 0 4
27011: PPUSH
27012: CALL_OW 297
27016: PUSH
27017: LD_VAR 0 13
27021: GREATER
27022: IFFALSE 27026
// exit ;
27024: GO 27559
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
27026: LD_ADDR_VAR 0 11
27030: PUSH
27031: LD_VAR 0 2
27035: PPUSH
27036: LD_VAR 0 3
27040: PPUSH
27041: LD_VAR 0 4
27045: PPUSH
27046: LD_VAR 0 5
27050: PPUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 248
27060: PPUSH
27061: LD_INT 0
27063: PPUSH
27064: CALL 27564 0 6
27068: ST_TO_ADDR
// if not hexes then
27069: LD_VAR 0 11
27073: NOT
27074: IFFALSE 27078
// exit ;
27076: GO 27559
// hex := GetHexInfo ( x , y ) ;
27078: LD_ADDR_VAR 0 14
27082: PUSH
27083: LD_VAR 0 3
27087: PPUSH
27088: LD_VAR 0 4
27092: PPUSH
27093: CALL_OW 546
27097: ST_TO_ADDR
// if hex [ 1 ] then
27098: LD_VAR 0 14
27102: PUSH
27103: LD_INT 1
27105: ARRAY
27106: IFFALSE 27110
// exit ;
27108: GO 27559
// height := hex [ 2 ] ;
27110: LD_ADDR_VAR 0 12
27114: PUSH
27115: LD_VAR 0 14
27119: PUSH
27120: LD_INT 2
27122: ARRAY
27123: ST_TO_ADDR
// for i = 1 to hexes do
27124: LD_ADDR_VAR 0 7
27128: PUSH
27129: DOUBLE
27130: LD_INT 1
27132: DEC
27133: ST_TO_ADDR
27134: LD_VAR 0 11
27138: PUSH
27139: FOR_TO
27140: IFFALSE 27468
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27142: LD_VAR 0 11
27146: PUSH
27147: LD_VAR 0 7
27151: ARRAY
27152: PUSH
27153: LD_INT 1
27155: ARRAY
27156: PPUSH
27157: LD_VAR 0 11
27161: PUSH
27162: LD_VAR 0 7
27166: ARRAY
27167: PUSH
27168: LD_INT 2
27170: ARRAY
27171: PPUSH
27172: CALL_OW 488
27176: NOT
27177: IFFALSE 27181
// continue ;
27179: GO 27139
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27181: LD_ADDR_VAR 0 8
27185: PUSH
27186: LD_VAR 0 11
27190: PUSH
27191: LD_VAR 0 7
27195: ARRAY
27196: PUSH
27197: LD_INT 1
27199: ARRAY
27200: PPUSH
27201: LD_VAR 0 11
27205: PUSH
27206: LD_VAR 0 7
27210: ARRAY
27211: PUSH
27212: LD_INT 2
27214: ARRAY
27215: PPUSH
27216: CALL_OW 546
27220: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27221: LD_VAR 0 8
27225: PUSH
27226: LD_INT 1
27228: ARRAY
27229: PUSH
27230: LD_VAR 0 8
27234: PUSH
27235: LD_INT 2
27237: ARRAY
27238: PUSH
27239: LD_VAR 0 12
27243: PUSH
27244: LD_INT 2
27246: PLUS
27247: GREATER
27248: OR
27249: PUSH
27250: LD_VAR 0 8
27254: PUSH
27255: LD_INT 2
27257: ARRAY
27258: PUSH
27259: LD_VAR 0 12
27263: PUSH
27264: LD_INT 2
27266: MINUS
27267: LESS
27268: OR
27269: PUSH
27270: LD_VAR 0 8
27274: PUSH
27275: LD_INT 3
27277: ARRAY
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 8
27284: PUSH
27285: LD_INT 9
27287: PUSH
27288: LD_INT 10
27290: PUSH
27291: LD_INT 11
27293: PUSH
27294: LD_INT 12
27296: PUSH
27297: LD_INT 13
27299: PUSH
27300: LD_INT 16
27302: PUSH
27303: LD_INT 17
27305: PUSH
27306: LD_INT 18
27308: PUSH
27309: LD_INT 19
27311: PUSH
27312: LD_INT 20
27314: PUSH
27315: LD_INT 21
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: IN
27333: NOT
27334: OR
27335: PUSH
27336: LD_VAR 0 8
27340: PUSH
27341: LD_INT 5
27343: ARRAY
27344: NOT
27345: OR
27346: PUSH
27347: LD_VAR 0 8
27351: PUSH
27352: LD_INT 6
27354: ARRAY
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 7
27364: PUSH
27365: LD_INT 9
27367: PUSH
27368: LD_INT 10
27370: PUSH
27371: LD_INT 11
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: IN
27382: NOT
27383: OR
27384: PUSH
27385: LD_VAR 0 11
27389: PUSH
27390: LD_VAR 0 7
27394: ARRAY
27395: PUSH
27396: LD_INT 1
27398: ARRAY
27399: PPUSH
27400: LD_VAR 0 11
27404: PUSH
27405: LD_VAR 0 7
27409: ARRAY
27410: PUSH
27411: LD_INT 2
27413: ARRAY
27414: PPUSH
27415: CALL_OW 428
27419: PUSH
27420: LD_INT 0
27422: GREATER
27423: OR
27424: PUSH
27425: LD_VAR 0 11
27429: PUSH
27430: LD_VAR 0 7
27434: ARRAY
27435: PUSH
27436: LD_INT 1
27438: ARRAY
27439: PPUSH
27440: LD_VAR 0 11
27444: PUSH
27445: LD_VAR 0 7
27449: ARRAY
27450: PUSH
27451: LD_INT 2
27453: ARRAY
27454: PPUSH
27455: CALL_OW 351
27459: OR
27460: IFFALSE 27466
// exit ;
27462: POP
27463: POP
27464: GO 27559
// end ;
27466: GO 27139
27468: POP
27469: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
27470: LD_VAR 0 1
27474: PPUSH
27475: CALL_OW 255
27479: PPUSH
27480: LD_VAR 0 3
27484: PPUSH
27485: LD_VAR 0 4
27489: PPUSH
27490: LD_INT 20
27492: PPUSH
27493: CALL 20596 0 4
27497: PUSH
27498: LD_INT 4
27500: ARRAY
27501: IFFALSE 27505
// exit ;
27503: GO 27559
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
27505: LD_VAR 0 2
27509: PUSH
27510: LD_INT 29
27512: PUSH
27513: LD_INT 30
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: IN
27520: PUSH
27521: LD_VAR 0 3
27525: PPUSH
27526: LD_VAR 0 4
27530: PPUSH
27531: LD_VAR 0 1
27535: PPUSH
27536: CALL_OW 255
27540: PPUSH
27541: CALL_OW 440
27545: NOT
27546: AND
27547: IFFALSE 27551
// exit ;
27549: GO 27559
// result := true ;
27551: LD_ADDR_VAR 0 6
27555: PUSH
27556: LD_INT 1
27558: ST_TO_ADDR
// end ;
27559: LD_VAR 0 6
27563: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
27568: PPUSH
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
27573: PPUSH
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
27620: PPUSH
27621: PPUSH
27622: PPUSH
27623: PPUSH
// result = [ ] ;
27624: LD_ADDR_VAR 0 7
27628: PUSH
27629: EMPTY
27630: ST_TO_ADDR
// temp_list = [ ] ;
27631: LD_ADDR_VAR 0 9
27635: PUSH
27636: EMPTY
27637: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27638: LD_VAR 0 4
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: LD_INT 2
27651: PUSH
27652: LD_INT 3
27654: PUSH
27655: LD_INT 4
27657: PUSH
27658: LD_INT 5
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: IN
27669: NOT
27670: PUSH
27671: LD_VAR 0 1
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: IN
27686: PUSH
27687: LD_VAR 0 5
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 3
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: IN
27706: NOT
27707: AND
27708: OR
27709: IFFALSE 27713
// exit ;
27711: GO 46098
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27713: LD_VAR 0 1
27717: PUSH
27718: LD_INT 6
27720: PUSH
27721: LD_INT 7
27723: PUSH
27724: LD_INT 8
27726: PUSH
27727: LD_INT 13
27729: PUSH
27730: LD_INT 12
27732: PUSH
27733: LD_INT 15
27735: PUSH
27736: LD_INT 11
27738: PUSH
27739: LD_INT 14
27741: PUSH
27742: LD_INT 10
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: IN
27756: IFFALSE 27766
// btype = b_lab ;
27758: LD_ADDR_VAR 0 1
27762: PUSH
27763: LD_INT 6
27765: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27766: LD_VAR 0 6
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: IN
27785: NOT
27786: PUSH
27787: LD_VAR 0 1
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: LD_INT 6
27806: PUSH
27807: LD_INT 36
27809: PUSH
27810: LD_INT 4
27812: PUSH
27813: LD_INT 5
27815: PUSH
27816: LD_INT 31
27818: PUSH
27819: LD_INT 32
27821: PUSH
27822: LD_INT 33
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: IN
27838: NOT
27839: PUSH
27840: LD_VAR 0 6
27844: PUSH
27845: LD_INT 1
27847: EQUAL
27848: AND
27849: OR
27850: PUSH
27851: LD_VAR 0 1
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: LD_INT 3
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: IN
27866: NOT
27867: PUSH
27868: LD_VAR 0 6
27872: PUSH
27873: LD_INT 2
27875: EQUAL
27876: AND
27877: OR
27878: IFFALSE 27888
// mode = 0 ;
27880: LD_ADDR_VAR 0 6
27884: PUSH
27885: LD_INT 0
27887: ST_TO_ADDR
// case mode of 0 :
27888: LD_VAR 0 6
27892: PUSH
27893: LD_INT 0
27895: DOUBLE
27896: EQUAL
27897: IFTRUE 27901
27899: GO 39354
27901: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27902: LD_ADDR_VAR 0 11
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 2
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 0
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 1
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: LD_INT 3
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28095: LD_ADDR_VAR 0 12
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 0
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: NEG
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 2
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 2
28229: NEG
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 3
28252: NEG
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: NEG
28264: PUSH
28265: LD_INT 1
28267: NEG
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28291: LD_ADDR_VAR 0 13
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 2
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: LD_INT 3
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 3
28450: NEG
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 3
28462: NEG
28463: PUSH
28464: LD_INT 3
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28490: LD_ADDR_VAR 0 14
28494: PUSH
28495: LD_INT 0
28497: PUSH
28498: LD_INT 0
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: NEG
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: LD_INT 3
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28686: LD_ADDR_VAR 0 15
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 0
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 1
28744: NEG
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 2
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 1
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: LD_INT 0
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 2
28820: NEG
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 3
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 3
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28879: LD_ADDR_VAR 0 16
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: LD_INT 1
29006: NEG
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: NEG
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 3
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 3
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29072: LD_ADDR_VAR 0 17
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 2
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: NEG
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: LD_INT 1
29263: NEG
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 2
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29302: LD_ADDR_VAR 0 18
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 2
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29532: LD_ADDR_VAR 0 19
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 1
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 1
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 2
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: LD_INT 2
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: EMPTY
29652: LIST
29653: LIST
29654: PUSH
29655: LD_INT 2
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 0
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 2
29708: NEG
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29762: LD_ADDR_VAR 0 20
29766: PUSH
29767: LD_INT 0
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 2
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29992: LD_ADDR_VAR 0 21
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 0
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 0
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 2
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 2
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: NEG
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30222: LD_ADDR_VAR 0 22
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: LD_INT 0
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: LD_INT 1
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 1
30280: NEG
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 2
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 2
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30452: LD_ADDR_VAR 0 23
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 2
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 2
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: NEG
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: NEG
30664: PUSH
30665: LD_INT 3
30667: NEG
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: NEG
30676: PUSH
30677: LD_INT 3
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 2
30690: NEG
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30732: LD_ADDR_VAR 0 24
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: NEG
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: NEG
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 2
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 2
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 2
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 2
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 2
30908: NEG
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 2
30931: NEG
30932: PUSH
30933: LD_INT 2
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 3
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31008: LD_ADDR_VAR 0 25
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 1
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: LD_INT 2
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 2
31104: NEG
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 0
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: NEG
31208: PUSH
31209: LD_INT 2
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 1
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31282: LD_ADDR_VAR 0 26
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: LD_INT 2
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 2
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 3
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 2
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: NEG
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31558: LD_ADDR_VAR 0 27
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 3
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31838: LD_ADDR_VAR 0 28
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 3
32053: NEG
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: LD_INT 3
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 3
32073: NEG
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: NEG
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32120: LD_ADDR_VAR 0 29
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 2
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: NEG
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 2
32298: NEG
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: LD_INT 3
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 3
32364: NEG
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32399: LD_ADDR_VAR 0 30
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: LD_INT 0
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: NEG
32589: PUSH
32590: LD_INT 3
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 2
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: NEG
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 3
32642: NEG
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32677: LD_ADDR_VAR 0 31
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 1
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: NEG
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 3
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 3
32889: PUSH
32890: LD_INT 1
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 3
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: NEG
32921: PUSH
32922: LD_INT 2
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32955: LD_ADDR_VAR 0 32
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 2
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: NEG
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: LD_INT 3
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 2
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 3
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 3
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 3
33198: NEG
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33233: LD_ADDR_VAR 0 33
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: NEG
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 2
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: LD_INT 3
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: NEG
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33512: LD_ADDR_VAR 0 34
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 2
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 3
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 3
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: LD_INT 3
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33792: LD_ADDR_VAR 0 35
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33904: LD_ADDR_VAR 0 36
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 0
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34016: LD_ADDR_VAR 0 37
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34128: LD_ADDR_VAR 0 38
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: LD_INT 1
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34240: LD_ADDR_VAR 0 39
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34352: LD_ADDR_VAR 0 40
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34464: LD_ADDR_VAR 0 41
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 0
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: LD_INT 2
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 2
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: LD_INT 3
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 3
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 3
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 3
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 3
34707: PUSH
34708: LD_INT 3
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: PUSH
34718: LD_INT 3
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: NEG
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 3
34738: NEG
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 3
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 3
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: NEG
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34814: LD_ADDR_VAR 0 42
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 2
34980: NEG
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: LD_INT 2
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: LD_INT 3
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 3
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 3
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 3
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 3
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: LD_INT 3
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 3
35123: NEG
35124: PUSH
35125: LD_INT 3
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35164: LD_ADDR_VAR 0 43
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 1
35222: NEG
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: LD_INT 2
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 1
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 0
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: NEG
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 3
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 2
35379: NEG
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 3
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 2
35449: NEG
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 3
35460: NEG
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 3
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35512: LD_ADDR_VAR 0 44
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: LD_INT 3
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 3
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 2
35775: NEG
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 3
35786: NEG
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 3
35797: NEG
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 3
35809: NEG
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: LD_INT 3
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35862: LD_ADDR_VAR 0 45
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 2
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 2
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: LD_INT 2
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: LD_INT 2
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 2
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: LD_INT 2
36044: NEG
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 2
36052: NEG
36053: PUSH
36054: LD_INT 3
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 3
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 3
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: LD_INT 2
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: LD_INT 3
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: LD_INT 3
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: LD_INT 3
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 3
36159: NEG
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 3
36171: NEG
36172: PUSH
36173: LD_INT 3
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36212: LD_ADDR_VAR 0 46
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: NEG
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 2
36378: NEG
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: NEG
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 3
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 3
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: LD_INT 3
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 3
36508: NEG
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36560: LD_ADDR_VAR 0 47
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 1
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36711: LD_ADDR_VAR 0 48
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: LD_INT 1
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 1
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 2
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36858: LD_ADDR_VAR 0 49
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 1
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37002: LD_ADDR_VAR 0 50
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37146: LD_ADDR_VAR 0 51
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 2
37269: NEG
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37293: LD_ADDR_VAR 0 52
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37444: LD_ADDR_VAR 0 53
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 2
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37674: LD_ADDR_VAR 0 54
37678: PUSH
37679: LD_INT 0
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37904: LD_ADDR_VAR 0 55
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: LD_INT 2
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: NEG
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38134: LD_ADDR_VAR 0 56
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 2
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 2
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: NEG
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: NEG
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38364: LD_ADDR_VAR 0 57
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 1
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 2
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: NEG
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38594: LD_ADDR_VAR 0 58
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: NEG
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 2
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38824: LD_ADDR_VAR 0 59
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38912: LD_ADDR_VAR 0 60
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39000: LD_ADDR_VAR 0 61
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39088: LD_ADDR_VAR 0 62
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 1
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39176: LD_ADDR_VAR 0 63
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39264: LD_ADDR_VAR 0 64
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: ST_TO_ADDR
// end ; 1 :
39352: GO 45249
39354: LD_INT 1
39356: DOUBLE
39357: EQUAL
39358: IFTRUE 39362
39360: GO 41985
39362: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39363: LD_ADDR_VAR 0 11
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 3
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 3
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39407: LD_ADDR_VAR 0 12
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39448: LD_ADDR_VAR 0 13
39452: PUSH
39453: LD_INT 3
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39488: LD_ADDR_VAR 0 14
39492: PUSH
39493: LD_INT 1
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 2
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39529: LD_ADDR_VAR 0 15
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 3
39547: NEG
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 3
39558: NEG
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39573: LD_ADDR_VAR 0 16
39577: PUSH
39578: LD_INT 2
39580: NEG
39581: PUSH
39582: LD_INT 3
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 3
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39619: LD_ADDR_VAR 0 17
39623: PUSH
39624: LD_INT 1
39626: NEG
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 3
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39663: LD_ADDR_VAR 0 18
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39704: LD_ADDR_VAR 0 19
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 3
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 3
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39744: LD_ADDR_VAR 0 20
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39785: LD_ADDR_VAR 0 21
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: NEG
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39829: LD_ADDR_VAR 0 22
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: LD_INT 3
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 3
39848: NEG
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 3
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39875: LD_ADDR_VAR 0 23
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 4
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39919: LD_ADDR_VAR 0 24
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 3
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 4
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39960: LD_ADDR_VAR 0 25
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 4
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: LD_INT 4
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40000: LD_ADDR_VAR 0 26
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 4
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: NEG
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40041: LD_ADDR_VAR 0 27
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 4
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40085: LD_ADDR_VAR 0 28
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 4
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 4
40116: NEG
40117: PUSH
40118: LD_INT 3
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40131: LD_ADDR_VAR 0 29
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 3
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 3
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 4
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 4
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 3
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 5
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 5
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 4
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 6
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 6
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 5
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40286: LD_ADDR_VAR 0 30
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 3
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 4
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 4
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 4
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 5
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 5
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 5
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 6
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 6
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40429: LD_ADDR_VAR 0 31
40433: PUSH
40434: LD_INT 3
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 4
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 4
40476: PUSH
40477: LD_INT 4
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 3
40486: PUSH
40487: LD_INT 4
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 5
40496: PUSH
40497: LD_INT 4
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 5
40506: PUSH
40507: LD_INT 5
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 4
40516: PUSH
40517: LD_INT 5
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 6
40526: PUSH
40527: LD_INT 5
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 6
40536: PUSH
40537: LD_INT 6
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 5
40546: PUSH
40547: LD_INT 6
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40568: LD_ADDR_VAR 0 32
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 4
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 4
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: LD_INT 5
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 5
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 4
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 6
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 6
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 5
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40711: LD_ADDR_VAR 0 33
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 3
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 4
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 4
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 4
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 5
40797: NEG
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 5
40808: NEG
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 5
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 6
40831: NEG
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 6
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40866: LD_ADDR_VAR 0 34
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 3
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 3
40885: NEG
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: LD_INT 4
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 4
40921: NEG
40922: PUSH
40923: LD_INT 3
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 4
40933: NEG
40934: PUSH
40935: LD_INT 4
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 4
40945: NEG
40946: PUSH
40947: LD_INT 5
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 5
40957: NEG
40958: PUSH
40959: LD_INT 4
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 5
40969: NEG
40970: PUSH
40971: LD_INT 5
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 5
40981: NEG
40982: PUSH
40983: LD_INT 6
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 6
40993: NEG
40994: PUSH
40995: LD_INT 5
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 6
41005: NEG
41006: PUSH
41007: LD_INT 6
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41029: LD_ADDR_VAR 0 41
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 2
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41073: LD_ADDR_VAR 0 42
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41114: LD_ADDR_VAR 0 43
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: LD_INT 3
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41154: LD_ADDR_VAR 0 44
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 3
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41195: LD_ADDR_VAR 0 45
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 3
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41239: LD_ADDR_VAR 0 46
41243: PUSH
41244: LD_INT 2
41246: NEG
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: LD_INT 3
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 3
41270: NEG
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41285: LD_ADDR_VAR 0 47
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 3
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41318: LD_ADDR_VAR 0 48
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41349: LD_ADDR_VAR 0 49
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41378: LD_ADDR_VAR 0 50
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41407: LD_ADDR_VAR 0 51
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41438: LD_ADDR_VAR 0 52
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: NEG
41458: PUSH
41459: LD_INT 2
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41471: LD_ADDR_VAR 0 53
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: LIST
41514: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41515: LD_ADDR_VAR 0 54
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 3
41543: PUSH
41544: LD_INT 1
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41556: LD_ADDR_VAR 0 55
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 3
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41596: LD_ADDR_VAR 0 56
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41637: LD_ADDR_VAR 0 57
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 3
41655: NEG
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41681: LD_ADDR_VAR 0 58
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 3
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 3
41712: NEG
41713: PUSH
41714: LD_INT 3
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41727: LD_ADDR_VAR 0 59
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: LD_INT 2
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: LIST
41770: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41771: LD_ADDR_VAR 0 60
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: LD_INT 1
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: LIST
41811: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41812: LD_ADDR_VAR 0 61
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41852: LD_ADDR_VAR 0 62
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41893: LD_ADDR_VAR 0 63
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41937: LD_ADDR_VAR 0 64
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: ST_TO_ADDR
// end ; 2 :
41983: GO 45249
41985: LD_INT 2
41987: DOUBLE
41988: EQUAL
41989: IFTRUE 41993
41991: GO 45248
41993: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41994: LD_ADDR_VAR 0 29
41998: PUSH
41999: LD_INT 4
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 4
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 5
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 5
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 4
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 5
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 4
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 4
42124: PUSH
42125: LD_INT 4
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 4
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: LD_INT 3
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 4
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 4
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 5
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 5
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 4
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 3
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 5
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 3
42277: NEG
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 3
42288: NEG
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 4
42333: NEG
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 4
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 4
42356: NEG
42357: PUSH
42358: LD_INT 2
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 4
42379: NEG
42380: PUSH
42381: LD_INT 4
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 4
42391: NEG
42392: PUSH
42393: LD_INT 5
42395: NEG
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: LD_INT 4
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: LD_INT 3
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 4
42427: NEG
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 5
42439: NEG
42440: PUSH
42441: LD_INT 4
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 5
42451: NEG
42452: PUSH
42453: LD_INT 5
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 3
42463: NEG
42464: PUSH
42465: LD_INT 5
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: NEG
42476: PUSH
42477: LD_INT 3
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42532: LD_ADDR_VAR 0 30
42536: PUSH
42537: LD_INT 4
42539: PUSH
42540: LD_INT 4
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 4
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 5
42559: PUSH
42560: LD_INT 4
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 5
42569: PUSH
42570: LD_INT 5
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 5
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: LD_INT 4
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 5
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 3
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 4
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 4
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 3
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: PUSH
42702: LD_INT 4
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 4
42722: NEG
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 4
42733: NEG
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 3
42745: NEG
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 3
42756: NEG
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 4
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 5
42778: NEG
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 5
42789: NEG
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 5
42801: NEG
42802: PUSH
42803: LD_INT 2
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 3
42824: NEG
42825: PUSH
42826: LD_INT 3
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 4
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 3
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 3
42872: NEG
42873: PUSH
42874: LD_INT 2
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 4
42884: NEG
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 4
42896: NEG
42897: PUSH
42898: LD_INT 4
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 4
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 4
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 4
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 5
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 4
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 3
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 3
42979: NEG
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: LD_INT 4
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: LD_INT 5
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: LD_INT 5
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43079: LD_ADDR_VAR 0 31
43083: PUSH
43084: LD_INT 0
43086: PUSH
43087: LD_INT 4
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: LD_INT 4
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 5
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 5
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 4
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 5
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 2
43168: NEG
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 3
43179: NEG
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 3
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 4
43235: NEG
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 4
43246: NEG
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 4
43258: NEG
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 4
43281: NEG
43282: PUSH
43283: LD_INT 4
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 4
43293: NEG
43294: PUSH
43295: LD_INT 5
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 3
43305: NEG
43306: PUSH
43307: LD_INT 4
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 3
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 4
43329: NEG
43330: PUSH
43331: LD_INT 3
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 5
43341: NEG
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 5
43353: NEG
43354: PUSH
43355: LD_INT 5
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 3
43365: NEG
43366: PUSH
43367: LD_INT 5
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 5
43377: NEG
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 3
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 4
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 2
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: NEG
43445: PUSH
43446: LD_INT 3
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: LD_INT 4
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 4
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 4
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 5
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 5
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 4
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 3
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: LD_INT 2
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 5
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43629: LD_ADDR_VAR 0 32
43633: PUSH
43634: LD_INT 4
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 4
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 3
43670: NEG
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 4
43681: NEG
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 5
43692: NEG
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 5
43703: NEG
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 5
43715: NEG
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 3
43738: NEG
43739: PUSH
43740: LD_INT 3
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: LD_INT 4
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: LD_INT 3
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 3
43786: NEG
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 4
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 4
43810: NEG
43811: PUSH
43812: LD_INT 4
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 4
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 4
43834: NEG
43835: PUSH
43836: LD_INT 2
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 4
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 5
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 4
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 3
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 3
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 4
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 5
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 3
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 5
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 4
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 3
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 4
44041: PUSH
44042: LD_INT 4
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 5
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 5
44071: PUSH
44072: LD_INT 5
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 4
44081: PUSH
44082: LD_INT 5
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 5
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44176: LD_ADDR_VAR 0 33
44180: PUSH
44181: LD_INT 4
44183: NEG
44184: PUSH
44185: LD_INT 4
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 4
44195: NEG
44196: PUSH
44197: LD_INT 5
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: LD_INT 4
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: NEG
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 5
44243: NEG
44244: PUSH
44245: LD_INT 4
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 5
44255: NEG
44256: PUSH
44257: LD_INT 5
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 5
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 5
44279: NEG
44280: PUSH
44281: LD_INT 3
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: LD_INT 4
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 4
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 4
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 4
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 4
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 5
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 5
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 4
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 3
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 5
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: LD_INT 3
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 4
44506: PUSH
44507: LD_INT 3
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 4
44516: PUSH
44517: LD_INT 4
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: PUSH
44527: LD_INT 4
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 3
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 4
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 4
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: LD_INT 4
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 5
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 5
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 4
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: LD_INT 5
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 2
44658: NEG
44659: PUSH
44660: LD_INT 3
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44714: LD_ADDR_VAR 0 34
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 4
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 5
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: LD_INT 4
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 3
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 4
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: NEG
44789: PUSH
44790: LD_INT 5
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 5
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 3
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 4
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 4
44854: PUSH
44855: LD_INT 1
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 4
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 4
44916: PUSH
44917: LD_INT 4
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 4
44926: PUSH
44927: LD_INT 3
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 5
44936: PUSH
44937: LD_INT 4
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 5
44946: PUSH
44947: LD_INT 5
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 4
44956: PUSH
44957: LD_INT 5
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: LD_INT 4
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 5
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 5
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 4
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 4
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 4
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: NEG
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 4
45099: NEG
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 4
45110: NEG
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 3
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 4
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 5
45155: NEG
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 5
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 5
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 3
45190: NEG
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: ST_TO_ADDR
// end ; end ;
45246: GO 45249
45248: POP
// case btype of b_depot , b_warehouse :
45249: LD_VAR 0 1
45253: PUSH
45254: LD_INT 0
45256: DOUBLE
45257: EQUAL
45258: IFTRUE 45268
45260: LD_INT 1
45262: DOUBLE
45263: EQUAL
45264: IFTRUE 45268
45266: GO 45469
45268: POP
// case nation of nation_american :
45269: LD_VAR 0 5
45273: PUSH
45274: LD_INT 1
45276: DOUBLE
45277: EQUAL
45278: IFTRUE 45282
45280: GO 45338
45282: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
45283: LD_ADDR_VAR 0 9
45287: PUSH
45288: LD_VAR 0 11
45292: PUSH
45293: LD_VAR 0 12
45297: PUSH
45298: LD_VAR 0 13
45302: PUSH
45303: LD_VAR 0 14
45307: PUSH
45308: LD_VAR 0 15
45312: PUSH
45313: LD_VAR 0 16
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: LD_VAR 0 4
45330: PUSH
45331: LD_INT 1
45333: PLUS
45334: ARRAY
45335: ST_TO_ADDR
45336: GO 45467
45338: LD_INT 2
45340: DOUBLE
45341: EQUAL
45342: IFTRUE 45346
45344: GO 45402
45346: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
45347: LD_ADDR_VAR 0 9
45351: PUSH
45352: LD_VAR 0 17
45356: PUSH
45357: LD_VAR 0 18
45361: PUSH
45362: LD_VAR 0 19
45366: PUSH
45367: LD_VAR 0 20
45371: PUSH
45372: LD_VAR 0 21
45376: PUSH
45377: LD_VAR 0 22
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: PUSH
45390: LD_VAR 0 4
45394: PUSH
45395: LD_INT 1
45397: PLUS
45398: ARRAY
45399: ST_TO_ADDR
45400: GO 45467
45402: LD_INT 3
45404: DOUBLE
45405: EQUAL
45406: IFTRUE 45410
45408: GO 45466
45410: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45411: LD_ADDR_VAR 0 9
45415: PUSH
45416: LD_VAR 0 23
45420: PUSH
45421: LD_VAR 0 24
45425: PUSH
45426: LD_VAR 0 25
45430: PUSH
45431: LD_VAR 0 26
45435: PUSH
45436: LD_VAR 0 27
45440: PUSH
45441: LD_VAR 0 28
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: PUSH
45454: LD_VAR 0 4
45458: PUSH
45459: LD_INT 1
45461: PLUS
45462: ARRAY
45463: ST_TO_ADDR
45464: GO 45467
45466: POP
45467: GO 46016
45469: LD_INT 2
45471: DOUBLE
45472: EQUAL
45473: IFTRUE 45483
45475: LD_INT 3
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45483
45481: GO 45539
45483: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45484: LD_ADDR_VAR 0 9
45488: PUSH
45489: LD_VAR 0 29
45493: PUSH
45494: LD_VAR 0 30
45498: PUSH
45499: LD_VAR 0 31
45503: PUSH
45504: LD_VAR 0 32
45508: PUSH
45509: LD_VAR 0 33
45513: PUSH
45514: LD_VAR 0 34
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: PUSH
45527: LD_VAR 0 4
45531: PUSH
45532: LD_INT 1
45534: PLUS
45535: ARRAY
45536: ST_TO_ADDR
45537: GO 46016
45539: LD_INT 16
45541: DOUBLE
45542: EQUAL
45543: IFTRUE 45595
45545: LD_INT 17
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45595
45551: LD_INT 18
45553: DOUBLE
45554: EQUAL
45555: IFTRUE 45595
45557: LD_INT 19
45559: DOUBLE
45560: EQUAL
45561: IFTRUE 45595
45563: LD_INT 20
45565: DOUBLE
45566: EQUAL
45567: IFTRUE 45595
45569: LD_INT 21
45571: DOUBLE
45572: EQUAL
45573: IFTRUE 45595
45575: LD_INT 23
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45595
45581: LD_INT 24
45583: DOUBLE
45584: EQUAL
45585: IFTRUE 45595
45587: LD_INT 25
45589: DOUBLE
45590: EQUAL
45591: IFTRUE 45595
45593: GO 45651
45595: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45596: LD_ADDR_VAR 0 9
45600: PUSH
45601: LD_VAR 0 35
45605: PUSH
45606: LD_VAR 0 36
45610: PUSH
45611: LD_VAR 0 37
45615: PUSH
45616: LD_VAR 0 38
45620: PUSH
45621: LD_VAR 0 39
45625: PUSH
45626: LD_VAR 0 40
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: PUSH
45639: LD_VAR 0 4
45643: PUSH
45644: LD_INT 1
45646: PLUS
45647: ARRAY
45648: ST_TO_ADDR
45649: GO 46016
45651: LD_INT 6
45653: DOUBLE
45654: EQUAL
45655: IFTRUE 45707
45657: LD_INT 7
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45707
45663: LD_INT 8
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45707
45669: LD_INT 13
45671: DOUBLE
45672: EQUAL
45673: IFTRUE 45707
45675: LD_INT 12
45677: DOUBLE
45678: EQUAL
45679: IFTRUE 45707
45681: LD_INT 15
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45707
45687: LD_INT 11
45689: DOUBLE
45690: EQUAL
45691: IFTRUE 45707
45693: LD_INT 14
45695: DOUBLE
45696: EQUAL
45697: IFTRUE 45707
45699: LD_INT 10
45701: DOUBLE
45702: EQUAL
45703: IFTRUE 45707
45705: GO 45763
45707: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
45708: LD_ADDR_VAR 0 9
45712: PUSH
45713: LD_VAR 0 41
45717: PUSH
45718: LD_VAR 0 42
45722: PUSH
45723: LD_VAR 0 43
45727: PUSH
45728: LD_VAR 0 44
45732: PUSH
45733: LD_VAR 0 45
45737: PUSH
45738: LD_VAR 0 46
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: PUSH
45751: LD_VAR 0 4
45755: PUSH
45756: LD_INT 1
45758: PLUS
45759: ARRAY
45760: ST_TO_ADDR
45761: GO 46016
45763: LD_INT 36
45765: DOUBLE
45766: EQUAL
45767: IFTRUE 45771
45769: GO 45827
45771: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45772: LD_ADDR_VAR 0 9
45776: PUSH
45777: LD_VAR 0 47
45781: PUSH
45782: LD_VAR 0 48
45786: PUSH
45787: LD_VAR 0 49
45791: PUSH
45792: LD_VAR 0 50
45796: PUSH
45797: LD_VAR 0 51
45801: PUSH
45802: LD_VAR 0 52
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: PUSH
45815: LD_VAR 0 4
45819: PUSH
45820: LD_INT 1
45822: PLUS
45823: ARRAY
45824: ST_TO_ADDR
45825: GO 46016
45827: LD_INT 4
45829: DOUBLE
45830: EQUAL
45831: IFTRUE 45853
45833: LD_INT 5
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45853
45839: LD_INT 34
45841: DOUBLE
45842: EQUAL
45843: IFTRUE 45853
45845: LD_INT 37
45847: DOUBLE
45848: EQUAL
45849: IFTRUE 45853
45851: GO 45909
45853: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45854: LD_ADDR_VAR 0 9
45858: PUSH
45859: LD_VAR 0 53
45863: PUSH
45864: LD_VAR 0 54
45868: PUSH
45869: LD_VAR 0 55
45873: PUSH
45874: LD_VAR 0 56
45878: PUSH
45879: LD_VAR 0 57
45883: PUSH
45884: LD_VAR 0 58
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: PUSH
45897: LD_VAR 0 4
45901: PUSH
45902: LD_INT 1
45904: PLUS
45905: ARRAY
45906: ST_TO_ADDR
45907: GO 46016
45909: LD_INT 31
45911: DOUBLE
45912: EQUAL
45913: IFTRUE 45959
45915: LD_INT 32
45917: DOUBLE
45918: EQUAL
45919: IFTRUE 45959
45921: LD_INT 33
45923: DOUBLE
45924: EQUAL
45925: IFTRUE 45959
45927: LD_INT 27
45929: DOUBLE
45930: EQUAL
45931: IFTRUE 45959
45933: LD_INT 26
45935: DOUBLE
45936: EQUAL
45937: IFTRUE 45959
45939: LD_INT 28
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45959
45945: LD_INT 29
45947: DOUBLE
45948: EQUAL
45949: IFTRUE 45959
45951: LD_INT 30
45953: DOUBLE
45954: EQUAL
45955: IFTRUE 45959
45957: GO 46015
45959: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45960: LD_ADDR_VAR 0 9
45964: PUSH
45965: LD_VAR 0 59
45969: PUSH
45970: LD_VAR 0 60
45974: PUSH
45975: LD_VAR 0 61
45979: PUSH
45980: LD_VAR 0 62
45984: PUSH
45985: LD_VAR 0 63
45989: PUSH
45990: LD_VAR 0 64
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: PUSH
46003: LD_VAR 0 4
46007: PUSH
46008: LD_INT 1
46010: PLUS
46011: ARRAY
46012: ST_TO_ADDR
46013: GO 46016
46015: POP
// temp_list2 = [ ] ;
46016: LD_ADDR_VAR 0 10
46020: PUSH
46021: EMPTY
46022: ST_TO_ADDR
// for i in temp_list do
46023: LD_ADDR_VAR 0 8
46027: PUSH
46028: LD_VAR 0 9
46032: PUSH
46033: FOR_IN
46034: IFFALSE 46086
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46036: LD_ADDR_VAR 0 10
46040: PUSH
46041: LD_VAR 0 10
46045: PUSH
46046: LD_VAR 0 8
46050: PUSH
46051: LD_INT 1
46053: ARRAY
46054: PUSH
46055: LD_VAR 0 2
46059: PLUS
46060: PUSH
46061: LD_VAR 0 8
46065: PUSH
46066: LD_INT 2
46068: ARRAY
46069: PUSH
46070: LD_VAR 0 3
46074: PLUS
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: ADD
46083: ST_TO_ADDR
46084: GO 46033
46086: POP
46087: POP
// result = temp_list2 ;
46088: LD_ADDR_VAR 0 7
46092: PUSH
46093: LD_VAR 0 10
46097: ST_TO_ADDR
// end ;
46098: LD_VAR 0 7
46102: RET
// export function EnemyInRange ( unit , dist ) ; begin
46103: LD_INT 0
46105: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46106: LD_ADDR_VAR 0 3
46110: PUSH
46111: LD_VAR 0 1
46115: PPUSH
46116: CALL_OW 255
46120: PPUSH
46121: LD_VAR 0 1
46125: PPUSH
46126: CALL_OW 250
46130: PPUSH
46131: LD_VAR 0 1
46135: PPUSH
46136: CALL_OW 251
46140: PPUSH
46141: LD_VAR 0 2
46145: PPUSH
46146: CALL 20596 0 4
46150: PUSH
46151: LD_INT 4
46153: ARRAY
46154: ST_TO_ADDR
// end ;
46155: LD_VAR 0 3
46159: RET
// export function PlayerSeeMe ( unit ) ; begin
46160: LD_INT 0
46162: PPUSH
// result := See ( your_side , unit ) ;
46163: LD_ADDR_VAR 0 2
46167: PUSH
46168: LD_OWVAR 2
46172: PPUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 292
46182: ST_TO_ADDR
// end ;
46183: LD_VAR 0 2
46187: RET
// export function ReverseDir ( unit ) ; begin
46188: LD_INT 0
46190: PPUSH
// if not unit then
46191: LD_VAR 0 1
46195: NOT
46196: IFFALSE 46200
// exit ;
46198: GO 46246
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
46200: LD_ADDR_VAR 0 2
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: LD_INT 5
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: PUSH
46231: LD_VAR 0 1
46235: PPUSH
46236: CALL_OW 254
46240: PUSH
46241: LD_INT 1
46243: PLUS
46244: ARRAY
46245: ST_TO_ADDR
// end ;
46246: LD_VAR 0 2
46250: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
46251: LD_INT 0
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
// if not hexes then
46258: LD_VAR 0 2
46262: NOT
46263: IFFALSE 46267
// exit ;
46265: GO 46415
// dist := 9999 ;
46267: LD_ADDR_VAR 0 5
46271: PUSH
46272: LD_INT 9999
46274: ST_TO_ADDR
// for i = 1 to hexes do
46275: LD_ADDR_VAR 0 4
46279: PUSH
46280: DOUBLE
46281: LD_INT 1
46283: DEC
46284: ST_TO_ADDR
46285: LD_VAR 0 2
46289: PUSH
46290: FOR_TO
46291: IFFALSE 46403
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
46293: LD_VAR 0 1
46297: PPUSH
46298: LD_VAR 0 2
46302: PUSH
46303: LD_VAR 0 4
46307: ARRAY
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PPUSH
46313: LD_VAR 0 2
46317: PUSH
46318: LD_VAR 0 4
46322: ARRAY
46323: PUSH
46324: LD_INT 2
46326: ARRAY
46327: PPUSH
46328: CALL_OW 297
46332: PUSH
46333: LD_VAR 0 5
46337: LESS
46338: IFFALSE 46401
// begin hex := hexes [ i ] ;
46340: LD_ADDR_VAR 0 7
46344: PUSH
46345: LD_VAR 0 2
46349: PUSH
46350: LD_VAR 0 4
46354: ARRAY
46355: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46356: LD_ADDR_VAR 0 5
46360: PUSH
46361: LD_VAR 0 1
46365: PPUSH
46366: LD_VAR 0 2
46370: PUSH
46371: LD_VAR 0 4
46375: ARRAY
46376: PUSH
46377: LD_INT 1
46379: ARRAY
46380: PPUSH
46381: LD_VAR 0 2
46385: PUSH
46386: LD_VAR 0 4
46390: ARRAY
46391: PUSH
46392: LD_INT 2
46394: ARRAY
46395: PPUSH
46396: CALL_OW 297
46400: ST_TO_ADDR
// end ; end ;
46401: GO 46290
46403: POP
46404: POP
// result := hex ;
46405: LD_ADDR_VAR 0 3
46409: PUSH
46410: LD_VAR 0 7
46414: ST_TO_ADDR
// end ;
46415: LD_VAR 0 3
46419: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46420: LD_INT 0
46422: PPUSH
46423: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46424: LD_VAR 0 1
46428: NOT
46429: PUSH
46430: LD_VAR 0 1
46434: PUSH
46435: LD_INT 21
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 23
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PPUSH
46459: CALL_OW 69
46463: IN
46464: NOT
46465: OR
46466: IFFALSE 46470
// exit ;
46468: GO 46517
// for i = 1 to 3 do
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: DOUBLE
46476: LD_INT 1
46478: DEC
46479: ST_TO_ADDR
46480: LD_INT 3
46482: PUSH
46483: FOR_TO
46484: IFFALSE 46515
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46486: LD_VAR 0 1
46490: PPUSH
46491: CALL_OW 250
46495: PPUSH
46496: LD_VAR 0 1
46500: PPUSH
46501: CALL_OW 251
46505: PPUSH
46506: LD_INT 1
46508: PPUSH
46509: CALL_OW 453
46513: GO 46483
46515: POP
46516: POP
// end ;
46517: LD_VAR 0 2
46521: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46522: LD_INT 0
46524: PPUSH
46525: PPUSH
46526: PPUSH
46527: PPUSH
46528: PPUSH
46529: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
46530: LD_VAR 0 1
46534: NOT
46535: PUSH
46536: LD_VAR 0 2
46540: NOT
46541: OR
46542: PUSH
46543: LD_VAR 0 1
46547: PPUSH
46548: CALL_OW 314
46552: OR
46553: IFFALSE 46557
// exit ;
46555: GO 46998
// x := GetX ( enemy_unit ) ;
46557: LD_ADDR_VAR 0 7
46561: PUSH
46562: LD_VAR 0 2
46566: PPUSH
46567: CALL_OW 250
46571: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46572: LD_ADDR_VAR 0 8
46576: PUSH
46577: LD_VAR 0 2
46581: PPUSH
46582: CALL_OW 251
46586: ST_TO_ADDR
// if not x or not y then
46587: LD_VAR 0 7
46591: NOT
46592: PUSH
46593: LD_VAR 0 8
46597: NOT
46598: OR
46599: IFFALSE 46603
// exit ;
46601: GO 46998
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46603: LD_ADDR_VAR 0 6
46607: PUSH
46608: LD_VAR 0 7
46612: PPUSH
46613: LD_INT 0
46615: PPUSH
46616: LD_INT 4
46618: PPUSH
46619: CALL_OW 272
46623: PUSH
46624: LD_VAR 0 8
46628: PPUSH
46629: LD_INT 0
46631: PPUSH
46632: LD_INT 4
46634: PPUSH
46635: CALL_OW 273
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_VAR 0 7
46648: PPUSH
46649: LD_INT 1
46651: PPUSH
46652: LD_INT 4
46654: PPUSH
46655: CALL_OW 272
46659: PUSH
46660: LD_VAR 0 8
46664: PPUSH
46665: LD_INT 1
46667: PPUSH
46668: LD_INT 4
46670: PPUSH
46671: CALL_OW 273
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_VAR 0 7
46684: PPUSH
46685: LD_INT 2
46687: PPUSH
46688: LD_INT 4
46690: PPUSH
46691: CALL_OW 272
46695: PUSH
46696: LD_VAR 0 8
46700: PPUSH
46701: LD_INT 2
46703: PPUSH
46704: LD_INT 4
46706: PPUSH
46707: CALL_OW 273
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_VAR 0 7
46720: PPUSH
46721: LD_INT 3
46723: PPUSH
46724: LD_INT 4
46726: PPUSH
46727: CALL_OW 272
46731: PUSH
46732: LD_VAR 0 8
46736: PPUSH
46737: LD_INT 3
46739: PPUSH
46740: LD_INT 4
46742: PPUSH
46743: CALL_OW 273
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_VAR 0 7
46756: PPUSH
46757: LD_INT 4
46759: PPUSH
46760: LD_INT 4
46762: PPUSH
46763: CALL_OW 272
46767: PUSH
46768: LD_VAR 0 8
46772: PPUSH
46773: LD_INT 4
46775: PPUSH
46776: LD_INT 4
46778: PPUSH
46779: CALL_OW 273
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_VAR 0 7
46792: PPUSH
46793: LD_INT 5
46795: PPUSH
46796: LD_INT 4
46798: PPUSH
46799: CALL_OW 272
46803: PUSH
46804: LD_VAR 0 8
46808: PPUSH
46809: LD_INT 5
46811: PPUSH
46812: LD_INT 4
46814: PPUSH
46815: CALL_OW 273
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: ST_TO_ADDR
// for i = tmp downto 1 do
46832: LD_ADDR_VAR 0 4
46836: PUSH
46837: DOUBLE
46838: LD_VAR 0 6
46842: INC
46843: ST_TO_ADDR
46844: LD_INT 1
46846: PUSH
46847: FOR_DOWNTO
46848: IFFALSE 46949
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46850: LD_VAR 0 6
46854: PUSH
46855: LD_VAR 0 4
46859: ARRAY
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: PPUSH
46865: LD_VAR 0 6
46869: PUSH
46870: LD_VAR 0 4
46874: ARRAY
46875: PUSH
46876: LD_INT 2
46878: ARRAY
46879: PPUSH
46880: CALL_OW 488
46884: NOT
46885: PUSH
46886: LD_VAR 0 6
46890: PUSH
46891: LD_VAR 0 4
46895: ARRAY
46896: PUSH
46897: LD_INT 1
46899: ARRAY
46900: PPUSH
46901: LD_VAR 0 6
46905: PUSH
46906: LD_VAR 0 4
46910: ARRAY
46911: PUSH
46912: LD_INT 2
46914: ARRAY
46915: PPUSH
46916: CALL_OW 428
46920: PUSH
46921: LD_INT 0
46923: NONEQUAL
46924: OR
46925: IFFALSE 46947
// tmp := Delete ( tmp , i ) ;
46927: LD_ADDR_VAR 0 6
46931: PUSH
46932: LD_VAR 0 6
46936: PPUSH
46937: LD_VAR 0 4
46941: PPUSH
46942: CALL_OW 3
46946: ST_TO_ADDR
46947: GO 46847
46949: POP
46950: POP
// j := GetClosestHex ( unit , tmp ) ;
46951: LD_ADDR_VAR 0 5
46955: PUSH
46956: LD_VAR 0 1
46960: PPUSH
46961: LD_VAR 0 6
46965: PPUSH
46966: CALL 46251 0 2
46970: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46971: LD_VAR 0 1
46975: PPUSH
46976: LD_VAR 0 5
46980: PUSH
46981: LD_INT 1
46983: ARRAY
46984: PPUSH
46985: LD_VAR 0 5
46989: PUSH
46990: LD_INT 2
46992: ARRAY
46993: PPUSH
46994: CALL_OW 111
// end ;
46998: LD_VAR 0 3
47002: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47003: LD_INT 0
47005: PPUSH
47006: PPUSH
47007: PPUSH
// uc_side = 0 ;
47008: LD_ADDR_OWVAR 20
47012: PUSH
47013: LD_INT 0
47015: ST_TO_ADDR
// uc_nation = 0 ;
47016: LD_ADDR_OWVAR 21
47020: PUSH
47021: LD_INT 0
47023: ST_TO_ADDR
// InitHc ;
47024: CALL_OW 19
// InitVc ;
47028: CALL_OW 20
// if mastodonts then
47032: LD_VAR 0 6
47036: IFFALSE 47103
// for i = 1 to mastodonts do
47038: LD_ADDR_VAR 0 11
47042: PUSH
47043: DOUBLE
47044: LD_INT 1
47046: DEC
47047: ST_TO_ADDR
47048: LD_VAR 0 6
47052: PUSH
47053: FOR_TO
47054: IFFALSE 47101
// begin vc_chassis := 31 ;
47056: LD_ADDR_OWVAR 37
47060: PUSH
47061: LD_INT 31
47063: ST_TO_ADDR
// vc_control := control_rider ;
47064: LD_ADDR_OWVAR 38
47068: PUSH
47069: LD_INT 4
47071: ST_TO_ADDR
// animal := CreateVehicle ;
47072: LD_ADDR_VAR 0 12
47076: PUSH
47077: CALL_OW 45
47081: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47082: LD_VAR 0 12
47086: PPUSH
47087: LD_VAR 0 8
47091: PPUSH
47092: LD_INT 0
47094: PPUSH
47095: CALL_OW 49
// end ;
47099: GO 47053
47101: POP
47102: POP
// if horses then
47103: LD_VAR 0 5
47107: IFFALSE 47174
// for i = 1 to horses do
47109: LD_ADDR_VAR 0 11
47113: PUSH
47114: DOUBLE
47115: LD_INT 1
47117: DEC
47118: ST_TO_ADDR
47119: LD_VAR 0 5
47123: PUSH
47124: FOR_TO
47125: IFFALSE 47172
// begin hc_class := 21 ;
47127: LD_ADDR_OWVAR 28
47131: PUSH
47132: LD_INT 21
47134: ST_TO_ADDR
// hc_gallery :=  ;
47135: LD_ADDR_OWVAR 33
47139: PUSH
47140: LD_STRING 
47142: ST_TO_ADDR
// animal := CreateHuman ;
47143: LD_ADDR_VAR 0 12
47147: PUSH
47148: CALL_OW 44
47152: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47153: LD_VAR 0 12
47157: PPUSH
47158: LD_VAR 0 8
47162: PPUSH
47163: LD_INT 0
47165: PPUSH
47166: CALL_OW 49
// end ;
47170: GO 47124
47172: POP
47173: POP
// if birds then
47174: LD_VAR 0 1
47178: IFFALSE 47245
// for i = 1 to birds do
47180: LD_ADDR_VAR 0 11
47184: PUSH
47185: DOUBLE
47186: LD_INT 1
47188: DEC
47189: ST_TO_ADDR
47190: LD_VAR 0 1
47194: PUSH
47195: FOR_TO
47196: IFFALSE 47243
// begin hc_class = 18 ;
47198: LD_ADDR_OWVAR 28
47202: PUSH
47203: LD_INT 18
47205: ST_TO_ADDR
// hc_gallery =  ;
47206: LD_ADDR_OWVAR 33
47210: PUSH
47211: LD_STRING 
47213: ST_TO_ADDR
// animal := CreateHuman ;
47214: LD_ADDR_VAR 0 12
47218: PUSH
47219: CALL_OW 44
47223: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47224: LD_VAR 0 12
47228: PPUSH
47229: LD_VAR 0 8
47233: PPUSH
47234: LD_INT 0
47236: PPUSH
47237: CALL_OW 49
// end ;
47241: GO 47195
47243: POP
47244: POP
// if tigers then
47245: LD_VAR 0 2
47249: IFFALSE 47333
// for i = 1 to tigers do
47251: LD_ADDR_VAR 0 11
47255: PUSH
47256: DOUBLE
47257: LD_INT 1
47259: DEC
47260: ST_TO_ADDR
47261: LD_VAR 0 2
47265: PUSH
47266: FOR_TO
47267: IFFALSE 47331
// begin hc_class = class_tiger ;
47269: LD_ADDR_OWVAR 28
47273: PUSH
47274: LD_INT 14
47276: ST_TO_ADDR
// hc_gallery =  ;
47277: LD_ADDR_OWVAR 33
47281: PUSH
47282: LD_STRING 
47284: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47285: LD_ADDR_OWVAR 35
47289: PUSH
47290: LD_INT 7
47292: NEG
47293: PPUSH
47294: LD_INT 7
47296: PPUSH
47297: CALL_OW 12
47301: ST_TO_ADDR
// animal := CreateHuman ;
47302: LD_ADDR_VAR 0 12
47306: PUSH
47307: CALL_OW 44
47311: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47312: LD_VAR 0 12
47316: PPUSH
47317: LD_VAR 0 8
47321: PPUSH
47322: LD_INT 0
47324: PPUSH
47325: CALL_OW 49
// end ;
47329: GO 47266
47331: POP
47332: POP
// if apemans then
47333: LD_VAR 0 3
47337: IFFALSE 47460
// for i = 1 to apemans do
47339: LD_ADDR_VAR 0 11
47343: PUSH
47344: DOUBLE
47345: LD_INT 1
47347: DEC
47348: ST_TO_ADDR
47349: LD_VAR 0 3
47353: PUSH
47354: FOR_TO
47355: IFFALSE 47458
// begin hc_class = class_apeman ;
47357: LD_ADDR_OWVAR 28
47361: PUSH
47362: LD_INT 12
47364: ST_TO_ADDR
// hc_gallery =  ;
47365: LD_ADDR_OWVAR 33
47369: PUSH
47370: LD_STRING 
47372: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
47373: LD_ADDR_OWVAR 35
47377: PUSH
47378: LD_INT 5
47380: NEG
47381: PPUSH
47382: LD_INT 5
47384: PPUSH
47385: CALL_OW 12
47389: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47390: LD_ADDR_OWVAR 31
47394: PUSH
47395: LD_INT 1
47397: PPUSH
47398: LD_INT 3
47400: PPUSH
47401: CALL_OW 12
47405: PUSH
47406: LD_INT 1
47408: PPUSH
47409: LD_INT 3
47411: PPUSH
47412: CALL_OW 12
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: ST_TO_ADDR
// animal := CreateHuman ;
47429: LD_ADDR_VAR 0 12
47433: PUSH
47434: CALL_OW 44
47438: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47439: LD_VAR 0 12
47443: PPUSH
47444: LD_VAR 0 8
47448: PPUSH
47449: LD_INT 0
47451: PPUSH
47452: CALL_OW 49
// end ;
47456: GO 47354
47458: POP
47459: POP
// if enchidnas then
47460: LD_VAR 0 4
47464: IFFALSE 47531
// for i = 1 to enchidnas do
47466: LD_ADDR_VAR 0 11
47470: PUSH
47471: DOUBLE
47472: LD_INT 1
47474: DEC
47475: ST_TO_ADDR
47476: LD_VAR 0 4
47480: PUSH
47481: FOR_TO
47482: IFFALSE 47529
// begin hc_class = 13 ;
47484: LD_ADDR_OWVAR 28
47488: PUSH
47489: LD_INT 13
47491: ST_TO_ADDR
// hc_gallery =  ;
47492: LD_ADDR_OWVAR 33
47496: PUSH
47497: LD_STRING 
47499: ST_TO_ADDR
// animal := CreateHuman ;
47500: LD_ADDR_VAR 0 12
47504: PUSH
47505: CALL_OW 44
47509: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
47510: LD_VAR 0 12
47514: PPUSH
47515: LD_VAR 0 8
47519: PPUSH
47520: LD_INT 0
47522: PPUSH
47523: CALL_OW 49
// end ;
47527: GO 47481
47529: POP
47530: POP
// if not wat_area then
47531: LD_VAR 0 9
47535: NOT
47536: IFFALSE 47540
// exit ;
47538: GO 47611
// if fishes then
47540: LD_VAR 0 7
47544: IFFALSE 47611
// for i = 1 to fishes do
47546: LD_ADDR_VAR 0 11
47550: PUSH
47551: DOUBLE
47552: LD_INT 1
47554: DEC
47555: ST_TO_ADDR
47556: LD_VAR 0 7
47560: PUSH
47561: FOR_TO
47562: IFFALSE 47609
// begin hc_class = 20 ;
47564: LD_ADDR_OWVAR 28
47568: PUSH
47569: LD_INT 20
47571: ST_TO_ADDR
// hc_gallery =  ;
47572: LD_ADDR_OWVAR 33
47576: PUSH
47577: LD_STRING 
47579: ST_TO_ADDR
// animal := CreateHuman ;
47580: LD_ADDR_VAR 0 12
47584: PUSH
47585: CALL_OW 44
47589: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
47590: LD_VAR 0 12
47594: PPUSH
47595: LD_VAR 0 9
47599: PPUSH
47600: LD_INT 0
47602: PPUSH
47603: CALL_OW 49
// end ;
47607: GO 47561
47609: POP
47610: POP
// end ;
47611: LD_VAR 0 10
47615: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
47616: LD_INT 0
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
47622: PPUSH
47623: PPUSH
47624: PPUSH
47625: PPUSH
47626: PPUSH
47627: PPUSH
47628: PPUSH
47629: PPUSH
47630: PPUSH
47631: PPUSH
47632: PPUSH
47633: PPUSH
47634: PPUSH
47635: PPUSH
47636: PPUSH
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
// if not list then
47646: LD_VAR 0 1
47650: NOT
47651: IFFALSE 47655
// exit ;
47653: GO 50952
// base := list [ 1 ] ;
47655: LD_ADDR_VAR 0 3
47659: PUSH
47660: LD_VAR 0 1
47664: PUSH
47665: LD_INT 1
47667: ARRAY
47668: ST_TO_ADDR
// group := list [ 2 ] ;
47669: LD_ADDR_VAR 0 4
47673: PUSH
47674: LD_VAR 0 1
47678: PUSH
47679: LD_INT 2
47681: ARRAY
47682: ST_TO_ADDR
// path := list [ 3 ] ;
47683: LD_ADDR_VAR 0 5
47687: PUSH
47688: LD_VAR 0 1
47692: PUSH
47693: LD_INT 3
47695: ARRAY
47696: ST_TO_ADDR
// flags := list [ 4 ] ;
47697: LD_ADDR_VAR 0 6
47701: PUSH
47702: LD_VAR 0 1
47706: PUSH
47707: LD_INT 4
47709: ARRAY
47710: ST_TO_ADDR
// mined := [ ] ;
47711: LD_ADDR_VAR 0 27
47715: PUSH
47716: EMPTY
47717: ST_TO_ADDR
// bombed := [ ] ;
47718: LD_ADDR_VAR 0 28
47722: PUSH
47723: EMPTY
47724: ST_TO_ADDR
// if not group or not path then
47725: LD_VAR 0 4
47729: NOT
47730: PUSH
47731: LD_VAR 0 5
47735: NOT
47736: OR
47737: IFFALSE 47741
// exit ;
47739: GO 50952
// if flags then
47741: LD_VAR 0 6
47745: IFFALSE 47889
// begin f_ignore_area := flags [ 1 ] ;
47747: LD_ADDR_VAR 0 17
47751: PUSH
47752: LD_VAR 0 6
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
47761: LD_ADDR_VAR 0 18
47765: PUSH
47766: LD_VAR 0 6
47770: PUSH
47771: LD_INT 2
47773: ARRAY
47774: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
47775: LD_ADDR_VAR 0 19
47779: PUSH
47780: LD_VAR 0 6
47784: PUSH
47785: LD_INT 3
47787: ARRAY
47788: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
47789: LD_ADDR_VAR 0 20
47793: PUSH
47794: LD_VAR 0 6
47798: PUSH
47799: LD_INT 4
47801: ARRAY
47802: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
47803: LD_ADDR_VAR 0 21
47807: PUSH
47808: LD_VAR 0 6
47812: PUSH
47813: LD_INT 5
47815: ARRAY
47816: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
47817: LD_ADDR_VAR 0 22
47821: PUSH
47822: LD_VAR 0 6
47826: PUSH
47827: LD_INT 6
47829: ARRAY
47830: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
47831: LD_ADDR_VAR 0 23
47835: PUSH
47836: LD_VAR 0 6
47840: PUSH
47841: LD_INT 7
47843: ARRAY
47844: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
47845: LD_ADDR_VAR 0 24
47849: PUSH
47850: LD_VAR 0 6
47854: PUSH
47855: LD_INT 8
47857: ARRAY
47858: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
47859: LD_ADDR_VAR 0 25
47863: PUSH
47864: LD_VAR 0 6
47868: PUSH
47869: LD_INT 9
47871: ARRAY
47872: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
47873: LD_ADDR_VAR 0 26
47877: PUSH
47878: LD_VAR 0 6
47882: PUSH
47883: LD_INT 10
47885: ARRAY
47886: ST_TO_ADDR
// end else
47887: GO 47969
// begin f_ignore_area := false ;
47889: LD_ADDR_VAR 0 17
47893: PUSH
47894: LD_INT 0
47896: ST_TO_ADDR
// f_capture := false ;
47897: LD_ADDR_VAR 0 18
47901: PUSH
47902: LD_INT 0
47904: ST_TO_ADDR
// f_ignore_civ := false ;
47905: LD_ADDR_VAR 0 19
47909: PUSH
47910: LD_INT 0
47912: ST_TO_ADDR
// f_murder := false ;
47913: LD_ADDR_VAR 0 20
47917: PUSH
47918: LD_INT 0
47920: ST_TO_ADDR
// f_mines := false ;
47921: LD_ADDR_VAR 0 21
47925: PUSH
47926: LD_INT 0
47928: ST_TO_ADDR
// f_repair := false ;
47929: LD_ADDR_VAR 0 22
47933: PUSH
47934: LD_INT 0
47936: ST_TO_ADDR
// f_heal := false ;
47937: LD_ADDR_VAR 0 23
47941: PUSH
47942: LD_INT 0
47944: ST_TO_ADDR
// f_spacetime := false ;
47945: LD_ADDR_VAR 0 24
47949: PUSH
47950: LD_INT 0
47952: ST_TO_ADDR
// f_attack_depot := false ;
47953: LD_ADDR_VAR 0 25
47957: PUSH
47958: LD_INT 0
47960: ST_TO_ADDR
// f_crawl := false ;
47961: LD_ADDR_VAR 0 26
47965: PUSH
47966: LD_INT 0
47968: ST_TO_ADDR
// end ; units_path := [ ] ;
47969: LD_ADDR_VAR 0 16
47973: PUSH
47974: EMPTY
47975: ST_TO_ADDR
// for i = 1 to group do
47976: LD_ADDR_VAR 0 7
47980: PUSH
47981: DOUBLE
47982: LD_INT 1
47984: DEC
47985: ST_TO_ADDR
47986: LD_VAR 0 4
47990: PUSH
47991: FOR_TO
47992: IFFALSE 48021
// begin units_path := Replace ( units_path , i , path ) ;
47994: LD_ADDR_VAR 0 16
47998: PUSH
47999: LD_VAR 0 16
48003: PPUSH
48004: LD_VAR 0 7
48008: PPUSH
48009: LD_VAR 0 5
48013: PPUSH
48014: CALL_OW 1
48018: ST_TO_ADDR
// end ;
48019: GO 47991
48021: POP
48022: POP
// repeat for i = group downto 1 do
48023: LD_ADDR_VAR 0 7
48027: PUSH
48028: DOUBLE
48029: LD_VAR 0 4
48033: INC
48034: ST_TO_ADDR
48035: LD_INT 1
48037: PUSH
48038: FOR_DOWNTO
48039: IFFALSE 50934
// begin wait ( 0 0$1 ) ;
48041: LD_INT 35
48043: PPUSH
48044: CALL_OW 67
// tmp := [ ] ;
48048: LD_ADDR_VAR 0 14
48052: PUSH
48053: EMPTY
48054: ST_TO_ADDR
// attacking := false ;
48055: LD_ADDR_VAR 0 29
48059: PUSH
48060: LD_INT 0
48062: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
48063: LD_VAR 0 4
48067: PUSH
48068: LD_VAR 0 7
48072: ARRAY
48073: PPUSH
48074: CALL_OW 301
48078: PUSH
48079: LD_VAR 0 4
48083: PUSH
48084: LD_VAR 0 7
48088: ARRAY
48089: NOT
48090: OR
48091: IFFALSE 48135
// begin group := Delete ( group , i ) ;
48093: LD_ADDR_VAR 0 4
48097: PUSH
48098: LD_VAR 0 4
48102: PPUSH
48103: LD_VAR 0 7
48107: PPUSH
48108: CALL_OW 3
48112: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
48113: LD_ADDR_VAR 0 16
48117: PUSH
48118: LD_VAR 0 16
48122: PPUSH
48123: LD_VAR 0 7
48127: PPUSH
48128: CALL_OW 3
48132: ST_TO_ADDR
// continue ;
48133: GO 48038
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48135: LD_VAR 0 4
48139: PUSH
48140: LD_VAR 0 7
48144: ARRAY
48145: PPUSH
48146: LD_INT 10
48148: PPUSH
48149: CALL 46103 0 2
48153: NOT
48154: PUSH
48155: LD_VAR 0 16
48159: PUSH
48160: LD_VAR 0 7
48164: ARRAY
48165: PUSH
48166: EMPTY
48167: EQUAL
48168: NOT
48169: AND
48170: IFFALSE 48436
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48172: LD_VAR 0 4
48176: PUSH
48177: LD_VAR 0 7
48181: ARRAY
48182: PPUSH
48183: CALL_OW 262
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: IN
48198: IFFALSE 48239
// if GetFuel ( group [ i ] ) < 10 then
48200: LD_VAR 0 4
48204: PUSH
48205: LD_VAR 0 7
48209: ARRAY
48210: PPUSH
48211: CALL_OW 261
48215: PUSH
48216: LD_INT 10
48218: LESS
48219: IFFALSE 48239
// SetFuel ( group [ i ] , 12 ) ;
48221: LD_VAR 0 4
48225: PUSH
48226: LD_VAR 0 7
48230: ARRAY
48231: PPUSH
48232: LD_INT 12
48234: PPUSH
48235: CALL_OW 240
// if units_path [ i ] then
48239: LD_VAR 0 16
48243: PUSH
48244: LD_VAR 0 7
48248: ARRAY
48249: IFFALSE 48434
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48251: LD_VAR 0 4
48255: PUSH
48256: LD_VAR 0 7
48260: ARRAY
48261: PPUSH
48262: LD_VAR 0 16
48266: PUSH
48267: LD_VAR 0 7
48271: ARRAY
48272: PUSH
48273: LD_INT 1
48275: ARRAY
48276: PUSH
48277: LD_INT 1
48279: ARRAY
48280: PPUSH
48281: LD_VAR 0 16
48285: PUSH
48286: LD_VAR 0 7
48290: ARRAY
48291: PUSH
48292: LD_INT 1
48294: ARRAY
48295: PUSH
48296: LD_INT 2
48298: ARRAY
48299: PPUSH
48300: CALL_OW 297
48304: PUSH
48305: LD_INT 6
48307: GREATER
48308: IFFALSE 48383
// begin if not HasTask ( group [ i ] ) then
48310: LD_VAR 0 4
48314: PUSH
48315: LD_VAR 0 7
48319: ARRAY
48320: PPUSH
48321: CALL_OW 314
48325: NOT
48326: IFFALSE 48381
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48328: LD_VAR 0 4
48332: PUSH
48333: LD_VAR 0 7
48337: ARRAY
48338: PPUSH
48339: LD_VAR 0 16
48343: PUSH
48344: LD_VAR 0 7
48348: ARRAY
48349: PUSH
48350: LD_INT 1
48352: ARRAY
48353: PUSH
48354: LD_INT 1
48356: ARRAY
48357: PPUSH
48358: LD_VAR 0 16
48362: PUSH
48363: LD_VAR 0 7
48367: ARRAY
48368: PUSH
48369: LD_INT 1
48371: ARRAY
48372: PUSH
48373: LD_INT 2
48375: ARRAY
48376: PPUSH
48377: CALL_OW 114
// end else
48381: GO 48434
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48383: LD_ADDR_VAR 0 15
48387: PUSH
48388: LD_VAR 0 16
48392: PUSH
48393: LD_VAR 0 7
48397: ARRAY
48398: PPUSH
48399: LD_INT 1
48401: PPUSH
48402: CALL_OW 3
48406: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48407: LD_ADDR_VAR 0 16
48411: PUSH
48412: LD_VAR 0 16
48416: PPUSH
48417: LD_VAR 0 7
48421: PPUSH
48422: LD_VAR 0 15
48426: PPUSH
48427: CALL_OW 1
48431: ST_TO_ADDR
// continue ;
48432: GO 48038
// end ; end ; end else
48434: GO 50932
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48436: LD_ADDR_VAR 0 14
48440: PUSH
48441: LD_INT 81
48443: PUSH
48444: LD_VAR 0 4
48448: PUSH
48449: LD_VAR 0 7
48453: ARRAY
48454: PPUSH
48455: CALL_OW 255
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PPUSH
48464: CALL_OW 69
48468: ST_TO_ADDR
// if not tmp then
48469: LD_VAR 0 14
48473: NOT
48474: IFFALSE 48478
// continue ;
48476: GO 48038
// if f_ignore_area then
48478: LD_VAR 0 17
48482: IFFALSE 48570
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48484: LD_ADDR_VAR 0 15
48488: PUSH
48489: LD_VAR 0 14
48493: PPUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 92
48499: PUSH
48500: LD_VAR 0 17
48504: PUSH
48505: LD_INT 1
48507: ARRAY
48508: PUSH
48509: LD_VAR 0 17
48513: PUSH
48514: LD_INT 2
48516: ARRAY
48517: PUSH
48518: LD_VAR 0 17
48522: PUSH
48523: LD_INT 3
48525: ARRAY
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PPUSH
48537: CALL_OW 72
48541: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48542: LD_VAR 0 14
48546: PUSH
48547: LD_VAR 0 15
48551: DIFF
48552: IFFALSE 48570
// tmp := tmp diff tmp2 ;
48554: LD_ADDR_VAR 0 14
48558: PUSH
48559: LD_VAR 0 14
48563: PUSH
48564: LD_VAR 0 15
48568: DIFF
48569: ST_TO_ADDR
// end ; if not f_murder then
48570: LD_VAR 0 20
48574: NOT
48575: IFFALSE 48633
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48577: LD_ADDR_VAR 0 15
48581: PUSH
48582: LD_VAR 0 14
48586: PPUSH
48587: LD_INT 3
48589: PUSH
48590: LD_INT 50
48592: PUSH
48593: EMPTY
48594: LIST
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PPUSH
48600: CALL_OW 72
48604: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48605: LD_VAR 0 14
48609: PUSH
48610: LD_VAR 0 15
48614: DIFF
48615: IFFALSE 48633
// tmp := tmp diff tmp2 ;
48617: LD_ADDR_VAR 0 14
48621: PUSH
48622: LD_VAR 0 14
48626: PUSH
48627: LD_VAR 0 15
48631: DIFF
48632: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48633: LD_ADDR_VAR 0 14
48637: PUSH
48638: LD_VAR 0 4
48642: PUSH
48643: LD_VAR 0 7
48647: ARRAY
48648: PPUSH
48649: LD_VAR 0 14
48653: PPUSH
48654: LD_INT 1
48656: PPUSH
48657: LD_INT 1
48659: PPUSH
48660: CALL 20135 0 4
48664: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48665: LD_VAR 0 4
48669: PUSH
48670: LD_VAR 0 7
48674: ARRAY
48675: PPUSH
48676: CALL_OW 257
48680: PUSH
48681: LD_INT 1
48683: EQUAL
48684: IFFALSE 49132
// begin if WantPlant ( group [ i ] ) then
48686: LD_VAR 0 4
48690: PUSH
48691: LD_VAR 0 7
48695: ARRAY
48696: PPUSH
48697: CALL 19603 0 1
48701: IFFALSE 48705
// continue ;
48703: GO 48038
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48705: LD_VAR 0 18
48709: PUSH
48710: LD_VAR 0 4
48714: PUSH
48715: LD_VAR 0 7
48719: ARRAY
48720: PPUSH
48721: CALL_OW 310
48725: NOT
48726: AND
48727: PUSH
48728: LD_VAR 0 14
48732: PUSH
48733: LD_INT 1
48735: ARRAY
48736: PUSH
48737: LD_VAR 0 14
48741: PPUSH
48742: LD_INT 21
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 58
48754: PUSH
48755: EMPTY
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PPUSH
48762: CALL_OW 72
48766: IN
48767: AND
48768: IFFALSE 48804
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48770: LD_VAR 0 4
48774: PUSH
48775: LD_VAR 0 7
48779: ARRAY
48780: PPUSH
48781: LD_VAR 0 14
48785: PUSH
48786: LD_INT 1
48788: ARRAY
48789: PPUSH
48790: CALL_OW 120
// attacking := true ;
48794: LD_ADDR_VAR 0 29
48798: PUSH
48799: LD_INT 1
48801: ST_TO_ADDR
// continue ;
48802: GO 48038
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48804: LD_VAR 0 26
48808: PUSH
48809: LD_VAR 0 4
48813: PUSH
48814: LD_VAR 0 7
48818: ARRAY
48819: PPUSH
48820: CALL_OW 257
48824: PUSH
48825: LD_INT 1
48827: EQUAL
48828: AND
48829: PUSH
48830: LD_VAR 0 4
48834: PUSH
48835: LD_VAR 0 7
48839: ARRAY
48840: PPUSH
48841: CALL_OW 256
48845: PUSH
48846: LD_INT 800
48848: LESS
48849: AND
48850: PUSH
48851: LD_VAR 0 4
48855: PUSH
48856: LD_VAR 0 7
48860: ARRAY
48861: PPUSH
48862: CALL_OW 318
48866: NOT
48867: AND
48868: IFFALSE 48885
// ComCrawl ( group [ i ] ) ;
48870: LD_VAR 0 4
48874: PUSH
48875: LD_VAR 0 7
48879: ARRAY
48880: PPUSH
48881: CALL_OW 137
// if f_mines then
48885: LD_VAR 0 21
48889: IFFALSE 49132
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48891: LD_VAR 0 14
48895: PUSH
48896: LD_INT 1
48898: ARRAY
48899: PPUSH
48900: CALL_OW 247
48904: PUSH
48905: LD_INT 3
48907: EQUAL
48908: PUSH
48909: LD_VAR 0 14
48913: PUSH
48914: LD_INT 1
48916: ARRAY
48917: PUSH
48918: LD_VAR 0 27
48922: IN
48923: NOT
48924: AND
48925: IFFALSE 49132
// begin x := GetX ( tmp [ 1 ] ) ;
48927: LD_ADDR_VAR 0 10
48931: PUSH
48932: LD_VAR 0 14
48936: PUSH
48937: LD_INT 1
48939: ARRAY
48940: PPUSH
48941: CALL_OW 250
48945: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48946: LD_ADDR_VAR 0 11
48950: PUSH
48951: LD_VAR 0 14
48955: PUSH
48956: LD_INT 1
48958: ARRAY
48959: PPUSH
48960: CALL_OW 251
48964: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48965: LD_ADDR_VAR 0 12
48969: PUSH
48970: LD_VAR 0 4
48974: PUSH
48975: LD_VAR 0 7
48979: ARRAY
48980: PPUSH
48981: CALL 46188 0 1
48985: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48986: LD_VAR 0 4
48990: PUSH
48991: LD_VAR 0 7
48995: ARRAY
48996: PPUSH
48997: LD_VAR 0 10
49001: PPUSH
49002: LD_VAR 0 11
49006: PPUSH
49007: LD_VAR 0 14
49011: PUSH
49012: LD_INT 1
49014: ARRAY
49015: PPUSH
49016: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49020: LD_VAR 0 4
49024: PUSH
49025: LD_VAR 0 7
49029: ARRAY
49030: PPUSH
49031: LD_VAR 0 10
49035: PPUSH
49036: LD_VAR 0 12
49040: PPUSH
49041: LD_INT 7
49043: PPUSH
49044: CALL_OW 272
49048: PPUSH
49049: LD_VAR 0 11
49053: PPUSH
49054: LD_VAR 0 12
49058: PPUSH
49059: LD_INT 7
49061: PPUSH
49062: CALL_OW 273
49066: PPUSH
49067: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49071: LD_VAR 0 4
49075: PUSH
49076: LD_VAR 0 7
49080: ARRAY
49081: PPUSH
49082: LD_INT 71
49084: PPUSH
49085: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49089: LD_ADDR_VAR 0 27
49093: PUSH
49094: LD_VAR 0 27
49098: PPUSH
49099: LD_VAR 0 27
49103: PUSH
49104: LD_INT 1
49106: PLUS
49107: PPUSH
49108: LD_VAR 0 14
49112: PUSH
49113: LD_INT 1
49115: ARRAY
49116: PPUSH
49117: CALL_OW 1
49121: ST_TO_ADDR
// attacking := true ;
49122: LD_ADDR_VAR 0 29
49126: PUSH
49127: LD_INT 1
49129: ST_TO_ADDR
// continue ;
49130: GO 48038
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49132: LD_VAR 0 4
49136: PUSH
49137: LD_VAR 0 7
49141: ARRAY
49142: PPUSH
49143: CALL_OW 257
49147: PUSH
49148: LD_INT 17
49150: EQUAL
49151: PUSH
49152: LD_VAR 0 4
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PPUSH
49163: CALL_OW 110
49167: PUSH
49168: LD_INT 71
49170: EQUAL
49171: NOT
49172: AND
49173: IFFALSE 49319
// begin attacking := false ;
49175: LD_ADDR_VAR 0 29
49179: PUSH
49180: LD_INT 0
49182: ST_TO_ADDR
// k := 5 ;
49183: LD_ADDR_VAR 0 9
49187: PUSH
49188: LD_INT 5
49190: ST_TO_ADDR
// if tmp < k then
49191: LD_VAR 0 14
49195: PUSH
49196: LD_VAR 0 9
49200: LESS
49201: IFFALSE 49213
// k := tmp ;
49203: LD_ADDR_VAR 0 9
49207: PUSH
49208: LD_VAR 0 14
49212: ST_TO_ADDR
// for j = 1 to k do
49213: LD_ADDR_VAR 0 8
49217: PUSH
49218: DOUBLE
49219: LD_INT 1
49221: DEC
49222: ST_TO_ADDR
49223: LD_VAR 0 9
49227: PUSH
49228: FOR_TO
49229: IFFALSE 49317
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49231: LD_VAR 0 14
49235: PUSH
49236: LD_VAR 0 8
49240: ARRAY
49241: PUSH
49242: LD_VAR 0 14
49246: PPUSH
49247: LD_INT 58
49249: PUSH
49250: EMPTY
49251: LIST
49252: PPUSH
49253: CALL_OW 72
49257: IN
49258: NOT
49259: IFFALSE 49315
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49261: LD_VAR 0 4
49265: PUSH
49266: LD_VAR 0 7
49270: ARRAY
49271: PPUSH
49272: LD_VAR 0 14
49276: PUSH
49277: LD_VAR 0 8
49281: ARRAY
49282: PPUSH
49283: CALL_OW 115
// attacking := true ;
49287: LD_ADDR_VAR 0 29
49291: PUSH
49292: LD_INT 1
49294: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49295: LD_VAR 0 4
49299: PUSH
49300: LD_VAR 0 7
49304: ARRAY
49305: PPUSH
49306: LD_INT 71
49308: PPUSH
49309: CALL_OW 109
// continue ;
49313: GO 49228
// end ; end ;
49315: GO 49228
49317: POP
49318: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49319: LD_VAR 0 4
49323: PUSH
49324: LD_VAR 0 7
49328: ARRAY
49329: PPUSH
49330: CALL_OW 257
49334: PUSH
49335: LD_INT 8
49337: EQUAL
49338: PUSH
49339: LD_VAR 0 4
49343: PUSH
49344: LD_VAR 0 7
49348: ARRAY
49349: PPUSH
49350: CALL_OW 264
49354: PUSH
49355: LD_INT 28
49357: PUSH
49358: LD_INT 45
49360: PUSH
49361: LD_INT 7
49363: PUSH
49364: LD_INT 47
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: IN
49373: OR
49374: IFFALSE 49604
// begin attacking := false ;
49376: LD_ADDR_VAR 0 29
49380: PUSH
49381: LD_INT 0
49383: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49384: LD_VAR 0 14
49388: PUSH
49389: LD_INT 1
49391: ARRAY
49392: PPUSH
49393: CALL_OW 266
49397: PUSH
49398: LD_INT 32
49400: PUSH
49401: LD_INT 31
49403: PUSH
49404: LD_INT 33
49406: PUSH
49407: LD_INT 4
49409: PUSH
49410: LD_INT 5
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: IN
49420: IFFALSE 49604
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49422: LD_ADDR_VAR 0 9
49426: PUSH
49427: LD_VAR 0 14
49431: PUSH
49432: LD_INT 1
49434: ARRAY
49435: PPUSH
49436: CALL_OW 266
49440: PPUSH
49441: LD_VAR 0 14
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: PPUSH
49450: CALL_OW 250
49454: PPUSH
49455: LD_VAR 0 14
49459: PUSH
49460: LD_INT 1
49462: ARRAY
49463: PPUSH
49464: CALL_OW 251
49468: PPUSH
49469: LD_VAR 0 14
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: CALL_OW 254
49482: PPUSH
49483: LD_VAR 0 14
49487: PUSH
49488: LD_INT 1
49490: ARRAY
49491: PPUSH
49492: CALL_OW 248
49496: PPUSH
49497: LD_INT 0
49499: PPUSH
49500: CALL 27564 0 6
49504: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49505: LD_ADDR_VAR 0 8
49509: PUSH
49510: LD_VAR 0 4
49514: PUSH
49515: LD_VAR 0 7
49519: ARRAY
49520: PPUSH
49521: LD_VAR 0 9
49525: PPUSH
49526: CALL 46251 0 2
49530: ST_TO_ADDR
// if j then
49531: LD_VAR 0 8
49535: IFFALSE 49604
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49537: LD_VAR 0 8
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PPUSH
49546: LD_VAR 0 8
49550: PUSH
49551: LD_INT 2
49553: ARRAY
49554: PPUSH
49555: CALL_OW 488
49559: IFFALSE 49604
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49561: LD_VAR 0 4
49565: PUSH
49566: LD_VAR 0 7
49570: ARRAY
49571: PPUSH
49572: LD_VAR 0 8
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 8
49585: PUSH
49586: LD_INT 2
49588: ARRAY
49589: PPUSH
49590: CALL_OW 116
// attacking := true ;
49594: LD_ADDR_VAR 0 29
49598: PUSH
49599: LD_INT 1
49601: ST_TO_ADDR
// continue ;
49602: GO 48038
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49604: LD_VAR 0 4
49608: PUSH
49609: LD_VAR 0 7
49613: ARRAY
49614: PPUSH
49615: CALL_OW 265
49619: PUSH
49620: LD_INT 11
49622: EQUAL
49623: IFFALSE 49901
// begin k := 10 ;
49625: LD_ADDR_VAR 0 9
49629: PUSH
49630: LD_INT 10
49632: ST_TO_ADDR
// x := 0 ;
49633: LD_ADDR_VAR 0 10
49637: PUSH
49638: LD_INT 0
49640: ST_TO_ADDR
// if tmp < k then
49641: LD_VAR 0 14
49645: PUSH
49646: LD_VAR 0 9
49650: LESS
49651: IFFALSE 49663
// k := tmp ;
49653: LD_ADDR_VAR 0 9
49657: PUSH
49658: LD_VAR 0 14
49662: ST_TO_ADDR
// for j = k downto 1 do
49663: LD_ADDR_VAR 0 8
49667: PUSH
49668: DOUBLE
49669: LD_VAR 0 9
49673: INC
49674: ST_TO_ADDR
49675: LD_INT 1
49677: PUSH
49678: FOR_DOWNTO
49679: IFFALSE 49754
// begin if GetType ( tmp [ j ] ) = unit_human then
49681: LD_VAR 0 14
49685: PUSH
49686: LD_VAR 0 8
49690: ARRAY
49691: PPUSH
49692: CALL_OW 247
49696: PUSH
49697: LD_INT 1
49699: EQUAL
49700: IFFALSE 49752
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49702: LD_VAR 0 4
49706: PUSH
49707: LD_VAR 0 7
49711: ARRAY
49712: PPUSH
49713: LD_VAR 0 14
49717: PUSH
49718: LD_VAR 0 8
49722: ARRAY
49723: PPUSH
49724: CALL 46522 0 2
// x := tmp [ j ] ;
49728: LD_ADDR_VAR 0 10
49732: PUSH
49733: LD_VAR 0 14
49737: PUSH
49738: LD_VAR 0 8
49742: ARRAY
49743: ST_TO_ADDR
// attacking := true ;
49744: LD_ADDR_VAR 0 29
49748: PUSH
49749: LD_INT 1
49751: ST_TO_ADDR
// end ; end ;
49752: GO 49678
49754: POP
49755: POP
// if not x then
49756: LD_VAR 0 10
49760: NOT
49761: IFFALSE 49901
// begin attacking := true ;
49763: LD_ADDR_VAR 0 29
49767: PUSH
49768: LD_INT 1
49770: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49771: LD_VAR 0 4
49775: PUSH
49776: LD_VAR 0 7
49780: ARRAY
49781: PPUSH
49782: CALL_OW 250
49786: PPUSH
49787: LD_VAR 0 4
49791: PUSH
49792: LD_VAR 0 7
49796: ARRAY
49797: PPUSH
49798: CALL_OW 251
49802: PPUSH
49803: CALL_OW 546
49807: PUSH
49808: LD_INT 2
49810: ARRAY
49811: PUSH
49812: LD_VAR 0 14
49816: PUSH
49817: LD_INT 1
49819: ARRAY
49820: PPUSH
49821: CALL_OW 250
49825: PPUSH
49826: LD_VAR 0 14
49830: PUSH
49831: LD_INT 1
49833: ARRAY
49834: PPUSH
49835: CALL_OW 251
49839: PPUSH
49840: CALL_OW 546
49844: PUSH
49845: LD_INT 2
49847: ARRAY
49848: EQUAL
49849: IFFALSE 49877
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49851: LD_VAR 0 4
49855: PUSH
49856: LD_VAR 0 7
49860: ARRAY
49861: PPUSH
49862: LD_VAR 0 14
49866: PUSH
49867: LD_INT 1
49869: ARRAY
49870: PPUSH
49871: CALL 46522 0 2
49875: GO 49901
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49877: LD_VAR 0 4
49881: PUSH
49882: LD_VAR 0 7
49886: ARRAY
49887: PPUSH
49888: LD_VAR 0 14
49892: PUSH
49893: LD_INT 1
49895: ARRAY
49896: PPUSH
49897: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49901: LD_VAR 0 4
49905: PUSH
49906: LD_VAR 0 7
49910: ARRAY
49911: PPUSH
49912: CALL_OW 264
49916: PUSH
49917: LD_INT 29
49919: EQUAL
49920: IFFALSE 50286
// begin if WantsToAttack ( group [ i ] ) in bombed then
49922: LD_VAR 0 4
49926: PUSH
49927: LD_VAR 0 7
49931: ARRAY
49932: PPUSH
49933: CALL_OW 319
49937: PUSH
49938: LD_VAR 0 28
49942: IN
49943: IFFALSE 49947
// continue ;
49945: GO 48038
// k := 8 ;
49947: LD_ADDR_VAR 0 9
49951: PUSH
49952: LD_INT 8
49954: ST_TO_ADDR
// x := 0 ;
49955: LD_ADDR_VAR 0 10
49959: PUSH
49960: LD_INT 0
49962: ST_TO_ADDR
// if tmp < k then
49963: LD_VAR 0 14
49967: PUSH
49968: LD_VAR 0 9
49972: LESS
49973: IFFALSE 49985
// k := tmp ;
49975: LD_ADDR_VAR 0 9
49979: PUSH
49980: LD_VAR 0 14
49984: ST_TO_ADDR
// for j = 1 to k do
49985: LD_ADDR_VAR 0 8
49989: PUSH
49990: DOUBLE
49991: LD_INT 1
49993: DEC
49994: ST_TO_ADDR
49995: LD_VAR 0 9
49999: PUSH
50000: FOR_TO
50001: IFFALSE 50133
// begin if GetType ( tmp [ j ] ) = unit_building then
50003: LD_VAR 0 14
50007: PUSH
50008: LD_VAR 0 8
50012: ARRAY
50013: PPUSH
50014: CALL_OW 247
50018: PUSH
50019: LD_INT 3
50021: EQUAL
50022: IFFALSE 50131
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50024: LD_VAR 0 14
50028: PUSH
50029: LD_VAR 0 8
50033: ARRAY
50034: PUSH
50035: LD_VAR 0 28
50039: IN
50040: NOT
50041: PUSH
50042: LD_VAR 0 14
50046: PUSH
50047: LD_VAR 0 8
50051: ARRAY
50052: PPUSH
50053: CALL_OW 313
50057: AND
50058: IFFALSE 50131
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50060: LD_VAR 0 4
50064: PUSH
50065: LD_VAR 0 7
50069: ARRAY
50070: PPUSH
50071: LD_VAR 0 14
50075: PUSH
50076: LD_VAR 0 8
50080: ARRAY
50081: PPUSH
50082: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50086: LD_ADDR_VAR 0 28
50090: PUSH
50091: LD_VAR 0 28
50095: PPUSH
50096: LD_VAR 0 28
50100: PUSH
50101: LD_INT 1
50103: PLUS
50104: PPUSH
50105: LD_VAR 0 14
50109: PUSH
50110: LD_VAR 0 8
50114: ARRAY
50115: PPUSH
50116: CALL_OW 1
50120: ST_TO_ADDR
// attacking := true ;
50121: LD_ADDR_VAR 0 29
50125: PUSH
50126: LD_INT 1
50128: ST_TO_ADDR
// break ;
50129: GO 50133
// end ; end ;
50131: GO 50000
50133: POP
50134: POP
// if not attacking and f_attack_depot then
50135: LD_VAR 0 29
50139: NOT
50140: PUSH
50141: LD_VAR 0 25
50145: AND
50146: IFFALSE 50241
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50148: LD_ADDR_VAR 0 13
50152: PUSH
50153: LD_VAR 0 14
50157: PPUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 30
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 30
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: LIST
50185: PPUSH
50186: CALL_OW 72
50190: ST_TO_ADDR
// if z then
50191: LD_VAR 0 13
50195: IFFALSE 50241
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50197: LD_VAR 0 4
50201: PUSH
50202: LD_VAR 0 7
50206: ARRAY
50207: PPUSH
50208: LD_VAR 0 13
50212: PPUSH
50213: LD_VAR 0 4
50217: PUSH
50218: LD_VAR 0 7
50222: ARRAY
50223: PPUSH
50224: CALL_OW 74
50228: PPUSH
50229: CALL_OW 115
// attacking := true ;
50233: LD_ADDR_VAR 0 29
50237: PUSH
50238: LD_INT 1
50240: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50241: LD_VAR 0 4
50245: PUSH
50246: LD_VAR 0 7
50250: ARRAY
50251: PPUSH
50252: CALL_OW 256
50256: PUSH
50257: LD_INT 500
50259: LESS
50260: IFFALSE 50286
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50262: LD_VAR 0 4
50266: PUSH
50267: LD_VAR 0 7
50271: ARRAY
50272: PPUSH
50273: LD_VAR 0 14
50277: PUSH
50278: LD_INT 1
50280: ARRAY
50281: PPUSH
50282: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50286: LD_VAR 0 4
50290: PUSH
50291: LD_VAR 0 7
50295: ARRAY
50296: PPUSH
50297: CALL_OW 256
50301: PUSH
50302: LD_INT 250
50304: LESS
50305: PUSH
50306: LD_VAR 0 4
50310: PUSH
50311: LD_VAR 0 7
50315: ARRAY
50316: PUSH
50317: LD_INT 21
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 23
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PPUSH
50341: CALL_OW 69
50345: IN
50346: AND
50347: IFFALSE 50472
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50349: LD_ADDR_VAR 0 9
50353: PUSH
50354: LD_OWVAR 3
50358: PUSH
50359: LD_VAR 0 4
50363: PUSH
50364: LD_VAR 0 7
50368: ARRAY
50369: DIFF
50370: PPUSH
50371: LD_VAR 0 4
50375: PUSH
50376: LD_VAR 0 7
50380: ARRAY
50381: PPUSH
50382: CALL_OW 74
50386: ST_TO_ADDR
// if not k then
50387: LD_VAR 0 9
50391: NOT
50392: IFFALSE 50396
// continue ;
50394: GO 48038
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50396: LD_VAR 0 9
50400: PUSH
50401: LD_INT 81
50403: PUSH
50404: LD_VAR 0 4
50408: PUSH
50409: LD_VAR 0 7
50413: ARRAY
50414: PPUSH
50415: CALL_OW 255
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PPUSH
50424: CALL_OW 69
50428: IN
50429: PUSH
50430: LD_VAR 0 9
50434: PPUSH
50435: LD_VAR 0 4
50439: PUSH
50440: LD_VAR 0 7
50444: ARRAY
50445: PPUSH
50446: CALL_OW 296
50450: PUSH
50451: LD_INT 5
50453: LESS
50454: AND
50455: IFFALSE 50472
// ComAutodestruct ( group [ i ] ) ;
50457: LD_VAR 0 4
50461: PUSH
50462: LD_VAR 0 7
50466: ARRAY
50467: PPUSH
50468: CALL 46420 0 1
// end ; if f_attack_depot then
50472: LD_VAR 0 25
50476: IFFALSE 50588
// begin k := 6 ;
50478: LD_ADDR_VAR 0 9
50482: PUSH
50483: LD_INT 6
50485: ST_TO_ADDR
// if tmp < k then
50486: LD_VAR 0 14
50490: PUSH
50491: LD_VAR 0 9
50495: LESS
50496: IFFALSE 50508
// k := tmp ;
50498: LD_ADDR_VAR 0 9
50502: PUSH
50503: LD_VAR 0 14
50507: ST_TO_ADDR
// for j = 1 to k do
50508: LD_ADDR_VAR 0 8
50512: PUSH
50513: DOUBLE
50514: LD_INT 1
50516: DEC
50517: ST_TO_ADDR
50518: LD_VAR 0 9
50522: PUSH
50523: FOR_TO
50524: IFFALSE 50586
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50526: LD_VAR 0 8
50530: PPUSH
50531: CALL_OW 266
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: IN
50546: IFFALSE 50584
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50548: LD_VAR 0 4
50552: PUSH
50553: LD_VAR 0 7
50557: ARRAY
50558: PPUSH
50559: LD_VAR 0 14
50563: PUSH
50564: LD_VAR 0 8
50568: ARRAY
50569: PPUSH
50570: CALL_OW 115
// attacking := true ;
50574: LD_ADDR_VAR 0 29
50578: PUSH
50579: LD_INT 1
50581: ST_TO_ADDR
// break ;
50582: GO 50586
// end ;
50584: GO 50523
50586: POP
50587: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50588: LD_VAR 0 4
50592: PUSH
50593: LD_VAR 0 7
50597: ARRAY
50598: PPUSH
50599: CALL_OW 302
50603: PUSH
50604: LD_VAR 0 29
50608: NOT
50609: AND
50610: IFFALSE 50932
// begin if GetTag ( group [ i ] ) = 71 then
50612: LD_VAR 0 4
50616: PUSH
50617: LD_VAR 0 7
50621: ARRAY
50622: PPUSH
50623: CALL_OW 110
50627: PUSH
50628: LD_INT 71
50630: EQUAL
50631: IFFALSE 50672
// begin if HasTask ( group [ i ] ) then
50633: LD_VAR 0 4
50637: PUSH
50638: LD_VAR 0 7
50642: ARRAY
50643: PPUSH
50644: CALL_OW 314
50648: IFFALSE 50654
// continue else
50650: GO 48038
50652: GO 50672
// SetTag ( group [ i ] , 0 ) ;
50654: LD_VAR 0 4
50658: PUSH
50659: LD_VAR 0 7
50663: ARRAY
50664: PPUSH
50665: LD_INT 0
50667: PPUSH
50668: CALL_OW 109
// end ; k := 8 ;
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: LD_INT 8
50679: ST_TO_ADDR
// x := 0 ;
50680: LD_ADDR_VAR 0 10
50684: PUSH
50685: LD_INT 0
50687: ST_TO_ADDR
// if tmp < k then
50688: LD_VAR 0 14
50692: PUSH
50693: LD_VAR 0 9
50697: LESS
50698: IFFALSE 50710
// k := tmp ;
50700: LD_ADDR_VAR 0 9
50704: PUSH
50705: LD_VAR 0 14
50709: ST_TO_ADDR
// for j = 1 to k do
50710: LD_ADDR_VAR 0 8
50714: PUSH
50715: DOUBLE
50716: LD_INT 1
50718: DEC
50719: ST_TO_ADDR
50720: LD_VAR 0 9
50724: PUSH
50725: FOR_TO
50726: IFFALSE 50824
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50728: LD_VAR 0 14
50732: PUSH
50733: LD_VAR 0 8
50737: ARRAY
50738: PPUSH
50739: CALL_OW 247
50743: PUSH
50744: LD_INT 1
50746: EQUAL
50747: PUSH
50748: LD_VAR 0 14
50752: PUSH
50753: LD_VAR 0 8
50757: ARRAY
50758: PPUSH
50759: CALL_OW 256
50763: PUSH
50764: LD_INT 250
50766: LESS
50767: PUSH
50768: LD_VAR 0 20
50772: AND
50773: PUSH
50774: LD_VAR 0 20
50778: NOT
50779: PUSH
50780: LD_VAR 0 14
50784: PUSH
50785: LD_VAR 0 8
50789: ARRAY
50790: PPUSH
50791: CALL_OW 256
50795: PUSH
50796: LD_INT 250
50798: GREATEREQUAL
50799: AND
50800: OR
50801: AND
50802: IFFALSE 50822
// begin x := tmp [ j ] ;
50804: LD_ADDR_VAR 0 10
50808: PUSH
50809: LD_VAR 0 14
50813: PUSH
50814: LD_VAR 0 8
50818: ARRAY
50819: ST_TO_ADDR
// break ;
50820: GO 50824
// end ;
50822: GO 50725
50824: POP
50825: POP
// if x then
50826: LD_VAR 0 10
50830: IFFALSE 50854
// ComAttackUnit ( group [ i ] , x ) else
50832: LD_VAR 0 4
50836: PUSH
50837: LD_VAR 0 7
50841: ARRAY
50842: PPUSH
50843: LD_VAR 0 10
50847: PPUSH
50848: CALL_OW 115
50852: GO 50878
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50854: LD_VAR 0 4
50858: PUSH
50859: LD_VAR 0 7
50863: ARRAY
50864: PPUSH
50865: LD_VAR 0 14
50869: PUSH
50870: LD_INT 1
50872: ARRAY
50873: PPUSH
50874: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50878: LD_VAR 0 4
50882: PUSH
50883: LD_VAR 0 7
50887: ARRAY
50888: PPUSH
50889: CALL_OW 314
50893: NOT
50894: IFFALSE 50932
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50896: LD_VAR 0 4
50900: PUSH
50901: LD_VAR 0 7
50905: ARRAY
50906: PPUSH
50907: LD_VAR 0 14
50911: PPUSH
50912: LD_VAR 0 4
50916: PUSH
50917: LD_VAR 0 7
50921: ARRAY
50922: PPUSH
50923: CALL_OW 74
50927: PPUSH
50928: CALL_OW 115
// end ; end ; end ;
50932: GO 48038
50934: POP
50935: POP
// wait ( 0 0$1 ) ;
50936: LD_INT 35
50938: PPUSH
50939: CALL_OW 67
// until group = [ ] ;
50943: LD_VAR 0 4
50947: PUSH
50948: EMPTY
50949: EQUAL
50950: IFFALSE 48023
// end ;
50952: LD_VAR 0 2
50956: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50957: LD_INT 0
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
// if not base_units then
50963: LD_VAR 0 1
50967: NOT
50968: IFFALSE 50972
// exit ;
50970: GO 51059
// result := false ;
50972: LD_ADDR_VAR 0 2
50976: PUSH
50977: LD_INT 0
50979: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50980: LD_ADDR_VAR 0 5
50984: PUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: LD_INT 21
50992: PUSH
50993: LD_INT 3
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PPUSH
51000: CALL_OW 72
51004: ST_TO_ADDR
// if not tmp then
51005: LD_VAR 0 5
51009: NOT
51010: IFFALSE 51014
// exit ;
51012: GO 51059
// for i in tmp do
51014: LD_ADDR_VAR 0 3
51018: PUSH
51019: LD_VAR 0 5
51023: PUSH
51024: FOR_IN
51025: IFFALSE 51057
// begin result := EnemyInRange ( i , 22 ) ;
51027: LD_ADDR_VAR 0 2
51031: PUSH
51032: LD_VAR 0 3
51036: PPUSH
51037: LD_INT 22
51039: PPUSH
51040: CALL 46103 0 2
51044: ST_TO_ADDR
// if result then
51045: LD_VAR 0 2
51049: IFFALSE 51055
// exit ;
51051: POP
51052: POP
51053: GO 51059
// end ;
51055: GO 51024
51057: POP
51058: POP
// end ;
51059: LD_VAR 0 2
51063: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
// if not units then
51068: LD_VAR 0 1
51072: NOT
51073: IFFALSE 51077
// exit ;
51075: GO 51147
// result := [ ] ;
51077: LD_ADDR_VAR 0 3
51081: PUSH
51082: EMPTY
51083: ST_TO_ADDR
// for i in units do
51084: LD_ADDR_VAR 0 4
51088: PUSH
51089: LD_VAR 0 1
51093: PUSH
51094: FOR_IN
51095: IFFALSE 51145
// if GetTag ( i ) = tag then
51097: LD_VAR 0 4
51101: PPUSH
51102: CALL_OW 110
51106: PUSH
51107: LD_VAR 0 2
51111: EQUAL
51112: IFFALSE 51143
// result := Insert ( result , result + 1 , i ) ;
51114: LD_ADDR_VAR 0 3
51118: PUSH
51119: LD_VAR 0 3
51123: PPUSH
51124: LD_VAR 0 3
51128: PUSH
51129: LD_INT 1
51131: PLUS
51132: PPUSH
51133: LD_VAR 0 4
51137: PPUSH
51138: CALL_OW 2
51142: ST_TO_ADDR
51143: GO 51094
51145: POP
51146: POP
// end ;
51147: LD_VAR 0 3
51151: RET
// export function IsDriver ( un ) ; begin
51152: LD_INT 0
51154: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51155: LD_ADDR_VAR 0 2
51159: PUSH
51160: LD_VAR 0 1
51164: PUSH
51165: LD_INT 55
51167: PUSH
51168: EMPTY
51169: LIST
51170: PPUSH
51171: CALL_OW 69
51175: IN
51176: ST_TO_ADDR
// end ;
51177: LD_VAR 0 2
51181: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51182: LD_INT 0
51184: PPUSH
51185: PPUSH
// list := [ ] ;
51186: LD_ADDR_VAR 0 5
51190: PUSH
51191: EMPTY
51192: ST_TO_ADDR
// case d of 0 :
51193: LD_VAR 0 3
51197: PUSH
51198: LD_INT 0
51200: DOUBLE
51201: EQUAL
51202: IFTRUE 51206
51204: GO 51339
51206: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51207: LD_ADDR_VAR 0 5
51211: PUSH
51212: LD_VAR 0 1
51216: PUSH
51217: LD_INT 4
51219: MINUS
51220: PUSH
51221: LD_VAR 0 2
51225: PUSH
51226: LD_INT 4
51228: MINUS
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: LIST
51237: PUSH
51238: LD_VAR 0 1
51242: PUSH
51243: LD_INT 3
51245: MINUS
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: PUSH
51260: LD_VAR 0 1
51264: PUSH
51265: LD_INT 4
51267: PLUS
51268: PUSH
51269: LD_VAR 0 2
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 3
51289: PLUS
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_INT 3
51298: PLUS
51299: PUSH
51300: LD_INT 5
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: PUSH
51308: LD_VAR 0 1
51312: PUSH
51313: LD_VAR 0 2
51317: PUSH
51318: LD_INT 4
51320: PLUS
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: ST_TO_ADDR
// end ; 1 :
51337: GO 52037
51339: LD_INT 1
51341: DOUBLE
51342: EQUAL
51343: IFTRUE 51347
51345: GO 51480
51347: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51348: LD_ADDR_VAR 0 5
51352: PUSH
51353: LD_VAR 0 1
51357: PUSH
51358: LD_VAR 0 2
51362: PUSH
51363: LD_INT 4
51365: MINUS
51366: PUSH
51367: LD_INT 3
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: PUSH
51375: LD_VAR 0 1
51379: PUSH
51380: LD_INT 3
51382: MINUS
51383: PUSH
51384: LD_VAR 0 2
51388: PUSH
51389: LD_INT 3
51391: MINUS
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: PUSH
51401: LD_VAR 0 1
51405: PUSH
51406: LD_INT 4
51408: MINUS
51409: PUSH
51410: LD_VAR 0 2
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_VAR 0 2
51432: PUSH
51433: LD_INT 3
51435: PLUS
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: PUSH
51445: LD_VAR 0 1
51449: PUSH
51450: LD_INT 4
51452: PLUS
51453: PUSH
51454: LD_VAR 0 2
51458: PUSH
51459: LD_INT 4
51461: PLUS
51462: PUSH
51463: LD_INT 5
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// end ; 2 :
51478: GO 52037
51480: LD_INT 2
51482: DOUBLE
51483: EQUAL
51484: IFTRUE 51488
51486: GO 51617
51488: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51489: LD_ADDR_VAR 0 5
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: LD_VAR 0 2
51503: PUSH
51504: LD_INT 3
51506: MINUS
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: LIST
51515: PUSH
51516: LD_VAR 0 1
51520: PUSH
51521: LD_INT 4
51523: PLUS
51524: PUSH
51525: LD_VAR 0 2
51529: PUSH
51530: LD_INT 4
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_VAR 0 2
51547: PUSH
51548: LD_INT 4
51550: PLUS
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: LD_INT 3
51567: MINUS
51568: PUSH
51569: LD_VAR 0 2
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: PUSH
51582: LD_VAR 0 1
51586: PUSH
51587: LD_INT 4
51589: MINUS
51590: PUSH
51591: LD_VAR 0 2
51595: PUSH
51596: LD_INT 4
51598: MINUS
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: ST_TO_ADDR
// end ; 3 :
51615: GO 52037
51617: LD_INT 3
51619: DOUBLE
51620: EQUAL
51621: IFTRUE 51625
51623: GO 51758
51625: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51626: LD_ADDR_VAR 0 5
51630: PUSH
51631: LD_VAR 0 1
51635: PUSH
51636: LD_INT 3
51638: PLUS
51639: PUSH
51640: LD_VAR 0 2
51644: PUSH
51645: LD_INT 4
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: PUSH
51653: LD_VAR 0 1
51657: PUSH
51658: LD_INT 4
51660: PLUS
51661: PUSH
51662: LD_VAR 0 2
51666: PUSH
51667: LD_INT 4
51669: PLUS
51670: PUSH
51671: LD_INT 5
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: LIST
51678: PUSH
51679: LD_VAR 0 1
51683: PUSH
51684: LD_INT 4
51686: MINUS
51687: PUSH
51688: LD_VAR 0 2
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_VAR 0 1
51705: PUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 4
51713: MINUS
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: LD_VAR 0 1
51727: PUSH
51728: LD_INT 3
51730: MINUS
51731: PUSH
51732: LD_VAR 0 2
51736: PUSH
51737: LD_INT 3
51739: MINUS
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// end ; 4 :
51756: GO 52037
51758: LD_INT 4
51760: DOUBLE
51761: EQUAL
51762: IFTRUE 51766
51764: GO 51899
51766: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51767: LD_ADDR_VAR 0 5
51771: PUSH
51772: LD_VAR 0 1
51776: PUSH
51777: LD_VAR 0 2
51781: PUSH
51782: LD_INT 4
51784: PLUS
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: LIST
51793: PUSH
51794: LD_VAR 0 1
51798: PUSH
51799: LD_INT 3
51801: PLUS
51802: PUSH
51803: LD_VAR 0 2
51807: PUSH
51808: LD_INT 3
51810: PLUS
51811: PUSH
51812: LD_INT 5
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: LIST
51819: PUSH
51820: LD_VAR 0 1
51824: PUSH
51825: LD_INT 4
51827: PLUS
51828: PUSH
51829: LD_VAR 0 2
51833: PUSH
51834: LD_INT 4
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: PUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_INT 3
51854: MINUS
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: LD_VAR 0 1
51868: PUSH
51869: LD_INT 4
51871: MINUS
51872: PUSH
51873: LD_VAR 0 2
51877: PUSH
51878: LD_INT 4
51880: MINUS
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: ST_TO_ADDR
// end ; 5 :
51897: GO 52037
51899: LD_INT 5
51901: DOUBLE
51902: EQUAL
51903: IFTRUE 51907
51905: GO 52036
51907: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51908: LD_ADDR_VAR 0 5
51912: PUSH
51913: LD_VAR 0 1
51917: PUSH
51918: LD_INT 4
51920: MINUS
51921: PUSH
51922: LD_VAR 0 2
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: LD_VAR 0 1
51939: PUSH
51940: LD_VAR 0 2
51944: PUSH
51945: LD_INT 4
51947: MINUS
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: LIST
51956: PUSH
51957: LD_VAR 0 1
51961: PUSH
51962: LD_INT 4
51964: PLUS
51965: PUSH
51966: LD_VAR 0 2
51970: PUSH
51971: LD_INT 4
51973: PLUS
51974: PUSH
51975: LD_INT 5
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: LIST
51982: PUSH
51983: LD_VAR 0 1
51987: PUSH
51988: LD_INT 3
51990: PLUS
51991: PUSH
51992: LD_VAR 0 2
51996: PUSH
51997: LD_INT 4
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: LIST
52004: PUSH
52005: LD_VAR 0 1
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 3
52017: PLUS
52018: PUSH
52019: LD_INT 0
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// end ; end ;
52034: GO 52037
52036: POP
// result := list ;
52037: LD_ADDR_VAR 0 4
52041: PUSH
52042: LD_VAR 0 5
52046: ST_TO_ADDR
// end ; end_of_file
52047: LD_VAR 0 4
52051: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
52052: LD_INT 0
52054: PPUSH
52055: PPUSH
// skirmish := false ;
52056: LD_ADDR_EXP 56
52060: PUSH
52061: LD_INT 0
52063: ST_TO_ADDR
// mc_bases := [ ] ;
52064: LD_ADDR_EXP 57
52068: PUSH
52069: EMPTY
52070: ST_TO_ADDR
// mc_sides := [ ] ;
52071: LD_ADDR_EXP 83
52075: PUSH
52076: EMPTY
52077: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52078: LD_ADDR_EXP 58
52082: PUSH
52083: EMPTY
52084: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52085: LD_ADDR_EXP 59
52089: PUSH
52090: EMPTY
52091: ST_TO_ADDR
// mc_need_heal := [ ] ;
52092: LD_ADDR_EXP 60
52096: PUSH
52097: EMPTY
52098: ST_TO_ADDR
// mc_healers := [ ] ;
52099: LD_ADDR_EXP 61
52103: PUSH
52104: EMPTY
52105: ST_TO_ADDR
// mc_build_list := [ ] ;
52106: LD_ADDR_EXP 62
52110: PUSH
52111: EMPTY
52112: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52113: LD_ADDR_EXP 89
52117: PUSH
52118: EMPTY
52119: ST_TO_ADDR
// mc_builders := [ ] ;
52120: LD_ADDR_EXP 63
52124: PUSH
52125: EMPTY
52126: ST_TO_ADDR
// mc_construct_list := [ ] ;
52127: LD_ADDR_EXP 64
52131: PUSH
52132: EMPTY
52133: ST_TO_ADDR
// mc_turret_list := [ ] ;
52134: LD_ADDR_EXP 65
52138: PUSH
52139: EMPTY
52140: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52141: LD_ADDR_EXP 66
52145: PUSH
52146: EMPTY
52147: ST_TO_ADDR
// mc_miners := [ ] ;
52148: LD_ADDR_EXP 71
52152: PUSH
52153: EMPTY
52154: ST_TO_ADDR
// mc_mines := [ ] ;
52155: LD_ADDR_EXP 70
52159: PUSH
52160: EMPTY
52161: ST_TO_ADDR
// mc_minefields := [ ] ;
52162: LD_ADDR_EXP 72
52166: PUSH
52167: EMPTY
52168: ST_TO_ADDR
// mc_crates := [ ] ;
52169: LD_ADDR_EXP 73
52173: PUSH
52174: EMPTY
52175: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52176: LD_ADDR_EXP 74
52180: PUSH
52181: EMPTY
52182: ST_TO_ADDR
// mc_crates_area := [ ] ;
52183: LD_ADDR_EXP 75
52187: PUSH
52188: EMPTY
52189: ST_TO_ADDR
// mc_vehicles := [ ] ;
52190: LD_ADDR_EXP 76
52194: PUSH
52195: EMPTY
52196: ST_TO_ADDR
// mc_attack := [ ] ;
52197: LD_ADDR_EXP 77
52201: PUSH
52202: EMPTY
52203: ST_TO_ADDR
// mc_produce := [ ] ;
52204: LD_ADDR_EXP 78
52208: PUSH
52209: EMPTY
52210: ST_TO_ADDR
// mc_defender := [ ] ;
52211: LD_ADDR_EXP 79
52215: PUSH
52216: EMPTY
52217: ST_TO_ADDR
// mc_parking := [ ] ;
52218: LD_ADDR_EXP 81
52222: PUSH
52223: EMPTY
52224: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52225: LD_ADDR_EXP 67
52229: PUSH
52230: EMPTY
52231: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52232: LD_ADDR_EXP 69
52236: PUSH
52237: EMPTY
52238: ST_TO_ADDR
// mc_scan := [ ] ;
52239: LD_ADDR_EXP 80
52243: PUSH
52244: EMPTY
52245: ST_TO_ADDR
// mc_scan_area := [ ] ;
52246: LD_ADDR_EXP 82
52250: PUSH
52251: EMPTY
52252: ST_TO_ADDR
// mc_tech := [ ] ;
52253: LD_ADDR_EXP 84
52257: PUSH
52258: EMPTY
52259: ST_TO_ADDR
// end ;
52260: LD_VAR 0 1
52264: RET
// export function MC_Kill ( base ) ; begin
52265: LD_INT 0
52267: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
52268: LD_ADDR_EXP 57
52272: PUSH
52273: LD_EXP 57
52277: PPUSH
52278: LD_VAR 0 1
52282: PPUSH
52283: EMPTY
52284: PPUSH
52285: CALL_OW 1
52289: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
52290: LD_ADDR_EXP 58
52294: PUSH
52295: LD_EXP 58
52299: PPUSH
52300: LD_VAR 0 1
52304: PPUSH
52305: EMPTY
52306: PPUSH
52307: CALL_OW 1
52311: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
52312: LD_ADDR_EXP 59
52316: PUSH
52317: LD_EXP 59
52321: PPUSH
52322: LD_VAR 0 1
52326: PPUSH
52327: EMPTY
52328: PPUSH
52329: CALL_OW 1
52333: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
52334: LD_ADDR_EXP 60
52338: PUSH
52339: LD_EXP 60
52343: PPUSH
52344: LD_VAR 0 1
52348: PPUSH
52349: EMPTY
52350: PPUSH
52351: CALL_OW 1
52355: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
52356: LD_ADDR_EXP 61
52360: PUSH
52361: LD_EXP 61
52365: PPUSH
52366: LD_VAR 0 1
52370: PPUSH
52371: EMPTY
52372: PPUSH
52373: CALL_OW 1
52377: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
52378: LD_ADDR_EXP 62
52382: PUSH
52383: LD_EXP 62
52387: PPUSH
52388: LD_VAR 0 1
52392: PPUSH
52393: EMPTY
52394: PPUSH
52395: CALL_OW 1
52399: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
52400: LD_ADDR_EXP 63
52404: PUSH
52405: LD_EXP 63
52409: PPUSH
52410: LD_VAR 0 1
52414: PPUSH
52415: EMPTY
52416: PPUSH
52417: CALL_OW 1
52421: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
52422: LD_ADDR_EXP 64
52426: PUSH
52427: LD_EXP 64
52431: PPUSH
52432: LD_VAR 0 1
52436: PPUSH
52437: EMPTY
52438: PPUSH
52439: CALL_OW 1
52443: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
52444: LD_ADDR_EXP 65
52448: PUSH
52449: LD_EXP 65
52453: PPUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: EMPTY
52460: PPUSH
52461: CALL_OW 1
52465: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
52466: LD_ADDR_EXP 66
52470: PUSH
52471: LD_EXP 66
52475: PPUSH
52476: LD_VAR 0 1
52480: PPUSH
52481: EMPTY
52482: PPUSH
52483: CALL_OW 1
52487: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
52488: LD_ADDR_EXP 67
52492: PUSH
52493: LD_EXP 67
52497: PPUSH
52498: LD_VAR 0 1
52502: PPUSH
52503: EMPTY
52504: PPUSH
52505: CALL_OW 1
52509: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
52510: LD_ADDR_EXP 68
52514: PUSH
52515: LD_EXP 68
52519: PPUSH
52520: LD_VAR 0 1
52524: PPUSH
52525: LD_INT 0
52527: PPUSH
52528: CALL_OW 1
52532: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
52533: LD_ADDR_EXP 69
52537: PUSH
52538: LD_EXP 69
52542: PPUSH
52543: LD_VAR 0 1
52547: PPUSH
52548: EMPTY
52549: PPUSH
52550: CALL_OW 1
52554: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
52555: LD_ADDR_EXP 70
52559: PUSH
52560: LD_EXP 70
52564: PPUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: EMPTY
52571: PPUSH
52572: CALL_OW 1
52576: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
52577: LD_ADDR_EXP 71
52581: PUSH
52582: LD_EXP 71
52586: PPUSH
52587: LD_VAR 0 1
52591: PPUSH
52592: EMPTY
52593: PPUSH
52594: CALL_OW 1
52598: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
52599: LD_ADDR_EXP 72
52603: PUSH
52604: LD_EXP 72
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: EMPTY
52615: PPUSH
52616: CALL_OW 1
52620: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
52621: LD_ADDR_EXP 73
52625: PUSH
52626: LD_EXP 73
52630: PPUSH
52631: LD_VAR 0 1
52635: PPUSH
52636: EMPTY
52637: PPUSH
52638: CALL_OW 1
52642: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
52643: LD_ADDR_EXP 74
52647: PUSH
52648: LD_EXP 74
52652: PPUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: EMPTY
52659: PPUSH
52660: CALL_OW 1
52664: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
52665: LD_ADDR_EXP 75
52669: PUSH
52670: LD_EXP 75
52674: PPUSH
52675: LD_VAR 0 1
52679: PPUSH
52680: EMPTY
52681: PPUSH
52682: CALL_OW 1
52686: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
52687: LD_ADDR_EXP 76
52691: PUSH
52692: LD_EXP 76
52696: PPUSH
52697: LD_VAR 0 1
52701: PPUSH
52702: EMPTY
52703: PPUSH
52704: CALL_OW 1
52708: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
52709: LD_ADDR_EXP 77
52713: PUSH
52714: LD_EXP 77
52718: PPUSH
52719: LD_VAR 0 1
52723: PPUSH
52724: EMPTY
52725: PPUSH
52726: CALL_OW 1
52730: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
52731: LD_ADDR_EXP 78
52735: PUSH
52736: LD_EXP 78
52740: PPUSH
52741: LD_VAR 0 1
52745: PPUSH
52746: EMPTY
52747: PPUSH
52748: CALL_OW 1
52752: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
52753: LD_ADDR_EXP 79
52757: PUSH
52758: LD_EXP 79
52762: PPUSH
52763: LD_VAR 0 1
52767: PPUSH
52768: EMPTY
52769: PPUSH
52770: CALL_OW 1
52774: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
52775: LD_ADDR_EXP 80
52779: PUSH
52780: LD_EXP 80
52784: PPUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: EMPTY
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
52797: LD_ADDR_EXP 81
52801: PUSH
52802: LD_EXP 81
52806: PPUSH
52807: LD_VAR 0 1
52811: PPUSH
52812: EMPTY
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
52819: LD_ADDR_EXP 82
52823: PUSH
52824: LD_EXP 82
52828: PPUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: EMPTY
52835: PPUSH
52836: CALL_OW 1
52840: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
52841: LD_ADDR_EXP 84
52845: PUSH
52846: LD_EXP 84
52850: PPUSH
52851: LD_VAR 0 1
52855: PPUSH
52856: EMPTY
52857: PPUSH
52858: CALL_OW 1
52862: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
52863: LD_ADDR_EXP 86
52867: PUSH
52868: LD_EXP 86
52872: PPUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: EMPTY
52879: PPUSH
52880: CALL_OW 1
52884: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
52885: LD_ADDR_EXP 87
52889: PUSH
52890: LD_EXP 87
52894: PPUSH
52895: LD_VAR 0 1
52899: PPUSH
52900: EMPTY
52901: PPUSH
52902: CALL_OW 1
52906: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
52907: LD_ADDR_EXP 88
52911: PUSH
52912: LD_EXP 88
52916: PPUSH
52917: LD_VAR 0 1
52921: PPUSH
52922: EMPTY
52923: PPUSH
52924: CALL_OW 1
52928: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
52929: LD_ADDR_EXP 89
52933: PUSH
52934: LD_EXP 89
52938: PPUSH
52939: LD_VAR 0 1
52943: PPUSH
52944: EMPTY
52945: PPUSH
52946: CALL_OW 1
52950: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
52951: LD_ADDR_EXP 90
52955: PUSH
52956: LD_EXP 90
52960: PPUSH
52961: LD_VAR 0 1
52965: PPUSH
52966: EMPTY
52967: PPUSH
52968: CALL_OW 1
52972: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
52973: LD_ADDR_EXP 91
52977: PUSH
52978: LD_EXP 91
52982: PPUSH
52983: LD_VAR 0 1
52987: PPUSH
52988: EMPTY
52989: PPUSH
52990: CALL_OW 1
52994: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
52995: LD_ADDR_EXP 92
52999: PUSH
53000: LD_EXP 92
53004: PPUSH
53005: LD_VAR 0 1
53009: PPUSH
53010: EMPTY
53011: PPUSH
53012: CALL_OW 1
53016: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53017: LD_ADDR_EXP 93
53021: PUSH
53022: LD_EXP 93
53026: PPUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: EMPTY
53033: PPUSH
53034: CALL_OW 1
53038: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53039: LD_ADDR_EXP 94
53043: PUSH
53044: LD_EXP 94
53048: PPUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: EMPTY
53055: PPUSH
53056: CALL_OW 1
53060: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53061: LD_ADDR_EXP 95
53065: PUSH
53066: LD_EXP 95
53070: PPUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: EMPTY
53077: PPUSH
53078: CALL_OW 1
53082: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53083: LD_ADDR_EXP 96
53087: PUSH
53088: LD_EXP 96
53092: PPUSH
53093: LD_VAR 0 1
53097: PPUSH
53098: EMPTY
53099: PPUSH
53100: CALL_OW 1
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 2
53109: RET
// export function MC_Start ( ) ; var i ; begin
53110: LD_INT 0
53112: PPUSH
53113: PPUSH
// for i = 1 to mc_bases do
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: DOUBLE
53120: LD_INT 1
53122: DEC
53123: ST_TO_ADDR
53124: LD_EXP 57
53128: PUSH
53129: FOR_TO
53130: IFFALSE 54063
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
53132: LD_ADDR_EXP 58
53136: PUSH
53137: LD_EXP 58
53141: PPUSH
53142: LD_VAR 0 2
53146: PPUSH
53147: EMPTY
53148: PPUSH
53149: CALL_OW 1
53153: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
53154: LD_ADDR_EXP 59
53158: PUSH
53159: LD_EXP 59
53163: PPUSH
53164: LD_VAR 0 2
53168: PPUSH
53169: EMPTY
53170: PPUSH
53171: CALL_OW 1
53175: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
53176: LD_ADDR_EXP 60
53180: PUSH
53181: LD_EXP 60
53185: PPUSH
53186: LD_VAR 0 2
53190: PPUSH
53191: EMPTY
53192: PPUSH
53193: CALL_OW 1
53197: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
53198: LD_ADDR_EXP 61
53202: PUSH
53203: LD_EXP 61
53207: PPUSH
53208: LD_VAR 0 2
53212: PPUSH
53213: EMPTY
53214: PUSH
53215: EMPTY
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PPUSH
53221: CALL_OW 1
53225: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
53226: LD_ADDR_EXP 62
53230: PUSH
53231: LD_EXP 62
53235: PPUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: EMPTY
53242: PPUSH
53243: CALL_OW 1
53247: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
53248: LD_ADDR_EXP 89
53252: PUSH
53253: LD_EXP 89
53257: PPUSH
53258: LD_VAR 0 2
53262: PPUSH
53263: EMPTY
53264: PPUSH
53265: CALL_OW 1
53269: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
53270: LD_ADDR_EXP 63
53274: PUSH
53275: LD_EXP 63
53279: PPUSH
53280: LD_VAR 0 2
53284: PPUSH
53285: EMPTY
53286: PPUSH
53287: CALL_OW 1
53291: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
53292: LD_ADDR_EXP 64
53296: PUSH
53297: LD_EXP 64
53301: PPUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: EMPTY
53308: PPUSH
53309: CALL_OW 1
53313: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
53314: LD_ADDR_EXP 65
53318: PUSH
53319: LD_EXP 65
53323: PPUSH
53324: LD_VAR 0 2
53328: PPUSH
53329: EMPTY
53330: PPUSH
53331: CALL_OW 1
53335: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
53336: LD_ADDR_EXP 66
53340: PUSH
53341: LD_EXP 66
53345: PPUSH
53346: LD_VAR 0 2
53350: PPUSH
53351: LD_EXP 57
53355: PUSH
53356: LD_VAR 0 2
53360: ARRAY
53361: PPUSH
53362: LD_INT 2
53364: PUSH
53365: LD_INT 30
53367: PUSH
53368: LD_INT 32
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 30
53377: PUSH
53378: LD_INT 31
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 58
53392: PUSH
53393: EMPTY
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PPUSH
53400: CALL_OW 72
53404: PPUSH
53405: CALL_OW 1
53409: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
53410: LD_ADDR_EXP 67
53414: PUSH
53415: LD_EXP 67
53419: PPUSH
53420: LD_VAR 0 2
53424: PPUSH
53425: EMPTY
53426: PPUSH
53427: CALL_OW 1
53431: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
53432: LD_ADDR_EXP 71
53436: PUSH
53437: LD_EXP 71
53441: PPUSH
53442: LD_VAR 0 2
53446: PPUSH
53447: EMPTY
53448: PPUSH
53449: CALL_OW 1
53453: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
53454: LD_ADDR_EXP 70
53458: PUSH
53459: LD_EXP 70
53463: PPUSH
53464: LD_VAR 0 2
53468: PPUSH
53469: EMPTY
53470: PPUSH
53471: CALL_OW 1
53475: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
53476: LD_ADDR_EXP 72
53480: PUSH
53481: LD_EXP 72
53485: PPUSH
53486: LD_VAR 0 2
53490: PPUSH
53491: EMPTY
53492: PPUSH
53493: CALL_OW 1
53497: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
53498: LD_ADDR_EXP 73
53502: PUSH
53503: LD_EXP 73
53507: PPUSH
53508: LD_VAR 0 2
53512: PPUSH
53513: EMPTY
53514: PPUSH
53515: CALL_OW 1
53519: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
53520: LD_ADDR_EXP 74
53524: PUSH
53525: LD_EXP 74
53529: PPUSH
53530: LD_VAR 0 2
53534: PPUSH
53535: EMPTY
53536: PPUSH
53537: CALL_OW 1
53541: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
53542: LD_ADDR_EXP 75
53546: PUSH
53547: LD_EXP 75
53551: PPUSH
53552: LD_VAR 0 2
53556: PPUSH
53557: EMPTY
53558: PPUSH
53559: CALL_OW 1
53563: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
53564: LD_ADDR_EXP 76
53568: PUSH
53569: LD_EXP 76
53573: PPUSH
53574: LD_VAR 0 2
53578: PPUSH
53579: EMPTY
53580: PPUSH
53581: CALL_OW 1
53585: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53586: LD_ADDR_EXP 77
53590: PUSH
53591: LD_EXP 77
53595: PPUSH
53596: LD_VAR 0 2
53600: PPUSH
53601: EMPTY
53602: PPUSH
53603: CALL_OW 1
53607: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
53608: LD_ADDR_EXP 78
53612: PUSH
53613: LD_EXP 78
53617: PPUSH
53618: LD_VAR 0 2
53622: PPUSH
53623: EMPTY
53624: PPUSH
53625: CALL_OW 1
53629: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53630: LD_ADDR_EXP 79
53634: PUSH
53635: LD_EXP 79
53639: PPUSH
53640: LD_VAR 0 2
53644: PPUSH
53645: EMPTY
53646: PPUSH
53647: CALL_OW 1
53651: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
53652: LD_ADDR_EXP 68
53656: PUSH
53657: LD_EXP 68
53661: PPUSH
53662: LD_VAR 0 2
53666: PPUSH
53667: LD_INT 0
53669: PPUSH
53670: CALL_OW 1
53674: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
53675: LD_ADDR_EXP 81
53679: PUSH
53680: LD_EXP 81
53684: PPUSH
53685: LD_VAR 0 2
53689: PPUSH
53690: LD_INT 0
53692: PPUSH
53693: CALL_OW 1
53697: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
53698: LD_ADDR_EXP 69
53702: PUSH
53703: LD_EXP 69
53707: PPUSH
53708: LD_VAR 0 2
53712: PPUSH
53713: EMPTY
53714: PPUSH
53715: CALL_OW 1
53719: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
53720: LD_ADDR_EXP 80
53724: PUSH
53725: LD_EXP 80
53729: PPUSH
53730: LD_VAR 0 2
53734: PPUSH
53735: LD_INT 0
53737: PPUSH
53738: CALL_OW 1
53742: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
53743: LD_ADDR_EXP 82
53747: PUSH
53748: LD_EXP 82
53752: PPUSH
53753: LD_VAR 0 2
53757: PPUSH
53758: EMPTY
53759: PPUSH
53760: CALL_OW 1
53764: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
53765: LD_ADDR_EXP 85
53769: PUSH
53770: LD_EXP 85
53774: PPUSH
53775: LD_VAR 0 2
53779: PPUSH
53780: LD_INT 0
53782: PPUSH
53783: CALL_OW 1
53787: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
53788: LD_ADDR_EXP 86
53792: PUSH
53793: LD_EXP 86
53797: PPUSH
53798: LD_VAR 0 2
53802: PPUSH
53803: EMPTY
53804: PPUSH
53805: CALL_OW 1
53809: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
53810: LD_ADDR_EXP 87
53814: PUSH
53815: LD_EXP 87
53819: PPUSH
53820: LD_VAR 0 2
53824: PPUSH
53825: EMPTY
53826: PPUSH
53827: CALL_OW 1
53831: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
53832: LD_ADDR_EXP 88
53836: PUSH
53837: LD_EXP 88
53841: PPUSH
53842: LD_VAR 0 2
53846: PPUSH
53847: EMPTY
53848: PPUSH
53849: CALL_OW 1
53853: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
53854: LD_ADDR_EXP 90
53858: PUSH
53859: LD_EXP 90
53863: PPUSH
53864: LD_VAR 0 2
53868: PPUSH
53869: LD_EXP 57
53873: PUSH
53874: LD_VAR 0 2
53878: ARRAY
53879: PPUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 30
53885: PUSH
53886: LD_INT 6
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 30
53895: PUSH
53896: LD_INT 7
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 30
53905: PUSH
53906: LD_INT 8
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: PPUSH
53919: CALL_OW 72
53923: PPUSH
53924: CALL_OW 1
53928: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
53929: LD_ADDR_EXP 91
53933: PUSH
53934: LD_EXP 91
53938: PPUSH
53939: LD_VAR 0 2
53943: PPUSH
53944: EMPTY
53945: PPUSH
53946: CALL_OW 1
53950: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
53951: LD_ADDR_EXP 92
53955: PUSH
53956: LD_EXP 92
53960: PPUSH
53961: LD_VAR 0 2
53965: PPUSH
53966: EMPTY
53967: PPUSH
53968: CALL_OW 1
53972: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53973: LD_ADDR_EXP 93
53977: PUSH
53978: LD_EXP 93
53982: PPUSH
53983: LD_VAR 0 2
53987: PPUSH
53988: EMPTY
53989: PPUSH
53990: CALL_OW 1
53994: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53995: LD_ADDR_EXP 94
53999: PUSH
54000: LD_EXP 94
54004: PPUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: EMPTY
54011: PPUSH
54012: CALL_OW 1
54016: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
54017: LD_ADDR_EXP 95
54021: PUSH
54022: LD_EXP 95
54026: PPUSH
54027: LD_VAR 0 2
54031: PPUSH
54032: EMPTY
54033: PPUSH
54034: CALL_OW 1
54038: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
54039: LD_ADDR_EXP 96
54043: PUSH
54044: LD_EXP 96
54048: PPUSH
54049: LD_VAR 0 2
54053: PPUSH
54054: EMPTY
54055: PPUSH
54056: CALL_OW 1
54060: ST_TO_ADDR
// end ;
54061: GO 53129
54063: POP
54064: POP
// MC_InitSides ( ) ;
54065: CALL 54351 0 0
// MC_InitResearch ( ) ;
54069: CALL 54090 0 0
// CustomInitMacro ( ) ;
54073: CALL 174 0 0
// skirmish := true ;
54077: LD_ADDR_EXP 56
54081: PUSH
54082: LD_INT 1
54084: ST_TO_ADDR
// end ;
54085: LD_VAR 0 1
54089: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
54090: LD_INT 0
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
// if not mc_bases then
54098: LD_EXP 57
54102: NOT
54103: IFFALSE 54107
// exit ;
54105: GO 54346
// for i = 1 to 8 do
54107: LD_ADDR_VAR 0 2
54111: PUSH
54112: DOUBLE
54113: LD_INT 1
54115: DEC
54116: ST_TO_ADDR
54117: LD_INT 8
54119: PUSH
54120: FOR_TO
54121: IFFALSE 54147
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
54123: LD_ADDR_EXP 84
54127: PUSH
54128: LD_EXP 84
54132: PPUSH
54133: LD_VAR 0 2
54137: PPUSH
54138: EMPTY
54139: PPUSH
54140: CALL_OW 1
54144: ST_TO_ADDR
54145: GO 54120
54147: POP
54148: POP
// tmp := [ ] ;
54149: LD_ADDR_VAR 0 5
54153: PUSH
54154: EMPTY
54155: ST_TO_ADDR
// for i = 1 to mc_sides do
54156: LD_ADDR_VAR 0 2
54160: PUSH
54161: DOUBLE
54162: LD_INT 1
54164: DEC
54165: ST_TO_ADDR
54166: LD_EXP 83
54170: PUSH
54171: FOR_TO
54172: IFFALSE 54230
// if not mc_sides [ i ] in tmp then
54174: LD_EXP 83
54178: PUSH
54179: LD_VAR 0 2
54183: ARRAY
54184: PUSH
54185: LD_VAR 0 5
54189: IN
54190: NOT
54191: IFFALSE 54228
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
54193: LD_ADDR_VAR 0 5
54197: PUSH
54198: LD_VAR 0 5
54202: PPUSH
54203: LD_VAR 0 5
54207: PUSH
54208: LD_INT 1
54210: PLUS
54211: PPUSH
54212: LD_EXP 83
54216: PUSH
54217: LD_VAR 0 2
54221: ARRAY
54222: PPUSH
54223: CALL_OW 2
54227: ST_TO_ADDR
54228: GO 54171
54230: POP
54231: POP
// if not tmp then
54232: LD_VAR 0 5
54236: NOT
54237: IFFALSE 54241
// exit ;
54239: GO 54346
// for j in tmp do
54241: LD_ADDR_VAR 0 3
54245: PUSH
54246: LD_VAR 0 5
54250: PUSH
54251: FOR_IN
54252: IFFALSE 54344
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
54254: LD_ADDR_VAR 0 6
54258: PUSH
54259: LD_INT 22
54261: PUSH
54262: LD_VAR 0 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PPUSH
54271: CALL_OW 69
54275: ST_TO_ADDR
// if not un then
54276: LD_VAR 0 6
54280: NOT
54281: IFFALSE 54285
// continue ;
54283: GO 54251
// nation := GetNation ( un [ 1 ] ) ;
54285: LD_ADDR_VAR 0 4
54289: PUSH
54290: LD_VAR 0 6
54294: PUSH
54295: LD_INT 1
54297: ARRAY
54298: PPUSH
54299: CALL_OW 248
54303: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
54304: LD_ADDR_EXP 84
54308: PUSH
54309: LD_EXP 84
54313: PPUSH
54314: LD_VAR 0 3
54318: PPUSH
54319: LD_VAR 0 3
54323: PPUSH
54324: LD_VAR 0 4
54328: PPUSH
54329: LD_INT 1
54331: PPUSH
54332: CALL 13528 0 3
54336: PPUSH
54337: CALL_OW 1
54341: ST_TO_ADDR
// end ;
54342: GO 54251
54344: POP
54345: POP
// end ;
54346: LD_VAR 0 1
54350: RET
// export function MC_InitSides ( ) ; var i ; begin
54351: LD_INT 0
54353: PPUSH
54354: PPUSH
// if not mc_bases then
54355: LD_EXP 57
54359: NOT
54360: IFFALSE 54364
// exit ;
54362: GO 54438
// for i = 1 to mc_bases do
54364: LD_ADDR_VAR 0 2
54368: PUSH
54369: DOUBLE
54370: LD_INT 1
54372: DEC
54373: ST_TO_ADDR
54374: LD_EXP 57
54378: PUSH
54379: FOR_TO
54380: IFFALSE 54436
// if mc_bases [ i ] then
54382: LD_EXP 57
54386: PUSH
54387: LD_VAR 0 2
54391: ARRAY
54392: IFFALSE 54434
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
54394: LD_ADDR_EXP 83
54398: PUSH
54399: LD_EXP 83
54403: PPUSH
54404: LD_VAR 0 2
54408: PPUSH
54409: LD_EXP 57
54413: PUSH
54414: LD_VAR 0 2
54418: ARRAY
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: PPUSH
54424: CALL_OW 255
54428: PPUSH
54429: CALL_OW 1
54433: ST_TO_ADDR
54434: GO 54379
54436: POP
54437: POP
// end ;
54438: LD_VAR 0 1
54442: RET
// every 0 0$01 trigger skirmish do
54443: LD_EXP 56
54447: IFFALSE 54580
54449: GO 54451
54451: DISABLE
// begin enable ;
54452: ENABLE
// MC_CheckBuildings ( ) ;
54453: CALL 55065 0 0
// MC_CheckPeopleLife ( ) ;
54457: CALL 55190 0 0
// RaiseSailEvent ( 103 ) ;
54461: LD_INT 103
54463: PPUSH
54464: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
54468: LD_INT 104
54470: PPUSH
54471: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
54475: LD_INT 105
54477: PPUSH
54478: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
54482: LD_INT 106
54484: PPUSH
54485: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
54489: LD_INT 107
54491: PPUSH
54492: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
54496: LD_INT 108
54498: PPUSH
54499: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
54503: LD_INT 109
54505: PPUSH
54506: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
54510: LD_INT 110
54512: PPUSH
54513: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
54517: LD_INT 111
54519: PPUSH
54520: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
54524: LD_INT 112
54526: PPUSH
54527: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
54531: LD_INT 120
54533: PPUSH
54534: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
54538: LD_INT 121
54540: PPUSH
54541: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
54545: LD_INT 122
54547: PPUSH
54548: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
54552: LD_INT 123
54554: PPUSH
54555: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
54559: LD_INT 125
54561: PPUSH
54562: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
54566: LD_INT 126
54568: PPUSH
54569: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
54573: LD_INT 200
54575: PPUSH
54576: CALL_OW 427
// end ;
54580: END
// every 10 trigger skirmish do var i ;
54581: LD_EXP 56
54585: IFFALSE 54684
54587: GO 54589
54589: DISABLE
54590: LD_INT 0
54592: PPUSH
// begin enable ;
54593: ENABLE
// if not mc_bases then
54594: LD_EXP 57
54598: NOT
54599: IFFALSE 54603
// exit ;
54601: GO 54684
// for i = 1 to mc_bases do
54603: LD_ADDR_VAR 0 1
54607: PUSH
54608: DOUBLE
54609: LD_INT 1
54611: DEC
54612: ST_TO_ADDR
54613: LD_EXP 57
54617: PUSH
54618: FOR_TO
54619: IFFALSE 54682
// if mc_mines [ i ] and mc_miners [ i ] then
54621: LD_EXP 70
54625: PUSH
54626: LD_VAR 0 1
54630: ARRAY
54631: PUSH
54632: LD_EXP 71
54636: PUSH
54637: LD_VAR 0 1
54641: ARRAY
54642: AND
54643: IFFALSE 54680
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
54645: LD_EXP 71
54649: PUSH
54650: LD_VAR 0 1
54654: ARRAY
54655: PUSH
54656: LD_INT 1
54658: ARRAY
54659: PPUSH
54660: CALL_OW 255
54664: PPUSH
54665: LD_EXP 70
54669: PUSH
54670: LD_VAR 0 1
54674: ARRAY
54675: PPUSH
54676: CALL 16760 0 2
54680: GO 54618
54682: POP
54683: POP
// end ;
54684: PPOPN 1
54686: END
// on SailEvent ( event ) do begin if event = 101 then
54687: LD_VAR 0 1
54691: PUSH
54692: LD_INT 101
54694: EQUAL
54695: IFFALSE 54701
// MC_RepairBuildings ( ) ;
54697: CALL 55748 0 0
// if event = 102 then
54701: LD_VAR 0 1
54705: PUSH
54706: LD_INT 102
54708: EQUAL
54709: IFFALSE 54715
// MC_Heal ( ) ;
54711: CALL 56154 0 0
// if event = 103 then
54715: LD_VAR 0 1
54719: PUSH
54720: LD_INT 103
54722: EQUAL
54723: IFFALSE 54729
// MC_Build ( ) ;
54725: CALL 56576 0 0
// if event = 104 then
54729: LD_VAR 0 1
54733: PUSH
54734: LD_INT 104
54736: EQUAL
54737: IFFALSE 54743
// MC_TurretWeapon ( ) ;
54739: CALL 57993 0 0
// if event = 105 then
54743: LD_VAR 0 1
54747: PUSH
54748: LD_INT 105
54750: EQUAL
54751: IFFALSE 54757
// MC_BuildUpgrade ( ) ;
54753: CALL 57544 0 0
// if event = 106 then
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 106
54764: EQUAL
54765: IFFALSE 54771
// MC_PlantMines ( ) ;
54767: CALL 58345 0 0
// if event = 107 then
54771: LD_VAR 0 1
54775: PUSH
54776: LD_INT 107
54778: EQUAL
54779: IFFALSE 54785
// MC_CollectCrates ( ) ;
54781: CALL 59352 0 0
// if event = 108 then
54785: LD_VAR 0 1
54789: PUSH
54790: LD_INT 108
54792: EQUAL
54793: IFFALSE 54799
// MC_LinkRemoteControl ( ) ;
54795: CALL 60856 0 0
// if event = 109 then
54799: LD_VAR 0 1
54803: PUSH
54804: LD_INT 109
54806: EQUAL
54807: IFFALSE 54813
// MC_ProduceVehicle ( ) ;
54809: CALL 61037 0 0
// if event = 110 then
54813: LD_VAR 0 1
54817: PUSH
54818: LD_INT 110
54820: EQUAL
54821: IFFALSE 54827
// MC_SendAttack ( ) ;
54823: CALL 61518 0 0
// if event = 111 then
54827: LD_VAR 0 1
54831: PUSH
54832: LD_INT 111
54834: EQUAL
54835: IFFALSE 54841
// MC_Defend ( ) ;
54837: CALL 61626 0 0
// if event = 112 then
54841: LD_VAR 0 1
54845: PUSH
54846: LD_INT 112
54848: EQUAL
54849: IFFALSE 54855
// MC_Research ( ) ;
54851: CALL 62024 0 0
// if event = 120 then
54855: LD_VAR 0 1
54859: PUSH
54860: LD_INT 120
54862: EQUAL
54863: IFFALSE 54869
// MC_RepairVehicle ( ) ;
54865: CALL 62993 0 0
// if event = 121 then
54869: LD_VAR 0 1
54873: PUSH
54874: LD_INT 121
54876: EQUAL
54877: IFFALSE 54883
// MC_TameApe ( ) ;
54879: CALL 63682 0 0
// if event = 122 then
54883: LD_VAR 0 1
54887: PUSH
54888: LD_INT 122
54890: EQUAL
54891: IFFALSE 54897
// MC_ChangeApeClass ( ) ;
54893: CALL 64445 0 0
// if event = 123 then
54897: LD_VAR 0 1
54901: PUSH
54902: LD_INT 123
54904: EQUAL
54905: IFFALSE 54911
// MC_Bazooka ( ) ;
54907: CALL 65079 0 0
// if event = 124 then
54911: LD_VAR 0 1
54915: PUSH
54916: LD_INT 124
54918: EQUAL
54919: IFFALSE 54925
// MC_TeleportExit ( ) ;
54921: CALL 65277 0 0
// if event = 125 then
54925: LD_VAR 0 1
54929: PUSH
54930: LD_INT 125
54932: EQUAL
54933: IFFALSE 54939
// MC_Deposits ( ) ;
54935: CALL 65319 0 0
// if event = 126 then
54939: LD_VAR 0 1
54943: PUSH
54944: LD_INT 126
54946: EQUAL
54947: IFFALSE 54953
// MC_RemoteDriver ( ) ;
54949: CALL 65898 0 0
// if event = 200 then
54953: LD_VAR 0 1
54957: PUSH
54958: LD_INT 200
54960: EQUAL
54961: IFFALSE 54967
// MC_Idle ( ) ;
54963: CALL 67403 0 0
// end ;
54967: PPOPN 1
54969: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54970: LD_INT 0
54972: PPUSH
54973: PPUSH
// if not mc_bases [ base ] or not tag then
54974: LD_EXP 57
54978: PUSH
54979: LD_VAR 0 1
54983: ARRAY
54984: NOT
54985: PUSH
54986: LD_VAR 0 2
54990: NOT
54991: OR
54992: IFFALSE 54996
// exit ;
54994: GO 55060
// for i in mc_bases [ base ] union mc_ape [ base ] do
54996: LD_ADDR_VAR 0 4
55000: PUSH
55001: LD_EXP 57
55005: PUSH
55006: LD_VAR 0 1
55010: ARRAY
55011: PUSH
55012: LD_EXP 86
55016: PUSH
55017: LD_VAR 0 1
55021: ARRAY
55022: UNION
55023: PUSH
55024: FOR_IN
55025: IFFALSE 55058
// if GetTag ( i ) = tag then
55027: LD_VAR 0 4
55031: PPUSH
55032: CALL_OW 110
55036: PUSH
55037: LD_VAR 0 2
55041: EQUAL
55042: IFFALSE 55056
// SetTag ( i , 0 ) ;
55044: LD_VAR 0 4
55048: PPUSH
55049: LD_INT 0
55051: PPUSH
55052: CALL_OW 109
55056: GO 55024
55058: POP
55059: POP
// end ;
55060: LD_VAR 0 3
55064: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55065: LD_INT 0
55067: PPUSH
55068: PPUSH
55069: PPUSH
// if not mc_bases then
55070: LD_EXP 57
55074: NOT
55075: IFFALSE 55079
// exit ;
55077: GO 55185
// for i = 1 to mc_bases do
55079: LD_ADDR_VAR 0 2
55083: PUSH
55084: DOUBLE
55085: LD_INT 1
55087: DEC
55088: ST_TO_ADDR
55089: LD_EXP 57
55093: PUSH
55094: FOR_TO
55095: IFFALSE 55176
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55097: LD_ADDR_VAR 0 3
55101: PUSH
55102: LD_EXP 57
55106: PUSH
55107: LD_VAR 0 2
55111: ARRAY
55112: PPUSH
55113: LD_INT 21
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: LD_INT 24
55128: PUSH
55129: LD_INT 1000
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PPUSH
55144: CALL_OW 72
55148: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55149: LD_ADDR_EXP 58
55153: PUSH
55154: LD_EXP 58
55158: PPUSH
55159: LD_VAR 0 2
55163: PPUSH
55164: LD_VAR 0 3
55168: PPUSH
55169: CALL_OW 1
55173: ST_TO_ADDR
// end ;
55174: GO 55094
55176: POP
55177: POP
// RaiseSailEvent ( 101 ) ;
55178: LD_INT 101
55180: PPUSH
55181: CALL_OW 427
// end ;
55185: LD_VAR 0 1
55189: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55190: LD_INT 0
55192: PPUSH
55193: PPUSH
55194: PPUSH
55195: PPUSH
55196: PPUSH
55197: PPUSH
55198: PPUSH
// if not mc_bases then
55199: LD_EXP 57
55203: NOT
55204: IFFALSE 55208
// exit ;
55206: GO 55743
// for i = 1 to mc_bases do
55208: LD_ADDR_VAR 0 2
55212: PUSH
55213: DOUBLE
55214: LD_INT 1
55216: DEC
55217: ST_TO_ADDR
55218: LD_EXP 57
55222: PUSH
55223: FOR_TO
55224: IFFALSE 55734
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
55226: LD_ADDR_VAR 0 5
55230: PUSH
55231: LD_EXP 57
55235: PUSH
55236: LD_VAR 0 2
55240: ARRAY
55241: PUSH
55242: LD_EXP 86
55246: PUSH
55247: LD_VAR 0 2
55251: ARRAY
55252: UNION
55253: PPUSH
55254: LD_INT 21
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 54
55272: PUSH
55273: EMPTY
55274: LIST
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: LD_INT 24
55285: PUSH
55286: LD_INT 700
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PPUSH
55306: CALL_OW 72
55310: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55311: LD_ADDR_VAR 0 6
55315: PUSH
55316: LD_EXP 57
55320: PUSH
55321: LD_VAR 0 2
55325: ARRAY
55326: PPUSH
55327: LD_INT 21
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 54
55345: PUSH
55346: EMPTY
55347: LIST
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: LD_INT 24
55358: PUSH
55359: LD_INT 250
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PPUSH
55379: CALL_OW 72
55383: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
55384: LD_ADDR_VAR 0 7
55388: PUSH
55389: LD_VAR 0 5
55393: PUSH
55394: LD_VAR 0 6
55398: DIFF
55399: ST_TO_ADDR
// if not need_heal_1 then
55400: LD_VAR 0 6
55404: NOT
55405: IFFALSE 55438
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
55407: LD_ADDR_EXP 60
55411: PUSH
55412: LD_EXP 60
55416: PPUSH
55417: LD_VAR 0 2
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PPUSH
55429: EMPTY
55430: PPUSH
55431: CALL 20102 0 3
55435: ST_TO_ADDR
55436: GO 55470
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
55438: LD_ADDR_EXP 60
55442: PUSH
55443: LD_EXP 60
55447: PPUSH
55448: LD_VAR 0 2
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PPUSH
55460: LD_VAR 0 6
55464: PPUSH
55465: CALL 20102 0 3
55469: ST_TO_ADDR
// if not need_heal_2 then
55470: LD_VAR 0 7
55474: NOT
55475: IFFALSE 55508
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
55477: LD_ADDR_EXP 60
55481: PUSH
55482: LD_EXP 60
55486: PPUSH
55487: LD_VAR 0 2
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PPUSH
55499: EMPTY
55500: PPUSH
55501: CALL 20102 0 3
55505: ST_TO_ADDR
55506: GO 55540
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
55508: LD_ADDR_EXP 60
55512: PUSH
55513: LD_EXP 60
55517: PPUSH
55518: LD_VAR 0 2
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PPUSH
55530: LD_VAR 0 7
55534: PPUSH
55535: CALL 20102 0 3
55539: ST_TO_ADDR
// if need_heal_2 then
55540: LD_VAR 0 7
55544: IFFALSE 55716
// for j in need_heal_2 do
55546: LD_ADDR_VAR 0 3
55550: PUSH
55551: LD_VAR 0 7
55555: PUSH
55556: FOR_IN
55557: IFFALSE 55714
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
55559: LD_ADDR_VAR 0 5
55563: PUSH
55564: LD_EXP 57
55568: PUSH
55569: LD_VAR 0 2
55573: ARRAY
55574: PPUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 30
55580: PUSH
55581: LD_INT 6
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 30
55590: PUSH
55591: LD_INT 7
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 30
55600: PUSH
55601: LD_INT 8
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 30
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 30
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 25
55630: PUSH
55631: LD_INT 4
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: PPUSH
55647: CALL_OW 72
55651: ST_TO_ADDR
// if tmp then
55652: LD_VAR 0 5
55656: IFFALSE 55712
// begin k := NearestUnitToUnit ( tmp , j ) ;
55658: LD_ADDR_VAR 0 4
55662: PUSH
55663: LD_VAR 0 5
55667: PPUSH
55668: LD_VAR 0 3
55672: PPUSH
55673: CALL_OW 74
55677: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
55678: LD_VAR 0 3
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: CALL_OW 296
55692: PUSH
55693: LD_INT 7
55695: GREATER
55696: IFFALSE 55712
// ComMoveUnit ( j , k ) ;
55698: LD_VAR 0 3
55702: PPUSH
55703: LD_VAR 0 4
55707: PPUSH
55708: CALL_OW 112
// end ; end ;
55712: GO 55556
55714: POP
55715: POP
// if not need_heal_1 and not need_heal_2 then
55716: LD_VAR 0 6
55720: NOT
55721: PUSH
55722: LD_VAR 0 7
55726: NOT
55727: AND
55728: IFFALSE 55732
// continue ;
55730: GO 55223
// end ;
55732: GO 55223
55734: POP
55735: POP
// RaiseSailEvent ( 102 ) ;
55736: LD_INT 102
55738: PPUSH
55739: CALL_OW 427
// end ;
55743: LD_VAR 0 1
55747: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
55748: LD_INT 0
55750: PPUSH
55751: PPUSH
55752: PPUSH
55753: PPUSH
55754: PPUSH
// if not mc_bases then
55755: LD_EXP 57
55759: NOT
55760: IFFALSE 55764
// exit ;
55762: GO 56149
// for i = 1 to mc_bases do
55764: LD_ADDR_VAR 0 2
55768: PUSH
55769: DOUBLE
55770: LD_INT 1
55772: DEC
55773: ST_TO_ADDR
55774: LD_EXP 57
55778: PUSH
55779: FOR_TO
55780: IFFALSE 56147
// begin if not mc_building_need_repair [ i ] then
55782: LD_EXP 58
55786: PUSH
55787: LD_VAR 0 2
55791: ARRAY
55792: NOT
55793: IFFALSE 55831
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55795: LD_ADDR_EXP 59
55799: PUSH
55800: LD_EXP 59
55804: PPUSH
55805: LD_VAR 0 2
55809: PPUSH
55810: EMPTY
55811: PPUSH
55812: CALL_OW 1
55816: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
55817: LD_VAR 0 2
55821: PPUSH
55822: LD_INT 101
55824: PPUSH
55825: CALL 54970 0 2
// continue ;
55829: GO 55779
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
55831: LD_ADDR_EXP 63
55835: PUSH
55836: LD_EXP 63
55840: PPUSH
55841: LD_VAR 0 2
55845: PPUSH
55846: EMPTY
55847: PPUSH
55848: CALL_OW 1
55852: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
55853: LD_VAR 0 2
55857: PPUSH
55858: LD_INT 103
55860: PPUSH
55861: CALL 54970 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
55865: LD_ADDR_VAR 0 5
55869: PUSH
55870: LD_EXP 57
55874: PUSH
55875: LD_VAR 0 2
55879: ARRAY
55880: PUSH
55881: LD_EXP 86
55885: PUSH
55886: LD_VAR 0 2
55890: ARRAY
55891: UNION
55892: PPUSH
55893: LD_INT 2
55895: PUSH
55896: LD_INT 25
55898: PUSH
55899: LD_INT 2
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 25
55908: PUSH
55909: LD_INT 16
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: PUSH
55921: EMPTY
55922: LIST
55923: PPUSH
55924: CALL_OW 72
55928: ST_TO_ADDR
// if not tmp then
55929: LD_VAR 0 5
55933: NOT
55934: IFFALSE 55938
// continue ;
55936: GO 55779
// for j in tmp do
55938: LD_ADDR_VAR 0 3
55942: PUSH
55943: LD_VAR 0 5
55947: PUSH
55948: FOR_IN
55949: IFFALSE 56143
// begin if mc_need_heal [ i ] then
55951: LD_EXP 60
55955: PUSH
55956: LD_VAR 0 2
55960: ARRAY
55961: IFFALSE 56009
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
55963: LD_VAR 0 3
55967: PUSH
55968: LD_EXP 60
55972: PUSH
55973: LD_VAR 0 2
55977: ARRAY
55978: PUSH
55979: LD_INT 1
55981: ARRAY
55982: IN
55983: PUSH
55984: LD_VAR 0 3
55988: PUSH
55989: LD_EXP 60
55993: PUSH
55994: LD_VAR 0 2
55998: ARRAY
55999: PUSH
56000: LD_INT 2
56002: ARRAY
56003: IN
56004: OR
56005: IFFALSE 56009
// continue ;
56007: GO 55948
// if IsInUnit ( j ) then
56009: LD_VAR 0 3
56013: PPUSH
56014: CALL_OW 310
56018: IFFALSE 56029
// ComExitBuilding ( j ) ;
56020: LD_VAR 0 3
56024: PPUSH
56025: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
56029: LD_VAR 0 3
56033: PUSH
56034: LD_EXP 59
56038: PUSH
56039: LD_VAR 0 2
56043: ARRAY
56044: IN
56045: NOT
56046: IFFALSE 56104
// begin SetTag ( j , 101 ) ;
56048: LD_VAR 0 3
56052: PPUSH
56053: LD_INT 101
56055: PPUSH
56056: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
56060: LD_ADDR_EXP 59
56064: PUSH
56065: LD_EXP 59
56069: PPUSH
56070: LD_VAR 0 2
56074: PUSH
56075: LD_EXP 59
56079: PUSH
56080: LD_VAR 0 2
56084: ARRAY
56085: PUSH
56086: LD_INT 1
56088: PLUS
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PPUSH
56094: LD_VAR 0 3
56098: PPUSH
56099: CALL 20102 0 3
56103: ST_TO_ADDR
// end ; Wait ( 3 ) ;
56104: LD_INT 3
56106: PPUSH
56107: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
56111: LD_VAR 0 3
56115: PPUSH
56116: LD_EXP 58
56120: PUSH
56121: LD_VAR 0 2
56125: ARRAY
56126: PPUSH
56127: LD_VAR 0 3
56131: PPUSH
56132: CALL_OW 74
56136: PPUSH
56137: CALL_OW 130
// end ;
56141: GO 55948
56143: POP
56144: POP
// end ;
56145: GO 55779
56147: POP
56148: POP
// end ;
56149: LD_VAR 0 1
56153: RET
// export function MC_Heal ; var i , j , tmp ; begin
56154: LD_INT 0
56156: PPUSH
56157: PPUSH
56158: PPUSH
56159: PPUSH
// if not mc_bases then
56160: LD_EXP 57
56164: NOT
56165: IFFALSE 56169
// exit ;
56167: GO 56571
// for i = 1 to mc_bases do
56169: LD_ADDR_VAR 0 2
56173: PUSH
56174: DOUBLE
56175: LD_INT 1
56177: DEC
56178: ST_TO_ADDR
56179: LD_EXP 57
56183: PUSH
56184: FOR_TO
56185: IFFALSE 56569
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
56187: LD_EXP 60
56191: PUSH
56192: LD_VAR 0 2
56196: ARRAY
56197: PUSH
56198: LD_INT 1
56200: ARRAY
56201: NOT
56202: PUSH
56203: LD_EXP 60
56207: PUSH
56208: LD_VAR 0 2
56212: ARRAY
56213: PUSH
56214: LD_INT 2
56216: ARRAY
56217: NOT
56218: AND
56219: IFFALSE 56257
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
56221: LD_ADDR_EXP 61
56225: PUSH
56226: LD_EXP 61
56230: PPUSH
56231: LD_VAR 0 2
56235: PPUSH
56236: EMPTY
56237: PPUSH
56238: CALL_OW 1
56242: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
56243: LD_VAR 0 2
56247: PPUSH
56248: LD_INT 102
56250: PPUSH
56251: CALL 54970 0 2
// continue ;
56255: GO 56184
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
56257: LD_ADDR_VAR 0 4
56261: PUSH
56262: LD_EXP 57
56266: PUSH
56267: LD_VAR 0 2
56271: ARRAY
56272: PPUSH
56273: LD_INT 25
56275: PUSH
56276: LD_INT 4
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 72
56287: ST_TO_ADDR
// if not tmp then
56288: LD_VAR 0 4
56292: NOT
56293: IFFALSE 56297
// continue ;
56295: GO 56184
// if mc_taming [ i ] then
56297: LD_EXP 88
56301: PUSH
56302: LD_VAR 0 2
56306: ARRAY
56307: IFFALSE 56331
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56309: LD_ADDR_EXP 88
56313: PUSH
56314: LD_EXP 88
56318: PPUSH
56319: LD_VAR 0 2
56323: PPUSH
56324: EMPTY
56325: PPUSH
56326: CALL_OW 1
56330: ST_TO_ADDR
// for j in tmp do
56331: LD_ADDR_VAR 0 3
56335: PUSH
56336: LD_VAR 0 4
56340: PUSH
56341: FOR_IN
56342: IFFALSE 56565
// begin if IsInUnit ( j ) then
56344: LD_VAR 0 3
56348: PPUSH
56349: CALL_OW 310
56353: IFFALSE 56364
// ComExitBuilding ( j ) ;
56355: LD_VAR 0 3
56359: PPUSH
56360: CALL_OW 122
// if not j in mc_healers [ i ] then
56364: LD_VAR 0 3
56368: PUSH
56369: LD_EXP 61
56373: PUSH
56374: LD_VAR 0 2
56378: ARRAY
56379: IN
56380: NOT
56381: IFFALSE 56427
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
56383: LD_ADDR_EXP 61
56387: PUSH
56388: LD_EXP 61
56392: PPUSH
56393: LD_VAR 0 2
56397: PUSH
56398: LD_EXP 61
56402: PUSH
56403: LD_VAR 0 2
56407: ARRAY
56408: PUSH
56409: LD_INT 1
56411: PLUS
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PPUSH
56417: LD_VAR 0 3
56421: PPUSH
56422: CALL 20102 0 3
56426: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
56427: LD_VAR 0 3
56431: PPUSH
56432: CALL_OW 110
56436: PUSH
56437: LD_INT 102
56439: NONEQUAL
56440: IFFALSE 56454
// SetTag ( j , 102 ) ;
56442: LD_VAR 0 3
56446: PPUSH
56447: LD_INT 102
56449: PPUSH
56450: CALL_OW 109
// Wait ( 3 ) ;
56454: LD_INT 3
56456: PPUSH
56457: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
56461: LD_EXP 60
56465: PUSH
56466: LD_VAR 0 2
56470: ARRAY
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: IFFALSE 56507
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
56477: LD_VAR 0 3
56481: PPUSH
56482: LD_EXP 60
56486: PUSH
56487: LD_VAR 0 2
56491: ARRAY
56492: PUSH
56493: LD_INT 1
56495: ARRAY
56496: PUSH
56497: LD_INT 1
56499: ARRAY
56500: PPUSH
56501: CALL_OW 128
56505: GO 56563
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
56507: LD_VAR 0 3
56511: PPUSH
56512: CALL_OW 314
56516: NOT
56517: PUSH
56518: LD_EXP 60
56522: PUSH
56523: LD_VAR 0 2
56527: ARRAY
56528: PUSH
56529: LD_INT 2
56531: ARRAY
56532: AND
56533: IFFALSE 56563
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
56535: LD_VAR 0 3
56539: PPUSH
56540: LD_EXP 60
56544: PUSH
56545: LD_VAR 0 2
56549: ARRAY
56550: PUSH
56551: LD_INT 2
56553: ARRAY
56554: PUSH
56555: LD_INT 1
56557: ARRAY
56558: PPUSH
56559: CALL_OW 128
// end ;
56563: GO 56341
56565: POP
56566: POP
// end ;
56567: GO 56184
56569: POP
56570: POP
// end ;
56571: LD_VAR 0 1
56575: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
56576: LD_INT 0
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
// if not mc_bases then
56582: LD_EXP 57
56586: NOT
56587: IFFALSE 56591
// exit ;
56589: GO 57539
// for i = 1 to mc_bases do
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: DOUBLE
56597: LD_INT 1
56599: DEC
56600: ST_TO_ADDR
56601: LD_EXP 57
56605: PUSH
56606: FOR_TO
56607: IFFALSE 57537
// begin if mc_scan [ i ] then
56609: LD_EXP 80
56613: PUSH
56614: LD_VAR 0 2
56618: ARRAY
56619: IFFALSE 56623
// continue ;
56621: GO 56606
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
56623: LD_EXP 62
56627: PUSH
56628: LD_VAR 0 2
56632: ARRAY
56633: NOT
56634: PUSH
56635: LD_EXP 64
56639: PUSH
56640: LD_VAR 0 2
56644: ARRAY
56645: NOT
56646: AND
56647: PUSH
56648: LD_EXP 63
56652: PUSH
56653: LD_VAR 0 2
56657: ARRAY
56658: AND
56659: IFFALSE 56697
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
56661: LD_ADDR_EXP 63
56665: PUSH
56666: LD_EXP 63
56670: PPUSH
56671: LD_VAR 0 2
56675: PPUSH
56676: EMPTY
56677: PPUSH
56678: CALL_OW 1
56682: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56683: LD_VAR 0 2
56687: PPUSH
56688: LD_INT 103
56690: PPUSH
56691: CALL 54970 0 2
// continue ;
56695: GO 56606
// end ; if mc_construct_list [ i ] then
56697: LD_EXP 64
56701: PUSH
56702: LD_VAR 0 2
56706: ARRAY
56707: IFFALSE 56927
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
56709: LD_ADDR_VAR 0 4
56713: PUSH
56714: LD_EXP 57
56718: PUSH
56719: LD_VAR 0 2
56723: ARRAY
56724: PPUSH
56725: LD_INT 25
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PPUSH
56735: CALL_OW 72
56739: PUSH
56740: LD_EXP 59
56744: PUSH
56745: LD_VAR 0 2
56749: ARRAY
56750: DIFF
56751: ST_TO_ADDR
// if not tmp then
56752: LD_VAR 0 4
56756: NOT
56757: IFFALSE 56761
// continue ;
56759: GO 56606
// for j in tmp do
56761: LD_ADDR_VAR 0 3
56765: PUSH
56766: LD_VAR 0 4
56770: PUSH
56771: FOR_IN
56772: IFFALSE 56923
// begin if not mc_builders [ i ] then
56774: LD_EXP 63
56778: PUSH
56779: LD_VAR 0 2
56783: ARRAY
56784: NOT
56785: IFFALSE 56843
// begin SetTag ( j , 103 ) ;
56787: LD_VAR 0 3
56791: PPUSH
56792: LD_INT 103
56794: PPUSH
56795: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
56799: LD_ADDR_EXP 63
56803: PUSH
56804: LD_EXP 63
56808: PPUSH
56809: LD_VAR 0 2
56813: PUSH
56814: LD_EXP 63
56818: PUSH
56819: LD_VAR 0 2
56823: ARRAY
56824: PUSH
56825: LD_INT 1
56827: PLUS
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PPUSH
56833: LD_VAR 0 3
56837: PPUSH
56838: CALL 20102 0 3
56842: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
56843: LD_VAR 0 3
56847: PPUSH
56848: CALL_OW 310
56852: IFFALSE 56863
// ComExitBuilding ( j ) ;
56854: LD_VAR 0 3
56858: PPUSH
56859: CALL_OW 122
// wait ( 3 ) ;
56863: LD_INT 3
56865: PPUSH
56866: CALL_OW 67
// if not mc_construct_list [ i ] then
56870: LD_EXP 64
56874: PUSH
56875: LD_VAR 0 2
56879: ARRAY
56880: NOT
56881: IFFALSE 56885
// break ;
56883: GO 56923
// if not HasTask ( j ) then
56885: LD_VAR 0 3
56889: PPUSH
56890: CALL_OW 314
56894: NOT
56895: IFFALSE 56921
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
56897: LD_VAR 0 3
56901: PPUSH
56902: LD_EXP 64
56906: PUSH
56907: LD_VAR 0 2
56911: ARRAY
56912: PUSH
56913: LD_INT 1
56915: ARRAY
56916: PPUSH
56917: CALL 22508 0 2
// end ;
56921: GO 56771
56923: POP
56924: POP
// end else
56925: GO 57535
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
56927: LD_EXP 62
56931: PUSH
56932: LD_VAR 0 2
56936: ARRAY
56937: PUSH
56938: LD_EXP 57
56942: PUSH
56943: LD_VAR 0 2
56947: ARRAY
56948: PPUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 30
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 30
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: PPUSH
56977: CALL_OW 72
56981: AND
56982: IFFALSE 57535
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
56984: LD_EXP 57
56988: PUSH
56989: LD_VAR 0 2
56993: ARRAY
56994: PPUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 30
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 30
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: PPUSH
57023: CALL_OW 72
57027: PUSH
57028: LD_INT 1
57030: ARRAY
57031: PPUSH
57032: LD_EXP 62
57036: PUSH
57037: LD_VAR 0 2
57041: ARRAY
57042: PUSH
57043: LD_INT 1
57045: ARRAY
57046: PUSH
57047: LD_INT 1
57049: ARRAY
57050: PPUSH
57051: LD_EXP 62
57055: PUSH
57056: LD_VAR 0 2
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PUSH
57066: LD_INT 2
57068: ARRAY
57069: PPUSH
57070: LD_EXP 62
57074: PUSH
57075: LD_VAR 0 2
57079: ARRAY
57080: PUSH
57081: LD_INT 1
57083: ARRAY
57084: PUSH
57085: LD_INT 3
57087: ARRAY
57088: PPUSH
57089: LD_EXP 62
57093: PUSH
57094: LD_VAR 0 2
57098: ARRAY
57099: PUSH
57100: LD_INT 1
57102: ARRAY
57103: PUSH
57104: LD_INT 4
57106: ARRAY
57107: PPUSH
57108: CALL 26740 0 5
57112: IFFALSE 57393
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57114: LD_ADDR_VAR 0 4
57118: PUSH
57119: LD_EXP 57
57123: PUSH
57124: LD_VAR 0 2
57128: ARRAY
57129: PPUSH
57130: LD_INT 25
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PPUSH
57140: CALL_OW 72
57144: PUSH
57145: LD_EXP 59
57149: PUSH
57150: LD_VAR 0 2
57154: ARRAY
57155: DIFF
57156: ST_TO_ADDR
// if not tmp then
57157: LD_VAR 0 4
57161: NOT
57162: IFFALSE 57166
// continue ;
57164: GO 56606
// for j in tmp do
57166: LD_ADDR_VAR 0 3
57170: PUSH
57171: LD_VAR 0 4
57175: PUSH
57176: FOR_IN
57177: IFFALSE 57389
// begin if not mc_builders [ i ] then
57179: LD_EXP 63
57183: PUSH
57184: LD_VAR 0 2
57188: ARRAY
57189: NOT
57190: IFFALSE 57248
// begin SetTag ( j , 103 ) ;
57192: LD_VAR 0 3
57196: PPUSH
57197: LD_INT 103
57199: PPUSH
57200: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57204: LD_ADDR_EXP 63
57208: PUSH
57209: LD_EXP 63
57213: PPUSH
57214: LD_VAR 0 2
57218: PUSH
57219: LD_EXP 63
57223: PUSH
57224: LD_VAR 0 2
57228: ARRAY
57229: PUSH
57230: LD_INT 1
57232: PLUS
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PPUSH
57238: LD_VAR 0 3
57242: PPUSH
57243: CALL 20102 0 3
57247: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57248: LD_VAR 0 3
57252: PPUSH
57253: CALL_OW 310
57257: IFFALSE 57268
// ComExitBuilding ( j ) ;
57259: LD_VAR 0 3
57263: PPUSH
57264: CALL_OW 122
// wait ( 3 ) ;
57268: LD_INT 3
57270: PPUSH
57271: CALL_OW 67
// if not mc_build_list [ i ] then
57275: LD_EXP 62
57279: PUSH
57280: LD_VAR 0 2
57284: ARRAY
57285: NOT
57286: IFFALSE 57290
// break ;
57288: GO 57389
// if not HasTask ( j ) then
57290: LD_VAR 0 3
57294: PPUSH
57295: CALL_OW 314
57299: NOT
57300: IFFALSE 57387
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
57302: LD_VAR 0 3
57306: PPUSH
57307: LD_EXP 62
57311: PUSH
57312: LD_VAR 0 2
57316: ARRAY
57317: PUSH
57318: LD_INT 1
57320: ARRAY
57321: PUSH
57322: LD_INT 1
57324: ARRAY
57325: PPUSH
57326: LD_EXP 62
57330: PUSH
57331: LD_VAR 0 2
57335: ARRAY
57336: PUSH
57337: LD_INT 1
57339: ARRAY
57340: PUSH
57341: LD_INT 2
57343: ARRAY
57344: PPUSH
57345: LD_EXP 62
57349: PUSH
57350: LD_VAR 0 2
57354: ARRAY
57355: PUSH
57356: LD_INT 1
57358: ARRAY
57359: PUSH
57360: LD_INT 3
57362: ARRAY
57363: PPUSH
57364: LD_EXP 62
57368: PUSH
57369: LD_VAR 0 2
57373: ARRAY
57374: PUSH
57375: LD_INT 1
57377: ARRAY
57378: PUSH
57379: LD_INT 4
57381: ARRAY
57382: PPUSH
57383: CALL_OW 145
// end ;
57387: GO 57176
57389: POP
57390: POP
// end else
57391: GO 57535
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
57393: LD_EXP 57
57397: PUSH
57398: LD_VAR 0 2
57402: ARRAY
57403: PPUSH
57404: LD_EXP 62
57408: PUSH
57409: LD_VAR 0 2
57413: ARRAY
57414: PUSH
57415: LD_INT 1
57417: ARRAY
57418: PUSH
57419: LD_INT 1
57421: ARRAY
57422: PPUSH
57423: LD_EXP 62
57427: PUSH
57428: LD_VAR 0 2
57432: ARRAY
57433: PUSH
57434: LD_INT 1
57436: ARRAY
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: LD_EXP 62
57446: PUSH
57447: LD_VAR 0 2
57451: ARRAY
57452: PUSH
57453: LD_INT 1
57455: ARRAY
57456: PUSH
57457: LD_INT 3
57459: ARRAY
57460: PPUSH
57461: LD_EXP 62
57465: PUSH
57466: LD_VAR 0 2
57470: ARRAY
57471: PUSH
57472: LD_INT 1
57474: ARRAY
57475: PUSH
57476: LD_INT 4
57478: ARRAY
57479: PPUSH
57480: CALL 26171 0 5
57484: NOT
57485: IFFALSE 57535
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
57487: LD_ADDR_EXP 62
57491: PUSH
57492: LD_EXP 62
57496: PPUSH
57497: LD_VAR 0 2
57501: PPUSH
57502: LD_EXP 62
57506: PUSH
57507: LD_VAR 0 2
57511: ARRAY
57512: PPUSH
57513: LD_INT 1
57515: PPUSH
57516: LD_INT 1
57518: NEG
57519: PPUSH
57520: LD_INT 0
57522: PPUSH
57523: CALL 19085 0 4
57527: PPUSH
57528: CALL_OW 1
57532: ST_TO_ADDR
// continue ;
57533: GO 56606
// end ; end ;
57535: GO 56606
57537: POP
57538: POP
// end ;
57539: LD_VAR 0 1
57543: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
57544: LD_INT 0
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
57550: PPUSH
57551: PPUSH
// if not mc_bases then
57552: LD_EXP 57
57556: NOT
57557: IFFALSE 57561
// exit ;
57559: GO 57988
// for i = 1 to mc_bases do
57561: LD_ADDR_VAR 0 2
57565: PUSH
57566: DOUBLE
57567: LD_INT 1
57569: DEC
57570: ST_TO_ADDR
57571: LD_EXP 57
57575: PUSH
57576: FOR_TO
57577: IFFALSE 57986
// begin tmp := mc_build_upgrade [ i ] ;
57579: LD_ADDR_VAR 0 4
57583: PUSH
57584: LD_EXP 89
57588: PUSH
57589: LD_VAR 0 2
57593: ARRAY
57594: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
57595: LD_ADDR_VAR 0 6
57599: PUSH
57600: LD_EXP 90
57604: PUSH
57605: LD_VAR 0 2
57609: ARRAY
57610: PPUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 30
57616: PUSH
57617: LD_INT 6
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 30
57626: PUSH
57627: LD_INT 7
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: PPUSH
57639: CALL_OW 72
57643: ST_TO_ADDR
// if not tmp and not lab then
57644: LD_VAR 0 4
57648: NOT
57649: PUSH
57650: LD_VAR 0 6
57654: NOT
57655: AND
57656: IFFALSE 57660
// continue ;
57658: GO 57576
// if tmp then
57660: LD_VAR 0 4
57664: IFFALSE 57784
// for j in tmp do
57666: LD_ADDR_VAR 0 3
57670: PUSH
57671: LD_VAR 0 4
57675: PUSH
57676: FOR_IN
57677: IFFALSE 57782
// begin if UpgradeCost ( j ) then
57679: LD_VAR 0 3
57683: PPUSH
57684: CALL 25831 0 1
57688: IFFALSE 57780
// begin ComUpgrade ( j ) ;
57690: LD_VAR 0 3
57694: PPUSH
57695: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
57699: LD_ADDR_EXP 89
57703: PUSH
57704: LD_EXP 89
57708: PPUSH
57709: LD_VAR 0 2
57713: PPUSH
57714: LD_EXP 89
57718: PUSH
57719: LD_VAR 0 2
57723: ARRAY
57724: PUSH
57725: LD_VAR 0 3
57729: DIFF
57730: PPUSH
57731: CALL_OW 1
57735: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57736: LD_ADDR_EXP 64
57740: PUSH
57741: LD_EXP 64
57745: PPUSH
57746: LD_VAR 0 2
57750: PUSH
57751: LD_EXP 64
57755: PUSH
57756: LD_VAR 0 2
57760: ARRAY
57761: PUSH
57762: LD_INT 1
57764: PLUS
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PPUSH
57770: LD_VAR 0 3
57774: PPUSH
57775: CALL 20102 0 3
57779: ST_TO_ADDR
// end ; end ;
57780: GO 57676
57782: POP
57783: POP
// if not lab or not mc_lab_upgrade [ i ] then
57784: LD_VAR 0 6
57788: NOT
57789: PUSH
57790: LD_EXP 91
57794: PUSH
57795: LD_VAR 0 2
57799: ARRAY
57800: NOT
57801: OR
57802: IFFALSE 57806
// continue ;
57804: GO 57576
// for j in lab do
57806: LD_ADDR_VAR 0 3
57810: PUSH
57811: LD_VAR 0 6
57815: PUSH
57816: FOR_IN
57817: IFFALSE 57982
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
57819: LD_VAR 0 3
57823: PPUSH
57824: CALL_OW 266
57828: PUSH
57829: LD_INT 6
57831: PUSH
57832: LD_INT 7
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: IN
57839: PUSH
57840: LD_VAR 0 3
57844: PPUSH
57845: CALL_OW 461
57849: PUSH
57850: LD_INT 1
57852: NONEQUAL
57853: AND
57854: IFFALSE 57980
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
57856: LD_VAR 0 3
57860: PPUSH
57861: LD_EXP 91
57865: PUSH
57866: LD_VAR 0 2
57870: ARRAY
57871: PUSH
57872: LD_INT 1
57874: ARRAY
57875: PPUSH
57876: CALL 26036 0 2
57880: IFFALSE 57980
// begin ComCancel ( j ) ;
57882: LD_VAR 0 3
57886: PPUSH
57887: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
57891: LD_VAR 0 3
57895: PPUSH
57896: LD_EXP 91
57900: PUSH
57901: LD_VAR 0 2
57905: ARRAY
57906: PUSH
57907: LD_INT 1
57909: ARRAY
57910: PPUSH
57911: CALL_OW 207
// if not j in mc_construct_list [ i ] then
57915: LD_VAR 0 3
57919: PUSH
57920: LD_EXP 64
57924: PUSH
57925: LD_VAR 0 2
57929: ARRAY
57930: IN
57931: NOT
57932: IFFALSE 57978
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
57934: LD_ADDR_EXP 64
57938: PUSH
57939: LD_EXP 64
57943: PPUSH
57944: LD_VAR 0 2
57948: PUSH
57949: LD_EXP 64
57953: PUSH
57954: LD_VAR 0 2
57958: ARRAY
57959: PUSH
57960: LD_INT 1
57962: PLUS
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PPUSH
57968: LD_VAR 0 3
57972: PPUSH
57973: CALL 20102 0 3
57977: ST_TO_ADDR
// break ;
57978: GO 57982
// end ; end ; end ;
57980: GO 57816
57982: POP
57983: POP
// end ;
57984: GO 57576
57986: POP
57987: POP
// end ;
57988: LD_VAR 0 1
57992: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
57993: LD_INT 0
57995: PPUSH
57996: PPUSH
57997: PPUSH
57998: PPUSH
57999: PPUSH
58000: PPUSH
58001: PPUSH
// if not mc_bases then
58002: LD_EXP 57
58006: NOT
58007: IFFALSE 58011
// exit ;
58009: GO 58340
// for i = 1 to mc_bases do
58011: LD_ADDR_VAR 0 2
58015: PUSH
58016: DOUBLE
58017: LD_INT 1
58019: DEC
58020: ST_TO_ADDR
58021: LD_EXP 57
58025: PUSH
58026: FOR_TO
58027: IFFALSE 58338
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
58029: LD_EXP 65
58033: PUSH
58034: LD_VAR 0 2
58038: ARRAY
58039: NOT
58040: PUSH
58041: LD_EXP 57
58045: PUSH
58046: LD_VAR 0 2
58050: ARRAY
58051: PPUSH
58052: LD_INT 30
58054: PUSH
58055: LD_INT 3
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PPUSH
58062: CALL_OW 72
58066: NOT
58067: OR
58068: IFFALSE 58072
// continue ;
58070: GO 58026
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
58072: LD_EXP 65
58076: PUSH
58077: LD_VAR 0 2
58081: ARRAY
58082: PUSH
58083: LD_INT 1
58085: ARRAY
58086: PPUSH
58087: CALL_OW 269
58091: IFFALSE 58157
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
58093: LD_ADDR_VAR 0 4
58097: PUSH
58098: LD_EXP 65
58102: PUSH
58103: LD_VAR 0 2
58107: ARRAY
58108: PPUSH
58109: LD_INT 1
58111: PPUSH
58112: CALL_OW 3
58116: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
58117: LD_ADDR_EXP 65
58121: PUSH
58122: LD_EXP 65
58126: PPUSH
58127: LD_VAR 0 2
58131: PPUSH
58132: LD_VAR 0 4
58136: PPUSH
58137: CALL_OW 1
58141: ST_TO_ADDR
// if not mc_turret_list [ i ] then
58142: LD_EXP 65
58146: PUSH
58147: LD_VAR 0 2
58151: ARRAY
58152: NOT
58153: IFFALSE 58157
// continue ;
58155: GO 58026
// end ; busy := false ;
58157: LD_ADDR_VAR 0 6
58161: PUSH
58162: LD_INT 0
58164: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
58165: LD_ADDR_VAR 0 4
58169: PUSH
58170: LD_EXP 57
58174: PUSH
58175: LD_VAR 0 2
58179: ARRAY
58180: PPUSH
58181: LD_INT 30
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PPUSH
58191: CALL_OW 72
58195: ST_TO_ADDR
// for j in tmp do
58196: LD_ADDR_VAR 0 3
58200: PUSH
58201: LD_VAR 0 4
58205: PUSH
58206: FOR_IN
58207: IFFALSE 58235
// if not BuildingStatus ( j ) = bs_idle then
58209: LD_VAR 0 3
58213: PPUSH
58214: CALL_OW 461
58218: PUSH
58219: LD_INT 2
58221: EQUAL
58222: NOT
58223: IFFALSE 58233
// busy := true ;
58225: LD_ADDR_VAR 0 6
58229: PUSH
58230: LD_INT 1
58232: ST_TO_ADDR
58233: GO 58206
58235: POP
58236: POP
// if busy then
58237: LD_VAR 0 6
58241: IFFALSE 58245
// continue ;
58243: GO 58026
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
58245: LD_ADDR_VAR 0 7
58249: PUSH
58250: LD_EXP 65
58254: PUSH
58255: LD_VAR 0 2
58259: ARRAY
58260: PUSH
58261: LD_INT 1
58263: ARRAY
58264: PPUSH
58265: CALL 24395 0 1
58269: ST_TO_ADDR
// if not weapon then
58270: LD_VAR 0 7
58274: NOT
58275: IFFALSE 58279
// continue ;
58277: GO 58026
// if mc_allowed_tower_weapons [ i ] then
58279: LD_EXP 95
58283: PUSH
58284: LD_VAR 0 2
58288: ARRAY
58289: IFFALSE 58312
// if not weapon in mc_allowed_tower_weapons [ i ] then
58291: LD_VAR 0 7
58295: PUSH
58296: LD_EXP 95
58300: PUSH
58301: LD_VAR 0 2
58305: ARRAY
58306: IN
58307: NOT
58308: IFFALSE 58312
// continue ;
58310: GO 58026
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
58312: LD_EXP 65
58316: PUSH
58317: LD_VAR 0 2
58321: ARRAY
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PPUSH
58327: LD_VAR 0 7
58331: PPUSH
58332: CALL_OW 148
// end ;
58336: GO 58026
58338: POP
58339: POP
// end ;
58340: LD_VAR 0 1
58344: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
58345: LD_INT 0
58347: PPUSH
58348: PPUSH
58349: PPUSH
58350: PPUSH
58351: PPUSH
58352: PPUSH
// if not mc_bases then
58353: LD_EXP 57
58357: NOT
58358: IFFALSE 58362
// exit ;
58360: GO 59347
// for i = 1 to mc_bases do
58362: LD_ADDR_VAR 0 2
58366: PUSH
58367: DOUBLE
58368: LD_INT 1
58370: DEC
58371: ST_TO_ADDR
58372: LD_EXP 57
58376: PUSH
58377: FOR_TO
58378: IFFALSE 59345
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
58380: LD_EXP 70
58384: PUSH
58385: LD_VAR 0 2
58389: ARRAY
58390: NOT
58391: PUSH
58392: LD_EXP 70
58396: PUSH
58397: LD_VAR 0 2
58401: ARRAY
58402: PUSH
58403: LD_EXP 71
58407: PUSH
58408: LD_VAR 0 2
58412: ARRAY
58413: EQUAL
58414: OR
58415: IFFALSE 58419
// continue ;
58417: GO 58377
// if mc_miners [ i ] then
58419: LD_EXP 71
58423: PUSH
58424: LD_VAR 0 2
58428: ARRAY
58429: IFFALSE 59032
// begin k := 1 ;
58431: LD_ADDR_VAR 0 4
58435: PUSH
58436: LD_INT 1
58438: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: DOUBLE
58445: LD_EXP 71
58449: PUSH
58450: LD_VAR 0 2
58454: ARRAY
58455: INC
58456: ST_TO_ADDR
58457: LD_INT 1
58459: PUSH
58460: FOR_DOWNTO
58461: IFFALSE 59030
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
58463: LD_EXP 71
58467: PUSH
58468: LD_VAR 0 2
58472: ARRAY
58473: PUSH
58474: LD_VAR 0 3
58478: ARRAY
58479: PPUSH
58480: CALL_OW 301
58484: IFFALSE 58547
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
58486: LD_ADDR_VAR 0 5
58490: PUSH
58491: LD_EXP 71
58495: PUSH
58496: LD_VAR 0 2
58500: ARRAY
58501: PUSH
58502: LD_EXP 71
58506: PUSH
58507: LD_VAR 0 2
58511: ARRAY
58512: PUSH
58513: LD_VAR 0 3
58517: ARRAY
58518: DIFF
58519: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
58520: LD_ADDR_EXP 71
58524: PUSH
58525: LD_EXP 71
58529: PPUSH
58530: LD_VAR 0 2
58534: PPUSH
58535: LD_VAR 0 5
58539: PPUSH
58540: CALL_OW 1
58544: ST_TO_ADDR
// continue ;
58545: GO 58460
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
58547: LD_EXP 71
58551: PUSH
58552: LD_VAR 0 2
58556: ARRAY
58557: PUSH
58558: LD_VAR 0 3
58562: ARRAY
58563: PPUSH
58564: CALL 19603 0 1
58568: PUSH
58569: LD_EXP 71
58573: PUSH
58574: LD_VAR 0 2
58578: ARRAY
58579: PUSH
58580: LD_VAR 0 3
58584: ARRAY
58585: PPUSH
58586: CALL_OW 255
58590: PPUSH
58591: LD_EXP 70
58595: PUSH
58596: LD_VAR 0 2
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 4
58606: ARRAY
58607: PUSH
58608: LD_INT 1
58610: ARRAY
58611: PPUSH
58612: LD_EXP 70
58616: PUSH
58617: LD_VAR 0 2
58621: ARRAY
58622: PUSH
58623: LD_VAR 0 4
58627: ARRAY
58628: PUSH
58629: LD_INT 2
58631: ARRAY
58632: PPUSH
58633: LD_INT 15
58635: PPUSH
58636: CALL 20596 0 4
58640: PUSH
58641: LD_INT 4
58643: ARRAY
58644: PUSH
58645: LD_EXP 71
58649: PUSH
58650: LD_VAR 0 2
58654: ARRAY
58655: PUSH
58656: LD_VAR 0 3
58660: ARRAY
58661: PPUSH
58662: LD_INT 10
58664: PPUSH
58665: CALL 22293 0 2
58669: PUSH
58670: LD_INT 4
58672: ARRAY
58673: OR
58674: AND
58675: IFFALSE 58698
// ComStop ( mc_miners [ i ] [ j ] ) ;
58677: LD_EXP 71
58681: PUSH
58682: LD_VAR 0 2
58686: ARRAY
58687: PUSH
58688: LD_VAR 0 3
58692: ARRAY
58693: PPUSH
58694: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
58698: LD_EXP 71
58702: PUSH
58703: LD_VAR 0 2
58707: ARRAY
58708: PUSH
58709: LD_VAR 0 3
58713: ARRAY
58714: PPUSH
58715: CALL_OW 257
58719: PUSH
58720: LD_INT 1
58722: EQUAL
58723: PUSH
58724: LD_EXP 71
58728: PUSH
58729: LD_VAR 0 2
58733: ARRAY
58734: PUSH
58735: LD_VAR 0 3
58739: ARRAY
58740: PPUSH
58741: CALL_OW 459
58745: NOT
58746: AND
58747: PUSH
58748: LD_EXP 71
58752: PUSH
58753: LD_VAR 0 2
58757: ARRAY
58758: PUSH
58759: LD_VAR 0 3
58763: ARRAY
58764: PPUSH
58765: CALL_OW 255
58769: PPUSH
58770: LD_EXP 70
58774: PUSH
58775: LD_VAR 0 2
58779: ARRAY
58780: PUSH
58781: LD_VAR 0 4
58785: ARRAY
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PPUSH
58791: LD_EXP 70
58795: PUSH
58796: LD_VAR 0 2
58800: ARRAY
58801: PUSH
58802: LD_VAR 0 4
58806: ARRAY
58807: PUSH
58808: LD_INT 2
58810: ARRAY
58811: PPUSH
58812: LD_INT 15
58814: PPUSH
58815: CALL 20596 0 4
58819: PUSH
58820: LD_INT 4
58822: ARRAY
58823: PUSH
58824: LD_INT 0
58826: EQUAL
58827: AND
58828: PUSH
58829: LD_EXP 71
58833: PUSH
58834: LD_VAR 0 2
58838: ARRAY
58839: PUSH
58840: LD_VAR 0 3
58844: ARRAY
58845: PPUSH
58846: CALL_OW 314
58850: NOT
58851: AND
58852: IFFALSE 59028
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
58854: LD_EXP 71
58858: PUSH
58859: LD_VAR 0 2
58863: ARRAY
58864: PUSH
58865: LD_VAR 0 3
58869: ARRAY
58870: PPUSH
58871: CALL_OW 310
58875: IFFALSE 58898
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
58877: LD_EXP 71
58881: PUSH
58882: LD_VAR 0 2
58886: ARRAY
58887: PUSH
58888: LD_VAR 0 3
58892: ARRAY
58893: PPUSH
58894: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
58898: LD_EXP 71
58902: PUSH
58903: LD_VAR 0 2
58907: ARRAY
58908: PUSH
58909: LD_VAR 0 3
58913: ARRAY
58914: PPUSH
58915: CALL_OW 314
58919: NOT
58920: IFFALSE 58988
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
58922: LD_EXP 71
58926: PUSH
58927: LD_VAR 0 2
58931: ARRAY
58932: PUSH
58933: LD_VAR 0 3
58937: ARRAY
58938: PPUSH
58939: LD_EXP 70
58943: PUSH
58944: LD_VAR 0 2
58948: ARRAY
58949: PUSH
58950: LD_VAR 0 4
58954: ARRAY
58955: PUSH
58956: LD_INT 1
58958: ARRAY
58959: PPUSH
58960: LD_EXP 70
58964: PUSH
58965: LD_VAR 0 2
58969: ARRAY
58970: PUSH
58971: LD_VAR 0 4
58975: ARRAY
58976: PUSH
58977: LD_INT 2
58979: ARRAY
58980: PPUSH
58981: LD_INT 0
58983: PPUSH
58984: CALL_OW 193
// k := k + 1 ;
58988: LD_ADDR_VAR 0 4
58992: PUSH
58993: LD_VAR 0 4
58997: PUSH
58998: LD_INT 1
59000: PLUS
59001: ST_TO_ADDR
// if k > mc_mines [ i ] then
59002: LD_VAR 0 4
59006: PUSH
59007: LD_EXP 70
59011: PUSH
59012: LD_VAR 0 2
59016: ARRAY
59017: GREATER
59018: IFFALSE 59028
// k := 1 ;
59020: LD_ADDR_VAR 0 4
59024: PUSH
59025: LD_INT 1
59027: ST_TO_ADDR
// end ; end ;
59028: GO 58460
59030: POP
59031: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
59032: LD_ADDR_VAR 0 5
59036: PUSH
59037: LD_EXP 57
59041: PUSH
59042: LD_VAR 0 2
59046: ARRAY
59047: PPUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 30
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 30
59063: PUSH
59064: LD_INT 5
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 30
59073: PUSH
59074: LD_INT 32
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: PPUSH
59087: CALL_OW 72
59091: ST_TO_ADDR
// if not tmp then
59092: LD_VAR 0 5
59096: NOT
59097: IFFALSE 59101
// continue ;
59099: GO 58377
// list := [ ] ;
59101: LD_ADDR_VAR 0 6
59105: PUSH
59106: EMPTY
59107: ST_TO_ADDR
// for j in tmp do
59108: LD_ADDR_VAR 0 3
59112: PUSH
59113: LD_VAR 0 5
59117: PUSH
59118: FOR_IN
59119: IFFALSE 59188
// begin for k in UnitsInside ( j ) do
59121: LD_ADDR_VAR 0 4
59125: PUSH
59126: LD_VAR 0 3
59130: PPUSH
59131: CALL_OW 313
59135: PUSH
59136: FOR_IN
59137: IFFALSE 59184
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
59139: LD_VAR 0 4
59143: PPUSH
59144: CALL_OW 257
59148: PUSH
59149: LD_INT 1
59151: EQUAL
59152: PUSH
59153: LD_VAR 0 4
59157: PPUSH
59158: CALL_OW 459
59162: NOT
59163: AND
59164: IFFALSE 59182
// list := list ^ k ;
59166: LD_ADDR_VAR 0 6
59170: PUSH
59171: LD_VAR 0 6
59175: PUSH
59176: LD_VAR 0 4
59180: ADD
59181: ST_TO_ADDR
59182: GO 59136
59184: POP
59185: POP
// end ;
59186: GO 59118
59188: POP
59189: POP
// list := list diff mc_miners [ i ] ;
59190: LD_ADDR_VAR 0 6
59194: PUSH
59195: LD_VAR 0 6
59199: PUSH
59200: LD_EXP 71
59204: PUSH
59205: LD_VAR 0 2
59209: ARRAY
59210: DIFF
59211: ST_TO_ADDR
// if not list then
59212: LD_VAR 0 6
59216: NOT
59217: IFFALSE 59221
// continue ;
59219: GO 58377
// k := mc_mines [ i ] - mc_miners [ i ] ;
59221: LD_ADDR_VAR 0 4
59225: PUSH
59226: LD_EXP 70
59230: PUSH
59231: LD_VAR 0 2
59235: ARRAY
59236: PUSH
59237: LD_EXP 71
59241: PUSH
59242: LD_VAR 0 2
59246: ARRAY
59247: MINUS
59248: ST_TO_ADDR
// if k > list then
59249: LD_VAR 0 4
59253: PUSH
59254: LD_VAR 0 6
59258: GREATER
59259: IFFALSE 59271
// k := list ;
59261: LD_ADDR_VAR 0 4
59265: PUSH
59266: LD_VAR 0 6
59270: ST_TO_ADDR
// for j = 1 to k do
59271: LD_ADDR_VAR 0 3
59275: PUSH
59276: DOUBLE
59277: LD_INT 1
59279: DEC
59280: ST_TO_ADDR
59281: LD_VAR 0 4
59285: PUSH
59286: FOR_TO
59287: IFFALSE 59341
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
59289: LD_ADDR_EXP 71
59293: PUSH
59294: LD_EXP 71
59298: PPUSH
59299: LD_VAR 0 2
59303: PUSH
59304: LD_EXP 71
59308: PUSH
59309: LD_VAR 0 2
59313: ARRAY
59314: PUSH
59315: LD_INT 1
59317: PLUS
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PPUSH
59323: LD_VAR 0 6
59327: PUSH
59328: LD_VAR 0 3
59332: ARRAY
59333: PPUSH
59334: CALL 20102 0 3
59338: ST_TO_ADDR
59339: GO 59286
59341: POP
59342: POP
// end ;
59343: GO 58377
59345: POP
59346: POP
// end ;
59347: LD_VAR 0 1
59351: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
59352: LD_INT 0
59354: PPUSH
59355: PPUSH
59356: PPUSH
59357: PPUSH
59358: PPUSH
59359: PPUSH
59360: PPUSH
59361: PPUSH
59362: PPUSH
// if not mc_bases then
59363: LD_EXP 57
59367: NOT
59368: IFFALSE 59372
// exit ;
59370: GO 60851
// for i = 1 to mc_bases do
59372: LD_ADDR_VAR 0 2
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_EXP 57
59386: PUSH
59387: FOR_TO
59388: IFFALSE 60849
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
59390: LD_EXP 57
59394: PUSH
59395: LD_VAR 0 2
59399: ARRAY
59400: NOT
59401: PUSH
59402: LD_EXP 64
59406: PUSH
59407: LD_VAR 0 2
59411: ARRAY
59412: OR
59413: IFFALSE 59417
// continue ;
59415: GO 59387
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
59417: LD_EXP 73
59421: PUSH
59422: LD_VAR 0 2
59426: ARRAY
59427: NOT
59428: PUSH
59429: LD_EXP 74
59433: PUSH
59434: LD_VAR 0 2
59438: ARRAY
59439: AND
59440: IFFALSE 59478
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59442: LD_ADDR_EXP 74
59446: PUSH
59447: LD_EXP 74
59451: PPUSH
59452: LD_VAR 0 2
59456: PPUSH
59457: EMPTY
59458: PPUSH
59459: CALL_OW 1
59463: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
59464: LD_VAR 0 2
59468: PPUSH
59469: LD_INT 107
59471: PPUSH
59472: CALL 54970 0 2
// continue ;
59476: GO 59387
// end ; target := [ ] ;
59478: LD_ADDR_VAR 0 5
59482: PUSH
59483: EMPTY
59484: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
59485: LD_ADDR_VAR 0 3
59489: PUSH
59490: DOUBLE
59491: LD_EXP 73
59495: PUSH
59496: LD_VAR 0 2
59500: ARRAY
59501: INC
59502: ST_TO_ADDR
59503: LD_INT 1
59505: PUSH
59506: FOR_DOWNTO
59507: IFFALSE 59767
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
59509: LD_EXP 73
59513: PUSH
59514: LD_VAR 0 2
59518: ARRAY
59519: PUSH
59520: LD_VAR 0 3
59524: ARRAY
59525: PUSH
59526: LD_INT 2
59528: ARRAY
59529: PPUSH
59530: LD_EXP 73
59534: PUSH
59535: LD_VAR 0 2
59539: ARRAY
59540: PUSH
59541: LD_VAR 0 3
59545: ARRAY
59546: PUSH
59547: LD_INT 3
59549: ARRAY
59550: PPUSH
59551: CALL_OW 488
59555: PUSH
59556: LD_EXP 73
59560: PUSH
59561: LD_VAR 0 2
59565: ARRAY
59566: PUSH
59567: LD_VAR 0 3
59571: ARRAY
59572: PUSH
59573: LD_INT 2
59575: ARRAY
59576: PPUSH
59577: LD_EXP 73
59581: PUSH
59582: LD_VAR 0 2
59586: ARRAY
59587: PUSH
59588: LD_VAR 0 3
59592: ARRAY
59593: PUSH
59594: LD_INT 3
59596: ARRAY
59597: PPUSH
59598: CALL_OW 284
59602: PUSH
59603: LD_INT 0
59605: EQUAL
59606: AND
59607: IFFALSE 59662
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
59609: LD_ADDR_VAR 0 4
59613: PUSH
59614: LD_EXP 73
59618: PUSH
59619: LD_VAR 0 2
59623: ARRAY
59624: PPUSH
59625: LD_VAR 0 3
59629: PPUSH
59630: CALL_OW 3
59634: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
59635: LD_ADDR_EXP 73
59639: PUSH
59640: LD_EXP 73
59644: PPUSH
59645: LD_VAR 0 2
59649: PPUSH
59650: LD_VAR 0 4
59654: PPUSH
59655: CALL_OW 1
59659: ST_TO_ADDR
// continue ;
59660: GO 59506
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
59662: LD_EXP 57
59666: PUSH
59667: LD_VAR 0 2
59671: ARRAY
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PPUSH
59677: CALL_OW 255
59681: PPUSH
59682: LD_EXP 73
59686: PUSH
59687: LD_VAR 0 2
59691: ARRAY
59692: PUSH
59693: LD_VAR 0 3
59697: ARRAY
59698: PUSH
59699: LD_INT 2
59701: ARRAY
59702: PPUSH
59703: LD_EXP 73
59707: PUSH
59708: LD_VAR 0 2
59712: ARRAY
59713: PUSH
59714: LD_VAR 0 3
59718: ARRAY
59719: PUSH
59720: LD_INT 3
59722: ARRAY
59723: PPUSH
59724: LD_INT 20
59726: PPUSH
59727: CALL 20596 0 4
59731: PUSH
59732: LD_INT 4
59734: ARRAY
59735: PUSH
59736: LD_INT 0
59738: EQUAL
59739: IFFALSE 59765
// begin target := mc_crates [ i ] [ j ] ;
59741: LD_ADDR_VAR 0 5
59745: PUSH
59746: LD_EXP 73
59750: PUSH
59751: LD_VAR 0 2
59755: ARRAY
59756: PUSH
59757: LD_VAR 0 3
59761: ARRAY
59762: ST_TO_ADDR
// break ;
59763: GO 59767
// end ; end ;
59765: GO 59506
59767: POP
59768: POP
// if not target then
59769: LD_VAR 0 5
59773: NOT
59774: IFFALSE 59778
// continue ;
59776: GO 59387
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
59778: LD_ADDR_VAR 0 6
59782: PUSH
59783: LD_EXP 76
59787: PUSH
59788: LD_VAR 0 2
59792: ARRAY
59793: PPUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 3
59799: PUSH
59800: LD_INT 58
59802: PUSH
59803: EMPTY
59804: LIST
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 61
59812: PUSH
59813: EMPTY
59814: LIST
59815: PUSH
59816: LD_INT 33
59818: PUSH
59819: LD_INT 5
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 33
59828: PUSH
59829: LD_INT 3
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 34
59848: PUSH
59849: LD_INT 32
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 34
59858: PUSH
59859: LD_INT 51
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 34
59868: PUSH
59869: LD_INT 12
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PPUSH
59886: CALL_OW 72
59890: ST_TO_ADDR
// if not cargo then
59891: LD_VAR 0 6
59895: NOT
59896: IFFALSE 60384
// begin if mc_crates_collector [ i ] < 5 then
59898: LD_EXP 74
59902: PUSH
59903: LD_VAR 0 2
59907: ARRAY
59908: PUSH
59909: LD_INT 5
59911: LESS
59912: IFFALSE 60198
// begin if mc_ape [ i ] then
59914: LD_EXP 86
59918: PUSH
59919: LD_VAR 0 2
59923: ARRAY
59924: IFFALSE 59971
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
59926: LD_ADDR_VAR 0 4
59930: PUSH
59931: LD_EXP 86
59935: PUSH
59936: LD_VAR 0 2
59940: ARRAY
59941: PPUSH
59942: LD_INT 25
59944: PUSH
59945: LD_INT 16
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 24
59954: PUSH
59955: LD_INT 750
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PPUSH
59966: CALL_OW 72
59970: ST_TO_ADDR
// if not tmp then
59971: LD_VAR 0 4
59975: NOT
59976: IFFALSE 60025
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
59978: LD_ADDR_VAR 0 4
59982: PUSH
59983: LD_EXP 57
59987: PUSH
59988: LD_VAR 0 2
59992: ARRAY
59993: PPUSH
59994: LD_INT 25
59996: PUSH
59997: LD_INT 2
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 24
60006: PUSH
60007: LD_INT 750
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PPUSH
60018: CALL_OW 72
60022: ST_TO_ADDR
60023: GO 60086
// if tmp < 5 then
60025: LD_VAR 0 4
60029: PUSH
60030: LD_INT 5
60032: LESS
60033: IFFALSE 60086
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
60035: LD_ADDR_VAR 0 4
60039: PUSH
60040: LD_VAR 0 4
60044: PUSH
60045: LD_EXP 57
60049: PUSH
60050: LD_VAR 0 2
60054: ARRAY
60055: PPUSH
60056: LD_INT 25
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 24
60068: PUSH
60069: LD_INT 750
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PPUSH
60080: CALL_OW 72
60084: UNION
60085: ST_TO_ADDR
// if not tmp then
60086: LD_VAR 0 4
60090: NOT
60091: IFFALSE 60095
// continue ;
60093: GO 59387
// for j in tmp do
60095: LD_ADDR_VAR 0 3
60099: PUSH
60100: LD_VAR 0 4
60104: PUSH
60105: FOR_IN
60106: IFFALSE 60196
// if not GetTag ( j ) then
60108: LD_VAR 0 3
60112: PPUSH
60113: CALL_OW 110
60117: NOT
60118: IFFALSE 60194
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
60120: LD_ADDR_EXP 74
60124: PUSH
60125: LD_EXP 74
60129: PPUSH
60130: LD_VAR 0 2
60134: PUSH
60135: LD_EXP 74
60139: PUSH
60140: LD_VAR 0 2
60144: ARRAY
60145: PUSH
60146: LD_INT 1
60148: PLUS
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PPUSH
60154: LD_VAR 0 3
60158: PPUSH
60159: CALL 20102 0 3
60163: ST_TO_ADDR
// SetTag ( j , 107 ) ;
60164: LD_VAR 0 3
60168: PPUSH
60169: LD_INT 107
60171: PPUSH
60172: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
60176: LD_EXP 74
60180: PUSH
60181: LD_VAR 0 2
60185: ARRAY
60186: PUSH
60187: LD_INT 5
60189: GREATEREQUAL
60190: IFFALSE 60194
// break ;
60192: GO 60196
// end ;
60194: GO 60105
60196: POP
60197: POP
// end ; if mc_crates_collector [ i ] and target then
60198: LD_EXP 74
60202: PUSH
60203: LD_VAR 0 2
60207: ARRAY
60208: PUSH
60209: LD_VAR 0 5
60213: AND
60214: IFFALSE 60382
// begin if mc_crates_collector [ i ] < target [ 1 ] then
60216: LD_EXP 74
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: PUSH
60227: LD_VAR 0 5
60231: PUSH
60232: LD_INT 1
60234: ARRAY
60235: LESS
60236: IFFALSE 60256
// tmp := mc_crates_collector [ i ] else
60238: LD_ADDR_VAR 0 4
60242: PUSH
60243: LD_EXP 74
60247: PUSH
60248: LD_VAR 0 2
60252: ARRAY
60253: ST_TO_ADDR
60254: GO 60270
// tmp := target [ 1 ] ;
60256: LD_ADDR_VAR 0 4
60260: PUSH
60261: LD_VAR 0 5
60265: PUSH
60266: LD_INT 1
60268: ARRAY
60269: ST_TO_ADDR
// for j = 1 to tmp do
60270: LD_ADDR_VAR 0 3
60274: PUSH
60275: DOUBLE
60276: LD_INT 1
60278: DEC
60279: ST_TO_ADDR
60280: LD_VAR 0 4
60284: PUSH
60285: FOR_TO
60286: IFFALSE 60380
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
60288: LD_EXP 74
60292: PUSH
60293: LD_VAR 0 2
60297: ARRAY
60298: PUSH
60299: LD_VAR 0 3
60303: ARRAY
60304: PPUSH
60305: CALL_OW 310
60309: IFFALSE 60332
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
60311: LD_EXP 74
60315: PUSH
60316: LD_VAR 0 2
60320: ARRAY
60321: PUSH
60322: LD_VAR 0 3
60326: ARRAY
60327: PPUSH
60328: CALL_OW 122
// wait ( 3 ) ;
60332: LD_INT 3
60334: PPUSH
60335: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
60339: LD_EXP 74
60343: PUSH
60344: LD_VAR 0 2
60348: ARRAY
60349: PUSH
60350: LD_VAR 0 3
60354: ARRAY
60355: PPUSH
60356: LD_VAR 0 5
60360: PUSH
60361: LD_INT 2
60363: ARRAY
60364: PPUSH
60365: LD_VAR 0 5
60369: PUSH
60370: LD_INT 3
60372: ARRAY
60373: PPUSH
60374: CALL_OW 117
// end ;
60378: GO 60285
60380: POP
60381: POP
// end ; end else
60382: GO 60847
// begin for j in cargo do
60384: LD_ADDR_VAR 0 3
60388: PUSH
60389: LD_VAR 0 6
60393: PUSH
60394: FOR_IN
60395: IFFALSE 60845
// begin if GetTag ( j ) <> 0 then
60397: LD_VAR 0 3
60401: PPUSH
60402: CALL_OW 110
60406: PUSH
60407: LD_INT 0
60409: NONEQUAL
60410: IFFALSE 60414
// continue ;
60412: GO 60394
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
60414: LD_VAR 0 3
60418: PPUSH
60419: CALL_OW 262
60423: PUSH
60424: LD_INT 2
60426: EQUAL
60427: PUSH
60428: LD_VAR 0 3
60432: PPUSH
60433: CALL_OW 261
60437: PUSH
60438: LD_INT 15
60440: LESS
60441: AND
60442: IFFALSE 60446
// continue ;
60444: GO 60394
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
60446: LD_VAR 0 3
60450: PPUSH
60451: CALL_OW 262
60455: PUSH
60456: LD_INT 1
60458: EQUAL
60459: PUSH
60460: LD_VAR 0 3
60464: PPUSH
60465: CALL_OW 261
60469: PUSH
60470: LD_INT 10
60472: LESS
60473: AND
60474: IFFALSE 60784
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60476: LD_ADDR_VAR 0 7
60480: PUSH
60481: LD_EXP 57
60485: PUSH
60486: LD_VAR 0 2
60490: ARRAY
60491: PPUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 30
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 30
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: LIST
60519: PPUSH
60520: CALL_OW 72
60524: ST_TO_ADDR
// if not depot then
60525: LD_VAR 0 7
60529: NOT
60530: IFFALSE 60534
// continue ;
60532: GO 60394
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
60534: LD_VAR 0 3
60538: PPUSH
60539: LD_VAR 0 7
60543: PPUSH
60544: LD_VAR 0 3
60548: PPUSH
60549: CALL_OW 74
60553: PPUSH
60554: CALL_OW 296
60558: PUSH
60559: LD_INT 6
60561: LESS
60562: IFFALSE 60578
// SetFuel ( j , 100 ) else
60564: LD_VAR 0 3
60568: PPUSH
60569: LD_INT 100
60571: PPUSH
60572: CALL_OW 240
60576: GO 60784
// if GetFuel ( j ) = 0 then
60578: LD_VAR 0 3
60582: PPUSH
60583: CALL_OW 261
60587: PUSH
60588: LD_INT 0
60590: EQUAL
60591: IFFALSE 60784
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
60593: LD_ADDR_EXP 76
60597: PUSH
60598: LD_EXP 76
60602: PPUSH
60603: LD_VAR 0 2
60607: PPUSH
60608: LD_EXP 76
60612: PUSH
60613: LD_VAR 0 2
60617: ARRAY
60618: PUSH
60619: LD_VAR 0 3
60623: DIFF
60624: PPUSH
60625: CALL_OW 1
60629: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
60630: LD_VAR 0 3
60634: PPUSH
60635: CALL_OW 263
60639: PUSH
60640: LD_INT 1
60642: EQUAL
60643: IFFALSE 60659
// ComExitVehicle ( IsInUnit ( j ) ) ;
60645: LD_VAR 0 3
60649: PPUSH
60650: CALL_OW 310
60654: PPUSH
60655: CALL_OW 121
// if GetControl ( j ) = control_remote then
60659: LD_VAR 0 3
60663: PPUSH
60664: CALL_OW 263
60668: PUSH
60669: LD_INT 2
60671: EQUAL
60672: IFFALSE 60683
// ComUnlink ( j ) ;
60674: LD_VAR 0 3
60678: PPUSH
60679: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
60683: LD_ADDR_VAR 0 8
60687: PUSH
60688: LD_VAR 0 2
60692: PPUSH
60693: LD_INT 3
60695: PPUSH
60696: CALL 68480 0 2
60700: ST_TO_ADDR
// if fac then
60701: LD_VAR 0 8
60705: IFFALSE 60782
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
60707: LD_ADDR_VAR 0 9
60711: PUSH
60712: LD_VAR 0 8
60716: PPUSH
60717: LD_VAR 0 3
60721: PPUSH
60722: CALL_OW 265
60726: PPUSH
60727: LD_VAR 0 3
60731: PPUSH
60732: CALL_OW 262
60736: PPUSH
60737: LD_VAR 0 3
60741: PPUSH
60742: CALL_OW 263
60746: PPUSH
60747: LD_VAR 0 3
60751: PPUSH
60752: CALL_OW 264
60756: PPUSH
60757: CALL 17267 0 5
60761: ST_TO_ADDR
// if components then
60762: LD_VAR 0 9
60766: IFFALSE 60782
// MC_InsertProduceList ( i , components ) ;
60768: LD_VAR 0 2
60772: PPUSH
60773: LD_VAR 0 9
60777: PPUSH
60778: CALL 68047 0 2
// end ; continue ;
60782: GO 60394
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
60784: LD_VAR 0 3
60788: PPUSH
60789: LD_INT 1
60791: PPUSH
60792: CALL_OW 289
60796: PUSH
60797: LD_INT 100
60799: LESS
60800: PUSH
60801: LD_VAR 0 3
60805: PPUSH
60806: CALL_OW 314
60810: NOT
60811: AND
60812: IFFALSE 60841
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
60814: LD_VAR 0 3
60818: PPUSH
60819: LD_VAR 0 5
60823: PUSH
60824: LD_INT 2
60826: ARRAY
60827: PPUSH
60828: LD_VAR 0 5
60832: PUSH
60833: LD_INT 3
60835: ARRAY
60836: PPUSH
60837: CALL_OW 117
// break ;
60841: GO 60845
// end ;
60843: GO 60394
60845: POP
60846: POP
// end ; end ;
60847: GO 59387
60849: POP
60850: POP
// end ;
60851: LD_VAR 0 1
60855: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
60856: LD_INT 0
60858: PPUSH
60859: PPUSH
60860: PPUSH
60861: PPUSH
// if not mc_bases then
60862: LD_EXP 57
60866: NOT
60867: IFFALSE 60871
// exit ;
60869: GO 61032
// for i = 1 to mc_bases do
60871: LD_ADDR_VAR 0 2
60875: PUSH
60876: DOUBLE
60877: LD_INT 1
60879: DEC
60880: ST_TO_ADDR
60881: LD_EXP 57
60885: PUSH
60886: FOR_TO
60887: IFFALSE 61030
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
60889: LD_ADDR_VAR 0 4
60893: PUSH
60894: LD_EXP 76
60898: PUSH
60899: LD_VAR 0 2
60903: ARRAY
60904: PUSH
60905: LD_EXP 79
60909: PUSH
60910: LD_VAR 0 2
60914: ARRAY
60915: ADD
60916: PPUSH
60917: LD_INT 33
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PPUSH
60927: CALL_OW 72
60931: ST_TO_ADDR
// if tmp then
60932: LD_VAR 0 4
60936: IFFALSE 61028
// for j in tmp do
60938: LD_ADDR_VAR 0 3
60942: PUSH
60943: LD_VAR 0 4
60947: PUSH
60948: FOR_IN
60949: IFFALSE 61026
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
60951: LD_VAR 0 3
60955: PPUSH
60956: CALL_OW 312
60960: NOT
60961: PUSH
60962: LD_VAR 0 3
60966: PPUSH
60967: CALL_OW 256
60971: PUSH
60972: LD_INT 250
60974: GREATEREQUAL
60975: AND
60976: IFFALSE 60989
// Connect ( j ) else
60978: LD_VAR 0 3
60982: PPUSH
60983: CALL 22590 0 1
60987: GO 61024
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
60989: LD_VAR 0 3
60993: PPUSH
60994: CALL_OW 256
60998: PUSH
60999: LD_INT 250
61001: LESS
61002: PUSH
61003: LD_VAR 0 3
61007: PPUSH
61008: CALL_OW 312
61012: AND
61013: IFFALSE 61024
// ComUnlink ( j ) ;
61015: LD_VAR 0 3
61019: PPUSH
61020: CALL_OW 136
61024: GO 60948
61026: POP
61027: POP
// end ;
61028: GO 60886
61030: POP
61031: POP
// end ;
61032: LD_VAR 0 1
61036: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
61037: LD_INT 0
61039: PPUSH
61040: PPUSH
61041: PPUSH
61042: PPUSH
61043: PPUSH
// if not mc_bases then
61044: LD_EXP 57
61048: NOT
61049: IFFALSE 61053
// exit ;
61051: GO 61513
// for i = 1 to mc_bases do
61053: LD_ADDR_VAR 0 2
61057: PUSH
61058: DOUBLE
61059: LD_INT 1
61061: DEC
61062: ST_TO_ADDR
61063: LD_EXP 57
61067: PUSH
61068: FOR_TO
61069: IFFALSE 61511
// begin if not mc_produce [ i ] then
61071: LD_EXP 78
61075: PUSH
61076: LD_VAR 0 2
61080: ARRAY
61081: NOT
61082: IFFALSE 61086
// continue ;
61084: GO 61068
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61086: LD_ADDR_VAR 0 5
61090: PUSH
61091: LD_EXP 57
61095: PUSH
61096: LD_VAR 0 2
61100: ARRAY
61101: PPUSH
61102: LD_INT 30
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PPUSH
61112: CALL_OW 72
61116: ST_TO_ADDR
// if not fac then
61117: LD_VAR 0 5
61121: NOT
61122: IFFALSE 61126
// continue ;
61124: GO 61068
// for j in fac do
61126: LD_ADDR_VAR 0 3
61130: PUSH
61131: LD_VAR 0 5
61135: PUSH
61136: FOR_IN
61137: IFFALSE 61507
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
61139: LD_VAR 0 3
61143: PPUSH
61144: CALL_OW 461
61148: PUSH
61149: LD_INT 2
61151: NONEQUAL
61152: PUSH
61153: LD_VAR 0 3
61157: PPUSH
61158: LD_INT 15
61160: PPUSH
61161: CALL 22293 0 2
61165: PUSH
61166: LD_INT 4
61168: ARRAY
61169: OR
61170: PUSH
61171: LD_VAR 0 3
61175: PPUSH
61176: CALL_OW 313
61180: PUSH
61181: LD_INT 0
61183: EQUAL
61184: OR
61185: IFFALSE 61189
// continue ;
61187: GO 61136
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
61189: LD_VAR 0 3
61193: PPUSH
61194: LD_EXP 78
61198: PUSH
61199: LD_VAR 0 2
61203: ARRAY
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PUSH
61209: LD_INT 1
61211: ARRAY
61212: PPUSH
61213: LD_EXP 78
61217: PUSH
61218: LD_VAR 0 2
61222: ARRAY
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PUSH
61228: LD_INT 2
61230: ARRAY
61231: PPUSH
61232: LD_EXP 78
61236: PUSH
61237: LD_VAR 0 2
61241: ARRAY
61242: PUSH
61243: LD_INT 1
61245: ARRAY
61246: PUSH
61247: LD_INT 3
61249: ARRAY
61250: PPUSH
61251: LD_EXP 78
61255: PUSH
61256: LD_VAR 0 2
61260: ARRAY
61261: PUSH
61262: LD_INT 1
61264: ARRAY
61265: PUSH
61266: LD_INT 4
61268: ARRAY
61269: PPUSH
61270: CALL_OW 448
61274: PUSH
61275: LD_VAR 0 3
61279: PPUSH
61280: LD_EXP 78
61284: PUSH
61285: LD_VAR 0 2
61289: ARRAY
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PUSH
61295: LD_INT 1
61297: ARRAY
61298: PUSH
61299: LD_EXP 78
61303: PUSH
61304: LD_VAR 0 2
61308: ARRAY
61309: PUSH
61310: LD_INT 1
61312: ARRAY
61313: PUSH
61314: LD_INT 2
61316: ARRAY
61317: PUSH
61318: LD_EXP 78
61322: PUSH
61323: LD_VAR 0 2
61327: ARRAY
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PUSH
61333: LD_INT 3
61335: ARRAY
61336: PUSH
61337: LD_EXP 78
61341: PUSH
61342: LD_VAR 0 2
61346: ARRAY
61347: PUSH
61348: LD_INT 1
61350: ARRAY
61351: PUSH
61352: LD_INT 4
61354: ARRAY
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: PPUSH
61362: CALL 25684 0 2
61366: AND
61367: IFFALSE 61505
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
61369: LD_VAR 0 3
61373: PPUSH
61374: LD_EXP 78
61378: PUSH
61379: LD_VAR 0 2
61383: ARRAY
61384: PUSH
61385: LD_INT 1
61387: ARRAY
61388: PUSH
61389: LD_INT 1
61391: ARRAY
61392: PPUSH
61393: LD_EXP 78
61397: PUSH
61398: LD_VAR 0 2
61402: ARRAY
61403: PUSH
61404: LD_INT 1
61406: ARRAY
61407: PUSH
61408: LD_INT 2
61410: ARRAY
61411: PPUSH
61412: LD_EXP 78
61416: PUSH
61417: LD_VAR 0 2
61421: ARRAY
61422: PUSH
61423: LD_INT 1
61425: ARRAY
61426: PUSH
61427: LD_INT 3
61429: ARRAY
61430: PPUSH
61431: LD_EXP 78
61435: PUSH
61436: LD_VAR 0 2
61440: ARRAY
61441: PUSH
61442: LD_INT 1
61444: ARRAY
61445: PUSH
61446: LD_INT 4
61448: ARRAY
61449: PPUSH
61450: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
61454: LD_ADDR_VAR 0 4
61458: PUSH
61459: LD_EXP 78
61463: PUSH
61464: LD_VAR 0 2
61468: ARRAY
61469: PPUSH
61470: LD_INT 1
61472: PPUSH
61473: CALL_OW 3
61477: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
61478: LD_ADDR_EXP 78
61482: PUSH
61483: LD_EXP 78
61487: PPUSH
61488: LD_VAR 0 2
61492: PPUSH
61493: LD_VAR 0 4
61497: PPUSH
61498: CALL_OW 1
61502: ST_TO_ADDR
// break ;
61503: GO 61507
// end ; end ;
61505: GO 61136
61507: POP
61508: POP
// end ;
61509: GO 61068
61511: POP
61512: POP
// end ;
61513: LD_VAR 0 1
61517: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
61518: LD_INT 0
61520: PPUSH
61521: PPUSH
61522: PPUSH
// if not mc_bases then
61523: LD_EXP 57
61527: NOT
61528: IFFALSE 61532
// exit ;
61530: GO 61621
// for i = 1 to mc_bases do
61532: LD_ADDR_VAR 0 2
61536: PUSH
61537: DOUBLE
61538: LD_INT 1
61540: DEC
61541: ST_TO_ADDR
61542: LD_EXP 57
61546: PUSH
61547: FOR_TO
61548: IFFALSE 61619
// begin if mc_attack [ i ] then
61550: LD_EXP 77
61554: PUSH
61555: LD_VAR 0 2
61559: ARRAY
61560: IFFALSE 61617
// begin tmp := mc_attack [ i ] [ 1 ] ;
61562: LD_ADDR_VAR 0 3
61566: PUSH
61567: LD_EXP 77
61571: PUSH
61572: LD_VAR 0 2
61576: ARRAY
61577: PUSH
61578: LD_INT 1
61580: ARRAY
61581: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61582: LD_ADDR_EXP 77
61586: PUSH
61587: LD_EXP 77
61591: PPUSH
61592: LD_VAR 0 2
61596: PPUSH
61597: EMPTY
61598: PPUSH
61599: CALL_OW 1
61603: ST_TO_ADDR
// Attack ( tmp ) ;
61604: LD_VAR 0 3
61608: PPUSH
61609: CALL 47616 0 1
// exit ;
61613: POP
61614: POP
61615: GO 61621
// end ; end ;
61617: GO 61547
61619: POP
61620: POP
// end ;
61621: LD_VAR 0 1
61625: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
61626: LD_INT 0
61628: PPUSH
61629: PPUSH
61630: PPUSH
61631: PPUSH
61632: PPUSH
61633: PPUSH
61634: PPUSH
// if not mc_bases then
61635: LD_EXP 57
61639: NOT
61640: IFFALSE 61644
// exit ;
61642: GO 62019
// for i = 1 to mc_bases do
61644: LD_ADDR_VAR 0 2
61648: PUSH
61649: DOUBLE
61650: LD_INT 1
61652: DEC
61653: ST_TO_ADDR
61654: LD_EXP 57
61658: PUSH
61659: FOR_TO
61660: IFFALSE 62017
// begin if not mc_bases [ i ] then
61662: LD_EXP 57
61666: PUSH
61667: LD_VAR 0 2
61671: ARRAY
61672: NOT
61673: IFFALSE 61677
// continue ;
61675: GO 61659
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
61677: LD_ADDR_VAR 0 7
61681: PUSH
61682: LD_EXP 57
61686: PUSH
61687: LD_VAR 0 2
61691: ARRAY
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PPUSH
61697: CALL 16607 0 1
61701: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
61702: LD_ADDR_EXP 80
61706: PUSH
61707: LD_EXP 80
61711: PPUSH
61712: LD_VAR 0 2
61716: PPUSH
61717: LD_EXP 57
61721: PUSH
61722: LD_VAR 0 2
61726: ARRAY
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: PPUSH
61732: CALL_OW 255
61736: PPUSH
61737: LD_EXP 82
61741: PUSH
61742: LD_VAR 0 2
61746: ARRAY
61747: PPUSH
61748: CALL 15065 0 2
61752: PPUSH
61753: CALL_OW 1
61757: ST_TO_ADDR
// if not mc_scan [ i ] then
61758: LD_EXP 80
61762: PUSH
61763: LD_VAR 0 2
61767: ARRAY
61768: NOT
61769: IFFALSE 61924
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61771: LD_ADDR_VAR 0 4
61775: PUSH
61776: LD_EXP 57
61780: PUSH
61781: LD_VAR 0 2
61785: ARRAY
61786: PPUSH
61787: LD_INT 2
61789: PUSH
61790: LD_INT 25
61792: PUSH
61793: LD_INT 5
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 25
61802: PUSH
61803: LD_INT 8
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 25
61812: PUSH
61813: LD_INT 9
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: PPUSH
61826: CALL_OW 72
61830: ST_TO_ADDR
// if not tmp then
61831: LD_VAR 0 4
61835: NOT
61836: IFFALSE 61840
// continue ;
61838: GO 61659
// for j in tmp do
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: LD_VAR 0 4
61849: PUSH
61850: FOR_IN
61851: IFFALSE 61922
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
61853: LD_VAR 0 3
61857: PPUSH
61858: CALL_OW 310
61862: PPUSH
61863: CALL_OW 266
61867: PUSH
61868: LD_INT 5
61870: EQUAL
61871: PUSH
61872: LD_VAR 0 3
61876: PPUSH
61877: CALL_OW 257
61881: PUSH
61882: LD_INT 1
61884: EQUAL
61885: AND
61886: PUSH
61887: LD_VAR 0 3
61891: PPUSH
61892: CALL_OW 459
61896: NOT
61897: AND
61898: PUSH
61899: LD_VAR 0 7
61903: AND
61904: IFFALSE 61920
// ComChangeProfession ( j , class ) ;
61906: LD_VAR 0 3
61910: PPUSH
61911: LD_VAR 0 7
61915: PPUSH
61916: CALL_OW 123
61920: GO 61850
61922: POP
61923: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
61924: LD_EXP 80
61928: PUSH
61929: LD_VAR 0 2
61933: ARRAY
61934: PUSH
61935: LD_EXP 79
61939: PUSH
61940: LD_VAR 0 2
61944: ARRAY
61945: AND
61946: IFFALSE 62015
// begin tmp := mc_defender [ i ] ;
61948: LD_ADDR_VAR 0 4
61952: PUSH
61953: LD_EXP 79
61957: PUSH
61958: LD_VAR 0 2
61962: ARRAY
61963: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
61964: LD_ADDR_EXP 79
61968: PUSH
61969: LD_EXP 79
61973: PPUSH
61974: LD_VAR 0 2
61978: PPUSH
61979: EMPTY
61980: PPUSH
61981: CALL_OW 1
61985: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
61986: LD_VAR 0 2
61990: PPUSH
61991: LD_VAR 0 4
61995: PPUSH
61996: LD_EXP 80
62000: PUSH
62001: LD_VAR 0 2
62005: ARRAY
62006: PPUSH
62007: CALL 15100 0 3
// exit ;
62011: POP
62012: POP
62013: GO 62019
// end ; end ;
62015: GO 61659
62017: POP
62018: POP
// end ;
62019: LD_VAR 0 1
62023: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
62024: LD_INT 0
62026: PPUSH
62027: PPUSH
62028: PPUSH
62029: PPUSH
62030: PPUSH
62031: PPUSH
62032: PPUSH
62033: PPUSH
62034: PPUSH
// if not mc_bases then
62035: LD_EXP 57
62039: NOT
62040: IFFALSE 62044
// exit ;
62042: GO 62988
// for i = 1 to mc_bases do
62044: LD_ADDR_VAR 0 2
62048: PUSH
62049: DOUBLE
62050: LD_INT 1
62052: DEC
62053: ST_TO_ADDR
62054: LD_EXP 57
62058: PUSH
62059: FOR_TO
62060: IFFALSE 62986
// begin tmp := mc_lab [ i ] ;
62062: LD_ADDR_VAR 0 6
62066: PUSH
62067: LD_EXP 90
62071: PUSH
62072: LD_VAR 0 2
62076: ARRAY
62077: ST_TO_ADDR
// if not tmp then
62078: LD_VAR 0 6
62082: NOT
62083: IFFALSE 62087
// continue ;
62085: GO 62059
// for j in tmp do
62087: LD_ADDR_VAR 0 3
62091: PUSH
62092: LD_VAR 0 6
62096: PUSH
62097: FOR_IN
62098: IFFALSE 62982
// begin side := GetSide ( j ) ;
62100: LD_ADDR_VAR 0 4
62104: PUSH
62105: LD_VAR 0 3
62109: PPUSH
62110: CALL_OW 255
62114: ST_TO_ADDR
// if not mc_tech [ side ] then
62115: LD_EXP 84
62119: PUSH
62120: LD_VAR 0 4
62124: ARRAY
62125: NOT
62126: IFFALSE 62130
// continue ;
62128: GO 62097
// if BuildingStatus ( j ) = bs_idle then
62130: LD_VAR 0 3
62134: PPUSH
62135: CALL_OW 461
62139: PUSH
62140: LD_INT 2
62142: EQUAL
62143: IFFALSE 62216
// for t in mc_tech [ side ] do
62145: LD_ADDR_VAR 0 5
62149: PUSH
62150: LD_EXP 84
62154: PUSH
62155: LD_VAR 0 4
62159: ARRAY
62160: PUSH
62161: FOR_IN
62162: IFFALSE 62214
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
62164: LD_VAR 0 3
62168: PPUSH
62169: LD_VAR 0 5
62173: PPUSH
62174: CALL_OW 430
62178: PUSH
62179: LD_VAR 0 4
62183: PPUSH
62184: LD_VAR 0 5
62188: PPUSH
62189: CALL 14173 0 2
62193: AND
62194: IFFALSE 62212
// begin ComResearch ( j , t ) ;
62196: LD_VAR 0 3
62200: PPUSH
62201: LD_VAR 0 5
62205: PPUSH
62206: CALL_OW 124
// break ;
62210: GO 62214
// end ;
62212: GO 62161
62214: POP
62215: POP
// if BuildingStatus ( j ) = bs_need_ape then
62216: LD_VAR 0 3
62220: PPUSH
62221: CALL_OW 461
62225: PUSH
62226: LD_INT 10
62228: EQUAL
62229: IFFALSE 62817
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
62231: LD_EXP 86
62235: PUSH
62236: LD_VAR 0 2
62240: ARRAY
62241: NOT
62242: PUSH
62243: LD_EXP 87
62247: PUSH
62248: LD_VAR 0 2
62252: ARRAY
62253: NOT
62254: AND
62255: PUSH
62256: LD_EXP 84
62260: PUSH
62261: LD_VAR 0 4
62265: ARRAY
62266: PUSH
62267: LD_INT 1
62269: GREATER
62270: AND
62271: IFFALSE 62402
// begin ComCancel ( j ) ;
62273: LD_VAR 0 3
62277: PPUSH
62278: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
62282: LD_ADDR_EXP 84
62286: PUSH
62287: LD_EXP 84
62291: PPUSH
62292: LD_VAR 0 4
62296: PPUSH
62297: LD_EXP 84
62301: PUSH
62302: LD_VAR 0 4
62306: ARRAY
62307: PPUSH
62308: LD_EXP 84
62312: PUSH
62313: LD_VAR 0 4
62317: ARRAY
62318: PUSH
62319: LD_INT 1
62321: MINUS
62322: PPUSH
62323: LD_EXP 84
62327: PUSH
62328: LD_VAR 0 4
62332: ARRAY
62333: PPUSH
62334: LD_INT 0
62336: PPUSH
62337: CALL 19085 0 4
62341: PPUSH
62342: CALL_OW 1
62346: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
62347: LD_ADDR_EXP 84
62351: PUSH
62352: LD_EXP 84
62356: PPUSH
62357: LD_VAR 0 4
62361: PPUSH
62362: LD_EXP 84
62366: PUSH
62367: LD_VAR 0 4
62371: ARRAY
62372: PPUSH
62373: LD_EXP 84
62377: PUSH
62378: LD_VAR 0 4
62382: ARRAY
62383: PPUSH
62384: LD_INT 1
62386: PPUSH
62387: LD_INT 0
62389: PPUSH
62390: CALL 19085 0 4
62394: PPUSH
62395: CALL_OW 1
62399: ST_TO_ADDR
// continue ;
62400: GO 62097
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
62402: LD_EXP 86
62406: PUSH
62407: LD_VAR 0 2
62411: ARRAY
62412: PUSH
62413: LD_EXP 87
62417: PUSH
62418: LD_VAR 0 2
62422: ARRAY
62423: NOT
62424: AND
62425: IFFALSE 62552
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
62427: LD_ADDR_EXP 87
62431: PUSH
62432: LD_EXP 87
62436: PPUSH
62437: LD_VAR 0 2
62441: PUSH
62442: LD_EXP 87
62446: PUSH
62447: LD_VAR 0 2
62451: ARRAY
62452: PUSH
62453: LD_INT 1
62455: PLUS
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PPUSH
62461: LD_EXP 86
62465: PUSH
62466: LD_VAR 0 2
62470: ARRAY
62471: PUSH
62472: LD_INT 1
62474: ARRAY
62475: PPUSH
62476: CALL 20102 0 3
62480: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
62481: LD_EXP 86
62485: PUSH
62486: LD_VAR 0 2
62490: ARRAY
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PPUSH
62496: LD_INT 112
62498: PPUSH
62499: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
62503: LD_ADDR_VAR 0 9
62507: PUSH
62508: LD_EXP 86
62512: PUSH
62513: LD_VAR 0 2
62517: ARRAY
62518: PPUSH
62519: LD_INT 1
62521: PPUSH
62522: CALL_OW 3
62526: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
62527: LD_ADDR_EXP 86
62531: PUSH
62532: LD_EXP 86
62536: PPUSH
62537: LD_VAR 0 2
62541: PPUSH
62542: LD_VAR 0 9
62546: PPUSH
62547: CALL_OW 1
62551: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
62552: LD_EXP 86
62556: PUSH
62557: LD_VAR 0 2
62561: ARRAY
62562: PUSH
62563: LD_EXP 87
62567: PUSH
62568: LD_VAR 0 2
62572: ARRAY
62573: AND
62574: PUSH
62575: LD_EXP 87
62579: PUSH
62580: LD_VAR 0 2
62584: ARRAY
62585: PUSH
62586: LD_INT 1
62588: ARRAY
62589: PPUSH
62590: CALL_OW 310
62594: NOT
62595: AND
62596: PUSH
62597: LD_VAR 0 3
62601: PPUSH
62602: CALL_OW 313
62606: PUSH
62607: LD_INT 6
62609: EQUAL
62610: AND
62611: IFFALSE 62667
// begin tmp2 := UnitsInside ( j ) ;
62613: LD_ADDR_VAR 0 9
62617: PUSH
62618: LD_VAR 0 3
62622: PPUSH
62623: CALL_OW 313
62627: ST_TO_ADDR
// if tmp2 = 6 then
62628: LD_VAR 0 9
62632: PUSH
62633: LD_INT 6
62635: EQUAL
62636: IFFALSE 62667
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
62638: LD_VAR 0 9
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PPUSH
62647: LD_INT 112
62649: PPUSH
62650: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
62654: LD_VAR 0 9
62658: PUSH
62659: LD_INT 1
62661: ARRAY
62662: PPUSH
62663: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
62667: LD_EXP 87
62671: PUSH
62672: LD_VAR 0 2
62676: ARRAY
62677: PUSH
62678: LD_EXP 87
62682: PUSH
62683: LD_VAR 0 2
62687: ARRAY
62688: PUSH
62689: LD_INT 1
62691: ARRAY
62692: PPUSH
62693: CALL_OW 314
62697: NOT
62698: AND
62699: PUSH
62700: LD_EXP 87
62704: PUSH
62705: LD_VAR 0 2
62709: ARRAY
62710: PUSH
62711: LD_INT 1
62713: ARRAY
62714: PPUSH
62715: CALL_OW 310
62719: NOT
62720: AND
62721: IFFALSE 62747
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
62723: LD_EXP 87
62727: PUSH
62728: LD_VAR 0 2
62732: ARRAY
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: PPUSH
62738: LD_VAR 0 3
62742: PPUSH
62743: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
62747: LD_EXP 87
62751: PUSH
62752: LD_VAR 0 2
62756: ARRAY
62757: PUSH
62758: LD_INT 1
62760: ARRAY
62761: PPUSH
62762: CALL_OW 310
62766: PUSH
62767: LD_EXP 87
62771: PUSH
62772: LD_VAR 0 2
62776: ARRAY
62777: PUSH
62778: LD_INT 1
62780: ARRAY
62781: PPUSH
62782: CALL_OW 310
62786: PPUSH
62787: CALL_OW 461
62791: PUSH
62792: LD_INT 3
62794: NONEQUAL
62795: AND
62796: IFFALSE 62817
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
62798: LD_EXP 87
62802: PUSH
62803: LD_VAR 0 2
62807: ARRAY
62808: PUSH
62809: LD_INT 1
62811: ARRAY
62812: PPUSH
62813: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
62817: LD_VAR 0 3
62821: PPUSH
62822: CALL_OW 461
62826: PUSH
62827: LD_INT 6
62829: EQUAL
62830: PUSH
62831: LD_VAR 0 6
62835: PUSH
62836: LD_INT 1
62838: GREATER
62839: AND
62840: IFFALSE 62980
// begin sci := [ ] ;
62842: LD_ADDR_VAR 0 8
62846: PUSH
62847: EMPTY
62848: ST_TO_ADDR
// for x in tmp diff j do
62849: LD_ADDR_VAR 0 7
62853: PUSH
62854: LD_VAR 0 6
62858: PUSH
62859: LD_VAR 0 3
62863: DIFF
62864: PUSH
62865: FOR_IN
62866: IFFALSE 62906
// begin if BuildingStatus ( x ) = bs_idle then
62868: LD_VAR 0 7
62872: PPUSH
62873: CALL_OW 461
62877: PUSH
62878: LD_INT 2
62880: EQUAL
62881: IFFALSE 62904
// sci := sci ^ UnitsInside ( x ) ;
62883: LD_ADDR_VAR 0 8
62887: PUSH
62888: LD_VAR 0 8
62892: PUSH
62893: LD_VAR 0 7
62897: PPUSH
62898: CALL_OW 313
62902: ADD
62903: ST_TO_ADDR
// end ;
62904: GO 62865
62906: POP
62907: POP
// if not sci then
62908: LD_VAR 0 8
62912: NOT
62913: IFFALSE 62917
// continue ;
62915: GO 62097
// for x in sci do
62917: LD_ADDR_VAR 0 7
62921: PUSH
62922: LD_VAR 0 8
62926: PUSH
62927: FOR_IN
62928: IFFALSE 62978
// if IsInUnit ( x ) and not HasTask ( x ) then
62930: LD_VAR 0 7
62934: PPUSH
62935: CALL_OW 310
62939: PUSH
62940: LD_VAR 0 7
62944: PPUSH
62945: CALL_OW 314
62949: NOT
62950: AND
62951: IFFALSE 62976
// begin ComExitBuilding ( x ) ;
62953: LD_VAR 0 7
62957: PPUSH
62958: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
62962: LD_VAR 0 7
62966: PPUSH
62967: LD_VAR 0 3
62971: PPUSH
62972: CALL_OW 180
// end ;
62976: GO 62927
62978: POP
62979: POP
// end ; end ;
62980: GO 62097
62982: POP
62983: POP
// end ;
62984: GO 62059
62986: POP
62987: POP
// end ;
62988: LD_VAR 0 1
62992: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
62997: PPUSH
62998: PPUSH
62999: PPUSH
63000: PPUSH
63001: PPUSH
63002: PPUSH
// if not mc_bases or not mc_parking then
63003: LD_EXP 57
63007: NOT
63008: PUSH
63009: LD_EXP 81
63013: NOT
63014: OR
63015: IFFALSE 63019
// exit ;
63017: GO 63677
// for i = 1 to mc_bases do
63019: LD_ADDR_VAR 0 2
63023: PUSH
63024: DOUBLE
63025: LD_INT 1
63027: DEC
63028: ST_TO_ADDR
63029: LD_EXP 57
63033: PUSH
63034: FOR_TO
63035: IFFALSE 63675
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
63037: LD_EXP 57
63041: PUSH
63042: LD_VAR 0 2
63046: ARRAY
63047: NOT
63048: PUSH
63049: LD_EXP 81
63053: PUSH
63054: LD_VAR 0 2
63058: ARRAY
63059: NOT
63060: OR
63061: IFFALSE 63065
// continue ;
63063: GO 63034
// if mc_scan [ i ] then
63065: LD_EXP 80
63069: PUSH
63070: LD_VAR 0 2
63074: ARRAY
63075: IFFALSE 63101
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63077: LD_ADDR_EXP 69
63081: PUSH
63082: LD_EXP 69
63086: PPUSH
63087: LD_VAR 0 2
63091: PPUSH
63092: EMPTY
63093: PPUSH
63094: CALL_OW 1
63098: ST_TO_ADDR
// continue ;
63099: GO 63034
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
63101: LD_ADDR_VAR 0 5
63105: PUSH
63106: LD_EXP 57
63110: PUSH
63111: LD_VAR 0 2
63115: ARRAY
63116: PUSH
63117: LD_INT 1
63119: ARRAY
63120: PPUSH
63121: CALL_OW 255
63125: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63126: LD_ADDR_VAR 0 6
63130: PUSH
63131: LD_EXP 57
63135: PUSH
63136: LD_VAR 0 2
63140: ARRAY
63141: PPUSH
63142: LD_INT 30
63144: PUSH
63145: LD_INT 3
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PPUSH
63152: CALL_OW 72
63156: ST_TO_ADDR
// if not fac then
63157: LD_VAR 0 6
63161: NOT
63162: IFFALSE 63213
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63164: LD_ADDR_VAR 0 6
63168: PUSH
63169: LD_EXP 57
63173: PUSH
63174: LD_VAR 0 2
63178: ARRAY
63179: PPUSH
63180: LD_INT 2
63182: PUSH
63183: LD_INT 30
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 30
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: LIST
63207: PPUSH
63208: CALL_OW 72
63212: ST_TO_ADDR
// if not fac then
63213: LD_VAR 0 6
63217: NOT
63218: IFFALSE 63222
// continue ;
63220: GO 63034
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
63222: LD_ADDR_VAR 0 7
63226: PUSH
63227: LD_EXP 81
63231: PUSH
63232: LD_VAR 0 2
63236: ARRAY
63237: PPUSH
63238: LD_INT 22
63240: PUSH
63241: LD_VAR 0 5
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 21
63252: PUSH
63253: LD_INT 2
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: PUSH
63263: LD_INT 24
63265: PUSH
63266: LD_INT 1000
63268: PUSH
63269: EMPTY
63270: LIST
63271: LIST
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: PPUSH
63282: CALL_OW 70
63286: PUSH
63287: LD_INT 22
63289: PUSH
63290: LD_VAR 0 5
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 91
63301: PUSH
63302: LD_VAR 0 6
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PUSH
63311: LD_INT 25
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 21
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 3
63331: PUSH
63332: LD_INT 24
63334: PUSH
63335: LD_INT 1000
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: PPUSH
63352: CALL_OW 69
63356: UNION
63357: ST_TO_ADDR
// if not vehs then
63358: LD_VAR 0 7
63362: NOT
63363: IFFALSE 63389
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
63365: LD_ADDR_EXP 69
63369: PUSH
63370: LD_EXP 69
63374: PPUSH
63375: LD_VAR 0 2
63379: PPUSH
63380: EMPTY
63381: PPUSH
63382: CALL_OW 1
63386: ST_TO_ADDR
// continue ;
63387: GO 63034
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63389: LD_ADDR_VAR 0 8
63393: PUSH
63394: LD_EXP 57
63398: PUSH
63399: LD_VAR 0 2
63403: ARRAY
63404: PPUSH
63405: LD_INT 30
63407: PUSH
63408: LD_INT 3
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PPUSH
63415: CALL_OW 72
63419: ST_TO_ADDR
// if tmp then
63420: LD_VAR 0 8
63424: IFFALSE 63527
// begin for j in tmp do
63426: LD_ADDR_VAR 0 3
63430: PUSH
63431: LD_VAR 0 8
63435: PUSH
63436: FOR_IN
63437: IFFALSE 63525
// for k in UnitsInside ( j ) do
63439: LD_ADDR_VAR 0 4
63443: PUSH
63444: LD_VAR 0 3
63448: PPUSH
63449: CALL_OW 313
63453: PUSH
63454: FOR_IN
63455: IFFALSE 63521
// if k then
63457: LD_VAR 0 4
63461: IFFALSE 63519
// if not k in mc_repair_vehicle [ i ] then
63463: LD_VAR 0 4
63467: PUSH
63468: LD_EXP 69
63472: PUSH
63473: LD_VAR 0 2
63477: ARRAY
63478: IN
63479: NOT
63480: IFFALSE 63519
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
63482: LD_ADDR_EXP 69
63486: PUSH
63487: LD_EXP 69
63491: PPUSH
63492: LD_VAR 0 2
63496: PPUSH
63497: LD_EXP 69
63501: PUSH
63502: LD_VAR 0 2
63506: ARRAY
63507: PUSH
63508: LD_VAR 0 4
63512: UNION
63513: PPUSH
63514: CALL_OW 1
63518: ST_TO_ADDR
63519: GO 63454
63521: POP
63522: POP
63523: GO 63436
63525: POP
63526: POP
// end ; if not mc_repair_vehicle [ i ] then
63527: LD_EXP 69
63531: PUSH
63532: LD_VAR 0 2
63536: ARRAY
63537: NOT
63538: IFFALSE 63542
// continue ;
63540: GO 63034
// for j in mc_repair_vehicle [ i ] do
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_EXP 69
63551: PUSH
63552: LD_VAR 0 2
63556: ARRAY
63557: PUSH
63558: FOR_IN
63559: IFFALSE 63671
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
63561: LD_VAR 0 3
63565: PPUSH
63566: CALL_OW 311
63570: NOT
63571: PUSH
63572: LD_VAR 0 3
63576: PUSH
63577: LD_EXP 60
63581: PUSH
63582: LD_VAR 0 2
63586: ARRAY
63587: PUSH
63588: LD_INT 1
63590: ARRAY
63591: IN
63592: NOT
63593: AND
63594: PUSH
63595: LD_VAR 0 3
63599: PUSH
63600: LD_EXP 60
63604: PUSH
63605: LD_VAR 0 2
63609: ARRAY
63610: PUSH
63611: LD_INT 2
63613: ARRAY
63614: IN
63615: NOT
63616: AND
63617: IFFALSE 63669
// begin if IsInUnit ( j ) then
63619: LD_VAR 0 3
63623: PPUSH
63624: CALL_OW 310
63628: IFFALSE 63639
// ComExitBuilding ( j ) ;
63630: LD_VAR 0 3
63634: PPUSH
63635: CALL_OW 122
// if not HasTask ( j ) then
63639: LD_VAR 0 3
63643: PPUSH
63644: CALL_OW 314
63648: NOT
63649: IFFALSE 63669
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
63651: LD_VAR 0 3
63655: PPUSH
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 1
63663: ARRAY
63664: PPUSH
63665: CALL_OW 189
// end ; end ;
63669: GO 63558
63671: POP
63672: POP
// end ;
63673: GO 63034
63675: POP
63676: POP
// end ;
63677: LD_VAR 0 1
63681: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
63682: LD_INT 0
63684: PPUSH
63685: PPUSH
63686: PPUSH
63687: PPUSH
63688: PPUSH
63689: PPUSH
63690: PPUSH
63691: PPUSH
63692: PPUSH
63693: PPUSH
63694: PPUSH
// if not mc_bases then
63695: LD_EXP 57
63699: NOT
63700: IFFALSE 63704
// exit ;
63702: GO 64440
// for i = 1 to mc_bases do
63704: LD_ADDR_VAR 0 2
63708: PUSH
63709: DOUBLE
63710: LD_INT 1
63712: DEC
63713: ST_TO_ADDR
63714: LD_EXP 57
63718: PUSH
63719: FOR_TO
63720: IFFALSE 64438
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
63722: LD_EXP 85
63726: PUSH
63727: LD_VAR 0 2
63731: ARRAY
63732: NOT
63733: PUSH
63734: LD_EXP 60
63738: PUSH
63739: LD_VAR 0 2
63743: ARRAY
63744: PUSH
63745: LD_INT 1
63747: ARRAY
63748: OR
63749: PUSH
63750: LD_EXP 60
63754: PUSH
63755: LD_VAR 0 2
63759: ARRAY
63760: PUSH
63761: LD_INT 2
63763: ARRAY
63764: OR
63765: PUSH
63766: LD_EXP 83
63770: PUSH
63771: LD_VAR 0 2
63775: ARRAY
63776: PPUSH
63777: LD_INT 1
63779: PPUSH
63780: CALL_OW 325
63784: NOT
63785: OR
63786: PUSH
63787: LD_EXP 80
63791: PUSH
63792: LD_VAR 0 2
63796: ARRAY
63797: OR
63798: IFFALSE 63802
// continue ;
63800: GO 63719
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
63802: LD_ADDR_VAR 0 8
63806: PUSH
63807: LD_EXP 57
63811: PUSH
63812: LD_VAR 0 2
63816: ARRAY
63817: PPUSH
63818: LD_INT 25
63820: PUSH
63821: LD_INT 4
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 50
63830: PUSH
63831: EMPTY
63832: LIST
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: LD_INT 60
63839: PUSH
63840: EMPTY
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: PPUSH
63852: CALL_OW 72
63856: PUSH
63857: LD_EXP 61
63861: PUSH
63862: LD_VAR 0 2
63866: ARRAY
63867: DIFF
63868: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63869: LD_ADDR_VAR 0 9
63873: PUSH
63874: LD_EXP 57
63878: PUSH
63879: LD_VAR 0 2
63883: ARRAY
63884: PPUSH
63885: LD_INT 2
63887: PUSH
63888: LD_INT 30
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 30
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PPUSH
63913: CALL_OW 72
63917: ST_TO_ADDR
// if not tmp or not dep then
63918: LD_VAR 0 8
63922: NOT
63923: PUSH
63924: LD_VAR 0 9
63928: NOT
63929: OR
63930: IFFALSE 63934
// continue ;
63932: GO 63719
// side := GetSide ( tmp [ 1 ] ) ;
63934: LD_ADDR_VAR 0 11
63938: PUSH
63939: LD_VAR 0 8
63943: PUSH
63944: LD_INT 1
63946: ARRAY
63947: PPUSH
63948: CALL_OW 255
63952: ST_TO_ADDR
// dep := dep [ 1 ] ;
63953: LD_ADDR_VAR 0 9
63957: PUSH
63958: LD_VAR 0 9
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
63967: LD_ADDR_VAR 0 7
63971: PUSH
63972: LD_EXP 85
63976: PUSH
63977: LD_VAR 0 2
63981: ARRAY
63982: PPUSH
63983: LD_INT 22
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 25
63995: PUSH
63996: LD_INT 12
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PPUSH
64007: CALL_OW 70
64011: PUSH
64012: LD_INT 22
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 25
64024: PUSH
64025: LD_INT 12
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 91
64034: PUSH
64035: LD_VAR 0 9
64039: PUSH
64040: LD_INT 20
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: PPUSH
64053: CALL_OW 69
64057: UNION
64058: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
64059: LD_ADDR_VAR 0 10
64063: PUSH
64064: LD_EXP 85
64068: PUSH
64069: LD_VAR 0 2
64073: ARRAY
64074: PPUSH
64075: LD_INT 81
64077: PUSH
64078: LD_VAR 0 11
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PPUSH
64087: CALL_OW 70
64091: ST_TO_ADDR
// if not apes or danger_at_area then
64092: LD_VAR 0 7
64096: NOT
64097: PUSH
64098: LD_VAR 0 10
64102: OR
64103: IFFALSE 64153
// begin if mc_taming [ i ] then
64105: LD_EXP 88
64109: PUSH
64110: LD_VAR 0 2
64114: ARRAY
64115: IFFALSE 64151
// begin MC_Reset ( i , 121 ) ;
64117: LD_VAR 0 2
64121: PPUSH
64122: LD_INT 121
64124: PPUSH
64125: CALL 54970 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64129: LD_ADDR_EXP 88
64133: PUSH
64134: LD_EXP 88
64138: PPUSH
64139: LD_VAR 0 2
64143: PPUSH
64144: EMPTY
64145: PPUSH
64146: CALL_OW 1
64150: ST_TO_ADDR
// end ; continue ;
64151: GO 63719
// end ; for j in tmp do
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 8
64162: PUSH
64163: FOR_IN
64164: IFFALSE 64434
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
64166: LD_VAR 0 3
64170: PUSH
64171: LD_EXP 88
64175: PUSH
64176: LD_VAR 0 2
64180: ARRAY
64181: IN
64182: NOT
64183: PUSH
64184: LD_EXP 88
64188: PUSH
64189: LD_VAR 0 2
64193: ARRAY
64194: PUSH
64195: LD_INT 3
64197: LESS
64198: AND
64199: IFFALSE 64257
// begin SetTag ( j , 121 ) ;
64201: LD_VAR 0 3
64205: PPUSH
64206: LD_INT 121
64208: PPUSH
64209: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
64213: LD_ADDR_EXP 88
64217: PUSH
64218: LD_EXP 88
64222: PPUSH
64223: LD_VAR 0 2
64227: PUSH
64228: LD_EXP 88
64232: PUSH
64233: LD_VAR 0 2
64237: ARRAY
64238: PUSH
64239: LD_INT 1
64241: PLUS
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PPUSH
64247: LD_VAR 0 3
64251: PPUSH
64252: CALL 20102 0 3
64256: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
64257: LD_VAR 0 3
64261: PUSH
64262: LD_EXP 88
64266: PUSH
64267: LD_VAR 0 2
64271: ARRAY
64272: IN
64273: IFFALSE 64432
// begin if IsInUnit ( j ) then
64275: LD_VAR 0 3
64279: PPUSH
64280: CALL_OW 310
64284: IFFALSE 64295
// ComExitBuilding ( j ) ;
64286: LD_VAR 0 3
64290: PPUSH
64291: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
64295: LD_ADDR_VAR 0 6
64299: PUSH
64300: LD_VAR 0 7
64304: PPUSH
64305: LD_VAR 0 3
64309: PPUSH
64310: CALL_OW 74
64314: ST_TO_ADDR
// if not ape then
64315: LD_VAR 0 6
64319: NOT
64320: IFFALSE 64324
// break ;
64322: GO 64434
// x := GetX ( ape ) ;
64324: LD_ADDR_VAR 0 4
64328: PUSH
64329: LD_VAR 0 6
64333: PPUSH
64334: CALL_OW 250
64338: ST_TO_ADDR
// y := GetY ( ape ) ;
64339: LD_ADDR_VAR 0 5
64343: PUSH
64344: LD_VAR 0 6
64348: PPUSH
64349: CALL_OW 251
64353: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64354: LD_VAR 0 4
64358: PPUSH
64359: LD_VAR 0 5
64363: PPUSH
64364: CALL_OW 488
64368: NOT
64369: PUSH
64370: LD_VAR 0 11
64374: PPUSH
64375: LD_VAR 0 4
64379: PPUSH
64380: LD_VAR 0 5
64384: PPUSH
64385: LD_INT 20
64387: PPUSH
64388: CALL 20596 0 4
64392: PUSH
64393: LD_INT 4
64395: ARRAY
64396: OR
64397: IFFALSE 64401
// break ;
64399: GO 64434
// if not HasTask ( j ) then
64401: LD_VAR 0 3
64405: PPUSH
64406: CALL_OW 314
64410: NOT
64411: IFFALSE 64432
// ComTameXY ( j , x , y ) ;
64413: LD_VAR 0 3
64417: PPUSH
64418: LD_VAR 0 4
64422: PPUSH
64423: LD_VAR 0 5
64427: PPUSH
64428: CALL_OW 131
// end ; end ;
64432: GO 64163
64434: POP
64435: POP
// end ;
64436: GO 63719
64438: POP
64439: POP
// end ;
64440: LD_VAR 0 1
64444: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
64445: LD_INT 0
64447: PPUSH
64448: PPUSH
64449: PPUSH
64450: PPUSH
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
// if not mc_bases then
64455: LD_EXP 57
64459: NOT
64460: IFFALSE 64464
// exit ;
64462: GO 65074
// for i = 1 to mc_bases do
64464: LD_ADDR_VAR 0 2
64468: PUSH
64469: DOUBLE
64470: LD_INT 1
64472: DEC
64473: ST_TO_ADDR
64474: LD_EXP 57
64478: PUSH
64479: FOR_TO
64480: IFFALSE 65072
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
64482: LD_EXP 86
64486: PUSH
64487: LD_VAR 0 2
64491: ARRAY
64492: NOT
64493: PUSH
64494: LD_EXP 86
64498: PUSH
64499: LD_VAR 0 2
64503: ARRAY
64504: PPUSH
64505: LD_INT 25
64507: PUSH
64508: LD_INT 12
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PPUSH
64515: CALL_OW 72
64519: NOT
64520: OR
64521: IFFALSE 64525
// continue ;
64523: GO 64479
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
64525: LD_ADDR_VAR 0 5
64529: PUSH
64530: LD_EXP 86
64534: PUSH
64535: LD_VAR 0 2
64539: ARRAY
64540: PUSH
64541: LD_INT 1
64543: ARRAY
64544: PPUSH
64545: CALL_OW 255
64549: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
64550: LD_VAR 0 5
64554: PPUSH
64555: LD_INT 2
64557: PPUSH
64558: CALL_OW 325
64562: IFFALSE 64807
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64564: LD_ADDR_VAR 0 4
64568: PUSH
64569: LD_EXP 86
64573: PUSH
64574: LD_VAR 0 2
64578: ARRAY
64579: PPUSH
64580: LD_INT 25
64582: PUSH
64583: LD_INT 16
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PPUSH
64590: CALL_OW 72
64594: ST_TO_ADDR
// if tmp < 6 then
64595: LD_VAR 0 4
64599: PUSH
64600: LD_INT 6
64602: LESS
64603: IFFALSE 64807
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64605: LD_ADDR_VAR 0 6
64609: PUSH
64610: LD_EXP 57
64614: PUSH
64615: LD_VAR 0 2
64619: ARRAY
64620: PPUSH
64621: LD_INT 2
64623: PUSH
64624: LD_INT 30
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 30
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: PPUSH
64649: CALL_OW 72
64653: ST_TO_ADDR
// if depot then
64654: LD_VAR 0 6
64658: IFFALSE 64807
// begin for j in depot do
64660: LD_ADDR_VAR 0 3
64664: PUSH
64665: LD_VAR 0 6
64669: PUSH
64670: FOR_IN
64671: IFFALSE 64702
// begin if UnitsInside ( j ) < 6 then
64673: LD_VAR 0 3
64677: PPUSH
64678: CALL_OW 313
64682: PUSH
64683: LD_INT 6
64685: LESS
64686: IFFALSE 64700
// begin selected := j ;
64688: LD_ADDR_VAR 0 7
64692: PUSH
64693: LD_VAR 0 3
64697: ST_TO_ADDR
// break ;
64698: GO 64702
// end ; end ;
64700: GO 64670
64702: POP
64703: POP
// if selected then
64704: LD_VAR 0 7
64708: IFFALSE 64807
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64710: LD_ADDR_VAR 0 3
64714: PUSH
64715: LD_EXP 86
64719: PUSH
64720: LD_VAR 0 2
64724: ARRAY
64725: PPUSH
64726: LD_INT 25
64728: PUSH
64729: LD_INT 12
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PPUSH
64736: CALL_OW 72
64740: PUSH
64741: FOR_IN
64742: IFFALSE 64805
// if not HasTask ( j ) then
64744: LD_VAR 0 3
64748: PPUSH
64749: CALL_OW 314
64753: NOT
64754: IFFALSE 64803
// begin if not IsInUnit ( j ) then
64756: LD_VAR 0 3
64760: PPUSH
64761: CALL_OW 310
64765: NOT
64766: IFFALSE 64782
// ComEnterUnit ( j , selected ) ;
64768: LD_VAR 0 3
64772: PPUSH
64773: LD_VAR 0 7
64777: PPUSH
64778: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
64782: LD_VAR 0 3
64786: PPUSH
64787: LD_INT 16
64789: PPUSH
64790: CALL_OW 183
// AddComExitBuilding ( j ) ;
64794: LD_VAR 0 3
64798: PPUSH
64799: CALL_OW 182
// end ;
64803: GO 64741
64805: POP
64806: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
64807: LD_VAR 0 5
64811: PPUSH
64812: LD_INT 11
64814: PPUSH
64815: CALL_OW 325
64819: IFFALSE 65070
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
64821: LD_ADDR_VAR 0 4
64825: PUSH
64826: LD_EXP 86
64830: PUSH
64831: LD_VAR 0 2
64835: ARRAY
64836: PPUSH
64837: LD_INT 25
64839: PUSH
64840: LD_INT 16
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PPUSH
64847: CALL_OW 72
64851: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
64852: LD_VAR 0 4
64856: PUSH
64857: LD_INT 6
64859: GREATEREQUAL
64860: PUSH
64861: LD_VAR 0 5
64865: PPUSH
64866: LD_INT 2
64868: PPUSH
64869: CALL_OW 325
64873: NOT
64874: OR
64875: IFFALSE 65070
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
64877: LD_ADDR_VAR 0 8
64881: PUSH
64882: LD_EXP 57
64886: PUSH
64887: LD_VAR 0 2
64891: ARRAY
64892: PPUSH
64893: LD_INT 2
64895: PUSH
64896: LD_INT 30
64898: PUSH
64899: LD_INT 4
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 30
64908: PUSH
64909: LD_INT 5
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: PPUSH
64921: CALL_OW 72
64925: ST_TO_ADDR
// if barracks then
64926: LD_VAR 0 8
64930: IFFALSE 65070
// begin for j in barracks do
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: LD_VAR 0 8
64941: PUSH
64942: FOR_IN
64943: IFFALSE 64974
// begin if UnitsInside ( j ) < 6 then
64945: LD_VAR 0 3
64949: PPUSH
64950: CALL_OW 313
64954: PUSH
64955: LD_INT 6
64957: LESS
64958: IFFALSE 64972
// begin selected := j ;
64960: LD_ADDR_VAR 0 7
64964: PUSH
64965: LD_VAR 0 3
64969: ST_TO_ADDR
// break ;
64970: GO 64974
// end ; end ;
64972: GO 64942
64974: POP
64975: POP
// if selected then
64976: LD_VAR 0 7
64980: IFFALSE 65070
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
64982: LD_ADDR_VAR 0 3
64986: PUSH
64987: LD_EXP 86
64991: PUSH
64992: LD_VAR 0 2
64996: ARRAY
64997: PPUSH
64998: LD_INT 25
65000: PUSH
65001: LD_INT 12
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PPUSH
65008: CALL_OW 72
65012: PUSH
65013: FOR_IN
65014: IFFALSE 65068
// if not IsInUnit ( j ) and not HasTask ( j ) then
65016: LD_VAR 0 3
65020: PPUSH
65021: CALL_OW 310
65025: NOT
65026: PUSH
65027: LD_VAR 0 3
65031: PPUSH
65032: CALL_OW 314
65036: NOT
65037: AND
65038: IFFALSE 65066
// begin ComEnterUnit ( j , selected ) ;
65040: LD_VAR 0 3
65044: PPUSH
65045: LD_VAR 0 7
65049: PPUSH
65050: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
65054: LD_VAR 0 3
65058: PPUSH
65059: LD_INT 15
65061: PPUSH
65062: CALL_OW 183
// end ;
65066: GO 65013
65068: POP
65069: POP
// end ; end ; end ; end ; end ;
65070: GO 64479
65072: POP
65073: POP
// end ;
65074: LD_VAR 0 1
65078: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
65079: LD_INT 0
65081: PPUSH
65082: PPUSH
65083: PPUSH
65084: PPUSH
// if not mc_bases then
65085: LD_EXP 57
65089: NOT
65090: IFFALSE 65094
// exit ;
65092: GO 65272
// for i = 1 to mc_bases do
65094: LD_ADDR_VAR 0 2
65098: PUSH
65099: DOUBLE
65100: LD_INT 1
65102: DEC
65103: ST_TO_ADDR
65104: LD_EXP 57
65108: PUSH
65109: FOR_TO
65110: IFFALSE 65270
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
65112: LD_ADDR_VAR 0 4
65116: PUSH
65117: LD_EXP 57
65121: PUSH
65122: LD_VAR 0 2
65126: ARRAY
65127: PPUSH
65128: LD_INT 25
65130: PUSH
65131: LD_INT 9
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PPUSH
65138: CALL_OW 72
65142: ST_TO_ADDR
// if not tmp then
65143: LD_VAR 0 4
65147: NOT
65148: IFFALSE 65152
// continue ;
65150: GO 65109
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
65152: LD_EXP 83
65156: PUSH
65157: LD_VAR 0 2
65161: ARRAY
65162: PPUSH
65163: LD_INT 29
65165: PPUSH
65166: CALL_OW 325
65170: NOT
65171: PUSH
65172: LD_EXP 83
65176: PUSH
65177: LD_VAR 0 2
65181: ARRAY
65182: PPUSH
65183: LD_INT 28
65185: PPUSH
65186: CALL_OW 325
65190: NOT
65191: AND
65192: IFFALSE 65196
// continue ;
65194: GO 65109
// for j in tmp do
65196: LD_ADDR_VAR 0 3
65200: PUSH
65201: LD_VAR 0 4
65205: PUSH
65206: FOR_IN
65207: IFFALSE 65266
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65209: LD_VAR 0 3
65213: PUSH
65214: LD_EXP 60
65218: PUSH
65219: LD_VAR 0 2
65223: ARRAY
65224: PUSH
65225: LD_INT 1
65227: ARRAY
65228: IN
65229: NOT
65230: PUSH
65231: LD_VAR 0 3
65235: PUSH
65236: LD_EXP 60
65240: PUSH
65241: LD_VAR 0 2
65245: ARRAY
65246: PUSH
65247: LD_INT 2
65249: ARRAY
65250: IN
65251: NOT
65252: AND
65253: IFFALSE 65264
// ComSpaceTimeShoot ( j ) ;
65255: LD_VAR 0 3
65259: PPUSH
65260: CALL 14264 0 1
65264: GO 65206
65266: POP
65267: POP
// end ;
65268: GO 65109
65270: POP
65271: POP
// end ;
65272: LD_VAR 0 1
65276: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
65281: PPUSH
65282: PPUSH
// if not mc_bases then
65283: LD_EXP 57
65287: NOT
65288: IFFALSE 65292
// exit ;
65290: GO 65314
// for i = 1 to mc_bases do
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: DOUBLE
65298: LD_INT 1
65300: DEC
65301: ST_TO_ADDR
65302: LD_EXP 57
65306: PUSH
65307: FOR_TO
65308: IFFALSE 65312
// begin end ;
65310: GO 65307
65312: POP
65313: POP
// end ;
65314: LD_VAR 0 1
65318: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
65319: LD_INT 0
65321: PPUSH
65322: PPUSH
65323: PPUSH
// if not mc_bases then
65324: LD_EXP 57
65328: NOT
65329: IFFALSE 65333
// exit ;
65331: GO 65893
// for i = 1 to mc_bases do
65333: LD_ADDR_VAR 0 2
65337: PUSH
65338: DOUBLE
65339: LD_INT 1
65341: DEC
65342: ST_TO_ADDR
65343: LD_EXP 57
65347: PUSH
65348: FOR_TO
65349: IFFALSE 65891
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65351: LD_ADDR_VAR 0 3
65355: PUSH
65356: LD_EXP 57
65360: PUSH
65361: LD_VAR 0 2
65365: ARRAY
65366: PPUSH
65367: LD_INT 25
65369: PUSH
65370: LD_INT 4
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PPUSH
65377: CALL_OW 72
65381: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
65382: LD_VAR 0 3
65386: NOT
65387: PUSH
65388: LD_EXP 93
65392: PUSH
65393: LD_VAR 0 2
65397: ARRAY
65398: NOT
65399: OR
65400: IFFALSE 65450
// begin if mc_deposits_finder [ i ] then
65402: LD_EXP 94
65406: PUSH
65407: LD_VAR 0 2
65411: ARRAY
65412: IFFALSE 65448
// begin MC_Reset ( i , 125 ) ;
65414: LD_VAR 0 2
65418: PPUSH
65419: LD_INT 125
65421: PPUSH
65422: CALL 54970 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65426: LD_ADDR_EXP 94
65430: PUSH
65431: LD_EXP 94
65435: PPUSH
65436: LD_VAR 0 2
65440: PPUSH
65441: EMPTY
65442: PPUSH
65443: CALL_OW 1
65447: ST_TO_ADDR
// end ; continue ;
65448: GO 65348
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
65450: LD_EXP 93
65454: PUSH
65455: LD_VAR 0 2
65459: ARRAY
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PUSH
65465: LD_INT 3
65467: ARRAY
65468: PUSH
65469: LD_INT 1
65471: EQUAL
65472: PUSH
65473: LD_INT 20
65475: PPUSH
65476: LD_EXP 83
65480: PUSH
65481: LD_VAR 0 2
65485: ARRAY
65486: PPUSH
65487: CALL_OW 321
65491: PUSH
65492: LD_INT 2
65494: NONEQUAL
65495: AND
65496: IFFALSE 65546
// begin if mc_deposits_finder [ i ] then
65498: LD_EXP 94
65502: PUSH
65503: LD_VAR 0 2
65507: ARRAY
65508: IFFALSE 65544
// begin MC_Reset ( i , 125 ) ;
65510: LD_VAR 0 2
65514: PPUSH
65515: LD_INT 125
65517: PPUSH
65518: CALL 54970 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65522: LD_ADDR_EXP 94
65526: PUSH
65527: LD_EXP 94
65531: PPUSH
65532: LD_VAR 0 2
65536: PPUSH
65537: EMPTY
65538: PPUSH
65539: CALL_OW 1
65543: ST_TO_ADDR
// end ; continue ;
65544: GO 65348
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
65546: LD_EXP 93
65550: PUSH
65551: LD_VAR 0 2
65555: ARRAY
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: PPUSH
65565: LD_EXP 93
65569: PUSH
65570: LD_VAR 0 2
65574: ARRAY
65575: PUSH
65576: LD_INT 1
65578: ARRAY
65579: PUSH
65580: LD_INT 2
65582: ARRAY
65583: PPUSH
65584: LD_EXP 83
65588: PUSH
65589: LD_VAR 0 2
65593: ARRAY
65594: PPUSH
65595: CALL_OW 440
65599: IFFALSE 65642
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
65601: LD_ADDR_EXP 93
65605: PUSH
65606: LD_EXP 93
65610: PPUSH
65611: LD_VAR 0 2
65615: PPUSH
65616: LD_EXP 93
65620: PUSH
65621: LD_VAR 0 2
65625: ARRAY
65626: PPUSH
65627: LD_INT 1
65629: PPUSH
65630: CALL_OW 3
65634: PPUSH
65635: CALL_OW 1
65639: ST_TO_ADDR
65640: GO 65889
// begin if not mc_deposits_finder [ i ] then
65642: LD_EXP 94
65646: PUSH
65647: LD_VAR 0 2
65651: ARRAY
65652: NOT
65653: IFFALSE 65705
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
65655: LD_ADDR_EXP 94
65659: PUSH
65660: LD_EXP 94
65664: PPUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: LD_VAR 0 3
65674: PUSH
65675: LD_INT 1
65677: ARRAY
65678: PUSH
65679: EMPTY
65680: LIST
65681: PPUSH
65682: CALL_OW 1
65686: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
65687: LD_VAR 0 3
65691: PUSH
65692: LD_INT 1
65694: ARRAY
65695: PPUSH
65696: LD_INT 125
65698: PPUSH
65699: CALL_OW 109
// end else
65703: GO 65889
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
65705: LD_EXP 94
65709: PUSH
65710: LD_VAR 0 2
65714: ARRAY
65715: PUSH
65716: LD_INT 1
65718: ARRAY
65719: PPUSH
65720: CALL_OW 310
65724: IFFALSE 65747
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
65726: LD_EXP 94
65730: PUSH
65731: LD_VAR 0 2
65735: ARRAY
65736: PUSH
65737: LD_INT 1
65739: ARRAY
65740: PPUSH
65741: CALL_OW 122
65745: GO 65889
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
65747: LD_EXP 94
65751: PUSH
65752: LD_VAR 0 2
65756: ARRAY
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PPUSH
65762: CALL_OW 314
65766: NOT
65767: PUSH
65768: LD_EXP 94
65772: PUSH
65773: LD_VAR 0 2
65777: ARRAY
65778: PUSH
65779: LD_INT 1
65781: ARRAY
65782: PPUSH
65783: LD_EXP 93
65787: PUSH
65788: LD_VAR 0 2
65792: ARRAY
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: PPUSH
65802: LD_EXP 93
65806: PUSH
65807: LD_VAR 0 2
65811: ARRAY
65812: PUSH
65813: LD_INT 1
65815: ARRAY
65816: PUSH
65817: LD_INT 2
65819: ARRAY
65820: PPUSH
65821: CALL_OW 297
65825: PUSH
65826: LD_INT 6
65828: GREATER
65829: AND
65830: IFFALSE 65889
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
65832: LD_EXP 94
65836: PUSH
65837: LD_VAR 0 2
65841: ARRAY
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: PPUSH
65847: LD_EXP 93
65851: PUSH
65852: LD_VAR 0 2
65856: ARRAY
65857: PUSH
65858: LD_INT 1
65860: ARRAY
65861: PUSH
65862: LD_INT 1
65864: ARRAY
65865: PPUSH
65866: LD_EXP 93
65870: PUSH
65871: LD_VAR 0 2
65875: ARRAY
65876: PUSH
65877: LD_INT 1
65879: ARRAY
65880: PUSH
65881: LD_INT 2
65883: ARRAY
65884: PPUSH
65885: CALL_OW 111
// end ; end ; end ;
65889: GO 65348
65891: POP
65892: POP
// end ;
65893: LD_VAR 0 1
65897: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
65898: LD_INT 0
65900: PPUSH
65901: PPUSH
65902: PPUSH
65903: PPUSH
65904: PPUSH
65905: PPUSH
65906: PPUSH
65907: PPUSH
65908: PPUSH
// if not mc_bases then
65909: LD_EXP 57
65913: NOT
65914: IFFALSE 65918
// exit ;
65916: GO 66416
// for i = 1 to mc_bases do
65918: LD_ADDR_VAR 0 2
65922: PUSH
65923: DOUBLE
65924: LD_INT 1
65926: DEC
65927: ST_TO_ADDR
65928: LD_EXP 57
65932: PUSH
65933: FOR_TO
65934: IFFALSE 66414
// begin if not mc_bases [ i ] then
65936: LD_EXP 57
65940: PUSH
65941: LD_VAR 0 2
65945: ARRAY
65946: NOT
65947: IFFALSE 65951
// continue ;
65949: GO 65933
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
65951: LD_ADDR_VAR 0 7
65955: PUSH
65956: LD_EXP 57
65960: PUSH
65961: LD_VAR 0 2
65965: ARRAY
65966: PUSH
65967: LD_INT 1
65969: ARRAY
65970: PPUSH
65971: CALL_OW 248
65975: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
65976: LD_VAR 0 7
65980: PUSH
65981: LD_INT 1
65983: NONEQUAL
65984: PUSH
65985: LD_EXP 76
65989: PUSH
65990: LD_VAR 0 2
65994: ARRAY
65995: PUSH
65996: LD_EXP 79
66000: PUSH
66001: LD_VAR 0 2
66005: ARRAY
66006: UNION
66007: PPUSH
66008: LD_INT 33
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PPUSH
66018: CALL_OW 72
66022: NOT
66023: OR
66024: IFFALSE 66028
// continue ;
66026: GO 65933
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
66028: LD_ADDR_VAR 0 9
66032: PUSH
66033: LD_EXP 57
66037: PUSH
66038: LD_VAR 0 2
66042: ARRAY
66043: PPUSH
66044: LD_INT 30
66046: PUSH
66047: LD_INT 36
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PPUSH
66054: CALL_OW 72
66058: ST_TO_ADDR
// if not cts then
66059: LD_VAR 0 9
66063: NOT
66064: IFFALSE 66068
// continue ;
66066: GO 65933
// if mc_remote_driver [ i ] then
66068: LD_EXP 96
66072: PUSH
66073: LD_VAR 0 2
66077: ARRAY
66078: IFFALSE 66227
// for j in mc_remote_driver [ i ] do
66080: LD_ADDR_VAR 0 3
66084: PUSH
66085: LD_EXP 96
66089: PUSH
66090: LD_VAR 0 2
66094: ARRAY
66095: PUSH
66096: FOR_IN
66097: IFFALSE 66225
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
66099: LD_VAR 0 3
66103: PPUSH
66104: CALL_OW 310
66108: NOT
66109: PUSH
66110: LD_VAR 0 3
66114: PPUSH
66115: CALL_OW 310
66119: PPUSH
66120: CALL_OW 266
66124: PUSH
66125: LD_INT 36
66127: NONEQUAL
66128: OR
66129: IFFALSE 66223
// begin if IsInUnit ( j ) then
66131: LD_VAR 0 3
66135: PPUSH
66136: CALL_OW 310
66140: IFFALSE 66151
// ComExitBuilding ( j ) ;
66142: LD_VAR 0 3
66146: PPUSH
66147: CALL_OW 122
// ct := 0 ;
66151: LD_ADDR_VAR 0 8
66155: PUSH
66156: LD_INT 0
66158: ST_TO_ADDR
// for k in cts do
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_VAR 0 9
66168: PUSH
66169: FOR_IN
66170: IFFALSE 66201
// if UnitsInside ( k ) < 3 then
66172: LD_VAR 0 4
66176: PPUSH
66177: CALL_OW 313
66181: PUSH
66182: LD_INT 3
66184: LESS
66185: IFFALSE 66199
// begin ct := k ;
66187: LD_ADDR_VAR 0 8
66191: PUSH
66192: LD_VAR 0 4
66196: ST_TO_ADDR
// break ;
66197: GO 66201
// end ;
66199: GO 66169
66201: POP
66202: POP
// if ct then
66203: LD_VAR 0 8
66207: IFFALSE 66223
// AddComEnterUnit ( j , ct ) ;
66209: LD_VAR 0 3
66213: PPUSH
66214: LD_VAR 0 8
66218: PPUSH
66219: CALL_OW 180
// end ;
66223: GO 66096
66225: POP
66226: POP
// places := 0 ;
66227: LD_ADDR_VAR 0 5
66231: PUSH
66232: LD_INT 0
66234: ST_TO_ADDR
// for j = 1 to cts do
66235: LD_ADDR_VAR 0 3
66239: PUSH
66240: DOUBLE
66241: LD_INT 1
66243: DEC
66244: ST_TO_ADDR
66245: LD_VAR 0 9
66249: PUSH
66250: FOR_TO
66251: IFFALSE 66269
// places := places + 3 ;
66253: LD_ADDR_VAR 0 5
66257: PUSH
66258: LD_VAR 0 5
66262: PUSH
66263: LD_INT 3
66265: PLUS
66266: ST_TO_ADDR
66267: GO 66250
66269: POP
66270: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
66271: LD_ADDR_VAR 0 6
66275: PUSH
66276: LD_EXP 57
66280: PUSH
66281: LD_VAR 0 2
66285: ARRAY
66286: PPUSH
66287: LD_INT 25
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PPUSH
66297: CALL_OW 72
66301: PUSH
66302: LD_EXP 96
66306: PUSH
66307: LD_VAR 0 2
66311: ARRAY
66312: DIFF
66313: ST_TO_ADDR
// if not tmp then
66314: LD_VAR 0 6
66318: NOT
66319: IFFALSE 66323
// continue ;
66321: GO 65933
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
66323: LD_ADDR_VAR 0 5
66327: PUSH
66328: LD_VAR 0 5
66332: PUSH
66333: LD_EXP 96
66337: PUSH
66338: LD_VAR 0 2
66342: ARRAY
66343: PUSH
66344: LD_INT 1
66346: PLUS
66347: MINUS
66348: ST_TO_ADDR
// if places then
66349: LD_VAR 0 5
66353: IFFALSE 66412
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
66355: LD_ADDR_EXP 96
66359: PUSH
66360: LD_EXP 96
66364: PPUSH
66365: LD_VAR 0 2
66369: PPUSH
66370: LD_EXP 96
66374: PUSH
66375: LD_VAR 0 2
66379: ARRAY
66380: PUSH
66381: LD_VAR 0 6
66385: PUSH
66386: LD_INT 1
66388: ARRAY
66389: UNION
66390: PPUSH
66391: CALL_OW 1
66395: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
66396: LD_VAR 0 6
66400: PUSH
66401: LD_INT 1
66403: ARRAY
66404: PPUSH
66405: LD_INT 126
66407: PPUSH
66408: CALL_OW 109
// end ; end ;
66412: GO 65933
66414: POP
66415: POP
// end ;
66416: LD_VAR 0 1
66420: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
66421: LD_INT 0
66423: PPUSH
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
66429: LD_VAR 0 1
66433: NOT
66434: PUSH
66435: LD_VAR 0 2
66439: NOT
66440: OR
66441: PUSH
66442: LD_VAR 0 3
66446: NOT
66447: OR
66448: PUSH
66449: LD_VAR 0 4
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 3
66462: PUSH
66463: LD_INT 4
66465: PUSH
66466: LD_INT 5
66468: PUSH
66469: LD_INT 8
66471: PUSH
66472: LD_INT 9
66474: PUSH
66475: LD_INT 15
66477: PUSH
66478: LD_INT 16
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: IN
66492: NOT
66493: OR
66494: IFFALSE 66498
// exit ;
66496: GO 67398
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
66498: LD_ADDR_VAR 0 2
66502: PUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: LD_INT 21
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 24
66520: PUSH
66521: LD_INT 250
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PPUSH
66532: CALL_OW 72
66536: ST_TO_ADDR
// case class of 1 , 15 :
66537: LD_VAR 0 4
66541: PUSH
66542: LD_INT 1
66544: DOUBLE
66545: EQUAL
66546: IFTRUE 66556
66548: LD_INT 15
66550: DOUBLE
66551: EQUAL
66552: IFTRUE 66556
66554: GO 66641
66556: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
66557: LD_ADDR_VAR 0 8
66561: PUSH
66562: LD_VAR 0 2
66566: PPUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 30
66572: PUSH
66573: LD_INT 32
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 30
66582: PUSH
66583: LD_INT 31
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: LIST
66594: PPUSH
66595: CALL_OW 72
66599: PUSH
66600: LD_VAR 0 2
66604: PPUSH
66605: LD_INT 2
66607: PUSH
66608: LD_INT 30
66610: PUSH
66611: LD_INT 4
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 30
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: PPUSH
66633: CALL_OW 72
66637: ADD
66638: ST_TO_ADDR
66639: GO 66887
66641: LD_INT 2
66643: DOUBLE
66644: EQUAL
66645: IFTRUE 66655
66647: LD_INT 16
66649: DOUBLE
66650: EQUAL
66651: IFTRUE 66655
66653: GO 66701
66655: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
66656: LD_ADDR_VAR 0 8
66660: PUSH
66661: LD_VAR 0 2
66665: PPUSH
66666: LD_INT 2
66668: PUSH
66669: LD_INT 30
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 30
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 72
66698: ST_TO_ADDR
66699: GO 66887
66701: LD_INT 3
66703: DOUBLE
66704: EQUAL
66705: IFTRUE 66709
66707: GO 66755
66709: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
66710: LD_ADDR_VAR 0 8
66714: PUSH
66715: LD_VAR 0 2
66719: PPUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 30
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 30
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: PPUSH
66748: CALL_OW 72
66752: ST_TO_ADDR
66753: GO 66887
66755: LD_INT 4
66757: DOUBLE
66758: EQUAL
66759: IFTRUE 66763
66761: GO 66820
66763: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
66764: LD_ADDR_VAR 0 8
66768: PUSH
66769: LD_VAR 0 2
66773: PPUSH
66774: LD_INT 2
66776: PUSH
66777: LD_INT 30
66779: PUSH
66780: LD_INT 6
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 30
66789: PUSH
66790: LD_INT 7
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 30
66799: PUSH
66800: LD_INT 8
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: PPUSH
66813: CALL_OW 72
66817: ST_TO_ADDR
66818: GO 66887
66820: LD_INT 5
66822: DOUBLE
66823: EQUAL
66824: IFTRUE 66840
66826: LD_INT 8
66828: DOUBLE
66829: EQUAL
66830: IFTRUE 66840
66832: LD_INT 9
66834: DOUBLE
66835: EQUAL
66836: IFTRUE 66840
66838: GO 66886
66840: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
66841: LD_ADDR_VAR 0 8
66845: PUSH
66846: LD_VAR 0 2
66850: PPUSH
66851: LD_INT 2
66853: PUSH
66854: LD_INT 30
66856: PUSH
66857: LD_INT 4
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 30
66866: PUSH
66867: LD_INT 5
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: LIST
66878: PPUSH
66879: CALL_OW 72
66883: ST_TO_ADDR
66884: GO 66887
66886: POP
// if not tmp then
66887: LD_VAR 0 8
66891: NOT
66892: IFFALSE 66896
// exit ;
66894: GO 67398
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
66896: LD_VAR 0 4
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: LD_INT 15
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: IN
66911: PUSH
66912: LD_EXP 66
66916: PUSH
66917: LD_VAR 0 1
66921: ARRAY
66922: AND
66923: IFFALSE 67079
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
66925: LD_ADDR_VAR 0 9
66929: PUSH
66930: LD_EXP 66
66934: PUSH
66935: LD_VAR 0 1
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
66945: LD_VAR 0 9
66949: PUSH
66950: LD_EXP 67
66954: PUSH
66955: LD_VAR 0 1
66959: ARRAY
66960: IN
66961: NOT
66962: IFFALSE 67077
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
66964: LD_ADDR_EXP 67
66968: PUSH
66969: LD_EXP 67
66973: PPUSH
66974: LD_VAR 0 1
66978: PUSH
66979: LD_EXP 67
66983: PUSH
66984: LD_VAR 0 1
66988: ARRAY
66989: PUSH
66990: LD_INT 1
66992: PLUS
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PPUSH
66998: LD_VAR 0 9
67002: PPUSH
67003: CALL 20102 0 3
67007: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
67008: LD_ADDR_EXP 66
67012: PUSH
67013: LD_EXP 66
67017: PPUSH
67018: LD_VAR 0 1
67022: PPUSH
67023: LD_EXP 66
67027: PUSH
67028: LD_VAR 0 1
67032: ARRAY
67033: PUSH
67034: LD_VAR 0 9
67038: DIFF
67039: PPUSH
67040: CALL_OW 1
67044: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
67045: LD_VAR 0 3
67049: PPUSH
67050: LD_EXP 67
67054: PUSH
67055: LD_VAR 0 1
67059: ARRAY
67060: PUSH
67061: LD_EXP 67
67065: PUSH
67066: LD_VAR 0 1
67070: ARRAY
67071: ARRAY
67072: PPUSH
67073: CALL_OW 120
// end ; exit ;
67077: GO 67398
// end ; if tmp > 1 then
67079: LD_VAR 0 8
67083: PUSH
67084: LD_INT 1
67086: GREATER
67087: IFFALSE 67191
// for i = 2 to tmp do
67089: LD_ADDR_VAR 0 6
67093: PUSH
67094: DOUBLE
67095: LD_INT 2
67097: DEC
67098: ST_TO_ADDR
67099: LD_VAR 0 8
67103: PUSH
67104: FOR_TO
67105: IFFALSE 67189
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
67107: LD_VAR 0 8
67111: PUSH
67112: LD_VAR 0 6
67116: ARRAY
67117: PPUSH
67118: CALL_OW 461
67122: PUSH
67123: LD_INT 6
67125: EQUAL
67126: IFFALSE 67187
// begin x := tmp [ i ] ;
67128: LD_ADDR_VAR 0 9
67132: PUSH
67133: LD_VAR 0 8
67137: PUSH
67138: LD_VAR 0 6
67142: ARRAY
67143: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
67144: LD_ADDR_VAR 0 8
67148: PUSH
67149: LD_VAR 0 8
67153: PPUSH
67154: LD_VAR 0 6
67158: PPUSH
67159: CALL_OW 3
67163: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
67164: LD_ADDR_VAR 0 8
67168: PUSH
67169: LD_VAR 0 8
67173: PPUSH
67174: LD_INT 1
67176: PPUSH
67177: LD_VAR 0 9
67181: PPUSH
67182: CALL_OW 2
67186: ST_TO_ADDR
// end ;
67187: GO 67104
67189: POP
67190: POP
// for i in tmp do
67191: LD_ADDR_VAR 0 6
67195: PUSH
67196: LD_VAR 0 8
67200: PUSH
67201: FOR_IN
67202: IFFALSE 67271
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
67204: LD_VAR 0 6
67208: PPUSH
67209: CALL_OW 313
67213: PUSH
67214: LD_INT 6
67216: LESS
67217: PUSH
67218: LD_VAR 0 6
67222: PPUSH
67223: CALL_OW 266
67227: PUSH
67228: LD_INT 31
67230: PUSH
67231: LD_INT 32
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: IN
67238: NOT
67239: AND
67240: PUSH
67241: LD_VAR 0 6
67245: PPUSH
67246: CALL_OW 313
67250: PUSH
67251: LD_INT 0
67253: EQUAL
67254: OR
67255: IFFALSE 67269
// begin j := i ;
67257: LD_ADDR_VAR 0 7
67261: PUSH
67262: LD_VAR 0 6
67266: ST_TO_ADDR
// break ;
67267: GO 67271
// end ; end ;
67269: GO 67201
67271: POP
67272: POP
// if j then
67273: LD_VAR 0 7
67277: IFFALSE 67295
// ComEnterUnit ( unit , j ) else
67279: LD_VAR 0 3
67283: PPUSH
67284: LD_VAR 0 7
67288: PPUSH
67289: CALL_OW 120
67293: GO 67398
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67295: LD_ADDR_VAR 0 10
67299: PUSH
67300: LD_VAR 0 2
67304: PPUSH
67305: LD_INT 2
67307: PUSH
67308: LD_INT 30
67310: PUSH
67311: LD_INT 0
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 30
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: PPUSH
67333: CALL_OW 72
67337: ST_TO_ADDR
// if depot then
67338: LD_VAR 0 10
67342: IFFALSE 67398
// begin depot := NearestUnitToUnit ( depot , unit ) ;
67344: LD_ADDR_VAR 0 10
67348: PUSH
67349: LD_VAR 0 10
67353: PPUSH
67354: LD_VAR 0 3
67358: PPUSH
67359: CALL_OW 74
67363: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
67364: LD_VAR 0 3
67368: PPUSH
67369: LD_VAR 0 10
67373: PPUSH
67374: CALL_OW 296
67378: PUSH
67379: LD_INT 10
67381: GREATER
67382: IFFALSE 67398
// ComStandNearbyBuilding ( unit , depot ) ;
67384: LD_VAR 0 3
67388: PPUSH
67389: LD_VAR 0 10
67393: PPUSH
67394: CALL 14881 0 2
// end ; end ; end ;
67398: LD_VAR 0 5
67402: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
67403: LD_INT 0
67405: PPUSH
67406: PPUSH
67407: PPUSH
67408: PPUSH
// if not mc_bases then
67409: LD_EXP 57
67413: NOT
67414: IFFALSE 67418
// exit ;
67416: GO 67657
// for i = 1 to mc_bases do
67418: LD_ADDR_VAR 0 2
67422: PUSH
67423: DOUBLE
67424: LD_INT 1
67426: DEC
67427: ST_TO_ADDR
67428: LD_EXP 57
67432: PUSH
67433: FOR_TO
67434: IFFALSE 67655
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
67436: LD_ADDR_VAR 0 4
67440: PUSH
67441: LD_EXP 57
67445: PUSH
67446: LD_VAR 0 2
67450: ARRAY
67451: PPUSH
67452: LD_INT 21
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PPUSH
67462: CALL_OW 72
67466: PUSH
67467: LD_EXP 86
67471: PUSH
67472: LD_VAR 0 2
67476: ARRAY
67477: UNION
67478: ST_TO_ADDR
// if not tmp then
67479: LD_VAR 0 4
67483: NOT
67484: IFFALSE 67488
// continue ;
67486: GO 67433
// for j in tmp do
67488: LD_ADDR_VAR 0 3
67492: PUSH
67493: LD_VAR 0 4
67497: PUSH
67498: FOR_IN
67499: IFFALSE 67651
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
67501: LD_VAR 0 3
67505: PPUSH
67506: CALL_OW 110
67510: NOT
67511: PUSH
67512: LD_VAR 0 3
67516: PPUSH
67517: CALL_OW 314
67521: NOT
67522: AND
67523: PUSH
67524: LD_VAR 0 3
67528: PPUSH
67529: CALL_OW 311
67533: NOT
67534: AND
67535: PUSH
67536: LD_VAR 0 3
67540: PPUSH
67541: CALL_OW 310
67545: NOT
67546: AND
67547: PUSH
67548: LD_VAR 0 3
67552: PUSH
67553: LD_EXP 60
67557: PUSH
67558: LD_VAR 0 2
67562: ARRAY
67563: PUSH
67564: LD_INT 1
67566: ARRAY
67567: IN
67568: NOT
67569: AND
67570: PUSH
67571: LD_VAR 0 3
67575: PUSH
67576: LD_EXP 60
67580: PUSH
67581: LD_VAR 0 2
67585: ARRAY
67586: PUSH
67587: LD_INT 2
67589: ARRAY
67590: IN
67591: NOT
67592: AND
67593: PUSH
67594: LD_VAR 0 3
67598: PUSH
67599: LD_EXP 69
67603: PUSH
67604: LD_VAR 0 2
67608: ARRAY
67609: IN
67610: NOT
67611: AND
67612: IFFALSE 67649
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
67614: LD_VAR 0 2
67618: PPUSH
67619: LD_EXP 57
67623: PUSH
67624: LD_VAR 0 2
67628: ARRAY
67629: PPUSH
67630: LD_VAR 0 3
67634: PPUSH
67635: LD_VAR 0 3
67639: PPUSH
67640: CALL_OW 257
67644: PPUSH
67645: CALL 66421 0 4
// end ;
67649: GO 67498
67651: POP
67652: POP
// end ;
67653: GO 67433
67655: POP
67656: POP
// end ;
67657: LD_VAR 0 1
67661: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
67662: LD_INT 0
67664: PPUSH
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
67669: PPUSH
// if not mc_bases [ base ] then
67670: LD_EXP 57
67674: PUSH
67675: LD_VAR 0 1
67679: ARRAY
67680: NOT
67681: IFFALSE 67685
// exit ;
67683: GO 67867
// tmp := [ ] ;
67685: LD_ADDR_VAR 0 6
67689: PUSH
67690: EMPTY
67691: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
67692: LD_ADDR_VAR 0 7
67696: PUSH
67697: LD_VAR 0 3
67701: PPUSH
67702: LD_INT 0
67704: PPUSH
67705: CALL_OW 517
67709: ST_TO_ADDR
// if not list then
67710: LD_VAR 0 7
67714: NOT
67715: IFFALSE 67719
// exit ;
67717: GO 67867
// for i = 1 to amount do
67719: LD_ADDR_VAR 0 5
67723: PUSH
67724: DOUBLE
67725: LD_INT 1
67727: DEC
67728: ST_TO_ADDR
67729: LD_VAR 0 2
67733: PUSH
67734: FOR_TO
67735: IFFALSE 67815
// begin x := rand ( 1 , list [ 1 ] ) ;
67737: LD_ADDR_VAR 0 8
67741: PUSH
67742: LD_INT 1
67744: PPUSH
67745: LD_VAR 0 7
67749: PUSH
67750: LD_INT 1
67752: ARRAY
67753: PPUSH
67754: CALL_OW 12
67758: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
67759: LD_ADDR_VAR 0 6
67763: PUSH
67764: LD_VAR 0 6
67768: PPUSH
67769: LD_VAR 0 5
67773: PPUSH
67774: LD_VAR 0 7
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PUSH
67783: LD_VAR 0 8
67787: ARRAY
67788: PUSH
67789: LD_VAR 0 7
67793: PUSH
67794: LD_INT 2
67796: ARRAY
67797: PUSH
67798: LD_VAR 0 8
67802: ARRAY
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PPUSH
67808: CALL_OW 1
67812: ST_TO_ADDR
// end ;
67813: GO 67734
67815: POP
67816: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
67817: LD_ADDR_EXP 70
67821: PUSH
67822: LD_EXP 70
67826: PPUSH
67827: LD_VAR 0 1
67831: PPUSH
67832: LD_VAR 0 6
67836: PPUSH
67837: CALL_OW 1
67841: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
67842: LD_ADDR_EXP 72
67846: PUSH
67847: LD_EXP 72
67851: PPUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: LD_VAR 0 3
67861: PPUSH
67862: CALL_OW 1
67866: ST_TO_ADDR
// end ;
67867: LD_VAR 0 4
67871: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
67872: LD_INT 0
67874: PPUSH
// if not mc_bases [ base ] then
67875: LD_EXP 57
67879: PUSH
67880: LD_VAR 0 1
67884: ARRAY
67885: NOT
67886: IFFALSE 67890
// exit ;
67888: GO 67915
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
67890: LD_ADDR_EXP 62
67894: PUSH
67895: LD_EXP 62
67899: PPUSH
67900: LD_VAR 0 1
67904: PPUSH
67905: LD_VAR 0 2
67909: PPUSH
67910: CALL_OW 1
67914: ST_TO_ADDR
// end ;
67915: LD_VAR 0 3
67919: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
67920: LD_INT 0
67922: PPUSH
// if not mc_bases [ base ] then
67923: LD_EXP 57
67927: PUSH
67928: LD_VAR 0 1
67932: ARRAY
67933: NOT
67934: IFFALSE 67938
// exit ;
67936: GO 67994
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
67938: LD_ADDR_EXP 62
67942: PUSH
67943: LD_EXP 62
67947: PPUSH
67948: LD_VAR 0 1
67952: PPUSH
67953: LD_EXP 62
67957: PUSH
67958: LD_VAR 0 1
67962: ARRAY
67963: PPUSH
67964: LD_EXP 62
67968: PUSH
67969: LD_VAR 0 1
67973: ARRAY
67974: PUSH
67975: LD_INT 1
67977: PLUS
67978: PPUSH
67979: LD_VAR 0 2
67983: PPUSH
67984: CALL_OW 2
67988: PPUSH
67989: CALL_OW 1
67993: ST_TO_ADDR
// end ;
67994: LD_VAR 0 3
67998: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
67999: LD_INT 0
68001: PPUSH
// if not mc_bases [ base ] then
68002: LD_EXP 57
68006: PUSH
68007: LD_VAR 0 1
68011: ARRAY
68012: NOT
68013: IFFALSE 68017
// exit ;
68015: GO 68042
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
68017: LD_ADDR_EXP 78
68021: PUSH
68022: LD_EXP 78
68026: PPUSH
68027: LD_VAR 0 1
68031: PPUSH
68032: LD_VAR 0 2
68036: PPUSH
68037: CALL_OW 1
68041: ST_TO_ADDR
// end ;
68042: LD_VAR 0 3
68046: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
68047: LD_INT 0
68049: PPUSH
// if not mc_bases [ base ] then
68050: LD_EXP 57
68054: PUSH
68055: LD_VAR 0 1
68059: ARRAY
68060: NOT
68061: IFFALSE 68065
// exit ;
68063: GO 68105
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
68065: LD_ADDR_EXP 78
68069: PUSH
68070: LD_EXP 78
68074: PPUSH
68075: LD_VAR 0 1
68079: PPUSH
68080: LD_EXP 78
68084: PUSH
68085: LD_VAR 0 1
68089: ARRAY
68090: PUSH
68091: LD_VAR 0 2
68095: PUSH
68096: EMPTY
68097: LIST
68098: ADD
68099: PPUSH
68100: CALL_OW 1
68104: ST_TO_ADDR
// end ;
68105: LD_VAR 0 3
68109: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
68110: LD_INT 0
68112: PPUSH
// if not mc_bases [ base ] then
68113: LD_EXP 57
68117: PUSH
68118: LD_VAR 0 1
68122: ARRAY
68123: NOT
68124: IFFALSE 68128
// exit ;
68126: GO 68240
// mc_defender := Replace ( mc_defender , base , deflist ) ;
68128: LD_ADDR_EXP 79
68132: PUSH
68133: LD_EXP 79
68137: PPUSH
68138: LD_VAR 0 1
68142: PPUSH
68143: LD_VAR 0 2
68147: PPUSH
68148: CALL_OW 1
68152: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
68153: LD_ADDR_EXP 68
68157: PUSH
68158: LD_EXP 68
68162: PPUSH
68163: LD_VAR 0 1
68167: PPUSH
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 0
68175: PLUS
68176: PPUSH
68177: CALL_OW 1
68181: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
68182: LD_ADDR_EXP 76
68186: PUSH
68187: LD_EXP 76
68191: PPUSH
68192: LD_VAR 0 1
68196: PPUSH
68197: LD_EXP 76
68201: PUSH
68202: LD_VAR 0 1
68206: ARRAY
68207: PUSH
68208: LD_EXP 79
68212: PUSH
68213: LD_VAR 0 1
68217: ARRAY
68218: PPUSH
68219: LD_INT 21
68221: PUSH
68222: LD_INT 2
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PPUSH
68229: CALL_OW 72
68233: UNION
68234: PPUSH
68235: CALL_OW 1
68239: ST_TO_ADDR
// end ;
68240: LD_VAR 0 3
68244: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
68245: LD_INT 0
68247: PPUSH
// if not mc_bases [ base ] then
68248: LD_EXP 57
68252: PUSH
68253: LD_VAR 0 1
68257: ARRAY
68258: NOT
68259: IFFALSE 68263
// exit ;
68261: GO 68288
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
68263: LD_ADDR_EXP 68
68267: PUSH
68268: LD_EXP 68
68272: PPUSH
68273: LD_VAR 0 1
68277: PPUSH
68278: LD_VAR 0 2
68282: PPUSH
68283: CALL_OW 1
68287: ST_TO_ADDR
// end ;
68288: LD_VAR 0 3
68292: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
68293: LD_INT 0
68295: PPUSH
68296: PPUSH
68297: PPUSH
68298: PPUSH
// if not mc_bases [ base ] then
68299: LD_EXP 57
68303: PUSH
68304: LD_VAR 0 1
68308: ARRAY
68309: NOT
68310: IFFALSE 68314
// exit ;
68312: GO 68379
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
68314: LD_ADDR_EXP 77
68318: PUSH
68319: LD_EXP 77
68323: PPUSH
68324: LD_VAR 0 1
68328: PUSH
68329: LD_EXP 77
68333: PUSH
68334: LD_VAR 0 1
68338: ARRAY
68339: PUSH
68340: LD_INT 1
68342: PLUS
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PPUSH
68348: LD_VAR 0 1
68352: PUSH
68353: LD_VAR 0 2
68357: PUSH
68358: LD_VAR 0 3
68362: PUSH
68363: LD_VAR 0 4
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: PPUSH
68374: CALL 20102 0 3
68378: ST_TO_ADDR
// end ;
68379: LD_VAR 0 5
68383: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
68384: LD_INT 0
68386: PPUSH
// if not mc_bases [ base ] then
68387: LD_EXP 57
68391: PUSH
68392: LD_VAR 0 1
68396: ARRAY
68397: NOT
68398: IFFALSE 68402
// exit ;
68400: GO 68427
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
68402: LD_ADDR_EXP 93
68406: PUSH
68407: LD_EXP 93
68411: PPUSH
68412: LD_VAR 0 1
68416: PPUSH
68417: LD_VAR 0 2
68421: PPUSH
68422: CALL_OW 1
68426: ST_TO_ADDR
// end ;
68427: LD_VAR 0 3
68431: RET
// export function MC_GetMinesField ( base ) ; begin
68432: LD_INT 0
68434: PPUSH
// result := mc_mines [ base ] ;
68435: LD_ADDR_VAR 0 2
68439: PUSH
68440: LD_EXP 70
68444: PUSH
68445: LD_VAR 0 1
68449: ARRAY
68450: ST_TO_ADDR
// end ;
68451: LD_VAR 0 2
68455: RET
// export function MC_GetProduceList ( base ) ; begin
68456: LD_INT 0
68458: PPUSH
// result := mc_produce [ base ] ;
68459: LD_ADDR_VAR 0 2
68463: PUSH
68464: LD_EXP 78
68468: PUSH
68469: LD_VAR 0 1
68473: ARRAY
68474: ST_TO_ADDR
// end ;
68475: LD_VAR 0 2
68479: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
68480: LD_INT 0
68482: PPUSH
68483: PPUSH
// if not mc_bases then
68484: LD_EXP 57
68488: NOT
68489: IFFALSE 68493
// exit ;
68491: GO 68558
// if mc_bases [ base ] then
68493: LD_EXP 57
68497: PUSH
68498: LD_VAR 0 1
68502: ARRAY
68503: IFFALSE 68558
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68505: LD_ADDR_VAR 0 3
68509: PUSH
68510: LD_EXP 57
68514: PUSH
68515: LD_VAR 0 1
68519: ARRAY
68520: PPUSH
68521: LD_INT 30
68523: PUSH
68524: LD_VAR 0 2
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PPUSH
68533: CALL_OW 72
68537: ST_TO_ADDR
// if result then
68538: LD_VAR 0 3
68542: IFFALSE 68558
// result := result [ 1 ] ;
68544: LD_ADDR_VAR 0 3
68548: PUSH
68549: LD_VAR 0 3
68553: PUSH
68554: LD_INT 1
68556: ARRAY
68557: ST_TO_ADDR
// end ; end ;
68558: LD_VAR 0 3
68562: RET
// export function MC_SetTame ( base , area ) ; begin
68563: LD_INT 0
68565: PPUSH
// if not mc_bases or not base then
68566: LD_EXP 57
68570: NOT
68571: PUSH
68572: LD_VAR 0 1
68576: NOT
68577: OR
68578: IFFALSE 68582
// exit ;
68580: GO 68607
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
68582: LD_ADDR_EXP 85
68586: PUSH
68587: LD_EXP 85
68591: PPUSH
68592: LD_VAR 0 1
68596: PPUSH
68597: LD_VAR 0 2
68601: PPUSH
68602: CALL_OW 1
68606: ST_TO_ADDR
// end ;
68607: LD_VAR 0 3
68611: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
68612: LD_INT 0
68614: PPUSH
68615: PPUSH
// if not mc_bases or not base then
68616: LD_EXP 57
68620: NOT
68621: PUSH
68622: LD_VAR 0 1
68626: NOT
68627: OR
68628: IFFALSE 68632
// exit ;
68630: GO 68734
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
68632: LD_ADDR_VAR 0 4
68636: PUSH
68637: LD_EXP 57
68641: PUSH
68642: LD_VAR 0 1
68646: ARRAY
68647: PPUSH
68648: LD_INT 30
68650: PUSH
68651: LD_VAR 0 2
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PPUSH
68660: CALL_OW 72
68664: ST_TO_ADDR
// if not tmp then
68665: LD_VAR 0 4
68669: NOT
68670: IFFALSE 68674
// exit ;
68672: GO 68734
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
68674: LD_ADDR_EXP 89
68678: PUSH
68679: LD_EXP 89
68683: PPUSH
68684: LD_VAR 0 1
68688: PPUSH
68689: LD_EXP 89
68693: PUSH
68694: LD_VAR 0 1
68698: ARRAY
68699: PPUSH
68700: LD_EXP 89
68704: PUSH
68705: LD_VAR 0 1
68709: ARRAY
68710: PUSH
68711: LD_INT 1
68713: PLUS
68714: PPUSH
68715: LD_VAR 0 4
68719: PUSH
68720: LD_INT 1
68722: ARRAY
68723: PPUSH
68724: CALL_OW 2
68728: PPUSH
68729: CALL_OW 1
68733: ST_TO_ADDR
// end ;
68734: LD_VAR 0 3
68738: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
68739: LD_INT 0
68741: PPUSH
68742: PPUSH
// if not mc_bases or not base or not kinds then
68743: LD_EXP 57
68747: NOT
68748: PUSH
68749: LD_VAR 0 1
68753: NOT
68754: OR
68755: PUSH
68756: LD_VAR 0 2
68760: NOT
68761: OR
68762: IFFALSE 68766
// exit ;
68764: GO 68827
// for i in kinds do
68766: LD_ADDR_VAR 0 4
68770: PUSH
68771: LD_VAR 0 2
68775: PUSH
68776: FOR_IN
68777: IFFALSE 68825
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
68779: LD_ADDR_EXP 91
68783: PUSH
68784: LD_EXP 91
68788: PPUSH
68789: LD_VAR 0 1
68793: PUSH
68794: LD_EXP 91
68798: PUSH
68799: LD_VAR 0 1
68803: ARRAY
68804: PUSH
68805: LD_INT 1
68807: PLUS
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PPUSH
68813: LD_VAR 0 4
68817: PPUSH
68818: CALL 20102 0 3
68822: ST_TO_ADDR
68823: GO 68776
68825: POP
68826: POP
// end ;
68827: LD_VAR 0 3
68831: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
68832: LD_INT 0
68834: PPUSH
// if not mc_bases or not base or not areas then
68835: LD_EXP 57
68839: NOT
68840: PUSH
68841: LD_VAR 0 1
68845: NOT
68846: OR
68847: PUSH
68848: LD_VAR 0 2
68852: NOT
68853: OR
68854: IFFALSE 68858
// exit ;
68856: GO 68883
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
68858: LD_ADDR_EXP 75
68862: PUSH
68863: LD_EXP 75
68867: PPUSH
68868: LD_VAR 0 1
68872: PPUSH
68873: LD_VAR 0 2
68877: PPUSH
68878: CALL_OW 1
68882: ST_TO_ADDR
// end ;
68883: LD_VAR 0 3
68887: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
68888: LD_INT 0
68890: PPUSH
// if not mc_bases or not base then
68891: LD_EXP 57
68895: NOT
68896: PUSH
68897: LD_VAR 0 1
68901: NOT
68902: OR
68903: IFFALSE 68907
// exit ;
68905: GO 68941
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
68907: LD_ADDR_EXP 92
68911: PUSH
68912: LD_EXP 92
68916: PPUSH
68917: LD_VAR 0 1
68921: PPUSH
68922: LD_VAR 0 2
68926: PUSH
68927: LD_VAR 0 3
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PPUSH
68936: CALL_OW 1
68940: ST_TO_ADDR
// end ;
68941: LD_VAR 0 4
68945: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
68946: LD_INT 0
68948: PPUSH
68949: PPUSH
68950: PPUSH
// if not mc_bases or not base or not ext_list then
68951: LD_EXP 57
68955: NOT
68956: PUSH
68957: LD_VAR 0 1
68961: NOT
68962: OR
68963: PUSH
68964: LD_VAR 0 5
68968: NOT
68969: OR
68970: IFFALSE 68974
// exit ;
68972: GO 69147
// tmp := GetFacExtXYD ( x , y , d ) ;
68974: LD_ADDR_VAR 0 8
68978: PUSH
68979: LD_VAR 0 2
68983: PPUSH
68984: LD_VAR 0 3
68988: PPUSH
68989: LD_VAR 0 4
68993: PPUSH
68994: CALL 51182 0 3
68998: ST_TO_ADDR
// if not tmp then
68999: LD_VAR 0 8
69003: NOT
69004: IFFALSE 69008
// exit ;
69006: GO 69147
// for i in tmp do
69008: LD_ADDR_VAR 0 7
69012: PUSH
69013: LD_VAR 0 8
69017: PUSH
69018: FOR_IN
69019: IFFALSE 69145
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
69021: LD_ADDR_EXP 62
69025: PUSH
69026: LD_EXP 62
69030: PPUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: LD_EXP 62
69040: PUSH
69041: LD_VAR 0 1
69045: ARRAY
69046: PPUSH
69047: LD_EXP 62
69051: PUSH
69052: LD_VAR 0 1
69056: ARRAY
69057: PUSH
69058: LD_INT 1
69060: PLUS
69061: PPUSH
69062: LD_VAR 0 5
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: PUSH
69071: LD_VAR 0 7
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_VAR 0 7
69084: PUSH
69085: LD_INT 2
69087: ARRAY
69088: PUSH
69089: LD_VAR 0 7
69093: PUSH
69094: LD_INT 3
69096: ARRAY
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: PPUSH
69104: CALL_OW 2
69108: PPUSH
69109: CALL_OW 1
69113: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
69114: LD_ADDR_VAR 0 5
69118: PUSH
69119: LD_VAR 0 5
69123: PPUSH
69124: LD_INT 1
69126: PPUSH
69127: CALL_OW 3
69131: ST_TO_ADDR
// if not ext_list then
69132: LD_VAR 0 5
69136: NOT
69137: IFFALSE 69143
// exit ;
69139: POP
69140: POP
69141: GO 69147
// end ;
69143: GO 69018
69145: POP
69146: POP
// end ;
69147: LD_VAR 0 6
69151: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
69152: LD_INT 0
69154: PPUSH
// if not mc_bases or not base or not weapon_list then
69155: LD_EXP 57
69159: NOT
69160: PUSH
69161: LD_VAR 0 1
69165: NOT
69166: OR
69167: PUSH
69168: LD_VAR 0 2
69172: NOT
69173: OR
69174: IFFALSE 69178
// exit ;
69176: GO 69203
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
69178: LD_ADDR_EXP 95
69182: PUSH
69183: LD_EXP 95
69187: PPUSH
69188: LD_VAR 0 1
69192: PPUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: CALL_OW 1
69202: ST_TO_ADDR
// end ;
69203: LD_VAR 0 3
69207: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
69208: LD_INT 0
69210: PPUSH
// if not mc_bases or not base or not tech_list then
69211: LD_EXP 57
69215: NOT
69216: PUSH
69217: LD_VAR 0 1
69221: NOT
69222: OR
69223: PUSH
69224: LD_VAR 0 2
69228: NOT
69229: OR
69230: IFFALSE 69234
// exit ;
69232: GO 69259
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
69234: LD_ADDR_EXP 84
69238: PUSH
69239: LD_EXP 84
69243: PPUSH
69244: LD_VAR 0 1
69248: PPUSH
69249: LD_VAR 0 2
69253: PPUSH
69254: CALL_OW 1
69258: ST_TO_ADDR
// end ;
69259: LD_VAR 0 3
69263: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
69264: LD_INT 0
69266: PPUSH
// if not mc_bases or not parking_area or not base then
69267: LD_EXP 57
69271: NOT
69272: PUSH
69273: LD_VAR 0 2
69277: NOT
69278: OR
69279: PUSH
69280: LD_VAR 0 1
69284: NOT
69285: OR
69286: IFFALSE 69290
// exit ;
69288: GO 69315
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
69290: LD_ADDR_EXP 81
69294: PUSH
69295: LD_EXP 81
69299: PPUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: LD_VAR 0 2
69309: PPUSH
69310: CALL_OW 1
69314: ST_TO_ADDR
// end ;
69315: LD_VAR 0 3
69319: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
69320: LD_INT 0
69322: PPUSH
// if not mc_bases or not base or not scan_area then
69323: LD_EXP 57
69327: NOT
69328: PUSH
69329: LD_VAR 0 1
69333: NOT
69334: OR
69335: PUSH
69336: LD_VAR 0 2
69340: NOT
69341: OR
69342: IFFALSE 69346
// exit ;
69344: GO 69371
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
69346: LD_ADDR_EXP 82
69350: PUSH
69351: LD_EXP 82
69355: PPUSH
69356: LD_VAR 0 1
69360: PPUSH
69361: LD_VAR 0 2
69365: PPUSH
69366: CALL_OW 1
69370: ST_TO_ADDR
// end ; end_of_file
69371: LD_VAR 0 3
69375: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
69376: LD_INT 0
69378: PPUSH
69379: PPUSH
69380: PPUSH
// if not mc_bases then
69381: LD_EXP 57
69385: NOT
69386: IFFALSE 69390
// exit ;
69388: GO 69555
// for i = 1 to mc_bases do
69390: LD_ADDR_VAR 0 4
69394: PUSH
69395: DOUBLE
69396: LD_INT 1
69398: DEC
69399: ST_TO_ADDR
69400: LD_EXP 57
69404: PUSH
69405: FOR_TO
69406: IFFALSE 69553
// begin if sci in mc_bases [ i ] then
69408: LD_VAR 0 2
69412: PUSH
69413: LD_EXP 57
69417: PUSH
69418: LD_VAR 0 4
69422: ARRAY
69423: IN
69424: IFFALSE 69551
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
69426: LD_ADDR_EXP 86
69430: PUSH
69431: LD_EXP 86
69435: PPUSH
69436: LD_VAR 0 4
69440: PUSH
69441: LD_EXP 86
69445: PUSH
69446: LD_VAR 0 4
69450: ARRAY
69451: PUSH
69452: LD_INT 1
69454: PLUS
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PPUSH
69460: LD_VAR 0 1
69464: PPUSH
69465: CALL 20102 0 3
69469: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
69470: LD_ADDR_VAR 0 5
69474: PUSH
69475: LD_EXP 57
69479: PUSH
69480: LD_VAR 0 4
69484: ARRAY
69485: PPUSH
69486: LD_INT 2
69488: PUSH
69489: LD_INT 30
69491: PUSH
69492: LD_INT 0
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 30
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: LIST
69513: PPUSH
69514: CALL_OW 72
69518: PPUSH
69519: LD_VAR 0 1
69523: PPUSH
69524: CALL_OW 74
69528: ST_TO_ADDR
// if tmp then
69529: LD_VAR 0 5
69533: IFFALSE 69549
// ComStandNearbyBuilding ( ape , tmp ) ;
69535: LD_VAR 0 1
69539: PPUSH
69540: LD_VAR 0 5
69544: PPUSH
69545: CALL 14881 0 2
// break ;
69549: GO 69553
// end ; end ;
69551: GO 69405
69553: POP
69554: POP
// end ;
69555: LD_VAR 0 3
69559: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
69560: LD_INT 0
69562: PPUSH
69563: PPUSH
69564: PPUSH
// if not mc_bases then
69565: LD_EXP 57
69569: NOT
69570: IFFALSE 69574
// exit ;
69572: GO 69663
// for i = 1 to mc_bases do
69574: LD_ADDR_VAR 0 4
69578: PUSH
69579: DOUBLE
69580: LD_INT 1
69582: DEC
69583: ST_TO_ADDR
69584: LD_EXP 57
69588: PUSH
69589: FOR_TO
69590: IFFALSE 69661
// begin if building in mc_busy_turret_list [ i ] then
69592: LD_VAR 0 1
69596: PUSH
69597: LD_EXP 67
69601: PUSH
69602: LD_VAR 0 4
69606: ARRAY
69607: IN
69608: IFFALSE 69659
// begin tmp := mc_busy_turret_list [ i ] diff building ;
69610: LD_ADDR_VAR 0 5
69614: PUSH
69615: LD_EXP 67
69619: PUSH
69620: LD_VAR 0 4
69624: ARRAY
69625: PUSH
69626: LD_VAR 0 1
69630: DIFF
69631: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
69632: LD_ADDR_EXP 67
69636: PUSH
69637: LD_EXP 67
69641: PPUSH
69642: LD_VAR 0 4
69646: PPUSH
69647: LD_VAR 0 5
69651: PPUSH
69652: CALL_OW 1
69656: ST_TO_ADDR
// break ;
69657: GO 69661
// end ; end ;
69659: GO 69589
69661: POP
69662: POP
// end ;
69663: LD_VAR 0 3
69667: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
69668: LD_INT 0
69670: PPUSH
69671: PPUSH
69672: PPUSH
// if not mc_bases then
69673: LD_EXP 57
69677: NOT
69678: IFFALSE 69682
// exit ;
69680: GO 69881
// for i = 1 to mc_bases do
69682: LD_ADDR_VAR 0 5
69686: PUSH
69687: DOUBLE
69688: LD_INT 1
69690: DEC
69691: ST_TO_ADDR
69692: LD_EXP 57
69696: PUSH
69697: FOR_TO
69698: IFFALSE 69879
// if building in mc_bases [ i ] then
69700: LD_VAR 0 1
69704: PUSH
69705: LD_EXP 57
69709: PUSH
69710: LD_VAR 0 5
69714: ARRAY
69715: IN
69716: IFFALSE 69877
// begin tmp := mc_bases [ i ] diff building ;
69718: LD_ADDR_VAR 0 6
69722: PUSH
69723: LD_EXP 57
69727: PUSH
69728: LD_VAR 0 5
69732: ARRAY
69733: PUSH
69734: LD_VAR 0 1
69738: DIFF
69739: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
69740: LD_ADDR_EXP 57
69744: PUSH
69745: LD_EXP 57
69749: PPUSH
69750: LD_VAR 0 5
69754: PPUSH
69755: LD_VAR 0 6
69759: PPUSH
69760: CALL_OW 1
69764: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
69765: LD_VAR 0 1
69769: PUSH
69770: LD_EXP 65
69774: PUSH
69775: LD_VAR 0 5
69779: ARRAY
69780: IN
69781: IFFALSE 69820
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
69783: LD_ADDR_EXP 65
69787: PUSH
69788: LD_EXP 65
69792: PPUSH
69793: LD_VAR 0 5
69797: PPUSH
69798: LD_EXP 65
69802: PUSH
69803: LD_VAR 0 5
69807: ARRAY
69808: PUSH
69809: LD_VAR 0 1
69813: DIFF
69814: PPUSH
69815: CALL_OW 1
69819: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
69820: LD_VAR 0 1
69824: PUSH
69825: LD_EXP 66
69829: PUSH
69830: LD_VAR 0 5
69834: ARRAY
69835: IN
69836: IFFALSE 69875
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
69838: LD_ADDR_EXP 66
69842: PUSH
69843: LD_EXP 66
69847: PPUSH
69848: LD_VAR 0 5
69852: PPUSH
69853: LD_EXP 66
69857: PUSH
69858: LD_VAR 0 5
69862: ARRAY
69863: PUSH
69864: LD_VAR 0 1
69868: DIFF
69869: PPUSH
69870: CALL_OW 1
69874: ST_TO_ADDR
// break ;
69875: GO 69879
// end ;
69877: GO 69697
69879: POP
69880: POP
// end ;
69881: LD_VAR 0 4
69885: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
69886: LD_INT 0
69888: PPUSH
69889: PPUSH
69890: PPUSH
// if not mc_bases or not side in mc_sides then
69891: LD_EXP 57
69895: NOT
69896: PUSH
69897: LD_VAR 0 3
69901: PUSH
69902: LD_EXP 83
69906: IN
69907: NOT
69908: OR
69909: IFFALSE 69913
// exit ;
69911: GO 70036
// for i = 1 to mc_vehicles do
69913: LD_ADDR_VAR 0 6
69917: PUSH
69918: DOUBLE
69919: LD_INT 1
69921: DEC
69922: ST_TO_ADDR
69923: LD_EXP 76
69927: PUSH
69928: FOR_TO
69929: IFFALSE 70034
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
69931: LD_VAR 0 2
69935: PUSH
69936: LD_EXP 76
69940: PUSH
69941: LD_VAR 0 6
69945: ARRAY
69946: IN
69947: PUSH
69948: LD_VAR 0 1
69952: PUSH
69953: LD_EXP 76
69957: PUSH
69958: LD_VAR 0 6
69962: ARRAY
69963: IN
69964: OR
69965: IFFALSE 70032
// begin tmp := mc_vehicles [ i ] diff old ;
69967: LD_ADDR_VAR 0 7
69971: PUSH
69972: LD_EXP 76
69976: PUSH
69977: LD_VAR 0 6
69981: ARRAY
69982: PUSH
69983: LD_VAR 0 2
69987: DIFF
69988: ST_TO_ADDR
// tmp := tmp diff new ;
69989: LD_ADDR_VAR 0 7
69993: PUSH
69994: LD_VAR 0 7
69998: PUSH
69999: LD_VAR 0 1
70003: DIFF
70004: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
70005: LD_ADDR_EXP 76
70009: PUSH
70010: LD_EXP 76
70014: PPUSH
70015: LD_VAR 0 6
70019: PPUSH
70020: LD_VAR 0 7
70024: PPUSH
70025: CALL_OW 1
70029: ST_TO_ADDR
// break ;
70030: GO 70034
// end ;
70032: GO 69928
70034: POP
70035: POP
// end ;
70036: LD_VAR 0 5
70040: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
70045: PPUSH
70046: PPUSH
// if not mc_bases then
70047: LD_EXP 57
70051: NOT
70052: IFFALSE 70056
// exit ;
70054: GO 70348
// side := GetSide ( vehicle ) ;
70056: LD_ADDR_VAR 0 5
70060: PUSH
70061: LD_VAR 0 1
70065: PPUSH
70066: CALL_OW 255
70070: ST_TO_ADDR
// for i = 1 to mc_bases do
70071: LD_ADDR_VAR 0 4
70075: PUSH
70076: DOUBLE
70077: LD_INT 1
70079: DEC
70080: ST_TO_ADDR
70081: LD_EXP 57
70085: PUSH
70086: FOR_TO
70087: IFFALSE 70346
// begin if factory in mc_bases [ i ] then
70089: LD_VAR 0 2
70093: PUSH
70094: LD_EXP 57
70098: PUSH
70099: LD_VAR 0 4
70103: ARRAY
70104: IN
70105: IFFALSE 70344
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
70107: LD_EXP 79
70111: PUSH
70112: LD_VAR 0 4
70116: ARRAY
70117: PUSH
70118: LD_EXP 68
70122: PUSH
70123: LD_VAR 0 4
70127: ARRAY
70128: LESS
70129: IFFALSE 70300
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
70131: LD_ADDR_EXP 79
70135: PUSH
70136: LD_EXP 79
70140: PPUSH
70141: LD_VAR 0 4
70145: PPUSH
70146: LD_EXP 79
70150: PUSH
70151: LD_VAR 0 4
70155: ARRAY
70156: PUSH
70157: LD_VAR 0 1
70161: ADD
70162: PPUSH
70163: CALL_OW 1
70167: ST_TO_ADDR
// if not mc_scan [ i ] then
70168: LD_EXP 80
70172: PUSH
70173: LD_VAR 0 4
70177: ARRAY
70178: NOT
70179: IFFALSE 70298
// begin if GetControl ( vehicle ) = control_remote then
70181: LD_VAR 0 1
70185: PPUSH
70186: CALL_OW 263
70190: PUSH
70191: LD_INT 2
70193: EQUAL
70194: IFFALSE 70214
// repeat wait ( 0 0$1 ) ;
70196: LD_INT 35
70198: PPUSH
70199: CALL_OW 67
// until IsControledBy ( vehicle ) ;
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL_OW 312
70212: IFFALSE 70196
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
70214: LD_VAR 0 1
70218: PPUSH
70219: LD_EXP 81
70223: PUSH
70224: LD_VAR 0 4
70228: ARRAY
70229: PPUSH
70230: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
70234: LD_VAR 0 1
70238: PPUSH
70239: CALL_OW 263
70243: PUSH
70244: LD_INT 1
70246: NONEQUAL
70247: IFFALSE 70251
// break ;
70249: GO 70346
// repeat wait ( 0 0$1 ) ;
70251: LD_INT 35
70253: PPUSH
70254: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
70258: LD_VAR 0 1
70262: PPUSH
70263: LD_EXP 81
70267: PUSH
70268: LD_VAR 0 4
70272: ARRAY
70273: PPUSH
70274: CALL_OW 308
70278: IFFALSE 70251
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
70280: LD_VAR 0 1
70284: PPUSH
70285: CALL_OW 311
70289: PPUSH
70290: CALL_OW 121
// exit ;
70294: POP
70295: POP
70296: GO 70348
// end ; end else
70298: GO 70344
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
70300: LD_ADDR_EXP 76
70304: PUSH
70305: LD_EXP 76
70309: PPUSH
70310: LD_VAR 0 4
70314: PUSH
70315: LD_EXP 76
70319: PUSH
70320: LD_VAR 0 4
70324: ARRAY
70325: PUSH
70326: LD_INT 1
70328: PLUS
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PPUSH
70334: LD_VAR 0 1
70338: PPUSH
70339: CALL 20102 0 3
70343: ST_TO_ADDR
// end ; end ;
70344: GO 70086
70346: POP
70347: POP
// end ;
70348: LD_VAR 0 3
70352: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
70353: LD_INT 0
70355: PPUSH
70356: PPUSH
70357: PPUSH
70358: PPUSH
// if not mc_bases then
70359: LD_EXP 57
70363: NOT
70364: IFFALSE 70368
// exit ;
70366: GO 70721
// repeat wait ( 0 0$1 ) ;
70368: LD_INT 35
70370: PPUSH
70371: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
70375: LD_VAR 0 2
70379: PPUSH
70380: LD_VAR 0 3
70384: PPUSH
70385: CALL_OW 284
70389: IFFALSE 70368
// if GetResourceTypeXY ( x , y ) = mat_artefact then
70391: LD_VAR 0 2
70395: PPUSH
70396: LD_VAR 0 3
70400: PPUSH
70401: CALL_OW 283
70405: PUSH
70406: LD_INT 4
70408: EQUAL
70409: IFFALSE 70413
// exit ;
70411: GO 70721
// for i = 1 to mc_bases do
70413: LD_ADDR_VAR 0 7
70417: PUSH
70418: DOUBLE
70419: LD_INT 1
70421: DEC
70422: ST_TO_ADDR
70423: LD_EXP 57
70427: PUSH
70428: FOR_TO
70429: IFFALSE 70719
// begin if mc_crates_area [ i ] then
70431: LD_EXP 75
70435: PUSH
70436: LD_VAR 0 7
70440: ARRAY
70441: IFFALSE 70552
// for j in mc_crates_area [ i ] do
70443: LD_ADDR_VAR 0 8
70447: PUSH
70448: LD_EXP 75
70452: PUSH
70453: LD_VAR 0 7
70457: ARRAY
70458: PUSH
70459: FOR_IN
70460: IFFALSE 70550
// if InArea ( x , y , j ) then
70462: LD_VAR 0 2
70466: PPUSH
70467: LD_VAR 0 3
70471: PPUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: CALL_OW 309
70481: IFFALSE 70548
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70483: LD_ADDR_EXP 73
70487: PUSH
70488: LD_EXP 73
70492: PPUSH
70493: LD_VAR 0 7
70497: PUSH
70498: LD_EXP 73
70502: PUSH
70503: LD_VAR 0 7
70507: ARRAY
70508: PUSH
70509: LD_INT 1
70511: PLUS
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PPUSH
70517: LD_VAR 0 4
70521: PUSH
70522: LD_VAR 0 2
70526: PUSH
70527: LD_VAR 0 3
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: PPUSH
70537: CALL 20102 0 3
70541: ST_TO_ADDR
// exit ;
70542: POP
70543: POP
70544: POP
70545: POP
70546: GO 70721
// end ;
70548: GO 70459
70550: POP
70551: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70552: LD_ADDR_VAR 0 9
70556: PUSH
70557: LD_EXP 57
70561: PUSH
70562: LD_VAR 0 7
70566: ARRAY
70567: PPUSH
70568: LD_INT 2
70570: PUSH
70571: LD_INT 30
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 30
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: LIST
70595: PPUSH
70596: CALL_OW 72
70600: ST_TO_ADDR
// if not depot then
70601: LD_VAR 0 9
70605: NOT
70606: IFFALSE 70610
// continue ;
70608: GO 70428
// for j in depot do
70610: LD_ADDR_VAR 0 8
70614: PUSH
70615: LD_VAR 0 9
70619: PUSH
70620: FOR_IN
70621: IFFALSE 70715
// if GetDistUnitXY ( j , x , y ) < 30 then
70623: LD_VAR 0 8
70627: PPUSH
70628: LD_VAR 0 2
70632: PPUSH
70633: LD_VAR 0 3
70637: PPUSH
70638: CALL_OW 297
70642: PUSH
70643: LD_INT 30
70645: LESS
70646: IFFALSE 70713
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
70648: LD_ADDR_EXP 73
70652: PUSH
70653: LD_EXP 73
70657: PPUSH
70658: LD_VAR 0 7
70662: PUSH
70663: LD_EXP 73
70667: PUSH
70668: LD_VAR 0 7
70672: ARRAY
70673: PUSH
70674: LD_INT 1
70676: PLUS
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PPUSH
70682: LD_VAR 0 4
70686: PUSH
70687: LD_VAR 0 2
70691: PUSH
70692: LD_VAR 0 3
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: LIST
70701: PPUSH
70702: CALL 20102 0 3
70706: ST_TO_ADDR
// exit ;
70707: POP
70708: POP
70709: POP
70710: POP
70711: GO 70721
// end ;
70713: GO 70620
70715: POP
70716: POP
// end ;
70717: GO 70428
70719: POP
70720: POP
// end ;
70721: LD_VAR 0 6
70725: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
70726: LD_INT 0
70728: PPUSH
70729: PPUSH
70730: PPUSH
70731: PPUSH
// side := GetSide ( lab ) ;
70732: LD_ADDR_VAR 0 4
70736: PUSH
70737: LD_VAR 0 2
70741: PPUSH
70742: CALL_OW 255
70746: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
70747: LD_VAR 0 4
70751: PUSH
70752: LD_EXP 83
70756: IN
70757: NOT
70758: PUSH
70759: LD_EXP 84
70763: NOT
70764: OR
70765: PUSH
70766: LD_EXP 57
70770: NOT
70771: OR
70772: IFFALSE 70776
// exit ;
70774: GO 71009
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
70776: LD_ADDR_EXP 84
70780: PUSH
70781: LD_EXP 84
70785: PPUSH
70786: LD_VAR 0 4
70790: PPUSH
70791: LD_EXP 84
70795: PUSH
70796: LD_VAR 0 4
70800: ARRAY
70801: PUSH
70802: LD_VAR 0 1
70806: DIFF
70807: PPUSH
70808: CALL_OW 1
70812: ST_TO_ADDR
// for i = 1 to mc_bases do
70813: LD_ADDR_VAR 0 5
70817: PUSH
70818: DOUBLE
70819: LD_INT 1
70821: DEC
70822: ST_TO_ADDR
70823: LD_EXP 57
70827: PUSH
70828: FOR_TO
70829: IFFALSE 71007
// begin if lab in mc_bases [ i ] then
70831: LD_VAR 0 2
70835: PUSH
70836: LD_EXP 57
70840: PUSH
70841: LD_VAR 0 5
70845: ARRAY
70846: IN
70847: IFFALSE 71005
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
70849: LD_VAR 0 1
70853: PUSH
70854: LD_INT 11
70856: PUSH
70857: LD_INT 4
70859: PUSH
70860: LD_INT 3
70862: PUSH
70863: LD_INT 2
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: IN
70872: PUSH
70873: LD_EXP 87
70877: PUSH
70878: LD_VAR 0 5
70882: ARRAY
70883: AND
70884: IFFALSE 71005
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
70886: LD_ADDR_VAR 0 6
70890: PUSH
70891: LD_EXP 87
70895: PUSH
70896: LD_VAR 0 5
70900: ARRAY
70901: PUSH
70902: LD_INT 1
70904: ARRAY
70905: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
70906: LD_ADDR_EXP 87
70910: PUSH
70911: LD_EXP 87
70915: PPUSH
70916: LD_VAR 0 5
70920: PPUSH
70921: EMPTY
70922: PPUSH
70923: CALL_OW 1
70927: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
70928: LD_VAR 0 6
70932: PPUSH
70933: LD_INT 0
70935: PPUSH
70936: CALL_OW 109
// ComExitBuilding ( tmp ) ;
70940: LD_VAR 0 6
70944: PPUSH
70945: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
70949: LD_ADDR_EXP 86
70953: PUSH
70954: LD_EXP 86
70958: PPUSH
70959: LD_VAR 0 5
70963: PPUSH
70964: LD_EXP 86
70968: PUSH
70969: LD_VAR 0 5
70973: ARRAY
70974: PPUSH
70975: LD_INT 1
70977: PPUSH
70978: LD_VAR 0 6
70982: PPUSH
70983: CALL_OW 2
70987: PPUSH
70988: CALL_OW 1
70992: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
70993: LD_VAR 0 5
70997: PPUSH
70998: LD_INT 112
71000: PPUSH
71001: CALL 54970 0 2
// end ; end ; end ;
71005: GO 70828
71007: POP
71008: POP
// end ;
71009: LD_VAR 0 3
71013: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
71014: LD_INT 0
71016: PPUSH
71017: PPUSH
71018: PPUSH
71019: PPUSH
71020: PPUSH
71021: PPUSH
71022: PPUSH
71023: PPUSH
// if not mc_bases then
71024: LD_EXP 57
71028: NOT
71029: IFFALSE 71033
// exit ;
71031: GO 71958
// for i = 1 to mc_bases do
71033: LD_ADDR_VAR 0 3
71037: PUSH
71038: DOUBLE
71039: LD_INT 1
71041: DEC
71042: ST_TO_ADDR
71043: LD_EXP 57
71047: PUSH
71048: FOR_TO
71049: IFFALSE 71956
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
71051: LD_VAR 0 1
71055: PUSH
71056: LD_EXP 57
71060: PUSH
71061: LD_VAR 0 3
71065: ARRAY
71066: IN
71067: PUSH
71068: LD_VAR 0 1
71072: PUSH
71073: LD_EXP 64
71077: PUSH
71078: LD_VAR 0 3
71082: ARRAY
71083: IN
71084: OR
71085: PUSH
71086: LD_VAR 0 1
71090: PUSH
71091: LD_EXP 76
71095: PUSH
71096: LD_VAR 0 3
71100: ARRAY
71101: IN
71102: OR
71103: PUSH
71104: LD_VAR 0 1
71108: PUSH
71109: LD_EXP 86
71113: PUSH
71114: LD_VAR 0 3
71118: ARRAY
71119: IN
71120: OR
71121: PUSH
71122: LD_VAR 0 1
71126: PUSH
71127: LD_EXP 87
71131: PUSH
71132: LD_VAR 0 3
71136: ARRAY
71137: IN
71138: OR
71139: IFFALSE 71954
// begin if un in mc_ape [ i ] then
71141: LD_VAR 0 1
71145: PUSH
71146: LD_EXP 86
71150: PUSH
71151: LD_VAR 0 3
71155: ARRAY
71156: IN
71157: IFFALSE 71196
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
71159: LD_ADDR_EXP 86
71163: PUSH
71164: LD_EXP 86
71168: PPUSH
71169: LD_VAR 0 3
71173: PPUSH
71174: LD_EXP 86
71178: PUSH
71179: LD_VAR 0 3
71183: ARRAY
71184: PUSH
71185: LD_VAR 0 1
71189: DIFF
71190: PPUSH
71191: CALL_OW 1
71195: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
71196: LD_VAR 0 1
71200: PUSH
71201: LD_EXP 87
71205: PUSH
71206: LD_VAR 0 3
71210: ARRAY
71211: IN
71212: IFFALSE 71236
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
71214: LD_ADDR_EXP 87
71218: PUSH
71219: LD_EXP 87
71223: PPUSH
71224: LD_VAR 0 3
71228: PPUSH
71229: EMPTY
71230: PPUSH
71231: CALL_OW 1
71235: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
71236: LD_VAR 0 1
71240: PPUSH
71241: CALL_OW 247
71245: PUSH
71246: LD_INT 2
71248: EQUAL
71249: PUSH
71250: LD_VAR 0 1
71254: PPUSH
71255: CALL_OW 110
71259: PUSH
71260: LD_INT 20
71262: EQUAL
71263: AND
71264: IFFALSE 71367
// begin fac := MC_GetBuilding ( i , b_factory ) ;
71266: LD_ADDR_VAR 0 8
71270: PUSH
71271: LD_VAR 0 3
71275: PPUSH
71276: LD_INT 3
71278: PPUSH
71279: CALL 68480 0 2
71283: ST_TO_ADDR
// if fac then
71284: LD_VAR 0 8
71288: IFFALSE 71367
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
71290: LD_ADDR_VAR 0 9
71294: PUSH
71295: LD_VAR 0 8
71299: PPUSH
71300: LD_VAR 0 1
71304: PPUSH
71305: CALL_OW 265
71309: PPUSH
71310: LD_VAR 0 1
71314: PPUSH
71315: CALL_OW 262
71319: PPUSH
71320: LD_VAR 0 1
71324: PPUSH
71325: CALL_OW 263
71329: PPUSH
71330: LD_VAR 0 1
71334: PPUSH
71335: CALL_OW 264
71339: PPUSH
71340: CALL 17267 0 5
71344: ST_TO_ADDR
// if components then
71345: LD_VAR 0 9
71349: IFFALSE 71365
// MC_InsertProduceList ( i , components ) ;
71351: LD_VAR 0 3
71355: PPUSH
71356: LD_VAR 0 9
71360: PPUSH
71361: CALL 68047 0 2
// break ;
71365: GO 71956
// end ; end ; if GetType ( un ) = unit_building then
71367: LD_VAR 0 1
71371: PPUSH
71372: CALL_OW 247
71376: PUSH
71377: LD_INT 3
71379: EQUAL
71380: IFFALSE 71677
// begin btype := GetBType ( un ) ;
71382: LD_ADDR_VAR 0 5
71386: PUSH
71387: LD_VAR 0 1
71391: PPUSH
71392: CALL_OW 266
71396: ST_TO_ADDR
// if btype = b_warehouse then
71397: LD_VAR 0 5
71401: PUSH
71402: LD_INT 1
71404: EQUAL
71405: IFFALSE 71423
// begin btype := b_depot ;
71407: LD_ADDR_VAR 0 5
71411: PUSH
71412: LD_INT 0
71414: ST_TO_ADDR
// pos := 1 ;
71415: LD_ADDR_VAR 0 6
71419: PUSH
71420: LD_INT 1
71422: ST_TO_ADDR
// end ; if btype = b_factory then
71423: LD_VAR 0 5
71427: PUSH
71428: LD_INT 3
71430: EQUAL
71431: IFFALSE 71449
// begin btype := b_workshop ;
71433: LD_ADDR_VAR 0 5
71437: PUSH
71438: LD_INT 2
71440: ST_TO_ADDR
// pos := 1 ;
71441: LD_ADDR_VAR 0 6
71445: PUSH
71446: LD_INT 1
71448: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
71449: LD_VAR 0 5
71453: PUSH
71454: LD_INT 7
71456: PUSH
71457: LD_INT 8
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: IN
71464: IFFALSE 71474
// btype := b_lab ;
71466: LD_ADDR_VAR 0 5
71470: PUSH
71471: LD_INT 6
71473: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
71474: LD_ADDR_EXP 62
71478: PUSH
71479: LD_EXP 62
71483: PPUSH
71484: LD_VAR 0 3
71488: PUSH
71489: LD_EXP 62
71493: PUSH
71494: LD_VAR 0 3
71498: ARRAY
71499: PUSH
71500: LD_INT 1
71502: PLUS
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PPUSH
71508: LD_VAR 0 5
71512: PUSH
71513: LD_VAR 0 1
71517: PPUSH
71518: CALL_OW 250
71522: PUSH
71523: LD_VAR 0 1
71527: PPUSH
71528: CALL_OW 251
71532: PUSH
71533: LD_VAR 0 1
71537: PPUSH
71538: CALL_OW 254
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: PPUSH
71549: CALL 20102 0 3
71553: ST_TO_ADDR
// if pos = 1 then
71554: LD_VAR 0 6
71558: PUSH
71559: LD_INT 1
71561: EQUAL
71562: IFFALSE 71677
// begin tmp := mc_build_list [ i ] ;
71564: LD_ADDR_VAR 0 7
71568: PUSH
71569: LD_EXP 62
71573: PUSH
71574: LD_VAR 0 3
71578: ARRAY
71579: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
71580: LD_VAR 0 7
71584: PPUSH
71585: LD_INT 2
71587: PUSH
71588: LD_INT 30
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 30
71600: PUSH
71601: LD_INT 1
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: LIST
71612: PPUSH
71613: CALL_OW 72
71617: IFFALSE 71627
// pos := 2 ;
71619: LD_ADDR_VAR 0 6
71623: PUSH
71624: LD_INT 2
71626: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
71627: LD_ADDR_VAR 0 7
71631: PUSH
71632: LD_VAR 0 7
71636: PPUSH
71637: LD_VAR 0 6
71641: PPUSH
71642: LD_VAR 0 7
71646: PPUSH
71647: CALL 19993 0 3
71651: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
71652: LD_ADDR_EXP 62
71656: PUSH
71657: LD_EXP 62
71661: PPUSH
71662: LD_VAR 0 3
71666: PPUSH
71667: LD_VAR 0 7
71671: PPUSH
71672: CALL_OW 1
71676: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
71677: LD_VAR 0 1
71681: PUSH
71682: LD_EXP 57
71686: PUSH
71687: LD_VAR 0 3
71691: ARRAY
71692: IN
71693: IFFALSE 71732
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
71695: LD_ADDR_EXP 57
71699: PUSH
71700: LD_EXP 57
71704: PPUSH
71705: LD_VAR 0 3
71709: PPUSH
71710: LD_EXP 57
71714: PUSH
71715: LD_VAR 0 3
71719: ARRAY
71720: PUSH
71721: LD_VAR 0 1
71725: DIFF
71726: PPUSH
71727: CALL_OW 1
71731: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
71732: LD_VAR 0 1
71736: PUSH
71737: LD_EXP 64
71741: PUSH
71742: LD_VAR 0 3
71746: ARRAY
71747: IN
71748: IFFALSE 71787
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
71750: LD_ADDR_EXP 64
71754: PUSH
71755: LD_EXP 64
71759: PPUSH
71760: LD_VAR 0 3
71764: PPUSH
71765: LD_EXP 64
71769: PUSH
71770: LD_VAR 0 3
71774: ARRAY
71775: PUSH
71776: LD_VAR 0 1
71780: DIFF
71781: PPUSH
71782: CALL_OW 1
71786: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
71787: LD_VAR 0 1
71791: PUSH
71792: LD_EXP 76
71796: PUSH
71797: LD_VAR 0 3
71801: ARRAY
71802: IN
71803: IFFALSE 71842
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
71805: LD_ADDR_EXP 76
71809: PUSH
71810: LD_EXP 76
71814: PPUSH
71815: LD_VAR 0 3
71819: PPUSH
71820: LD_EXP 76
71824: PUSH
71825: LD_VAR 0 3
71829: ARRAY
71830: PUSH
71831: LD_VAR 0 1
71835: DIFF
71836: PPUSH
71837: CALL_OW 1
71841: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
71842: LD_VAR 0 1
71846: PUSH
71847: LD_EXP 66
71851: PUSH
71852: LD_VAR 0 3
71856: ARRAY
71857: IN
71858: IFFALSE 71897
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
71860: LD_ADDR_EXP 66
71864: PUSH
71865: LD_EXP 66
71869: PPUSH
71870: LD_VAR 0 3
71874: PPUSH
71875: LD_EXP 66
71879: PUSH
71880: LD_VAR 0 3
71884: ARRAY
71885: PUSH
71886: LD_VAR 0 1
71890: DIFF
71891: PPUSH
71892: CALL_OW 1
71896: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
71897: LD_VAR 0 1
71901: PUSH
71902: LD_EXP 65
71906: PUSH
71907: LD_VAR 0 3
71911: ARRAY
71912: IN
71913: IFFALSE 71952
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
71915: LD_ADDR_EXP 65
71919: PUSH
71920: LD_EXP 65
71924: PPUSH
71925: LD_VAR 0 3
71929: PPUSH
71930: LD_EXP 65
71934: PUSH
71935: LD_VAR 0 3
71939: ARRAY
71940: PUSH
71941: LD_VAR 0 1
71945: DIFF
71946: PPUSH
71947: CALL_OW 1
71951: ST_TO_ADDR
// end ; break ;
71952: GO 71956
// end ;
71954: GO 71048
71956: POP
71957: POP
// end ;
71958: LD_VAR 0 2
71962: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
71963: LD_INT 0
71965: PPUSH
71966: PPUSH
71967: PPUSH
// if not mc_bases then
71968: LD_EXP 57
71972: NOT
71973: IFFALSE 71977
// exit ;
71975: GO 72192
// for i = 1 to mc_bases do
71977: LD_ADDR_VAR 0 3
71981: PUSH
71982: DOUBLE
71983: LD_INT 1
71985: DEC
71986: ST_TO_ADDR
71987: LD_EXP 57
71991: PUSH
71992: FOR_TO
71993: IFFALSE 72190
// begin if building in mc_construct_list [ i ] then
71995: LD_VAR 0 1
71999: PUSH
72000: LD_EXP 64
72004: PUSH
72005: LD_VAR 0 3
72009: ARRAY
72010: IN
72011: IFFALSE 72188
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72013: LD_ADDR_EXP 64
72017: PUSH
72018: LD_EXP 64
72022: PPUSH
72023: LD_VAR 0 3
72027: PPUSH
72028: LD_EXP 64
72032: PUSH
72033: LD_VAR 0 3
72037: ARRAY
72038: PUSH
72039: LD_VAR 0 1
72043: DIFF
72044: PPUSH
72045: CALL_OW 1
72049: ST_TO_ADDR
// if building in mc_lab [ i ] then
72050: LD_VAR 0 1
72054: PUSH
72055: LD_EXP 90
72059: PUSH
72060: LD_VAR 0 3
72064: ARRAY
72065: IN
72066: IFFALSE 72121
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
72068: LD_ADDR_EXP 91
72072: PUSH
72073: LD_EXP 91
72077: PPUSH
72078: LD_VAR 0 3
72082: PPUSH
72083: LD_EXP 91
72087: PUSH
72088: LD_VAR 0 3
72092: ARRAY
72093: PPUSH
72094: LD_INT 1
72096: PPUSH
72097: LD_EXP 91
72101: PUSH
72102: LD_VAR 0 3
72106: ARRAY
72107: PPUSH
72108: LD_INT 0
72110: PPUSH
72111: CALL 19085 0 4
72115: PPUSH
72116: CALL_OW 1
72120: ST_TO_ADDR
// if not building in mc_bases [ i ] then
72121: LD_VAR 0 1
72125: PUSH
72126: LD_EXP 57
72130: PUSH
72131: LD_VAR 0 3
72135: ARRAY
72136: IN
72137: NOT
72138: IFFALSE 72184
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72140: LD_ADDR_EXP 57
72144: PUSH
72145: LD_EXP 57
72149: PPUSH
72150: LD_VAR 0 3
72154: PUSH
72155: LD_EXP 57
72159: PUSH
72160: LD_VAR 0 3
72164: ARRAY
72165: PUSH
72166: LD_INT 1
72168: PLUS
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PPUSH
72174: LD_VAR 0 1
72178: PPUSH
72179: CALL 20102 0 3
72183: ST_TO_ADDR
// exit ;
72184: POP
72185: POP
72186: GO 72192
// end ; end ;
72188: GO 71992
72190: POP
72191: POP
// end ;
72192: LD_VAR 0 2
72196: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
72197: LD_INT 0
72199: PPUSH
72200: PPUSH
72201: PPUSH
72202: PPUSH
72203: PPUSH
72204: PPUSH
72205: PPUSH
// if not mc_bases then
72206: LD_EXP 57
72210: NOT
72211: IFFALSE 72215
// exit ;
72213: GO 72876
// for i = 1 to mc_bases do
72215: LD_ADDR_VAR 0 3
72219: PUSH
72220: DOUBLE
72221: LD_INT 1
72223: DEC
72224: ST_TO_ADDR
72225: LD_EXP 57
72229: PUSH
72230: FOR_TO
72231: IFFALSE 72874
// begin if building in mc_construct_list [ i ] then
72233: LD_VAR 0 1
72237: PUSH
72238: LD_EXP 64
72242: PUSH
72243: LD_VAR 0 3
72247: ARRAY
72248: IN
72249: IFFALSE 72872
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
72251: LD_ADDR_EXP 64
72255: PUSH
72256: LD_EXP 64
72260: PPUSH
72261: LD_VAR 0 3
72265: PPUSH
72266: LD_EXP 64
72270: PUSH
72271: LD_VAR 0 3
72275: ARRAY
72276: PUSH
72277: LD_VAR 0 1
72281: DIFF
72282: PPUSH
72283: CALL_OW 1
72287: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
72288: LD_ADDR_EXP 57
72292: PUSH
72293: LD_EXP 57
72297: PPUSH
72298: LD_VAR 0 3
72302: PUSH
72303: LD_EXP 57
72307: PUSH
72308: LD_VAR 0 3
72312: ARRAY
72313: PUSH
72314: LD_INT 1
72316: PLUS
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PPUSH
72322: LD_VAR 0 1
72326: PPUSH
72327: CALL 20102 0 3
72331: ST_TO_ADDR
// btype := GetBType ( building ) ;
72332: LD_ADDR_VAR 0 5
72336: PUSH
72337: LD_VAR 0 1
72341: PPUSH
72342: CALL_OW 266
72346: ST_TO_ADDR
// side := GetSide ( building ) ;
72347: LD_ADDR_VAR 0 8
72351: PUSH
72352: LD_VAR 0 1
72356: PPUSH
72357: CALL_OW 255
72361: ST_TO_ADDR
// if btype = b_lab then
72362: LD_VAR 0 5
72366: PUSH
72367: LD_INT 6
72369: EQUAL
72370: IFFALSE 72420
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
72372: LD_ADDR_EXP 90
72376: PUSH
72377: LD_EXP 90
72381: PPUSH
72382: LD_VAR 0 3
72386: PUSH
72387: LD_EXP 90
72391: PUSH
72392: LD_VAR 0 3
72396: ARRAY
72397: PUSH
72398: LD_INT 1
72400: PLUS
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PPUSH
72406: LD_VAR 0 1
72410: PPUSH
72411: CALL 20102 0 3
72415: ST_TO_ADDR
// exit ;
72416: POP
72417: POP
72418: GO 72876
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
72420: LD_VAR 0 5
72424: PUSH
72425: LD_INT 0
72427: PUSH
72428: LD_INT 2
72430: PUSH
72431: LD_INT 4
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: LIST
72438: IN
72439: IFFALSE 72563
// begin if btype = b_armoury then
72441: LD_VAR 0 5
72445: PUSH
72446: LD_INT 4
72448: EQUAL
72449: IFFALSE 72459
// btype := b_barracks ;
72451: LD_ADDR_VAR 0 5
72455: PUSH
72456: LD_INT 5
72458: ST_TO_ADDR
// if btype = b_depot then
72459: LD_VAR 0 5
72463: PUSH
72464: LD_INT 0
72466: EQUAL
72467: IFFALSE 72477
// btype := b_warehouse ;
72469: LD_ADDR_VAR 0 5
72473: PUSH
72474: LD_INT 1
72476: ST_TO_ADDR
// if btype = b_workshop then
72477: LD_VAR 0 5
72481: PUSH
72482: LD_INT 2
72484: EQUAL
72485: IFFALSE 72495
// btype := b_factory ;
72487: LD_ADDR_VAR 0 5
72491: PUSH
72492: LD_INT 3
72494: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
72495: LD_VAR 0 5
72499: PPUSH
72500: LD_VAR 0 8
72504: PPUSH
72505: CALL_OW 323
72509: PUSH
72510: LD_INT 1
72512: EQUAL
72513: IFFALSE 72559
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
72515: LD_ADDR_EXP 89
72519: PUSH
72520: LD_EXP 89
72524: PPUSH
72525: LD_VAR 0 3
72529: PUSH
72530: LD_EXP 89
72534: PUSH
72535: LD_VAR 0 3
72539: ARRAY
72540: PUSH
72541: LD_INT 1
72543: PLUS
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PPUSH
72549: LD_VAR 0 1
72553: PPUSH
72554: CALL 20102 0 3
72558: ST_TO_ADDR
// exit ;
72559: POP
72560: POP
72561: GO 72876
// end ; if btype in [ b_bunker , b_turret ] then
72563: LD_VAR 0 5
72567: PUSH
72568: LD_INT 32
72570: PUSH
72571: LD_INT 33
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: IN
72578: IFFALSE 72868
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
72580: LD_ADDR_EXP 65
72584: PUSH
72585: LD_EXP 65
72589: PPUSH
72590: LD_VAR 0 3
72594: PUSH
72595: LD_EXP 65
72599: PUSH
72600: LD_VAR 0 3
72604: ARRAY
72605: PUSH
72606: LD_INT 1
72608: PLUS
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PPUSH
72614: LD_VAR 0 1
72618: PPUSH
72619: CALL 20102 0 3
72623: ST_TO_ADDR
// if btype = b_bunker then
72624: LD_VAR 0 5
72628: PUSH
72629: LD_INT 32
72631: EQUAL
72632: IFFALSE 72868
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
72634: LD_ADDR_EXP 66
72638: PUSH
72639: LD_EXP 66
72643: PPUSH
72644: LD_VAR 0 3
72648: PUSH
72649: LD_EXP 66
72653: PUSH
72654: LD_VAR 0 3
72658: ARRAY
72659: PUSH
72660: LD_INT 1
72662: PLUS
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PPUSH
72668: LD_VAR 0 1
72672: PPUSH
72673: CALL 20102 0 3
72677: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
72678: LD_ADDR_VAR 0 6
72682: PUSH
72683: LD_EXP 57
72687: PUSH
72688: LD_VAR 0 3
72692: ARRAY
72693: PPUSH
72694: LD_INT 25
72696: PUSH
72697: LD_INT 1
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PUSH
72704: LD_INT 3
72706: PUSH
72707: LD_INT 54
72709: PUSH
72710: EMPTY
72711: LIST
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PPUSH
72721: CALL_OW 72
72725: ST_TO_ADDR
// if tmp then
72726: LD_VAR 0 6
72730: IFFALSE 72736
// exit ;
72732: POP
72733: POP
72734: GO 72876
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72736: LD_ADDR_VAR 0 6
72740: PUSH
72741: LD_EXP 57
72745: PUSH
72746: LD_VAR 0 3
72750: ARRAY
72751: PPUSH
72752: LD_INT 2
72754: PUSH
72755: LD_INT 30
72757: PUSH
72758: LD_INT 4
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 30
72767: PUSH
72768: LD_INT 5
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: LIST
72779: PPUSH
72780: CALL_OW 72
72784: ST_TO_ADDR
// if not tmp then
72785: LD_VAR 0 6
72789: NOT
72790: IFFALSE 72796
// exit ;
72792: POP
72793: POP
72794: GO 72876
// for j in tmp do
72796: LD_ADDR_VAR 0 4
72800: PUSH
72801: LD_VAR 0 6
72805: PUSH
72806: FOR_IN
72807: IFFALSE 72866
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
72809: LD_ADDR_VAR 0 7
72813: PUSH
72814: LD_VAR 0 4
72818: PPUSH
72819: CALL_OW 313
72823: PPUSH
72824: LD_INT 25
72826: PUSH
72827: LD_INT 1
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PPUSH
72834: CALL_OW 72
72838: ST_TO_ADDR
// if units then
72839: LD_VAR 0 7
72843: IFFALSE 72864
// begin ComExitBuilding ( units [ 1 ] ) ;
72845: LD_VAR 0 7
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PPUSH
72854: CALL_OW 122
// exit ;
72858: POP
72859: POP
72860: POP
72861: POP
72862: GO 72876
// end ; end ;
72864: GO 72806
72866: POP
72867: POP
// end ; end ; exit ;
72868: POP
72869: POP
72870: GO 72876
// end ; end ;
72872: GO 72230
72874: POP
72875: POP
// end ;
72876: LD_VAR 0 2
72880: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
72881: LD_INT 0
72883: PPUSH
72884: PPUSH
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
// if not mc_bases then
72890: LD_EXP 57
72894: NOT
72895: IFFALSE 72899
// exit ;
72897: GO 73130
// btype := GetBType ( building ) ;
72899: LD_ADDR_VAR 0 6
72903: PUSH
72904: LD_VAR 0 1
72908: PPUSH
72909: CALL_OW 266
72913: ST_TO_ADDR
// x := GetX ( building ) ;
72914: LD_ADDR_VAR 0 7
72918: PUSH
72919: LD_VAR 0 1
72923: PPUSH
72924: CALL_OW 250
72928: ST_TO_ADDR
// y := GetY ( building ) ;
72929: LD_ADDR_VAR 0 8
72933: PUSH
72934: LD_VAR 0 1
72938: PPUSH
72939: CALL_OW 251
72943: ST_TO_ADDR
// d := GetDir ( building ) ;
72944: LD_ADDR_VAR 0 9
72948: PUSH
72949: LD_VAR 0 1
72953: PPUSH
72954: CALL_OW 254
72958: ST_TO_ADDR
// for i = 1 to mc_bases do
72959: LD_ADDR_VAR 0 4
72963: PUSH
72964: DOUBLE
72965: LD_INT 1
72967: DEC
72968: ST_TO_ADDR
72969: LD_EXP 57
72973: PUSH
72974: FOR_TO
72975: IFFALSE 73128
// begin if not mc_build_list [ i ] then
72977: LD_EXP 62
72981: PUSH
72982: LD_VAR 0 4
72986: ARRAY
72987: NOT
72988: IFFALSE 72992
// continue ;
72990: GO 72974
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
72992: LD_VAR 0 6
72996: PUSH
72997: LD_VAR 0 7
73001: PUSH
73002: LD_VAR 0 8
73006: PUSH
73007: LD_VAR 0 9
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PPUSH
73018: LD_EXP 62
73022: PUSH
73023: LD_VAR 0 4
73027: ARRAY
73028: PUSH
73029: LD_INT 1
73031: ARRAY
73032: PPUSH
73033: CALL 25589 0 2
73037: IFFALSE 73126
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
73039: LD_ADDR_EXP 62
73043: PUSH
73044: LD_EXP 62
73048: PPUSH
73049: LD_VAR 0 4
73053: PPUSH
73054: LD_EXP 62
73058: PUSH
73059: LD_VAR 0 4
73063: ARRAY
73064: PPUSH
73065: LD_INT 1
73067: PPUSH
73068: CALL_OW 3
73072: PPUSH
73073: CALL_OW 1
73077: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
73078: LD_ADDR_EXP 64
73082: PUSH
73083: LD_EXP 64
73087: PPUSH
73088: LD_VAR 0 4
73092: PUSH
73093: LD_EXP 64
73097: PUSH
73098: LD_VAR 0 4
73102: ARRAY
73103: PUSH
73104: LD_INT 1
73106: PLUS
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PPUSH
73112: LD_VAR 0 1
73116: PPUSH
73117: CALL 20102 0 3
73121: ST_TO_ADDR
// exit ;
73122: POP
73123: POP
73124: GO 73130
// end ; end ;
73126: GO 72974
73128: POP
73129: POP
// end ;
73130: LD_VAR 0 3
73134: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
73135: LD_INT 0
73137: PPUSH
73138: PPUSH
73139: PPUSH
// if not mc_bases then
73140: LD_EXP 57
73144: NOT
73145: IFFALSE 73149
// exit ;
73147: GO 73339
// for i = 1 to mc_bases do
73149: LD_ADDR_VAR 0 4
73153: PUSH
73154: DOUBLE
73155: LD_INT 1
73157: DEC
73158: ST_TO_ADDR
73159: LD_EXP 57
73163: PUSH
73164: FOR_TO
73165: IFFALSE 73252
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
73167: LD_VAR 0 1
73171: PUSH
73172: LD_EXP 65
73176: PUSH
73177: LD_VAR 0 4
73181: ARRAY
73182: IN
73183: PUSH
73184: LD_VAR 0 1
73188: PUSH
73189: LD_EXP 66
73193: PUSH
73194: LD_VAR 0 4
73198: ARRAY
73199: IN
73200: NOT
73201: AND
73202: IFFALSE 73250
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
73204: LD_ADDR_EXP 66
73208: PUSH
73209: LD_EXP 66
73213: PPUSH
73214: LD_VAR 0 4
73218: PUSH
73219: LD_EXP 66
73223: PUSH
73224: LD_VAR 0 4
73228: ARRAY
73229: PUSH
73230: LD_INT 1
73232: PLUS
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PPUSH
73238: LD_VAR 0 1
73242: PPUSH
73243: CALL 20102 0 3
73247: ST_TO_ADDR
// break ;
73248: GO 73252
// end ; end ;
73250: GO 73164
73252: POP
73253: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
73254: LD_VAR 0 1
73258: PPUSH
73259: CALL_OW 257
73263: PUSH
73264: LD_EXP 83
73268: IN
73269: PUSH
73270: LD_VAR 0 1
73274: PPUSH
73275: CALL_OW 266
73279: PUSH
73280: LD_INT 5
73282: EQUAL
73283: AND
73284: PUSH
73285: LD_VAR 0 2
73289: PPUSH
73290: CALL_OW 110
73294: PUSH
73295: LD_INT 18
73297: NONEQUAL
73298: AND
73299: IFFALSE 73339
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
73301: LD_VAR 0 2
73305: PPUSH
73306: CALL_OW 257
73310: PUSH
73311: LD_INT 5
73313: PUSH
73314: LD_INT 8
73316: PUSH
73317: LD_INT 9
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: LIST
73324: IN
73325: IFFALSE 73339
// SetClass ( unit , 1 ) ;
73327: LD_VAR 0 2
73331: PPUSH
73332: LD_INT 1
73334: PPUSH
73335: CALL_OW 336
// end ;
73339: LD_VAR 0 3
73343: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
73344: LD_INT 0
73346: PPUSH
73347: PPUSH
// if not mc_bases then
73348: LD_EXP 57
73352: NOT
73353: IFFALSE 73357
// exit ;
73355: GO 73473
// if GetLives ( abandoned_vehicle ) > 250 then
73357: LD_VAR 0 2
73361: PPUSH
73362: CALL_OW 256
73366: PUSH
73367: LD_INT 250
73369: GREATER
73370: IFFALSE 73374
// exit ;
73372: GO 73473
// for i = 1 to mc_bases do
73374: LD_ADDR_VAR 0 6
73378: PUSH
73379: DOUBLE
73380: LD_INT 1
73382: DEC
73383: ST_TO_ADDR
73384: LD_EXP 57
73388: PUSH
73389: FOR_TO
73390: IFFALSE 73471
// begin if driver in mc_bases [ i ] then
73392: LD_VAR 0 1
73396: PUSH
73397: LD_EXP 57
73401: PUSH
73402: LD_VAR 0 6
73406: ARRAY
73407: IN
73408: IFFALSE 73469
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
73410: LD_VAR 0 1
73414: PPUSH
73415: LD_EXP 57
73419: PUSH
73420: LD_VAR 0 6
73424: ARRAY
73425: PPUSH
73426: LD_INT 2
73428: PUSH
73429: LD_INT 30
73431: PUSH
73432: LD_INT 0
73434: PUSH
73435: EMPTY
73436: LIST
73437: LIST
73438: PUSH
73439: LD_INT 30
73441: PUSH
73442: LD_INT 1
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: LIST
73453: PPUSH
73454: CALL_OW 72
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: PPUSH
73463: CALL_OW 112
// break ;
73467: GO 73471
// end ; end ;
73469: GO 73389
73471: POP
73472: POP
// end ;
73473: LD_VAR 0 5
73477: RET
