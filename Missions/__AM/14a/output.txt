// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// InitVariables ;
  11: CALL 28 0 0
// LoadBuildings ;
  15: CALL 44 0 0
// PrepareAlliance ;
  19: CALL 470 0 0
// Action ;
  23: CALL 1320 0 0
// end ;
  27: END
// export debug ; export function InitVariables ; begin
  28: LD_INT 0
  30: PPUSH
// debug := true ;
  31: LD_ADDR_EXP 1
  35: PUSH
  36: LD_INT 1
  38: ST_TO_ADDR
// end ; end_of_file
  39: LD_VAR 0 1
  43: RET
// export function LoadBuildings ; var i , tmp , b ; begin
  44: LD_INT 0
  46: PPUSH
  47: PPUSH
  48: PPUSH
  49: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
  50: LD_ADDR_VAR 0 3
  54: PUSH
  55: LD_STRING 13a_buildings
  57: PPUSH
  58: LD_INT 7
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 70
  69: PUSH
  70: LD_INT 46
  72: PUSH
  73: LD_INT 3
  75: PUSH
  76: LD_INT 10
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 0
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: PPUSH
 103: CALL_OW 30
 107: ST_TO_ADDR
// for i in tmp do
 108: LD_ADDR_VAR 0 2
 112: PUSH
 113: LD_VAR 0 3
 117: PUSH
 118: FOR_IN
 119: IFFALSE 342
// begin uc_side := 7 ;
 121: LD_ADDR_OWVAR 20
 125: PUSH
 126: LD_INT 7
 128: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 129: LD_ADDR_OWVAR 21
 133: PUSH
 134: LD_VAR 0 2
 138: PUSH
 139: LD_INT 2
 141: ARRAY
 142: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 143: LD_ADDR_OWVAR 42
 147: PUSH
 148: LD_VAR 0 2
 152: PUSH
 153: LD_INT 3
 155: ARRAY
 156: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 157: LD_VAR 0 2
 161: PUSH
 162: LD_INT 3
 164: ARRAY
 165: PUSH
 166: LD_INT 29
 168: PUSH
 169: LD_INT 30
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: IN
 176: IFFALSE 209
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 178: LD_VAR 0 2
 182: PUSH
 183: LD_INT 4
 185: ARRAY
 186: PPUSH
 187: LD_VAR 0 2
 191: PUSH
 192: LD_INT 5
 194: ARRAY
 195: PPUSH
 196: LD_VAR 0 2
 200: PUSH
 201: LD_INT 1
 203: ARRAY
 204: PPUSH
 205: CALL_OW 441
// if i [ 8 ] then
 209: LD_VAR 0 2
 213: PUSH
 214: LD_INT 8
 216: ARRAY
 217: IFFALSE 233
// bc_kind1 := i [ 8 ] ;
 219: LD_ADDR_OWVAR 44
 223: PUSH
 224: LD_VAR 0 2
 228: PUSH
 229: LD_INT 8
 231: ARRAY
 232: ST_TO_ADDR
// if i [ 9 ] then
 233: LD_VAR 0 2
 237: PUSH
 238: LD_INT 9
 240: ARRAY
 241: IFFALSE 257
// bc_kind2 := i [ 9 ] ;
 243: LD_ADDR_OWVAR 45
 247: PUSH
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 9
 255: ARRAY
 256: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 257: LD_ADDR_VAR 0 4
 261: PUSH
 262: LD_VAR 0 2
 266: PUSH
 267: LD_INT 4
 269: ARRAY
 270: PPUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 5
 278: ARRAY
 279: PPUSH
 280: LD_VAR 0 2
 284: PUSH
 285: LD_INT 6
 287: ARRAY
 288: PPUSH
 289: CALL_OW 47
 293: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 294: LD_VAR 0 4
 298: PPUSH
 299: LD_VAR 0 2
 303: PUSH
 304: LD_INT 7
 306: ARRAY
 307: PPUSH
 308: CALL_OW 241
// if i [ 10 ] then
 312: LD_VAR 0 2
 316: PUSH
 317: LD_INT 10
 319: ARRAY
 320: IFFALSE 340
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 322: LD_VAR 0 4
 326: PPUSH
 327: LD_VAR 0 2
 331: PUSH
 332: LD_INT 10
 334: ARRAY
 335: PPUSH
 336: CALL_OW 431
// end ;
 340: GO 118
 342: POP
 343: POP
// end ;
 344: LD_VAR 0 1
 348: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 349: LD_INT 0
 351: PPUSH
 352: PPUSH
// if exist_mode then
 353: LD_VAR 0 2
 357: IFFALSE 382
// unit := CreateCharacter ( prefix & ident ) else
 359: LD_ADDR_VAR 0 5
 363: PUSH
 364: LD_VAR 0 3
 368: PUSH
 369: LD_VAR 0 1
 373: STR
 374: PPUSH
 375: CALL_OW 34
 379: ST_TO_ADDR
 380: GO 397
// unit := NewCharacter ( ident ) ;
 382: LD_ADDR_VAR 0 5
 386: PUSH
 387: LD_VAR 0 1
 391: PPUSH
 392: CALL_OW 25
 396: ST_TO_ADDR
// result := unit ;
 397: LD_ADDR_VAR 0 4
 401: PUSH
 402: LD_VAR 0 5
 406: ST_TO_ADDR
// end ;
 407: LD_VAR 0 4
 411: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
 412: LD_INT 0
 414: PPUSH
// vc_chassis := chassis ;
 415: LD_ADDR_OWVAR 37
 419: PUSH
 420: LD_VAR 0 1
 424: ST_TO_ADDR
// vc_engine := engine ;
 425: LD_ADDR_OWVAR 39
 429: PUSH
 430: LD_VAR 0 2
 434: ST_TO_ADDR
// vc_control := control ;
 435: LD_ADDR_OWVAR 38
 439: PUSH
 440: LD_VAR 0 3
 444: ST_TO_ADDR
// vc_weapon := weapon ;
 445: LD_ADDR_OWVAR 40
 449: PUSH
 450: LD_VAR 0 4
 454: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 455: LD_ADDR_OWVAR 41
 459: PUSH
 460: LD_VAR 0 5
 464: ST_TO_ADDR
// end ; end_of_file
 465: LD_VAR 0 6
 469: RET
// export JMM , Burlak , freedom ; export function PrepareAlliance ; var tmp , i , veh ; begin
 470: LD_INT 0
 472: PPUSH
 473: PPUSH
 474: PPUSH
 475: PPUSH
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 476: LD_ADDR_EXP 2
 480: PUSH
 481: LD_STRING JMM
 483: PPUSH
 484: LD_EXP 1
 488: NOT
 489: PPUSH
 490: LD_STRING 13a_
 492: PPUSH
 493: CALL 349 0 3
 497: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 498: LD_ADDR_EXP 3
 502: PUSH
 503: LD_STRING Burlak
 505: PPUSH
 506: LD_EXP 1
 510: NOT
 511: PPUSH
 512: LD_STRING 13a_
 514: PPUSH
 515: CALL 349 0 3
 519: ST_TO_ADDR
// freedom := FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 520: LD_ADDR_EXP 4
 524: PUSH
 525: LD_INT 22
 527: PUSH
 528: LD_INT 7
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: PUSH
 535: LD_INT 2
 537: PUSH
 538: LD_INT 23
 540: PUSH
 541: LD_INT 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: LD_INT 23
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 30
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PPUSH
 578: CALL_OW 69
 582: ST_TO_ADDR
// if freedom then
 583: LD_EXP 4
 587: IFFALSE 714
// begin freedom := freedom [ 1 ] ;
 589: LD_ADDR_EXP 4
 593: PUSH
 594: LD_EXP 4
 598: PUSH
 599: LD_INT 1
 601: ARRAY
 602: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 603: LD_EXP 4
 607: PPUSH
 608: LD_STRING freedom
 610: PPUSH
 611: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 615: LD_EXP 4
 619: PPUSH
 620: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 624: LD_EXP 2
 628: PPUSH
 629: LD_EXP 4
 633: PPUSH
 634: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 638: LD_EXP 3
 642: PPUSH
 643: LD_EXP 4
 647: PPUSH
 648: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 652: LD_EXP 4
 656: PPUSH
 657: CALL_OW 274
 661: PPUSH
 662: LD_INT 1
 664: PPUSH
 665: LD_INT 1000
 667: PPUSH
 668: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 672: LD_EXP 4
 676: PPUSH
 677: CALL_OW 274
 681: PPUSH
 682: LD_INT 2
 684: PPUSH
 685: LD_INT 400
 687: PPUSH
 688: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 692: LD_EXP 4
 696: PPUSH
 697: CALL_OW 274
 701: PPUSH
 702: LD_INT 3
 704: PPUSH
 705: LD_INT 30
 707: PPUSH
 708: CALL_OW 277
// end else
 712: GO 801
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 714: LD_EXP 2
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 729: LD_EXP 3
 733: PPUSH
 734: LD_EXP 2
 738: PPUSH
 739: CALL_OW 250
 743: PPUSH
 744: LD_EXP 2
 748: PPUSH
 749: CALL_OW 251
 753: PPUSH
 754: LD_INT 8
 756: PPUSH
 757: LD_INT 0
 759: PPUSH
 760: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 764: LD_EXP 2
 768: PPUSH
 769: LD_EXP 3
 773: PPUSH
 774: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
 778: LD_EXP 3
 782: PPUSH
 783: LD_EXP 2
 787: PPUSH
 788: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
 792: LD_EXP 2
 796: PPUSH
 797: CALL_OW 87
// end ; tmp := [ [ us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
 801: LD_ADDR_VAR 0 2
 805: PUSH
 806: LD_INT 3
 808: PUSH
 809: LD_INT 4
 811: PUSH
 812: LD_INT 5
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 5
 822: PUSH
 823: LD_INT 9
 825: PUSH
 826: LD_INT 7
 828: PUSH
 829: LD_INT 4
 831: PUSH
 832: LD_INT 12
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: ST_TO_ADDR
// uc_side := 7 ;
 846: LD_ADDR_OWVAR 20
 850: PUSH
 851: LD_INT 7
 853: ST_TO_ADDR
// uc_nation := 1 ;
 854: LD_ADDR_OWVAR 21
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// for i = 1 to 4 do
 862: LD_ADDR_VAR 0 3
 866: PUSH
 867: DOUBLE
 868: LD_INT 1
 870: DEC
 871: ST_TO_ADDR
 872: LD_INT 4
 874: PUSH
 875: FOR_TO
 876: IFFALSE 1011
// begin PrepareVehicle ( tmp [ 1 ] [ rand ( 1 , tmp [ 1 ] ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ rand ( 1 , tmp [ 2 ] ) ] , 100 ) ;
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_VAR 0 2
 894: PUSH
 895: LD_INT 1
 897: ARRAY
 898: PPUSH
 899: CALL_OW 12
 903: ARRAY
 904: PPUSH
 905: LD_INT 1
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 1
 917: PPUSH
 918: LD_INT 2
 920: PPUSH
 921: CALL_OW 12
 925: ARRAY
 926: PPUSH
 927: LD_INT 1
 929: PPUSH
 930: LD_VAR 0 2
 934: PUSH
 935: LD_INT 2
 937: ARRAY
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_VAR 0 2
 946: PUSH
 947: LD_INT 2
 949: ARRAY
 950: PPUSH
 951: CALL_OW 12
 955: ARRAY
 956: PPUSH
 957: LD_INT 100
 959: PPUSH
 960: CALL 412 0 5
// veh := CreateVehicle ;
 964: LD_ADDR_VAR 0 4
 968: PUSH
 969: CALL_OW 45
 973: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
 974: LD_VAR 0 4
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: LD_INT 5
 984: PPUSH
 985: CALL_OW 12
 989: PPUSH
 990: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
 994: LD_VAR 0 4
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: CALL_OW 49
// end ;
1009: GO 875
1011: POP
1012: POP
// uc_nation := 3 ;
1013: LD_ADDR_OWVAR 21
1017: PUSH
1018: LD_INT 3
1020: ST_TO_ADDR
// tmp := [ [ ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher , ru_cargo_bay ] ] ;
1021: LD_ADDR_VAR 0 2
1025: PUSH
1026: LD_INT 22
1028: PUSH
1029: LD_INT 23
1031: PUSH
1032: LD_INT 24
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 43
1042: PUSH
1043: LD_INT 44
1045: PUSH
1046: LD_INT 45
1048: PUSH
1049: LD_INT 51
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: ST_TO_ADDR
// for i = 1 to 4 do
1062: LD_ADDR_VAR 0 3
1066: PUSH
1067: DOUBLE
1068: LD_INT 1
1070: DEC
1071: ST_TO_ADDR
1072: LD_INT 4
1074: PUSH
1075: FOR_TO
1076: IFFALSE 1211
// begin PrepareVehicle ( tmp [ 1 ] [ rand ( 1 , tmp [ 1 ] ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ rand ( 1 , tmp [ 2 ] ) ] , 100 ) ;
1078: LD_VAR 0 2
1082: PUSH
1083: LD_INT 1
1085: ARRAY
1086: PUSH
1087: LD_INT 1
1089: PPUSH
1090: LD_VAR 0 2
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: CALL_OW 12
1103: ARRAY
1104: PPUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 1
1117: PPUSH
1118: LD_INT 2
1120: PPUSH
1121: CALL_OW 12
1125: ARRAY
1126: PPUSH
1127: LD_INT 1
1129: PPUSH
1130: LD_VAR 0 2
1134: PUSH
1135: LD_INT 2
1137: ARRAY
1138: PUSH
1139: LD_INT 1
1141: PPUSH
1142: LD_VAR 0 2
1146: PUSH
1147: LD_INT 2
1149: ARRAY
1150: PPUSH
1151: CALL_OW 12
1155: ARRAY
1156: PPUSH
1157: LD_INT 100
1159: PPUSH
1160: CALL 412 0 5
// veh := CreateVehicle ;
1164: LD_ADDR_VAR 0 4
1168: PUSH
1169: CALL_OW 45
1173: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 0
1181: PPUSH
1182: LD_INT 5
1184: PPUSH
1185: CALL_OW 12
1189: PPUSH
1190: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1194: LD_VAR 0 4
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 0
1204: PPUSH
1205: CALL_OW 49
// end ;
1209: GO 1075
1211: POP
1212: POP
// if not FilterAllUnits ( [ [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) then
1213: LD_INT 2
1215: PUSH
1216: LD_INT 34
1218: PUSH
1219: LD_INT 12
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 34
1228: PUSH
1229: LD_INT 51
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: NOT
1249: IFFALSE 1315
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1251: LD_INT 22
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: LD_INT 1
1259: PPUSH
1260: LD_INT 51
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL 412 0 5
// veh := CreateVehicle ;
1270: LD_ADDR_VAR 0 4
1274: PUSH
1275: CALL_OW 45
1279: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1280: LD_VAR 0 4
1284: PPUSH
1285: LD_INT 0
1287: PPUSH
1288: LD_INT 5
1290: PPUSH
1291: CALL_OW 12
1295: PPUSH
1296: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1300: LD_VAR 0 4
1304: PPUSH
1305: LD_INT 1
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: CALL_OW 49
// end ; end ; end_of_file
1315: LD_VAR 0 1
1319: RET
// export function Action ; begin
1320: LD_INT 0
1322: PPUSH
// end ;
1323: LD_VAR 0 1
1327: RET
