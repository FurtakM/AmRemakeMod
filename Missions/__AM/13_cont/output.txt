// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDestroyedCounter ; export arControlTower , arDriver ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 25
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 26
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 28
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 27
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 29
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// eventVar1 = 0 ;
  48: LD_ADDR_EXP 32
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// eventVar2 = 0 ;
  56: LD_ADDR_EXP 33
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// eventVar3 = 0 ;
  64: LD_ADDR_EXP 34
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// eventVar4 = 0 ;
  72: LD_ADDR_EXP 35
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// eventVar5 = 0 ;
  80: LD_ADDR_EXP 36
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// debugMode = 1 ;
  88: LD_ADDR_EXP 37
  92: PUSH
  93: LD_INT 1
  95: ST_TO_ADDR
// SpawnVehicle ;
  96: CALL 1464 0 0
// PrepareHeroes ;
 100: CALL 426 0 0
// PrepareAmericansRandom ;
 104: CALL 1368 0 0
// end ;
 108: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 109: LD_EXP 37
 113: PUSH
 114: LD_INT 1
 116: EQUAL
 117: IFFALSE 423
 119: GO 121
 121: DISABLE
 122: LD_INT 0
 124: PPUSH
// begin enable ;
 125: ENABLE
// fogoff ( true ) ;
 126: LD_INT 1
 128: PPUSH
 129: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 133: LD_ADDR_VAR 0 1
 137: PUSH
 138: LD_INT 22
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 21
 150: PUSH
 151: LD_INT 1
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: PUSH
 158: EMPTY
 159: LIST
 160: LIST
 161: PPUSH
 162: CALL_OW 69
 166: PUSH
 167: FOR_IN
 168: IFFALSE 184
// SetLives ( i , 1000 ) ;
 170: LD_VAR 0 1
 174: PPUSH
 175: LD_INT 1000
 177: PPUSH
 178: CALL_OW 234
 182: GO 167
 184: POP
 185: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 186: LD_ADDR_VAR 0 1
 190: PUSH
 191: LD_INT 22
 193: PUSH
 194: LD_INT 1
 196: PUSH
 197: EMPTY
 198: LIST
 199: LIST
 200: PUSH
 201: LD_INT 2
 203: PUSH
 204: LD_INT 30
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: LIST
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: PPUSH
 233: CALL_OW 69
 237: PUSH
 238: FOR_IN
 239: IFFALSE 263
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 241: LD_VAR 0 1
 245: PPUSH
 246: CALL_OW 274
 250: PPUSH
 251: LD_INT 1
 253: PPUSH
 254: LD_INT 9999
 256: PPUSH
 257: CALL_OW 277
 261: GO 238
 263: POP
 264: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 265: LD_ADDR_VAR 0 1
 269: PUSH
 270: LD_INT 22
 272: PUSH
 273: LD_INT 1
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 30
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PUSH
 293: LD_INT 30
 295: PUSH
 296: LD_INT 1
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PPUSH
 312: CALL_OW 69
 316: PUSH
 317: FOR_IN
 318: IFFALSE 342
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 274
 329: PPUSH
 330: LD_INT 2
 332: PPUSH
 333: LD_INT 9999
 335: PPUSH
 336: CALL_OW 277
 340: GO 317
 342: POP
 343: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 344: LD_ADDR_VAR 0 1
 348: PUSH
 349: LD_INT 22
 351: PUSH
 352: LD_INT 1
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 30
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: PPUSH
 391: CALL_OW 69
 395: PUSH
 396: FOR_IN
 397: IFFALSE 421
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 399: LD_VAR 0 1
 403: PPUSH
 404: CALL_OW 274
 408: PPUSH
 409: LD_INT 3
 411: PPUSH
 412: LD_INT 9999
 414: PPUSH
 415: CALL_OW 277
 419: GO 396
 421: POP
 422: POP
// end ; end_of_file
 423: PPOPN 1
 425: END
// export function PrepareHeroes ; begin
 426: LD_INT 0
 428: PPUSH
// uc_side = 1 ;
 429: LD_ADDR_OWVAR 20
 433: PUSH
 434: LD_INT 1
 436: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 437: LD_ADDR_EXP 1
 441: PUSH
 442: LD_STRING 13c_JMM
 444: PPUSH
 445: LD_INT 1
 447: PPUSH
 448: CALL 4872 0 2
 452: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 453: LD_ADDR_EXP 2
 457: PUSH
 458: LD_STRING 13c_Stevens
 460: PPUSH
 461: LD_INT 1
 463: PPUSH
 464: CALL 4872 0 2
 468: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 469: LD_ADDR_EXP 3
 473: PUSH
 474: LD_STRING 13c_Lisa
 476: PPUSH
 477: LD_INT 1
 479: PPUSH
 480: CALL 4872 0 2
 484: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 485: LD_ADDR_EXP 4
 489: PUSH
 490: LD_STRING 13c_Donaldson
 492: PPUSH
 493: LD_INT 1
 495: PPUSH
 496: CALL 4872 0 2
 500: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 501: LD_ADDR_EXP 5
 505: PUSH
 506: LD_STRING 13c_Bobby
 508: PPUSH
 509: LD_INT 1
 511: PPUSH
 512: CALL 4872 0 2
 516: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Frank , true ) ;
 517: LD_ADDR_EXP 6
 521: PUSH
 522: LD_STRING 13c_Frank
 524: PPUSH
 525: LD_INT 1
 527: PPUSH
 528: CALL 4872 0 2
 532: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 533: LD_ADDR_EXP 7
 537: PUSH
 538: LD_STRING 13c_Denis
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 4872 0 2
 548: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 549: LD_ADDR_EXP 8
 553: PUSH
 554: LD_STRING 13c_Brown
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL 4872 0 2
 564: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 565: LD_ADDR_EXP 9
 569: PUSH
 570: LD_STRING 13c_Gladstone
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 4872 0 2
 580: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 581: LD_ADDR_EXP 10
 585: PUSH
 586: LD_STRING 13c_Houten
 588: PPUSH
 589: LD_INT 1
 591: PPUSH
 592: CALL 4872 0 2
 596: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 597: LD_ADDR_EXP 11
 601: PUSH
 602: LD_STRING 13c_Cornel
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 4872 0 2
 612: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 613: LD_ADDR_EXP 12
 617: PUSH
 618: LD_STRING 13c_Gary
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL 4872 0 2
 628: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_STRING 13c_Frank
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: CALL 4872 0 2
 644: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 645: LD_ADDR_EXP 14
 649: PUSH
 650: LD_STRING 13c_Kikuchi
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL 4872 0 2
 660: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 661: LD_ADDR_EXP 15
 665: PUSH
 666: LD_STRING Powell
 668: PPUSH
 669: LD_INT 0
 671: PPUSH
 672: CALL 4872 0 2
 676: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 677: LD_EXP 1
 681: PPUSH
 682: LD_INT 22
 684: PUSH
 685: LD_INT 1
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 21
 694: PUSH
 695: LD_INT 2
 697: PUSH
 698: EMPTY
 699: LIST
 700: LIST
 701: PUSH
 702: LD_INT 58
 704: PUSH
 705: EMPTY
 706: LIST
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: PPUSH
 713: CALL_OW 69
 717: PUSH
 718: LD_INT 1
 720: ARRAY
 721: PPUSH
 722: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 726: LD_EXP 2
 730: PPUSH
 731: LD_INT 22
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 21
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 58
 753: PUSH
 754: EMPTY
 755: LIST
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 775: LD_EXP 3
 779: PPUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 1
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: LD_INT 21
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 58
 802: PUSH
 803: EMPTY
 804: LIST
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PUSH
 816: LD_INT 1
 818: ARRAY
 819: PPUSH
 820: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 824: LD_EXP 4
 828: PPUSH
 829: LD_INT 22
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: LD_INT 21
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 58
 851: PUSH
 852: EMPTY
 853: LIST
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: LD_INT 1
 867: ARRAY
 868: PPUSH
 869: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 873: LD_EXP 5
 877: PPUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 21
 890: PUSH
 891: LD_INT 2
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 58
 900: PUSH
 901: EMPTY
 902: LIST
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PPUSH
 909: CALL_OW 69
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 922: LD_EXP 6
 926: PPUSH
 927: LD_INT 22
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 21
 939: PUSH
 940: LD_INT 2
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PUSH
 947: LD_INT 58
 949: PUSH
 950: EMPTY
 951: LIST
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: PPUSH
 958: CALL_OW 69
 962: PUSH
 963: LD_INT 1
 965: ARRAY
 966: PPUSH
 967: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 971: LD_EXP 7
 975: PPUSH
 976: LD_INT 22
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PUSH
 986: LD_INT 21
 988: PUSH
 989: LD_INT 2
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 58
 998: PUSH
 999: EMPTY
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 69
1011: PUSH
1012: LD_INT 1
1014: ARRAY
1015: PPUSH
1016: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1020: LD_EXP 8
1024: PPUSH
1025: LD_INT 22
1027: PUSH
1028: LD_INT 1
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 21
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 58
1047: PUSH
1048: EMPTY
1049: LIST
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PPUSH
1056: CALL_OW 69
1060: PUSH
1061: LD_INT 1
1063: ARRAY
1064: PPUSH
1065: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1069: LD_EXP 9
1073: PPUSH
1074: LD_INT 22
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 21
1086: PUSH
1087: LD_INT 2
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: PUSH
1094: LD_INT 58
1096: PUSH
1097: EMPTY
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1118: LD_EXP 10
1122: PPUSH
1123: LD_INT 22
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PUSH
1133: LD_INT 21
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 58
1145: PUSH
1146: EMPTY
1147: LIST
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: LIST
1153: PPUSH
1154: CALL_OW 69
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1167: LD_EXP 11
1171: PPUSH
1172: LD_INT 22
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 21
1184: PUSH
1185: LD_INT 2
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 58
1194: PUSH
1195: EMPTY
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: PUSH
1208: LD_INT 1
1210: ARRAY
1211: PPUSH
1212: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1216: LD_EXP 12
1220: PPUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 21
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 58
1243: PUSH
1244: EMPTY
1245: LIST
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PPUSH
1252: CALL_OW 69
1256: PUSH
1257: LD_INT 1
1259: ARRAY
1260: PPUSH
1261: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1265: LD_EXP 13
1269: PPUSH
1270: LD_INT 22
1272: PUSH
1273: LD_INT 1
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 2
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 58
1292: PUSH
1293: EMPTY
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: PPUSH
1301: CALL_OW 69
1305: PUSH
1306: LD_INT 1
1308: ARRAY
1309: PPUSH
1310: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1314: LD_EXP 14
1318: PPUSH
1319: LD_INT 22
1321: PUSH
1322: LD_INT 1
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 2
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 58
1341: PUSH
1342: EMPTY
1343: LIST
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: PPUSH
1350: CALL_OW 69
1354: PUSH
1355: LD_INT 1
1357: ARRAY
1358: PPUSH
1359: CALL_OW 52
// end ;
1363: LD_VAR 0 1
1367: RET
// export function PrepareAmericansRandom ; var i ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
// uc_side = 1 ;
1372: LD_ADDR_OWVAR 20
1376: PUSH
1377: LD_INT 1
1379: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_STRING 13c_others
1387: PPUSH
1388: CALL_OW 31
1392: ST_TO_ADDR
// for i in others13 do
1393: LD_ADDR_VAR 0 2
1397: PUSH
1398: LD_EXP 16
1402: PUSH
1403: FOR_IN
1404: IFFALSE 1457
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1406: LD_VAR 0 2
1410: PPUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 2
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: PPUSH
1442: CALL_OW 69
1446: PUSH
1447: LD_INT 1
1449: ARRAY
1450: PPUSH
1451: CALL_OW 52
1455: GO 1403
1457: POP
1458: POP
// end ;
1459: LD_VAR 0 1
1463: RET
// export function SpawnVehicle ; var i , veh ; begin
1464: LD_INT 0
1466: PPUSH
1467: PPUSH
1468: PPUSH
// uc_side = 1 ;
1469: LD_ADDR_OWVAR 20
1473: PUSH
1474: LD_INT 1
1476: ST_TO_ADDR
// uc_nation = 1 ;
1477: LD_ADDR_OWVAR 21
1481: PUSH
1482: LD_INT 1
1484: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ Difficulty ] do
1485: LD_ADDR_VAR 0 2
1489: PUSH
1490: DOUBLE
1491: LD_INT 1
1493: DEC
1494: ST_TO_ADDR
1495: LD_INT 3
1497: PUSH
1498: LD_INT 2
1500: PUSH
1501: LD_INT 1
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: PUSH
1509: LD_OWVAR 67
1513: ARRAY
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1604
// begin vc_engine = 3 ;
1518: LD_ADDR_OWVAR 39
1522: PUSH
1523: LD_INT 3
1525: ST_TO_ADDR
// vc_control = 1 ;
1526: LD_ADDR_OWVAR 38
1530: PUSH
1531: LD_INT 1
1533: ST_TO_ADDR
// vc_weapon = 12 ;
1534: LD_ADDR_OWVAR 40
1538: PUSH
1539: LD_INT 12
1541: ST_TO_ADDR
// vc_chassis = 3 ;
1542: LD_ADDR_OWVAR 37
1546: PUSH
1547: LD_INT 3
1549: ST_TO_ADDR
// veh = CreateVehicle ;
1550: LD_ADDR_VAR 0 3
1554: PUSH
1555: CALL_OW 45
1559: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1560: LD_VAR 0 3
1564: PPUSH
1565: LD_INT 2
1567: PPUSH
1568: LD_INT 0
1570: PPUSH
1571: CALL_OW 49
// SetDir ( veh , 2 ) ;
1575: LD_VAR 0 3
1579: PPUSH
1580: LD_INT 2
1582: PPUSH
1583: CALL_OW 233
// AddCargo ( veh , 1 , 100 ) ;
1587: LD_VAR 0 3
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 100
1597: PPUSH
1598: CALL_OW 291
// end ;
1602: GO 1515
1604: POP
1605: POP
// for i = 1 to 8 - [ 3 , 2 , 1 ] [ Difficulty ] do
1606: LD_ADDR_VAR 0 2
1610: PUSH
1611: DOUBLE
1612: LD_INT 1
1614: DEC
1615: ST_TO_ADDR
1616: LD_INT 8
1618: PUSH
1619: LD_INT 3
1621: PUSH
1622: LD_INT 2
1624: PUSH
1625: LD_INT 1
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_OWVAR 67
1637: ARRAY
1638: MINUS
1639: PUSH
1640: FOR_TO
1641: IFFALSE 1737
// begin vc_engine = 3 ;
1643: LD_ADDR_OWVAR 39
1647: PUSH
1648: LD_INT 3
1650: ST_TO_ADDR
// vc_control = 1 ;
1651: LD_ADDR_OWVAR 38
1655: PUSH
1656: LD_INT 1
1658: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
1659: LD_ADDR_OWVAR 40
1663: PUSH
1664: LD_INT 9
1666: PUSH
1667: LD_INT 5
1669: PUSH
1670: LD_INT 4
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 1
1680: PPUSH
1681: LD_INT 3
1683: PPUSH
1684: CALL_OW 12
1688: ARRAY
1689: ST_TO_ADDR
// vc_chassis = 3 ;
1690: LD_ADDR_OWVAR 37
1694: PUSH
1695: LD_INT 3
1697: ST_TO_ADDR
// veh = CreateVehicle ;
1698: LD_ADDR_VAR 0 3
1702: PUSH
1703: CALL_OW 45
1707: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1708: LD_VAR 0 3
1712: PPUSH
1713: LD_INT 2
1715: PPUSH
1716: LD_INT 0
1718: PPUSH
1719: CALL_OW 49
// SetDir ( veh , 1 ) ;
1723: LD_VAR 0 3
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL_OW 233
// end ;
1735: GO 1640
1737: POP
1738: POP
// end ; end_of_file
1739: LD_VAR 0 1
1743: RET
// export function PrepareBurlak ; begin
1744: LD_INT 0
1746: PPUSH
// uc_side = 7 ;
1747: LD_ADDR_OWVAR 20
1751: PUSH
1752: LD_INT 7
1754: ST_TO_ADDR
// uc_nation = 3 ;
1755: LD_ADDR_OWVAR 21
1759: PUSH
1760: LD_INT 3
1762: ST_TO_ADDR
// vc_engine = 3 ;
1763: LD_ADDR_OWVAR 39
1767: PUSH
1768: LD_INT 3
1770: ST_TO_ADDR
// vc_control = 1 ;
1771: LD_ADDR_OWVAR 38
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// vc_weapon = 46 ;
1779: LD_ADDR_OWVAR 40
1783: PUSH
1784: LD_INT 46
1786: ST_TO_ADDR
// vc_chassis = 24 ;
1787: LD_ADDR_OWVAR 37
1791: PUSH
1792: LD_INT 24
1794: ST_TO_ADDR
// Masha = CreateVehicle ;
1795: LD_ADDR_EXP 18
1799: PUSH
1800: CALL_OW 45
1804: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1805: LD_EXP 18
1809: PPUSH
1810: LD_INT 3
1812: PPUSH
1813: LD_INT 0
1815: PPUSH
1816: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1820: LD_EXP 18
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_STRING Burlak
1839: PPUSH
1840: LD_INT 0
1842: PPUSH
1843: CALL 4872 0 2
1847: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1848: LD_EXP 17
1852: PPUSH
1853: LD_EXP 18
1857: PPUSH
1858: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1862: LD_EXP 18
1866: PPUSH
1867: LD_INT 107
1869: PPUSH
1870: LD_INT 118
1872: PPUSH
1873: CALL_OW 114
// spawnBurlak = 1 ;
1877: LD_ADDR_EXP 25
1881: PUSH
1882: LD_INT 1
1884: ST_TO_ADDR
// end ;
1885: LD_VAR 0 1
1889: RET
// export function BurlakArmy ; var i , veh ; begin
1890: LD_INT 0
1892: PPUSH
1893: PPUSH
1894: PPUSH
// uc_side = 7 ;
1895: LD_ADDR_OWVAR 20
1899: PUSH
1900: LD_INT 7
1902: ST_TO_ADDR
// uc_nation = 3 ;
1903: LD_ADDR_OWVAR 21
1907: PUSH
1908: LD_INT 3
1910: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1911: LD_ADDR_EXP 19
1915: PUSH
1916: LD_STRING Gnyevko
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL 4872 0 2
1926: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
1927: LD_ADDR_EXP 20
1931: PUSH
1932: LD_STRING Titov
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL 4872 0 2
1942: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
1943: LD_ADDR_EXP 21
1947: PUSH
1948: LD_STRING Xavier2
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL 4872 0 2
1958: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
1959: LD_ADDR_EXP 22
1963: PUSH
1964: LD_STRING Belkov
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL 4872 0 2
1974: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
1975: LD_ADDR_EXP 23
1979: PUSH
1980: LD_STRING Lipshchin
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL 4872 0 2
1990: ST_TO_ADDR
// for i = 1 to 5 do
1991: LD_ADDR_VAR 0 2
1995: PUSH
1996: DOUBLE
1997: LD_INT 1
1999: DEC
2000: ST_TO_ADDR
2001: LD_INT 5
2003: PUSH
2004: FOR_TO
2005: IFFALSE 2093
// begin vc_engine = 3 ;
2007: LD_ADDR_OWVAR 39
2011: PUSH
2012: LD_INT 3
2014: ST_TO_ADDR
// vc_control = 1 ;
2015: LD_ADDR_OWVAR 38
2019: PUSH
2020: LD_INT 1
2022: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2023: LD_ADDR_OWVAR 40
2027: PUSH
2028: LD_INT 43
2030: PUSH
2031: LD_INT 44
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 4
2051: PPUSH
2052: CALL_OW 12
2056: ARRAY
2057: ST_TO_ADDR
// vc_chassis = 22 ;
2058: LD_ADDR_OWVAR 37
2062: PUSH
2063: LD_INT 22
2065: ST_TO_ADDR
// veh = CreateVehicle ;
2066: LD_ADDR_VAR 0 3
2070: PUSH
2071: CALL_OW 45
2075: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2076: LD_VAR 0 3
2080: PPUSH
2081: LD_INT 3
2083: PPUSH
2084: LD_INT 0
2086: PPUSH
2087: CALL_OW 49
// end ;
2091: GO 2004
2093: POP
2094: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2095: LD_EXP 19
2099: PPUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 7
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 21
2112: PUSH
2113: LD_INT 2
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 58
2122: PUSH
2123: EMPTY
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: PPUSH
2131: CALL_OW 69
2135: PUSH
2136: LD_INT 1
2138: ARRAY
2139: PPUSH
2140: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2144: LD_EXP 20
2148: PPUSH
2149: LD_INT 22
2151: PUSH
2152: LD_INT 7
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 21
2161: PUSH
2162: LD_INT 2
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 58
2171: PUSH
2172: EMPTY
2173: LIST
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PPUSH
2180: CALL_OW 69
2184: PUSH
2185: LD_INT 1
2187: ARRAY
2188: PPUSH
2189: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2193: LD_EXP 21
2197: PPUSH
2198: LD_INT 22
2200: PUSH
2201: LD_INT 7
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 21
2210: PUSH
2211: LD_INT 2
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 58
2220: PUSH
2221: EMPTY
2222: LIST
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PPUSH
2229: CALL_OW 69
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PPUSH
2238: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2242: LD_EXP 22
2246: PPUSH
2247: LD_INT 22
2249: PUSH
2250: LD_INT 7
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 21
2259: PUSH
2260: LD_INT 2
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 58
2269: PUSH
2270: EMPTY
2271: LIST
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: PPUSH
2278: CALL_OW 69
2282: PUSH
2283: LD_INT 1
2285: ARRAY
2286: PPUSH
2287: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2291: LD_EXP 23
2295: PPUSH
2296: LD_INT 22
2298: PUSH
2299: LD_INT 7
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 21
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 58
2318: PUSH
2319: EMPTY
2320: LIST
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2340: LD_EXP 19
2344: PPUSH
2345: LD_INT 3
2347: PPUSH
2348: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2352: LD_EXP 20
2356: PUSH
2357: LD_EXP 23
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PPUSH
2366: LD_INT 9
2368: PPUSH
2369: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2373: LD_INT 22
2375: PUSH
2376: LD_INT 7
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 21
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PPUSH
2397: CALL_OW 69
2401: PPUSH
2402: LD_INT 107
2404: PPUSH
2405: LD_INT 118
2407: PPUSH
2408: CALL_OW 114
// end ; end_of_file
2412: LD_VAR 0 1
2416: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2417: LD_INT 22
2419: PUSH
2420: LD_INT 8
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 33
2429: PUSH
2430: LD_INT 2
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: PUSH
2446: LD_INT 0
2448: GREATER
2449: PUSH
2450: LD_INT 22
2452: PUSH
2453: LD_INT 8
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 34
2462: PUSH
2463: LD_INT 31
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PPUSH
2474: CALL_OW 69
2478: PUSH
2479: LD_INT 0
2481: EQUAL
2482: AND
2483: IFFALSE 2706
2485: GO 2487
2487: DISABLE
2488: LD_INT 0
2490: PPUSH
// begin enable ;
2491: ENABLE
// uc_side = 8 ;
2492: LD_ADDR_OWVAR 20
2496: PUSH
2497: LD_INT 8
2499: ST_TO_ADDR
// uc_nation = 2 ;
2500: LD_ADDR_OWVAR 21
2504: PUSH
2505: LD_INT 2
2507: ST_TO_ADDR
// vc_engine = 3 ;
2508: LD_ADDR_OWVAR 39
2512: PUSH
2513: LD_INT 3
2515: ST_TO_ADDR
// vc_control = 1 ;
2516: LD_ADDR_OWVAR 38
2520: PUSH
2521: LD_INT 1
2523: ST_TO_ADDR
// vc_weapon = 31 ;
2524: LD_ADDR_OWVAR 40
2528: PUSH
2529: LD_INT 31
2531: ST_TO_ADDR
// vc_chassis = 14 ;
2532: LD_ADDR_OWVAR 37
2536: PUSH
2537: LD_INT 14
2539: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2540: LD_ADDR_EXP 30
2544: PUSH
2545: CALL_OW 45
2549: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2550: LD_EXP 30
2554: PPUSH
2555: LD_INT 8
2557: PUSH
2558: LD_INT 9
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 1
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 12
2575: ARRAY
2576: PPUSH
2577: LD_INT 0
2579: PPUSH
2580: CALL_OW 49
// hc_name =  ;
2584: LD_ADDR_OWVAR 26
2588: PUSH
2589: LD_STRING 
2591: ST_TO_ADDR
// hc_gallery =  ;
2592: LD_ADDR_OWVAR 33
2596: PUSH
2597: LD_STRING 
2599: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2600: LD_INT 0
2602: PPUSH
2603: LD_INT 3
2605: PPUSH
2606: LD_INT 10
2608: PPUSH
2609: CALL_OW 380
// arDriver = CreateHuman ;
2613: LD_ADDR_EXP 31
2617: PUSH
2618: CALL_OW 44
2622: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
2623: LD_EXP 31
2627: PPUSH
2628: LD_EXP 30
2632: PPUSH
2633: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2637: LD_ADDR_VAR 0 1
2641: PUSH
2642: LD_INT 22
2644: PUSH
2645: LD_INT 8
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 33
2654: PUSH
2655: LD_INT 2
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 3
2664: PUSH
2665: LD_INT 61
2667: PUSH
2668: EMPTY
2669: LIST
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2704
// ComLinkTo ( i , arDriver ) ;
2688: LD_VAR 0 1
2692: PPUSH
2693: LD_EXP 31
2697: PPUSH
2698: CALL_OW 135
2702: GO 2685
2704: POP
2705: POP
// end ;
2706: PPOPN 1
2708: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , 31 ] ] ] ) = 0 do
2709: LD_INT 22
2711: PUSH
2712: LD_INT 8
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 21
2721: PUSH
2722: LD_INT 2
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: LD_INT 34
2734: PUSH
2735: LD_INT 31
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: LD_INT 0
2758: EQUAL
2759: IFFALSE 2783
2761: GO 2763
2763: DISABLE
// begin enable ;
2764: ENABLE
// RemoveUnit ( arControlTower ) ;
2765: LD_EXP 30
2769: PPUSH
2770: CALL_OW 64
// RemoveUnit ( arDriver ) ;
2774: LD_EXP 31
2778: PPUSH
2779: CALL_OW 64
// end ; end_of_file
2783: END
// every 1 do
2784: GO 2786
2786: DISABLE
// begin InGameOn ;
2787: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2791: LD_INT 22
2793: PUSH
2794: LD_INT 1
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: LD_INT 21
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PPUSH
2815: CALL_OW 69
2819: PUSH
2820: LD_INT 1
2822: ARRAY
2823: PPUSH
2824: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
2828: LD_INT 22
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 21
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PPUSH
2852: CALL_OW 69
2856: PPUSH
2857: LD_INT 69
2859: PPUSH
2860: LD_INT 94
2862: PPUSH
2863: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
2867: LD_EXP 1
2871: PPUSH
2872: LD_STRING D2-JMM-1
2874: PPUSH
2875: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2879: LD_INT 22
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 21
2891: PUSH
2892: LD_INT 2
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: PPUSH
2903: CALL_OW 69
2907: PUSH
2908: LD_INT 1
2910: ARRAY
2911: PPUSH
2912: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
2916: LD_EXP 2
2920: PPUSH
2921: LD_STRING D2-Huck-1
2923: PPUSH
2924: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2928: LD_INT 22
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 21
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 69
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PPUSH
2961: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
2965: LD_EXP 1
2969: PPUSH
2970: LD_STRING D2-JMM-2
2972: PPUSH
2973: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
2977: LD_INT 22
2979: PUSH
2980: LD_INT 1
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: LD_INT 21
2989: PUSH
2990: LD_INT 2
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PPUSH
3001: CALL_OW 69
3005: PUSH
3006: LD_INT 1
3008: ARRAY
3009: PPUSH
3010: CALL_OW 87
// InGameOff ;
3014: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3018: LD_STRING M1
3020: PPUSH
3021: CALL_OW 337
// SaveForQuickRestart ;
3025: CALL_OW 22
// end ;
3029: END
// every 10 10$0 do
3030: GO 3032
3032: DISABLE
// begin DialogueOn ;
3033: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3037: LD_EXP 15
3041: PPUSH
3042: LD_STRING D3-Pow-1
3044: PPUSH
3045: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_STRING D3-JMM-1
3056: PPUSH
3057: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3061: LD_EXP 15
3065: PPUSH
3066: LD_STRING D3-Pow-2
3068: PPUSH
3069: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3073: LD_EXP 1
3077: PPUSH
3078: LD_STRING D3-JMM-2
3080: PPUSH
3081: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3085: LD_EXP 15
3089: PPUSH
3090: LD_STRING D3-Pow-3
3092: PPUSH
3093: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3097: LD_EXP 1
3101: PPUSH
3102: LD_STRING D3-JMM-3
3104: PPUSH
3105: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3109: LD_EXP 15
3113: PPUSH
3114: LD_STRING D3-Pow-4
3116: PPUSH
3117: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3121: LD_EXP 1
3125: PPUSH
3126: LD_STRING D3-JMM-4
3128: PPUSH
3129: CALL_OW 88
// DialogueOff ;
3133: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3137: LD_STRING M2
3139: PPUSH
3140: CALL_OW 337
// wait ( 0 0$30 ) ;
3144: LD_INT 1050
3146: PPUSH
3147: CALL_OW 67
// PrepareBurlak ;
3151: CALL 1744 0 0
// BurlakArmy ;
3155: CALL 1890 0 0
// end ;
3159: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3160: LD_INT 1
3162: PPUSH
3163: LD_EXP 18
3167: PPUSH
3168: CALL_OW 292
3172: IFFALSE 3346
3174: GO 3176
3176: DISABLE
// begin DialogueOn ;
3177: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3181: LD_EXP 18
3185: PPUSH
3186: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Stevens ] , D5-Sol1-1 , D5-FSol1-1 ) ;
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 26
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: LD_INT 25
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 25
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 25
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 25
3245: PUSH
3246: LD_INT 4
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 25
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: PPUSH
3276: CALL_OW 69
3280: PUSH
3281: LD_EXP 1
3285: PUSH
3286: LD_EXP 2
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: DIFF
3295: PPUSH
3296: LD_STRING D5-Sol1-1
3298: PPUSH
3299: LD_STRING D5-FSol1-1
3301: PPUSH
3302: CALL 4929 0 3
// Say ( JMM , D5-JMM-1 ) ;
3306: LD_EXP 1
3310: PPUSH
3311: LD_STRING D5-JMM-1
3313: PPUSH
3314: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3318: LD_EXP 17
3322: PPUSH
3323: LD_STRING DAmer-Bur-1
3325: PPUSH
3326: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3330: LD_EXP 1
3334: PPUSH
3335: LD_STRING DAmer-JMM-1
3337: PPUSH
3338: CALL_OW 88
// DialogueOff ;
3342: CALL_OW 7
// end ;
3346: END
// every 0 0$1 do var i ;
3347: GO 3349
3349: DISABLE
3350: LD_INT 0
3352: PPUSH
// begin enable ;
3353: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3354: LD_ADDR_VAR 0 1
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 7
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PPUSH
3369: CALL_OW 69
3373: PUSH
3374: FOR_IN
3375: IFFALSE 3482
// if IsInArea ( i , AllianceEscape ) then
3377: LD_VAR 0 1
3381: PPUSH
3382: LD_INT 4
3384: PPUSH
3385: CALL_OW 308
3389: IFFALSE 3480
// begin if i = Burlak or i = Masha then
3391: LD_VAR 0 1
3395: PUSH
3396: LD_EXP 17
3400: EQUAL
3401: PUSH
3402: LD_VAR 0 1
3406: PUSH
3407: LD_EXP 18
3411: EQUAL
3412: OR
3413: IFFALSE 3471
// begin RemoveUnit ( i ) ;
3415: LD_VAR 0 1
3419: PPUSH
3420: CALL_OW 64
// DialogueOn ;
3424: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3428: LD_EXP 1
3432: PPUSH
3433: LD_STRING D5a-JMM-1
3435: PPUSH
3436: CALL_OW 88
// Say ( JMM , D5a-Sol1-1 ) ;
3440: LD_EXP 1
3444: PPUSH
3445: LD_STRING D5a-Sol1-1
3447: PPUSH
3448: CALL_OW 88
// DialogueOff ;
3452: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3456: LD_STRING M2b
3458: PPUSH
3459: CALL_OW 337
// spawnBurlak = 0 ;
3463: LD_ADDR_EXP 25
3467: PUSH
3468: LD_INT 0
3470: ST_TO_ADDR
// end ; RemoveUnit ( i ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 64
// end ;
3480: GO 3374
3482: POP
3483: POP
// end ;
3484: PPOPN 1
3486: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
3487: LD_EXP 18
3491: PPUSH
3492: CALL_OW 256
3496: PUSH
3497: LD_INT 500
3499: LESS
3500: PUSH
3501: LD_EXP 18
3505: PPUSH
3506: CALL_OW 255
3510: PUSH
3511: LD_INT 7
3513: EQUAL
3514: AND
3515: IFFALSE 3535
3517: GO 3519
3519: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
3520: LD_EXP 18
3524: PPUSH
3525: LD_INT 107
3527: PPUSH
3528: LD_INT 118
3530: PPUSH
3531: CALL_OW 111
3535: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
3536: LD_EXP 17
3540: PPUSH
3541: CALL_OW 301
3545: PUSH
3546: LD_EXP 25
3550: PUSH
3551: LD_INT 1
3553: EQUAL
3554: AND
3555: IFFALSE 3670
3557: GO 3559
3559: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
3560: LD_EXP 1
3564: PPUSH
3565: LD_STRING D5b-JMM-1
3567: PPUSH
3568: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_not , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) diff [ JMM , Stevens ] , D5b-Sol1-1 ,  ) ;
3572: LD_INT 22
3574: PUSH
3575: LD_INT 1
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 26
3584: PUSH
3585: LD_INT 1
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: LD_INT 25
3597: PUSH
3598: LD_INT 12
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 25
3607: PUSH
3608: LD_INT 16
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PPUSH
3625: CALL_OW 69
3629: PUSH
3630: LD_EXP 1
3634: PUSH
3635: LD_EXP 2
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: DIFF
3644: PPUSH
3645: LD_STRING D5b-Sol1-1
3647: PPUSH
3648: LD_STRING 
3650: PPUSH
3651: CALL 4929 0 3
// ChangeMissionObjectives ( M2a ) ;
3655: LD_STRING M2a
3657: PPUSH
3658: CALL_OW 337
// burlakStatus = 1 ;
3662: LD_ADDR_EXP 26
3666: PUSH
3667: LD_INT 1
3669: ST_TO_ADDR
// end ;
3670: END
// every 0 0$1 trigger IsDead ( Stevens ) do
3671: LD_EXP 2
3675: PPUSH
3676: CALL_OW 301
3680: IFFALSE 3799
3682: GO 3684
3684: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
3685: LD_EXP 1
3689: PPUSH
3690: LD_STRING D6-JMM-1
3692: PPUSH
3693: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_not , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) diff [ JMM , Stevens ] , D6-Sol1-1 ,  ) ;
3697: LD_INT 22
3699: PUSH
3700: LD_INT 1
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 26
3709: PUSH
3710: LD_INT 1
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 3
3719: PUSH
3720: LD_INT 25
3722: PUSH
3723: LD_INT 12
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: LD_INT 25
3732: PUSH
3733: LD_INT 16
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PUSH
3740: EMPTY
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 69
3754: PUSH
3755: LD_EXP 1
3759: PUSH
3760: LD_EXP 2
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: DIFF
3769: PPUSH
3770: LD_STRING D6-Sol1-1
3772: PPUSH
3773: LD_STRING 
3775: PPUSH
3776: CALL 4929 0 3
// Say ( JMM , D6-JMM-2 ) ;
3780: LD_EXP 1
3784: PPUSH
3785: LD_STRING D6-JMM-2
3787: PPUSH
3788: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
3792: LD_STRING M1a
3794: PPUSH
3795: CALL_OW 337
// end ;
3799: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
3800: LD_INT 25
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: CALL_OW 321
3810: PUSH
3811: LD_INT 2
3813: EQUAL
3814: IFFALSE 3831
3816: GO 3818
3818: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
3819: LD_EXP 2
3823: PPUSH
3824: LD_STRING D6-Huck-2
3826: PPUSH
3827: CALL_OW 88
// end ;
3831: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
3832: LD_INT 22
3834: PUSH
3835: LD_INT 1
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 2
3844: PUSH
3845: LD_INT 34
3847: PUSH
3848: LD_INT 8
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 35
3857: PUSH
3858: LD_INT 8
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 69
3878: PUSH
3879: LD_INT 0
3881: GREATER
3882: IFFALSE 4066
3884: GO 3886
3886: DISABLE
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
// begin enable ;
3891: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
3892: LD_ADDR_VAR 0 1
3896: PUSH
3897: LD_INT 5
3899: PPUSH
3900: LD_INT 22
3902: PUSH
3903: LD_INT 1
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 21
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 30
3922: PUSH
3923: LD_INT 1
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: LD_INT 57
3935: PUSH
3936: EMPTY
3937: LIST
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 70
3953: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: LD_INT 5
3961: PPUSH
3962: LD_INT 22
3964: PUSH
3965: LD_INT 1
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 21
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 30
3984: PUSH
3985: LD_INT 5
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 3
3994: PUSH
3995: LD_INT 57
3997: PUSH
3998: EMPTY
3999: LIST
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 70
4015: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4016: LD_VAR 0 1
4020: PUSH
4021: LD_INT 0
4023: GREATER
4024: PUSH
4025: LD_VAR 0 2
4029: PUSH
4030: LD_INT 0
4032: GREATER
4033: AND
4034: IFFALSE 4066
// begin disable ;
4036: DISABLE
// Say ( JMM , D7-JMM-1 ) ;
4037: LD_EXP 1
4041: PPUSH
4042: LD_STRING D7-JMM-1
4044: PPUSH
4045: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
4049: LD_STRING M4
4051: PPUSH
4052: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4056: LD_INT 5
4058: PPUSH
4059: LD_INT 0
4061: PPUSH
4062: CALL_OW 424
// end ; end ;
4066: PPOPN 2
4068: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4069: LD_INT 6
4071: PPUSH
4072: LD_INT 22
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 25
4084: PUSH
4085: LD_INT 4
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 70
4100: PUSH
4101: LD_INT 0
4103: GREATER
4104: PUSH
4105: LD_EXP 34
4109: PUSH
4110: LD_INT 1
4112: EQUAL
4113: AND
4114: PUSH
4115: LD_EXP 27
4119: PUSH
4120: LD_INT 0
4122: EQUAL
4123: AND
4124: IFFALSE 4189
4126: GO 4128
4128: DISABLE
// begin enable ;
4129: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4130: LD_ADDR_EXP 24
4134: PUSH
4135: LD_INT 6
4137: PPUSH
4138: LD_INT 22
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: LD_INT 25
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PPUSH
4162: CALL_OW 70
4166: PUSH
4167: LD_INT 1
4169: ARRAY
4170: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4171: LD_INT 6
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL_OW 424
// radationResearched = 1 ;
4181: LD_ADDR_EXP 27
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// end ;
4189: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4190: LD_EXP 24
4194: PPUSH
4195: CALL_OW 301
4199: PUSH
4200: LD_EXP 27
4204: PUSH
4205: LD_INT 1
4207: EQUAL
4208: AND
4209: IFFALSE 4245
4211: GO 4213
4213: DISABLE
// begin enable ;
4214: ENABLE
// radationResearched = 0 ;
4215: LD_ADDR_EXP 27
4219: PUSH
4220: LD_INT 0
4222: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4223: LD_INT 6
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4233: LD_EXP 1
4237: PPUSH
4238: LD_STRING D9a-JMM-1
4240: PPUSH
4241: CALL_OW 88
// end ; end_of_file
4245: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4246: LD_VAR 0 5
4250: PUSH
4251: LD_INT 8
4253: EQUAL
4254: PUSH
4255: LD_EXP 32
4259: PUSH
4260: LD_INT 0
4262: EQUAL
4263: AND
4264: IFFALSE 4298
// begin eventVar1 = 1 ;
4266: LD_ADDR_EXP 32
4270: PUSH
4271: LD_INT 1
4273: ST_TO_ADDR
// Say ( JMM , D6a-JMM-1 ) ;
4274: LD_EXP 1
4278: PPUSH
4279: LD_STRING D6a-JMM-1
4281: PPUSH
4282: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4286: LD_EXP 15
4290: PPUSH
4291: LD_STRING D6a-Pow-1
4293: PPUSH
4294: CALL_OW 94
// end ; end ;
4298: PPOPN 5
4300: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4301: LD_VAR 0 1
4305: PPUSH
4306: CALL_OW 264
4310: PUSH
4311: LD_INT 8
4313: EQUAL
4314: PUSH
4315: LD_EXP 33
4319: PUSH
4320: LD_INT 0
4322: EQUAL
4323: AND
4324: IFFALSE 4385
// begin eventVar2 = 1 ;
4326: LD_ADDR_EXP 33
4330: PUSH
4331: LD_INT 1
4333: ST_TO_ADDR
// Say ( JMM , D6b-JMM-1 ) ;
4334: LD_EXP 1
4338: PPUSH
4339: LD_STRING D6b-JMM-1
4341: PPUSH
4342: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4346: LD_EXP 15
4350: PPUSH
4351: LD_STRING D6b-Pow-1
4353: PPUSH
4354: CALL_OW 94
// SetAreaMapShow ( TestArea , 1 ) ;
4358: LD_INT 5
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4368: LD_INT 7
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4378: LD_STRING M3
4380: PPUSH
4381: CALL_OW 337
// end ; end ;
4385: PPOPN 2
4387: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
4388: LD_VAR 0 2
4392: PPUSH
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 5
4400: PPUSH
4401: CALL_OW 309
4405: PUSH
4406: LD_EXP 34
4410: PUSH
4411: LD_INT 0
4413: EQUAL
4414: AND
4415: IFFALSE 4602
// begin eventVar3 = 1 ;
4417: LD_ADDR_EXP 34
4421: PUSH
4422: LD_INT 1
4424: ST_TO_ADDR
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
4425: LD_INT 7
4427: PPUSH
4428: LD_INT 22
4430: PUSH
4431: LD_INT 1
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 21
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 34
4450: PUSH
4451: LD_INT 11
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 70
4467: PUSH
4468: LD_INT 0
4470: GREATER
4471: IFFALSE 4481
// radarOnSpot = 1 ;
4473: LD_ADDR_EXP 28
4477: PUSH
4478: LD_INT 1
4480: ST_TO_ADDR
// Say ( Stevens , D8-Huck-1 ) ;
4481: LD_EXP 2
4485: PPUSH
4486: LD_STRING D8-Huck-1
4488: PPUSH
4489: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
4493: LD_EXP 1
4497: PPUSH
4498: LD_STRING D8-JMM-1
4500: PPUSH
4501: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
4505: LD_EXP 2
4509: PPUSH
4510: LD_STRING D8-Huck-2
4512: PPUSH
4513: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
4517: LD_EXP 1
4521: PPUSH
4522: LD_STRING D8-JMM-2
4524: PPUSH
4525: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
4529: LD_EXP 2
4533: PPUSH
4534: LD_STRING D8-Huck-3
4536: PPUSH
4537: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
4541: LD_EXP 1
4545: PPUSH
4546: LD_STRING D8-JMM-3
4548: PPUSH
4549: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
4553: LD_EXP 2
4557: PPUSH
4558: LD_STRING D8-Huck-4
4560: PPUSH
4561: CALL_OW 88
// SetAreaMapShow ( TestArea , 0 ) ;
4565: LD_INT 5
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
4575: LD_INT 7
4577: PPUSH
4578: LD_INT 0
4580: PPUSH
4581: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4585: LD_INT 6
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
4595: LD_STRING M5
4597: PPUSH
4598: CALL_OW 337
// end ; end ;
4602: PPOPN 3
4604: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
4605: LD_EXP 24
4609: PPUSH
4610: CALL_OW 302
4614: PUSH
4615: LD_VAR 0 2
4619: PUSH
4620: LD_EXP 24
4624: EQUAL
4625: AND
4626: PUSH
4627: LD_EXP 35
4631: PUSH
4632: LD_INT 0
4634: EQUAL
4635: AND
4636: PUSH
4637: LD_VAR 0 1
4641: PPUSH
4642: LD_INT 1
4644: PPUSH
4645: CALL_OW 268
4649: PUSH
4650: LD_INT 11
4652: EQUAL
4653: AND
4654: PUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: LD_INT 2
4662: PPUSH
4663: CALL_OW 268
4667: PUSH
4668: LD_INT 11
4670: EQUAL
4671: OR
4672: IFFALSE 4682
// eventVar4 = 1 ;
4674: LD_ADDR_EXP 35
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// end ;
4682: PPOPN 2
4684: END
// on SibDepositContaminated ( unit , x , y ) do begin if GetNation ( unit ) = 2 then
4685: LD_VAR 0 1
4689: PPUSH
4690: CALL_OW 248
4694: PUSH
4695: LD_INT 2
4697: EQUAL
4698: IFFALSE 4824
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
4700: LD_ADDR_EXP 29
4704: PUSH
4705: LD_EXP 29
4709: PUSH
4710: LD_INT 1
4712: PLUS
4713: ST_TO_ADDR
// if eventVar5 = 0 then
4714: LD_EXP 36
4718: PUSH
4719: LD_INT 0
4721: EQUAL
4722: IFFALSE 4824
// begin eventVar5 = 1 ;
4724: LD_ADDR_EXP 36
4728: PUSH
4729: LD_INT 1
4731: ST_TO_ADDR
// DialogueOn ;
4732: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
4736: LD_EXP 2
4740: PPUSH
4741: LD_STRING D4-Sci1-1
4743: PPUSH
4744: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
4748: LD_EXP 1
4752: PPUSH
4753: LD_STRING D4-JMM-1
4755: PPUSH
4756: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
4760: LD_EXP 2
4764: PPUSH
4765: LD_STRING D4-Sci1-2
4767: PPUSH
4768: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4772: LD_EXP 1
4776: PPUSH
4777: LD_STRING D4-JMM-2
4779: PPUSH
4780: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
4784: LD_EXP 2
4788: PPUSH
4789: LD_STRING D4-Sci1-3
4791: PPUSH
4792: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
4796: LD_EXP 1
4800: PPUSH
4801: LD_STRING D4-JMM-3
4803: PPUSH
4804: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
4808: LD_EXP 1
4812: PPUSH
4813: LD_STRING D4-JMM-3a
4815: PPUSH
4816: CALL_OW 88
// DialogueOff ;
4820: CALL_OW 7
// end ; end ; end ;
4824: PPOPN 3
4826: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 then
4827: LD_VAR 0 1
4831: PPUSH
4832: CALL_OW 255
4836: PUSH
4837: LD_INT 1
4839: EQUAL
4840: PUSH
4841: LD_VAR 0 1
4845: PPUSH
4846: CALL_OW 266
4850: PUSH
4851: LD_INT 0
4853: EQUAL
4854: AND
4855: IFFALSE 4869
// SetBName ( building , omega ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: LD_STRING omega
4864: PPUSH
4865: CALL_OW 500
// end ; end_of_file
4869: PPOPN 2
4871: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4872: LD_INT 0
4874: PPUSH
4875: PPUSH
// if exist_mode then
4876: LD_VAR 0 2
4880: IFFALSE 4899
// unit := CreateCharacter ( ident ) else
4882: LD_ADDR_VAR 0 4
4886: PUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 34
4896: ST_TO_ADDR
4897: GO 4914
// unit := NewCharacter ( ident ) ;
4899: LD_ADDR_VAR 0 4
4903: PUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 25
4913: ST_TO_ADDR
// result := unit ;
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: LD_VAR 0 4
4923: ST_TO_ADDR
// end ;
4924: LD_VAR 0 3
4928: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4929: LD_INT 0
4931: PPUSH
4932: PPUSH
4933: PPUSH
// rnd = rand ( 1 , characters ) ;
4934: LD_ADDR_VAR 0 6
4938: PUSH
4939: LD_INT 1
4941: PPUSH
4942: LD_VAR 0 1
4946: PPUSH
4947: CALL_OW 12
4951: ST_TO_ADDR
// for i = 1 to characters do
4952: LD_ADDR_VAR 0 5
4956: PUSH
4957: DOUBLE
4958: LD_INT 1
4960: DEC
4961: ST_TO_ADDR
4962: LD_VAR 0 1
4966: PUSH
4967: FOR_TO
4968: IFFALSE 5078
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4970: LD_VAR 0 5
4974: PUSH
4975: LD_VAR 0 6
4979: EQUAL
4980: PUSH
4981: LD_VAR 0 1
4985: PUSH
4986: LD_VAR 0 5
4990: ARRAY
4991: PPUSH
4992: CALL_OW 258
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: AND
5001: IFFALSE 5023
// Say ( characters [ i ] , dialogMID ) ;
5003: LD_VAR 0 1
5007: PUSH
5008: LD_VAR 0 5
5012: ARRAY
5013: PPUSH
5014: LD_VAR 0 2
5018: PPUSH
5019: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5023: LD_VAR 0 5
5027: PUSH
5028: LD_VAR 0 6
5032: EQUAL
5033: PUSH
5034: LD_VAR 0 1
5038: PUSH
5039: LD_VAR 0 5
5043: ARRAY
5044: PPUSH
5045: CALL_OW 258
5049: PUSH
5050: LD_INT 2
5052: EQUAL
5053: AND
5054: IFFALSE 5076
// Say ( characters [ i ] , dialogFID ) ;
5056: LD_VAR 0 1
5060: PUSH
5061: LD_VAR 0 5
5065: ARRAY
5066: PPUSH
5067: LD_VAR 0 3
5071: PPUSH
5072: CALL_OW 88
// end ;
5076: GO 4967
5078: POP
5079: POP
// end ;
5080: LD_VAR 0 4
5084: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
5085: LD_INT 0
5087: PPUSH
5088: PPUSH
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
5093: LD_ADDR_VAR 0 7
5097: PUSH
5098: LD_INT 22
5100: PUSH
5101: LD_VAR 0 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 25
5112: PUSH
5113: LD_INT 9
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PPUSH
5124: CALL_OW 69
5128: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5129: LD_ADDR_VAR 0 8
5133: PUSH
5134: LD_INT 22
5136: PUSH
5137: LD_VAR 0 2
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: LD_INT 21
5151: PUSH
5152: LD_INT 3
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 69
5171: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
5172: LD_ADDR_VAR 0 5
5176: PUSH
5177: LD_INT 1
5179: PPUSH
5180: LD_INT 3
5182: PPUSH
5183: CALL_OW 12
5187: ST_TO_ADDR
// for i = 1 to list do
5188: LD_ADDR_VAR 0 6
5192: PUSH
5193: DOUBLE
5194: LD_INT 1
5196: DEC
5197: ST_TO_ADDR
5198: LD_VAR 0 7
5202: PUSH
5203: FOR_TO
5204: IFFALSE 5386
// for ta in filter do
5206: LD_ADDR_VAR 0 4
5210: PUSH
5211: LD_VAR 0 8
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5382
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
5219: LD_VAR 0 7
5223: PUSH
5224: LD_VAR 0 6
5228: ARRAY
5229: PPUSH
5230: LD_VAR 0 4
5234: PPUSH
5235: CALL_OW 296
5239: PUSH
5240: LD_INT 13
5242: LESSEQUAL
5243: IFFALSE 5380
// begin case c of 1 :
5245: LD_VAR 0 5
5249: PUSH
5250: LD_INT 1
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5296
5258: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
5259: LD_VAR 0 7
5263: PUSH
5264: LD_VAR 0 6
5268: ARRAY
5269: PPUSH
5270: LD_VAR 0 4
5274: PPUSH
5275: CALL_OW 250
5279: PPUSH
5280: LD_VAR 0 4
5284: PPUSH
5285: CALL_OW 251
5289: PPUSH
5290: CALL_OW 154
5294: GO 5380
5296: LD_INT 2
5298: DOUBLE
5299: EQUAL
5300: IFTRUE 5304
5302: GO 5368
5304: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
5305: LD_VAR 0 7
5309: PUSH
5310: LD_VAR 0 6
5314: ARRAY
5315: PPUSH
5316: LD_VAR 0 4
5320: PPUSH
5321: CALL_OW 250
5325: PUSH
5326: LD_INT 1
5328: NEG
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 12
5337: PLUS
5338: PPUSH
5339: LD_VAR 0 4
5343: PPUSH
5344: CALL_OW 251
5348: PUSH
5349: LD_INT 1
5351: NEG
5352: PPUSH
5353: LD_INT 1
5355: PPUSH
5356: CALL_OW 12
5360: PLUS
5361: PPUSH
5362: CALL_OW 153
5366: GO 5380
5368: LD_INT 3
5370: DOUBLE
5371: EQUAL
5372: IFTRUE 5376
5374: GO 5379
5376: POP
// ; end ;
5377: GO 5380
5379: POP
// end ; end ;
5380: GO 5216
5382: POP
5383: POP
5384: GO 5203
5386: POP
5387: POP
// end ;
5388: LD_VAR 0 3
5392: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
5393: LD_INT 0
5395: PPUSH
5396: PPUSH
5397: PPUSH
5398: PPUSH
5399: PPUSH
5400: PPUSH
5401: PPUSH
5402: PPUSH
5403: PPUSH
5404: PPUSH
5405: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5406: LD_ADDR_VAR 0 9
5410: PUSH
5411: LD_INT 22
5413: PUSH
5414: LD_VAR 0 1
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 21
5425: PUSH
5426: LD_INT 2
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PUSH
5433: LD_INT 33
5435: PUSH
5436: LD_INT 1
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: PUSH
5443: LD_INT 24
5445: PUSH
5446: LD_INT 660
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PUSH
5453: LD_INT 3
5455: PUSH
5456: LD_INT 58
5458: PUSH
5459: EMPTY
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: LD_INT 3
5468: PUSH
5469: LD_INT 34
5471: PUSH
5472: LD_INT 53
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
5496: LD_ADDR_VAR 0 10
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_VAR 0 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 2
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 33
5525: PUSH
5526: LD_INT 1
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 3
5535: PUSH
5536: LD_INT 24
5538: PUSH
5539: LD_INT 660
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 69
5560: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5561: LD_ADDR_VAR 0 11
5565: PUSH
5566: LD_VAR 0 2
5570: PPUSH
5571: LD_INT 22
5573: PUSH
5574: LD_VAR 0 1
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 21
5585: PUSH
5586: LD_INT 2
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PUSH
5593: LD_INT 33
5595: PUSH
5596: LD_INT 1
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 3
5605: PUSH
5606: LD_INT 24
5608: PUSH
5609: LD_INT 1000
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 70
5630: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
5631: LD_ADDR_VAR 0 12
5635: PUSH
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 22
5643: PUSH
5644: LD_VAR 0 1
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 21
5655: PUSH
5656: LD_INT 2
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 33
5665: PUSH
5666: LD_INT 1
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: LD_INT 24
5675: PUSH
5676: LD_INT 1000
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: LD_INT 58
5685: PUSH
5686: EMPTY
5687: LIST
5688: PUSH
5689: LD_INT 3
5691: PUSH
5692: LD_INT 34
5694: PUSH
5695: LD_INT 53
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 70
5718: ST_TO_ADDR
// mechanicInside_list = [ ] ;
5719: LD_ADDR_VAR 0 13
5723: PUSH
5724: EMPTY
5725: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
5726: LD_ADDR_VAR 0 14
5730: PUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_INT 22
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 25
5750: PUSH
5751: LD_INT 3
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PPUSH
5762: CALL_OW 70
5766: ST_TO_ADDR
// if damageVehicle_list > 0 then
5767: LD_VAR 0 10
5771: PUSH
5772: LD_INT 0
5774: GREATER
5775: IFFALSE 5813
// begin for i in damageVehicle_list do
5777: LD_ADDR_VAR 0 7
5781: PUSH
5782: LD_VAR 0 10
5786: PUSH
5787: FOR_IN
5788: IFFALSE 5811
// begin ComMoveXY ( i , repX , repY ) ;
5790: LD_VAR 0 7
5794: PPUSH
5795: LD_VAR 0 3
5799: PPUSH
5800: LD_VAR 0 4
5804: PPUSH
5805: CALL_OW 111
// end ;
5809: GO 5787
5811: POP
5812: POP
// end ; if vehicleNeedRepair_list > 0 then
5813: LD_VAR 0 11
5817: PUSH
5818: LD_INT 0
5820: GREATER
5821: IFFALSE 5908
// begin for i in vehicleNeedRepair_list do
5823: LD_ADDR_VAR 0 7
5827: PUSH
5828: LD_VAR 0 11
5832: PUSH
5833: FOR_IN
5834: IFFALSE 5906
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
5836: LD_ADDR_VAR 0 13
5840: PUSH
5841: LD_VAR 0 13
5845: PUSH
5846: LD_VAR 0 7
5850: PPUSH
5851: CALL_OW 313
5855: ADD
5856: ST_TO_ADDR
// for j in mechanicInside_list do
5857: LD_ADDR_VAR 0 8
5861: PUSH
5862: LD_VAR 0 13
5866: PUSH
5867: FOR_IN
5868: IFFALSE 5902
// begin ComExitVehicle ( i ) ;
5870: LD_VAR 0 7
5874: PPUSH
5875: CALL_OW 121
// wait ( 0 0$1 ) ;
5879: LD_INT 35
5881: PPUSH
5882: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
5886: LD_VAR 0 7
5890: PPUSH
5891: LD_VAR 0 8
5895: PPUSH
5896: CALL_OW 129
// end ;
5900: GO 5867
5902: POP
5903: POP
// end ;
5904: GO 5833
5906: POP
5907: POP
// end ; if vehicleDontNeedRepair_list > 0 then
5908: LD_VAR 0 12
5912: PUSH
5913: LD_INT 0
5915: GREATER
5916: IFFALSE 5956
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
5918: LD_VAR 0 14
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 12
5931: PUSH
5932: LD_INT 1
5934: ARRAY
5935: PPUSH
5936: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
5940: LD_VAR 0 12
5944: PUSH
5945: LD_INT 1
5947: ARRAY
5948: PPUSH
5949: LD_INT 100
5951: PPUSH
5952: CALL_OW 240
// end ; if vehicleOK_list > 0 then
5956: LD_VAR 0 9
5960: PUSH
5961: LD_INT 0
5963: GREATER
5964: IFFALSE 6155
// begin for i in vehicleOK_list do
5966: LD_ADDR_VAR 0 7
5970: PUSH
5971: LD_VAR 0 9
5975: PUSH
5976: FOR_IN
5977: IFFALSE 6153
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5979: LD_ADDR_VAR 0 15
5983: PUSH
5984: LD_INT 22
5986: PUSH
5987: LD_VAR 0 5
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: PPUSH
6001: LD_VAR 0 7
6005: PPUSH
6006: CALL_OW 74
6010: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6011: LD_ADDR_VAR 0 16
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_VAR 0 5
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: LD_INT 2
6030: PUSH
6031: LD_INT 59
6033: PUSH
6034: EMPTY
6035: LIST
6036: PUSH
6037: LD_INT 21
6039: PUSH
6040: LD_INT 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 21
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: PPUSH
6070: CALL_OW 69
6074: PPUSH
6075: LD_VAR 0 7
6079: PPUSH
6080: CALL_OW 74
6084: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6085: LD_VAR 0 7
6089: PPUSH
6090: LD_VAR 0 15
6094: PPUSH
6095: CALL_OW 296
6099: PUSH
6100: LD_INT 8
6102: PLUS
6103: PUSH
6104: LD_VAR 0 7
6108: PPUSH
6109: LD_VAR 0 16
6113: PPUSH
6114: CALL_OW 296
6118: LESS
6119: IFFALSE 6137
// begin ComAttackUnit ( i , target1 ) ;
6121: LD_VAR 0 7
6125: PPUSH
6126: LD_VAR 0 15
6130: PPUSH
6131: CALL_OW 115
// end else
6135: GO 6151
// begin ComAttackUnit ( i , target2 ) ;
6137: LD_VAR 0 7
6141: PPUSH
6142: LD_VAR 0 16
6146: PPUSH
6147: CALL_OW 115
// end ; end ;
6151: GO 5976
6153: POP
6154: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
6155: LD_ADDR_VAR 0 7
6159: PUSH
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_INT 22
6167: PUSH
6168: LD_VAR 0 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PPUSH
6191: CALL_OW 70
6195: NOT
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6221
// ComMoveXY ( i , repX , repY ) ;
6200: LD_VAR 0 7
6204: PPUSH
6205: LD_VAR 0 3
6209: PPUSH
6210: LD_VAR 0 4
6214: PPUSH
6215: CALL_OW 111
6219: GO 6197
6221: POP
6222: POP
// end ;
6223: LD_VAR 0 6
6227: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6228: LD_INT 0
6230: PPUSH
6231: PPUSH
6232: PPUSH
6233: PPUSH
6234: PPUSH
6235: PPUSH
6236: PPUSH
6237: PPUSH
6238: PPUSH
6239: PPUSH
6240: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
6241: LD_INT 2100
6243: PUSH
6244: LD_INT 3150
6246: PUSH
6247: LD_INT 4200
6249: PUSH
6250: LD_INT 5250
6252: PUSH
6253: LD_INT 6300
6255: PUSH
6256: LD_INT 7350
6258: PUSH
6259: LD_INT 8400
6261: PUSH
6262: LD_INT 9450
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 1
6277: PPUSH
6278: LD_INT 8
6280: PPUSH
6281: CALL_OW 12
6285: ARRAY
6286: PPUSH
6287: CALL_OW 67
// for i = 1 to medicCount do
6291: LD_ADDR_VAR 0 13
6295: PUSH
6296: DOUBLE
6297: LD_INT 1
6299: DEC
6300: ST_TO_ADDR
6301: LD_VAR 0 7
6305: PUSH
6306: FOR_TO
6307: IFFALSE 6389
// begin uc_side = side ;
6309: LD_ADDR_OWVAR 20
6313: PUSH
6314: LD_VAR 0 1
6318: ST_TO_ADDR
// uc_nation = nation ;
6319: LD_ADDR_OWVAR 21
6323: PUSH
6324: LD_VAR 0 2
6328: ST_TO_ADDR
// hc_name =  ;
6329: LD_ADDR_OWVAR 26
6333: PUSH
6334: LD_STRING 
6336: ST_TO_ADDR
// hc_gallery =  ;
6337: LD_ADDR_OWVAR 33
6341: PUSH
6342: LD_STRING 
6344: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6345: LD_INT 0
6347: PPUSH
6348: LD_INT 4
6350: PPUSH
6351: LD_VAR 0 8
6355: PPUSH
6356: CALL_OW 380
// un = CreateHuman ;
6360: LD_ADDR_VAR 0 15
6364: PUSH
6365: CALL_OW 44
6369: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6370: LD_VAR 0 15
6374: PPUSH
6375: LD_VAR 0 9
6379: PPUSH
6380: LD_INT 0
6382: PPUSH
6383: CALL_OW 49
// end ;
6387: GO 6306
6389: POP
6390: POP
// for i = 1 to soldierCount do
6391: LD_ADDR_VAR 0 13
6395: PUSH
6396: DOUBLE
6397: LD_INT 1
6399: DEC
6400: ST_TO_ADDR
6401: LD_VAR 0 3
6405: PUSH
6406: FOR_TO
6407: IFFALSE 6489
// begin uc_side = side ;
6409: LD_ADDR_OWVAR 20
6413: PUSH
6414: LD_VAR 0 1
6418: ST_TO_ADDR
// uc_nation = nation ;
6419: LD_ADDR_OWVAR 21
6423: PUSH
6424: LD_VAR 0 2
6428: ST_TO_ADDR
// hc_name =  ;
6429: LD_ADDR_OWVAR 26
6433: PUSH
6434: LD_STRING 
6436: ST_TO_ADDR
// hc_gallery =  ;
6437: LD_ADDR_OWVAR 33
6441: PUSH
6442: LD_STRING 
6444: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6445: LD_INT 0
6447: PPUSH
6448: LD_INT 1
6450: PPUSH
6451: LD_VAR 0 8
6455: PPUSH
6456: CALL_OW 380
// un = CreateHuman ;
6460: LD_ADDR_VAR 0 15
6464: PUSH
6465: CALL_OW 44
6469: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6470: LD_VAR 0 15
6474: PPUSH
6475: LD_VAR 0 9
6479: PPUSH
6480: LD_INT 0
6482: PPUSH
6483: CALL_OW 49
// end ;
6487: GO 6406
6489: POP
6490: POP
// for i = 1 to sniperCount do
6491: LD_ADDR_VAR 0 13
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_VAR 0 4
6505: PUSH
6506: FOR_TO
6507: IFFALSE 6589
// begin uc_side = side ;
6509: LD_ADDR_OWVAR 20
6513: PUSH
6514: LD_VAR 0 1
6518: ST_TO_ADDR
// uc_nation = nation ;
6519: LD_ADDR_OWVAR 21
6523: PUSH
6524: LD_VAR 0 2
6528: ST_TO_ADDR
// hc_name =  ;
6529: LD_ADDR_OWVAR 26
6533: PUSH
6534: LD_STRING 
6536: ST_TO_ADDR
// hc_gallery =  ;
6537: LD_ADDR_OWVAR 33
6541: PUSH
6542: LD_STRING 
6544: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6545: LD_INT 0
6547: PPUSH
6548: LD_INT 5
6550: PPUSH
6551: LD_VAR 0 8
6555: PPUSH
6556: CALL_OW 380
// un = CreateHuman ;
6560: LD_ADDR_VAR 0 15
6564: PUSH
6565: CALL_OW 44
6569: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6570: LD_VAR 0 15
6574: PPUSH
6575: LD_VAR 0 9
6579: PPUSH
6580: LD_INT 0
6582: PPUSH
6583: CALL_OW 49
// end ;
6587: GO 6506
6589: POP
6590: POP
// for i = 1 to bazookCount do
6591: LD_ADDR_VAR 0 13
6595: PUSH
6596: DOUBLE
6597: LD_INT 1
6599: DEC
6600: ST_TO_ADDR
6601: LD_VAR 0 5
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6689
// begin uc_side = side ;
6609: LD_ADDR_OWVAR 20
6613: PUSH
6614: LD_VAR 0 1
6618: ST_TO_ADDR
// uc_nation = nation ;
6619: LD_ADDR_OWVAR 21
6623: PUSH
6624: LD_VAR 0 2
6628: ST_TO_ADDR
// hc_name =  ;
6629: LD_ADDR_OWVAR 26
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hc_gallery =  ;
6637: LD_ADDR_OWVAR 33
6641: PUSH
6642: LD_STRING 
6644: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6645: LD_INT 0
6647: PPUSH
6648: LD_INT 9
6650: PPUSH
6651: LD_VAR 0 8
6655: PPUSH
6656: CALL_OW 380
// un = CreateHuman ;
6660: LD_ADDR_VAR 0 15
6664: PUSH
6665: CALL_OW 44
6669: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6670: LD_VAR 0 15
6674: PPUSH
6675: LD_VAR 0 9
6679: PPUSH
6680: LD_INT 0
6682: PPUSH
6683: CALL_OW 49
// end ;
6687: GO 6606
6689: POP
6690: POP
// for i = 1 to mortalCount do
6691: LD_ADDR_VAR 0 13
6695: PUSH
6696: DOUBLE
6697: LD_INT 1
6699: DEC
6700: ST_TO_ADDR
6701: LD_VAR 0 6
6705: PUSH
6706: FOR_TO
6707: IFFALSE 6789
// begin uc_side = side ;
6709: LD_ADDR_OWVAR 20
6713: PUSH
6714: LD_VAR 0 1
6718: ST_TO_ADDR
// uc_nation = nation ;
6719: LD_ADDR_OWVAR 21
6723: PUSH
6724: LD_VAR 0 2
6728: ST_TO_ADDR
// hc_name =  ;
6729: LD_ADDR_OWVAR 26
6733: PUSH
6734: LD_STRING 
6736: ST_TO_ADDR
// hc_gallery =  ;
6737: LD_ADDR_OWVAR 33
6741: PUSH
6742: LD_STRING 
6744: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6745: LD_INT 0
6747: PPUSH
6748: LD_INT 8
6750: PPUSH
6751: LD_VAR 0 8
6755: PPUSH
6756: CALL_OW 380
// un = CreateHuman ;
6760: LD_ADDR_VAR 0 15
6764: PUSH
6765: CALL_OW 44
6769: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6770: LD_VAR 0 15
6774: PPUSH
6775: LD_VAR 0 9
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 49
// end ;
6787: GO 6706
6789: POP
6790: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6791: LD_ADDR_VAR 0 17
6795: PUSH
6796: LD_INT 22
6798: PUSH
6799: LD_VAR 0 1
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 25
6810: PUSH
6811: LD_INT 4
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// for i in medic_list do
6827: LD_ADDR_VAR 0 13
6831: PUSH
6832: LD_VAR 0 17
6836: PUSH
6837: FOR_IN
6838: IFFALSE 6856
// ComMoveToArea ( i , healArea ) ;
6840: LD_VAR 0 13
6844: PPUSH
6845: LD_VAR 0 10
6849: PPUSH
6850: CALL_OW 113
6854: GO 6837
6856: POP
6857: POP
// repeat wait ( 0 0$1 ) ;
6858: LD_INT 35
6860: PPUSH
6861: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6865: LD_ADDR_VAR 0 16
6869: PUSH
6870: LD_INT 22
6872: PUSH
6873: LD_VAR 0 1
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: PUSH
6882: LD_INT 1
6884: PUSH
6885: LD_INT 3
6887: PUSH
6888: LD_INT 24
6890: PUSH
6891: LD_INT 550
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 24
6904: PUSH
6905: LD_INT 250
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: LIST
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PPUSH
6921: CALL_OW 69
6925: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6926: LD_ADDR_VAR 0 18
6930: PUSH
6931: LD_INT 22
6933: PUSH
6934: LD_VAR 0 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 2
6945: PUSH
6946: LD_INT 25
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 25
6958: PUSH
6959: LD_INT 5
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: PUSH
6966: LD_INT 25
6968: PUSH
6969: LD_INT 8
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: PUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 9
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 24
6995: PUSH
6996: LD_INT 1000
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: LIST
7007: PPUSH
7008: CALL_OW 69
7012: ST_TO_ADDR
// if medicCount > 0 then
7013: LD_VAR 0 7
7017: PUSH
7018: LD_INT 0
7020: GREATER
7021: IFFALSE 7095
// begin if damageUnit_list > 0 then
7023: LD_VAR 0 16
7027: PUSH
7028: LD_INT 0
7030: GREATER
7031: IFFALSE 7095
// begin for i in damageUnit_list do
7033: LD_ADDR_VAR 0 13
7037: PUSH
7038: LD_VAR 0 16
7042: PUSH
7043: FOR_IN
7044: IFFALSE 7093
// begin ComMoveToArea ( i , healArea ) ;
7046: LD_VAR 0 13
7050: PPUSH
7051: LD_VAR 0 10
7055: PPUSH
7056: CALL_OW 113
// for j in medic_list do
7060: LD_ADDR_VAR 0 14
7064: PUSH
7065: LD_VAR 0 17
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7089
// AddComHeal ( j , i ) ;
7073: LD_VAR 0 14
7077: PPUSH
7078: LD_VAR 0 13
7082: PPUSH
7083: CALL_OW 188
7087: GO 7070
7089: POP
7090: POP
// end ;
7091: GO 7043
7093: POP
7094: POP
// end ; end ; for i in soldiersOK_list do
7095: LD_ADDR_VAR 0 13
7099: PUSH
7100: LD_VAR 0 18
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7282
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7108: LD_ADDR_VAR 0 21
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_VAR 0 11
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PPUSH
7130: LD_VAR 0 13
7134: PPUSH
7135: CALL_OW 74
7139: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7140: LD_ADDR_VAR 0 22
7144: PUSH
7145: LD_INT 22
7147: PUSH
7148: LD_VAR 0 11
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 59
7162: PUSH
7163: EMPTY
7164: LIST
7165: PUSH
7166: LD_INT 21
7168: PUSH
7169: LD_INT 1
7171: PUSH
7172: EMPTY
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 21
7178: PUSH
7179: LD_INT 2
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PPUSH
7204: LD_VAR 0 13
7208: PPUSH
7209: CALL_OW 74
7213: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7214: LD_VAR 0 13
7218: PPUSH
7219: LD_VAR 0 21
7223: PPUSH
7224: CALL_OW 296
7228: PUSH
7229: LD_INT 8
7231: PLUS
7232: PUSH
7233: LD_VAR 0 13
7237: PPUSH
7238: LD_VAR 0 22
7242: PPUSH
7243: CALL_OW 296
7247: LESS
7248: IFFALSE 7266
// begin ComAttackUnit ( i , target1 ) ;
7250: LD_VAR 0 13
7254: PPUSH
7255: LD_VAR 0 21
7259: PPUSH
7260: CALL_OW 115
// end else
7264: GO 7280
// begin ComAttackUnit ( i , target2 ) ;
7266: LD_VAR 0 13
7270: PPUSH
7271: LD_VAR 0 22
7275: PPUSH
7276: CALL_OW 115
// end ; end ;
7280: GO 7105
7282: POP
7283: POP
// for i in soldiersOK_list do
7284: LD_ADDR_VAR 0 13
7288: PUSH
7289: LD_VAR 0 18
7293: PUSH
7294: FOR_IN
7295: IFFALSE 7471
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7297: LD_ADDR_VAR 0 21
7301: PUSH
7302: LD_INT 22
7304: PUSH
7305: LD_VAR 0 11
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PPUSH
7314: CALL_OW 69
7318: PPUSH
7319: LD_VAR 0 13
7323: PPUSH
7324: CALL_OW 74
7328: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7329: LD_ADDR_VAR 0 22
7333: PUSH
7334: LD_INT 22
7336: PUSH
7337: LD_VAR 0 11
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 59
7351: PUSH
7352: EMPTY
7353: LIST
7354: PUSH
7355: LD_INT 21
7357: PUSH
7358: LD_INT 1
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 21
7367: PUSH
7368: LD_INT 2
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: PPUSH
7388: CALL_OW 69
7392: PPUSH
7393: LD_VAR 0 13
7397: PPUSH
7398: CALL_OW 74
7402: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7403: LD_VAR 0 13
7407: PPUSH
7408: LD_VAR 0 21
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 8
7420: PLUS
7421: PUSH
7422: LD_VAR 0 13
7426: PPUSH
7427: LD_VAR 0 22
7431: PPUSH
7432: CALL_OW 296
7436: LESS
7437: IFFALSE 7455
// begin ComAttackUnit ( i , target1 ) ;
7439: LD_VAR 0 13
7443: PPUSH
7444: LD_VAR 0 21
7448: PPUSH
7449: CALL_OW 115
// end else
7453: GO 7469
// begin ComAttackUnit ( i , target2 ) ;
7455: LD_VAR 0 13
7459: PPUSH
7460: LD_VAR 0 22
7464: PPUSH
7465: CALL_OW 115
// end ; end ;
7469: GO 7294
7471: POP
7472: POP
// until soldiersOK_list = [ ] ;
7473: LD_VAR 0 18
7477: PUSH
7478: EMPTY
7479: EQUAL
7480: IFFALSE 6858
// end ;
7482: LD_VAR 0 12
7486: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7487: LD_INT 0
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
7494: PPUSH
7495: PPUSH
7496: PPUSH
7497: PPUSH
7498: PPUSH
7499: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7500: LD_INT 2100
7502: PUSH
7503: LD_INT 3150
7505: PUSH
7506: LD_INT 4200
7508: PUSH
7509: LD_INT 5250
7511: PUSH
7512: LD_INT 6300
7514: PUSH
7515: LD_INT 7350
7517: PUSH
7518: LD_INT 8400
7520: PUSH
7521: LD_INT 9450
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 1
7536: PPUSH
7537: LD_INT 8
7539: PPUSH
7540: CALL_OW 12
7544: ARRAY
7545: PPUSH
7546: CALL_OW 67
// amChassisTab = [ ] ;
7550: LD_ADDR_VAR 0 19
7554: PUSH
7555: EMPTY
7556: ST_TO_ADDR
// arChassisTab = [ ] ;
7557: LD_ADDR_VAR 0 18
7561: PUSH
7562: EMPTY
7563: ST_TO_ADDR
// ruChassisTab = [ ] ;
7564: LD_ADDR_VAR 0 17
7568: PUSH
7569: EMPTY
7570: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7571: LD_INT 35
7573: PPUSH
7574: CALL_OW 67
// if nation = 1 then
7578: LD_VAR 0 5
7582: PUSH
7583: LD_INT 1
7585: EQUAL
7586: IFFALSE 8091
// begin uc_side = side ;
7588: LD_ADDR_OWVAR 20
7592: PUSH
7593: LD_VAR 0 2
7597: ST_TO_ADDR
// uc_nation = nation ;
7598: LD_ADDR_OWVAR 21
7602: PUSH
7603: LD_VAR 0 5
7607: ST_TO_ADDR
// vc_engine = vehengine ;
7608: LD_ADDR_OWVAR 39
7612: PUSH
7613: LD_VAR 0 6
7617: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
7618: LD_ADDR_OWVAR 38
7622: PUSH
7623: LD_VAR 0 7
7627: PUSH
7628: LD_INT 1
7630: PPUSH
7631: LD_VAR 0 7
7635: PPUSH
7636: CALL_OW 12
7640: ARRAY
7641: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7642: LD_ADDR_OWVAR 40
7646: PUSH
7647: LD_VAR 0 10
7651: PUSH
7652: LD_INT 1
7654: PPUSH
7655: LD_VAR 0 10
7659: PPUSH
7660: CALL_OW 12
7664: ARRAY
7665: ST_TO_ADDR
// for j = 1 to AMWeapon do
7666: LD_ADDR_VAR 0 14
7670: PUSH
7671: DOUBLE
7672: LD_INT 1
7674: DEC
7675: ST_TO_ADDR
7676: LD_VAR 0 10
7680: PUSH
7681: FOR_TO
7682: IFFALSE 7983
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7684: LD_VAR 0 10
7688: PUSH
7689: LD_VAR 0 14
7693: ARRAY
7694: PUSH
7695: LD_INT 2
7697: EQUAL
7698: PUSH
7699: LD_VAR 0 10
7703: PUSH
7704: LD_VAR 0 14
7708: ARRAY
7709: PUSH
7710: LD_INT 3
7712: EQUAL
7713: OR
7714: IFFALSE 7767
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7716: LD_ADDR_VAR 0 19
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: LD_INT 4
7732: PUSH
7733: LD_INT 5
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7743: LD_ADDR_OWVAR 37
7747: PUSH
7748: LD_VAR 0 19
7752: PUSH
7753: LD_INT 1
7755: PPUSH
7756: LD_VAR 0 19
7760: PPUSH
7761: CALL_OW 12
7765: ARRAY
7766: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7767: LD_VAR 0 10
7771: PUSH
7772: LD_VAR 0 14
7776: ARRAY
7777: PUSH
7778: LD_INT 4
7780: EQUAL
7781: PUSH
7782: LD_VAR 0 10
7786: PUSH
7787: LD_VAR 0 14
7791: ARRAY
7792: PUSH
7793: LD_INT 5
7795: EQUAL
7796: OR
7797: PUSH
7798: LD_VAR 0 10
7802: PUSH
7803: LD_VAR 0 14
7807: ARRAY
7808: PUSH
7809: LD_INT 9
7811: EQUAL
7812: OR
7813: PUSH
7814: LD_VAR 0 10
7818: PUSH
7819: LD_VAR 0 14
7823: ARRAY
7824: PUSH
7825: LD_INT 11
7827: EQUAL
7828: OR
7829: PUSH
7830: LD_VAR 0 10
7834: PUSH
7835: LD_VAR 0 14
7839: ARRAY
7840: PUSH
7841: LD_INT 7
7843: EQUAL
7844: OR
7845: IFFALSE 7894
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7847: LD_ADDR_VAR 0 19
7851: PUSH
7852: LD_INT 2
7854: PUSH
7855: LD_INT 3
7857: PUSH
7858: LD_INT 4
7860: PUSH
7861: LD_INT 5
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7870: LD_ADDR_OWVAR 37
7874: PUSH
7875: LD_VAR 0 19
7879: PUSH
7880: LD_INT 1
7882: PPUSH
7883: LD_VAR 0 19
7887: PPUSH
7888: CALL_OW 12
7892: ARRAY
7893: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7894: LD_VAR 0 10
7898: PUSH
7899: LD_VAR 0 14
7903: ARRAY
7904: PUSH
7905: LD_INT 8
7907: EQUAL
7908: PUSH
7909: LD_VAR 0 10
7913: PUSH
7914: LD_VAR 0 14
7918: ARRAY
7919: PUSH
7920: LD_INT 6
7922: EQUAL
7923: OR
7924: PUSH
7925: LD_VAR 0 10
7929: PUSH
7930: LD_VAR 0 14
7934: ARRAY
7935: PUSH
7936: LD_INT 10
7938: EQUAL
7939: OR
7940: IFFALSE 7981
// begin amChassisTab = [ 4 , 5 ] ;
7942: LD_ADDR_VAR 0 19
7946: PUSH
7947: LD_INT 4
7949: PUSH
7950: LD_INT 5
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7957: LD_ADDR_OWVAR 37
7961: PUSH
7962: LD_VAR 0 19
7966: PUSH
7967: LD_INT 1
7969: PPUSH
7970: LD_VAR 0 19
7974: PPUSH
7975: CALL_OW 12
7979: ARRAY
7980: ST_TO_ADDR
// end ; end ;
7981: GO 7681
7983: POP
7984: POP
// veh = CreateVehicle ;
7985: LD_ADDR_VAR 0 16
7989: PUSH
7990: CALL_OW 45
7994: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
7995: LD_VAR 0 16
7999: PPUSH
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 0
8007: PPUSH
8008: CALL_OW 49
// if vc_control = 1 then
8012: LD_OWVAR 38
8016: PUSH
8017: LD_INT 1
8019: EQUAL
8020: IFFALSE 8077
// begin hc_gallery =  ;
8022: LD_ADDR_OWVAR 33
8026: PUSH
8027: LD_STRING 
8029: ST_TO_ADDR
// hc_name =  ;
8030: LD_ADDR_OWVAR 26
8034: PUSH
8035: LD_STRING 
8037: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8038: LD_INT 0
8040: PPUSH
8041: LD_INT 3
8043: PPUSH
8044: LD_VAR 0 4
8048: PPUSH
8049: CALL_OW 380
// un = CreateHuman ;
8053: LD_ADDR_VAR 0 15
8057: PUSH
8058: CALL_OW 44
8062: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8063: LD_VAR 0 15
8067: PPUSH
8068: LD_VAR 0 16
8072: PPUSH
8073: CALL_OW 52
// end ; i = i + 1 ;
8077: LD_ADDR_VAR 0 13
8081: PUSH
8082: LD_VAR 0 13
8086: PUSH
8087: LD_INT 1
8089: PLUS
8090: ST_TO_ADDR
// end ; if nation = 2 then
8091: LD_VAR 0 5
8095: PUSH
8096: LD_INT 2
8098: EQUAL
8099: IFFALSE 8537
// begin uc_side = side ;
8101: LD_ADDR_OWVAR 20
8105: PUSH
8106: LD_VAR 0 2
8110: ST_TO_ADDR
// uc_nation = nation ;
8111: LD_ADDR_OWVAR 21
8115: PUSH
8116: LD_VAR 0 5
8120: ST_TO_ADDR
// vc_engine = vehengine ;
8121: LD_ADDR_OWVAR 39
8125: PUSH
8126: LD_VAR 0 6
8130: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8131: LD_ADDR_OWVAR 38
8135: PUSH
8136: LD_VAR 0 7
8140: PUSH
8141: LD_INT 1
8143: PPUSH
8144: LD_VAR 0 7
8148: PPUSH
8149: CALL_OW 12
8153: ARRAY
8154: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8155: LD_ADDR_OWVAR 40
8159: PUSH
8160: LD_VAR 0 9
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_VAR 0 9
8172: PPUSH
8173: CALL_OW 12
8177: ARRAY
8178: ST_TO_ADDR
// for j = 1 to ARWeapons do
8179: LD_ADDR_VAR 0 14
8183: PUSH
8184: DOUBLE
8185: LD_INT 1
8187: DEC
8188: ST_TO_ADDR
8189: LD_VAR 0 9
8193: PUSH
8194: FOR_TO
8195: IFFALSE 8429
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8197: LD_VAR 0 9
8201: PUSH
8202: LD_VAR 0 14
8206: ARRAY
8207: PUSH
8208: LD_INT 24
8210: EQUAL
8211: PUSH
8212: LD_VAR 0 9
8216: PUSH
8217: LD_VAR 0 14
8221: ARRAY
8222: PUSH
8223: LD_INT 22
8225: EQUAL
8226: OR
8227: PUSH
8228: LD_VAR 0 9
8232: PUSH
8233: LD_VAR 0 14
8237: ARRAY
8238: PUSH
8239: LD_INT 23
8241: EQUAL
8242: OR
8243: PUSH
8244: LD_VAR 0 9
8248: PUSH
8249: LD_VAR 0 14
8253: ARRAY
8254: PUSH
8255: LD_INT 30
8257: EQUAL
8258: OR
8259: IFFALSE 8308
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8261: LD_ADDR_VAR 0 18
8265: PUSH
8266: LD_INT 11
8268: PUSH
8269: LD_INT 12
8271: PUSH
8272: LD_INT 13
8274: PUSH
8275: LD_INT 14
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8284: LD_ADDR_OWVAR 37
8288: PUSH
8289: LD_VAR 0 18
8293: PUSH
8294: LD_INT 1
8296: PPUSH
8297: LD_VAR 0 18
8301: PPUSH
8302: CALL_OW 12
8306: ARRAY
8307: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8308: LD_VAR 0 9
8312: PUSH
8313: LD_VAR 0 14
8317: ARRAY
8318: PUSH
8319: LD_INT 29
8321: EQUAL
8322: PUSH
8323: LD_VAR 0 9
8327: PUSH
8328: LD_VAR 0 14
8332: ARRAY
8333: PUSH
8334: LD_INT 28
8336: EQUAL
8337: OR
8338: PUSH
8339: LD_VAR 0 9
8343: PUSH
8344: LD_VAR 0 14
8348: ARRAY
8349: PUSH
8350: LD_INT 27
8352: EQUAL
8353: OR
8354: PUSH
8355: LD_VAR 0 9
8359: PUSH
8360: LD_VAR 0 14
8364: ARRAY
8365: PUSH
8366: LD_INT 26
8368: EQUAL
8369: OR
8370: PUSH
8371: LD_VAR 0 9
8375: PUSH
8376: LD_VAR 0 14
8380: ARRAY
8381: PUSH
8382: LD_INT 25
8384: EQUAL
8385: OR
8386: IFFALSE 8427
// begin arChassisTab = [ 13 , 14 ] ;
8388: LD_ADDR_VAR 0 18
8392: PUSH
8393: LD_INT 13
8395: PUSH
8396: LD_INT 14
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8403: LD_ADDR_OWVAR 37
8407: PUSH
8408: LD_VAR 0 18
8412: PUSH
8413: LD_INT 1
8415: PPUSH
8416: LD_VAR 0 18
8420: PPUSH
8421: CALL_OW 12
8425: ARRAY
8426: ST_TO_ADDR
// end ; end ;
8427: GO 8194
8429: POP
8430: POP
// veh = CreateVehicle ;
8431: LD_ADDR_VAR 0 16
8435: PUSH
8436: CALL_OW 45
8440: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8441: LD_VAR 0 16
8445: PPUSH
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 0
8453: PPUSH
8454: CALL_OW 49
// if vc_control = 1 then
8458: LD_OWVAR 38
8462: PUSH
8463: LD_INT 1
8465: EQUAL
8466: IFFALSE 8523
// begin hc_gallery =  ;
8468: LD_ADDR_OWVAR 33
8472: PUSH
8473: LD_STRING 
8475: ST_TO_ADDR
// hc_name =  ;
8476: LD_ADDR_OWVAR 26
8480: PUSH
8481: LD_STRING 
8483: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8484: LD_INT 0
8486: PPUSH
8487: LD_INT 3
8489: PPUSH
8490: LD_VAR 0 4
8494: PPUSH
8495: CALL_OW 380
// un = CreateHuman ;
8499: LD_ADDR_VAR 0 15
8503: PUSH
8504: CALL_OW 44
8508: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8509: LD_VAR 0 15
8513: PPUSH
8514: LD_VAR 0 16
8518: PPUSH
8519: CALL_OW 52
// end ; i = i + 1 ;
8523: LD_ADDR_VAR 0 13
8527: PUSH
8528: LD_VAR 0 13
8532: PUSH
8533: LD_INT 1
8535: PLUS
8536: ST_TO_ADDR
// end ; if nation = 3 then
8537: LD_VAR 0 5
8541: PUSH
8542: LD_INT 3
8544: EQUAL
8545: IFFALSE 8951
// begin uc_side = side ;
8547: LD_ADDR_OWVAR 20
8551: PUSH
8552: LD_VAR 0 2
8556: ST_TO_ADDR
// uc_nation = nation ;
8557: LD_ADDR_OWVAR 21
8561: PUSH
8562: LD_VAR 0 5
8566: ST_TO_ADDR
// vc_engine = vehengine ;
8567: LD_ADDR_OWVAR 39
8571: PUSH
8572: LD_VAR 0 6
8576: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8577: LD_ADDR_OWVAR 38
8581: PUSH
8582: LD_VAR 0 7
8586: PUSH
8587: LD_INT 1
8589: PPUSH
8590: LD_VAR 0 7
8594: PPUSH
8595: CALL_OW 12
8599: ARRAY
8600: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8601: LD_ADDR_OWVAR 40
8605: PUSH
8606: LD_VAR 0 8
8610: PUSH
8611: LD_INT 1
8613: PPUSH
8614: LD_VAR 0 8
8618: PPUSH
8619: CALL_OW 12
8623: ARRAY
8624: ST_TO_ADDR
// for j = 1 to RuWeapons do
8625: LD_ADDR_VAR 0 14
8629: PUSH
8630: DOUBLE
8631: LD_INT 1
8633: DEC
8634: ST_TO_ADDR
8635: LD_VAR 0 8
8639: PUSH
8640: FOR_TO
8641: IFFALSE 8843
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8643: LD_VAR 0 8
8647: PUSH
8648: LD_VAR 0 14
8652: ARRAY
8653: PUSH
8654: LD_INT 42
8656: EQUAL
8657: PUSH
8658: LD_VAR 0 8
8662: PUSH
8663: LD_VAR 0 14
8667: ARRAY
8668: PUSH
8669: LD_INT 43
8671: EQUAL
8672: OR
8673: PUSH
8674: LD_VAR 0 8
8678: PUSH
8679: LD_VAR 0 14
8683: ARRAY
8684: PUSH
8685: LD_INT 44
8687: EQUAL
8688: OR
8689: PUSH
8690: LD_VAR 0 8
8694: PUSH
8695: LD_VAR 0 14
8699: ARRAY
8700: PUSH
8701: LD_INT 45
8703: EQUAL
8704: OR
8705: PUSH
8706: LD_VAR 0 8
8710: PUSH
8711: LD_VAR 0 14
8715: ARRAY
8716: PUSH
8717: LD_INT 49
8719: EQUAL
8720: OR
8721: IFFALSE 8770
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8723: LD_ADDR_VAR 0 17
8727: PUSH
8728: LD_INT 21
8730: PUSH
8731: LD_INT 22
8733: PUSH
8734: LD_INT 23
8736: PUSH
8737: LD_INT 24
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8746: LD_ADDR_OWVAR 37
8750: PUSH
8751: LD_VAR 0 17
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: LD_VAR 0 17
8763: PPUSH
8764: CALL_OW 12
8768: ARRAY
8769: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8770: LD_VAR 0 8
8774: PUSH
8775: LD_VAR 0 14
8779: ARRAY
8780: PUSH
8781: LD_INT 46
8783: EQUAL
8784: PUSH
8785: LD_VAR 0 8
8789: PUSH
8790: LD_VAR 0 14
8794: ARRAY
8795: PUSH
8796: LD_INT 47
8798: EQUAL
8799: OR
8800: IFFALSE 8841
// begin ruChassisTab = [ 23 , 24 ] ;
8802: LD_ADDR_VAR 0 17
8806: PUSH
8807: LD_INT 23
8809: PUSH
8810: LD_INT 24
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8817: LD_ADDR_OWVAR 37
8821: PUSH
8822: LD_VAR 0 17
8826: PUSH
8827: LD_INT 1
8829: PPUSH
8830: LD_VAR 0 17
8834: PPUSH
8835: CALL_OW 12
8839: ARRAY
8840: ST_TO_ADDR
// end ; end ;
8841: GO 8640
8843: POP
8844: POP
// veh = CreateVehicle ;
8845: LD_ADDR_VAR 0 16
8849: PUSH
8850: CALL_OW 45
8854: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8855: LD_VAR 0 16
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 49
// if vc_control = 1 then
8872: LD_OWVAR 38
8876: PUSH
8877: LD_INT 1
8879: EQUAL
8880: IFFALSE 8937
// begin hc_gallery =  ;
8882: LD_ADDR_OWVAR 33
8886: PUSH
8887: LD_STRING 
8889: ST_TO_ADDR
// hc_name =  ;
8890: LD_ADDR_OWVAR 26
8894: PUSH
8895: LD_STRING 
8897: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8898: LD_INT 0
8900: PPUSH
8901: LD_INT 3
8903: PPUSH
8904: LD_VAR 0 4
8908: PPUSH
8909: CALL_OW 380
// un = CreateHuman ;
8913: LD_ADDR_VAR 0 15
8917: PUSH
8918: CALL_OW 44
8922: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8923: LD_VAR 0 15
8927: PPUSH
8928: LD_VAR 0 16
8932: PPUSH
8933: CALL_OW 52
// end ; i = i + 1 ;
8937: LD_ADDR_VAR 0 13
8941: PUSH
8942: LD_VAR 0 13
8946: PUSH
8947: LD_INT 1
8949: PLUS
8950: ST_TO_ADDR
// end ; until i = vehCount ;
8951: LD_VAR 0 13
8955: PUSH
8956: LD_VAR 0 3
8960: EQUAL
8961: IFFALSE 7571
// repeat wait ( 0 0$1 ) ;
8963: LD_INT 35
8965: PPUSH
8966: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
8970: LD_ADDR_VAR 0 20
8974: PUSH
8975: LD_INT 22
8977: PUSH
8978: LD_VAR 0 2
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PUSH
8987: LD_INT 21
8989: PUSH
8990: LD_INT 2
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 24
8999: PUSH
9000: LD_INT 661
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: ST_TO_ADDR
// if vehicleOK_list > 0 then
9017: LD_VAR 0 20
9021: PUSH
9022: LD_INT 0
9024: GREATER
9025: IFFALSE 9216
// begin for i in vehicleOK_list do
9027: LD_ADDR_VAR 0 13
9031: PUSH
9032: LD_VAR 0 20
9036: PUSH
9037: FOR_IN
9038: IFFALSE 9214
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9040: LD_ADDR_VAR 0 21
9044: PUSH
9045: LD_INT 22
9047: PUSH
9048: LD_VAR 0 11
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: PPUSH
9057: CALL_OW 69
9061: PPUSH
9062: LD_VAR 0 13
9066: PPUSH
9067: CALL_OW 74
9071: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9072: LD_ADDR_VAR 0 22
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_VAR 0 11
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: LD_INT 2
9091: PUSH
9092: LD_INT 59
9094: PUSH
9095: EMPTY
9096: LIST
9097: PUSH
9098: LD_INT 21
9100: PUSH
9101: LD_INT 1
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 21
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: PPUSH
9136: LD_VAR 0 13
9140: PPUSH
9141: CALL_OW 74
9145: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9146: LD_VAR 0 13
9150: PPUSH
9151: LD_VAR 0 21
9155: PPUSH
9156: CALL_OW 296
9160: PUSH
9161: LD_INT 8
9163: PLUS
9164: PUSH
9165: LD_VAR 0 13
9169: PPUSH
9170: LD_VAR 0 22
9174: PPUSH
9175: CALL_OW 296
9179: LESS
9180: IFFALSE 9198
// begin ComAttackUnit ( i , target1 ) ;
9182: LD_VAR 0 13
9186: PPUSH
9187: LD_VAR 0 21
9191: PPUSH
9192: CALL_OW 115
// end else
9196: GO 9212
// begin ComAttackUnit ( i , target2 ) ;
9198: LD_VAR 0 13
9202: PPUSH
9203: LD_VAR 0 22
9207: PPUSH
9208: CALL_OW 115
// end ; end ;
9212: GO 9037
9214: POP
9215: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] , [ f_not , 31 ] ] ) = 0 ;
9216: LD_INT 22
9218: PUSH
9219: LD_VAR 0 2
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 21
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 24
9240: PUSH
9241: LD_INT 250
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 59
9250: PUSH
9251: EMPTY
9252: LIST
9253: PUSH
9254: LD_INT 3
9256: PUSH
9257: LD_INT 31
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: PPUSH
9271: CALL_OW 69
9275: PUSH
9276: LD_INT 0
9278: EQUAL
9279: IFFALSE 8963
// end ; end_of_file
9281: LD_VAR 0 12
9285: RET
// every 0 0$1 do
9286: GO 9288
9288: DISABLE
// begin enable ;
9289: ENABLE
// IntBazooka ( 7 , 1 ) ;
9290: LD_INT 7
9292: PPUSH
9293: LD_INT 1
9295: PPUSH
9296: CALL 5085 0 2
// RepairVehicle ( 8 , ArabianRepairArea , 86 , 49 , 1 ) ;
9300: LD_INT 8
9302: PPUSH
9303: LD_INT 14
9305: PPUSH
9306: LD_INT 86
9308: PPUSH
9309: LD_INT 49
9311: PPUSH
9312: LD_INT 1
9314: PPUSH
9315: CALL 5393 0 5
// end ; end_of_file
9319: END
// every 0 0$1 trigger eventVar4 = 1 do
9320: LD_EXP 35
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: IFFALSE 9515
9330: GO 9332
9332: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
9333: LD_EXP 1
9337: PPUSH
9338: LD_STRING D9b-JMM-1
9340: PPUSH
9341: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9345: LD_EXP 15
9349: PPUSH
9350: LD_STRING D9b-Pow-1
9352: PPUSH
9353: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9357: LD_EXP 1
9361: PPUSH
9362: LD_STRING D9b-JMM-2
9364: PPUSH
9365: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9369: LD_EXP 15
9373: PPUSH
9374: LD_STRING D9b-Pow-2
9376: PPUSH
9377: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9381: LD_EXP 1
9385: PPUSH
9386: LD_STRING D9b-JMM-3
9388: PPUSH
9389: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9393: LD_EXP 15
9397: PPUSH
9398: LD_STRING D9b-Pow-3
9400: PPUSH
9401: CALL_OW 94
// if burlakStatus = 1 then
9405: LD_EXP 26
9409: PUSH
9410: LD_INT 1
9412: EQUAL
9413: IFFALSE 9427
// begin AddMedal ( Burlak , 1 ) ;
9415: LD_STRING Burlak
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: CALL_OW 101
// end else
9425: GO 9438
// begin AddMedal ( Burlak , - 1 ) ;
9427: LD_STRING Burlak
9429: PPUSH
9430: LD_INT 1
9432: NEG
9433: PPUSH
9434: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9438: LD_EXP 2
9442: PPUSH
9443: CALL_OW 302
9447: IFFALSE 9461
// begin AddMedal ( Stevens , 1 ) ;
9449: LD_STRING Stevens
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 101
// end else
9459: GO 9472
// begin AddMedal ( Stevens , - 1 ) ;
9461: LD_STRING Stevens
9463: PPUSH
9464: LD_INT 1
9466: NEG
9467: PPUSH
9468: CALL_OW 101
// end ; if radarOnSpot = 1 then
9472: LD_EXP 28
9476: PUSH
9477: LD_INT 1
9479: EQUAL
9480: IFFALSE 9494
// begin AddMedal ( Observation , 1 ) ;
9482: LD_STRING Observation
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 101
// end else
9492: GO 9504
// begin AddMedal ( Observation , 1 ) ;
9494: LD_STRING Observation
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
9504: LD_STRING MAIN
9506: PPUSH
9507: CALL_OW 102
// YouWin ;
9511: CALL_OW 103
// end ; end_of_file
9515: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
9516: LD_EXP 29
9520: PUSH
9521: LD_INT 2
9523: EQUAL
9524: IFFALSE 9660
9526: GO 9528
9528: DISABLE
9529: LD_INT 0
9531: PPUSH
9532: PPUSH
9533: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9534: LD_ADDR_VAR 0 2
9538: PUSH
9539: LD_INT 22
9541: PUSH
9542: LD_INT 1
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 21
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 30
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: PPUSH
9592: CALL_OW 69
9596: ST_TO_ADDR
// for i in tmp do
9597: LD_ADDR_VAR 0 1
9601: PUSH
9602: LD_VAR 0 2
9606: PUSH
9607: FOR_IN
9608: IFFALSE 9641
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
9610: LD_ADDR_VAR 0 3
9614: PUSH
9615: LD_VAR 0 3
9619: PUSH
9620: LD_VAR 0 1
9624: PPUSH
9625: CALL_OW 274
9629: PPUSH
9630: LD_INT 3
9632: PPUSH
9633: CALL_OW 275
9637: PLUS
9638: ST_TO_ADDR
9639: GO 9607
9641: POP
9642: POP
// if yourSiberite < 79 then
9643: LD_VAR 0 3
9647: PUSH
9648: LD_INT 79
9650: LESS
9651: IFFALSE 9660
// YouLost ( siberite ) ;
9653: LD_STRING siberite
9655: PPUSH
9656: CALL_OW 104
// end ;
9660: PPOPN 3
9662: END
// every 0 0$1 trigger IsDead ( JMM ) do
9663: LD_EXP 1
9667: PPUSH
9668: CALL_OW 301
9672: IFFALSE 9684
9674: GO 9676
9676: DISABLE
// YouLost ( JMM ) ; end_of_file
9677: LD_STRING JMM
9679: PPUSH
9680: CALL_OW 104
9684: END
// every 5 5$0 + 10 10$0 do
9685: GO 9687
9687: DISABLE
// begin enable ;
9688: ENABLE
// RespawnAttackInfantry ( 8 , 2 , [ rand ( 4 , 6 ) , rand ( 5 , 6 ) , 6 ] [ Difficulty ] , 0 , 0 , [ rand ( 1 , 3 ) , rand ( 2 , 5 ) , rand ( 4 , 7 ) ] [ Difficulty ] , 3 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
9689: LD_INT 8
9691: PPUSH
9692: LD_INT 2
9694: PPUSH
9695: LD_INT 4
9697: PPUSH
9698: LD_INT 6
9700: PPUSH
9701: CALL_OW 12
9705: PUSH
9706: LD_INT 5
9708: PPUSH
9709: LD_INT 6
9711: PPUSH
9712: CALL_OW 12
9716: PUSH
9717: LD_INT 6
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: PUSH
9725: LD_OWVAR 67
9729: ARRAY
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: LD_INT 0
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: LD_INT 3
9742: PPUSH
9743: CALL_OW 12
9747: PUSH
9748: LD_INT 2
9750: PPUSH
9751: LD_INT 5
9753: PPUSH
9754: CALL_OW 12
9758: PUSH
9759: LD_INT 4
9761: PPUSH
9762: LD_INT 7
9764: PPUSH
9765: CALL_OW 12
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: LD_OWVAR 67
9779: ARRAY
9780: PPUSH
9781: LD_INT 3
9783: PPUSH
9784: LD_INT 10
9786: PPUSH
9787: LD_INT 8
9789: PUSH
9790: LD_INT 9
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 1
9799: PPUSH
9800: LD_INT 2
9802: PPUSH
9803: CALL_OW 12
9807: ARRAY
9808: PPUSH
9809: LD_INT 12
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL 6228 0 11
// end ;
9819: END
// every 5 5$0 + 10 10$0 do
9820: GO 9822
9822: DISABLE
// begin enable ;
9823: ENABLE
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 1 , 4 ) , rand ( 2 , 5 ) , rand ( 3 , 6 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 1 , 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
9824: LD_INT 8
9826: PUSH
9827: LD_INT 9
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 1
9836: PPUSH
9837: LD_INT 2
9839: PPUSH
9840: CALL_OW 12
9844: ARRAY
9845: PPUSH
9846: LD_INT 8
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 4
9854: PPUSH
9855: CALL_OW 12
9859: PUSH
9860: LD_INT 2
9862: PPUSH
9863: LD_INT 5
9865: PPUSH
9866: CALL_OW 12
9870: PUSH
9871: LD_INT 3
9873: PPUSH
9874: LD_INT 6
9876: PPUSH
9877: CALL_OW 12
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: PUSH
9887: LD_OWVAR 67
9891: ARRAY
9892: PPUSH
9893: LD_INT 10
9895: PPUSH
9896: LD_INT 2
9898: PPUSH
9899: LD_INT 3
9901: PPUSH
9902: LD_INT 1
9904: PUSH
9905: LD_INT 5
9907: PUSH
9908: LD_INT 2
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: PPUSH
9916: EMPTY
9917: PPUSH
9918: LD_INT 25
9920: PUSH
9921: LD_INT 26
9923: PUSH
9924: LD_INT 27
9926: PUSH
9927: LD_INT 28
9929: PUSH
9930: LD_INT 29
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PPUSH
9940: EMPTY
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL 7487 0 11
// end ; end_of_file
9949: END
// every 1 1$0 do
9950: GO 9952
9952: DISABLE
// begin enable ;
9953: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
9954: LD_INT 3
9956: PPUSH
9957: LD_INT 5
9959: PPUSH
9960: CALL_OW 12
9964: PPUSH
9965: LD_INT 13
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 55
// end ;
9975: END
