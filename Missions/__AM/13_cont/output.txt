// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 25
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 26
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 28
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 27
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 30
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 29
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// eventVar1 = 0 ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// eventVar2 = 0 ;
  85: LD_ADDR_EXP 35
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// eventVar3 = 0 ;
  93: LD_ADDR_EXP 36
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar4 = 0 ;
 101: LD_ADDR_EXP 37
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar5 = 0 ;
 109: LD_ADDR_EXP 38
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// mission_prefix = 13f_ ;
 117: LD_ADDR_EXP 33
 121: PUSH
 122: LD_STRING 13f_
 124: ST_TO_ADDR
// debugMode = 0 ;
 125: LD_ADDR_EXP 39
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// SpawnVehicle ;
 133: CALL 1501 0 0
// PrepareHeroes ;
 137: CALL 463 0 0
// PrepareAmericansRandom ;
 141: CALL 1405 0 0
// end ;
 145: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 146: LD_EXP 39
 150: PUSH
 151: LD_INT 1
 153: EQUAL
 154: IFFALSE 460
 156: GO 158
 158: DISABLE
 159: LD_INT 0
 161: PPUSH
// begin enable ;
 162: ENABLE
// fogoff ( true ) ;
 163: LD_INT 1
 165: PPUSH
 166: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 170: LD_ADDR_VAR 0 1
 174: PUSH
 175: LD_INT 22
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 21
 187: PUSH
 188: LD_INT 1
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: PPUSH
 199: CALL_OW 69
 203: PUSH
 204: FOR_IN
 205: IFFALSE 221
// SetLives ( i , 1000 ) ;
 207: LD_VAR 0 1
 211: PPUSH
 212: LD_INT 1000
 214: PPUSH
 215: CALL_OW 234
 219: GO 204
 221: POP
 222: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 223: LD_ADDR_VAR 0 1
 227: PUSH
 228: LD_INT 22
 230: PUSH
 231: LD_INT 1
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 30
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PPUSH
 270: CALL_OW 69
 274: PUSH
 275: FOR_IN
 276: IFFALSE 300
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 278: LD_VAR 0 1
 282: PPUSH
 283: CALL_OW 274
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 9999
 293: PPUSH
 294: CALL_OW 277
 298: GO 275
 300: POP
 301: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 302: LD_ADDR_VAR 0 1
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 30
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: FOR_IN
 355: IFFALSE 379
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
 377: GO 354
 379: POP
 380: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 381: LD_ADDR_VAR 0 1
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PPUSH
 428: CALL_OW 69
 432: PUSH
 433: FOR_IN
 434: IFFALSE 458
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 436: LD_VAR 0 1
 440: PPUSH
 441: CALL_OW 274
 445: PPUSH
 446: LD_INT 3
 448: PPUSH
 449: LD_INT 9999
 451: PPUSH
 452: CALL_OW 277
 456: GO 433
 458: POP
 459: POP
// end ; end_of_file
 460: PPOPN 1
 462: END
// export function PrepareHeroes ; begin
 463: LD_INT 0
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING 13c_JMM
 481: PPUSH
 482: LD_INT 1
 484: PPUSH
 485: CALL 5780 0 2
 489: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 490: LD_ADDR_EXP 2
 494: PUSH
 495: LD_STRING 13c_Stevens
 497: PPUSH
 498: LD_INT 1
 500: PPUSH
 501: CALL 5780 0 2
 505: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 506: LD_ADDR_EXP 3
 510: PUSH
 511: LD_STRING 13c_Lisa
 513: PPUSH
 514: LD_INT 1
 516: PPUSH
 517: CALL 5780 0 2
 521: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_STRING 13c_Donaldson
 529: PPUSH
 530: LD_INT 1
 532: PPUSH
 533: CALL 5780 0 2
 537: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 538: LD_ADDR_EXP 5
 542: PUSH
 543: LD_STRING 13c_Bobby
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL 5780 0 2
 553: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 554: LD_ADDR_EXP 6
 558: PUSH
 559: LD_STRING 13c_Cyrus
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: CALL 5780 0 2
 569: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING 13c_Denis
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL 5780 0 2
 585: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_STRING 13c_Brown
 593: PPUSH
 594: LD_INT 1
 596: PPUSH
 597: CALL 5780 0 2
 601: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 602: LD_ADDR_EXP 9
 606: PUSH
 607: LD_STRING 13c_Gladstone
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 5780 0 2
 617: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 618: LD_ADDR_EXP 10
 622: PUSH
 623: LD_STRING 13c_Houten
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 5780 0 2
 633: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: LD_STRING 13c_Cornel
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL 5780 0 2
 649: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 650: LD_ADDR_EXP 12
 654: PUSH
 655: LD_STRING 13c_Gary
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: CALL 5780 0 2
 665: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 666: LD_ADDR_EXP 13
 670: PUSH
 671: LD_STRING 13c_Frank
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 5780 0 2
 681: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 682: LD_ADDR_EXP 14
 686: PUSH
 687: LD_STRING 13c_Kikuchi
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 5780 0 2
 697: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 698: LD_ADDR_EXP 15
 702: PUSH
 703: LD_STRING Powell
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL 5780 0 2
 713: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 21
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 58
 741: PUSH
 742: EMPTY
 743: LIST
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 69
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 763: LD_EXP 2
 767: PPUSH
 768: LD_INT 22
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 21
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 58
 790: PUSH
 791: EMPTY
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PPUSH
 799: CALL_OW 69
 803: PUSH
 804: LD_INT 1
 806: ARRAY
 807: PPUSH
 808: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 812: LD_EXP 3
 816: PPUSH
 817: LD_INT 22
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 21
 829: PUSH
 830: LD_INT 2
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 58
 839: PUSH
 840: EMPTY
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: PPUSH
 848: CALL_OW 69
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 861: LD_EXP 4
 865: PPUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 21
 878: PUSH
 879: LD_INT 2
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 58
 888: PUSH
 889: EMPTY
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PPUSH
 897: CALL_OW 69
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 910: LD_EXP 5
 914: PPUSH
 915: LD_INT 22
 917: PUSH
 918: LD_INT 1
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 58
 937: PUSH
 938: EMPTY
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 959: LD_EXP 6
 963: PPUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: PUSH
1000: LD_INT 1
1002: ARRAY
1003: PPUSH
1004: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1008: LD_EXP 7
1012: PPUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 1
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 21
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 58
1035: PUSH
1036: EMPTY
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PPUSH
1044: CALL_OW 69
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1057: LD_EXP 8
1061: PPUSH
1062: LD_INT 22
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PUSH
1072: LD_INT 21
1074: PUSH
1075: LD_INT 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 58
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PPUSH
1093: CALL_OW 69
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1106: LD_EXP 9
1110: PPUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 21
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 58
1133: PUSH
1134: EMPTY
1135: LIST
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1155: LD_EXP 10
1159: PPUSH
1160: LD_INT 22
1162: PUSH
1163: LD_INT 1
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 2
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 58
1182: PUSH
1183: EMPTY
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 69
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1204: LD_EXP 11
1208: PPUSH
1209: LD_INT 22
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 21
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 58
1231: PUSH
1232: EMPTY
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1253: LD_EXP 12
1257: PPUSH
1258: LD_INT 22
1260: PUSH
1261: LD_INT 1
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 2
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 58
1280: PUSH
1281: EMPTY
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1302: LD_EXP 13
1306: PPUSH
1307: LD_INT 22
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 58
1329: PUSH
1330: EMPTY
1331: LIST
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 69
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1351: LD_EXP 14
1355: PPUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: PUSH
1392: LD_INT 1
1394: ARRAY
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PrepareAmericansRandom ; var i ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
// uc_side = 1 ;
1409: LD_ADDR_OWVAR 20
1413: PUSH
1414: LD_INT 1
1416: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1417: LD_ADDR_EXP 16
1421: PUSH
1422: LD_STRING 13c_others
1424: PPUSH
1425: CALL_OW 31
1429: ST_TO_ADDR
// for i in others13 do
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_EXP 16
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1494
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1443: LD_VAR 0 2
1447: PPUSH
1448: LD_INT 22
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 21
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 58
1470: PUSH
1471: EMPTY
1472: LIST
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 69
1483: PUSH
1484: LD_INT 1
1486: ARRAY
1487: PPUSH
1488: CALL_OW 52
1492: GO 1440
1494: POP
1495: POP
// end ;
1496: LD_VAR 0 1
1500: RET
// export function SpawnVehicle ; var i , veh ; begin
1501: LD_INT 0
1503: PPUSH
1504: PPUSH
1505: PPUSH
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// uc_nation = 1 ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ Difficulty ] do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_INT 3
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_OWVAR 67
1550: ARRAY
1551: PUSH
1552: FOR_TO
1553: IFFALSE 1641
// begin vc_engine = 3 ;
1555: LD_ADDR_OWVAR 39
1559: PUSH
1560: LD_INT 3
1562: ST_TO_ADDR
// vc_control = 1 ;
1563: LD_ADDR_OWVAR 38
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// vc_weapon = 12 ;
1571: LD_ADDR_OWVAR 40
1575: PUSH
1576: LD_INT 12
1578: ST_TO_ADDR
// vc_chassis = 3 ;
1579: LD_ADDR_OWVAR 37
1583: PUSH
1584: LD_INT 3
1586: ST_TO_ADDR
// veh = CreateVehicle ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 45
1596: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// SetDir ( veh , 2 ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 233
// AddCargo ( veh , 1 , 100 ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: LD_INT 100
1634: PPUSH
1635: CALL_OW 291
// end ;
1639: GO 1552
1641: POP
1642: POP
// for i = 1 to 8 - [ 3 , 2 , 1 ] [ Difficulty ] do
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: DOUBLE
1649: LD_INT 1
1651: DEC
1652: ST_TO_ADDR
1653: LD_INT 8
1655: PUSH
1656: LD_INT 3
1658: PUSH
1659: LD_INT 2
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_OWVAR 67
1674: ARRAY
1675: MINUS
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1774
// begin vc_engine = 3 ;
1680: LD_ADDR_OWVAR 39
1684: PUSH
1685: LD_INT 3
1687: ST_TO_ADDR
// vc_control = 1 ;
1688: LD_ADDR_OWVAR 38
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
1696: LD_ADDR_OWVAR 40
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_INT 5
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 1
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: CALL_OW 12
1725: ARRAY
1726: ST_TO_ADDR
// vc_chassis = 3 ;
1727: LD_ADDR_OWVAR 37
1731: PUSH
1732: LD_INT 3
1734: ST_TO_ADDR
// veh = CreateVehicle ;
1735: LD_ADDR_VAR 0 3
1739: PUSH
1740: CALL_OW 45
1744: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1745: LD_VAR 0 3
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 49
// SetDir ( veh , 1 ) ;
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: CALL_OW 233
// end ;
1772: GO 1677
1774: POP
1775: POP
// end ;
1776: LD_VAR 0 1
1780: RET
// export function PowellSupport ; var i , veh , un ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
// for i = 1 to 3 do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: DOUBLE
1793: LD_INT 1
1795: DEC
1796: ST_TO_ADDR
1797: LD_INT 3
1799: PUSH
1800: FOR_TO
1801: IFFALSE 1974
// begin uc_nation = 1 ;
1803: LD_ADDR_OWVAR 21
1807: PUSH
1808: LD_INT 1
1810: ST_TO_ADDR
// uc_side = 1 ;
1811: LD_ADDR_OWVAR 20
1815: PUSH
1816: LD_INT 1
1818: ST_TO_ADDR
// vc_engine = 3 ;
1819: LD_ADDR_OWVAR 39
1823: PUSH
1824: LD_INT 3
1826: ST_TO_ADDR
// vc_control = 1 ;
1827: LD_ADDR_OWVAR 38
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
1835: LD_ADDR_OWVAR 40
1839: PUSH
1840: LD_INT 9
1842: PUSH
1843: LD_INT 5
1845: PUSH
1846: LD_INT 4
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 1
1856: PPUSH
1857: LD_INT 3
1859: PPUSH
1860: CALL_OW 12
1864: ARRAY
1865: ST_TO_ADDR
// vc_chassis = 3 ;
1866: LD_ADDR_OWVAR 37
1870: PUSH
1871: LD_INT 3
1873: ST_TO_ADDR
// veh = CreateVehicle ;
1874: LD_ADDR_VAR 0 3
1878: PUSH
1879: CALL_OW 45
1883: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
// SetDir ( veh , 1 ) ;
1899: LD_VAR 0 3
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: CALL_OW 233
// hc_gallery =  ;
1911: LD_ADDR_OWVAR 33
1915: PUSH
1916: LD_STRING 
1918: ST_TO_ADDR
// hc_name =  ;
1919: LD_ADDR_OWVAR 26
1923: PUSH
1924: LD_STRING 
1926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 7
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: CALL_OW 12
1943: PPUSH
1944: CALL_OW 380
// un = CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_VAR 0 3
1967: PPUSH
1968: CALL_OW 52
// end ;
1972: GO 1800
1974: POP
1975: POP
// end ; end_of_file
1976: LD_VAR 0 1
1980: RET
// export function PrepareBurlak ; begin
1981: LD_INT 0
1983: PPUSH
// uc_side = 7 ;
1984: LD_ADDR_OWVAR 20
1988: PUSH
1989: LD_INT 7
1991: ST_TO_ADDR
// uc_nation = 3 ;
1992: LD_ADDR_OWVAR 21
1996: PUSH
1997: LD_INT 3
1999: ST_TO_ADDR
// vc_engine = 3 ;
2000: LD_ADDR_OWVAR 39
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// vc_control = 1 ;
2008: LD_ADDR_OWVAR 38
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// vc_weapon = 46 ;
2016: LD_ADDR_OWVAR 40
2020: PUSH
2021: LD_INT 46
2023: ST_TO_ADDR
// vc_chassis = 24 ;
2024: LD_ADDR_OWVAR 37
2028: PUSH
2029: LD_INT 24
2031: ST_TO_ADDR
// Masha = CreateVehicle ;
2032: LD_ADDR_EXP 18
2036: PUSH
2037: CALL_OW 45
2041: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2042: LD_EXP 18
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: LD_INT 0
2052: PPUSH
2053: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2057: LD_EXP 18
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2069: LD_ADDR_EXP 17
2073: PUSH
2074: LD_STRING Burlak
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL 5780 0 2
2084: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2085: LD_EXP 17
2089: PPUSH
2090: LD_EXP 18
2094: PPUSH
2095: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2099: LD_EXP 18
2103: PPUSH
2104: LD_INT 107
2106: PPUSH
2107: LD_INT 118
2109: PPUSH
2110: CALL_OW 114
// spawnBurlak = 1 ;
2114: LD_ADDR_EXP 25
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// end ;
2122: LD_VAR 0 1
2126: RET
// export function BurlakArmy ; var i , veh ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
// uc_side = 7 ;
2132: LD_ADDR_OWVAR 20
2136: PUSH
2137: LD_INT 7
2139: ST_TO_ADDR
// uc_nation = 3 ;
2140: LD_ADDR_OWVAR 21
2144: PUSH
2145: LD_INT 3
2147: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2148: LD_ADDR_EXP 19
2152: PUSH
2153: LD_STRING Gnyevko
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL 5780 0 2
2163: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2164: LD_ADDR_EXP 20
2168: PUSH
2169: LD_STRING Titov
2171: PPUSH
2172: LD_INT 0
2174: PPUSH
2175: CALL 5780 0 2
2179: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2180: LD_ADDR_EXP 21
2184: PUSH
2185: LD_STRING Xavier2
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL 5780 0 2
2195: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2196: LD_ADDR_EXP 22
2200: PUSH
2201: LD_STRING Belkov
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL 5780 0 2
2211: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2212: LD_ADDR_EXP 23
2216: PUSH
2217: LD_STRING Lipshchin
2219: PPUSH
2220: LD_INT 0
2222: PPUSH
2223: CALL 5780 0 2
2227: ST_TO_ADDR
// for i = 1 to 5 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_INT 5
2240: PUSH
2241: FOR_TO
2242: IFFALSE 2330
// begin vc_engine = 3 ;
2244: LD_ADDR_OWVAR 39
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// vc_control = 1 ;
2252: LD_ADDR_OWVAR 38
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2260: LD_ADDR_OWVAR 40
2264: PUSH
2265: LD_INT 43
2267: PUSH
2268: LD_INT 44
2270: PUSH
2271: LD_INT 45
2273: PUSH
2274: LD_INT 49
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 1
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: CALL_OW 12
2293: ARRAY
2294: ST_TO_ADDR
// vc_chassis = 22 ;
2295: LD_ADDR_OWVAR 37
2299: PUSH
2300: LD_INT 22
2302: ST_TO_ADDR
// veh = CreateVehicle ;
2303: LD_ADDR_VAR 0 3
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2313: LD_VAR 0 3
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL_OW 49
// end ;
2328: GO 2241
2330: POP
2331: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2332: LD_EXP 19
2336: PPUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 7
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 2
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 58
2359: PUSH
2360: EMPTY
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2381: LD_EXP 20
2385: PPUSH
2386: LD_INT 22
2388: PUSH
2389: LD_INT 7
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 21
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 58
2408: PUSH
2409: EMPTY
2410: LIST
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 69
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2430: LD_EXP 21
2434: PPUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 7
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 58
2457: PUSH
2458: EMPTY
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: PPUSH
2466: CALL_OW 69
2470: PUSH
2471: LD_INT 1
2473: ARRAY
2474: PPUSH
2475: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2479: LD_EXP 22
2483: PPUSH
2484: LD_INT 22
2486: PUSH
2487: LD_INT 7
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 21
2496: PUSH
2497: LD_INT 2
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 58
2506: PUSH
2507: EMPTY
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2528: LD_EXP 23
2532: PPUSH
2533: LD_INT 22
2535: PUSH
2536: LD_INT 7
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 58
2555: PUSH
2556: EMPTY
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PPUSH
2564: CALL_OW 69
2568: PUSH
2569: LD_INT 1
2571: ARRAY
2572: PPUSH
2573: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2577: LD_EXP 19
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2589: LD_EXP 20
2593: PUSH
2594: LD_EXP 23
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: LD_INT 9
2605: PPUSH
2606: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2610: LD_INT 22
2612: PUSH
2613: LD_INT 7
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 21
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: PPUSH
2639: LD_INT 107
2641: PPUSH
2642: LD_INT 118
2644: PPUSH
2645: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2649: LD_INT 35
2651: PPUSH
2652: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 21
2668: PUSH
2669: LD_INT 2
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 34
2678: PUSH
2679: LD_INT 49
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: PPUSH
2691: CALL_OW 69
2695: PPUSH
2696: LD_EXP 18
2700: PPUSH
2701: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 7
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 34
2727: PUSH
2728: LD_INT 49
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: PPUSH
2740: CALL_OW 69
2744: PUSH
2745: LD_INT 0
2747: EQUAL
2748: PUSH
2749: LD_EXP 18
2753: PPUSH
2754: CALL_OW 303
2758: OR
2759: IFFALSE 2649
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2761: LD_INT 22
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 21
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 69
2789: PPUSH
2790: LD_INT 107
2792: PPUSH
2793: LD_INT 118
2795: PPUSH
2796: CALL_OW 114
// end ; end_of_file
2800: LD_VAR 0 1
2804: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2805: LD_INT 22
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 33
2817: PUSH
2818: LD_INT 2
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 69
2833: PUSH
2834: LD_INT 0
2836: GREATER
2837: PUSH
2838: LD_INT 22
2840: PUSH
2841: LD_INT 8
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 34
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: PUSH
2867: LD_INT 0
2869: EQUAL
2870: AND
2871: IFFALSE 3094
2873: GO 2875
2875: DISABLE
2876: LD_INT 0
2878: PPUSH
// begin enable ;
2879: ENABLE
// uc_side = 8 ;
2880: LD_ADDR_OWVAR 20
2884: PUSH
2885: LD_INT 8
2887: ST_TO_ADDR
// uc_nation = 2 ;
2888: LD_ADDR_OWVAR 21
2892: PUSH
2893: LD_INT 2
2895: ST_TO_ADDR
// vc_engine = 3 ;
2896: LD_ADDR_OWVAR 39
2900: PUSH
2901: LD_INT 3
2903: ST_TO_ADDR
// vc_control = 1 ;
2904: LD_ADDR_OWVAR 38
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// vc_weapon = 31 ;
2912: LD_ADDR_OWVAR 40
2916: PUSH
2917: LD_INT 31
2919: ST_TO_ADDR
// vc_chassis = 14 ;
2920: LD_ADDR_OWVAR 37
2924: PUSH
2925: LD_INT 14
2927: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2928: LD_ADDR_EXP 31
2932: PUSH
2933: CALL_OW 45
2937: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2938: LD_EXP 31
2942: PPUSH
2943: LD_INT 8
2945: PUSH
2946: LD_INT 9
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: ARRAY
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 49
// hc_name =  ;
2972: LD_ADDR_OWVAR 26
2976: PUSH
2977: LD_STRING 
2979: ST_TO_ADDR
// hc_gallery =  ;
2980: LD_ADDR_OWVAR 33
2984: PUSH
2985: LD_STRING 
2987: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 3
2993: PPUSH
2994: LD_INT 10
2996: PPUSH
2997: CALL_OW 380
// arDriver = CreateHuman ;
3001: LD_ADDR_EXP 32
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3011: LD_EXP 32
3015: PPUSH
3016: LD_EXP 31
3020: PPUSH
3021: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3025: LD_ADDR_VAR 0 1
3029: PUSH
3030: LD_INT 22
3032: PUSH
3033: LD_INT 8
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 33
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 3
3052: PUSH
3053: LD_INT 61
3055: PUSH
3056: EMPTY
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 69
3072: PUSH
3073: FOR_IN
3074: IFFALSE 3092
// ComLinkTo ( i , arDriver ) ;
3076: LD_VAR 0 1
3080: PPUSH
3081: LD_EXP 32
3085: PPUSH
3086: CALL_OW 135
3090: GO 3073
3092: POP
3093: POP
// end ;
3094: PPOPN 1
3096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3097: LD_INT 22
3099: PUSH
3100: LD_INT 8
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 33
3119: PUSH
3120: LD_INT 2
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: PUSH
3137: LD_INT 0
3139: EQUAL
3140: IFFALSE 3164
3142: GO 3144
3144: DISABLE
// begin enable ;
3145: ENABLE
// RemoveUnit ( arControlTower ) ;
3146: LD_EXP 31
3150: PPUSH
3151: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3155: LD_EXP 32
3159: PPUSH
3160: CALL_OW 64
// end ;
3164: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3165: LD_EXP 29
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3337
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// rnd = 0 ;
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// uc_side = 2 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 2
3198: ST_TO_ADDR
// uc_nation = 2 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 2
3206: ST_TO_ADDR
// hc_name =  ;
3207: LD_ADDR_OWVAR 26
3211: PUSH
3212: LD_STRING 
3214: ST_TO_ADDR
// hc_gallery =  ;
3215: LD_ADDR_OWVAR 33
3219: PUSH
3220: LD_STRING 
3222: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3223: LD_INT 0
3225: PPUSH
3226: LD_INT 4
3228: PPUSH
3229: LD_INT 10
3231: PPUSH
3232: CALL_OW 380
// un = CreateHuman ;
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3246: LD_VAR 0 1
3250: PPUSH
3251: LD_INT 8
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 12
3271: ARRAY
3272: PPUSH
3273: LD_INT 0
3275: PPUSH
3276: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3280: LD_ADDR_VAR 0 2
3284: PUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 29
3292: PPUSH
3293: CALL_OW 12
3297: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3298: LD_VAR 0 1
3302: PPUSH
3303: LD_EXP 29
3307: PUSH
3308: LD_VAR 0 2
3312: ARRAY
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PPUSH
3318: LD_EXP 29
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: CALL_OW 158
// end ; end_of_file
3337: PPOPN 2
3339: END
// every 1 do
3340: GO 3342
3342: DISABLE
// begin InGameOn ;
3343: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3347: LD_INT 22
3349: PUSH
3350: LD_INT 1
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 21
3359: PUSH
3360: LD_INT 2
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 69
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3384: LD_INT 22
3386: PUSH
3387: LD_INT 1
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: LD_INT 21
3396: PUSH
3397: LD_INT 2
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PPUSH
3408: CALL_OW 69
3412: PPUSH
3413: LD_INT 69
3415: PPUSH
3416: LD_INT 94
3418: PPUSH
3419: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3423: LD_EXP 1
3427: PPUSH
3428: LD_STRING D2-JMM-1
3430: PPUSH
3431: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3435: LD_INT 22
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 1
3466: ARRAY
3467: PPUSH
3468: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3472: LD_EXP 2
3476: PPUSH
3477: LD_STRING D2-Huck-1
3479: PPUSH
3480: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3484: LD_INT 22
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 21
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PUSH
3513: LD_INT 1
3515: ARRAY
3516: PPUSH
3517: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3521: LD_EXP 1
3525: PPUSH
3526: LD_STRING D2-JMM-2
3528: PPUSH
3529: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3533: LD_INT 22
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 21
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 69
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: CALL_OW 87
// InGameOff ;
3570: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3574: LD_STRING M1
3576: PPUSH
3577: CALL_OW 337
// SaveForQuickRestart ;
3581: CALL_OW 22
// end ;
3585: END
// every 10 10$0 do
3586: GO 3588
3588: DISABLE
// begin DialogueOn ;
3589: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3593: LD_EXP 15
3597: PPUSH
3598: LD_STRING D3-Pow-1
3600: PPUSH
3601: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3605: LD_EXP 1
3609: PPUSH
3610: LD_STRING D3-JMM-1
3612: PPUSH
3613: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3617: LD_EXP 15
3621: PPUSH
3622: LD_STRING D3-Pow-2
3624: PPUSH
3625: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3629: LD_EXP 1
3633: PPUSH
3634: LD_STRING D3-JMM-2
3636: PPUSH
3637: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3641: LD_EXP 15
3645: PPUSH
3646: LD_STRING D3-Pow-3
3648: PPUSH
3649: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D3-JMM-3
3660: PPUSH
3661: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3665: LD_EXP 15
3669: PPUSH
3670: LD_STRING D3-Pow-4
3672: PPUSH
3673: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_STRING D3-JMM-4
3684: PPUSH
3685: CALL_OW 88
// DialogueOff ;
3689: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3693: LD_STRING M2
3695: PPUSH
3696: CALL_OW 337
// wait ( 2 2$30 ) ;
3700: LD_INT 5250
3702: PPUSH
3703: CALL_OW 67
// PrepareBurlak ;
3707: CALL 1981 0 0
// BurlakArmy ;
3711: CALL 2127 0 0
// end ;
3715: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3716: LD_INT 1
3718: PPUSH
3719: LD_EXP 18
3723: PPUSH
3724: CALL_OW 292
3728: IFFALSE 3898
3730: GO 3732
3732: DISABLE
// begin DialogueOn ;
3733: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3737: LD_EXP 18
3741: PPUSH
3742: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 26
3758: PUSH
3759: LD_INT 1
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: LD_INT 25
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 25
3791: PUSH
3792: LD_INT 3
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 25
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 25
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 8
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 69
3847: PPUSH
3848: LD_STRING D5-Sol1-1
3850: PPUSH
3851: LD_STRING D5-FSol1-1
3853: PPUSH
3854: CALL 5837 0 3
// Say ( JMM , D5-JMM-1 ) ;
3858: LD_EXP 1
3862: PPUSH
3863: LD_STRING D5-JMM-1
3865: PPUSH
3866: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3870: LD_EXP 17
3874: PPUSH
3875: LD_STRING DAmer-Bur-1
3877: PPUSH
3878: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3882: LD_EXP 1
3886: PPUSH
3887: LD_STRING DAmer-JMM-1
3889: PPUSH
3890: CALL_OW 88
// DialogueOff ;
3894: CALL_OW 7
// end ;
3898: END
// every 0 0$1 do var i ;
3899: GO 3901
3901: DISABLE
3902: LD_INT 0
3904: PPUSH
// begin enable ;
3905: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_INT 22
3913: PUSH
3914: LD_INT 7
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: PUSH
3926: FOR_IN
3927: IFFALSE 4163
// if IsInArea ( i , AllianceEscape ) then
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 308
3941: IFFALSE 4161
// begin if i = Burlak or i = Masha then
3943: LD_VAR 0 1
3947: PUSH
3948: LD_EXP 17
3952: EQUAL
3953: PUSH
3954: LD_VAR 0 1
3958: PUSH
3959: LD_EXP 18
3963: EQUAL
3964: OR
3965: IFFALSE 4123
// begin RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// DialogueOn ;
3976: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3980: LD_EXP 1
3984: PPUSH
3985: LD_STRING D5a-JMM-1
3987: PPUSH
3988: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3992: LD_INT 22
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 26
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 25
4017: PUSH
4018: LD_INT 1
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 25
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 25
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 25
4047: PUSH
4048: LD_INT 4
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 25
4067: PUSH
4068: LD_INT 8
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 69
4093: PPUSH
4094: LD_STRING D5a-Sol1-1
4096: PPUSH
4097: LD_STRING D5-FSol1-1
4099: PPUSH
4100: CALL 5837 0 3
// DialogueOff ;
4104: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4108: LD_STRING M2b
4110: PPUSH
4111: CALL_OW 337
// spawnBurlak = 0 ;
4115: LD_ADDR_EXP 25
4119: PUSH
4120: LD_INT 0
4122: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 264
4132: PUSH
4133: LD_INT 49
4135: EQUAL
4136: IFFALSE 4152
// SetLives ( i , 1 ) else
4138: LD_VAR 0 1
4142: PPUSH
4143: LD_INT 1
4145: PPUSH
4146: CALL_OW 234
4150: GO 4161
// RemoveUnit ( i ) ;
4152: LD_VAR 0 1
4156: PPUSH
4157: CALL_OW 64
// end ;
4161: GO 3926
4163: POP
4164: POP
// end ;
4165: PPOPN 1
4167: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4168: LD_EXP 18
4172: PPUSH
4173: CALL_OW 256
4177: PUSH
4178: LD_INT 500
4180: LESS
4181: PUSH
4182: LD_EXP 18
4186: PPUSH
4187: CALL_OW 255
4191: PUSH
4192: LD_INT 7
4194: EQUAL
4195: AND
4196: IFFALSE 4216
4198: GO 4200
4200: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4201: LD_EXP 18
4205: PPUSH
4206: LD_INT 107
4208: PPUSH
4209: LD_INT 118
4211: PPUSH
4212: CALL_OW 111
4216: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4217: LD_EXP 17
4221: PPUSH
4222: CALL_OW 301
4226: PUSH
4227: LD_EXP 25
4231: PUSH
4232: LD_INT 1
4234: EQUAL
4235: AND
4236: IFFALSE 4307
4238: GO 4240
4240: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4241: LD_EXP 1
4245: PPUSH
4246: LD_STRING D5b-JMM-1
4248: PPUSH
4249: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D5b-Sol1-1 ,  ) ;
4253: LD_INT 22
4255: PUSH
4256: LD_INT 1
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 26
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: PPUSH
4282: LD_STRING D5b-Sol1-1
4284: PPUSH
4285: LD_STRING 
4287: PPUSH
4288: CALL 5837 0 3
// ChangeMissionObjectives ( M2a ) ;
4292: LD_STRING M2a
4294: PPUSH
4295: CALL_OW 337
// burlakStatus = 1 ;
4299: LD_ADDR_EXP 26
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// end ;
4307: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4308: LD_EXP 2
4312: PPUSH
4313: CALL_OW 301
4317: IFFALSE 4465
4319: GO 4321
4321: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4322: LD_EXP 1
4326: PPUSH
4327: LD_STRING D6-JMM-1
4329: PPUSH
4330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D6-Sol1-1 ,  ) ;
4334: LD_INT 22
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 26
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 2
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 1
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 25
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 25
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_INT 25
4389: PUSH
4390: LD_INT 4
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 25
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PUSH
4407: LD_INT 25
4409: PUSH
4410: LD_INT 8
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: LD_STRING D6-Sol1-1
4438: PPUSH
4439: LD_STRING 
4441: PPUSH
4442: CALL 5837 0 3
// Say ( JMM , D6-JMM-2 ) ;
4446: LD_EXP 1
4450: PPUSH
4451: LD_STRING D6-JMM-2
4453: PPUSH
4454: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4458: LD_STRING M1a
4460: PPUSH
4461: CALL_OW 337
// end ;
4465: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4466: LD_INT 25
4468: PPUSH
4469: LD_INT 1
4471: PPUSH
4472: CALL_OW 321
4476: PUSH
4477: LD_INT 2
4479: EQUAL
4480: IFFALSE 4497
4482: GO 4484
4484: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4485: LD_EXP 2
4489: PPUSH
4490: LD_STRING D6-Huck-2
4492: PPUSH
4493: CALL_OW 88
// end ;
4497: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 2
4510: PUSH
4511: LD_INT 34
4513: PUSH
4514: LD_INT 8
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: PUSH
4521: LD_INT 35
4523: PUSH
4524: LD_INT 8
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: PUSH
4545: LD_INT 0
4547: GREATER
4548: IFFALSE 4732
4550: GO 4552
4552: DISABLE
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
// begin enable ;
4557: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4558: LD_ADDR_VAR 0 1
4562: PUSH
4563: LD_INT 5
4565: PPUSH
4566: LD_INT 22
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PUSH
4576: LD_INT 21
4578: PUSH
4579: LD_INT 3
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 30
4588: PUSH
4589: LD_INT 1
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 3
4598: PUSH
4599: LD_INT 57
4601: PUSH
4602: EMPTY
4603: LIST
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 70
4619: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4620: LD_ADDR_VAR 0 2
4624: PUSH
4625: LD_INT 5
4627: PPUSH
4628: LD_INT 22
4630: PUSH
4631: LD_INT 1
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: PUSH
4638: LD_INT 21
4640: PUSH
4641: LD_INT 3
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 30
4650: PUSH
4651: LD_INT 5
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 3
4660: PUSH
4661: LD_INT 57
4663: PUSH
4664: EMPTY
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: PPUSH
4677: CALL_OW 70
4681: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4682: LD_VAR 0 1
4686: PUSH
4687: LD_INT 0
4689: GREATER
4690: PUSH
4691: LD_VAR 0 2
4695: PUSH
4696: LD_INT 0
4698: GREATER
4699: AND
4700: IFFALSE 4732
// begin disable ;
4702: DISABLE
// Say ( JMM , D7-JMM-1 ) ;
4703: LD_EXP 1
4707: PPUSH
4708: LD_STRING D7-JMM-1
4710: PPUSH
4711: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
4715: LD_STRING M4
4717: PPUSH
4718: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4722: LD_INT 5
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 424
// end ; end ;
4732: PPOPN 2
4734: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4735: LD_INT 6
4737: PPUSH
4738: LD_INT 22
4740: PUSH
4741: LD_INT 1
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 70
4766: PUSH
4767: LD_INT 0
4769: GREATER
4770: PUSH
4771: LD_EXP 36
4775: PUSH
4776: LD_INT 1
4778: EQUAL
4779: AND
4780: PUSH
4781: LD_EXP 27
4785: PUSH
4786: LD_INT 0
4788: EQUAL
4789: AND
4790: IFFALSE 4855
4792: GO 4794
4794: DISABLE
// begin enable ;
4795: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4796: LD_ADDR_EXP 24
4800: PUSH
4801: LD_INT 6
4803: PPUSH
4804: LD_INT 22
4806: PUSH
4807: LD_INT 1
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 25
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PPUSH
4828: CALL_OW 70
4832: PUSH
4833: LD_INT 1
4835: ARRAY
4836: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4837: LD_INT 6
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 424
// radationResearched = 1 ;
4847: LD_ADDR_EXP 27
4851: PUSH
4852: LD_INT 1
4854: ST_TO_ADDR
// end ;
4855: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4856: LD_EXP 24
4860: PPUSH
4861: CALL_OW 301
4865: PUSH
4866: LD_EXP 27
4870: PUSH
4871: LD_INT 1
4873: EQUAL
4874: AND
4875: IFFALSE 4911
4877: GO 4879
4879: DISABLE
// begin enable ;
4880: ENABLE
// radationResearched = 0 ;
4881: LD_ADDR_EXP 27
4885: PUSH
4886: LD_INT 0
4888: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4889: LD_INT 6
4891: PPUSH
4892: LD_INT 1
4894: PPUSH
4895: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4899: LD_EXP 1
4903: PPUSH
4904: LD_STRING D9a-JMM-1
4906: PPUSH
4907: CALL_OW 88
// end ; end_of_file
4911: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4912: LD_VAR 0 5
4916: PUSH
4917: LD_INT 8
4919: EQUAL
4920: PUSH
4921: LD_EXP 34
4925: PUSH
4926: LD_INT 0
4928: EQUAL
4929: AND
4930: IFFALSE 4983
// begin eventVar1 = 1 ;
4932: LD_ADDR_EXP 34
4936: PUSH
4937: LD_INT 1
4939: ST_TO_ADDR
// DialogueOn ;
4940: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4944: LD_EXP 1
4948: PPUSH
4949: LD_STRING D6a-JMM-1
4951: PPUSH
4952: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4956: LD_EXP 15
4960: PPUSH
4961: LD_STRING D6a-Pow-1
4963: PPUSH
4964: CALL_OW 94
// DialogueOff ;
4968: CALL_OW 7
// wait ( 3 3$0 ) ;
4972: LD_INT 6300
4974: PPUSH
4975: CALL_OW 67
// PowellSupport ;
4979: CALL 1781 0 0
// end ; end ;
4983: PPOPN 5
4985: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 264
4995: PUSH
4996: LD_INT 8
4998: EQUAL
4999: PUSH
5000: LD_EXP 35
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: AND
5009: IFFALSE 5078
// begin eventVar2 = 1 ;
5011: LD_ADDR_EXP 35
5015: PUSH
5016: LD_INT 1
5018: ST_TO_ADDR
// DialogueOn ;
5019: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5023: LD_EXP 1
5027: PPUSH
5028: LD_STRING D6b-JMM-1
5030: PPUSH
5031: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5035: LD_EXP 15
5039: PPUSH
5040: LD_STRING D6b-Pow-1
5042: PPUSH
5043: CALL_OW 94
// DialogueOff ;
5047: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5051: LD_INT 5
5053: PPUSH
5054: LD_INT 1
5056: PPUSH
5057: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5061: LD_INT 7
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5071: LD_STRING M3
5073: PPUSH
5074: CALL_OW 337
// end ; end ;
5078: PPOPN 2
5080: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_VAR 0 3
5090: PPUSH
5091: LD_INT 5
5093: PPUSH
5094: CALL_OW 309
5098: PUSH
5099: LD_EXP 36
5103: PUSH
5104: LD_INT 0
5106: EQUAL
5107: AND
5108: IFFALSE 5326
// begin eventVar3 = 1 ;
5110: LD_ADDR_EXP 36
5114: PUSH
5115: LD_INT 1
5117: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5118: LD_INT 175
5120: PPUSH
5121: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5125: LD_INT 7
5127: PPUSH
5128: LD_INT 22
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 21
5140: PUSH
5141: LD_INT 2
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 34
5150: PUSH
5151: LD_INT 11
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 70
5167: PUSH
5168: LD_INT 0
5170: GREATER
5171: IFFALSE 5190
// begin radarOnSpot = 1 ;
5173: LD_ADDR_EXP 28
5177: PUSH
5178: LD_INT 1
5180: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5181: LD_STRING M3a
5183: PPUSH
5184: CALL_OW 337
// end else
5188: GO 5197
// begin ChangeMissionObjectives ( M3b ) ;
5190: LD_STRING M3b
5192: PPUSH
5193: CALL_OW 337
// end ; DialogueOn ;
5197: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5201: LD_EXP 2
5205: PPUSH
5206: LD_STRING D8-Huck-1
5208: PPUSH
5209: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5213: LD_EXP 1
5217: PPUSH
5218: LD_STRING D8-JMM-1
5220: PPUSH
5221: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5225: LD_EXP 2
5229: PPUSH
5230: LD_STRING D8-Huck-2
5232: PPUSH
5233: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5237: LD_EXP 1
5241: PPUSH
5242: LD_STRING D8-JMM-2
5244: PPUSH
5245: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5249: LD_EXP 2
5253: PPUSH
5254: LD_STRING D8-Huck-3
5256: PPUSH
5257: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5261: LD_EXP 1
5265: PPUSH
5266: LD_STRING D8-JMM-3
5268: PPUSH
5269: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5273: LD_EXP 2
5277: PPUSH
5278: LD_STRING D8-Huck-4
5280: PPUSH
5281: CALL_OW 88
// DialogueOff ;
5285: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5289: LD_INT 5
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5299: LD_INT 7
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5309: LD_INT 6
5311: PPUSH
5312: LD_INT 1
5314: PPUSH
5315: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5319: LD_STRING M5
5321: PPUSH
5322: CALL_OW 337
// end ; end ;
5326: PPOPN 3
5328: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5329: LD_EXP 24
5333: PPUSH
5334: CALL_OW 302
5338: PUSH
5339: LD_VAR 0 2
5343: PUSH
5344: LD_EXP 24
5348: EQUAL
5349: AND
5350: PUSH
5351: LD_EXP 37
5355: PUSH
5356: LD_INT 0
5358: EQUAL
5359: AND
5360: PUSH
5361: LD_VAR 0 1
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 268
5373: PUSH
5374: LD_INT 11
5376: EQUAL
5377: AND
5378: PUSH
5379: LD_VAR 0 1
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: CALL_OW 268
5391: PUSH
5392: LD_INT 11
5394: EQUAL
5395: OR
5396: IFFALSE 5406
// eventVar4 = 1 ;
5398: LD_ADDR_EXP 37
5402: PUSH
5403: LD_INT 1
5405: ST_TO_ADDR
// end ;
5406: PPOPN 2
5408: END
// on SibDepositContaminated ( unit , x , y ) do var i ;
5409: LD_INT 0
5411: PPUSH
// begin if GetNation ( unit ) = 2 then
5412: LD_VAR 0 1
5416: PPUSH
5417: CALL_OW 248
5421: PUSH
5422: LD_INT 2
5424: EQUAL
5425: IFFALSE 5669
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5427: LD_ADDR_EXP 30
5431: PUSH
5432: LD_EXP 30
5436: PUSH
5437: LD_INT 1
5439: PLUS
5440: ST_TO_ADDR
// for i := 1 to sibDeposits do
5441: LD_ADDR_VAR 0 4
5445: PUSH
5446: DOUBLE
5447: LD_INT 1
5449: DEC
5450: ST_TO_ADDR
5451: LD_EXP 29
5455: PUSH
5456: FOR_TO
5457: IFFALSE 5557
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5459: LD_EXP 29
5463: PUSH
5464: LD_VAR 0 4
5468: ARRAY
5469: PUSH
5470: LD_INT 1
5472: ARRAY
5473: PUSH
5474: LD_VAR 0 2
5478: EQUAL
5479: PUSH
5480: LD_EXP 29
5484: PUSH
5485: LD_VAR 0 4
5489: ARRAY
5490: PUSH
5491: LD_INT 2
5493: ARRAY
5494: PUSH
5495: LD_VAR 0 3
5499: EQUAL
5500: AND
5501: IFFALSE 5555
// begin sibDeposits = sibDeposits diff sibDeposits [ i ] [ 1 ] ;
5503: LD_ADDR_EXP 29
5507: PUSH
5508: LD_EXP 29
5512: PUSH
5513: LD_EXP 29
5517: PUSH
5518: LD_VAR 0 4
5522: ARRAY
5523: PUSH
5524: LD_INT 1
5526: ARRAY
5527: DIFF
5528: ST_TO_ADDR
// sibDeposits = sibDeposits diff sibDeposits [ i ] [ 2 ] ;
5529: LD_ADDR_EXP 29
5533: PUSH
5534: LD_EXP 29
5538: PUSH
5539: LD_EXP 29
5543: PUSH
5544: LD_VAR 0 4
5548: ARRAY
5549: PUSH
5550: LD_INT 2
5552: ARRAY
5553: DIFF
5554: ST_TO_ADDR
// end ;
5555: GO 5456
5557: POP
5558: POP
// if eventVar5 = 0 then
5559: LD_EXP 38
5563: PUSH
5564: LD_INT 0
5566: EQUAL
5567: IFFALSE 5669
// begin eventVar5 = 1 ;
5569: LD_ADDR_EXP 38
5573: PUSH
5574: LD_INT 1
5576: ST_TO_ADDR
// DialogueOn ;
5577: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5581: LD_EXP 2
5585: PPUSH
5586: LD_STRING D4-Sci1-1
5588: PPUSH
5589: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5593: LD_EXP 1
5597: PPUSH
5598: LD_STRING D4-JMM-1
5600: PPUSH
5601: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5605: LD_EXP 2
5609: PPUSH
5610: LD_STRING D4-Sci1-2
5612: PPUSH
5613: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5617: LD_EXP 1
5621: PPUSH
5622: LD_STRING D4-JMM-2
5624: PPUSH
5625: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5629: LD_EXP 2
5633: PPUSH
5634: LD_STRING D4-Sci1-3
5636: PPUSH
5637: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5641: LD_EXP 1
5645: PPUSH
5646: LD_STRING D4-JMM-3
5648: PPUSH
5649: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5653: LD_EXP 1
5657: PPUSH
5658: LD_STRING D4-JMM-3a
5660: PPUSH
5661: CALL_OW 88
// DialogueOff ;
5665: CALL_OW 7
// end ; end ; end ;
5669: PPOPN 4
5671: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 then
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 255
5681: PUSH
5682: LD_INT 1
5684: EQUAL
5685: PUSH
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 266
5695: PUSH
5696: LD_INT 0
5698: EQUAL
5699: AND
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_INT 1
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 21
5713: PUSH
5714: LD_INT 3
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 2
5723: PUSH
5724: LD_INT 30
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 30
5736: PUSH
5737: LD_INT 1
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: PUSH
5759: LD_INT 0
5761: GREATER
5762: AND
5763: IFFALSE 5777
// SetBName ( building , omega ) ;
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_STRING omega
5772: PPUSH
5773: CALL_OW 500
// end ; end_of_file
5777: PPOPN 2
5779: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
// if exist_mode then
5784: LD_VAR 0 2
5788: IFFALSE 5807
// unit := CreateCharacter ( ident ) else
5790: LD_ADDR_VAR 0 4
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 34
5804: ST_TO_ADDR
5805: GO 5822
// unit := NewCharacter ( ident ) ;
5807: LD_ADDR_VAR 0 4
5811: PUSH
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 25
5821: ST_TO_ADDR
// result := unit ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 4
5831: ST_TO_ADDR
// end ;
5832: LD_VAR 0 3
5836: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5837: LD_INT 0
5839: PPUSH
5840: PPUSH
5841: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5842: LD_ADDR_VAR 0 1
5846: PUSH
5847: LD_VAR 0 1
5851: PUSH
5852: LD_EXP 1
5856: PUSH
5857: LD_EXP 2
5861: PUSH
5862: LD_EXP 3
5866: PUSH
5867: LD_EXP 4
5871: PUSH
5872: LD_EXP 5
5876: PUSH
5877: LD_EXP 6
5881: PUSH
5882: LD_EXP 7
5886: PUSH
5887: LD_EXP 8
5891: PUSH
5892: LD_EXP 9
5896: PUSH
5897: LD_EXP 10
5901: PUSH
5902: LD_EXP 11
5906: PUSH
5907: LD_EXP 12
5911: PUSH
5912: LD_EXP 13
5916: PUSH
5917: LD_EXP 14
5921: PUSH
5922: LD_EXP 15
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: DIFF
5944: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
5945: LD_ADDR_VAR 0 6
5949: PUSH
5950: LD_INT 1
5952: PPUSH
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 12
5962: ST_TO_ADDR
// for i = 1 to characters do
5963: LD_ADDR_VAR 0 5
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 1
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6089
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5981: LD_VAR 0 5
5985: PUSH
5986: LD_VAR 0 6
5990: EQUAL
5991: PUSH
5992: LD_VAR 0 1
5996: PUSH
5997: LD_VAR 0 5
6001: ARRAY
6002: PPUSH
6003: CALL_OW 258
6007: PUSH
6008: LD_INT 1
6010: EQUAL
6011: AND
6012: IFFALSE 6034
// Say ( characters [ i ] , dialogMID ) ;
6014: LD_VAR 0 1
6018: PUSH
6019: LD_VAR 0 5
6023: ARRAY
6024: PPUSH
6025: LD_VAR 0 2
6029: PPUSH
6030: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6034: LD_VAR 0 5
6038: PUSH
6039: LD_VAR 0 6
6043: EQUAL
6044: PUSH
6045: LD_VAR 0 1
6049: PUSH
6050: LD_VAR 0 5
6054: ARRAY
6055: PPUSH
6056: CALL_OW 258
6060: PUSH
6061: LD_INT 2
6063: EQUAL
6064: AND
6065: IFFALSE 6087
// Say ( characters [ i ] , dialogFID ) ;
6067: LD_VAR 0 1
6071: PUSH
6072: LD_VAR 0 5
6076: ARRAY
6077: PPUSH
6078: LD_VAR 0 3
6082: PPUSH
6083: CALL_OW 88
// end ;
6087: GO 5978
6089: POP
6090: POP
// end ;
6091: LD_VAR 0 4
6095: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6096: LD_INT 0
6098: PPUSH
6099: PPUSH
6100: PPUSH
6101: PPUSH
6102: PPUSH
6103: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6104: LD_ADDR_VAR 0 7
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_VAR 0 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 25
6123: PUSH
6124: LD_INT 9
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6140: LD_ADDR_VAR 0 8
6144: PUSH
6145: LD_INT 22
6147: PUSH
6148: LD_VAR 0 2
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: LD_INT 3
6159: PUSH
6160: LD_INT 21
6162: PUSH
6163: LD_INT 3
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6183: LD_ADDR_VAR 0 5
6187: PUSH
6188: LD_INT 1
6190: PPUSH
6191: LD_INT 3
6193: PPUSH
6194: CALL_OW 12
6198: ST_TO_ADDR
// for i = 1 to list do
6199: LD_ADDR_VAR 0 6
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_VAR 0 7
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6397
// for ta in filter do
6217: LD_ADDR_VAR 0 4
6221: PUSH
6222: LD_VAR 0 8
6226: PUSH
6227: FOR_IN
6228: IFFALSE 6393
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6230: LD_VAR 0 7
6234: PUSH
6235: LD_VAR 0 6
6239: ARRAY
6240: PPUSH
6241: LD_VAR 0 4
6245: PPUSH
6246: CALL_OW 296
6250: PUSH
6251: LD_INT 13
6253: LESSEQUAL
6254: IFFALSE 6391
// begin case c of 1 :
6256: LD_VAR 0 5
6260: PUSH
6261: LD_INT 1
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6269
6267: GO 6307
6269: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6270: LD_VAR 0 7
6274: PUSH
6275: LD_VAR 0 6
6279: ARRAY
6280: PPUSH
6281: LD_VAR 0 4
6285: PPUSH
6286: CALL_OW 250
6290: PPUSH
6291: LD_VAR 0 4
6295: PPUSH
6296: CALL_OW 251
6300: PPUSH
6301: CALL_OW 154
6305: GO 6391
6307: LD_INT 2
6309: DOUBLE
6310: EQUAL
6311: IFTRUE 6315
6313: GO 6379
6315: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6316: LD_VAR 0 7
6320: PUSH
6321: LD_VAR 0 6
6325: ARRAY
6326: PPUSH
6327: LD_VAR 0 4
6331: PPUSH
6332: CALL_OW 250
6336: PUSH
6337: LD_INT 1
6339: NEG
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 12
6348: PLUS
6349: PPUSH
6350: LD_VAR 0 4
6354: PPUSH
6355: CALL_OW 251
6359: PUSH
6360: LD_INT 1
6362: NEG
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 12
6371: PLUS
6372: PPUSH
6373: CALL_OW 153
6377: GO 6391
6379: LD_INT 3
6381: DOUBLE
6382: EQUAL
6383: IFTRUE 6387
6385: GO 6390
6387: POP
// ; end ;
6388: GO 6391
6390: POP
// end ; end ;
6391: GO 6227
6393: POP
6394: POP
6395: GO 6214
6397: POP
6398: POP
// end ;
6399: LD_VAR 0 3
6403: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6404: LD_INT 0
6406: PPUSH
6407: PPUSH
// for i in charactersList do
6408: LD_ADDR_VAR 0 4
6412: PUSH
6413: LD_VAR 0 1
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6448
// begin if IsOk ( i ) then
6421: LD_VAR 0 4
6425: PPUSH
6426: CALL_OW 302
6430: IFFALSE 6446
// SaveCharacters ( i , ident ) ;
6432: LD_VAR 0 4
6436: PPUSH
6437: LD_VAR 0 2
6441: PPUSH
6442: CALL_OW 38
// end ;
6446: GO 6418
6448: POP
6449: POP
// end ;
6450: LD_VAR 0 3
6454: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6455: LD_INT 0
6457: PPUSH
6458: PPUSH
6459: PPUSH
6460: PPUSH
6461: PPUSH
6462: PPUSH
6463: PPUSH
6464: PPUSH
6465: PPUSH
6466: PPUSH
6467: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6468: LD_ADDR_VAR 0 9
6472: PUSH
6473: LD_INT 22
6475: PUSH
6476: LD_VAR 0 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 2
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 24
6507: PUSH
6508: LD_INT 660
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 3
6517: PUSH
6518: LD_INT 58
6520: PUSH
6521: EMPTY
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PUSH
6528: LD_INT 3
6530: PUSH
6531: LD_INT 34
6533: PUSH
6534: LD_INT 53
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6558: LD_ADDR_VAR 0 10
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_VAR 0 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 21
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 33
6587: PUSH
6588: LD_INT 1
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: LD_INT 24
6600: PUSH
6601: LD_INT 660
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: PPUSH
6618: CALL_OW 69
6622: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6623: LD_ADDR_VAR 0 11
6627: PUSH
6628: LD_VAR 0 2
6632: PPUSH
6633: LD_INT 22
6635: PUSH
6636: LD_VAR 0 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 21
6647: PUSH
6648: LD_INT 2
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 33
6657: PUSH
6658: LD_INT 1
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 24
6670: PUSH
6671: LD_INT 1000
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: PPUSH
6688: CALL_OW 70
6692: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6693: LD_ADDR_VAR 0 12
6697: PUSH
6698: LD_VAR 0 2
6702: PPUSH
6703: LD_INT 22
6705: PUSH
6706: LD_VAR 0 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 21
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 33
6727: PUSH
6728: LD_INT 1
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 24
6737: PUSH
6738: LD_INT 1000
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 58
6747: PUSH
6748: EMPTY
6749: LIST
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 34
6756: PUSH
6757: LD_INT 53
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 70
6780: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6781: LD_ADDR_VAR 0 13
6785: PUSH
6786: EMPTY
6787: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6788: LD_ADDR_VAR 0 14
6792: PUSH
6793: LD_VAR 0 2
6797: PPUSH
6798: LD_INT 22
6800: PUSH
6801: LD_VAR 0 1
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 25
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 70
6828: ST_TO_ADDR
// if damageVehicle_list > 0 then
6829: LD_VAR 0 10
6833: PUSH
6834: LD_INT 0
6836: GREATER
6837: IFFALSE 6875
// begin for i in damageVehicle_list do
6839: LD_ADDR_VAR 0 7
6843: PUSH
6844: LD_VAR 0 10
6848: PUSH
6849: FOR_IN
6850: IFFALSE 6873
// begin ComMoveXY ( i , repX , repY ) ;
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 3
6861: PPUSH
6862: LD_VAR 0 4
6866: PPUSH
6867: CALL_OW 111
// end ;
6871: GO 6849
6873: POP
6874: POP
// end ; if vehicleNeedRepair_list > 0 then
6875: LD_VAR 0 11
6879: PUSH
6880: LD_INT 0
6882: GREATER
6883: IFFALSE 6970
// begin for i in vehicleNeedRepair_list do
6885: LD_ADDR_VAR 0 7
6889: PUSH
6890: LD_VAR 0 11
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6968
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6898: LD_ADDR_VAR 0 13
6902: PUSH
6903: LD_VAR 0 13
6907: PUSH
6908: LD_VAR 0 7
6912: PPUSH
6913: CALL_OW 313
6917: ADD
6918: ST_TO_ADDR
// for j in mechanicInside_list do
6919: LD_ADDR_VAR 0 8
6923: PUSH
6924: LD_VAR 0 13
6928: PUSH
6929: FOR_IN
6930: IFFALSE 6964
// begin ComExitVehicle ( i ) ;
6932: LD_VAR 0 7
6936: PPUSH
6937: CALL_OW 121
// wait ( 0 0$1 ) ;
6941: LD_INT 35
6943: PPUSH
6944: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6948: LD_VAR 0 7
6952: PPUSH
6953: LD_VAR 0 8
6957: PPUSH
6958: CALL_OW 129
// end ;
6962: GO 6929
6964: POP
6965: POP
// end ;
6966: GO 6895
6968: POP
6969: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6970: LD_VAR 0 12
6974: PUSH
6975: LD_INT 0
6977: GREATER
6978: IFFALSE 7018
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6980: LD_VAR 0 14
6984: PUSH
6985: LD_INT 1
6987: ARRAY
6988: PPUSH
6989: LD_VAR 0 12
6993: PUSH
6994: LD_INT 1
6996: ARRAY
6997: PPUSH
6998: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
7002: LD_VAR 0 12
7006: PUSH
7007: LD_INT 1
7009: ARRAY
7010: PPUSH
7011: LD_INT 100
7013: PPUSH
7014: CALL_OW 240
// end ; if vehicleOK_list > 0 then
7018: LD_VAR 0 9
7022: PUSH
7023: LD_INT 0
7025: GREATER
7026: IFFALSE 7217
// begin for i in vehicleOK_list do
7028: LD_ADDR_VAR 0 7
7032: PUSH
7033: LD_VAR 0 9
7037: PUSH
7038: FOR_IN
7039: IFFALSE 7215
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7041: LD_ADDR_VAR 0 15
7045: PUSH
7046: LD_INT 22
7048: PUSH
7049: LD_VAR 0 5
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PPUSH
7058: CALL_OW 69
7062: PPUSH
7063: LD_VAR 0 7
7067: PPUSH
7068: CALL_OW 74
7072: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7073: LD_ADDR_VAR 0 16
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_VAR 0 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 2
7092: PUSH
7093: LD_INT 59
7095: PUSH
7096: EMPTY
7097: LIST
7098: PUSH
7099: LD_INT 21
7101: PUSH
7102: LD_INT 1
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 21
7111: PUSH
7112: LD_INT 2
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PPUSH
7137: LD_VAR 0 7
7141: PPUSH
7142: CALL_OW 74
7146: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7147: LD_VAR 0 7
7151: PPUSH
7152: LD_VAR 0 15
7156: PPUSH
7157: CALL_OW 296
7161: PUSH
7162: LD_INT 8
7164: PLUS
7165: PUSH
7166: LD_VAR 0 7
7170: PPUSH
7171: LD_VAR 0 16
7175: PPUSH
7176: CALL_OW 296
7180: LESS
7181: IFFALSE 7199
// begin ComAttackUnit ( i , target1 ) ;
7183: LD_VAR 0 7
7187: PPUSH
7188: LD_VAR 0 15
7192: PPUSH
7193: CALL_OW 115
// end else
7197: GO 7213
// begin ComAttackUnit ( i , target2 ) ;
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 16
7208: PPUSH
7209: CALL_OW 115
// end ; end ;
7213: GO 7038
7215: POP
7216: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7217: LD_ADDR_VAR 0 7
7221: PUSH
7222: LD_VAR 0 2
7226: PPUSH
7227: LD_INT 22
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 25
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: CALL_OW 70
7257: NOT
7258: PUSH
7259: FOR_IN
7260: IFFALSE 7283
// ComMoveXY ( i , repX , repY ) ;
7262: LD_VAR 0 7
7266: PPUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_VAR 0 4
7276: PPUSH
7277: CALL_OW 111
7281: GO 7259
7283: POP
7284: POP
// end ;
7285: LD_VAR 0 6
7289: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7290: LD_INT 0
7292: PPUSH
7293: PPUSH
7294: PPUSH
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
7302: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7303: LD_INT 2100
7305: PUSH
7306: LD_INT 3150
7308: PUSH
7309: LD_INT 4200
7311: PUSH
7312: LD_INT 5250
7314: PUSH
7315: LD_INT 6300
7317: PUSH
7318: LD_INT 7350
7320: PUSH
7321: LD_INT 8400
7323: PUSH
7324: LD_INT 9450
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 1
7339: PPUSH
7340: LD_INT 8
7342: PPUSH
7343: CALL_OW 12
7347: ARRAY
7348: PPUSH
7349: CALL_OW 67
// for i = 1 to medicCount do
7353: LD_ADDR_VAR 0 13
7357: PUSH
7358: DOUBLE
7359: LD_INT 1
7361: DEC
7362: ST_TO_ADDR
7363: LD_VAR 0 7
7367: PUSH
7368: FOR_TO
7369: IFFALSE 7451
// begin uc_side = side ;
7371: LD_ADDR_OWVAR 20
7375: PUSH
7376: LD_VAR 0 1
7380: ST_TO_ADDR
// uc_nation = nation ;
7381: LD_ADDR_OWVAR 21
7385: PUSH
7386: LD_VAR 0 2
7390: ST_TO_ADDR
// hc_name =  ;
7391: LD_ADDR_OWVAR 26
7395: PUSH
7396: LD_STRING 
7398: ST_TO_ADDR
// hc_gallery =  ;
7399: LD_ADDR_OWVAR 33
7403: PUSH
7404: LD_STRING 
7406: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7407: LD_INT 0
7409: PPUSH
7410: LD_INT 4
7412: PPUSH
7413: LD_VAR 0 8
7417: PPUSH
7418: CALL_OW 380
// un = CreateHuman ;
7422: LD_ADDR_VAR 0 15
7426: PUSH
7427: CALL_OW 44
7431: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7432: LD_VAR 0 15
7436: PPUSH
7437: LD_VAR 0 9
7441: PPUSH
7442: LD_INT 0
7444: PPUSH
7445: CALL_OW 49
// end ;
7449: GO 7368
7451: POP
7452: POP
// for i = 1 to soldierCount do
7453: LD_ADDR_VAR 0 13
7457: PUSH
7458: DOUBLE
7459: LD_INT 1
7461: DEC
7462: ST_TO_ADDR
7463: LD_VAR 0 3
7467: PUSH
7468: FOR_TO
7469: IFFALSE 7551
// begin uc_side = side ;
7471: LD_ADDR_OWVAR 20
7475: PUSH
7476: LD_VAR 0 1
7480: ST_TO_ADDR
// uc_nation = nation ;
7481: LD_ADDR_OWVAR 21
7485: PUSH
7486: LD_VAR 0 2
7490: ST_TO_ADDR
// hc_name =  ;
7491: LD_ADDR_OWVAR 26
7495: PUSH
7496: LD_STRING 
7498: ST_TO_ADDR
// hc_gallery =  ;
7499: LD_ADDR_OWVAR 33
7503: PUSH
7504: LD_STRING 
7506: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7507: LD_INT 0
7509: PPUSH
7510: LD_INT 1
7512: PPUSH
7513: LD_VAR 0 8
7517: PPUSH
7518: CALL_OW 380
// un = CreateHuman ;
7522: LD_ADDR_VAR 0 15
7526: PUSH
7527: CALL_OW 44
7531: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7532: LD_VAR 0 15
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: LD_INT 0
7544: PPUSH
7545: CALL_OW 49
// end ;
7549: GO 7468
7551: POP
7552: POP
// for i = 1 to sniperCount do
7553: LD_ADDR_VAR 0 13
7557: PUSH
7558: DOUBLE
7559: LD_INT 1
7561: DEC
7562: ST_TO_ADDR
7563: LD_VAR 0 4
7567: PUSH
7568: FOR_TO
7569: IFFALSE 7651
// begin uc_side = side ;
7571: LD_ADDR_OWVAR 20
7575: PUSH
7576: LD_VAR 0 1
7580: ST_TO_ADDR
// uc_nation = nation ;
7581: LD_ADDR_OWVAR 21
7585: PUSH
7586: LD_VAR 0 2
7590: ST_TO_ADDR
// hc_name =  ;
7591: LD_ADDR_OWVAR 26
7595: PUSH
7596: LD_STRING 
7598: ST_TO_ADDR
// hc_gallery =  ;
7599: LD_ADDR_OWVAR 33
7603: PUSH
7604: LD_STRING 
7606: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7607: LD_INT 0
7609: PPUSH
7610: LD_INT 5
7612: PPUSH
7613: LD_VAR 0 8
7617: PPUSH
7618: CALL_OW 380
// un = CreateHuman ;
7622: LD_ADDR_VAR 0 15
7626: PUSH
7627: CALL_OW 44
7631: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7632: LD_VAR 0 15
7636: PPUSH
7637: LD_VAR 0 9
7641: PPUSH
7642: LD_INT 0
7644: PPUSH
7645: CALL_OW 49
// end ;
7649: GO 7568
7651: POP
7652: POP
// for i = 1 to bazookCount do
7653: LD_ADDR_VAR 0 13
7657: PUSH
7658: DOUBLE
7659: LD_INT 1
7661: DEC
7662: ST_TO_ADDR
7663: LD_VAR 0 5
7667: PUSH
7668: FOR_TO
7669: IFFALSE 7751
// begin uc_side = side ;
7671: LD_ADDR_OWVAR 20
7675: PUSH
7676: LD_VAR 0 1
7680: ST_TO_ADDR
// uc_nation = nation ;
7681: LD_ADDR_OWVAR 21
7685: PUSH
7686: LD_VAR 0 2
7690: ST_TO_ADDR
// hc_name =  ;
7691: LD_ADDR_OWVAR 26
7695: PUSH
7696: LD_STRING 
7698: ST_TO_ADDR
// hc_gallery =  ;
7699: LD_ADDR_OWVAR 33
7703: PUSH
7704: LD_STRING 
7706: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7707: LD_INT 0
7709: PPUSH
7710: LD_INT 9
7712: PPUSH
7713: LD_VAR 0 8
7717: PPUSH
7718: CALL_OW 380
// un = CreateHuman ;
7722: LD_ADDR_VAR 0 15
7726: PUSH
7727: CALL_OW 44
7731: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7732: LD_VAR 0 15
7736: PPUSH
7737: LD_VAR 0 9
7741: PPUSH
7742: LD_INT 0
7744: PPUSH
7745: CALL_OW 49
// end ;
7749: GO 7668
7751: POP
7752: POP
// for i = 1 to mortalCount do
7753: LD_ADDR_VAR 0 13
7757: PUSH
7758: DOUBLE
7759: LD_INT 1
7761: DEC
7762: ST_TO_ADDR
7763: LD_VAR 0 6
7767: PUSH
7768: FOR_TO
7769: IFFALSE 7851
// begin uc_side = side ;
7771: LD_ADDR_OWVAR 20
7775: PUSH
7776: LD_VAR 0 1
7780: ST_TO_ADDR
// uc_nation = nation ;
7781: LD_ADDR_OWVAR 21
7785: PUSH
7786: LD_VAR 0 2
7790: ST_TO_ADDR
// hc_name =  ;
7791: LD_ADDR_OWVAR 26
7795: PUSH
7796: LD_STRING 
7798: ST_TO_ADDR
// hc_gallery =  ;
7799: LD_ADDR_OWVAR 33
7803: PUSH
7804: LD_STRING 
7806: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7807: LD_INT 0
7809: PPUSH
7810: LD_INT 8
7812: PPUSH
7813: LD_VAR 0 8
7817: PPUSH
7818: CALL_OW 380
// un = CreateHuman ;
7822: LD_ADDR_VAR 0 15
7826: PUSH
7827: CALL_OW 44
7831: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7832: LD_VAR 0 15
7836: PPUSH
7837: LD_VAR 0 9
7841: PPUSH
7842: LD_INT 0
7844: PPUSH
7845: CALL_OW 49
// end ;
7849: GO 7768
7851: POP
7852: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7853: LD_ADDR_VAR 0 17
7857: PUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 25
7872: PUSH
7873: LD_INT 4
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PPUSH
7884: CALL_OW 69
7888: ST_TO_ADDR
// for i in medic_list do
7889: LD_ADDR_VAR 0 13
7893: PUSH
7894: LD_VAR 0 17
7898: PUSH
7899: FOR_IN
7900: IFFALSE 7918
// ComMoveToArea ( i , healArea ) ;
7902: LD_VAR 0 13
7906: PPUSH
7907: LD_VAR 0 10
7911: PPUSH
7912: CALL_OW 113
7916: GO 7899
7918: POP
7919: POP
// repeat wait ( 0 0$1 ) ;
7920: LD_INT 35
7922: PPUSH
7923: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7927: LD_ADDR_VAR 0 16
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_VAR 0 1
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 1
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: LD_INT 24
7952: PUSH
7953: LD_INT 550
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 24
7966: PUSH
7967: LD_INT 250
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PPUSH
7983: CALL_OW 69
7987: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7988: LD_ADDR_VAR 0 18
7992: PUSH
7993: LD_INT 22
7995: PUSH
7996: LD_VAR 0 1
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: LD_INT 25
8010: PUSH
8011: LD_INT 1
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 25
8020: PUSH
8021: LD_INT 5
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 8
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 25
8040: PUSH
8041: LD_INT 9
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 24
8057: PUSH
8058: LD_INT 1000
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if medicCount > 0 then
8075: LD_VAR 0 7
8079: PUSH
8080: LD_INT 0
8082: GREATER
8083: IFFALSE 8157
// begin if damageUnit_list > 0 then
8085: LD_VAR 0 16
8089: PUSH
8090: LD_INT 0
8092: GREATER
8093: IFFALSE 8157
// begin for i in damageUnit_list do
8095: LD_ADDR_VAR 0 13
8099: PUSH
8100: LD_VAR 0 16
8104: PUSH
8105: FOR_IN
8106: IFFALSE 8155
// begin ComMoveToArea ( i , healArea ) ;
8108: LD_VAR 0 13
8112: PPUSH
8113: LD_VAR 0 10
8117: PPUSH
8118: CALL_OW 113
// for j in medic_list do
8122: LD_ADDR_VAR 0 14
8126: PUSH
8127: LD_VAR 0 17
8131: PUSH
8132: FOR_IN
8133: IFFALSE 8151
// AddComHeal ( j , i ) ;
8135: LD_VAR 0 14
8139: PPUSH
8140: LD_VAR 0 13
8144: PPUSH
8145: CALL_OW 188
8149: GO 8132
8151: POP
8152: POP
// end ;
8153: GO 8105
8155: POP
8156: POP
// end ; end ; for i in soldiersOK_list do
8157: LD_ADDR_VAR 0 13
8161: PUSH
8162: LD_VAR 0 18
8166: PUSH
8167: FOR_IN
8168: IFFALSE 8344
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8170: LD_ADDR_VAR 0 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_VAR 0 11
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PPUSH
8192: LD_VAR 0 13
8196: PPUSH
8197: CALL_OW 74
8201: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8202: LD_ADDR_VAR 0 22
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_VAR 0 11
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 59
8224: PUSH
8225: EMPTY
8226: LIST
8227: PUSH
8228: LD_INT 21
8230: PUSH
8231: LD_INT 1
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 21
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: PPUSH
8261: CALL_OW 69
8265: PPUSH
8266: LD_VAR 0 13
8270: PPUSH
8271: CALL_OW 74
8275: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8276: LD_VAR 0 13
8280: PPUSH
8281: LD_VAR 0 21
8285: PPUSH
8286: CALL_OW 296
8290: PUSH
8291: LD_INT 8
8293: PLUS
8294: PUSH
8295: LD_VAR 0 13
8299: PPUSH
8300: LD_VAR 0 22
8304: PPUSH
8305: CALL_OW 296
8309: LESS
8310: IFFALSE 8328
// begin ComAttackUnit ( i , target1 ) ;
8312: LD_VAR 0 13
8316: PPUSH
8317: LD_VAR 0 21
8321: PPUSH
8322: CALL_OW 115
// end else
8326: GO 8342
// begin ComAttackUnit ( i , target2 ) ;
8328: LD_VAR 0 13
8332: PPUSH
8333: LD_VAR 0 22
8337: PPUSH
8338: CALL_OW 115
// end ; end ;
8342: GO 8167
8344: POP
8345: POP
// for i in soldiersOK_list do
8346: LD_ADDR_VAR 0 13
8350: PUSH
8351: LD_VAR 0 18
8355: PUSH
8356: FOR_IN
8357: IFFALSE 8533
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8359: LD_ADDR_VAR 0 21
8363: PUSH
8364: LD_INT 22
8366: PUSH
8367: LD_VAR 0 11
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 69
8380: PPUSH
8381: LD_VAR 0 13
8385: PPUSH
8386: CALL_OW 74
8390: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8391: LD_ADDR_VAR 0 22
8395: PUSH
8396: LD_INT 22
8398: PUSH
8399: LD_VAR 0 11
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: LD_INT 59
8413: PUSH
8414: EMPTY
8415: LIST
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 21
8429: PUSH
8430: LD_INT 2
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: PPUSH
8455: LD_VAR 0 13
8459: PPUSH
8460: CALL_OW 74
8464: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8465: LD_VAR 0 13
8469: PPUSH
8470: LD_VAR 0 21
8474: PPUSH
8475: CALL_OW 296
8479: PUSH
8480: LD_INT 8
8482: PLUS
8483: PUSH
8484: LD_VAR 0 13
8488: PPUSH
8489: LD_VAR 0 22
8493: PPUSH
8494: CALL_OW 296
8498: LESS
8499: IFFALSE 8517
// begin ComAttackUnit ( i , target1 ) ;
8501: LD_VAR 0 13
8505: PPUSH
8506: LD_VAR 0 21
8510: PPUSH
8511: CALL_OW 115
// end else
8515: GO 8531
// begin ComAttackUnit ( i , target2 ) ;
8517: LD_VAR 0 13
8521: PPUSH
8522: LD_VAR 0 22
8526: PPUSH
8527: CALL_OW 115
// end ; end ;
8531: GO 8356
8533: POP
8534: POP
// until soldiersOK_list = [ ] ;
8535: LD_VAR 0 18
8539: PUSH
8540: EMPTY
8541: EQUAL
8542: IFFALSE 7920
// end ;
8544: LD_VAR 0 12
8548: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8549: LD_INT 0
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
8556: PPUSH
8557: PPUSH
8558: PPUSH
8559: PPUSH
8560: PPUSH
8561: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
8562: LD_INT 2100
8564: PUSH
8565: LD_INT 3150
8567: PUSH
8568: LD_INT 4200
8570: PUSH
8571: LD_INT 5250
8573: PUSH
8574: LD_INT 6300
8576: PUSH
8577: LD_INT 7350
8579: PUSH
8580: LD_INT 8400
8582: PUSH
8583: LD_INT 9450
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 1
8598: PPUSH
8599: LD_INT 8
8601: PPUSH
8602: CALL_OW 12
8606: ARRAY
8607: PPUSH
8608: CALL_OW 67
// amChassisTab = [ ] ;
8612: LD_ADDR_VAR 0 19
8616: PUSH
8617: EMPTY
8618: ST_TO_ADDR
// arChassisTab = [ ] ;
8619: LD_ADDR_VAR 0 18
8623: PUSH
8624: EMPTY
8625: ST_TO_ADDR
// ruChassisTab = [ ] ;
8626: LD_ADDR_VAR 0 17
8630: PUSH
8631: EMPTY
8632: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8633: LD_INT 35
8635: PPUSH
8636: CALL_OW 67
// if nation = 1 then
8640: LD_VAR 0 5
8644: PUSH
8645: LD_INT 1
8647: EQUAL
8648: IFFALSE 9153
// begin uc_side = side ;
8650: LD_ADDR_OWVAR 20
8654: PUSH
8655: LD_VAR 0 2
8659: ST_TO_ADDR
// uc_nation = nation ;
8660: LD_ADDR_OWVAR 21
8664: PUSH
8665: LD_VAR 0 5
8669: ST_TO_ADDR
// vc_engine = vehengine ;
8670: LD_ADDR_OWVAR 39
8674: PUSH
8675: LD_VAR 0 6
8679: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8680: LD_ADDR_OWVAR 38
8684: PUSH
8685: LD_VAR 0 7
8689: PUSH
8690: LD_INT 1
8692: PPUSH
8693: LD_VAR 0 7
8697: PPUSH
8698: CALL_OW 12
8702: ARRAY
8703: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8704: LD_ADDR_OWVAR 40
8708: PUSH
8709: LD_VAR 0 10
8713: PUSH
8714: LD_INT 1
8716: PPUSH
8717: LD_VAR 0 10
8721: PPUSH
8722: CALL_OW 12
8726: ARRAY
8727: ST_TO_ADDR
// for j = 1 to AMWeapon do
8728: LD_ADDR_VAR 0 14
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_VAR 0 10
8742: PUSH
8743: FOR_TO
8744: IFFALSE 9045
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8746: LD_VAR 0 10
8750: PUSH
8751: LD_VAR 0 14
8755: ARRAY
8756: PUSH
8757: LD_INT 2
8759: EQUAL
8760: PUSH
8761: LD_VAR 0 10
8765: PUSH
8766: LD_VAR 0 14
8770: ARRAY
8771: PUSH
8772: LD_INT 3
8774: EQUAL
8775: OR
8776: IFFALSE 8829
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8778: LD_ADDR_VAR 0 19
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 3
8791: PUSH
8792: LD_INT 4
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8805: LD_ADDR_OWVAR 37
8809: PUSH
8810: LD_VAR 0 19
8814: PUSH
8815: LD_INT 1
8817: PPUSH
8818: LD_VAR 0 19
8822: PPUSH
8823: CALL_OW 12
8827: ARRAY
8828: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8829: LD_VAR 0 10
8833: PUSH
8834: LD_VAR 0 14
8838: ARRAY
8839: PUSH
8840: LD_INT 4
8842: EQUAL
8843: PUSH
8844: LD_VAR 0 10
8848: PUSH
8849: LD_VAR 0 14
8853: ARRAY
8854: PUSH
8855: LD_INT 5
8857: EQUAL
8858: OR
8859: PUSH
8860: LD_VAR 0 10
8864: PUSH
8865: LD_VAR 0 14
8869: ARRAY
8870: PUSH
8871: LD_INT 9
8873: EQUAL
8874: OR
8875: PUSH
8876: LD_VAR 0 10
8880: PUSH
8881: LD_VAR 0 14
8885: ARRAY
8886: PUSH
8887: LD_INT 11
8889: EQUAL
8890: OR
8891: PUSH
8892: LD_VAR 0 10
8896: PUSH
8897: LD_VAR 0 14
8901: ARRAY
8902: PUSH
8903: LD_INT 7
8905: EQUAL
8906: OR
8907: IFFALSE 8956
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8909: LD_ADDR_VAR 0 19
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 3
8919: PUSH
8920: LD_INT 4
8922: PUSH
8923: LD_INT 5
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8932: LD_ADDR_OWVAR 37
8936: PUSH
8937: LD_VAR 0 19
8941: PUSH
8942: LD_INT 1
8944: PPUSH
8945: LD_VAR 0 19
8949: PPUSH
8950: CALL_OW 12
8954: ARRAY
8955: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8956: LD_VAR 0 10
8960: PUSH
8961: LD_VAR 0 14
8965: ARRAY
8966: PUSH
8967: LD_INT 8
8969: EQUAL
8970: PUSH
8971: LD_VAR 0 10
8975: PUSH
8976: LD_VAR 0 14
8980: ARRAY
8981: PUSH
8982: LD_INT 6
8984: EQUAL
8985: OR
8986: PUSH
8987: LD_VAR 0 10
8991: PUSH
8992: LD_VAR 0 14
8996: ARRAY
8997: PUSH
8998: LD_INT 10
9000: EQUAL
9001: OR
9002: IFFALSE 9043
// begin amChassisTab = [ 4 , 5 ] ;
9004: LD_ADDR_VAR 0 19
9008: PUSH
9009: LD_INT 4
9011: PUSH
9012: LD_INT 5
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9019: LD_ADDR_OWVAR 37
9023: PUSH
9024: LD_VAR 0 19
9028: PUSH
9029: LD_INT 1
9031: PPUSH
9032: LD_VAR 0 19
9036: PPUSH
9037: CALL_OW 12
9041: ARRAY
9042: ST_TO_ADDR
// end ; end ;
9043: GO 8743
9045: POP
9046: POP
// veh = CreateVehicle ;
9047: LD_ADDR_VAR 0 16
9051: PUSH
9052: CALL_OW 45
9056: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9057: LD_VAR 0 16
9061: PPUSH
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
// if vc_control = 1 then
9074: LD_OWVAR 38
9078: PUSH
9079: LD_INT 1
9081: EQUAL
9082: IFFALSE 9139
// begin hc_gallery =  ;
9084: LD_ADDR_OWVAR 33
9088: PUSH
9089: LD_STRING 
9091: ST_TO_ADDR
// hc_name =  ;
9092: LD_ADDR_OWVAR 26
9096: PUSH
9097: LD_STRING 
9099: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9100: LD_INT 0
9102: PPUSH
9103: LD_INT 3
9105: PPUSH
9106: LD_VAR 0 4
9110: PPUSH
9111: CALL_OW 380
// un = CreateHuman ;
9115: LD_ADDR_VAR 0 15
9119: PUSH
9120: CALL_OW 44
9124: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9125: LD_VAR 0 15
9129: PPUSH
9130: LD_VAR 0 16
9134: PPUSH
9135: CALL_OW 52
// end ; i = i + 1 ;
9139: LD_ADDR_VAR 0 13
9143: PUSH
9144: LD_VAR 0 13
9148: PUSH
9149: LD_INT 1
9151: PLUS
9152: ST_TO_ADDR
// end ; if nation = 2 then
9153: LD_VAR 0 5
9157: PUSH
9158: LD_INT 2
9160: EQUAL
9161: IFFALSE 9599
// begin uc_side = side ;
9163: LD_ADDR_OWVAR 20
9167: PUSH
9168: LD_VAR 0 2
9172: ST_TO_ADDR
// uc_nation = nation ;
9173: LD_ADDR_OWVAR 21
9177: PUSH
9178: LD_VAR 0 5
9182: ST_TO_ADDR
// vc_engine = vehengine ;
9183: LD_ADDR_OWVAR 39
9187: PUSH
9188: LD_VAR 0 6
9192: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9193: LD_ADDR_OWVAR 38
9197: PUSH
9198: LD_VAR 0 7
9202: PUSH
9203: LD_INT 1
9205: PPUSH
9206: LD_VAR 0 7
9210: PPUSH
9211: CALL_OW 12
9215: ARRAY
9216: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9217: LD_ADDR_OWVAR 40
9221: PUSH
9222: LD_VAR 0 9
9226: PUSH
9227: LD_INT 1
9229: PPUSH
9230: LD_VAR 0 9
9234: PPUSH
9235: CALL_OW 12
9239: ARRAY
9240: ST_TO_ADDR
// for j = 1 to ARWeapons do
9241: LD_ADDR_VAR 0 14
9245: PUSH
9246: DOUBLE
9247: LD_INT 1
9249: DEC
9250: ST_TO_ADDR
9251: LD_VAR 0 9
9255: PUSH
9256: FOR_TO
9257: IFFALSE 9491
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9259: LD_VAR 0 9
9263: PUSH
9264: LD_VAR 0 14
9268: ARRAY
9269: PUSH
9270: LD_INT 24
9272: EQUAL
9273: PUSH
9274: LD_VAR 0 9
9278: PUSH
9279: LD_VAR 0 14
9283: ARRAY
9284: PUSH
9285: LD_INT 22
9287: EQUAL
9288: OR
9289: PUSH
9290: LD_VAR 0 9
9294: PUSH
9295: LD_VAR 0 14
9299: ARRAY
9300: PUSH
9301: LD_INT 23
9303: EQUAL
9304: OR
9305: PUSH
9306: LD_VAR 0 9
9310: PUSH
9311: LD_VAR 0 14
9315: ARRAY
9316: PUSH
9317: LD_INT 30
9319: EQUAL
9320: OR
9321: IFFALSE 9370
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9323: LD_ADDR_VAR 0 18
9327: PUSH
9328: LD_INT 11
9330: PUSH
9331: LD_INT 12
9333: PUSH
9334: LD_INT 13
9336: PUSH
9337: LD_INT 14
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9346: LD_ADDR_OWVAR 37
9350: PUSH
9351: LD_VAR 0 18
9355: PUSH
9356: LD_INT 1
9358: PPUSH
9359: LD_VAR 0 18
9363: PPUSH
9364: CALL_OW 12
9368: ARRAY
9369: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9370: LD_VAR 0 9
9374: PUSH
9375: LD_VAR 0 14
9379: ARRAY
9380: PUSH
9381: LD_INT 29
9383: EQUAL
9384: PUSH
9385: LD_VAR 0 9
9389: PUSH
9390: LD_VAR 0 14
9394: ARRAY
9395: PUSH
9396: LD_INT 28
9398: EQUAL
9399: OR
9400: PUSH
9401: LD_VAR 0 9
9405: PUSH
9406: LD_VAR 0 14
9410: ARRAY
9411: PUSH
9412: LD_INT 27
9414: EQUAL
9415: OR
9416: PUSH
9417: LD_VAR 0 9
9421: PUSH
9422: LD_VAR 0 14
9426: ARRAY
9427: PUSH
9428: LD_INT 26
9430: EQUAL
9431: OR
9432: PUSH
9433: LD_VAR 0 9
9437: PUSH
9438: LD_VAR 0 14
9442: ARRAY
9443: PUSH
9444: LD_INT 25
9446: EQUAL
9447: OR
9448: IFFALSE 9489
// begin arChassisTab = [ 13 , 14 ] ;
9450: LD_ADDR_VAR 0 18
9454: PUSH
9455: LD_INT 13
9457: PUSH
9458: LD_INT 14
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9465: LD_ADDR_OWVAR 37
9469: PUSH
9470: LD_VAR 0 18
9474: PUSH
9475: LD_INT 1
9477: PPUSH
9478: LD_VAR 0 18
9482: PPUSH
9483: CALL_OW 12
9487: ARRAY
9488: ST_TO_ADDR
// end ; end ;
9489: GO 9256
9491: POP
9492: POP
// veh = CreateVehicle ;
9493: LD_ADDR_VAR 0 16
9497: PUSH
9498: CALL_OW 45
9502: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9503: LD_VAR 0 16
9507: PPUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_INT 0
9515: PPUSH
9516: CALL_OW 49
// if vc_control = 1 then
9520: LD_OWVAR 38
9524: PUSH
9525: LD_INT 1
9527: EQUAL
9528: IFFALSE 9585
// begin hc_gallery =  ;
9530: LD_ADDR_OWVAR 33
9534: PUSH
9535: LD_STRING 
9537: ST_TO_ADDR
// hc_name =  ;
9538: LD_ADDR_OWVAR 26
9542: PUSH
9543: LD_STRING 
9545: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9546: LD_INT 0
9548: PPUSH
9549: LD_INT 3
9551: PPUSH
9552: LD_VAR 0 4
9556: PPUSH
9557: CALL_OW 380
// un = CreateHuman ;
9561: LD_ADDR_VAR 0 15
9565: PUSH
9566: CALL_OW 44
9570: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9571: LD_VAR 0 15
9575: PPUSH
9576: LD_VAR 0 16
9580: PPUSH
9581: CALL_OW 52
// end ; i = i + 1 ;
9585: LD_ADDR_VAR 0 13
9589: PUSH
9590: LD_VAR 0 13
9594: PUSH
9595: LD_INT 1
9597: PLUS
9598: ST_TO_ADDR
// end ; if nation = 3 then
9599: LD_VAR 0 5
9603: PUSH
9604: LD_INT 3
9606: EQUAL
9607: IFFALSE 10013
// begin uc_side = side ;
9609: LD_ADDR_OWVAR 20
9613: PUSH
9614: LD_VAR 0 2
9618: ST_TO_ADDR
// uc_nation = nation ;
9619: LD_ADDR_OWVAR 21
9623: PUSH
9624: LD_VAR 0 5
9628: ST_TO_ADDR
// vc_engine = vehengine ;
9629: LD_ADDR_OWVAR 39
9633: PUSH
9634: LD_VAR 0 6
9638: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9639: LD_ADDR_OWVAR 38
9643: PUSH
9644: LD_VAR 0 7
9648: PUSH
9649: LD_INT 1
9651: PPUSH
9652: LD_VAR 0 7
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9663: LD_ADDR_OWVAR 40
9667: PUSH
9668: LD_VAR 0 8
9672: PUSH
9673: LD_INT 1
9675: PPUSH
9676: LD_VAR 0 8
9680: PPUSH
9681: CALL_OW 12
9685: ARRAY
9686: ST_TO_ADDR
// for j = 1 to RuWeapons do
9687: LD_ADDR_VAR 0 14
9691: PUSH
9692: DOUBLE
9693: LD_INT 1
9695: DEC
9696: ST_TO_ADDR
9697: LD_VAR 0 8
9701: PUSH
9702: FOR_TO
9703: IFFALSE 9905
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9705: LD_VAR 0 8
9709: PUSH
9710: LD_VAR 0 14
9714: ARRAY
9715: PUSH
9716: LD_INT 42
9718: EQUAL
9719: PUSH
9720: LD_VAR 0 8
9724: PUSH
9725: LD_VAR 0 14
9729: ARRAY
9730: PUSH
9731: LD_INT 43
9733: EQUAL
9734: OR
9735: PUSH
9736: LD_VAR 0 8
9740: PUSH
9741: LD_VAR 0 14
9745: ARRAY
9746: PUSH
9747: LD_INT 44
9749: EQUAL
9750: OR
9751: PUSH
9752: LD_VAR 0 8
9756: PUSH
9757: LD_VAR 0 14
9761: ARRAY
9762: PUSH
9763: LD_INT 45
9765: EQUAL
9766: OR
9767: PUSH
9768: LD_VAR 0 8
9772: PUSH
9773: LD_VAR 0 14
9777: ARRAY
9778: PUSH
9779: LD_INT 49
9781: EQUAL
9782: OR
9783: IFFALSE 9832
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9785: LD_ADDR_VAR 0 17
9789: PUSH
9790: LD_INT 21
9792: PUSH
9793: LD_INT 22
9795: PUSH
9796: LD_INT 23
9798: PUSH
9799: LD_INT 24
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9808: LD_ADDR_OWVAR 37
9812: PUSH
9813: LD_VAR 0 17
9817: PUSH
9818: LD_INT 1
9820: PPUSH
9821: LD_VAR 0 17
9825: PPUSH
9826: CALL_OW 12
9830: ARRAY
9831: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9832: LD_VAR 0 8
9836: PUSH
9837: LD_VAR 0 14
9841: ARRAY
9842: PUSH
9843: LD_INT 46
9845: EQUAL
9846: PUSH
9847: LD_VAR 0 8
9851: PUSH
9852: LD_VAR 0 14
9856: ARRAY
9857: PUSH
9858: LD_INT 47
9860: EQUAL
9861: OR
9862: IFFALSE 9903
// begin ruChassisTab = [ 23 , 24 ] ;
9864: LD_ADDR_VAR 0 17
9868: PUSH
9869: LD_INT 23
9871: PUSH
9872: LD_INT 24
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9879: LD_ADDR_OWVAR 37
9883: PUSH
9884: LD_VAR 0 17
9888: PUSH
9889: LD_INT 1
9891: PPUSH
9892: LD_VAR 0 17
9896: PPUSH
9897: CALL_OW 12
9901: ARRAY
9902: ST_TO_ADDR
// end ; end ;
9903: GO 9702
9905: POP
9906: POP
// veh = CreateVehicle ;
9907: LD_ADDR_VAR 0 16
9911: PUSH
9912: CALL_OW 45
9916: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9917: LD_VAR 0 16
9921: PPUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: CALL_OW 49
// if vc_control = 1 then
9934: LD_OWVAR 38
9938: PUSH
9939: LD_INT 1
9941: EQUAL
9942: IFFALSE 9999
// begin hc_gallery =  ;
9944: LD_ADDR_OWVAR 33
9948: PUSH
9949: LD_STRING 
9951: ST_TO_ADDR
// hc_name =  ;
9952: LD_ADDR_OWVAR 26
9956: PUSH
9957: LD_STRING 
9959: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9960: LD_INT 0
9962: PPUSH
9963: LD_INT 3
9965: PPUSH
9966: LD_VAR 0 4
9970: PPUSH
9971: CALL_OW 380
// un = CreateHuman ;
9975: LD_ADDR_VAR 0 15
9979: PUSH
9980: CALL_OW 44
9984: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9985: LD_VAR 0 15
9989: PPUSH
9990: LD_VAR 0 16
9994: PPUSH
9995: CALL_OW 52
// end ; i = i + 1 ;
9999: LD_ADDR_VAR 0 13
10003: PUSH
10004: LD_VAR 0 13
10008: PUSH
10009: LD_INT 1
10011: PLUS
10012: ST_TO_ADDR
// end ; until i = vehCount ;
10013: LD_VAR 0 13
10017: PUSH
10018: LD_VAR 0 3
10022: EQUAL
10023: IFFALSE 8633
// repeat wait ( 0 0$1 ) ;
10025: LD_INT 35
10027: PPUSH
10028: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10032: LD_ADDR_VAR 0 20
10036: PUSH
10037: LD_INT 22
10039: PUSH
10040: LD_VAR 0 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 21
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 24
10061: PUSH
10062: LD_INT 661
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: PPUSH
10074: CALL_OW 69
10078: ST_TO_ADDR
// if vehicleOK_list > 0 then
10079: LD_VAR 0 20
10083: PUSH
10084: LD_INT 0
10086: GREATER
10087: IFFALSE 10278
// begin for i in vehicleOK_list do
10089: LD_ADDR_VAR 0 13
10093: PUSH
10094: LD_VAR 0 20
10098: PUSH
10099: FOR_IN
10100: IFFALSE 10276
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10102: LD_ADDR_VAR 0 21
10106: PUSH
10107: LD_INT 22
10109: PUSH
10110: LD_VAR 0 11
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 69
10123: PPUSH
10124: LD_VAR 0 13
10128: PPUSH
10129: CALL_OW 74
10133: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10134: LD_ADDR_VAR 0 22
10138: PUSH
10139: LD_INT 22
10141: PUSH
10142: LD_VAR 0 11
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: LD_INT 59
10156: PUSH
10157: EMPTY
10158: LIST
10159: PUSH
10160: LD_INT 21
10162: PUSH
10163: LD_INT 1
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: PUSH
10170: LD_INT 21
10172: PUSH
10173: LD_INT 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: PPUSH
10198: LD_VAR 0 13
10202: PPUSH
10203: CALL_OW 74
10207: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10208: LD_VAR 0 13
10212: PPUSH
10213: LD_VAR 0 21
10217: PPUSH
10218: CALL_OW 296
10222: PUSH
10223: LD_INT 8
10225: PLUS
10226: PUSH
10227: LD_VAR 0 13
10231: PPUSH
10232: LD_VAR 0 22
10236: PPUSH
10237: CALL_OW 296
10241: LESS
10242: IFFALSE 10260
// begin ComAttackUnit ( i , target1 ) ;
10244: LD_VAR 0 13
10248: PPUSH
10249: LD_VAR 0 21
10253: PPUSH
10254: CALL_OW 115
// end else
10258: GO 10274
// begin ComAttackUnit ( i , target2 ) ;
10260: LD_VAR 0 13
10264: PPUSH
10265: LD_VAR 0 22
10269: PPUSH
10270: CALL_OW 115
// end ; end ;
10274: GO 10099
10276: POP
10277: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) = 0 diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 31 ] ] ) = 0 ;
10278: LD_INT 22
10280: PUSH
10281: LD_VAR 0 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 21
10292: PUSH
10293: LD_INT 2
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 24
10302: PUSH
10303: LD_INT 250
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: PUSH
10320: LD_INT 0
10322: EQUAL
10323: PUSH
10324: LD_INT 22
10326: PUSH
10327: LD_VAR 0 2
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 21
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 34
10348: PUSH
10349: LD_INT 31
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: PUSH
10366: LD_INT 0
10368: EQUAL
10369: DIFF
10370: IFFALSE 10025
// end ; end_of_file
10372: LD_VAR 0 12
10376: RET
// every 0 0$1 do
10377: GO 10379
10379: DISABLE
// begin enable ;
10380: ENABLE
// IntBazooka ( 7 , 1 ) ;
10381: LD_INT 7
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL 6096 0 2
// RepairVehicle ( 8 , ArabianRepairArea , 86 , 49 , 1 ) ;
10391: LD_INT 8
10393: PPUSH
10394: LD_INT 14
10396: PPUSH
10397: LD_INT 86
10399: PPUSH
10400: LD_INT 49
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: CALL 6455 0 5
// end ; end_of_file
10410: END
// every 0 0$1 trigger eventVar4 = 1 do
10411: LD_EXP 37
10415: PUSH
10416: LD_INT 1
10418: EQUAL
10419: IFFALSE 11213
10421: GO 10423
10423: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10424: LD_EXP 1
10428: PPUSH
10429: LD_STRING D9b-JMM-1
10431: PPUSH
10432: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10436: LD_EXP 15
10440: PPUSH
10441: LD_STRING D9b-Pow-1
10443: PPUSH
10444: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10448: LD_EXP 1
10452: PPUSH
10453: LD_STRING D9b-JMM-2
10455: PPUSH
10456: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10460: LD_EXP 15
10464: PPUSH
10465: LD_STRING D9b-Pow-2
10467: PPUSH
10468: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10472: LD_EXP 1
10476: PPUSH
10477: LD_STRING D9b-JMM-3
10479: PPUSH
10480: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10484: LD_EXP 15
10488: PPUSH
10489: LD_STRING D9b-Pow-3
10491: PPUSH
10492: CALL_OW 94
// if burlakStatus = 1 then
10496: LD_EXP 26
10500: PUSH
10501: LD_INT 1
10503: EQUAL
10504: IFFALSE 10518
// begin AddMedal ( Burlak , 1 ) ;
10506: LD_STRING Burlak
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 101
// end else
10516: GO 10529
// begin AddMedal ( Burlak , - 1 ) ;
10518: LD_STRING Burlak
10520: PPUSH
10521: LD_INT 1
10523: NEG
10524: PPUSH
10525: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10529: LD_EXP 2
10533: PPUSH
10534: CALL_OW 302
10538: IFFALSE 10552
// begin AddMedal ( Stevens , 1 ) ;
10540: LD_STRING Stevens
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 101
// end else
10550: GO 10563
// begin AddMedal ( Stevens , - 1 ) ;
10552: LD_STRING Stevens
10554: PPUSH
10555: LD_INT 1
10557: NEG
10558: PPUSH
10559: CALL_OW 101
// end ; if radarOnSpot = 1 then
10563: LD_EXP 28
10567: PUSH
10568: LD_INT 1
10570: EQUAL
10571: IFFALSE 10585
// begin AddMedal ( Observation , 1 ) ;
10573: LD_STRING Observation
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 101
// end else
10583: GO 10596
// begin AddMedal ( Observation , - 1 ) ;
10585: LD_STRING Observation
10587: PPUSH
10588: LD_INT 1
10590: NEG
10591: PPUSH
10592: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10596: LD_STRING MAIN
10598: PPUSH
10599: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10603: LD_EXP 26
10607: PPUSH
10608: LD_STRING 13_BurlakStatus_1
10610: PPUSH
10611: CALL_OW 39
// if IsOk ( Stevens ) then
10615: LD_EXP 2
10619: PPUSH
10620: CALL_OW 302
10624: IFFALSE 10638
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10626: LD_INT 1
10628: PPUSH
10629: LD_STRING 13_StevensStatus_1
10631: PPUSH
10632: CALL_OW 39
10636: GO 10648
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10638: LD_INT 0
10640: PPUSH
10641: LD_STRING 13_StevensStatus_1
10643: PPUSH
10644: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10648: LD_INT 22
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 21
10660: PUSH
10661: LD_INT 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 25
10683: PUSH
10684: LD_INT 2
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 25
10693: PUSH
10694: LD_INT 3
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 25
10703: PUSH
10704: LD_INT 4
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 25
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 25
10723: PUSH
10724: LD_INT 8
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 69
10749: PPUSH
10750: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_EXP 33
10763: PUSH
10764: LD_STRING JMM
10766: STR
10767: PPUSH
10768: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10772: LD_EXP 8
10776: PPUSH
10777: LD_EXP 33
10781: PUSH
10782: LD_STRING Brown
10784: STR
10785: PPUSH
10786: CALL 6404 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10790: LD_EXP 4
10794: PPUSH
10795: LD_EXP 33
10799: PUSH
10800: LD_STRING Donaldson
10802: STR
10803: PPUSH
10804: CALL 6404 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10808: LD_EXP 5
10812: PPUSH
10813: LD_EXP 33
10817: PUSH
10818: LD_STRING Bobby
10820: STR
10821: PPUSH
10822: CALL 6404 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10826: LD_EXP 6
10830: PPUSH
10831: LD_EXP 33
10835: PUSH
10836: LD_STRING Cyrus
10838: STR
10839: PPUSH
10840: CALL 6404 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10844: LD_EXP 3
10848: PPUSH
10849: LD_EXP 33
10853: PUSH
10854: LD_STRING Lisa
10856: STR
10857: PPUSH
10858: CALL 6404 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10862: LD_EXP 13
10866: PPUSH
10867: LD_EXP 33
10871: PUSH
10872: LD_STRING Frank
10874: STR
10875: PPUSH
10876: CALL 6404 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10880: LD_EXP 14
10884: PPUSH
10885: LD_EXP 33
10889: PUSH
10890: LD_STRING Kikuchi
10892: STR
10893: PPUSH
10894: CALL 6404 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10898: LD_EXP 10
10902: PPUSH
10903: LD_EXP 33
10907: PUSH
10908: LD_STRING Houten
10910: STR
10911: PPUSH
10912: CALL 6404 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10916: LD_EXP 12
10920: PPUSH
10921: LD_EXP 33
10925: PUSH
10926: LD_STRING Gary
10928: STR
10929: PPUSH
10930: CALL 6404 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10934: LD_EXP 11
10938: PPUSH
10939: LD_EXP 33
10943: PUSH
10944: LD_STRING Cornell
10946: STR
10947: PPUSH
10948: CALL 6404 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10952: LD_EXP 7
10956: PPUSH
10957: LD_EXP 33
10961: PUSH
10962: LD_STRING Denis
10964: STR
10965: PPUSH
10966: CALL 6404 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10970: LD_EXP 9
10974: PPUSH
10975: LD_EXP 33
10979: PUSH
10980: LD_STRING Gladstone
10982: STR
10983: PPUSH
10984: CALL 6404 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10988: LD_EXP 2
10992: PPUSH
10993: LD_EXP 33
10997: PUSH
10998: LD_STRING Stevens
11000: STR
11001: PPUSH
11002: CALL 6404 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11006: LD_INT 50
11008: PUSH
11009: EMPTY
11010: LIST
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 1
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 21
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: LD_INT 25
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 25
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 25
11057: PUSH
11058: LD_INT 3
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: PUSH
11065: LD_INT 25
11067: PUSH
11068: LD_INT 4
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PUSH
11075: LD_INT 25
11077: PUSH
11078: LD_INT 5
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 25
11087: PUSH
11088: LD_INT 8
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: LD_EXP 1
11119: PUSH
11120: LD_EXP 8
11124: PUSH
11125: LD_EXP 4
11129: PUSH
11130: LD_EXP 5
11134: PUSH
11135: LD_EXP 6
11139: PUSH
11140: LD_EXP 3
11144: PUSH
11145: LD_EXP 13
11149: PUSH
11150: LD_EXP 9
11154: PUSH
11155: LD_EXP 14
11159: PUSH
11160: LD_EXP 7
11164: PUSH
11165: LD_EXP 10
11169: PUSH
11170: LD_EXP 12
11174: PUSH
11175: LD_EXP 11
11179: PUSH
11180: LD_EXP 2
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: DIFF
11201: PPUSH
11202: LD_STRING 13_other_survivors
11204: PPUSH
11205: CALL_OW 38
// YouWin ;
11209: CALL_OW 103
// end ; end_of_file
11213: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11214: LD_EXP 30
11218: PUSH
11219: LD_INT 2
11221: EQUAL
11222: IFFALSE 11358
11224: GO 11226
11226: DISABLE
11227: LD_INT 0
11229: PPUSH
11230: PPUSH
11231: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11232: LD_ADDR_VAR 0 2
11236: PUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 30
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: ST_TO_ADDR
// for i in tmp do
11295: LD_ADDR_VAR 0 1
11299: PUSH
11300: LD_VAR 0 2
11304: PUSH
11305: FOR_IN
11306: IFFALSE 11339
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_VAR 0 3
11317: PUSH
11318: LD_VAR 0 1
11322: PPUSH
11323: CALL_OW 274
11327: PPUSH
11328: LD_INT 3
11330: PPUSH
11331: CALL_OW 275
11335: PLUS
11336: ST_TO_ADDR
11337: GO 11305
11339: POP
11340: POP
// if yourSiberite < 79 then
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 79
11348: LESS
11349: IFFALSE 11358
// YouLost ( siberite ) ;
11351: LD_STRING siberite
11353: PPUSH
11354: CALL_OW 104
// end ;
11358: PPOPN 3
11360: END
// every 0 0$1 trigger IsDead ( JMM ) do
11361: LD_EXP 1
11365: PPUSH
11366: CALL_OW 301
11370: IFFALSE 11382
11372: GO 11374
11374: DISABLE
// YouLost ( JMM ) ; end_of_file
11375: LD_STRING JMM
11377: PPUSH
11378: CALL_OW 104
11382: END
// every 15 15$0 + 5 5$0 do
11383: GO 11385
11385: DISABLE
// begin enable ;
11386: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 2 , 4 ) , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , 3 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11387: LD_INT 8
11389: PPUSH
11390: LD_INT 2
11392: PPUSH
11393: LD_INT 2
11395: PPUSH
11396: LD_INT 4
11398: PPUSH
11399: CALL_OW 12
11403: PPUSH
11404: LD_INT 0
11406: PPUSH
11407: LD_INT 0
11409: PPUSH
11410: LD_INT 1
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: LD_INT 3
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: PUSH
11424: LD_OWVAR 67
11428: ARRAY
11429: PPUSH
11430: LD_INT 3
11432: PPUSH
11433: LD_INT 10
11435: PPUSH
11436: LD_INT 8
11438: PUSH
11439: LD_INT 9
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 1
11448: PPUSH
11449: LD_INT 2
11451: PPUSH
11452: CALL_OW 12
11456: ARRAY
11457: PPUSH
11458: LD_INT 12
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL 7290 0 11
// end ;
11468: END
// every 15 15$0 + 5 5$0 do
11469: GO 11471
11471: DISABLE
// begin enable ;
11472: ENABLE
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 1 , 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11473: LD_INT 8
11475: PUSH
11476: LD_INT 9
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 2
11488: PPUSH
11489: CALL_OW 12
11493: ARRAY
11494: PPUSH
11495: LD_INT 8
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: LD_INT 3
11503: PPUSH
11504: CALL_OW 12
11508: PUSH
11509: LD_INT 2
11511: PPUSH
11512: LD_INT 4
11514: PPUSH
11515: CALL_OW 12
11519: PUSH
11520: LD_INT 3
11522: PPUSH
11523: LD_INT 5
11525: PPUSH
11526: CALL_OW 12
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: PUSH
11536: LD_OWVAR 67
11540: ARRAY
11541: PPUSH
11542: LD_INT 10
11544: PPUSH
11545: LD_INT 2
11547: PPUSH
11548: LD_INT 3
11550: PPUSH
11551: LD_INT 1
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: PPUSH
11565: EMPTY
11566: PPUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 27
11575: PUSH
11576: LD_INT 28
11578: PUSH
11579: LD_INT 29
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: PPUSH
11589: EMPTY
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL 8549 0 11
// end ; end_of_file
11598: END
// every 1 1$0 do
11599: GO 11601
11601: DISABLE
// begin enable ;
11602: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11603: LD_INT 3
11605: PPUSH
11606: LD_INT 5
11608: PPUSH
11609: CALL_OW 12
11613: PPUSH
11614: LD_INT 13
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 55
// end ;
11624: END
