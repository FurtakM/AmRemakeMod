// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 41
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 36
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 42
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1527 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1431 0 0
// PrepareDifficulty ;
 167: CALL 6473 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 42
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side = 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING 13c_JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: CALL 6157 0 2
 515: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 516: LD_ADDR_EXP 2
 520: PUSH
 521: LD_STRING 13c_Stevens
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL 6157 0 2
 531: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 532: LD_ADDR_EXP 3
 536: PUSH
 537: LD_STRING 13c_Lisa
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL 6157 0 2
 547: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 548: LD_ADDR_EXP 4
 552: PUSH
 553: LD_STRING 13c_Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 6157 0 2
 563: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 564: LD_ADDR_EXP 5
 568: PUSH
 569: LD_STRING 13c_Bobby
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 6157 0 2
 579: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 580: LD_ADDR_EXP 6
 584: PUSH
 585: LD_STRING 13c_Cyrus
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: CALL 6157 0 2
 595: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 596: LD_ADDR_EXP 7
 600: PUSH
 601: LD_STRING 13c_Denis
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 6157 0 2
 611: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 612: LD_ADDR_EXP 8
 616: PUSH
 617: LD_STRING 13c_Brown
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL 6157 0 2
 627: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 628: LD_ADDR_EXP 9
 632: PUSH
 633: LD_STRING 13c_Gladstone
 635: PPUSH
 636: LD_INT 1
 638: PPUSH
 639: CALL 6157 0 2
 643: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 644: LD_ADDR_EXP 10
 648: PUSH
 649: LD_STRING 13c_Houten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6157 0 2
 659: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 660: LD_ADDR_EXP 11
 664: PUSH
 665: LD_STRING 13c_Cornel
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL 6157 0 2
 675: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_STRING 13c_Gary
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL 6157 0 2
 691: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_STRING 13c_Frank
 699: PPUSH
 700: LD_INT 1
 702: PPUSH
 703: CALL 6157 0 2
 707: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_STRING 13c_Kikuchi
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: CALL 6157 0 2
 723: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 724: LD_ADDR_EXP 15
 728: PUSH
 729: LD_STRING Powell
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL 6157 0 2
 739: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 789: LD_EXP 2
 793: PPUSH
 794: LD_INT 22
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 21
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 58
 816: PUSH
 817: EMPTY
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: PPUSH
 834: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 1
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 21
 855: PUSH
 856: LD_INT 2
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 58
 865: PUSH
 866: EMPTY
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 887: LD_EXP 4
 891: PPUSH
 892: LD_INT 22
 894: PUSH
 895: LD_INT 1
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 2
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 58
 914: PUSH
 915: EMPTY
 916: LIST
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PPUSH
 923: CALL_OW 69
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 936: LD_EXP 5
 940: PPUSH
 941: LD_INT 22
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: LD_INT 21
 953: PUSH
 954: LD_INT 2
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 58
 963: PUSH
 964: EMPTY
 965: LIST
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 985: LD_EXP 6
 989: PPUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 21
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 58
1012: PUSH
1013: EMPTY
1014: LIST
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 69
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1034: LD_EXP 7
1038: PPUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1083: LD_EXP 8
1087: PPUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 21
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 58
1110: PUSH
1111: EMPTY
1112: LIST
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: PPUSH
1119: CALL_OW 69
1123: PUSH
1124: LD_INT 1
1126: ARRAY
1127: PPUSH
1128: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1132: LD_EXP 9
1136: PPUSH
1137: LD_INT 22
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 21
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 58
1159: PUSH
1160: EMPTY
1161: LIST
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: PPUSH
1168: CALL_OW 69
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1181: LD_EXP 10
1185: PPUSH
1186: LD_INT 22
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: LD_INT 21
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 58
1208: PUSH
1209: EMPTY
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: PPUSH
1217: CALL_OW 69
1221: PUSH
1222: LD_INT 1
1224: ARRAY
1225: PPUSH
1226: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1230: LD_EXP 11
1234: PPUSH
1235: LD_INT 22
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 21
1247: PUSH
1248: LD_INT 2
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: LD_INT 58
1257: PUSH
1258: EMPTY
1259: LIST
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: PPUSH
1266: CALL_OW 69
1270: PUSH
1271: LD_INT 1
1273: ARRAY
1274: PPUSH
1275: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1279: LD_EXP 12
1283: PPUSH
1284: LD_INT 22
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 2
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 58
1306: PUSH
1307: EMPTY
1308: LIST
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1328: LD_EXP 13
1332: PPUSH
1333: LD_INT 22
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: LD_INT 21
1345: PUSH
1346: LD_INT 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: LD_INT 58
1355: PUSH
1356: EMPTY
1357: LIST
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: PPUSH
1364: CALL_OW 69
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PPUSH
1373: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1377: LD_EXP 14
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 21
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 58
1404: PUSH
1405: EMPTY
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 69
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: CALL_OW 52
// end ;
1426: LD_VAR 0 1
1430: RET
// export function PrepareAmericansRandom ; var i ; begin
1431: LD_INT 0
1433: PPUSH
1434: PPUSH
// uc_side = 1 ;
1435: LD_ADDR_OWVAR 20
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1443: LD_ADDR_EXP 16
1447: PUSH
1448: LD_STRING 13c_others
1450: PPUSH
1451: CALL_OW 31
1455: ST_TO_ADDR
// for i in others13 do
1456: LD_ADDR_VAR 0 2
1460: PUSH
1461: LD_EXP 16
1465: PUSH
1466: FOR_IN
1467: IFFALSE 1520
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1469: LD_VAR 0 2
1473: PPUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: PUSH
1510: LD_INT 1
1512: ARRAY
1513: PPUSH
1514: CALL_OW 52
1518: GO 1466
1520: POP
1521: POP
// end ;
1522: LD_VAR 0 1
1526: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1527: LD_INT 0
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1535: LD_ADDR_VAR 0 5
1539: PUSH
1540: LD_STRING 13_VehiclesIn13_1
1542: PPUSH
1543: EMPTY
1544: PPUSH
1545: CALL_OW 30
1549: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1550: LD_ADDR_EXP 24
1554: PUSH
1555: LD_STRING 13_ResourcesInCargo13_1
1557: PPUSH
1558: EMPTY
1559: PPUSH
1560: CALL_OW 30
1564: ST_TO_ADDR
// cargoList = [ ] ;
1565: LD_ADDR_VAR 0 6
1569: PUSH
1570: EMPTY
1571: ST_TO_ADDR
// uc_side = 1 ;
1572: LD_ADDR_OWVAR 20
1576: PUSH
1577: LD_INT 1
1579: ST_TO_ADDR
// if vehicles > 0 then
1580: LD_VAR 0 5
1584: PUSH
1585: LD_INT 0
1587: GREATER
1588: IFFALSE 1943
// begin for i := 1 to vehicles do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 5
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1755
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1608: LD_ADDR_OWVAR 21
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_VAR 0 2
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1628: LD_ADDR_OWVAR 37
1632: PUSH
1633: LD_VAR 0 5
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1648: LD_ADDR_OWVAR 39
1652: PUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 3
1666: ARRAY
1667: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1668: LD_ADDR_OWVAR 38
1672: PUSH
1673: LD_VAR 0 5
1677: PUSH
1678: LD_VAR 0 2
1682: ARRAY
1683: PUSH
1684: LD_INT 4
1686: ARRAY
1687: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1688: LD_ADDR_OWVAR 40
1692: PUSH
1693: LD_VAR 0 5
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PUSH
1704: LD_INT 5
1706: ARRAY
1707: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1708: LD_ADDR_OWVAR 41
1712: PUSH
1713: LD_INT 40
1715: ST_TO_ADDR
// veh = CreateVehicle ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 45
1725: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_INT 3
1733: PPUSH
1734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1738: LD_VAR 0 4
1742: PPUSH
1743: LD_INT 2
1745: PPUSH
1746: LD_INT 0
1748: PPUSH
1749: CALL_OW 49
// end ;
1753: GO 1605
1755: POP
1756: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1757: LD_ADDR_VAR 0 6
1761: PUSH
1762: LD_INT 22
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 21
1774: PUSH
1775: LD_INT 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 12
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PPUSH
1797: CALL_OW 69
1801: ST_TO_ADDR
// if cargoList > 0 then
1802: LD_VAR 0 6
1806: PUSH
1807: LD_INT 0
1809: GREATER
1810: IFFALSE 1943
// for i = 1 to cargoList do
1812: LD_ADDR_VAR 0 2
1816: PUSH
1817: DOUBLE
1818: LD_INT 1
1820: DEC
1821: ST_TO_ADDR
1822: LD_VAR 0 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1941
// begin if resources > 0 then
1830: LD_EXP 24
1834: PUSH
1835: LD_INT 0
1837: GREATER
1838: IFFALSE 1939
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1840: LD_VAR 0 6
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_EXP 24
1858: PUSH
1859: LD_VAR 0 2
1863: ARRAY
1864: PUSH
1865: LD_INT 1
1867: ARRAY
1868: PPUSH
1869: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 2
1886: PPUSH
1887: LD_EXP 24
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 2
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_EXP 24
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 3
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// end ; end ;
1939: GO 1827
1941: POP
1942: POP
// end ; end ;
1943: LD_VAR 0 1
1947: RET
// export function PowellSupport ; var i , veh , un ; begin
1948: LD_INT 0
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
// for i = 1 to 3 do
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: DOUBLE
1960: LD_INT 1
1962: DEC
1963: ST_TO_ADDR
1964: LD_INT 3
1966: PUSH
1967: FOR_TO
1968: IFFALSE 2169
// begin uc_nation = 1 ;
1970: LD_ADDR_OWVAR 21
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// vc_engine = 3 ;
1986: LD_ADDR_OWVAR 39
1990: PUSH
1991: LD_INT 3
1993: ST_TO_ADDR
// vc_control = 1 ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
2002: LD_ADDR_OWVAR 40
2006: PUSH
2007: LD_INT 9
2009: PUSH
2010: LD_INT 5
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: LD_INT 7
2018: PUSH
2019: LD_INT 6
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 5
2034: PPUSH
2035: CALL_OW 12
2039: ARRAY
2040: ST_TO_ADDR
// if vc_weapon = 6 then
2041: LD_OWVAR 40
2045: PUSH
2046: LD_INT 6
2048: EQUAL
2049: IFFALSE 2061
// vc_chassis = 4 else
2051: LD_ADDR_OWVAR 37
2055: PUSH
2056: LD_INT 4
2058: ST_TO_ADDR
2059: GO 2069
// vc_chassis = 3 ;
2061: LD_ADDR_OWVAR 37
2065: PUSH
2066: LD_INT 3
2068: ST_TO_ADDR
// veh = CreateVehicle ;
2069: LD_ADDR_VAR 0 3
2073: PUSH
2074: CALL_OW 45
2078: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 49
// SetDir ( veh , 1 ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 233
// hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 3
2127: PPUSH
2128: LD_INT 7
2130: PPUSH
2131: LD_INT 10
2133: PPUSH
2134: CALL_OW 12
2138: PPUSH
2139: CALL_OW 380
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_VAR 0 3
2162: PPUSH
2163: CALL_OW 52
// end ;
2167: GO 1967
2169: POP
2170: POP
// end ; end_of_file
2171: LD_VAR 0 1
2175: RET
// export function PrepareBurlak ; begin
2176: LD_INT 0
2178: PPUSH
// uc_side = 7 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 7
2186: ST_TO_ADDR
// uc_nation = 3 ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 3
2194: ST_TO_ADDR
// vc_engine = 3 ;
2195: LD_ADDR_OWVAR 39
2199: PUSH
2200: LD_INT 3
2202: ST_TO_ADDR
// vc_control = 1 ;
2203: LD_ADDR_OWVAR 38
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// vc_weapon = 46 ;
2211: LD_ADDR_OWVAR 40
2215: PUSH
2216: LD_INT 46
2218: ST_TO_ADDR
// vc_chassis = 24 ;
2219: LD_ADDR_OWVAR 37
2223: PUSH
2224: LD_INT 24
2226: ST_TO_ADDR
// Masha = CreateVehicle ;
2227: LD_ADDR_EXP 18
2231: PUSH
2232: CALL_OW 45
2236: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2237: LD_EXP 18
2241: PPUSH
2242: LD_INT 3
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2252: LD_EXP 18
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2264: LD_ADDR_EXP 17
2268: PUSH
2269: LD_STRING Burlak
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: CALL 6157 0 2
2279: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2280: LD_EXP 17
2284: PPUSH
2285: LD_EXP 18
2289: PPUSH
2290: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2294: LD_EXP 18
2298: PPUSH
2299: LD_INT 107
2301: PPUSH
2302: LD_INT 118
2304: PPUSH
2305: CALL_OW 114
// spawnBurlak = 1 ;
2309: LD_ADDR_EXP 27
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// end ;
2317: LD_VAR 0 1
2321: RET
// export function BurlakArmy ; var i , veh ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 7 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 7
2334: ST_TO_ADDR
// uc_nation = 3 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 3
2342: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2343: LD_ADDR_EXP 19
2347: PUSH
2348: LD_STRING Gnyevko
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL 6157 0 2
2358: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2359: LD_ADDR_EXP 20
2363: PUSH
2364: LD_STRING Titov
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL 6157 0 2
2374: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2375: LD_ADDR_EXP 21
2379: PUSH
2380: LD_STRING Xavier2
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL 6157 0 2
2390: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2391: LD_ADDR_EXP 22
2395: PUSH
2396: LD_STRING Belkov
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL 6157 0 2
2406: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2407: LD_ADDR_EXP 23
2411: PUSH
2412: LD_STRING Lipshchin
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL 6157 0 2
2422: ST_TO_ADDR
// for i = 1 to 5 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 5
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2525
// begin vc_engine = 3 ;
2439: LD_ADDR_OWVAR 39
2443: PUSH
2444: LD_INT 3
2446: ST_TO_ADDR
// vc_control = 1 ;
2447: LD_ADDR_OWVAR 38
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2455: LD_ADDR_OWVAR 40
2459: PUSH
2460: LD_INT 43
2462: PUSH
2463: LD_INT 44
2465: PUSH
2466: LD_INT 45
2468: PUSH
2469: LD_INT 49
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 4
2483: PPUSH
2484: CALL_OW 12
2488: ARRAY
2489: ST_TO_ADDR
// vc_chassis = 22 ;
2490: LD_ADDR_OWVAR 37
2494: PUSH
2495: LD_INT 22
2497: ST_TO_ADDR
// veh = CreateVehicle ;
2498: LD_ADDR_VAR 0 3
2502: PUSH
2503: CALL_OW 45
2507: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2508: LD_VAR 0 3
2512: PPUSH
2513: LD_INT 3
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
// end ;
2523: GO 2436
2525: POP
2526: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2527: LD_EXP 19
2531: PPUSH
2532: LD_INT 22
2534: PUSH
2535: LD_INT 7
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 21
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 58
2554: PUSH
2555: EMPTY
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PPUSH
2563: CALL_OW 69
2567: PUSH
2568: LD_INT 1
2570: ARRAY
2571: PPUSH
2572: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_INT 22
2583: PUSH
2584: LD_INT 7
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 21
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 58
2603: PUSH
2604: EMPTY
2605: LIST
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: PPUSH
2612: CALL_OW 69
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PPUSH
2621: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2625: LD_EXP 21
2629: PPUSH
2630: LD_INT 22
2632: PUSH
2633: LD_INT 7
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 21
2642: PUSH
2643: LD_INT 2
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: LD_INT 58
2652: PUSH
2653: EMPTY
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: PPUSH
2661: CALL_OW 69
2665: PUSH
2666: LD_INT 1
2668: ARRAY
2669: PPUSH
2670: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2674: LD_EXP 22
2678: PPUSH
2679: LD_INT 22
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 58
2701: PUSH
2702: EMPTY
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2723: LD_EXP 23
2727: PPUSH
2728: LD_INT 22
2730: PUSH
2731: LD_INT 7
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 21
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 58
2750: PUSH
2751: EMPTY
2752: LIST
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: PPUSH
2759: CALL_OW 69
2763: PUSH
2764: LD_INT 1
2766: ARRAY
2767: PPUSH
2768: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2772: LD_EXP 19
2776: PPUSH
2777: LD_INT 3
2779: PPUSH
2780: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2784: LD_EXP 20
2788: PUSH
2789: LD_EXP 23
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PPUSH
2798: LD_INT 9
2800: PPUSH
2801: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2805: LD_INT 22
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 21
2817: PUSH
2818: LD_INT 2
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 69
2833: PPUSH
2834: LD_INT 107
2836: PPUSH
2837: LD_INT 118
2839: PPUSH
2840: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2844: LD_INT 35
2846: PPUSH
2847: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2851: LD_INT 22
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 21
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 34
2873: PUSH
2874: LD_INT 49
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: CALL_OW 69
2890: PPUSH
2891: LD_EXP 18
2895: PPUSH
2896: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2900: LD_INT 22
2902: PUSH
2903: LD_INT 7
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: LD_INT 21
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 34
2922: PUSH
2923: LD_INT 49
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PPUSH
2935: CALL_OW 69
2939: PUSH
2940: LD_INT 0
2942: EQUAL
2943: PUSH
2944: LD_EXP 18
2948: PPUSH
2949: CALL_OW 303
2953: OR
2954: IFFALSE 2844
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2956: LD_INT 22
2958: PUSH
2959: LD_INT 7
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 21
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: CALL_OW 69
2984: PPUSH
2985: LD_INT 107
2987: PPUSH
2988: LD_INT 118
2990: PPUSH
2991: CALL_OW 114
// end ; end_of_file
2995: LD_VAR 0 1
2999: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
3000: LD_INT 22
3002: PUSH
3003: LD_INT 8
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 33
3012: PUSH
3013: LD_INT 2
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: PUSH
3029: LD_INT 0
3031: GREATER
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 8
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 34
3045: PUSH
3046: LD_INT 31
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PPUSH
3057: CALL_OW 69
3061: PUSH
3062: LD_INT 0
3064: EQUAL
3065: AND
3066: IFFALSE 3289
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
// begin enable ;
3074: ENABLE
// uc_side = 8 ;
3075: LD_ADDR_OWVAR 20
3079: PUSH
3080: LD_INT 8
3082: ST_TO_ADDR
// uc_nation = 2 ;
3083: LD_ADDR_OWVAR 21
3087: PUSH
3088: LD_INT 2
3090: ST_TO_ADDR
// vc_engine = 3 ;
3091: LD_ADDR_OWVAR 39
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// vc_control = 1 ;
3099: LD_ADDR_OWVAR 38
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// vc_weapon = 31 ;
3107: LD_ADDR_OWVAR 40
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// vc_chassis = 14 ;
3115: LD_ADDR_OWVAR 37
3119: PUSH
3120: LD_INT 14
3122: ST_TO_ADDR
// arControlTower = CreateVehicle ;
3123: LD_ADDR_EXP 34
3127: PUSH
3128: CALL_OW 45
3132: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3133: LD_EXP 34
3137: PPUSH
3138: LD_INT 8
3140: PUSH
3141: LD_INT 9
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 12
3158: ARRAY
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// hc_name =  ;
3167: LD_ADDR_OWVAR 26
3171: PUSH
3172: LD_STRING 
3174: ST_TO_ADDR
// hc_gallery =  ;
3175: LD_ADDR_OWVAR 33
3179: PUSH
3180: LD_STRING 
3182: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 10
3191: PPUSH
3192: CALL_OW 380
// arDriver = CreateHuman ;
3196: LD_ADDR_EXP 35
3200: PUSH
3201: CALL_OW 44
3205: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3206: LD_EXP 35
3210: PPUSH
3211: LD_EXP 34
3215: PPUSH
3216: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3220: LD_ADDR_VAR 0 1
3224: PUSH
3225: LD_INT 22
3227: PUSH
3228: LD_INT 8
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: LD_INT 33
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 3
3247: PUSH
3248: LD_INT 61
3250: PUSH
3251: EMPTY
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 69
3267: PUSH
3268: FOR_IN
3269: IFFALSE 3287
// ComLinkTo ( i , arDriver ) ;
3271: LD_VAR 0 1
3275: PPUSH
3276: LD_EXP 35
3280: PPUSH
3281: CALL_OW 135
3285: GO 3268
3287: POP
3288: POP
// end ;
3289: PPOPN 1
3291: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) > 0 do var i ;
3292: LD_INT 22
3294: PUSH
3295: LD_INT 8
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 2
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: LD_INT 61
3317: PUSH
3318: EMPTY
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: PUSH
3335: LD_INT 0
3337: GREATER
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 34
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 0
3370: GREATER
3371: AND
3372: IFFALSE 3450
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 8
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: LD_INT 33
3398: PUSH
3399: LD_INT 2
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 61
3411: PUSH
3412: EMPTY
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3448
// ComLinkTo ( i , arDriver ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_EXP 35
3441: PPUSH
3442: CALL_OW 135
3446: GO 3429
3448: POP
3449: POP
// end ;
3450: PPOPN 1
3452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3453: LD_INT 22
3455: PUSH
3456: LD_INT 8
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 21
3465: PUSH
3466: LD_INT 2
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 33
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 69
3492: PUSH
3493: LD_INT 0
3495: EQUAL
3496: IFFALSE 3520
3498: GO 3500
3500: DISABLE
// begin enable ;
3501: ENABLE
// RemoveUnit ( arControlTower ) ;
3502: LD_EXP 34
3506: PPUSH
3507: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3511: LD_EXP 35
3515: PPUSH
3516: CALL_OW 64
// end ;
3520: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3521: LD_EXP 31
3525: PUSH
3526: LD_INT 0
3528: GREATER
3529: IFFALSE 3693
3531: GO 3533
3533: DISABLE
3534: LD_INT 0
3536: PPUSH
3537: PPUSH
// begin enable ;
3538: ENABLE
// rnd = 0 ;
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// uc_side = 2 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 2
3554: ST_TO_ADDR
// uc_nation = 2 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 2
3562: ST_TO_ADDR
// hc_name =  ;
3563: LD_ADDR_OWVAR 26
3567: PUSH
3568: LD_STRING 
3570: ST_TO_ADDR
// hc_gallery =  ;
3571: LD_ADDR_OWVAR 33
3575: PUSH
3576: LD_STRING 
3578: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3579: LD_INT 0
3581: PPUSH
3582: LD_INT 4
3584: PPUSH
3585: LD_INT 10
3587: PPUSH
3588: CALL_OW 380
// un = CreateHuman ;
3592: LD_ADDR_VAR 0 1
3596: PUSH
3597: CALL_OW 44
3601: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3602: LD_VAR 0 1
3606: PPUSH
3607: LD_INT 8
3609: PUSH
3610: LD_INT 9
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: PPUSH
3629: LD_INT 0
3631: PPUSH
3632: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: LD_INT 1
3643: PPUSH
3644: LD_EXP 31
3648: PPUSH
3649: CALL_OW 12
3653: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_EXP 31
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_EXP 31
3678: PUSH
3679: LD_VAR 0 2
3683: ARRAY
3684: PUSH
3685: LD_INT 2
3687: ARRAY
3688: PPUSH
3689: CALL_OW 158
// end ; end_of_file
3693: PPOPN 2
3695: END
// every 1 do
3696: GO 3698
3698: DISABLE
// begin InGameOn ;
3699: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3703: LD_INT 22
3705: PUSH
3706: LD_INT 1
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 21
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3740: LD_INT 22
3742: PUSH
3743: LD_INT 1
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PPUSH
3764: CALL_OW 69
3768: PPUSH
3769: LD_INT 69
3771: PPUSH
3772: LD_INT 94
3774: PPUSH
3775: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3779: LD_EXP 1
3783: PPUSH
3784: LD_STRING D2-JMM-1
3786: PPUSH
3787: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3791: LD_INT 22
3793: PUSH
3794: LD_INT 1
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 21
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PPUSH
3815: CALL_OW 69
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PPUSH
3824: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3828: LD_EXP 2
3832: PPUSH
3833: LD_STRING D2-Huck-1
3835: PPUSH
3836: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3840: LD_INT 22
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 21
3852: PUSH
3853: LD_INT 2
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 69
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: PPUSH
3873: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3877: LD_EXP 1
3881: PPUSH
3882: LD_STRING D2-JMM-2
3884: PPUSH
3885: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3889: LD_INT 22
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 21
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PPUSH
3913: CALL_OW 69
3917: PUSH
3918: LD_INT 1
3920: ARRAY
3921: PPUSH
3922: CALL_OW 87
// InGameOff ;
3926: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3930: LD_STRING M1
3932: PPUSH
3933: CALL_OW 337
// SaveForQuickRestart ;
3937: CALL_OW 22
// end ;
3941: END
// every 10 10$0 do
3942: GO 3944
3944: DISABLE
// begin DialogueOn ;
3945: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3949: LD_EXP 15
3953: PPUSH
3954: LD_STRING D3-Pow-1
3956: PPUSH
3957: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3973: LD_EXP 15
3977: PPUSH
3978: LD_STRING D3-Pow-2
3980: PPUSH
3981: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3985: LD_EXP 1
3989: PPUSH
3990: LD_STRING D3-JMM-2
3992: PPUSH
3993: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3997: LD_EXP 15
4001: PPUSH
4002: LD_STRING D3-Pow-3
4004: PPUSH
4005: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
4009: LD_EXP 1
4013: PPUSH
4014: LD_STRING D3-JMM-3
4016: PPUSH
4017: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
4021: LD_EXP 15
4025: PPUSH
4026: LD_STRING D3-Pow-4
4028: PPUSH
4029: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D3-JMM-4
4040: PPUSH
4041: CALL_OW 88
// DialogueOff ;
4045: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4049: LD_STRING M2
4051: PPUSH
4052: CALL_OW 337
// wait ( 2 2$30 ) ;
4056: LD_INT 5250
4058: PPUSH
4059: CALL_OW 67
// PrepareBurlak ;
4063: CALL 2176 0 0
// BurlakArmy ;
4067: CALL 2322 0 0
// end ;
4071: END
// every 0 0$1 trigger See ( 1 , Masha ) do
4072: LD_INT 1
4074: PPUSH
4075: LD_EXP 18
4079: PPUSH
4080: CALL_OW 292
4084: IFFALSE 4254
4086: GO 4088
4088: DISABLE
// begin DialogueOn ;
4089: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
4093: LD_EXP 18
4097: PPUSH
4098: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
4102: LD_INT 22
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 26
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 25
4127: PUSH
4128: LD_INT 1
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_INT 25
4137: PUSH
4138: LD_INT 2
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 25
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 25
4157: PUSH
4158: LD_INT 4
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 5
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 25
4177: PUSH
4178: LD_INT 8
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: PPUSH
4199: CALL_OW 69
4203: PPUSH
4204: LD_STRING D5-Sol1-1
4206: PPUSH
4207: LD_STRING D5-FSol1-1
4209: PPUSH
4210: CALL 6214 0 3
// Say ( JMM , D5-JMM-1 ) ;
4214: LD_EXP 1
4218: PPUSH
4219: LD_STRING D5-JMM-1
4221: PPUSH
4222: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
4226: LD_EXP 17
4230: PPUSH
4231: LD_STRING DAmer-Bur-1
4233: PPUSH
4234: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
4238: LD_EXP 1
4242: PPUSH
4243: LD_STRING DAmer-JMM-1
4245: PPUSH
4246: CALL_OW 88
// DialogueOff ;
4250: CALL_OW 7
// end ;
4254: END
// every 0 0$1 do var i ;
4255: GO 4257
4257: DISABLE
4258: LD_INT 0
4260: PPUSH
// begin enable ;
4261: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
4262: LD_ADDR_VAR 0 1
4266: PUSH
4267: LD_INT 22
4269: PUSH
4270: LD_INT 7
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: PUSH
4282: FOR_IN
4283: IFFALSE 4519
// if IsInArea ( i , AllianceEscape ) then
4285: LD_VAR 0 1
4289: PPUSH
4290: LD_INT 4
4292: PPUSH
4293: CALL_OW 308
4297: IFFALSE 4517
// begin if i = Burlak or i = Masha then
4299: LD_VAR 0 1
4303: PUSH
4304: LD_EXP 17
4308: EQUAL
4309: PUSH
4310: LD_VAR 0 1
4314: PUSH
4315: LD_EXP 18
4319: EQUAL
4320: OR
4321: IFFALSE 4479
// begin RemoveUnit ( i ) ;
4323: LD_VAR 0 1
4327: PPUSH
4328: CALL_OW 64
// DialogueOn ;
4332: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
4336: LD_EXP 1
4340: PPUSH
4341: LD_STRING D5a-JMM-1
4343: PPUSH
4344: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
4348: LD_INT 22
4350: PUSH
4351: LD_INT 1
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: PUSH
4358: LD_INT 26
4360: PUSH
4361: LD_INT 1
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 2
4370: PUSH
4371: LD_INT 25
4373: PUSH
4374: LD_INT 1
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PUSH
4391: LD_INT 25
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 25
4403: PUSH
4404: LD_INT 4
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 25
4413: PUSH
4414: LD_INT 5
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 25
4423: PUSH
4424: LD_INT 8
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PPUSH
4450: LD_STRING D5a-Sol1-1
4452: PPUSH
4453: LD_STRING D5-FSol1-1
4455: PPUSH
4456: CALL 6214 0 3
// DialogueOff ;
4460: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4464: LD_STRING M2b
4466: PPUSH
4467: CALL_OW 337
// spawnBurlak = 0 ;
4471: LD_ADDR_EXP 27
4475: PUSH
4476: LD_INT 0
4478: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 264
4488: PUSH
4489: LD_INT 49
4491: EQUAL
4492: IFFALSE 4508
// SetLives ( i , 1 ) else
4494: LD_VAR 0 1
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 234
4506: GO 4517
// RemoveUnit ( i ) ;
4508: LD_VAR 0 1
4512: PPUSH
4513: CALL_OW 64
// end ;
4517: GO 4282
4519: POP
4520: POP
// end ;
4521: PPOPN 1
4523: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4524: LD_EXP 18
4528: PPUSH
4529: CALL_OW 256
4533: PUSH
4534: LD_INT 500
4536: LESS
4537: PUSH
4538: LD_EXP 18
4542: PPUSH
4543: CALL_OW 255
4547: PUSH
4548: LD_INT 7
4550: EQUAL
4551: AND
4552: IFFALSE 4572
4554: GO 4556
4556: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4557: LD_EXP 18
4561: PPUSH
4562: LD_INT 107
4564: PPUSH
4565: LD_INT 118
4567: PPUSH
4568: CALL_OW 111
4572: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4573: LD_EXP 17
4577: PPUSH
4578: CALL_OW 301
4582: PUSH
4583: LD_EXP 27
4587: PUSH
4588: LD_INT 1
4590: EQUAL
4591: AND
4592: IFFALSE 4663
4594: GO 4596
4596: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4597: LD_EXP 1
4601: PPUSH
4602: LD_STRING D5b-JMM-1
4604: PPUSH
4605: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D5b-Sol1-1 ,  ) ;
4609: LD_INT 22
4611: PUSH
4612: LD_INT 1
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 26
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: PPUSH
4633: CALL_OW 69
4637: PPUSH
4638: LD_STRING D5b-Sol1-1
4640: PPUSH
4641: LD_STRING 
4643: PPUSH
4644: CALL 6214 0 3
// ChangeMissionObjectives ( M2a ) ;
4648: LD_STRING M2a
4650: PPUSH
4651: CALL_OW 337
// burlakStatus = 1 ;
4655: LD_ADDR_EXP 28
4659: PUSH
4660: LD_INT 1
4662: ST_TO_ADDR
// end ;
4663: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4664: LD_EXP 2
4668: PPUSH
4669: CALL_OW 301
4673: IFFALSE 4821
4675: GO 4677
4677: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4678: LD_EXP 1
4682: PPUSH
4683: LD_STRING D6-JMM-1
4685: PPUSH
4686: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D6-Sol1-1 ,  ) ;
4690: LD_INT 22
4692: PUSH
4693: LD_INT 1
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 26
4702: PUSH
4703: LD_INT 1
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: LD_INT 25
4715: PUSH
4716: LD_INT 1
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 25
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 25
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 25
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 5
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 25
4765: PUSH
4766: LD_INT 8
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: PPUSH
4787: CALL_OW 69
4791: PPUSH
4792: LD_STRING D6-Sol1-1
4794: PPUSH
4795: LD_STRING 
4797: PPUSH
4798: CALL 6214 0 3
// Say ( JMM , D6-JMM-2 ) ;
4802: LD_EXP 1
4806: PPUSH
4807: LD_STRING D6-JMM-2
4809: PPUSH
4810: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4814: LD_STRING M1a
4816: PPUSH
4817: CALL_OW 337
// end ;
4821: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4822: LD_INT 25
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: CALL_OW 321
4832: PUSH
4833: LD_INT 2
4835: EQUAL
4836: IFFALSE 4853
4838: GO 4840
4840: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4841: LD_EXP 2
4845: PPUSH
4846: LD_STRING D6-Huck-2
4848: PPUSH
4849: CALL_OW 88
// end ;
4853: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4854: LD_INT 22
4856: PUSH
4857: LD_INT 1
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 2
4866: PUSH
4867: LD_INT 34
4869: PUSH
4870: LD_INT 8
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: LD_INT 35
4879: PUSH
4880: LD_INT 8
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PPUSH
4896: CALL_OW 69
4900: PUSH
4901: LD_INT 0
4903: GREATER
4904: IFFALSE 5096
4906: GO 4908
4908: DISABLE
4909: LD_INT 0
4911: PPUSH
4912: PPUSH
// begin enable ;
4913: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4914: LD_ADDR_VAR 0 1
4918: PUSH
4919: LD_INT 5
4921: PPUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 1
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 21
4934: PUSH
4935: LD_INT 3
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: LD_INT 30
4944: PUSH
4945: LD_INT 1
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 3
4954: PUSH
4955: LD_INT 57
4957: PUSH
4958: EMPTY
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 70
4975: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4976: LD_ADDR_VAR 0 2
4980: PUSH
4981: LD_INT 5
4983: PPUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 1
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 21
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 30
5006: PUSH
5007: LD_INT 5
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 3
5016: PUSH
5017: LD_INT 57
5019: PUSH
5020: EMPTY
5021: LIST
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 70
5037: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
5038: LD_VAR 0 1
5042: PUSH
5043: LD_INT 0
5045: GREATER
5046: PUSH
5047: LD_VAR 0 2
5051: PUSH
5052: LD_INT 0
5054: GREATER
5055: AND
5056: IFFALSE 5096
// begin disable ;
5058: DISABLE
// DialogueOn ;
5059: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
5063: LD_EXP 1
5067: PPUSH
5068: LD_STRING D7-JMM-1
5070: PPUSH
5071: CALL_OW 88
// DialogueOff ;
5075: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
5079: LD_STRING M4
5081: PPUSH
5082: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
5086: LD_INT 5
5088: PPUSH
5089: LD_INT 0
5091: PPUSH
5092: CALL_OW 424
// end ; end ;
5096: PPOPN 2
5098: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
5099: LD_INT 6
5101: PPUSH
5102: LD_INT 22
5104: PUSH
5105: LD_INT 1
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 25
5114: PUSH
5115: LD_INT 4
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 70
5130: PUSH
5131: LD_INT 0
5133: GREATER
5134: PUSH
5135: LD_EXP 39
5139: PUSH
5140: LD_INT 1
5142: EQUAL
5143: AND
5144: PUSH
5145: LD_EXP 29
5149: PUSH
5150: LD_INT 0
5152: EQUAL
5153: AND
5154: IFFALSE 5219
5156: GO 5158
5158: DISABLE
// begin enable ;
5159: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
5160: LD_ADDR_EXP 26
5164: PUSH
5165: LD_INT 6
5167: PPUSH
5168: LD_INT 22
5170: PUSH
5171: LD_INT 1
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 25
5180: PUSH
5181: LD_INT 4
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PPUSH
5192: CALL_OW 70
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
5201: LD_INT 6
5203: PPUSH
5204: LD_INT 0
5206: PPUSH
5207: CALL_OW 424
// radationResearched = 1 ;
5211: LD_ADDR_EXP 29
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// end ;
5219: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
5220: LD_EXP 26
5224: PPUSH
5225: CALL_OW 301
5229: PUSH
5230: LD_EXP 29
5234: PUSH
5235: LD_INT 1
5237: EQUAL
5238: AND
5239: IFFALSE 5275
5241: GO 5243
5243: DISABLE
// begin enable ;
5244: ENABLE
// radationResearched = 0 ;
5245: LD_ADDR_EXP 29
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5253: LD_INT 6
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5263: LD_EXP 1
5267: PPUSH
5268: LD_STRING D9a-JMM-1
5270: PPUSH
5271: CALL_OW 88
// end ; end_of_file
5275: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5276: LD_VAR 0 5
5280: PUSH
5281: LD_INT 8
5283: EQUAL
5284: PUSH
5285: LD_EXP 37
5289: PUSH
5290: LD_INT 0
5292: EQUAL
5293: AND
5294: IFFALSE 5347
// begin eventVar1 = 1 ;
5296: LD_ADDR_EXP 37
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// DialogueOn ;
5304: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5308: LD_EXP 1
5312: PPUSH
5313: LD_STRING D6a-JMM-1
5315: PPUSH
5316: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5320: LD_EXP 15
5324: PPUSH
5325: LD_STRING D6a-Pow-1
5327: PPUSH
5328: CALL_OW 94
// DialogueOff ;
5332: CALL_OW 7
// wait ( 3 3$0 ) ;
5336: LD_INT 6300
5338: PPUSH
5339: CALL_OW 67
// PowellSupport ;
5343: CALL 1948 0 0
// end ; end ;
5347: PPOPN 5
5349: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5350: LD_VAR 0 1
5354: PPUSH
5355: CALL_OW 264
5359: PUSH
5360: LD_INT 8
5362: EQUAL
5363: PUSH
5364: LD_EXP 38
5368: PUSH
5369: LD_INT 0
5371: EQUAL
5372: AND
5373: IFFALSE 5442
// begin eventVar2 = 1 ;
5375: LD_ADDR_EXP 38
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// DialogueOn ;
5383: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5387: LD_EXP 1
5391: PPUSH
5392: LD_STRING D6b-JMM-1
5394: PPUSH
5395: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5399: LD_EXP 15
5403: PPUSH
5404: LD_STRING D6b-Pow-1
5406: PPUSH
5407: CALL_OW 94
// DialogueOff ;
5411: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5415: LD_INT 5
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5425: LD_INT 7
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5435: LD_STRING M3
5437: PPUSH
5438: CALL_OW 337
// end ; end ;
5442: PPOPN 2
5444: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5445: LD_VAR 0 2
5449: PPUSH
5450: LD_VAR 0 3
5454: PPUSH
5455: LD_INT 5
5457: PPUSH
5458: CALL_OW 309
5462: PUSH
5463: LD_EXP 39
5467: PUSH
5468: LD_INT 0
5470: EQUAL
5471: AND
5472: IFFALSE 5690
// begin eventVar3 = 1 ;
5474: LD_ADDR_EXP 39
5478: PUSH
5479: LD_INT 1
5481: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5482: LD_INT 175
5484: PPUSH
5485: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5489: LD_INT 7
5491: PPUSH
5492: LD_INT 22
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 21
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 34
5514: PUSH
5515: LD_INT 11
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 70
5531: PUSH
5532: LD_INT 0
5534: GREATER
5535: IFFALSE 5554
// begin radarOnSpot = 1 ;
5537: LD_ADDR_EXP 30
5541: PUSH
5542: LD_INT 1
5544: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5545: LD_STRING M3a
5547: PPUSH
5548: CALL_OW 337
// end else
5552: GO 5561
// begin ChangeMissionObjectives ( M3b ) ;
5554: LD_STRING M3b
5556: PPUSH
5557: CALL_OW 337
// end ; DialogueOn ;
5561: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5565: LD_EXP 2
5569: PPUSH
5570: LD_STRING D8-Huck-1
5572: PPUSH
5573: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5577: LD_EXP 1
5581: PPUSH
5582: LD_STRING D8-JMM-1
5584: PPUSH
5585: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5589: LD_EXP 2
5593: PPUSH
5594: LD_STRING D8-Huck-2
5596: PPUSH
5597: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5601: LD_EXP 1
5605: PPUSH
5606: LD_STRING D8-JMM-2
5608: PPUSH
5609: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5613: LD_EXP 2
5617: PPUSH
5618: LD_STRING D8-Huck-3
5620: PPUSH
5621: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5625: LD_EXP 1
5629: PPUSH
5630: LD_STRING D8-JMM-3
5632: PPUSH
5633: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5637: LD_EXP 2
5641: PPUSH
5642: LD_STRING D8-Huck-4
5644: PPUSH
5645: CALL_OW 88
// DialogueOff ;
5649: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5653: LD_INT 5
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5663: LD_INT 7
5665: PPUSH
5666: LD_INT 0
5668: PPUSH
5669: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5673: LD_INT 6
5675: PPUSH
5676: LD_INT 1
5678: PPUSH
5679: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5683: LD_STRING M5
5685: PPUSH
5686: CALL_OW 337
// end ; end ;
5690: PPOPN 3
5692: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5693: LD_EXP 26
5697: PPUSH
5698: CALL_OW 302
5702: PUSH
5703: LD_VAR 0 2
5707: PUSH
5708: LD_EXP 26
5712: EQUAL
5713: AND
5714: PUSH
5715: LD_EXP 40
5719: PUSH
5720: LD_INT 0
5722: EQUAL
5723: AND
5724: PUSH
5725: LD_EXP 39
5729: PUSH
5730: LD_INT 1
5732: EQUAL
5733: AND
5734: IFFALSE 5780
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5736: LD_VAR 0 1
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: CALL_OW 268
5748: PUSH
5749: LD_INT 11
5751: EQUAL
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 2
5760: PPUSH
5761: CALL_OW 268
5765: PUSH
5766: LD_INT 11
5768: EQUAL
5769: OR
5770: IFFALSE 5780
// eventVar4 = 1 ;
5772: LD_ADDR_EXP 40
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// end ;
5780: PPOPN 2
5782: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5783: LD_INT 0
5785: PPUSH
5786: PPUSH
// begin if GetNation ( unit ) = 2 then
5787: LD_VAR 0 1
5791: PPUSH
5792: CALL_OW 248
5796: PUSH
5797: LD_INT 2
5799: EQUAL
5800: IFFALSE 6046
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5802: LD_ADDR_EXP 32
5806: PUSH
5807: LD_EXP 32
5811: PUSH
5812: LD_INT 1
5814: PLUS
5815: ST_TO_ADDR
// for i := 1 to sibDeposits do
5816: LD_ADDR_VAR 0 4
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_EXP 31
5830: PUSH
5831: FOR_TO
5832: IFFALSE 5934
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5834: LD_EXP 31
5838: PUSH
5839: LD_VAR 0 4
5843: ARRAY
5844: PUSH
5845: LD_INT 1
5847: ARRAY
5848: PUSH
5849: LD_VAR 0 2
5853: EQUAL
5854: PUSH
5855: LD_EXP 31
5859: PUSH
5860: LD_VAR 0 4
5864: ARRAY
5865: PUSH
5866: LD_INT 2
5868: ARRAY
5869: PUSH
5870: LD_VAR 0 3
5874: EQUAL
5875: AND
5876: IFFALSE 5932
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5878: LD_ADDR_EXP 31
5882: PUSH
5883: LD_EXP 31
5887: PPUSH
5888: LD_VAR 0 4
5892: PUSH
5893: EMPTY
5894: LIST
5895: PUSH
5896: LD_INT 1
5898: ARRAY
5899: PPUSH
5900: CALL_OW 3
5904: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5905: LD_ADDR_EXP 31
5909: PUSH
5910: LD_EXP 31
5914: PPUSH
5915: LD_VAR 0 4
5919: PUSH
5920: EMPTY
5921: LIST
5922: PUSH
5923: LD_INT 2
5925: ARRAY
5926: PPUSH
5927: CALL_OW 3
5931: ST_TO_ADDR
// end ;
5932: GO 5831
5934: POP
5935: POP
// if eventVar5 = 0 then
5936: LD_EXP 41
5940: PUSH
5941: LD_INT 0
5943: EQUAL
5944: IFFALSE 6046
// begin eventVar5 = 1 ;
5946: LD_ADDR_EXP 41
5950: PUSH
5951: LD_INT 1
5953: ST_TO_ADDR
// DialogueOn ;
5954: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5958: LD_EXP 2
5962: PPUSH
5963: LD_STRING D4-Sci1-1
5965: PPUSH
5966: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5970: LD_EXP 1
5974: PPUSH
5975: LD_STRING D4-JMM-1
5977: PPUSH
5978: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5982: LD_EXP 2
5986: PPUSH
5987: LD_STRING D4-Sci1-2
5989: PPUSH
5990: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5994: LD_EXP 1
5998: PPUSH
5999: LD_STRING D4-JMM-2
6001: PPUSH
6002: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
6006: LD_EXP 2
6010: PPUSH
6011: LD_STRING D4-Sci1-3
6013: PPUSH
6014: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
6018: LD_EXP 1
6022: PPUSH
6023: LD_STRING D4-JMM-3
6025: PPUSH
6026: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
6030: LD_EXP 1
6034: PPUSH
6035: LD_STRING D4-JMM-3a
6037: PPUSH
6038: CALL_OW 88
// DialogueOff ;
6042: CALL_OW 7
// end ; end ; end ;
6046: PPOPN 5
6048: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
6049: LD_VAR 0 1
6053: PPUSH
6054: CALL_OW 255
6058: PUSH
6059: LD_INT 1
6061: EQUAL
6062: PUSH
6063: LD_VAR 0 1
6067: PPUSH
6068: CALL_OW 266
6072: PUSH
6073: LD_INT 0
6075: EQUAL
6076: AND
6077: PUSH
6078: LD_INT 22
6080: PUSH
6081: LD_INT 1
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: LD_INT 21
6090: PUSH
6091: LD_INT 3
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: LD_INT 2
6100: PUSH
6101: LD_INT 30
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 30
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: PPUSH
6131: CALL_OW 69
6135: PUSH
6136: LD_INT 1
6138: EQUAL
6139: AND
6140: IFFALSE 6154
// SetBName ( building , omega ) ;
6142: LD_VAR 0 1
6146: PPUSH
6147: LD_STRING omega
6149: PPUSH
6150: CALL_OW 500
// end ; end_of_file
6154: PPOPN 2
6156: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
// if exist_mode then
6161: LD_VAR 0 2
6165: IFFALSE 6184
// unit := CreateCharacter ( ident ) else
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: LD_VAR 0 1
6176: PPUSH
6177: CALL_OW 34
6181: ST_TO_ADDR
6182: GO 6199
// unit := NewCharacter ( ident ) ;
6184: LD_ADDR_VAR 0 4
6188: PUSH
6189: LD_VAR 0 1
6193: PPUSH
6194: CALL_OW 25
6198: ST_TO_ADDR
// result := unit ;
6199: LD_ADDR_VAR 0 3
6203: PUSH
6204: LD_VAR 0 4
6208: ST_TO_ADDR
// end ;
6209: LD_VAR 0 3
6213: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6214: LD_INT 0
6216: PPUSH
6217: PPUSH
6218: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: LD_EXP 1
6233: PUSH
6234: LD_EXP 2
6238: PUSH
6239: LD_EXP 3
6243: PUSH
6244: LD_EXP 4
6248: PUSH
6249: LD_EXP 5
6253: PUSH
6254: LD_EXP 6
6258: PUSH
6259: LD_EXP 7
6263: PUSH
6264: LD_EXP 8
6268: PUSH
6269: LD_EXP 9
6273: PUSH
6274: LD_EXP 10
6278: PUSH
6279: LD_EXP 11
6283: PUSH
6284: LD_EXP 12
6288: PUSH
6289: LD_EXP 13
6293: PUSH
6294: LD_EXP 14
6298: PUSH
6299: LD_EXP 15
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: DIFF
6321: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6322: LD_ADDR_VAR 0 6
6326: PUSH
6327: LD_INT 1
6329: PPUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL_OW 12
6339: ST_TO_ADDR
// for i = 1 to characters do
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: DOUBLE
6346: LD_INT 1
6348: DEC
6349: ST_TO_ADDR
6350: LD_VAR 0 1
6354: PUSH
6355: FOR_TO
6356: IFFALSE 6466
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6358: LD_VAR 0 5
6362: PUSH
6363: LD_VAR 0 6
6367: EQUAL
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: LD_VAR 0 5
6378: ARRAY
6379: PPUSH
6380: CALL_OW 258
6384: PUSH
6385: LD_INT 1
6387: EQUAL
6388: AND
6389: IFFALSE 6411
// Say ( characters [ i ] , dialogMID ) ;
6391: LD_VAR 0 1
6395: PUSH
6396: LD_VAR 0 5
6400: ARRAY
6401: PPUSH
6402: LD_VAR 0 2
6406: PPUSH
6407: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6411: LD_VAR 0 5
6415: PUSH
6416: LD_VAR 0 6
6420: EQUAL
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: LD_VAR 0 5
6431: ARRAY
6432: PPUSH
6433: CALL_OW 258
6437: PUSH
6438: LD_INT 2
6440: EQUAL
6441: AND
6442: IFFALSE 6464
// Say ( characters [ i ] , dialogFID ) ;
6444: LD_VAR 0 1
6448: PUSH
6449: LD_VAR 0 5
6453: ARRAY
6454: PPUSH
6455: LD_VAR 0 3
6459: PPUSH
6460: CALL_OW 88
// end ;
6464: GO 6355
6466: POP
6467: POP
// end ;
6468: LD_VAR 0 4
6472: RET
// export function PrepareDifficulty ; begin
6473: LD_INT 0
6475: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6476: LD_INT 5
6478: PPUSH
6479: LD_INT 8
6481: PPUSH
6482: LD_INT 2
6484: PPUSH
6485: CALL_OW 322
// if difficulty = 1 then
6489: LD_OWVAR 67
6493: PUSH
6494: LD_INT 1
6496: EQUAL
6497: IFFALSE 6616
// begin SetTech ( 66 , 8 , state_researched ) ;
6499: LD_INT 66
6501: PPUSH
6502: LD_INT 8
6504: PPUSH
6505: LD_INT 2
6507: PPUSH
6508: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6512: LD_INT 67
6514: PPUSH
6515: LD_INT 8
6517: PPUSH
6518: LD_INT 0
6520: PPUSH
6521: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6525: LD_INT 68
6527: PPUSH
6528: LD_INT 8
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6538: LD_INT 51
6540: PPUSH
6541: LD_INT 8
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6551: LD_INT 52
6553: PPUSH
6554: LD_INT 8
6556: PPUSH
6557: LD_INT 0
6559: PPUSH
6560: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6564: LD_INT 53
6566: PPUSH
6567: LD_INT 8
6569: PPUSH
6570: LD_INT 0
6572: PPUSH
6573: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6577: LD_INT 60
6579: PPUSH
6580: LD_INT 8
6582: PPUSH
6583: LD_INT 2
6585: PPUSH
6586: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6590: LD_INT 61
6592: PPUSH
6593: LD_INT 8
6595: PPUSH
6596: LD_INT 0
6598: PPUSH
6599: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6603: LD_INT 62
6605: PPUSH
6606: LD_INT 8
6608: PPUSH
6609: LD_INT 0
6611: PPUSH
6612: CALL_OW 322
// end ; if difficulty = 2 then
6616: LD_OWVAR 67
6620: PUSH
6621: LD_INT 2
6623: EQUAL
6624: IFFALSE 6743
// begin SetTech ( 66 , 8 , state_researched ) ;
6626: LD_INT 66
6628: PPUSH
6629: LD_INT 8
6631: PPUSH
6632: LD_INT 2
6634: PPUSH
6635: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6639: LD_INT 67
6641: PPUSH
6642: LD_INT 8
6644: PPUSH
6645: LD_INT 2
6647: PPUSH
6648: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6652: LD_INT 68
6654: PPUSH
6655: LD_INT 8
6657: PPUSH
6658: LD_INT 0
6660: PPUSH
6661: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6665: LD_INT 51
6667: PPUSH
6668: LD_INT 8
6670: PPUSH
6671: LD_INT 2
6673: PPUSH
6674: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6678: LD_INT 52
6680: PPUSH
6681: LD_INT 8
6683: PPUSH
6684: LD_INT 2
6686: PPUSH
6687: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6691: LD_INT 53
6693: PPUSH
6694: LD_INT 8
6696: PPUSH
6697: LD_INT 2
6699: PPUSH
6700: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6704: LD_INT 60
6706: PPUSH
6707: LD_INT 8
6709: PPUSH
6710: LD_INT 2
6712: PPUSH
6713: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6717: LD_INT 61
6719: PPUSH
6720: LD_INT 8
6722: PPUSH
6723: LD_INT 2
6725: PPUSH
6726: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6730: LD_INT 62
6732: PPUSH
6733: LD_INT 8
6735: PPUSH
6736: LD_INT 0
6738: PPUSH
6739: CALL_OW 322
// end ; if difficulty = 3 then
6743: LD_OWVAR 67
6747: PUSH
6748: LD_INT 3
6750: EQUAL
6751: IFFALSE 6870
// begin SetTech ( 66 , 8 , state_researched ) ;
6753: LD_INT 66
6755: PPUSH
6756: LD_INT 8
6758: PPUSH
6759: LD_INT 2
6761: PPUSH
6762: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6766: LD_INT 67
6768: PPUSH
6769: LD_INT 8
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6779: LD_INT 68
6781: PPUSH
6782: LD_INT 8
6784: PPUSH
6785: LD_INT 0
6787: PPUSH
6788: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6792: LD_INT 51
6794: PPUSH
6795: LD_INT 8
6797: PPUSH
6798: LD_INT 2
6800: PPUSH
6801: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6805: LD_INT 52
6807: PPUSH
6808: LD_INT 8
6810: PPUSH
6811: LD_INT 2
6813: PPUSH
6814: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6818: LD_INT 53
6820: PPUSH
6821: LD_INT 8
6823: PPUSH
6824: LD_INT 2
6826: PPUSH
6827: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6831: LD_INT 60
6833: PPUSH
6834: LD_INT 8
6836: PPUSH
6837: LD_INT 2
6839: PPUSH
6840: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6844: LD_INT 61
6846: PPUSH
6847: LD_INT 8
6849: PPUSH
6850: LD_INT 2
6852: PPUSH
6853: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6857: LD_INT 62
6859: PPUSH
6860: LD_INT 8
6862: PPUSH
6863: LD_INT 0
6865: PPUSH
6866: CALL_OW 322
// end ; end ;
6870: LD_VAR 0 1
6874: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6875: LD_INT 0
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6883: LD_ADDR_VAR 0 7
6887: PUSH
6888: LD_INT 22
6890: PUSH
6891: LD_VAR 0 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 25
6902: PUSH
6903: LD_INT 9
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PPUSH
6914: CALL_OW 69
6918: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6919: LD_ADDR_VAR 0 8
6923: PUSH
6924: LD_INT 22
6926: PUSH
6927: LD_VAR 0 2
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 3
6938: PUSH
6939: LD_INT 21
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 69
6961: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6962: LD_ADDR_VAR 0 5
6966: PUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_INT 3
6972: PPUSH
6973: CALL_OW 12
6977: ST_TO_ADDR
// for i = 1 to list do
6978: LD_ADDR_VAR 0 6
6982: PUSH
6983: DOUBLE
6984: LD_INT 1
6986: DEC
6987: ST_TO_ADDR
6988: LD_VAR 0 7
6992: PUSH
6993: FOR_TO
6994: IFFALSE 7176
// for ta in filter do
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_VAR 0 8
7005: PUSH
7006: FOR_IN
7007: IFFALSE 7172
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
7009: LD_VAR 0 7
7013: PUSH
7014: LD_VAR 0 6
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 4
7024: PPUSH
7025: CALL_OW 296
7029: PUSH
7030: LD_INT 13
7032: LESSEQUAL
7033: IFFALSE 7170
// begin case c of 1 :
7035: LD_VAR 0 5
7039: PUSH
7040: LD_INT 1
7042: DOUBLE
7043: EQUAL
7044: IFTRUE 7048
7046: GO 7086
7048: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7049: LD_VAR 0 7
7053: PUSH
7054: LD_VAR 0 6
7058: ARRAY
7059: PPUSH
7060: LD_VAR 0 4
7064: PPUSH
7065: CALL_OW 250
7069: PPUSH
7070: LD_VAR 0 4
7074: PPUSH
7075: CALL_OW 251
7079: PPUSH
7080: CALL_OW 154
7084: GO 7170
7086: LD_INT 2
7088: DOUBLE
7089: EQUAL
7090: IFTRUE 7094
7092: GO 7158
7094: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7095: LD_VAR 0 7
7099: PUSH
7100: LD_VAR 0 6
7104: ARRAY
7105: PPUSH
7106: LD_VAR 0 4
7110: PPUSH
7111: CALL_OW 250
7115: PUSH
7116: LD_INT 1
7118: NEG
7119: PPUSH
7120: LD_INT 1
7122: PPUSH
7123: CALL_OW 12
7127: PLUS
7128: PPUSH
7129: LD_VAR 0 4
7133: PPUSH
7134: CALL_OW 251
7138: PUSH
7139: LD_INT 1
7141: NEG
7142: PPUSH
7143: LD_INT 1
7145: PPUSH
7146: CALL_OW 12
7150: PLUS
7151: PPUSH
7152: CALL_OW 153
7156: GO 7170
7158: LD_INT 3
7160: DOUBLE
7161: EQUAL
7162: IFTRUE 7166
7164: GO 7169
7166: POP
// ; end ;
7167: GO 7170
7169: POP
// end ; end ;
7170: GO 7006
7172: POP
7173: POP
7174: GO 6993
7176: POP
7177: POP
// end ;
7178: LD_VAR 0 3
7182: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
// for i in charactersList do
7187: LD_ADDR_VAR 0 4
7191: PUSH
7192: LD_VAR 0 1
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7227
// begin if IsOk ( i ) then
7200: LD_VAR 0 4
7204: PPUSH
7205: CALL_OW 302
7209: IFFALSE 7225
// SaveCharacters ( i , ident ) ;
7211: LD_VAR 0 4
7215: PPUSH
7216: LD_VAR 0 2
7220: PPUSH
7221: CALL_OW 38
// end ;
7225: GO 7197
7227: POP
7228: POP
// end ;
7229: LD_VAR 0 3
7233: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7234: LD_INT 0
7236: PPUSH
7237: PPUSH
7238: PPUSH
7239: PPUSH
7240: PPUSH
7241: PPUSH
7242: PPUSH
7243: PPUSH
7244: PPUSH
7245: PPUSH
7246: PPUSH
// for i = 1 to medicCount do
7247: LD_ADDR_VAR 0 13
7251: PUSH
7252: DOUBLE
7253: LD_INT 1
7255: DEC
7256: ST_TO_ADDR
7257: LD_VAR 0 7
7261: PUSH
7262: FOR_TO
7263: IFFALSE 7345
// begin uc_side = side ;
7265: LD_ADDR_OWVAR 20
7269: PUSH
7270: LD_VAR 0 1
7274: ST_TO_ADDR
// uc_nation = nation ;
7275: LD_ADDR_OWVAR 21
7279: PUSH
7280: LD_VAR 0 2
7284: ST_TO_ADDR
// hc_name =  ;
7285: LD_ADDR_OWVAR 26
7289: PUSH
7290: LD_STRING 
7292: ST_TO_ADDR
// hc_gallery =  ;
7293: LD_ADDR_OWVAR 33
7297: PUSH
7298: LD_STRING 
7300: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7301: LD_INT 0
7303: PPUSH
7304: LD_INT 4
7306: PPUSH
7307: LD_VAR 0 8
7311: PPUSH
7312: CALL_OW 380
// un = CreateHuman ;
7316: LD_ADDR_VAR 0 15
7320: PUSH
7321: CALL_OW 44
7325: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7326: LD_VAR 0 15
7330: PPUSH
7331: LD_VAR 0 9
7335: PPUSH
7336: LD_INT 0
7338: PPUSH
7339: CALL_OW 49
// end ;
7343: GO 7262
7345: POP
7346: POP
// for i = 1 to soldierCount do
7347: LD_ADDR_VAR 0 13
7351: PUSH
7352: DOUBLE
7353: LD_INT 1
7355: DEC
7356: ST_TO_ADDR
7357: LD_VAR 0 3
7361: PUSH
7362: FOR_TO
7363: IFFALSE 7445
// begin uc_side = side ;
7365: LD_ADDR_OWVAR 20
7369: PUSH
7370: LD_VAR 0 1
7374: ST_TO_ADDR
// uc_nation = nation ;
7375: LD_ADDR_OWVAR 21
7379: PUSH
7380: LD_VAR 0 2
7384: ST_TO_ADDR
// hc_name =  ;
7385: LD_ADDR_OWVAR 26
7389: PUSH
7390: LD_STRING 
7392: ST_TO_ADDR
// hc_gallery =  ;
7393: LD_ADDR_OWVAR 33
7397: PUSH
7398: LD_STRING 
7400: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7401: LD_INT 0
7403: PPUSH
7404: LD_INT 1
7406: PPUSH
7407: LD_VAR 0 8
7411: PPUSH
7412: CALL_OW 380
// un = CreateHuman ;
7416: LD_ADDR_VAR 0 15
7420: PUSH
7421: CALL_OW 44
7425: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7426: LD_VAR 0 15
7430: PPUSH
7431: LD_VAR 0 9
7435: PPUSH
7436: LD_INT 0
7438: PPUSH
7439: CALL_OW 49
// end ;
7443: GO 7362
7445: POP
7446: POP
// for i = 1 to sniperCount do
7447: LD_ADDR_VAR 0 13
7451: PUSH
7452: DOUBLE
7453: LD_INT 1
7455: DEC
7456: ST_TO_ADDR
7457: LD_VAR 0 4
7461: PUSH
7462: FOR_TO
7463: IFFALSE 7545
// begin uc_side = side ;
7465: LD_ADDR_OWVAR 20
7469: PUSH
7470: LD_VAR 0 1
7474: ST_TO_ADDR
// uc_nation = nation ;
7475: LD_ADDR_OWVAR 21
7479: PUSH
7480: LD_VAR 0 2
7484: ST_TO_ADDR
// hc_name =  ;
7485: LD_ADDR_OWVAR 26
7489: PUSH
7490: LD_STRING 
7492: ST_TO_ADDR
// hc_gallery =  ;
7493: LD_ADDR_OWVAR 33
7497: PUSH
7498: LD_STRING 
7500: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7501: LD_INT 0
7503: PPUSH
7504: LD_INT 5
7506: PPUSH
7507: LD_VAR 0 8
7511: PPUSH
7512: CALL_OW 380
// un = CreateHuman ;
7516: LD_ADDR_VAR 0 15
7520: PUSH
7521: CALL_OW 44
7525: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7526: LD_VAR 0 15
7530: PPUSH
7531: LD_VAR 0 9
7535: PPUSH
7536: LD_INT 0
7538: PPUSH
7539: CALL_OW 49
// end ;
7543: GO 7462
7545: POP
7546: POP
// for i = 1 to bazookCount do
7547: LD_ADDR_VAR 0 13
7551: PUSH
7552: DOUBLE
7553: LD_INT 1
7555: DEC
7556: ST_TO_ADDR
7557: LD_VAR 0 5
7561: PUSH
7562: FOR_TO
7563: IFFALSE 7645
// begin uc_side = side ;
7565: LD_ADDR_OWVAR 20
7569: PUSH
7570: LD_VAR 0 1
7574: ST_TO_ADDR
// uc_nation = nation ;
7575: LD_ADDR_OWVAR 21
7579: PUSH
7580: LD_VAR 0 2
7584: ST_TO_ADDR
// hc_name =  ;
7585: LD_ADDR_OWVAR 26
7589: PUSH
7590: LD_STRING 
7592: ST_TO_ADDR
// hc_gallery =  ;
7593: LD_ADDR_OWVAR 33
7597: PUSH
7598: LD_STRING 
7600: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7601: LD_INT 0
7603: PPUSH
7604: LD_INT 9
7606: PPUSH
7607: LD_VAR 0 8
7611: PPUSH
7612: CALL_OW 380
// un = CreateHuman ;
7616: LD_ADDR_VAR 0 15
7620: PUSH
7621: CALL_OW 44
7625: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7626: LD_VAR 0 15
7630: PPUSH
7631: LD_VAR 0 9
7635: PPUSH
7636: LD_INT 0
7638: PPUSH
7639: CALL_OW 49
// end ;
7643: GO 7562
7645: POP
7646: POP
// for i = 1 to mortalCount do
7647: LD_ADDR_VAR 0 13
7651: PUSH
7652: DOUBLE
7653: LD_INT 1
7655: DEC
7656: ST_TO_ADDR
7657: LD_VAR 0 6
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7745
// begin uc_side = side ;
7665: LD_ADDR_OWVAR 20
7669: PUSH
7670: LD_VAR 0 1
7674: ST_TO_ADDR
// uc_nation = nation ;
7675: LD_ADDR_OWVAR 21
7679: PUSH
7680: LD_VAR 0 2
7684: ST_TO_ADDR
// hc_name =  ;
7685: LD_ADDR_OWVAR 26
7689: PUSH
7690: LD_STRING 
7692: ST_TO_ADDR
// hc_gallery =  ;
7693: LD_ADDR_OWVAR 33
7697: PUSH
7698: LD_STRING 
7700: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7701: LD_INT 0
7703: PPUSH
7704: LD_INT 8
7706: PPUSH
7707: LD_VAR 0 8
7711: PPUSH
7712: CALL_OW 380
// un = CreateHuman ;
7716: LD_ADDR_VAR 0 15
7720: PUSH
7721: CALL_OW 44
7725: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7726: LD_VAR 0 15
7730: PPUSH
7731: LD_VAR 0 9
7735: PPUSH
7736: LD_INT 0
7738: PPUSH
7739: CALL_OW 49
// end ;
7743: GO 7662
7745: POP
7746: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7747: LD_ADDR_VAR 0 17
7751: PUSH
7752: LD_INT 22
7754: PUSH
7755: LD_VAR 0 1
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 25
7766: PUSH
7767: LD_INT 4
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: ST_TO_ADDR
// for i in medic_list do
7783: LD_ADDR_VAR 0 13
7787: PUSH
7788: LD_VAR 0 17
7792: PUSH
7793: FOR_IN
7794: IFFALSE 7812
// ComMoveToArea ( i , healArea ) ;
7796: LD_VAR 0 13
7800: PPUSH
7801: LD_VAR 0 10
7805: PPUSH
7806: CALL_OW 113
7810: GO 7793
7812: POP
7813: POP
// repeat wait ( 0 0$1 ) ;
7814: LD_INT 35
7816: PPUSH
7817: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7821: LD_ADDR_VAR 0 16
7825: PUSH
7826: LD_INT 22
7828: PUSH
7829: LD_VAR 0 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: LD_INT 3
7843: PUSH
7844: LD_INT 24
7846: PUSH
7847: LD_INT 550
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: LD_INT 24
7860: PUSH
7861: LD_INT 250
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PPUSH
7877: CALL_OW 69
7881: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7882: LD_ADDR_VAR 0 18
7886: PUSH
7887: LD_INT 22
7889: PUSH
7890: LD_VAR 0 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 2
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 25
7914: PUSH
7915: LD_INT 5
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 25
7924: PUSH
7925: LD_INT 8
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: LD_INT 9
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 24
7951: PUSH
7952: LD_INT 1000
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: ST_TO_ADDR
// if medicCount > 0 then
7969: LD_VAR 0 7
7973: PUSH
7974: LD_INT 0
7976: GREATER
7977: IFFALSE 8051
// begin if damageUnit_list > 0 then
7979: LD_VAR 0 16
7983: PUSH
7984: LD_INT 0
7986: GREATER
7987: IFFALSE 8051
// begin for i in damageUnit_list do
7989: LD_ADDR_VAR 0 13
7993: PUSH
7994: LD_VAR 0 16
7998: PUSH
7999: FOR_IN
8000: IFFALSE 8049
// begin ComMoveToArea ( i , healArea ) ;
8002: LD_VAR 0 13
8006: PPUSH
8007: LD_VAR 0 10
8011: PPUSH
8012: CALL_OW 113
// for j in medic_list do
8016: LD_ADDR_VAR 0 14
8020: PUSH
8021: LD_VAR 0 17
8025: PUSH
8026: FOR_IN
8027: IFFALSE 8045
// AddComHeal ( j , i ) ;
8029: LD_VAR 0 14
8033: PPUSH
8034: LD_VAR 0 13
8038: PPUSH
8039: CALL_OW 188
8043: GO 8026
8045: POP
8046: POP
// end ;
8047: GO 7999
8049: POP
8050: POP
// end ; end ; for i in soldiersOK_list do
8051: LD_ADDR_VAR 0 13
8055: PUSH
8056: LD_VAR 0 18
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8238
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8064: LD_ADDR_VAR 0 21
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_VAR 0 11
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 69
8085: PPUSH
8086: LD_VAR 0 13
8090: PPUSH
8091: CALL_OW 74
8095: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8096: LD_ADDR_VAR 0 22
8100: PUSH
8101: LD_INT 22
8103: PUSH
8104: LD_VAR 0 11
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 2
8115: PUSH
8116: LD_INT 59
8118: PUSH
8119: EMPTY
8120: LIST
8121: PUSH
8122: LD_INT 21
8124: PUSH
8125: LD_INT 1
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 21
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: PPUSH
8155: CALL_OW 69
8159: PPUSH
8160: LD_VAR 0 13
8164: PPUSH
8165: CALL_OW 74
8169: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8170: LD_VAR 0 13
8174: PPUSH
8175: LD_VAR 0 21
8179: PPUSH
8180: CALL_OW 296
8184: PUSH
8185: LD_INT 8
8187: PLUS
8188: PUSH
8189: LD_VAR 0 13
8193: PPUSH
8194: LD_VAR 0 22
8198: PPUSH
8199: CALL_OW 296
8203: LESS
8204: IFFALSE 8222
// begin ComAttackUnit ( i , target1 ) ;
8206: LD_VAR 0 13
8210: PPUSH
8211: LD_VAR 0 21
8215: PPUSH
8216: CALL_OW 115
// end else
8220: GO 8236
// begin ComAttackUnit ( i , target2 ) ;
8222: LD_VAR 0 13
8226: PPUSH
8227: LD_VAR 0 22
8231: PPUSH
8232: CALL_OW 115
// end ; end ;
8236: GO 8061
8238: POP
8239: POP
// until soldiersOK_list = [ ] ;
8240: LD_VAR 0 18
8244: PUSH
8245: EMPTY
8246: EQUAL
8247: IFFALSE 7814
// end ;
8249: LD_VAR 0 12
8253: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8254: LD_INT 0
8256: PPUSH
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
// amChassisTab = [ ] ;
8267: LD_ADDR_VAR 0 19
8271: PUSH
8272: EMPTY
8273: ST_TO_ADDR
// arChassisTab = [ ] ;
8274: LD_ADDR_VAR 0 18
8278: PUSH
8279: EMPTY
8280: ST_TO_ADDR
// ruChassisTab = [ ] ;
8281: LD_ADDR_VAR 0 17
8285: PUSH
8286: EMPTY
8287: ST_TO_ADDR
// for i = 1 to vehCount do
8288: LD_ADDR_VAR 0 13
8292: PUSH
8293: DOUBLE
8294: LD_INT 1
8296: DEC
8297: ST_TO_ADDR
8298: LD_VAR 0 3
8302: PUSH
8303: FOR_TO
8304: IFFALSE 9728
// begin wait ( 0 0$01 ) ;
8306: LD_INT 35
8308: PPUSH
8309: CALL_OW 67
// if nation = 1 then
8313: LD_VAR 0 5
8317: PUSH
8318: LD_INT 1
8320: EQUAL
8321: IFFALSE 8802
// begin uc_side = side ;
8323: LD_ADDR_OWVAR 20
8327: PUSH
8328: LD_VAR 0 2
8332: ST_TO_ADDR
// uc_nation = nation ;
8333: LD_ADDR_OWVAR 21
8337: PUSH
8338: LD_VAR 0 5
8342: ST_TO_ADDR
// vc_engine = vehengine ;
8343: LD_ADDR_OWVAR 39
8347: PUSH
8348: LD_VAR 0 6
8352: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8353: LD_ADDR_OWVAR 40
8357: PUSH
8358: LD_VAR 0 10
8362: PUSH
8363: LD_INT 1
8365: PPUSH
8366: LD_VAR 0 10
8370: PPUSH
8371: CALL_OW 12
8375: ARRAY
8376: ST_TO_ADDR
// for j = 1 to AMWeapon do
8377: LD_ADDR_VAR 0 14
8381: PUSH
8382: DOUBLE
8383: LD_INT 1
8385: DEC
8386: ST_TO_ADDR
8387: LD_VAR 0 10
8391: PUSH
8392: FOR_TO
8393: IFFALSE 8694
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8395: LD_VAR 0 10
8399: PUSH
8400: LD_VAR 0 14
8404: ARRAY
8405: PUSH
8406: LD_INT 2
8408: EQUAL
8409: PUSH
8410: LD_VAR 0 10
8414: PUSH
8415: LD_VAR 0 14
8419: ARRAY
8420: PUSH
8421: LD_INT 3
8423: EQUAL
8424: OR
8425: IFFALSE 8478
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8427: LD_ADDR_VAR 0 19
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 3
8440: PUSH
8441: LD_INT 4
8443: PUSH
8444: LD_INT 5
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8454: LD_ADDR_OWVAR 37
8458: PUSH
8459: LD_VAR 0 19
8463: PUSH
8464: LD_INT 1
8466: PPUSH
8467: LD_VAR 0 19
8471: PPUSH
8472: CALL_OW 12
8476: ARRAY
8477: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8478: LD_VAR 0 10
8482: PUSH
8483: LD_VAR 0 14
8487: ARRAY
8488: PUSH
8489: LD_INT 4
8491: EQUAL
8492: PUSH
8493: LD_VAR 0 10
8497: PUSH
8498: LD_VAR 0 14
8502: ARRAY
8503: PUSH
8504: LD_INT 5
8506: EQUAL
8507: OR
8508: PUSH
8509: LD_VAR 0 10
8513: PUSH
8514: LD_VAR 0 14
8518: ARRAY
8519: PUSH
8520: LD_INT 9
8522: EQUAL
8523: OR
8524: PUSH
8525: LD_VAR 0 10
8529: PUSH
8530: LD_VAR 0 14
8534: ARRAY
8535: PUSH
8536: LD_INT 11
8538: EQUAL
8539: OR
8540: PUSH
8541: LD_VAR 0 10
8545: PUSH
8546: LD_VAR 0 14
8550: ARRAY
8551: PUSH
8552: LD_INT 7
8554: EQUAL
8555: OR
8556: IFFALSE 8605
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8558: LD_ADDR_VAR 0 19
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: LD_INT 3
8568: PUSH
8569: LD_INT 4
8571: PUSH
8572: LD_INT 5
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8581: LD_ADDR_OWVAR 37
8585: PUSH
8586: LD_VAR 0 19
8590: PUSH
8591: LD_INT 1
8593: PPUSH
8594: LD_VAR 0 19
8598: PPUSH
8599: CALL_OW 12
8603: ARRAY
8604: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8605: LD_VAR 0 10
8609: PUSH
8610: LD_VAR 0 14
8614: ARRAY
8615: PUSH
8616: LD_INT 8
8618: EQUAL
8619: PUSH
8620: LD_VAR 0 10
8624: PUSH
8625: LD_VAR 0 14
8629: ARRAY
8630: PUSH
8631: LD_INT 6
8633: EQUAL
8634: OR
8635: PUSH
8636: LD_VAR 0 10
8640: PUSH
8641: LD_VAR 0 14
8645: ARRAY
8646: PUSH
8647: LD_INT 10
8649: EQUAL
8650: OR
8651: IFFALSE 8692
// begin amChassisTab = [ 4 , 5 ] ;
8653: LD_ADDR_VAR 0 19
8657: PUSH
8658: LD_INT 4
8660: PUSH
8661: LD_INT 5
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8668: LD_ADDR_OWVAR 37
8672: PUSH
8673: LD_VAR 0 19
8677: PUSH
8678: LD_INT 1
8680: PPUSH
8681: LD_VAR 0 19
8685: PPUSH
8686: CALL_OW 12
8690: ARRAY
8691: ST_TO_ADDR
// end ; end ;
8692: GO 8392
8694: POP
8695: POP
// veh = CreateVehicle ;
8696: LD_ADDR_VAR 0 16
8700: PUSH
8701: CALL_OW 45
8705: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8706: LD_VAR 0 16
8710: PPUSH
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 0
8718: PPUSH
8719: CALL_OW 49
// if vc_control = 1 then
8723: LD_OWVAR 38
8727: PUSH
8728: LD_INT 1
8730: EQUAL
8731: IFFALSE 8788
// begin hc_gallery =  ;
8733: LD_ADDR_OWVAR 33
8737: PUSH
8738: LD_STRING 
8740: ST_TO_ADDR
// hc_name =  ;
8741: LD_ADDR_OWVAR 26
8745: PUSH
8746: LD_STRING 
8748: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8749: LD_INT 0
8751: PPUSH
8752: LD_INT 3
8754: PPUSH
8755: LD_VAR 0 4
8759: PPUSH
8760: CALL_OW 380
// un = CreateHuman ;
8764: LD_ADDR_VAR 0 15
8768: PUSH
8769: CALL_OW 44
8773: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8774: LD_VAR 0 15
8778: PPUSH
8779: LD_VAR 0 16
8783: PPUSH
8784: CALL_OW 52
// end ; i = i + 1 ;
8788: LD_ADDR_VAR 0 13
8792: PUSH
8793: LD_VAR 0 13
8797: PUSH
8798: LD_INT 1
8800: PLUS
8801: ST_TO_ADDR
// end ; if nation = 2 then
8802: LD_VAR 0 5
8806: PUSH
8807: LD_INT 2
8809: EQUAL
8810: IFFALSE 9312
// begin uc_side = side ;
8812: LD_ADDR_OWVAR 20
8816: PUSH
8817: LD_VAR 0 2
8821: ST_TO_ADDR
// uc_nation = nation ;
8822: LD_ADDR_OWVAR 21
8826: PUSH
8827: LD_VAR 0 5
8831: ST_TO_ADDR
// vc_engine = vehengine ;
8832: LD_ADDR_OWVAR 39
8836: PUSH
8837: LD_VAR 0 6
8841: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8842: LD_INT 22
8844: PUSH
8845: LD_VAR 0 2
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 21
8856: PUSH
8857: LD_INT 2
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 33
8866: PUSH
8867: LD_INT 2
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 50
8876: PUSH
8877: EMPTY
8878: LIST
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 69
8890: PUSH
8891: LD_INT 8
8893: LESSEQUAL
8894: IFFALSE 8922
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8896: LD_ADDR_OWVAR 38
8900: PUSH
8901: LD_VAR 0 7
8905: PUSH
8906: LD_INT 1
8908: PPUSH
8909: LD_VAR 0 7
8913: PPUSH
8914: CALL_OW 12
8918: ARRAY
8919: ST_TO_ADDR
8920: GO 8930
// vc_control = control_apeman ;
8922: LD_ADDR_OWVAR 38
8926: PUSH
8927: LD_INT 5
8929: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8930: LD_ADDR_OWVAR 40
8934: PUSH
8935: LD_VAR 0 9
8939: PUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 9
8947: PPUSH
8948: CALL_OW 12
8952: ARRAY
8953: ST_TO_ADDR
// for j = 1 to ARWeapons do
8954: LD_ADDR_VAR 0 14
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 9
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9204
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8972: LD_VAR 0 9
8976: PUSH
8977: LD_VAR 0 14
8981: ARRAY
8982: PUSH
8983: LD_INT 24
8985: EQUAL
8986: PUSH
8987: LD_VAR 0 9
8991: PUSH
8992: LD_VAR 0 14
8996: ARRAY
8997: PUSH
8998: LD_INT 22
9000: EQUAL
9001: OR
9002: PUSH
9003: LD_VAR 0 9
9007: PUSH
9008: LD_VAR 0 14
9012: ARRAY
9013: PUSH
9014: LD_INT 23
9016: EQUAL
9017: OR
9018: PUSH
9019: LD_VAR 0 9
9023: PUSH
9024: LD_VAR 0 14
9028: ARRAY
9029: PUSH
9030: LD_INT 30
9032: EQUAL
9033: OR
9034: IFFALSE 9083
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9036: LD_ADDR_VAR 0 18
9040: PUSH
9041: LD_INT 11
9043: PUSH
9044: LD_INT 12
9046: PUSH
9047: LD_INT 13
9049: PUSH
9050: LD_INT 14
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9059: LD_ADDR_OWVAR 37
9063: PUSH
9064: LD_VAR 0 18
9068: PUSH
9069: LD_INT 1
9071: PPUSH
9072: LD_VAR 0 18
9076: PPUSH
9077: CALL_OW 12
9081: ARRAY
9082: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9083: LD_VAR 0 9
9087: PUSH
9088: LD_VAR 0 14
9092: ARRAY
9093: PUSH
9094: LD_INT 29
9096: EQUAL
9097: PUSH
9098: LD_VAR 0 9
9102: PUSH
9103: LD_VAR 0 14
9107: ARRAY
9108: PUSH
9109: LD_INT 28
9111: EQUAL
9112: OR
9113: PUSH
9114: LD_VAR 0 9
9118: PUSH
9119: LD_VAR 0 14
9123: ARRAY
9124: PUSH
9125: LD_INT 27
9127: EQUAL
9128: OR
9129: PUSH
9130: LD_VAR 0 9
9134: PUSH
9135: LD_VAR 0 14
9139: ARRAY
9140: PUSH
9141: LD_INT 26
9143: EQUAL
9144: OR
9145: PUSH
9146: LD_VAR 0 9
9150: PUSH
9151: LD_VAR 0 14
9155: ARRAY
9156: PUSH
9157: LD_INT 25
9159: EQUAL
9160: OR
9161: IFFALSE 9202
// begin arChassisTab = [ 13 , 14 ] ;
9163: LD_ADDR_VAR 0 18
9167: PUSH
9168: LD_INT 13
9170: PUSH
9171: LD_INT 14
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9178: LD_ADDR_OWVAR 37
9182: PUSH
9183: LD_VAR 0 18
9187: PUSH
9188: LD_INT 1
9190: PPUSH
9191: LD_VAR 0 18
9195: PPUSH
9196: CALL_OW 12
9200: ARRAY
9201: ST_TO_ADDR
// end ; end ;
9202: GO 8969
9204: POP
9205: POP
// veh = CreateVehicle ;
9206: LD_ADDR_VAR 0 16
9210: PUSH
9211: CALL_OW 45
9215: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9216: LD_VAR 0 16
9220: PPUSH
9221: LD_VAR 0 1
9225: PPUSH
9226: LD_INT 0
9228: PPUSH
9229: CALL_OW 49
// if vc_control = 1 then
9233: LD_OWVAR 38
9237: PUSH
9238: LD_INT 1
9240: EQUAL
9241: IFFALSE 9298
// begin hc_gallery =  ;
9243: LD_ADDR_OWVAR 33
9247: PUSH
9248: LD_STRING 
9250: ST_TO_ADDR
// hc_name =  ;
9251: LD_ADDR_OWVAR 26
9255: PUSH
9256: LD_STRING 
9258: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9259: LD_INT 0
9261: PPUSH
9262: LD_INT 3
9264: PPUSH
9265: LD_VAR 0 4
9269: PPUSH
9270: CALL_OW 380
// un = CreateHuman ;
9274: LD_ADDR_VAR 0 15
9278: PUSH
9279: CALL_OW 44
9283: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9284: LD_VAR 0 15
9288: PPUSH
9289: LD_VAR 0 16
9293: PPUSH
9294: CALL_OW 52
// end ; i = i + 1 ;
9298: LD_ADDR_VAR 0 13
9302: PUSH
9303: LD_VAR 0 13
9307: PUSH
9308: LD_INT 1
9310: PLUS
9311: ST_TO_ADDR
// end ; if nation = 3 then
9312: LD_VAR 0 5
9316: PUSH
9317: LD_INT 3
9319: EQUAL
9320: IFFALSE 9726
// begin uc_side = side ;
9322: LD_ADDR_OWVAR 20
9326: PUSH
9327: LD_VAR 0 2
9331: ST_TO_ADDR
// uc_nation = nation ;
9332: LD_ADDR_OWVAR 21
9336: PUSH
9337: LD_VAR 0 5
9341: ST_TO_ADDR
// vc_engine = vehengine ;
9342: LD_ADDR_OWVAR 39
9346: PUSH
9347: LD_VAR 0 6
9351: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9352: LD_ADDR_OWVAR 38
9356: PUSH
9357: LD_VAR 0 7
9361: PUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_VAR 0 7
9369: PPUSH
9370: CALL_OW 12
9374: ARRAY
9375: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9376: LD_ADDR_OWVAR 40
9380: PUSH
9381: LD_VAR 0 8
9385: PUSH
9386: LD_INT 1
9388: PPUSH
9389: LD_VAR 0 8
9393: PPUSH
9394: CALL_OW 12
9398: ARRAY
9399: ST_TO_ADDR
// for j = 1 to RuWeapons do
9400: LD_ADDR_VAR 0 14
9404: PUSH
9405: DOUBLE
9406: LD_INT 1
9408: DEC
9409: ST_TO_ADDR
9410: LD_VAR 0 8
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9602
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9418: LD_VAR 0 8
9422: PUSH
9423: LD_VAR 0 14
9427: ARRAY
9428: PUSH
9429: LD_INT 42
9431: EQUAL
9432: PUSH
9433: LD_VAR 0 8
9437: PUSH
9438: LD_VAR 0 14
9442: ARRAY
9443: PUSH
9444: LD_INT 43
9446: EQUAL
9447: OR
9448: PUSH
9449: LD_VAR 0 8
9453: PUSH
9454: LD_VAR 0 14
9458: ARRAY
9459: PUSH
9460: LD_INT 44
9462: EQUAL
9463: OR
9464: PUSH
9465: LD_VAR 0 8
9469: PUSH
9470: LD_VAR 0 14
9474: ARRAY
9475: PUSH
9476: LD_INT 45
9478: EQUAL
9479: OR
9480: PUSH
9481: LD_VAR 0 8
9485: PUSH
9486: LD_VAR 0 14
9490: ARRAY
9491: PUSH
9492: LD_INT 49
9494: EQUAL
9495: OR
9496: IFFALSE 9533
// begin ruChassisTab = [ 24 ] ;
9498: LD_ADDR_VAR 0 17
9502: PUSH
9503: LD_INT 24
9505: PUSH
9506: EMPTY
9507: LIST
9508: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9509: LD_ADDR_OWVAR 37
9513: PUSH
9514: LD_VAR 0 17
9518: PUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_VAR 0 17
9526: PPUSH
9527: CALL_OW 12
9531: ARRAY
9532: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9533: LD_VAR 0 8
9537: PUSH
9538: LD_VAR 0 14
9542: ARRAY
9543: PUSH
9544: LD_INT 46
9546: EQUAL
9547: PUSH
9548: LD_VAR 0 8
9552: PUSH
9553: LD_VAR 0 14
9557: ARRAY
9558: PUSH
9559: LD_INT 47
9561: EQUAL
9562: OR
9563: IFFALSE 9600
// begin ruChassisTab = [ 24 ] ;
9565: LD_ADDR_VAR 0 17
9569: PUSH
9570: LD_INT 24
9572: PUSH
9573: EMPTY
9574: LIST
9575: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9576: LD_ADDR_OWVAR 37
9580: PUSH
9581: LD_VAR 0 17
9585: PUSH
9586: LD_INT 1
9588: PPUSH
9589: LD_VAR 0 17
9593: PPUSH
9594: CALL_OW 12
9598: ARRAY
9599: ST_TO_ADDR
// end ; end ;
9600: GO 9415
9602: POP
9603: POP
// veh = CreateVehicle ;
9604: LD_ADDR_VAR 0 16
9608: PUSH
9609: CALL_OW 45
9613: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9614: LD_VAR 0 16
9618: PPUSH
9619: LD_VAR 0 1
9623: PPUSH
9624: LD_INT 0
9626: PPUSH
9627: CALL_OW 49
// if vc_control = 1 then
9631: LD_OWVAR 38
9635: PUSH
9636: LD_INT 1
9638: EQUAL
9639: IFFALSE 9726
// begin if uc_side = 8 then
9641: LD_OWVAR 20
9645: PUSH
9646: LD_INT 8
9648: EQUAL
9649: IFFALSE 9661
// uc_nation = 2 else
9651: LD_ADDR_OWVAR 21
9655: PUSH
9656: LD_INT 2
9658: ST_TO_ADDR
9659: GO 9671
// uc_nation = nation ;
9661: LD_ADDR_OWVAR 21
9665: PUSH
9666: LD_VAR 0 5
9670: ST_TO_ADDR
// hc_gallery =  ;
9671: LD_ADDR_OWVAR 33
9675: PUSH
9676: LD_STRING 
9678: ST_TO_ADDR
// hc_name =  ;
9679: LD_ADDR_OWVAR 26
9683: PUSH
9684: LD_STRING 
9686: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9687: LD_INT 0
9689: PPUSH
9690: LD_INT 3
9692: PPUSH
9693: LD_VAR 0 4
9697: PPUSH
9698: CALL_OW 380
// un = CreateHuman ;
9702: LD_ADDR_VAR 0 15
9706: PUSH
9707: CALL_OW 44
9711: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9712: LD_VAR 0 15
9716: PPUSH
9717: LD_VAR 0 16
9721: PPUSH
9722: CALL_OW 52
// end ; end ; end ;
9726: GO 8303
9728: POP
9729: POP
// repeat wait ( 0 0$1 ) ;
9730: LD_INT 35
9732: PPUSH
9733: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9737: LD_ADDR_VAR 0 20
9741: PUSH
9742: LD_INT 22
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 21
9756: PUSH
9757: LD_INT 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 24
9766: PUSH
9767: LD_INT 250
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: LD_INT 34
9779: PUSH
9780: LD_INT 25
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 34
9789: PUSH
9790: LD_INT 26
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 34
9799: PUSH
9800: LD_INT 27
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 34
9809: PUSH
9810: LD_INT 28
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 34
9819: PUSH
9820: LD_INT 29
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 34
9829: PUSH
9830: LD_INT 46
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 34
9839: PUSH
9840: LD_INT 44
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 34
9849: PUSH
9850: LD_INT 45
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 34
9859: PUSH
9860: LD_INT 47
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PPUSH
9885: CALL_OW 69
9889: ST_TO_ADDR
// if vehicleOK_list > 0 then
9890: LD_VAR 0 20
9894: PUSH
9895: LD_INT 0
9897: GREATER
9898: IFFALSE 10089
// begin for i in vehicleOK_list do
9900: LD_ADDR_VAR 0 13
9904: PUSH
9905: LD_VAR 0 20
9909: PUSH
9910: FOR_IN
9911: IFFALSE 10087
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9913: LD_ADDR_VAR 0 21
9917: PUSH
9918: LD_INT 22
9920: PUSH
9921: LD_VAR 0 11
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PPUSH
9930: CALL_OW 69
9934: PPUSH
9935: LD_VAR 0 13
9939: PPUSH
9940: CALL_OW 74
9944: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9945: LD_ADDR_VAR 0 22
9949: PUSH
9950: LD_INT 22
9952: PUSH
9953: LD_VAR 0 11
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 59
9967: PUSH
9968: EMPTY
9969: LIST
9970: PUSH
9971: LD_INT 21
9973: PUSH
9974: LD_INT 1
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 21
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: PPUSH
10004: CALL_OW 69
10008: PPUSH
10009: LD_VAR 0 13
10013: PPUSH
10014: CALL_OW 74
10018: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10019: LD_VAR 0 13
10023: PPUSH
10024: LD_VAR 0 21
10028: PPUSH
10029: CALL_OW 296
10033: PUSH
10034: LD_INT 8
10036: PLUS
10037: PUSH
10038: LD_VAR 0 13
10042: PPUSH
10043: LD_VAR 0 22
10047: PPUSH
10048: CALL_OW 296
10052: LESS
10053: IFFALSE 10071
// begin ComAttackUnit ( i , target1 ) ;
10055: LD_VAR 0 13
10059: PPUSH
10060: LD_VAR 0 21
10064: PPUSH
10065: CALL_OW 115
// end else
10069: GO 10085
// begin ComAttackUnit ( i , target2 ) ;
10071: LD_VAR 0 13
10075: PPUSH
10076: LD_VAR 0 22
10080: PPUSH
10081: CALL_OW 115
// end ; end ;
10085: GO 9910
10087: POP
10088: POP
// end ; until vehicleOK_list = 0 ;
10089: LD_VAR 0 20
10093: PUSH
10094: LD_INT 0
10096: EQUAL
10097: IFFALSE 9730
// end ;
10099: LD_VAR 0 12
10103: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10104: LD_INT 0
10106: PPUSH
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10112: LD_ADDR_VAR 0 6
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_VAR 0 1
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 34
10131: PUSH
10132: LD_INT 29
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PPUSH
10143: CALL_OW 69
10147: ST_TO_ADDR
// if veh_list = 0 then
10148: LD_VAR 0 6
10152: PUSH
10153: LD_INT 0
10155: EQUAL
10156: IFFALSE 10160
// exit ;
10158: GO 10365
// if veh_list > 0 then
10160: LD_VAR 0 6
10164: PUSH
10165: LD_INT 0
10167: GREATER
10168: IFFALSE 10365
// begin for i in veh_List do
10170: LD_ADDR_VAR 0 4
10174: PUSH
10175: LD_VAR 0 6
10179: PUSH
10180: FOR_IN
10181: IFFALSE 10363
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10183: LD_ADDR_VAR 0 7
10187: PUSH
10188: LD_INT 22
10190: PUSH
10191: LD_VAR 0 2
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 24
10202: PUSH
10203: LD_INT 250
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: LD_INT 59
10215: PUSH
10216: EMPTY
10217: LIST
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 1
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 21
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: PPUSH
10253: CALL_OW 69
10257: PPUSH
10258: LD_VAR 0 4
10262: PPUSH
10263: CALL_OW 74
10267: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10268: LD_VAR 0 4
10272: PPUSH
10273: LD_VAR 0 7
10277: PPUSH
10278: CALL_OW 115
// if not HasTask ( i ) then
10282: LD_VAR 0 4
10286: PPUSH
10287: CALL_OW 314
10291: NOT
10292: IFFALSE 10361
// begin wait ( 0 0$0.1 ) ;
10294: LD_INT 4
10296: PPUSH
10297: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10301: LD_ADDR_VAR 0 8
10305: PUSH
10306: LD_INT 22
10308: PUSH
10309: LD_VAR 0 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 24
10320: PUSH
10321: LD_INT 250
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PPUSH
10337: LD_VAR 0 4
10341: PPUSH
10342: CALL_OW 74
10346: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10347: LD_VAR 0 4
10351: PPUSH
10352: LD_VAR 0 8
10356: PPUSH
10357: CALL_OW 115
// end ; end ;
10361: GO 10180
10363: POP
10364: POP
// end ; end ; end_of_file
10365: LD_VAR 0 3
10369: RET
// every 0 0$1 do
10370: GO 10372
10372: DISABLE
// begin enable ;
10373: ENABLE
// IntBazooka ( 7 , 1 ) ;
10374: LD_INT 7
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL 6875 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10384: LD_INT 8
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL 10104 0 2
// end ;
10394: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10395: LD_INT 22
10397: PUSH
10398: LD_INT 3
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PUSH
10405: LD_INT 21
10407: PUSH
10408: LD_INT 2
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 50
10417: PUSH
10418: EMPTY
10419: LIST
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: LD_INT 34
10426: PUSH
10427: LD_INT 46
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 34
10436: PUSH
10437: LD_INT 44
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 34
10446: PUSH
10447: LD_INT 45
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 34
10456: PUSH
10457: LD_INT 47
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: PPUSH
10477: CALL_OW 69
10481: PUSH
10482: LD_INT 0
10484: GREATER
10485: PUSH
10486: LD_INT 22
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 21
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 50
10508: PUSH
10509: EMPTY
10510: LIST
10511: PUSH
10512: LD_INT 34
10514: PUSH
10515: LD_INT 49
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: PUSH
10533: LD_INT 0
10535: GREATER
10536: AND
10537: IFFALSE 10709
10539: GO 10541
10541: DISABLE
10542: LD_INT 0
10544: PPUSH
10545: PPUSH
// begin enable ;
10546: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 3
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 21
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 50
10574: PUSH
10575: EMPTY
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 34
10583: PUSH
10584: LD_INT 46
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 34
10593: PUSH
10594: LD_INT 44
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 34
10603: PUSH
10604: LD_INT 45
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 34
10613: PUSH
10614: LD_INT 47
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 69
10638: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 21
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 50
10666: PUSH
10667: EMPTY
10668: LIST
10669: PUSH
10670: LD_INT 34
10672: PUSH
10673: LD_INT 49
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PPUSH
10686: CALL_OW 69
10690: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10691: LD_VAR 0 2
10695: PPUSH
10696: LD_VAR 0 1
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PPUSH
10705: CALL_OW 112
// end ; end_of_file
10709: PPOPN 2
10711: END
// every 0 0$1 trigger eventVar4 = 1 do
10712: LD_EXP 40
10716: PUSH
10717: LD_INT 1
10719: EQUAL
10720: IFFALSE 11514
10722: GO 10724
10724: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10725: LD_EXP 1
10729: PPUSH
10730: LD_STRING D9b-JMM-1
10732: PPUSH
10733: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10737: LD_EXP 15
10741: PPUSH
10742: LD_STRING D9b-Pow-1
10744: PPUSH
10745: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10749: LD_EXP 1
10753: PPUSH
10754: LD_STRING D9b-JMM-2
10756: PPUSH
10757: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10761: LD_EXP 15
10765: PPUSH
10766: LD_STRING D9b-Pow-2
10768: PPUSH
10769: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10773: LD_EXP 1
10777: PPUSH
10778: LD_STRING D9b-JMM-3
10780: PPUSH
10781: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10785: LD_EXP 15
10789: PPUSH
10790: LD_STRING D9b-Pow-3
10792: PPUSH
10793: CALL_OW 94
// if burlakStatus = 1 then
10797: LD_EXP 28
10801: PUSH
10802: LD_INT 1
10804: EQUAL
10805: IFFALSE 10819
// begin AddMedal ( Burlak , 1 ) ;
10807: LD_STRING Burlak
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 101
// end else
10817: GO 10830
// begin AddMedal ( Burlak , - 1 ) ;
10819: LD_STRING Burlak
10821: PPUSH
10822: LD_INT 1
10824: NEG
10825: PPUSH
10826: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10830: LD_EXP 2
10834: PPUSH
10835: CALL_OW 302
10839: IFFALSE 10853
// begin AddMedal ( Stevens , 1 ) ;
10841: LD_STRING Stevens
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 101
// end else
10851: GO 10864
// begin AddMedal ( Stevens , - 1 ) ;
10853: LD_STRING Stevens
10855: PPUSH
10856: LD_INT 1
10858: NEG
10859: PPUSH
10860: CALL_OW 101
// end ; if radarOnSpot = 1 then
10864: LD_EXP 30
10868: PUSH
10869: LD_INT 1
10871: EQUAL
10872: IFFALSE 10886
// begin AddMedal ( Observation , 1 ) ;
10874: LD_STRING Observation
10876: PPUSH
10877: LD_INT 1
10879: PPUSH
10880: CALL_OW 101
// end else
10884: GO 10897
// begin AddMedal ( Observation , - 1 ) ;
10886: LD_STRING Observation
10888: PPUSH
10889: LD_INT 1
10891: NEG
10892: PPUSH
10893: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10897: LD_STRING MAIN
10899: PPUSH
10900: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10904: LD_EXP 28
10908: PPUSH
10909: LD_STRING 13_BurlakStatus_1
10911: PPUSH
10912: CALL_OW 39
// if IsOk ( Stevens ) then
10916: LD_EXP 2
10920: PPUSH
10921: CALL_OW 302
10925: IFFALSE 10939
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10927: LD_INT 1
10929: PPUSH
10930: LD_STRING 13_StevensStatus_1
10932: PPUSH
10933: CALL_OW 39
10937: GO 10949
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10939: LD_INT 0
10941: PPUSH
10942: LD_STRING 13_StevensStatus_1
10944: PPUSH
10945: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10949: LD_INT 22
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 21
10961: PUSH
10962: LD_INT 1
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 2
10971: PUSH
10972: LD_INT 25
10974: PUSH
10975: LD_INT 1
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 25
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 25
10994: PUSH
10995: LD_INT 3
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 25
11004: PUSH
11005: LD_INT 4
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 25
11014: PUSH
11015: LD_INT 5
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 25
11024: PUSH
11025: LD_INT 8
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: CALL_OW 69
11050: PPUSH
11051: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11055: LD_EXP 1
11059: PPUSH
11060: LD_EXP 36
11064: PUSH
11065: LD_STRING JMM
11067: STR
11068: PPUSH
11069: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11073: LD_EXP 8
11077: PPUSH
11078: LD_EXP 36
11082: PUSH
11083: LD_STRING Brown
11085: STR
11086: PPUSH
11087: CALL 7183 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11091: LD_EXP 4
11095: PPUSH
11096: LD_EXP 36
11100: PUSH
11101: LD_STRING Donaldson
11103: STR
11104: PPUSH
11105: CALL 7183 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11109: LD_EXP 5
11113: PPUSH
11114: LD_EXP 36
11118: PUSH
11119: LD_STRING Bobby
11121: STR
11122: PPUSH
11123: CALL 7183 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11127: LD_EXP 6
11131: PPUSH
11132: LD_EXP 36
11136: PUSH
11137: LD_STRING Cyrus
11139: STR
11140: PPUSH
11141: CALL 7183 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11145: LD_EXP 3
11149: PPUSH
11150: LD_EXP 36
11154: PUSH
11155: LD_STRING Lisa
11157: STR
11158: PPUSH
11159: CALL 7183 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11163: LD_EXP 13
11167: PPUSH
11168: LD_EXP 36
11172: PUSH
11173: LD_STRING Frank
11175: STR
11176: PPUSH
11177: CALL 7183 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11181: LD_EXP 14
11185: PPUSH
11186: LD_EXP 36
11190: PUSH
11191: LD_STRING Kikuchi
11193: STR
11194: PPUSH
11195: CALL 7183 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11199: LD_EXP 10
11203: PPUSH
11204: LD_EXP 36
11208: PUSH
11209: LD_STRING Houten
11211: STR
11212: PPUSH
11213: CALL 7183 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11217: LD_EXP 12
11221: PPUSH
11222: LD_EXP 36
11226: PUSH
11227: LD_STRING Gary
11229: STR
11230: PPUSH
11231: CALL 7183 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11235: LD_EXP 11
11239: PPUSH
11240: LD_EXP 36
11244: PUSH
11245: LD_STRING Cornell
11247: STR
11248: PPUSH
11249: CALL 7183 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11253: LD_EXP 7
11257: PPUSH
11258: LD_EXP 36
11262: PUSH
11263: LD_STRING Denis
11265: STR
11266: PPUSH
11267: CALL 7183 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11271: LD_EXP 9
11275: PPUSH
11276: LD_EXP 36
11280: PUSH
11281: LD_STRING Gladstone
11283: STR
11284: PPUSH
11285: CALL 7183 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11289: LD_EXP 2
11293: PPUSH
11294: LD_EXP 36
11298: PUSH
11299: LD_STRING Stevens
11301: STR
11302: PPUSH
11303: CALL 7183 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11307: LD_INT 50
11309: PUSH
11310: EMPTY
11311: LIST
11312: PUSH
11313: LD_INT 22
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 21
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: LD_INT 2
11335: PUSH
11336: LD_INT 25
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 25
11348: PUSH
11349: LD_INT 2
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 25
11358: PUSH
11359: LD_INT 3
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 25
11368: PUSH
11369: LD_INT 4
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 25
11378: PUSH
11379: LD_INT 5
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 25
11388: PUSH
11389: LD_INT 8
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: PUSH
11416: LD_EXP 1
11420: PUSH
11421: LD_EXP 8
11425: PUSH
11426: LD_EXP 4
11430: PUSH
11431: LD_EXP 5
11435: PUSH
11436: LD_EXP 6
11440: PUSH
11441: LD_EXP 3
11445: PUSH
11446: LD_EXP 13
11450: PUSH
11451: LD_EXP 9
11455: PUSH
11456: LD_EXP 14
11460: PUSH
11461: LD_EXP 7
11465: PUSH
11466: LD_EXP 10
11470: PUSH
11471: LD_EXP 12
11475: PUSH
11476: LD_EXP 11
11480: PUSH
11481: LD_EXP 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: DIFF
11502: PPUSH
11503: LD_STRING 13_other_survivors
11505: PPUSH
11506: CALL_OW 38
// YouWin ;
11510: CALL_OW 103
// end ; end_of_file
11514: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11515: LD_EXP 32
11519: PUSH
11520: LD_INT 2
11522: EQUAL
11523: IFFALSE 11659
11525: GO 11527
11527: DISABLE
11528: LD_INT 0
11530: PPUSH
11531: PPUSH
11532: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_INT 22
11540: PUSH
11541: LD_INT 1
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 21
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: LD_INT 30
11563: PUSH
11564: LD_INT 0
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: PPUSH
11591: CALL_OW 69
11595: ST_TO_ADDR
// for i in tmp do
11596: LD_ADDR_VAR 0 1
11600: PUSH
11601: LD_VAR 0 2
11605: PUSH
11606: FOR_IN
11607: IFFALSE 11640
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_VAR 0 3
11618: PUSH
11619: LD_VAR 0 1
11623: PPUSH
11624: CALL_OW 274
11628: PPUSH
11629: LD_INT 3
11631: PPUSH
11632: CALL_OW 275
11636: PLUS
11637: ST_TO_ADDR
11638: GO 11606
11640: POP
11641: POP
// if yourSiberite < 79 then
11642: LD_VAR 0 3
11646: PUSH
11647: LD_INT 79
11649: LESS
11650: IFFALSE 11659
// YouLost ( siberite ) ;
11652: LD_STRING siberite
11654: PPUSH
11655: CALL_OW 104
// end ;
11659: PPOPN 3
11661: END
// every 0 0$1 trigger IsDead ( JMM ) do
11662: LD_EXP 1
11666: PPUSH
11667: CALL_OW 301
11671: IFFALSE 11683
11673: GO 11675
11675: DISABLE
// YouLost ( JMM ) ; end_of_file
11676: LD_STRING JMM
11678: PPUSH
11679: CALL_OW 104
11683: END
// every 8 8$0 + 7 7$0 do
11684: GO 11686
11686: DISABLE
// begin enable ;
11687: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 2 , 4 ) , 0 , 0 , [ 3 , 4 , 5 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11688: LD_INT 8
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: LD_INT 2
11696: PPUSH
11697: LD_INT 4
11699: PPUSH
11700: CALL_OW 12
11704: PPUSH
11705: LD_INT 0
11707: PPUSH
11708: LD_INT 0
11710: PPUSH
11711: LD_INT 3
11713: PUSH
11714: LD_INT 4
11716: PUSH
11717: LD_INT 5
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: LD_OWVAR 67
11729: ARRAY
11730: PPUSH
11731: LD_INT 0
11733: PPUSH
11734: LD_INT 10
11736: PPUSH
11737: LD_INT 8
11739: PUSH
11740: LD_INT 9
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 1
11749: PPUSH
11750: LD_INT 2
11752: PPUSH
11753: CALL_OW 12
11757: ARRAY
11758: PPUSH
11759: LD_INT 12
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL 7234 0 11
// end ;
11769: END
// every 8 8$0 + 7 7$0 do
11770: GO 11772
11772: DISABLE
// begin enable ;
11773: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11774: LD_ADDR_EXP 33
11778: PUSH
11779: LD_EXP 33
11783: PUSH
11784: LD_INT 1
11786: PLUS
11787: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11788: LD_INT 8
11790: PUSH
11791: LD_INT 9
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_INT 2
11803: PPUSH
11804: CALL_OW 12
11808: ARRAY
11809: PPUSH
11810: LD_INT 8
11812: PPUSH
11813: LD_INT 4
11815: PPUSH
11816: LD_INT 9
11818: PPUSH
11819: CALL_OW 12
11823: PUSH
11824: LD_INT 6
11826: PPUSH
11827: LD_INT 9
11829: PPUSH
11830: CALL_OW 12
11834: PUSH
11835: LD_INT 6
11837: PPUSH
11838: LD_INT 10
11840: PPUSH
11841: CALL_OW 12
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_OWVAR 67
11855: ARRAY
11856: PPUSH
11857: LD_INT 10
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: LD_INT 3
11865: PPUSH
11866: LD_INT 5
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: EMPTY
11877: PPUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: LD_INT 27
11886: PUSH
11887: LD_INT 28
11889: PUSH
11890: LD_INT 29
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PPUSH
11900: EMPTY
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL 8254 0 11
// end ;
11909: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do
11910: LD_EXP 33
11914: PUSH
11915: LD_INT 4
11917: GREATEREQUAL
11918: IFFALSE 12023
11920: GO 11922
11922: DISABLE
// begin enable ;
11923: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11924: LD_ADDR_EXP 33
11928: PUSH
11929: LD_EXP 33
11933: PUSH
11934: LD_INT 1
11936: PLUS
11937: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
11938: LD_INT 8
11940: PUSH
11941: LD_INT 9
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 1
11950: PPUSH
11951: LD_INT 2
11953: PPUSH
11954: CALL_OW 12
11958: ARRAY
11959: PPUSH
11960: LD_INT 8
11962: PPUSH
11963: LD_INT 1
11965: PUSH
11966: LD_INT 2
11968: PUSH
11969: LD_INT 3
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: LD_OWVAR 67
11981: ARRAY
11982: PPUSH
11983: LD_INT 10
11985: PPUSH
11986: LD_INT 3
11988: PPUSH
11989: LD_INT 3
11991: PPUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PPUSH
12002: LD_INT 47
12004: PUSH
12005: LD_INT 47
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PPUSH
12012: EMPTY
12013: PPUSH
12014: EMPTY
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL 8254 0 11
// end ;
12023: END
// every 1 1$0 trigger eventVar2 = 1 do
12024: LD_EXP 38
12028: PUSH
12029: LD_INT 1
12031: EQUAL
12032: IFFALSE 12134
12034: GO 12036
12036: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12037: LD_INT 8
12039: PUSH
12040: LD_INT 9
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 2
12052: PPUSH
12053: CALL_OW 12
12057: ARRAY
12058: PPUSH
12059: LD_INT 3
12061: PPUSH
12062: LD_INT 6
12064: PUSH
12065: LD_INT 7
12067: PUSH
12068: LD_INT 8
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: LD_OWVAR 67
12080: ARRAY
12081: PPUSH
12082: LD_INT 10
12084: PPUSH
12085: LD_INT 3
12087: PPUSH
12088: LD_INT 3
12090: PPUSH
12091: LD_INT 3
12093: PUSH
12094: LD_INT 3
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PPUSH
12101: LD_INT 46
12103: PUSH
12104: LD_INT 44
12106: PUSH
12107: LD_INT 45
12109: PUSH
12110: LD_INT 47
12112: PUSH
12113: LD_INT 49
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: PPUSH
12123: EMPTY
12124: PPUSH
12125: EMPTY
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL 8254 0 11
// end ; end_of_file
12134: END
// every 1 1$0 do
12135: GO 12137
12137: DISABLE
// begin enable ;
12138: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12139: LD_INT 3
12141: PPUSH
12142: LD_INT 5
12144: PPUSH
12145: CALL_OW 12
12149: PPUSH
12150: LD_INT 13
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 55
// end ;
12160: END
