// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 41
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 36
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 42
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1527 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1431 0 0
// PrepareDifficulty ;
 167: CALL 6502 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 42
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; begin
 489: LD_INT 0
 491: PPUSH
// uc_side = 1 ;
 492: LD_ADDR_OWVAR 20
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 500: LD_ADDR_EXP 1
 504: PUSH
 505: LD_STRING 13c_JMM
 507: PPUSH
 508: LD_INT 1
 510: PPUSH
 511: CALL 6186 0 2
 515: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 516: LD_ADDR_EXP 2
 520: PUSH
 521: LD_STRING 13c_Stevens
 523: PPUSH
 524: LD_INT 1
 526: PPUSH
 527: CALL 6186 0 2
 531: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 532: LD_ADDR_EXP 3
 536: PUSH
 537: LD_STRING 13c_Lisa
 539: PPUSH
 540: LD_INT 1
 542: PPUSH
 543: CALL 6186 0 2
 547: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 548: LD_ADDR_EXP 4
 552: PUSH
 553: LD_STRING 13c_Donaldson
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 6186 0 2
 563: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 564: LD_ADDR_EXP 5
 568: PUSH
 569: LD_STRING 13c_Bobby
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 6186 0 2
 579: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 580: LD_ADDR_EXP 6
 584: PUSH
 585: LD_STRING 13c_Cyrus
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: CALL 6186 0 2
 595: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 596: LD_ADDR_EXP 7
 600: PUSH
 601: LD_STRING 13c_Denis
 603: PPUSH
 604: LD_INT 1
 606: PPUSH
 607: CALL 6186 0 2
 611: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 612: LD_ADDR_EXP 8
 616: PUSH
 617: LD_STRING 13c_Brown
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL 6186 0 2
 627: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 628: LD_ADDR_EXP 9
 632: PUSH
 633: LD_STRING 13c_Gladstone
 635: PPUSH
 636: LD_INT 1
 638: PPUSH
 639: CALL 6186 0 2
 643: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 644: LD_ADDR_EXP 10
 648: PUSH
 649: LD_STRING 13c_Houten
 651: PPUSH
 652: LD_INT 1
 654: PPUSH
 655: CALL 6186 0 2
 659: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 660: LD_ADDR_EXP 11
 664: PUSH
 665: LD_STRING 13c_Cornel
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL 6186 0 2
 675: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 676: LD_ADDR_EXP 12
 680: PUSH
 681: LD_STRING 13c_Gary
 683: PPUSH
 684: LD_INT 1
 686: PPUSH
 687: CALL 6186 0 2
 691: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_STRING 13c_Frank
 699: PPUSH
 700: LD_INT 1
 702: PPUSH
 703: CALL 6186 0 2
 707: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_STRING 13c_Kikuchi
 715: PPUSH
 716: LD_INT 1
 718: PPUSH
 719: CALL 6186 0 2
 723: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 724: LD_ADDR_EXP 15
 728: PUSH
 729: LD_STRING Powell
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL 6186 0 2
 739: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 740: LD_EXP 1
 744: PPUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 58
 767: PUSH
 768: EMPTY
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PPUSH
 776: CALL_OW 69
 780: PUSH
 781: LD_INT 1
 783: ARRAY
 784: PPUSH
 785: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 789: LD_EXP 2
 793: PPUSH
 794: LD_INT 22
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 21
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 58
 816: PUSH
 817: EMPTY
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: PPUSH
 825: CALL_OW 69
 829: PUSH
 830: LD_INT 1
 832: ARRAY
 833: PPUSH
 834: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 838: LD_EXP 3
 842: PPUSH
 843: LD_INT 22
 845: PUSH
 846: LD_INT 1
 848: PUSH
 849: EMPTY
 850: LIST
 851: LIST
 852: PUSH
 853: LD_INT 21
 855: PUSH
 856: LD_INT 2
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 58
 865: PUSH
 866: EMPTY
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 887: LD_EXP 4
 891: PPUSH
 892: LD_INT 22
 894: PUSH
 895: LD_INT 1
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 2
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 58
 914: PUSH
 915: EMPTY
 916: LIST
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PPUSH
 923: CALL_OW 69
 927: PUSH
 928: LD_INT 1
 930: ARRAY
 931: PPUSH
 932: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 936: LD_EXP 5
 940: PPUSH
 941: LD_INT 22
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: LD_INT 21
 953: PUSH
 954: LD_INT 2
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 58
 963: PUSH
 964: EMPTY
 965: LIST
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 69
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 985: LD_EXP 6
 989: PPUSH
 990: LD_INT 22
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 21
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 58
1012: PUSH
1013: EMPTY
1014: LIST
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: PPUSH
1021: CALL_OW 69
1025: PUSH
1026: LD_INT 1
1028: ARRAY
1029: PPUSH
1030: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1034: LD_EXP 7
1038: PPUSH
1039: LD_INT 22
1041: PUSH
1042: LD_INT 1
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 21
1051: PUSH
1052: LD_INT 2
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 58
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: PUSH
1075: LD_INT 1
1077: ARRAY
1078: PPUSH
1079: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1083: LD_EXP 8
1087: PPUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 21
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 58
1110: PUSH
1111: EMPTY
1112: LIST
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: PPUSH
1119: CALL_OW 69
1123: PUSH
1124: LD_INT 1
1126: ARRAY
1127: PPUSH
1128: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1132: LD_EXP 9
1136: PPUSH
1137: LD_INT 22
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: LD_INT 21
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 58
1159: PUSH
1160: EMPTY
1161: LIST
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: PPUSH
1168: CALL_OW 69
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1181: LD_EXP 10
1185: PPUSH
1186: LD_INT 22
1188: PUSH
1189: LD_INT 1
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: LD_INT 21
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 58
1208: PUSH
1209: EMPTY
1210: LIST
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: PPUSH
1217: CALL_OW 69
1221: PUSH
1222: LD_INT 1
1224: ARRAY
1225: PPUSH
1226: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1230: LD_EXP 11
1234: PPUSH
1235: LD_INT 22
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 21
1247: PUSH
1248: LD_INT 2
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: LD_INT 58
1257: PUSH
1258: EMPTY
1259: LIST
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: PPUSH
1266: CALL_OW 69
1270: PUSH
1271: LD_INT 1
1273: ARRAY
1274: PPUSH
1275: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1279: LD_EXP 12
1283: PPUSH
1284: LD_INT 22
1286: PUSH
1287: LD_INT 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 2
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 58
1306: PUSH
1307: EMPTY
1308: LIST
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: PUSH
1320: LD_INT 1
1322: ARRAY
1323: PPUSH
1324: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1328: LD_EXP 13
1332: PPUSH
1333: LD_INT 22
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: LD_INT 21
1345: PUSH
1346: LD_INT 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: LD_INT 58
1355: PUSH
1356: EMPTY
1357: LIST
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: PPUSH
1364: CALL_OW 69
1368: PUSH
1369: LD_INT 1
1371: ARRAY
1372: PPUSH
1373: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1377: LD_EXP 14
1381: PPUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 21
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 58
1404: PUSH
1405: EMPTY
1406: LIST
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: PPUSH
1413: CALL_OW 69
1417: PUSH
1418: LD_INT 1
1420: ARRAY
1421: PPUSH
1422: CALL_OW 52
// end ;
1426: LD_VAR 0 1
1430: RET
// export function PrepareAmericansRandom ; var i ; begin
1431: LD_INT 0
1433: PPUSH
1434: PPUSH
// uc_side = 1 ;
1435: LD_ADDR_OWVAR 20
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1443: LD_ADDR_EXP 16
1447: PUSH
1448: LD_STRING 13c_others
1450: PPUSH
1451: CALL_OW 31
1455: ST_TO_ADDR
// for i in others13 do
1456: LD_ADDR_VAR 0 2
1460: PUSH
1461: LD_EXP 16
1465: PUSH
1466: FOR_IN
1467: IFFALSE 1520
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1469: LD_VAR 0 2
1473: PPUSH
1474: LD_INT 22
1476: PUSH
1477: LD_INT 1
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 21
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 58
1496: PUSH
1497: EMPTY
1498: LIST
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: PPUSH
1505: CALL_OW 69
1509: PUSH
1510: LD_INT 1
1512: ARRAY
1513: PPUSH
1514: CALL_OW 52
1518: GO 1466
1520: POP
1521: POP
// end ;
1522: LD_VAR 0 1
1526: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1527: LD_INT 0
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
1534: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1535: LD_ADDR_VAR 0 5
1539: PUSH
1540: LD_STRING 13_VehiclesIn13_1
1542: PPUSH
1543: EMPTY
1544: PPUSH
1545: CALL_OW 30
1549: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1550: LD_ADDR_EXP 24
1554: PUSH
1555: LD_STRING 13_ResourcesInCargo13_1
1557: PPUSH
1558: EMPTY
1559: PPUSH
1560: CALL_OW 30
1564: ST_TO_ADDR
// cargoList = [ ] ;
1565: LD_ADDR_VAR 0 6
1569: PUSH
1570: EMPTY
1571: ST_TO_ADDR
// uc_side = 1 ;
1572: LD_ADDR_OWVAR 20
1576: PUSH
1577: LD_INT 1
1579: ST_TO_ADDR
// if vehicles > 0 then
1580: LD_VAR 0 5
1584: PUSH
1585: LD_INT 0
1587: GREATER
1588: IFFALSE 1943
// begin for i := 1 to vehicles do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_VAR 0 5
1604: PUSH
1605: FOR_TO
1606: IFFALSE 1755
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1608: LD_ADDR_OWVAR 21
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_VAR 0 2
1622: ARRAY
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1628: LD_ADDR_OWVAR 37
1632: PUSH
1633: LD_VAR 0 5
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1648: LD_ADDR_OWVAR 39
1652: PUSH
1653: LD_VAR 0 5
1657: PUSH
1658: LD_VAR 0 2
1662: ARRAY
1663: PUSH
1664: LD_INT 3
1666: ARRAY
1667: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1668: LD_ADDR_OWVAR 38
1672: PUSH
1673: LD_VAR 0 5
1677: PUSH
1678: LD_VAR 0 2
1682: ARRAY
1683: PUSH
1684: LD_INT 4
1686: ARRAY
1687: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1688: LD_ADDR_OWVAR 40
1692: PUSH
1693: LD_VAR 0 5
1697: PUSH
1698: LD_VAR 0 2
1702: ARRAY
1703: PUSH
1704: LD_INT 5
1706: ARRAY
1707: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1708: LD_ADDR_OWVAR 41
1712: PUSH
1713: LD_INT 40
1715: ST_TO_ADDR
// veh = CreateVehicle ;
1716: LD_ADDR_VAR 0 4
1720: PUSH
1721: CALL_OW 45
1725: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_INT 3
1733: PPUSH
1734: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1738: LD_VAR 0 4
1742: PPUSH
1743: LD_INT 2
1745: PPUSH
1746: LD_INT 0
1748: PPUSH
1749: CALL_OW 49
// end ;
1753: GO 1605
1755: POP
1756: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1757: LD_ADDR_VAR 0 6
1761: PUSH
1762: LD_INT 22
1764: PUSH
1765: LD_INT 1
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 21
1774: PUSH
1775: LD_INT 2
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 34
1784: PUSH
1785: LD_INT 12
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PPUSH
1797: CALL_OW 69
1801: ST_TO_ADDR
// if cargoList > 0 then
1802: LD_VAR 0 6
1806: PUSH
1807: LD_INT 0
1809: GREATER
1810: IFFALSE 1943
// for i = 1 to cargoList do
1812: LD_ADDR_VAR 0 2
1816: PUSH
1817: DOUBLE
1818: LD_INT 1
1820: DEC
1821: ST_TO_ADDR
1822: LD_VAR 0 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1941
// begin if resources > 0 then
1830: LD_EXP 24
1834: PUSH
1835: LD_INT 0
1837: GREATER
1838: IFFALSE 1939
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1840: LD_VAR 0 6
1844: PUSH
1845: LD_VAR 0 2
1849: ARRAY
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: LD_EXP 24
1858: PUSH
1859: LD_VAR 0 2
1863: ARRAY
1864: PUSH
1865: LD_INT 1
1867: ARRAY
1868: PPUSH
1869: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1873: LD_VAR 0 6
1877: PUSH
1878: LD_VAR 0 2
1882: ARRAY
1883: PPUSH
1884: LD_INT 2
1886: PPUSH
1887: LD_EXP 24
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: PUSH
1898: LD_INT 2
1900: ARRAY
1901: PPUSH
1902: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1906: LD_VAR 0 6
1910: PUSH
1911: LD_VAR 0 2
1915: ARRAY
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: LD_EXP 24
1924: PUSH
1925: LD_VAR 0 2
1929: ARRAY
1930: PUSH
1931: LD_INT 3
1933: ARRAY
1934: PPUSH
1935: CALL_OW 291
// end ; end ;
1939: GO 1827
1941: POP
1942: POP
// end ; end ;
1943: LD_VAR 0 1
1947: RET
// export function PowellSupport ; var i , veh , un ; begin
1948: LD_INT 0
1950: PPUSH
1951: PPUSH
1952: PPUSH
1953: PPUSH
// for i = 1 to 3 do
1954: LD_ADDR_VAR 0 2
1958: PUSH
1959: DOUBLE
1960: LD_INT 1
1962: DEC
1963: ST_TO_ADDR
1964: LD_INT 3
1966: PUSH
1967: FOR_TO
1968: IFFALSE 2169
// begin uc_nation = 1 ;
1970: LD_ADDR_OWVAR 21
1974: PUSH
1975: LD_INT 1
1977: ST_TO_ADDR
// uc_side = 1 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 1
1985: ST_TO_ADDR
// vc_engine = 3 ;
1986: LD_ADDR_OWVAR 39
1990: PUSH
1991: LD_INT 3
1993: ST_TO_ADDR
// vc_control = 1 ;
1994: LD_ADDR_OWVAR 38
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
2002: LD_ADDR_OWVAR 40
2006: PUSH
2007: LD_INT 9
2009: PUSH
2010: LD_INT 5
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: LD_INT 7
2018: PUSH
2019: LD_INT 6
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 5
2034: PPUSH
2035: CALL_OW 12
2039: ARRAY
2040: ST_TO_ADDR
// if vc_weapon = 6 then
2041: LD_OWVAR 40
2045: PUSH
2046: LD_INT 6
2048: EQUAL
2049: IFFALSE 2061
// vc_chassis = 4 else
2051: LD_ADDR_OWVAR 37
2055: PUSH
2056: LD_INT 4
2058: ST_TO_ADDR
2059: GO 2069
// vc_chassis = 3 ;
2061: LD_ADDR_OWVAR 37
2065: PUSH
2066: LD_INT 3
2068: ST_TO_ADDR
// veh = CreateVehicle ;
2069: LD_ADDR_VAR 0 3
2073: PUSH
2074: CALL_OW 45
2078: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL_OW 49
// SetDir ( veh , 1 ) ;
2094: LD_VAR 0 3
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 233
// hc_gallery =  ;
2106: LD_ADDR_OWVAR 33
2110: PUSH
2111: LD_STRING 
2113: ST_TO_ADDR
// hc_name =  ;
2114: LD_ADDR_OWVAR 26
2118: PUSH
2119: LD_STRING 
2121: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 3
2127: PPUSH
2128: LD_INT 7
2130: PPUSH
2131: LD_INT 10
2133: PPUSH
2134: CALL_OW 12
2138: PPUSH
2139: CALL_OW 380
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 4
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_VAR 0 3
2162: PPUSH
2163: CALL_OW 52
// end ;
2167: GO 1967
2169: POP
2170: POP
// end ; end_of_file
2171: LD_VAR 0 1
2175: RET
// export function PrepareBurlak ; begin
2176: LD_INT 0
2178: PPUSH
// uc_side = 7 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 7
2186: ST_TO_ADDR
// uc_nation = 3 ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 3
2194: ST_TO_ADDR
// vc_engine = 3 ;
2195: LD_ADDR_OWVAR 39
2199: PUSH
2200: LD_INT 3
2202: ST_TO_ADDR
// vc_control = 1 ;
2203: LD_ADDR_OWVAR 38
2207: PUSH
2208: LD_INT 1
2210: ST_TO_ADDR
// vc_weapon = 46 ;
2211: LD_ADDR_OWVAR 40
2215: PUSH
2216: LD_INT 46
2218: ST_TO_ADDR
// vc_chassis = 24 ;
2219: LD_ADDR_OWVAR 37
2223: PUSH
2224: LD_INT 24
2226: ST_TO_ADDR
// Masha = CreateVehicle ;
2227: LD_ADDR_EXP 18
2231: PUSH
2232: CALL_OW 45
2236: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2237: LD_EXP 18
2241: PPUSH
2242: LD_INT 3
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2252: LD_EXP 18
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2264: LD_ADDR_EXP 17
2268: PUSH
2269: LD_STRING Burlak
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: CALL 6186 0 2
2279: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2280: LD_EXP 17
2284: PPUSH
2285: LD_EXP 18
2289: PPUSH
2290: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2294: LD_EXP 18
2298: PPUSH
2299: LD_INT 107
2301: PPUSH
2302: LD_INT 118
2304: PPUSH
2305: CALL_OW 114
// spawnBurlak = 1 ;
2309: LD_ADDR_EXP 27
2313: PUSH
2314: LD_INT 1
2316: ST_TO_ADDR
// end ;
2317: LD_VAR 0 1
2321: RET
// export function BurlakArmy ; var i , veh ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 7 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 7
2334: ST_TO_ADDR
// uc_nation = 3 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 3
2342: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2343: LD_ADDR_EXP 19
2347: PUSH
2348: LD_STRING Gnyevko
2350: PPUSH
2351: LD_INT 0
2353: PPUSH
2354: CALL 6186 0 2
2358: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2359: LD_ADDR_EXP 20
2363: PUSH
2364: LD_STRING Titov
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL 6186 0 2
2374: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2375: LD_ADDR_EXP 21
2379: PUSH
2380: LD_STRING Xavier2
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL 6186 0 2
2390: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2391: LD_ADDR_EXP 22
2395: PUSH
2396: LD_STRING Belkov
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL 6186 0 2
2406: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2407: LD_ADDR_EXP 23
2411: PUSH
2412: LD_STRING Lipshchin
2414: PPUSH
2415: LD_INT 0
2417: PPUSH
2418: CALL 6186 0 2
2422: ST_TO_ADDR
// for i = 1 to 5 do
2423: LD_ADDR_VAR 0 2
2427: PUSH
2428: DOUBLE
2429: LD_INT 1
2431: DEC
2432: ST_TO_ADDR
2433: LD_INT 5
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2525
// begin vc_engine = 3 ;
2439: LD_ADDR_OWVAR 39
2443: PUSH
2444: LD_INT 3
2446: ST_TO_ADDR
// vc_control = 1 ;
2447: LD_ADDR_OWVAR 38
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2455: LD_ADDR_OWVAR 40
2459: PUSH
2460: LD_INT 43
2462: PUSH
2463: LD_INT 44
2465: PUSH
2466: LD_INT 45
2468: PUSH
2469: LD_INT 49
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 4
2483: PPUSH
2484: CALL_OW 12
2488: ARRAY
2489: ST_TO_ADDR
// vc_chassis = 22 ;
2490: LD_ADDR_OWVAR 37
2494: PUSH
2495: LD_INT 22
2497: ST_TO_ADDR
// veh = CreateVehicle ;
2498: LD_ADDR_VAR 0 3
2502: PUSH
2503: CALL_OW 45
2507: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2508: LD_VAR 0 3
2512: PPUSH
2513: LD_INT 3
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
// end ;
2523: GO 2436
2525: POP
2526: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2527: LD_EXP 19
2531: PPUSH
2532: LD_INT 22
2534: PUSH
2535: LD_INT 7
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 21
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 58
2554: PUSH
2555: EMPTY
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PPUSH
2563: CALL_OW 69
2567: PUSH
2568: LD_INT 1
2570: ARRAY
2571: PPUSH
2572: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2576: LD_EXP 20
2580: PPUSH
2581: LD_INT 22
2583: PUSH
2584: LD_INT 7
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 21
2593: PUSH
2594: LD_INT 2
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 58
2603: PUSH
2604: EMPTY
2605: LIST
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: PPUSH
2612: CALL_OW 69
2616: PUSH
2617: LD_INT 1
2619: ARRAY
2620: PPUSH
2621: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2625: LD_EXP 21
2629: PPUSH
2630: LD_INT 22
2632: PUSH
2633: LD_INT 7
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 21
2642: PUSH
2643: LD_INT 2
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: LD_INT 58
2652: PUSH
2653: EMPTY
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: PPUSH
2661: CALL_OW 69
2665: PUSH
2666: LD_INT 1
2668: ARRAY
2669: PPUSH
2670: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2674: LD_EXP 22
2678: PPUSH
2679: LD_INT 22
2681: PUSH
2682: LD_INT 7
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 21
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 58
2701: PUSH
2702: EMPTY
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PPUSH
2710: CALL_OW 69
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: PPUSH
2719: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2723: LD_EXP 23
2727: PPUSH
2728: LD_INT 22
2730: PUSH
2731: LD_INT 7
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 21
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 58
2750: PUSH
2751: EMPTY
2752: LIST
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: PPUSH
2759: CALL_OW 69
2763: PUSH
2764: LD_INT 1
2766: ARRAY
2767: PPUSH
2768: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2772: LD_EXP 19
2776: PPUSH
2777: LD_INT 3
2779: PPUSH
2780: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2784: LD_EXP 20
2788: PUSH
2789: LD_EXP 23
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PPUSH
2798: LD_INT 9
2800: PPUSH
2801: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2805: LD_INT 22
2807: PUSH
2808: LD_INT 7
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 21
2817: PUSH
2818: LD_INT 2
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 69
2833: PPUSH
2834: LD_INT 107
2836: PPUSH
2837: LD_INT 118
2839: PPUSH
2840: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2844: LD_INT 35
2846: PPUSH
2847: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2851: LD_INT 22
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 21
2863: PUSH
2864: LD_INT 2
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 34
2873: PUSH
2874: LD_INT 49
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PPUSH
2886: CALL_OW 69
2890: PPUSH
2891: LD_EXP 18
2895: PPUSH
2896: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2900: LD_INT 22
2902: PUSH
2903: LD_INT 7
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: LD_INT 21
2912: PUSH
2913: LD_INT 2
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 34
2922: PUSH
2923: LD_INT 49
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PPUSH
2935: CALL_OW 69
2939: PUSH
2940: LD_INT 0
2942: EQUAL
2943: PUSH
2944: LD_EXP 18
2948: PPUSH
2949: CALL_OW 303
2953: OR
2954: IFFALSE 2844
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2956: LD_INT 22
2958: PUSH
2959: LD_INT 7
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 21
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: CALL_OW 69
2984: PPUSH
2985: LD_INT 107
2987: PPUSH
2988: LD_INT 118
2990: PPUSH
2991: CALL_OW 114
// end ; end_of_file
2995: LD_VAR 0 1
2999: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
3000: LD_INT 22
3002: PUSH
3003: LD_INT 8
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 33
3012: PUSH
3013: LD_INT 2
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: PUSH
3029: LD_INT 0
3031: GREATER
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 8
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 34
3045: PUSH
3046: LD_INT 31
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PPUSH
3057: CALL_OW 69
3061: PUSH
3062: LD_INT 0
3064: EQUAL
3065: AND
3066: IFFALSE 3289
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
// begin enable ;
3074: ENABLE
// uc_side = 8 ;
3075: LD_ADDR_OWVAR 20
3079: PUSH
3080: LD_INT 8
3082: ST_TO_ADDR
// uc_nation = 2 ;
3083: LD_ADDR_OWVAR 21
3087: PUSH
3088: LD_INT 2
3090: ST_TO_ADDR
// vc_engine = 3 ;
3091: LD_ADDR_OWVAR 39
3095: PUSH
3096: LD_INT 3
3098: ST_TO_ADDR
// vc_control = 1 ;
3099: LD_ADDR_OWVAR 38
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// vc_weapon = 31 ;
3107: LD_ADDR_OWVAR 40
3111: PUSH
3112: LD_INT 31
3114: ST_TO_ADDR
// vc_chassis = 14 ;
3115: LD_ADDR_OWVAR 37
3119: PUSH
3120: LD_INT 14
3122: ST_TO_ADDR
// arControlTower = CreateVehicle ;
3123: LD_ADDR_EXP 34
3127: PUSH
3128: CALL_OW 45
3132: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3133: LD_EXP 34
3137: PPUSH
3138: LD_INT 8
3140: PUSH
3141: LD_INT 9
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_INT 2
3153: PPUSH
3154: CALL_OW 12
3158: ARRAY
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// hc_name =  ;
3167: LD_ADDR_OWVAR 26
3171: PUSH
3172: LD_STRING 
3174: ST_TO_ADDR
// hc_gallery =  ;
3175: LD_ADDR_OWVAR 33
3179: PUSH
3180: LD_STRING 
3182: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 10
3191: PPUSH
3192: CALL_OW 380
// arDriver = CreateHuman ;
3196: LD_ADDR_EXP 35
3200: PUSH
3201: CALL_OW 44
3205: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3206: LD_EXP 35
3210: PPUSH
3211: LD_EXP 34
3215: PPUSH
3216: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3220: LD_ADDR_VAR 0 1
3224: PUSH
3225: LD_INT 22
3227: PUSH
3228: LD_INT 8
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: LD_INT 33
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: PUSH
3245: LD_INT 3
3247: PUSH
3248: LD_INT 61
3250: PUSH
3251: EMPTY
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 69
3267: PUSH
3268: FOR_IN
3269: IFFALSE 3287
// ComLinkTo ( i , arDriver ) ;
3271: LD_VAR 0 1
3275: PPUSH
3276: LD_EXP 35
3280: PPUSH
3281: CALL_OW 135
3285: GO 3268
3287: POP
3288: POP
// end ;
3289: PPOPN 1
3291: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) > 0 do var i ;
3292: LD_INT 22
3294: PUSH
3295: LD_INT 8
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 33
3304: PUSH
3305: LD_INT 2
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 3
3314: PUSH
3315: LD_INT 61
3317: PUSH
3318: EMPTY
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: PUSH
3335: LD_INT 0
3337: GREATER
3338: PUSH
3339: LD_INT 22
3341: PUSH
3342: LD_INT 8
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 34
3351: PUSH
3352: LD_INT 31
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 0
3370: GREATER
3371: AND
3372: IFFALSE 3450
3374: GO 3376
3376: DISABLE
3377: LD_INT 0
3379: PPUSH
// begin enable ;
3380: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3381: LD_ADDR_VAR 0 1
3385: PUSH
3386: LD_INT 22
3388: PUSH
3389: LD_INT 8
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: LD_INT 33
3398: PUSH
3399: LD_INT 2
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 61
3411: PUSH
3412: EMPTY
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: LIST
3423: PPUSH
3424: CALL_OW 69
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3448
// ComLinkTo ( i , arDriver ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_EXP 35
3441: PPUSH
3442: CALL_OW 135
3446: GO 3429
3448: POP
3449: POP
// end ;
3450: PPOPN 1
3452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3453: LD_INT 22
3455: PUSH
3456: LD_INT 8
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 21
3465: PUSH
3466: LD_INT 2
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 33
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: PPUSH
3488: CALL_OW 69
3492: PUSH
3493: LD_INT 0
3495: EQUAL
3496: IFFALSE 3520
3498: GO 3500
3500: DISABLE
// begin enable ;
3501: ENABLE
// RemoveUnit ( arControlTower ) ;
3502: LD_EXP 34
3506: PPUSH
3507: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3511: LD_EXP 35
3515: PPUSH
3516: CALL_OW 64
// end ;
3520: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3521: LD_EXP 31
3525: PUSH
3526: LD_INT 0
3528: GREATER
3529: IFFALSE 3693
3531: GO 3533
3533: DISABLE
3534: LD_INT 0
3536: PPUSH
3537: PPUSH
// begin enable ;
3538: ENABLE
// rnd = 0 ;
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// uc_side = 2 ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_INT 2
3554: ST_TO_ADDR
// uc_nation = 2 ;
3555: LD_ADDR_OWVAR 21
3559: PUSH
3560: LD_INT 2
3562: ST_TO_ADDR
// hc_name =  ;
3563: LD_ADDR_OWVAR 26
3567: PUSH
3568: LD_STRING 
3570: ST_TO_ADDR
// hc_gallery =  ;
3571: LD_ADDR_OWVAR 33
3575: PUSH
3576: LD_STRING 
3578: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3579: LD_INT 0
3581: PPUSH
3582: LD_INT 4
3584: PPUSH
3585: LD_INT 10
3587: PPUSH
3588: CALL_OW 380
// un = CreateHuman ;
3592: LD_ADDR_VAR 0 1
3596: PUSH
3597: CALL_OW 44
3601: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3602: LD_VAR 0 1
3606: PPUSH
3607: LD_INT 8
3609: PUSH
3610: LD_INT 9
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 12
3627: ARRAY
3628: PPUSH
3629: LD_INT 0
3631: PPUSH
3632: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3636: LD_ADDR_VAR 0 2
3640: PUSH
3641: LD_INT 1
3643: PPUSH
3644: LD_EXP 31
3648: PPUSH
3649: CALL_OW 12
3653: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3654: LD_VAR 0 1
3658: PPUSH
3659: LD_EXP 31
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_EXP 31
3678: PUSH
3679: LD_VAR 0 2
3683: ARRAY
3684: PUSH
3685: LD_INT 2
3687: ARRAY
3688: PPUSH
3689: CALL_OW 158
// end ; end_of_file
3693: PPOPN 2
3695: END
// every 1 do
3696: GO 3698
3698: DISABLE
// begin InGameOn ;
3699: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3703: LD_INT 22
3705: PUSH
3706: LD_INT 1
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 21
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PPUSH
3727: CALL_OW 69
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3740: LD_INT 22
3742: PUSH
3743: LD_INT 1
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: PPUSH
3764: CALL_OW 69
3768: PPUSH
3769: LD_INT 69
3771: PPUSH
3772: LD_INT 94
3774: PPUSH
3775: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3779: LD_EXP 1
3783: PPUSH
3784: LD_STRING D2-JMM-1
3786: PPUSH
3787: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3791: LD_INT 22
3793: PUSH
3794: LD_INT 1
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 21
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PPUSH
3815: CALL_OW 69
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PPUSH
3824: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3828: LD_EXP 2
3832: PPUSH
3833: LD_STRING D2-Huck-1
3835: PPUSH
3836: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3840: LD_INT 22
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 21
3852: PUSH
3853: LD_INT 2
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PPUSH
3864: CALL_OW 69
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: PPUSH
3873: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3877: LD_EXP 1
3881: PPUSH
3882: LD_STRING D2-JMM-2
3884: PPUSH
3885: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3889: LD_INT 22
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 21
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PPUSH
3913: CALL_OW 69
3917: PUSH
3918: LD_INT 1
3920: ARRAY
3921: PPUSH
3922: CALL_OW 87
// InGameOff ;
3926: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3930: LD_STRING M1
3932: PPUSH
3933: CALL_OW 337
// SaveForQuickRestart ;
3937: CALL_OW 22
// end ;
3941: END
// every 10 10$0 do
3942: GO 3944
3944: DISABLE
// begin DialogueOn ;
3945: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3949: LD_EXP 15
3953: PPUSH
3954: LD_STRING D3-Pow-1
3956: PPUSH
3957: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D3-JMM-1
3968: PPUSH
3969: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3973: LD_EXP 15
3977: PPUSH
3978: LD_STRING D3-Pow-2
3980: PPUSH
3981: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3985: LD_EXP 1
3989: PPUSH
3990: LD_STRING D3-JMM-2
3992: PPUSH
3993: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3997: LD_EXP 15
4001: PPUSH
4002: LD_STRING D3-Pow-3
4004: PPUSH
4005: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
4009: LD_EXP 1
4013: PPUSH
4014: LD_STRING D3-JMM-3
4016: PPUSH
4017: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
4021: LD_EXP 15
4025: PPUSH
4026: LD_STRING D3-Pow-4
4028: PPUSH
4029: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
4033: LD_EXP 1
4037: PPUSH
4038: LD_STRING D3-JMM-4
4040: PPUSH
4041: CALL_OW 88
// DialogueOff ;
4045: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4049: LD_STRING M2
4051: PPUSH
4052: CALL_OW 337
// wait ( 2 2$30 ) ;
4056: LD_INT 5250
4058: PPUSH
4059: CALL_OW 67
// PrepareBurlak ;
4063: CALL 2176 0 0
// BurlakArmy ;
4067: CALL 2322 0 0
// end ;
4071: END
// every 0 0$1 trigger See ( 1 , Masha ) do
4072: LD_INT 1
4074: PPUSH
4075: LD_EXP 18
4079: PPUSH
4080: CALL_OW 292
4084: IFFALSE 4243
4086: GO 4088
4088: DISABLE
// begin DialogueOn ;
4089: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
4093: LD_EXP 18
4097: PPUSH
4098: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
4102: LD_INT 22
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 26
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 25
4127: PUSH
4128: LD_INT 1
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_INT 25
4137: PUSH
4138: LD_INT 2
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 25
4147: PUSH
4148: LD_INT 3
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 25
4157: PUSH
4158: LD_INT 4
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 25
4167: PUSH
4168: LD_INT 5
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: PPUSH
4188: CALL_OW 69
4192: PPUSH
4193: LD_STRING D5-Sol1-1
4195: PPUSH
4196: LD_STRING D5-FSol1-1
4198: PPUSH
4199: CALL 6243 0 3
// Say ( JMM , D5-JMM-1 ) ;
4203: LD_EXP 1
4207: PPUSH
4208: LD_STRING D5-JMM-1
4210: PPUSH
4211: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
4215: LD_EXP 17
4219: PPUSH
4220: LD_STRING DAmer-Bur-1
4222: PPUSH
4223: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
4227: LD_EXP 1
4231: PPUSH
4232: LD_STRING DAmer-JMM-1
4234: PPUSH
4235: CALL_OW 88
// DialogueOff ;
4239: CALL_OW 7
// end ;
4243: END
// every 0 0$1 do var i ;
4244: GO 4246
4246: DISABLE
4247: LD_INT 0
4249: PPUSH
// begin enable ;
4250: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
4251: LD_ADDR_VAR 0 1
4255: PUSH
4256: LD_INT 22
4258: PUSH
4259: LD_INT 7
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PPUSH
4266: CALL_OW 69
4270: PUSH
4271: FOR_IN
4272: IFFALSE 4497
// if IsInArea ( i , AllianceEscape ) then
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_INT 4
4281: PPUSH
4282: CALL_OW 308
4286: IFFALSE 4495
// begin if i = Burlak or i = Masha then
4288: LD_VAR 0 1
4292: PUSH
4293: LD_EXP 17
4297: EQUAL
4298: PUSH
4299: LD_VAR 0 1
4303: PUSH
4304: LD_EXP 18
4308: EQUAL
4309: OR
4310: IFFALSE 4457
// begin RemoveUnit ( i ) ;
4312: LD_VAR 0 1
4316: PPUSH
4317: CALL_OW 64
// DialogueOn ;
4321: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
4325: LD_EXP 1
4329: PPUSH
4330: LD_STRING D5a-JMM-1
4332: PPUSH
4333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
4337: LD_INT 22
4339: PUSH
4340: LD_INT 1
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 26
4349: PUSH
4350: LD_INT 1
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: LD_INT 25
4362: PUSH
4363: LD_INT 1
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 25
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 3
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 25
4392: PUSH
4393: LD_INT 4
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 25
4402: PUSH
4403: LD_INT 5
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PPUSH
4428: LD_STRING D5a-Sol1-1
4430: PPUSH
4431: LD_STRING D5-FSol1-1
4433: PPUSH
4434: CALL 6243 0 3
// DialogueOff ;
4438: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4442: LD_STRING M2b
4444: PPUSH
4445: CALL_OW 337
// spawnBurlak = 0 ;
4449: LD_ADDR_EXP 27
4453: PUSH
4454: LD_INT 0
4456: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4457: LD_VAR 0 1
4461: PPUSH
4462: CALL_OW 264
4466: PUSH
4467: LD_INT 49
4469: EQUAL
4470: IFFALSE 4486
// SetLives ( i , 1 ) else
4472: LD_VAR 0 1
4476: PPUSH
4477: LD_INT 1
4479: PPUSH
4480: CALL_OW 234
4484: GO 4495
// RemoveUnit ( i ) ;
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 64
// end ;
4495: GO 4271
4497: POP
4498: POP
// end ;
4499: PPOPN 1
4501: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4502: LD_EXP 18
4506: PPUSH
4507: CALL_OW 256
4511: PUSH
4512: LD_INT 500
4514: LESS
4515: PUSH
4516: LD_EXP 18
4520: PPUSH
4521: CALL_OW 255
4525: PUSH
4526: LD_INT 7
4528: EQUAL
4529: AND
4530: IFFALSE 4550
4532: GO 4534
4534: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4535: LD_EXP 18
4539: PPUSH
4540: LD_INT 107
4542: PPUSH
4543: LD_INT 118
4545: PPUSH
4546: CALL_OW 111
4550: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4551: LD_EXP 17
4555: PPUSH
4556: CALL_OW 301
4560: PUSH
4561: LD_EXP 27
4565: PUSH
4566: LD_INT 1
4568: EQUAL
4569: AND
4570: IFFALSE 4703
4572: GO 4574
4574: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4575: LD_EXP 1
4579: PPUSH
4580: LD_STRING D5b-JMM-1
4582: PPUSH
4583: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4587: LD_INT 22
4589: PUSH
4590: LD_INT 1
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 26
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 2
4609: PUSH
4610: LD_INT 25
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 2
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 3
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 5
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 69
4677: PPUSH
4678: LD_STRING D5b-Sol1-1
4680: PPUSH
4681: LD_STRING 
4683: PPUSH
4684: CALL 6243 0 3
// ChangeMissionObjectives ( M2a ) ;
4688: LD_STRING M2a
4690: PPUSH
4691: CALL_OW 337
// burlakStatus = 1 ;
4695: LD_ADDR_EXP 28
4699: PUSH
4700: LD_INT 1
4702: ST_TO_ADDR
// end ;
4703: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4704: LD_EXP 2
4708: PPUSH
4709: CALL_OW 301
4713: IFFALSE 4850
4715: GO 4717
4717: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4718: LD_EXP 1
4722: PPUSH
4723: LD_STRING D6-JMM-1
4725: PPUSH
4726: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4730: LD_INT 22
4732: PUSH
4733: LD_INT 1
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 26
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: LD_INT 25
4755: PUSH
4756: LD_INT 1
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 25
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PUSH
4773: LD_INT 25
4775: PUSH
4776: LD_INT 3
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 4
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 25
4795: PUSH
4796: LD_INT 5
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: PPUSH
4821: LD_STRING D6-Sol1-1
4823: PPUSH
4824: LD_STRING 
4826: PPUSH
4827: CALL 6243 0 3
// Say ( JMM , D6-JMM-2 ) ;
4831: LD_EXP 1
4835: PPUSH
4836: LD_STRING D6-JMM-2
4838: PPUSH
4839: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4843: LD_STRING M1a
4845: PPUSH
4846: CALL_OW 337
// end ;
4850: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4851: LD_INT 25
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 321
4861: PUSH
4862: LD_INT 2
4864: EQUAL
4865: IFFALSE 4882
4867: GO 4869
4869: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4870: LD_EXP 2
4874: PPUSH
4875: LD_STRING D6-Huck-2
4877: PPUSH
4878: CALL_OW 88
// end ;
4882: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4883: LD_INT 22
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 2
4895: PUSH
4896: LD_INT 34
4898: PUSH
4899: LD_INT 8
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 35
4908: PUSH
4909: LD_INT 8
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 69
4929: PUSH
4930: LD_INT 0
4932: GREATER
4933: IFFALSE 5125
4935: GO 4937
4937: DISABLE
4938: LD_INT 0
4940: PPUSH
4941: PPUSH
// begin enable ;
4942: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4943: LD_ADDR_VAR 0 1
4947: PUSH
4948: LD_INT 5
4950: PPUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 1
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 21
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 1
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 3
4983: PUSH
4984: LD_INT 57
4986: PUSH
4987: EMPTY
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 70
5004: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
5005: LD_ADDR_VAR 0 2
5009: PUSH
5010: LD_INT 5
5012: PPUSH
5013: LD_INT 22
5015: PUSH
5016: LD_INT 1
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 21
5025: PUSH
5026: LD_INT 3
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 30
5035: PUSH
5036: LD_INT 5
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 3
5045: PUSH
5046: LD_INT 57
5048: PUSH
5049: EMPTY
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 70
5066: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
5067: LD_VAR 0 1
5071: PUSH
5072: LD_INT 0
5074: GREATER
5075: PUSH
5076: LD_VAR 0 2
5080: PUSH
5081: LD_INT 0
5083: GREATER
5084: AND
5085: IFFALSE 5125
// begin disable ;
5087: DISABLE
// DialogueOn ;
5088: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
5092: LD_EXP 1
5096: PPUSH
5097: LD_STRING D7-JMM-1
5099: PPUSH
5100: CALL_OW 88
// DialogueOff ;
5104: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
5108: LD_STRING M4
5110: PPUSH
5111: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
5115: LD_INT 5
5117: PPUSH
5118: LD_INT 0
5120: PPUSH
5121: CALL_OW 424
// end ; end ;
5125: PPOPN 2
5127: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
5128: LD_INT 6
5130: PPUSH
5131: LD_INT 22
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: LD_INT 25
5143: PUSH
5144: LD_INT 4
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 70
5159: PUSH
5160: LD_INT 0
5162: GREATER
5163: PUSH
5164: LD_EXP 39
5168: PUSH
5169: LD_INT 1
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_EXP 29
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: AND
5183: IFFALSE 5248
5185: GO 5187
5187: DISABLE
// begin enable ;
5188: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
5189: LD_ADDR_EXP 26
5193: PUSH
5194: LD_INT 6
5196: PPUSH
5197: LD_INT 22
5199: PUSH
5200: LD_INT 1
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 25
5209: PUSH
5210: LD_INT 4
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 70
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
5230: LD_INT 6
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: CALL_OW 424
// radationResearched = 1 ;
5240: LD_ADDR_EXP 29
5244: PUSH
5245: LD_INT 1
5247: ST_TO_ADDR
// end ;
5248: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
5249: LD_EXP 26
5253: PPUSH
5254: CALL_OW 301
5258: PUSH
5259: LD_EXP 29
5263: PUSH
5264: LD_INT 1
5266: EQUAL
5267: AND
5268: IFFALSE 5304
5270: GO 5272
5272: DISABLE
// begin enable ;
5273: ENABLE
// radationResearched = 0 ;
5274: LD_ADDR_EXP 29
5278: PUSH
5279: LD_INT 0
5281: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5282: LD_INT 6
5284: PPUSH
5285: LD_INT 1
5287: PPUSH
5288: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5292: LD_EXP 1
5296: PPUSH
5297: LD_STRING D9a-JMM-1
5299: PPUSH
5300: CALL_OW 88
// end ; end_of_file
5304: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5305: LD_VAR 0 5
5309: PUSH
5310: LD_INT 8
5312: EQUAL
5313: PUSH
5314: LD_EXP 37
5318: PUSH
5319: LD_INT 0
5321: EQUAL
5322: AND
5323: IFFALSE 5376
// begin eventVar1 = 1 ;
5325: LD_ADDR_EXP 37
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// DialogueOn ;
5333: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5337: LD_EXP 1
5341: PPUSH
5342: LD_STRING D6a-JMM-1
5344: PPUSH
5345: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5349: LD_EXP 15
5353: PPUSH
5354: LD_STRING D6a-Pow-1
5356: PPUSH
5357: CALL_OW 94
// DialogueOff ;
5361: CALL_OW 7
// wait ( 3 3$0 ) ;
5365: LD_INT 6300
5367: PPUSH
5368: CALL_OW 67
// PowellSupport ;
5372: CALL 1948 0 0
// end ; end ;
5376: PPOPN 5
5378: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5379: LD_VAR 0 1
5383: PPUSH
5384: CALL_OW 264
5388: PUSH
5389: LD_INT 8
5391: EQUAL
5392: PUSH
5393: LD_EXP 38
5397: PUSH
5398: LD_INT 0
5400: EQUAL
5401: AND
5402: IFFALSE 5471
// begin eventVar2 = 1 ;
5404: LD_ADDR_EXP 38
5408: PUSH
5409: LD_INT 1
5411: ST_TO_ADDR
// DialogueOn ;
5412: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5416: LD_EXP 1
5420: PPUSH
5421: LD_STRING D6b-JMM-1
5423: PPUSH
5424: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5428: LD_EXP 15
5432: PPUSH
5433: LD_STRING D6b-Pow-1
5435: PPUSH
5436: CALL_OW 94
// DialogueOff ;
5440: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5444: LD_INT 5
5446: PPUSH
5447: LD_INT 1
5449: PPUSH
5450: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5454: LD_INT 7
5456: PPUSH
5457: LD_INT 1
5459: PPUSH
5460: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5464: LD_STRING M3
5466: PPUSH
5467: CALL_OW 337
// end ; end ;
5471: PPOPN 2
5473: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5474: LD_VAR 0 2
5478: PPUSH
5479: LD_VAR 0 3
5483: PPUSH
5484: LD_INT 5
5486: PPUSH
5487: CALL_OW 309
5491: PUSH
5492: LD_EXP 39
5496: PUSH
5497: LD_INT 0
5499: EQUAL
5500: AND
5501: IFFALSE 5719
// begin eventVar3 = 1 ;
5503: LD_ADDR_EXP 39
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5511: LD_INT 175
5513: PPUSH
5514: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5518: LD_INT 7
5520: PPUSH
5521: LD_INT 22
5523: PUSH
5524: LD_INT 1
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 21
5533: PUSH
5534: LD_INT 2
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 34
5543: PUSH
5544: LD_INT 11
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 70
5560: PUSH
5561: LD_INT 0
5563: GREATER
5564: IFFALSE 5583
// begin radarOnSpot = 1 ;
5566: LD_ADDR_EXP 30
5570: PUSH
5571: LD_INT 1
5573: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5574: LD_STRING M3a
5576: PPUSH
5577: CALL_OW 337
// end else
5581: GO 5590
// begin ChangeMissionObjectives ( M3b ) ;
5583: LD_STRING M3b
5585: PPUSH
5586: CALL_OW 337
// end ; DialogueOn ;
5590: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5594: LD_EXP 2
5598: PPUSH
5599: LD_STRING D8-Huck-1
5601: PPUSH
5602: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5606: LD_EXP 1
5610: PPUSH
5611: LD_STRING D8-JMM-1
5613: PPUSH
5614: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5618: LD_EXP 2
5622: PPUSH
5623: LD_STRING D8-Huck-2
5625: PPUSH
5626: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5630: LD_EXP 1
5634: PPUSH
5635: LD_STRING D8-JMM-2
5637: PPUSH
5638: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5642: LD_EXP 2
5646: PPUSH
5647: LD_STRING D8-Huck-3
5649: PPUSH
5650: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5654: LD_EXP 1
5658: PPUSH
5659: LD_STRING D8-JMM-3
5661: PPUSH
5662: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5666: LD_EXP 2
5670: PPUSH
5671: LD_STRING D8-Huck-4
5673: PPUSH
5674: CALL_OW 88
// DialogueOff ;
5678: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5682: LD_INT 5
5684: PPUSH
5685: LD_INT 0
5687: PPUSH
5688: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5692: LD_INT 7
5694: PPUSH
5695: LD_INT 0
5697: PPUSH
5698: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5702: LD_INT 6
5704: PPUSH
5705: LD_INT 1
5707: PPUSH
5708: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5712: LD_STRING M5
5714: PPUSH
5715: CALL_OW 337
// end ; end ;
5719: PPOPN 3
5721: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5722: LD_EXP 26
5726: PPUSH
5727: CALL_OW 302
5731: PUSH
5732: LD_VAR 0 2
5736: PUSH
5737: LD_EXP 26
5741: EQUAL
5742: AND
5743: PUSH
5744: LD_EXP 40
5748: PUSH
5749: LD_INT 0
5751: EQUAL
5752: AND
5753: PUSH
5754: LD_EXP 39
5758: PUSH
5759: LD_INT 1
5761: EQUAL
5762: AND
5763: IFFALSE 5809
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5765: LD_VAR 0 1
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 268
5777: PUSH
5778: LD_INT 11
5780: EQUAL
5781: PUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_INT 2
5789: PPUSH
5790: CALL_OW 268
5794: PUSH
5795: LD_INT 11
5797: EQUAL
5798: OR
5799: IFFALSE 5809
// eventVar4 = 1 ;
5801: LD_ADDR_EXP 40
5805: PUSH
5806: LD_INT 1
5808: ST_TO_ADDR
// end ;
5809: PPOPN 2
5811: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5812: LD_INT 0
5814: PPUSH
5815: PPUSH
// begin if GetNation ( unit ) = 2 then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 248
5825: PUSH
5826: LD_INT 2
5828: EQUAL
5829: IFFALSE 6075
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5831: LD_ADDR_EXP 32
5835: PUSH
5836: LD_EXP 32
5840: PUSH
5841: LD_INT 1
5843: PLUS
5844: ST_TO_ADDR
// for i := 1 to sibDeposits do
5845: LD_ADDR_VAR 0 4
5849: PUSH
5850: DOUBLE
5851: LD_INT 1
5853: DEC
5854: ST_TO_ADDR
5855: LD_EXP 31
5859: PUSH
5860: FOR_TO
5861: IFFALSE 5963
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5863: LD_EXP 31
5867: PUSH
5868: LD_VAR 0 4
5872: ARRAY
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: PUSH
5878: LD_VAR 0 2
5882: EQUAL
5883: PUSH
5884: LD_EXP 31
5888: PUSH
5889: LD_VAR 0 4
5893: ARRAY
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: PUSH
5899: LD_VAR 0 3
5903: EQUAL
5904: AND
5905: IFFALSE 5961
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5907: LD_ADDR_EXP 31
5911: PUSH
5912: LD_EXP 31
5916: PPUSH
5917: LD_VAR 0 4
5921: PUSH
5922: EMPTY
5923: LIST
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL_OW 3
5933: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5934: LD_ADDR_EXP 31
5938: PUSH
5939: LD_EXP 31
5943: PPUSH
5944: LD_VAR 0 4
5948: PUSH
5949: EMPTY
5950: LIST
5951: PUSH
5952: LD_INT 2
5954: ARRAY
5955: PPUSH
5956: CALL_OW 3
5960: ST_TO_ADDR
// end ;
5961: GO 5860
5963: POP
5964: POP
// if eventVar5 = 0 then
5965: LD_EXP 41
5969: PUSH
5970: LD_INT 0
5972: EQUAL
5973: IFFALSE 6075
// begin eventVar5 = 1 ;
5975: LD_ADDR_EXP 41
5979: PUSH
5980: LD_INT 1
5982: ST_TO_ADDR
// DialogueOn ;
5983: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5987: LD_EXP 2
5991: PPUSH
5992: LD_STRING D4-Sci1-1
5994: PPUSH
5995: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5999: LD_EXP 1
6003: PPUSH
6004: LD_STRING D4-JMM-1
6006: PPUSH
6007: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
6011: LD_EXP 2
6015: PPUSH
6016: LD_STRING D4-Sci1-2
6018: PPUSH
6019: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
6023: LD_EXP 1
6027: PPUSH
6028: LD_STRING D4-JMM-2
6030: PPUSH
6031: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
6035: LD_EXP 2
6039: PPUSH
6040: LD_STRING D4-Sci1-3
6042: PPUSH
6043: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
6047: LD_EXP 1
6051: PPUSH
6052: LD_STRING D4-JMM-3
6054: PPUSH
6055: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
6059: LD_EXP 1
6063: PPUSH
6064: LD_STRING D4-JMM-3a
6066: PPUSH
6067: CALL_OW 88
// DialogueOff ;
6071: CALL_OW 7
// end ; end ; end ;
6075: PPOPN 5
6077: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 255
6087: PUSH
6088: LD_INT 1
6090: EQUAL
6091: PUSH
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 266
6101: PUSH
6102: LD_INT 0
6104: EQUAL
6105: AND
6106: PUSH
6107: LD_INT 22
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 21
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 2
6129: PUSH
6130: LD_INT 30
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 30
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PPUSH
6160: CALL_OW 69
6164: PUSH
6165: LD_INT 1
6167: EQUAL
6168: AND
6169: IFFALSE 6183
// SetBName ( building , omega ) ;
6171: LD_VAR 0 1
6175: PPUSH
6176: LD_STRING omega
6178: PPUSH
6179: CALL_OW 500
// end ; end_of_file
6183: PPOPN 2
6185: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6186: LD_INT 0
6188: PPUSH
6189: PPUSH
// if exist_mode then
6190: LD_VAR 0 2
6194: IFFALSE 6213
// unit := CreateCharacter ( ident ) else
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL_OW 34
6210: ST_TO_ADDR
6211: GO 6228
// unit := NewCharacter ( ident ) ;
6213: LD_ADDR_VAR 0 4
6217: PUSH
6218: LD_VAR 0 1
6222: PPUSH
6223: CALL_OW 25
6227: ST_TO_ADDR
// result := unit ;
6228: LD_ADDR_VAR 0 3
6232: PUSH
6233: LD_VAR 0 4
6237: ST_TO_ADDR
// end ;
6238: LD_VAR 0 3
6242: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6243: LD_INT 0
6245: PPUSH
6246: PPUSH
6247: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6248: LD_ADDR_VAR 0 1
6252: PUSH
6253: LD_VAR 0 1
6257: PUSH
6258: LD_EXP 1
6262: PUSH
6263: LD_EXP 2
6267: PUSH
6268: LD_EXP 3
6272: PUSH
6273: LD_EXP 4
6277: PUSH
6278: LD_EXP 5
6282: PUSH
6283: LD_EXP 6
6287: PUSH
6288: LD_EXP 7
6292: PUSH
6293: LD_EXP 8
6297: PUSH
6298: LD_EXP 9
6302: PUSH
6303: LD_EXP 10
6307: PUSH
6308: LD_EXP 11
6312: PUSH
6313: LD_EXP 12
6317: PUSH
6318: LD_EXP 13
6322: PUSH
6323: LD_EXP 14
6327: PUSH
6328: LD_EXP 15
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: DIFF
6350: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6351: LD_ADDR_VAR 0 6
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 12
6368: ST_TO_ADDR
// for i = 1 to characters do
6369: LD_ADDR_VAR 0 5
6373: PUSH
6374: DOUBLE
6375: LD_INT 1
6377: DEC
6378: ST_TO_ADDR
6379: LD_VAR 0 1
6383: PUSH
6384: FOR_TO
6385: IFFALSE 6495
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6387: LD_VAR 0 5
6391: PUSH
6392: LD_VAR 0 6
6396: EQUAL
6397: PUSH
6398: LD_VAR 0 1
6402: PUSH
6403: LD_VAR 0 5
6407: ARRAY
6408: PPUSH
6409: CALL_OW 258
6413: PUSH
6414: LD_INT 1
6416: EQUAL
6417: AND
6418: IFFALSE 6440
// Say ( characters [ i ] , dialogMID ) ;
6420: LD_VAR 0 1
6424: PUSH
6425: LD_VAR 0 5
6429: ARRAY
6430: PPUSH
6431: LD_VAR 0 2
6435: PPUSH
6436: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6440: LD_VAR 0 5
6444: PUSH
6445: LD_VAR 0 6
6449: EQUAL
6450: PUSH
6451: LD_VAR 0 1
6455: PUSH
6456: LD_VAR 0 5
6460: ARRAY
6461: PPUSH
6462: CALL_OW 258
6466: PUSH
6467: LD_INT 2
6469: EQUAL
6470: AND
6471: IFFALSE 6493
// Say ( characters [ i ] , dialogFID ) ;
6473: LD_VAR 0 1
6477: PUSH
6478: LD_VAR 0 5
6482: ARRAY
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL_OW 88
// end ;
6493: GO 6384
6495: POP
6496: POP
// end ;
6497: LD_VAR 0 4
6501: RET
// export function PrepareDifficulty ; begin
6502: LD_INT 0
6504: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6505: LD_INT 5
6507: PPUSH
6508: LD_INT 8
6510: PPUSH
6511: LD_INT 2
6513: PPUSH
6514: CALL_OW 322
// if difficulty = 1 then
6518: LD_OWVAR 67
6522: PUSH
6523: LD_INT 1
6525: EQUAL
6526: IFFALSE 6645
// begin SetTech ( 66 , 8 , state_researched ) ;
6528: LD_INT 66
6530: PPUSH
6531: LD_INT 8
6533: PPUSH
6534: LD_INT 2
6536: PPUSH
6537: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6541: LD_INT 67
6543: PPUSH
6544: LD_INT 8
6546: PPUSH
6547: LD_INT 0
6549: PPUSH
6550: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6554: LD_INT 68
6556: PPUSH
6557: LD_INT 8
6559: PPUSH
6560: LD_INT 0
6562: PPUSH
6563: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6567: LD_INT 51
6569: PPUSH
6570: LD_INT 8
6572: PPUSH
6573: LD_INT 2
6575: PPUSH
6576: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6580: LD_INT 52
6582: PPUSH
6583: LD_INT 8
6585: PPUSH
6586: LD_INT 0
6588: PPUSH
6589: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6593: LD_INT 53
6595: PPUSH
6596: LD_INT 8
6598: PPUSH
6599: LD_INT 0
6601: PPUSH
6602: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6606: LD_INT 60
6608: PPUSH
6609: LD_INT 8
6611: PPUSH
6612: LD_INT 2
6614: PPUSH
6615: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6619: LD_INT 61
6621: PPUSH
6622: LD_INT 8
6624: PPUSH
6625: LD_INT 0
6627: PPUSH
6628: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6632: LD_INT 62
6634: PPUSH
6635: LD_INT 8
6637: PPUSH
6638: LD_INT 0
6640: PPUSH
6641: CALL_OW 322
// end ; if difficulty = 2 then
6645: LD_OWVAR 67
6649: PUSH
6650: LD_INT 2
6652: EQUAL
6653: IFFALSE 6772
// begin SetTech ( 66 , 8 , state_researched ) ;
6655: LD_INT 66
6657: PPUSH
6658: LD_INT 8
6660: PPUSH
6661: LD_INT 2
6663: PPUSH
6664: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6668: LD_INT 67
6670: PPUSH
6671: LD_INT 8
6673: PPUSH
6674: LD_INT 2
6676: PPUSH
6677: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6681: LD_INT 68
6683: PPUSH
6684: LD_INT 8
6686: PPUSH
6687: LD_INT 0
6689: PPUSH
6690: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6694: LD_INT 51
6696: PPUSH
6697: LD_INT 8
6699: PPUSH
6700: LD_INT 2
6702: PPUSH
6703: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6707: LD_INT 52
6709: PPUSH
6710: LD_INT 8
6712: PPUSH
6713: LD_INT 2
6715: PPUSH
6716: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6720: LD_INT 53
6722: PPUSH
6723: LD_INT 8
6725: PPUSH
6726: LD_INT 2
6728: PPUSH
6729: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6733: LD_INT 60
6735: PPUSH
6736: LD_INT 8
6738: PPUSH
6739: LD_INT 2
6741: PPUSH
6742: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6746: LD_INT 61
6748: PPUSH
6749: LD_INT 8
6751: PPUSH
6752: LD_INT 2
6754: PPUSH
6755: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6759: LD_INT 62
6761: PPUSH
6762: LD_INT 8
6764: PPUSH
6765: LD_INT 0
6767: PPUSH
6768: CALL_OW 322
// end ; if difficulty = 3 then
6772: LD_OWVAR 67
6776: PUSH
6777: LD_INT 3
6779: EQUAL
6780: IFFALSE 6899
// begin SetTech ( 66 , 8 , state_researched ) ;
6782: LD_INT 66
6784: PPUSH
6785: LD_INT 8
6787: PPUSH
6788: LD_INT 2
6790: PPUSH
6791: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6795: LD_INT 67
6797: PPUSH
6798: LD_INT 8
6800: PPUSH
6801: LD_INT 2
6803: PPUSH
6804: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6808: LD_INT 68
6810: PPUSH
6811: LD_INT 8
6813: PPUSH
6814: LD_INT 0
6816: PPUSH
6817: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6821: LD_INT 51
6823: PPUSH
6824: LD_INT 8
6826: PPUSH
6827: LD_INT 2
6829: PPUSH
6830: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6834: LD_INT 52
6836: PPUSH
6837: LD_INT 8
6839: PPUSH
6840: LD_INT 2
6842: PPUSH
6843: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6847: LD_INT 53
6849: PPUSH
6850: LD_INT 8
6852: PPUSH
6853: LD_INT 2
6855: PPUSH
6856: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6860: LD_INT 60
6862: PPUSH
6863: LD_INT 8
6865: PPUSH
6866: LD_INT 2
6868: PPUSH
6869: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6873: LD_INT 61
6875: PPUSH
6876: LD_INT 8
6878: PPUSH
6879: LD_INT 2
6881: PPUSH
6882: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6886: LD_INT 62
6888: PPUSH
6889: LD_INT 8
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 322
// end ; end ;
6899: LD_VAR 0 1
6903: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6912: LD_ADDR_VAR 0 7
6916: PUSH
6917: LD_INT 22
6919: PUSH
6920: LD_VAR 0 1
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 25
6931: PUSH
6932: LD_INT 9
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6948: LD_ADDR_VAR 0 8
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_VAR 0 2
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 3
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_INT 1
6998: PPUSH
6999: LD_INT 3
7001: PPUSH
7002: CALL_OW 12
7006: ST_TO_ADDR
// for i = 1 to list do
7007: LD_ADDR_VAR 0 6
7011: PUSH
7012: DOUBLE
7013: LD_INT 1
7015: DEC
7016: ST_TO_ADDR
7017: LD_VAR 0 7
7021: PUSH
7022: FOR_TO
7023: IFFALSE 7205
// for ta in filter do
7025: LD_ADDR_VAR 0 4
7029: PUSH
7030: LD_VAR 0 8
7034: PUSH
7035: FOR_IN
7036: IFFALSE 7201
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
7038: LD_VAR 0 7
7042: PUSH
7043: LD_VAR 0 6
7047: ARRAY
7048: PPUSH
7049: LD_VAR 0 4
7053: PPUSH
7054: CALL_OW 296
7058: PUSH
7059: LD_INT 13
7061: LESSEQUAL
7062: IFFALSE 7199
// begin case c of 1 :
7064: LD_VAR 0 5
7068: PUSH
7069: LD_INT 1
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7115
7077: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
7078: LD_VAR 0 7
7082: PUSH
7083: LD_VAR 0 6
7087: ARRAY
7088: PPUSH
7089: LD_VAR 0 4
7093: PPUSH
7094: CALL_OW 250
7098: PPUSH
7099: LD_VAR 0 4
7103: PPUSH
7104: CALL_OW 251
7108: PPUSH
7109: CALL_OW 154
7113: GO 7199
7115: LD_INT 2
7117: DOUBLE
7118: EQUAL
7119: IFTRUE 7123
7121: GO 7187
7123: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
7124: LD_VAR 0 7
7128: PUSH
7129: LD_VAR 0 6
7133: ARRAY
7134: PPUSH
7135: LD_VAR 0 4
7139: PPUSH
7140: CALL_OW 250
7144: PUSH
7145: LD_INT 1
7147: NEG
7148: PPUSH
7149: LD_INT 1
7151: PPUSH
7152: CALL_OW 12
7156: PLUS
7157: PPUSH
7158: LD_VAR 0 4
7162: PPUSH
7163: CALL_OW 251
7167: PUSH
7168: LD_INT 1
7170: NEG
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL_OW 12
7179: PLUS
7180: PPUSH
7181: CALL_OW 153
7185: GO 7199
7187: LD_INT 3
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7198
7195: POP
// ; end ;
7196: GO 7199
7198: POP
// end ; end ;
7199: GO 7035
7201: POP
7202: POP
7203: GO 7022
7205: POP
7206: POP
// end ;
7207: LD_VAR 0 3
7211: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7212: LD_INT 0
7214: PPUSH
7215: PPUSH
// for i in charactersList do
7216: LD_ADDR_VAR 0 4
7220: PUSH
7221: LD_VAR 0 1
7225: PUSH
7226: FOR_IN
7227: IFFALSE 7256
// begin if IsOk ( i ) then
7229: LD_VAR 0 4
7233: PPUSH
7234: CALL_OW 302
7238: IFFALSE 7254
// SaveCharacters ( i , ident ) ;
7240: LD_VAR 0 4
7244: PPUSH
7245: LD_VAR 0 2
7249: PPUSH
7250: CALL_OW 38
// end ;
7254: GO 7226
7256: POP
7257: POP
// end ;
7258: LD_VAR 0 3
7262: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
7274: PPUSH
7275: PPUSH
// for i = 1 to medicCount do
7276: LD_ADDR_VAR 0 13
7280: PUSH
7281: DOUBLE
7282: LD_INT 1
7284: DEC
7285: ST_TO_ADDR
7286: LD_VAR 0 7
7290: PUSH
7291: FOR_TO
7292: IFFALSE 7374
// begin uc_side = side ;
7294: LD_ADDR_OWVAR 20
7298: PUSH
7299: LD_VAR 0 1
7303: ST_TO_ADDR
// uc_nation = nation ;
7304: LD_ADDR_OWVAR 21
7308: PUSH
7309: LD_VAR 0 2
7313: ST_TO_ADDR
// hc_name =  ;
7314: LD_ADDR_OWVAR 26
7318: PUSH
7319: LD_STRING 
7321: ST_TO_ADDR
// hc_gallery =  ;
7322: LD_ADDR_OWVAR 33
7326: PUSH
7327: LD_STRING 
7329: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7330: LD_INT 0
7332: PPUSH
7333: LD_INT 4
7335: PPUSH
7336: LD_VAR 0 8
7340: PPUSH
7341: CALL_OW 380
// un = CreateHuman ;
7345: LD_ADDR_VAR 0 15
7349: PUSH
7350: CALL_OW 44
7354: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7355: LD_VAR 0 15
7359: PPUSH
7360: LD_VAR 0 9
7364: PPUSH
7365: LD_INT 0
7367: PPUSH
7368: CALL_OW 49
// end ;
7372: GO 7291
7374: POP
7375: POP
// for i = 1 to soldierCount do
7376: LD_ADDR_VAR 0 13
7380: PUSH
7381: DOUBLE
7382: LD_INT 1
7384: DEC
7385: ST_TO_ADDR
7386: LD_VAR 0 3
7390: PUSH
7391: FOR_TO
7392: IFFALSE 7474
// begin uc_side = side ;
7394: LD_ADDR_OWVAR 20
7398: PUSH
7399: LD_VAR 0 1
7403: ST_TO_ADDR
// uc_nation = nation ;
7404: LD_ADDR_OWVAR 21
7408: PUSH
7409: LD_VAR 0 2
7413: ST_TO_ADDR
// hc_name =  ;
7414: LD_ADDR_OWVAR 26
7418: PUSH
7419: LD_STRING 
7421: ST_TO_ADDR
// hc_gallery =  ;
7422: LD_ADDR_OWVAR 33
7426: PUSH
7427: LD_STRING 
7429: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7430: LD_INT 0
7432: PPUSH
7433: LD_INT 1
7435: PPUSH
7436: LD_VAR 0 8
7440: PPUSH
7441: CALL_OW 380
// un = CreateHuman ;
7445: LD_ADDR_VAR 0 15
7449: PUSH
7450: CALL_OW 44
7454: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7455: LD_VAR 0 15
7459: PPUSH
7460: LD_VAR 0 9
7464: PPUSH
7465: LD_INT 0
7467: PPUSH
7468: CALL_OW 49
// end ;
7472: GO 7391
7474: POP
7475: POP
// for i = 1 to sniperCount do
7476: LD_ADDR_VAR 0 13
7480: PUSH
7481: DOUBLE
7482: LD_INT 1
7484: DEC
7485: ST_TO_ADDR
7486: LD_VAR 0 4
7490: PUSH
7491: FOR_TO
7492: IFFALSE 7574
// begin uc_side = side ;
7494: LD_ADDR_OWVAR 20
7498: PUSH
7499: LD_VAR 0 1
7503: ST_TO_ADDR
// uc_nation = nation ;
7504: LD_ADDR_OWVAR 21
7508: PUSH
7509: LD_VAR 0 2
7513: ST_TO_ADDR
// hc_name =  ;
7514: LD_ADDR_OWVAR 26
7518: PUSH
7519: LD_STRING 
7521: ST_TO_ADDR
// hc_gallery =  ;
7522: LD_ADDR_OWVAR 33
7526: PUSH
7527: LD_STRING 
7529: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7530: LD_INT 0
7532: PPUSH
7533: LD_INT 5
7535: PPUSH
7536: LD_VAR 0 8
7540: PPUSH
7541: CALL_OW 380
// un = CreateHuman ;
7545: LD_ADDR_VAR 0 15
7549: PUSH
7550: CALL_OW 44
7554: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7555: LD_VAR 0 15
7559: PPUSH
7560: LD_VAR 0 9
7564: PPUSH
7565: LD_INT 0
7567: PPUSH
7568: CALL_OW 49
// end ;
7572: GO 7491
7574: POP
7575: POP
// for i = 1 to bazookCount do
7576: LD_ADDR_VAR 0 13
7580: PUSH
7581: DOUBLE
7582: LD_INT 1
7584: DEC
7585: ST_TO_ADDR
7586: LD_VAR 0 5
7590: PUSH
7591: FOR_TO
7592: IFFALSE 7674
// begin uc_side = side ;
7594: LD_ADDR_OWVAR 20
7598: PUSH
7599: LD_VAR 0 1
7603: ST_TO_ADDR
// uc_nation = nation ;
7604: LD_ADDR_OWVAR 21
7608: PUSH
7609: LD_VAR 0 2
7613: ST_TO_ADDR
// hc_name =  ;
7614: LD_ADDR_OWVAR 26
7618: PUSH
7619: LD_STRING 
7621: ST_TO_ADDR
// hc_gallery =  ;
7622: LD_ADDR_OWVAR 33
7626: PUSH
7627: LD_STRING 
7629: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7630: LD_INT 0
7632: PPUSH
7633: LD_INT 9
7635: PPUSH
7636: LD_VAR 0 8
7640: PPUSH
7641: CALL_OW 380
// un = CreateHuman ;
7645: LD_ADDR_VAR 0 15
7649: PUSH
7650: CALL_OW 44
7654: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7655: LD_VAR 0 15
7659: PPUSH
7660: LD_VAR 0 9
7664: PPUSH
7665: LD_INT 0
7667: PPUSH
7668: CALL_OW 49
// end ;
7672: GO 7591
7674: POP
7675: POP
// for i = 1 to mortalCount do
7676: LD_ADDR_VAR 0 13
7680: PUSH
7681: DOUBLE
7682: LD_INT 1
7684: DEC
7685: ST_TO_ADDR
7686: LD_VAR 0 6
7690: PUSH
7691: FOR_TO
7692: IFFALSE 7774
// begin uc_side = side ;
7694: LD_ADDR_OWVAR 20
7698: PUSH
7699: LD_VAR 0 1
7703: ST_TO_ADDR
// uc_nation = nation ;
7704: LD_ADDR_OWVAR 21
7708: PUSH
7709: LD_VAR 0 2
7713: ST_TO_ADDR
// hc_name =  ;
7714: LD_ADDR_OWVAR 26
7718: PUSH
7719: LD_STRING 
7721: ST_TO_ADDR
// hc_gallery =  ;
7722: LD_ADDR_OWVAR 33
7726: PUSH
7727: LD_STRING 
7729: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7730: LD_INT 0
7732: PPUSH
7733: LD_INT 8
7735: PPUSH
7736: LD_VAR 0 8
7740: PPUSH
7741: CALL_OW 380
// un = CreateHuman ;
7745: LD_ADDR_VAR 0 15
7749: PUSH
7750: CALL_OW 44
7754: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7755: LD_VAR 0 15
7759: PPUSH
7760: LD_VAR 0 9
7764: PPUSH
7765: LD_INT 0
7767: PPUSH
7768: CALL_OW 49
// end ;
7772: GO 7691
7774: POP
7775: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7776: LD_ADDR_VAR 0 17
7780: PUSH
7781: LD_INT 22
7783: PUSH
7784: LD_VAR 0 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 25
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PPUSH
7807: CALL_OW 69
7811: ST_TO_ADDR
// for i in medic_list do
7812: LD_ADDR_VAR 0 13
7816: PUSH
7817: LD_VAR 0 17
7821: PUSH
7822: FOR_IN
7823: IFFALSE 7841
// ComMoveToArea ( i , healArea ) ;
7825: LD_VAR 0 13
7829: PPUSH
7830: LD_VAR 0 10
7834: PPUSH
7835: CALL_OW 113
7839: GO 7822
7841: POP
7842: POP
// repeat wait ( 0 0$1 ) ;
7843: LD_INT 35
7845: PPUSH
7846: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7850: LD_ADDR_VAR 0 16
7854: PUSH
7855: LD_INT 22
7857: PUSH
7858: LD_VAR 0 1
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PUSH
7867: LD_INT 1
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: LD_INT 24
7875: PUSH
7876: LD_INT 550
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7911: LD_ADDR_VAR 0 18
7915: PUSH
7916: LD_INT 22
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 2
7930: PUSH
7931: LD_INT 25
7933: PUSH
7934: LD_INT 1
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 25
7943: PUSH
7944: LD_INT 5
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 25
7953: PUSH
7954: LD_INT 8
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 25
7963: PUSH
7964: LD_INT 9
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 24
7980: PUSH
7981: LD_INT 1000
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: LIST
7992: PPUSH
7993: CALL_OW 69
7997: ST_TO_ADDR
// if medicCount > 0 then
7998: LD_VAR 0 7
8002: PUSH
8003: LD_INT 0
8005: GREATER
8006: IFFALSE 8080
// begin if damageUnit_list > 0 then
8008: LD_VAR 0 16
8012: PUSH
8013: LD_INT 0
8015: GREATER
8016: IFFALSE 8080
// begin for i in damageUnit_list do
8018: LD_ADDR_VAR 0 13
8022: PUSH
8023: LD_VAR 0 16
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8078
// begin ComMoveToArea ( i , healArea ) ;
8031: LD_VAR 0 13
8035: PPUSH
8036: LD_VAR 0 10
8040: PPUSH
8041: CALL_OW 113
// for j in medic_list do
8045: LD_ADDR_VAR 0 14
8049: PUSH
8050: LD_VAR 0 17
8054: PUSH
8055: FOR_IN
8056: IFFALSE 8074
// AddComHeal ( j , i ) ;
8058: LD_VAR 0 14
8062: PPUSH
8063: LD_VAR 0 13
8067: PPUSH
8068: CALL_OW 188
8072: GO 8055
8074: POP
8075: POP
// end ;
8076: GO 8028
8078: POP
8079: POP
// end ; end ; for i in soldiersOK_list do
8080: LD_ADDR_VAR 0 13
8084: PUSH
8085: LD_VAR 0 18
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8267
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8093: LD_ADDR_VAR 0 21
8097: PUSH
8098: LD_INT 22
8100: PUSH
8101: LD_VAR 0 11
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PPUSH
8110: CALL_OW 69
8114: PPUSH
8115: LD_VAR 0 13
8119: PPUSH
8120: CALL_OW 74
8124: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8125: LD_ADDR_VAR 0 22
8129: PUSH
8130: LD_INT 22
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_INT 2
8144: PUSH
8145: LD_INT 59
8147: PUSH
8148: EMPTY
8149: LIST
8150: PUSH
8151: LD_INT 21
8153: PUSH
8154: LD_INT 1
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: PPUSH
8184: CALL_OW 69
8188: PPUSH
8189: LD_VAR 0 13
8193: PPUSH
8194: CALL_OW 74
8198: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8199: LD_VAR 0 13
8203: PPUSH
8204: LD_VAR 0 21
8208: PPUSH
8209: CALL_OW 296
8213: PUSH
8214: LD_INT 8
8216: PLUS
8217: PUSH
8218: LD_VAR 0 13
8222: PPUSH
8223: LD_VAR 0 22
8227: PPUSH
8228: CALL_OW 296
8232: LESS
8233: IFFALSE 8251
// begin ComAttackUnit ( i , target1 ) ;
8235: LD_VAR 0 13
8239: PPUSH
8240: LD_VAR 0 21
8244: PPUSH
8245: CALL_OW 115
// end else
8249: GO 8265
// begin ComAttackUnit ( i , target2 ) ;
8251: LD_VAR 0 13
8255: PPUSH
8256: LD_VAR 0 22
8260: PPUSH
8261: CALL_OW 115
// end ; end ;
8265: GO 8090
8267: POP
8268: POP
// until soldiersOK_list = [ ] ;
8269: LD_VAR 0 18
8273: PUSH
8274: EMPTY
8275: EQUAL
8276: IFFALSE 7843
// end ;
8278: LD_VAR 0 12
8282: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8283: LD_INT 0
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
8290: PPUSH
8291: PPUSH
8292: PPUSH
8293: PPUSH
8294: PPUSH
8295: PPUSH
// amChassisTab = [ ] ;
8296: LD_ADDR_VAR 0 19
8300: PUSH
8301: EMPTY
8302: ST_TO_ADDR
// arChassisTab = [ ] ;
8303: LD_ADDR_VAR 0 18
8307: PUSH
8308: EMPTY
8309: ST_TO_ADDR
// ruChassisTab = [ ] ;
8310: LD_ADDR_VAR 0 17
8314: PUSH
8315: EMPTY
8316: ST_TO_ADDR
// for i = 1 to vehCount do
8317: LD_ADDR_VAR 0 13
8321: PUSH
8322: DOUBLE
8323: LD_INT 1
8325: DEC
8326: ST_TO_ADDR
8327: LD_VAR 0 3
8331: PUSH
8332: FOR_TO
8333: IFFALSE 9757
// begin wait ( 0 0$01 ) ;
8335: LD_INT 35
8337: PPUSH
8338: CALL_OW 67
// if nation = 1 then
8342: LD_VAR 0 5
8346: PUSH
8347: LD_INT 1
8349: EQUAL
8350: IFFALSE 8831
// begin uc_side = side ;
8352: LD_ADDR_OWVAR 20
8356: PUSH
8357: LD_VAR 0 2
8361: ST_TO_ADDR
// uc_nation = nation ;
8362: LD_ADDR_OWVAR 21
8366: PUSH
8367: LD_VAR 0 5
8371: ST_TO_ADDR
// vc_engine = vehengine ;
8372: LD_ADDR_OWVAR 39
8376: PUSH
8377: LD_VAR 0 6
8381: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8382: LD_ADDR_OWVAR 40
8386: PUSH
8387: LD_VAR 0 10
8391: PUSH
8392: LD_INT 1
8394: PPUSH
8395: LD_VAR 0 10
8399: PPUSH
8400: CALL_OW 12
8404: ARRAY
8405: ST_TO_ADDR
// for j = 1 to AMWeapon do
8406: LD_ADDR_VAR 0 14
8410: PUSH
8411: DOUBLE
8412: LD_INT 1
8414: DEC
8415: ST_TO_ADDR
8416: LD_VAR 0 10
8420: PUSH
8421: FOR_TO
8422: IFFALSE 8723
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8424: LD_VAR 0 10
8428: PUSH
8429: LD_VAR 0 14
8433: ARRAY
8434: PUSH
8435: LD_INT 2
8437: EQUAL
8438: PUSH
8439: LD_VAR 0 10
8443: PUSH
8444: LD_VAR 0 14
8448: ARRAY
8449: PUSH
8450: LD_INT 3
8452: EQUAL
8453: OR
8454: IFFALSE 8507
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8456: LD_ADDR_VAR 0 19
8460: PUSH
8461: LD_INT 1
8463: PUSH
8464: LD_INT 2
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: LD_INT 4
8472: PUSH
8473: LD_INT 5
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8483: LD_ADDR_OWVAR 37
8487: PUSH
8488: LD_VAR 0 19
8492: PUSH
8493: LD_INT 1
8495: PPUSH
8496: LD_VAR 0 19
8500: PPUSH
8501: CALL_OW 12
8505: ARRAY
8506: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8507: LD_VAR 0 10
8511: PUSH
8512: LD_VAR 0 14
8516: ARRAY
8517: PUSH
8518: LD_INT 4
8520: EQUAL
8521: PUSH
8522: LD_VAR 0 10
8526: PUSH
8527: LD_VAR 0 14
8531: ARRAY
8532: PUSH
8533: LD_INT 5
8535: EQUAL
8536: OR
8537: PUSH
8538: LD_VAR 0 10
8542: PUSH
8543: LD_VAR 0 14
8547: ARRAY
8548: PUSH
8549: LD_INT 9
8551: EQUAL
8552: OR
8553: PUSH
8554: LD_VAR 0 10
8558: PUSH
8559: LD_VAR 0 14
8563: ARRAY
8564: PUSH
8565: LD_INT 11
8567: EQUAL
8568: OR
8569: PUSH
8570: LD_VAR 0 10
8574: PUSH
8575: LD_VAR 0 14
8579: ARRAY
8580: PUSH
8581: LD_INT 7
8583: EQUAL
8584: OR
8585: IFFALSE 8634
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8587: LD_ADDR_VAR 0 19
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 4
8600: PUSH
8601: LD_INT 5
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8610: LD_ADDR_OWVAR 37
8614: PUSH
8615: LD_VAR 0 19
8619: PUSH
8620: LD_INT 1
8622: PPUSH
8623: LD_VAR 0 19
8627: PPUSH
8628: CALL_OW 12
8632: ARRAY
8633: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8634: LD_VAR 0 10
8638: PUSH
8639: LD_VAR 0 14
8643: ARRAY
8644: PUSH
8645: LD_INT 8
8647: EQUAL
8648: PUSH
8649: LD_VAR 0 10
8653: PUSH
8654: LD_VAR 0 14
8658: ARRAY
8659: PUSH
8660: LD_INT 6
8662: EQUAL
8663: OR
8664: PUSH
8665: LD_VAR 0 10
8669: PUSH
8670: LD_VAR 0 14
8674: ARRAY
8675: PUSH
8676: LD_INT 10
8678: EQUAL
8679: OR
8680: IFFALSE 8721
// begin amChassisTab = [ 4 , 5 ] ;
8682: LD_ADDR_VAR 0 19
8686: PUSH
8687: LD_INT 4
8689: PUSH
8690: LD_INT 5
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8697: LD_ADDR_OWVAR 37
8701: PUSH
8702: LD_VAR 0 19
8706: PUSH
8707: LD_INT 1
8709: PPUSH
8710: LD_VAR 0 19
8714: PPUSH
8715: CALL_OW 12
8719: ARRAY
8720: ST_TO_ADDR
// end ; end ;
8721: GO 8421
8723: POP
8724: POP
// veh = CreateVehicle ;
8725: LD_ADDR_VAR 0 16
8729: PUSH
8730: CALL_OW 45
8734: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8735: LD_VAR 0 16
8739: PPUSH
8740: LD_VAR 0 1
8744: PPUSH
8745: LD_INT 0
8747: PPUSH
8748: CALL_OW 49
// if vc_control = 1 then
8752: LD_OWVAR 38
8756: PUSH
8757: LD_INT 1
8759: EQUAL
8760: IFFALSE 8817
// begin hc_gallery =  ;
8762: LD_ADDR_OWVAR 33
8766: PUSH
8767: LD_STRING 
8769: ST_TO_ADDR
// hc_name =  ;
8770: LD_ADDR_OWVAR 26
8774: PUSH
8775: LD_STRING 
8777: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8778: LD_INT 0
8780: PPUSH
8781: LD_INT 3
8783: PPUSH
8784: LD_VAR 0 4
8788: PPUSH
8789: CALL_OW 380
// un = CreateHuman ;
8793: LD_ADDR_VAR 0 15
8797: PUSH
8798: CALL_OW 44
8802: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8803: LD_VAR 0 15
8807: PPUSH
8808: LD_VAR 0 16
8812: PPUSH
8813: CALL_OW 52
// end ; i = i + 1 ;
8817: LD_ADDR_VAR 0 13
8821: PUSH
8822: LD_VAR 0 13
8826: PUSH
8827: LD_INT 1
8829: PLUS
8830: ST_TO_ADDR
// end ; if nation = 2 then
8831: LD_VAR 0 5
8835: PUSH
8836: LD_INT 2
8838: EQUAL
8839: IFFALSE 9341
// begin uc_side = side ;
8841: LD_ADDR_OWVAR 20
8845: PUSH
8846: LD_VAR 0 2
8850: ST_TO_ADDR
// uc_nation = nation ;
8851: LD_ADDR_OWVAR 21
8855: PUSH
8856: LD_VAR 0 5
8860: ST_TO_ADDR
// vc_engine = vehengine ;
8861: LD_ADDR_OWVAR 39
8865: PUSH
8866: LD_VAR 0 6
8870: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8871: LD_INT 22
8873: PUSH
8874: LD_VAR 0 2
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 21
8885: PUSH
8886: LD_INT 2
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 33
8895: PUSH
8896: LD_INT 2
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 50
8905: PUSH
8906: EMPTY
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 69
8919: PUSH
8920: LD_INT 8
8922: LESSEQUAL
8923: IFFALSE 8951
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8925: LD_ADDR_OWVAR 38
8929: PUSH
8930: LD_VAR 0 7
8934: PUSH
8935: LD_INT 1
8937: PPUSH
8938: LD_VAR 0 7
8942: PPUSH
8943: CALL_OW 12
8947: ARRAY
8948: ST_TO_ADDR
8949: GO 8959
// vc_control = control_apeman ;
8951: LD_ADDR_OWVAR 38
8955: PUSH
8956: LD_INT 5
8958: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8959: LD_ADDR_OWVAR 40
8963: PUSH
8964: LD_VAR 0 9
8968: PUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_VAR 0 9
8976: PPUSH
8977: CALL_OW 12
8981: ARRAY
8982: ST_TO_ADDR
// for j = 1 to ARWeapons do
8983: LD_ADDR_VAR 0 14
8987: PUSH
8988: DOUBLE
8989: LD_INT 1
8991: DEC
8992: ST_TO_ADDR
8993: LD_VAR 0 9
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9233
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9001: LD_VAR 0 9
9005: PUSH
9006: LD_VAR 0 14
9010: ARRAY
9011: PUSH
9012: LD_INT 24
9014: EQUAL
9015: PUSH
9016: LD_VAR 0 9
9020: PUSH
9021: LD_VAR 0 14
9025: ARRAY
9026: PUSH
9027: LD_INT 22
9029: EQUAL
9030: OR
9031: PUSH
9032: LD_VAR 0 9
9036: PUSH
9037: LD_VAR 0 14
9041: ARRAY
9042: PUSH
9043: LD_INT 23
9045: EQUAL
9046: OR
9047: PUSH
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 14
9057: ARRAY
9058: PUSH
9059: LD_INT 30
9061: EQUAL
9062: OR
9063: IFFALSE 9112
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9065: LD_ADDR_VAR 0 18
9069: PUSH
9070: LD_INT 11
9072: PUSH
9073: LD_INT 12
9075: PUSH
9076: LD_INT 13
9078: PUSH
9079: LD_INT 14
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9088: LD_ADDR_OWVAR 37
9092: PUSH
9093: LD_VAR 0 18
9097: PUSH
9098: LD_INT 1
9100: PPUSH
9101: LD_VAR 0 18
9105: PPUSH
9106: CALL_OW 12
9110: ARRAY
9111: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9112: LD_VAR 0 9
9116: PUSH
9117: LD_VAR 0 14
9121: ARRAY
9122: PUSH
9123: LD_INT 29
9125: EQUAL
9126: PUSH
9127: LD_VAR 0 9
9131: PUSH
9132: LD_VAR 0 14
9136: ARRAY
9137: PUSH
9138: LD_INT 28
9140: EQUAL
9141: OR
9142: PUSH
9143: LD_VAR 0 9
9147: PUSH
9148: LD_VAR 0 14
9152: ARRAY
9153: PUSH
9154: LD_INT 27
9156: EQUAL
9157: OR
9158: PUSH
9159: LD_VAR 0 9
9163: PUSH
9164: LD_VAR 0 14
9168: ARRAY
9169: PUSH
9170: LD_INT 26
9172: EQUAL
9173: OR
9174: PUSH
9175: LD_VAR 0 9
9179: PUSH
9180: LD_VAR 0 14
9184: ARRAY
9185: PUSH
9186: LD_INT 25
9188: EQUAL
9189: OR
9190: IFFALSE 9231
// begin arChassisTab = [ 13 , 14 ] ;
9192: LD_ADDR_VAR 0 18
9196: PUSH
9197: LD_INT 13
9199: PUSH
9200: LD_INT 14
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9207: LD_ADDR_OWVAR 37
9211: PUSH
9212: LD_VAR 0 18
9216: PUSH
9217: LD_INT 1
9219: PPUSH
9220: LD_VAR 0 18
9224: PPUSH
9225: CALL_OW 12
9229: ARRAY
9230: ST_TO_ADDR
// end ; end ;
9231: GO 8998
9233: POP
9234: POP
// veh = CreateVehicle ;
9235: LD_ADDR_VAR 0 16
9239: PUSH
9240: CALL_OW 45
9244: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9245: LD_VAR 0 16
9249: PPUSH
9250: LD_VAR 0 1
9254: PPUSH
9255: LD_INT 0
9257: PPUSH
9258: CALL_OW 49
// if vc_control = 1 then
9262: LD_OWVAR 38
9266: PUSH
9267: LD_INT 1
9269: EQUAL
9270: IFFALSE 9327
// begin hc_gallery =  ;
9272: LD_ADDR_OWVAR 33
9276: PUSH
9277: LD_STRING 
9279: ST_TO_ADDR
// hc_name =  ;
9280: LD_ADDR_OWVAR 26
9284: PUSH
9285: LD_STRING 
9287: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9288: LD_INT 0
9290: PPUSH
9291: LD_INT 3
9293: PPUSH
9294: LD_VAR 0 4
9298: PPUSH
9299: CALL_OW 380
// un = CreateHuman ;
9303: LD_ADDR_VAR 0 15
9307: PUSH
9308: CALL_OW 44
9312: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9313: LD_VAR 0 15
9317: PPUSH
9318: LD_VAR 0 16
9322: PPUSH
9323: CALL_OW 52
// end ; i = i + 1 ;
9327: LD_ADDR_VAR 0 13
9331: PUSH
9332: LD_VAR 0 13
9336: PUSH
9337: LD_INT 1
9339: PLUS
9340: ST_TO_ADDR
// end ; if nation = 3 then
9341: LD_VAR 0 5
9345: PUSH
9346: LD_INT 3
9348: EQUAL
9349: IFFALSE 9755
// begin uc_side = side ;
9351: LD_ADDR_OWVAR 20
9355: PUSH
9356: LD_VAR 0 2
9360: ST_TO_ADDR
// uc_nation = nation ;
9361: LD_ADDR_OWVAR 21
9365: PUSH
9366: LD_VAR 0 5
9370: ST_TO_ADDR
// vc_engine = vehengine ;
9371: LD_ADDR_OWVAR 39
9375: PUSH
9376: LD_VAR 0 6
9380: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9381: LD_ADDR_OWVAR 38
9385: PUSH
9386: LD_VAR 0 7
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 7
9398: PPUSH
9399: CALL_OW 12
9403: ARRAY
9404: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9405: LD_ADDR_OWVAR 40
9409: PUSH
9410: LD_VAR 0 8
9414: PUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_VAR 0 8
9422: PPUSH
9423: CALL_OW 12
9427: ARRAY
9428: ST_TO_ADDR
// for j = 1 to RuWeapons do
9429: LD_ADDR_VAR 0 14
9433: PUSH
9434: DOUBLE
9435: LD_INT 1
9437: DEC
9438: ST_TO_ADDR
9439: LD_VAR 0 8
9443: PUSH
9444: FOR_TO
9445: IFFALSE 9631
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9447: LD_VAR 0 8
9451: PUSH
9452: LD_VAR 0 14
9456: ARRAY
9457: PUSH
9458: LD_INT 42
9460: EQUAL
9461: PUSH
9462: LD_VAR 0 8
9466: PUSH
9467: LD_VAR 0 14
9471: ARRAY
9472: PUSH
9473: LD_INT 43
9475: EQUAL
9476: OR
9477: PUSH
9478: LD_VAR 0 8
9482: PUSH
9483: LD_VAR 0 14
9487: ARRAY
9488: PUSH
9489: LD_INT 44
9491: EQUAL
9492: OR
9493: PUSH
9494: LD_VAR 0 8
9498: PUSH
9499: LD_VAR 0 14
9503: ARRAY
9504: PUSH
9505: LD_INT 45
9507: EQUAL
9508: OR
9509: PUSH
9510: LD_VAR 0 8
9514: PUSH
9515: LD_VAR 0 14
9519: ARRAY
9520: PUSH
9521: LD_INT 49
9523: EQUAL
9524: OR
9525: IFFALSE 9562
// begin ruChassisTab = [ 24 ] ;
9527: LD_ADDR_VAR 0 17
9531: PUSH
9532: LD_INT 24
9534: PUSH
9535: EMPTY
9536: LIST
9537: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9538: LD_ADDR_OWVAR 37
9542: PUSH
9543: LD_VAR 0 17
9547: PUSH
9548: LD_INT 1
9550: PPUSH
9551: LD_VAR 0 17
9555: PPUSH
9556: CALL_OW 12
9560: ARRAY
9561: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9562: LD_VAR 0 8
9566: PUSH
9567: LD_VAR 0 14
9571: ARRAY
9572: PUSH
9573: LD_INT 46
9575: EQUAL
9576: PUSH
9577: LD_VAR 0 8
9581: PUSH
9582: LD_VAR 0 14
9586: ARRAY
9587: PUSH
9588: LD_INT 47
9590: EQUAL
9591: OR
9592: IFFALSE 9629
// begin ruChassisTab = [ 24 ] ;
9594: LD_ADDR_VAR 0 17
9598: PUSH
9599: LD_INT 24
9601: PUSH
9602: EMPTY
9603: LIST
9604: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9605: LD_ADDR_OWVAR 37
9609: PUSH
9610: LD_VAR 0 17
9614: PUSH
9615: LD_INT 1
9617: PPUSH
9618: LD_VAR 0 17
9622: PPUSH
9623: CALL_OW 12
9627: ARRAY
9628: ST_TO_ADDR
// end ; end ;
9629: GO 9444
9631: POP
9632: POP
// veh = CreateVehicle ;
9633: LD_ADDR_VAR 0 16
9637: PUSH
9638: CALL_OW 45
9642: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9643: LD_VAR 0 16
9647: PPUSH
9648: LD_VAR 0 1
9652: PPUSH
9653: LD_INT 0
9655: PPUSH
9656: CALL_OW 49
// if vc_control = 1 then
9660: LD_OWVAR 38
9664: PUSH
9665: LD_INT 1
9667: EQUAL
9668: IFFALSE 9755
// begin if uc_side = 8 then
9670: LD_OWVAR 20
9674: PUSH
9675: LD_INT 8
9677: EQUAL
9678: IFFALSE 9690
// uc_nation = 2 else
9680: LD_ADDR_OWVAR 21
9684: PUSH
9685: LD_INT 2
9687: ST_TO_ADDR
9688: GO 9700
// uc_nation = nation ;
9690: LD_ADDR_OWVAR 21
9694: PUSH
9695: LD_VAR 0 5
9699: ST_TO_ADDR
// hc_gallery =  ;
9700: LD_ADDR_OWVAR 33
9704: PUSH
9705: LD_STRING 
9707: ST_TO_ADDR
// hc_name =  ;
9708: LD_ADDR_OWVAR 26
9712: PUSH
9713: LD_STRING 
9715: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9716: LD_INT 0
9718: PPUSH
9719: LD_INT 3
9721: PPUSH
9722: LD_VAR 0 4
9726: PPUSH
9727: CALL_OW 380
// un = CreateHuman ;
9731: LD_ADDR_VAR 0 15
9735: PUSH
9736: CALL_OW 44
9740: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9741: LD_VAR 0 15
9745: PPUSH
9746: LD_VAR 0 16
9750: PPUSH
9751: CALL_OW 52
// end ; end ; end ;
9755: GO 8332
9757: POP
9758: POP
// repeat wait ( 0 0$1 ) ;
9759: LD_INT 35
9761: PPUSH
9762: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9766: LD_ADDR_VAR 0 20
9770: PUSH
9771: LD_INT 22
9773: PUSH
9774: LD_VAR 0 2
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 21
9785: PUSH
9786: LD_INT 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 24
9795: PUSH
9796: LD_INT 250
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: LD_INT 2
9805: PUSH
9806: LD_INT 34
9808: PUSH
9809: LD_INT 25
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 34
9818: PUSH
9819: LD_INT 26
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 34
9828: PUSH
9829: LD_INT 27
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 34
9838: PUSH
9839: LD_INT 28
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 34
9848: PUSH
9849: LD_INT 29
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 34
9858: PUSH
9859: LD_INT 46
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 44
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 34
9878: PUSH
9879: LD_INT 45
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 34
9888: PUSH
9889: LD_INT 47
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: PPUSH
9914: CALL_OW 69
9918: ST_TO_ADDR
// if vehicleOK_list > 0 then
9919: LD_VAR 0 20
9923: PUSH
9924: LD_INT 0
9926: GREATER
9927: IFFALSE 10118
// begin for i in vehicleOK_list do
9929: LD_ADDR_VAR 0 13
9933: PUSH
9934: LD_VAR 0 20
9938: PUSH
9939: FOR_IN
9940: IFFALSE 10116
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9942: LD_ADDR_VAR 0 21
9946: PUSH
9947: LD_INT 22
9949: PUSH
9950: LD_VAR 0 11
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PPUSH
9959: CALL_OW 69
9963: PPUSH
9964: LD_VAR 0 13
9968: PPUSH
9969: CALL_OW 74
9973: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9974: LD_ADDR_VAR 0 22
9978: PUSH
9979: LD_INT 22
9981: PUSH
9982: LD_VAR 0 11
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: LD_INT 59
9996: PUSH
9997: EMPTY
9998: LIST
9999: PUSH
10000: LD_INT 21
10002: PUSH
10003: LD_INT 1
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 21
10012: PUSH
10013: LD_INT 2
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: PPUSH
10038: LD_VAR 0 13
10042: PPUSH
10043: CALL_OW 74
10047: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10048: LD_VAR 0 13
10052: PPUSH
10053: LD_VAR 0 21
10057: PPUSH
10058: CALL_OW 296
10062: PUSH
10063: LD_INT 8
10065: PLUS
10066: PUSH
10067: LD_VAR 0 13
10071: PPUSH
10072: LD_VAR 0 22
10076: PPUSH
10077: CALL_OW 296
10081: LESS
10082: IFFALSE 10100
// begin ComAttackUnit ( i , target1 ) ;
10084: LD_VAR 0 13
10088: PPUSH
10089: LD_VAR 0 21
10093: PPUSH
10094: CALL_OW 115
// end else
10098: GO 10114
// begin ComAttackUnit ( i , target2 ) ;
10100: LD_VAR 0 13
10104: PPUSH
10105: LD_VAR 0 22
10109: PPUSH
10110: CALL_OW 115
// end ; end ;
10114: GO 9939
10116: POP
10117: POP
// end ; until vehicleOK_list = 0 ;
10118: LD_VAR 0 20
10122: PUSH
10123: LD_INT 0
10125: EQUAL
10126: IFFALSE 9759
// end ;
10128: LD_VAR 0 12
10132: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
10133: LD_INT 0
10135: PPUSH
10136: PPUSH
10137: PPUSH
10138: PPUSH
10139: PPUSH
10140: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
10141: LD_ADDR_VAR 0 6
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_VAR 0 1
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 34
10160: PUSH
10161: LD_INT 29
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PPUSH
10172: CALL_OW 69
10176: ST_TO_ADDR
// if veh_list = 0 then
10177: LD_VAR 0 6
10181: PUSH
10182: LD_INT 0
10184: EQUAL
10185: IFFALSE 10189
// exit ;
10187: GO 10394
// if veh_list > 0 then
10189: LD_VAR 0 6
10193: PUSH
10194: LD_INT 0
10196: GREATER
10197: IFFALSE 10394
// begin for i in veh_List do
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_VAR 0 6
10208: PUSH
10209: FOR_IN
10210: IFFALSE 10392
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10212: LD_ADDR_VAR 0 7
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_VAR 0 2
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 24
10231: PUSH
10232: LD_INT 250
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 2
10241: PUSH
10242: LD_INT 59
10244: PUSH
10245: EMPTY
10246: LIST
10247: PUSH
10248: LD_INT 21
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 2
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: PUSH
10279: EMPTY
10280: LIST
10281: PPUSH
10282: CALL_OW 69
10286: PPUSH
10287: LD_VAR 0 4
10291: PPUSH
10292: CALL_OW 74
10296: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10297: LD_VAR 0 4
10301: PPUSH
10302: LD_VAR 0 7
10306: PPUSH
10307: CALL_OW 115
// if not HasTask ( i ) then
10311: LD_VAR 0 4
10315: PPUSH
10316: CALL_OW 314
10320: NOT
10321: IFFALSE 10390
// begin wait ( 0 0$0.1 ) ;
10323: LD_INT 4
10325: PPUSH
10326: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10330: LD_ADDR_VAR 0 8
10334: PUSH
10335: LD_INT 22
10337: PUSH
10338: LD_VAR 0 2
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 24
10349: PUSH
10350: LD_INT 250
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: PPUSH
10366: LD_VAR 0 4
10370: PPUSH
10371: CALL_OW 74
10375: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10376: LD_VAR 0 4
10380: PPUSH
10381: LD_VAR 0 8
10385: PPUSH
10386: CALL_OW 115
// end ; end ;
10390: GO 10209
10392: POP
10393: POP
// end ; end ; end_of_file
10394: LD_VAR 0 3
10398: RET
// every 0 0$1 do
10399: GO 10401
10401: DISABLE
// begin enable ;
10402: ENABLE
// IntBazooka ( 7 , 1 ) ;
10403: LD_INT 7
10405: PPUSH
10406: LD_INT 1
10408: PPUSH
10409: CALL 6904 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10413: LD_INT 8
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL 10133 0 2
// end ;
10423: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10424: LD_INT 22
10426: PUSH
10427: LD_INT 3
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 21
10436: PUSH
10437: LD_INT 2
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PUSH
10444: LD_INT 50
10446: PUSH
10447: EMPTY
10448: LIST
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: LD_INT 34
10455: PUSH
10456: LD_INT 46
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: PUSH
10463: LD_INT 34
10465: PUSH
10466: LD_INT 44
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PUSH
10473: LD_INT 34
10475: PUSH
10476: LD_INT 45
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PUSH
10483: LD_INT 34
10485: PUSH
10486: LD_INT 47
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: PUSH
10511: LD_INT 0
10513: GREATER
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 21
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 50
10537: PUSH
10538: EMPTY
10539: LIST
10540: PUSH
10541: LD_INT 34
10543: PUSH
10544: LD_INT 49
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PPUSH
10557: CALL_OW 69
10561: PUSH
10562: LD_INT 0
10564: GREATER
10565: AND
10566: IFFALSE 10738
10568: GO 10570
10570: DISABLE
10571: LD_INT 0
10573: PPUSH
10574: PPUSH
// begin enable ;
10575: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10576: LD_ADDR_VAR 0 1
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_INT 3
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 21
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 50
10603: PUSH
10604: EMPTY
10605: LIST
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: LD_INT 34
10612: PUSH
10613: LD_INT 46
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 34
10622: PUSH
10623: LD_INT 44
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 34
10632: PUSH
10633: LD_INT 45
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 34
10642: PUSH
10643: LD_INT 47
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PPUSH
10663: CALL_OW 69
10667: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10668: LD_ADDR_VAR 0 2
10672: PUSH
10673: LD_INT 22
10675: PUSH
10676: LD_INT 3
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 21
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 50
10695: PUSH
10696: EMPTY
10697: LIST
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 49
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 69
10719: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10720: LD_VAR 0 2
10724: PPUSH
10725: LD_VAR 0 1
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PPUSH
10734: CALL_OW 112
// end ; end_of_file
10738: PPOPN 2
10740: END
// every 0 0$1 trigger eventVar4 = 1 do
10741: LD_EXP 40
10745: PUSH
10746: LD_INT 1
10748: EQUAL
10749: IFFALSE 11543
10751: GO 10753
10753: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_STRING D9b-JMM-1
10761: PPUSH
10762: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10766: LD_EXP 15
10770: PPUSH
10771: LD_STRING D9b-Pow-1
10773: PPUSH
10774: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10778: LD_EXP 1
10782: PPUSH
10783: LD_STRING D9b-JMM-2
10785: PPUSH
10786: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10790: LD_EXP 15
10794: PPUSH
10795: LD_STRING D9b-Pow-2
10797: PPUSH
10798: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D9b-JMM-3
10809: PPUSH
10810: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10814: LD_EXP 15
10818: PPUSH
10819: LD_STRING D9b-Pow-3
10821: PPUSH
10822: CALL_OW 94
// if burlakStatus = 1 then
10826: LD_EXP 28
10830: PUSH
10831: LD_INT 1
10833: EQUAL
10834: IFFALSE 10848
// begin AddMedal ( Burlak , 1 ) ;
10836: LD_STRING Burlak
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 101
// end else
10846: GO 10859
// begin AddMedal ( Burlak , - 1 ) ;
10848: LD_STRING Burlak
10850: PPUSH
10851: LD_INT 1
10853: NEG
10854: PPUSH
10855: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10859: LD_EXP 2
10863: PPUSH
10864: CALL_OW 302
10868: IFFALSE 10882
// begin AddMedal ( Stevens , 1 ) ;
10870: LD_STRING Stevens
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 101
// end else
10880: GO 10893
// begin AddMedal ( Stevens , - 1 ) ;
10882: LD_STRING Stevens
10884: PPUSH
10885: LD_INT 1
10887: NEG
10888: PPUSH
10889: CALL_OW 101
// end ; if radarOnSpot = 1 then
10893: LD_EXP 30
10897: PUSH
10898: LD_INT 1
10900: EQUAL
10901: IFFALSE 10915
// begin AddMedal ( Observation , 1 ) ;
10903: LD_STRING Observation
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL_OW 101
// end else
10913: GO 10926
// begin AddMedal ( Observation , - 1 ) ;
10915: LD_STRING Observation
10917: PPUSH
10918: LD_INT 1
10920: NEG
10921: PPUSH
10922: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10926: LD_STRING MAIN
10928: PPUSH
10929: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10933: LD_EXP 28
10937: PPUSH
10938: LD_STRING 13_BurlakStatus_1
10940: PPUSH
10941: CALL_OW 39
// if IsOk ( Stevens ) then
10945: LD_EXP 2
10949: PPUSH
10950: CALL_OW 302
10954: IFFALSE 10968
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10956: LD_INT 1
10958: PPUSH
10959: LD_STRING 13_StevensStatus_1
10961: PPUSH
10962: CALL_OW 39
10966: GO 10978
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10968: LD_INT 0
10970: PPUSH
10971: LD_STRING 13_StevensStatus_1
10973: PPUSH
10974: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10978: LD_INT 22
10980: PUSH
10981: LD_INT 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 2
11000: PUSH
11001: LD_INT 25
11003: PUSH
11004: LD_INT 1
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: PUSH
11011: LD_INT 25
11013: PUSH
11014: LD_INT 2
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 25
11023: PUSH
11024: LD_INT 3
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 25
11043: PUSH
11044: LD_INT 5
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 25
11053: PUSH
11054: LD_INT 8
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: PPUSH
11075: CALL_OW 69
11079: PPUSH
11080: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11084: LD_EXP 1
11088: PPUSH
11089: LD_EXP 36
11093: PUSH
11094: LD_STRING JMM
11096: STR
11097: PPUSH
11098: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
11102: LD_EXP 8
11106: PPUSH
11107: LD_EXP 36
11111: PUSH
11112: LD_STRING Brown
11114: STR
11115: PPUSH
11116: CALL 7212 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11120: LD_EXP 4
11124: PPUSH
11125: LD_EXP 36
11129: PUSH
11130: LD_STRING Donaldson
11132: STR
11133: PPUSH
11134: CALL 7212 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11138: LD_EXP 5
11142: PPUSH
11143: LD_EXP 36
11147: PUSH
11148: LD_STRING Bobby
11150: STR
11151: PPUSH
11152: CALL 7212 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11156: LD_EXP 6
11160: PPUSH
11161: LD_EXP 36
11165: PUSH
11166: LD_STRING Cyrus
11168: STR
11169: PPUSH
11170: CALL 7212 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11174: LD_EXP 3
11178: PPUSH
11179: LD_EXP 36
11183: PUSH
11184: LD_STRING Lisa
11186: STR
11187: PPUSH
11188: CALL 7212 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
11192: LD_EXP 13
11196: PPUSH
11197: LD_EXP 36
11201: PUSH
11202: LD_STRING Frank
11204: STR
11205: PPUSH
11206: CALL 7212 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11210: LD_EXP 14
11214: PPUSH
11215: LD_EXP 36
11219: PUSH
11220: LD_STRING Kikuchi
11222: STR
11223: PPUSH
11224: CALL 7212 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
11228: LD_EXP 10
11232: PPUSH
11233: LD_EXP 36
11237: PUSH
11238: LD_STRING Houten
11240: STR
11241: PPUSH
11242: CALL 7212 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
11246: LD_EXP 12
11250: PPUSH
11251: LD_EXP 36
11255: PUSH
11256: LD_STRING Gary
11258: STR
11259: PPUSH
11260: CALL 7212 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
11264: LD_EXP 11
11268: PPUSH
11269: LD_EXP 36
11273: PUSH
11274: LD_STRING Cornell
11276: STR
11277: PPUSH
11278: CALL 7212 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
11282: LD_EXP 7
11286: PPUSH
11287: LD_EXP 36
11291: PUSH
11292: LD_STRING Denis
11294: STR
11295: PPUSH
11296: CALL 7212 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11300: LD_EXP 9
11304: PPUSH
11305: LD_EXP 36
11309: PUSH
11310: LD_STRING Gladstone
11312: STR
11313: PPUSH
11314: CALL 7212 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11318: LD_EXP 2
11322: PPUSH
11323: LD_EXP 36
11327: PUSH
11328: LD_STRING Stevens
11330: STR
11331: PPUSH
11332: CALL 7212 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11336: LD_INT 50
11338: PUSH
11339: EMPTY
11340: LIST
11341: PUSH
11342: LD_INT 22
11344: PUSH
11345: LD_INT 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: LD_INT 21
11354: PUSH
11355: LD_INT 1
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: LD_INT 25
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: LD_INT 25
11387: PUSH
11388: LD_INT 3
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 4
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 25
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 8
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PPUSH
11440: CALL_OW 69
11444: PUSH
11445: LD_EXP 1
11449: PUSH
11450: LD_EXP 8
11454: PUSH
11455: LD_EXP 4
11459: PUSH
11460: LD_EXP 5
11464: PUSH
11465: LD_EXP 6
11469: PUSH
11470: LD_EXP 3
11474: PUSH
11475: LD_EXP 13
11479: PUSH
11480: LD_EXP 9
11484: PUSH
11485: LD_EXP 14
11489: PUSH
11490: LD_EXP 7
11494: PUSH
11495: LD_EXP 10
11499: PUSH
11500: LD_EXP 12
11504: PUSH
11505: LD_EXP 11
11509: PUSH
11510: LD_EXP 2
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: DIFF
11531: PPUSH
11532: LD_STRING 13_other_survivors
11534: PPUSH
11535: CALL_OW 38
// YouWin ;
11539: CALL_OW 103
// end ; end_of_file
11543: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11544: LD_EXP 32
11548: PUSH
11549: LD_INT 2
11551: EQUAL
11552: IFFALSE 11688
11554: GO 11556
11556: DISABLE
11557: LD_INT 0
11559: PPUSH
11560: PPUSH
11561: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: LD_INT 22
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 21
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 30
11592: PUSH
11593: LD_INT 0
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 30
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 69
11624: ST_TO_ADDR
// for i in tmp do
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_VAR 0 2
11634: PUSH
11635: FOR_IN
11636: IFFALSE 11669
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11638: LD_ADDR_VAR 0 3
11642: PUSH
11643: LD_VAR 0 3
11647: PUSH
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 274
11657: PPUSH
11658: LD_INT 3
11660: PPUSH
11661: CALL_OW 275
11665: PLUS
11666: ST_TO_ADDR
11667: GO 11635
11669: POP
11670: POP
// if yourSiberite < 79 then
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 79
11678: LESS
11679: IFFALSE 11688
// YouLost ( siberite ) ;
11681: LD_STRING siberite
11683: PPUSH
11684: CALL_OW 104
// end ;
11688: PPOPN 3
11690: END
// every 0 0$1 trigger IsDead ( JMM ) do
11691: LD_EXP 1
11695: PPUSH
11696: CALL_OW 301
11700: IFFALSE 11712
11702: GO 11704
11704: DISABLE
// YouLost ( JMM ) ; end_of_file
11705: LD_STRING JMM
11707: PPUSH
11708: CALL_OW 104
11712: END
// every 8 8$0 + 7 7$0 do
11713: GO 11715
11715: DISABLE
// begin enable ;
11716: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11717: LD_INT 8
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_INT 3
11728: PPUSH
11729: CALL_OW 12
11733: PPUSH
11734: LD_INT 0
11736: PPUSH
11737: LD_INT 0
11739: PPUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: LD_INT 4
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: PUSH
11754: LD_OWVAR 67
11758: ARRAY
11759: PPUSH
11760: LD_INT 0
11762: PPUSH
11763: LD_INT 10
11765: PPUSH
11766: LD_INT 8
11768: PUSH
11769: LD_INT 9
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 1
11778: PPUSH
11779: LD_INT 2
11781: PPUSH
11782: CALL_OW 12
11786: ARRAY
11787: PPUSH
11788: LD_INT 12
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL 7263 0 11
// end ;
11798: END
// every 8 8$0 + 7 7$0 do
11799: GO 11801
11801: DISABLE
// begin enable ;
11802: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11803: LD_ADDR_EXP 33
11807: PUSH
11808: LD_EXP 33
11812: PUSH
11813: LD_INT 1
11815: PLUS
11816: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11817: LD_INT 8
11819: PUSH
11820: LD_INT 9
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 1
11829: PPUSH
11830: LD_INT 2
11832: PPUSH
11833: CALL_OW 12
11837: ARRAY
11838: PPUSH
11839: LD_INT 8
11841: PPUSH
11842: LD_INT 4
11844: PPUSH
11845: LD_INT 9
11847: PPUSH
11848: CALL_OW 12
11852: PUSH
11853: LD_INT 6
11855: PPUSH
11856: LD_INT 9
11858: PPUSH
11859: CALL_OW 12
11863: PUSH
11864: LD_INT 6
11866: PPUSH
11867: LD_INT 10
11869: PPUSH
11870: CALL_OW 12
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: LD_OWVAR 67
11884: ARRAY
11885: PPUSH
11886: LD_INT 10
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 5
11897: PUSH
11898: LD_INT 2
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PPUSH
11905: EMPTY
11906: PPUSH
11907: LD_INT 25
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: LD_INT 27
11915: PUSH
11916: LD_INT 28
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: PPUSH
11929: EMPTY
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL 8283 0 11
// end ;
11938: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do
11939: LD_EXP 33
11943: PUSH
11944: LD_INT 4
11946: GREATEREQUAL
11947: IFFALSE 12052
11949: GO 11951
11951: DISABLE
// begin enable ;
11952: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11953: LD_ADDR_EXP 33
11957: PUSH
11958: LD_EXP 33
11962: PUSH
11963: LD_INT 1
11965: PLUS
11966: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
11967: LD_INT 8
11969: PUSH
11970: LD_INT 9
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 1
11979: PPUSH
11980: LD_INT 2
11982: PPUSH
11983: CALL_OW 12
11987: ARRAY
11988: PPUSH
11989: LD_INT 8
11991: PPUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 3
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_OWVAR 67
12010: ARRAY
12011: PPUSH
12012: LD_INT 10
12014: PPUSH
12015: LD_INT 3
12017: PPUSH
12018: LD_INT 3
12020: PPUSH
12021: LD_INT 1
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PPUSH
12031: LD_INT 47
12033: PUSH
12034: LD_INT 47
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PPUSH
12041: EMPTY
12042: PPUSH
12043: EMPTY
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL 8283 0 11
// end ;
12052: END
// every 1 1$0 trigger eventVar2 = 1 do
12053: LD_EXP 38
12057: PUSH
12058: LD_INT 1
12060: EQUAL
12061: IFFALSE 12163
12063: GO 12065
12065: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
12066: LD_INT 8
12068: PUSH
12069: LD_INT 9
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 1
12078: PPUSH
12079: LD_INT 2
12081: PPUSH
12082: CALL_OW 12
12086: ARRAY
12087: PPUSH
12088: LD_INT 3
12090: PPUSH
12091: LD_INT 6
12093: PUSH
12094: LD_INT 7
12096: PUSH
12097: LD_INT 8
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: PUSH
12105: LD_OWVAR 67
12109: ARRAY
12110: PPUSH
12111: LD_INT 10
12113: PPUSH
12114: LD_INT 3
12116: PPUSH
12117: LD_INT 3
12119: PPUSH
12120: LD_INT 3
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PPUSH
12130: LD_INT 46
12132: PUSH
12133: LD_INT 44
12135: PUSH
12136: LD_INT 45
12138: PUSH
12139: LD_INT 47
12141: PUSH
12142: LD_INT 49
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PPUSH
12152: EMPTY
12153: PPUSH
12154: EMPTY
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL 8283 0 11
// end ; end_of_file
12163: END
// every 1 1$0 do
12164: GO 12166
12166: DISABLE
// begin enable ;
12167: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
12168: LD_INT 3
12170: PPUSH
12171: LD_INT 5
12173: PPUSH
12174: CALL_OW 12
12178: PPUSH
12179: LD_INT 13
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 55
// end ;
12189: END
