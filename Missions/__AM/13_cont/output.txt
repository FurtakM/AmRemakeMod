// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 25
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 26
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 28
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 27
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 30
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 29
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// eventVar1 = 0 ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// eventVar2 = 0 ;
  85: LD_ADDR_EXP 35
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// eventVar3 = 0 ;
  93: LD_ADDR_EXP 36
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar4 = 0 ;
 101: LD_ADDR_EXP 37
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar5 = 0 ;
 109: LD_ADDR_EXP 38
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// mission_prefix = 13f_ ;
 117: LD_ADDR_EXP 33
 121: PUSH
 122: LD_STRING 13f_
 124: ST_TO_ADDR
// debugMode = 1 ;
 125: LD_ADDR_EXP 39
 129: PUSH
 130: LD_INT 1
 132: ST_TO_ADDR
// SpawnVehicle ;
 133: CALL 1501 0 0
// PrepareHeroes ;
 137: CALL 463 0 0
// PrepareAmericansRandom ;
 141: CALL 1405 0 0
// end ;
 145: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 146: LD_EXP 39
 150: PUSH
 151: LD_INT 1
 153: EQUAL
 154: IFFALSE 460
 156: GO 158
 158: DISABLE
 159: LD_INT 0
 161: PPUSH
// begin enable ;
 162: ENABLE
// fogoff ( true ) ;
 163: LD_INT 1
 165: PPUSH
 166: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 170: LD_ADDR_VAR 0 1
 174: PUSH
 175: LD_INT 22
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 21
 187: PUSH
 188: LD_INT 1
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: PPUSH
 199: CALL_OW 69
 203: PUSH
 204: FOR_IN
 205: IFFALSE 221
// SetLives ( i , 1000 ) ;
 207: LD_VAR 0 1
 211: PPUSH
 212: LD_INT 1000
 214: PPUSH
 215: CALL_OW 234
 219: GO 204
 221: POP
 222: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 223: LD_ADDR_VAR 0 1
 227: PUSH
 228: LD_INT 22
 230: PUSH
 231: LD_INT 1
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 30
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PPUSH
 270: CALL_OW 69
 274: PUSH
 275: FOR_IN
 276: IFFALSE 300
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 278: LD_VAR 0 1
 282: PPUSH
 283: CALL_OW 274
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 9999
 293: PPUSH
 294: CALL_OW 277
 298: GO 275
 300: POP
 301: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 302: LD_ADDR_VAR 0 1
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 30
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: FOR_IN
 355: IFFALSE 379
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
 377: GO 354
 379: POP
 380: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 381: LD_ADDR_VAR 0 1
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PPUSH
 428: CALL_OW 69
 432: PUSH
 433: FOR_IN
 434: IFFALSE 458
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 436: LD_VAR 0 1
 440: PPUSH
 441: CALL_OW 274
 445: PPUSH
 446: LD_INT 3
 448: PPUSH
 449: LD_INT 9999
 451: PPUSH
 452: CALL_OW 277
 456: GO 433
 458: POP
 459: POP
// end ; end_of_file
 460: PPOPN 1
 462: END
// export function PrepareHeroes ; begin
 463: LD_INT 0
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING 13c_JMM
 481: PPUSH
 482: LD_INT 1
 484: PPUSH
 485: CALL 5690 0 2
 489: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 490: LD_ADDR_EXP 2
 494: PUSH
 495: LD_STRING 13c_Stevens
 497: PPUSH
 498: LD_INT 1
 500: PPUSH
 501: CALL 5690 0 2
 505: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 506: LD_ADDR_EXP 3
 510: PUSH
 511: LD_STRING 13c_Lisa
 513: PPUSH
 514: LD_INT 1
 516: PPUSH
 517: CALL 5690 0 2
 521: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_STRING 13c_Donaldson
 529: PPUSH
 530: LD_INT 1
 532: PPUSH
 533: CALL 5690 0 2
 537: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 538: LD_ADDR_EXP 5
 542: PUSH
 543: LD_STRING 13c_Bobby
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL 5690 0 2
 553: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 554: LD_ADDR_EXP 6
 558: PUSH
 559: LD_STRING 13c_Cyrus
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: CALL 5690 0 2
 569: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING 13c_Denis
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL 5690 0 2
 585: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_STRING 13c_Brown
 593: PPUSH
 594: LD_INT 1
 596: PPUSH
 597: CALL 5690 0 2
 601: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 602: LD_ADDR_EXP 9
 606: PUSH
 607: LD_STRING 13c_Gladstone
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 5690 0 2
 617: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 618: LD_ADDR_EXP 10
 622: PUSH
 623: LD_STRING 13c_Houten
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 5690 0 2
 633: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: LD_STRING 13c_Cornel
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL 5690 0 2
 649: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 650: LD_ADDR_EXP 12
 654: PUSH
 655: LD_STRING 13c_Gary
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: CALL 5690 0 2
 665: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 666: LD_ADDR_EXP 13
 670: PUSH
 671: LD_STRING 13c_Frank
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 5690 0 2
 681: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 682: LD_ADDR_EXP 14
 686: PUSH
 687: LD_STRING 13c_Kikuchi
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 5690 0 2
 697: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 698: LD_ADDR_EXP 15
 702: PUSH
 703: LD_STRING Powell
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL 5690 0 2
 713: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 21
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 58
 741: PUSH
 742: EMPTY
 743: LIST
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 69
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 763: LD_EXP 2
 767: PPUSH
 768: LD_INT 22
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 21
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 58
 790: PUSH
 791: EMPTY
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PPUSH
 799: CALL_OW 69
 803: PUSH
 804: LD_INT 1
 806: ARRAY
 807: PPUSH
 808: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 812: LD_EXP 3
 816: PPUSH
 817: LD_INT 22
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 21
 829: PUSH
 830: LD_INT 2
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 58
 839: PUSH
 840: EMPTY
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: PPUSH
 848: CALL_OW 69
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 861: LD_EXP 4
 865: PPUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 21
 878: PUSH
 879: LD_INT 2
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 58
 888: PUSH
 889: EMPTY
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PPUSH
 897: CALL_OW 69
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 910: LD_EXP 5
 914: PPUSH
 915: LD_INT 22
 917: PUSH
 918: LD_INT 1
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 58
 937: PUSH
 938: EMPTY
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 959: LD_EXP 6
 963: PPUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: PUSH
1000: LD_INT 1
1002: ARRAY
1003: PPUSH
1004: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1008: LD_EXP 7
1012: PPUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 1
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 21
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 58
1035: PUSH
1036: EMPTY
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PPUSH
1044: CALL_OW 69
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1057: LD_EXP 8
1061: PPUSH
1062: LD_INT 22
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PUSH
1072: LD_INT 21
1074: PUSH
1075: LD_INT 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 58
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PPUSH
1093: CALL_OW 69
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1106: LD_EXP 9
1110: PPUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 21
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 58
1133: PUSH
1134: EMPTY
1135: LIST
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1155: LD_EXP 10
1159: PPUSH
1160: LD_INT 22
1162: PUSH
1163: LD_INT 1
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 2
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 58
1182: PUSH
1183: EMPTY
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 69
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1204: LD_EXP 11
1208: PPUSH
1209: LD_INT 22
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 21
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 58
1231: PUSH
1232: EMPTY
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1253: LD_EXP 12
1257: PPUSH
1258: LD_INT 22
1260: PUSH
1261: LD_INT 1
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 2
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 58
1280: PUSH
1281: EMPTY
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1302: LD_EXP 13
1306: PPUSH
1307: LD_INT 22
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 58
1329: PUSH
1330: EMPTY
1331: LIST
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 69
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1351: LD_EXP 14
1355: PPUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: PUSH
1392: LD_INT 1
1394: ARRAY
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PrepareAmericansRandom ; var i ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
// uc_side = 1 ;
1409: LD_ADDR_OWVAR 20
1413: PUSH
1414: LD_INT 1
1416: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1417: LD_ADDR_EXP 16
1421: PUSH
1422: LD_STRING 13c_others
1424: PPUSH
1425: CALL_OW 31
1429: ST_TO_ADDR
// for i in others13 do
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_EXP 16
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1494
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1443: LD_VAR 0 2
1447: PPUSH
1448: LD_INT 22
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 21
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 58
1470: PUSH
1471: EMPTY
1472: LIST
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 69
1483: PUSH
1484: LD_INT 1
1486: ARRAY
1487: PPUSH
1488: CALL_OW 52
1492: GO 1440
1494: POP
1495: POP
// end ;
1496: LD_VAR 0 1
1500: RET
// export function SpawnVehicle ; var i , veh ; begin
1501: LD_INT 0
1503: PPUSH
1504: PPUSH
1505: PPUSH
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// uc_nation = 1 ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ Difficulty ] do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_INT 3
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_OWVAR 67
1550: ARRAY
1551: PUSH
1552: FOR_TO
1553: IFFALSE 1641
// begin vc_engine = 3 ;
1555: LD_ADDR_OWVAR 39
1559: PUSH
1560: LD_INT 3
1562: ST_TO_ADDR
// vc_control = 1 ;
1563: LD_ADDR_OWVAR 38
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// vc_weapon = 12 ;
1571: LD_ADDR_OWVAR 40
1575: PUSH
1576: LD_INT 12
1578: ST_TO_ADDR
// vc_chassis = 3 ;
1579: LD_ADDR_OWVAR 37
1583: PUSH
1584: LD_INT 3
1586: ST_TO_ADDR
// veh = CreateVehicle ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 45
1596: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// SetDir ( veh , 2 ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 233
// AddCargo ( veh , 1 , 100 ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: LD_INT 100
1634: PPUSH
1635: CALL_OW 291
// end ;
1639: GO 1552
1641: POP
1642: POP
// for i = 1 to 8 - [ 3 , 2 , 1 ] [ Difficulty ] do
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: DOUBLE
1649: LD_INT 1
1651: DEC
1652: ST_TO_ADDR
1653: LD_INT 8
1655: PUSH
1656: LD_INT 3
1658: PUSH
1659: LD_INT 2
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_OWVAR 67
1674: ARRAY
1675: MINUS
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1774
// begin vc_engine = 3 ;
1680: LD_ADDR_OWVAR 39
1684: PUSH
1685: LD_INT 3
1687: ST_TO_ADDR
// vc_control = 1 ;
1688: LD_ADDR_OWVAR 38
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
1696: LD_ADDR_OWVAR 40
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_INT 5
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 1
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: CALL_OW 12
1725: ARRAY
1726: ST_TO_ADDR
// vc_chassis = 3 ;
1727: LD_ADDR_OWVAR 37
1731: PUSH
1732: LD_INT 3
1734: ST_TO_ADDR
// veh = CreateVehicle ;
1735: LD_ADDR_VAR 0 3
1739: PUSH
1740: CALL_OW 45
1744: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1745: LD_VAR 0 3
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: LD_INT 0
1755: PPUSH
1756: CALL_OW 49
// SetDir ( veh , 1 ) ;
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: CALL_OW 233
// end ;
1772: GO 1677
1774: POP
1775: POP
// end ;
1776: LD_VAR 0 1
1780: RET
// export function PowellSupport ; var i , veh , un ; begin
1781: LD_INT 0
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
// for i = 1 to 3 do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: DOUBLE
1793: LD_INT 1
1795: DEC
1796: ST_TO_ADDR
1797: LD_INT 3
1799: PUSH
1800: FOR_TO
1801: IFFALSE 1974
// begin uc_nation = 1 ;
1803: LD_ADDR_OWVAR 21
1807: PUSH
1808: LD_INT 1
1810: ST_TO_ADDR
// uc_side = 1 ;
1811: LD_ADDR_OWVAR 20
1815: PUSH
1816: LD_INT 1
1818: ST_TO_ADDR
// vc_engine = 3 ;
1819: LD_ADDR_OWVAR 39
1823: PUSH
1824: LD_INT 3
1826: ST_TO_ADDR
// vc_control = 1 ;
1827: LD_ADDR_OWVAR 38
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
1835: LD_ADDR_OWVAR 40
1839: PUSH
1840: LD_INT 9
1842: PUSH
1843: LD_INT 5
1845: PUSH
1846: LD_INT 4
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 1
1856: PPUSH
1857: LD_INT 3
1859: PPUSH
1860: CALL_OW 12
1864: ARRAY
1865: ST_TO_ADDR
// vc_chassis = 3 ;
1866: LD_ADDR_OWVAR 37
1870: PUSH
1871: LD_INT 3
1873: ST_TO_ADDR
// veh = CreateVehicle ;
1874: LD_ADDR_VAR 0 3
1878: PUSH
1879: CALL_OW 45
1883: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1884: LD_VAR 0 3
1888: PPUSH
1889: LD_INT 2
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
// SetDir ( veh , 1 ) ;
1899: LD_VAR 0 3
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: CALL_OW 233
// hc_gallery =  ;
1911: LD_ADDR_OWVAR 33
1915: PUSH
1916: LD_STRING 
1918: ST_TO_ADDR
// hc_name =  ;
1919: LD_ADDR_OWVAR 26
1923: PUSH
1924: LD_STRING 
1926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1927: LD_INT 0
1929: PPUSH
1930: LD_INT 3
1932: PPUSH
1933: LD_INT 7
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: CALL_OW 12
1943: PPUSH
1944: CALL_OW 380
// un = CreateHuman ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: CALL_OW 44
1957: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1958: LD_VAR 0 4
1962: PPUSH
1963: LD_VAR 0 3
1967: PPUSH
1968: CALL_OW 52
// end ;
1972: GO 1800
1974: POP
1975: POP
// end ; end_of_file
1976: LD_VAR 0 1
1980: RET
// export function PrepareBurlak ; begin
1981: LD_INT 0
1983: PPUSH
// uc_side = 7 ;
1984: LD_ADDR_OWVAR 20
1988: PUSH
1989: LD_INT 7
1991: ST_TO_ADDR
// uc_nation = 3 ;
1992: LD_ADDR_OWVAR 21
1996: PUSH
1997: LD_INT 3
1999: ST_TO_ADDR
// vc_engine = 3 ;
2000: LD_ADDR_OWVAR 39
2004: PUSH
2005: LD_INT 3
2007: ST_TO_ADDR
// vc_control = 1 ;
2008: LD_ADDR_OWVAR 38
2012: PUSH
2013: LD_INT 1
2015: ST_TO_ADDR
// vc_weapon = 46 ;
2016: LD_ADDR_OWVAR 40
2020: PUSH
2021: LD_INT 46
2023: ST_TO_ADDR
// vc_chassis = 24 ;
2024: LD_ADDR_OWVAR 37
2028: PUSH
2029: LD_INT 24
2031: ST_TO_ADDR
// Masha = CreateVehicle ;
2032: LD_ADDR_EXP 18
2036: PUSH
2037: CALL_OW 45
2041: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2042: LD_EXP 18
2046: PPUSH
2047: LD_INT 3
2049: PPUSH
2050: LD_INT 0
2052: PPUSH
2053: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2057: LD_EXP 18
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2069: LD_ADDR_EXP 17
2073: PUSH
2074: LD_STRING Burlak
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL 5690 0 2
2084: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2085: LD_EXP 17
2089: PPUSH
2090: LD_EXP 18
2094: PPUSH
2095: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2099: LD_EXP 18
2103: PPUSH
2104: LD_INT 107
2106: PPUSH
2107: LD_INT 118
2109: PPUSH
2110: CALL_OW 114
// spawnBurlak = 1 ;
2114: LD_ADDR_EXP 25
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// end ;
2122: LD_VAR 0 1
2126: RET
// export function BurlakArmy ; var i , veh ; begin
2127: LD_INT 0
2129: PPUSH
2130: PPUSH
2131: PPUSH
// uc_side = 7 ;
2132: LD_ADDR_OWVAR 20
2136: PUSH
2137: LD_INT 7
2139: ST_TO_ADDR
// uc_nation = 3 ;
2140: LD_ADDR_OWVAR 21
2144: PUSH
2145: LD_INT 3
2147: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2148: LD_ADDR_EXP 19
2152: PUSH
2153: LD_STRING Gnyevko
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL 5690 0 2
2163: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2164: LD_ADDR_EXP 20
2168: PUSH
2169: LD_STRING Titov
2171: PPUSH
2172: LD_INT 0
2174: PPUSH
2175: CALL 5690 0 2
2179: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2180: LD_ADDR_EXP 21
2184: PUSH
2185: LD_STRING Xavier2
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL 5690 0 2
2195: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2196: LD_ADDR_EXP 22
2200: PUSH
2201: LD_STRING Belkov
2203: PPUSH
2204: LD_INT 0
2206: PPUSH
2207: CALL 5690 0 2
2211: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2212: LD_ADDR_EXP 23
2216: PUSH
2217: LD_STRING Lipshchin
2219: PPUSH
2220: LD_INT 0
2222: PPUSH
2223: CALL 5690 0 2
2227: ST_TO_ADDR
// for i = 1 to 5 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_INT 5
2240: PUSH
2241: FOR_TO
2242: IFFALSE 2330
// begin vc_engine = 3 ;
2244: LD_ADDR_OWVAR 39
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// vc_control = 1 ;
2252: LD_ADDR_OWVAR 38
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2260: LD_ADDR_OWVAR 40
2264: PUSH
2265: LD_INT 43
2267: PUSH
2268: LD_INT 44
2270: PUSH
2271: LD_INT 45
2273: PUSH
2274: LD_INT 49
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: PUSH
2283: LD_INT 1
2285: PPUSH
2286: LD_INT 4
2288: PPUSH
2289: CALL_OW 12
2293: ARRAY
2294: ST_TO_ADDR
// vc_chassis = 22 ;
2295: LD_ADDR_OWVAR 37
2299: PUSH
2300: LD_INT 22
2302: ST_TO_ADDR
// veh = CreateVehicle ;
2303: LD_ADDR_VAR 0 3
2307: PUSH
2308: CALL_OW 45
2312: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2313: LD_VAR 0 3
2317: PPUSH
2318: LD_INT 3
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL_OW 49
// end ;
2328: GO 2241
2330: POP
2331: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2332: LD_EXP 19
2336: PPUSH
2337: LD_INT 22
2339: PUSH
2340: LD_INT 7
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 21
2349: PUSH
2350: LD_INT 2
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 58
2359: PUSH
2360: EMPTY
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 69
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2381: LD_EXP 20
2385: PPUSH
2386: LD_INT 22
2388: PUSH
2389: LD_INT 7
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 21
2398: PUSH
2399: LD_INT 2
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 58
2408: PUSH
2409: EMPTY
2410: LIST
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 69
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2430: LD_EXP 21
2434: PPUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 7
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 21
2447: PUSH
2448: LD_INT 2
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 58
2457: PUSH
2458: EMPTY
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: PPUSH
2466: CALL_OW 69
2470: PUSH
2471: LD_INT 1
2473: ARRAY
2474: PPUSH
2475: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2479: LD_EXP 22
2483: PPUSH
2484: LD_INT 22
2486: PUSH
2487: LD_INT 7
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 21
2496: PUSH
2497: LD_INT 2
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 58
2506: PUSH
2507: EMPTY
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2528: LD_EXP 23
2532: PPUSH
2533: LD_INT 22
2535: PUSH
2536: LD_INT 7
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 21
2545: PUSH
2546: LD_INT 2
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 58
2555: PUSH
2556: EMPTY
2557: LIST
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PPUSH
2564: CALL_OW 69
2568: PUSH
2569: LD_INT 1
2571: ARRAY
2572: PPUSH
2573: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2577: LD_EXP 19
2581: PPUSH
2582: LD_INT 3
2584: PPUSH
2585: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2589: LD_EXP 20
2593: PUSH
2594: LD_EXP 23
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PPUSH
2603: LD_INT 9
2605: PPUSH
2606: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2610: LD_INT 22
2612: PUSH
2613: LD_INT 7
2615: PUSH
2616: EMPTY
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 21
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: PPUSH
2634: CALL_OW 69
2638: PPUSH
2639: LD_INT 107
2641: PPUSH
2642: LD_INT 118
2644: PPUSH
2645: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2649: LD_INT 35
2651: PPUSH
2652: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 21
2668: PUSH
2669: LD_INT 2
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 34
2678: PUSH
2679: LD_INT 49
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: PPUSH
2691: CALL_OW 69
2695: PPUSH
2696: LD_EXP 18
2700: PPUSH
2701: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2705: LD_INT 22
2707: PUSH
2708: LD_INT 7
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 21
2717: PUSH
2718: LD_INT 2
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: LD_INT 34
2727: PUSH
2728: LD_INT 49
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: PPUSH
2740: CALL_OW 69
2744: PUSH
2745: LD_INT 0
2747: EQUAL
2748: PUSH
2749: LD_EXP 18
2753: PPUSH
2754: CALL_OW 303
2758: OR
2759: IFFALSE 2649
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2761: LD_INT 22
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 21
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PPUSH
2785: CALL_OW 69
2789: PPUSH
2790: LD_INT 107
2792: PPUSH
2793: LD_INT 118
2795: PPUSH
2796: CALL_OW 114
// end ; end_of_file
2800: LD_VAR 0 1
2804: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2805: LD_INT 22
2807: PUSH
2808: LD_INT 8
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 33
2817: PUSH
2818: LD_INT 2
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 69
2833: PUSH
2834: LD_INT 0
2836: GREATER
2837: PUSH
2838: LD_INT 22
2840: PUSH
2841: LD_INT 8
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: LD_INT 34
2850: PUSH
2851: LD_INT 31
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PPUSH
2862: CALL_OW 69
2866: PUSH
2867: LD_INT 0
2869: EQUAL
2870: AND
2871: IFFALSE 3094
2873: GO 2875
2875: DISABLE
2876: LD_INT 0
2878: PPUSH
// begin enable ;
2879: ENABLE
// uc_side = 8 ;
2880: LD_ADDR_OWVAR 20
2884: PUSH
2885: LD_INT 8
2887: ST_TO_ADDR
// uc_nation = 2 ;
2888: LD_ADDR_OWVAR 21
2892: PUSH
2893: LD_INT 2
2895: ST_TO_ADDR
// vc_engine = 3 ;
2896: LD_ADDR_OWVAR 39
2900: PUSH
2901: LD_INT 3
2903: ST_TO_ADDR
// vc_control = 1 ;
2904: LD_ADDR_OWVAR 38
2908: PUSH
2909: LD_INT 1
2911: ST_TO_ADDR
// vc_weapon = 31 ;
2912: LD_ADDR_OWVAR 40
2916: PUSH
2917: LD_INT 31
2919: ST_TO_ADDR
// vc_chassis = 14 ;
2920: LD_ADDR_OWVAR 37
2924: PUSH
2925: LD_INT 14
2927: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2928: LD_ADDR_EXP 31
2932: PUSH
2933: CALL_OW 45
2937: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2938: LD_EXP 31
2942: PPUSH
2943: LD_INT 8
2945: PUSH
2946: LD_INT 9
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: ARRAY
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 49
// hc_name =  ;
2972: LD_ADDR_OWVAR 26
2976: PUSH
2977: LD_STRING 
2979: ST_TO_ADDR
// hc_gallery =  ;
2980: LD_ADDR_OWVAR 33
2984: PUSH
2985: LD_STRING 
2987: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2988: LD_INT 0
2990: PPUSH
2991: LD_INT 3
2993: PPUSH
2994: LD_INT 10
2996: PPUSH
2997: CALL_OW 380
// arDriver = CreateHuman ;
3001: LD_ADDR_EXP 32
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3011: LD_EXP 32
3015: PPUSH
3016: LD_EXP 31
3020: PPUSH
3021: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3025: LD_ADDR_VAR 0 1
3029: PUSH
3030: LD_INT 22
3032: PUSH
3033: LD_INT 8
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 33
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 3
3052: PUSH
3053: LD_INT 61
3055: PUSH
3056: EMPTY
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PPUSH
3068: CALL_OW 69
3072: PUSH
3073: FOR_IN
3074: IFFALSE 3092
// ComLinkTo ( i , arDriver ) ;
3076: LD_VAR 0 1
3080: PPUSH
3081: LD_EXP 32
3085: PPUSH
3086: CALL_OW 135
3090: GO 3073
3092: POP
3093: POP
// end ;
3094: PPOPN 1
3096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3097: LD_INT 22
3099: PUSH
3100: LD_INT 8
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 2
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 33
3119: PUSH
3120: LD_INT 2
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: PUSH
3137: LD_INT 0
3139: EQUAL
3140: IFFALSE 3164
3142: GO 3144
3144: DISABLE
// begin enable ;
3145: ENABLE
// RemoveUnit ( arControlTower ) ;
3146: LD_EXP 31
3150: PPUSH
3151: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3155: LD_EXP 32
3159: PPUSH
3160: CALL_OW 64
// end ;
3164: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3165: LD_EXP 29
3169: PUSH
3170: LD_INT 0
3172: GREATER
3173: IFFALSE 3337
3175: GO 3177
3177: DISABLE
3178: LD_INT 0
3180: PPUSH
3181: PPUSH
// begin enable ;
3182: ENABLE
// rnd = 0 ;
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// uc_side = 2 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 2
3198: ST_TO_ADDR
// uc_nation = 2 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 2
3206: ST_TO_ADDR
// hc_name =  ;
3207: LD_ADDR_OWVAR 26
3211: PUSH
3212: LD_STRING 
3214: ST_TO_ADDR
// hc_gallery =  ;
3215: LD_ADDR_OWVAR 33
3219: PUSH
3220: LD_STRING 
3222: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3223: LD_INT 0
3225: PPUSH
3226: LD_INT 4
3228: PPUSH
3229: LD_INT 10
3231: PPUSH
3232: CALL_OW 380
// un = CreateHuman ;
3236: LD_ADDR_VAR 0 1
3240: PUSH
3241: CALL_OW 44
3245: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3246: LD_VAR 0 1
3250: PPUSH
3251: LD_INT 8
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: CALL_OW 12
3271: ARRAY
3272: PPUSH
3273: LD_INT 0
3275: PPUSH
3276: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3280: LD_ADDR_VAR 0 2
3284: PUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 29
3292: PPUSH
3293: CALL_OW 12
3297: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3298: LD_VAR 0 1
3302: PPUSH
3303: LD_EXP 29
3307: PUSH
3308: LD_VAR 0 2
3312: ARRAY
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PPUSH
3318: LD_EXP 29
3322: PUSH
3323: LD_VAR 0 2
3327: ARRAY
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: CALL_OW 158
// end ; end_of_file
3337: PPOPN 2
3339: END
// every 1 do
3340: GO 3342
3342: DISABLE
// begin InGameOn ;
3343: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3347: LD_INT 22
3349: PUSH
3350: LD_INT 1
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: LD_INT 21
3359: PUSH
3360: LD_INT 2
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 69
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3384: LD_INT 22
3386: PUSH
3387: LD_INT 1
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: LD_INT 21
3396: PUSH
3397: LD_INT 2
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PPUSH
3408: CALL_OW 69
3412: PPUSH
3413: LD_INT 69
3415: PPUSH
3416: LD_INT 94
3418: PPUSH
3419: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3423: LD_EXP 1
3427: PPUSH
3428: LD_STRING D2-JMM-1
3430: PPUSH
3431: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3435: LD_INT 22
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 1
3466: ARRAY
3467: PPUSH
3468: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3472: LD_EXP 2
3476: PPUSH
3477: LD_STRING D2-Huck-1
3479: PPUSH
3480: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3484: LD_INT 22
3486: PUSH
3487: LD_INT 1
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 21
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: PPUSH
3508: CALL_OW 69
3512: PUSH
3513: LD_INT 1
3515: ARRAY
3516: PPUSH
3517: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3521: LD_EXP 1
3525: PPUSH
3526: LD_STRING D2-JMM-2
3528: PPUSH
3529: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3533: LD_INT 22
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: PUSH
3543: LD_INT 21
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PPUSH
3557: CALL_OW 69
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: PPUSH
3566: CALL_OW 87
// InGameOff ;
3570: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3574: LD_STRING M1
3576: PPUSH
3577: CALL_OW 337
// SaveForQuickRestart ;
3581: CALL_OW 22
// end ;
3585: END
// every 10 10$0 do
3586: GO 3588
3588: DISABLE
// begin DialogueOn ;
3589: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3593: LD_EXP 15
3597: PPUSH
3598: LD_STRING D3-Pow-1
3600: PPUSH
3601: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3605: LD_EXP 1
3609: PPUSH
3610: LD_STRING D3-JMM-1
3612: PPUSH
3613: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3617: LD_EXP 15
3621: PPUSH
3622: LD_STRING D3-Pow-2
3624: PPUSH
3625: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3629: LD_EXP 1
3633: PPUSH
3634: LD_STRING D3-JMM-2
3636: PPUSH
3637: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3641: LD_EXP 15
3645: PPUSH
3646: LD_STRING D3-Pow-3
3648: PPUSH
3649: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3653: LD_EXP 1
3657: PPUSH
3658: LD_STRING D3-JMM-3
3660: PPUSH
3661: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3665: LD_EXP 15
3669: PPUSH
3670: LD_STRING D3-Pow-4
3672: PPUSH
3673: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_STRING D3-JMM-4
3684: PPUSH
3685: CALL_OW 88
// DialogueOff ;
3689: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3693: LD_STRING M2
3695: PPUSH
3696: CALL_OW 337
// wait ( 2 2$30 ) ;
3700: LD_INT 5250
3702: PPUSH
3703: CALL_OW 67
// PrepareBurlak ;
3707: CALL 1981 0 0
// BurlakArmy ;
3711: CALL 2127 0 0
// end ;
3715: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3716: LD_INT 1
3718: PPUSH
3719: LD_EXP 18
3723: PPUSH
3724: CALL_OW 292
3728: IFFALSE 3898
3730: GO 3732
3732: DISABLE
// begin DialogueOn ;
3733: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3737: LD_EXP 18
3741: PPUSH
3742: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3746: LD_INT 22
3748: PUSH
3749: LD_INT 1
3751: PUSH
3752: EMPTY
3753: LIST
3754: LIST
3755: PUSH
3756: LD_INT 26
3758: PUSH
3759: LD_INT 1
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: PUSH
3766: LD_INT 2
3768: PUSH
3769: LD_INT 25
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: EMPTY
3776: LIST
3777: LIST
3778: PUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 2
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 25
3791: PUSH
3792: LD_INT 3
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 25
3801: PUSH
3802: LD_INT 4
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 25
3811: PUSH
3812: LD_INT 5
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 8
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: PUSH
3838: EMPTY
3839: LIST
3840: LIST
3841: LIST
3842: PPUSH
3843: CALL_OW 69
3847: PPUSH
3848: LD_STRING D5-Sol1-1
3850: PPUSH
3851: LD_STRING D5-FSol1-1
3853: PPUSH
3854: CALL 5747 0 3
// Say ( JMM , D5-JMM-1 ) ;
3858: LD_EXP 1
3862: PPUSH
3863: LD_STRING D5-JMM-1
3865: PPUSH
3866: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3870: LD_EXP 17
3874: PPUSH
3875: LD_STRING DAmer-Bur-1
3877: PPUSH
3878: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3882: LD_EXP 1
3886: PPUSH
3887: LD_STRING DAmer-JMM-1
3889: PPUSH
3890: CALL_OW 88
// DialogueOff ;
3894: CALL_OW 7
// end ;
3898: END
// every 0 0$1 do var i ;
3899: GO 3901
3901: DISABLE
3902: LD_INT 0
3904: PPUSH
// begin enable ;
3905: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3906: LD_ADDR_VAR 0 1
3910: PUSH
3911: LD_INT 22
3913: PUSH
3914: LD_INT 7
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: PUSH
3926: FOR_IN
3927: IFFALSE 4163
// if IsInArea ( i , AllianceEscape ) then
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 4
3936: PPUSH
3937: CALL_OW 308
3941: IFFALSE 4161
// begin if i = Burlak or i = Masha then
3943: LD_VAR 0 1
3947: PUSH
3948: LD_EXP 17
3952: EQUAL
3953: PUSH
3954: LD_VAR 0 1
3958: PUSH
3959: LD_EXP 18
3963: EQUAL
3964: OR
3965: IFFALSE 4123
// begin RemoveUnit ( i ) ;
3967: LD_VAR 0 1
3971: PPUSH
3972: CALL_OW 64
// DialogueOn ;
3976: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3980: LD_EXP 1
3984: PPUSH
3985: LD_STRING D5a-JMM-1
3987: PPUSH
3988: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3992: LD_INT 22
3994: PUSH
3995: LD_INT 1
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 26
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 25
4017: PUSH
4018: LD_INT 1
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 25
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: EMPTY
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 25
4037: PUSH
4038: LD_INT 3
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 25
4047: PUSH
4048: LD_INT 4
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 25
4057: PUSH
4058: LD_INT 5
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: LD_INT 25
4067: PUSH
4068: LD_INT 8
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: LIST
4088: PPUSH
4089: CALL_OW 69
4093: PPUSH
4094: LD_STRING D5a-Sol1-1
4096: PPUSH
4097: LD_STRING D5-FSol1-1
4099: PPUSH
4100: CALL 5747 0 3
// DialogueOff ;
4104: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4108: LD_STRING M2b
4110: PPUSH
4111: CALL_OW 337
// spawnBurlak = 0 ;
4115: LD_ADDR_EXP 25
4119: PUSH
4120: LD_INT 0
4122: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 264
4132: PUSH
4133: LD_INT 49
4135: EQUAL
4136: IFFALSE 4152
// SetLives ( i , 1 ) else
4138: LD_VAR 0 1
4142: PPUSH
4143: LD_INT 1
4145: PPUSH
4146: CALL_OW 234
4150: GO 4161
// RemoveUnit ( i ) ;
4152: LD_VAR 0 1
4156: PPUSH
4157: CALL_OW 64
// end ;
4161: GO 3926
4163: POP
4164: POP
// end ;
4165: PPOPN 1
4167: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4168: LD_EXP 18
4172: PPUSH
4173: CALL_OW 256
4177: PUSH
4178: LD_INT 500
4180: LESS
4181: PUSH
4182: LD_EXP 18
4186: PPUSH
4187: CALL_OW 255
4191: PUSH
4192: LD_INT 7
4194: EQUAL
4195: AND
4196: IFFALSE 4216
4198: GO 4200
4200: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4201: LD_EXP 18
4205: PPUSH
4206: LD_INT 107
4208: PPUSH
4209: LD_INT 118
4211: PPUSH
4212: CALL_OW 111
4216: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4217: LD_EXP 17
4221: PPUSH
4222: CALL_OW 301
4226: PUSH
4227: LD_EXP 25
4231: PUSH
4232: LD_INT 1
4234: EQUAL
4235: AND
4236: IFFALSE 4307
4238: GO 4240
4240: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4241: LD_EXP 1
4245: PPUSH
4246: LD_STRING D5b-JMM-1
4248: PPUSH
4249: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D5b-Sol1-1 ,  ) ;
4253: LD_INT 22
4255: PUSH
4256: LD_INT 1
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 26
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: PPUSH
4282: LD_STRING D5b-Sol1-1
4284: PPUSH
4285: LD_STRING 
4287: PPUSH
4288: CALL 5747 0 3
// ChangeMissionObjectives ( M2a ) ;
4292: LD_STRING M2a
4294: PPUSH
4295: CALL_OW 337
// burlakStatus = 1 ;
4299: LD_ADDR_EXP 26
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// end ;
4307: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4308: LD_EXP 2
4312: PPUSH
4313: CALL_OW 301
4317: IFFALSE 4392
4319: GO 4321
4321: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4322: LD_EXP 1
4326: PPUSH
4327: LD_STRING D6-JMM-1
4329: PPUSH
4330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D6-Sol1-1 ,  ) ;
4334: LD_INT 22
4336: PUSH
4337: LD_INT 1
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: LD_INT 26
4346: PUSH
4347: LD_INT 1
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: PPUSH
4358: CALL_OW 69
4362: PPUSH
4363: LD_STRING D6-Sol1-1
4365: PPUSH
4366: LD_STRING 
4368: PPUSH
4369: CALL 5747 0 3
// Say ( JMM , D6-JMM-2 ) ;
4373: LD_EXP 1
4377: PPUSH
4378: LD_STRING D6-JMM-2
4380: PPUSH
4381: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4385: LD_STRING M1a
4387: PPUSH
4388: CALL_OW 337
// end ;
4392: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4393: LD_INT 25
4395: PPUSH
4396: LD_INT 1
4398: PPUSH
4399: CALL_OW 321
4403: PUSH
4404: LD_INT 2
4406: EQUAL
4407: IFFALSE 4424
4409: GO 4411
4411: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4412: LD_EXP 2
4416: PPUSH
4417: LD_STRING D6-Huck-2
4419: PPUSH
4420: CALL_OW 88
// end ;
4424: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4425: LD_INT 22
4427: PUSH
4428: LD_INT 1
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: LD_INT 34
4440: PUSH
4441: LD_INT 8
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 35
4450: PUSH
4451: LD_INT 8
4453: PUSH
4454: EMPTY
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PPUSH
4467: CALL_OW 69
4471: PUSH
4472: LD_INT 0
4474: GREATER
4475: IFFALSE 4659
4477: GO 4479
4479: DISABLE
4480: LD_INT 0
4482: PPUSH
4483: PPUSH
// begin enable ;
4484: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4485: LD_ADDR_VAR 0 1
4489: PUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 22
4495: PUSH
4496: LD_INT 1
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 21
4505: PUSH
4506: LD_INT 3
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: LD_INT 30
4515: PUSH
4516: LD_INT 1
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 3
4525: PUSH
4526: LD_INT 57
4528: PUSH
4529: EMPTY
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 70
4546: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4547: LD_ADDR_VAR 0 2
4551: PUSH
4552: LD_INT 5
4554: PPUSH
4555: LD_INT 22
4557: PUSH
4558: LD_INT 1
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_INT 21
4567: PUSH
4568: LD_INT 3
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 30
4577: PUSH
4578: LD_INT 5
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 3
4587: PUSH
4588: LD_INT 57
4590: PUSH
4591: EMPTY
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 70
4608: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4609: LD_VAR 0 1
4613: PUSH
4614: LD_INT 0
4616: GREATER
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: LD_INT 0
4625: GREATER
4626: AND
4627: IFFALSE 4659
// begin disable ;
4629: DISABLE
// Say ( JMM , D7-JMM-1 ) ;
4630: LD_EXP 1
4634: PPUSH
4635: LD_STRING D7-JMM-1
4637: PPUSH
4638: CALL_OW 88
// ChangeMissionObjectives ( M4 ) ;
4642: LD_STRING M4
4644: PPUSH
4645: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4649: LD_INT 5
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: CALL_OW 424
// end ; end ;
4659: PPOPN 2
4661: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4662: LD_INT 6
4664: PPUSH
4665: LD_INT 22
4667: PUSH
4668: LD_INT 1
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: PUSH
4675: LD_INT 25
4677: PUSH
4678: LD_INT 4
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PPUSH
4689: CALL_OW 70
4693: PUSH
4694: LD_INT 0
4696: GREATER
4697: PUSH
4698: LD_EXP 36
4702: PUSH
4703: LD_INT 1
4705: EQUAL
4706: AND
4707: PUSH
4708: LD_EXP 27
4712: PUSH
4713: LD_INT 0
4715: EQUAL
4716: AND
4717: IFFALSE 4782
4719: GO 4721
4721: DISABLE
// begin enable ;
4722: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4723: LD_ADDR_EXP 24
4727: PUSH
4728: LD_INT 6
4730: PPUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 1
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 25
4743: PUSH
4744: LD_INT 4
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PPUSH
4755: CALL_OW 70
4759: PUSH
4760: LD_INT 1
4762: ARRAY
4763: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4764: LD_INT 6
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 424
// radationResearched = 1 ;
4774: LD_ADDR_EXP 27
4778: PUSH
4779: LD_INT 1
4781: ST_TO_ADDR
// end ;
4782: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4783: LD_EXP 24
4787: PPUSH
4788: CALL_OW 301
4792: PUSH
4793: LD_EXP 27
4797: PUSH
4798: LD_INT 1
4800: EQUAL
4801: AND
4802: IFFALSE 4838
4804: GO 4806
4806: DISABLE
// begin enable ;
4807: ENABLE
// radationResearched = 0 ;
4808: LD_ADDR_EXP 27
4812: PUSH
4813: LD_INT 0
4815: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4816: LD_INT 6
4818: PPUSH
4819: LD_INT 1
4821: PPUSH
4822: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4826: LD_EXP 1
4830: PPUSH
4831: LD_STRING D9a-JMM-1
4833: PPUSH
4834: CALL_OW 88
// end ; end_of_file
4838: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4839: LD_VAR 0 5
4843: PUSH
4844: LD_INT 8
4846: EQUAL
4847: PUSH
4848: LD_EXP 34
4852: PUSH
4853: LD_INT 0
4855: EQUAL
4856: AND
4857: IFFALSE 4910
// begin eventVar1 = 1 ;
4859: LD_ADDR_EXP 34
4863: PUSH
4864: LD_INT 1
4866: ST_TO_ADDR
// DialogueOn ;
4867: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4871: LD_EXP 1
4875: PPUSH
4876: LD_STRING D6a-JMM-1
4878: PPUSH
4879: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4883: LD_EXP 15
4887: PPUSH
4888: LD_STRING D6a-Pow-1
4890: PPUSH
4891: CALL_OW 94
// DialogueOff ;
4895: CALL_OW 7
// wait ( 3 3$0 ) ;
4899: LD_INT 6300
4901: PPUSH
4902: CALL_OW 67
// PowellSupport ;
4906: CALL 1781 0 0
// end ; end ;
4910: PPOPN 5
4912: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
4913: LD_VAR 0 1
4917: PPUSH
4918: CALL_OW 264
4922: PUSH
4923: LD_INT 8
4925: EQUAL
4926: PUSH
4927: LD_EXP 35
4931: PUSH
4932: LD_INT 0
4934: EQUAL
4935: AND
4936: IFFALSE 5005
// begin eventVar2 = 1 ;
4938: LD_ADDR_EXP 35
4942: PUSH
4943: LD_INT 1
4945: ST_TO_ADDR
// DialogueOn ;
4946: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
4950: LD_EXP 1
4954: PPUSH
4955: LD_STRING D6b-JMM-1
4957: PPUSH
4958: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
4962: LD_EXP 15
4966: PPUSH
4967: LD_STRING D6b-Pow-1
4969: PPUSH
4970: CALL_OW 94
// DialogueOff ;
4974: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
4978: LD_INT 5
4980: PPUSH
4981: LD_INT 1
4983: PPUSH
4984: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
4988: LD_INT 7
4990: PPUSH
4991: LD_INT 1
4993: PPUSH
4994: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
4998: LD_STRING M3
5000: PPUSH
5001: CALL_OW 337
// end ; end ;
5005: PPOPN 2
5007: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5008: LD_VAR 0 2
5012: PPUSH
5013: LD_VAR 0 3
5017: PPUSH
5018: LD_INT 5
5020: PPUSH
5021: CALL_OW 309
5025: PUSH
5026: LD_EXP 36
5030: PUSH
5031: LD_INT 0
5033: EQUAL
5034: AND
5035: IFFALSE 5246
// begin eventVar3 = 1 ;
5037: LD_ADDR_EXP 36
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5045: LD_INT 7
5047: PPUSH
5048: LD_INT 22
5050: PUSH
5051: LD_INT 1
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: PUSH
5058: LD_INT 21
5060: PUSH
5061: LD_INT 2
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 34
5070: PUSH
5071: LD_INT 11
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: PPUSH
5083: CALL_OW 70
5087: PUSH
5088: LD_INT 0
5090: GREATER
5091: IFFALSE 5110
// begin radarOnSpot = 1 ;
5093: LD_ADDR_EXP 28
5097: PUSH
5098: LD_INT 1
5100: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5101: LD_STRING M3a
5103: PPUSH
5104: CALL_OW 337
// end else
5108: GO 5117
// begin ChangeMissionObjectives ( M3b ) ;
5110: LD_STRING M3b
5112: PPUSH
5113: CALL_OW 337
// end ; DialogueOn ;
5117: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5121: LD_EXP 2
5125: PPUSH
5126: LD_STRING D8-Huck-1
5128: PPUSH
5129: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5133: LD_EXP 1
5137: PPUSH
5138: LD_STRING D8-JMM-1
5140: PPUSH
5141: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5145: LD_EXP 2
5149: PPUSH
5150: LD_STRING D8-Huck-2
5152: PPUSH
5153: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5157: LD_EXP 1
5161: PPUSH
5162: LD_STRING D8-JMM-2
5164: PPUSH
5165: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5169: LD_EXP 2
5173: PPUSH
5174: LD_STRING D8-Huck-3
5176: PPUSH
5177: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5181: LD_EXP 1
5185: PPUSH
5186: LD_STRING D8-JMM-3
5188: PPUSH
5189: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5193: LD_EXP 2
5197: PPUSH
5198: LD_STRING D8-Huck-4
5200: PPUSH
5201: CALL_OW 88
// DialogueOff ;
5205: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5209: LD_INT 5
5211: PPUSH
5212: LD_INT 0
5214: PPUSH
5215: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5219: LD_INT 7
5221: PPUSH
5222: LD_INT 0
5224: PPUSH
5225: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5229: LD_INT 6
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5239: LD_STRING M5
5241: PPUSH
5242: CALL_OW 337
// end ; end ;
5246: PPOPN 3
5248: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5249: LD_EXP 24
5253: PPUSH
5254: CALL_OW 302
5258: PUSH
5259: LD_VAR 0 2
5263: PUSH
5264: LD_EXP 24
5268: EQUAL
5269: AND
5270: PUSH
5271: LD_EXP 37
5275: PUSH
5276: LD_INT 0
5278: EQUAL
5279: AND
5280: PUSH
5281: LD_VAR 0 1
5285: PPUSH
5286: LD_INT 1
5288: PPUSH
5289: CALL_OW 268
5293: PUSH
5294: LD_INT 11
5296: EQUAL
5297: AND
5298: PUSH
5299: LD_VAR 0 1
5303: PPUSH
5304: LD_INT 2
5306: PPUSH
5307: CALL_OW 268
5311: PUSH
5312: LD_INT 11
5314: EQUAL
5315: OR
5316: IFFALSE 5326
// eventVar4 = 1 ;
5318: LD_ADDR_EXP 37
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// end ;
5326: PPOPN 2
5328: END
// on SibDepositContaminated ( unit , x , y ) do var i ;
5329: LD_INT 0
5331: PPUSH
// begin if GetNation ( unit ) = 2 then
5332: LD_VAR 0 1
5336: PPUSH
5337: CALL_OW 248
5341: PUSH
5342: LD_INT 2
5344: EQUAL
5345: IFFALSE 5579
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5347: LD_ADDR_EXP 30
5351: PUSH
5352: LD_EXP 30
5356: PUSH
5357: LD_INT 1
5359: PLUS
5360: ST_TO_ADDR
// for i := 1 to sibDeposits do
5361: LD_ADDR_VAR 0 4
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_EXP 29
5375: PUSH
5376: FOR_TO
5377: IFFALSE 5467
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5379: LD_EXP 29
5383: PUSH
5384: LD_VAR 0 4
5388: ARRAY
5389: PUSH
5390: LD_INT 1
5392: ARRAY
5393: PUSH
5394: LD_VAR 0 2
5398: EQUAL
5399: PUSH
5400: LD_EXP 29
5404: PUSH
5405: LD_VAR 0 4
5409: ARRAY
5410: PUSH
5411: LD_INT 2
5413: ARRAY
5414: PUSH
5415: LD_VAR 0 3
5419: EQUAL
5420: AND
5421: IFFALSE 5465
// sibDeposits = sibDeposits diff sibDeposits [ i ] [ 1 ] ^ sibDeposits [ i ] [ 2 ] ;
5423: LD_ADDR_EXP 29
5427: PUSH
5428: LD_EXP 29
5432: PUSH
5433: LD_EXP 29
5437: PUSH
5438: LD_VAR 0 4
5442: ARRAY
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PUSH
5448: LD_EXP 29
5452: PUSH
5453: LD_VAR 0 4
5457: ARRAY
5458: PUSH
5459: LD_INT 2
5461: ARRAY
5462: ADD
5463: DIFF
5464: ST_TO_ADDR
5465: GO 5376
5467: POP
5468: POP
// if eventVar5 = 0 then
5469: LD_EXP 38
5473: PUSH
5474: LD_INT 0
5476: EQUAL
5477: IFFALSE 5579
// begin eventVar5 = 1 ;
5479: LD_ADDR_EXP 38
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// DialogueOn ;
5487: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5491: LD_EXP 2
5495: PPUSH
5496: LD_STRING D4-Sci1-1
5498: PPUSH
5499: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5503: LD_EXP 1
5507: PPUSH
5508: LD_STRING D4-JMM-1
5510: PPUSH
5511: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5515: LD_EXP 2
5519: PPUSH
5520: LD_STRING D4-Sci1-2
5522: PPUSH
5523: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5527: LD_EXP 1
5531: PPUSH
5532: LD_STRING D4-JMM-2
5534: PPUSH
5535: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5539: LD_EXP 2
5543: PPUSH
5544: LD_STRING D4-Sci1-3
5546: PPUSH
5547: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5551: LD_EXP 1
5555: PPUSH
5556: LD_STRING D4-JMM-3
5558: PPUSH
5559: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5563: LD_EXP 1
5567: PPUSH
5568: LD_STRING D4-JMM-3a
5570: PPUSH
5571: CALL_OW 88
// DialogueOff ;
5575: CALL_OW 7
// end ; end ; end ;
5579: PPOPN 4
5581: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) > 0 then
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 255
5591: PUSH
5592: LD_INT 1
5594: EQUAL
5595: PUSH
5596: LD_VAR 0 1
5600: PPUSH
5601: CALL_OW 266
5605: PUSH
5606: LD_INT 0
5608: EQUAL
5609: AND
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 21
5623: PUSH
5624: LD_INT 3
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: LD_INT 30
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 30
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: LIST
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: LIST
5663: PPUSH
5664: CALL_OW 69
5668: PUSH
5669: LD_INT 0
5671: GREATER
5672: AND
5673: IFFALSE 5687
// SetBName ( building , omega ) ;
5675: LD_VAR 0 1
5679: PPUSH
5680: LD_STRING omega
5682: PPUSH
5683: CALL_OW 500
// end ; end_of_file
5687: PPOPN 2
5689: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5690: LD_INT 0
5692: PPUSH
5693: PPUSH
// if exist_mode then
5694: LD_VAR 0 2
5698: IFFALSE 5717
// unit := CreateCharacter ( ident ) else
5700: LD_ADDR_VAR 0 4
5704: PUSH
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 34
5714: ST_TO_ADDR
5715: GO 5732
// unit := NewCharacter ( ident ) ;
5717: LD_ADDR_VAR 0 4
5721: PUSH
5722: LD_VAR 0 1
5726: PPUSH
5727: CALL_OW 25
5731: ST_TO_ADDR
// result := unit ;
5732: LD_ADDR_VAR 0 3
5736: PUSH
5737: LD_VAR 0 4
5741: ST_TO_ADDR
// end ;
5742: LD_VAR 0 3
5746: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5747: LD_INT 0
5749: PPUSH
5750: PPUSH
5751: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5752: LD_ADDR_VAR 0 1
5756: PUSH
5757: LD_VAR 0 1
5761: PUSH
5762: LD_EXP 1
5766: PUSH
5767: LD_EXP 2
5771: PUSH
5772: LD_EXP 3
5776: PUSH
5777: LD_EXP 4
5781: PUSH
5782: LD_EXP 5
5786: PUSH
5787: LD_EXP 6
5791: PUSH
5792: LD_EXP 7
5796: PUSH
5797: LD_EXP 8
5801: PUSH
5802: LD_EXP 9
5806: PUSH
5807: LD_EXP 10
5811: PUSH
5812: LD_EXP 11
5816: PUSH
5817: LD_EXP 12
5821: PUSH
5822: LD_EXP 13
5826: PUSH
5827: LD_EXP 14
5831: PUSH
5832: LD_EXP 15
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: DIFF
5854: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
5855: LD_ADDR_VAR 0 6
5859: PUSH
5860: LD_INT 1
5862: PPUSH
5863: LD_VAR 0 1
5867: PPUSH
5868: CALL_OW 12
5872: ST_TO_ADDR
// for i = 1 to characters do
5873: LD_ADDR_VAR 0 5
5877: PUSH
5878: DOUBLE
5879: LD_INT 1
5881: DEC
5882: ST_TO_ADDR
5883: LD_VAR 0 1
5887: PUSH
5888: FOR_TO
5889: IFFALSE 5999
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5891: LD_VAR 0 5
5895: PUSH
5896: LD_VAR 0 6
5900: EQUAL
5901: PUSH
5902: LD_VAR 0 1
5906: PUSH
5907: LD_VAR 0 5
5911: ARRAY
5912: PPUSH
5913: CALL_OW 258
5917: PUSH
5918: LD_INT 1
5920: EQUAL
5921: AND
5922: IFFALSE 5944
// Say ( characters [ i ] , dialogMID ) ;
5924: LD_VAR 0 1
5928: PUSH
5929: LD_VAR 0 5
5933: ARRAY
5934: PPUSH
5935: LD_VAR 0 2
5939: PPUSH
5940: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5944: LD_VAR 0 5
5948: PUSH
5949: LD_VAR 0 6
5953: EQUAL
5954: PUSH
5955: LD_VAR 0 1
5959: PUSH
5960: LD_VAR 0 5
5964: ARRAY
5965: PPUSH
5966: CALL_OW 258
5970: PUSH
5971: LD_INT 2
5973: EQUAL
5974: AND
5975: IFFALSE 5997
// Say ( characters [ i ] , dialogFID ) ;
5977: LD_VAR 0 1
5981: PUSH
5982: LD_VAR 0 5
5986: ARRAY
5987: PPUSH
5988: LD_VAR 0 3
5992: PPUSH
5993: CALL_OW 88
// end ;
5997: GO 5888
5999: POP
6000: POP
// end ;
6001: LD_VAR 0 4
6005: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6006: LD_INT 0
6008: PPUSH
6009: PPUSH
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6014: LD_ADDR_VAR 0 7
6018: PUSH
6019: LD_INT 22
6021: PUSH
6022: LD_VAR 0 1
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 25
6033: PUSH
6034: LD_INT 9
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL_OW 69
6049: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6050: LD_ADDR_VAR 0 8
6054: PUSH
6055: LD_INT 22
6057: PUSH
6058: LD_VAR 0 2
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: LD_INT 21
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6093: LD_ADDR_VAR 0 5
6097: PUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 3
6103: PPUSH
6104: CALL_OW 12
6108: ST_TO_ADDR
// for i = 1 to list do
6109: LD_ADDR_VAR 0 6
6113: PUSH
6114: DOUBLE
6115: LD_INT 1
6117: DEC
6118: ST_TO_ADDR
6119: LD_VAR 0 7
6123: PUSH
6124: FOR_TO
6125: IFFALSE 6307
// for ta in filter do
6127: LD_ADDR_VAR 0 4
6131: PUSH
6132: LD_VAR 0 8
6136: PUSH
6137: FOR_IN
6138: IFFALSE 6303
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6140: LD_VAR 0 7
6144: PUSH
6145: LD_VAR 0 6
6149: ARRAY
6150: PPUSH
6151: LD_VAR 0 4
6155: PPUSH
6156: CALL_OW 296
6160: PUSH
6161: LD_INT 13
6163: LESSEQUAL
6164: IFFALSE 6301
// begin case c of 1 :
6166: LD_VAR 0 5
6170: PUSH
6171: LD_INT 1
6173: DOUBLE
6174: EQUAL
6175: IFTRUE 6179
6177: GO 6217
6179: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6180: LD_VAR 0 7
6184: PUSH
6185: LD_VAR 0 6
6189: ARRAY
6190: PPUSH
6191: LD_VAR 0 4
6195: PPUSH
6196: CALL_OW 250
6200: PPUSH
6201: LD_VAR 0 4
6205: PPUSH
6206: CALL_OW 251
6210: PPUSH
6211: CALL_OW 154
6215: GO 6301
6217: LD_INT 2
6219: DOUBLE
6220: EQUAL
6221: IFTRUE 6225
6223: GO 6289
6225: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6226: LD_VAR 0 7
6230: PUSH
6231: LD_VAR 0 6
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: CALL_OW 250
6246: PUSH
6247: LD_INT 1
6249: NEG
6250: PPUSH
6251: LD_INT 1
6253: PPUSH
6254: CALL_OW 12
6258: PLUS
6259: PPUSH
6260: LD_VAR 0 4
6264: PPUSH
6265: CALL_OW 251
6269: PUSH
6270: LD_INT 1
6272: NEG
6273: PPUSH
6274: LD_INT 1
6276: PPUSH
6277: CALL_OW 12
6281: PLUS
6282: PPUSH
6283: CALL_OW 153
6287: GO 6301
6289: LD_INT 3
6291: DOUBLE
6292: EQUAL
6293: IFTRUE 6297
6295: GO 6300
6297: POP
// ; end ;
6298: GO 6301
6300: POP
// end ; end ;
6301: GO 6137
6303: POP
6304: POP
6305: GO 6124
6307: POP
6308: POP
// end ;
6309: LD_VAR 0 3
6313: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6314: LD_INT 0
6316: PPUSH
6317: PPUSH
// for i in charactersList do
6318: LD_ADDR_VAR 0 4
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6358
// begin if IsOk ( i ) then
6331: LD_VAR 0 4
6335: PPUSH
6336: CALL_OW 302
6340: IFFALSE 6356
// SaveCharacters ( i , ident ) ;
6342: LD_VAR 0 4
6346: PPUSH
6347: LD_VAR 0 2
6351: PPUSH
6352: CALL_OW 38
// end ;
6356: GO 6328
6358: POP
6359: POP
// end ;
6360: LD_VAR 0 3
6364: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
6365: LD_INT 0
6367: PPUSH
6368: PPUSH
6369: PPUSH
6370: PPUSH
6371: PPUSH
6372: PPUSH
6373: PPUSH
6374: PPUSH
6375: PPUSH
6376: PPUSH
6377: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6378: LD_ADDR_VAR 0 9
6382: PUSH
6383: LD_INT 22
6385: PUSH
6386: LD_VAR 0 1
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 21
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 33
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 24
6417: PUSH
6418: LD_INT 660
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 58
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: LD_INT 34
6443: PUSH
6444: LD_INT 53
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 69
6467: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
6468: LD_ADDR_VAR 0 10
6472: PUSH
6473: LD_INT 22
6475: PUSH
6476: LD_VAR 0 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 2
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 33
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 3
6507: PUSH
6508: LD_INT 24
6510: PUSH
6511: LD_INT 660
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6533: LD_ADDR_VAR 0 11
6537: PUSH
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_INT 22
6545: PUSH
6546: LD_VAR 0 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 21
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 33
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 24
6580: PUSH
6581: LD_INT 1000
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 70
6602: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , 1 ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
6603: LD_ADDR_VAR 0 12
6607: PUSH
6608: LD_VAR 0 2
6612: PPUSH
6613: LD_INT 22
6615: PUSH
6616: LD_VAR 0 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 33
6637: PUSH
6638: LD_INT 1
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 24
6647: PUSH
6648: LD_INT 1000
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 58
6657: PUSH
6658: EMPTY
6659: LIST
6660: PUSH
6661: LD_INT 3
6663: PUSH
6664: LD_INT 34
6666: PUSH
6667: LD_INT 53
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 70
6690: ST_TO_ADDR
// mechanicInside_list = [ ] ;
6691: LD_ADDR_VAR 0 13
6695: PUSH
6696: EMPTY
6697: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
6698: LD_ADDR_VAR 0 14
6702: PUSH
6703: LD_VAR 0 2
6707: PPUSH
6708: LD_INT 22
6710: PUSH
6711: LD_VAR 0 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 25
6722: PUSH
6723: LD_INT 3
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PPUSH
6734: CALL_OW 70
6738: ST_TO_ADDR
// if damageVehicle_list > 0 then
6739: LD_VAR 0 10
6743: PUSH
6744: LD_INT 0
6746: GREATER
6747: IFFALSE 6785
// begin for i in damageVehicle_list do
6749: LD_ADDR_VAR 0 7
6753: PUSH
6754: LD_VAR 0 10
6758: PUSH
6759: FOR_IN
6760: IFFALSE 6783
// begin ComMoveXY ( i , repX , repY ) ;
6762: LD_VAR 0 7
6766: PPUSH
6767: LD_VAR 0 3
6771: PPUSH
6772: LD_VAR 0 4
6776: PPUSH
6777: CALL_OW 111
// end ;
6781: GO 6759
6783: POP
6784: POP
// end ; if vehicleNeedRepair_list > 0 then
6785: LD_VAR 0 11
6789: PUSH
6790: LD_INT 0
6792: GREATER
6793: IFFALSE 6880
// begin for i in vehicleNeedRepair_list do
6795: LD_ADDR_VAR 0 7
6799: PUSH
6800: LD_VAR 0 11
6804: PUSH
6805: FOR_IN
6806: IFFALSE 6878
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
6808: LD_ADDR_VAR 0 13
6812: PUSH
6813: LD_VAR 0 13
6817: PUSH
6818: LD_VAR 0 7
6822: PPUSH
6823: CALL_OW 313
6827: ADD
6828: ST_TO_ADDR
// for j in mechanicInside_list do
6829: LD_ADDR_VAR 0 8
6833: PUSH
6834: LD_VAR 0 13
6838: PUSH
6839: FOR_IN
6840: IFFALSE 6874
// begin ComExitVehicle ( i ) ;
6842: LD_VAR 0 7
6846: PPUSH
6847: CALL_OW 121
// wait ( 0 0$1 ) ;
6851: LD_INT 35
6853: PPUSH
6854: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
6858: LD_VAR 0 7
6862: PPUSH
6863: LD_VAR 0 8
6867: PPUSH
6868: CALL_OW 129
// end ;
6872: GO 6839
6874: POP
6875: POP
// end ;
6876: GO 6805
6878: POP
6879: POP
// end ; if vehicleDontNeedRepair_list > 0 then
6880: LD_VAR 0 12
6884: PUSH
6885: LD_INT 0
6887: GREATER
6888: IFFALSE 6928
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
6890: LD_VAR 0 14
6894: PUSH
6895: LD_INT 1
6897: ARRAY
6898: PPUSH
6899: LD_VAR 0 12
6903: PUSH
6904: LD_INT 1
6906: ARRAY
6907: PPUSH
6908: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
6912: LD_VAR 0 12
6916: PUSH
6917: LD_INT 1
6919: ARRAY
6920: PPUSH
6921: LD_INT 100
6923: PPUSH
6924: CALL_OW 240
// end ; if vehicleOK_list > 0 then
6928: LD_VAR 0 9
6932: PUSH
6933: LD_INT 0
6935: GREATER
6936: IFFALSE 7127
// begin for i in vehicleOK_list do
6938: LD_ADDR_VAR 0 7
6942: PUSH
6943: LD_VAR 0 9
6947: PUSH
6948: FOR_IN
6949: IFFALSE 7125
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6951: LD_ADDR_VAR 0 15
6955: PUSH
6956: LD_INT 22
6958: PUSH
6959: LD_VAR 0 5
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: PPUSH
6973: LD_VAR 0 7
6977: PPUSH
6978: CALL_OW 74
6982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6983: LD_ADDR_VAR 0 16
6987: PUSH
6988: LD_INT 22
6990: PUSH
6991: LD_VAR 0 5
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 59
7005: PUSH
7006: EMPTY
7007: LIST
7008: PUSH
7009: LD_INT 21
7011: PUSH
7012: LD_INT 1
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 21
7021: PUSH
7022: LD_INT 2
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: PPUSH
7042: CALL_OW 69
7046: PPUSH
7047: LD_VAR 0 7
7051: PPUSH
7052: CALL_OW 74
7056: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7057: LD_VAR 0 7
7061: PPUSH
7062: LD_VAR 0 15
7066: PPUSH
7067: CALL_OW 296
7071: PUSH
7072: LD_INT 8
7074: PLUS
7075: PUSH
7076: LD_VAR 0 7
7080: PPUSH
7081: LD_VAR 0 16
7085: PPUSH
7086: CALL_OW 296
7090: LESS
7091: IFFALSE 7109
// begin ComAttackUnit ( i , target1 ) ;
7093: LD_VAR 0 7
7097: PPUSH
7098: LD_VAR 0 15
7102: PPUSH
7103: CALL_OW 115
// end else
7107: GO 7123
// begin ComAttackUnit ( i , target2 ) ;
7109: LD_VAR 0 7
7113: PPUSH
7114: LD_VAR 0 16
7118: PPUSH
7119: CALL_OW 115
// end ; end ;
7123: GO 6948
7125: POP
7126: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
7127: LD_ADDR_VAR 0 7
7131: PUSH
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_INT 22
7139: PUSH
7140: LD_VAR 0 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 3
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PPUSH
7163: CALL_OW 70
7167: NOT
7168: PUSH
7169: FOR_IN
7170: IFFALSE 7193
// ComMoveXY ( i , repX , repY ) ;
7172: LD_VAR 0 7
7176: PPUSH
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_VAR 0 4
7186: PPUSH
7187: CALL_OW 111
7191: GO 7169
7193: POP
7194: POP
// end ;
7195: LD_VAR 0 6
7199: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7200: LD_INT 0
7202: PPUSH
7203: PPUSH
7204: PPUSH
7205: PPUSH
7206: PPUSH
7207: PPUSH
7208: PPUSH
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
7213: LD_INT 2100
7215: PUSH
7216: LD_INT 3150
7218: PUSH
7219: LD_INT 4200
7221: PUSH
7222: LD_INT 5250
7224: PUSH
7225: LD_INT 6300
7227: PUSH
7228: LD_INT 7350
7230: PUSH
7231: LD_INT 8400
7233: PUSH
7234: LD_INT 9450
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 1
7249: PPUSH
7250: LD_INT 8
7252: PPUSH
7253: CALL_OW 12
7257: ARRAY
7258: PPUSH
7259: CALL_OW 67
// for i = 1 to medicCount do
7263: LD_ADDR_VAR 0 13
7267: PUSH
7268: DOUBLE
7269: LD_INT 1
7271: DEC
7272: ST_TO_ADDR
7273: LD_VAR 0 7
7277: PUSH
7278: FOR_TO
7279: IFFALSE 7361
// begin uc_side = side ;
7281: LD_ADDR_OWVAR 20
7285: PUSH
7286: LD_VAR 0 1
7290: ST_TO_ADDR
// uc_nation = nation ;
7291: LD_ADDR_OWVAR 21
7295: PUSH
7296: LD_VAR 0 2
7300: ST_TO_ADDR
// hc_name =  ;
7301: LD_ADDR_OWVAR 26
7305: PUSH
7306: LD_STRING 
7308: ST_TO_ADDR
// hc_gallery =  ;
7309: LD_ADDR_OWVAR 33
7313: PUSH
7314: LD_STRING 
7316: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7317: LD_INT 0
7319: PPUSH
7320: LD_INT 4
7322: PPUSH
7323: LD_VAR 0 8
7327: PPUSH
7328: CALL_OW 380
// un = CreateHuman ;
7332: LD_ADDR_VAR 0 15
7336: PUSH
7337: CALL_OW 44
7341: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7342: LD_VAR 0 15
7346: PPUSH
7347: LD_VAR 0 9
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: CALL_OW 49
// end ;
7359: GO 7278
7361: POP
7362: POP
// for i = 1 to soldierCount do
7363: LD_ADDR_VAR 0 13
7367: PUSH
7368: DOUBLE
7369: LD_INT 1
7371: DEC
7372: ST_TO_ADDR
7373: LD_VAR 0 3
7377: PUSH
7378: FOR_TO
7379: IFFALSE 7461
// begin uc_side = side ;
7381: LD_ADDR_OWVAR 20
7385: PUSH
7386: LD_VAR 0 1
7390: ST_TO_ADDR
// uc_nation = nation ;
7391: LD_ADDR_OWVAR 21
7395: PUSH
7396: LD_VAR 0 2
7400: ST_TO_ADDR
// hc_name =  ;
7401: LD_ADDR_OWVAR 26
7405: PUSH
7406: LD_STRING 
7408: ST_TO_ADDR
// hc_gallery =  ;
7409: LD_ADDR_OWVAR 33
7413: PUSH
7414: LD_STRING 
7416: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7417: LD_INT 0
7419: PPUSH
7420: LD_INT 1
7422: PPUSH
7423: LD_VAR 0 8
7427: PPUSH
7428: CALL_OW 380
// un = CreateHuman ;
7432: LD_ADDR_VAR 0 15
7436: PUSH
7437: CALL_OW 44
7441: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7442: LD_VAR 0 15
7446: PPUSH
7447: LD_VAR 0 9
7451: PPUSH
7452: LD_INT 0
7454: PPUSH
7455: CALL_OW 49
// end ;
7459: GO 7378
7461: POP
7462: POP
// for i = 1 to sniperCount do
7463: LD_ADDR_VAR 0 13
7467: PUSH
7468: DOUBLE
7469: LD_INT 1
7471: DEC
7472: ST_TO_ADDR
7473: LD_VAR 0 4
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7561
// begin uc_side = side ;
7481: LD_ADDR_OWVAR 20
7485: PUSH
7486: LD_VAR 0 1
7490: ST_TO_ADDR
// uc_nation = nation ;
7491: LD_ADDR_OWVAR 21
7495: PUSH
7496: LD_VAR 0 2
7500: ST_TO_ADDR
// hc_name =  ;
7501: LD_ADDR_OWVAR 26
7505: PUSH
7506: LD_STRING 
7508: ST_TO_ADDR
// hc_gallery =  ;
7509: LD_ADDR_OWVAR 33
7513: PUSH
7514: LD_STRING 
7516: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7517: LD_INT 0
7519: PPUSH
7520: LD_INT 5
7522: PPUSH
7523: LD_VAR 0 8
7527: PPUSH
7528: CALL_OW 380
// un = CreateHuman ;
7532: LD_ADDR_VAR 0 15
7536: PUSH
7537: CALL_OW 44
7541: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7542: LD_VAR 0 15
7546: PPUSH
7547: LD_VAR 0 9
7551: PPUSH
7552: LD_INT 0
7554: PPUSH
7555: CALL_OW 49
// end ;
7559: GO 7478
7561: POP
7562: POP
// for i = 1 to bazookCount do
7563: LD_ADDR_VAR 0 13
7567: PUSH
7568: DOUBLE
7569: LD_INT 1
7571: DEC
7572: ST_TO_ADDR
7573: LD_VAR 0 5
7577: PUSH
7578: FOR_TO
7579: IFFALSE 7661
// begin uc_side = side ;
7581: LD_ADDR_OWVAR 20
7585: PUSH
7586: LD_VAR 0 1
7590: ST_TO_ADDR
// uc_nation = nation ;
7591: LD_ADDR_OWVAR 21
7595: PUSH
7596: LD_VAR 0 2
7600: ST_TO_ADDR
// hc_name =  ;
7601: LD_ADDR_OWVAR 26
7605: PUSH
7606: LD_STRING 
7608: ST_TO_ADDR
// hc_gallery =  ;
7609: LD_ADDR_OWVAR 33
7613: PUSH
7614: LD_STRING 
7616: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7617: LD_INT 0
7619: PPUSH
7620: LD_INT 9
7622: PPUSH
7623: LD_VAR 0 8
7627: PPUSH
7628: CALL_OW 380
// un = CreateHuman ;
7632: LD_ADDR_VAR 0 15
7636: PUSH
7637: CALL_OW 44
7641: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7642: LD_VAR 0 15
7646: PPUSH
7647: LD_VAR 0 9
7651: PPUSH
7652: LD_INT 0
7654: PPUSH
7655: CALL_OW 49
// end ;
7659: GO 7578
7661: POP
7662: POP
// for i = 1 to mortalCount do
7663: LD_ADDR_VAR 0 13
7667: PUSH
7668: DOUBLE
7669: LD_INT 1
7671: DEC
7672: ST_TO_ADDR
7673: LD_VAR 0 6
7677: PUSH
7678: FOR_TO
7679: IFFALSE 7761
// begin uc_side = side ;
7681: LD_ADDR_OWVAR 20
7685: PUSH
7686: LD_VAR 0 1
7690: ST_TO_ADDR
// uc_nation = nation ;
7691: LD_ADDR_OWVAR 21
7695: PUSH
7696: LD_VAR 0 2
7700: ST_TO_ADDR
// hc_name =  ;
7701: LD_ADDR_OWVAR 26
7705: PUSH
7706: LD_STRING 
7708: ST_TO_ADDR
// hc_gallery =  ;
7709: LD_ADDR_OWVAR 33
7713: PUSH
7714: LD_STRING 
7716: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7717: LD_INT 0
7719: PPUSH
7720: LD_INT 8
7722: PPUSH
7723: LD_VAR 0 8
7727: PPUSH
7728: CALL_OW 380
// un = CreateHuman ;
7732: LD_ADDR_VAR 0 15
7736: PUSH
7737: CALL_OW 44
7741: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7742: LD_VAR 0 15
7746: PPUSH
7747: LD_VAR 0 9
7751: PPUSH
7752: LD_INT 0
7754: PPUSH
7755: CALL_OW 49
// end ;
7759: GO 7678
7761: POP
7762: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7763: LD_ADDR_VAR 0 17
7767: PUSH
7768: LD_INT 22
7770: PUSH
7771: LD_VAR 0 1
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 25
7782: PUSH
7783: LD_INT 4
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: ST_TO_ADDR
// for i in medic_list do
7799: LD_ADDR_VAR 0 13
7803: PUSH
7804: LD_VAR 0 17
7808: PUSH
7809: FOR_IN
7810: IFFALSE 7828
// ComMoveToArea ( i , healArea ) ;
7812: LD_VAR 0 13
7816: PPUSH
7817: LD_VAR 0 10
7821: PPUSH
7822: CALL_OW 113
7826: GO 7809
7828: POP
7829: POP
// repeat wait ( 0 0$1 ) ;
7830: LD_INT 35
7832: PPUSH
7833: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7837: LD_ADDR_VAR 0 16
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_VAR 0 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 550
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: LD_INT 24
7876: PUSH
7877: LD_INT 250
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PPUSH
7893: CALL_OW 69
7897: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7898: LD_ADDR_VAR 0 18
7902: PUSH
7903: LD_INT 22
7905: PUSH
7906: LD_VAR 0 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 2
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 5
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 8
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 25
7950: PUSH
7951: LD_INT 9
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 24
7967: PUSH
7968: LD_INT 1000
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: ST_TO_ADDR
// if medicCount > 0 then
7985: LD_VAR 0 7
7989: PUSH
7990: LD_INT 0
7992: GREATER
7993: IFFALSE 8067
// begin if damageUnit_list > 0 then
7995: LD_VAR 0 16
7999: PUSH
8000: LD_INT 0
8002: GREATER
8003: IFFALSE 8067
// begin for i in damageUnit_list do
8005: LD_ADDR_VAR 0 13
8009: PUSH
8010: LD_VAR 0 16
8014: PUSH
8015: FOR_IN
8016: IFFALSE 8065
// begin ComMoveToArea ( i , healArea ) ;
8018: LD_VAR 0 13
8022: PPUSH
8023: LD_VAR 0 10
8027: PPUSH
8028: CALL_OW 113
// for j in medic_list do
8032: LD_ADDR_VAR 0 14
8036: PUSH
8037: LD_VAR 0 17
8041: PUSH
8042: FOR_IN
8043: IFFALSE 8061
// AddComHeal ( j , i ) ;
8045: LD_VAR 0 14
8049: PPUSH
8050: LD_VAR 0 13
8054: PPUSH
8055: CALL_OW 188
8059: GO 8042
8061: POP
8062: POP
// end ;
8063: GO 8015
8065: POP
8066: POP
// end ; end ; for i in soldiersOK_list do
8067: LD_ADDR_VAR 0 13
8071: PUSH
8072: LD_VAR 0 18
8076: PUSH
8077: FOR_IN
8078: IFFALSE 8254
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8080: LD_ADDR_VAR 0 21
8084: PUSH
8085: LD_INT 22
8087: PUSH
8088: LD_VAR 0 11
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PPUSH
8097: CALL_OW 69
8101: PPUSH
8102: LD_VAR 0 13
8106: PPUSH
8107: CALL_OW 74
8111: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8112: LD_ADDR_VAR 0 22
8116: PUSH
8117: LD_INT 22
8119: PUSH
8120: LD_VAR 0 11
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_INT 59
8134: PUSH
8135: EMPTY
8136: LIST
8137: PUSH
8138: LD_INT 21
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 21
8150: PUSH
8151: LD_INT 2
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: PPUSH
8171: CALL_OW 69
8175: PPUSH
8176: LD_VAR 0 13
8180: PPUSH
8181: CALL_OW 74
8185: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8186: LD_VAR 0 13
8190: PPUSH
8191: LD_VAR 0 21
8195: PPUSH
8196: CALL_OW 296
8200: PUSH
8201: LD_INT 8
8203: PLUS
8204: PUSH
8205: LD_VAR 0 13
8209: PPUSH
8210: LD_VAR 0 22
8214: PPUSH
8215: CALL_OW 296
8219: LESS
8220: IFFALSE 8238
// begin ComAttackUnit ( i , target1 ) ;
8222: LD_VAR 0 13
8226: PPUSH
8227: LD_VAR 0 21
8231: PPUSH
8232: CALL_OW 115
// end else
8236: GO 8252
// begin ComAttackUnit ( i , target2 ) ;
8238: LD_VAR 0 13
8242: PPUSH
8243: LD_VAR 0 22
8247: PPUSH
8248: CALL_OW 115
// end ; end ;
8252: GO 8077
8254: POP
8255: POP
// for i in soldiersOK_list do
8256: LD_ADDR_VAR 0 13
8260: PUSH
8261: LD_VAR 0 18
8265: PUSH
8266: FOR_IN
8267: IFFALSE 8443
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8269: LD_ADDR_VAR 0 21
8273: PUSH
8274: LD_INT 22
8276: PUSH
8277: LD_VAR 0 11
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PPUSH
8286: CALL_OW 69
8290: PPUSH
8291: LD_VAR 0 13
8295: PPUSH
8296: CALL_OW 74
8300: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8301: LD_ADDR_VAR 0 22
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_VAR 0 11
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 2
8320: PUSH
8321: LD_INT 59
8323: PUSH
8324: EMPTY
8325: LIST
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 1
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 21
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: PPUSH
8360: CALL_OW 69
8364: PPUSH
8365: LD_VAR 0 13
8369: PPUSH
8370: CALL_OW 74
8374: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8375: LD_VAR 0 13
8379: PPUSH
8380: LD_VAR 0 21
8384: PPUSH
8385: CALL_OW 296
8389: PUSH
8390: LD_INT 8
8392: PLUS
8393: PUSH
8394: LD_VAR 0 13
8398: PPUSH
8399: LD_VAR 0 22
8403: PPUSH
8404: CALL_OW 296
8408: LESS
8409: IFFALSE 8427
// begin ComAttackUnit ( i , target1 ) ;
8411: LD_VAR 0 13
8415: PPUSH
8416: LD_VAR 0 21
8420: PPUSH
8421: CALL_OW 115
// end else
8425: GO 8441
// begin ComAttackUnit ( i , target2 ) ;
8427: LD_VAR 0 13
8431: PPUSH
8432: LD_VAR 0 22
8436: PPUSH
8437: CALL_OW 115
// end ; end ;
8441: GO 8266
8443: POP
8444: POP
// until soldiersOK_list = [ ] ;
8445: LD_VAR 0 18
8449: PUSH
8450: EMPTY
8451: EQUAL
8452: IFFALSE 7830
// end ;
8454: LD_VAR 0 12
8458: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
8463: PPUSH
8464: PPUSH
8465: PPUSH
8466: PPUSH
8467: PPUSH
8468: PPUSH
8469: PPUSH
8470: PPUSH
8471: PPUSH
// wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 8 ) ] ) ;
8472: LD_INT 2100
8474: PUSH
8475: LD_INT 3150
8477: PUSH
8478: LD_INT 4200
8480: PUSH
8481: LD_INT 5250
8483: PUSH
8484: LD_INT 6300
8486: PUSH
8487: LD_INT 7350
8489: PUSH
8490: LD_INT 8400
8492: PUSH
8493: LD_INT 9450
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: LD_INT 8
8511: PPUSH
8512: CALL_OW 12
8516: ARRAY
8517: PPUSH
8518: CALL_OW 67
// amChassisTab = [ ] ;
8522: LD_ADDR_VAR 0 19
8526: PUSH
8527: EMPTY
8528: ST_TO_ADDR
// arChassisTab = [ ] ;
8529: LD_ADDR_VAR 0 18
8533: PUSH
8534: EMPTY
8535: ST_TO_ADDR
// ruChassisTab = [ ] ;
8536: LD_ADDR_VAR 0 17
8540: PUSH
8541: EMPTY
8542: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8543: LD_INT 35
8545: PPUSH
8546: CALL_OW 67
// if nation = 1 then
8550: LD_VAR 0 5
8554: PUSH
8555: LD_INT 1
8557: EQUAL
8558: IFFALSE 9063
// begin uc_side = side ;
8560: LD_ADDR_OWVAR 20
8564: PUSH
8565: LD_VAR 0 2
8569: ST_TO_ADDR
// uc_nation = nation ;
8570: LD_ADDR_OWVAR 21
8574: PUSH
8575: LD_VAR 0 5
8579: ST_TO_ADDR
// vc_engine = vehengine ;
8580: LD_ADDR_OWVAR 39
8584: PUSH
8585: LD_VAR 0 6
8589: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8590: LD_ADDR_OWVAR 38
8594: PUSH
8595: LD_VAR 0 7
8599: PUSH
8600: LD_INT 1
8602: PPUSH
8603: LD_VAR 0 7
8607: PPUSH
8608: CALL_OW 12
8612: ARRAY
8613: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8614: LD_ADDR_OWVAR 40
8618: PUSH
8619: LD_VAR 0 10
8623: PUSH
8624: LD_INT 1
8626: PPUSH
8627: LD_VAR 0 10
8631: PPUSH
8632: CALL_OW 12
8636: ARRAY
8637: ST_TO_ADDR
// for j = 1 to AMWeapon do
8638: LD_ADDR_VAR 0 14
8642: PUSH
8643: DOUBLE
8644: LD_INT 1
8646: DEC
8647: ST_TO_ADDR
8648: LD_VAR 0 10
8652: PUSH
8653: FOR_TO
8654: IFFALSE 8955
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8656: LD_VAR 0 10
8660: PUSH
8661: LD_VAR 0 14
8665: ARRAY
8666: PUSH
8667: LD_INT 2
8669: EQUAL
8670: PUSH
8671: LD_VAR 0 10
8675: PUSH
8676: LD_VAR 0 14
8680: ARRAY
8681: PUSH
8682: LD_INT 3
8684: EQUAL
8685: OR
8686: IFFALSE 8739
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8688: LD_ADDR_VAR 0 19
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: LD_INT 2
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 4
8704: PUSH
8705: LD_INT 5
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8715: LD_ADDR_OWVAR 37
8719: PUSH
8720: LD_VAR 0 19
8724: PUSH
8725: LD_INT 1
8727: PPUSH
8728: LD_VAR 0 19
8732: PPUSH
8733: CALL_OW 12
8737: ARRAY
8738: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8739: LD_VAR 0 10
8743: PUSH
8744: LD_VAR 0 14
8748: ARRAY
8749: PUSH
8750: LD_INT 4
8752: EQUAL
8753: PUSH
8754: LD_VAR 0 10
8758: PUSH
8759: LD_VAR 0 14
8763: ARRAY
8764: PUSH
8765: LD_INT 5
8767: EQUAL
8768: OR
8769: PUSH
8770: LD_VAR 0 10
8774: PUSH
8775: LD_VAR 0 14
8779: ARRAY
8780: PUSH
8781: LD_INT 9
8783: EQUAL
8784: OR
8785: PUSH
8786: LD_VAR 0 10
8790: PUSH
8791: LD_VAR 0 14
8795: ARRAY
8796: PUSH
8797: LD_INT 11
8799: EQUAL
8800: OR
8801: PUSH
8802: LD_VAR 0 10
8806: PUSH
8807: LD_VAR 0 14
8811: ARRAY
8812: PUSH
8813: LD_INT 7
8815: EQUAL
8816: OR
8817: IFFALSE 8866
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8819: LD_ADDR_VAR 0 19
8823: PUSH
8824: LD_INT 2
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: LD_INT 4
8832: PUSH
8833: LD_INT 5
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8842: LD_ADDR_OWVAR 37
8846: PUSH
8847: LD_VAR 0 19
8851: PUSH
8852: LD_INT 1
8854: PPUSH
8855: LD_VAR 0 19
8859: PPUSH
8860: CALL_OW 12
8864: ARRAY
8865: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8866: LD_VAR 0 10
8870: PUSH
8871: LD_VAR 0 14
8875: ARRAY
8876: PUSH
8877: LD_INT 8
8879: EQUAL
8880: PUSH
8881: LD_VAR 0 10
8885: PUSH
8886: LD_VAR 0 14
8890: ARRAY
8891: PUSH
8892: LD_INT 6
8894: EQUAL
8895: OR
8896: PUSH
8897: LD_VAR 0 10
8901: PUSH
8902: LD_VAR 0 14
8906: ARRAY
8907: PUSH
8908: LD_INT 10
8910: EQUAL
8911: OR
8912: IFFALSE 8953
// begin amChassisTab = [ 4 , 5 ] ;
8914: LD_ADDR_VAR 0 19
8918: PUSH
8919: LD_INT 4
8921: PUSH
8922: LD_INT 5
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8929: LD_ADDR_OWVAR 37
8933: PUSH
8934: LD_VAR 0 19
8938: PUSH
8939: LD_INT 1
8941: PPUSH
8942: LD_VAR 0 19
8946: PPUSH
8947: CALL_OW 12
8951: ARRAY
8952: ST_TO_ADDR
// end ; end ;
8953: GO 8653
8955: POP
8956: POP
// veh = CreateVehicle ;
8957: LD_ADDR_VAR 0 16
8961: PUSH
8962: CALL_OW 45
8966: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8967: LD_VAR 0 16
8971: PPUSH
8972: LD_VAR 0 1
8976: PPUSH
8977: LD_INT 0
8979: PPUSH
8980: CALL_OW 49
// if vc_control = 1 then
8984: LD_OWVAR 38
8988: PUSH
8989: LD_INT 1
8991: EQUAL
8992: IFFALSE 9049
// begin hc_gallery =  ;
8994: LD_ADDR_OWVAR 33
8998: PUSH
8999: LD_STRING 
9001: ST_TO_ADDR
// hc_name =  ;
9002: LD_ADDR_OWVAR 26
9006: PUSH
9007: LD_STRING 
9009: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9010: LD_INT 0
9012: PPUSH
9013: LD_INT 3
9015: PPUSH
9016: LD_VAR 0 4
9020: PPUSH
9021: CALL_OW 380
// un = CreateHuman ;
9025: LD_ADDR_VAR 0 15
9029: PUSH
9030: CALL_OW 44
9034: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9035: LD_VAR 0 15
9039: PPUSH
9040: LD_VAR 0 16
9044: PPUSH
9045: CALL_OW 52
// end ; i = i + 1 ;
9049: LD_ADDR_VAR 0 13
9053: PUSH
9054: LD_VAR 0 13
9058: PUSH
9059: LD_INT 1
9061: PLUS
9062: ST_TO_ADDR
// end ; if nation = 2 then
9063: LD_VAR 0 5
9067: PUSH
9068: LD_INT 2
9070: EQUAL
9071: IFFALSE 9509
// begin uc_side = side ;
9073: LD_ADDR_OWVAR 20
9077: PUSH
9078: LD_VAR 0 2
9082: ST_TO_ADDR
// uc_nation = nation ;
9083: LD_ADDR_OWVAR 21
9087: PUSH
9088: LD_VAR 0 5
9092: ST_TO_ADDR
// vc_engine = vehengine ;
9093: LD_ADDR_OWVAR 39
9097: PUSH
9098: LD_VAR 0 6
9102: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9103: LD_ADDR_OWVAR 38
9107: PUSH
9108: LD_VAR 0 7
9112: PUSH
9113: LD_INT 1
9115: PPUSH
9116: LD_VAR 0 7
9120: PPUSH
9121: CALL_OW 12
9125: ARRAY
9126: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9127: LD_ADDR_OWVAR 40
9131: PUSH
9132: LD_VAR 0 9
9136: PUSH
9137: LD_INT 1
9139: PPUSH
9140: LD_VAR 0 9
9144: PPUSH
9145: CALL_OW 12
9149: ARRAY
9150: ST_TO_ADDR
// for j = 1 to ARWeapons do
9151: LD_ADDR_VAR 0 14
9155: PUSH
9156: DOUBLE
9157: LD_INT 1
9159: DEC
9160: ST_TO_ADDR
9161: LD_VAR 0 9
9165: PUSH
9166: FOR_TO
9167: IFFALSE 9401
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9169: LD_VAR 0 9
9173: PUSH
9174: LD_VAR 0 14
9178: ARRAY
9179: PUSH
9180: LD_INT 24
9182: EQUAL
9183: PUSH
9184: LD_VAR 0 9
9188: PUSH
9189: LD_VAR 0 14
9193: ARRAY
9194: PUSH
9195: LD_INT 22
9197: EQUAL
9198: OR
9199: PUSH
9200: LD_VAR 0 9
9204: PUSH
9205: LD_VAR 0 14
9209: ARRAY
9210: PUSH
9211: LD_INT 23
9213: EQUAL
9214: OR
9215: PUSH
9216: LD_VAR 0 9
9220: PUSH
9221: LD_VAR 0 14
9225: ARRAY
9226: PUSH
9227: LD_INT 30
9229: EQUAL
9230: OR
9231: IFFALSE 9280
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9233: LD_ADDR_VAR 0 18
9237: PUSH
9238: LD_INT 11
9240: PUSH
9241: LD_INT 12
9243: PUSH
9244: LD_INT 13
9246: PUSH
9247: LD_INT 14
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9256: LD_ADDR_OWVAR 37
9260: PUSH
9261: LD_VAR 0 18
9265: PUSH
9266: LD_INT 1
9268: PPUSH
9269: LD_VAR 0 18
9273: PPUSH
9274: CALL_OW 12
9278: ARRAY
9279: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9280: LD_VAR 0 9
9284: PUSH
9285: LD_VAR 0 14
9289: ARRAY
9290: PUSH
9291: LD_INT 29
9293: EQUAL
9294: PUSH
9295: LD_VAR 0 9
9299: PUSH
9300: LD_VAR 0 14
9304: ARRAY
9305: PUSH
9306: LD_INT 28
9308: EQUAL
9309: OR
9310: PUSH
9311: LD_VAR 0 9
9315: PUSH
9316: LD_VAR 0 14
9320: ARRAY
9321: PUSH
9322: LD_INT 27
9324: EQUAL
9325: OR
9326: PUSH
9327: LD_VAR 0 9
9331: PUSH
9332: LD_VAR 0 14
9336: ARRAY
9337: PUSH
9338: LD_INT 26
9340: EQUAL
9341: OR
9342: PUSH
9343: LD_VAR 0 9
9347: PUSH
9348: LD_VAR 0 14
9352: ARRAY
9353: PUSH
9354: LD_INT 25
9356: EQUAL
9357: OR
9358: IFFALSE 9399
// begin arChassisTab = [ 13 , 14 ] ;
9360: LD_ADDR_VAR 0 18
9364: PUSH
9365: LD_INT 13
9367: PUSH
9368: LD_INT 14
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9375: LD_ADDR_OWVAR 37
9379: PUSH
9380: LD_VAR 0 18
9384: PUSH
9385: LD_INT 1
9387: PPUSH
9388: LD_VAR 0 18
9392: PPUSH
9393: CALL_OW 12
9397: ARRAY
9398: ST_TO_ADDR
// end ; end ;
9399: GO 9166
9401: POP
9402: POP
// veh = CreateVehicle ;
9403: LD_ADDR_VAR 0 16
9407: PUSH
9408: CALL_OW 45
9412: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9413: LD_VAR 0 16
9417: PPUSH
9418: LD_VAR 0 1
9422: PPUSH
9423: LD_INT 0
9425: PPUSH
9426: CALL_OW 49
// if vc_control = 1 then
9430: LD_OWVAR 38
9434: PUSH
9435: LD_INT 1
9437: EQUAL
9438: IFFALSE 9495
// begin hc_gallery =  ;
9440: LD_ADDR_OWVAR 33
9444: PUSH
9445: LD_STRING 
9447: ST_TO_ADDR
// hc_name =  ;
9448: LD_ADDR_OWVAR 26
9452: PUSH
9453: LD_STRING 
9455: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9456: LD_INT 0
9458: PPUSH
9459: LD_INT 3
9461: PPUSH
9462: LD_VAR 0 4
9466: PPUSH
9467: CALL_OW 380
// un = CreateHuman ;
9471: LD_ADDR_VAR 0 15
9475: PUSH
9476: CALL_OW 44
9480: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9481: LD_VAR 0 15
9485: PPUSH
9486: LD_VAR 0 16
9490: PPUSH
9491: CALL_OW 52
// end ; i = i + 1 ;
9495: LD_ADDR_VAR 0 13
9499: PUSH
9500: LD_VAR 0 13
9504: PUSH
9505: LD_INT 1
9507: PLUS
9508: ST_TO_ADDR
// end ; if nation = 3 then
9509: LD_VAR 0 5
9513: PUSH
9514: LD_INT 3
9516: EQUAL
9517: IFFALSE 9923
// begin uc_side = side ;
9519: LD_ADDR_OWVAR 20
9523: PUSH
9524: LD_VAR 0 2
9528: ST_TO_ADDR
// uc_nation = nation ;
9529: LD_ADDR_OWVAR 21
9533: PUSH
9534: LD_VAR 0 5
9538: ST_TO_ADDR
// vc_engine = vehengine ;
9539: LD_ADDR_OWVAR 39
9543: PUSH
9544: LD_VAR 0 6
9548: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9549: LD_ADDR_OWVAR 38
9553: PUSH
9554: LD_VAR 0 7
9558: PUSH
9559: LD_INT 1
9561: PPUSH
9562: LD_VAR 0 7
9566: PPUSH
9567: CALL_OW 12
9571: ARRAY
9572: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9573: LD_ADDR_OWVAR 40
9577: PUSH
9578: LD_VAR 0 8
9582: PUSH
9583: LD_INT 1
9585: PPUSH
9586: LD_VAR 0 8
9590: PPUSH
9591: CALL_OW 12
9595: ARRAY
9596: ST_TO_ADDR
// for j = 1 to RuWeapons do
9597: LD_ADDR_VAR 0 14
9601: PUSH
9602: DOUBLE
9603: LD_INT 1
9605: DEC
9606: ST_TO_ADDR
9607: LD_VAR 0 8
9611: PUSH
9612: FOR_TO
9613: IFFALSE 9815
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9615: LD_VAR 0 8
9619: PUSH
9620: LD_VAR 0 14
9624: ARRAY
9625: PUSH
9626: LD_INT 42
9628: EQUAL
9629: PUSH
9630: LD_VAR 0 8
9634: PUSH
9635: LD_VAR 0 14
9639: ARRAY
9640: PUSH
9641: LD_INT 43
9643: EQUAL
9644: OR
9645: PUSH
9646: LD_VAR 0 8
9650: PUSH
9651: LD_VAR 0 14
9655: ARRAY
9656: PUSH
9657: LD_INT 44
9659: EQUAL
9660: OR
9661: PUSH
9662: LD_VAR 0 8
9666: PUSH
9667: LD_VAR 0 14
9671: ARRAY
9672: PUSH
9673: LD_INT 45
9675: EQUAL
9676: OR
9677: PUSH
9678: LD_VAR 0 8
9682: PUSH
9683: LD_VAR 0 14
9687: ARRAY
9688: PUSH
9689: LD_INT 49
9691: EQUAL
9692: OR
9693: IFFALSE 9742
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9695: LD_ADDR_VAR 0 17
9699: PUSH
9700: LD_INT 21
9702: PUSH
9703: LD_INT 22
9705: PUSH
9706: LD_INT 23
9708: PUSH
9709: LD_INT 24
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9718: LD_ADDR_OWVAR 37
9722: PUSH
9723: LD_VAR 0 17
9727: PUSH
9728: LD_INT 1
9730: PPUSH
9731: LD_VAR 0 17
9735: PPUSH
9736: CALL_OW 12
9740: ARRAY
9741: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9742: LD_VAR 0 8
9746: PUSH
9747: LD_VAR 0 14
9751: ARRAY
9752: PUSH
9753: LD_INT 46
9755: EQUAL
9756: PUSH
9757: LD_VAR 0 8
9761: PUSH
9762: LD_VAR 0 14
9766: ARRAY
9767: PUSH
9768: LD_INT 47
9770: EQUAL
9771: OR
9772: IFFALSE 9813
// begin ruChassisTab = [ 23 , 24 ] ;
9774: LD_ADDR_VAR 0 17
9778: PUSH
9779: LD_INT 23
9781: PUSH
9782: LD_INT 24
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9789: LD_ADDR_OWVAR 37
9793: PUSH
9794: LD_VAR 0 17
9798: PUSH
9799: LD_INT 1
9801: PPUSH
9802: LD_VAR 0 17
9806: PPUSH
9807: CALL_OW 12
9811: ARRAY
9812: ST_TO_ADDR
// end ; end ;
9813: GO 9612
9815: POP
9816: POP
// veh = CreateVehicle ;
9817: LD_ADDR_VAR 0 16
9821: PUSH
9822: CALL_OW 45
9826: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9827: LD_VAR 0 16
9831: PPUSH
9832: LD_VAR 0 1
9836: PPUSH
9837: LD_INT 0
9839: PPUSH
9840: CALL_OW 49
// if vc_control = 1 then
9844: LD_OWVAR 38
9848: PUSH
9849: LD_INT 1
9851: EQUAL
9852: IFFALSE 9909
// begin hc_gallery =  ;
9854: LD_ADDR_OWVAR 33
9858: PUSH
9859: LD_STRING 
9861: ST_TO_ADDR
// hc_name =  ;
9862: LD_ADDR_OWVAR 26
9866: PUSH
9867: LD_STRING 
9869: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9870: LD_INT 0
9872: PPUSH
9873: LD_INT 3
9875: PPUSH
9876: LD_VAR 0 4
9880: PPUSH
9881: CALL_OW 380
// un = CreateHuman ;
9885: LD_ADDR_VAR 0 15
9889: PUSH
9890: CALL_OW 44
9894: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9895: LD_VAR 0 15
9899: PPUSH
9900: LD_VAR 0 16
9904: PPUSH
9905: CALL_OW 52
// end ; i = i + 1 ;
9909: LD_ADDR_VAR 0 13
9913: PUSH
9914: LD_VAR 0 13
9918: PUSH
9919: LD_INT 1
9921: PLUS
9922: ST_TO_ADDR
// end ; until i = vehCount ;
9923: LD_VAR 0 13
9927: PUSH
9928: LD_VAR 0 3
9932: EQUAL
9933: IFFALSE 8543
// repeat wait ( 0 0$1 ) ;
9935: LD_INT 35
9937: PPUSH
9938: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
9942: LD_ADDR_VAR 0 20
9946: PUSH
9947: LD_INT 22
9949: PUSH
9950: LD_VAR 0 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 24
9971: PUSH
9972: LD_INT 661
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: ST_TO_ADDR
// if vehicleOK_list > 0 then
9989: LD_VAR 0 20
9993: PUSH
9994: LD_INT 0
9996: GREATER
9997: IFFALSE 10188
// begin for i in vehicleOK_list do
9999: LD_ADDR_VAR 0 13
10003: PUSH
10004: LD_VAR 0 20
10008: PUSH
10009: FOR_IN
10010: IFFALSE 10186
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10012: LD_ADDR_VAR 0 21
10016: PUSH
10017: LD_INT 22
10019: PUSH
10020: LD_VAR 0 11
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 69
10033: PPUSH
10034: LD_VAR 0 13
10038: PPUSH
10039: CALL_OW 74
10043: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10044: LD_ADDR_VAR 0 22
10048: PUSH
10049: LD_INT 22
10051: PUSH
10052: LD_VAR 0 11
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: LD_INT 59
10066: PUSH
10067: EMPTY
10068: LIST
10069: PUSH
10070: LD_INT 21
10072: PUSH
10073: LD_INT 1
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: PUSH
10080: LD_INT 21
10082: PUSH
10083: LD_INT 2
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: PPUSH
10103: CALL_OW 69
10107: PPUSH
10108: LD_VAR 0 13
10112: PPUSH
10113: CALL_OW 74
10117: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10118: LD_VAR 0 13
10122: PPUSH
10123: LD_VAR 0 21
10127: PPUSH
10128: CALL_OW 296
10132: PUSH
10133: LD_INT 8
10135: PLUS
10136: PUSH
10137: LD_VAR 0 13
10141: PPUSH
10142: LD_VAR 0 22
10146: PPUSH
10147: CALL_OW 296
10151: LESS
10152: IFFALSE 10170
// begin ComAttackUnit ( i , target1 ) ;
10154: LD_VAR 0 13
10158: PPUSH
10159: LD_VAR 0 21
10163: PPUSH
10164: CALL_OW 115
// end else
10168: GO 10184
// begin ComAttackUnit ( i , target2 ) ;
10170: LD_VAR 0 13
10174: PPUSH
10175: LD_VAR 0 22
10179: PPUSH
10180: CALL_OW 115
// end ; end ;
10184: GO 10009
10186: POP
10187: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_occupied ] ] ) diff FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , 31 ] ] ) = 0 ;
10188: LD_INT 22
10190: PUSH
10191: LD_VAR 0 2
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 24
10212: PUSH
10213: LD_INT 250
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 59
10222: PUSH
10223: EMPTY
10224: LIST
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: PPUSH
10232: CALL_OW 69
10236: PUSH
10237: LD_INT 22
10239: PUSH
10240: LD_VAR 0 2
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 21
10251: PUSH
10252: LD_INT 2
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 34
10261: PUSH
10262: LD_INT 31
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL_OW 69
10278: PUSH
10279: LD_INT 0
10281: EQUAL
10282: DIFF
10283: IFFALSE 9935
// end ; end_of_file
10285: LD_VAR 0 12
10289: RET
// every 0 0$1 do
10290: GO 10292
10292: DISABLE
// begin enable ;
10293: ENABLE
// IntBazooka ( 7 , 1 ) ;
10294: LD_INT 7
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL 6006 0 2
// RepairVehicle ( 8 , ArabianRepairArea , 86 , 49 , 1 ) ;
10304: LD_INT 8
10306: PPUSH
10307: LD_INT 14
10309: PPUSH
10310: LD_INT 86
10312: PPUSH
10313: LD_INT 49
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL 6365 0 5
// end ; end_of_file
10323: END
// every 0 0$1 trigger eventVar4 = 1 do
10324: LD_EXP 37
10328: PUSH
10329: LD_INT 1
10331: EQUAL
10332: IFFALSE 11126
10334: GO 10336
10336: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10337: LD_EXP 1
10341: PPUSH
10342: LD_STRING D9b-JMM-1
10344: PPUSH
10345: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10349: LD_EXP 15
10353: PPUSH
10354: LD_STRING D9b-Pow-1
10356: PPUSH
10357: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10361: LD_EXP 1
10365: PPUSH
10366: LD_STRING D9b-JMM-2
10368: PPUSH
10369: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10373: LD_EXP 15
10377: PPUSH
10378: LD_STRING D9b-Pow-2
10380: PPUSH
10381: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10385: LD_EXP 1
10389: PPUSH
10390: LD_STRING D9b-JMM-3
10392: PPUSH
10393: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10397: LD_EXP 15
10401: PPUSH
10402: LD_STRING D9b-Pow-3
10404: PPUSH
10405: CALL_OW 94
// if burlakStatus = 1 then
10409: LD_EXP 26
10413: PUSH
10414: LD_INT 1
10416: EQUAL
10417: IFFALSE 10431
// begin AddMedal ( Burlak , 1 ) ;
10419: LD_STRING Burlak
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 101
// end else
10429: GO 10442
// begin AddMedal ( Burlak , - 1 ) ;
10431: LD_STRING Burlak
10433: PPUSH
10434: LD_INT 1
10436: NEG
10437: PPUSH
10438: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10442: LD_EXP 2
10446: PPUSH
10447: CALL_OW 302
10451: IFFALSE 10465
// begin AddMedal ( Stevens , 1 ) ;
10453: LD_STRING Stevens
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 101
// end else
10463: GO 10476
// begin AddMedal ( Stevens , - 1 ) ;
10465: LD_STRING Stevens
10467: PPUSH
10468: LD_INT 1
10470: NEG
10471: PPUSH
10472: CALL_OW 101
// end ; if radarOnSpot = 1 then
10476: LD_EXP 28
10480: PUSH
10481: LD_INT 1
10483: EQUAL
10484: IFFALSE 10498
// begin AddMedal ( Observation , 1 ) ;
10486: LD_STRING Observation
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 101
// end else
10496: GO 10509
// begin AddMedal ( Observation , - 1 ) ;
10498: LD_STRING Observation
10500: PPUSH
10501: LD_INT 1
10503: NEG
10504: PPUSH
10505: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10509: LD_STRING MAIN
10511: PPUSH
10512: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10516: LD_EXP 26
10520: PPUSH
10521: LD_STRING 13_BurlakStatus_1
10523: PPUSH
10524: CALL_OW 39
// if IsOk ( Stevens ) then
10528: LD_EXP 2
10532: PPUSH
10533: CALL_OW 302
10537: IFFALSE 10551
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10539: LD_INT 1
10541: PPUSH
10542: LD_STRING 13_StevensStatus_1
10544: PPUSH
10545: CALL_OW 39
10549: GO 10561
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10551: LD_INT 0
10553: PPUSH
10554: LD_STRING 13_StevensStatus_1
10556: PPUSH
10557: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10561: LD_INT 22
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 21
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: PPUSH
10663: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10667: LD_EXP 1
10671: PPUSH
10672: LD_EXP 33
10676: PUSH
10677: LD_STRING JMM
10679: STR
10680: PPUSH
10681: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10685: LD_EXP 8
10689: PPUSH
10690: LD_EXP 33
10694: PUSH
10695: LD_STRING Brown
10697: STR
10698: PPUSH
10699: CALL 6314 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10703: LD_EXP 4
10707: PPUSH
10708: LD_EXP 33
10712: PUSH
10713: LD_STRING Donaldson
10715: STR
10716: PPUSH
10717: CALL 6314 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10721: LD_EXP 5
10725: PPUSH
10726: LD_EXP 33
10730: PUSH
10731: LD_STRING Bobby
10733: STR
10734: PPUSH
10735: CALL 6314 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10739: LD_EXP 6
10743: PPUSH
10744: LD_EXP 33
10748: PUSH
10749: LD_STRING Cyrus
10751: STR
10752: PPUSH
10753: CALL 6314 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10757: LD_EXP 3
10761: PPUSH
10762: LD_EXP 33
10766: PUSH
10767: LD_STRING Lisa
10769: STR
10770: PPUSH
10771: CALL 6314 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10775: LD_EXP 13
10779: PPUSH
10780: LD_EXP 33
10784: PUSH
10785: LD_STRING Frank
10787: STR
10788: PPUSH
10789: CALL 6314 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10793: LD_EXP 14
10797: PPUSH
10798: LD_EXP 33
10802: PUSH
10803: LD_STRING Kikuchi
10805: STR
10806: PPUSH
10807: CALL 6314 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10811: LD_EXP 10
10815: PPUSH
10816: LD_EXP 33
10820: PUSH
10821: LD_STRING Houten
10823: STR
10824: PPUSH
10825: CALL 6314 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10829: LD_EXP 12
10833: PPUSH
10834: LD_EXP 33
10838: PUSH
10839: LD_STRING Gary
10841: STR
10842: PPUSH
10843: CALL 6314 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10847: LD_EXP 11
10851: PPUSH
10852: LD_EXP 33
10856: PUSH
10857: LD_STRING Cornell
10859: STR
10860: PPUSH
10861: CALL 6314 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10865: LD_EXP 7
10869: PPUSH
10870: LD_EXP 33
10874: PUSH
10875: LD_STRING Denis
10877: STR
10878: PPUSH
10879: CALL 6314 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10883: LD_EXP 9
10887: PPUSH
10888: LD_EXP 33
10892: PUSH
10893: LD_STRING Gladstone
10895: STR
10896: PPUSH
10897: CALL 6314 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10901: LD_EXP 2
10905: PPUSH
10906: LD_EXP 33
10910: PUSH
10911: LD_STRING Stevens
10913: STR
10914: PPUSH
10915: CALL 6314 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
10919: LD_INT 50
10921: PUSH
10922: EMPTY
10923: LIST
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 21
10937: PUSH
10938: LD_INT 1
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 25
10960: PUSH
10961: LD_INT 2
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 25
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 25
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 25
10990: PUSH
10991: LD_INT 5
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 25
11000: PUSH
11001: LD_INT 8
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PUSH
11028: LD_EXP 1
11032: PUSH
11033: LD_EXP 8
11037: PUSH
11038: LD_EXP 4
11042: PUSH
11043: LD_EXP 5
11047: PUSH
11048: LD_EXP 6
11052: PUSH
11053: LD_EXP 3
11057: PUSH
11058: LD_EXP 13
11062: PUSH
11063: LD_EXP 9
11067: PUSH
11068: LD_EXP 14
11072: PUSH
11073: LD_EXP 7
11077: PUSH
11078: LD_EXP 10
11082: PUSH
11083: LD_EXP 12
11087: PUSH
11088: LD_EXP 11
11092: PUSH
11093: LD_EXP 2
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: DIFF
11114: PPUSH
11115: LD_STRING 13_other_survivors
11117: PPUSH
11118: CALL_OW 38
// YouWin ;
11122: CALL_OW 103
// end ; end_of_file
11126: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11127: LD_EXP 30
11131: PUSH
11132: LD_INT 2
11134: EQUAL
11135: IFFALSE 11271
11137: GO 11139
11139: DISABLE
11140: LD_INT 0
11142: PPUSH
11143: PPUSH
11144: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11145: LD_ADDR_VAR 0 2
11149: PUSH
11150: LD_INT 22
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 21
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: LD_INT 30
11175: PUSH
11176: LD_INT 0
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 30
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: PPUSH
11203: CALL_OW 69
11207: ST_TO_ADDR
// for i in tmp do
11208: LD_ADDR_VAR 0 1
11212: PUSH
11213: LD_VAR 0 2
11217: PUSH
11218: FOR_IN
11219: IFFALSE 11252
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11221: LD_ADDR_VAR 0 3
11225: PUSH
11226: LD_VAR 0 3
11230: PUSH
11231: LD_VAR 0 1
11235: PPUSH
11236: CALL_OW 274
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: CALL_OW 275
11248: PLUS
11249: ST_TO_ADDR
11250: GO 11218
11252: POP
11253: POP
// if yourSiberite < 79 then
11254: LD_VAR 0 3
11258: PUSH
11259: LD_INT 79
11261: LESS
11262: IFFALSE 11271
// YouLost ( siberite ) ;
11264: LD_STRING siberite
11266: PPUSH
11267: CALL_OW 104
// end ;
11271: PPOPN 3
11273: END
// every 0 0$1 trigger IsDead ( JMM ) do
11274: LD_EXP 1
11278: PPUSH
11279: CALL_OW 301
11283: IFFALSE 11295
11285: GO 11287
11287: DISABLE
// YouLost ( JMM ) ; end_of_file
11288: LD_STRING JMM
11290: PPUSH
11291: CALL_OW 104
11295: END
// every 15 15$0 + 5 5$0 do
11296: GO 11298
11298: DISABLE
// begin enable ;
11299: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 2 , 4 ) , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , 3 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11300: LD_INT 8
11302: PPUSH
11303: LD_INT 2
11305: PPUSH
11306: LD_INT 2
11308: PPUSH
11309: LD_INT 4
11311: PPUSH
11312: CALL_OW 12
11316: PPUSH
11317: LD_INT 0
11319: PPUSH
11320: LD_INT 0
11322: PPUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: LIST
11336: PUSH
11337: LD_OWVAR 67
11341: ARRAY
11342: PPUSH
11343: LD_INT 3
11345: PPUSH
11346: LD_INT 10
11348: PPUSH
11349: LD_INT 8
11351: PUSH
11352: LD_INT 9
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 1
11361: PPUSH
11362: LD_INT 2
11364: PPUSH
11365: CALL_OW 12
11369: ARRAY
11370: PPUSH
11371: LD_INT 12
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL 7200 0 11
// end ;
11381: END
// every 15 15$0 + 5 5$0 do
11382: GO 11384
11384: DISABLE
// begin enable ;
11385: ENABLE
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 1 , 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11386: LD_INT 8
11388: PUSH
11389: LD_INT 9
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 1
11398: PPUSH
11399: LD_INT 2
11401: PPUSH
11402: CALL_OW 12
11406: ARRAY
11407: PPUSH
11408: LD_INT 8
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: LD_INT 3
11416: PPUSH
11417: CALL_OW 12
11421: PUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_INT 4
11427: PPUSH
11428: CALL_OW 12
11432: PUSH
11433: LD_INT 3
11435: PPUSH
11436: LD_INT 5
11438: PPUSH
11439: CALL_OW 12
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: LD_OWVAR 67
11453: ARRAY
11454: PPUSH
11455: LD_INT 10
11457: PPUSH
11458: LD_INT 2
11460: PPUSH
11461: LD_INT 3
11463: PPUSH
11464: LD_INT 1
11466: PUSH
11467: LD_INT 5
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: LIST
11477: PPUSH
11478: EMPTY
11479: PPUSH
11480: LD_INT 25
11482: PUSH
11483: LD_INT 26
11485: PUSH
11486: LD_INT 27
11488: PUSH
11489: LD_INT 28
11491: PUSH
11492: LD_INT 29
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: PPUSH
11502: EMPTY
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL 8459 0 11
// end ; end_of_file
11511: END
// every 1 1$0 do
11512: GO 11514
11514: DISABLE
// begin enable ;
11515: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11516: LD_INT 3
11518: PPUSH
11519: LD_INT 5
11521: PPUSH
11522: CALL_OW 12
11526: PPUSH
11527: LD_INT 13
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 55
// end ;
11537: END
