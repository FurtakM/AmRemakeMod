// export JMM , Gary , Frank , Cornell , Lisa , Cyrus , Woodruff , Stevens ; export Powell ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export eventVar1 , eventVar2 ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SpawnVehicle ;
   8: CALL 529 0 0
// PrepareHeroes ;
  12: CALL 33 0 0
// eventVar1 = 0 ;
  16: LD_ADDR_EXP 17
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// eventVar2 = 0 ;
  24: LD_ADDR_EXP 18
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// end ; end_of_file
  32: END
// export function PrepareHeroes ; begin
  33: LD_INT 0
  35: PPUSH
// uc_side = 1 ;
  36: LD_ADDR_OWVAR 20
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
  44: LD_ADDR_EXP 1
  48: PUSH
  49: LD_STRING JMM
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: CALL 2098 0 2
  59: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
  60: LD_ADDR_EXP 2
  64: PUSH
  65: LD_STRING Gary
  67: PPUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL 2098 0 2
  75: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , false ) ;
  76: LD_ADDR_EXP 3
  80: PUSH
  81: LD_STRING Frank
  83: PPUSH
  84: LD_INT 0
  86: PPUSH
  87: CALL 2098 0 2
  91: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_STRING Cornell
  99: PPUSH
 100: LD_INT 0
 102: PPUSH
 103: CALL 2098 0 2
 107: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 108: LD_ADDR_EXP 5
 112: PUSH
 113: LD_STRING Lisa
 115: PPUSH
 116: LD_INT 0
 118: PPUSH
 119: CALL 2098 0 2
 123: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 124: LD_ADDR_EXP 6
 128: PUSH
 129: LD_STRING Cyrus
 131: PPUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL 2098 0 2
 139: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 140: LD_ADDR_EXP 7
 144: PUSH
 145: LD_STRING Woodruff
 147: PPUSH
 148: LD_INT 0
 150: PPUSH
 151: CALL 2098 0 2
 155: ST_TO_ADDR
// Stevens = PrepareUnit ( Stevens , false ) ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_STRING Stevens
 163: PPUSH
 164: LD_INT 0
 166: PPUSH
 167: CALL 2098 0 2
 171: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 172: LD_ADDR_EXP 9
 176: PUSH
 177: LD_STRING Powell
 179: PPUSH
 180: LD_INT 0
 182: PPUSH
 183: CALL 2098 0 2
 187: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
 188: LD_EXP 1
 192: PPUSH
 193: LD_INT 22
 195: PUSH
 196: LD_INT 1
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: PUSH
 203: LD_INT 21
 205: PUSH
 206: LD_INT 2
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: EMPTY
 214: LIST
 215: LIST
 216: PPUSH
 217: CALL_OW 69
 221: PUSH
 222: LD_INT 1
 224: ARRAY
 225: PPUSH
 226: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 2 ] ) ;
 230: LD_EXP 2
 234: PPUSH
 235: LD_INT 22
 237: PUSH
 238: LD_INT 1
 240: PUSH
 241: EMPTY
 242: LIST
 243: LIST
 244: PUSH
 245: LD_INT 21
 247: PUSH
 248: LD_INT 2
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PPUSH
 259: CALL_OW 69
 263: PUSH
 264: LD_INT 2
 266: ARRAY
 267: PPUSH
 268: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 3 ] ) ;
 272: LD_EXP 3
 276: PPUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 21
 289: PUSH
 290: LD_INT 2
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PPUSH
 301: CALL_OW 69
 305: PUSH
 306: LD_INT 3
 308: ARRAY
 309: PPUSH
 310: CALL_OW 52
// PlaceHumanInUnit ( Cornell , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 4 ] ) ;
 314: LD_EXP 4
 318: PPUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 21
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 4
 350: ARRAY
 351: PPUSH
 352: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 5 ] ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_INT 22
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 21
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: EMPTY
 378: LIST
 379: LIST
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: PPUSH
 385: CALL_OW 69
 389: PUSH
 390: LD_INT 5
 392: ARRAY
 393: PPUSH
 394: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 6 ] ) ;
 398: LD_EXP 6
 402: PPUSH
 403: LD_INT 22
 405: PUSH
 406: LD_INT 1
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: LD_INT 21
 415: PUSH
 416: LD_INT 2
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PPUSH
 427: CALL_OW 69
 431: PUSH
 432: LD_INT 6
 434: ARRAY
 435: PPUSH
 436: CALL_OW 52
// PlaceHumanInUnit ( Woodruff , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 7 ] ) ;
 440: LD_EXP 7
 444: PPUSH
 445: LD_INT 22
 447: PUSH
 448: LD_INT 1
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 21
 457: PUSH
 458: LD_INT 2
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PPUSH
 469: CALL_OW 69
 473: PUSH
 474: LD_INT 7
 476: ARRAY
 477: PPUSH
 478: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 8 ] ) ;
 482: LD_EXP 8
 486: PPUSH
 487: LD_INT 22
 489: PUSH
 490: LD_INT 1
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 21
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PPUSH
 511: CALL_OW 69
 515: PUSH
 516: LD_INT 8
 518: ARRAY
 519: PPUSH
 520: CALL_OW 52
// end ;
 524: LD_VAR 0 1
 528: RET
// export function SpawnVehicle ; var i , veh ; begin
 529: LD_INT 0
 531: PPUSH
 532: PPUSH
 533: PPUSH
// uc_side = 1 ;
 534: LD_ADDR_OWVAR 20
 538: PUSH
 539: LD_INT 1
 541: ST_TO_ADDR
// uc_nation = 1 ;
 542: LD_ADDR_OWVAR 21
 546: PUSH
 547: LD_INT 1
 549: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ Difficulty ] do
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: DOUBLE
 556: LD_INT 1
 558: DEC
 559: ST_TO_ADDR
 560: LD_INT 3
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: PUSH
 580: FOR_TO
 581: IFFALSE 669
// begin vc_engine = 3 ;
 583: LD_ADDR_OWVAR 39
 587: PUSH
 588: LD_INT 3
 590: ST_TO_ADDR
// vc_control = 1 ;
 591: LD_ADDR_OWVAR 38
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// vc_weapon = 12 ;
 599: LD_ADDR_OWVAR 40
 603: PUSH
 604: LD_INT 12
 606: ST_TO_ADDR
// vc_chassis = 3 ;
 607: LD_ADDR_OWVAR 37
 611: PUSH
 612: LD_INT 3
 614: ST_TO_ADDR
// veh = CreateVehicle ;
 615: LD_ADDR_VAR 0 3
 619: PUSH
 620: CALL_OW 45
 624: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 625: LD_VAR 0 3
 629: PPUSH
 630: LD_INT 2
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// SetDir ( veh , 1 ) ;
 640: LD_VAR 0 3
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: CALL_OW 233
// AddCargo ( veh , 1 , 100 ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: LD_INT 100
 662: PPUSH
 663: CALL_OW 291
// end ;
 667: GO 580
 669: POP
 670: POP
// for i = 1 to 8 - [ 3 , 2 , 1 ] [ Difficulty ] do
 671: LD_ADDR_VAR 0 2
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_INT 8
 683: PUSH
 684: LD_INT 3
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: PUSH
 698: LD_OWVAR 67
 702: ARRAY
 703: MINUS
 704: PUSH
 705: FOR_TO
 706: IFFALSE 802
// begin vc_engine = 3 ;
 708: LD_ADDR_OWVAR 39
 712: PUSH
 713: LD_INT 3
 715: ST_TO_ADDR
// vc_control = 1 ;
 716: LD_ADDR_OWVAR 38
 720: PUSH
 721: LD_INT 1
 723: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 ] [ Rand ( 1 , 3 ) ] ;
 724: LD_ADDR_OWVAR 40
 728: PUSH
 729: LD_INT 9
 731: PUSH
 732: LD_INT 5
 734: PUSH
 735: LD_INT 4
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 1
 745: PPUSH
 746: LD_INT 3
 748: PPUSH
 749: CALL_OW 12
 753: ARRAY
 754: ST_TO_ADDR
// vc_chassis = 3 ;
 755: LD_ADDR_OWVAR 37
 759: PUSH
 760: LD_INT 3
 762: ST_TO_ADDR
// veh = CreateVehicle ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: CALL_OW 45
 772: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 773: LD_VAR 0 3
 777: PPUSH
 778: LD_INT 2
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// SetDir ( veh , 1 ) ;
 788: LD_VAR 0 3
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: CALL_OW 233
// end ;
 800: GO 705
 802: POP
 803: POP
// end ; end_of_file
 804: LD_VAR 0 1
 808: RET
// export function PrepareBurlak ; begin
 809: LD_INT 0
 811: PPUSH
// uc_side = 7 ;
 812: LD_ADDR_OWVAR 20
 816: PUSH
 817: LD_INT 7
 819: ST_TO_ADDR
// uc_nation = 3 ;
 820: LD_ADDR_OWVAR 21
 824: PUSH
 825: LD_INT 3
 827: ST_TO_ADDR
// vc_engine = 3 ;
 828: LD_ADDR_OWVAR 39
 832: PUSH
 833: LD_INT 3
 835: ST_TO_ADDR
// vc_control = 1 ;
 836: LD_ADDR_OWVAR 38
 840: PUSH
 841: LD_INT 1
 843: ST_TO_ADDR
// vc_weapon = 46 ;
 844: LD_ADDR_OWVAR 40
 848: PUSH
 849: LD_INT 46
 851: ST_TO_ADDR
// vc_chassis = 24 ;
 852: LD_ADDR_OWVAR 37
 856: PUSH
 857: LD_INT 24
 859: ST_TO_ADDR
// Masha = CreateVehicle ;
 860: LD_ADDR_EXP 11
 864: PUSH
 865: CALL_OW 45
 869: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
 870: LD_EXP 11
 874: PPUSH
 875: LD_INT 3
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: CALL_OW 49
// SetMark ( Masha , 1 ) ;
 885: LD_EXP 11
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
 897: LD_ADDR_EXP 10
 901: PUSH
 902: LD_STRING Burlak
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL 2098 0 2
 912: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
 913: LD_EXP 10
 917: PPUSH
 918: LD_EXP 11
 922: PPUSH
 923: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
 927: LD_EXP 11
 931: PPUSH
 932: LD_INT 107
 934: PPUSH
 935: LD_INT 118
 937: PPUSH
 938: CALL_OW 114
// end ;
 942: LD_VAR 0 1
 946: RET
// export function BurlakArmy ; var i , veh ; begin
 947: LD_INT 0
 949: PPUSH
 950: PPUSH
 951: PPUSH
// uc_side = 7 ;
 952: LD_ADDR_OWVAR 20
 956: PUSH
 957: LD_INT 7
 959: ST_TO_ADDR
// uc_nation = 3 ;
 960: LD_ADDR_OWVAR 21
 964: PUSH
 965: LD_INT 3
 967: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
 968: LD_ADDR_EXP 12
 972: PUSH
 973: LD_STRING Gnyevko
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL 2098 0 2
 983: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
 984: LD_ADDR_EXP 13
 988: PUSH
 989: LD_STRING Titov
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL 2098 0 2
 999: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier , false ) ;
1000: LD_ADDR_EXP 14
1004: PUSH
1005: LD_STRING Xavier
1007: PPUSH
1008: LD_INT 0
1010: PPUSH
1011: CALL 2098 0 2
1015: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
1016: LD_ADDR_EXP 15
1020: PUSH
1021: LD_STRING Belkov
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL 2098 0 2
1031: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
1032: LD_ADDR_EXP 16
1036: PUSH
1037: LD_STRING Lipshchin
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL 2098 0 2
1047: ST_TO_ADDR
// for i = 1 to 5 do
1048: LD_ADDR_VAR 0 2
1052: PUSH
1053: DOUBLE
1054: LD_INT 1
1056: DEC
1057: ST_TO_ADDR
1058: LD_INT 5
1060: PUSH
1061: FOR_TO
1062: IFFALSE 1150
// begin vc_engine = 3 ;
1064: LD_ADDR_OWVAR 39
1068: PUSH
1069: LD_INT 3
1071: ST_TO_ADDR
// vc_control = 1 ;
1072: LD_ADDR_OWVAR 38
1076: PUSH
1077: LD_INT 1
1079: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
1080: LD_ADDR_OWVAR 40
1084: PUSH
1085: LD_INT 43
1087: PUSH
1088: LD_INT 44
1090: PUSH
1091: LD_INT 45
1093: PUSH
1094: LD_INT 49
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: LIST
1102: PUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 4
1108: PPUSH
1109: CALL_OW 12
1113: ARRAY
1114: ST_TO_ADDR
// vc_chassis = 22 ;
1115: LD_ADDR_OWVAR 37
1119: PUSH
1120: LD_INT 22
1122: ST_TO_ADDR
// veh = CreateVehicle ;
1123: LD_ADDR_VAR 0 3
1127: PUSH
1128: CALL_OW 45
1132: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
1133: LD_VAR 0 3
1137: PPUSH
1138: LD_INT 3
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 49
// end ;
1148: GO 1061
1150: POP
1151: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1152: LD_EXP 12
1156: PPUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 7
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 21
1169: PUSH
1170: LD_INT 2
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: LD_INT 58
1179: PUSH
1180: EMPTY
1181: LIST
1182: PUSH
1183: EMPTY
1184: LIST
1185: LIST
1186: LIST
1187: PPUSH
1188: CALL_OW 69
1192: PUSH
1193: LD_INT 1
1195: ARRAY
1196: PPUSH
1197: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 2 ] ) ;
1201: LD_EXP 13
1205: PPUSH
1206: LD_INT 22
1208: PUSH
1209: LD_INT 7
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 21
1218: PUSH
1219: LD_INT 2
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 58
1228: PUSH
1229: EMPTY
1230: LIST
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 69
1241: PUSH
1242: LD_INT 2
1244: ARRAY
1245: PPUSH
1246: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 3 ] ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_INT 22
1257: PUSH
1258: LD_INT 7
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 21
1267: PUSH
1268: LD_INT 2
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 58
1277: PUSH
1278: EMPTY
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 3
1293: ARRAY
1294: PPUSH
1295: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 4 ] ) ;
1299: LD_EXP 15
1303: PPUSH
1304: LD_INT 22
1306: PUSH
1307: LD_INT 7
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 2
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PUSH
1324: LD_INT 58
1326: PUSH
1327: EMPTY
1328: LIST
1329: PUSH
1330: EMPTY
1331: LIST
1332: LIST
1333: LIST
1334: PPUSH
1335: CALL_OW 69
1339: PUSH
1340: LD_INT 4
1342: ARRAY
1343: PPUSH
1344: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 5 ] ) ;
1348: LD_EXP 16
1352: PPUSH
1353: LD_INT 22
1355: PUSH
1356: LD_INT 7
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 21
1365: PUSH
1366: LD_INT 2
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: PUSH
1373: LD_INT 58
1375: PUSH
1376: EMPTY
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PPUSH
1384: CALL_OW 69
1388: PUSH
1389: LD_INT 5
1391: ARRAY
1392: PPUSH
1393: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
1397: LD_EXP 12
1401: PPUSH
1402: LD_INT 3
1404: PPUSH
1405: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
1409: LD_EXP 13
1413: PUSH
1414: LD_EXP 16
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: LD_INT 9
1425: PPUSH
1426: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
1430: LD_INT 22
1432: PUSH
1433: LD_INT 7
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 21
1442: PUSH
1443: LD_INT 2
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PPUSH
1454: CALL_OW 69
1458: PPUSH
1459: LD_INT 107
1461: PPUSH
1462: LD_INT 118
1464: PPUSH
1465: CALL_OW 114
// end ; end_of_file end_of_file
1469: LD_VAR 0 1
1473: RET
// every 1 do
1474: GO 1476
1476: DISABLE
// begin CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
1477: LD_INT 22
1479: PUSH
1480: LD_INT 1
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 21
1489: PUSH
1490: LD_INT 2
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: PPUSH
1501: CALL_OW 69
1505: PUSH
1506: LD_INT 1
1508: ARRAY
1509: PPUSH
1510: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
1514: LD_EXP 1
1518: PPUSH
1519: LD_STRING D2-JMM-1
1521: PPUSH
1522: CALL_OW 88
// Say ( Stevens , D2-Huck-1 ) ;
1526: LD_EXP 8
1530: PPUSH
1531: LD_STRING D2-Huck-1
1533: PPUSH
1534: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
1538: LD_EXP 1
1542: PPUSH
1543: LD_STRING D2-JMM-2
1545: PPUSH
1546: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
1550: LD_STRING M1
1552: PPUSH
1553: CALL_OW 337
// end ;
1557: END
// every 10 10$0 do
1558: GO 1560
1560: DISABLE
// begin SayRadio ( Powell , D3-Pow-1 ) ;
1561: LD_EXP 9
1565: PPUSH
1566: LD_STRING D3-Pow-1
1568: PPUSH
1569: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
1573: LD_EXP 1
1577: PPUSH
1578: LD_STRING D3-JMM-1
1580: PPUSH
1581: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
1585: LD_EXP 9
1589: PPUSH
1590: LD_STRING D3-Pow-2
1592: PPUSH
1593: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
1597: LD_EXP 1
1601: PPUSH
1602: LD_STRING D3-JMM-2
1604: PPUSH
1605: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
1609: LD_EXP 9
1613: PPUSH
1614: LD_STRING D3-Pow-3
1616: PPUSH
1617: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
1621: LD_EXP 1
1625: PPUSH
1626: LD_STRING D3-JMM-3
1628: PPUSH
1629: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
1633: LD_EXP 9
1637: PPUSH
1638: LD_STRING D3-Pow-4
1640: PPUSH
1641: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
1645: LD_EXP 1
1649: PPUSH
1650: LD_STRING D3-JMM-4
1652: PPUSH
1653: CALL_OW 88
// wait ( 0 0$30 ) ;
1657: LD_INT 1050
1659: PPUSH
1660: CALL_OW 67
// PrepareBurlak ;
1664: CALL 809 0 0
// BurlakArmy ;
1668: CALL 947 0 0
// end ;
1672: END
// every 0 0$1 trigger See ( 1 , Masha ) do
1673: LD_INT 1
1675: PPUSH
1676: LD_EXP 11
1680: PPUSH
1681: CALL_OW 292
1685: IFFALSE 1731
1687: GO 1689
1689: DISABLE
// begin DialogueOn ;
1690: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
1694: LD_EXP 11
1698: PPUSH
1699: CALL_OW 87
// Say ( JMM , D5-Sol1-1 ) ;
1703: LD_EXP 1
1707: PPUSH
1708: LD_STRING D5-Sol1-1
1710: PPUSH
1711: CALL_OW 88
// Say ( JMM , D5-JMM-1 ) ;
1715: LD_EXP 1
1719: PPUSH
1720: LD_STRING D5-JMM-1
1722: PPUSH
1723: CALL_OW 88
// DialogueOff ;
1727: CALL_OW 7
// end ;
1731: END
// every 0 0$1 do var i ;
1732: GO 1734
1734: DISABLE
1735: LD_INT 0
1737: PPUSH
// begin enable ;
1738: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
1739: LD_ADDR_VAR 0 1
1743: PUSH
1744: LD_INT 22
1746: PUSH
1747: LD_INT 7
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PPUSH
1754: CALL_OW 69
1758: PUSH
1759: FOR_IN
1760: IFFALSE 1840
// if IsInArea ( i , AllianceEscape ) then
1762: LD_VAR 0 1
1766: PPUSH
1767: LD_INT 4
1769: PPUSH
1770: CALL_OW 308
1774: IFFALSE 1838
// begin if i = Burlak then
1776: LD_VAR 0 1
1780: PUSH
1781: LD_EXP 10
1785: EQUAL
1786: IFFALSE 1829
// begin RemoveUnit ( i ) ;
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 64
// DialogueOn ;
1797: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
1801: LD_EXP 1
1805: PPUSH
1806: LD_STRING D5a-JMM-1
1808: PPUSH
1809: CALL_OW 88
// Say ( JMM , D5a-Sol1-1 ) ;
1813: LD_EXP 1
1817: PPUSH
1818: LD_STRING D5a-Sol1-1
1820: PPUSH
1821: CALL_OW 88
// DialogueOff ;
1825: CALL_OW 7
// end ; RemoveUnit ( i ) ;
1829: LD_VAR 0 1
1833: PPUSH
1834: CALL_OW 64
// end ;
1838: GO 1759
1840: POP
1841: POP
// end ;
1842: PPOPN 1
1844: END
// every 0 0$10 trigger IsPlaced ( Burlak ) and IsDying ( Burlak ) do
1845: LD_EXP 10
1849: PPUSH
1850: CALL_OW 305
1854: PUSH
1855: LD_EXP 10
1859: PPUSH
1860: CALL_OW 303
1864: AND
1865: IFFALSE 1894
1867: GO 1869
1869: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
1870: LD_EXP 1
1874: PPUSH
1875: LD_STRING D5b-JMM-1
1877: PPUSH
1878: CALL_OW 88
// Say ( JMM , D5b-Sol1-1 ) ;
1882: LD_EXP 1
1886: PPUSH
1887: LD_STRING D5b-Sol1-1
1889: PPUSH
1890: CALL_OW 88
// end ;
1894: END
// every 0 0$1 trigger IsDead ( Stevens ) do
1895: LD_EXP 8
1899: PPUSH
1900: CALL_OW 301
1904: IFFALSE 1945
1906: GO 1908
1908: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
1909: LD_EXP 1
1913: PPUSH
1914: LD_STRING D6-JMM-1
1916: PPUSH
1917: CALL_OW 88
// Say ( JMM , D6-Sol1-1 ) ;
1921: LD_EXP 1
1925: PPUSH
1926: LD_STRING D6-Sol1-1
1928: PPUSH
1929: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
1933: LD_EXP 1
1937: PPUSH
1938: LD_STRING D6-JMM-2
1940: PPUSH
1941: CALL_OW 88
// end ;
1945: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
1946: LD_INT 25
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 321
1956: PUSH
1957: LD_INT 2
1959: EQUAL
1960: IFFALSE 1977
1962: GO 1964
1964: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
1965: LD_EXP 8
1969: PPUSH
1970: LD_STRING D6-Huck-2
1972: PPUSH
1973: CALL_OW 88
// end ; end_of_file
1977: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if GetWeapon ( weapon ) = 8 and eventVar1 = 0 then
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 264
1987: PUSH
1988: LD_INT 8
1990: EQUAL
1991: PUSH
1992: LD_EXP 17
1996: PUSH
1997: LD_INT 0
1999: EQUAL
2000: AND
2001: IFFALSE 2035
// begin eventVar1 = 1 ;
2003: LD_ADDR_EXP 17
2007: PUSH
2008: LD_INT 1
2010: ST_TO_ADDR
// Say ( JMM , D6a-JMM-1 ) ;
2011: LD_EXP 1
2015: PPUSH
2016: LD_STRING D6a-JMM-1
2018: PPUSH
2019: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
2023: LD_EXP 9
2027: PPUSH
2028: LD_STRING D6a-Pow-1
2030: PPUSH
2031: CALL_OW 94
// end ; end ;
2035: PPOPN 5
2037: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
2038: LD_VAR 0 1
2042: PPUSH
2043: CALL_OW 264
2047: PUSH
2048: LD_INT 8
2050: EQUAL
2051: PUSH
2052: LD_EXP 18
2056: PUSH
2057: LD_INT 0
2059: EQUAL
2060: AND
2061: IFFALSE 2095
// begin eventVar2 = 1 ;
2063: LD_ADDR_EXP 18
2067: PUSH
2068: LD_INT 1
2070: ST_TO_ADDR
// Say ( JMM , D6b-JMM-1 ) ;
2071: LD_EXP 1
2075: PPUSH
2076: LD_STRING D6b-JMM-1
2078: PPUSH
2079: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
2083: LD_EXP 9
2087: PPUSH
2088: LD_STRING D6b-Pow-1
2090: PPUSH
2091: CALL_OW 94
// end ; end ; end_of_file
2095: PPOPN 2
2097: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2098: LD_INT 0
2100: PPUSH
2101: PPUSH
// if exist_mode then
2102: LD_VAR 0 2
2106: IFFALSE 2125
// unit := CreateCharacter ( ident ) else
2108: LD_ADDR_VAR 0 4
2112: PUSH
2113: LD_VAR 0 1
2117: PPUSH
2118: CALL_OW 34
2122: ST_TO_ADDR
2123: GO 2140
// unit := NewCharacter ( ident ) ;
2125: LD_ADDR_VAR 0 4
2129: PUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 25
2139: ST_TO_ADDR
// result := unit ;
2140: LD_ADDR_VAR 0 3
2144: PUSH
2145: LD_VAR 0 4
2149: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
2150: LD_VAR 0 3
2154: RET
