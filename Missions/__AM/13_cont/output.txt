// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// resources = [ ] ;
  77: LD_ADDR_EXP 24
  81: PUSH
  82: EMPTY
  83: ST_TO_ADDR
// vehicles = [ ] ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: EMPTY
  90: ST_TO_ADDR
// eventVar1 = 0 ;
  91: LD_ADDR_EXP 36
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// eventVar2 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar3 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar4 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar5 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// mission_prefix = 13f_ ;
 131: LD_ADDR_EXP 35
 135: PUSH
 136: LD_STRING 13f_
 138: ST_TO_ADDR
// debugMode = 0 ;
 139: LD_ADDR_EXP 41
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// PrepareVehicles ;
 147: CALL 1515 0 0
// PrepareHeroes ;
 151: CALL 477 0 0
// PrepareAmericansRandom ;
 155: CALL 1419 0 0
// end ;
 159: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 160: LD_EXP 41
 164: PUSH
 165: LD_INT 1
 167: EQUAL
 168: IFFALSE 474
 170: GO 172
 172: DISABLE
 173: LD_INT 0
 175: PPUSH
// begin enable ;
 176: ENABLE
// fogoff ( true ) ;
 177: LD_INT 1
 179: PPUSH
 180: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 184: LD_ADDR_VAR 0 1
 188: PUSH
 189: LD_INT 22
 191: PUSH
 192: LD_INT 1
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 21
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PPUSH
 213: CALL_OW 69
 217: PUSH
 218: FOR_IN
 219: IFFALSE 235
// SetLives ( i , 1000 ) ;
 221: LD_VAR 0 1
 225: PPUSH
 226: LD_INT 1000
 228: PPUSH
 229: CALL_OW 234
 233: GO 218
 235: POP
 236: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 237: LD_ADDR_VAR 0 1
 241: PUSH
 242: LD_INT 22
 244: PUSH
 245: LD_INT 1
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 30
 257: PUSH
 258: LD_INT 0
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: PUSH
 265: LD_INT 30
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: LIST
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PPUSH
 284: CALL_OW 69
 288: PUSH
 289: FOR_IN
 290: IFFALSE 314
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 292: LD_VAR 0 1
 296: PPUSH
 297: CALL_OW 274
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 9999
 307: PPUSH
 308: CALL_OW 277
 312: GO 289
 314: POP
 315: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 316: LD_ADDR_VAR 0 1
 320: PUSH
 321: LD_INT 22
 323: PUSH
 324: LD_INT 1
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 30
 336: PUSH
 337: LD_INT 0
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: LD_INT 30
 346: PUSH
 347: LD_INT 1
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PPUSH
 363: CALL_OW 69
 367: PUSH
 368: FOR_IN
 369: IFFALSE 393
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 371: LD_VAR 0 1
 375: PPUSH
 376: CALL_OW 274
 380: PPUSH
 381: LD_INT 2
 383: PPUSH
 384: LD_INT 9999
 386: PPUSH
 387: CALL_OW 277
 391: GO 368
 393: POP
 394: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 2
 412: PUSH
 413: LD_INT 30
 415: PUSH
 416: LD_INT 0
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: PUSH
 423: LD_INT 30
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: EMPTY
 430: LIST
 431: LIST
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: FOR_IN
 448: IFFALSE 472
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 450: LD_VAR 0 1
 454: PPUSH
 455: CALL_OW 274
 459: PPUSH
 460: LD_INT 3
 462: PPUSH
 463: LD_INT 9999
 465: PPUSH
 466: CALL_OW 277
 470: GO 447
 472: POP
 473: POP
// end ; end_of_file
 474: PPOPN 1
 476: END
// export function PrepareHeroes ; begin
 477: LD_INT 0
 479: PPUSH
// uc_side = 1 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 1
 487: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 488: LD_ADDR_EXP 1
 492: PUSH
 493: LD_STRING 13c_JMM
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL 5984 0 2
 503: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 504: LD_ADDR_EXP 2
 508: PUSH
 509: LD_STRING 13c_Stevens
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: CALL 5984 0 2
 519: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 520: LD_ADDR_EXP 3
 524: PUSH
 525: LD_STRING 13c_Lisa
 527: PPUSH
 528: LD_INT 1
 530: PPUSH
 531: CALL 5984 0 2
 535: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 536: LD_ADDR_EXP 4
 540: PUSH
 541: LD_STRING 13c_Donaldson
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL 5984 0 2
 551: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 552: LD_ADDR_EXP 5
 556: PUSH
 557: LD_STRING 13c_Bobby
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: CALL 5984 0 2
 567: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 568: LD_ADDR_EXP 6
 572: PUSH
 573: LD_STRING 13c_Cyrus
 575: PPUSH
 576: LD_INT 1
 578: PPUSH
 579: CALL 5984 0 2
 583: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 584: LD_ADDR_EXP 7
 588: PUSH
 589: LD_STRING 13c_Denis
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: CALL 5984 0 2
 599: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 600: LD_ADDR_EXP 8
 604: PUSH
 605: LD_STRING 13c_Brown
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 5984 0 2
 615: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_STRING 13c_Gladstone
 623: PPUSH
 624: LD_INT 1
 626: PPUSH
 627: CALL 5984 0 2
 631: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 632: LD_ADDR_EXP 10
 636: PUSH
 637: LD_STRING 13c_Houten
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL 5984 0 2
 647: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 648: LD_ADDR_EXP 11
 652: PUSH
 653: LD_STRING 13c_Cornel
 655: PPUSH
 656: LD_INT 1
 658: PPUSH
 659: CALL 5984 0 2
 663: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 664: LD_ADDR_EXP 12
 668: PUSH
 669: LD_STRING 13c_Gary
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: CALL 5984 0 2
 679: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 680: LD_ADDR_EXP 13
 684: PUSH
 685: LD_STRING 13c_Frank
 687: PPUSH
 688: LD_INT 1
 690: PPUSH
 691: CALL 5984 0 2
 695: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 696: LD_ADDR_EXP 14
 700: PUSH
 701: LD_STRING 13c_Kikuchi
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: CALL 5984 0 2
 711: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 712: LD_ADDR_EXP 15
 716: PUSH
 717: LD_STRING Powell
 719: PPUSH
 720: LD_INT 0
 722: PPUSH
 723: CALL 5984 0 2
 727: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 728: LD_EXP 1
 732: PPUSH
 733: LD_INT 22
 735: PUSH
 736: LD_INT 1
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 21
 745: PUSH
 746: LD_INT 2
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 58
 755: PUSH
 756: EMPTY
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: LIST
 763: PPUSH
 764: CALL_OW 69
 768: PUSH
 769: LD_INT 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 777: LD_EXP 2
 781: PPUSH
 782: LD_INT 22
 784: PUSH
 785: LD_INT 1
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 21
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 58
 804: PUSH
 805: EMPTY
 806: LIST
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: PUSH
 818: LD_INT 1
 820: ARRAY
 821: PPUSH
 822: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 826: LD_EXP 3
 830: PPUSH
 831: LD_INT 22
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 58
 853: PUSH
 854: EMPTY
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: LIST
 861: PPUSH
 862: CALL_OW 69
 866: PUSH
 867: LD_INT 1
 869: ARRAY
 870: PPUSH
 871: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 875: LD_EXP 4
 879: PPUSH
 880: LD_INT 22
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 21
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 58
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PPUSH
 911: CALL_OW 69
 915: PUSH
 916: LD_INT 1
 918: ARRAY
 919: PPUSH
 920: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 924: LD_EXP 5
 928: PPUSH
 929: LD_INT 22
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 21
 941: PUSH
 942: LD_INT 2
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 58
 951: PUSH
 952: EMPTY
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: PUSH
 965: LD_INT 1
 967: ARRAY
 968: PPUSH
 969: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 973: LD_EXP 6
 977: PPUSH
 978: LD_INT 22
 980: PUSH
 981: LD_INT 1
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 21
 990: PUSH
 991: LD_INT 2
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: PUSH
 998: LD_INT 58
1000: PUSH
1001: EMPTY
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 69
1013: PUSH
1014: LD_INT 1
1016: ARRAY
1017: PPUSH
1018: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1022: LD_EXP 7
1026: PPUSH
1027: LD_INT 22
1029: PUSH
1030: LD_INT 1
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 21
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 58
1049: PUSH
1050: EMPTY
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: PPUSH
1058: CALL_OW 69
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1071: LD_EXP 8
1075: PPUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 21
1088: PUSH
1089: LD_INT 2
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 58
1098: PUSH
1099: EMPTY
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PPUSH
1107: CALL_OW 69
1111: PUSH
1112: LD_INT 1
1114: ARRAY
1115: PPUSH
1116: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1120: LD_EXP 9
1124: PPUSH
1125: LD_INT 22
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: LD_INT 21
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 58
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: PPUSH
1156: CALL_OW 69
1160: PUSH
1161: LD_INT 1
1163: ARRAY
1164: PPUSH
1165: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1169: LD_EXP 10
1173: PPUSH
1174: LD_INT 22
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: LD_INT 2
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 58
1196: PUSH
1197: EMPTY
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: PPUSH
1205: CALL_OW 69
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1218: LD_EXP 11
1222: PPUSH
1223: LD_INT 22
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PUSH
1233: LD_INT 21
1235: PUSH
1236: LD_INT 2
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 58
1245: PUSH
1246: EMPTY
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: PUSH
1259: LD_INT 1
1261: ARRAY
1262: PPUSH
1263: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1267: LD_EXP 12
1271: PPUSH
1272: LD_INT 22
1274: PUSH
1275: LD_INT 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 21
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 58
1294: PUSH
1295: EMPTY
1296: LIST
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: PUSH
1308: LD_INT 1
1310: ARRAY
1311: PPUSH
1312: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1316: LD_EXP 13
1320: PPUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 21
1333: PUSH
1334: LD_INT 2
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 58
1343: PUSH
1344: EMPTY
1345: LIST
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PPUSH
1361: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1365: LD_EXP 14
1369: PPUSH
1370: LD_INT 22
1372: PUSH
1373: LD_INT 1
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 58
1392: PUSH
1393: EMPTY
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: PPUSH
1401: CALL_OW 69
1405: PUSH
1406: LD_INT 1
1408: ARRAY
1409: PPUSH
1410: CALL_OW 52
// end ;
1414: LD_VAR 0 1
1418: RET
// export function PrepareAmericansRandom ; var i ; begin
1419: LD_INT 0
1421: PPUSH
1422: PPUSH
// uc_side = 1 ;
1423: LD_ADDR_OWVAR 20
1427: PUSH
1428: LD_INT 1
1430: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1431: LD_ADDR_EXP 16
1435: PUSH
1436: LD_STRING 13c_others
1438: PPUSH
1439: CALL_OW 31
1443: ST_TO_ADDR
// for i in others13 do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_EXP 16
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1508
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1457: LD_VAR 0 2
1461: PPUSH
1462: LD_INT 22
1464: PUSH
1465: LD_INT 1
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 21
1474: PUSH
1475: LD_INT 2
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 58
1484: PUSH
1485: EMPTY
1486: LIST
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: LIST
1492: PPUSH
1493: CALL_OW 69
1497: PUSH
1498: LD_INT 1
1500: ARRAY
1501: PPUSH
1502: CALL_OW 52
1506: GO 1454
1508: POP
1509: POP
// end ;
1510: LD_VAR 0 1
1514: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1515: LD_INT 0
1517: PPUSH
1518: PPUSH
1519: PPUSH
1520: PPUSH
1521: PPUSH
1522: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1523: LD_ADDR_VAR 0 5
1527: PUSH
1528: LD_STRING 13_VehiclesIn13_1
1530: PPUSH
1531: EMPTY
1532: PPUSH
1533: CALL_OW 30
1537: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1538: LD_ADDR_EXP 24
1542: PUSH
1543: LD_STRING 13_ResourcesInCargo13_1
1545: PPUSH
1546: EMPTY
1547: PPUSH
1548: CALL_OW 30
1552: ST_TO_ADDR
// cargoList = [ ] ;
1553: LD_ADDR_VAR 0 6
1557: PUSH
1558: EMPTY
1559: ST_TO_ADDR
// uc_side = 1 ;
1560: LD_ADDR_OWVAR 20
1564: PUSH
1565: LD_INT 1
1567: ST_TO_ADDR
// if vehicles > 0 then
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 0
1575: GREATER
1576: IFFALSE 1931
// begin for i := 1 to vehicles do
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: DOUBLE
1584: LD_INT 1
1586: DEC
1587: ST_TO_ADDR
1588: LD_VAR 0 5
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1743
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1596: LD_ADDR_OWVAR 21
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_VAR 0 2
1610: ARRAY
1611: PUSH
1612: LD_INT 1
1614: ARRAY
1615: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1616: LD_ADDR_OWVAR 37
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_VAR 0 2
1630: ARRAY
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1636: LD_ADDR_OWVAR 39
1640: PUSH
1641: LD_VAR 0 5
1645: PUSH
1646: LD_VAR 0 2
1650: ARRAY
1651: PUSH
1652: LD_INT 3
1654: ARRAY
1655: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1656: LD_ADDR_OWVAR 38
1660: PUSH
1661: LD_VAR 0 5
1665: PUSH
1666: LD_VAR 0 2
1670: ARRAY
1671: PUSH
1672: LD_INT 4
1674: ARRAY
1675: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1676: LD_ADDR_OWVAR 40
1680: PUSH
1681: LD_VAR 0 5
1685: PUSH
1686: LD_VAR 0 2
1690: ARRAY
1691: PUSH
1692: LD_INT 5
1694: ARRAY
1695: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1696: LD_ADDR_OWVAR 41
1700: PUSH
1701: LD_INT 40
1703: ST_TO_ADDR
// veh = CreateVehicle ;
1704: LD_ADDR_VAR 0 4
1708: PUSH
1709: CALL_OW 45
1713: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1714: LD_VAR 0 4
1718: PPUSH
1719: LD_INT 3
1721: PPUSH
1722: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1726: LD_VAR 0 4
1730: PPUSH
1731: LD_INT 2
1733: PPUSH
1734: LD_INT 0
1736: PPUSH
1737: CALL_OW 49
// end ;
1741: GO 1593
1743: POP
1744: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1745: LD_ADDR_VAR 0 6
1749: PUSH
1750: LD_INT 22
1752: PUSH
1753: LD_INT 1
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 21
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 34
1772: PUSH
1773: LD_INT 12
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: ST_TO_ADDR
// if cargoList > 0 then
1790: LD_VAR 0 6
1794: PUSH
1795: LD_INT 0
1797: GREATER
1798: IFFALSE 1931
// for i = 1 to cargoList do
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: DOUBLE
1806: LD_INT 1
1808: DEC
1809: ST_TO_ADDR
1810: LD_VAR 0 6
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1929
// begin if resources > 0 then
1818: LD_EXP 24
1822: PUSH
1823: LD_INT 0
1825: GREATER
1826: IFFALSE 1927
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1828: LD_VAR 0 6
1832: PUSH
1833: LD_VAR 0 2
1837: ARRAY
1838: PPUSH
1839: LD_INT 1
1841: PPUSH
1842: LD_EXP 24
1846: PUSH
1847: LD_VAR 0 2
1851: ARRAY
1852: PUSH
1853: LD_INT 1
1855: ARRAY
1856: PPUSH
1857: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1861: LD_VAR 0 6
1865: PUSH
1866: LD_VAR 0 2
1870: ARRAY
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_EXP 24
1879: PUSH
1880: LD_VAR 0 2
1884: ARRAY
1885: PUSH
1886: LD_INT 2
1888: ARRAY
1889: PPUSH
1890: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1894: LD_VAR 0 6
1898: PUSH
1899: LD_VAR 0 2
1903: ARRAY
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_EXP 24
1912: PUSH
1913: LD_VAR 0 2
1917: ARRAY
1918: PUSH
1919: LD_INT 3
1921: ARRAY
1922: PPUSH
1923: CALL_OW 291
// end ; end ;
1927: GO 1815
1929: POP
1930: POP
// end ; end ;
1931: LD_VAR 0 1
1935: RET
// export function PowellSupport ; var i , veh , un ; begin
1936: LD_INT 0
1938: PPUSH
1939: PPUSH
1940: PPUSH
1941: PPUSH
// for i = 1 to 3 do
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_INT 3
1954: PUSH
1955: FOR_TO
1956: IFFALSE 2157
// begin uc_nation = 1 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// uc_side = 1 ;
1966: LD_ADDR_OWVAR 20
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// vc_engine = 3 ;
1974: LD_ADDR_OWVAR 39
1978: PUSH
1979: LD_INT 3
1981: ST_TO_ADDR
// vc_control = 1 ;
1982: LD_ADDR_OWVAR 38
1986: PUSH
1987: LD_INT 1
1989: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1990: LD_ADDR_OWVAR 40
1994: PUSH
1995: LD_INT 9
1997: PUSH
1998: LD_INT 5
2000: PUSH
2001: LD_INT 4
2003: PUSH
2004: LD_INT 7
2006: PUSH
2007: LD_INT 6
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 1
2019: PPUSH
2020: LD_INT 5
2022: PPUSH
2023: CALL_OW 12
2027: ARRAY
2028: ST_TO_ADDR
// if vc_weapon = 6 then
2029: LD_OWVAR 40
2033: PUSH
2034: LD_INT 6
2036: EQUAL
2037: IFFALSE 2049
// vc_chassis = 4 else
2039: LD_ADDR_OWVAR 37
2043: PUSH
2044: LD_INT 4
2046: ST_TO_ADDR
2047: GO 2057
// vc_chassis = 3 ;
2049: LD_ADDR_OWVAR 37
2053: PUSH
2054: LD_INT 3
2056: ST_TO_ADDR
// veh = CreateVehicle ;
2057: LD_ADDR_VAR 0 3
2061: PUSH
2062: CALL_OW 45
2066: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2067: LD_VAR 0 3
2071: PPUSH
2072: LD_INT 2
2074: PPUSH
2075: LD_INT 0
2077: PPUSH
2078: CALL_OW 49
// SetDir ( veh , 1 ) ;
2082: LD_VAR 0 3
2086: PPUSH
2087: LD_INT 1
2089: PPUSH
2090: CALL_OW 233
// hc_gallery =  ;
2094: LD_ADDR_OWVAR 33
2098: PUSH
2099: LD_STRING 
2101: ST_TO_ADDR
// hc_name =  ;
2102: LD_ADDR_OWVAR 26
2106: PUSH
2107: LD_STRING 
2109: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
2110: LD_INT 0
2112: PPUSH
2113: LD_INT 3
2115: PPUSH
2116: LD_INT 7
2118: PPUSH
2119: LD_INT 10
2121: PPUSH
2122: CALL_OW 12
2126: PPUSH
2127: CALL_OW 380
// un = CreateHuman ;
2131: LD_ADDR_VAR 0 4
2135: PUSH
2136: CALL_OW 44
2140: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2141: LD_VAR 0 4
2145: PPUSH
2146: LD_VAR 0 3
2150: PPUSH
2151: CALL_OW 52
// end ;
2155: GO 1955
2157: POP
2158: POP
// end ; end_of_file
2159: LD_VAR 0 1
2163: RET
// export function PrepareBurlak ; begin
2164: LD_INT 0
2166: PPUSH
// uc_side = 7 ;
2167: LD_ADDR_OWVAR 20
2171: PUSH
2172: LD_INT 7
2174: ST_TO_ADDR
// uc_nation = 3 ;
2175: LD_ADDR_OWVAR 21
2179: PUSH
2180: LD_INT 3
2182: ST_TO_ADDR
// vc_engine = 3 ;
2183: LD_ADDR_OWVAR 39
2187: PUSH
2188: LD_INT 3
2190: ST_TO_ADDR
// vc_control = 1 ;
2191: LD_ADDR_OWVAR 38
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// vc_weapon = 46 ;
2199: LD_ADDR_OWVAR 40
2203: PUSH
2204: LD_INT 46
2206: ST_TO_ADDR
// vc_chassis = 24 ;
2207: LD_ADDR_OWVAR 37
2211: PUSH
2212: LD_INT 24
2214: ST_TO_ADDR
// Masha = CreateVehicle ;
2215: LD_ADDR_EXP 18
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2225: LD_EXP 18
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: LD_INT 0
2235: PPUSH
2236: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2240: LD_EXP 18
2244: PPUSH
2245: LD_INT 1
2247: PPUSH
2248: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2252: LD_ADDR_EXP 17
2256: PUSH
2257: LD_STRING Burlak
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL 5984 0 2
2267: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2268: LD_EXP 17
2272: PPUSH
2273: LD_EXP 18
2277: PPUSH
2278: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2282: LD_EXP 18
2286: PPUSH
2287: LD_INT 107
2289: PPUSH
2290: LD_INT 118
2292: PPUSH
2293: CALL_OW 114
// spawnBurlak = 1 ;
2297: LD_ADDR_EXP 27
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// end ;
2305: LD_VAR 0 1
2309: RET
// export function BurlakArmy ; var i , veh ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
// uc_side = 7 ;
2315: LD_ADDR_OWVAR 20
2319: PUSH
2320: LD_INT 7
2322: ST_TO_ADDR
// uc_nation = 3 ;
2323: LD_ADDR_OWVAR 21
2327: PUSH
2328: LD_INT 3
2330: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2331: LD_ADDR_EXP 19
2335: PUSH
2336: LD_STRING Gnyevko
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL 5984 0 2
2346: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2347: LD_ADDR_EXP 20
2351: PUSH
2352: LD_STRING Titov
2354: PPUSH
2355: LD_INT 0
2357: PPUSH
2358: CALL 5984 0 2
2362: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2363: LD_ADDR_EXP 21
2367: PUSH
2368: LD_STRING Xavier2
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL 5984 0 2
2378: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2379: LD_ADDR_EXP 22
2383: PUSH
2384: LD_STRING Belkov
2386: PPUSH
2387: LD_INT 0
2389: PPUSH
2390: CALL 5984 0 2
2394: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2395: LD_ADDR_EXP 23
2399: PUSH
2400: LD_STRING Lipshchin
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: CALL 5984 0 2
2410: ST_TO_ADDR
// for i = 1 to 5 do
2411: LD_ADDR_VAR 0 2
2415: PUSH
2416: DOUBLE
2417: LD_INT 1
2419: DEC
2420: ST_TO_ADDR
2421: LD_INT 5
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2513
// begin vc_engine = 3 ;
2427: LD_ADDR_OWVAR 39
2431: PUSH
2432: LD_INT 3
2434: ST_TO_ADDR
// vc_control = 1 ;
2435: LD_ADDR_OWVAR 38
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2443: LD_ADDR_OWVAR 40
2447: PUSH
2448: LD_INT 43
2450: PUSH
2451: LD_INT 44
2453: PUSH
2454: LD_INT 45
2456: PUSH
2457: LD_INT 49
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: LD_INT 1
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: CALL_OW 12
2476: ARRAY
2477: ST_TO_ADDR
// vc_chassis = 22 ;
2478: LD_ADDR_OWVAR 37
2482: PUSH
2483: LD_INT 22
2485: ST_TO_ADDR
// veh = CreateVehicle ;
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: CALL_OW 45
2495: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2496: LD_VAR 0 3
2500: PPUSH
2501: LD_INT 3
2503: PPUSH
2504: LD_INT 0
2506: PPUSH
2507: CALL_OW 49
// end ;
2511: GO 2424
2513: POP
2514: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2515: LD_EXP 19
2519: PPUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 21
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 58
2542: PUSH
2543: EMPTY
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: LIST
2550: PPUSH
2551: CALL_OW 69
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2564: LD_EXP 20
2568: PPUSH
2569: LD_INT 22
2571: PUSH
2572: LD_INT 7
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 21
2581: PUSH
2582: LD_INT 2
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 58
2591: PUSH
2592: EMPTY
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2613: LD_EXP 21
2617: PPUSH
2618: LD_INT 22
2620: PUSH
2621: LD_INT 7
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 21
2630: PUSH
2631: LD_INT 2
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: PUSH
2638: LD_INT 58
2640: PUSH
2641: EMPTY
2642: LIST
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PPUSH
2649: CALL_OW 69
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2662: LD_EXP 22
2666: PPUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 7
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 21
2679: PUSH
2680: LD_INT 2
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 58
2689: PUSH
2690: EMPTY
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PPUSH
2698: CALL_OW 69
2702: PUSH
2703: LD_INT 1
2705: ARRAY
2706: PPUSH
2707: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2711: LD_EXP 23
2715: PPUSH
2716: LD_INT 22
2718: PUSH
2719: LD_INT 7
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 21
2728: PUSH
2729: LD_INT 2
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 58
2738: PUSH
2739: EMPTY
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: PUSH
2752: LD_INT 1
2754: ARRAY
2755: PPUSH
2756: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2760: LD_EXP 19
2764: PPUSH
2765: LD_INT 3
2767: PPUSH
2768: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2772: LD_EXP 20
2776: PUSH
2777: LD_EXP 23
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: LD_INT 9
2788: PPUSH
2789: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2793: LD_INT 22
2795: PUSH
2796: LD_INT 7
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 21
2805: PUSH
2806: LD_INT 2
2808: PUSH
2809: EMPTY
2810: LIST
2811: LIST
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PPUSH
2817: CALL_OW 69
2821: PPUSH
2822: LD_INT 107
2824: PPUSH
2825: LD_INT 118
2827: PPUSH
2828: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2832: LD_INT 35
2834: PPUSH
2835: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2839: LD_INT 22
2841: PUSH
2842: LD_INT 7
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: LD_INT 21
2851: PUSH
2852: LD_INT 2
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 34
2861: PUSH
2862: LD_INT 49
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: PPUSH
2874: CALL_OW 69
2878: PPUSH
2879: LD_EXP 18
2883: PPUSH
2884: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2888: LD_INT 22
2890: PUSH
2891: LD_INT 7
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: PUSH
2898: LD_INT 21
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: LD_INT 34
2910: PUSH
2911: LD_INT 49
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: PPUSH
2923: CALL_OW 69
2927: PUSH
2928: LD_INT 0
2930: EQUAL
2931: PUSH
2932: LD_EXP 18
2936: PPUSH
2937: CALL_OW 303
2941: OR
2942: IFFALSE 2832
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2944: LD_INT 22
2946: PUSH
2947: LD_INT 7
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 21
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PPUSH
2968: CALL_OW 69
2972: PPUSH
2973: LD_INT 107
2975: PPUSH
2976: LD_INT 118
2978: PPUSH
2979: CALL_OW 114
// end ; end_of_file
2983: LD_VAR 0 1
2987: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2988: LD_INT 22
2990: PUSH
2991: LD_INT 8
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 33
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 69
3016: PUSH
3017: LD_INT 0
3019: GREATER
3020: PUSH
3021: LD_INT 22
3023: PUSH
3024: LD_INT 8
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 34
3033: PUSH
3034: LD_INT 31
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 69
3049: PUSH
3050: LD_INT 0
3052: EQUAL
3053: AND
3054: IFFALSE 3277
3056: GO 3058
3058: DISABLE
3059: LD_INT 0
3061: PPUSH
// begin enable ;
3062: ENABLE
// uc_side = 8 ;
3063: LD_ADDR_OWVAR 20
3067: PUSH
3068: LD_INT 8
3070: ST_TO_ADDR
// uc_nation = 2 ;
3071: LD_ADDR_OWVAR 21
3075: PUSH
3076: LD_INT 2
3078: ST_TO_ADDR
// vc_engine = 3 ;
3079: LD_ADDR_OWVAR 39
3083: PUSH
3084: LD_INT 3
3086: ST_TO_ADDR
// vc_control = 1 ;
3087: LD_ADDR_OWVAR 38
3091: PUSH
3092: LD_INT 1
3094: ST_TO_ADDR
// vc_weapon = 31 ;
3095: LD_ADDR_OWVAR 40
3099: PUSH
3100: LD_INT 31
3102: ST_TO_ADDR
// vc_chassis = 14 ;
3103: LD_ADDR_OWVAR 37
3107: PUSH
3108: LD_INT 14
3110: ST_TO_ADDR
// arControlTower = CreateVehicle ;
3111: LD_ADDR_EXP 33
3115: PUSH
3116: CALL_OW 45
3120: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3121: LD_EXP 33
3125: PPUSH
3126: LD_INT 8
3128: PUSH
3129: LD_INT 9
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 2
3141: PPUSH
3142: CALL_OW 12
3146: ARRAY
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 49
// hc_name =  ;
3155: LD_ADDR_OWVAR 26
3159: PUSH
3160: LD_STRING 
3162: ST_TO_ADDR
// hc_gallery =  ;
3163: LD_ADDR_OWVAR 33
3167: PUSH
3168: LD_STRING 
3170: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 3
3176: PPUSH
3177: LD_INT 10
3179: PPUSH
3180: CALL_OW 380
// arDriver = CreateHuman ;
3184: LD_ADDR_EXP 34
3188: PUSH
3189: CALL_OW 44
3193: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3194: LD_EXP 34
3198: PPUSH
3199: LD_EXP 33
3203: PPUSH
3204: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 8
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 33
3225: PUSH
3226: LD_INT 2
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 3
3235: PUSH
3236: LD_INT 61
3238: PUSH
3239: EMPTY
3240: LIST
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: PUSH
3256: FOR_IN
3257: IFFALSE 3275
// ComLinkTo ( i , arDriver ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: LD_EXP 34
3268: PPUSH
3269: CALL_OW 135
3273: GO 3256
3275: POP
3276: POP
// end ;
3277: PPOPN 1
3279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3280: LD_INT 22
3282: PUSH
3283: LD_INT 8
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: LD_INT 21
3292: PUSH
3293: LD_INT 2
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 33
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 69
3319: PUSH
3320: LD_INT 0
3322: EQUAL
3323: IFFALSE 3347
3325: GO 3327
3327: DISABLE
// begin enable ;
3328: ENABLE
// RemoveUnit ( arControlTower ) ;
3329: LD_EXP 33
3333: PPUSH
3334: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3338: LD_EXP 34
3342: PPUSH
3343: CALL_OW 64
// end ;
3347: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3348: LD_EXP 31
3352: PUSH
3353: LD_INT 0
3355: GREATER
3356: IFFALSE 3520
3358: GO 3360
3360: DISABLE
3361: LD_INT 0
3363: PPUSH
3364: PPUSH
// begin enable ;
3365: ENABLE
// rnd = 0 ;
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// uc_side = 2 ;
3374: LD_ADDR_OWVAR 20
3378: PUSH
3379: LD_INT 2
3381: ST_TO_ADDR
// uc_nation = 2 ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_INT 2
3389: ST_TO_ADDR
// hc_name =  ;
3390: LD_ADDR_OWVAR 26
3394: PUSH
3395: LD_STRING 
3397: ST_TO_ADDR
// hc_gallery =  ;
3398: LD_ADDR_OWVAR 33
3402: PUSH
3403: LD_STRING 
3405: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3406: LD_INT 0
3408: PPUSH
3409: LD_INT 4
3411: PPUSH
3412: LD_INT 10
3414: PPUSH
3415: CALL_OW 380
// un = CreateHuman ;
3419: LD_ADDR_VAR 0 1
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3429: LD_VAR 0 1
3433: PPUSH
3434: LD_INT 8
3436: PUSH
3437: LD_INT 9
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: LD_INT 1
3446: PPUSH
3447: LD_INT 2
3449: PPUSH
3450: CALL_OW 12
3454: ARRAY
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3463: LD_ADDR_VAR 0 2
3467: PUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_EXP 31
3475: PPUSH
3476: CALL_OW 12
3480: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3481: LD_VAR 0 1
3485: PPUSH
3486: LD_EXP 31
3490: PUSH
3491: LD_VAR 0 2
3495: ARRAY
3496: PUSH
3497: LD_INT 1
3499: ARRAY
3500: PPUSH
3501: LD_EXP 31
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PUSH
3512: LD_INT 2
3514: ARRAY
3515: PPUSH
3516: CALL_OW 158
// end ; end_of_file
3520: PPOPN 2
3522: END
// every 1 do
3523: GO 3525
3525: DISABLE
// begin InGameOn ;
3526: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3530: LD_INT 22
3532: PUSH
3533: LD_INT 1
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: LD_INT 21
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 69
3558: PUSH
3559: LD_INT 1
3561: ARRAY
3562: PPUSH
3563: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3567: LD_INT 22
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: LD_INT 21
3579: PUSH
3580: LD_INT 2
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: PPUSH
3591: CALL_OW 69
3595: PPUSH
3596: LD_INT 69
3598: PPUSH
3599: LD_INT 94
3601: PPUSH
3602: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3606: LD_EXP 1
3610: PPUSH
3611: LD_STRING D2-JMM-1
3613: PPUSH
3614: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3618: LD_INT 22
3620: PUSH
3621: LD_INT 1
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: PUSH
3628: LD_INT 21
3630: PUSH
3631: LD_INT 2
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: CALL_OW 69
3646: PUSH
3647: LD_INT 1
3649: ARRAY
3650: PPUSH
3651: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3655: LD_EXP 2
3659: PPUSH
3660: LD_STRING D2-Huck-1
3662: PPUSH
3663: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3667: LD_INT 22
3669: PUSH
3670: LD_INT 1
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: LD_INT 1
3698: ARRAY
3699: PPUSH
3700: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3704: LD_EXP 1
3708: PPUSH
3709: LD_STRING D2-JMM-2
3711: PPUSH
3712: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3716: LD_INT 22
3718: PUSH
3719: LD_INT 1
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PUSH
3726: LD_INT 21
3728: PUSH
3729: LD_INT 2
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: PPUSH
3740: CALL_OW 69
3744: PUSH
3745: LD_INT 1
3747: ARRAY
3748: PPUSH
3749: CALL_OW 87
// InGameOff ;
3753: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3757: LD_STRING M1
3759: PPUSH
3760: CALL_OW 337
// SaveForQuickRestart ;
3764: CALL_OW 22
// end ;
3768: END
// every 10 10$0 do
3769: GO 3771
3771: DISABLE
// begin DialogueOn ;
3772: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3776: LD_EXP 15
3780: PPUSH
3781: LD_STRING D3-Pow-1
3783: PPUSH
3784: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3788: LD_EXP 1
3792: PPUSH
3793: LD_STRING D3-JMM-1
3795: PPUSH
3796: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3800: LD_EXP 15
3804: PPUSH
3805: LD_STRING D3-Pow-2
3807: PPUSH
3808: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3812: LD_EXP 1
3816: PPUSH
3817: LD_STRING D3-JMM-2
3819: PPUSH
3820: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3824: LD_EXP 15
3828: PPUSH
3829: LD_STRING D3-Pow-3
3831: PPUSH
3832: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3836: LD_EXP 1
3840: PPUSH
3841: LD_STRING D3-JMM-3
3843: PPUSH
3844: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3848: LD_EXP 15
3852: PPUSH
3853: LD_STRING D3-Pow-4
3855: PPUSH
3856: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3860: LD_EXP 1
3864: PPUSH
3865: LD_STRING D3-JMM-4
3867: PPUSH
3868: CALL_OW 88
// DialogueOff ;
3872: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3876: LD_STRING M2
3878: PPUSH
3879: CALL_OW 337
// wait ( 2 2$30 ) ;
3883: LD_INT 5250
3885: PPUSH
3886: CALL_OW 67
// PrepareBurlak ;
3890: CALL 2164 0 0
// BurlakArmy ;
3894: CALL 2310 0 0
// end ;
3898: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3899: LD_INT 1
3901: PPUSH
3902: LD_EXP 18
3906: PPUSH
3907: CALL_OW 292
3911: IFFALSE 4081
3913: GO 3915
3915: DISABLE
// begin DialogueOn ;
3916: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3920: LD_EXP 18
3924: PPUSH
3925: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3929: LD_INT 22
3931: PUSH
3932: LD_INT 1
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 26
3941: PUSH
3942: LD_INT 1
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: LD_INT 2
3951: PUSH
3952: LD_INT 25
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 25
3964: PUSH
3965: LD_INT 2
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 25
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: PUSH
3982: LD_INT 25
3984: PUSH
3985: LD_INT 4
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 25
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 25
4004: PUSH
4005: LD_INT 8
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: PPUSH
4026: CALL_OW 69
4030: PPUSH
4031: LD_STRING D5-Sol1-1
4033: PPUSH
4034: LD_STRING D5-FSol1-1
4036: PPUSH
4037: CALL 6041 0 3
// Say ( JMM , D5-JMM-1 ) ;
4041: LD_EXP 1
4045: PPUSH
4046: LD_STRING D5-JMM-1
4048: PPUSH
4049: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
4053: LD_EXP 17
4057: PPUSH
4058: LD_STRING DAmer-Bur-1
4060: PPUSH
4061: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DAmer-JMM-1
4072: PPUSH
4073: CALL_OW 88
// DialogueOff ;
4077: CALL_OW 7
// end ;
4081: END
// every 0 0$1 do var i ;
4082: GO 4084
4084: DISABLE
4085: LD_INT 0
4087: PPUSH
// begin enable ;
4088: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
4089: LD_ADDR_VAR 0 1
4093: PUSH
4094: LD_INT 22
4096: PUSH
4097: LD_INT 7
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PPUSH
4104: CALL_OW 69
4108: PUSH
4109: FOR_IN
4110: IFFALSE 4346
// if IsInArea ( i , AllianceEscape ) then
4112: LD_VAR 0 1
4116: PPUSH
4117: LD_INT 4
4119: PPUSH
4120: CALL_OW 308
4124: IFFALSE 4344
// begin if i = Burlak or i = Masha then
4126: LD_VAR 0 1
4130: PUSH
4131: LD_EXP 17
4135: EQUAL
4136: PUSH
4137: LD_VAR 0 1
4141: PUSH
4142: LD_EXP 18
4146: EQUAL
4147: OR
4148: IFFALSE 4306
// begin RemoveUnit ( i ) ;
4150: LD_VAR 0 1
4154: PPUSH
4155: CALL_OW 64
// DialogueOn ;
4159: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
4163: LD_EXP 1
4167: PPUSH
4168: LD_STRING D5a-JMM-1
4170: PPUSH
4171: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
4175: LD_INT 22
4177: PUSH
4178: LD_INT 1
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 26
4187: PUSH
4188: LD_INT 1
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: LD_INT 25
4200: PUSH
4201: LD_INT 1
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: LD_INT 25
4210: PUSH
4211: LD_INT 2
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 25
4220: PUSH
4221: LD_INT 3
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 25
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 25
4240: PUSH
4241: LD_INT 5
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: LD_INT 25
4250: PUSH
4251: LD_INT 8
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: PPUSH
4272: CALL_OW 69
4276: PPUSH
4277: LD_STRING D5a-Sol1-1
4279: PPUSH
4280: LD_STRING D5-FSol1-1
4282: PPUSH
4283: CALL 6041 0 3
// DialogueOff ;
4287: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4291: LD_STRING M2b
4293: PPUSH
4294: CALL_OW 337
// spawnBurlak = 0 ;
4298: LD_ADDR_EXP 27
4302: PUSH
4303: LD_INT 0
4305: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4306: LD_VAR 0 1
4310: PPUSH
4311: CALL_OW 264
4315: PUSH
4316: LD_INT 49
4318: EQUAL
4319: IFFALSE 4335
// SetLives ( i , 1 ) else
4321: LD_VAR 0 1
4325: PPUSH
4326: LD_INT 1
4328: PPUSH
4329: CALL_OW 234
4333: GO 4344
// RemoveUnit ( i ) ;
4335: LD_VAR 0 1
4339: PPUSH
4340: CALL_OW 64
// end ;
4344: GO 4109
4346: POP
4347: POP
// end ;
4348: PPOPN 1
4350: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4351: LD_EXP 18
4355: PPUSH
4356: CALL_OW 256
4360: PUSH
4361: LD_INT 500
4363: LESS
4364: PUSH
4365: LD_EXP 18
4369: PPUSH
4370: CALL_OW 255
4374: PUSH
4375: LD_INT 7
4377: EQUAL
4378: AND
4379: IFFALSE 4399
4381: GO 4383
4383: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4384: LD_EXP 18
4388: PPUSH
4389: LD_INT 107
4391: PPUSH
4392: LD_INT 118
4394: PPUSH
4395: CALL_OW 111
4399: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4400: LD_EXP 17
4404: PPUSH
4405: CALL_OW 301
4409: PUSH
4410: LD_EXP 27
4414: PUSH
4415: LD_INT 1
4417: EQUAL
4418: AND
4419: IFFALSE 4490
4421: GO 4423
4423: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4424: LD_EXP 1
4428: PPUSH
4429: LD_STRING D5b-JMM-1
4431: PPUSH
4432: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D5b-Sol1-1 ,  ) ;
4436: LD_INT 22
4438: PUSH
4439: LD_INT 1
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 26
4448: PUSH
4449: LD_INT 1
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 69
4464: PPUSH
4465: LD_STRING D5b-Sol1-1
4467: PPUSH
4468: LD_STRING 
4470: PPUSH
4471: CALL 6041 0 3
// ChangeMissionObjectives ( M2a ) ;
4475: LD_STRING M2a
4477: PPUSH
4478: CALL_OW 337
// burlakStatus = 1 ;
4482: LD_ADDR_EXP 28
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// end ;
4490: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4491: LD_EXP 2
4495: PPUSH
4496: CALL_OW 301
4500: IFFALSE 4648
4502: GO 4504
4504: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4505: LD_EXP 1
4509: PPUSH
4510: LD_STRING D6-JMM-1
4512: PPUSH
4513: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D6-Sol1-1 ,  ) ;
4517: LD_INT 22
4519: PUSH
4520: LD_INT 1
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: PUSH
4527: LD_INT 26
4529: PUSH
4530: LD_INT 1
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PUSH
4537: LD_INT 2
4539: PUSH
4540: LD_INT 25
4542: PUSH
4543: LD_INT 1
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 25
4552: PUSH
4553: LD_INT 2
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 25
4562: PUSH
4563: LD_INT 3
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 25
4572: PUSH
4573: LD_INT 4
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: PUSH
4580: LD_INT 25
4582: PUSH
4583: LD_INT 5
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 8
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_STRING D6-Sol1-1
4621: PPUSH
4622: LD_STRING 
4624: PPUSH
4625: CALL 6041 0 3
// Say ( JMM , D6-JMM-2 ) ;
4629: LD_EXP 1
4633: PPUSH
4634: LD_STRING D6-JMM-2
4636: PPUSH
4637: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4641: LD_STRING M1a
4643: PPUSH
4644: CALL_OW 337
// end ;
4648: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4649: LD_INT 25
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 321
4659: PUSH
4660: LD_INT 2
4662: EQUAL
4663: IFFALSE 4680
4665: GO 4667
4667: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4668: LD_EXP 2
4672: PPUSH
4673: LD_STRING D6-Huck-2
4675: PPUSH
4676: CALL_OW 88
// end ;
4680: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4681: LD_INT 22
4683: PUSH
4684: LD_INT 1
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: PUSH
4691: LD_INT 2
4693: PUSH
4694: LD_INT 34
4696: PUSH
4697: LD_INT 8
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 35
4706: PUSH
4707: LD_INT 8
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PPUSH
4723: CALL_OW 69
4727: PUSH
4728: LD_INT 0
4730: GREATER
4731: IFFALSE 4923
4733: GO 4735
4735: DISABLE
4736: LD_INT 0
4738: PPUSH
4739: PPUSH
// begin enable ;
4740: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4741: LD_ADDR_VAR 0 1
4745: PUSH
4746: LD_INT 5
4748: PPUSH
4749: LD_INT 22
4751: PUSH
4752: LD_INT 1
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: LD_INT 21
4761: PUSH
4762: LD_INT 3
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 30
4771: PUSH
4772: LD_INT 1
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: LD_INT 57
4784: PUSH
4785: EMPTY
4786: LIST
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 70
4802: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: LD_INT 5
4810: PPUSH
4811: LD_INT 22
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 21
4823: PUSH
4824: LD_INT 3
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 30
4833: PUSH
4834: LD_INT 5
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: LD_INT 57
4846: PUSH
4847: EMPTY
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: PPUSH
4860: CALL_OW 70
4864: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4865: LD_VAR 0 1
4869: PUSH
4870: LD_INT 0
4872: GREATER
4873: PUSH
4874: LD_VAR 0 2
4878: PUSH
4879: LD_INT 0
4881: GREATER
4882: AND
4883: IFFALSE 4923
// begin disable ;
4885: DISABLE
// DialogueOn ;
4886: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4890: LD_EXP 1
4894: PPUSH
4895: LD_STRING D7-JMM-1
4897: PPUSH
4898: CALL_OW 88
// DialogueOff ;
4902: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4906: LD_STRING M4
4908: PPUSH
4909: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4913: LD_INT 5
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 424
// end ; end ;
4923: PPOPN 2
4925: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4926: LD_INT 6
4928: PPUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 25
4941: PUSH
4942: LD_INT 4
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 70
4957: PUSH
4958: LD_INT 0
4960: GREATER
4961: PUSH
4962: LD_EXP 38
4966: PUSH
4967: LD_INT 1
4969: EQUAL
4970: AND
4971: PUSH
4972: LD_EXP 29
4976: PUSH
4977: LD_INT 0
4979: EQUAL
4980: AND
4981: IFFALSE 5046
4983: GO 4985
4985: DISABLE
// begin enable ;
4986: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4987: LD_ADDR_EXP 26
4991: PUSH
4992: LD_INT 6
4994: PPUSH
4995: LD_INT 22
4997: PUSH
4998: LD_INT 1
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 25
5007: PUSH
5008: LD_INT 4
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PPUSH
5019: CALL_OW 70
5023: PUSH
5024: LD_INT 1
5026: ARRAY
5027: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
5028: LD_INT 6
5030: PPUSH
5031: LD_INT 0
5033: PPUSH
5034: CALL_OW 424
// radationResearched = 1 ;
5038: LD_ADDR_EXP 29
5042: PUSH
5043: LD_INT 1
5045: ST_TO_ADDR
// end ;
5046: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
5047: LD_EXP 26
5051: PPUSH
5052: CALL_OW 301
5056: PUSH
5057: LD_EXP 29
5061: PUSH
5062: LD_INT 1
5064: EQUAL
5065: AND
5066: IFFALSE 5102
5068: GO 5070
5070: DISABLE
// begin enable ;
5071: ENABLE
// radationResearched = 0 ;
5072: LD_ADDR_EXP 29
5076: PUSH
5077: LD_INT 0
5079: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5080: LD_INT 6
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
5090: LD_EXP 1
5094: PPUSH
5095: LD_STRING D9a-JMM-1
5097: PPUSH
5098: CALL_OW 88
// end ; end_of_file
5102: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
5103: LD_VAR 0 5
5107: PUSH
5108: LD_INT 8
5110: EQUAL
5111: PUSH
5112: LD_EXP 36
5116: PUSH
5117: LD_INT 0
5119: EQUAL
5120: AND
5121: IFFALSE 5174
// begin eventVar1 = 1 ;
5123: LD_ADDR_EXP 36
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// DialogueOn ;
5131: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5135: LD_EXP 1
5139: PPUSH
5140: LD_STRING D6a-JMM-1
5142: PPUSH
5143: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5147: LD_EXP 15
5151: PPUSH
5152: LD_STRING D6a-Pow-1
5154: PPUSH
5155: CALL_OW 94
// DialogueOff ;
5159: CALL_OW 7
// wait ( 3 3$0 ) ;
5163: LD_INT 6300
5165: PPUSH
5166: CALL_OW 67
// PowellSupport ;
5170: CALL 1936 0 0
// end ; end ;
5174: PPOPN 5
5176: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5177: LD_VAR 0 1
5181: PPUSH
5182: CALL_OW 264
5186: PUSH
5187: LD_INT 8
5189: EQUAL
5190: PUSH
5191: LD_EXP 37
5195: PUSH
5196: LD_INT 0
5198: EQUAL
5199: AND
5200: IFFALSE 5269
// begin eventVar2 = 1 ;
5202: LD_ADDR_EXP 37
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// DialogueOn ;
5210: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5214: LD_EXP 1
5218: PPUSH
5219: LD_STRING D6b-JMM-1
5221: PPUSH
5222: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5226: LD_EXP 15
5230: PPUSH
5231: LD_STRING D6b-Pow-1
5233: PPUSH
5234: CALL_OW 94
// DialogueOff ;
5238: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5242: LD_INT 5
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5252: LD_INT 7
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5262: LD_STRING M3
5264: PPUSH
5265: CALL_OW 337
// end ; end ;
5269: PPOPN 2
5271: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5272: LD_VAR 0 2
5276: PPUSH
5277: LD_VAR 0 3
5281: PPUSH
5282: LD_INT 5
5284: PPUSH
5285: CALL_OW 309
5289: PUSH
5290: LD_EXP 38
5294: PUSH
5295: LD_INT 0
5297: EQUAL
5298: AND
5299: IFFALSE 5517
// begin eventVar3 = 1 ;
5301: LD_ADDR_EXP 38
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5309: LD_INT 175
5311: PPUSH
5312: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5316: LD_INT 7
5318: PPUSH
5319: LD_INT 22
5321: PUSH
5322: LD_INT 1
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: LD_INT 21
5331: PUSH
5332: LD_INT 2
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 34
5341: PUSH
5342: LD_INT 11
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: LIST
5353: PPUSH
5354: CALL_OW 70
5358: PUSH
5359: LD_INT 0
5361: GREATER
5362: IFFALSE 5381
// begin radarOnSpot = 1 ;
5364: LD_ADDR_EXP 30
5368: PUSH
5369: LD_INT 1
5371: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5372: LD_STRING M3a
5374: PPUSH
5375: CALL_OW 337
// end else
5379: GO 5388
// begin ChangeMissionObjectives ( M3b ) ;
5381: LD_STRING M3b
5383: PPUSH
5384: CALL_OW 337
// end ; DialogueOn ;
5388: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5392: LD_EXP 2
5396: PPUSH
5397: LD_STRING D8-Huck-1
5399: PPUSH
5400: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5404: LD_EXP 1
5408: PPUSH
5409: LD_STRING D8-JMM-1
5411: PPUSH
5412: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5416: LD_EXP 2
5420: PPUSH
5421: LD_STRING D8-Huck-2
5423: PPUSH
5424: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5428: LD_EXP 1
5432: PPUSH
5433: LD_STRING D8-JMM-2
5435: PPUSH
5436: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5440: LD_EXP 2
5444: PPUSH
5445: LD_STRING D8-Huck-3
5447: PPUSH
5448: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5452: LD_EXP 1
5456: PPUSH
5457: LD_STRING D8-JMM-3
5459: PPUSH
5460: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5464: LD_EXP 2
5468: PPUSH
5469: LD_STRING D8-Huck-4
5471: PPUSH
5472: CALL_OW 88
// DialogueOff ;
5476: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5480: LD_INT 5
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5490: LD_INT 7
5492: PPUSH
5493: LD_INT 0
5495: PPUSH
5496: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5500: LD_INT 6
5502: PPUSH
5503: LD_INT 1
5505: PPUSH
5506: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5510: LD_STRING M5
5512: PPUSH
5513: CALL_OW 337
// end ; end ;
5517: PPOPN 3
5519: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5520: LD_EXP 26
5524: PPUSH
5525: CALL_OW 302
5529: PUSH
5530: LD_VAR 0 2
5534: PUSH
5535: LD_EXP 26
5539: EQUAL
5540: AND
5541: PUSH
5542: LD_EXP 39
5546: PUSH
5547: LD_INT 0
5549: EQUAL
5550: AND
5551: PUSH
5552: LD_EXP 38
5556: PUSH
5557: LD_INT 1
5559: EQUAL
5560: AND
5561: IFFALSE 5607
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5563: LD_VAR 0 1
5567: PPUSH
5568: LD_INT 1
5570: PPUSH
5571: CALL_OW 268
5575: PUSH
5576: LD_INT 11
5578: EQUAL
5579: PUSH
5580: LD_VAR 0 1
5584: PPUSH
5585: LD_INT 2
5587: PPUSH
5588: CALL_OW 268
5592: PUSH
5593: LD_INT 11
5595: EQUAL
5596: OR
5597: IFFALSE 5607
// eventVar4 = 1 ;
5599: LD_ADDR_EXP 39
5603: PUSH
5604: LD_INT 1
5606: ST_TO_ADDR
// end ;
5607: PPOPN 2
5609: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5610: LD_INT 0
5612: PPUSH
5613: PPUSH
// begin if GetNation ( unit ) = 2 then
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 248
5623: PUSH
5624: LD_INT 2
5626: EQUAL
5627: IFFALSE 5873
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5629: LD_ADDR_EXP 32
5633: PUSH
5634: LD_EXP 32
5638: PUSH
5639: LD_INT 1
5641: PLUS
5642: ST_TO_ADDR
// for i := 1 to sibDeposits do
5643: LD_ADDR_VAR 0 4
5647: PUSH
5648: DOUBLE
5649: LD_INT 1
5651: DEC
5652: ST_TO_ADDR
5653: LD_EXP 31
5657: PUSH
5658: FOR_TO
5659: IFFALSE 5761
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5661: LD_EXP 31
5665: PUSH
5666: LD_VAR 0 4
5670: ARRAY
5671: PUSH
5672: LD_INT 1
5674: ARRAY
5675: PUSH
5676: LD_VAR 0 2
5680: EQUAL
5681: PUSH
5682: LD_EXP 31
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: PUSH
5693: LD_INT 2
5695: ARRAY
5696: PUSH
5697: LD_VAR 0 3
5701: EQUAL
5702: AND
5703: IFFALSE 5759
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5705: LD_ADDR_EXP 31
5709: PUSH
5710: LD_EXP 31
5714: PPUSH
5715: LD_VAR 0 4
5719: PUSH
5720: EMPTY
5721: LIST
5722: PUSH
5723: LD_INT 1
5725: ARRAY
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5732: LD_ADDR_EXP 31
5736: PUSH
5737: LD_EXP 31
5741: PPUSH
5742: LD_VAR 0 4
5746: PUSH
5747: EMPTY
5748: LIST
5749: PUSH
5750: LD_INT 2
5752: ARRAY
5753: PPUSH
5754: CALL_OW 3
5758: ST_TO_ADDR
// end ;
5759: GO 5658
5761: POP
5762: POP
// if eventVar5 = 0 then
5763: LD_EXP 40
5767: PUSH
5768: LD_INT 0
5770: EQUAL
5771: IFFALSE 5873
// begin eventVar5 = 1 ;
5773: LD_ADDR_EXP 40
5777: PUSH
5778: LD_INT 1
5780: ST_TO_ADDR
// DialogueOn ;
5781: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5785: LD_EXP 2
5789: PPUSH
5790: LD_STRING D4-Sci1-1
5792: PPUSH
5793: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5797: LD_EXP 1
5801: PPUSH
5802: LD_STRING D4-JMM-1
5804: PPUSH
5805: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5809: LD_EXP 2
5813: PPUSH
5814: LD_STRING D4-Sci1-2
5816: PPUSH
5817: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_STRING D4-JMM-2
5828: PPUSH
5829: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5833: LD_EXP 2
5837: PPUSH
5838: LD_STRING D4-Sci1-3
5840: PPUSH
5841: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D4-JMM-3
5852: PPUSH
5853: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5857: LD_EXP 1
5861: PPUSH
5862: LD_STRING D4-JMM-3a
5864: PPUSH
5865: CALL_OW 88
// DialogueOff ;
5869: CALL_OW 7
// end ; end ; end ;
5873: PPOPN 5
5875: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 0 then
5876: LD_VAR 0 1
5880: PPUSH
5881: CALL_OW 255
5885: PUSH
5886: LD_INT 1
5888: EQUAL
5889: PUSH
5890: LD_VAR 0 1
5894: PPUSH
5895: CALL_OW 266
5899: PUSH
5900: LD_INT 0
5902: EQUAL
5903: AND
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 21
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 2
5927: PUSH
5928: LD_INT 30
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: PUSH
5938: LD_INT 30
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: PPUSH
5958: CALL_OW 69
5962: PUSH
5963: LD_INT 0
5965: EQUAL
5966: AND
5967: IFFALSE 5981
// SetBName ( building , omega ) ;
5969: LD_VAR 0 1
5973: PPUSH
5974: LD_STRING omega
5976: PPUSH
5977: CALL_OW 500
// end ; end_of_file
5981: PPOPN 2
5983: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
// if exist_mode then
5988: LD_VAR 0 2
5992: IFFALSE 6011
// unit := CreateCharacter ( ident ) else
5994: LD_ADDR_VAR 0 4
5998: PUSH
5999: LD_VAR 0 1
6003: PPUSH
6004: CALL_OW 34
6008: ST_TO_ADDR
6009: GO 6026
// unit := NewCharacter ( ident ) ;
6011: LD_ADDR_VAR 0 4
6015: PUSH
6016: LD_VAR 0 1
6020: PPUSH
6021: CALL_OW 25
6025: ST_TO_ADDR
// result := unit ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: LD_VAR 0 4
6035: ST_TO_ADDR
// end ;
6036: LD_VAR 0 3
6040: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
6041: LD_INT 0
6043: PPUSH
6044: PPUSH
6045: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
6046: LD_ADDR_VAR 0 1
6050: PUSH
6051: LD_VAR 0 1
6055: PUSH
6056: LD_EXP 1
6060: PUSH
6061: LD_EXP 2
6065: PUSH
6066: LD_EXP 3
6070: PUSH
6071: LD_EXP 4
6075: PUSH
6076: LD_EXP 5
6080: PUSH
6081: LD_EXP 6
6085: PUSH
6086: LD_EXP 7
6090: PUSH
6091: LD_EXP 8
6095: PUSH
6096: LD_EXP 9
6100: PUSH
6101: LD_EXP 10
6105: PUSH
6106: LD_EXP 11
6110: PUSH
6111: LD_EXP 12
6115: PUSH
6116: LD_EXP 13
6120: PUSH
6121: LD_EXP 14
6125: PUSH
6126: LD_EXP 15
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: DIFF
6148: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6149: LD_ADDR_VAR 0 6
6153: PUSH
6154: LD_INT 1
6156: PPUSH
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 12
6166: ST_TO_ADDR
// for i = 1 to characters do
6167: LD_ADDR_VAR 0 5
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_VAR 0 1
6181: PUSH
6182: FOR_TO
6183: IFFALSE 6293
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6185: LD_VAR 0 5
6189: PUSH
6190: LD_VAR 0 6
6194: EQUAL
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: LD_VAR 0 5
6205: ARRAY
6206: PPUSH
6207: CALL_OW 258
6211: PUSH
6212: LD_INT 1
6214: EQUAL
6215: AND
6216: IFFALSE 6238
// Say ( characters [ i ] , dialogMID ) ;
6218: LD_VAR 0 1
6222: PUSH
6223: LD_VAR 0 5
6227: ARRAY
6228: PPUSH
6229: LD_VAR 0 2
6233: PPUSH
6234: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6238: LD_VAR 0 5
6242: PUSH
6243: LD_VAR 0 6
6247: EQUAL
6248: PUSH
6249: LD_VAR 0 1
6253: PUSH
6254: LD_VAR 0 5
6258: ARRAY
6259: PPUSH
6260: CALL_OW 258
6264: PUSH
6265: LD_INT 2
6267: EQUAL
6268: AND
6269: IFFALSE 6291
// Say ( characters [ i ] , dialogFID ) ;
6271: LD_VAR 0 1
6275: PUSH
6276: LD_VAR 0 5
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 3
6286: PPUSH
6287: CALL_OW 88
// end ;
6291: GO 6182
6293: POP
6294: POP
// end ;
6295: LD_VAR 0 4
6299: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6300: LD_INT 0
6302: PPUSH
6303: PPUSH
6304: PPUSH
6305: PPUSH
6306: PPUSH
6307: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6308: LD_ADDR_VAR 0 7
6312: PUSH
6313: LD_INT 22
6315: PUSH
6316: LD_VAR 0 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 25
6327: PUSH
6328: LD_INT 9
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PPUSH
6339: CALL_OW 69
6343: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 22
6351: PUSH
6352: LD_VAR 0 2
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: LD_INT 3
6363: PUSH
6364: LD_INT 21
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 69
6386: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6387: LD_ADDR_VAR 0 5
6391: PUSH
6392: LD_INT 1
6394: PPUSH
6395: LD_INT 3
6397: PPUSH
6398: CALL_OW 12
6402: ST_TO_ADDR
// for i = 1 to list do
6403: LD_ADDR_VAR 0 6
6407: PUSH
6408: DOUBLE
6409: LD_INT 1
6411: DEC
6412: ST_TO_ADDR
6413: LD_VAR 0 7
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6601
// for ta in filter do
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: LD_VAR 0 8
6430: PUSH
6431: FOR_IN
6432: IFFALSE 6597
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6434: LD_VAR 0 7
6438: PUSH
6439: LD_VAR 0 6
6443: ARRAY
6444: PPUSH
6445: LD_VAR 0 4
6449: PPUSH
6450: CALL_OW 296
6454: PUSH
6455: LD_INT 13
6457: LESSEQUAL
6458: IFFALSE 6595
// begin case c of 1 :
6460: LD_VAR 0 5
6464: PUSH
6465: LD_INT 1
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6511
6473: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6474: LD_VAR 0 7
6478: PUSH
6479: LD_VAR 0 6
6483: ARRAY
6484: PPUSH
6485: LD_VAR 0 4
6489: PPUSH
6490: CALL_OW 250
6494: PPUSH
6495: LD_VAR 0 4
6499: PPUSH
6500: CALL_OW 251
6504: PPUSH
6505: CALL_OW 154
6509: GO 6595
6511: LD_INT 2
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6583
6519: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6520: LD_VAR 0 7
6524: PUSH
6525: LD_VAR 0 6
6529: ARRAY
6530: PPUSH
6531: LD_VAR 0 4
6535: PPUSH
6536: CALL_OW 250
6540: PUSH
6541: LD_INT 1
6543: NEG
6544: PPUSH
6545: LD_INT 1
6547: PPUSH
6548: CALL_OW 12
6552: PLUS
6553: PPUSH
6554: LD_VAR 0 4
6558: PPUSH
6559: CALL_OW 251
6563: PUSH
6564: LD_INT 1
6566: NEG
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: CALL_OW 12
6575: PLUS
6576: PPUSH
6577: CALL_OW 153
6581: GO 6595
6583: LD_INT 3
6585: DOUBLE
6586: EQUAL
6587: IFTRUE 6591
6589: GO 6594
6591: POP
// ; end ;
6592: GO 6595
6594: POP
// end ; end ;
6595: GO 6431
6597: POP
6598: POP
6599: GO 6418
6601: POP
6602: POP
// end ;
6603: LD_VAR 0 3
6607: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
// for i in charactersList do
6612: LD_ADDR_VAR 0 4
6616: PUSH
6617: LD_VAR 0 1
6621: PUSH
6622: FOR_IN
6623: IFFALSE 6652
// begin if IsOk ( i ) then
6625: LD_VAR 0 4
6629: PPUSH
6630: CALL_OW 302
6634: IFFALSE 6650
// SaveCharacters ( i , ident ) ;
6636: LD_VAR 0 4
6640: PPUSH
6641: LD_VAR 0 2
6645: PPUSH
6646: CALL_OW 38
// end ;
6650: GO 6622
6652: POP
6653: POP
// end ;
6654: LD_VAR 0 3
6658: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
// for i = 1 to medicCount do
6672: LD_ADDR_VAR 0 13
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_VAR 0 7
6686: PUSH
6687: FOR_TO
6688: IFFALSE 6770
// begin uc_side = side ;
6690: LD_ADDR_OWVAR 20
6694: PUSH
6695: LD_VAR 0 1
6699: ST_TO_ADDR
// uc_nation = nation ;
6700: LD_ADDR_OWVAR 21
6704: PUSH
6705: LD_VAR 0 2
6709: ST_TO_ADDR
// hc_name =  ;
6710: LD_ADDR_OWVAR 26
6714: PUSH
6715: LD_STRING 
6717: ST_TO_ADDR
// hc_gallery =  ;
6718: LD_ADDR_OWVAR 33
6722: PUSH
6723: LD_STRING 
6725: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6726: LD_INT 0
6728: PPUSH
6729: LD_INT 4
6731: PPUSH
6732: LD_VAR 0 8
6736: PPUSH
6737: CALL_OW 380
// un = CreateHuman ;
6741: LD_ADDR_VAR 0 15
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6751: LD_VAR 0 15
6755: PPUSH
6756: LD_VAR 0 9
6760: PPUSH
6761: LD_INT 0
6763: PPUSH
6764: CALL_OW 49
// end ;
6768: GO 6687
6770: POP
6771: POP
// for i = 1 to soldierCount do
6772: LD_ADDR_VAR 0 13
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_VAR 0 3
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6870
// begin uc_side = side ;
6790: LD_ADDR_OWVAR 20
6794: PUSH
6795: LD_VAR 0 1
6799: ST_TO_ADDR
// uc_nation = nation ;
6800: LD_ADDR_OWVAR 21
6804: PUSH
6805: LD_VAR 0 2
6809: ST_TO_ADDR
// hc_name =  ;
6810: LD_ADDR_OWVAR 26
6814: PUSH
6815: LD_STRING 
6817: ST_TO_ADDR
// hc_gallery =  ;
6818: LD_ADDR_OWVAR 33
6822: PUSH
6823: LD_STRING 
6825: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6826: LD_INT 0
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_VAR 0 8
6836: PPUSH
6837: CALL_OW 380
// un = CreateHuman ;
6841: LD_ADDR_VAR 0 15
6845: PUSH
6846: CALL_OW 44
6850: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6851: LD_VAR 0 15
6855: PPUSH
6856: LD_VAR 0 9
6860: PPUSH
6861: LD_INT 0
6863: PPUSH
6864: CALL_OW 49
// end ;
6868: GO 6787
6870: POP
6871: POP
// for i = 1 to sniperCount do
6872: LD_ADDR_VAR 0 13
6876: PUSH
6877: DOUBLE
6878: LD_INT 1
6880: DEC
6881: ST_TO_ADDR
6882: LD_VAR 0 4
6886: PUSH
6887: FOR_TO
6888: IFFALSE 6970
// begin uc_side = side ;
6890: LD_ADDR_OWVAR 20
6894: PUSH
6895: LD_VAR 0 1
6899: ST_TO_ADDR
// uc_nation = nation ;
6900: LD_ADDR_OWVAR 21
6904: PUSH
6905: LD_VAR 0 2
6909: ST_TO_ADDR
// hc_name =  ;
6910: LD_ADDR_OWVAR 26
6914: PUSH
6915: LD_STRING 
6917: ST_TO_ADDR
// hc_gallery =  ;
6918: LD_ADDR_OWVAR 33
6922: PUSH
6923: LD_STRING 
6925: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 5
6931: PPUSH
6932: LD_VAR 0 8
6936: PPUSH
6937: CALL_OW 380
// un = CreateHuman ;
6941: LD_ADDR_VAR 0 15
6945: PUSH
6946: CALL_OW 44
6950: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6951: LD_VAR 0 15
6955: PPUSH
6956: LD_VAR 0 9
6960: PPUSH
6961: LD_INT 0
6963: PPUSH
6964: CALL_OW 49
// end ;
6968: GO 6887
6970: POP
6971: POP
// for i = 1 to bazookCount do
6972: LD_ADDR_VAR 0 13
6976: PUSH
6977: DOUBLE
6978: LD_INT 1
6980: DEC
6981: ST_TO_ADDR
6982: LD_VAR 0 5
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7070
// begin uc_side = side ;
6990: LD_ADDR_OWVAR 20
6994: PUSH
6995: LD_VAR 0 1
6999: ST_TO_ADDR
// uc_nation = nation ;
7000: LD_ADDR_OWVAR 21
7004: PUSH
7005: LD_VAR 0 2
7009: ST_TO_ADDR
// hc_name =  ;
7010: LD_ADDR_OWVAR 26
7014: PUSH
7015: LD_STRING 
7017: ST_TO_ADDR
// hc_gallery =  ;
7018: LD_ADDR_OWVAR 33
7022: PUSH
7023: LD_STRING 
7025: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7026: LD_INT 0
7028: PPUSH
7029: LD_INT 9
7031: PPUSH
7032: LD_VAR 0 8
7036: PPUSH
7037: CALL_OW 380
// un = CreateHuman ;
7041: LD_ADDR_VAR 0 15
7045: PUSH
7046: CALL_OW 44
7050: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7051: LD_VAR 0 15
7055: PPUSH
7056: LD_VAR 0 9
7060: PPUSH
7061: LD_INT 0
7063: PPUSH
7064: CALL_OW 49
// end ;
7068: GO 6987
7070: POP
7071: POP
// for i = 1 to mortalCount do
7072: LD_ADDR_VAR 0 13
7076: PUSH
7077: DOUBLE
7078: LD_INT 1
7080: DEC
7081: ST_TO_ADDR
7082: LD_VAR 0 6
7086: PUSH
7087: FOR_TO
7088: IFFALSE 7170
// begin uc_side = side ;
7090: LD_ADDR_OWVAR 20
7094: PUSH
7095: LD_VAR 0 1
7099: ST_TO_ADDR
// uc_nation = nation ;
7100: LD_ADDR_OWVAR 21
7104: PUSH
7105: LD_VAR 0 2
7109: ST_TO_ADDR
// hc_name =  ;
7110: LD_ADDR_OWVAR 26
7114: PUSH
7115: LD_STRING 
7117: ST_TO_ADDR
// hc_gallery =  ;
7118: LD_ADDR_OWVAR 33
7122: PUSH
7123: LD_STRING 
7125: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7126: LD_INT 0
7128: PPUSH
7129: LD_INT 8
7131: PPUSH
7132: LD_VAR 0 8
7136: PPUSH
7137: CALL_OW 380
// un = CreateHuman ;
7141: LD_ADDR_VAR 0 15
7145: PUSH
7146: CALL_OW 44
7150: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7151: LD_VAR 0 15
7155: PPUSH
7156: LD_VAR 0 9
7160: PPUSH
7161: LD_INT 0
7163: PPUSH
7164: CALL_OW 49
// end ;
7168: GO 7087
7170: POP
7171: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7172: LD_ADDR_VAR 0 17
7176: PUSH
7177: LD_INT 22
7179: PUSH
7180: LD_VAR 0 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 4
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: ST_TO_ADDR
// for i in medic_list do
7208: LD_ADDR_VAR 0 13
7212: PUSH
7213: LD_VAR 0 17
7217: PUSH
7218: FOR_IN
7219: IFFALSE 7237
// ComMoveToArea ( i , healArea ) ;
7221: LD_VAR 0 13
7225: PPUSH
7226: LD_VAR 0 10
7230: PPUSH
7231: CALL_OW 113
7235: GO 7218
7237: POP
7238: POP
// repeat wait ( 0 0$1 ) ;
7239: LD_INT 35
7241: PPUSH
7242: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7246: LD_ADDR_VAR 0 16
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 1
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: LD_INT 24
7271: PUSH
7272: LD_INT 550
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 24
7285: PUSH
7286: LD_INT 250
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PPUSH
7302: CALL_OW 69
7306: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7307: LD_ADDR_VAR 0 18
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_VAR 0 1
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 2
7326: PUSH
7327: LD_INT 25
7329: PUSH
7330: LD_INT 1
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 25
7339: PUSH
7340: LD_INT 5
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: LD_INT 25
7349: PUSH
7350: LD_INT 8
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 25
7359: PUSH
7360: LD_INT 9
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 24
7376: PUSH
7377: LD_INT 1000
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: PPUSH
7389: CALL_OW 69
7393: ST_TO_ADDR
// if medicCount > 0 then
7394: LD_VAR 0 7
7398: PUSH
7399: LD_INT 0
7401: GREATER
7402: IFFALSE 7476
// begin if damageUnit_list > 0 then
7404: LD_VAR 0 16
7408: PUSH
7409: LD_INT 0
7411: GREATER
7412: IFFALSE 7476
// begin for i in damageUnit_list do
7414: LD_ADDR_VAR 0 13
7418: PUSH
7419: LD_VAR 0 16
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7474
// begin ComMoveToArea ( i , healArea ) ;
7427: LD_VAR 0 13
7431: PPUSH
7432: LD_VAR 0 10
7436: PPUSH
7437: CALL_OW 113
// for j in medic_list do
7441: LD_ADDR_VAR 0 14
7445: PUSH
7446: LD_VAR 0 17
7450: PUSH
7451: FOR_IN
7452: IFFALSE 7470
// AddComHeal ( j , i ) ;
7454: LD_VAR 0 14
7458: PPUSH
7459: LD_VAR 0 13
7463: PPUSH
7464: CALL_OW 188
7468: GO 7451
7470: POP
7471: POP
// end ;
7472: GO 7424
7474: POP
7475: POP
// end ; end ; for i in soldiersOK_list do
7476: LD_ADDR_VAR 0 13
7480: PUSH
7481: LD_VAR 0 18
7485: PUSH
7486: FOR_IN
7487: IFFALSE 7663
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7489: LD_ADDR_VAR 0 21
7493: PUSH
7494: LD_INT 22
7496: PUSH
7497: LD_VAR 0 11
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: PPUSH
7511: LD_VAR 0 13
7515: PPUSH
7516: CALL_OW 74
7520: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7521: LD_ADDR_VAR 0 22
7525: PUSH
7526: LD_INT 22
7528: PUSH
7529: LD_VAR 0 11
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 2
7540: PUSH
7541: LD_INT 59
7543: PUSH
7544: EMPTY
7545: LIST
7546: PUSH
7547: LD_INT 21
7549: PUSH
7550: LD_INT 1
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 21
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: PPUSH
7580: CALL_OW 69
7584: PPUSH
7585: LD_VAR 0 13
7589: PPUSH
7590: CALL_OW 74
7594: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7595: LD_VAR 0 13
7599: PPUSH
7600: LD_VAR 0 21
7604: PPUSH
7605: CALL_OW 296
7609: PUSH
7610: LD_INT 8
7612: PLUS
7613: PUSH
7614: LD_VAR 0 13
7618: PPUSH
7619: LD_VAR 0 22
7623: PPUSH
7624: CALL_OW 296
7628: LESS
7629: IFFALSE 7647
// begin ComAttackUnit ( i , target1 ) ;
7631: LD_VAR 0 13
7635: PPUSH
7636: LD_VAR 0 21
7640: PPUSH
7641: CALL_OW 115
// end else
7645: GO 7661
// begin ComAttackUnit ( i , target2 ) ;
7647: LD_VAR 0 13
7651: PPUSH
7652: LD_VAR 0 22
7656: PPUSH
7657: CALL_OW 115
// end ; end ;
7661: GO 7486
7663: POP
7664: POP
// until soldiersOK_list = [ ] ;
7665: LD_VAR 0 18
7669: PUSH
7670: EMPTY
7671: EQUAL
7672: IFFALSE 7239
// end ;
7674: LD_VAR 0 12
7678: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7679: LD_INT 0
7681: PPUSH
7682: PPUSH
7683: PPUSH
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
// amChassisTab = [ ] ;
7692: LD_ADDR_VAR 0 19
7696: PUSH
7697: EMPTY
7698: ST_TO_ADDR
// arChassisTab = [ ] ;
7699: LD_ADDR_VAR 0 18
7703: PUSH
7704: EMPTY
7705: ST_TO_ADDR
// ruChassisTab = [ ] ;
7706: LD_ADDR_VAR 0 17
7710: PUSH
7711: EMPTY
7712: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7713: LD_INT 35
7715: PPUSH
7716: CALL_OW 67
// if nation = 1 then
7720: LD_VAR 0 5
7724: PUSH
7725: LD_INT 1
7727: EQUAL
7728: IFFALSE 8233
// begin uc_side = side ;
7730: LD_ADDR_OWVAR 20
7734: PUSH
7735: LD_VAR 0 2
7739: ST_TO_ADDR
// uc_nation = nation ;
7740: LD_ADDR_OWVAR 21
7744: PUSH
7745: LD_VAR 0 5
7749: ST_TO_ADDR
// vc_engine = vehengine ;
7750: LD_ADDR_OWVAR 39
7754: PUSH
7755: LD_VAR 0 6
7759: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
7760: LD_ADDR_OWVAR 38
7764: PUSH
7765: LD_VAR 0 7
7769: PUSH
7770: LD_INT 1
7772: PPUSH
7773: LD_VAR 0 7
7777: PPUSH
7778: CALL_OW 12
7782: ARRAY
7783: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7784: LD_ADDR_OWVAR 40
7788: PUSH
7789: LD_VAR 0 10
7793: PUSH
7794: LD_INT 1
7796: PPUSH
7797: LD_VAR 0 10
7801: PPUSH
7802: CALL_OW 12
7806: ARRAY
7807: ST_TO_ADDR
// for j = 1 to AMWeapon do
7808: LD_ADDR_VAR 0 14
7812: PUSH
7813: DOUBLE
7814: LD_INT 1
7816: DEC
7817: ST_TO_ADDR
7818: LD_VAR 0 10
7822: PUSH
7823: FOR_TO
7824: IFFALSE 8125
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7826: LD_VAR 0 10
7830: PUSH
7831: LD_VAR 0 14
7835: ARRAY
7836: PUSH
7837: LD_INT 2
7839: EQUAL
7840: PUSH
7841: LD_VAR 0 10
7845: PUSH
7846: LD_VAR 0 14
7850: ARRAY
7851: PUSH
7852: LD_INT 3
7854: EQUAL
7855: OR
7856: IFFALSE 7909
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7858: LD_ADDR_VAR 0 19
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: LD_INT 3
7871: PUSH
7872: LD_INT 4
7874: PUSH
7875: LD_INT 5
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7885: LD_ADDR_OWVAR 37
7889: PUSH
7890: LD_VAR 0 19
7894: PUSH
7895: LD_INT 1
7897: PPUSH
7898: LD_VAR 0 19
7902: PPUSH
7903: CALL_OW 12
7907: ARRAY
7908: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7909: LD_VAR 0 10
7913: PUSH
7914: LD_VAR 0 14
7918: ARRAY
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: PUSH
7924: LD_VAR 0 10
7928: PUSH
7929: LD_VAR 0 14
7933: ARRAY
7934: PUSH
7935: LD_INT 5
7937: EQUAL
7938: OR
7939: PUSH
7940: LD_VAR 0 10
7944: PUSH
7945: LD_VAR 0 14
7949: ARRAY
7950: PUSH
7951: LD_INT 9
7953: EQUAL
7954: OR
7955: PUSH
7956: LD_VAR 0 10
7960: PUSH
7961: LD_VAR 0 14
7965: ARRAY
7966: PUSH
7967: LD_INT 11
7969: EQUAL
7970: OR
7971: PUSH
7972: LD_VAR 0 10
7976: PUSH
7977: LD_VAR 0 14
7981: ARRAY
7982: PUSH
7983: LD_INT 7
7985: EQUAL
7986: OR
7987: IFFALSE 8036
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7989: LD_ADDR_VAR 0 19
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: LD_INT 3
7999: PUSH
8000: LD_INT 4
8002: PUSH
8003: LD_INT 5
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8012: LD_ADDR_OWVAR 37
8016: PUSH
8017: LD_VAR 0 19
8021: PUSH
8022: LD_INT 1
8024: PPUSH
8025: LD_VAR 0 19
8029: PPUSH
8030: CALL_OW 12
8034: ARRAY
8035: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8036: LD_VAR 0 10
8040: PUSH
8041: LD_VAR 0 14
8045: ARRAY
8046: PUSH
8047: LD_INT 8
8049: EQUAL
8050: PUSH
8051: LD_VAR 0 10
8055: PUSH
8056: LD_VAR 0 14
8060: ARRAY
8061: PUSH
8062: LD_INT 6
8064: EQUAL
8065: OR
8066: PUSH
8067: LD_VAR 0 10
8071: PUSH
8072: LD_VAR 0 14
8076: ARRAY
8077: PUSH
8078: LD_INT 10
8080: EQUAL
8081: OR
8082: IFFALSE 8123
// begin amChassisTab = [ 4 , 5 ] ;
8084: LD_ADDR_VAR 0 19
8088: PUSH
8089: LD_INT 4
8091: PUSH
8092: LD_INT 5
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8099: LD_ADDR_OWVAR 37
8103: PUSH
8104: LD_VAR 0 19
8108: PUSH
8109: LD_INT 1
8111: PPUSH
8112: LD_VAR 0 19
8116: PPUSH
8117: CALL_OW 12
8121: ARRAY
8122: ST_TO_ADDR
// end ; end ;
8123: GO 7823
8125: POP
8126: POP
// veh = CreateVehicle ;
8127: LD_ADDR_VAR 0 16
8131: PUSH
8132: CALL_OW 45
8136: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8137: LD_VAR 0 16
8141: PPUSH
8142: LD_VAR 0 1
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 49
// if vc_control = 1 then
8154: LD_OWVAR 38
8158: PUSH
8159: LD_INT 1
8161: EQUAL
8162: IFFALSE 8219
// begin hc_gallery =  ;
8164: LD_ADDR_OWVAR 33
8168: PUSH
8169: LD_STRING 
8171: ST_TO_ADDR
// hc_name =  ;
8172: LD_ADDR_OWVAR 26
8176: PUSH
8177: LD_STRING 
8179: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8180: LD_INT 0
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_VAR 0 4
8190: PPUSH
8191: CALL_OW 380
// un = CreateHuman ;
8195: LD_ADDR_VAR 0 15
8199: PUSH
8200: CALL_OW 44
8204: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8205: LD_VAR 0 15
8209: PPUSH
8210: LD_VAR 0 16
8214: PPUSH
8215: CALL_OW 52
// end ; i = i + 1 ;
8219: LD_ADDR_VAR 0 13
8223: PUSH
8224: LD_VAR 0 13
8228: PUSH
8229: LD_INT 1
8231: PLUS
8232: ST_TO_ADDR
// end ; if nation = 2 then
8233: LD_VAR 0 5
8237: PUSH
8238: LD_INT 2
8240: EQUAL
8241: IFFALSE 8679
// begin uc_side = side ;
8243: LD_ADDR_OWVAR 20
8247: PUSH
8248: LD_VAR 0 2
8252: ST_TO_ADDR
// uc_nation = nation ;
8253: LD_ADDR_OWVAR 21
8257: PUSH
8258: LD_VAR 0 5
8262: ST_TO_ADDR
// vc_engine = vehengine ;
8263: LD_ADDR_OWVAR 39
8267: PUSH
8268: LD_VAR 0 6
8272: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8273: LD_ADDR_OWVAR 38
8277: PUSH
8278: LD_VAR 0 7
8282: PUSH
8283: LD_INT 1
8285: PPUSH
8286: LD_VAR 0 7
8290: PPUSH
8291: CALL_OW 12
8295: ARRAY
8296: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8297: LD_ADDR_OWVAR 40
8301: PUSH
8302: LD_VAR 0 9
8306: PUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 9
8314: PPUSH
8315: CALL_OW 12
8319: ARRAY
8320: ST_TO_ADDR
// for j = 1 to ARWeapons do
8321: LD_ADDR_VAR 0 14
8325: PUSH
8326: DOUBLE
8327: LD_INT 1
8329: DEC
8330: ST_TO_ADDR
8331: LD_VAR 0 9
8335: PUSH
8336: FOR_TO
8337: IFFALSE 8571
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8339: LD_VAR 0 9
8343: PUSH
8344: LD_VAR 0 14
8348: ARRAY
8349: PUSH
8350: LD_INT 24
8352: EQUAL
8353: PUSH
8354: LD_VAR 0 9
8358: PUSH
8359: LD_VAR 0 14
8363: ARRAY
8364: PUSH
8365: LD_INT 22
8367: EQUAL
8368: OR
8369: PUSH
8370: LD_VAR 0 9
8374: PUSH
8375: LD_VAR 0 14
8379: ARRAY
8380: PUSH
8381: LD_INT 23
8383: EQUAL
8384: OR
8385: PUSH
8386: LD_VAR 0 9
8390: PUSH
8391: LD_VAR 0 14
8395: ARRAY
8396: PUSH
8397: LD_INT 30
8399: EQUAL
8400: OR
8401: IFFALSE 8450
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8403: LD_ADDR_VAR 0 18
8407: PUSH
8408: LD_INT 11
8410: PUSH
8411: LD_INT 12
8413: PUSH
8414: LD_INT 13
8416: PUSH
8417: LD_INT 14
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8426: LD_ADDR_OWVAR 37
8430: PUSH
8431: LD_VAR 0 18
8435: PUSH
8436: LD_INT 1
8438: PPUSH
8439: LD_VAR 0 18
8443: PPUSH
8444: CALL_OW 12
8448: ARRAY
8449: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8450: LD_VAR 0 9
8454: PUSH
8455: LD_VAR 0 14
8459: ARRAY
8460: PUSH
8461: LD_INT 29
8463: EQUAL
8464: PUSH
8465: LD_VAR 0 9
8469: PUSH
8470: LD_VAR 0 14
8474: ARRAY
8475: PUSH
8476: LD_INT 28
8478: EQUAL
8479: OR
8480: PUSH
8481: LD_VAR 0 9
8485: PUSH
8486: LD_VAR 0 14
8490: ARRAY
8491: PUSH
8492: LD_INT 27
8494: EQUAL
8495: OR
8496: PUSH
8497: LD_VAR 0 9
8501: PUSH
8502: LD_VAR 0 14
8506: ARRAY
8507: PUSH
8508: LD_INT 26
8510: EQUAL
8511: OR
8512: PUSH
8513: LD_VAR 0 9
8517: PUSH
8518: LD_VAR 0 14
8522: ARRAY
8523: PUSH
8524: LD_INT 25
8526: EQUAL
8527: OR
8528: IFFALSE 8569
// begin arChassisTab = [ 13 , 14 ] ;
8530: LD_ADDR_VAR 0 18
8534: PUSH
8535: LD_INT 13
8537: PUSH
8538: LD_INT 14
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8545: LD_ADDR_OWVAR 37
8549: PUSH
8550: LD_VAR 0 18
8554: PUSH
8555: LD_INT 1
8557: PPUSH
8558: LD_VAR 0 18
8562: PPUSH
8563: CALL_OW 12
8567: ARRAY
8568: ST_TO_ADDR
// end ; end ;
8569: GO 8336
8571: POP
8572: POP
// veh = CreateVehicle ;
8573: LD_ADDR_VAR 0 16
8577: PUSH
8578: CALL_OW 45
8582: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8583: LD_VAR 0 16
8587: PPUSH
8588: LD_VAR 0 1
8592: PPUSH
8593: LD_INT 0
8595: PPUSH
8596: CALL_OW 49
// if vc_control = 1 then
8600: LD_OWVAR 38
8604: PUSH
8605: LD_INT 1
8607: EQUAL
8608: IFFALSE 8665
// begin hc_gallery =  ;
8610: LD_ADDR_OWVAR 33
8614: PUSH
8615: LD_STRING 
8617: ST_TO_ADDR
// hc_name =  ;
8618: LD_ADDR_OWVAR 26
8622: PUSH
8623: LD_STRING 
8625: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8626: LD_INT 0
8628: PPUSH
8629: LD_INT 3
8631: PPUSH
8632: LD_VAR 0 4
8636: PPUSH
8637: CALL_OW 380
// un = CreateHuman ;
8641: LD_ADDR_VAR 0 15
8645: PUSH
8646: CALL_OW 44
8650: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8651: LD_VAR 0 15
8655: PPUSH
8656: LD_VAR 0 16
8660: PPUSH
8661: CALL_OW 52
// end ; i = i + 1 ;
8665: LD_ADDR_VAR 0 13
8669: PUSH
8670: LD_VAR 0 13
8674: PUSH
8675: LD_INT 1
8677: PLUS
8678: ST_TO_ADDR
// end ; if nation = 3 then
8679: LD_VAR 0 5
8683: PUSH
8684: LD_INT 3
8686: EQUAL
8687: IFFALSE 9093
// begin uc_side = side ;
8689: LD_ADDR_OWVAR 20
8693: PUSH
8694: LD_VAR 0 2
8698: ST_TO_ADDR
// uc_nation = nation ;
8699: LD_ADDR_OWVAR 21
8703: PUSH
8704: LD_VAR 0 5
8708: ST_TO_ADDR
// vc_engine = vehengine ;
8709: LD_ADDR_OWVAR 39
8713: PUSH
8714: LD_VAR 0 6
8718: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8719: LD_ADDR_OWVAR 38
8723: PUSH
8724: LD_VAR 0 7
8728: PUSH
8729: LD_INT 1
8731: PPUSH
8732: LD_VAR 0 7
8736: PPUSH
8737: CALL_OW 12
8741: ARRAY
8742: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8743: LD_ADDR_OWVAR 40
8747: PUSH
8748: LD_VAR 0 8
8752: PUSH
8753: LD_INT 1
8755: PPUSH
8756: LD_VAR 0 8
8760: PPUSH
8761: CALL_OW 12
8765: ARRAY
8766: ST_TO_ADDR
// for j = 1 to RuWeapons do
8767: LD_ADDR_VAR 0 14
8771: PUSH
8772: DOUBLE
8773: LD_INT 1
8775: DEC
8776: ST_TO_ADDR
8777: LD_VAR 0 8
8781: PUSH
8782: FOR_TO
8783: IFFALSE 8985
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8785: LD_VAR 0 8
8789: PUSH
8790: LD_VAR 0 14
8794: ARRAY
8795: PUSH
8796: LD_INT 42
8798: EQUAL
8799: PUSH
8800: LD_VAR 0 8
8804: PUSH
8805: LD_VAR 0 14
8809: ARRAY
8810: PUSH
8811: LD_INT 43
8813: EQUAL
8814: OR
8815: PUSH
8816: LD_VAR 0 8
8820: PUSH
8821: LD_VAR 0 14
8825: ARRAY
8826: PUSH
8827: LD_INT 44
8829: EQUAL
8830: OR
8831: PUSH
8832: LD_VAR 0 8
8836: PUSH
8837: LD_VAR 0 14
8841: ARRAY
8842: PUSH
8843: LD_INT 45
8845: EQUAL
8846: OR
8847: PUSH
8848: LD_VAR 0 8
8852: PUSH
8853: LD_VAR 0 14
8857: ARRAY
8858: PUSH
8859: LD_INT 49
8861: EQUAL
8862: OR
8863: IFFALSE 8912
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8865: LD_ADDR_VAR 0 17
8869: PUSH
8870: LD_INT 21
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 23
8878: PUSH
8879: LD_INT 24
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8888: LD_ADDR_OWVAR 37
8892: PUSH
8893: LD_VAR 0 17
8897: PUSH
8898: LD_INT 1
8900: PPUSH
8901: LD_VAR 0 17
8905: PPUSH
8906: CALL_OW 12
8910: ARRAY
8911: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8912: LD_VAR 0 8
8916: PUSH
8917: LD_VAR 0 14
8921: ARRAY
8922: PUSH
8923: LD_INT 46
8925: EQUAL
8926: PUSH
8927: LD_VAR 0 8
8931: PUSH
8932: LD_VAR 0 14
8936: ARRAY
8937: PUSH
8938: LD_INT 47
8940: EQUAL
8941: OR
8942: IFFALSE 8983
// begin ruChassisTab = [ 23 , 24 ] ;
8944: LD_ADDR_VAR 0 17
8948: PUSH
8949: LD_INT 23
8951: PUSH
8952: LD_INT 24
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8959: LD_ADDR_OWVAR 37
8963: PUSH
8964: LD_VAR 0 17
8968: PUSH
8969: LD_INT 1
8971: PPUSH
8972: LD_VAR 0 17
8976: PPUSH
8977: CALL_OW 12
8981: ARRAY
8982: ST_TO_ADDR
// end ; end ;
8983: GO 8782
8985: POP
8986: POP
// veh = CreateVehicle ;
8987: LD_ADDR_VAR 0 16
8991: PUSH
8992: CALL_OW 45
8996: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8997: LD_VAR 0 16
9001: PPUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: LD_INT 0
9009: PPUSH
9010: CALL_OW 49
// if vc_control = 1 then
9014: LD_OWVAR 38
9018: PUSH
9019: LD_INT 1
9021: EQUAL
9022: IFFALSE 9079
// begin hc_gallery =  ;
9024: LD_ADDR_OWVAR 33
9028: PUSH
9029: LD_STRING 
9031: ST_TO_ADDR
// hc_name =  ;
9032: LD_ADDR_OWVAR 26
9036: PUSH
9037: LD_STRING 
9039: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9040: LD_INT 0
9042: PPUSH
9043: LD_INT 3
9045: PPUSH
9046: LD_VAR 0 4
9050: PPUSH
9051: CALL_OW 380
// un = CreateHuman ;
9055: LD_ADDR_VAR 0 15
9059: PUSH
9060: CALL_OW 44
9064: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9065: LD_VAR 0 15
9069: PPUSH
9070: LD_VAR 0 16
9074: PPUSH
9075: CALL_OW 52
// end ; i = i + 1 ;
9079: LD_ADDR_VAR 0 13
9083: PUSH
9084: LD_VAR 0 13
9088: PUSH
9089: LD_INT 1
9091: PLUS
9092: ST_TO_ADDR
// end ; until i = vehCount ;
9093: LD_VAR 0 13
9097: PUSH
9098: LD_VAR 0 3
9102: EQUAL
9103: IFFALSE 7713
// repeat wait ( 0 0$1 ) ;
9105: LD_INT 35
9107: PPUSH
9108: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] ] ] ) ;
9112: LD_ADDR_VAR 0 20
9116: PUSH
9117: LD_INT 22
9119: PUSH
9120: LD_VAR 0 2
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: PUSH
9129: LD_INT 21
9131: PUSH
9132: LD_INT 2
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 24
9141: PUSH
9142: LD_INT 250
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 2
9151: PUSH
9152: LD_INT 34
9154: PUSH
9155: LD_INT 25
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 34
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: LD_INT 34
9174: PUSH
9175: LD_INT 27
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 34
9184: PUSH
9185: LD_INT 28
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 34
9194: PUSH
9195: LD_INT 29
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 69
9220: ST_TO_ADDR
// if vehicleOK_list > 0 then
9221: LD_VAR 0 20
9225: PUSH
9226: LD_INT 0
9228: GREATER
9229: IFFALSE 9420
// begin for i in vehicleOK_list do
9231: LD_ADDR_VAR 0 13
9235: PUSH
9236: LD_VAR 0 20
9240: PUSH
9241: FOR_IN
9242: IFFALSE 9418
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9244: LD_ADDR_VAR 0 21
9248: PUSH
9249: LD_INT 22
9251: PUSH
9252: LD_VAR 0 11
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PPUSH
9261: CALL_OW 69
9265: PPUSH
9266: LD_VAR 0 13
9270: PPUSH
9271: CALL_OW 74
9275: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9276: LD_ADDR_VAR 0 22
9280: PUSH
9281: LD_INT 22
9283: PUSH
9284: LD_VAR 0 11
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: PUSH
9293: LD_INT 2
9295: PUSH
9296: LD_INT 59
9298: PUSH
9299: EMPTY
9300: LIST
9301: PUSH
9302: LD_INT 21
9304: PUSH
9305: LD_INT 1
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 21
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: EMPTY
9333: LIST
9334: PPUSH
9335: CALL_OW 69
9339: PPUSH
9340: LD_VAR 0 13
9344: PPUSH
9345: CALL_OW 74
9349: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9350: LD_VAR 0 13
9354: PPUSH
9355: LD_VAR 0 21
9359: PPUSH
9360: CALL_OW 296
9364: PUSH
9365: LD_INT 8
9367: PLUS
9368: PUSH
9369: LD_VAR 0 13
9373: PPUSH
9374: LD_VAR 0 22
9378: PPUSH
9379: CALL_OW 296
9383: LESS
9384: IFFALSE 9402
// begin ComAttackUnit ( i , target1 ) ;
9386: LD_VAR 0 13
9390: PPUSH
9391: LD_VAR 0 21
9395: PPUSH
9396: CALL_OW 115
// end else
9400: GO 9416
// begin ComAttackUnit ( i , target2 ) ;
9402: LD_VAR 0 13
9406: PPUSH
9407: LD_VAR 0 22
9411: PPUSH
9412: CALL_OW 115
// end ; end ;
9416: GO 9241
9418: POP
9419: POP
// end ; until vehicleOK_list = 0 ;
9420: LD_VAR 0 20
9424: PUSH
9425: LD_INT 0
9427: EQUAL
9428: IFFALSE 9105
// end ;
9430: LD_VAR 0 12
9434: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9435: LD_INT 0
9437: PPUSH
9438: PPUSH
9439: PPUSH
9440: PPUSH
9441: PPUSH
9442: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9443: LD_ADDR_VAR 0 6
9447: PUSH
9448: LD_INT 22
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 34
9462: PUSH
9463: LD_INT 29
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 69
9478: ST_TO_ADDR
// if veh_list = 0 then
9479: LD_VAR 0 6
9483: PUSH
9484: LD_INT 0
9486: EQUAL
9487: IFFALSE 9491
// exit ;
9489: GO 9696
// if veh_list > 0 then
9491: LD_VAR 0 6
9495: PUSH
9496: LD_INT 0
9498: GREATER
9499: IFFALSE 9696
// begin for i in veh_List do
9501: LD_ADDR_VAR 0 4
9505: PUSH
9506: LD_VAR 0 6
9510: PUSH
9511: FOR_IN
9512: IFFALSE 9694
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9514: LD_ADDR_VAR 0 7
9518: PUSH
9519: LD_INT 22
9521: PUSH
9522: LD_VAR 0 2
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 24
9533: PUSH
9534: LD_INT 250
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: LD_INT 59
9546: PUSH
9547: EMPTY
9548: LIST
9549: PUSH
9550: LD_INT 21
9552: PUSH
9553: LD_INT 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 21
9562: PUSH
9563: LD_INT 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: PUSH
9581: EMPTY
9582: LIST
9583: PPUSH
9584: CALL_OW 69
9588: PPUSH
9589: LD_VAR 0 4
9593: PPUSH
9594: CALL_OW 74
9598: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9599: LD_VAR 0 4
9603: PPUSH
9604: LD_VAR 0 7
9608: PPUSH
9609: CALL_OW 115
// if not HasTask ( i ) then
9613: LD_VAR 0 4
9617: PPUSH
9618: CALL_OW 314
9622: NOT
9623: IFFALSE 9692
// begin wait ( 0 0$0.1 ) ;
9625: LD_INT 4
9627: PPUSH
9628: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9632: LD_ADDR_VAR 0 8
9636: PUSH
9637: LD_INT 22
9639: PUSH
9640: LD_VAR 0 2
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: PUSH
9649: LD_INT 24
9651: PUSH
9652: LD_INT 250
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PPUSH
9663: CALL_OW 69
9667: PPUSH
9668: LD_VAR 0 4
9672: PPUSH
9673: CALL_OW 74
9677: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9678: LD_VAR 0 4
9682: PPUSH
9683: LD_VAR 0 8
9687: PPUSH
9688: CALL_OW 115
// end ; end ;
9692: GO 9511
9694: POP
9695: POP
// end ; end ; end_of_file
9696: LD_VAR 0 3
9700: RET
// every 0 0$1 do
9701: GO 9703
9703: DISABLE
// begin enable ;
9704: ENABLE
// IntBazooka ( 7 , 1 ) ;
9705: LD_INT 7
9707: PPUSH
9708: LD_INT 1
9710: PPUSH
9711: CALL 6300 0 2
// AttackSelfBomb ( 8 , 1 ) ;
9715: LD_INT 8
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: CALL 9435 0 2
// end ; end_of_file
9725: END
// every 0 0$1 trigger eventVar4 = 1 do
9726: LD_EXP 39
9730: PUSH
9731: LD_INT 1
9733: EQUAL
9734: IFFALSE 10528
9736: GO 9738
9738: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
9739: LD_EXP 1
9743: PPUSH
9744: LD_STRING D9b-JMM-1
9746: PPUSH
9747: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9751: LD_EXP 15
9755: PPUSH
9756: LD_STRING D9b-Pow-1
9758: PPUSH
9759: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9763: LD_EXP 1
9767: PPUSH
9768: LD_STRING D9b-JMM-2
9770: PPUSH
9771: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9775: LD_EXP 15
9779: PPUSH
9780: LD_STRING D9b-Pow-2
9782: PPUSH
9783: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9787: LD_EXP 1
9791: PPUSH
9792: LD_STRING D9b-JMM-3
9794: PPUSH
9795: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9799: LD_EXP 15
9803: PPUSH
9804: LD_STRING D9b-Pow-3
9806: PPUSH
9807: CALL_OW 94
// if burlakStatus = 1 then
9811: LD_EXP 28
9815: PUSH
9816: LD_INT 1
9818: EQUAL
9819: IFFALSE 9833
// begin AddMedal ( Burlak , 1 ) ;
9821: LD_STRING Burlak
9823: PPUSH
9824: LD_INT 1
9826: PPUSH
9827: CALL_OW 101
// end else
9831: GO 9844
// begin AddMedal ( Burlak , - 1 ) ;
9833: LD_STRING Burlak
9835: PPUSH
9836: LD_INT 1
9838: NEG
9839: PPUSH
9840: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9844: LD_EXP 2
9848: PPUSH
9849: CALL_OW 302
9853: IFFALSE 9867
// begin AddMedal ( Stevens , 1 ) ;
9855: LD_STRING Stevens
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: CALL_OW 101
// end else
9865: GO 9878
// begin AddMedal ( Stevens , - 1 ) ;
9867: LD_STRING Stevens
9869: PPUSH
9870: LD_INT 1
9872: NEG
9873: PPUSH
9874: CALL_OW 101
// end ; if radarOnSpot = 1 then
9878: LD_EXP 30
9882: PUSH
9883: LD_INT 1
9885: EQUAL
9886: IFFALSE 9900
// begin AddMedal ( Observation , 1 ) ;
9888: LD_STRING Observation
9890: PPUSH
9891: LD_INT 1
9893: PPUSH
9894: CALL_OW 101
// end else
9898: GO 9911
// begin AddMedal ( Observation , - 1 ) ;
9900: LD_STRING Observation
9902: PPUSH
9903: LD_INT 1
9905: NEG
9906: PPUSH
9907: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
9911: LD_STRING MAIN
9913: PPUSH
9914: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9918: LD_EXP 28
9922: PPUSH
9923: LD_STRING 13_BurlakStatus_1
9925: PPUSH
9926: CALL_OW 39
// if IsOk ( Stevens ) then
9930: LD_EXP 2
9934: PPUSH
9935: CALL_OW 302
9939: IFFALSE 9953
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9941: LD_INT 1
9943: PPUSH
9944: LD_STRING 13_StevensStatus_1
9946: PPUSH
9947: CALL_OW 39
9951: GO 9963
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9953: LD_INT 0
9955: PPUSH
9956: LD_STRING 13_StevensStatus_1
9958: PPUSH
9959: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9963: LD_INT 22
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 21
9975: PUSH
9976: LD_INT 1
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: LD_INT 25
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 25
9998: PUSH
9999: LD_INT 2
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 25
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 25
10018: PUSH
10019: LD_INT 4
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 25
10028: PUSH
10029: LD_INT 5
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 25
10038: PUSH
10039: LD_INT 8
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10069: LD_EXP 1
10073: PPUSH
10074: LD_EXP 35
10078: PUSH
10079: LD_STRING JMM
10081: STR
10082: PPUSH
10083: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10087: LD_EXP 8
10091: PPUSH
10092: LD_EXP 35
10096: PUSH
10097: LD_STRING Brown
10099: STR
10100: PPUSH
10101: CALL 6608 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10105: LD_EXP 4
10109: PPUSH
10110: LD_EXP 35
10114: PUSH
10115: LD_STRING Donaldson
10117: STR
10118: PPUSH
10119: CALL 6608 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10123: LD_EXP 5
10127: PPUSH
10128: LD_EXP 35
10132: PUSH
10133: LD_STRING Bobby
10135: STR
10136: PPUSH
10137: CALL 6608 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10141: LD_EXP 6
10145: PPUSH
10146: LD_EXP 35
10150: PUSH
10151: LD_STRING Cyrus
10153: STR
10154: PPUSH
10155: CALL 6608 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10159: LD_EXP 3
10163: PPUSH
10164: LD_EXP 35
10168: PUSH
10169: LD_STRING Lisa
10171: STR
10172: PPUSH
10173: CALL 6608 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10177: LD_EXP 13
10181: PPUSH
10182: LD_EXP 35
10186: PUSH
10187: LD_STRING Frank
10189: STR
10190: PPUSH
10191: CALL 6608 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10195: LD_EXP 14
10199: PPUSH
10200: LD_EXP 35
10204: PUSH
10205: LD_STRING Kikuchi
10207: STR
10208: PPUSH
10209: CALL 6608 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10213: LD_EXP 10
10217: PPUSH
10218: LD_EXP 35
10222: PUSH
10223: LD_STRING Houten
10225: STR
10226: PPUSH
10227: CALL 6608 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10231: LD_EXP 12
10235: PPUSH
10236: LD_EXP 35
10240: PUSH
10241: LD_STRING Gary
10243: STR
10244: PPUSH
10245: CALL 6608 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10249: LD_EXP 11
10253: PPUSH
10254: LD_EXP 35
10258: PUSH
10259: LD_STRING Cornell
10261: STR
10262: PPUSH
10263: CALL 6608 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10267: LD_EXP 7
10271: PPUSH
10272: LD_EXP 35
10276: PUSH
10277: LD_STRING Denis
10279: STR
10280: PPUSH
10281: CALL 6608 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10285: LD_EXP 9
10289: PPUSH
10290: LD_EXP 35
10294: PUSH
10295: LD_STRING Gladstone
10297: STR
10298: PPUSH
10299: CALL 6608 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10303: LD_EXP 2
10307: PPUSH
10308: LD_EXP 35
10312: PUSH
10313: LD_STRING Stevens
10315: STR
10316: PPUSH
10317: CALL 6608 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
10321: LD_INT 50
10323: PUSH
10324: EMPTY
10325: LIST
10326: PUSH
10327: LD_INT 22
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 21
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 25
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 25
10362: PUSH
10363: LD_INT 2
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 25
10372: PUSH
10373: LD_INT 3
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 25
10382: PUSH
10383: LD_INT 4
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 25
10392: PUSH
10393: LD_INT 5
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: LD_INT 25
10402: PUSH
10403: LD_INT 8
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: PPUSH
10425: CALL_OW 69
10429: PUSH
10430: LD_EXP 1
10434: PUSH
10435: LD_EXP 8
10439: PUSH
10440: LD_EXP 4
10444: PUSH
10445: LD_EXP 5
10449: PUSH
10450: LD_EXP 6
10454: PUSH
10455: LD_EXP 3
10459: PUSH
10460: LD_EXP 13
10464: PUSH
10465: LD_EXP 9
10469: PUSH
10470: LD_EXP 14
10474: PUSH
10475: LD_EXP 7
10479: PUSH
10480: LD_EXP 10
10484: PUSH
10485: LD_EXP 12
10489: PUSH
10490: LD_EXP 11
10494: PUSH
10495: LD_EXP 2
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: DIFF
10516: PPUSH
10517: LD_STRING 13_other_survivors
10519: PPUSH
10520: CALL_OW 38
// YouWin ;
10524: CALL_OW 103
// end ;
10528: END
// export function SaveOmegaBase ; var omegaBase , buildings , i ; begin
10529: LD_INT 0
10531: PPUSH
10532: PPUSH
10533: PPUSH
10534: PPUSH
// omegaBase = [ ] ;
10535: LD_ADDR_VAR 0 2
10539: PUSH
10540: EMPTY
10541: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
10542: LD_ADDR_VAR 0 3
10546: PUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 1
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 23
10559: PUSH
10560: LD_INT 1
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 21
10569: PUSH
10570: LD_INT 3
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 50
10579: PUSH
10580: EMPTY
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: ST_TO_ADDR
// for i in buildings do
10594: LD_ADDR_VAR 0 4
10598: PUSH
10599: LD_VAR 0 3
10603: PUSH
10604: FOR_IN
10605: IFFALSE 11042
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
10607: LD_VAR 0 4
10611: PPUSH
10612: CALL_OW 266
10616: PUSH
10617: LD_INT 6
10619: PUSH
10620: LD_INT 7
10622: PUSH
10623: LD_INT 8
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: IN
10631: IFFALSE 10745
// omegaBase = omegaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_VAR 0 2
10642: PUSH
10643: LD_VAR 0 4
10647: PPUSH
10648: CALL_OW 266
10652: PUSH
10653: LD_VAR 0 4
10657: PPUSH
10658: CALL_OW 250
10662: PUSH
10663: LD_VAR 0 4
10667: PPUSH
10668: CALL_OW 251
10672: PUSH
10673: LD_VAR 0 4
10677: PPUSH
10678: CALL_OW 254
10682: PUSH
10683: LD_VAR 0 4
10687: PPUSH
10688: CALL_OW 267
10692: PUSH
10693: LD_VAR 0 4
10697: PPUSH
10698: CALL_OW 248
10702: PUSH
10703: LD_VAR 0 4
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 268
10715: PUSH
10716: LD_VAR 0 4
10720: PPUSH
10721: LD_INT 2
10723: PPUSH
10724: CALL_OW 268
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: ADD
10742: ST_TO_ADDR
10743: GO 11040
// if GetBType ( i ) = b_bunker then
10745: LD_VAR 0 4
10749: PPUSH
10750: CALL_OW 266
10754: PUSH
10755: LD_INT 32
10757: EQUAL
10758: IFFALSE 10855
// omegaBase = omegaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
10760: LD_ADDR_VAR 0 2
10764: PUSH
10765: LD_VAR 0 2
10769: PUSH
10770: LD_VAR 0 4
10774: PPUSH
10775: CALL_OW 266
10779: PUSH
10780: LD_VAR 0 4
10784: PPUSH
10785: CALL_OW 250
10789: PUSH
10790: LD_VAR 0 4
10794: PPUSH
10795: CALL_OW 251
10799: PUSH
10800: LD_VAR 0 4
10804: PPUSH
10805: CALL_OW 254
10809: PUSH
10810: LD_VAR 0 4
10814: PPUSH
10815: CALL_OW 267
10819: PUSH
10820: LD_VAR 0 4
10824: PPUSH
10825: CALL_OW 248
10829: PUSH
10830: LD_VAR 0 4
10834: PPUSH
10835: CALL_OW 269
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: ADD
10852: ST_TO_ADDR
10853: GO 11040
// if GetBType ( i ) = b_factory then
10855: LD_VAR 0 4
10859: PPUSH
10860: CALL_OW 266
10864: PUSH
10865: LD_INT 3
10867: EQUAL
10868: IFFALSE 10958
// omegaBase = Insert ( omegaBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
10870: LD_ADDR_VAR 0 2
10874: PUSH
10875: LD_VAR 0 2
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: LD_VAR 0 4
10887: PPUSH
10888: CALL_OW 266
10892: PUSH
10893: LD_VAR 0 4
10897: PPUSH
10898: CALL_OW 250
10902: PUSH
10903: LD_VAR 0 4
10907: PPUSH
10908: CALL_OW 251
10912: PUSH
10913: LD_VAR 0 4
10917: PPUSH
10918: CALL_OW 254
10922: PUSH
10923: LD_VAR 0 4
10927: PPUSH
10928: CALL_OW 267
10932: PUSH
10933: LD_VAR 0 4
10937: PPUSH
10938: CALL_OW 248
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 2
10955: ST_TO_ADDR
10956: GO 11040
// omegaBase = omegaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: LD_VAR 0 2
10967: PUSH
10968: LD_VAR 0 4
10972: PPUSH
10973: CALL_OW 266
10977: PUSH
10978: LD_VAR 0 4
10982: PPUSH
10983: CALL_OW 250
10987: PUSH
10988: LD_VAR 0 4
10992: PPUSH
10993: CALL_OW 251
10997: PUSH
10998: LD_VAR 0 4
11002: PPUSH
11003: CALL_OW 254
11007: PUSH
11008: LD_VAR 0 4
11012: PPUSH
11013: CALL_OW 267
11017: PUSH
11018: LD_VAR 0 4
11022: PPUSH
11023: CALL_OW 248
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: ADD
11039: ST_TO_ADDR
// end ;
11040: GO 10604
11042: POP
11043: POP
// SaveVariable ( omegaBase , 13_OmegaBase ) ;
11044: LD_VAR 0 2
11048: PPUSH
11049: LD_STRING 13_OmegaBase
11051: PPUSH
11052: CALL_OW 39
// end ; end_of_file
11056: LD_VAR 0 1
11060: RET
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11061: LD_EXP 32
11065: PUSH
11066: LD_INT 2
11068: EQUAL
11069: IFFALSE 11205
11071: GO 11073
11073: DISABLE
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
11078: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11079: LD_ADDR_VAR 0 2
11083: PUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 21
11096: PUSH
11097: LD_INT 3
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: LD_INT 30
11109: PUSH
11110: LD_INT 0
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 30
11119: PUSH
11120: LD_INT 1
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: PPUSH
11137: CALL_OW 69
11141: ST_TO_ADDR
// for i in tmp do
11142: LD_ADDR_VAR 0 1
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: FOR_IN
11153: IFFALSE 11186
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11155: LD_ADDR_VAR 0 3
11159: PUSH
11160: LD_VAR 0 3
11164: PUSH
11165: LD_VAR 0 1
11169: PPUSH
11170: CALL_OW 274
11174: PPUSH
11175: LD_INT 3
11177: PPUSH
11178: CALL_OW 275
11182: PLUS
11183: ST_TO_ADDR
11184: GO 11152
11186: POP
11187: POP
// if yourSiberite < 79 then
11188: LD_VAR 0 3
11192: PUSH
11193: LD_INT 79
11195: LESS
11196: IFFALSE 11205
// YouLost ( siberite ) ;
11198: LD_STRING siberite
11200: PPUSH
11201: CALL_OW 104
// end ;
11205: PPOPN 3
11207: END
// every 0 0$1 trigger IsDead ( JMM ) do
11208: LD_EXP 1
11212: PPUSH
11213: CALL_OW 301
11217: IFFALSE 11229
11219: GO 11221
11221: DISABLE
// YouLost ( JMM ) ; end_of_file
11222: LD_STRING JMM
11224: PPUSH
11225: CALL_OW 104
11229: END
// every 15 15$0 + 5 5$0 do
11230: GO 11232
11232: DISABLE
// begin enable ;
11233: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 2 , 4 ) , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , 3 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11234: LD_INT 8
11236: PPUSH
11237: LD_INT 2
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: LD_INT 4
11245: PPUSH
11246: CALL_OW 12
11250: PPUSH
11251: LD_INT 0
11253: PPUSH
11254: LD_INT 0
11256: PPUSH
11257: LD_INT 1
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: LD_INT 3
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: LD_OWVAR 67
11275: ARRAY
11276: PPUSH
11277: LD_INT 3
11279: PPUSH
11280: LD_INT 10
11282: PPUSH
11283: LD_INT 8
11285: PUSH
11286: LD_INT 9
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 2
11298: PPUSH
11299: CALL_OW 12
11303: ARRAY
11304: PPUSH
11305: LD_INT 12
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL 6659 0 11
// end ;
11315: END
// every 15 15$0 + 5 5$0 do
11316: GO 11318
11318: DISABLE
// begin enable ;
11319: ENABLE
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 1 , 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11320: LD_INT 8
11322: PUSH
11323: LD_INT 9
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 1
11332: PPUSH
11333: LD_INT 2
11335: PPUSH
11336: CALL_OW 12
11340: ARRAY
11341: PPUSH
11342: LD_INT 8
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: LD_INT 3
11350: PPUSH
11351: CALL_OW 12
11355: PUSH
11356: LD_INT 2
11358: PPUSH
11359: LD_INT 4
11361: PPUSH
11362: CALL_OW 12
11366: PUSH
11367: LD_INT 3
11369: PPUSH
11370: LD_INT 5
11372: PPUSH
11373: CALL_OW 12
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_OWVAR 67
11387: ARRAY
11388: PPUSH
11389: LD_INT 10
11391: PPUSH
11392: LD_INT 2
11394: PPUSH
11395: LD_INT 3
11397: PPUSH
11398: LD_INT 1
11400: PUSH
11401: LD_INT 5
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: PPUSH
11412: EMPTY
11413: PPUSH
11414: LD_INT 25
11416: PUSH
11417: LD_INT 26
11419: PUSH
11420: LD_INT 27
11422: PUSH
11423: LD_INT 28
11425: PUSH
11426: LD_INT 29
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PPUSH
11436: EMPTY
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL 7679 0 11
// end ; end_of_file
11445: END
// every 1 1$0 do
11446: GO 11448
11448: DISABLE
// begin enable ;
11449: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11450: LD_INT 3
11452: PPUSH
11453: LD_INT 5
11455: PPUSH
11456: CALL_OW 12
11460: PPUSH
11461: LD_INT 13
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 55
// end ;
11471: END
