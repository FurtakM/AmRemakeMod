// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 41
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 36
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 42
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1163 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1067 0 0
// PrepareDifficulty ;
 167: CALL 6138 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 42
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
 494: PPUSH
// uc_side = 1 ;
 495: LD_ADDR_OWVAR 20
 499: PUSH
 500: LD_INT 1
 502: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 503: LD_ADDR_EXP 1
 507: PUSH
 508: LD_STRING 13c_JMM
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: CALL 5822 0 2
 518: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 519: LD_ADDR_EXP 2
 523: PUSH
 524: LD_STRING 13c_Stevens
 526: PPUSH
 527: LD_INT 1
 529: PPUSH
 530: CALL 5822 0 2
 534: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING 13c_Lisa
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL 5822 0 2
 550: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 551: LD_ADDR_EXP 4
 555: PUSH
 556: LD_STRING 13c_Donaldson
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: CALL 5822 0 2
 566: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 567: LD_ADDR_EXP 5
 571: PUSH
 572: LD_STRING 13c_Bobby
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL 5822 0 2
 582: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 583: LD_ADDR_EXP 6
 587: PUSH
 588: LD_STRING 13c_Cyrus
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 5822 0 2
 598: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_STRING 13c_Denis
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 5822 0 2
 614: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 615: LD_ADDR_EXP 8
 619: PUSH
 620: LD_STRING 13c_Brown
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 5822 0 2
 630: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 631: LD_ADDR_EXP 9
 635: PUSH
 636: LD_STRING 13c_Gladstone
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL 5822 0 2
 646: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 647: LD_ADDR_EXP 10
 651: PUSH
 652: LD_STRING 13c_Houten
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 5822 0 2
 662: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 663: LD_ADDR_EXP 11
 667: PUSH
 668: LD_STRING 13c_Cornel
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 5822 0 2
 678: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_STRING 13c_Gary
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL 5822 0 2
 694: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 695: LD_ADDR_EXP 13
 699: PUSH
 700: LD_STRING 13c_Frank
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL 5822 0 2
 710: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 711: LD_ADDR_EXP 14
 715: PUSH
 716: LD_STRING 13c_Kikuchi
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL 5822 0 2
 726: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 727: LD_ADDR_EXP 15
 731: PUSH
 732: LD_STRING Powell
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 5822 0 2
 742: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: LD_EXP 1
 752: PUSH
 753: LD_EXP 2
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: LD_EXP 4
 767: PUSH
 768: LD_EXP 5
 772: PUSH
 773: LD_EXP 6
 777: PUSH
 778: LD_EXP 7
 782: PUSH
 783: LD_EXP 8
 787: PUSH
 788: LD_EXP 9
 792: PUSH
 793: LD_EXP 10
 797: PUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_EXP 12
 807: PUSH
 808: LD_EXP 13
 812: PUSH
 813: LD_EXP 14
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 834: LD_ADDR_VAR 0 3
 838: PUSH
 839: LD_INT 22
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 33
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 2
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// for i = tmp downto 1 do
 879: LD_ADDR_VAR 0 4
 883: PUSH
 884: DOUBLE
 885: LD_VAR 0 2
 889: INC
 890: ST_TO_ADDR
 891: LD_INT 1
 893: PUSH
 894: FOR_DOWNTO
 895: IFFALSE 932
// if not tmp [ i ] then
 897: LD_VAR 0 2
 901: PUSH
 902: LD_VAR 0 4
 906: ARRAY
 907: NOT
 908: IFFALSE 930
// tmp := Delete ( tmp , i ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_VAR 0 4
 924: PPUSH
 925: CALL_OW 3
 929: ST_TO_ADDR
 930: GO 894
 932: POP
 933: POP
// for i = 1 to tmp do
 934: LD_ADDR_VAR 0 4
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_VAR 0 2
 948: PUSH
 949: FOR_TO
 950: IFFALSE 980
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 952: LD_VAR 0 2
 956: PUSH
 957: LD_VAR 0 4
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 3
 967: PUSH
 968: LD_VAR 0 4
 972: ARRAY
 973: PPUSH
 974: CALL_OW 52
 978: GO 949
 980: POP
 981: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
 982: LD_INT 22
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 25
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PUSH
1011: LD_INT 0
1013: EQUAL
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 34
1027: PUSH
1028: LD_INT 13
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: PUSH
1044: LD_INT 0
1046: EQUAL
1047: AND
1048: IFFALSE 1062
// SetClass ( JMM , 2 ) ;
1050: LD_EXP 1
1054: PPUSH
1055: LD_INT 2
1057: PPUSH
1058: CALL_OW 336
// end ;
1062: LD_VAR 0 1
1066: RET
// export function PrepareAmericansRandom ; var i ; begin
1067: LD_INT 0
1069: PPUSH
1070: PPUSH
// uc_side = 1 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 1
1078: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1079: LD_ADDR_EXP 16
1083: PUSH
1084: LD_STRING 13c_others
1086: PPUSH
1087: CALL_OW 31
1091: ST_TO_ADDR
// for i in others13 do
1092: LD_ADDR_VAR 0 2
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: FOR_IN
1103: IFFALSE 1156
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1105: LD_VAR 0 2
1109: PPUSH
1110: LD_INT 22
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 21
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 58
1132: PUSH
1133: EMPTY
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 52
1154: GO 1102
1156: POP
1157: POP
// end ;
1158: LD_VAR 0 1
1162: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1163: LD_INT 0
1165: PPUSH
1166: PPUSH
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_STRING 13_VehiclesIn13_1
1178: PPUSH
1179: EMPTY
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1186: LD_ADDR_EXP 24
1190: PUSH
1191: LD_STRING 13_ResourcesInCargo13_1
1193: PPUSH
1194: EMPTY
1195: PPUSH
1196: CALL_OW 30
1200: ST_TO_ADDR
// cargoList = [ ] ;
1201: LD_ADDR_VAR 0 6
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// uc_side = 1 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if vehicles > 0 then
1216: LD_VAR 0 5
1220: PUSH
1221: LD_INT 0
1223: GREATER
1224: IFFALSE 1579
// begin for i := 1 to vehicles do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_VAR 0 5
1240: PUSH
1241: FOR_TO
1242: IFFALSE 1391
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_VAR 0 5
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1264: LD_ADDR_OWVAR 37
1268: PUSH
1269: LD_VAR 0 5
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 2
1282: ARRAY
1283: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1284: LD_ADDR_OWVAR 39
1288: PUSH
1289: LD_VAR 0 5
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 3
1302: ARRAY
1303: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1304: LD_ADDR_OWVAR 38
1308: PUSH
1309: LD_VAR 0 5
1313: PUSH
1314: LD_VAR 0 2
1318: ARRAY
1319: PUSH
1320: LD_INT 4
1322: ARRAY
1323: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1324: LD_ADDR_OWVAR 40
1328: PUSH
1329: LD_VAR 0 5
1333: PUSH
1334: LD_VAR 0 2
1338: ARRAY
1339: PUSH
1340: LD_INT 5
1342: ARRAY
1343: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1344: LD_ADDR_OWVAR 41
1348: PUSH
1349: LD_INT 40
1351: ST_TO_ADDR
// veh = CreateVehicle ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: CALL_OW 45
1361: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1362: LD_VAR 0 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 2
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// end ;
1389: GO 1241
1391: POP
1392: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 34
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if cargoList > 0 then
1438: LD_VAR 0 6
1442: PUSH
1443: LD_INT 0
1445: GREATER
1446: IFFALSE 1579
// for i = 1 to cargoList do
1448: LD_ADDR_VAR 0 2
1452: PUSH
1453: DOUBLE
1454: LD_INT 1
1456: DEC
1457: ST_TO_ADDR
1458: LD_VAR 0 6
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1577
// begin if resources > 0 then
1466: LD_EXP 24
1470: PUSH
1471: LD_INT 0
1473: GREATER
1474: IFFALSE 1575
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1476: LD_VAR 0 6
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PPUSH
1487: LD_INT 1
1489: PPUSH
1490: LD_EXP 24
1494: PUSH
1495: LD_VAR 0 2
1499: ARRAY
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1509: LD_VAR 0 6
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PPUSH
1520: LD_INT 2
1522: PPUSH
1523: LD_EXP 24
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 2
1536: ARRAY
1537: PPUSH
1538: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1542: LD_VAR 0 6
1546: PUSH
1547: LD_VAR 0 2
1551: ARRAY
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_EXP 24
1560: PUSH
1561: LD_VAR 0 2
1565: ARRAY
1566: PUSH
1567: LD_INT 3
1569: ARRAY
1570: PPUSH
1571: CALL_OW 291
// end ; end ;
1575: GO 1463
1577: POP
1578: POP
// end ; end ;
1579: LD_VAR 0 1
1583: RET
// export function PowellSupport ; var i , veh , un ; begin
1584: LD_INT 0
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
// for i = 1 to 3 do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_INT 3
1602: PUSH
1603: FOR_TO
1604: IFFALSE 1805
// begin uc_nation = 1 ;
1606: LD_ADDR_OWVAR 21
1610: PUSH
1611: LD_INT 1
1613: ST_TO_ADDR
// uc_side = 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// vc_engine = 3 ;
1622: LD_ADDR_OWVAR 39
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// vc_control = 1 ;
1630: LD_ADDR_OWVAR 38
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1638: LD_ADDR_OWVAR 40
1642: PUSH
1643: LD_INT 9
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: LD_INT 7
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 1
1667: PPUSH
1668: LD_INT 5
1670: PPUSH
1671: CALL_OW 12
1675: ARRAY
1676: ST_TO_ADDR
// if vc_weapon = 6 then
1677: LD_OWVAR 40
1681: PUSH
1682: LD_INT 6
1684: EQUAL
1685: IFFALSE 1697
// vc_chassis = 4 else
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
1695: GO 1705
// vc_chassis = 3 ;
1697: LD_ADDR_OWVAR 37
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// veh = CreateVehicle ;
1705: LD_ADDR_VAR 0 3
1709: PUSH
1710: CALL_OW 45
1714: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 49
// SetDir ( veh , 1 ) ;
1730: LD_VAR 0 3
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: CALL_OW 233
// hc_gallery =  ;
1742: LD_ADDR_OWVAR 33
1746: PUSH
1747: LD_STRING 
1749: ST_TO_ADDR
// hc_name =  ;
1750: LD_ADDR_OWVAR 26
1754: PUSH
1755: LD_STRING 
1757: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 3
1763: PPUSH
1764: LD_INT 7
1766: PPUSH
1767: LD_INT 10
1769: PPUSH
1770: CALL_OW 12
1774: PPUSH
1775: CALL_OW 380
// un = CreateHuman ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1789: LD_VAR 0 4
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL_OW 52
// end ;
1803: GO 1603
1805: POP
1806: POP
// end ; end_of_file
1807: LD_VAR 0 1
1811: RET
// export function PrepareBurlak ; begin
1812: LD_INT 0
1814: PPUSH
// uc_side = 7 ;
1815: LD_ADDR_OWVAR 20
1819: PUSH
1820: LD_INT 7
1822: ST_TO_ADDR
// uc_nation = 3 ;
1823: LD_ADDR_OWVAR 21
1827: PUSH
1828: LD_INT 3
1830: ST_TO_ADDR
// vc_engine = 3 ;
1831: LD_ADDR_OWVAR 39
1835: PUSH
1836: LD_INT 3
1838: ST_TO_ADDR
// vc_control = 1 ;
1839: LD_ADDR_OWVAR 38
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// vc_weapon = 46 ;
1847: LD_ADDR_OWVAR 40
1851: PUSH
1852: LD_INT 46
1854: ST_TO_ADDR
// vc_chassis = 24 ;
1855: LD_ADDR_OWVAR 37
1859: PUSH
1860: LD_INT 24
1862: ST_TO_ADDR
// Masha = CreateVehicle ;
1863: LD_ADDR_EXP 18
1867: PUSH
1868: CALL_OW 45
1872: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1888: LD_EXP 18
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING Burlak
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL 5822 0 2
1915: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1916: LD_EXP 17
1920: PPUSH
1921: LD_EXP 18
1925: PPUSH
1926: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1930: LD_EXP 18
1934: PPUSH
1935: LD_INT 107
1937: PPUSH
1938: LD_INT 118
1940: PPUSH
1941: CALL_OW 114
// spawnBurlak = 1 ;
1945: LD_ADDR_EXP 27
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// end ;
1953: LD_VAR 0 1
1957: RET
// export function BurlakArmy ; var i , veh ; begin
1958: LD_INT 0
1960: PPUSH
1961: PPUSH
1962: PPUSH
// uc_side = 7 ;
1963: LD_ADDR_OWVAR 20
1967: PUSH
1968: LD_INT 7
1970: ST_TO_ADDR
// uc_nation = 3 ;
1971: LD_ADDR_OWVAR 21
1975: PUSH
1976: LD_INT 3
1978: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1979: LD_ADDR_EXP 19
1983: PUSH
1984: LD_STRING Gnyevko
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL 5822 0 2
1994: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
1995: LD_ADDR_EXP 20
1999: PUSH
2000: LD_STRING Titov
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL 5822 0 2
2010: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2011: LD_ADDR_EXP 21
2015: PUSH
2016: LD_STRING Xavier2
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL 5822 0 2
2026: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2027: LD_ADDR_EXP 22
2031: PUSH
2032: LD_STRING Belkov
2034: PPUSH
2035: LD_INT 0
2037: PPUSH
2038: CALL 5822 0 2
2042: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2043: LD_ADDR_EXP 23
2047: PUSH
2048: LD_STRING Lipshchin
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL 5822 0 2
2058: ST_TO_ADDR
// for i = 1 to 5 do
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: DOUBLE
2065: LD_INT 1
2067: DEC
2068: ST_TO_ADDR
2069: LD_INT 5
2071: PUSH
2072: FOR_TO
2073: IFFALSE 2161
// begin vc_engine = 3 ;
2075: LD_ADDR_OWVAR 39
2079: PUSH
2080: LD_INT 3
2082: ST_TO_ADDR
// vc_control = 1 ;
2083: LD_ADDR_OWVAR 38
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2091: LD_ADDR_OWVAR 40
2095: PUSH
2096: LD_INT 43
2098: PUSH
2099: LD_INT 44
2101: PUSH
2102: LD_INT 45
2104: PUSH
2105: LD_INT 49
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 1
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: CALL_OW 12
2124: ARRAY
2125: ST_TO_ADDR
// vc_chassis = 22 ;
2126: LD_ADDR_OWVAR 37
2130: PUSH
2131: LD_INT 22
2133: ST_TO_ADDR
// veh = CreateVehicle ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2144: LD_VAR 0 3
2148: PPUSH
2149: LD_INT 3
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 49
// end ;
2159: GO 2072
2161: POP
2162: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2163: LD_EXP 19
2167: PPUSH
2168: LD_INT 22
2170: PUSH
2171: LD_INT 7
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 21
2180: PUSH
2181: LD_INT 2
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 58
2190: PUSH
2191: EMPTY
2192: LIST
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PPUSH
2199: CALL_OW 69
2203: PUSH
2204: LD_INT 1
2206: ARRAY
2207: PPUSH
2208: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2212: LD_EXP 20
2216: PPUSH
2217: LD_INT 22
2219: PUSH
2220: LD_INT 7
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 2
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 58
2239: PUSH
2240: EMPTY
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 69
2252: PUSH
2253: LD_INT 1
2255: ARRAY
2256: PPUSH
2257: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2261: LD_EXP 21
2265: PPUSH
2266: LD_INT 22
2268: PUSH
2269: LD_INT 7
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 21
2278: PUSH
2279: LD_INT 2
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 58
2288: PUSH
2289: EMPTY
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL_OW 69
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PPUSH
2306: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2310: LD_EXP 22
2314: PPUSH
2315: LD_INT 22
2317: PUSH
2318: LD_INT 7
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 21
2327: PUSH
2328: LD_INT 2
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 58
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: PPUSH
2346: CALL_OW 69
2350: PUSH
2351: LD_INT 1
2353: ARRAY
2354: PPUSH
2355: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2359: LD_EXP 23
2363: PPUSH
2364: LD_INT 22
2366: PUSH
2367: LD_INT 7
2369: PUSH
2370: EMPTY
2371: LIST
2372: LIST
2373: PUSH
2374: LD_INT 21
2376: PUSH
2377: LD_INT 2
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: PUSH
2384: LD_INT 58
2386: PUSH
2387: EMPTY
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PPUSH
2395: CALL_OW 69
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2408: LD_EXP 19
2412: PPUSH
2413: LD_INT 3
2415: PPUSH
2416: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2420: LD_EXP 20
2424: PUSH
2425: LD_EXP 23
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: LD_INT 9
2436: PPUSH
2437: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2441: LD_INT 22
2443: PUSH
2444: LD_INT 7
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 21
2453: PUSH
2454: LD_INT 2
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PPUSH
2465: CALL_OW 69
2469: PPUSH
2470: LD_INT 107
2472: PPUSH
2473: LD_INT 118
2475: PPUSH
2476: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2480: LD_INT 35
2482: PPUSH
2483: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2487: LD_INT 22
2489: PUSH
2490: LD_INT 7
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 21
2499: PUSH
2500: LD_INT 2
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 34
2509: PUSH
2510: LD_INT 49
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PPUSH
2522: CALL_OW 69
2526: PPUSH
2527: LD_EXP 18
2531: PPUSH
2532: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2536: LD_INT 22
2538: PUSH
2539: LD_INT 7
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 21
2548: PUSH
2549: LD_INT 2
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 34
2558: PUSH
2559: LD_INT 49
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: PUSH
2576: LD_INT 0
2578: EQUAL
2579: PUSH
2580: LD_EXP 18
2584: PPUSH
2585: CALL_OW 303
2589: OR
2590: IFFALSE 2480
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 21
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: PPUSH
2621: LD_INT 107
2623: PPUSH
2624: LD_INT 118
2626: PPUSH
2627: CALL_OW 114
// end ; end_of_file
2631: LD_VAR 0 1
2635: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2636: LD_INT 22
2638: PUSH
2639: LD_INT 8
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 33
2648: PUSH
2649: LD_INT 2
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PPUSH
2660: CALL_OW 69
2664: PUSH
2665: LD_INT 0
2667: GREATER
2668: PUSH
2669: LD_INT 22
2671: PUSH
2672: LD_INT 8
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 34
2681: PUSH
2682: LD_INT 31
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: CALL_OW 69
2697: PUSH
2698: LD_INT 0
2700: EQUAL
2701: AND
2702: IFFALSE 2925
2704: GO 2706
2706: DISABLE
2707: LD_INT 0
2709: PPUSH
// begin enable ;
2710: ENABLE
// uc_side = 8 ;
2711: LD_ADDR_OWVAR 20
2715: PUSH
2716: LD_INT 8
2718: ST_TO_ADDR
// uc_nation = 2 ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_INT 2
2726: ST_TO_ADDR
// vc_engine = 3 ;
2727: LD_ADDR_OWVAR 39
2731: PUSH
2732: LD_INT 3
2734: ST_TO_ADDR
// vc_control = 1 ;
2735: LD_ADDR_OWVAR 38
2739: PUSH
2740: LD_INT 1
2742: ST_TO_ADDR
// vc_weapon = 31 ;
2743: LD_ADDR_OWVAR 40
2747: PUSH
2748: LD_INT 31
2750: ST_TO_ADDR
// vc_chassis = 14 ;
2751: LD_ADDR_OWVAR 37
2755: PUSH
2756: LD_INT 14
2758: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2759: LD_ADDR_EXP 34
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2769: LD_EXP 34
2773: PPUSH
2774: LD_INT 8
2776: PUSH
2777: LD_INT 9
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 1
2786: PPUSH
2787: LD_INT 2
2789: PPUSH
2790: CALL_OW 12
2794: ARRAY
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 49
// hc_name =  ;
2803: LD_ADDR_OWVAR 26
2807: PUSH
2808: LD_STRING 
2810: ST_TO_ADDR
// hc_gallery =  ;
2811: LD_ADDR_OWVAR 33
2815: PUSH
2816: LD_STRING 
2818: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2819: LD_INT 0
2821: PPUSH
2822: LD_INT 3
2824: PPUSH
2825: LD_INT 10
2827: PPUSH
2828: CALL_OW 380
// arDriver = CreateHuman ;
2832: LD_ADDR_EXP 35
2836: PUSH
2837: CALL_OW 44
2841: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
2842: LD_EXP 35
2846: PPUSH
2847: LD_EXP 34
2851: PPUSH
2852: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2856: LD_ADDR_VAR 0 1
2860: PUSH
2861: LD_INT 22
2863: PUSH
2864: LD_INT 8
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 33
2873: PUSH
2874: LD_INT 2
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 61
2886: PUSH
2887: EMPTY
2888: LIST
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: EMPTY
2895: LIST
2896: LIST
2897: LIST
2898: PPUSH
2899: CALL_OW 69
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2923
// ComLinkTo ( i , arDriver ) ;
2907: LD_VAR 0 1
2911: PPUSH
2912: LD_EXP 35
2916: PPUSH
2917: CALL_OW 135
2921: GO 2904
2923: POP
2924: POP
// end ;
2925: PPOPN 1
2927: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) > 0 do var i ;
2928: LD_INT 22
2930: PUSH
2931: LD_INT 8
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 33
2940: PUSH
2941: LD_INT 2
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 61
2953: PUSH
2954: EMPTY
2955: LIST
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: PPUSH
2966: CALL_OW 69
2970: PUSH
2971: LD_INT 0
2973: GREATER
2974: PUSH
2975: LD_INT 22
2977: PUSH
2978: LD_INT 8
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: PUSH
2985: LD_INT 34
2987: PUSH
2988: LD_INT 31
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PPUSH
2999: CALL_OW 69
3003: PUSH
3004: LD_INT 0
3006: GREATER
3007: AND
3008: IFFALSE 3086
3010: GO 3012
3012: DISABLE
3013: LD_INT 0
3015: PPUSH
// begin enable ;
3016: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3017: LD_ADDR_VAR 0 1
3021: PUSH
3022: LD_INT 22
3024: PUSH
3025: LD_INT 8
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 33
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 3
3044: PUSH
3045: LD_INT 61
3047: PUSH
3048: EMPTY
3049: LIST
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PPUSH
3060: CALL_OW 69
3064: PUSH
3065: FOR_IN
3066: IFFALSE 3084
// ComLinkTo ( i , arDriver ) ;
3068: LD_VAR 0 1
3072: PPUSH
3073: LD_EXP 35
3077: PPUSH
3078: CALL_OW 135
3082: GO 3065
3084: POP
3085: POP
// end ;
3086: PPOPN 1
3088: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3089: LD_INT 22
3091: PUSH
3092: LD_INT 8
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 21
3101: PUSH
3102: LD_INT 2
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 33
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 69
3128: PUSH
3129: LD_INT 0
3131: EQUAL
3132: IFFALSE 3156
3134: GO 3136
3136: DISABLE
// begin enable ;
3137: ENABLE
// RemoveUnit ( arControlTower ) ;
3138: LD_EXP 34
3142: PPUSH
3143: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3147: LD_EXP 35
3151: PPUSH
3152: CALL_OW 64
// end ;
3156: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3157: LD_EXP 31
3161: PUSH
3162: LD_INT 0
3164: GREATER
3165: IFFALSE 3329
3167: GO 3169
3169: DISABLE
3170: LD_INT 0
3172: PPUSH
3173: PPUSH
// begin enable ;
3174: ENABLE
// rnd = 0 ;
3175: LD_ADDR_VAR 0 2
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// uc_side = 2 ;
3183: LD_ADDR_OWVAR 20
3187: PUSH
3188: LD_INT 2
3190: ST_TO_ADDR
// uc_nation = 2 ;
3191: LD_ADDR_OWVAR 21
3195: PUSH
3196: LD_INT 2
3198: ST_TO_ADDR
// hc_name =  ;
3199: LD_ADDR_OWVAR 26
3203: PUSH
3204: LD_STRING 
3206: ST_TO_ADDR
// hc_gallery =  ;
3207: LD_ADDR_OWVAR 33
3211: PUSH
3212: LD_STRING 
3214: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 4
3220: PPUSH
3221: LD_INT 10
3223: PPUSH
3224: CALL_OW 380
// un = CreateHuman ;
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: CALL_OW 44
3237: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3238: LD_VAR 0 1
3242: PPUSH
3243: LD_INT 8
3245: PUSH
3246: LD_INT 9
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 1
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: CALL_OW 12
3263: ARRAY
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3272: LD_ADDR_VAR 0 2
3276: PUSH
3277: LD_INT 1
3279: PPUSH
3280: LD_EXP 31
3284: PPUSH
3285: CALL_OW 12
3289: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3290: LD_VAR 0 1
3294: PPUSH
3295: LD_EXP 31
3299: PUSH
3300: LD_VAR 0 2
3304: ARRAY
3305: PUSH
3306: LD_INT 1
3308: ARRAY
3309: PPUSH
3310: LD_EXP 31
3314: PUSH
3315: LD_VAR 0 2
3319: ARRAY
3320: PUSH
3321: LD_INT 2
3323: ARRAY
3324: PPUSH
3325: CALL_OW 158
// end ; end_of_file
3329: PPOPN 2
3331: END
// every 1 do
3332: GO 3334
3334: DISABLE
// begin InGameOn ;
3335: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3339: LD_INT 22
3341: PUSH
3342: LD_INT 1
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 21
3351: PUSH
3352: LD_INT 2
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PPUSH
3363: CALL_OW 69
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3376: LD_INT 22
3378: PUSH
3379: LD_INT 1
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 2
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PPUSH
3400: CALL_OW 69
3404: PPUSH
3405: LD_INT 69
3407: PPUSH
3408: LD_INT 94
3410: PPUSH
3411: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3415: LD_EXP 1
3419: PPUSH
3420: LD_STRING D2-JMM-1
3422: PPUSH
3423: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3427: LD_INT 22
3429: PUSH
3430: LD_INT 1
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 21
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: PUSH
3456: LD_INT 1
3458: ARRAY
3459: PPUSH
3460: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3464: LD_EXP 2
3468: PPUSH
3469: LD_STRING D2-Huck-1
3471: PPUSH
3472: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3476: LD_INT 22
3478: PUSH
3479: LD_INT 1
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 21
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: LD_INT 1
3507: ARRAY
3508: PPUSH
3509: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3513: LD_EXP 1
3517: PPUSH
3518: LD_STRING D2-JMM-2
3520: PPUSH
3521: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3525: LD_INT 22
3527: PUSH
3528: LD_INT 1
3530: PUSH
3531: EMPTY
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 21
3537: PUSH
3538: LD_INT 2
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 69
3553: PUSH
3554: LD_INT 1
3556: ARRAY
3557: PPUSH
3558: CALL_OW 87
// InGameOff ;
3562: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3566: LD_STRING M1
3568: PPUSH
3569: CALL_OW 337
// SaveForQuickRestart ;
3573: CALL_OW 22
// end ;
3577: END
// every 10 10$0 do
3578: GO 3580
3580: DISABLE
// begin DialogueOn ;
3581: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3585: LD_EXP 15
3589: PPUSH
3590: LD_STRING D3-Pow-1
3592: PPUSH
3593: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3597: LD_EXP 1
3601: PPUSH
3602: LD_STRING D3-JMM-1
3604: PPUSH
3605: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3609: LD_EXP 15
3613: PPUSH
3614: LD_STRING D3-Pow-2
3616: PPUSH
3617: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3621: LD_EXP 1
3625: PPUSH
3626: LD_STRING D3-JMM-2
3628: PPUSH
3629: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3633: LD_EXP 15
3637: PPUSH
3638: LD_STRING D3-Pow-3
3640: PPUSH
3641: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3645: LD_EXP 1
3649: PPUSH
3650: LD_STRING D3-JMM-3
3652: PPUSH
3653: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3657: LD_EXP 15
3661: PPUSH
3662: LD_STRING D3-Pow-4
3664: PPUSH
3665: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3669: LD_EXP 1
3673: PPUSH
3674: LD_STRING D3-JMM-4
3676: PPUSH
3677: CALL_OW 88
// DialogueOff ;
3681: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3685: LD_STRING M2
3687: PPUSH
3688: CALL_OW 337
// wait ( 2 2$30 ) ;
3692: LD_INT 5250
3694: PPUSH
3695: CALL_OW 67
// PrepareBurlak ;
3699: CALL 1812 0 0
// BurlakArmy ;
3703: CALL 1958 0 0
// end ;
3707: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3708: LD_INT 1
3710: PPUSH
3711: LD_EXP 18
3715: PPUSH
3716: CALL_OW 292
3720: IFFALSE 3879
3722: GO 3724
3724: DISABLE
// begin DialogueOn ;
3725: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3729: LD_EXP 18
3733: PPUSH
3734: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3738: LD_INT 22
3740: PUSH
3741: LD_INT 1
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PUSH
3748: LD_INT 26
3750: PUSH
3751: LD_INT 1
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: PUSH
3758: LD_INT 2
3760: PUSH
3761: LD_INT 25
3763: PUSH
3764: LD_INT 1
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 25
3773: PUSH
3774: LD_INT 2
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_INT 25
3783: PUSH
3784: LD_INT 3
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: PUSH
3791: LD_INT 25
3793: PUSH
3794: LD_INT 4
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 25
3803: PUSH
3804: LD_INT 5
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: PPUSH
3829: LD_STRING D5-Sol1-1
3831: PPUSH
3832: LD_STRING D5-FSol1-1
3834: PPUSH
3835: CALL 5879 0 3
// Say ( JMM , D5-JMM-1 ) ;
3839: LD_EXP 1
3843: PPUSH
3844: LD_STRING D5-JMM-1
3846: PPUSH
3847: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3851: LD_EXP 17
3855: PPUSH
3856: LD_STRING DAmer-Bur-1
3858: PPUSH
3859: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3863: LD_EXP 1
3867: PPUSH
3868: LD_STRING DAmer-JMM-1
3870: PPUSH
3871: CALL_OW 88
// DialogueOff ;
3875: CALL_OW 7
// end ;
3879: END
// every 0 0$1 do var i ;
3880: GO 3882
3882: DISABLE
3883: LD_INT 0
3885: PPUSH
// begin enable ;
3886: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3887: LD_ADDR_VAR 0 1
3891: PUSH
3892: LD_INT 22
3894: PUSH
3895: LD_INT 7
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PPUSH
3902: CALL_OW 69
3906: PUSH
3907: FOR_IN
3908: IFFALSE 4133
// if IsInArea ( i , AllianceEscape ) then
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 4
3917: PPUSH
3918: CALL_OW 308
3922: IFFALSE 4131
// begin if i = Burlak or i = Masha then
3924: LD_VAR 0 1
3928: PUSH
3929: LD_EXP 17
3933: EQUAL
3934: PUSH
3935: LD_VAR 0 1
3939: PUSH
3940: LD_EXP 18
3944: EQUAL
3945: OR
3946: IFFALSE 4093
// begin RemoveUnit ( i ) ;
3948: LD_VAR 0 1
3952: PPUSH
3953: CALL_OW 64
// DialogueOn ;
3957: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3961: LD_EXP 1
3965: PPUSH
3966: LD_STRING D5a-JMM-1
3968: PPUSH
3969: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3973: LD_INT 22
3975: PUSH
3976: LD_INT 1
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 26
3985: PUSH
3986: LD_INT 1
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 25
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: LD_INT 25
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 25
4028: PUSH
4029: LD_INT 4
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 25
4038: PUSH
4039: LD_INT 5
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: PPUSH
4064: LD_STRING D5a-Sol1-1
4066: PPUSH
4067: LD_STRING D5-FSol1-1
4069: PPUSH
4070: CALL 5879 0 3
// DialogueOff ;
4074: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4078: LD_STRING M2b
4080: PPUSH
4081: CALL_OW 337
// spawnBurlak = 0 ;
4085: LD_ADDR_EXP 27
4089: PUSH
4090: LD_INT 0
4092: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 264
4102: PUSH
4103: LD_INT 49
4105: EQUAL
4106: IFFALSE 4122
// SetLives ( i , 1 ) else
4108: LD_VAR 0 1
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: CALL_OW 234
4120: GO 4131
// RemoveUnit ( i ) ;
4122: LD_VAR 0 1
4126: PPUSH
4127: CALL_OW 64
// end ;
4131: GO 3907
4133: POP
4134: POP
// end ;
4135: PPOPN 1
4137: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4138: LD_EXP 18
4142: PPUSH
4143: CALL_OW 256
4147: PUSH
4148: LD_INT 500
4150: LESS
4151: PUSH
4152: LD_EXP 18
4156: PPUSH
4157: CALL_OW 255
4161: PUSH
4162: LD_INT 7
4164: EQUAL
4165: AND
4166: IFFALSE 4186
4168: GO 4170
4170: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4171: LD_EXP 18
4175: PPUSH
4176: LD_INT 107
4178: PPUSH
4179: LD_INT 118
4181: PPUSH
4182: CALL_OW 111
4186: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4187: LD_EXP 17
4191: PPUSH
4192: CALL_OW 301
4196: PUSH
4197: LD_EXP 27
4201: PUSH
4202: LD_INT 1
4204: EQUAL
4205: AND
4206: IFFALSE 4339
4208: GO 4210
4210: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4211: LD_EXP 1
4215: PPUSH
4216: LD_STRING D5b-JMM-1
4218: PPUSH
4219: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4223: LD_INT 22
4225: PUSH
4226: LD_INT 1
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: PUSH
4233: LD_INT 26
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 1
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 2
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 4
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 5
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PPUSH
4314: LD_STRING D5b-Sol1-1
4316: PPUSH
4317: LD_STRING 
4319: PPUSH
4320: CALL 5879 0 3
// ChangeMissionObjectives ( M2a ) ;
4324: LD_STRING M2a
4326: PPUSH
4327: CALL_OW 337
// burlakStatus = 1 ;
4331: LD_ADDR_EXP 28
4335: PUSH
4336: LD_INT 1
4338: ST_TO_ADDR
// end ;
4339: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4340: LD_EXP 2
4344: PPUSH
4345: CALL_OW 301
4349: IFFALSE 4486
4351: GO 4353
4353: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4354: LD_EXP 1
4358: PPUSH
4359: LD_STRING D6-JMM-1
4361: PPUSH
4362: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4366: LD_INT 22
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 26
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 2
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 1
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 25
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 3
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 4
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 25
4431: PUSH
4432: LD_INT 5
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: PPUSH
4452: CALL_OW 69
4456: PPUSH
4457: LD_STRING D6-Sol1-1
4459: PPUSH
4460: LD_STRING 
4462: PPUSH
4463: CALL 5879 0 3
// Say ( JMM , D6-JMM-2 ) ;
4467: LD_EXP 1
4471: PPUSH
4472: LD_STRING D6-JMM-2
4474: PPUSH
4475: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4479: LD_STRING M1a
4481: PPUSH
4482: CALL_OW 337
// end ;
4486: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4487: LD_INT 25
4489: PPUSH
4490: LD_INT 1
4492: PPUSH
4493: CALL_OW 321
4497: PUSH
4498: LD_INT 2
4500: EQUAL
4501: IFFALSE 4518
4503: GO 4505
4505: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4506: LD_EXP 2
4510: PPUSH
4511: LD_STRING D6-Huck-2
4513: PPUSH
4514: CALL_OW 88
// end ;
4518: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4519: LD_INT 22
4521: PUSH
4522: LD_INT 1
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 2
4531: PUSH
4532: LD_INT 34
4534: PUSH
4535: LD_INT 8
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PUSH
4542: LD_INT 35
4544: PUSH
4545: LD_INT 8
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: LIST
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: PPUSH
4561: CALL_OW 69
4565: PUSH
4566: LD_INT 0
4568: GREATER
4569: IFFALSE 4761
4571: GO 4573
4573: DISABLE
4574: LD_INT 0
4576: PPUSH
4577: PPUSH
// begin enable ;
4578: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4579: LD_ADDR_VAR 0 1
4583: PUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 22
4589: PUSH
4590: LD_INT 1
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 21
4599: PUSH
4600: LD_INT 3
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 1
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 3
4619: PUSH
4620: LD_INT 57
4622: PUSH
4623: EMPTY
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 70
4640: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4641: LD_ADDR_VAR 0 2
4645: PUSH
4646: LD_INT 5
4648: PPUSH
4649: LD_INT 22
4651: PUSH
4652: LD_INT 1
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 21
4661: PUSH
4662: LD_INT 3
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 30
4671: PUSH
4672: LD_INT 5
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 57
4684: PUSH
4685: EMPTY
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: PPUSH
4698: CALL_OW 70
4702: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4703: LD_VAR 0 1
4707: PUSH
4708: LD_INT 0
4710: GREATER
4711: PUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 0
4719: GREATER
4720: AND
4721: IFFALSE 4761
// begin disable ;
4723: DISABLE
// DialogueOn ;
4724: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4728: LD_EXP 1
4732: PPUSH
4733: LD_STRING D7-JMM-1
4735: PPUSH
4736: CALL_OW 88
// DialogueOff ;
4740: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4744: LD_STRING M4
4746: PPUSH
4747: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4751: LD_INT 5
4753: PPUSH
4754: LD_INT 0
4756: PPUSH
4757: CALL_OW 424
// end ; end ;
4761: PPOPN 2
4763: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4764: LD_INT 6
4766: PPUSH
4767: LD_INT 22
4769: PUSH
4770: LD_INT 1
4772: PUSH
4773: EMPTY
4774: LIST
4775: LIST
4776: PUSH
4777: LD_INT 25
4779: PUSH
4780: LD_INT 4
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PPUSH
4791: CALL_OW 70
4795: PUSH
4796: LD_INT 0
4798: GREATER
4799: PUSH
4800: LD_EXP 39
4804: PUSH
4805: LD_INT 1
4807: EQUAL
4808: AND
4809: PUSH
4810: LD_EXP 29
4814: PUSH
4815: LD_INT 0
4817: EQUAL
4818: AND
4819: IFFALSE 4884
4821: GO 4823
4823: DISABLE
// begin enable ;
4824: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4825: LD_ADDR_EXP 26
4829: PUSH
4830: LD_INT 6
4832: PPUSH
4833: LD_INT 22
4835: PUSH
4836: LD_INT 1
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 25
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 70
4861: PUSH
4862: LD_INT 1
4864: ARRAY
4865: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 0
4871: PPUSH
4872: CALL_OW 424
// radationResearched = 1 ;
4876: LD_ADDR_EXP 29
4880: PUSH
4881: LD_INT 1
4883: ST_TO_ADDR
// end ;
4884: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4885: LD_EXP 26
4889: PPUSH
4890: CALL_OW 301
4894: PUSH
4895: LD_EXP 29
4899: PUSH
4900: LD_INT 1
4902: EQUAL
4903: AND
4904: IFFALSE 4940
4906: GO 4908
4908: DISABLE
// begin enable ;
4909: ENABLE
// radationResearched = 0 ;
4910: LD_ADDR_EXP 29
4914: PUSH
4915: LD_INT 0
4917: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4918: LD_INT 6
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4928: LD_EXP 1
4932: PPUSH
4933: LD_STRING D9a-JMM-1
4935: PPUSH
4936: CALL_OW 88
// end ; end_of_file
4940: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4941: LD_VAR 0 5
4945: PUSH
4946: LD_INT 8
4948: EQUAL
4949: PUSH
4950: LD_EXP 37
4954: PUSH
4955: LD_INT 0
4957: EQUAL
4958: AND
4959: IFFALSE 5012
// begin eventVar1 = 1 ;
4961: LD_ADDR_EXP 37
4965: PUSH
4966: LD_INT 1
4968: ST_TO_ADDR
// DialogueOn ;
4969: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
4973: LD_EXP 1
4977: PPUSH
4978: LD_STRING D6a-JMM-1
4980: PPUSH
4981: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
4985: LD_EXP 15
4989: PPUSH
4990: LD_STRING D6a-Pow-1
4992: PPUSH
4993: CALL_OW 94
// DialogueOff ;
4997: CALL_OW 7
// wait ( 3 3$0 ) ;
5001: LD_INT 6300
5003: PPUSH
5004: CALL_OW 67
// PowellSupport ;
5008: CALL 1584 0 0
// end ; end ;
5012: PPOPN 5
5014: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5015: LD_VAR 0 1
5019: PPUSH
5020: CALL_OW 264
5024: PUSH
5025: LD_INT 8
5027: EQUAL
5028: PUSH
5029: LD_EXP 38
5033: PUSH
5034: LD_INT 0
5036: EQUAL
5037: AND
5038: IFFALSE 5107
// begin eventVar2 = 1 ;
5040: LD_ADDR_EXP 38
5044: PUSH
5045: LD_INT 1
5047: ST_TO_ADDR
// DialogueOn ;
5048: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5052: LD_EXP 1
5056: PPUSH
5057: LD_STRING D6b-JMM-1
5059: PPUSH
5060: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5064: LD_EXP 15
5068: PPUSH
5069: LD_STRING D6b-Pow-1
5071: PPUSH
5072: CALL_OW 94
// DialogueOff ;
5076: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5080: LD_INT 5
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5090: LD_INT 7
5092: PPUSH
5093: LD_INT 1
5095: PPUSH
5096: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5100: LD_STRING M3
5102: PPUSH
5103: CALL_OW 337
// end ; end ;
5107: PPOPN 2
5109: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5110: LD_VAR 0 2
5114: PPUSH
5115: LD_VAR 0 3
5119: PPUSH
5120: LD_INT 5
5122: PPUSH
5123: CALL_OW 309
5127: PUSH
5128: LD_EXP 39
5132: PUSH
5133: LD_INT 0
5135: EQUAL
5136: AND
5137: IFFALSE 5355
// begin eventVar3 = 1 ;
5139: LD_ADDR_EXP 39
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5147: LD_INT 175
5149: PPUSH
5150: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5154: LD_INT 7
5156: PPUSH
5157: LD_INT 22
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 2
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 34
5179: PUSH
5180: LD_INT 11
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: CALL_OW 70
5196: PUSH
5197: LD_INT 0
5199: GREATER
5200: IFFALSE 5219
// begin radarOnSpot = 1 ;
5202: LD_ADDR_EXP 30
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5210: LD_STRING M3a
5212: PPUSH
5213: CALL_OW 337
// end else
5217: GO 5226
// begin ChangeMissionObjectives ( M3b ) ;
5219: LD_STRING M3b
5221: PPUSH
5222: CALL_OW 337
// end ; DialogueOn ;
5226: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5230: LD_EXP 2
5234: PPUSH
5235: LD_STRING D8-Huck-1
5237: PPUSH
5238: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5242: LD_EXP 1
5246: PPUSH
5247: LD_STRING D8-JMM-1
5249: PPUSH
5250: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5254: LD_EXP 2
5258: PPUSH
5259: LD_STRING D8-Huck-2
5261: PPUSH
5262: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5266: LD_EXP 1
5270: PPUSH
5271: LD_STRING D8-JMM-2
5273: PPUSH
5274: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5278: LD_EXP 2
5282: PPUSH
5283: LD_STRING D8-Huck-3
5285: PPUSH
5286: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5290: LD_EXP 1
5294: PPUSH
5295: LD_STRING D8-JMM-3
5297: PPUSH
5298: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5302: LD_EXP 2
5306: PPUSH
5307: LD_STRING D8-Huck-4
5309: PPUSH
5310: CALL_OW 88
// DialogueOff ;
5314: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5318: LD_INT 5
5320: PPUSH
5321: LD_INT 0
5323: PPUSH
5324: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5328: LD_INT 7
5330: PPUSH
5331: LD_INT 0
5333: PPUSH
5334: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5338: LD_INT 6
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5348: LD_STRING M5
5350: PPUSH
5351: CALL_OW 337
// end ; end ;
5355: PPOPN 3
5357: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5358: LD_EXP 26
5362: PPUSH
5363: CALL_OW 302
5367: PUSH
5368: LD_VAR 0 2
5372: PUSH
5373: LD_EXP 26
5377: EQUAL
5378: AND
5379: PUSH
5380: LD_EXP 40
5384: PUSH
5385: LD_INT 0
5387: EQUAL
5388: AND
5389: PUSH
5390: LD_EXP 39
5394: PUSH
5395: LD_INT 1
5397: EQUAL
5398: AND
5399: IFFALSE 5445
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5401: LD_VAR 0 1
5405: PPUSH
5406: LD_INT 1
5408: PPUSH
5409: CALL_OW 268
5413: PUSH
5414: LD_INT 11
5416: EQUAL
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: LD_INT 2
5425: PPUSH
5426: CALL_OW 268
5430: PUSH
5431: LD_INT 11
5433: EQUAL
5434: OR
5435: IFFALSE 5445
// eventVar4 = 1 ;
5437: LD_ADDR_EXP 40
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// end ;
5445: PPOPN 2
5447: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5448: LD_INT 0
5450: PPUSH
5451: PPUSH
// begin if GetNation ( unit ) = 2 then
5452: LD_VAR 0 1
5456: PPUSH
5457: CALL_OW 248
5461: PUSH
5462: LD_INT 2
5464: EQUAL
5465: IFFALSE 5711
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5467: LD_ADDR_EXP 32
5471: PUSH
5472: LD_EXP 32
5476: PUSH
5477: LD_INT 1
5479: PLUS
5480: ST_TO_ADDR
// for i := 1 to sibDeposits do
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_EXP 31
5495: PUSH
5496: FOR_TO
5497: IFFALSE 5599
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5499: LD_EXP 31
5503: PUSH
5504: LD_VAR 0 4
5508: ARRAY
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PUSH
5514: LD_VAR 0 2
5518: EQUAL
5519: PUSH
5520: LD_EXP 31
5524: PUSH
5525: LD_VAR 0 4
5529: ARRAY
5530: PUSH
5531: LD_INT 2
5533: ARRAY
5534: PUSH
5535: LD_VAR 0 3
5539: EQUAL
5540: AND
5541: IFFALSE 5597
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5543: LD_ADDR_EXP 31
5547: PUSH
5548: LD_EXP 31
5552: PPUSH
5553: LD_VAR 0 4
5557: PUSH
5558: EMPTY
5559: LIST
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PPUSH
5565: CALL_OW 3
5569: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5570: LD_ADDR_EXP 31
5574: PUSH
5575: LD_EXP 31
5579: PPUSH
5580: LD_VAR 0 4
5584: PUSH
5585: EMPTY
5586: LIST
5587: PUSH
5588: LD_INT 2
5590: ARRAY
5591: PPUSH
5592: CALL_OW 3
5596: ST_TO_ADDR
// end ;
5597: GO 5496
5599: POP
5600: POP
// if eventVar5 = 0 then
5601: LD_EXP 41
5605: PUSH
5606: LD_INT 0
5608: EQUAL
5609: IFFALSE 5711
// begin eventVar5 = 1 ;
5611: LD_ADDR_EXP 41
5615: PUSH
5616: LD_INT 1
5618: ST_TO_ADDR
// DialogueOn ;
5619: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5623: LD_EXP 2
5627: PPUSH
5628: LD_STRING D4-Sci1-1
5630: PPUSH
5631: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5635: LD_EXP 1
5639: PPUSH
5640: LD_STRING D4-JMM-1
5642: PPUSH
5643: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5647: LD_EXP 2
5651: PPUSH
5652: LD_STRING D4-Sci1-2
5654: PPUSH
5655: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5659: LD_EXP 1
5663: PPUSH
5664: LD_STRING D4-JMM-2
5666: PPUSH
5667: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5671: LD_EXP 2
5675: PPUSH
5676: LD_STRING D4-Sci1-3
5678: PPUSH
5679: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5683: LD_EXP 1
5687: PPUSH
5688: LD_STRING D4-JMM-3
5690: PPUSH
5691: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5695: LD_EXP 1
5699: PPUSH
5700: LD_STRING D4-JMM-3a
5702: PPUSH
5703: CALL_OW 88
// DialogueOff ;
5707: CALL_OW 7
// end ; end ; end ;
5711: PPOPN 5
5713: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5714: LD_VAR 0 1
5718: PPUSH
5719: CALL_OW 255
5723: PUSH
5724: LD_INT 1
5726: EQUAL
5727: PUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 266
5737: PUSH
5738: LD_INT 0
5740: EQUAL
5741: AND
5742: PUSH
5743: LD_INT 22
5745: PUSH
5746: LD_INT 1
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PUSH
5753: LD_INT 21
5755: PUSH
5756: LD_INT 3
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 2
5765: PUSH
5766: LD_INT 30
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: PUSH
5776: LD_INT 30
5778: PUSH
5779: LD_INT 1
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: PPUSH
5796: CALL_OW 69
5800: PUSH
5801: LD_INT 1
5803: EQUAL
5804: AND
5805: IFFALSE 5819
// SetBName ( building , omega ) ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_STRING omega
5814: PPUSH
5815: CALL_OW 500
// end ; end_of_file
5819: PPOPN 2
5821: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5822: LD_INT 0
5824: PPUSH
5825: PPUSH
// if exist_mode then
5826: LD_VAR 0 2
5830: IFFALSE 5849
// unit := CreateCharacter ( ident ) else
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 34
5846: ST_TO_ADDR
5847: GO 5864
// unit := NewCharacter ( ident ) ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: LD_VAR 0 1
5858: PPUSH
5859: CALL_OW 25
5863: ST_TO_ADDR
// result := unit ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_VAR 0 4
5873: ST_TO_ADDR
// end ;
5874: LD_VAR 0 3
5878: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5879: LD_INT 0
5881: PPUSH
5882: PPUSH
5883: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5884: LD_ADDR_VAR 0 1
5888: PUSH
5889: LD_VAR 0 1
5893: PUSH
5894: LD_EXP 1
5898: PUSH
5899: LD_EXP 2
5903: PUSH
5904: LD_EXP 3
5908: PUSH
5909: LD_EXP 4
5913: PUSH
5914: LD_EXP 5
5918: PUSH
5919: LD_EXP 6
5923: PUSH
5924: LD_EXP 7
5928: PUSH
5929: LD_EXP 8
5933: PUSH
5934: LD_EXP 9
5938: PUSH
5939: LD_EXP 10
5943: PUSH
5944: LD_EXP 11
5948: PUSH
5949: LD_EXP 12
5953: PUSH
5954: LD_EXP 13
5958: PUSH
5959: LD_EXP 14
5963: PUSH
5964: LD_EXP 15
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: DIFF
5986: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
5987: LD_ADDR_VAR 0 6
5991: PUSH
5992: LD_INT 1
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 12
6004: ST_TO_ADDR
// for i = 1 to characters do
6005: LD_ADDR_VAR 0 5
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_VAR 0 1
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6131
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6023: LD_VAR 0 5
6027: PUSH
6028: LD_VAR 0 6
6032: EQUAL
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_VAR 0 5
6043: ARRAY
6044: PPUSH
6045: CALL_OW 258
6049: PUSH
6050: LD_INT 1
6052: EQUAL
6053: AND
6054: IFFALSE 6076
// Say ( characters [ i ] , dialogMID ) ;
6056: LD_VAR 0 1
6060: PUSH
6061: LD_VAR 0 5
6065: ARRAY
6066: PPUSH
6067: LD_VAR 0 2
6071: PPUSH
6072: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6076: LD_VAR 0 5
6080: PUSH
6081: LD_VAR 0 6
6085: EQUAL
6086: PUSH
6087: LD_VAR 0 1
6091: PUSH
6092: LD_VAR 0 5
6096: ARRAY
6097: PPUSH
6098: CALL_OW 258
6102: PUSH
6103: LD_INT 2
6105: EQUAL
6106: AND
6107: IFFALSE 6129
// Say ( characters [ i ] , dialogFID ) ;
6109: LD_VAR 0 1
6113: PUSH
6114: LD_VAR 0 5
6118: ARRAY
6119: PPUSH
6120: LD_VAR 0 3
6124: PPUSH
6125: CALL_OW 88
// end ;
6129: GO 6020
6131: POP
6132: POP
// end ;
6133: LD_VAR 0 4
6137: RET
// export function PrepareDifficulty ; begin
6138: LD_INT 0
6140: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6141: LD_INT 5
6143: PPUSH
6144: LD_INT 8
6146: PPUSH
6147: LD_INT 2
6149: PPUSH
6150: CALL_OW 322
// if difficulty = 1 then
6154: LD_OWVAR 67
6158: PUSH
6159: LD_INT 1
6161: EQUAL
6162: IFFALSE 6281
// begin SetTech ( 66 , 8 , state_researched ) ;
6164: LD_INT 66
6166: PPUSH
6167: LD_INT 8
6169: PPUSH
6170: LD_INT 2
6172: PPUSH
6173: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6177: LD_INT 67
6179: PPUSH
6180: LD_INT 8
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6190: LD_INT 68
6192: PPUSH
6193: LD_INT 8
6195: PPUSH
6196: LD_INT 0
6198: PPUSH
6199: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6203: LD_INT 51
6205: PPUSH
6206: LD_INT 8
6208: PPUSH
6209: LD_INT 2
6211: PPUSH
6212: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6216: LD_INT 52
6218: PPUSH
6219: LD_INT 8
6221: PPUSH
6222: LD_INT 0
6224: PPUSH
6225: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6229: LD_INT 53
6231: PPUSH
6232: LD_INT 8
6234: PPUSH
6235: LD_INT 0
6237: PPUSH
6238: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6242: LD_INT 60
6244: PPUSH
6245: LD_INT 8
6247: PPUSH
6248: LD_INT 2
6250: PPUSH
6251: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6255: LD_INT 61
6257: PPUSH
6258: LD_INT 8
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6268: LD_INT 62
6270: PPUSH
6271: LD_INT 8
6273: PPUSH
6274: LD_INT 0
6276: PPUSH
6277: CALL_OW 322
// end ; if difficulty = 2 then
6281: LD_OWVAR 67
6285: PUSH
6286: LD_INT 2
6288: EQUAL
6289: IFFALSE 6408
// begin SetTech ( 66 , 8 , state_researched ) ;
6291: LD_INT 66
6293: PPUSH
6294: LD_INT 8
6296: PPUSH
6297: LD_INT 2
6299: PPUSH
6300: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6304: LD_INT 67
6306: PPUSH
6307: LD_INT 8
6309: PPUSH
6310: LD_INT 2
6312: PPUSH
6313: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6317: LD_INT 68
6319: PPUSH
6320: LD_INT 8
6322: PPUSH
6323: LD_INT 0
6325: PPUSH
6326: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6330: LD_INT 51
6332: PPUSH
6333: LD_INT 8
6335: PPUSH
6336: LD_INT 2
6338: PPUSH
6339: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6343: LD_INT 52
6345: PPUSH
6346: LD_INT 8
6348: PPUSH
6349: LD_INT 2
6351: PPUSH
6352: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6356: LD_INT 53
6358: PPUSH
6359: LD_INT 8
6361: PPUSH
6362: LD_INT 2
6364: PPUSH
6365: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6369: LD_INT 60
6371: PPUSH
6372: LD_INT 8
6374: PPUSH
6375: LD_INT 2
6377: PPUSH
6378: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6382: LD_INT 61
6384: PPUSH
6385: LD_INT 8
6387: PPUSH
6388: LD_INT 2
6390: PPUSH
6391: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6395: LD_INT 62
6397: PPUSH
6398: LD_INT 8
6400: PPUSH
6401: LD_INT 0
6403: PPUSH
6404: CALL_OW 322
// end ; if difficulty = 3 then
6408: LD_OWVAR 67
6412: PUSH
6413: LD_INT 3
6415: EQUAL
6416: IFFALSE 6535
// begin SetTech ( 66 , 8 , state_researched ) ;
6418: LD_INT 66
6420: PPUSH
6421: LD_INT 8
6423: PPUSH
6424: LD_INT 2
6426: PPUSH
6427: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6431: LD_INT 67
6433: PPUSH
6434: LD_INT 8
6436: PPUSH
6437: LD_INT 2
6439: PPUSH
6440: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6444: LD_INT 68
6446: PPUSH
6447: LD_INT 8
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6457: LD_INT 51
6459: PPUSH
6460: LD_INT 8
6462: PPUSH
6463: LD_INT 2
6465: PPUSH
6466: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6470: LD_INT 52
6472: PPUSH
6473: LD_INT 8
6475: PPUSH
6476: LD_INT 2
6478: PPUSH
6479: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6483: LD_INT 53
6485: PPUSH
6486: LD_INT 8
6488: PPUSH
6489: LD_INT 2
6491: PPUSH
6492: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6496: LD_INT 60
6498: PPUSH
6499: LD_INT 8
6501: PPUSH
6502: LD_INT 2
6504: PPUSH
6505: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6509: LD_INT 61
6511: PPUSH
6512: LD_INT 8
6514: PPUSH
6515: LD_INT 2
6517: PPUSH
6518: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6522: LD_INT 62
6524: PPUSH
6525: LD_INT 8
6527: PPUSH
6528: LD_INT 0
6530: PPUSH
6531: CALL_OW 322
// end ; end ;
6535: LD_VAR 0 1
6539: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6540: LD_INT 0
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6548: LD_ADDR_VAR 0 7
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 25
6567: PUSH
6568: LD_INT 9
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL_OW 69
6583: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6584: LD_ADDR_VAR 0 8
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_VAR 0 2
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 3
6603: PUSH
6604: LD_INT 21
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PPUSH
6622: CALL_OW 69
6626: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6627: LD_ADDR_VAR 0 5
6631: PUSH
6632: LD_INT 1
6634: PPUSH
6635: LD_INT 3
6637: PPUSH
6638: CALL_OW 12
6642: ST_TO_ADDR
// for i = 1 to list do
6643: LD_ADDR_VAR 0 6
6647: PUSH
6648: DOUBLE
6649: LD_INT 1
6651: DEC
6652: ST_TO_ADDR
6653: LD_VAR 0 7
6657: PUSH
6658: FOR_TO
6659: IFFALSE 6841
// for ta in filter do
6661: LD_ADDR_VAR 0 4
6665: PUSH
6666: LD_VAR 0 8
6670: PUSH
6671: FOR_IN
6672: IFFALSE 6837
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6674: LD_VAR 0 7
6678: PUSH
6679: LD_VAR 0 6
6683: ARRAY
6684: PPUSH
6685: LD_VAR 0 4
6689: PPUSH
6690: CALL_OW 296
6694: PUSH
6695: LD_INT 13
6697: LESSEQUAL
6698: IFFALSE 6835
// begin case c of 1 :
6700: LD_VAR 0 5
6704: PUSH
6705: LD_INT 1
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6751
6713: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6714: LD_VAR 0 7
6718: PUSH
6719: LD_VAR 0 6
6723: ARRAY
6724: PPUSH
6725: LD_VAR 0 4
6729: PPUSH
6730: CALL_OW 250
6734: PPUSH
6735: LD_VAR 0 4
6739: PPUSH
6740: CALL_OW 251
6744: PPUSH
6745: CALL_OW 154
6749: GO 6835
6751: LD_INT 2
6753: DOUBLE
6754: EQUAL
6755: IFTRUE 6759
6757: GO 6823
6759: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6760: LD_VAR 0 7
6764: PUSH
6765: LD_VAR 0 6
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 4
6775: PPUSH
6776: CALL_OW 250
6780: PUSH
6781: LD_INT 1
6783: NEG
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: CALL_OW 12
6792: PLUS
6793: PPUSH
6794: LD_VAR 0 4
6798: PPUSH
6799: CALL_OW 251
6803: PUSH
6804: LD_INT 1
6806: NEG
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: CALL_OW 12
6815: PLUS
6816: PPUSH
6817: CALL_OW 153
6821: GO 6835
6823: LD_INT 3
6825: DOUBLE
6826: EQUAL
6827: IFTRUE 6831
6829: GO 6834
6831: POP
// ; end ;
6832: GO 6835
6834: POP
// end ; end ;
6835: GO 6671
6837: POP
6838: POP
6839: GO 6658
6841: POP
6842: POP
// end ;
6843: LD_VAR 0 3
6847: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// for i in charactersList do
6852: LD_ADDR_VAR 0 4
6856: PUSH
6857: LD_VAR 0 1
6861: PUSH
6862: FOR_IN
6863: IFFALSE 6881
// SaveCharacters ( i , ident ) ;
6865: LD_VAR 0 4
6869: PPUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL_OW 38
6879: GO 6862
6881: POP
6882: POP
// end ;
6883: LD_VAR 0 3
6887: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6888: LD_INT 0
6890: PPUSH
6891: PPUSH
6892: PPUSH
6893: PPUSH
6894: PPUSH
6895: PPUSH
6896: PPUSH
6897: PPUSH
6898: PPUSH
6899: PPUSH
6900: PPUSH
// for i = 1 to medicCount do
6901: LD_ADDR_VAR 0 13
6905: PUSH
6906: DOUBLE
6907: LD_INT 1
6909: DEC
6910: ST_TO_ADDR
6911: LD_VAR 0 7
6915: PUSH
6916: FOR_TO
6917: IFFALSE 6999
// begin uc_side = side ;
6919: LD_ADDR_OWVAR 20
6923: PUSH
6924: LD_VAR 0 1
6928: ST_TO_ADDR
// uc_nation = nation ;
6929: LD_ADDR_OWVAR 21
6933: PUSH
6934: LD_VAR 0 2
6938: ST_TO_ADDR
// hc_name =  ;
6939: LD_ADDR_OWVAR 26
6943: PUSH
6944: LD_STRING 
6946: ST_TO_ADDR
// hc_gallery =  ;
6947: LD_ADDR_OWVAR 33
6951: PUSH
6952: LD_STRING 
6954: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6955: LD_INT 0
6957: PPUSH
6958: LD_INT 4
6960: PPUSH
6961: LD_VAR 0 8
6965: PPUSH
6966: CALL_OW 380
// un = CreateHuman ;
6970: LD_ADDR_VAR 0 15
6974: PUSH
6975: CALL_OW 44
6979: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6980: LD_VAR 0 15
6984: PPUSH
6985: LD_VAR 0 9
6989: PPUSH
6990: LD_INT 0
6992: PPUSH
6993: CALL_OW 49
// end ;
6997: GO 6916
6999: POP
7000: POP
// for i = 1 to soldierCount do
7001: LD_ADDR_VAR 0 13
7005: PUSH
7006: DOUBLE
7007: LD_INT 1
7009: DEC
7010: ST_TO_ADDR
7011: LD_VAR 0 3
7015: PUSH
7016: FOR_TO
7017: IFFALSE 7099
// begin uc_side = side ;
7019: LD_ADDR_OWVAR 20
7023: PUSH
7024: LD_VAR 0 1
7028: ST_TO_ADDR
// uc_nation = nation ;
7029: LD_ADDR_OWVAR 21
7033: PUSH
7034: LD_VAR 0 2
7038: ST_TO_ADDR
// hc_name =  ;
7039: LD_ADDR_OWVAR 26
7043: PUSH
7044: LD_STRING 
7046: ST_TO_ADDR
// hc_gallery =  ;
7047: LD_ADDR_OWVAR 33
7051: PUSH
7052: LD_STRING 
7054: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7055: LD_INT 0
7057: PPUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_VAR 0 8
7065: PPUSH
7066: CALL_OW 380
// un = CreateHuman ;
7070: LD_ADDR_VAR 0 15
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7080: LD_VAR 0 15
7084: PPUSH
7085: LD_VAR 0 9
7089: PPUSH
7090: LD_INT 0
7092: PPUSH
7093: CALL_OW 49
// end ;
7097: GO 7016
7099: POP
7100: POP
// for i = 1 to sniperCount do
7101: LD_ADDR_VAR 0 13
7105: PUSH
7106: DOUBLE
7107: LD_INT 1
7109: DEC
7110: ST_TO_ADDR
7111: LD_VAR 0 4
7115: PUSH
7116: FOR_TO
7117: IFFALSE 7199
// begin uc_side = side ;
7119: LD_ADDR_OWVAR 20
7123: PUSH
7124: LD_VAR 0 1
7128: ST_TO_ADDR
// uc_nation = nation ;
7129: LD_ADDR_OWVAR 21
7133: PUSH
7134: LD_VAR 0 2
7138: ST_TO_ADDR
// hc_name =  ;
7139: LD_ADDR_OWVAR 26
7143: PUSH
7144: LD_STRING 
7146: ST_TO_ADDR
// hc_gallery =  ;
7147: LD_ADDR_OWVAR 33
7151: PUSH
7152: LD_STRING 
7154: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7155: LD_INT 0
7157: PPUSH
7158: LD_INT 5
7160: PPUSH
7161: LD_VAR 0 8
7165: PPUSH
7166: CALL_OW 380
// un = CreateHuman ;
7170: LD_ADDR_VAR 0 15
7174: PUSH
7175: CALL_OW 44
7179: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7180: LD_VAR 0 15
7184: PPUSH
7185: LD_VAR 0 9
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 49
// end ;
7197: GO 7116
7199: POP
7200: POP
// for i = 1 to bazookCount do
7201: LD_ADDR_VAR 0 13
7205: PUSH
7206: DOUBLE
7207: LD_INT 1
7209: DEC
7210: ST_TO_ADDR
7211: LD_VAR 0 5
7215: PUSH
7216: FOR_TO
7217: IFFALSE 7299
// begin uc_side = side ;
7219: LD_ADDR_OWVAR 20
7223: PUSH
7224: LD_VAR 0 1
7228: ST_TO_ADDR
// uc_nation = nation ;
7229: LD_ADDR_OWVAR 21
7233: PUSH
7234: LD_VAR 0 2
7238: ST_TO_ADDR
// hc_name =  ;
7239: LD_ADDR_OWVAR 26
7243: PUSH
7244: LD_STRING 
7246: ST_TO_ADDR
// hc_gallery =  ;
7247: LD_ADDR_OWVAR 33
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7255: LD_INT 0
7257: PPUSH
7258: LD_INT 9
7260: PPUSH
7261: LD_VAR 0 8
7265: PPUSH
7266: CALL_OW 380
// un = CreateHuman ;
7270: LD_ADDR_VAR 0 15
7274: PUSH
7275: CALL_OW 44
7279: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7280: LD_VAR 0 15
7284: PPUSH
7285: LD_VAR 0 9
7289: PPUSH
7290: LD_INT 0
7292: PPUSH
7293: CALL_OW 49
// end ;
7297: GO 7216
7299: POP
7300: POP
// for i = 1 to mortalCount do
7301: LD_ADDR_VAR 0 13
7305: PUSH
7306: DOUBLE
7307: LD_INT 1
7309: DEC
7310: ST_TO_ADDR
7311: LD_VAR 0 6
7315: PUSH
7316: FOR_TO
7317: IFFALSE 7399
// begin uc_side = side ;
7319: LD_ADDR_OWVAR 20
7323: PUSH
7324: LD_VAR 0 1
7328: ST_TO_ADDR
// uc_nation = nation ;
7329: LD_ADDR_OWVAR 21
7333: PUSH
7334: LD_VAR 0 2
7338: ST_TO_ADDR
// hc_name =  ;
7339: LD_ADDR_OWVAR 26
7343: PUSH
7344: LD_STRING 
7346: ST_TO_ADDR
// hc_gallery =  ;
7347: LD_ADDR_OWVAR 33
7351: PUSH
7352: LD_STRING 
7354: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7355: LD_INT 0
7357: PPUSH
7358: LD_INT 8
7360: PPUSH
7361: LD_VAR 0 8
7365: PPUSH
7366: CALL_OW 380
// un = CreateHuman ;
7370: LD_ADDR_VAR 0 15
7374: PUSH
7375: CALL_OW 44
7379: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7380: LD_VAR 0 15
7384: PPUSH
7385: LD_VAR 0 9
7389: PPUSH
7390: LD_INT 0
7392: PPUSH
7393: CALL_OW 49
// end ;
7397: GO 7316
7399: POP
7400: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7401: LD_ADDR_VAR 0 17
7405: PUSH
7406: LD_INT 22
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 25
7420: PUSH
7421: LD_INT 4
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: ST_TO_ADDR
// for i in medic_list do
7437: LD_ADDR_VAR 0 13
7441: PUSH
7442: LD_VAR 0 17
7446: PUSH
7447: FOR_IN
7448: IFFALSE 7466
// ComMoveToArea ( i , healArea ) ;
7450: LD_VAR 0 13
7454: PPUSH
7455: LD_VAR 0 10
7459: PPUSH
7460: CALL_OW 113
7464: GO 7447
7466: POP
7467: POP
// repeat wait ( 0 0$1 ) ;
7468: LD_INT 35
7470: PPUSH
7471: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7475: LD_ADDR_VAR 0 16
7479: PUSH
7480: LD_INT 22
7482: PUSH
7483: LD_VAR 0 1
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 1
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: LD_INT 24
7500: PUSH
7501: LD_INT 550
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 24
7514: PUSH
7515: LD_INT 250
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7536: LD_ADDR_VAR 0 18
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_VAR 0 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 25
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 25
7568: PUSH
7569: LD_INT 5
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 8
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 25
7588: PUSH
7589: LD_INT 9
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: LD_INT 24
7605: PUSH
7606: LD_INT 1000
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: PPUSH
7618: CALL_OW 69
7622: ST_TO_ADDR
// if medicCount > 0 then
7623: LD_VAR 0 7
7627: PUSH
7628: LD_INT 0
7630: GREATER
7631: IFFALSE 7705
// begin if damageUnit_list > 0 then
7633: LD_VAR 0 16
7637: PUSH
7638: LD_INT 0
7640: GREATER
7641: IFFALSE 7705
// begin for i in damageUnit_list do
7643: LD_ADDR_VAR 0 13
7647: PUSH
7648: LD_VAR 0 16
7652: PUSH
7653: FOR_IN
7654: IFFALSE 7703
// begin ComMoveToArea ( i , healArea ) ;
7656: LD_VAR 0 13
7660: PPUSH
7661: LD_VAR 0 10
7665: PPUSH
7666: CALL_OW 113
// for j in medic_list do
7670: LD_ADDR_VAR 0 14
7674: PUSH
7675: LD_VAR 0 17
7679: PUSH
7680: FOR_IN
7681: IFFALSE 7699
// AddComHeal ( j , i ) ;
7683: LD_VAR 0 14
7687: PPUSH
7688: LD_VAR 0 13
7692: PPUSH
7693: CALL_OW 188
7697: GO 7680
7699: POP
7700: POP
// end ;
7701: GO 7653
7703: POP
7704: POP
// end ; end ; for i in soldiersOK_list do
7705: LD_ADDR_VAR 0 13
7709: PUSH
7710: LD_VAR 0 18
7714: PUSH
7715: FOR_IN
7716: IFFALSE 7892
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7718: LD_ADDR_VAR 0 21
7722: PUSH
7723: LD_INT 22
7725: PUSH
7726: LD_VAR 0 11
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL_OW 69
7739: PPUSH
7740: LD_VAR 0 13
7744: PPUSH
7745: CALL_OW 74
7749: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7750: LD_ADDR_VAR 0 22
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_VAR 0 11
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 59
7772: PUSH
7773: EMPTY
7774: LIST
7775: PUSH
7776: LD_INT 21
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 21
7788: PUSH
7789: LD_INT 2
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: PPUSH
7809: CALL_OW 69
7813: PPUSH
7814: LD_VAR 0 13
7818: PPUSH
7819: CALL_OW 74
7823: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7824: LD_VAR 0 13
7828: PPUSH
7829: LD_VAR 0 21
7833: PPUSH
7834: CALL_OW 296
7838: PUSH
7839: LD_INT 8
7841: PLUS
7842: PUSH
7843: LD_VAR 0 13
7847: PPUSH
7848: LD_VAR 0 22
7852: PPUSH
7853: CALL_OW 296
7857: LESS
7858: IFFALSE 7876
// begin ComAttackUnit ( i , target1 ) ;
7860: LD_VAR 0 13
7864: PPUSH
7865: LD_VAR 0 21
7869: PPUSH
7870: CALL_OW 115
// end else
7874: GO 7890
// begin ComAttackUnit ( i , target2 ) ;
7876: LD_VAR 0 13
7880: PPUSH
7881: LD_VAR 0 22
7885: PPUSH
7886: CALL_OW 115
// end ; end ;
7890: GO 7715
7892: POP
7893: POP
// until soldiersOK_list = [ ] ;
7894: LD_VAR 0 18
7898: PUSH
7899: EMPTY
7900: EQUAL
7901: IFFALSE 7468
// end ;
7903: LD_VAR 0 12
7907: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
7914: PPUSH
7915: PPUSH
7916: PPUSH
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
// amChassisTab = [ ] ;
7921: LD_ADDR_VAR 0 19
7925: PUSH
7926: EMPTY
7927: ST_TO_ADDR
// arChassisTab = [ ] ;
7928: LD_ADDR_VAR 0 18
7932: PUSH
7933: EMPTY
7934: ST_TO_ADDR
// ruChassisTab = [ ] ;
7935: LD_ADDR_VAR 0 17
7939: PUSH
7940: EMPTY
7941: ST_TO_ADDR
// for i = 1 to vehCount do
7942: LD_ADDR_VAR 0 13
7946: PUSH
7947: DOUBLE
7948: LD_INT 1
7950: DEC
7951: ST_TO_ADDR
7952: LD_VAR 0 3
7956: PUSH
7957: FOR_TO
7958: IFFALSE 9382
// begin wait ( 0 0$01 ) ;
7960: LD_INT 35
7962: PPUSH
7963: CALL_OW 67
// if nation = 1 then
7967: LD_VAR 0 5
7971: PUSH
7972: LD_INT 1
7974: EQUAL
7975: IFFALSE 8456
// begin uc_side = side ;
7977: LD_ADDR_OWVAR 20
7981: PUSH
7982: LD_VAR 0 2
7986: ST_TO_ADDR
// uc_nation = nation ;
7987: LD_ADDR_OWVAR 21
7991: PUSH
7992: LD_VAR 0 5
7996: ST_TO_ADDR
// vc_engine = vehengine ;
7997: LD_ADDR_OWVAR 39
8001: PUSH
8002: LD_VAR 0 6
8006: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8007: LD_ADDR_OWVAR 40
8011: PUSH
8012: LD_VAR 0 10
8016: PUSH
8017: LD_INT 1
8019: PPUSH
8020: LD_VAR 0 10
8024: PPUSH
8025: CALL_OW 12
8029: ARRAY
8030: ST_TO_ADDR
// for j = 1 to AMWeapon do
8031: LD_ADDR_VAR 0 14
8035: PUSH
8036: DOUBLE
8037: LD_INT 1
8039: DEC
8040: ST_TO_ADDR
8041: LD_VAR 0 10
8045: PUSH
8046: FOR_TO
8047: IFFALSE 8348
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8049: LD_VAR 0 10
8053: PUSH
8054: LD_VAR 0 14
8058: ARRAY
8059: PUSH
8060: LD_INT 2
8062: EQUAL
8063: PUSH
8064: LD_VAR 0 10
8068: PUSH
8069: LD_VAR 0 14
8073: ARRAY
8074: PUSH
8075: LD_INT 3
8077: EQUAL
8078: OR
8079: IFFALSE 8132
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8081: LD_ADDR_VAR 0 19
8085: PUSH
8086: LD_INT 1
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: LD_INT 3
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 5
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8108: LD_ADDR_OWVAR 37
8112: PUSH
8113: LD_VAR 0 19
8117: PUSH
8118: LD_INT 1
8120: PPUSH
8121: LD_VAR 0 19
8125: PPUSH
8126: CALL_OW 12
8130: ARRAY
8131: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8132: LD_VAR 0 10
8136: PUSH
8137: LD_VAR 0 14
8141: ARRAY
8142: PUSH
8143: LD_INT 4
8145: EQUAL
8146: PUSH
8147: LD_VAR 0 10
8151: PUSH
8152: LD_VAR 0 14
8156: ARRAY
8157: PUSH
8158: LD_INT 5
8160: EQUAL
8161: OR
8162: PUSH
8163: LD_VAR 0 10
8167: PUSH
8168: LD_VAR 0 14
8172: ARRAY
8173: PUSH
8174: LD_INT 9
8176: EQUAL
8177: OR
8178: PUSH
8179: LD_VAR 0 10
8183: PUSH
8184: LD_VAR 0 14
8188: ARRAY
8189: PUSH
8190: LD_INT 11
8192: EQUAL
8193: OR
8194: PUSH
8195: LD_VAR 0 10
8199: PUSH
8200: LD_VAR 0 14
8204: ARRAY
8205: PUSH
8206: LD_INT 7
8208: EQUAL
8209: OR
8210: IFFALSE 8259
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8212: LD_ADDR_VAR 0 19
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 5
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8235: LD_ADDR_OWVAR 37
8239: PUSH
8240: LD_VAR 0 19
8244: PUSH
8245: LD_INT 1
8247: PPUSH
8248: LD_VAR 0 19
8252: PPUSH
8253: CALL_OW 12
8257: ARRAY
8258: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8259: LD_VAR 0 10
8263: PUSH
8264: LD_VAR 0 14
8268: ARRAY
8269: PUSH
8270: LD_INT 8
8272: EQUAL
8273: PUSH
8274: LD_VAR 0 10
8278: PUSH
8279: LD_VAR 0 14
8283: ARRAY
8284: PUSH
8285: LD_INT 6
8287: EQUAL
8288: OR
8289: PUSH
8290: LD_VAR 0 10
8294: PUSH
8295: LD_VAR 0 14
8299: ARRAY
8300: PUSH
8301: LD_INT 10
8303: EQUAL
8304: OR
8305: IFFALSE 8346
// begin amChassisTab = [ 4 , 5 ] ;
8307: LD_ADDR_VAR 0 19
8311: PUSH
8312: LD_INT 4
8314: PUSH
8315: LD_INT 5
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8322: LD_ADDR_OWVAR 37
8326: PUSH
8327: LD_VAR 0 19
8331: PUSH
8332: LD_INT 1
8334: PPUSH
8335: LD_VAR 0 19
8339: PPUSH
8340: CALL_OW 12
8344: ARRAY
8345: ST_TO_ADDR
// end ; end ;
8346: GO 8046
8348: POP
8349: POP
// veh = CreateVehicle ;
8350: LD_ADDR_VAR 0 16
8354: PUSH
8355: CALL_OW 45
8359: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8360: LD_VAR 0 16
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_INT 0
8372: PPUSH
8373: CALL_OW 49
// if vc_control = 1 then
8377: LD_OWVAR 38
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: IFFALSE 8442
// begin hc_gallery =  ;
8387: LD_ADDR_OWVAR 33
8391: PUSH
8392: LD_STRING 
8394: ST_TO_ADDR
// hc_name =  ;
8395: LD_ADDR_OWVAR 26
8399: PUSH
8400: LD_STRING 
8402: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8403: LD_INT 0
8405: PPUSH
8406: LD_INT 3
8408: PPUSH
8409: LD_VAR 0 4
8413: PPUSH
8414: CALL_OW 380
// un = CreateHuman ;
8418: LD_ADDR_VAR 0 15
8422: PUSH
8423: CALL_OW 44
8427: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8428: LD_VAR 0 15
8432: PPUSH
8433: LD_VAR 0 16
8437: PPUSH
8438: CALL_OW 52
// end ; i = i + 1 ;
8442: LD_ADDR_VAR 0 13
8446: PUSH
8447: LD_VAR 0 13
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ST_TO_ADDR
// end ; if nation = 2 then
8456: LD_VAR 0 5
8460: PUSH
8461: LD_INT 2
8463: EQUAL
8464: IFFALSE 8966
// begin uc_side = side ;
8466: LD_ADDR_OWVAR 20
8470: PUSH
8471: LD_VAR 0 2
8475: ST_TO_ADDR
// uc_nation = nation ;
8476: LD_ADDR_OWVAR 21
8480: PUSH
8481: LD_VAR 0 5
8485: ST_TO_ADDR
// vc_engine = vehengine ;
8486: LD_ADDR_OWVAR 39
8490: PUSH
8491: LD_VAR 0 6
8495: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8496: LD_INT 22
8498: PUSH
8499: LD_VAR 0 2
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 21
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 33
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 50
8530: PUSH
8531: EMPTY
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: PPUSH
8540: CALL_OW 69
8544: PUSH
8545: LD_INT 8
8547: LESSEQUAL
8548: IFFALSE 8576
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8550: LD_ADDR_OWVAR 38
8554: PUSH
8555: LD_VAR 0 7
8559: PUSH
8560: LD_INT 1
8562: PPUSH
8563: LD_VAR 0 7
8567: PPUSH
8568: CALL_OW 12
8572: ARRAY
8573: ST_TO_ADDR
8574: GO 8584
// vc_control = control_apeman ;
8576: LD_ADDR_OWVAR 38
8580: PUSH
8581: LD_INT 5
8583: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8584: LD_ADDR_OWVAR 40
8588: PUSH
8589: LD_VAR 0 9
8593: PUSH
8594: LD_INT 1
8596: PPUSH
8597: LD_VAR 0 9
8601: PPUSH
8602: CALL_OW 12
8606: ARRAY
8607: ST_TO_ADDR
// for j = 1 to ARWeapons do
8608: LD_ADDR_VAR 0 14
8612: PUSH
8613: DOUBLE
8614: LD_INT 1
8616: DEC
8617: ST_TO_ADDR
8618: LD_VAR 0 9
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8858
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8626: LD_VAR 0 9
8630: PUSH
8631: LD_VAR 0 14
8635: ARRAY
8636: PUSH
8637: LD_INT 24
8639: EQUAL
8640: PUSH
8641: LD_VAR 0 9
8645: PUSH
8646: LD_VAR 0 14
8650: ARRAY
8651: PUSH
8652: LD_INT 22
8654: EQUAL
8655: OR
8656: PUSH
8657: LD_VAR 0 9
8661: PUSH
8662: LD_VAR 0 14
8666: ARRAY
8667: PUSH
8668: LD_INT 23
8670: EQUAL
8671: OR
8672: PUSH
8673: LD_VAR 0 9
8677: PUSH
8678: LD_VAR 0 14
8682: ARRAY
8683: PUSH
8684: LD_INT 30
8686: EQUAL
8687: OR
8688: IFFALSE 8737
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8690: LD_ADDR_VAR 0 18
8694: PUSH
8695: LD_INT 11
8697: PUSH
8698: LD_INT 12
8700: PUSH
8701: LD_INT 13
8703: PUSH
8704: LD_INT 14
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8713: LD_ADDR_OWVAR 37
8717: PUSH
8718: LD_VAR 0 18
8722: PUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_VAR 0 18
8730: PPUSH
8731: CALL_OW 12
8735: ARRAY
8736: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8737: LD_VAR 0 9
8741: PUSH
8742: LD_VAR 0 14
8746: ARRAY
8747: PUSH
8748: LD_INT 29
8750: EQUAL
8751: PUSH
8752: LD_VAR 0 9
8756: PUSH
8757: LD_VAR 0 14
8761: ARRAY
8762: PUSH
8763: LD_INT 28
8765: EQUAL
8766: OR
8767: PUSH
8768: LD_VAR 0 9
8772: PUSH
8773: LD_VAR 0 14
8777: ARRAY
8778: PUSH
8779: LD_INT 27
8781: EQUAL
8782: OR
8783: PUSH
8784: LD_VAR 0 9
8788: PUSH
8789: LD_VAR 0 14
8793: ARRAY
8794: PUSH
8795: LD_INT 26
8797: EQUAL
8798: OR
8799: PUSH
8800: LD_VAR 0 9
8804: PUSH
8805: LD_VAR 0 14
8809: ARRAY
8810: PUSH
8811: LD_INT 25
8813: EQUAL
8814: OR
8815: IFFALSE 8856
// begin arChassisTab = [ 13 , 14 ] ;
8817: LD_ADDR_VAR 0 18
8821: PUSH
8822: LD_INT 13
8824: PUSH
8825: LD_INT 14
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8832: LD_ADDR_OWVAR 37
8836: PUSH
8837: LD_VAR 0 18
8841: PUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_VAR 0 18
8849: PPUSH
8850: CALL_OW 12
8854: ARRAY
8855: ST_TO_ADDR
// end ; end ;
8856: GO 8623
8858: POP
8859: POP
// veh = CreateVehicle ;
8860: LD_ADDR_VAR 0 16
8864: PUSH
8865: CALL_OW 45
8869: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8870: LD_VAR 0 16
8874: PPUSH
8875: LD_VAR 0 1
8879: PPUSH
8880: LD_INT 0
8882: PPUSH
8883: CALL_OW 49
// if vc_control = 1 then
8887: LD_OWVAR 38
8891: PUSH
8892: LD_INT 1
8894: EQUAL
8895: IFFALSE 8952
// begin hc_gallery =  ;
8897: LD_ADDR_OWVAR 33
8901: PUSH
8902: LD_STRING 
8904: ST_TO_ADDR
// hc_name =  ;
8905: LD_ADDR_OWVAR 26
8909: PUSH
8910: LD_STRING 
8912: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8913: LD_INT 0
8915: PPUSH
8916: LD_INT 3
8918: PPUSH
8919: LD_VAR 0 4
8923: PPUSH
8924: CALL_OW 380
// un = CreateHuman ;
8928: LD_ADDR_VAR 0 15
8932: PUSH
8933: CALL_OW 44
8937: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8938: LD_VAR 0 15
8942: PPUSH
8943: LD_VAR 0 16
8947: PPUSH
8948: CALL_OW 52
// end ; i = i + 1 ;
8952: LD_ADDR_VAR 0 13
8956: PUSH
8957: LD_VAR 0 13
8961: PUSH
8962: LD_INT 1
8964: PLUS
8965: ST_TO_ADDR
// end ; if nation = 3 then
8966: LD_VAR 0 5
8970: PUSH
8971: LD_INT 3
8973: EQUAL
8974: IFFALSE 9380
// begin uc_side = side ;
8976: LD_ADDR_OWVAR 20
8980: PUSH
8981: LD_VAR 0 2
8985: ST_TO_ADDR
// uc_nation = nation ;
8986: LD_ADDR_OWVAR 21
8990: PUSH
8991: LD_VAR 0 5
8995: ST_TO_ADDR
// vc_engine = vehengine ;
8996: LD_ADDR_OWVAR 39
9000: PUSH
9001: LD_VAR 0 6
9005: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9006: LD_ADDR_OWVAR 38
9010: PUSH
9011: LD_VAR 0 7
9015: PUSH
9016: LD_INT 1
9018: PPUSH
9019: LD_VAR 0 7
9023: PPUSH
9024: CALL_OW 12
9028: ARRAY
9029: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9030: LD_ADDR_OWVAR 40
9034: PUSH
9035: LD_VAR 0 8
9039: PUSH
9040: LD_INT 1
9042: PPUSH
9043: LD_VAR 0 8
9047: PPUSH
9048: CALL_OW 12
9052: ARRAY
9053: ST_TO_ADDR
// for j = 1 to RuWeapons do
9054: LD_ADDR_VAR 0 14
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_VAR 0 8
9068: PUSH
9069: FOR_TO
9070: IFFALSE 9256
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9072: LD_VAR 0 8
9076: PUSH
9077: LD_VAR 0 14
9081: ARRAY
9082: PUSH
9083: LD_INT 42
9085: EQUAL
9086: PUSH
9087: LD_VAR 0 8
9091: PUSH
9092: LD_VAR 0 14
9096: ARRAY
9097: PUSH
9098: LD_INT 43
9100: EQUAL
9101: OR
9102: PUSH
9103: LD_VAR 0 8
9107: PUSH
9108: LD_VAR 0 14
9112: ARRAY
9113: PUSH
9114: LD_INT 44
9116: EQUAL
9117: OR
9118: PUSH
9119: LD_VAR 0 8
9123: PUSH
9124: LD_VAR 0 14
9128: ARRAY
9129: PUSH
9130: LD_INT 45
9132: EQUAL
9133: OR
9134: PUSH
9135: LD_VAR 0 8
9139: PUSH
9140: LD_VAR 0 14
9144: ARRAY
9145: PUSH
9146: LD_INT 49
9148: EQUAL
9149: OR
9150: IFFALSE 9187
// begin ruChassisTab = [ 24 ] ;
9152: LD_ADDR_VAR 0 17
9156: PUSH
9157: LD_INT 24
9159: PUSH
9160: EMPTY
9161: LIST
9162: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9163: LD_ADDR_OWVAR 37
9167: PUSH
9168: LD_VAR 0 17
9172: PUSH
9173: LD_INT 1
9175: PPUSH
9176: LD_VAR 0 17
9180: PPUSH
9181: CALL_OW 12
9185: ARRAY
9186: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9187: LD_VAR 0 8
9191: PUSH
9192: LD_VAR 0 14
9196: ARRAY
9197: PUSH
9198: LD_INT 46
9200: EQUAL
9201: PUSH
9202: LD_VAR 0 8
9206: PUSH
9207: LD_VAR 0 14
9211: ARRAY
9212: PUSH
9213: LD_INT 47
9215: EQUAL
9216: OR
9217: IFFALSE 9254
// begin ruChassisTab = [ 24 ] ;
9219: LD_ADDR_VAR 0 17
9223: PUSH
9224: LD_INT 24
9226: PUSH
9227: EMPTY
9228: LIST
9229: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9230: LD_ADDR_OWVAR 37
9234: PUSH
9235: LD_VAR 0 17
9239: PUSH
9240: LD_INT 1
9242: PPUSH
9243: LD_VAR 0 17
9247: PPUSH
9248: CALL_OW 12
9252: ARRAY
9253: ST_TO_ADDR
// end ; end ;
9254: GO 9069
9256: POP
9257: POP
// veh = CreateVehicle ;
9258: LD_ADDR_VAR 0 16
9262: PUSH
9263: CALL_OW 45
9267: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9268: LD_VAR 0 16
9272: PPUSH
9273: LD_VAR 0 1
9277: PPUSH
9278: LD_INT 0
9280: PPUSH
9281: CALL_OW 49
// if vc_control = 1 then
9285: LD_OWVAR 38
9289: PUSH
9290: LD_INT 1
9292: EQUAL
9293: IFFALSE 9380
// begin if uc_side = 8 then
9295: LD_OWVAR 20
9299: PUSH
9300: LD_INT 8
9302: EQUAL
9303: IFFALSE 9315
// uc_nation = 2 else
9305: LD_ADDR_OWVAR 21
9309: PUSH
9310: LD_INT 2
9312: ST_TO_ADDR
9313: GO 9325
// uc_nation = nation ;
9315: LD_ADDR_OWVAR 21
9319: PUSH
9320: LD_VAR 0 5
9324: ST_TO_ADDR
// hc_gallery =  ;
9325: LD_ADDR_OWVAR 33
9329: PUSH
9330: LD_STRING 
9332: ST_TO_ADDR
// hc_name =  ;
9333: LD_ADDR_OWVAR 26
9337: PUSH
9338: LD_STRING 
9340: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9341: LD_INT 0
9343: PPUSH
9344: LD_INT 3
9346: PPUSH
9347: LD_VAR 0 4
9351: PPUSH
9352: CALL_OW 380
// un = CreateHuman ;
9356: LD_ADDR_VAR 0 15
9360: PUSH
9361: CALL_OW 44
9365: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9366: LD_VAR 0 15
9370: PPUSH
9371: LD_VAR 0 16
9375: PPUSH
9376: CALL_OW 52
// end ; end ; end ;
9380: GO 7957
9382: POP
9383: POP
// repeat wait ( 0 0$1 ) ;
9384: LD_INT 35
9386: PPUSH
9387: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9391: LD_ADDR_VAR 0 20
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_VAR 0 2
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 21
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 24
9420: PUSH
9421: LD_INT 250
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 34
9433: PUSH
9434: LD_INT 25
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 34
9443: PUSH
9444: LD_INT 26
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 34
9453: PUSH
9454: LD_INT 27
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 34
9463: PUSH
9464: LD_INT 28
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 34
9473: PUSH
9474: LD_INT 29
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 34
9483: PUSH
9484: LD_INT 46
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 34
9493: PUSH
9494: LD_INT 44
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 34
9503: PUSH
9504: LD_INT 45
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 34
9513: PUSH
9514: LD_INT 47
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PPUSH
9539: CALL_OW 69
9543: ST_TO_ADDR
// if vehicleOK_list > 0 then
9544: LD_VAR 0 20
9548: PUSH
9549: LD_INT 0
9551: GREATER
9552: IFFALSE 9771
// begin for i in vehicleOK_list do
9554: LD_ADDR_VAR 0 13
9558: PUSH
9559: LD_VAR 0 20
9563: PUSH
9564: FOR_IN
9565: IFFALSE 9769
// begin if GetSide ( i ) <> side then
9567: LD_VAR 0 13
9571: PPUSH
9572: CALL_OW 255
9576: PUSH
9577: LD_VAR 0 2
9581: NONEQUAL
9582: IFFALSE 9595
// begin ComStop ( i ) ;
9584: LD_VAR 0 13
9588: PPUSH
9589: CALL_OW 141
// continue ;
9593: GO 9564
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9595: LD_ADDR_VAR 0 21
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_VAR 0 11
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 69
9616: PPUSH
9617: LD_VAR 0 13
9621: PPUSH
9622: CALL_OW 74
9626: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9627: LD_ADDR_VAR 0 22
9631: PUSH
9632: LD_INT 22
9634: PUSH
9635: LD_VAR 0 11
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 2
9646: PUSH
9647: LD_INT 59
9649: PUSH
9650: EMPTY
9651: LIST
9652: PUSH
9653: LD_INT 21
9655: PUSH
9656: LD_INT 1
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 21
9665: PUSH
9666: LD_INT 2
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: PPUSH
9686: CALL_OW 69
9690: PPUSH
9691: LD_VAR 0 13
9695: PPUSH
9696: CALL_OW 74
9700: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9701: LD_VAR 0 13
9705: PPUSH
9706: LD_VAR 0 21
9710: PPUSH
9711: CALL_OW 296
9715: PUSH
9716: LD_INT 8
9718: PLUS
9719: PUSH
9720: LD_VAR 0 13
9724: PPUSH
9725: LD_VAR 0 22
9729: PPUSH
9730: CALL_OW 296
9734: LESS
9735: IFFALSE 9753
// begin ComAttackUnit ( i , target1 ) ;
9737: LD_VAR 0 13
9741: PPUSH
9742: LD_VAR 0 21
9746: PPUSH
9747: CALL_OW 115
// end else
9751: GO 9767
// begin ComAttackUnit ( i , target2 ) ;
9753: LD_VAR 0 13
9757: PPUSH
9758: LD_VAR 0 22
9762: PPUSH
9763: CALL_OW 115
// end ; end ;
9767: GO 9564
9769: POP
9770: POP
// end ; until vehicleOK_list = 0 ;
9771: LD_VAR 0 20
9775: PUSH
9776: LD_INT 0
9778: EQUAL
9779: IFFALSE 9384
// end ;
9781: LD_VAR 0 12
9785: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9786: LD_INT 0
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
9792: PPUSH
9793: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9794: LD_ADDR_VAR 0 6
9798: PUSH
9799: LD_INT 22
9801: PUSH
9802: LD_VAR 0 1
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 34
9813: PUSH
9814: LD_INT 29
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 69
9829: ST_TO_ADDR
// if veh_list = 0 then
9830: LD_VAR 0 6
9834: PUSH
9835: LD_INT 0
9837: EQUAL
9838: IFFALSE 9842
// exit ;
9840: GO 10047
// if veh_list > 0 then
9842: LD_VAR 0 6
9846: PUSH
9847: LD_INT 0
9849: GREATER
9850: IFFALSE 10047
// begin for i in veh_List do
9852: LD_ADDR_VAR 0 4
9856: PUSH
9857: LD_VAR 0 6
9861: PUSH
9862: FOR_IN
9863: IFFALSE 10045
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9865: LD_ADDR_VAR 0 7
9869: PUSH
9870: LD_INT 22
9872: PUSH
9873: LD_VAR 0 2
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: LD_INT 24
9884: PUSH
9885: LD_INT 250
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 2
9894: PUSH
9895: LD_INT 59
9897: PUSH
9898: EMPTY
9899: LIST
9900: PUSH
9901: LD_INT 21
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 21
9913: PUSH
9914: LD_INT 2
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: PPUSH
9935: CALL_OW 69
9939: PPUSH
9940: LD_VAR 0 4
9944: PPUSH
9945: CALL_OW 74
9949: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9950: LD_VAR 0 4
9954: PPUSH
9955: LD_VAR 0 7
9959: PPUSH
9960: CALL_OW 115
// if not HasTask ( i ) then
9964: LD_VAR 0 4
9968: PPUSH
9969: CALL_OW 314
9973: NOT
9974: IFFALSE 10043
// begin wait ( 0 0$0.1 ) ;
9976: LD_INT 4
9978: PPUSH
9979: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9983: LD_ADDR_VAR 0 8
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_VAR 0 2
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 24
10002: PUSH
10003: LD_INT 250
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PPUSH
10014: CALL_OW 69
10018: PPUSH
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL_OW 74
10028: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10029: LD_VAR 0 4
10033: PPUSH
10034: LD_VAR 0 8
10038: PPUSH
10039: CALL_OW 115
// end ; end ;
10043: GO 9862
10045: POP
10046: POP
// end ; end ; end_of_file
10047: LD_VAR 0 3
10051: RET
// every 0 0$1 do
10052: GO 10054
10054: DISABLE
// begin enable ;
10055: ENABLE
// IntBazooka ( 7 , 1 ) ;
10056: LD_INT 7
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL 6540 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10066: LD_INT 8
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL 9786 0 2
// end ;
10076: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10077: LD_INT 22
10079: PUSH
10080: LD_INT 3
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 21
10089: PUSH
10090: LD_INT 2
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 50
10099: PUSH
10100: EMPTY
10101: LIST
10102: PUSH
10103: LD_INT 2
10105: PUSH
10106: LD_INT 34
10108: PUSH
10109: LD_INT 46
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 34
10118: PUSH
10119: LD_INT 44
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 34
10128: PUSH
10129: LD_INT 45
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 34
10138: PUSH
10139: LD_INT 47
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PPUSH
10159: CALL_OW 69
10163: PUSH
10164: LD_INT 0
10166: GREATER
10167: PUSH
10168: LD_INT 22
10170: PUSH
10171: LD_INT 3
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 21
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 50
10190: PUSH
10191: EMPTY
10192: LIST
10193: PUSH
10194: LD_INT 34
10196: PUSH
10197: LD_INT 49
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: PPUSH
10210: CALL_OW 69
10214: PUSH
10215: LD_INT 0
10217: GREATER
10218: AND
10219: IFFALSE 10391
10221: GO 10223
10223: DISABLE
10224: LD_INT 0
10226: PPUSH
10227: PPUSH
// begin enable ;
10228: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10229: LD_ADDR_VAR 0 1
10233: PUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 3
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 21
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 50
10256: PUSH
10257: EMPTY
10258: LIST
10259: PUSH
10260: LD_INT 2
10262: PUSH
10263: LD_INT 34
10265: PUSH
10266: LD_INT 46
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 34
10275: PUSH
10276: LD_INT 44
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 34
10285: PUSH
10286: LD_INT 45
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 34
10295: PUSH
10296: LD_INT 47
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10321: LD_ADDR_VAR 0 2
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 3
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 21
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 50
10348: PUSH
10349: EMPTY
10350: LIST
10351: PUSH
10352: LD_INT 34
10354: PUSH
10355: LD_INT 49
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10373: LD_VAR 0 2
10377: PPUSH
10378: LD_VAR 0 1
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: PPUSH
10387: CALL_OW 112
// end ; end_of_file
10391: PPOPN 2
10393: END
// every 0 0$1 trigger eventVar4 = 1 do
10394: LD_EXP 40
10398: PUSH
10399: LD_INT 1
10401: EQUAL
10402: IFFALSE 11196
10404: GO 10406
10406: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10407: LD_EXP 1
10411: PPUSH
10412: LD_STRING D9b-JMM-1
10414: PPUSH
10415: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10419: LD_EXP 15
10423: PPUSH
10424: LD_STRING D9b-Pow-1
10426: PPUSH
10427: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10431: LD_EXP 1
10435: PPUSH
10436: LD_STRING D9b-JMM-2
10438: PPUSH
10439: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10443: LD_EXP 15
10447: PPUSH
10448: LD_STRING D9b-Pow-2
10450: PPUSH
10451: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10455: LD_EXP 1
10459: PPUSH
10460: LD_STRING D9b-JMM-3
10462: PPUSH
10463: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10467: LD_EXP 15
10471: PPUSH
10472: LD_STRING D9b-Pow-3
10474: PPUSH
10475: CALL_OW 94
// if burlakStatus = 1 then
10479: LD_EXP 28
10483: PUSH
10484: LD_INT 1
10486: EQUAL
10487: IFFALSE 10501
// begin AddMedal ( Burlak , 1 ) ;
10489: LD_STRING Burlak
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 101
// end else
10499: GO 10512
// begin AddMedal ( Burlak , - 1 ) ;
10501: LD_STRING Burlak
10503: PPUSH
10504: LD_INT 1
10506: NEG
10507: PPUSH
10508: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10512: LD_EXP 2
10516: PPUSH
10517: CALL_OW 302
10521: IFFALSE 10535
// begin AddMedal ( Stevens , 1 ) ;
10523: LD_STRING Stevens
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: CALL_OW 101
// end else
10533: GO 10546
// begin AddMedal ( Stevens , - 1 ) ;
10535: LD_STRING Stevens
10537: PPUSH
10538: LD_INT 1
10540: NEG
10541: PPUSH
10542: CALL_OW 101
// end ; if radarOnSpot = 1 then
10546: LD_EXP 30
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: IFFALSE 10568
// begin AddMedal ( Observation , 1 ) ;
10556: LD_STRING Observation
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 101
// end else
10566: GO 10579
// begin AddMedal ( Observation , - 1 ) ;
10568: LD_STRING Observation
10570: PPUSH
10571: LD_INT 1
10573: NEG
10574: PPUSH
10575: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10579: LD_STRING MAIN
10581: PPUSH
10582: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10586: LD_EXP 28
10590: PPUSH
10591: LD_STRING 13_BurlakStatus_1
10593: PPUSH
10594: CALL_OW 39
// if IsOk ( Stevens ) then
10598: LD_EXP 2
10602: PPUSH
10603: CALL_OW 302
10607: IFFALSE 10621
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10609: LD_INT 1
10611: PPUSH
10612: LD_STRING 13_StevensStatus_1
10614: PPUSH
10615: CALL_OW 39
10619: GO 10631
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10621: LD_INT 0
10623: PPUSH
10624: LD_STRING 13_StevensStatus_1
10626: PPUSH
10627: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10631: LD_INT 22
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 2
10653: PUSH
10654: LD_INT 25
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 25
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 25
10676: PUSH
10677: LD_INT 3
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 25
10686: PUSH
10687: LD_INT 4
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 25
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 8
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: PPUSH
10728: CALL_OW 69
10732: PPUSH
10733: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10737: LD_EXP 1
10741: PPUSH
10742: LD_EXP 36
10746: PUSH
10747: LD_STRING JMM
10749: STR
10750: PPUSH
10751: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10755: LD_EXP 8
10759: PPUSH
10760: LD_EXP 36
10764: PUSH
10765: LD_STRING Brown
10767: STR
10768: PPUSH
10769: CALL 6848 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10773: LD_EXP 4
10777: PPUSH
10778: LD_EXP 36
10782: PUSH
10783: LD_STRING Donaldson
10785: STR
10786: PPUSH
10787: CALL 6848 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10791: LD_EXP 5
10795: PPUSH
10796: LD_EXP 36
10800: PUSH
10801: LD_STRING Bobby
10803: STR
10804: PPUSH
10805: CALL 6848 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10809: LD_EXP 6
10813: PPUSH
10814: LD_EXP 36
10818: PUSH
10819: LD_STRING Cyrus
10821: STR
10822: PPUSH
10823: CALL 6848 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10827: LD_EXP 3
10831: PPUSH
10832: LD_EXP 36
10836: PUSH
10837: LD_STRING Lisa
10839: STR
10840: PPUSH
10841: CALL 6848 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10845: LD_EXP 13
10849: PPUSH
10850: LD_EXP 36
10854: PUSH
10855: LD_STRING Frank
10857: STR
10858: PPUSH
10859: CALL 6848 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10863: LD_EXP 14
10867: PPUSH
10868: LD_EXP 36
10872: PUSH
10873: LD_STRING Kikuchi
10875: STR
10876: PPUSH
10877: CALL 6848 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10881: LD_EXP 10
10885: PPUSH
10886: LD_EXP 36
10890: PUSH
10891: LD_STRING Houten
10893: STR
10894: PPUSH
10895: CALL 6848 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10899: LD_EXP 12
10903: PPUSH
10904: LD_EXP 36
10908: PUSH
10909: LD_STRING Gary
10911: STR
10912: PPUSH
10913: CALL 6848 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10917: LD_EXP 11
10921: PPUSH
10922: LD_EXP 36
10926: PUSH
10927: LD_STRING Cornell
10929: STR
10930: PPUSH
10931: CALL 6848 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10935: LD_EXP 7
10939: PPUSH
10940: LD_EXP 36
10944: PUSH
10945: LD_STRING Denis
10947: STR
10948: PPUSH
10949: CALL 6848 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10953: LD_EXP 9
10957: PPUSH
10958: LD_EXP 36
10962: PUSH
10963: LD_STRING Gladstone
10965: STR
10966: PPUSH
10967: CALL 6848 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10971: LD_EXP 2
10975: PPUSH
10976: LD_EXP 36
10980: PUSH
10981: LD_STRING Stevens
10983: STR
10984: PPUSH
10985: CALL 6848 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
10989: LD_INT 50
10991: PUSH
10992: EMPTY
10993: LIST
10994: PUSH
10995: LD_INT 22
10997: PUSH
10998: LD_INT 1
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 21
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 2
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 2
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 3
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 4
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 25
11060: PUSH
11061: LD_INT 5
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 25
11070: PUSH
11071: LD_INT 8
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 69
11097: PUSH
11098: LD_EXP 1
11102: PUSH
11103: LD_EXP 8
11107: PUSH
11108: LD_EXP 4
11112: PUSH
11113: LD_EXP 5
11117: PUSH
11118: LD_EXP 6
11122: PUSH
11123: LD_EXP 3
11127: PUSH
11128: LD_EXP 13
11132: PUSH
11133: LD_EXP 9
11137: PUSH
11138: LD_EXP 14
11142: PUSH
11143: LD_EXP 7
11147: PUSH
11148: LD_EXP 10
11152: PUSH
11153: LD_EXP 12
11157: PUSH
11158: LD_EXP 11
11162: PUSH
11163: LD_EXP 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: DIFF
11184: PPUSH
11185: LD_STRING 13_other_survivors
11187: PPUSH
11188: CALL_OW 38
// YouWin ;
11192: CALL_OW 103
// end ; end_of_file
11196: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11197: LD_EXP 32
11201: PUSH
11202: LD_INT 2
11204: EQUAL
11205: IFFALSE 11341
11207: GO 11209
11209: DISABLE
11210: LD_INT 0
11212: PPUSH
11213: PPUSH
11214: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11215: LD_ADDR_VAR 0 2
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_INT 1
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: LD_INT 30
11245: PUSH
11246: LD_INT 0
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 30
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: PPUSH
11273: CALL_OW 69
11277: ST_TO_ADDR
// for i in tmp do
11278: LD_ADDR_VAR 0 1
11282: PUSH
11283: LD_VAR 0 2
11287: PUSH
11288: FOR_IN
11289: IFFALSE 11322
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11291: LD_ADDR_VAR 0 3
11295: PUSH
11296: LD_VAR 0 3
11300: PUSH
11301: LD_VAR 0 1
11305: PPUSH
11306: CALL_OW 274
11310: PPUSH
11311: LD_INT 3
11313: PPUSH
11314: CALL_OW 275
11318: PLUS
11319: ST_TO_ADDR
11320: GO 11288
11322: POP
11323: POP
// if yourSiberite < 79 then
11324: LD_VAR 0 3
11328: PUSH
11329: LD_INT 79
11331: LESS
11332: IFFALSE 11341
// YouLost ( siberite ) ;
11334: LD_STRING siberite
11336: PPUSH
11337: CALL_OW 104
// end ;
11341: PPOPN 3
11343: END
// every 0 0$1 trigger IsDead ( JMM ) do
11344: LD_EXP 1
11348: PPUSH
11349: CALL_OW 301
11353: IFFALSE 11365
11355: GO 11357
11357: DISABLE
// YouLost ( JMM ) ; end_of_file
11358: LD_STRING JMM
11360: PPUSH
11361: CALL_OW 104
11365: END
// every 8 8$0 + 7 7$0 do
11366: GO 11368
11368: DISABLE
// begin enable ;
11369: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11370: LD_INT 8
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: LD_INT 3
11381: PPUSH
11382: CALL_OW 12
11386: PPUSH
11387: LD_INT 0
11389: PPUSH
11390: LD_INT 0
11392: PPUSH
11393: LD_INT 2
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: LD_OWVAR 67
11411: ARRAY
11412: PPUSH
11413: LD_INT 0
11415: PPUSH
11416: LD_INT 10
11418: PPUSH
11419: LD_INT 8
11421: PUSH
11422: LD_INT 9
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 1
11431: PPUSH
11432: LD_INT 2
11434: PPUSH
11435: CALL_OW 12
11439: ARRAY
11440: PPUSH
11441: LD_INT 12
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL 6888 0 11
// end ;
11451: END
// every 8 8$0 + 7 7$0 do
11452: GO 11454
11454: DISABLE
// begin enable ;
11455: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11456: LD_ADDR_EXP 33
11460: PUSH
11461: LD_EXP 33
11465: PUSH
11466: LD_INT 1
11468: PLUS
11469: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11470: LD_INT 8
11472: PUSH
11473: LD_INT 9
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_INT 2
11485: PPUSH
11486: CALL_OW 12
11490: ARRAY
11491: PPUSH
11492: LD_INT 8
11494: PPUSH
11495: LD_INT 4
11497: PPUSH
11498: LD_INT 9
11500: PPUSH
11501: CALL_OW 12
11505: PUSH
11506: LD_INT 6
11508: PPUSH
11509: LD_INT 9
11511: PPUSH
11512: CALL_OW 12
11516: PUSH
11517: LD_INT 6
11519: PPUSH
11520: LD_INT 10
11522: PPUSH
11523: CALL_OW 12
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_OWVAR 67
11537: ARRAY
11538: PPUSH
11539: LD_INT 10
11541: PPUSH
11542: LD_INT 2
11544: PPUSH
11545: LD_INT 3
11547: PPUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 2
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PPUSH
11558: EMPTY
11559: PPUSH
11560: LD_INT 25
11562: PUSH
11563: LD_INT 26
11565: PUSH
11566: LD_INT 27
11568: PUSH
11569: LD_INT 28
11571: PUSH
11572: LD_INT 29
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PPUSH
11582: EMPTY
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL 7908 0 11
// end ;
11591: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do
11592: LD_EXP 33
11596: PUSH
11597: LD_INT 4
11599: GREATEREQUAL
11600: IFFALSE 11705
11602: GO 11604
11604: DISABLE
// begin enable ;
11605: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11606: LD_ADDR_EXP 33
11610: PUSH
11611: LD_EXP 33
11615: PUSH
11616: LD_INT 1
11618: PLUS
11619: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
11620: LD_INT 8
11622: PUSH
11623: LD_INT 9
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 1
11632: PPUSH
11633: LD_INT 2
11635: PPUSH
11636: CALL_OW 12
11640: ARRAY
11641: PPUSH
11642: LD_INT 8
11644: PPUSH
11645: LD_INT 1
11647: PUSH
11648: LD_INT 2
11650: PUSH
11651: LD_INT 3
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: LD_OWVAR 67
11663: ARRAY
11664: PPUSH
11665: LD_INT 10
11667: PPUSH
11668: LD_INT 3
11670: PPUSH
11671: LD_INT 3
11673: PPUSH
11674: LD_INT 1
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: LD_INT 47
11686: PUSH
11687: LD_INT 47
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: EMPTY
11695: PPUSH
11696: EMPTY
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL 7908 0 11
// end ;
11705: END
// every 1 1$0 trigger eventVar2 = 1 do
11706: LD_EXP 38
11710: PUSH
11711: LD_INT 1
11713: EQUAL
11714: IFFALSE 11816
11716: GO 11718
11718: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
11719: LD_INT 8
11721: PUSH
11722: LD_INT 9
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 1
11731: PPUSH
11732: LD_INT 2
11734: PPUSH
11735: CALL_OW 12
11739: ARRAY
11740: PPUSH
11741: LD_INT 3
11743: PPUSH
11744: LD_INT 6
11746: PUSH
11747: LD_INT 7
11749: PUSH
11750: LD_INT 8
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: PUSH
11758: LD_OWVAR 67
11762: ARRAY
11763: PPUSH
11764: LD_INT 10
11766: PPUSH
11767: LD_INT 3
11769: PPUSH
11770: LD_INT 3
11772: PPUSH
11773: LD_INT 3
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PPUSH
11783: LD_INT 46
11785: PUSH
11786: LD_INT 44
11788: PUSH
11789: LD_INT 45
11791: PUSH
11792: LD_INT 47
11794: PUSH
11795: LD_INT 49
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PPUSH
11805: EMPTY
11806: PPUSH
11807: EMPTY
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL 7908 0 11
// end ; end_of_file
11816: END
// every 1 1$0 do
11817: GO 11819
11819: DISABLE
// begin enable ;
11820: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11821: LD_INT 3
11823: PPUSH
11824: LD_INT 5
11826: PPUSH
11827: CALL_OW 12
11831: PPUSH
11832: LD_INT 13
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 55
// end ;
11842: END
