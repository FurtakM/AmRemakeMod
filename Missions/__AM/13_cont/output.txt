// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 25
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 26
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 28
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 27
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 30
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 29
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// eventVar1 = 0 ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// eventVar2 = 0 ;
  85: LD_ADDR_EXP 35
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// eventVar3 = 0 ;
  93: LD_ADDR_EXP 36
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar4 = 0 ;
 101: LD_ADDR_EXP 37
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar5 = 0 ;
 109: LD_ADDR_EXP 38
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// mission_prefix = 13f_ ;
 117: LD_ADDR_EXP 33
 121: PUSH
 122: LD_STRING 13f_
 124: ST_TO_ADDR
// debugMode = 0 ;
 125: LD_ADDR_EXP 39
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// SpawnVehicle ;
 133: CALL 1501 0 0
// PrepareHeroes ;
 137: CALL 463 0 0
// PrepareAmericansRandom ;
 141: CALL 1405 0 0
// end ;
 145: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 146: LD_EXP 39
 150: PUSH
 151: LD_INT 1
 153: EQUAL
 154: IFFALSE 460
 156: GO 158
 158: DISABLE
 159: LD_INT 0
 161: PPUSH
// begin enable ;
 162: ENABLE
// fogoff ( true ) ;
 163: LD_INT 1
 165: PPUSH
 166: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 170: LD_ADDR_VAR 0 1
 174: PUSH
 175: LD_INT 22
 177: PUSH
 178: LD_INT 1
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: PUSH
 185: LD_INT 21
 187: PUSH
 188: LD_INT 1
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: PPUSH
 199: CALL_OW 69
 203: PUSH
 204: FOR_IN
 205: IFFALSE 221
// SetLives ( i , 1000 ) ;
 207: LD_VAR 0 1
 211: PPUSH
 212: LD_INT 1000
 214: PPUSH
 215: CALL_OW 234
 219: GO 204
 221: POP
 222: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 223: LD_ADDR_VAR 0 1
 227: PUSH
 228: LD_INT 22
 230: PUSH
 231: LD_INT 1
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 2
 240: PUSH
 241: LD_INT 30
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: LD_INT 30
 253: PUSH
 254: LD_INT 1
 256: PUSH
 257: EMPTY
 258: LIST
 259: LIST
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: LIST
 268: LIST
 269: PPUSH
 270: CALL_OW 69
 274: PUSH
 275: FOR_IN
 276: IFFALSE 300
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 278: LD_VAR 0 1
 282: PPUSH
 283: CALL_OW 274
 287: PPUSH
 288: LD_INT 1
 290: PPUSH
 291: LD_INT 9999
 293: PPUSH
 294: CALL_OW 277
 298: GO 275
 300: POP
 301: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 302: LD_ADDR_VAR 0 1
 306: PUSH
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 30
 322: PUSH
 323: LD_INT 0
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 30
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: FOR_IN
 355: IFFALSE 379
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 357: LD_VAR 0 1
 361: PPUSH
 362: CALL_OW 274
 366: PPUSH
 367: LD_INT 2
 369: PPUSH
 370: LD_INT 9999
 372: PPUSH
 373: CALL_OW 277
 377: GO 354
 379: POP
 380: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 381: LD_ADDR_VAR 0 1
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 1
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 30
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: LD_INT 30
 411: PUSH
 412: LD_INT 1
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: PUSH
 419: EMPTY
 420: LIST
 421: LIST
 422: LIST
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PPUSH
 428: CALL_OW 69
 432: PUSH
 433: FOR_IN
 434: IFFALSE 458
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 436: LD_VAR 0 1
 440: PPUSH
 441: CALL_OW 274
 445: PPUSH
 446: LD_INT 3
 448: PPUSH
 449: LD_INT 9999
 451: PPUSH
 452: CALL_OW 277
 456: GO 433
 458: POP
 459: POP
// end ; end_of_file
 460: PPOPN 1
 462: END
// export function PrepareHeroes ; begin
 463: LD_INT 0
 465: PPUSH
// uc_side = 1 ;
 466: LD_ADDR_OWVAR 20
 470: PUSH
 471: LD_INT 1
 473: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 474: LD_ADDR_EXP 1
 478: PUSH
 479: LD_STRING 13c_JMM
 481: PPUSH
 482: LD_INT 1
 484: PPUSH
 485: CALL 5857 0 2
 489: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 490: LD_ADDR_EXP 2
 494: PUSH
 495: LD_STRING 13c_Stevens
 497: PPUSH
 498: LD_INT 1
 500: PPUSH
 501: CALL 5857 0 2
 505: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 506: LD_ADDR_EXP 3
 510: PUSH
 511: LD_STRING 13c_Lisa
 513: PPUSH
 514: LD_INT 1
 516: PPUSH
 517: CALL 5857 0 2
 521: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_STRING 13c_Donaldson
 529: PPUSH
 530: LD_INT 1
 532: PPUSH
 533: CALL 5857 0 2
 537: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 538: LD_ADDR_EXP 5
 542: PUSH
 543: LD_STRING 13c_Bobby
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL 5857 0 2
 553: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 554: LD_ADDR_EXP 6
 558: PUSH
 559: LD_STRING 13c_Cyrus
 561: PPUSH
 562: LD_INT 1
 564: PPUSH
 565: CALL 5857 0 2
 569: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 570: LD_ADDR_EXP 7
 574: PUSH
 575: LD_STRING 13c_Denis
 577: PPUSH
 578: LD_INT 1
 580: PPUSH
 581: CALL 5857 0 2
 585: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_STRING 13c_Brown
 593: PPUSH
 594: LD_INT 1
 596: PPUSH
 597: CALL 5857 0 2
 601: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 602: LD_ADDR_EXP 9
 606: PUSH
 607: LD_STRING 13c_Gladstone
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: CALL 5857 0 2
 617: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 618: LD_ADDR_EXP 10
 622: PUSH
 623: LD_STRING 13c_Houten
 625: PPUSH
 626: LD_INT 1
 628: PPUSH
 629: CALL 5857 0 2
 633: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: LD_STRING 13c_Cornel
 641: PPUSH
 642: LD_INT 1
 644: PPUSH
 645: CALL 5857 0 2
 649: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 650: LD_ADDR_EXP 12
 654: PUSH
 655: LD_STRING 13c_Gary
 657: PPUSH
 658: LD_INT 1
 660: PPUSH
 661: CALL 5857 0 2
 665: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 666: LD_ADDR_EXP 13
 670: PUSH
 671: LD_STRING 13c_Frank
 673: PPUSH
 674: LD_INT 1
 676: PPUSH
 677: CALL 5857 0 2
 681: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 682: LD_ADDR_EXP 14
 686: PUSH
 687: LD_STRING 13c_Kikuchi
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 5857 0 2
 697: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 698: LD_ADDR_EXP 15
 702: PUSH
 703: LD_STRING Powell
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL 5857 0 2
 713: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 22
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 21
 731: PUSH
 732: LD_INT 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 58
 741: PUSH
 742: EMPTY
 743: LIST
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: PPUSH
 750: CALL_OW 69
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: CALL_OW 52
// PlaceHumanInUnit ( Stevens , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 763: LD_EXP 2
 767: PPUSH
 768: LD_INT 22
 770: PUSH
 771: LD_INT 1
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 21
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 58
 790: PUSH
 791: EMPTY
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PPUSH
 799: CALL_OW 69
 803: PUSH
 804: LD_INT 1
 806: ARRAY
 807: PPUSH
 808: CALL_OW 52
// PlaceHumanInUnit ( Lisa , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 812: LD_EXP 3
 816: PPUSH
 817: LD_INT 22
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 21
 829: PUSH
 830: LD_INT 2
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 58
 839: PUSH
 840: EMPTY
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: PPUSH
 848: CALL_OW 69
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: PPUSH
 857: CALL_OW 52
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 861: LD_EXP 4
 865: PPUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 21
 878: PUSH
 879: LD_INT 2
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 58
 888: PUSH
 889: EMPTY
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: PPUSH
 897: CALL_OW 69
 901: PUSH
 902: LD_INT 1
 904: ARRAY
 905: PPUSH
 906: CALL_OW 52
// PlaceHumanInUnit ( Bobby , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 910: LD_EXP 5
 914: PPUSH
 915: LD_INT 22
 917: PUSH
 918: LD_INT 1
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 2
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 58
 937: PUSH
 938: EMPTY
 939: LIST
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 69
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: PPUSH
 955: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 959: LD_EXP 6
 963: PPUSH
 964: LD_INT 22
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 21
 976: PUSH
 977: LD_INT 2
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: PUSH
 984: LD_INT 58
 986: PUSH
 987: EMPTY
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PPUSH
 995: CALL_OW 69
 999: PUSH
1000: LD_INT 1
1002: ARRAY
1003: PPUSH
1004: CALL_OW 52
// PlaceHumanInUnit ( Denis , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1008: LD_EXP 7
1012: PPUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 1
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 21
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 58
1035: PUSH
1036: EMPTY
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PPUSH
1044: CALL_OW 69
1048: PUSH
1049: LD_INT 1
1051: ARRAY
1052: PPUSH
1053: CALL_OW 52
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1057: LD_EXP 8
1061: PPUSH
1062: LD_INT 22
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PUSH
1072: LD_INT 21
1074: PUSH
1075: LD_INT 2
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PUSH
1082: LD_INT 58
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PPUSH
1093: CALL_OW 69
1097: PUSH
1098: LD_INT 1
1100: ARRAY
1101: PPUSH
1102: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1106: LD_EXP 9
1110: PPUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 21
1123: PUSH
1124: LD_INT 2
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 58
1133: PUSH
1134: EMPTY
1135: LIST
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: PPUSH
1151: CALL_OW 52
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1155: LD_EXP 10
1159: PPUSH
1160: LD_INT 22
1162: PUSH
1163: LD_INT 1
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: LD_INT 21
1172: PUSH
1173: LD_INT 2
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 58
1182: PUSH
1183: EMPTY
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 69
1195: PUSH
1196: LD_INT 1
1198: ARRAY
1199: PPUSH
1200: CALL_OW 52
// PlaceHumanInUnit ( Cornel , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1204: LD_EXP 11
1208: PPUSH
1209: LD_INT 22
1211: PUSH
1212: LD_INT 1
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 21
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 58
1231: PUSH
1232: EMPTY
1233: LIST
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: CALL_OW 52
// PlaceHumanInUnit ( Gary , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1253: LD_EXP 12
1257: PPUSH
1258: LD_INT 22
1260: PUSH
1261: LD_INT 1
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 21
1270: PUSH
1271: LD_INT 2
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 58
1280: PUSH
1281: EMPTY
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: PUSH
1294: LD_INT 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 52
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1302: LD_EXP 13
1306: PPUSH
1307: LD_INT 22
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 21
1319: PUSH
1320: LD_INT 2
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 58
1329: PUSH
1330: EMPTY
1331: LIST
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: LIST
1337: PPUSH
1338: CALL_OW 69
1342: PUSH
1343: LD_INT 1
1345: ARRAY
1346: PPUSH
1347: CALL_OW 52
// PlaceHumanInUnit ( Kikuchi , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1351: LD_EXP 14
1355: PPUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 1
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 21
1368: PUSH
1369: LD_INT 2
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 58
1378: PUSH
1379: EMPTY
1380: LIST
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: PPUSH
1387: CALL_OW 69
1391: PUSH
1392: LD_INT 1
1394: ARRAY
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: LD_VAR 0 1
1404: RET
// export function PrepareAmericansRandom ; var i ; begin
1405: LD_INT 0
1407: PPUSH
1408: PPUSH
// uc_side = 1 ;
1409: LD_ADDR_OWVAR 20
1413: PUSH
1414: LD_INT 1
1416: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1417: LD_ADDR_EXP 16
1421: PUSH
1422: LD_STRING 13c_others
1424: PPUSH
1425: CALL_OW 31
1429: ST_TO_ADDR
// for i in others13 do
1430: LD_ADDR_VAR 0 2
1434: PUSH
1435: LD_EXP 16
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1494
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1443: LD_VAR 0 2
1447: PPUSH
1448: LD_INT 22
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 21
1460: PUSH
1461: LD_INT 2
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 58
1470: PUSH
1471: EMPTY
1472: LIST
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: PPUSH
1479: CALL_OW 69
1483: PUSH
1484: LD_INT 1
1486: ARRAY
1487: PPUSH
1488: CALL_OW 52
1492: GO 1440
1494: POP
1495: POP
// end ;
1496: LD_VAR 0 1
1500: RET
// export function SpawnVehicle ; var i , veh ; begin
1501: LD_INT 0
1503: PPUSH
1504: PPUSH
1505: PPUSH
// uc_side = 1 ;
1506: LD_ADDR_OWVAR 20
1510: PUSH
1511: LD_INT 1
1513: ST_TO_ADDR
// uc_nation = 1 ;
1514: LD_ADDR_OWVAR 21
1518: PUSH
1519: LD_INT 1
1521: ST_TO_ADDR
// for i = 1 to [ 3 , 2 , 1 ] [ Difficulty ] do
1522: LD_ADDR_VAR 0 2
1526: PUSH
1527: DOUBLE
1528: LD_INT 1
1530: DEC
1531: ST_TO_ADDR
1532: LD_INT 3
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_OWVAR 67
1550: ARRAY
1551: PUSH
1552: FOR_TO
1553: IFFALSE 1641
// begin vc_engine = 3 ;
1555: LD_ADDR_OWVAR 39
1559: PUSH
1560: LD_INT 3
1562: ST_TO_ADDR
// vc_control = 1 ;
1563: LD_ADDR_OWVAR 38
1567: PUSH
1568: LD_INT 1
1570: ST_TO_ADDR
// vc_weapon = 12 ;
1571: LD_ADDR_OWVAR 40
1575: PUSH
1576: LD_INT 12
1578: ST_TO_ADDR
// vc_chassis = 3 ;
1579: LD_ADDR_OWVAR 37
1583: PUSH
1584: LD_INT 3
1586: ST_TO_ADDR
// veh = CreateVehicle ;
1587: LD_ADDR_VAR 0 3
1591: PUSH
1592: CALL_OW 45
1596: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1597: LD_VAR 0 3
1601: PPUSH
1602: LD_INT 2
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// SetDir ( veh , 2 ) ;
1612: LD_VAR 0 3
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 233
// AddCargo ( veh , 1 , 100 ) ;
1624: LD_VAR 0 3
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: LD_INT 100
1634: PPUSH
1635: CALL_OW 291
// end ;
1639: GO 1552
1641: POP
1642: POP
// for i = 1 to 8 - [ 3 , 2 , 1 ] [ Difficulty ] do
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: DOUBLE
1649: LD_INT 1
1651: DEC
1652: ST_TO_ADDR
1653: LD_INT 8
1655: PUSH
1656: LD_INT 3
1658: PUSH
1659: LD_INT 2
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_OWVAR 67
1674: ARRAY
1675: MINUS
1676: PUSH
1677: FOR_TO
1678: IFFALSE 1802
// begin vc_engine = 3 ;
1680: LD_ADDR_OWVAR 39
1684: PUSH
1685: LD_INT 3
1687: ST_TO_ADDR
// vc_control = 1 ;
1688: LD_ADDR_OWVAR 38
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1696: LD_ADDR_OWVAR 40
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_INT 5
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: LD_INT 7
1712: PUSH
1713: LD_INT 6
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PUSH
1723: LD_INT 1
1725: PPUSH
1726: LD_INT 5
1728: PPUSH
1729: CALL_OW 12
1733: ARRAY
1734: ST_TO_ADDR
// if vc_weapon = 6 then
1735: LD_OWVAR 40
1739: PUSH
1740: LD_INT 6
1742: EQUAL
1743: IFFALSE 1755
// vc_chassis = 4 else
1745: LD_ADDR_OWVAR 37
1749: PUSH
1750: LD_INT 4
1752: ST_TO_ADDR
1753: GO 1763
// vc_chassis = 3 ;
1755: LD_ADDR_OWVAR 37
1759: PUSH
1760: LD_INT 3
1762: ST_TO_ADDR
// veh = CreateVehicle ;
1763: LD_ADDR_VAR 0 3
1767: PUSH
1768: CALL_OW 45
1772: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1773: LD_VAR 0 3
1777: PPUSH
1778: LD_INT 2
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 49
// SetDir ( veh , 1 ) ;
1788: LD_VAR 0 3
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: CALL_OW 233
// end ;
1800: GO 1677
1802: POP
1803: POP
// end ;
1804: LD_VAR 0 1
1808: RET
// export function PowellSupport ; var i , veh , un ; begin
1809: LD_INT 0
1811: PPUSH
1812: PPUSH
1813: PPUSH
1814: PPUSH
// for i = 1 to 3 do
1815: LD_ADDR_VAR 0 2
1819: PUSH
1820: DOUBLE
1821: LD_INT 1
1823: DEC
1824: ST_TO_ADDR
1825: LD_INT 3
1827: PUSH
1828: FOR_TO
1829: IFFALSE 2030
// begin uc_nation = 1 ;
1831: LD_ADDR_OWVAR 21
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// uc_side = 1 ;
1839: LD_ADDR_OWVAR 20
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// vc_engine = 3 ;
1847: LD_ADDR_OWVAR 39
1851: PUSH
1852: LD_INT 3
1854: ST_TO_ADDR
// vc_control = 1 ;
1855: LD_ADDR_OWVAR 38
1859: PUSH
1860: LD_INT 1
1862: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1863: LD_ADDR_OWVAR 40
1867: PUSH
1868: LD_INT 9
1870: PUSH
1871: LD_INT 5
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 7
1879: PUSH
1880: LD_INT 6
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 5
1895: PPUSH
1896: CALL_OW 12
1900: ARRAY
1901: ST_TO_ADDR
// if vc_weapon = 6 then
1902: LD_OWVAR 40
1906: PUSH
1907: LD_INT 6
1909: EQUAL
1910: IFFALSE 1922
// vc_chassis = 4 else
1912: LD_ADDR_OWVAR 37
1916: PUSH
1917: LD_INT 4
1919: ST_TO_ADDR
1920: GO 1930
// vc_chassis = 3 ;
1922: LD_ADDR_OWVAR 37
1926: PUSH
1927: LD_INT 3
1929: ST_TO_ADDR
// veh = CreateVehicle ;
1930: LD_ADDR_VAR 0 3
1934: PUSH
1935: CALL_OW 45
1939: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 2
1947: PPUSH
1948: LD_INT 0
1950: PPUSH
1951: CALL_OW 49
// SetDir ( veh , 1 ) ;
1955: LD_VAR 0 3
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL_OW 233
// hc_gallery =  ;
1967: LD_ADDR_OWVAR 33
1971: PUSH
1972: LD_STRING 
1974: ST_TO_ADDR
// hc_name =  ;
1975: LD_ADDR_OWVAR 26
1979: PUSH
1980: LD_STRING 
1982: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1983: LD_INT 0
1985: PPUSH
1986: LD_INT 3
1988: PPUSH
1989: LD_INT 7
1991: PPUSH
1992: LD_INT 10
1994: PPUSH
1995: CALL_OW 12
1999: PPUSH
2000: CALL_OW 380
// un = CreateHuman ;
2004: LD_ADDR_VAR 0 4
2008: PUSH
2009: CALL_OW 44
2013: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2014: LD_VAR 0 4
2018: PPUSH
2019: LD_VAR 0 3
2023: PPUSH
2024: CALL_OW 52
// end ;
2028: GO 1828
2030: POP
2031: POP
// end ; end_of_file
2032: LD_VAR 0 1
2036: RET
// export function PrepareBurlak ; begin
2037: LD_INT 0
2039: PPUSH
// uc_side = 7 ;
2040: LD_ADDR_OWVAR 20
2044: PUSH
2045: LD_INT 7
2047: ST_TO_ADDR
// uc_nation = 3 ;
2048: LD_ADDR_OWVAR 21
2052: PUSH
2053: LD_INT 3
2055: ST_TO_ADDR
// vc_engine = 3 ;
2056: LD_ADDR_OWVAR 39
2060: PUSH
2061: LD_INT 3
2063: ST_TO_ADDR
// vc_control = 1 ;
2064: LD_ADDR_OWVAR 38
2068: PUSH
2069: LD_INT 1
2071: ST_TO_ADDR
// vc_weapon = 46 ;
2072: LD_ADDR_OWVAR 40
2076: PUSH
2077: LD_INT 46
2079: ST_TO_ADDR
// vc_chassis = 24 ;
2080: LD_ADDR_OWVAR 37
2084: PUSH
2085: LD_INT 24
2087: ST_TO_ADDR
// Masha = CreateVehicle ;
2088: LD_ADDR_EXP 18
2092: PUSH
2093: CALL_OW 45
2097: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
2098: LD_EXP 18
2102: PPUSH
2103: LD_INT 3
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 49
// SetMark ( Masha , 1 ) ;
2113: LD_EXP 18
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
2125: LD_ADDR_EXP 17
2129: PUSH
2130: LD_STRING Burlak
2132: PPUSH
2133: LD_INT 0
2135: PPUSH
2136: CALL 5857 0 2
2140: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
2141: LD_EXP 17
2145: PPUSH
2146: LD_EXP 18
2150: PPUSH
2151: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
2155: LD_EXP 18
2159: PPUSH
2160: LD_INT 107
2162: PPUSH
2163: LD_INT 118
2165: PPUSH
2166: CALL_OW 114
// spawnBurlak = 1 ;
2170: LD_ADDR_EXP 25
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// end ;
2178: LD_VAR 0 1
2182: RET
// export function BurlakArmy ; var i , veh ; begin
2183: LD_INT 0
2185: PPUSH
2186: PPUSH
2187: PPUSH
// uc_side = 7 ;
2188: LD_ADDR_OWVAR 20
2192: PUSH
2193: LD_INT 7
2195: ST_TO_ADDR
// uc_nation = 3 ;
2196: LD_ADDR_OWVAR 21
2200: PUSH
2201: LD_INT 3
2203: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
2204: LD_ADDR_EXP 19
2208: PUSH
2209: LD_STRING Gnyevko
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL 5857 0 2
2219: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
2220: LD_ADDR_EXP 20
2224: PUSH
2225: LD_STRING Titov
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: CALL 5857 0 2
2235: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2236: LD_ADDR_EXP 21
2240: PUSH
2241: LD_STRING Xavier2
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: CALL 5857 0 2
2251: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2252: LD_ADDR_EXP 22
2256: PUSH
2257: LD_STRING Belkov
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL 5857 0 2
2267: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2268: LD_ADDR_EXP 23
2272: PUSH
2273: LD_STRING Lipshchin
2275: PPUSH
2276: LD_INT 0
2278: PPUSH
2279: CALL 5857 0 2
2283: ST_TO_ADDR
// for i = 1 to 5 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 5
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2386
// begin vc_engine = 3 ;
2300: LD_ADDR_OWVAR 39
2304: PUSH
2305: LD_INT 3
2307: ST_TO_ADDR
// vc_control = 1 ;
2308: LD_ADDR_OWVAR 38
2312: PUSH
2313: LD_INT 1
2315: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2316: LD_ADDR_OWVAR 40
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 45
2329: PUSH
2330: LD_INT 49
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 1
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: CALL_OW 12
2349: ARRAY
2350: ST_TO_ADDR
// vc_chassis = 22 ;
2351: LD_ADDR_OWVAR 37
2355: PUSH
2356: LD_INT 22
2358: ST_TO_ADDR
// veh = CreateVehicle ;
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: CALL_OW 45
2368: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2369: LD_VAR 0 3
2373: PPUSH
2374: LD_INT 3
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end ;
2384: GO 2297
2386: POP
2387: POP
// PlaceHumanInUnit ( Gnyevko , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2388: LD_EXP 19
2392: PPUSH
2393: LD_INT 22
2395: PUSH
2396: LD_INT 7
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: LD_INT 21
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 58
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: PPUSH
2424: CALL_OW 69
2428: PUSH
2429: LD_INT 1
2431: ARRAY
2432: PPUSH
2433: CALL_OW 52
// PlaceHumanInUnit ( Titov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2437: LD_EXP 20
2441: PPUSH
2442: LD_INT 22
2444: PUSH
2445: LD_INT 7
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 21
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 58
2464: PUSH
2465: EMPTY
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 69
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PPUSH
2482: CALL_OW 52
// PlaceHumanInUnit ( Xavier , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2486: LD_EXP 21
2490: PPUSH
2491: LD_INT 22
2493: PUSH
2494: LD_INT 7
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 21
2503: PUSH
2504: LD_INT 2
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 58
2513: PUSH
2514: EMPTY
2515: LIST
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PPUSH
2522: CALL_OW 69
2526: PUSH
2527: LD_INT 1
2529: ARRAY
2530: PPUSH
2531: CALL_OW 52
// PlaceHumanInUnit ( Belkov , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2535: LD_EXP 22
2539: PPUSH
2540: LD_INT 22
2542: PUSH
2543: LD_INT 7
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 21
2552: PUSH
2553: LD_INT 2
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 58
2562: PUSH
2563: EMPTY
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: PPUSH
2580: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2584: LD_EXP 23
2588: PPUSH
2589: LD_INT 22
2591: PUSH
2592: LD_INT 7
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 21
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 58
2611: PUSH
2612: EMPTY
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PPUSH
2620: CALL_OW 69
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: PPUSH
2629: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2633: LD_EXP 19
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2645: LD_EXP 20
2649: PUSH
2650: LD_EXP 23
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PPUSH
2659: LD_INT 9
2661: PPUSH
2662: CALL_OW 336
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2666: LD_INT 22
2668: PUSH
2669: LD_INT 7
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: LD_INT 21
2678: PUSH
2679: LD_INT 2
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PPUSH
2690: CALL_OW 69
2694: PPUSH
2695: LD_INT 107
2697: PPUSH
2698: LD_INT 118
2700: PPUSH
2701: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2705: LD_INT 35
2707: PPUSH
2708: CALL_OW 67
// ComMoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) , Masha ) ;
2712: LD_INT 22
2714: PUSH
2715: LD_INT 7
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 21
2724: PUSH
2725: LD_INT 2
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 34
2734: PUSH
2735: LD_INT 49
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: PPUSH
2752: LD_EXP 18
2756: PPUSH
2757: CALL_OW 112
// until FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_weapon , 49 ] ] ) = 0 or IsDying ( Masha ) ;
2761: LD_INT 22
2763: PUSH
2764: LD_INT 7
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 21
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 34
2783: PUSH
2784: LD_INT 49
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: PUSH
2801: LD_INT 0
2803: EQUAL
2804: PUSH
2805: LD_EXP 18
2809: PPUSH
2810: CALL_OW 303
2814: OR
2815: IFFALSE 2705
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) , 107 , 118 ) ;
2817: LD_INT 22
2819: PUSH
2820: LD_INT 7
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 21
2829: PUSH
2830: LD_INT 2
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PPUSH
2841: CALL_OW 69
2845: PPUSH
2846: LD_INT 107
2848: PPUSH
2849: LD_INT 118
2851: PPUSH
2852: CALL_OW 114
// end ; end_of_file
2856: LD_VAR 0 1
2860: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2861: LD_INT 22
2863: PUSH
2864: LD_INT 8
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 33
2873: PUSH
2874: LD_INT 2
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 69
2889: PUSH
2890: LD_INT 0
2892: GREATER
2893: PUSH
2894: LD_INT 22
2896: PUSH
2897: LD_INT 8
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: LD_INT 34
2906: PUSH
2907: LD_INT 31
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: PPUSH
2918: CALL_OW 69
2922: PUSH
2923: LD_INT 0
2925: EQUAL
2926: AND
2927: IFFALSE 3150
2929: GO 2931
2931: DISABLE
2932: LD_INT 0
2934: PPUSH
// begin enable ;
2935: ENABLE
// uc_side = 8 ;
2936: LD_ADDR_OWVAR 20
2940: PUSH
2941: LD_INT 8
2943: ST_TO_ADDR
// uc_nation = 2 ;
2944: LD_ADDR_OWVAR 21
2948: PUSH
2949: LD_INT 2
2951: ST_TO_ADDR
// vc_engine = 3 ;
2952: LD_ADDR_OWVAR 39
2956: PUSH
2957: LD_INT 3
2959: ST_TO_ADDR
// vc_control = 1 ;
2960: LD_ADDR_OWVAR 38
2964: PUSH
2965: LD_INT 1
2967: ST_TO_ADDR
// vc_weapon = 31 ;
2968: LD_ADDR_OWVAR 40
2972: PUSH
2973: LD_INT 31
2975: ST_TO_ADDR
// vc_chassis = 14 ;
2976: LD_ADDR_OWVAR 37
2980: PUSH
2981: LD_INT 14
2983: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2984: LD_ADDR_EXP 31
2988: PUSH
2989: CALL_OW 45
2993: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2994: LD_EXP 31
2998: PPUSH
2999: LD_INT 8
3001: PUSH
3002: LD_INT 9
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 1
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: CALL_OW 12
3019: ARRAY
3020: PPUSH
3021: LD_INT 0
3023: PPUSH
3024: CALL_OW 49
// hc_name =  ;
3028: LD_ADDR_OWVAR 26
3032: PUSH
3033: LD_STRING 
3035: ST_TO_ADDR
// hc_gallery =  ;
3036: LD_ADDR_OWVAR 33
3040: PUSH
3041: LD_STRING 
3043: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
3044: LD_INT 0
3046: PPUSH
3047: LD_INT 3
3049: PPUSH
3050: LD_INT 10
3052: PPUSH
3053: CALL_OW 380
// arDriver = CreateHuman ;
3057: LD_ADDR_EXP 32
3061: PUSH
3062: CALL_OW 44
3066: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
3067: LD_EXP 32
3071: PPUSH
3072: LD_EXP 31
3076: PPUSH
3077: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
3081: LD_ADDR_VAR 0 1
3085: PUSH
3086: LD_INT 22
3088: PUSH
3089: LD_INT 8
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: LD_INT 33
3098: PUSH
3099: LD_INT 2
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: LD_INT 3
3108: PUSH
3109: LD_INT 61
3111: PUSH
3112: EMPTY
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 69
3128: PUSH
3129: FOR_IN
3130: IFFALSE 3148
// ComLinkTo ( i , arDriver ) ;
3132: LD_VAR 0 1
3136: PPUSH
3137: LD_EXP 32
3141: PPUSH
3142: CALL_OW 135
3146: GO 3129
3148: POP
3149: POP
// end ;
3150: PPOPN 1
3152: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
3153: LD_INT 22
3155: PUSH
3156: LD_INT 8
3158: PUSH
3159: EMPTY
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 21
3165: PUSH
3166: LD_INT 2
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: PUSH
3173: LD_INT 33
3175: PUSH
3176: LD_INT 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: LIST
3187: PPUSH
3188: CALL_OW 69
3192: PUSH
3193: LD_INT 0
3195: EQUAL
3196: IFFALSE 3220
3198: GO 3200
3200: DISABLE
// begin enable ;
3201: ENABLE
// RemoveUnit ( arControlTower ) ;
3202: LD_EXP 31
3206: PPUSH
3207: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3211: LD_EXP 32
3215: PPUSH
3216: CALL_OW 64
// end ;
3220: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3221: LD_EXP 29
3225: PUSH
3226: LD_INT 0
3228: GREATER
3229: IFFALSE 3393
3231: GO 3233
3233: DISABLE
3234: LD_INT 0
3236: PPUSH
3237: PPUSH
// begin enable ;
3238: ENABLE
// rnd = 0 ;
3239: LD_ADDR_VAR 0 2
3243: PUSH
3244: LD_INT 0
3246: ST_TO_ADDR
// uc_side = 2 ;
3247: LD_ADDR_OWVAR 20
3251: PUSH
3252: LD_INT 2
3254: ST_TO_ADDR
// uc_nation = 2 ;
3255: LD_ADDR_OWVAR 21
3259: PUSH
3260: LD_INT 2
3262: ST_TO_ADDR
// hc_name =  ;
3263: LD_ADDR_OWVAR 26
3267: PUSH
3268: LD_STRING 
3270: ST_TO_ADDR
// hc_gallery =  ;
3271: LD_ADDR_OWVAR 33
3275: PUSH
3276: LD_STRING 
3278: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3279: LD_INT 0
3281: PPUSH
3282: LD_INT 4
3284: PPUSH
3285: LD_INT 10
3287: PPUSH
3288: CALL_OW 380
// un = CreateHuman ;
3292: LD_ADDR_VAR 0 1
3296: PUSH
3297: CALL_OW 44
3301: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 8
3309: PUSH
3310: LD_INT 9
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PUSH
3317: LD_INT 1
3319: PPUSH
3320: LD_INT 2
3322: PPUSH
3323: CALL_OW 12
3327: ARRAY
3328: PPUSH
3329: LD_INT 0
3331: PPUSH
3332: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 1
3343: PPUSH
3344: LD_EXP 29
3348: PPUSH
3349: CALL_OW 12
3353: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_EXP 29
3363: PUSH
3364: LD_VAR 0 2
3368: ARRAY
3369: PUSH
3370: LD_INT 1
3372: ARRAY
3373: PPUSH
3374: LD_EXP 29
3378: PUSH
3379: LD_VAR 0 2
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: PPUSH
3389: CALL_OW 158
// end ; end_of_file
3393: PPOPN 2
3395: END
// every 1 do
3396: GO 3398
3398: DISABLE
// begin InGameOn ;
3399: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3403: LD_INT 22
3405: PUSH
3406: LD_INT 1
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 21
3415: PUSH
3416: LD_INT 2
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PPUSH
3427: CALL_OW 69
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3440: LD_INT 22
3442: PUSH
3443: LD_INT 1
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_INT 21
3452: PUSH
3453: LD_INT 2
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 69
3468: PPUSH
3469: LD_INT 69
3471: PPUSH
3472: LD_INT 94
3474: PPUSH
3475: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3479: LD_EXP 1
3483: PPUSH
3484: LD_STRING D2-JMM-1
3486: PPUSH
3487: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3491: LD_INT 22
3493: PUSH
3494: LD_INT 1
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: PUSH
3501: LD_INT 21
3503: PUSH
3504: LD_INT 2
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: PPUSH
3515: CALL_OW 69
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: PPUSH
3524: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3528: LD_EXP 2
3532: PPUSH
3533: LD_STRING D2-Huck-1
3535: PPUSH
3536: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3540: LD_INT 22
3542: PUSH
3543: LD_INT 1
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 21
3552: PUSH
3553: LD_INT 2
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: CALL_OW 69
3568: PUSH
3569: LD_INT 1
3571: ARRAY
3572: PPUSH
3573: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3577: LD_EXP 1
3581: PPUSH
3582: LD_STRING D2-JMM-2
3584: PPUSH
3585: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3589: LD_INT 22
3591: PUSH
3592: LD_INT 1
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 21
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PPUSH
3613: CALL_OW 69
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 87
// InGameOff ;
3626: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3630: LD_STRING M1
3632: PPUSH
3633: CALL_OW 337
// SaveForQuickRestart ;
3637: CALL_OW 22
// end ;
3641: END
// every 10 10$0 do
3642: GO 3644
3644: DISABLE
// begin DialogueOn ;
3645: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3649: LD_EXP 15
3653: PPUSH
3654: LD_STRING D3-Pow-1
3656: PPUSH
3657: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3661: LD_EXP 1
3665: PPUSH
3666: LD_STRING D3-JMM-1
3668: PPUSH
3669: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3673: LD_EXP 15
3677: PPUSH
3678: LD_STRING D3-Pow-2
3680: PPUSH
3681: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3685: LD_EXP 1
3689: PPUSH
3690: LD_STRING D3-JMM-2
3692: PPUSH
3693: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3697: LD_EXP 15
3701: PPUSH
3702: LD_STRING D3-Pow-3
3704: PPUSH
3705: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3709: LD_EXP 1
3713: PPUSH
3714: LD_STRING D3-JMM-3
3716: PPUSH
3717: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3721: LD_EXP 15
3725: PPUSH
3726: LD_STRING D3-Pow-4
3728: PPUSH
3729: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3733: LD_EXP 1
3737: PPUSH
3738: LD_STRING D3-JMM-4
3740: PPUSH
3741: CALL_OW 88
// DialogueOff ;
3745: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3749: LD_STRING M2
3751: PPUSH
3752: CALL_OW 337
// wait ( 2 2$30 ) ;
3756: LD_INT 5250
3758: PPUSH
3759: CALL_OW 67
// PrepareBurlak ;
3763: CALL 2037 0 0
// BurlakArmy ;
3767: CALL 2183 0 0
// end ;
3771: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3772: LD_INT 1
3774: PPUSH
3775: LD_EXP 18
3779: PPUSH
3780: CALL_OW 292
3784: IFFALSE 3954
3786: GO 3788
3788: DISABLE
// begin DialogueOn ;
3789: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3793: LD_EXP 18
3797: PPUSH
3798: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3802: LD_INT 22
3804: PUSH
3805: LD_INT 1
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 26
3814: PUSH
3815: LD_INT 1
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_INT 2
3824: PUSH
3825: LD_INT 25
3827: PUSH
3828: LD_INT 1
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: LD_INT 25
3837: PUSH
3838: LD_INT 2
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 25
3847: PUSH
3848: LD_INT 3
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: PUSH
3855: LD_INT 25
3857: PUSH
3858: LD_INT 4
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 25
3867: PUSH
3868: LD_INT 5
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 25
3877: PUSH
3878: LD_INT 8
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: LIST
3898: PPUSH
3899: CALL_OW 69
3903: PPUSH
3904: LD_STRING D5-Sol1-1
3906: PPUSH
3907: LD_STRING D5-FSol1-1
3909: PPUSH
3910: CALL 5914 0 3
// Say ( JMM , D5-JMM-1 ) ;
3914: LD_EXP 1
3918: PPUSH
3919: LD_STRING D5-JMM-1
3921: PPUSH
3922: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3926: LD_EXP 17
3930: PPUSH
3931: LD_STRING DAmer-Bur-1
3933: PPUSH
3934: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3938: LD_EXP 1
3942: PPUSH
3943: LD_STRING DAmer-JMM-1
3945: PPUSH
3946: CALL_OW 88
// DialogueOff ;
3950: CALL_OW 7
// end ;
3954: END
// every 0 0$1 do var i ;
3955: GO 3957
3957: DISABLE
3958: LD_INT 0
3960: PPUSH
// begin enable ;
3961: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3962: LD_ADDR_VAR 0 1
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: LD_INT 7
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PUSH
3982: FOR_IN
3983: IFFALSE 4219
// if IsInArea ( i , AllianceEscape ) then
3985: LD_VAR 0 1
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 308
3997: IFFALSE 4217
// begin if i = Burlak or i = Masha then
3999: LD_VAR 0 1
4003: PUSH
4004: LD_EXP 17
4008: EQUAL
4009: PUSH
4010: LD_VAR 0 1
4014: PUSH
4015: LD_EXP 18
4019: EQUAL
4020: OR
4021: IFFALSE 4179
// begin RemoveUnit ( i ) ;
4023: LD_VAR 0 1
4027: PPUSH
4028: CALL_OW 64
// DialogueOn ;
4032: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
4036: LD_EXP 1
4040: PPUSH
4041: LD_STRING D5a-JMM-1
4043: PPUSH
4044: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
4048: LD_INT 22
4050: PUSH
4051: LD_INT 1
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PUSH
4058: LD_INT 26
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 2
4070: PUSH
4071: LD_INT 25
4073: PUSH
4074: LD_INT 1
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 25
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 25
4093: PUSH
4094: LD_INT 3
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: LD_INT 25
4103: PUSH
4104: LD_INT 4
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: LD_INT 25
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_INT 25
4123: PUSH
4124: LD_INT 8
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: PPUSH
4145: CALL_OW 69
4149: PPUSH
4150: LD_STRING D5a-Sol1-1
4152: PPUSH
4153: LD_STRING D5-FSol1-1
4155: PPUSH
4156: CALL 5914 0 3
// DialogueOff ;
4160: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
4164: LD_STRING M2b
4166: PPUSH
4167: CALL_OW 337
// spawnBurlak = 0 ;
4171: LD_ADDR_EXP 25
4175: PUSH
4176: LD_INT 0
4178: ST_TO_ADDR
// end ; if GetWeapon ( i ) = 49 then
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 264
4188: PUSH
4189: LD_INT 49
4191: EQUAL
4192: IFFALSE 4208
// SetLives ( i , 1 ) else
4194: LD_VAR 0 1
4198: PPUSH
4199: LD_INT 1
4201: PPUSH
4202: CALL_OW 234
4206: GO 4217
// RemoveUnit ( i ) ;
4208: LD_VAR 0 1
4212: PPUSH
4213: CALL_OW 64
// end ;
4217: GO 3982
4219: POP
4220: POP
// end ;
4221: PPOPN 1
4223: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4224: LD_EXP 18
4228: PPUSH
4229: CALL_OW 256
4233: PUSH
4234: LD_INT 500
4236: LESS
4237: PUSH
4238: LD_EXP 18
4242: PPUSH
4243: CALL_OW 255
4247: PUSH
4248: LD_INT 7
4250: EQUAL
4251: AND
4252: IFFALSE 4272
4254: GO 4256
4256: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4257: LD_EXP 18
4261: PPUSH
4262: LD_INT 107
4264: PPUSH
4265: LD_INT 118
4267: PPUSH
4268: CALL_OW 111
4272: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4273: LD_EXP 17
4277: PPUSH
4278: CALL_OW 301
4282: PUSH
4283: LD_EXP 25
4287: PUSH
4288: LD_INT 1
4290: EQUAL
4291: AND
4292: IFFALSE 4363
4294: GO 4296
4296: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4297: LD_EXP 1
4301: PPUSH
4302: LD_STRING D5b-JMM-1
4304: PPUSH
4305: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D5b-Sol1-1 ,  ) ;
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 26
4321: PUSH
4322: LD_INT 1
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 69
4337: PPUSH
4338: LD_STRING D5b-Sol1-1
4340: PPUSH
4341: LD_STRING 
4343: PPUSH
4344: CALL 5914 0 3
// ChangeMissionObjectives ( M2a ) ;
4348: LD_STRING M2a
4350: PPUSH
4351: CALL_OW 337
// burlakStatus = 1 ;
4355: LD_ADDR_EXP 26
4359: PUSH
4360: LD_INT 1
4362: ST_TO_ADDR
// end ;
4363: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4364: LD_EXP 2
4368: PPUSH
4369: CALL_OW 301
4373: IFFALSE 4521
4375: GO 4377
4377: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4378: LD_EXP 1
4382: PPUSH
4383: LD_STRING D6-JMM-1
4385: PPUSH
4386: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D6-Sol1-1 ,  ) ;
4390: LD_INT 22
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 26
4402: PUSH
4403: LD_INT 1
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 2
4412: PUSH
4413: LD_INT 25
4415: PUSH
4416: LD_INT 1
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 25
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 25
4435: PUSH
4436: LD_INT 3
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_INT 25
4445: PUSH
4446: LD_INT 4
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 25
4455: PUSH
4456: LD_INT 5
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 25
4465: PUSH
4466: LD_INT 8
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PPUSH
4487: CALL_OW 69
4491: PPUSH
4492: LD_STRING D6-Sol1-1
4494: PPUSH
4495: LD_STRING 
4497: PPUSH
4498: CALL 5914 0 3
// Say ( JMM , D6-JMM-2 ) ;
4502: LD_EXP 1
4506: PPUSH
4507: LD_STRING D6-JMM-2
4509: PPUSH
4510: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4514: LD_STRING M1a
4516: PPUSH
4517: CALL_OW 337
// end ;
4521: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4522: LD_INT 25
4524: PPUSH
4525: LD_INT 1
4527: PPUSH
4528: CALL_OW 321
4532: PUSH
4533: LD_INT 2
4535: EQUAL
4536: IFFALSE 4553
4538: GO 4540
4540: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4541: LD_EXP 2
4545: PPUSH
4546: LD_STRING D6-Huck-2
4548: PPUSH
4549: CALL_OW 88
// end ;
4553: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4554: LD_INT 22
4556: PUSH
4557: LD_INT 1
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 2
4566: PUSH
4567: LD_INT 34
4569: PUSH
4570: LD_INT 8
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 35
4579: PUSH
4580: LD_INT 8
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: LD_INT 0
4603: GREATER
4604: IFFALSE 4796
4606: GO 4608
4608: DISABLE
4609: LD_INT 0
4611: PPUSH
4612: PPUSH
// begin enable ;
4613: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4614: LD_ADDR_VAR 0 1
4618: PUSH
4619: LD_INT 5
4621: PPUSH
4622: LD_INT 22
4624: PUSH
4625: LD_INT 1
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: PUSH
4632: LD_INT 21
4634: PUSH
4635: LD_INT 3
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: LD_INT 57
4657: PUSH
4658: EMPTY
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PPUSH
4671: CALL_OW 70
4675: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4676: LD_ADDR_VAR 0 2
4680: PUSH
4681: LD_INT 5
4683: PPUSH
4684: LD_INT 22
4686: PUSH
4687: LD_INT 1
4689: PUSH
4690: EMPTY
4691: LIST
4692: LIST
4693: PUSH
4694: LD_INT 21
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 30
4706: PUSH
4707: LD_INT 5
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 3
4716: PUSH
4717: LD_INT 57
4719: PUSH
4720: EMPTY
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 70
4737: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4738: LD_VAR 0 1
4742: PUSH
4743: LD_INT 0
4745: GREATER
4746: PUSH
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 0
4754: GREATER
4755: AND
4756: IFFALSE 4796
// begin disable ;
4758: DISABLE
// DialogueOn ;
4759: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4763: LD_EXP 1
4767: PPUSH
4768: LD_STRING D7-JMM-1
4770: PPUSH
4771: CALL_OW 88
// DialogueOff ;
4775: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4779: LD_STRING M4
4781: PPUSH
4782: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4786: LD_INT 5
4788: PPUSH
4789: LD_INT 0
4791: PPUSH
4792: CALL_OW 424
// end ; end ;
4796: PPOPN 2
4798: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4799: LD_INT 6
4801: PPUSH
4802: LD_INT 22
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 25
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 70
4830: PUSH
4831: LD_INT 0
4833: GREATER
4834: PUSH
4835: LD_EXP 36
4839: PUSH
4840: LD_INT 1
4842: EQUAL
4843: AND
4844: PUSH
4845: LD_EXP 27
4849: PUSH
4850: LD_INT 0
4852: EQUAL
4853: AND
4854: IFFALSE 4919
4856: GO 4858
4858: DISABLE
// begin enable ;
4859: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4860: LD_ADDR_EXP 24
4864: PUSH
4865: LD_INT 6
4867: PPUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 1
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: LD_INT 25
4880: PUSH
4881: LD_INT 4
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PPUSH
4892: CALL_OW 70
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4901: LD_INT 6
4903: PPUSH
4904: LD_INT 0
4906: PPUSH
4907: CALL_OW 424
// radationResearched = 1 ;
4911: LD_ADDR_EXP 27
4915: PUSH
4916: LD_INT 1
4918: ST_TO_ADDR
// end ;
4919: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4920: LD_EXP 24
4924: PPUSH
4925: CALL_OW 301
4929: PUSH
4930: LD_EXP 27
4934: PUSH
4935: LD_INT 1
4937: EQUAL
4938: AND
4939: IFFALSE 4975
4941: GO 4943
4943: DISABLE
// begin enable ;
4944: ENABLE
// radationResearched = 0 ;
4945: LD_ADDR_EXP 27
4949: PUSH
4950: LD_INT 0
4952: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4953: LD_INT 6
4955: PPUSH
4956: LD_INT 1
4958: PPUSH
4959: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4963: LD_EXP 1
4967: PPUSH
4968: LD_STRING D9a-JMM-1
4970: PPUSH
4971: CALL_OW 88
// end ; end_of_file
4975: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4976: LD_VAR 0 5
4980: PUSH
4981: LD_INT 8
4983: EQUAL
4984: PUSH
4985: LD_EXP 34
4989: PUSH
4990: LD_INT 0
4992: EQUAL
4993: AND
4994: IFFALSE 5047
// begin eventVar1 = 1 ;
4996: LD_ADDR_EXP 34
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// DialogueOn ;
5004: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5008: LD_EXP 1
5012: PPUSH
5013: LD_STRING D6a-JMM-1
5015: PPUSH
5016: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5020: LD_EXP 15
5024: PPUSH
5025: LD_STRING D6a-Pow-1
5027: PPUSH
5028: CALL_OW 94
// DialogueOff ;
5032: CALL_OW 7
// wait ( 3 3$0 ) ;
5036: LD_INT 6300
5038: PPUSH
5039: CALL_OW 67
// PowellSupport ;
5043: CALL 1809 0 0
// end ; end ;
5047: PPOPN 5
5049: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 264
5059: PUSH
5060: LD_INT 8
5062: EQUAL
5063: PUSH
5064: LD_EXP 35
5068: PUSH
5069: LD_INT 0
5071: EQUAL
5072: AND
5073: IFFALSE 5142
// begin eventVar2 = 1 ;
5075: LD_ADDR_EXP 35
5079: PUSH
5080: LD_INT 1
5082: ST_TO_ADDR
// DialogueOn ;
5083: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5087: LD_EXP 1
5091: PPUSH
5092: LD_STRING D6b-JMM-1
5094: PPUSH
5095: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5099: LD_EXP 15
5103: PPUSH
5104: LD_STRING D6b-Pow-1
5106: PPUSH
5107: CALL_OW 94
// DialogueOff ;
5111: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5115: LD_INT 5
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5125: LD_INT 7
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5135: LD_STRING M3
5137: PPUSH
5138: CALL_OW 337
// end ; end ;
5142: PPOPN 2
5144: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5145: LD_VAR 0 2
5149: PPUSH
5150: LD_VAR 0 3
5154: PPUSH
5155: LD_INT 5
5157: PPUSH
5158: CALL_OW 309
5162: PUSH
5163: LD_EXP 36
5167: PUSH
5168: LD_INT 0
5170: EQUAL
5171: AND
5172: IFFALSE 5390
// begin eventVar3 = 1 ;
5174: LD_ADDR_EXP 36
5178: PUSH
5179: LD_INT 1
5181: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5182: LD_INT 175
5184: PPUSH
5185: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5189: LD_INT 7
5191: PPUSH
5192: LD_INT 22
5194: PUSH
5195: LD_INT 1
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 21
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 34
5214: PUSH
5215: LD_INT 11
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: CALL_OW 70
5231: PUSH
5232: LD_INT 0
5234: GREATER
5235: IFFALSE 5254
// begin radarOnSpot = 1 ;
5237: LD_ADDR_EXP 28
5241: PUSH
5242: LD_INT 1
5244: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5245: LD_STRING M3a
5247: PPUSH
5248: CALL_OW 337
// end else
5252: GO 5261
// begin ChangeMissionObjectives ( M3b ) ;
5254: LD_STRING M3b
5256: PPUSH
5257: CALL_OW 337
// end ; DialogueOn ;
5261: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5265: LD_EXP 2
5269: PPUSH
5270: LD_STRING D8-Huck-1
5272: PPUSH
5273: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5277: LD_EXP 1
5281: PPUSH
5282: LD_STRING D8-JMM-1
5284: PPUSH
5285: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5289: LD_EXP 2
5293: PPUSH
5294: LD_STRING D8-Huck-2
5296: PPUSH
5297: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5301: LD_EXP 1
5305: PPUSH
5306: LD_STRING D8-JMM-2
5308: PPUSH
5309: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5313: LD_EXP 2
5317: PPUSH
5318: LD_STRING D8-Huck-3
5320: PPUSH
5321: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5325: LD_EXP 1
5329: PPUSH
5330: LD_STRING D8-JMM-3
5332: PPUSH
5333: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5337: LD_EXP 2
5341: PPUSH
5342: LD_STRING D8-Huck-4
5344: PPUSH
5345: CALL_OW 88
// DialogueOff ;
5349: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5353: LD_INT 5
5355: PPUSH
5356: LD_INT 0
5358: PPUSH
5359: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5363: LD_INT 7
5365: PPUSH
5366: LD_INT 0
5368: PPUSH
5369: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5373: LD_INT 6
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5383: LD_STRING M5
5385: PPUSH
5386: CALL_OW 337
// end ; end ;
5390: PPOPN 3
5392: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5393: LD_EXP 24
5397: PPUSH
5398: CALL_OW 302
5402: PUSH
5403: LD_VAR 0 2
5407: PUSH
5408: LD_EXP 24
5412: EQUAL
5413: AND
5414: PUSH
5415: LD_EXP 37
5419: PUSH
5420: LD_INT 0
5422: EQUAL
5423: AND
5424: PUSH
5425: LD_EXP 36
5429: PUSH
5430: LD_INT 1
5432: EQUAL
5433: AND
5434: IFFALSE 5480
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 268
5448: PUSH
5449: LD_INT 11
5451: EQUAL
5452: PUSH
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_INT 2
5460: PPUSH
5461: CALL_OW 268
5465: PUSH
5466: LD_INT 11
5468: EQUAL
5469: OR
5470: IFFALSE 5480
// eventVar4 = 1 ;
5472: LD_ADDR_EXP 37
5476: PUSH
5477: LD_INT 1
5479: ST_TO_ADDR
// end ;
5480: PPOPN 2
5482: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5483: LD_INT 0
5485: PPUSH
5486: PPUSH
// begin if GetNation ( unit ) = 2 then
5487: LD_VAR 0 1
5491: PPUSH
5492: CALL_OW 248
5496: PUSH
5497: LD_INT 2
5499: EQUAL
5500: IFFALSE 5746
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5502: LD_ADDR_EXP 30
5506: PUSH
5507: LD_EXP 30
5511: PUSH
5512: LD_INT 1
5514: PLUS
5515: ST_TO_ADDR
// for i := 1 to sibDeposits do
5516: LD_ADDR_VAR 0 4
5520: PUSH
5521: DOUBLE
5522: LD_INT 1
5524: DEC
5525: ST_TO_ADDR
5526: LD_EXP 29
5530: PUSH
5531: FOR_TO
5532: IFFALSE 5634
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5534: LD_EXP 29
5538: PUSH
5539: LD_VAR 0 4
5543: ARRAY
5544: PUSH
5545: LD_INT 1
5547: ARRAY
5548: PUSH
5549: LD_VAR 0 2
5553: EQUAL
5554: PUSH
5555: LD_EXP 29
5559: PUSH
5560: LD_VAR 0 4
5564: ARRAY
5565: PUSH
5566: LD_INT 2
5568: ARRAY
5569: PUSH
5570: LD_VAR 0 3
5574: EQUAL
5575: AND
5576: IFFALSE 5632
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5578: LD_ADDR_EXP 29
5582: PUSH
5583: LD_EXP 29
5587: PPUSH
5588: LD_VAR 0 4
5592: PUSH
5593: EMPTY
5594: LIST
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PPUSH
5600: CALL_OW 3
5604: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5605: LD_ADDR_EXP 29
5609: PUSH
5610: LD_EXP 29
5614: PPUSH
5615: LD_VAR 0 4
5619: PUSH
5620: EMPTY
5621: LIST
5622: PUSH
5623: LD_INT 2
5625: ARRAY
5626: PPUSH
5627: CALL_OW 3
5631: ST_TO_ADDR
// end ;
5632: GO 5531
5634: POP
5635: POP
// if eventVar5 = 0 then
5636: LD_EXP 38
5640: PUSH
5641: LD_INT 0
5643: EQUAL
5644: IFFALSE 5746
// begin eventVar5 = 1 ;
5646: LD_ADDR_EXP 38
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// DialogueOn ;
5654: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5658: LD_EXP 2
5662: PPUSH
5663: LD_STRING D4-Sci1-1
5665: PPUSH
5666: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D4-JMM-1
5677: PPUSH
5678: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5682: LD_EXP 2
5686: PPUSH
5687: LD_STRING D4-Sci1-2
5689: PPUSH
5690: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5694: LD_EXP 1
5698: PPUSH
5699: LD_STRING D4-JMM-2
5701: PPUSH
5702: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5706: LD_EXP 2
5710: PPUSH
5711: LD_STRING D4-Sci1-3
5713: PPUSH
5714: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_STRING D4-JMM-3
5725: PPUSH
5726: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5730: LD_EXP 1
5734: PPUSH
5735: LD_STRING D4-JMM-3a
5737: PPUSH
5738: CALL_OW 88
// DialogueOff ;
5742: CALL_OW 7
// end ; end ; end ;
5746: PPOPN 5
5748: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 0 then
5749: LD_VAR 0 1
5753: PPUSH
5754: CALL_OW 255
5758: PUSH
5759: LD_INT 1
5761: EQUAL
5762: PUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 266
5772: PUSH
5773: LD_INT 0
5775: EQUAL
5776: AND
5777: PUSH
5778: LD_INT 22
5780: PUSH
5781: LD_INT 1
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 21
5790: PUSH
5791: LD_INT 3
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 2
5800: PUSH
5801: LD_INT 30
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 30
5813: PUSH
5814: LD_INT 1
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PPUSH
5831: CALL_OW 69
5835: PUSH
5836: LD_INT 0
5838: EQUAL
5839: AND
5840: IFFALSE 5854
// SetBName ( building , omega ) ;
5842: LD_VAR 0 1
5846: PPUSH
5847: LD_STRING omega
5849: PPUSH
5850: CALL_OW 500
// end ; end_of_file
5854: PPOPN 2
5856: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
// if exist_mode then
5861: LD_VAR 0 2
5865: IFFALSE 5884
// unit := CreateCharacter ( ident ) else
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_VAR 0 1
5876: PPUSH
5877: CALL_OW 34
5881: ST_TO_ADDR
5882: GO 5899
// unit := NewCharacter ( ident ) ;
5884: LD_ADDR_VAR 0 4
5888: PUSH
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 25
5898: ST_TO_ADDR
// result := unit ;
5899: LD_ADDR_VAR 0 3
5903: PUSH
5904: LD_VAR 0 4
5908: ST_TO_ADDR
// end ;
5909: LD_VAR 0 3
5913: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5914: LD_INT 0
5916: PPUSH
5917: PPUSH
5918: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5919: LD_ADDR_VAR 0 1
5923: PUSH
5924: LD_VAR 0 1
5928: PUSH
5929: LD_EXP 1
5933: PUSH
5934: LD_EXP 2
5938: PUSH
5939: LD_EXP 3
5943: PUSH
5944: LD_EXP 4
5948: PUSH
5949: LD_EXP 5
5953: PUSH
5954: LD_EXP 6
5958: PUSH
5959: LD_EXP 7
5963: PUSH
5964: LD_EXP 8
5968: PUSH
5969: LD_EXP 9
5973: PUSH
5974: LD_EXP 10
5978: PUSH
5979: LD_EXP 11
5983: PUSH
5984: LD_EXP 12
5988: PUSH
5989: LD_EXP 13
5993: PUSH
5994: LD_EXP 14
5998: PUSH
5999: LD_EXP 15
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: DIFF
6021: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6022: LD_ADDR_VAR 0 6
6026: PUSH
6027: LD_INT 1
6029: PPUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 12
6039: ST_TO_ADDR
// for i = 1 to characters do
6040: LD_ADDR_VAR 0 5
6044: PUSH
6045: DOUBLE
6046: LD_INT 1
6048: DEC
6049: ST_TO_ADDR
6050: LD_VAR 0 1
6054: PUSH
6055: FOR_TO
6056: IFFALSE 6166
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6058: LD_VAR 0 5
6062: PUSH
6063: LD_VAR 0 6
6067: EQUAL
6068: PUSH
6069: LD_VAR 0 1
6073: PUSH
6074: LD_VAR 0 5
6078: ARRAY
6079: PPUSH
6080: CALL_OW 258
6084: PUSH
6085: LD_INT 1
6087: EQUAL
6088: AND
6089: IFFALSE 6111
// Say ( characters [ i ] , dialogMID ) ;
6091: LD_VAR 0 1
6095: PUSH
6096: LD_VAR 0 5
6100: ARRAY
6101: PPUSH
6102: LD_VAR 0 2
6106: PPUSH
6107: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6111: LD_VAR 0 5
6115: PUSH
6116: LD_VAR 0 6
6120: EQUAL
6121: PUSH
6122: LD_VAR 0 1
6126: PUSH
6127: LD_VAR 0 5
6131: ARRAY
6132: PPUSH
6133: CALL_OW 258
6137: PUSH
6138: LD_INT 2
6140: EQUAL
6141: AND
6142: IFFALSE 6164
// Say ( characters [ i ] , dialogFID ) ;
6144: LD_VAR 0 1
6148: PUSH
6149: LD_VAR 0 5
6153: ARRAY
6154: PPUSH
6155: LD_VAR 0 3
6159: PPUSH
6160: CALL_OW 88
// end ;
6164: GO 6055
6166: POP
6167: POP
// end ;
6168: LD_VAR 0 4
6172: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6173: LD_INT 0
6175: PPUSH
6176: PPUSH
6177: PPUSH
6178: PPUSH
6179: PPUSH
6180: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6181: LD_ADDR_VAR 0 7
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_VAR 0 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 25
6200: PUSH
6201: LD_INT 9
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PPUSH
6212: CALL_OW 69
6216: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6217: LD_ADDR_VAR 0 8
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_VAR 0 2
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_INT 1
6267: PPUSH
6268: LD_INT 3
6270: PPUSH
6271: CALL_OW 12
6275: ST_TO_ADDR
// for i = 1 to list do
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: DOUBLE
6282: LD_INT 1
6284: DEC
6285: ST_TO_ADDR
6286: LD_VAR 0 7
6290: PUSH
6291: FOR_TO
6292: IFFALSE 6474
// for ta in filter do
6294: LD_ADDR_VAR 0 4
6298: PUSH
6299: LD_VAR 0 8
6303: PUSH
6304: FOR_IN
6305: IFFALSE 6470
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6307: LD_VAR 0 7
6311: PUSH
6312: LD_VAR 0 6
6316: ARRAY
6317: PPUSH
6318: LD_VAR 0 4
6322: PPUSH
6323: CALL_OW 296
6327: PUSH
6328: LD_INT 13
6330: LESSEQUAL
6331: IFFALSE 6468
// begin case c of 1 :
6333: LD_VAR 0 5
6337: PUSH
6338: LD_INT 1
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6384
6346: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6347: LD_VAR 0 7
6351: PUSH
6352: LD_VAR 0 6
6356: ARRAY
6357: PPUSH
6358: LD_VAR 0 4
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 154
6382: GO 6468
6384: LD_INT 2
6386: DOUBLE
6387: EQUAL
6388: IFTRUE 6392
6390: GO 6456
6392: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6393: LD_VAR 0 7
6397: PUSH
6398: LD_VAR 0 6
6402: ARRAY
6403: PPUSH
6404: LD_VAR 0 4
6408: PPUSH
6409: CALL_OW 250
6413: PUSH
6414: LD_INT 1
6416: NEG
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 12
6425: PLUS
6426: PPUSH
6427: LD_VAR 0 4
6431: PPUSH
6432: CALL_OW 251
6436: PUSH
6437: LD_INT 1
6439: NEG
6440: PPUSH
6441: LD_INT 1
6443: PPUSH
6444: CALL_OW 12
6448: PLUS
6449: PPUSH
6450: CALL_OW 153
6454: GO 6468
6456: LD_INT 3
6458: DOUBLE
6459: EQUAL
6460: IFTRUE 6464
6462: GO 6467
6464: POP
// ; end ;
6465: GO 6468
6467: POP
// end ; end ;
6468: GO 6304
6470: POP
6471: POP
6472: GO 6291
6474: POP
6475: POP
// end ;
6476: LD_VAR 0 3
6480: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6481: LD_INT 0
6483: PPUSH
6484: PPUSH
// for i in charactersList do
6485: LD_ADDR_VAR 0 4
6489: PUSH
6490: LD_VAR 0 1
6494: PUSH
6495: FOR_IN
6496: IFFALSE 6525
// begin if IsOk ( i ) then
6498: LD_VAR 0 4
6502: PPUSH
6503: CALL_OW 302
6507: IFFALSE 6523
// SaveCharacters ( i , ident ) ;
6509: LD_VAR 0 4
6513: PPUSH
6514: LD_VAR 0 2
6518: PPUSH
6519: CALL_OW 38
// end ;
6523: GO 6495
6525: POP
6526: POP
// end ;
6527: LD_VAR 0 3
6531: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6532: LD_INT 0
6534: PPUSH
6535: PPUSH
6536: PPUSH
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
// for i = 1 to medicCount do
6545: LD_ADDR_VAR 0 13
6549: PUSH
6550: DOUBLE
6551: LD_INT 1
6553: DEC
6554: ST_TO_ADDR
6555: LD_VAR 0 7
6559: PUSH
6560: FOR_TO
6561: IFFALSE 6643
// begin uc_side = side ;
6563: LD_ADDR_OWVAR 20
6567: PUSH
6568: LD_VAR 0 1
6572: ST_TO_ADDR
// uc_nation = nation ;
6573: LD_ADDR_OWVAR 21
6577: PUSH
6578: LD_VAR 0 2
6582: ST_TO_ADDR
// hc_name =  ;
6583: LD_ADDR_OWVAR 26
6587: PUSH
6588: LD_STRING 
6590: ST_TO_ADDR
// hc_gallery =  ;
6591: LD_ADDR_OWVAR 33
6595: PUSH
6596: LD_STRING 
6598: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6599: LD_INT 0
6601: PPUSH
6602: LD_INT 4
6604: PPUSH
6605: LD_VAR 0 8
6609: PPUSH
6610: CALL_OW 380
// un = CreateHuman ;
6614: LD_ADDR_VAR 0 15
6618: PUSH
6619: CALL_OW 44
6623: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6624: LD_VAR 0 15
6628: PPUSH
6629: LD_VAR 0 9
6633: PPUSH
6634: LD_INT 0
6636: PPUSH
6637: CALL_OW 49
// end ;
6641: GO 6560
6643: POP
6644: POP
// for i = 1 to soldierCount do
6645: LD_ADDR_VAR 0 13
6649: PUSH
6650: DOUBLE
6651: LD_INT 1
6653: DEC
6654: ST_TO_ADDR
6655: LD_VAR 0 3
6659: PUSH
6660: FOR_TO
6661: IFFALSE 6743
// begin uc_side = side ;
6663: LD_ADDR_OWVAR 20
6667: PUSH
6668: LD_VAR 0 1
6672: ST_TO_ADDR
// uc_nation = nation ;
6673: LD_ADDR_OWVAR 21
6677: PUSH
6678: LD_VAR 0 2
6682: ST_TO_ADDR
// hc_name =  ;
6683: LD_ADDR_OWVAR 26
6687: PUSH
6688: LD_STRING 
6690: ST_TO_ADDR
// hc_gallery =  ;
6691: LD_ADDR_OWVAR 33
6695: PUSH
6696: LD_STRING 
6698: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6699: LD_INT 0
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: LD_VAR 0 8
6709: PPUSH
6710: CALL_OW 380
// un = CreateHuman ;
6714: LD_ADDR_VAR 0 15
6718: PUSH
6719: CALL_OW 44
6723: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6724: LD_VAR 0 15
6728: PPUSH
6729: LD_VAR 0 9
6733: PPUSH
6734: LD_INT 0
6736: PPUSH
6737: CALL_OW 49
// end ;
6741: GO 6660
6743: POP
6744: POP
// for i = 1 to sniperCount do
6745: LD_ADDR_VAR 0 13
6749: PUSH
6750: DOUBLE
6751: LD_INT 1
6753: DEC
6754: ST_TO_ADDR
6755: LD_VAR 0 4
6759: PUSH
6760: FOR_TO
6761: IFFALSE 6843
// begin uc_side = side ;
6763: LD_ADDR_OWVAR 20
6767: PUSH
6768: LD_VAR 0 1
6772: ST_TO_ADDR
// uc_nation = nation ;
6773: LD_ADDR_OWVAR 21
6777: PUSH
6778: LD_VAR 0 2
6782: ST_TO_ADDR
// hc_name =  ;
6783: LD_ADDR_OWVAR 26
6787: PUSH
6788: LD_STRING 
6790: ST_TO_ADDR
// hc_gallery =  ;
6791: LD_ADDR_OWVAR 33
6795: PUSH
6796: LD_STRING 
6798: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6799: LD_INT 0
6801: PPUSH
6802: LD_INT 5
6804: PPUSH
6805: LD_VAR 0 8
6809: PPUSH
6810: CALL_OW 380
// un = CreateHuman ;
6814: LD_ADDR_VAR 0 15
6818: PUSH
6819: CALL_OW 44
6823: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6824: LD_VAR 0 15
6828: PPUSH
6829: LD_VAR 0 9
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 49
// end ;
6841: GO 6760
6843: POP
6844: POP
// for i = 1 to bazookCount do
6845: LD_ADDR_VAR 0 13
6849: PUSH
6850: DOUBLE
6851: LD_INT 1
6853: DEC
6854: ST_TO_ADDR
6855: LD_VAR 0 5
6859: PUSH
6860: FOR_TO
6861: IFFALSE 6943
// begin uc_side = side ;
6863: LD_ADDR_OWVAR 20
6867: PUSH
6868: LD_VAR 0 1
6872: ST_TO_ADDR
// uc_nation = nation ;
6873: LD_ADDR_OWVAR 21
6877: PUSH
6878: LD_VAR 0 2
6882: ST_TO_ADDR
// hc_name =  ;
6883: LD_ADDR_OWVAR 26
6887: PUSH
6888: LD_STRING 
6890: ST_TO_ADDR
// hc_gallery =  ;
6891: LD_ADDR_OWVAR 33
6895: PUSH
6896: LD_STRING 
6898: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6899: LD_INT 0
6901: PPUSH
6902: LD_INT 9
6904: PPUSH
6905: LD_VAR 0 8
6909: PPUSH
6910: CALL_OW 380
// un = CreateHuman ;
6914: LD_ADDR_VAR 0 15
6918: PUSH
6919: CALL_OW 44
6923: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6924: LD_VAR 0 15
6928: PPUSH
6929: LD_VAR 0 9
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: CALL_OW 49
// end ;
6941: GO 6860
6943: POP
6944: POP
// for i = 1 to mortalCount do
6945: LD_ADDR_VAR 0 13
6949: PUSH
6950: DOUBLE
6951: LD_INT 1
6953: DEC
6954: ST_TO_ADDR
6955: LD_VAR 0 6
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7043
// begin uc_side = side ;
6963: LD_ADDR_OWVAR 20
6967: PUSH
6968: LD_VAR 0 1
6972: ST_TO_ADDR
// uc_nation = nation ;
6973: LD_ADDR_OWVAR 21
6977: PUSH
6978: LD_VAR 0 2
6982: ST_TO_ADDR
// hc_name =  ;
6983: LD_ADDR_OWVAR 26
6987: PUSH
6988: LD_STRING 
6990: ST_TO_ADDR
// hc_gallery =  ;
6991: LD_ADDR_OWVAR 33
6995: PUSH
6996: LD_STRING 
6998: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6999: LD_INT 0
7001: PPUSH
7002: LD_INT 8
7004: PPUSH
7005: LD_VAR 0 8
7009: PPUSH
7010: CALL_OW 380
// un = CreateHuman ;
7014: LD_ADDR_VAR 0 15
7018: PUSH
7019: CALL_OW 44
7023: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7024: LD_VAR 0 15
7028: PPUSH
7029: LD_VAR 0 9
7033: PPUSH
7034: LD_INT 0
7036: PPUSH
7037: CALL_OW 49
// end ;
7041: GO 6960
7043: POP
7044: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7045: LD_ADDR_VAR 0 17
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 25
7064: PUSH
7065: LD_INT 4
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 69
7080: ST_TO_ADDR
// for i in medic_list do
7081: LD_ADDR_VAR 0 13
7085: PUSH
7086: LD_VAR 0 17
7090: PUSH
7091: FOR_IN
7092: IFFALSE 7110
// ComMoveToArea ( i , healArea ) ;
7094: LD_VAR 0 13
7098: PPUSH
7099: LD_VAR 0 10
7103: PPUSH
7104: CALL_OW 113
7108: GO 7091
7110: POP
7111: POP
// repeat wait ( 0 0$1 ) ;
7112: LD_INT 35
7114: PPUSH
7115: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7119: LD_ADDR_VAR 0 16
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_VAR 0 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 1
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: LD_INT 24
7144: PUSH
7145: LD_INT 550
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 250
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7180: LD_ADDR_VAR 0 18
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 2
7199: PUSH
7200: LD_INT 25
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 25
7212: PUSH
7213: LD_INT 5
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 25
7222: PUSH
7223: LD_INT 8
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 25
7232: PUSH
7233: LD_INT 9
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 24
7249: PUSH
7250: LD_INT 1000
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: PPUSH
7262: CALL_OW 69
7266: ST_TO_ADDR
// if medicCount > 0 then
7267: LD_VAR 0 7
7271: PUSH
7272: LD_INT 0
7274: GREATER
7275: IFFALSE 7349
// begin if damageUnit_list > 0 then
7277: LD_VAR 0 16
7281: PUSH
7282: LD_INT 0
7284: GREATER
7285: IFFALSE 7349
// begin for i in damageUnit_list do
7287: LD_ADDR_VAR 0 13
7291: PUSH
7292: LD_VAR 0 16
7296: PUSH
7297: FOR_IN
7298: IFFALSE 7347
// begin ComMoveToArea ( i , healArea ) ;
7300: LD_VAR 0 13
7304: PPUSH
7305: LD_VAR 0 10
7309: PPUSH
7310: CALL_OW 113
// for j in medic_list do
7314: LD_ADDR_VAR 0 14
7318: PUSH
7319: LD_VAR 0 17
7323: PUSH
7324: FOR_IN
7325: IFFALSE 7343
// AddComHeal ( j , i ) ;
7327: LD_VAR 0 14
7331: PPUSH
7332: LD_VAR 0 13
7336: PPUSH
7337: CALL_OW 188
7341: GO 7324
7343: POP
7344: POP
// end ;
7345: GO 7297
7347: POP
7348: POP
// end ; end ; for i in soldiersOK_list do
7349: LD_ADDR_VAR 0 13
7353: PUSH
7354: LD_VAR 0 18
7358: PUSH
7359: FOR_IN
7360: IFFALSE 7536
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7362: LD_ADDR_VAR 0 21
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_VAR 0 11
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PPUSH
7379: CALL_OW 69
7383: PPUSH
7384: LD_VAR 0 13
7388: PPUSH
7389: CALL_OW 74
7393: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7394: LD_ADDR_VAR 0 22
7398: PUSH
7399: LD_INT 22
7401: PUSH
7402: LD_VAR 0 11
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 59
7416: PUSH
7417: EMPTY
7418: LIST
7419: PUSH
7420: LD_INT 21
7422: PUSH
7423: LD_INT 1
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 21
7432: PUSH
7433: LD_INT 2
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: EMPTY
7451: LIST
7452: PPUSH
7453: CALL_OW 69
7457: PPUSH
7458: LD_VAR 0 13
7462: PPUSH
7463: CALL_OW 74
7467: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7468: LD_VAR 0 13
7472: PPUSH
7473: LD_VAR 0 21
7477: PPUSH
7478: CALL_OW 296
7482: PUSH
7483: LD_INT 8
7485: PLUS
7486: PUSH
7487: LD_VAR 0 13
7491: PPUSH
7492: LD_VAR 0 22
7496: PPUSH
7497: CALL_OW 296
7501: LESS
7502: IFFALSE 7520
// begin ComAttackUnit ( i , target1 ) ;
7504: LD_VAR 0 13
7508: PPUSH
7509: LD_VAR 0 21
7513: PPUSH
7514: CALL_OW 115
// end else
7518: GO 7534
// begin ComAttackUnit ( i , target2 ) ;
7520: LD_VAR 0 13
7524: PPUSH
7525: LD_VAR 0 22
7529: PPUSH
7530: CALL_OW 115
// end ; end ;
7534: GO 7359
7536: POP
7537: POP
// until soldiersOK_list = [ ] ;
7538: LD_VAR 0 18
7542: PUSH
7543: EMPTY
7544: EQUAL
7545: IFFALSE 7112
// end ;
7547: LD_VAR 0 12
7551: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
// amChassisTab = [ ] ;
7565: LD_ADDR_VAR 0 19
7569: PUSH
7570: EMPTY
7571: ST_TO_ADDR
// arChassisTab = [ ] ;
7572: LD_ADDR_VAR 0 18
7576: PUSH
7577: EMPTY
7578: ST_TO_ADDR
// ruChassisTab = [ ] ;
7579: LD_ADDR_VAR 0 17
7583: PUSH
7584: EMPTY
7585: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7586: LD_INT 35
7588: PPUSH
7589: CALL_OW 67
// if nation = 1 then
7593: LD_VAR 0 5
7597: PUSH
7598: LD_INT 1
7600: EQUAL
7601: IFFALSE 8106
// begin uc_side = side ;
7603: LD_ADDR_OWVAR 20
7607: PUSH
7608: LD_VAR 0 2
7612: ST_TO_ADDR
// uc_nation = nation ;
7613: LD_ADDR_OWVAR 21
7617: PUSH
7618: LD_VAR 0 5
7622: ST_TO_ADDR
// vc_engine = vehengine ;
7623: LD_ADDR_OWVAR 39
7627: PUSH
7628: LD_VAR 0 6
7632: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
7633: LD_ADDR_OWVAR 38
7637: PUSH
7638: LD_VAR 0 7
7642: PUSH
7643: LD_INT 1
7645: PPUSH
7646: LD_VAR 0 7
7650: PPUSH
7651: CALL_OW 12
7655: ARRAY
7656: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7657: LD_ADDR_OWVAR 40
7661: PUSH
7662: LD_VAR 0 10
7666: PUSH
7667: LD_INT 1
7669: PPUSH
7670: LD_VAR 0 10
7674: PPUSH
7675: CALL_OW 12
7679: ARRAY
7680: ST_TO_ADDR
// for j = 1 to AMWeapon do
7681: LD_ADDR_VAR 0 14
7685: PUSH
7686: DOUBLE
7687: LD_INT 1
7689: DEC
7690: ST_TO_ADDR
7691: LD_VAR 0 10
7695: PUSH
7696: FOR_TO
7697: IFFALSE 7998
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
7699: LD_VAR 0 10
7703: PUSH
7704: LD_VAR 0 14
7708: ARRAY
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: PUSH
7714: LD_VAR 0 10
7718: PUSH
7719: LD_VAR 0 14
7723: ARRAY
7724: PUSH
7725: LD_INT 3
7727: EQUAL
7728: OR
7729: IFFALSE 7782
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
7731: LD_ADDR_VAR 0 19
7735: PUSH
7736: LD_INT 1
7738: PUSH
7739: LD_INT 2
7741: PUSH
7742: LD_INT 3
7744: PUSH
7745: LD_INT 4
7747: PUSH
7748: LD_INT 5
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7758: LD_ADDR_OWVAR 37
7762: PUSH
7763: LD_VAR 0 19
7767: PUSH
7768: LD_INT 1
7770: PPUSH
7771: LD_VAR 0 19
7775: PPUSH
7776: CALL_OW 12
7780: ARRAY
7781: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
7782: LD_VAR 0 10
7786: PUSH
7787: LD_VAR 0 14
7791: ARRAY
7792: PUSH
7793: LD_INT 4
7795: EQUAL
7796: PUSH
7797: LD_VAR 0 10
7801: PUSH
7802: LD_VAR 0 14
7806: ARRAY
7807: PUSH
7808: LD_INT 5
7810: EQUAL
7811: OR
7812: PUSH
7813: LD_VAR 0 10
7817: PUSH
7818: LD_VAR 0 14
7822: ARRAY
7823: PUSH
7824: LD_INT 9
7826: EQUAL
7827: OR
7828: PUSH
7829: LD_VAR 0 10
7833: PUSH
7834: LD_VAR 0 14
7838: ARRAY
7839: PUSH
7840: LD_INT 11
7842: EQUAL
7843: OR
7844: PUSH
7845: LD_VAR 0 10
7849: PUSH
7850: LD_VAR 0 14
7854: ARRAY
7855: PUSH
7856: LD_INT 7
7858: EQUAL
7859: OR
7860: IFFALSE 7909
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
7862: LD_ADDR_VAR 0 19
7866: PUSH
7867: LD_INT 2
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: LD_INT 4
7875: PUSH
7876: LD_INT 5
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7885: LD_ADDR_OWVAR 37
7889: PUSH
7890: LD_VAR 0 19
7894: PUSH
7895: LD_INT 1
7897: PPUSH
7898: LD_VAR 0 19
7902: PPUSH
7903: CALL_OW 12
7907: ARRAY
7908: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
7909: LD_VAR 0 10
7913: PUSH
7914: LD_VAR 0 14
7918: ARRAY
7919: PUSH
7920: LD_INT 8
7922: EQUAL
7923: PUSH
7924: LD_VAR 0 10
7928: PUSH
7929: LD_VAR 0 14
7933: ARRAY
7934: PUSH
7935: LD_INT 6
7937: EQUAL
7938: OR
7939: PUSH
7940: LD_VAR 0 10
7944: PUSH
7945: LD_VAR 0 14
7949: ARRAY
7950: PUSH
7951: LD_INT 10
7953: EQUAL
7954: OR
7955: IFFALSE 7996
// begin amChassisTab = [ 4 , 5 ] ;
7957: LD_ADDR_VAR 0 19
7961: PUSH
7962: LD_INT 4
7964: PUSH
7965: LD_INT 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
7972: LD_ADDR_OWVAR 37
7976: PUSH
7977: LD_VAR 0 19
7981: PUSH
7982: LD_INT 1
7984: PPUSH
7985: LD_VAR 0 19
7989: PPUSH
7990: CALL_OW 12
7994: ARRAY
7995: ST_TO_ADDR
// end ; end ;
7996: GO 7696
7998: POP
7999: POP
// veh = CreateVehicle ;
8000: LD_ADDR_VAR 0 16
8004: PUSH
8005: CALL_OW 45
8009: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8010: LD_VAR 0 16
8014: PPUSH
8015: LD_VAR 0 1
8019: PPUSH
8020: LD_INT 0
8022: PPUSH
8023: CALL_OW 49
// if vc_control = 1 then
8027: LD_OWVAR 38
8031: PUSH
8032: LD_INT 1
8034: EQUAL
8035: IFFALSE 8092
// begin hc_gallery =  ;
8037: LD_ADDR_OWVAR 33
8041: PUSH
8042: LD_STRING 
8044: ST_TO_ADDR
// hc_name =  ;
8045: LD_ADDR_OWVAR 26
8049: PUSH
8050: LD_STRING 
8052: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8053: LD_INT 0
8055: PPUSH
8056: LD_INT 3
8058: PPUSH
8059: LD_VAR 0 4
8063: PPUSH
8064: CALL_OW 380
// un = CreateHuman ;
8068: LD_ADDR_VAR 0 15
8072: PUSH
8073: CALL_OW 44
8077: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8078: LD_VAR 0 15
8082: PPUSH
8083: LD_VAR 0 16
8087: PPUSH
8088: CALL_OW 52
// end ; i = i + 1 ;
8092: LD_ADDR_VAR 0 13
8096: PUSH
8097: LD_VAR 0 13
8101: PUSH
8102: LD_INT 1
8104: PLUS
8105: ST_TO_ADDR
// end ; if nation = 2 then
8106: LD_VAR 0 5
8110: PUSH
8111: LD_INT 2
8113: EQUAL
8114: IFFALSE 8552
// begin uc_side = side ;
8116: LD_ADDR_OWVAR 20
8120: PUSH
8121: LD_VAR 0 2
8125: ST_TO_ADDR
// uc_nation = nation ;
8126: LD_ADDR_OWVAR 21
8130: PUSH
8131: LD_VAR 0 5
8135: ST_TO_ADDR
// vc_engine = vehengine ;
8136: LD_ADDR_OWVAR 39
8140: PUSH
8141: LD_VAR 0 6
8145: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8146: LD_ADDR_OWVAR 38
8150: PUSH
8151: LD_VAR 0 7
8155: PUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_VAR 0 7
8163: PPUSH
8164: CALL_OW 12
8168: ARRAY
8169: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8170: LD_ADDR_OWVAR 40
8174: PUSH
8175: LD_VAR 0 9
8179: PUSH
8180: LD_INT 1
8182: PPUSH
8183: LD_VAR 0 9
8187: PPUSH
8188: CALL_OW 12
8192: ARRAY
8193: ST_TO_ADDR
// for j = 1 to ARWeapons do
8194: LD_ADDR_VAR 0 14
8198: PUSH
8199: DOUBLE
8200: LD_INT 1
8202: DEC
8203: ST_TO_ADDR
8204: LD_VAR 0 9
8208: PUSH
8209: FOR_TO
8210: IFFALSE 8444
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8212: LD_VAR 0 9
8216: PUSH
8217: LD_VAR 0 14
8221: ARRAY
8222: PUSH
8223: LD_INT 24
8225: EQUAL
8226: PUSH
8227: LD_VAR 0 9
8231: PUSH
8232: LD_VAR 0 14
8236: ARRAY
8237: PUSH
8238: LD_INT 22
8240: EQUAL
8241: OR
8242: PUSH
8243: LD_VAR 0 9
8247: PUSH
8248: LD_VAR 0 14
8252: ARRAY
8253: PUSH
8254: LD_INT 23
8256: EQUAL
8257: OR
8258: PUSH
8259: LD_VAR 0 9
8263: PUSH
8264: LD_VAR 0 14
8268: ARRAY
8269: PUSH
8270: LD_INT 30
8272: EQUAL
8273: OR
8274: IFFALSE 8323
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8276: LD_ADDR_VAR 0 18
8280: PUSH
8281: LD_INT 11
8283: PUSH
8284: LD_INT 12
8286: PUSH
8287: LD_INT 13
8289: PUSH
8290: LD_INT 14
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8299: LD_ADDR_OWVAR 37
8303: PUSH
8304: LD_VAR 0 18
8308: PUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_VAR 0 18
8316: PPUSH
8317: CALL_OW 12
8321: ARRAY
8322: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8323: LD_VAR 0 9
8327: PUSH
8328: LD_VAR 0 14
8332: ARRAY
8333: PUSH
8334: LD_INT 29
8336: EQUAL
8337: PUSH
8338: LD_VAR 0 9
8342: PUSH
8343: LD_VAR 0 14
8347: ARRAY
8348: PUSH
8349: LD_INT 28
8351: EQUAL
8352: OR
8353: PUSH
8354: LD_VAR 0 9
8358: PUSH
8359: LD_VAR 0 14
8363: ARRAY
8364: PUSH
8365: LD_INT 27
8367: EQUAL
8368: OR
8369: PUSH
8370: LD_VAR 0 9
8374: PUSH
8375: LD_VAR 0 14
8379: ARRAY
8380: PUSH
8381: LD_INT 26
8383: EQUAL
8384: OR
8385: PUSH
8386: LD_VAR 0 9
8390: PUSH
8391: LD_VAR 0 14
8395: ARRAY
8396: PUSH
8397: LD_INT 25
8399: EQUAL
8400: OR
8401: IFFALSE 8442
// begin arChassisTab = [ 13 , 14 ] ;
8403: LD_ADDR_VAR 0 18
8407: PUSH
8408: LD_INT 13
8410: PUSH
8411: LD_INT 14
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8418: LD_ADDR_OWVAR 37
8422: PUSH
8423: LD_VAR 0 18
8427: PUSH
8428: LD_INT 1
8430: PPUSH
8431: LD_VAR 0 18
8435: PPUSH
8436: CALL_OW 12
8440: ARRAY
8441: ST_TO_ADDR
// end ; end ;
8442: GO 8209
8444: POP
8445: POP
// veh = CreateVehicle ;
8446: LD_ADDR_VAR 0 16
8450: PUSH
8451: CALL_OW 45
8455: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8456: LD_VAR 0 16
8460: PPUSH
8461: LD_VAR 0 1
8465: PPUSH
8466: LD_INT 0
8468: PPUSH
8469: CALL_OW 49
// if vc_control = 1 then
8473: LD_OWVAR 38
8477: PUSH
8478: LD_INT 1
8480: EQUAL
8481: IFFALSE 8538
// begin hc_gallery =  ;
8483: LD_ADDR_OWVAR 33
8487: PUSH
8488: LD_STRING 
8490: ST_TO_ADDR
// hc_name =  ;
8491: LD_ADDR_OWVAR 26
8495: PUSH
8496: LD_STRING 
8498: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8499: LD_INT 0
8501: PPUSH
8502: LD_INT 3
8504: PPUSH
8505: LD_VAR 0 4
8509: PPUSH
8510: CALL_OW 380
// un = CreateHuman ;
8514: LD_ADDR_VAR 0 15
8518: PUSH
8519: CALL_OW 44
8523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8524: LD_VAR 0 15
8528: PPUSH
8529: LD_VAR 0 16
8533: PPUSH
8534: CALL_OW 52
// end ; i = i + 1 ;
8538: LD_ADDR_VAR 0 13
8542: PUSH
8543: LD_VAR 0 13
8547: PUSH
8548: LD_INT 1
8550: PLUS
8551: ST_TO_ADDR
// end ; if nation = 3 then
8552: LD_VAR 0 5
8556: PUSH
8557: LD_INT 3
8559: EQUAL
8560: IFFALSE 8966
// begin uc_side = side ;
8562: LD_ADDR_OWVAR 20
8566: PUSH
8567: LD_VAR 0 2
8571: ST_TO_ADDR
// uc_nation = nation ;
8572: LD_ADDR_OWVAR 21
8576: PUSH
8577: LD_VAR 0 5
8581: ST_TO_ADDR
// vc_engine = vehengine ;
8582: LD_ADDR_OWVAR 39
8586: PUSH
8587: LD_VAR 0 6
8591: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8592: LD_ADDR_OWVAR 38
8596: PUSH
8597: LD_VAR 0 7
8601: PUSH
8602: LD_INT 1
8604: PPUSH
8605: LD_VAR 0 7
8609: PPUSH
8610: CALL_OW 12
8614: ARRAY
8615: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
8616: LD_ADDR_OWVAR 40
8620: PUSH
8621: LD_VAR 0 8
8625: PUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 8
8633: PPUSH
8634: CALL_OW 12
8638: ARRAY
8639: ST_TO_ADDR
// for j = 1 to RuWeapons do
8640: LD_ADDR_VAR 0 14
8644: PUSH
8645: DOUBLE
8646: LD_INT 1
8648: DEC
8649: ST_TO_ADDR
8650: LD_VAR 0 8
8654: PUSH
8655: FOR_TO
8656: IFFALSE 8858
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
8658: LD_VAR 0 8
8662: PUSH
8663: LD_VAR 0 14
8667: ARRAY
8668: PUSH
8669: LD_INT 42
8671: EQUAL
8672: PUSH
8673: LD_VAR 0 8
8677: PUSH
8678: LD_VAR 0 14
8682: ARRAY
8683: PUSH
8684: LD_INT 43
8686: EQUAL
8687: OR
8688: PUSH
8689: LD_VAR 0 8
8693: PUSH
8694: LD_VAR 0 14
8698: ARRAY
8699: PUSH
8700: LD_INT 44
8702: EQUAL
8703: OR
8704: PUSH
8705: LD_VAR 0 8
8709: PUSH
8710: LD_VAR 0 14
8714: ARRAY
8715: PUSH
8716: LD_INT 45
8718: EQUAL
8719: OR
8720: PUSH
8721: LD_VAR 0 8
8725: PUSH
8726: LD_VAR 0 14
8730: ARRAY
8731: PUSH
8732: LD_INT 49
8734: EQUAL
8735: OR
8736: IFFALSE 8785
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
8738: LD_ADDR_VAR 0 17
8742: PUSH
8743: LD_INT 21
8745: PUSH
8746: LD_INT 22
8748: PUSH
8749: LD_INT 23
8751: PUSH
8752: LD_INT 24
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8761: LD_ADDR_OWVAR 37
8765: PUSH
8766: LD_VAR 0 17
8770: PUSH
8771: LD_INT 1
8773: PPUSH
8774: LD_VAR 0 17
8778: PPUSH
8779: CALL_OW 12
8783: ARRAY
8784: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
8785: LD_VAR 0 8
8789: PUSH
8790: LD_VAR 0 14
8794: ARRAY
8795: PUSH
8796: LD_INT 46
8798: EQUAL
8799: PUSH
8800: LD_VAR 0 8
8804: PUSH
8805: LD_VAR 0 14
8809: ARRAY
8810: PUSH
8811: LD_INT 47
8813: EQUAL
8814: OR
8815: IFFALSE 8856
// begin ruChassisTab = [ 23 , 24 ] ;
8817: LD_ADDR_VAR 0 17
8821: PUSH
8822: LD_INT 23
8824: PUSH
8825: LD_INT 24
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
8832: LD_ADDR_OWVAR 37
8836: PUSH
8837: LD_VAR 0 17
8841: PUSH
8842: LD_INT 1
8844: PPUSH
8845: LD_VAR 0 17
8849: PPUSH
8850: CALL_OW 12
8854: ARRAY
8855: ST_TO_ADDR
// end ; end ;
8856: GO 8655
8858: POP
8859: POP
// veh = CreateVehicle ;
8860: LD_ADDR_VAR 0 16
8864: PUSH
8865: CALL_OW 45
8869: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8870: LD_VAR 0 16
8874: PPUSH
8875: LD_VAR 0 1
8879: PPUSH
8880: LD_INT 0
8882: PPUSH
8883: CALL_OW 49
// if vc_control = 1 then
8887: LD_OWVAR 38
8891: PUSH
8892: LD_INT 1
8894: EQUAL
8895: IFFALSE 8952
// begin hc_gallery =  ;
8897: LD_ADDR_OWVAR 33
8901: PUSH
8902: LD_STRING 
8904: ST_TO_ADDR
// hc_name =  ;
8905: LD_ADDR_OWVAR 26
8909: PUSH
8910: LD_STRING 
8912: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8913: LD_INT 0
8915: PPUSH
8916: LD_INT 3
8918: PPUSH
8919: LD_VAR 0 4
8923: PPUSH
8924: CALL_OW 380
// un = CreateHuman ;
8928: LD_ADDR_VAR 0 15
8932: PUSH
8933: CALL_OW 44
8937: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8938: LD_VAR 0 15
8942: PPUSH
8943: LD_VAR 0 16
8947: PPUSH
8948: CALL_OW 52
// end ; i = i + 1 ;
8952: LD_ADDR_VAR 0 13
8956: PUSH
8957: LD_VAR 0 13
8961: PUSH
8962: LD_INT 1
8964: PLUS
8965: ST_TO_ADDR
// end ; until i = vehCount ;
8966: LD_VAR 0 13
8970: PUSH
8971: LD_VAR 0 3
8975: EQUAL
8976: IFFALSE 7586
// repeat wait ( 0 0$1 ) ;
8978: LD_INT 35
8980: PPUSH
8981: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] ] ] ) ;
8985: LD_ADDR_VAR 0 20
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: LD_VAR 0 2
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 24
9014: PUSH
9015: LD_INT 250
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 34
9027: PUSH
9028: LD_INT 25
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 34
9037: PUSH
9038: LD_INT 26
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: LD_INT 34
9047: PUSH
9048: LD_INT 27
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PUSH
9055: LD_INT 34
9057: PUSH
9058: LD_INT 28
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 34
9067: PUSH
9068: LD_INT 29
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: PPUSH
9089: CALL_OW 69
9093: ST_TO_ADDR
// if vehicleOK_list > 0 then
9094: LD_VAR 0 20
9098: PUSH
9099: LD_INT 0
9101: GREATER
9102: IFFALSE 9293
// begin for i in vehicleOK_list do
9104: LD_ADDR_VAR 0 13
9108: PUSH
9109: LD_VAR 0 20
9113: PUSH
9114: FOR_IN
9115: IFFALSE 9291
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9117: LD_ADDR_VAR 0 21
9121: PUSH
9122: LD_INT 22
9124: PUSH
9125: LD_VAR 0 11
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: PPUSH
9139: LD_VAR 0 13
9143: PPUSH
9144: CALL_OW 74
9148: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9149: LD_ADDR_VAR 0 22
9153: PUSH
9154: LD_INT 22
9156: PUSH
9157: LD_VAR 0 11
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 2
9168: PUSH
9169: LD_INT 59
9171: PUSH
9172: EMPTY
9173: LIST
9174: PUSH
9175: LD_INT 21
9177: PUSH
9178: LD_INT 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 21
9187: PUSH
9188: LD_INT 2
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: PPUSH
9208: CALL_OW 69
9212: PPUSH
9213: LD_VAR 0 13
9217: PPUSH
9218: CALL_OW 74
9222: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9223: LD_VAR 0 13
9227: PPUSH
9228: LD_VAR 0 21
9232: PPUSH
9233: CALL_OW 296
9237: PUSH
9238: LD_INT 8
9240: PLUS
9241: PUSH
9242: LD_VAR 0 13
9246: PPUSH
9247: LD_VAR 0 22
9251: PPUSH
9252: CALL_OW 296
9256: LESS
9257: IFFALSE 9275
// begin ComAttackUnit ( i , target1 ) ;
9259: LD_VAR 0 13
9263: PPUSH
9264: LD_VAR 0 21
9268: PPUSH
9269: CALL_OW 115
// end else
9273: GO 9289
// begin ComAttackUnit ( i , target2 ) ;
9275: LD_VAR 0 13
9279: PPUSH
9280: LD_VAR 0 22
9284: PPUSH
9285: CALL_OW 115
// end ; end ;
9289: GO 9114
9291: POP
9292: POP
// end ; until vehicleOK_list = 0 ;
9293: LD_VAR 0 20
9297: PUSH
9298: LD_INT 0
9300: EQUAL
9301: IFFALSE 8978
// end ;
9303: LD_VAR 0 12
9307: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9308: LD_INT 0
9310: PPUSH
9311: PPUSH
9312: PPUSH
9313: PPUSH
9314: PPUSH
9315: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9316: LD_ADDR_VAR 0 6
9320: PUSH
9321: LD_INT 22
9323: PUSH
9324: LD_VAR 0 1
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 34
9335: PUSH
9336: LD_INT 29
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 69
9351: ST_TO_ADDR
// if veh_list = 0 then
9352: LD_VAR 0 6
9356: PUSH
9357: LD_INT 0
9359: EQUAL
9360: IFFALSE 9364
// exit ;
9362: GO 9569
// if veh_list > 0 then
9364: LD_VAR 0 6
9368: PUSH
9369: LD_INT 0
9371: GREATER
9372: IFFALSE 9569
// begin for i in veh_List do
9374: LD_ADDR_VAR 0 4
9378: PUSH
9379: LD_VAR 0 6
9383: PUSH
9384: FOR_IN
9385: IFFALSE 9567
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9387: LD_ADDR_VAR 0 7
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_VAR 0 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 24
9406: PUSH
9407: LD_INT 250
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 59
9419: PUSH
9420: EMPTY
9421: LIST
9422: PUSH
9423: LD_INT 21
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 21
9435: PUSH
9436: LD_INT 2
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: PPUSH
9457: CALL_OW 69
9461: PPUSH
9462: LD_VAR 0 4
9466: PPUSH
9467: CALL_OW 74
9471: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9472: LD_VAR 0 4
9476: PPUSH
9477: LD_VAR 0 7
9481: PPUSH
9482: CALL_OW 115
// if not HasTask ( i ) then
9486: LD_VAR 0 4
9490: PPUSH
9491: CALL_OW 314
9495: NOT
9496: IFFALSE 9565
// begin wait ( 0 0$0.1 ) ;
9498: LD_INT 4
9500: PPUSH
9501: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9505: LD_ADDR_VAR 0 8
9509: PUSH
9510: LD_INT 22
9512: PUSH
9513: LD_VAR 0 2
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 24
9524: PUSH
9525: LD_INT 250
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PPUSH
9536: CALL_OW 69
9540: PPUSH
9541: LD_VAR 0 4
9545: PPUSH
9546: CALL_OW 74
9550: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
9551: LD_VAR 0 4
9555: PPUSH
9556: LD_VAR 0 8
9560: PPUSH
9561: CALL_OW 115
// end ; end ;
9565: GO 9384
9567: POP
9568: POP
// end ; end ; end_of_file
9569: LD_VAR 0 3
9573: RET
// every 0 0$1 do
9574: GO 9576
9576: DISABLE
// begin enable ;
9577: ENABLE
// IntBazooka ( 7 , 1 ) ;
9578: LD_INT 7
9580: PPUSH
9581: LD_INT 1
9583: PPUSH
9584: CALL 6173 0 2
// AttackSelfBomb ( 8 , 1 ) ;
9588: LD_INT 8
9590: PPUSH
9591: LD_INT 1
9593: PPUSH
9594: CALL 9308 0 2
// end ; end_of_file
9598: END
// every 0 0$1 trigger eventVar4 = 1 do
9599: LD_EXP 37
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 10401
9609: GO 9611
9611: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
9612: LD_EXP 1
9616: PPUSH
9617: LD_STRING D9b-JMM-1
9619: PPUSH
9620: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
9624: LD_EXP 15
9628: PPUSH
9629: LD_STRING D9b-Pow-1
9631: PPUSH
9632: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
9636: LD_EXP 1
9640: PPUSH
9641: LD_STRING D9b-JMM-2
9643: PPUSH
9644: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
9648: LD_EXP 15
9652: PPUSH
9653: LD_STRING D9b-Pow-2
9655: PPUSH
9656: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
9660: LD_EXP 1
9664: PPUSH
9665: LD_STRING D9b-JMM-3
9667: PPUSH
9668: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D9b-Pow-3
9679: PPUSH
9680: CALL_OW 94
// if burlakStatus = 1 then
9684: LD_EXP 26
9688: PUSH
9689: LD_INT 1
9691: EQUAL
9692: IFFALSE 9706
// begin AddMedal ( Burlak , 1 ) ;
9694: LD_STRING Burlak
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 101
// end else
9704: GO 9717
// begin AddMedal ( Burlak , - 1 ) ;
9706: LD_STRING Burlak
9708: PPUSH
9709: LD_INT 1
9711: NEG
9712: PPUSH
9713: CALL_OW 101
// end ; if IsOk ( Stevens ) then
9717: LD_EXP 2
9721: PPUSH
9722: CALL_OW 302
9726: IFFALSE 9740
// begin AddMedal ( Stevens , 1 ) ;
9728: LD_STRING Stevens
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: CALL_OW 101
// end else
9738: GO 9751
// begin AddMedal ( Stevens , - 1 ) ;
9740: LD_STRING Stevens
9742: PPUSH
9743: LD_INT 1
9745: NEG
9746: PPUSH
9747: CALL_OW 101
// end ; if radarOnSpot = 1 then
9751: LD_EXP 28
9755: PUSH
9756: LD_INT 1
9758: EQUAL
9759: IFFALSE 9773
// begin AddMedal ( Observation , 1 ) ;
9761: LD_STRING Observation
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 101
// end else
9771: GO 9784
// begin AddMedal ( Observation , - 1 ) ;
9773: LD_STRING Observation
9775: PPUSH
9776: LD_INT 1
9778: NEG
9779: PPUSH
9780: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
9784: LD_STRING MAIN
9786: PPUSH
9787: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
9791: LD_EXP 26
9795: PPUSH
9796: LD_STRING 13_BurlakStatus_1
9798: PPUSH
9799: CALL_OW 39
// if IsOk ( Stevens ) then
9803: LD_EXP 2
9807: PPUSH
9808: CALL_OW 302
9812: IFFALSE 9826
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
9814: LD_INT 1
9816: PPUSH
9817: LD_STRING 13_StevensStatus_1
9819: PPUSH
9820: CALL_OW 39
9824: GO 9836
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
9826: LD_INT 0
9828: PPUSH
9829: LD_STRING 13_StevensStatus_1
9831: PPUSH
9832: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
9836: LD_INT 22
9838: PUSH
9839: LD_INT 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 21
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 2
9858: PUSH
9859: LD_INT 25
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 25
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 25
9881: PUSH
9882: LD_INT 3
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 25
9891: PUSH
9892: LD_INT 4
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 25
9901: PUSH
9902: LD_INT 5
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 8
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PPUSH
9933: CALL_OW 69
9937: PPUSH
9938: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
9942: LD_EXP 1
9946: PPUSH
9947: LD_EXP 33
9951: PUSH
9952: LD_STRING JMM
9954: STR
9955: PPUSH
9956: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
9960: LD_EXP 8
9964: PPUSH
9965: LD_EXP 33
9969: PUSH
9970: LD_STRING Brown
9972: STR
9973: PPUSH
9974: CALL 6481 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
9978: LD_EXP 4
9982: PPUSH
9983: LD_EXP 33
9987: PUSH
9988: LD_STRING Donaldson
9990: STR
9991: PPUSH
9992: CALL 6481 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
9996: LD_EXP 5
10000: PPUSH
10001: LD_EXP 33
10005: PUSH
10006: LD_STRING Bobby
10008: STR
10009: PPUSH
10010: CALL 6481 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10014: LD_EXP 6
10018: PPUSH
10019: LD_EXP 33
10023: PUSH
10024: LD_STRING Cyrus
10026: STR
10027: PPUSH
10028: CALL 6481 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10032: LD_EXP 3
10036: PPUSH
10037: LD_EXP 33
10041: PUSH
10042: LD_STRING Lisa
10044: STR
10045: PPUSH
10046: CALL 6481 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10050: LD_EXP 13
10054: PPUSH
10055: LD_EXP 33
10059: PUSH
10060: LD_STRING Frank
10062: STR
10063: PPUSH
10064: CALL 6481 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10068: LD_EXP 14
10072: PPUSH
10073: LD_EXP 33
10077: PUSH
10078: LD_STRING Kikuchi
10080: STR
10081: PPUSH
10082: CALL 6481 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10086: LD_EXP 10
10090: PPUSH
10091: LD_EXP 33
10095: PUSH
10096: LD_STRING Houten
10098: STR
10099: PPUSH
10100: CALL 6481 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10104: LD_EXP 12
10108: PPUSH
10109: LD_EXP 33
10113: PUSH
10114: LD_STRING Gary
10116: STR
10117: PPUSH
10118: CALL 6481 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10122: LD_EXP 11
10126: PPUSH
10127: LD_EXP 33
10131: PUSH
10132: LD_STRING Cornell
10134: STR
10135: PPUSH
10136: CALL 6481 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10140: LD_EXP 7
10144: PPUSH
10145: LD_EXP 33
10149: PUSH
10150: LD_STRING Denis
10152: STR
10153: PPUSH
10154: CALL 6481 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10158: LD_EXP 9
10162: PPUSH
10163: LD_EXP 33
10167: PUSH
10168: LD_STRING Gladstone
10170: STR
10171: PPUSH
10172: CALL 6481 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10176: LD_EXP 2
10180: PPUSH
10181: LD_EXP 33
10185: PUSH
10186: LD_STRING Stevens
10188: STR
10189: PPUSH
10190: CALL 6481 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
10194: LD_INT 50
10196: PUSH
10197: EMPTY
10198: LIST
10199: PUSH
10200: LD_INT 22
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 21
10212: PUSH
10213: LD_INT 1
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 25
10225: PUSH
10226: LD_INT 1
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 25
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 25
10245: PUSH
10246: LD_INT 3
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 25
10255: PUSH
10256: LD_INT 4
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 25
10265: PUSH
10266: LD_INT 5
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 8
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: PUSH
10303: LD_EXP 1
10307: PUSH
10308: LD_EXP 8
10312: PUSH
10313: LD_EXP 4
10317: PUSH
10318: LD_EXP 5
10322: PUSH
10323: LD_EXP 6
10327: PUSH
10328: LD_EXP 3
10332: PUSH
10333: LD_EXP 13
10337: PUSH
10338: LD_EXP 9
10342: PUSH
10343: LD_EXP 14
10347: PUSH
10348: LD_EXP 7
10352: PUSH
10353: LD_EXP 10
10357: PUSH
10358: LD_EXP 12
10362: PUSH
10363: LD_EXP 11
10367: PUSH
10368: LD_EXP 2
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: DIFF
10389: PPUSH
10390: LD_STRING 13_other_survivors
10392: PPUSH
10393: CALL_OW 38
// YouWin ;
10397: CALL_OW 103
// end ; end_of_file
10401: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
10402: LD_EXP 30
10406: PUSH
10407: LD_INT 2
10409: EQUAL
10410: IFFALSE 10546
10412: GO 10414
10414: DISABLE
10415: LD_INT 0
10417: PPUSH
10418: PPUSH
10419: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10420: LD_ADDR_VAR 0 2
10424: PUSH
10425: LD_INT 22
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 3
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PUSH
10445: LD_INT 2
10447: PUSH
10448: LD_INT 30
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 30
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: ST_TO_ADDR
// for i in tmp do
10483: LD_ADDR_VAR 0 1
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10527
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
10496: LD_ADDR_VAR 0 3
10500: PUSH
10501: LD_VAR 0 3
10505: PUSH
10506: LD_VAR 0 1
10510: PPUSH
10511: CALL_OW 274
10515: PPUSH
10516: LD_INT 3
10518: PPUSH
10519: CALL_OW 275
10523: PLUS
10524: ST_TO_ADDR
10525: GO 10493
10527: POP
10528: POP
// if yourSiberite < 79 then
10529: LD_VAR 0 3
10533: PUSH
10534: LD_INT 79
10536: LESS
10537: IFFALSE 10546
// YouLost ( siberite ) ;
10539: LD_STRING siberite
10541: PPUSH
10542: CALL_OW 104
// end ;
10546: PPOPN 3
10548: END
// every 0 0$1 trigger IsDead ( JMM ) do
10549: LD_EXP 1
10553: PPUSH
10554: CALL_OW 301
10558: IFFALSE 10570
10560: GO 10562
10562: DISABLE
// YouLost ( JMM ) ; end_of_file
10563: LD_STRING JMM
10565: PPUSH
10566: CALL_OW 104
10570: END
// every 15 15$0 + 5 5$0 do
10571: GO 10573
10573: DISABLE
// begin enable ;
10574: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 2 , 4 ) , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , 3 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
10575: LD_INT 8
10577: PPUSH
10578: LD_INT 2
10580: PPUSH
10581: LD_INT 2
10583: PPUSH
10584: LD_INT 4
10586: PPUSH
10587: CALL_OW 12
10591: PPUSH
10592: LD_INT 0
10594: PPUSH
10595: LD_INT 0
10597: PPUSH
10598: LD_INT 1
10600: PUSH
10601: LD_INT 2
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_OWVAR 67
10616: ARRAY
10617: PPUSH
10618: LD_INT 3
10620: PPUSH
10621: LD_INT 10
10623: PPUSH
10624: LD_INT 8
10626: PUSH
10627: LD_INT 9
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 1
10636: PPUSH
10637: LD_INT 2
10639: PPUSH
10640: CALL_OW 12
10644: ARRAY
10645: PPUSH
10646: LD_INT 12
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL 6532 0 11
// end ;
10656: END
// every 15 15$0 + 5 5$0 do
10657: GO 10659
10659: DISABLE
// begin enable ;
10660: ENABLE
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 1 , 3 ) , rand ( 2 , 4 ) , rand ( 3 , 5 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 1 , 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
10661: LD_INT 8
10663: PUSH
10664: LD_INT 9
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 1
10673: PPUSH
10674: LD_INT 2
10676: PPUSH
10677: CALL_OW 12
10681: ARRAY
10682: PPUSH
10683: LD_INT 8
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: LD_INT 3
10691: PPUSH
10692: CALL_OW 12
10696: PUSH
10697: LD_INT 2
10699: PPUSH
10700: LD_INT 4
10702: PPUSH
10703: CALL_OW 12
10707: PUSH
10708: LD_INT 3
10710: PPUSH
10711: LD_INT 5
10713: PPUSH
10714: CALL_OW 12
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: LD_OWVAR 67
10728: ARRAY
10729: PPUSH
10730: LD_INT 10
10732: PPUSH
10733: LD_INT 2
10735: PPUSH
10736: LD_INT 3
10738: PPUSH
10739: LD_INT 1
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: PPUSH
10753: EMPTY
10754: PPUSH
10755: LD_INT 25
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 27
10763: PUSH
10764: LD_INT 28
10766: PUSH
10767: LD_INT 29
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PPUSH
10777: EMPTY
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL 7552 0 11
// end ; end_of_file
10786: END
// every 1 1$0 do
10787: GO 10789
10789: DISABLE
// begin enable ;
10790: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10791: LD_INT 3
10793: PPUSH
10794: LD_INT 5
10796: PPUSH
10797: CALL_OW 12
10801: PPUSH
10802: LD_INT 13
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 55
// end ;
10812: END
