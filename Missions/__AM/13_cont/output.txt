// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 41
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 36
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 42
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1163 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1067 0 0
// PrepareDifficulty ;
 167: CALL 6193 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 42
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
 494: PPUSH
// uc_side = 1 ;
 495: LD_ADDR_OWVAR 20
 499: PUSH
 500: LD_INT 1
 502: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 503: LD_ADDR_EXP 1
 507: PUSH
 508: LD_STRING 13c_JMM
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: CALL 5877 0 2
 518: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 519: LD_ADDR_EXP 2
 523: PUSH
 524: LD_STRING 13c_Stevens
 526: PPUSH
 527: LD_INT 1
 529: PPUSH
 530: CALL 5877 0 2
 534: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING 13c_Lisa
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL 5877 0 2
 550: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 551: LD_ADDR_EXP 4
 555: PUSH
 556: LD_STRING 13c_Donaldson
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: CALL 5877 0 2
 566: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 567: LD_ADDR_EXP 5
 571: PUSH
 572: LD_STRING 13c_Bobby
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL 5877 0 2
 582: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 583: LD_ADDR_EXP 6
 587: PUSH
 588: LD_STRING 13c_Cyrus
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 5877 0 2
 598: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_STRING 13c_Denis
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 5877 0 2
 614: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 615: LD_ADDR_EXP 8
 619: PUSH
 620: LD_STRING 13c_Brown
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 5877 0 2
 630: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 631: LD_ADDR_EXP 9
 635: PUSH
 636: LD_STRING 13c_Gladstone
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL 5877 0 2
 646: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 647: LD_ADDR_EXP 10
 651: PUSH
 652: LD_STRING 13c_Houten
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 5877 0 2
 662: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 663: LD_ADDR_EXP 11
 667: PUSH
 668: LD_STRING 13c_Cornel
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 5877 0 2
 678: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_STRING 13c_Gary
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL 5877 0 2
 694: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 695: LD_ADDR_EXP 13
 699: PUSH
 700: LD_STRING 13c_Frank
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL 5877 0 2
 710: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 711: LD_ADDR_EXP 14
 715: PUSH
 716: LD_STRING 13c_Kikuchi
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL 5877 0 2
 726: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 727: LD_ADDR_EXP 15
 731: PUSH
 732: LD_STRING Powell
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 5877 0 2
 742: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: LD_EXP 1
 752: PUSH
 753: LD_EXP 2
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: LD_EXP 4
 767: PUSH
 768: LD_EXP 5
 772: PUSH
 773: LD_EXP 6
 777: PUSH
 778: LD_EXP 7
 782: PUSH
 783: LD_EXP 8
 787: PUSH
 788: LD_EXP 9
 792: PUSH
 793: LD_EXP 10
 797: PUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_EXP 12
 807: PUSH
 808: LD_EXP 13
 812: PUSH
 813: LD_EXP 14
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 834: LD_ADDR_VAR 0 3
 838: PUSH
 839: LD_INT 22
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 33
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 2
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// for i = tmp downto 1 do
 879: LD_ADDR_VAR 0 4
 883: PUSH
 884: DOUBLE
 885: LD_VAR 0 2
 889: INC
 890: ST_TO_ADDR
 891: LD_INT 1
 893: PUSH
 894: FOR_DOWNTO
 895: IFFALSE 932
// if not tmp [ i ] then
 897: LD_VAR 0 2
 901: PUSH
 902: LD_VAR 0 4
 906: ARRAY
 907: NOT
 908: IFFALSE 930
// tmp := Delete ( tmp , i ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_VAR 0 4
 924: PPUSH
 925: CALL_OW 3
 929: ST_TO_ADDR
 930: GO 894
 932: POP
 933: POP
// for i = 1 to tmp do
 934: LD_ADDR_VAR 0 4
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_VAR 0 2
 948: PUSH
 949: FOR_TO
 950: IFFALSE 980
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 952: LD_VAR 0 2
 956: PUSH
 957: LD_VAR 0 4
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 3
 967: PUSH
 968: LD_VAR 0 4
 972: ARRAY
 973: PPUSH
 974: CALL_OW 52
 978: GO 949
 980: POP
 981: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
 982: LD_INT 22
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 25
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PUSH
1011: LD_INT 0
1013: EQUAL
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 34
1027: PUSH
1028: LD_INT 13
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: PUSH
1044: LD_INT 0
1046: EQUAL
1047: AND
1048: IFFALSE 1062
// SetClass ( JMM , 2 ) ;
1050: LD_EXP 1
1054: PPUSH
1055: LD_INT 2
1057: PPUSH
1058: CALL_OW 336
// end ;
1062: LD_VAR 0 1
1066: RET
// export function PrepareAmericansRandom ; var i ; begin
1067: LD_INT 0
1069: PPUSH
1070: PPUSH
// uc_side = 1 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 1
1078: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1079: LD_ADDR_EXP 16
1083: PUSH
1084: LD_STRING 13c_others
1086: PPUSH
1087: CALL_OW 31
1091: ST_TO_ADDR
// for i in others13 do
1092: LD_ADDR_VAR 0 2
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: FOR_IN
1103: IFFALSE 1156
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1105: LD_VAR 0 2
1109: PPUSH
1110: LD_INT 22
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 21
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 58
1132: PUSH
1133: EMPTY
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 52
1154: GO 1102
1156: POP
1157: POP
// end ;
1158: LD_VAR 0 1
1162: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1163: LD_INT 0
1165: PPUSH
1166: PPUSH
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_STRING 13_VehiclesIn13_1
1178: PPUSH
1179: EMPTY
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1186: LD_ADDR_EXP 24
1190: PUSH
1191: LD_STRING 13_ResourcesInCargo13_1
1193: PPUSH
1194: EMPTY
1195: PPUSH
1196: CALL_OW 30
1200: ST_TO_ADDR
// cargoList = [ ] ;
1201: LD_ADDR_VAR 0 6
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// uc_side = 1 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if vehicles > 0 then
1216: LD_VAR 0 5
1220: PUSH
1221: LD_INT 0
1223: GREATER
1224: IFFALSE 1579
// begin for i := 1 to vehicles do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_VAR 0 5
1240: PUSH
1241: FOR_TO
1242: IFFALSE 1391
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_VAR 0 5
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1264: LD_ADDR_OWVAR 37
1268: PUSH
1269: LD_VAR 0 5
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 2
1282: ARRAY
1283: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1284: LD_ADDR_OWVAR 39
1288: PUSH
1289: LD_VAR 0 5
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 3
1302: ARRAY
1303: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1304: LD_ADDR_OWVAR 38
1308: PUSH
1309: LD_VAR 0 5
1313: PUSH
1314: LD_VAR 0 2
1318: ARRAY
1319: PUSH
1320: LD_INT 4
1322: ARRAY
1323: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1324: LD_ADDR_OWVAR 40
1328: PUSH
1329: LD_VAR 0 5
1333: PUSH
1334: LD_VAR 0 2
1338: ARRAY
1339: PUSH
1340: LD_INT 5
1342: ARRAY
1343: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1344: LD_ADDR_OWVAR 41
1348: PUSH
1349: LD_INT 40
1351: ST_TO_ADDR
// veh = CreateVehicle ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: CALL_OW 45
1361: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1362: LD_VAR 0 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 2
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// end ;
1389: GO 1241
1391: POP
1392: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 34
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if cargoList > 0 then
1438: LD_VAR 0 6
1442: PUSH
1443: LD_INT 0
1445: GREATER
1446: IFFALSE 1579
// for i = 1 to cargoList do
1448: LD_ADDR_VAR 0 2
1452: PUSH
1453: DOUBLE
1454: LD_INT 1
1456: DEC
1457: ST_TO_ADDR
1458: LD_VAR 0 6
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1577
// begin if resources > 0 then
1466: LD_EXP 24
1470: PUSH
1471: LD_INT 0
1473: GREATER
1474: IFFALSE 1575
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1476: LD_VAR 0 6
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PPUSH
1487: LD_INT 1
1489: PPUSH
1490: LD_EXP 24
1494: PUSH
1495: LD_VAR 0 2
1499: ARRAY
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1509: LD_VAR 0 6
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PPUSH
1520: LD_INT 2
1522: PPUSH
1523: LD_EXP 24
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 2
1536: ARRAY
1537: PPUSH
1538: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1542: LD_VAR 0 6
1546: PUSH
1547: LD_VAR 0 2
1551: ARRAY
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_EXP 24
1560: PUSH
1561: LD_VAR 0 2
1565: ARRAY
1566: PUSH
1567: LD_INT 3
1569: ARRAY
1570: PPUSH
1571: CALL_OW 291
// end ; end ;
1575: GO 1463
1577: POP
1578: POP
// end ; end ;
1579: LD_VAR 0 1
1583: RET
// export function PowellSupport ; var i , veh , un ; begin
1584: LD_INT 0
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
// for i = 1 to 3 do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_INT 3
1602: PUSH
1603: FOR_TO
1604: IFFALSE 1805
// begin uc_nation = 1 ;
1606: LD_ADDR_OWVAR 21
1610: PUSH
1611: LD_INT 1
1613: ST_TO_ADDR
// uc_side = 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// vc_engine = 3 ;
1622: LD_ADDR_OWVAR 39
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// vc_control = 1 ;
1630: LD_ADDR_OWVAR 38
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1638: LD_ADDR_OWVAR 40
1642: PUSH
1643: LD_INT 9
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: LD_INT 7
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 1
1667: PPUSH
1668: LD_INT 5
1670: PPUSH
1671: CALL_OW 12
1675: ARRAY
1676: ST_TO_ADDR
// if vc_weapon = 6 then
1677: LD_OWVAR 40
1681: PUSH
1682: LD_INT 6
1684: EQUAL
1685: IFFALSE 1697
// vc_chassis = 4 else
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
1695: GO 1705
// vc_chassis = 3 ;
1697: LD_ADDR_OWVAR 37
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// veh = CreateVehicle ;
1705: LD_ADDR_VAR 0 3
1709: PUSH
1710: CALL_OW 45
1714: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 49
// SetDir ( veh , 1 ) ;
1730: LD_VAR 0 3
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: CALL_OW 233
// hc_gallery =  ;
1742: LD_ADDR_OWVAR 33
1746: PUSH
1747: LD_STRING 
1749: ST_TO_ADDR
// hc_name =  ;
1750: LD_ADDR_OWVAR 26
1754: PUSH
1755: LD_STRING 
1757: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 3
1763: PPUSH
1764: LD_INT 7
1766: PPUSH
1767: LD_INT 10
1769: PPUSH
1770: CALL_OW 12
1774: PPUSH
1775: CALL_OW 380
// un = CreateHuman ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1789: LD_VAR 0 4
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL_OW 52
// end ;
1803: GO 1603
1805: POP
1806: POP
// end ; end_of_file
1807: LD_VAR 0 1
1811: RET
// export function PrepareBurlak ; begin
1812: LD_INT 0
1814: PPUSH
// uc_side = 7 ;
1815: LD_ADDR_OWVAR 20
1819: PUSH
1820: LD_INT 7
1822: ST_TO_ADDR
// uc_nation = 3 ;
1823: LD_ADDR_OWVAR 21
1827: PUSH
1828: LD_INT 3
1830: ST_TO_ADDR
// vc_engine = 3 ;
1831: LD_ADDR_OWVAR 39
1835: PUSH
1836: LD_INT 3
1838: ST_TO_ADDR
// vc_control = 1 ;
1839: LD_ADDR_OWVAR 38
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// vc_weapon = 46 ;
1847: LD_ADDR_OWVAR 40
1851: PUSH
1852: LD_INT 46
1854: ST_TO_ADDR
// vc_chassis = 24 ;
1855: LD_ADDR_OWVAR 37
1859: PUSH
1860: LD_INT 24
1862: ST_TO_ADDR
// Masha = CreateVehicle ;
1863: LD_ADDR_EXP 18
1867: PUSH
1868: CALL_OW 45
1872: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1888: LD_EXP 18
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING Burlak
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL 5877 0 2
1915: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1916: LD_EXP 17
1920: PPUSH
1921: LD_EXP 18
1925: PPUSH
1926: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1930: LD_EXP 18
1934: PPUSH
1935: LD_INT 107
1937: PPUSH
1938: LD_INT 118
1940: PPUSH
1941: CALL_OW 114
// spawnBurlak = 1 ;
1945: LD_ADDR_EXP 27
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// end ;
1953: LD_VAR 0 1
1957: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
1958: LD_INT 0
1960: PPUSH
1961: PPUSH
1962: PPUSH
1963: PPUSH
// uc_side = 7 ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_INT 7
1971: ST_TO_ADDR
// uc_nation = 3 ;
1972: LD_ADDR_OWVAR 21
1976: PUSH
1977: LD_INT 3
1979: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1980: LD_ADDR_EXP 19
1984: PUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 5877 0 2
1995: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
1996: LD_ADDR_EXP 20
2000: PUSH
2001: LD_STRING Titov
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 5877 0 2
2011: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2012: LD_ADDR_EXP 21
2016: PUSH
2017: LD_STRING Xavier2
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: CALL 5877 0 2
2027: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2028: LD_ADDR_EXP 22
2032: PUSH
2033: LD_STRING Belkov
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL 5877 0 2
2043: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2044: LD_ADDR_EXP 23
2048: PUSH
2049: LD_STRING Lipshchin
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL 5877 0 2
2059: ST_TO_ADDR
// for i = 1 to 5 do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: DOUBLE
2066: LD_INT 1
2068: DEC
2069: ST_TO_ADDR
2070: LD_INT 5
2072: PUSH
2073: FOR_TO
2074: IFFALSE 2162
// begin vc_engine = 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control = 1 ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 1
2091: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 43
2099: PUSH
2100: LD_INT 44
2102: PUSH
2103: LD_INT 45
2105: PUSH
2106: LD_INT 49
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// vc_chassis = 22 ;
2127: LD_ADDR_OWVAR 37
2131: PUSH
2132: LD_INT 22
2134: ST_TO_ADDR
// veh = CreateVehicle ;
2135: LD_ADDR_VAR 0 3
2139: PUSH
2140: CALL_OW 45
2144: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 3
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// end ;
2160: GO 2073
2162: POP
2163: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2164: LD_ADDR_VAR 0 4
2168: PUSH
2169: LD_INT 22
2171: PUSH
2172: LD_INT 7
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 2
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 58
2191: PUSH
2192: EMPTY
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PPUSH
2200: CALL_OW 69
2204: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2205: LD_EXP 19
2209: PPUSH
2210: LD_VAR 0 4
2214: PUSH
2215: LD_INT 1
2217: ARRAY
2218: PPUSH
2219: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2223: LD_EXP 20
2227: PPUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 2
2235: ARRAY
2236: PPUSH
2237: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2241: LD_EXP 21
2245: PPUSH
2246: LD_VAR 0 4
2250: PUSH
2251: LD_INT 3
2253: ARRAY
2254: PPUSH
2255: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2259: LD_EXP 22
2263: PPUSH
2264: LD_VAR 0 4
2268: PUSH
2269: LD_INT 4
2271: ARRAY
2272: PPUSH
2273: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2277: LD_EXP 23
2281: PPUSH
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 5
2289: ARRAY
2290: PPUSH
2291: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2295: LD_EXP 19
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2307: LD_EXP 20
2311: PUSH
2312: LD_EXP 23
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: LD_INT 9
2323: PPUSH
2324: CALL_OW 336
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 7
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 21
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PPUSH
2357: CALL_OW 69
2361: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2362: LD_VAR 0 4
2366: PPUSH
2367: LD_INT 107
2369: PPUSH
2370: LD_INT 118
2372: PPUSH
2373: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2377: LD_INT 35
2379: PPUSH
2380: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2384: LD_VAR 0 4
2388: PPUSH
2389: LD_INT 34
2391: PUSH
2392: LD_INT 49
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PPUSH
2404: LD_EXP 18
2408: PPUSH
2409: CALL_OW 112
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2413: LD_VAR 0 4
2417: PPUSH
2418: LD_INT 34
2420: PUSH
2421: LD_INT 49
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 72
2432: PUSH
2433: LD_INT 0
2435: EQUAL
2436: PUSH
2437: LD_EXP 18
2441: PPUSH
2442: CALL_OW 303
2446: OR
2447: IFFALSE 2377
// repeat wait ( 0 0$1 ) ;
2449: LD_INT 35
2451: PPUSH
2452: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2456: LD_ADDR_VAR 0 4
2460: PUSH
2461: LD_INT 22
2463: PUSH
2464: LD_INT 7
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PPUSH
2471: CALL_OW 69
2475: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2476: LD_VAR 0 4
2480: PPUSH
2481: LD_INT 107
2483: PPUSH
2484: LD_INT 118
2486: PPUSH
2487: CALL_OW 114
// until not tmp ;
2491: LD_VAR 0 4
2495: NOT
2496: IFFALSE 2449
// end ; end_of_file
2498: LD_VAR 0 1
2502: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2503: LD_INT 22
2505: PUSH
2506: LD_INT 8
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: LD_INT 33
2515: PUSH
2516: LD_INT 2
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PPUSH
2527: CALL_OW 69
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_INT 22
2538: PUSH
2539: LD_INT 8
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 34
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: LD_INT 0
2567: EQUAL
2568: AND
2569: IFFALSE 2792
2571: GO 2573
2573: DISABLE
2574: LD_INT 0
2576: PPUSH
// begin enable ;
2577: ENABLE
// uc_side = 8 ;
2578: LD_ADDR_OWVAR 20
2582: PUSH
2583: LD_INT 8
2585: ST_TO_ADDR
// uc_nation = 2 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// vc_engine = 3 ;
2594: LD_ADDR_OWVAR 39
2598: PUSH
2599: LD_INT 3
2601: ST_TO_ADDR
// vc_control = 1 ;
2602: LD_ADDR_OWVAR 38
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// vc_weapon = 31 ;
2610: LD_ADDR_OWVAR 40
2614: PUSH
2615: LD_INT 31
2617: ST_TO_ADDR
// vc_chassis = 14 ;
2618: LD_ADDR_OWVAR 37
2622: PUSH
2623: LD_INT 14
2625: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2626: LD_ADDR_EXP 34
2630: PUSH
2631: CALL_OW 45
2635: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2636: LD_EXP 34
2640: PPUSH
2641: LD_INT 8
2643: PUSH
2644: LD_INT 9
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 12
2661: ARRAY
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// hc_name =  ;
2670: LD_ADDR_OWVAR 26
2674: PUSH
2675: LD_STRING 
2677: ST_TO_ADDR
// hc_gallery =  ;
2678: LD_ADDR_OWVAR 33
2682: PUSH
2683: LD_STRING 
2685: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2686: LD_INT 0
2688: PPUSH
2689: LD_INT 3
2691: PPUSH
2692: LD_INT 10
2694: PPUSH
2695: CALL_OW 380
// arDriver = CreateHuman ;
2699: LD_ADDR_EXP 35
2703: PUSH
2704: CALL_OW 44
2708: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
2709: LD_EXP 35
2713: PPUSH
2714: LD_EXP 34
2718: PPUSH
2719: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2723: LD_ADDR_VAR 0 1
2727: PUSH
2728: LD_INT 22
2730: PUSH
2731: LD_INT 8
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 33
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 3
2750: PUSH
2751: LD_INT 61
2753: PUSH
2754: EMPTY
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 69
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2790
// ComLinkTo ( i , arDriver ) ;
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_EXP 35
2783: PPUSH
2784: CALL_OW 135
2788: GO 2771
2790: POP
2791: POP
// end ;
2792: PPOPN 1
2794: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) > 0 do var i ;
2795: LD_INT 22
2797: PUSH
2798: LD_INT 8
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 33
2807: PUSH
2808: LD_INT 2
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: LD_INT 61
2820: PUSH
2821: EMPTY
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 69
2837: PUSH
2838: LD_INT 0
2840: GREATER
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 8
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 34
2854: PUSH
2855: LD_INT 31
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: PUSH
2871: LD_INT 0
2873: GREATER
2874: AND
2875: IFFALSE 2953
2877: GO 2879
2879: DISABLE
2880: LD_INT 0
2882: PPUSH
// begin enable ;
2883: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2884: LD_ADDR_VAR 0 1
2888: PUSH
2889: LD_INT 22
2891: PUSH
2892: LD_INT 8
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 33
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: LD_INT 61
2914: PUSH
2915: EMPTY
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: PUSH
2932: FOR_IN
2933: IFFALSE 2951
// ComLinkTo ( i , arDriver ) ;
2935: LD_VAR 0 1
2939: PPUSH
2940: LD_EXP 35
2944: PPUSH
2945: CALL_OW 135
2949: GO 2932
2951: POP
2952: POP
// end ;
2953: PPOPN 1
2955: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
2956: LD_INT 22
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 21
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 33
2978: PUSH
2979: LD_INT 2
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: PUSH
2996: LD_INT 0
2998: EQUAL
2999: IFFALSE 3023
3001: GO 3003
3003: DISABLE
// begin enable ;
3004: ENABLE
// RemoveUnit ( arControlTower ) ;
3005: LD_EXP 34
3009: PPUSH
3010: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3014: LD_EXP 35
3018: PPUSH
3019: CALL_OW 64
// end ;
3023: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3024: LD_EXP 31
3028: PUSH
3029: LD_INT 0
3031: GREATER
3032: IFFALSE 3196
3034: GO 3036
3036: DISABLE
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
// begin enable ;
3041: ENABLE
// rnd = 0 ;
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// uc_side = 2 ;
3050: LD_ADDR_OWVAR 20
3054: PUSH
3055: LD_INT 2
3057: ST_TO_ADDR
// uc_nation = 2 ;
3058: LD_ADDR_OWVAR 21
3062: PUSH
3063: LD_INT 2
3065: ST_TO_ADDR
// hc_name =  ;
3066: LD_ADDR_OWVAR 26
3070: PUSH
3071: LD_STRING 
3073: ST_TO_ADDR
// hc_gallery =  ;
3074: LD_ADDR_OWVAR 33
3078: PUSH
3079: LD_STRING 
3081: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_INT 10
3090: PPUSH
3091: CALL_OW 380
// un = CreateHuman ;
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: CALL_OW 44
3104: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3105: LD_VAR 0 1
3109: PPUSH
3110: LD_INT 8
3112: PUSH
3113: LD_INT 9
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3139: LD_ADDR_VAR 0 2
3143: PUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_EXP 31
3151: PPUSH
3152: CALL_OW 12
3156: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_EXP 31
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: PUSH
3173: LD_INT 1
3175: ARRAY
3176: PPUSH
3177: LD_EXP 31
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_INT 2
3190: ARRAY
3191: PPUSH
3192: CALL_OW 158
// end ; end_of_file
3196: PPOPN 2
3198: END
// every 1 do
3199: GO 3201
3201: DISABLE
// begin InGameOn ;
3202: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3206: LD_INT 22
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 21
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3243: LD_INT 22
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 21
3255: PUSH
3256: LD_INT 2
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PPUSH
3267: CALL_OW 69
3271: PPUSH
3272: LD_INT 69
3274: PPUSH
3275: LD_INT 94
3277: PPUSH
3278: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3282: LD_EXP 1
3286: PPUSH
3287: LD_STRING D2-JMM-1
3289: PPUSH
3290: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3294: LD_INT 22
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 21
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: PPUSH
3327: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3331: LD_EXP 2
3335: PPUSH
3336: LD_STRING D2-Huck-1
3338: PPUSH
3339: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3343: LD_INT 22
3345: PUSH
3346: LD_INT 1
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 21
3355: PUSH
3356: LD_INT 2
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3380: LD_EXP 1
3384: PPUSH
3385: LD_STRING D2-JMM-2
3387: PPUSH
3388: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3392: LD_INT 22
3394: PUSH
3395: LD_INT 1
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 21
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 69
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: CALL_OW 87
// InGameOff ;
3429: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3433: LD_STRING M1
3435: PPUSH
3436: CALL_OW 337
// SaveForQuickRestart ;
3440: CALL_OW 22
// end ;
3444: END
// every 10 10$0 do
3445: GO 3447
3447: DISABLE
// begin DialogueOn ;
3448: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3452: LD_EXP 15
3456: PPUSH
3457: LD_STRING D3-Pow-1
3459: PPUSH
3460: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3464: LD_EXP 1
3468: PPUSH
3469: LD_STRING D3-JMM-1
3471: PPUSH
3472: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_STRING D3-Pow-2
3483: PPUSH
3484: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3488: LD_EXP 1
3492: PPUSH
3493: LD_STRING D3-JMM-2
3495: PPUSH
3496: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3500: LD_EXP 15
3504: PPUSH
3505: LD_STRING D3-Pow-3
3507: PPUSH
3508: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3512: LD_EXP 1
3516: PPUSH
3517: LD_STRING D3-JMM-3
3519: PPUSH
3520: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3524: LD_EXP 15
3528: PPUSH
3529: LD_STRING D3-Pow-4
3531: PPUSH
3532: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3536: LD_EXP 1
3540: PPUSH
3541: LD_STRING D3-JMM-4
3543: PPUSH
3544: CALL_OW 88
// DialogueOff ;
3548: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3552: LD_STRING M2
3554: PPUSH
3555: CALL_OW 337
// wait ( 2 2$30 ) ;
3559: LD_INT 5250
3561: PPUSH
3562: CALL_OW 67
// PrepareBurlak ;
3566: CALL 1812 0 0
// BurlakArmy ;
3570: CALL 1958 0 0
// end ;
3574: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3575: LD_INT 1
3577: PPUSH
3578: LD_EXP 18
3582: PPUSH
3583: CALL_OW 292
3587: IFFALSE 3746
3589: GO 3591
3591: DISABLE
// begin DialogueOn ;
3592: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3596: LD_EXP 18
3600: PPUSH
3601: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3605: LD_INT 22
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: LD_INT 26
3617: PUSH
3618: LD_INT 1
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 25
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 25
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 25
3670: PUSH
3671: LD_INT 5
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PPUSH
3696: LD_STRING D5-Sol1-1
3698: PPUSH
3699: LD_STRING D5-FSol1-1
3701: PPUSH
3702: CALL 5934 0 3
// Say ( JMM , D5-JMM-1 ) ;
3706: LD_EXP 1
3710: PPUSH
3711: LD_STRING D5-JMM-1
3713: PPUSH
3714: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3718: LD_EXP 17
3722: PPUSH
3723: LD_STRING DAmer-Bur-1
3725: PPUSH
3726: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3730: LD_EXP 1
3734: PPUSH
3735: LD_STRING DAmer-JMM-1
3737: PPUSH
3738: CALL_OW 88
// DialogueOff ;
3742: CALL_OW 7
// end ;
3746: END
// every 0 0$1 do var i ;
3747: GO 3749
3749: DISABLE
3750: LD_INT 0
3752: PPUSH
// begin enable ;
3753: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3754: LD_ADDR_VAR 0 1
3758: PUSH
3759: LD_INT 22
3761: PUSH
3762: LD_INT 7
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL_OW 69
3773: PUSH
3774: FOR_IN
3775: IFFALSE 4153
// if IsInArea ( i , AllianceEscape ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: LD_INT 4
3784: PPUSH
3785: CALL_OW 308
3789: IFFALSE 4151
// begin if i = Burlak or i = Masha then
3791: LD_VAR 0 1
3795: PUSH
3796: LD_EXP 17
3800: EQUAL
3801: PUSH
3802: LD_VAR 0 1
3806: PUSH
3807: LD_EXP 18
3811: EQUAL
3812: OR
3813: IFFALSE 3960
// begin RemoveUnit ( i ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 64
// DialogueOn ;
3824: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3828: LD_EXP 1
3832: PPUSH
3833: LD_STRING D5a-JMM-1
3835: PPUSH
3836: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3840: LD_INT 22
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 26
3852: PUSH
3853: LD_INT 1
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 25
3865: PUSH
3866: LD_INT 1
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 25
3875: PUSH
3876: LD_INT 2
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 25
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_INT 25
3895: PUSH
3896: LD_INT 4
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 25
3905: PUSH
3906: LD_INT 5
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 69
3930: PPUSH
3931: LD_STRING D5a-Sol1-1
3933: PPUSH
3934: LD_STRING D5-FSol1-1
3936: PPUSH
3937: CALL 5934 0 3
// DialogueOff ;
3941: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3945: LD_STRING M2b
3947: PPUSH
3948: CALL_OW 337
// spawnBurlak = 0 ;
3952: LD_ADDR_EXP 27
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 247
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 263
3983: PUSH
3984: LD_INT 1
3986: EQUAL
3987: AND
3988: IFFALSE 4116
// begin case IsDrivenBy ( i ) of Gnyevko :
3990: LD_VAR 0 1
3994: PPUSH
3995: CALL_OW 311
3999: PUSH
4000: LD_EXP 19
4004: DOUBLE
4005: EQUAL
4006: IFTRUE 4010
4008: GO 4023
4010: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 13_Gnyevko_1
4016: PPUSH
4017: CALL_OW 39
4021: GO 4116
4023: LD_EXP 20
4027: DOUBLE
4028: EQUAL
4029: IFTRUE 4033
4031: GO 4046
4033: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4034: LD_INT 1
4036: PPUSH
4037: LD_STRING 13_Titov_1
4039: PPUSH
4040: CALL_OW 39
4044: GO 4116
4046: LD_EXP 21
4050: DOUBLE
4051: EQUAL
4052: IFTRUE 4056
4054: GO 4069
4056: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4057: LD_INT 1
4059: PPUSH
4060: LD_STRING 13_Xavier_1
4062: PPUSH
4063: CALL_OW 39
4067: GO 4116
4069: LD_EXP 22
4073: DOUBLE
4074: EQUAL
4075: IFTRUE 4079
4077: GO 4092
4079: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4080: LD_INT 1
4082: PPUSH
4083: LD_STRING 13_Belkov_1
4085: PPUSH
4086: CALL_OW 39
4090: GO 4116
4092: LD_EXP 23
4096: DOUBLE
4097: EQUAL
4098: IFTRUE 4102
4100: GO 4115
4102: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4103: LD_INT 1
4105: PPUSH
4106: LD_STRING 13_Lipshchin_1
4108: PPUSH
4109: CALL_OW 39
4113: GO 4116
4115: POP
// end ; if GetWeapon ( i ) = 49 then
4116: LD_VAR 0 1
4120: PPUSH
4121: CALL_OW 264
4125: PUSH
4126: LD_INT 49
4128: EQUAL
4129: IFFALSE 4142
// DestroyUnit ( i ) else
4131: LD_VAR 0 1
4135: PPUSH
4136: CALL_OW 65
4140: GO 4151
// RemoveUnit ( i ) ;
4142: LD_VAR 0 1
4146: PPUSH
4147: CALL_OW 64
// end ;
4151: GO 3774
4153: POP
4154: POP
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 then
4155: LD_INT 22
4157: PUSH
4158: LD_INT 7
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 21
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 69
4183: PUSH
4184: LD_INT 0
4186: EQUAL
4187: IFFALSE 4190
// disable ;
4189: DISABLE
// end ;
4190: PPOPN 1
4192: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4193: LD_EXP 18
4197: PPUSH
4198: CALL_OW 256
4202: PUSH
4203: LD_INT 500
4205: LESS
4206: PUSH
4207: LD_EXP 18
4211: PPUSH
4212: CALL_OW 255
4216: PUSH
4217: LD_INT 7
4219: EQUAL
4220: AND
4221: IFFALSE 4241
4223: GO 4225
4225: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4226: LD_EXP 18
4230: PPUSH
4231: LD_INT 107
4233: PPUSH
4234: LD_INT 118
4236: PPUSH
4237: CALL_OW 111
4241: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4242: LD_EXP 17
4246: PPUSH
4247: CALL_OW 301
4251: PUSH
4252: LD_EXP 27
4256: PUSH
4257: LD_INT 1
4259: EQUAL
4260: AND
4261: IFFALSE 4394
4263: GO 4265
4265: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4266: LD_EXP 1
4270: PPUSH
4271: LD_STRING D5b-JMM-1
4273: PPUSH
4274: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4278: LD_INT 22
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 26
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 25
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 25
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 25
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 25
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 25
4343: PUSH
4344: LD_INT 5
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 69
4368: PPUSH
4369: LD_STRING D5b-Sol1-1
4371: PPUSH
4372: LD_STRING 
4374: PPUSH
4375: CALL 5934 0 3
// ChangeMissionObjectives ( M2a ) ;
4379: LD_STRING M2a
4381: PPUSH
4382: CALL_OW 337
// burlakStatus = 1 ;
4386: LD_ADDR_EXP 28
4390: PUSH
4391: LD_INT 1
4393: ST_TO_ADDR
// end ;
4394: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4395: LD_EXP 2
4399: PPUSH
4400: CALL_OW 301
4404: IFFALSE 4541
4406: GO 4408
4408: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4409: LD_EXP 1
4413: PPUSH
4414: LD_STRING D6-JMM-1
4416: PPUSH
4417: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 26
4433: PUSH
4434: LD_INT 1
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 1
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 25
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 3
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 25
4476: PUSH
4477: LD_INT 4
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 25
4486: PUSH
4487: LD_INT 5
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PPUSH
4512: LD_STRING D6-Sol1-1
4514: PPUSH
4515: LD_STRING 
4517: PPUSH
4518: CALL 5934 0 3
// Say ( JMM , D6-JMM-2 ) ;
4522: LD_EXP 1
4526: PPUSH
4527: LD_STRING D6-JMM-2
4529: PPUSH
4530: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4534: LD_STRING M1a
4536: PPUSH
4537: CALL_OW 337
// end ;
4541: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4542: LD_INT 25
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: CALL_OW 321
4552: PUSH
4553: LD_INT 2
4555: EQUAL
4556: IFFALSE 4573
4558: GO 4560
4560: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4561: LD_EXP 2
4565: PPUSH
4566: LD_STRING D6-Huck-2
4568: PPUSH
4569: CALL_OW 88
// end ;
4573: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 34
4589: PUSH
4590: LD_INT 8
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 35
4599: PUSH
4600: LD_INT 8
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 69
4620: PUSH
4621: LD_INT 0
4623: GREATER
4624: IFFALSE 4816
4626: GO 4628
4628: DISABLE
4629: LD_INT 0
4631: PPUSH
4632: PPUSH
// begin enable ;
4633: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4634: LD_ADDR_VAR 0 1
4638: PUSH
4639: LD_INT 5
4641: PPUSH
4642: LD_INT 22
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 21
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 1
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: LD_INT 3
4674: PUSH
4675: LD_INT 57
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 70
4695: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: LD_INT 5
4703: PPUSH
4704: LD_INT 22
4706: PUSH
4707: LD_INT 1
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 21
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 5
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 57
4739: PUSH
4740: EMPTY
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4758: LD_VAR 0 1
4762: PUSH
4763: LD_INT 0
4765: GREATER
4766: PUSH
4767: LD_VAR 0 2
4771: PUSH
4772: LD_INT 0
4774: GREATER
4775: AND
4776: IFFALSE 4816
// begin disable ;
4778: DISABLE
// DialogueOn ;
4779: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4783: LD_EXP 1
4787: PPUSH
4788: LD_STRING D7-JMM-1
4790: PPUSH
4791: CALL_OW 88
// DialogueOff ;
4795: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4799: LD_STRING M4
4801: PPUSH
4802: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4806: LD_INT 5
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: CALL_OW 424
// end ; end ;
4816: PPOPN 2
4818: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4819: LD_INT 6
4821: PPUSH
4822: LD_INT 22
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 25
4834: PUSH
4835: LD_INT 4
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 70
4850: PUSH
4851: LD_INT 0
4853: GREATER
4854: PUSH
4855: LD_EXP 39
4859: PUSH
4860: LD_INT 1
4862: EQUAL
4863: AND
4864: PUSH
4865: LD_EXP 29
4869: PUSH
4870: LD_INT 0
4872: EQUAL
4873: AND
4874: IFFALSE 4939
4876: GO 4878
4878: DISABLE
// begin enable ;
4879: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4880: LD_ADDR_EXP 26
4884: PUSH
4885: LD_INT 6
4887: PPUSH
4888: LD_INT 22
4890: PUSH
4891: LD_INT 1
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 25
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 70
4916: PUSH
4917: LD_INT 1
4919: ARRAY
4920: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4921: LD_INT 6
4923: PPUSH
4924: LD_INT 0
4926: PPUSH
4927: CALL_OW 424
// radationResearched = 1 ;
4931: LD_ADDR_EXP 29
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// end ;
4939: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4940: LD_EXP 26
4944: PPUSH
4945: CALL_OW 301
4949: PUSH
4950: LD_EXP 29
4954: PUSH
4955: LD_INT 1
4957: EQUAL
4958: AND
4959: IFFALSE 4995
4961: GO 4963
4963: DISABLE
// begin enable ;
4964: ENABLE
// radationResearched = 0 ;
4965: LD_ADDR_EXP 29
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4973: LD_INT 6
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D9a-JMM-1
4990: PPUSH
4991: CALL_OW 88
// end ; end_of_file
4995: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4996: LD_VAR 0 5
5000: PUSH
5001: LD_INT 8
5003: EQUAL
5004: PUSH
5005: LD_EXP 37
5009: PUSH
5010: LD_INT 0
5012: EQUAL
5013: AND
5014: IFFALSE 5067
// begin eventVar1 = 1 ;
5016: LD_ADDR_EXP 37
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// DialogueOn ;
5024: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5028: LD_EXP 1
5032: PPUSH
5033: LD_STRING D6a-JMM-1
5035: PPUSH
5036: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5040: LD_EXP 15
5044: PPUSH
5045: LD_STRING D6a-Pow-1
5047: PPUSH
5048: CALL_OW 94
// DialogueOff ;
5052: CALL_OW 7
// wait ( 3 3$0 ) ;
5056: LD_INT 6300
5058: PPUSH
5059: CALL_OW 67
// PowellSupport ;
5063: CALL 1584 0 0
// end ; end ;
5067: PPOPN 5
5069: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5070: LD_VAR 0 1
5074: PPUSH
5075: CALL_OW 264
5079: PUSH
5080: LD_INT 8
5082: EQUAL
5083: PUSH
5084: LD_EXP 38
5088: PUSH
5089: LD_INT 0
5091: EQUAL
5092: AND
5093: IFFALSE 5162
// begin eventVar2 = 1 ;
5095: LD_ADDR_EXP 38
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// DialogueOn ;
5103: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_STRING D6b-JMM-1
5114: PPUSH
5115: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5119: LD_EXP 15
5123: PPUSH
5124: LD_STRING D6b-Pow-1
5126: PPUSH
5127: CALL_OW 94
// DialogueOff ;
5131: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5135: LD_INT 5
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5145: LD_INT 7
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5155: LD_STRING M3
5157: PPUSH
5158: CALL_OW 337
// end ; end ;
5162: PPOPN 2
5164: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5165: LD_VAR 0 2
5169: PPUSH
5170: LD_VAR 0 3
5174: PPUSH
5175: LD_INT 5
5177: PPUSH
5178: CALL_OW 309
5182: PUSH
5183: LD_EXP 39
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5410
// begin eventVar3 = 1 ;
5194: LD_ADDR_EXP 39
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5202: LD_INT 175
5204: PPUSH
5205: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5209: LD_INT 7
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 21
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 34
5234: PUSH
5235: LD_INT 11
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 70
5251: PUSH
5252: LD_INT 0
5254: GREATER
5255: IFFALSE 5274
// begin radarOnSpot = 1 ;
5257: LD_ADDR_EXP 30
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5265: LD_STRING M3a
5267: PPUSH
5268: CALL_OW 337
// end else
5272: GO 5281
// begin ChangeMissionObjectives ( M3b ) ;
5274: LD_STRING M3b
5276: PPUSH
5277: CALL_OW 337
// end ; DialogueOn ;
5281: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5285: LD_EXP 2
5289: PPUSH
5290: LD_STRING D8-Huck-1
5292: PPUSH
5293: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5297: LD_EXP 1
5301: PPUSH
5302: LD_STRING D8-JMM-1
5304: PPUSH
5305: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5309: LD_EXP 2
5313: PPUSH
5314: LD_STRING D8-Huck-2
5316: PPUSH
5317: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5321: LD_EXP 1
5325: PPUSH
5326: LD_STRING D8-JMM-2
5328: PPUSH
5329: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5333: LD_EXP 2
5337: PPUSH
5338: LD_STRING D8-Huck-3
5340: PPUSH
5341: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5345: LD_EXP 1
5349: PPUSH
5350: LD_STRING D8-JMM-3
5352: PPUSH
5353: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5357: LD_EXP 2
5361: PPUSH
5362: LD_STRING D8-Huck-4
5364: PPUSH
5365: CALL_OW 88
// DialogueOff ;
5369: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5373: LD_INT 5
5375: PPUSH
5376: LD_INT 0
5378: PPUSH
5379: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5383: LD_INT 7
5385: PPUSH
5386: LD_INT 0
5388: PPUSH
5389: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5393: LD_INT 6
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5403: LD_STRING M5
5405: PPUSH
5406: CALL_OW 337
// end ; end ;
5410: PPOPN 3
5412: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5413: LD_EXP 26
5417: PPUSH
5418: CALL_OW 302
5422: PUSH
5423: LD_VAR 0 2
5427: PUSH
5428: LD_EXP 26
5432: EQUAL
5433: AND
5434: PUSH
5435: LD_EXP 40
5439: PUSH
5440: LD_INT 0
5442: EQUAL
5443: AND
5444: PUSH
5445: LD_EXP 39
5449: PUSH
5450: LD_INT 1
5452: EQUAL
5453: AND
5454: IFFALSE 5500
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5456: LD_VAR 0 1
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 268
5468: PUSH
5469: LD_INT 11
5471: EQUAL
5472: PUSH
5473: LD_VAR 0 1
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 268
5485: PUSH
5486: LD_INT 11
5488: EQUAL
5489: OR
5490: IFFALSE 5500
// eventVar4 = 1 ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 1
5499: ST_TO_ADDR
// end ;
5500: PPOPN 2
5502: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5503: LD_INT 0
5505: PPUSH
5506: PPUSH
// begin if GetNation ( unit ) = 2 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 248
5516: PUSH
5517: LD_INT 2
5519: EQUAL
5520: IFFALSE 5766
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5522: LD_ADDR_EXP 32
5526: PUSH
5527: LD_EXP 32
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ST_TO_ADDR
// for i := 1 to sibDeposits do
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: DOUBLE
5542: LD_INT 1
5544: DEC
5545: ST_TO_ADDR
5546: LD_EXP 31
5550: PUSH
5551: FOR_TO
5552: IFFALSE 5654
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5554: LD_EXP 31
5558: PUSH
5559: LD_VAR 0 4
5563: ARRAY
5564: PUSH
5565: LD_INT 1
5567: ARRAY
5568: PUSH
5569: LD_VAR 0 2
5573: EQUAL
5574: PUSH
5575: LD_EXP 31
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PUSH
5590: LD_VAR 0 3
5594: EQUAL
5595: AND
5596: IFFALSE 5652
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5598: LD_ADDR_EXP 31
5602: PUSH
5603: LD_EXP 31
5607: PPUSH
5608: LD_VAR 0 4
5612: PUSH
5613: EMPTY
5614: LIST
5615: PUSH
5616: LD_INT 1
5618: ARRAY
5619: PPUSH
5620: CALL_OW 3
5624: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5625: LD_ADDR_EXP 31
5629: PUSH
5630: LD_EXP 31
5634: PPUSH
5635: LD_VAR 0 4
5639: PUSH
5640: EMPTY
5641: LIST
5642: PUSH
5643: LD_INT 2
5645: ARRAY
5646: PPUSH
5647: CALL_OW 3
5651: ST_TO_ADDR
// end ;
5652: GO 5551
5654: POP
5655: POP
// if eventVar5 = 0 then
5656: LD_EXP 41
5660: PUSH
5661: LD_INT 0
5663: EQUAL
5664: IFFALSE 5766
// begin eventVar5 = 1 ;
5666: LD_ADDR_EXP 41
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// DialogueOn ;
5674: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5678: LD_EXP 2
5682: PPUSH
5683: LD_STRING D4-Sci1-1
5685: PPUSH
5686: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5690: LD_EXP 1
5694: PPUSH
5695: LD_STRING D4-JMM-1
5697: PPUSH
5698: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5702: LD_EXP 2
5706: PPUSH
5707: LD_STRING D4-Sci1-2
5709: PPUSH
5710: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5714: LD_EXP 1
5718: PPUSH
5719: LD_STRING D4-JMM-2
5721: PPUSH
5722: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5726: LD_EXP 2
5730: PPUSH
5731: LD_STRING D4-Sci1-3
5733: PPUSH
5734: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5738: LD_EXP 1
5742: PPUSH
5743: LD_STRING D4-JMM-3
5745: PPUSH
5746: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5750: LD_EXP 1
5754: PPUSH
5755: LD_STRING D4-JMM-3a
5757: PPUSH
5758: CALL_OW 88
// DialogueOff ;
5762: CALL_OW 7
// end ; end ; end ;
5766: PPOPN 5
5768: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 255
5778: PUSH
5779: LD_INT 1
5781: EQUAL
5782: PUSH
5783: LD_VAR 0 1
5787: PPUSH
5788: CALL_OW 266
5792: PUSH
5793: LD_INT 0
5795: EQUAL
5796: AND
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 21
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 30
5823: PUSH
5824: LD_INT 0
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 30
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 69
5855: PUSH
5856: LD_INT 1
5858: EQUAL
5859: AND
5860: IFFALSE 5874
// SetBName ( building , omega ) ;
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_STRING omega
5869: PPUSH
5870: CALL_OW 500
// end ; end_of_file
5874: PPOPN 2
5876: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
// if exist_mode then
5881: LD_VAR 0 2
5885: IFFALSE 5904
// unit := CreateCharacter ( ident ) else
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 1
5896: PPUSH
5897: CALL_OW 34
5901: ST_TO_ADDR
5902: GO 5919
// unit := NewCharacter ( ident ) ;
5904: LD_ADDR_VAR 0 4
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 25
5918: ST_TO_ADDR
// result := unit ;
5919: LD_ADDR_VAR 0 3
5923: PUSH
5924: LD_VAR 0 4
5928: ST_TO_ADDR
// end ;
5929: LD_VAR 0 3
5933: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5934: LD_INT 0
5936: PPUSH
5937: PPUSH
5938: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5939: LD_ADDR_VAR 0 1
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_EXP 1
5953: PUSH
5954: LD_EXP 2
5958: PUSH
5959: LD_EXP 3
5963: PUSH
5964: LD_EXP 4
5968: PUSH
5969: LD_EXP 5
5973: PUSH
5974: LD_EXP 6
5978: PUSH
5979: LD_EXP 7
5983: PUSH
5984: LD_EXP 8
5988: PUSH
5989: LD_EXP 9
5993: PUSH
5994: LD_EXP 10
5998: PUSH
5999: LD_EXP 11
6003: PUSH
6004: LD_EXP 12
6008: PUSH
6009: LD_EXP 13
6013: PUSH
6014: LD_EXP 14
6018: PUSH
6019: LD_EXP 15
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: DIFF
6041: ST_TO_ADDR
// rnd = rand ( 1 , characters ) ;
6042: LD_ADDR_VAR 0 6
6046: PUSH
6047: LD_INT 1
6049: PPUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 12
6059: ST_TO_ADDR
// for i = 1 to characters do
6060: LD_ADDR_VAR 0 5
6064: PUSH
6065: DOUBLE
6066: LD_INT 1
6068: DEC
6069: ST_TO_ADDR
6070: LD_VAR 0 1
6074: PUSH
6075: FOR_TO
6076: IFFALSE 6186
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
6078: LD_VAR 0 5
6082: PUSH
6083: LD_VAR 0 6
6087: EQUAL
6088: PUSH
6089: LD_VAR 0 1
6093: PUSH
6094: LD_VAR 0 5
6098: ARRAY
6099: PPUSH
6100: CALL_OW 258
6104: PUSH
6105: LD_INT 1
6107: EQUAL
6108: AND
6109: IFFALSE 6131
// Say ( characters [ i ] , dialogMID ) ;
6111: LD_VAR 0 1
6115: PUSH
6116: LD_VAR 0 5
6120: ARRAY
6121: PPUSH
6122: LD_VAR 0 2
6126: PPUSH
6127: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
6131: LD_VAR 0 5
6135: PUSH
6136: LD_VAR 0 6
6140: EQUAL
6141: PUSH
6142: LD_VAR 0 1
6146: PUSH
6147: LD_VAR 0 5
6151: ARRAY
6152: PPUSH
6153: CALL_OW 258
6157: PUSH
6158: LD_INT 2
6160: EQUAL
6161: AND
6162: IFFALSE 6184
// Say ( characters [ i ] , dialogFID ) ;
6164: LD_VAR 0 1
6168: PUSH
6169: LD_VAR 0 5
6173: ARRAY
6174: PPUSH
6175: LD_VAR 0 3
6179: PPUSH
6180: CALL_OW 88
// end ;
6184: GO 6075
6186: POP
6187: POP
// end ;
6188: LD_VAR 0 4
6192: RET
// export function PrepareDifficulty ; begin
6193: LD_INT 0
6195: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6196: LD_INT 5
6198: PPUSH
6199: LD_INT 8
6201: PPUSH
6202: LD_INT 2
6204: PPUSH
6205: CALL_OW 322
// if difficulty = 1 then
6209: LD_OWVAR 67
6213: PUSH
6214: LD_INT 1
6216: EQUAL
6217: IFFALSE 6336
// begin SetTech ( 66 , 8 , state_researched ) ;
6219: LD_INT 66
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: LD_INT 2
6227: PPUSH
6228: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6232: LD_INT 67
6234: PPUSH
6235: LD_INT 8
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6245: LD_INT 68
6247: PPUSH
6248: LD_INT 8
6250: PPUSH
6251: LD_INT 0
6253: PPUSH
6254: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6258: LD_INT 51
6260: PPUSH
6261: LD_INT 8
6263: PPUSH
6264: LD_INT 2
6266: PPUSH
6267: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6271: LD_INT 52
6273: PPUSH
6274: LD_INT 8
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6284: LD_INT 53
6286: PPUSH
6287: LD_INT 8
6289: PPUSH
6290: LD_INT 0
6292: PPUSH
6293: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6297: LD_INT 60
6299: PPUSH
6300: LD_INT 8
6302: PPUSH
6303: LD_INT 2
6305: PPUSH
6306: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6310: LD_INT 61
6312: PPUSH
6313: LD_INT 8
6315: PPUSH
6316: LD_INT 0
6318: PPUSH
6319: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6323: LD_INT 62
6325: PPUSH
6326: LD_INT 8
6328: PPUSH
6329: LD_INT 0
6331: PPUSH
6332: CALL_OW 322
// end ; if difficulty = 2 then
6336: LD_OWVAR 67
6340: PUSH
6341: LD_INT 2
6343: EQUAL
6344: IFFALSE 6463
// begin SetTech ( 66 , 8 , state_researched ) ;
6346: LD_INT 66
6348: PPUSH
6349: LD_INT 8
6351: PPUSH
6352: LD_INT 2
6354: PPUSH
6355: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6359: LD_INT 67
6361: PPUSH
6362: LD_INT 8
6364: PPUSH
6365: LD_INT 2
6367: PPUSH
6368: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6372: LD_INT 68
6374: PPUSH
6375: LD_INT 8
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6385: LD_INT 51
6387: PPUSH
6388: LD_INT 8
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6398: LD_INT 52
6400: PPUSH
6401: LD_INT 8
6403: PPUSH
6404: LD_INT 2
6406: PPUSH
6407: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6411: LD_INT 53
6413: PPUSH
6414: LD_INT 8
6416: PPUSH
6417: LD_INT 2
6419: PPUSH
6420: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6424: LD_INT 60
6426: PPUSH
6427: LD_INT 8
6429: PPUSH
6430: LD_INT 2
6432: PPUSH
6433: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6437: LD_INT 61
6439: PPUSH
6440: LD_INT 8
6442: PPUSH
6443: LD_INT 2
6445: PPUSH
6446: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6450: LD_INT 62
6452: PPUSH
6453: LD_INT 8
6455: PPUSH
6456: LD_INT 0
6458: PPUSH
6459: CALL_OW 322
// end ; if difficulty = 3 then
6463: LD_OWVAR 67
6467: PUSH
6468: LD_INT 3
6470: EQUAL
6471: IFFALSE 6590
// begin SetTech ( 66 , 8 , state_researched ) ;
6473: LD_INT 66
6475: PPUSH
6476: LD_INT 8
6478: PPUSH
6479: LD_INT 2
6481: PPUSH
6482: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6486: LD_INT 67
6488: PPUSH
6489: LD_INT 8
6491: PPUSH
6492: LD_INT 2
6494: PPUSH
6495: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6499: LD_INT 68
6501: PPUSH
6502: LD_INT 8
6504: PPUSH
6505: LD_INT 0
6507: PPUSH
6508: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6512: LD_INT 51
6514: PPUSH
6515: LD_INT 8
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6525: LD_INT 52
6527: PPUSH
6528: LD_INT 8
6530: PPUSH
6531: LD_INT 2
6533: PPUSH
6534: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6538: LD_INT 53
6540: PPUSH
6541: LD_INT 8
6543: PPUSH
6544: LD_INT 2
6546: PPUSH
6547: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6551: LD_INT 60
6553: PPUSH
6554: LD_INT 8
6556: PPUSH
6557: LD_INT 2
6559: PPUSH
6560: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6564: LD_INT 61
6566: PPUSH
6567: LD_INT 8
6569: PPUSH
6570: LD_INT 2
6572: PPUSH
6573: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6577: LD_INT 62
6579: PPUSH
6580: LD_INT 8
6582: PPUSH
6583: LD_INT 0
6585: PPUSH
6586: CALL_OW 322
// end ; end ;
6590: LD_VAR 0 1
6594: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6595: LD_INT 0
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
6602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6603: LD_ADDR_VAR 0 7
6607: PUSH
6608: LD_INT 22
6610: PUSH
6611: LD_VAR 0 1
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 25
6622: PUSH
6623: LD_INT 9
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6639: LD_ADDR_VAR 0 8
6643: PUSH
6644: LD_INT 22
6646: PUSH
6647: LD_VAR 0 2
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: LD_INT 21
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: LD_INT 1
6689: PPUSH
6690: LD_INT 3
6692: PPUSH
6693: CALL_OW 12
6697: ST_TO_ADDR
// for i = 1 to list do
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: DOUBLE
6704: LD_INT 1
6706: DEC
6707: ST_TO_ADDR
6708: LD_VAR 0 7
6712: PUSH
6713: FOR_TO
6714: IFFALSE 6896
// for ta in filter do
6716: LD_ADDR_VAR 0 4
6720: PUSH
6721: LD_VAR 0 8
6725: PUSH
6726: FOR_IN
6727: IFFALSE 6892
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6729: LD_VAR 0 7
6733: PUSH
6734: LD_VAR 0 6
6738: ARRAY
6739: PPUSH
6740: LD_VAR 0 4
6744: PPUSH
6745: CALL_OW 296
6749: PUSH
6750: LD_INT 13
6752: LESSEQUAL
6753: IFFALSE 6890
// begin case c of 1 :
6755: LD_VAR 0 5
6759: PUSH
6760: LD_INT 1
6762: DOUBLE
6763: EQUAL
6764: IFTRUE 6768
6766: GO 6806
6768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6769: LD_VAR 0 7
6773: PUSH
6774: LD_VAR 0 6
6778: ARRAY
6779: PPUSH
6780: LD_VAR 0 4
6784: PPUSH
6785: CALL_OW 250
6789: PPUSH
6790: LD_VAR 0 4
6794: PPUSH
6795: CALL_OW 251
6799: PPUSH
6800: CALL_OW 154
6804: GO 6890
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6878
6814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6815: LD_VAR 0 7
6819: PUSH
6820: LD_VAR 0 6
6824: ARRAY
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: CALL_OW 250
6835: PUSH
6836: LD_INT 1
6838: NEG
6839: PPUSH
6840: LD_INT 1
6842: PPUSH
6843: CALL_OW 12
6847: PLUS
6848: PPUSH
6849: LD_VAR 0 4
6853: PPUSH
6854: CALL_OW 251
6858: PUSH
6859: LD_INT 1
6861: NEG
6862: PPUSH
6863: LD_INT 1
6865: PPUSH
6866: CALL_OW 12
6870: PLUS
6871: PPUSH
6872: CALL_OW 153
6876: GO 6890
6878: LD_INT 3
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6889
6886: POP
// ; end ;
6887: GO 6890
6889: POP
// end ; end ;
6890: GO 6726
6892: POP
6893: POP
6894: GO 6713
6896: POP
6897: POP
// end ;
6898: LD_VAR 0 3
6902: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6903: LD_INT 0
6905: PPUSH
6906: PPUSH
// for i in charactersList do
6907: LD_ADDR_VAR 0 4
6911: PUSH
6912: LD_VAR 0 1
6916: PUSH
6917: FOR_IN
6918: IFFALSE 6936
// SaveCharacters ( i , ident ) ;
6920: LD_VAR 0 4
6924: PPUSH
6925: LD_VAR 0 2
6929: PPUSH
6930: CALL_OW 38
6934: GO 6917
6936: POP
6937: POP
// end ;
6938: LD_VAR 0 3
6942: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6943: LD_INT 0
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
// for i = 1 to medicCount do
6956: LD_ADDR_VAR 0 13
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_VAR 0 7
6970: PUSH
6971: FOR_TO
6972: IFFALSE 7054
// begin uc_side = side ;
6974: LD_ADDR_OWVAR 20
6978: PUSH
6979: LD_VAR 0 1
6983: ST_TO_ADDR
// uc_nation = nation ;
6984: LD_ADDR_OWVAR 21
6988: PUSH
6989: LD_VAR 0 2
6993: ST_TO_ADDR
// hc_name =  ;
6994: LD_ADDR_OWVAR 26
6998: PUSH
6999: LD_STRING 
7001: ST_TO_ADDR
// hc_gallery =  ;
7002: LD_ADDR_OWVAR 33
7006: PUSH
7007: LD_STRING 
7009: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7010: LD_INT 0
7012: PPUSH
7013: LD_INT 4
7015: PPUSH
7016: LD_VAR 0 8
7020: PPUSH
7021: CALL_OW 380
// un = CreateHuman ;
7025: LD_ADDR_VAR 0 15
7029: PUSH
7030: CALL_OW 44
7034: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7035: LD_VAR 0 15
7039: PPUSH
7040: LD_VAR 0 9
7044: PPUSH
7045: LD_INT 0
7047: PPUSH
7048: CALL_OW 49
// end ;
7052: GO 6971
7054: POP
7055: POP
// for i = 1 to soldierCount do
7056: LD_ADDR_VAR 0 13
7060: PUSH
7061: DOUBLE
7062: LD_INT 1
7064: DEC
7065: ST_TO_ADDR
7066: LD_VAR 0 3
7070: PUSH
7071: FOR_TO
7072: IFFALSE 7154
// begin uc_side = side ;
7074: LD_ADDR_OWVAR 20
7078: PUSH
7079: LD_VAR 0 1
7083: ST_TO_ADDR
// uc_nation = nation ;
7084: LD_ADDR_OWVAR 21
7088: PUSH
7089: LD_VAR 0 2
7093: ST_TO_ADDR
// hc_name =  ;
7094: LD_ADDR_OWVAR 26
7098: PUSH
7099: LD_STRING 
7101: ST_TO_ADDR
// hc_gallery =  ;
7102: LD_ADDR_OWVAR 33
7106: PUSH
7107: LD_STRING 
7109: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7110: LD_INT 0
7112: PPUSH
7113: LD_INT 1
7115: PPUSH
7116: LD_VAR 0 8
7120: PPUSH
7121: CALL_OW 380
// un = CreateHuman ;
7125: LD_ADDR_VAR 0 15
7129: PUSH
7130: CALL_OW 44
7134: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7135: LD_VAR 0 15
7139: PPUSH
7140: LD_VAR 0 9
7144: PPUSH
7145: LD_INT 0
7147: PPUSH
7148: CALL_OW 49
// end ;
7152: GO 7071
7154: POP
7155: POP
// for i = 1 to sniperCount do
7156: LD_ADDR_VAR 0 13
7160: PUSH
7161: DOUBLE
7162: LD_INT 1
7164: DEC
7165: ST_TO_ADDR
7166: LD_VAR 0 4
7170: PUSH
7171: FOR_TO
7172: IFFALSE 7254
// begin uc_side = side ;
7174: LD_ADDR_OWVAR 20
7178: PUSH
7179: LD_VAR 0 1
7183: ST_TO_ADDR
// uc_nation = nation ;
7184: LD_ADDR_OWVAR 21
7188: PUSH
7189: LD_VAR 0 2
7193: ST_TO_ADDR
// hc_name =  ;
7194: LD_ADDR_OWVAR 26
7198: PUSH
7199: LD_STRING 
7201: ST_TO_ADDR
// hc_gallery =  ;
7202: LD_ADDR_OWVAR 33
7206: PUSH
7207: LD_STRING 
7209: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7210: LD_INT 0
7212: PPUSH
7213: LD_INT 5
7215: PPUSH
7216: LD_VAR 0 8
7220: PPUSH
7221: CALL_OW 380
// un = CreateHuman ;
7225: LD_ADDR_VAR 0 15
7229: PUSH
7230: CALL_OW 44
7234: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7235: LD_VAR 0 15
7239: PPUSH
7240: LD_VAR 0 9
7244: PPUSH
7245: LD_INT 0
7247: PPUSH
7248: CALL_OW 49
// end ;
7252: GO 7171
7254: POP
7255: POP
// for i = 1 to bazookCount do
7256: LD_ADDR_VAR 0 13
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_VAR 0 5
7270: PUSH
7271: FOR_TO
7272: IFFALSE 7354
// begin uc_side = side ;
7274: LD_ADDR_OWVAR 20
7278: PUSH
7279: LD_VAR 0 1
7283: ST_TO_ADDR
// uc_nation = nation ;
7284: LD_ADDR_OWVAR 21
7288: PUSH
7289: LD_VAR 0 2
7293: ST_TO_ADDR
// hc_name =  ;
7294: LD_ADDR_OWVAR 26
7298: PUSH
7299: LD_STRING 
7301: ST_TO_ADDR
// hc_gallery =  ;
7302: LD_ADDR_OWVAR 33
7306: PUSH
7307: LD_STRING 
7309: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7310: LD_INT 0
7312: PPUSH
7313: LD_INT 9
7315: PPUSH
7316: LD_VAR 0 8
7320: PPUSH
7321: CALL_OW 380
// un = CreateHuman ;
7325: LD_ADDR_VAR 0 15
7329: PUSH
7330: CALL_OW 44
7334: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7335: LD_VAR 0 15
7339: PPUSH
7340: LD_VAR 0 9
7344: PPUSH
7345: LD_INT 0
7347: PPUSH
7348: CALL_OW 49
// end ;
7352: GO 7271
7354: POP
7355: POP
// for i = 1 to mortalCount do
7356: LD_ADDR_VAR 0 13
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_VAR 0 6
7370: PUSH
7371: FOR_TO
7372: IFFALSE 7454
// begin uc_side = side ;
7374: LD_ADDR_OWVAR 20
7378: PUSH
7379: LD_VAR 0 1
7383: ST_TO_ADDR
// uc_nation = nation ;
7384: LD_ADDR_OWVAR 21
7388: PUSH
7389: LD_VAR 0 2
7393: ST_TO_ADDR
// hc_name =  ;
7394: LD_ADDR_OWVAR 26
7398: PUSH
7399: LD_STRING 
7401: ST_TO_ADDR
// hc_gallery =  ;
7402: LD_ADDR_OWVAR 33
7406: PUSH
7407: LD_STRING 
7409: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7410: LD_INT 0
7412: PPUSH
7413: LD_INT 8
7415: PPUSH
7416: LD_VAR 0 8
7420: PPUSH
7421: CALL_OW 380
// un = CreateHuman ;
7425: LD_ADDR_VAR 0 15
7429: PUSH
7430: CALL_OW 44
7434: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7435: LD_VAR 0 15
7439: PPUSH
7440: LD_VAR 0 9
7444: PPUSH
7445: LD_INT 0
7447: PPUSH
7448: CALL_OW 49
// end ;
7452: GO 7371
7454: POP
7455: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7456: LD_ADDR_VAR 0 17
7460: PUSH
7461: LD_INT 22
7463: PUSH
7464: LD_VAR 0 1
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 25
7475: PUSH
7476: LD_INT 4
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PPUSH
7487: CALL_OW 69
7491: ST_TO_ADDR
// for i in medic_list do
7492: LD_ADDR_VAR 0 13
7496: PUSH
7497: LD_VAR 0 17
7501: PUSH
7502: FOR_IN
7503: IFFALSE 7521
// ComMoveToArea ( i , healArea ) ;
7505: LD_VAR 0 13
7509: PPUSH
7510: LD_VAR 0 10
7514: PPUSH
7515: CALL_OW 113
7519: GO 7502
7521: POP
7522: POP
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7530: LD_ADDR_VAR 0 16
7534: PUSH
7535: LD_INT 22
7537: PUSH
7538: LD_VAR 0 1
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: LD_INT 24
7555: PUSH
7556: LD_INT 550
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 24
7569: PUSH
7570: LD_INT 250
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 69
7590: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7591: LD_ADDR_VAR 0 18
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 1
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 2
7610: PUSH
7611: LD_INT 25
7613: PUSH
7614: LD_INT 1
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 5
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 25
7633: PUSH
7634: LD_INT 8
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 25
7643: PUSH
7644: LD_INT 9
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 24
7660: PUSH
7661: LD_INT 1000
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 69
7677: ST_TO_ADDR
// if medicCount > 0 then
7678: LD_VAR 0 7
7682: PUSH
7683: LD_INT 0
7685: GREATER
7686: IFFALSE 7760
// begin if damageUnit_list > 0 then
7688: LD_VAR 0 16
7692: PUSH
7693: LD_INT 0
7695: GREATER
7696: IFFALSE 7760
// begin for i in damageUnit_list do
7698: LD_ADDR_VAR 0 13
7702: PUSH
7703: LD_VAR 0 16
7707: PUSH
7708: FOR_IN
7709: IFFALSE 7758
// begin ComMoveToArea ( i , healArea ) ;
7711: LD_VAR 0 13
7715: PPUSH
7716: LD_VAR 0 10
7720: PPUSH
7721: CALL_OW 113
// for j in medic_list do
7725: LD_ADDR_VAR 0 14
7729: PUSH
7730: LD_VAR 0 17
7734: PUSH
7735: FOR_IN
7736: IFFALSE 7754
// AddComHeal ( j , i ) ;
7738: LD_VAR 0 14
7742: PPUSH
7743: LD_VAR 0 13
7747: PPUSH
7748: CALL_OW 188
7752: GO 7735
7754: POP
7755: POP
// end ;
7756: GO 7708
7758: POP
7759: POP
// end ; end ; for i in soldiersOK_list do
7760: LD_ADDR_VAR 0 13
7764: PUSH
7765: LD_VAR 0 18
7769: PUSH
7770: FOR_IN
7771: IFFALSE 7947
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7773: LD_ADDR_VAR 0 21
7777: PUSH
7778: LD_INT 22
7780: PUSH
7781: LD_VAR 0 11
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: PPUSH
7795: LD_VAR 0 13
7799: PPUSH
7800: CALL_OW 74
7804: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7805: LD_ADDR_VAR 0 22
7809: PUSH
7810: LD_INT 22
7812: PUSH
7813: LD_VAR 0 11
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 2
7824: PUSH
7825: LD_INT 59
7827: PUSH
7828: EMPTY
7829: LIST
7830: PUSH
7831: LD_INT 21
7833: PUSH
7834: LD_INT 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: PPUSH
7869: LD_VAR 0 13
7873: PPUSH
7874: CALL_OW 74
7878: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7879: LD_VAR 0 13
7883: PPUSH
7884: LD_VAR 0 21
7888: PPUSH
7889: CALL_OW 296
7893: PUSH
7894: LD_INT 8
7896: PLUS
7897: PUSH
7898: LD_VAR 0 13
7902: PPUSH
7903: LD_VAR 0 22
7907: PPUSH
7908: CALL_OW 296
7912: LESS
7913: IFFALSE 7931
// begin ComAttackUnit ( i , target1 ) ;
7915: LD_VAR 0 13
7919: PPUSH
7920: LD_VAR 0 21
7924: PPUSH
7925: CALL_OW 115
// end else
7929: GO 7945
// begin ComAttackUnit ( i , target2 ) ;
7931: LD_VAR 0 13
7935: PPUSH
7936: LD_VAR 0 22
7940: PPUSH
7941: CALL_OW 115
// end ; end ;
7945: GO 7770
7947: POP
7948: POP
// until soldiersOK_list = [ ] ;
7949: LD_VAR 0 18
7953: PUSH
7954: EMPTY
7955: EQUAL
7956: IFFALSE 7523
// end ;
7958: LD_VAR 0 12
7962: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7963: LD_INT 0
7965: PPUSH
7966: PPUSH
7967: PPUSH
7968: PPUSH
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
7973: PPUSH
7974: PPUSH
7975: PPUSH
// amChassisTab = [ ] ;
7976: LD_ADDR_VAR 0 19
7980: PUSH
7981: EMPTY
7982: ST_TO_ADDR
// arChassisTab = [ ] ;
7983: LD_ADDR_VAR 0 18
7987: PUSH
7988: EMPTY
7989: ST_TO_ADDR
// ruChassisTab = [ ] ;
7990: LD_ADDR_VAR 0 17
7994: PUSH
7995: EMPTY
7996: ST_TO_ADDR
// for i = 1 to vehCount do
7997: LD_ADDR_VAR 0 13
8001: PUSH
8002: DOUBLE
8003: LD_INT 1
8005: DEC
8006: ST_TO_ADDR
8007: LD_VAR 0 3
8011: PUSH
8012: FOR_TO
8013: IFFALSE 9437
// begin wait ( 0 0$01 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// if nation = 1 then
8022: LD_VAR 0 5
8026: PUSH
8027: LD_INT 1
8029: EQUAL
8030: IFFALSE 8511
// begin uc_side = side ;
8032: LD_ADDR_OWVAR 20
8036: PUSH
8037: LD_VAR 0 2
8041: ST_TO_ADDR
// uc_nation = nation ;
8042: LD_ADDR_OWVAR 21
8046: PUSH
8047: LD_VAR 0 5
8051: ST_TO_ADDR
// vc_engine = vehengine ;
8052: LD_ADDR_OWVAR 39
8056: PUSH
8057: LD_VAR 0 6
8061: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8062: LD_ADDR_OWVAR 40
8066: PUSH
8067: LD_VAR 0 10
8071: PUSH
8072: LD_INT 1
8074: PPUSH
8075: LD_VAR 0 10
8079: PPUSH
8080: CALL_OW 12
8084: ARRAY
8085: ST_TO_ADDR
// for j = 1 to AMWeapon do
8086: LD_ADDR_VAR 0 14
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 10
8100: PUSH
8101: FOR_TO
8102: IFFALSE 8403
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8104: LD_VAR 0 10
8108: PUSH
8109: LD_VAR 0 14
8113: ARRAY
8114: PUSH
8115: LD_INT 2
8117: EQUAL
8118: PUSH
8119: LD_VAR 0 10
8123: PUSH
8124: LD_VAR 0 14
8128: ARRAY
8129: PUSH
8130: LD_INT 3
8132: EQUAL
8133: OR
8134: IFFALSE 8187
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8136: LD_ADDR_VAR 0 19
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: LD_INT 5
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8163: LD_ADDR_OWVAR 37
8167: PUSH
8168: LD_VAR 0 19
8172: PUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_VAR 0 19
8180: PPUSH
8181: CALL_OW 12
8185: ARRAY
8186: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8187: LD_VAR 0 10
8191: PUSH
8192: LD_VAR 0 14
8196: ARRAY
8197: PUSH
8198: LD_INT 4
8200: EQUAL
8201: PUSH
8202: LD_VAR 0 10
8206: PUSH
8207: LD_VAR 0 14
8211: ARRAY
8212: PUSH
8213: LD_INT 5
8215: EQUAL
8216: OR
8217: PUSH
8218: LD_VAR 0 10
8222: PUSH
8223: LD_VAR 0 14
8227: ARRAY
8228: PUSH
8229: LD_INT 9
8231: EQUAL
8232: OR
8233: PUSH
8234: LD_VAR 0 10
8238: PUSH
8239: LD_VAR 0 14
8243: ARRAY
8244: PUSH
8245: LD_INT 11
8247: EQUAL
8248: OR
8249: PUSH
8250: LD_VAR 0 10
8254: PUSH
8255: LD_VAR 0 14
8259: ARRAY
8260: PUSH
8261: LD_INT 7
8263: EQUAL
8264: OR
8265: IFFALSE 8314
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8267: LD_ADDR_VAR 0 19
8271: PUSH
8272: LD_INT 2
8274: PUSH
8275: LD_INT 3
8277: PUSH
8278: LD_INT 4
8280: PUSH
8281: LD_INT 5
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8290: LD_ADDR_OWVAR 37
8294: PUSH
8295: LD_VAR 0 19
8299: PUSH
8300: LD_INT 1
8302: PPUSH
8303: LD_VAR 0 19
8307: PPUSH
8308: CALL_OW 12
8312: ARRAY
8313: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8314: LD_VAR 0 10
8318: PUSH
8319: LD_VAR 0 14
8323: ARRAY
8324: PUSH
8325: LD_INT 8
8327: EQUAL
8328: PUSH
8329: LD_VAR 0 10
8333: PUSH
8334: LD_VAR 0 14
8338: ARRAY
8339: PUSH
8340: LD_INT 6
8342: EQUAL
8343: OR
8344: PUSH
8345: LD_VAR 0 10
8349: PUSH
8350: LD_VAR 0 14
8354: ARRAY
8355: PUSH
8356: LD_INT 10
8358: EQUAL
8359: OR
8360: IFFALSE 8401
// begin amChassisTab = [ 4 , 5 ] ;
8362: LD_ADDR_VAR 0 19
8366: PUSH
8367: LD_INT 4
8369: PUSH
8370: LD_INT 5
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8377: LD_ADDR_OWVAR 37
8381: PUSH
8382: LD_VAR 0 19
8386: PUSH
8387: LD_INT 1
8389: PPUSH
8390: LD_VAR 0 19
8394: PPUSH
8395: CALL_OW 12
8399: ARRAY
8400: ST_TO_ADDR
// end ; end ;
8401: GO 8101
8403: POP
8404: POP
// veh = CreateVehicle ;
8405: LD_ADDR_VAR 0 16
8409: PUSH
8410: CALL_OW 45
8414: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8415: LD_VAR 0 16
8419: PPUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: LD_INT 0
8427: PPUSH
8428: CALL_OW 49
// if vc_control = 1 then
8432: LD_OWVAR 38
8436: PUSH
8437: LD_INT 1
8439: EQUAL
8440: IFFALSE 8497
// begin hc_gallery =  ;
8442: LD_ADDR_OWVAR 33
8446: PUSH
8447: LD_STRING 
8449: ST_TO_ADDR
// hc_name =  ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING 
8457: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8458: LD_INT 0
8460: PPUSH
8461: LD_INT 3
8463: PPUSH
8464: LD_VAR 0 4
8468: PPUSH
8469: CALL_OW 380
// un = CreateHuman ;
8473: LD_ADDR_VAR 0 15
8477: PUSH
8478: CALL_OW 44
8482: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8483: LD_VAR 0 15
8487: PPUSH
8488: LD_VAR 0 16
8492: PPUSH
8493: CALL_OW 52
// end ; i = i + 1 ;
8497: LD_ADDR_VAR 0 13
8501: PUSH
8502: LD_VAR 0 13
8506: PUSH
8507: LD_INT 1
8509: PLUS
8510: ST_TO_ADDR
// end ; if nation = 2 then
8511: LD_VAR 0 5
8515: PUSH
8516: LD_INT 2
8518: EQUAL
8519: IFFALSE 9021
// begin uc_side = side ;
8521: LD_ADDR_OWVAR 20
8525: PUSH
8526: LD_VAR 0 2
8530: ST_TO_ADDR
// uc_nation = nation ;
8531: LD_ADDR_OWVAR 21
8535: PUSH
8536: LD_VAR 0 5
8540: ST_TO_ADDR
// vc_engine = vehengine ;
8541: LD_ADDR_OWVAR 39
8545: PUSH
8546: LD_VAR 0 6
8550: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8551: LD_INT 22
8553: PUSH
8554: LD_VAR 0 2
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 21
8565: PUSH
8566: LD_INT 2
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: LD_INT 33
8575: PUSH
8576: LD_INT 2
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PUSH
8583: LD_INT 50
8585: PUSH
8586: EMPTY
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PPUSH
8595: CALL_OW 69
8599: PUSH
8600: LD_INT 8
8602: LESSEQUAL
8603: IFFALSE 8631
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8605: LD_ADDR_OWVAR 38
8609: PUSH
8610: LD_VAR 0 7
8614: PUSH
8615: LD_INT 1
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: CALL_OW 12
8627: ARRAY
8628: ST_TO_ADDR
8629: GO 8639
// vc_control = control_apeman ;
8631: LD_ADDR_OWVAR 38
8635: PUSH
8636: LD_INT 5
8638: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8639: LD_ADDR_OWVAR 40
8643: PUSH
8644: LD_VAR 0 9
8648: PUSH
8649: LD_INT 1
8651: PPUSH
8652: LD_VAR 0 9
8656: PPUSH
8657: CALL_OW 12
8661: ARRAY
8662: ST_TO_ADDR
// for j = 1 to ARWeapons do
8663: LD_ADDR_VAR 0 14
8667: PUSH
8668: DOUBLE
8669: LD_INT 1
8671: DEC
8672: ST_TO_ADDR
8673: LD_VAR 0 9
8677: PUSH
8678: FOR_TO
8679: IFFALSE 8913
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8681: LD_VAR 0 9
8685: PUSH
8686: LD_VAR 0 14
8690: ARRAY
8691: PUSH
8692: LD_INT 24
8694: EQUAL
8695: PUSH
8696: LD_VAR 0 9
8700: PUSH
8701: LD_VAR 0 14
8705: ARRAY
8706: PUSH
8707: LD_INT 22
8709: EQUAL
8710: OR
8711: PUSH
8712: LD_VAR 0 9
8716: PUSH
8717: LD_VAR 0 14
8721: ARRAY
8722: PUSH
8723: LD_INT 23
8725: EQUAL
8726: OR
8727: PUSH
8728: LD_VAR 0 9
8732: PUSH
8733: LD_VAR 0 14
8737: ARRAY
8738: PUSH
8739: LD_INT 30
8741: EQUAL
8742: OR
8743: IFFALSE 8792
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8745: LD_ADDR_VAR 0 18
8749: PUSH
8750: LD_INT 11
8752: PUSH
8753: LD_INT 12
8755: PUSH
8756: LD_INT 13
8758: PUSH
8759: LD_INT 14
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8768: LD_ADDR_OWVAR 37
8772: PUSH
8773: LD_VAR 0 18
8777: PUSH
8778: LD_INT 1
8780: PPUSH
8781: LD_VAR 0 18
8785: PPUSH
8786: CALL_OW 12
8790: ARRAY
8791: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8792: LD_VAR 0 9
8796: PUSH
8797: LD_VAR 0 14
8801: ARRAY
8802: PUSH
8803: LD_INT 29
8805: EQUAL
8806: PUSH
8807: LD_VAR 0 9
8811: PUSH
8812: LD_VAR 0 14
8816: ARRAY
8817: PUSH
8818: LD_INT 28
8820: EQUAL
8821: OR
8822: PUSH
8823: LD_VAR 0 9
8827: PUSH
8828: LD_VAR 0 14
8832: ARRAY
8833: PUSH
8834: LD_INT 27
8836: EQUAL
8837: OR
8838: PUSH
8839: LD_VAR 0 9
8843: PUSH
8844: LD_VAR 0 14
8848: ARRAY
8849: PUSH
8850: LD_INT 26
8852: EQUAL
8853: OR
8854: PUSH
8855: LD_VAR 0 9
8859: PUSH
8860: LD_VAR 0 14
8864: ARRAY
8865: PUSH
8866: LD_INT 25
8868: EQUAL
8869: OR
8870: IFFALSE 8911
// begin arChassisTab = [ 13 , 14 ] ;
8872: LD_ADDR_VAR 0 18
8876: PUSH
8877: LD_INT 13
8879: PUSH
8880: LD_INT 14
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8887: LD_ADDR_OWVAR 37
8891: PUSH
8892: LD_VAR 0 18
8896: PUSH
8897: LD_INT 1
8899: PPUSH
8900: LD_VAR 0 18
8904: PPUSH
8905: CALL_OW 12
8909: ARRAY
8910: ST_TO_ADDR
// end ; end ;
8911: GO 8678
8913: POP
8914: POP
// veh = CreateVehicle ;
8915: LD_ADDR_VAR 0 16
8919: PUSH
8920: CALL_OW 45
8924: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8925: LD_VAR 0 16
8929: PPUSH
8930: LD_VAR 0 1
8934: PPUSH
8935: LD_INT 0
8937: PPUSH
8938: CALL_OW 49
// if vc_control = 1 then
8942: LD_OWVAR 38
8946: PUSH
8947: LD_INT 1
8949: EQUAL
8950: IFFALSE 9007
// begin hc_gallery =  ;
8952: LD_ADDR_OWVAR 33
8956: PUSH
8957: LD_STRING 
8959: ST_TO_ADDR
// hc_name =  ;
8960: LD_ADDR_OWVAR 26
8964: PUSH
8965: LD_STRING 
8967: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8968: LD_INT 0
8970: PPUSH
8971: LD_INT 3
8973: PPUSH
8974: LD_VAR 0 4
8978: PPUSH
8979: CALL_OW 380
// un = CreateHuman ;
8983: LD_ADDR_VAR 0 15
8987: PUSH
8988: CALL_OW 44
8992: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8993: LD_VAR 0 15
8997: PPUSH
8998: LD_VAR 0 16
9002: PPUSH
9003: CALL_OW 52
// end ; i = i + 1 ;
9007: LD_ADDR_VAR 0 13
9011: PUSH
9012: LD_VAR 0 13
9016: PUSH
9017: LD_INT 1
9019: PLUS
9020: ST_TO_ADDR
// end ; if nation = 3 then
9021: LD_VAR 0 5
9025: PUSH
9026: LD_INT 3
9028: EQUAL
9029: IFFALSE 9435
// begin uc_side = side ;
9031: LD_ADDR_OWVAR 20
9035: PUSH
9036: LD_VAR 0 2
9040: ST_TO_ADDR
// uc_nation = nation ;
9041: LD_ADDR_OWVAR 21
9045: PUSH
9046: LD_VAR 0 5
9050: ST_TO_ADDR
// vc_engine = vehengine ;
9051: LD_ADDR_OWVAR 39
9055: PUSH
9056: LD_VAR 0 6
9060: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
9061: LD_ADDR_OWVAR 38
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_INT 1
9073: PPUSH
9074: LD_VAR 0 7
9078: PPUSH
9079: CALL_OW 12
9083: ARRAY
9084: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9085: LD_ADDR_OWVAR 40
9089: PUSH
9090: LD_VAR 0 8
9094: PUSH
9095: LD_INT 1
9097: PPUSH
9098: LD_VAR 0 8
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: ST_TO_ADDR
// for j = 1 to RuWeapons do
9109: LD_ADDR_VAR 0 14
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_VAR 0 8
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9311
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9127: LD_VAR 0 8
9131: PUSH
9132: LD_VAR 0 14
9136: ARRAY
9137: PUSH
9138: LD_INT 42
9140: EQUAL
9141: PUSH
9142: LD_VAR 0 8
9146: PUSH
9147: LD_VAR 0 14
9151: ARRAY
9152: PUSH
9153: LD_INT 43
9155: EQUAL
9156: OR
9157: PUSH
9158: LD_VAR 0 8
9162: PUSH
9163: LD_VAR 0 14
9167: ARRAY
9168: PUSH
9169: LD_INT 44
9171: EQUAL
9172: OR
9173: PUSH
9174: LD_VAR 0 8
9178: PUSH
9179: LD_VAR 0 14
9183: ARRAY
9184: PUSH
9185: LD_INT 45
9187: EQUAL
9188: OR
9189: PUSH
9190: LD_VAR 0 8
9194: PUSH
9195: LD_VAR 0 14
9199: ARRAY
9200: PUSH
9201: LD_INT 49
9203: EQUAL
9204: OR
9205: IFFALSE 9242
// begin ruChassisTab = [ 24 ] ;
9207: LD_ADDR_VAR 0 17
9211: PUSH
9212: LD_INT 24
9214: PUSH
9215: EMPTY
9216: LIST
9217: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9218: LD_ADDR_OWVAR 37
9222: PUSH
9223: LD_VAR 0 17
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_VAR 0 17
9235: PPUSH
9236: CALL_OW 12
9240: ARRAY
9241: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9242: LD_VAR 0 8
9246: PUSH
9247: LD_VAR 0 14
9251: ARRAY
9252: PUSH
9253: LD_INT 46
9255: EQUAL
9256: PUSH
9257: LD_VAR 0 8
9261: PUSH
9262: LD_VAR 0 14
9266: ARRAY
9267: PUSH
9268: LD_INT 47
9270: EQUAL
9271: OR
9272: IFFALSE 9309
// begin ruChassisTab = [ 24 ] ;
9274: LD_ADDR_VAR 0 17
9278: PUSH
9279: LD_INT 24
9281: PUSH
9282: EMPTY
9283: LIST
9284: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9285: LD_ADDR_OWVAR 37
9289: PUSH
9290: LD_VAR 0 17
9294: PUSH
9295: LD_INT 1
9297: PPUSH
9298: LD_VAR 0 17
9302: PPUSH
9303: CALL_OW 12
9307: ARRAY
9308: ST_TO_ADDR
// end ; end ;
9309: GO 9124
9311: POP
9312: POP
// veh = CreateVehicle ;
9313: LD_ADDR_VAR 0 16
9317: PUSH
9318: CALL_OW 45
9322: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9323: LD_VAR 0 16
9327: PPUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: LD_INT 0
9335: PPUSH
9336: CALL_OW 49
// if vc_control = 1 then
9340: LD_OWVAR 38
9344: PUSH
9345: LD_INT 1
9347: EQUAL
9348: IFFALSE 9435
// begin if uc_side = 8 then
9350: LD_OWVAR 20
9354: PUSH
9355: LD_INT 8
9357: EQUAL
9358: IFFALSE 9370
// uc_nation = 2 else
9360: LD_ADDR_OWVAR 21
9364: PUSH
9365: LD_INT 2
9367: ST_TO_ADDR
9368: GO 9380
// uc_nation = nation ;
9370: LD_ADDR_OWVAR 21
9374: PUSH
9375: LD_VAR 0 5
9379: ST_TO_ADDR
// hc_gallery =  ;
9380: LD_ADDR_OWVAR 33
9384: PUSH
9385: LD_STRING 
9387: ST_TO_ADDR
// hc_name =  ;
9388: LD_ADDR_OWVAR 26
9392: PUSH
9393: LD_STRING 
9395: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9396: LD_INT 0
9398: PPUSH
9399: LD_INT 3
9401: PPUSH
9402: LD_VAR 0 4
9406: PPUSH
9407: CALL_OW 380
// un = CreateHuman ;
9411: LD_ADDR_VAR 0 15
9415: PUSH
9416: CALL_OW 44
9420: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9421: LD_VAR 0 15
9425: PPUSH
9426: LD_VAR 0 16
9430: PPUSH
9431: CALL_OW 52
// end ; end ; end ;
9435: GO 8012
9437: POP
9438: POP
// repeat wait ( 0 0$1 ) ;
9439: LD_INT 35
9441: PPUSH
9442: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9446: LD_ADDR_VAR 0 20
9450: PUSH
9451: LD_INT 22
9453: PUSH
9454: LD_VAR 0 2
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 24
9475: PUSH
9476: LD_INT 250
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 2
9485: PUSH
9486: LD_INT 34
9488: PUSH
9489: LD_INT 25
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 34
9498: PUSH
9499: LD_INT 26
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 34
9508: PUSH
9509: LD_INT 27
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 34
9518: PUSH
9519: LD_INT 28
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 34
9528: PUSH
9529: LD_INT 29
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 34
9538: PUSH
9539: LD_INT 46
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 34
9548: PUSH
9549: LD_INT 44
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 34
9558: PUSH
9559: LD_INT 45
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 34
9568: PUSH
9569: LD_INT 47
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 69
9598: ST_TO_ADDR
// if vehicleOK_list > 0 then
9599: LD_VAR 0 20
9603: PUSH
9604: LD_INT 0
9606: GREATER
9607: IFFALSE 9826
// begin for i in vehicleOK_list do
9609: LD_ADDR_VAR 0 13
9613: PUSH
9614: LD_VAR 0 20
9618: PUSH
9619: FOR_IN
9620: IFFALSE 9824
// begin if GetSide ( i ) <> side then
9622: LD_VAR 0 13
9626: PPUSH
9627: CALL_OW 255
9631: PUSH
9632: LD_VAR 0 2
9636: NONEQUAL
9637: IFFALSE 9650
// begin ComStop ( i ) ;
9639: LD_VAR 0 13
9643: PPUSH
9644: CALL_OW 141
// continue ;
9648: GO 9619
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9650: LD_ADDR_VAR 0 21
9654: PUSH
9655: LD_INT 22
9657: PUSH
9658: LD_VAR 0 11
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PPUSH
9667: CALL_OW 69
9671: PPUSH
9672: LD_VAR 0 13
9676: PPUSH
9677: CALL_OW 74
9681: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9682: LD_ADDR_VAR 0 22
9686: PUSH
9687: LD_INT 22
9689: PUSH
9690: LD_VAR 0 11
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 59
9704: PUSH
9705: EMPTY
9706: LIST
9707: PUSH
9708: LD_INT 21
9710: PUSH
9711: LD_INT 1
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: PUSH
9718: LD_INT 21
9720: PUSH
9721: LD_INT 2
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: EMPTY
9739: LIST
9740: PPUSH
9741: CALL_OW 69
9745: PPUSH
9746: LD_VAR 0 13
9750: PPUSH
9751: CALL_OW 74
9755: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9756: LD_VAR 0 13
9760: PPUSH
9761: LD_VAR 0 21
9765: PPUSH
9766: CALL_OW 296
9770: PUSH
9771: LD_INT 8
9773: PLUS
9774: PUSH
9775: LD_VAR 0 13
9779: PPUSH
9780: LD_VAR 0 22
9784: PPUSH
9785: CALL_OW 296
9789: LESS
9790: IFFALSE 9808
// begin ComAttackUnit ( i , target1 ) ;
9792: LD_VAR 0 13
9796: PPUSH
9797: LD_VAR 0 21
9801: PPUSH
9802: CALL_OW 115
// end else
9806: GO 9822
// begin ComAttackUnit ( i , target2 ) ;
9808: LD_VAR 0 13
9812: PPUSH
9813: LD_VAR 0 22
9817: PPUSH
9818: CALL_OW 115
// end ; end ;
9822: GO 9619
9824: POP
9825: POP
// end ; until vehicleOK_list = 0 ;
9826: LD_VAR 0 20
9830: PUSH
9831: LD_INT 0
9833: EQUAL
9834: IFFALSE 9439
// end ;
9836: LD_VAR 0 12
9840: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9841: LD_INT 0
9843: PPUSH
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
9848: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9849: LD_ADDR_VAR 0 6
9853: PUSH
9854: LD_INT 22
9856: PUSH
9857: LD_VAR 0 1
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 29
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 69
9884: ST_TO_ADDR
// if veh_list = 0 then
9885: LD_VAR 0 6
9889: PUSH
9890: LD_INT 0
9892: EQUAL
9893: IFFALSE 9897
// exit ;
9895: GO 10102
// if veh_list > 0 then
9897: LD_VAR 0 6
9901: PUSH
9902: LD_INT 0
9904: GREATER
9905: IFFALSE 10102
// begin for i in veh_List do
9907: LD_ADDR_VAR 0 4
9911: PUSH
9912: LD_VAR 0 6
9916: PUSH
9917: FOR_IN
9918: IFFALSE 10100
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9920: LD_ADDR_VAR 0 7
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_VAR 0 2
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 24
9939: PUSH
9940: LD_INT 250
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 2
9949: PUSH
9950: LD_INT 59
9952: PUSH
9953: EMPTY
9954: LIST
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 21
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: PPUSH
9990: CALL_OW 69
9994: PPUSH
9995: LD_VAR 0 4
9999: PPUSH
10000: CALL_OW 74
10004: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
10005: LD_VAR 0 4
10009: PPUSH
10010: LD_VAR 0 7
10014: PPUSH
10015: CALL_OW 115
// if not HasTask ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL_OW 314
10028: NOT
10029: IFFALSE 10098
// begin wait ( 0 0$0.1 ) ;
10031: LD_INT 4
10033: PPUSH
10034: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
10038: LD_ADDR_VAR 0 8
10042: PUSH
10043: LD_INT 22
10045: PUSH
10046: LD_VAR 0 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 24
10057: PUSH
10058: LD_INT 250
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PPUSH
10074: LD_VAR 0 4
10078: PPUSH
10079: CALL_OW 74
10083: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10084: LD_VAR 0 4
10088: PPUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: CALL_OW 115
// end ; end ;
10098: GO 9917
10100: POP
10101: POP
// end ; end ; end_of_file
10102: LD_VAR 0 3
10106: RET
// every 0 0$1 do
10107: GO 10109
10109: DISABLE
// begin enable ;
10110: ENABLE
// IntBazooka ( 7 , 1 ) ;
10111: LD_INT 7
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL 6595 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10121: LD_INT 8
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL 9841 0 2
// end ;
10131: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10132: LD_INT 22
10134: PUSH
10135: LD_INT 3
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 21
10144: PUSH
10145: LD_INT 2
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 50
10154: PUSH
10155: EMPTY
10156: LIST
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: LD_INT 34
10163: PUSH
10164: LD_INT 46
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 34
10173: PUSH
10174: LD_INT 44
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 34
10183: PUSH
10184: LD_INT 45
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 34
10193: PUSH
10194: LD_INT 47
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: PUSH
10219: LD_INT 0
10221: GREATER
10222: PUSH
10223: LD_INT 22
10225: PUSH
10226: LD_INT 3
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 21
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 50
10245: PUSH
10246: EMPTY
10247: LIST
10248: PUSH
10249: LD_INT 34
10251: PUSH
10252: LD_INT 49
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: PPUSH
10265: CALL_OW 69
10269: PUSH
10270: LD_INT 0
10272: GREATER
10273: AND
10274: IFFALSE 10446
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
// begin enable ;
10283: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10284: LD_ADDR_VAR 0 1
10288: PUSH
10289: LD_INT 22
10291: PUSH
10292: LD_INT 3
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 21
10301: PUSH
10302: LD_INT 2
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PUSH
10309: LD_INT 50
10311: PUSH
10312: EMPTY
10313: LIST
10314: PUSH
10315: LD_INT 2
10317: PUSH
10318: LD_INT 34
10320: PUSH
10321: LD_INT 46
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 34
10330: PUSH
10331: LD_INT 44
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 34
10340: PUSH
10341: LD_INT 45
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 34
10350: PUSH
10351: LD_INT 47
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10376: LD_ADDR_VAR 0 2
10380: PUSH
10381: LD_INT 22
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 21
10393: PUSH
10394: LD_INT 2
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 50
10403: PUSH
10404: EMPTY
10405: LIST
10406: PUSH
10407: LD_INT 34
10409: PUSH
10410: LD_INT 49
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 69
10427: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10428: LD_VAR 0 2
10432: PPUSH
10433: LD_VAR 0 1
10437: PUSH
10438: LD_INT 1
10440: ARRAY
10441: PPUSH
10442: CALL_OW 112
// end ; end_of_file
10446: PPOPN 2
10448: END
// every 0 0$1 trigger eventVar4 = 1 do
10449: LD_EXP 40
10453: PUSH
10454: LD_INT 1
10456: EQUAL
10457: IFFALSE 11251
10459: GO 10461
10461: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10462: LD_EXP 1
10466: PPUSH
10467: LD_STRING D9b-JMM-1
10469: PPUSH
10470: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10474: LD_EXP 15
10478: PPUSH
10479: LD_STRING D9b-Pow-1
10481: PPUSH
10482: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10486: LD_EXP 1
10490: PPUSH
10491: LD_STRING D9b-JMM-2
10493: PPUSH
10494: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10498: LD_EXP 15
10502: PPUSH
10503: LD_STRING D9b-Pow-2
10505: PPUSH
10506: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10510: LD_EXP 1
10514: PPUSH
10515: LD_STRING D9b-JMM-3
10517: PPUSH
10518: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10522: LD_EXP 15
10526: PPUSH
10527: LD_STRING D9b-Pow-3
10529: PPUSH
10530: CALL_OW 94
// if burlakStatus = 1 then
10534: LD_EXP 28
10538: PUSH
10539: LD_INT 1
10541: EQUAL
10542: IFFALSE 10556
// begin AddMedal ( Burlak , 1 ) ;
10544: LD_STRING Burlak
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 101
// end else
10554: GO 10567
// begin AddMedal ( Burlak , - 1 ) ;
10556: LD_STRING Burlak
10558: PPUSH
10559: LD_INT 1
10561: NEG
10562: PPUSH
10563: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10567: LD_EXP 2
10571: PPUSH
10572: CALL_OW 302
10576: IFFALSE 10590
// begin AddMedal ( Stevens , 1 ) ;
10578: LD_STRING Stevens
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 101
// end else
10588: GO 10601
// begin AddMedal ( Stevens , - 1 ) ;
10590: LD_STRING Stevens
10592: PPUSH
10593: LD_INT 1
10595: NEG
10596: PPUSH
10597: CALL_OW 101
// end ; if radarOnSpot = 1 then
10601: LD_EXP 30
10605: PUSH
10606: LD_INT 1
10608: EQUAL
10609: IFFALSE 10623
// begin AddMedal ( Observation , 1 ) ;
10611: LD_STRING Observation
10613: PPUSH
10614: LD_INT 1
10616: PPUSH
10617: CALL_OW 101
// end else
10621: GO 10634
// begin AddMedal ( Observation , - 1 ) ;
10623: LD_STRING Observation
10625: PPUSH
10626: LD_INT 1
10628: NEG
10629: PPUSH
10630: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10634: LD_STRING MAIN
10636: PPUSH
10637: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10641: LD_EXP 28
10645: PPUSH
10646: LD_STRING 13_BurlakStatus_1
10648: PPUSH
10649: CALL_OW 39
// if IsLive ( Stevens ) then
10653: LD_EXP 2
10657: PPUSH
10658: CALL_OW 300
10662: IFFALSE 10676
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10664: LD_INT 1
10666: PPUSH
10667: LD_STRING 13_StevensStatus_1
10669: PPUSH
10670: CALL_OW 39
10674: GO 10686
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10676: LD_INT 0
10678: PPUSH
10679: LD_STRING 13_StevensStatus_1
10681: PPUSH
10682: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10686: LD_INT 22
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 21
10698: PUSH
10699: LD_INT 1
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 25
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 25
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 25
10731: PUSH
10732: LD_INT 3
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 25
10741: PUSH
10742: LD_INT 4
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 25
10751: PUSH
10752: LD_INT 5
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 8
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 69
10787: PPUSH
10788: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10792: LD_EXP 1
10796: PPUSH
10797: LD_EXP 36
10801: PUSH
10802: LD_STRING JMM
10804: STR
10805: PPUSH
10806: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10810: LD_EXP 8
10814: PPUSH
10815: LD_EXP 36
10819: PUSH
10820: LD_STRING Brown
10822: STR
10823: PPUSH
10824: CALL 6903 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10828: LD_EXP 4
10832: PPUSH
10833: LD_EXP 36
10837: PUSH
10838: LD_STRING Donaldson
10840: STR
10841: PPUSH
10842: CALL 6903 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10846: LD_EXP 5
10850: PPUSH
10851: LD_EXP 36
10855: PUSH
10856: LD_STRING Bobby
10858: STR
10859: PPUSH
10860: CALL 6903 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10864: LD_EXP 6
10868: PPUSH
10869: LD_EXP 36
10873: PUSH
10874: LD_STRING Cyrus
10876: STR
10877: PPUSH
10878: CALL 6903 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10882: LD_EXP 3
10886: PPUSH
10887: LD_EXP 36
10891: PUSH
10892: LD_STRING Lisa
10894: STR
10895: PPUSH
10896: CALL 6903 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10900: LD_EXP 13
10904: PPUSH
10905: LD_EXP 36
10909: PUSH
10910: LD_STRING Frank
10912: STR
10913: PPUSH
10914: CALL 6903 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10918: LD_EXP 14
10922: PPUSH
10923: LD_EXP 36
10927: PUSH
10928: LD_STRING Kikuchi
10930: STR
10931: PPUSH
10932: CALL 6903 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10936: LD_EXP 10
10940: PPUSH
10941: LD_EXP 36
10945: PUSH
10946: LD_STRING Houten
10948: STR
10949: PPUSH
10950: CALL 6903 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10954: LD_EXP 12
10958: PPUSH
10959: LD_EXP 36
10963: PUSH
10964: LD_STRING Gary
10966: STR
10967: PPUSH
10968: CALL 6903 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10972: LD_EXP 11
10976: PPUSH
10977: LD_EXP 36
10981: PUSH
10982: LD_STRING Cornell
10984: STR
10985: PPUSH
10986: CALL 6903 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10990: LD_EXP 7
10994: PPUSH
10995: LD_EXP 36
10999: PUSH
11000: LD_STRING Denis
11002: STR
11003: PPUSH
11004: CALL 6903 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11008: LD_EXP 9
11012: PPUSH
11013: LD_EXP 36
11017: PUSH
11018: LD_STRING Gladstone
11020: STR
11021: PPUSH
11022: CALL 6903 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
11026: LD_EXP 2
11030: PPUSH
11031: LD_EXP 36
11035: PUSH
11036: LD_STRING Stevens
11038: STR
11039: PPUSH
11040: CALL 6903 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
11044: LD_INT 50
11046: PUSH
11047: EMPTY
11048: LIST
11049: PUSH
11050: LD_INT 22
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 21
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: LD_INT 25
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 25
11085: PUSH
11086: LD_INT 2
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: LD_INT 25
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 25
11105: PUSH
11106: LD_INT 4
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 5
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 8
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: PUSH
11153: LD_EXP 1
11157: PUSH
11158: LD_EXP 8
11162: PUSH
11163: LD_EXP 4
11167: PUSH
11168: LD_EXP 5
11172: PUSH
11173: LD_EXP 6
11177: PUSH
11178: LD_EXP 3
11182: PUSH
11183: LD_EXP 13
11187: PUSH
11188: LD_EXP 9
11192: PUSH
11193: LD_EXP 14
11197: PUSH
11198: LD_EXP 7
11202: PUSH
11203: LD_EXP 10
11207: PUSH
11208: LD_EXP 12
11212: PUSH
11213: LD_EXP 11
11217: PUSH
11218: LD_EXP 2
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: DIFF
11239: PPUSH
11240: LD_STRING 13_other_survivors
11242: PPUSH
11243: CALL_OW 38
// YouWin ;
11247: CALL_OW 103
// end ; end_of_file
11251: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11252: LD_EXP 32
11256: PUSH
11257: LD_INT 2
11259: EQUAL
11260: IFFALSE 11396
11262: GO 11264
11264: DISABLE
11265: LD_INT 0
11267: PPUSH
11268: PPUSH
11269: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 21
11287: PUSH
11288: LD_INT 3
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: LD_INT 30
11300: PUSH
11301: LD_INT 0
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 30
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: PPUSH
11328: CALL_OW 69
11332: ST_TO_ADDR
// for i in tmp do
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_VAR 0 2
11342: PUSH
11343: FOR_IN
11344: IFFALSE 11377
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11346: LD_ADDR_VAR 0 3
11350: PUSH
11351: LD_VAR 0 3
11355: PUSH
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 274
11365: PPUSH
11366: LD_INT 3
11368: PPUSH
11369: CALL_OW 275
11373: PLUS
11374: ST_TO_ADDR
11375: GO 11343
11377: POP
11378: POP
// if yourSiberite < 79 then
11379: LD_VAR 0 3
11383: PUSH
11384: LD_INT 79
11386: LESS
11387: IFFALSE 11396
// YouLost ( siberite ) ;
11389: LD_STRING siberite
11391: PPUSH
11392: CALL_OW 104
// end ;
11396: PPOPN 3
11398: END
// every 0 0$1 trigger IsDead ( JMM ) do
11399: LD_EXP 1
11403: PPUSH
11404: CALL_OW 301
11408: IFFALSE 11420
11410: GO 11412
11412: DISABLE
// YouLost ( JMM ) ; end_of_file
11413: LD_STRING JMM
11415: PPUSH
11416: CALL_OW 104
11420: END
// every 8 8$0 + 7 7$0 do
11421: GO 11423
11423: DISABLE
// begin enable ;
11424: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11425: LD_INT 8
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: LD_INT 3
11436: PPUSH
11437: CALL_OW 12
11441: PPUSH
11442: LD_INT 0
11444: PPUSH
11445: LD_INT 0
11447: PPUSH
11448: LD_INT 2
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: LD_INT 4
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_OWVAR 67
11466: ARRAY
11467: PPUSH
11468: LD_INT 0
11470: PPUSH
11471: LD_INT 10
11473: PPUSH
11474: LD_INT 8
11476: PUSH
11477: LD_INT 9
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 1
11486: PPUSH
11487: LD_INT 2
11489: PPUSH
11490: CALL_OW 12
11494: ARRAY
11495: PPUSH
11496: LD_INT 12
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL 6943 0 11
// end ;
11506: END
// every 8 8$0 + 7 7$0 do
11507: GO 11509
11509: DISABLE
// begin enable ;
11510: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11511: LD_ADDR_EXP 33
11515: PUSH
11516: LD_EXP 33
11520: PUSH
11521: LD_INT 1
11523: PLUS
11524: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11525: LD_INT 8
11527: PUSH
11528: LD_INT 9
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 1
11537: PPUSH
11538: LD_INT 2
11540: PPUSH
11541: CALL_OW 12
11545: ARRAY
11546: PPUSH
11547: LD_INT 8
11549: PPUSH
11550: LD_INT 4
11552: PPUSH
11553: LD_INT 9
11555: PPUSH
11556: CALL_OW 12
11560: PUSH
11561: LD_INT 6
11563: PPUSH
11564: LD_INT 9
11566: PPUSH
11567: CALL_OW 12
11571: PUSH
11572: LD_INT 6
11574: PPUSH
11575: LD_INT 10
11577: PPUSH
11578: CALL_OW 12
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_OWVAR 67
11592: ARRAY
11593: PPUSH
11594: LD_INT 10
11596: PPUSH
11597: LD_INT 2
11599: PPUSH
11600: LD_INT 3
11602: PPUSH
11603: LD_INT 5
11605: PUSH
11606: LD_INT 2
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: EMPTY
11614: PPUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 26
11620: PUSH
11621: LD_INT 27
11623: PUSH
11624: LD_INT 28
11626: PUSH
11627: LD_INT 29
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PPUSH
11637: EMPTY
11638: PPUSH
11639: LD_INT 1
11641: PPUSH
11642: CALL 7963 0 11
// end ;
11646: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do
11647: LD_EXP 33
11651: PUSH
11652: LD_INT 4
11654: GREATEREQUAL
11655: IFFALSE 11760
11657: GO 11659
11659: DISABLE
// begin enable ;
11660: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11661: LD_ADDR_EXP 33
11665: PUSH
11666: LD_EXP 33
11670: PUSH
11671: LD_INT 1
11673: PLUS
11674: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
11675: LD_INT 8
11677: PUSH
11678: LD_INT 9
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 1
11687: PPUSH
11688: LD_INT 2
11690: PPUSH
11691: CALL_OW 12
11695: ARRAY
11696: PPUSH
11697: LD_INT 8
11699: PPUSH
11700: LD_INT 1
11702: PUSH
11703: LD_INT 2
11705: PUSH
11706: LD_INT 3
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: LD_OWVAR 67
11718: ARRAY
11719: PPUSH
11720: LD_INT 10
11722: PPUSH
11723: LD_INT 3
11725: PPUSH
11726: LD_INT 3
11728: PPUSH
11729: LD_INT 1
11731: PUSH
11732: LD_INT 1
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PPUSH
11739: LD_INT 47
11741: PUSH
11742: LD_INT 47
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: EMPTY
11750: PPUSH
11751: EMPTY
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL 7963 0 11
// end ;
11760: END
// every 1 1$0 trigger eventVar2 = 1 do
11761: LD_EXP 38
11765: PUSH
11766: LD_INT 1
11768: EQUAL
11769: IFFALSE 11871
11771: GO 11773
11773: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
11774: LD_INT 8
11776: PUSH
11777: LD_INT 9
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 1
11786: PPUSH
11787: LD_INT 2
11789: PPUSH
11790: CALL_OW 12
11794: ARRAY
11795: PPUSH
11796: LD_INT 3
11798: PPUSH
11799: LD_INT 6
11801: PUSH
11802: LD_INT 7
11804: PUSH
11805: LD_INT 8
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: PUSH
11813: LD_OWVAR 67
11817: ARRAY
11818: PPUSH
11819: LD_INT 10
11821: PPUSH
11822: LD_INT 3
11824: PPUSH
11825: LD_INT 3
11827: PPUSH
11828: LD_INT 3
11830: PUSH
11831: LD_INT 3
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: LD_INT 46
11840: PUSH
11841: LD_INT 44
11843: PUSH
11844: LD_INT 45
11846: PUSH
11847: LD_INT 47
11849: PUSH
11850: LD_INT 49
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: PPUSH
11860: EMPTY
11861: PPUSH
11862: EMPTY
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL 7963 0 11
// end ; end_of_file
11871: END
// every 1 1$0 do
11872: GO 11874
11874: DISABLE
// begin enable ;
11875: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11876: LD_INT 3
11878: PPUSH
11879: LD_INT 5
11881: PPUSH
11882: CALL_OW 12
11886: PPUSH
11887: LD_INT 13
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 55
// end ;
11897: END
